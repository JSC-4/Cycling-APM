
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_table>:
   1c200:	00 1a 02 20 25 34 02 00 b7 d8 03 00 a9 33 02 00     ... %4.......3..
   1c210:	a9 33 02 00 a9 33 02 00 a9 33 02 00 a9 33 02 00     .3...3...3...3..
	...
   1c22c:	6d 2e 02 00 a9 33 02 00 00 00 00 00 d5 2d 02 00     m....3.......-..
   1c23c:	a9 33 02 00                                         .3..

0001c240 <_irq_vector_table>:
   1c240:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c250:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c260:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c270:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c280:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c290:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c2a0:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c2b0:	e9 ee 03 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ...../.../.../..
   1c2c0:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c2d0:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c2e0:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c2f0:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c300:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c310:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c320:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c330:	11 2f 02 00 11 2f 02 00 11 2f 02 00 11 2f 02 00     ./.../.../.../..
   1c340:	11 2f 02 00                                         ./..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
   1c410:	98 0c 03 00 01 00 00 00 00 c2 01 00 00 c2 01 00     ................
   1c420:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	3c01      	subs	r4, #1
   1c57c:	bf28      	it	cs
   1c57e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1c582:	d2e9      	bcs.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_dmul>:
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c7be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c7c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c7c6:	bf1d      	ittte	ne
   1c7c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c7cc:	ea94 0f0c 	teqne	r4, ip
   1c7d0:	ea95 0f0c 	teqne	r5, ip
   1c7d4:	f000 f8de 	bleq	1c994 <__aeabi_dmul+0x1dc>
   1c7d8:	442c      	add	r4, r5
   1c7da:	ea81 0603 	eor.w	r6, r1, r3
   1c7de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c7e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c7e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c7ea:	bf18      	it	ne
   1c7ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c7f8:	d038      	beq.n	1c86c <__aeabi_dmul+0xb4>
   1c7fa:	fba0 ce02 	umull	ip, lr, r0, r2
   1c7fe:	f04f 0500 	mov.w	r5, #0
   1c802:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c80a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c80e:	f04f 0600 	mov.w	r6, #0
   1c812:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c816:	f09c 0f00 	teq	ip, #0
   1c81a:	bf18      	it	ne
   1c81c:	f04e 0e01 	orrne.w	lr, lr, #1
   1c820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c82c:	d204      	bcs.n	1c838 <__aeabi_dmul+0x80>
   1c82e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c832:	416d      	adcs	r5, r5
   1c834:	eb46 0606 	adc.w	r6, r6, r6
   1c838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c83c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c84c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c850:	bf88      	it	hi
   1c852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c856:	d81e      	bhi.n	1c896 <__aeabi_dmul+0xde>
   1c858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c85c:	bf08      	it	eq
   1c85e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c862:	f150 0000 	adcs.w	r0, r0, #0
   1c866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c86a:	bd70      	pop	{r4, r5, r6, pc}
   1c86c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c870:	ea46 0101 	orr.w	r1, r6, r1
   1c874:	ea40 0002 	orr.w	r0, r0, r2
   1c878:	ea81 0103 	eor.w	r1, r1, r3
   1c87c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c880:	bfc2      	ittt	gt
   1c882:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c88a:	bd70      	popgt	{r4, r5, r6, pc}
   1c88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c890:	f04f 0e00 	mov.w	lr, #0
   1c894:	3c01      	subs	r4, #1
   1c896:	f300 80ab 	bgt.w	1c9f0 <__aeabi_dmul+0x238>
   1c89a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c89e:	bfde      	ittt	le
   1c8a0:	2000      	movle	r0, #0
   1c8a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c8a6:	bd70      	pople	{r4, r5, r6, pc}
   1c8a8:	f1c4 0400 	rsb	r4, r4, #0
   1c8ac:	3c20      	subs	r4, #32
   1c8ae:	da35      	bge.n	1c91c <__aeabi_dmul+0x164>
   1c8b0:	340c      	adds	r4, #12
   1c8b2:	dc1b      	bgt.n	1c8ec <__aeabi_dmul+0x134>
   1c8b4:	f104 0414 	add.w	r4, r4, #20
   1c8b8:	f1c4 0520 	rsb	r5, r4, #32
   1c8bc:	fa00 f305 	lsl.w	r3, r0, r5
   1c8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1c8c4:	fa01 f205 	lsl.w	r2, r1, r5
   1c8c8:	ea40 0002 	orr.w	r0, r0, r2
   1c8cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c8d8:	fa21 f604 	lsr.w	r6, r1, r4
   1c8dc:	eb42 0106 	adc.w	r1, r2, r6
   1c8e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c8e4:	bf08      	it	eq
   1c8e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c8ea:	bd70      	pop	{r4, r5, r6, pc}
   1c8ec:	f1c4 040c 	rsb	r4, r4, #12
   1c8f0:	f1c4 0520 	rsb	r5, r4, #32
   1c8f4:	fa00 f304 	lsl.w	r3, r0, r4
   1c8f8:	fa20 f005 	lsr.w	r0, r0, r5
   1c8fc:	fa01 f204 	lsl.w	r2, r1, r4
   1c900:	ea40 0002 	orr.w	r0, r0, r2
   1c904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c90c:	f141 0100 	adc.w	r1, r1, #0
   1c910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c914:	bf08      	it	eq
   1c916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c91a:	bd70      	pop	{r4, r5, r6, pc}
   1c91c:	f1c4 0520 	rsb	r5, r4, #32
   1c920:	fa00 f205 	lsl.w	r2, r0, r5
   1c924:	ea4e 0e02 	orr.w	lr, lr, r2
   1c928:	fa20 f304 	lsr.w	r3, r0, r4
   1c92c:	fa01 f205 	lsl.w	r2, r1, r5
   1c930:	ea43 0302 	orr.w	r3, r3, r2
   1c934:	fa21 f004 	lsr.w	r0, r1, r4
   1c938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c93c:	fa21 f204 	lsr.w	r2, r1, r4
   1c940:	ea20 0002 	bic.w	r0, r0, r2
   1c944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c94c:	bf08      	it	eq
   1c94e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c952:	bd70      	pop	{r4, r5, r6, pc}
   1c954:	f094 0f00 	teq	r4, #0
   1c958:	d10f      	bne.n	1c97a <__aeabi_dmul+0x1c2>
   1c95a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c95e:	0040      	lsls	r0, r0, #1
   1c960:	eb41 0101 	adc.w	r1, r1, r1
   1c964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c968:	bf08      	it	eq
   1c96a:	3c01      	subeq	r4, #1
   1c96c:	d0f7      	beq.n	1c95e <__aeabi_dmul+0x1a6>
   1c96e:	ea41 0106 	orr.w	r1, r1, r6
   1c972:	f095 0f00 	teq	r5, #0
   1c976:	bf18      	it	ne
   1c978:	4770      	bxne	lr
   1c97a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c97e:	0052      	lsls	r2, r2, #1
   1c980:	eb43 0303 	adc.w	r3, r3, r3
   1c984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c988:	bf08      	it	eq
   1c98a:	3d01      	subeq	r5, #1
   1c98c:	d0f7      	beq.n	1c97e <__aeabi_dmul+0x1c6>
   1c98e:	ea43 0306 	orr.w	r3, r3, r6
   1c992:	4770      	bx	lr
   1c994:	ea94 0f0c 	teq	r4, ip
   1c998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c99c:	bf18      	it	ne
   1c99e:	ea95 0f0c 	teqne	r5, ip
   1c9a2:	d00c      	beq.n	1c9be <__aeabi_dmul+0x206>
   1c9a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9a8:	bf18      	it	ne
   1c9aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9ae:	d1d1      	bne.n	1c954 <__aeabi_dmul+0x19c>
   1c9b0:	ea81 0103 	eor.w	r1, r1, r3
   1c9b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9b8:	f04f 0000 	mov.w	r0, #0
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9c2:	bf06      	itte	eq
   1c9c4:	4610      	moveq	r0, r2
   1c9c6:	4619      	moveq	r1, r3
   1c9c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9cc:	d019      	beq.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ce:	ea94 0f0c 	teq	r4, ip
   1c9d2:	d102      	bne.n	1c9da <__aeabi_dmul+0x222>
   1c9d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c9d8:	d113      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9da:	ea95 0f0c 	teq	r5, ip
   1c9de:	d105      	bne.n	1c9ec <__aeabi_dmul+0x234>
   1c9e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c9e4:	bf1c      	itt	ne
   1c9e6:	4610      	movne	r0, r2
   1c9e8:	4619      	movne	r1, r3
   1c9ea:	d10a      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ec:	ea81 0103 	eor.w	r1, r1, r3
   1c9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c9f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c9fc:	f04f 0000 	mov.w	r0, #0
   1ca00:	bd70      	pop	{r4, r5, r6, pc}
   1ca02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ca06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ca0a:	bd70      	pop	{r4, r5, r6, pc}

0001ca0c <__aeabi_ddiv>:
   1ca0c:	b570      	push	{r4, r5, r6, lr}
   1ca0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ca12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ca16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ca1a:	bf1d      	ittte	ne
   1ca1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ca20:	ea94 0f0c 	teqne	r4, ip
   1ca24:	ea95 0f0c 	teqne	r5, ip
   1ca28:	f000 f8a7 	bleq	1cb7a <__aeabi_ddiv+0x16e>
   1ca2c:	eba4 0405 	sub.w	r4, r4, r5
   1ca30:	ea81 0e03 	eor.w	lr, r1, r3
   1ca34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ca3c:	f000 8088 	beq.w	1cb50 <__aeabi_ddiv+0x144>
   1ca40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ca44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ca4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ca50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ca54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ca58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ca5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ca60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ca64:	429d      	cmp	r5, r3
   1ca66:	bf08      	it	eq
   1ca68:	4296      	cmpeq	r6, r2
   1ca6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ca6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ca72:	d202      	bcs.n	1ca7a <__aeabi_ddiv+0x6e>
   1ca74:	085b      	lsrs	r3, r3, #1
   1ca76:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca7a:	1ab6      	subs	r6, r6, r2
   1ca7c:	eb65 0503 	sbc.w	r5, r5, r3
   1ca80:	085b      	lsrs	r3, r3, #1
   1ca82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ca8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ca8e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ca92:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ca96:	bf22      	ittt	cs
   1ca98:	1ab6      	subcs	r6, r6, r2
   1ca9a:	4675      	movcs	r5, lr
   1ca9c:	ea40 000c 	orrcs.w	r0, r0, ip
   1caa0:	085b      	lsrs	r3, r3, #1
   1caa2:	ea4f 0232 	mov.w	r2, r2, rrx
   1caa6:	ebb6 0e02 	subs.w	lr, r6, r2
   1caaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   1caae:	bf22      	ittt	cs
   1cab0:	1ab6      	subcs	r6, r6, r2
   1cab2:	4675      	movcs	r5, lr
   1cab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cab8:	085b      	lsrs	r3, r3, #1
   1caba:	ea4f 0232 	mov.w	r2, r2, rrx
   1cabe:	ebb6 0e02 	subs.w	lr, r6, r2
   1cac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cac6:	bf22      	ittt	cs
   1cac8:	1ab6      	subcs	r6, r6, r2
   1caca:	4675      	movcs	r5, lr
   1cacc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cad0:	085b      	lsrs	r3, r3, #1
   1cad2:	ea4f 0232 	mov.w	r2, r2, rrx
   1cad6:	ebb6 0e02 	subs.w	lr, r6, r2
   1cada:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cade:	bf22      	ittt	cs
   1cae0:	1ab6      	subcs	r6, r6, r2
   1cae2:	4675      	movcs	r5, lr
   1cae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cae8:	ea55 0e06 	orrs.w	lr, r5, r6
   1caec:	d018      	beq.n	1cb20 <__aeabi_ddiv+0x114>
   1caee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1caf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1caf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cafa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cafe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cb02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cb06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cb0a:	d1c0      	bne.n	1ca8e <__aeabi_ddiv+0x82>
   1cb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb10:	d10b      	bne.n	1cb2a <__aeabi_ddiv+0x11e>
   1cb12:	ea41 0100 	orr.w	r1, r1, r0
   1cb16:	f04f 0000 	mov.w	r0, #0
   1cb1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1cb1e:	e7b6      	b.n	1ca8e <__aeabi_ddiv+0x82>
   1cb20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb24:	bf04      	itt	eq
   1cb26:	4301      	orreq	r1, r0
   1cb28:	2000      	moveq	r0, #0
   1cb2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb2e:	bf88      	it	hi
   1cb30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb34:	f63f aeaf 	bhi.w	1c896 <__aeabi_dmul+0xde>
   1cb38:	ebb5 0c03 	subs.w	ip, r5, r3
   1cb3c:	bf04      	itt	eq
   1cb3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   1cb42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1cb46:	f150 0000 	adcs.w	r0, r0, #0
   1cb4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1cb54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1cb58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1cb5c:	bfc2      	ittt	gt
   1cb5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb66:	bd70      	popgt	{r4, r5, r6, pc}
   1cb68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb6c:	f04f 0e00 	mov.w	lr, #0
   1cb70:	3c01      	subs	r4, #1
   1cb72:	e690      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb74:	ea45 0e06 	orr.w	lr, r5, r6
   1cb78:	e68d      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cb7e:	ea94 0f0c 	teq	r4, ip
   1cb82:	bf08      	it	eq
   1cb84:	ea95 0f0c 	teqeq	r5, ip
   1cb88:	f43f af3b 	beq.w	1ca02 <__aeabi_dmul+0x24a>
   1cb8c:	ea94 0f0c 	teq	r4, ip
   1cb90:	d10a      	bne.n	1cba8 <__aeabi_ddiv+0x19c>
   1cb92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1cb96:	f47f af34 	bne.w	1ca02 <__aeabi_dmul+0x24a>
   1cb9a:	ea95 0f0c 	teq	r5, ip
   1cb9e:	f47f af25 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cba2:	4610      	mov	r0, r2
   1cba4:	4619      	mov	r1, r3
   1cba6:	e72c      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cba8:	ea95 0f0c 	teq	r5, ip
   1cbac:	d106      	bne.n	1cbbc <__aeabi_ddiv+0x1b0>
   1cbae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cbb2:	f43f aefd 	beq.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbb6:	4610      	mov	r0, r2
   1cbb8:	4619      	mov	r1, r3
   1cbba:	e722      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cbbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cbc0:	bf18      	it	ne
   1cbc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cbc6:	f47f aec5 	bne.w	1c954 <__aeabi_dmul+0x19c>
   1cbca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cbce:	f47f af0d 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cbd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cbd6:	f47f aeeb 	bne.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbda:	e712      	b.n	1ca02 <__aeabi_dmul+0x24a>

0001cbdc <__gedf2>:
   1cbdc:	f04f 3cff 	mov.w	ip, #4294967295
   1cbe0:	e006      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbe2:	bf00      	nop

0001cbe4 <__ledf2>:
   1cbe4:	f04f 0c01 	mov.w	ip, #1
   1cbe8:	e002      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbea:	bf00      	nop

0001cbec <__cmpdf2>:
   1cbec:	f04f 0c01 	mov.w	ip, #1
   1cbf0:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cbfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc00:	bf18      	it	ne
   1cc02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cc06:	d01b      	beq.n	1cc40 <__cmpdf2+0x54>
   1cc08:	b001      	add	sp, #4
   1cc0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cc0e:	bf0c      	ite	eq
   1cc10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cc14:	ea91 0f03 	teqne	r1, r3
   1cc18:	bf02      	ittt	eq
   1cc1a:	ea90 0f02 	teqeq	r0, r2
   1cc1e:	2000      	moveq	r0, #0
   1cc20:	4770      	bxeq	lr
   1cc22:	f110 0f00 	cmn.w	r0, #0
   1cc26:	ea91 0f03 	teq	r1, r3
   1cc2a:	bf58      	it	pl
   1cc2c:	4299      	cmppl	r1, r3
   1cc2e:	bf08      	it	eq
   1cc30:	4290      	cmpeq	r0, r2
   1cc32:	bf2c      	ite	cs
   1cc34:	17d8      	asrcs	r0, r3, #31
   1cc36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cc3a:	f040 0001 	orr.w	r0, r0, #1
   1cc3e:	4770      	bx	lr
   1cc40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc48:	d102      	bne.n	1cc50 <__cmpdf2+0x64>
   1cc4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cc4e:	d107      	bne.n	1cc60 <__cmpdf2+0x74>
   1cc50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc58:	d1d6      	bne.n	1cc08 <__cmpdf2+0x1c>
   1cc5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cc5e:	d0d3      	beq.n	1cc08 <__cmpdf2+0x1c>
   1cc60:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cc64:	4770      	bx	lr
   1cc66:	bf00      	nop

0001cc68 <__aeabi_cdrcmple>:
   1cc68:	4684      	mov	ip, r0
   1cc6a:	4610      	mov	r0, r2
   1cc6c:	4662      	mov	r2, ip
   1cc6e:	468c      	mov	ip, r1
   1cc70:	4619      	mov	r1, r3
   1cc72:	4663      	mov	r3, ip
   1cc74:	e000      	b.n	1cc78 <__aeabi_cdcmpeq>
   1cc76:	bf00      	nop

0001cc78 <__aeabi_cdcmpeq>:
   1cc78:	b501      	push	{r0, lr}
   1cc7a:	f7ff ffb7 	bl	1cbec <__cmpdf2>
   1cc7e:	2800      	cmp	r0, #0
   1cc80:	bf48      	it	mi
   1cc82:	f110 0f00 	cmnmi.w	r0, #0
   1cc86:	bd01      	pop	{r0, pc}

0001cc88 <__aeabi_dcmpeq>:
   1cc88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cc8c:	f7ff fff4 	bl	1cc78 <__aeabi_cdcmpeq>
   1cc90:	bf0c      	ite	eq
   1cc92:	2001      	moveq	r0, #1
   1cc94:	2000      	movne	r0, #0
   1cc96:	f85d fb08 	ldr.w	pc, [sp], #8
   1cc9a:	bf00      	nop

0001cc9c <__aeabi_dcmplt>:
   1cc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cca0:	f7ff ffea 	bl	1cc78 <__aeabi_cdcmpeq>
   1cca4:	bf34      	ite	cc
   1cca6:	2001      	movcc	r0, #1
   1cca8:	2000      	movcs	r0, #0
   1ccaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccae:	bf00      	nop

0001ccb0 <__aeabi_dcmple>:
   1ccb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccb4:	f7ff ffe0 	bl	1cc78 <__aeabi_cdcmpeq>
   1ccb8:	bf94      	ite	ls
   1ccba:	2001      	movls	r0, #1
   1ccbc:	2000      	movhi	r0, #0
   1ccbe:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccc2:	bf00      	nop

0001ccc4 <__aeabi_dcmpge>:
   1ccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccc8:	f7ff ffce 	bl	1cc68 <__aeabi_cdrcmple>
   1cccc:	bf94      	ite	ls
   1ccce:	2001      	movls	r0, #1
   1ccd0:	2000      	movhi	r0, #0
   1ccd2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccd6:	bf00      	nop

0001ccd8 <__aeabi_dcmpgt>:
   1ccd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccdc:	f7ff ffc4 	bl	1cc68 <__aeabi_cdrcmple>
   1cce0:	bf34      	ite	cc
   1cce2:	2001      	movcc	r0, #1
   1cce4:	2000      	movcs	r0, #0
   1cce6:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccea:	bf00      	nop

0001ccec <__aeabi_dcmpun>:
   1ccec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1ccf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1ccf4:	d102      	bne.n	1ccfc <__aeabi_dcmpun+0x10>
   1ccf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1ccfa:	d10a      	bne.n	1cd12 <__aeabi_dcmpun+0x26>
   1ccfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cd00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cd04:	d102      	bne.n	1cd0c <__aeabi_dcmpun+0x20>
   1cd06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cd0a:	d102      	bne.n	1cd12 <__aeabi_dcmpun+0x26>
   1cd0c:	f04f 0000 	mov.w	r0, #0
   1cd10:	4770      	bx	lr
   1cd12:	f04f 0001 	mov.w	r0, #1
   1cd16:	4770      	bx	lr

0001cd18 <__aeabi_d2iz>:
   1cd18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cd1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd20:	d215      	bcs.n	1cd4e <__aeabi_d2iz+0x36>
   1cd22:	d511      	bpl.n	1cd48 <__aeabi_d2iz+0x30>
   1cd24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd2c:	d912      	bls.n	1cd54 <__aeabi_d2iz+0x3c>
   1cd2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd3e:	fa23 f002 	lsr.w	r0, r3, r2
   1cd42:	bf18      	it	ne
   1cd44:	4240      	negne	r0, r0
   1cd46:	4770      	bx	lr
   1cd48:	f04f 0000 	mov.w	r0, #0
   1cd4c:	4770      	bx	lr
   1cd4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd52:	d105      	bne.n	1cd60 <__aeabi_d2iz+0x48>
   1cd54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cd58:	bf08      	it	eq
   1cd5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cd5e:	4770      	bx	lr
   1cd60:	f04f 0000 	mov.w	r0, #0
   1cd64:	4770      	bx	lr
   1cd66:	bf00      	nop

0001cd68 <__aeabi_d2uiz>:
   1cd68:	004a      	lsls	r2, r1, #1
   1cd6a:	d211      	bcs.n	1cd90 <__aeabi_d2uiz+0x28>
   1cd6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd70:	d211      	bcs.n	1cd96 <__aeabi_d2uiz+0x2e>
   1cd72:	d50d      	bpl.n	1cd90 <__aeabi_d2uiz+0x28>
   1cd74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd7c:	d40e      	bmi.n	1cd9c <__aeabi_d2uiz+0x34>
   1cd7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd8a:	fa23 f002 	lsr.w	r0, r3, r2
   1cd8e:	4770      	bx	lr
   1cd90:	f04f 0000 	mov.w	r0, #0
   1cd94:	4770      	bx	lr
   1cd96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd9a:	d102      	bne.n	1cda2 <__aeabi_d2uiz+0x3a>
   1cd9c:	f04f 30ff 	mov.w	r0, #4294967295
   1cda0:	4770      	bx	lr
   1cda2:	f04f 0000 	mov.w	r0, #0
   1cda6:	4770      	bx	lr

0001cda8 <__aeabi_d2f>:
   1cda8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cdac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1cdb0:	bf24      	itt	cs
   1cdb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1cdb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1cdba:	d90d      	bls.n	1cdd8 <__aeabi_d2f+0x30>
   1cdbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cdc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1cdc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1cdc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1cdcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1cdd0:	bf08      	it	eq
   1cdd2:	f020 0001 	biceq.w	r0, r0, #1
   1cdd6:	4770      	bx	lr
   1cdd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1cddc:	d121      	bne.n	1ce22 <__aeabi_d2f+0x7a>
   1cdde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1cde2:	bfbc      	itt	lt
   1cde4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1cde8:	4770      	bxlt	lr
   1cdea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cdee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1cdf2:	f1c2 0218 	rsb	r2, r2, #24
   1cdf6:	f1c2 0c20 	rsb	ip, r2, #32
   1cdfa:	fa10 f30c 	lsls.w	r3, r0, ip
   1cdfe:	fa20 f002 	lsr.w	r0, r0, r2
   1ce02:	bf18      	it	ne
   1ce04:	f040 0001 	orrne.w	r0, r0, #1
   1ce08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1ce0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1ce10:	fa03 fc0c 	lsl.w	ip, r3, ip
   1ce14:	ea40 000c 	orr.w	r0, r0, ip
   1ce18:	fa23 f302 	lsr.w	r3, r3, r2
   1ce1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1ce20:	e7cc      	b.n	1cdbc <__aeabi_d2f+0x14>
   1ce22:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1ce26:	d107      	bne.n	1ce38 <__aeabi_d2f+0x90>
   1ce28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1ce2c:	bf1e      	ittt	ne
   1ce2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1ce32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1ce36:	4770      	bxne	lr
   1ce38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1ce3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ce40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ce44:	4770      	bx	lr
   1ce46:	bf00      	nop

0001ce48 <__aeabi_ldivmod>:
   1ce48:	b97b      	cbnz	r3, 1ce6a <__aeabi_ldivmod+0x22>
   1ce4a:	b972      	cbnz	r2, 1ce6a <__aeabi_ldivmod+0x22>
   1ce4c:	2900      	cmp	r1, #0
   1ce4e:	bfbe      	ittt	lt
   1ce50:	2000      	movlt	r0, #0
   1ce52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1ce56:	e006      	blt.n	1ce66 <__aeabi_ldivmod+0x1e>
   1ce58:	bf08      	it	eq
   1ce5a:	2800      	cmpeq	r0, #0
   1ce5c:	bf1c      	itt	ne
   1ce5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1ce62:	f04f 30ff 	movne.w	r0, #4294967295
   1ce66:	f000 b875 	b.w	1cf54 <__aeabi_idiv0>
   1ce6a:	f1ad 0c08 	sub.w	ip, sp, #8
   1ce6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ce72:	2900      	cmp	r1, #0
   1ce74:	db09      	blt.n	1ce8a <__aeabi_ldivmod+0x42>
   1ce76:	2b00      	cmp	r3, #0
   1ce78:	db1a      	blt.n	1ceb0 <__aeabi_ldivmod+0x68>
   1ce7a:	f000 f884 	bl	1cf86 <__udivmoddi4>
   1ce7e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce86:	b004      	add	sp, #16
   1ce88:	4770      	bx	lr
   1ce8a:	4240      	negs	r0, r0
   1ce8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce90:	2b00      	cmp	r3, #0
   1ce92:	db1b      	blt.n	1cecc <__aeabi_ldivmod+0x84>
   1ce94:	f000 f877 	bl	1cf86 <__udivmoddi4>
   1ce98:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cea0:	b004      	add	sp, #16
   1cea2:	4240      	negs	r0, r0
   1cea4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cea8:	4252      	negs	r2, r2
   1ceaa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ceae:	4770      	bx	lr
   1ceb0:	4252      	negs	r2, r2
   1ceb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ceb6:	f000 f866 	bl	1cf86 <__udivmoddi4>
   1ceba:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cebe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cec2:	b004      	add	sp, #16
   1cec4:	4240      	negs	r0, r0
   1cec6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ceca:	4770      	bx	lr
   1cecc:	4252      	negs	r2, r2
   1cece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ced2:	f000 f858 	bl	1cf86 <__udivmoddi4>
   1ced6:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ceda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cede:	b004      	add	sp, #16
   1cee0:	4252      	negs	r2, r2
   1cee2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cee6:	4770      	bx	lr

0001cee8 <__aeabi_uldivmod>:
   1cee8:	b953      	cbnz	r3, 1cf00 <__aeabi_uldivmod+0x18>
   1ceea:	b94a      	cbnz	r2, 1cf00 <__aeabi_uldivmod+0x18>
   1ceec:	2900      	cmp	r1, #0
   1ceee:	bf08      	it	eq
   1cef0:	2800      	cmpeq	r0, #0
   1cef2:	bf1c      	itt	ne
   1cef4:	f04f 31ff 	movne.w	r1, #4294967295
   1cef8:	f04f 30ff 	movne.w	r0, #4294967295
   1cefc:	f000 b82a 	b.w	1cf54 <__aeabi_idiv0>
   1cf00:	f1ad 0c08 	sub.w	ip, sp, #8
   1cf04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cf08:	f000 f83d 	bl	1cf86 <__udivmoddi4>
   1cf0c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cf10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cf14:	b004      	add	sp, #16
   1cf16:	4770      	bx	lr

0001cf18 <__aeabi_d2ulz>:
   1cf18:	b5d0      	push	{r4, r6, r7, lr}
   1cf1a:	2200      	movs	r2, #0
   1cf1c:	4b0b      	ldr	r3, [pc, #44]	; (1cf4c <__aeabi_d2ulz+0x34>)
   1cf1e:	4606      	mov	r6, r0
   1cf20:	460f      	mov	r7, r1
   1cf22:	f7ff fc49 	bl	1c7b8 <__aeabi_dmul>
   1cf26:	f7ff ff1f 	bl	1cd68 <__aeabi_d2uiz>
   1cf2a:	4604      	mov	r4, r0
   1cf2c:	f7ff fbca 	bl	1c6c4 <__aeabi_ui2d>
   1cf30:	2200      	movs	r2, #0
   1cf32:	4b07      	ldr	r3, [pc, #28]	; (1cf50 <__aeabi_d2ulz+0x38>)
   1cf34:	f7ff fc40 	bl	1c7b8 <__aeabi_dmul>
   1cf38:	4602      	mov	r2, r0
   1cf3a:	460b      	mov	r3, r1
   1cf3c:	4630      	mov	r0, r6
   1cf3e:	4639      	mov	r1, r7
   1cf40:	f7ff fa82 	bl	1c448 <__aeabi_dsub>
   1cf44:	f7ff ff10 	bl	1cd68 <__aeabi_d2uiz>
   1cf48:	4621      	mov	r1, r4
   1cf4a:	bdd0      	pop	{r4, r6, r7, pc}
   1cf4c:	3df00000 	.word	0x3df00000
   1cf50:	41f00000 	.word	0x41f00000

0001cf54 <__aeabi_idiv0>:
   1cf54:	4770      	bx	lr
   1cf56:	bf00      	nop

0001cf58 <__aeabi_d2lz>:
   1cf58:	b538      	push	{r3, r4, r5, lr}
   1cf5a:	2200      	movs	r2, #0
   1cf5c:	2300      	movs	r3, #0
   1cf5e:	4604      	mov	r4, r0
   1cf60:	460d      	mov	r5, r1
   1cf62:	f7ff fe9b 	bl	1cc9c <__aeabi_dcmplt>
   1cf66:	b928      	cbnz	r0, 1cf74 <__aeabi_d2lz+0x1c>
   1cf68:	4620      	mov	r0, r4
   1cf6a:	4629      	mov	r1, r5
   1cf6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cf70:	f7ff bfd2 	b.w	1cf18 <__aeabi_d2ulz>
   1cf74:	4620      	mov	r0, r4
   1cf76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1cf7a:	f7ff ffcd 	bl	1cf18 <__aeabi_d2ulz>
   1cf7e:	4240      	negs	r0, r0
   1cf80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cf84:	bd38      	pop	{r3, r4, r5, pc}

0001cf86 <__udivmoddi4>:
   1cf86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1cf8c:	4688      	mov	r8, r1
   1cf8e:	468e      	mov	lr, r1
   1cf90:	4615      	mov	r5, r2
   1cf92:	4604      	mov	r4, r0
   1cf94:	4619      	mov	r1, r3
   1cf96:	2b00      	cmp	r3, #0
   1cf98:	f040 80c6 	bne.w	1d128 <__udivmoddi4+0x1a2>
   1cf9c:	4542      	cmp	r2, r8
   1cf9e:	fab2 f782 	clz	r7, r2
   1cfa2:	d946      	bls.n	1d032 <__udivmoddi4+0xac>
   1cfa4:	b14f      	cbz	r7, 1cfba <__udivmoddi4+0x34>
   1cfa6:	f1c7 0c20 	rsb	ip, r7, #32
   1cfaa:	fa08 f307 	lsl.w	r3, r8, r7
   1cfae:	40bd      	lsls	r5, r7
   1cfb0:	40bc      	lsls	r4, r7
   1cfb2:	fa20 fc0c 	lsr.w	ip, r0, ip
   1cfb6:	ea4c 0e03 	orr.w	lr, ip, r3
   1cfba:	ea4f 4815 	mov.w	r8, r5, lsr #16
   1cfbe:	fa1f fc85 	uxth.w	ip, r5
   1cfc2:	0c22      	lsrs	r2, r4, #16
   1cfc4:	fbbe f9f8 	udiv	r9, lr, r8
   1cfc8:	fb08 e319 	mls	r3, r8, r9, lr
   1cfcc:	fb09 fa0c 	mul.w	sl, r9, ip
   1cfd0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   1cfd4:	459a      	cmp	sl, r3
   1cfd6:	d928      	bls.n	1d02a <__udivmoddi4+0xa4>
   1cfd8:	18eb      	adds	r3, r5, r3
   1cfda:	f109 30ff 	add.w	r0, r9, #4294967295
   1cfde:	d204      	bcs.n	1cfea <__udivmoddi4+0x64>
   1cfe0:	459a      	cmp	sl, r3
   1cfe2:	d902      	bls.n	1cfea <__udivmoddi4+0x64>
   1cfe4:	f1a9 0002 	sub.w	r0, r9, #2
   1cfe8:	442b      	add	r3, r5
   1cfea:	eba3 030a 	sub.w	r3, r3, sl
   1cfee:	b2a4      	uxth	r4, r4
   1cff0:	fbb3 f2f8 	udiv	r2, r3, r8
   1cff4:	fb08 3312 	mls	r3, r8, r2, r3
   1cff8:	fb02 fc0c 	mul.w	ip, r2, ip
   1cffc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1d000:	45a4      	cmp	ip, r4
   1d002:	d914      	bls.n	1d02e <__udivmoddi4+0xa8>
   1d004:	192c      	adds	r4, r5, r4
   1d006:	f102 33ff 	add.w	r3, r2, #4294967295
   1d00a:	d203      	bcs.n	1d014 <__udivmoddi4+0x8e>
   1d00c:	45a4      	cmp	ip, r4
   1d00e:	d901      	bls.n	1d014 <__udivmoddi4+0x8e>
   1d010:	1e93      	subs	r3, r2, #2
   1d012:	442c      	add	r4, r5
   1d014:	eba4 040c 	sub.w	r4, r4, ip
   1d018:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1d01c:	b11e      	cbz	r6, 1d026 <__udivmoddi4+0xa0>
   1d01e:	40fc      	lsrs	r4, r7
   1d020:	2300      	movs	r3, #0
   1d022:	6034      	str	r4, [r6, #0]
   1d024:	6073      	str	r3, [r6, #4]
   1d026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d02a:	4648      	mov	r0, r9
   1d02c:	e7dd      	b.n	1cfea <__udivmoddi4+0x64>
   1d02e:	4613      	mov	r3, r2
   1d030:	e7f0      	b.n	1d014 <__udivmoddi4+0x8e>
   1d032:	b902      	cbnz	r2, 1d036 <__udivmoddi4+0xb0>
   1d034:	deff      	udf	#255	; 0xff
   1d036:	bb8f      	cbnz	r7, 1d09c <__udivmoddi4+0x116>
   1d038:	eba8 0302 	sub.w	r3, r8, r2
   1d03c:	2101      	movs	r1, #1
   1d03e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d042:	b2aa      	uxth	r2, r5
   1d044:	0c20      	lsrs	r0, r4, #16
   1d046:	fbb3 fcfe 	udiv	ip, r3, lr
   1d04a:	fb0e 331c 	mls	r3, lr, ip, r3
   1d04e:	fb0c f802 	mul.w	r8, ip, r2
   1d052:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   1d056:	4598      	cmp	r8, r3
   1d058:	d962      	bls.n	1d120 <__udivmoddi4+0x19a>
   1d05a:	18eb      	adds	r3, r5, r3
   1d05c:	f10c 30ff 	add.w	r0, ip, #4294967295
   1d060:	d204      	bcs.n	1d06c <__udivmoddi4+0xe6>
   1d062:	4598      	cmp	r8, r3
   1d064:	d902      	bls.n	1d06c <__udivmoddi4+0xe6>
   1d066:	f1ac 0002 	sub.w	r0, ip, #2
   1d06a:	442b      	add	r3, r5
   1d06c:	eba3 0308 	sub.w	r3, r3, r8
   1d070:	b2a4      	uxth	r4, r4
   1d072:	fbb3 fcfe 	udiv	ip, r3, lr
   1d076:	fb0e 331c 	mls	r3, lr, ip, r3
   1d07a:	fb0c f202 	mul.w	r2, ip, r2
   1d07e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1d082:	42a2      	cmp	r2, r4
   1d084:	d94e      	bls.n	1d124 <__udivmoddi4+0x19e>
   1d086:	192c      	adds	r4, r5, r4
   1d088:	f10c 33ff 	add.w	r3, ip, #4294967295
   1d08c:	d204      	bcs.n	1d098 <__udivmoddi4+0x112>
   1d08e:	42a2      	cmp	r2, r4
   1d090:	d902      	bls.n	1d098 <__udivmoddi4+0x112>
   1d092:	f1ac 0302 	sub.w	r3, ip, #2
   1d096:	442c      	add	r4, r5
   1d098:	1aa4      	subs	r4, r4, r2
   1d09a:	e7bd      	b.n	1d018 <__udivmoddi4+0x92>
   1d09c:	f1c7 0c20 	rsb	ip, r7, #32
   1d0a0:	40bd      	lsls	r5, r7
   1d0a2:	fa08 f307 	lsl.w	r3, r8, r7
   1d0a6:	40bc      	lsls	r4, r7
   1d0a8:	fa28 f90c 	lsr.w	r9, r8, ip
   1d0ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d0b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1d0b4:	ea4c 0203 	orr.w	r2, ip, r3
   1d0b8:	b2ab      	uxth	r3, r5
   1d0ba:	fbb9 fcfe 	udiv	ip, r9, lr
   1d0be:	0c11      	lsrs	r1, r2, #16
   1d0c0:	fb0e 901c 	mls	r0, lr, ip, r9
   1d0c4:	fb0c f803 	mul.w	r8, ip, r3
   1d0c8:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   1d0cc:	4580      	cmp	r8, r0
   1d0ce:	d923      	bls.n	1d118 <__udivmoddi4+0x192>
   1d0d0:	1828      	adds	r0, r5, r0
   1d0d2:	f10c 31ff 	add.w	r1, ip, #4294967295
   1d0d6:	d204      	bcs.n	1d0e2 <__udivmoddi4+0x15c>
   1d0d8:	4580      	cmp	r8, r0
   1d0da:	d902      	bls.n	1d0e2 <__udivmoddi4+0x15c>
   1d0dc:	f1ac 0102 	sub.w	r1, ip, #2
   1d0e0:	4428      	add	r0, r5
   1d0e2:	eba0 0008 	sub.w	r0, r0, r8
   1d0e6:	b292      	uxth	r2, r2
   1d0e8:	fbb0 fcfe 	udiv	ip, r0, lr
   1d0ec:	fb0e 001c 	mls	r0, lr, ip, r0
   1d0f0:	fb0c f803 	mul.w	r8, ip, r3
   1d0f4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   1d0f8:	4598      	cmp	r8, r3
   1d0fa:	d90f      	bls.n	1d11c <__udivmoddi4+0x196>
   1d0fc:	18eb      	adds	r3, r5, r3
   1d0fe:	f10c 32ff 	add.w	r2, ip, #4294967295
   1d102:	d204      	bcs.n	1d10e <__udivmoddi4+0x188>
   1d104:	4598      	cmp	r8, r3
   1d106:	d902      	bls.n	1d10e <__udivmoddi4+0x188>
   1d108:	f1ac 0202 	sub.w	r2, ip, #2
   1d10c:	442b      	add	r3, r5
   1d10e:	eba3 0308 	sub.w	r3, r3, r8
   1d112:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1d116:	e792      	b.n	1d03e <__udivmoddi4+0xb8>
   1d118:	4661      	mov	r1, ip
   1d11a:	e7e2      	b.n	1d0e2 <__udivmoddi4+0x15c>
   1d11c:	4662      	mov	r2, ip
   1d11e:	e7f6      	b.n	1d10e <__udivmoddi4+0x188>
   1d120:	4660      	mov	r0, ip
   1d122:	e7a3      	b.n	1d06c <__udivmoddi4+0xe6>
   1d124:	4663      	mov	r3, ip
   1d126:	e7b7      	b.n	1d098 <__udivmoddi4+0x112>
   1d128:	4543      	cmp	r3, r8
   1d12a:	d905      	bls.n	1d138 <__udivmoddi4+0x1b2>
   1d12c:	b10e      	cbz	r6, 1d132 <__udivmoddi4+0x1ac>
   1d12e:	e9c6 0800 	strd	r0, r8, [r6]
   1d132:	2100      	movs	r1, #0
   1d134:	4608      	mov	r0, r1
   1d136:	e776      	b.n	1d026 <__udivmoddi4+0xa0>
   1d138:	fab3 fc83 	clz	ip, r3
   1d13c:	f1bc 0f00 	cmp.w	ip, #0
   1d140:	d110      	bne.n	1d164 <__udivmoddi4+0x1de>
   1d142:	4543      	cmp	r3, r8
   1d144:	d301      	bcc.n	1d14a <__udivmoddi4+0x1c4>
   1d146:	4282      	cmp	r2, r0
   1d148:	d80a      	bhi.n	1d160 <__udivmoddi4+0x1da>
   1d14a:	1a84      	subs	r4, r0, r2
   1d14c:	eb68 0303 	sbc.w	r3, r8, r3
   1d150:	2001      	movs	r0, #1
   1d152:	469e      	mov	lr, r3
   1d154:	2e00      	cmp	r6, #0
   1d156:	d068      	beq.n	1d22a <__udivmoddi4+0x2a4>
   1d158:	e9c6 4e00 	strd	r4, lr, [r6]
   1d15c:	2100      	movs	r1, #0
   1d15e:	e762      	b.n	1d026 <__udivmoddi4+0xa0>
   1d160:	4660      	mov	r0, ip
   1d162:	e7f7      	b.n	1d154 <__udivmoddi4+0x1ce>
   1d164:	f1cc 0e20 	rsb	lr, ip, #32
   1d168:	fa03 f30c 	lsl.w	r3, r3, ip
   1d16c:	fa02 f50c 	lsl.w	r5, r2, ip
   1d170:	fa00 f70c 	lsl.w	r7, r0, ip
   1d174:	fa22 f40e 	lsr.w	r4, r2, lr
   1d178:	fa28 fb0e 	lsr.w	fp, r8, lr
   1d17c:	fa20 f10e 	lsr.w	r1, r0, lr
   1d180:	431c      	orrs	r4, r3
   1d182:	fa08 f30c 	lsl.w	r3, r8, ip
   1d186:	ea4f 4914 	mov.w	r9, r4, lsr #16
   1d18a:	4319      	orrs	r1, r3
   1d18c:	b2a3      	uxth	r3, r4
   1d18e:	0c0a      	lsrs	r2, r1, #16
   1d190:	fbbb f8f9 	udiv	r8, fp, r9
   1d194:	fb09 bb18 	mls	fp, r9, r8, fp
   1d198:	fb08 fa03 	mul.w	sl, r8, r3
   1d19c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   1d1a0:	4592      	cmp	sl, r2
   1d1a2:	d93e      	bls.n	1d222 <__udivmoddi4+0x29c>
   1d1a4:	18a2      	adds	r2, r4, r2
   1d1a6:	f108 30ff 	add.w	r0, r8, #4294967295
   1d1aa:	d204      	bcs.n	1d1b6 <__udivmoddi4+0x230>
   1d1ac:	4592      	cmp	sl, r2
   1d1ae:	d902      	bls.n	1d1b6 <__udivmoddi4+0x230>
   1d1b0:	f1a8 0002 	sub.w	r0, r8, #2
   1d1b4:	4422      	add	r2, r4
   1d1b6:	eba2 020a 	sub.w	r2, r2, sl
   1d1ba:	b289      	uxth	r1, r1
   1d1bc:	fbb2 f8f9 	udiv	r8, r2, r9
   1d1c0:	fb09 2218 	mls	r2, r9, r8, r2
   1d1c4:	fb08 f303 	mul.w	r3, r8, r3
   1d1c8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   1d1cc:	4293      	cmp	r3, r2
   1d1ce:	d92a      	bls.n	1d226 <__udivmoddi4+0x2a0>
   1d1d0:	18a2      	adds	r2, r4, r2
   1d1d2:	f108 31ff 	add.w	r1, r8, #4294967295
   1d1d6:	d204      	bcs.n	1d1e2 <__udivmoddi4+0x25c>
   1d1d8:	4293      	cmp	r3, r2
   1d1da:	d902      	bls.n	1d1e2 <__udivmoddi4+0x25c>
   1d1dc:	f1a8 0102 	sub.w	r1, r8, #2
   1d1e0:	4422      	add	r2, r4
   1d1e2:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   1d1e6:	1ad2      	subs	r2, r2, r3
   1d1e8:	fba0 9805 	umull	r9, r8, r0, r5
   1d1ec:	4542      	cmp	r2, r8
   1d1ee:	464b      	mov	r3, r9
   1d1f0:	4641      	mov	r1, r8
   1d1f2:	d302      	bcc.n	1d1fa <__udivmoddi4+0x274>
   1d1f4:	d106      	bne.n	1d204 <__udivmoddi4+0x27e>
   1d1f6:	454f      	cmp	r7, r9
   1d1f8:	d204      	bcs.n	1d204 <__udivmoddi4+0x27e>
   1d1fa:	3801      	subs	r0, #1
   1d1fc:	ebb9 0305 	subs.w	r3, r9, r5
   1d200:	eb68 0104 	sbc.w	r1, r8, r4
   1d204:	b18e      	cbz	r6, 1d22a <__udivmoddi4+0x2a4>
   1d206:	1afc      	subs	r4, r7, r3
   1d208:	eb62 0701 	sbc.w	r7, r2, r1
   1d20c:	fa07 fe0e 	lsl.w	lr, r7, lr
   1d210:	fa24 f30c 	lsr.w	r3, r4, ip
   1d214:	fa27 f70c 	lsr.w	r7, r7, ip
   1d218:	ea4e 0303 	orr.w	r3, lr, r3
   1d21c:	e9c6 3700 	strd	r3, r7, [r6]
   1d220:	e79c      	b.n	1d15c <__udivmoddi4+0x1d6>
   1d222:	4640      	mov	r0, r8
   1d224:	e7c7      	b.n	1d1b6 <__udivmoddi4+0x230>
   1d226:	4641      	mov	r1, r8
   1d228:	e7db      	b.n	1d1e2 <__udivmoddi4+0x25c>
   1d22a:	4631      	mov	r1, r6
   1d22c:	e6fb      	b.n	1d026 <__udivmoddi4+0xa0>

0001d22e <strcmp>:
   1d22e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d232:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d236:	2a01      	cmp	r2, #1
   1d238:	bf28      	it	cs
   1d23a:	429a      	cmpcs	r2, r3
   1d23c:	d0f7      	beq.n	1d22e <strcmp>
   1d23e:	1ad0      	subs	r0, r2, r3
   1d240:	4770      	bx	lr

0001d242 <strlen>:
   1d242:	4603      	mov	r3, r0
   1d244:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d248:	2a00      	cmp	r2, #0
   1d24a:	d1fb      	bne.n	1d244 <strlen+0x2>
   1d24c:	1a18      	subs	r0, r3, r0
   1d24e:	3801      	subs	r0, #1
   1d250:	4770      	bx	lr
   1d252:	0000      	movs	r0, r0
   1d254:	0000      	movs	r0, r0
	...

0001d258 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d25c:	ed2d 8b02 	vpush	{d8}
   1d260:	4680      	mov	r8, r0
   1d262:	4689      	mov	r9, r1
   1d264:	4617      	mov	r7, r2
   1d266:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1d268:	2600      	movs	r6, #0
	uint64_t round = BIT64(59); /* 0.5 */
   1d26a:	ed9f 8ba7 	vldr	d8, [pc, #668]	; 1d508 <cbvprintf+0x2b0>
{
   1d26e:	b09d      	sub	sp, #116	; 0x74
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1d270:	7838      	ldrb	r0, [r7, #0]
   1d272:	b910      	cbnz	r0, 1d27a <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1d274:	4630      	mov	r0, r6
   1d276:	f000 beaa 	b.w	1dfce <cbvprintf+0xd76>
			OUTC(*fp++);
   1d27a:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   1d27c:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   1d27e:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   1d280:	d006      	beq.n	1d290 <cbvprintf+0x38>
			OUTC(*fp++);
   1d282:	4649      	mov	r1, r9
			OUTC('%');
   1d284:	47c0      	blx	r8
   1d286:	2800      	cmp	r0, #0
   1d288:	f2c0 86a1 	blt.w	1dfce <cbvprintf+0xd76>
   1d28c:	3601      	adds	r6, #1
		if (bps == NULL) {
   1d28e:	e225      	b.n	1d6dc <cbvprintf+0x484>
		} state = {
   1d290:	2218      	movs	r2, #24
   1d292:	2100      	movs	r1, #0
   1d294:	a80e      	add	r0, sp, #56	; 0x38
   1d296:	f024 f9b4 	bl	41602 <memset>
	if (*sp == '%') {
   1d29a:	787b      	ldrb	r3, [r7, #1]
   1d29c:	2b25      	cmp	r3, #37	; 0x25
   1d29e:	d059      	beq.n	1d354 <cbvprintf+0xfc>
   1d2a0:	1c7a      	adds	r2, r7, #1
   1d2a2:	4615      	mov	r5, r2
		switch (*sp) {
   1d2a4:	f812 3b01 	ldrb.w	r3, [r2], #1
   1d2a8:	2b2b      	cmp	r3, #43	; 0x2b
   1d2aa:	f000 808b 	beq.w	1d3c4 <cbvprintf+0x16c>
   1d2ae:	d879      	bhi.n	1d3a4 <cbvprintf+0x14c>
   1d2b0:	2b20      	cmp	r3, #32
   1d2b2:	f000 808c 	beq.w	1d3ce <cbvprintf+0x176>
   1d2b6:	2b23      	cmp	r3, #35	; 0x23
   1d2b8:	f000 808e 	beq.w	1d3d8 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
   1d2bc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d2c0:	f003 0244 	and.w	r2, r3, #68	; 0x44
   1d2c4:	2a44      	cmp	r2, #68	; 0x44
   1d2c6:	d103      	bne.n	1d2d0 <cbvprintf+0x78>
		conv->flag_zero = false;
   1d2c8:	f36f 1386 	bfc	r3, #6, #1
   1d2cc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   1d2d0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d2d4:	950a      	str	r5, [sp, #40]	; 0x28
   1d2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d2da:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   1d2de:	782b      	ldrb	r3, [r5, #0]
   1d2e0:	2b2a      	cmp	r3, #42	; 0x2a
   1d2e2:	d17e      	bne.n	1d3e2 <cbvprintf+0x18a>
		conv->width_star = true;
   1d2e4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d2e8:	f043 0301 	orr.w	r3, r3, #1
   1d2ec:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		return ++sp;
   1d2f0:	1c6b      	adds	r3, r5, #1
	sp = extract_prec(conv, sp);
   1d2f2:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
   1d2f4:	781a      	ldrb	r2, [r3, #0]
   1d2f6:	2a2e      	cmp	r2, #46	; 0x2e
   1d2f8:	bf0c      	ite	eq
   1d2fa:	2101      	moveq	r1, #1
   1d2fc:	2100      	movne	r1, #0
   1d2fe:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1d302:	f361 0241 	bfi	r2, r1, #1, #1
   1d306:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   1d30a:	d10b      	bne.n	1d324 <cbvprintf+0xcc>
	++sp;
   1d30c:	1c5a      	adds	r2, r3, #1
   1d30e:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
   1d310:	785a      	ldrb	r2, [r3, #1]
   1d312:	2a2a      	cmp	r2, #42	; 0x2a
   1d314:	d17b      	bne.n	1d40e <cbvprintf+0x1b6>
		conv->prec_star = true;
   1d316:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   1d31a:	3302      	adds	r3, #2
		conv->prec_star = true;
   1d31c:	f042 0204 	orr.w	r2, r2, #4
   1d320:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
   1d324:	4619      	mov	r1, r3
   1d326:	f811 0b01 	ldrb.w	r0, [r1], #1
   1d32a:	286c      	cmp	r0, #108	; 0x6c
   1d32c:	f000 80cc 	beq.w	1d4c8 <cbvprintf+0x270>
   1d330:	d87d      	bhi.n	1d42e <cbvprintf+0x1d6>
   1d332:	2868      	cmp	r0, #104	; 0x68
   1d334:	f000 8084 	beq.w	1d440 <cbvprintf+0x1e8>
   1d338:	286a      	cmp	r0, #106	; 0x6a
   1d33a:	f000 80cf 	beq.w	1d4dc <cbvprintf+0x284>
   1d33e:	284c      	cmp	r0, #76	; 0x4c
   1d340:	f000 80d3 	beq.w	1d4ea <cbvprintf+0x292>
		conv->length_mod = LENGTH_NONE;
   1d344:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		break;
   1d348:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
   1d34a:	f36f 02c6 	bfc	r2, #3, #4
   1d34e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		break;
   1d352:	e080      	b.n	1d456 <cbvprintf+0x1fe>
		conv->specifier = *sp++;
   1d354:	1cba      	adds	r2, r7, #2
   1d356:	9203      	str	r2, [sp, #12]
   1d358:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   1d35c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d360:	07dd      	lsls	r5, r3, #31
   1d362:	f140 8172 	bpl.w	1d64a <cbvprintf+0x3f2>
			width = va_arg(ap, int);
   1d366:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
   1d36a:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
   1d36c:	9202      	str	r2, [sp, #8]
			if (width < 0) {
   1d36e:	da08      	bge.n	1d382 <cbvprintf+0x12a>
				conv->flag_dash = true;
   1d370:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1d374:	f042 0204 	orr.w	r2, r2, #4
   1d378:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   1d37c:	9a02      	ldr	r2, [sp, #8]
   1d37e:	4252      	negs	r2, r2
		int width = -1;
   1d380:	9202      	str	r2, [sp, #8]
		if (conv->prec_star) {
   1d382:	0758      	lsls	r0, r3, #29
   1d384:	f140 8169 	bpl.w	1d65a <cbvprintf+0x402>
			int arg = va_arg(ap, int);
   1d388:	f854 5b04 	ldr.w	r5, [r4], #4
			if (arg < 0) {
   1d38c:	2d00      	cmp	r5, #0
   1d38e:	f280 8168 	bge.w	1d662 <cbvprintf+0x40a>
				conv->prec_present = false;
   1d392:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d396:	f36f 0341 	bfc	r3, #1, #1
   1d39a:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   1d39e:	f04f 35ff 	mov.w	r5, #4294967295
   1d3a2:	e15e      	b.n	1d662 <cbvprintf+0x40a>
		switch (*sp) {
   1d3a4:	2b2d      	cmp	r3, #45	; 0x2d
   1d3a6:	d006      	beq.n	1d3b6 <cbvprintf+0x15e>
   1d3a8:	2b30      	cmp	r3, #48	; 0x30
   1d3aa:	d187      	bne.n	1d2bc <cbvprintf+0x64>
			conv->flag_zero = true;
   1d3ac:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d3b4:	e003      	b.n	1d3be <cbvprintf+0x166>
			conv->flag_dash = true;
   1d3b6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d3ba:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   1d3be:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
			break;
   1d3c2:	e76e      	b.n	1d2a2 <cbvprintf+0x4a>
			conv->flag_plus = true;
   1d3c4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d3c8:	f043 0308 	orr.w	r3, r3, #8
   1d3cc:	e7f7      	b.n	1d3be <cbvprintf+0x166>
			conv->flag_space = true;
   1d3ce:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d3d2:	f043 0310 	orr.w	r3, r3, #16
   1d3d6:	e7f2      	b.n	1d3be <cbvprintf+0x166>
			conv->flag_hash = true;
   1d3d8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d3dc:	f043 0320 	orr.w	r3, r3, #32
   1d3e0:	e7ed      	b.n	1d3be <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
   1d3e2:	a80a      	add	r0, sp, #40	; 0x28
   1d3e4:	f004 f8c8 	bl	21578 <extract_decimal>
	if (sp != wp) {
   1d3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d3ea:	42ab      	cmp	r3, r5
   1d3ec:	d081      	beq.n	1d2f2 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
   1d3ee:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
		conv->width_value = width;
   1d3f2:	9011      	str	r0, [sp, #68]	; 0x44
		conv->unsupported |= ((conv->width_value < 0)
   1d3f4:	f3c5 0140 	ubfx	r1, r5, #1, #1
   1d3f8:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
   1d3fc:	0052      	lsls	r2, r2, #1
   1d3fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1d402:	f005 017d 	and.w	r1, r5, #125	; 0x7d
   1d406:	430a      	orrs	r2, r1
   1d408:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
   1d40c:	e771      	b.n	1d2f2 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
   1d40e:	a80a      	add	r0, sp, #40	; 0x28
   1d410:	f004 f8b2 	bl	21578 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1d414:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	conv->prec_value = prec;
   1d418:	9012      	str	r0, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   1d41a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1d41e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   1d422:	f360 0341 	bfi	r3, r0, #1, #1
   1d426:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	return sp;
   1d42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d42c:	e77a      	b.n	1d324 <cbvprintf+0xcc>
	switch (*sp) {
   1d42e:	2874      	cmp	r0, #116	; 0x74
   1d430:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1d434:	d056      	beq.n	1d4e4 <cbvprintf+0x28c>
   1d436:	287a      	cmp	r0, #122	; 0x7a
   1d438:	d184      	bne.n	1d344 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
   1d43a:	4613      	mov	r3, r2
   1d43c:	2206      	movs	r2, #6
   1d43e:	e03e      	b.n	1d4be <cbvprintf+0x266>
		if (*++sp == 'h') {
   1d440:	785a      	ldrb	r2, [r3, #1]
   1d442:	2a68      	cmp	r2, #104	; 0x68
   1d444:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1d448:	d137      	bne.n	1d4ba <cbvprintf+0x262>
			conv->length_mod = LENGTH_HH;
   1d44a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1d44c:	f361 02c6 	bfi	r2, r1, #3, #4
   1d450:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   1d454:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   1d456:	460b      	mov	r3, r1
   1d458:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   1d45c:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   1d45e:	9303      	str	r3, [sp, #12]
   1d460:	f88d 2043 	strb.w	r2, [sp, #67]	; 0x43
	switch (conv->specifier) {
   1d464:	f200 80c9 	bhi.w	1d5fa <cbvprintf+0x3a2>
   1d468:	2a57      	cmp	r2, #87	; 0x57
   1d46a:	d851      	bhi.n	1d510 <cbvprintf+0x2b8>
   1d46c:	2a41      	cmp	r2, #65	; 0x41
   1d46e:	d004      	beq.n	1d47a <cbvprintf+0x222>
   1d470:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   1d474:	2b02      	cmp	r3, #2
   1d476:	f200 80c0 	bhi.w	1d5fa <cbvprintf+0x3a2>
		conv->specifier_cat = SPECIFIER_FP;
   1d47a:	2104      	movs	r1, #4
   1d47c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1d480:	f361 0302 	bfi	r3, r1, #0, #3
   1d484:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			|| (conv->specifier == 'A');
   1d488:	f002 03df 	and.w	r3, r2, #223	; 0xdf
   1d48c:	f1a3 0a41 	sub.w	sl, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
   1d490:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
			|| (conv->specifier == 'A');
   1d494:	f1da 0300 	rsbs	r3, sl, #0
   1d498:	eb43 030a 	adc.w	r3, r3, sl
		conv->specifier_a = (conv->specifier == 'a')
   1d49c:	f363 12c7 	bfi	r2, r3, #7, #1
   1d4a0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (conv->length_mod == LENGTH_L) {
   1d4a4:	b2d3      	uxtb	r3, r2
   1d4a6:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1d4aa:	2a18      	cmp	r2, #24
   1d4ac:	f040 80a2 	bne.w	1d5f4 <cbvprintf+0x39c>
			conv->length_mod = LENGTH_NONE;
   1d4b0:	f36f 03c6 	bfc	r3, #3, #4
   1d4b4:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   1d4b8:	e089      	b.n	1d5ce <cbvprintf+0x376>
			conv->length_mod = LENGTH_H;
   1d4ba:	4613      	mov	r3, r2
   1d4bc:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   1d4be:	f362 03c6 	bfi	r3, r2, #3, #4
   1d4c2:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
   1d4c6:	e7c6      	b.n	1d456 <cbvprintf+0x1fe>
		if (*++sp == 'l') {
   1d4c8:	785a      	ldrb	r2, [r3, #1]
   1d4ca:	2a6c      	cmp	r2, #108	; 0x6c
   1d4cc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1d4d0:	d101      	bne.n	1d4d6 <cbvprintf+0x27e>
			conv->length_mod = LENGTH_LL;
   1d4d2:	2104      	movs	r1, #4
   1d4d4:	e7ba      	b.n	1d44c <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
   1d4d6:	4613      	mov	r3, r2
   1d4d8:	2203      	movs	r2, #3
   1d4da:	e7f0      	b.n	1d4be <cbvprintf+0x266>
		conv->length_mod = LENGTH_J;
   1d4dc:	2205      	movs	r2, #5
   1d4de:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d4e2:	e7ec      	b.n	1d4be <cbvprintf+0x266>
		conv->length_mod = LENGTH_T;
   1d4e4:	4613      	mov	r3, r2
   1d4e6:	2207      	movs	r2, #7
   1d4e8:	e7e9      	b.n	1d4be <cbvprintf+0x266>
		conv->unsupported = true;
   1d4ea:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1d4ee:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1d4f2:	f023 0302 	bic.w	r3, r3, #2
   1d4f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1d4fa:	f043 0302 	orr.w	r3, r3, #2
   1d4fe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
		break;
   1d502:	e7a8      	b.n	1d456 <cbvprintf+0x1fe>
   1d504:	f3af 8000 	nop.w
   1d508:	00000000 	.word	0x00000000
   1d50c:	08000000 	.word	0x08000000
	switch (conv->specifier) {
   1d510:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   1d514:	2b20      	cmp	r3, #32
   1d516:	d870      	bhi.n	1d5fa <cbvprintf+0x3a2>
   1d518:	a101      	add	r1, pc, #4	; (adr r1, 1d520 <cbvprintf+0x2c8>)
   1d51a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1d51e:	bf00      	nop
   1d520:	0001d5d3 	.word	0x0001d5d3
   1d524:	0001d5fb 	.word	0x0001d5fb
   1d528:	0001d5fb 	.word	0x0001d5fb
   1d52c:	0001d5fb 	.word	0x0001d5fb
   1d530:	0001d5fb 	.word	0x0001d5fb
   1d534:	0001d5fb 	.word	0x0001d5fb
   1d538:	0001d5fb 	.word	0x0001d5fb
   1d53c:	0001d5fb 	.word	0x0001d5fb
   1d540:	0001d5fb 	.word	0x0001d5fb
   1d544:	0001d47b 	.word	0x0001d47b
   1d548:	0001d5fb 	.word	0x0001d5fb
   1d54c:	0001d5d3 	.word	0x0001d5d3
   1d550:	0001d5a5 	.word	0x0001d5a5
   1d554:	0001d47b 	.word	0x0001d47b
   1d558:	0001d47b 	.word	0x0001d47b
   1d55c:	0001d47b 	.word	0x0001d47b
   1d560:	0001d5fb 	.word	0x0001d5fb
   1d564:	0001d5a5 	.word	0x0001d5a5
   1d568:	0001d5fb 	.word	0x0001d5fb
   1d56c:	0001d5fb 	.word	0x0001d5fb
   1d570:	0001d5fb 	.word	0x0001d5fb
   1d574:	0001d5fb 	.word	0x0001d5fb
   1d578:	0001d609 	.word	0x0001d609
   1d57c:	0001d5d3 	.word	0x0001d5d3
   1d580:	0001d62d 	.word	0x0001d62d
   1d584:	0001d5fb 	.word	0x0001d5fb
   1d588:	0001d5fb 	.word	0x0001d5fb
   1d58c:	0001d62d 	.word	0x0001d62d
   1d590:	0001d5fb 	.word	0x0001d5fb
   1d594:	0001d5d3 	.word	0x0001d5d3
   1d598:	0001d5fb 	.word	0x0001d5fb
   1d59c:	0001d5fb 	.word	0x0001d5fb
   1d5a0:	0001d5d3 	.word	0x0001d5d3
		conv->specifier_cat = SPECIFIER_SINT;
   1d5a4:	2101      	movs	r1, #1
   1d5a6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		conv->specifier_cat = SPECIFIER_UINT;
   1d5aa:	f361 0302 	bfi	r3, r1, #0, #3
   1d5ae:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d5b2:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d5b6:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1d5ba:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   1d5bc:	bf02      	ittt	eq
   1d5be:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   1d5c2:	f041 0101 	orreq.w	r1, r1, #1
   1d5c6:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   1d5ca:	2a63      	cmp	r2, #99	; 0x63
   1d5cc:	d005      	beq.n	1d5da <cbvprintf+0x382>
	bool unsupported = false;
   1d5ce:	2300      	movs	r3, #0
		break;
   1d5d0:	e006      	b.n	1d5e0 <cbvprintf+0x388>
		conv->specifier_cat = SPECIFIER_UINT;
   1d5d2:	2102      	movs	r1, #2
   1d5d4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1d5d8:	e7e7      	b.n	1d5aa <cbvprintf+0x352>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1d5da:	3b00      	subs	r3, #0
   1d5dc:	bf18      	it	ne
   1d5de:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1d5e0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1d5e4:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1d5e8:	430b      	orrs	r3, r1
   1d5ea:	f363 0241 	bfi	r2, r3, #1, #1
   1d5ee:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   1d5f2:	e6b3      	b.n	1d35c <cbvprintf+0x104>
		} else if ((conv->length_mod != LENGTH_NONE)
   1d5f4:	f013 0f38 	tst.w	r3, #56	; 0x38
   1d5f8:	d0e9      	beq.n	1d5ce <cbvprintf+0x376>
		conv->invalid = true;
   1d5fa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d5fe:	f043 0301 	orr.w	r3, r3, #1
   1d602:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1d606:	e7e2      	b.n	1d5ce <cbvprintf+0x376>
		conv->specifier_cat = SPECIFIER_PTR;
   1d608:	2203      	movs	r2, #3
   1d60a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1d60e:	f362 0302 	bfi	r3, r2, #0, #3
   1d612:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d616:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d61a:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1d61e:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
   1d622:	f1dc 0300 	rsbs	r3, ip, #0
   1d626:	eb43 030c 	adc.w	r3, r3, ip
   1d62a:	e7d9      	b.n	1d5e0 <cbvprintf+0x388>
		conv->specifier_cat = SPECIFIER_PTR;
   1d62c:	2203      	movs	r2, #3
   1d62e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1d632:	f362 0302 	bfi	r3, r2, #0, #3
   1d636:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   1d63a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1d63e:	f013 0f78 	tst.w	r3, #120	; 0x78
   1d642:	bf14      	ite	ne
   1d644:	2301      	movne	r3, #1
   1d646:	2300      	moveq	r3, #0
   1d648:	e7ca      	b.n	1d5e0 <cbvprintf+0x388>
		} else if (conv->width_present) {
   1d64a:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   1d64e:	2a00      	cmp	r2, #0
		int width = -1;
   1d650:	bfac      	ite	ge
   1d652:	f04f 32ff 	movge.w	r2, #4294967295
			width = conv->width_value;
   1d656:	9a11      	ldrlt	r2, [sp, #68]	; 0x44
   1d658:	e692      	b.n	1d380 <cbvprintf+0x128>
		} else if (conv->prec_present) {
   1d65a:	0799      	lsls	r1, r3, #30
   1d65c:	f57f ae9f 	bpl.w	1d39e <cbvprintf+0x146>
			precision = conv->prec_value;
   1d660:	9d12      	ldr	r5, [sp, #72]	; 0x48
		conv->pad0_value = 0;
   1d662:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1d664:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
		    && (conv->specifier_cat == SPECIFIER_FP)
   1d668:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1d66c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   1d670:	f003 0207 	and.w	r2, r3, #7
   1d674:	2a04      	cmp	r2, #4
   1d676:	d107      	bne.n	1d688 <cbvprintf+0x430>
		    && !conv->prec_present) {
   1d678:	078a      	lsls	r2, r1, #30
   1d67a:	d405      	bmi.n	1d688 <cbvprintf+0x430>
			if (conv->specifier_a) {
   1d67c:	f99d 2041 	ldrsb.w	r2, [sp, #65]	; 0x41
				precision = 6;
   1d680:	2a00      	cmp	r2, #0
   1d682:	bfb4      	ite	lt
   1d684:	250d      	movlt	r5, #13
   1d686:	2506      	movge	r5, #6
		enum specifier_cat_enum specifier_cat
   1d688:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1d68c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1d68e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1d692:	d138      	bne.n	1d706 <cbvprintf+0x4ae>
			switch (length_mod) {
   1d694:	1ecb      	subs	r3, r1, #3
   1d696:	2b04      	cmp	r3, #4
   1d698:	d822      	bhi.n	1d6e0 <cbvprintf+0x488>
   1d69a:	e8df f003 	tbb	[pc, r3]
   1d69e:	0903      	.short	0x0903
   1d6a0:	2109      	.short	0x2109
   1d6a2:	21          	.byte	0x21
   1d6a3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1d6a4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   1d6a8:	17da      	asrs	r2, r3, #31
   1d6aa:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   1d6ae:	e006      	b.n	1d6be <cbvprintf+0x466>
					(sint_value_type)va_arg(ap, intmax_t);
   1d6b0:	3407      	adds	r4, #7
   1d6b2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1d6b6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1d6ba:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
		if (conv->invalid || conv->unsupported) {
   1d6be:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
   1d6c2:	f01a 0f03 	tst.w	sl, #3
   1d6c6:	d056      	beq.n	1d776 <cbvprintf+0x51e>
			OUTS(sp, fp);
   1d6c8:	463a      	mov	r2, r7
   1d6ca:	4649      	mov	r1, r9
   1d6cc:	4640      	mov	r0, r8
   1d6ce:	9b03      	ldr	r3, [sp, #12]
   1d6d0:	f01f faa3 	bl	3cc1a <outs>
   1d6d4:	2800      	cmp	r0, #0
   1d6d6:	f2c0 847a 	blt.w	1dfce <cbvprintf+0xd76>
   1d6da:	4406      	add	r6, r0
			continue;
   1d6dc:	9f03      	ldr	r7, [sp, #12]
   1d6de:	e5c7      	b.n	1d270 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1d6e0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1d6e4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1d6e6:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1d6ea:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   1d6ee:	d105      	bne.n	1d6fc <cbvprintf+0x4a4>
				value->uint = (unsigned char)value->uint;
   1d6f0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
				value->uint = (unsigned short)value->uint;
   1d6f4:	930e      	str	r3, [sp, #56]	; 0x38
   1d6f6:	2300      	movs	r3, #0
   1d6f8:	930f      	str	r3, [sp, #60]	; 0x3c
   1d6fa:	e7e0      	b.n	1d6be <cbvprintf+0x466>
			} else if (length_mod == LENGTH_H) {
   1d6fc:	2902      	cmp	r1, #2
   1d6fe:	d1de      	bne.n	1d6be <cbvprintf+0x466>
				value->sint = (short)value->sint;
   1d700:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   1d704:	e7d0      	b.n	1d6a8 <cbvprintf+0x450>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1d706:	2b02      	cmp	r3, #2
   1d708:	d123      	bne.n	1d752 <cbvprintf+0x4fa>
			switch (length_mod) {
   1d70a:	1ecb      	subs	r3, r1, #3
   1d70c:	2b04      	cmp	r3, #4
   1d70e:	d813      	bhi.n	1d738 <cbvprintf+0x4e0>
   1d710:	e8df f003 	tbb	[pc, r3]
   1d714:	120a0a03 	.word	0x120a0a03
   1d718:	12          	.byte	0x12
   1d719:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   1d71a:	2200      	movs	r2, #0
					value->uint = (wchar_t)va_arg(ap,
   1d71c:	6820      	ldr	r0, [r4, #0]
				value->sint = va_arg(ap, int);
   1d71e:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   1d720:	900e      	str	r0, [sp, #56]	; 0x38
   1d722:	920f      	str	r2, [sp, #60]	; 0x3c
					(uint_value_type)va_arg(ap, size_t);
   1d724:	461c      	mov	r4, r3
   1d726:	e7ca      	b.n	1d6be <cbvprintf+0x466>
					(uint_value_type)va_arg(ap,
   1d728:	1de3      	adds	r3, r4, #7
   1d72a:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
   1d72e:	e8f3 ab02 	ldrd	sl, fp, [r3], #8
   1d732:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
				break;
   1d736:	e7f5      	b.n	1d724 <cbvprintf+0x4cc>
					(uint_value_type)va_arg(ap, size_t);
   1d738:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1d73c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   1d73e:	930e      	str	r3, [sp, #56]	; 0x38
   1d740:	f04f 0300 	mov.w	r3, #0
   1d744:	930f      	str	r3, [sp, #60]	; 0x3c
			if (length_mod == LENGTH_HH) {
   1d746:	d0d3      	beq.n	1d6f0 <cbvprintf+0x498>
			} else if (length_mod == LENGTH_H) {
   1d748:	2902      	cmp	r1, #2
   1d74a:	d1b8      	bne.n	1d6be <cbvprintf+0x466>
				value->uint = (unsigned short)value->uint;
   1d74c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1d750:	e7d0      	b.n	1d6f4 <cbvprintf+0x49c>
		} else if (specifier_cat == SPECIFIER_FP) {
   1d752:	2b04      	cmp	r3, #4
   1d754:	d109      	bne.n	1d76a <cbvprintf+0x512>
					(sint_value_type)va_arg(ap, long long);
   1d756:	1de3      	adds	r3, r4, #7
   1d758:	f023 0307 	bic.w	r3, r3, #7
   1d75c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   1d760:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d764:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   1d768:	e7a9      	b.n	1d6be <cbvprintf+0x466>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1d76a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1d76c:	bf04      	itt	eq
   1d76e:	f854 3b04 	ldreq.w	r3, [r4], #4
   1d772:	930e      	streq	r3, [sp, #56]	; 0x38
   1d774:	e7a3      	b.n	1d6be <cbvprintf+0x466>
		switch (conv->specifier) {
   1d776:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1d77a:	2a78      	cmp	r2, #120	; 0x78
   1d77c:	d8ae      	bhi.n	1d6dc <cbvprintf+0x484>
   1d77e:	2a57      	cmp	r2, #87	; 0x57
   1d780:	f200 8090 	bhi.w	1d8a4 <cbvprintf+0x64c>
   1d784:	2a25      	cmp	r2, #37	; 0x25
   1d786:	f000 80d7 	beq.w	1d938 <cbvprintf+0x6e0>
   1d78a:	2a24      	cmp	r2, #36	; 0x24
   1d78c:	d9a6      	bls.n	1d6dc <cbvprintf+0x484>
   1d78e:	2a41      	cmp	r2, #65	; 0x41
   1d790:	d003      	beq.n	1d79a <cbvprintf+0x542>
   1d792:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   1d796:	2b02      	cmp	r3, #2
   1d798:	d8a0      	bhi.n	1d6dc <cbvprintf+0x484>
	} u = {
   1d79a:	e9dd 130e 	ldrd	r1, r3, [sp, #56]	; 0x38
	if ((u.u64 & SIGN_MASK) != 0U) {
   1d79e:	2b00      	cmp	r3, #0
   1d7a0:	f2c0 81bb 	blt.w	1db1a <cbvprintf+0x8c2>
	} else if (conv->flag_plus) {
   1d7a4:	f01a 0f08 	tst.w	sl, #8
   1d7a8:	f040 81b9 	bne.w	1db1e <cbvprintf+0x8c6>
		*sign = ' ';
   1d7ac:	f01a 0710 	ands.w	r7, sl, #16
   1d7b0:	bf18      	it	ne
   1d7b2:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   1d7b4:	f3c3 500a 	ubfx	r0, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   1d7b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1d7bc:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
   1d7c0:	2800      	cmp	r0, #0
   1d7c2:	f040 81ae 	bne.w	1db22 <cbvprintf+0x8ca>
   1d7c6:	ea51 0c03 	orrs.w	ip, r1, r3
   1d7ca:	bf14      	ite	ne
   1d7cc:	f04f 0e01 	movne.w	lr, #1
   1d7d0:	f04f 0e00 	moveq.w	lr, #0
	if (IS_ENABLED(CONFIG_CBPRINTF_FP_A_SUPPORT)
   1d7d4:	f99d c041 	ldrsb.w	ip, [sp, #65]	; 0x41
		c = 'f';
   1d7d8:	2a46      	cmp	r2, #70	; 0x46
   1d7da:	bf08      	it	eq
   1d7dc:	2266      	moveq	r2, #102	; 0x66
	if (IS_ENABLED(CONFIG_CBPRINTF_FP_A_SUPPORT)
   1d7de:	f1bc 0f00 	cmp.w	ip, #0
   1d7e2:	f280 825a 	bge.w	1dc9a <cbvprintf+0xa42>
		*buf++ = '0';
   1d7e6:	f04f 0c30 	mov.w	ip, #48	; 0x30
		*buf++ = 'x';
   1d7ea:	f04f 0b78 	mov.w	fp, #120	; 0x78
		*buf++ = '0';
   1d7ee:	f88d c054 	strb.w	ip, [sp, #84]	; 0x54
		*buf++ = 'x';
   1d7f2:	f88d b055 	strb.w	fp, [sp, #85]	; 0x55
		if (is_subnormal) {
   1d7f6:	f1be 0f00 	cmp.w	lr, #0
   1d7fa:	f040 81cb 	bne.w	1db94 <cbvprintf+0x93c>
			*buf++ = '1';
   1d7fe:	f04f 0c31 	mov.w	ip, #49	; 0x31
		expo -= 1023;
   1d802:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   1d806:	9004      	str	r0, [sp, #16]
		if (!(conv->specifier_a && conv->prec_present)) {
   1d808:	f89d 0041 	ldrb.w	r0, [sp, #65]	; 0x41
   1d80c:	f88d c056 	strb.w	ip, [sp, #86]	; 0x56
   1d810:	ea5f 1bd0 	movs.w	fp, r0, lsr #7
   1d814:	f000 81e9 	beq.w	1dbea <cbvprintf+0x992>
   1d818:	0780      	lsls	r0, r0, #30
   1d81a:	d50c      	bpl.n	1d836 <cbvprintf+0x5de>
		} else if (precision > FRACTION_HEX) {
   1d81c:	2d0d      	cmp	r5, #13
   1d81e:	f340 81bd 	ble.w	1db9c <cbvprintf+0x944>
	bool prune_zero = false;
   1d822:	f04f 0b00 	mov.w	fp, #0
			conv->pad_fp = true;
   1d826:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			conv->pad0_pre_exp = precision - FRACTION_HEX;
   1d82a:	3d0d      	subs	r5, #13
			conv->pad_fp = true;
   1d82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			conv->pad0_pre_exp = precision - FRACTION_HEX;
   1d830:	9512      	str	r5, [sp, #72]	; 0x48
			conv->pad_fp = true;
   1d832:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			precision = FRACTION_HEX;
   1d836:	250d      	movs	r5, #13
		bool require_dp = ((fract != 0) || conv->flag_hash);
   1d838:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1d83c:	ea50 0301 	orrs.w	r3, r0, r1
   1d840:	f040 81d6 	bne.w	1dbf0 <cbvprintf+0x998>
		if (require_dp || (precision != 0)) {
   1d844:	f01a 0a20 	ands.w	sl, sl, #32
   1d848:	f040 81d2 	bne.w	1dbf0 <cbvprintf+0x998>
   1d84c:	2d00      	cmp	r5, #0
   1d84e:	f000 81d2 	beq.w	1dbf6 <cbvprintf+0x99e>
			*buf++ = '.';
   1d852:	232e      	movs	r3, #46	; 0x2e
   1d854:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   1d858:	ab16      	add	r3, sp, #88	; 0x58
		struct conversion aconv = {
   1d85a:	f04f 0c00 	mov.w	ip, #0
			.specifier = isupper((int)c) ? 'X' : 'x',
   1d85e:	3201      	adds	r2, #1
		struct conversion aconv = {
   1d860:	e9cd cc0a 	strd	ip, ip, [sp, #40]	; 0x28
   1d864:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
			.specifier = isupper((int)c) ? 'X' : 'x',
   1d868:	f8df c5ac 	ldr.w	ip, [pc, #1452]	; 1de18 <cbvprintf+0xbc0>
   1d86c:	b2d2      	uxtb	r2, r2
		struct conversion aconv = {
   1d86e:	f812 200c 	ldrb.w	r2, [r2, ip]
   1d872:	f002 0203 	and.w	r2, r2, #3
   1d876:	2a01      	cmp	r2, #1
   1d878:	bf0c      	ite	eq
   1d87a:	2258      	moveq	r2, #88	; 0x58
   1d87c:	2278      	movne	r2, #120	; 0x78
   1d87e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
		if (fract != 0) {
   1d882:	ea50 0201 	orrs.w	r2, r0, r1
   1d886:	f10d 026d 	add.w	r2, sp, #109	; 0x6d
   1d88a:	f000 81f8 	beq.w	1dc7e <cbvprintf+0xa26>
			sp = encode_uint(fract, &aconv, buf, spe);
   1d88e:	9200      	str	r2, [sp, #0]
   1d890:	aa0a      	add	r2, sp, #40	; 0x28
   1d892:	9305      	str	r3, [sp, #20]
   1d894:	f003 fe86 	bl	215a4 <encode_uint>
   1d898:	9b05      	ldr	r3, [sp, #20]
			*--sp = '0';
   1d89a:	f04f 0c30 	mov.w	ip, #48	; 0x30
		while ((spe - sp) < FRACTION_HEX) {
   1d89e:	f10d 026d 	add.w	r2, sp, #109	; 0x6d
   1d8a2:	e1ae      	b.n	1dc02 <cbvprintf+0x9aa>
		switch (conv->specifier) {
   1d8a4:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   1d8a8:	2b20      	cmp	r3, #32
   1d8aa:	f63f af17 	bhi.w	1d6dc <cbvprintf+0x484>
   1d8ae:	a001      	add	r0, pc, #4	; (adr r0, 1d8b4 <cbvprintf+0x65c>)
   1d8b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1d8b4:	0001dabd 	.word	0x0001dabd
   1d8b8:	0001d6dd 	.word	0x0001d6dd
   1d8bc:	0001d6dd 	.word	0x0001d6dd
   1d8c0:	0001d6dd 	.word	0x0001d6dd
   1d8c4:	0001d6dd 	.word	0x0001d6dd
   1d8c8:	0001d6dd 	.word	0x0001d6dd
   1d8cc:	0001d6dd 	.word	0x0001d6dd
   1d8d0:	0001d6dd 	.word	0x0001d6dd
   1d8d4:	0001d6dd 	.word	0x0001d6dd
   1d8d8:	0001d79b 	.word	0x0001d79b
   1d8dc:	0001d6dd 	.word	0x0001d6dd
   1d8e0:	0001d965 	.word	0x0001d965
   1d8e4:	0001da5d 	.word	0x0001da5d
   1d8e8:	0001d79b 	.word	0x0001d79b
   1d8ec:	0001d79b 	.word	0x0001d79b
   1d8f0:	0001d79b 	.word	0x0001d79b
   1d8f4:	0001d6dd 	.word	0x0001d6dd
   1d8f8:	0001da5d 	.word	0x0001da5d
   1d8fc:	0001d6dd 	.word	0x0001d6dd
   1d900:	0001d6dd 	.word	0x0001d6dd
   1d904:	0001d6dd 	.word	0x0001d6dd
   1d908:	0001d6dd 	.word	0x0001d6dd
   1d90c:	0001daf3 	.word	0x0001daf3
   1d910:	0001dabd 	.word	0x0001dabd
   1d914:	0001dac1 	.word	0x0001dac1
   1d918:	0001d6dd 	.word	0x0001d6dd
   1d91c:	0001d6dd 	.word	0x0001d6dd
   1d920:	0001d93f 	.word	0x0001d93f
   1d924:	0001d6dd 	.word	0x0001d6dd
   1d928:	0001dabd 	.word	0x0001dabd
   1d92c:	0001d6dd 	.word	0x0001d6dd
   1d930:	0001d6dd 	.word	0x0001d6dd
   1d934:	0001dabd 	.word	0x0001dabd
			OUTC('%');
   1d938:	4649      	mov	r1, r9
   1d93a:	4610      	mov	r0, r2
   1d93c:	e4a2      	b.n	1d284 <cbvprintf+0x2c>
			if (precision >= 0) {
   1d93e:	2d00      	cmp	r5, #0
			bps = (const char *)value->ptr;
   1d940:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
			if (precision >= 0) {
   1d944:	db0a      	blt.n	1d95c <cbvprintf+0x704>
				len = strnlen(bps, precision);
   1d946:	4629      	mov	r1, r5
   1d948:	4658      	mov	r0, fp
   1d94a:	f024 f854 	bl	419f6 <strnlen>
		char sign = 0;
   1d94e:	2700      	movs	r7, #0
			bpe = bps + len;
   1d950:	eb0b 0a00 	add.w	sl, fp, r0
		if (bps == NULL) {
   1d954:	f1bb 0f00 	cmp.w	fp, #0
   1d958:	d10c      	bne.n	1d974 <cbvprintf+0x71c>
   1d95a:	e6bf      	b.n	1d6dc <cbvprintf+0x484>
				len = strlen(bps);
   1d95c:	4658      	mov	r0, fp
   1d95e:	f7ff fc70 	bl	1d242 <strlen>
   1d962:	e7f4      	b.n	1d94e <cbvprintf+0x6f6>
		char sign = 0;
   1d964:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1d966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			bpe = buf + 1;
   1d968:	f10d 0a55 	add.w	sl, sp, #85	; 0x55
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1d96c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
				bps = encode_float(value->dbl, conv, precision,
   1d970:	f10d 0b54 	add.w	fp, sp, #84	; 0x54
		size_t nj_len = (bpe - bps);
   1d974:	ebaa 030b 	sub.w	r3, sl, fp
		if (sign != 0) {
   1d978:	b107      	cbz	r7, 1d97c <cbvprintf+0x724>
			nj_len += 1U;
   1d97a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1d97c:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   1d980:	06ca      	lsls	r2, r1, #27
   1d982:	f140 831a 	bpl.w	1dfba <cbvprintf+0xd62>
			nj_len += 2U;
   1d986:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
   1d988:	9a11      	ldr	r2, [sp, #68]	; 0x44
		if (conv->pad_fp) {
   1d98a:	0648      	lsls	r0, r1, #25
		nj_len += conv->pad0_value;
   1d98c:	4413      	add	r3, r2
			nj_len += conv->pad0_pre_exp;
   1d98e:	bf44      	itt	mi
   1d990:	9a12      	ldrmi	r2, [sp, #72]	; 0x48
   1d992:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   1d994:	9a02      	ldr	r2, [sp, #8]
   1d996:	2a00      	cmp	r2, #0
   1d998:	dd23      	ble.n	1d9e2 <cbvprintf+0x78a>
			width -= (int)nj_len;
   1d99a:	1ad3      	subs	r3, r2, r3
			if (!conv->flag_dash) {
   1d99c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1d9a0:	0751      	lsls	r1, r2, #29
   1d9a2:	f3c2 0580 	ubfx	r5, r2, #2, #1
   1d9a6:	f100 831b 	bmi.w	1dfe0 <cbvprintf+0xd88>
				if (conv->flag_zero) {
   1d9aa:	0650      	lsls	r0, r2, #25
   1d9ac:	f140 8314 	bpl.w	1dfd8 <cbvprintf+0xd80>
					if (sign != 0) {
   1d9b0:	2f00      	cmp	r7, #0
   1d9b2:	f000 8313 	beq.w	1dfdc <cbvprintf+0xd84>
						OUTC(sign);
   1d9b6:	4649      	mov	r1, r9
   1d9b8:	4638      	mov	r0, r7
   1d9ba:	9302      	str	r3, [sp, #8]
   1d9bc:	47c0      	blx	r8
   1d9be:	2800      	cmp	r0, #0
   1d9c0:	f2c0 8305 	blt.w	1dfce <cbvprintf+0xd76>
						sign = 0;
   1d9c4:	462f      	mov	r7, r5
					pad = '0';
   1d9c6:	2530      	movs	r5, #48	; 0x30
   1d9c8:	9b02      	ldr	r3, [sp, #8]
						OUTC(sign);
   1d9ca:	3601      	adds	r6, #1
					pad = '0';
   1d9cc:	9302      	str	r3, [sp, #8]
   1d9ce:	441e      	add	r6, r3
   1d9d0:	9b02      	ldr	r3, [sp, #8]
   1d9d2:	1af0      	subs	r0, r6, r3
				while (width-- > 0) {
   1d9d4:	2b00      	cmp	r3, #0
   1d9d6:	f103 33ff 	add.w	r3, r3, #4294967295
   1d9da:	9302      	str	r3, [sp, #8]
   1d9dc:	f300 82f1 	bgt.w	1dfc2 <cbvprintf+0xd6a>
   1d9e0:	4606      	mov	r6, r0
		if (sign != 0) {
   1d9e2:	b137      	cbz	r7, 1d9f2 <cbvprintf+0x79a>
			OUTC(sign);
   1d9e4:	4649      	mov	r1, r9
   1d9e6:	4638      	mov	r0, r7
   1d9e8:	47c0      	blx	r8
   1d9ea:	2800      	cmp	r0, #0
   1d9ec:	f2c0 82ef 	blt.w	1dfce <cbvprintf+0xd76>
   1d9f0:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   1d9f2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1d9f6:	0659      	lsls	r1, r3, #25
   1d9f8:	f140 8348 	bpl.w	1e08c <cbvprintf+0xe34>
			if (conv->specifier_a) {
   1d9fc:	f99d 3041 	ldrsb.w	r3, [sp, #65]	; 0x41
   1da00:	eba6 060b 	sub.w	r6, r6, fp
   1da04:	2b00      	cmp	r3, #0
   1da06:	f280 82f7 	bge.w	1dff8 <cbvprintf+0xda0>
   1da0a:	465f      	mov	r7, fp
   1da0c:	eb06 030b 	add.w	r3, r6, fp
				while (*cp != 'p') {
   1da10:	f81b 0b01 	ldrb.w	r0, [fp], #1
   1da14:	2870      	cmp	r0, #112	; 0x70
   1da16:	f040 82e5 	bne.w	1dfe4 <cbvprintf+0xd8c>
			while (pad_len-- > 0) {
   1da1a:	461e      	mov	r6, r3
   1da1c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   1da1e:	441d      	add	r5, r3
   1da20:	1bab      	subs	r3, r5, r6
   1da22:	2b00      	cmp	r3, #0
   1da24:	f300 832b 	bgt.w	1e07e <cbvprintf+0xe26>
			OUTS(cp, bpe);
   1da28:	4653      	mov	r3, sl
   1da2a:	463a      	mov	r2, r7
			OUTS(bps, bpe);
   1da2c:	4649      	mov	r1, r9
   1da2e:	4640      	mov	r0, r8
   1da30:	f01f f8f3 	bl	3cc1a <outs>
   1da34:	2800      	cmp	r0, #0
   1da36:	f2c0 82ca 	blt.w	1dfce <cbvprintf+0xd76>
   1da3a:	9b02      	ldr	r3, [sp, #8]
   1da3c:	4430      	add	r0, r6
   1da3e:	4403      	add	r3, r0
			while (pad_len-- > 0) {
   1da40:	4606      	mov	r6, r0
   1da42:	461d      	mov	r5, r3
		while (width > 0) {
   1da44:	1bab      	subs	r3, r5, r6
   1da46:	2b00      	cmp	r3, #0
   1da48:	f77f ae48 	ble.w	1d6dc <cbvprintf+0x484>
			OUTC(' ');
   1da4c:	4649      	mov	r1, r9
   1da4e:	2020      	movs	r0, #32
   1da50:	47c0      	blx	r8
   1da52:	2800      	cmp	r0, #0
   1da54:	f2c0 82bb 	blt.w	1dfce <cbvprintf+0xd76>
   1da58:	3601      	adds	r6, #1
			--width;
   1da5a:	e7f3      	b.n	1da44 <cbvprintf+0x7ec>
			if (conv->flag_plus) {
   1da5c:	f01a 0f08 	tst.w	sl, #8
   1da60:	d12a      	bne.n	1dab8 <cbvprintf+0x860>
				sign = ' ';
   1da62:	f01a 0710 	ands.w	r7, sl, #16
   1da66:	bf18      	it	ne
   1da68:	2720      	movne	r7, #32
			sint = value->sint;
   1da6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
   1da6e:	2b00      	cmp	r3, #0
   1da70:	da05      	bge.n	1da7e <cbvprintf+0x826>
				sign = '-';
   1da72:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1da74:	4252      	negs	r2, r2
   1da76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1da7a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			bps = encode_uint(value->uint, conv, buf, bpe);
   1da7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1da82:	f10d 036d 	add.w	r3, sp, #109	; 0x6d
   1da86:	9300      	str	r3, [sp, #0]
   1da88:	aa10      	add	r2, sp, #64	; 0x40
   1da8a:	ab15      	add	r3, sp, #84	; 0x54
   1da8c:	f003 fd8a 	bl	215a4 <encode_uint>
   1da90:	4683      	mov	fp, r0
			if (precision >= 0) {
   1da92:	2d00      	cmp	r5, #0
   1da94:	f10d 0a6d 	add.w	sl, sp, #109	; 0x6d
   1da98:	f6ff af5c 	blt.w	1d954 <cbvprintf+0x6fc>
				conv->flag_zero = false;
   1da9c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   1daa0:	ebaa 020b 	sub.w	r2, sl, fp
				conv->flag_zero = false;
   1daa4:	f36f 1386 	bfc	r3, #6, #1
				if (len < (size_t)precision) {
   1daa8:	4295      	cmp	r5, r2
				conv->flag_zero = false;
   1daaa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   1daae:	f67f af51 	bls.w	1d954 <cbvprintf+0x6fc>
					conv->pad0_value = precision - (int)len;
   1dab2:	1aaa      	subs	r2, r5, r2
   1dab4:	9211      	str	r2, [sp, #68]	; 0x44
   1dab6:	e74d      	b.n	1d954 <cbvprintf+0x6fc>
				sign = '+';
   1dab8:	272b      	movs	r7, #43	; 0x2b
   1daba:	e7d6      	b.n	1da6a <cbvprintf+0x812>
		switch (conv->specifier) {
   1dabc:	2700      	movs	r7, #0
   1dabe:	e7de      	b.n	1da7e <cbvprintf+0x826>
			if (value->ptr != NULL) {
   1dac0:	980e      	ldr	r0, [sp, #56]	; 0x38
   1dac2:	2800      	cmp	r0, #0
   1dac4:	f000 8273 	beq.w	1dfae <cbvprintf+0xd56>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1dac8:	f10d 036d 	add.w	r3, sp, #109	; 0x6d
   1dacc:	9300      	str	r3, [sp, #0]
   1dace:	2100      	movs	r1, #0
   1dad0:	ab15      	add	r3, sp, #84	; 0x54
   1dad2:	aa10      	add	r2, sp, #64	; 0x40
   1dad4:	f003 fd66 	bl	215a4 <encode_uint>
				conv->altform_0c = true;
   1dad8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1dadc:	4683      	mov	fp, r0
				conv->altform_0c = true;
   1dade:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1dae2:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1dae6:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1daea:	2700      	movs	r7, #0
				conv->altform_0c = true;
   1daec:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
				goto prec_int_pad0;
   1daf0:	e7cf      	b.n	1da92 <cbvprintf+0x83a>
				store_count(conv, value->ptr, count);
   1daf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   1daf4:	2907      	cmp	r1, #7
   1daf6:	f63f adf1 	bhi.w	1d6dc <cbvprintf+0x484>
   1dafa:	e8df f001 	tbb	[pc, r1]
   1dafe:	040c      	.short	0x040c
   1db00:	08080c06 	.word	0x08080c06
   1db04:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   1db06:	701e      	strb	r6, [r3, #0]
		break;
   1db08:	e5e8      	b.n	1d6dc <cbvprintf+0x484>
		*(short *)dp = (short)count;
   1db0a:	801e      	strh	r6, [r3, #0]
		break;
   1db0c:	e5e6      	b.n	1d6dc <cbvprintf+0x484>
		*(intmax_t *)dp = (intmax_t)count;
   1db0e:	17f2      	asrs	r2, r6, #31
   1db10:	e9c3 6200 	strd	r6, r2, [r3]
		break;
   1db14:	e5e2      	b.n	1d6dc <cbvprintf+0x484>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1db16:	601e      	str	r6, [r3, #0]
		break;
   1db18:	e5e0      	b.n	1d6dc <cbvprintf+0x484>
		*sign = '-';
   1db1a:	272d      	movs	r7, #45	; 0x2d
   1db1c:	e64a      	b.n	1d7b4 <cbvprintf+0x55c>
		*sign = '+';
   1db1e:	272b      	movs	r7, #43	; 0x2b
   1db20:	e648      	b.n	1d7b4 <cbvprintf+0x55c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   1db22:	f240 7cff 	movw	ip, #2047	; 0x7ff
   1db26:	4560      	cmp	r0, ip
   1db28:	d131      	bne.n	1db8e <cbvprintf+0x936>
			if (isupper((int)c)) {
   1db2a:	48bb      	ldr	r0, [pc, #748]	; (1de18 <cbvprintf+0xbc0>)
   1db2c:	3201      	adds	r2, #1
   1db2e:	b2d2      	uxtb	r2, r2
   1db30:	5c12      	ldrb	r2, [r2, r0]
		if (fract == 0) {
   1db32:	430b      	orrs	r3, r1
   1db34:	f002 0203 	and.w	r2, r2, #3
   1db38:	d11b      	bne.n	1db72 <cbvprintf+0x91a>
			if (isupper((int)c)) {
   1db3a:	2a01      	cmp	r2, #1
   1db3c:	d111      	bne.n	1db62 <cbvprintf+0x90a>
				*buf++ = 'I';
   1db3e:	2349      	movs	r3, #73	; 0x49
   1db40:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
				*buf++ = 'N';
   1db44:	234e      	movs	r3, #78	; 0x4e
   1db46:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
				*buf++ = 'F';
   1db4a:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
   1db4c:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
		conv->flag_zero = false;
   1db50:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		*bpe = buf;
   1db54:	f10d 0a57 	add.w	sl, sp, #87	; 0x57
		conv->flag_zero = false;
   1db58:	f36f 1386 	bfc	r3, #6, #1
   1db5c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		return bps;
   1db60:	e706      	b.n	1d970 <cbvprintf+0x718>
				*buf++ = 'i';
   1db62:	2369      	movs	r3, #105	; 0x69
   1db64:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
				*buf++ = 'n';
   1db68:	236e      	movs	r3, #110	; 0x6e
   1db6a:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
				*buf++ = 'f';
   1db6e:	2366      	movs	r3, #102	; 0x66
   1db70:	e7ec      	b.n	1db4c <cbvprintf+0x8f4>
			if (isupper((int)c)) {
   1db72:	2a01      	cmp	r2, #1
				*buf++ = 'N';
   1db74:	bf07      	ittee	eq
   1db76:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
   1db78:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
   1db7a:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
   1db7c:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
   1db7e:	bf0c      	ite	eq
   1db80:	f88d 3054 	strbeq.w	r3, [sp, #84]	; 0x54
				*buf++ = 'n';
   1db84:	f88d 3054 	strbne.w	r3, [sp, #84]	; 0x54
				*buf++ = 'a';
   1db88:	f88d 2055 	strb.w	r2, [sp, #85]	; 0x55
   1db8c:	e7de      	b.n	1db4c <cbvprintf+0x8f4>
	bool is_subnormal = (expo == 0) && (fract != 0);
   1db8e:	f04f 0e00 	mov.w	lr, #0
   1db92:	e61f      	b.n	1d7d4 <cbvprintf+0x57c>
			++expo;
   1db94:	f2a0 30fe 	subw	r0, r0, #1022	; 0x3fe
   1db98:	9004      	str	r0, [sp, #16]
   1db9a:	e635      	b.n	1d808 <cbvprintf+0x5b0>
		} else if ((fract != 0)
   1db9c:	ea51 0003 	orrs.w	r0, r1, r3
   1dba0:	d020      	beq.n	1dbe4 <cbvprintf+0x98c>
			   && (precision < FRACTION_HEX)) {
   1dba2:	2d0d      	cmp	r5, #13
   1dba4:	d01e      	beq.n	1dbe4 <cbvprintf+0x98c>
			uint64_t mask = BIT64(pos);
   1dba6:	2001      	movs	r0, #1
			size_t pos = 4 * (FRACTION_HEX - precision) - 1;
   1dba8:	f1c5 0c0d 	rsb	ip, r5, #13
   1dbac:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
   1dbb0:	f10c 3bff 	add.w	fp, ip, #4294967295
			uint64_t mask = BIT64(pos);
   1dbb4:	f1ac 0e21 	sub.w	lr, ip, #33	; 0x21
   1dbb8:	f1cc 0c21 	rsb	ip, ip, #33	; 0x21
   1dbbc:	fa00 fe0e 	lsl.w	lr, r0, lr
   1dbc0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1dbc4:	ea4e 0c0c 	orr.w	ip, lr, ip
   1dbc8:	fa00 f00b 	lsl.w	r0, r0, fp
			if (fract & mask) {
   1dbcc:	ea01 0b00 	and.w	fp, r1, r0
   1dbd0:	ea03 0e0c 	and.w	lr, r3, ip
   1dbd4:	ea5b 0e0e 	orrs.w	lr, fp, lr
   1dbd8:	d004      	beq.n	1dbe4 <cbvprintf+0x98c>
				fract += mask;
   1dbda:	1809      	adds	r1, r1, r0
   1dbdc:	eb43 030c 	adc.w	r3, r3, ip
   1dbe0:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool prune_zero = false;
   1dbe4:	f04f 0b00 	mov.w	fp, #0
   1dbe8:	e626      	b.n	1d838 <cbvprintf+0x5e0>
			prune_zero = true;
   1dbea:	f04f 0b01 	mov.w	fp, #1
   1dbee:	e622      	b.n	1d836 <cbvprintf+0x5de>
		bool require_dp = ((fract != 0) || conv->flag_hash);
   1dbf0:	f04f 0a01 	mov.w	sl, #1
   1dbf4:	e62d      	b.n	1d852 <cbvprintf+0x5fa>
   1dbf6:	46aa      	mov	sl, r5
   1dbf8:	f10d 0357 	add.w	r3, sp, #87	; 0x57
   1dbfc:	e62d      	b.n	1d85a <cbvprintf+0x602>
			*--sp = '0';
   1dbfe:	f800 cd01 	strb.w	ip, [r0, #-1]!
		while ((spe - sp) < FRACTION_HEX) {
   1dc02:	1a11      	subs	r1, r2, r0
   1dc04:	290c      	cmp	r1, #12
   1dc06:	ddfa      	ble.n	1dbfe <cbvprintf+0x9a6>
		while ((sp < spe) && (precision > 0)) {
   1dc08:	f10d 0c6d 	add.w	ip, sp, #109	; 0x6d
   1dc0c:	eb00 0e05 	add.w	lr, r0, r5
   1dc10:	4560      	cmp	r0, ip
   1dc12:	461d      	mov	r5, r3
   1dc14:	d203      	bcs.n	1dc1e <cbvprintf+0x9c6>
   1dc16:	ebae 0100 	sub.w	r1, lr, r0
   1dc1a:	2900      	cmp	r1, #0
   1dc1c:	dc31      	bgt.n	1dc82 <cbvprintf+0xa2a>
		if (prune_zero) {
   1dc1e:	f1bb 0f00 	cmp.w	fp, #0
   1dc22:	d00a      	beq.n	1dc3a <cbvprintf+0x9e2>
			while (*--buf == '0') {
   1dc24:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1dc28:	1e6b      	subs	r3, r5, #1
   1dc2a:	2930      	cmp	r1, #48	; 0x30
   1dc2c:	d02e      	beq.n	1dc8c <cbvprintf+0xa34>
			if ((*buf != '.') || require_dp) {
   1dc2e:	292e      	cmp	r1, #46	; 0x2e
   1dc30:	d103      	bne.n	1dc3a <cbvprintf+0x9e2>
			while (*--buf == '0') {
   1dc32:	f1ba 0f00 	cmp.w	sl, #0
   1dc36:	bf08      	it	eq
   1dc38:	461d      	moveq	r5, r3
		*buf++ = 'p';
   1dc3a:	46aa      	mov	sl, r5
   1dc3c:	2370      	movs	r3, #112	; 0x70
   1dc3e:	f80a 3b02 	strb.w	r3, [sl], #2
		if (expo >= 0) {
   1dc42:	9b04      	ldr	r3, [sp, #16]
   1dc44:	2b00      	cmp	r3, #0
			expo = -expo;
   1dc46:	bfbb      	ittet	lt
   1dc48:	425b      	neglt	r3, r3
   1dc4a:	9304      	strlt	r3, [sp, #16]
			*buf++ = '+';
   1dc4c:	232b      	movge	r3, #43	; 0x2b
			*buf++ = '-';
   1dc4e:	232d      	movlt	r3, #45	; 0x2d
   1dc50:	f805 3f01 	strb.w	r3, [r5, #1]!
		aconv.specifier = 'i';
   1dc54:	2369      	movs	r3, #105	; 0x69
		sp = encode_uint(expo, &aconv, buf, spe);
   1dc56:	9804      	ldr	r0, [sp, #16]
		aconv.specifier = 'i';
   1dc58:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
		sp = encode_uint(expo, &aconv, buf, spe);
   1dc5c:	9200      	str	r2, [sp, #0]
   1dc5e:	4653      	mov	r3, sl
   1dc60:	aa0a      	add	r2, sp, #40	; 0x28
   1dc62:	17c1      	asrs	r1, r0, #31
   1dc64:	f003 fc9e 	bl	215a4 <encode_uint>
   1dc68:	4603      	mov	r3, r0
		while (sp < spe) {
   1dc6a:	f10d 026d 	add.w	r2, sp, #109	; 0x6d
   1dc6e:	4293      	cmp	r3, r2
   1dc70:	d30e      	bcc.n	1dc90 <cbvprintf+0xa38>
   1dc72:	1a13      	subs	r3, r2, r0
   1dc74:	4290      	cmp	r0, r2
   1dc76:	bf88      	it	hi
   1dc78:	2300      	movhi	r3, #0
   1dc7a:	449a      	add	sl, r3
		return bps;
   1dc7c:	e678      	b.n	1d970 <cbvprintf+0x718>
		char *sp = bps + (spe - bps);
   1dc7e:	4610      	mov	r0, r2
   1dc80:	e60b      	b.n	1d89a <cbvprintf+0x642>
			*buf++ = *sp++;
   1dc82:	f810 1b01 	ldrb.w	r1, [r0], #1
   1dc86:	f803 1b01 	strb.w	r1, [r3], #1
			--precision;
   1dc8a:	e7c1      	b.n	1dc10 <cbvprintf+0x9b8>
   1dc8c:	461d      	mov	r5, r3
   1dc8e:	e7c9      	b.n	1dc24 <cbvprintf+0x9cc>
			*buf++ = *sp++;
   1dc90:	f813 1b01 	ldrb.w	r1, [r3], #1
   1dc94:	f805 1f01 	strb.w	r1, [r5, #1]!
   1dc98:	e7e9      	b.n	1dc6e <cbvprintf+0xa16>
	fract <<= EXPONENT_BITS;
   1dc9a:	02db      	lsls	r3, r3, #11
   1dc9c:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
   1dca0:	02c9      	lsls	r1, r1, #11
	if ((expo | fract) != 0) {
   1dca2:	ea40 0a01 	orr.w	sl, r0, r1
   1dca6:	ea43 7ce0 	orr.w	ip, r3, r0, asr #31
   1dcaa:	ea5a 0c0c 	orrs.w	ip, sl, ip
	fract &= ~SIGN_MASK;
   1dcae:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
   1dcb2:	f000 8082 	beq.w	1ddba <cbvprintf+0xb62>
		if (is_subnormal) {
   1dcb6:	f1be 0f00 	cmp.w	lr, #0
   1dcba:	d149      	bne.n	1dd50 <cbvprintf+0xaf8>
		fract |= BIT_63;
   1dcbc:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   1dcc0:	f2a0 3afe 	subw	sl, r0, #1022	; 0x3fe
		fract |= BIT_63;
   1dcc4:	2000      	movs	r0, #0
		fract *= 5U;
   1dcc6:	f04f 0c05 	mov.w	ip, #5
		fract |= BIT_63;
   1dcca:	4683      	mov	fp, r0
   1dccc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1dcd0:	9309      	str	r3, [sp, #36]	; 0x24
	while (expo < -2) {
   1dcd2:	f11a 0f02 	cmn.w	sl, #2
   1dcd6:	db42      	blt.n	1dd5e <cbvprintf+0xb06>
   1dcd8:	b108      	cbz	r0, 1dcde <cbvprintf+0xa86>
   1dcda:	e9cd 1308 	strd	r1, r3, [sp, #32]
		fract += 2;
   1dcde:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
	while (expo > 0) {
   1dce2:	f1ba 0f00 	cmp.w	sl, #0
   1dce6:	dc4f      	bgt.n	1dd88 <cbvprintf+0xb30>
	fract >>= (4 - expo);
   1dce8:	9909      	ldr	r1, [sp, #36]	; 0x24
   1dcea:	9b08      	ldr	r3, [sp, #32]
   1dcec:	f1ca 0c04 	rsb	ip, sl, #4
   1dcf0:	f10a 001c 	add.w	r0, sl, #28
   1dcf4:	fa01 f000 	lsl.w	r0, r1, r0
   1dcf8:	f1ac 0e20 	sub.w	lr, ip, #32
   1dcfc:	fa23 f30c 	lsr.w	r3, r3, ip
   1dd00:	fa21 fe0e 	lsr.w	lr, r1, lr
   1dd04:	4303      	orrs	r3, r0
   1dd06:	ea43 030e 	orr.w	r3, r3, lr
   1dd0a:	fa21 f10c 	lsr.w	r1, r1, ip
   1dd0e:	e9cd 3108 	strd	r3, r1, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
   1dd12:	f002 03df 	and.w	r3, r2, #223	; 0xdf
   1dd16:	2b47      	cmp	r3, #71	; 0x47
   1dd18:	d157      	bne.n	1ddca <cbvprintf+0xb72>
		if (decexp < (-4 + 1) || decexp > precision) {
   1dd1a:	f11b 0f03 	cmn.w	fp, #3
   1dd1e:	db01      	blt.n	1dd24 <cbvprintf+0xacc>
   1dd20:	455d      	cmp	r5, fp
   1dd22:	da4e      	bge.n	1ddc2 <cbvprintf+0xb6a>
			c += 'e' - 'g';  /* e or E */
   1dd24:	3a02      	subs	r2, #2
			if (precision > 0) {
   1dd26:	2d00      	cmp	r5, #0
			c += 'e' - 'g';  /* e or E */
   1dd28:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
   1dd2a:	dd00      	ble.n	1dd2e <cbvprintf+0xad6>
				precision--;
   1dd2c:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
   1dd2e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1dd32:	0699      	lsls	r1, r3, #26
   1dd34:	d449      	bmi.n	1ddca <cbvprintf+0xb72>
   1dd36:	2d00      	cmp	r5, #0
   1dd38:	bfd4      	ite	le
   1dd3a:	2300      	movle	r3, #0
   1dd3c:	2301      	movgt	r3, #1
	if (c == 'f') {
   1dd3e:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
   1dd40:	9304      	str	r3, [sp, #16]
	if (c == 'f') {
   1dd42:	d144      	bne.n	1ddce <cbvprintf+0xb76>
		if (decimals < 0) {
   1dd44:	eb15 030b 	adds.w	r3, r5, fp
   1dd48:	d542      	bpl.n	1ddd0 <cbvprintf+0xb78>
			decimals = 0;
   1dd4a:	2300      	movs	r3, #0
   1dd4c:	e043      	b.n	1ddd6 <cbvprintf+0xb7e>
				expo--;
   1dd4e:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   1dd50:	1849      	adds	r1, r1, r1
   1dd52:	415b      	adcs	r3, r3
   1dd54:	2b00      	cmp	r3, #0
   1dd56:	dafa      	bge.n	1dd4e <cbvprintf+0xaf6>
   1dd58:	e9cd 1308 	strd	r1, r3, [sp, #32]
   1dd5c:	e7ae      	b.n	1dcbc <cbvprintf+0xa64>
			fract >>= 1;
   1dd5e:	0849      	lsrs	r1, r1, #1
   1dd60:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
   1dd64:	085b      	lsrs	r3, r3, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   1dd66:	f1b3 3f33 	cmp.w	r3, #858993459	; 0x33333333
   1dd6a:	4650      	mov	r0, sl
			expo++;
   1dd6c:	f10a 0a01 	add.w	sl, sl, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   1dd70:	d2f5      	bcs.n	1dd5e <cbvprintf+0xb06>
		fract *= 5U;
   1dd72:	fb0c fe03 	mul.w	lr, ip, r3
   1dd76:	fba1 130c 	umull	r1, r3, r1, ip
		expo++;
   1dd7a:	f100 0a02 	add.w	sl, r0, #2
		fract *= 5U;
   1dd7e:	4473      	add	r3, lr
		decexp--;
   1dd80:	2001      	movs	r0, #1
   1dd82:	f10b 3bff 	add.w	fp, fp, #4294967295
   1dd86:	e7a4      	b.n	1dcd2 <cbvprintf+0xa7a>
		fract += 2;
   1dd88:	3102      	adds	r1, #2
   1dd8a:	f143 0300 	adc.w	r3, r3, #0
		_ldiv5(&fract);
   1dd8e:	a808      	add	r0, sp, #32
		fract += 2;
   1dd90:	e9cd 1308 	strd	r1, r3, [sp, #32]
   1dd94:	9204      	str	r2, [sp, #16]
		_ldiv5(&fract);
   1dd96:	f01e ff11 	bl	3cbbc <_ldiv5>
		expo--;
   1dd9a:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
   1dd9e:	9a04      	ldr	r2, [sp, #16]
   1dda0:	f10a 3aff 	add.w	sl, sl, #4294967295
		decexp++;
   1dda4:	f10b 0b01 	add.w	fp, fp, #1
			fract <<= 1;
   1dda8:	18db      	adds	r3, r3, r3
   1ddaa:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   1ddac:	2900      	cmp	r1, #0
			expo--;
   1ddae:	f10a 3aff 	add.w	sl, sl, #4294967295
		} while (!(fract & BIT_63));
   1ddb2:	daf9      	bge.n	1dda8 <cbvprintf+0xb50>
   1ddb4:	e9cd 3108 	strd	r3, r1, [sp, #32]
   1ddb8:	e791      	b.n	1dcde <cbvprintf+0xa86>
   1ddba:	f04f 0b00 	mov.w	fp, #0
   1ddbe:	46da      	mov	sl, fp
   1ddc0:	e792      	b.n	1dce8 <cbvprintf+0xa90>
			c = 'f';
   1ddc2:	2266      	movs	r2, #102	; 0x66
			precision -= decexp;
   1ddc4:	eba5 050b 	sub.w	r5, r5, fp
   1ddc8:	e7b1      	b.n	1dd2e <cbvprintf+0xad6>
	bool prune_zero = false;
   1ddca:	2300      	movs	r3, #0
   1ddcc:	e7b7      	b.n	1dd3e <cbvprintf+0xae6>
		decimals = precision + 1;
   1ddce:	1c6b      	adds	r3, r5, #1
	if (decimals > 16) {
   1ddd0:	2b10      	cmp	r3, #16
   1ddd2:	bfa8      	it	ge
   1ddd4:	2310      	movge	r3, #16
   1ddd6:	2110      	movs	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
   1ddd8:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
   1dddc:	469a      	mov	sl, r3
   1ddde:	9107      	str	r1, [sp, #28]
	*v >>= 1;
   1dde0:	e9dd 130a 	ldrd	r1, r3, [sp, #40]	; 0x28
	while (decimals--) {
   1dde4:	f1ba 0f00 	cmp.w	sl, #0
   1dde8:	d118      	bne.n	1de1c <cbvprintf+0xbc4>
	fract += round;
   1ddea:	9808      	ldr	r0, [sp, #32]
   1ddec:	1809      	adds	r1, r1, r0
   1ddee:	9809      	ldr	r0, [sp, #36]	; 0x24
   1ddf0:	eb43 0300 	adc.w	r3, r3, r0
	if (fract >= BIT64(60)) {
   1ddf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   1ddf8:	d21e      	bcs.n	1de38 <cbvprintf+0xbe0>
	fract += round;
   1ddfa:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if (c == 'f') {
   1ddfe:	2a66      	cmp	r2, #102	; 0x66
   1de00:	f040 80a3 	bne.w	1df4a <cbvprintf+0xcf2>
		if (decexp > 0) {
   1de04:	f1bb 0f00 	cmp.w	fp, #0
   1de08:	dc24      	bgt.n	1de54 <cbvprintf+0xbfc>
			*buf++ = '0';
   1de0a:	2330      	movs	r3, #48	; 0x30
   1de0c:	f10d 0a55 	add.w	sl, sp, #85	; 0x55
   1de10:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
   1de14:	e032      	b.n	1de7c <cbvprintf+0xc24>
   1de16:	bf00      	nop
   1de18:	0004bf0d 	.word	0x0004bf0d
	*v >>= 1;
   1de1c:	0849      	lsrs	r1, r1, #1
   1de1e:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
	_ldiv5(v);
   1de22:	a80a      	add	r0, sp, #40	; 0x28
	*v >>= 1;
   1de24:	085b      	lsrs	r3, r3, #1
   1de26:	9205      	str	r2, [sp, #20]
   1de28:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
	_ldiv5(v);
   1de2c:	f10a 3aff 	add.w	sl, sl, #4294967295
   1de30:	f01e fec4 	bl	3cbbc <_ldiv5>
   1de34:	9a05      	ldr	r2, [sp, #20]
}
   1de36:	e7d3      	b.n	1dde0 <cbvprintf+0xb88>
	*v >>= 1;
   1de38:	0849      	lsrs	r1, r1, #1
   1de3a:	ea41 71c3 	orr.w	r1, r1, r3, lsl #31
	_ldiv5(v);
   1de3e:	a808      	add	r0, sp, #32
	*v >>= 1;
   1de40:	085b      	lsrs	r3, r3, #1
   1de42:	9205      	str	r2, [sp, #20]
   1de44:	e9cd 1308 	strd	r1, r3, [sp, #32]
		decexp++;
   1de48:	f10b 0b01 	add.w	fp, fp, #1
	_ldiv5(v);
   1de4c:	f01e feb6 	bl	3cbbc <_ldiv5>
		decexp++;
   1de50:	9a05      	ldr	r2, [sp, #20]
   1de52:	e7d4      	b.n	1ddfe <cbvprintf+0xba6>
	char *buf = bps;
   1de54:	f10d 0a54 	add.w	sl, sp, #84	; 0x54
			while (decexp > 0 && digit_count > 0) {
   1de58:	9b07      	ldr	r3, [sp, #28]
   1de5a:	2b00      	cmp	r3, #0
   1de5c:	dd0a      	ble.n	1de74 <cbvprintf+0xc1c>
				*buf++ = _get_digit(&fract, &digit_count);
   1de5e:	a907      	add	r1, sp, #28
   1de60:	a808      	add	r0, sp, #32
   1de62:	9205      	str	r2, [sp, #20]
   1de64:	f01e fec2 	bl	3cbec <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   1de68:	f1bb 0b01 	subs.w	fp, fp, #1
   1de6c:	9a05      	ldr	r2, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
   1de6e:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0 && digit_count > 0) {
   1de72:	d1f1      	bne.n	1de58 <cbvprintf+0xc00>
			conv->pad0_value = decexp;
   1de74:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
			decexp = 0;
   1de78:	f04f 0b00 	mov.w	fp, #0
		if (conv->flag_hash || (precision > 0)) {
   1de7c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1de80:	0698      	lsls	r0, r3, #26
   1de82:	d401      	bmi.n	1de88 <cbvprintf+0xc30>
   1de84:	2d00      	cmp	r5, #0
   1de86:	dd1e      	ble.n	1dec6 <cbvprintf+0xc6e>
			*buf++ = '.';
   1de88:	232e      	movs	r3, #46	; 0x2e
   1de8a:	f80a 3b01 	strb.w	r3, [sl], #1
		if (decexp < 0 && precision > 0) {
   1de8e:	f1bb 0f00 	cmp.w	fp, #0
   1de92:	d013      	beq.n	1debc <cbvprintf+0xc64>
   1de94:	2d00      	cmp	r5, #0
   1de96:	dd16      	ble.n	1dec6 <cbvprintf+0xc6e>
			conv->pad0_value = -decexp;
   1de98:	f1cb 0100 	rsb	r1, fp, #0
   1de9c:	42a9      	cmp	r1, r5
   1de9e:	bfa8      	it	ge
   1dea0:	4629      	movge	r1, r5
			conv->pad_postdp = (conv->pad0_value > 0);
   1dea2:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
   1dea4:	9111      	str	r1, [sp, #68]	; 0x44
			precision -= conv->pad0_value;
   1dea6:	eba5 0501 	sub.w	r5, r5, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   1deaa:	bfd4      	ite	le
   1deac:	2100      	movle	r1, #0
   1deae:	2101      	movgt	r1, #1
   1deb0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1deb4:	f361 1345 	bfi	r3, r1, #5, #1
   1deb8:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
	while (precision > 0 && digit_count > 0) {
   1debc:	2d00      	cmp	r5, #0
   1debe:	dd02      	ble.n	1dec6 <cbvprintf+0xc6e>
   1dec0:	9b07      	ldr	r3, [sp, #28]
   1dec2:	2b00      	cmp	r3, #0
   1dec4:	dc59      	bgt.n	1df7a <cbvprintf+0xd22>
	if (prune_zero) {
   1dec6:	9b04      	ldr	r3, [sp, #16]
   1dec8:	2b00      	cmp	r3, #0
   1deca:	d163      	bne.n	1df94 <cbvprintf+0xd3c>
	conv->pad0_pre_exp = precision;
   1decc:	9512      	str	r5, [sp, #72]	; 0x48
	if ((c == 'e') || (c == 'E')) {
   1dece:	f002 03df 	and.w	r3, r2, #223	; 0xdf
   1ded2:	2b45      	cmp	r3, #69	; 0x45
   1ded4:	d127      	bne.n	1df26 <cbvprintf+0xcce>
		*buf++ = c;
   1ded6:	4653      	mov	r3, sl
		if (decexp < 0) {
   1ded8:	f1bb 0f00 	cmp.w	fp, #0
		*buf++ = c;
   1dedc:	f803 2b02 	strb.w	r2, [r3], #2
			*buf++ = '-';
   1dee0:	bfb6      	itet	lt
   1dee2:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   1dee4:	222b      	movge	r2, #43	; 0x2b
			decexp = -decexp;
   1dee6:	f1cb 0b00 	rsblt	fp, fp, #0
		if (decexp >= 100) {
   1deea:	f1bb 0f63 	cmp.w	fp, #99	; 0x63
   1deee:	f88a 2001 	strb.w	r2, [sl, #1]
   1def2:	dd0a      	ble.n	1df0a <cbvprintf+0xcb2>
			*buf++ = (decexp / 100) + '0';
   1def4:	2164      	movs	r1, #100	; 0x64
   1def6:	fbbb f2f1 	udiv	r2, fp, r1
			decexp %= 100;
   1defa:	fb01 bb12 	mls	fp, r1, r2, fp
			*buf++ = (decexp / 100) + '0';
   1defe:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1df02:	f10a 0303 	add.w	r3, sl, #3
   1df06:	f88a 0002 	strb.w	r0, [sl, #2]
		*buf++ = (decexp / 10) + '0';
   1df0a:	210a      	movs	r1, #10
   1df0c:	fbbb f2f1 	udiv	r2, fp, r1
   1df10:	469a      	mov	sl, r3
		*buf++ = (decexp % 10) + '0';
   1df12:	fb01 bb12 	mls	fp, r1, r2, fp
		*buf++ = (decexp / 10) + '0';
   1df16:	f102 0030 	add.w	r0, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   1df1a:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   1df1e:	f80a 0b02 	strb.w	r0, [sl], #2
		*buf++ = (decexp % 10) + '0';
   1df22:	f883 b001 	strb.w	fp, [r3, #1]
		|| (conv->pad0_pre_exp > 0);
   1df26:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1df28:	2b00      	cmp	r3, #0
   1df2a:	dc3e      	bgt.n	1dfaa <cbvprintf+0xd52>
   1df2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1df2e:	2b00      	cmp	r3, #0
   1df30:	bfd4      	ite	le
   1df32:	2300      	movle	r3, #0
   1df34:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   1df36:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
   1df3a:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   1df3e:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   1df40:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
	*buf = 0;
   1df44:	f88a 3000 	strb.w	r3, [sl]
	return bps;
   1df48:	e512      	b.n	1d970 <cbvprintf+0x718>
		*buf = _get_digit(&fract, &digit_count);
   1df4a:	a907      	add	r1, sp, #28
   1df4c:	a808      	add	r0, sp, #32
   1df4e:	9205      	str	r2, [sp, #20]
   1df50:	f01e fe4c 	bl	3cbec <_get_digit>
		if (conv->flag_hash || (precision > 0)) {
   1df54:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
		if (*buf++ != '0') {
   1df58:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   1df5a:	bf18      	it	ne
   1df5c:	f10b 3bff 	addne.w	fp, fp, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   1df60:	0699      	lsls	r1, r3, #26
		if (*buf++ != '0') {
   1df62:	9a05      	ldr	r2, [sp, #20]
		*buf = _get_digit(&fract, &digit_count);
   1df64:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
		if (conv->flag_hash || (precision > 0)) {
   1df68:	d401      	bmi.n	1df6e <cbvprintf+0xd16>
   1df6a:	2d00      	cmp	r5, #0
   1df6c:	dd0f      	ble.n	1df8e <cbvprintf+0xd36>
			*buf++ = '.';
   1df6e:	232e      	movs	r3, #46	; 0x2e
   1df70:	f10d 0a56 	add.w	sl, sp, #86	; 0x56
   1df74:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
   1df78:	e7a0      	b.n	1debc <cbvprintf+0xc64>
		*buf++ = _get_digit(&fract, &digit_count);
   1df7a:	a907      	add	r1, sp, #28
   1df7c:	a808      	add	r0, sp, #32
   1df7e:	9205      	str	r2, [sp, #20]
   1df80:	f01e fe34 	bl	3cbec <_get_digit>
		precision--;
   1df84:	3d01      	subs	r5, #1
   1df86:	9a05      	ldr	r2, [sp, #20]
		*buf++ = _get_digit(&fract, &digit_count);
   1df88:	f80a 0b01 	strb.w	r0, [sl], #1
		precision--;
   1df8c:	e796      	b.n	1debc <cbvprintf+0xc64>
		if (*buf++ != '0') {
   1df8e:	f10d 0a55 	add.w	sl, sp, #85	; 0x55
   1df92:	e798      	b.n	1dec6 <cbvprintf+0xc6e>
		conv->pad0_pre_exp = 0;
   1df94:	2300      	movs	r3, #0
   1df96:	9312      	str	r3, [sp, #72]	; 0x48
		while (*--buf == '0') {
   1df98:	4651      	mov	r1, sl
   1df9a:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
   1df9e:	2b30      	cmp	r3, #48	; 0x30
   1dfa0:	d0fa      	beq.n	1df98 <cbvprintf+0xd40>
		if (*buf != '.') {
   1dfa2:	2b2e      	cmp	r3, #46	; 0x2e
   1dfa4:	bf18      	it	ne
   1dfa6:	468a      	movne	sl, r1
   1dfa8:	e791      	b.n	1dece <cbvprintf+0xc76>
		|| (conv->pad0_pre_exp > 0);
   1dfaa:	2301      	movs	r3, #1
   1dfac:	e7c3      	b.n	1df36 <cbvprintf+0xcde>
			bpe = bps + 5;
   1dfae:	f8df a12c 	ldr.w	sl, [pc, #300]	; 1e0dc <cbvprintf+0xe84>
		char sign = 0;
   1dfb2:	4607      	mov	r7, r0
			bps = "(nil)";
   1dfb4:	f1aa 0b05 	sub.w	fp, sl, #5
   1dfb8:	e4dc      	b.n	1d974 <cbvprintf+0x71c>
		} else if (conv->altform_0) {
   1dfba:	070d      	lsls	r5, r1, #28
			nj_len += 1U;
   1dfbc:	bf48      	it	mi
   1dfbe:	3301      	addmi	r3, #1
   1dfc0:	e4e2      	b.n	1d988 <cbvprintf+0x730>
					OUTC(pad);
   1dfc2:	4649      	mov	r1, r9
   1dfc4:	4628      	mov	r0, r5
   1dfc6:	47c0      	blx	r8
   1dfc8:	2800      	cmp	r0, #0
   1dfca:	f6bf ad01 	bge.w	1d9d0 <cbvprintf+0x778>
#undef OUTS
#undef OUTC
}
   1dfce:	b01d      	add	sp, #116	; 0x74
   1dfd0:	ecbd 8b02 	vpop	{d8}
   1dfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   1dfd8:	2520      	movs	r5, #32
   1dfda:	e4f7      	b.n	1d9cc <cbvprintf+0x774>
					pad = '0';
   1dfdc:	2530      	movs	r5, #48	; 0x30
   1dfde:	e4f5      	b.n	1d9cc <cbvprintf+0x774>
			width -= (int)nj_len;
   1dfe0:	9302      	str	r3, [sp, #8]
   1dfe2:	e4fe      	b.n	1d9e2 <cbvprintf+0x78a>
					OUTC(*cp++);
   1dfe4:	4649      	mov	r1, r9
   1dfe6:	47c0      	blx	r8
   1dfe8:	2800      	cmp	r0, #0
   1dfea:	f6bf ad0e 	bge.w	1da0a <cbvprintf+0x7b2>
   1dfee:	e7ee      	b.n	1dfce <cbvprintf+0xd76>
					OUTC(*cp++);
   1dff0:	4649      	mov	r1, r9
   1dff2:	47c0      	blx	r8
   1dff4:	2800      	cmp	r0, #0
   1dff6:	dbea      	blt.n	1dfce <cbvprintf+0xd76>
   1dff8:	465d      	mov	r5, fp
				while (isdigit((int)*cp)) {
   1dffa:	f89b 0000 	ldrb.w	r0, [fp]
   1dffe:	4b36      	ldr	r3, [pc, #216]	; (1e0d8 <cbvprintf+0xe80>)
   1e000:	1977      	adds	r7, r6, r5
   1e002:	5cc3      	ldrb	r3, [r0, r3]
   1e004:	f10b 0b01 	add.w	fp, fp, #1
   1e008:	075a      	lsls	r2, r3, #29
   1e00a:	d4f1      	bmi.n	1dff0 <cbvprintf+0xd98>
				if (!conv->pad_postdp) {
   1e00c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
				pad_len = conv->pad0_value;
   1e010:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
				if (!conv->pad_postdp) {
   1e014:	069b      	lsls	r3, r3, #26
   1e016:	d408      	bmi.n	1e02a <cbvprintf+0xdd2>
   1e018:	eb0b 0607 	add.w	r6, fp, r7
   1e01c:	465b      	mov	r3, fp
					while (pad_len-- > 0) {
   1e01e:	2b00      	cmp	r3, #0
   1e020:	eba6 070b 	sub.w	r7, r6, fp
   1e024:	f10b 3bff 	add.w	fp, fp, #4294967295
   1e028:	dc0f      	bgt.n	1e04a <cbvprintf+0xdf2>
				if (*cp == '.') {
   1e02a:	7828      	ldrb	r0, [r5, #0]
   1e02c:	282e      	cmp	r0, #46	; 0x2e
   1e02e:	d109      	bne.n	1e044 <cbvprintf+0xdec>
					OUTC(*cp++);
   1e030:	4649      	mov	r1, r9
   1e032:	47c0      	blx	r8
						OUTC('0');
   1e034:	2800      	cmp	r0, #0
   1e036:	dbca      	blt.n	1dfce <cbvprintf+0xd76>
					while (pad_len-- > 0) {
   1e038:	f1bb 0f00 	cmp.w	fp, #0
						OUTC('0');
   1e03c:	f107 0701 	add.w	r7, r7, #1
					while (pad_len-- > 0) {
   1e040:	dc09      	bgt.n	1e056 <cbvprintf+0xdfe>
					OUTC(*cp++);
   1e042:	3501      	adds	r5, #1
   1e044:	eba7 0b05 	sub.w	fp, r7, r5
   1e048:	e00f      	b.n	1e06a <cbvprintf+0xe12>
						OUTC('0');
   1e04a:	4649      	mov	r1, r9
   1e04c:	2030      	movs	r0, #48	; 0x30
   1e04e:	47c0      	blx	r8
   1e050:	2800      	cmp	r0, #0
   1e052:	dae3      	bge.n	1e01c <cbvprintf+0xdc4>
   1e054:	e7bb      	b.n	1dfce <cbvprintf+0xd76>
						OUTC('0');
   1e056:	4649      	mov	r1, r9
   1e058:	2030      	movs	r0, #48	; 0x30
   1e05a:	47c0      	blx	r8
   1e05c:	f10b 3bff 	add.w	fp, fp, #4294967295
   1e060:	e7e8      	b.n	1e034 <cbvprintf+0xddc>
					OUTC(*cp++);
   1e062:	4649      	mov	r1, r9
   1e064:	47c0      	blx	r8
   1e066:	2800      	cmp	r0, #0
   1e068:	dbb1      	blt.n	1dfce <cbvprintf+0xd76>
   1e06a:	462f      	mov	r7, r5
				while (isdigit((int)*cp)) {
   1e06c:	4a1a      	ldr	r2, [pc, #104]	; (1e0d8 <cbvprintf+0xe80>)
   1e06e:	eb0b 0305 	add.w	r3, fp, r5
   1e072:	f815 0b01 	ldrb.w	r0, [r5], #1
   1e076:	5c12      	ldrb	r2, [r2, r0]
   1e078:	0756      	lsls	r6, r2, #29
   1e07a:	d4f2      	bmi.n	1e062 <cbvprintf+0xe0a>
   1e07c:	e4cd      	b.n	1da1a <cbvprintf+0x7c2>
				OUTC('0');
   1e07e:	4649      	mov	r1, r9
   1e080:	2030      	movs	r0, #48	; 0x30
   1e082:	47c0      	blx	r8
   1e084:	2800      	cmp	r0, #0
   1e086:	dba2      	blt.n	1dfce <cbvprintf+0xd76>
   1e088:	3601      	adds	r6, #1
   1e08a:	e4c9      	b.n	1da20 <cbvprintf+0x7c8>
			if (conv->altform_0c | conv->altform_0) {
   1e08c:	06d9      	lsls	r1, r3, #27
   1e08e:	d401      	bmi.n	1e094 <cbvprintf+0xe3c>
   1e090:	071a      	lsls	r2, r3, #28
   1e092:	d505      	bpl.n	1e0a0 <cbvprintf+0xe48>
				OUTC('0');
   1e094:	4649      	mov	r1, r9
   1e096:	2030      	movs	r0, #48	; 0x30
   1e098:	47c0      	blx	r8
   1e09a:	2800      	cmp	r0, #0
   1e09c:	db97      	blt.n	1dfce <cbvprintf+0xd76>
   1e09e:	3601      	adds	r6, #1
			if (conv->altform_0c) {
   1e0a0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1e0a4:	06db      	lsls	r3, r3, #27
   1e0a6:	d506      	bpl.n	1e0b6 <cbvprintf+0xe5e>
				OUTC(conv->specifier);
   1e0a8:	4649      	mov	r1, r9
   1e0aa:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   1e0ae:	47c0      	blx	r8
   1e0b0:	2800      	cmp	r0, #0
   1e0b2:	db8c      	blt.n	1dfce <cbvprintf+0xd76>
   1e0b4:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
   1e0b6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1e0b8:	4435      	add	r5, r6
   1e0ba:	1bab      	subs	r3, r5, r6
   1e0bc:	2b00      	cmp	r3, #0
   1e0be:	dc02      	bgt.n	1e0c6 <cbvprintf+0xe6e>
			OUTS(bps, bpe);
   1e0c0:	4653      	mov	r3, sl
   1e0c2:	465a      	mov	r2, fp
   1e0c4:	e4b2      	b.n	1da2c <cbvprintf+0x7d4>
				OUTC('0');
   1e0c6:	4649      	mov	r1, r9
   1e0c8:	2030      	movs	r0, #48	; 0x30
   1e0ca:	47c0      	blx	r8
   1e0cc:	2800      	cmp	r0, #0
   1e0ce:	f6ff af7e 	blt.w	1dfce <cbvprintf+0xd76>
   1e0d2:	3601      	adds	r6, #1
   1e0d4:	e7f1      	b.n	1e0ba <cbvprintf+0xe62>
   1e0d6:	bf00      	nop
   1e0d8:	0004bf0e 	.word	0x0004bf0e
   1e0dc:	000442f0 	.word	0x000442f0

0001e0e0 <clock_settime>:
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;
	k_spinlock_key_t key;

	if (clock_id != CLOCK_REALTIME) {
   1e0e0:	2801      	cmp	r0, #1
{
   1e0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e0e4:	460e      	mov	r6, r1
	if (clock_id != CLOCK_REALTIME) {
   1e0e6:	d006      	beq.n	1e0f6 <clock_settime+0x16>
		errno = EINVAL;
   1e0e8:	f01f fc30 	bl	3d94c <__errno>
   1e0ec:	2316      	movs	r3, #22
   1e0ee:	6003      	str	r3, [r0, #0]
		return -1;
   1e0f0:	f04f 30ff 	mov.w	r0, #4294967295
	key = k_spin_lock(&rt_clock_base_lock);
	rt_clock_base = base;
	k_spin_unlock(&rt_clock_base_lock, key);

	return 0;
}
   1e0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   1e0f6:	f023 f8f4 	bl	412e2 <z_impl_k_uptime_ticks>
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
   1e0fa:	4a33      	ldr	r2, [pc, #204]	; (1e1c8 <clock_settime+0xe8>)
   1e0fc:	6833      	ldr	r3, [r6, #0]
   1e0fe:	6874      	ldr	r4, [r6, #4]
   1e100:	fba3 3502 	umull	r3, r5, r3, r2
   1e104:	68b6      	ldr	r6, [r6, #8]
   1e106:	fb02 5504 	mla	r5, r2, r4, r5
   1e10a:	199c      	adds	r4, r3, r6
			return ((t * to_hz + off) / from_hz);
		} else {
			/* Slower algorithm but input is first divided before being multiplied
			 * which prevents overflow of intermediate value.
			 */
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
   1e10c:	ea4f 33d0 	mov.w	r3, r0, lsr #15
   1e110:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1e114:	eb45 75e6 	adc.w	r5, r5, r6, asr #31
   1e118:	fba3 3602 	umull	r3, r6, r3, r2
   1e11c:	0bc9      	lsrs	r1, r1, #15
   1e11e:	f3c0 000e 	ubfx	r0, r0, #0, #15
   1e122:	fb02 6101 	mla	r1, r2, r1, r6
   1e126:	fba0 0202 	umull	r0, r2, r0, r2
		- elapsed_nsecs;
   1e12a:	1ae4      	subs	r4, r4, r3
   1e12c:	ea4f 33d0 	mov.w	r3, r0, lsr #15
   1e130:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   1e134:	eb65 0501 	sbc.w	r5, r5, r1
   1e138:	1ae4      	subs	r4, r4, r3
   1e13a:	f165 0500 	sbc.w	r5, r5, #0
	base.tv_sec = delta / NSEC_PER_SEC;
   1e13e:	4620      	mov	r0, r4
   1e140:	a31f      	add	r3, pc, #124	; (adr r3, 1e1c0 <clock_settime+0xe0>)
   1e142:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e146:	4629      	mov	r1, r5
   1e148:	f7fe fe7e 	bl	1ce48 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
   1e14c:	a31c      	add	r3, pc, #112	; (adr r3, 1e1c0 <clock_settime+0xe0>)
   1e14e:	e9d3 2300 	ldrd	r2, r3, [r3]
	base.tv_sec = delta / NSEC_PER_SEC;
   1e152:	4607      	mov	r7, r0
   1e154:	460e      	mov	r6, r1
	base.tv_nsec = delta % NSEC_PER_SEC;
   1e156:	4620      	mov	r0, r4
   1e158:	4629      	mov	r1, r5
   1e15a:	f7fe fe75 	bl	1ce48 <__aeabi_ldivmod>
   1e15e:	4614      	mov	r4, r2
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1e160:	f04f 0320 	mov.w	r3, #32
   1e164:	f3ef 8511 	mrs	r5, BASEPRI
   1e168:	f383 8812 	msr	BASEPRI_MAX, r3
   1e16c:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e170:	4816      	ldr	r0, [pc, #88]	; (1e1cc <clock_settime+0xec>)
   1e172:	f018 fac1 	bl	366f8 <z_spin_lock_valid>
   1e176:	b940      	cbnz	r0, 1e18a <clock_settime+0xaa>
   1e178:	4915      	ldr	r1, [pc, #84]	; (1e1d0 <clock_settime+0xf0>)
   1e17a:	4816      	ldr	r0, [pc, #88]	; (1e1d4 <clock_settime+0xf4>)
   1e17c:	228e      	movs	r2, #142	; 0x8e
   1e17e:	f01e fd6c 	bl	3cc5a <assert_print>
   1e182:	218e      	movs	r1, #142	; 0x8e
   1e184:	4812      	ldr	r0, [pc, #72]	; (1e1d0 <clock_settime+0xf0>)
   1e186:	f01e fd61 	bl	3cc4c <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   1e18a:	4810      	ldr	r0, [pc, #64]	; (1e1cc <clock_settime+0xec>)
   1e18c:	f018 fad2 	bl	36734 <z_spin_lock_set_owner>
	rt_clock_base = base;
   1e190:	4b11      	ldr	r3, [pc, #68]	; (1e1d8 <clock_settime+0xf8>)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e192:	480e      	ldr	r0, [pc, #56]	; (1e1cc <clock_settime+0xec>)
   1e194:	e9c3 7600 	strd	r7, r6, [r3]
   1e198:	609c      	str	r4, [r3, #8]
   1e19a:	f018 fabb 	bl	36714 <z_spin_unlock_valid>
   1e19e:	b940      	cbnz	r0, 1e1b2 <clock_settime+0xd2>
   1e1a0:	490b      	ldr	r1, [pc, #44]	; (1e1d0 <clock_settime+0xf0>)
   1e1a2:	480c      	ldr	r0, [pc, #48]	; (1e1d4 <clock_settime+0xf4>)
   1e1a4:	22b9      	movs	r2, #185	; 0xb9
   1e1a6:	f01e fd58 	bl	3cc5a <assert_print>
   1e1aa:	21b9      	movs	r1, #185	; 0xb9
   1e1ac:	4808      	ldr	r0, [pc, #32]	; (1e1d0 <clock_settime+0xf0>)
   1e1ae:	f01e fd4d 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1e1b2:	f385 8811 	msr	BASEPRI, r5
   1e1b6:	f3bf 8f6f 	isb	sy
	return 0;
   1e1ba:	2000      	movs	r0, #0
   1e1bc:	e79a      	b.n	1e0f4 <clock_settime+0x14>
   1e1be:	bf00      	nop
   1e1c0:	3b9aca00 	.word	0x3b9aca00
   1e1c4:	00000000 	.word	0x00000000
   1e1c8:	3b9aca00 	.word	0x3b9aca00
   1e1cc:	200191e4 	.word	0x200191e4
   1e1d0:	0004429d 	.word	0x0004429d
   1e1d4:	00044263 	.word	0x00044263
   1e1d8:	200153c0 	.word	0x200153c0
   1e1dc:	00000000 	.word	0x00000000

0001e1e0 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
   1e1e0:	b570      	push	{r4, r5, r6, lr}
   1e1e2:	ed2d 8b02 	vpush	{d8}
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   1e1e6:	2300      	movs	r3, #0
{
   1e1e8:	b086      	sub	sp, #24
	struct at_param_list resp_list = {0};
   1e1ea:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1e1ee:	2304      	movs	r3, #4
{
   1e1f0:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   1e1f2:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
   1e1f4:	9301      	str	r3, [sp, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   1e1f6:	2800      	cmp	r0, #0
   1e1f8:	f000 80a4 	beq.w	1e344 <parse_edrx+0x164>
   1e1fc:	2900      	cmp	r1, #0
   1e1fe:	f000 80a1 	beq.w	1e344 <parse_edrx+0x164>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   1e202:	2106      	movs	r1, #6
   1e204:	a804      	add	r0, sp, #16
   1e206:	f021 f8a3 	bl	3f350 <at_params_list_init>
	if (err) {
   1e20a:	4604      	mov	r4, r0
   1e20c:	b148      	cbz	r0, 1e222 <parse_edrx+0x42>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1e20e:	4602      	mov	r2, r0
   1e210:	2145      	movs	r1, #69	; 0x45
   1e212:	4851      	ldr	r0, [pc, #324]	; (1e358 <parse_edrx+0x178>)
   1e214:	f01e fd5b 	bl	3ccce <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1e218:	4620      	mov	r0, r4
   1e21a:	b006      	add	sp, #24
   1e21c:	ecbd 8b02 	vpop	{d8}
   1e220:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response,
   1e222:	4601      	mov	r1, r0
   1e224:	aa04      	add	r2, sp, #16
   1e226:	4630      	mov	r0, r6
   1e228:	f021 f88f 	bl	3f34a <at_parser_params_from_str>
	if (err) {
   1e22c:	4604      	mov	r4, r0
   1e22e:	b140      	cbz	r0, 1e242 <parse_edrx+0x62>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   1e230:	2145      	movs	r1, #69	; 0x45
   1e232:	4602      	mov	r2, r0
   1e234:	4849      	ldr	r0, [pc, #292]	; (1e35c <parse_edrx+0x17c>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1e236:	f01e fd4a 	bl	3ccce <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   1e23a:	a804      	add	r0, sp, #16
   1e23c:	f021 f89b 	bl	3f376 <at_params_list_free>
	return err;
   1e240:	e7ea      	b.n	1e218 <parse_edrx+0x38>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1e242:	2103      	movs	r1, #3
   1e244:	ab01      	add	r3, sp, #4
   1e246:	aa02      	add	r2, sp, #8
   1e248:	a804      	add	r0, sp, #16
   1e24a:	f021 f98d 	bl	3f568 <at_params_string_get>
	if (err) {
   1e24e:	4604      	mov	r4, r0
   1e250:	b118      	cbz	r0, 1e25a <parse_edrx+0x7a>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1e252:	4602      	mov	r2, r0
   1e254:	2145      	movs	r1, #69	; 0x45
   1e256:	4842      	ldr	r0, [pc, #264]	; (1e360 <parse_edrx+0x180>)
   1e258:	e7ed      	b.n	1e236 <parse_edrx+0x56>
	tmp_buf[len] = '\0';
   1e25a:	9b01      	ldr	r3, [sp, #4]
   1e25c:	aa06      	add	r2, sp, #24
   1e25e:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1e260:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   1e262:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   1e266:	2202      	movs	r2, #2
   1e268:	a802      	add	r0, sp, #8
   1e26a:	f01c fcb1 	bl	3abd0 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1e26e:	466a      	mov	r2, sp
   1e270:	2101      	movs	r1, #1
	idx = strtoul(tmp_buf, NULL, 2);
   1e272:	b2c6      	uxtb	r6, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1e274:	a804      	add	r0, sp, #16
   1e276:	f021 f942 	bl	3f4fe <at_params_int_get>
	if (err) {
   1e27a:	4604      	mov	r4, r0
   1e27c:	b118      	cbz	r0, 1e286 <parse_edrx+0xa6>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   1e27e:	4602      	mov	r2, r0
   1e280:	2145      	movs	r1, #69	; 0x45
   1e282:	4838      	ldr	r0, [pc, #224]	; (1e364 <parse_edrx+0x184>)
   1e284:	e7d7      	b.n	1e236 <parse_edrx+0x56>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e286:	9b00      	ldr	r3, [sp, #0]
   1e288:	2b04      	cmp	r3, #4
   1e28a:	d016      	beq.n	1e2ba <parse_edrx+0xda>
   1e28c:	2b05      	cmp	r3, #5
   1e28e:	d007      	beq.n	1e2a0 <parse_edrx+0xc0>
   1e290:	7028      	strb	r0, [r5, #0]
		LOG_WRN("Active LTE mode could not be determined");
   1e292:	2157      	movs	r1, #87	; 0x57
   1e294:	4834      	ldr	r0, [pc, #208]	; (1e368 <parse_edrx+0x188>)
   1e296:	f01e fd1a 	bl	3ccce <z_log_minimal_printk>
		return -ENOTCONN;
   1e29a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   1e29e:	e7cc      	b.n	1e23a <parse_edrx+0x5a>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e2a0:	2309      	movs	r3, #9
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e2a2:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e2a4:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e2a6:	d92a      	bls.n	1e2fe <parse_edrx+0x11e>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1e2a8:	f06f 0215 	mvn.w	r2, #21
   1e2ac:	2145      	movs	r1, #69	; 0x45
   1e2ae:	482f      	ldr	r0, [pc, #188]	; (1e36c <parse_edrx+0x18c>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1e2b0:	f01e fd0d 	bl	3ccce <z_log_minimal_printk>
		err = -EINVAL;
   1e2b4:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   1e2b8:	e7bf      	b.n	1e23a <parse_edrx+0x5a>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e2ba:	2307      	movs	r3, #7
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e2bc:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e2be:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e2c0:	d8f2      	bhi.n	1e2a8 <parse_edrx+0xc8>
		*ptw_multiplier = 1.28;
   1e2c2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 1e370 <parse_edrx+0x190>
		multiplier = edrx_lookup_ltem[idx];
   1e2c6:	4b2b      	ldr	r3, [pc, #172]	; (1e374 <parse_edrx+0x194>)
   1e2c8:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e2cc:	b1e8      	cbz	r0, 1e30a <parse_edrx+0x12a>
   1e2ce:	f7fe fa09 	bl	1c6e4 <__aeabi_i2d>
   1e2d2:	a31f      	add	r3, pc, #124	; (adr r3, 1e350 <parse_edrx+0x170>)
   1e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e2d8:	f7fe fa6e 	bl	1c7b8 <__aeabi_dmul>
   1e2dc:	f7fe fd64 	bl	1cda8 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   1e2e0:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e2e2:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e2e4:	eb0d 0301 	add.w	r3, sp, r1
   1e2e8:	aa02      	add	r2, sp, #8
   1e2ea:	a804      	add	r0, sp, #16
	len = sizeof(tmp_buf) - 1;
   1e2ec:	9101      	str	r1, [sp, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e2ee:	f021 f93b 	bl	3f568 <at_params_string_get>
	if (err) {
   1e2f2:	4604      	mov	r4, r0
   1e2f4:	b158      	cbz	r0, 1e30e <parse_edrx+0x12e>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   1e2f6:	4602      	mov	r2, r0
   1e2f8:	2145      	movs	r1, #69	; 0x45
   1e2fa:	481f      	ldr	r0, [pc, #124]	; (1e378 <parse_edrx+0x198>)
   1e2fc:	e79b      	b.n	1e236 <parse_edrx+0x56>
		multiplier = edrx_lookup_nbiot[idx];
   1e2fe:	4b1f      	ldr	r3, [pc, #124]	; (1e37c <parse_edrx+0x19c>)
		*ptw_multiplier = 2.56;
   1e300:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 1e380 <parse_edrx+0x1a0>
		multiplier = edrx_lookup_nbiot[idx];
   1e304:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		break;
   1e308:	e7e0      	b.n	1e2cc <parse_edrx+0xec>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e30a:	481e      	ldr	r0, [pc, #120]	; (1e384 <parse_edrx+0x1a4>)
   1e30c:	e7e8      	b.n	1e2e0 <parse_edrx+0x100>
	tmp_buf[len] = '\0';
   1e30e:	9b01      	ldr	r3, [sp, #4]
   1e310:	aa06      	add	r2, sp, #24
   1e312:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1e314:	4601      	mov	r1, r0
   1e316:	2202      	movs	r2, #2
	tmp_buf[len] = '\0';
   1e318:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   1e31c:	a802      	add	r0, sp, #8
   1e31e:	f01c fc57 	bl	3abd0 <strtoul>
   1e322:	b2c2      	uxtb	r2, r0
	if (idx > 15) {
   1e324:	2a0f      	cmp	r2, #15
   1e326:	d902      	bls.n	1e32e <parse_edrx+0x14e>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1e328:	2145      	movs	r1, #69	; 0x45
   1e32a:	4817      	ldr	r0, [pc, #92]	; (1e388 <parse_edrx+0x1a8>)
   1e32c:	e7c0      	b.n	1e2b0 <parse_edrx+0xd0>
	idx += 1;
   1e32e:	3201      	adds	r2, #1
	cfg->ptw = idx * ptw_multiplier;
   1e330:	b2d2      	uxtb	r2, r2
   1e332:	ee07 2a90 	vmov	s15, r2
   1e336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1e33a:	ee67 7a88 	vmul.f32	s15, s15, s16
   1e33e:	edc5 7a02 	vstr	s15, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   1e342:	e77a      	b.n	1e23a <parse_edrx+0x5a>
		return -EINVAL;
   1e344:	f06f 0415 	mvn.w	r4, #21
   1e348:	e766      	b.n	1e218 <parse_edrx+0x38>
   1e34a:	bf00      	nop
   1e34c:	f3af 8000 	nop.w
   1e350:	47ae147b 	.word	0x47ae147b
   1e354:	40247ae1 	.word	0x40247ae1
   1e358:	00045d1d 	.word	0x00045d1d
   1e35c:	00045d4b 	.word	0x00045d4b
   1e360:	00045d7c 	.word	0x00045d7c
   1e364:	00045dad 	.word	0x00045dad
   1e368:	00045dd4 	.word	0x00045dd4
   1e36c:	00045e01 	.word	0x00045e01
   1e370:	3fa3d70a 	.word	0x3fa3d70a
   1e374:	00043674 	.word	0x00043674
   1e378:	00045e2a 	.word	0x00045e2a
   1e37c:	00043694 	.word	0x00043694
   1e380:	4023d70a 	.word	0x4023d70a
   1e384:	40a3d70a 	.word	0x40a3d70a
   1e388:	00045e5a 	.word	0x00045e5a
   1e38c:	00000000 	.word	0x00000000

0001e390 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1e390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e394:	4606      	mov	r6, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e396:	460c      	mov	r4, r1
{
   1e398:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e39a:	b909      	cbnz	r1, 1e3a0 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1e39c:	2000      	movs	r0, #0
   1e39e:	e024      	b.n	1e3ea <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e3a0:	6808      	ldr	r0, [r1, #0]
   1e3a2:	2800      	cmp	r0, #0
   1e3a4:	d0fa      	beq.n	1e39c <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1e3a6:	688b      	ldr	r3, [r1, #8]
   1e3a8:	6862      	ldr	r2, [r4, #4]
   1e3aa:	1d19      	adds	r1, r3, #4
   1e3ac:	4291      	cmp	r1, r2
   1e3ae:	d80b      	bhi.n	1e3c8 <parse_value+0x38>
   1e3b0:	2204      	movs	r2, #4
   1e3b2:	4995      	ldr	r1, [pc, #596]	; (1e608 <parse_value+0x278>)
   1e3b4:	4418      	add	r0, r3
   1e3b6:	f023 faf7 	bl	419a8 <strncmp>
   1e3ba:	b928      	cbnz	r0, 1e3c8 <parse_value+0x38>
        item->type = cJSON_NULL;
   1e3bc:	2304      	movs	r3, #4
   1e3be:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 4;
   1e3c0:	68a3      	ldr	r3, [r4, #8]
   1e3c2:	3304      	adds	r3, #4
    input_buffer->offset++;
   1e3c4:	60a3      	str	r3, [r4, #8]
   1e3c6:	e087      	b.n	1e4d8 <parse_value+0x148>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1e3c8:	68a3      	ldr	r3, [r4, #8]
   1e3ca:	6862      	ldr	r2, [r4, #4]
   1e3cc:	1d59      	adds	r1, r3, #5
   1e3ce:	4291      	cmp	r1, r2
   1e3d0:	d80e      	bhi.n	1e3f0 <parse_value+0x60>
   1e3d2:	6820      	ldr	r0, [r4, #0]
   1e3d4:	2205      	movs	r2, #5
   1e3d6:	498d      	ldr	r1, [pc, #564]	; (1e60c <parse_value+0x27c>)
   1e3d8:	4418      	add	r0, r3
   1e3da:	f023 fae5 	bl	419a8 <strncmp>
   1e3de:	b938      	cbnz	r0, 1e3f0 <parse_value+0x60>
        item->type = cJSON_False;
   1e3e0:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1e3e2:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_False;
   1e3e4:	60f0      	str	r0, [r6, #12]
        input_buffer->offset += 5;
   1e3e6:	3205      	adds	r2, #5
        input_buffer->offset += 4;
   1e3e8:	60a2      	str	r2, [r4, #8]
}
   1e3ea:	b013      	add	sp, #76	; 0x4c
   1e3ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1e3f0:	68a3      	ldr	r3, [r4, #8]
   1e3f2:	6862      	ldr	r2, [r4, #4]
   1e3f4:	1d19      	adds	r1, r3, #4
   1e3f6:	4291      	cmp	r1, r2
   1e3f8:	d80d      	bhi.n	1e416 <parse_value+0x86>
   1e3fa:	6820      	ldr	r0, [r4, #0]
   1e3fc:	2204      	movs	r2, #4
   1e3fe:	4984      	ldr	r1, [pc, #528]	; (1e610 <parse_value+0x280>)
   1e400:	4418      	add	r0, r3
   1e402:	f023 fad1 	bl	419a8 <strncmp>
   1e406:	b930      	cbnz	r0, 1e416 <parse_value+0x86>
        item->type = cJSON_True;
   1e408:	2302      	movs	r3, #2
        item->valueint = 1;
   1e40a:	2001      	movs	r0, #1
        input_buffer->offset += 4;
   1e40c:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_True;
   1e40e:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
   1e410:	6170      	str	r0, [r6, #20]
        input_buffer->offset += 4;
   1e412:	3204      	adds	r2, #4
   1e414:	e7e8      	b.n	1e3e8 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1e416:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
   1e41a:	4283      	cmp	r3, r0
   1e41c:	d2be      	bcs.n	1e39c <parse_value+0xc>
   1e41e:	6821      	ldr	r1, [r4, #0]
   1e420:	5cca      	ldrb	r2, [r1, r3]
   1e422:	18cf      	adds	r7, r1, r3
   1e424:	2a22      	cmp	r2, #34	; 0x22
   1e426:	d106      	bne.n	1e436 <parse_value+0xa6>
        return parse_string(item, input_buffer);
   1e428:	4621      	mov	r1, r4
   1e42a:	4630      	mov	r0, r6
}
   1e42c:	b013      	add	sp, #76	; 0x4c
   1e42e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return parse_string(item, input_buffer);
   1e432:	f013 b985 	b.w	31740 <parse_string>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1e436:	2a2d      	cmp	r2, #45	; 0x2d
   1e438:	d003      	beq.n	1e442 <parse_value+0xb2>
   1e43a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
   1e43e:	2d09      	cmp	r5, #9
   1e440:	d85f      	bhi.n	1e502 <parse_value+0x172>
    unsigned char *after_end = NULL;
   1e442:	2200      	movs	r2, #0
   1e444:	9201      	str	r2, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e446:	2900      	cmp	r1, #0
   1e448:	d0a8      	beq.n	1e39c <parse_value+0xc>
   1e44a:	a902      	add	r1, sp, #8
   1e44c:	460d      	mov	r5, r1
                number_c_string[i] = decimal_point;
   1e44e:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
   1e452:	1ac3      	subs	r3, r0, r3
        switch (buffer_at_offset(input_buffer)[i])
   1e454:	f817 0b01 	ldrb.w	r0, [r7], #1
   1e458:	2839      	cmp	r0, #57	; 0x39
   1e45a:	d810      	bhi.n	1e47e <parse_value+0xee>
   1e45c:	282a      	cmp	r0, #42	; 0x2a
   1e45e:	d91b      	bls.n	1e498 <parse_value+0x108>
   1e460:	f1a0 0c2b 	sub.w	ip, r0, #43	; 0x2b
   1e464:	f1bc 0f0e 	cmp.w	ip, #14
   1e468:	d816      	bhi.n	1e498 <parse_value+0x108>
   1e46a:	e8df f00c 	tbb	[pc, ip]
   1e46e:	150d      	.short	0x150d
   1e470:	0d15370d 	.word	0x0d15370d
   1e474:	0d0d0d0d 	.word	0x0d0d0d0d
   1e478:	0d0d0d0d 	.word	0x0d0d0d0d
   1e47c:	0d          	.byte	0x0d
   1e47d:	00          	.byte	0x00
   1e47e:	f000 0cdf 	and.w	ip, r0, #223	; 0xdf
   1e482:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
   1e486:	d107      	bne.n	1e498 <parse_value+0x108>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
   1e488:	7008      	strb	r0, [r1, #0]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1e48a:	3201      	adds	r2, #1
   1e48c:	2a3f      	cmp	r2, #63	; 0x3f
   1e48e:	f101 0101 	add.w	r1, r1, #1
   1e492:	d001      	beq.n	1e498 <parse_value+0x108>
   1e494:	429a      	cmp	r2, r3
   1e496:	d1dd      	bne.n	1e454 <parse_value+0xc4>
    number_c_string[i] = '\0';
   1e498:	ab12      	add	r3, sp, #72	; 0x48
   1e49a:	441a      	add	r2, r3
   1e49c:	2300      	movs	r3, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e49e:	4628      	mov	r0, r5
    number_c_string[i] = '\0';
   1e4a0:	f802 3c40 	strb.w	r3, [r2, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e4a4:	a901      	add	r1, sp, #4
   1e4a6:	f01c f9e9 	bl	3a87c <strtod>
    if (number_c_string == after_end)
   1e4aa:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e4ac:	4680      	mov	r8, r0
    if (number_c_string == after_end)
   1e4ae:	42af      	cmp	r7, r5
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e4b0:	4689      	mov	r9, r1
    if (number_c_string == after_end)
   1e4b2:	f43f af73 	beq.w	1e39c <parse_value+0xc>
    if (number >= INT_MAX)
   1e4b6:	a352      	add	r3, pc, #328	; (adr r3, 1e600 <parse_value+0x270>)
   1e4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1e4bc:	e9c6 8906 	strd	r8, r9, [r6, #24]
    if (number >= INT_MAX)
   1e4c0:	f7fe fc00 	bl	1ccc4 <__aeabi_dcmpge>
   1e4c4:	b168      	cbz	r0, 1e4e2 <parse_value+0x152>
        item->valueint = INT_MAX;
   1e4c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1e4ca:	6173      	str	r3, [r6, #20]
    item->type = cJSON_Number;
   1e4cc:	2308      	movs	r3, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1e4ce:	1b7d      	subs	r5, r7, r5
   1e4d0:	68a7      	ldr	r7, [r4, #8]
    item->type = cJSON_Number;
   1e4d2:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1e4d4:	443d      	add	r5, r7
   1e4d6:	60a5      	str	r5, [r4, #8]
    return true;
   1e4d8:	2001      	movs	r0, #1
   1e4da:	e786      	b.n	1e3ea <parse_value+0x5a>
                number_c_string[i] = decimal_point;
   1e4dc:	f881 e000 	strb.w	lr, [r1]
                break;
   1e4e0:	e7d3      	b.n	1e48a <parse_value+0xfa>
    else if (number <= (double)INT_MIN)
   1e4e2:	2200      	movs	r2, #0
   1e4e4:	4640      	mov	r0, r8
   1e4e6:	4649      	mov	r1, r9
   1e4e8:	4b4a      	ldr	r3, [pc, #296]	; (1e614 <parse_value+0x284>)
   1e4ea:	f7fe fbe1 	bl	1ccb0 <__aeabi_dcmple>
   1e4ee:	b110      	cbz	r0, 1e4f6 <parse_value+0x166>
        item->valueint = INT_MIN;
   1e4f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1e4f4:	e7e9      	b.n	1e4ca <parse_value+0x13a>
        item->valueint = (int)number;
   1e4f6:	4640      	mov	r0, r8
   1e4f8:	4649      	mov	r1, r9
   1e4fa:	f7fe fc0d 	bl	1cd18 <__aeabi_d2iz>
   1e4fe:	6170      	str	r0, [r6, #20]
   1e500:	e7e4      	b.n	1e4cc <parse_value+0x13c>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1e502:	2a5b      	cmp	r2, #91	; 0x5b
   1e504:	d153      	bne.n	1e5ae <parse_value+0x21e>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1e506:	68e2      	ldr	r2, [r4, #12]
   1e508:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1e50c:	f4bf af46 	bcs.w	1e39c <parse_value+0xc>
    input_buffer->depth++;
   1e510:	3201      	adds	r2, #1
   1e512:	60e2      	str	r2, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1e514:	5cca      	ldrb	r2, [r1, r3]
   1e516:	2a5b      	cmp	r2, #91	; 0x5b
   1e518:	f47f af40 	bne.w	1e39c <parse_value+0xc>
    input_buffer->offset++;
   1e51c:	3301      	adds	r3, #1
   1e51e:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1e520:	4620      	mov	r0, r4
   1e522:	f021 fb51 	bl	3fbc8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1e526:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e52a:	4293      	cmp	r3, r2
   1e52c:	d263      	bcs.n	1e5f6 <parse_value+0x266>
   1e52e:	6822      	ldr	r2, [r4, #0]
   1e530:	5cd2      	ldrb	r2, [r2, r3]
   1e532:	2a5d      	cmp	r2, #93	; 0x5d
   1e534:	d10c      	bne.n	1e550 <parse_value+0x1c0>
    cJSON *current_item = NULL;
   1e536:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
   1e538:	462f      	mov	r7, r5
    input_buffer->depth--;
   1e53a:	68e3      	ldr	r3, [r4, #12]
   1e53c:	3b01      	subs	r3, #1
   1e53e:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
   1e540:	b107      	cbz	r7, 1e544 <parse_value+0x1b4>
        head->prev = current_item;
   1e542:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Array;
   1e544:	2320      	movs	r3, #32
    item->child = head;
   1e546:	e9c6 7302 	strd	r7, r3, [r6, #8]
    input_buffer->offset++;
   1e54a:	68a3      	ldr	r3, [r4, #8]
   1e54c:	3301      	adds	r3, #1
   1e54e:	e739      	b.n	1e3c4 <parse_value+0x34>
    cJSON *current_item = NULL;
   1e550:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
   1e552:	462f      	mov	r7, r5
    input_buffer->offset--;
   1e554:	3b01      	subs	r3, #1
   1e556:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1e558:	6920      	ldr	r0, [r4, #16]
   1e55a:	f021 fbb7 	bl	3fccc <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1e55e:	46a8      	mov	r8, r5
   1e560:	4605      	mov	r5, r0
   1e562:	2800      	cmp	r0, #0
   1e564:	f000 809d 	beq.w	1e6a2 <parse_value+0x312>
        if (head == NULL)
   1e568:	b1ff      	cbz	r7, 1e5aa <parse_value+0x21a>
            current_item->next = new_item;
   1e56a:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1e56e:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1e572:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e574:	4620      	mov	r0, r4
        input_buffer->offset++;
   1e576:	3301      	adds	r3, #1
   1e578:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e57a:	f021 fb25 	bl	3fbc8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1e57e:	4621      	mov	r1, r4
   1e580:	4628      	mov	r0, r5
   1e582:	f7ff ff05 	bl	1e390 <parse_value>
   1e586:	2800      	cmp	r0, #0
   1e588:	f000 808e 	beq.w	1e6a8 <parse_value+0x318>
        buffer_skip_whitespace(input_buffer);
   1e58c:	4620      	mov	r0, r4
   1e58e:	f021 fb1b 	bl	3fbc8 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1e592:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e596:	4293      	cmp	r3, r2
   1e598:	f080 8086 	bcs.w	1e6a8 <parse_value+0x318>
   1e59c:	6822      	ldr	r2, [r4, #0]
   1e59e:	5cd3      	ldrb	r3, [r2, r3]
   1e5a0:	2b2c      	cmp	r3, #44	; 0x2c
   1e5a2:	d0d9      	beq.n	1e558 <parse_value+0x1c8>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1e5a4:	2b5d      	cmp	r3, #93	; 0x5d
   1e5a6:	d17f      	bne.n	1e6a8 <parse_value+0x318>
   1e5a8:	e7c7      	b.n	1e53a <parse_value+0x1aa>
   1e5aa:	4607      	mov	r7, r0
   1e5ac:	e7e1      	b.n	1e572 <parse_value+0x1e2>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1e5ae:	2a7b      	cmp	r2, #123	; 0x7b
   1e5b0:	f47f aef4 	bne.w	1e39c <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1e5b4:	68e2      	ldr	r2, [r4, #12]
   1e5b6:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1e5ba:	f4bf aeef 	bcs.w	1e39c <parse_value+0xc>
    input_buffer->depth++;
   1e5be:	3201      	adds	r2, #1
   1e5c0:	60e2      	str	r2, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1e5c2:	5cca      	ldrb	r2, [r1, r3]
   1e5c4:	2a7b      	cmp	r2, #123	; 0x7b
   1e5c6:	f47f aee9 	bne.w	1e39c <parse_value+0xc>
    input_buffer->offset++;
   1e5ca:	3301      	adds	r3, #1
   1e5cc:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1e5ce:	4620      	mov	r0, r4
   1e5d0:	f021 fafa 	bl	3fbc8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1e5d4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e5d8:	4293      	cmp	r3, r2
   1e5da:	d20c      	bcs.n	1e5f6 <parse_value+0x266>
   1e5dc:	6822      	ldr	r2, [r4, #0]
   1e5de:	5cd2      	ldrb	r2, [r2, r3]
   1e5e0:	2a7d      	cmp	r2, #125	; 0x7d
   1e5e2:	d119      	bne.n	1e618 <parse_value+0x288>
    cJSON *current_item = NULL;
   1e5e4:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
   1e5e6:	462f      	mov	r7, r5
    input_buffer->depth--;
   1e5e8:	68e3      	ldr	r3, [r4, #12]
   1e5ea:	3b01      	subs	r3, #1
   1e5ec:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
   1e5ee:	b107      	cbz	r7, 1e5f2 <parse_value+0x262>
        head->prev = current_item;
   1e5f0:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Object;
   1e5f2:	2340      	movs	r3, #64	; 0x40
   1e5f4:	e7a7      	b.n	1e546 <parse_value+0x1b6>
        input_buffer->offset--;
   1e5f6:	3b01      	subs	r3, #1
   1e5f8:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1e5fa:	e6cf      	b.n	1e39c <parse_value+0xc>
   1e5fc:	f3af 8000 	nop.w
   1e600:	ffc00000 	.word	0xffc00000
   1e604:	41dfffff 	.word	0x41dfffff
   1e608:	0004b9c1 	.word	0x0004b9c1
   1e60c:	0004b9d8 	.word	0x0004b9d8
   1e610:	0004b9de 	.word	0x0004b9de
   1e614:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
   1e618:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
   1e61a:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
   1e61c:	46a8      	mov	r8, r5
    input_buffer->offset--;
   1e61e:	3b01      	subs	r3, #1
   1e620:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1e622:	6920      	ldr	r0, [r4, #16]
   1e624:	f021 fb52 	bl	3fccc <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1e628:	46a9      	mov	r9, r5
   1e62a:	4605      	mov	r5, r0
   1e62c:	2800      	cmp	r0, #0
   1e62e:	d038      	beq.n	1e6a2 <parse_value+0x312>
        if (head == NULL)
   1e630:	b3af      	cbz	r7, 1e69e <parse_value+0x30e>
            current_item->next = new_item;
   1e632:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
   1e636:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
   1e63a:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e63c:	4620      	mov	r0, r4
        input_buffer->offset++;
   1e63e:	3301      	adds	r3, #1
   1e640:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e642:	f021 fac1 	bl	3fbc8 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1e646:	4621      	mov	r1, r4
   1e648:	4628      	mov	r0, r5
   1e64a:	f013 f879 	bl	31740 <parse_string>
   1e64e:	b358      	cbz	r0, 1e6a8 <parse_value+0x318>
        buffer_skip_whitespace(input_buffer);
   1e650:	4620      	mov	r0, r4
   1e652:	f021 fab9 	bl	3fbc8 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1e656:	692b      	ldr	r3, [r5, #16]
        current_item->valuestring = NULL;
   1e658:	f8c5 8010 	str.w	r8, [r5, #16]
        current_item->string = current_item->valuestring;
   1e65c:	622b      	str	r3, [r5, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1e65e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e662:	4293      	cmp	r3, r2
   1e664:	d220      	bcs.n	1e6a8 <parse_value+0x318>
   1e666:	6822      	ldr	r2, [r4, #0]
   1e668:	5cd2      	ldrb	r2, [r2, r3]
   1e66a:	2a3a      	cmp	r2, #58	; 0x3a
   1e66c:	d11c      	bne.n	1e6a8 <parse_value+0x318>
        input_buffer->offset++;
   1e66e:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
   1e670:	4620      	mov	r0, r4
        input_buffer->offset++;
   1e672:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e674:	f021 faa8 	bl	3fbc8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1e678:	4621      	mov	r1, r4
   1e67a:	4628      	mov	r0, r5
   1e67c:	f7ff fe88 	bl	1e390 <parse_value>
   1e680:	b190      	cbz	r0, 1e6a8 <parse_value+0x318>
        buffer_skip_whitespace(input_buffer);
   1e682:	4620      	mov	r0, r4
   1e684:	f021 faa0 	bl	3fbc8 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1e688:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e68c:	4293      	cmp	r3, r2
   1e68e:	d20b      	bcs.n	1e6a8 <parse_value+0x318>
   1e690:	6822      	ldr	r2, [r4, #0]
   1e692:	5cd3      	ldrb	r3, [r2, r3]
   1e694:	2b2c      	cmp	r3, #44	; 0x2c
   1e696:	d0c4      	beq.n	1e622 <parse_value+0x292>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1e698:	2b7d      	cmp	r3, #125	; 0x7d
   1e69a:	d105      	bne.n	1e6a8 <parse_value+0x318>
   1e69c:	e7a4      	b.n	1e5e8 <parse_value+0x258>
   1e69e:	4607      	mov	r7, r0
   1e6a0:	e7cb      	b.n	1e63a <parse_value+0x2aa>
    if (head != NULL)
   1e6a2:	2f00      	cmp	r7, #0
   1e6a4:	f43f ae7a 	beq.w	1e39c <parse_value+0xc>
        cJSON_Delete(head);
   1e6a8:	4638      	mov	r0, r7
   1e6aa:	f013 fce3 	bl	32074 <cJSON_Delete>
   1e6ae:	e675      	b.n	1e39c <parse_value+0xc>

0001e6b0 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e6b0:	4b17      	ldr	r3, [pc, #92]	; (1e710 <cJSON_CreateNumber+0x60>)
{
   1e6b2:	b5d0      	push	{r4, r6, r7, lr}
   1e6b4:	4606      	mov	r6, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e6b6:	6818      	ldr	r0, [r3, #0]
{
   1e6b8:	460f      	mov	r7, r1
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e6ba:	f021 fb07 	bl	3fccc <cJSON_New_Item.isra.0>
    if(item)
   1e6be:	4604      	mov	r4, r0
   1e6c0:	b170      	cbz	r0, 1e6e0 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1e6c2:	2308      	movs	r3, #8
        item->valuedouble = num;
   1e6c4:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1e6c8:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1e6ca:	4639      	mov	r1, r7
   1e6cc:	a30e      	add	r3, pc, #56	; (adr r3, 1e708 <cJSON_CreateNumber+0x58>)
   1e6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e6d2:	4630      	mov	r0, r6
   1e6d4:	f7fe faf6 	bl	1ccc4 <__aeabi_dcmpge>
   1e6d8:	b120      	cbz	r0, 1e6e4 <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1e6da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1e6de:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1e6e0:	4620      	mov	r0, r4
   1e6e2:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1e6e4:	2200      	movs	r2, #0
   1e6e6:	4630      	mov	r0, r6
   1e6e8:	4639      	mov	r1, r7
   1e6ea:	4b0a      	ldr	r3, [pc, #40]	; (1e714 <cJSON_CreateNumber+0x64>)
   1e6ec:	f7fe fae0 	bl	1ccb0 <__aeabi_dcmple>
   1e6f0:	b110      	cbz	r0, 1e6f8 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1e6f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1e6f6:	e7f2      	b.n	1e6de <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1e6f8:	4630      	mov	r0, r6
   1e6fa:	4639      	mov	r1, r7
   1e6fc:	f7fe fb0c 	bl	1cd18 <__aeabi_d2iz>
   1e700:	6160      	str	r0, [r4, #20]
    return item;
   1e702:	e7ed      	b.n	1e6e0 <cJSON_CreateNumber+0x30>
   1e704:	f3af 8000 	nop.w
   1e708:	ffc00000 	.word	0xffc00000
   1e70c:	41dfffff 	.word	0x41dfffff
   1e710:	200146f0 	.word	0x200146f0
   1e714:	c1e00000 	.word	0xc1e00000

0001e718 <floor>:
   1e718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e71c:	f3c1 570a 	ubfx	r7, r1, #20, #11
   1e720:	4602      	mov	r2, r0
   1e722:	460b      	mov	r3, r1
   1e724:	460c      	mov	r4, r1
   1e726:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
   1e72a:	4605      	mov	r5, r0
   1e72c:	4680      	mov	r8, r0
   1e72e:	2e13      	cmp	r6, #19
   1e730:	dc34      	bgt.n	1e79c <floor+0x84>
   1e732:	2e00      	cmp	r6, #0
   1e734:	da14      	bge.n	1e760 <floor+0x48>
   1e736:	a334      	add	r3, pc, #208	; (adr r3, 1e808 <floor+0xf0>)
   1e738:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e73c:	f7fd fe86 	bl	1c44c <__adddf3>
   1e740:	2200      	movs	r2, #0
   1e742:	2300      	movs	r3, #0
   1e744:	f7fe fac8 	bl	1ccd8 <__aeabi_dcmpgt>
   1e748:	b138      	cbz	r0, 1e75a <floor+0x42>
   1e74a:	2c00      	cmp	r4, #0
   1e74c:	da58      	bge.n	1e800 <floor+0xe8>
   1e74e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1e752:	431d      	orrs	r5, r3
   1e754:	d001      	beq.n	1e75a <floor+0x42>
   1e756:	2500      	movs	r5, #0
   1e758:	4c2d      	ldr	r4, [pc, #180]	; (1e810 <floor+0xf8>)
   1e75a:	4623      	mov	r3, r4
   1e75c:	462a      	mov	r2, r5
   1e75e:	e026      	b.n	1e7ae <floor+0x96>
   1e760:	4f2c      	ldr	r7, [pc, #176]	; (1e814 <floor+0xfc>)
   1e762:	4137      	asrs	r7, r6
   1e764:	ea01 0c07 	and.w	ip, r1, r7
   1e768:	ea5c 0c00 	orrs.w	ip, ip, r0
   1e76c:	d01f      	beq.n	1e7ae <floor+0x96>
   1e76e:	a326      	add	r3, pc, #152	; (adr r3, 1e808 <floor+0xf0>)
   1e770:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e774:	f7fd fe6a 	bl	1c44c <__adddf3>
   1e778:	2200      	movs	r2, #0
   1e77a:	2300      	movs	r3, #0
   1e77c:	f7fe faac 	bl	1ccd8 <__aeabi_dcmpgt>
   1e780:	2800      	cmp	r0, #0
   1e782:	d0ea      	beq.n	1e75a <floor+0x42>
   1e784:	2c00      	cmp	r4, #0
   1e786:	f04f 0500 	mov.w	r5, #0
   1e78a:	bfbe      	ittt	lt
   1e78c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
   1e790:	fa43 f606 	asrlt.w	r6, r3, r6
   1e794:	19a4      	addlt	r4, r4, r6
   1e796:	ea24 0407 	bic.w	r4, r4, r7
   1e79a:	e7de      	b.n	1e75a <floor+0x42>
   1e79c:	2e33      	cmp	r6, #51	; 0x33
   1e79e:	dd0a      	ble.n	1e7b6 <floor+0x9e>
   1e7a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1e7a4:	d103      	bne.n	1e7ae <floor+0x96>
   1e7a6:	f7fd fe51 	bl	1c44c <__adddf3>
   1e7aa:	4602      	mov	r2, r0
   1e7ac:	460b      	mov	r3, r1
   1e7ae:	4610      	mov	r0, r2
   1e7b0:	4619      	mov	r1, r3
   1e7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e7b6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
   1e7ba:	f04f 3cff 	mov.w	ip, #4294967295
   1e7be:	fa2c f707 	lsr.w	r7, ip, r7
   1e7c2:	4207      	tst	r7, r0
   1e7c4:	d0f3      	beq.n	1e7ae <floor+0x96>
   1e7c6:	a310      	add	r3, pc, #64	; (adr r3, 1e808 <floor+0xf0>)
   1e7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7cc:	f7fd fe3e 	bl	1c44c <__adddf3>
   1e7d0:	2200      	movs	r2, #0
   1e7d2:	2300      	movs	r3, #0
   1e7d4:	f7fe fa80 	bl	1ccd8 <__aeabi_dcmpgt>
   1e7d8:	2800      	cmp	r0, #0
   1e7da:	d0be      	beq.n	1e75a <floor+0x42>
   1e7dc:	2c00      	cmp	r4, #0
   1e7de:	da02      	bge.n	1e7e6 <floor+0xce>
   1e7e0:	2e14      	cmp	r6, #20
   1e7e2:	d103      	bne.n	1e7ec <floor+0xd4>
   1e7e4:	3401      	adds	r4, #1
   1e7e6:	ea25 0507 	bic.w	r5, r5, r7
   1e7ea:	e7b6      	b.n	1e75a <floor+0x42>
   1e7ec:	2301      	movs	r3, #1
   1e7ee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   1e7f2:	fa03 f606 	lsl.w	r6, r3, r6
   1e7f6:	4435      	add	r5, r6
   1e7f8:	4545      	cmp	r5, r8
   1e7fa:	bf38      	it	cc
   1e7fc:	18e4      	addcc	r4, r4, r3
   1e7fe:	e7f2      	b.n	1e7e6 <floor+0xce>
   1e800:	2500      	movs	r5, #0
   1e802:	462c      	mov	r4, r5
   1e804:	e7a9      	b.n	1e75a <floor+0x42>
   1e806:	bf00      	nop
   1e808:	8800759c 	.word	0x8800759c
   1e80c:	7e37e43c 	.word	0x7e37e43c
   1e810:	bff00000 	.word	0xbff00000
   1e814:	000fffff 	.word	0x000fffff

0001e818 <_strtod_l>:
   1e818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e81c:	461f      	mov	r7, r3
   1e81e:	2300      	movs	r3, #0
   1e820:	4604      	mov	r4, r0
   1e822:	4688      	mov	r8, r1
   1e824:	f04f 0a00 	mov.w	sl, #0
   1e828:	f04f 0b00 	mov.w	fp, #0
   1e82c:	ed2d 8b04 	vpush	{d8-d9}
   1e830:	b09d      	sub	sp, #116	; 0x74
   1e832:	9318      	str	r3, [sp, #96]	; 0x60
   1e834:	4b9e      	ldr	r3, [pc, #632]	; (1eab0 <_strtod_l+0x298>)
   1e836:	9213      	str	r2, [sp, #76]	; 0x4c
   1e838:	681b      	ldr	r3, [r3, #0]
   1e83a:	4618      	mov	r0, r3
   1e83c:	9305      	str	r3, [sp, #20]
   1e83e:	f7fe fd00 	bl	1d242 <strlen>
   1e842:	4605      	mov	r5, r0
   1e844:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   1e848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e84a:	781a      	ldrb	r2, [r3, #0]
   1e84c:	2a2b      	cmp	r2, #43	; 0x2b
   1e84e:	d04c      	beq.n	1e8ea <_strtod_l+0xd2>
   1e850:	d839      	bhi.n	1e8c6 <_strtod_l+0xae>
   1e852:	2a0d      	cmp	r2, #13
   1e854:	d832      	bhi.n	1e8bc <_strtod_l+0xa4>
   1e856:	2a08      	cmp	r2, #8
   1e858:	d832      	bhi.n	1e8c0 <_strtod_l+0xa8>
   1e85a:	2a00      	cmp	r2, #0
   1e85c:	d03c      	beq.n	1e8d8 <_strtod_l+0xc0>
   1e85e:	2300      	movs	r3, #0
   1e860:	930a      	str	r3, [sp, #40]	; 0x28
   1e862:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1e864:	7833      	ldrb	r3, [r6, #0]
   1e866:	2b30      	cmp	r3, #48	; 0x30
   1e868:	f040 80ae 	bne.w	1e9c8 <_strtod_l+0x1b0>
   1e86c:	7873      	ldrb	r3, [r6, #1]
   1e86e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e872:	2b58      	cmp	r3, #88	; 0x58
   1e874:	d166      	bne.n	1e944 <_strtod_l+0x12c>
   1e876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e878:	a917      	add	r1, sp, #92	; 0x5c
   1e87a:	9702      	str	r7, [sp, #8]
   1e87c:	4620      	mov	r0, r4
   1e87e:	9301      	str	r3, [sp, #4]
   1e880:	ab18      	add	r3, sp, #96	; 0x60
   1e882:	4a8c      	ldr	r2, [pc, #560]	; (1eab4 <_strtod_l+0x29c>)
   1e884:	9300      	str	r3, [sp, #0]
   1e886:	ab19      	add	r3, sp, #100	; 0x64
   1e888:	f01c fc6a 	bl	3b160 <__gethex>
   1e88c:	f010 0707 	ands.w	r7, r0, #7
   1e890:	4605      	mov	r5, r0
   1e892:	d005      	beq.n	1e8a0 <_strtod_l+0x88>
   1e894:	2f06      	cmp	r7, #6
   1e896:	d12a      	bne.n	1e8ee <_strtod_l+0xd6>
   1e898:	3601      	adds	r6, #1
   1e89a:	2300      	movs	r3, #0
   1e89c:	9617      	str	r6, [sp, #92]	; 0x5c
   1e89e:	930a      	str	r3, [sp, #40]	; 0x28
   1e8a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1e8a2:	2b00      	cmp	r3, #0
   1e8a4:	f040 8584 	bne.w	1f3b0 <_strtod_l+0xb98>
   1e8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e8aa:	b1db      	cbz	r3, 1e8e4 <_strtod_l+0xcc>
   1e8ac:	4650      	mov	r0, sl
   1e8ae:	f10b 4100 	add.w	r1, fp, #2147483648	; 0x80000000
   1e8b2:	b01d      	add	sp, #116	; 0x74
   1e8b4:	ecbd 8b04 	vpop	{d8-d9}
   1e8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8bc:	2a20      	cmp	r2, #32
   1e8be:	d1ce      	bne.n	1e85e <_strtod_l+0x46>
   1e8c0:	3301      	adds	r3, #1
   1e8c2:	9317      	str	r3, [sp, #92]	; 0x5c
   1e8c4:	e7c0      	b.n	1e848 <_strtod_l+0x30>
   1e8c6:	2a2d      	cmp	r2, #45	; 0x2d
   1e8c8:	d1c9      	bne.n	1e85e <_strtod_l+0x46>
   1e8ca:	2201      	movs	r2, #1
   1e8cc:	920a      	str	r2, [sp, #40]	; 0x28
   1e8ce:	1c5a      	adds	r2, r3, #1
   1e8d0:	9217      	str	r2, [sp, #92]	; 0x5c
   1e8d2:	785b      	ldrb	r3, [r3, #1]
   1e8d4:	2b00      	cmp	r3, #0
   1e8d6:	d1c4      	bne.n	1e862 <_strtod_l+0x4a>
   1e8d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1e8da:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   1e8de:	2b00      	cmp	r3, #0
   1e8e0:	f040 8564 	bne.w	1f3ac <_strtod_l+0xb94>
   1e8e4:	4650      	mov	r0, sl
   1e8e6:	4659      	mov	r1, fp
   1e8e8:	e7e3      	b.n	1e8b2 <_strtod_l+0x9a>
   1e8ea:	2200      	movs	r2, #0
   1e8ec:	e7ee      	b.n	1e8cc <_strtod_l+0xb4>
   1e8ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1e8f0:	b13a      	cbz	r2, 1e902 <_strtod_l+0xea>
   1e8f2:	2135      	movs	r1, #53	; 0x35
   1e8f4:	a81a      	add	r0, sp, #104	; 0x68
   1e8f6:	f023 fbe1 	bl	420bc <__copybits>
   1e8fa:	9918      	ldr	r1, [sp, #96]	; 0x60
   1e8fc:	4620      	mov	r0, r4
   1e8fe:	f01c ff17 	bl	3b730 <_Bfree>
   1e902:	3f01      	subs	r7, #1
   1e904:	2f04      	cmp	r7, #4
   1e906:	d806      	bhi.n	1e916 <_strtod_l+0xfe>
   1e908:	e8df f007 	tbb	[pc, r7]
   1e90c:	1714030a 	.word	0x1714030a
   1e910:	0a          	.byte	0x0a
   1e911:	00          	.byte	0x00
   1e912:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   1e916:	0728      	lsls	r0, r5, #28
   1e918:	d5c2      	bpl.n	1e8a0 <_strtod_l+0x88>
   1e91a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1e91e:	e7bf      	b.n	1e8a0 <_strtod_l+0x88>
   1e920:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   1e924:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1e926:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1e92a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1e92e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1e932:	e7f0      	b.n	1e916 <_strtod_l+0xfe>
   1e934:	f8df b180 	ldr.w	fp, [pc, #384]	; 1eab8 <_strtod_l+0x2a0>
   1e938:	e7ed      	b.n	1e916 <_strtod_l+0xfe>
   1e93a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1e93e:	f04f 3aff 	mov.w	sl, #4294967295
   1e942:	e7e8      	b.n	1e916 <_strtod_l+0xfe>
   1e944:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e946:	1c5a      	adds	r2, r3, #1
   1e948:	9217      	str	r2, [sp, #92]	; 0x5c
   1e94a:	785b      	ldrb	r3, [r3, #1]
   1e94c:	2b30      	cmp	r3, #48	; 0x30
   1e94e:	d0f9      	beq.n	1e944 <_strtod_l+0x12c>
   1e950:	2b00      	cmp	r3, #0
   1e952:	d0a5      	beq.n	1e8a0 <_strtod_l+0x88>
   1e954:	2301      	movs	r3, #1
   1e956:	f04f 0900 	mov.w	r9, #0
   1e95a:	9304      	str	r3, [sp, #16]
   1e95c:	220a      	movs	r2, #10
   1e95e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e960:	464f      	mov	r7, r9
   1e962:	f8cd 901c 	str.w	r9, [sp, #28]
   1e966:	9308      	str	r3, [sp, #32]
   1e968:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1e96a:	7806      	ldrb	r6, [r0, #0]
   1e96c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1e970:	b2d9      	uxtb	r1, r3
   1e972:	2909      	cmp	r1, #9
   1e974:	d92a      	bls.n	1e9cc <_strtod_l+0x1b4>
   1e976:	462a      	mov	r2, r5
   1e978:	9905      	ldr	r1, [sp, #20]
   1e97a:	f023 f815 	bl	419a8 <strncmp>
   1e97e:	b3a0      	cbz	r0, 1e9ea <_strtod_l+0x1d2>
   1e980:	2000      	movs	r0, #0
   1e982:	4632      	mov	r2, r6
   1e984:	463d      	mov	r5, r7
   1e986:	4603      	mov	r3, r0
   1e988:	9005      	str	r0, [sp, #20]
   1e98a:	2a65      	cmp	r2, #101	; 0x65
   1e98c:	d001      	beq.n	1e992 <_strtod_l+0x17a>
   1e98e:	2a45      	cmp	r2, #69	; 0x45
   1e990:	d118      	bne.n	1e9c4 <_strtod_l+0x1ac>
   1e992:	b91d      	cbnz	r5, 1e99c <_strtod_l+0x184>
   1e994:	9a04      	ldr	r2, [sp, #16]
   1e996:	4302      	orrs	r2, r0
   1e998:	d09e      	beq.n	1e8d8 <_strtod_l+0xc0>
   1e99a:	2500      	movs	r5, #0
   1e99c:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   1e9a0:	f108 0201 	add.w	r2, r8, #1
   1e9a4:	9217      	str	r2, [sp, #92]	; 0x5c
   1e9a6:	f898 2001 	ldrb.w	r2, [r8, #1]
   1e9aa:	2a2b      	cmp	r2, #43	; 0x2b
   1e9ac:	d075      	beq.n	1ea9a <_strtod_l+0x282>
   1e9ae:	2a2d      	cmp	r2, #45	; 0x2d
   1e9b0:	d07b      	beq.n	1eaaa <_strtod_l+0x292>
   1e9b2:	f04f 0c00 	mov.w	ip, #0
   1e9b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1e9ba:	2909      	cmp	r1, #9
   1e9bc:	f240 8082 	bls.w	1eac4 <_strtod_l+0x2ac>
   1e9c0:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   1e9c4:	2600      	movs	r6, #0
   1e9c6:	e09d      	b.n	1eb04 <_strtod_l+0x2ec>
   1e9c8:	2300      	movs	r3, #0
   1e9ca:	e7c4      	b.n	1e956 <_strtod_l+0x13e>
   1e9cc:	2f08      	cmp	r7, #8
   1e9ce:	f100 0001 	add.w	r0, r0, #1
   1e9d2:	f107 0701 	add.w	r7, r7, #1
   1e9d6:	bfd4      	ite	le
   1e9d8:	9907      	ldrle	r1, [sp, #28]
   1e9da:	fb02 3909 	mlagt	r9, r2, r9, r3
   1e9de:	9017      	str	r0, [sp, #92]	; 0x5c
   1e9e0:	bfdc      	itt	le
   1e9e2:	fb02 3301 	mlale	r3, r2, r1, r3
   1e9e6:	9307      	strle	r3, [sp, #28]
   1e9e8:	e7be      	b.n	1e968 <_strtod_l+0x150>
   1e9ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e9ec:	195a      	adds	r2, r3, r5
   1e9ee:	9217      	str	r2, [sp, #92]	; 0x5c
   1e9f0:	5d5a      	ldrb	r2, [r3, r5]
   1e9f2:	2f00      	cmp	r7, #0
   1e9f4:	d036      	beq.n	1ea64 <_strtod_l+0x24c>
   1e9f6:	463d      	mov	r5, r7
   1e9f8:	9005      	str	r0, [sp, #20]
   1e9fa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   1e9fe:	2b09      	cmp	r3, #9
   1ea00:	d912      	bls.n	1ea28 <_strtod_l+0x210>
   1ea02:	2301      	movs	r3, #1
   1ea04:	e7c1      	b.n	1e98a <_strtod_l+0x172>
   1ea06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ea08:	3001      	adds	r0, #1
   1ea0a:	1c5a      	adds	r2, r3, #1
   1ea0c:	9217      	str	r2, [sp, #92]	; 0x5c
   1ea0e:	785a      	ldrb	r2, [r3, #1]
   1ea10:	2a30      	cmp	r2, #48	; 0x30
   1ea12:	d0f8      	beq.n	1ea06 <_strtod_l+0x1ee>
   1ea14:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   1ea18:	2b08      	cmp	r3, #8
   1ea1a:	f200 84ce 	bhi.w	1f3ba <_strtod_l+0xba2>
   1ea1e:	9005      	str	r0, [sp, #20]
   1ea20:	2000      	movs	r0, #0
   1ea22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ea24:	4605      	mov	r5, r0
   1ea26:	9308      	str	r3, [sp, #32]
   1ea28:	3a30      	subs	r2, #48	; 0x30
   1ea2a:	f100 0301 	add.w	r3, r0, #1
   1ea2e:	d013      	beq.n	1ea58 <_strtod_l+0x240>
   1ea30:	9905      	ldr	r1, [sp, #20]
   1ea32:	eb00 0e05 	add.w	lr, r0, r5
   1ea36:	4419      	add	r1, r3
   1ea38:	462b      	mov	r3, r5
   1ea3a:	9105      	str	r1, [sp, #20]
   1ea3c:	210a      	movs	r1, #10
   1ea3e:	4573      	cmp	r3, lr
   1ea40:	d112      	bne.n	1ea68 <_strtod_l+0x250>
   1ea42:	182b      	adds	r3, r5, r0
   1ea44:	3501      	adds	r5, #1
   1ea46:	2b08      	cmp	r3, #8
   1ea48:	4405      	add	r5, r0
   1ea4a:	dc1c      	bgt.n	1ea86 <_strtod_l+0x26e>
   1ea4c:	9907      	ldr	r1, [sp, #28]
   1ea4e:	230a      	movs	r3, #10
   1ea50:	fb03 2301 	mla	r3, r3, r1, r2
   1ea54:	9307      	str	r3, [sp, #28]
   1ea56:	2300      	movs	r3, #0
   1ea58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1ea5a:	4618      	mov	r0, r3
   1ea5c:	1c51      	adds	r1, r2, #1
   1ea5e:	9117      	str	r1, [sp, #92]	; 0x5c
   1ea60:	7852      	ldrb	r2, [r2, #1]
   1ea62:	e7ca      	b.n	1e9fa <_strtod_l+0x1e2>
   1ea64:	4638      	mov	r0, r7
   1ea66:	e7d3      	b.n	1ea10 <_strtod_l+0x1f8>
   1ea68:	2b08      	cmp	r3, #8
   1ea6a:	dc04      	bgt.n	1ea76 <_strtod_l+0x25e>
   1ea6c:	9e07      	ldr	r6, [sp, #28]
   1ea6e:	434e      	muls	r6, r1
   1ea70:	9607      	str	r6, [sp, #28]
   1ea72:	3301      	adds	r3, #1
   1ea74:	e7e3      	b.n	1ea3e <_strtod_l+0x226>
   1ea76:	f103 0c01 	add.w	ip, r3, #1
   1ea7a:	f1bc 0f10 	cmp.w	ip, #16
   1ea7e:	bfd8      	it	le
   1ea80:	fb01 f909 	mulle.w	r9, r1, r9
   1ea84:	e7f5      	b.n	1ea72 <_strtod_l+0x25a>
   1ea86:	2d10      	cmp	r5, #16
   1ea88:	bfdc      	itt	le
   1ea8a:	230a      	movle	r3, #10
   1ea8c:	fb03 2909 	mlale	r9, r3, r9, r2
   1ea90:	e7e1      	b.n	1ea56 <_strtod_l+0x23e>
   1ea92:	2300      	movs	r3, #0
   1ea94:	9305      	str	r3, [sp, #20]
   1ea96:	2301      	movs	r3, #1
   1ea98:	e77c      	b.n	1e994 <_strtod_l+0x17c>
   1ea9a:	f04f 0c00 	mov.w	ip, #0
   1ea9e:	f108 0202 	add.w	r2, r8, #2
   1eaa2:	9217      	str	r2, [sp, #92]	; 0x5c
   1eaa4:	f898 2002 	ldrb.w	r2, [r8, #2]
   1eaa8:	e785      	b.n	1e9b6 <_strtod_l+0x19e>
   1eaaa:	f04f 0c01 	mov.w	ip, #1
   1eaae:	e7f6      	b.n	1ea9e <_strtod_l+0x286>
   1eab0:	0004365c 	.word	0x0004365c
   1eab4:	000435d4 	.word	0x000435d4
   1eab8:	7ff00000 	.word	0x7ff00000
   1eabc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1eabe:	1c51      	adds	r1, r2, #1
   1eac0:	9117      	str	r1, [sp, #92]	; 0x5c
   1eac2:	7852      	ldrb	r2, [r2, #1]
   1eac4:	2a30      	cmp	r2, #48	; 0x30
   1eac6:	d0f9      	beq.n	1eabc <_strtod_l+0x2a4>
   1eac8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   1eacc:	2908      	cmp	r1, #8
   1eace:	f63f af79 	bhi.w	1e9c4 <_strtod_l+0x1ac>
   1ead2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   1ead6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1ead8:	9206      	str	r2, [sp, #24]
   1eada:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1eadc:	1c51      	adds	r1, r2, #1
   1eade:	9117      	str	r1, [sp, #92]	; 0x5c
   1eae0:	7852      	ldrb	r2, [r2, #1]
   1eae2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   1eae6:	2e09      	cmp	r6, #9
   1eae8:	d937      	bls.n	1eb5a <_strtod_l+0x342>
   1eaea:	9e06      	ldr	r6, [sp, #24]
   1eaec:	1b89      	subs	r1, r1, r6
   1eaee:	f644 661f 	movw	r6, #19999	; 0x4e1f
   1eaf2:	2908      	cmp	r1, #8
   1eaf4:	dc02      	bgt.n	1eafc <_strtod_l+0x2e4>
   1eaf6:	4576      	cmp	r6, lr
   1eaf8:	bfa8      	it	ge
   1eafa:	4676      	movge	r6, lr
   1eafc:	f1bc 0f00 	cmp.w	ip, #0
   1eb00:	d000      	beq.n	1eb04 <_strtod_l+0x2ec>
   1eb02:	4276      	negs	r6, r6
   1eb04:	2d00      	cmp	r5, #0
   1eb06:	d14d      	bne.n	1eba4 <_strtod_l+0x38c>
   1eb08:	9904      	ldr	r1, [sp, #16]
   1eb0a:	4301      	orrs	r1, r0
   1eb0c:	f47f aec8 	bne.w	1e8a0 <_strtod_l+0x88>
   1eb10:	2b00      	cmp	r3, #0
   1eb12:	f47f aee1 	bne.w	1e8d8 <_strtod_l+0xc0>
   1eb16:	2a69      	cmp	r2, #105	; 0x69
   1eb18:	d027      	beq.n	1eb6a <_strtod_l+0x352>
   1eb1a:	dc24      	bgt.n	1eb66 <_strtod_l+0x34e>
   1eb1c:	2a49      	cmp	r2, #73	; 0x49
   1eb1e:	d024      	beq.n	1eb6a <_strtod_l+0x352>
   1eb20:	2a4e      	cmp	r2, #78	; 0x4e
   1eb22:	f47f aed9 	bne.w	1e8d8 <_strtod_l+0xc0>
   1eb26:	499f      	ldr	r1, [pc, #636]	; (1eda4 <_strtod_l+0x58c>)
   1eb28:	a817      	add	r0, sp, #92	; 0x5c
   1eb2a:	f023 f92d 	bl	41d88 <__match>
   1eb2e:	2800      	cmp	r0, #0
   1eb30:	f43f aed2 	beq.w	1e8d8 <_strtod_l+0xc0>
   1eb34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1eb36:	781b      	ldrb	r3, [r3, #0]
   1eb38:	2b28      	cmp	r3, #40	; 0x28
   1eb3a:	d12d      	bne.n	1eb98 <_strtod_l+0x380>
   1eb3c:	aa1a      	add	r2, sp, #104	; 0x68
   1eb3e:	499a      	ldr	r1, [pc, #616]	; (1eda8 <_strtod_l+0x590>)
   1eb40:	a817      	add	r0, sp, #92	; 0x5c
   1eb42:	f023 f935 	bl	41db0 <__hexnan>
   1eb46:	2805      	cmp	r0, #5
   1eb48:	d126      	bne.n	1eb98 <_strtod_l+0x380>
   1eb4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1eb4c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   1eb50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1eb54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1eb58:	e6a2      	b.n	1e8a0 <_strtod_l+0x88>
   1eb5a:	210a      	movs	r1, #10
   1eb5c:	fb01 2e0e 	mla	lr, r1, lr, r2
   1eb60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   1eb64:	e7b9      	b.n	1eada <_strtod_l+0x2c2>
   1eb66:	2a6e      	cmp	r2, #110	; 0x6e
   1eb68:	e7db      	b.n	1eb22 <_strtod_l+0x30a>
   1eb6a:	4990      	ldr	r1, [pc, #576]	; (1edac <_strtod_l+0x594>)
   1eb6c:	a817      	add	r0, sp, #92	; 0x5c
   1eb6e:	f023 f90b 	bl	41d88 <__match>
   1eb72:	2800      	cmp	r0, #0
   1eb74:	f43f aeb0 	beq.w	1e8d8 <_strtod_l+0xc0>
   1eb78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1eb7a:	a817      	add	r0, sp, #92	; 0x5c
   1eb7c:	498c      	ldr	r1, [pc, #560]	; (1edb0 <_strtod_l+0x598>)
   1eb7e:	3b01      	subs	r3, #1
   1eb80:	9317      	str	r3, [sp, #92]	; 0x5c
   1eb82:	f023 f901 	bl	41d88 <__match>
   1eb86:	b910      	cbnz	r0, 1eb8e <_strtod_l+0x376>
   1eb88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1eb8a:	3301      	adds	r3, #1
   1eb8c:	9317      	str	r3, [sp, #92]	; 0x5c
   1eb8e:	f8df b230 	ldr.w	fp, [pc, #560]	; 1edc0 <_strtod_l+0x5a8>
   1eb92:	f04f 0a00 	mov.w	sl, #0
   1eb96:	e683      	b.n	1e8a0 <_strtod_l+0x88>
   1eb98:	4886      	ldr	r0, [pc, #536]	; (1edb4 <_strtod_l+0x59c>)
   1eb9a:	f01d fd45 	bl	3c628 <nan>
   1eb9e:	4682      	mov	sl, r0
   1eba0:	468b      	mov	fp, r1
   1eba2:	e67d      	b.n	1e8a0 <_strtod_l+0x88>
   1eba4:	9b05      	ldr	r3, [sp, #20]
   1eba6:	2f00      	cmp	r7, #0
   1eba8:	bf08      	it	eq
   1ebaa:	462f      	moveq	r7, r5
   1ebac:	2d10      	cmp	r5, #16
   1ebae:	9807      	ldr	r0, [sp, #28]
   1ebb0:	eba6 0303 	sub.w	r3, r6, r3
   1ebb4:	46a8      	mov	r8, r5
   1ebb6:	bfa8      	it	ge
   1ebb8:	f04f 0810 	movge.w	r8, #16
   1ebbc:	9306      	str	r3, [sp, #24]
   1ebbe:	f7fd fd81 	bl	1c6c4 <__aeabi_ui2d>
   1ebc2:	2d09      	cmp	r5, #9
   1ebc4:	4682      	mov	sl, r0
   1ebc6:	468b      	mov	fp, r1
   1ebc8:	dd13      	ble.n	1ebf2 <_strtod_l+0x3da>
   1ebca:	4b7b      	ldr	r3, [pc, #492]	; (1edb8 <_strtod_l+0x5a0>)
   1ebcc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   1ebd0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1ebd4:	f7fd fdf0 	bl	1c7b8 <__aeabi_dmul>
   1ebd8:	4682      	mov	sl, r0
   1ebda:	468b      	mov	fp, r1
   1ebdc:	4648      	mov	r0, r9
   1ebde:	f7fd fd71 	bl	1c6c4 <__aeabi_ui2d>
   1ebe2:	4602      	mov	r2, r0
   1ebe4:	460b      	mov	r3, r1
   1ebe6:	4650      	mov	r0, sl
   1ebe8:	4659      	mov	r1, fp
   1ebea:	f7fd fc2f 	bl	1c44c <__adddf3>
   1ebee:	4682      	mov	sl, r0
   1ebf0:	468b      	mov	fp, r1
   1ebf2:	2d0f      	cmp	r5, #15
   1ebf4:	dc36      	bgt.n	1ec64 <_strtod_l+0x44c>
   1ebf6:	9b06      	ldr	r3, [sp, #24]
   1ebf8:	2b00      	cmp	r3, #0
   1ebfa:	f43f ae51 	beq.w	1e8a0 <_strtod_l+0x88>
   1ebfe:	dd22      	ble.n	1ec46 <_strtod_l+0x42e>
   1ec00:	2b16      	cmp	r3, #22
   1ec02:	dc09      	bgt.n	1ec18 <_strtod_l+0x400>
   1ec04:	496c      	ldr	r1, [pc, #432]	; (1edb8 <_strtod_l+0x5a0>)
   1ec06:	4652      	mov	r2, sl
   1ec08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1ec0c:	465b      	mov	r3, fp
   1ec0e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ec12:	f7fd fdd1 	bl	1c7b8 <__aeabi_dmul>
   1ec16:	e7c2      	b.n	1eb9e <_strtod_l+0x386>
   1ec18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   1ec1c:	9a06      	ldr	r2, [sp, #24]
   1ec1e:	4293      	cmp	r3, r2
   1ec20:	db20      	blt.n	1ec64 <_strtod_l+0x44c>
   1ec22:	f1c5 050f 	rsb	r5, r5, #15
   1ec26:	4c64      	ldr	r4, [pc, #400]	; (1edb8 <_strtod_l+0x5a0>)
   1ec28:	4652      	mov	r2, sl
   1ec2a:	465b      	mov	r3, fp
   1ec2c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   1ec30:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ec34:	f7fd fdc0 	bl	1c7b8 <__aeabi_dmul>
   1ec38:	9b06      	ldr	r3, [sp, #24]
   1ec3a:	1b5d      	subs	r5, r3, r5
   1ec3c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1ec40:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ec44:	e7e5      	b.n	1ec12 <_strtod_l+0x3fa>
   1ec46:	9b06      	ldr	r3, [sp, #24]
   1ec48:	3316      	adds	r3, #22
   1ec4a:	db0b      	blt.n	1ec64 <_strtod_l+0x44c>
   1ec4c:	9b05      	ldr	r3, [sp, #20]
   1ec4e:	4650      	mov	r0, sl
   1ec50:	4659      	mov	r1, fp
   1ec52:	1b9e      	subs	r6, r3, r6
   1ec54:	4b58      	ldr	r3, [pc, #352]	; (1edb8 <_strtod_l+0x5a0>)
   1ec56:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   1ec5a:	e9d6 2300 	ldrd	r2, r3, [r6]
   1ec5e:	f7fd fed5 	bl	1ca0c <__aeabi_ddiv>
   1ec62:	e79c      	b.n	1eb9e <_strtod_l+0x386>
   1ec64:	eba5 0308 	sub.w	r3, r5, r8
   1ec68:	9a06      	ldr	r2, [sp, #24]
   1ec6a:	eb03 0802 	add.w	r8, r3, r2
   1ec6e:	f1b8 0f00 	cmp.w	r8, #0
   1ec72:	dd74      	ble.n	1ed5e <_strtod_l+0x546>
   1ec74:	f018 030f 	ands.w	r3, r8, #15
   1ec78:	d00a      	beq.n	1ec90 <_strtod_l+0x478>
   1ec7a:	494f      	ldr	r1, [pc, #316]	; (1edb8 <_strtod_l+0x5a0>)
   1ec7c:	4652      	mov	r2, sl
   1ec7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1ec82:	465b      	mov	r3, fp
   1ec84:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ec88:	f7fd fd96 	bl	1c7b8 <__aeabi_dmul>
   1ec8c:	4682      	mov	sl, r0
   1ec8e:	468b      	mov	fp, r1
   1ec90:	f038 080f 	bics.w	r8, r8, #15
   1ec94:	d04f      	beq.n	1ed36 <_strtod_l+0x51e>
   1ec96:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   1ec9a:	dd22      	ble.n	1ece2 <_strtod_l+0x4ca>
   1ec9c:	2500      	movs	r5, #0
   1ec9e:	46a9      	mov	r9, r5
   1eca0:	9507      	str	r5, [sp, #28]
   1eca2:	9505      	str	r5, [sp, #20]
   1eca4:	2322      	movs	r3, #34	; 0x22
   1eca6:	f8df b118 	ldr.w	fp, [pc, #280]	; 1edc0 <_strtod_l+0x5a8>
   1ecaa:	f04f 0a00 	mov.w	sl, #0
   1ecae:	6023      	str	r3, [r4, #0]
   1ecb0:	9b07      	ldr	r3, [sp, #28]
   1ecb2:	2b00      	cmp	r3, #0
   1ecb4:	f43f adf4 	beq.w	1e8a0 <_strtod_l+0x88>
   1ecb8:	9918      	ldr	r1, [sp, #96]	; 0x60
   1ecba:	4620      	mov	r0, r4
   1ecbc:	f01c fd38 	bl	3b730 <_Bfree>
   1ecc0:	9905      	ldr	r1, [sp, #20]
   1ecc2:	4620      	mov	r0, r4
   1ecc4:	f01c fd34 	bl	3b730 <_Bfree>
   1ecc8:	4649      	mov	r1, r9
   1ecca:	4620      	mov	r0, r4
   1eccc:	f01c fd30 	bl	3b730 <_Bfree>
   1ecd0:	9907      	ldr	r1, [sp, #28]
   1ecd2:	4620      	mov	r0, r4
   1ecd4:	f01c fd2c 	bl	3b730 <_Bfree>
   1ecd8:	4629      	mov	r1, r5
   1ecda:	4620      	mov	r0, r4
   1ecdc:	f01c fd28 	bl	3b730 <_Bfree>
   1ece0:	e5de      	b.n	1e8a0 <_strtod_l+0x88>
   1ece2:	4b36      	ldr	r3, [pc, #216]	; (1edbc <_strtod_l+0x5a4>)
   1ece4:	ea4f 1828 	mov.w	r8, r8, asr #4
   1ece8:	4650      	mov	r0, sl
   1ecea:	4659      	mov	r1, fp
   1ecec:	9304      	str	r3, [sp, #16]
   1ecee:	2300      	movs	r3, #0
   1ecf0:	4699      	mov	r9, r3
   1ecf2:	f1b8 0f01 	cmp.w	r8, #1
   1ecf6:	dc21      	bgt.n	1ed3c <_strtod_l+0x524>
   1ecf8:	b10b      	cbz	r3, 1ecfe <_strtod_l+0x4e6>
   1ecfa:	4682      	mov	sl, r0
   1ecfc:	468b      	mov	fp, r1
   1ecfe:	4b2f      	ldr	r3, [pc, #188]	; (1edbc <_strtod_l+0x5a4>)
   1ed00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1ed04:	4652      	mov	r2, sl
   1ed06:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   1ed0a:	465b      	mov	r3, fp
   1ed0c:	e9d9 0100 	ldrd	r0, r1, [r9]
   1ed10:	f7fd fd52 	bl	1c7b8 <__aeabi_dmul>
   1ed14:	4b2a      	ldr	r3, [pc, #168]	; (1edc0 <_strtod_l+0x5a8>)
   1ed16:	460a      	mov	r2, r1
   1ed18:	4682      	mov	sl, r0
   1ed1a:	400b      	ands	r3, r1
   1ed1c:	4929      	ldr	r1, [pc, #164]	; (1edc4 <_strtod_l+0x5ac>)
   1ed1e:	428b      	cmp	r3, r1
   1ed20:	d8bc      	bhi.n	1ec9c <_strtod_l+0x484>
   1ed22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1ed26:	428b      	cmp	r3, r1
   1ed28:	bf86      	itte	hi
   1ed2a:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 1edc8 <_strtod_l+0x5b0>
   1ed2e:	f04f 3aff 	movhi.w	sl, #4294967295
   1ed32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1ed36:	2300      	movs	r3, #0
   1ed38:	9304      	str	r3, [sp, #16]
   1ed3a:	e084      	b.n	1ee46 <_strtod_l+0x62e>
   1ed3c:	f018 0f01 	tst.w	r8, #1
   1ed40:	d005      	beq.n	1ed4e <_strtod_l+0x536>
   1ed42:	9b04      	ldr	r3, [sp, #16]
   1ed44:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ed48:	f7fd fd36 	bl	1c7b8 <__aeabi_dmul>
   1ed4c:	2301      	movs	r3, #1
   1ed4e:	9a04      	ldr	r2, [sp, #16]
   1ed50:	f109 0901 	add.w	r9, r9, #1
   1ed54:	ea4f 0868 	mov.w	r8, r8, asr #1
   1ed58:	3208      	adds	r2, #8
   1ed5a:	9204      	str	r2, [sp, #16]
   1ed5c:	e7c9      	b.n	1ecf2 <_strtod_l+0x4da>
   1ed5e:	d0ea      	beq.n	1ed36 <_strtod_l+0x51e>
   1ed60:	f1c8 0800 	rsb	r8, r8, #0
   1ed64:	f018 020f 	ands.w	r2, r8, #15
   1ed68:	d00a      	beq.n	1ed80 <_strtod_l+0x568>
   1ed6a:	4b13      	ldr	r3, [pc, #76]	; (1edb8 <_strtod_l+0x5a0>)
   1ed6c:	4650      	mov	r0, sl
   1ed6e:	4659      	mov	r1, fp
   1ed70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ed74:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ed78:	f7fd fe48 	bl	1ca0c <__aeabi_ddiv>
   1ed7c:	4682      	mov	sl, r0
   1ed7e:	468b      	mov	fp, r1
   1ed80:	ea5f 1828 	movs.w	r8, r8, asr #4
   1ed84:	d0d7      	beq.n	1ed36 <_strtod_l+0x51e>
   1ed86:	f1b8 0f1f 	cmp.w	r8, #31
   1ed8a:	dd1f      	ble.n	1edcc <_strtod_l+0x5b4>
   1ed8c:	2500      	movs	r5, #0
   1ed8e:	46a9      	mov	r9, r5
   1ed90:	9507      	str	r5, [sp, #28]
   1ed92:	9505      	str	r5, [sp, #20]
   1ed94:	2322      	movs	r3, #34	; 0x22
   1ed96:	f04f 0a00 	mov.w	sl, #0
   1ed9a:	f04f 0b00 	mov.w	fp, #0
   1ed9e:	6023      	str	r3, [r4, #0]
   1eda0:	e786      	b.n	1ecb0 <_strtod_l+0x498>
   1eda2:	bf00      	nop
   1eda4:	0004c02c 	.word	0x0004c02c
   1eda8:	000435e8 	.word	0x000435e8
   1edac:	0004c024 	.word	0x0004c024
   1edb0:	0004c054 	.word	0x0004c054
   1edb4:	000453f3 	.word	0x000453f3
   1edb8:	00042a98 	.word	0x00042a98
   1edbc:	00042a70 	.word	0x00042a70
   1edc0:	7ff00000 	.word	0x7ff00000
   1edc4:	7ca00000 	.word	0x7ca00000
   1edc8:	7fefffff 	.word	0x7fefffff
   1edcc:	f018 0310 	ands.w	r3, r8, #16
   1edd0:	4650      	mov	r0, sl
   1edd2:	4659      	mov	r1, fp
   1edd4:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 1f180 <_strtod_l+0x968>
   1edd8:	bf18      	it	ne
   1edda:	236a      	movne	r3, #106	; 0x6a
   1eddc:	9304      	str	r3, [sp, #16]
   1edde:	2300      	movs	r3, #0
   1ede0:	f018 0f01 	tst.w	r8, #1
   1ede4:	d004      	beq.n	1edf0 <_strtod_l+0x5d8>
   1ede6:	e9d9 2300 	ldrd	r2, r3, [r9]
   1edea:	f7fd fce5 	bl	1c7b8 <__aeabi_dmul>
   1edee:	2301      	movs	r3, #1
   1edf0:	ea5f 0868 	movs.w	r8, r8, asr #1
   1edf4:	f109 0908 	add.w	r9, r9, #8
   1edf8:	d1f2      	bne.n	1ede0 <_strtod_l+0x5c8>
   1edfa:	b10b      	cbz	r3, 1ee00 <_strtod_l+0x5e8>
   1edfc:	4682      	mov	sl, r0
   1edfe:	468b      	mov	fp, r1
   1ee00:	9b04      	ldr	r3, [sp, #16]
   1ee02:	b1c3      	cbz	r3, 1ee36 <_strtod_l+0x61e>
   1ee04:	f3cb 520a 	ubfx	r2, fp, #20, #11
   1ee08:	4659      	mov	r1, fp
   1ee0a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1ee0e:	2b00      	cmp	r3, #0
   1ee10:	dd11      	ble.n	1ee36 <_strtod_l+0x61e>
   1ee12:	2b1f      	cmp	r3, #31
   1ee14:	f340 8120 	ble.w	1f058 <_strtod_l+0x840>
   1ee18:	2b34      	cmp	r3, #52	; 0x34
   1ee1a:	f04f 0a00 	mov.w	sl, #0
   1ee1e:	bfdb      	ittet	le
   1ee20:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   1ee24:	f04f 33ff 	movle.w	r3, #4294967295
   1ee28:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1ee2c:	fa03 f202 	lslle.w	r2, r3, r2
   1ee30:	bfd8      	it	le
   1ee32:	ea02 0b01 	andle.w	fp, r2, r1
   1ee36:	2200      	movs	r2, #0
   1ee38:	2300      	movs	r3, #0
   1ee3a:	4650      	mov	r0, sl
   1ee3c:	4659      	mov	r1, fp
   1ee3e:	f7fd ff23 	bl	1cc88 <__aeabi_dcmpeq>
   1ee42:	2800      	cmp	r0, #0
   1ee44:	d1a2      	bne.n	1ed8c <_strtod_l+0x574>
   1ee46:	9b07      	ldr	r3, [sp, #28]
   1ee48:	463a      	mov	r2, r7
   1ee4a:	9908      	ldr	r1, [sp, #32]
   1ee4c:	4620      	mov	r0, r4
   1ee4e:	9300      	str	r3, [sp, #0]
   1ee50:	462b      	mov	r3, r5
   1ee52:	f01c fcd7 	bl	3b804 <__s2b>
   1ee56:	9007      	str	r0, [sp, #28]
   1ee58:	2800      	cmp	r0, #0
   1ee5a:	f43f af1f 	beq.w	1ec9c <_strtod_l+0x484>
   1ee5e:	9b05      	ldr	r3, [sp, #20]
   1ee60:	2500      	movs	r5, #0
   1ee62:	1b9e      	subs	r6, r3, r6
   1ee64:	9b06      	ldr	r3, [sp, #24]
   1ee66:	46a9      	mov	r9, r5
   1ee68:	2b00      	cmp	r3, #0
   1ee6a:	bfb4      	ite	lt
   1ee6c:	4633      	movlt	r3, r6
   1ee6e:	2300      	movge	r3, #0
   1ee70:	930c      	str	r3, [sp, #48]	; 0x30
   1ee72:	9b06      	ldr	r3, [sp, #24]
   1ee74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ee78:	9312      	str	r3, [sp, #72]	; 0x48
   1ee7a:	9b07      	ldr	r3, [sp, #28]
   1ee7c:	4620      	mov	r0, r4
   1ee7e:	6859      	ldr	r1, [r3, #4]
   1ee80:	f01c fc16 	bl	3b6b0 <_Balloc>
   1ee84:	9005      	str	r0, [sp, #20]
   1ee86:	2800      	cmp	r0, #0
   1ee88:	f43f af0c 	beq.w	1eca4 <_strtod_l+0x48c>
   1ee8c:	9b07      	ldr	r3, [sp, #28]
   1ee8e:	300c      	adds	r0, #12
   1ee90:	691a      	ldr	r2, [r3, #16]
   1ee92:	f103 010c 	add.w	r1, r3, #12
   1ee96:	3202      	adds	r2, #2
   1ee98:	0092      	lsls	r2, r2, #2
   1ee9a:	f022 fb92 	bl	415c2 <memcpy>
   1ee9e:	ab1a      	add	r3, sp, #104	; 0x68
   1eea0:	4652      	mov	r2, sl
   1eea2:	4620      	mov	r0, r4
   1eea4:	9301      	str	r3, [sp, #4]
   1eea6:	ab19      	add	r3, sp, #100	; 0x64
   1eea8:	9300      	str	r3, [sp, #0]
   1eeaa:	465b      	mov	r3, fp
   1eeac:	f01c ff82 	bl	3bdb4 <__d2b>
   1eeb0:	9018      	str	r0, [sp, #96]	; 0x60
   1eeb2:	ec4b ab18 	vmov	d8, sl, fp
   1eeb6:	2800      	cmp	r0, #0
   1eeb8:	f43f aef4 	beq.w	1eca4 <_strtod_l+0x48c>
   1eebc:	2101      	movs	r1, #1
   1eebe:	4620      	mov	r0, r4
   1eec0:	f01c fcea 	bl	3b898 <__i2b>
   1eec4:	4681      	mov	r9, r0
   1eec6:	2800      	cmp	r0, #0
   1eec8:	f43f aeec 	beq.w	1eca4 <_strtod_l+0x48c>
   1eecc:	9e19      	ldr	r6, [sp, #100]	; 0x64
   1eece:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1eed0:	2e00      	cmp	r6, #0
   1eed2:	bfa9      	itett	ge
   1eed4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
   1eed6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   1eed8:	eb06 0803 	addge.w	r8, r6, r3
   1eedc:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   1eede:	bfb8      	it	lt
   1eee0:	1b9f      	sublt	r7, r3, r6
   1eee2:	9b04      	ldr	r3, [sp, #16]
   1eee4:	bfb8      	it	lt
   1eee6:	f8dd 8030 	ldrlt.w	r8, [sp, #48]	; 0x30
   1eeea:	1af6      	subs	r6, r6, r3
   1eeec:	4b9f      	ldr	r3, [pc, #636]	; (1f16c <_strtod_l+0x954>)
   1eeee:	4416      	add	r6, r2
   1eef0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1eef4:	3e01      	subs	r6, #1
   1eef6:	429e      	cmp	r6, r3
   1eef8:	f280 80c1 	bge.w	1f07e <_strtod_l+0x866>
   1eefc:	1b9b      	subs	r3, r3, r6
   1eefe:	2101      	movs	r1, #1
   1ef00:	2b1f      	cmp	r3, #31
   1ef02:	eba2 0203 	sub.w	r2, r2, r3
   1ef06:	f300 80ae 	bgt.w	1f066 <_strtod_l+0x84e>
   1ef0a:	fa01 f303 	lsl.w	r3, r1, r3
   1ef0e:	930d      	str	r3, [sp, #52]	; 0x34
   1ef10:	2300      	movs	r3, #0
   1ef12:	9308      	str	r3, [sp, #32]
   1ef14:	eb08 0602 	add.w	r6, r8, r2
   1ef18:	9b04      	ldr	r3, [sp, #16]
   1ef1a:	4417      	add	r7, r2
   1ef1c:	45b0      	cmp	r8, r6
   1ef1e:	441f      	add	r7, r3
   1ef20:	4643      	mov	r3, r8
   1ef22:	bfa8      	it	ge
   1ef24:	4633      	movge	r3, r6
   1ef26:	42bb      	cmp	r3, r7
   1ef28:	bfa8      	it	ge
   1ef2a:	463b      	movge	r3, r7
   1ef2c:	2b00      	cmp	r3, #0
   1ef2e:	bfc2      	ittt	gt
   1ef30:	1af6      	subgt	r6, r6, r3
   1ef32:	1aff      	subgt	r7, r7, r3
   1ef34:	eba8 0803 	subgt.w	r8, r8, r3
   1ef38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ef3a:	2b00      	cmp	r3, #0
   1ef3c:	dd17      	ble.n	1ef6e <_strtod_l+0x756>
   1ef3e:	4649      	mov	r1, r9
   1ef40:	461a      	mov	r2, r3
   1ef42:	4620      	mov	r0, r4
   1ef44:	f01c fd66 	bl	3ba14 <__pow5mult>
   1ef48:	4681      	mov	r9, r0
   1ef4a:	2800      	cmp	r0, #0
   1ef4c:	f43f aeaa 	beq.w	1eca4 <_strtod_l+0x48c>
   1ef50:	4601      	mov	r1, r0
   1ef52:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1ef54:	4620      	mov	r0, r4
   1ef56:	f01c fcb5 	bl	3b8c4 <__multiply>
   1ef5a:	900b      	str	r0, [sp, #44]	; 0x2c
   1ef5c:	2800      	cmp	r0, #0
   1ef5e:	f43f aea1 	beq.w	1eca4 <_strtod_l+0x48c>
   1ef62:	9918      	ldr	r1, [sp, #96]	; 0x60
   1ef64:	4620      	mov	r0, r4
   1ef66:	f01c fbe3 	bl	3b730 <_Bfree>
   1ef6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ef6c:	9318      	str	r3, [sp, #96]	; 0x60
   1ef6e:	2e00      	cmp	r6, #0
   1ef70:	f300 808a 	bgt.w	1f088 <_strtod_l+0x870>
   1ef74:	9b06      	ldr	r3, [sp, #24]
   1ef76:	2b00      	cmp	r3, #0
   1ef78:	dd08      	ble.n	1ef8c <_strtod_l+0x774>
   1ef7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1ef7c:	4620      	mov	r0, r4
   1ef7e:	9905      	ldr	r1, [sp, #20]
   1ef80:	f01c fd48 	bl	3ba14 <__pow5mult>
   1ef84:	9005      	str	r0, [sp, #20]
   1ef86:	2800      	cmp	r0, #0
   1ef88:	f43f ae8c 	beq.w	1eca4 <_strtod_l+0x48c>
   1ef8c:	2f00      	cmp	r7, #0
   1ef8e:	dd08      	ble.n	1efa2 <_strtod_l+0x78a>
   1ef90:	463a      	mov	r2, r7
   1ef92:	9905      	ldr	r1, [sp, #20]
   1ef94:	4620      	mov	r0, r4
   1ef96:	f01c fd97 	bl	3bac8 <__lshift>
   1ef9a:	9005      	str	r0, [sp, #20]
   1ef9c:	2800      	cmp	r0, #0
   1ef9e:	f43f ae81 	beq.w	1eca4 <_strtod_l+0x48c>
   1efa2:	f1b8 0f00 	cmp.w	r8, #0
   1efa6:	dd08      	ble.n	1efba <_strtod_l+0x7a2>
   1efa8:	4649      	mov	r1, r9
   1efaa:	4642      	mov	r2, r8
   1efac:	4620      	mov	r0, r4
   1efae:	f01c fd8b 	bl	3bac8 <__lshift>
   1efb2:	4681      	mov	r9, r0
   1efb4:	2800      	cmp	r0, #0
   1efb6:	f43f ae75 	beq.w	1eca4 <_strtod_l+0x48c>
   1efba:	9a05      	ldr	r2, [sp, #20]
   1efbc:	4620      	mov	r0, r4
   1efbe:	9918      	ldr	r1, [sp, #96]	; 0x60
   1efc0:	f01c fdf2 	bl	3bba8 <__mdiff>
   1efc4:	4605      	mov	r5, r0
   1efc6:	2800      	cmp	r0, #0
   1efc8:	f43f ae6c 	beq.w	1eca4 <_strtod_l+0x48c>
   1efcc:	68c3      	ldr	r3, [r0, #12]
   1efce:	4649      	mov	r1, r9
   1efd0:	930b      	str	r3, [sp, #44]	; 0x2c
   1efd2:	2300      	movs	r3, #0
   1efd4:	60c3      	str	r3, [r0, #12]
   1efd6:	f023 f827 	bl	42028 <__mcmp>
   1efda:	2800      	cmp	r0, #0
   1efdc:	da5e      	bge.n	1f09c <_strtod_l+0x884>
   1efde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1efe0:	ea53 030a 	orrs.w	r3, r3, sl
   1efe4:	f040 8082 	bne.w	1f0ec <_strtod_l+0x8d4>
   1efe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1efec:	2b00      	cmp	r3, #0
   1efee:	d17d      	bne.n	1f0ec <_strtod_l+0x8d4>
   1eff0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1eff4:	0d1b      	lsrs	r3, r3, #20
   1eff6:	051b      	lsls	r3, r3, #20
   1eff8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1effc:	d976      	bls.n	1f0ec <_strtod_l+0x8d4>
   1effe:	696b      	ldr	r3, [r5, #20]
   1f000:	b913      	cbnz	r3, 1f008 <_strtod_l+0x7f0>
   1f002:	692b      	ldr	r3, [r5, #16]
   1f004:	2b01      	cmp	r3, #1
   1f006:	dd71      	ble.n	1f0ec <_strtod_l+0x8d4>
   1f008:	4629      	mov	r1, r5
   1f00a:	2201      	movs	r2, #1
   1f00c:	4620      	mov	r0, r4
   1f00e:	f01c fd5b 	bl	3bac8 <__lshift>
   1f012:	4649      	mov	r1, r9
   1f014:	4605      	mov	r5, r0
   1f016:	f023 f807 	bl	42028 <__mcmp>
   1f01a:	2800      	cmp	r0, #0
   1f01c:	dd66      	ble.n	1f0ec <_strtod_l+0x8d4>
   1f01e:	9904      	ldr	r1, [sp, #16]
   1f020:	465b      	mov	r3, fp
   1f022:	4a53      	ldr	r2, [pc, #332]	; (1f170 <_strtod_l+0x958>)
   1f024:	2900      	cmp	r1, #0
   1f026:	f000 8082 	beq.w	1f12e <_strtod_l+0x916>
   1f02a:	ea02 010b 	and.w	r1, r2, fp
   1f02e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1f032:	dc7c      	bgt.n	1f12e <_strtod_l+0x916>
   1f034:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1f038:	f77f aeac 	ble.w	1ed94 <_strtod_l+0x57c>
   1f03c:	4b4d      	ldr	r3, [pc, #308]	; (1f174 <_strtod_l+0x95c>)
   1f03e:	4650      	mov	r0, sl
   1f040:	4659      	mov	r1, fp
   1f042:	2200      	movs	r2, #0
   1f044:	f7fd fbb8 	bl	1c7b8 <__aeabi_dmul>
   1f048:	460b      	mov	r3, r1
   1f04a:	4682      	mov	sl, r0
   1f04c:	468b      	mov	fp, r1
   1f04e:	4303      	orrs	r3, r0
   1f050:	bf04      	itt	eq
   1f052:	2322      	moveq	r3, #34	; 0x22
   1f054:	6023      	streq	r3, [r4, #0]
   1f056:	e62f      	b.n	1ecb8 <_strtod_l+0x4a0>
   1f058:	f04f 32ff 	mov.w	r2, #4294967295
   1f05c:	fa02 f303 	lsl.w	r3, r2, r3
   1f060:	ea03 0a0a 	and.w	sl, r3, sl
   1f064:	e6e7      	b.n	1ee36 <_strtod_l+0x61e>
   1f066:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
   1f06a:	910d      	str	r1, [sp, #52]	; 0x34
   1f06c:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
   1f070:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
   1f074:	36e2      	adds	r6, #226	; 0xe2
   1f076:	fa01 f306 	lsl.w	r3, r1, r6
   1f07a:	9308      	str	r3, [sp, #32]
   1f07c:	e74a      	b.n	1ef14 <_strtod_l+0x6fc>
   1f07e:	2300      	movs	r3, #0
   1f080:	9308      	str	r3, [sp, #32]
   1f082:	2301      	movs	r3, #1
   1f084:	930d      	str	r3, [sp, #52]	; 0x34
   1f086:	e745      	b.n	1ef14 <_strtod_l+0x6fc>
   1f088:	4632      	mov	r2, r6
   1f08a:	9918      	ldr	r1, [sp, #96]	; 0x60
   1f08c:	4620      	mov	r0, r4
   1f08e:	f01c fd1b 	bl	3bac8 <__lshift>
   1f092:	9018      	str	r0, [sp, #96]	; 0x60
   1f094:	2800      	cmp	r0, #0
   1f096:	f47f af6d 	bne.w	1ef74 <_strtod_l+0x75c>
   1f09a:	e603      	b.n	1eca4 <_strtod_l+0x48c>
   1f09c:	46d8      	mov	r8, fp
   1f09e:	d171      	bne.n	1f184 <_strtod_l+0x96c>
   1f0a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f0a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f0a6:	b352      	cbz	r2, 1f0fe <_strtod_l+0x8e6>
   1f0a8:	4a33      	ldr	r2, [pc, #204]	; (1f178 <_strtod_l+0x960>)
   1f0aa:	4293      	cmp	r3, r2
   1f0ac:	d12a      	bne.n	1f104 <_strtod_l+0x8ec>
   1f0ae:	9b04      	ldr	r3, [sp, #16]
   1f0b0:	4651      	mov	r1, sl
   1f0b2:	b1fb      	cbz	r3, 1f0f4 <_strtod_l+0x8dc>
   1f0b4:	4b2e      	ldr	r3, [pc, #184]	; (1f170 <_strtod_l+0x958>)
   1f0b6:	f04f 32ff 	mov.w	r2, #4294967295
   1f0ba:	ea0b 0303 	and.w	r3, fp, r3
   1f0be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1f0c2:	d81a      	bhi.n	1f0fa <_strtod_l+0x8e2>
   1f0c4:	0d1b      	lsrs	r3, r3, #20
   1f0c6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1f0ca:	fa02 f303 	lsl.w	r3, r2, r3
   1f0ce:	4299      	cmp	r1, r3
   1f0d0:	d118      	bne.n	1f104 <_strtod_l+0x8ec>
   1f0d2:	4b2a      	ldr	r3, [pc, #168]	; (1f17c <_strtod_l+0x964>)
   1f0d4:	4598      	cmp	r8, r3
   1f0d6:	d102      	bne.n	1f0de <_strtod_l+0x8c6>
   1f0d8:	3101      	adds	r1, #1
   1f0da:	f43f ade3 	beq.w	1eca4 <_strtod_l+0x48c>
   1f0de:	4b24      	ldr	r3, [pc, #144]	; (1f170 <_strtod_l+0x958>)
   1f0e0:	f04f 0a00 	mov.w	sl, #0
   1f0e4:	ea08 0303 	and.w	r3, r8, r3
   1f0e8:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1f0ec:	9b04      	ldr	r3, [sp, #16]
   1f0ee:	2b00      	cmp	r3, #0
   1f0f0:	d1a4      	bne.n	1f03c <_strtod_l+0x824>
   1f0f2:	e5e1      	b.n	1ecb8 <_strtod_l+0x4a0>
   1f0f4:	f04f 33ff 	mov.w	r3, #4294967295
   1f0f8:	e7e9      	b.n	1f0ce <_strtod_l+0x8b6>
   1f0fa:	4613      	mov	r3, r2
   1f0fc:	e7e7      	b.n	1f0ce <_strtod_l+0x8b6>
   1f0fe:	ea53 030a 	orrs.w	r3, r3, sl
   1f102:	d08c      	beq.n	1f01e <_strtod_l+0x806>
   1f104:	9b08      	ldr	r3, [sp, #32]
   1f106:	b1e3      	cbz	r3, 1f142 <_strtod_l+0x92a>
   1f108:	ea13 0f08 	tst.w	r3, r8
   1f10c:	d0ee      	beq.n	1f0ec <_strtod_l+0x8d4>
   1f10e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f110:	4650      	mov	r0, sl
   1f112:	9a04      	ldr	r2, [sp, #16]
   1f114:	4659      	mov	r1, fp
   1f116:	b1c3      	cbz	r3, 1f14a <_strtod_l+0x932>
   1f118:	f022 fca3 	bl	41a62 <sulp>
   1f11c:	4602      	mov	r2, r0
   1f11e:	460b      	mov	r3, r1
   1f120:	ec51 0b18 	vmov	r0, r1, d8
   1f124:	f7fd f992 	bl	1c44c <__adddf3>
   1f128:	4682      	mov	sl, r0
   1f12a:	468b      	mov	fp, r1
   1f12c:	e7de      	b.n	1f0ec <_strtod_l+0x8d4>
   1f12e:	4013      	ands	r3, r2
   1f130:	f04f 3aff 	mov.w	sl, #4294967295
   1f134:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1f138:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1f13c:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1f140:	e7d4      	b.n	1f0ec <_strtod_l+0x8d4>
   1f142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f144:	ea13 0f0a 	tst.w	r3, sl
   1f148:	e7e0      	b.n	1f10c <_strtod_l+0x8f4>
   1f14a:	f022 fc8a 	bl	41a62 <sulp>
   1f14e:	4602      	mov	r2, r0
   1f150:	460b      	mov	r3, r1
   1f152:	ec51 0b18 	vmov	r0, r1, d8
   1f156:	f7fd f977 	bl	1c448 <__aeabi_dsub>
   1f15a:	2200      	movs	r2, #0
   1f15c:	2300      	movs	r3, #0
   1f15e:	4682      	mov	sl, r0
   1f160:	468b      	mov	fp, r1
   1f162:	f7fd fd91 	bl	1cc88 <__aeabi_dcmpeq>
   1f166:	2800      	cmp	r0, #0
   1f168:	d0c0      	beq.n	1f0ec <_strtod_l+0x8d4>
   1f16a:	e613      	b.n	1ed94 <_strtod_l+0x57c>
   1f16c:	fffffc02 	.word	0xfffffc02
   1f170:	7ff00000 	.word	0x7ff00000
   1f174:	39500000 	.word	0x39500000
   1f178:	000fffff 	.word	0x000fffff
   1f17c:	7fefffff 	.word	0x7fefffff
   1f180:	00042a48 	.word	0x00042a48
   1f184:	4649      	mov	r1, r9
   1f186:	4628      	mov	r0, r5
   1f188:	f022 ff6a 	bl	42060 <__ratio>
   1f18c:	2200      	movs	r2, #0
   1f18e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f192:	4606      	mov	r6, r0
   1f194:	460f      	mov	r7, r1
   1f196:	f7fd fd8b 	bl	1ccb0 <__aeabi_dcmple>
   1f19a:	2800      	cmp	r0, #0
   1f19c:	d079      	beq.n	1f292 <_strtod_l+0xa7a>
   1f19e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f1a0:	2b00      	cmp	r3, #0
   1f1a2:	d04b      	beq.n	1f23c <_strtod_l+0xa24>
   1f1a4:	2200      	movs	r2, #0
   1f1a6:	4b92      	ldr	r3, [pc, #584]	; (1f3f0 <_strtod_l+0xbd8>)
   1f1a8:	2600      	movs	r6, #0
   1f1aa:	4f91      	ldr	r7, [pc, #580]	; (1f3f0 <_strtod_l+0xbd8>)
   1f1ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1f1b0:	4b90      	ldr	r3, [pc, #576]	; (1f3f4 <_strtod_l+0xbdc>)
   1f1b2:	ea08 0303 	and.w	r3, r8, r3
   1f1b6:	930d      	str	r3, [sp, #52]	; 0x34
   1f1b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f1ba:	4b8f      	ldr	r3, [pc, #572]	; (1f3f8 <_strtod_l+0xbe0>)
   1f1bc:	429a      	cmp	r2, r3
   1f1be:	f040 80b0 	bne.w	1f322 <_strtod_l+0xb0a>
   1f1c2:	f1a8 7b54 	sub.w	fp, r8, #55574528	; 0x3500000
   1f1c6:	4650      	mov	r0, sl
   1f1c8:	ed9d 7b08 	vldr	d7, [sp, #32]
   1f1cc:	4659      	mov	r1, fp
   1f1ce:	eeb0 9a47 	vmov.f32	s18, s14
   1f1d2:	eef0 9a67 	vmov.f32	s19, s15
   1f1d6:	f01c fd77 	bl	3bcc8 <__ulp>
   1f1da:	4602      	mov	r2, r0
   1f1dc:	460b      	mov	r3, r1
   1f1de:	ec51 0b19 	vmov	r0, r1, d9
   1f1e2:	f7fd fae9 	bl	1c7b8 <__aeabi_dmul>
   1f1e6:	4652      	mov	r2, sl
   1f1e8:	465b      	mov	r3, fp
   1f1ea:	f7fd f92f 	bl	1c44c <__adddf3>
   1f1ee:	460b      	mov	r3, r1
   1f1f0:	4980      	ldr	r1, [pc, #512]	; (1f3f4 <_strtod_l+0xbdc>)
   1f1f2:	4682      	mov	sl, r0
   1f1f4:	4a81      	ldr	r2, [pc, #516]	; (1f3fc <_strtod_l+0xbe4>)
   1f1f6:	4019      	ands	r1, r3
   1f1f8:	4291      	cmp	r1, r2
   1f1fa:	d95e      	bls.n	1f2ba <_strtod_l+0xaa2>
   1f1fc:	ee18 3a90 	vmov	r3, s17
   1f200:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   1f204:	4293      	cmp	r3, r2
   1f206:	d104      	bne.n	1f212 <_strtod_l+0x9fa>
   1f208:	ee18 3a10 	vmov	r3, s16
   1f20c:	3301      	adds	r3, #1
   1f20e:	f43f ad49 	beq.w	1eca4 <_strtod_l+0x48c>
   1f212:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 1f408 <_strtod_l+0xbf0>
   1f216:	f04f 3aff 	mov.w	sl, #4294967295
   1f21a:	9918      	ldr	r1, [sp, #96]	; 0x60
   1f21c:	4620      	mov	r0, r4
   1f21e:	f01c fa87 	bl	3b730 <_Bfree>
   1f222:	9905      	ldr	r1, [sp, #20]
   1f224:	4620      	mov	r0, r4
   1f226:	f01c fa83 	bl	3b730 <_Bfree>
   1f22a:	4649      	mov	r1, r9
   1f22c:	4620      	mov	r0, r4
   1f22e:	f01c fa7f 	bl	3b730 <_Bfree>
   1f232:	4629      	mov	r1, r5
   1f234:	4620      	mov	r0, r4
   1f236:	f01c fa7b 	bl	3b730 <_Bfree>
   1f23a:	e61e      	b.n	1ee7a <_strtod_l+0x662>
   1f23c:	f1ba 0f00 	cmp.w	sl, #0
   1f240:	d11a      	bne.n	1f278 <_strtod_l+0xa60>
   1f242:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f246:	b9f3      	cbnz	r3, 1f286 <_strtod_l+0xa6e>
   1f248:	2200      	movs	r2, #0
   1f24a:	4b69      	ldr	r3, [pc, #420]	; (1f3f0 <_strtod_l+0xbd8>)
   1f24c:	4630      	mov	r0, r6
   1f24e:	4639      	mov	r1, r7
   1f250:	f7fd fd24 	bl	1cc9c <__aeabi_dcmplt>
   1f254:	b9d0      	cbnz	r0, 1f28c <_strtod_l+0xa74>
   1f256:	4630      	mov	r0, r6
   1f258:	4639      	mov	r1, r7
   1f25a:	2200      	movs	r2, #0
   1f25c:	4b68      	ldr	r3, [pc, #416]	; (1f400 <_strtod_l+0xbe8>)
   1f25e:	f7fd faab 	bl	1c7b8 <__aeabi_dmul>
   1f262:	4606      	mov	r6, r0
   1f264:	460f      	mov	r7, r1
   1f266:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1f26a:	9614      	str	r6, [sp, #80]	; 0x50
   1f26c:	9315      	str	r3, [sp, #84]	; 0x54
   1f26e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1f272:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1f276:	e79b      	b.n	1f1b0 <_strtod_l+0x998>
   1f278:	f1ba 0f01 	cmp.w	sl, #1
   1f27c:	d103      	bne.n	1f286 <_strtod_l+0xa6e>
   1f27e:	f1bb 0f00 	cmp.w	fp, #0
   1f282:	f43f ad87 	beq.w	1ed94 <_strtod_l+0x57c>
   1f286:	2200      	movs	r2, #0
   1f288:	4b5e      	ldr	r3, [pc, #376]	; (1f404 <_strtod_l+0xbec>)
   1f28a:	e78d      	b.n	1f1a8 <_strtod_l+0x990>
   1f28c:	2600      	movs	r6, #0
   1f28e:	4f5c      	ldr	r7, [pc, #368]	; (1f400 <_strtod_l+0xbe8>)
   1f290:	e7e9      	b.n	1f266 <_strtod_l+0xa4e>
   1f292:	4b5b      	ldr	r3, [pc, #364]	; (1f400 <_strtod_l+0xbe8>)
   1f294:	4630      	mov	r0, r6
   1f296:	4639      	mov	r1, r7
   1f298:	2200      	movs	r2, #0
   1f29a:	f7fd fa8d 	bl	1c7b8 <__aeabi_dmul>
   1f29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f2a0:	4606      	mov	r6, r0
   1f2a2:	460f      	mov	r7, r1
   1f2a4:	b933      	cbnz	r3, 1f2b4 <_strtod_l+0xa9c>
   1f2a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f2aa:	900e      	str	r0, [sp, #56]	; 0x38
   1f2ac:	930f      	str	r3, [sp, #60]	; 0x3c
   1f2ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1f2b2:	e7de      	b.n	1f272 <_strtod_l+0xa5a>
   1f2b4:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   1f2b8:	e7f9      	b.n	1f2ae <_strtod_l+0xa96>
   1f2ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   1f2be:	9b04      	ldr	r3, [sp, #16]
   1f2c0:	2b00      	cmp	r3, #0
   1f2c2:	d1aa      	bne.n	1f21a <_strtod_l+0xa02>
   1f2c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1f2c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f2ca:	0d1b      	lsrs	r3, r3, #20
   1f2cc:	051b      	lsls	r3, r3, #20
   1f2ce:	429a      	cmp	r2, r3
   1f2d0:	d1a3      	bne.n	1f21a <_strtod_l+0xa02>
   1f2d2:	4630      	mov	r0, r6
   1f2d4:	4639      	mov	r1, r7
   1f2d6:	f7fd fe3f 	bl	1cf58 <__aeabi_d2lz>
   1f2da:	f7fd fa3f 	bl	1c75c <__aeabi_l2d>
   1f2de:	4602      	mov	r2, r0
   1f2e0:	460b      	mov	r3, r1
   1f2e2:	4630      	mov	r0, r6
   1f2e4:	4639      	mov	r1, r7
   1f2e6:	f7fd f8af 	bl	1c448 <__aeabi_dsub>
   1f2ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f2ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f2f0:	4606      	mov	r6, r0
   1f2f2:	ea43 030a 	orr.w	r3, r3, sl
   1f2f6:	460f      	mov	r7, r1
   1f2f8:	4313      	orrs	r3, r2
   1f2fa:	d051      	beq.n	1f3a0 <_strtod_l+0xb88>
   1f2fc:	a334      	add	r3, pc, #208	; (adr r3, 1f3d0 <_strtod_l+0xbb8>)
   1f2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f302:	f7fd fccb 	bl	1cc9c <__aeabi_dcmplt>
   1f306:	2800      	cmp	r0, #0
   1f308:	f47f acd6 	bne.w	1ecb8 <_strtod_l+0x4a0>
   1f30c:	4630      	mov	r0, r6
   1f30e:	4639      	mov	r1, r7
   1f310:	a331      	add	r3, pc, #196	; (adr r3, 1f3d8 <_strtod_l+0xbc0>)
   1f312:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f316:	f7fd fcdf 	bl	1ccd8 <__aeabi_dcmpgt>
   1f31a:	2800      	cmp	r0, #0
   1f31c:	f43f af7d 	beq.w	1f21a <_strtod_l+0xa02>
   1f320:	e4ca      	b.n	1ecb8 <_strtod_l+0x4a0>
   1f322:	9b04      	ldr	r3, [sp, #16]
   1f324:	b333      	cbz	r3, 1f374 <_strtod_l+0xb5c>
   1f326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f328:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1f32c:	d822      	bhi.n	1f374 <_strtod_l+0xb5c>
   1f32e:	4630      	mov	r0, r6
   1f330:	4639      	mov	r1, r7
   1f332:	a32b      	add	r3, pc, #172	; (adr r3, 1f3e0 <_strtod_l+0xbc8>)
   1f334:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f338:	f7fd fcba 	bl	1ccb0 <__aeabi_dcmple>
   1f33c:	b1a0      	cbz	r0, 1f368 <_strtod_l+0xb50>
   1f33e:	4639      	mov	r1, r7
   1f340:	4630      	mov	r0, r6
   1f342:	f7fd fd11 	bl	1cd68 <__aeabi_d2uiz>
   1f346:	2801      	cmp	r0, #1
   1f348:	bf38      	it	cc
   1f34a:	2001      	movcc	r0, #1
   1f34c:	f7fd f9ba 	bl	1c6c4 <__aeabi_ui2d>
   1f350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f352:	4606      	mov	r6, r0
   1f354:	460f      	mov	r7, r1
   1f356:	bb03      	cbnz	r3, 1f39a <_strtod_l+0xb82>
   1f358:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f35c:	9010      	str	r0, [sp, #64]	; 0x40
   1f35e:	9311      	str	r3, [sp, #68]	; 0x44
   1f360:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1f364:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1f368:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f36a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f36c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   1f370:	1a9b      	subs	r3, r3, r2
   1f372:	9309      	str	r3, [sp, #36]	; 0x24
   1f374:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
   1f378:	ec51 0b18 	vmov	r0, r1, d8
   1f37c:	f01c fca4 	bl	3bcc8 <__ulp>
   1f380:	4602      	mov	r2, r0
   1f382:	460b      	mov	r3, r1
   1f384:	4650      	mov	r0, sl
   1f386:	4659      	mov	r1, fp
   1f388:	f7fd fa16 	bl	1c7b8 <__aeabi_dmul>
   1f38c:	ec53 2b18 	vmov	r2, r3, d8
   1f390:	f7fd f85c 	bl	1c44c <__adddf3>
   1f394:	4682      	mov	sl, r0
   1f396:	468b      	mov	fp, r1
   1f398:	e791      	b.n	1f2be <_strtod_l+0xaa6>
   1f39a:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   1f39e:	e7df      	b.n	1f360 <_strtod_l+0xb48>
   1f3a0:	a311      	add	r3, pc, #68	; (adr r3, 1f3e8 <_strtod_l+0xbd0>)
   1f3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f3a6:	f7fd fc79 	bl	1cc9c <__aeabi_dcmplt>
   1f3aa:	e7b6      	b.n	1f31a <_strtod_l+0xb02>
   1f3ac:	2300      	movs	r3, #0
   1f3ae:	930a      	str	r3, [sp, #40]	; 0x28
   1f3b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1f3b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1f3b4:	6013      	str	r3, [r2, #0]
   1f3b6:	f7ff ba77 	b.w	1e8a8 <_strtod_l+0x90>
   1f3ba:	2a65      	cmp	r2, #101	; 0x65
   1f3bc:	f43f ab69 	beq.w	1ea92 <_strtod_l+0x27a>
   1f3c0:	2a45      	cmp	r2, #69	; 0x45
   1f3c2:	f43f ab66 	beq.w	1ea92 <_strtod_l+0x27a>
   1f3c6:	2301      	movs	r3, #1
   1f3c8:	f7ff bb9e 	b.w	1eb08 <_strtod_l+0x2f0>
   1f3cc:	f3af 8000 	nop.w
   1f3d0:	94a03595 	.word	0x94a03595
   1f3d4:	3fdfffff 	.word	0x3fdfffff
   1f3d8:	35afe535 	.word	0x35afe535
   1f3dc:	3fe00000 	.word	0x3fe00000
   1f3e0:	ffc00000 	.word	0xffc00000
   1f3e4:	41dfffff 	.word	0x41dfffff
   1f3e8:	94a03595 	.word	0x94a03595
   1f3ec:	3fcfffff 	.word	0x3fcfffff
   1f3f0:	3ff00000 	.word	0x3ff00000
   1f3f4:	7ff00000 	.word	0x7ff00000
   1f3f8:	7fe00000 	.word	0x7fe00000
   1f3fc:	7c9fffff 	.word	0x7c9fffff
   1f400:	3fe00000 	.word	0x3fe00000
   1f404:	bff00000 	.word	0xbff00000
   1f408:	7fefffff 	.word	0x7fefffff
   1f40c:	00000000 	.word	0x00000000

0001f410 <_dtoa_r>:
   1f410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f414:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1f416:	4604      	mov	r4, r0
   1f418:	4616      	mov	r6, r2
   1f41a:	461f      	mov	r7, r3
   1f41c:	4692      	mov	sl, r2
   1f41e:	469b      	mov	fp, r3
   1f420:	ed2d 8b04 	vpush	{d8-d9}
   1f424:	b093      	sub	sp, #76	; 0x4c
   1f426:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
   1f42a:	b975      	cbnz	r5, 1f44a <_dtoa_r+0x3a>
   1f42c:	2010      	movs	r0, #16
   1f42e:	f01a fc51 	bl	39cd4 <malloc>
   1f432:	4602      	mov	r2, r0
   1f434:	6260      	str	r0, [r4, #36]	; 0x24
   1f436:	b920      	cbnz	r0, 1f442 <_dtoa_r+0x32>
   1f438:	4ba7      	ldr	r3, [pc, #668]	; (1f6d8 <_dtoa_r+0x2c8>)
   1f43a:	21ea      	movs	r1, #234	; 0xea
   1f43c:	48a7      	ldr	r0, [pc, #668]	; (1f6dc <_dtoa_r+0x2cc>)
   1f43e:	f01a fb6d 	bl	39b1c <__assert_func>
   1f442:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1f446:	6005      	str	r5, [r0, #0]
   1f448:	60c5      	str	r5, [r0, #12]
   1f44a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f44c:	6819      	ldr	r1, [r3, #0]
   1f44e:	b151      	cbz	r1, 1f466 <_dtoa_r+0x56>
   1f450:	685a      	ldr	r2, [r3, #4]
   1f452:	2301      	movs	r3, #1
   1f454:	4620      	mov	r0, r4
   1f456:	4093      	lsls	r3, r2
   1f458:	604a      	str	r2, [r1, #4]
   1f45a:	608b      	str	r3, [r1, #8]
   1f45c:	f01c f968 	bl	3b730 <_Bfree>
   1f460:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f462:	2200      	movs	r2, #0
   1f464:	601a      	str	r2, [r3, #0]
   1f466:	1e3b      	subs	r3, r7, #0
   1f468:	bfad      	iteet	ge
   1f46a:	2300      	movge	r3, #0
   1f46c:	2201      	movlt	r2, #1
   1f46e:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
   1f472:	f8c8 3000 	strge.w	r3, [r8]
   1f476:	4b9a      	ldr	r3, [pc, #616]	; (1f6e0 <_dtoa_r+0x2d0>)
   1f478:	bfb8      	it	lt
   1f47a:	f8c8 2000 	strlt.w	r2, [r8]
   1f47e:	ea33 030b 	bics.w	r3, r3, fp
   1f482:	d11b      	bne.n	1f4bc <_dtoa_r+0xac>
   1f484:	f242 730f 	movw	r3, #9999	; 0x270f
   1f488:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1f48a:	6013      	str	r3, [r2, #0]
   1f48c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f490:	4333      	orrs	r3, r6
   1f492:	f000 858f 	beq.w	1ffb4 <_dtoa_r+0xba4>
   1f496:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f498:	b963      	cbnz	r3, 1f4b4 <_dtoa_r+0xa4>
   1f49a:	4b92      	ldr	r3, [pc, #584]	; (1f6e4 <_dtoa_r+0x2d4>)
   1f49c:	e022      	b.n	1f4e4 <_dtoa_r+0xd4>
   1f49e:	4b92      	ldr	r3, [pc, #584]	; (1f6e8 <_dtoa_r+0x2d8>)
   1f4a0:	9304      	str	r3, [sp, #16]
   1f4a2:	3308      	adds	r3, #8
   1f4a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f4a6:	6013      	str	r3, [r2, #0]
   1f4a8:	9804      	ldr	r0, [sp, #16]
   1f4aa:	b013      	add	sp, #76	; 0x4c
   1f4ac:	ecbd 8b04 	vpop	{d8-d9}
   1f4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4b4:	4b8b      	ldr	r3, [pc, #556]	; (1f6e4 <_dtoa_r+0x2d4>)
   1f4b6:	9304      	str	r3, [sp, #16]
   1f4b8:	3303      	adds	r3, #3
   1f4ba:	e7f3      	b.n	1f4a4 <_dtoa_r+0x94>
   1f4bc:	2200      	movs	r2, #0
   1f4be:	2300      	movs	r3, #0
   1f4c0:	4650      	mov	r0, sl
   1f4c2:	4659      	mov	r1, fp
   1f4c4:	f7fd fbe0 	bl	1cc88 <__aeabi_dcmpeq>
   1f4c8:	4680      	mov	r8, r0
   1f4ca:	ec4b ab19 	vmov	d9, sl, fp
   1f4ce:	b158      	cbz	r0, 1f4e8 <_dtoa_r+0xd8>
   1f4d0:	2301      	movs	r3, #1
   1f4d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1f4d4:	6013      	str	r3, [r2, #0]
   1f4d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f4d8:	2b00      	cmp	r3, #0
   1f4da:	f000 8568 	beq.w	1ffae <_dtoa_r+0xb9e>
   1f4de:	4883      	ldr	r0, [pc, #524]	; (1f6ec <_dtoa_r+0x2dc>)
   1f4e0:	6018      	str	r0, [r3, #0]
   1f4e2:	1e43      	subs	r3, r0, #1
   1f4e4:	9304      	str	r3, [sp, #16]
   1f4e6:	e7df      	b.n	1f4a8 <_dtoa_r+0x98>
   1f4e8:	ab10      	add	r3, sp, #64	; 0x40
   1f4ea:	f3cb 550a 	ubfx	r5, fp, #20, #11
   1f4ee:	4652      	mov	r2, sl
   1f4f0:	4620      	mov	r0, r4
   1f4f2:	9301      	str	r3, [sp, #4]
   1f4f4:	ab11      	add	r3, sp, #68	; 0x44
   1f4f6:	9300      	str	r3, [sp, #0]
   1f4f8:	465b      	mov	r3, fp
   1f4fa:	f01c fc5b 	bl	3bdb4 <__d2b>
   1f4fe:	ee08 0a10 	vmov	s16, r0
   1f502:	2d00      	cmp	r5, #0
   1f504:	f000 8082 	beq.w	1f60c <_dtoa_r+0x1fc>
   1f508:	ee19 3a90 	vmov	r3, s19
   1f50c:	4656      	mov	r6, sl
   1f50e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1f512:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   1f516:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1f51a:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   1f51e:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   1f522:	2200      	movs	r2, #0
   1f524:	4b72      	ldr	r3, [pc, #456]	; (1f6f0 <_dtoa_r+0x2e0>)
   1f526:	4630      	mov	r0, r6
   1f528:	4639      	mov	r1, r7
   1f52a:	f7fc ff8d 	bl	1c448 <__aeabi_dsub>
   1f52e:	a364      	add	r3, pc, #400	; (adr r3, 1f6c0 <_dtoa_r+0x2b0>)
   1f530:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f534:	f7fd f940 	bl	1c7b8 <__aeabi_dmul>
   1f538:	a363      	add	r3, pc, #396	; (adr r3, 1f6c8 <_dtoa_r+0x2b8>)
   1f53a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f53e:	f7fc ff85 	bl	1c44c <__adddf3>
   1f542:	4606      	mov	r6, r0
   1f544:	460f      	mov	r7, r1
   1f546:	4628      	mov	r0, r5
   1f548:	f7fd f8cc 	bl	1c6e4 <__aeabi_i2d>
   1f54c:	a360      	add	r3, pc, #384	; (adr r3, 1f6d0 <_dtoa_r+0x2c0>)
   1f54e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f552:	f7fd f931 	bl	1c7b8 <__aeabi_dmul>
   1f556:	4602      	mov	r2, r0
   1f558:	460b      	mov	r3, r1
   1f55a:	4630      	mov	r0, r6
   1f55c:	4639      	mov	r1, r7
   1f55e:	f7fc ff75 	bl	1c44c <__adddf3>
   1f562:	4606      	mov	r6, r0
   1f564:	460f      	mov	r7, r1
   1f566:	f7fd fbd7 	bl	1cd18 <__aeabi_d2iz>
   1f56a:	2200      	movs	r2, #0
   1f56c:	9003      	str	r0, [sp, #12]
   1f56e:	2300      	movs	r3, #0
   1f570:	4630      	mov	r0, r6
   1f572:	4639      	mov	r1, r7
   1f574:	f7fd fb92 	bl	1cc9c <__aeabi_dcmplt>
   1f578:	b150      	cbz	r0, 1f590 <_dtoa_r+0x180>
   1f57a:	9803      	ldr	r0, [sp, #12]
   1f57c:	f7fd f8b2 	bl	1c6e4 <__aeabi_i2d>
   1f580:	4632      	mov	r2, r6
   1f582:	463b      	mov	r3, r7
   1f584:	f7fd fb80 	bl	1cc88 <__aeabi_dcmpeq>
   1f588:	b910      	cbnz	r0, 1f590 <_dtoa_r+0x180>
   1f58a:	9b03      	ldr	r3, [sp, #12]
   1f58c:	3b01      	subs	r3, #1
   1f58e:	9303      	str	r3, [sp, #12]
   1f590:	9b03      	ldr	r3, [sp, #12]
   1f592:	2b16      	cmp	r3, #22
   1f594:	d859      	bhi.n	1f64a <_dtoa_r+0x23a>
   1f596:	9a03      	ldr	r2, [sp, #12]
   1f598:	4b56      	ldr	r3, [pc, #344]	; (1f6f4 <_dtoa_r+0x2e4>)
   1f59a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f59e:	ec51 0b19 	vmov	r0, r1, d9
   1f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f5a6:	f7fd fb79 	bl	1cc9c <__aeabi_dcmplt>
   1f5aa:	2800      	cmp	r0, #0
   1f5ac:	d04f      	beq.n	1f64e <_dtoa_r+0x23e>
   1f5ae:	9b03      	ldr	r3, [sp, #12]
   1f5b0:	3b01      	subs	r3, #1
   1f5b2:	9303      	str	r3, [sp, #12]
   1f5b4:	2300      	movs	r3, #0
   1f5b6:	930c      	str	r3, [sp, #48]	; 0x30
   1f5b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f5ba:	1b5d      	subs	r5, r3, r5
   1f5bc:	1e6b      	subs	r3, r5, #1
   1f5be:	9308      	str	r3, [sp, #32]
   1f5c0:	bf49      	itett	mi
   1f5c2:	f1c5 0301 	rsbmi	r3, r5, #1
   1f5c6:	2300      	movpl	r3, #0
   1f5c8:	9307      	strmi	r3, [sp, #28]
   1f5ca:	2300      	movmi	r3, #0
   1f5cc:	bf54      	ite	pl
   1f5ce:	9307      	strpl	r3, [sp, #28]
   1f5d0:	9308      	strmi	r3, [sp, #32]
   1f5d2:	9b03      	ldr	r3, [sp, #12]
   1f5d4:	2b00      	cmp	r3, #0
   1f5d6:	db3c      	blt.n	1f652 <_dtoa_r+0x242>
   1f5d8:	9b08      	ldr	r3, [sp, #32]
   1f5da:	9a03      	ldr	r2, [sp, #12]
   1f5dc:	4413      	add	r3, r2
   1f5de:	920b      	str	r2, [sp, #44]	; 0x2c
   1f5e0:	9308      	str	r3, [sp, #32]
   1f5e2:	2300      	movs	r3, #0
   1f5e4:	9309      	str	r3, [sp, #36]	; 0x24
   1f5e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1f5e8:	2b09      	cmp	r3, #9
   1f5ea:	f200 8087 	bhi.w	1f6fc <_dtoa_r+0x2ec>
   1f5ee:	2b05      	cmp	r3, #5
   1f5f0:	bfc5      	ittet	gt
   1f5f2:	3b04      	subgt	r3, #4
   1f5f4:	2500      	movgt	r5, #0
   1f5f6:	2501      	movle	r5, #1
   1f5f8:	9320      	strgt	r3, [sp, #128]	; 0x80
   1f5fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1f5fc:	3b02      	subs	r3, #2
   1f5fe:	2b03      	cmp	r3, #3
   1f600:	f200 8087 	bhi.w	1f712 <_dtoa_r+0x302>
   1f604:	e8df f003 	tbb	[pc, r3]
   1f608:	5a393b2e 	.word	0x5a393b2e
   1f60c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
   1f610:	441d      	add	r5, r3
   1f612:	f205 4332 	addw	r3, r5, #1074	; 0x432
   1f616:	2b20      	cmp	r3, #32
   1f618:	bfc6      	itte	gt
   1f61a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   1f61e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
   1f622:	f1c3 0320 	rsble	r3, r3, #32
   1f626:	f105 35ff 	add.w	r5, r5, #4294967295
   1f62a:	bfc5      	ittet	gt
   1f62c:	fa0b f303 	lslgt.w	r3, fp, r3
   1f630:	fa26 f000 	lsrgt.w	r0, r6, r0
   1f634:	fa06 f003 	lslle.w	r0, r6, r3
   1f638:	4318      	orrgt	r0, r3
   1f63a:	f7fd f843 	bl	1c6c4 <__aeabi_ui2d>
   1f63e:	2301      	movs	r3, #1
   1f640:	4606      	mov	r6, r0
   1f642:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   1f646:	930e      	str	r3, [sp, #56]	; 0x38
   1f648:	e76b      	b.n	1f522 <_dtoa_r+0x112>
   1f64a:	2301      	movs	r3, #1
   1f64c:	e7b3      	b.n	1f5b6 <_dtoa_r+0x1a6>
   1f64e:	900c      	str	r0, [sp, #48]	; 0x30
   1f650:	e7b2      	b.n	1f5b8 <_dtoa_r+0x1a8>
   1f652:	9b07      	ldr	r3, [sp, #28]
   1f654:	9a03      	ldr	r2, [sp, #12]
   1f656:	1a9b      	subs	r3, r3, r2
   1f658:	9307      	str	r3, [sp, #28]
   1f65a:	4253      	negs	r3, r2
   1f65c:	9309      	str	r3, [sp, #36]	; 0x24
   1f65e:	2300      	movs	r3, #0
   1f660:	930b      	str	r3, [sp, #44]	; 0x2c
   1f662:	e7c0      	b.n	1f5e6 <_dtoa_r+0x1d6>
   1f664:	2300      	movs	r3, #0
   1f666:	930a      	str	r3, [sp, #40]	; 0x28
   1f668:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f66a:	2b00      	cmp	r3, #0
   1f66c:	dc54      	bgt.n	1f718 <_dtoa_r+0x308>
   1f66e:	2301      	movs	r3, #1
   1f670:	461a      	mov	r2, r3
   1f672:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1f676:	9221      	str	r2, [sp, #132]	; 0x84
   1f678:	e00c      	b.n	1f694 <_dtoa_r+0x284>
   1f67a:	2301      	movs	r3, #1
   1f67c:	e7f3      	b.n	1f666 <_dtoa_r+0x256>
   1f67e:	2300      	movs	r3, #0
   1f680:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1f682:	930a      	str	r3, [sp, #40]	; 0x28
   1f684:	9b03      	ldr	r3, [sp, #12]
   1f686:	4413      	add	r3, r2
   1f688:	9305      	str	r3, [sp, #20]
   1f68a:	3301      	adds	r3, #1
   1f68c:	2b01      	cmp	r3, #1
   1f68e:	9306      	str	r3, [sp, #24]
   1f690:	bfb8      	it	lt
   1f692:	2301      	movlt	r3, #1
   1f694:	2200      	movs	r2, #0
   1f696:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1f698:	6042      	str	r2, [r0, #4]
   1f69a:	2204      	movs	r2, #4
   1f69c:	f102 0614 	add.w	r6, r2, #20
   1f6a0:	6841      	ldr	r1, [r0, #4]
   1f6a2:	429e      	cmp	r6, r3
   1f6a4:	d93c      	bls.n	1f720 <_dtoa_r+0x310>
   1f6a6:	4620      	mov	r0, r4
   1f6a8:	f01c f802 	bl	3b6b0 <_Balloc>
   1f6ac:	9004      	str	r0, [sp, #16]
   1f6ae:	2800      	cmp	r0, #0
   1f6b0:	d13a      	bne.n	1f728 <_dtoa_r+0x318>
   1f6b2:	4b11      	ldr	r3, [pc, #68]	; (1f6f8 <_dtoa_r+0x2e8>)
   1f6b4:	4602      	mov	r2, r0
   1f6b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   1f6ba:	e6bf      	b.n	1f43c <_dtoa_r+0x2c>
   1f6bc:	2301      	movs	r3, #1
   1f6be:	e7df      	b.n	1f680 <_dtoa_r+0x270>
   1f6c0:	636f4361 	.word	0x636f4361
   1f6c4:	3fd287a7 	.word	0x3fd287a7
   1f6c8:	8b60c8b3 	.word	0x8b60c8b3
   1f6cc:	3fc68a28 	.word	0x3fc68a28
   1f6d0:	509f79fb 	.word	0x509f79fb
   1f6d4:	3fd34413 	.word	0x3fd34413
   1f6d8:	0004c05e 	.word	0x0004c05e
   1f6dc:	0004c075 	.word	0x0004c075
   1f6e0:	7ff00000 	.word	0x7ff00000
   1f6e4:	0004c05a 	.word	0x0004c05a
   1f6e8:	0004c051 	.word	0x0004c051
   1f6ec:	00045cbd 	.word	0x00045cbd
   1f6f0:	3ff80000 	.word	0x3ff80000
   1f6f4:	00042a98 	.word	0x00042a98
   1f6f8:	0004c0e9 	.word	0x0004c0e9
   1f6fc:	2501      	movs	r5, #1
   1f6fe:	2300      	movs	r3, #0
   1f700:	950a      	str	r5, [sp, #40]	; 0x28
   1f702:	9320      	str	r3, [sp, #128]	; 0x80
   1f704:	f04f 33ff 	mov.w	r3, #4294967295
   1f708:	2200      	movs	r2, #0
   1f70a:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1f70e:	2312      	movs	r3, #18
   1f710:	e7b1      	b.n	1f676 <_dtoa_r+0x266>
   1f712:	2301      	movs	r3, #1
   1f714:	930a      	str	r3, [sp, #40]	; 0x28
   1f716:	e7f5      	b.n	1f704 <_dtoa_r+0x2f4>
   1f718:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f71a:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1f71e:	e7b9      	b.n	1f694 <_dtoa_r+0x284>
   1f720:	3101      	adds	r1, #1
   1f722:	0052      	lsls	r2, r2, #1
   1f724:	6041      	str	r1, [r0, #4]
   1f726:	e7b9      	b.n	1f69c <_dtoa_r+0x28c>
   1f728:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f72a:	9a04      	ldr	r2, [sp, #16]
   1f72c:	601a      	str	r2, [r3, #0]
   1f72e:	9b06      	ldr	r3, [sp, #24]
   1f730:	2b0e      	cmp	r3, #14
   1f732:	f200 809d 	bhi.w	1f870 <_dtoa_r+0x460>
   1f736:	2d00      	cmp	r5, #0
   1f738:	f000 809a 	beq.w	1f870 <_dtoa_r+0x460>
   1f73c:	9b03      	ldr	r3, [sp, #12]
   1f73e:	2b00      	cmp	r3, #0
   1f740:	dd32      	ble.n	1f7a8 <_dtoa_r+0x398>
   1f742:	f003 030f 	and.w	r3, r3, #15
   1f746:	4ab6      	ldr	r2, [pc, #728]	; (1fa20 <_dtoa_r+0x610>)
   1f748:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f74c:	e9d3 8900 	ldrd	r8, r9, [r3]
   1f750:	9b03      	ldr	r3, [sp, #12]
   1f752:	05d8      	lsls	r0, r3, #23
   1f754:	ea4f 1723 	mov.w	r7, r3, asr #4
   1f758:	d516      	bpl.n	1f788 <_dtoa_r+0x378>
   1f75a:	4bb2      	ldr	r3, [pc, #712]	; (1fa24 <_dtoa_r+0x614>)
   1f75c:	f007 070f 	and.w	r7, r7, #15
   1f760:	2503      	movs	r5, #3
   1f762:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1f766:	ec51 0b19 	vmov	r0, r1, d9
   1f76a:	f7fd f94f 	bl	1ca0c <__aeabi_ddiv>
   1f76e:	4682      	mov	sl, r0
   1f770:	468b      	mov	fp, r1
   1f772:	4eac      	ldr	r6, [pc, #688]	; (1fa24 <_dtoa_r+0x614>)
   1f774:	b957      	cbnz	r7, 1f78c <_dtoa_r+0x37c>
   1f776:	4642      	mov	r2, r8
   1f778:	464b      	mov	r3, r9
   1f77a:	4650      	mov	r0, sl
   1f77c:	4659      	mov	r1, fp
   1f77e:	f7fd f945 	bl	1ca0c <__aeabi_ddiv>
   1f782:	4682      	mov	sl, r0
   1f784:	468b      	mov	fp, r1
   1f786:	e028      	b.n	1f7da <_dtoa_r+0x3ca>
   1f788:	2502      	movs	r5, #2
   1f78a:	e7f2      	b.n	1f772 <_dtoa_r+0x362>
   1f78c:	07f9      	lsls	r1, r7, #31
   1f78e:	d508      	bpl.n	1f7a2 <_dtoa_r+0x392>
   1f790:	4640      	mov	r0, r8
   1f792:	4649      	mov	r1, r9
   1f794:	3501      	adds	r5, #1
   1f796:	e9d6 2300 	ldrd	r2, r3, [r6]
   1f79a:	f7fd f80d 	bl	1c7b8 <__aeabi_dmul>
   1f79e:	4680      	mov	r8, r0
   1f7a0:	4689      	mov	r9, r1
   1f7a2:	107f      	asrs	r7, r7, #1
   1f7a4:	3608      	adds	r6, #8
   1f7a6:	e7e5      	b.n	1f774 <_dtoa_r+0x364>
   1f7a8:	f000 809b 	beq.w	1f8e2 <_dtoa_r+0x4d2>
   1f7ac:	9b03      	ldr	r3, [sp, #12]
   1f7ae:	2502      	movs	r5, #2
   1f7b0:	4f9c      	ldr	r7, [pc, #624]	; (1fa24 <_dtoa_r+0x614>)
   1f7b2:	425e      	negs	r6, r3
   1f7b4:	4b9a      	ldr	r3, [pc, #616]	; (1fa20 <_dtoa_r+0x610>)
   1f7b6:	f006 020f 	and.w	r2, r6, #15
   1f7ba:	1136      	asrs	r6, r6, #4
   1f7bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f7c0:	ec51 0b19 	vmov	r0, r1, d9
   1f7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f7c8:	f7fc fff6 	bl	1c7b8 <__aeabi_dmul>
   1f7cc:	2300      	movs	r3, #0
   1f7ce:	4682      	mov	sl, r0
   1f7d0:	468b      	mov	fp, r1
   1f7d2:	2e00      	cmp	r6, #0
   1f7d4:	d17a      	bne.n	1f8cc <_dtoa_r+0x4bc>
   1f7d6:	2b00      	cmp	r3, #0
   1f7d8:	d1d3      	bne.n	1f782 <_dtoa_r+0x372>
   1f7da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f7dc:	2b00      	cmp	r3, #0
   1f7de:	f000 8082 	beq.w	1f8e6 <_dtoa_r+0x4d6>
   1f7e2:	2200      	movs	r2, #0
   1f7e4:	4b90      	ldr	r3, [pc, #576]	; (1fa28 <_dtoa_r+0x618>)
   1f7e6:	4650      	mov	r0, sl
   1f7e8:	4659      	mov	r1, fp
   1f7ea:	f7fd fa57 	bl	1cc9c <__aeabi_dcmplt>
   1f7ee:	2800      	cmp	r0, #0
   1f7f0:	d079      	beq.n	1f8e6 <_dtoa_r+0x4d6>
   1f7f2:	9b06      	ldr	r3, [sp, #24]
   1f7f4:	2b00      	cmp	r3, #0
   1f7f6:	d076      	beq.n	1f8e6 <_dtoa_r+0x4d6>
   1f7f8:	9b05      	ldr	r3, [sp, #20]
   1f7fa:	2b00      	cmp	r3, #0
   1f7fc:	dd36      	ble.n	1f86c <_dtoa_r+0x45c>
   1f7fe:	9b03      	ldr	r3, [sp, #12]
   1f800:	4650      	mov	r0, sl
   1f802:	4659      	mov	r1, fp
   1f804:	2200      	movs	r2, #0
   1f806:	1e5f      	subs	r7, r3, #1
   1f808:	4b88      	ldr	r3, [pc, #544]	; (1fa2c <_dtoa_r+0x61c>)
   1f80a:	f7fc ffd5 	bl	1c7b8 <__aeabi_dmul>
   1f80e:	3501      	adds	r5, #1
   1f810:	4682      	mov	sl, r0
   1f812:	468b      	mov	fp, r1
   1f814:	9e05      	ldr	r6, [sp, #20]
   1f816:	4628      	mov	r0, r5
   1f818:	46d0      	mov	r8, sl
   1f81a:	f7fc ff63 	bl	1c6e4 <__aeabi_i2d>
   1f81e:	4652      	mov	r2, sl
   1f820:	465b      	mov	r3, fp
   1f822:	46d9      	mov	r9, fp
   1f824:	f7fc ffc8 	bl	1c7b8 <__aeabi_dmul>
   1f828:	2200      	movs	r2, #0
   1f82a:	4b81      	ldr	r3, [pc, #516]	; (1fa30 <_dtoa_r+0x620>)
   1f82c:	f7fc fe0e 	bl	1c44c <__adddf3>
   1f830:	4682      	mov	sl, r0
   1f832:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   1f836:	2e00      	cmp	r6, #0
   1f838:	d158      	bne.n	1f8ec <_dtoa_r+0x4dc>
   1f83a:	2200      	movs	r2, #0
   1f83c:	4b7d      	ldr	r3, [pc, #500]	; (1fa34 <_dtoa_r+0x624>)
   1f83e:	4640      	mov	r0, r8
   1f840:	4649      	mov	r1, r9
   1f842:	f7fc fe01 	bl	1c448 <__aeabi_dsub>
   1f846:	4652      	mov	r2, sl
   1f848:	465b      	mov	r3, fp
   1f84a:	4680      	mov	r8, r0
   1f84c:	4689      	mov	r9, r1
   1f84e:	f7fd fa43 	bl	1ccd8 <__aeabi_dcmpgt>
   1f852:	2800      	cmp	r0, #0
   1f854:	f040 8293 	bne.w	1fd7e <_dtoa_r+0x96e>
   1f858:	4652      	mov	r2, sl
   1f85a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1f85e:	4640      	mov	r0, r8
   1f860:	4649      	mov	r1, r9
   1f862:	f7fd fa1b 	bl	1cc9c <__aeabi_dcmplt>
   1f866:	2800      	cmp	r0, #0
   1f868:	f040 8287 	bne.w	1fd7a <_dtoa_r+0x96a>
   1f86c:	ec5b ab19 	vmov	sl, fp, d9
   1f870:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1f872:	2b00      	cmp	r3, #0
   1f874:	f2c0 8148 	blt.w	1fb08 <_dtoa_r+0x6f8>
   1f878:	9a03      	ldr	r2, [sp, #12]
   1f87a:	2a0e      	cmp	r2, #14
   1f87c:	f300 8144 	bgt.w	1fb08 <_dtoa_r+0x6f8>
   1f880:	4b67      	ldr	r3, [pc, #412]	; (1fa20 <_dtoa_r+0x610>)
   1f882:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f886:	e9d3 8900 	ldrd	r8, r9, [r3]
   1f88a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f88c:	2b00      	cmp	r3, #0
   1f88e:	f280 80d5 	bge.w	1fa3c <_dtoa_r+0x62c>
   1f892:	9b06      	ldr	r3, [sp, #24]
   1f894:	2b00      	cmp	r3, #0
   1f896:	f300 80d1 	bgt.w	1fa3c <_dtoa_r+0x62c>
   1f89a:	f040 826d 	bne.w	1fd78 <_dtoa_r+0x968>
   1f89e:	2200      	movs	r2, #0
   1f8a0:	4b64      	ldr	r3, [pc, #400]	; (1fa34 <_dtoa_r+0x624>)
   1f8a2:	4640      	mov	r0, r8
   1f8a4:	4649      	mov	r1, r9
   1f8a6:	f7fc ff87 	bl	1c7b8 <__aeabi_dmul>
   1f8aa:	4652      	mov	r2, sl
   1f8ac:	465b      	mov	r3, fp
   1f8ae:	f7fd fa09 	bl	1ccc4 <__aeabi_dcmpge>
   1f8b2:	9e06      	ldr	r6, [sp, #24]
   1f8b4:	4637      	mov	r7, r6
   1f8b6:	2800      	cmp	r0, #0
   1f8b8:	f040 8243 	bne.w	1fd42 <_dtoa_r+0x932>
   1f8bc:	2331      	movs	r3, #49	; 0x31
   1f8be:	9d04      	ldr	r5, [sp, #16]
   1f8c0:	f805 3b01 	strb.w	r3, [r5], #1
   1f8c4:	9b03      	ldr	r3, [sp, #12]
   1f8c6:	3301      	adds	r3, #1
   1f8c8:	9303      	str	r3, [sp, #12]
   1f8ca:	e23e      	b.n	1fd4a <_dtoa_r+0x93a>
   1f8cc:	07f2      	lsls	r2, r6, #31
   1f8ce:	d505      	bpl.n	1f8dc <_dtoa_r+0x4cc>
   1f8d0:	3501      	adds	r5, #1
   1f8d2:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f8d6:	f7fc ff6f 	bl	1c7b8 <__aeabi_dmul>
   1f8da:	2301      	movs	r3, #1
   1f8dc:	1076      	asrs	r6, r6, #1
   1f8de:	3708      	adds	r7, #8
   1f8e0:	e777      	b.n	1f7d2 <_dtoa_r+0x3c2>
   1f8e2:	2502      	movs	r5, #2
   1f8e4:	e779      	b.n	1f7da <_dtoa_r+0x3ca>
   1f8e6:	9f03      	ldr	r7, [sp, #12]
   1f8e8:	9e06      	ldr	r6, [sp, #24]
   1f8ea:	e794      	b.n	1f816 <_dtoa_r+0x406>
   1f8ec:	9904      	ldr	r1, [sp, #16]
   1f8ee:	4b4c      	ldr	r3, [pc, #304]	; (1fa20 <_dtoa_r+0x610>)
   1f8f0:	4431      	add	r1, r6
   1f8f2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1f8f6:	910d      	str	r1, [sp, #52]	; 0x34
   1f8f8:	990a      	ldr	r1, [sp, #40]	; 0x28
   1f8fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1f8fe:	2900      	cmp	r1, #0
   1f900:	d043      	beq.n	1f98a <_dtoa_r+0x57a>
   1f902:	2000      	movs	r0, #0
   1f904:	494c      	ldr	r1, [pc, #304]	; (1fa38 <_dtoa_r+0x628>)
   1f906:	f7fd f881 	bl	1ca0c <__aeabi_ddiv>
   1f90a:	4652      	mov	r2, sl
   1f90c:	465b      	mov	r3, fp
   1f90e:	f7fc fd9b 	bl	1c448 <__aeabi_dsub>
   1f912:	9d04      	ldr	r5, [sp, #16]
   1f914:	4682      	mov	sl, r0
   1f916:	468b      	mov	fp, r1
   1f918:	4649      	mov	r1, r9
   1f91a:	4640      	mov	r0, r8
   1f91c:	f7fd f9fc 	bl	1cd18 <__aeabi_d2iz>
   1f920:	4606      	mov	r6, r0
   1f922:	f7fc fedf 	bl	1c6e4 <__aeabi_i2d>
   1f926:	4602      	mov	r2, r0
   1f928:	3630      	adds	r6, #48	; 0x30
   1f92a:	460b      	mov	r3, r1
   1f92c:	4640      	mov	r0, r8
   1f92e:	4649      	mov	r1, r9
   1f930:	f7fc fd8a 	bl	1c448 <__aeabi_dsub>
   1f934:	4652      	mov	r2, sl
   1f936:	465b      	mov	r3, fp
   1f938:	f805 6b01 	strb.w	r6, [r5], #1
   1f93c:	4680      	mov	r8, r0
   1f93e:	4689      	mov	r9, r1
   1f940:	f7fd f9ac 	bl	1cc9c <__aeabi_dcmplt>
   1f944:	2800      	cmp	r0, #0
   1f946:	d163      	bne.n	1fa10 <_dtoa_r+0x600>
   1f948:	4642      	mov	r2, r8
   1f94a:	464b      	mov	r3, r9
   1f94c:	2000      	movs	r0, #0
   1f94e:	4936      	ldr	r1, [pc, #216]	; (1fa28 <_dtoa_r+0x618>)
   1f950:	f7fc fd7a 	bl	1c448 <__aeabi_dsub>
   1f954:	4652      	mov	r2, sl
   1f956:	465b      	mov	r3, fp
   1f958:	f7fd f9a0 	bl	1cc9c <__aeabi_dcmplt>
   1f95c:	2800      	cmp	r0, #0
   1f95e:	f040 80b5 	bne.w	1facc <_dtoa_r+0x6bc>
   1f962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f964:	429d      	cmp	r5, r3
   1f966:	d081      	beq.n	1f86c <_dtoa_r+0x45c>
   1f968:	2200      	movs	r2, #0
   1f96a:	4b30      	ldr	r3, [pc, #192]	; (1fa2c <_dtoa_r+0x61c>)
   1f96c:	4650      	mov	r0, sl
   1f96e:	4659      	mov	r1, fp
   1f970:	f7fc ff22 	bl	1c7b8 <__aeabi_dmul>
   1f974:	2200      	movs	r2, #0
   1f976:	4682      	mov	sl, r0
   1f978:	468b      	mov	fp, r1
   1f97a:	4640      	mov	r0, r8
   1f97c:	4649      	mov	r1, r9
   1f97e:	4b2b      	ldr	r3, [pc, #172]	; (1fa2c <_dtoa_r+0x61c>)
   1f980:	f7fc ff1a 	bl	1c7b8 <__aeabi_dmul>
   1f984:	4680      	mov	r8, r0
   1f986:	4689      	mov	r9, r1
   1f988:	e7c6      	b.n	1f918 <_dtoa_r+0x508>
   1f98a:	4650      	mov	r0, sl
   1f98c:	4659      	mov	r1, fp
   1f98e:	f7fc ff13 	bl	1c7b8 <__aeabi_dmul>
   1f992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f994:	4682      	mov	sl, r0
   1f996:	468b      	mov	fp, r1
   1f998:	9d04      	ldr	r5, [sp, #16]
   1f99a:	930f      	str	r3, [sp, #60]	; 0x3c
   1f99c:	4649      	mov	r1, r9
   1f99e:	4640      	mov	r0, r8
   1f9a0:	f7fd f9ba 	bl	1cd18 <__aeabi_d2iz>
   1f9a4:	4606      	mov	r6, r0
   1f9a6:	f7fc fe9d 	bl	1c6e4 <__aeabi_i2d>
   1f9aa:	4602      	mov	r2, r0
   1f9ac:	460b      	mov	r3, r1
   1f9ae:	4640      	mov	r0, r8
   1f9b0:	4649      	mov	r1, r9
   1f9b2:	3630      	adds	r6, #48	; 0x30
   1f9b4:	f7fc fd48 	bl	1c448 <__aeabi_dsub>
   1f9b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f9ba:	f805 6b01 	strb.w	r6, [r5], #1
   1f9be:	4680      	mov	r8, r0
   1f9c0:	429d      	cmp	r5, r3
   1f9c2:	4689      	mov	r9, r1
   1f9c4:	f04f 0200 	mov.w	r2, #0
   1f9c8:	d124      	bne.n	1fa14 <_dtoa_r+0x604>
   1f9ca:	4b1b      	ldr	r3, [pc, #108]	; (1fa38 <_dtoa_r+0x628>)
   1f9cc:	4650      	mov	r0, sl
   1f9ce:	4659      	mov	r1, fp
   1f9d0:	f7fc fd3c 	bl	1c44c <__adddf3>
   1f9d4:	4602      	mov	r2, r0
   1f9d6:	460b      	mov	r3, r1
   1f9d8:	4640      	mov	r0, r8
   1f9da:	4649      	mov	r1, r9
   1f9dc:	f7fd f97c 	bl	1ccd8 <__aeabi_dcmpgt>
   1f9e0:	2800      	cmp	r0, #0
   1f9e2:	d173      	bne.n	1facc <_dtoa_r+0x6bc>
   1f9e4:	4652      	mov	r2, sl
   1f9e6:	465b      	mov	r3, fp
   1f9e8:	2000      	movs	r0, #0
   1f9ea:	4913      	ldr	r1, [pc, #76]	; (1fa38 <_dtoa_r+0x628>)
   1f9ec:	f7fc fd2c 	bl	1c448 <__aeabi_dsub>
   1f9f0:	4602      	mov	r2, r0
   1f9f2:	460b      	mov	r3, r1
   1f9f4:	4640      	mov	r0, r8
   1f9f6:	4649      	mov	r1, r9
   1f9f8:	f7fd f950 	bl	1cc9c <__aeabi_dcmplt>
   1f9fc:	2800      	cmp	r0, #0
   1f9fe:	f43f af35 	beq.w	1f86c <_dtoa_r+0x45c>
   1fa02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1fa04:	1e6b      	subs	r3, r5, #1
   1fa06:	930f      	str	r3, [sp, #60]	; 0x3c
   1fa08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1fa0c:	2b30      	cmp	r3, #48	; 0x30
   1fa0e:	d0f8      	beq.n	1fa02 <_dtoa_r+0x5f2>
   1fa10:	9703      	str	r7, [sp, #12]
   1fa12:	e049      	b.n	1faa8 <_dtoa_r+0x698>
   1fa14:	4b05      	ldr	r3, [pc, #20]	; (1fa2c <_dtoa_r+0x61c>)
   1fa16:	f7fc fecf 	bl	1c7b8 <__aeabi_dmul>
   1fa1a:	4680      	mov	r8, r0
   1fa1c:	4689      	mov	r9, r1
   1fa1e:	e7bd      	b.n	1f99c <_dtoa_r+0x58c>
   1fa20:	00042a98 	.word	0x00042a98
   1fa24:	00042a70 	.word	0x00042a70
   1fa28:	3ff00000 	.word	0x3ff00000
   1fa2c:	40240000 	.word	0x40240000
   1fa30:	401c0000 	.word	0x401c0000
   1fa34:	40140000 	.word	0x40140000
   1fa38:	3fe00000 	.word	0x3fe00000
   1fa3c:	4656      	mov	r6, sl
   1fa3e:	465f      	mov	r7, fp
   1fa40:	9d04      	ldr	r5, [sp, #16]
   1fa42:	4642      	mov	r2, r8
   1fa44:	464b      	mov	r3, r9
   1fa46:	4630      	mov	r0, r6
   1fa48:	4639      	mov	r1, r7
   1fa4a:	f7fc ffdf 	bl	1ca0c <__aeabi_ddiv>
   1fa4e:	f7fd f963 	bl	1cd18 <__aeabi_d2iz>
   1fa52:	4682      	mov	sl, r0
   1fa54:	f7fc fe46 	bl	1c6e4 <__aeabi_i2d>
   1fa58:	4642      	mov	r2, r8
   1fa5a:	464b      	mov	r3, r9
   1fa5c:	f7fc feac 	bl	1c7b8 <__aeabi_dmul>
   1fa60:	4602      	mov	r2, r0
   1fa62:	4630      	mov	r0, r6
   1fa64:	f10a 0630 	add.w	r6, sl, #48	; 0x30
   1fa68:	460b      	mov	r3, r1
   1fa6a:	4639      	mov	r1, r7
   1fa6c:	f7fc fcec 	bl	1c448 <__aeabi_dsub>
   1fa70:	f805 6b01 	strb.w	r6, [r5], #1
   1fa74:	9e04      	ldr	r6, [sp, #16]
   1fa76:	4602      	mov	r2, r0
   1fa78:	9f06      	ldr	r7, [sp, #24]
   1fa7a:	460b      	mov	r3, r1
   1fa7c:	1bae      	subs	r6, r5, r6
   1fa7e:	42b7      	cmp	r7, r6
   1fa80:	d135      	bne.n	1faee <_dtoa_r+0x6de>
   1fa82:	f7fc fce3 	bl	1c44c <__adddf3>
   1fa86:	4642      	mov	r2, r8
   1fa88:	464b      	mov	r3, r9
   1fa8a:	4606      	mov	r6, r0
   1fa8c:	460f      	mov	r7, r1
   1fa8e:	f7fd f923 	bl	1ccd8 <__aeabi_dcmpgt>
   1fa92:	b9d0      	cbnz	r0, 1faca <_dtoa_r+0x6ba>
   1fa94:	4642      	mov	r2, r8
   1fa96:	464b      	mov	r3, r9
   1fa98:	4630      	mov	r0, r6
   1fa9a:	4639      	mov	r1, r7
   1fa9c:	f7fd f8f4 	bl	1cc88 <__aeabi_dcmpeq>
   1faa0:	b110      	cbz	r0, 1faa8 <_dtoa_r+0x698>
   1faa2:	f01a 0f01 	tst.w	sl, #1
   1faa6:	d110      	bne.n	1faca <_dtoa_r+0x6ba>
   1faa8:	4620      	mov	r0, r4
   1faaa:	ee18 1a10 	vmov	r1, s16
   1faae:	f01b fe3f 	bl	3b730 <_Bfree>
   1fab2:	2300      	movs	r3, #0
   1fab4:	9803      	ldr	r0, [sp, #12]
   1fab6:	702b      	strb	r3, [r5, #0]
   1fab8:	3001      	adds	r0, #1
   1faba:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1fabc:	6018      	str	r0, [r3, #0]
   1fabe:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fac0:	2b00      	cmp	r3, #0
   1fac2:	f43f acf1 	beq.w	1f4a8 <_dtoa_r+0x98>
   1fac6:	601d      	str	r5, [r3, #0]
   1fac8:	e4ee      	b.n	1f4a8 <_dtoa_r+0x98>
   1faca:	9f03      	ldr	r7, [sp, #12]
   1facc:	462b      	mov	r3, r5
   1face:	461d      	mov	r5, r3
   1fad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1fad4:	2a39      	cmp	r2, #57	; 0x39
   1fad6:	d106      	bne.n	1fae6 <_dtoa_r+0x6d6>
   1fad8:	9a04      	ldr	r2, [sp, #16]
   1fada:	429a      	cmp	r2, r3
   1fadc:	d1f7      	bne.n	1face <_dtoa_r+0x6be>
   1fade:	2230      	movs	r2, #48	; 0x30
   1fae0:	9904      	ldr	r1, [sp, #16]
   1fae2:	3701      	adds	r7, #1
   1fae4:	700a      	strb	r2, [r1, #0]
   1fae6:	781a      	ldrb	r2, [r3, #0]
   1fae8:	3201      	adds	r2, #1
   1faea:	701a      	strb	r2, [r3, #0]
   1faec:	e790      	b.n	1fa10 <_dtoa_r+0x600>
   1faee:	2200      	movs	r2, #0
   1faf0:	4ba4      	ldr	r3, [pc, #656]	; (1fd84 <_dtoa_r+0x974>)
   1faf2:	f7fc fe61 	bl	1c7b8 <__aeabi_dmul>
   1faf6:	2200      	movs	r2, #0
   1faf8:	2300      	movs	r3, #0
   1fafa:	4606      	mov	r6, r0
   1fafc:	460f      	mov	r7, r1
   1fafe:	f7fd f8c3 	bl	1cc88 <__aeabi_dcmpeq>
   1fb02:	2800      	cmp	r0, #0
   1fb04:	d09d      	beq.n	1fa42 <_dtoa_r+0x632>
   1fb06:	e7cf      	b.n	1faa8 <_dtoa_r+0x698>
   1fb08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1fb0a:	2a00      	cmp	r2, #0
   1fb0c:	f000 80d5 	beq.w	1fcba <_dtoa_r+0x8aa>
   1fb10:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1fb12:	2a01      	cmp	r2, #1
   1fb14:	f300 80b9 	bgt.w	1fc8a <_dtoa_r+0x87a>
   1fb18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1fb1a:	2a00      	cmp	r2, #0
   1fb1c:	f000 80b1 	beq.w	1fc82 <_dtoa_r+0x872>
   1fb20:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1fb24:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1fb26:	9d07      	ldr	r5, [sp, #28]
   1fb28:	9a07      	ldr	r2, [sp, #28]
   1fb2a:	2101      	movs	r1, #1
   1fb2c:	4620      	mov	r0, r4
   1fb2e:	441a      	add	r2, r3
   1fb30:	9207      	str	r2, [sp, #28]
   1fb32:	9a08      	ldr	r2, [sp, #32]
   1fb34:	441a      	add	r2, r3
   1fb36:	9208      	str	r2, [sp, #32]
   1fb38:	f01b feae 	bl	3b898 <__i2b>
   1fb3c:	4607      	mov	r7, r0
   1fb3e:	2d00      	cmp	r5, #0
   1fb40:	dd0c      	ble.n	1fb5c <_dtoa_r+0x74c>
   1fb42:	9b08      	ldr	r3, [sp, #32]
   1fb44:	2b00      	cmp	r3, #0
   1fb46:	dd09      	ble.n	1fb5c <_dtoa_r+0x74c>
   1fb48:	42ab      	cmp	r3, r5
   1fb4a:	9a07      	ldr	r2, [sp, #28]
   1fb4c:	bfa8      	it	ge
   1fb4e:	462b      	movge	r3, r5
   1fb50:	1ad2      	subs	r2, r2, r3
   1fb52:	1aed      	subs	r5, r5, r3
   1fb54:	9207      	str	r2, [sp, #28]
   1fb56:	9a08      	ldr	r2, [sp, #32]
   1fb58:	1ad3      	subs	r3, r2, r3
   1fb5a:	9308      	str	r3, [sp, #32]
   1fb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fb5e:	b31b      	cbz	r3, 1fba8 <_dtoa_r+0x798>
   1fb60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fb62:	2b00      	cmp	r3, #0
   1fb64:	f000 80ad 	beq.w	1fcc2 <_dtoa_r+0x8b2>
   1fb68:	2e00      	cmp	r6, #0
   1fb6a:	dd13      	ble.n	1fb94 <_dtoa_r+0x784>
   1fb6c:	4639      	mov	r1, r7
   1fb6e:	4632      	mov	r2, r6
   1fb70:	4620      	mov	r0, r4
   1fb72:	f01b ff4f 	bl	3ba14 <__pow5mult>
   1fb76:	ee18 2a10 	vmov	r2, s16
   1fb7a:	4601      	mov	r1, r0
   1fb7c:	4607      	mov	r7, r0
   1fb7e:	4620      	mov	r0, r4
   1fb80:	f01b fea0 	bl	3b8c4 <__multiply>
   1fb84:	4680      	mov	r8, r0
   1fb86:	ee18 1a10 	vmov	r1, s16
   1fb8a:	4620      	mov	r0, r4
   1fb8c:	ee08 8a10 	vmov	s16, r8
   1fb90:	f01b fdce 	bl	3b730 <_Bfree>
   1fb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fb96:	1b9a      	subs	r2, r3, r6
   1fb98:	d006      	beq.n	1fba8 <_dtoa_r+0x798>
   1fb9a:	ee18 1a10 	vmov	r1, s16
   1fb9e:	4620      	mov	r0, r4
   1fba0:	f01b ff38 	bl	3ba14 <__pow5mult>
   1fba4:	ee08 0a10 	vmov	s16, r0
   1fba8:	2101      	movs	r1, #1
   1fbaa:	4620      	mov	r0, r4
   1fbac:	f01b fe74 	bl	3b898 <__i2b>
   1fbb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fbb2:	4606      	mov	r6, r0
   1fbb4:	2b00      	cmp	r3, #0
   1fbb6:	f340 8086 	ble.w	1fcc6 <_dtoa_r+0x8b6>
   1fbba:	461a      	mov	r2, r3
   1fbbc:	4601      	mov	r1, r0
   1fbbe:	4620      	mov	r0, r4
   1fbc0:	f01b ff28 	bl	3ba14 <__pow5mult>
   1fbc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fbc6:	4606      	mov	r6, r0
   1fbc8:	2b01      	cmp	r3, #1
   1fbca:	dd7f      	ble.n	1fccc <_dtoa_r+0x8bc>
   1fbcc:	f04f 0800 	mov.w	r8, #0
   1fbd0:	6933      	ldr	r3, [r6, #16]
   1fbd2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1fbd6:	6918      	ldr	r0, [r3, #16]
   1fbd8:	f022 f9d7 	bl	41f8a <__hi0bits>
   1fbdc:	f1c0 0020 	rsb	r0, r0, #32
   1fbe0:	9b08      	ldr	r3, [sp, #32]
   1fbe2:	4418      	add	r0, r3
   1fbe4:	f010 001f 	ands.w	r0, r0, #31
   1fbe8:	f000 8091 	beq.w	1fd0e <_dtoa_r+0x8fe>
   1fbec:	f1c0 0320 	rsb	r3, r0, #32
   1fbf0:	2b04      	cmp	r3, #4
   1fbf2:	f340 8089 	ble.w	1fd08 <_dtoa_r+0x8f8>
   1fbf6:	f1c0 001c 	rsb	r0, r0, #28
   1fbfa:	9b07      	ldr	r3, [sp, #28]
   1fbfc:	4405      	add	r5, r0
   1fbfe:	4403      	add	r3, r0
   1fc00:	9307      	str	r3, [sp, #28]
   1fc02:	9b08      	ldr	r3, [sp, #32]
   1fc04:	4403      	add	r3, r0
   1fc06:	9308      	str	r3, [sp, #32]
   1fc08:	9b07      	ldr	r3, [sp, #28]
   1fc0a:	2b00      	cmp	r3, #0
   1fc0c:	dd07      	ble.n	1fc1e <_dtoa_r+0x80e>
   1fc0e:	ee18 1a10 	vmov	r1, s16
   1fc12:	461a      	mov	r2, r3
   1fc14:	4620      	mov	r0, r4
   1fc16:	f01b ff57 	bl	3bac8 <__lshift>
   1fc1a:	ee08 0a10 	vmov	s16, r0
   1fc1e:	9b08      	ldr	r3, [sp, #32]
   1fc20:	2b00      	cmp	r3, #0
   1fc22:	dd05      	ble.n	1fc30 <_dtoa_r+0x820>
   1fc24:	4631      	mov	r1, r6
   1fc26:	461a      	mov	r2, r3
   1fc28:	4620      	mov	r0, r4
   1fc2a:	f01b ff4d 	bl	3bac8 <__lshift>
   1fc2e:	4606      	mov	r6, r0
   1fc30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fc32:	2b00      	cmp	r3, #0
   1fc34:	d06d      	beq.n	1fd12 <_dtoa_r+0x902>
   1fc36:	4631      	mov	r1, r6
   1fc38:	ee18 0a10 	vmov	r0, s16
   1fc3c:	f022 f9f4 	bl	42028 <__mcmp>
   1fc40:	2800      	cmp	r0, #0
   1fc42:	da66      	bge.n	1fd12 <_dtoa_r+0x902>
   1fc44:	9b03      	ldr	r3, [sp, #12]
   1fc46:	ee18 1a10 	vmov	r1, s16
   1fc4a:	220a      	movs	r2, #10
   1fc4c:	4620      	mov	r0, r4
   1fc4e:	3b01      	subs	r3, #1
   1fc50:	9303      	str	r3, [sp, #12]
   1fc52:	2300      	movs	r3, #0
   1fc54:	f01b fd8e 	bl	3b774 <__multadd>
   1fc58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fc5a:	ee08 0a10 	vmov	s16, r0
   1fc5e:	2b00      	cmp	r3, #0
   1fc60:	f000 81af 	beq.w	1ffc2 <_dtoa_r+0xbb2>
   1fc64:	2300      	movs	r3, #0
   1fc66:	4639      	mov	r1, r7
   1fc68:	220a      	movs	r2, #10
   1fc6a:	4620      	mov	r0, r4
   1fc6c:	f01b fd82 	bl	3b774 <__multadd>
   1fc70:	9b05      	ldr	r3, [sp, #20]
   1fc72:	4607      	mov	r7, r0
   1fc74:	2b00      	cmp	r3, #0
   1fc76:	f300 808d 	bgt.w	1fd94 <_dtoa_r+0x984>
   1fc7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fc7c:	2b02      	cmp	r3, #2
   1fc7e:	dc50      	bgt.n	1fd22 <_dtoa_r+0x912>
   1fc80:	e088      	b.n	1fd94 <_dtoa_r+0x984>
   1fc82:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1fc84:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1fc88:	e74c      	b.n	1fb24 <_dtoa_r+0x714>
   1fc8a:	9b06      	ldr	r3, [sp, #24]
   1fc8c:	1e5e      	subs	r6, r3, #1
   1fc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fc90:	42b3      	cmp	r3, r6
   1fc92:	bfb7      	itett	lt
   1fc94:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   1fc96:	1b9e      	subge	r6, r3, r6
   1fc98:	9609      	strlt	r6, [sp, #36]	; 0x24
   1fc9a:	1af2      	sublt	r2, r6, r3
   1fc9c:	bfbf      	itttt	lt
   1fc9e:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
   1fca0:	2600      	movlt	r6, #0
   1fca2:	189b      	addlt	r3, r3, r2
   1fca4:	930b      	strlt	r3, [sp, #44]	; 0x2c
   1fca6:	9b06      	ldr	r3, [sp, #24]
   1fca8:	2b00      	cmp	r3, #0
   1fcaa:	bfb7      	itett	lt
   1fcac:	e9dd 2306 	ldrdlt	r2, r3, [sp, #24]
   1fcb0:	e9dd 3506 	ldrdge	r3, r5, [sp, #24]
   1fcb4:	1a9d      	sublt	r5, r3, r2
   1fcb6:	2300      	movlt	r3, #0
   1fcb8:	e736      	b.n	1fb28 <_dtoa_r+0x718>
   1fcba:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1fcbc:	9d07      	ldr	r5, [sp, #28]
   1fcbe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1fcc0:	e73d      	b.n	1fb3e <_dtoa_r+0x72e>
   1fcc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fcc4:	e769      	b.n	1fb9a <_dtoa_r+0x78a>
   1fcc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fcc8:	2b01      	cmp	r3, #1
   1fcca:	dc18      	bgt.n	1fcfe <_dtoa_r+0x8ee>
   1fccc:	f1ba 0f00 	cmp.w	sl, #0
   1fcd0:	d115      	bne.n	1fcfe <_dtoa_r+0x8ee>
   1fcd2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1fcd6:	b993      	cbnz	r3, 1fcfe <_dtoa_r+0x8ee>
   1fcd8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1fcdc:	0d1b      	lsrs	r3, r3, #20
   1fcde:	051b      	lsls	r3, r3, #20
   1fce0:	b183      	cbz	r3, 1fd04 <_dtoa_r+0x8f4>
   1fce2:	9b07      	ldr	r3, [sp, #28]
   1fce4:	f04f 0801 	mov.w	r8, #1
   1fce8:	3301      	adds	r3, #1
   1fcea:	9307      	str	r3, [sp, #28]
   1fcec:	9b08      	ldr	r3, [sp, #32]
   1fcee:	3301      	adds	r3, #1
   1fcf0:	9308      	str	r3, [sp, #32]
   1fcf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fcf4:	2b00      	cmp	r3, #0
   1fcf6:	f47f af6b 	bne.w	1fbd0 <_dtoa_r+0x7c0>
   1fcfa:	2001      	movs	r0, #1
   1fcfc:	e770      	b.n	1fbe0 <_dtoa_r+0x7d0>
   1fcfe:	f04f 0800 	mov.w	r8, #0
   1fd02:	e7f6      	b.n	1fcf2 <_dtoa_r+0x8e2>
   1fd04:	4698      	mov	r8, r3
   1fd06:	e7f4      	b.n	1fcf2 <_dtoa_r+0x8e2>
   1fd08:	f43f af7e 	beq.w	1fc08 <_dtoa_r+0x7f8>
   1fd0c:	4618      	mov	r0, r3
   1fd0e:	301c      	adds	r0, #28
   1fd10:	e773      	b.n	1fbfa <_dtoa_r+0x7ea>
   1fd12:	9b06      	ldr	r3, [sp, #24]
   1fd14:	2b00      	cmp	r3, #0
   1fd16:	dc37      	bgt.n	1fd88 <_dtoa_r+0x978>
   1fd18:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fd1a:	2b02      	cmp	r3, #2
   1fd1c:	dd34      	ble.n	1fd88 <_dtoa_r+0x978>
   1fd1e:	9b06      	ldr	r3, [sp, #24]
   1fd20:	9305      	str	r3, [sp, #20]
   1fd22:	9b05      	ldr	r3, [sp, #20]
   1fd24:	b96b      	cbnz	r3, 1fd42 <_dtoa_r+0x932>
   1fd26:	4631      	mov	r1, r6
   1fd28:	2205      	movs	r2, #5
   1fd2a:	4620      	mov	r0, r4
   1fd2c:	f01b fd22 	bl	3b774 <__multadd>
   1fd30:	4601      	mov	r1, r0
   1fd32:	4606      	mov	r6, r0
   1fd34:	ee18 0a10 	vmov	r0, s16
   1fd38:	f022 f976 	bl	42028 <__mcmp>
   1fd3c:	2800      	cmp	r0, #0
   1fd3e:	f73f adbd 	bgt.w	1f8bc <_dtoa_r+0x4ac>
   1fd42:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fd44:	9d04      	ldr	r5, [sp, #16]
   1fd46:	43db      	mvns	r3, r3
   1fd48:	9303      	str	r3, [sp, #12]
   1fd4a:	f04f 0800 	mov.w	r8, #0
   1fd4e:	4631      	mov	r1, r6
   1fd50:	4620      	mov	r0, r4
   1fd52:	f01b fced 	bl	3b730 <_Bfree>
   1fd56:	2f00      	cmp	r7, #0
   1fd58:	f43f aea6 	beq.w	1faa8 <_dtoa_r+0x698>
   1fd5c:	f1b8 0f00 	cmp.w	r8, #0
   1fd60:	d005      	beq.n	1fd6e <_dtoa_r+0x95e>
   1fd62:	45b8      	cmp	r8, r7
   1fd64:	d003      	beq.n	1fd6e <_dtoa_r+0x95e>
   1fd66:	4641      	mov	r1, r8
   1fd68:	4620      	mov	r0, r4
   1fd6a:	f01b fce1 	bl	3b730 <_Bfree>
   1fd6e:	4639      	mov	r1, r7
   1fd70:	4620      	mov	r0, r4
   1fd72:	f01b fcdd 	bl	3b730 <_Bfree>
   1fd76:	e697      	b.n	1faa8 <_dtoa_r+0x698>
   1fd78:	2600      	movs	r6, #0
   1fd7a:	4637      	mov	r7, r6
   1fd7c:	e7e1      	b.n	1fd42 <_dtoa_r+0x932>
   1fd7e:	9703      	str	r7, [sp, #12]
   1fd80:	4637      	mov	r7, r6
   1fd82:	e59b      	b.n	1f8bc <_dtoa_r+0x4ac>
   1fd84:	40240000 	.word	0x40240000
   1fd88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fd8a:	2b00      	cmp	r3, #0
   1fd8c:	f000 80ca 	beq.w	1ff24 <_dtoa_r+0xb14>
   1fd90:	9b06      	ldr	r3, [sp, #24]
   1fd92:	9305      	str	r3, [sp, #20]
   1fd94:	2d00      	cmp	r5, #0
   1fd96:	dd05      	ble.n	1fda4 <_dtoa_r+0x994>
   1fd98:	4639      	mov	r1, r7
   1fd9a:	462a      	mov	r2, r5
   1fd9c:	4620      	mov	r0, r4
   1fd9e:	f01b fe93 	bl	3bac8 <__lshift>
   1fda2:	4607      	mov	r7, r0
   1fda4:	f1b8 0f00 	cmp.w	r8, #0
   1fda8:	d05b      	beq.n	1fe62 <_dtoa_r+0xa52>
   1fdaa:	6879      	ldr	r1, [r7, #4]
   1fdac:	4620      	mov	r0, r4
   1fdae:	f01b fc7f 	bl	3b6b0 <_Balloc>
   1fdb2:	4605      	mov	r5, r0
   1fdb4:	b928      	cbnz	r0, 1fdc2 <_dtoa_r+0x9b2>
   1fdb6:	4b87      	ldr	r3, [pc, #540]	; (1ffd4 <_dtoa_r+0xbc4>)
   1fdb8:	4602      	mov	r2, r0
   1fdba:	f240 21ea 	movw	r1, #746	; 0x2ea
   1fdbe:	f7ff bb3d 	b.w	1f43c <_dtoa_r+0x2c>
   1fdc2:	693a      	ldr	r2, [r7, #16]
   1fdc4:	f107 010c 	add.w	r1, r7, #12
   1fdc8:	300c      	adds	r0, #12
   1fdca:	3202      	adds	r2, #2
   1fdcc:	0092      	lsls	r2, r2, #2
   1fdce:	f021 fbf8 	bl	415c2 <memcpy>
   1fdd2:	2201      	movs	r2, #1
   1fdd4:	4629      	mov	r1, r5
   1fdd6:	4620      	mov	r0, r4
   1fdd8:	f01b fe76 	bl	3bac8 <__lshift>
   1fddc:	9b04      	ldr	r3, [sp, #16]
   1fdde:	46b8      	mov	r8, r7
   1fde0:	4607      	mov	r7, r0
   1fde2:	f103 0901 	add.w	r9, r3, #1
   1fde6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fdea:	4413      	add	r3, r2
   1fdec:	9308      	str	r3, [sp, #32]
   1fdee:	f00a 0301 	and.w	r3, sl, #1
   1fdf2:	9307      	str	r3, [sp, #28]
   1fdf4:	4631      	mov	r1, r6
   1fdf6:	ee18 0a10 	vmov	r0, s16
   1fdfa:	f021 fe89 	bl	41b10 <quorem>
   1fdfe:	4641      	mov	r1, r8
   1fe00:	9005      	str	r0, [sp, #20]
   1fe02:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   1fe06:	ee18 0a10 	vmov	r0, s16
   1fe0a:	f109 3bff 	add.w	fp, r9, #4294967295
   1fe0e:	f022 f90b 	bl	42028 <__mcmp>
   1fe12:	463a      	mov	r2, r7
   1fe14:	9006      	str	r0, [sp, #24]
   1fe16:	4631      	mov	r1, r6
   1fe18:	4620      	mov	r0, r4
   1fe1a:	f01b fec5 	bl	3bba8 <__mdiff>
   1fe1e:	68c2      	ldr	r2, [r0, #12]
   1fe20:	4605      	mov	r5, r0
   1fe22:	bb02      	cbnz	r2, 1fe66 <_dtoa_r+0xa56>
   1fe24:	4601      	mov	r1, r0
   1fe26:	ee18 0a10 	vmov	r0, s16
   1fe2a:	f022 f8fd 	bl	42028 <__mcmp>
   1fe2e:	4602      	mov	r2, r0
   1fe30:	4629      	mov	r1, r5
   1fe32:	4620      	mov	r0, r4
   1fe34:	9209      	str	r2, [sp, #36]	; 0x24
   1fe36:	f01b fc7b 	bl	3b730 <_Bfree>
   1fe3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fe3c:	464d      	mov	r5, r9
   1fe3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fe40:	ea43 0102 	orr.w	r1, r3, r2
   1fe44:	9b07      	ldr	r3, [sp, #28]
   1fe46:	430b      	orrs	r3, r1
   1fe48:	d10f      	bne.n	1fe6a <_dtoa_r+0xa5a>
   1fe4a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1fe4e:	d02a      	beq.n	1fea6 <_dtoa_r+0xa96>
   1fe50:	9b06      	ldr	r3, [sp, #24]
   1fe52:	2b00      	cmp	r3, #0
   1fe54:	dd02      	ble.n	1fe5c <_dtoa_r+0xa4c>
   1fe56:	9b05      	ldr	r3, [sp, #20]
   1fe58:	f103 0a31 	add.w	sl, r3, #49	; 0x31
   1fe5c:	f88b a000 	strb.w	sl, [fp]
   1fe60:	e775      	b.n	1fd4e <_dtoa_r+0x93e>
   1fe62:	4638      	mov	r0, r7
   1fe64:	e7ba      	b.n	1fddc <_dtoa_r+0x9cc>
   1fe66:	2201      	movs	r2, #1
   1fe68:	e7e2      	b.n	1fe30 <_dtoa_r+0xa20>
   1fe6a:	9b06      	ldr	r3, [sp, #24]
   1fe6c:	2b00      	cmp	r3, #0
   1fe6e:	db04      	blt.n	1fe7a <_dtoa_r+0xa6a>
   1fe70:	9920      	ldr	r1, [sp, #128]	; 0x80
   1fe72:	430b      	orrs	r3, r1
   1fe74:	9907      	ldr	r1, [sp, #28]
   1fe76:	430b      	orrs	r3, r1
   1fe78:	d122      	bne.n	1fec0 <_dtoa_r+0xab0>
   1fe7a:	2a00      	cmp	r2, #0
   1fe7c:	ddee      	ble.n	1fe5c <_dtoa_r+0xa4c>
   1fe7e:	ee18 1a10 	vmov	r1, s16
   1fe82:	2201      	movs	r2, #1
   1fe84:	4620      	mov	r0, r4
   1fe86:	f01b fe1f 	bl	3bac8 <__lshift>
   1fe8a:	4631      	mov	r1, r6
   1fe8c:	ee08 0a10 	vmov	s16, r0
   1fe90:	f022 f8ca 	bl	42028 <__mcmp>
   1fe94:	2800      	cmp	r0, #0
   1fe96:	dc03      	bgt.n	1fea0 <_dtoa_r+0xa90>
   1fe98:	d1e0      	bne.n	1fe5c <_dtoa_r+0xa4c>
   1fe9a:	f01a 0f01 	tst.w	sl, #1
   1fe9e:	d0dd      	beq.n	1fe5c <_dtoa_r+0xa4c>
   1fea0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1fea4:	d1d7      	bne.n	1fe56 <_dtoa_r+0xa46>
   1fea6:	2339      	movs	r3, #57	; 0x39
   1fea8:	f88b 3000 	strb.w	r3, [fp]
   1feac:	462b      	mov	r3, r5
   1feae:	461d      	mov	r5, r3
   1feb0:	3b01      	subs	r3, #1
   1feb2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1feb6:	2a39      	cmp	r2, #57	; 0x39
   1feb8:	d070      	beq.n	1ff9c <_dtoa_r+0xb8c>
   1feba:	3201      	adds	r2, #1
   1febc:	701a      	strb	r2, [r3, #0]
   1febe:	e746      	b.n	1fd4e <_dtoa_r+0x93e>
   1fec0:	2a00      	cmp	r2, #0
   1fec2:	dd07      	ble.n	1fed4 <_dtoa_r+0xac4>
   1fec4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1fec8:	d0ed      	beq.n	1fea6 <_dtoa_r+0xa96>
   1feca:	f10a 0301 	add.w	r3, sl, #1
   1fece:	f88b 3000 	strb.w	r3, [fp]
   1fed2:	e73c      	b.n	1fd4e <_dtoa_r+0x93e>
   1fed4:	9b08      	ldr	r3, [sp, #32]
   1fed6:	f809 ac01 	strb.w	sl, [r9, #-1]
   1feda:	4599      	cmp	r9, r3
   1fedc:	d046      	beq.n	1ff6c <_dtoa_r+0xb5c>
   1fede:	ee18 1a10 	vmov	r1, s16
   1fee2:	2300      	movs	r3, #0
   1fee4:	220a      	movs	r2, #10
   1fee6:	4620      	mov	r0, r4
   1fee8:	f01b fc44 	bl	3b774 <__multadd>
   1feec:	45b8      	cmp	r8, r7
   1feee:	ee08 0a10 	vmov	s16, r0
   1fef2:	f04f 0300 	mov.w	r3, #0
   1fef6:	f04f 020a 	mov.w	r2, #10
   1fefa:	4641      	mov	r1, r8
   1fefc:	4620      	mov	r0, r4
   1fefe:	d106      	bne.n	1ff0e <_dtoa_r+0xafe>
   1ff00:	f01b fc38 	bl	3b774 <__multadd>
   1ff04:	4680      	mov	r8, r0
   1ff06:	4607      	mov	r7, r0
   1ff08:	f109 0901 	add.w	r9, r9, #1
   1ff0c:	e772      	b.n	1fdf4 <_dtoa_r+0x9e4>
   1ff0e:	f01b fc31 	bl	3b774 <__multadd>
   1ff12:	4639      	mov	r1, r7
   1ff14:	4680      	mov	r8, r0
   1ff16:	2300      	movs	r3, #0
   1ff18:	220a      	movs	r2, #10
   1ff1a:	4620      	mov	r0, r4
   1ff1c:	f01b fc2a 	bl	3b774 <__multadd>
   1ff20:	4607      	mov	r7, r0
   1ff22:	e7f1      	b.n	1ff08 <_dtoa_r+0xaf8>
   1ff24:	9b06      	ldr	r3, [sp, #24]
   1ff26:	9305      	str	r3, [sp, #20]
   1ff28:	9d04      	ldr	r5, [sp, #16]
   1ff2a:	4631      	mov	r1, r6
   1ff2c:	ee18 0a10 	vmov	r0, s16
   1ff30:	f021 fdee 	bl	41b10 <quorem>
   1ff34:	9b04      	ldr	r3, [sp, #16]
   1ff36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   1ff3a:	f805 ab01 	strb.w	sl, [r5], #1
   1ff3e:	1aea      	subs	r2, r5, r3
   1ff40:	9b05      	ldr	r3, [sp, #20]
   1ff42:	4293      	cmp	r3, r2
   1ff44:	dd09      	ble.n	1ff5a <_dtoa_r+0xb4a>
   1ff46:	ee18 1a10 	vmov	r1, s16
   1ff4a:	2300      	movs	r3, #0
   1ff4c:	220a      	movs	r2, #10
   1ff4e:	4620      	mov	r0, r4
   1ff50:	f01b fc10 	bl	3b774 <__multadd>
   1ff54:	ee08 0a10 	vmov	s16, r0
   1ff58:	e7e7      	b.n	1ff2a <_dtoa_r+0xb1a>
   1ff5a:	9b05      	ldr	r3, [sp, #20]
   1ff5c:	f04f 0800 	mov.w	r8, #0
   1ff60:	2b00      	cmp	r3, #0
   1ff62:	bfcc      	ite	gt
   1ff64:	461d      	movgt	r5, r3
   1ff66:	2501      	movle	r5, #1
   1ff68:	9b04      	ldr	r3, [sp, #16]
   1ff6a:	441d      	add	r5, r3
   1ff6c:	ee18 1a10 	vmov	r1, s16
   1ff70:	2201      	movs	r2, #1
   1ff72:	4620      	mov	r0, r4
   1ff74:	f01b fda8 	bl	3bac8 <__lshift>
   1ff78:	4631      	mov	r1, r6
   1ff7a:	ee08 0a10 	vmov	s16, r0
   1ff7e:	f022 f853 	bl	42028 <__mcmp>
   1ff82:	2800      	cmp	r0, #0
   1ff84:	dc92      	bgt.n	1feac <_dtoa_r+0xa9c>
   1ff86:	d102      	bne.n	1ff8e <_dtoa_r+0xb7e>
   1ff88:	f01a 0f01 	tst.w	sl, #1
   1ff8c:	d18e      	bne.n	1feac <_dtoa_r+0xa9c>
   1ff8e:	462b      	mov	r3, r5
   1ff90:	461d      	mov	r5, r3
   1ff92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1ff96:	2a30      	cmp	r2, #48	; 0x30
   1ff98:	d0fa      	beq.n	1ff90 <_dtoa_r+0xb80>
   1ff9a:	e6d8      	b.n	1fd4e <_dtoa_r+0x93e>
   1ff9c:	9a04      	ldr	r2, [sp, #16]
   1ff9e:	429a      	cmp	r2, r3
   1ffa0:	d185      	bne.n	1feae <_dtoa_r+0xa9e>
   1ffa2:	9b03      	ldr	r3, [sp, #12]
   1ffa4:	3301      	adds	r3, #1
   1ffa6:	9303      	str	r3, [sp, #12]
   1ffa8:	2331      	movs	r3, #49	; 0x31
   1ffaa:	7013      	strb	r3, [r2, #0]
   1ffac:	e6cf      	b.n	1fd4e <_dtoa_r+0x93e>
   1ffae:	4b0a      	ldr	r3, [pc, #40]	; (1ffd8 <_dtoa_r+0xbc8>)
   1ffb0:	f7ff ba98 	b.w	1f4e4 <_dtoa_r+0xd4>
   1ffb4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ffb6:	2b00      	cmp	r3, #0
   1ffb8:	f47f aa71 	bne.w	1f49e <_dtoa_r+0x8e>
   1ffbc:	4b07      	ldr	r3, [pc, #28]	; (1ffdc <_dtoa_r+0xbcc>)
   1ffbe:	f7ff ba91 	b.w	1f4e4 <_dtoa_r+0xd4>
   1ffc2:	9b05      	ldr	r3, [sp, #20]
   1ffc4:	2b00      	cmp	r3, #0
   1ffc6:	dcaf      	bgt.n	1ff28 <_dtoa_r+0xb18>
   1ffc8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1ffca:	2b02      	cmp	r3, #2
   1ffcc:	f73f aea9 	bgt.w	1fd22 <_dtoa_r+0x912>
   1ffd0:	e7aa      	b.n	1ff28 <_dtoa_r+0xb18>
   1ffd2:	bf00      	nop
   1ffd4:	0004c0e9 	.word	0x0004c0e9
   1ffd8:	00045cbc 	.word	0x00045cbc
   1ffdc:	0004c051 	.word	0x0004c051

0001ffe0 <main>:
		NULL, NULL, NULL, -1, 0, 0);


void main(void)
{
	LOG_INF("nRF Cloud MQTT multi-service sample has started.");
   1ffe0:	2149      	movs	r1, #73	; 0x49
   1ffe2:	4801      	ldr	r0, [pc, #4]	; (1ffe8 <main+0x8>)
   1ffe4:	f01c be73 	b.w	3ccce <z_log_minimal_printk>
   1ffe8:	000436c4 	.word	0x000436c4

0001ffec <create_timestamped_data_message_object>:
 *
 * @param appid
 * @return cJSON* - the timestamped data device message object if successful, NULL otherwise.
 */
static cJSON *create_timestamped_data_message_object(const char *const appid)
{
   1ffec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ffee:	4605      	mov	r5, r0
	cJSON *msg_obj = NULL;
	int64_t timestamp;

	if (date_time_now(&timestamp))
   1fff0:	4668      	mov	r0, sp
   1fff2:	f008 fe43 	bl	28c7c <date_time_now>
   1fff6:	b130      	cbz	r0, 20006 <create_timestamped_data_message_object+0x1a>
	{
		LOG_ERR("Failed to create timestamp for data message "
   1fff8:	462a      	mov	r2, r5
   1fffa:	2145      	movs	r1, #69	; 0x45
   1fffc:	4818      	ldr	r0, [pc, #96]	; (20060 <create_timestamped_data_message_object+0x74>)
   1fffe:	f01c fe66 	bl	3ccce <z_log_minimal_printk>
	{
		LOG_ERR("Failed to populate timestamped data message object "
				"with appid %s",
				log_strdup(appid));
		cJSON_Delete(msg_obj);
		return NULL;
   20002:	2400      	movs	r4, #0
   20004:	e008      	b.n	20018 <create_timestamped_data_message_object+0x2c>
	msg_obj = cJSON_CreateObject();
   20006:	f012 f8f7 	bl	321f8 <cJSON_CreateObject>
		LOG_ERR("Failed to create container object for timestamped data message "
   2000a:	462a      	mov	r2, r5
	if (msg_obj == NULL)
   2000c:	4604      	mov	r4, r0
   2000e:	b930      	cbnz	r0, 2001e <create_timestamped_data_message_object+0x32>
		LOG_ERR("Failed to create container object for timestamped data message "
   20010:	2145      	movs	r1, #69	; 0x45
   20012:	4814      	ldr	r0, [pc, #80]	; (20064 <create_timestamped_data_message_object+0x78>)
   20014:	f01c fe5b 	bl	3ccce <z_log_minimal_printk>
	}

	return msg_obj;
}
   20018:	4620      	mov	r0, r4
   2001a:	b003      	add	sp, #12
   2001c:	bd30      	pop	{r4, r5, pc}
	if ((cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_APPID_KEY, appid) == NULL) ||
   2001e:	4912      	ldr	r1, [pc, #72]	; (20068 <create_timestamped_data_message_object+0x7c>)
   20020:	f01f ff1d 	bl	3fe5e <cJSON_AddStringToObject>
   20024:	b940      	cbnz	r0, 20038 <create_timestamped_data_message_object+0x4c>
		LOG_ERR("Failed to populate timestamped data message object "
   20026:	462a      	mov	r2, r5
   20028:	2145      	movs	r1, #69	; 0x45
   2002a:	4810      	ldr	r0, [pc, #64]	; (2006c <create_timestamped_data_message_object+0x80>)
   2002c:	f01c fe4f 	bl	3ccce <z_log_minimal_printk>
		cJSON_Delete(msg_obj);
   20030:	4620      	mov	r0, r4
   20032:	f012 f81f 	bl	32074 <cJSON_Delete>
   20036:	e7e4      	b.n	20002 <create_timestamped_data_message_object+0x16>
		(cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   20038:	4620      	mov	r0, r4
   2003a:	4a0d      	ldr	r2, [pc, #52]	; (20070 <create_timestamped_data_message_object+0x84>)
   2003c:	490d      	ldr	r1, [pc, #52]	; (20074 <create_timestamped_data_message_object+0x88>)
   2003e:	f01f ff0e 	bl	3fe5e <cJSON_AddStringToObject>
	if ((cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_APPID_KEY, appid) == NULL) ||
   20042:	2800      	cmp	r0, #0
   20044:	d0ef      	beq.n	20026 <create_timestamped_data_message_object+0x3a>
		(cJSON_AddNumberToObject(msg_obj, NRF_CLOUD_MSG_TIMESTAMP_KEY,
   20046:	e9dd 0100 	ldrd	r0, r1, [sp]
   2004a:	f7fc fb87 	bl	1c75c <__aeabi_l2d>
   2004e:	4602      	mov	r2, r0
   20050:	460b      	mov	r3, r1
   20052:	4620      	mov	r0, r4
   20054:	4908      	ldr	r1, [pc, #32]	; (20078 <create_timestamped_data_message_object+0x8c>)
   20056:	f01f fed6 	bl	3fe06 <cJSON_AddNumberToObject>
								 NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA) == NULL) ||
   2005a:	2800      	cmp	r0, #0
   2005c:	d1dc      	bne.n	20018 <create_timestamped_data_message_object+0x2c>
   2005e:	e7e2      	b.n	20026 <create_timestamped_data_message_object+0x3a>
   20060:	00043721 	.word	0x00043721
   20064:	00043760 	.word	0x00043760
   20068:	000437b2 	.word	0x000437b2
   2006c:	000437b8 	.word	0x000437b8
   20070:	000437fe 	.word	0x000437fe
   20074:	00043803 	.word	0x00043803
   20078:	0004380f 	.word	0x0004380f

0002007c <on_location_update>:
 *
 * @param location_data - The received location update.
 *
 */
static void on_location_update(const struct location_data location_data)
{
   2007c:	b084      	sub	sp, #16
   2007e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20082:	ed2d 8b02 	vpush	{d8}
   20086:	b099      	sub	sp, #100	; 0x64
   20088:	ac24      	add	r4, sp, #144	; 0x90
   2008a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   2008e:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
   20092:	f89d 8090 	ldrb.w	r8, [sp, #144]	; 0x90
	LOG_INF("Location Updated: %.06f N %.06f W, accuracy: %.01f m, Method: %s",
   20096:	982a      	ldr	r0, [sp, #168]	; 0xa8
   20098:	f7fc fb36 	bl	1c708 <__aeabi_f2d>
   2009c:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
   200a0:	f1b8 0f01 	cmp.w	r8, #1
   200a4:	f000 80ab 	beq.w	201fe <on_location_update+0x182>
   200a8:	f1b8 0f02 	cmp.w	r8, #2
   200ac:	f000 80a9 	beq.w	20202 <on_location_update+0x186>
   200b0:	4b59      	ldr	r3, [pc, #356]	; (20218 <on_location_update+0x19c>)
   200b2:	4a5a      	ldr	r2, [pc, #360]	; (2021c <on_location_update+0x1a0>)
   200b4:	f1b8 0f03 	cmp.w	r8, #3
   200b8:	bf18      	it	ne
   200ba:	4613      	movne	r3, r2
   200bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   200c0:	9304      	str	r3, [sp, #16]
   200c2:	4632      	mov	r2, r6
   200c4:	463b      	mov	r3, r7
   200c6:	2149      	movs	r1, #73	; 0x49
   200c8:	e9cd 4500 	strd	r4, r5, [sp]
   200cc:	4854      	ldr	r0, [pc, #336]	; (20220 <on_location_update+0x1a4>)
   200ce:	f01c fdfe 	bl	3ccce <z_log_minimal_printk>
			location_data.method == LOCATION_METHOD_CELLULAR ? "Cellular" : location_data.method == LOCATION_METHOD_GNSS ? "GNSS"
																		: location_data.method == LOCATION_METHOD_WIFI	 ? "WIFI"
																														 : "Invalid");

	/* If the position update was derived using GNSS, send it onward to nRF Cloud. */
	if (location_data.method == LOCATION_METHOD_GNSS)
   200d2:	f1b8 0f02 	cmp.w	r8, #2
   200d6:	f040 808b 	bne.w	201f0 <on_location_update+0x174>
	{
		LOG_INF("GNSS Position Update! Sending to nRF Cloud...");
   200da:	2149      	movs	r1, #73	; 0x49
   200dc:	4851      	ldr	r0, [pc, #324]	; (20224 <on_location_update+0x1a8>)
   200de:	f01c fdf6 	bl	3ccce <z_log_minimal_printk>
		/* Synthesize an NMEA message from the provided lat/long/timestamp.
		 * This is necessary, because the nRF Cloud MQTT API only supports NMEA messages.
		 */

		char nmea_buf[50];
		int lat_deg = floor(fabs(location_data.latitude));
   200e2:	4630      	mov	r0, r6
   200e4:	4639      	mov	r1, r7
   200e6:	f021 fa43 	bl	41570 <fabs>
   200ea:	f7fe fb15 	bl	1e718 <floor>
   200ee:	f7fc fe13 	bl	1cd18 <__aeabi_d2iz>
		int lon_deg = floor(fabs(location_data.longitude));
   200f2:	4629      	mov	r1, r5
		int lat_deg = floor(fabs(location_data.latitude));
   200f4:	4682      	mov	sl, r0
		int lon_deg = floor(fabs(location_data.longitude));
   200f6:	4620      	mov	r0, r4
   200f8:	f021 fa3a 	bl	41570 <fabs>
   200fc:	f7fe fb0c 	bl	1e718 <floor>
   20100:	f7fc fe0a 	bl	1cd18 <__aeabi_d2iz>
		double lat_min = (fabs(location_data.latitude) - lat_deg) * 60;
   20104:	4639      	mov	r1, r7
		int lon_deg = floor(fabs(location_data.longitude));
   20106:	4683      	mov	fp, r0
		double lat_min = (fabs(location_data.latitude) - lat_deg) * 60;
   20108:	4630      	mov	r0, r6
   2010a:	f021 fa31 	bl	41570 <fabs>
   2010e:	4680      	mov	r8, r0
   20110:	4650      	mov	r0, sl
   20112:	4689      	mov	r9, r1
   20114:	f7fc fae6 	bl	1c6e4 <__aeabi_i2d>
   20118:	4602      	mov	r2, r0
   2011a:	460b      	mov	r3, r1
   2011c:	4640      	mov	r0, r8
   2011e:	4649      	mov	r1, r9
   20120:	f7fc f992 	bl	1c448 <__aeabi_dsub>
   20124:	2200      	movs	r2, #0
   20126:	4b40      	ldr	r3, [pc, #256]	; (20228 <on_location_update+0x1ac>)
   20128:	f7fc fb46 	bl	1c7b8 <__aeabi_dmul>
   2012c:	ec41 0b18 	vmov	d8, r0, r1
		double lon_min = (fabs(location_data.longitude) - lon_deg) * 60;
   20130:	4620      	mov	r0, r4
   20132:	4629      	mov	r1, r5
   20134:	f021 fa1c 	bl	41570 <fabs>
   20138:	4680      	mov	r8, r0
   2013a:	4658      	mov	r0, fp
   2013c:	4689      	mov	r9, r1
   2013e:	f7fc fad1 	bl	1c6e4 <__aeabi_i2d>
   20142:	4602      	mov	r2, r0
   20144:	460b      	mov	r3, r1
   20146:	4640      	mov	r0, r8
   20148:	4649      	mov	r1, r9
   2014a:	f7fc f97d 	bl	1c448 <__aeabi_dsub>
   2014e:	2200      	movs	r2, #0
   20150:	4b35      	ldr	r3, [pc, #212]	; (20228 <on_location_update+0x1ac>)
   20152:	f7fc fb31 	bl	1c7b8 <__aeabi_dmul>

		/* Not actually a valid NMEA,
		 * but close enough that nRF Cloud can't tell the difference.
		 */
		snprintf(nmea_buf, sizeof(nmea_buf), "$GPGGA,,%02d%08.5f,%c,%02d%08.5f,%c,,,,,,,,,",
   20156:	2200      	movs	r2, #0
		double lon_min = (fabs(location_data.longitude) - lon_deg) * 60;
   20158:	4680      	mov	r8, r0
   2015a:	4689      	mov	r9, r1
		snprintf(nmea_buf, sizeof(nmea_buf), "$GPGGA,,%02d%08.5f,%c,%02d%08.5f,%c,,,,,,,,,",
   2015c:	4630      	mov	r0, r6
   2015e:	2300      	movs	r3, #0
   20160:	4639      	mov	r1, r7
   20162:	f7fc fdb9 	bl	1ccd8 <__aeabi_dcmpgt>
   20166:	2300      	movs	r3, #0
   20168:	2800      	cmp	r0, #0
   2016a:	4629      	mov	r1, r5
   2016c:	f04f 0200 	mov.w	r2, #0
   20170:	4620      	mov	r0, r4
   20172:	bf14      	ite	ne
   20174:	264e      	movne	r6, #78	; 0x4e
   20176:	2653      	moveq	r6, #83	; 0x53
   20178:	f7fc fdae 	bl	1ccd8 <__aeabi_dcmpgt>
   2017c:	2800      	cmp	r0, #0
   2017e:	bf14      	ite	ne
   20180:	2345      	movne	r3, #69	; 0x45
   20182:	2357      	moveq	r3, #87	; 0x57
   20184:	4a29      	ldr	r2, [pc, #164]	; (2022c <on_location_update+0x1b0>)
   20186:	2132      	movs	r1, #50	; 0x32
   20188:	9306      	str	r3, [sp, #24]
   2018a:	ed8d 8b00 	vstr	d8, [sp]
   2018e:	4653      	mov	r3, sl
   20190:	e9cd 8904 	strd	r8, r9, [sp, #16]
   20194:	e9cd 6b02 	strd	r6, fp, [sp, #8]
   20198:	a80b      	add	r0, sp, #44	; 0x2c
   2019a:	f01a fb0f 	bl	3a7bc <sniprintf>
				 lat_deg, lat_min, location_data.latitude > 0 ? 'N' : 'S',
				 lon_deg, lon_min, location_data.longitude > 0 ? 'E' : 'W');

		int payload_length = strlen(nmea_buf);
   2019e:	a80b      	add	r0, sp, #44	; 0x2c
   201a0:	f7fd f84f 	bl	1d242 <strlen>

		snprintf(nmea_buf + payload_length, sizeof(nmea_buf) - payload_length, "*%02X\n",
   201a4:	ab0b      	add	r3, sp, #44	; 0x2c
   201a6:	f1c0 0132 	rsb	r1, r0, #50	; 0x32
   201aa:	181d      	adds	r5, r3, r0
	int len = strlen(datastring);
   201ac:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
		snprintf(nmea_buf + payload_length, sizeof(nmea_buf) - payload_length, "*%02X\n",
   201b0:	9109      	str	r1, [sp, #36]	; 0x24
	int len = strlen(datastring);
   201b2:	f7fd f846 	bl	1d242 <strlen>
	for (int i = 0; i < len; i++)
   201b6:	2200      	movs	r2, #0
	uint8_t checksum = 0;
   201b8:	4613      	mov	r3, r2
	for (int i = 0; i < len; i++)
   201ba:	9909      	ldr	r1, [sp, #36]	; 0x24
   201bc:	ac0b      	add	r4, sp, #44	; 0x2c
   201be:	4290      	cmp	r0, r2
   201c0:	f104 0401 	add.w	r4, r4, #1
   201c4:	dc1f      	bgt.n	20206 <on_location_update+0x18a>
		snprintf(nmea_buf + payload_length, sizeof(nmea_buf) - payload_length, "*%02X\n",
   201c6:	4a1a      	ldr	r2, [pc, #104]	; (20230 <on_location_update+0x1b4>)
   201c8:	4628      	mov	r0, r5
   201ca:	f01a faf7 	bl	3a7bc <sniprintf>
	cJSON *msg_obj = create_timestamped_data_message_object(NRF_CLOUD_JSON_APPID_VAL_GPS);
   201ce:	4819      	ldr	r0, [pc, #100]	; (20234 <on_location_update+0x1b8>)
   201d0:	f7ff ff0c 	bl	1ffec <create_timestamped_data_message_object>
	if (!msg_obj)
   201d4:	4604      	mov	r4, r0
   201d6:	b158      	cbz	r0, 201f0 <on_location_update+0x174>
	if (cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_DATA_KEY, nmea) == NULL)
   201d8:	4917      	ldr	r1, [pc, #92]	; (20238 <on_location_update+0x1bc>)
   201da:	aa0b      	add	r2, sp, #44	; 0x2c
   201dc:	f01f fe3f 	bl	3fe5e <cJSON_AddStringToObject>
   201e0:	b9a8      	cbnz	r0, 2020e <on_location_update+0x192>
		LOG_ERR("Failed to append NMEA data to GNSS message object");
   201e2:	2145      	movs	r1, #69	; 0x45
   201e4:	4815      	ldr	r0, [pc, #84]	; (2023c <on_location_update+0x1c0>)
   201e6:	f01c fd72 	bl	3ccce <z_log_minimal_printk>
		cJSON_Delete(msg_obj);
   201ea:	4620      	mov	r0, r4
   201ec:	f011 ff42 	bl	32074 <cJSON_Delete>
		LOG_DBG("NMEA: %s", log_strdup(nmea_buf));

		/* Send the NMEA string. */
		send_gnss_nmea(nmea_buf);
	}
}
   201f0:	b019      	add	sp, #100	; 0x64
   201f2:	ecbd 8b02 	vpop	{d8}
   201f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201fa:	b004      	add	sp, #16
   201fc:	4770      	bx	lr
	LOG_INF("Location Updated: %.06f N %.06f W, accuracy: %.01f m, Method: %s",
   201fe:	4b10      	ldr	r3, [pc, #64]	; (20240 <on_location_update+0x1c4>)
   20200:	e75c      	b.n	200bc <on_location_update+0x40>
   20202:	4b10      	ldr	r3, [pc, #64]	; (20244 <on_location_update+0x1c8>)
   20204:	e75a      	b.n	200bc <on_location_update+0x40>
		checksum ^= datastring[i];
   20206:	7826      	ldrb	r6, [r4, #0]
	for (int i = 0; i < len; i++)
   20208:	3201      	adds	r2, #1
		checksum ^= datastring[i];
   2020a:	4073      	eors	r3, r6
	for (int i = 0; i < len; i++)
   2020c:	e7d7      	b.n	201be <on_location_update+0x142>
	ret = send_device_message_cJSON(msg_obj);
   2020e:	4620      	mov	r0, r4
   20210:	f000 fa40 	bl	20694 <send_device_message_cJSON>
   20214:	e7e9      	b.n	201ea <on_location_update+0x16e>
   20216:	bf00      	nop
   20218:	00043820 	.word	0x00043820
   2021c:	00043825 	.word	0x00043825
   20220:	0004382d 	.word	0x0004382d
   20224:	00043873 	.word	0x00043873
   20228:	404e0000 	.word	0x404e0000
   2022c:	000438a6 	.word	0x000438a6
   20230:	000438d3 	.word	0x000438d3
   20234:	00048bf8 	.word	0x00048bf8
   20238:	000438da 	.word	0x000438da
   2023c:	000438df 	.word	0x000438df
   20240:	00043812 	.word	0x00043812
   20244:	0004381b 	.word	0x0004381b

00020248 <send_sensor_sample.isra.0>:
static int send_sensor_sample(const char *const sensor, double value)
   20248:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2024a:	4605      	mov	r5, r0
   2024c:	e9cd 2300 	strd	r2, r3, [sp]
	cJSON *msg_obj = create_timestamped_data_message_object(sensor);
   20250:	f7ff fecc 	bl	1ffec <create_timestamped_data_message_object>
	if (msg_obj == NULL)
   20254:	4604      	mov	r4, r0
   20256:	b1a0      	cbz	r0, 20282 <send_sensor_sample.isra.0+0x3a>
	if (cJSON_AddNumberToObject(msg_obj, NRF_CLOUD_JSON_DATA_KEY, value) == NULL)
   20258:	e9dd 2300 	ldrd	r2, r3, [sp]
   2025c:	490a      	ldr	r1, [pc, #40]	; (20288 <send_sensor_sample.isra.0+0x40>)
   2025e:	f01f fdd2 	bl	3fe06 <cJSON_AddNumberToObject>
   20262:	b950      	cbnz	r0, 2027a <send_sensor_sample.isra.0+0x32>
		LOG_ERR("Failed to append value to %s sample container object ",
   20264:	462a      	mov	r2, r5
   20266:	2145      	movs	r1, #69	; 0x45
   20268:	4808      	ldr	r0, [pc, #32]	; (2028c <send_sensor_sample.isra.0+0x44>)
   2026a:	f01c fd30 	bl	3ccce <z_log_minimal_printk>
		cJSON_Delete(msg_obj);
   2026e:	4620      	mov	r0, r4
}
   20270:	b003      	add	sp, #12
   20272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		cJSON_Delete(msg_obj);
   20276:	f011 befd 	b.w	32074 <cJSON_Delete>
	ret = send_device_message_cJSON(msg_obj);
   2027a:	4620      	mov	r0, r4
   2027c:	f000 fa0a 	bl	20694 <send_device_message_cJSON>
   20280:	e7f5      	b.n	2026e <send_sensor_sample.isra.0+0x26>
}
   20282:	b003      	add	sp, #12
   20284:	bd30      	pop	{r4, r5, pc}
   20286:	bf00      	nop
   20288:	000438da 	.word	0x000438da
   2028c:	00043916 	.word	0x00043916

00020290 <main_application>:

void main_application(void)
{
   20290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20294:	b08c      	sub	sp, #48	; 0x30
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   20296:	482c      	ldr	r0, [pc, #176]	; (20348 <main_application+0xb8>)
   20298:	f015 fea4 	bl	35fe4 <z_impl_device_get_binding>
	sht40_data sht40Reading;

	/* Wait for the date and time to become known.
	 * This is needed both for location services and for sensor sample timestamping.
	 */
	LOG_INF("Waiting for modem to determine current date and time");
   2029c:	2149      	movs	r1, #73	; 0x49
   2029e:	4604      	mov	r4, r0
   202a0:	482a      	ldr	r0, [pc, #168]	; (2034c <main_application+0xbc>)
   202a2:	f01c fd14 	bl	3ccce <z_log_minimal_printk>
	if (!await_date_time_known(K_SECONDS(CONFIG_DATE_TIME_ESTABLISHMENT_TIMEOUT_SECONDS)))
   202a6:	f44f 0016 	mov.w	r0, #9830400	; 0x960000
   202aa:	2100      	movs	r1, #0
   202ac:	f000 f8ae 	bl	2040c <await_date_time_known>
   202b0:	2800      	cmp	r0, #0
   202b2:	d145      	bne.n	20340 <main_application+0xb0>
	{
		LOG_WRN("Failed to determine valid date time. Proceeding anyways");
   202b4:	2157      	movs	r1, #87	; 0x57
   202b6:	4826      	ldr	r0, [pc, #152]	; (20350 <main_application+0xc0>)
	}
	else
	{
		LOG_INF("Current date and time determined");
   202b8:	f01c fd09 	bl	3ccce <z_log_minimal_printk>
	}

	/* Begin tracking location at the configured interval. */
	(void)start_location_tracking(on_location_update,
   202bc:	213c      	movs	r1, #60	; 0x3c
   202be:	4825      	ldr	r0, [pc, #148]	; (20354 <main_application+0xc4>)
   202c0:	f000 fb46 	bl	20950 <start_location_tracking>
								  CONFIG_LOCATION_TRACKING_SAMPLE_INTERVAL_SECONDS);

	int counter = 0;
   202c4:	f04f 36ff 	mov.w	r6, #4294967295
   202c8:	f04f 37ff 	mov.w	r7, #4294967295
	z_impl_k_timer_start(timer, duration, period);
   202cc:	4d22      	ldr	r5, [pc, #136]	; (20358 <main_application+0xc8>)
		// 	}
		// }

		if (pm_read(dev_i2c3, &pmReading) == 0)
		{
			printf("PM 2.5: %d\n", pmReading.pm25_env);
   202ce:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 20370 <main_application+0xe0>
   202d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   202d6:	4628      	mov	r0, r5
   202d8:	2300      	movs	r3, #0
   202da:	e9cd 6700 	strd	r6, r7, [sp]
   202de:	f018 fedb 	bl	39098 <z_impl_k_timer_start>
		if (pm_read(dev_i2c3, &pmReading) == 0)
   202e2:	4620      	mov	r0, r4
   202e4:	a906      	add	r1, sp, #24
   202e6:	f01c f9f2 	bl	3c6ce <pm_read>
   202ea:	b968      	cbnz	r0, 20308 <main_application+0x78>
			printf("PM 2.5: %d\n", pmReading.pm25_env);
   202ec:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   202f0:	4640      	mov	r0, r8
   202f2:	f01a fa33 	bl	3a75c <iprintf>
			(void)send_sensor_sample("pm2.5", pmReading.pm25_env);
   202f6:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   202fa:	f7fc f9e3 	bl	1c6c4 <__aeabi_ui2d>
   202fe:	4602      	mov	r2, r0
   20300:	460b      	mov	r3, r1
   20302:	4816      	ldr	r0, [pc, #88]	; (2035c <main_application+0xcc>)
   20304:	f7ff ffa0 	bl	20248 <send_sensor_sample.isra.0>
		}

		if (sht40_read(dev_i2c3, &sht40Reading) == 0)
   20308:	4620      	mov	r0, r4
   2030a:	a902      	add	r1, sp, #8
   2030c:	f000 fb62 	bl	209d4 <sht40_read>
   20310:	b990      	cbnz	r0, 20338 <main_application+0xa8>
		{
			printf("T: %lf, H: %lf\n", sht40Reading.temperature, sht40Reading.humidity);
   20312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   20316:	4812      	ldr	r0, [pc, #72]	; (20360 <main_application+0xd0>)
   20318:	e9cd 2300 	strd	r2, r3, [sp]
   2031c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20320:	f01a fa1c 	bl	3a75c <iprintf>
			(void)send_sensor_sample("Temp", sht40Reading.temperature);
   20324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20328:	480e      	ldr	r0, [pc, #56]	; (20364 <main_application+0xd4>)
   2032a:	f7ff ff8d 	bl	20248 <send_sensor_sample.isra.0>
			(void)send_sensor_sample("Humidity", sht40Reading.humidity);
   2032e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   20332:	480d      	ldr	r0, [pc, #52]	; (20368 <main_application+0xd8>)
   20334:	f7ff ff88 	bl	20248 <send_sensor_sample.isra.0>
	return z_impl_k_timer_status_sync(timer);
   20338:	4628      	mov	r0, r5
   2033a:	f018 feff 	bl	3913c <z_impl_k_timer_status_sync>
	{
   2033e:	e7c8      	b.n	202d2 <main_application+0x42>
		LOG_INF("Current date and time determined");
   20340:	2149      	movs	r1, #73	; 0x49
   20342:	480a      	ldr	r0, [pc, #40]	; (2036c <main_application+0xdc>)
   20344:	e7b8      	b.n	202b8 <main_application+0x28>
   20346:	bf00      	nop
   20348:	000453f3 	.word	0x000453f3
   2034c:	00043951 	.word	0x00043951
   20350:	0004398b 	.word	0x0004398b
   20354:	0002007d 	.word	0x0002007d
   20358:	20014e30 	.word	0x20014e30
   2035c:	000439fa 	.word	0x000439fa
   20360:	00043a00 	.word	0x00043a00
   20364:	00043a10 	.word	0x00043a10
   20368:	00043a15 	.word	0x00043a15
   2036c:	000439c8 	.word	0x000439c8
   20370:	000439ee 	.word	0x000439ee

00020374 <reset_cloud>:
static void reset_cloud(void)
{
	int err;

	/* Wait for a few seconds to help residual events settle. */
	LOG_INF("Resetting nRF Cloud transport");
   20374:	2149      	movs	r1, #73	; 0x49
{
   20376:	b508      	push	{r3, lr}
	LOG_INF("Resetting nRF Cloud transport");
   20378:	4810      	ldr	r0, [pc, #64]	; (203bc <reset_cloud+0x48>)
   2037a:	f01c fca8 	bl	3ccce <z_log_minimal_printk>
	return z_impl_k_sleep(timeout);
   2037e:	2100      	movs	r1, #0
   20380:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
   20384:	f018 f9d0 	bl	38728 <z_impl_k_sleep>
	k_sleep(K_SECONDS(20));

	/* Disconnect from nRF Cloud and uninit the cloud library. */
	err = nrf_cloud_uninit();
   20388:	f00b f9f2 	bl	2b770 <nrf_cloud_uninit>

	/* nrf_cloud_uninit returns -EBUSY if reset is blocked by a FOTA job. */
	if (err == -EBUSY) {
   2038c:	f110 0f10 	cmn.w	r0, #16
	err = nrf_cloud_uninit();
   20390:	4602      	mov	r2, r0
	if (err == -EBUSY) {
   20392:	d104      	bne.n	2039e <reset_cloud+0x2a>
		LOG_ERR("Could not reset nRF Cloud transport due to ongoing FOTA job. "
   20394:	2145      	movs	r1, #69	; 0x45
   20396:	480a      	ldr	r0, [pc, #40]	; (203c0 <reset_cloud+0x4c>)
			"Continuing without resetting");
	} else if (err) {
		LOG_ERR("Could not reset nRF Cloud transport, error %d. "
			"Continuing without resetting", err);
	} else {
		LOG_INF("nRF Cloud transport has been reset");
   20398:	f01c fc99 	bl	3ccce <z_log_minimal_printk>
   2039c:	e004      	b.n	203a8 <reset_cloud+0x34>
	} else if (err) {
   2039e:	b148      	cbz	r0, 203b4 <reset_cloud+0x40>
		LOG_ERR("Could not reset nRF Cloud transport, error %d. "
   203a0:	2145      	movs	r1, #69	; 0x45
   203a2:	4808      	ldr	r0, [pc, #32]	; (203c4 <reset_cloud+0x50>)
   203a4:	f01c fc93 	bl	3ccce <z_log_minimal_printk>
	}

	/* Clear cloud connection event state (reset to initial state). */
	clear_cloud_connection_events();
}
   203a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_EVENT_SET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_event_set(event, events);
   203ac:	2100      	movs	r1, #0
   203ae:	4806      	ldr	r0, [pc, #24]	; (203c8 <reset_cloud+0x54>)
   203b0:	f021 b867 	b.w	41482 <z_impl_k_event_set>
		LOG_INF("nRF Cloud transport has been reset");
   203b4:	2149      	movs	r1, #73	; 0x49
   203b6:	4805      	ldr	r0, [pc, #20]	; (203cc <reset_cloud+0x58>)
   203b8:	e7ee      	b.n	20398 <reset_cloud+0x24>
   203ba:	bf00      	nop
   203bc:	00043a2a 	.word	0x00043a2a
   203c0:	00043a4d 	.word	0x00043a4d
   203c4:	00043aac 	.word	0x00043aac
   203c8:	200150f0 	.word	0x200150f0
   203cc:	00043afd 	.word	0x00043afd

000203d0 <date_time_evt_handler>:
{
   203d0:	b508      	push	{r3, lr}
	if (date_time_is_valid()) {
   203d2:	f01f f9cd 	bl	3f770 <date_time_is_valid>
   203d6:	b128      	cbz	r0, 203e4 <date_time_evt_handler+0x14>
}
   203d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_event_post(event, events);
   203dc:	2102      	movs	r1, #2
   203de:	4802      	ldr	r0, [pc, #8]	; (203e8 <date_time_evt_handler+0x18>)
   203e0:	f021 b84c 	b.w	4147c <z_impl_k_event_post>
   203e4:	bd08      	pop	{r3, pc}
   203e6:	bf00      	nop
   203e8:	200150f0 	.word	0x200150f0

000203ec <await_lte_connection>:
{
   203ec:	b507      	push	{r0, r1, r2, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm3 = { .val = timeout };
		return (uint32_t) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.split.lo, parm3.split.hi, K_SYSCALL_K_EVENT_WAIT_ALL);
	}
#endif
	compiler_barrier();
	return z_impl_k_event_wait_all(event, events, reset, timeout);
   203ee:	2200      	movs	r2, #0
   203f0:	e9cd 0100 	strd	r0, r1, [sp]
   203f4:	2102      	movs	r1, #2
   203f6:	4804      	ldr	r0, [pc, #16]	; (20408 <await_lte_connection+0x1c>)
   203f8:	f021 f84c 	bl	41494 <z_impl_k_event_wait_all>
}
   203fc:	3800      	subs	r0, #0
   203fe:	bf18      	it	ne
   20400:	2001      	movne	r0, #1
   20402:	b003      	add	sp, #12
   20404:	f85d fb04 	ldr.w	pc, [sp], #4
   20408:	20015100 	.word	0x20015100

0002040c <await_date_time_known>:
{
   2040c:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_event_wait(event, events, reset, timeout);
   2040e:	2200      	movs	r2, #0
   20410:	e9cd 0100 	strd	r0, r1, [sp]
   20414:	2102      	movs	r1, #2
   20416:	4804      	ldr	r0, [pc, #16]	; (20428 <await_date_time_known+0x1c>)
   20418:	f021 f836 	bl	41488 <z_impl_k_event_wait>
}
   2041c:	3800      	subs	r0, #0
   2041e:	bf18      	it	ne
   20420:	2001      	movne	r0, #1
   20422:	b003      	add	sp, #12
   20424:	f85d fb04 	ldr.w	pc, [sp], #4
   20428:	200150f0 	.word	0x200150f0

0002042c <await_connection>:
{
   2042c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2042e:	4605      	mov	r5, r0
   20430:	460c      	mov	r4, r1
	return await_lte_connection(timeout) && await_cloud_ready(timeout, false);
   20432:	f7ff ffdb 	bl	203ec <await_lte_connection>
   20436:	b148      	cbz	r0, 2044c <await_connection+0x20>
   20438:	2200      	movs	r2, #0
   2043a:	2104      	movs	r1, #4
   2043c:	e9cd 5400 	strd	r5, r4, [sp]
   20440:	4803      	ldr	r0, [pc, #12]	; (20450 <await_connection+0x24>)
   20442:	f021 f821 	bl	41488 <z_impl_k_event_wait>
   20446:	1f03      	subs	r3, r0, #4
   20448:	4258      	negs	r0, r3
   2044a:	4158      	adcs	r0, r3
}
   2044c:	b003      	add	sp, #12
   2044e:	bd30      	pop	{r4, r5, pc}
   20450:	200150f0 	.word	0x200150f0

00020454 <cloud_is_connected>:
{
   20454:	b507      	push	{r0, r1, r2, lr}
   20456:	2200      	movs	r2, #0
   20458:	2300      	movs	r3, #0
   2045a:	2102      	movs	r1, #2
   2045c:	e9cd 2300 	strd	r2, r3, [sp]
   20460:	4804      	ldr	r0, [pc, #16]	; (20474 <cloud_is_connected+0x20>)
   20462:	f021 f811 	bl	41488 <z_impl_k_event_wait>
}
   20466:	3800      	subs	r0, #0
   20468:	bf18      	it	ne
   2046a:	2001      	movne	r0, #1
   2046c:	b003      	add	sp, #12
   2046e:	f85d fb04 	ldr.w	pc, [sp], #4
   20472:	bf00      	nop
   20474:	200150f0 	.word	0x200150f0

00020478 <disconnect_cloud>:
	z_impl_k_event_post(event, events);
   20478:	2110      	movs	r1, #16
   2047a:	4801      	ldr	r0, [pc, #4]	; (20480 <disconnect_cloud+0x8>)
   2047c:	f020 bffe 	b.w	4147c <z_impl_k_event_post>
   20480:	200150f0 	.word	0x200150f0

00020484 <cloud_event_handler>:
{
   20484:	b507      	push	{r0, r1, r2, lr}
	switch (nrf_cloud_evt->type) {
   20486:	7803      	ldrb	r3, [r0, #0]
   20488:	3b01      	subs	r3, #1
   2048a:	2b0a      	cmp	r3, #10
   2048c:	d834      	bhi.n	204f8 <cloud_event_handler+0x74>
   2048e:	e8df f003 	tbb	[pc, r3]
   20492:	3306      	.short	0x3306
   20494:	2725130d 	.word	0x2725130d
   20498:	33203333 	.word	0x33203333
   2049c:	2e          	.byte	0x2e
   2049d:	00          	.byte	0x00
   2049e:	2102      	movs	r1, #2
   204a0:	4817      	ldr	r0, [pc, #92]	; (20500 <cloud_event_handler+0x7c>)
}
   204a2:	b003      	add	sp, #12
   204a4:	f85d eb04 	ldr.w	lr, [sp], #4
   204a8:	f020 bfe8 	b.w	4147c <z_impl_k_event_post>
		LOG_INF("Please add this device to your cloud account in the nRF Cloud portal.");
   204ac:	2149      	movs	r1, #73	; 0x49
   204ae:	4815      	ldr	r0, [pc, #84]	; (20504 <cloud_event_handler+0x80>)
   204b0:	f01c fc0d 	bl	3ccce <z_log_minimal_printk>
   204b4:	2108      	movs	r1, #8
   204b6:	e7f3      	b.n	204a0 <cloud_event_handler+0x1c>
	return z_impl_k_event_wait(event, events, reset, timeout);
   204b8:	2200      	movs	r2, #0
   204ba:	2300      	movs	r3, #0
   204bc:	2108      	movs	r1, #8
   204be:	e9cd 2300 	strd	r2, r3, [sp]
   204c2:	480f      	ldr	r0, [pc, #60]	; (20500 <cloud_event_handler+0x7c>)
   204c4:	f020 ffe0 	bl	41488 <z_impl_k_event_wait>
		if (cloud_has_requested_association()) {
   204c8:	b1b0      	cbz	r0, 204f8 <cloud_event_handler+0x74>
			LOG_INF("Device successfully associated with cloud!");
   204ca:	2149      	movs	r1, #73	; 0x49
   204cc:	480e      	ldr	r0, [pc, #56]	; (20508 <cloud_event_handler+0x84>)
   204ce:	f01c fbfe 	bl	3ccce <z_log_minimal_printk>
}
   204d2:	b003      	add	sp, #12
   204d4:	f85d eb04 	ldr.w	lr, [sp], #4
		disconnect_cloud();
   204d8:	f7ff bfce 	b.w	20478 <disconnect_cloud>
	z_impl_k_event_post(event, events);
   204dc:	2104      	movs	r1, #4
   204de:	e7df      	b.n	204a0 <cloud_event_handler+0x1c>
		location_assistance_data_handler(nrf_cloud_evt->data.ptr, nrf_cloud_evt->data.len);
   204e0:	e9d0 1002 	ldrd	r1, r0, [r0, #8]
}
   204e4:	b003      	add	sp, #12
   204e6:	f85d eb04 	ldr.w	lr, [sp], #4
		location_assistance_data_handler(nrf_cloud_evt->data.ptr, nrf_cloud_evt->data.len);
   204ea:	f000 ba0d 	b.w	20908 <location_assistance_data_handler>
}
   204ee:	b003      	add	sp, #12
   204f0:	f85d eb04 	ldr.w	lr, [sp], #4
		on_fota_downloaded();
   204f4:	f000 b9bc 	b.w	20870 <on_fota_downloaded>
}
   204f8:	b003      	add	sp, #12
   204fa:	f85d fb04 	ldr.w	pc, [sp], #4
   204fe:	bf00      	nop
   20500:	200150f0 	.word	0x200150f0
   20504:	00043b25 	.word	0x00043b25
   20508:	00043b70 	.word	0x00043b70

0002050c <await_cloud_disconnection>:
{
   2050c:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_event_wait(event, events, reset, timeout);
   2050e:	2200      	movs	r2, #0
   20510:	e9cd 0100 	strd	r0, r1, [sp]
   20514:	2110      	movs	r1, #16
   20516:	4804      	ldr	r0, [pc, #16]	; (20528 <await_cloud_disconnection+0x1c>)
   20518:	f020 ffb6 	bl	41488 <z_impl_k_event_wait>
}
   2051c:	3800      	subs	r0, #0
   2051e:	bf18      	it	ne
   20520:	2001      	movne	r0, #1
   20522:	b003      	add	sp, #12
   20524:	f85d fb04 	ldr.w	pc, [sp], #4
   20528:	200150f0 	.word	0x200150f0

0002052c <cloud_is_disconnecting>:
{
   2052c:	b507      	push	{r0, r1, r2, lr}
   2052e:	2200      	movs	r2, #0
   20530:	2300      	movs	r3, #0
   20532:	2110      	movs	r1, #16
   20534:	e9cd 2300 	strd	r2, r3, [sp]
   20538:	4804      	ldr	r0, [pc, #16]	; (2054c <cloud_is_disconnecting+0x20>)
   2053a:	f020 ffa5 	bl	41488 <z_impl_k_event_wait>
}
   2053e:	3800      	subs	r0, #0
   20540:	bf18      	it	ne
   20542:	2001      	movne	r0, #1
   20544:	b003      	add	sp, #12
   20546:	f85d fb04 	ldr.w	pc, [sp], #4
   2054a:	bf00      	nop
   2054c:	200150f0 	.word	0x200150f0

00020550 <lte_event_handler>:
{
   20550:	b508      	push	{r3, lr}
	switch (evt->type) {
   20552:	7801      	ldrb	r1, [r0, #0]
   20554:	b9d9      	cbnz	r1, 2058e <lte_event_handler+0x3e>
		if ((evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   20556:	7a03      	ldrb	r3, [r0, #8]
   20558:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2055c:	2b01      	cmp	r3, #1
   2055e:	d010      	beq.n	20582 <lte_event_handler+0x32>
	z_impl_k_event_set(event, events);
   20560:	480b      	ldr	r0, [pc, #44]	; (20590 <lte_event_handler+0x40>)
   20562:	f020 ff8e 	bl	41482 <z_impl_k_event_set>
			if (cloud_is_connected() && !cloud_is_disconnecting()) {
   20566:	f7ff ff75 	bl	20454 <cloud_is_connected>
   2056a:	b180      	cbz	r0, 2058e <lte_event_handler+0x3e>
   2056c:	f7ff ffde 	bl	2052c <cloud_is_disconnecting>
   20570:	b968      	cbnz	r0, 2058e <lte_event_handler+0x3e>
				LOG_INF("LTE connection lost. Disconnecting from nRF Cloud too...");
   20572:	2149      	movs	r1, #73	; 0x49
   20574:	4807      	ldr	r0, [pc, #28]	; (20594 <lte_event_handler+0x44>)
   20576:	f01c fbaa 	bl	3ccce <z_log_minimal_printk>
}
   2057a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				disconnect_cloud();
   2057e:	f7ff bf7b 	b.w	20478 <disconnect_cloud>
	z_impl_k_event_post(event, events);
   20582:	2102      	movs	r1, #2
}
   20584:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20588:	4801      	ldr	r0, [pc, #4]	; (20590 <lte_event_handler+0x40>)
   2058a:	f020 bf77 	b.w	4147c <z_impl_k_event_post>
   2058e:	bd08      	pop	{r3, pc}
   20590:	20015100 	.word	0x20015100
   20594:	00043ba0 	.word	0x00043ba0

00020598 <send_device_message>:
{
   20598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2059a:	9001      	str	r0, [sp, #4]
	char *msg_buf = k_malloc(strlen(msg) + 1);
   2059c:	f7fc fe51 	bl	1d242 <strlen>
   205a0:	3001      	adds	r0, #1
   205a2:	f020 ff84 	bl	414ae <k_malloc>
	if (!msg_buf) {
   205a6:	9901      	ldr	r1, [sp, #4]
	char *msg_buf = k_malloc(strlen(msg) + 1);
   205a8:	9003      	str	r0, [sp, #12]
	if (!msg_buf) {
   205aa:	b940      	cbnz	r0, 205be <send_device_message+0x26>
		LOG_ERR("Could not alloc memory for new device message");
   205ac:	2145      	movs	r1, #69	; 0x45
   205ae:	480d      	ldr	r0, [pc, #52]	; (205e4 <send_device_message+0x4c>)
   205b0:	f01c fb8d 	bl	3ccce <z_log_minimal_printk>
		return -ENOMEM;
   205b4:	f06f 000b 	mvn.w	r0, #11
}
   205b8:	b005      	add	sp, #20
   205ba:	f85d fb04 	ldr.w	pc, [sp], #4
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   205be:	f021 f9eb 	bl	41998 <strcpy>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   205c2:	2200      	movs	r2, #0
   205c4:	2300      	movs	r3, #0
   205c6:	4808      	ldr	r0, [pc, #32]	; (205e8 <send_device_message+0x50>)
   205c8:	a903      	add	r1, sp, #12
   205ca:	f016 f8e9 	bl	367a0 <z_impl_k_msgq_put>
	if (k_msgq_put(&device_message_queue, &msg_buf, K_NO_WAIT)) {
   205ce:	2800      	cmp	r0, #0
   205d0:	d0f2      	beq.n	205b8 <send_device_message+0x20>
		LOG_ERR("Device message rejected, outgoing message queue is full");
   205d2:	2145      	movs	r1, #69	; 0x45
   205d4:	4805      	ldr	r0, [pc, #20]	; (205ec <send_device_message+0x54>)
   205d6:	f01c fb7a 	bl	3ccce <z_log_minimal_printk>
		k_free(msg_buf);
   205da:	9803      	ldr	r0, [sp, #12]
   205dc:	f020 ff60 	bl	414a0 <k_free>
   205e0:	e7e8      	b.n	205b4 <send_device_message+0x1c>
   205e2:	bf00      	nop
   205e4:	00043bde 	.word	0x00043bde
   205e8:	20014fcc 	.word	0x20014fcc
   205ec:	00043c11 	.word	0x00043c11

000205f0 <consume_device_message>:
{
   205f0:	b530      	push	{r4, r5, lr}
   205f2:	b087      	sub	sp, #28
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   205f4:	f04f 32ff 	mov.w	r2, #4294967295
   205f8:	f04f 33ff 	mov.w	r3, #4294967295
   205fc:	4821      	ldr	r0, [pc, #132]	; (20684 <consume_device_message+0x94>)
   205fe:	a901      	add	r1, sp, #4
   20600:	f016 f95e 	bl	368c0 <z_impl_k_msgq_get>
	if (ret) {
   20604:	4604      	mov	r4, r0
   20606:	b140      	cbz	r0, 2061a <consume_device_message+0x2a>
		LOG_ERR("Failed to retrieve item from outgoing message queue, error: %d", ret);
   20608:	4602      	mov	r2, r0
   2060a:	2145      	movs	r1, #69	; 0x45
   2060c:	481e      	ldr	r0, [pc, #120]	; (20688 <consume_device_message+0x98>)
   2060e:	f01c fb5e 	bl	3ccce <z_log_minimal_printk>
		return -ret;
   20612:	4264      	negs	r4, r4
}
   20614:	4620      	mov	r0, r4
   20616:	b007      	add	sp, #28
   20618:	bd30      	pop	{r4, r5, pc}
	(void)await_connection(K_FOREVER);
   2061a:	f04f 31ff 	mov.w	r1, #4294967295
   2061e:	f04f 30ff 	mov.w	r0, #4294967295
   20622:	f7ff ff03 	bl	2042c <await_connection>
	struct nrf_cloud_tx_data mqtt_msg = {
   20626:	4621      	mov	r1, r4
   20628:	2210      	movs	r2, #16
   2062a:	a802      	add	r0, sp, #8
   2062c:	f020 ffe9 	bl	41602 <memset>
		.data.len = strlen(msg),
   20630:	9801      	ldr	r0, [sp, #4]
   20632:	f7fc fe06 	bl	1d242 <strlen>
	struct nrf_cloud_tx_data mqtt_msg = {
   20636:	9b01      	ldr	r3, [sp, #4]
   20638:	9002      	str	r0, [sp, #8]
   2063a:	9303      	str	r3, [sp, #12]
   2063c:	f44f 7381 	mov.w	r3, #258	; 0x102
	ret = nrf_cloud_send(&mqtt_msg);
   20640:	a802      	add	r0, sp, #8
	struct nrf_cloud_tx_data mqtt_msg = {
   20642:	f8ad 3010 	strh.w	r3, [sp, #16]
	ret = nrf_cloud_send(&mqtt_msg);
   20646:	f00b f9bd 	bl	2b9c4 <nrf_cloud_send>
	if (ret) {
   2064a:	4d10      	ldr	r5, [pc, #64]	; (2068c <consume_device_message+0x9c>)
   2064c:	4604      	mov	r4, r0
   2064e:	b1b8      	cbz	r0, 20680 <consume_device_message+0x90>
		LOG_ERR("Transmission of enqueued device message failed, nrf_cloud_send "
   20650:	4602      	mov	r2, r0
   20652:	2145      	movs	r1, #69	; 0x45
   20654:	480e      	ldr	r0, [pc, #56]	; (20690 <consume_device_message+0xa0>)
   20656:	f01c fb3a 	bl	3ccce <z_log_minimal_printk>
		send_device_message(msg);
   2065a:	9801      	ldr	r0, [sp, #4]
   2065c:	f7ff ff9c 	bl	20598 <send_device_message>
		send_failure_count += 1;
   20660:	682b      	ldr	r3, [r5, #0]
   20662:	3301      	adds	r3, #1
		if (send_failure_count > CONFIG_MAX_CONSECUTIVE_SEND_FAILURES) {
   20664:	2b05      	cmp	r3, #5
		send_failure_count += 1;
   20666:	602b      	str	r3, [r5, #0]
		if (send_failure_count > CONFIG_MAX_CONSECUTIVE_SEND_FAILURES) {
   20668:	dd06      	ble.n	20678 <consume_device_message+0x88>
			disconnect_cloud();
   2066a:	f7ff ff05 	bl	20478 <disconnect_cloud>
	return z_impl_k_sleep(timeout);
   2066e:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   20672:	2100      	movs	r1, #0
   20674:	f018 f858 	bl	38728 <z_impl_k_sleep>
	k_free(msg);
   20678:	9801      	ldr	r0, [sp, #4]
   2067a:	f020 ff11 	bl	414a0 <k_free>
	return ret;
   2067e:	e7c9      	b.n	20614 <consume_device_message+0x24>
		send_failure_count = 0;
   20680:	6028      	str	r0, [r5, #0]
   20682:	e7f9      	b.n	20678 <consume_device_message+0x88>
   20684:	20014fcc 	.word	0x20014fcc
   20688:	00043c4e 	.word	0x00043c4e
   2068c:	20019098 	.word	0x20019098
   20690:	00043c92 	.word	0x00043c92

00020694 <send_device_message_cJSON>:
{
   20694:	b538      	push	{r3, r4, r5, lr}
	if (!msg_obj) {
   20696:	b938      	cbnz	r0, 206a8 <send_device_message_cJSON+0x14>
		LOG_ERR("Cannot send NULL device message object");
   20698:	2145      	movs	r1, #69	; 0x45
   2069a:	480c      	ldr	r0, [pc, #48]	; (206cc <send_device_message_cJSON+0x38>)
   2069c:	f01c fb17 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   206a0:	f06f 0415 	mvn.w	r4, #21
}
   206a4:	4620      	mov	r0, r4
   206a6:	bd38      	pop	{r3, r4, r5, pc}
	msg = cJSON_PrintUnformatted(msg_obj);
   206a8:	f01f fb32 	bl	3fd10 <cJSON_PrintUnformatted>
	if (msg == NULL) {
   206ac:	4605      	mov	r5, r0
   206ae:	b930      	cbnz	r0, 206be <send_device_message_cJSON+0x2a>
		LOG_ERR("Failed to convert cJSON device message object to string");
   206b0:	2145      	movs	r1, #69	; 0x45
   206b2:	4807      	ldr	r0, [pc, #28]	; (206d0 <send_device_message_cJSON+0x3c>)
   206b4:	f01c fb0b 	bl	3ccce <z_log_minimal_printk>
		return -ENOMEM;
   206b8:	f06f 040b 	mvn.w	r4, #11
   206bc:	e7f2      	b.n	206a4 <send_device_message_cJSON+0x10>
	ret = send_device_message(msg);
   206be:	f7ff ff6b 	bl	20598 <send_device_message>
   206c2:	4604      	mov	r4, r0
	k_free(msg);
   206c4:	4628      	mov	r0, r5
   206c6:	f020 feeb 	bl	414a0 <k_free>
	return ret;
   206ca:	e7eb      	b.n	206a4 <send_device_message_cJSON+0x10>
   206cc:	00043d1d 	.word	0x00043d1d
   206d0:	00043d49 	.word	0x00043d49

000206d4 <manage_connection>:

	return 0;
}

void manage_connection(void)
{
   206d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	 *
	 * (Once we request connection, the modem will automatically try to reconnect whenever
	 *  connection is lost).
	 */

	LOG_INF("Connecting to LTE network. This may take several minutes...");
   206d6:	2149      	movs	r1, #73	; 0x49
{
   206d8:	b089      	sub	sp, #36	; 0x24
	LOG_INF("Connecting to LTE network. This may take several minutes...");
   206da:	4850      	ldr	r0, [pc, #320]	; (2081c <manage_connection+0x148>)
   206dc:	f01c faf7 	bl	3ccce <z_log_minimal_printk>
	LOG_INF("Setting up LTE");
   206e0:	2149      	movs	r1, #73	; 0x49
   206e2:	484f      	ldr	r0, [pc, #316]	; (20820 <manage_connection+0x14c>)
   206e4:	f01c faf3 	bl	3ccce <z_log_minimal_printk>
	date_time_register_handler(date_time_evt_handler);
   206e8:	484e      	ldr	r0, [pc, #312]	; (20824 <manage_connection+0x150>)
   206ea:	f01f f843 	bl	3f774 <date_time_register_handler>
	err = lte_lc_modem_events_enable();
   206ee:	f007 f92f 	bl	27950 <lte_lc_modem_events_enable>
	if (err) {
   206f2:	4602      	mov	r2, r0
   206f4:	b150      	cbz	r0, 2070c <manage_connection+0x38>
		LOG_ERR("lte_lc_modem_events_enable failed, error: %d", err);
   206f6:	2145      	movs	r1, #69	; 0x45
   206f8:	484b      	ldr	r0, [pc, #300]	; (20828 <manage_connection+0x154>)
		LOG_ERR("Modem could not be configured, error: %d", err);
   206fa:	f01c fae8 	bl	3ccce <z_log_minimal_printk>
	if (setup_lte()) {
		LOG_ERR("LTE initialization failed. Continuing anyway. This may fail.");
   206fe:	2145      	movs	r1, #69	; 0x45
   20700:	484a      	ldr	r0, [pc, #296]	; (2082c <manage_connection+0x158>)
   20702:	f01c fae4 	bl	3ccce <z_log_minimal_printk>
	}

	while (true) {
		/* Wait for LTE to become connected (or re-connected if connection was lost). */
		LOG_INF("Waiting for connection to LTE network...");
   20706:	4d4a      	ldr	r5, [pc, #296]	; (20830 <manage_connection+0x15c>)

		(void)await_lte_connection(K_FOREVER);
		LOG_INF("Connected to LTE network");
   20708:	4c4a      	ldr	r4, [pc, #296]	; (20834 <manage_connection+0x160>)
   2070a:	e040      	b.n	2078e <manage_connection+0xba>
	LOG_INF("Starting connection to LTE network...");
   2070c:	2149      	movs	r1, #73	; 0x49
   2070e:	484a      	ldr	r0, [pc, #296]	; (20838 <manage_connection+0x164>)
   20710:	f01c fadd 	bl	3ccce <z_log_minimal_printk>
	err = lte_lc_init_and_connect_async(lte_event_handler);
   20714:	4849      	ldr	r0, [pc, #292]	; (2083c <manage_connection+0x168>)
   20716:	f01e ff65 	bl	3f5e4 <lte_lc_init_and_connect_async>
	if (err) {
   2071a:	4602      	mov	r2, r0
   2071c:	2800      	cmp	r0, #0
   2071e:	d0f2      	beq.n	20706 <manage_connection+0x32>
		LOG_ERR("Modem could not be configured, error: %d", err);
   20720:	2145      	movs	r1, #69	; 0x45
   20722:	4847      	ldr	r0, [pc, #284]	; (20840 <manage_connection+0x16c>)
   20724:	e7e9      	b.n	206fa <manage_connection+0x26>
		LOG_ERR("Cloud lib could not be initialized, error: %d", err);
   20726:	2145      	movs	r1, #69	; 0x45
   20728:	4846      	ldr	r0, [pc, #280]	; (20844 <manage_connection+0x170>)
   2072a:	f01c fad0 	bl	3ccce <z_log_minimal_printk>
			/* and then wait patiently for a connection problem. */
			(void)await_cloud_disconnection(K_FOREVER);

			LOG_INF("Disconnected from nRF Cloud");
		} else {
			LOG_INF("Failed to connect to nRF Cloud");
   2072e:	2149      	movs	r1, #73	; 0x49
   20730:	4845      	ldr	r0, [pc, #276]	; (20848 <manage_connection+0x174>)
   20732:	e023      	b.n	2077c <manage_connection+0xa8>
	LOG_INF("Connected to nRF Cloud");
   20734:	4845      	ldr	r0, [pc, #276]	; (2084c <manage_connection+0x178>)
   20736:	f01c faca 	bl	3ccce <z_log_minimal_printk>
	struct nrf_cloud_svc_info_fota fota_info = {
   2073a:	2306      	movs	r3, #6
   2073c:	f88d 3008 	strb.w	r3, [sp, #8]
	struct nrf_cloud_svc_info_ui ui_info = {
   20740:	2303      	movs	r3, #3
   20742:	f88d 300c 	strb.w	r3, [sp, #12]
   20746:	2300      	movs	r3, #0
	struct nrf_cloud_svc_info service_info = {
   20748:	aa02      	add	r2, sp, #8
   2074a:	9204      	str	r2, [sp, #16]
   2074c:	aa03      	add	r2, sp, #12
	struct nrf_cloud_device_status device_status = {
   2074e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	struct nrf_cloud_svc_info_ui ui_info = {
   20752:	f88d 300d 	strb.w	r3, [sp, #13]
	err = nrf_cloud_shadow_device_status_update(&device_status);
   20756:	a806      	add	r0, sp, #24
	struct nrf_cloud_device_status device_status = {
   20758:	ab04      	add	r3, sp, #16
   2075a:	9307      	str	r3, [sp, #28]
	err = nrf_cloud_shadow_device_status_update(&device_status);
   2075c:	f00b f9ac 	bl	2bab8 <nrf_cloud_shadow_device_status_update>
	if (err) {
   20760:	4602      	mov	r2, r0
   20762:	b118      	cbz	r0, 2076c <manage_connection+0x98>
		LOG_ERR("Failed to update device shadow, error: %d", err);
   20764:	2145      	movs	r1, #69	; 0x45
   20766:	483a      	ldr	r0, [pc, #232]	; (20850 <manage_connection+0x17c>)
   20768:	f01c fab1 	bl	3ccce <z_log_minimal_printk>
			(void)await_cloud_disconnection(K_FOREVER);
   2076c:	f04f 31ff 	mov.w	r1, #4294967295
   20770:	f04f 30ff 	mov.w	r0, #4294967295
   20774:	f7ff feca 	bl	2050c <await_cloud_disconnection>
			LOG_INF("Disconnected from nRF Cloud");
   20778:	2149      	movs	r1, #73	; 0x49
   2077a:	4836      	ldr	r0, [pc, #216]	; (20854 <manage_connection+0x180>)
			LOG_INF("Failed to connect to nRF Cloud");
   2077c:	f01c faa7 	bl	3ccce <z_log_minimal_printk>
		}

		/* Reset cloud connection state before trying again. */
		reset_cloud();
   20780:	f7ff fdf8 	bl	20374 <reset_cloud>
   20784:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   20788:	2100      	movs	r1, #0
   2078a:	f017 ffcd 	bl	38728 <z_impl_k_sleep>
		LOG_INF("Waiting for connection to LTE network...");
   2078e:	2149      	movs	r1, #73	; 0x49
   20790:	4628      	mov	r0, r5
   20792:	f01c fa9c 	bl	3ccce <z_log_minimal_printk>
		(void)await_lte_connection(K_FOREVER);
   20796:	f04f 31ff 	mov.w	r1, #4294967295
   2079a:	f04f 30ff 	mov.w	r0, #4294967295
   2079e:	f7ff fe25 	bl	203ec <await_lte_connection>
		LOG_INF("Connected to LTE network");
   207a2:	2149      	movs	r1, #73	; 0x49
   207a4:	4620      	mov	r0, r4
   207a6:	f01c fa92 	bl	3ccce <z_log_minimal_printk>
	LOG_INF("Connecting to nRF Cloud");
   207aa:	2149      	movs	r1, #73	; 0x49
   207ac:	482a      	ldr	r0, [pc, #168]	; (20858 <manage_connection+0x184>)
   207ae:	f01c fa8e 	bl	3ccce <z_log_minimal_printk>
	struct nrf_cloud_init_param params = {
   207b2:	2300      	movs	r3, #0
   207b4:	9307      	str	r3, [sp, #28]
   207b6:	4b29      	ldr	r3, [pc, #164]	; (2085c <manage_connection+0x188>)
	err = nrf_cloud_init(&params);
   207b8:	a806      	add	r0, sp, #24
	struct nrf_cloud_init_param params = {
   207ba:	9306      	str	r3, [sp, #24]
	err = nrf_cloud_init(&params);
   207bc:	f00a ffa6 	bl	2b70c <nrf_cloud_init>
	if (err) {
   207c0:	4602      	mov	r2, r0
   207c2:	2800      	cmp	r0, #0
   207c4:	d1af      	bne.n	20726 <manage_connection+0x52>
		LOG_INF("Next connection retry in %d seconds",
   207c6:	4e26      	ldr	r6, [pc, #152]	; (20860 <manage_connection+0x18c>)
			LOG_ERR("cloud_connect, error: %d", err);
   207c8:	4f26      	ldr	r7, [pc, #152]	; (20864 <manage_connection+0x190>)
		LOG_INF("Next connection retry in %d seconds",
   207ca:	221e      	movs	r2, #30
   207cc:	2149      	movs	r1, #73	; 0x49
   207ce:	4630      	mov	r0, r6
   207d0:	f01c fa7d 	bl	3ccce <z_log_minimal_printk>
		err = nrf_cloud_connect(NULL);
   207d4:	2000      	movs	r0, #0
   207d6:	f00b f821 	bl	2b81c <nrf_cloud_connect>
		if (err) {
   207da:	4602      	mov	r2, r0
   207dc:	b118      	cbz	r0, 207e6 <manage_connection+0x112>
			LOG_ERR("cloud_connect, error: %d", err);
   207de:	2145      	movs	r1, #69	; 0x45
   207e0:	4638      	mov	r0, r7
   207e2:	f01c fa74 	bl	3ccce <z_log_minimal_printk>
		if (await_cloud_connected(
   207e6:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   207ea:	2100      	movs	r1, #0
   207ec:	f7ff fe0e 	bl	2040c <await_date_time_known>
   207f0:	2800      	cmp	r0, #0
   207f2:	d0ea      	beq.n	207ca <manage_connection+0xf6>
	return z_impl_k_event_wait(event, events, reset, timeout);
   207f4:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   207f8:	2300      	movs	r3, #0
   207fa:	2114      	movs	r1, #20
   207fc:	e9cd 2300 	strd	r2, r3, [sp]
   20800:	4819      	ldr	r0, [pc, #100]	; (20868 <manage_connection+0x194>)
   20802:	2200      	movs	r2, #0
   20804:	f020 fe40 	bl	41488 <z_impl_k_event_wait>
	if (!await_cloud_ready(K_SECONDS(CONFIG_CLOUD_READY_TIMEOUT_SECONDS), true)) {
   20808:	2804      	cmp	r0, #4
		LOG_INF("nRF Cloud failed to become ready. Resetting connection.");
   2080a:	f04f 0149 	mov.w	r1, #73	; 0x49
	if (!await_cloud_ready(K_SECONDS(CONFIG_CLOUD_READY_TIMEOUT_SECONDS), true)) {
   2080e:	d091      	beq.n	20734 <manage_connection+0x60>
		LOG_INF("nRF Cloud failed to become ready. Resetting connection.");
   20810:	4816      	ldr	r0, [pc, #88]	; (2086c <manage_connection+0x198>)
   20812:	f01c fa5c 	bl	3ccce <z_log_minimal_printk>
		reset_cloud();
   20816:	f7ff fdad 	bl	20374 <reset_cloud>
		return -ETIMEDOUT;
   2081a:	e788      	b.n	2072e <manage_connection+0x5a>
   2081c:	00043d86 	.word	0x00043d86
   20820:	00043dc7 	.word	0x00043dc7
   20824:	000203d1 	.word	0x000203d1
   20828:	00043ddb 	.word	0x00043ddb
   2082c:	00044016 	.word	0x00044016
   20830:	00043e66 	.word	0x00043e66
   20834:	00043e94 	.word	0x00043e94
   20838:	00043e0d 	.word	0x00043e0d
   2083c:	00020551 	.word	0x00020551
   20840:	00043e38 	.word	0x00043e38
   20844:	00043ecf 	.word	0x00043ecf
   20848:	00043ff2 	.word	0x00043ff2
   2084c:	00043f86 	.word	0x00043f86
   20850:	00043fa2 	.word	0x00043fa2
   20854:	00043fd1 	.word	0x00043fd1
   20858:	00043eb2 	.word	0x00043eb2
   2085c:	00020485 	.word	0x00020485
   20860:	00043f02 	.word	0x00043f02
   20864:	00043f2b 	.word	0x00043f2b
   20868:	200150f0 	.word	0x200150f0
   2086c:	00043f49 	.word	0x00043f49

00020870 <on_fota_downloaded>:

/* Called from nRF Cloud event handler in connection.c */
void on_fota_downloaded(void)
{
	/* Reboot on successful FOTA download. (Thus, enabling the new firmware!) */
	LOG_WRN("Rebooting...");
   20870:	4803      	ldr	r0, [pc, #12]	; (20880 <on_fota_downloaded+0x10>)
   20872:	2157      	movs	r1, #87	; 0x57
{
   20874:	b508      	push	{r3, lr}
	LOG_WRN("Rebooting...");
   20876:	f01c fa2a 	bl	3ccce <z_log_minimal_printk>
	LOG_PANIC();
	sys_reboot(SYS_REBOOT_COLD);
   2087a:	2001      	movs	r0, #1
   2087c:	f000 fede 	bl	2163c <sys_reboot>
   20880:	0004406f 	.word	0x0004406f

00020884 <location_event_handler>:
		}
	}
}

static void location_event_handler(const struct location_event_data *event_data)
{
   20884:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (event_data->id) {
   20886:	7803      	ldrb	r3, [r0, #0]
{
   20888:	4604      	mov	r4, r0
	switch (event_data->id) {
   2088a:	2b01      	cmp	r3, #1
{
   2088c:	b087      	sub	sp, #28
	switch (event_data->id) {
   2088e:	d10f      	bne.n	208b0 <location_event_handler+0x2c>
	case LOCATION_EVT_LOCATION:
		LOG_DBG("Location Event: Got location");
		if (location_update_handler) {
   20890:	4b08      	ldr	r3, [pc, #32]	; (208b4 <location_event_handler+0x30>)
   20892:	681f      	ldr	r7, [r3, #0]
   20894:	b167      	cbz	r7, 208b0 <location_event_handler+0x2c>
			/* Pass received location data along to our handler. */
			location_update_handler(event_data->location);
   20896:	466d      	mov	r5, sp
   20898:	f100 0618 	add.w	r6, r0, #24
   2089c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2089e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   208a0:	e896 0003 	ldmia.w	r6, {r0, r1}
   208a4:	e885 0003 	stmia.w	r5, {r0, r1}
   208a8:	f104 0008 	add.w	r0, r4, #8
   208ac:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   208ae:	47b8      	blx	r7

	default:
		LOG_DBG("Location Event: Unknown event");
		break;
	}
}
   208b0:	b007      	add	sp, #28
   208b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   208b4:	2001909c 	.word	0x2001909c

000208b8 <gnss_antenna_configure>:
{
   208b8:	b508      	push	{r3, lr}
	if (ret != 0) {
   208ba:	b9c8      	cbnz	r0, 208f0 <gnss_antenna_configure+0x38>
	if (strlen(CONFIG_GNSS_AT_MAGPIO) > 0) {
   208bc:	480d      	ldr	r0, [pc, #52]	; (208f4 <gnss_antenna_configure+0x3c>)
   208be:	f7fc fcc0 	bl	1d242 <strlen>
   208c2:	b138      	cbz	r0, 208d4 <gnss_antenna_configure+0x1c>
		err = nrf_modem_at_printf("%s", CONFIG_GNSS_AT_MAGPIO);
   208c4:	490b      	ldr	r1, [pc, #44]	; (208f4 <gnss_antenna_configure+0x3c>)
   208c6:	480c      	ldr	r0, [pc, #48]	; (208f8 <gnss_antenna_configure+0x40>)
   208c8:	f014 fc3a 	bl	35140 <nrf_modem_at_printf>
		if (err) {
   208cc:	b110      	cbz	r0, 208d4 <gnss_antenna_configure+0x1c>
			printk("Failed to set MAGPIO configuration\n");
   208ce:	480b      	ldr	r0, [pc, #44]	; (208fc <gnss_antenna_configure+0x44>)
   208d0:	f01b ffe0 	bl	3c894 <printk>
	if (strlen(CONFIG_GNSS_AT_COEX0) > 0) {
   208d4:	480a      	ldr	r0, [pc, #40]	; (20900 <gnss_antenna_configure+0x48>)
   208d6:	f7fc fcb4 	bl	1d242 <strlen>
   208da:	b148      	cbz	r0, 208f0 <gnss_antenna_configure+0x38>
		err = nrf_modem_at_printf("%s", CONFIG_GNSS_AT_COEX0);
   208dc:	4908      	ldr	r1, [pc, #32]	; (20900 <gnss_antenna_configure+0x48>)
   208de:	4806      	ldr	r0, [pc, #24]	; (208f8 <gnss_antenna_configure+0x40>)
   208e0:	f014 fc2e 	bl	35140 <nrf_modem_at_printf>
		if (err) {
   208e4:	b120      	cbz	r0, 208f0 <gnss_antenna_configure+0x38>
}
   208e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			printk("Failed to set COEX0 configuration\n");
   208ea:	4806      	ldr	r0, [pc, #24]	; (20904 <gnss_antenna_configure+0x4c>)
   208ec:	f01b bfd2 	b.w	3c894 <printk>
}
   208f0:	bd08      	pop	{r3, pc}
   208f2:	bf00      	nop
   208f4:	0004408e 	.word	0x0004408e
   208f8:	0004a4db 	.word	0x0004a4db
   208fc:	00047c9e 	.word	0x00047c9e
   20900:	000440ad 	.word	0x000440ad
   20904:	00047cc6 	.word	0x00047cc6

00020908 <location_assistance_data_handler>:
{
   20908:	b538      	push	{r3, r4, r5, lr}
   2090a:	4604      	mov	r4, r0
   2090c:	460d      	mov	r5, r1
		err = nrf_cloud_agps_process(buf, len);
   2090e:	f00c f9bb 	bl	2cc88 <nrf_cloud_agps_process>
		if (err) {
   20912:	4602      	mov	r2, r0
   20914:	b1b0      	cbz	r0, 20944 <location_assistance_data_handler+0x3c>
			if (err != -EBADMSG) {
   20916:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   2091a:	d003      	beq.n	20924 <location_assistance_data_handler+0x1c>
				LOG_WRN("Unable to process A-GPS data, error: %d", err);
   2091c:	2157      	movs	r1, #87	; 0x57
   2091e:	480a      	ldr	r0, [pc, #40]	; (20948 <location_assistance_data_handler+0x40>)
   20920:	f01c f9d5 	bl	3ccce <z_log_minimal_printk>
		err = nrf_cloud_pgps_process(buf, len);
   20924:	4629      	mov	r1, r5
   20926:	4620      	mov	r0, r4
   20928:	f00d fe2a 	bl	2e580 <nrf_cloud_pgps_process>
		if (err) {
   2092c:	4602      	mov	r2, r0
   2092e:	b148      	cbz	r0, 20944 <location_assistance_data_handler+0x3c>
			if (err != -EBADMSG && err != -EFTYPE) {
   20930:	f020 0302 	bic.w	r3, r0, #2
   20934:	334f      	adds	r3, #79	; 0x4f
   20936:	d005      	beq.n	20944 <location_assistance_data_handler+0x3c>
}
   20938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				LOG_WRN("Unable to process P-GPS data, error: %d", err);
   2093c:	2157      	movs	r1, #87	; 0x57
   2093e:	4803      	ldr	r0, [pc, #12]	; (2094c <location_assistance_data_handler+0x44>)
   20940:	f01c b9c5 	b.w	3ccce <z_log_minimal_printk>
}
   20944:	bd38      	pop	{r3, r4, r5, pc}
   20946:	bf00      	nop
   20948:	000440c5 	.word	0x000440c5
   2094c:	000440f2 	.word	0x000440f2

00020950 <start_location_tracking>:

int start_location_tracking(location_update_cb_t handler_cb, int interval)
{
   20950:	b530      	push	{r4, r5, lr}
   20952:	b08b      	sub	sp, #44	; 0x2c
   20954:	4604      	mov	r4, r0
   20956:	460d      	mov	r5, r1
	int err;

	if (!date_time_is_valid()) {
   20958:	f01e ff0a 	bl	3f770 <date_time_is_valid>
   2095c:	b918      	cbnz	r0, 20966 <start_location_tracking+0x16>
		LOG_WRN("Date and time unknown. Location Services results may suffer");
   2095e:	2157      	movs	r1, #87	; 0x57
   20960:	4816      	ldr	r0, [pc, #88]	; (209bc <start_location_tracking+0x6c>)
   20962:	f01c f9b4 	bl	3ccce <z_log_minimal_printk>
	}

	/* Update the location update handler. */
	location_update_handler = handler_cb;
   20966:	4b16      	ldr	r3, [pc, #88]	; (209c0 <start_location_tracking+0x70>)

	/* Initialize the Location Services Library. */
	err = location_init(location_event_handler);
   20968:	4816      	ldr	r0, [pc, #88]	; (209c4 <start_location_tracking+0x74>)
	location_update_handler = handler_cb;
   2096a:	601c      	str	r4, [r3, #0]
	err = location_init(location_event_handler);
   2096c:	f008 fd62 	bl	29434 <location_init>
	if (err) {
   20970:	4604      	mov	r4, r0
   20972:	b138      	cbz	r0, 20984 <start_location_tracking+0x34>
		LOG_ERR("Initializing the Location library failed, error: %d", err);
   20974:	2145      	movs	r1, #69	; 0x45
   20976:	4602      	mov	r2, r0
   20978:	4813      	ldr	r0, [pc, #76]	; (209c8 <start_location_tracking+0x78>)
	 * This will cause the configured location_event_handler to start being called with
	 * location data.
	 */
	err = location_request(&config);
	if (err) {
		LOG_ERR("Requesting location failed, error: %d\n", err);
   2097a:	f01c f9a8 	bl	3ccce <z_log_minimal_printk>
		return err;
	}
	return 0;
}
   2097e:	4620      	mov	r0, r4
   20980:	b00b      	add	sp, #44	; 0x2c
   20982:	bd30      	pop	{r4, r5, pc}
		enum location_method methods[] = {LOCATION_METHOD_GNSS, LOCATION_METHOD_CELLULAR};
   20984:	4b11      	ldr	r3, [pc, #68]	; (209cc <start_location_tracking+0x7c>)
		location_config_defaults_set(&config, ARRAY_SIZE(methods), methods);
   20986:	2102      	movs	r1, #2
		enum location_method methods[] = {LOCATION_METHOD_GNSS, LOCATION_METHOD_CELLULAR};
   20988:	881b      	ldrh	r3, [r3, #0]
		location_config_defaults_set(&config, ARRAY_SIZE(methods), methods);
   2098a:	aa01      	add	r2, sp, #4
   2098c:	a802      	add	r0, sp, #8
		enum location_method methods[] = {LOCATION_METHOD_GNSS, LOCATION_METHOD_CELLULAR};
   2098e:	f8ad 3004 	strh.w	r3, [sp, #4]
		location_config_defaults_set(&config, ARRAY_SIZE(methods), methods);
   20992:	f008 fd5f 	bl	29454 <location_config_defaults_set>
		config.methods[0].gnss.timeout = CONFIG_GNSS_FIX_TIMEOUT_SECONDS;
   20996:	2328      	movs	r3, #40	; 0x28
   20998:	f8ad 300c 	strh.w	r3, [sp, #12]
		config.methods[0].gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   2099c:	2301      	movs	r3, #1
	err = location_request(&config);
   2099e:	a802      	add	r0, sp, #8
	config.interval = interval;
   209a0:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
		config.methods[0].gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   209a4:	f88d 300e 	strb.w	r3, [sp, #14]
	err = location_request(&config);
   209a8:	f008 fd88 	bl	294bc <location_request>
	if (err) {
   209ac:	4604      	mov	r4, r0
   209ae:	2800      	cmp	r0, #0
   209b0:	d0e5      	beq.n	2097e <start_location_tracking+0x2e>
		LOG_ERR("Requesting location failed, error: %d\n", err);
   209b2:	4602      	mov	r2, r0
   209b4:	2145      	movs	r1, #69	; 0x45
   209b6:	4806      	ldr	r0, [pc, #24]	; (209d0 <start_location_tracking+0x80>)
   209b8:	e7df      	b.n	2097a <start_location_tracking+0x2a>
   209ba:	bf00      	nop
   209bc:	0004411f 	.word	0x0004411f
   209c0:	2001909c 	.word	0x2001909c
   209c4:	00020885 	.word	0x00020885
   209c8:	00044160 	.word	0x00044160
   209cc:	00042a30 	.word	0x00042a30
   209d0:	00044199 	.word	0x00044199

000209d4 <sht40_read>:
#include <stdio.h>

#include "sht40.h"

bool sht40_read(const struct device *dev_i2c, sht40_data *data)
{
   209d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   209d6:	ed2d 8b02 	vpush	{d8}
    int ret;
    uint8_t sht40_buffer[6] = {0};
   209da:	2300      	movs	r3, #0
{
   209dc:	b087      	sub	sp, #28
    uint8_t sht40_buffer[6] = {0};
   209de:	9301      	str	r3, [sp, #4]
   209e0:	f8ad 3008 	strh.w	r3, [sp, #8]
	float t_ticks, rh_ticks = 0;
    uint8_t test[1] = {0xFD};
   209e4:	23fd      	movs	r3, #253	; 0xfd
			    uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = (uint8_t *)buf;
	msg.len = num_bytes;
   209e6:	2501      	movs	r5, #1
   209e8:	f88d 3000 	strb.w	r3, [sp]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   209ec:	2302      	movs	r3, #2
{
   209ee:	4604      	mov	r4, r0
   209f0:	460e      	mov	r6, r1
	msg.buf = (uint8_t *)buf;
   209f2:	f8cd d00c 	str.w	sp, [sp, #12]
	msg.len = num_bytes;
   209f6:	9504      	str	r5, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   209f8:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   209fc:	6883      	ldr	r3, [r0, #8]
   209fe:	a903      	add	r1, sp, #12
   20a00:	689f      	ldr	r7, [r3, #8]
   20a02:	462a      	mov	r2, r5
   20a04:	2344      	movs	r3, #68	; 0x44
   20a06:	47b8      	blx	r7

    ret = i2c_write(dev_i2c, test, 1, SHT40_ADDR);
    if (ret != 0)
   20a08:	4601      	mov	r1, r0
   20a0a:	b138      	cbz	r0, 20a1c <sht40_read+0x48>
    {
    	printf("Failed to write I2C device address (err %i)\n", ret);
   20a0c:	482b      	ldr	r0, [pc, #172]	; (20abc <sht40_read+0xe8>)
    k_msleep(10);

    ret = i2c_read(dev_i2c, sht40_buffer, 6, SHT40_ADDR);
    if (ret != 0)
    {
    	printf("Failed to read I2C device address (err %i)\n", ret);
   20a0e:	f019 fea5 	bl	3a75c <iprintf>
    	return true;
   20a12:	4628      	mov	r0, r5

    data->temperature = -45 + 175 * t_ticks / 65535;
    data->humidity = -6 + 125 * rh_ticks / 65535;

    return false;
}
   20a14:	b007      	add	sp, #28
   20a16:	ecbd 8b02 	vpop	{d8}
   20a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sleep(timeout);
   20a1c:	2100      	movs	r1, #0
   20a1e:	f44f 70a4 	mov.w	r0, #328	; 0x148
   20a22:	f017 fe81 	bl	38728 <z_impl_k_sleep>
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
   20a26:	ab01      	add	r3, sp, #4
   20a28:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   20a2a:	2306      	movs	r3, #6
   20a2c:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   20a2e:	2303      	movs	r3, #3
   20a30:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   20a34:	68a3      	ldr	r3, [r4, #8]
   20a36:	4620      	mov	r0, r4
   20a38:	689f      	ldr	r7, [r3, #8]
   20a3a:	462a      	mov	r2, r5
   20a3c:	2344      	movs	r3, #68	; 0x44
   20a3e:	a903      	add	r1, sp, #12
   20a40:	47b8      	blx	r7
    if (ret != 0)
   20a42:	4604      	mov	r4, r0
   20a44:	b110      	cbz	r0, 20a4c <sht40_read+0x78>
    	printf("Failed to read I2C device address (err %i)\n", ret);
   20a46:	4601      	mov	r1, r0
   20a48:	481d      	ldr	r0, [pc, #116]	; (20ac0 <sht40_read+0xec>)
   20a4a:	e7e0      	b.n	20a0e <sht40_read+0x3a>
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
   20a4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   20a50:	f89d 3008 	ldrb.w	r3, [sp, #8]
    data->temperature = -45 + 175 * t_ticks / 65535;
   20a54:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 20ac4 <sht40_read+0xf0>
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
   20a58:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   20a5c:	ee07 3a90 	vmov	s15, r3
    t_ticks = (uint16_t)sht40_buffer[0] * 256 + (uint16_t)sht40_buffer[1];
   20a60:	f89d 2004 	ldrb.w	r2, [sp, #4]
   20a64:	f89d 3005 	ldrb.w	r3, [sp, #5]
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
   20a68:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    t_ticks = (uint16_t)sht40_buffer[0] * 256 + (uint16_t)sht40_buffer[1];
   20a6c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   20a70:	ee07 3a90 	vmov	s15, r3
   20a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    data->temperature = -45 + 175 * t_ticks / 65535;
   20a78:	eddf 8a13 	vldr	s17, [pc, #76]	; 20ac8 <sht40_read+0xf4>
   20a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
   20a80:	ee87 7aa8 	vdiv.f32	s14, s15, s17
   20a84:	eddf 7a11 	vldr	s15, [pc, #68]	; 20acc <sht40_read+0xf8>
   20a88:	ee77 7a67 	vsub.f32	s15, s14, s15
   20a8c:	ee17 0a90 	vmov	r0, s15
   20a90:	f7fb fe3a 	bl	1c708 <__aeabi_f2d>
    data->humidity = -6 + 125 * rh_ticks / 65535;
   20a94:	eddf 7a0e 	vldr	s15, [pc, #56]	; 20ad0 <sht40_read+0xfc>
   20a98:	ee68 7a27 	vmul.f32	s15, s16, s15
   20a9c:	ee87 7aa8 	vdiv.f32	s14, s15, s17
   20aa0:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   20aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
    data->temperature = -45 + 175 * t_ticks / 65535;
   20aa8:	e9c6 0100 	strd	r0, r1, [r6]
    data->humidity = -6 + 125 * rh_ticks / 65535;
   20aac:	ee17 0a90 	vmov	r0, s15
   20ab0:	f7fb fe2a 	bl	1c708 <__aeabi_f2d>
   20ab4:	e9c6 0102 	strd	r0, r1, [r6, #8]
    return false;
   20ab8:	4620      	mov	r0, r4
   20aba:	e7ab      	b.n	20a14 <sht40_read+0x40>
   20abc:	000441d7 	.word	0x000441d7
   20ac0:	00044204 	.word	0x00044204
   20ac4:	432f0000 	.word	0x432f0000
   20ac8:	477fff00 	.word	0x477fff00
   20acc:	42340000 	.word	0x42340000
   20ad0:	42fa0000 	.word	0x42fa0000

00020ad4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   20ad4:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   20ad6:	4c0a      	ldr	r4, [pc, #40]	; (20b00 <crc8_ccitt+0x2c>)
   20ad8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   20ada:	4291      	cmp	r1, r2
   20adc:	d100      	bne.n	20ae0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   20ade:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   20ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
   20ae4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   20ae6:	0903      	lsrs	r3, r0, #4
   20ae8:	5ce3      	ldrb	r3, [r4, r3]
   20aea:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   20aee:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   20af0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   20af4:	5ce0      	ldrb	r0, [r4, r3]
   20af6:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   20afa:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   20afc:	e7ed      	b.n	20ada <crc8_ccitt+0x6>
   20afe:	bf00      	nop
   20b00:	00044230 	.word	0x00044230

00020b04 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   20b04:	2803      	cmp	r0, #3
{
   20b06:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   20b08:	d906      	bls.n	20b18 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   20b0a:	f01c ff1f 	bl	3d94c <__errno>
   20b0e:	2309      	movs	r3, #9
   20b10:	6003      	str	r3, [r0, #0]
   20b12:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   20b16:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20b18:	4b04      	ldr	r3, [pc, #16]	; (20b2c <_check_fd+0x28>)
   20b1a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   20b1e:	3008      	adds	r0, #8
   20b20:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   20b24:	2b00      	cmp	r3, #0
   20b26:	d0f0      	beq.n	20b0a <_check_fd+0x6>
	return 0;
   20b28:	2000      	movs	r0, #0
   20b2a:	e7f4      	b.n	20b16 <_check_fd+0x12>
   20b2c:	200190a0 	.word	0x200190a0

00020b30 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   20b30:	b570      	push	{r4, r5, r6, lr}
   20b32:	4604      	mov	r4, r0
   20b34:	460d      	mov	r5, r1
   20b36:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   20b38:	f7ff ffe4 	bl	20b04 <_check_fd>
   20b3c:	2800      	cmp	r0, #0
   20b3e:	db09      	blt.n	20b54 <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   20b40:	4b06      	ldr	r3, [pc, #24]	; (20b5c <z_get_fd_obj+0x2c>)
   20b42:	0160      	lsls	r0, r4, #5
   20b44:	b145      	cbz	r5, 20b58 <z_get_fd_obj+0x28>
   20b46:	181a      	adds	r2, r3, r0
   20b48:	6852      	ldr	r2, [r2, #4]
   20b4a:	42aa      	cmp	r2, r5
   20b4c:	d004      	beq.n	20b58 <z_get_fd_obj+0x28>
		errno = err;
   20b4e:	f01c fefd 	bl	3d94c <__errno>
   20b52:	6006      	str	r6, [r0, #0]
		return NULL;
   20b54:	2000      	movs	r0, #0
   20b56:	e000      	b.n	20b5a <z_get_fd_obj+0x2a>
		return NULL;
	}

	return entry->obj;
   20b58:	5818      	ldr	r0, [r3, r0]
}
   20b5a:	bd70      	pop	{r4, r5, r6, pc}
   20b5c:	200190a0 	.word	0x200190a0

00020b60 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   20b60:	b570      	push	{r4, r5, r6, lr}
   20b62:	4604      	mov	r4, r0
   20b64:	460e      	mov	r6, r1
   20b66:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   20b68:	f7ff ffcc 	bl	20b04 <_check_fd>
   20b6c:	2800      	cmp	r0, #0
   20b6e:	db0c      	blt.n	20b8a <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   20b70:	4b07      	ldr	r3, [pc, #28]	; (20b90 <z_get_fd_obj_and_vtable+0x30>)
   20b72:	0161      	lsls	r1, r4, #5
   20b74:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   20b78:	6862      	ldr	r2, [r4, #4]
   20b7a:	6032      	str	r2, [r6, #0]

	if (lock) {
   20b7c:	b11d      	cbz	r5, 20b86 <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   20b7e:	f101 020c 	add.w	r2, r1, #12
   20b82:	441a      	add	r2, r3
   20b84:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   20b86:	5858      	ldr	r0, [r3, r1]
}
   20b88:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   20b8a:	2000      	movs	r0, #0
   20b8c:	e7fc      	b.n	20b88 <z_get_fd_obj_and_vtable+0x28>
   20b8e:	bf00      	nop
   20b90:	200190a0 	.word	0x200190a0

00020b94 <z_reserve_fd>:

int z_reserve_fd(void)
{
   20b94:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   20b96:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   20b98:	f04f 32ff 	mov.w	r2, #4294967295
   20b9c:	f04f 33ff 	mov.w	r3, #4294967295
   20ba0:	4814      	ldr	r0, [pc, #80]	; (20bf4 <z_reserve_fd+0x60>)
   20ba2:	f015 ff23 	bl	369ec <z_impl_k_mutex_lock>
   20ba6:	4a14      	ldr	r2, [pc, #80]	; (20bf8 <z_reserve_fd+0x64>)
		if (!atomic_get(&fdtable[fd].refcount)) {
   20ba8:	0163      	lsls	r3, r4, #5
   20baa:	e8d2 1faf 	lda	r1, [r2]
   20bae:	b179      	cbz	r1, 20bd0 <z_reserve_fd+0x3c>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   20bb0:	3401      	adds	r4, #1
   20bb2:	2c04      	cmp	r4, #4
   20bb4:	f102 0220 	add.w	r2, r2, #32
   20bb8:	d1f6      	bne.n	20ba8 <z_reserve_fd+0x14>
	errno = ENFILE;
   20bba:	f01c fec7 	bl	3d94c <__errno>
   20bbe:	2317      	movs	r3, #23
	return -1;
   20bc0:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   20bc4:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   20bc6:	480b      	ldr	r0, [pc, #44]	; (20bf4 <z_reserve_fd+0x60>)
   20bc8:	f015 ffe2 	bl	36b90 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   20bcc:	4620      	mov	r0, r4
   20bce:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20bd0:	e8d2 0fef 	ldaex	r0, [r2]
   20bd4:	3001      	adds	r0, #1
   20bd6:	e8c2 0fec 	stlex	ip, r0, [r2]
   20bda:	f1bc 0f00 	cmp.w	ip, #0
   20bde:	d1f7      	bne.n	20bd0 <z_reserve_fd+0x3c>
		fdtable[fd].obj = NULL;
   20be0:	4806      	ldr	r0, [pc, #24]	; (20bfc <z_reserve_fd+0x68>)
   20be2:	18c2      	adds	r2, r0, r3
   20be4:	50c1      	str	r1, [r0, r3]
		fdtable[fd].vtable = NULL;
   20be6:	6051      	str	r1, [r2, #4]
		k_mutex_init(&fdtable[fd].lock);
   20be8:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   20bea:	4418      	add	r0, r3
   20bec:	f020 fabf 	bl	4116e <z_impl_k_mutex_init>
   20bf0:	e7e9      	b.n	20bc6 <z_reserve_fd+0x32>
   20bf2:	bf00      	nop
   20bf4:	20014f18 	.word	0x20014f18
   20bf8:	200190a8 	.word	0x200190a8
   20bfc:	200190a0 	.word	0x200190a0

00020c00 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   20c00:	b410      	push	{r4}
   20c02:	4604      	mov	r4, r0
   20c04:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   20c06:	4b0a      	ldr	r3, [pc, #40]	; (20c30 <z_finalize_fd+0x30>)
   20c08:	0162      	lsls	r2, r4, #5
   20c0a:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   20c0e:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   20c10:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   20c12:	b148      	cbz	r0, 20c28 <z_finalize_fd+0x28>
   20c14:	68c4      	ldr	r4, [r0, #12]
   20c16:	b13c      	cbz	r4, 20c28 <z_finalize_fd+0x28>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   20c18:	320c      	adds	r2, #12
   20c1a:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   20c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   20c20:	f240 1205 	movw	r2, #261	; 0x105
   20c24:	f01b bdae 	b.w	3c784 <z_fdtable_call_ioctl.constprop.0>
}
   20c28:	f85d 4b04 	ldr.w	r4, [sp], #4
   20c2c:	4770      	bx	lr
   20c2e:	bf00      	nop
   20c30:	200190a0 	.word	0x200190a0

00020c34 <z_free_fd>:

void z_free_fd(int fd)
{
   20c34:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   20c36:	490d      	ldr	r1, [pc, #52]	; (20c6c <z_free_fd+0x38>)
   20c38:	0140      	lsls	r0, r0, #5
   20c3a:	f100 0308 	add.w	r3, r0, #8
   20c3e:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20c40:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   20c44:	b182      	cbz	r2, 20c68 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   20c46:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20c48:	e8d3 5fef 	ldaex	r5, [r3]
   20c4c:	4295      	cmp	r5, r2
   20c4e:	d104      	bne.n	20c5a <z_free_fd+0x26>
   20c50:	e8c3 4fec 	stlex	ip, r4, [r3]
   20c54:	f1bc 0f00 	cmp.w	ip, #0
   20c58:	d1f6      	bne.n	20c48 <z_free_fd+0x14>
   20c5a:	d1f1      	bne.n	20c40 <z_free_fd+0xc>
	if (old_rc != 1) {
   20c5c:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   20c5e:	bf01      	itttt	eq
   20c60:	2300      	moveq	r3, #0
   20c62:	180a      	addeq	r2, r1, r0
   20c64:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   20c66:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   20c68:	bd30      	pop	{r4, r5, pc}
   20c6a:	bf00      	nop
   20c6c:	200190a0 	.word	0x200190a0

00020c70 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   20c70:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   20c72:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   20c74:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   20c78:	2b02      	cmp	r3, #2
{
   20c7a:	4604      	mov	r4, r0
   20c7c:	460e      	mov	r6, r1
	notify->result = res;
   20c7e:	6081      	str	r1, [r0, #8]
	switch (method) {
   20c80:	d010      	beq.n	20ca4 <sys_notify_finalize+0x34>
   20c82:	2b03      	cmp	r3, #3
   20c84:	d004      	beq.n	20c90 <sys_notify_finalize+0x20>
   20c86:	2b01      	cmp	r3, #1
   20c88:	d10f      	bne.n	20caa <sys_notify_finalize+0x3a>
   20c8a:	2500      	movs	r5, #0
   20c8c:	4628      	mov	r0, r5
   20c8e:	e001      	b.n	20c94 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   20c90:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   20c92:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   20c94:	2300      	movs	r3, #0
   20c96:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   20c98:	b110      	cbz	r0, 20ca0 <sys_notify_finalize+0x30>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   20c9a:	4631      	mov	r1, r6
   20c9c:	f018 fd18 	bl	396d0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   20ca0:	4628      	mov	r0, r5
   20ca2:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = NULL;
   20ca4:	2500      	movs	r5, #0
		sig = notify->method.signal;
   20ca6:	6800      	ldr	r0, [r0, #0]
		break;
   20ca8:	e7f4      	b.n	20c94 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   20caa:	2245      	movs	r2, #69	; 0x45
   20cac:	4904      	ldr	r1, [pc, #16]	; (20cc0 <sys_notify_finalize+0x50>)
   20cae:	4805      	ldr	r0, [pc, #20]	; (20cc4 <sys_notify_finalize+0x54>)
   20cb0:	f01b ffd3 	bl	3cc5a <assert_print>
   20cb4:	2145      	movs	r1, #69	; 0x45
   20cb6:	4802      	ldr	r0, [pc, #8]	; (20cc0 <sys_notify_finalize+0x50>)
   20cb8:	f01b ffc8 	bl	3cc4c <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   20cbc:	2500      	movs	r5, #0
   20cbe:	e7e8      	b.n	20c92 <sys_notify_finalize+0x22>
   20cc0:	00044240 	.word	0x00044240
   20cc4:	00044263 	.word	0x00044263

00020cc8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   20cc8:	680b      	ldr	r3, [r1, #0]
   20cca:	3301      	adds	r3, #1
   20ccc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   20cce:	4b01      	ldr	r3, [pc, #4]	; (20cd4 <char_out+0xc>)
   20cd0:	681b      	ldr	r3, [r3, #0]
   20cd2:	4718      	bx	r3
   20cd4:	200145c8 	.word	0x200145c8

00020cd8 <__printk_hook_install>:
	_char_out = fn;
   20cd8:	4b01      	ldr	r3, [pc, #4]	; (20ce0 <__printk_hook_install+0x8>)
   20cda:	6018      	str	r0, [r3, #0]
}
   20cdc:	4770      	bx	lr
   20cde:	bf00      	nop
   20ce0:	200145c8 	.word	0x200145c8

00020ce4 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   20ce4:	b507      	push	{r0, r1, r2, lr}
   20ce6:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   20ce8:	2100      	movs	r1, #0
{
   20cea:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   20cec:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   20cee:	4803      	ldr	r0, [pc, #12]	; (20cfc <vprintk+0x18>)
   20cf0:	a901      	add	r1, sp, #4
   20cf2:	f7fc fab1 	bl	1d258 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   20cf6:	b003      	add	sp, #12
   20cf8:	f85d fb04 	ldr.w	pc, [sp], #4
   20cfc:	00020cc9 	.word	0x00020cc9

00020d00 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   20d00:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   20d02:	2500      	movs	r5, #0
{
   20d04:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   20d06:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   20d0a:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   20d0c:	a901      	add	r1, sp, #4
   20d0e:	4805      	ldr	r0, [pc, #20]	; (20d24 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   20d10:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   20d12:	f7fc faa1 	bl	1d258 <cbvprintf>

	if (ctx.count < ctx.max) {
   20d16:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   20d1a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   20d1c:	bfb8      	it	lt
   20d1e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   20d20:	b005      	add	sp, #20
   20d22:	bd30      	pop	{r4, r5, pc}
   20d24:	0003c86f 	.word	0x0003c86f

00020d28 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   20d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d2c:	ed2d 8b02 	vpush	{d8}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20d30:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   20d34:	b083      	sub	sp, #12
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   20d36:	f019 0f08 	tst.w	r9, #8
{
   20d3a:	4604      	mov	r4, r0
   20d3c:	9201      	str	r2, [sp, #4]
	if (processing) {
   20d3e:	d01f      	beq.n	20d80 <process_event+0x58>
		if (evt == EVT_COMPLETE) {
   20d40:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   20d42:	bf0c      	ite	eq
   20d44:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   20d48:	f049 0920 	orrne.w	r9, r9, #32
   20d4c:	f8a0 901c 	strh.w	r9, [r0, #28]
   20d50:	f104 0014 	add.w	r0, r4, #20
   20d54:	f015 fcde 	bl	36714 <z_spin_unlock_valid>
   20d58:	b940      	cbnz	r0, 20d6c <process_event+0x44>
   20d5a:	499b      	ldr	r1, [pc, #620]	; (20fc8 <process_event+0x2a0>)
   20d5c:	489b      	ldr	r0, [pc, #620]	; (20fcc <process_event+0x2a4>)
   20d5e:	22b9      	movs	r2, #185	; 0xb9
   20d60:	f01b ff7b 	bl	3cc5a <assert_print>
   20d64:	21b9      	movs	r1, #185	; 0xb9
   20d66:	4898      	ldr	r0, [pc, #608]	; (20fc8 <process_event+0x2a0>)
   20d68:	f01b ff70 	bl	3cc4c <assert_post_action>
   20d6c:	9b01      	ldr	r3, [sp, #4]
   20d6e:	f383 8811 	msr	BASEPRI, r3
   20d72:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   20d76:	b003      	add	sp, #12
   20d78:	ecbd 8b02 	vpop	{d8}
   20d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   20d80:	4f93      	ldr	r7, [pc, #588]	; (20fd0 <process_event+0x2a8>)
   20d82:	f8df 8248 	ldr.w	r8, [pc, #584]	; 20fcc <process_event+0x2a4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20d86:	f8df a240 	ldr.w	sl, [pc, #576]	; 20fc8 <process_event+0x2a0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20d8a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   20d8e:	2902      	cmp	r1, #2
   20d90:	d106      	bne.n	20da0 <process_event+0x78>
			evt = process_recheck(mgr);
   20d92:	4620      	mov	r0, r4
   20d94:	f01b fd98 	bl	3c8c8 <process_recheck>
		if (evt == EVT_NOP) {
   20d98:	2800      	cmp	r0, #0
   20d9a:	d0d9      	beq.n	20d50 <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   20d9c:	2801      	cmp	r0, #1
   20d9e:	d167      	bne.n	20e70 <process_event+0x148>
			res = mgr->last_res;
   20da0:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20da4:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   20da6:	f1bb 0f00 	cmp.w	fp, #0
   20daa:	da1c      	bge.n	20de6 <process_event+0xbe>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   20dac:	2600      	movs	r6, #0
		*clients = mgr->clients;
   20dae:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20db0:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   20db4:	e9c4 6600 	strd	r6, r6, [r4]
   20db8:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   20dbc:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   20dbe:	9600      	str	r6, [sp, #0]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   20dc0:	8ba3      	ldrh	r3, [r4, #28]
   20dc2:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   20dc6:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   20dc8:	ee08 2a10 	vmov	s16, r2
				   && !sys_slist_is_empty(&mgr->monitors);
   20dcc:	d003      	beq.n	20dd6 <process_event+0xae>
		if (do_monitors
   20dce:	68a2      	ldr	r2, [r4, #8]
   20dd0:	2a00      	cmp	r2, #0
   20dd2:	f040 80ff 	bne.w	20fd4 <process_event+0x2ac>
		    || !sys_slist_is_empty(&clients)
   20dd6:	b91d      	cbnz	r5, 20de0 <process_event+0xb8>
		    || (transit != NULL)) {
   20dd8:	9a00      	ldr	r2, [sp, #0]
   20dda:	2a00      	cmp	r2, #0
   20ddc:	f000 813f 	beq.w	2105e <process_event+0x336>
   20de0:	f04f 0900 	mov.w	r9, #0
   20de4:	e0f8      	b.n	20fd8 <process_event+0x2b0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20de6:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   20dea:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   20dec:	2901      	cmp	r1, #1
   20dee:	d821      	bhi.n	20e34 <process_event+0x10c>
	list->head = NULL;
   20df0:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20df2:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   20df6:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   20df8:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20dfa:	b29b      	uxth	r3, r3
	list->tail = NULL;
   20dfc:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   20e00:	d10a      	bne.n	20e18 <process_event+0xf0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   20e02:	b13d      	cbz	r5, 20e14 <process_event+0xec>
   20e04:	4629      	mov	r1, r5
   20e06:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   20e08:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
   20e0a:	3201      	adds	r2, #1
   20e0c:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   20e0e:	2900      	cmp	r1, #0
   20e10:	d1fa      	bne.n	20e08 <process_event+0xe0>
   20e12:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20e14:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   20e18:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   20e1a:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   20e1c:	f01b fd54 	bl	3c8c8 <process_recheck>
   20e20:	2800      	cmp	r0, #0
   20e22:	f000 80cc 	beq.w	20fbe <process_event+0x296>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   20e26:	8ba3      	ldrh	r3, [r4, #28]
   20e28:	f043 0320 	orr.w	r3, r3, #32
   20e2c:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   20e2e:	2300      	movs	r3, #0
   20e30:	9300      	str	r3, [sp, #0]
   20e32:	e7c5      	b.n	20dc0 <process_event+0x98>
	} else if (state == ONOFF_STATE_TO_OFF) {
   20e34:	2a04      	cmp	r2, #4
   20e36:	d10f      	bne.n	20e58 <process_event+0x130>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20e38:	f023 0307 	bic.w	r3, r3, #7
   20e3c:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   20e3e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   20e40:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   20e42:	f01b fd41 	bl	3c8c8 <process_recheck>
   20e46:	2800      	cmp	r0, #0
   20e48:	f000 80bb 	beq.w	20fc2 <process_event+0x29a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   20e4c:	f042 0220 	orr.w	r2, r2, #32
   20e50:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   20e52:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   20e54:	9500      	str	r5, [sp, #0]
   20e56:	e7b3      	b.n	20dc0 <process_event+0x98>
		__ASSERT_NO_MSG(false);
   20e58:	4639      	mov	r1, r7
   20e5a:	4640      	mov	r0, r8
   20e5c:	f240 121b 	movw	r2, #283	; 0x11b
   20e60:	f01b fefb 	bl	3cc5a <assert_print>
   20e64:	f240 111b 	movw	r1, #283	; 0x11b
   20e68:	4638      	mov	r0, r7
   20e6a:	f01b feef 	bl	3cc4c <assert_post_action>
   20e6e:	e7f0      	b.n	20e52 <process_event+0x12a>
		} else if (evt == EVT_START) {
   20e70:	2803      	cmp	r0, #3
   20e72:	d132      	bne.n	20eda <process_event+0x1b2>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   20e74:	f1b9 0f00 	cmp.w	r9, #0
   20e78:	d00a      	beq.n	20e90 <process_event+0x168>
   20e7a:	4639      	mov	r1, r7
   20e7c:	4640      	mov	r0, r8
   20e7e:	f44f 72ab 	mov.w	r2, #342	; 0x156
   20e82:	f01b feea 	bl	3cc5a <assert_print>
   20e86:	f44f 71ab 	mov.w	r1, #342	; 0x156
   20e8a:	4638      	mov	r0, r7
   20e8c:	f01b fede 	bl	3cc4c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   20e90:	6823      	ldr	r3, [r4, #0]
   20e92:	b953      	cbnz	r3, 20eaa <process_event+0x182>
   20e94:	4639      	mov	r1, r7
   20e96:	4640      	mov	r0, r8
   20e98:	f240 1257 	movw	r2, #343	; 0x157
   20e9c:	f01b fedd 	bl	3cc5a <assert_print>
   20ea0:	f240 1157 	movw	r1, #343	; 0x157
   20ea4:	4638      	mov	r0, r7
   20ea6:	f01b fed1 	bl	3cc4c <assert_post_action>
			transit = mgr->transitions->start;
   20eaa:	6923      	ldr	r3, [r4, #16]
   20eac:	681b      	ldr	r3, [r3, #0]
   20eae:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   20eb0:	b953      	cbnz	r3, 20ec8 <process_event+0x1a0>
   20eb2:	4639      	mov	r1, r7
   20eb4:	4640      	mov	r0, r8
   20eb6:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   20eba:	f01b fece 	bl	3cc5a <assert_print>
   20ebe:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   20ec2:	4638      	mov	r0, r7
   20ec4:	f01b fec2 	bl	3cc4c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20ec8:	8ba3      	ldrh	r3, [r4, #28]
   20eca:	f023 0307 	bic.w	r3, r3, #7
   20ece:	f043 0306 	orr.w	r3, r3, #6
}
   20ed2:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   20ed4:	83a3      	strh	r3, [r4, #28]
		res = 0;
   20ed6:	46ab      	mov	fp, r5
}
   20ed8:	e772      	b.n	20dc0 <process_event+0x98>
		} else if (evt == EVT_STOP) {
   20eda:	2804      	cmp	r0, #4
   20edc:	d12f      	bne.n	20f3e <process_event+0x216>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   20ede:	f1b9 0f02 	cmp.w	r9, #2
   20ee2:	d00a      	beq.n	20efa <process_event+0x1d2>
   20ee4:	4639      	mov	r1, r7
   20ee6:	4640      	mov	r0, r8
   20ee8:	f240 125d 	movw	r2, #349	; 0x15d
   20eec:	f01b feb5 	bl	3cc5a <assert_print>
   20ef0:	f240 115d 	movw	r1, #349	; 0x15d
   20ef4:	4638      	mov	r0, r7
   20ef6:	f01b fea9 	bl	3cc4c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   20efa:	8be3      	ldrh	r3, [r4, #30]
   20efc:	b153      	cbz	r3, 20f14 <process_event+0x1ec>
   20efe:	4639      	mov	r1, r7
   20f00:	4640      	mov	r0, r8
   20f02:	f44f 72af 	mov.w	r2, #350	; 0x15e
   20f06:	f01b fea8 	bl	3cc5a <assert_print>
   20f0a:	f44f 71af 	mov.w	r1, #350	; 0x15e
   20f0e:	4638      	mov	r0, r7
   20f10:	f01b fe9c 	bl	3cc4c <assert_post_action>
			transit = mgr->transitions->stop;
   20f14:	6923      	ldr	r3, [r4, #16]
   20f16:	685b      	ldr	r3, [r3, #4]
   20f18:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   20f1a:	b953      	cbnz	r3, 20f32 <process_event+0x20a>
   20f1c:	4639      	mov	r1, r7
   20f1e:	4640      	mov	r0, r8
   20f20:	f240 1261 	movw	r2, #353	; 0x161
   20f24:	f01b fe99 	bl	3cc5a <assert_print>
   20f28:	f240 1161 	movw	r1, #353	; 0x161
   20f2c:	4638      	mov	r0, r7
   20f2e:	f01b fe8d 	bl	3cc4c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20f32:	8ba3      	ldrh	r3, [r4, #28]
   20f34:	f023 0307 	bic.w	r3, r3, #7
   20f38:	f043 0304 	orr.w	r3, r3, #4
   20f3c:	e7c9      	b.n	20ed2 <process_event+0x1aa>
		} else if (evt == EVT_RESET) {
   20f3e:	2805      	cmp	r0, #5
   20f40:	d12f      	bne.n	20fa2 <process_event+0x27a>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   20f42:	f1b9 0f01 	cmp.w	r9, #1
   20f46:	d00a      	beq.n	20f5e <process_event+0x236>
   20f48:	4639      	mov	r1, r7
   20f4a:	4640      	mov	r0, r8
   20f4c:	f44f 72b2 	mov.w	r2, #356	; 0x164
   20f50:	f01b fe83 	bl	3cc5a <assert_print>
   20f54:	f44f 71b2 	mov.w	r1, #356	; 0x164
   20f58:	4638      	mov	r0, r7
   20f5a:	f01b fe77 	bl	3cc4c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   20f5e:	6823      	ldr	r3, [r4, #0]
   20f60:	b953      	cbnz	r3, 20f78 <process_event+0x250>
   20f62:	4639      	mov	r1, r7
   20f64:	4640      	mov	r0, r8
   20f66:	f240 1265 	movw	r2, #357	; 0x165
   20f6a:	f01b fe76 	bl	3cc5a <assert_print>
   20f6e:	f240 1165 	movw	r1, #357	; 0x165
   20f72:	4638      	mov	r0, r7
   20f74:	f01b fe6a 	bl	3cc4c <assert_post_action>
			transit = mgr->transitions->reset;
   20f78:	6923      	ldr	r3, [r4, #16]
   20f7a:	689b      	ldr	r3, [r3, #8]
   20f7c:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   20f7e:	b953      	cbnz	r3, 20f96 <process_event+0x26e>
   20f80:	4639      	mov	r1, r7
   20f82:	4640      	mov	r0, r8
   20f84:	f44f 72b4 	mov.w	r2, #360	; 0x168
   20f88:	f01b fe67 	bl	3cc5a <assert_print>
   20f8c:	f44f 71b4 	mov.w	r1, #360	; 0x168
   20f90:	4638      	mov	r0, r7
   20f92:	f01b fe5b 	bl	3cc4c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20f96:	8ba3      	ldrh	r3, [r4, #28]
   20f98:	f023 0307 	bic.w	r3, r3, #7
   20f9c:	f043 0305 	orr.w	r3, r3, #5
   20fa0:	e797      	b.n	20ed2 <process_event+0x1aa>
			__ASSERT_NO_MSG(false);
   20fa2:	2500      	movs	r5, #0
   20fa4:	f240 126b 	movw	r2, #363	; 0x16b
   20fa8:	4639      	mov	r1, r7
   20faa:	4640      	mov	r0, r8
   20fac:	f01b fe55 	bl	3cc5a <assert_print>
   20fb0:	f240 116b 	movw	r1, #363	; 0x16b
   20fb4:	4638      	mov	r0, r7
   20fb6:	f01b fe49 	bl	3cc4c <assert_post_action>
		onoff_transition_fn transit = NULL;
   20fba:	9500      	str	r5, [sp, #0]
   20fbc:	e78b      	b.n	20ed6 <process_event+0x1ae>
   20fbe:	9000      	str	r0, [sp, #0]
   20fc0:	e6fe      	b.n	20dc0 <process_event+0x98>
   20fc2:	4605      	mov	r5, r0
   20fc4:	e746      	b.n	20e54 <process_event+0x12c>
   20fc6:	bf00      	nop
   20fc8:	0004429d 	.word	0x0004429d
   20fcc:	00044263 	.word	0x00044263
   20fd0:	0004427b 	.word	0x0004427b
				   && !sys_slist_is_empty(&mgr->monitors);
   20fd4:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   20fd8:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   20fdc:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   20fde:	f104 0314 	add.w	r3, r4, #20
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20fe2:	4618      	mov	r0, r3
   20fe4:	ee08 3a90 	vmov	s17, r3
   20fe8:	f015 fb94 	bl	36714 <z_spin_unlock_valid>
   20fec:	b940      	cbnz	r0, 21000 <process_event+0x2d8>
   20fee:	4651      	mov	r1, sl
   20ff0:	4640      	mov	r0, r8
   20ff2:	22b9      	movs	r2, #185	; 0xb9
   20ff4:	f01b fe31 	bl	3cc5a <assert_print>
   20ff8:	21b9      	movs	r1, #185	; 0xb9
   20ffa:	4650      	mov	r0, sl
   20ffc:	f01b fe26 	bl	3cc4c <assert_post_action>
   21000:	9b01      	ldr	r3, [sp, #4]
   21002:	f383 8811 	msr	BASEPRI, r3
   21006:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   2100a:	f1b9 0f00 	cmp.w	r9, #0
   2100e:	d135      	bne.n	2107c <process_event+0x354>
	while (!sys_slist_is_empty(list)) {
   21010:	2d00      	cmp	r5, #0
   21012:	d146      	bne.n	210a2 <process_event+0x37a>
			if (transit != NULL) {
   21014:	9b00      	ldr	r3, [sp, #0]
   21016:	b113      	cbz	r3, 2101e <process_event+0x2f6>
				transit(mgr, transition_complete);
   21018:	4620      	mov	r0, r4
   2101a:	492a      	ldr	r1, [pc, #168]	; (210c4 <process_event+0x39c>)
   2101c:	4798      	blx	r3
	__asm__ volatile(
   2101e:	f04f 0320 	mov.w	r3, #32
   21022:	f3ef 8b11 	mrs	fp, BASEPRI
   21026:	f383 8812 	msr	BASEPRI_MAX, r3
   2102a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2102e:	ee18 0a90 	vmov	r0, s17
	k.key = arch_irq_lock();
   21032:	f8cd b004 	str.w	fp, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21036:	f015 fb5f 	bl	366f8 <z_spin_lock_valid>
   2103a:	b940      	cbnz	r0, 2104e <process_event+0x326>
   2103c:	4651      	mov	r1, sl
   2103e:	4640      	mov	r0, r8
   21040:	228e      	movs	r2, #142	; 0x8e
   21042:	f01b fe0a 	bl	3cc5a <assert_print>
   21046:	218e      	movs	r1, #142	; 0x8e
   21048:	4650      	mov	r0, sl
   2104a:	f01b fdff 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   2104e:	ee18 0a90 	vmov	r0, s17
   21052:	f015 fb6f 	bl	36734 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   21056:	8ba3      	ldrh	r3, [r4, #28]
   21058:	f023 0308 	bic.w	r3, r3, #8
   2105c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   2105e:	8ba3      	ldrh	r3, [r4, #28]
   21060:	06da      	lsls	r2, r3, #27
   21062:	d527      	bpl.n	210b4 <process_event+0x38c>
			evt = EVT_COMPLETE;
   21064:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   21066:	f023 0310 	bic.w	r3, r3, #16
   2106a:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   2106c:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   21070:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   21074:	2900      	cmp	r1, #0
   21076:	f47f ae8a 	bne.w	20d8e <process_event+0x66>
out:
   2107a:	e669      	b.n	20d50 <process_event+0x28>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   2107c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2107e:	2900      	cmp	r1, #0
   21080:	d0c6      	beq.n	21010 <process_event+0x2e8>
	return node->next;
   21082:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   21086:	684b      	ldr	r3, [r1, #4]
   21088:	ee18 2a10 	vmov	r2, s16
   2108c:	461e      	mov	r6, r3
   2108e:	4620      	mov	r0, r4
   21090:	465b      	mov	r3, fp
   21092:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   21094:	f1b9 0f00 	cmp.w	r9, #0
   21098:	d0ba      	beq.n	21010 <process_event+0x2e8>
   2109a:	4649      	mov	r1, r9
   2109c:	f8d9 9000 	ldr.w	r9, [r9]
   210a0:	e7f1      	b.n	21086 <process_event+0x35e>
   210a2:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   210a4:	465b      	mov	r3, fp
   210a6:	ee18 2a10 	vmov	r2, s16
   210aa:	4620      	mov	r0, r4
   210ac:	682d      	ldr	r5, [r5, #0]
   210ae:	f01b fc27 	bl	3c900 <notify_one>
   210b2:	e7ad      	b.n	21010 <process_event+0x2e8>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   210b4:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   210b8:	bf1e      	ittt	ne
   210ba:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   210be:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   210c0:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   210c2:	e7d3      	b.n	2106c <process_event+0x344>
   210c4:	000210c9 	.word	0x000210c9

000210c8 <transition_complete>:
{
   210c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   210ca:	4604      	mov	r4, r0
   210cc:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   210ce:	f100 0614 	add.w	r6, r0, #20
   210d2:	f04f 0320 	mov.w	r3, #32
   210d6:	f3ef 8711 	mrs	r7, BASEPRI
   210da:	f383 8812 	msr	BASEPRI_MAX, r3
   210de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   210e2:	4630      	mov	r0, r6
   210e4:	f015 fb08 	bl	366f8 <z_spin_lock_valid>
   210e8:	b940      	cbnz	r0, 210fc <transition_complete+0x34>
   210ea:	490a      	ldr	r1, [pc, #40]	; (21114 <transition_complete+0x4c>)
   210ec:	480a      	ldr	r0, [pc, #40]	; (21118 <transition_complete+0x50>)
   210ee:	228e      	movs	r2, #142	; 0x8e
   210f0:	f01b fdb3 	bl	3cc5a <assert_print>
   210f4:	218e      	movs	r1, #142	; 0x8e
   210f6:	4807      	ldr	r0, [pc, #28]	; (21114 <transition_complete+0x4c>)
   210f8:	f01b fda8 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   210fc:	4630      	mov	r0, r6
   210fe:	f015 fb19 	bl	36734 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   21102:	463a      	mov	r2, r7
   21104:	4620      	mov	r0, r4
	mgr->last_res = res;
   21106:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   21108:	2101      	movs	r1, #1
}
   2110a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   2110e:	f7ff be0b 	b.w	20d28 <process_event>
   21112:	bf00      	nop
   21114:	0004429d 	.word	0x0004429d
   21118:	00044263 	.word	0x00044263

0002111c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2111c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21120:	4604      	mov	r4, r0
   21122:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   21124:	f01b fc02 	bl	3c92c <validate_args>

	if (rv < 0) {
   21128:	1e05      	subs	r5, r0, #0
   2112a:	db54      	blt.n	211d6 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   2112c:	f104 0914 	add.w	r9, r4, #20
   21130:	f04f 0320 	mov.w	r3, #32
   21134:	f3ef 8a11 	mrs	sl, BASEPRI
   21138:	f383 8812 	msr	BASEPRI_MAX, r3
   2113c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21140:	4648      	mov	r0, r9
   21142:	f015 fad9 	bl	366f8 <z_spin_lock_valid>
   21146:	b940      	cbnz	r0, 2115a <onoff_request+0x3e>
   21148:	4933      	ldr	r1, [pc, #204]	; (21218 <onoff_request+0xfc>)
   2114a:	4834      	ldr	r0, [pc, #208]	; (2121c <onoff_request+0x100>)
   2114c:	228e      	movs	r2, #142	; 0x8e
   2114e:	f01b fd84 	bl	3cc5a <assert_print>
   21152:	218e      	movs	r1, #142	; 0x8e
   21154:	4830      	ldr	r0, [pc, #192]	; (21218 <onoff_request+0xfc>)
   21156:	f01b fd79 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   2115a:	4648      	mov	r0, r9
   2115c:	f015 faea 	bl	36734 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   21160:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21164:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21166:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   21168:	428b      	cmp	r3, r1
   2116a:	f002 0607 	and.w	r6, r2, #7
   2116e:	d04a      	beq.n	21206 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   21170:	2e02      	cmp	r6, #2
   21172:	d11f      	bne.n	211b4 <onoff_request+0x98>
	rv = state;
   21174:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   21176:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   2117a:	3301      	adds	r3, #1
   2117c:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2117e:	4648      	mov	r0, r9
   21180:	f015 fac8 	bl	36714 <z_spin_unlock_valid>
   21184:	b940      	cbnz	r0, 21198 <onoff_request+0x7c>
   21186:	4924      	ldr	r1, [pc, #144]	; (21218 <onoff_request+0xfc>)
   21188:	4824      	ldr	r0, [pc, #144]	; (2121c <onoff_request+0x100>)
   2118a:	22b9      	movs	r2, #185	; 0xb9
   2118c:	f01b fd65 	bl	3cc5a <assert_print>
   21190:	21b9      	movs	r1, #185	; 0xb9
   21192:	4821      	ldr	r0, [pc, #132]	; (21218 <onoff_request+0xfc>)
   21194:	f01b fd5a 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   21198:	f38a 8811 	msr	BASEPRI, sl
   2119c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   211a0:	f1b8 0f00 	cmp.w	r8, #0
   211a4:	d017      	beq.n	211d6 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   211a6:	2300      	movs	r3, #0
   211a8:	4632      	mov	r2, r6
   211aa:	4639      	mov	r1, r7
   211ac:	4620      	mov	r0, r4
   211ae:	f01b fba7 	bl	3c900 <notify_one>
   211b2:	e010      	b.n	211d6 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   211b4:	0793      	lsls	r3, r2, #30
   211b6:	d001      	beq.n	211bc <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   211b8:	2e06      	cmp	r6, #6
   211ba:	d10f      	bne.n	211dc <onoff_request+0xc0>
	parent->next = child;
   211bc:	2300      	movs	r3, #0
   211be:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   211c0:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   211c2:	b9eb      	cbnz	r3, 21200 <onoff_request+0xe4>
	list->head = node;
   211c4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   211c8:	4635      	mov	r5, r6
   211ca:	b9f6      	cbnz	r6, 2120a <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   211cc:	4652      	mov	r2, sl
   211ce:	2102      	movs	r1, #2
   211d0:	4620      	mov	r0, r4
   211d2:	f7ff fda9 	bl	20d28 <process_event>
		}
	}

	return rv;
}
   211d6:	4628      	mov	r0, r5
   211d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   211dc:	2e05      	cmp	r6, #5
   211de:	d017      	beq.n	21210 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   211e0:	2e01      	cmp	r6, #1
   211e2:	d00a      	beq.n	211fa <onoff_request+0xde>
   211e4:	490e      	ldr	r1, [pc, #56]	; (21220 <onoff_request+0x104>)
   211e6:	480d      	ldr	r0, [pc, #52]	; (2121c <onoff_request+0x100>)
   211e8:	f240 12c9 	movw	r2, #457	; 0x1c9
   211ec:	f01b fd35 	bl	3cc5a <assert_print>
   211f0:	f240 11c9 	movw	r1, #457	; 0x1c9
   211f4:	480a      	ldr	r0, [pc, #40]	; (21220 <onoff_request+0x104>)
   211f6:	f01b fd29 	bl	3cc4c <assert_post_action>
		rv = -EIO;
   211fa:	f06f 0504 	mvn.w	r5, #4
   211fe:	e004      	b.n	2120a <onoff_request+0xee>
	parent->next = child;
   21200:	601f      	str	r7, [r3, #0]
	list->tail = node;
   21202:	6067      	str	r7, [r4, #4]
}
   21204:	e7e0      	b.n	211c8 <onoff_request+0xac>
		rv = -EAGAIN;
   21206:	f06f 050a 	mvn.w	r5, #10
   2120a:	f04f 0800 	mov.w	r8, #0
   2120e:	e7b6      	b.n	2117e <onoff_request+0x62>
		rv = -ENOTSUP;
   21210:	f06f 0585 	mvn.w	r5, #133	; 0x85
   21214:	e7f9      	b.n	2120a <onoff_request+0xee>
   21216:	bf00      	nop
   21218:	0004429d 	.word	0x0004429d
   2121c:	00044263 	.word	0x00044263
   21220:	0004427b 	.word	0x0004427b

00021224 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   21224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
	unsigned int d = tm->tm_mday - 1;
   21228:	68c3      	ldr	r3, [r0, #12]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   2122a:	6944      	ldr	r4, [r0, #20]
	unsigned int d = tm->tm_mday - 1;
   2122c:	1e5f      	subs	r7, r3, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   2122e:	f240 736c 	movw	r3, #1900	; 0x76c
	unsigned int m = tm->tm_mon + 1;
   21232:	6905      	ldr	r5, [r0, #16]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   21234:	17e1      	asrs	r1, r4, #31
	unsigned int m = tm->tm_mon + 1;
   21236:	3501      	adds	r5, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   21238:	18e4      	adds	r4, r4, r3
   2123a:	f141 0100 	adc.w	r1, r1, #0
	y -= m <= 2;
   2123e:	2d02      	cmp	r5, #2
   21240:	bf8c      	ite	hi
   21242:	2300      	movhi	r3, #0
   21244:	2301      	movls	r3, #1
   21246:	1ae4      	subs	r4, r4, r3
   21248:	f161 0100 	sbc.w	r1, r1, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   2124c:	2900      	cmp	r1, #0
{
   2124e:	4680      	mov	r8, r0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   21250:	da55      	bge.n	212fe <timeutil_timegm64+0xda>
   21252:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   21256:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2125a:	2300      	movs	r3, #0
   2125c:	1820      	adds	r0, r4, r0
   2125e:	f161 0100 	sbc.w	r1, r1, #0
   21262:	f7fb fdf1 	bl	1ce48 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   21266:	4b28      	ldr	r3, [pc, #160]	; (21308 <timeutil_timegm64+0xe4>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   21268:	4602      	mov	r2, r0
	unsigned int yoe = y - era * 400;
   2126a:	fb03 4400 	mla	r4, r3, r0, r4
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   2126e:	e9d8 9000 	ldrd	r9, r0, [r8]
   21272:	233c      	movs	r3, #60	; 0x3c
   21274:	f8d8 8008 	ldr.w	r8, [r8, #8]
   21278:	17c6      	asrs	r6, r0, #31
   2127a:	fbc8 0603 	smlal	r0, r6, r8, r3
   2127e:	46b4      	mov	ip, r6
   21280:	fba0 0603 	umull	r0, r6, r0, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   21284:	2d02      	cmp	r5, #2
   21286:	bf8c      	ite	hi
   21288:	f06f 0e02 	mvnhi.w	lr, #2
   2128c:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   21290:	fb03 660c 	mla	r6, r3, ip, r6
   21294:	eb10 0c09 	adds.w	ip, r0, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   21298:	f240 106d 	movw	r0, #365	; 0x16d
   2129c:	ea4f 0394 	mov.w	r3, r4, lsr #2
   212a0:	fb00 3304 	mla	r3, r0, r4, r3
   212a4:	f04f 0064 	mov.w	r0, #100	; 0x64
   212a8:	fbb4 f4f0 	udiv	r4, r4, r0
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   212ac:	eb05 000e 	add.w	r0, r5, lr
   212b0:	f04f 0599 	mov.w	r5, #153	; 0x99
   212b4:	fb05 f000 	mul.w	r0, r5, r0
   212b8:	f04f 0505 	mov.w	r5, #5
   212bc:	f100 0002 	add.w	r0, r0, #2
   212c0:	fbb0 f0f5 	udiv	r0, r0, r5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   212c4:	443b      	add	r3, r7
   212c6:	eba3 0304 	sub.w	r3, r3, r4
	return era * 146097 + (time_t)doe - 719468;
   212ca:	4c10      	ldr	r4, [pc, #64]	; (2130c <timeutil_timegm64+0xe8>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   212cc:	4403      	add	r3, r0
	return era * 146097 + (time_t)doe - 719468;
   212ce:	fba2 0204 	umull	r0, r2, r2, r4
   212d2:	fb04 2101 	mla	r1, r4, r1, r2
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   212d6:	eb46 76e9 	adc.w	r6, r6, r9, asr #31
	return era * 146097 + (time_t)doe - 719468;
   212da:	181b      	adds	r3, r3, r0
   212dc:	480c      	ldr	r0, [pc, #48]	; (21310 <timeutil_timegm64+0xec>)
	time += 86400LL * ndays;
   212de:	4a0d      	ldr	r2, [pc, #52]	; (21314 <timeutil_timegm64+0xf0>)
	return era * 146097 + (time_t)doe - 719468;
   212e0:	f141 0100 	adc.w	r1, r1, #0
   212e4:	181b      	adds	r3, r3, r0
	time += 86400LL * ndays;
   212e6:	fba3 0302 	umull	r0, r3, r3, r2
	return era * 146097 + (time_t)doe - 719468;
   212ea:	f161 0100 	sbc.w	r1, r1, #0
	time += 86400LL * ndays;
   212ee:	fb02 3101 	mla	r1, r2, r1, r3
   212f2:	eb10 000c 	adds.w	r0, r0, ip

	return time;
}
   212f6:	eb41 0106 	adc.w	r1, r1, r6
   212fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   212fe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   21302:	2300      	movs	r3, #0
   21304:	4620      	mov	r0, r4
   21306:	e7ac      	b.n	21262 <timeutil_timegm64+0x3e>
   21308:	fffffe70 	.word	0xfffffe70
   2130c:	00023ab1 	.word	0x00023ab1
   21310:	fff50594 	.word	0xfff50594
   21314:	00015180 	.word	0x00015180

00021318 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   21318:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   2131a:	b379      	cbz	r1, 2137c <sys_heap_free+0x64>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   2131c:	6805      	ldr	r5, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2131e:	1f0c      	subs	r4, r1, #4
   21320:	1b64      	subs	r4, r4, r5
   21322:	08e6      	lsrs	r6, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   21324:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   21328:	442c      	add	r4, r5
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2132a:	8863      	ldrh	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   2132c:	07db      	lsls	r3, r3, #31
   2132e:	d408      	bmi.n	21342 <sys_heap_free+0x2a>
   21330:	4913      	ldr	r1, [pc, #76]	; (21380 <sys_heap_free+0x68>)
   21332:	4814      	ldr	r0, [pc, #80]	; (21384 <sys_heap_free+0x6c>)
   21334:	22ac      	movs	r2, #172	; 0xac
   21336:	f01b fc90 	bl	3cc5a <assert_print>
   2133a:	21ac      	movs	r1, #172	; 0xac
   2133c:	4810      	ldr	r0, [pc, #64]	; (21380 <sys_heap_free+0x68>)
   2133e:	f01b fc85 	bl	3cc4c <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   21342:	4631      	mov	r1, r6
   21344:	4628      	mov	r0, r5
   21346:	f01b fb1d 	bl	3c984 <chunk_size>
   2134a:	4430      	add	r0, r6
		return ((uint16_t *)cmem)[f];
   2134c:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   21350:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   21352:	4286      	cmp	r6, r0
   21354:	d008      	beq.n	21368 <sys_heap_free+0x50>
   21356:	490a      	ldr	r1, [pc, #40]	; (21380 <sys_heap_free+0x68>)
   21358:	480a      	ldr	r0, [pc, #40]	; (21384 <sys_heap_free+0x6c>)
   2135a:	22b4      	movs	r2, #180	; 0xb4
   2135c:	f01b fc7d 	bl	3cc5a <assert_print>
   21360:	21b4      	movs	r1, #180	; 0xb4
   21362:	4807      	ldr	r0, [pc, #28]	; (21380 <sys_heap_free+0x68>)
   21364:	f01b fc72 	bl	3cc4c <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21368:	8863      	ldrh	r3, [r4, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   2136a:	4631      	mov	r1, r6
   2136c:	f023 0301 	bic.w	r3, r3, #1
   21370:	4628      	mov	r0, r5
   21372:	8063      	strh	r3, [r4, #2]
}
   21374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   21378:	f01b bbc3 	b.w	3cb02 <free_chunk>
}
   2137c:	bd70      	pop	{r4, r5, r6, pc}
   2137e:	bf00      	nop
   21380:	000442ca 	.word	0x000442ca
   21384:	00044263 	.word	0x00044263

00021388 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   21388:	424b      	negs	r3, r1
{
   2138a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   2138e:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   21392:	ea31 0303 	bics.w	r3, r1, r3
{
   21396:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   21398:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   2139a:	d01b      	beq.n	213d4 <sys_heap_aligned_alloc+0x4c>
		return false;
   2139c:	2f04      	cmp	r7, #4
   2139e:	463d      	mov	r5, r7
   213a0:	bf28      	it	cs
   213a2:	2504      	movcs	r5, #4
   213a4:	46b9      	mov	r9, r7
		align -= rew;
   213a6:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   213a8:	f107 3aff 	add.w	sl, r7, #4294967295
   213ac:	ea1a 0f07 	tst.w	sl, r7
   213b0:	d00a      	beq.n	213c8 <sys_heap_aligned_alloc+0x40>
   213b2:	4932      	ldr	r1, [pc, #200]	; (2147c <sys_heap_aligned_alloc+0xf4>)
   213b4:	4832      	ldr	r0, [pc, #200]	; (21480 <sys_heap_aligned_alloc+0xf8>)
   213b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
   213ba:	f01b fc4e 	bl	3cc5a <assert_print>
   213be:	f44f 71a0 	mov.w	r1, #320	; 0x140
   213c2:	482e      	ldr	r0, [pc, #184]	; (2147c <sys_heap_aligned_alloc+0xf4>)
   213c4:	f01b fc42 	bl	3cc4c <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   213c8:	b97c      	cbnz	r4, 213ea <sys_heap_aligned_alloc+0x62>
		return NULL;
   213ca:	f04f 0900 	mov.w	r9, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   213ce:	4648      	mov	r0, r9
   213d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   213d4:	2904      	cmp	r1, #4
   213d6:	d804      	bhi.n	213e2 <sys_heap_aligned_alloc+0x5a>
}
   213d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   213dc:	4611      	mov	r1, r2
   213de:	f01b bbc2 	b.w	3cb66 <sys_heap_alloc>
		rew = 0;
   213e2:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   213e6:	2504      	movs	r5, #4
   213e8:	e7de      	b.n	213a8 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   213ea:	68b3      	ldr	r3, [r6, #8]
   213ec:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   213f0:	d9eb      	bls.n	213ca <sys_heap_aligned_alloc+0x42>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   213f2:	f104 010b 	add.w	r1, r4, #11
   213f6:	4439      	add	r1, r7
   213f8:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   213fa:	4630      	mov	r0, r6
   213fc:	08c9      	lsrs	r1, r1, #3
   213fe:	f01b fb19 	bl	3ca34 <alloc_chunk>
	if (c0 == 0) {
   21402:	4680      	mov	r8, r0
   21404:	2800      	cmp	r0, #0
   21406:	d0e0      	beq.n	213ca <sys_heap_aligned_alloc+0x42>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   21408:	f109 0504 	add.w	r5, r9, #4
   2140c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   21410:	4435      	add	r5, r6
   21412:	4455      	add	r5, sl
   21414:	427f      	negs	r7, r7
   21416:	402f      	ands	r7, r5
   21418:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2141c:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2141e:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21422:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21424:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21426:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2142a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2142c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21430:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   21434:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   21438:	d208      	bcs.n	2144c <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c0, c);
   2143a:	4601      	mov	r1, r0
   2143c:	463a      	mov	r2, r7
   2143e:	4630      	mov	r0, r6
   21440:	f01b fb45 	bl	3cace <split_chunks>
		free_list_add(h, c0);
   21444:	4641      	mov	r1, r8
   21446:	4630      	mov	r0, r6
   21448:	f01b faa1 	bl	3c98e <free_list_add>
	return c + chunk_size(h, c);
   2144c:	4639      	mov	r1, r7
   2144e:	4630      	mov	r0, r6
   21450:	f01b fa98 	bl	3c984 <chunk_size>
   21454:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   21456:	4284      	cmp	r4, r0
   21458:	d208      	bcs.n	2146c <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
   2145a:	4639      	mov	r1, r7
   2145c:	4630      	mov	r0, r6
   2145e:	4622      	mov	r2, r4
   21460:	f01b fb35 	bl	3cace <split_chunks>
		free_list_add(h, c_end);
   21464:	4621      	mov	r1, r4
   21466:	4630      	mov	r0, r6
   21468:	f01b fa91 	bl	3c98e <free_list_add>
	void *cmem = &buf[c];
   2146c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21470:	8873      	ldrh	r3, [r6, #2]
   21472:	f043 0301 	orr.w	r3, r3, #1
   21476:	8073      	strh	r3, [r6, #2]
   21478:	e7a9      	b.n	213ce <sys_heap_aligned_alloc+0x46>
   2147a:	bf00      	nop
   2147c:	000442ca 	.word	0x000442ca
   21480:	00044263 	.word	0x00044263

00021484 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   21484:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   21488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2148c:	4680      	mov	r8, r0
   2148e:	460c      	mov	r4, r1
   21490:	4616      	mov	r6, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   21492:	d35f      	bcc.n	21554 <sys_heap_init+0xd0>
   21494:	4936      	ldr	r1, [pc, #216]	; (21570 <sys_heap_init+0xec>)
   21496:	f240 12e3 	movw	r2, #483	; 0x1e3
   2149a:	4836      	ldr	r0, [pc, #216]	; (21574 <sys_heap_init+0xf0>)
   2149c:	f01b fbdd 	bl	3cc5a <assert_print>
   214a0:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   214a4:	4832      	ldr	r0, [pc, #200]	; (21570 <sys_heap_init+0xec>)
   214a6:	f01b fbd1 	bl	3cc4c <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   214aa:	3e04      	subs	r6, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   214ac:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   214ae:	4426      	add	r6, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   214b0:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   214b4:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   214b8:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   214ba:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   214bc:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   214c0:	d80a      	bhi.n	214d8 <sys_heap_init+0x54>
   214c2:	492b      	ldr	r1, [pc, #172]	; (21570 <sys_heap_init+0xec>)
   214c4:	482b      	ldr	r0, [pc, #172]	; (21574 <sys_heap_init+0xf0>)
   214c6:	f240 12f3 	movw	r2, #499	; 0x1f3
   214ca:	f01b fbc6 	bl	3cc5a <assert_print>
   214ce:	f240 11f3 	movw	r1, #499	; 0x1f3
   214d2:	4827      	ldr	r0, [pc, #156]	; (21570 <sys_heap_init+0xec>)
   214d4:	f01b fbba 	bl	3cc4c <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   214d8:	fab7 f487 	clz	r4, r7

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   214dc:	2300      	movs	r3, #0
	heap->heap = h;
   214de:	f8c8 5000 	str.w	r5, [r8]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   214e2:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   214e6:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
   214ea:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   214ec:	3407      	adds	r4, #7
   214ee:	08e4      	lsrs	r4, r4, #3
	h->avail_buckets = 0;
   214f0:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   214f2:	1c63      	adds	r3, r4, #1
   214f4:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   214f6:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   214f8:	d90a      	bls.n	21510 <sys_heap_init+0x8c>
   214fa:	491d      	ldr	r1, [pc, #116]	; (21570 <sys_heap_init+0xec>)
   214fc:	481d      	ldr	r0, [pc, #116]	; (21574 <sys_heap_init+0xf0>)
   214fe:	f44f 7201 	mov.w	r2, #516	; 0x204
   21502:	f01b fbaa 	bl	3cc5a <assert_print>
   21506:	f44f 7101 	mov.w	r1, #516	; 0x204
   2150a:	4819      	ldr	r0, [pc, #100]	; (21570 <sys_heap_init+0xec>)
   2150c:	f01b fb9e 	bl	3cc4c <assert_post_action>
   21510:	2200      	movs	r2, #0
   21512:	f105 0310 	add.w	r3, r5, #16
   21516:	eb03 0888 	add.w	r8, r3, r8, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
   2151a:	4598      	cmp	r8, r3
   2151c:	d125      	bne.n	2156a <sys_heap_init+0xe6>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2151e:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21520:	f043 0301 	orr.w	r3, r3, #1
   21524:	806b      	strh	r3, [r5, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   21526:	1b3b      	subs	r3, r7, r4
		((uint16_t *)cmem)[f] = val;
   21528:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2152c:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
   2152e:	802a      	strh	r2, [r5, #0]
   21530:	8048      	strh	r0, [r1, #2]
   21532:	19a9      	adds	r1, r5, r6
   21534:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
   21538:	804a      	strh	r2, [r1, #2]
   2153a:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
   2153c:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21540:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   21542:	4621      	mov	r1, r4
   21544:	f042 0201 	orr.w	r2, r2, #1
   21548:	4628      	mov	r0, r5
}
   2154a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2154e:	805a      	strh	r2, [r3, #2]
	free_list_add(h, chunk0_size);
   21550:	f01b ba1d 	b.w	3c98e <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   21554:	2a04      	cmp	r2, #4
   21556:	d8a8      	bhi.n	214aa <sys_heap_init+0x26>
   21558:	4905      	ldr	r1, [pc, #20]	; (21570 <sys_heap_init+0xec>)
   2155a:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   2155e:	4805      	ldr	r0, [pc, #20]	; (21574 <sys_heap_init+0xf0>)
   21560:	f01b fb7b 	bl	3cc5a <assert_print>
   21564:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   21568:	e79c      	b.n	214a4 <sys_heap_init+0x20>
		h->buckets[i].next = 0;
   2156a:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
   2156e:	e7d4      	b.n	2151a <sys_heap_init+0x96>
   21570:	000442ca 	.word	0x000442ca
   21574:	00044263 	.word	0x00044263

00021578 <extract_decimal>:
{
   21578:	b5f0      	push	{r4, r5, r6, r7, lr}
   2157a:	4602      	mov	r2, r0
   2157c:	6801      	ldr	r1, [r0, #0]
		val = 10U * val + *sp++ - '0';
   2157e:	270a      	movs	r7, #10
	size_t val = 0;
   21580:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   21582:	4e07      	ldr	r6, [pc, #28]	; (215a0 <extract_decimal+0x28>)
   21584:	460c      	mov	r4, r1
   21586:	7823      	ldrb	r3, [r4, #0]
   21588:	3101      	adds	r1, #1
   2158a:	5d9d      	ldrb	r5, [r3, r6]
   2158c:	076d      	lsls	r5, r5, #29
   2158e:	d401      	bmi.n	21594 <extract_decimal+0x1c>
	*str = sp;
   21590:	6014      	str	r4, [r2, #0]
}
   21592:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   21594:	fb07 3300 	mla	r3, r7, r0, r3
   21598:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2159c:	e7f2      	b.n	21584 <extract_decimal+0xc>
   2159e:	bf00      	nop
   215a0:	0004bf0e 	.word	0x0004bf0e

000215a4 <encode_uint>:
{
   215a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215a8:	4615      	mov	r5, r2
   215aa:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   215ac:	78d3      	ldrb	r3, [r2, #3]
   215ae:	4a22      	ldr	r2, [pc, #136]	; (21638 <encode_uint+0x94>)
	switch (specifier) {
   215b0:	2b6f      	cmp	r3, #111	; 0x6f
   215b2:	f813 b002 	ldrb.w	fp, [r3, r2]
{
   215b6:	4680      	mov	r8, r0
   215b8:	460f      	mov	r7, r1
   215ba:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   215be:	d029      	beq.n	21614 <encode_uint+0x70>
   215c0:	d824      	bhi.n	2160c <encode_uint+0x68>
		return 16;
   215c2:	2b58      	cmp	r3, #88	; 0x58
   215c4:	bf14      	ite	ne
   215c6:	260a      	movne	r6, #10
   215c8:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   215ca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   215ce:	4632      	mov	r2, r6
   215d0:	2300      	movs	r3, #0
   215d2:	4640      	mov	r0, r8
   215d4:	4639      	mov	r1, r7
   215d6:	f7fb fc87 	bl	1cee8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   215da:	2a09      	cmp	r2, #9
   215dc:	b2d4      	uxtb	r4, r2
   215de:	d81e      	bhi.n	2161e <encode_uint+0x7a>
   215e0:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   215e2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   215e4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   215e6:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   215ea:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   215ee:	d301      	bcc.n	215f4 <encode_uint+0x50>
   215f0:	45d1      	cmp	r9, sl
   215f2:	d811      	bhi.n	21618 <encode_uint+0x74>
	if (conv->flag_hash) {
   215f4:	782b      	ldrb	r3, [r5, #0]
   215f6:	069b      	lsls	r3, r3, #26
   215f8:	d505      	bpl.n	21606 <encode_uint+0x62>
		if (radix == 8) {
   215fa:	2e08      	cmp	r6, #8
   215fc:	d115      	bne.n	2162a <encode_uint+0x86>
			conv->altform_0 = true;
   215fe:	78ab      	ldrb	r3, [r5, #2]
   21600:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   21604:	70ab      	strb	r3, [r5, #2]
}
   21606:	4648      	mov	r0, r9
   21608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2160c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   21610:	2b70      	cmp	r3, #112	; 0x70
   21612:	e7d7      	b.n	215c4 <encode_uint+0x20>
	switch (specifier) {
   21614:	2608      	movs	r6, #8
   21616:	e7d8      	b.n	215ca <encode_uint+0x26>
		value /= radix;
   21618:	4680      	mov	r8, r0
   2161a:	460f      	mov	r7, r1
   2161c:	e7d7      	b.n	215ce <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2161e:	f1bb 0f01 	cmp.w	fp, #1
   21622:	bf0c      	ite	eq
   21624:	3437      	addeq	r4, #55	; 0x37
   21626:	3457      	addne	r4, #87	; 0x57
   21628:	e7db      	b.n	215e2 <encode_uint+0x3e>
		} else if (radix == 16) {
   2162a:	2e10      	cmp	r6, #16
   2162c:	d1eb      	bne.n	21606 <encode_uint+0x62>
			conv->altform_0c = true;
   2162e:	78ab      	ldrb	r3, [r5, #2]
   21630:	f043 0310 	orr.w	r3, r3, #16
   21634:	e7e6      	b.n	21604 <encode_uint+0x60>
   21636:	bf00      	nop
   21638:	0004bf0e 	.word	0x0004bf0e

0002163c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   2163c:	b508      	push	{r3, lr}
	__asm__ volatile(
   2163e:	f04f 0220 	mov.w	r2, #32
   21642:	f3ef 8311 	mrs	r3, BASEPRI
   21646:	f382 8812 	msr	BASEPRI_MAX, r2
   2164a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   2164e:	f001 ff19 	bl	23484 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   21652:	4803      	ldr	r0, [pc, #12]	; (21660 <sys_reboot+0x24>)
   21654:	f01b f91e 	bl	3c894 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   21658:	f001 fa8a 	bl	22b70 <arch_cpu_idle>
   2165c:	e7fc      	b.n	21658 <sys_reboot+0x1c>
   2165e:	bf00      	nop
   21660:	000442f1 	.word	0x000442f1

00021664 <nordicsemi_nrf91_init>:
   21664:	f04f 0220 	mov.w	r2, #32
   21668:	f3ef 8311 	mrs	r3, BASEPRI
   2166c:	f382 8812 	msr	BASEPRI_MAX, r2
   21670:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   21674:	2101      	movs	r1, #1
   21676:	4a04      	ldr	r2, [pc, #16]	; (21688 <nordicsemi_nrf91_init+0x24>)
   21678:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   2167c:	f383 8811 	msr	BASEPRI, r3
   21680:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   21684:	2000      	movs	r0, #0
   21686:	4770      	bx	lr
   21688:	40039000 	.word	0x40039000

0002168c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   2168c:	b120      	cbz	r0, 21698 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   2168e:	4b03      	ldr	r3, [pc, #12]	; (2169c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   21690:	0180      	lsls	r0, r0, #6
   21692:	f043 0301 	orr.w	r3, r3, #1
   21696:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   21698:	4770      	bx	lr
   2169a:	bf00      	nop
   2169c:	00042a40 	.word	0x00042a40

000216a0 <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   216a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216a4:	4607      	mov	r7, r0
   216a6:	4688      	mov	r8, r1
   216a8:	4616      	mov	r6, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   216aa:	4614      	mov	r4, r2
   216ac:	eb08 0506 	add.w	r5, r8, r6
   216b0:	1b2d      	subs	r5, r5, r4
   216b2:	b90c      	cbnz	r4, 216b8 <z_log_minimal_hexdump_print+0x18>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   216b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   216b8:	1e7b      	subs	r3, r7, #1
   216ba:	2b03      	cmp	r3, #3
   216bc:	bf96      	itet	ls
   216be:	4a21      	ldrls	r2, [pc, #132]	; (21744 <z_log_minimal_hexdump_print+0xa4>)
   216c0:	213f      	movhi	r1, #63	; 0x3f
   216c2:	5cd1      	ldrbls	r1, [r2, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
   216c4:	4820      	ldr	r0, [pc, #128]	; (21748 <z_log_minimal_hexdump_print+0xa8>)
   216c6:	f01b f8e5 	bl	3c894 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   216ca:	f04f 0900 	mov.w	r9, #0
			printk("   ");
   216ce:	f8df a088 	ldr.w	sl, [pc, #136]	; 21758 <z_log_minimal_hexdump_print+0xb8>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   216d2:	f8df b088 	ldr.w	fp, [pc, #136]	; 2175c <z_log_minimal_hexdump_print+0xbc>
		if (i < length) {
   216d6:	454c      	cmp	r4, r9
   216d8:	d92b      	bls.n	21732 <z_log_minimal_hexdump_print+0x92>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   216da:	4658      	mov	r0, fp
   216dc:	f815 1009 	ldrb.w	r1, [r5, r9]
   216e0:	f01b f8d8 	bl	3c894 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   216e4:	f109 0901 	add.w	r9, r9, #1
   216e8:	f1b9 0f08 	cmp.w	r9, #8
   216ec:	d1f3      	bne.n	216d6 <z_log_minimal_hexdump_print+0x36>
	printk("|");
   216ee:	4817      	ldr	r0, [pc, #92]	; (2174c <z_log_minimal_hexdump_print+0xac>)
   216f0:	f01b f8d0 	bl	3c894 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   216f4:	f04f 0900 	mov.w	r9, #0
			printk(" ");
   216f8:	f8df a064 	ldr.w	sl, [pc, #100]	; 21760 <z_log_minimal_hexdump_print+0xc0>
			printk("%c", isprint((int)c) != 0 ? c : '.');
   216fc:	f8df b064 	ldr.w	fp, [pc, #100]	; 21764 <z_log_minimal_hexdump_print+0xc4>
		if (i < length) {
   21700:	454c      	cmp	r4, r9
   21702:	d91a      	bls.n	2173a <z_log_minimal_hexdump_print+0x9a>
			unsigned char c = data[i];
   21704:	f815 1009 	ldrb.w	r1, [r5, r9]
			printk("%c", isprint((int)c) != 0 ? c : '.');
   21708:	4b11      	ldr	r3, [pc, #68]	; (21750 <z_log_minimal_hexdump_print+0xb0>)
   2170a:	4658      	mov	r0, fp
   2170c:	5cca      	ldrb	r2, [r1, r3]
   2170e:	f012 0f97 	tst.w	r2, #151	; 0x97
   21712:	bf08      	it	eq
   21714:	212e      	moveq	r1, #46	; 0x2e
   21716:	f01b f8bd 	bl	3c894 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2171a:	f109 0901 	add.w	r9, r9, #1
   2171e:	f1b9 0f08 	cmp.w	r9, #8
   21722:	d1ed      	bne.n	21700 <z_log_minimal_hexdump_print+0x60>
	printk("\n");
   21724:	480b      	ldr	r0, [pc, #44]	; (21754 <z_log_minimal_hexdump_print+0xb4>)
   21726:	f01b f8b5 	bl	3c894 <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   2172a:	2c07      	cmp	r4, #7
   2172c:	d9c2      	bls.n	216b4 <z_log_minimal_hexdump_print+0x14>
		size -= HEXDUMP_BYTES_IN_LINE;
   2172e:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   21730:	e7bc      	b.n	216ac <z_log_minimal_hexdump_print+0xc>
			printk("   ");
   21732:	4650      	mov	r0, sl
   21734:	f01b f8ae 	bl	3c894 <printk>
   21738:	e7d4      	b.n	216e4 <z_log_minimal_hexdump_print+0x44>
			printk(" ");
   2173a:	4650      	mov	r0, sl
   2173c:	f01b f8aa 	bl	3c894 <printk>
   21740:	e7eb      	b.n	2171a <z_log_minimal_hexdump_print+0x7a>
   21742:	bf00      	nop
   21744:	0004432f 	.word	0x0004432f
   21748:	0004431e 	.word	0x0004431e
   2174c:	0004432d 	.word	0x0004432d
   21750:	0004bf0e 	.word	0x0004bf0e
   21754:	000453f2 	.word	0x000453f2
   21758:	00044329 	.word	0x00044329
   2175c:	00044323 	.word	0x00044323
   21760:	0004432b 	.word	0x0004432b
   21764:	0004596f 	.word	0x0004596f

00021768 <fcb_append>:
	return 0;
}

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   21768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2176c:	b085      	sub	sp, #20
   2176e:	460e      	mov	r6, r1
   21770:	4691      	mov	r9, r2
	struct fcb_entry *active;
	int cnt;
	int rc;
	uint8_t tmp_str[8];

	cnt = fcb_put_len(fcb, tmp_str, len);
   21772:	460a      	mov	r2, r1
   21774:	a902      	add	r1, sp, #8
{
   21776:	4604      	mov	r4, r0
	cnt = fcb_put_len(fcb, tmp_str, len);
   21778:	f01b fb56 	bl	3ce28 <fcb_put_len>
	if (cnt < 0) {
   2177c:	1e05      	subs	r5, r0, #0
   2177e:	db73      	blt.n	21868 <fcb_append+0x100>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   21780:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
   21784:	b2a9      	uxth	r1, r5
   21786:	4610      	mov	r0, r2
   21788:	f01b faae 	bl	3cce8 <fcb_len_in_flash.isra.0>
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   2178c:	4631      	mov	r1, r6
	cnt = fcb_len_in_flash(fcb, cnt);
   2178e:	4607      	mov	r7, r0
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   21790:	4610      	mov	r0, r2
   21792:	f01b faa9 	bl	3cce8 <fcb_len_in_flash.isra.0>
   21796:	2101      	movs	r1, #1
   21798:	4606      	mov	r6, r0
   2179a:	4610      	mov	r0, r2
   2179c:	f01b faa4 	bl	3cce8 <fcb_len_in_flash.isra.0>

	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   217a0:	2f08      	cmp	r7, #8
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   217a2:	4430      	add	r0, r6
   217a4:	b286      	uxth	r6, r0
	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   217a6:	d908      	bls.n	217ba <fcb_append+0x52>
   217a8:	4937      	ldr	r1, [pc, #220]	; (21888 <fcb_append+0x120>)
   217aa:	4838      	ldr	r0, [pc, #224]	; (2188c <fcb_append+0x124>)
   217ac:	224b      	movs	r2, #75	; 0x4b
   217ae:	f01b fa54 	bl	3cc5a <assert_print>
   217b2:	214b      	movs	r1, #75	; 0x4b
   217b4:	4834      	ldr	r0, [pc, #208]	; (21888 <fcb_append+0x120>)
   217b6:	f01b fa49 	bl	3cc4c <assert_post_action>

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   217ba:	f104 0a0c 	add.w	sl, r4, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   217be:	f04f 32ff 	mov.w	r2, #4294967295
   217c2:	f04f 33ff 	mov.w	r3, #4294967295
   217c6:	4650      	mov	r0, sl
   217c8:	f015 f910 	bl	369ec <z_impl_k_mutex_lock>
	if (rc) {
   217cc:	4605      	mov	r5, r0
   217ce:	2800      	cmp	r0, #0
   217d0:	d156      	bne.n	21880 <fcb_append+0x118>
		return -EINVAL;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   217d2:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   217d6:	684a      	ldr	r2, [r1, #4]
   217d8:	443b      	add	r3, r7
   217da:	4433      	add	r3, r6
   217dc:	4293      	cmp	r3, r2
   217de:	d92b      	bls.n	21838 <fcb_append+0xd0>
	prev = NULL;
   217e0:	4680      	mov	r8, r0
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   217e2:	f894 b006 	ldrb.w	fp, [r4, #6]
		cur = fcb_getnext_sector(fcb, cur);
   217e6:	4620      	mov	r0, r4
   217e8:	f01b fcd1 	bl	3d18e <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   217ec:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   217ee:	f1b8 0f00 	cmp.w	r8, #0
   217f2:	bf08      	it	eq
   217f4:	4680      	moveq	r8, r0
		if (cur == fcb->f_oldest) {
   217f6:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   217f8:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   217fa:	d03b      	beq.n	21874 <fcb_append+0x10c>
	} while (i++ < cnt);
   217fc:	45ab      	cmp	fp, r5
   217fe:	f105 0301 	add.w	r3, r5, #1
   21802:	dc35      	bgt.n	21870 <fcb_append+0x108>
		if (!sector || (sector->fs_size <
   21804:	f1b8 0f00 	cmp.w	r8, #0
   21808:	d034      	beq.n	21874 <fcb_append+0x10c>
   2180a:	f8d8 2004 	ldr.w	r2, [r8, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   2180e:	f107 0308 	add.w	r3, r7, #8
   21812:	4433      	add	r3, r6
		if (!sector || (sector->fs_size <
   21814:	429a      	cmp	r2, r3
   21816:	d32d      	bcc.n	21874 <fcb_append+0x10c>
			rc = -ENOSPC;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   21818:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   2181a:	4641      	mov	r1, r8
   2181c:	3201      	adds	r2, #1
   2181e:	4620      	mov	r0, r4
   21820:	b292      	uxth	r2, r2
   21822:	f01b fb43 	bl	3ceac <fcb_sector_hdr_init>
		if (rc) {
   21826:	4605      	mov	r5, r0
   21828:	b9d8      	cbnz	r0, 21862 <fcb_append+0xfa>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2182a:	2308      	movs	r3, #8
   2182c:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   2182e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   21830:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		fcb->f_active_id++;
   21834:	3301      	adds	r3, #1
   21836:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   21838:	4620      	mov	r0, r4
   2183a:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   2183e:	9700      	str	r7, [sp, #0]
   21840:	ab02      	add	r3, sp, #8
   21842:	f01b fabf 	bl	3cdc4 <fcb_flash_write>
	if (rc) {
   21846:	4605      	mov	r5, r0
   21848:	b9b8      	cbnz	r0, 2187a <fcb_append+0x112>
		rc = -EIO;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   2184a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2184c:	f8c9 3000 	str.w	r3, [r9]
	append_loc->fe_elem_off = active->fe_elem_off;
   21850:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21852:	f8c9 3004 	str.w	r3, [r9, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   21856:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   21858:	4407      	add	r7, r0
   2185a:	f8c9 7008 	str.w	r7, [r9, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   2185e:	4437      	add	r7, r6
   21860:	62a7      	str	r7, [r4, #40]	; 0x28
	return z_impl_k_mutex_unlock(mutex);
   21862:	4650      	mov	r0, sl
   21864:	f015 f994 	bl	36b90 <z_impl_k_mutex_unlock>

	return 0;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   21868:	4628      	mov	r0, r5
   2186a:	b005      	add	sp, #20
   2186c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   21870:	461d      	mov	r5, r3
   21872:	e7b8      	b.n	217e6 <fcb_append+0x7e>
			rc = -ENOSPC;
   21874:	f06f 051b 	mvn.w	r5, #27
   21878:	e7f3      	b.n	21862 <fcb_append+0xfa>
		rc = -EIO;
   2187a:	f06f 0504 	mvn.w	r5, #4
   2187e:	e7f0      	b.n	21862 <fcb_append+0xfa>
		return -EINVAL;
   21880:	f06f 0515 	mvn.w	r5, #21
   21884:	e7f0      	b.n	21868 <fcb_append+0x100>
   21886:	bf00      	nop
   21888:	00044333 	.word	0x00044333
   2188c:	00044263 	.word	0x00044263

00021890 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   21890:	b5f0      	push	{r4, r5, r6, r7, lr}
   21892:	4605      	mov	r5, r0
   21894:	b09b      	sub	sp, #108	; 0x6c
   21896:	460f      	mov	r7, r1
   21898:	4614      	mov	r4, r2
	struct sntp_pkt tx_pkt = { 0 };
   2189a:	2100      	movs	r1, #0
   2189c:	2230      	movs	r2, #48	; 0x30
   2189e:	a802      	add	r0, sp, #8
   218a0:	f01f feaf 	bl	41602 <memset>
	int ret = 0;

	if (!ctx || !time) {
   218a4:	2d00      	cmp	r5, #0
   218a6:	f000 8085 	beq.w	219b4 <sntp_query+0x124>
   218aa:	2c00      	cmp	r4, #0
   218ac:	f000 8082 	beq.w	219b4 <sntp_query+0x124>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   218b0:	231b      	movs	r3, #27
   218b2:	f88d 3008 	strb.w	r3, [sp, #8]
	return z_impl_k_uptime_ticks();
   218b6:	f01f fd14 	bl	412e2 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   218ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   218be:	2600      	movs	r6, #0
   218c0:	fba0 0302 	umull	r0, r3, r0, r2
   218c4:	fb02 3101 	mla	r1, r2, r1, r3
   218c8:	0bc0      	lsrs	r0, r0, #15
	return time / MSEC_PER_SEC;
   218ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   218ce:	2300      	movs	r3, #0
   218d0:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   218d4:	4631      	mov	r1, r6
   218d6:	f7fb fb07 	bl	1cee8 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   218da:	4a38      	ldr	r2, [pc, #224]	; (219bc <sntp_query+0x12c>)
   218dc:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   218de:	0a13      	lsrs	r3, r2, #8
   218e0:	0211      	lsls	r1, r2, #8
   218e2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   218e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   218ea:	430b      	orrs	r3, r1
   218ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   218f0:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   218f4:	68e8      	ldr	r0, [r5, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   218f6:	612a      	str	r2, [r5, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   218f8:	930c      	str	r3, [sp, #48]	; 0x30
		union { uintptr_t x; socklen_t val; } parm5 = { .val = addrlen };
		return (ssize_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, parm5.x, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   218fa:	2230      	movs	r2, #48	; 0x30
   218fc:	4633      	mov	r3, r6
   218fe:	e9cd 6600 	strd	r6, r6, [sp]
   21902:	a902      	add	r1, sp, #8
   21904:	f01b fd77 	bl	3d3f6 <z_impl_zsock_sendto>
	if (ret < 0) {
   21908:	2800      	cmp	r0, #0
   2190a:	db0f      	blt.n	2192c <sntp_query+0x9c>
	struct sntp_pkt buf = { 0 };
   2190c:	4631      	mov	r1, r6
   2190e:	2230      	movs	r2, #48	; 0x30
   21910:	a80e      	add	r0, sp, #56	; 0x38
   21912:	f01f fe76 	bl	41602 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   21916:	68a9      	ldr	r1, [r5, #8]
		union { uintptr_t x; int val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   21918:	463a      	mov	r2, r7
   2191a:	4628      	mov	r0, r5
   2191c:	f01b fdf2 	bl	3d504 <z_impl_zsock_poll>
	if (status < 0) {
   21920:	42b0      	cmp	r0, r6
   21922:	da05      	bge.n	21930 <sntp_query+0xa0>
		return -errno;
   21924:	f01c f812 	bl	3d94c <__errno>
   21928:	6800      	ldr	r0, [r0, #0]
   2192a:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   2192c:	b01b      	add	sp, #108	; 0x6c
   2192e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status == 0) {
   21930:	d037      	beq.n	219a2 <sntp_query+0x112>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   21932:	68e8      	ldr	r0, [r5, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   21934:	2230      	movs	r2, #48	; 0x30
   21936:	4633      	mov	r3, r6
   21938:	e9cd 6600 	strd	r6, r6, [sp]
   2193c:	a90e      	add	r1, sp, #56	; 0x38
   2193e:	f01b fdb1 	bl	3d4a4 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   21942:	2800      	cmp	r0, #0
   21944:	dbee      	blt.n	21924 <sntp_query+0x94>
	if (rcvd != sizeof(struct sntp_pkt)) {
   21946:	2830      	cmp	r0, #48	; 0x30
   21948:	d12e      	bne.n	219a8 <sntp_query+0x118>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   2194a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2194c:	692a      	ldr	r2, [r5, #16]
   2194e:	ba1b      	rev	r3, r3
   21950:	429a      	cmp	r2, r3
   21952:	d002      	beq.n	2195a <sntp_query+0xca>
		return -EINVAL;
   21954:	f06f 0015 	mvn.w	r0, #21
   21958:	e7e8      	b.n	2192c <sntp_query+0x9c>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   2195a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   2195e:	f003 0307 	and.w	r3, r3, #7
   21962:	2b04      	cmp	r3, #4
   21964:	d1f6      	bne.n	21954 <sntp_query+0xc4>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   21966:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   2196a:	b303      	cbz	r3, 219ae <sntp_query+0x11e>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   2196c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2196e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   21970:	ba1b      	rev	r3, r3
   21972:	ba12      	rev	r2, r2
   21974:	ea53 0102 	orrs.w	r1, r3, r2
   21978:	d0ec      	beq.n	21954 <sntp_query+0xc4>
	if (ts & 0x80000000) {
   2197a:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   2197c:	60a2      	str	r2, [r4, #8]
	if (ts & 0x80000000) {
   2197e:	da0a      	bge.n	21996 <sntp_query+0x106>
		if (ts >= OFFSET_1970_JAN_1) {
   21980:	4a0f      	ldr	r2, [pc, #60]	; (219c0 <sntp_query+0x130>)
   21982:	4293      	cmp	r3, r2
   21984:	d9e6      	bls.n	21954 <sntp_query+0xc4>
			time->seconds = ts - OFFSET_1970_JAN_1;
   21986:	2000      	movs	r0, #0
   21988:	4a0e      	ldr	r2, [pc, #56]	; (219c4 <sntp_query+0x134>)
   2198a:	189b      	adds	r3, r3, r2
   2198c:	f140 32ff 	adc.w	r2, r0, #4294967295
   21990:	e9c4 3200 	strd	r3, r2, [r4]
   21994:	e7ca      	b.n	2192c <sntp_query+0x9c>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   21996:	2000      	movs	r0, #0
   21998:	4a0a      	ldr	r2, [pc, #40]	; (219c4 <sntp_query+0x134>)
   2199a:	441a      	add	r2, r3
   2199c:	e9c4 2000 	strd	r2, r0, [r4]
   219a0:	e7c4      	b.n	2192c <sntp_query+0x9c>
		return -ETIMEDOUT;
   219a2:	f06f 0073 	mvn.w	r0, #115	; 0x73
   219a6:	e7c1      	b.n	2192c <sntp_query+0x9c>
		return -EMSGSIZE;
   219a8:	f06f 0079 	mvn.w	r0, #121	; 0x79
   219ac:	e7be      	b.n	2192c <sntp_query+0x9c>
		return -EBUSY;
   219ae:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   219b2:	e7bb      	b.n	2192c <sntp_query+0x9c>
		return -EFAULT;
   219b4:	f06f 000d 	mvn.w	r0, #13
   219b8:	e7b8      	b.n	2192c <sntp_query+0x9c>
   219ba:	bf00      	nop
   219bc:	83aa7e80 	.word	0x83aa7e80
   219c0:	83aa7e7f 	.word	0x83aa7e7f
   219c4:	7c558180 	.word	0x7c558180

000219c8 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   219c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   219cc:	4605      	mov	r5, r0
   219ce:	460e      	mov	r6, r1
   219d0:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   219d2:	4c1c      	ldr	r4, [pc, #112]	; (21a44 <z_impl_zsock_socket+0x7c>)
   219d4:	f8df 9074 	ldr.w	r9, [pc, #116]	; 21a4c <z_impl_zsock_socket+0x84>
   219d8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 21a50 <z_impl_zsock_socket+0x88>
   219dc:	454c      	cmp	r4, r9
   219de:	d908      	bls.n	219f2 <z_impl_zsock_socket+0x2a>
   219e0:	4641      	mov	r1, r8
   219e2:	4819      	ldr	r0, [pc, #100]	; (21a48 <z_impl_zsock_socket+0x80>)
   219e4:	22d6      	movs	r2, #214	; 0xd6
   219e6:	f01b f938 	bl	3cc5a <assert_print>
   219ea:	21d6      	movs	r1, #214	; 0xd6
   219ec:	4640      	mov	r0, r8
   219ee:	f01b f92d 	bl	3cc4c <assert_post_action>
   219f2:	454c      	cmp	r4, r9
   219f4:	d307      	bcc.n	21a06 <z_impl_zsock_socket+0x3e>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   219f6:	f01b ffa9 	bl	3d94c <__errno>
   219fa:	236a      	movs	r3, #106	; 0x6a
   219fc:	6003      	str	r3, [r0, #0]
	return -1;
}
   219fe:	f04f 30ff 	mov.w	r0, #4294967295
   21a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   21a06:	6823      	ldr	r3, [r4, #0]
   21a08:	42ab      	cmp	r3, r5
   21a0a:	d000      	beq.n	21a0e <z_impl_zsock_socket+0x46>
   21a0c:	b9bb      	cbnz	r3, 21a3e <z_impl_zsock_socket+0x76>
		NET_ASSERT(sock_family->is_supported);
   21a0e:	6863      	ldr	r3, [r4, #4]
   21a10:	b943      	cbnz	r3, 21a24 <z_impl_zsock_socket+0x5c>
   21a12:	4641      	mov	r1, r8
   21a14:	480c      	ldr	r0, [pc, #48]	; (21a48 <z_impl_zsock_socket+0x80>)
   21a16:	22dc      	movs	r2, #220	; 0xdc
   21a18:	f01b f91f 	bl	3cc5a <assert_print>
   21a1c:	21dc      	movs	r1, #220	; 0xdc
   21a1e:	4640      	mov	r0, r8
   21a20:	f01b f914 	bl	3cc4c <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   21a24:	463a      	mov	r2, r7
   21a26:	4631      	mov	r1, r6
   21a28:	4628      	mov	r0, r5
   21a2a:	6863      	ldr	r3, [r4, #4]
   21a2c:	4798      	blx	r3
   21a2e:	b130      	cbz	r0, 21a3e <z_impl_zsock_socket+0x76>
		return sock_family->handler(family, type, proto);
   21a30:	463a      	mov	r2, r7
   21a32:	4631      	mov	r1, r6
   21a34:	4628      	mov	r0, r5
   21a36:	68a3      	ldr	r3, [r4, #8]
}
   21a38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   21a3c:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   21a3e:	340c      	adds	r4, #12
   21a40:	e7cc      	b.n	219dc <z_impl_zsock_socket+0x14>
   21a42:	bf00      	nop
   21a44:	000427c4 	.word	0x000427c4
   21a48:	00044263 	.word	0x00044263
   21a4c:	000427d0 	.word	0x000427d0
   21a50:	00044395 	.word	0x00044395

00021a54 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   21a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a58:	4606      	mov	r6, r0
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
   21a5a:	f04f 0800 	mov.w	r8, #0
{
   21a5e:	b09b      	sub	sp, #108	; 0x6c
   21a60:	9104      	str	r1, [sp, #16]
   21a62:	4610      	mov	r0, r2
   21a64:	4619      	mov	r1, r3
   21a66:	461d      	mov	r5, r3
   21a68:	4614      	mov	r4, r2

	end = sys_clock_timeout_end_calc(timeout);
   21a6a:	f01f fc40 	bl	412ee <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   21a6e:	46b1      	mov	r9, r6
	const struct fd_op_vtable *offl_vtable = NULL;
   21a70:	46c2      	mov	sl, r8
	bool offload = false;
   21a72:	4647      	mov	r7, r8
	pev = poll_events;
   21a74:	ab0b      	add	r3, sp, #44	; 0x2c
   21a76:	9308      	str	r3, [sp, #32]
	end = sys_clock_timeout_end_calc(timeout);
   21a78:	e9cd 0105 	strd	r0, r1, [sp, #20]
	for (pfd = fds, i = nfds; i--; pfd++) {
   21a7c:	9b04      	ldr	r3, [sp, #16]
   21a7e:	9303      	str	r3, [sp, #12]
   21a80:	9b03      	ldr	r3, [sp, #12]
   21a82:	bb03      	cbnz	r3, 21ac6 <zsock_poll_internal+0x72>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   21a84:	2f00      	cmp	r7, #0
   21a86:	d060      	beq.n	21b4a <zsock_poll_internal+0xf6>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21a88:	f1b5 3fff 	cmp.w	r5, #4294967295
   21a8c:	bf08      	it	eq
   21a8e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
			return (uint32_t)((t * to_hz + off) / from_hz);
   21a92:	bf16      	itet	ne
   21a94:	f44f 707a 	movne.w	r0, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
   21a98:	f04f 34ff 	moveq.w	r4, #4294967295
   21a9c:	fba4 4000 	umullne	r4, r0, r4, r0
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   21aa0:	9b04      	ldr	r3, [sp, #16]
   21aa2:	bf1c      	itt	ne
   21aa4:	0be4      	lsrne	r4, r4, #15
   21aa6:	ea44 4440 	orrne.w	r4, r4, r0, lsl #17
   21aaa:	9300      	str	r3, [sp, #0]
   21aac:	f44f 7282 	mov.w	r2, #260	; 0x104
   21ab0:	4633      	mov	r3, r6
   21ab2:	4641      	mov	r1, r8
   21ab4:	4650      	mov	r0, sl
   21ab6:	9401      	str	r4, [sp, #4]
   21ab8:	f01b fc3f 	bl	3d33a <z_fdtable_call_ioctl>
   21abc:	4607      	mov	r7, r0
			}
		}
	} while (retry);

	return ret;
}
   21abe:	4638      	mov	r0, r7
   21ac0:	b01b      	add	sp, #108	; 0x6c
   21ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
   21ac6:	f8d9 0000 	ldr.w	r0, [r9]
   21aca:	2800      	cmp	r0, #0
   21acc:	db37      	blt.n	21b3e <zsock_poll_internal+0xea>
	ctx = z_get_fd_obj_and_vtable(sock,
   21ace:	aa0a      	add	r2, sp, #40	; 0x28
   21ad0:	a909      	add	r1, sp, #36	; 0x24
   21ad2:	f7ff f845 	bl	20b60 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   21ad6:	9007      	str	r0, [sp, #28]
   21ad8:	b388      	cbz	r0, 21b3e <zsock_poll_internal+0xea>
		(void)k_mutex_lock(lock, K_FOREVER);
   21ada:	f04f 32ff 	mov.w	r2, #4294967295
   21ade:	f04f 33ff 	mov.w	r3, #4294967295
   21ae2:	980a      	ldr	r0, [sp, #40]	; 0x28
   21ae4:	f01b fc38 	bl	3d358 <k_mutex_lock.constprop.0.isra.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   21ae8:	ab1a      	add	r3, sp, #104	; 0x68
   21aea:	9301      	str	r3, [sp, #4]
   21aec:	ab08      	add	r3, sp, #32
   21aee:	9300      	str	r3, [sp, #0]
   21af0:	f44f 7281 	mov.w	r2, #258	; 0x102
   21af4:	464b      	mov	r3, r9
   21af6:	9907      	ldr	r1, [sp, #28]
   21af8:	9809      	ldr	r0, [sp, #36]	; 0x24
   21afa:	f01b fc1e 	bl	3d33a <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   21afe:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   21b02:	4683      	mov	fp, r0
		if (result == -EALREADY) {
   21b04:	d00d      	beq.n	21b22 <zsock_poll_internal+0xce>
		} else if (result == -EXDEV) {
   21b06:	f110 0f12 	cmn.w	r0, #18
   21b0a:	9907      	ldr	r1, [sp, #28]
   21b0c:	d10c      	bne.n	21b28 <zsock_poll_internal+0xd4>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   21b0e:	f1ba 0f00 	cmp.w	sl, #0
   21b12:	d102      	bne.n	21b1a <zsock_poll_internal+0xc6>
				offl_vtable = vtable;
   21b14:	4688      	mov	r8, r1
   21b16:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
			result = 0;
   21b1a:	f04f 0b00 	mov.w	fp, #0
			offload = true;
   21b1e:	2701      	movs	r7, #1
   21b20:	e002      	b.n	21b28 <zsock_poll_internal+0xd4>
			timeout = K_NO_WAIT;
   21b22:	2400      	movs	r4, #0
   21b24:	4625      	mov	r5, r4
			result = 0;
   21b26:	46a3      	mov	fp, r4
		k_mutex_unlock(lock);
   21b28:	980a      	ldr	r0, [sp, #40]	; 0x28
   21b2a:	f01b fc17 	bl	3d35c <k_mutex_unlock.isra.0>
		if (result < 0) {
   21b2e:	f1bb 0f00 	cmp.w	fp, #0
   21b32:	da04      	bge.n	21b3e <zsock_poll_internal+0xea>
				errno = -result;
   21b34:	f01b ff0a 	bl	3d94c <__errno>
   21b38:	f1cb 0300 	rsb	r3, fp, #0
   21b3c:	e036      	b.n	21bac <zsock_poll_internal+0x158>
	for (pfd = fds, i = nfds; i--; pfd++) {
   21b3e:	9b03      	ldr	r3, [sp, #12]
   21b40:	f109 0908 	add.w	r9, r9, #8
   21b44:	3b01      	subs	r3, #1
   21b46:	9303      	str	r3, [sp, #12]
   21b48:	e79a      	b.n	21a80 <zsock_poll_internal+0x2c>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   21b4a:	ea54 0305 	orrs.w	r3, r4, r5
   21b4e:	d010      	beq.n	21b72 <zsock_poll_internal+0x11e>
   21b50:	f1b5 3fff 	cmp.w	r5, #4294967295
   21b54:	bf08      	it	eq
   21b56:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   21b5a:	d00a      	beq.n	21b72 <zsock_poll_internal+0x11e>
		int64_t remaining = end - sys_clock_tick_get();
   21b5c:	f017 f9c8 	bl	38ef0 <sys_clock_tick_get>
   21b60:	9b05      	ldr	r3, [sp, #20]
   21b62:	1a1c      	subs	r4, r3, r0
   21b64:	9b06      	ldr	r3, [sp, #24]
   21b66:	eb63 0501 	sbc.w	r5, r3, r1
   21b6a:	2d00      	cmp	r5, #0
   21b6c:	bfbc      	itt	lt
   21b6e:	463c      	movlt	r4, r7
   21b70:	4625      	movlt	r5, r4
		ret = k_poll(poll_events, pev - poll_events, timeout);
   21b72:	9908      	ldr	r1, [sp, #32]
   21b74:	af0b      	add	r7, sp, #44	; 0x2c
   21b76:	4b3f      	ldr	r3, [pc, #252]	; (21c74 <zsock_poll_internal+0x220>)
   21b78:	1bc9      	subs	r1, r1, r7
   21b7a:	1089      	asrs	r1, r1, #2
   21b7c:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   21b7e:	462b      	mov	r3, r5
   21b80:	4622      	mov	r2, r4
   21b82:	4638      	mov	r0, r7
   21b84:	f017 fcce 	bl	39524 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   21b88:	f100 030b 	add.w	r3, r0, #11
   21b8c:	2b0b      	cmp	r3, #11
   21b8e:	4681      	mov	r9, r0
   21b90:	d808      	bhi.n	21ba4 <zsock_poll_internal+0x150>
   21b92:	f640 0881 	movw	r8, #2177	; 0x881
   21b96:	fa28 f803 	lsr.w	r8, r8, r3
   21b9a:	ea6f 0808 	mvn.w	r8, r8
   21b9e:	f018 0801 	ands.w	r8, r8, #1
   21ba2:	d007      	beq.n	21bb4 <zsock_poll_internal+0x160>
			errno = -ret;
   21ba4:	f01b fed2 	bl	3d94c <__errno>
   21ba8:	f1c9 0300 	rsb	r3, r9, #0
			return -1;
   21bac:	f04f 37ff 	mov.w	r7, #4294967295
			errno = -ret;
   21bb0:	6003      	str	r3, [r0, #0]
			return -1;
   21bb2:	e784      	b.n	21abe <zsock_poll_internal+0x6a>
		pev = poll_events;
   21bb4:	9708      	str	r7, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   21bb6:	46b1      	mov	r9, r6
		ret = 0;
   21bb8:	4647      	mov	r7, r8
		for (pfd = fds, i = nfds; i--; pfd++) {
   21bba:	f8dd a010 	ldr.w	sl, [sp, #16]
   21bbe:	f1ba 0f00 	cmp.w	sl, #0
   21bc2:	d11c      	bne.n	21bfe <zsock_poll_internal+0x1aa>
		if (retry) {
   21bc4:	f1b8 0f00 	cmp.w	r8, #0
   21bc8:	f43f af79 	beq.w	21abe <zsock_poll_internal+0x6a>
			if (ret > 0) {
   21bcc:	2f00      	cmp	r7, #0
   21bce:	f47f af76 	bne.w	21abe <zsock_poll_internal+0x6a>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21bd2:	ea54 0305 	orrs.w	r3, r4, r5
   21bd6:	f43f af72 	beq.w	21abe <zsock_poll_internal+0x6a>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21bda:	f1b5 3fff 	cmp.w	r5, #4294967295
   21bde:	bf08      	it	eq
   21be0:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   21be4:	d0c5      	beq.n	21b72 <zsock_poll_internal+0x11e>
				int64_t remaining = end - sys_clock_tick_get();
   21be6:	f017 f983 	bl	38ef0 <sys_clock_tick_get>
   21bea:	9b05      	ldr	r3, [sp, #20]
   21bec:	1a1c      	subs	r4, r3, r0
   21bee:	9b06      	ldr	r3, [sp, #24]
   21bf0:	eb63 0501 	sbc.w	r5, r3, r1
				if (remaining <= 0) {
   21bf4:	2c01      	cmp	r4, #1
   21bf6:	f175 0300 	sbcs.w	r3, r5, #0
   21bfa:	daba      	bge.n	21b72 <zsock_poll_internal+0x11e>
   21bfc:	e75f      	b.n	21abe <zsock_poll_internal+0x6a>
			pfd->revents = 0;
   21bfe:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   21c02:	f8d9 0000 	ldr.w	r0, [r9]
			pfd->revents = 0;
   21c06:	f8a9 3006 	strh.w	r3, [r9, #6]
			if (pfd->fd < 0) {
   21c0a:	2800      	cmp	r0, #0
   21c0c:	db29      	blt.n	21c62 <zsock_poll_internal+0x20e>
	ctx = z_get_fd_obj_and_vtable(sock,
   21c0e:	aa0a      	add	r2, sp, #40	; 0x28
   21c10:	a909      	add	r1, sp, #36	; 0x24
   21c12:	f7fe ffa5 	bl	20b60 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   21c16:	4683      	mov	fp, r0
   21c18:	b920      	cbnz	r0, 21c24 <zsock_poll_internal+0x1d0>
				pfd->revents = ZSOCK_POLLNVAL;
   21c1a:	2320      	movs	r3, #32
   21c1c:	f8a9 3006 	strh.w	r3, [r9, #6]
				ret++;
   21c20:	3701      	adds	r7, #1
   21c22:	e01e      	b.n	21c62 <zsock_poll_internal+0x20e>
			(void)k_mutex_lock(lock, K_FOREVER);
   21c24:	f04f 32ff 	mov.w	r2, #4294967295
   21c28:	f04f 33ff 	mov.w	r3, #4294967295
   21c2c:	980a      	ldr	r0, [sp, #40]	; 0x28
   21c2e:	f01b fb93 	bl	3d358 <k_mutex_lock.constprop.0.isra.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   21c32:	ab08      	add	r3, sp, #32
   21c34:	4659      	mov	r1, fp
   21c36:	f240 1203 	movw	r2, #259	; 0x103
   21c3a:	9300      	str	r3, [sp, #0]
   21c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
   21c3e:	464b      	mov	r3, r9
   21c40:	f01b fb7b 	bl	3d33a <z_fdtable_call_ioctl>
   21c44:	4683      	mov	fp, r0
			k_mutex_unlock(lock);
   21c46:	980a      	ldr	r0, [sp, #40]	; 0x28
   21c48:	f01b fb88 	bl	3d35c <k_mutex_unlock.isra.0>
			if (result == -EAGAIN) {
   21c4c:	f11b 0f0b 	cmn.w	fp, #11
   21c50:	d00c      	beq.n	21c6c <zsock_poll_internal+0x218>
			} else if (result != 0) {
   21c52:	f1bb 0f00 	cmp.w	fp, #0
   21c56:	f47f af6d 	bne.w	21b34 <zsock_poll_internal+0xe0>
			if (pfd->revents != 0) {
   21c5a:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   21c5e:	2b00      	cmp	r3, #0
   21c60:	d1de      	bne.n	21c20 <zsock_poll_internal+0x1cc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   21c62:	f109 0908 	add.w	r9, r9, #8
   21c66:	f10a 3aff 	add.w	sl, sl, #4294967295
   21c6a:	e7a8      	b.n	21bbe <zsock_poll_internal+0x16a>
				retry = true;
   21c6c:	f04f 0801 	mov.w	r8, #1
   21c70:	e7f7      	b.n	21c62 <zsock_poll_internal+0x20e>
   21c72:	bf00      	nop
   21c74:	cccccccd 	.word	0xcccccccd

00021c78 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   21c78:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   21c7a:	4604      	mov	r4, r0
   21c7c:	b940      	cbnz	r0, 21c90 <socket_offload_dns_register+0x18>
   21c7e:	490b      	ldr	r1, [pc, #44]	; (21cac <socket_offload_dns_register+0x34>)
   21c80:	480b      	ldr	r0, [pc, #44]	; (21cb0 <socket_offload_dns_register+0x38>)
   21c82:	2213      	movs	r2, #19
   21c84:	f01a ffe9 	bl	3cc5a <assert_print>
   21c88:	2113      	movs	r1, #19
   21c8a:	4808      	ldr	r0, [pc, #32]	; (21cac <socket_offload_dns_register+0x34>)
   21c8c:	f01a ffde 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   21c90:	4d08      	ldr	r5, [pc, #32]	; (21cb4 <socket_offload_dns_register+0x3c>)
   21c92:	682b      	ldr	r3, [r5, #0]
   21c94:	b143      	cbz	r3, 21ca8 <socket_offload_dns_register+0x30>
   21c96:	4905      	ldr	r1, [pc, #20]	; (21cac <socket_offload_dns_register+0x34>)
   21c98:	4805      	ldr	r0, [pc, #20]	; (21cb0 <socket_offload_dns_register+0x38>)
   21c9a:	2214      	movs	r2, #20
   21c9c:	f01a ffdd 	bl	3cc5a <assert_print>
   21ca0:	2114      	movs	r1, #20
   21ca2:	4802      	ldr	r0, [pc, #8]	; (21cac <socket_offload_dns_register+0x34>)
   21ca4:	f01a ffd2 	bl	3cc4c <assert_post_action>

	dns_offload = ops;
   21ca8:	602c      	str	r4, [r5, #0]
}
   21caa:	bd38      	pop	{r3, r4, r5, pc}
   21cac:	000443c9 	.word	0x000443c9
   21cb0:	00044263 	.word	0x00044263
   21cb4:	20019120 	.word	0x20019120

00021cb8 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   21cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   21cbc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 21d1c <socket_offload_getaddrinfo+0x64>
{
   21cc0:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dns_offload);
   21cc2:	f8d8 3000 	ldr.w	r3, [r8]
{
   21cc6:	4604      	mov	r4, r0
   21cc8:	460d      	mov	r5, r1
   21cca:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dns_offload);
   21ccc:	b943      	cbnz	r3, 21ce0 <socket_offload_getaddrinfo+0x28>
   21cce:	4911      	ldr	r1, [pc, #68]	; (21d14 <socket_offload_getaddrinfo+0x5c>)
   21cd0:	4811      	ldr	r0, [pc, #68]	; (21d18 <socket_offload_getaddrinfo+0x60>)
   21cd2:	221d      	movs	r2, #29
   21cd4:	f01a ffc1 	bl	3cc5a <assert_print>
   21cd8:	211d      	movs	r1, #29
   21cda:	480e      	ldr	r0, [pc, #56]	; (21d14 <socket_offload_getaddrinfo+0x5c>)
   21cdc:	f01a ffb6 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   21ce0:	f8d8 3000 	ldr.w	r3, [r8]
   21ce4:	681b      	ldr	r3, [r3, #0]
   21ce6:	b943      	cbnz	r3, 21cfa <socket_offload_getaddrinfo+0x42>
   21ce8:	490a      	ldr	r1, [pc, #40]	; (21d14 <socket_offload_getaddrinfo+0x5c>)
   21cea:	480b      	ldr	r0, [pc, #44]	; (21d18 <socket_offload_getaddrinfo+0x60>)
   21cec:	221e      	movs	r2, #30
   21cee:	f01a ffb4 	bl	3cc5a <assert_print>
   21cf2:	211e      	movs	r1, #30
   21cf4:	4807      	ldr	r0, [pc, #28]	; (21d14 <socket_offload_getaddrinfo+0x5c>)
   21cf6:	f01a ffa9 	bl	3cc4c <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   21cfa:	f8d8 3000 	ldr.w	r3, [r8]
   21cfe:	4632      	mov	r2, r6
   21d00:	f8d3 e000 	ldr.w	lr, [r3]
   21d04:	4629      	mov	r1, r5
   21d06:	463b      	mov	r3, r7
   21d08:	4620      	mov	r0, r4
   21d0a:	46f4      	mov	ip, lr
}
   21d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   21d10:	4760      	bx	ip
   21d12:	bf00      	nop
   21d14:	000443c9 	.word	0x000443c9
   21d18:	00044263 	.word	0x00044263
   21d1c:	20019120 	.word	0x20019120

00021d20 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   21d20:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   21d22:	4d0f      	ldr	r5, [pc, #60]	; (21d60 <socket_offload_freeaddrinfo+0x40>)
{
   21d24:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(dns_offload);
   21d26:	682b      	ldr	r3, [r5, #0]
   21d28:	b943      	cbnz	r3, 21d3c <socket_offload_freeaddrinfo+0x1c>
   21d2a:	490e      	ldr	r1, [pc, #56]	; (21d64 <socket_offload_freeaddrinfo+0x44>)
   21d2c:	480e      	ldr	r0, [pc, #56]	; (21d68 <socket_offload_freeaddrinfo+0x48>)
   21d2e:	2225      	movs	r2, #37	; 0x25
   21d30:	f01a ff93 	bl	3cc5a <assert_print>
   21d34:	2125      	movs	r1, #37	; 0x25
   21d36:	480b      	ldr	r0, [pc, #44]	; (21d64 <socket_offload_freeaddrinfo+0x44>)
   21d38:	f01a ff88 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   21d3c:	682b      	ldr	r3, [r5, #0]
   21d3e:	685b      	ldr	r3, [r3, #4]
   21d40:	b943      	cbnz	r3, 21d54 <socket_offload_freeaddrinfo+0x34>
   21d42:	4908      	ldr	r1, [pc, #32]	; (21d64 <socket_offload_freeaddrinfo+0x44>)
   21d44:	4808      	ldr	r0, [pc, #32]	; (21d68 <socket_offload_freeaddrinfo+0x48>)
   21d46:	2226      	movs	r2, #38	; 0x26
   21d48:	f01a ff87 	bl	3cc5a <assert_print>
   21d4c:	2126      	movs	r1, #38	; 0x26
   21d4e:	4805      	ldr	r0, [pc, #20]	; (21d64 <socket_offload_freeaddrinfo+0x44>)
   21d50:	f01a ff7c 	bl	3cc4c <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   21d54:	682b      	ldr	r3, [r5, #0]
   21d56:	4620      	mov	r0, r4
}
   21d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   21d5c:	685b      	ldr	r3, [r3, #4]
   21d5e:	4718      	bx	r3
   21d60:	20019120 	.word	0x20019120
   21d64:	000443c9 	.word	0x000443c9
   21d68:	00044263 	.word	0x00044263

00021d6c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   21d6c:	4b0c      	ldr	r3, [pc, #48]	; (21da0 <flash_area_open+0x34>)
{
   21d6e:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   21d70:	681b      	ldr	r3, [r3, #0]
   21d72:	b173      	cbz	r3, 21d92 <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   21d74:	4a0b      	ldr	r2, [pc, #44]	; (21da4 <flash_area_open+0x38>)
   21d76:	6815      	ldr	r5, [r2, #0]
   21d78:	2200      	movs	r2, #0
   21d7a:	42aa      	cmp	r2, r5
   21d7c:	db02      	blt.n	21d84 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   21d7e:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   21d82:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   21d84:	461c      	mov	r4, r3
   21d86:	f813 6b10 	ldrb.w	r6, [r3], #16
   21d8a:	4286      	cmp	r6, r0
   21d8c:	d004      	beq.n	21d98 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   21d8e:	3201      	adds	r2, #1
   21d90:	e7f3      	b.n	21d7a <flash_area_open+0xe>
		return -EACCES;
   21d92:	f06f 000c 	mvn.w	r0, #12
   21d96:	e7f4      	b.n	21d82 <flash_area_open+0x16>
	return 0;
   21d98:	2000      	movs	r0, #0
	*fap = area;
   21d9a:	600c      	str	r4, [r1, #0]
	return 0;
   21d9c:	e7f1      	b.n	21d82 <flash_area_open+0x16>
   21d9e:	bf00      	nop
   21da0:	20014618 	.word	0x20014618
   21da4:	00042c60 	.word	0x00042c60

00021da8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   21da8:	b570      	push	{r4, r5, r6, lr}
   21daa:	b088      	sub	sp, #32
   21dac:	4605      	mov	r5, r0
   21dae:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   21db0:	b2c0      	uxtb	r0, r0
   21db2:	4669      	mov	r1, sp
{
   21db4:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   21db6:	f7ff ffd9 	bl	21d6c <flash_area_open>
	if (rc < 0 || fa == NULL) {
   21dba:	2800      	cmp	r0, #0
   21dbc:	db1f      	blt.n	21dfe <flash_area_get_sectors+0x56>
   21dbe:	9b00      	ldr	r3, [sp, #0]
   21dc0:	b1eb      	cbz	r3, 21dfe <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   21dc2:	685a      	ldr	r2, [r3, #4]
	cb_data->ret_len = *cnt;
   21dc4:	6821      	ldr	r1, [r4, #0]
	cb_data->area_off = fa->fa_off;
   21dc6:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   21dc8:	689a      	ldr	r2, [r3, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
   21dca:	68d8      	ldr	r0, [r3, #12]
	cb_data->ret = ret;
   21dcc:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   21dd0:	2200      	movs	r2, #0
	cb_data->area_idx = idx;
   21dd2:	9501      	str	r5, [sp, #4]
	cb_data->status = 0;
   21dd4:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   21dd8:	9205      	str	r2, [sp, #20]
   21dda:	f014 f903 	bl	35fe4 <z_impl_device_get_binding>
   21dde:	4605      	mov	r5, r0
	flash_area_close(fa);
   21de0:	9800      	ldr	r0, [sp, #0]
   21de2:	f01b fbe2 	bl	3d5aa <flash_area_close>
	if (flash_dev == NULL) {
   21de6:	b16d      	cbz	r5, 21e04 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   21de8:	4628      	mov	r0, r5
   21dea:	4908      	ldr	r1, [pc, #32]	; (21e0c <flash_area_get_sectors+0x64>)
   21dec:	aa01      	add	r2, sp, #4
   21dee:	f01c fdfe 	bl	3e9ee <flash_page_foreach>
	if (cb_data->status == 0) {
   21df2:	9807      	ldr	r0, [sp, #28]
   21df4:	b908      	cbnz	r0, 21dfa <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   21df6:	9b05      	ldr	r3, [sp, #20]
   21df8:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   21dfa:	b008      	add	sp, #32
   21dfc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   21dfe:	f06f 0015 	mvn.w	r0, #21
   21e02:	e7fa      	b.n	21dfa <flash_area_get_sectors+0x52>
		return -ENODEV;
   21e04:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   21e08:	e7f7      	b.n	21dfa <flash_area_get_sectors+0x52>
   21e0a:	bf00      	nop
   21e0c:	0003d66f 	.word	0x0003d66f

00021e10 <find_flash_total_size>:
static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
   21e10:	6842      	ldr	r2, [r0, #4]
   21e12:	680b      	ldr	r3, [r1, #0]
{
   21e14:	b510      	push	{r4, lr}
	if (ctx->buf_len > info->size) {
   21e16:	4293      	cmp	r3, r2
{
   21e18:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
   21e1a:	d906      	bls.n	21e2a <find_flash_total_size+0x1a>
		LOG_ERR("Buffer size is bigger than page");
   21e1c:	4805      	ldr	r0, [pc, #20]	; (21e34 <find_flash_total_size+0x24>)
   21e1e:	2145      	movs	r1, #69	; 0x45
   21e20:	f01a ff55 	bl	3ccce <z_log_minimal_printk>
		ctx->total_size = 0;
   21e24:	2000      	movs	r0, #0
   21e26:	6060      	str	r0, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
   21e28:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
   21e2a:	684b      	ldr	r3, [r1, #4]
	return true;
   21e2c:	2001      	movs	r0, #1
	ctx->total_size += info->size;
   21e2e:	4413      	add	r3, r2
   21e30:	604b      	str	r3, [r1, #4]
	return true;
   21e32:	e7f9      	b.n	21e28 <find_flash_total_size+0x18>
   21e34:	00044404 	.word	0x00044404

00021e38 <stream_flash_erase_page>:
{
   21e38:	b530      	push	{r4, r5, lr}
   21e3a:	4605      	mov	r5, r0
   21e3c:	b085      	sub	sp, #20
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   21e3e:	68c0      	ldr	r0, [r0, #12]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   21e40:	aa01      	add	r2, sp, #4
   21e42:	f01c fdd0 	bl	3e9e6 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   21e46:	4604      	mov	r4, r0
   21e48:	b138      	cbz	r0, 21e5a <stream_flash_erase_page+0x22>
		LOG_ERR("Error %d while getting page info", rc);
   21e4a:	2145      	movs	r1, #69	; 0x45
   21e4c:	4602      	mov	r2, r0
   21e4e:	480c      	ldr	r0, [pc, #48]	; (21e80 <stream_flash_erase_page+0x48>)
		LOG_ERR("Error %d while erasing page", rc);
   21e50:	f01a ff3d 	bl	3ccce <z_log_minimal_printk>
}
   21e54:	4620      	mov	r0, r4
   21e56:	b005      	add	sp, #20
   21e58:	bd30      	pop	{r4, r5, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   21e5a:	9901      	ldr	r1, [sp, #4]
   21e5c:	6a2b      	ldr	r3, [r5, #32]
   21e5e:	428b      	cmp	r3, r1
   21e60:	d0f8      	beq.n	21e54 <stream_flash_erase_page+0x1c>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   21e62:	68e8      	ldr	r0, [r5, #12]
   21e64:	9a02      	ldr	r2, [sp, #8]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
   21e66:	6883      	ldr	r3, [r0, #8]
   21e68:	689b      	ldr	r3, [r3, #8]
   21e6a:	4798      	blx	r3
	if (rc != 0) {
   21e6c:	4604      	mov	r4, r0
   21e6e:	b118      	cbz	r0, 21e78 <stream_flash_erase_page+0x40>
		LOG_ERR("Error %d while erasing page", rc);
   21e70:	4602      	mov	r2, r0
   21e72:	2145      	movs	r1, #69	; 0x45
   21e74:	4803      	ldr	r0, [pc, #12]	; (21e84 <stream_flash_erase_page+0x4c>)
   21e76:	e7eb      	b.n	21e50 <stream_flash_erase_page+0x18>
		ctx->last_erased_page_start_offset = page.start_offset;
   21e78:	9b01      	ldr	r3, [sp, #4]
   21e7a:	622b      	str	r3, [r5, #32]
   21e7c:	e7ea      	b.n	21e54 <stream_flash_erase_page+0x1c>
   21e7e:	bf00      	nop
   21e80:	00044429 	.word	0x00044429
   21e84:	0004444f 	.word	0x0004444f

00021e88 <flash_sync>:
{
   21e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ctx->buf_bytes == 0) {
   21e8a:	6885      	ldr	r5, [r0, #8]
{
   21e8c:	4604      	mov	r4, r0
	if (ctx->buf_bytes == 0) {
   21e8e:	b175      	cbz	r5, 21eae <flash_sync+0x26>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   21e90:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
					     write_addr + ctx->buf_bytes - 1);
   21e94:	3d01      	subs	r5, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
   21e96:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
   21e98:	19a9      	adds	r1, r5, r6
   21e9a:	f7ff ffcd 	bl	21e38 <stream_flash_erase_page>
		if (rc < 0) {
   21e9e:	1e05      	subs	r5, r0, #0
   21ea0:	da07      	bge.n	21eb2 <flash_sync+0x2a>
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   21ea2:	4633      	mov	r3, r6
   21ea4:	462a      	mov	r2, r5
   21ea6:	2145      	movs	r1, #69	; 0x45
   21ea8:	482c      	ldr	r0, [pc, #176]	; (21f5c <flash_sync+0xd4>)
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   21eaa:	f01a ff10 	bl	3ccce <z_log_minimal_printk>
}
   21eae:	4628      	mov	r0, r5
   21eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fill_length = flash_get_write_block_size(ctx->fdev);
   21eb2:	68e0      	ldr	r0, [r4, #12]
   21eb4:	f01b fbf9 	bl	3d6aa <flash_get_write_block_size>
	if (ctx->buf_bytes % fill_length) {
   21eb8:	68a5      	ldr	r5, [r4, #8]
   21eba:	fbb5 f3f0 	udiv	r3, r5, r0
   21ebe:	fb00 5513 	mls	r5, r0, r3, r5
   21ec2:	b15d      	cbz	r5, 21edc <flash_sync+0x54>
		fill_length -= ctx->buf_bytes % fill_length;
   21ec4:	1b45      	subs	r5, r0, r5
		filler = flash_get_parameters(ctx->fdev)->erase_value;
   21ec6:	68e0      	ldr	r0, [r4, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   21ec8:	6883      	ldr	r3, [r0, #8]
   21eca:	68db      	ldr	r3, [r3, #12]
   21ecc:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   21ece:	6827      	ldr	r7, [r4, #0]
   21ed0:	68a3      	ldr	r3, [r4, #8]
__ssp_bos_icheck3(memset, void *, int)
   21ed2:	7901      	ldrb	r1, [r0, #4]
   21ed4:	462a      	mov	r2, r5
   21ed6:	18f8      	adds	r0, r7, r3
   21ed8:	f01f fb93 	bl	41602 <memset>
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   21edc:	68a3      	ldr	r3, [r4, #8]
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
   21ede:	68e0      	ldr	r0, [r4, #12]
   21ee0:	6822      	ldr	r2, [r4, #0]
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   21ee2:	442b      	add	r3, r5
	rc = api->write(dev, offset, data, len);
   21ee4:	6881      	ldr	r1, [r0, #8]
   21ee6:	684d      	ldr	r5, [r1, #4]
   21ee8:	4631      	mov	r1, r6
   21eea:	47a8      	blx	r5
	if (rc != 0) {
   21eec:	4605      	mov	r5, r0
   21eee:	b120      	cbz	r0, 21efa <flash_sync+0x72>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   21ef0:	4602      	mov	r2, r0
   21ef2:	4633      	mov	r3, r6
   21ef4:	2145      	movs	r1, #69	; 0x45
   21ef6:	481a      	ldr	r0, [pc, #104]	; (21f60 <flash_sync+0xd8>)
   21ef8:	e7d7      	b.n	21eaa <flash_sync+0x22>
	if (ctx->callback) {
   21efa:	69e3      	ldr	r3, [r4, #28]
   21efc:	b9e3      	cbnz	r3, 21f38 <flash_sync+0xb0>
	ctx->bytes_written += ctx->buf_bytes;
   21efe:	6923      	ldr	r3, [r4, #16]
   21f00:	68a2      	ldr	r2, [r4, #8]
   21f02:	4413      	add	r3, r2
   21f04:	6123      	str	r3, [r4, #16]
	ctx->buf_bytes = 0U;
   21f06:	2300      	movs	r3, #0
   21f08:	60a3      	str	r3, [r4, #8]
	return rc;
   21f0a:	e7d0      	b.n	21eae <flash_sync+0x26>
			ctx->buf[i] = ~ctx->buf[i];
   21f0c:	5c53      	ldrb	r3, [r2, r1]
   21f0e:	43db      	mvns	r3, r3
   21f10:	5453      	strb	r3, [r2, r1]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   21f12:	3101      	adds	r1, #1
   21f14:	68a3      	ldr	r3, [r4, #8]
			ctx->buf[i] = ~ctx->buf[i];
   21f16:	6822      	ldr	r2, [r4, #0]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   21f18:	4299      	cmp	r1, r3
   21f1a:	d3f7      	bcc.n	21f0c <flash_sync+0x84>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   21f1c:	68e0      	ldr	r0, [r4, #12]
	return api->read(dev, offset, data, len);
   21f1e:	6881      	ldr	r1, [r0, #8]
   21f20:	680f      	ldr	r7, [r1, #0]
   21f22:	4631      	mov	r1, r6
   21f24:	47b8      	blx	r7
		if (rc != 0) {
   21f26:	4607      	mov	r7, r0
   21f28:	b140      	cbz	r0, 21f3c <flash_sync+0xb4>
			LOG_ERR("flash read failed: %d", rc);
   21f2a:	4602      	mov	r2, r0
   21f2c:	2145      	movs	r1, #69	; 0x45
   21f2e:	480d      	ldr	r0, [pc, #52]	; (21f64 <flash_sync+0xdc>)
   21f30:	f01a fecd 	bl	3ccce <z_log_minimal_printk>
			return rc;
   21f34:	463d      	mov	r5, r7
   21f36:	e7ba      	b.n	21eae <flash_sync+0x26>
		for (int i = 0; i < ctx->buf_bytes; i++) {
   21f38:	4601      	mov	r1, r0
   21f3a:	e7eb      	b.n	21f14 <flash_sync+0x8c>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   21f3c:	4632      	mov	r2, r6
   21f3e:	69e3      	ldr	r3, [r4, #28]
   21f40:	68a1      	ldr	r1, [r4, #8]
   21f42:	6820      	ldr	r0, [r4, #0]
   21f44:	4798      	blx	r3
		if (rc != 0) {
   21f46:	4606      	mov	r6, r0
   21f48:	2800      	cmp	r0, #0
   21f4a:	d0d8      	beq.n	21efe <flash_sync+0x76>
			LOG_ERR("callback failed: %d", rc);
   21f4c:	4602      	mov	r2, r0
   21f4e:	2145      	movs	r1, #69	; 0x45
   21f50:	4805      	ldr	r0, [pc, #20]	; (21f68 <flash_sync+0xe0>)
   21f52:	f01a febc 	bl	3ccce <z_log_minimal_printk>
			return rc;
   21f56:	4635      	mov	r5, r6
   21f58:	e7a9      	b.n	21eae <flash_sync+0x26>
   21f5a:	bf00      	nop
   21f5c:	00044470 	.word	0x00044470
   21f60:	000444a3 	.word	0x000444a3
   21f64:	000444cc 	.word	0x000444cc
   21f68:	000444e7 	.word	0x000444e7

00021f6c <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   21f6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21f70:	460d      	mov	r5, r1
   21f72:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   21f76:	4691      	mov	r9, r2
   21f78:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   21f7a:	4604      	mov	r4, r0
   21f7c:	b920      	cbnz	r0, 21f88 <stream_flash_init+0x1c>
	}

	if ((offset + size) > inspect_flash_ctx.total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
		return -EFAULT;
   21f7e:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
   21f82:	b003      	add	sp, #12
   21f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
   21f88:	2900      	cmp	r1, #0
   21f8a:	d0f8      	beq.n	21f7e <stream_flash_init+0x12>
   21f8c:	2a00      	cmp	r2, #0
   21f8e:	d0f6      	beq.n	21f7e <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
   21f90:	9300      	str	r3, [sp, #0]
   21f92:	2300      	movs	r3, #0
	if (buf_len % flash_get_write_block_size(fdev)) {
   21f94:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
   21f96:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
   21f98:	f01b fb87 	bl	3d6aa <flash_get_write_block_size>
   21f9c:	fbb7 f3f0 	udiv	r3, r7, r0
   21fa0:	fb03 7010 	mls	r0, r3, r0, r7
   21fa4:	b120      	cbz	r0, 21fb0 <stream_flash_init+0x44>
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   21fa6:	2145      	movs	r1, #69	; 0x45
   21fa8:	4817      	ldr	r0, [pc, #92]	; (22008 <stream_flash_init+0x9c>)
		LOG_ERR("Incorrect parameter");
   21faa:	f01a fe90 	bl	3ccce <z_log_minimal_printk>
   21fae:	e7e6      	b.n	21f7e <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   21fb0:	466a      	mov	r2, sp
   21fb2:	4628      	mov	r0, r5
   21fb4:	4915      	ldr	r1, [pc, #84]	; (2200c <stream_flash_init+0xa0>)
   21fb6:	f01c fd1a 	bl	3e9ee <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
   21fba:	9b01      	ldr	r3, [sp, #4]
   21fbc:	2b00      	cmp	r3, #0
   21fbe:	d0de      	beq.n	21f7e <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
   21fc0:	eb06 0208 	add.w	r2, r6, r8
   21fc4:	4293      	cmp	r3, r2
   21fc6:	d202      	bcs.n	21fce <stream_flash_init+0x62>
		LOG_ERR("Incorrect parameter");
   21fc8:	2145      	movs	r1, #69	; 0x45
   21fca:	4811      	ldr	r0, [pc, #68]	; (22010 <stream_flash_init+0xa4>)
   21fcc:	e7ed      	b.n	21faa <stream_flash_init+0x3e>
	    offset % flash_get_write_block_size(fdev)) {
   21fce:	4628      	mov	r0, r5
   21fd0:	f01b fb6b 	bl	3d6aa <flash_get_write_block_size>
   21fd4:	fbb8 f3f0 	udiv	r3, r8, r0
   21fd8:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
   21fdc:	2800      	cmp	r0, #0
   21fde:	d1f3      	bne.n	21fc8 <stream_flash_init+0x5c>
	ctx->buf_len = buf_len;
   21fe0:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
   21fe4:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
   21fe6:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   21fe8:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   21fea:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   21fee:	b916      	cbnz	r6, 21ff6 <stream_flash_init+0x8a>
   21ff0:	9e01      	ldr	r6, [sp, #4]
   21ff2:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
   21ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return 0;
   21ff8:	2000      	movs	r0, #0
	ctx->callback = cb;
   21ffa:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
   21ffc:	f04f 33ff 	mov.w	r3, #4294967295
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   22000:	61a6      	str	r6, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
   22002:	6223      	str	r3, [r4, #32]
	return 0;
   22004:	e7bd      	b.n	21f82 <stream_flash_init+0x16>
   22006:	bf00      	nop
   22008:	00044500 	.word	0x00044500
   2200c:	00021e11 	.word	0x00021e11
   22010:	0004453c 	.word	0x0004453c

00022014 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   22014:	4b10      	ldr	r3, [pc, #64]	; (22058 <settings_save_one+0x44>)
{
   22016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   2201a:	681c      	ldr	r4, [r3, #0]
{
   2201c:	4605      	mov	r5, r0
   2201e:	460e      	mov	r6, r1
   22020:	4617      	mov	r7, r2
	if (!cs) {
   22022:	b1ac      	cbz	r4, 22050 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   22024:	f04f 32ff 	mov.w	r2, #4294967295
   22028:	f04f 33ff 	mov.w	r3, #4294967295
   2202c:	480b      	ldr	r0, [pc, #44]	; (2205c <settings_save_one+0x48>)
   2202e:	f014 fcdd 	bl	369ec <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   22032:	6863      	ldr	r3, [r4, #4]
   22034:	4632      	mov	r2, r6
   22036:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2203a:	4629      	mov	r1, r5
   2203c:	463b      	mov	r3, r7
   2203e:	4620      	mov	r0, r4
   22040:	47c0      	blx	r8
   22042:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   22044:	4805      	ldr	r0, [pc, #20]	; (2205c <settings_save_one+0x48>)
   22046:	f014 fda3 	bl	36b90 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   2204a:	4620      	mov	r0, r4
   2204c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   22050:	f06f 0401 	mvn.w	r4, #1
   22054:	e7f9      	b.n	2204a <settings_save_one+0x36>
   22056:	bf00      	nop
   22058:	2001912c 	.word	0x2001912c
   2205c:	20014f90 	.word	0x20014f90

00022060 <settings_src_register>:
	parent->next = child;
   22060:	2300      	movs	r3, #0
   22062:	6003      	str	r3, [r0, #0]
	return list->tail;
   22064:	4b04      	ldr	r3, [pc, #16]	; (22078 <settings_src_register+0x18>)
   22066:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   22068:	b912      	cbnz	r2, 22070 <settings_src_register+0x10>
	list->head = node;
   2206a:	e9c3 0000 	strd	r0, r0, [r3]
}
   2206e:	4770      	bx	lr
	parent->next = child;
   22070:	6010      	str	r0, [r2, #0]
	list->tail = node;
   22072:	6058      	str	r0, [r3, #4]
}
   22074:	4770      	bx	lr
   22076:	bf00      	nop
   22078:	20019124 	.word	0x20019124

0002207c <settings_dst_register>:
	settings_save_dst = cs;
   2207c:	4b01      	ldr	r3, [pc, #4]	; (22084 <settings_dst_register+0x8>)
   2207e:	6018      	str	r0, [r3, #0]
}
   22080:	4770      	bx	lr
   22082:	bf00      	nop
   22084:	2001912c 	.word	0x2001912c

00022088 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   22088:	2300      	movs	r3, #0
{
   2208a:	b530      	push	{r4, r5, lr}
   2208c:	b085      	sub	sp, #20
   2208e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   22090:	e9cd 3302 	strd	r3, r3, [sp, #8]
   22094:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   22096:	f04f 33ff 	mov.w	r3, #4294967295
   2209a:	f04f 32ff 	mov.w	r2, #4294967295
   2209e:	480b      	ldr	r0, [pc, #44]	; (220cc <settings_load_subtree+0x44>)
   220a0:	f014 fca4 	bl	369ec <z_impl_k_mutex_lock>
	return list->head;
   220a4:	4b0a      	ldr	r3, [pc, #40]	; (220d0 <settings_load_subtree+0x48>)
   220a6:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   220a8:	b134      	cbz	r4, 220b8 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   220aa:	6863      	ldr	r3, [r4, #4]
   220ac:	4620      	mov	r0, r4
   220ae:	681b      	ldr	r3, [r3, #0]
   220b0:	a901      	add	r1, sp, #4
   220b2:	4798      	blx	r3
	return node->next;
   220b4:	6824      	ldr	r4, [r4, #0]
   220b6:	e7f7      	b.n	220a8 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   220b8:	4628      	mov	r0, r5
   220ba:	f000 f8ad 	bl	22218 <settings_commit_subtree>
   220be:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   220c0:	4802      	ldr	r0, [pc, #8]	; (220cc <settings_load_subtree+0x44>)
   220c2:	f014 fd65 	bl	36b90 <z_impl_k_mutex_unlock>
}
   220c6:	4620      	mov	r0, r4
   220c8:	b005      	add	sp, #20
   220ca:	bd30      	pop	{r4, r5, pc}
   220cc:	20014f90 	.word	0x20014f90
   220d0:	20019124 	.word	0x20019124

000220d4 <settings_store_init>:
	list->head = NULL;
   220d4:	2200      	movs	r2, #0
   220d6:	4b02      	ldr	r3, [pc, #8]	; (220e0 <settings_store_init+0xc>)
	list->tail = NULL;
   220d8:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   220dc:	4770      	bx	lr
   220de:	bf00      	nop
   220e0:	20019124 	.word	0x20019124

000220e4 <settings_init>:
	list->head = NULL;
   220e4:	2200      	movs	r2, #0
   220e6:	4b02      	ldr	r3, [pc, #8]	; (220f0 <settings_init+0xc>)
	list->tail = NULL;
   220e8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   220ec:	f7ff bff2 	b.w	220d4 <settings_store_init>
   220f0:	20019130 	.word	0x20019130

000220f4 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   220f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   220f8:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   220fa:	460e      	mov	r6, r1
   220fc:	b109      	cbz	r1, 22102 <settings_parse_and_lookup+0xe>
		*next = NULL;
   220fe:	2300      	movs	r3, #0
   22100:	600b      	str	r3, [r1, #0]
   22102:	2500      	movs	r5, #0
   22104:	4c22      	ldr	r4, [pc, #136]	; (22190 <settings_parse_and_lookup+0x9c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   22106:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2219c <settings_parse_and_lookup+0xa8>
   2210a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 221a0 <settings_parse_and_lookup+0xac>
   2210e:	4544      	cmp	r4, r8
   22110:	d908      	bls.n	22124 <settings_parse_and_lookup+0x30>
   22112:	4649      	mov	r1, r9
   22114:	481f      	ldr	r0, [pc, #124]	; (22194 <settings_parse_and_lookup+0xa0>)
   22116:	2294      	movs	r2, #148	; 0x94
   22118:	f01a fd9f 	bl	3cc5a <assert_print>
   2211c:	2194      	movs	r1, #148	; 0x94
   2211e:	4648      	mov	r0, r9
   22120:	f01a fd94 	bl	3cc4c <assert_post_action>
   22124:	4544      	cmp	r4, r8
   22126:	d310      	bcc.n	2214a <settings_parse_and_lookup+0x56>
	return list->head;
   22128:	4b1b      	ldr	r3, [pc, #108]	; (22198 <settings_parse_and_lookup+0xa4>)
   2212a:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2212c:	b35c      	cbz	r4, 22186 <settings_parse_and_lookup+0x92>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2212e:	4638      	mov	r0, r7
   22130:	aa01      	add	r2, sp, #4
   22132:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   22136:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   22138:	f01b fb03 	bl	3d742 <settings_name_steq>
   2213c:	b308      	cbz	r0, 22182 <settings_parse_and_lookup+0x8e>
			continue;
		}
		if (!bestmatch) {
   2213e:	b9cd      	cbnz	r5, 22174 <settings_parse_and_lookup+0x80>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   22140:	b10e      	cbz	r6, 22146 <settings_parse_and_lookup+0x52>
				*next = tmpnext;
   22142:	9b01      	ldr	r3, [sp, #4]
   22144:	6033      	str	r3, [r6, #0]
   22146:	4625      	mov	r5, r4
   22148:	e01b      	b.n	22182 <settings_parse_and_lookup+0x8e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2214a:	4638      	mov	r0, r7
   2214c:	6821      	ldr	r1, [r4, #0]
   2214e:	aa01      	add	r2, sp, #4
   22150:	f01b faf7 	bl	3d742 <settings_name_steq>
   22154:	b160      	cbz	r0, 22170 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   22156:	b925      	cbnz	r5, 22162 <settings_parse_and_lookup+0x6e>
			if (next) {
   22158:	b10e      	cbz	r6, 2215e <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   2215a:	9b01      	ldr	r3, [sp, #4]
   2215c:	6033      	str	r3, [r6, #0]
   2215e:	4625      	mov	r5, r4
   22160:	e006      	b.n	22170 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   22162:	2200      	movs	r2, #0
   22164:	6829      	ldr	r1, [r5, #0]
   22166:	6820      	ldr	r0, [r4, #0]
   22168:	f01b faeb 	bl	3d742 <settings_name_steq>
   2216c:	2800      	cmp	r0, #0
   2216e:	d1f3      	bne.n	22158 <settings_parse_and_lookup+0x64>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   22170:	3414      	adds	r4, #20
   22172:	e7cc      	b.n	2210e <settings_parse_and_lookup+0x1a>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   22174:	2200      	movs	r2, #0
   22176:	6829      	ldr	r1, [r5, #0]
   22178:	6820      	ldr	r0, [r4, #0]
   2217a:	f01b fae2 	bl	3d742 <settings_name_steq>
   2217e:	2800      	cmp	r0, #0
   22180:	d1de      	bne.n	22140 <settings_parse_and_lookup+0x4c>
	return node->next;
   22182:	6964      	ldr	r4, [r4, #20]
   22184:	e7d2      	b.n	2212c <settings_parse_and_lookup+0x38>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   22186:	4628      	mov	r0, r5
   22188:	b003      	add	sp, #12
   2218a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2218e:	bf00      	nop
   22190:	000427d0 	.word	0x000427d0
   22194:	00044263 	.word	0x00044263
   22198:	20019130 	.word	0x20019130
   2219c:	0004280c 	.word	0x0004280c
   221a0:	00044562 	.word	0x00044562

000221a4 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   221a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   221a8:	b086      	sub	sp, #24
   221aa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   221ac:	4604      	mov	r4, r0
   221ae:	460d      	mov	r5, r1
   221b0:	4616      	mov	r6, r2
	int rc;
	const char *name_key = name;
   221b2:	9005      	str	r0, [sp, #20]

	if (load_arg && load_arg->subtree &&
   221b4:	b1bf      	cbz	r7, 221e6 <settings_call_set_handler+0x42>
   221b6:	6839      	ldr	r1, [r7, #0]
   221b8:	b181      	cbz	r1, 221dc <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   221ba:	aa05      	add	r2, sp, #20
   221bc:	9303      	str	r3, [sp, #12]
   221be:	f01b fac0 	bl	3d742 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   221c2:	9b03      	ldr	r3, [sp, #12]
   221c4:	b950      	cbnz	r0, 221dc <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   221c6:	2000      	movs	r0, #0
   221c8:	e005      	b.n	221d6 <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   221ca:	68ba      	ldr	r2, [r7, #8]
   221cc:	4629      	mov	r1, r5
   221ce:	9200      	str	r2, [sp, #0]
   221d0:	9805      	ldr	r0, [sp, #20]
   221d2:	4632      	mov	r2, r6
   221d4:	47c0      	blx	r8
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   221d6:	b006      	add	sp, #24
   221d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (load_arg && load_arg->cb) {
   221dc:	f8d7 8004 	ldr.w	r8, [r7, #4]
   221e0:	f1b8 0f00 	cmp.w	r8, #0
   221e4:	d1f1      	bne.n	221ca <settings_call_set_handler+0x26>
		ch = settings_parse_and_lookup(name, &name_key);
   221e6:	4620      	mov	r0, r4
   221e8:	a905      	add	r1, sp, #20
   221ea:	9303      	str	r3, [sp, #12]
   221ec:	f7ff ff82 	bl	220f4 <settings_parse_and_lookup>
		if (!ch) {
   221f0:	2800      	cmp	r0, #0
   221f2:	d0e8      	beq.n	221c6 <settings_call_set_handler+0x22>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   221f4:	6887      	ldr	r7, [r0, #8]
   221f6:	9b03      	ldr	r3, [sp, #12]
   221f8:	4632      	mov	r2, r6
   221fa:	4629      	mov	r1, r5
   221fc:	9805      	ldr	r0, [sp, #20]
   221fe:	47b8      	blx	r7
		if (rc != 0) {
   22200:	4603      	mov	r3, r0
   22202:	2800      	cmp	r0, #0
   22204:	d0df      	beq.n	221c6 <settings_call_set_handler+0x22>
			LOG_ERR("set-value failure. key: %s error(%d)",
   22206:	4622      	mov	r2, r4
   22208:	2145      	movs	r1, #69	; 0x45
   2220a:	4802      	ldr	r0, [pc, #8]	; (22214 <settings_call_set_handler+0x70>)
   2220c:	f01a fd5f 	bl	3ccce <z_log_minimal_printk>
   22210:	e7d9      	b.n	221c6 <settings_call_set_handler+0x22>
   22212:	bf00      	nop
   22214:	00044594 	.word	0x00044594

00022218 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   22218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2221c:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
   2221e:	2500      	movs	r5, #0

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   22220:	4c1d      	ldr	r4, [pc, #116]	; (22298 <settings_commit_subtree+0x80>)
   22222:	4f1e      	ldr	r7, [pc, #120]	; (2229c <settings_commit_subtree+0x84>)
   22224:	f8df 8080 	ldr.w	r8, [pc, #128]	; 222a8 <settings_commit_subtree+0x90>
   22228:	42bc      	cmp	r4, r7
   2222a:	d908      	bls.n	2223e <settings_commit_subtree+0x26>
   2222c:	4641      	mov	r1, r8
   2222e:	481c      	ldr	r0, [pc, #112]	; (222a0 <settings_commit_subtree+0x88>)
   22230:	22f4      	movs	r2, #244	; 0xf4
   22232:	f01a fd12 	bl	3cc5a <assert_print>
   22236:	21f4      	movs	r1, #244	; 0xf4
   22238:	4640      	mov	r0, r8
   2223a:	f01a fd07 	bl	3cc4c <assert_post_action>
   2223e:	42bc      	cmp	r4, r7
   22240:	d308      	bcc.n	22254 <settings_commit_subtree+0x3c>
	return list->head;
   22242:	4b18      	ldr	r3, [pc, #96]	; (222a4 <settings_commit_subtree+0x8c>)
   22244:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   22246:	b324      	cbz	r4, 22292 <settings_commit_subtree+0x7a>
   22248:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2224a:	b9ae      	cbnz	r6, 22278 <settings_commit_subtree+0x60>
			continue;
		}
		if (ch->h_commit) {
   2224c:	68e3      	ldr	r3, [r4, #12]
   2224e:	b9db      	cbnz	r3, 22288 <settings_commit_subtree+0x70>
	return node->next;
   22250:	6964      	ldr	r4, [r4, #20]
   22252:	e7f8      	b.n	22246 <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   22254:	b91e      	cbnz	r6, 2225e <settings_commit_subtree+0x46>
		if (ch->h_commit) {
   22256:	68e3      	ldr	r3, [r4, #12]
   22258:	b94b      	cbnz	r3, 2226e <settings_commit_subtree+0x56>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2225a:	3414      	adds	r4, #20
   2225c:	e7e4      	b.n	22228 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2225e:	2200      	movs	r2, #0
   22260:	4631      	mov	r1, r6
   22262:	6820      	ldr	r0, [r4, #0]
   22264:	f01b fa6d 	bl	3d742 <settings_name_steq>
   22268:	2800      	cmp	r0, #0
   2226a:	d1f4      	bne.n	22256 <settings_commit_subtree+0x3e>
   2226c:	e7f5      	b.n	2225a <settings_commit_subtree+0x42>
			rc2 = ch->h_commit();
   2226e:	4798      	blx	r3
				rc = rc2;
   22270:	2d00      	cmp	r5, #0
   22272:	bf08      	it	eq
   22274:	4605      	moveq	r5, r0
   22276:	e7f0      	b.n	2225a <settings_commit_subtree+0x42>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   22278:	2200      	movs	r2, #0
   2227a:	4631      	mov	r1, r6
   2227c:	6820      	ldr	r0, [r4, #0]
   2227e:	f01b fa60 	bl	3d742 <settings_name_steq>
   22282:	2800      	cmp	r0, #0
   22284:	d1e2      	bne.n	2224c <settings_commit_subtree+0x34>
   22286:	e7e3      	b.n	22250 <settings_commit_subtree+0x38>
			rc2 = ch->h_commit();
   22288:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   2228a:	2d00      	cmp	r5, #0
   2228c:	bf08      	it	eq
   2228e:	4605      	moveq	r5, r0
   22290:	e7de      	b.n	22250 <settings_commit_subtree+0x38>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   22292:	4628      	mov	r0, r5
   22294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22298:	000427d0 	.word	0x000427d0
   2229c:	0004280c 	.word	0x0004280c
   222a0:	00044263 	.word	0x00044263
   222a4:	20019130 	.word	0x20019130
   222a8:	00044562 	.word	0x00044562

000222ac <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   222ac:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   222ae:	4c06      	ldr	r4, [pc, #24]	; (222c8 <settings_subsys_init+0x1c>)
   222b0:	7823      	ldrb	r3, [r4, #0]
   222b2:	b93b      	cbnz	r3, 222c4 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   222b4:	f7ff ff16 	bl	220e4 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   222b8:	f000 fa94 	bl	227e4 <settings_backend_init>

	if (!err) {
   222bc:	b908      	cbnz	r0, 222c2 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   222be:	2301      	movs	r3, #1
   222c0:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   222c2:	bd10      	pop	{r4, pc}
		return 0;
   222c4:	2000      	movs	r0, #0
   222c6:	e7fc      	b.n	222c2 <settings_subsys_init+0x16>
   222c8:	2001a5a2 	.word	0x2001a5a2

000222cc <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
   222cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	uint8_t rbs = settings_io_cb.rwbs;
   222d0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 22384 <settings_line_raw_read_until+0xb8>
{
   222d4:	b08b      	sub	sp, #44	; 0x2c
   222d6:	9302      	str	r3, [sp, #8]
	uint8_t rbs = settings_io_cb.rwbs;
   222d8:	f89a 300c 	ldrb.w	r3, [sl, #12]
{
   222dc:	4606      	mov	r6, r0
   222de:	4688      	mov	r8, r1
	off_t off;
	int rc = -EINVAL;

	if (len_req == 0) {
   222e0:	4615      	mov	r5, r2
	uint8_t rbs = settings_io_cb.rwbs;
   222e2:	9301      	str	r3, [sp, #4]
	if (len_req == 0) {
   222e4:	2a00      	cmp	r2, #0
   222e6:	d046      	beq.n	22376 <settings_line_raw_read_until+0xaa>
   222e8:	4617      	mov	r7, r2
	rem_size = len_req;

	while (rem_size) {
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
   222ea:	2310      	movs	r3, #16
   222ec:	9305      	str	r3, [sp, #20]
		off = seek / rbs * rbs;
   222ee:	9b01      	ldr	r3, [sp, #4]
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   222f0:	f8da 4000 	ldr.w	r4, [sl]
		off = seek / rbs * rbs;
   222f4:	fb96 fbf3 	sdiv	fp, r6, r3
   222f8:	fb03 fb0b 	mul.w	fp, r3, fp
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   222fc:	9815      	ldr	r0, [sp, #84]	; 0x54
   222fe:	4659      	mov	r1, fp
   22300:	ab05      	add	r3, sp, #20
   22302:	aa06      	add	r2, sp, #24
   22304:	47a0      	blx	r4
		if (rc) {
   22306:	4604      	mov	r4, r0
   22308:	2800      	cmp	r0, #0
   2230a:	d137      	bne.n	2237c <settings_line_raw_read_until+0xb0>
			return -EIO;
		}

		off = seek - off;
		len = read_size - off;
   2230c:	9a05      	ldr	r2, [sp, #20]
   2230e:	eba6 0b0b 	sub.w	fp, r6, fp
   22312:	eba2 020b 	sub.w	r2, r2, fp
		len = MIN(rem_size, len);
   22316:	42ba      	cmp	r2, r7
   22318:	bf28      	it	cs
   2231a:	463a      	movcs	r2, r7

		if (until_char != NULL) {
			char *pend;
			pend = memchr(&temp_buf[off], *until_char, len);
   2231c:	ab06      	add	r3, sp, #24
   2231e:	449b      	add	fp, r3
		if (until_char != NULL) {
   22320:	9b14      	ldr	r3, [sp, #80]	; 0x50
		len = MIN(rem_size, len);
   22322:	4691      	mov	r9, r2
		if (until_char != NULL) {
   22324:	b31b      	cbz	r3, 2236e <settings_line_raw_read_until+0xa2>
			pend = memchr(&temp_buf[off], *until_char, len);
   22326:	4658      	mov	r0, fp
   22328:	7819      	ldrb	r1, [r3, #0]
   2232a:	f01f f92c 	bl	41586 <memchr>
			if (pend != NULL) {
   2232e:	b300      	cbz	r0, 22372 <settings_line_raw_read_until+0xa6>
				len = pend - &temp_buf[off];
				rc = 1; /* will cause loop expiration */
   22330:	2301      	movs	r3, #1
				len = pend - &temp_buf[off];
   22332:	eba0 090b 	sub.w	r9, r0, fp
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22336:	4659      	mov	r1, fp
   22338:	464a      	mov	r2, r9
   2233a:	4640      	mov	r0, r8
   2233c:	9303      	str	r3, [sp, #12]
   2233e:	f01f f940 	bl	415c2 <memcpy>

		memcpy(out, &temp_buf[off], len);

		rem_size -= len;

		if (exp_size > read_size || rc) {
   22342:	9905      	ldr	r1, [sp, #20]
   22344:	9b03      	ldr	r3, [sp, #12]
   22346:	290f      	cmp	r1, #15
		rem_size -= len;
   22348:	eba7 0709 	sub.w	r7, r7, r9
		if (exp_size > read_size || rc) {
   2234c:	d904      	bls.n	22358 <settings_line_raw_read_until+0x8c>
   2234e:	b91b      	cbnz	r3, 22358 <settings_line_raw_read_until+0x8c>
			break;
		}

		out += len;
   22350:	44c8      	add	r8, r9
		seek += len;
   22352:	444e      	add	r6, r9
	while (rem_size) {
   22354:	2f00      	cmp	r7, #0
   22356:	d1c8      	bne.n	222ea <settings_line_raw_read_until+0x1e>
	}

	*len_read = len_req - rem_size;
   22358:	9a02      	ldr	r2, [sp, #8]
   2235a:	1bed      	subs	r5, r5, r7
   2235c:	6015      	str	r5, [r2, #0]

	if (until_char != NULL) {
   2235e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   22360:	b10a      	cbz	r2, 22366 <settings_line_raw_read_until+0x9a>
		return (rc) ? 0 : 1;
   22362:	f083 0401 	eor.w	r4, r3, #1
	}

	return 0;
}
   22366:	4620      	mov	r0, r4
   22368:	b00b      	add	sp, #44	; 0x2c
   2236a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   2236e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   22370:	e7e1      	b.n	22336 <settings_line_raw_read_until+0x6a>
   22372:	4623      	mov	r3, r4
   22374:	e7df      	b.n	22336 <settings_line_raw_read_until+0x6a>
		return -EINVAL;
   22376:	f06f 0415 	mvn.w	r4, #21
   2237a:	e7f4      	b.n	22366 <settings_line_raw_read_until+0x9a>
			return -EIO;
   2237c:	f06f 0404 	mvn.w	r4, #4
   22380:	e7f1      	b.n	22366 <settings_line_raw_read_until+0x9a>
   22382:	bf00      	nop
   22384:	20019138 	.word	0x20019138

00022388 <settings_line_write>:
{
   22388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t wbs = settings_io_cb.rwbs;
   2238c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 2244c <settings_line_write+0xc4>
{
   22390:	b087      	sub	sp, #28
	uint8_t wbs = settings_io_cb.rwbs;
   22392:	f899 800c 	ldrb.w	r8, [r9, #12]
{
   22396:	4682      	mov	sl, r0
   22398:	468b      	mov	fp, r1
   2239a:	4617      	mov	r7, r2
   2239c:	9301      	str	r3, [sp, #4]
	rem = strlen(name);
   2239e:	f7fa ff50 	bl	1d242 <strlen>
	w_size = rem - rem % wbs;
   223a2:	fbb0 f4f8 	udiv	r4, r0, r8
   223a6:	fb08 0414 	mls	r4, r8, r4, r0
   223aa:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
   223ac:	462b      	mov	r3, r5
   223ae:	f8d9 6004 	ldr.w	r6, [r9, #4]
   223b2:	4652      	mov	r2, sl
   223b4:	9901      	ldr	r1, [sp, #4]
   223b6:	9810      	ldr	r0, [sp, #64]	; 0x40
   223b8:	47b0      	blx	r6
	w_loc += w_size;
   223ba:	9b01      	ldr	r3, [sp, #4]
   223bc:	442b      	add	r3, r5
   223be:	461e      	mov	r6, r3
	if (rem) {
   223c0:	b134      	cbz	r4, 223d0 <settings_line_write+0x48>
		memcpy(w_buf, name, rem);
   223c2:	2310      	movs	r3, #16
   223c4:	4622      	mov	r2, r4
   223c6:	eb0a 0105 	add.w	r1, sl, r5
   223ca:	a802      	add	r0, sp, #8
   223cc:	f01f f906 	bl	415dc <__memcpy_chk>
	w_buf[rem] = '=';
   223d0:	223d      	movs	r2, #61	; 0x3d
   223d2:	ab06      	add	r3, sp, #24
   223d4:	4423      	add	r3, r4
   223d6:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
   223da:	f104 0a01 	add.w	sl, r4, #1
		while (w_size < sizeof(w_buf)) {
   223de:	f1ba 0f0f 	cmp.w	sl, #15
   223e2:	d90b      	bls.n	223fc <settings_line_write+0x74>
   223e4:	2400      	movs	r4, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
   223e6:	4653      	mov	r3, sl
   223e8:	4631      	mov	r1, r6
   223ea:	f8d9 5004 	ldr.w	r5, [r9, #4]
   223ee:	9810      	ldr	r0, [sp, #64]	; 0x40
   223f0:	aa02      	add	r2, sp, #8
   223f2:	47a8      	blx	r5
		if (rc) {
   223f4:	bb20      	cbnz	r0, 22440 <settings_line_write+0xb8>
		if (done) {
   223f6:	bb2c      	cbnz	r4, 22444 <settings_line_write+0xbc>
		w_loc += w_size;
   223f8:	4456      	add	r6, sl
		w_size = 0;
   223fa:	46a2      	mov	sl, r4
			if (rem) {
   223fc:	b17f      	cbz	r7, 2241e <settings_line_write+0x96>
				add = MIN(rem, sizeof(w_buf) - w_size);
   223fe:	f1ca 0410 	rsb	r4, sl, #16
   22402:	42bc      	cmp	r4, r7
   22404:	bf28      	it	cs
   22406:	463c      	movcs	r4, r7
   22408:	ab02      	add	r3, sp, #8
   2240a:	4659      	mov	r1, fp
   2240c:	eb03 000a 	add.w	r0, r3, sl
   22410:	4622      	mov	r2, r4
   22412:	f01f f8d6 	bl	415c2 <memcpy>
				value += add;
   22416:	44a3      	add	fp, r4
				rem -= add;
   22418:	1b3f      	subs	r7, r7, r4
				w_size += add;
   2241a:	44a2      	add	sl, r4
   2241c:	e7df      	b.n	223de <settings_line_write+0x56>
				add = (w_size) % wbs;
   2241e:	fbba f4f8 	udiv	r4, sl, r8
   22422:	fb08 a414 	mls	r4, r8, r4, sl
				if (add) {
   22426:	b14c      	cbz	r4, 2243c <settings_line_write+0xb4>
					add = wbs - add;
   22428:	eba8 0404 	sub.w	r4, r8, r4
__ssp_bos_icheck3(memset, void *, int)
   2242c:	ab02      	add	r3, sp, #8
   2242e:	eb03 000a 	add.w	r0, r3, sl
   22432:	4622      	mov	r2, r4
   22434:	4639      	mov	r1, r7
   22436:	f01f f8e4 	bl	41602 <memset>
					w_size += add;
   2243a:	44a2      	add	sl, r4
				done = true;
   2243c:	2401      	movs	r4, #1
   2243e:	e7d2      	b.n	223e6 <settings_line_write+0x5e>
			return -EIO;
   22440:	f06f 0004 	mvn.w	r0, #4
}
   22444:	b007      	add	sp, #28
   22446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2244a:	bf00      	nop
   2244c:	20019138 	.word	0x20019138

00022450 <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
   22450:	4b03      	ldr	r3, [pc, #12]	; (22460 <settings_line_val_get_len+0x10>)
{
   22452:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   22454:	689b      	ldr	r3, [r3, #8]
{
   22456:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   22458:	4608      	mov	r0, r1
   2245a:	4798      	blx	r3

	return len - val_off;
}
   2245c:	1b00      	subs	r0, r0, r4
   2245e:	bd10      	pop	{r4, pc}
   22460:	20019138 	.word	0x20019138

00022464 <settings_line_entry_copy>:
}


int settings_line_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			     off_t src_off, size_t len)
{
   22464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22468:	4680      	mov	r8, r0
   2246a:	468a      	mov	sl, r1
   2246c:	4691      	mov	r9, r2
   2246e:	461d      	mov	r5, r3
	int rc = -EINVAL;
   22470:	f06f 0015 	mvn.w	r0, #21
{
   22474:	b086      	sub	sp, #24
   22476:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   22478:	4f13      	ldr	r7, [pc, #76]	; (224c8 <settings_line_entry_copy+0x64>)
	while (len) {
   2247a:	b916      	cbnz	r6, 22482 <settings_line_entry_copy+0x1e>
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
   2247c:	b006      	add	sp, #24
   2247e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
   22482:	2e10      	cmp	r6, #16
   22484:	4633      	mov	r3, r6
   22486:	bf28      	it	cs
   22488:	2310      	movcs	r3, #16
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   2248a:	4629      	mov	r1, r5
		chunk_size = MIN(len, sizeof(buf));
   2248c:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   2248e:	4648      	mov	r0, r9
   22490:	683c      	ldr	r4, [r7, #0]
   22492:	ab01      	add	r3, sp, #4
   22494:	aa02      	add	r2, sp, #8
   22496:	47a0      	blx	r4
		if (rc) {
   22498:	2800      	cmp	r0, #0
   2249a:	d1ef      	bne.n	2247c <settings_line_entry_copy+0x18>
		size_t write_size = chunk_size;
   2249c:	9b01      	ldr	r3, [sp, #4]
		if (chunk_size % settings_io_cb.rwbs) {
   2249e:	7b39      	ldrb	r1, [r7, #12]
   224a0:	fbb3 f2f1 	udiv	r2, r3, r1
   224a4:	fb01 3212 	mls	r2, r1, r2, r3
   224a8:	b10a      	cbz	r2, 224ae <settings_line_entry_copy+0x4a>
			write_size += settings_io_cb.rwbs -
   224aa:	440b      	add	r3, r1
   224ac:	1a9b      	subs	r3, r3, r2
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, write_size);
   224ae:	4651      	mov	r1, sl
   224b0:	4640      	mov	r0, r8
   224b2:	687c      	ldr	r4, [r7, #4]
   224b4:	aa02      	add	r2, sp, #8
   224b6:	47a0      	blx	r4
		if (rc) {
   224b8:	2800      	cmp	r0, #0
   224ba:	d1df      	bne.n	2247c <settings_line_entry_copy+0x18>
		src_off += chunk_size;
   224bc:	9b01      	ldr	r3, [sp, #4]
   224be:	441d      	add	r5, r3
		dst_off += chunk_size;
   224c0:	449a      	add	sl, r3
		len -= chunk_size;
   224c2:	1af6      	subs	r6, r6, r3
   224c4:	e7d9      	b.n	2247a <settings_line_entry_copy+0x16>
   224c6:	bf00      	nop
   224c8:	20019138 	.word	0x20019138

000224cc <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  uint8_t io_rwbs)
{
   224cc:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
   224ce:	4c03      	ldr	r4, [pc, #12]	; (224dc <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
   224d0:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
   224d4:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
   224d6:	7323      	strb	r3, [r4, #12]
}
   224d8:	bd10      	pop	{r4, pc}
   224da:	bf00      	nop
   224dc:	20019138 	.word	0x20019138

000224e0 <settings_line_load_cb>:
	return -1;
}

int settings_line_load_cb(const char *name, void *val_read_cb_ctx, off_t off,
			  void *cb_arg)
{
   224e0:	b530      	push	{r4, r5, lr}
   224e2:	4604      	mov	r4, r0
   224e4:	b085      	sub	sp, #20
   224e6:	4610      	mov	r0, r2
   224e8:	461d      	mov	r5, r3
	size_t len;
	struct settings_line_read_value_cb_ctx value_ctx;
	struct settings_load_arg *arg = cb_arg;
	value_ctx.read_cb_ctx = val_read_cb_ctx;
	value_ctx.off = off;
   224ea:	e9cd 1202 	strd	r1, r2, [sp, #8]
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   224ee:	f7ff ffaf 	bl	22450 <settings_line_val_get_len>

	return settings_call_set_handler(name, len, settings_line_read_cb,
   224f2:	4a04      	ldr	r2, [pc, #16]	; (22504 <settings_line_load_cb+0x24>)
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   224f4:	4601      	mov	r1, r0
	return settings_call_set_handler(name, len, settings_line_read_cb,
   224f6:	9500      	str	r5, [sp, #0]
   224f8:	4620      	mov	r0, r4
   224fa:	ab02      	add	r3, sp, #8
   224fc:	f7ff fe52 	bl	221a4 <settings_call_set_handler>
					 &value_ctx, arg);
}
   22500:	b005      	add	sp, #20
   22502:	bd30      	pop	{r4, r5, pc}
   22504:	0003d7a3 	.word	0x0003d7a3

00022508 <settings_fcb_load_priv>:

static int settings_fcb_load_priv(struct settings_store *cs,
				  line_load_cb cb,
				  void *cb_arg,
				  bool filter_duplicates)
{
   22508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2250c:	4606      	mov	r6, r0
   2250e:	b0b3      	sub	sp, #204	; 0xcc
   22510:	460f      	mov	r7, r1
   22512:	4690      	mov	r8, r2
	struct settings_fcb *cf = (struct settings_fcb *)cs;
	struct fcb_entry_ctx entry_ctx = {
   22514:	2100      	movs	r1, #0
   22516:	2210      	movs	r2, #16
   22518:	a802      	add	r0, sp, #8
{
   2251a:	4699      	mov	r9, r3
	struct fcb_entry_ctx entry_ctx = {
   2251c:	f01f f871 	bl	41602 <memset>
   22520:	6c33      	ldr	r3, [r6, #64]	; 0x40
			LOG_ERR("failed to load line");
   22522:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 225cc <settings_fcb_load_priv+0xc4>
	struct fcb_entry_ctx entry_ctx = {
   22526:	9306      	str	r3, [sp, #24]
		{.fe_sector = NULL, .fe_elem_off = 0},
		.fap = cf->cf_fcb.fap
	};
	int rc;

	while ((rc = fcb_getnext(&cf->cf_fcb, &entry_ctx.loc)) == 0) {
   22528:	f106 0a08 	add.w	sl, r6, #8
   2252c:	4650      	mov	r0, sl
   2252e:	a902      	add	r1, sp, #8
   22530:	f01a fe77 	bl	3d222 <fcb_getnext>
   22534:	b118      	cbz	r0, 2253e <settings_fcb_load_priv+0x36>
	}
	if (rc == -ENOTSUP) {
		rc = 0;
	}
	return 0;
}
   22536:	2000      	movs	r0, #0
   22538:	b033      	add	sp, #204	; 0xcc
   2253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_line_name_read(name, sizeof(name), &name_len,
   2253e:	466a      	mov	r2, sp
   22540:	214a      	movs	r1, #74	; 0x4a
   22542:	ab02      	add	r3, sp, #8
   22544:	a80c      	add	r0, sp, #48	; 0x30
   22546:	f01b f93b 	bl	3d7c0 <settings_line_name_read>
		if (rc) {
   2254a:	b128      	cbz	r0, 22558 <settings_fcb_load_priv+0x50>
			LOG_ERR("Failed to load line name: %d", rc);
   2254c:	4602      	mov	r2, r0
   2254e:	2145      	movs	r1, #69	; 0x45
   22550:	481d      	ldr	r0, [pc, #116]	; (225c8 <settings_fcb_load_priv+0xc0>)
   22552:	f01a fbbc 	bl	3ccce <z_log_minimal_printk>
			continue;
   22556:	e7e7      	b.n	22528 <settings_fcb_load_priv+0x20>
		name[name_len] = '\0';
   22558:	9b00      	ldr	r3, [sp, #0]
   2255a:	aa32      	add	r2, sp, #200	; 0xc8
   2255c:	441a      	add	r2, r3
   2255e:	f802 0c98 	strb.w	r0, [r2, #-152]
		if (filter_duplicates &&
   22562:	f1b9 0f00 	cmp.w	r9, #0
   22566:	d00f      	beq.n	22588 <settings_fcb_load_priv+0x80>
	if (off >= entry_ctx->loc.fe_data_len) {
   22568:	f8bd 2014 	ldrh.w	r2, [sp, #20]
		    (!read_entry_len(&entry_ctx, name_len+1) ||
   2256c:	3301      	adds	r3, #1
	if (off >= entry_ctx->loc.fe_data_len) {
   2256e:	429a      	cmp	r2, r3
   22570:	ddda      	ble.n	22528 <settings_fcb_load_priv+0x20>
	struct fcb_entry_ctx entry2_ctx = *entry_ctx;
   22572:	ac07      	add	r4, sp, #28
   22574:	ad02      	add	r5, sp, #8
   22576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   22578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2257a:	682b      	ldr	r3, [r5, #0]
   2257c:	6023      	str	r3, [r4, #0]
	while (fcb_getnext(&cf->cf_fcb, &entry2_ctx.loc) == 0) {
   2257e:	4650      	mov	r0, sl
   22580:	a907      	add	r1, sp, #28
   22582:	f01a fe4e 	bl	3d222 <fcb_getnext>
   22586:	b130      	cbz	r0, 22596 <settings_fcb_load_priv+0x8e>
			cb(name, &entry_ctx, name_len + 1, cb_arg);
   22588:	9a00      	ldr	r2, [sp, #0]
   2258a:	4643      	mov	r3, r8
   2258c:	3201      	adds	r2, #1
   2258e:	a902      	add	r1, sp, #8
   22590:	a80c      	add	r0, sp, #48	; 0x30
   22592:	47b8      	blx	r7
   22594:	e7c8      	b.n	22528 <settings_fcb_load_priv+0x20>
		if (settings_line_name_read(name2, sizeof(name2), &name2_len,
   22596:	214a      	movs	r1, #74	; 0x4a
   22598:	ab07      	add	r3, sp, #28
   2259a:	aa01      	add	r2, sp, #4
   2259c:	a81f      	add	r0, sp, #124	; 0x7c
   2259e:	f01b f90f 	bl	3d7c0 <settings_line_name_read>
   225a2:	b120      	cbz	r0, 225ae <settings_fcb_load_priv+0xa6>
			LOG_ERR("failed to load line");
   225a4:	2145      	movs	r1, #69	; 0x45
   225a6:	4658      	mov	r0, fp
   225a8:	f01a fb91 	bl	3ccce <z_log_minimal_printk>
			continue;
   225ac:	e7e7      	b.n	2257e <settings_fcb_load_priv+0x76>
		name2[name2_len] = '\0';
   225ae:	9b01      	ldr	r3, [sp, #4]
   225b0:	aa32      	add	r2, sp, #200	; 0xc8
   225b2:	4413      	add	r3, r2
   225b4:	f803 0c4c 	strb.w	r0, [r3, #-76]
		if (!strcmp(name, name2)) {
   225b8:	a91f      	add	r1, sp, #124	; 0x7c
   225ba:	a80c      	add	r0, sp, #48	; 0x30
   225bc:	f7fa fe37 	bl	1d22e <strcmp>
   225c0:	2800      	cmp	r0, #0
   225c2:	d1dc      	bne.n	2257e <settings_fcb_load_priv+0x76>
   225c4:	e7b0      	b.n	22528 <settings_fcb_load_priv+0x20>
   225c6:	bf00      	nop
   225c8:	000445c7 	.word	0x000445c7
   225cc:	000445e9 	.word	0x000445e9

000225d0 <settings_fcb_load>:

static int settings_fcb_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   225d0:	460a      	mov	r2, r1
	return settings_fcb_load_priv(
   225d2:	2301      	movs	r3, #1
   225d4:	4901      	ldr	r1, [pc, #4]	; (225dc <settings_fcb_load+0xc>)
   225d6:	f7ff bf97 	b.w	22508 <settings_fcb_load_priv>
   225da:	bf00      	nop
   225dc:	000224e1 	.word	0x000224e1

000225e0 <settings_fcb_save>:
	return rc;
}

static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
   225e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225e4:	4605      	mov	r5, r0
   225e6:	460f      	mov	r7, r1
   225e8:	4691      	mov	r9, r2
	struct settings_line_dup_check_arg cdca;

	if (val_len > 0 && value == NULL) {
   225ea:	4698      	mov	r8, r3
{
   225ec:	b0bf      	sub	sp, #252	; 0xfc
	if (val_len > 0 && value == NULL) {
   225ee:	b103      	cbz	r3, 225f2 <settings_fcb_save+0x12>
   225f0:	b17a      	cbz	r2, 22612 <settings_fcb_save+0x32>
	/*
	 * Check if we're writing the same value again.
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
   225f2:	2400      	movs	r4, #0
	cdca.val_len = val_len;
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   225f4:	4628      	mov	r0, r5
   225f6:	4623      	mov	r3, r4
   225f8:	495b      	ldr	r1, [pc, #364]	; (22768 <settings_fcb_save+0x188>)
   225fa:	aa05      	add	r2, sp, #20
	cdca.val = (char *)value;
   225fc:	e9cd 7905 	strd	r7, r9, [sp, #20]
	cdca.val_len = val_len;
   22600:	e9cd 8407 	strd	r8, r4, [sp, #28]
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   22604:	f7ff ff80 	bl	22508 <settings_fcb_load_priv>
	if (cdca.is_dup == 1) {
   22608:	9b08      	ldr	r3, [sp, #32]
   2260a:	2b01      	cmp	r3, #1
   2260c:	f000 80a7 	beq.w	2275e <settings_fcb_save+0x17e>
	if (!name) {
   22610:	b917      	cbnz	r7, 22618 <settings_fcb_save+0x38>
		return -EINVAL;
   22612:	f06f 0415 	mvn.w	r4, #21
   22616:	e0a2      	b.n	2275e <settings_fcb_save+0x17e>
	len = settings_line_len_calc(name, val_len);
   22618:	4641      	mov	r1, r8
   2261a:	4638      	mov	r0, r7
   2261c:	f01b f8b1 	bl	3d782 <settings_line_len_calc>
   22620:	4683      	mov	fp, r0
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   22622:	7b6b      	ldrb	r3, [r5, #13]
   22624:	429c      	cmp	r4, r3
   22626:	daf4      	bge.n	22612 <settings_fcb_save+0x32>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   22628:	f105 0608 	add.w	r6, r5, #8
   2262c:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
   22630:	4652      	mov	r2, sl
   22632:	4630      	mov	r0, r6
   22634:	fa1f f18b 	uxth.w	r1, fp
   22638:	f7ff f896 	bl	21768 <fcb_append>
		if (rc != -ENOSPC) {
   2263c:	f110 0f1c 	cmn.w	r0, #28
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   22640:	4603      	mov	r3, r0
		if (rc != -ENOSPC) {
   22642:	d176      	bne.n	22732 <settings_fcb_save+0x152>
		if (i < (cf->cf_fcb.f_sector_cnt - 1)) {
   22644:	7b6b      	ldrb	r3, [r5, #13]
   22646:	3b01      	subs	r3, #1
   22648:	42a3      	cmp	r3, r4
   2264a:	dd1b      	ble.n	22684 <settings_fcb_save+0xa4>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
   2264c:	4630      	mov	r0, r6
   2264e:	f01a fb55 	bl	3ccfc <fcb_append_to_scratch>
	if (rc) {
   22652:	4682      	mov	sl, r0
   22654:	b9b0      	cbnz	r0, 22684 <settings_fcb_save+0xa4>
	rbs = flash_area_align(cf->cf_fcb.fap);
   22656:	6c28      	ldr	r0, [r5, #64]	; 0x40
   22658:	f01a fff7 	bl	3d64a <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
   2265c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	loc1.loc.fe_elem_off = 0U;
   2265e:	e9cd aa0e 	strd	sl, sl, [sp, #56]	; 0x38
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   22662:	f8df a10c 	ldr.w	sl, [pc, #268]	; 22770 <settings_fcb_save+0x190>
	loc1.fap = cf->cf_fcb.fap;
   22666:	9312      	str	r3, [sp, #72]	; 0x48
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
   22668:	4630      	mov	r0, r6
   2266a:	a90e      	add	r1, sp, #56	; 0x38
   2266c:	f01a fdd9 	bl	3d222 <fcb_getnext>
   22670:	b150      	cbz	r0, 22688 <settings_fcb_save+0xa8>
	rc = fcb_rotate(&cf->cf_fcb);
   22672:	4630      	mov	r0, r6
   22674:	f01a fdf0 	bl	3d258 <fcb_rotate>
	if (rc != 0) {
   22678:	4602      	mov	r2, r0
   2267a:	b118      	cbz	r0, 22684 <settings_fcb_save+0xa4>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
   2267c:	2145      	movs	r1, #69	; 0x45
   2267e:	483b      	ldr	r0, [pc, #236]	; (2276c <settings_fcb_save+0x18c>)
   22680:	f01a fb25 	bl	3ccce <z_log_minimal_printk>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   22684:	3401      	adds	r4, #1
   22686:	e7cc      	b.n	22622 <settings_fcb_save+0x42>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
   22688:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2268a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2268c:	429a      	cmp	r2, r3
   2268e:	d1f0      	bne.n	22672 <settings_fcb_save+0x92>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
   22690:	2149      	movs	r1, #73	; 0x49
   22692:	ab0e      	add	r3, sp, #56	; 0x38
   22694:	aa03      	add	r2, sp, #12
   22696:	a818      	add	r0, sp, #96	; 0x60
   22698:	f01b f892 	bl	3d7c0 <settings_line_name_read>
		if (rc) {
   2269c:	2800      	cmp	r0, #0
   2269e:	d1e3      	bne.n	22668 <settings_fcb_save+0x88>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
   226a0:	9b03      	ldr	r3, [sp, #12]
   226a2:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
   226a6:	3301      	adds	r3, #1
   226a8:	4293      	cmp	r3, r2
   226aa:	d0dd      	beq.n	22668 <settings_fcb_save+0x88>
		loc2 = loc1;
   226ac:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   226b0:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   226b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   226b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   226bc:	f8de 3000 	ldr.w	r3, [lr]
   226c0:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
   226c4:	4630      	mov	r0, r6
   226c6:	a913      	add	r1, sp, #76	; 0x4c
   226c8:	f01a fdab 	bl	3d222 <fcb_getnext>
   226cc:	b1f0      	cbz	r0, 2270c <settings_fcb_save+0x12c>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
   226ce:	4630      	mov	r0, r6
   226d0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   226d4:	aa13      	add	r2, sp, #76	; 0x4c
   226d6:	f7ff f847 	bl	21768 <fcb_append>
		if (rc) {
   226da:	2800      	cmp	r0, #0
   226dc:	d1c4      	bne.n	22668 <settings_fcb_save+0x88>
		rc = settings_line_entry_copy(&loc2, 0, &loc1, 0,
   226de:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   226e2:	4601      	mov	r1, r0
   226e4:	9300      	str	r3, [sp, #0]
   226e6:	aa0e      	add	r2, sp, #56	; 0x38
   226e8:	4603      	mov	r3, r0
   226ea:	a813      	add	r0, sp, #76	; 0x4c
   226ec:	f7ff feba 	bl	22464 <settings_line_entry_copy>
		if (rc) {
   226f0:	2800      	cmp	r0, #0
   226f2:	d1b9      	bne.n	22668 <settings_fcb_save+0x88>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
   226f4:	4630      	mov	r0, r6
   226f6:	a913      	add	r1, sp, #76	; 0x4c
   226f8:	f01a fb1c 	bl	3cd34 <fcb_append_finish>
		if (rc != 0) {
   226fc:	4602      	mov	r2, r0
   226fe:	2800      	cmp	r0, #0
   22700:	d0b2      	beq.n	22668 <settings_fcb_save+0x88>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   22702:	2145      	movs	r1, #69	; 0x45
   22704:	4650      	mov	r0, sl
   22706:	f01a fae2 	bl	3ccce <z_log_minimal_printk>
   2270a:	e7ad      	b.n	22668 <settings_fcb_save+0x88>
			rc = settings_line_name_read(name2, sizeof(name2),
   2270c:	2149      	movs	r1, #73	; 0x49
   2270e:	ab13      	add	r3, sp, #76	; 0x4c
   22710:	aa04      	add	r2, sp, #16
   22712:	a82b      	add	r0, sp, #172	; 0xac
   22714:	f01b f854 	bl	3d7c0 <settings_line_name_read>
			if (rc) {
   22718:	2800      	cmp	r0, #0
   2271a:	d1d3      	bne.n	226c4 <settings_fcb_save+0xe4>
			if ((val1_off == val2_off) &&
   2271c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   22720:	429a      	cmp	r2, r3
   22722:	d1cf      	bne.n	226c4 <settings_fcb_save+0xe4>
			    !memcmp(name1, name2, val1_off)) {
   22724:	a92b      	add	r1, sp, #172	; 0xac
   22726:	a818      	add	r0, sp, #96	; 0x60
   22728:	f01e ff3b 	bl	415a2 <memcmp>
			if ((val1_off == val2_off) &&
   2272c:	2800      	cmp	r0, #0
   2272e:	d1c9      	bne.n	226c4 <settings_fcb_save+0xe4>
   22730:	e79a      	b.n	22668 <settings_fcb_save+0x88>
	if (rc) {
   22732:	2800      	cmp	r0, #0
   22734:	f47f af6d 	bne.w	22612 <settings_fcb_save+0x32>
	loc.fap = cf->cf_fcb.fap;
   22738:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   2273a:	4649      	mov	r1, r9
	loc.fap = cf->cf_fcb.fap;
   2273c:	920d      	str	r2, [sp, #52]	; 0x34
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   2273e:	4638      	mov	r0, r7
   22740:	4642      	mov	r2, r8
   22742:	f8cd a000 	str.w	sl, [sp]
   22746:	f7ff fe1f 	bl	22388 <settings_line_write>
	if (rc != -EIO) {
   2274a:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   2274c:	4604      	mov	r4, r0
	if (rc != -EIO) {
   2274e:	d006      	beq.n	2275e <settings_fcb_save+0x17e>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
   22750:	4651      	mov	r1, sl
   22752:	4630      	mov	r0, r6
   22754:	f01a faee 	bl	3cd34 <fcb_append_finish>
			rc = i;
   22758:	2c00      	cmp	r4, #0
   2275a:	bf08      	it	eq
   2275c:	4604      	moveq	r4, r0
		return 0;
	}
	return settings_fcb_save_priv(cs, name, (char *)value, val_len);
}
   2275e:	4620      	mov	r0, r4
   22760:	b03f      	add	sp, #252	; 0xfc
   22762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22766:	bf00      	nop
   22768:	0003d7e1 	.word	0x0003d7e1
   2276c:	00044628 	.word	0x00044628
   22770:	00044602 	.word	0x00044602

00022774 <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   22774:	2301      	movs	r3, #1
{
   22776:	b570      	push	{r4, r5, r6, lr}
   22778:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   2277a:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
   2277c:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(SETTINGS_PARTITION, &cf->cf_fcb);
   2277e:	f100 0608 	add.w	r6, r0, #8
   22782:	4631      	mov	r1, r6
   22784:	200c      	movs	r0, #12
   22786:	f01a fbd7 	bl	3cf38 <fcb_init>
		if (rc) {
   2278a:	4605      	mov	r5, r0
   2278c:	b9b0      	cbnz	r0, 227bc <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   2278e:	4630      	mov	r0, r6
   22790:	f01a fb38 	bl	3ce04 <fcb_free_sector_cnt>
   22794:	2800      	cmp	r0, #0
   22796:	dc0a      	bgt.n	227ae <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
   22798:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
   2279a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   2279c:	e9d3 1200 	ldrd	r1, r2, [r3]
   227a0:	f01a ff3c 	bl	3d61c <flash_area_erase>
			if (rc) {
   227a4:	2800      	cmp	r0, #0
   227a6:	d0ec      	beq.n	22782 <settings_fcb_src+0xe>
				return -EIO;
   227a8:	f06f 0504 	mvn.w	r5, #4
   227ac:	e004      	b.n	227b8 <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   227ae:	4b05      	ldr	r3, [pc, #20]	; (227c4 <settings_fcb_src+0x50>)
	settings_src_register(&cf->cf_store);
   227b0:	4620      	mov	r0, r4
	cf->cf_store.cs_itf = &settings_fcb_itf;
   227b2:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
   227b4:	f7ff fc54 	bl	22060 <settings_src_register>
}
   227b8:	4628      	mov	r0, r5
   227ba:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   227bc:	f06f 0515 	mvn.w	r5, #21
   227c0:	e7fa      	b.n	227b8 <settings_fcb_src+0x44>
   227c2:	bf00      	nop
   227c4:	00042b60 	.word	0x00042b60

000227c8 <settings_mount_fcb_backend>:
{
	uint8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
   227c8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   227cc:	4a02      	ldr	r2, [pc, #8]	; (227d8 <settings_mount_fcb_backend+0x10>)
   227ce:	4903      	ldr	r1, [pc, #12]	; (227dc <settings_mount_fcb_backend+0x14>)
   227d0:	4803      	ldr	r0, [pc, #12]	; (227e0 <settings_mount_fcb_backend+0x18>)
   227d2:	f7ff be7b 	b.w	224cc <settings_line_io_init>
   227d6:	bf00      	nop
   227d8:	0003d85f 	.word	0x0003d85f
   227dc:	0003d863 	.word	0x0003d863
   227e0:	0003d877 	.word	0x0003d877

000227e4 <settings_backend_init>:
		settings_fcb_area[CONFIG_SETTINGS_FCB_NUM_AREAS + 1];
	static struct settings_fcb config_init_settings_fcb = {
		.cf_fcb.f_magic = CONFIG_SETTINGS_FCB_MAGIC,
		.cf_fcb.f_sectors = settings_fcb_area,
	};
	uint32_t cnt = sizeof(settings_fcb_area) /
   227e4:	2309      	movs	r3, #9
{
   227e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
		    sizeof(settings_fcb_area[0]);
	int rc;
	const struct flash_area *fap;

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &cnt,
   227e8:	200c      	movs	r0, #12
   227ea:	4669      	mov	r1, sp
   227ec:	4a21      	ldr	r2, [pc, #132]	; (22874 <settings_backend_init+0x90>)
	uint32_t cnt = sizeof(settings_fcb_area) /
   227ee:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &cnt,
   227f0:	f7ff fada 	bl	21da8 <flash_area_get_sectors>
				    settings_fcb_area);
	if (rc == -ENODEV) {
   227f4:	f110 0f13 	cmn.w	r0, #19
   227f8:	d03a      	beq.n	22870 <settings_backend_init+0x8c>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   227fa:	b138      	cbz	r0, 2280c <settings_backend_init+0x28>
   227fc:	300c      	adds	r0, #12
   227fe:	d005      	beq.n	2280c <settings_backend_init+0x28>
		k_panic();
   22800:	4040      	eors	r0, r0
   22802:	f380 8811 	msr	BASEPRI, r0
   22806:	f04f 0004 	mov.w	r0, #4
   2280a:	df02      	svc	2
	}

	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   2280c:	4c1a      	ldr	r4, [pc, #104]	; (22878 <settings_backend_init+0x94>)
   2280e:	9b00      	ldr	r3, [sp, #0]

	rc = settings_fcb_src(&config_init_settings_fcb);
   22810:	4620      	mov	r0, r4
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   22812:	7363      	strb	r3, [r4, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
   22814:	f7ff ffae 	bl	22774 <settings_fcb_src>

	if (rc != 0) {
   22818:	b308      	cbz	r0, 2285e <settings_backend_init+0x7a>
		rc = flash_area_open(SETTINGS_PARTITION, &fap);
   2281a:	a901      	add	r1, sp, #4
   2281c:	200c      	movs	r0, #12
   2281e:	f7ff faa5 	bl	21d6c <flash_area_open>

		if (rc == 0) {
   22822:	4601      	mov	r1, r0
   22824:	b160      	cbz	r0, 22840 <settings_backend_init+0x5c>
			rc = flash_area_erase(fap, 0, fap->fa_size);
			flash_area_close(fap);
		}

		if (rc != 0) {
			k_panic();
   22826:	4040      	eors	r0, r0
   22828:	f380 8811 	msr	BASEPRI, r0
   2282c:	f04f 0004 	mov.w	r0, #4
   22830:	df02      	svc	2
			rc = settings_fcb_src(&config_init_settings_fcb);
		}
	}

	if (rc != 0) {
		k_panic();
   22832:	4040      	eors	r0, r0
   22834:	f380 8811 	msr	BASEPRI, r0
   22838:	f04f 0004 	mov.w	r0, #4
   2283c:	df02      	svc	2
   2283e:	e00e      	b.n	2285e <settings_backend_init+0x7a>
			rc = flash_area_erase(fap, 0, fap->fa_size);
   22840:	9801      	ldr	r0, [sp, #4]
   22842:	6882      	ldr	r2, [r0, #8]
   22844:	f01a feea 	bl	3d61c <flash_area_erase>
   22848:	4605      	mov	r5, r0
			flash_area_close(fap);
   2284a:	9801      	ldr	r0, [sp, #4]
   2284c:	f01a fead 	bl	3d5aa <flash_area_close>
		if (rc != 0) {
   22850:	2d00      	cmp	r5, #0
   22852:	d1e8      	bne.n	22826 <settings_backend_init+0x42>
			rc = settings_fcb_src(&config_init_settings_fcb);
   22854:	4620      	mov	r0, r4
   22856:	f7ff ff8d 	bl	22774 <settings_fcb_src>
	if (rc != 0) {
   2285a:	2800      	cmp	r0, #0
   2285c:	d1e9      	bne.n	22832 <settings_backend_init+0x4e>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   2285e:	4b07      	ldr	r3, [pc, #28]	; (2287c <settings_backend_init+0x98>)
	settings_dst_register(&cf->cf_store);
   22860:	4805      	ldr	r0, [pc, #20]	; (22878 <settings_backend_init+0x94>)
	cf->cf_store.cs_itf = &settings_fcb_itf;
   22862:	6063      	str	r3, [r4, #4]
	settings_dst_register(&cf->cf_store);
   22864:	f7ff fc0a 	bl	2207c <settings_dst_register>

	if (rc != 0) {
		k_panic();
	}

	settings_mount_fcb_backend(&config_init_settings_fcb);
   22868:	4803      	ldr	r0, [pc, #12]	; (22878 <settings_backend_init+0x94>)
   2286a:	f7ff ffad 	bl	227c8 <settings_mount_fcb_backend>

	return rc;
   2286e:	2000      	movs	r0, #0
}
   22870:	b003      	add	sp, #12
   22872:	bd30      	pop	{r4, r5, pc}
   22874:	20019148 	.word	0x20019148
   22878:	200145cc 	.word	0x200145cc
   2287c:	00042b60 	.word	0x00042b60

00022880 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   22880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22884:	4605      	mov	r5, r0
	__asm__ volatile(
   22886:	f04f 0320 	mov.w	r3, #32
   2288a:	f3ef 8611 	mrs	r6, BASEPRI
   2288e:	f383 8812 	msr	BASEPRI_MAX, r3
   22892:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22896:	481d      	ldr	r0, [pc, #116]	; (2290c <pm_state_notify+0x8c>)
   22898:	f013 ff2e 	bl	366f8 <z_spin_lock_valid>
   2289c:	b940      	cbnz	r0, 228b0 <pm_state_notify+0x30>
   2289e:	491c      	ldr	r1, [pc, #112]	; (22910 <pm_state_notify+0x90>)
   228a0:	481c      	ldr	r0, [pc, #112]	; (22914 <pm_state_notify+0x94>)
   228a2:	228e      	movs	r2, #142	; 0x8e
   228a4:	f01a f9d9 	bl	3cc5a <assert_print>
   228a8:	218e      	movs	r1, #142	; 0x8e
   228aa:	4819      	ldr	r0, [pc, #100]	; (22910 <pm_state_notify+0x90>)
   228ac:	f01a f9ce 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   228b0:	4816      	ldr	r0, [pc, #88]	; (2290c <pm_state_notify+0x8c>)
   228b2:	f013 ff3f 	bl	36734 <z_spin_lock_set_owner>
	return list->head;
   228b6:	4b18      	ldr	r3, [pc, #96]	; (22918 <pm_state_notify+0x98>)
   228b8:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   228ba:	b19c      	cbz	r4, 228e4 <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   228bc:	f04f 090c 	mov.w	r9, #12
   228c0:	4f16      	ldr	r7, [pc, #88]	; (2291c <pm_state_notify+0x9c>)
   228c2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 22920 <pm_state_notify+0xa0>
			callback = notifier->state_exit;
   228c6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   228ca:	2d00      	cmp	r5, #0
   228cc:	bf08      	it	eq
   228ce:	4613      	moveq	r3, r2
		if (callback) {
   228d0:	b12b      	cbz	r3, 228de <pm_state_notify+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   228d2:	f898 2014 	ldrb.w	r2, [r8, #20]
   228d6:	fb09 f202 	mul.w	r2, r9, r2
   228da:	5cb8      	ldrb	r0, [r7, r2]
   228dc:	4798      	blx	r3
	return node->next;
   228de:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   228e0:	2c00      	cmp	r4, #0
   228e2:	d1f0      	bne.n	228c6 <pm_state_notify+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   228e4:	4809      	ldr	r0, [pc, #36]	; (2290c <pm_state_notify+0x8c>)
   228e6:	f013 ff15 	bl	36714 <z_spin_unlock_valid>
   228ea:	b940      	cbnz	r0, 228fe <pm_state_notify+0x7e>
   228ec:	4908      	ldr	r1, [pc, #32]	; (22910 <pm_state_notify+0x90>)
   228ee:	4809      	ldr	r0, [pc, #36]	; (22914 <pm_state_notify+0x94>)
   228f0:	22b9      	movs	r2, #185	; 0xb9
   228f2:	f01a f9b2 	bl	3cc5a <assert_print>
   228f6:	21b9      	movs	r1, #185	; 0xb9
   228f8:	4805      	ldr	r0, [pc, #20]	; (22910 <pm_state_notify+0x90>)
   228fa:	f01a f9a7 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   228fe:	f386 8811 	msr	BASEPRI, r6
   22902:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   22906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2290a:	bf00      	nop
   2290c:	20019190 	.word	0x20019190
   22910:	0004429d 	.word	0x0004429d
   22914:	00044263 	.word	0x00044263
   22918:	20019194 	.word	0x20019194
   2291c:	2001919c 	.word	0x2001919c
   22920:	2001a500 	.word	0x2001a500

00022924 <atomic_clear_bit.constprop.0>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   22924:	2301      	movs	r3, #1

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22926:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   22928:	f000 001f 	and.w	r0, r0, #31
   2292c:	fa03 f000 	lsl.w	r0, r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22930:	43c0      	mvns	r0, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22932:	4b05      	ldr	r3, [pc, #20]	; (22948 <atomic_clear_bit.constprop.0+0x24>)
   22934:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   22938:	e8d3 2fef 	ldaex	r2, [r3]
   2293c:	4002      	ands	r2, r0
   2293e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   22942:	2900      	cmp	r1, #0
   22944:	d1f8      	bne.n	22938 <atomic_clear_bit.constprop.0+0x14>
}
   22946:	4770      	bx	lr
   22948:	200191a8 	.word	0x200191a8

0002294c <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2294c:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   2294e:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
   22950:	4b17      	ldr	r3, [pc, #92]	; (229b0 <pm_system_resume+0x64>)
   22952:	7d1c      	ldrb	r4, [r3, #20]
   22954:	f004 031f 	and.w	r3, r4, #31
   22958:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2295a:	43d0      	mvns	r0, r2
   2295c:	4b15      	ldr	r3, [pc, #84]	; (229b4 <pm_system_resume+0x68>)
   2295e:	0961      	lsrs	r1, r4, #5
   22960:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   22964:	e8d3 1fef 	ldaex	r1, [r3]
   22968:	ea01 0500 	and.w	r5, r1, r0
   2296c:	e8c3 5fec 	stlex	ip, r5, [r3]
   22970:	f1bc 0f00 	cmp.w	ip, #0
   22974:	d1f6      	bne.n	22964 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   22976:	4211      	tst	r1, r2
   22978:	d013      	beq.n	229a2 <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
   2297a:	4b0f      	ldr	r3, [pc, #60]	; (229b8 <pm_system_resume+0x6c>)
   2297c:	4d0f      	ldr	r5, [pc, #60]	; (229bc <pm_system_resume+0x70>)
   2297e:	b18b      	cbz	r3, 229a4 <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
   22980:	230c      	movs	r3, #12
   22982:	4363      	muls	r3, r4
   22984:	18ea      	adds	r2, r5, r3
   22986:	7851      	ldrb	r1, [r2, #1]
   22988:	5ce8      	ldrb	r0, [r5, r3]
   2298a:	f01a f980 	bl	3cc8e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   2298e:	2000      	movs	r0, #0
   22990:	f7ff ff76 	bl	22880 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   22994:	230c      	movs	r3, #12
   22996:	435c      	muls	r4, r3
   22998:	2300      	movs	r3, #0
   2299a:	192a      	adds	r2, r5, r4
   2299c:	512b      	str	r3, [r5, r4]
   2299e:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   229a2:	bd38      	pop	{r3, r4, r5, pc}
   229a4:	f383 8811 	msr	BASEPRI, r3
   229a8:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   229ac:	e7ef      	b.n	2298e <pm_system_resume+0x42>
   229ae:	bf00      	nop
   229b0:	2001a500 	.word	0x2001a500
   229b4:	200191ac 	.word	0x200191ac
   229b8:	0003cc8f 	.word	0x0003cc8f
   229bc:	2001919c 	.word	0x2001919c

000229c0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   229c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   229c4:	4b2f      	ldr	r3, [pc, #188]	; (22a84 <pm_system_suspend+0xc4>)
{
   229c6:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
   229c8:	7d1c      	ldrb	r4, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   229ca:	ea4f 1854 	mov.w	r8, r4, lsr #5
   229ce:	ea4f 0888 	mov.w	r8, r8, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   229d2:	4b2d      	ldr	r3, [pc, #180]	; (22a88 <pm_system_suspend+0xc8>)
   229d4:	4443      	add	r3, r8
   229d6:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   229da:	f004 091f 	and.w	r9, r4, #31
   229de:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   229e2:	f013 0f01 	tst.w	r3, #1
   229e6:	4e29      	ldr	r6, [pc, #164]	; (22a8c <pm_system_suspend+0xcc>)
   229e8:	d10a      	bne.n	22a00 <pm_system_suspend+0x40>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   229ea:	4601      	mov	r1, r0
   229ec:	4620      	mov	r0, r4
   229ee:	f000 f863 	bl	22ab8 <pm_policy_next_state>
		if (info != NULL) {
   229f2:	b128      	cbz	r0, 22a00 <pm_system_suspend+0x40>
			z_cpus_pm_state[id] = *info;
   229f4:	c807      	ldmia	r0, {r0, r1, r2}
   229f6:	230c      	movs	r3, #12
   229f8:	fb03 6304 	mla	r3, r3, r4, r6
   229fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   22a00:	230c      	movs	r3, #12
   22a02:	4363      	muls	r3, r4
   22a04:	5cf5      	ldrb	r5, [r6, r3]
   22a06:	18f2      	adds	r2, r6, r3
   22a08:	b92d      	cbnz	r5, 22a16 <pm_system_suspend+0x56>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   22a0a:	4620      	mov	r0, r4
   22a0c:	f7ff ff8a 	bl	22924 <atomic_clear_bit.constprop.0>
		ret = false;
   22a10:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   22a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   22a16:	1c7b      	adds	r3, r7, #1
   22a18:	d00f      	beq.n	22a3a <pm_system_suspend+0x7a>
   22a1a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   22a1e:	2100      	movs	r1, #0
   22a20:	f8d2 c008 	ldr.w	ip, [r2, #8]
   22a24:	481a      	ldr	r0, [pc, #104]	; (22a90 <pm_system_suspend+0xd0>)
   22a26:	2300      	movs	r3, #0
   22a28:	fbec 0105 	umlal	r0, r1, ip, r5
   22a2c:	4a19      	ldr	r2, [pc, #100]	; (22a94 <pm_system_suspend+0xd4>)
   22a2e:	f7fa fa5b 	bl	1cee8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   22a32:	2101      	movs	r1, #1
   22a34:	1a38      	subs	r0, r7, r0
   22a36:	f016 f97f 	bl	38d38 <z_set_timeout_expiry>
	k_sched_lock();
   22a3a:	f015 f81f 	bl	37a7c <k_sched_lock>
	pm_state_notify(true);
   22a3e:	2001      	movs	r0, #1
   22a40:	f7ff ff1e 	bl	22880 <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   22a44:	2301      	movs	r3, #1
   22a46:	fa03 f909 	lsl.w	r9, r3, r9
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22a4a:	4b13      	ldr	r3, [pc, #76]	; (22a98 <pm_system_suspend+0xd8>)
   22a4c:	4498      	add	r8, r3
   22a4e:	e8d8 3fef 	ldaex	r3, [r8]
   22a52:	ea43 0309 	orr.w	r3, r3, r9
   22a56:	e8c8 3fe2 	stlex	r2, r3, [r8]
   22a5a:	2a00      	cmp	r2, #0
   22a5c:	d1f7      	bne.n	22a4e <pm_system_suspend+0x8e>
	if (pm_state_set != NULL) {
   22a5e:	4b0f      	ldr	r3, [pc, #60]	; (22a9c <pm_system_suspend+0xdc>)
   22a60:	b133      	cbz	r3, 22a70 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
   22a62:	230c      	movs	r3, #12
   22a64:	4363      	muls	r3, r4
   22a66:	18f2      	adds	r2, r6, r3
   22a68:	7851      	ldrb	r1, [r2, #1]
   22a6a:	5cf0      	ldrb	r0, [r6, r3]
   22a6c:	f01a f903 	bl	3cc76 <pm_state_set>
	pm_system_resume();
   22a70:	f7ff ff6c 	bl	2294c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   22a74:	4620      	mov	r0, r4
   22a76:	f7ff ff55 	bl	22924 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   22a7a:	f015 fca1 	bl	383c0 <k_sched_unlock>
	bool ret = true;
   22a7e:	2001      	movs	r0, #1
   22a80:	e7c7      	b.n	22a12 <pm_system_suspend+0x52>
   22a82:	bf00      	nop
   22a84:	2001a500 	.word	0x2001a500
   22a88:	200191a8 	.word	0x200191a8
   22a8c:	2001919c 	.word	0x2001919c
   22a90:	000f423f 	.word	0x000f423f
   22a94:	000f4240 	.word	0x000f4240
   22a98:	200191ac 	.word	0x200191ac
   22a9c:	0003cc77 	.word	0x0003cc77

00022aa0 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22aa0:	4b04      	ldr	r3, [pc, #16]	; (22ab4 <pm_policy_state_lock_is_active+0x14>)
   22aa2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   22aa6:	e8d0 0faf 	lda	r0, [r0]
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
   22aaa:	3800      	subs	r0, #0
   22aac:	bf18      	it	ne
   22aae:	2001      	movne	r0, #1
   22ab0:	4770      	bx	lr
   22ab2:	bf00      	nop
   22ab4:	200191b0 	.word	0x200191b0

00022ab8 <pm_policy_next_state>:
{
   22ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22abc:	b085      	sub	sp, #20
   22abe:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   22ac0:	a903      	add	r1, sp, #12
   22ac2:	f000 f847 	bl	22b54 <pm_state_cpu_get_all>
   22ac6:	f04f 0b00 	mov.w	fp, #0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   22aca:	3801      	subs	r0, #1
   22acc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 22b4c <pm_policy_next_state+0x94>
   22ad0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 22b50 <pm_policy_next_state+0x98>
   22ad4:	b204      	sxth	r4, r0
   22ad6:	1c63      	adds	r3, r4, #1
   22ad8:	d104      	bne.n	22ae4 <pm_policy_next_state+0x2c>
	return NULL;
   22ada:	2600      	movs	r6, #0
}
   22adc:	4630      	mov	r0, r6
   22ade:	b005      	add	sp, #20
   22ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   22ae4:	9a03      	ldr	r2, [sp, #12]
   22ae6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		if (pm_policy_state_lock_is_active(state->state)) {
   22aea:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
		const struct pm_state_info *state = &cpu_states[i];
   22aee:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
   22af2:	f7ff ffd5 	bl	22aa0 <pm_policy_state_lock_is_active>
   22af6:	4605      	mov	r5, r0
   22af8:	bb10      	cbnz	r0, 22b40 <pm_policy_next_state+0x88>
   22afa:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   22afe:	46c4      	mov	ip, r8
   22b00:	4629      	mov	r1, r5
   22b02:	6870      	ldr	r0, [r6, #4]
   22b04:	4652      	mov	r2, sl
   22b06:	fbe0 c109 	umlal	ip, r1, r0, r9
   22b0a:	465b      	mov	r3, fp
   22b0c:	4660      	mov	r0, ip
   22b0e:	f7fa f9eb 	bl	1cee8 <__aeabi_uldivmod>
   22b12:	46c4      	mov	ip, r8
   22b14:	4629      	mov	r1, r5
   22b16:	9001      	str	r0, [sp, #4]
   22b18:	68b0      	ldr	r0, [r6, #8]
   22b1a:	465b      	mov	r3, fp
   22b1c:	fbe0 c109 	umlal	ip, r1, r0, r9
   22b20:	4652      	mov	r2, sl
   22b22:	4660      	mov	r0, ip
   22b24:	f7fa f9e0 	bl	1cee8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   22b28:	4b07      	ldr	r3, [pc, #28]	; (22b48 <pm_policy_next_state+0x90>)
   22b2a:	681b      	ldr	r3, [r3, #0]
   22b2c:	1c59      	adds	r1, r3, #1
   22b2e:	d001      	beq.n	22b34 <pm_policy_next_state+0x7c>
   22b30:	4283      	cmp	r3, r0
   22b32:	d905      	bls.n	22b40 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
   22b34:	1c7a      	adds	r2, r7, #1
   22b36:	d0d1      	beq.n	22adc <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   22b38:	9b01      	ldr	r3, [sp, #4]
   22b3a:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   22b3c:	42b8      	cmp	r0, r7
   22b3e:	d9cd      	bls.n	22adc <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   22b40:	3c01      	subs	r4, #1
   22b42:	b224      	sxth	r4, r4
   22b44:	e7c7      	b.n	22ad6 <pm_policy_next_state+0x1e>
   22b46:	bf00      	nop
   22b48:	20014614 	.word	0x20014614
   22b4c:	000f423f 	.word	0x000f423f
   22b50:	000f4240 	.word	0x000f4240

00022b54 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   22b54:	b908      	cbnz	r0, 22b5a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   22b56:	4b02      	ldr	r3, [pc, #8]	; (22b60 <pm_state_cpu_get_all+0xc>)
   22b58:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   22b5a:	2000      	movs	r0, #0
   22b5c:	4770      	bx	lr
   22b5e:	bf00      	nop
   22b60:	00042b70 	.word	0x00042b70

00022b64 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   22b64:	4901      	ldr	r1, [pc, #4]	; (22b6c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   22b66:	2210      	movs	r2, #16
	str	r2, [r1]
   22b68:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   22b6a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   22b6c:	e000ed10 	.word	0xe000ed10

00022b70 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   22b70:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   22b72:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   22b74:	f380 8811 	msr	BASEPRI, r0
	isb
   22b78:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   22b7c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   22b80:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   22b82:	b662      	cpsie	i
	isb
   22b84:	f3bf 8f6f 	isb	sy

	bx	lr
   22b88:	4770      	bx	lr
   22b8a:	bf00      	nop

00022b8c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   22b8c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   22b8e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   22b90:	f381 8811 	msr	BASEPRI, r1

	wfe
   22b94:	bf20      	wfe

	msr	BASEPRI, r0
   22b96:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   22b9a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   22b9c:	4770      	bx	lr
   22b9e:	bf00      	nop

00022ba0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ba4:	4607      	mov	r7, r0

	if (esf != NULL) {
   22ba6:	460c      	mov	r4, r1
{
   22ba8:	b086      	sub	sp, #24
	if (esf != NULL) {
   22baa:	2900      	cmp	r1, #0
   22bac:	d04a      	beq.n	22c44 <z_arm_fatal_error+0xa4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   22bae:	688b      	ldr	r3, [r1, #8]
   22bb0:	4828      	ldr	r0, [pc, #160]	; (22c54 <z_arm_fatal_error+0xb4>)
   22bb2:	9300      	str	r3, [sp, #0]
   22bb4:	e9d1 2300 	ldrd	r2, r3, [r1]
   22bb8:	2145      	movs	r1, #69	; 0x45
   22bba:	f01a f888 	bl	3ccce <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   22bbe:	6963      	ldr	r3, [r4, #20]
   22bc0:	2145      	movs	r1, #69	; 0x45
   22bc2:	9300      	str	r3, [sp, #0]
   22bc4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   22bc8:	4823      	ldr	r0, [pc, #140]	; (22c58 <z_arm_fatal_error+0xb8>)
   22bca:	f01a f880 	bl	3ccce <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   22bce:	2145      	movs	r1, #69	; 0x45
   22bd0:	69e2      	ldr	r2, [r4, #28]
   22bd2:	4822      	ldr	r0, [pc, #136]	; (22c5c <z_arm_fatal_error+0xbc>)
   22bd4:	f01a f87b 	bl	3ccce <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   22bd8:	4626      	mov	r6, r4
   22bda:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   22bdc:	f8df 8088 	ldr.w	r8, [pc, #136]	; 22c68 <z_arm_fatal_error+0xc8>
   22be0:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
   22be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22be8:	ed96 7a08 	vldr	s14, [r6, #32]
   22bec:	edcd 7a05 	vstr	s15, [sp, #20]
   22bf0:	1ceb      	adds	r3, r5, #3
   22bf2:	9304      	str	r3, [sp, #16]
   22bf4:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
   22bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22bfc:	edcd 7a03 	vstr	s15, [sp, #12]
   22c00:	1cab      	adds	r3, r5, #2
   22c02:	9302      	str	r3, [sp, #8]
   22c04:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
   22c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22c0c:	edcd 7a01 	vstr	s15, [sp, #4]
   22c10:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   22c14:	1c6b      	adds	r3, r5, #1
   22c16:	462a      	mov	r2, r5
   22c18:	9300      	str	r3, [sp, #0]
   22c1a:	2145      	movs	r1, #69	; 0x45
   22c1c:	ee17 3a90 	vmov	r3, s15
   22c20:	4640      	mov	r0, r8
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   22c22:	3504      	adds	r5, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   22c24:	f01a f853 	bl	3ccce <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   22c28:	2d10      	cmp	r5, #16
   22c2a:	f106 0610 	add.w	r6, r6, #16
   22c2e:	d1d7      	bne.n	22be0 <z_arm_fatal_error+0x40>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   22c30:	2145      	movs	r1, #69	; 0x45
   22c32:	6e22      	ldr	r2, [r4, #96]	; 0x60
   22c34:	480a      	ldr	r0, [pc, #40]	; (22c60 <z_arm_fatal_error+0xc0>)
   22c36:	f01a f84a 	bl	3ccce <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   22c3a:	2145      	movs	r1, #69	; 0x45
   22c3c:	69a2      	ldr	r2, [r4, #24]
   22c3e:	4809      	ldr	r0, [pc, #36]	; (22c64 <z_arm_fatal_error+0xc4>)
   22c40:	f01a f845 	bl	3ccce <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   22c44:	4621      	mov	r1, r4
   22c46:	4638      	mov	r0, r7
}
   22c48:	b006      	add	sp, #24
   22c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_fatal_error(reason, esf);
   22c4e:	f013 b9f9 	b.w	36044 <z_fatal_error>
   22c52:	bf00      	nop
   22c54:	0004465d 	.word	0x0004465d
   22c58:	00044691 	.word	0x00044691
   22c5c:	000446c5 	.word	0x000446c5
   22c60:	00044721 	.word	0x00044721
   22c64:	00044735 	.word	0x00044735
   22c68:	000446d9 	.word	0x000446d9

00022c6c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   22c6c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   22c6e:	2b00      	cmp	r3, #0
   22c70:	db08      	blt.n	22c84 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22c72:	2201      	movs	r2, #1
   22c74:	f000 001f 	and.w	r0, r0, #31
   22c78:	fa02 f000 	lsl.w	r0, r2, r0
   22c7c:	4a02      	ldr	r2, [pc, #8]	; (22c88 <arch_irq_enable+0x1c>)
   22c7e:	095b      	lsrs	r3, r3, #5
   22c80:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   22c84:	4770      	bx	lr
   22c86:	bf00      	nop
   22c88:	e000e100 	.word	0xe000e100

00022c8c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   22c8c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   22c8e:	2b00      	cmp	r3, #0
   22c90:	db0d      	blt.n	22cae <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22c92:	2201      	movs	r2, #1
   22c94:	f000 001f 	and.w	r0, r0, #31
   22c98:	fa02 f000 	lsl.w	r0, r2, r0
   22c9c:	095b      	lsrs	r3, r3, #5
   22c9e:	4a04      	ldr	r2, [pc, #16]	; (22cb0 <arch_irq_disable+0x24>)
   22ca0:	3320      	adds	r3, #32
   22ca2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   22ca6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22caa:	f3bf 8f6f 	isb	sy
}
   22cae:	4770      	bx	lr
   22cb0:	e000e100 	.word	0xe000e100

00022cb4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   22cb4:	4b05      	ldr	r3, [pc, #20]	; (22ccc <arch_irq_is_enabled+0x18>)
   22cb6:	0942      	lsrs	r2, r0, #5
   22cb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   22cbc:	2301      	movs	r3, #1
   22cbe:	f000 001f 	and.w	r0, r0, #31
   22cc2:	fa03 f000 	lsl.w	r0, r3, r0
}
   22cc6:	4010      	ands	r0, r2
   22cc8:	4770      	bx	lr
   22cca:	bf00      	nop
   22ccc:	e000e100 	.word	0xe000e100

00022cd0 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   22cd0:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   22cd2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   22cd4:	2c07      	cmp	r4, #7
{
   22cd6:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   22cd8:	d908      	bls.n	22cec <z_arm_irq_priority_set+0x1c>
   22cda:	490d      	ldr	r1, [pc, #52]	; (22d10 <z_arm_irq_priority_set+0x40>)
   22cdc:	480d      	ldr	r0, [pc, #52]	; (22d14 <z_arm_irq_priority_set+0x44>)
   22cde:	2257      	movs	r2, #87	; 0x57
   22ce0:	f019 ffbb 	bl	3cc5a <assert_print>
   22ce4:	2157      	movs	r1, #87	; 0x57
   22ce6:	480a      	ldr	r0, [pc, #40]	; (22d10 <z_arm_irq_priority_set+0x40>)
   22ce8:	f019 ffb0 	bl	3cc4c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   22cec:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   22cee:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22cf0:	bfac      	ite	ge
   22cf2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22cf6:	4b08      	ldrlt	r3, [pc, #32]	; (22d18 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22cf8:	ea4f 1444 	mov.w	r4, r4, lsl #5
   22cfc:	b2e4      	uxtb	r4, r4
   22cfe:	bfab      	itete	ge
   22d00:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22d04:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22d08:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22d0c:	555c      	strblt	r4, [r3, r5]
}
   22d0e:	bd38      	pop	{r3, r4, r5, pc}
   22d10:	00044768 	.word	0x00044768
   22d14:	00044263 	.word	0x00044263
   22d18:	e000ed14 	.word	0xe000ed14

00022d1c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   22d1c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   22d1e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   22d20:	4b04      	ldr	r3, [pc, #16]	; (22d34 <_arch_isr_direct_pm+0x18>)
   22d22:	699a      	ldr	r2, [r3, #24]
   22d24:	b11a      	cbz	r2, 22d2e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   22d26:	2200      	movs	r2, #0
   22d28:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   22d2a:	f01e fa11 	bl	41150 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   22d2e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   22d30:	bd08      	pop	{r3, pc}
   22d32:	bf00      	nop
   22d34:	2001a500 	.word	0x2001a500

00022d38 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   22d38:	bf30      	wfi
    b z_SysNmiOnReset
   22d3a:	f7ff bffd 	b.w	22d38 <z_SysNmiOnReset>
   22d3e:	bf00      	nop

00022d40 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   22d40:	4a14      	ldr	r2, [pc, #80]	; (22d94 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   22d42:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   22d44:	4b14      	ldr	r3, [pc, #80]	; (22d98 <z_arm_prep_c+0x58>)
   22d46:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   22d4a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   22d4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22d50:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   22d54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   22d58:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   22d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   22d60:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   22d64:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   22d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   22d6c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   22d70:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   22d74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22d78:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   22d7c:	2300      	movs	r3, #0
   22d7e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   22d82:	f013 f9d5 	bl	36130 <z_bss_zero>
	z_data_copy();
   22d86:	f015 fdf3 	bl	38970 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   22d8a:	f000 fb3f 	bl	2340c <z_arm_interrupt_init>
	z_cstart();
   22d8e:	f013 fa0f 	bl	361b0 <z_cstart>
   22d92:	bf00      	nop
   22d94:	0001c200 	.word	0x0001c200
   22d98:	e000ed00 	.word	0xe000ed00

00022d9c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   22d9c:	4a0a      	ldr	r2, [pc, #40]	; (22dc8 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   22d9e:	490b      	ldr	r1, [pc, #44]	; (22dcc <arch_swap+0x30>)
	_current->arch.basepri = key;
   22da0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   22da2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   22da4:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
   22da8:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   22dac:	4908      	ldr	r1, [pc, #32]	; (22dd0 <arch_swap+0x34>)
   22dae:	684b      	ldr	r3, [r1, #4]
   22db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   22db4:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   22db6:	2300      	movs	r3, #0
   22db8:	f383 8811 	msr	BASEPRI, r3
   22dbc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   22dc0:	6893      	ldr	r3, [r2, #8]
}
   22dc2:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   22dc6:	4770      	bx	lr
   22dc8:	2001a500 	.word	0x2001a500
   22dcc:	000435b8 	.word	0x000435b8
   22dd0:	e000ed00 	.word	0xe000ed00

00022dd4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   22dd4:	4923      	ldr	r1, [pc, #140]	; (22e64 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   22dd6:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   22dd8:	f882 e0cd 	strb.w	lr, [r2, #205]	; 0xcd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   22ddc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   22de0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   22de2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   22de6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   22dea:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   22dee:	d103      	bne.n	22df8 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   22df0:	f102 008c 	add.w	r0, r2, #140	; 0x8c
    vstmia r0, {s16-s31}
   22df4:	ec80 8a10 	vstmia	r0, {s16-s31}

00022df8 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   22df8:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   22dfa:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   22dfe:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   22e02:	4f19      	ldr	r7, [pc, #100]	; (22e68 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   22e04:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   22e08:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   22e0a:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   22e0c:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   22e0e:	f992 e0cd 	ldrsb.w	lr, [r2, #205]	; 0xcd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   22e12:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
   22e16:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   22e18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   22e1c:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   22e20:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   22e24:	d003      	beq.n	22e2e <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   22e26:	2300      	movs	r3, #0
    vmsr fpscr, r3
   22e28:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   22e2c:	e003      	b.n	22e36 <in_fp_endif>

00022e2e <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   22e2e:	f102 008c 	add.w	r0, r2, #140	; 0x8c
    vldmia r0, {s16-s31}
   22e32:	ec90 8a10 	vldmia	r0, {s16-s31}

00022e36 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   22e36:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   22e3a:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   22e3e:	f383 8814 	msr	CONTROL, r3
    isb
   22e42:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   22e46:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   22e4a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   22e4e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   22e52:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   22e56:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   22e58:	f01a fd34 	bl	3d8c4 <configure_builtin_stack_guard>
    pop {r2, lr}
   22e5c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   22e60:	4770      	bx	lr
   22e62:	0000      	.short	0x0000
    ldr r1, =_kernel
   22e64:	2001a500 	.word	0x2001a500
    ldr v4, =_SCS_ICSR
   22e68:	e000ed04 	.word	0xe000ed04

00022e6c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   22e6c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   22e70:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   22e72:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   22e76:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   22e7a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   22e7c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   22e80:	2902      	cmp	r1, #2
    beq _oops
   22e82:	d0ff      	beq.n	22e84 <_oops>

00022e84 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   22e84:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   22e86:	f01a fd0e 	bl	3d8a6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   22e8a:	bd01      	pop	{r0, pc}

00022e8c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   22e8c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   22e90:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   22e92:	490d      	ldr	r1, [pc, #52]	; (22ec8 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   22e94:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   22e98:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   22e9a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   22e9e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   22ea2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   22ea4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   22ea8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   22eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   22eb0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   22eb4:	2300      	movs	r3, #0
   22eb6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   22eba:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   22ebe:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   22ec0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   22ec2:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   22ec6:	4770      	bx	lr
   22ec8:	0003c971 	.word	0x0003c971

00022ecc <arch_switch_to_main_thread>:
   22ecc:	2300      	movs	r3, #0
   22ece:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   22ed2:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   22ed6:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   22eda:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   22ede:	f3bf 8f6f 	isb	sy
   22ee2:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   22ee6:	4b09      	ldr	r3, [pc, #36]	; (22f0c <arch_switch_to_main_thread+0x40>)
   22ee8:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   22eea:	6f43      	ldr	r3, [r0, #116]	; 0x74
   22eec:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   22ef0:	4610      	mov	r0, r2
   22ef2:	f381 8809 	msr	PSP, r1
   22ef6:	2100      	movs	r1, #0
   22ef8:	b663      	cpsie	if
   22efa:	f381 8811 	msr	BASEPRI, r1
   22efe:	f3bf 8f6f 	isb	sy
   22f02:	2200      	movs	r2, #0
   22f04:	2300      	movs	r3, #0
   22f06:	f019 fd33 	bl	3c970 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   22f0a:	bf00      	nop
   22f0c:	2001a500 	.word	0x2001a500

00022f10 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   22f10:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   22f12:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   22f14:	4a0b      	ldr	r2, [pc, #44]	; (22f44 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   22f16:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   22f18:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   22f1a:	bf1e      	ittt	ne
	movne	r1, #0
   22f1c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   22f1e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   22f20:	f01e f916 	blne	41150 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   22f24:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   22f26:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   22f2a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   22f2e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   22f32:	4905      	ldr	r1, [pc, #20]	; (22f48 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   22f34:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   22f36:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   22f38:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   22f3a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   22f3e:	4903      	ldr	r1, [pc, #12]	; (22f4c <_isr_wrapper+0x3c>)
	bx r1
   22f40:	4708      	bx	r1
   22f42:	0000      	.short	0x0000
	ldr r2, =_kernel
   22f44:	2001a500 	.word	0x2001a500
	ldr r1, =_sw_isr_table
   22f48:	000425bc 	.word	0x000425bc
	ldr r1, =z_arm_int_exit
   22f4c:	00022f51 	.word	0x00022f51

00022f50 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   22f50:	4b04      	ldr	r3, [pc, #16]	; (22f64 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   22f52:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   22f54:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   22f56:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   22f58:	d003      	beq.n	22f62 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   22f5a:	4903      	ldr	r1, [pc, #12]	; (22f68 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   22f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   22f60:	600a      	str	r2, [r1, #0]

00022f62 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   22f62:	4770      	bx	lr
	ldr r3, =_kernel
   22f64:	2001a500 	.word	0x2001a500
	ldr r1, =_SCS_ICSR
   22f68:	e000ed04 	.word	0xe000ed04

00022f6c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   22f6c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   22f6e:	4c21      	ldr	r4, [pc, #132]	; (22ff4 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   22f70:	2145      	movs	r1, #69	; 0x45
   22f72:	4821      	ldr	r0, [pc, #132]	; (22ff8 <usage_fault.constprop.0+0x8c>)
   22f74:	f019 feab 	bl	3ccce <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   22f78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f7a:	019d      	lsls	r5, r3, #6
   22f7c:	d503      	bpl.n	22f86 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   22f7e:	2145      	movs	r1, #69	; 0x45
   22f80:	481e      	ldr	r0, [pc, #120]	; (22ffc <usage_fault.constprop.0+0x90>)
   22f82:	f019 fea4 	bl	3ccce <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   22f86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f88:	01dc      	lsls	r4, r3, #7
   22f8a:	d503      	bpl.n	22f94 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   22f8c:	2145      	movs	r1, #69	; 0x45
   22f8e:	481c      	ldr	r0, [pc, #112]	; (23000 <usage_fault.constprop.0+0x94>)
   22f90:	f019 fe9d 	bl	3ccce <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   22f94:	4d17      	ldr	r5, [pc, #92]	; (22ff4 <usage_fault.constprop.0+0x88>)
   22f96:	6aac      	ldr	r4, [r5, #40]	; 0x28
   22f98:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   22f9c:	d004      	beq.n	22fa8 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   22f9e:	2145      	movs	r1, #69	; 0x45
   22fa0:	4818      	ldr	r0, [pc, #96]	; (23004 <usage_fault.constprop.0+0x98>)
   22fa2:	f019 fe94 	bl	3ccce <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   22fa6:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   22fa8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22faa:	0318      	lsls	r0, r3, #12
   22fac:	d503      	bpl.n	22fb6 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   22fae:	2145      	movs	r1, #69	; 0x45
   22fb0:	4815      	ldr	r0, [pc, #84]	; (23008 <usage_fault.constprop.0+0x9c>)
   22fb2:	f019 fe8c 	bl	3ccce <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   22fb6:	4d0f      	ldr	r5, [pc, #60]	; (22ff4 <usage_fault.constprop.0+0x88>)
   22fb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22fba:	0359      	lsls	r1, r3, #13
   22fbc:	d503      	bpl.n	22fc6 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   22fbe:	2145      	movs	r1, #69	; 0x45
   22fc0:	4812      	ldr	r0, [pc, #72]	; (2300c <usage_fault.constprop.0+0xa0>)
   22fc2:	f019 fe84 	bl	3ccce <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   22fc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22fc8:	039a      	lsls	r2, r3, #14
   22fca:	d503      	bpl.n	22fd4 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   22fcc:	2145      	movs	r1, #69	; 0x45
   22fce:	4810      	ldr	r0, [pc, #64]	; (23010 <usage_fault.constprop.0+0xa4>)
   22fd0:	f019 fe7d 	bl	3ccce <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   22fd4:	4d07      	ldr	r5, [pc, #28]	; (22ff4 <usage_fault.constprop.0+0x88>)
   22fd6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22fd8:	03db      	lsls	r3, r3, #15
   22fda:	d503      	bpl.n	22fe4 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   22fdc:	2145      	movs	r1, #69	; 0x45
   22fde:	480d      	ldr	r0, [pc, #52]	; (23014 <usage_fault.constprop.0+0xa8>)
   22fe0:	f019 fe75 	bl	3ccce <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   22fe4:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   22fe6:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   22fe8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   22fec:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   22ff0:	62ab      	str	r3, [r5, #40]	; 0x28
}
   22ff2:	bd38      	pop	{r3, r4, r5, pc}
   22ff4:	e000ed00 	.word	0xe000ed00
   22ff8:	0004479e 	.word	0x0004479e
   22ffc:	000447bb 	.word	0x000447bb
   23000:	000447d3 	.word	0x000447d3
   23004:	000447f2 	.word	0x000447f2
   23008:	00044821 	.word	0x00044821
   2300c:	00044844 	.word	0x00044844
   23010:	0004486e 	.word	0x0004486e
   23014:	0004488d 	.word	0x0004488d

00023018 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   23018:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   2301a:	4c23      	ldr	r4, [pc, #140]	; (230a8 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   2301c:	4606      	mov	r6, r0
   2301e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   23020:	4822      	ldr	r0, [pc, #136]	; (230ac <bus_fault.constprop.0+0x94>)
   23022:	2145      	movs	r1, #69	; 0x45
   23024:	f019 fe53 	bl	3ccce <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   23028:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2302a:	04d9      	lsls	r1, r3, #19
   2302c:	d503      	bpl.n	23036 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   2302e:	2145      	movs	r1, #69	; 0x45
   23030:	481f      	ldr	r0, [pc, #124]	; (230b0 <bus_fault.constprop.0+0x98>)
   23032:	f019 fe4c 	bl	3ccce <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   23036:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23038:	051a      	lsls	r2, r3, #20
   2303a:	d503      	bpl.n	23044 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   2303c:	2145      	movs	r1, #69	; 0x45
   2303e:	481d      	ldr	r0, [pc, #116]	; (230b4 <bus_fault.constprop.0+0x9c>)
   23040:	f019 fe45 	bl	3ccce <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   23044:	4c18      	ldr	r4, [pc, #96]	; (230a8 <bus_fault.constprop.0+0x90>)
   23046:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23048:	059b      	lsls	r3, r3, #22
   2304a:	d510      	bpl.n	2306e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   2304c:	481a      	ldr	r0, [pc, #104]	; (230b8 <bus_fault.constprop.0+0xa0>)
   2304e:	2145      	movs	r1, #69	; 0x45
   23050:	f019 fe3d 	bl	3ccce <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   23054:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   23056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23058:	0418      	lsls	r0, r3, #16
   2305a:	d508      	bpl.n	2306e <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   2305c:	2145      	movs	r1, #69	; 0x45
   2305e:	4817      	ldr	r0, [pc, #92]	; (230bc <bus_fault.constprop.0+0xa4>)
   23060:	f019 fe35 	bl	3ccce <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   23064:	b11e      	cbz	r6, 2306e <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   23066:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23068:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   2306c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   2306e:	4c0e      	ldr	r4, [pc, #56]	; (230a8 <bus_fault.constprop.0+0x90>)
   23070:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23072:	0559      	lsls	r1, r3, #21
   23074:	d503      	bpl.n	2307e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   23076:	2145      	movs	r1, #69	; 0x45
   23078:	4811      	ldr	r0, [pc, #68]	; (230c0 <bus_fault.constprop.0+0xa8>)
   2307a:	f019 fe28 	bl	3ccce <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2307e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23080:	05da      	lsls	r2, r3, #23
   23082:	d50b      	bpl.n	2309c <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   23084:	2145      	movs	r1, #69	; 0x45
   23086:	480f      	ldr	r0, [pc, #60]	; (230c4 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   23088:	f019 fe21 	bl	3ccce <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
   2308c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2308e:	4a06      	ldr	r2, [pc, #24]	; (230a8 <bus_fault.constprop.0+0x90>)
   23090:	6a93      	ldr	r3, [r2, #40]	; 0x28
   23092:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   23096:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   23098:	7028      	strb	r0, [r5, #0]
}
   2309a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2309c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2309e:	049b      	lsls	r3, r3, #18
   230a0:	d5f4      	bpl.n	2308c <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   230a2:	2145      	movs	r1, #69	; 0x45
   230a4:	4808      	ldr	r0, [pc, #32]	; (230c8 <bus_fault.constprop.0+0xb0>)
   230a6:	e7ef      	b.n	23088 <bus_fault.constprop.0+0x70>
   230a8:	e000ed00 	.word	0xe000ed00
   230ac:	000448bd 	.word	0x000448bd
   230b0:	000448d8 	.word	0x000448d8
   230b4:	000448ee 	.word	0x000448ee
   230b8:	00044906 	.word	0x00044906
   230bc:	00044924 	.word	0x00044924
   230c0:	0004493e 	.word	0x0004493e
   230c4:	0004495e 	.word	0x0004495e
   230c8:	0004497b 	.word	0x0004497b

000230cc <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   230cc:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   230ce:	4c2e      	ldr	r4, [pc, #184]	; (23188 <mem_manage_fault.constprop.0+0xbc>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   230d0:	4606      	mov	r6, r0
   230d2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   230d4:	482d      	ldr	r0, [pc, #180]	; (2318c <mem_manage_fault.constprop.0+0xc0>)
   230d6:	2145      	movs	r1, #69	; 0x45
   230d8:	f019 fdf9 	bl	3ccce <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   230dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   230de:	06db      	lsls	r3, r3, #27
   230e0:	d503      	bpl.n	230ea <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   230e2:	2145      	movs	r1, #69	; 0x45
   230e4:	482a      	ldr	r0, [pc, #168]	; (23190 <mem_manage_fault.constprop.0+0xc4>)
   230e6:	f019 fdf2 	bl	3ccce <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   230ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   230ec:	071c      	lsls	r4, r3, #28
   230ee:	d503      	bpl.n	230f8 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   230f0:	2145      	movs	r1, #69	; 0x45
   230f2:	4828      	ldr	r0, [pc, #160]	; (23194 <mem_manage_fault.constprop.0+0xc8>)
   230f4:	f019 fdeb 	bl	3ccce <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   230f8:	4c23      	ldr	r4, [pc, #140]	; (23188 <mem_manage_fault.constprop.0+0xbc>)
   230fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   230fc:	0798      	lsls	r0, r3, #30
   230fe:	d510      	bpl.n	23122 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
   23100:	2145      	movs	r1, #69	; 0x45
   23102:	4825      	ldr	r0, [pc, #148]	; (23198 <mem_manage_fault.constprop.0+0xcc>)
   23104:	f019 fde3 	bl	3ccce <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   23108:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   2310a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2310c:	0619      	lsls	r1, r3, #24
   2310e:	d508      	bpl.n	23122 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   23110:	2145      	movs	r1, #69	; 0x45
   23112:	4822      	ldr	r0, [pc, #136]	; (2319c <mem_manage_fault.constprop.0+0xd0>)
   23114:	f019 fddb 	bl	3ccce <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   23118:	b11e      	cbz	r6, 23122 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   2311a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2311c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   23120:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   23122:	4c19      	ldr	r4, [pc, #100]	; (23188 <mem_manage_fault.constprop.0+0xbc>)
   23124:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23126:	07db      	lsls	r3, r3, #31
   23128:	d503      	bpl.n	23132 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
   2312a:	2145      	movs	r1, #69	; 0x45
   2312c:	481c      	ldr	r0, [pc, #112]	; (231a0 <mem_manage_fault.constprop.0+0xd4>)
   2312e:	f019 fdce 	bl	3ccce <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   23132:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23134:	069e      	lsls	r6, r3, #26
   23136:	d503      	bpl.n	23140 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
   23138:	2145      	movs	r1, #69	; 0x45
   2313a:	481a      	ldr	r0, [pc, #104]	; (231a4 <mem_manage_fault.constprop.0+0xd8>)
   2313c:	f019 fdc7 	bl	3ccce <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   23140:	4b11      	ldr	r3, [pc, #68]	; (23188 <mem_manage_fault.constprop.0+0xbc>)
   23142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   23144:	06d4      	lsls	r4, r2, #27
   23146:	d402      	bmi.n	2314e <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   23148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2314a:	0790      	lsls	r0, r2, #30
   2314c:	d50d      	bpl.n	2316a <mem_manage_fault.constprop.0+0x9e>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   2314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23150:	06d9      	lsls	r1, r3, #27
   23152:	d50a      	bpl.n	2316a <mem_manage_fault.constprop.0+0x9e>
   23154:	4914      	ldr	r1, [pc, #80]	; (231a8 <mem_manage_fault.constprop.0+0xdc>)
   23156:	4815      	ldr	r0, [pc, #84]	; (231ac <mem_manage_fault.constprop.0+0xe0>)
   23158:	f240 124f 	movw	r2, #335	; 0x14f
   2315c:	f019 fd7d 	bl	3cc5a <assert_print>
   23160:	f240 114f 	movw	r1, #335	; 0x14f
   23164:	4810      	ldr	r0, [pc, #64]	; (231a8 <mem_manage_fault.constprop.0+0xdc>)
   23166:	f019 fd71 	bl	3cc4c <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
   2316a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2316c:	4b06      	ldr	r3, [pc, #24]	; (23188 <mem_manage_fault.constprop.0+0xbc>)
   2316e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   23170:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   23172:	bf42      	ittt	mi
   23174:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   23176:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   2317a:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2317c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2317e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   23182:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   23184:	7028      	strb	r0, [r5, #0]
}
   23186:	bd70      	pop	{r4, r5, r6, pc}
   23188:	e000ed00 	.word	0xe000ed00
   2318c:	000449af 	.word	0x000449af
   23190:	000449ca 	.word	0x000449ca
   23194:	000448ee 	.word	0x000448ee
   23198:	00044a02 	.word	0x00044a02
   2319c:	00044a1f 	.word	0x00044a1f
   231a0:	00044a3a 	.word	0x00044a3a
   231a4:	0004497b 	.word	0x0004497b
   231a8:	00044a5e 	.word	0x00044a5e
   231ac:	00044263 	.word	0x00044263

000231b0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   231b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   231b4:	4b69      	ldr	r3, [pc, #420]	; (2335c <z_arm_fault+0x1ac>)
{
   231b6:	4607      	mov	r7, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   231b8:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
   231bc:	460d      	mov	r5, r1
   231be:	4614      	mov	r4, r2
   231c0:	2600      	movs	r6, #0
   231c2:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   231c4:	f3c9 0808 	ubfx	r8, r9, #0, #9
   231c8:	f386 8811 	msr	BASEPRI, r6
   231cc:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   231d0:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   231d4:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   231d8:	d111      	bne.n	231fe <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   231da:	07d0      	lsls	r0, r2, #31
   231dc:	d40f      	bmi.n	231fe <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   231de:	0651      	lsls	r1, r2, #25
   231e0:	d404      	bmi.n	231ec <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   231e2:	0722      	lsls	r2, r4, #28
   231e4:	d409      	bmi.n	231fa <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)msp;
   231e6:	463d      	mov	r5, r7
			*nested_exc = true;
   231e8:	2601      	movs	r6, #1
   231ea:	e007      	b.n	231fc <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   231ec:	2145      	movs	r1, #69	; 0x45
   231ee:	485c      	ldr	r0, [pc, #368]	; (23360 <z_arm_fault+0x1b0>)
   231f0:	f019 fd6d 	bl	3ccce <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   231f4:	f014 0404 	ands.w	r4, r4, #4
   231f8:	d01c      	beq.n	23234 <z_arm_fault+0x84>
	*nested_exc = false;
   231fa:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   231fc:	b95d      	cbnz	r5, 23216 <z_arm_fault+0x66>
   231fe:	f240 32fb 	movw	r2, #1019	; 0x3fb
   23202:	4958      	ldr	r1, [pc, #352]	; (23364 <z_arm_fault+0x1b4>)
   23204:	4858      	ldr	r0, [pc, #352]	; (23368 <z_arm_fault+0x1b8>)
   23206:	f019 fd28 	bl	3cc5a <assert_print>
   2320a:	f240 31fb 	movw	r1, #1019	; 0x3fb
   2320e:	4855      	ldr	r0, [pc, #340]	; (23364 <z_arm_fault+0x1b4>)
   23210:	f019 fd1c 	bl	3cc4c <assert_post_action>
   23214:	2500      	movs	r5, #0
	*recoverable = false;
   23216:	2400      	movs	r4, #0
	switch (fault) {
   23218:	f1a8 0303 	sub.w	r3, r8, #3
	*recoverable = false;
   2321c:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   23220:	2b09      	cmp	r3, #9
   23222:	f200 8089 	bhi.w	23338 <z_arm_fault+0x188>
   23226:	e8df f003 	tbb	[pc, r3]
   2322a:	7c07      	.short	0x7c07
   2322c:	87876480 	.word	0x87876480
   23230:	84878787 	.word	0x84878787
			ptr_esf = (z_arch_esf_t *)msp;
   23234:	463d      	mov	r5, r7
	if (!alternative_state_exc) {
   23236:	e7e0      	b.n	231fa <z_arm_fault+0x4a>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   23238:	4f48      	ldr	r7, [pc, #288]	; (2335c <z_arm_fault+0x1ac>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   2323a:	2145      	movs	r1, #69	; 0x45
   2323c:	484b      	ldr	r0, [pc, #300]	; (2336c <z_arm_fault+0x1bc>)
   2323e:	f019 fd46 	bl	3ccce <z_log_minimal_printk>
	*recoverable = false;
   23242:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   23246:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   23248:	f014 0402 	ands.w	r4, r4, #2
   2324c:	d005      	beq.n	2325a <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   2324e:	2145      	movs	r1, #69	; 0x45
   23250:	4847      	ldr	r0, [pc, #284]	; (23370 <z_arm_fault+0x1c0>)
	PR_FAULT_INFO(
   23252:	f019 fd3c 	bl	3ccce <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   23256:	2400      	movs	r4, #0
}
   23258:	e006      	b.n	23268 <z_arm_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   2325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2325c:	2b00      	cmp	r3, #0
   2325e:	da1d      	bge.n	2329c <z_arm_fault+0xec>
		PR_EXC("  Debug event");
   23260:	2145      	movs	r1, #69	; 0x45
   23262:	4844      	ldr	r0, [pc, #272]	; (23374 <z_arm_fault+0x1c4>)
   23264:	f019 fd33 	bl	3ccce <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   23268:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2326c:	b99b      	cbnz	r3, 23296 <z_arm_fault+0xe6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2326e:	2268      	movs	r2, #104	; 0x68
   23270:	4629      	mov	r1, r5
   23272:	a802      	add	r0, sp, #8
   23274:	f01e f9a5 	bl	415c2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   23278:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2327a:	2e00      	cmp	r6, #0
   2327c:	d069      	beq.n	23352 <z_arm_fault+0x1a2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2327e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   23282:	b922      	cbnz	r2, 2328e <z_arm_fault+0xde>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   23284:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   23288:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2328c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   2328e:	4620      	mov	r0, r4
   23290:	a902      	add	r1, sp, #8
   23292:	f7ff fc85 	bl	22ba0 <z_arm_fatal_error>
}
   23296:	b01d      	add	sp, #116	; 0x74
   23298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   2329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2329e:	005b      	lsls	r3, r3, #1
   232a0:	d536      	bpl.n	23310 <z_arm_fault+0x160>
		PR_EXC("  Fault escalation (see below)");
   232a2:	2145      	movs	r1, #69	; 0x45
   232a4:	4834      	ldr	r0, [pc, #208]	; (23378 <z_arm_fault+0x1c8>)
   232a6:	f019 fd12 	bl	3ccce <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
   232aa:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   232ac:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   232b0:	f64d 7302 	movw	r3, #57090	; 0xdf02
   232b4:	429a      	cmp	r2, r3
   232b6:	d106      	bne.n	232c6 <z_arm_fault+0x116>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   232b8:	2145      	movs	r1, #69	; 0x45
   232ba:	682a      	ldr	r2, [r5, #0]
   232bc:	482f      	ldr	r0, [pc, #188]	; (2337c <z_arm_fault+0x1cc>)
   232be:	f019 fd06 	bl	3ccce <z_log_minimal_printk>
			reason = esf->basic.r0;
   232c2:	682c      	ldr	r4, [r5, #0]
   232c4:	e7d0      	b.n	23268 <z_arm_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
   232c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   232ca:	b133      	cbz	r3, 232da <z_arm_fault+0x12a>
			reason = mem_manage_fault(esf, 1, recoverable);
   232cc:	2001      	movs	r0, #1
   232ce:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   232d2:	f7ff fefb 	bl	230cc <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
   232d6:	4604      	mov	r4, r0
		break;
   232d8:	e7c6      	b.n	23268 <z_arm_fault+0xb8>
		} else if (SCB_BFSR != 0) {
   232da:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   232de:	b12b      	cbz	r3, 232ec <z_arm_fault+0x13c>
			reason = bus_fault(esf, 1, recoverable);
   232e0:	2001      	movs	r0, #1
   232e2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   232e6:	f7ff fe97 	bl	23018 <bus_fault.constprop.0>
   232ea:	e7f4      	b.n	232d6 <z_arm_fault+0x126>
		} else if (SCB_UFSR != 0) {
   232ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   232ee:	b29b      	uxth	r3, r3
   232f0:	b113      	cbz	r3, 232f8 <z_arm_fault+0x148>
		reason = usage_fault(esf);
   232f2:	f7ff fe3b 	bl	22f6c <usage_fault.constprop.0>
   232f6:	e7ee      	b.n	232d6 <z_arm_fault+0x126>
			__ASSERT(0,
   232f8:	491a      	ldr	r1, [pc, #104]	; (23364 <z_arm_fault+0x1b4>)
   232fa:	f240 22cd 	movw	r2, #717	; 0x2cd
   232fe:	481a      	ldr	r0, [pc, #104]	; (23368 <z_arm_fault+0x1b8>)
   23300:	f019 fcab 	bl	3cc5a <assert_print>
   23304:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
   23308:	4816      	ldr	r0, [pc, #88]	; (23364 <z_arm_fault+0x1b4>)
   2330a:	f019 fc9f 	bl	3cc4c <assert_post_action>
   2330e:	e7ab      	b.n	23268 <z_arm_fault+0xb8>
   23310:	4914      	ldr	r1, [pc, #80]	; (23364 <z_arm_fault+0x1b4>)
   23312:	f240 22d1 	movw	r2, #721	; 0x2d1
   23316:	4814      	ldr	r0, [pc, #80]	; (23368 <z_arm_fault+0x1b8>)
   23318:	f019 fc9f 	bl	3cc5a <assert_print>
   2331c:	f240 21d1 	movw	r1, #721	; 0x2d1
   23320:	e7f2      	b.n	23308 <z_arm_fault+0x158>
		reason = mem_manage_fault(esf, 0, recoverable);
   23322:	2000      	movs	r0, #0
   23324:	f10d 0107 	add.w	r1, sp, #7
   23328:	e7d3      	b.n	232d2 <z_arm_fault+0x122>
		reason = bus_fault(esf, 0, recoverable);
   2332a:	2000      	movs	r0, #0
   2332c:	f10d 0107 	add.w	r1, sp, #7
   23330:	e7d9      	b.n	232e6 <z_arm_fault+0x136>
	PR_FAULT_INFO(
   23332:	2145      	movs	r1, #69	; 0x45
   23334:	4812      	ldr	r0, [pc, #72]	; (23380 <z_arm_fault+0x1d0>)
   23336:	e78c      	b.n	23252 <z_arm_fault+0xa2>
	PR_FAULT_INFO("***** %s %d) *****",
   23338:	4912      	ldr	r1, [pc, #72]	; (23384 <z_arm_fault+0x1d4>)
   2333a:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
   2333e:	4a12      	ldr	r2, [pc, #72]	; (23388 <z_arm_fault+0x1d8>)
   23340:	4812      	ldr	r0, [pc, #72]	; (2338c <z_arm_fault+0x1dc>)
   23342:	bf08      	it	eq
   23344:	460a      	moveq	r2, r1
   23346:	f1a8 0310 	sub.w	r3, r8, #16
   2334a:	2145      	movs	r1, #69	; 0x45
   2334c:	f019 fcbf 	bl	3ccce <z_log_minimal_printk>
   23350:	e781      	b.n	23256 <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   23352:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   23356:	f023 0301 	bic.w	r3, r3, #1
   2335a:	e797      	b.n	2328c <z_arm_fault+0xdc>
   2335c:	e000ed00 	.word	0xe000ed00
   23360:	00044ac6 	.word	0x00044ac6
   23364:	00044a5e 	.word	0x00044a5e
   23368:	00044263 	.word	0x00044263
   2336c:	00044aee 	.word	0x00044aee
   23370:	00044b0a 	.word	0x00044b0a
   23374:	00044b30 	.word	0x00044b30
   23378:	00044b43 	.word	0x00044b43
   2337c:	00044b67 	.word	0x00044b67
   23380:	00044b88 	.word	0x00044b88
   23384:	00044a98 	.word	0x00044a98
   23388:	00044aad 	.word	0x00044aad
   2338c:	00044bb1 	.word	0x00044bb1

00023390 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   23390:	4b04      	ldr	r3, [pc, #16]	; (233a4 <z_arm_fault_init+0x14>)
   23392:	695a      	ldr	r2, [r3, #20]
   23394:	f042 0210 	orr.w	r2, r2, #16
   23398:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   2339a:	695a      	ldr	r2, [r3, #20]
   2339c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   233a0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   233a2:	4770      	bx	lr
   233a4:	e000ed00 	.word	0xe000ed00

000233a8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   233a8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   233ac:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   233b0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   233b2:	4672      	mov	r2, lr
	bl z_arm_fault
   233b4:	f7ff fefc 	bl	231b0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   233b8:	bd01      	pop	{r0, pc}
   233ba:	bf00      	nop

000233bc <z_arm_save_fp_context>:
 * @file @brief Helper functions for saving and restoring the FP context.
 *
 */

void z_arm_save_fp_context(struct fpu_ctx_full *buffer)
{
   233bc:	b510      	push	{r4, lr}
#if defined(CONFIG_FPU_SHARING)
	__ASSERT_NO_MSG(buffer != NULL);
   233be:	4604      	mov	r4, r0
   233c0:	b940      	cbnz	r0, 233d4 <z_arm_save_fp_context+0x18>
   233c2:	4910      	ldr	r1, [pc, #64]	; (23404 <z_arm_save_fp_context+0x48>)
   233c4:	4810      	ldr	r0, [pc, #64]	; (23408 <z_arm_save_fp_context+0x4c>)
   233c6:	2214      	movs	r2, #20
   233c8:	f019 fc47 	bl	3cc5a <assert_print>
   233cc:	2114      	movs	r1, #20
   233ce:	480d      	ldr	r0, [pc, #52]	; (23404 <z_arm_save_fp_context+0x48>)
   233d0:	f019 fc3c 	bl	3cc4c <assert_post_action>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   233d4:	f3ef 8314 	mrs	r3, CONTROL

	uint32_t CONTROL = __get_CONTROL();

	if (CONTROL & CONTROL_FPCA_Msk) {
   233d8:	075a      	lsls	r2, r3, #29
   233da:	d512      	bpl.n	23402 <z_arm_save_fp_context+0x46>
		/* Store caller-saved and callee-saved FP registers. */
		__asm__ volatile(
   233dc:	f104 0240 	add.w	r2, r4, #64	; 0x40
   233e0:	ec84 0a10 	vstmia	r4, {s0-s15}
   233e4:	ec82 8a10 	vstmia	r2, {s16-s31}
  return __builtin_arm_get_fpscr();
   233e8:	eef1 2a10 	vmrs	r2, fpscr
			"vstmia %0, {s0-s15}\n"
			"vstmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);

		buffer->fpscr = __get_FPSCR();
   233ec:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		buffer->ctx_saved = true;
   233f0:	2201      	movs	r2, #1

		/* Disable FPCA so no stacking of FP registers happens in TFM. */
		__set_CONTROL(CONTROL & ~CONTROL_FPCA_Msk);
   233f2:	f023 0304 	bic.w	r3, r3, #4
		buffer->ctx_saved = true;
   233f6:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   233fa:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   233fe:	f3bf 8f6f 	isb	sy
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   23402:	bd10      	pop	{r4, pc}
   23404:	00044bc9 	.word	0x00044bc9
   23408:	00044263 	.word	0x00044263

0002340c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2340c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2340e:	2120      	movs	r1, #32
   23410:	4803      	ldr	r0, [pc, #12]	; (23420 <z_arm_interrupt_init+0x14>)
   23412:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   23414:	3301      	adds	r3, #1
   23416:	2b41      	cmp	r3, #65	; 0x41
   23418:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2341c:	d1f9      	bne.n	23412 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2341e:	4770      	bx	lr
   23420:	e000e100 	.word	0xe000e100

00023424 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   23424:	2000      	movs	r0, #0
    msr CONTROL, r0
   23426:	f380 8814 	msr	CONTROL, r0
    isb
   2342a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   2342e:	2000      	movs	r0, #0
    msr MSPLIM, r0
   23430:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   23434:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   23438:	f01f f80e 	bl	42458 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   2343c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   2343e:	490e      	ldr	r1, [pc, #56]	; (23478 <__start+0x54>)
    str r0, [r1]
   23440:	6008      	str	r0, [r1, #0]
    dsb
   23442:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   23446:	480d      	ldr	r0, [pc, #52]	; (2347c <__start+0x58>)
    msr msp, r0
   23448:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   2344c:	f000 f83e 	bl	234cc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   23450:	2020      	movs	r0, #32
    msr BASEPRI, r0
   23452:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   23456:	480a      	ldr	r0, [pc, #40]	; (23480 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   23458:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   2345c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   2345e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   23462:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   23466:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   23468:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2346a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   2346e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   23472:	f7ff fc65 	bl	22d40 <z_arm_prep_c>
   23476:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   23478:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   2347c:	20021a00 	.word	0x20021a00
    ldr r0, =z_interrupt_stacks
   23480:	20021b40 	.word	0x20021b40

00023484 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   23484:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   23488:	4905      	ldr	r1, [pc, #20]	; (234a0 <sys_arch_reboot+0x1c>)
   2348a:	4b06      	ldr	r3, [pc, #24]	; (234a4 <sys_arch_reboot+0x20>)
   2348c:	68ca      	ldr	r2, [r1, #12]
   2348e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   23492:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   23494:	60cb      	str	r3, [r1, #12]
   23496:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2349a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   2349c:	e7fd      	b.n	2349a <sys_arch_reboot+0x16>
   2349e:	bf00      	nop
   234a0:	e000ed00 	.word	0xe000ed00
   234a4:	05fa0004 	.word	0x05fa0004

000234a8 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   234a8:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   234aa:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   234ac:	4906      	ldr	r1, [pc, #24]	; (234c8 <z_arm_clear_arm_mpu_config+0x20>)
   234ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   234b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   234b6:	4293      	cmp	r3, r2
   234b8:	d100      	bne.n	234bc <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   234ba:	4770      	bx	lr
  mpu->RNR = rnr;
   234bc:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   234c0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   234c4:	3301      	adds	r3, #1
   234c6:	e7f6      	b.n	234b6 <z_arm_clear_arm_mpu_config+0xe>
   234c8:	e000ed00 	.word	0xe000ed00

000234cc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   234cc:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   234ce:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   234d0:	2400      	movs	r4, #0
   234d2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   234d6:	f7ff ffe7 	bl	234a8 <z_arm_clear_arm_mpu_config>
   234da:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   234dc:	f04f 30ff 	mov.w	r0, #4294967295
   234e0:	4a0b      	ldr	r2, [pc, #44]	; (23510 <z_arm_init_arch_hw_at_boot+0x44>)
   234e2:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   234e6:	3301      	adds	r3, #1
   234e8:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   234ea:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   234ee:	d1f8      	bne.n	234e2 <z_arm_init_arch_hw_at_boot+0x16>
   234f0:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   234f2:	f04f 30ff 	mov.w	r0, #4294967295
   234f6:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   234fa:	3301      	adds	r3, #1
   234fc:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   234fe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   23502:	d1f8      	bne.n	234f6 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
   23504:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   23506:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2350a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   2350e:	bd10      	pop	{r4, pc}
   23510:	e000e100 	.word	0xe000e100

00023514 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   23514:	4b08      	ldr	r3, [pc, #32]	; (23538 <z_impl_k_thread_abort+0x24>)
   23516:	689b      	ldr	r3, [r3, #8]
   23518:	4283      	cmp	r3, r0
   2351a:	d10b      	bne.n	23534 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2351c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   23520:	b143      	cbz	r3, 23534 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   23522:	4b06      	ldr	r3, [pc, #24]	; (2353c <z_impl_k_thread_abort+0x28>)
   23524:	685a      	ldr	r2, [r3, #4]
   23526:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   2352a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   2352c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2352e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   23532:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   23534:	f015 b92e 	b.w	38794 <z_thread_abort>
   23538:	2001a500 	.word	0x2001a500
   2353c:	e000ed00 	.word	0xe000ed00

00023540 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   23540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   23542:	4c09      	ldr	r4, [pc, #36]	; (23568 <z_arm_configure_static_mpu_regions+0x28>)
   23544:	4a09      	ldr	r2, [pc, #36]	; (2356c <z_arm_configure_static_mpu_regions+0x2c>)
   23546:	4623      	mov	r3, r4
   23548:	2101      	movs	r1, #1
   2354a:	4809      	ldr	r0, [pc, #36]	; (23570 <z_arm_configure_static_mpu_regions+0x30>)
   2354c:	f000 f92c 	bl	237a8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   23550:	2300      	movs	r3, #0
   23552:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   23554:	4b07      	ldr	r3, [pc, #28]	; (23574 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   23556:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   23558:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2355a:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   2355c:	9301      	str	r3, [sp, #4]
   2355e:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   23560:	f000 f93e 	bl	237e0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   23564:	b004      	add	sp, #16
   23566:	bd10      	pop	{r4, pc}
   23568:	20040000 	.word	0x20040000
   2356c:	20014500 	.word	0x20014500
   23570:	00042c64 	.word	0x00042c64
   23574:	20015150 	.word	0x20015150

00023578 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   23578:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   2357a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   2357c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   2357e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   23582:	f004 031f 	and.w	r3, r4, #31
   23586:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   23588:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   2358a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   2358c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   23590:	4905      	ldr	r1, [pc, #20]	; (235a8 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   23592:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   23596:	f043 0301 	orr.w	r3, r3, #1
   2359a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
   2359e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
   235a2:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   235a6:	bd10      	pop	{r4, pc}
   235a8:	e000ed00 	.word	0xe000ed00

000235ac <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
   235ac:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   235ae:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   235b0:	680c      	ldr	r4, [r1, #0]
{
   235b2:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
   235b4:	890a      	ldrh	r2, [r1, #8]
   235b6:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   235b8:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   235ba:	3b01      	subs	r3, #1
   235bc:	f024 041f 	bic.w	r4, r4, #31
   235c0:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   235c2:	f002 021f 	and.w	r2, r2, #31
   235c6:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   235ca:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   235ce:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   235d0:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   235d2:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   235d6:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
   235d8:	d909      	bls.n	235ee <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   235da:	4602      	mov	r2, r0
   235dc:	2145      	movs	r1, #69	; 0x45
   235de:	4806      	ldr	r0, [pc, #24]	; (235f8 <mpu_configure_region+0x4c>)
   235e0:	f019 fb75 	bl	3ccce <z_log_minimal_printk>
   235e4:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
   235e8:	4620      	mov	r0, r4
   235ea:	b005      	add	sp, #20
   235ec:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   235ee:	4669      	mov	r1, sp
   235f0:	f7ff ffc2 	bl	23578 <region_init>
	return region_allocate_and_init(index,
   235f4:	e7f8      	b.n	235e8 <mpu_configure_region+0x3c>
   235f6:	bf00      	nop
   235f8:	00044c05 	.word	0x00044c05

000235fc <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   235fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23600:	4689      	mov	r9, r1
   23602:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   23604:	4606      	mov	r6, r0
   23606:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   2360a:	4d58      	ldr	r5, [pc, #352]	; (2376c <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   2360c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   2360e:	45c8      	cmp	r8, r9
   23610:	da27      	bge.n	23662 <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
   23612:	f8d6 a004 	ldr.w	sl, [r6, #4]
   23616:	f1ba 0f00 	cmp.w	sl, #0
   2361a:	d044      	beq.n	236a6 <mpu_configure_regions_and_partition.constprop.0+0xaa>
		&&
   2361c:	f1ba 0f1f 	cmp.w	sl, #31
   23620:	d918      	bls.n	23654 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
   23622:	f01a 0f1f 	tst.w	sl, #31
   23626:	d115      	bne.n	23654 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
   23628:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   2362c:	f01b 0f1f 	tst.w	fp, #31
   23630:	d110      	bne.n	23654 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   23632:	4658      	mov	r0, fp
   23634:	f01a f960 	bl	3d8f8 <arm_cmse_mpu_region_get>
   23638:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   2363a:	eb0a 000b 	add.w	r0, sl, fp
   2363e:	3801      	subs	r0, #1
   23640:	f01a f95a 	bl	3d8f8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   23644:	4287      	cmp	r7, r0
   23646:	d010      	beq.n	2366a <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
   23648:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   2364c:	463a      	mov	r2, r7
   2364e:	2145      	movs	r1, #69	; 0x45
   23650:	4847      	ldr	r0, [pc, #284]	; (23770 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   23652:	e002      	b.n	2365a <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   23654:	4642      	mov	r2, r8
   23656:	2145      	movs	r1, #69	; 0x45
   23658:	4846      	ldr	r0, [pc, #280]	; (23774 <mpu_configure_regions_and_partition.constprop.0+0x178>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   2365a:	f019 fb38 	bl	3ccce <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   2365e:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   23662:	4620      	mov	r0, r4
   23664:	b005      	add	sp, #20
   23666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   2366a:	f117 0f16 	cmn.w	r7, #22
   2366e:	d0ed      	beq.n	2364c <mpu_configure_regions_and_partition.constprop.0+0x50>
   23670:	42bc      	cmp	r4, r7
   23672:	ddeb      	ble.n	2364c <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   23674:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   23678:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
   2367c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   23680:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   23684:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   23688:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   2368c:	e9d6 3200 	ldrd	r3, r2, [r6]
   23690:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   23692:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   23694:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   23698:	d11d      	bne.n	236d6 <mpu_configure_regions_and_partition.constprop.0+0xda>
   2369a:	45d3      	cmp	fp, sl
   2369c:	d107      	bne.n	236ae <mpu_configure_regions_and_partition.constprop.0+0xb2>
			mpu_configure_region(u_reg_index, &regions[i]);
   2369e:	4631      	mov	r1, r6
   236a0:	b2f8      	uxtb	r0, r7
   236a2:	f7ff ff83 	bl	235ac <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   236a6:	f108 0801 	add.w	r8, r8, #1
   236aa:	360c      	adds	r6, #12
   236ac:	e7af      	b.n	2360e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   236ae:	4631      	mov	r1, r6
	MPU->RNR = index;
   236b0:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   236b4:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
   236b8:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   236bc:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   236c0:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   236c2:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   236c6:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   236c8:	f7ff ff70 	bl	235ac <mpu_configure_region>
			if (reg_index == -EINVAL) {
   236cc:	f110 0f16 	cmn.w	r0, #22
   236d0:	d0c5      	beq.n	2365e <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
   236d2:	1c44      	adds	r4, r0, #1
   236d4:	e7e7      	b.n	236a6 <mpu_configure_regions_and_partition.constprop.0+0xaa>
				regions[i].start - 1);
   236d6:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
   236d8:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   236da:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
   236dc:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   236e0:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   236e4:	d108      	bne.n	236f8 <mpu_configure_regions_and_partition.constprop.0+0xfc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   236e6:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   236ea:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   236ec:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   236f0:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   236f2:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   236f6:	e7e7      	b.n	236c8 <mpu_configure_regions_and_partition.constprop.0+0xcc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   236f8:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
   236fc:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   23700:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   23702:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   23706:	4631      	mov	r1, r6
   23708:	f7ff ff50 	bl	235ac <mpu_configure_region>
			if (reg_index == -EINVAL) {
   2370c:	f110 0f16 	cmn.w	r0, #22
   23710:	d0a5      	beq.n	2365e <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
   23712:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   23716:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
   2371a:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   2371e:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   23722:	f362 0304 	bfi	r3, r2, #0, #5
   23726:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   2372a:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   2372e:	f89d 2008 	ldrb.w	r2, [sp, #8]
   23732:	085b      	lsrs	r3, r3, #1
   23734:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
   23738:	e9d6 3100 	ldrd	r3, r1, [r6]
   2373c:	440b      	add	r3, r1
   2373e:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   23740:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   23744:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   23746:	445b      	add	r3, fp
   23748:	eba3 030a 	sub.w	r3, r3, sl
   2374c:	b2c0      	uxtb	r0, r0
   2374e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   23752:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   23754:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
   23758:	9303      	str	r3, [sp, #12]
   2375a:	d903      	bls.n	23764 <mpu_configure_regions_and_partition.constprop.0+0x168>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   2375c:	4602      	mov	r2, r0
   2375e:	2145      	movs	r1, #69	; 0x45
   23760:	4805      	ldr	r0, [pc, #20]	; (23778 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   23762:	e77a      	b.n	2365a <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
   23764:	4669      	mov	r1, sp
   23766:	f7ff ff07 	bl	23578 <region_init>
   2376a:	e7b2      	b.n	236d2 <mpu_configure_regions_and_partition.constprop.0+0xd6>
   2376c:	e000ed00 	.word	0xe000ed00
   23770:	00044c58 	.word	0x00044c58
   23774:	00044c30 	.word	0x00044c30
   23778:	00044c05 	.word	0x00044c05

0002377c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2377c:	2205      	movs	r2, #5
   2377e:	4b04      	ldr	r3, [pc, #16]	; (23790 <arm_core_mpu_enable+0x14>)
   23780:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   23784:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   23788:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   2378c:	4770      	bx	lr
   2378e:	bf00      	nop
   23790:	e000ed00 	.word	0xe000ed00

00023794 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   23794:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   23798:	2200      	movs	r2, #0
   2379a:	4b02      	ldr	r3, [pc, #8]	; (237a4 <arm_core_mpu_disable+0x10>)
   2379c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   237a0:	4770      	bx	lr
   237a2:	bf00      	nop
   237a4:	e000ed00 	.word	0xe000ed00

000237a8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   237a8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   237aa:	4c0a      	ldr	r4, [pc, #40]	; (237d4 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   237ac:	7822      	ldrb	r2, [r4, #0]
   237ae:	f7ff ff25 	bl	235fc <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   237b2:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   237b4:	3016      	adds	r0, #22
   237b6:	d10c      	bne.n	237d2 <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   237b8:	4907      	ldr	r1, [pc, #28]	; (237d8 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   237ba:	4808      	ldr	r0, [pc, #32]	; (237dc <arm_core_mpu_configure_static_mpu_regions+0x34>)
   237bc:	f240 1211 	movw	r2, #273	; 0x111
   237c0:	f019 fa4b 	bl	3cc5a <assert_print>
			regions_num);
	}
}
   237c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   237c8:	f240 1111 	movw	r1, #273	; 0x111
   237cc:	4802      	ldr	r0, [pc, #8]	; (237d8 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   237ce:	f019 ba3d 	b.w	3cc4c <assert_post_action>
}
   237d2:	bd10      	pop	{r4, pc}
   237d4:	2001a5a3 	.word	0x2001a5a3
   237d8:	00044c80 	.word	0x00044c80
   237dc:	00044263 	.word	0x00044263

000237e0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   237e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237e4:	4d30      	ldr	r5, [pc, #192]	; (238a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   237e6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   237e8:	4606      	mov	r6, r0
   237ea:	f04f 0800 	mov.w	r8, #0
   237ee:	46ab      	mov	fp, r5
	MPU->RNR = index;
   237f0:	4f2e      	ldr	r7, [pc, #184]	; (238ac <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   237f2:	45d0      	cmp	r8, sl
   237f4:	db02      	blt.n	237fc <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   237f6:	b003      	add	sp, #12
   237f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   237fc:	f8d6 9004 	ldr.w	r9, [r6, #4]
   23800:	f1b9 0f00 	cmp.w	r9, #0
   23804:	d04a      	beq.n	2389c <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   23806:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   23808:	4608      	mov	r0, r1
   2380a:	9101      	str	r1, [sp, #4]
   2380c:	f01a f874 	bl	3d8f8 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   23810:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   23812:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   23814:	eb09 0001 	add.w	r0, r9, r1
   23818:	3801      	subs	r0, #1
   2381a:	f01a f86d 	bl	3d8f8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   2381e:	4284      	cmp	r4, r0
   23820:	f04f 0214 	mov.w	r2, #20
   23824:	4b22      	ldr	r3, [pc, #136]	; (238b0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   23826:	d013      	beq.n	23850 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
   23828:	f06f 0315 	mvn.w	r3, #21
   2382c:	fb02 f808 	mul.w	r8, r2, r8
   23830:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   23834:	f240 1221 	movw	r2, #289	; 0x121
   23838:	491e      	ldr	r1, [pc, #120]	; (238b4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   2383a:	481f      	ldr	r0, [pc, #124]	; (238b8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   2383c:	f019 fa0d 	bl	3cc5a <assert_print>
   23840:	f240 1121 	movw	r1, #289	; 0x121
   23844:	481b      	ldr	r0, [pc, #108]	; (238b4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
   23846:	b003      	add	sp, #12
   23848:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   2384c:	f019 b9fe 	b.w	3cc4c <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   23850:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   23854:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   23856:	d0ed      	beq.n	23834 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   23858:	7819      	ldrb	r1, [r3, #0]
   2385a:	42a1      	cmp	r1, r4
   2385c:	ddea      	ble.n	23834 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   2385e:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   23862:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
   23866:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   2386a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
   2386e:	f100 0108 	add.w	r1, r0, #8
   23872:	7b00      	ldrb	r0, [r0, #12]
   23874:	f364 0004 	bfi	r0, r4, #0, #5
   23878:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   2387a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   2387e:	790c      	ldrb	r4, [r1, #4]
   23880:	0840      	lsrs	r0, r0, #1
   23882:	f360 1447 	bfi	r4, r0, #5, #3
   23886:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   23888:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   2388c:	f021 011f 	bic.w	r1, r1, #31
   23890:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   23892:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
   23896:	f021 011f 	bic.w	r1, r1, #31
   2389a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   2389c:	f108 0801 	add.w	r8, r8, #1
   238a0:	3514      	adds	r5, #20
   238a2:	360c      	adds	r6, #12
   238a4:	e7a5      	b.n	237f2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   238a6:	bf00      	nop
   238a8:	200191cc 	.word	0x200191cc
   238ac:	e000ed00 	.word	0xe000ed00
   238b0:	2001a5a3 	.word	0x2001a5a3
   238b4:	00044c80 	.word	0x00044c80
   238b8:	00044263 	.word	0x00044263

000238bc <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   238bc:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   238be:	4d1d      	ldr	r5, [pc, #116]	; (23934 <z_arm_mpu_init+0x78>)
   238c0:	682c      	ldr	r4, [r5, #0]
   238c2:	2c10      	cmp	r4, #16
   238c4:	d90d      	bls.n	238e2 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   238c6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   238ca:	491b      	ldr	r1, [pc, #108]	; (23938 <z_arm_mpu_init+0x7c>)
   238cc:	481b      	ldr	r0, [pc, #108]	; (2393c <z_arm_mpu_init+0x80>)
   238ce:	f019 f9c4 	bl	3cc5a <assert_print>
   238d2:	4819      	ldr	r0, [pc, #100]	; (23938 <z_arm_mpu_init+0x7c>)
   238d4:	f44f 71a4 	mov.w	r1, #328	; 0x148
   238d8:	f019 f9b8 	bl	3cc4c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   238dc:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   238e0:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   238e2:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   238e4:	f7ff ff56 	bl	23794 <arm_core_mpu_disable>
	MPU->MAIR0 =
   238e8:	4b15      	ldr	r3, [pc, #84]	; (23940 <z_arm_mpu_init+0x84>)
   238ea:	4a16      	ldr	r2, [pc, #88]	; (23944 <z_arm_mpu_init+0x88>)
   238ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   238f0:	4284      	cmp	r4, r0
   238f2:	d117      	bne.n	23924 <z_arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
   238f4:	4b14      	ldr	r3, [pc, #80]	; (23948 <z_arm_mpu_init+0x8c>)
   238f6:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   238f8:	f7ff ff40 	bl	2377c <arm_core_mpu_enable>
	__ASSERT(
   238fc:	4b10      	ldr	r3, [pc, #64]	; (23940 <z_arm_mpu_init+0x84>)
   238fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   23902:	f3c3 2307 	ubfx	r3, r3, #8, #8
   23906:	2b10      	cmp	r3, #16
   23908:	d00a      	beq.n	23920 <z_arm_mpu_init+0x64>
   2390a:	490b      	ldr	r1, [pc, #44]	; (23938 <z_arm_mpu_init+0x7c>)
   2390c:	480b      	ldr	r0, [pc, #44]	; (2393c <z_arm_mpu_init+0x80>)
   2390e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   23912:	f019 f9a2 	bl	3cc5a <assert_print>
   23916:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   2391a:	4807      	ldr	r0, [pc, #28]	; (23938 <z_arm_mpu_init+0x7c>)
   2391c:	f019 f996 	bl	3cc4c <assert_post_action>
	return 0;
   23920:	2000      	movs	r0, #0
   23922:	e7dd      	b.n	238e0 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   23924:	6869      	ldr	r1, [r5, #4]
   23926:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   2392a:	f7ff fe25 	bl	23578 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2392e:	3001      	adds	r0, #1
   23930:	e7de      	b.n	238f0 <z_arm_mpu_init+0x34>
   23932:	bf00      	nop
   23934:	00042c70 	.word	0x00042c70
   23938:	00044c80 	.word	0x00044c80
   2393c:	00044263 	.word	0x00044263
   23940:	e000ed00 	.word	0xe000ed00
   23944:	0044ffaa 	.word	0x0044ffaa
   23948:	2001a5a3 	.word	0x2001a5a3

0002394c <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   2394c:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   2394e:	4b09      	ldr	r3, [pc, #36]	; (23974 <malloc_prepare+0x28>)
   23950:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   23954:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2395c:	d208      	bcs.n	23970 <malloc_prepare+0x24>
   2395e:	4906      	ldr	r1, [pc, #24]	; (23978 <malloc_prepare+0x2c>)
   23960:	4806      	ldr	r0, [pc, #24]	; (2397c <malloc_prepare+0x30>)
   23962:	2281      	movs	r2, #129	; 0x81
   23964:	f019 f979 	bl	3cc5a <assert_print>
   23968:	2181      	movs	r1, #129	; 0x81
   2396a:	4803      	ldr	r0, [pc, #12]	; (23978 <malloc_prepare+0x2c>)
   2396c:	f019 f96e 	bl	3cc4c <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   23970:	2000      	movs	r0, #0
   23972:	bd08      	pop	{r3, pc}
   23974:	20028c40 	.word	0x20028c40
   23978:	00044cb7 	.word	0x00044cb7
   2397c:	00044263 	.word	0x00044263

00023980 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   23980:	4b01      	ldr	r3, [pc, #4]	; (23988 <__stdout_hook_install+0x8>)
   23982:	6018      	str	r0, [r3, #0]
}
   23984:	4770      	bx	lr
   23986:	bf00      	nop
   23988:	20014620 	.word	0x20014620

0002398c <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   2398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2398e:	4606      	mov	r6, r0
   23990:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   23992:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   23994:	4f06      	ldr	r7, [pc, #24]	; (239b0 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   23996:	42ac      	cmp	r4, r5
   23998:	da08      	bge.n	239ac <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   2399a:	683b      	ldr	r3, [r7, #0]
   2399c:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   2399e:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   239a0:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   239a2:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   239a6:	d001      	beq.n	239ac <z_impl_zephyr_read_stdin+0x20>
   239a8:	280d      	cmp	r0, #13
   239aa:	d1f4      	bne.n	23996 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   239ac:	4620      	mov	r0, r4
   239ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   239b0:	2001461c 	.word	0x2001461c

000239b4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   239b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   239b6:	460d      	mov	r5, r1
   239b8:	4f09      	ldr	r7, [pc, #36]	; (239e0 <z_impl_zephyr_write_stdout+0x2c>)
   239ba:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   239bc:	f1c0 0401 	rsb	r4, r0, #1
   239c0:	19a3      	adds	r3, r4, r6
   239c2:	429d      	cmp	r5, r3
   239c4:	dc01      	bgt.n	239ca <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   239c6:	4628      	mov	r0, r5
   239c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   239ca:	7873      	ldrb	r3, [r6, #1]
   239cc:	2b0a      	cmp	r3, #10
   239ce:	d102      	bne.n	239d6 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   239d0:	200d      	movs	r0, #13
   239d2:	683b      	ldr	r3, [r7, #0]
   239d4:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   239d6:	683b      	ldr	r3, [r7, #0]
   239d8:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   239dc:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   239de:	e7ef      	b.n	239c0 <z_impl_zephyr_write_stdout+0xc>
   239e0:	20014620 	.word	0x20014620

000239e4 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   239e4:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   239e6:	2105      	movs	r1, #5
   239e8:	4801      	ldr	r0, [pc, #4]	; (239f0 <_exit+0xc>)
   239ea:	f7ff ffe3 	bl	239b4 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   239ee:	e7fe      	b.n	239ee <_exit+0xa>
   239f0:	00044ce7 	.word	0x00044ce7

000239f4 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   239f4:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   239f6:	4c07      	ldr	r4, [pc, #28]	; (23a14 <_sbrk+0x20>)
   239f8:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   239fa:	18c2      	adds	r2, r0, r3
   239fc:	4806      	ldr	r0, [pc, #24]	; (23a18 <_sbrk+0x24>)
   239fe:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   23a02:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   23a06:	428a      	cmp	r2, r1

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   23a08:	bf2e      	itee	cs
   23a0a:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   23a0e:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   23a10:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
   23a12:	bd10      	pop	{r4, pc}
   23a14:	200191e0 	.word	0x200191e0
   23a18:	20028c40 	.word	0x20028c40

00023a1c <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   23a1c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   23a1e:	4604      	mov	r4, r0
   23a20:	b950      	cbnz	r0, 23a38 <__retarget_lock_init_recursive+0x1c>
   23a22:	4910      	ldr	r1, [pc, #64]	; (23a64 <__retarget_lock_init_recursive+0x48>)
   23a24:	4810      	ldr	r0, [pc, #64]	; (23a68 <__retarget_lock_init_recursive+0x4c>)
   23a26:	f240 1277 	movw	r2, #375	; 0x177
   23a2a:	f019 f916 	bl	3cc5a <assert_print>
   23a2e:	f240 1177 	movw	r1, #375	; 0x177
   23a32:	480c      	ldr	r0, [pc, #48]	; (23a64 <__retarget_lock_init_recursive+0x48>)
   23a34:	f019 f90a 	bl	3cc4c <assert_post_action>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   23a38:	2014      	movs	r0, #20
   23a3a:	f016 f94b 	bl	39cd4 <malloc>
   23a3e:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   23a40:	b950      	cbnz	r0, 23a58 <__retarget_lock_init_recursive+0x3c>
   23a42:	4908      	ldr	r1, [pc, #32]	; (23a64 <__retarget_lock_init_recursive+0x48>)
   23a44:	4808      	ldr	r0, [pc, #32]	; (23a68 <__retarget_lock_init_recursive+0x4c>)
   23a46:	f240 127f 	movw	r2, #383	; 0x17f
   23a4a:	f019 f906 	bl	3cc5a <assert_print>
   23a4e:	f240 117f 	movw	r1, #383	; 0x17f
   23a52:	4804      	ldr	r0, [pc, #16]	; (23a64 <__retarget_lock_init_recursive+0x48>)
   23a54:	f019 f8fa 	bl	3cc4c <assert_post_action>

	k_mutex_init((struct k_mutex *)*lock);
   23a58:	6820      	ldr	r0, [r4, #0]
}
   23a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   23a5e:	f01d bb86 	b.w	4116e <z_impl_k_mutex_init>
   23a62:	bf00      	nop
   23a64:	00044cb7 	.word	0x00044cb7
   23a68:	00044263 	.word	0x00044263

00023a6c <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   23a6c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   23a6e:	4604      	mov	r4, r0
   23a70:	b950      	cbnz	r0, 23a88 <__retarget_lock_acquire_recursive+0x1c>
   23a72:	490a      	ldr	r1, [pc, #40]	; (23a9c <__retarget_lock_acquire_recursive+0x30>)
   23a74:	480a      	ldr	r0, [pc, #40]	; (23aa0 <__retarget_lock_acquire_recursive+0x34>)
   23a76:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   23a7a:	f019 f8ee 	bl	3cc5a <assert_print>
   23a7e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   23a82:	4806      	ldr	r0, [pc, #24]	; (23a9c <__retarget_lock_acquire_recursive+0x30>)
   23a84:	f019 f8e2 	bl	3cc4c <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   23a88:	f04f 32ff 	mov.w	r2, #4294967295
   23a8c:	4620      	mov	r0, r4
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   23a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23a92:	f04f 33ff 	mov.w	r3, #4294967295
   23a96:	f012 bfa9 	b.w	369ec <z_impl_k_mutex_lock>
   23a9a:	bf00      	nop
   23a9c:	00044cb7 	.word	0x00044cb7
   23aa0:	00044263 	.word	0x00044263

00023aa4 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   23aa4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   23aa6:	4604      	mov	r4, r0
   23aa8:	b950      	cbnz	r0, 23ac0 <__retarget_lock_release_recursive+0x1c>
   23aaa:	4908      	ldr	r1, [pc, #32]	; (23acc <__retarget_lock_release_recursive+0x28>)
   23aac:	4808      	ldr	r0, [pc, #32]	; (23ad0 <__retarget_lock_release_recursive+0x2c>)
   23aae:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   23ab2:	f019 f8d2 	bl	3cc5a <assert_print>
   23ab6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   23aba:	4804      	ldr	r0, [pc, #16]	; (23acc <__retarget_lock_release_recursive+0x28>)
   23abc:	f019 f8c6 	bl	3cc4c <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
   23ac0:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
   23ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23ac6:	f013 b863 	b.w	36b90 <z_impl_k_mutex_unlock>
   23aca:	bf00      	nop
   23acc:	00044cb7 	.word	0x00044cb7
   23ad0:	00044263 	.word	0x00044263

00023ad4 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   23ad4:	b508      	push	{r3, lr}
   23ad6:	211d      	movs	r1, #29
   23ad8:	4804      	ldr	r0, [pc, #16]	; (23aec <__chk_fail+0x18>)
   23ada:	f7ff ff6b 	bl	239b4 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   23ade:	4040      	eors	r0, r0
   23ae0:	f380 8811 	msr	BASEPRI, r0
   23ae4:	f04f 0003 	mov.w	r0, #3
   23ae8:	df02      	svc	2
	CODE_UNREACHABLE;
   23aea:	bf00      	nop
   23aec:	00044ced 	.word	0x00044ced

00023af0 <z_impl_clock_gettime>:
	switch (clock_id) {
   23af0:	2801      	cmp	r0, #1
{
   23af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23af6:	460f      	mov	r7, r1
	switch (clock_id) {
   23af8:	d009      	beq.n	23b0e <z_impl_clock_gettime+0x1e>
   23afa:	2804      	cmp	r0, #4
   23afc:	d06b      	beq.n	23bd6 <z_impl_clock_gettime+0xe6>
		errno = EINVAL;
   23afe:	f019 ff25 	bl	3d94c <__errno>
   23b02:	2316      	movs	r3, #22
   23b04:	6003      	str	r3, [r0, #0]
		return -1;
   23b06:	f04f 30ff 	mov.w	r0, #4294967295
}
   23b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   23b0e:	f04f 0320 	mov.w	r3, #32
   23b12:	f3ef 8411 	mrs	r4, BASEPRI
   23b16:	f383 8812 	msr	BASEPRI_MAX, r3
   23b1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b1e:	4830      	ldr	r0, [pc, #192]	; (23be0 <z_impl_clock_gettime+0xf0>)
   23b20:	f012 fdea 	bl	366f8 <z_spin_lock_valid>
   23b24:	b940      	cbnz	r0, 23b38 <z_impl_clock_gettime+0x48>
   23b26:	492f      	ldr	r1, [pc, #188]	; (23be4 <z_impl_clock_gettime+0xf4>)
   23b28:	482f      	ldr	r0, [pc, #188]	; (23be8 <z_impl_clock_gettime+0xf8>)
   23b2a:	228e      	movs	r2, #142	; 0x8e
   23b2c:	f019 f895 	bl	3cc5a <assert_print>
   23b30:	218e      	movs	r1, #142	; 0x8e
   23b32:	482c      	ldr	r0, [pc, #176]	; (23be4 <z_impl_clock_gettime+0xf4>)
   23b34:	f019 f88a 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   23b38:	4829      	ldr	r0, [pc, #164]	; (23be0 <z_impl_clock_gettime+0xf0>)
   23b3a:	f012 fdfb 	bl	36734 <z_spin_lock_set_owner>
		base = rt_clock_base;
   23b3e:	4b2b      	ldr	r3, [pc, #172]	; (23bec <z_impl_clock_gettime+0xfc>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b40:	4827      	ldr	r0, [pc, #156]	; (23be0 <z_impl_clock_gettime+0xf0>)
   23b42:	689d      	ldr	r5, [r3, #8]
   23b44:	e9d3 6800 	ldrd	r6, r8, [r3]
   23b48:	f012 fde4 	bl	36714 <z_spin_unlock_valid>
   23b4c:	b940      	cbnz	r0, 23b60 <z_impl_clock_gettime+0x70>
   23b4e:	4925      	ldr	r1, [pc, #148]	; (23be4 <z_impl_clock_gettime+0xf4>)
   23b50:	4825      	ldr	r0, [pc, #148]	; (23be8 <z_impl_clock_gettime+0xf8>)
   23b52:	22b9      	movs	r2, #185	; 0xb9
   23b54:	f019 f881 	bl	3cc5a <assert_print>
   23b58:	21b9      	movs	r1, #185	; 0xb9
   23b5a:	4822      	ldr	r0, [pc, #136]	; (23be4 <z_impl_clock_gettime+0xf4>)
   23b5c:	f019 f876 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   23b60:	f384 8811 	msr	BASEPRI, r4
   23b64:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
   23b68:	f01d fbbb 	bl	412e2 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   23b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	uint64_t ticks = k_uptime_ticks();
   23b70:	4604      	mov	r4, r0
   23b72:	fba0 0302 	umull	r0, r3, r0, r2
   23b76:	fb02 3101 	mla	r1, r2, r1, r3
   23b7a:	0bc0      	lsrs	r0, r0, #15
	uint64_t elapsed_secs = k_ticks_to_ms_floor64(ticks) / MSEC_PER_SEC;
   23b7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23b80:	2300      	movs	r3, #0
   23b82:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   23b86:	0bc9      	lsrs	r1, r1, #15
   23b88:	f7f9 f9ae 	bl	1cee8 <__aeabi_uldivmod>
   23b8c:	f04f 7cfa 	mov.w	ip, #32768000	; 0x1f40000
	ts->tv_sec += base.tv_sec;
   23b90:	1986      	adds	r6, r0, r6
   23b92:	fba0 0e0c 	umull	r0, lr, r0, ip
   23b96:	eb48 0801 	adc.w	r8, r8, r1
   23b9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23b9e:	2300      	movs	r3, #0
   23ba0:	fb0c e101 	mla	r1, ip, r1, lr
   23ba4:	e9c7 6800 	strd	r6, r8, [r7]
   23ba8:	f7f9 f99e 	bl	1cee8 <__aeabi_uldivmod>
			return (uint32_t)((t * to_hz + off) / from_hz);
   23bac:	4910      	ldr	r1, [pc, #64]	; (23bf0 <z_impl_clock_gettime+0x100>)
	uint64_t nremainder = ticks - k_ms_to_ticks_floor64(MSEC_PER_SEC * elapsed_secs);
   23bae:	1a20      	subs	r0, r4, r0
   23bb0:	fba0 3001 	umull	r3, r0, r0, r1
   23bb4:	0bdb      	lsrs	r3, r3, #15
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   23bb6:	4a0f      	ldr	r2, [pc, #60]	; (23bf4 <z_impl_clock_gettime+0x104>)
   23bb8:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	ts->tv_nsec += base.tv_nsec;
   23bbc:	442b      	add	r3, r5
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   23bbe:	4293      	cmp	r3, r2
	ts->tv_nsec += base.tv_nsec;
   23bc0:	60bb      	str	r3, [r7, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   23bc2:	d906      	bls.n	23bd2 <z_impl_clock_gettime+0xe2>
		ts->tv_sec++;
   23bc4:	3601      	adds	r6, #1
   23bc6:	f148 0200 	adc.w	r2, r8, #0
   23bca:	e9c7 6200 	strd	r6, r2, [r7]
		ts->tv_nsec -= NSEC_PER_SEC;
   23bce:	1a5b      	subs	r3, r3, r1
   23bd0:	60bb      	str	r3, [r7, #8]
	return 0;
   23bd2:	2000      	movs	r0, #0
   23bd4:	e799      	b.n	23b0a <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
   23bd6:	2500      	movs	r5, #0
   23bd8:	462e      	mov	r6, r5
   23bda:	46a8      	mov	r8, r5
   23bdc:	e7c4      	b.n	23b68 <z_impl_clock_gettime+0x78>
   23bde:	bf00      	nop
   23be0:	200191e4 	.word	0x200191e4
   23be4:	0004429d 	.word	0x0004429d
   23be8:	00044263 	.word	0x00044263
   23bec:	200153c0 	.word	0x200153c0
   23bf0:	3b9aca00 	.word	0x3b9aca00
   23bf4:	3b9ac9ff 	.word	0x3b9ac9ff

00023bf8 <net_if_flag_set.constprop.0>:
 * @brief Set a value in network interface flags
 *
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
   23bf8:	b510      	push	{r4, lr}
				   enum net_if_flag value)
{
	NET_ASSERT(iface);
   23bfa:	4604      	mov	r4, r0
   23bfc:	b950      	cbnz	r0, 23c14 <net_if_flag_set.constprop.0+0x1c>
   23bfe:	490b      	ldr	r1, [pc, #44]	; (23c2c <net_if_flag_set.constprop.0+0x34>)
   23c00:	480b      	ldr	r0, [pc, #44]	; (23c30 <net_if_flag_set.constprop.0+0x38>)
   23c02:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   23c06:	f019 f828 	bl	3cc5a <assert_print>
   23c0a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   23c0e:	4807      	ldr	r0, [pc, #28]	; (23c2c <net_if_flag_set.constprop.0+0x34>)
   23c10:	f019 f81c 	bl	3cc4c <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23c14:	6823      	ldr	r3, [r4, #0]
   23c16:	330c      	adds	r3, #12
   23c18:	e8d3 2fef 	ldaex	r2, [r3]
   23c1c:	f042 0201 	orr.w	r2, r2, #1
   23c20:	e8c3 2fe1 	stlex	r1, r2, [r3]
   23c24:	2900      	cmp	r1, #0
   23c26:	d1f7      	bne.n	23c18 <net_if_flag_set.constprop.0+0x20>

	atomic_set_bit(iface->if_dev->flags, value);
}
   23c28:	bd10      	pop	{r4, pc}
   23c2a:	bf00      	nop
   23c2c:	00044d22 	.word	0x00044d22
   23c30:	00044263 	.word	0x00044263

00023c34 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   23c34:	4602      	mov	r2, r0
   23c36:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   23c38:	4801      	ldr	r0, [pc, #4]	; (23c40 <k_mutex_lock.constprop.0.isra.0+0xc>)
   23c3a:	f012 bed7 	b.w	369ec <z_impl_k_mutex_lock>
   23c3e:	bf00      	nop
   23c40:	20014f54 	.word	0x20014f54

00023c44 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   23c44:	4801      	ldr	r0, [pc, #4]	; (23c4c <k_mutex_unlock.constprop.0.isra.0+0x8>)
   23c46:	f012 bfa3 	b.w	36b90 <z_impl_k_mutex_unlock>
   23c4a:	bf00      	nop
   23c4c:	20014f54 	.word	0x20014f54

00023c50 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   23c50:	b538      	push	{r3, r4, r5, lr}
   23c52:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);
   23c54:	f04f 31ff 	mov.w	r1, #4294967295
   23c58:	f04f 30ff 	mov.w	r0, #4294967295
   23c5c:	f7ff ffea 	bl	23c34 <k_mutex_lock.constprop.0.isra.0>

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   23c60:	2100      	movs	r1, #0
   23c62:	4628      	mov	r0, r5
   23c64:	f019 fea7 	bl	3d9b6 <net_if_flag_is_set>
   23c68:	4604      	mov	r4, r0
   23c6a:	bb48      	cbnz	r0, 23cc0 <net_if_up+0x70>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   23c6c:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   23c6e:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   23c70:	7e9b      	ldrb	r3, [r3, #26]
   23c72:	b12b      	cbz	r3, 23c80 <net_if_up+0x30>
		net_if_flag_set(iface, NET_IF_UP);
   23c74:	f7ff ffc0 	bl	23bf8 <net_if_flag_set.constprop.0>

notify:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

out:
	k_mutex_unlock(&lock);
   23c78:	f7ff ffe4 	bl	23c44 <k_mutex_unlock.constprop.0.isra.0>

	return status;
}
   23c7c:	4620      	mov	r0, r4
   23c7e:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   23c80:	f019 fe94 	bl	3d9ac <net_if_l2>
   23c84:	4604      	mov	r4, r0
   23c86:	b130      	cbz	r0, 23c96 <net_if_up+0x46>
   23c88:	6884      	ldr	r4, [r0, #8]
   23c8a:	b124      	cbz	r4, 23c96 <net_if_up+0x46>
	status = net_if_l2(iface)->enable(iface, true);
   23c8c:	2101      	movs	r1, #1
   23c8e:	4628      	mov	r0, r5
   23c90:	47a0      	blx	r4
	if (status < 0) {
   23c92:	1e04      	subs	r4, r0, #0
   23c94:	dbf0      	blt.n	23c78 <net_if_up+0x28>
		NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   23c96:	682b      	ldr	r3, [r5, #0]
   23c98:	691b      	ldr	r3, [r3, #16]
   23c9a:	b953      	cbnz	r3, 23cb2 <net_if_up+0x62>
   23c9c:	490a      	ldr	r1, [pc, #40]	; (23cc8 <net_if_up+0x78>)
   23c9e:	480b      	ldr	r0, [pc, #44]	; (23ccc <net_if_up+0x7c>)
   23ca0:	f640 72d5 	movw	r2, #4053	; 0xfd5
   23ca4:	f018 ffd9 	bl	3cc5a <assert_print>
   23ca8:	f640 71d5 	movw	r1, #4053	; 0xfd5
   23cac:	4806      	ldr	r0, [pc, #24]	; (23cc8 <net_if_up+0x78>)
   23cae:	f018 ffcd 	bl	3cc4c <assert_post_action>
	net_if_flag_set(iface, NET_IF_UP);
   23cb2:	4628      	mov	r0, r5
   23cb4:	f7ff ffa0 	bl	23bf8 <net_if_flag_set.constprop.0>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   23cb8:	4628      	mov	r0, r5
   23cba:	f019 fe86 	bl	3d9ca <l2_flags_get.isra.0>
notify:
   23cbe:	e7db      	b.n	23c78 <net_if_up+0x28>
		status = -EALREADY;
   23cc0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   23cc4:	e7d8      	b.n	23c78 <net_if_up+0x28>
   23cc6:	bf00      	nop
   23cc8:	00044d51 	.word	0x00044d51
   23ccc:	00044263 	.word	0x00044263

00023cd0 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   23cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   23cd2:	f04f 30ff 	mov.w	r0, #4294967295
   23cd6:	f04f 31ff 	mov.w	r1, #4294967295
   23cda:	f7ff ffab 	bl	23c34 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   23cde:	4c11      	ldr	r4, [pc, #68]	; (23d24 <net_if_init+0x54>)
   23ce0:	4d11      	ldr	r5, [pc, #68]	; (23d28 <net_if_init+0x58>)
   23ce2:	4f12      	ldr	r7, [pc, #72]	; (23d2c <net_if_init+0x5c>)
   23ce4:	42ac      	cmp	r4, r5
   23ce6:	4626      	mov	r6, r4
   23ce8:	d90a      	bls.n	23d00 <net_if_init+0x30>
   23cea:	4639      	mov	r1, r7
   23cec:	4810      	ldr	r0, [pc, #64]	; (23d30 <net_if_init+0x60>)
   23cee:	f241 02f0 	movw	r2, #4336	; 0x10f0
   23cf2:	f018 ffb2 	bl	3cc5a <assert_print>
   23cf6:	f241 01f0 	movw	r1, #4336	; 0x10f0
   23cfa:	4638      	mov	r0, r7
   23cfc:	f018 ffa6 	bl	3cc4c <assert_post_action>
   23d00:	42ac      	cmp	r4, r5
   23d02:	d303      	bcc.n	23d0c <net_if_init+0x3c>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   23d04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   23d08:	f7ff bf9c 	b.w	23c44 <k_mutex_unlock.constprop.0.isra.0>
	return iface->if_dev->dev;
   23d0c:	6833      	ldr	r3, [r6, #0]
   23d0e:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   23d10:	681b      	ldr	r3, [r3, #0]
   23d12:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   23d14:	2b00      	cmp	r3, #0
   23d16:	d0e5      	beq.n	23ce4 <net_if_init+0x14>
   23d18:	681b      	ldr	r3, [r3, #0]
   23d1a:	2b00      	cmp	r3, #0
   23d1c:	d0e2      	beq.n	23ce4 <net_if_init+0x14>
	api->init(iface);
   23d1e:	4630      	mov	r0, r6
   23d20:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   23d22:	e7df      	b.n	23ce4 <net_if_init+0x14>
   23d24:	2001512c 	.word	0x2001512c
   23d28:	20015130 	.word	0x20015130
   23d2c:	00044d51 	.word	0x00044d51
   23d30:	00044263 	.word	0x00044263

00023d34 <net_if_post_init>:

void net_if_post_init(void)
{
   23d34:	b570      	push	{r4, r5, r6, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   23d36:	4c0e      	ldr	r4, [pc, #56]	; (23d70 <net_if_post_init+0x3c>)
   23d38:	4d0e      	ldr	r5, [pc, #56]	; (23d74 <net_if_post_init+0x40>)
   23d3a:	4e0f      	ldr	r6, [pc, #60]	; (23d78 <net_if_post_init+0x44>)
   23d3c:	42ac      	cmp	r4, r5
   23d3e:	d90a      	bls.n	23d56 <net_if_post_init+0x22>
   23d40:	4631      	mov	r1, r6
   23d42:	480e      	ldr	r0, [pc, #56]	; (23d7c <net_if_post_init+0x48>)
   23d44:	f241 1222 	movw	r2, #4386	; 0x1122
   23d48:	f018 ff87 	bl	3cc5a <assert_print>
   23d4c:	f241 1122 	movw	r1, #4386	; 0x1122
   23d50:	4630      	mov	r0, r6
   23d52:	f018 ff7b 	bl	3cc4c <assert_post_action>
   23d56:	42ac      	cmp	r4, r5
   23d58:	d300      	bcc.n	23d5c <net_if_post_init+0x28>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   23d5a:	bd70      	pop	{r4, r5, r6, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   23d5c:	2103      	movs	r1, #3
   23d5e:	4620      	mov	r0, r4
   23d60:	f019 fe29 	bl	3d9b6 <net_if_flag_is_set>
   23d64:	b910      	cbnz	r0, 23d6c <net_if_post_init+0x38>
			net_if_up(iface);
   23d66:	4620      	mov	r0, r4
   23d68:	f7ff ff72 	bl	23c50 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   23d6c:	3404      	adds	r4, #4
   23d6e:	e7e5      	b.n	23d3c <net_if_post_init+0x8>
   23d70:	2001512c 	.word	0x2001512c
   23d74:	20015130 	.word	0x20015130
   23d78:	00044d51 	.word	0x00044d51
   23d7c:	00044263 	.word	0x00044263

00023d80 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   23d80:	2300      	movs	r3, #0
{
   23d82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   23d86:	2802      	cmp	r0, #2
{
   23d88:	b089      	sub	sp, #36	; 0x24
   23d8a:	4607      	mov	r7, r0
   23d8c:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   23d8e:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   23d92:	9103      	str	r1, [sp, #12]
	if (family == AF_INET6) {
   23d94:	d13e      	bne.n	23e14 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   23d96:	a806      	add	r0, sp, #24
   23d98:	9105      	str	r1, [sp, #20]
   23d9a:	4601      	mov	r1, r0
{
   23d9c:	461a      	mov	r2, r3
   23d9e:	e006      	b.n	23dae <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   23da0:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   23da2:	3201      	adds	r2, #1
				zeros[i]++;
   23da4:	3401      	adds	r4, #1
   23da6:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   23da8:	b2d4      	uxtb	r4, r2
   23daa:	2c07      	cmp	r4, #7
   23dac:	d804      	bhi.n	23db8 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   23dae:	9c03      	ldr	r4, [sp, #12]
   23db0:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   23db4:	2c00      	cmp	r4, #0
   23db6:	d0f3      	beq.n	23da0 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   23db8:	3301      	adds	r3, #1
   23dba:	2b08      	cmp	r3, #8
   23dbc:	f101 0101 	add.w	r1, r1, #1
   23dc0:	d1ec      	bne.n	23d9c <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   23dc2:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   23dc6:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   23dca:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   23dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
   23dd0:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   23dd2:	bf88      	it	hi
   23dd4:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   23dd8:	f103 0301 	add.w	r3, r3, #1
   23ddc:	b2db      	uxtb	r3, r3
				pos = i;
   23dde:	bf88      	it	hi
   23de0:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   23de2:	2b08      	cmp	r3, #8
   23de4:	d1f2      	bne.n	23dcc <z_impl_net_addr_ntop+0x4c>
		len = 8;
   23de6:	469b      	mov	fp, r3
   23de8:	f1b9 0f01 	cmp.w	r9, #1
   23dec:	f04f 033a 	mov.w	r3, #58	; 0x3a
   23df0:	bf08      	it	eq
   23df2:	f04f 38ff 	moveq.w	r8, #4294967295
   23df6:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   23df8:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   23dfa:	4634      	mov	r4, r6
   23dfc:	460d      	mov	r5, r1
   23dfe:	455d      	cmp	r5, fp
   23e00:	db17      	blt.n	23e32 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   23e02:	42b4      	cmp	r4, r6
   23e04:	d008      	beq.n	23e18 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   23e06:	2300      	movs	r3, #0
   23e08:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   23e0a:	bf0c      	ite	eq
   23e0c:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   23e10:	7023      	strbne	r3, [r4, #0]
   23e12:	e002      	b.n	23e1a <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   23e14:	2801      	cmp	r0, #1
   23e16:	d004      	beq.n	23e22 <z_impl_net_addr_ntop+0xa2>
		return NULL;
   23e18:	2600      	movs	r6, #0
	}

	return dst;
}
   23e1a:	4630      	mov	r0, r6
   23e1c:	b009      	add	sp, #36	; 0x24
   23e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   23e22:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   23e24:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   23e28:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   23e2c:	4681      	mov	r9, r0
		delim = '.';
   23e2e:	9302      	str	r3, [sp, #8]
   23e30:	e7e2      	b.n	23df8 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   23e32:	f1bb 0f04 	cmp.w	fp, #4
   23e36:	d135      	bne.n	23ea4 <z_impl_net_addr_ntop+0x124>
			value = (uint32_t)addr->s4_addr[i];
   23e38:	9b03      	ldr	r3, [sp, #12]
   23e3a:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   23e3c:	b94a      	cbnz	r2, 23e52 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   23e3e:	2330      	movs	r3, #48	; 0x30
   23e40:	4620      	mov	r0, r4
   23e42:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   23e46:	9b02      	ldr	r3, [sp, #8]
   23e48:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   23e4a:	3501      	adds	r5, #1
   23e4c:	4604      	mov	r4, r0
   23e4e:	b2ed      	uxtb	r5, r5
   23e50:	e7d5      	b.n	23dfe <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   23e52:	4623      	mov	r3, r4
   23e54:	2009      	movs	r0, #9
   23e56:	f04f 0a00 	mov.w	sl, #0
   23e5a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 23f38 <z_impl_net_addr_ntop+0x1b8>
   23e5e:	9201      	str	r2, [sp, #4]
		temp = value / divisor;
   23e60:	9a01      	ldr	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   23e62:	4582      	cmp	sl, r0
		temp = value / divisor;
   23e64:	fbb2 fefc 	udiv	lr, r2, ip
		value = value % divisor;
   23e68:	9204      	str	r2, [sp, #16]
   23e6a:	fb0c 221e 	mls	r2, ip, lr, r2
   23e6e:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   23e70:	dc02      	bgt.n	23e78 <z_impl_net_addr_ntop+0xf8>
   23e72:	9a04      	ldr	r2, [sp, #16]
   23e74:	4562      	cmp	r2, ip
   23e76:	d304      	bcc.n	23e82 <z_impl_net_addr_ntop+0x102>
			*buf++ = (char) (temp + '0');
   23e78:	4682      	mov	sl, r0
   23e7a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   23e7e:	f803 eb01 	strb.w	lr, [r3], #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   23e82:	220a      	movs	r2, #10
   23e84:	3801      	subs	r0, #1
   23e86:	fbbc fcf2 	udiv	ip, ip, r2
   23e8a:	1c42      	adds	r2, r0, #1
   23e8c:	d1e8      	bne.n	23e60 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   23e8e:	f04f 0200 	mov.w	r2, #0
   23e92:	701a      	strb	r2, [r3, #0]
	return buf - start;
   23e94:	1b1b      	subs	r3, r3, r4
			ptr += l;
   23e96:	b2da      	uxtb	r2, r3
   23e98:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   23e9c:	1c58      	adds	r0, r3, #1
   23e9e:	9b02      	ldr	r3, [sp, #8]
   23ea0:	54a3      	strb	r3, [r4, r2]
			continue;
   23ea2:	e7d2      	b.n	23e4a <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   23ea4:	45a8      	cmp	r8, r5
   23ea6:	d110      	bne.n	23eca <z_impl_net_addr_ntop+0x14a>
			if (needcolon || i == 0U) {
   23ea8:	b911      	cbnz	r1, 23eb0 <z_impl_net_addr_ntop+0x130>
   23eaa:	f1b8 0f00 	cmp.w	r8, #0
   23eae:	d102      	bne.n	23eb6 <z_impl_net_addr_ntop+0x136>
				*ptr++ = ':';
   23eb0:	233a      	movs	r3, #58	; 0x3a
   23eb2:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   23eb6:	233a      	movs	r3, #58	; 0x3a
   23eb8:	4620      	mov	r0, r4
   23eba:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   23ebe:	f109 33ff 	add.w	r3, r9, #4294967295
   23ec2:	441d      	add	r5, r3
			needcolon = false;
   23ec4:	2100      	movs	r1, #0
			i += longest - 1U;
   23ec6:	b2ed      	uxtb	r5, r5
			continue;
   23ec8:	e7bf      	b.n	23e4a <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   23eca:	b111      	cbz	r1, 23ed2 <z_impl_net_addr_ntop+0x152>
			*ptr++ = ':';
   23ecc:	233a      	movs	r3, #58	; 0x3a
   23ece:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   23ed2:	9b05      	ldr	r3, [sp, #20]
   23ed4:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
   23ed8:	ba52      	rev16	r2, r2
		if (bh) {
   23eda:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
		bh = value >> 8;
   23ede:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   23ee2:	fa5f fa82 	uxtb.w	sl, r2
		if (bh) {
   23ee6:	d015      	beq.n	23f14 <z_impl_net_addr_ntop+0x194>
			if (bh > 0x0f) {
   23ee8:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   23eea:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   23eec:	d90b      	bls.n	23f06 <z_impl_net_addr_ntop+0x186>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   23eee:	2300      	movs	r3, #0
   23ef0:	2261      	movs	r2, #97	; 0x61
   23ef2:	4620      	mov	r0, r4
   23ef4:	f019 fd75 	bl	3d9e2 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   23ef8:	2301      	movs	r3, #1
   23efa:	2261      	movs	r2, #97	; 0x61
   23efc:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   23efe:	f019 fd70 	bl	3d9e2 <net_byte_to_hex>
		needcolon = true;
   23f02:	2101      	movs	r1, #1
   23f04:	e7a1      	b.n	23e4a <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   23f06:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   23f08:	bf94      	ite	ls
   23f0a:	3130      	addls	r1, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   23f0c:	3157      	addhi	r1, #87	; 0x57
					*ptr++ = (char)(bh + '0');
   23f0e:	1c60      	adds	r0, r4, #1
					*ptr++ = (char) (bh - 10 + 'a');
   23f10:	7021      	strb	r1, [r4, #0]
   23f12:	e7f1      	b.n	23ef8 <z_impl_net_addr_ntop+0x178>
		} else if (bl > 0x0f) {
   23f14:	f1ba 0f0f 	cmp.w	sl, #15
   23f18:	d903      	bls.n	23f22 <z_impl_net_addr_ntop+0x1a2>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   23f1a:	2261      	movs	r2, #97	; 0x61
   23f1c:	4651      	mov	r1, sl
   23f1e:	4620      	mov	r0, r4
   23f20:	e7ed      	b.n	23efe <z_impl_net_addr_ntop+0x17e>
			if (bl < 10) {
   23f22:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   23f26:	bf94      	ite	ls
   23f28:	f10a 0a30 	addls.w	sl, sl, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   23f2c:	f10a 0a57 	addhi.w	sl, sl, #87	; 0x57
					*ptr++ = (char)(bh + '0');
   23f30:	1c60      	adds	r0, r4, #1
				*ptr++ = (char) (bl - 10 + 'a');
   23f32:	f884 a000 	strb.w	sl, [r4]
   23f36:	e7e4      	b.n	23f02 <z_impl_net_addr_ntop+0x182>
   23f38:	3b9aca00 	.word	0x3b9aca00

00023f3c <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   23f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   23f40:	680f      	ldr	r7, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   23f42:	f890 5084 	ldrb.w	r5, [r0, #132]	; 0x84
	start = buf->cur;

	NET_HEXDUMP_DBG(mqtt_proto_desc->utf8, mqtt_proto_desc->size,
			 "Encoding Protocol Description.");

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   23f46:	4b3b      	ldr	r3, [pc, #236]	; (24034 <connect_request_encode+0xf8>)
   23f48:	4a3b      	ldr	r2, [pc, #236]	; (24038 <connect_request_encode+0xfc>)
{
   23f4a:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   23f4c:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   23f50:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   23f52:	2804      	cmp	r0, #4
   23f54:	bf0c      	ite	eq
   23f56:	4610      	moveq	r0, r2
   23f58:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   23f5a:	600f      	str	r7, [r1, #0]
{
   23f5c:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   23f5e:	f019 fee3 	bl	3dd28 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   23f62:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   23f66:	4603      	mov	r3, r0
   23f68:	b938      	cbnz	r0, 23f7a <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   23f6a:	e9d4 2000 	ldrd	r2, r0, [r4]
   23f6e:	4290      	cmp	r0, r2
		return err_code;
	}

	NET_DBG("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   23f70:	f896 1082 	ldrb.w	r1, [r6, #130]	; 0x82
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   23f74:	d104      	bne.n	23f80 <connect_request_encode+0x44>
		return -ENOMEM;
   23f76:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   23f7a:	4618      	mov	r0, r3
   23f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   23f80:	1c50      	adds	r0, r2, #1
   23f82:	6020      	str	r0, [r4, #0]
   23f84:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   23f86:	e9d4 8200 	ldrd	r8, r2, [r4]
   23f8a:	4590      	cmp	r8, r2
   23f8c:	d0f3      	beq.n	23f76 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   23f8e:	f108 0201 	add.w	r2, r8, #1
   23f92:	6022      	str	r2, [r4, #0]
   23f94:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   23f98:	4621      	mov	r1, r4
   23f9a:	f8b6 0080 	ldrh.w	r0, [r6, #128]	; 0x80
   23f9e:	f019 feb1 	bl	3dd04 <pack_uint16>
	if (err_code != 0) {
   23fa2:	4603      	mov	r3, r0
   23fa4:	2800      	cmp	r0, #0
   23fa6:	d1e8      	bne.n	23f7a <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   23fa8:	f106 0050 	add.w	r0, r6, #80	; 0x50
   23fac:	f019 febc 	bl	3dd28 <pack_utf8_str>
	if (err_code != 0) {
   23fb0:	4603      	mov	r3, r0
   23fb2:	2800      	cmp	r0, #0
   23fb4:	d1e1      	bne.n	23f7a <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   23fb6:	6e70      	ldr	r0, [r6, #100]	; 0x64
	uint8_t connect_flags = client->clean_session << 1;
   23fb8:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   23fba:	b1d8      	cbz	r0, 23ff4 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   23fbc:	f896 3084 	ldrb.w	r3, [r6, #132]	; 0x84
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   23fc0:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   23fc4:	f003 0301 	and.w	r3, r3, #1
   23fc8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   23fcc:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   23fce:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   23fd0:	00db      	lsls	r3, r3, #3
   23fd2:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   23fd6:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   23fd8:	f019 fea6 	bl	3dd28 <pack_utf8_str>
		if (err_code != 0) {
   23fdc:	4603      	mov	r3, r0
   23fde:	2800      	cmp	r0, #0
   23fe0:	d1cb      	bne.n	23f7a <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   23fe2:	6eb3      	ldr	r3, [r6, #104]	; 0x68
			err_code = pack_utf8_str(client->will_message, buf);
   23fe4:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   23fe6:	b313      	cbz	r3, 2402e <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   23fe8:	4618      	mov	r0, r3
   23fea:	f019 fe9d 	bl	3dd28 <pack_utf8_str>
			if (err_code != 0) {
   23fee:	4603      	mov	r3, r0
   23ff0:	2800      	cmp	r0, #0
   23ff2:	d1c2      	bne.n	23f7a <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   23ff4:	6df0      	ldr	r0, [r6, #92]	; 0x5c
   23ff6:	b138      	cbz	r0, 24008 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   23ff8:	4621      	mov	r1, r4
   23ffa:	f019 fe95 	bl	3dd28 <pack_utf8_str>
		if (err_code != 0) {
   23ffe:	4603      	mov	r3, r0
   24000:	2800      	cmp	r0, #0
   24002:	d1ba      	bne.n	23f7a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   24004:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   24008:	6e30      	ldr	r0, [r6, #96]	; 0x60
   2400a:	b138      	cbz	r0, 2401c <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   2400c:	4621      	mov	r1, r4
   2400e:	f019 fe8b 	bl	3dd28 <pack_utf8_str>
		if (err_code != 0) {
   24012:	4603      	mov	r3, r0
   24014:	2800      	cmp	r0, #0
   24016:	d1b0      	bne.n	23f7a <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   24018:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   2401c:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   24020:	4622      	mov	r2, r4
   24022:	4639      	mov	r1, r7
}
   24024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   24028:	2010      	movs	r0, #16
   2402a:	f019 be98 	b.w	3dd5e <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   2402e:	f019 fe69 	bl	3dd04 <pack_uint16>
   24032:	e7dc      	b.n	23fee <connect_request_encode+0xb2>
   24034:	00042c98 	.word	0x00042c98
   24038:	00042ca0 	.word	0x00042ca0

0002403c <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   2403c:	e9d0 2300 	ldrd	r2, r3, [r0]
   24040:	1a9b      	subs	r3, r3, r2
   24042:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24044:	bf81      	itttt	hi
   24046:	4b05      	ldrhi	r3, [pc, #20]	; (2405c <disconnect_encode+0x20>)
   24048:	881b      	ldrhhi	r3, [r3, #0]
   2404a:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   2404c:	6803      	ldrhi	r3, [r0, #0]
   2404e:	bf83      	ittte	hi
   24050:	3302      	addhi	r3, #2
   24052:	6043      	strhi	r3, [r0, #4]

	return 0;
   24054:	2000      	movhi	r0, #0
		return -ENOMEM;
   24056:	f06f 000b 	mvnls.w	r0, #11
}
   2405a:	4770      	bx	lr
   2405c:	00044d7b 	.word	0x00044d7b

00024060 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   24060:	e9d0 2300 	ldrd	r2, r3, [r0]
   24064:	1a9b      	subs	r3, r3, r2
   24066:	2b01      	cmp	r3, #1
   24068:	bf81      	itttt	hi
   2406a:	4b05      	ldrhi	r3, [pc, #20]	; (24080 <ping_request_encode+0x20>)
   2406c:	881b      	ldrhhi	r3, [r3, #0]
   2406e:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   24070:	6803      	ldrhi	r3, [r0, #0]
   24072:	bf83      	ittte	hi
   24074:	3302      	addhi	r3, #2
   24076:	6043      	strhi	r3, [r0, #4]

	return 0;
   24078:	2000      	movhi	r0, #0
		return -ENOMEM;
   2407a:	f06f 000b 	mvnls.w	r0, #11
}
   2407e:	4770      	bx	lr
   24080:	00044d7d 	.word	0x00044d7d

00024084 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_CUSTOM_TRANSPORT */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   24084:	2214      	movs	r2, #20
   24086:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   2408a:	4353      	muls	r3, r2
   2408c:	4a01      	ldr	r2, [pc, #4]	; (24094 <mqtt_transport_connect+0x10>)
   2408e:	58d3      	ldr	r3, [r2, r3]
   24090:	4718      	bx	r3
   24092:	bf00      	nop
   24094:	00042ca8 	.word	0x00042ca8

00024098 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   24098:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   2409a:	2514      	movs	r5, #20
   2409c:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   240a0:	4b02      	ldr	r3, [pc, #8]	; (240ac <mqtt_transport_write+0x14>)
   240a2:	fb05 3304 	mla	r3, r5, r4, r3
							  datalen);
}
   240a6:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   240a8:	685b      	ldr	r3, [r3, #4]
   240aa:	4718      	bx	r3
   240ac:	00042ca8 	.word	0x00042ca8

000240b0 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   240b0:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   240b2:	2414      	movs	r4, #20
   240b4:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   240b8:	4b03      	ldr	r3, [pc, #12]	; (240c8 <mqtt_transport_write_msg+0x18>)
   240ba:	fb04 3302 	mla	r3, r4, r2, r3
}
   240be:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   240c2:	689b      	ldr	r3, [r3, #8]
   240c4:	4718      	bx	r3
   240c6:	bf00      	nop
   240c8:	00042ca8 	.word	0x00042ca8

000240cc <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   240cc:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   240ce:	2614      	movs	r6, #20
   240d0:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   240d4:	4c03      	ldr	r4, [pc, #12]	; (240e4 <mqtt_transport_read+0x18>)
   240d6:	fb06 4405 	mla	r4, r6, r5, r4
   240da:	68e4      	ldr	r4, [r4, #12]
   240dc:	46a4      	mov	ip, r4
							 shall_block);
}
   240de:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   240e0:	4760      	bx	ip
   240e2:	bf00      	nop
   240e4:	00042ca8 	.word	0x00042ca8

000240e8 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   240e8:	2114      	movs	r1, #20
   240ea:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   240ee:	4b02      	ldr	r3, [pc, #8]	; (240f8 <mqtt_transport_disconnect+0x10>)
   240f0:	fb01 3302 	mla	r3, r1, r2, r3
   240f4:	691b      	ldr	r3, [r3, #16]
   240f6:	4718      	bx	r3
   240f8:	00042ca8 	.word	0x00042ca8

000240fc <mqtt_mutex_unlock>:
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   240fc:	b508      	push	{r3, lr}
   240fe:	f012 fd47 	bl	36b90 <z_impl_k_mutex_unlock>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   24102:	b150      	cbz	r0, 2411a <mqtt_mutex_unlock+0x1e>
   24104:	4905      	ldr	r1, [pc, #20]	; (2411c <mqtt_mutex_unlock+0x20>)
   24106:	4806      	ldr	r0, [pc, #24]	; (24120 <mqtt_mutex_unlock+0x24>)
   24108:	223d      	movs	r2, #61	; 0x3d
   2410a:	f018 fda6 	bl	3cc5a <assert_print>
	(void)ret;
}
   2410e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   24112:	213d      	movs	r1, #61	; 0x3d
   24114:	4801      	ldr	r0, [pc, #4]	; (2411c <mqtt_mutex_unlock+0x20>)
   24116:	f018 bd99 	b.w	3cc4c <assert_post_action>
}
   2411a:	bd08      	pop	{r3, pc}
   2411c:	00044d8b 	.word	0x00044d8b
   24120:	00044263 	.word	0x00044263

00024124 <mqtt_mutex_lock>:
{
   24124:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   24126:	f04f 32ff 	mov.w	r2, #4294967295
   2412a:	f04f 33ff 	mov.w	r3, #4294967295
   2412e:	f012 fc5d 	bl	369ec <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   24132:	b150      	cbz	r0, 2414a <mqtt_mutex_lock+0x26>
   24134:	4905      	ldr	r1, [pc, #20]	; (2414c <mqtt_mutex_lock+0x28>)
   24136:	4806      	ldr	r0, [pc, #24]	; (24150 <mqtt_mutex_lock+0x2c>)
   24138:	2233      	movs	r2, #51	; 0x33
   2413a:	f018 fd8e 	bl	3cc5a <assert_print>
}
   2413e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   24142:	2133      	movs	r1, #51	; 0x33
   24144:	4801      	ldr	r0, [pc, #4]	; (2414c <mqtt_mutex_lock+0x28>)
   24146:	f018 bd81 	b.w	3cc4c <assert_post_action>
}
   2414a:	bd08      	pop	{r3, pc}
   2414c:	00044d8b 	.word	0x00044d8b
   24150:	00044263 	.word	0x00044263

00024154 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   24154:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct sockaddr *broker = client->broker;
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int type = SOCK_STREAM;
	int ret;

	if (tls_config->set_native_tls) {
   24156:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
	const struct sockaddr *broker = client->broker;
   2415a:	6d85      	ldr	r5, [r0, #88]	; 0x58
		type |= SOCK_NATIVE_TLS;
   2415c:	2b00      	cmp	r3, #0
{
   2415e:	4604      	mov	r4, r0
		type |= SOCK_NATIVE_TLS;
   24160:	493f      	ldr	r1, [pc, #252]	; (24260 <mqtt_client_tls_connect+0x10c>)
	}

	client->transport.tls.sock = zsock_socket(broker->sa_family,
   24162:	8828      	ldrh	r0, [r5, #0]
		type |= SOCK_NATIVE_TLS;
   24164:	bf08      	it	eq
   24166:	2101      	moveq	r1, #1
	return z_impl_zsock_socket(family, type, proto);
   24168:	f44f 7281 	mov.w	r2, #258	; 0x102
   2416c:	f7fd fc2c 	bl	219c8 <z_impl_zsock_socket>
						  type, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   24170:	2800      	cmp	r0, #0
	client->transport.tls.sock = zsock_socket(broker->sa_family,
   24172:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   24174:	da05      	bge.n	24182 <mqtt_client_tls_connect+0x2e>
	NET_DBG("Connect completed");
	return 0;

error:
	(void) zsock_close(client->transport.tls.sock);
	return -errno;
   24176:	f019 fbe9 	bl	3d94c <__errno>
   2417a:	6800      	ldr	r0, [r0, #0]
   2417c:	4240      	negs	r0, r0
}
   2417e:	b004      	add	sp, #16
   24180:	bd70      	pop	{r4, r5, r6, pc}
		union { uintptr_t x; socklen_t val; } parm4 = { .val = optlen };
		return (int) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   24182:	2304      	movs	r3, #4
   24184:	2205      	movs	r2, #5
   24186:	9300      	str	r3, [sp, #0]
   24188:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2418c:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   24190:	f019 f9dd 	bl	3d54e <z_impl_zsock_setsockopt>
	if (ret < 0) {
   24194:	2800      	cmp	r0, #0
   24196:	da03      	bge.n	241a0 <mqtt_client_tls_connect+0x4c>
	(void) zsock_close(client->transport.tls.sock);
   24198:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   2419a:	f019 f8e1 	bl	3d360 <z_impl_zsock_close>
   2419e:	e7ea      	b.n	24176 <mqtt_client_tls_connect+0x22>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   241a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   241a2:	2b00      	cmp	r3, #0
   241a4:	d12f      	bne.n	24206 <mqtt_client_tls_connect+0xb2>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   241a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   241a8:	2b00      	cmp	r3, #0
   241aa:	d13a      	bne.n	24222 <mqtt_client_tls_connect+0xce>
	if (tls_config->hostname) {
   241ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
   241ae:	2b00      	cmp	r3, #0
   241b0:	d145      	bne.n	2423e <mqtt_client_tls_connect+0xea>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   241b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   241b4:	2b01      	cmp	r3, #1
   241b6:	d10b      	bne.n	241d0 <mqtt_client_tls_connect+0x7c>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   241b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   241ba:	2304      	movs	r3, #4
   241bc:	220a      	movs	r2, #10
   241be:	9300      	str	r3, [sp, #0]
   241c0:	f44f 718d 	mov.w	r1, #282	; 0x11a
   241c4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   241c8:	f019 f9c1 	bl	3d54e <z_impl_zsock_setsockopt>
		if (ret < 0) {
   241cc:	2800      	cmp	r0, #0
   241ce:	dbe3      	blt.n	24198 <mqtt_client_tls_connect+0x44>
	if (tls_config->cert_nocopy != TLS_CERT_NOCOPY_NONE) {
   241d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   241d2:	b15b      	cbz	r3, 241ec <mqtt_client_tls_connect+0x98>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   241d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   241d6:	2304      	movs	r3, #4
   241d8:	220a      	movs	r2, #10
   241da:	9300      	str	r3, [sp, #0]
   241dc:	f44f 718d 	mov.w	r1, #282	; 0x11a
   241e0:	f104 0348 	add.w	r3, r4, #72	; 0x48
   241e4:	f019 f9b3 	bl	3d54e <z_impl_zsock_setsockopt>
		if (ret < 0) {
   241e8:	2800      	cmp	r0, #0
   241ea:	dbd5      	blt.n	24198 <mqtt_client_tls_connect+0x44>
	if (broker->sa_family == AF_INET) {
   241ec:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   241ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   241f0:	2b01      	cmp	r3, #1
   241f2:	bf0c      	ite	eq
   241f4:	2208      	moveq	r2, #8
   241f6:	2218      	movne	r2, #24
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   241f8:	6da1      	ldr	r1, [r4, #88]	; 0x58
	return z_impl_zsock_connect(sock, addr, addrlen);
   241fa:	f019 f8d5 	bl	3d3a8 <z_impl_zsock_connect>
	if (ret < 0) {
   241fe:	2800      	cmp	r0, #0
   24200:	dbca      	blt.n	24198 <mqtt_client_tls_connect+0x44>
	return 0;
   24202:	2000      	movs	r0, #0
   24204:	e7bb      	b.n	2417e <mqtt_client_tls_connect+0x2a>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   24206:	6b22      	ldr	r2, [r4, #48]	; 0x30
   24208:	2a00      	cmp	r2, #0
   2420a:	d0cc      	beq.n	241a6 <mqtt_client_tls_connect+0x52>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   2420c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2420e:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   24210:	9200      	str	r2, [sp, #0]
   24212:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24216:	2203      	movs	r2, #3
   24218:	f019 f999 	bl	3d54e <z_impl_zsock_setsockopt>
		if (ret < 0) {
   2421c:	2800      	cmp	r0, #0
   2421e:	dac2      	bge.n	241a6 <mqtt_client_tls_connect+0x52>
   24220:	e7ba      	b.n	24198 <mqtt_client_tls_connect+0x44>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   24222:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   24224:	2a00      	cmp	r2, #0
   24226:	d0c1      	beq.n	241ac <mqtt_client_tls_connect+0x58>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   24228:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2422a:	0092      	lsls	r2, r2, #2
   2422c:	9200      	str	r2, [sp, #0]
   2422e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24232:	2201      	movs	r2, #1
   24234:	f019 f98b 	bl	3d54e <z_impl_zsock_setsockopt>
		if (ret < 0) {
   24238:	2800      	cmp	r0, #0
   2423a:	dab7      	bge.n	241ac <mqtt_client_tls_connect+0x58>
   2423c:	e7ac      	b.n	24198 <mqtt_client_tls_connect+0x44>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   2423e:	4618      	mov	r0, r3
   24240:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   24242:	9303      	str	r3, [sp, #12]
   24244:	f7f8 fffd 	bl	1d242 <strlen>
   24248:	2202      	movs	r2, #2
   2424a:	9000      	str	r0, [sp, #0]
   2424c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24250:	4630      	mov	r0, r6
   24252:	9b03      	ldr	r3, [sp, #12]
   24254:	f019 f97b 	bl	3d54e <z_impl_zsock_setsockopt>
		if (ret < 0) {
   24258:	2800      	cmp	r0, #0
   2425a:	daaa      	bge.n	241b2 <mqtt_client_tls_connect+0x5e>
   2425c:	e79c      	b.n	24198 <mqtt_client_tls_connect+0x44>
   2425e:	bf00      	nop
   24260:	40000001 	.word	0x40000001

00024264 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   24264:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   24266:	2340      	movs	r3, #64	; 0x40
{
   24268:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   2426a:	490a      	ldr	r1, [pc, #40]	; (24294 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2426c:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   2426e:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   24270:	1149      	asrs	r1, r1, #5
{
   24272:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   24274:	4623      	mov	r3, r4
   24276:	4a08      	ldr	r2, [pc, #32]	; (24298 <onoff_start+0x34>)
   24278:	4808      	ldr	r0, [pc, #32]	; (2429c <onoff_start+0x38>)
   2427a:	f01a fae4 	bl	3e846 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   2427e:	1e01      	subs	r1, r0, #0
   24280:	da05      	bge.n	2428e <onoff_start+0x2a>
		notify(mgr, err);
   24282:	4628      	mov	r0, r5
   24284:	4623      	mov	r3, r4
	}
}
   24286:	b003      	add	sp, #12
   24288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   2428c:	4718      	bx	r3
}
   2428e:	b003      	add	sp, #12
   24290:	bd30      	pop	{r4, r5, pc}
   24292:	bf00      	nop
   24294:	200191f8 	.word	0x200191f8
   24298:	0003e8b3 	.word	0x0003e8b3
   2429c:	00042514 	.word	0x00042514

000242a0 <get_status>:
{
   242a0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   242a2:	b2cc      	uxtb	r4, r1
   242a4:	2c01      	cmp	r4, #1
{
   242a6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   242a8:	d908      	bls.n	242bc <get_status+0x1c>
   242aa:	4908      	ldr	r1, [pc, #32]	; (242cc <get_status+0x2c>)
   242ac:	4808      	ldr	r0, [pc, #32]	; (242d0 <get_status+0x30>)
   242ae:	2279      	movs	r2, #121	; 0x79
   242b0:	f018 fcd3 	bl	3cc5a <assert_print>
   242b4:	2179      	movs	r1, #121	; 0x79
   242b6:	4805      	ldr	r0, [pc, #20]	; (242cc <get_status+0x2c>)
   242b8:	f018 fcc8 	bl	3cc4c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   242bc:	230c      	movs	r3, #12
   242be:	6929      	ldr	r1, [r5, #16]
   242c0:	fb04 1403 	mla	r4, r4, r3, r1
   242c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   242c6:	f000 0007 	and.w	r0, r0, #7
   242ca:	bd38      	pop	{r3, r4, r5, pc}
   242cc:	00044dbc 	.word	0x00044dbc
   242d0:	00044263 	.word	0x00044263

000242d4 <stop>:
{
   242d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   242d6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   242d8:	2c01      	cmp	r4, #1
{
   242da:	4605      	mov	r5, r0
   242dc:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
   242de:	6906      	ldr	r6, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   242e0:	d90a      	bls.n	242f8 <stop+0x24>
   242e2:	4918      	ldr	r1, [pc, #96]	; (24344 <stop+0x70>)
   242e4:	4818      	ldr	r0, [pc, #96]	; (24348 <stop+0x74>)
   242e6:	f240 124d 	movw	r2, #333	; 0x14d
   242ea:	f018 fcb6 	bl	3cc5a <assert_print>
   242ee:	f240 114d 	movw	r1, #333	; 0x14d
   242f2:	4814      	ldr	r0, [pc, #80]	; (24344 <stop+0x70>)
   242f4:	f018 fcaa 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   242f8:	f04f 0320 	mov.w	r3, #32
   242fc:	f3ef 8111 	mrs	r1, BASEPRI
   24300:	f383 8812 	msr	BASEPRI_MAX, r3
   24304:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   24308:	220c      	movs	r2, #12
   2430a:	fb02 6304 	mla	r3, r2, r4, r6
   2430e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   24310:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   24314:	d001      	beq.n	2431a <stop+0x46>
   24316:	429f      	cmp	r7, r3
   24318:	d111      	bne.n	2433e <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2431a:	2301      	movs	r3, #1
	int err = 0;
   2431c:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2431e:	fb02 6604 	mla	r6, r2, r4, r6
   24322:	64b3      	str	r3, [r6, #72]	; 0x48
	__asm__ volatile(
   24324:	f381 8811 	msr	BASEPRI, r1
   24328:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2432c:	b930      	cbnz	r0, 2433c <stop+0x68>
	get_sub_config(dev, type)->stop();
   2432e:	230c      	movs	r3, #12
   24330:	6869      	ldr	r1, [r5, #4]
   24332:	fb03 1404 	mla	r4, r3, r4, r1
   24336:	6863      	ldr	r3, [r4, #4]
   24338:	4798      	blx	r3
	return 0;
   2433a:	2000      	movs	r0, #0
}
   2433c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   2433e:	f04f 30ff 	mov.w	r0, #4294967295
   24342:	e7ef      	b.n	24324 <stop+0x50>
   24344:	00044dbc 	.word	0x00044dbc
   24348:	00044263 	.word	0x00044263

0002434c <onoff_stop>:
{
   2434c:	b570      	push	{r4, r5, r6, lr}
   2434e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   24350:	4906      	ldr	r1, [pc, #24]	; (2436c <onoff_stop+0x20>)
{
   24352:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   24354:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   24356:	1149      	asrs	r1, r1, #5
   24358:	2240      	movs	r2, #64	; 0x40
   2435a:	4805      	ldr	r0, [pc, #20]	; (24370 <onoff_stop+0x24>)
   2435c:	f7ff ffba 	bl	242d4 <stop>
	notify(mgr, res);
   24360:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   24362:	4601      	mov	r1, r0
	notify(mgr, res);
   24364:	4620      	mov	r0, r4
}
   24366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2436a:	4718      	bx	r3
   2436c:	200191f8 	.word	0x200191f8
   24370:	00042514 	.word	0x00042514

00024374 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   24374:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   24376:	2200      	movs	r2, #0
   24378:	2101      	movs	r1, #1
{
   2437a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2437c:	2005      	movs	r0, #5
   2437e:	f7fe fca7 	bl	22cd0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   24382:	480f      	ldr	r0, [pc, #60]	; (243c0 <clk_init+0x4c>)
   24384:	f00e f822 	bl	323cc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   24388:	4b0e      	ldr	r3, [pc, #56]	; (243c4 <clk_init+0x50>)
   2438a:	4298      	cmp	r0, r3
   2438c:	d115      	bne.n	243ba <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   2438e:	f00e f83f 	bl	32410 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   24392:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   24394:	490c      	ldr	r1, [pc, #48]	; (243c8 <clk_init+0x54>)
   24396:	4630      	mov	r0, r6
   24398:	f018 fad7 	bl	3c94a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   2439c:	2800      	cmp	r0, #0
   2439e:	db0b      	blt.n	243b8 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   243a0:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
   243a2:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   243a4:	4908      	ldr	r1, [pc, #32]	; (243c8 <clk_init+0x54>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   243a6:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
   243a8:	f104 0020 	add.w	r0, r4, #32
   243ac:	f018 facd 	bl	3c94a <onoff_manager_init>
		if (err < 0) {
   243b0:	2800      	cmp	r0, #0
   243b2:	db01      	blt.n	243b8 <clk_init+0x44>
	}

	return 0;
   243b4:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   243b6:	6565      	str	r5, [r4, #84]	; 0x54
}
   243b8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   243ba:	f06f 0004 	mvn.w	r0, #4
   243be:	e7fb      	b.n	243b8 <clk_init+0x44>
   243c0:	00024409 	.word	0x00024409
   243c4:	0bad0000 	.word	0x0bad0000
   243c8:	00042d00 	.word	0x00042d00

000243cc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   243cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   243ce:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   243d0:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   243d2:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   243d4:	434b      	muls	r3, r1
   243d6:	480a      	ldr	r0, [pc, #40]	; (24400 <clkstarted_handle.constprop.0+0x34>)
   243d8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   243da:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   243dc:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   243e0:	4418      	add	r0, r3
	sub_data->cb = NULL;
   243e2:	6426      	str	r6, [r4, #64]	; 0x40
	void *user_data = sub_data->user_data;
   243e4:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   243e6:	f01a fa1b 	bl	3e820 <set_on_state>
	if (callback) {
   243ea:	b135      	cbz	r5, 243fa <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   243ec:	462b      	mov	r3, r5
   243ee:	9a01      	ldr	r2, [sp, #4]
   243f0:	4804      	ldr	r0, [pc, #16]	; (24404 <clkstarted_handle.constprop.0+0x38>)
}
   243f2:	b002      	add	sp, #8
   243f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   243f8:	4718      	bx	r3
}
   243fa:	b002      	add	sp, #8
   243fc:	bd70      	pop	{r4, r5, r6, pc}
   243fe:	bf00      	nop
   24400:	200191f8 	.word	0x200191f8
   24404:	00042514 	.word	0x00042514

00024408 <clock_event_handler>:
	switch (event) {
   24408:	2801      	cmp	r0, #1
{
   2440a:	b508      	push	{r3, lr}
	switch (event) {
   2440c:	d006      	beq.n	2441c <clock_event_handler+0x14>
   2440e:	2803      	cmp	r0, #3
   24410:	d008      	beq.n	24424 <clock_event_handler+0x1c>
   24412:	b9a0      	cbnz	r0, 2443e <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   24414:	4b0f      	ldr	r3, [pc, #60]	; (24454 <clock_event_handler+0x4c>)
   24416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   24418:	075b      	lsls	r3, r3, #29
   2441a:	d119      	bne.n	24450 <clock_event_handler+0x48>
}
   2441c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   24420:	f7ff bfd4 	b.w	243cc <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   24424:	490c      	ldr	r1, [pc, #48]	; (24458 <clock_event_handler+0x50>)
   24426:	f240 225e 	movw	r2, #606	; 0x25e
   2442a:	480c      	ldr	r0, [pc, #48]	; (2445c <clock_event_handler+0x54>)
   2442c:	f018 fc15 	bl	3cc5a <assert_print>
   24430:	f240 215e 	movw	r1, #606	; 0x25e
}
   24434:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   24438:	4807      	ldr	r0, [pc, #28]	; (24458 <clock_event_handler+0x50>)
   2443a:	f018 bc07 	b.w	3cc4c <assert_post_action>
   2443e:	4906      	ldr	r1, [pc, #24]	; (24458 <clock_event_handler+0x50>)
   24440:	f240 2262 	movw	r2, #610	; 0x262
   24444:	4805      	ldr	r0, [pc, #20]	; (2445c <clock_event_handler+0x54>)
   24446:	f018 fc08 	bl	3cc5a <assert_print>
   2444a:	f240 2162 	movw	r1, #610	; 0x262
   2444e:	e7f1      	b.n	24434 <clock_event_handler+0x2c>
}
   24450:	bd08      	pop	{r3, pc}
   24452:	bf00      	nop
   24454:	200191f8 	.word	0x200191f8
   24458:	00044dbc 	.word	0x00044dbc
   2445c:	00044263 	.word	0x00044263

00024460 <generic_hfclk_start>:
{
   24460:	b508      	push	{r3, lr}
	__asm__ volatile(
   24462:	f04f 0320 	mov.w	r3, #32
   24466:	f3ef 8111 	mrs	r1, BASEPRI
   2446a:	f383 8812 	msr	BASEPRI_MAX, r3
   2446e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   24472:	4a11      	ldr	r2, [pc, #68]	; (244b8 <generic_hfclk_start+0x58>)
   24474:	6813      	ldr	r3, [r2, #0]
   24476:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   2447a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   2447e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   24480:	d00b      	beq.n	2449a <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   24482:	4a0e      	ldr	r2, [pc, #56]	; (244bc <generic_hfclk_start+0x5c>)
   24484:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   24488:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   2448c:	f013 0301 	ands.w	r3, r3, #1
   24490:	d003      	beq.n	2449a <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   24492:	480b      	ldr	r0, [pc, #44]	; (244c0 <generic_hfclk_start+0x60>)
   24494:	f01a f9c4 	bl	3e820 <set_on_state>
			already_started = true;
   24498:	2301      	movs	r3, #1
	__asm__ volatile(
   2449a:	f381 8811 	msr	BASEPRI, r1
   2449e:	f3bf 8f6f 	isb	sy
	if (already_started) {
   244a2:	b123      	cbz	r3, 244ae <generic_hfclk_start+0x4e>
}
   244a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   244a8:	2000      	movs	r0, #0
   244aa:	f7ff bf8f 	b.w	243cc <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   244ae:	2001      	movs	r0, #1
}
   244b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   244b4:	f00d bfd0 	b.w	32458 <nrfx_clock_start>
   244b8:	20019250 	.word	0x20019250
   244bc:	40005000 	.word	0x40005000
   244c0:	20019240 	.word	0x20019240

000244c4 <api_blocking_start>:
{
   244c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   244c6:	2200      	movs	r2, #0
   244c8:	2301      	movs	r3, #1
   244ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
   244ce:	ab04      	add	r3, sp, #16
   244d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   244d4:	4a09      	ldr	r2, [pc, #36]	; (244fc <api_blocking_start+0x38>)
   244d6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   244d8:	f8cd d000 	str.w	sp, [sp]
   244dc:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   244e0:	f01a f9e0 	bl	3e8a4 <api_start>
	if (err < 0) {
   244e4:	2800      	cmp	r0, #0
   244e6:	db05      	blt.n	244f4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   244e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   244ec:	2300      	movs	r3, #0
   244ee:	4668      	mov	r0, sp
   244f0:	f012 fd0a 	bl	36f08 <z_impl_k_sem_take>
}
   244f4:	b007      	add	sp, #28
   244f6:	f85d fb04 	ldr.w	pc, [sp], #4
   244fa:	bf00      	nop
   244fc:	0003e8d1 	.word	0x0003e8d1

00024500 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24500:	4b07      	ldr	r3, [pc, #28]	; (24520 <generic_hfclk_stop+0x20>)
   24502:	e8d3 2fef 	ldaex	r2, [r3]
   24506:	f022 0102 	bic.w	r1, r2, #2
   2450a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   2450e:	2800      	cmp	r0, #0
   24510:	d1f7      	bne.n	24502 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   24512:	07d3      	lsls	r3, r2, #31
   24514:	d402      	bmi.n	2451c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   24516:	2001      	movs	r0, #1
   24518:	f00e b800 	b.w	3251c <nrfx_clock_stop>
}
   2451c:	4770      	bx	lr
   2451e:	bf00      	nop
   24520:	20019250 	.word	0x20019250

00024524 <z_nrf_clock_control_lf_on>:
{
   24524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   24528:	2201      	movs	r2, #1
   2452a:	4606      	mov	r6, r0
   2452c:	4942      	ldr	r1, [pc, #264]	; (24638 <z_nrf_clock_control_lf_on+0x114>)
   2452e:	e8d1 3fef 	ldaex	r3, [r1]
   24532:	e8c1 2fe0 	stlex	r0, r2, [r1]
   24536:	2800      	cmp	r0, #0
   24538:	d1f9      	bne.n	2452e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   2453a:	b99b      	cbnz	r3, 24564 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   2453c:	493f      	ldr	r1, [pc, #252]	; (2463c <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
   2453e:	4840      	ldr	r0, [pc, #256]	; (24640 <z_nrf_clock_control_lf_on+0x11c>)
   24540:	604b      	str	r3, [r1, #4]
   24542:	60cb      	str	r3, [r1, #12]
   24544:	608a      	str	r2, [r1, #8]
   24546:	f7fc fde9 	bl	2111c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   2454a:	2800      	cmp	r0, #0
   2454c:	da0a      	bge.n	24564 <z_nrf_clock_control_lf_on+0x40>
   2454e:	493d      	ldr	r1, [pc, #244]	; (24644 <z_nrf_clock_control_lf_on+0x120>)
   24550:	483d      	ldr	r0, [pc, #244]	; (24648 <z_nrf_clock_control_lf_on+0x124>)
   24552:	f44f 7208 	mov.w	r2, #544	; 0x220
   24556:	f018 fb80 	bl	3cc5a <assert_print>
   2455a:	f44f 7108 	mov.w	r1, #544	; 0x220
   2455e:	4839      	ldr	r0, [pc, #228]	; (24644 <z_nrf_clock_control_lf_on+0x120>)
   24560:	f018 fb74 	bl	3cc4c <assert_post_action>
	switch (start_mode) {
   24564:	b386      	cbz	r6, 245c8 <z_nrf_clock_control_lf_on+0xa4>
   24566:	1e73      	subs	r3, r6, #1
   24568:	2b01      	cmp	r3, #1
   2456a:	d852      	bhi.n	24612 <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   2456c:	2e01      	cmp	r6, #1
   2456e:	d106      	bne.n	2457e <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   24570:	4b36      	ldr	r3, [pc, #216]	; (2464c <z_nrf_clock_control_lf_on+0x128>)
   24572:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   24576:	f003 0303 	and.w	r3, r3, #3
   2457a:	2b02      	cmp	r3, #2
   2457c:	d024      	beq.n	245c8 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2457e:	f01c fdda 	bl	41136 <k_is_in_isr>
   24582:	4604      	mov	r4, r0
   24584:	b918      	cbnz	r0, 2458e <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
   24586:	4b32      	ldr	r3, [pc, #200]	; (24650 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
   24588:	781b      	ldrb	r3, [r3, #0]
   2458a:	2b00      	cmp	r3, #0
   2458c:	d14e      	bne.n	2462c <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
   2458e:	f04f 0320 	mov.w	r3, #32
   24592:	f3ef 8711 	mrs	r7, BASEPRI
   24596:	f383 8812 	msr	BASEPRI_MAX, r3
   2459a:	f3bf 8f6f 	isb	sy
   2459e:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   245a0:	4d2a      	ldr	r5, [pc, #168]	; (2464c <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   245a2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 24654 <z_nrf_clock_control_lf_on+0x130>
   245a6:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   245aa:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   245ae:	03d2      	lsls	r2, r2, #15
   245b0:	d50c      	bpl.n	245cc <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   245b2:	f003 0303 	and.w	r3, r3, #3
   245b6:	2b02      	cmp	r3, #2
   245b8:	d001      	beq.n	245be <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   245ba:	2e01      	cmp	r6, #1
   245bc:	d106      	bne.n	245cc <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
   245be:	b324      	cbz	r4, 2460a <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
   245c0:	f387 8811 	msr	BASEPRI, r7
   245c4:	f3bf 8f6f 	isb	sy
}
   245c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   245cc:	b1c4      	cbz	r4, 24600 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   245ce:	4638      	mov	r0, r7
   245d0:	f7fe fadc 	bl	22b8c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   245d4:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   245d8:	b2db      	uxtb	r3, r3
   245da:	2b01      	cmp	r3, #1
   245dc:	d1e3      	bne.n	245a6 <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   245de:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   245e2:	2a00      	cmp	r2, #0
   245e4:	d0df      	beq.n	245a6 <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   245e6:	2200      	movs	r2, #0
   245e8:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   245ec:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   245f0:	2202      	movs	r2, #2
   245f2:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   245f6:	2220      	movs	r2, #32
   245f8:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   245fc:	60ab      	str	r3, [r5, #8]
}
   245fe:	e7d2      	b.n	245a6 <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
   24600:	2100      	movs	r1, #0
   24602:	2021      	movs	r0, #33	; 0x21
   24604:	f014 f890 	bl	38728 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   24608:	e7e4      	b.n	245d4 <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
   2460a:	2302      	movs	r3, #2
   2460c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   24610:	e7da      	b.n	245c8 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
   24612:	490c      	ldr	r1, [pc, #48]	; (24644 <z_nrf_clock_control_lf_on+0x120>)
   24614:	480c      	ldr	r0, [pc, #48]	; (24648 <z_nrf_clock_control_lf_on+0x124>)
   24616:	f240 2232 	movw	r2, #562	; 0x232
   2461a:	f018 fb1e 	bl	3cc5a <assert_print>
}
   2461e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
   24622:	f240 2132 	movw	r1, #562	; 0x232
   24626:	4807      	ldr	r0, [pc, #28]	; (24644 <z_nrf_clock_control_lf_on+0x120>)
   24628:	f018 bb10 	b.w	3cc4c <assert_post_action>
    p_reg->INTENCLR = mask;
   2462c:	2202      	movs	r2, #2
   2462e:	4b07      	ldr	r3, [pc, #28]	; (2464c <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
   24630:	4607      	mov	r7, r0
   24632:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24636:	e7b3      	b.n	245a0 <z_nrf_clock_control_lf_on+0x7c>
   24638:	20019254 	.word	0x20019254
   2463c:	200191e8 	.word	0x200191e8
   24640:	20019218 	.word	0x20019218
   24644:	00044dbc 	.word	0x00044dbc
   24648:	00044263 	.word	0x00044263
   2464c:	40005000 	.word	0x40005000
   24650:	2001d3cc 	.word	0x2001d3cc
   24654:	e000e100 	.word	0xe000e100

00024658 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   24658:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   2465a:	4808      	ldr	r0, [pc, #32]	; (2467c <uart_console_init+0x24>)
   2465c:	4b08      	ldr	r3, [pc, #32]	; (24680 <uart_console_init+0x28>)
   2465e:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   24660:	f01c fd48 	bl	410f4 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   24664:	b138      	cbz	r0, 24676 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   24666:	4807      	ldr	r0, [pc, #28]	; (24684 <uart_console_init+0x2c>)
   24668:	f7ff f98a 	bl	23980 <__stdout_hook_install>
	__printk_hook_install(console_out);
   2466c:	4805      	ldr	r0, [pc, #20]	; (24684 <uart_console_init+0x2c>)
   2466e:	f7fc fb33 	bl	20cd8 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   24672:	2000      	movs	r0, #0
}
   24674:	bd08      	pop	{r3, pc}
		return -ENODEV;
   24676:	f06f 0012 	mvn.w	r0, #18
   2467a:	e7fb      	b.n	24674 <uart_console_init+0x1c>
   2467c:	0004255c 	.word	0x0004255c
   24680:	20019258 	.word	0x20019258
   24684:	00024689 	.word	0x00024689

00024688 <console_out>:
	if ('\n' == c) {
   24688:	280a      	cmp	r0, #10
{
   2468a:	b538      	push	{r3, r4, r5, lr}
   2468c:	4604      	mov	r4, r0
   2468e:	4d07      	ldr	r5, [pc, #28]	; (246ac <console_out+0x24>)
	if ('\n' == c) {
   24690:	d104      	bne.n	2469c <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   24692:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   24694:	6883      	ldr	r3, [r0, #8]
   24696:	210d      	movs	r1, #13
   24698:	685b      	ldr	r3, [r3, #4]
   2469a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   2469c:	6828      	ldr	r0, [r5, #0]
   2469e:	6883      	ldr	r3, [r0, #8]
   246a0:	b2e1      	uxtb	r1, r4
   246a2:	685b      	ldr	r3, [r3, #4]
   246a4:	4798      	blx	r3
}
   246a6:	4620      	mov	r0, r4
   246a8:	bd38      	pop	{r3, r4, r5, pc}
   246aa:	bf00      	nop
   246ac:	20019258 	.word	0x20019258

000246b0 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   246b0:	b570      	push	{r4, r5, r6, lr}
   246b2:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   246b4:	460c      	mov	r4, r1
	return port->data;
   246b6:	6905      	ldr	r5, [r0, #16]
   246b8:	b941      	cbnz	r1, 246cc <gpio_nrfx_manage_callback+0x1c>
   246ba:	491e      	ldr	r1, [pc, #120]	; (24734 <gpio_nrfx_manage_callback+0x84>)
   246bc:	481e      	ldr	r0, [pc, #120]	; (24738 <gpio_nrfx_manage_callback+0x88>)
   246be:	2224      	movs	r2, #36	; 0x24
   246c0:	f018 facb 	bl	3cc5a <assert_print>
   246c4:	2124      	movs	r1, #36	; 0x24
   246c6:	481b      	ldr	r0, [pc, #108]	; (24734 <gpio_nrfx_manage_callback+0x84>)
   246c8:	f018 fac0 	bl	3cc4c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   246cc:	6863      	ldr	r3, [r4, #4]
   246ce:	b943      	cbnz	r3, 246e2 <gpio_nrfx_manage_callback+0x32>
   246d0:	4918      	ldr	r1, [pc, #96]	; (24734 <gpio_nrfx_manage_callback+0x84>)
   246d2:	4819      	ldr	r0, [pc, #100]	; (24738 <gpio_nrfx_manage_callback+0x88>)
   246d4:	2225      	movs	r2, #37	; 0x25
   246d6:	f018 fac0 	bl	3cc5a <assert_print>
   246da:	2125      	movs	r1, #37	; 0x25
   246dc:	4815      	ldr	r0, [pc, #84]	; (24734 <gpio_nrfx_manage_callback+0x84>)
   246de:	f018 fab5 	bl	3cc4c <assert_post_action>
	return list->head;
   246e2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   246e4:	b15b      	cbz	r3, 246fe <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   246e6:	2200      	movs	r2, #0
   246e8:	429c      	cmp	r4, r3
   246ea:	d112      	bne.n	24712 <gpio_nrfx_manage_callback+0x62>
	return node->next;
   246ec:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   246ee:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   246f0:	b952      	cbnz	r2, 24708 <gpio_nrfx_manage_callback+0x58>
   246f2:	42a1      	cmp	r1, r4
	list->head = node;
   246f4:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   246f6:	d100      	bne.n	246fa <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   246f8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   246fa:	2300      	movs	r3, #0
   246fc:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   246fe:	b96e      	cbnz	r6, 2471c <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   24700:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   24702:	bd70      	pop	{r4, r5, r6, pc}
   24704:	460b      	mov	r3, r1
   24706:	e7ef      	b.n	246e8 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   24708:	42a1      	cmp	r1, r4
	parent->next = child;
   2470a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2470c:	bf08      	it	eq
   2470e:	60aa      	streq	r2, [r5, #8]
}
   24710:	e7f3      	b.n	246fa <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   24712:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24714:	461a      	mov	r2, r3
   24716:	2900      	cmp	r1, #0
   24718:	d1f4      	bne.n	24704 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   2471a:	b13e      	cbz	r6, 2472c <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   2471c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2471e:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   24720:	6023      	str	r3, [r4, #0]
	list->head = node;
   24722:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   24724:	2800      	cmp	r0, #0
   24726:	d1eb      	bne.n	24700 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   24728:	60ac      	str	r4, [r5, #8]
}
   2472a:	e7ea      	b.n	24702 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   2472c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24730:	e7e7      	b.n	24702 <gpio_nrfx_manage_callback+0x52>
   24732:	bf00      	nop
   24734:	00044e19 	.word	0x00044e19
   24738:	00044263 	.word	0x00044263

0002473c <gpio_nrfx_pin_interrupt_configure>:
{
   2473c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
   2473e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   24740:	f001 041f 	and.w	r4, r1, #31
   24744:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   24746:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2474a:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   2474e:	f04f 0500 	mov.w	r5, #0
   24752:	d104      	bne.n	2475e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   24754:	4620      	mov	r0, r4
   24756:	f00e f9f7 	bl	32b48 <nrfx_gpiote_trigger_disable>
	return 0;
   2475a:	2000      	movs	r0, #0
   2475c:	e04b      	b.n	247f6 <gpio_nrfx_pin_interrupt_configure+0xba>
	if (mode == GPIO_INT_MODE_LEVEL) {
   2475e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   24762:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   24766:	d148      	bne.n	247fa <gpio_nrfx_pin_interrupt_configure+0xbe>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   24768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   2476c:	bf0c      	ite	eq
   2476e:	2304      	moveq	r3, #4
   24770:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   24772:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   24776:	6883      	ldr	r3, [r0, #8]
   24778:	fa23 f101 	lsr.w	r1, r3, r1
   2477c:	07c9      	lsls	r1, r1, #31
   2477e:	d448      	bmi.n	24812 <gpio_nrfx_pin_interrupt_configure+0xd6>
   24780:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   24784:	d145      	bne.n	24812 <gpio_nrfx_pin_interrupt_configure+0xd6>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   24786:	0966      	lsrs	r6, r4, #5
   24788:	bf0c      	ite	eq
   2478a:	f04f 33ff 	moveq.w	r3, #4294967295
   2478e:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   24790:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   24794:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   24796:	07da      	lsls	r2, r3, #31
   24798:	d40a      	bmi.n	247b0 <gpio_nrfx_pin_interrupt_configure+0x74>
   2479a:	4926      	ldr	r1, [pc, #152]	; (24834 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   2479c:	4826      	ldr	r0, [pc, #152]	; (24838 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   2479e:	f240 2229 	movw	r2, #553	; 0x229
   247a2:	f018 fa5a 	bl	3cc5a <assert_print>
   247a6:	f240 2129 	movw	r1, #553	; 0x229
   247aa:	4822      	ldr	r0, [pc, #136]	; (24834 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   247ac:	f018 fa4e 	bl	3cc4c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   247b0:	b156      	cbz	r6, 247c8 <gpio_nrfx_pin_interrupt_configure+0x8c>
            NRFX_ASSERT(0);
   247b2:	4920      	ldr	r1, [pc, #128]	; (24834 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   247b4:	4820      	ldr	r0, [pc, #128]	; (24838 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   247b6:	f240 222e 	movw	r2, #558	; 0x22e
   247ba:	f018 fa4e 	bl	3cc5a <assert_print>
   247be:	f240 212e 	movw	r1, #558	; 0x22e
   247c2:	481c      	ldr	r0, [pc, #112]	; (24834 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   247c4:	f018 fa42 	bl	3cc4c <assert_post_action>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   247c8:	4b1c      	ldr	r3, [pc, #112]	; (2483c <gpio_nrfx_pin_interrupt_configure+0x100>)
   247ca:	3580      	adds	r5, #128	; 0x80
   247cc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   247d0:	07db      	lsls	r3, r3, #31
   247d2:	d41e      	bmi.n	24812 <gpio_nrfx_pin_interrupt_configure+0xd6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   247d4:	f10d 0507 	add.w	r5, sp, #7
   247d8:	4629      	mov	r1, r5
   247da:	4620      	mov	r0, r4
   247dc:	f00e f8e2 	bl	329a4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   247e0:	4b17      	ldr	r3, [pc, #92]	; (24840 <gpio_nrfx_pin_interrupt_configure+0x104>)
   247e2:	4298      	cmp	r0, r3
   247e4:	d114      	bne.n	24810 <gpio_nrfx_pin_interrupt_configure+0xd4>
			err = nrfx_gpiote_channel_alloc(&ch);
   247e6:	4628      	mov	r0, r5
   247e8:	f00e f93c 	bl	32a64 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   247ec:	4b15      	ldr	r3, [pc, #84]	; (24844 <gpio_nrfx_pin_interrupt_configure+0x108>)
   247ee:	4298      	cmp	r0, r3
   247f0:	d00e      	beq.n	24810 <gpio_nrfx_pin_interrupt_configure+0xd4>
				return -ENOMEM;
   247f2:	f06f 000b 	mvn.w	r0, #11
}
   247f6:	b004      	add	sp, #16
   247f8:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   247fa:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   247fe:	d005      	beq.n	2480c <gpio_nrfx_pin_interrupt_configure+0xd0>
   24800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   24804:	bf0c      	ite	eq
   24806:	2302      	moveq	r3, #2
   24808:	2301      	movne	r3, #1
   2480a:	e7b2      	b.n	24772 <gpio_nrfx_pin_interrupt_configure+0x36>
   2480c:	2303      	movs	r3, #3
   2480e:	e7b0      	b.n	24772 <gpio_nrfx_pin_interrupt_configure+0x36>
		trigger_config.p_in_channel = &ch;
   24810:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   24812:	2300      	movs	r3, #0
   24814:	4620      	mov	r0, r4
   24816:	4619      	mov	r1, r3
   24818:	aa02      	add	r2, sp, #8
   2481a:	f00d ff99 	bl	32750 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2481e:	4b09      	ldr	r3, [pc, #36]	; (24844 <gpio_nrfx_pin_interrupt_configure+0x108>)
   24820:	4298      	cmp	r0, r3
   24822:	d104      	bne.n	2482e <gpio_nrfx_pin_interrupt_configure+0xf2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   24824:	2101      	movs	r1, #1
   24826:	4620      	mov	r0, r4
   24828:	f00e f922 	bl	32a70 <nrfx_gpiote_trigger_enable>
   2482c:	e795      	b.n	2475a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   2482e:	f06f 0004 	mvn.w	r0, #4
   24832:	e7e0      	b.n	247f6 <gpio_nrfx_pin_interrupt_configure+0xba>
   24834:	00044e46 	.word	0x00044e46
   24838:	00044263 	.word	0x00044263
   2483c:	40842500 	.word	0x40842500
   24840:	0bad0004 	.word	0x0bad0004
   24844:	0bad0000 	.word	0x0bad0000

00024848 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   24848:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   2484a:	f00e f8fb 	bl	32a44 <nrfx_gpiote_is_init>
   2484e:	4604      	mov	r4, r0
   24850:	b968      	cbnz	r0, 2486e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   24852:	f00e f8cf 	bl	329f4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   24856:	4b08      	ldr	r3, [pc, #32]	; (24878 <gpio_nrfx_init+0x30>)
   24858:	4298      	cmp	r0, r3
   2485a:	d10a      	bne.n	24872 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   2485c:	4621      	mov	r1, r4
   2485e:	4807      	ldr	r0, [pc, #28]	; (2487c <gpio_nrfx_init+0x34>)
   24860:	f00e f89a 	bl	32998 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   24864:	4622      	mov	r2, r4
   24866:	2105      	movs	r1, #5
   24868:	2031      	movs	r0, #49	; 0x31
   2486a:	f7fe fa31 	bl	22cd0 <z_arm_irq_priority_set>
		return 0;
   2486e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   24870:	bd10      	pop	{r4, pc}
		return -EIO;
   24872:	f06f 0004 	mvn.w	r0, #4
   24876:	e7fb      	b.n	24870 <gpio_nrfx_init+0x28>
   24878:	0bad0000 	.word	0x0bad0000
   2487c:	00024881 	.word	0x00024881

00024880 <nrfx_gpio_handler>:
{
   24880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   24884:	0943      	lsrs	r3, r0, #5
   24886:	d122      	bne.n	248ce <nrfx_gpio_handler+0x4e>
	return list->head;
   24888:	4b12      	ldr	r3, [pc, #72]	; (248d4 <nrfx_gpio_handler+0x54>)
   2488a:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2488c:	b1fc      	cbz	r4, 248ce <nrfx_gpio_handler+0x4e>
	gpio_fire_callbacks(list, port, BIT(pin));
   2488e:	2601      	movs	r6, #1
	return node->next;
   24890:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   24892:	f8df 8048 	ldr.w	r8, [pc, #72]	; 248dc <nrfx_gpio_handler+0x5c>
			__ASSERT(cb->handler, "No callback handler!");
   24896:	4f10      	ldr	r7, [pc, #64]	; (248d8 <nrfx_gpio_handler+0x58>)
   24898:	f8df 9044 	ldr.w	r9, [pc, #68]	; 248e0 <nrfx_gpio_handler+0x60>
   2489c:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
   2489e:	68a3      	ldr	r3, [r4, #8]
   248a0:	421e      	tst	r6, r3
   248a2:	d010      	beq.n	248c6 <nrfx_gpio_handler+0x46>
			__ASSERT(cb->handler, "No callback handler!");
   248a4:	6863      	ldr	r3, [r4, #4]
   248a6:	b943      	cbnz	r3, 248ba <nrfx_gpio_handler+0x3a>
   248a8:	4639      	mov	r1, r7
   248aa:	4648      	mov	r0, r9
   248ac:	2245      	movs	r2, #69	; 0x45
   248ae:	f018 f9d4 	bl	3cc5a <assert_print>
   248b2:	2145      	movs	r1, #69	; 0x45
   248b4:	4638      	mov	r0, r7
   248b6:	f018 f9c9 	bl	3cc4c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   248ba:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   248be:	4621      	mov	r1, r4
   248c0:	4640      	mov	r0, r8
   248c2:	4032      	ands	r2, r6
   248c4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   248c6:	b115      	cbz	r5, 248ce <nrfx_gpio_handler+0x4e>
   248c8:	462c      	mov	r4, r5
   248ca:	682d      	ldr	r5, [r5, #0]
   248cc:	e7e7      	b.n	2489e <nrfx_gpio_handler+0x1e>
}
   248ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   248d2:	bf00      	nop
   248d4:	2001925c 	.word	0x2001925c
   248d8:	00044e19 	.word	0x00044e19
   248dc:	0004252c 	.word	0x0004252c
   248e0:	00044263 	.word	0x00044263

000248e4 <gpio_nrfx_pin_configure>:
{
   248e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   248e8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   248ea:	f001 051f 	and.w	r5, r1, #31
   248ee:	7b3b      	ldrb	r3, [r7, #12]
{
   248f0:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
   248f2:	4614      	mov	r4, r2
{
   248f4:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   248f6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   248fa:	b9ca      	cbnz	r2, 24930 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   248fc:	a902      	add	r1, sp, #8
   248fe:	4628      	mov	r0, r5
   24900:	f00e f850 	bl	329a4 <nrfx_gpiote_channel_get>
   24904:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   24906:	4628      	mov	r0, r5
   24908:	f00e f948 	bl	32b9c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   2490c:	4b49      	ldr	r3, [pc, #292]	; (24a34 <gpio_nrfx_pin_configure+0x150>)
   2490e:	4298      	cmp	r0, r3
   24910:	d004      	beq.n	2491c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   24912:	f06f 0004 	mvn.w	r0, #4
}
   24916:	b005      	add	sp, #20
   24918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   2491c:	4284      	cmp	r4, r0
   2491e:	d105      	bne.n	2492c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   24920:	f89d 0008 	ldrb.w	r0, [sp, #8]
   24924:	f00e f898 	bl	32a58 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   24928:	42a0      	cmp	r0, r4
   2492a:	d1f2      	bne.n	24912 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2492c:	2000      	movs	r0, #0
   2492e:	e7f2      	b.n	24916 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   24930:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   24934:	f10d 0103 	add.w	r1, sp, #3
   24938:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   2493a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   2493e:	f00e f831 	bl	329a4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   24942:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   24944:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   24946:	4649      	mov	r1, r9
   24948:	4628      	mov	r0, r5
   2494a:	aa02      	add	r2, sp, #8
   2494c:	f00d ff00 	bl	32750 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   24950:	4b38      	ldr	r3, [pc, #224]	; (24a34 <gpio_nrfx_pin_configure+0x150>)
   24952:	4298      	cmp	r0, r3
   24954:	d002      	beq.n	2495c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   24956:	f06f 0015 	mvn.w	r0, #21
   2495a:	e7dc      	b.n	24916 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   2495c:	4580      	cmp	r8, r0
   2495e:	d103      	bne.n	24968 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   24960:	f89d 0003 	ldrb.w	r0, [sp, #3]
   24964:	f00e f878 	bl	32a58 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   24968:	03a3      	lsls	r3, r4, #14
   2496a:	d54f      	bpl.n	24a0c <gpio_nrfx_pin_configure+0x128>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   2496c:	f240 6306 	movw	r3, #1542	; 0x606
   24970:	f240 2206 	movw	r2, #518	; 0x206
   24974:	4023      	ands	r3, r4
   24976:	4293      	cmp	r3, r2
   24978:	d03a      	beq.n	249f0 <gpio_nrfx_pin_configure+0x10c>
   2497a:	d80c      	bhi.n	24996 <gpio_nrfx_pin_configure+0xb2>
   2497c:	2b06      	cmp	r3, #6
   2497e:	d015      	beq.n	249ac <gpio_nrfx_pin_configure+0xc8>
   24980:	d804      	bhi.n	2498c <gpio_nrfx_pin_configure+0xa8>
   24982:	b19b      	cbz	r3, 249ac <gpio_nrfx_pin_configure+0xc8>
   24984:	2b02      	cmp	r3, #2
   24986:	d1e6      	bne.n	24956 <gpio_nrfx_pin_configure+0x72>
   24988:	2304      	movs	r3, #4
   2498a:	e00f      	b.n	249ac <gpio_nrfx_pin_configure+0xc8>
   2498c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   24990:	d1e1      	bne.n	24956 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   24992:	2301      	movs	r3, #1
   24994:	e00a      	b.n	249ac <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   24996:	f240 4202 	movw	r2, #1026	; 0x402
   2499a:	4293      	cmp	r3, r2
   2499c:	d02a      	beq.n	249f4 <gpio_nrfx_pin_configure+0x110>
   2499e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   249a2:	d029      	beq.n	249f8 <gpio_nrfx_pin_configure+0x114>
   249a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   249a8:	d1d5      	bne.n	24956 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   249aa:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   249ac:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   249b0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   249b4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   249b8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   249ba:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   249be:	bf4c      	ite	mi
   249c0:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
   249c2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   249c6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   249c8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   249cc:	d516      	bpl.n	249fc <gpio_nrfx_pin_configure+0x118>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   249ce:	2101      	movs	r1, #1
   249d0:	687b      	ldr	r3, [r7, #4]
   249d2:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   249d6:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   249d8:	2200      	movs	r2, #0
   249da:	4628      	mov	r0, r5
   249dc:	a901      	add	r1, sp, #4
   249de:	f00d ff63 	bl	328a8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   249e2:	4b14      	ldr	r3, [pc, #80]	; (24a34 <gpio_nrfx_pin_configure+0x150>)
   249e4:	4298      	cmp	r0, r3
   249e6:	bf14      	ite	ne
   249e8:	f06f 0015 	mvnne.w	r0, #21
   249ec:	2000      	moveq	r0, #0
   249ee:	e792      	b.n	24916 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   249f0:	2307      	movs	r3, #7
   249f2:	e7db      	b.n	249ac <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   249f4:	2305      	movs	r3, #5
   249f6:	e7d9      	b.n	249ac <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   249f8:	2303      	movs	r3, #3
   249fa:	e7d7      	b.n	249ac <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   249fc:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   249fe:	bf41      	itttt	mi
   24a00:	2101      	movmi	r1, #1
   24a02:	687b      	ldrmi	r3, [r7, #4]
   24a04:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   24a08:	60de      	strmi	r6, [r3, #12]
}
   24a0a:	e7e5      	b.n	249d8 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
   24a0c:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   24a0e:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   24a12:	bf4c      	ite	mi
   24a14:	2403      	movmi	r4, #3
   24a16:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   24a1a:	461a      	mov	r2, r3
   24a1c:	4628      	mov	r0, r5
   24a1e:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   24a20:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   24a24:	f00d fe94 	bl	32750 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   24a28:	4b02      	ldr	r3, [pc, #8]	; (24a34 <gpio_nrfx_pin_configure+0x150>)
   24a2a:	4298      	cmp	r0, r3
   24a2c:	f43f af7e 	beq.w	2492c <gpio_nrfx_pin_configure+0x48>
   24a30:	e791      	b.n	24956 <gpio_nrfx_pin_configure+0x72>
   24a32:	bf00      	nop
   24a34:	0bad0000 	.word	0x0bad0000

00024a38 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   24a38:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   24a3a:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   24a3c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
   24a40:	f00e ff40 	bl	338c4 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   24a44:	4b03      	ldr	r3, [pc, #12]	; (24a54 <i2c_nrfx_twim_recover_bus+0x1c>)
   24a46:	4298      	cmp	r0, r3
}
   24a48:	bf14      	ite	ne
   24a4a:	f06f 000f 	mvnne.w	r0, #15
   24a4e:	2000      	moveq	r0, #0
   24a50:	bd08      	pop	{r3, pc}
   24a52:	bf00      	nop
   24a54:	0bad0000 	.word	0x0bad0000

00024a58 <init_twim>:
{
   24a58:	b538      	push	{r3, r4, r5, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   24a5a:	6905      	ldr	r5, [r0, #16]
{
   24a5c:	4604      	mov	r4, r0
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
   24a5e:	462b      	mov	r3, r5
   24a60:	4a0a      	ldr	r2, [pc, #40]	; (24a8c <init_twim+0x34>)
   24a62:	6840      	ldr	r0, [r0, #4]
   24a64:	f105 0130 	add.w	r1, r5, #48	; 0x30
   24a68:	f00e fb24 	bl	330b4 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   24a6c:	4b08      	ldr	r3, [pc, #32]	; (24a90 <init_twim+0x38>)
   24a6e:	4298      	cmp	r0, r3
   24a70:	d007      	beq.n	24a82 <init_twim+0x2a>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   24a72:	4808      	ldr	r0, [pc, #32]	; (24a94 <init_twim+0x3c>)
   24a74:	2145      	movs	r1, #69	; 0x45
   24a76:	6822      	ldr	r2, [r4, #0]
   24a78:	f018 f929 	bl	3ccce <z_log_minimal_printk>
   24a7c:	f06f 0004 	mvn.w	r0, #4
}
   24a80:	bd38      	pop	{r3, r4, r5, pc}
	dev_data->twim_initialized = true;
   24a82:	2301      	movs	r3, #1
	return 0;
   24a84:	2000      	movs	r0, #0
	dev_data->twim_initialized = true;
   24a86:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
	return 0;
   24a8a:	e7f9      	b.n	24a80 <init_twim+0x28>
   24a8c:	00024af5 	.word	0x00024af5
   24a90:	0bad0000 	.word	0x0bad0000
   24a94:	00044e84 	.word	0x00044e84

00024a98 <i2c_nrfx_twim_configure>:
{
   24a98:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   24a9a:	07cb      	lsls	r3, r1, #31
{
   24a9c:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
   24a9e:	d409      	bmi.n	24ab4 <i2c_nrfx_twim_configure+0x1c>
	switch (I2C_SPEED_GET(i2c_config)) {
   24aa0:	f3c1 0142 	ubfx	r1, r1, #1, #3
   24aa4:	2901      	cmp	r1, #1
   24aa6:	d008      	beq.n	24aba <i2c_nrfx_twim_configure+0x22>
   24aa8:	2902      	cmp	r1, #2
   24aaa:	d01b      	beq.n	24ae4 <i2c_nrfx_twim_configure+0x4c>
		LOG_ERR("unsupported speed");
   24aac:	2145      	movs	r1, #69	; 0x45
   24aae:	4810      	ldr	r0, [pc, #64]	; (24af0 <i2c_nrfx_twim_configure+0x58>)
   24ab0:	f018 f90d 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   24ab4:	f06f 0015 	mvn.w	r0, #21
}
   24ab8:	bd38      	pop	{r3, r4, r5, pc}
		frequency = NRF_TWIM_FREQ_100K;
   24aba:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   24abe:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
   24ac0:	6baa      	ldr	r2, [r5, #56]	; 0x38
   24ac2:	4293      	cmp	r3, r2
   24ac4:	d011      	beq.n	24aea <i2c_nrfx_twim_configure+0x52>
		dev_data->twim_config.frequency = frequency;
   24ac6:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dev_data->twim_initialized) {
   24ac8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   24acc:	b12b      	cbz	r3, 24ada <i2c_nrfx_twim_configure+0x42>
		nrfx_twim_uninit(&dev_config->twim);
   24ace:	6860      	ldr	r0, [r4, #4]
   24ad0:	f00e fbbc 	bl	3324c <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
   24ad4:	2300      	movs	r3, #0
   24ad6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		return init_twim(dev);
   24ada:	4620      	mov	r0, r4
}
   24adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
   24ae0:	f7ff bfba 	b.w	24a58 <init_twim>
	switch (I2C_SPEED_GET(i2c_config)) {
   24ae4:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
   24ae8:	e7e9      	b.n	24abe <i2c_nrfx_twim_configure+0x26>
	return 0;
   24aea:	2000      	movs	r0, #0
   24aec:	e7e4      	b.n	24ab8 <i2c_nrfx_twim_configure+0x20>
   24aee:	bf00      	nop
   24af0:	00044ea9 	.word	0x00044ea9

00024af4 <event_handler>:
	switch (p_event->type) {
   24af4:	7803      	ldrb	r3, [r0, #0]
   24af6:	2b01      	cmp	r3, #1
   24af8:	d008      	beq.n	24b0c <event_handler+0x18>
   24afa:	2b02      	cmp	r3, #2
   24afc:	d008      	beq.n	24b10 <event_handler+0x1c>
   24afe:	b94b      	cbnz	r3, 24b14 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   24b00:	4b05      	ldr	r3, [pc, #20]	; (24b18 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   24b02:	644b      	str	r3, [r1, #68]	; 0x44
	z_impl_k_sem_give(sem);
   24b04:	f101 0018 	add.w	r0, r1, #24
   24b08:	f012 b9c2 	b.w	36e90 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   24b0c:	4b03      	ldr	r3, [pc, #12]	; (24b1c <event_handler+0x28>)
   24b0e:	e7f8      	b.n	24b02 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   24b10:	4b03      	ldr	r3, [pc, #12]	; (24b20 <event_handler+0x2c>)
   24b12:	e7f6      	b.n	24b02 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   24b14:	4b03      	ldr	r3, [pc, #12]	; (24b24 <event_handler+0x30>)
   24b16:	e7f4      	b.n	24b02 <event_handler+0xe>
   24b18:	0bad0000 	.word	0x0bad0000
   24b1c:	0bae0001 	.word	0x0bae0001
   24b20:	0bae0002 	.word	0x0bae0002
   24b24:	0bad0001 	.word	0x0bad0001

00024b28 <i2c_nrfx_twim_transfer>:
{
   24b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b2c:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   24b2e:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   24b32:	b08d      	sub	sp, #52	; 0x34
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   24b34:	6906      	ldr	r6, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   24b36:	f8b8 3008 	ldrh.w	r3, [r8, #8]
{
   24b3a:	9205      	str	r2, [sp, #20]
   24b3c:	4607      	mov	r7, r0
   24b3e:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   24b40:	2214      	movs	r2, #20
   24b42:	2100      	movs	r1, #0
   24b44:	a807      	add	r0, sp, #28
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   24b46:	9304      	str	r3, [sp, #16]
	uint8_t *msg_buf = dev_data->msg_buf;
   24b48:	f8d6 a048 	ldr.w	sl, [r6, #72]	; 0x48
	nrfx_twim_xfer_desc_t cur_xfer = {
   24b4c:	f01c fd59 	bl	41602 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   24b50:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	nrfx_twim_xfer_desc_t cur_xfer = {
   24b54:	f88d 501d 	strb.w	r5, [sp, #29]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   24b58:	b1c3      	cbz	r3, 24b8c <i2c_nrfx_twim_transfer+0x64>
	return z_impl_k_sem_take(sem, timeout);
   24b5a:	f04f 32ff 	mov.w	r2, #4294967295
   24b5e:	f04f 33ff 	mov.w	r3, #4294967295
   24b62:	4630      	mov	r0, r6
   24b64:	f012 f9d0 	bl	36f08 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   24b68:	f106 0b18 	add.w	fp, r6, #24
	for (size_t i = 0; i < num_msgs; i++) {
   24b6c:	f04f 0900 	mov.w	r9, #0
   24b70:	2200      	movs	r2, #0
   24b72:	2300      	movs	r3, #0
   24b74:	4658      	mov	r0, fp
   24b76:	f012 f9c7 	bl	36f08 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   24b7a:	4640      	mov	r0, r8
   24b7c:	f00e fb0a 	bl	33194 <nrfx_twim_enable>
	uint16_t msg_buf_used = 0;
   24b80:	464d      	mov	r5, r9
	for (size_t i = 0; i < num_msgs; i++) {
   24b82:	9b05      	ldr	r3, [sp, #20]
   24b84:	4599      	cmp	r9, r3
   24b86:	d309      	bcc.n	24b9c <i2c_nrfx_twim_transfer+0x74>
   24b88:	2400      	movs	r4, #0
   24b8a:	e02e      	b.n	24bea <i2c_nrfx_twim_transfer+0xc2>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   24b8c:	4638      	mov	r0, r7
   24b8e:	f7ff ff63 	bl	24a58 <init_twim>
   24b92:	2800      	cmp	r0, #0
   24b94:	dae1      	bge.n	24b5a <i2c_nrfx_twim_transfer+0x32>
		return -EIO;
   24b96:	f06f 0404 	mvn.w	r4, #4
   24b9a:	e02c      	b.n	24bf6 <i2c_nrfx_twim_transfer+0xce>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   24b9c:	7a21      	ldrb	r1, [r4, #8]
   24b9e:	070b      	lsls	r3, r1, #28
   24ba0:	f100 80b7 	bmi.w	24d12 <i2c_nrfx_twim_transfer+0x1ea>
				&& ((msgs[i].flags & I2C_MSG_READ)
   24ba4:	9a05      	ldr	r2, [sp, #20]
		bool concat_next = ((i + 1) < num_msgs)
   24ba6:	f109 0301 	add.w	r3, r9, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   24baa:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
   24bac:	9302      	str	r3, [sp, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
   24bae:	d20a      	bcs.n	24bc6 <i2c_nrfx_twim_transfer+0x9e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   24bb0:	0788      	lsls	r0, r1, #30
   24bb2:	d408      	bmi.n	24bc6 <i2c_nrfx_twim_transfer+0x9e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   24bb4:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   24bb6:	ea81 0203 	eor.w	r2, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   24bba:	f002 0201 	and.w	r2, r2, #1
   24bbe:	f003 0304 	and.w	r3, r3, #4
   24bc2:	4313      	orrs	r3, r2
   24bc4:	d01b      	beq.n	24bfe <i2c_nrfx_twim_transfer+0xd6>
		if (concat_next || (msg_buf_used != 0)) {
   24bc6:	b375      	cbz	r5, 24c26 <i2c_nrfx_twim_transfer+0xfe>
				&& ((msgs[i].flags & I2C_MSG_READ)
   24bc8:	2300      	movs	r3, #0
   24bca:	9303      	str	r3, [sp, #12]
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   24bcc:	6863      	ldr	r3, [r4, #4]
   24bce:	9804      	ldr	r0, [sp, #16]
   24bd0:	18ea      	adds	r2, r5, r3
   24bd2:	4282      	cmp	r2, r0
   24bd4:	d915      	bls.n	24c02 <i2c_nrfx_twim_transfer+0xda>
				LOG_ERR("Need to use concatenation buffer and "
   24bd6:	683a      	ldr	r2, [r7, #0]
   24bd8:	9000      	str	r0, [sp, #0]
   24bda:	9201      	str	r2, [sp, #4]
   24bdc:	2145      	movs	r1, #69	; 0x45
   24bde:	462a      	mov	r2, r5
   24be0:	484d      	ldr	r0, [pc, #308]	; (24d18 <i2c_nrfx_twim_transfer+0x1f0>)
   24be2:	f018 f874 	bl	3ccce <z_log_minimal_printk>
				ret = -ENOSPC;
   24be6:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&dev_config->twim);
   24bea:	4640      	mov	r0, r8
   24bec:	f00e fafa 	bl	331e4 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   24bf0:	4630      	mov	r0, r6
   24bf2:	f012 f94d 	bl	36e90 <z_impl_k_sem_give>
}
   24bf6:	4620      	mov	r0, r4
   24bf8:	b00d      	add	sp, #52	; 0x34
   24bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((msgs[i].flags & I2C_MSG_READ)
   24bfe:	2301      	movs	r3, #1
   24c00:	e7e3      	b.n	24bca <i2c_nrfx_twim_transfer+0xa2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   24c02:	07c9      	lsls	r1, r1, #31
   24c04:	d405      	bmi.n	24c12 <i2c_nrfx_twim_transfer+0xea>
   24c06:	461a      	mov	r2, r3
   24c08:	6821      	ldr	r1, [r4, #0]
   24c0a:	eb0a 0005 	add.w	r0, sl, r5
   24c0e:	f01c fcd8 	bl	415c2 <memcpy>
			msg_buf_used += msgs[i].len;
   24c12:	6863      	ldr	r3, [r4, #4]
   24c14:	441d      	add	r5, r3
		if (concat_next) {
   24c16:	9b03      	ldr	r3, [sp, #12]
			msg_buf_used += msgs[i].len;
   24c18:	b2ad      	uxth	r5, r5
		if (concat_next) {
   24c1a:	2b00      	cmp	r3, #0
   24c1c:	d03a      	beq.n	24c94 <i2c_nrfx_twim_transfer+0x16c>
		bool concat_next = ((i + 1) < num_msgs)
   24c1e:	f8dd 9008 	ldr.w	r9, [sp, #8]
   24c22:	340c      	adds	r4, #12
   24c24:	e7ad      	b.n	24b82 <i2c_nrfx_twim_transfer+0x5a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   24c26:	07ca      	lsls	r2, r1, #31
   24c28:	d51d      	bpl.n	24c66 <i2c_nrfx_twim_transfer+0x13e>
			cur_xfer.p_primary_buf = msgs[i].buf;
   24c2a:	2500      	movs	r5, #0
   24c2c:	6823      	ldr	r3, [r4, #0]
   24c2e:	930a      	str	r3, [sp, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
   24c30:	6863      	ldr	r3, [r4, #4]
   24c32:	9308      	str	r3, [sp, #32]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   24c34:	7a23      	ldrb	r3, [r4, #8]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   24c36:	4640      	mov	r0, r8
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   24c38:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   24c3c:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   24c40:	f88d 201c 	strb.w	r2, [sp, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   24c44:	a907      	add	r1, sp, #28
   24c46:	bf0c      	ite	eq
   24c48:	2220      	moveq	r2, #32
   24c4a:	2200      	movne	r2, #0
   24c4c:	f00e fb4e 	bl	332ec <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   24c50:	4b32      	ldr	r3, [pc, #200]	; (24d1c <i2c_nrfx_twim_transfer+0x1f4>)
   24c52:	4298      	cmp	r0, r3
   24c54:	d024      	beq.n	24ca0 <i2c_nrfx_twim_transfer+0x178>
			if (res == NRFX_ERROR_BUSY) {
   24c56:	330b      	adds	r3, #11
				ret = -EIO;
   24c58:	4298      	cmp	r0, r3
   24c5a:	bf0c      	ite	eq
   24c5c:	f06f 040f 	mvneq.w	r4, #15
   24c60:	f06f 0404 	mvnne.w	r4, #4
   24c64:	e7c1      	b.n	24bea <i2c_nrfx_twim_transfer+0xc2>
			   !nrfx_is_in_ram(msgs[i].buf)) {
   24c66:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   24c68:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   24c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   24c70:	d0db      	beq.n	24c2a <i2c_nrfx_twim_transfer+0x102>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   24c72:	6862      	ldr	r2, [r4, #4]
   24c74:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   24c78:	4293      	cmp	r3, r2
   24c7a:	d207      	bcs.n	24c8c <i2c_nrfx_twim_transfer+0x164>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   24c7c:	2145      	movs	r1, #69	; 0x45
   24c7e:	683b      	ldr	r3, [r7, #0]
   24c80:	4827      	ldr	r0, [pc, #156]	; (24d20 <i2c_nrfx_twim_transfer+0x1f8>)
   24c82:	f018 f824 	bl	3ccce <z_log_minimal_printk>
				ret = -EINVAL;
   24c86:	f06f 0415 	mvn.w	r4, #21
				break;
   24c8a:	e7ae      	b.n	24bea <i2c_nrfx_twim_transfer+0xc2>
   24c8c:	4650      	mov	r0, sl
   24c8e:	f01c fc98 	bl	415c2 <memcpy>
			msg_buf_used = msgs[i].len;
   24c92:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   24c94:	2d00      	cmp	r5, #0
   24c96:	d0c8      	beq.n	24c2a <i2c_nrfx_twim_transfer+0x102>
			cur_xfer.p_primary_buf = msg_buf;
   24c98:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
   24c9c:	9508      	str	r5, [sp, #32]
   24c9e:	e7c9      	b.n	24c34 <i2c_nrfx_twim_transfer+0x10c>
	return z_impl_k_sem_take(sem, timeout);
   24ca0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   24ca4:	2300      	movs	r3, #0
   24ca6:	4658      	mov	r0, fp
   24ca8:	f012 f92e 	bl	36f08 <z_impl_k_sem_take>
		if (ret != 0) {
   24cac:	b170      	cbz	r0, 24ccc <i2c_nrfx_twim_transfer+0x1a4>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   24cae:	2145      	movs	r1, #69	; 0x45
   24cb0:	464a      	mov	r2, r9
   24cb2:	481c      	ldr	r0, [pc, #112]	; (24d24 <i2c_nrfx_twim_transfer+0x1fc>)
   24cb4:	f018 f80b 	bl	3ccce <z_log_minimal_printk>
			nrfx_twim_disable(&dev_config->twim);
   24cb8:	4640      	mov	r0, r8
   24cba:	f00e fa93 	bl	331e4 <nrfx_twim_disable>
   24cbe:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
   24cc2:	f00e fdff 	bl	338c4 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   24cc6:	f06f 0404 	mvn.w	r4, #4
			break;
   24cca:	e78e      	b.n	24bea <i2c_nrfx_twim_transfer+0xc2>
		res = dev_data->res;
   24ccc:	6c72      	ldr	r2, [r6, #68]	; 0x44
		if (res != NRFX_SUCCESS) {
   24cce:	4b13      	ldr	r3, [pc, #76]	; (24d1c <i2c_nrfx_twim_transfer+0x1f4>)
   24cd0:	429a      	cmp	r2, r3
   24cd2:	d005      	beq.n	24ce0 <i2c_nrfx_twim_transfer+0x1b8>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   24cd4:	464b      	mov	r3, r9
   24cd6:	2145      	movs	r1, #69	; 0x45
   24cd8:	4813      	ldr	r0, [pc, #76]	; (24d28 <i2c_nrfx_twim_transfer+0x200>)
   24cda:	f017 fff8 	bl	3ccce <z_log_minimal_printk>
   24cde:	e7f2      	b.n	24cc6 <i2c_nrfx_twim_transfer+0x19e>
		if ((msgs[i].flags & I2C_MSG_READ)
   24ce0:	7a23      	ldrb	r3, [r4, #8]
   24ce2:	07db      	lsls	r3, r3, #31
   24ce4:	d401      	bmi.n	24cea <i2c_nrfx_twim_transfer+0x1c2>
		msg_buf_used = 0;
   24ce6:	2500      	movs	r5, #0
   24ce8:	e799      	b.n	24c1e <i2c_nrfx_twim_transfer+0xf6>
		    && cur_xfer.p_primary_buf == msg_buf) {
   24cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24cec:	459a      	cmp	sl, r3
   24cee:	d1fa      	bne.n	24ce6 <i2c_nrfx_twim_transfer+0x1be>
   24cf0:	46a1      	mov	r9, r4
   24cf2:	e007      	b.n	24d04 <i2c_nrfx_twim_transfer+0x1dc>
				msg_buf_used -= msgs[j].len;
   24cf4:	1aa9      	subs	r1, r5, r2
   24cf6:	b28d      	uxth	r5, r1
   24cf8:	f8d9 000c 	ldr.w	r0, [r9, #12]
   24cfc:	fa1a f181 	uxtah	r1, sl, r1
   24d00:	f01c fc5f 	bl	415c2 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   24d04:	f8d9 2004 	ldr.w	r2, [r9, #4]
   24d08:	f1a9 090c 	sub.w	r9, r9, #12
   24d0c:	4295      	cmp	r5, r2
   24d0e:	d2f1      	bcs.n	24cf4 <i2c_nrfx_twim_transfer+0x1cc>
   24d10:	e7e9      	b.n	24ce6 <i2c_nrfx_twim_transfer+0x1be>
			ret = -ENOTSUP;
   24d12:	f06f 0485 	mvn.w	r4, #133	; 0x85
   24d16:	e768      	b.n	24bea <i2c_nrfx_twim_transfer+0xc2>
   24d18:	00044ec0 	.word	0x00044ec0
   24d1c:	0bad0000 	.word	0x0bad0000
   24d20:	00044f55 	.word	0x00044f55
   24d24:	00044fc0 	.word	0x00044fc0
   24d28:	00044fef 	.word	0x00044fef

00024d2c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   24d2c:	4b02      	ldr	r3, [pc, #8]	; (24d38 <flash_nrf_pages_layout+0xc>)
   24d2e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   24d30:	2301      	movs	r3, #1
   24d32:	6013      	str	r3, [r2, #0]
}
   24d34:	4770      	bx	lr
   24d36:	bf00      	nop
   24d38:	20019268 	.word	0x20019268

00024d3c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   24d3c:	4800      	ldr	r0, [pc, #0]	; (24d40 <flash_nrf_get_parameters+0x4>)
   24d3e:	4770      	bx	lr
   24d40:	00042d98 	.word	0x00042d98

00024d44 <flash_nrf_read>:
{
   24d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24d46:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   24d48:	4619      	mov	r1, r3
   24d4a:	4620      	mov	r0, r4
{
   24d4c:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
   24d4e:	9301      	str	r3, [sp, #4]
   24d50:	f019 fe01 	bl	3e956 <is_regular_addr_valid>
   24d54:	9a01      	ldr	r2, [sp, #4]
   24d56:	b948      	cbnz	r0, 24d6c <flash_nrf_read+0x28>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24d58:	4613      	mov	r3, r2
   24d5a:	480d      	ldr	r0, [pc, #52]	; (24d90 <flash_nrf_read+0x4c>)
   24d5c:	4622      	mov	r2, r4
   24d5e:	2145      	movs	r1, #69	; 0x45
   24d60:	f017 ffb5 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   24d64:	f06f 0015 	mvn.w	r0, #21
}
   24d68:	b003      	add	sp, #12
   24d6a:	bd30      	pop	{r4, r5, pc}
	if (!len) {
   24d6c:	b16a      	cbz	r2, 24d8a <flash_nrf_read+0x46>
	if (addr < PM_APP_ADDRESS) {
   24d6e:	f5b4 3fe1 	cmp.w	r4, #115200	; 0x1c200
		return soc_secure_mem_read(data, (void *)addr, len);
   24d72:	4621      	mov	r1, r4
   24d74:	4628      	mov	r0, r5
	if (addr < PM_APP_ADDRESS) {
   24d76:	da04      	bge.n	24d82 <flash_nrf_read+0x3e>
}
   24d78:	b003      	add	sp, #12
   24d7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   24d7e:	f017 bf8c 	b.w	3cc9a <soc_secure_mem_read>
   24d82:	f01c fc1e 	bl	415c2 <memcpy>
	return 0;
   24d86:	2000      	movs	r0, #0
   24d88:	e7ee      	b.n	24d68 <flash_nrf_read+0x24>
		return 0;
   24d8a:	4610      	mov	r0, r2
   24d8c:	e7ec      	b.n	24d68 <flash_nrf_read+0x24>
   24d8e:	bf00      	nop
   24d90:	0004502d 	.word	0x0004502d

00024d94 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   24d94:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   24d96:	2201      	movs	r2, #1
   24d98:	4806      	ldr	r0, [pc, #24]	; (24db4 <nrf_flash_init+0x20>)
   24d9a:	4611      	mov	r1, r2
   24d9c:	f01c fa05 	bl	411aa <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   24da0:	f01b f96d 	bl	4007e <nrfx_nvmc_flash_page_count_get>
   24da4:	4c04      	ldr	r4, [pc, #16]	; (24db8 <nrf_flash_init+0x24>)
   24da6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   24da8:	f01b f966 	bl	40078 <nrfx_nvmc_flash_page_size_get>
   24dac:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   24dae:	2000      	movs	r0, #0
   24db0:	bd10      	pop	{r4, pc}
   24db2:	bf00      	nop
   24db4:	20019270 	.word	0x20019270
   24db8:	20019268 	.word	0x20019268

00024dbc <flash_nrf_erase>:
{
   24dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24dbe:	460e      	mov	r6, r1
   24dc0:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24dc2:	f01b f959 	bl	40078 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   24dc6:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24dc8:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   24dca:	4630      	mov	r0, r6
   24dcc:	f019 fdc3 	bl	3e956 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   24dd0:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   24dd2:	b348      	cbz	r0, 24e28 <flash_nrf_erase+0x6c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   24dd4:	fbb6 f3f5 	udiv	r3, r6, r5
   24dd8:	fb05 6313 	mls	r3, r5, r3, r6
   24ddc:	b923      	cbnz	r3, 24de8 <flash_nrf_erase+0x2c>
   24dde:	fbb4 f3f5 	udiv	r3, r4, r5
   24de2:	fb05 4013 	mls	r0, r5, r3, r4
   24de6:	b140      	cbz	r0, 24dfa <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   24de8:	4623      	mov	r3, r4
   24dea:	4632      	mov	r2, r6
   24dec:	2145      	movs	r1, #69	; 0x45
   24dee:	4811      	ldr	r0, [pc, #68]	; (24e34 <flash_nrf_erase+0x78>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24df0:	f017 ff6d 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   24df4:	f06f 0015 	mvn.w	r0, #21
   24df8:	e015      	b.n	24e26 <flash_nrf_erase+0x6a>
		if (!n_pages) {
   24dfa:	42a5      	cmp	r5, r4
   24dfc:	d813      	bhi.n	24e26 <flash_nrf_erase+0x6a>
	return z_impl_k_sem_take(sem, timeout);
   24dfe:	f04f 32ff 	mov.w	r2, #4294967295
   24e02:	f04f 33ff 	mov.w	r3, #4294967295
   24e06:	480c      	ldr	r0, [pc, #48]	; (24e38 <flash_nrf_erase+0x7c>)
   24e08:	f012 f87e 	bl	36f08 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24e0c:	f01b f934 	bl	40078 <nrfx_nvmc_flash_page_size_get>
   24e10:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   24e12:	4638      	mov	r0, r7
   24e14:	f00e f8bc 	bl	32f90 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   24e18:	1b64      	subs	r4, r4, r5
   24e1a:	442f      	add	r7, r5
   24e1c:	d1f9      	bne.n	24e12 <flash_nrf_erase+0x56>
	z_impl_k_sem_give(sem);
   24e1e:	4806      	ldr	r0, [pc, #24]	; (24e38 <flash_nrf_erase+0x7c>)
   24e20:	f012 f836 	bl	36e90 <z_impl_k_sem_give>
	return ret;
   24e24:	4620      	mov	r0, r4
}
   24e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24e28:	4623      	mov	r3, r4
   24e2a:	4632      	mov	r2, r6
   24e2c:	2145      	movs	r1, #69	; 0x45
   24e2e:	4803      	ldr	r0, [pc, #12]	; (24e3c <flash_nrf_erase+0x80>)
   24e30:	e7de      	b.n	24df0 <flash_nrf_erase+0x34>
   24e32:	bf00      	nop
   24e34:	0004504f 	.word	0x0004504f
   24e38:	20019270 	.word	0x20019270
   24e3c:	0004502d 	.word	0x0004502d

00024e40 <flash_nrf_write>:
{
   24e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24e42:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   24e44:	4619      	mov	r1, r3
   24e46:	4630      	mov	r0, r6
{
   24e48:	4617      	mov	r7, r2
   24e4a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   24e4c:	f019 fd83 	bl	3e956 <is_regular_addr_valid>
   24e50:	b940      	cbnz	r0, 24e64 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24e52:	4623      	mov	r3, r4
   24e54:	4632      	mov	r2, r6
   24e56:	2145      	movs	r1, #69	; 0x45
   24e58:	4817      	ldr	r0, [pc, #92]	; (24eb8 <flash_nrf_write+0x78>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   24e5a:	f017 ff38 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   24e5e:	f06f 0015 	mvn.w	r0, #21
}
   24e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   24e64:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   24e68:	f015 0503 	ands.w	r5, r5, #3
   24e6c:	d004      	beq.n	24e78 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   24e6e:	4623      	mov	r3, r4
   24e70:	4632      	mov	r2, r6
   24e72:	2145      	movs	r1, #69	; 0x45
   24e74:	4811      	ldr	r0, [pc, #68]	; (24ebc <flash_nrf_write+0x7c>)
   24e76:	e7f0      	b.n	24e5a <flash_nrf_write+0x1a>
	if (!len) {
   24e78:	b1dc      	cbz	r4, 24eb2 <flash_nrf_write+0x72>
	return z_impl_k_sem_take(sem, timeout);
   24e7a:	f04f 32ff 	mov.w	r2, #4294967295
   24e7e:	f04f 33ff 	mov.w	r3, #4294967295
   24e82:	480f      	ldr	r0, [pc, #60]	; (24ec0 <flash_nrf_write+0x80>)
   24e84:	f012 f840 	bl	36f08 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   24e88:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   24e8c:	42ac      	cmp	r4, r5
   24e8e:	eb05 0006 	add.w	r0, r5, r6
   24e92:	d109      	bne.n	24ea8 <flash_nrf_write+0x68>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   24e94:	4a0b      	ldr	r2, [pc, #44]	; (24ec4 <flash_nrf_write+0x84>)
   24e96:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   24e9a:	07db      	lsls	r3, r3, #31
   24e9c:	d5fb      	bpl.n	24e96 <flash_nrf_write+0x56>
	z_impl_k_sem_give(sem);
   24e9e:	4808      	ldr	r0, [pc, #32]	; (24ec0 <flash_nrf_write+0x80>)
   24ea0:	f011 fff6 	bl	36e90 <z_impl_k_sem_give>
	return ret;
   24ea4:	2000      	movs	r0, #0
}
   24ea6:	e7dc      	b.n	24e62 <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   24ea8:	5979      	ldr	r1, [r7, r5]
   24eaa:	f00e f8a1 	bl	32ff0 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   24eae:	3504      	adds	r5, #4
}
   24eb0:	e7ec      	b.n	24e8c <flash_nrf_write+0x4c>
		return 0;
   24eb2:	4620      	mov	r0, r4
   24eb4:	e7d5      	b.n	24e62 <flash_nrf_write+0x22>
   24eb6:	bf00      	nop
   24eb8:	0004502d 	.word	0x0004502d
   24ebc:	00045073 	.word	0x00045073
   24ec0:	20019270 	.word	0x20019270
   24ec4:	40039000 	.word	0x40039000

00024ec8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   24ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   24eca:	794b      	ldrb	r3, [r1, #5]
   24ecc:	2b01      	cmp	r3, #1
   24ece:	d026      	beq.n	24f1e <uarte_nrfx_configure+0x56>
   24ed0:	2b03      	cmp	r3, #3
   24ed2:	d121      	bne.n	24f18 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   24ed4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   24ed6:	798b      	ldrb	r3, [r1, #6]
   24ed8:	2b03      	cmp	r3, #3
   24eda:	d11d      	bne.n	24f18 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   24edc:	79cc      	ldrb	r4, [r1, #7]
   24ede:	b10c      	cbz	r4, 24ee4 <uarte_nrfx_configure+0x1c>
   24ee0:	2c01      	cmp	r4, #1
   24ee2:	d119      	bne.n	24f18 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   24ee4:	790a      	ldrb	r2, [r1, #4]
   24ee6:	b112      	cbz	r2, 24eee <uarte_nrfx_configure+0x26>
   24ee8:	2a02      	cmp	r2, #2
   24eea:	d115      	bne.n	24f18 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   24eec:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   24eee:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   24ef0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   24ef2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   24ef6:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   24ef8:	d065      	beq.n	24fc6 <uarte_nrfx_configure+0xfe>
   24efa:	d82d      	bhi.n	24f58 <uarte_nrfx_configure+0x90>
   24efc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   24f00:	d064      	beq.n	24fcc <uarte_nrfx_configure+0x104>
   24f02:	d816      	bhi.n	24f32 <uarte_nrfx_configure+0x6a>
   24f04:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   24f08:	d062      	beq.n	24fd0 <uarte_nrfx_configure+0x108>
   24f0a:	d80a      	bhi.n	24f22 <uarte_nrfx_configure+0x5a>
   24f0c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   24f10:	d061      	beq.n	24fd6 <uarte_nrfx_configure+0x10e>
   24f12:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   24f16:	d061      	beq.n	24fdc <uarte_nrfx_configure+0x114>
   24f18:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24f1c:	e052      	b.n	24fc4 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   24f1e:	2600      	movs	r6, #0
   24f20:	e7d9      	b.n	24ed6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   24f22:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   24f26:	d05c      	beq.n	24fe2 <uarte_nrfx_configure+0x11a>
   24f28:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   24f2c:	d1f4      	bne.n	24f18 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   24f2e:	4b37      	ldr	r3, [pc, #220]	; (2500c <uarte_nrfx_configure+0x144>)
   24f30:	e03c      	b.n	24fac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24f32:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   24f36:	d057      	beq.n	24fe8 <uarte_nrfx_configure+0x120>
   24f38:	d807      	bhi.n	24f4a <uarte_nrfx_configure+0x82>
   24f3a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   24f3e:	d055      	beq.n	24fec <uarte_nrfx_configure+0x124>
   24f40:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   24f44:	d1e8      	bne.n	24f18 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   24f46:	4b32      	ldr	r3, [pc, #200]	; (25010 <uarte_nrfx_configure+0x148>)
   24f48:	e030      	b.n	24fac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24f4a:	f647 2712 	movw	r7, #31250	; 0x7a12
   24f4e:	42bb      	cmp	r3, r7
   24f50:	d1e2      	bne.n	24f18 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   24f52:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   24f56:	e029      	b.n	24fac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24f58:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   24f5c:	d048      	beq.n	24ff0 <uarte_nrfx_configure+0x128>
   24f5e:	d813      	bhi.n	24f88 <uarte_nrfx_configure+0xc0>
   24f60:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   24f64:	d047      	beq.n	24ff6 <uarte_nrfx_configure+0x12e>
   24f66:	d809      	bhi.n	24f7c <uarte_nrfx_configure+0xb4>
   24f68:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   24f6c:	42bb      	cmp	r3, r7
   24f6e:	d044      	beq.n	24ffa <uarte_nrfx_configure+0x132>
   24f70:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   24f74:	d1d0      	bne.n	24f18 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   24f76:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   24f7a:	e017      	b.n	24fac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24f7c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   24f80:	d1ca      	bne.n	24f18 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   24f82:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   24f86:	e011      	b.n	24fac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24f88:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   24f8c:	d038      	beq.n	25000 <uarte_nrfx_configure+0x138>
   24f8e:	d808      	bhi.n	24fa2 <uarte_nrfx_configure+0xda>
   24f90:	4f20      	ldr	r7, [pc, #128]	; (25014 <uarte_nrfx_configure+0x14c>)
   24f92:	42bb      	cmp	r3, r7
   24f94:	d037      	beq.n	25006 <uarte_nrfx_configure+0x13e>
   24f96:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   24f9a:	d1bd      	bne.n	24f18 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   24f9c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   24fa0:	e004      	b.n	24fac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24fa2:	4f1d      	ldr	r7, [pc, #116]	; (25018 <uarte_nrfx_configure+0x150>)
   24fa4:	42bb      	cmp	r3, r7
   24fa6:	d1b7      	bne.n	24f18 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   24fa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   24fac:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
   24fae:	4334      	orrs	r4, r6
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   24fb0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   24fb4:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   24fb6:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   24fb8:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   24fbc:	c903      	ldmia	r1, {r0, r1}
   24fbe:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   24fc2:	2000      	movs	r0, #0
}
   24fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   24fc6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   24fca:	e7ef      	b.n	24fac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   24fcc:	4b13      	ldr	r3, [pc, #76]	; (2501c <uarte_nrfx_configure+0x154>)
   24fce:	e7ed      	b.n	24fac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   24fd0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   24fd4:	e7ea      	b.n	24fac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   24fd6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   24fda:	e7e7      	b.n	24fac <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24fdc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   24fe0:	e7e4      	b.n	24fac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   24fe2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   24fe6:	e7e1      	b.n	24fac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   24fe8:	4b0d      	ldr	r3, [pc, #52]	; (25020 <uarte_nrfx_configure+0x158>)
   24fea:	e7df      	b.n	24fac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   24fec:	4b0d      	ldr	r3, [pc, #52]	; (25024 <uarte_nrfx_configure+0x15c>)
   24fee:	e7dd      	b.n	24fac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   24ff0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   24ff4:	e7da      	b.n	24fac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   24ff6:	4b0c      	ldr	r3, [pc, #48]	; (25028 <uarte_nrfx_configure+0x160>)
   24ff8:	e7d8      	b.n	24fac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   24ffa:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   24ffe:	e7d5      	b.n	24fac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   25000:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   25004:	e7d2      	b.n	24fac <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   25006:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2500a:	e7cf      	b.n	24fac <uarte_nrfx_configure+0xe4>
   2500c:	0013b000 	.word	0x0013b000
   25010:	004ea000 	.word	0x004ea000
   25014:	0003d090 	.word	0x0003d090
   25018:	000f4240 	.word	0x000f4240
   2501c:	00275000 	.word	0x00275000
   25020:	0075c000 	.word	0x0075c000
   25024:	003af000 	.word	0x003af000
   25028:	013a9000 	.word	0x013a9000

0002502c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2502c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25030:	4607      	mov	r7, r0
   25032:	2200      	movs	r2, #0
   25034:	2101      	movs	r1, #1
   25036:	2008      	movs	r0, #8
   25038:	f7fd fe4a 	bl	22cd0 <z_arm_irq_priority_set>
   2503c:	2008      	movs	r0, #8
   2503e:	f7fd fe15 	bl	22c6c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   25042:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   25044:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   25048:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   2504a:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   2504e:	f8d8 900c 	ldr.w	r9, [r8, #12]
   25052:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   25056:	4648      	mov	r0, r9
	data->dev = dev;
   25058:	6037      	str	r7, [r6, #0]
   2505a:	aa01      	add	r2, sp, #4
   2505c:	f019 fe6e 	bl	3ed3c <pinctrl_lookup_state>
	if (ret < 0) {
   25060:	1e05      	subs	r5, r0, #0
   25062:	db1f      	blt.n	250a4 <uarte_0_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   25064:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   25066:	f8d9 2000 	ldr.w	r2, [r9]
   2506a:	7919      	ldrb	r1, [r3, #4]
   2506c:	6818      	ldr	r0, [r3, #0]
   2506e:	f019 febb 	bl	3ede8 <pinctrl_configure_pins>
	if (err < 0) {
   25072:	1e05      	subs	r5, r0, #0
   25074:	db16      	blt.n	250a4 <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   25076:	4638      	mov	r0, r7
   25078:	1d31      	adds	r1, r6, #4
   2507a:	f7ff ff25 	bl	24ec8 <uarte_nrfx_configure>
	if (err) {
   2507e:	4605      	mov	r5, r0
   25080:	b980      	cbnz	r0, 250a4 <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   25082:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   25086:	0799      	lsls	r1, r3, #30
   25088:	d52b      	bpl.n	250e2 <uarte_0_init+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2508a:	f106 0016 	add.w	r0, r6, #22
   2508e:	f00d fa95 	bl	325bc <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   25092:	4b29      	ldr	r3, [pc, #164]	; (25138 <uarte_0_init+0x10c>)
   25094:	4298      	cmp	r0, r3
   25096:	d009      	beq.n	250ac <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   25098:	2145      	movs	r1, #69	; 0x45
   2509a:	4828      	ldr	r0, [pc, #160]	; (2513c <uarte_0_init+0x110>)
   2509c:	f017 fe17 	bl	3ccce <z_log_minimal_printk>
		return -EIO;
   250a0:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   250a4:	4628      	mov	r0, r5
   250a6:	b003      	add	sp, #12
   250a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   250ac:	7db7      	ldrb	r7, [r6, #22]
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   250ae:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   250b2:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
   250b6:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   250ba:	d10a      	bne.n	250d2 <uarte_0_init+0xa6>
   250bc:	4920      	ldr	r1, [pc, #128]	; (25140 <uarte_0_init+0x114>)
   250be:	4821      	ldr	r0, [pc, #132]	; (25144 <uarte_0_init+0x118>)
   250c0:	f240 224e 	movw	r2, #590	; 0x24e
   250c4:	f017 fdc9 	bl	3cc5a <assert_print>
   250c8:	f240 214e 	movw	r1, #590	; 0x24e
   250cc:	481c      	ldr	r0, [pc, #112]	; (25140 <uarte_0_init+0x114>)
   250ce:	f017 fdbd 	bl	3cc4c <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   250d2:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   250d4:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
   250d8:	7db2      	ldrb	r2, [r6, #22]
   250da:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   250dc:	4a1a      	ldr	r2, [pc, #104]	; (25148 <uarte_0_init+0x11c>)
   250de:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   250e2:	2308      	movs	r3, #8
   250e4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   250e8:	f898 3008 	ldrb.w	r3, [r8, #8]
   250ec:	b95b      	cbnz	r3, 25106 <uarte_0_init+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   250ee:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   250f2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   250f6:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   250fa:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   250fe:	2301      	movs	r3, #1
   25100:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25104:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   25106:	f8d8 3004 	ldr.w	r3, [r8, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   2510a:	3614      	adds	r6, #20
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2510c:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   2510e:	bf5c      	itt	pl
   25110:	f44f 7280 	movpl.w	r2, #256	; 0x100
   25114:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   25118:	06db      	lsls	r3, r3, #27
   2511a:	bf44      	itt	mi
   2511c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   25120:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   25124:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   25126:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2512a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2512e:	2301      	movs	r3, #1
   25130:	60a3      	str	r3, [r4, #8]
   25132:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   25134:	e7b6      	b.n	250a4 <uarte_0_init+0x78>
   25136:	bf00      	nop
   25138:	0bad0000 	.word	0x0bad0000
   2513c:	000450a0 	.word	0x000450a0
   25140:	000450c4 	.word	0x000450c4
   25144:	00044263 	.word	0x00044263
   25148:	40017000 	.word	0x40017000

0002514c <uarte_nrfx_poll_out>:
{
   2514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2514e:	4605      	mov	r5, r0
   25150:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
   25152:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   25154:	f01b ffef 	bl	41136 <k_is_in_isr>
   25158:	b910      	cbnz	r0, 25160 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   2515a:	4b20      	ldr	r3, [pc, #128]	; (251dc <uarte_nrfx_poll_out+0x90>)
	if (isr_mode) {
   2515c:	781b      	ldrb	r3, [r3, #0]
   2515e:	b983      	cbnz	r3, 25182 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   25160:	f04f 0320 	mov.w	r3, #32
   25164:	f3ef 8411 	mrs	r4, BASEPRI
   25168:	f383 8812 	msr	BASEPRI_MAX, r3
   2516c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   25170:	6868      	ldr	r0, [r5, #4]
   25172:	f019 fd2e 	bl	3ebd2 <is_tx_ready.isra.0>
   25176:	bb28      	cbnz	r0, 251c4 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   25178:	f384 8811 	msr	BASEPRI, r4
   2517c:	f3bf 8f6f 	isb	sy
}
   25180:	e7ee      	b.n	25160 <uarte_nrfx_poll_out+0x14>
{
   25182:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   25184:	6868      	ldr	r0, [r5, #4]
   25186:	f019 fd24 	bl	3ebd2 <is_tx_ready.isra.0>
   2518a:	b970      	cbnz	r0, 251aa <uarte_nrfx_poll_out+0x5e>
   2518c:	2001      	movs	r0, #1
   2518e:	f01a fef9 	bl	3ff84 <nrfx_busy_wait>
   25192:	3c01      	subs	r4, #1
   25194:	d1f6      	bne.n	25184 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   25196:	2100      	movs	r1, #0
   25198:	2021      	movs	r0, #33	; 0x21
   2519a:	f013 fac5 	bl	38728 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2519e:	e7f0      	b.n	25182 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   251a0:	f384 8811 	msr	BASEPRI, r4
   251a4:	f3bf 8f6f 	isb	sy
}
   251a8:	e7f5      	b.n	25196 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   251aa:	f04f 0320 	mov.w	r3, #32
   251ae:	f3ef 8411 	mrs	r4, BASEPRI
   251b2:	f383 8812 	msr	BASEPRI_MAX, r3
   251b6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   251ba:	6868      	ldr	r0, [r5, #4]
   251bc:	f019 fd09 	bl	3ebd2 <is_tx_ready.isra.0>
   251c0:	2800      	cmp	r0, #0
   251c2:	d0ed      	beq.n	251a0 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
   251c4:	4631      	mov	r1, r6
   251c6:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   251ca:	2201      	movs	r2, #1
   251cc:	6868      	ldr	r0, [r5, #4]
   251ce:	f019 fce5 	bl	3eb9c <tx_start.isra.0>
	__asm__ volatile(
   251d2:	f384 8811 	msr	BASEPRI, r4
   251d6:	f3bf 8f6f 	isb	sy
}
   251da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   251dc:	2001d3cc 	.word	0x2001d3cc

000251e0 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   251e0:	b538      	push	{r3, r4, r5, lr}
   251e2:	460c      	mov	r4, r1
   251e4:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(dev != NULL);
   251e6:	b940      	cbnz	r0, 251fa <entropy_cc3xx_rng_get_entropy+0x1a>
   251e8:	490d      	ldr	r1, [pc, #52]	; (25220 <entropy_cc3xx_rng_get_entropy+0x40>)
   251ea:	480e      	ldr	r0, [pc, #56]	; (25224 <entropy_cc3xx_rng_get_entropy+0x44>)
   251ec:	2220      	movs	r2, #32
   251ee:	f017 fd34 	bl	3cc5a <assert_print>
   251f2:	2120      	movs	r1, #32
   251f4:	480a      	ldr	r0, [pc, #40]	; (25220 <entropy_cc3xx_rng_get_entropy+0x40>)
   251f6:	f017 fd29 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   251fa:	b944      	cbnz	r4, 2520e <entropy_cc3xx_rng_get_entropy+0x2e>
   251fc:	4908      	ldr	r1, [pc, #32]	; (25220 <entropy_cc3xx_rng_get_entropy+0x40>)
   251fe:	4809      	ldr	r0, [pc, #36]	; (25224 <entropy_cc3xx_rng_get_entropy+0x44>)
   25200:	2221      	movs	r2, #33	; 0x21
   25202:	f017 fd2a 	bl	3cc5a <assert_print>
   25206:	2121      	movs	r1, #33	; 0x21
   25208:	4805      	ldr	r0, [pc, #20]	; (25220 <entropy_cc3xx_rng_get_entropy+0x40>)
   2520a:	f017 fd1f 	bl	3cc4c <assert_post_action>
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   2520e:	4629      	mov	r1, r5
   25210:	4620      	mov	r0, r4
   25212:	f014 fc29 	bl	39a68 <psa_generate_random>
	int err = EINVAL;
   25216:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   25218:	bf18      	it	ne
   2521a:	2016      	movne	r0, #22
   2521c:	bd38      	pop	{r3, r4, r5, pc}
   2521e:	bf00      	nop
   25220:	00045113 	.word	0x00045113
   25224:	00044263 	.word	0x00044263

00025228 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   25228:	2301      	movs	r3, #1
   2522a:	4083      	lsls	r3, r0
{
   2522c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2522e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25230:	4a0c      	ldr	r2, [pc, #48]	; (25264 <compare_int_lock+0x3c>)
   25232:	e8d2 1fef 	ldaex	r1, [r2]
   25236:	ea01 0c04 	and.w	ip, r1, r4
   2523a:	e8c2 cfee 	stlex	lr, ip, [r2]
   2523e:	f1be 0f00 	cmp.w	lr, #0
   25242:	d1f6      	bne.n	25232 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   25244:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25248:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   2524c:	4a06      	ldr	r2, [pc, #24]	; (25268 <compare_int_lock+0x40>)
   2524e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   25252:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   25256:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   2525a:	420b      	tst	r3, r1
}
   2525c:	bf14      	ite	ne
   2525e:	2001      	movne	r0, #1
   25260:	2000      	moveq	r0, #0
   25262:	bd10      	pop	{r4, pc}
   25264:	2001928c 	.word	0x2001928c
   25268:	40015000 	.word	0x40015000

0002526c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2526c:	4919      	ldr	r1, [pc, #100]	; (252d4 <sys_clock_timeout_handler+0x68>)
{
   2526e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25270:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   25272:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   25276:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   25278:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   2527c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   25280:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   25282:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   25286:	d222      	bcs.n	252ce <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   25288:	4b13      	ldr	r3, [pc, #76]	; (252d8 <sys_clock_timeout_handler+0x6c>)
   2528a:	681b      	ldr	r3, [r3, #0]
   2528c:	0a1a      	lsrs	r2, r3, #8
   2528e:	061b      	lsls	r3, r3, #24
   25290:	195e      	adds	r6, r3, r5
   25292:	4b12      	ldr	r3, [pc, #72]	; (252dc <sys_clock_timeout_handler+0x70>)
   25294:	f142 0700 	adc.w	r7, r2, #0
   25298:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   2529c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   2529e:	f013 fd89 	bl	38db4 <sys_clock_announce>
    return p_reg->CC[ch];
   252a2:	00a3      	lsls	r3, r4, #2
   252a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   252a8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   252ac:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   252b0:	42aa      	cmp	r2, r5
   252b2:	d10b      	bne.n	252cc <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   252b4:	b91e      	cbnz	r6, 252be <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   252b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   252ba:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   252be:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   252c2:	4b07      	ldr	r3, [pc, #28]	; (252e0 <sys_clock_timeout_handler+0x74>)
   252c4:	fa00 f404 	lsl.w	r4, r0, r4
   252c8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   252cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   252ce:	2600      	movs	r6, #0
   252d0:	e7e5      	b.n	2529e <sys_clock_timeout_handler+0x32>
   252d2:	bf00      	nop
   252d4:	200153e8 	.word	0x200153e8
   252d8:	20019290 	.word	0x20019290
   252dc:	200153d0 	.word	0x200153d0
   252e0:	40015000 	.word	0x40015000

000252e4 <compare_int_unlock>:
	if (key) {
   252e4:	b1e1      	cbz	r1, 25320 <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
   252e6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   252e8:	4a0e      	ldr	r2, [pc, #56]	; (25324 <compare_int_unlock+0x40>)
   252ea:	4083      	lsls	r3, r0
   252ec:	e8d2 1fef 	ldaex	r1, [r2]
   252f0:	4319      	orrs	r1, r3
   252f2:	e8c2 1fec 	stlex	ip, r1, [r2]
   252f6:	f1bc 0f00 	cmp.w	ip, #0
   252fa:	d1f7      	bne.n	252ec <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   252fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   25300:	4a09      	ldr	r2, [pc, #36]	; (25328 <compare_int_unlock+0x44>)
   25302:	4083      	lsls	r3, r0
   25304:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25308:	4b08      	ldr	r3, [pc, #32]	; (2532c <compare_int_unlock+0x48>)
   2530a:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2530e:	fa23 f000 	lsr.w	r0, r3, r0
   25312:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25314:	bf42      	ittt	mi
   25316:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   2531a:	4b05      	ldrmi	r3, [pc, #20]	; (25330 <compare_int_unlock+0x4c>)
   2531c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   25320:	4770      	bx	lr
   25322:	bf00      	nop
   25324:	2001928c 	.word	0x2001928c
   25328:	40015000 	.word	0x40015000
   2532c:	20019288 	.word	0x20019288
   25330:	e000e100 	.word	0xe000e100

00025334 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   25334:	4b0d      	ldr	r3, [pc, #52]	; (2536c <z_nrf_rtc_timer_read+0x38>)
   25336:	6818      	ldr	r0, [r3, #0]
   25338:	0a01      	lsrs	r1, r0, #8
   2533a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2533c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   25340:	4b0b      	ldr	r3, [pc, #44]	; (25370 <z_nrf_rtc_timer_read+0x3c>)
   25342:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   25346:	1818      	adds	r0, r3, r0
   25348:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2534c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   25350:	d20a      	bcs.n	25368 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   25352:	4b08      	ldr	r3, [pc, #32]	; (25374 <z_nrf_rtc_timer_read+0x40>)
   25354:	e9d3 2300 	ldrd	r2, r3, [r3]
   25358:	4290      	cmp	r0, r2
   2535a:	eb71 0303 	sbcs.w	r3, r1, r3
   2535e:	d203      	bcs.n	25368 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   25360:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   25364:	f141 0100 	adc.w	r1, r1, #0
}
   25368:	4770      	bx	lr
   2536a:	bf00      	nop
   2536c:	20019290 	.word	0x20019290
   25370:	40015000 	.word	0x40015000
   25374:	200153d0 	.word	0x200153d0

00025378 <compare_set>:
{
   25378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2537c:	ed2d 8b02 	vpush	{d8}
   25380:	b085      	sub	sp, #20
   25382:	4616      	mov	r6, r2
   25384:	4698      	mov	r8, r3
   25386:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   25388:	f7ff ff4e 	bl	25228 <compare_int_lock>
   2538c:	ee08 0a10 	vmov	s16, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   25390:	f7ff ffd0 	bl	25334 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   25394:	42b0      	cmp	r0, r6
   25396:	eb71 0308 	sbcs.w	r3, r1, r8
   2539a:	d279      	bcs.n	25490 <compare_set+0x118>
		if (target_time - curr_time > COUNTER_SPAN) {
   2539c:	4b44      	ldr	r3, [pc, #272]	; (254b0 <compare_set+0x138>)
   2539e:	1a30      	subs	r0, r6, r0
   253a0:	eb68 0101 	sbc.w	r1, r8, r1
   253a4:	4298      	cmp	r0, r3
   253a6:	f171 0300 	sbcs.w	r3, r1, #0
   253aa:	d27e      	bcs.n	254aa <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   253ac:	4b41      	ldr	r3, [pc, #260]	; (254b4 <compare_set+0x13c>)
   253ae:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   253b2:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   253b6:	45d8      	cmp	r8, fp
   253b8:	bf08      	it	eq
   253ba:	4556      	cmpeq	r6, sl
   253bc:	d050      	beq.n	25460 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   253be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   253c2:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   253c6:	4614      	mov	r4, r2
   253c8:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   253cc:	f105 0750 	add.w	r7, r5, #80	; 0x50
   253d0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   253d4:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   253d6:	40ab      	lsls	r3, r5
   253d8:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   253dc:	b2bf      	uxth	r7, r7
   253de:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   253e2:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   253e4:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   253e8:	4b33      	ldr	r3, [pc, #204]	; (254b8 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   253ea:	f507 37a8 	add.w	r7, r7, #86016	; 0x15000
     return p_reg->COUNTER;
   253ee:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   253f2:	1a40      	subs	r0, r0, r1
   253f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   253f8:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   253fc:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   253fe:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   25402:	d107      	bne.n	25414 <compare_set+0x9c>
   25404:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   25408:	2013      	movs	r0, #19
   2540a:	f01b ff6c 	bl	412e6 <z_impl_k_busy_wait>
   2540e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   25412:	4b29      	ldr	r3, [pc, #164]	; (254b8 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   25414:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   25418:	eba4 000c 	sub.w	r0, r4, ip
   2541c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   25420:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25424:	bf88      	it	hi
   25426:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25428:	2000      	movs	r0, #0
   2542a:	6038      	str	r0, [r7, #0]
   2542c:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   2542e:	9801      	ldr	r0, [sp, #4]
   25430:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   25434:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   25438:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   2543c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   25440:	4281      	cmp	r1, r0
   25442:	d006      	beq.n	25452 <compare_set+0xda>
	return (a - b) & COUNTER_MAX;
   25444:	1a20      	subs	r0, r4, r0
   25446:	3802      	subs	r0, #2
   25448:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   2544c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25450:	d81c      	bhi.n	2548c <compare_set+0x114>
	return (a - b) & COUNTER_MAX;
   25452:	1aa4      	subs	r4, r4, r2
   25454:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   25458:	eb14 0a06 	adds.w	sl, r4, r6
   2545c:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
   25460:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   25462:	4914      	ldr	r1, [pc, #80]	; (254b4 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   25464:	9810      	ldr	r0, [sp, #64]	; 0x40
	cc_data[chan].target_time = target_time;
   25466:	012b      	lsls	r3, r5, #4
   25468:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
   2546c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   2546e:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
   25472:	9b11      	ldr	r3, [sp, #68]	; 0x44
   25474:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   25476:	4628      	mov	r0, r5
   25478:	ee18 1a10 	vmov	r1, s16
   2547c:	f7ff ff32 	bl	252e4 <compare_int_unlock>
}
   25480:	4620      	mov	r0, r4
   25482:	b005      	add	sp, #20
   25484:	ecbd 8b02 	vpop	{d8}
   25488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2548c:	4620      	mov	r0, r4
   2548e:	e7ae      	b.n	253ee <compare_set+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
   25490:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25492:	4a0a      	ldr	r2, [pc, #40]	; (254bc <compare_set+0x144>)
   25494:	40ab      	lsls	r3, r5
   25496:	e8d2 1fef 	ldaex	r1, [r2]
   2549a:	4319      	orrs	r1, r3
   2549c:	e8c2 1fe0 	stlex	r0, r1, [r2]
   254a0:	2800      	cmp	r0, #0
   254a2:	d1f8      	bne.n	25496 <compare_set+0x11e>
   254a4:	46b2      	mov	sl, r6
   254a6:	46c3      	mov	fp, r8
   254a8:	e7da      	b.n	25460 <compare_set+0xe8>
			return -EINVAL;
   254aa:	f06f 0415 	mvn.w	r4, #21
   254ae:	e7e2      	b.n	25476 <compare_set+0xfe>
   254b0:	01000001 	.word	0x01000001
   254b4:	200153d8 	.word	0x200153d8
   254b8:	40015000 	.word	0x40015000
   254bc:	20019288 	.word	0x20019288

000254c0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   254c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   254c2:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   254c4:	f04f 30ff 	mov.w	r0, #4294967295
   254c8:	f04f 31ff 	mov.w	r1, #4294967295
   254cc:	4d16      	ldr	r5, [pc, #88]	; (25528 <sys_clock_driver_init+0x68>)
   254ce:	4b17      	ldr	r3, [pc, #92]	; (2552c <sys_clock_driver_init+0x6c>)
   254d0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   254d4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   254d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   254dc:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   254de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   254e2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   254e6:	4b12      	ldr	r3, [pc, #72]	; (25530 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   254e8:	2101      	movs	r1, #1
   254ea:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   254ee:	2015      	movs	r0, #21
   254f0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   254f4:	4622      	mov	r2, r4
   254f6:	f7fd fbeb 	bl	22cd0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   254fa:	2015      	movs	r0, #21
   254fc:	f7fd fbb6 	bl	22c6c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   25500:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   25502:	4a0c      	ldr	r2, [pc, #48]	; (25534 <sys_clock_driver_init+0x74>)
   25504:	60ab      	str	r3, [r5, #8]
   25506:	602b      	str	r3, [r5, #0]
   25508:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   2550a:	4b0b      	ldr	r3, [pc, #44]	; (25538 <sys_clock_driver_init+0x78>)
   2550c:	4a0b      	ldr	r2, [pc, #44]	; (2553c <sys_clock_driver_init+0x7c>)
   2550e:	9300      	str	r3, [sp, #0]
   25510:	4620      	mov	r0, r4
   25512:	2300      	movs	r3, #0
   25514:	9401      	str	r4, [sp, #4]
   25516:	f7ff ff2f 	bl	25378 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   2551a:	4630      	mov	r0, r6
   2551c:	f7ff f802 	bl	24524 <z_nrf_clock_control_lf_on>

	return 0;
}
   25520:	4620      	mov	r0, r4
   25522:	b002      	add	sp, #8
   25524:	bd70      	pop	{r4, r5, r6, pc}
   25526:	bf00      	nop
   25528:	40015000 	.word	0x40015000
   2552c:	200153d8 	.word	0x200153d8
   25530:	e000e100 	.word	0xe000e100
   25534:	2001928c 	.word	0x2001928c
   25538:	0002526d 	.word	0x0002526d
   2553c:	007fffff 	.word	0x007fffff

00025540 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   25540:	4b35      	ldr	r3, [pc, #212]	; (25618 <rtc_nrf_isr+0xd8>)
{
   25542:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25546:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2554a:	0791      	lsls	r1, r2, #30
   2554c:	d50b      	bpl.n	25566 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2554e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   25552:	b142      	cbz	r2, 25566 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25554:	2200      	movs	r2, #0
   25556:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   2555a:	4a30      	ldr	r2, [pc, #192]	; (2561c <rtc_nrf_isr+0xdc>)
   2555c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   25560:	6813      	ldr	r3, [r2, #0]
   25562:	3301      	adds	r3, #1
   25564:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   25566:	f04f 0320 	mov.w	r3, #32
   2556a:	f3ef 8111 	mrs	r1, BASEPRI
   2556e:	f383 8812 	msr	BASEPRI_MAX, r3
   25572:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   25576:	4b28      	ldr	r3, [pc, #160]	; (25618 <rtc_nrf_isr+0xd8>)
   25578:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   2557c:	03d2      	lsls	r2, r2, #15
   2557e:	d50d      	bpl.n	2559c <rtc_nrf_isr+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25580:	4a27      	ldr	r2, [pc, #156]	; (25620 <rtc_nrf_isr+0xe0>)
   25582:	e8d2 0fef 	ldaex	r0, [r2]
   25586:	f020 0401 	bic.w	r4, r0, #1
   2558a:	e8c2 4fe5 	stlex	r5, r4, [r2]
   2558e:	2d00      	cmp	r5, #0
   25590:	d1f7      	bne.n	25582 <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   25592:	2800      	cmp	r0, #0
   25594:	d136      	bne.n	25604 <rtc_nrf_isr+0xc4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25596:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
   2559a:	bb9a      	cbnz	r2, 25604 <rtc_nrf_isr+0xc4>
{
   2559c:	2300      	movs	r3, #0
	__asm__ volatile(
   2559e:	f381 8811 	msr	BASEPRI, r1
   255a2:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   255a6:	b353      	cbz	r3, 255fe <rtc_nrf_isr+0xbe>
		curr_time = z_nrf_rtc_timer_read();
   255a8:	f7ff fec4 	bl	25334 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   255ac:	f04f 0320 	mov.w	r3, #32
   255b0:	f3ef 8711 	mrs	r7, BASEPRI
   255b4:	f383 8812 	msr	BASEPRI_MAX, r3
   255b8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   255bc:	4b19      	ldr	r3, [pc, #100]	; (25624 <rtc_nrf_isr+0xe4>)
   255be:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
   255c2:	42a0      	cmp	r0, r4
   255c4:	eb71 0205 	sbcs.w	r2, r1, r5
   255c8:	f04f 0200 	mov.w	r2, #0
   255cc:	d321      	bcc.n	25612 <rtc_nrf_isr+0xd2>
			user_context = cc_data[chan].user_context;
   255ce:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   255d2:	f04f 38ff 	mov.w	r8, #4294967295
   255d6:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   255da:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   255dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   255e0:	e9c3 8902 	strd	r8, r9, [r3, #8]
   255e4:	4b0c      	ldr	r3, [pc, #48]	; (25618 <rtc_nrf_isr+0xd8>)
   255e6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
   255ea:	f387 8811 	msr	BASEPRI, r7
   255ee:	f3bf 8f6f 	isb	sy
		if (handler) {
   255f2:	b121      	cbz	r1, 255fe <rtc_nrf_isr+0xbe>
			handler(chan, expire_time, user_context);
   255f4:	4622      	mov	r2, r4
   255f6:	462b      	mov	r3, r5
   255f8:	2000      	movs	r0, #0
   255fa:	9600      	str	r6, [sp, #0]
   255fc:	4788      	blx	r1
}
   255fe:	b003      	add	sp, #12
   25600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25604:	2200      	movs	r2, #0
   25606:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
   2560a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   2560e:	2301      	movs	r3, #1
}
   25610:	e7c5      	b.n	2559e <rtc_nrf_isr+0x5e>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   25612:	4611      	mov	r1, r2
   25614:	e7e9      	b.n	255ea <rtc_nrf_isr+0xaa>
   25616:	bf00      	nop
   25618:	40015000 	.word	0x40015000
   2561c:	20019290 	.word	0x20019290
   25620:	20019288 	.word	0x20019288
   25624:	200153d8 	.word	0x200153d8

00025628 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   25628:	1c43      	adds	r3, r0, #1
{
   2562a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2562c:	d020      	beq.n	25670 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2562e:	2801      	cmp	r0, #1
   25630:	dd20      	ble.n	25674 <sys_clock_set_timeout+0x4c>
   25632:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25636:	da1f      	bge.n	25678 <sys_clock_set_timeout+0x50>
   25638:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2563a:	f7ff fe7b 	bl	25334 <z_nrf_rtc_timer_read>
   2563e:	4b0f      	ldr	r3, [pc, #60]	; (2567c <sys_clock_set_timeout+0x54>)
   25640:	e9d3 1300 	ldrd	r1, r3, [r3]
   25644:	1a40      	subs	r0, r0, r1
		ticks = 0;
   25646:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2564a:	bf28      	it	cs
   2564c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2564e:	3001      	adds	r0, #1
   25650:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   25652:	480b      	ldr	r0, [pc, #44]	; (25680 <sys_clock_set_timeout+0x58>)
   25654:	4282      	cmp	r2, r0
   25656:	bf28      	it	cs
   25658:	4602      	movcs	r2, r0
   2565a:	2000      	movs	r0, #0
   2565c:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2565e:	4909      	ldr	r1, [pc, #36]	; (25684 <sys_clock_set_timeout+0x5c>)
   25660:	9001      	str	r0, [sp, #4]
   25662:	9100      	str	r1, [sp, #0]
   25664:	f143 0300 	adc.w	r3, r3, #0
   25668:	f7ff fe86 	bl	25378 <compare_set>
}
   2566c:	b002      	add	sp, #8
   2566e:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   25670:	4803      	ldr	r0, [pc, #12]	; (25680 <sys_clock_set_timeout+0x58>)
   25672:	e7e1      	b.n	25638 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   25674:	2400      	movs	r4, #0
   25676:	e7e0      	b.n	2563a <sys_clock_set_timeout+0x12>
   25678:	4c01      	ldr	r4, [pc, #4]	; (25680 <sys_clock_set_timeout+0x58>)
   2567a:	e7de      	b.n	2563a <sys_clock_set_timeout+0x12>
   2567c:	200153e8 	.word	0x200153e8
   25680:	007fffff 	.word	0x007fffff
   25684:	0002526d 	.word	0x0002526d

00025688 <sys_clock_elapsed>:
{
   25688:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2568a:	f7ff fe53 	bl	25334 <z_nrf_rtc_timer_read>
   2568e:	4b02      	ldr	r3, [pc, #8]	; (25698 <sys_clock_elapsed+0x10>)
   25690:	681b      	ldr	r3, [r3, #0]
}
   25692:	1ac0      	subs	r0, r0, r3
   25694:	bd08      	pop	{r3, pc}
   25696:	bf00      	nop
   25698:	200153e8 	.word	0x200153e8

0002569c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2569c:	6803      	ldr	r3, [r0, #0]
{
   2569e:	b510      	push	{r4, lr}
    switch (port)
   256a0:	095a      	lsrs	r2, r3, #5
   256a2:	bf0c      	ite	eq
   256a4:	f04f 32ff 	moveq.w	r2, #4294967295
   256a8:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   256aa:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   256ae:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   256b2:	07db      	lsls	r3, r3, #31
{
   256b4:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   256b6:	d40a      	bmi.n	256ce <nrf_gpio_pin_port_decode+0x32>
   256b8:	490e      	ldr	r1, [pc, #56]	; (256f4 <nrf_gpio_pin_port_decode+0x58>)
   256ba:	480f      	ldr	r0, [pc, #60]	; (256f8 <nrf_gpio_pin_port_decode+0x5c>)
   256bc:	f240 2229 	movw	r2, #553	; 0x229
   256c0:	f017 facb 	bl	3cc5a <assert_print>
   256c4:	f240 2129 	movw	r1, #553	; 0x229
   256c8:	480a      	ldr	r0, [pc, #40]	; (256f4 <nrf_gpio_pin_port_decode+0x58>)
   256ca:	f017 fabf 	bl	3cc4c <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   256ce:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   256d0:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   256d4:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   256d6:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   256d8:	d00a      	beq.n	256f0 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   256da:	4906      	ldr	r1, [pc, #24]	; (256f4 <nrf_gpio_pin_port_decode+0x58>)
   256dc:	4806      	ldr	r0, [pc, #24]	; (256f8 <nrf_gpio_pin_port_decode+0x5c>)
   256de:	f240 222e 	movw	r2, #558	; 0x22e
   256e2:	f017 faba 	bl	3cc5a <assert_print>
   256e6:	f240 212e 	movw	r1, #558	; 0x22e
   256ea:	4802      	ldr	r0, [pc, #8]	; (256f4 <nrf_gpio_pin_port_decode+0x58>)
   256ec:	f017 faae 	bl	3cc4c <assert_post_action>
}
   256f0:	4802      	ldr	r0, [pc, #8]	; (256fc <nrf_gpio_pin_port_decode+0x60>)
   256f2:	bd10      	pop	{r4, pc}
   256f4:	00044e46 	.word	0x00044e46
   256f8:	00044263 	.word	0x00044263
   256fc:	40842500 	.word	0x40842500

00025700 <nrf_modem_fault_handler>:
 */

#if defined CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault_info)
{
	LOG_ERR("Modem error: 0x%x, PC: 0x%x", fault_info->reason, fault_info->program_counter);
   25700:	e9d0 2300 	ldrd	r2, r3, [r0]
   25704:	2145      	movs	r1, #69	; 0x45
   25706:	4801      	ldr	r0, [pc, #4]	; (2570c <nrf_modem_fault_handler+0xc>)
   25708:	f017 bae1 	b.w	3ccce <z_log_minimal_printk>
   2570c:	00045151 	.word	0x00045151

00025710 <_nrf_modem_lib_init>:
{
   25710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!first_time_init) {
   25712:	4d21      	ldr	r5, [pc, #132]	; (25798 <_nrf_modem_lib_init+0x88>)
   25714:	4c21      	ldr	r4, [pc, #132]	; (2579c <_nrf_modem_lib_init+0x8c>)
   25716:	782b      	ldrb	r3, [r5, #0]
   25718:	b933      	cbnz	r3, 25728 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   2571a:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   2571e:	4820      	ldr	r0, [pc, #128]	; (257a0 <_nrf_modem_lib_init+0x90>)
   25720:	f01b fd25 	bl	4116e <z_impl_k_mutex_init>
		first_time_init = true;
   25724:	2301      	movs	r3, #1
   25726:	702b      	strb	r3, [r5, #0]
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   25728:	2200      	movs	r2, #0
   2572a:	202a      	movs	r0, #42	; 0x2a
   2572c:	4611      	mov	r1, r2
   2572e:	f7fd facf 	bl	22cd0 <z_arm_irq_priority_set>
	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   25732:	2100      	movs	r1, #0
   25734:	481b      	ldr	r0, [pc, #108]	; (257a4 <_nrf_modem_lib_init+0x94>)
   25736:	f010 fbb7 	bl	35ea8 <nrf_modem_init>
   2573a:	4f1b      	ldr	r7, [pc, #108]	; (257a8 <_nrf_modem_lib_init+0x98>)
   2573c:	6038      	str	r0, [r7, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   2573e:	f04f 32ff 	mov.w	r2, #4294967295
   25742:	f04f 33ff 	mov.w	r3, #4294967295
   25746:	4816      	ldr	r0, [pc, #88]	; (257a0 <_nrf_modem_lib_init+0x90>)
   25748:	f011 f950 	bl	369ec <z_impl_k_mutex_lock>
	return list->head;
   2574c:	6820      	ldr	r0, [r4, #0]
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   2574e:	b1d8      	cbz	r0, 25788 <_nrf_modem_lib_init+0x78>
	return node->next;
   25750:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   25752:	3004      	adds	r0, #4
   25754:	f011 fb9c 	bl	36e90 <z_impl_k_sem_give>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   25758:	b1b4      	cbz	r4, 25788 <_nrf_modem_lib_init+0x78>
   2575a:	4620      	mov	r0, r4
   2575c:	6824      	ldr	r4, [r4, #0]
   2575e:	e7f8      	b.n	25752 <_nrf_modem_lib_init+0x42>
		e->callback(init_ret, e->context);
   25760:	e9d4 3100 	ldrd	r3, r1, [r4]
   25764:	6838      	ldr	r0, [r7, #0]
   25766:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   25768:	3408      	adds	r4, #8
   2576a:	42b4      	cmp	r4, r6
   2576c:	d908      	bls.n	25780 <_nrf_modem_lib_init+0x70>
   2576e:	4629      	mov	r1, r5
   25770:	480e      	ldr	r0, [pc, #56]	; (257ac <_nrf_modem_lib_init+0x9c>)
   25772:	229b      	movs	r2, #155	; 0x9b
   25774:	f017 fa71 	bl	3cc5a <assert_print>
   25778:	219b      	movs	r1, #155	; 0x9b
   2577a:	4628      	mov	r0, r5
   2577c:	f017 fa66 	bl	3cc4c <assert_post_action>
   25780:	42b4      	cmp	r4, r6
   25782:	d3ed      	bcc.n	25760 <_nrf_modem_lib_init+0x50>
}
   25784:	2000      	movs	r0, #0
   25786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_mutex_unlock(mutex);
   25788:	4805      	ldr	r0, [pc, #20]	; (257a0 <_nrf_modem_lib_init+0x90>)
   2578a:	f011 fa01 	bl	36b90 <z_impl_k_mutex_unlock>
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   2578e:	4c08      	ldr	r4, [pc, #32]	; (257b0 <_nrf_modem_lib_init+0xa0>)
   25790:	4e08      	ldr	r6, [pc, #32]	; (257b4 <_nrf_modem_lib_init+0xa4>)
   25792:	4d09      	ldr	r5, [pc, #36]	; (257b8 <_nrf_modem_lib_init+0xa8>)
   25794:	e7e9      	b.n	2576a <_nrf_modem_lib_init+0x5a>
   25796:	bf00      	nop
   25798:	2001a5d4 	.word	0x2001a5d4
   2579c:	20019298 	.word	0x20019298
   257a0:	200192a0 	.word	0x200192a0
   257a4:	00042e28 	.word	0x00042e28
   257a8:	20019294 	.word	0x20019294
   257ac:	00044263 	.word	0x00044263
   257b0:	0004c210 	.word	0x0004c210
   257b4:	0004c228 	.word	0x0004c228
   257b8:	00045172 	.word	0x00045172

000257bc <nrf_modem_lib_get_init_ret>:
}
   257bc:	4b01      	ldr	r3, [pc, #4]	; (257c4 <nrf_modem_lib_get_init_ret+0x8>)
   257be:	6818      	ldr	r0, [r3, #0]
   257c0:	4770      	bx	lr
   257c2:	bf00      	nop
   257c4:	20019294 	.word	0x20019294

000257c8 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   257c8:	4b10      	ldr	r3, [pc, #64]	; (2580c <thread_monitor_entry_get+0x44>)
{
   257ca:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   257cc:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   257ce:	4b10      	ldr	r3, [pc, #64]	; (25810 <thread_monitor_entry_get+0x48>)
{
   257d0:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   257d2:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   257d4:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   257d6:	4618      	mov	r0, r3
   257d8:	461f      	mov	r7, r3
		if (entry->id == id) {
   257da:	6804      	ldr	r4, [r0, #0]
   257dc:	428c      	cmp	r4, r1
   257de:	d011      	beq.n	25804 <thread_monitor_entry_get+0x3c>
		} else if (entry->id == 0) {
   257e0:	b18c      	cbz	r4, 25806 <thread_monitor_entry_get+0x3e>
		entry_age = rpc_event_cnt - entry->cnt;
   257e2:	6844      	ldr	r4, [r0, #4]
   257e4:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   257e6:	42b4      	cmp	r4, r6
   257e8:	bfc8      	it	gt
   257ea:	4603      	movgt	r3, r0
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   257ec:	f100 0008 	add.w	r0, r0, #8
		if (entry_age > oldest_entry_age) {
   257f0:	bfc8      	it	gt
   257f2:	4626      	movgt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   257f4:	42b8      	cmp	r0, r7
   257f6:	d301      	bcc.n	257fc <thread_monitor_entry_get+0x34>
   257f8:	3d01      	subs	r5, #1
   257fa:	d1ee      	bne.n	257da <thread_monitor_entry_get+0x12>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   257fc:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   257fe:	3a01      	subs	r2, #1
	new_entry->id = id;
   25800:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   25802:	605a      	str	r2, [r3, #4]
}
   25804:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25806:	4603      	mov	r3, r0
   25808:	e7f8      	b.n	257fc <thread_monitor_entry_get+0x34>
   2580a:	bf00      	nop
   2580c:	20019318 	.word	0x20019318
   25810:	20019340 	.word	0x20019340

00025814 <on_init>:
	list->head = NULL;
   25814:	2000      	movs	r0, #0
   25816:	4b05      	ldr	r3, [pc, #20]	; (2582c <on_init+0x18>)
	list->tail = NULL;
   25818:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2581c:	4b04      	ldr	r3, [pc, #16]	; (25830 <on_init+0x1c>)
   2581e:	e8d3 2fef 	ldaex	r2, [r3]
   25822:	e8c3 0fe1 	stlex	r1, r0, [r3]
   25826:	2900      	cmp	r1, #0
   25828:	d1f9      	bne.n	2581e <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   2582a:	4770      	bx	lr
   2582c:	20019338 	.word	0x20019338
   25830:	20019318 	.word	0x20019318

00025834 <nrf_modem_os_timedwait>:
{
   25834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25838:	b088      	sub	sp, #32
   2583a:	460c      	mov	r4, r1
	if (!nrf_modem_is_initialized()) {
   2583c:	f01b fc57 	bl	410ee <nrf_modem_is_initialized>
   25840:	4681      	mov	r9, r0
   25842:	b920      	cbnz	r0, 2584e <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   25844:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   25848:	b008      	add	sp, #32
   2584a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   2584e:	f01b fd48 	bl	412e2 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   25852:	6823      	ldr	r3, [r4, #0]
   25854:	4605      	mov	r5, r0
   25856:	2b00      	cmp	r3, #0
   25858:	460f      	mov	r7, r1
   2585a:	d104      	bne.n	25866 <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   2585c:	f012 fe56 	bl	3850c <z_impl_k_yield>
		return -NRF_EAGAIN;
   25860:	f06f 000a 	mvn.w	r0, #10
   25864:	e7f0      	b.n	25848 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   25866:	bfbc      	itt	lt
   25868:	f04f 33ff 	movlt.w	r3, #4294967295
   2586c:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2586e:	2201      	movs	r2, #1
   25870:	2100      	movs	r1, #0
   25872:	a802      	add	r0, sp, #8
   25874:	f01b fc99 	bl	411aa <z_impl_k_sem_init>
   25878:	ae01      	add	r6, sp, #4
	__asm__ volatile(
   2587a:	f04f 0320 	mov.w	r3, #32
   2587e:	f3ef 8a11 	mrs	sl, BASEPRI
   25882:	f383 8812 	msr	BASEPRI_MAX, r3
   25886:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2588a:	f012 ff7d 	bl	38788 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   2588e:	f7ff ff9b 	bl	257c8 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   25892:	f8df 8120 	ldr.w	r8, [pc, #288]	; 259b4 <nrf_modem_os_timedwait+0x180>
   25896:	6843      	ldr	r3, [r0, #4]
   25898:	f8d8 2000 	ldr.w	r2, [r8]
   2589c:	4293      	cmp	r3, r2
   2589e:	f04f 0300 	mov.w	r3, #0
   258a2:	d107      	bne.n	258b4 <nrf_modem_os_timedwait+0x80>
	parent->next = child;
   258a4:	9301      	str	r3, [sp, #4]
	return list->tail;
   258a6:	4b42      	ldr	r3, [pc, #264]	; (259b0 <nrf_modem_os_timedwait+0x17c>)
   258a8:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   258aa:	2a00      	cmp	r2, #0
   258ac:	d170      	bne.n	25990 <nrf_modem_os_timedwait+0x15c>
	list->head = node;
   258ae:	e9c3 6600 	strd	r6, r6, [r3]
}
   258b2:	e001      	b.n	258b8 <nrf_modem_os_timedwait+0x84>
	bool allow_to_sleep = false;
   258b4:	4699      	mov	r9, r3
	entry->cnt = rpc_event_cnt;
   258b6:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   258b8:	f38a 8811 	msr	BASEPRI, sl
   258bc:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   258c0:	f1b9 0f00 	cmp.w	r9, #0
   258c4:	d062      	beq.n	2598c <nrf_modem_os_timedwait+0x158>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   258c6:	6823      	ldr	r3, [r4, #0]
   258c8:	1c5a      	adds	r2, r3, #1
   258ca:	d064      	beq.n	25996 <nrf_modem_os_timedwait+0x162>
			return ((t * to_hz + off) / from_hz);
   258cc:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   258d0:	f240 30e7 	movw	r0, #999	; 0x3e7
   258d4:	2100      	movs	r1, #0
   258d6:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   258da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   258de:	2300      	movs	r3, #0
   258e0:	fbcc 010e 	smlal	r0, r1, ip, lr
   258e4:	f7f7 fb00 	bl	1cee8 <__aeabi_uldivmod>
   258e8:	4602      	mov	r2, r0
   258ea:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   258ec:	a802      	add	r0, sp, #8
   258ee:	f011 fb0b 	bl	36f08 <z_impl_k_sem_take>
	__asm__ volatile(
   258f2:	f04f 0320 	mov.w	r3, #32
   258f6:	f3ef 8911 	mrs	r9, BASEPRI
   258fa:	f383 8812 	msr	BASEPRI_MAX, r3
   258fe:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25902:	2100      	movs	r1, #0
	return list->head;
   25904:	4a2a      	ldr	r2, [pc, #168]	; (259b0 <nrf_modem_os_timedwait+0x17c>)
   25906:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25908:	b15b      	cbz	r3, 25922 <nrf_modem_os_timedwait+0xee>
   2590a:	42b3      	cmp	r3, r6
   2590c:	d14c      	bne.n	259a8 <nrf_modem_os_timedwait+0x174>
	return node->next;
   2590e:	9801      	ldr	r0, [sp, #4]
	return list->tail;
   25910:	6856      	ldr	r6, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
   25912:	2900      	cmp	r1, #0
   25914:	d143      	bne.n	2599e <nrf_modem_os_timedwait+0x16a>
   25916:	429e      	cmp	r6, r3
	list->head = node;
   25918:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2591a:	d100      	bne.n	2591e <nrf_modem_os_timedwait+0xea>
	list->tail = node;
   2591c:	6050      	str	r0, [r2, #4]
	parent->next = child;
   2591e:	2300      	movs	r3, #0
   25920:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   25922:	f012 ff31 	bl	38788 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   25926:	f7ff ff4f 	bl	257c8 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   2592a:	f8d8 3000 	ldr.w	r3, [r8]
   2592e:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   25930:	f389 8811 	msr	BASEPRI, r9
   25934:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   25938:	f01b fbd9 	bl	410ee <nrf_modem_is_initialized>
   2593c:	2800      	cmp	r0, #0
   2593e:	d081      	beq.n	25844 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   25940:	6826      	ldr	r6, [r4, #0]
   25942:	1c73      	adds	r3, r6, #1
   25944:	d022      	beq.n	2598c <nrf_modem_os_timedwait+0x158>
	return z_impl_k_uptime_ticks();
   25946:	f01b fccc 	bl	412e2 <z_impl_k_uptime_ticks>
   2594a:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   2594e:	fba0 300e 	umull	r3, r0, r0, lr
   25952:	fba5 250e 	umull	r2, r5, r5, lr
   25956:	fb0e 0101 	mla	r1, lr, r1, r0
   2595a:	fb0e 5707 	mla	r7, lr, r7, r5
   2595e:	0bdb      	lsrs	r3, r3, #15
   25960:	0bd2      	lsrs	r2, r2, #15
   25962:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   25966:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
	delta = uptime - *reftime;
   2596a:	1a9b      	subs	r3, r3, r2
   2596c:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   25970:	eb61 31d7 	sbc.w	r1, r1, r7, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   25974:	ea4f 7ce6 	mov.w	ip, r6, asr #31
   25978:	1af3      	subs	r3, r6, r3
   2597a:	eb6c 0101 	sbc.w	r1, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   2597e:	2900      	cmp	r1, #0
   25980:	bfb8      	it	lt
   25982:	2300      	movlt	r3, #0
   25984:	6023      	str	r3, [r4, #0]
	if (*timeout == 0) {
   25986:	2b00      	cmp	r3, #0
   25988:	f43f af6a 	beq.w	25860 <nrf_modem_os_timedwait+0x2c>
	return 0;
   2598c:	2000      	movs	r0, #0
   2598e:	e75b      	b.n	25848 <nrf_modem_os_timedwait+0x14>
   25990:	6016      	str	r6, [r2, #0]
	list->tail = node;
   25992:	605e      	str	r6, [r3, #4]
}
   25994:	e790      	b.n	258b8 <nrf_modem_os_timedwait+0x84>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   25996:	f04f 32ff 	mov.w	r2, #4294967295
   2599a:	4613      	mov	r3, r2
   2599c:	e7a6      	b.n	258ec <nrf_modem_os_timedwait+0xb8>
Z_GENLIST_REMOVE(slist, snode)
   2599e:	429e      	cmp	r6, r3
	parent->next = child;
   259a0:	6008      	str	r0, [r1, #0]
	list->tail = node;
   259a2:	bf08      	it	eq
   259a4:	6051      	streq	r1, [r2, #4]
}
   259a6:	e7ba      	b.n	2591e <nrf_modem_os_timedwait+0xea>
	return node->next;
   259a8:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   259aa:	681b      	ldr	r3, [r3, #0]
   259ac:	e7ac      	b.n	25908 <nrf_modem_os_timedwait+0xd4>
   259ae:	bf00      	nop
   259b0:	20019338 	.word	0x20019338
   259b4:	20019318 	.word	0x20019318

000259b8 <nrf_modem_os_errno_set>:
{
   259b8:	b510      	push	{r4, lr}
	__ASSERT(err_code > 0, "Tried to set negative error code, %d", err_code);
   259ba:	1e04      	subs	r4, r0, #0
   259bc:	dc08      	bgt.n	259d0 <nrf_modem_os_errno_set+0x18>
   259be:	4906      	ldr	r1, [pc, #24]	; (259d8 <nrf_modem_os_errno_set+0x20>)
   259c0:	4806      	ldr	r0, [pc, #24]	; (259dc <nrf_modem_os_errno_set+0x24>)
   259c2:	22f1      	movs	r2, #241	; 0xf1
   259c4:	f017 f949 	bl	3cc5a <assert_print>
   259c8:	21f1      	movs	r1, #241	; 0xf1
   259ca:	4803      	ldr	r0, [pc, #12]	; (259d8 <nrf_modem_os_errno_set+0x20>)
   259cc:	f017 f93e 	bl	3cc4c <assert_post_action>
	errno = err_code;
   259d0:	f017 ffbc 	bl	3d94c <__errno>
   259d4:	6004      	str	r4, [r0, #0]
}
   259d6:	bd10      	pop	{r4, pc}
   259d8:	000451a4 	.word	0x000451a4
   259dc:	00044263 	.word	0x00044263

000259e0 <nrf_modem_os_sem_init>:
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   259e0:	6803      	ldr	r3, [r0, #0]
{
   259e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   259e6:	4604      	mov	r4, r0
   259e8:	460e      	mov	r6, r1
   259ea:	4617      	mov	r7, r2
   259ec:	4d14      	ldr	r5, [pc, #80]	; (25a40 <nrf_modem_os_sem_init+0x60>)
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   259ee:	b12b      	cbz	r3, 259fc <nrf_modem_os_sem_init+0x1c>
   259f0:	42ab      	cmp	r3, r5
   259f2:	d303      	bcc.n	259fc <nrf_modem_os_sem_init+0x1c>
   259f4:	f105 0260 	add.w	r2, r5, #96	; 0x60
   259f8:	4293      	cmp	r3, r2
   259fa:	d31a      	bcc.n	25a32 <nrf_modem_os_sem_init+0x52>
	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
   259fc:	f8df 804c 	ldr.w	r8, [pc, #76]	; 25a4c <nrf_modem_os_sem_init+0x6c>
   25a00:	f898 3000 	ldrb.w	r3, [r8]
   25a04:	2b03      	cmp	r3, #3
   25a06:	d90a      	bls.n	25a1e <nrf_modem_os_sem_init+0x3e>
   25a08:	490e      	ldr	r1, [pc, #56]	; (25a44 <nrf_modem_os_sem_init+0x64>)
   25a0a:	480f      	ldr	r0, [pc, #60]	; (25a48 <nrf_modem_os_sem_init+0x68>)
   25a0c:	f240 1205 	movw	r2, #261	; 0x105
   25a10:	f017 f923 	bl	3cc5a <assert_print>
   25a14:	f240 1105 	movw	r1, #261	; 0x105
   25a18:	480a      	ldr	r0, [pc, #40]	; (25a44 <nrf_modem_os_sem_init+0x64>)
   25a1a:	f017 f917 	bl	3cc4c <assert_post_action>
	*sem = &nrf_modem_os_sems[used++];
   25a1e:	f898 3000 	ldrb.w	r3, [r8]
   25a22:	1c5a      	adds	r2, r3, #1
   25a24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25a28:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   25a2c:	f888 2000 	strb.w	r2, [r8]
   25a30:	6025      	str	r5, [r4, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   25a32:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   25a34:	463a      	mov	r2, r7
   25a36:	4631      	mov	r1, r6
}
   25a38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25a3c:	f01b bbb5 	b.w	411aa <z_impl_k_sem_init>
   25a40:	200192b8 	.word	0x200192b8
   25a44:	000451a4 	.word	0x000451a4
   25a48:	00044263 	.word	0x00044263
   25a4c:	2001a5d5 	.word	0x2001a5d5

00025a50 <nrf_modem_os_sem_give>:
{
   25a50:	b510      	push	{r4, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   25a52:	4604      	mov	r4, r0
   25a54:	b128      	cbz	r0, 25a62 <nrf_modem_os_sem_give+0x12>
   25a56:	4b0b      	ldr	r3, [pc, #44]	; (25a84 <nrf_modem_os_sem_give+0x34>)
   25a58:	4298      	cmp	r0, r3
   25a5a:	d302      	bcc.n	25a62 <nrf_modem_os_sem_give+0x12>
   25a5c:	3360      	adds	r3, #96	; 0x60
   25a5e:	4298      	cmp	r0, r3
   25a60:	d30a      	bcc.n	25a78 <nrf_modem_os_sem_give+0x28>
   25a62:	4909      	ldr	r1, [pc, #36]	; (25a88 <nrf_modem_os_sem_give+0x38>)
   25a64:	4809      	ldr	r0, [pc, #36]	; (25a8c <nrf_modem_os_sem_give+0x3c>)
   25a66:	f44f 7288 	mov.w	r2, #272	; 0x110
   25a6a:	f017 f8f6 	bl	3cc5a <assert_print>
   25a6e:	f44f 7188 	mov.w	r1, #272	; 0x110
   25a72:	4805      	ldr	r0, [pc, #20]	; (25a88 <nrf_modem_os_sem_give+0x38>)
   25a74:	f017 f8ea 	bl	3cc4c <assert_post_action>
	z_impl_k_sem_give(sem);
   25a78:	4620      	mov	r0, r4
}
   25a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25a7e:	f011 ba07 	b.w	36e90 <z_impl_k_sem_give>
   25a82:	bf00      	nop
   25a84:	200192b8 	.word	0x200192b8
   25a88:	000451a4 	.word	0x000451a4
   25a8c:	00044263 	.word	0x00044263

00025a90 <nrf_modem_os_sem_take>:
{
   25a90:	b570      	push	{r4, r5, r6, lr}
   25a92:	460c      	mov	r4, r1
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   25a94:	4605      	mov	r5, r0
   25a96:	b128      	cbz	r0, 25aa4 <nrf_modem_os_sem_take+0x14>
   25a98:	4b17      	ldr	r3, [pc, #92]	; (25af8 <nrf_modem_os_sem_take+0x68>)
   25a9a:	4298      	cmp	r0, r3
   25a9c:	d302      	bcc.n	25aa4 <nrf_modem_os_sem_take+0x14>
   25a9e:	3360      	adds	r3, #96	; 0x60
   25aa0:	4298      	cmp	r0, r3
   25aa2:	d30a      	bcc.n	25aba <nrf_modem_os_sem_take+0x2a>
   25aa4:	4915      	ldr	r1, [pc, #84]	; (25afc <nrf_modem_os_sem_take+0x6c>)
   25aa6:	4816      	ldr	r0, [pc, #88]	; (25b00 <nrf_modem_os_sem_take+0x70>)
   25aa8:	f44f 728d 	mov.w	r2, #282	; 0x11a
   25aac:	f017 f8d5 	bl	3cc5a <assert_print>
   25ab0:	f44f 718d 	mov.w	r1, #282	; 0x11a
   25ab4:	4811      	ldr	r0, [pc, #68]	; (25afc <nrf_modem_os_sem_take+0x6c>)
   25ab6:	f017 f8c9 	bl	3cc4c <assert_post_action>
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   25aba:	1c63      	adds	r3, r4, #1
   25abc:	d017      	beq.n	25aee <nrf_modem_os_sem_take+0x5e>
   25abe:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   25ac2:	f240 30e7 	movw	r0, #999	; 0x3e7
   25ac6:	2100      	movs	r1, #0
   25ac8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   25acc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25ad0:	2300      	movs	r3, #0
   25ad2:	fbc4 0106 	smlal	r0, r1, r4, r6
   25ad6:	f7f7 fa07 	bl	1cee8 <__aeabi_uldivmod>
   25ada:	4602      	mov	r2, r0
   25adc:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   25ade:	4628      	mov	r0, r5
   25ae0:	f011 fa12 	bl	36f08 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   25ae4:	2800      	cmp	r0, #0
}
   25ae6:	bf18      	it	ne
   25ae8:	f06f 000a 	mvnne.w	r0, #10
   25aec:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   25aee:	f04f 32ff 	mov.w	r2, #4294967295
   25af2:	4613      	mov	r3, r2
   25af4:	e7f3      	b.n	25ade <nrf_modem_os_sem_take+0x4e>
   25af6:	bf00      	nop
   25af8:	200192b8 	.word	0x200192b8
   25afc:	000451a4 	.word	0x000451a4
   25b00:	00044263 	.word	0x00044263

00025b04 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   25b08:	4b01      	ldr	r3, [pc, #4]	; (25b10 <nrf_modem_os_application_irq_set+0xc>)
   25b0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   25b0e:	4770      	bx	lr
   25b10:	e000e100 	.word	0xe000e100

00025b14 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   25b18:	4b01      	ldr	r3, [pc, #4]	; (25b20 <nrf_modem_os_application_irq_clear+0xc>)
   25b1a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   25b1e:	4770      	bx	lr
   25b20:	e000e100 	.word	0xe000e100

00025b24 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25b24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   25b28:	4b01      	ldr	r3, [pc, #4]	; (25b30 <nrf_modem_os_trace_irq_set+0xc>)
   25b2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   25b2e:	4770      	bx	lr
   25b30:	e000e100 	.word	0xe000e100

00025b34 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25b34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   25b38:	4b01      	ldr	r3, [pc, #4]	; (25b40 <nrf_modem_os_trace_irq_clear+0xc>)
   25b3a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   25b3e:	4770      	bx	lr
   25b40:	e000e100 	.word	0xe000e100

00025b44 <nrf_modem_os_event_notify>:
{
   25b44:	b510      	push	{r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   25b46:	4b08      	ldr	r3, [pc, #32]	; (25b68 <nrf_modem_os_event_notify+0x24>)
   25b48:	e8d3 2fef 	ldaex	r2, [r3]
   25b4c:	3201      	adds	r2, #1
   25b4e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   25b52:	2900      	cmp	r1, #0
   25b54:	d1f8      	bne.n	25b48 <nrf_modem_os_event_notify+0x4>
	return list->head;
   25b56:	4b05      	ldr	r3, [pc, #20]	; (25b6c <nrf_modem_os_event_notify+0x28>)
   25b58:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   25b5a:	b124      	cbz	r4, 25b66 <nrf_modem_os_event_notify+0x22>
	z_impl_k_sem_give(sem);
   25b5c:	1d20      	adds	r0, r4, #4
   25b5e:	f011 f997 	bl	36e90 <z_impl_k_sem_give>
	return node->next;
   25b62:	6824      	ldr	r4, [r4, #0]
   25b64:	e7f9      	b.n	25b5a <nrf_modem_os_event_notify+0x16>
}
   25b66:	bd10      	pop	{r4, pc}
   25b68:	20019318 	.word	0x20019318
   25b6c:	20019338 	.word	0x20019338

00025b70 <nrf_modem_os_alloc>:
{
   25b70:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   25b72:	2200      	movs	r2, #0
   25b74:	2300      	movs	r3, #0
   25b76:	4801      	ldr	r0, [pc, #4]	; (25b7c <nrf_modem_os_alloc+0xc>)
   25b78:	f01b bad3 	b.w	41122 <k_heap_alloc>
   25b7c:	20014e98 	.word	0x20014e98

00025b80 <nrf_modem_os_free>:
{
   25b80:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   25b82:	4801      	ldr	r0, [pc, #4]	; (25b88 <nrf_modem_os_free+0x8>)
   25b84:	f010 bc2a 	b.w	363dc <k_heap_free>
   25b88:	20014e98 	.word	0x20014e98

00025b8c <nrf_modem_os_trace_alloc>:
{
   25b8c:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&trace_heap, bytes, K_NO_WAIT);
   25b8e:	2200      	movs	r2, #0
   25b90:	2300      	movs	r3, #0
   25b92:	4801      	ldr	r0, [pc, #4]	; (25b98 <nrf_modem_os_trace_alloc+0xc>)
   25b94:	f01b bac5 	b.w	41122 <k_heap_alloc>
   25b98:	20014eb0 	.word	0x20014eb0

00025b9c <nrf_modem_os_trace_free>:
{
   25b9c:	4601      	mov	r1, r0
	k_heap_free(&trace_heap, mem);
   25b9e:	4801      	ldr	r0, [pc, #4]	; (25ba4 <nrf_modem_os_trace_free+0x8>)
   25ba0:	f010 bc1c 	b.w	363dc <k_heap_free>
   25ba4:	20014eb0 	.word	0x20014eb0

00025ba8 <nrf_modem_os_shm_tx_alloc>:
{
   25ba8:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   25baa:	2200      	movs	r2, #0
   25bac:	2300      	movs	r3, #0
   25bae:	4801      	ldr	r0, [pc, #4]	; (25bb4 <nrf_modem_os_shm_tx_alloc+0xc>)
   25bb0:	f01b bab7 	b.w	41122 <k_heap_alloc>
   25bb4:	20019320 	.word	0x20019320

00025bb8 <nrf_modem_os_shm_tx_free>:
{
   25bb8:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   25bba:	4801      	ldr	r0, [pc, #4]	; (25bc0 <nrf_modem_os_shm_tx_free+0x8>)
   25bbc:	f010 bc0e 	b.w	363dc <k_heap_free>
   25bc0:	20019320 	.word	0x20019320

00025bc4 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   25bc4:	b508      	push	{r3, lr}
	read_task_create();
   25bc6:	f019 f9a0 	bl	3ef0a <read_task_create>
		LOG_ERR("nrf_modem_lib_trace_init failed with error %d.", err);
	}

#endif

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   25bca:	2300      	movs	r3, #0
   25bcc:	4a05      	ldr	r2, [pc, #20]	; (25be4 <nrf_modem_os_init+0x20>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   25bce:	4906      	ldr	r1, [pc, #24]	; (25be8 <nrf_modem_os_init+0x24>)
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   25bd0:	6013      	str	r3, [r2, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   25bd2:	4a06      	ldr	r2, [pc, #24]	; (25bec <nrf_modem_os_init+0x28>)
	k_heap_init(&shmem_heap,
   25bd4:	4806      	ldr	r0, [pc, #24]	; (25bf0 <nrf_modem_os_init+0x2c>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   25bd6:	6013      	str	r3, [r2, #0]
#ifdef CONFIG_NRF_MODEM_LIB_TRACE_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&trace_heap_task.work, diag_task);
	k_work_reschedule(&trace_heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_TRACE_HEAP_DUMP_PERIOD_MS));
#endif
}
   25bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&shmem_heap,
   25bdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   25be0:	f01b ba96 	b.w	41110 <k_heap_init>
   25be4:	200192b4 	.word	0x200192b4
   25be8:	200104e8 	.word	0x200104e8
   25bec:	2001931c 	.word	0x2001931c
   25bf0:	20019320 	.word	0x20019320

00025bf4 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   25bf4:	2801      	cmp	r0, #1
   25bf6:	d021      	beq.n	25c3c <z_to_nrf_optname+0x48>
   25bf8:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   25bfc:	d126      	bne.n	25c4c <z_to_nrf_optname+0x58>
	case SOL_TLS:
		switch (z_in_optname) {
   25bfe:	3901      	subs	r1, #1
   25c00:	290b      	cmp	r1, #11
   25c02:	d823      	bhi.n	25c4c <z_to_nrf_optname+0x58>
   25c04:	e8df f001 	tbb	[pc, r1]
   25c08:	0e0c0a06 	.word	0x0e0c0a06
   25c0c:	22221210 	.word	0x22221210
   25c10:	18161422 	.word	0x18161422
		case TLS_SEC_TAG_LIST:
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   25c14:	2302      	movs	r3, #2
			break;
		case TLS_HOSTNAME:
			*nrf_out_optname = NRF_SO_SEC_HOSTNAME;
   25c16:	6013      	str	r3, [r2, #0]
	int retval = 0;
   25c18:	2000      	movs	r0, #0
			break;
   25c1a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_HOSTNAME;
   25c1c:	2305      	movs	r3, #5
   25c1e:	e7fa      	b.n	25c16 <z_to_nrf_optname+0x22>
		case TLS_CIPHERSUITE_LIST:
			*nrf_out_optname = NRF_SO_SEC_CIPHERSUITE_LIST;
   25c20:	2306      	movs	r3, #6
   25c22:	e7f8      	b.n	25c16 <z_to_nrf_optname+0x22>
			break;
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_SEC_CIPHER_IN_USE;
   25c24:	2307      	movs	r3, #7
   25c26:	e7f6      	b.n	25c16 <z_to_nrf_optname+0x22>
			break;
		case TLS_PEER_VERIFY:
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   25c28:	2304      	movs	r3, #4
   25c2a:	e7f4      	b.n	25c16 <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_ROLE:
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   25c2c:	2301      	movs	r3, #1
   25c2e:	e7f2      	b.n	25c16 <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   25c30:	2303      	movs	r3, #3
   25c32:	e7f0      	b.n	25c16 <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE_PURGE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   25c34:	2309      	movs	r3, #9
   25c36:	e7ee      	b.n	25c16 <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_HANDSHAKE_TIMEO:
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   25c38:	2308      	movs	r3, #8
   25c3a:	e7ec      	b.n	25c16 <z_to_nrf_optname+0x22>
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   25c3c:	2937      	cmp	r1, #55	; 0x37
   25c3e:	dc05      	bgt.n	25c4c <z_to_nrf_optname+0x58>
   25c40:	2913      	cmp	r1, #19
   25c42:	dc06      	bgt.n	25c52 <z_to_nrf_optname+0x5e>
   25c44:	2902      	cmp	r1, #2
   25c46:	d059      	beq.n	25cfc <z_to_nrf_optname+0x108>
   25c48:	2904      	cmp	r1, #4
   25c4a:	d0ed      	beq.n	25c28 <z_to_nrf_optname+0x34>
   25c4c:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   25c50:	4770      	bx	lr
   25c52:	3914      	subs	r1, #20
   25c54:	2923      	cmp	r1, #35	; 0x23
   25c56:	d8f9      	bhi.n	25c4c <z_to_nrf_optname+0x58>
   25c58:	a301      	add	r3, pc, #4	; (adr r3, 25c60 <z_to_nrf_optname+0x6c>)
   25c5a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   25c5e:	bf00      	nop
   25c60:	00025cf1 	.word	0x00025cf1
   25c64:	00025cf5 	.word	0x00025cf5
   25c68:	00025c4d 	.word	0x00025c4d
   25c6c:	00025c4d 	.word	0x00025c4d
   25c70:	00025c4d 	.word	0x00025c4d
   25c74:	00025cf9 	.word	0x00025cf9
   25c78:	00025c4d 	.word	0x00025c4d
   25c7c:	00025c4d 	.word	0x00025c4d
   25c80:	00025c4d 	.word	0x00025c4d
   25c84:	00025c4d 	.word	0x00025c4d
   25c88:	00025d01 	.word	0x00025d01
   25c8c:	00025d05 	.word	0x00025d05
   25c90:	00025d09 	.word	0x00025d09
   25c94:	00025c4d 	.word	0x00025c4d
   25c98:	00025c4d 	.word	0x00025c4d
   25c9c:	00025c4d 	.word	0x00025c4d
   25ca0:	00025c4d 	.word	0x00025c4d
   25ca4:	00025c4d 	.word	0x00025c4d
   25ca8:	00025c4d 	.word	0x00025c4d
   25cac:	00025c4d 	.word	0x00025c4d
   25cb0:	00025c4d 	.word	0x00025c4d
   25cb4:	00025c4d 	.word	0x00025c4d
   25cb8:	00025c4d 	.word	0x00025c4d
   25cbc:	00025c4d 	.word	0x00025c4d
   25cc0:	00025c4d 	.word	0x00025c4d
   25cc4:	00025c4d 	.word	0x00025c4d
   25cc8:	00025c4d 	.word	0x00025c4d
   25ccc:	00025c4d 	.word	0x00025c4d
   25cd0:	00025c4d 	.word	0x00025c4d
   25cd4:	00025c4d 	.word	0x00025c4d
   25cd8:	00025d11 	.word	0x00025d11
   25cdc:	00025d15 	.word	0x00025d15
   25ce0:	00025d19 	.word	0x00025d19
   25ce4:	00025d1d 	.word	0x00025d1d
   25ce8:	00025d21 	.word	0x00025d21
   25cec:	00025d0d 	.word	0x00025d0d
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   25cf0:	2314      	movs	r3, #20
   25cf2:	e790      	b.n	25c16 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   25cf4:	2315      	movs	r3, #21
   25cf6:	e78e      	b.n	25c16 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   25cf8:	2319      	movs	r3, #25
   25cfa:	e78c      	b.n	25c16 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   25cfc:	6011      	str	r1, [r2, #0]
			break;
   25cfe:	e78b      	b.n	25c18 <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   25d00:	231e      	movs	r3, #30
   25d02:	e788      	b.n	25c16 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   25d04:	231f      	movs	r3, #31
   25d06:	e786      	b.n	25c16 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   25d08:	2320      	movs	r3, #32
   25d0a:	e784      	b.n	25c16 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   25d0c:	2337      	movs	r3, #55	; 0x37
   25d0e:	e782      	b.n	25c16 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_LAST;
   25d10:	2333      	movs	r3, #51	; 0x33
   25d12:	e780      	b.n	25c16 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   25d14:	2332      	movs	r3, #50	; 0x32
   25d16:	e77e      	b.n	25c16 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   25d18:	2334      	movs	r3, #52	; 0x34
   25d1a:	e77c      	b.n	25c16 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   25d1c:	2335      	movs	r3, #53	; 0x35
   25d1e:	e77a      	b.n	25c16 <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   25d20:	2336      	movs	r3, #54	; 0x36
   25d22:	e778      	b.n	25c16 <z_to_nrf_optname+0x22>

00025d24 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   25d24:	f04f 32ff 	mov.w	r2, #4294967295
   25d28:	4b05      	ldr	r3, [pc, #20]	; (25d40 <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   25d2a:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   25d2c:	601a      	str	r2, [r3, #0]
   25d2e:	609a      	str	r2, [r3, #8]
   25d30:	611a      	str	r2, [r3, #16]
   25d32:	619a      	str	r2, [r3, #24]
   25d34:	621a      	str	r2, [r3, #32]
   25d36:	629a      	str	r2, [r3, #40]	; 0x28
   25d38:	631a      	str	r2, [r3, #48]	; 0x30
   25d3a:	639a      	str	r2, [r3, #56]	; 0x38
}
   25d3c:	4770      	bx	lr
   25d3e:	bf00      	nop
   25d40:	20019394 	.word	0x20019394

00025d44 <nrf91_socket_offload_ioctl>:
{
   25d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   25d48:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
{
   25d4c:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   25d4e:	2b03      	cmp	r3, #3
   25d50:	d878      	bhi.n	25e44 <nrf91_socket_offload_ioctl+0x100>
   25d52:	e8df f003 	tbb	[pc, r3]
   25d56:	0294      	.short	0x0294
   25d58:	7308      	.short	0x7308
   25d5a:	f06f 045e 	mvn.w	r4, #94	; 0x5e
}
   25d5e:	4620      	mov	r0, r4
   25d60:	b011      	add	sp, #68	; 0x44
   25d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   25d66:	f04f 0a00 	mov.w	sl, #0
		nfds = va_arg(args, int);
   25d6a:	e9d2 9800 	ldrd	r9, r8, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   25d6e:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   25d70:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   25d74:	4668      	mov	r0, sp
   25d76:	2240      	movs	r2, #64	; 0x40
   25d78:	f01b fc43 	bl	41602 <memset>
	for (int i = 0; i < nfds; i++) {
   25d7c:	466e      	mov	r6, sp
   25d7e:	464d      	mov	r5, r9
   25d80:	464f      	mov	r7, r9
	int retval = 0;
   25d82:	4654      	mov	r4, sl
		tmp[i].events = 0;
   25d84:	4653      	mov	r3, sl
			obj = z_get_fd_obj(fds[i].fd,
   25d86:	493f      	ldr	r1, [pc, #252]	; (25e84 <nrf91_socket_offload_ioctl+0x140>)
	for (int i = 0; i < nfds; i++) {
   25d88:	45d0      	cmp	r8, sl
   25d8a:	dc0a      	bgt.n	25da2 <nrf91_socket_offload_ioctl+0x5e>
	if (retval > 0) {
   25d8c:	2c00      	cmp	r4, #0
   25d8e:	d1e6      	bne.n	25d5e <nrf91_socket_offload_ioctl+0x1a>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   25d90:	465a      	mov	r2, fp
   25d92:	4641      	mov	r1, r8
   25d94:	4668      	mov	r0, sp
   25d96:	f01b f850 	bl	40e3a <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   25d9a:	45a0      	cmp	r8, r4
   25d9c:	dc26      	bgt.n	25dec <nrf91_socket_offload_ioctl+0xa8>
	return retval;
   25d9e:	4604      	mov	r4, r0
		return nrf91_socket_offload_poll(fds, nfds, timeout);
   25da0:	e7dd      	b.n	25d5e <nrf91_socket_offload_ioctl+0x1a>
		if (fds[i].fd < 0) {
   25da2:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   25da4:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   25da6:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   25da8:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   25daa:	da05      	bge.n	25db8 <nrf91_socket_offload_ioctl+0x74>
			tmp[i].fd = fds[i].fd;
   25dac:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   25dae:	f10a 0a01 	add.w	sl, sl, #1
   25db2:	3608      	adds	r6, #8
   25db4:	3708      	adds	r7, #8
   25db6:	e7e7      	b.n	25d88 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   25db8:	2286      	movs	r2, #134	; 0x86
   25dba:	f7fa feb9 	bl	20b30 <z_get_fd_obj>
			if (obj != NULL) {
   25dbe:	2300      	movs	r3, #0
   25dc0:	4930      	ldr	r1, [pc, #192]	; (25e84 <nrf91_socket_offload_ioctl+0x140>)
   25dc2:	b178      	cbz	r0, 25de4 <nrf91_socket_offload_ioctl+0xa0>
				tmp[i].fd = OBJ_TO_SD(obj);
   25dc4:	6802      	ldr	r2, [r0, #0]
   25dc6:	6032      	str	r2, [r6, #0]
		if (fds[i].events & POLLIN) {
   25dc8:	88b8      	ldrh	r0, [r7, #4]
   25dca:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   25dcc:	bf42      	ittt	mi
   25dce:	88b2      	ldrhmi	r2, [r6, #4]
   25dd0:	f042 0201 	orrmi.w	r2, r2, #1
   25dd4:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   25dd6:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   25dd8:	bf42      	ittt	mi
   25dda:	88b2      	ldrhmi	r2, [r6, #4]
   25ddc:	f042 0204 	orrmi.w	r2, r2, #4
   25de0:	80b2      	strhmi	r2, [r6, #4]
   25de2:	e7e4      	b.n	25dae <nrf91_socket_offload_ioctl+0x6a>
				fds[i].revents = POLLNVAL;
   25de4:	2220      	movs	r2, #32
				retval++;
   25de6:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   25de8:	80fa      	strh	r2, [r7, #6]
				retval++;
   25dea:	e7ed      	b.n	25dc8 <nrf91_socket_offload_ioctl+0x84>
		if (fds[i].fd < 0) {
   25dec:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
   25df0:	2b00      	cmp	r3, #0
   25df2:	db20      	blt.n	25e36 <nrf91_socket_offload_ioctl+0xf2>
		if (tmp[i].revents & NRF_POLLIN) {
   25df4:	eb0d 03c4 	add.w	r3, sp, r4, lsl #3
   25df8:	88db      	ldrh	r3, [r3, #6]
   25dfa:	07df      	lsls	r7, r3, #31
			fds[i].revents |= POLLIN;
   25dfc:	bf42      	ittt	mi
   25dfe:	88ea      	ldrhmi	r2, [r5, #6]
   25e00:	f042 0201 	orrmi.w	r2, r2, #1
   25e04:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   25e06:	075e      	lsls	r6, r3, #29
			fds[i].revents |= POLLOUT;
   25e08:	bf42      	ittt	mi
   25e0a:	88ea      	ldrhmi	r2, [r5, #6]
   25e0c:	f042 0204 	orrmi.w	r2, r2, #4
   25e10:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   25e12:	0719      	lsls	r1, r3, #28
			fds[i].revents |= POLLERR;
   25e14:	bf42      	ittt	mi
   25e16:	88ea      	ldrhmi	r2, [r5, #6]
   25e18:	f042 0208 	orrmi.w	r2, r2, #8
   25e1c:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   25e1e:	069a      	lsls	r2, r3, #26
			fds[i].revents |= POLLNVAL;
   25e20:	bf42      	ittt	mi
   25e22:	88ea      	ldrhmi	r2, [r5, #6]
   25e24:	f042 0220 	orrmi.w	r2, r2, #32
   25e28:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   25e2a:	06db      	lsls	r3, r3, #27
			fds[i].revents |= POLLHUP;
   25e2c:	bf42      	ittt	mi
   25e2e:	88eb      	ldrhmi	r3, [r5, #6]
   25e30:	f043 0310 	orrmi.w	r3, r3, #16
   25e34:	80eb      	strhmi	r3, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   25e36:	3401      	adds	r4, #1
   25e38:	3508      	adds	r5, #8
   25e3a:	e7ae      	b.n	25d9a <nrf91_socket_offload_ioctl+0x56>
		ctx->lock = va_arg(args, struct k_mutex *);
   25e3c:	6813      	ldr	r3, [r2, #0]
		return 0;
   25e3e:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   25e40:	6043      	str	r3, [r0, #4]
		return 0;
   25e42:	e78c      	b.n	25d5e <nrf91_socket_offload_ioctl+0x1a>
	switch (cmd) {
   25e44:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   25e46:	6800      	ldr	r0, [r0, #0]
	switch (cmd) {
   25e48:	d00b      	beq.n	25e62 <nrf91_socket_offload_ioctl+0x11e>
   25e4a:	2904      	cmp	r1, #4
   25e4c:	d110      	bne.n	25e70 <nrf91_socket_offload_ioctl+0x12c>
		flags = va_arg(args, int);
   25e4e:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   25e50:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   25e54:	d10c      	bne.n	25e70 <nrf91_socket_offload_ioctl+0x12c>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   25e56:	1392      	asrs	r2, r2, #14
}
   25e58:	b011      	add	sp, #68	; 0x44
   25e5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   25e5e:	f01b b881 	b.w	40f64 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   25e62:	2200      	movs	r2, #0
   25e64:	f01b f87e 	bl	40f64 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   25e68:	0380      	lsls	r0, r0, #14
   25e6a:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   25e6e:	e776      	b.n	25d5e <nrf91_socket_offload_ioctl+0x1a>
	errno = EINVAL;
   25e70:	f017 fd6c 	bl	3d94c <__errno>
   25e74:	2316      	movs	r3, #22
	return retval;
   25e76:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   25e7a:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   25e7c:	e76f      	b.n	25d5e <nrf91_socket_offload_ioctl+0x1a>
		return -EXDEV;
   25e7e:	f06f 0411 	mvn.w	r4, #17
   25e82:	e76c      	b.n	25d5e <nrf91_socket_offload_ioctl+0x1a>
   25e84:	00042e58 	.word	0x00042e58

00025e88 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   25e88:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   25e8a:	4b03      	ldr	r3, [pc, #12]	; (25e98 <nrf91_socket_iface_init+0x10>)
   25e8c:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   25e8e:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   25e90:	4802      	ldr	r0, [pc, #8]	; (25e9c <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   25e92:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   25e94:	f7fb bef0 	b.w	21c78 <socket_offload_dns_register>
   25e98:	20019390 	.word	0x20019390
   25e9c:	00042e50 	.word	0x00042e50

00025ea0 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   25ea0:	4b0c      	ldr	r3, [pc, #48]	; (25ed4 <nrf91_socket_is_supported+0x34>)
   25ea2:	781b      	ldrb	r3, [r3, #0]
   25ea4:	b98b      	cbnz	r3, 25eca <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   25ea6:	4b0c      	ldr	r3, [pc, #48]	; (25ed8 <nrf91_socket_is_supported+0x38>)
   25ea8:	781b      	ldrb	r3, [r3, #0]
   25eaa:	b183      	cbz	r3, 25ece <nrf91_socket_is_supported+0x2e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   25eac:	f5a2 7380 	sub.w	r3, r2, #256	; 0x100
   25eb0:	2b02      	cmp	r3, #2
   25eb2:	d908      	bls.n	25ec6 <nrf91_socket_is_supported+0x26>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   25eb4:	f5a2 7088 	sub.w	r0, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   25eb8:	2801      	cmp	r0, #1
   25eba:	bf8c      	ite	hi
   25ebc:	2000      	movhi	r0, #0
   25ebe:	2001      	movls	r0, #1
	if (tls_offload_disabled && proto_is_secure(proto)) {
   25ec0:	f080 0001 	eor.w	r0, r0, #1
   25ec4:	4770      	bx	lr
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   25ec6:	2001      	movs	r0, #1
   25ec8:	e7fa      	b.n	25ec0 <nrf91_socket_is_supported+0x20>
		return false;
   25eca:	2000      	movs	r0, #0
   25ecc:	4770      	bx	lr
	return true;
   25ece:	2001      	movs	r0, #1
}
   25ed0:	4770      	bx	lr
   25ed2:	bf00      	nop
   25ed4:	2001a656 	.word	0x2001a656
   25ed8:	2001a657 	.word	0x2001a657

00025edc <nrf91_socket_offload_getaddrinfo>:
{
   25edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ee0:	4614      	mov	r4, r2
   25ee2:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   25ee4:	2100      	movs	r1, #0
{
   25ee6:	b08b      	sub	sp, #44	; 0x2c
   25ee8:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   25eea:	2220      	movs	r2, #32
   25eec:	a802      	add	r0, sp, #8
{
   25eee:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   25ef0:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   25ef2:	f01b fb86 	bl	41602 <memset>
	if (hints != NULL) {
   25ef6:	b1fc      	cbz	r4, 25f38 <nrf91_socket_offload_getaddrinfo+0x5c>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   25ef8:	6862      	ldr	r2, [r4, #4]
		nrf_flags |= NRF_AI_NUMERICSERV;
   25efa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   25efe:	04d2      	lsls	r2, r2, #19
		nrf_flags |= NRF_AI_PDNSERV;
   25f00:	bf48      	it	mi
   25f02:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   25f06:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   25f08:	68e3      	ldr	r3, [r4, #12]
   25f0a:	9304      	str	r3, [sp, #16]
	family = z_to_nrf_family(z_in->ai_family);
   25f0c:	8923      	ldrh	r3, [r4, #8]
	switch (z_family) {
   25f0e:	2b03      	cmp	r3, #3
   25f10:	f200 80d5 	bhi.w	260be <nrf91_socket_offload_getaddrinfo+0x1e2>
   25f14:	4a6d      	ldr	r2, [pc, #436]	; (260cc <nrf91_socket_offload_getaddrinfo+0x1f0>)
   25f16:	56d3      	ldrsb	r3, [r2, r3]
	if (family == -EAFNOSUPPORT) {
   25f18:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   25f1c:	f000 80cf 	beq.w	260be <nrf91_socket_offload_getaddrinfo+0x1e2>
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   25f20:	6920      	ldr	r0, [r4, #16]
	nrf_out->ai_family = family;
   25f22:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   25f24:	f019 f80a 	bl	3ef3c <nrf_to_z_protocol>
   25f28:	9005      	str	r0, [sp, #20]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   25f2a:	307b      	adds	r0, #123	; 0x7b
   25f2c:	f000 80ca 	beq.w	260c4 <nrf91_socket_offload_getaddrinfo+0x1e8>
	if (z_in->ai_canonname != NULL) {
   25f30:	69e3      	ldr	r3, [r4, #28]
   25f32:	b103      	cbz	r3, 25f36 <nrf91_socket_offload_getaddrinfo+0x5a>
		nrf_out->ai_canonname = z_in->ai_canonname;
   25f34:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   25f36:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   25f38:	f04f 32ff 	mov.w	r2, #4294967295
   25f3c:	f04f 33ff 	mov.w	r3, #4294967295
   25f40:	4863      	ldr	r0, [pc, #396]	; (260d0 <nrf91_socket_offload_getaddrinfo+0x1f4>)
   25f42:	f019 f93f 	bl	3f1c4 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   25f46:	4622      	mov	r2, r4
   25f48:	4631      	mov	r1, r6
   25f4a:	4628      	mov	r0, r5
   25f4c:	ab01      	add	r3, sp, #4
   25f4e:	f00e fa0d 	bl	3436c <nrf_getaddrinfo>
	if (retval != 0) {
   25f52:	4604      	mov	r4, r0
   25f54:	2800      	cmp	r0, #0
   25f56:	d043      	beq.n	25fe0 <nrf91_socket_offload_getaddrinfo+0x104>
	switch (nrf_gai_err) {
   25f58:	f46f 7380 	mvn.w	r3, #256	; 0x100
   25f5c:	441c      	add	r4, r3
   25f5e:	2c14      	cmp	r4, #20
   25f60:	d830      	bhi.n	25fc4 <nrf91_socket_offload_getaddrinfo+0xe8>
   25f62:	e8df f004 	tbb	[pc, r4]
   25f66:	0ba9      	.short	0x0ba9
   25f68:	2f2f143a 	.word	0x2f2f143a
   25f6c:	2f2f2f2f 	.word	0x2f2f2f2f
   25f70:	172f2f2f 	.word	0x172f2f2f
   25f74:	23201d1a 	.word	0x23201d1a
   25f78:	2926      	.short	0x2926
   25f7a:	2c          	.byte	0x2c
   25f7b:	00          	.byte	0x00
   25f7c:	f06f 0402 	mvn.w	r4, #2
	k_mutex_unlock(&getaddrinfo_lock);
   25f80:	4853      	ldr	r0, [pc, #332]	; (260d0 <nrf91_socket_offload_getaddrinfo+0x1f4>)
   25f82:	f019 f921 	bl	3f1c8 <k_mutex_unlock.isra.0>
}
   25f86:	4620      	mov	r0, r4
   25f88:	b00b      	add	sp, #44	; 0x2c
   25f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return DNS_EAI_FAIL;
   25f8e:	f06f 0403 	mvn.w	r4, #3
   25f92:	e7f5      	b.n	25f80 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_FAMILY;
   25f94:	f06f 0405 	mvn.w	r4, #5
   25f98:	e7f2      	b.n	25f80 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_MEMORY;
   25f9a:	f06f 0409 	mvn.w	r4, #9
   25f9e:	e7ef      	b.n	25f80 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_NODATA;
   25fa0:	f06f 0404 	mvn.w	r4, #4
   25fa4:	e7ec      	b.n	25f80 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_NONAME;
   25fa6:	f06f 0401 	mvn.w	r4, #1
   25faa:	e7e9      	b.n	25f80 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SERVICE;
   25fac:	f06f 0407 	mvn.w	r4, #7
   25fb0:	e7e6      	b.n	25f80 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SOCKTYPE;
   25fb2:	f06f 0406 	mvn.w	r4, #6
   25fb6:	e7e3      	b.n	25f80 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_INPROGRESS;
   25fb8:	f06f 0463 	mvn.w	r4, #99	; 0x63
   25fbc:	e7e0      	b.n	25f80 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SYSTEM;
   25fbe:	f06f 040a 	mvn.w	r4, #10
   25fc2:	e7dd      	b.n	25f80 <nrf91_socket_offload_getaddrinfo+0xa4>
		__ASSERT(false, "Untranslated nrf_getaddrinfo() return value %d", nrf_gai_err);
   25fc4:	4943      	ldr	r1, [pc, #268]	; (260d4 <nrf91_socket_offload_getaddrinfo+0x1f8>)
   25fc6:	4844      	ldr	r0, [pc, #272]	; (260d8 <nrf91_socket_offload_getaddrinfo+0x1fc>)
   25fc8:	f240 12a5 	movw	r2, #421	; 0x1a5
   25fcc:	f016 fe45 	bl	3cc5a <assert_print>
   25fd0:	f240 11a5 	movw	r1, #421	; 0x1a5
   25fd4:	483f      	ldr	r0, [pc, #252]	; (260d4 <nrf91_socket_offload_getaddrinfo+0x1f8>)
   25fd6:	f016 fe39 	bl	3cc4c <assert_post_action>
		return -1;
   25fda:	f04f 34ff 	mov.w	r4, #4294967295
   25fde:	e7cf      	b.n	25f80 <nrf91_socket_offload_getaddrinfo+0xa4>
	struct zsock_addrinfo *latest_z_res = NULL;
   25fe0:	4681      	mov	r9, r0
	z_out->ai_next = NULL;
   25fe2:	4680      	mov	r8, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   25fe4:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   25fe6:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 260dc <nrf91_socket_offload_getaddrinfo+0x200>
   25fea:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   25fec:	b91e      	cbnz	r6, 25ff6 <nrf91_socket_offload_getaddrinfo+0x11a>
	nrf_freeaddrinfo(nrf_res);
   25fee:	9801      	ldr	r0, [sp, #4]
   25ff0:	f01a fb49 	bl	40686 <nrf_freeaddrinfo>
   25ff4:	e7c4      	b.n	25f80 <nrf91_socket_offload_getaddrinfo+0xa4>
					k_malloc(sizeof(struct zsock_addrinfo));
   25ff6:	2050      	movs	r0, #80	; 0x50
   25ff8:	f01b fa59 	bl	414ae <k_malloc>
		if (next_z_res == NULL) {
   25ffc:	4605      	mov	r5, r0
   25ffe:	2800      	cmp	r0, #0
   26000:	d049      	beq.n	26096 <nrf91_socket_offload_getaddrinfo+0x1ba>
	family = nrf_to_z_family(nrf_in->ai_family);
   26002:	f8d6 b004 	ldr.w	fp, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   26006:	68b3      	ldr	r3, [r6, #8]
   26008:	f1bb 0f05 	cmp.w	fp, #5
	z_out->ai_next = NULL;
   2600c:	f8c0 8000 	str.w	r8, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   26010:	f8c0 801c 	str.w	r8, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   26014:	f8c0 8004 	str.w	r8, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   26018:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   2601a:	d83f      	bhi.n	2609c <nrf91_socket_offload_getaddrinfo+0x1c0>
   2601c:	f91a 300b 	ldrsb.w	r3, [sl, fp]
	if (family == -EAFNOSUPPORT) {
   26020:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   26024:	d03a      	beq.n	2609c <nrf91_socket_offload_getaddrinfo+0x1c0>
	z_out->ai_family = family;
   26026:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   26028:	68f0      	ldr	r0, [r6, #12]
   2602a:	f018 ff87 	bl	3ef3c <nrf_to_z_protocol>
   2602e:	6128      	str	r0, [r5, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   26030:	307b      	adds	r0, #123	; 0x7b
   26032:	d107      	bne.n	26044 <nrf91_socket_offload_getaddrinfo+0x168>
		z_out->ai_addr = NULL;
   26034:	f8c5 8018 	str.w	r8, [r5, #24]
			k_free(next_z_res);
   26038:	4628      	mov	r0, r5
   2603a:	f01b fa31 	bl	414a0 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   2603e:	f06f 0406 	mvn.w	r4, #6
   26042:	e030      	b.n	260a6 <nrf91_socket_offload_getaddrinfo+0x1ca>
	if (nrf_in->ai_family == NRF_AF_INET) {
   26044:	f1bb 0f01 	cmp.w	fp, #1
   26048:	d114      	bne.n	26074 <nrf91_socket_offload_getaddrinfo+0x198>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   2604a:	2008      	movs	r0, #8
   2604c:	f01b fa2f 	bl	414ae <k_malloc>
   26050:	61a8      	str	r0, [r5, #24]
		if (z_out->ai_addr == NULL) {
   26052:	b1e8      	cbz	r0, 26090 <nrf91_socket_offload_getaddrinfo+0x1b4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   26054:	2308      	movs	r3, #8
   26056:	616b      	str	r3, [r5, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   26058:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   2605a:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2605c:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   2605e:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   26060:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   26064:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   26066:	f1b9 0f00 	cmp.w	r9, #0
   2606a:	d122      	bne.n	260b2 <nrf91_socket_offload_getaddrinfo+0x1d6>
			*res = next_z_res;
   2606c:	603d      	str	r5, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   2606e:	46a9      	mov	r9, r5
   26070:	69f6      	ldr	r6, [r6, #28]
   26072:	e7bb      	b.n	25fec <nrf91_socket_offload_getaddrinfo+0x110>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   26074:	f1bb 0f02 	cmp.w	fp, #2
   26078:	d1de      	bne.n	26038 <nrf91_socket_offload_getaddrinfo+0x15c>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   2607a:	2018      	movs	r0, #24
   2607c:	f01b fa17 	bl	414ae <k_malloc>
   26080:	61a8      	str	r0, [r5, #24]
		if (z_out->ai_addr == NULL) {
   26082:	b128      	cbz	r0, 26090 <nrf91_socket_offload_getaddrinfo+0x1b4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   26084:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   26086:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   26088:	616b      	str	r3, [r5, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   2608a:	f018 ffcd 	bl	3f028 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   2608e:	e7ea      	b.n	26066 <nrf91_socket_offload_getaddrinfo+0x18a>
			k_free(next_z_res);
   26090:	4628      	mov	r0, r5
   26092:	f01b fa05 	bl	414a0 <k_free>
			retval = DNS_EAI_MEMORY;
   26096:	f06f 0409 	mvn.w	r4, #9
   2609a:	e004      	b.n	260a6 <nrf91_socket_offload_getaddrinfo+0x1ca>
			k_free(next_z_res);
   2609c:	4628      	mov	r0, r5
   2609e:	f01b f9ff 	bl	414a0 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   260a2:	f06f 0408 	mvn.w	r4, #8
		nrf91_socket_offload_freeaddrinfo(*res);
   260a6:	6838      	ldr	r0, [r7, #0]
   260a8:	f018 ffb1 	bl	3f00e <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   260ac:	2300      	movs	r3, #0
   260ae:	603b      	str	r3, [r7, #0]
   260b0:	e79d      	b.n	25fee <nrf91_socket_offload_getaddrinfo+0x112>
			latest_z_res->ai_next = next_z_res;
   260b2:	f8c9 5000 	str.w	r5, [r9]
   260b6:	e7da      	b.n	2606e <nrf91_socket_offload_getaddrinfo+0x192>
		return DNS_EAI_ADDRFAMILY;
   260b8:	f06f 0408 	mvn.w	r4, #8
   260bc:	e760      	b.n	25f80 <nrf91_socket_offload_getaddrinfo+0xa4>
			return DNS_EAI_ADDRFAMILY;
   260be:	f06f 0408 	mvn.w	r4, #8
   260c2:	e760      	b.n	25f86 <nrf91_socket_offload_getaddrinfo+0xaa>
			return DNS_EAI_SOCKTYPE;
   260c4:	f06f 0406 	mvn.w	r4, #6
   260c8:	e75d      	b.n	25f86 <nrf91_socket_offload_getaddrinfo+0xaa>
   260ca:	bf00      	nop
   260cc:	0004521e 	.word	0x0004521e
   260d0:	20014f2c 	.word	0x20014f2c
   260d4:	000451df 	.word	0x000451df
   260d8:	00044263 	.word	0x00044263
   260dc:	00045222 	.word	0x00045222

000260e0 <nrf91_socket_offload_sendmsg>:
{
   260e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   260e4:	4680      	mov	r8, r0
   260e6:	4691      	mov	r9, r2
	if (msg == NULL) {
   260e8:	460c      	mov	r4, r1
   260ea:	b1f9      	cbz	r1, 2612c <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   260ec:	2300      	movs	r3, #0
	ssize_t len = 0;
   260ee:	461a      	mov	r2, r3
   260f0:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   260f2:	4298      	cmp	r0, r3
   260f4:	d124      	bne.n	26140 <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   260f6:	2a80      	cmp	r2, #128	; 0x80
   260f8:	d86d      	bhi.n	261d6 <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   260fa:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   260fc:	f04f 32ff 	mov.w	r2, #4294967295
   26100:	f04f 33ff 	mov.w	r3, #4294967295
   26104:	4836      	ldr	r0, [pc, #216]	; (261e0 <nrf91_socket_offload_sendmsg+0x100>)
   26106:	f019 f85d 	bl	3f1c4 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   2610a:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   2610c:	4e35      	ldr	r6, [pc, #212]	; (261e4 <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   2610e:	68e3      	ldr	r3, [r4, #12]
   26110:	429d      	cmp	r5, r3
   26112:	d31c      	bcc.n	2614e <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   26114:	2600      	movs	r6, #0
		ret = 0;
   26116:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   26118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 261e4 <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   2611c:	42b7      	cmp	r7, r6
   2611e:	dd01      	ble.n	26124 <nrf91_socket_offload_sendmsg+0x44>
   26120:	2d00      	cmp	r5, #0
   26122:	da25      	bge.n	26170 <nrf91_socket_offload_sendmsg+0x90>
		k_mutex_unlock(&sendmsg_lock);
   26124:	482e      	ldr	r0, [pc, #184]	; (261e0 <nrf91_socket_offload_sendmsg+0x100>)
   26126:	f019 f84f 	bl	3f1c8 <k_mutex_unlock.isra.0>
		return ret;
   2612a:	e005      	b.n	26138 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   2612c:	f017 fc0e 	bl	3d94c <__errno>
   26130:	2316      	movs	r3, #22
		return -1;
   26132:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   26136:	6003      	str	r3, [r0, #0]
}
   26138:	4628      	mov	r0, r5
   2613a:	b002      	add	sp, #8
   2613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   26140:	68a1      	ldr	r1, [r4, #8]
   26142:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   26146:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   26148:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   2614a:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   2614c:	e7d1      	b.n	260f2 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   2614e:	68a1      	ldr	r1, [r4, #8]
   26150:	19f0      	adds	r0, r6, r7
   26152:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   26156:	685a      	ldr	r2, [r3, #4]
   26158:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   2615c:	f01b fa31 	bl	415c2 <memcpy>
			len += msg->msg_iov[i].iov_len;
   26160:	68a3      	ldr	r3, [r4, #8]
   26162:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   26166:	4453      	add	r3, sl
   26168:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   2616a:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   2616c:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   2616e:	e7ce      	b.n	2610e <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   26170:	6863      	ldr	r3, [r4, #4]
   26172:	1bba      	subs	r2, r7, r6
   26174:	9301      	str	r3, [sp, #4]
   26176:	6823      	ldr	r3, [r4, #0]
   26178:	eb0a 0106 	add.w	r1, sl, r6
   2617c:	9300      	str	r3, [sp, #0]
   2617e:	4640      	mov	r0, r8
   26180:	464b      	mov	r3, r9
   26182:	f018 ff7e 	bl	3f082 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   26186:	1e05      	subs	r5, r0, #0
				offset += ret;
   26188:	bfc8      	it	gt
   2618a:	1976      	addgt	r6, r6, r5
   2618c:	e7c6      	b.n	2611c <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   2618e:	68a3      	ldr	r3, [r4, #8]
   26190:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   26194:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   26198:	685b      	ldr	r3, [r3, #4]
   2619a:	b133      	cbz	r3, 261aa <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   2619c:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   2619e:	68a3      	ldr	r3, [r4, #8]
   261a0:	eb03 020a 	add.w	r2, r3, sl
   261a4:	6852      	ldr	r2, [r2, #4]
   261a6:	4297      	cmp	r7, r2
   261a8:	d304      	bcc.n	261b4 <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   261aa:	3601      	adds	r6, #1
   261ac:	68e3      	ldr	r3, [r4, #12]
   261ae:	42b3      	cmp	r3, r6
   261b0:	d8ed      	bhi.n	2618e <nrf91_socket_offload_sendmsg+0xae>
   261b2:	e7c1      	b.n	26138 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   261b4:	f853 100a 	ldr.w	r1, [r3, sl]
   261b8:	6863      	ldr	r3, [r4, #4]
   261ba:	4439      	add	r1, r7
   261bc:	9301      	str	r3, [sp, #4]
   261be:	6823      	ldr	r3, [r4, #0]
   261c0:	4640      	mov	r0, r8
   261c2:	9300      	str	r3, [sp, #0]
   261c4:	1bd2      	subs	r2, r2, r7
   261c6:	464b      	mov	r3, r9
   261c8:	f018 ff5b 	bl	3f082 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   261cc:	1e01      	subs	r1, r0, #0
   261ce:	db05      	blt.n	261dc <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   261d0:	440f      	add	r7, r1
			len += ret;
   261d2:	440d      	add	r5, r1
   261d4:	e7e3      	b.n	2619e <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   261d6:	2600      	movs	r6, #0
	len = 0;
   261d8:	4635      	mov	r5, r6
   261da:	e7e7      	b.n	261ac <nrf91_socket_offload_sendmsg+0xcc>
   261dc:	460d      	mov	r5, r1
   261de:	e7ab      	b.n	26138 <nrf91_socket_offload_sendmsg+0x58>
   261e0:	20014f7c 	.word	0x20014f7c
   261e4:	2001a5d6 	.word	0x2001a5d6

000261e8 <allocate_ctx>:
{
   261e8:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   261ea:	f04f 32ff 	mov.w	r2, #4294967295
   261ee:	f04f 33ff 	mov.w	r3, #4294967295
{
   261f2:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   261f4:	480b      	ldr	r0, [pc, #44]	; (26224 <allocate_ctx+0x3c>)
   261f6:	f018 ffe5 	bl	3f1c4 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   261fa:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   261fc:	4a0a      	ldr	r2, [pc, #40]	; (26228 <allocate_ctx+0x40>)
   261fe:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   26202:	3101      	adds	r1, #1
   26204:	d108      	bne.n	26218 <allocate_ctx+0x30>
			ctx = &offload_ctx[i];
   26206:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   2620a:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   2620e:	4805      	ldr	r0, [pc, #20]	; (26224 <allocate_ctx+0x3c>)
   26210:	f018 ffda 	bl	3f1c8 <k_mutex_unlock.isra.0>
}
   26214:	4628      	mov	r0, r5
   26216:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   26218:	3301      	adds	r3, #1
   2621a:	2b08      	cmp	r3, #8
   2621c:	d1ef      	bne.n	261fe <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   2621e:	2500      	movs	r5, #0
   26220:	e7f5      	b.n	2620e <allocate_ctx+0x26>
   26222:	bf00      	nop
   26224:	20014f04 	.word	0x20014f04
   26228:	20019394 	.word	0x20019394

0002622c <release_ctx>:
{
   2622c:	b510      	push	{r4, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   2622e:	f04f 32ff 	mov.w	r2, #4294967295
{
   26232:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   26234:	f04f 33ff 	mov.w	r3, #4294967295
   26238:	4806      	ldr	r0, [pc, #24]	; (26254 <release_ctx+0x28>)
   2623a:	f018 ffc3 	bl	3f1c4 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   2623e:	f04f 32ff 	mov.w	r2, #4294967295
   26242:	2300      	movs	r3, #0
	k_mutex_unlock(&ctx_lock);
   26244:	4803      	ldr	r0, [pc, #12]	; (26254 <release_ctx+0x28>)
	ctx->lock = NULL;
   26246:	e9c4 2300 	strd	r2, r3, [r4]
}
   2624a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&ctx_lock);
   2624e:	f018 bfbb 	b.w	3f1c8 <k_mutex_unlock.isra.0>
   26252:	bf00      	nop
   26254:	20014f04 	.word	0x20014f04

00026258 <nrf91_socket_offload_accept>:
{
   26258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2625c:	b08b      	sub	sp, #44	; 0x2c
   2625e:	4607      	mov	r7, r0
   26260:	460c      	mov	r4, r1
   26262:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   26264:	f7fa fc96 	bl	20b94 <z_reserve_fd>
   26268:	4606      	mov	r6, r0
	if (fd < 0) {
   2626a:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   2626c:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   2626e:	db23      	blt.n	262b8 <nrf91_socket_offload_accept+0x60>
	if ((addr != NULL) && (addrlen != NULL)) {
   26270:	b32c      	cbz	r4, 262be <nrf91_socket_offload_accept+0x66>
   26272:	b33d      	cbz	r5, 262c4 <nrf91_socket_offload_accept+0x6c>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   26274:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   26276:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   26278:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   2627a:	bf0c      	ite	eq
   2627c:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   2627e:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   26280:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   26282:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   26284:	4639      	mov	r1, r7
   26286:	f01a fb24 	bl	408d2 <nrf_accept>
	if (new_sd < 0) {
   2628a:	f1b0 0900 	subs.w	r9, r0, #0
   2628e:	db3b      	blt.n	26308 <nrf91_socket_offload_accept+0xb0>
	ctx = allocate_ctx(new_sd);
   26290:	f7ff ffaa 	bl	261e8 <allocate_ctx>
	if (ctx == NULL) {
   26294:	4680      	mov	r8, r0
   26296:	b9c0      	cbnz	r0, 262ca <nrf91_socket_offload_accept+0x72>
		errno = ENOMEM;
   26298:	f017 fb58 	bl	3d94c <__errno>
   2629c:	230c      	movs	r3, #12
   2629e:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   262a0:	4648      	mov	r0, r9
   262a2:	f01a fa63 	bl	4076c <nrf_close>
	if (ctx != NULL) {
   262a6:	f1b8 0f00 	cmp.w	r8, #0
   262aa:	d002      	beq.n	262b2 <nrf91_socket_offload_accept+0x5a>
		release_ctx(ctx);
   262ac:	4640      	mov	r0, r8
   262ae:	f7ff ffbd 	bl	2622c <release_ctx>
	z_free_fd(fd);
   262b2:	4630      	mov	r0, r6
   262b4:	f7fa fcbe 	bl	20c34 <z_free_fd>
		return -1;
   262b8:	f04f 36ff 	mov.w	r6, #4294967295
   262bc:	e017      	b.n	262ee <nrf91_socket_offload_accept+0x96>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   262be:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   262c0:	4627      	mov	r7, r4
   262c2:	e7df      	b.n	26284 <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   262c4:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   262c6:	462f      	mov	r7, r5
   262c8:	e7dc      	b.n	26284 <nrf91_socket_offload_accept+0x2c>
	if ((addr != NULL) && (addrlen != NULL)) {
   262ca:	b15c      	cbz	r4, 262e4 <nrf91_socket_offload_accept+0x8c>
   262cc:	b155      	cbz	r5, 262e4 <nrf91_socket_offload_accept+0x8c>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   262ce:	687b      	ldr	r3, [r7, #4]
   262d0:	2b01      	cmp	r3, #1
   262d2:	d110      	bne.n	262f6 <nrf91_socket_offload_accept+0x9e>
			*addrlen = sizeof(struct sockaddr_in);
   262d4:	2208      	movs	r2, #8
   262d6:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   262d8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   262dc:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   262de:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   262e0:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   262e2:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   262e4:	4641      	mov	r1, r8
   262e6:	4630      	mov	r0, r6
   262e8:	4a0a      	ldr	r2, [pc, #40]	; (26314 <nrf91_socket_offload_accept+0xbc>)
   262ea:	f7fa fc89 	bl	20c00 <z_finalize_fd>
}
   262ee:	4630      	mov	r0, r6
   262f0:	b00b      	add	sp, #44	; 0x2c
   262f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   262f6:	2b02      	cmp	r3, #2
   262f8:	d1d2      	bne.n	262a0 <nrf91_socket_offload_accept+0x48>
			*addrlen = sizeof(struct sockaddr_in6);
   262fa:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   262fc:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   262fe:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   26300:	a901      	add	r1, sp, #4
   26302:	f018 fe91 	bl	3f028 <nrf_to_z_ipv6>
   26306:	e7ed      	b.n	262e4 <nrf91_socket_offload_accept+0x8c>
	if (new_sd != -1) {
   26308:	f1b9 3fff 	cmp.w	r9, #4294967295
   2630c:	d0d1      	beq.n	262b2 <nrf91_socket_offload_accept+0x5a>
	struct nrf_sock_ctx *ctx = NULL;
   2630e:	f04f 0800 	mov.w	r8, #0
   26312:	e7c5      	b.n	262a0 <nrf91_socket_offload_accept+0x48>
   26314:	00042e58 	.word	0x00042e58

00026318 <nrf91_socket_create>:
{
   26318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (type & SOCK_NATIVE) {
   2631a:	1e0e      	subs	r6, r1, #0
{
   2631c:	4605      	mov	r5, r0
   2631e:	9201      	str	r2, [sp, #4]
	if (type & SOCK_NATIVE) {
   26320:	da12      	bge.n	26348 <nrf91_socket_create+0x30>
	k_sched_lock();
   26322:	f011 fbab 	bl	37a7c <k_sched_lock>
	*offload_lock = true;
   26326:	4f28      	ldr	r7, [pc, #160]	; (263c8 <nrf91_socket_create+0xb0>)
   26328:	2301      	movs	r3, #1
   2632a:	703b      	strb	r3, [r7, #0]
	return z_impl_zsock_socket(family, type, proto);
   2632c:	4628      	mov	r0, r5
   2632e:	9a01      	ldr	r2, [sp, #4]
   26330:	f026 4140 	bic.w	r1, r6, #3221225472	; 0xc0000000
   26334:	f7fb fb48 	bl	219c8 <z_impl_zsock_socket>
	*offload_lock = false;
   26338:	2300      	movs	r3, #0
   2633a:	703b      	strb	r3, [r7, #0]
   2633c:	4604      	mov	r4, r0
	k_sched_unlock();
   2633e:	f012 f83f 	bl	383c0 <k_sched_unlock>
}
   26342:	4620      	mov	r0, r4
   26344:	b003      	add	sp, #12
   26346:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   26348:	0073      	lsls	r3, r6, #1
   2634a:	d503      	bpl.n	26354 <nrf91_socket_create+0x3c>
	k_sched_lock();
   2634c:	f011 fb96 	bl	37a7c <k_sched_lock>
	*offload_lock = true;
   26350:	4f1e      	ldr	r7, [pc, #120]	; (263cc <nrf91_socket_create+0xb4>)
   26352:	e7e9      	b.n	26328 <nrf91_socket_create+0x10>
	fd = z_reserve_fd();
   26354:	f7fa fc1e 	bl	20b94 <z_reserve_fd>
	if (fd < 0) {
   26358:	1e04      	subs	r4, r0, #0
   2635a:	db0f      	blt.n	2637c <nrf91_socket_create+0x64>
	family = z_to_nrf_family(family);
   2635c:	b2ad      	uxth	r5, r5
	switch (z_family) {
   2635e:	2d03      	cmp	r5, #3
   26360:	d805      	bhi.n	2636e <nrf91_socket_create+0x56>
   26362:	4b1b      	ldr	r3, [pc, #108]	; (263d0 <nrf91_socket_create+0xb8>)
	if (family == -EAFNOSUPPORT) {
   26364:	9a01      	ldr	r2, [sp, #4]
   26366:	575d      	ldrsb	r5, [r3, r5]
   26368:	f115 0f6a 	cmn.w	r5, #106	; 0x6a
   2636c:	d109      	bne.n	26382 <nrf91_socket_create+0x6a>
		errno = EAFNOSUPPORT;
   2636e:	f017 faed 	bl	3d94c <__errno>
   26372:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   26374:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   26376:	4620      	mov	r0, r4
   26378:	f7fa fc5c 	bl	20c34 <z_free_fd>
		return -1;
   2637c:	f04f 34ff 	mov.w	r4, #4294967295
   26380:	e7df      	b.n	26342 <nrf91_socket_create+0x2a>
	proto = z_to_nrf_protocol(proto);
   26382:	4610      	mov	r0, r2
   26384:	f018 fdda 	bl	3ef3c <nrf_to_z_protocol>
	if (proto == -EPROTONOSUPPORT) {
   26388:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   2638c:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   2638e:	d103      	bne.n	26398 <nrf91_socket_create+0x80>
		errno = EPROTONOSUPPORT;
   26390:	f017 fadc 	bl	3d94c <__errno>
   26394:	237b      	movs	r3, #123	; 0x7b
   26396:	e7ed      	b.n	26374 <nrf91_socket_create+0x5c>
	retval = nrf_socket(family, type, proto);
   26398:	4628      	mov	r0, r5
   2639a:	4631      	mov	r1, r6
   2639c:	f01a f984 	bl	406a8 <nrf_socket>
	if (sd < 0) {
   263a0:	1e05      	subs	r5, r0, #0
   263a2:	dbe8      	blt.n	26376 <nrf91_socket_create+0x5e>
	ctx = allocate_ctx(sd);
   263a4:	f7ff ff20 	bl	261e8 <allocate_ctx>
	if (ctx == NULL) {
   263a8:	4601      	mov	r1, r0
   263aa:	b938      	cbnz	r0, 263bc <nrf91_socket_create+0xa4>
		errno = ENOMEM;
   263ac:	f017 face 	bl	3d94c <__errno>
   263b0:	230c      	movs	r3, #12
   263b2:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   263b4:	4628      	mov	r0, r5
   263b6:	f01a f9d9 	bl	4076c <nrf_close>
   263ba:	e7dc      	b.n	26376 <nrf91_socket_create+0x5e>
	z_finalize_fd(fd, ctx,
   263bc:	4620      	mov	r0, r4
   263be:	4a05      	ldr	r2, [pc, #20]	; (263d4 <nrf91_socket_create+0xbc>)
   263c0:	f7fa fc1e 	bl	20c00 <z_finalize_fd>
	return fd;
   263c4:	e7bd      	b.n	26342 <nrf91_socket_create+0x2a>
   263c6:	bf00      	nop
   263c8:	2001a656 	.word	0x2001a656
   263cc:	2001a657 	.word	0x2001a657
   263d0:	0004521e 	.word	0x0004521e
   263d4:	00042e58 	.word	0x00042e58

000263d8 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   263d8:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   263da:	4805      	ldr	r0, [pc, #20]	; (263f0 <at_monitor_sys_init+0x18>)
   263dc:	f00e feaa 	bl	35134 <nrf_modem_at_notif_handler_set>
	if (err) {
   263e0:	4602      	mov	r2, r0
   263e2:	b118      	cbz	r0, 263ec <at_monitor_sys_init+0x14>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   263e4:	2145      	movs	r1, #69	; 0x45
   263e6:	4803      	ldr	r0, [pc, #12]	; (263f4 <at_monitor_sys_init+0x1c>)
   263e8:	f016 fc71 	bl	3ccce <z_log_minimal_printk>
	}

	return 0;
}
   263ec:	2000      	movs	r0, #0
   263ee:	bd08      	pop	{r3, pc}
   263f0:	000263f9 	.word	0x000263f9
   263f4:	00045228 	.word	0x00045228

000263f8 <at_monitor_dispatch>:
{
   263f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(notif != NULL);
   263fa:	4604      	mov	r4, r0
   263fc:	b940      	cbnz	r0, 26410 <at_monitor_dispatch+0x18>
   263fe:	4931      	ldr	r1, [pc, #196]	; (264c4 <at_monitor_dispatch+0xcc>)
   26400:	4831      	ldr	r0, [pc, #196]	; (264c8 <at_monitor_dispatch+0xd0>)
   26402:	2224      	movs	r2, #36	; 0x24
   26404:	f016 fc29 	bl	3cc5a <assert_print>
   26408:	2124      	movs	r1, #36	; 0x24
   2640a:	482e      	ldr	r0, [pc, #184]	; (264c4 <at_monitor_dispatch+0xcc>)
   2640c:	f016 fc1e 	bl	3cc4c <assert_post_action>
{
   26410:	4d2e      	ldr	r5, [pc, #184]	; (264cc <at_monitor_dispatch+0xd4>)
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   26412:	4e2f      	ldr	r6, [pc, #188]	; (264d0 <at_monitor_dispatch+0xd8>)
   26414:	4f2b      	ldr	r7, [pc, #172]	; (264c4 <at_monitor_dispatch+0xcc>)
   26416:	42b5      	cmp	r5, r6
   26418:	d908      	bls.n	2642c <at_monitor_dispatch+0x34>
   2641a:	4639      	mov	r1, r7
   2641c:	482a      	ldr	r0, [pc, #168]	; (264c8 <at_monitor_dispatch+0xd0>)
   2641e:	222a      	movs	r2, #42	; 0x2a
   26420:	f016 fc1b 	bl	3cc5a <assert_print>
   26424:	212a      	movs	r1, #42	; 0x2a
   26426:	4638      	mov	r0, r7
   26428:	f016 fc10 	bl	3cc4c <assert_post_action>
   2642c:	42b5      	cmp	r5, r6
   2642e:	d310      	bcc.n	26452 <at_monitor_dispatch+0x5a>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   26430:	4d28      	ldr	r5, [pc, #160]	; (264d4 <at_monitor_dispatch+0xdc>)
   26432:	4e29      	ldr	r6, [pc, #164]	; (264d8 <at_monitor_dispatch+0xe0>)
   26434:	4f23      	ldr	r7, [pc, #140]	; (264c4 <at_monitor_dispatch+0xcc>)
   26436:	42b5      	cmp	r5, r6
   26438:	d908      	bls.n	2644c <at_monitor_dispatch+0x54>
   2643a:	4639      	mov	r1, r7
   2643c:	4822      	ldr	r0, [pc, #136]	; (264c8 <at_monitor_dispatch+0xd0>)
   2643e:	2232      	movs	r2, #50	; 0x32
   26440:	f016 fc0b 	bl	3cc5a <assert_print>
   26444:	2132      	movs	r1, #50	; 0x32
   26446:	4638      	mov	r0, r7
   26448:	f016 fc00 	bl	3cc4c <assert_post_action>
   2644c:	42b5      	cmp	r5, r6
   2644e:	d30f      	bcc.n	26470 <at_monitor_dispatch+0x78>
}
   26450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   26452:	7a2b      	ldrb	r3, [r5, #8]
   26454:	b923      	cbnz	r3, 26460 <at_monitor_dispatch+0x68>
   26456:	6829      	ldr	r1, [r5, #0]
   26458:	b921      	cbnz	r1, 26464 <at_monitor_dispatch+0x6c>
			e->handler(notif);
   2645a:	4620      	mov	r0, r4
   2645c:	686b      	ldr	r3, [r5, #4]
   2645e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   26460:	350c      	adds	r5, #12
   26462:	e7d8      	b.n	26416 <at_monitor_dispatch+0x1e>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   26464:	4620      	mov	r0, r4
   26466:	f01b fae6 	bl	41a36 <strstr>
   2646a:	2800      	cmp	r0, #0
   2646c:	d1f5      	bne.n	2645a <at_monitor_dispatch+0x62>
   2646e:	e7f7      	b.n	26460 <at_monitor_dispatch+0x68>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   26470:	7a2b      	ldrb	r3, [r5, #8]
   26472:	b9c3      	cbnz	r3, 264a6 <at_monitor_dispatch+0xae>
   26474:	6829      	ldr	r1, [r5, #0]
   26476:	b989      	cbnz	r1, 2649c <at_monitor_dispatch+0xa4>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   26478:	4620      	mov	r0, r4
   2647a:	f7f6 fee2 	bl	1d242 <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   2647e:	2200      	movs	r2, #0
   26480:	1d41      	adds	r1, r0, #5
   26482:	2300      	movs	r3, #0
   26484:	4815      	ldr	r0, [pc, #84]	; (264dc <at_monitor_dispatch+0xe4>)
   26486:	f01a fe4c 	bl	41122 <k_heap_alloc>
	if (!at_notif) {
   2648a:	4605      	mov	r5, r0
   2648c:	b968      	cbnz	r0, 264aa <at_monitor_dispatch+0xb2>
		LOG_WRN("No heap space for incoming notification: %s",
   2648e:	4622      	mov	r2, r4
}
   26490:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_WRN("No heap space for incoming notification: %s",
   26494:	2157      	movs	r1, #87	; 0x57
   26496:	4812      	ldr	r0, [pc, #72]	; (264e0 <at_monitor_dispatch+0xe8>)
   26498:	f016 bc19 	b.w	3ccce <z_log_minimal_printk>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   2649c:	4620      	mov	r0, r4
   2649e:	f01b faca 	bl	41a36 <strstr>
   264a2:	2800      	cmp	r0, #0
   264a4:	d1e8      	bne.n	26478 <at_monitor_dispatch+0x80>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   264a6:	350c      	adds	r5, #12
   264a8:	e7c5      	b.n	26436 <at_monitor_dispatch+0x3e>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   264aa:	4621      	mov	r1, r4
   264ac:	3004      	adds	r0, #4
   264ae:	f01b fa73 	bl	41998 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   264b2:	4629      	mov	r1, r5
   264b4:	480b      	ldr	r0, [pc, #44]	; (264e4 <at_monitor_dispatch+0xec>)
   264b6:	f01a fe6d 	bl	41194 <k_queue_append>
}
   264ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_submit(&at_monitor_work);
   264be:	480a      	ldr	r0, [pc, #40]	; (264e8 <at_monitor_dispatch+0xf0>)
   264c0:	f011 b800 	b.w	374c4 <k_work_submit>
   264c4:	0004525a 	.word	0x0004525a
   264c8:	00044263 	.word	0x00044263
   264cc:	20014cec 	.word	0x20014cec
   264d0:	20014cec 	.word	0x20014cec
   264d4:	20014c74 	.word	0x20014c74
   264d8:	20014cec 	.word	0x20014cec
   264dc:	20014e80 	.word	0x20014e80
   264e0:	00045286 	.word	0x00045286
   264e4:	20015110 	.word	0x20015110
   264e8:	200146a0 	.word	0x200146a0

000264ec <at_monitor_task>:
{
   264ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   264f0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 26564 <at_monitor_task+0x78>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   264f4:	4f17      	ldr	r7, [pc, #92]	; (26554 <at_monitor_task+0x68>)
   264f6:	2200      	movs	r2, #0
   264f8:	2300      	movs	r3, #0
   264fa:	4648      	mov	r0, r9
   264fc:	f010 fc6c 	bl	36dd8 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   26500:	4605      	mov	r5, r0
   26502:	bb10      	cbnz	r0, 2654a <at_monitor_task+0x5e>
}
   26504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!e->paused &&
   26508:	7a23      	ldrb	r3, [r4, #8]
   2650a:	b92b      	cbnz	r3, 26518 <at_monitor_task+0x2c>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   2650c:	6821      	ldr	r1, [r4, #0]
   2650e:	1d2e      	adds	r6, r5, #4
			if (!e->paused &&
   26510:	b9a9      	cbnz	r1, 2653e <at_monitor_task+0x52>
				e->handler(at_notif->data);
   26512:	4630      	mov	r0, r6
   26514:	6863      	ldr	r3, [r4, #4]
   26516:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   26518:	340c      	adds	r4, #12
   2651a:	42bc      	cmp	r4, r7
   2651c:	d908      	bls.n	26530 <at_monitor_task+0x44>
   2651e:	4641      	mov	r1, r8
   26520:	480d      	ldr	r0, [pc, #52]	; (26558 <at_monitor_task+0x6c>)
   26522:	2253      	movs	r2, #83	; 0x53
   26524:	f016 fb99 	bl	3cc5a <assert_print>
   26528:	2153      	movs	r1, #83	; 0x53
   2652a:	4640      	mov	r0, r8
   2652c:	f016 fb8e 	bl	3cc4c <assert_post_action>
   26530:	42bc      	cmp	r4, r7
   26532:	d3e9      	bcc.n	26508 <at_monitor_task+0x1c>
		k_heap_free(&at_monitor_heap, at_notif);
   26534:	4629      	mov	r1, r5
   26536:	4809      	ldr	r0, [pc, #36]	; (2655c <at_monitor_task+0x70>)
   26538:	f00f ff50 	bl	363dc <k_heap_free>
   2653c:	e7db      	b.n	264f6 <at_monitor_task+0xa>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   2653e:	4630      	mov	r0, r6
   26540:	f01b fa79 	bl	41a36 <strstr>
   26544:	2800      	cmp	r0, #0
   26546:	d1e4      	bne.n	26512 <at_monitor_task+0x26>
   26548:	e7e6      	b.n	26518 <at_monitor_task+0x2c>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   2654a:	4c05      	ldr	r4, [pc, #20]	; (26560 <at_monitor_task+0x74>)
   2654c:	f8df 8018 	ldr.w	r8, [pc, #24]	; 26568 <at_monitor_task+0x7c>
   26550:	e7e3      	b.n	2651a <at_monitor_task+0x2e>
   26552:	bf00      	nop
   26554:	20014cec 	.word	0x20014cec
   26558:	00044263 	.word	0x00044263
   2655c:	20014e80 	.word	0x20014e80
   26560:	20014c74 	.word	0x20014c74
   26564:	20015110 	.word	0x20015110
   26568:	0004525a 	.word	0x0004525a

0002656c <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
   2656c:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   2656e:	4d05      	ldr	r5, [pc, #20]	; (26584 <write_uart_string+0x18>)
   26570:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   26572:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   26576:	b901      	cbnz	r1, 2657a <write_uart_string+0xe>
	}
}
   26578:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   2657a:	6828      	ldr	r0, [r5, #0]
   2657c:	6883      	ldr	r3, [r0, #8]
   2657e:	685b      	ldr	r3, [r3, #4]
   26580:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   26582:	e7f6      	b.n	26572 <write_uart_string+0x6>
   26584:	200193e8 	.word	0x200193e8

00026588 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   26588:	b508      	push	{r3, lr}
	ARG_UNUSED(work);

    /* Sending through string format rather than raw buffer in case
     * the buffer contains characters that need to be escaped
     */
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   2658a:	4b0c      	ldr	r3, [pc, #48]	; (265bc <cmd_send+0x34>)
   2658c:	4a0c      	ldr	r2, [pc, #48]	; (265c0 <cmd_send+0x38>)
   2658e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   26592:	4618      	mov	r0, r3
   26594:	f00e fdfa 	bl	3518c <nrf_modem_at_cmd>
	if (err < 0) {
   26598:	1e02      	subs	r2, r0, #0
   2659a:	da03      	bge.n	265a4 <cmd_send+0x1c>
		LOG_ERR("Error while processing AT command: %d", err);
   2659c:	2145      	movs	r1, #69	; 0x45
   2659e:	4809      	ldr	r0, [pc, #36]	; (265c4 <cmd_send+0x3c>)
   265a0:	f016 fb95 	bl	3ccce <z_log_minimal_printk>
	}

	write_uart_string(at_buf);
   265a4:	4805      	ldr	r0, [pc, #20]	; (265bc <cmd_send+0x34>)
   265a6:	f7ff ffe1 	bl	2656c <write_uart_string>

	at_buf_busy = false;
   265aa:	2200      	movs	r2, #0
   265ac:	4b06      	ldr	r3, [pc, #24]	; (265c8 <cmd_send+0x40>)
   265ae:	701a      	strb	r2, [r3, #0]
	uart_irq_rx_enable(uart_dev);
   265b0:	4b06      	ldr	r3, [pc, #24]	; (265cc <cmd_send+0x44>)
   265b2:	6818      	ldr	r0, [r3, #0]
}
   265b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   265b8:	f018 bea9 	b.w	3f30e <z_impl_uart_irq_rx_enable>
   265bc:	2001a658 	.word	0x2001a658
   265c0:	0004a4db 	.word	0x0004a4db
   265c4:	000452c2 	.word	0x000452c2
   265c8:	2001b658 	.word	0x2001b658
   265cc:	200193e8 	.word	0x200193e8

000265d0 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   265d0:	2201      	movs	r2, #1
{
   265d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		term_mode = mode;
   265d6:	4b3a      	ldr	r3, [pc, #232]	; (266c0 <at_host_init+0xf0>)
{
   265d8:	b085      	sub	sp, #20
		term_mode = mode;
   265da:	701a      	strb	r2, [r3, #0]
   265dc:	4839      	ldr	r0, [pc, #228]	; (266c4 <at_host_init+0xf4>)
   265de:	f00f fd01 	bl	35fe4 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   265e2:	4e39      	ldr	r6, [pc, #228]	; (266c8 <at_host_init+0xf8>)
   265e4:	6030      	str	r0, [r6, #0]
	if (uart_dev == NULL) {
   265e6:	b980      	cbnz	r0, 2660a <at_host_init+0x3a>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   265e8:	4a36      	ldr	r2, [pc, #216]	; (266c4 <at_host_init+0xf4>)
   265ea:	2145      	movs	r1, #69	; 0x45
   265ec:	4837      	ldr	r0, [pc, #220]	; (266cc <at_host_init+0xfc>)
   265ee:	f016 fb6e 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   265f2:	f06f 0215 	mvn.w	r2, #21
	}

	/* Initialize the UART module */
	err = at_uart_init(uart_dev_name);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
   265f6:	2145      	movs	r1, #69	; 0x45
   265f8:	4835      	ldr	r0, [pc, #212]	; (266d0 <at_host_init+0x100>)
   265fa:	f016 fb68 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   265fe:	f06f 050d 	mvn.w	r5, #13
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   26602:	4628      	mov	r0, r5
   26604:	b005      	add	sp, #20
   26606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2660a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	return z_impl_k_uptime_ticks();
   2660e:	f01a fe68 	bl	412e2 <z_impl_k_uptime_ticks>
   26612:	46b8      	mov	r8, r7
   26614:	fba0 0307 	umull	r0, r3, r0, r7
   26618:	fb07 3101 	mla	r1, r7, r1, r3
   2661c:	0bc0      	lsrs	r0, r0, #15
			LOG_INF("UART check failed: %d. "
   2661e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 266ec <at_host_init+0x11c>
   26622:	ea40 4441 	orr.w	r4, r0, r1, lsl #17
		err = uart_err_check(uart_dev);
   26626:	6830      	ldr	r0, [r6, #0]
	if (api->err_check == NULL) {
   26628:	6883      	ldr	r3, [r0, #8]
   2662a:	689b      	ldr	r3, [r3, #8]
   2662c:	b1bb      	cbz	r3, 2665e <at_host_init+0x8e>
	return api->err_check(dev);
   2662e:	4798      	blx	r3
		if (err) {
   26630:	4605      	mov	r5, r0
   26632:	b360      	cbz	r0, 2668e <at_host_init+0xbe>
   26634:	f01a fe55 	bl	412e2 <z_impl_k_uptime_ticks>
   26638:	fba0 3008 	umull	r3, r0, r0, r8
   2663c:	fb07 0001 	mla	r0, r7, r1, r0
   26640:	0bdb      	lsrs	r3, r3, #15
   26642:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
			if (k_uptime_get_32() - start_time >
   26646:	1b1b      	subs	r3, r3, r4
   26648:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
				LOG_ERR("UART check failed: %d. "
   2664c:	462a      	mov	r2, r5
			if (k_uptime_get_32() - start_time >
   2664e:	d909      	bls.n	26664 <at_host_init+0x94>
				LOG_ERR("UART check failed: %d. "
   26650:	2145      	movs	r1, #69	; 0x45
   26652:	4820      	ldr	r0, [pc, #128]	; (266d4 <at_host_init+0x104>)
   26654:	f016 fb3b 	bl	3ccce <z_log_minimal_printk>
				return -EIO;
   26658:	f06f 0204 	mvn.w	r2, #4
   2665c:	e7cb      	b.n	265f6 <at_host_init+0x26>
		return -ENOSYS;
   2665e:	f06f 0557 	mvn.w	r5, #87	; 0x57
   26662:	e7e7      	b.n	26634 <at_host_init+0x64>
			LOG_INF("UART check failed: %d. "
   26664:	2149      	movs	r1, #73	; 0x49
   26666:	4648      	mov	r0, r9
   26668:	f016 fb31 	bl	3ccce <z_log_minimal_printk>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   2666c:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->fifo_read == NULL) {
   2666e:	6883      	ldr	r3, [r0, #8]
   26670:	699b      	ldr	r3, [r3, #24]
   26672:	b903      	cbnz	r3, 26676 <at_host_init+0xa6>
   26674:	e7fe      	b.n	26674 <at_host_init+0xa4>
		return -ENOSYS;
	}

	return api->fifo_read(dev, rx_data, size);
   26676:	2201      	movs	r2, #1
   26678:	f10d 010f 	add.w	r1, sp, #15
   2667c:	4798      	blx	r3
   2667e:	2800      	cmp	r0, #0
   26680:	d1f4      	bne.n	2666c <at_host_init+0x9c>
	return z_impl_k_sleep(timeout);
   26682:	2100      	movs	r1, #0
   26684:	f44f 70a4 	mov.w	r0, #328	; 0x148
   26688:	f012 f84e 	bl	38728 <z_impl_k_sleep>
	} while (err);
   2668c:	e7cb      	b.n	26626 <at_host_init+0x56>
	uart_irq_callback_set(uart_dev, isr);
   2668e:	6830      	ldr	r0, [r6, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   26690:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   26692:	b123      	cbz	r3, 2669e <at_host_init+0xce>
   26694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   26696:	b113      	cbz	r3, 2669e <at_host_init+0xce>
		api->irq_callback_set(dev, cb, user_data);
   26698:	462a      	mov	r2, r5
   2669a:	490f      	ldr	r1, [pc, #60]	; (266d8 <at_host_init+0x108>)
   2669c:	4798      	blx	r3
	k_work_init(&cmd_send_work, cmd_send);
   2669e:	490f      	ldr	r1, [pc, #60]	; (266dc <at_host_init+0x10c>)
   266a0:	480f      	ldr	r0, [pc, #60]	; (266e0 <at_host_init+0x110>)
   266a2:	f010 fe63 	bl	3736c <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
   266a6:	2300      	movs	r3, #0
   266a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   266ac:	9300      	str	r3, [sp, #0]
   266ae:	490d      	ldr	r1, [pc, #52]	; (266e4 <at_host_init+0x114>)
   266b0:	230a      	movs	r3, #10
   266b2:	480d      	ldr	r0, [pc, #52]	; (266e8 <at_host_init+0x118>)
   266b4:	f010 ff60 	bl	37578 <k_work_queue_start>
	uart_irq_rx_enable(uart_dev);
   266b8:	6830      	ldr	r0, [r6, #0]
   266ba:	f018 fe28 	bl	3f30e <z_impl_uart_irq_rx_enable>
}
   266be:	e7a0      	b.n	26602 <at_host_init+0x32>
   266c0:	2001b65a 	.word	0x2001b65a
   266c4:	000450fc 	.word	0x000450fc
   266c8:	200193e8 	.word	0x200193e8
   266cc:	000452ed 	.word	0x000452ed
   266d0:	00045377 	.word	0x00045377
   266d4:	00045302 	.word	0x00045302
   266d8:	000266f1 	.word	0x000266f1
   266dc:	00026589 	.word	0x00026589
   266e0:	200193d8 	.word	0x200193d8
   266e4:	2001f100 	.word	0x2001f100
   266e8:	200153f0 	.word	0x200153f0
   266ec:	0004533d 	.word	0x0004533d

000266f0 <isr>:
{
   266f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   266f2:	4604      	mov	r4, r0
	if (api->irq_update == NULL) {
   266f4:	6883      	ldr	r3, [r0, #8]
   266f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   266f8:	b103      	cbz	r3, 266fc <isr+0xc>
	return api->irq_update(dev);
   266fa:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   266fc:	68a3      	ldr	r3, [r4, #8]
   266fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   26700:	b9c3      	cbnz	r3, 26734 <isr+0x44>
	while ((!at_buf_busy) &&
   26702:	4e3a      	ldr	r6, [pc, #232]	; (267ec <isr+0xfc>)
		if (at_cmd_len > 0) {
   26704:	4d3a      	ldr	r5, [pc, #232]	; (267f0 <isr+0x100>)
	while ((!at_buf_busy) &&
   26706:	7833      	ldrb	r3, [r6, #0]
   26708:	b9c3      	cbnz	r3, 2673c <isr+0x4c>
	if (api->fifo_read == NULL) {
   2670a:	68a3      	ldr	r3, [r4, #8]
   2670c:	699b      	ldr	r3, [r3, #24]
   2670e:	b12b      	cbz	r3, 2671c <isr+0x2c>
	return api->fifo_read(dev, rx_data, size);
   26710:	2201      	movs	r2, #1
   26712:	4620      	mov	r0, r4
   26714:	f10d 0107 	add.w	r1, sp, #7
   26718:	4798      	blx	r3
   2671a:	b178      	cbz	r0, 2673c <isr+0x4c>
		uart_rx_handler(character);
   2671c:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   26720:	2a08      	cmp	r2, #8
   26722:	d001      	beq.n	26728 <isr+0x38>
   26724:	2a7f      	cmp	r2, #127	; 0x7f
   26726:	d10b      	bne.n	26740 <isr+0x50>
		if (at_cmd_len > 0) {
   26728:	682b      	ldr	r3, [r5, #0]
   2672a:	2b00      	cmp	r3, #0
   2672c:	d0eb      	beq.n	26706 <isr+0x16>
			at_cmd_len--;
   2672e:	3b01      	subs	r3, #1
   26730:	602b      	str	r3, [r5, #0]
   26732:	e7e8      	b.n	26706 <isr+0x16>
	return api->irq_rx_ready(dev);
   26734:	4620      	mov	r0, r4
   26736:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   26738:	2800      	cmp	r0, #0
   2673a:	d1e2      	bne.n	26702 <isr+0x12>
}
   2673c:	b003      	add	sp, #12
   2673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!inside_quotes) {
   26740:	492c      	ldr	r1, [pc, #176]	; (267f4 <isr+0x104>)
   26742:	780b      	ldrb	r3, [r1, #0]
   26744:	b983      	cbnz	r3, 26768 <isr+0x78>
		switch (character) {
   26746:	2a0a      	cmp	r2, #10
   26748:	d018      	beq.n	2677c <isr+0x8c>
   2674a:	2a0d      	cmp	r2, #13
   2674c:	d008      	beq.n	26760 <isr+0x70>
   2674e:	b95a      	cbnz	r2, 26768 <isr+0x78>
			if (term_mode == MODE_NULL_TERM) {
   26750:	4b29      	ldr	r3, [pc, #164]	; (267f8 <isr+0x108>)
   26752:	781b      	ldrb	r3, [r3, #0]
   26754:	b363      	cbz	r3, 267b0 <isr+0xc0>
			LOG_WRN("Ignored null; would terminate string early.");
   26756:	2157      	movs	r1, #87	; 0x57
   26758:	4828      	ldr	r0, [pc, #160]	; (267fc <isr+0x10c>)
   2675a:	f016 fab8 	bl	3ccce <z_log_minimal_printk>
			return;
   2675e:	e7d2      	b.n	26706 <isr+0x16>
			if (term_mode == MODE_CR) {
   26760:	4825      	ldr	r0, [pc, #148]	; (267f8 <isr+0x108>)
   26762:	7800      	ldrb	r0, [r0, #0]
   26764:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   26766:	d023      	beq.n	267b0 <isr+0xc0>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   26768:	682f      	ldr	r7, [r5, #0]
   2676a:	1c78      	adds	r0, r7, #1
   2676c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   26770:	d313      	bcc.n	2679a <isr+0xaa>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   26772:	2145      	movs	r1, #69	; 0x45
   26774:	4822      	ldr	r0, [pc, #136]	; (26800 <isr+0x110>)
   26776:	f016 faaa 	bl	3ccce <z_log_minimal_printk>
		return;
   2677a:	e7c4      	b.n	26706 <isr+0x16>
			if (term_mode == MODE_LF) {
   2677c:	481e      	ldr	r0, [pc, #120]	; (267f8 <isr+0x108>)
   2677e:	7800      	ldrb	r0, [r0, #0]
   26780:	2802      	cmp	r0, #2
   26782:	d015      	beq.n	267b0 <isr+0xc0>
			if (term_mode == MODE_CR_LF &&
   26784:	2803      	cmp	r0, #3
   26786:	d1ef      	bne.n	26768 <isr+0x78>
		if (at_cmd_len > 0) {
   26788:	682f      	ldr	r7, [r5, #0]
			if (term_mode == MODE_CR_LF &&
   2678a:	2f00      	cmp	r7, #0
   2678c:	d0ec      	beq.n	26768 <isr+0x78>
			    at_buf[at_cmd_len - 1] == '\r') {
   2678e:	481d      	ldr	r0, [pc, #116]	; (26804 <isr+0x114>)
   26790:	4438      	add	r0, r7
			    at_cmd_len > 0 &&
   26792:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   26796:	280d      	cmp	r0, #13
   26798:	e7e5      	b.n	26766 <isr+0x76>
	at_buf[at_cmd_len] = character;
   2679a:	f8df c068 	ldr.w	ip, [pc, #104]	; 26804 <isr+0x114>
	if (character == '"') {
   2679e:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   267a0:	f80c 2007 	strb.w	r2, [ip, r7]
	at_cmd_len++;
   267a4:	6028      	str	r0, [r5, #0]
	if (character == '"') {
   267a6:	d1ae      	bne.n	26706 <isr+0x16>
	if (!inside_quotes) {
   267a8:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   267ac:	700b      	strb	r3, [r1, #0]
   267ae:	e7aa      	b.n	26706 <isr+0x16>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   267b0:	2200      	movs	r2, #0
   267b2:	4b14      	ldr	r3, [pc, #80]	; (26804 <isr+0x114>)
	inside_quotes = false;
   267b4:	700a      	strb	r2, [r1, #0]
   267b6:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   267b8:	6828      	ldr	r0, [r5, #0]
	at_cmd_len = 0;
   267ba:	602a      	str	r2, [r5, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   267bc:	541a      	strb	r2, [r3, r0]
		if (*c > ' ') {
   267be:	f813 2b01 	ldrb.w	r2, [r3], #1
   267c2:	2a20      	cmp	r2, #32
   267c4:	d802      	bhi.n	267cc <isr+0xdc>
		} else if (*c == '\0') {
   267c6:	2a00      	cmp	r2, #0
   267c8:	d1f9      	bne.n	267be <isr+0xce>
   267ca:	e79c      	b.n	26706 <isr+0x16>
	if (at_buf[0]) {
   267cc:	780b      	ldrb	r3, [r1, #0]
   267ce:	2b00      	cmp	r3, #0
   267d0:	d099      	beq.n	26706 <isr+0x16>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   267d2:	4b0d      	ldr	r3, [pc, #52]	; (26808 <isr+0x118>)
   267d4:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable != NULL) {
   267d6:	6883      	ldr	r3, [r0, #8]
   267d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   267da:	b103      	cbz	r3, 267de <isr+0xee>
		api->irq_rx_disable(dev);
   267dc:	4798      	blx	r3
		at_buf_busy = true;
   267de:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   267e0:	490a      	ldr	r1, [pc, #40]	; (2680c <isr+0x11c>)
   267e2:	480b      	ldr	r0, [pc, #44]	; (26810 <isr+0x120>)
		at_buf_busy = true;
   267e4:	7033      	strb	r3, [r6, #0]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   267e6:	f010 fe19 	bl	3741c <k_work_submit_to_queue>
   267ea:	e78c      	b.n	26706 <isr+0x16>
   267ec:	2001b658 	.word	0x2001b658
   267f0:	200193d4 	.word	0x200193d4
   267f4:	2001b659 	.word	0x2001b659
   267f8:	2001b65a 	.word	0x2001b65a
   267fc:	0004539e 	.word	0x0004539e
   26800:	000453cf 	.word	0x000453cf
   26804:	2001a658 	.word	0x2001a658
   26808:	200193e8 	.word	0x200193e8
   2680c:	200193d8 	.word	0x200193d8
   26810:	200153f0 	.word	0x200153f0

00026814 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   26814:	4b06      	ldr	r3, [pc, #24]	; (26830 <is_valid_notification_char+0x1c>)
   26816:	5cc3      	ldrb	r3, [r0, r3]
   26818:	f003 0303 	and.w	r3, r3, #3
   2681c:	2b02      	cmp	r3, #2
   2681e:	bf08      	it	eq
   26820:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   26822:	3841      	subs	r0, #65	; 0x41
   26824:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   26826:	2819      	cmp	r0, #25
   26828:	bf8c      	ite	hi
   2682a:	2000      	movhi	r0, #0
   2682c:	2001      	movls	r0, #1
   2682e:	4770      	bx	lr
   26830:	0004bf0e 	.word	0x0004bf0e

00026834 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   26834:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26836:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   26838:	2400      	movs	r4, #0
   2683a:	4e0a      	ldr	r6, [pc, #40]	; (26864 <is_result+0x30>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   2683c:	f856 1b04 	ldr.w	r1, [r6], #4
   26840:	4608      	mov	r0, r1
   26842:	9101      	str	r1, [sp, #4]
   26844:	f7f6 fcfd 	bl	1d242 <strlen>
   26848:	9901      	ldr	r1, [sp, #4]
   2684a:	4602      	mov	r2, r0
   2684c:	4628      	mov	r0, r5
   2684e:	f01b f8ab 	bl	419a8 <strncmp>
		if (!diff) {
   26852:	b128      	cbz	r0, 26860 <is_result+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   26854:	3401      	adds	r4, #1
   26856:	2c04      	cmp	r4, #4
   26858:	d1f0      	bne.n	2683c <is_result+0x8>
			return true;
		}
	}

	return false;
   2685a:	2000      	movs	r0, #0
}
   2685c:	b002      	add	sp, #8
   2685e:	bd70      	pop	{r4, r5, r6, pc}
			return true;
   26860:	2001      	movs	r0, #1
   26862:	e7fb      	b.n	2685c <is_result+0x28>
   26864:	00042e98 	.word	0x00042e98

00026868 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   26868:	b510      	push	{r4, lr}
   2686a:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   2686c:	f7f6 fce9 	bl	1d242 <strlen>
   26870:	2801      	cmp	r0, #1
   26872:	d921      	bls.n	268b8 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   26874:	7823      	ldrb	r3, [r4, #0]
   26876:	4912      	ldr	r1, [pc, #72]	; (268c0 <is_command+0x58>)
   26878:	5c5a      	ldrb	r2, [r3, r1]
   2687a:	f002 0203 	and.w	r2, r2, #3
   2687e:	2a02      	cmp	r2, #2
   26880:	bf08      	it	eq
   26882:	3b20      	subeq	r3, #32
   26884:	2b41      	cmp	r3, #65	; 0x41
   26886:	d117      	bne.n	268b8 <is_command+0x50>
   26888:	7863      	ldrb	r3, [r4, #1]
   2688a:	5cca      	ldrb	r2, [r1, r3]
   2688c:	f002 0203 	and.w	r2, r2, #3
   26890:	2a02      	cmp	r2, #2
   26892:	bf08      	it	eq
   26894:	3b20      	subeq	r3, #32
   26896:	2b54      	cmp	r3, #84	; 0x54
   26898:	d10e      	bne.n	268b8 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2689a:	78a2      	ldrb	r2, [r4, #2]
   2689c:	2a25      	cmp	r2, #37	; 0x25
   2689e:	d00d      	beq.n	268bc <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   268a0:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   268a4:	2b23      	cmp	r3, #35	; 0x23
   268a6:	d009      	beq.n	268bc <is_command+0x54>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   268a8:	4610      	mov	r0, r2
   268aa:	f018 fd37 	bl	3f31c <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   268ae:	b910      	cbnz	r0, 268b6 <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   268b0:	fab2 f082 	clz	r0, r2
   268b4:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   268b6:	bd10      	pop	{r4, pc}
		return false;
   268b8:	2000      	movs	r0, #0
   268ba:	e7fc      	b.n	268b6 <is_command+0x4e>
		return true;
   268bc:	2001      	movs	r0, #1
   268be:	e7fa      	b.n	268b6 <is_command+0x4e>
   268c0:	0004bf0e 	.word	0x0004bf0e

000268c4 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   268c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   268c8:	6805      	ldr	r5, [r0, #0]
{
   268ca:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   268cc:	9500      	str	r5, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   268ce:	782b      	ldrb	r3, [r5, #0]
{
   268d0:	4680      	mov	r8, r0
   268d2:	460f      	mov	r7, r1
   268d4:	4616      	mov	r6, r2
   268d6:	2b00      	cmp	r3, #0
   268d8:	f000 80ca 	beq.w	26a70 <at_parse_process_element+0x1ac>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   268dc:	4b66      	ldr	r3, [pc, #408]	; (26a78 <at_parse_process_element+0x1b4>)
   268de:	781c      	ldrb	r4, [r3, #0]
   268e0:	2c06      	cmp	r4, #6
   268e2:	d110      	bne.n	26906 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   268e4:	1c6b      	adds	r3, r5, #1
   268e6:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   268e8:	9a00      	ldr	r2, [sp, #0]
   268ea:	7810      	ldrb	r0, [r2, #0]
   268ec:	f7ff ff92 	bl	26814 <is_valid_notification_char>
   268f0:	b930      	cbnz	r0, 26900 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   268f2:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   268f4:	462a      	mov	r2, r5
   268f6:	4639      	mov	r1, r7
   268f8:	4630      	mov	r0, r6
   268fa:	f018 fd78 	bl	3f3ee <at_params_string_put>
   268fe:	e01c      	b.n	2693a <at_parse_process_element+0x76>
			tmpstr++;
   26900:	3201      	adds	r2, #1
   26902:	9200      	str	r2, [sp, #0]
   26904:	e7f0      	b.n	268e8 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   26906:	2c07      	cmp	r4, #7
   26908:	d125      	bne.n	26956 <at_parse_process_element+0x92>
		skip_command_prefix(&tmpstr);
   2690a:	4668      	mov	r0, sp
   2690c:	f018 fd0f 	bl	3f32e <skip_command_prefix>
	if (isalpha((int)chr) || isdigit((int)chr)) {
   26910:	4a5a      	ldr	r2, [pc, #360]	; (26a7c <at_parse_process_element+0x1b8>)
		while (is_valid_command_char(*tmpstr)) {
   26912:	9b00      	ldr	r3, [sp, #0]
   26914:	7819      	ldrb	r1, [r3, #0]
   26916:	5c89      	ldrb	r1, [r1, r2]
   26918:	0749      	lsls	r1, r1, #29
   2691a:	d115      	bne.n	26948 <at_parse_process_element+0x84>
		at_params_string_put(list, index, start_ptr,
   2691c:	462a      	mov	r2, r5
   2691e:	1b5b      	subs	r3, r3, r5
   26920:	4639      	mov	r1, r7
   26922:	4630      	mov	r0, r6
   26924:	f018 fd63 	bl	3f3ee <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   26928:	9b00      	ldr	r3, [sp, #0]
   2692a:	781a      	ldrb	r2, [r3, #0]
   2692c:	2a3d      	cmp	r2, #61	; 0x3d
   2692e:	d10e      	bne.n	2694e <at_parse_process_element+0x8a>
   26930:	785a      	ldrb	r2, [r3, #1]
   26932:	2a3f      	cmp	r2, #63	; 0x3f
   26934:	d101      	bne.n	2693a <at_parse_process_element+0x76>
			tmpstr += 2;
   26936:	3302      	adds	r3, #2
			tmpstr++;
   26938:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   2693a:	2000      	movs	r0, #0
	*str = tmpstr;
   2693c:	9b00      	ldr	r3, [sp, #0]
   2693e:	f8c8 3000 	str.w	r3, [r8]
}
   26942:	b023      	add	sp, #140	; 0x8c
   26944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   26948:	3301      	adds	r3, #1
   2694a:	9300      	str	r3, [sp, #0]
   2694c:	e7e1      	b.n	26912 <at_parse_process_element+0x4e>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   2694e:	2a3f      	cmp	r2, #63	; 0x3f
   26950:	d1f3      	bne.n	2693a <at_parse_process_element+0x76>
			tmpstr++;
   26952:	3301      	adds	r3, #1
   26954:	e7f0      	b.n	26938 <at_parse_process_element+0x74>
	} else if (state == OPTIONAL) {
   26956:	2c08      	cmp	r4, #8
   26958:	d103      	bne.n	26962 <at_parse_process_element+0x9e>
		at_params_empty_put(list, index);
   2695a:	4610      	mov	r0, r2
   2695c:	f018 fd19 	bl	3f392 <at_params_empty_put>
   26960:	e7eb      	b.n	2693a <at_parse_process_element+0x76>
	} else if (state == STRING) {
   26962:	2c02      	cmp	r4, #2
   26964:	d111      	bne.n	2698a <at_parse_process_element+0xc6>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   26966:	9a00      	ldr	r2, [sp, #0]
   26968:	7811      	ldrb	r1, [r2, #0]
   2696a:	4608      	mov	r0, r1
   2696c:	f018 fcd6 	bl	3f31c <is_lfcr>
   26970:	b918      	cbnz	r0, 2697a <at_parse_process_element+0xb6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26972:	b111      	cbz	r1, 2697a <at_parse_process_element+0xb6>
			tmpstr++;
   26974:	3201      	adds	r2, #1
   26976:	9200      	str	r2, [sp, #0]
   26978:	e7f5      	b.n	26966 <at_parse_process_element+0xa2>
		at_params_string_put(list, index, start_ptr,
   2697a:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   2697c:	462a      	mov	r2, r5
   2697e:	4639      	mov	r1, r7
   26980:	4630      	mov	r0, r6
   26982:	f018 fd34 	bl	3f3ee <at_params_string_put>
		tmpstr++;
   26986:	9b00      	ldr	r3, [sp, #0]
   26988:	e7e3      	b.n	26952 <at_parse_process_element+0x8e>
	} else if (state == QUOTED_STRING) {
   2698a:	2c03      	cmp	r4, #3
   2698c:	d109      	bne.n	269a2 <at_parse_process_element+0xde>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   2698e:	9b00      	ldr	r3, [sp, #0]
   26990:	781a      	ldrb	r2, [r3, #0]
	if (chr == '"') {
   26992:	2a22      	cmp	r2, #34	; 0x22
   26994:	d003      	beq.n	2699e <at_parse_process_element+0xda>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26996:	b112      	cbz	r2, 2699e <at_parse_process_element+0xda>
			tmpstr++;
   26998:	3301      	adds	r3, #1
   2699a:	9300      	str	r3, [sp, #0]
   2699c:	e7f7      	b.n	2698e <at_parse_process_element+0xca>
		at_params_string_put(list, index, start_ptr,
   2699e:	1b5b      	subs	r3, r3, r5
   269a0:	e7ec      	b.n	2697c <at_parse_process_element+0xb8>
	} else if (state == ARRAY) {
   269a2:	2c01      	cmp	r4, #1
   269a4:	d13c      	bne.n	26a20 <at_parse_process_element+0x15c>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   269a6:	4628      	mov	r0, r5
   269a8:	220a      	movs	r2, #10
   269aa:	a901      	add	r1, sp, #4
   269ac:	f014 f910 	bl	3abd0 <strtoul>
		tmpstr = next;
   269b0:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   269b2:	4d33      	ldr	r5, [pc, #204]	; (26a80 <at_parse_process_element+0x1bc>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   269b4:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   269b6:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   269b8:	9800      	ldr	r0, [sp, #0]
   269ba:	7803      	ldrb	r3, [r0, #0]
	if (chr == ')') {
   269bc:	2b29      	cmp	r3, #41	; 0x29
   269be:	d01f      	beq.n	26a00 <at_parse_process_element+0x13c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   269c0:	b1f3      	cbz	r3, 26a00 <at_parse_process_element+0x13c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   269c2:	3b2c      	subs	r3, #44	; 0x2c
   269c4:	b2db      	uxtb	r3, r3
   269c6:	3001      	adds	r0, #1
   269c8:	2b11      	cmp	r3, #17
				tmparray[i++] =
   269ca:	9000      	str	r0, [sp, #0]
   269cc:	d826      	bhi.n	26a1c <at_parse_process_element+0x158>
   269ce:	fa25 f303 	lsr.w	r3, r5, r3
   269d2:	07db      	lsls	r3, r3, #31
   269d4:	d522      	bpl.n	26a1c <at_parse_process_element+0x158>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   269d6:	220a      	movs	r2, #10
   269d8:	a901      	add	r1, sp, #4
   269da:	f014 f8f9 	bl	3abd0 <strtoul>
				tmparray[i++] =
   269de:	ab22      	add	r3, sp, #136	; 0x88
   269e0:	f104 0901 	add.w	r9, r4, #1
   269e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   269e8:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   269ec:	9800      	ldr	r0, [sp, #0]
   269ee:	f7f6 fc28 	bl	1d242 <strlen>
   269f2:	4604      	mov	r4, r0
   269f4:	9801      	ldr	r0, [sp, #4]
   269f6:	f7f6 fc24 	bl	1d242 <strlen>
   269fa:	4284      	cmp	r4, r0
   269fc:	d107      	bne.n	26a0e <at_parse_process_element+0x14a>
				tmparray[i++] =
   269fe:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   26a00:	4639      	mov	r1, r7
   26a02:	4630      	mov	r0, r6
   26a04:	00a3      	lsls	r3, r4, #2
   26a06:	aa02      	add	r2, sp, #8
   26a08:	f018 fd17 	bl	3f43a <at_params_array_put>
		tmpstr++;
   26a0c:	e7bb      	b.n	26986 <at_parse_process_element+0xc2>
					tmpstr = next;
   26a0e:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   26a10:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   26a14:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   26a16:	d0f2      	beq.n	269fe <at_parse_process_element+0x13a>
				tmpstr++;
   26a18:	464c      	mov	r4, r9
   26a1a:	e7cd      	b.n	269b8 <at_parse_process_element+0xf4>
   26a1c:	46a1      	mov	r9, r4
   26a1e:	e7fb      	b.n	26a18 <at_parse_process_element+0x154>
	} else if (state == NUMBER) {
   26a20:	2c04      	cmp	r4, #4
   26a22:	d10d      	bne.n	26a40 <at_parse_process_element+0x17c>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   26a24:	220a      	movs	r2, #10
   26a26:	4628      	mov	r0, r5
   26a28:	a902      	add	r1, sp, #8
   26a2a:	f014 f855 	bl	3aad8 <strtoll>
   26a2e:	460b      	mov	r3, r1
		tmpstr = next;
   26a30:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   26a32:	4602      	mov	r2, r0
		tmpstr = next;
   26a34:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   26a36:	4630      	mov	r0, r6
   26a38:	4639      	mov	r1, r7
   26a3a:	f018 fcc1 	bl	3f3c0 <at_params_int_put>
   26a3e:	e77c      	b.n	2693a <at_parse_process_element+0x76>
	} else if (state == SMS_PDU) {
   26a40:	2c05      	cmp	r4, #5
   26a42:	d10b      	bne.n	26a5c <at_parse_process_element+0x198>
		while (isxdigit((int)*tmpstr)) {
   26a44:	490d      	ldr	r1, [pc, #52]	; (26a7c <at_parse_process_element+0x1b8>)
   26a46:	9b00      	ldr	r3, [sp, #0]
   26a48:	781a      	ldrb	r2, [r3, #0]
   26a4a:	5c52      	ldrb	r2, [r2, r1]
   26a4c:	f012 0f44 	tst.w	r2, #68	; 0x44
   26a50:	d101      	bne.n	26a56 <at_parse_process_element+0x192>
		at_params_string_put(list, index, start_ptr,
   26a52:	1b5b      	subs	r3, r3, r5
   26a54:	e74e      	b.n	268f4 <at_parse_process_element+0x30>
			tmpstr++;
   26a56:	3301      	adds	r3, #1
   26a58:	9300      	str	r3, [sp, #0]
   26a5a:	e7f4      	b.n	26a46 <at_parse_process_element+0x182>
	} else if (state == CLAC) {
   26a5c:	2c09      	cmp	r4, #9
   26a5e:	f47f af6c 	bne.w	2693a <at_parse_process_element+0x76>
		while (!is_terminated(*tmpstr)) {
   26a62:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26a64:	781a      	ldrb	r2, [r3, #0]
   26a66:	2a00      	cmp	r2, #0
   26a68:	d0f3      	beq.n	26a52 <at_parse_process_element+0x18e>
			tmpstr++;
   26a6a:	3301      	adds	r3, #1
   26a6c:	9300      	str	r3, [sp, #0]
   26a6e:	e7f8      	b.n	26a62 <at_parse_process_element+0x19e>
		return -1;
   26a70:	f04f 30ff 	mov.w	r0, #4294967295
   26a74:	e765      	b.n	26942 <at_parse_process_element+0x7e>
   26a76:	bf00      	nop
   26a78:	2001b65c 	.word	0x2001b65c
   26a7c:	0004bf0e 	.word	0x0004bf0e
   26a80:	00024001 	.word	0x00024001

00026a84 <at_parse_detect_type>:
{
   26a84:	b570      	push	{r4, r5, r6, lr}
   26a86:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   26a88:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   26a8a:	4e64      	ldr	r6, [pc, #400]	; (26c1c <at_parse_detect_type+0x198>)
   26a8c:	2900      	cmp	r1, #0
   26a8e:	d137      	bne.n	26b00 <at_parse_detect_type+0x7c>
   26a90:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26a92:	2b2b      	cmp	r3, #43	; 0x2b
   26a94:	d001      	beq.n	26a9a <at_parse_detect_type+0x16>
   26a96:	2b25      	cmp	r3, #37	; 0x25
   26a98:	d132      	bne.n	26b00 <at_parse_detect_type+0x7c>
	state = new_state;
   26a9a:	2206      	movs	r2, #6
   26a9c:	4b60      	ldr	r3, [pc, #384]	; (26c20 <at_parse_detect_type+0x19c>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   26a9e:	4620      	mov	r0, r4
	state = new_state;
   26aa0:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   26aa2:	4960      	ldr	r1, [pc, #384]	; (26c24 <at_parse_detect_type+0x1a0>)
   26aa4:	2205      	movs	r2, #5
   26aa6:	f01a ff7f 	bl	419a8 <strncmp>
   26aaa:	b920      	cbnz	r0, 26ab6 <at_parse_detect_type+0x32>
			retval = true;
   26aac:	2001      	movs	r0, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   26aae:	7030      	strb	r0, [r6, #0]
	return 0;
   26ab0:	2000      	movs	r0, #0
	*str = tmpstr;
   26ab2:	602c      	str	r4, [r5, #0]
	return 0;
   26ab4:	e064      	b.n	26b80 <at_parse_detect_type+0xfc>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   26ab6:	2205      	movs	r2, #5
   26ab8:	4620      	mov	r0, r4
   26aba:	495b      	ldr	r1, [pc, #364]	; (26c28 <at_parse_detect_type+0x1a4>)
   26abc:	f01a ff74 	bl	419a8 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   26ac0:	2800      	cmp	r0, #0
   26ac2:	d0f3      	beq.n	26aac <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   26ac4:	220b      	movs	r2, #11
   26ac6:	4620      	mov	r0, r4
   26ac8:	4958      	ldr	r1, [pc, #352]	; (26c2c <at_parse_detect_type+0x1a8>)
   26aca:	f01a ff6d 	bl	419a8 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   26ace:	2800      	cmp	r0, #0
   26ad0:	d0ec      	beq.n	26aac <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   26ad2:	220a      	movs	r2, #10
   26ad4:	4620      	mov	r0, r4
   26ad6:	4956      	ldr	r1, [pc, #344]	; (26c30 <at_parse_detect_type+0x1ac>)
   26ad8:	f01a ff66 	bl	419a8 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   26adc:	2800      	cmp	r0, #0
   26ade:	d0e5      	beq.n	26aac <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   26ae0:	220b      	movs	r2, #11
   26ae2:	4620      	mov	r0, r4
   26ae4:	4953      	ldr	r1, [pc, #332]	; (26c34 <at_parse_detect_type+0x1b0>)
   26ae6:	f01a ff5f 	bl	419a8 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   26aea:	2800      	cmp	r0, #0
   26aec:	d0de      	beq.n	26aac <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   26aee:	2207      	movs	r2, #7
   26af0:	4620      	mov	r0, r4
   26af2:	4951      	ldr	r1, [pc, #324]	; (26c38 <at_parse_detect_type+0x1b4>)
   26af4:	f01a ff58 	bl	419a8 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   26af8:	fab0 f080 	clz	r0, r0
   26afc:	0940      	lsrs	r0, r0, #5
   26afe:	e7d6      	b.n	26aae <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   26b00:	7833      	ldrb	r3, [r6, #0]
   26b02:	b113      	cbz	r3, 26b0a <at_parse_detect_type+0x86>
	state = new_state;
   26b04:	4b46      	ldr	r3, [pc, #280]	; (26c20 <at_parse_detect_type+0x19c>)
   26b06:	2202      	movs	r2, #2
   26b08:	e043      	b.n	26b92 <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_clac(tmpstr)) {
   26b0a:	2900      	cmp	r1, #0
   26b0c:	dd39      	ble.n	26b82 <at_parse_detect_type+0xfe>
   26b0e:	4622      	mov	r2, r4
   26b10:	4616      	mov	r6, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   26b12:	f812 0b01 	ldrb.w	r0, [r2], #1
   26b16:	f018 fc01 	bl	3f31c <is_lfcr>
   26b1a:	2800      	cmp	r0, #0
   26b1c:	d1f8      	bne.n	26b10 <at_parse_detect_type+0x8c>
		str++;
	}

	if (strlen(str) < 4) {
   26b1e:	4630      	mov	r0, r6
   26b20:	f7f6 fb8f 	bl	1d242 <strlen>
   26b24:	2803      	cmp	r0, #3
   26b26:	d970      	bls.n	26c0a <at_parse_detect_type+0x186>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   26b28:	7833      	ldrb	r3, [r6, #0]
   26b2a:	4a44      	ldr	r2, [pc, #272]	; (26c3c <at_parse_detect_type+0x1b8>)
   26b2c:	5c99      	ldrb	r1, [r3, r2]
   26b2e:	f001 0103 	and.w	r1, r1, #3
   26b32:	2902      	cmp	r1, #2
   26b34:	bf08      	it	eq
   26b36:	3b20      	subeq	r3, #32
   26b38:	2b41      	cmp	r3, #65	; 0x41
   26b3a:	d166      	bne.n	26c0a <at_parse_detect_type+0x186>
   26b3c:	7873      	ldrb	r3, [r6, #1]
   26b3e:	5cd1      	ldrb	r1, [r2, r3]
   26b40:	f001 0103 	and.w	r1, r1, #3
   26b44:	2902      	cmp	r1, #2
   26b46:	bf08      	it	eq
   26b48:	3b20      	subeq	r3, #32
   26b4a:	2b54      	cmp	r3, #84	; 0x54
   26b4c:	d15d      	bne.n	26c0a <at_parse_detect_type+0x186>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   26b4e:	78b3      	ldrb	r3, [r6, #2]
   26b50:	5cd1      	ldrb	r1, [r2, r3]
   26b52:	f001 0103 	and.w	r1, r1, #3
   26b56:	2902      	cmp	r1, #2
   26b58:	bf08      	it	eq
   26b5a:	3b20      	subeq	r3, #32
   26b5c:	2b2b      	cmp	r3, #43	; 0x2b
   26b5e:	d00a      	beq.n	26b76 <at_parse_detect_type+0xf2>
   26b60:	2b25      	cmp	r3, #37	; 0x25
   26b62:	d152      	bne.n	26c0a <at_parse_detect_type+0x186>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   26b64:	78f3      	ldrb	r3, [r6, #3]
   26b66:	5cd2      	ldrb	r2, [r2, r3]
   26b68:	f002 0203 	and.w	r2, r2, #3
   26b6c:	2a02      	cmp	r2, #2
   26b6e:	bf08      	it	eq
   26b70:	3b20      	subeq	r3, #32
   26b72:	2b58      	cmp	r3, #88	; 0x58
   26b74:	d049      	beq.n	26c0a <at_parse_detect_type+0x186>
	state = new_state;
   26b76:	2209      	movs	r2, #9
		return -2;
   26b78:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   26b7c:	4b28      	ldr	r3, [pc, #160]	; (26c20 <at_parse_detect_type+0x19c>)
   26b7e:	701a      	strb	r2, [r3, #0]
}
   26b80:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   26b82:	d108      	bne.n	26b96 <at_parse_detect_type+0x112>
   26b84:	4620      	mov	r0, r4
   26b86:	f7ff fe6f 	bl	26868 <is_command>
   26b8a:	4b25      	ldr	r3, [pc, #148]	; (26c20 <at_parse_detect_type+0x19c>)
   26b8c:	2800      	cmp	r0, #0
   26b8e:	d0ba      	beq.n	26b06 <at_parse_detect_type+0x82>
	state = new_state;
   26b90:	2207      	movs	r2, #7
   26b92:	701a      	strb	r2, [r3, #0]
}
   26b94:	e78c      	b.n	26ab0 <at_parse_detect_type+0x2c>
	} else if (is_number(*tmpstr)) {
   26b96:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   26b98:	4b28      	ldr	r3, [pc, #160]	; (26c3c <at_parse_detect_type+0x1b8>)
   26b9a:	5cd3      	ldrb	r3, [r2, r3]
   26b9c:	0759      	lsls	r1, r3, #29
   26b9e:	d403      	bmi.n	26ba8 <at_parse_detect_type+0x124>
   26ba0:	2a2d      	cmp	r2, #45	; 0x2d
   26ba2:	d001      	beq.n	26ba8 <at_parse_detect_type+0x124>
   26ba4:	2a2b      	cmp	r2, #43	; 0x2b
   26ba6:	d102      	bne.n	26bae <at_parse_detect_type+0x12a>
	state = new_state;
   26ba8:	2204      	movs	r2, #4
   26baa:	4b1d      	ldr	r3, [pc, #116]	; (26c20 <at_parse_detect_type+0x19c>)
   26bac:	e7f1      	b.n	26b92 <at_parse_detect_type+0x10e>
	if (chr == '"') {
   26bae:	2a22      	cmp	r2, #34	; 0x22
   26bb0:	d006      	beq.n	26bc0 <at_parse_detect_type+0x13c>
	if (chr == '(') {
   26bb2:	2a28      	cmp	r2, #40	; 0x28
   26bb4:	d109      	bne.n	26bca <at_parse_detect_type+0x146>
   26bb6:	2201      	movs	r2, #1
   26bb8:	4b19      	ldr	r3, [pc, #100]	; (26c20 <at_parse_detect_type+0x19c>)
		tmpstr++;
   26bba:	4414      	add	r4, r2
	state = new_state;
   26bbc:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   26bbe:	e777      	b.n	26ab0 <at_parse_detect_type+0x2c>
	state = new_state;
   26bc0:	2203      	movs	r2, #3
   26bc2:	4b17      	ldr	r3, [pc, #92]	; (26c20 <at_parse_detect_type+0x19c>)
		tmpstr++;
   26bc4:	3401      	adds	r4, #1
	state = new_state;
   26bc6:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   26bc8:	e772      	b.n	26ab0 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   26bca:	4610      	mov	r0, r2
   26bcc:	f018 fba6 	bl	3f31c <is_lfcr>
   26bd0:	b178      	cbz	r0, 26bf2 <at_parse_detect_type+0x16e>
   26bd2:	4913      	ldr	r1, [pc, #76]	; (26c20 <at_parse_detect_type+0x19c>)
   26bd4:	780b      	ldrb	r3, [r1, #0]
   26bd6:	2b04      	cmp	r3, #4
   26bd8:	d108      	bne.n	26bec <at_parse_detect_type+0x168>
		while (is_lfcr(*tmpstr)) {
   26bda:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   26bde:	f018 fb9d 	bl	3f31c <is_lfcr>
   26be2:	2800      	cmp	r0, #0
   26be4:	d1f9      	bne.n	26bda <at_parse_detect_type+0x156>
	state = new_state;
   26be6:	2305      	movs	r3, #5
   26be8:	700b      	strb	r3, [r1, #0]
}
   26bea:	e761      	b.n	26ab0 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   26bec:	2b08      	cmp	r3, #8
   26bee:	f43f af5f 	beq.w	26ab0 <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26bf2:	3a2c      	subs	r2, #44	; 0x2c
   26bf4:	b2d2      	uxtb	r2, r2
   26bf6:	2a11      	cmp	r2, #17
   26bf8:	d80c      	bhi.n	26c14 <at_parse_detect_type+0x190>
   26bfa:	4b11      	ldr	r3, [pc, #68]	; (26c40 <at_parse_detect_type+0x1bc>)
   26bfc:	fa23 f202 	lsr.w	r2, r3, r2
   26c00:	07d3      	lsls	r3, r2, #31
   26c02:	d507      	bpl.n	26c14 <at_parse_detect_type+0x190>
	state = new_state;
   26c04:	2208      	movs	r2, #8
   26c06:	4b06      	ldr	r3, [pc, #24]	; (26c20 <at_parse_detect_type+0x19c>)
   26c08:	e7c3      	b.n	26b92 <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   26c0a:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26c0c:	2b2b      	cmp	r3, #43	; 0x2b
   26c0e:	d001      	beq.n	26c14 <at_parse_detect_type+0x190>
   26c10:	2b25      	cmp	r3, #37	; 0x25
   26c12:	d1c0      	bne.n	26b96 <at_parse_detect_type+0x112>
		return -1;
   26c14:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   26c18:	602c      	str	r4, [r5, #0]
		return -1;
   26c1a:	e7b1      	b.n	26b80 <at_parse_detect_type+0xfc>
   26c1c:	2001b65b 	.word	0x2001b65b
   26c20:	2001b65c 	.word	0x2001b65c
   26c24:	000453fc 	.word	0x000453fc
   26c28:	00045402 	.word	0x00045402
   26c2c:	00045408 	.word	0x00045408
   26c30:	00045414 	.word	0x00045414
   26c34:	0004541f 	.word	0x0004541f
   26c38:	0004542b 	.word	0x0004542b
   26c3c:	0004bf0e 	.word	0x0004bf0e
   26c40:	00024001 	.word	0x00024001

00026c44 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   26c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c48:	4689      	mov	r9, r1
   26c4a:	4616      	mov	r6, r2
   26c4c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   26c4e:	4680      	mov	r8, r0
{
   26c50:	b085      	sub	sp, #20
	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   26c52:	2800      	cmp	r0, #0
   26c54:	f000 8097 	beq.w	26d86 <at_parser_max_params_from_str+0x142>
   26c58:	2a00      	cmp	r2, #0
   26c5a:	f000 8094 	beq.w	26d86 <at_parser_max_params_from_str+0x142>
   26c5e:	6853      	ldr	r3, [r2, #4]
   26c60:	2b00      	cmp	r3, #0
   26c62:	f000 8090 	beq.w	26d86 <at_parser_max_params_from_str+0x142>
	state = IDLE;
   26c66:	2500      	movs	r5, #0
	int index = 0;
   26c68:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   26c6a:	4610      	mov	r0, r2
   26c6c:	f000 f8e8 	bl	26e40 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   26c70:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   26c72:	f8cd 800c 	str.w	r8, [sp, #12]
	max_params_count = MIN(max_params_count, list->param_count);
   26c76:	429f      	cmp	r7, r3
   26c78:	bf28      	it	cs
   26c7a:	461f      	movcs	r7, r3
	state = IDLE;
   26c7c:	4b43      	ldr	r3, [pc, #268]	; (26d8c <at_parser_max_params_from_str+0x148>)
   26c7e:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   26c80:	4b43      	ldr	r3, [pc, #268]	; (26d90 <at_parser_max_params_from_str+0x14c>)
   26c82:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   26c84:	9b03      	ldr	r3, [sp, #12]
   26c86:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26c88:	2a00      	cmp	r2, #0
   26c8a:	d055      	beq.n	26d38 <at_parser_max_params_from_str+0xf4>
   26c8c:	42a7      	cmp	r7, r4
   26c8e:	d953      	bls.n	26d38 <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
   26c90:	4940      	ldr	r1, [pc, #256]	; (26d94 <at_parser_max_params_from_str+0x150>)
		ret = at_parse_detect_type(&str, index);
   26c92:	a803      	add	r0, sp, #12
		if (isspace((int)*str)) {
   26c94:	5c52      	ldrb	r2, [r2, r1]
   26c96:	0711      	lsls	r1, r2, #28
			str++;
   26c98:	bf48      	it	mi
   26c9a:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   26c9c:	4621      	mov	r1, r4
			str++;
   26c9e:	bf48      	it	mi
   26ca0:	9303      	strmi	r3, [sp, #12]
		ret = at_parse_detect_type(&str, index);
   26ca2:	f7ff feef 	bl	26a84 <at_parse_detect_type>
		if (ret == -1) {
   26ca6:	1c42      	adds	r2, r0, #1
   26ca8:	d046      	beq.n	26d38 <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
   26caa:	3002      	adds	r0, #2
			index = 0;
   26cac:	bf08      	it	eq
   26cae:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   26cb0:	4632      	mov	r2, r6
   26cb2:	4621      	mov	r1, r4
   26cb4:	a803      	add	r0, sp, #12
			str = *at_params_str;
   26cb6:	bf08      	it	eq
   26cb8:	f8cd 800c 	streq.w	r8, [sp, #12]
		if (at_parse_process_element(&str, index, list) == -1) {
   26cbc:	f7ff fe02 	bl	268c4 <at_parse_process_element>
   26cc0:	3001      	adds	r0, #1
   26cc2:	d039      	beq.n	26d38 <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
   26cc4:	9a03      	ldr	r2, [sp, #12]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26cc6:	7813      	ldrb	r3, [r2, #0]
   26cc8:	3b2c      	subs	r3, #44	; 0x2c
   26cca:	b2db      	uxtb	r3, r3
   26ccc:	2b11      	cmp	r3, #17
   26cce:	d81b      	bhi.n	26d08 <at_parser_max_params_from_str+0xc4>
   26cd0:	4931      	ldr	r1, [pc, #196]	; (26d98 <at_parser_max_params_from_str+0x154>)
   26cd2:	fa21 f303 	lsr.w	r3, r1, r3
   26cd6:	07db      	lsls	r3, r3, #31
   26cd8:	d516      	bpl.n	26d08 <at_parser_max_params_from_str+0xc4>
			if (is_lfcr(*(str + 1))) {
   26cda:	7850      	ldrb	r0, [r2, #1]
   26cdc:	f018 fb1e 	bl	3f31c <is_lfcr>
   26ce0:	b178      	cbz	r0, 26d02 <at_parser_max_params_from_str+0xbe>
				index++;
   26ce2:	3401      	adds	r4, #1
				if (index == max_params) {
   26ce4:	42bc      	cmp	r4, r7
   26ce6:	d046      	beq.n	26d76 <at_parser_max_params_from_str+0x132>
				if (at_parse_detect_type(&str, index) == -1) {
   26ce8:	4621      	mov	r1, r4
   26cea:	a803      	add	r0, sp, #12
   26cec:	f7ff feca 	bl	26a84 <at_parse_detect_type>
   26cf0:	3001      	adds	r0, #1
   26cf2:	d021      	beq.n	26d38 <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
   26cf4:	4632      	mov	r2, r6
   26cf6:	4621      	mov	r1, r4
   26cf8:	a803      	add	r0, sp, #12
   26cfa:	f7ff fde3 	bl	268c4 <at_parse_process_element>
   26cfe:	3001      	adds	r0, #1
   26d00:	d01a      	beq.n	26d38 <at_parser_max_params_from_str+0xf4>
			str++;
   26d02:	9b03      	ldr	r3, [sp, #12]
   26d04:	3301      	adds	r3, #1
   26d06:	9303      	str	r3, [sp, #12]
		if (is_lfcr(*str)) {
   26d08:	f8dd b00c 	ldr.w	fp, [sp, #12]
   26d0c:	f89b 0000 	ldrb.w	r0, [fp]
   26d10:	f018 fb04 	bl	3f31c <is_lfcr>
   26d14:	b350      	cbz	r0, 26d6c <at_parser_max_params_from_str+0x128>
   26d16:	f10b 0101 	add.w	r1, fp, #1
			while (is_lfcr(str[++i])) {
   26d1a:	9101      	str	r1, [sp, #4]
   26d1c:	eba1 0a0b 	sub.w	sl, r1, fp
   26d20:	f811 2b01 	ldrb.w	r2, [r1], #1
   26d24:	4610      	mov	r0, r2
   26d26:	f018 faf9 	bl	3f31c <is_lfcr>
   26d2a:	9b01      	ldr	r3, [sp, #4]
   26d2c:	2800      	cmp	r0, #0
   26d2e:	d1f4      	bne.n	26d1a <at_parser_max_params_from_str+0xd6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26d30:	b99a      	cbnz	r2, 26d5a <at_parser_max_params_from_str+0x116>
				str += i;
   26d32:	9b03      	ldr	r3, [sp, #12]
   26d34:	4453      	add	r3, sl
   26d36:	9303      	str	r3, [sp, #12]
	*at_params_str = str;
   26d38:	9c03      	ldr	r4, [sp, #12]
	if (oversized) {
   26d3a:	b9f5      	cbnz	r5, 26d7a <at_parser_max_params_from_str+0x136>
   26d3c:	7823      	ldrb	r3, [r4, #0]
   26d3e:	b11b      	cbz	r3, 26d48 <at_parser_max_params_from_str+0x104>
	if (!is_terminated(*str) && !is_result(str)) {
   26d40:	4620      	mov	r0, r4
   26d42:	f7ff fd77 	bl	26834 <is_result>
   26d46:	b1d8      	cbz	r0, 26d80 <at_parser_max_params_from_str+0x13c>
	return 0;
   26d48:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   26d4a:	f1b9 0f00 	cmp.w	r9, #0
   26d4e:	d001      	beq.n	26d54 <at_parser_max_params_from_str+0x110>
		*next_param_str = (char *)at_params_str;
   26d50:	f8c9 4000 	str.w	r4, [r9]
	}

	return err;
}
   26d54:	b005      	add	sp, #20
   26d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26d5a:	2a2b      	cmp	r2, #43	; 0x2b
   26d5c:	d0e9      	beq.n	26d32 <at_parser_max_params_from_str+0xee>
   26d5e:	2a25      	cmp	r2, #37	; 0x25
   26d60:	d0e7      	beq.n	26d32 <at_parser_max_params_from_str+0xee>
			    is_result(str + i)) {
   26d62:	4618      	mov	r0, r3
   26d64:	f7ff fd66 	bl	26834 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   26d68:	2800      	cmp	r0, #0
   26d6a:	d1e2      	bne.n	26d32 <at_parser_max_params_from_str+0xee>
		index++;
   26d6c:	3401      	adds	r4, #1
			oversized = true;
   26d6e:	42bc      	cmp	r4, r7
   26d70:	bf08      	it	eq
   26d72:	2501      	moveq	r5, #1
   26d74:	e786      	b.n	26c84 <at_parser_max_params_from_str+0x40>
					oversized = true;
   26d76:	4605      	mov	r5, r0
   26d78:	e7de      	b.n	26d38 <at_parser_max_params_from_str+0xf4>
		return -E2BIG;
   26d7a:	f06f 0006 	mvn.w	r0, #6
   26d7e:	e7e4      	b.n	26d4a <at_parser_max_params_from_str+0x106>
		return -EAGAIN;
   26d80:	f06f 000a 	mvn.w	r0, #10
   26d84:	e7e1      	b.n	26d4a <at_parser_max_params_from_str+0x106>
		return -EINVAL;
   26d86:	f06f 0015 	mvn.w	r0, #21
   26d8a:	e7e3      	b.n	26d54 <at_parser_max_params_from_str+0x110>
   26d8c:	2001b65c 	.word	0x2001b65c
   26d90:	2001b65b 	.word	0x2001b65b
   26d94:	0004bf0e 	.word	0x0004bf0e
   26d98:	00024001 	.word	0x00024001

00026d9c <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   26d9c:	b538      	push	{r3, r4, r5, lr}
   26d9e:	460d      	mov	r5, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   26da0:	4604      	mov	r4, r0
   26da2:	b940      	cbnz	r0, 26db6 <at_params_get+0x1a>
   26da4:	4908      	ldr	r1, [pc, #32]	; (26dc8 <at_params_get+0x2c>)
   26da6:	4809      	ldr	r0, [pc, #36]	; (26dcc <at_params_get+0x30>)
   26da8:	222b      	movs	r2, #43	; 0x2b
   26daa:	f015 ff56 	bl	3cc5a <assert_print>
   26dae:	212b      	movs	r1, #43	; 0x2b
   26db0:	4805      	ldr	r0, [pc, #20]	; (26dc8 <at_params_get+0x2c>)
   26db2:	f015 ff4b 	bl	3cc4c <assert_post_action>

	if (index >= list->param_count) {
   26db6:	6823      	ldr	r3, [r4, #0]
   26db8:	42ab      	cmp	r3, r5
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   26dba:	bf8a      	itet	hi
   26dbc:	6860      	ldrhi	r0, [r4, #4]
		return NULL;
   26dbe:	2000      	movls	r0, #0
	return &param[index];
   26dc0:	eb00 1005 	addhi.w	r0, r0, r5, lsl #4
}
   26dc4:	bd38      	pop	{r3, r4, r5, pc}
   26dc6:	bf00      	nop
   26dc8:	00045456 	.word	0x00045456
   26dcc:	00044263 	.word	0x00044263

00026dd0 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   26dd0:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26dd2:	4604      	mov	r4, r0
   26dd4:	b940      	cbnz	r0, 26de8 <at_param_size+0x18>
   26dd6:	490a      	ldr	r1, [pc, #40]	; (26e00 <at_param_size+0x30>)
   26dd8:	480a      	ldr	r0, [pc, #40]	; (26e04 <at_param_size+0x34>)
   26dda:	2239      	movs	r2, #57	; 0x39
   26ddc:	f015 ff3d 	bl	3cc5a <assert_print>
   26de0:	2139      	movs	r1, #57	; 0x39
   26de2:	4807      	ldr	r0, [pc, #28]	; (26e00 <at_param_size+0x30>)
   26de4:	f015 ff32 	bl	3cc4c <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   26de8:	7823      	ldrb	r3, [r4, #0]
   26dea:	2b01      	cmp	r3, #1
   26dec:	d004      	beq.n	26df8 <at_param_size+0x28>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   26dee:	3b02      	subs	r3, #2
   26df0:	2b01      	cmp	r3, #1
   26df2:	d803      	bhi.n	26dfc <at_param_size+0x2c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   26df4:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   26df6:	bd10      	pop	{r4, pc}
		return sizeof(uint64_t);
   26df8:	2008      	movs	r0, #8
   26dfa:	e7fc      	b.n	26df6 <at_param_size+0x26>
	return 0;
   26dfc:	2000      	movs	r0, #0
   26dfe:	e7fa      	b.n	26df6 <at_param_size+0x26>
   26e00:	00045456 	.word	0x00045456
   26e04:	00044263 	.word	0x00044263

00026e08 <at_param_clear>:
{
   26e08:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26e0a:	4604      	mov	r4, r0
   26e0c:	b940      	cbnz	r0, 26e20 <at_param_clear+0x18>
   26e0e:	490a      	ldr	r1, [pc, #40]	; (26e38 <at_param_clear+0x30>)
   26e10:	480a      	ldr	r0, [pc, #40]	; (26e3c <at_param_clear+0x34>)
   26e12:	221d      	movs	r2, #29
   26e14:	f015 ff21 	bl	3cc5a <assert_print>
   26e18:	211d      	movs	r1, #29
   26e1a:	4807      	ldr	r0, [pc, #28]	; (26e38 <at_param_clear+0x30>)
   26e1c:	f015 ff16 	bl	3cc4c <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   26e20:	7823      	ldrb	r3, [r4, #0]
   26e22:	3b02      	subs	r3, #2
   26e24:	2b01      	cmp	r3, #1
   26e26:	d802      	bhi.n	26e2e <at_param_clear+0x26>
		k_free(param->value.str_val);
   26e28:	68a0      	ldr	r0, [r4, #8]
   26e2a:	f01a fb39 	bl	414a0 <k_free>
	param->value.int_val = 0;
   26e2e:	2200      	movs	r2, #0
   26e30:	2300      	movs	r3, #0
   26e32:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   26e36:	bd10      	pop	{r4, pc}
   26e38:	00045456 	.word	0x00045456
   26e3c:	00044263 	.word	0x00044263

00026e40 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   26e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (list == NULL || list->params == NULL) {
   26e44:	4604      	mov	r4, r0
   26e46:	b140      	cbz	r0, 26e5a <at_params_list_clear+0x1a>
   26e48:	6843      	ldr	r3, [r0, #4]
   26e4a:	b133      	cbz	r3, 26e5a <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   26e4c:	2600      	movs	r6, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26e4e:	4f0f      	ldr	r7, [pc, #60]	; (26e8c <at_params_list_clear+0x4c>)
   26e50:	f8df 803c 	ldr.w	r8, [pc, #60]	; 26e90 <at_params_list_clear+0x50>
	for (size_t i = 0; i < list->param_count; ++i) {
   26e54:	6823      	ldr	r3, [r4, #0]
   26e56:	429e      	cmp	r6, r3
   26e58:	d301      	bcc.n	26e5e <at_params_list_clear+0x1e>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   26e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		at_param_clear(&params[i]);
   26e5e:	6865      	ldr	r5, [r4, #4]
   26e60:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   26e64:	4628      	mov	r0, r5
   26e66:	f7ff ffcf 	bl	26e08 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26e6a:	b945      	cbnz	r5, 26e7e <at_params_list_clear+0x3e>
   26e6c:	4639      	mov	r1, r7
   26e6e:	4640      	mov	r0, r8
   26e70:	2214      	movs	r2, #20
   26e72:	f015 fef2 	bl	3cc5a <assert_print>
   26e76:	2114      	movs	r1, #20
   26e78:	4638      	mov	r0, r7
   26e7a:	f015 fee7 	bl	3cc4c <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   26e7e:	2210      	movs	r2, #16
   26e80:	2100      	movs	r1, #0
   26e82:	4628      	mov	r0, r5
   26e84:	f01a fbbd 	bl	41602 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   26e88:	3601      	adds	r6, #1
   26e8a:	e7e3      	b.n	26e54 <at_params_list_clear+0x14>
   26e8c:	00045456 	.word	0x00045456
   26e90:	00044263 	.word	0x00044263

00026e94 <at_handler_cscon>:
		event_handler_list_dispatch(&evt);
	}
}

static void at_handler_cscon(const char *response)
{
   26e94:	b510      	push	{r4, lr}
   26e96:	4604      	mov	r4, r0
   26e98:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   26e9a:	2240      	movs	r2, #64	; 0x40
   26e9c:	2100      	movs	r1, #0
   26e9e:	4668      	mov	r0, sp
   26ea0:	f01a fbaf 	bl	41602 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26ea4:	b954      	cbnz	r4, 26ebc <at_handler_cscon+0x28>
   26ea6:	490f      	ldr	r1, [pc, #60]	; (26ee4 <at_handler_cscon+0x50>)
   26ea8:	480f      	ldr	r0, [pc, #60]	; (26ee8 <at_handler_cscon+0x54>)
   26eaa:	f240 120b 	movw	r2, #267	; 0x10b
   26eae:	f015 fed4 	bl	3cc5a <assert_print>
   26eb2:	f240 110b 	movw	r1, #267	; 0x10b
   26eb6:	480b      	ldr	r0, [pc, #44]	; (26ee4 <at_handler_cscon+0x50>)
   26eb8:	f015 fec8 	bl	3cc4c <assert_post_action>

	LOG_DBG("+CSCON notification");

	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   26ebc:	2201      	movs	r2, #1
   26ebe:	4620      	mov	r0, r4
   26ec0:	a902      	add	r1, sp, #8
   26ec2:	f000 fe6f 	bl	27ba4 <parse_rrc_mode>
	if (err) {
   26ec6:	4602      	mov	r2, r0
   26ec8:	b128      	cbz	r0, 26ed6 <at_handler_cscon+0x42>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   26eca:	2145      	movs	r1, #69	; 0x45
   26ecc:	4807      	ldr	r0, [pc, #28]	; (26eec <at_handler_cscon+0x58>)
   26ece:	f015 fefe 	bl	3ccce <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_RRC_UPDATE;

	event_handler_list_dispatch(&evt);
}
   26ed2:	b010      	add	sp, #64	; 0x40
   26ed4:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   26ed6:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   26ed8:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   26eda:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   26ede:	f000 fd95 	bl	27a0c <event_handler_list_dispatch>
   26ee2:	e7f6      	b.n	26ed2 <at_handler_cscon+0x3e>
   26ee4:	00045484 	.word	0x00045484
   26ee8:	00044263 	.word	0x00044263
   26eec:	000454b2 	.word	0x000454b2

00026ef0 <at_handler_cedrxp>:

static void at_handler_cedrxp(const char *response)
{
   26ef0:	b510      	push	{r4, lr}
   26ef2:	4604      	mov	r4, r0
   26ef4:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   26ef6:	2240      	movs	r2, #64	; 0x40
   26ef8:	2100      	movs	r1, #0
   26efa:	4668      	mov	r0, sp
   26efc:	f01a fb81 	bl	41602 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26f00:	b954      	cbnz	r4, 26f18 <at_handler_cedrxp+0x28>
   26f02:	490f      	ldr	r1, [pc, #60]	; (26f40 <at_handler_cedrxp+0x50>)
   26f04:	480f      	ldr	r0, [pc, #60]	; (26f44 <at_handler_cedrxp+0x54>)
   26f06:	f240 1225 	movw	r2, #293	; 0x125
   26f0a:	f015 fea6 	bl	3cc5a <assert_print>
   26f0e:	f240 1125 	movw	r1, #293	; 0x125
   26f12:	480b      	ldr	r0, [pc, #44]	; (26f40 <at_handler_cedrxp+0x50>)
   26f14:	f015 fe9a 	bl	3cc4c <assert_post_action>

	LOG_DBG("+CEDRXP notification");

	err = parse_edrx(response, &evt.edrx_cfg);
   26f18:	4620      	mov	r0, r4
   26f1a:	a902      	add	r1, sp, #8
   26f1c:	f7f7 f960 	bl	1e1e0 <parse_edrx>
	if (err) {
   26f20:	4602      	mov	r2, r0
   26f22:	b128      	cbz	r0, 26f30 <at_handler_cedrxp+0x40>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   26f24:	2145      	movs	r1, #69	; 0x45
   26f26:	4808      	ldr	r0, [pc, #32]	; (26f48 <at_handler_cedrxp+0x58>)
   26f28:	f015 fed1 	bl	3ccce <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_EDRX_UPDATE;

	event_handler_list_dispatch(&evt);
}
   26f2c:	b010      	add	sp, #64	; 0x40
   26f2e:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   26f30:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   26f32:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   26f34:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   26f38:	f000 fd68 	bl	27a0c <event_handler_list_dispatch>
   26f3c:	e7f6      	b.n	26f2c <at_handler_cedrxp+0x3c>
   26f3e:	bf00      	nop
   26f40:	00045484 	.word	0x00045484
   26f44:	00044263 	.word	0x00044263
   26f48:	000454de 	.word	0x000454de

00026f4c <at_handler_xt3412>:

static void at_handler_xt3412(const char *response)
{
   26f4c:	b510      	push	{r4, lr}
   26f4e:	4604      	mov	r4, r0
   26f50:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   26f52:	2240      	movs	r2, #64	; 0x40
   26f54:	2100      	movs	r1, #0
   26f56:	4668      	mov	r0, sp
   26f58:	f01a fb53 	bl	41602 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26f5c:	b954      	cbnz	r4, 26f74 <at_handler_xt3412+0x28>
   26f5e:	4912      	ldr	r1, [pc, #72]	; (26fa8 <at_handler_xt3412+0x5c>)
   26f60:	4812      	ldr	r0, [pc, #72]	; (26fac <at_handler_xt3412+0x60>)
   26f62:	f240 1239 	movw	r2, #313	; 0x139
   26f66:	f015 fe78 	bl	3cc5a <assert_print>
   26f6a:	f240 1139 	movw	r1, #313	; 0x139
   26f6e:	480e      	ldr	r0, [pc, #56]	; (26fa8 <at_handler_xt3412+0x5c>)
   26f70:	f015 fe6c 	bl	3cc4c <assert_post_action>

	LOG_DBG("%%XT3412 notification");

	err = parse_xt3412(response, &evt.time);
   26f74:	4620      	mov	r0, r4
   26f76:	a902      	add	r1, sp, #8
   26f78:	f000 ff30 	bl	27ddc <parse_xt3412>
	if (err) {
   26f7c:	4602      	mov	r2, r0
   26f7e:	b128      	cbz	r0, 26f8c <at_handler_xt3412+0x40>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   26f80:	2145      	movs	r1, #69	; 0x45
   26f82:	480b      	ldr	r0, [pc, #44]	; (26fb0 <at_handler_xt3412+0x64>)
   26f84:	f015 fea3 	bl	3ccce <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;

	event_handler_list_dispatch(&evt);
}
   26f88:	b010      	add	sp, #64	; 0x40
   26f8a:	bd10      	pop	{r4, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   26f8c:	9b02      	ldr	r3, [sp, #8]
   26f8e:	9a03      	ldr	r2, [sp, #12]
   26f90:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   26f94:	3b08      	subs	r3, #8
   26f96:	4313      	orrs	r3, r2
   26f98:	d1f6      	bne.n	26f88 <at_handler_xt3412+0x3c>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   26f9a:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   26f9c:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   26f9e:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   26fa2:	f000 fd33 	bl	27a0c <event_handler_list_dispatch>
   26fa6:	e7ef      	b.n	26f88 <at_handler_xt3412+0x3c>
   26fa8:	00045484 	.word	0x00045484
   26fac:	00044263 	.word	0x00044263
   26fb0:	000454ff 	.word	0x000454ff

00026fb4 <at_handler_ncellmeas>:

static void at_handler_ncellmeas(const char *response)
{
   26fb4:	b530      	push	{r4, r5, lr}
   26fb6:	4605      	mov	r5, r0
   26fb8:	b091      	sub	sp, #68	; 0x44
	int err;
	struct lte_lc_evt evt = {0};
   26fba:	2240      	movs	r2, #64	; 0x40
   26fbc:	2100      	movs	r1, #0
   26fbe:	4668      	mov	r0, sp
   26fc0:	f01a fb1f 	bl	41602 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26fc4:	b955      	cbnz	r5, 26fdc <at_handler_ncellmeas+0x28>
   26fc6:	4921      	ldr	r1, [pc, #132]	; (2704c <at_handler_ncellmeas+0x98>)
   26fc8:	4821      	ldr	r0, [pc, #132]	; (27050 <at_handler_ncellmeas+0x9c>)
   26fca:	f44f 72aa 	mov.w	r2, #340	; 0x154
   26fce:	f015 fe44 	bl	3cc5a <assert_print>
   26fd2:	f44f 71aa 	mov.w	r1, #340	; 0x154
   26fd6:	481d      	ldr	r0, [pc, #116]	; (2704c <at_handler_ncellmeas+0x98>)
   26fd8:	f015 fe38 	bl	3cc4c <assert_post_action>

	int ncell_count = neighborcell_count_get(response);
   26fdc:	4628      	mov	r0, r5
   26fde:	f000 ff4b 	bl	27e78 <neighborcell_count_get>
   26fe2:	4604      	mov	r4, r0
	struct lte_lc_ncell *neighbor_cells = NULL;

	LOG_DBG("%%NCELLMEAS notification");
	LOG_DBG("Neighbor cell count: %d", ncell_count);

	if (event_handler_list_is_empty()) {
   26fe4:	f000 fcda 	bl	2799c <event_handler_list_is_empty>
   26fe8:	b950      	cbnz	r0, 27000 <at_handler_ncellmeas+0x4c>
		 * to receive the parsed data.
		 */
		return;
	}

	if (ncell_count != 0) {
   26fea:	b15c      	cbz	r4, 27004 <at_handler_ncellmeas+0x50>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   26fec:	4620      	mov	r0, r4
   26fee:	2110      	movs	r1, #16
   26ff0:	f01a fa61 	bl	414b6 <k_calloc>
		if (neighbor_cells == NULL) {
   26ff4:	4604      	mov	r4, r0
   26ff6:	b928      	cbnz	r0, 27004 <at_handler_ncellmeas+0x50>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   26ff8:	2145      	movs	r1, #69	; 0x45
   26ffa:	4816      	ldr	r0, [pc, #88]	; (27054 <at_handler_ncellmeas+0xa0>)
   26ffc:	f015 fe67 	bl	3ccce <z_log_minimal_printk>
	}

	if (neighbor_cells) {
		k_free(neighbor_cells);
	}
}
   27000:	b011      	add	sp, #68	; 0x44
   27002:	bd30      	pop	{r4, r5, pc}
	err = parse_ncellmeas(response, &evt.cells_info);
   27004:	4628      	mov	r0, r5
   27006:	a902      	add	r1, sp, #8
	evt.cells_info.neighbor_cells = neighbor_cells;
   27008:	940f      	str	r4, [sp, #60]	; 0x3c
	err = parse_ncellmeas(response, &evt.cells_info);
   2700a:	f000 ff51 	bl	27eb0 <parse_ncellmeas>
	switch (err) {
   2700e:	1dc3      	adds	r3, r0, #7
	err = parse_ncellmeas(response, &evt.cells_info);
   27010:	4602      	mov	r2, r0
	switch (err) {
   27012:	d006      	beq.n	27022 <at_handler_ncellmeas+0x6e>
   27014:	2801      	cmp	r0, #1
   27016:	d90d      	bls.n	27034 <at_handler_ncellmeas+0x80>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   27018:	2145      	movs	r1, #69	; 0x45
   2701a:	480f      	ldr	r0, [pc, #60]	; (27058 <at_handler_ncellmeas+0xa4>)
   2701c:	f015 fe57 	bl	3ccce <z_log_minimal_printk>
   27020:	e00e      	b.n	27040 <at_handler_ncellmeas+0x8c>
		LOG_WRN("Not all neighbor cells could be parsed");
   27022:	2157      	movs	r1, #87	; 0x57
   27024:	480d      	ldr	r0, [pc, #52]	; (2705c <at_handler_ncellmeas+0xa8>)
   27026:	f015 fe52 	bl	3ccce <z_log_minimal_printk>
		LOG_WRN("More cells than the configured max count of %d were found",
   2702a:	220a      	movs	r2, #10
   2702c:	2157      	movs	r1, #87	; 0x57
   2702e:	480c      	ldr	r0, [pc, #48]	; (27060 <at_handler_ncellmeas+0xac>)
   27030:	f015 fe4d 	bl	3ccce <z_log_minimal_printk>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   27034:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   27036:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   27038:	f88d 3000 	strb.w	r3, [sp]
		event_handler_list_dispatch(&evt);
   2703c:	f000 fce6 	bl	27a0c <event_handler_list_dispatch>
	if (neighbor_cells) {
   27040:	2c00      	cmp	r4, #0
   27042:	d0dd      	beq.n	27000 <at_handler_ncellmeas+0x4c>
		k_free(neighbor_cells);
   27044:	4620      	mov	r0, r4
   27046:	f01a fa2b 	bl	414a0 <k_free>
   2704a:	e7d9      	b.n	27000 <at_handler_ncellmeas+0x4c>
   2704c:	00045484 	.word	0x00045484
   27050:	00044263 	.word	0x00044263
   27054:	00045538 	.word	0x00045538
   27058:	000455d5 	.word	0x000455d5
   2705c:	0004556a 	.word	0x0004556a
   27060:	00045596 	.word	0x00045596

00027064 <at_handler_xmodemsleep>:

static void at_handler_xmodemsleep(const char *response)
{
   27064:	b510      	push	{r4, lr}
   27066:	4604      	mov	r4, r0
   27068:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   2706a:	2240      	movs	r2, #64	; 0x40
   2706c:	2100      	movs	r1, #0
   2706e:	4668      	mov	r0, sp
   27070:	f01a fac7 	bl	41602 <memset>

	__ASSERT_NO_MSG(response != NULL);
   27074:	b954      	cbnz	r4, 2708c <at_handler_xmodemsleep+0x28>
   27076:	4919      	ldr	r1, [pc, #100]	; (270dc <at_handler_xmodemsleep+0x78>)
   27078:	4819      	ldr	r0, [pc, #100]	; (270e0 <at_handler_xmodemsleep+0x7c>)
   2707a:	f240 1289 	movw	r2, #393	; 0x189
   2707e:	f015 fdec 	bl	3cc5a <assert_print>
   27082:	f240 1189 	movw	r1, #393	; 0x189
   27086:	4815      	ldr	r0, [pc, #84]	; (270dc <at_handler_xmodemsleep+0x78>)
   27088:	f015 fde0 	bl	3cc4c <assert_post_action>

	LOG_DBG("%%XMODEMSLEEP notification");

	err = parse_xmodemsleep(response, &evt.modem_sleep);
   2708c:	4620      	mov	r0, r4
   2708e:	a902      	add	r1, sp, #8
   27090:	f001 f858 	bl	28144 <parse_xmodemsleep>
	if (err) {
   27094:	4602      	mov	r2, r0
   27096:	b128      	cbz	r0, 270a4 <at_handler_xmodemsleep+0x40>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   27098:	2145      	movs	r1, #69	; 0x45
   2709a:	4812      	ldr	r0, [pc, #72]	; (270e4 <at_handler_xmodemsleep+0x80>)
   2709c:	f015 fe17 	bl	3ccce <z_log_minimal_printk>

		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
	}

	event_handler_list_dispatch(&evt);
}
   270a0:	b010      	add	sp, #64	; 0x40
   270a2:	bd10      	pop	{r4, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   270a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   270a8:	1e5a      	subs	r2, r3, #1
   270aa:	2a01      	cmp	r2, #1
   270ac:	d901      	bls.n	270b2 <at_handler_xmodemsleep+0x4e>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   270ae:	2b04      	cmp	r3, #4
   270b0:	d1f6      	bne.n	270a0 <at_handler_xmodemsleep+0x3c>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   270b2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   270b6:	f5a1 539c 	sub.w	r3, r1, #4992	; 0x1380
   270ba:	3b08      	subs	r3, #8
   270bc:	4313      	orrs	r3, r2
   270be:	d106      	bne.n	270ce <at_handler_xmodemsleep+0x6a>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   270c0:	2308      	movs	r3, #8
	event_handler_list_dispatch(&evt);
   270c2:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   270c4:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   270c8:	f000 fca0 	bl	27a0c <event_handler_list_dispatch>
   270cc:	e7e8      	b.n	270a0 <at_handler_xmodemsleep+0x3c>
	} else if (evt.modem_sleep.time == 0) {
   270ce:	ea51 0302 	orrs.w	r3, r1, r2
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   270d2:	bf0c      	ite	eq
   270d4:	2309      	moveq	r3, #9
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   270d6:	230a      	movne	r3, #10
   270d8:	e7f3      	b.n	270c2 <at_handler_xmodemsleep+0x5e>
   270da:	bf00      	nop
   270dc:	00045484 	.word	0x00045484
   270e0:	00044263 	.word	0x00044263
   270e4:	00045604 	.word	0x00045604

000270e8 <at_handler_mdmev>:

static void at_handler_mdmev(const char *response)
{
   270e8:	b510      	push	{r4, lr}
   270ea:	4604      	mov	r4, r0
   270ec:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   270ee:	2240      	movs	r2, #64	; 0x40
   270f0:	2100      	movs	r1, #0
   270f2:	4668      	mov	r0, sp
   270f4:	f01a fa85 	bl	41602 <memset>

	__ASSERT_NO_MSG(response != NULL);
   270f8:	b954      	cbnz	r4, 27110 <at_handler_mdmev+0x28>
   270fa:	490f      	ldr	r1, [pc, #60]	; (27138 <at_handler_mdmev+0x50>)
   270fc:	480f      	ldr	r0, [pc, #60]	; (2713c <at_handler_mdmev+0x54>)
   270fe:	f240 12b1 	movw	r2, #433	; 0x1b1
   27102:	f015 fdaa 	bl	3cc5a <assert_print>
   27106:	f240 11b1 	movw	r1, #433	; 0x1b1
   2710a:	480b      	ldr	r0, [pc, #44]	; (27138 <at_handler_mdmev+0x50>)
   2710c:	f015 fd9e 	bl	3cc4c <assert_post_action>

	LOG_DBG("%%MDMEV notification");

	err = parse_mdmev(response, &evt.modem_evt);
   27110:	4620      	mov	r0, r4
   27112:	a902      	add	r1, sp, #8
   27114:	f001 f872 	bl	281fc <parse_mdmev>
	if (err) {
   27118:	4602      	mov	r2, r0
   2711a:	b128      	cbz	r0, 27128 <at_handler_mdmev+0x40>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   2711c:	2145      	movs	r1, #69	; 0x45
   2711e:	4808      	ldr	r0, [pc, #32]	; (27140 <at_handler_mdmev+0x58>)
   27120:	f015 fdd5 	bl	3ccce <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_MODEM_EVENT;

	event_handler_list_dispatch(&evt);
}
   27124:	b010      	add	sp, #64	; 0x40
   27126:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   27128:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   2712a:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   2712c:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   27130:	f000 fc6c 	bl	27a0c <event_handler_list_dispatch>
   27134:	e7f6      	b.n	27124 <at_handler_mdmev+0x3c>
   27136:	bf00      	nop
   27138:	00045484 	.word	0x00045484
   2713c:	00044263 	.word	0x00044263
   27140:	00045645 	.word	0x00045645

00027144 <enable_notifications>:

static int enable_notifications(void)
{
   27144:	b510      	push	{r4, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   27146:	4818      	ldr	r0, [pc, #96]	; (271a8 <enable_notifications+0x64>)
{
   27148:	b08e      	sub	sp, #56	; 0x38
	err = nrf_modem_at_printf(AT_CEREG_5);
   2714a:	f00d fff9 	bl	35140 <nrf_modem_at_printf>
	if (err) {
   2714e:	4602      	mov	r2, r0
   27150:	b138      	cbz	r0, 27162 <enable_notifications+0x1e>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   27152:	4816      	ldr	r0, [pc, #88]	; (271ac <enable_notifications+0x68>)
   27154:	2145      	movs	r1, #69	; 0x45
   27156:	f015 fdba 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   2715a:	f06f 000d 	mvn.w	r0, #13
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
		}
	}

	return 0;
}
   2715e:	b00e      	add	sp, #56	; 0x38
   27160:	bd10      	pop	{r4, pc}
	err = nrf_modem_at_printf(cscon);
   27162:	4813      	ldr	r0, [pc, #76]	; (271b0 <enable_notifications+0x6c>)
   27164:	f00d ffec 	bl	35140 <nrf_modem_at_printf>
	if (err) {
   27168:	2800      	cmp	r0, #0
   2716a:	d0f8      	beq.n	2715e <enable_notifications+0x1a>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   2716c:	4602      	mov	r2, r0
   2716e:	2157      	movs	r1, #87	; 0x57
   27170:	4810      	ldr	r0, [pc, #64]	; (271b4 <enable_notifications+0x70>)
   27172:	f015 fdac 	bl	3ccce <z_log_minimal_printk>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   27176:	2157      	movs	r1, #87	; 0x57
   27178:	480f      	ldr	r0, [pc, #60]	; (271b8 <enable_notifications+0x74>)
   2717a:	f015 fda8 	bl	3ccce <z_log_minimal_printk>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   2717e:	2132      	movs	r1, #50	; 0x32
   27180:	4a0e      	ldr	r2, [pc, #56]	; (271bc <enable_notifications+0x78>)
   27182:	a801      	add	r0, sp, #4
   27184:	f00e f802 	bl	3518c <nrf_modem_at_cmd>
		if (err == 0) {
   27188:	4604      	mov	r4, r0
   2718a:	b950      	cbnz	r0, 271a2 <enable_notifications+0x5e>
			char *end = strstr(buf, "\r\nOK");
   2718c:	490c      	ldr	r1, [pc, #48]	; (271c0 <enable_notifications+0x7c>)
   2718e:	a801      	add	r0, sp, #4
   27190:	f01a fc51 	bl	41a36 <strstr>
			if (end) {
   27194:	b100      	cbz	r0, 27198 <enable_notifications+0x54>
				*end = '\0';
   27196:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
   27198:	2157      	movs	r1, #87	; 0x57
   2719a:	480a      	ldr	r0, [pc, #40]	; (271c4 <enable_notifications+0x80>)
   2719c:	aa01      	add	r2, sp, #4
   2719e:	f015 fd96 	bl	3ccce <z_log_minimal_printk>
	return 0;
   271a2:	2000      	movs	r0, #0
   271a4:	e7db      	b.n	2715e <enable_notifications+0x1a>
   271a6:	bf00      	nop
   271a8:	0004567a 	.word	0x0004567a
   271ac:	00045685 	.word	0x00045685
   271b0:	00045cef 	.word	0x00045cef
   271b4:	000456c0 	.word	0x000456c0
   271b8:	000456fd 	.word	0x000456fd
   271bc:	00045733 	.word	0x00045733
   271c0:	0004573b 	.word	0x0004573b
   271c4:	00045740 	.word	0x00045740

000271c8 <lte_lc_register_handler>:
	return err ? -EFAULT : 0;
}

void lte_lc_register_handler(lte_lc_evt_handler_t handler)
{
	if (handler == NULL) {
   271c8:	b918      	cbnz	r0, 271d2 <lte_lc_register_handler+0xa>
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
   271ca:	2149      	movs	r1, #73	; 0x49
   271cc:	4802      	ldr	r0, [pc, #8]	; (271d8 <lte_lc_register_handler+0x10>)
   271ce:	f015 bd7e 	b.w	3ccce <z_log_minimal_printk>
			"The handler can be deregistered using lte_lc_deregister_handler()");
		return;
	}

	event_handler_list_append_handler(handler);
   271d2:	f000 bbeb 	b.w	279ac <event_handler_list_append_handler>
   271d6:	bf00      	nop
   271d8:	00045768 	.word	0x00045768

000271dc <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   271dc:	2300      	movs	r3, #0
{
   271de:	b5f0      	push	{r4, r5, r6, r7, lr}
   271e0:	b08d      	sub	sp, #52	; 0x34
   271e2:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   271e4:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   271e6:	e9cd 3303 	strd	r3, r3, [sp, #12]
	char tau_ext_str[9] = {0};
   271ea:	e9cd 3306 	strd	r3, r3, [sp, #24]
	char tau_legacy_str[9] = {0};
   271ee:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	char active_time_str[9] = {0};
   271f2:	f88d 3014 	strb.w	r3, [sp, #20]
	char tau_ext_str[9] = {0};
   271f6:	f88d 3020 	strb.w	r3, [sp, #32]
	char tau_legacy_str[9] = {0};
   271fa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if ((tau == NULL) || (active_time == NULL)) {
   271fe:	2800      	cmp	r0, #0
   27200:	d054      	beq.n	272ac <lte_lc_psm_get+0xd0>
   27202:	2900      	cmp	r1, #0
   27204:	d052      	beq.n	272ac <lte_lc_psm_get+0xd0>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   27206:	4c2b      	ldr	r4, [pc, #172]	; (272b4 <lte_lc_psm_get+0xd8>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   27208:	4a2b      	ldr	r2, [pc, #172]	; (272b8 <lte_lc_psm_get+0xdc>)
   2720a:	21a0      	movs	r1, #160	; 0xa0
   2720c:	4620      	mov	r0, r4
	response[0] = '\0';
   2720e:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   27210:	f00d ffbc 	bl	3518c <nrf_modem_at_cmd>
	if (err < 0) {
   27214:	1e02      	subs	r2, r0, #0
   27216:	da08      	bge.n	2722a <lte_lc_psm_get+0x4e>
		LOG_ERR("AT command failed, error: %d", err);
   27218:	2145      	movs	r1, #69	; 0x45
   2721a:	4828      	ldr	r0, [pc, #160]	; (272bc <lte_lc_psm_get+0xe0>)
   2721c:	f015 fd57 	bl	3ccce <z_log_minimal_printk>
	for (int i = 0; i < 12; i++) {
		if (comma_ptr) {
			comma_ptr = strchr(comma_ptr + 1, ch);
		} else {
			LOG_ERR("AT command parsing failed");
			return -EFAULT;
   27220:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec\n", *tau, *active_time);

	return 0;
}
   27224:	4620      	mov	r0, r4
   27226:	b00d      	add	sp, #52	; 0x34
   27228:	bdf0      	pop	{r4, r5, r6, r7, pc}
	comma_ptr = strchr(response, ch);
   2722a:	4620      	mov	r0, r4
   2722c:	212c      	movs	r1, #44	; 0x2c
   2722e:	f01a fba6 	bl	4197e <strchr>
   27232:	270c      	movs	r7, #12
   27234:	4604      	mov	r4, r0
		if (comma_ptr) {
   27236:	b37c      	cbz	r4, 27298 <lte_lc_psm_get+0xbc>
			comma_ptr = strchr(comma_ptr + 1, ch);
   27238:	1c60      	adds	r0, r4, #1
   2723a:	212c      	movs	r1, #44	; 0x2c
   2723c:	f01a fb9f 	bl	4197e <strchr>
	for (int i = 0; i < 12; i++) {
   27240:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   27242:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   27244:	d1f7      	bne.n	27236 <lte_lc_psm_get+0x5a>
	if (comma_ptr) {
   27246:	b338      	cbz	r0, 27298 <lte_lc_psm_get+0xbc>
		strncpy(active_time_str, comma_ptr + 2, 8);
   27248:	1c81      	adds	r1, r0, #2
   2724a:	2208      	movs	r2, #8
   2724c:	a803      	add	r0, sp, #12
   2724e:	f01a fbbf 	bl	419d0 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   27252:	1c60      	adds	r0, r4, #1
   27254:	212c      	movs	r1, #44	; 0x2c
   27256:	f01a fb92 	bl	4197e <strchr>
	if (comma_ptr) {
   2725a:	4604      	mov	r4, r0
   2725c:	b1e0      	cbz	r0, 27298 <lte_lc_psm_get+0xbc>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   2725e:	1c81      	adds	r1, r0, #2
   27260:	2208      	movs	r2, #8
   27262:	a806      	add	r0, sp, #24
   27264:	f01a fbb4 	bl	419d0 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   27268:	212c      	movs	r1, #44	; 0x2c
   2726a:	1c60      	adds	r0, r4, #1
   2726c:	f01a fb87 	bl	4197e <strchr>
	if (comma_ptr) {
   27270:	b120      	cbz	r0, 2727c <lte_lc_psm_get+0xa0>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   27272:	1c81      	adds	r1, r0, #2
   27274:	2208      	movs	r2, #8
   27276:	a809      	add	r0, sp, #36	; 0x24
   27278:	f01a fbaa 	bl	419d0 <strncpy>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   2727c:	ab01      	add	r3, sp, #4
   2727e:	aa09      	add	r2, sp, #36	; 0x24
   27280:	a906      	add	r1, sp, #24
   27282:	a803      	add	r0, sp, #12
   27284:	f000 fc00 	bl	27a88 <parse_psm>
	if (err) {
   27288:	4604      	mov	r4, r0
   2728a:	b150      	cbz	r0, 272a2 <lte_lc_psm_get+0xc6>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   2728c:	4602      	mov	r2, r0
   2728e:	2145      	movs	r1, #69	; 0x45
   27290:	480b      	ldr	r0, [pc, #44]	; (272c0 <lte_lc_psm_get+0xe4>)
   27292:	f015 fd1c 	bl	3ccce <z_log_minimal_printk>
		return err;
   27296:	e7c5      	b.n	27224 <lte_lc_psm_get+0x48>
			LOG_ERR("AT command parsing failed");
   27298:	2145      	movs	r1, #69	; 0x45
   2729a:	480a      	ldr	r0, [pc, #40]	; (272c4 <lte_lc_psm_get+0xe8>)
   2729c:	f015 fd17 	bl	3ccce <z_log_minimal_printk>
   272a0:	e7be      	b.n	27220 <lte_lc_psm_get+0x44>
	*tau = psm_cfg.tau;
   272a2:	9b01      	ldr	r3, [sp, #4]
   272a4:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   272a6:	9b02      	ldr	r3, [sp, #8]
   272a8:	602b      	str	r3, [r5, #0]
	return 0;
   272aa:	e7bb      	b.n	27224 <lte_lc_psm_get+0x48>
		return -EINVAL;
   272ac:	f06f 0415 	mvn.w	r4, #21
   272b0:	e7b8      	b.n	27224 <lte_lc_psm_get+0x48>
   272b2:	bf00      	nop
   272b4:	2001b662 	.word	0x2001b662
   272b8:	000457df 	.word	0x000457df
   272bc:	000457ec 	.word	0x000457ec
   272c0:	0004582d 	.word	0x0004582d
   272c4:	0004580e 	.word	0x0004580e

000272c8 <at_handler_cereg>:
{
   272c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   272ca:	4604      	mov	r4, r0
   272cc:	b0a3      	sub	sp, #140	; 0x8c
	struct lte_lc_evt evt = {0};
   272ce:	2240      	movs	r2, #64	; 0x40
   272d0:	2100      	movs	r1, #0
   272d2:	a812      	add	r0, sp, #72	; 0x48
   272d4:	f01a f995 	bl	41602 <memset>
	__ASSERT_NO_MSG(response != NULL);
   272d8:	b944      	cbnz	r4, 272ec <at_handler_cereg+0x24>
   272da:	494e      	ldr	r1, [pc, #312]	; (27414 <at_handler_cereg+0x14c>)
   272dc:	484e      	ldr	r0, [pc, #312]	; (27418 <at_handler_cereg+0x150>)
   272de:	2292      	movs	r2, #146	; 0x92
   272e0:	f015 fcbb 	bl	3cc5a <assert_print>
   272e4:	2192      	movs	r1, #146	; 0x92
   272e6:	484b      	ldr	r0, [pc, #300]	; (27414 <at_handler_cereg+0x14c>)
   272e8:	f015 fcb0 	bl	3cc4c <assert_post_action>
	enum lte_lc_nw_reg_status reg_status = 0;
   272ec:	2500      	movs	r5, #0
	struct lte_lc_cell cell = {0};
   272ee:	2230      	movs	r2, #48	; 0x30
   272f0:	4629      	mov	r1, r5
   272f2:	a806      	add	r0, sp, #24
	enum lte_lc_nw_reg_status reg_status = 0;
   272f4:	f88d 500e 	strb.w	r5, [sp, #14]
	struct lte_lc_psm_cfg psm_cfg = {0};
   272f8:	af04      	add	r7, sp, #16
	struct lte_lc_cell cell = {0};
   272fa:	f01a f982 	bl	41602 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   272fe:	f10d 030f 	add.w	r3, sp, #15
	struct lte_lc_psm_cfg psm_cfg = {0};
   27302:	607d      	str	r5, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   27304:	f10d 020e 	add.w	r2, sp, #14
   27308:	9300      	str	r3, [sp, #0]
   2730a:	2101      	movs	r1, #1
   2730c:	4620      	mov	r0, r4
   2730e:	ab06      	add	r3, sp, #24
	struct lte_lc_psm_cfg psm_cfg = {0};
   27310:	9504      	str	r5, [sp, #16]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   27312:	f000 fc8f 	bl	27c34 <parse_cereg>
	if (err) {
   27316:	4602      	mov	r2, r0
   27318:	b130      	cbz	r0, 27328 <at_handler_cereg+0x60>
		LOG_ERR("Failed to parse notification (error %d): %s",
   2731a:	4623      	mov	r3, r4
   2731c:	2145      	movs	r1, #69	; 0x45
   2731e:	483f      	ldr	r0, [pc, #252]	; (2741c <at_handler_cereg+0x154>)
   27320:	f015 fcd5 	bl	3ccce <z_log_minimal_printk>
}
   27324:	b023      	add	sp, #140	; 0x8c
   27326:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   27328:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2732c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   27330:	2b01      	cmp	r3, #1
   27332:	d105      	bne.n	27340 <at_handler_cereg+0x78>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   27334:	9b08      	ldr	r3, [sp, #32]
   27336:	3301      	adds	r3, #1
   27338:	d053      	beq.n	273e2 <at_handler_cereg+0x11a>
	z_impl_k_sem_give(sem);
   2733a:	4839      	ldr	r0, [pc, #228]	; (27420 <at_handler_cereg+0x158>)
   2733c:	f00f fda8 	bl	36e90 <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
   27340:	f000 fb2c 	bl	2799c <event_handler_list_is_empty>
   27344:	2800      	cmp	r0, #0
   27346:	d1ed      	bne.n	27324 <at_handler_cereg+0x5c>
	if (reg_status != prev_reg_status) {
   27348:	4a36      	ldr	r2, [pc, #216]	; (27424 <at_handler_cereg+0x15c>)
   2734a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2734e:	7811      	ldrb	r1, [r2, #0]
   27350:	4299      	cmp	r1, r3
   27352:	d007      	beq.n	27364 <at_handler_cereg+0x9c>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   27354:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   27358:	a812      	add	r0, sp, #72	; 0x48
		prev_reg_status = reg_status;
   2735a:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   2735c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   27360:	f000 fb54 	bl	27a0c <event_handler_list_dispatch>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   27364:	2230      	movs	r2, #48	; 0x30
   27366:	4930      	ldr	r1, [pc, #192]	; (27428 <at_handler_cereg+0x160>)
   27368:	a806      	add	r0, sp, #24
   2736a:	f01a f91a 	bl	415a2 <memcmp>
   2736e:	b1c8      	cbz	r0, 273a4 <at_handler_cereg+0xdc>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   27370:	2304      	movs	r3, #4
   27372:	4d2d      	ldr	r5, [pc, #180]	; (27428 <at_handler_cereg+0x160>)
   27374:	ac06      	add	r4, sp, #24
   27376:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   2737a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2737c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2737e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   27380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   27382:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   27386:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   2738a:	ae14      	add	r6, sp, #80	; 0x50
   2738c:	ad06      	add	r5, sp, #24
   2738e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27390:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   27392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27394:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   27396:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2739a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   2739e:	a812      	add	r0, sp, #72	; 0x48
   273a0:	f000 fb34 	bl	27a0c <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   273a4:	4a21      	ldr	r2, [pc, #132]	; (2742c <at_handler_cereg+0x164>)
   273a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   273aa:	7811      	ldrb	r1, [r2, #0]
   273ac:	4299      	cmp	r1, r3
   273ae:	d008      	beq.n	273c2 <at_handler_cereg+0xfa>
		prev_lte_mode = lte_mode;
   273b0:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   273b2:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   273b4:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   273b6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		evt.lte_mode = lte_mode;
   273ba:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   273be:	f000 fb25 	bl	27a0c <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   273c2:	f89d 400e 	ldrb.w	r4, [sp, #14]
   273c6:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   273ca:	2c01      	cmp	r4, #1
   273cc:	d1aa      	bne.n	27324 <at_handler_cereg+0x5c>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   273ce:	4638      	mov	r0, r7
   273d0:	a905      	add	r1, sp, #20
   273d2:	f7ff ff03 	bl	271dc <lte_lc_psm_get>
	if (err) {
   273d6:	b140      	cbz	r0, 273ea <at_handler_cereg+0x122>
		LOG_ERR("Failed to get PSM information");
   273d8:	2145      	movs	r1, #69	; 0x45
   273da:	4815      	ldr	r0, [pc, #84]	; (27430 <at_handler_cereg+0x168>)
   273dc:	f015 fc77 	bl	3ccce <z_log_minimal_printk>
		return;
   273e0:	e7a0      	b.n	27324 <at_handler_cereg+0x5c>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   273e2:	2304      	movs	r3, #4
   273e4:	f88d 300e 	strb.w	r3, [sp, #14]
   273e8:	e7aa      	b.n	27340 <at_handler_cereg+0x78>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   273ea:	4d12      	ldr	r5, [pc, #72]	; (27434 <at_handler_cereg+0x16c>)
   273ec:	2208      	movs	r2, #8
   273ee:	4629      	mov	r1, r5
   273f0:	4638      	mov	r0, r7
   273f2:	f01a f8d6 	bl	415a2 <memcmp>
   273f6:	2800      	cmp	r0, #0
   273f8:	d094      	beq.n	27324 <at_handler_cereg+0x5c>
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   273fa:	e897 0003 	ldmia.w	r7, {r0, r1}
   273fe:	ab14      	add	r3, sp, #80	; 0x50
   27400:	e885 0003 	stmia.w	r5, {r0, r1}
   27404:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   27408:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   2740a:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   2740e:	f000 fafd 	bl	27a0c <event_handler_list_dispatch>
   27412:	e787      	b.n	27324 <at_handler_cereg+0x5c>
   27414:	00045484 	.word	0x00045484
   27418:	00044263 	.word	0x00044263
   2741c:	0004585f 	.word	0x0004585f
   27420:	200193f0 	.word	0x200193f0
   27424:	2001b661 	.word	0x2001b661
   27428:	200154e0 	.word	0x200154e0
   2742c:	2001b660 	.word	0x2001b660
   27430:	00045890 	.word	0x00045890
   27434:	20019408 	.word	0x20019408

00027438 <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   27438:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   2743a:	2400      	movs	r4, #0

	if (status == NULL) {
   2743c:	4605      	mov	r5, r0
	uint32_t cell_id = 0;
   2743e:	9401      	str	r4, [sp, #4]
	if (status == NULL) {
   27440:	b1a8      	cbz	r0, 2746e <lte_lc_nw_reg_status_get+0x36>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   27442:	f10d 0202 	add.w	r2, sp, #2
   27446:	490b      	ldr	r1, [pc, #44]	; (27474 <lte_lc_nw_reg_status_get+0x3c>)
   27448:	480b      	ldr	r0, [pc, #44]	; (27478 <lte_lc_nw_reg_status_get+0x40>)
   2744a:	ab01      	add	r3, sp, #4
   2744c:	f00d ff0a 	bl	35264 <nrf_modem_at_scanf>
		"%u,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   27450:	1e02      	subs	r2, r0, #0
   27452:	dc07      	bgt.n	27464 <lte_lc_nw_reg_status_get+0x2c>
		LOG_ERR("Could not get registration status, error: %d", err);
   27454:	4809      	ldr	r0, [pc, #36]	; (2747c <lte_lc_nw_reg_status_get+0x44>)
   27456:	2145      	movs	r1, #69	; 0x45
   27458:	f015 fc39 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   2745c:	f06f 000d 	mvn.w	r0, #13
	}

	*status = status_tmp;

	return 0;
}
   27460:	b003      	add	sp, #12
   27462:	bd30      	pop	{r4, r5, pc}
	*status = status_tmp;
   27464:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	return 0;
   27468:	4620      	mov	r0, r4
	*status = status_tmp;
   2746a:	702b      	strb	r3, [r5, #0]
	return 0;
   2746c:	e7f8      	b.n	27460 <lte_lc_nw_reg_status_get+0x28>
		return -EINVAL;
   2746e:	f06f 0015 	mvn.w	r0, #21
   27472:	e7f5      	b.n	27460 <lte_lc_nw_reg_status_get+0x28>
   27474:	000458b3 	.word	0x000458b3
   27478:	000458cf 	.word	0x000458cf
   2747c:	000458d9 	.word	0x000458d9

00027480 <lte_lc_system_mode_set>:
int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
	int err;

	switch (mode) {
   27480:	2807      	cmp	r0, #7
{
   27482:	b538      	push	{r3, r4, r5, lr}
   27484:	4605      	mov	r5, r0
   27486:	460c      	mov	r4, r1
	switch (mode) {
   27488:	d907      	bls.n	2749a <lte_lc_system_mode_set+0x1a>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   2748a:	2145      	movs	r1, #69	; 0x45
   2748c:	4602      	mov	r2, r0
   2748e:	4813      	ldr	r0, [pc, #76]	; (274dc <lte_lc_system_mode_set+0x5c>)
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   27490:	f015 fc1d 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   27494:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   27498:	bd38      	pop	{r3, r4, r5, pc}
	switch (preference) {
   2749a:	2904      	cmp	r1, #4
   2749c:	d903      	bls.n	274a6 <lte_lc_system_mode_set+0x26>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   2749e:	460a      	mov	r2, r1
   274a0:	480f      	ldr	r0, [pc, #60]	; (274e0 <lte_lc_system_mode_set+0x60>)
   274a2:	2145      	movs	r1, #69	; 0x45
   274a4:	e7f4      	b.n	27490 <lte_lc_system_mode_set+0x10>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   274a6:	4b0f      	ldr	r3, [pc, #60]	; (274e4 <lte_lc_system_mode_set+0x64>)
   274a8:	5c5a      	ldrb	r2, [r3, r1]
   274aa:	4b0f      	ldr	r3, [pc, #60]	; (274e8 <lte_lc_system_mode_set+0x68>)
   274ac:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   274b0:	480e      	ldr	r0, [pc, #56]	; (274ec <lte_lc_system_mode_set+0x6c>)
   274b2:	f00d fe45 	bl	35140 <nrf_modem_at_printf>
	if (err) {
   274b6:	b138      	cbz	r0, 274c8 <lte_lc_system_mode_set+0x48>
		LOG_ERR("Could not send AT command, error: %d", err);
   274b8:	4602      	mov	r2, r0
   274ba:	2145      	movs	r1, #69	; 0x45
   274bc:	480c      	ldr	r0, [pc, #48]	; (274f0 <lte_lc_system_mode_set+0x70>)
   274be:	f015 fc06 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   274c2:	f06f 000d 	mvn.w	r0, #13
   274c6:	e7e7      	b.n	27498 <lte_lc_system_mode_set+0x18>
	sys_mode_current = mode;
   274c8:	4b0a      	ldr	r3, [pc, #40]	; (274f4 <lte_lc_system_mode_set+0x74>)
   274ca:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   274cc:	4b0a      	ldr	r3, [pc, #40]	; (274f8 <lte_lc_system_mode_set+0x78>)
   274ce:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   274d0:	4b0a      	ldr	r3, [pc, #40]	; (274fc <lte_lc_system_mode_set+0x7c>)
   274d2:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   274d4:	4b0a      	ldr	r3, [pc, #40]	; (27500 <lte_lc_system_mode_set+0x80>)
   274d6:	701c      	strb	r4, [r3, #0]
	return 0;
   274d8:	e7de      	b.n	27498 <lte_lc_system_mode_set+0x18>
   274da:	bf00      	nop
   274dc:	0004590b 	.word	0x0004590b
   274e0:	00045932 	.word	0x00045932
   274e4:	00045cfa 	.word	0x00045cfa
   274e8:	00042ea8 	.word	0x00042ea8
   274ec:	0004595c 	.word	0x0004595c
   274f0:	00045972 	.word	0x00045972
   274f4:	2001b702 	.word	0x2001b702
   274f8:	20014c44 	.word	0x20014c44
   274fc:	2001b65e 	.word	0x2001b65e
   27500:	2001b65f 	.word	0x2001b65f

00027504 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   27504:	b530      	push	{r4, r5, lr}
   27506:	460c      	mov	r4, r1
	int err, mode_bitmask = 0;
	int ltem_mode, nbiot_mode, gps_mode, mode_preference;

	if (mode == NULL) {
   27508:	4605      	mov	r5, r0
{
   2750a:	b087      	sub	sp, #28
	if (mode == NULL) {
   2750c:	2800      	cmp	r0, #0
   2750e:	d06b      	beq.n	275e8 <lte_lc_system_mode_get+0xe4>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   27510:	ab05      	add	r3, sp, #20
   27512:	9301      	str	r3, [sp, #4]
   27514:	ab04      	add	r3, sp, #16
   27516:	9300      	str	r3, [sp, #0]
   27518:	aa02      	add	r2, sp, #8
   2751a:	4935      	ldr	r1, [pc, #212]	; (275f0 <lte_lc_system_mode_get+0xec>)
   2751c:	4835      	ldr	r0, [pc, #212]	; (275f4 <lte_lc_system_mode_get+0xf0>)
   2751e:	ab03      	add	r3, sp, #12
   27520:	f00d fea0 	bl	35264 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   27524:	2804      	cmp	r0, #4
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   27526:	4602      	mov	r2, r0
	if (err != 4) {
   27528:	d004      	beq.n	27534 <lte_lc_system_mode_get+0x30>
		LOG_ERR("Failed to get system mode, error: %d", err);
   2752a:	2145      	movs	r1, #69	; 0x45
   2752c:	4832      	ldr	r0, [pc, #200]	; (275f8 <lte_lc_system_mode_get+0xf4>)
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   2752e:	f015 fbce 	bl	3ccce <z_log_minimal_printk>
			return -EFAULT;
   27532:	e039      	b.n	275a8 <lte_lc_system_mode_get+0xa4>
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   27534:	9b02      	ldr	r3, [sp, #8]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   27536:	9a03      	ldr	r2, [sp, #12]
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   27538:	2b00      	cmp	r3, #0
   2753a:	bf14      	ite	ne
   2753c:	2302      	movne	r3, #2
   2753e:	2300      	moveq	r3, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   27540:	2a00      	cmp	r2, #0
   27542:	bf14      	ite	ne
   27544:	2204      	movne	r2, #4
   27546:	2200      	moveq	r2, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   27548:	4313      	orrs	r3, r2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   2754a:	9a04      	ldr	r2, [sp, #16]
   2754c:	2a00      	cmp	r2, #0
   2754e:	bf14      	ite	ne
   27550:	2208      	movne	r2, #8
   27552:	2200      	moveq	r2, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   27554:	4313      	orrs	r3, r2
	switch (mode_bitmask) {
   27556:	2b0e      	cmp	r3, #14
   27558:	d822      	bhi.n	275a0 <lte_lc_system_mode_get+0x9c>
   2755a:	e8df f003 	tbb	[pc, r3]
   2755e:	2108      	.short	0x2108
   27560:	21152113 	.word	0x21152113
   27564:	2117211d 	.word	0x2117211d
   27568:	211b2119 	.word	0x211b2119
   2756c:	1f          	.byte	0x1f
   2756d:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   2756e:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   27570:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   27572:	b1fc      	cbz	r4, 275b4 <lte_lc_system_mode_get+0xb0>
		switch (mode_preference) {
   27574:	9a05      	ldr	r2, [sp, #20]
   27576:	2a04      	cmp	r2, #4
   27578:	d833      	bhi.n	275e2 <lte_lc_system_mode_get+0xde>
   2757a:	e8df f002 	tbb	[pc, r2]
   2757e:	2a19      	.short	0x2a19
   27580:	2e2c      	.short	0x2e2c
   27582:	30          	.byte	0x30
   27583:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   27584:	2301      	movs	r3, #1
   27586:	e7f3      	b.n	27570 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   27588:	2302      	movs	r3, #2
   2758a:	e7f1      	b.n	27570 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   2758c:	2303      	movs	r3, #3
   2758e:	e7ef      	b.n	27570 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   27590:	2304      	movs	r3, #4
   27592:	e7ed      	b.n	27570 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   27594:	2305      	movs	r3, #5
   27596:	e7eb      	b.n	27570 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   27598:	2306      	movs	r3, #6
   2759a:	e7e9      	b.n	27570 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   2759c:	2307      	movs	r3, #7
   2759e:	e7e7      	b.n	27570 <lte_lc_system_mode_get+0x6c>
		LOG_ERR("Invalid system mode, assuming parsing error");
   275a0:	2145      	movs	r1, #69	; 0x45
   275a2:	4816      	ldr	r0, [pc, #88]	; (275fc <lte_lc_system_mode_get+0xf8>)
   275a4:	f015 fb93 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   275a8:	f06f 000d 	mvn.w	r0, #13
			mode_pref_current, *preference);
		mode_pref_current = *preference;
	}

	return 0;
}
   275ac:	b007      	add	sp, #28
   275ae:	bd30      	pop	{r4, r5, pc}
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   275b0:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   275b2:	7023      	strb	r3, [r4, #0]
	if (sys_mode_current != *mode) {
   275b4:	4b12      	ldr	r3, [pc, #72]	; (27600 <lte_lc_system_mode_get+0xfc>)
   275b6:	782a      	ldrb	r2, [r5, #0]
   275b8:	7819      	ldrb	r1, [r3, #0]
   275ba:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   275bc:	bf18      	it	ne
   275be:	701a      	strbne	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   275c0:	b12c      	cbz	r4, 275ce <lte_lc_system_mode_get+0xca>
   275c2:	4b10      	ldr	r3, [pc, #64]	; (27604 <lte_lc_system_mode_get+0x100>)
   275c4:	7822      	ldrb	r2, [r4, #0]
   275c6:	7819      	ldrb	r1, [r3, #0]
   275c8:	4291      	cmp	r1, r2
   275ca:	d000      	beq.n	275ce <lte_lc_system_mode_get+0xca>
		mode_pref_current = *preference;
   275cc:	701a      	strb	r2, [r3, #0]
	return 0;
   275ce:	2000      	movs	r0, #0
   275d0:	e7ec      	b.n	275ac <lte_lc_system_mode_get+0xa8>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   275d2:	2301      	movs	r3, #1
   275d4:	e7ed      	b.n	275b2 <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   275d6:	2302      	movs	r3, #2
   275d8:	e7eb      	b.n	275b2 <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   275da:	2303      	movs	r3, #3
   275dc:	e7e9      	b.n	275b2 <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   275de:	2304      	movs	r3, #4
   275e0:	e7e7      	b.n	275b2 <lte_lc_system_mode_get+0xae>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   275e2:	2145      	movs	r1, #69	; 0x45
   275e4:	4808      	ldr	r0, [pc, #32]	; (27608 <lte_lc_system_mode_get+0x104>)
   275e6:	e7a2      	b.n	2752e <lte_lc_system_mode_get+0x2a>
		return -EINVAL;
   275e8:	f06f 0015 	mvn.w	r0, #21
   275ec:	e7de      	b.n	275ac <lte_lc_system_mode_get+0xa8>
   275ee:	bf00      	nop
   275f0:	0004599c 	.word	0x0004599c
   275f4:	000459b7 	.word	0x000459b7
   275f8:	000459c7 	.word	0x000459c7
   275fc:	000459f1 	.word	0x000459f1
   27600:	2001b702 	.word	0x2001b702
   27604:	2001b65e 	.word	0x2001b65e
   27608:	00045a22 	.word	0x00045a22

0002760c <init_and_config>:
{
   2760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (is_initialized) {
   2760e:	4d1b      	ldr	r5, [pc, #108]	; (2767c <init_and_config+0x70>)
   27610:	7829      	ldrb	r1, [r5, #0]
   27612:	bb81      	cbnz	r1, 27676 <init_and_config+0x6a>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   27614:	4e1a      	ldr	r6, [pc, #104]	; (27680 <init_and_config+0x74>)
   27616:	4f1b      	ldr	r7, [pc, #108]	; (27684 <init_and_config+0x78>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   27618:	2201      	movs	r2, #1
   2761a:	481b      	ldr	r0, [pc, #108]	; (27688 <init_and_config+0x7c>)
   2761c:	f019 fdc5 	bl	411aa <z_impl_k_sem_init>
   27620:	4631      	mov	r1, r6
   27622:	4638      	mov	r0, r7
   27624:	f7ff ff6e 	bl	27504 <lte_lc_system_mode_get>
	if (err) {
   27628:	4604      	mov	r4, r0
   2762a:	b130      	cbz	r0, 2763a <init_and_config+0x2e>
		LOG_ERR("Could not get current system mode, error: %d", err);
   2762c:	2145      	movs	r1, #69	; 0x45
   2762e:	4602      	mov	r2, r0
   27630:	4816      	ldr	r0, [pc, #88]	; (2768c <init_and_config+0x80>)
			LOG_ERR("Could not set system mode, error: %d", err);
   27632:	f015 fb4c 	bl	3ccce <z_log_minimal_printk>
}
   27636:	4620      	mov	r0, r4
   27638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sys_mode_current != sys_mode_target) ||
   2763a:	4b15      	ldr	r3, [pc, #84]	; (27690 <init_and_config+0x84>)
   2763c:	7818      	ldrb	r0, [r3, #0]
	    (mode_pref_current != mode_pref_target)) {
   2763e:	4b15      	ldr	r3, [pc, #84]	; (27694 <init_and_config+0x88>)
   27640:	7819      	ldrb	r1, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   27642:	783b      	ldrb	r3, [r7, #0]
   27644:	4283      	cmp	r3, r0
   27646:	d102      	bne.n	2764e <init_and_config+0x42>
   27648:	7833      	ldrb	r3, [r6, #0]
   2764a:	428b      	cmp	r3, r1
   2764c:	d007      	beq.n	2765e <init_and_config+0x52>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   2764e:	f7ff ff17 	bl	27480 <lte_lc_system_mode_set>
		if (err) {
   27652:	4604      	mov	r4, r0
   27654:	b118      	cbz	r0, 2765e <init_and_config+0x52>
			LOG_ERR("Could not set system mode, error: %d", err);
   27656:	4602      	mov	r2, r0
   27658:	2145      	movs	r1, #69	; 0x45
   2765a:	480f      	ldr	r0, [pc, #60]	; (27698 <init_and_config+0x8c>)
   2765c:	e7e9      	b.n	27632 <init_and_config+0x26>
	err = enable_notifications();
   2765e:	f7ff fd71 	bl	27144 <enable_notifications>
	if (err) {
   27662:	4604      	mov	r4, r0
   27664:	b120      	cbz	r0, 27670 <init_and_config+0x64>
		LOG_ERR("Failed to enable notifications");
   27666:	2145      	movs	r1, #69	; 0x45
   27668:	480c      	ldr	r0, [pc, #48]	; (2769c <init_and_config+0x90>)
   2766a:	f015 fb30 	bl	3ccce <z_log_minimal_printk>
		return err;
   2766e:	e7e2      	b.n	27636 <init_and_config+0x2a>
	is_initialized = true;
   27670:	2301      	movs	r3, #1
   27672:	702b      	strb	r3, [r5, #0]
	return 0;
   27674:	e7df      	b.n	27636 <init_and_config+0x2a>
		return 0;
   27676:	2400      	movs	r4, #0
   27678:	e7dd      	b.n	27636 <init_and_config+0x2a>
   2767a:	bf00      	nop
   2767c:	2001b65d 	.word	0x2001b65d
   27680:	2001b65e 	.word	0x2001b65e
   27684:	2001b702 	.word	0x2001b702
   27688:	200193f0 	.word	0x200193f0
   2768c:	00045a46 	.word	0x00045a46
   27690:	20014c44 	.word	0x20014c44
   27694:	2001b65f 	.word	0x2001b65f
   27698:	00045a78 	.word	0x00045a78
   2769c:	00045aa2 	.word	0x00045aa2

000276a0 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   276a0:	b513      	push	{r0, r1, r4, lr}
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   276a2:	4604      	mov	r4, r0
   276a4:	b1a8      	cbz	r0, 276d2 <lte_lc_func_mode_get+0x32>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   276a6:	f10d 0206 	add.w	r2, sp, #6
   276aa:	490b      	ldr	r1, [pc, #44]	; (276d8 <lte_lc_func_mode_get+0x38>)
   276ac:	480b      	ldr	r0, [pc, #44]	; (276dc <lte_lc_func_mode_get+0x3c>)
   276ae:	f00d fdd9 	bl	35264 <nrf_modem_at_scanf>
	if (err != 1) {
   276b2:	2801      	cmp	r0, #1
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   276b4:	4602      	mov	r2, r0
	if (err != 1) {
   276b6:	d007      	beq.n	276c8 <lte_lc_func_mode_get+0x28>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   276b8:	4809      	ldr	r0, [pc, #36]	; (276e0 <lte_lc_func_mode_get+0x40>)
   276ba:	2145      	movs	r1, #69	; 0x45
   276bc:	f015 fb07 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   276c0:	f06f 000d 	mvn.w	r0, #13
	}

	*mode = mode_tmp;

	return 0;
}
   276c4:	b002      	add	sp, #8
   276c6:	bd10      	pop	{r4, pc}
	*mode = mode_tmp;
   276c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return 0;
   276cc:	2000      	movs	r0, #0
	*mode = mode_tmp;
   276ce:	7023      	strb	r3, [r4, #0]
	return 0;
   276d0:	e7f8      	b.n	276c4 <lte_lc_func_mode_get+0x24>
		return -EINVAL;
   276d2:	f06f 0015 	mvn.w	r0, #21
   276d6:	e7f5      	b.n	276c4 <lte_lc_func_mode_get+0x24>
   276d8:	00045ac6 	.word	0x00045ac6
   276dc:	00045ad1 	.word	0x00045ad1
   276e0:	00045ada 	.word	0x00045ada

000276e4 <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
	int err;

	switch (mode) {
   276e4:	2804      	cmp	r0, #4
{
   276e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   276ea:	4604      	mov	r4, r0
	switch (mode) {
   276ec:	d819      	bhi.n	27722 <lte_lc_func_mode_set+0x3e>
   276ee:	2804      	cmp	r0, #4
   276f0:	d81c      	bhi.n	2772c <lte_lc_func_mode_set+0x48>
   276f2:	e8df f000 	tbb	[pc, r0]
   276f6:	0b25      	.short	0x0b25
   276f8:	1b25      	.short	0x1b25
   276fa:	25          	.byte	0x25
   276fb:	00          	.byte	0x00
   276fc:	2201      	movs	r2, #1
   276fe:	fa02 f303 	lsl.w	r3, r2, r3
   27702:	4a1f      	ldr	r2, [pc, #124]	; (27780 <lte_lc_func_mode_set+0x9c>)
   27704:	4213      	tst	r3, r2
   27706:	d11b      	bne.n	27740 <lte_lc_func_mode_set+0x5c>
   27708:	079b      	lsls	r3, r3, #30
   2770a:	d50f      	bpl.n	2772c <lte_lc_func_mode_set+0x48>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   2770c:	f7ff fd1a 	bl	27144 <enable_notifications>
		if (err) {
   27710:	4602      	mov	r2, r0
   27712:	b1a8      	cbz	r0, 27740 <lte_lc_func_mode_set+0x5c>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   27714:	2145      	movs	r1, #69	; 0x45
   27716:	481b      	ldr	r0, [pc, #108]	; (27784 <lte_lc_func_mode_set+0xa0>)
   27718:	f015 fad9 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
	}

	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
	if (err) {
		return -EFAULT;
   2771c:	f06f 050d 	mvn.w	r5, #13
   27720:	e00b      	b.n	2773a <lte_lc_func_mode_set+0x56>
	switch (mode) {
   27722:	f1a0 0314 	sub.w	r3, r0, #20
   27726:	b2db      	uxtb	r3, r3
   27728:	2b18      	cmp	r3, #24
   2772a:	d9e7      	bls.n	276fc <lte_lc_func_mode_set+0x18>
		LOG_ERR("Invalid functional mode: %d", mode);
   2772c:	4622      	mov	r2, r4
   2772e:	2145      	movs	r1, #69	; 0x45
   27730:	4815      	ldr	r0, [pc, #84]	; (27788 <lte_lc_func_mode_set+0xa4>)
   27732:	f015 facc 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   27736:	f06f 0515 	mvn.w	r5, #21
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   2773a:	4628      	mov	r0, r5
   2773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   27740:	4621      	mov	r1, r4
   27742:	4812      	ldr	r0, [pc, #72]	; (2778c <lte_lc_func_mode_set+0xa8>)
   27744:	f00d fcfc 	bl	35140 <nrf_modem_at_printf>
	if (err) {
   27748:	4605      	mov	r5, r0
   2774a:	2800      	cmp	r0, #0
   2774c:	d1e6      	bne.n	2771c <lte_lc_func_mode_set+0x38>
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   2774e:	4e10      	ldr	r6, [pc, #64]	; (27790 <lte_lc_func_mode_set+0xac>)
   27750:	4f10      	ldr	r7, [pc, #64]	; (27794 <lte_lc_func_mode_set+0xb0>)
   27752:	f8df 8048 	ldr.w	r8, [pc, #72]	; 2779c <lte_lc_func_mode_set+0xb8>
   27756:	42be      	cmp	r6, r7
   27758:	d90a      	bls.n	27770 <lte_lc_func_mode_set+0x8c>
   2775a:	4641      	mov	r1, r8
   2775c:	480e      	ldr	r0, [pc, #56]	; (27798 <lte_lc_func_mode_set+0xb4>)
   2775e:	f240 5229 	movw	r2, #1321	; 0x529
   27762:	f015 fa7a 	bl	3cc5a <assert_print>
   27766:	f240 5129 	movw	r1, #1321	; 0x529
   2776a:	4640      	mov	r0, r8
   2776c:	f015 fa6e 	bl	3cc4c <assert_post_action>
   27770:	42be      	cmp	r6, r7
   27772:	d2e2      	bcs.n	2773a <lte_lc_func_mode_set+0x56>
		e->callback(mode, e->context);
   27774:	e9d6 3100 	ldrd	r3, r1, [r6]
   27778:	4620      	mov	r0, r4
   2777a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   2777c:	3608      	adds	r6, #8
   2777e:	e7ea      	b.n	27756 <lte_lc_func_mode_set+0x72>
   27780:	01300c01 	.word	0x01300c01
   27784:	00045b1a 	.word	0x00045b1a
   27788:	00045b49 	.word	0x00045b49
   2778c:	00045b6a 	.word	0x00045b6a
   27790:	0004c210 	.word	0x0004c210
   27794:	0004c210 	.word	0x0004c210
   27798:	00044263 	.word	0x00044263
   2779c:	00045484 	.word	0x00045484

000277a0 <connect_lte>:
	if (!is_initialized) {
   277a0:	4b3e      	ldr	r3, [pc, #248]	; (2789c <connect_lte+0xfc>)
{
   277a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!is_initialized) {
   277a6:	781b      	ldrb	r3, [r3, #0]
{
   277a8:	4605      	mov	r5, r0
	if (!is_initialized) {
   277aa:	b943      	cbnz	r3, 277be <connect_lte+0x1e>
		LOG_ERR("The LTE link controller is not initialized");
   277ac:	483c      	ldr	r0, [pc, #240]	; (278a0 <connect_lte+0x100>)
   277ae:	2145      	movs	r1, #69	; 0x45
   277b0:	f015 fa8d 	bl	3ccce <z_log_minimal_printk>
		return -EPERM;
   277b4:	f04f 30ff 	mov.w	r0, #4294967295
}
   277b8:	b002      	add	sp, #8
   277ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   277be:	2601      	movs	r6, #1
   277c0:	4c38      	ldr	r4, [pc, #224]	; (278a4 <connect_lte+0x104>)
   277c2:	e8d4 3fef 	ldaex	r3, [r4]
   277c6:	e8c4 6fe2 	stlex	r2, r6, [r4]
   277ca:	2a00      	cmp	r2, #0
   277cc:	d1f9      	bne.n	277c2 <connect_lte+0x22>
	if (atomic_set(&in_progress, 1)) {
   277ce:	2b00      	cmp	r3, #0
   277d0:	d160      	bne.n	27894 <connect_lte+0xf4>
	err = lte_lc_nw_reg_status_get(&reg_status);
   277d2:	f10d 0007 	add.w	r0, sp, #7
   277d6:	f7ff fe2f 	bl	27438 <lte_lc_nw_reg_status_get>
	if (err) {
   277da:	b130      	cbz	r0, 277ea <connect_lte+0x4a>
		LOG_ERR("Failed to get current registration status");
   277dc:	4832      	ldr	r0, [pc, #200]	; (278a8 <connect_lte+0x108>)
   277de:	2145      	movs	r1, #69	; 0x45
   277e0:	f015 fa75 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   277e4:	f06f 000d 	mvn.w	r0, #13
   277e8:	e7e6      	b.n	277b8 <connect_lte+0x18>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   277ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   277ee:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   277f2:	2b01      	cmp	r3, #1
   277f4:	d0e0      	beq.n	277b8 <connect_lte+0x18>
	if (blocking) {
   277f6:	b125      	cbz	r5, 27802 <connect_lte+0x62>
   277f8:	4601      	mov	r1, r0
   277fa:	4632      	mov	r2, r6
   277fc:	482b      	ldr	r0, [pc, #172]	; (278ac <connect_lte+0x10c>)
   277fe:	f019 fcd4 	bl	411aa <z_impl_k_sem_init>
{
   27802:	2702      	movs	r7, #2
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   27804:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 278bc <connect_lte+0x11c>
   27808:	4e29      	ldr	r6, [pc, #164]	; (278b0 <connect_lte+0x110>)
		err = lte_lc_func_mode_get(&current_func_mode);
   2780a:	f10d 0006 	add.w	r0, sp, #6
   2780e:	f7ff ff47 	bl	276a0 <lte_lc_func_mode_get>
		if (err) {
   27812:	b9b8      	cbnz	r0, 27844 <connect_lte+0xa4>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   27814:	f89d 3006 	ldrb.w	r3, [sp, #6]
   27818:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   2781c:	d00b      	beq.n	27836 <connect_lte+0x96>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   2781e:	2001      	movs	r0, #1
   27820:	f7ff ff60 	bl	276e4 <lte_lc_func_mode_set>
		if (err || !blocking) {
   27824:	b188      	cbz	r0, 2784a <connect_lte+0xaa>
   27826:	2300      	movs	r3, #0
   27828:	e8d4 2fef 	ldaex	r2, [r4]
   2782c:	e8c4 3fe1 	stlex	r1, r3, [r4]
   27830:	2900      	cmp	r1, #0
   27832:	d0c1      	beq.n	277b8 <connect_lte+0x18>
   27834:	e7f8      	b.n	27828 <connect_lte+0x88>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   27836:	f898 1000 	ldrb.w	r1, [r8]
   2783a:	7830      	ldrb	r0, [r6, #0]
   2783c:	f7ff fe20 	bl	27480 <lte_lc_system_mode_set>
			if (err) {
   27840:	2800      	cmp	r0, #0
   27842:	d0ec      	beq.n	2781e <connect_lte+0x7e>
			err = -EFAULT;
   27844:	f06f 000d 	mvn.w	r0, #13
   27848:	e7ed      	b.n	27826 <connect_lte+0x86>
		if (err || !blocking) {
   2784a:	2d00      	cmp	r5, #0
   2784c:	d0eb      	beq.n	27826 <connect_lte+0x86>
	return z_impl_k_sem_take(sem, timeout);
   2784e:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   27852:	2300      	movs	r3, #0
   27854:	4815      	ldr	r0, [pc, #84]	; (278ac <connect_lte+0x10c>)
   27856:	f00f fb57 	bl	36f08 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   2785a:	f110 0f0b 	cmn.w	r0, #11
   2785e:	d1e2      	bne.n	27826 <connect_lte+0x86>
			LOG_INF("Network connection attempt timed out");
   27860:	2149      	movs	r1, #73	; 0x49
   27862:	4814      	ldr	r0, [pc, #80]	; (278b4 <connect_lte+0x114>)
   27864:	f015 fa33 	bl	3ccce <z_log_minimal_printk>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   27868:	2f01      	cmp	r7, #1
   2786a:	d010      	beq.n	2788e <connect_lte+0xee>
				if (sys_mode_target == sys_mode_preferred) {
   2786c:	7833      	ldrb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   2786e:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_preferred;
   27870:	2b04      	cmp	r3, #4
   27872:	bf0c      	ite	eq
   27874:	2305      	moveq	r3, #5
   27876:	2304      	movne	r3, #4
   27878:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   2787a:	f7ff ff33 	bl	276e4 <lte_lc_func_mode_set>
				if (err) {
   2787e:	2800      	cmp	r0, #0
   27880:	d1e0      	bne.n	27844 <connect_lte+0xa4>
				LOG_INF("Using fallback network mode");
   27882:	2149      	movs	r1, #73	; 0x49
   27884:	480c      	ldr	r0, [pc, #48]	; (278b8 <connect_lte+0x118>)
   27886:	f015 fa22 	bl	3ccce <z_log_minimal_printk>
   2788a:	2701      	movs	r7, #1
   2788c:	e7bd      	b.n	2780a <connect_lte+0x6a>
				err = -ETIMEDOUT;
   2788e:	f06f 0073 	mvn.w	r0, #115	; 0x73
   27892:	e7c8      	b.n	27826 <connect_lte+0x86>
		return -EINPROGRESS;
   27894:	f06f 0076 	mvn.w	r0, #118	; 0x76
   27898:	e78e      	b.n	277b8 <connect_lte+0x18>
   2789a:	bf00      	nop
   2789c:	2001b65d 	.word	0x2001b65d
   278a0:	00045b75 	.word	0x00045b75
   278a4:	200193ec 	.word	0x200193ec
   278a8:	00045ba5 	.word	0x00045ba5
   278ac:	200193f0 	.word	0x200193f0
   278b0:	20014c44 	.word	0x20014c44
   278b4:	00045bd4 	.word	0x00045bd4
   278b8:	00045bfe 	.word	0x00045bfe
   278bc:	2001b65e 	.word	0x2001b65e

000278c0 <lte_lc_connect_async>:
{
   278c0:	b508      	push	{r3, lr}
	if (handler) {
   278c2:	b130      	cbz	r0, 278d2 <lte_lc_connect_async+0x12>
		event_handler_list_append_handler(handler);
   278c4:	f000 f872 	bl	279ac <event_handler_list_append_handler>
}
   278c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(false);
   278cc:	2000      	movs	r0, #0
   278ce:	f7ff bf67 	b.w	277a0 <connect_lte>
	} else if (event_handler_list_is_empty()) {
   278d2:	f000 f863 	bl	2799c <event_handler_list_is_empty>
   278d6:	2800      	cmp	r0, #0
   278d8:	d0f6      	beq.n	278c8 <lte_lc_connect_async+0x8>
		LOG_ERR("No handler registered");
   278da:	2145      	movs	r1, #69	; 0x45
   278dc:	4802      	ldr	r0, [pc, #8]	; (278e8 <lte_lc_connect_async+0x28>)
   278de:	f015 f9f6 	bl	3ccce <z_log_minimal_printk>
}
   278e2:	f06f 0015 	mvn.w	r0, #21
   278e6:	bd08      	pop	{r3, pc}
   278e8:	00045c1f 	.word	0x00045c1f

000278ec <lte_lc_deinit>:
{
   278ec:	b508      	push	{r3, lr}
	if (is_initialized) {
   278ee:	4b06      	ldr	r3, [pc, #24]	; (27908 <lte_lc_deinit+0x1c>)
   278f0:	781a      	ldrb	r2, [r3, #0]
   278f2:	b122      	cbz	r2, 278fe <lte_lc_deinit+0x12>
		is_initialized = false;
   278f4:	2000      	movs	r0, #0
   278f6:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   278f8:	f7ff fef4 	bl	276e4 <lte_lc_func_mode_set>
   278fc:	b908      	cbnz	r0, 27902 <lte_lc_deinit+0x16>
   278fe:	2000      	movs	r0, #0
}
   27900:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   27902:	f06f 000d 	mvn.w	r0, #13
   27906:	e7fb      	b.n	27900 <lte_lc_deinit+0x14>
   27908:	2001b65d 	.word	0x2001b65d

0002790c <lte_lc_neighbor_cell_measurement>:
	 * the type of search.
	 * If the type is LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT, we therefore use the AT
	 * command without parameters to avoid error messages for older firmware version.
	 */

	if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_LIGHT) {
   2790c:	2801      	cmp	r0, #1
{
   2790e:	b508      	push	{r3, lr}
	if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_LIGHT) {
   27910:	d107      	bne.n	27922 <lte_lc_neighbor_cell_measurement+0x16>
		err = nrf_modem_at_printf("AT%%NCELLMEAS=1");
   27912:	4806      	ldr	r0, [pc, #24]	; (2792c <lte_lc_neighbor_cell_measurement+0x20>)
	} else if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
		err = nrf_modem_at_printf("AT%%NCELLMEAS=2");
	} else {
		/* Defaulting to use LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT */
		err = nrf_modem_at_printf("AT%%NCELLMEAS");
   27914:	f00d fc14 	bl	35140 <nrf_modem_at_printf>
	}

	return err ? -EFAULT : 0;
   27918:	2800      	cmp	r0, #0
}
   2791a:	bf18      	it	ne
   2791c:	f06f 000d 	mvnne.w	r0, #13
   27920:	bd08      	pop	{r3, pc}
	} else if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   27922:	2802      	cmp	r0, #2
		err = nrf_modem_at_printf("AT%%NCELLMEAS=2");
   27924:	bf0c      	ite	eq
   27926:	4802      	ldreq	r0, [pc, #8]	; (27930 <lte_lc_neighbor_cell_measurement+0x24>)
		err = nrf_modem_at_printf("AT%%NCELLMEAS");
   27928:	4802      	ldrne	r0, [pc, #8]	; (27934 <lte_lc_neighbor_cell_measurement+0x28>)
   2792a:	e7f3      	b.n	27914 <lte_lc_neighbor_cell_measurement+0x8>
   2792c:	00045c3a 	.word	0x00045c3a
   27930:	00045c4a 	.word	0x00045c4a
   27934:	00045c5a 	.word	0x00045c5a

00027938 <lte_lc_neighbor_cell_measurement_cancel>:

int lte_lc_neighbor_cell_measurement_cancel(void)
{
   27938:	b508      	push	{r3, lr}
	return nrf_modem_at_printf(AT_NCELLMEAS_STOP) ? -EFAULT : 0;
   2793a:	4804      	ldr	r0, [pc, #16]	; (2794c <lte_lc_neighbor_cell_measurement_cancel+0x14>)
   2793c:	f00d fc00 	bl	35140 <nrf_modem_at_printf>
   27940:	2800      	cmp	r0, #0
}
   27942:	bf18      	it	ne
   27944:	f06f 000d 	mvnne.w	r0, #13
   27948:	bd08      	pop	{r3, pc}
   2794a:	bf00      	nop
   2794c:	00045c68 	.word	0x00045c68

00027950 <lte_lc_modem_events_enable>:

	return 0;
}

int lte_lc_modem_events_enable(void)
{
   27950:	b508      	push	{r3, lr}
	return nrf_modem_at_printf(AT_MDMEV_ENABLE) ? -EFAULT : 0;
   27952:	4804      	ldr	r0, [pc, #16]	; (27964 <lte_lc_modem_events_enable+0x14>)
   27954:	f00d fbf4 	bl	35140 <nrf_modem_at_printf>
   27958:	2800      	cmp	r0, #0
}
   2795a:	bf18      	it	ne
   2795c:	f06f 000d 	mvnne.w	r0, #13
   27960:	bd08      	pop	{r3, pc}
   27962:	bf00      	nop
   27964:	00045c7a 	.word	0x00045c7a

00027968 <event_handler_list_find_node>:
	return list->head;
   27968:	4b08      	ldr	r3, [pc, #32]	; (2798c <event_handler_list_find_node+0x24>)
{
   2796a:	4602      	mov	r2, r0
   2796c:	6818      	ldr	r0, [r3, #0]
   2796e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   27970:	b120      	cbz	r0, 2797c <event_handler_list_find_node+0x14>
   27972:	2400      	movs	r4, #0
		if (curr->handler == handler) {
   27974:	6843      	ldr	r3, [r0, #4]
   27976:	428b      	cmp	r3, r1
   27978:	d101      	bne.n	2797e <event_handler_list_find_node+0x16>
			*prev_out = prev;
   2797a:	6014      	str	r4, [r2, #0]
}
   2797c:	bd10      	pop	{r4, pc}
	return node->next;
   2797e:	6803      	ldr	r3, [r0, #0]
   27980:	4604      	mov	r4, r0
   27982:	4618      	mov	r0, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   27984:	2b00      	cmp	r3, #0
   27986:	d1f5      	bne.n	27974 <event_handler_list_find_node+0xc>
   27988:	e7f8      	b.n	2797c <event_handler_list_find_node+0x14>
   2798a:	bf00      	nop
   2798c:	20019410 	.word	0x20019410

00027990 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   27990:	4801      	ldr	r0, [pc, #4]	; (27998 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   27992:	f00f b8fd 	b.w	36b90 <z_impl_k_mutex_unlock>
   27996:	bf00      	nop
   27998:	20014f40 	.word	0x20014f40

0002799c <event_handler_list_is_empty>:
	return list->head;
   2799c:	4b02      	ldr	r3, [pc, #8]	; (279a8 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   2799e:	6818      	ldr	r0, [r3, #0]
}
   279a0:	fab0 f080 	clz	r0, r0
   279a4:	0940      	lsrs	r0, r0, #5
   279a6:	4770      	bx	lr
   279a8:	20019410 	.word	0x20019410

000279ac <event_handler_list_append_handler>:
{
   279ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   279ae:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   279b0:	f04f 32ff 	mov.w	r2, #4294967295
   279b4:	f04f 33ff 	mov.w	r3, #4294967295
   279b8:	4812      	ldr	r0, [pc, #72]	; (27a04 <event_handler_list_append_handler+0x58>)
   279ba:	f00f f817 	bl	369ec <z_impl_k_mutex_lock>
	if (event_handler_list_find_node(&to_ins, handler) != NULL) {
   279be:	4629      	mov	r1, r5
   279c0:	a801      	add	r0, sp, #4
   279c2:	f7ff ffd1 	bl	27968 <event_handler_list_find_node>
   279c6:	4604      	mov	r4, r0
   279c8:	b120      	cbz	r0, 279d4 <event_handler_list_append_handler+0x28>
		k_mutex_unlock(&list_mtx);
   279ca:	f7ff ffe1 	bl	27990 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   279ce:	2000      	movs	r0, #0
}
   279d0:	b003      	add	sp, #12
   279d2:	bd30      	pop	{r4, r5, pc}
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   279d4:	2008      	movs	r0, #8
   279d6:	f019 fd6a 	bl	414ae <k_malloc>
   279da:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   279dc:	b920      	cbnz	r0, 279e8 <event_handler_list_append_handler+0x3c>
		k_mutex_unlock(&list_mtx);
   279de:	f7ff ffd7 	bl	27990 <k_mutex_unlock.constprop.0.isra.0>
		return -ENOBUFS;
   279e2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   279e6:	e7f3      	b.n	279d0 <event_handler_list_append_handler+0x24>
	return list->tail;
   279e8:	4a07      	ldr	r2, [pc, #28]	; (27a08 <event_handler_list_append_handler+0x5c>)
   279ea:	6004      	str	r4, [r0, #0]
   279ec:	6044      	str	r4, [r0, #4]
	to_ins->handler = handler;
   279ee:	9b01      	ldr	r3, [sp, #4]
   279f0:	6851      	ldr	r1, [r2, #4]
	parent->next = child;
   279f2:	e9c3 4500 	strd	r4, r5, [r3]
Z_GENLIST_APPEND(slist, snode)
   279f6:	b911      	cbnz	r1, 279fe <event_handler_list_append_handler+0x52>
	list->head = node;
   279f8:	e9c2 3300 	strd	r3, r3, [r2]
}
   279fc:	e7e5      	b.n	279ca <event_handler_list_append_handler+0x1e>
	parent->next = child;
   279fe:	600b      	str	r3, [r1, #0]
	list->tail = node;
   27a00:	6053      	str	r3, [r2, #4]
}
   27a02:	e7e2      	b.n	279ca <event_handler_list_append_handler+0x1e>
   27a04:	20014f40 	.word	0x20014f40
   27a08:	20019410 	.word	0x20019410

00027a0c <event_handler_list_dispatch>:
{
   27a0c:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   27a0e:	4c0d      	ldr	r4, [pc, #52]	; (27a44 <event_handler_list_dispatch+0x38>)
   27a10:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   27a12:	6823      	ldr	r3, [r4, #0]
   27a14:	b1ab      	cbz	r3, 27a42 <event_handler_list_dispatch+0x36>
   27a16:	f04f 33ff 	mov.w	r3, #4294967295
   27a1a:	f04f 32ff 	mov.w	r2, #4294967295
   27a1e:	480a      	ldr	r0, [pc, #40]	; (27a48 <event_handler_list_dispatch+0x3c>)
   27a20:	f00e ffe4 	bl	369ec <z_impl_k_mutex_lock>
   27a24:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27a26:	b91b      	cbnz	r3, 27a30 <event_handler_list_dispatch+0x24>
}
   27a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   27a2c:	f7ff bfb0 	b.w	27990 <k_mutex_unlock.constprop.0.isra.0>
	return node->next;
   27a30:	681c      	ldr	r4, [r3, #0]
		curr->handler(evt);
   27a32:	4628      	mov	r0, r5
   27a34:	685b      	ldr	r3, [r3, #4]
   27a36:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27a38:	2c00      	cmp	r4, #0
   27a3a:	d0f5      	beq.n	27a28 <event_handler_list_dispatch+0x1c>
   27a3c:	4623      	mov	r3, r4
   27a3e:	6824      	ldr	r4, [r4, #0]
   27a40:	e7f7      	b.n	27a32 <event_handler_list_dispatch+0x26>
}
   27a42:	bd38      	pop	{r3, r4, r5, pc}
   27a44:	20019410 	.word	0x20019410
   27a48:	20014f40 	.word	0x20014f40

00027a4c <response_is_valid>:
{
   27a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27a4e:	460d      	mov	r5, r1
	if ((response == NULL) || (check == NULL)) {
   27a50:	4604      	mov	r4, r0
   27a52:	b100      	cbz	r0, 27a56 <response_is_valid+0xa>
   27a54:	b92a      	cbnz	r2, 27a62 <response_is_valid+0x16>
		LOG_ERR("Invalid pointer provided");
   27a56:	2145      	movs	r1, #69	; 0x45
   27a58:	480a      	ldr	r0, [pc, #40]	; (27a84 <response_is_valid+0x38>)
   27a5a:	f015 f938 	bl	3ccce <z_log_minimal_printk>
		return false;
   27a5e:	2000      	movs	r0, #0
   27a60:	e00d      	b.n	27a7e <response_is_valid+0x32>
	if ((response_len < strlen(check)) ||
   27a62:	4610      	mov	r0, r2
   27a64:	9201      	str	r2, [sp, #4]
   27a66:	f7f5 fbec 	bl	1d242 <strlen>
   27a6a:	4285      	cmp	r5, r0
   27a6c:	d3f7      	bcc.n	27a5e <response_is_valid+0x12>
	    (memcmp(response, check, response_len) != 0)) {
   27a6e:	462a      	mov	r2, r5
   27a70:	4620      	mov	r0, r4
   27a72:	9901      	ldr	r1, [sp, #4]
   27a74:	f019 fd95 	bl	415a2 <memcmp>
	if ((response_len < strlen(check)) ||
   27a78:	fab0 f080 	clz	r0, r0
   27a7c:	0940      	lsrs	r0, r0, #5
}
   27a7e:	b003      	add	sp, #12
   27a80:	bd30      	pop	{r4, r5, pc}
   27a82:	bf00      	nop
   27a84:	00045cff 	.word	0x00045cff

00027a88 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   27a88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   27a8c:	f04f 0800 	mov.w	r8, #0
{
   27a90:	4607      	mov	r7, r0
   27a92:	460e      	mov	r6, r1
   27a94:	4614      	mov	r4, r2
   27a96:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   27a98:	f8cd 8004 	str.w	r8, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   27a9c:	f7f5 fbd1 	bl	1d242 <strlen>
   27aa0:	2808      	cmp	r0, #8
   27aa2:	d004      	beq.n	27aae <parse_psm+0x26>
	memcpy(unit_str, active_time_str, unit_str_len);

	lut_idx = strtoul(unit_str, NULL, 2);
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
		LOG_ERR("Unable to parse active time string");
		return -EINVAL;
   27aa4:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   27aa8:	b003      	add	sp, #12
   27aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   27aae:	4630      	mov	r0, r6
   27ab0:	f7f5 fbc7 	bl	1d242 <strlen>
   27ab4:	2808      	cmp	r0, #8
   27ab6:	d1f5      	bne.n	27aa4 <parse_psm+0x1c>
	memcpy(unit_str, tau_ext_str, unit_str_len);
   27ab8:	8832      	ldrh	r2, [r6, #0]
   27aba:	78b3      	ldrb	r3, [r6, #2]
   27abc:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   27ac0:	4641      	mov	r1, r8
   27ac2:	2202      	movs	r2, #2
   27ac4:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   27ac6:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   27aca:	f013 f881 	bl	3abd0 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   27ace:	2807      	cmp	r0, #7
   27ad0:	d904      	bls.n	27adc <parse_psm+0x54>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   27ad2:	2145      	movs	r1, #69	; 0x45
   27ad4:	482d      	ldr	r0, [pc, #180]	; (27b8c <parse_psm+0x104>)
		LOG_ERR("Unable to parse active time string");
   27ad6:	f015 f8fa 	bl	3ccce <z_log_minimal_printk>
   27ada:	e7e3      	b.n	27aa4 <parse_psm+0x1c>
	timer_unit = t3412_ext_lookup[lut_idx];
   27adc:	4b2c      	ldr	r3, [pc, #176]	; (27b90 <parse_psm+0x108>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   27ade:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   27ae0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   27ae4:	4641      	mov	r1, r8
   27ae6:	1cf0      	adds	r0, r6, #3
   27ae8:	f013 f872 	bl	3abd0 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   27aec:	f1b9 0f00 	cmp.w	r9, #0
   27af0:	d118      	bne.n	27b24 <parse_psm+0x9c>
   27af2:	f04f 33ff 	mov.w	r3, #4294967295
   27af6:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   27af8:	b1cc      	cbz	r4, 27b2e <parse_psm+0xa6>
   27afa:	4620      	mov	r0, r4
   27afc:	f7f5 fba1 	bl	1d242 <strlen>
   27b00:	2808      	cmp	r0, #8
   27b02:	d114      	bne.n	27b2e <parse_psm+0xa6>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   27b04:	8822      	ldrh	r2, [r4, #0]
   27b06:	78a3      	ldrb	r3, [r4, #2]
   27b08:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   27b0c:	2100      	movs	r1, #0
   27b0e:	2202      	movs	r2, #2
   27b10:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   27b12:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   27b16:	f013 f85b 	bl	3abd0 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   27b1a:	2807      	cmp	r0, #7
   27b1c:	d917      	bls.n	27b4e <parse_psm+0xc6>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   27b1e:	2145      	movs	r1, #69	; 0x45
   27b20:	481c      	ldr	r0, [pc, #112]	; (27b94 <parse_psm+0x10c>)
   27b22:	e7d8      	b.n	27ad6 <parse_psm+0x4e>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   27b24:	fb09 f000 	mul.w	r0, r9, r0
   27b28:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   27b2a:	3001      	adds	r0, #1
   27b2c:	d0e4      	beq.n	27af8 <parse_psm+0x70>
	memcpy(unit_str, active_time_str, unit_str_len);
   27b2e:	883a      	ldrh	r2, [r7, #0]
   27b30:	78bb      	ldrb	r3, [r7, #2]
   27b32:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   27b36:	2100      	movs	r1, #0
   27b38:	2202      	movs	r2, #2
   27b3a:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   27b3c:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   27b40:	f013 f846 	bl	3abd0 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   27b44:	2807      	cmp	r0, #7
   27b46:	d911      	bls.n	27b6c <parse_psm+0xe4>
		LOG_ERR("Unable to parse active time string");
   27b48:	2145      	movs	r1, #69	; 0x45
   27b4a:	4813      	ldr	r0, [pc, #76]	; (27b98 <parse_psm+0x110>)
   27b4c:	e7c3      	b.n	27ad6 <parse_psm+0x4e>
		timer_unit = t3412_lookup[lut_idx];
   27b4e:	4b13      	ldr	r3, [pc, #76]	; (27b9c <parse_psm+0x114>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   27b50:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   27b52:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   27b56:	2100      	movs	r1, #0
   27b58:	1ce0      	adds	r0, r4, #3
   27b5a:	f013 f839 	bl	3abd0 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   27b5e:	b116      	cbz	r6, 27b66 <parse_psm+0xde>
   27b60:	4346      	muls	r6, r0
   27b62:	602e      	str	r6, [r5, #0]
   27b64:	e7e3      	b.n	27b2e <parse_psm+0xa6>
   27b66:	f04f 36ff 	mov.w	r6, #4294967295
   27b6a:	e7fa      	b.n	27b62 <parse_psm+0xda>
	timer_unit = t3324_lookup[lut_idx];
   27b6c:	4b0c      	ldr	r3, [pc, #48]	; (27ba0 <parse_psm+0x118>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   27b6e:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   27b70:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   27b74:	2100      	movs	r1, #0
   27b76:	1cf8      	adds	r0, r7, #3
   27b78:	f013 f82a 	bl	3abd0 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   27b7c:	b11c      	cbz	r4, 27b86 <parse_psm+0xfe>
   27b7e:	4344      	muls	r4, r0
	return 0;
   27b80:	2000      	movs	r0, #0
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   27b82:	606c      	str	r4, [r5, #4]
	return 0;
   27b84:	e790      	b.n	27aa8 <parse_psm+0x20>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   27b86:	f04f 34ff 	mov.w	r4, #4294967295
   27b8a:	e7f9      	b.n	27b80 <parse_psm+0xf8>
   27b8c:	00045e7c 	.word	0x00045e7c
   27b90:	00042efc 	.word	0x00042efc
   27b94:	00045eb6 	.word	0x00045eb6
   27b98:	00045ee7 	.word	0x00045ee7
   27b9c:	00042edc 	.word	0x00042edc
   27ba0:	00042edc 	.word	0x00042edc

00027ba4 <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   27ba4:	2300      	movs	r3, #0
{
   27ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
   27ba8:	b085      	sub	sp, #20
   27baa:	4607      	mov	r7, r0
   27bac:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   27bae:	a802      	add	r0, sp, #8
   27bb0:	2104      	movs	r1, #4
{
   27bb2:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   27bb4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   27bb8:	f017 fbca 	bl	3f350 <at_params_list_init>
	if (err) {
   27bbc:	4604      	mov	r4, r0
   27bbe:	b138      	cbz	r0, 27bd0 <parse_rrc_mode+0x2c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27bc0:	4602      	mov	r2, r0
   27bc2:	2145      	movs	r1, #69	; 0x45
   27bc4:	4817      	ldr	r0, [pc, #92]	; (27c24 <parse_rrc_mode+0x80>)
   27bc6:	f015 f882 	bl	3ccce <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   27bca:	4620      	mov	r0, r4
   27bcc:	b005      	add	sp, #20
   27bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   27bd0:	4601      	mov	r1, r0
   27bd2:	aa02      	add	r2, sp, #8
   27bd4:	4638      	mov	r0, r7
   27bd6:	f017 fbb8 	bl	3f34a <at_parser_params_from_str>
	if (err) {
   27bda:	4604      	mov	r4, r0
   27bdc:	b140      	cbz	r0, 27bf0 <parse_rrc_mode+0x4c>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   27bde:	2145      	movs	r1, #69	; 0x45
   27be0:	4602      	mov	r2, r0
   27be2:	4811      	ldr	r0, [pc, #68]	; (27c28 <parse_rrc_mode+0x84>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   27be4:	f015 f873 	bl	3ccce <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   27be8:	a802      	add	r0, sp, #8
   27bea:	f017 fbc4 	bl	3f376 <at_params_list_free>
	return err;
   27bee:	e7ec      	b.n	27bca <parse_rrc_mode+0x26>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   27bf0:	4631      	mov	r1, r6
   27bf2:	aa01      	add	r2, sp, #4
   27bf4:	a802      	add	r0, sp, #8
   27bf6:	f017 fc82 	bl	3f4fe <at_params_int_get>
	if (err) {
   27bfa:	4604      	mov	r4, r0
   27bfc:	b118      	cbz	r0, 27c06 <parse_rrc_mode+0x62>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   27bfe:	4602      	mov	r2, r0
   27c00:	2145      	movs	r1, #69	; 0x45
   27c02:	480a      	ldr	r0, [pc, #40]	; (27c2c <parse_rrc_mode+0x88>)
   27c04:	e7ee      	b.n	27be4 <parse_rrc_mode+0x40>
	if (temp_mode == 0) {
   27c06:	9a01      	ldr	r2, [sp, #4]
   27c08:	b90a      	cbnz	r2, 27c0e <parse_rrc_mode+0x6a>
		*mode = LTE_LC_RRC_MODE_IDLE;
   27c0a:	7028      	strb	r0, [r5, #0]
   27c0c:	e7ec      	b.n	27be8 <parse_rrc_mode+0x44>
	} else if (temp_mode == 1) {
   27c0e:	2a01      	cmp	r2, #1
   27c10:	d101      	bne.n	27c16 <parse_rrc_mode+0x72>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   27c12:	702a      	strb	r2, [r5, #0]
   27c14:	e7e8      	b.n	27be8 <parse_rrc_mode+0x44>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   27c16:	2145      	movs	r1, #69	; 0x45
   27c18:	4805      	ldr	r0, [pc, #20]	; (27c30 <parse_rrc_mode+0x8c>)
   27c1a:	f015 f858 	bl	3ccce <z_log_minimal_printk>
		err = -EINVAL;
   27c1e:	f06f 0415 	mvn.w	r4, #21
   27c22:	e7e1      	b.n	27be8 <parse_rrc_mode+0x44>
   27c24:	00045d1d 	.word	0x00045d1d
   27c28:	00045f0f 	.word	0x00045f0f
   27c2c:	00045f3f 	.word	0x00045f3f
   27c30:	00045f6d 	.word	0x00045f6d

00027c34 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   27c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27c38:	461e      	mov	r6, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   27c3a:	2300      	movs	r3, #0
{
   27c3c:	b08b      	sub	sp, #44	; 0x2c
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   27c3e:	9303      	str	r3, [sp, #12]
   27c40:	f8ad 3010 	strh.w	r3, [sp, #16]
   27c44:	f88d 3012 	strb.w	r3, [sp, #18]
{
   27c48:	4691      	mov	r9, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   27c4a:	2309      	movs	r3, #9
   27c4c:	2207      	movs	r2, #7
{
   27c4e:	4605      	mov	r5, r0
   27c50:	460f      	mov	r7, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   27c52:	a805      	add	r0, sp, #20
   27c54:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   27c56:	e9cd 2300 	strd	r2, r3, [sp]
{
   27c5a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   27c5e:	f017 fb77 	bl	3f350 <at_params_list_init>
	if (err) {
   27c62:	4604      	mov	r4, r0
   27c64:	b140      	cbz	r0, 27c78 <parse_cereg+0x44>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27c66:	4602      	mov	r2, r0
   27c68:	2145      	movs	r1, #69	; 0x45
   27c6a:	4854      	ldr	r0, [pc, #336]	; (27dbc <parse_cereg+0x188>)
   27c6c:	f015 f82f 	bl	3ccce <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   27c70:	4620      	mov	r0, r4
   27c72:	b00b      	add	sp, #44	; 0x2c
   27c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   27c78:	4601      	mov	r1, r0
   27c7a:	aa05      	add	r2, sp, #20
   27c7c:	4628      	mov	r0, r5
   27c7e:	f017 fb64 	bl	3f34a <at_parser_params_from_str>
	if (err) {
   27c82:	4604      	mov	r4, r0
   27c84:	b140      	cbz	r0, 27c98 <parse_cereg+0x64>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   27c86:	2145      	movs	r1, #69	; 0x45
   27c88:	4602      	mov	r2, r0
   27c8a:	484d      	ldr	r0, [pc, #308]	; (27dc0 <parse_cereg+0x18c>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   27c8c:	f015 f81f 	bl	3ccce <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   27c90:	a805      	add	r0, sp, #20
   27c92:	f017 fb70 	bl	3f376 <at_params_list_free>
	return err;
   27c96:	e7eb      	b.n	27c70 <parse_cereg+0x3c>
	err = at_params_string_get(&resp_list,
   27c98:	4601      	mov	r1, r0
   27c9a:	466b      	mov	r3, sp
   27c9c:	aa03      	add	r2, sp, #12
   27c9e:	a805      	add	r0, sp, #20
   27ca0:	f017 fc62 	bl	3f568 <at_params_string_get>
	if (err) {
   27ca4:	4604      	mov	r4, r0
   27ca6:	b118      	cbz	r0, 27cb0 <parse_cereg+0x7c>
		LOG_ERR("Could not get response prefix, error: %d", err);
   27ca8:	4602      	mov	r2, r0
   27caa:	2145      	movs	r1, #69	; 0x45
   27cac:	4845      	ldr	r0, [pc, #276]	; (27dc4 <parse_cereg+0x190>)
   27cae:	e7ed      	b.n	27c8c <parse_cereg+0x58>
	if (!response_is_valid(response_prefix, response_prefix_len,
   27cb0:	4a45      	ldr	r2, [pc, #276]	; (27dc8 <parse_cereg+0x194>)
   27cb2:	9900      	ldr	r1, [sp, #0]
   27cb4:	a803      	add	r0, sp, #12
   27cb6:	f7ff fec9 	bl	27a4c <response_is_valid>
   27cba:	2800      	cmp	r0, #0
   27cbc:	d0e8      	beq.n	27c90 <parse_cereg+0x5c>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   27cbe:	2f00      	cmp	r7, #0
	err = at_params_int_get(list, reg_status_index, &reg_status);
   27cc0:	bf14      	ite	ne
   27cc2:	2101      	movne	r1, #1
   27cc4:	2102      	moveq	r1, #2
   27cc6:	aa07      	add	r2, sp, #28
   27cc8:	a805      	add	r0, sp, #20
   27cca:	f017 fc18 	bl	3f4fe <at_params_int_get>
	if (err) {
   27cce:	1e05      	subs	r5, r0, #0
   27cd0:	d132      	bne.n	27d38 <parse_cereg+0x104>
	switch (reg_status) {
   27cd2:	9d07      	ldr	r5, [sp, #28]
   27cd4:	2d08      	cmp	r5, #8
   27cd6:	d012      	beq.n	27cfe <parse_cereg+0xca>
   27cd8:	dc0f      	bgt.n	27cfa <parse_cereg+0xc6>
   27cda:	2d05      	cmp	r5, #5
   27cdc:	d90f      	bls.n	27cfe <parse_cereg+0xca>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   27cde:	462a      	mov	r2, r5
   27ce0:	2145      	movs	r1, #69	; 0x45
   27ce2:	483a      	ldr	r0, [pc, #232]	; (27dcc <parse_cereg+0x198>)
   27ce4:	f014 fff3 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   27ce8:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   27cec:	462a      	mov	r2, r5
   27cee:	2145      	movs	r1, #69	; 0x45
   27cf0:	4837      	ldr	r0, [pc, #220]	; (27dd0 <parse_cereg+0x19c>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   27cf2:	f014 ffec 	bl	3ccce <z_log_minimal_printk>
			goto clean_exit;
   27cf6:	462c      	mov	r4, r5
   27cf8:	e7ca      	b.n	27c90 <parse_cereg+0x5c>
	switch (reg_status) {
   27cfa:	2d5a      	cmp	r5, #90	; 0x5a
   27cfc:	d1ef      	bne.n	27cde <parse_cereg+0xaa>
	if (reg_status) {
   27cfe:	f1b9 0f00 	cmp.w	r9, #0
   27d02:	d001      	beq.n	27d08 <parse_cereg+0xd4>
		*reg_status = status;
   27d04:	f889 5000 	strb.w	r5, [r9]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   27d08:	2e00      	cmp	r6, #0
   27d0a:	d03e      	beq.n	27d8a <parse_cereg+0x156>
   27d0c:	2d5a      	cmp	r5, #90	; 0x5a
   27d0e:	d050      	beq.n	27db2 <parse_cereg+0x17e>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   27d10:	a805      	add	r0, sp, #20
   27d12:	f017 fc50 	bl	3f5b6 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   27d16:	2803      	cmp	r0, #3
   27d18:	d94b      	bls.n	27db2 <parse_cereg+0x17e>
		err = at_params_string_get(
   27d1a:	2f00      	cmp	r7, #0
   27d1c:	bf14      	ite	ne
   27d1e:	2102      	movne	r1, #2
   27d20:	2103      	moveq	r1, #3
   27d22:	ab01      	add	r3, sp, #4
   27d24:	aa07      	add	r2, sp, #28
   27d26:	a805      	add	r0, sp, #20
   27d28:	f017 fc1e 	bl	3f568 <at_params_string_get>
		if (err) {
   27d2c:	4605      	mov	r5, r0
   27d2e:	b128      	cbz	r0, 27d3c <parse_cereg+0x108>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   27d30:	4602      	mov	r2, r0
   27d32:	2145      	movs	r1, #69	; 0x45
   27d34:	4827      	ldr	r0, [pc, #156]	; (27dd4 <parse_cereg+0x1a0>)
   27d36:	e7dc      	b.n	27cf2 <parse_cereg+0xbe>
	if (status < 0) {
   27d38:	dae1      	bge.n	27cfe <parse_cereg+0xca>
   27d3a:	e7d7      	b.n	27cec <parse_cereg+0xb8>
		str_buf[len] = '\0';
   27d3c:	9b01      	ldr	r3, [sp, #4]
   27d3e:	aa0a      	add	r2, sp, #40	; 0x28
   27d40:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   27d42:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   27d44:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   27d48:	2210      	movs	r2, #16
   27d4a:	a807      	add	r0, sp, #28
   27d4c:	f012 ff40 	bl	3abd0 <strtoul>
		len = sizeof(str_buf) - 1;
   27d50:	2309      	movs	r3, #9
		err = at_params_string_get(&resp_list,
   27d52:	2f00      	cmp	r7, #0
		cell->tac = strtoul(str_buf, NULL, 16);
   27d54:	60f0      	str	r0, [r6, #12]
		len = sizeof(str_buf) - 1;
   27d56:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   27d58:	bf14      	ite	ne
   27d5a:	2103      	movne	r1, #3
   27d5c:	2104      	moveq	r1, #4
   27d5e:	ab01      	add	r3, sp, #4
   27d60:	aa07      	add	r2, sp, #28
   27d62:	a805      	add	r0, sp, #20
   27d64:	f017 fc00 	bl	3f568 <at_params_string_get>
		if (err) {
   27d68:	4605      	mov	r5, r0
   27d6a:	b118      	cbz	r0, 27d74 <parse_cereg+0x140>
			LOG_ERR("Could not get cell ID, error: %d", err);
   27d6c:	4602      	mov	r2, r0
   27d6e:	2145      	movs	r1, #69	; 0x45
   27d70:	4819      	ldr	r0, [pc, #100]	; (27dd8 <parse_cereg+0x1a4>)
   27d72:	e7be      	b.n	27cf2 <parse_cereg+0xbe>
		str_buf[len] = '\0';
   27d74:	9b01      	ldr	r3, [sp, #4]
   27d76:	aa0a      	add	r2, sp, #40	; 0x28
   27d78:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   27d7a:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   27d7c:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   27d80:	2210      	movs	r2, #16
   27d82:	a807      	add	r0, sp, #28
   27d84:	f012 ff24 	bl	3abd0 <strtoul>
   27d88:	60b0      	str	r0, [r6, #8]
	if (lte_mode) {
   27d8a:	f1b8 0f00 	cmp.w	r8, #0
   27d8e:	f43f af7f 	beq.w	27c90 <parse_cereg+0x5c>
		err = at_params_int_get(&resp_list,
   27d92:	2f00      	cmp	r7, #0
   27d94:	bf14      	ite	ne
   27d96:	2104      	movne	r1, #4
   27d98:	2105      	moveq	r1, #5
   27d9a:	aa02      	add	r2, sp, #8
   27d9c:	a805      	add	r0, sp, #20
   27d9e:	f017 fbae 	bl	3f4fe <at_params_int_get>
		if (err) {
   27da2:	b920      	cbnz	r0, 27dae <parse_cereg+0x17a>
			*lte_mode = mode;
   27da4:	f89d 3008 	ldrb.w	r3, [sp, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   27da8:	f888 3000 	strb.w	r3, [r8]
   27dac:	e770      	b.n	27c90 <parse_cereg+0x5c>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   27dae:	2300      	movs	r3, #0
   27db0:	e7fa      	b.n	27da8 <parse_cereg+0x174>
		cell->tac = UINT32_MAX;
   27db2:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27db6:	e9c6 3302 	strd	r3, r3, [r6, #8]
   27dba:	e7e6      	b.n	27d8a <parse_cereg+0x156>
   27dbc:	00045d1d 	.word	0x00045d1d
   27dc0:	00045f8e 	.word	0x00045f8e
   27dc4:	00045fc0 	.word	0x00045fc0
   27dc8:	00045cb1 	.word	0x00045cb1
   27dcc:	00045fee 	.word	0x00045fee
   27dd0:	000458d9 	.word	0x000458d9
   27dd4:	0004601b 	.word	0x0004601b
   27dd8:	0004604c 	.word	0x0004604c

00027ddc <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   27ddc:	2300      	movs	r3, #0
{
   27dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27de0:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   27de2:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   27de4:	e9cd 3300 	strd	r3, r3, [sp]
	if (time == NULL || at_response == NULL) {
   27de8:	b3c9      	cbz	r1, 27e5e <parse_xt3412+0x82>
   27dea:	b3c0      	cbz	r0, 27e5e <parse_xt3412+0x82>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   27dec:	2104      	movs	r1, #4
   27dee:	4668      	mov	r0, sp
   27df0:	f017 faae 	bl	3f350 <at_params_list_init>
	if (err) {
   27df4:	4604      	mov	r4, r0
   27df6:	b138      	cbz	r0, 27e08 <parse_xt3412+0x2c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27df8:	4602      	mov	r2, r0
   27dfa:	2145      	movs	r1, #69	; 0x45
   27dfc:	4819      	ldr	r0, [pc, #100]	; (27e64 <parse_xt3412+0x88>)
   27dfe:	f014 ff66 	bl	3ccce <z_log_minimal_printk>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   27e02:	4620      	mov	r0, r4
   27e04:	b002      	add	sp, #8
   27e06:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   27e08:	4601      	mov	r1, r0
   27e0a:	466a      	mov	r2, sp
   27e0c:	4630      	mov	r0, r6
   27e0e:	f017 fa9c 	bl	3f34a <at_parser_params_from_str>
	if (err) {
   27e12:	4604      	mov	r4, r0
   27e14:	b140      	cbz	r0, 27e28 <parse_xt3412+0x4c>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   27e16:	2145      	movs	r1, #69	; 0x45
   27e18:	4602      	mov	r2, r0
   27e1a:	4813      	ldr	r0, [pc, #76]	; (27e68 <parse_xt3412+0x8c>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   27e1c:	f014 ff57 	bl	3ccce <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   27e20:	4668      	mov	r0, sp
   27e22:	f017 faa8 	bl	3f376 <at_params_list_free>
	return err;
   27e26:	e7ec      	b.n	27e02 <parse_xt3412+0x26>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   27e28:	462a      	mov	r2, r5
   27e2a:	2102      	movs	r1, #2
   27e2c:	4668      	mov	r0, sp
   27e2e:	f017 fb83 	bl	3f538 <at_params_int64_get>
	if (err) {
   27e32:	4604      	mov	r4, r0
   27e34:	b118      	cbz	r0, 27e3e <parse_xt3412+0x62>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   27e36:	4602      	mov	r2, r0
   27e38:	2145      	movs	r1, #69	; 0x45
   27e3a:	480c      	ldr	r0, [pc, #48]	; (27e6c <parse_xt3412+0x90>)
   27e3c:	e7ee      	b.n	27e1c <parse_xt3412+0x40>
	if ((*time > T3412_MAX) || *time < 0) {
   27e3e:	490c      	ldr	r1, [pc, #48]	; (27e70 <parse_xt3412+0x94>)
   27e40:	e9d5 2300 	ldrd	r2, r3, [r5]
   27e44:	4291      	cmp	r1, r2
   27e46:	f04f 0208 	mov.w	r2, #8
   27e4a:	eb72 0303 	sbcs.w	r3, r2, r3
   27e4e:	d2e7      	bcs.n	27e20 <parse_xt3412+0x44>
		LOG_WRN("Parsed time parameter not within valid range");
   27e50:	2157      	movs	r1, #87	; 0x57
   27e52:	4808      	ldr	r0, [pc, #32]	; (27e74 <parse_xt3412+0x98>)
   27e54:	f014 ff3b 	bl	3ccce <z_log_minimal_printk>
		err = -EINVAL;
   27e58:	f06f 0415 	mvn.w	r4, #21
   27e5c:	e7e0      	b.n	27e20 <parse_xt3412+0x44>
		return -EINVAL;
   27e5e:	f06f 0415 	mvn.w	r4, #21
   27e62:	e7ce      	b.n	27e02 <parse_xt3412+0x26>
   27e64:	00045d1d 	.word	0x00045d1d
   27e68:	00046072 	.word	0x00046072
   27e6c:	000460a4 	.word	0x000460a4
   27e70:	5099e000 	.word	0x5099e000
   27e74:	000460d6 	.word	0x000460d6

00027e78 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   27e78:	b510      	push	{r4, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   27e7a:	4604      	mov	r4, r0
   27e7c:	b928      	cbnz	r0, 27e8a <neighborcell_count_get+0x12>
		LOG_ERR("at_response is NULL, can't get cell count");
   27e7e:	480b      	ldr	r0, [pc, #44]	; (27eac <neighborcell_count_get+0x34>)
   27e80:	2145      	movs	r1, #69	; 0x45
   27e82:	f014 ff24 	bl	3ccce <z_log_minimal_printk>
   27e86:	4620      	mov	r0, r4
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   27e88:	bd10      	pop	{r4, pc}
	uint32_t count = 0;
   27e8a:	2400      	movs	r4, #0
   27e8c:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   27e8e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   27e92:	282c      	cmp	r0, #44	; 0x2c
   27e94:	d101      	bne.n	27e9a <neighborcell_count_get+0x22>
			count++;
   27e96:	3401      	adds	r4, #1
	} while (*(str++) != '\0');
   27e98:	e7f9      	b.n	27e8e <neighborcell_count_get+0x16>
   27e9a:	2800      	cmp	r0, #0
   27e9c:	d1f7      	bne.n	27e8e <neighborcell_count_get+0x16>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   27e9e:	2c0a      	cmp	r4, #10
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   27ea0:	bf82      	ittt	hi
   27ea2:	2005      	movhi	r0, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   27ea4:	3c09      	subhi	r4, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   27ea6:	fbb4 f0f0 	udivhi	r0, r4, r0
	return ncell_count;
   27eaa:	e7ed      	b.n	27e88 <neighborcell_count_get+0x10>
   27eac:	00046108 	.word	0x00046108

00027eb0 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   27eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   27eb4:	230b      	movs	r3, #11
{
   27eb6:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   27eb8:	2100      	movs	r1, #0
{
   27eba:	4606      	mov	r6, r0
   27ebc:	b08d      	sub	sp, #52	; 0x34
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   27ebe:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   27ec2:	9304      	str	r3, [sp, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   27ec4:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   27ec8:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   27eca:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   27ece:	2b2c      	cmp	r3, #44	; 0x2c
   27ed0:	d101      	bne.n	27ed6 <parse_ncellmeas+0x26>
			count++;
   27ed2:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   27ed4:	e7f9      	b.n	27eca <parse_ncellmeas+0x1a>
   27ed6:	2b00      	cmp	r3, #0
   27ed8:	d1f7      	bne.n	27eca <parse_ncellmeas+0x1a>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   27eda:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27ede:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   27ee2:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27ee4:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   27ee6:	a807      	add	r0, sp, #28
   27ee8:	f017 fa32 	bl	3f350 <at_params_list_init>
	if (err) {
   27eec:	4604      	mov	r4, r0
   27eee:	b140      	cbz	r0, 27f02 <parse_ncellmeas+0x52>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27ef0:	4602      	mov	r2, r0
   27ef2:	2145      	movs	r1, #69	; 0x45
   27ef4:	488f      	ldr	r0, [pc, #572]	; (28134 <parse_ncellmeas+0x284>)
   27ef6:	f014 feea 	bl	3ccce <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   27efa:	4620      	mov	r0, r4
   27efc:	b00d      	add	sp, #52	; 0x34
   27efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   27f02:	4601      	mov	r1, r0
   27f04:	aa07      	add	r2, sp, #28
   27f06:	4630      	mov	r0, r6
   27f08:	f017 fa1f 	bl	3f34a <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   27f0c:	4604      	mov	r4, r0
   27f0e:	b150      	cbz	r0, 27f26 <parse_ncellmeas+0x76>
   27f10:	1dc3      	adds	r3, r0, #7
   27f12:	d015      	beq.n	27f40 <parse_ncellmeas+0x90>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   27f14:	2145      	movs	r1, #69	; 0x45
   27f16:	4602      	mov	r2, r0
   27f18:	4887      	ldr	r0, [pc, #540]	; (28138 <parse_ncellmeas+0x288>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   27f1a:	f014 fed8 	bl	3ccce <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   27f1e:	a807      	add	r0, sp, #28
   27f20:	f017 fa29 	bl	3f376 <at_params_list_free>
	return err;
   27f24:	e7e9      	b.n	27efa <parse_ncellmeas+0x4a>
	bool incomplete = false;
   27f26:	4607      	mov	r7, r0
	err = at_params_string_get(&resp_list,
   27f28:	2100      	movs	r1, #0
   27f2a:	ab04      	add	r3, sp, #16
   27f2c:	aa09      	add	r2, sp, #36	; 0x24
   27f2e:	a807      	add	r0, sp, #28
   27f30:	f017 fb1a 	bl	3f568 <at_params_string_get>
	if (err) {
   27f34:	4604      	mov	r4, r0
   27f36:	b128      	cbz	r0, 27f44 <parse_ncellmeas+0x94>
		LOG_ERR("Could not get response prefix, error: %d", err);
   27f38:	4602      	mov	r2, r0
   27f3a:	2145      	movs	r1, #69	; 0x45
   27f3c:	487f      	ldr	r0, [pc, #508]	; (2813c <parse_ncellmeas+0x28c>)
   27f3e:	e7ec      	b.n	27f1a <parse_ncellmeas+0x6a>
		incomplete = true;
   27f40:	2701      	movs	r7, #1
   27f42:	e7f1      	b.n	27f28 <parse_ncellmeas+0x78>
	if (!response_is_valid(response_prefix, response_prefix_len,
   27f44:	4a7e      	ldr	r2, [pc, #504]	; (28140 <parse_ncellmeas+0x290>)
   27f46:	9904      	ldr	r1, [sp, #16]
   27f48:	a809      	add	r0, sp, #36	; 0x24
   27f4a:	f7ff fd7f 	bl	27a4c <response_is_valid>
   27f4e:	2800      	cmp	r0, #0
   27f50:	d0e5      	beq.n	27f1e <parse_ncellmeas+0x6e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   27f52:	2101      	movs	r1, #1
   27f54:	aa01      	add	r2, sp, #4
   27f56:	a807      	add	r0, sp, #28
   27f58:	f017 fad1 	bl	3f4fe <at_params_int_get>
	if (err) {
   27f5c:	4604      	mov	r4, r0
   27f5e:	2800      	cmp	r0, #0
   27f60:	d1dd      	bne.n	27f1e <parse_ncellmeas+0x6e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   27f62:	9b01      	ldr	r3, [sp, #4]
   27f64:	2b00      	cmp	r3, #0
   27f66:	f040 80e2 	bne.w	2812e <parse_ncellmeas+0x27e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   27f6a:	2102      	movs	r1, #2
   27f6c:	aa02      	add	r2, sp, #8
   27f6e:	a807      	add	r0, sp, #28
   27f70:	f017 fb6b 	bl	3f64a <string_param_to_int.constprop.0>
	if (err) {
   27f74:	4604      	mov	r4, r0
   27f76:	2800      	cmp	r0, #0
   27f78:	d1d1      	bne.n	27f1e <parse_ncellmeas+0x6e>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   27f7a:	9b02      	ldr	r3, [sp, #8]
	len = sizeof(tmp_str);
   27f7c:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   27f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27f84:	bfa4      	itt	ge
   27f86:	f04f 33ff 	movge.w	r3, #4294967295
   27f8a:	9302      	strge	r3, [sp, #8]
	cells->current_cell.id = tmp;
   27f8c:	9b02      	ldr	r3, [sp, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   27f8e:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   27f90:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   27f92:	aa05      	add	r2, sp, #20
   27f94:	ab03      	add	r3, sp, #12
   27f96:	a807      	add	r0, sp, #28
	len = sizeof(tmp_str);
   27f98:	f8cd 800c 	str.w	r8, [sp, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   27f9c:	f017 fae4 	bl	3f568 <at_params_string_get>
	if (err) {
   27fa0:	4604      	mov	r4, r0
   27fa2:	2800      	cmp	r0, #0
   27fa4:	d1bb      	bne.n	27f1e <parse_ncellmeas+0x6e>
	tmp_str[len] = '\0';
   27fa6:	9b03      	ldr	r3, [sp, #12]
   27fa8:	aa0c      	add	r2, sp, #48	; 0x30
   27faa:	4413      	add	r3, r2
   27fac:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   27fb0:	210a      	movs	r1, #10
   27fb2:	1d2a      	adds	r2, r5, #4
   27fb4:	f10d 0017 	add.w	r0, sp, #23
   27fb8:	f017 fb21 	bl	3f5fe <string_to_int>
	if (err) {
   27fbc:	4604      	mov	r4, r0
   27fbe:	2800      	cmp	r0, #0
   27fc0:	d1ad      	bne.n	27f1e <parse_ncellmeas+0x6e>
	tmp_str[3] = '\0';
   27fc2:	f88d 0017 	strb.w	r0, [sp, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   27fc6:	462a      	mov	r2, r5
   27fc8:	210a      	movs	r1, #10
   27fca:	a805      	add	r0, sp, #20
   27fcc:	f017 fb17 	bl	3f5fe <string_to_int>
	if (err) {
   27fd0:	4604      	mov	r4, r0
   27fd2:	2800      	cmp	r0, #0
   27fd4:	d1a3      	bne.n	27f1e <parse_ncellmeas+0x6e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   27fd6:	2104      	movs	r1, #4
   27fd8:	aa02      	add	r2, sp, #8
   27fda:	a807      	add	r0, sp, #28
   27fdc:	f017 fb35 	bl	3f64a <string_param_to_int.constprop.0>
	if (err) {
   27fe0:	4604      	mov	r4, r0
   27fe2:	2800      	cmp	r0, #0
   27fe4:	d19b      	bne.n	27f1e <parse_ncellmeas+0x6e>
	cells->current_cell.tac = tmp;
   27fe6:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   27fe8:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   27fea:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   27fec:	aa02      	add	r2, sp, #8
   27fee:	a807      	add	r0, sp, #28
   27ff0:	f017 fa85 	bl	3f4fe <at_params_int_get>
	if (err) {
   27ff4:	4604      	mov	r4, r0
   27ff6:	2800      	cmp	r0, #0
   27ff8:	d191      	bne.n	27f1e <parse_ncellmeas+0x6e>
	cells->current_cell.timing_advance = tmp;
   27ffa:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   27ffc:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   27ffe:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   28000:	f105 0210 	add.w	r2, r5, #16
   28004:	a807      	add	r0, sp, #28
   28006:	f017 fa7a 	bl	3f4fe <at_params_int_get>
	if (err) {
   2800a:	4604      	mov	r4, r0
   2800c:	2800      	cmp	r0, #0
   2800e:	d186      	bne.n	27f1e <parse_ncellmeas+0x6e>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   28010:	4641      	mov	r1, r8
   28012:	f105 0228 	add.w	r2, r5, #40	; 0x28
   28016:	a807      	add	r0, sp, #28
   28018:	f017 fa35 	bl	3f486 <at_params_short_get>
	if (err) {
   2801c:	4604      	mov	r4, r0
   2801e:	2800      	cmp	r0, #0
   28020:	f47f af7d 	bne.w	27f1e <parse_ncellmeas+0x6e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   28024:	2108      	movs	r1, #8
   28026:	aa02      	add	r2, sp, #8
   28028:	a807      	add	r0, sp, #28
   2802a:	f017 fa68 	bl	3f4fe <at_params_int_get>
	if (err) {
   2802e:	4604      	mov	r4, r0
   28030:	2800      	cmp	r0, #0
   28032:	f47f af74 	bne.w	27f1e <parse_ncellmeas+0x6e>
	cells->current_cell.rsrp = tmp;
   28036:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   28038:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   2803a:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   2803c:	aa02      	add	r2, sp, #8
   2803e:	a807      	add	r0, sp, #28
   28040:	f017 fa5d 	bl	3f4fe <at_params_int_get>
	if (err) {
   28044:	4604      	mov	r4, r0
   28046:	2800      	cmp	r0, #0
   28048:	f47f af69 	bne.w	27f1e <parse_ncellmeas+0x6e>
	cells->current_cell.rsrq = tmp;
   2804c:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   2804e:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   28050:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   28052:	f105 0220 	add.w	r2, r5, #32
   28056:	a807      	add	r0, sp, #28
   28058:	f017 fa6e 	bl	3f538 <at_params_int64_get>
	if (err) {
   2805c:	4604      	mov	r4, r0
   2805e:	2800      	cmp	r0, #0
   28060:	f47f af5d 	bne.w	27f1e <parse_ncellmeas+0x6e>
	cells->ncells_count = neighborcell_count_get(at_response);
   28064:	4630      	mov	r0, r6
   28066:	f7ff ff07 	bl	27e78 <neighborcell_count_get>
   2806a:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   2806e:	b2c6      	uxtb	r6, r0
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   28070:	a807      	add	r0, sp, #28
   28072:	f017 faa0 	bl	3f5b6 <at_params_valid_count_get>
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   28076:	eb06 0686 	add.w	r6, r6, r6, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   2807a:	360b      	adds	r6, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   2807c:	4286      	cmp	r6, r0
   2807e:	d208      	bcs.n	28092 <parse_ncellmeas+0x1e2>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   28080:	4631      	mov	r1, r6
   28082:	f105 0218 	add.w	r2, r5, #24
   28086:	a807      	add	r0, sp, #28
   28088:	f017 fa56 	bl	3f538 <at_params_int64_get>
		if (err) {
   2808c:	b128      	cbz	r0, 2809a <parse_ncellmeas+0x1ea>
   2808e:	4604      	mov	r4, r0
   28090:	e745      	b.n	27f1e <parse_ncellmeas+0x6e>
		cells->current_cell.timing_advance_meas_time = 0;
   28092:	2200      	movs	r2, #0
   28094:	2300      	movs	r3, #0
   28096:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   2809a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   2809e:	2b00      	cmp	r3, #0
   280a0:	f43f af3d 	beq.w	27f1e <parse_ncellmeas+0x6e>
   280a4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   280a6:	2b00      	cmp	r3, #0
   280a8:	f43f af39 	beq.w	27f1e <parse_ncellmeas+0x6e>
   280ac:	260f      	movs	r6, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   280ae:	f04f 0800 	mov.w	r8, #0
   280b2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   280b6:	4598      	cmp	r8, r3
   280b8:	d304      	bcc.n	280c4 <parse_ncellmeas+0x214>
		err = -E2BIG;
   280ba:	2f00      	cmp	r7, #0
   280bc:	bf18      	it	ne
   280be:	f06f 0406 	mvnne.w	r4, #6
   280c2:	e72c      	b.n	27f1e <parse_ncellmeas+0x6e>
					&cells->neighbor_cells[i].earfcn);
   280c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   280c6:	1f31      	subs	r1, r6, #4
   280c8:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   280cc:	a807      	add	r0, sp, #28
   280ce:	ea4f 1908 	mov.w	r9, r8, lsl #4
   280d2:	f017 fa14 	bl	3f4fe <at_params_int_get>
		if (err) {
   280d6:	2800      	cmp	r0, #0
   280d8:	d1d9      	bne.n	2808e <parse_ncellmeas+0x1de>
					  &cells->neighbor_cells[i].phys_cell_id);
   280da:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   280dc:	1ef1      	subs	r1, r6, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   280de:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   280e0:	3208      	adds	r2, #8
   280e2:	a807      	add	r0, sp, #28
   280e4:	f017 f9cf 	bl	3f486 <at_params_short_get>
		if (err) {
   280e8:	2800      	cmp	r0, #0
   280ea:	d1d0      	bne.n	2808e <parse_ncellmeas+0x1de>
		err = at_params_int_get(&resp_list,
   280ec:	aa02      	add	r2, sp, #8
   280ee:	1eb1      	subs	r1, r6, #2
   280f0:	a807      	add	r0, sp, #28
   280f2:	f017 fa04 	bl	3f4fe <at_params_int_get>
		if (err) {
   280f6:	2800      	cmp	r0, #0
   280f8:	d1c9      	bne.n	2808e <parse_ncellmeas+0x1de>
		cells->neighbor_cells[i].rsrp = tmp;
   280fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   280fc:	9a02      	ldr	r2, [sp, #8]
   280fe:	444b      	add	r3, r9
   28100:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   28102:	1e71      	subs	r1, r6, #1
   28104:	aa02      	add	r2, sp, #8
   28106:	a807      	add	r0, sp, #28
   28108:	f017 f9f9 	bl	3f4fe <at_params_int_get>
		if (err) {
   2810c:	2800      	cmp	r0, #0
   2810e:	d1be      	bne.n	2808e <parse_ncellmeas+0x1de>
		cells->neighbor_cells[i].rsrq = tmp;
   28110:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   28112:	9b02      	ldr	r3, [sp, #8]
   28114:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   28116:	4631      	mov	r1, r6
		cells->neighbor_cells[i].rsrq = tmp;
   28118:	8193      	strh	r3, [r2, #12]
		err = at_params_int_get(&resp_list,
   2811a:	a807      	add	r0, sp, #28
   2811c:	3204      	adds	r2, #4
   2811e:	f017 f9ee 	bl	3f4fe <at_params_int_get>
		if (err) {
   28122:	3605      	adds	r6, #5
   28124:	2800      	cmp	r0, #0
   28126:	d1b2      	bne.n	2808e <parse_ncellmeas+0x1de>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   28128:	f108 0801 	add.w	r8, r8, #1
   2812c:	e7c1      	b.n	280b2 <parse_ncellmeas+0x202>
		err = 1;
   2812e:	2401      	movs	r4, #1
   28130:	e6f5      	b.n	27f1e <parse_ncellmeas+0x6e>
   28132:	bf00      	nop
   28134:	00045d1d 	.word	0x00045d1d
   28138:	00046137 	.word	0x00046137
   2813c:	00045fc0 	.word	0x00045fc0
   28140:	00045c5d 	.word	0x00045c5d

00028144 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   28144:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;
	struct at_param_list resp_list = {0};
   28146:	2300      	movs	r3, #0
{
   28148:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   2814a:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   2814c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   28150:	2900      	cmp	r1, #0
   28152:	d047      	beq.n	281e4 <parse_xmodemsleep+0xa0>
   28154:	2800      	cmp	r0, #0
   28156:	d045      	beq.n	281e4 <parse_xmodemsleep+0xa0>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   28158:	2104      	movs	r1, #4
   2815a:	a802      	add	r0, sp, #8
   2815c:	f017 f8f8 	bl	3f350 <at_params_list_init>
	if (err) {
   28160:	4604      	mov	r4, r0
   28162:	b138      	cbz	r0, 28174 <parse_xmodemsleep+0x30>
		LOG_ERR("Could not init AT params list, error: %d", err);
   28164:	4602      	mov	r2, r0
   28166:	2145      	movs	r1, #69	; 0x45
   28168:	4820      	ldr	r0, [pc, #128]	; (281ec <parse_xmodemsleep+0xa8>)
   2816a:	f014 fdb0 	bl	3ccce <z_log_minimal_printk>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   2816e:	4620      	mov	r0, r4
   28170:	b004      	add	sp, #16
   28172:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   28174:	4601      	mov	r1, r0
   28176:	aa02      	add	r2, sp, #8
   28178:	4630      	mov	r0, r6
   2817a:	f017 f8e6 	bl	3f34a <at_parser_params_from_str>
	if (err) {
   2817e:	4604      	mov	r4, r0
   28180:	b128      	cbz	r0, 2818e <parse_xmodemsleep+0x4a>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   28182:	2145      	movs	r1, #69	; 0x45
   28184:	4602      	mov	r2, r0
   28186:	481a      	ldr	r0, [pc, #104]	; (281f0 <parse_xmodemsleep+0xac>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   28188:	f014 fda1 	bl	3ccce <z_log_minimal_printk>
		goto clean_exit;
   2818c:	e019      	b.n	281c2 <parse_xmodemsleep+0x7e>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   2818e:	2101      	movs	r1, #1
   28190:	f10d 0206 	add.w	r2, sp, #6
   28194:	a802      	add	r0, sp, #8
   28196:	f017 f996 	bl	3f4c6 <at_params_unsigned_short_get>
	if (err) {
   2819a:	4604      	mov	r4, r0
   2819c:	b118      	cbz	r0, 281a6 <parse_xmodemsleep+0x62>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   2819e:	4602      	mov	r2, r0
   281a0:	2145      	movs	r1, #69	; 0x45
   281a2:	4814      	ldr	r0, [pc, #80]	; (281f4 <parse_xmodemsleep+0xb0>)
   281a4:	e7f0      	b.n	28188 <parse_xmodemsleep+0x44>
	modem_sleep->type = type;
   281a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   281aa:	a802      	add	r0, sp, #8
	modem_sleep->type = type;
   281ac:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   281ae:	f017 fa02 	bl	3f5b6 <at_params_valid_count_get>
   281b2:	2802      	cmp	r0, #2
   281b4:	d809      	bhi.n	281ca <parse_xmodemsleep+0x86>
		modem_sleep->time = -1;
   281b6:	f04f 32ff 	mov.w	r2, #4294967295
   281ba:	f04f 33ff 	mov.w	r3, #4294967295
   281be:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   281c2:	a802      	add	r0, sp, #8
   281c4:	f017 f8d7 	bl	3f376 <at_params_list_free>
	return err;
   281c8:	e7d1      	b.n	2816e <parse_xmodemsleep+0x2a>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   281ca:	2102      	movs	r1, #2
   281cc:	f105 0208 	add.w	r2, r5, #8
   281d0:	a802      	add	r0, sp, #8
   281d2:	f017 f9b1 	bl	3f538 <at_params_int64_get>
	if (err) {
   281d6:	4604      	mov	r4, r0
   281d8:	2800      	cmp	r0, #0
   281da:	d0f2      	beq.n	281c2 <parse_xmodemsleep+0x7e>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   281dc:	4602      	mov	r2, r0
   281de:	2145      	movs	r1, #69	; 0x45
   281e0:	4805      	ldr	r0, [pc, #20]	; (281f8 <parse_xmodemsleep+0xb4>)
   281e2:	e7d1      	b.n	28188 <parse_xmodemsleep+0x44>
		return -EINVAL;
   281e4:	f06f 0415 	mvn.w	r4, #21
   281e8:	e7c1      	b.n	2816e <parse_xmodemsleep+0x2a>
   281ea:	bf00      	nop
   281ec:	00045d1d 	.word	0x00045d1d
   281f0:	0004616e 	.word	0x0004616e
   281f4:	000461a5 	.word	0x000461a5
   281f8:	000461d3 	.word	0x000461d3

000281fc <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   281fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   281fe:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   28200:	4604      	mov	r4, r0
   28202:	b1e8      	cbz	r0, 28240 <parse_mdmev+0x44>
   28204:	b1e1      	cbz	r1, 28240 <parse_mdmev+0x44>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   28206:	2108      	movs	r1, #8
   28208:	4a0f      	ldr	r2, [pc, #60]	; (28248 <parse_mdmev+0x4c>)
   2820a:	f7ff fc1f 	bl	27a4c <response_is_valid>
   2820e:	b930      	cbnz	r0, 2821e <parse_mdmev+0x22>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   28210:	480e      	ldr	r0, [pc, #56]	; (2824c <parse_mdmev+0x50>)
   28212:	2145      	movs	r1, #69	; 0x45
   28214:	f014 fd5b 	bl	3ccce <z_log_minimal_printk>
		return -EIO;
   28218:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", log_strdup(at_response));

	return -ENODATA;
}
   2821c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   2821e:	2500      	movs	r5, #0
   28220:	4f0b      	ldr	r7, [pc, #44]	; (28250 <parse_mdmev+0x54>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   28222:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   28224:	4621      	mov	r1, r4
   28226:	f857 0b04 	ldr.w	r0, [r7], #4
   2822a:	f7f5 f800 	bl	1d22e <strcmp>
   2822e:	b908      	cbnz	r0, 28234 <parse_mdmev+0x38>
			*modem_evt = i;
   28230:	7035      	strb	r5, [r6, #0]
			return 0;
   28232:	e7f3      	b.n	2821c <parse_mdmev+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   28234:	3501      	adds	r5, #1
   28236:	2d05      	cmp	r5, #5
   28238:	d1f4      	bne.n	28224 <parse_mdmev+0x28>
	return -ENODATA;
   2823a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   2823e:	e7ed      	b.n	2821c <parse_mdmev+0x20>
		return -EINVAL;
   28240:	f06f 0015 	mvn.w	r0, #21
   28244:	e7ea      	b.n	2821c <parse_mdmev+0x20>
   28246:	bf00      	nop
   28248:	0004620d 	.word	0x0004620d
   2824c:	00046216 	.word	0x00046216
   28250:	00042ec8 	.word	0x00042ec8

00028254 <modem_info_parse>:
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
			    const char *buf)
{
   28254:	b510      	push	{r4, lr}
   28256:	4604      	mov	r4, r0
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   28258:	4a09      	ldr	r2, [pc, #36]	; (28280 <modem_info_parse+0x2c>)
{
   2825a:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   2825c:	7a63      	ldrb	r3, [r4, #9]
   2825e:	2100      	movs	r1, #0
   28260:	f7fe fcf0 	bl	26c44 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   28264:	f110 0f0b 	cmn.w	r0, #11
   28268:	d000      	beq.n	2826c <modem_info_parse+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   2826a:	b940      	cbnz	r0, 2827e <modem_info_parse+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   2826c:	4804      	ldr	r0, [pc, #16]	; (28280 <modem_info_parse+0x2c>)
   2826e:	f017 f9a2 	bl	3f5b6 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   28272:	7a63      	ldrb	r3, [r4, #9]
		return -EAGAIN;
   28274:	4298      	cmp	r0, r3
   28276:	bf94      	ite	ls
   28278:	2000      	movls	r0, #0
   2827a:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   2827e:	bd10      	pop	{r4, pc}
   28280:	20019418 	.word	0x20019418

00028284 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(const char *notif)
{
   28284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   28286:	4604      	mov	r4, r0
	int err;
	uint16_t param_value;

	const struct modem_info_data rsrp_notify_data = {
   28288:	4a11      	ldr	r2, [pc, #68]	; (282d0 <modem_info_rsrp_subscribe_handler+0x4c>)
   2828a:	ab01      	add	r3, sp, #4
   2828c:	ca07      	ldmia	r2, {r0, r1, r2}
   2828e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_INT,
	};

	err = modem_info_parse(&rsrp_notify_data, notif);
   28292:	4621      	mov	r1, r4
   28294:	4618      	mov	r0, r3
   28296:	f7ff ffdd 	bl	28254 <modem_info_parse>
	if (err != 0) {
   2829a:	4602      	mov	r2, r0
   2829c:	b128      	cbz	r0, 282aa <modem_info_rsrp_subscribe_handler+0x26>
		LOG_ERR("modem_info_parse failed to parse "
   2829e:	2145      	movs	r1, #69	; 0x45
   282a0:	480c      	ldr	r0, [pc, #48]	; (282d4 <modem_info_rsrp_subscribe_handler+0x50>)

	err = at_params_unsigned_short_get(&m_param_list,
					   rsrp_notify_data.param_index,
					   &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   282a2:	f014 fd14 	bl	3ccce <z_log_minimal_printk>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   282a6:	b004      	add	sp, #16
   282a8:	bd10      	pop	{r4, pc}
	err = at_params_unsigned_short_get(&m_param_list,
   282aa:	f10d 0202 	add.w	r2, sp, #2
   282ae:	f89d 100c 	ldrb.w	r1, [sp, #12]
   282b2:	4809      	ldr	r0, [pc, #36]	; (282d8 <modem_info_rsrp_subscribe_handler+0x54>)
   282b4:	f017 f907 	bl	3f4c6 <at_params_unsigned_short_get>
	if (err != 0) {
   282b8:	4602      	mov	r2, r0
   282ba:	b110      	cbz	r0, 282c2 <modem_info_rsrp_subscribe_handler+0x3e>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   282bc:	2145      	movs	r1, #69	; 0x45
   282be:	4807      	ldr	r0, [pc, #28]	; (282dc <modem_info_rsrp_subscribe_handler+0x58>)
   282c0:	e7ef      	b.n	282a2 <modem_info_rsrp_subscribe_handler+0x1e>
	modem_info_rsrp_cb(param_value);
   282c2:	4b07      	ldr	r3, [pc, #28]	; (282e0 <modem_info_rsrp_subscribe_handler+0x5c>)
   282c4:	f89d 0002 	ldrb.w	r0, [sp, #2]
   282c8:	681b      	ldr	r3, [r3, #0]
   282ca:	4798      	blx	r3
   282cc:	e7eb      	b.n	282a6 <modem_info_rsrp_subscribe_handler+0x22>
   282ce:	bf00      	nop
   282d0:	000429d0 	.word	0x000429d0
   282d4:	000463ef 	.word	0x000463ef
   282d8:	20019418 	.word	0x20019418
   282dc:	0004642b 	.word	0x0004642b
   282e0:	20019420 	.word	0x20019420

000282e4 <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   282e4:	2815      	cmp	r0, #21
	return modem_data[info_type]->data_type;
   282e6:	bf9d      	ittte	ls
   282e8:	4b02      	ldrls	r3, [pc, #8]	; (282f4 <modem_info_type_get+0x10>)
   282ea:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   282ee:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   282f0:	20ea      	movhi	r0, #234	; 0xea
}
   282f2:	4770      	bx	lr
   282f4:	00042fe8 	.word	0x00042fe8

000282f8 <modem_info_name_get>:
{
   282f8:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   282fa:	460d      	mov	r5, r1
   282fc:	b919      	cbnz	r1, 28306 <modem_info_name_get+0xe>
		return -EINVAL;
   282fe:	f06f 0415 	mvn.w	r4, #21
}
   28302:	4620      	mov	r0, r4
   28304:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   28306:	4b07      	ldr	r3, [pc, #28]	; (28324 <modem_info_name_get+0x2c>)
   28308:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2830c:	6870      	ldr	r0, [r6, #4]
   2830e:	f7f4 ff98 	bl	1d242 <strlen>
	if (len <= 0) {
   28312:	1e04      	subs	r4, r0, #0
   28314:	ddf3      	ble.n	282fe <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28316:	4622      	mov	r2, r4
   28318:	4628      	mov	r0, r5
   2831a:	6871      	ldr	r1, [r6, #4]
   2831c:	f019 f951 	bl	415c2 <memcpy>
   28320:	e7ef      	b.n	28302 <modem_info_name_get+0xa>
   28322:	bf00      	nop
   28324:	00042fe8 	.word	0x00042fe8

00028328 <modem_info_short_get>:
{
   28328:	b530      	push	{r4, r5, lr}
   2832a:	460d      	mov	r5, r1
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2832c:	2100      	movs	r1, #0
{
   2832e:	b0a1      	sub	sp, #132	; 0x84
   28330:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   28332:	227c      	movs	r2, #124	; 0x7c
   28334:	a801      	add	r0, sp, #4
   28336:	9100      	str	r1, [sp, #0]
   28338:	f019 f963 	bl	41602 <memset>
	if (buf == NULL) {
   2833c:	b1d5      	cbz	r5, 28374 <modem_info_short_get+0x4c>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2833e:	4b10      	ldr	r3, [pc, #64]	; (28380 <modem_info_short_get+0x58>)
   28340:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   28344:	7aa3      	ldrb	r3, [r4, #10]
   28346:	2b02      	cmp	r3, #2
   28348:	d014      	beq.n	28374 <modem_info_short_get+0x4c>
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   2834a:	2180      	movs	r1, #128	; 0x80
   2834c:	4668      	mov	r0, sp
   2834e:	6822      	ldr	r2, [r4, #0]
   28350:	f00c ff1c 	bl	3518c <nrf_modem_at_cmd>
	if (err != 0) {
   28354:	b988      	cbnz	r0, 2837a <modem_info_short_get+0x52>
	err = modem_info_parse(modem_data[info], recv_buf);
   28356:	4669      	mov	r1, sp
   28358:	4620      	mov	r0, r4
   2835a:	f7ff ff7b 	bl	28254 <modem_info_parse>
	if (err) {
   2835e:	b938      	cbnz	r0, 28370 <modem_info_short_get+0x48>
	err = at_params_unsigned_short_get(&m_param_list,
   28360:	462a      	mov	r2, r5
   28362:	7a21      	ldrb	r1, [r4, #8]
   28364:	4807      	ldr	r0, [pc, #28]	; (28384 <modem_info_short_get+0x5c>)
   28366:	f017 f8ae 	bl	3f4c6 <at_params_unsigned_short_get>
	return sizeof(uint16_t);
   2836a:	2800      	cmp	r0, #0
   2836c:	bf08      	it	eq
   2836e:	2002      	moveq	r0, #2
}
   28370:	b021      	add	sp, #132	; 0x84
   28372:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   28374:	f06f 0015 	mvn.w	r0, #21
   28378:	e7fa      	b.n	28370 <modem_info_short_get+0x48>
		return -EIO;
   2837a:	f06f 0004 	mvn.w	r0, #4
   2837e:	e7f7      	b.n	28370 <modem_info_short_get+0x48>
   28380:	00042fe8 	.word	0x00042fe8
   28384:	20019418 	.word	0x20019418

00028388 <modem_info_string_get>:
{
   28388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2838c:	2700      	movs	r7, #0
{
   2838e:	460d      	mov	r5, r1
   28390:	b0b5      	sub	sp, #212	; 0xd4
   28392:	4604      	mov	r4, r0
   28394:	4616      	mov	r6, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   28396:	4639      	mov	r1, r7
   28398:	227c      	movs	r2, #124	; 0x7c
   2839a:	a815      	add	r0, sp, #84	; 0x54
   2839c:	9714      	str	r7, [sp, #80]	; 0x50
   2839e:	f019 f930 	bl	41602 <memset>
	size_t len = 0;
   283a2:	9702      	str	r7, [sp, #8]
	if ((buf == NULL) || (buf_size == 0)) {
   283a4:	2d00      	cmp	r5, #0
   283a6:	f000 8118 	beq.w	285da <modem_info_string_get+0x252>
   283aa:	2e00      	cmp	r6, #0
   283ac:	f000 8115 	beq.w	285da <modem_info_string_get+0x252>
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   283b0:	4b8e      	ldr	r3, [pc, #568]	; (285ec <modem_info_string_get+0x264>)
	buf[0] = '\0';
   283b2:	702f      	strb	r7, [r5, #0]
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   283b4:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
   283b8:	2180      	movs	r1, #128	; 0x80
   283ba:	683a      	ldr	r2, [r7, #0]
   283bc:	a814      	add	r0, sp, #80	; 0x50
   283be:	f00c fee5 	bl	3518c <nrf_modem_at_cmd>
	if (err != 0) {
   283c2:	4680      	mov	r8, r0
   283c4:	2800      	cmp	r0, #0
   283c6:	f040 810b 	bne.w	285e0 <modem_info_string_get+0x258>
	if (info == MODEM_INFO_SUP_BAND) {
   283ca:	2c02      	cmp	r4, #2
   283cc:	d123      	bne.n	28416 <modem_info_string_get+0x8e>
		char *str_begin = strchr(recv_buf, '(');
   283ce:	2128      	movs	r1, #40	; 0x28
   283d0:	a814      	add	r0, sp, #80	; 0x50
   283d2:	f019 fad4 	bl	4197e <strchr>
   283d6:	4607      	mov	r7, r0
		str_end = strchr(recv_buf, ')');
   283d8:	2129      	movs	r1, #41	; 0x29
   283da:	a814      	add	r0, sp, #80	; 0x50
   283dc:	f019 facf 	bl	4197e <strchr>
		if (!str_begin || !str_end) {
   283e0:	2f00      	cmp	r7, #0
   283e2:	f000 8100 	beq.w	285e6 <modem_info_string_get+0x25e>
   283e6:	2800      	cmp	r0, #0
   283e8:	f000 80fd 	beq.w	285e6 <modem_info_string_get+0x25e>
		*(str_end + 1) = 0;
   283ec:	f880 8001 	strb.w	r8, [r0, #1]
		len = strlen(str_begin);
   283f0:	4638      	mov	r0, r7
   283f2:	f7f4 ff26 	bl	1d242 <strlen>
		if (len >= buf_size) {
   283f6:	42b0      	cmp	r0, r6
		len = strlen(str_begin);
   283f8:	4604      	mov	r4, r0
   283fa:	9002      	str	r0, [sp, #8]
		if (len >= buf_size) {
   283fc:	d302      	bcc.n	28404 <modem_info_string_get+0x7c>
		return -EMSGSIZE;
   283fe:	f06f 0979 	mvn.w	r9, #121	; 0x79
   28402:	e004      	b.n	2840e <modem_info_string_get+0x86>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   28404:	4639      	mov	r1, r7
   28406:	4628      	mov	r0, r5
   28408:	f019 fac6 	bl	41998 <strcpy>
		return len;
   2840c:	46a1      	mov	r9, r4
}
   2840e:	4648      	mov	r0, r9
   28410:	b035      	add	sp, #212	; 0xd4
   28412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = modem_info_parse(modem_data[info], recv_buf);
   28416:	4638      	mov	r0, r7
   28418:	a914      	add	r1, sp, #80	; 0x50
   2841a:	f7ff ff1b 	bl	28254 <modem_info_parse>
	if (err) {
   2841e:	4681      	mov	r9, r0
   28420:	b128      	cbz	r0, 2842e <modem_info_string_get+0xa6>
		LOG_ERR("Unable to parse data: %d", err);
   28422:	464a      	mov	r2, r9
   28424:	2145      	movs	r1, #69	; 0x45
   28426:	4872      	ldr	r0, [pc, #456]	; (285f0 <modem_info_string_get+0x268>)
			LOG_ERR("Unable to obtain short: %d", err);
   28428:	f014 fc51 	bl	3ccce <z_log_minimal_printk>
			return err;
   2842c:	e7ef      	b.n	2840e <modem_info_string_get+0x86>
	if (info == MODEM_INFO_IP_ADDRESS) {
   2842e:	2c09      	cmp	r4, #9
   28430:	d17e      	bne.n	28530 <modem_info_string_get+0x1a8>
	size_t len = 0;
   28432:	9003      	str	r0, [sp, #12]
	p = strstr(in_buf, "OK\r\n");
   28434:	496f      	ldr	r1, [pc, #444]	; (285f4 <modem_info_string_get+0x26c>)
   28436:	a814      	add	r0, sp, #80	; 0x50
   28438:	f019 fafd 	bl	41a36 <strstr>
	if (!p) {
   2843c:	2800      	cmp	r0, #0
   2843e:	f000 80cc 	beq.w	285da <modem_info_string_get+0x252>
	while ((str_end = strstr(str_end, AT_CMD_RSP_DELIM)) != NULL) {
   28442:	4f6d      	ldr	r7, [pc, #436]	; (285f8 <modem_info_string_get+0x270>)
	*p = '\0';
   28444:	f880 9000 	strb.w	r9, [r0]
	char *str_end = in_buf;
   28448:	a814      	add	r0, sp, #80	; 0x50
	while ((str_end = strstr(str_end, AT_CMD_RSP_DELIM)) != NULL) {
   2844a:	4639      	mov	r1, r7
   2844c:	f019 faf3 	bl	41a36 <strstr>
   28450:	4604      	mov	r4, r0
   28452:	2800      	cmp	r0, #0
   28454:	d13a      	bne.n	284cc <modem_info_string_get+0x144>
	if (total_ip_count == 0) {
   28456:	f1b9 0f00 	cmp.w	r9, #0
   2845a:	d0d8      	beq.n	2840e <modem_info_string_get+0x86>
	first_address = true;
   2845c:	f04f 0801 	mov.w	r8, #1
	err = at_params_string_get(&m_param_list,
   28460:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 28610 <modem_info_string_get+0x288>
   28464:	f109 37ff 	add.w	r7, r9, #4294967295
	str_end = strstr(&in_buf[line_start_idx], AT_CMD_RSP_DELIM);
   28468:	ab14      	add	r3, sp, #80	; 0x50
   2846a:	eb03 0904 	add.w	r9, r3, r4
   2846e:	4648      	mov	r0, r9
   28470:	4961      	ldr	r1, [pc, #388]	; (285f8 <modem_info_string_get+0x270>)
   28472:	f019 fae0 	bl	41a36 <strstr>
	if (str_end == NULL) {
   28476:	2800      	cmp	r0, #0
   28478:	f000 80b5 	beq.w	285e6 <modem_info_string_get+0x25e>
	in_buf[++line_len + line_start_idx] = '\0';
   2847c:	2100      	movs	r1, #0
	line_len = str_end - &in_buf[line_start_idx];
   2847e:	eba0 0009 	sub.w	r0, r0, r9
	in_buf[++line_len + line_start_idx] = '\0';
   28482:	3401      	adds	r4, #1
   28484:	4404      	add	r4, r0
   28486:	ab34      	add	r3, sp, #208	; 0xd0
   28488:	191a      	adds	r2, r3, r4
   2848a:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[MODEM_INFO_IP_ADDRESS], &in_buf[line_start_idx]);
   2848e:	485b      	ldr	r0, [pc, #364]	; (285fc <modem_info_string_get+0x274>)
   28490:	4649      	mov	r1, r9
   28492:	f7ff fedf 	bl	28254 <modem_info_parse>
	if (err) {
   28496:	4681      	mov	r9, r0
   28498:	2800      	cmp	r0, #0
   2849a:	d1c2      	bne.n	28422 <modem_info_string_get+0x9a>
	len = sizeof(ip_buf);
   2849c:	2340      	movs	r3, #64	; 0x40
	err = at_params_string_get(&m_param_list,
   2849e:	f10d 0a10 	add.w	sl, sp, #16
	len = sizeof(ip_buf);
   284a2:	9303      	str	r3, [sp, #12]
	err = at_params_string_get(&m_param_list,
   284a4:	4652      	mov	r2, sl
   284a6:	2104      	movs	r1, #4
   284a8:	4658      	mov	r0, fp
   284aa:	ab03      	add	r3, sp, #12
   284ac:	f017 f85c 	bl	3f568 <at_params_string_get>
	if (err != 0) {
   284b0:	4681      	mov	r9, r0
   284b2:	2800      	cmp	r0, #0
   284b4:	d1ab      	bne.n	2840e <modem_info_string_get+0x86>
	} else if (len >= sizeof(ip_buf)) {
   284b6:	9903      	ldr	r1, [sp, #12]
   284b8:	293f      	cmp	r1, #63	; 0x3f
   284ba:	d8a0      	bhi.n	283fe <modem_info_string_get+0x76>
	if (len == 0) {
   284bc:	b951      	cbnz	r1, 284d4 <modem_info_string_get+0x14c>
		line_start_idx += line_len + 1;
   284be:	3401      	adds	r4, #1
		if (--current_ip_idx) {
   284c0:	bba7      	cbnz	r7, 2852c <modem_info_string_get+0x1a4>
	return strlen(out_buf);
   284c2:	4628      	mov	r0, r5
   284c4:	f7f4 febd 	bl	1d242 <strlen>
   284c8:	4681      	mov	r9, r0
   284ca:	e7a0      	b.n	2840e <modem_info_string_get+0x86>
		str_end++;
   284cc:	1c60      	adds	r0, r4, #1
		total_ip_count++;
   284ce:	f109 0901 	add.w	r9, r9, #1
   284d2:	e7ba      	b.n	2844a <modem_info_string_get+0xc2>
	ip_buf[len] = '\0';
   284d4:	ab34      	add	r3, sp, #208	; 0xd0
   284d6:	4419      	add	r1, r3
   284d8:	f801 0cc0 	strb.w	r0, [r1, #-192]
	ip_v6_str = strstr(ip_buf, " ");
   284dc:	4650      	mov	r0, sl
   284de:	4948      	ldr	r1, [pc, #288]	; (28600 <modem_info_string_get+0x278>)
   284e0:	f019 faa9 	bl	41a36 <strstr>
	if (ip_v6_str) {
   284e4:	b128      	cbz	r0, 284f2 <modem_info_string_get+0x16a>
		*ip_v6_str = '\0';
   284e6:	f880 9000 	strb.w	r9, [r0]
		len = strlen(ip_buf);
   284ea:	4650      	mov	r0, sl
   284ec:	f7f4 fea9 	bl	1d242 <strlen>
   284f0:	9003      	str	r0, [sp, #12]
	out_buf_len = strlen(out_buf);
   284f2:	4628      	mov	r0, r5
   284f4:	f7f4 fea5 	bl	1d242 <strlen>
	err = snprintk(out_buf + out_buf_len,
   284f8:	4a42      	ldr	r2, [pc, #264]	; (28604 <modem_info_string_get+0x27c>)
   284fa:	4b43      	ldr	r3, [pc, #268]	; (28608 <modem_info_string_get+0x280>)
   284fc:	eba6 0900 	sub.w	r9, r6, r0
   28500:	f1b8 0f00 	cmp.w	r8, #0
   28504:	bf18      	it	ne
   28506:	4613      	movne	r3, r2
   28508:	4649      	mov	r1, r9
   2850a:	4a40      	ldr	r2, [pc, #256]	; (2860c <modem_info_string_get+0x284>)
   2850c:	f8cd a000 	str.w	sl, [sp]
   28510:	4428      	add	r0, r5
   28512:	f014 f9cc 	bl	3c8ae <snprintk>
	if ((err <= 0) || (err > (out_buf_size - out_buf_len))) {
   28516:	2800      	cmp	r0, #0
   28518:	f77f af71 	ble.w	283fe <modem_info_string_get+0x76>
   2851c:	4581      	cmp	r9, r0
   2851e:	f4ff af6e 	bcc.w	283fe <modem_info_string_get+0x76>
	if (--current_ip_idx) {
   28522:	2f00      	cmp	r7, #0
   28524:	d0cd      	beq.n	284c2 <modem_info_string_get+0x13a>
	first_address = false;
   28526:	f04f 0800 	mov.w	r8, #0
		line_start_idx  += line_len + 1;
   2852a:	3401      	adds	r4, #1
		goto parse_line;
   2852c:	3f01      	subs	r7, #1
   2852e:	e79b      	b.n	28468 <modem_info_string_get+0xe0>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_INT) {
   28530:	7abb      	ldrb	r3, [r7, #10]
   28532:	2b01      	cmp	r3, #1
   28534:	d133      	bne.n	2859e <modem_info_string_get+0x216>
		err = at_params_unsigned_short_get(&m_param_list,
   28536:	7a39      	ldrb	r1, [r7, #8]
   28538:	4835      	ldr	r0, [pc, #212]	; (28610 <modem_info_string_get+0x288>)
   2853a:	aa04      	add	r2, sp, #16
   2853c:	f016 ffc3 	bl	3f4c6 <at_params_unsigned_short_get>
		if (err) {
   28540:	4681      	mov	r9, r0
   28542:	b118      	cbz	r0, 2854c <modem_info_string_get+0x1c4>
			LOG_ERR("Unable to obtain short: %d", err);
   28544:	4602      	mov	r2, r0
   28546:	2145      	movs	r1, #69	; 0x45
   28548:	4832      	ldr	r0, [pc, #200]	; (28614 <modem_info_string_get+0x28c>)
   2854a:	e76d      	b.n	28428 <modem_info_string_get+0xa0>
		len = snprintf(buf, buf_size, "%d", param_value);
   2854c:	4631      	mov	r1, r6
   2854e:	4628      	mov	r0, r5
   28550:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   28554:	4a30      	ldr	r2, [pc, #192]	; (28618 <modem_info_string_get+0x290>)
   28556:	f012 f931 	bl	3a7bc <sniprintf>
   2855a:	9002      	str	r0, [sp, #8]
		if ((len <= 0) || (len > buf_size)) {
   2855c:	2800      	cmp	r0, #0
   2855e:	f43f af4e 	beq.w	283fe <modem_info_string_get+0x76>
   28562:	4286      	cmp	r6, r0
   28564:	f4ff af4b 	bcc.w	283fe <modem_info_string_get+0x76>
	if (info == MODEM_INFO_ICCID) {
   28568:	2c0e      	cmp	r4, #14
   2856a:	d111      	bne.n	28590 <modem_info_string_get+0x208>
   2856c:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   2856e:	4628      	mov	r0, r5
   28570:	f7f4 fe67 	bl	1d242 <strlen>
   28574:	1ca3      	adds	r3, r4, #2
   28576:	1b64      	subs	r4, r4, r5
   28578:	42a0      	cmp	r0, r4
   2857a:	d824      	bhi.n	285c6 <modem_info_string_get+0x23e>
		if ((len == ICCID_LEN) &&
   2857c:	9b02      	ldr	r3, [sp, #8]
   2857e:	2b14      	cmp	r3, #20
   28580:	d106      	bne.n	28590 <modem_info_string_get+0x208>
   28582:	7ceb      	ldrb	r3, [r5, #19]
   28584:	2b46      	cmp	r3, #70	; 0x46
			buf[len - 1] = '\0';
   28586:	bf01      	itttt	eq
   28588:	2300      	moveq	r3, #0
   2858a:	74eb      	strbeq	r3, [r5, #19]
			--len;
   2858c:	2313      	moveq	r3, #19
   2858e:	9302      	streq	r3, [sp, #8]
	return len <= 0 ? -ENOTSUP : len;
   28590:	9802      	ldr	r0, [sp, #8]
   28592:	2800      	cmp	r0, #0
   28594:	bf14      	ite	ne
   28596:	4681      	movne	r9, r0
   28598:	f06f 0985 	mvneq.w	r9, #133	; 0x85
   2859c:	e737      	b.n	2840e <modem_info_string_get+0x86>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2859e:	2b02      	cmp	r3, #2
   285a0:	d1e2      	bne.n	28568 <modem_info_string_get+0x1e0>
		err = at_params_string_get(&m_param_list,
   285a2:	462a      	mov	r2, r5
   285a4:	7a39      	ldrb	r1, [r7, #8]
   285a6:	481a      	ldr	r0, [pc, #104]	; (28610 <modem_info_string_get+0x288>)
   285a8:	ab02      	add	r3, sp, #8
		len = buf_size - out_buf_len;
   285aa:	9602      	str	r6, [sp, #8]
		err = at_params_string_get(&m_param_list,
   285ac:	f016 ffdc 	bl	3f568 <at_params_string_get>
		if (err != 0) {
   285b0:	4681      	mov	r9, r0
   285b2:	2800      	cmp	r0, #0
   285b4:	f47f af2b 	bne.w	2840e <modem_info_string_get+0x86>
		} else if (len >= buf_size) {
   285b8:	9b02      	ldr	r3, [sp, #8]
   285ba:	429e      	cmp	r6, r3
   285bc:	f67f af1f 	bls.w	283fe <modem_info_string_get+0x76>
		buf[accumulated_len] = '\0';
   285c0:	2200      	movs	r2, #0
   285c2:	54ea      	strb	r2, [r5, r3]
   285c4:	e7d0      	b.n	28568 <modem_info_string_get+0x1e0>
		current_char = buf[i];
   285c6:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   285ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   285ce:	461c      	mov	r4, r3
		buf[i] = next_char;
   285d0:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   285d4:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   285d8:	e7c9      	b.n	2856e <modem_info_string_get+0x1e6>
		return -EINVAL;
   285da:	f06f 0915 	mvn.w	r9, #21
   285de:	e716      	b.n	2840e <modem_info_string_get+0x86>
		return -EIO;
   285e0:	f06f 0904 	mvn.w	r9, #4
   285e4:	e713      	b.n	2840e <modem_info_string_get+0x86>
			return -EFAULT;
   285e6:	f06f 090d 	mvn.w	r9, #13
   285ea:	e710      	b.n	2840e <modem_info_string_get+0x86>
   285ec:	00042fe8 	.word	0x00042fe8
   285f0:	00046453 	.word	0x00046453
   285f4:	00045433 	.word	0x00045433
   285f8:	0004af9e 	.word	0x0004af9e
   285fc:	00042fac 	.word	0x00042fac
   28600:	0004432b 	.word	0x0004432b
   28604:	000453f3 	.word	0x000453f3
   28608:	00046450 	.word	0x00046450
   2860c:	0004a4d9 	.word	0x0004a4d9
   28610:	20019418 	.word	0x20019418
   28614:	00046471 	.word	0x00046471
   28618:	00046657 	.word	0x00046657

0002861c <modem_info_init>:

int modem_info_init(void)
{
	int err = 0;

	if (m_param_list.params == NULL) {
   2861c:	4803      	ldr	r0, [pc, #12]	; (2862c <modem_info_init+0x10>)
   2861e:	6843      	ldr	r3, [r0, #4]
   28620:	b913      	cbnz	r3, 28628 <modem_info_init+0xc>
		/* Init at_cmd_parser storage module */
		err = at_params_list_init(&m_param_list,
   28622:	210a      	movs	r1, #10
   28624:	f016 be94 	b.w	3f350 <at_params_list_init>
					  CONFIG_MODEM_INFO_MAX_AT_PARAMS_RSP);
	}

	return err;
}
   28628:	2000      	movs	r0, #0
   2862a:	4770      	bx	lr
   2862c:	20019418 	.word	0x20019418

00028630 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   28630:	b538      	push	{r3, r4, r5, lr}
   28632:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   28634:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   28638:	f7ff fe54 	bl	282e4 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   2863c:	2802      	cmp	r0, #2
   2863e:	d112      	bne.n	28666 <modem_data_get+0x36>
		ret = modem_info_string_get(param->type,
   28640:	2264      	movs	r2, #100	; 0x64
   28642:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   28646:	1ca9      	adds	r1, r5, #2
   28648:	f7ff fe9e 	bl	28388 <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   2864c:	1e04      	subs	r4, r0, #0
   2864e:	db02      	blt.n	28656 <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   28650:	2400      	movs	r4, #0
}
   28652:	4620      	mov	r0, r4
   28654:	bd38      	pop	{r3, r4, r5, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   28656:	4623      	mov	r3, r4
   28658:	2145      	movs	r1, #69	; 0x45
   2865a:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   2865e:	4809      	ldr	r0, [pc, #36]	; (28684 <modem_data_get+0x54>)
   28660:	f014 fb35 	bl	3ccce <z_log_minimal_printk>
			return ret;
   28664:	e7f5      	b.n	28652 <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_INT) {
   28666:	2801      	cmp	r0, #1
   28668:	d1f2      	bne.n	28650 <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   2866a:	4629      	mov	r1, r5
   2866c:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   28670:	f7ff fe5a 	bl	28328 <modem_info_short_get>
		if (ret < 0) {
   28674:	1e04      	subs	r4, r0, #0
   28676:	daeb      	bge.n	28650 <modem_data_get+0x20>
			LOG_ERR("Link data not obtained: %d", ret);
   28678:	4622      	mov	r2, r4
   2867a:	2145      	movs	r1, #69	; 0x45
   2867c:	4802      	ldr	r0, [pc, #8]	; (28688 <modem_data_get+0x58>)
   2867e:	f014 fb26 	bl	3ccce <z_log_minimal_printk>
			return ret;
   28682:	e7e6      	b.n	28652 <modem_data_get+0x22>
   28684:	00046491 	.word	0x00046491
   28688:	000464b4 	.word	0x000464b4

0002868c <modem_info_params_init>:
	if (modem == NULL) {
   2868c:	2800      	cmp	r0, #0
   2868e:	d049      	beq.n	28724 <modem_info_params_init+0x98>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   28690:	2301      	movs	r3, #1
   28692:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   28696:	2302      	movs	r3, #2
   28698:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   2869c:	2303      	movs	r3, #3
   2869e:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   286a2:	2305      	movs	r3, #5
   286a4:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   286a8:	2306      	movs	r3, #6
   286aa:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   286ae:	2307      	movs	r3, #7
   286b0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   286b4:	2308      	movs	r3, #8
   286b6:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   286ba:	2309      	movs	r3, #9
   286bc:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   286c0:	2304      	movs	r3, #4
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   286c2:	220a      	movs	r2, #10
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   286c4:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   286c8:	230f      	movs	r3, #15
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   286ca:	f880 2714 	strb.w	r2, [r0, #1812]	; 0x714
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   286ce:	220e      	movs	r2, #14
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   286d0:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   286d4:	2310      	movs	r3, #16
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   286d6:	f880 2784 	strb.w	r2, [r0, #1924]	; 0x784
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   286da:	2212      	movs	r2, #18
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   286dc:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   286e0:	2311      	movs	r3, #17
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   286e2:	f880 27f4 	strb.w	r2, [r0, #2036]	; 0x7f4
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   286e6:	220d      	movs	r2, #13
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   286e8:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   286ec:	2314      	movs	r3, #20
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   286ee:	f880 2864 	strb.w	r2, [r0, #2148]	; 0x864
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   286f2:	220b      	movs	r2, #11
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   286f4:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   286f8:	2315      	movs	r3, #21
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   286fa:	f880 28d4 	strb.w	r2, [r0, #2260]	; 0x8d4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   286fe:	2213      	movs	r2, #19
	modem->network.apn.type			= MODEM_INFO_APN;
   28700:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c
	modem->network.rsrp.type		= MODEM_INFO_RSRP;
   28704:	2300      	movs	r3, #0
	modem->device.imei.type			= MODEM_INFO_IMEI;
   28706:	f880 2944 	strb.w	r2, [r0, #2372]	; 0x944
	modem->device.board			= CONFIG_BOARD;
   2870a:	4a08      	ldr	r2, [pc, #32]	; (2872c <modem_info_params_init+0xa0>)
	modem->network.rsrp.type		= MODEM_INFO_RSRP;
   2870c:	f880 368c 	strb.w	r3, [r0, #1676]	; 0x68c
	modem->device.board			= CONFIG_BOARD;
   28710:	f8c0 2948 	str.w	r2, [r0, #2376]	; 0x948
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   28714:	4a06      	ldr	r2, [pc, #24]	; (28730 <modem_info_params_init+0xa4>)
   28716:	f8c0 294c 	str.w	r2, [r0, #2380]	; 0x94c
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   2871a:	4a06      	ldr	r2, [pc, #24]	; (28734 <modem_info_params_init+0xa8>)
   2871c:	f8c0 2950 	str.w	r2, [r0, #2384]	; 0x950
	return 0;
   28720:	4618      	mov	r0, r3
   28722:	4770      	bx	lr
		return -EINVAL;
   28724:	f06f 0015 	mvn.w	r0, #21
}
   28728:	4770      	bx	lr
   2872a:	bf00      	nop
   2872c:	000464d4 	.word	0x000464d4
   28730:	000464e6 	.word	0x000464e6
   28734:	000464ed 	.word	0x000464ed

00028738 <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   28738:	b570      	push	{r4, r5, r6, lr}
	int ret;

	if (modem == NULL) {
   2873a:	4604      	mov	r4, r0
   2873c:	2800      	cmp	r0, #0
   2873e:	f000 80a1 	beq.w	28884 <modem_info_params_get+0x14c>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   28742:	f7ff ff75 	bl	28630 <modem_data_get>
   28746:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   28748:	f104 0070 	add.w	r0, r4, #112	; 0x70
   2874c:	f7ff ff70 	bl	28630 <modem_data_get>
   28750:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   28752:	f504 7044 	add.w	r0, r4, #784	; 0x310
   28756:	f7ff ff6b 	bl	28630 <modem_data_get>
   2875a:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   2875c:	f504 7060 	add.w	r0, r4, #896	; 0x380
   28760:	f7ff ff66 	bl	28630 <modem_data_get>
   28764:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   28766:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   2876a:	f7ff ff61 	bl	28630 <modem_data_get>
   2876e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   28770:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   28774:	f7ff ff5c 	bl	28630 <modem_data_get>
   28778:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   2877a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   2877e:	f7ff ff57 	bl	28630 <modem_data_get>
   28782:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   28784:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   28788:	f7ff ff52 	bl	28630 <modem_data_get>
   2878c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   2878e:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   28792:	f7ff ff4d 	bl	28630 <modem_data_get>
   28796:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   28798:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   2879c:	f7ff ff48 	bl	28630 <modem_data_get>
   287a0:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.apn);
   287a2:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
   287a6:	f7ff ff43 	bl	28630 <modem_data_get>
   287aa:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
   287ac:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   287b0:	f7ff ff3e 	bl	28630 <modem_data_get>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   287b4:	f8b4 3152 	ldrh.w	r3, [r4, #338]	; 0x152
   287b8:	4405      	add	r5, r0
   287ba:	f8a4 31c2 	strh.w	r3, [r4, #450]	; 0x1c2
   287be:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   287c2:	220a      	movs	r2, #10
   287c4:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
   287c8:	f8b4 3155 	ldrh.w	r3, [r4, #341]	; 0x155
   287cc:	2100      	movs	r1, #0
   287ce:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
   287d2:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
	memcpy(mcc->value_string, current_operator->value_string, 3);
   287d6:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   287da:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   287de:	f012 f8db 	bl	3a998 <strtol>
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   287e2:	f204 2632 	addw	r6, r4, #562	; 0x232
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   287e6:	220a      	movs	r2, #10
   287e8:	2100      	movs	r1, #0
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   287ea:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   287ee:	4630      	mov	r0, r6
   287f0:	f012 f8d2 	bl	3a998 <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   287f4:	2210      	movs	r2, #16
   287f6:	2100      	movs	r1, #0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   287f8:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   287fc:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   28800:	f012 f8ca 	bl	3a998 <strtol>
   28804:	f7f3 ff6e 	bl	1c6e4 <__aeabi_i2d>
   28808:	f504 66d2 	add.w	r6, r4, #1680	; 0x690
   2880c:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   28810:	2100      	movs	r1, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   28812:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   28814:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   28818:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   2881c:	f012 f8bc 	bl	3a998 <strtol>
   28820:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   28824:	b13d      	cbz	r5, 28836 <modem_info_params_get+0xfe>
			LOG_ERR("Network data not obtained: %d", ret);
   28826:	462a      	mov	r2, r5
   28828:	2145      	movs	r1, #69	; 0x45
   2882a:	4818      	ldr	r0, [pc, #96]	; (2888c <modem_info_params_get+0x154>)
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   2882c:	f014 fa4f 	bl	3ccce <z_log_minimal_printk>
			return -EAGAIN;
   28830:	f06f 000a 	mvn.w	r0, #10
		}
	}

	return 0;
}
   28834:	bd70      	pop	{r4, r5, r6, pc}
		ret = modem_data_get(&modem->sim.uicc);
   28836:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   2883a:	f7ff fef9 	bl	28630 <modem_data_get>
   2883e:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   28840:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   28844:	f7ff fef4 	bl	28630 <modem_data_get>
   28848:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   2884a:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   2884e:	f7ff feef 	bl	28630 <modem_data_get>
		if (ret) {
   28852:	182a      	adds	r2, r5, r0
   28854:	d002      	beq.n	2885c <modem_info_params_get+0x124>
			LOG_ERR("Sim data not obtained: %d", ret);
   28856:	2145      	movs	r1, #69	; 0x45
   28858:	480d      	ldr	r0, [pc, #52]	; (28890 <modem_info_params_get+0x158>)
   2885a:	e7e7      	b.n	2882c <modem_info_params_get+0xf4>
		ret = modem_data_get(&modem->device.modem_fw);
   2885c:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   28860:	f7ff fee6 	bl	28630 <modem_data_get>
   28864:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   28866:	f604 0068 	addw	r0, r4, #2152	; 0x868
   2886a:	f7ff fee1 	bl	28630 <modem_data_get>
   2886e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   28870:	f604 00d8 	addw	r0, r4, #2264	; 0x8d8
   28874:	f7ff fedc 	bl	28630 <modem_data_get>
		if (ret) {
   28878:	1940      	adds	r0, r0, r5
   2887a:	d0db      	beq.n	28834 <modem_info_params_get+0xfc>
			LOG_ERR("Device data not obtained: %d", ret);
   2887c:	4602      	mov	r2, r0
   2887e:	2145      	movs	r1, #69	; 0x45
   28880:	4804      	ldr	r0, [pc, #16]	; (28894 <modem_info_params_get+0x15c>)
   28882:	e7d3      	b.n	2882c <modem_info_params_get+0xf4>
		return -EINVAL;
   28884:	f06f 0015 	mvn.w	r0, #21
   28888:	e7d4      	b.n	28834 <modem_info_params_get+0xfc>
   2888a:	bf00      	nop
   2888c:	000464fa 	.word	0x000464fa
   28890:	0004651d 	.word	0x0004651d
   28894:	0004653c 	.word	0x0004653c

00028898 <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   28898:	e92d 4230 	stmdb	sp!, {r4, r5, r9, lr}
   2889c:	4681      	mov	r9, r0
	int total_len;

	if (device == NULL || json_obj == NULL) {
   2889e:	460c      	mov	r4, r1
   288a0:	b329      	cbz	r1, 288ee <device_data_add+0x56>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   288a2:	f016 ff06 	bl	3f6b2 <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   288a6:	4621      	mov	r1, r4
	total_len = json_add_data(&device->modem_fw, json_obj);
   288a8:	4605      	mov	r5, r0
	total_len += json_add_data(&device->battery, json_obj);
   288aa:	f109 0070 	add.w	r0, r9, #112	; 0x70
   288ae:	f016 ff00 	bl	3f6b2 <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   288b2:	4621      	mov	r1, r4
	total_len += json_add_data(&device->battery, json_obj);
   288b4:	4405      	add	r5, r0
	total_len += json_add_data(&device->imei, json_obj);
   288b6:	f109 00e0 	add.w	r0, r9, #224	; 0xe0
   288ba:	f016 fefa 	bl	3f6b2 <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   288be:	f8d9 2150 	ldr.w	r2, [r9, #336]	; 0x150
   288c2:	490c      	ldr	r1, [pc, #48]	; (288f4 <device_data_add+0x5c>)
	total_len += json_add_data(&device->imei, json_obj);
   288c4:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "board", device->board);
   288c6:	4620      	mov	r0, r4
   288c8:	f016 fedc 	bl	3f684 <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   288cc:	f8d9 2154 	ldr.w	r2, [r9, #340]	; 0x154
   288d0:	4909      	ldr	r1, [pc, #36]	; (288f8 <device_data_add+0x60>)
	total_len += json_add_str(json_obj, "board", device->board);
   288d2:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   288d4:	4620      	mov	r0, r4
   288d6:	f016 fed5 	bl	3f684 <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   288da:	f8d9 2158 	ldr.w	r2, [r9, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   288de:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   288e0:	4906      	ldr	r1, [pc, #24]	; (288fc <device_data_add+0x64>)
   288e2:	4620      	mov	r0, r4
   288e4:	f016 fece 	bl	3f684 <json_add_str>
   288e8:	4428      	add	r0, r5

	return total_len;
}
   288ea:	e8bd 8230 	ldmia.w	sp!, {r4, r5, r9, pc}
		return -EINVAL;
   288ee:	f06f 0015 	mvn.w	r0, #21
   288f2:	e7fa      	b.n	288ea <device_data_add+0x52>
   288f4:	00046570 	.word	0x00046570
   288f8:	00046576 	.word	0x00046576
   288fc:	00046581 	.word	0x00046581

00028900 <network_data_add>:
{
   28900:	b5d0      	push	{r4, r6, r7, lr}
   28902:	460e      	mov	r6, r1
	if (network == NULL || json_obj == NULL) {
   28904:	4604      	mov	r4, r0
{
   28906:	b09a      	sub	sp, #104	; 0x68
	if (network == NULL || json_obj == NULL) {
   28908:	2800      	cmp	r0, #0
   2890a:	d06b      	beq.n	289e4 <network_data_add+0xe4>
   2890c:	2900      	cmp	r1, #0
   2890e:	d069      	beq.n	289e4 <network_data_add+0xe4>
	total_len = json_add_data(&network->current_band, json_obj);
   28910:	f016 fecf 	bl	3f6b2 <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   28914:	4631      	mov	r1, r6
	total_len = json_add_data(&network->current_band, json_obj);
   28916:	4607      	mov	r7, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   28918:	f104 0070 	add.w	r0, r4, #112	; 0x70
   2891c:	f016 fec9 	bl	3f6b2 <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   28920:	4631      	mov	r1, r6
	total_len += json_add_data(&network->sup_band, json_obj);
   28922:	4407      	add	r7, r0
	total_len += json_add_data(&network->area_code, json_obj);
   28924:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   28928:	f016 fec3 	bl	3f6b2 <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   2892c:	4631      	mov	r1, r6
	total_len += json_add_data(&network->area_code, json_obj);
   2892e:	4407      	add	r7, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   28930:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   28934:	f016 febd 	bl	3f6b2 <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   28938:	4631      	mov	r1, r6
	total_len += json_add_data(&network->current_operator, json_obj);
   2893a:	4407      	add	r7, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   2893c:	f504 7044 	add.w	r0, r4, #784	; 0x310
   28940:	f016 feb7 	bl	3f6b2 <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   28944:	4631      	mov	r1, r6
	total_len += json_add_data(&network->ip_address, json_obj);
   28946:	4407      	add	r7, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   28948:	f504 7060 	add.w	r0, r4, #896	; 0x380
   2894c:	f016 feb1 	bl	3f6b2 <json_add_data>
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   28950:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   28952:	4407      	add	r7, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   28954:	f894 030c 	ldrb.w	r0, [r4, #780]	; 0x30c
   28958:	f7ff fcce 	bl	282f8 <modem_info_name_get>
	if (len > 0) {
   2895c:	2800      	cmp	r0, #0
   2895e:	dd11      	ble.n	28984 <network_data_add+0x84>
		data_name[len] = '\0';
   28960:	ab1a      	add	r3, sp, #104	; 0x68
   28962:	4418      	add	r0, r3
   28964:	2300      	movs	r3, #0
   28966:	f800 3c64 	strb.w	r3, [r0, #-100]
		ret = json_add_num(json_obj, data_name, network->cellid_dec);
   2896a:	f504 63d2 	add.w	r3, r4, #1680	; 0x690
	json_num = cJSON_CreateNumber(num);
   2896e:	e9d3 0100 	ldrd	r0, r1, [r3]
   28972:	f7f5 fe9d 	bl	1e6b0 <cJSON_CreateNumber>
	if (json_num == NULL) {
   28976:	4602      	mov	r2, r0
   28978:	b120      	cbz	r0, 28984 <network_data_add+0x84>
	cJSON_AddItemToObject(parent, str, item);
   2897a:	4630      	mov	r0, r6
   2897c:	a901      	add	r1, sp, #4
   2897e:	f017 f9e4 	bl	3fd4a <cJSON_AddItemToObject>
			total_len += sizeof(double);
   28982:	3708      	adds	r7, #8
	network->network_mode[0] = '\0';
   28984:	2300      	movs	r3, #0
   28986:	f884 3698 	strb.w	r3, [r4, #1688]	; 0x698
	if (network->lte_mode.value == 1) {
   2898a:	f8b4 33f0 	ldrh.w	r3, [r4, #1008]	; 0x3f0
		strcat(network->network_mode, lte_string);
   2898e:	f504 62d3 	add.w	r2, r4, #1688	; 0x698
	if (network->lte_mode.value == 1) {
   28992:	2b01      	cmp	r3, #1
   28994:	d11b      	bne.n	289ce <network_data_add+0xce>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   28996:	4610      	mov	r0, r2
   28998:	4914      	ldr	r1, [pc, #80]	; (289ec <network_data_add+0xec>)
   2899a:	f018 ffe1 	bl	41960 <strcat>
   2899e:	4602      	mov	r2, r0
		total_len += sizeof(lte_string);
   289a0:	3706      	adds	r7, #6
	if (network->gps_mode.value == 1) {
   289a2:	f8b4 34d0 	ldrh.w	r3, [r4, #1232]	; 0x4d0
   289a6:	2b01      	cmp	r3, #1
   289a8:	d105      	bne.n	289b6 <network_data_add+0xb6>
   289aa:	4610      	mov	r0, r2
   289ac:	4910      	ldr	r1, [pc, #64]	; (289f0 <network_data_add+0xf0>)
   289ae:	f018 ffd7 	bl	41960 <strcat>
   289b2:	4602      	mov	r2, r0
		total_len += sizeof(gps_string);
   289b4:	3705      	adds	r7, #5
	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   289b6:	4630      	mov	r0, r6
   289b8:	490e      	ldr	r1, [pc, #56]	; (289f4 <network_data_add+0xf4>)
   289ba:	f016 fe63 	bl	3f684 <json_add_str>
	if (ret) {
   289be:	b118      	cbz	r0, 289c8 <network_data_add+0xc8>
		LOG_ERR("Unable to add the network mode");
   289c0:	2145      	movs	r1, #69	; 0x45
   289c2:	480d      	ldr	r0, [pc, #52]	; (289f8 <network_data_add+0xf8>)
   289c4:	f014 f983 	bl	3ccce <z_log_minimal_printk>
}
   289c8:	4638      	mov	r0, r7
   289ca:	b01a      	add	sp, #104	; 0x68
   289cc:	bdd0      	pop	{r4, r6, r7, pc}
	} else if (network->nbiot_mode.value == 1) {
   289ce:	f8b4 3460 	ldrh.w	r3, [r4, #1120]	; 0x460
   289d2:	2b01      	cmp	r3, #1
   289d4:	d1e5      	bne.n	289a2 <network_data_add+0xa2>
   289d6:	4610      	mov	r0, r2
   289d8:	4908      	ldr	r1, [pc, #32]	; (289fc <network_data_add+0xfc>)
   289da:	f018 ffc1 	bl	41960 <strcat>
		total_len += sizeof(nbiot_string);
   289de:	3707      	adds	r7, #7
   289e0:	4602      	mov	r2, r0
   289e2:	e7de      	b.n	289a2 <network_data_add+0xa2>
		return -EINVAL;
   289e4:	f06f 0715 	mvn.w	r7, #21
   289e8:	e7ee      	b.n	289c8 <network_data_add+0xc8>
   289ea:	bf00      	nop
   289ec:	000465ed 	.word	0x000465ed
   289f0:	000465e8 	.word	0x000465e8
   289f4:	00046589 	.word	0x00046589
   289f8:	00046595 	.word	0x00046595
   289fc:	000465f3 	.word	0x000465f3

00028a00 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   28a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28a04:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   28a06:	460d      	mov	r5, r1
   28a08:	2900      	cmp	r1, #0
   28a0a:	d04f      	beq.n	28aac <modem_info_json_object_encode+0xac>
   28a0c:	2800      	cmp	r0, #0
   28a0e:	d04d      	beq.n	28aac <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   28a10:	4608      	mov	r0, r1
   28a12:	f017 f980 	bl	3fd16 <cJSON_GetArraySize>
   28a16:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   28a18:	f009 fbee 	bl	321f8 <cJSON_CreateObject>
   28a1c:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   28a1e:	f009 fbeb 	bl	321f8 <cJSON_CreateObject>
   28a22:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   28a24:	f009 fbe8 	bl	321f8 <cJSON_CreateObject>
   28a28:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   28a2a:	f1b8 0f00 	cmp.w	r8, #0
   28a2e:	d03a      	beq.n	28aa6 <modem_info_json_object_encode+0xa6>
   28a30:	b3cf      	cbz	r7, 28aa6 <modem_info_json_object_encode+0xa6>
   28a32:	b3c0      	cbz	r0, 28aa6 <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   28a34:	4641      	mov	r1, r8
   28a36:	4648      	mov	r0, r9
   28a38:	f7ff ff62 	bl	28900 <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   28a3c:	2800      	cmp	r0, #0
   28a3e:	dd06      	ble.n	28a4e <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   28a40:	4642      	mov	r2, r8
   28a42:	4628      	mov	r0, r5
   28a44:	491b      	ldr	r1, [pc, #108]	; (28ab4 <modem_info_json_object_encode+0xb4>)
   28a46:	f017 f980 	bl	3fd4a <cJSON_AddItemToObject>

		json_add_obj(root_obj, MODEM_INFO_JSON_KEY_NET_INF, network_obj);
		network_obj = NULL;
   28a4a:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   28a4e:	4639      	mov	r1, r7
   28a50:	f509 60d5 	add.w	r0, r9, #1704	; 0x6a8
   28a54:	f016 fe70 	bl	3f738 <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   28a58:	2800      	cmp	r0, #0
   28a5a:	dd05      	ble.n	28a68 <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   28a5c:	463a      	mov	r2, r7
   28a5e:	4628      	mov	r0, r5
   28a60:	4915      	ldr	r1, [pc, #84]	; (28ab8 <modem_info_json_object_encode+0xb8>)
   28a62:	f017 f972 	bl	3fd4a <cJSON_AddItemToObject>

		json_add_obj(root_obj, MODEM_INFO_JSON_KEY_SIM_INF, sim_obj);
		sim_obj = NULL;
   28a66:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   28a68:	4631      	mov	r1, r6
   28a6a:	f509 60ff 	add.w	r0, r9, #2040	; 0x7f8
   28a6e:	f7ff ff13 	bl	28898 <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   28a72:	2800      	cmp	r0, #0
   28a74:	dd05      	ble.n	28a82 <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   28a76:	4632      	mov	r2, r6
   28a78:	4628      	mov	r0, r5
   28a7a:	4910      	ldr	r1, [pc, #64]	; (28abc <modem_info_json_object_encode+0xbc>)
   28a7c:	f017 f965 	bl	3fd4a <cJSON_AddItemToObject>

		json_add_obj(root_obj, MODEM_INFO_JSON_KEY_DEV_INF, device_obj);
		device_obj = NULL;
   28a80:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   28a82:	4640      	mov	r0, r8
   28a84:	f009 faf6 	bl	32074 <cJSON_Delete>
	cJSON_Delete(sim_obj);
   28a88:	4638      	mov	r0, r7
   28a8a:	f009 faf3 	bl	32074 <cJSON_Delete>
	cJSON_Delete(device_obj);
   28a8e:	4630      	mov	r0, r6
   28a90:	f009 faf0 	bl	32074 <cJSON_Delete>

	if (obj_count >= 0) {
   28a94:	2c00      	cmp	r4, #0
   28a96:	db03      	blt.n	28aa0 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   28a98:	4628      	mov	r0, r5
   28a9a:	f017 f93c 	bl	3fd16 <cJSON_GetArraySize>
   28a9e:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   28aa0:	4620      	mov	r0, r4
   28aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   28aa6:	f06f 040b 	mvn.w	r4, #11
   28aaa:	e7ea      	b.n	28a82 <modem_info_json_object_encode+0x82>
		return -EINVAL;
   28aac:	f06f 0415 	mvn.w	r4, #21
   28ab0:	e7f6      	b.n	28aa0 <modem_info_json_object_encode+0xa0>
   28ab2:	bf00      	nop
   28ab4:	000465b9 	.word	0x000465b9
   28ab8:	000465c5 	.word	0x000465c5
   28abc:	000465cd 	.word	0x000465cd

00028ac0 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   28ac0:	4803      	ldr	r0, [pc, #12]	; (28ad0 <k_sys_fatal_error_handler+0x10>)
   28ac2:	2145      	movs	r1, #69	; 0x45
{
   28ac4:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   28ac6:	f014 f902 	bl	3ccce <z_log_minimal_printk>
		sys_arch_reboot(0);
   28aca:	2000      	movs	r0, #0
   28acc:	f7fa fcda 	bl	23484 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   28ad0:	000465fa 	.word	0x000465fa

00028ad4 <translate_error>:
{
	cmee_control(DISABLE);
}

static int translate_error(int err)
{
   28ad4:	b508      	push	{r3, lr}
	/* In case of CME error translate the error value to
	 * an errno value.
	 */
	switch (err) {
   28ad6:	f46f 7300 	mvn.w	r3, #512	; 0x200
   28ada:	4418      	add	r0, r3
   28adc:	2805      	cmp	r0, #5
   28ade:	d80d      	bhi.n	28afc <translate_error+0x28>
   28ae0:	e8df f000 	tbb	[pc, r0]
   28ae4:	0c060317 	.word	0x0c060317
   28ae8:	090c      	.short	0x090c
   28aea:	f04f 30ff 	mov.w	r0, #4294967295
		__ASSERT(false, "Untranslated CME error %d!", err);
		return 0xBAADBAAD;
	}

	return err;
}
   28aee:	bd08      	pop	{r3, pc}
		return -ENOMEM;
   28af0:	f06f 000b 	mvn.w	r0, #11
   28af4:	e7fb      	b.n	28aee <translate_error+0x1a>
		return -EACCES;
   28af6:	f06f 000c 	mvn.w	r0, #12
   28afa:	e7f8      	b.n	28aee <translate_error+0x1a>
		__ASSERT(false, "Untranslated CME error %d!", err);
   28afc:	224c      	movs	r2, #76	; 0x4c
   28afe:	4906      	ldr	r1, [pc, #24]	; (28b18 <translate_error+0x44>)
   28b00:	4806      	ldr	r0, [pc, #24]	; (28b1c <translate_error+0x48>)
   28b02:	f014 f8aa 	bl	3cc5a <assert_print>
   28b06:	4804      	ldr	r0, [pc, #16]	; (28b18 <translate_error+0x44>)
   28b08:	214c      	movs	r1, #76	; 0x4c
   28b0a:	f014 f89f 	bl	3cc4c <assert_post_action>
   28b0e:	4804      	ldr	r0, [pc, #16]	; (28b20 <translate_error+0x4c>)
   28b10:	e7ed      	b.n	28aee <translate_error+0x1a>
		return -ENOENT;
   28b12:	f06f 0001 	mvn.w	r0, #1
   28b16:	e7ea      	b.n	28aee <translate_error+0x1a>
   28b18:	0004661c 	.word	0x0004661c
   28b1c:	00044263 	.word	0x00044263
   28b20:	baadbaad 	.word	0xbaadbaad

00028b24 <cmee_enable>:
{
   28b24:	b513      	push	{r0, r1, r4, lr}
   28b26:	4604      	mov	r4, r0
	err = nrf_modem_at_scanf("AT+CMEE?", "+CMEE: %d", &active);
   28b28:	aa01      	add	r2, sp, #4
   28b2a:	490d      	ldr	r1, [pc, #52]	; (28b60 <cmee_enable+0x3c>)
   28b2c:	480d      	ldr	r0, [pc, #52]	; (28b64 <cmee_enable+0x40>)
   28b2e:	f00c fb99 	bl	35264 <nrf_modem_at_scanf>
	if (err < 0) {
   28b32:	1e02      	subs	r2, r0, #0
   28b34:	da0c      	bge.n	28b50 <cmee_enable+0x2c>
		LOG_WRN("Failed to retrieve CMEE status, err %d", err);
   28b36:	2157      	movs	r1, #87	; 0x57
   28b38:	480b      	ldr	r0, [pc, #44]	; (28b68 <cmee_enable+0x44>)
   28b3a:	f014 f8c8 	bl	3ccce <z_log_minimal_printk>
		*was_enabled = false;
   28b3e:	2300      	movs	r3, #0
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   28b40:	2101      	movs	r1, #1
   28b42:	480a      	ldr	r0, [pc, #40]	; (28b6c <cmee_enable+0x48>)
		*was_enabled = false;
   28b44:	7023      	strb	r3, [r4, #0]
}
   28b46:	b002      	add	sp, #8
   28b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   28b4c:	f00c baf8 	b.w	35140 <nrf_modem_at_printf>
	return active ? true : false;
   28b50:	9b01      	ldr	r3, [sp, #4]
	if (!cmee_is_active()) {
   28b52:	2b00      	cmp	r3, #0
   28b54:	d0f3      	beq.n	28b3e <cmee_enable+0x1a>
		*was_enabled = true;
   28b56:	2301      	movs	r3, #1
   28b58:	7023      	strb	r3, [r4, #0]
}
   28b5a:	b002      	add	sp, #8
   28b5c:	bd10      	pop	{r4, pc}
   28b5e:	bf00      	nop
   28b60:	00046650 	.word	0x00046650
   28b64:	0004665a 	.word	0x0004665a
   28b68:	00046663 	.word	0x00046663
   28b6c:	0004668f 	.word	0x0004668f

00028b70 <cmee_disable>:
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   28b70:	2100      	movs	r1, #0
   28b72:	4801      	ldr	r0, [pc, #4]	; (28b78 <cmee_disable+0x8>)
   28b74:	f00c bae4 	b.w	35140 <nrf_modem_at_printf>
   28b78:	0004668f 	.word	0x0004668f

00028b7c <modem_key_mgmt_write>:
}

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgmt_cred_type cred_type,
			 const void *buf, size_t len)
{
   28b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   28b7e:	4606      	mov	r6, r0
   28b80:	460f      	mov	r7, r1
   28b82:	461c      	mov	r4, r3
	int err;
	bool cmee_was_enabled;

	if (buf == NULL || len == 0) {
   28b84:	4615      	mov	r5, r2
{
   28b86:	b085      	sub	sp, #20
	if (buf == NULL || len == 0) {
   28b88:	b1d2      	cbz	r2, 28bc0 <modem_key_mgmt_write+0x44>
   28b8a:	b1cb      	cbz	r3, 28bc0 <modem_key_mgmt_write+0x44>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_enabled);
   28b8c:	f10d 000f 	add.w	r0, sp, #15
   28b90:	f7ff ffc8 	bl	28b24 <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=0,%d,%d,\"%.*s\"",
   28b94:	4623      	mov	r3, r4
   28b96:	463a      	mov	r2, r7
   28b98:	4631      	mov	r1, r6
   28b9a:	480b      	ldr	r0, [pc, #44]	; (28bc8 <modem_key_mgmt_write+0x4c>)
   28b9c:	9500      	str	r5, [sp, #0]
   28b9e:	f00c facf 	bl	35140 <nrf_modem_at_printf>
				  sec_tag, cred_type, len, (const char *)buf);

	if (!cmee_was_enabled) {
   28ba2:	f89d 300f 	ldrb.w	r3, [sp, #15]
	err = nrf_modem_at_printf("AT%%CMNG=0,%d,%d,\"%.*s\"",
   28ba6:	4604      	mov	r4, r0
	if (!cmee_was_enabled) {
   28ba8:	b90b      	cbnz	r3, 28bae <modem_key_mgmt_write+0x32>
		cmee_disable();
   28baa:	f7ff ffe1 	bl	28b70 <cmee_disable>
	}

	if (err) {
   28bae:	b124      	cbz	r4, 28bba <modem_key_mgmt_write+0x3e>
		return translate_error(nrf_modem_at_err(err));
   28bb0:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   28bb4:	f7ff ff8e 	bl	28ad4 <translate_error>
   28bb8:	4604      	mov	r4, r0
	}

	return 0;
}
   28bba:	4620      	mov	r0, r4
   28bbc:	b005      	add	sp, #20
   28bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   28bc0:	f06f 0415 	mvn.w	r4, #21
   28bc4:	e7f9      	b.n	28bba <modem_key_mgmt_write+0x3e>
   28bc6:	bf00      	nop
   28bc8:	0004669a 	.word	0x0004669a

00028bcc <modem_key_mgmt_delete>:
	return 0;
}

int modem_key_mgmt_delete(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type)
{
   28bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   28bce:	4604      	mov	r4, r0
	int err;
	bool cmee_was_enabled;

	cmee_enable(&cmee_was_enabled);
   28bd0:	f10d 000f 	add.w	r0, sp, #15
{
   28bd4:	9101      	str	r1, [sp, #4]
	cmee_enable(&cmee_was_enabled);
   28bd6:	f7ff ffa5 	bl	28b24 <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=3,%d,%d", sec_tag, cred_type);
   28bda:	4621      	mov	r1, r4
   28bdc:	9a01      	ldr	r2, [sp, #4]
   28bde:	4809      	ldr	r0, [pc, #36]	; (28c04 <modem_key_mgmt_delete+0x38>)
   28be0:	f00c faae 	bl	35140 <nrf_modem_at_printf>

	if (!cmee_was_enabled) {
   28be4:	f89d 300f 	ldrb.w	r3, [sp, #15]
	err = nrf_modem_at_printf("AT%%CMNG=3,%d,%d", sec_tag, cred_type);
   28be8:	4604      	mov	r4, r0
	if (!cmee_was_enabled) {
   28bea:	b90b      	cbnz	r3, 28bf0 <modem_key_mgmt_delete+0x24>
		cmee_disable();
   28bec:	f7ff ffc0 	bl	28b70 <cmee_disable>
	}

	if (err) {
   28bf0:	b124      	cbz	r4, 28bfc <modem_key_mgmt_delete+0x30>
		return translate_error(nrf_modem_at_err(err));
   28bf2:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   28bf6:	f7ff ff6d 	bl	28ad4 <translate_error>
   28bfa:	4604      	mov	r4, r0
	}

	return 0;
}
   28bfc:	4620      	mov	r0, r4
   28bfe:	b004      	add	sp, #16
   28c00:	bd10      	pop	{r4, pc}
   28c02:	bf00      	nop
   28c04:	000466b2 	.word	0x000466b2

00028c08 <modem_key_mgmt_exists>:

int modem_key_mgmt_exists(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type,
			  bool *exists)
{
   28c08:	b570      	push	{r4, r5, r6, lr}
   28c0a:	b086      	sub	sp, #24
   28c0c:	460c      	mov	r4, r1
	int err;
	bool cmee_was_active;

	if (exists == NULL) {
   28c0e:	4615      	mov	r5, r2
{
   28c10:	9003      	str	r0, [sp, #12]
	if (exists == NULL) {
   28c12:	b34a      	cbz	r2, 28c68 <modem_key_mgmt_exists+0x60>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_active);
   28c14:	f10d 0017 	add.w	r0, sp, #23
   28c18:	f7ff ff84 	bl	28b24 <cmee_enable>

	scratch_buf[0] = '\0';
   28c1c:	2200      	movs	r2, #0
   28c1e:	4814      	ldr	r0, [pc, #80]	; (28c70 <modem_key_mgmt_exists+0x68>)
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   28c20:	9b03      	ldr	r3, [sp, #12]
	scratch_buf[0] = '\0';
   28c22:	7002      	strb	r2, [r0, #0]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   28c24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   28c28:	9400      	str	r4, [sp, #0]
   28c2a:	4a12      	ldr	r2, [pc, #72]	; (28c74 <modem_key_mgmt_exists+0x6c>)
   28c2c:	f00c faae 	bl	3518c <nrf_modem_at_cmd>
			       "AT%%CMNG=1,%d,%d", sec_tag, cred_type);

	if (!cmee_was_active) {
   28c30:	f89d 3017 	ldrb.w	r3, [sp, #23]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   28c34:	4604      	mov	r4, r0
	if (!cmee_was_active) {
   28c36:	b90b      	cbnz	r3, 28c3c <modem_key_mgmt_exists+0x34>
		cmee_disable();
   28c38:	f7ff ff9a 	bl	28b70 <cmee_disable>
	}

	if (err) {
   28c3c:	b13c      	cbz	r4, 28c4e <modem_key_mgmt_exists+0x46>
		return translate_error(nrf_modem_at_err(err));
   28c3e:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   28c42:	f7ff ff47 	bl	28ad4 <translate_error>
   28c46:	4604      	mov	r4, r0
	} else {
		*exists = false;
	}

	return 0;
}
   28c48:	4620      	mov	r0, r4
   28c4a:	b006      	add	sp, #24
   28c4c:	bd70      	pop	{r4, r5, r6, pc}
	if (strlen(scratch_buf) > strlen("OK\r\n")) {
   28c4e:	4808      	ldr	r0, [pc, #32]	; (28c70 <modem_key_mgmt_exists+0x68>)
   28c50:	f7f4 faf7 	bl	1d242 <strlen>
   28c54:	4606      	mov	r6, r0
   28c56:	4808      	ldr	r0, [pc, #32]	; (28c78 <modem_key_mgmt_exists+0x70>)
   28c58:	f7f4 faf3 	bl	1d242 <strlen>
   28c5c:	4286      	cmp	r6, r0
		*exists = true;
   28c5e:	bf8a      	itet	hi
   28c60:	2301      	movhi	r3, #1
		*exists = false;
   28c62:	702c      	strbls	r4, [r5, #0]
		*exists = true;
   28c64:	702b      	strbhi	r3, [r5, #0]
		*exists = false;
   28c66:	e7ef      	b.n	28c48 <modem_key_mgmt_exists+0x40>
		return -EINVAL;
   28c68:	f06f 0415 	mvn.w	r4, #21
   28c6c:	e7ec      	b.n	28c48 <modem_key_mgmt_exists+0x40>
   28c6e:	bf00      	nop
   28c70:	2001b703 	.word	0x2001b703
   28c74:	000466c3 	.word	0x000466c3
   28c78:	00045433 	.word	0x00045433

00028c7c <date_time_now>:

	return 0;
}

int date_time_now(int64_t *unix_time_ms)
{
   28c7c:	b510      	push	{r4, lr}
	int err;

	if (unix_time_ms == NULL) {
   28c7e:	4604      	mov	r4, r0
   28c80:	b930      	cbnz	r0, 28c90 <date_time_now+0x14>
		LOG_ERR("The passed in pointer cannot be NULL");
   28c82:	480b      	ldr	r0, [pc, #44]	; (28cb0 <date_time_now+0x34>)
   28c84:	2145      	movs	r1, #69	; 0x45
   28c86:	f014 f822 	bl	3ccce <z_log_minimal_printk>
   28c8a:	f06f 0015 	mvn.w	r0, #21
	}

	err = date_time_core_now(unix_time_ms);

	return err;
}
   28c8e:	bd10      	pop	{r4, pc}

bool date_time_is_valid(void)
{
	return date_time_core_is_valid();
   28c90:	f000 f88e 	bl	28db0 <date_time_core_is_valid>
	if (!date_time_is_valid()) {
   28c94:	b930      	cbnz	r0, 28ca4 <date_time_now+0x28>
		LOG_WRN("Valid time not currently available");
   28c96:	4807      	ldr	r0, [pc, #28]	; (28cb4 <date_time_now+0x38>)
   28c98:	2157      	movs	r1, #87	; 0x57
   28c9a:	f014 f818 	bl	3ccce <z_log_minimal_printk>
		return -ENODATA;
   28c9e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   28ca2:	e7f4      	b.n	28c8e <date_time_now+0x12>
	err = date_time_core_now(unix_time_ms);
   28ca4:	4620      	mov	r0, r4
}
   28ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = date_time_core_now(unix_time_ms);
   28caa:	f000 b851 	b.w	28d50 <date_time_core_now>
   28cae:	bf00      	nop
   28cb0:	000466e3 	.word	0x000466e3
   28cb4:	00046840 	.word	0x00046840

00028cb8 <date_time_core_notify_event>:
static void date_time_core_notify_event(enum date_time_evt_type time_source)
{
	static struct date_time_evt evt;

	/* Update time source to the event if not requesting previous time source */
	if (time_source != DATE_TIME_EVT_TYPE_PREVIOUS) {
   28cb8:	28ff      	cmp	r0, #255	; 0xff
		evt.type = time_source;
   28cba:	bf1c      	itt	ne
   28cbc:	4b03      	ldrne	r3, [pc, #12]	; (28ccc <date_time_core_notify_event+0x14>)
   28cbe:	7018      	strbne	r0, [r3, #0]
	}

	if (app_evt_handler != NULL) {
   28cc0:	4b03      	ldr	r3, [pc, #12]	; (28cd0 <date_time_core_notify_event+0x18>)
   28cc2:	681b      	ldr	r3, [r3, #0]
   28cc4:	b10b      	cbz	r3, 28cca <date_time_core_notify_event+0x12>
		app_evt_handler(&evt);
   28cc6:	4801      	ldr	r0, [pc, #4]	; (28ccc <date_time_core_notify_event+0x14>)
   28cc8:	4718      	bx	r3
	}
}
   28cca:	4770      	bx	lr
   28ccc:	2001c703 	.word	0x2001c703
   28cd0:	20019424 	.word	0x20019424

00028cd4 <date_time_lte_ind_handler>:
{
	k_sem_give(&time_fetch_sem);
}

void date_time_lte_ind_handler(const struct lte_lc_evt *const evt)
{
   28cd4:	b510      	push	{r4, lr}
#if defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL)
	switch (evt->type) {
   28cd6:	7803      	ldrb	r3, [r0, #0]
   28cd8:	b9c3      	cbnz	r3, 28d0c <date_time_lte_ind_handler+0x38>
	case LTE_LC_EVT_NW_REG_STATUS:

		switch (evt->nw_reg_status) {
   28cda:	7a03      	ldrb	r3, [r0, #8]
   28cdc:	3b01      	subs	r3, #1
   28cde:	2b07      	cmp	r3, #7
   28ce0:	d814      	bhi.n	28d0c <date_time_lte_ind_handler+0x38>
   28ce2:	e8df f003 	tbb	[pc, r3]
   28ce6:	0f04      	.short	0x0f04
   28ce8:	13041313 	.word	0x13041313
   28cec:	0413      	.short	0x0413
		case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
		case LTE_LC_NW_REG_REGISTERED_HOME:
		case LTE_LC_NW_REG_REGISTERED_ROAMING:
			if (!date_time_is_valid()) {
   28cee:	f016 fd3f 	bl	3f770 <date_time_is_valid>
   28cf2:	b958      	cbnz	r0, 28d0c <date_time_lte_ind_handler+0x38>
		break;
	default:
		break;
	}
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL) */
}
   28cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				k_work_reschedule(&time_work, K_SECONDS(1));
   28cf8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   28cfc:	2300      	movs	r3, #0
   28cfe:	4804      	ldr	r0, [pc, #16]	; (28d10 <date_time_lte_ind_handler+0x3c>)
   28d00:	f00e bd9a 	b.w	37838 <k_work_reschedule>
}
   28d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			date_time_modem_xtime_subscribe();
   28d08:	f000 ba80 	b.w	2920c <date_time_modem_xtime_subscribe>
}
   28d0c:	bd10      	pop	{r4, pc}
   28d0e:	bf00      	nop
   28d10:	20014500 	.word	0x20014500

00028d14 <date_time_core_schedule_update>:
{
   28d14:	b510      	push	{r4, lr}
		if (check_pending && k_work_delayable_is_pending(&time_work)) {
   28d16:	b118      	cbz	r0, 28d20 <date_time_core_schedule_update+0xc>
	return k_work_delayable_busy_get(dwork) != 0;
   28d18:	4806      	ldr	r0, [pc, #24]	; (28d34 <date_time_core_schedule_update+0x20>)
   28d1a:	f018 faa7 	bl	4126c <k_work_delayable_busy_get>
   28d1e:	b938      	cbnz	r0, 28d30 <date_time_core_schedule_update+0x1c>
}
   28d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   28d24:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
   28d28:	2300      	movs	r3, #0
   28d2a:	4802      	ldr	r0, [pc, #8]	; (28d34 <date_time_core_schedule_update+0x20>)
   28d2c:	f00e bd84 	b.w	37838 <k_work_reschedule>
}
   28d30:	bd10      	pop	{r4, pc}
   28d32:	bf00      	nop
   28d34:	20014500 	.word	0x20014500

00028d38 <date_time_handler>:
	z_impl_k_sem_give(sem);
   28d38:	4801      	ldr	r0, [pc, #4]	; (28d40 <date_time_handler+0x8>)
   28d3a:	f00e b8a9 	b.w	36e90 <z_impl_k_sem_give>
   28d3e:	bf00      	nop
   28d40:	200150c0 	.word	0x200150c0

00028d44 <date_time_core_init>:

void date_time_core_init(void)
{
	if (IS_ENABLED(CONFIG_DATE_TIME_AUTO_UPDATE) && IS_ENABLED(CONFIG_LTE_LINK_CONTROL)) {
		lte_lc_register_handler(date_time_lte_ind_handler);
   28d44:	4801      	ldr	r0, [pc, #4]	; (28d4c <date_time_core_init+0x8>)
   28d46:	f7fe ba3f 	b.w	271c8 <lte_lc_register_handler>
   28d4a:	bf00      	nop
   28d4c:	00028cd5 	.word	0x00028cd5

00028d50 <date_time_core_now>:
		date_time_core_schedule_update(false);
	}
}

int date_time_core_now(int64_t *unix_time_ms)
{
   28d50:	b530      	push	{r4, r5, lr}
   28d52:	4604      	mov	r4, r0
   28d54:	b085      	sub	sp, #20
		union { uintptr_t x; struct timespec * val; } parm1 = { .val = ts };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
   28d56:	2001      	movs	r0, #1
   28d58:	4669      	mov	r1, sp
   28d5a:	f7fa fec9 	bl	23af0 <z_impl_clock_gettime>
	int err;
	struct timespec tp;

	err = clock_gettime(CLOCK_REALTIME, &tp);
	if (err) {
   28d5e:	b150      	cbz	r0, 28d76 <date_time_core_now+0x26>
		LOG_WRN("clock_gettime failed, errno %d", errno);
   28d60:	f014 fdf4 	bl	3d94c <__errno>
   28d64:	2157      	movs	r1, #87	; 0x57
   28d66:	6802      	ldr	r2, [r0, #0]
   28d68:	480c      	ldr	r0, [pc, #48]	; (28d9c <date_time_core_now+0x4c>)
   28d6a:	f013 ffb0 	bl	3ccce <z_log_minimal_printk>
		return -ENODATA;
   28d6e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;

	return 0;
}
   28d72:	b005      	add	sp, #20
   28d74:	bd30      	pop	{r4, r5, pc}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;
   28d76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   28d7a:	9b00      	ldr	r3, [sp, #0]
   28d7c:	9d01      	ldr	r5, [sp, #4]
   28d7e:	fba3 3201 	umull	r3, r2, r3, r1
   28d82:	fb01 2205 	mla	r2, r1, r5, r2
   28d86:	9902      	ldr	r1, [sp, #8]
   28d88:	4d05      	ldr	r5, [pc, #20]	; (28da0 <date_time_core_now+0x50>)
   28d8a:	fb91 f1f5 	sdiv	r1, r1, r5
   28d8e:	185b      	adds	r3, r3, r1
   28d90:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   28d94:	e9c4 3200 	strd	r3, r2, [r4]
	return 0;
   28d98:	e7eb      	b.n	28d72 <date_time_core_now+0x22>
   28d9a:	bf00      	nop
   28d9c:	00046872 	.word	0x00046872
   28da0:	000f4240 	.word	0x000f4240

00028da4 <date_time_core_register_handler>:
	return 0;
}

void date_time_core_register_handler(date_time_evt_handler_t evt_handler)
{
	if (evt_handler == NULL) {
   28da4:	4b01      	ldr	r3, [pc, #4]	; (28dac <date_time_core_register_handler+0x8>)
   28da6:	6018      	str	r0, [r3, #0]
	}

	LOG_DBG("Registering handler %p", evt_handler);

	app_evt_handler = evt_handler;
}
   28da8:	4770      	bx	lr
   28daa:	bf00      	nop
   28dac:	20019424 	.word	0x20019424

00028db0 <date_time_core_is_valid>:

bool date_time_core_is_valid(void)
{
	return (date_time_last_update_uptime != 0);
   28db0:	4b03      	ldr	r3, [pc, #12]	; (28dc0 <date_time_core_is_valid+0x10>)
   28db2:	e9d3 2300 	ldrd	r2, r3, [r3]
   28db6:	4313      	orrs	r3, r2
}
   28db8:	bf14      	ite	ne
   28dba:	2001      	movne	r0, #1
   28dbc:	2000      	moveq	r0, #0
   28dbe:	4770      	bx	lr
   28dc0:	200155e0 	.word	0x200155e0

00028dc4 <date_time_core_current_check>:
{
	date_time_last_update_uptime = 0;
}

int date_time_core_current_check(void)
{
   28dc4:	b510      	push	{r4, lr}
	if (date_time_last_update_uptime == 0) {
   28dc6:	4c10      	ldr	r4, [pc, #64]	; (28e08 <date_time_core_current_check+0x44>)
   28dc8:	e9d4 2300 	ldrd	r2, r3, [r4]
   28dcc:	4313      	orrs	r3, r2
   28dce:	d016      	beq.n	28dfe <date_time_core_current_check+0x3a>
	return z_impl_k_uptime_ticks();
   28dd0:	f018 fa87 	bl	412e2 <z_impl_k_uptime_ticks>
   28dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28dd8:	fba0 0302 	umull	r0, r3, r0, r2
   28ddc:	fb02 3101 	mla	r1, r2, r1, r3
		LOG_DBG("Date time never set");
		return -ENODATA;
	}

	if ((k_uptime_get() - date_time_last_update_uptime) >=
   28de0:	e9d4 3200 	ldrd	r3, r2, [r4]
   28de4:	0bc0      	lsrs	r0, r0, #15
   28de6:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   28dea:	1ac0      	subs	r0, r0, r3
   28dec:	4b07      	ldr	r3, [pc, #28]	; (28e0c <date_time_core_current_check+0x48>)
   28dee:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   28df2:	eb61 0102 	sbc.w	r1, r1, r2
   28df6:	4298      	cmp	r0, r3
   28df8:	f171 0300 	sbcs.w	r3, r1, #0
   28dfc:	db02      	blt.n	28e04 <date_time_core_current_check+0x40>
	    CONFIG_DATE_TIME_TOO_OLD_SECONDS * MSEC_PER_SEC) {
		LOG_DBG("Current date time too old");
		return -ENODATA;
   28dfe:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}

	return 0;
}
   28e02:	bd10      	pop	{r4, pc}
	return 0;
   28e04:	2000      	movs	r0, #0
   28e06:	e7fc      	b.n	28e02 <date_time_core_current_check+0x3e>
   28e08:	200155e0 	.word	0x200155e0
   28e0c:	0036ee80 	.word	0x0036ee80

00028e10 <date_time_core_store>:

void date_time_core_store(int64_t curr_time_ms, enum date_time_evt_type time_source)
{
   28e10:	b5f0      	push	{r4, r5, r6, r7, lr}
   28e12:	b08f      	sub	sp, #60	; 0x3c
   28e14:	4606      	mov	r6, r0
   28e16:	460d      	mov	r5, r1
   28e18:	4617      	mov	r7, r2
	struct timespec tp = { 0 };
   28e1a:	2100      	movs	r1, #0
   28e1c:	2210      	movs	r2, #16
   28e1e:	4668      	mov	r0, sp
   28e20:	f018 fbef 	bl	41602 <memset>
	struct tm ltm = { 0 };
   28e24:	2224      	movs	r2, #36	; 0x24
   28e26:	2100      	movs	r1, #0
   28e28:	a805      	add	r0, sp, #20
   28e2a:	f018 fbea 	bl	41602 <memset>
   28e2e:	f018 fa58 	bl	412e2 <z_impl_k_uptime_ticks>
   28e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28e36:	fba0 3002 	umull	r3, r0, r0, r2
   28e3a:	fb02 0401 	mla	r4, r2, r1, r0
	int ret;

	date_time_last_update_uptime = k_uptime_get();
   28e3e:	f8df c074 	ldr.w	ip, [pc, #116]	; 28eb4 <date_time_core_store+0xa4>
   28e42:	0bdb      	lsrs	r3, r3, #15
   28e44:	ea43 4344 	orr.w	r3, r3, r4, lsl #17

	date_time_core_schedule_update(false);
   28e48:	2000      	movs	r0, #0
   28e4a:	0be4      	lsrs	r4, r4, #15
	date_time_last_update_uptime = k_uptime_get();
   28e4c:	e9cc 3400 	strd	r3, r4, [ip]
	date_time_core_schedule_update(false);
   28e50:	f7ff ff60 	bl	28d14 <date_time_core_schedule_update>

	tp.tv_sec = curr_time_ms / 1000;
   28e54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28e58:	2300      	movs	r3, #0
   28e5a:	4630      	mov	r0, r6
   28e5c:	4629      	mov	r1, r5
   28e5e:	f7f3 fff3 	bl	1ce48 <__aeabi_ldivmod>
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   28e62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	tp.tv_sec = curr_time_ms / 1000;
   28e66:	e9cd 0100 	strd	r0, r1, [sp]
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   28e6a:	2300      	movs	r3, #0
   28e6c:	4630      	mov	r0, r6
   28e6e:	4629      	mov	r1, r5
   28e70:	f7f3 ffea 	bl	1ce48 <__aeabi_ldivmod>
   28e74:	4b0d      	ldr	r3, [pc, #52]	; (28eac <date_time_core_store+0x9c>)

	ret = clock_settime(CLOCK_REALTIME, &tp);
   28e76:	4669      	mov	r1, sp
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   28e78:	435a      	muls	r2, r3
	ret = clock_settime(CLOCK_REALTIME, &tp);
   28e7a:	2001      	movs	r0, #1
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   28e7c:	9202      	str	r2, [sp, #8]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   28e7e:	f7f5 f92f 	bl	1e0e0 <clock_settime>
	if (ret != 0) {
   28e82:	4602      	mov	r2, r0
   28e84:	b140      	cbz	r0, 28e98 <date_time_core_store+0x88>
		LOG_ERR("Could not set system time, %d", ret);
   28e86:	480a      	ldr	r0, [pc, #40]	; (28eb0 <date_time_core_store+0xa0>)
   28e88:	2145      	movs	r1, #69	; 0x45
   28e8a:	f013 ff20 	bl	3ccce <z_log_minimal_printk>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   28e8e:	2003      	movs	r0, #3

#if defined(CONFIG_DATE_TIME_MODEM)
	date_time_modem_store(&ltm);
#endif

	date_time_core_notify_event(time_source);
   28e90:	f7ff ff12 	bl	28cb8 <date_time_core_notify_event>
}
   28e94:	b00f      	add	sp, #60	; 0x3c
   28e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	gmtime_r(&tp.tv_sec, &ltm);
   28e98:	a905      	add	r1, sp, #20
   28e9a:	4668      	mov	r0, sp
   28e9c:	f010 fe6e 	bl	39b7c <gmtime_r>
	date_time_modem_store(&ltm);
   28ea0:	a805      	add	r0, sp, #20
   28ea2:	f000 f989 	bl	291b8 <date_time_modem_store>
	date_time_core_notify_event(time_source);
   28ea6:	4638      	mov	r0, r7
   28ea8:	e7f2      	b.n	28e90 <date_time_core_store+0x80>
   28eaa:	bf00      	nop
   28eac:	000f4240 	.word	0x000f4240
   28eb0:	00046896 	.word	0x00046896
   28eb4:	200155e0 	.word	0x200155e0

00028eb8 <date_time_update_thread>:
{
   28eb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		int64_t date_time_ms_modem = 0;
   28eba:	2400      	movs	r4, #0
   28ebc:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   28ebe:	4e16      	ldr	r6, [pc, #88]	; (28f18 <date_time_update_thread+0x60>)
   28ec0:	f04f 32ff 	mov.w	r2, #4294967295
   28ec4:	f04f 33ff 	mov.w	r3, #4294967295
   28ec8:	4630      	mov	r0, r6
   28eca:	f00e f81d 	bl	36f08 <z_impl_k_sem_take>
		err = date_time_core_current_check();
   28ece:	f7ff ff79 	bl	28dc4 <date_time_core_current_check>
		if (err == 0) {
   28ed2:	b930      	cbnz	r0, 28ee2 <date_time_update_thread+0x2a>
			date_time_core_schedule_update(true);
   28ed4:	2001      	movs	r0, #1
   28ed6:	f7ff ff1d 	bl	28d14 <date_time_core_schedule_update>
			date_time_core_notify_event(DATE_TIME_EVT_TYPE_PREVIOUS);
   28eda:	20ff      	movs	r0, #255	; 0xff
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   28edc:	f7ff feec 	bl	28cb8 <date_time_core_notify_event>
   28ee0:	e7ee      	b.n	28ec0 <date_time_update_thread+0x8>
		err = date_time_modem_get(&date_time_ms_modem);
   28ee2:	4668      	mov	r0, sp
		int64_t date_time_ms_modem = 0;
   28ee4:	e9cd 4500 	strd	r4, r5, [sp]
		err = date_time_modem_get(&date_time_ms_modem);
   28ee8:	f000 f92c 	bl	29144 <date_time_modem_get>
		if (err == 0) {
   28eec:	4602      	mov	r2, r0
   28eee:	b920      	cbnz	r0, 28efa <date_time_update_thread+0x42>
			date_time_core_store(date_time_ms_modem, DATE_TIME_OBTAINED_MODEM);
   28ef0:	e9dd 0100 	ldrd	r0, r1, [sp]
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   28ef4:	f7ff ff8c 	bl	28e10 <date_time_core_store>
			continue;
   28ef8:	e7e2      	b.n	28ec0 <date_time_update_thread+0x8>
		err = date_time_ntp_get(&date_time_ms_ntp);
   28efa:	a802      	add	r0, sp, #8
		int64_t date_time_ms_ntp = 0;
   28efc:	e9cd 4502 	strd	r4, r5, [sp, #8]
		err = date_time_ntp_get(&date_time_ms_ntp);
   28f00:	f000 f80c 	bl	28f1c <date_time_ntp_get>
		if (err == 0) {
   28f04:	b918      	cbnz	r0, 28f0e <date_time_update_thread+0x56>
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   28f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   28f0a:	2201      	movs	r2, #1
   28f0c:	e7f2      	b.n	28ef4 <date_time_update_thread+0x3c>
		date_time_core_schedule_update(true);
   28f0e:	2001      	movs	r0, #1
   28f10:	f7ff ff00 	bl	28d14 <date_time_core_schedule_update>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   28f14:	2003      	movs	r0, #3
   28f16:	e7e1      	b.n	28edc <date_time_update_thread+0x24>
   28f18:	200150c0 	.word	0x200150c0

00028f1c <date_time_ntp_get>:
	return false;
}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

int date_time_ntp_get(int64_t *date_time_ms)
{
   28f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28f20:	b09a      	sub	sp, #104	; 0x68
   28f22:	4606      	mov	r6, r0
	err = lte_lc_nw_reg_status_get(&reg_status);
   28f24:	a806      	add	r0, sp, #24
   28f26:	f7fe fa87 	bl	27438 <lte_lc_nw_reg_status_get>
	if (err) {
   28f2a:	4605      	mov	r5, r0
   28f2c:	b138      	cbz	r0, 28f3e <date_time_ntp_get+0x22>
		LOG_WRN("Failed getting LTE network registration status, error: %d", err);
   28f2e:	4602      	mov	r2, r0
   28f30:	2157      	movs	r1, #87	; 0x57
   28f32:	4832      	ldr	r0, [pc, #200]	; (28ffc <date_time_ntp_get+0xe0>)
   28f34:	f013 fecb 	bl	3ccce <z_log_minimal_printk>
		return 0;
	}

	LOG_WRN("Did not get time from any NTP server");

	return -ENODATA;
   28f38:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   28f3c:	e04d      	b.n	28fda <date_time_ntp_get+0xbe>
	if (reg_status == LTE_LC_NW_REG_REGISTERED_EMERGENCY ||
   28f3e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   28f42:	2b08      	cmp	r3, #8
   28f44:	d003      	beq.n	28f4e <date_time_ntp_get+0x32>
   28f46:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28f4a:	2b01      	cmp	r3, #1
   28f4c:	d1f4      	bne.n	28f38 <date_time_ntp_get+0x1c>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   28f4e:	4f2c      	ldr	r7, [pc, #176]	; (29000 <date_time_ntp_get+0xe4>)

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   28f50:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 29014 <date_time_ntp_get+0xf8>
	err = sntp_query(&sntp_ctx, timeout, time);
   28f54:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 29010 <date_time_ntp_get+0xf4>
		LOG_WRN("sntp_query, error: %d", err);
   28f58:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 29018 <date_time_ntp_get+0xfc>
	struct addrinfo hints = {
   28f5c:	2250      	movs	r2, #80	; 0x50
   28f5e:	2100      	movs	r1, #0
   28f60:	a806      	add	r0, sp, #24
		err =  sntp_time_request(servers[i],
   28f62:	f857 4b04 	ldr.w	r4, [r7], #4
	struct addrinfo hints = {
   28f66:	f018 fb4c 	bl	41602 <memset>
   28f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   28f6e:	aa06      	add	r2, sp, #24
   28f70:	9307      	str	r3, [sp, #28]
   28f72:	4641      	mov	r1, r8
   28f74:	466b      	mov	r3, sp
   28f76:	4620      	mov	r0, r4
   28f78:	f014 f9db 	bl	3d332 <zsock_getaddrinfo>
	if (err) {
   28f7c:	4602      	mov	r2, r0
   28f7e:	b160      	cbz	r0, 28f9a <date_time_ntp_get+0x7e>
		LOG_WRN("getaddrinfo, error: %d", err);
   28f80:	2157      	movs	r1, #87	; 0x57
   28f82:	4820      	ldr	r0, [pc, #128]	; (29004 <date_time_ntp_get+0xe8>)
   28f84:	f013 fea3 	bl	3ccce <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   28f88:	2d01      	cmp	r5, #1
   28f8a:	d104      	bne.n	28f96 <date_time_ntp_get+0x7a>
	LOG_WRN("Did not get time from any NTP server");
   28f8c:	2157      	movs	r1, #87	; 0x57
   28f8e:	481e      	ldr	r0, [pc, #120]	; (29008 <date_time_ntp_get+0xec>)
   28f90:	f013 fe9d 	bl	3ccce <z_log_minimal_printk>
   28f94:	e7d0      	b.n	28f38 <date_time_ntp_get+0x1c>
   28f96:	2501      	movs	r5, #1
   28f98:	e7e0      	b.n	28f5c <date_time_ntp_get+0x40>
	err = sntp_init(&sntp_ctx, addrinfo->ai_addr, addrinfo->ai_addrlen);
   28f9a:	9b00      	ldr	r3, [sp, #0]
   28f9c:	a801      	add	r0, sp, #4
   28f9e:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   28fa2:	f014 f992 	bl	3d2ca <sntp_init>
	if (err) {
   28fa6:	4604      	mov	r4, r0
   28fa8:	b1d8      	cbz	r0, 28fe2 <date_time_ntp_get+0xc6>
		LOG_WRN("sntp_init, error: %d", err);
   28faa:	2157      	movs	r1, #87	; 0x57
   28fac:	4602      	mov	r2, r0
   28fae:	4817      	ldr	r0, [pc, #92]	; (2900c <date_time_ntp_get+0xf0>)
		LOG_WRN("sntp_query, error: %d", err);
   28fb0:	f013 fe8d 	bl	3ccce <z_log_minimal_printk>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   28fb4:	9800      	ldr	r0, [sp, #0]
   28fb6:	f014 f9be 	bl	3d336 <zsock_freeaddrinfo>
	sntp_close(&sntp_ctx);
   28fba:	a801      	add	r0, sp, #4
   28fbc:	f014 f9b4 	bl	3d328 <sntp_close>
		if (err) {
   28fc0:	2c00      	cmp	r4, #0
   28fc2:	d1e1      	bne.n	28f88 <date_time_ntp_get+0x6c>
		*date_time_ms = (int64_t)sntp_time.seconds * 1000;
   28fc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   28fc8:	4811      	ldr	r0, [pc, #68]	; (29010 <date_time_ntp_get+0xf4>)
   28fca:	6803      	ldr	r3, [r0, #0]
   28fcc:	6845      	ldr	r5, [r0, #4]
   28fce:	fba3 3201 	umull	r3, r2, r3, r1
   28fd2:	fb01 2205 	mla	r2, r1, r5, r2
   28fd6:	e9c6 3200 	strd	r3, r2, [r6]
}
   28fda:	4620      	mov	r0, r4
   28fdc:	b01a      	add	sp, #104	; 0x68
   28fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = sntp_query(&sntp_ctx, timeout, time);
   28fe2:	464a      	mov	r2, r9
   28fe4:	f241 3188 	movw	r1, #5000	; 0x1388
   28fe8:	a801      	add	r0, sp, #4
   28fea:	f7f8 fc51 	bl	21890 <sntp_query>
	if (err) {
   28fee:	4604      	mov	r4, r0
   28ff0:	2800      	cmp	r0, #0
   28ff2:	d0df      	beq.n	28fb4 <date_time_ntp_get+0x98>
		LOG_WRN("sntp_query, error: %d", err);
   28ff4:	4602      	mov	r2, r0
   28ff6:	2157      	movs	r1, #87	; 0x57
   28ff8:	4650      	mov	r0, sl
   28ffa:	e7d9      	b.n	28fb0 <date_time_ntp_get+0x94>
   28ffc:	000468c5 	.word	0x000468c5
   29000:	0004307c 	.word	0x0004307c
   29004:	00046908 	.word	0x00046908
   29008:	00046959 	.word	0x00046959
   2900c:	00046924 	.word	0x00046924
   29010:	200155e8 	.word	0x200155e8
   29014:	00046904 	.word	0x00046904
   29018:	0004693e 	.word	0x0004693e

0002901c <date_time_at_xtime_handler>:
	/* 4 MSBs represent decimal that should be added as is. */
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
}

static void date_time_at_xtime_handler(const char *notif)
{
   2901c:	b530      	push	{r4, r5, lr}
	uint8_t time_buf[6];
	size_t time_buf_len;
	char *time_str_start;
	int err;

	if (notif == NULL) {
   2901e:	4604      	mov	r4, r0
{
   29020:	b08d      	sub	sp, #52	; 0x34
	if (notif == NULL) {
   29022:	2800      	cmp	r0, #0
   29024:	f000 8082 	beq.w	2912c <date_time_at_xtime_handler+0x110>
		return;
	}
	modem_valid_network_time = true;
   29028:	2201      	movs	r2, #1
   2902a:	4b41      	ldr	r3, [pc, #260]	; (29130 <date_time_at_xtime_handler+0x114>)
   2902c:	701a      	strb	r2, [r3, #0]

	/* Check if current time is valid */
	err = date_time_core_current_check();
   2902e:	f7ff fec9 	bl	28dc4 <date_time_core_current_check>
	if (err == 0) {
   29032:	2800      	cmp	r0, #0
   29034:	d07a      	beq.n	2912c <date_time_at_xtime_handler+0x110>
	 *                 and received from network.
	 * Examples of modem time response:
	 * %XTIME: "08","81109251714208","01"
	 * %XTIME: ,"81109251714208",
	 */
	time_str_start = strchr(notif, ',');
   29036:	212c      	movs	r1, #44	; 0x2c
   29038:	4620      	mov	r0, r4
   2903a:	f018 fca0 	bl	4197e <strchr>
	if (time_str_start == NULL) {
   2903e:	4605      	mov	r5, r0
   29040:	b938      	cbnz	r0, 29052 <date_time_at_xtime_handler+0x36>
		LOG_ERR("%%XTIME notification doesn't contain ',': %s", notif);
   29042:	4622      	mov	r2, r4
   29044:	2145      	movs	r1, #69	; 0x45
   29046:	483b      	ldr	r0, [pc, #236]	; (29134 <date_time_at_xtime_handler+0x118>)
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;

	LOG_DBG("Time obtained from cellular network (XTIME notification)");

	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
}
   29048:	b00d      	add	sp, #52	; 0x34
   2904a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   2904e:	f013 be3e 	b.w	3ccce <z_log_minimal_printk>
	if (strlen(time_str_start) < 17) {
   29052:	f7f4 f8f6 	bl	1d242 <strlen>
   29056:	2810      	cmp	r0, #16
   29058:	d803      	bhi.n	29062 <date_time_at_xtime_handler+0x46>
		LOG_ERR("%%XTIME notification too short: %s", notif);
   2905a:	4622      	mov	r2, r4
   2905c:	2145      	movs	r1, #69	; 0x45
   2905e:	4836      	ldr	r0, [pc, #216]	; (29138 <date_time_at_xtime_handler+0x11c>)
   29060:	e7f2      	b.n	29048 <date_time_at_xtime_handler+0x2c>
	if (*(time_str_start + 1) != '"') {
   29062:	786b      	ldrb	r3, [r5, #1]
   29064:	2b22      	cmp	r3, #34	; 0x22
   29066:	d003      	beq.n	29070 <date_time_at_xtime_handler+0x54>
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   29068:	4622      	mov	r2, r4
   2906a:	2145      	movs	r1, #69	; 0x45
   2906c:	4833      	ldr	r0, [pc, #204]	; (2913c <date_time_at_xtime_handler+0x120>)
   2906e:	e7eb      	b.n	29048 <date_time_at_xtime_handler+0x2c>
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   29070:	aa01      	add	r2, sp, #4
   29072:	2306      	movs	r3, #6
   29074:	210c      	movs	r1, #12
   29076:	1ca8      	adds	r0, r5, #2
   29078:	f013 fbab 	bl	3c7d2 <hex2bin>
	if (time_buf_len < sizeof(time_buf)) {
   2907c:	2805      	cmp	r0, #5
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   2907e:	4602      	mov	r2, r0
	if (time_buf_len < sizeof(time_buf)) {
   29080:	d804      	bhi.n	2908c <date_time_at_xtime_handler+0x70>
		LOG_ERR("%%XTIME notification decoding failed (ret=%d): %s", time_buf_len, notif);
   29082:	4623      	mov	r3, r4
   29084:	2145      	movs	r1, #69	; 0x45
   29086:	482e      	ldr	r0, [pc, #184]	; (29140 <date_time_at_xtime_handler+0x124>)
   29088:	f013 fe21 	bl	3ccce <z_log_minimal_printk>
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   2908c:	f89d 1006 	ldrb.w	r1, [sp, #6]
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   29090:	f89d 2004 	ldrb.w	r2, [sp, #4]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   29094:	f001 000f 	and.w	r0, r1, #15
   29098:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2909c:	0909      	lsrs	r1, r1, #4
   2909e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   290a2:	b2c9      	uxtb	r1, r1
   290a4:	9106      	str	r1, [sp, #24]
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   290a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   290aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   290ae:	f001 000f 	and.w	r0, r1, #15
   290b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   290b6:	0909      	lsrs	r1, r1, #4
   290b8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   290bc:	b2c9      	uxtb	r1, r1
   290be:	9105      	str	r1, [sp, #20]
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   290c0:	f89d 1008 	ldrb.w	r1, [sp, #8]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   290c4:	f001 000f 	and.w	r0, r1, #15
   290c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   290cc:	0909      	lsrs	r1, r1, #4
   290ce:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   290d2:	b2c9      	uxtb	r1, r1
   290d4:	9104      	str	r1, [sp, #16]
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   290d6:	f89d 1009 	ldrb.w	r1, [sp, #9]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   290da:	f001 000f 	and.w	r0, r1, #15
   290de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   290e2:	0909      	lsrs	r1, r1, #4
   290e4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   290e8:	b2c9      	uxtb	r1, r1
   290ea:	9103      	str	r1, [sp, #12]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   290ec:	f002 010f 	and.w	r1, r2, #15
   290f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   290f4:	0912      	lsrs	r2, r2, #4
   290f6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   290fa:	b2d2      	uxtb	r2, r2
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   290fc:	3264      	adds	r2, #100	; 0x64
   290fe:	9208      	str	r2, [sp, #32]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   29100:	f003 020f 	and.w	r2, r3, #15
   29104:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   29108:	091b      	lsrs	r3, r3, #4
   2910a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   2910e:	b2db      	uxtb	r3, r3
	date_time.tm_mon = date_time.tm_mon - 1;
   29110:	3b01      	subs	r3, #1
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   29112:	a803      	add	r0, sp, #12
	date_time.tm_mon = date_time.tm_mon - 1;
   29114:	9307      	str	r3, [sp, #28]
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   29116:	f7f8 f885 	bl	21224 <timeutil_timegm64>
   2911a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2911e:	fba0 0403 	umull	r0, r4, r0, r3
	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
   29122:	2200      	movs	r2, #0
   29124:	fb03 4101 	mla	r1, r3, r1, r4
   29128:	f7ff fe72 	bl	28e10 <date_time_core_store>
}
   2912c:	b00d      	add	sp, #52	; 0x34
   2912e:	bd30      	pop	{r4, r5, pc}
   29130:	2001c704 	.word	0x2001c704
   29134:	0004699e 	.word	0x0004699e
   29138:	000469d0 	.word	0x000469d0
   2913c:	000469f8 	.word	0x000469f8
   29140:	00046a34 	.word	0x00046a34

00029144 <date_time_modem_get>:
{
   29144:	b530      	push	{r4, r5, lr}
	if (!modem_valid_network_time) {
   29146:	4b18      	ldr	r3, [pc, #96]	; (291a8 <date_time_modem_get+0x64>)
{
   29148:	4604      	mov	r4, r0
	if (!modem_valid_network_time) {
   2914a:	781b      	ldrb	r3, [r3, #0]
{
   2914c:	b08f      	sub	sp, #60	; 0x3c
	if (!modem_valid_network_time) {
   2914e:	b1a3      	cbz	r3, 2917a <date_time_modem_get+0x36>
	rc = nrf_modem_at_scanf("AT+CCLK?",
   29150:	ab06      	add	r3, sp, #24
   29152:	9302      	str	r3, [sp, #8]
   29154:	ab07      	add	r3, sp, #28
   29156:	9301      	str	r3, [sp, #4]
   29158:	ad05      	add	r5, sp, #20
   2915a:	ab08      	add	r3, sp, #32
   2915c:	9300      	str	r3, [sp, #0]
   2915e:	aa0a      	add	r2, sp, #40	; 0x28
   29160:	4912      	ldr	r1, [pc, #72]	; (291ac <date_time_modem_get+0x68>)
   29162:	4813      	ldr	r0, [pc, #76]	; (291b0 <date_time_modem_get+0x6c>)
   29164:	9503      	str	r5, [sp, #12]
   29166:	ab09      	add	r3, sp, #36	; 0x24
   29168:	f00c f87c 	bl	35264 <nrf_modem_at_scanf>
	if (rc != 6) {
   2916c:	2806      	cmp	r0, #6
	rc = nrf_modem_at_scanf("AT+CCLK?",
   2916e:	4602      	mov	r2, r0
	if (rc != 6) {
   29170:	d006      	beq.n	29180 <date_time_modem_get+0x3c>
		LOG_WRN("Did not get time from cellular network (error: %d). "
   29172:	2157      	movs	r1, #87	; 0x57
   29174:	480f      	ldr	r0, [pc, #60]	; (291b4 <date_time_modem_get+0x70>)
   29176:	f013 fdaa 	bl	3ccce <z_log_minimal_printk>
		return -ENODATA;
   2917a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   2917e:	e011      	b.n	291a4 <date_time_modem_get+0x60>
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   29180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   29182:	4628      	mov	r0, r5
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   29184:	3364      	adds	r3, #100	; 0x64
   29186:	930a      	str	r3, [sp, #40]	; 0x28
	date_time.tm_mon = date_time.tm_mon - 1;
   29188:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2918a:	3b01      	subs	r3, #1
   2918c:	9309      	str	r3, [sp, #36]	; 0x24
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2918e:	f7f8 f849 	bl	21224 <timeutil_timegm64>
   29192:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29196:	fba0 3002 	umull	r3, r0, r0, r2
   2919a:	fb02 0001 	mla	r0, r2, r1, r0
   2919e:	e9c4 3000 	strd	r3, r0, [r4]
	return 0;
   291a2:	2000      	movs	r0, #0
}
   291a4:	b00f      	add	sp, #60	; 0x3c
   291a6:	bd30      	pop	{r4, r5, pc}
   291a8:	2001c704 	.word	0x2001c704
   291ac:	00046a6b 	.word	0x00046a6b
   291b0:	000462b6 	.word	0x000462b6
   291b4:	00046a85 	.word	0x00046a85

000291b8 <date_time_modem_store>:
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) */

void date_time_modem_store(struct tm *ltm)
{
   291b8:	b530      	push	{r4, r5, lr}
	int ret;

	/* Set modem time if modem has not got it from the LTE network */
	if (!modem_valid_network_time) {
   291ba:	4b11      	ldr	r3, [pc, #68]	; (29200 <date_time_modem_store+0x48>)
{
   291bc:	b085      	sub	sp, #20
	if (!modem_valid_network_time) {
   291be:	781b      	ldrb	r3, [r3, #0]
   291c0:	b9db      	cbnz	r3, 291fa <date_time_modem_store+0x42>
		/* Time zone is not known and it's mandatory so setting to zero.
		 * POSIX year is relative to 1900 which doesn't affect as last two digits are taken
		 * with modulo 100.
		 * POSIX month is in range 0-11 so adding 1.
		 */
		ret = nrf_modem_at_printf("AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u+%02u\"",
   291c2:	e9d0 2104 	ldrd	r2, r1, [r0, #16]
   291c6:	2464      	movs	r4, #100	; 0x64
   291c8:	fb91 f5f4 	sdiv	r5, r1, r4
   291cc:	9303      	str	r3, [sp, #12]
   291ce:	6803      	ldr	r3, [r0, #0]
   291d0:	3201      	adds	r2, #1
   291d2:	9302      	str	r3, [sp, #8]
   291d4:	6843      	ldr	r3, [r0, #4]
   291d6:	fb04 1115 	mls	r1, r4, r5, r1
   291da:	9301      	str	r3, [sp, #4]
   291dc:	6883      	ldr	r3, [r0, #8]
   291de:	9300      	str	r3, [sp, #0]
   291e0:	68c3      	ldr	r3, [r0, #12]
   291e2:	4808      	ldr	r0, [pc, #32]	; (29204 <date_time_modem_store+0x4c>)
   291e4:	f00b ffac 	bl	35140 <nrf_modem_at_printf>
			ltm->tm_year % 100, ltm->tm_mon + 1, ltm->tm_mday,
			ltm->tm_hour, ltm->tm_min, ltm->tm_sec, 0);
		if (ret) {
   291e8:	4602      	mov	r2, r0
   291ea:	b130      	cbz	r0, 291fa <date_time_modem_store+0x42>
			LOG_ERR("Setting modem time failed, %d", ret);
   291ec:	2145      	movs	r1, #69	; 0x45
   291ee:	4806      	ldr	r0, [pc, #24]	; (29208 <date_time_modem_store+0x50>)
			return;
		}

		LOG_DBG("Modem time updated");
	}
}
   291f0:	b005      	add	sp, #20
   291f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Setting modem time failed, %d", ret);
   291f6:	f013 bd6a 	b.w	3ccce <z_log_minimal_printk>
}
   291fa:	b005      	add	sp, #20
   291fc:	bd30      	pop	{r4, r5, pc}
   291fe:	bf00      	nop
   29200:	2001c704 	.word	0x2001c704
   29204:	00046b1a 	.word	0x00046b1a
   29208:	00046b47 	.word	0x00046b47

0002920c <date_time_modem_xtime_subscribe>:

void date_time_modem_xtime_subscribe(void)
{
   2920c:	b508      	push	{r3, lr}
	/* Subscribe to modem time notifications */
	int err = nrf_modem_at_printf("AT%%XTIME=1");
   2920e:	4806      	ldr	r0, [pc, #24]	; (29228 <date_time_modem_xtime_subscribe+0x1c>)
   29210:	f00b ff96 	bl	35140 <nrf_modem_at_printf>

	if (err) {
   29214:	4602      	mov	r2, r0
   29216:	b128      	cbz	r0, 29224 <date_time_modem_xtime_subscribe+0x18>
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
	}
}
   29218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
   2921c:	2145      	movs	r1, #69	; 0x45
   2921e:	4803      	ldr	r0, [pc, #12]	; (2922c <date_time_modem_xtime_subscribe+0x20>)
   29220:	f013 bd55 	b.w	3ccce <z_log_minimal_printk>
}
   29224:	bd08      	pop	{r3, pc}
   29226:	bf00      	nop
   29228:	00046b6a 	.word	0x00046b6a
   2922c:	00046b76 	.word	0x00046b76

00029230 <multicell_location_get>:


int multicell_location_get(enum multicell_service service,
			   const struct lte_lc_cells_info *cell_data,
			   struct multicell_location *location)
{
   29230:	b570      	push	{r4, r5, r6, lr}
   29232:	4606      	mov	r6, r0
   29234:	4615      	mov	r5, r2
	if ((cell_data == NULL) || (location == NULL)) {
   29236:	460c      	mov	r4, r1
   29238:	b1f1      	cbz	r1, 29278 <multicell_location_get+0x48>
   2923a:	b1ea      	cbz	r2, 29278 <multicell_location_get+0x48>
		return -EINVAL;
	}

	if (cell_data->current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   2923c:	688b      	ldr	r3, [r1, #8]
   2923e:	3301      	adds	r3, #1
   29240:	d106      	bne.n	29250 <multicell_location_get+0x20>
		LOG_WRN("Invalid cell ID, device may not be connected to a network");
   29242:	480f      	ldr	r0, [pc, #60]	; (29280 <multicell_location_get+0x50>)
   29244:	2157      	movs	r1, #87	; 0x57
   29246:	f013 fd42 	bl	3ccce <z_log_minimal_printk>
		return -ENOENT;
   2924a:	f06f 0001 	mvn.w	r0, #1
			cell_data->ncells_count, CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS);
		LOG_WRN("Increase CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS to use more cells");
	}

	return location_service_get_cell_location(service, cell_data, location);
}
   2924e:	bd70      	pop	{r4, r5, r6, pc}
	if (cell_data->ncells_count > CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS) {
   29250:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   29254:	2a08      	cmp	r2, #8
   29256:	d908      	bls.n	2926a <multicell_location_get+0x3a>
		LOG_WRN("Found %d neighbor cells, but %d cells will be used in location request",
   29258:	2157      	movs	r1, #87	; 0x57
   2925a:	480a      	ldr	r0, [pc, #40]	; (29284 <multicell_location_get+0x54>)
   2925c:	2308      	movs	r3, #8
   2925e:	f013 fd36 	bl	3ccce <z_log_minimal_printk>
		LOG_WRN("Increase CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS to use more cells");
   29262:	2157      	movs	r1, #87	; 0x57
   29264:	4808      	ldr	r0, [pc, #32]	; (29288 <multicell_location_get+0x58>)
   29266:	f013 fd32 	bl	3ccce <z_log_minimal_printk>
	return location_service_get_cell_location(service, cell_data, location);
   2926a:	462a      	mov	r2, r5
   2926c:	4621      	mov	r1, r4
   2926e:	4630      	mov	r0, r6
}
   29270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return location_service_get_cell_location(service, cell_data, location);
   29274:	f000 b858 	b.w	29328 <location_service_get_cell_location>
		return -EINVAL;
   29278:	f06f 0015 	mvn.w	r0, #21
   2927c:	e7e7      	b.n	2924e <multicell_location_get+0x1e>
   2927e:	bf00      	nop
   29280:	00046bbe 	.word	0x00046bbe
   29284:	00046bfd 	.word	0x00046bfd
   29288:	00046c49 	.word	0x00046c49

0002928c <multicell_location_provision_certificate>:

	return 0;
}

int multicell_location_provision_certificate(bool overwrite)
{
   2928c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2928e:	4606      	mov	r6, r0
	int ret = -ENOTSUP;

#if defined(CONFIG_MULTICELL_LOCATION_SERVICE_NRF_CLOUD)
	ret = multicell_location_provision_service_certificate(
   29290:	2001      	movs	r0, #1
   29292:	f016 fa71 	bl	3f778 <location_service_get_certificate>
	if (certificate == NULL) {
   29296:	4605      	mov	r5, r0
   29298:	b940      	cbnz	r0, 292ac <multicell_location_provision_certificate+0x20>
		LOG_ERR("No certificate was provided by the location service");
   2929a:	2145      	movs	r1, #69	; 0x45
   2929c:	481c      	ldr	r0, [pc, #112]	; (29310 <multicell_location_provision_certificate+0x84>)
   2929e:	f013 fd16 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   292a2:	f06f 040d 	mvn.w	r4, #13
	if (ret) {
		return ret;
	}
#endif
	return ret;
}
   292a6:	4620      	mov	r0, r4
   292a8:	b002      	add	sp, #8
   292aa:	bd70      	pop	{r4, r5, r6, pc}
	err = modem_key_mgmt_exists(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, &exists);
   292ac:	2100      	movs	r1, #0
   292ae:	4819      	ldr	r0, [pc, #100]	; (29314 <multicell_location_provision_certificate+0x88>)
   292b0:	f10d 0207 	add.w	r2, sp, #7
   292b4:	f7ff fca8 	bl	28c08 <modem_key_mgmt_exists>
	if (err) {
   292b8:	4604      	mov	r4, r0
   292ba:	b128      	cbz	r0, 292c8 <multicell_location_provision_certificate+0x3c>
		LOG_ERR("Failed to check for certificates err %d", err);
   292bc:	2145      	movs	r1, #69	; 0x45
   292be:	4602      	mov	r2, r0
   292c0:	4815      	ldr	r0, [pc, #84]	; (29318 <multicell_location_provision_certificate+0x8c>)
		LOG_ERR("Failed to provision certificate, err %d", err);
   292c2:	f013 fd04 	bl	3ccce <z_log_minimal_printk>
		return err;
   292c6:	e7ee      	b.n	292a6 <multicell_location_provision_certificate+0x1a>
	if (exists && overwrite) {
   292c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   292cc:	b15b      	cbz	r3, 292e6 <multicell_location_provision_certificate+0x5a>
   292ce:	2e00      	cmp	r6, #0
   292d0:	d0e9      	beq.n	292a6 <multicell_location_provision_certificate+0x1a>
		err = modem_key_mgmt_delete(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN);
   292d2:	4601      	mov	r1, r0
   292d4:	480f      	ldr	r0, [pc, #60]	; (29314 <multicell_location_provision_certificate+0x88>)
   292d6:	f7ff fc79 	bl	28bcc <modem_key_mgmt_delete>
		if (err) {
   292da:	4602      	mov	r2, r0
   292dc:	b118      	cbz	r0, 292e6 <multicell_location_provision_certificate+0x5a>
			LOG_ERR("Failed to delete existing certificate, err %d", err);
   292de:	2145      	movs	r1, #69	; 0x45
   292e0:	480e      	ldr	r0, [pc, #56]	; (2931c <multicell_location_provision_certificate+0x90>)
   292e2:	f013 fcf4 	bl	3ccce <z_log_minimal_printk>
	LOG_INF("Provisioning certificate");
   292e6:	2149      	movs	r1, #73	; 0x49
   292e8:	480d      	ldr	r0, [pc, #52]	; (29320 <multicell_location_provision_certificate+0x94>)
   292ea:	f013 fcf0 	bl	3ccce <z_log_minimal_printk>
	err = modem_key_mgmt_write(sec_tag,
   292ee:	4628      	mov	r0, r5
   292f0:	f7f3 ffa7 	bl	1d242 <strlen>
   292f4:	462a      	mov	r2, r5
   292f6:	4603      	mov	r3, r0
   292f8:	2100      	movs	r1, #0
   292fa:	4806      	ldr	r0, [pc, #24]	; (29314 <multicell_location_provision_certificate+0x88>)
   292fc:	f7ff fc3e 	bl	28b7c <modem_key_mgmt_write>
	if (err) {
   29300:	4604      	mov	r4, r0
   29302:	2800      	cmp	r0, #0
   29304:	d0cf      	beq.n	292a6 <multicell_location_provision_certificate+0x1a>
		LOG_ERR("Failed to provision certificate, err %d", err);
   29306:	4602      	mov	r2, r0
   29308:	2145      	movs	r1, #69	; 0x45
   2930a:	4806      	ldr	r0, [pc, #24]	; (29324 <multicell_location_provision_certificate+0x98>)
   2930c:	e7d9      	b.n	292c2 <multicell_location_provision_certificate+0x36>
   2930e:	bf00      	nop
   29310:	00046c91 	.word	0x00046c91
   29314:	01010001 	.word	0x01010001
   29318:	00046cca 	.word	0x00046cca
   2931c:	00046cf7 	.word	0x00046cf7
   29320:	00046d2a 	.word	0x00046d2a
   29324:	00046d48 	.word	0x00046d48

00029328 <location_service_get_cell_location>:

int location_service_get_cell_location(
	enum multicell_service service,
	const struct lte_lc_cells_info *cell_data,
	struct multicell_location *const location)
{
   29328:	b410      	push	{r4}
   2932a:	4604      	mov	r4, r0
#if defined(CONFIG_MULTICELL_LOCATION_SERVICE_NRF_CLOUD)
	if (service == MULTICELL_SERVICE_NRF_CLOUD || service == MULTICELL_SERVICE_ANY) {
   2932c:	2c01      	cmp	r4, #1
{
   2932e:	4608      	mov	r0, r1
   29330:	4613      	mov	r3, r2
	if (service == MULTICELL_SERVICE_NRF_CLOUD || service == MULTICELL_SERVICE_ANY) {
   29332:	d806      	bhi.n	29342 <location_service_get_cell_location+0x1a>
		return location_service_get_cell_location_nrf_cloud(
   29334:	f44f 7200 	mov.w	r2, #512	; 0x200
   29338:	4904      	ldr	r1, [pc, #16]	; (2934c <location_service_get_cell_location+0x24>)
			cell_data, recv_buf, sizeof(recv_buf), location);
	}
#endif
	/* We should never get here as at least one service must be enabled */
	return -ENOTSUP;
}
   2933a:	f85d 4b04 	ldr.w	r4, [sp], #4
		return location_service_get_cell_location_nrf_cloud(
   2933e:	f000 b835 	b.w	293ac <location_service_get_cell_location_nrf_cloud>
}
   29342:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29346:	f85d 4b04 	ldr.w	r4, [sp], #4
   2934a:	4770      	bx	lr
   2934c:	2001c705 	.word	0x2001c705

00029350 <location_service_location_ready_cb>:
	return tls_certificate;
}

#if defined(CONFIG_NRF_CLOUD_MQTT)
static void location_service_location_ready_cb(const struct nrf_cloud_cell_pos_result *const result)
{
   29350:	b538      	push	{r3, r4, r5, lr}
	if ((result != NULL) && (result->err == NRF_CLOUD_ERROR_NONE)) {
   29352:	4604      	mov	r4, r0
   29354:	b1d8      	cbz	r0, 2938e <location_service_location_ready_cb+0x3e>
   29356:	69c2      	ldr	r2, [r0, #28]
   29358:	b9aa      	cbnz	r2, 29386 <location_service_location_ready_cb+0x36>
		nrf_cloud_location.latitude = result->lat;
   2935a:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   2935e:	f7f3 fd23 	bl	1cda8 <__aeabi_d2f>
   29362:	4d0d      	ldr	r5, [pc, #52]	; (29398 <location_service_location_ready_cb+0x48>)
   29364:	6028      	str	r0, [r5, #0]
		nrf_cloud_location.longitude = result->lon;
   29366:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   2936a:	f7f3 fd1d 	bl	1cda8 <__aeabi_d2f>
   2936e:	6068      	str	r0, [r5, #4]
		nrf_cloud_location.accuracy = (double)result->unc;
   29370:	69a0      	ldr	r0, [r4, #24]
   29372:	f7f3 f9a7 	bl	1c6c4 <__aeabi_ui2d>
   29376:	f7f3 fd17 	bl	1cda8 <__aeabi_d2f>
   2937a:	60a8      	str	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   2937c:	4807      	ldr	r0, [pc, #28]	; (2939c <location_service_location_ready_cb+0x4c>)
		/* Reset the semaphore to unblock location_service_get_cell_location_nrf_cloud()
		 * and make it return an error.
		 */
		k_sem_reset(&location_ready);
	}
}
   2937e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   29382:	f00d bd85 	b.w	36e90 <z_impl_k_sem_give>
			LOG_ERR("Unable to determine location from cellular data, error: %d",
   29386:	2145      	movs	r1, #69	; 0x45
   29388:	4805      	ldr	r0, [pc, #20]	; (293a0 <location_service_location_ready_cb+0x50>)
   2938a:	f013 fca0 	bl	3ccce <z_log_minimal_printk>
}
   2938e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_reset(sem);
   29392:	4802      	ldr	r0, [pc, #8]	; (2939c <location_service_location_ready_cb+0x4c>)
   29394:	f00d be22 	b.w	36fdc <z_impl_k_sem_reset>
   29398:	20019428 	.word	0x20019428
   2939c:	20015090 	.word	0x20015090
   293a0:	00046d88 	.word	0x00046d88

000293a4 <location_service_get_certificate_nrf_cloud>:
}
   293a4:	4800      	ldr	r0, [pc, #0]	; (293a8 <location_service_get_certificate_nrf_cloud+0x4>)
   293a6:	4770      	bx	lr
   293a8:	00046ec5 	.word	0x00046ec5

000293ac <location_service_get_cell_location_nrf_cloud>:
int location_service_get_cell_location_nrf_cloud(
	const struct lte_lc_cells_info *cell_data,
	char * const rcv_buf,
	const size_t rcv_buf_len,
	struct multicell_location *const location)
{
   293ac:	b538      	push	{r3, r4, r5, lr}
   293ae:	4604      	mov	r4, r0
   293b0:	461d      	mov	r5, r3
   293b2:	4819      	ldr	r0, [pc, #100]	; (29418 <location_service_get_cell_location_nrf_cloud+0x6c>)
   293b4:	f00d fe12 	bl	36fdc <z_impl_k_sem_reset>
	int err;

	k_sem_reset(&location_ready);

	LOG_DBG("Sending cellular positioning request (MQTT)");
	err = nrf_cloud_cell_pos_request(cell_data, true, location_service_location_ready_cb);
   293b8:	4620      	mov	r0, r4
   293ba:	2101      	movs	r1, #1
   293bc:	4a17      	ldr	r2, [pc, #92]	; (2941c <location_service_get_cell_location_nrf_cloud+0x70>)
   293be:	f016 fab6 	bl	3f92e <nrf_cloud_cell_pos_request>
	if (err == -EACCES) {
   293c2:	f110 0f0d 	cmn.w	r0, #13
	err = nrf_cloud_cell_pos_request(cell_data, true, location_service_location_ready_cb);
   293c6:	4604      	mov	r4, r0
	if (err == -EACCES) {
   293c8:	d105      	bne.n	293d6 <location_service_get_cell_location_nrf_cloud+0x2a>
		LOG_ERR("Cloud connection is not established");
   293ca:	2145      	movs	r1, #69	; 0x45
   293cc:	4814      	ldr	r0, [pc, #80]	; (29420 <location_service_get_cell_location_nrf_cloud+0x74>)
   293ce:	f013 fc7e 	bl	3ccce <z_log_minimal_printk>
	}

	*location = nrf_cloud_location;

	return err;
}
   293d2:	4620      	mov	r0, r4
   293d4:	bd38      	pop	{r3, r4, r5, pc}
	} else if (err) {
   293d6:	b128      	cbz	r0, 293e4 <location_service_get_cell_location_nrf_cloud+0x38>
		LOG_ERR("Failed to request cellular positioning data, error: %d", err);
   293d8:	4602      	mov	r2, r0
   293da:	2145      	movs	r1, #69	; 0x45
   293dc:	4811      	ldr	r0, [pc, #68]	; (29424 <location_service_get_cell_location_nrf_cloud+0x78>)
   293de:	f013 fc76 	bl	3ccce <z_log_minimal_printk>
		return err;
   293e2:	e7f6      	b.n	293d2 <location_service_get_cell_location_nrf_cloud+0x26>
	LOG_INF("Cellular positioning request sent");
   293e4:	2149      	movs	r1, #73	; 0x49
   293e6:	4810      	ldr	r0, [pc, #64]	; (29428 <location_service_get_cell_location_nrf_cloud+0x7c>)
   293e8:	f013 fc71 	bl	3ccce <z_log_minimal_printk>
	return z_impl_k_sem_take(sem, timeout);
   293ec:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   293f0:	2300      	movs	r3, #0
   293f2:	4809      	ldr	r0, [pc, #36]	; (29418 <location_service_get_cell_location_nrf_cloud+0x6c>)
   293f4:	f00d fd88 	bl	36f08 <z_impl_k_sem_take>
	if (k_sem_take(&location_ready, K_SECONDS(20)) == -EAGAIN) {
   293f8:	300b      	adds	r0, #11
   293fa:	d106      	bne.n	2940a <location_service_get_cell_location_nrf_cloud+0x5e>
		LOG_ERR("Cellular positioning data request timed out or "
   293fc:	2145      	movs	r1, #69	; 0x45
   293fe:	480b      	ldr	r0, [pc, #44]	; (2942c <location_service_get_cell_location_nrf_cloud+0x80>)
   29400:	f013 fc65 	bl	3ccce <z_log_minimal_printk>
		return -ETIMEDOUT;
   29404:	f06f 0473 	mvn.w	r4, #115	; 0x73
   29408:	e7e3      	b.n	293d2 <location_service_get_cell_location_nrf_cloud+0x26>
	*location = nrf_cloud_location;
   2940a:	4b09      	ldr	r3, [pc, #36]	; (29430 <location_service_get_cell_location_nrf_cloud+0x84>)
   2940c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   29410:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	return err;
   29414:	e7dd      	b.n	293d2 <location_service_get_cell_location_nrf_cloud+0x26>
   29416:	bf00      	nop
   29418:	20015090 	.word	0x20015090
   2941c:	00029351 	.word	0x00029351
   29420:	00046dc8 	.word	0x00046dc8
   29424:	00046df1 	.word	0x00046df1
   29428:	00046e2d 	.word	0x00046e2d
   2942c:	00046e54 	.word	0x00046e54
   29430:	20019428 	.word	0x20019428

00029434 <location_init>:
static const char LOCATION_METHOD_GNSS_STR[] = "GNSS";
static const char LOCATION_METHOD_WIFI_STR[] = "Wi-Fi";
static const char LOCATION_METHOD_UNKNOWN_STR[] = "Unknown";

int location_init(location_event_handler_t handler)
{
   29434:	b510      	push	{r4, lr}
	int err;

	err = location_core_event_handler_set(handler);
   29436:	f000 f8e5 	bl	29604 <location_core_event_handler_set>
	if (err) {
   2943a:	b938      	cbnz	r0, 2944c <location_init+0x18>
		return err;
	}
	if (initialized) {
   2943c:	4c04      	ldr	r4, [pc, #16]	; (29450 <location_init+0x1c>)
   2943e:	7823      	ldrb	r3, [r4, #0]
   29440:	b923      	cbnz	r3, 2944c <location_init+0x18>
		/* Already initialized so library is ready. We just updated the event handler. */
		return 0;
	}

	err = location_core_init();
   29442:	f000 f8f1 	bl	29628 <location_core_init>
	if (err) {
   29446:	b908      	cbnz	r0, 2944c <location_init+0x18>
		return err;
	}

	initialized = true;
   29448:	2301      	movs	r3, #1
   2944a:	7023      	strb	r3, [r4, #0]

	LOG_DBG("Location library initialized");

	return 0;
}
   2944c:	bd10      	pop	{r4, pc}
   2944e:	bf00      	nop
   29450:	2001c905 	.word	0x2001c905

00029454 <location_config_defaults_set>:

void location_config_defaults_set(
	struct location_config *config,
	uint8_t methods_count,
	enum location_method *method_types)
{
   29454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29456:	460d      	mov	r5, r1
   29458:	4616      	mov	r6, r2
	if (config == NULL) {
   2945a:	4604      	mov	r4, r0
   2945c:	b928      	cbnz	r0, 2946a <location_config_defaults_set+0x16>
		LOG_ERR("Configuration must not be NULL");
   2945e:	2145      	movs	r1, #69	; 0x45
	config->methods_count = methods_count;
	config->mode = LOCATION_REQ_MODE_FALLBACK;
	for (int i = 0; i < methods_count; i++) {
		location_config_method_defaults_set(&config->methods[i], method_types[i]);
	}
}
   29460:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("Configuration must not be NULL");
   29464:	4814      	ldr	r0, [pc, #80]	; (294b8 <location_config_defaults_set+0x64>)
   29466:	f013 bc32 	b.w	3ccce <z_log_minimal_printk>
__ssp_bos_icheck3(memset, void *, int)
   2946a:	221e      	movs	r2, #30
   2946c:	2100      	movs	r1, #0
   2946e:	f018 f8c8 	bl	41602 <memset>
	for (int i = 0; i < methods_count; i++) {
   29472:	2300      	movs	r3, #0
   29474:	4620      	mov	r0, r4
	config->methods_count = methods_count;
   29476:	7025      	strb	r5, [r4, #0]
		method->wifi.service = LOCATION_SERVICE_ANY;
   29478:	461a      	mov	r2, r3
		method->wifi.timeout = 30;
   2947a:	241e      	movs	r4, #30
		method->gnss.timeout = 120;
   2947c:	2778      	movs	r7, #120	; 0x78
		method->gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   2947e:	f04f 0c01 	mov.w	ip, #1
		method->gnss.num_consecutive_fixes = 3;
   29482:	f04f 0e03 	mov.w	lr, #3
	for (int i = 0; i < methods_count; i++) {
   29486:	42ab      	cmp	r3, r5
   29488:	db00      	blt.n	2948c <location_config_defaults_set+0x38>
}
   2948a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		location_config_method_defaults_set(&config->methods[i], method_types[i]);
   2948c:	5cf1      	ldrb	r1, [r6, r3]
	if (method_type == LOCATION_METHOD_GNSS) {
   2948e:	2902      	cmp	r1, #2
	method->method = method_type;
   29490:	7081      	strb	r1, [r0, #2]
	if (method_type == LOCATION_METHOD_GNSS) {
   29492:	d108      	bne.n	294a6 <location_config_defaults_set+0x52>
		method->gnss.timeout = 120;
   29494:	8087      	strh	r7, [r0, #4]
		method->gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   29496:	f880 c006 	strb.w	ip, [r0, #6]
		method->gnss.num_consecutive_fixes = 3;
   2949a:	f880 e007 	strb.w	lr, [r0, #7]
		method->gnss.visibility_detection = false;
   2949e:	7202      	strb	r2, [r0, #8]
	for (int i = 0; i < methods_count; i++) {
   294a0:	3301      	adds	r3, #1
   294a2:	3008      	adds	r0, #8
   294a4:	e7ef      	b.n	29486 <location_config_defaults_set+0x32>
	} else if (method_type == LOCATION_METHOD_CELLULAR) {
   294a6:	2901      	cmp	r1, #1
   294a8:	d102      	bne.n	294b0 <location_config_defaults_set+0x5c>
		method->wifi.timeout = 30;
   294aa:	8084      	strh	r4, [r0, #4]
		method->wifi.service = LOCATION_SERVICE_ANY;
   294ac:	7182      	strb	r2, [r0, #6]
   294ae:	e7f7      	b.n	294a0 <location_config_defaults_set+0x4c>
	} else if (method_type == LOCATION_METHOD_WIFI) {
   294b0:	2903      	cmp	r1, #3
   294b2:	d1f5      	bne.n	294a0 <location_config_defaults_set+0x4c>
   294b4:	e7f9      	b.n	294aa <location_config_defaults_set+0x56>
   294b6:	bf00      	nop
   294b8:	00047542 	.word	0x00047542

000294bc <location_request>:
{
   294bc:	b530      	push	{r4, r5, lr}
   294be:	b08b      	sub	sp, #44	; 0x2c
   294c0:	4604      	mov	r4, r0
	struct location_config default_config = { 0 };
   294c2:	221e      	movs	r2, #30
   294c4:	2100      	movs	r1, #0
   294c6:	a802      	add	r0, sp, #8
   294c8:	f018 f89b 	bl	41602 <memset>
	enum location_method methods[] = {
   294cc:	4b17      	ldr	r3, [pc, #92]	; (2952c <location_request+0x70>)
   294ce:	881b      	ldrh	r3, [r3, #0]
   294d0:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (!initialized) {
   294d4:	4b16      	ldr	r3, [pc, #88]	; (29530 <location_request+0x74>)
   294d6:	781b      	ldrb	r3, [r3, #0]
   294d8:	b94b      	cbnz	r3, 294ee <location_request+0x32>
		LOG_ERR("Location library not initialized when calling %s", __func__);
   294da:	2145      	movs	r1, #69	; 0x45
   294dc:	4a15      	ldr	r2, [pc, #84]	; (29534 <location_request+0x78>)
   294de:	4816      	ldr	r0, [pc, #88]	; (29538 <location_request+0x7c>)
   294e0:	f013 fbf5 	bl	3ccce <z_log_minimal_printk>
		return -EPERM;
   294e4:	f04f 35ff 	mov.w	r5, #4294967295
}
   294e8:	4628      	mov	r0, r5
   294ea:	b00b      	add	sp, #44	; 0x2c
   294ec:	bd30      	pop	{r4, r5, pc}
	if (config == NULL || config->methods_count == 0) {
   294ee:	b10c      	cbz	r4, 294f4 <location_request+0x38>
   294f0:	7823      	ldrb	r3, [r4, #0]
   294f2:	b94b      	cbnz	r3, 29508 <location_request+0x4c>
		location_config_defaults_set(&default_config, ARRAY_SIZE(methods), methods);
   294f4:	2102      	movs	r1, #2
   294f6:	aa01      	add	r2, sp, #4
   294f8:	a802      	add	r0, sp, #8
   294fa:	f7ff ffab 	bl	29454 <location_config_defaults_set>
		if (config != NULL) {
   294fe:	b114      	cbz	r4, 29506 <location_request+0x4a>
			default_config.interval = config->interval;
   29500:	8b63      	ldrh	r3, [r4, #26]
   29502:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		config = &default_config;
   29506:	ac02      	add	r4, sp, #8
	location_core_config_log(config);
   29508:	4620      	mov	r0, r4
   2950a:	f016 f93b 	bl	3f784 <location_core_config_log>
	err = location_core_validate_params(config);
   2950e:	4620      	mov	r0, r4
   29510:	f000 f8b6 	bl	29680 <location_core_validate_params>
	if (err) {
   29514:	4605      	mov	r5, r0
   29516:	b120      	cbz	r0, 29522 <location_request+0x66>
		LOG_ERR("Invalid parameters given.");
   29518:	2145      	movs	r1, #69	; 0x45
   2951a:	4808      	ldr	r0, [pc, #32]	; (2953c <location_request+0x80>)
   2951c:	f013 fbd7 	bl	3ccce <z_log_minimal_printk>
		return err;
   29520:	e7e2      	b.n	294e8 <location_request+0x2c>
	err = location_core_location_get(config);
   29522:	4620      	mov	r0, r4
   29524:	f000 f8ea 	bl	296fc <location_core_location_get>
   29528:	4605      	mov	r5, r0
	return err;
   2952a:	e7dd      	b.n	294e8 <location_request+0x2c>
   2952c:	00042a32 	.word	0x00042a32
   29530:	2001c905 	.word	0x2001c905
   29534:	00047585 	.word	0x00047585
   29538:	0004750c 	.word	0x0004750c
   2953c:	00047566 	.word	0x00047566

00029540 <location_method_api_get>:
static const struct location_method_api *location_method_api_get(enum location_method method)
{
	const struct location_method_api *method_api = NULL;

	for (int i = 0; methods_supported[i] != NULL; i++) {
		if (method == methods_supported[i]->method) {
   29540:	2802      	cmp	r0, #2
   29542:	d004      	beq.n	2954e <location_method_api_get+0xe>
	const struct location_method_api *method_api = NULL;
   29544:	2801      	cmp	r0, #1
   29546:	4803      	ldr	r0, [pc, #12]	; (29554 <location_method_api_get+0x14>)
   29548:	bf18      	it	ne
   2954a:	2000      	movne	r0, #0
   2954c:	4770      	bx	lr
	for (int i = 0; methods_supported[i] != NULL; i++) {
   2954e:	4802      	ldr	r0, [pc, #8]	; (29558 <location_method_api_get+0x18>)
			break;
		}
	}

	return method_api;
}
   29550:	4770      	bx	lr
   29552:	bf00      	nop
   29554:	00043084 	.word	0x00043084
   29558:	000430a0 	.word	0x000430a0

0002955c <location_core_current_config_clear>:
	memset(&current_config, 0, sizeof(current_config));
   2955c:	221e      	movs	r2, #30
   2955e:	2100      	movs	r1, #0
   29560:	4801      	ldr	r0, [pc, #4]	; (29568 <location_core_current_config_clear+0xc>)
   29562:	f018 b84e 	b.w	41602 <memset>
   29566:	bf00      	nop
   29568:	2001a56c 	.word	0x2001a56c

0002956c <location_core_current_event_data_init>:
	memset(&current_event_data, 0, sizeof(current_event_data));
   2956c:	4b04      	ldr	r3, [pc, #16]	; (29580 <location_core_current_event_data_init+0x14>)
{
   2956e:	b510      	push	{r4, lr}
	memset(&current_event_data, 0, sizeof(current_event_data));
   29570:	2230      	movs	r2, #48	; 0x30
{
   29572:	4604      	mov	r4, r0
	memset(&current_event_data, 0, sizeof(current_event_data));
   29574:	2100      	movs	r1, #0
   29576:	4618      	mov	r0, r3
   29578:	f018 f843 	bl	41602 <memset>
	current_event_data.location.method = method;
   2957c:	7204      	strb	r4, [r0, #8]
}
   2957e:	bd10      	pop	{r4, pc}
   29580:	200155f8 	.word	0x200155f8

00029584 <location_core_location_get_pos>:

	memcpy(&current_config, config, sizeof(struct location_config));
}

static int location_core_location_get_pos(const struct location_config *config)
{
   29584:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(config->methods_count <= CONFIG_LOCATION_METHODS_LIST_SIZE);
   29586:	7803      	ldrb	r3, [r0, #0]
{
   29588:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(config->methods_count <= CONFIG_LOCATION_METHODS_LIST_SIZE);
   2958a:	2b03      	cmp	r3, #3
   2958c:	d90a      	bls.n	295a4 <location_core_location_get_pos+0x20>
   2958e:	4916      	ldr	r1, [pc, #88]	; (295e8 <location_core_location_get_pos+0x64>)
   29590:	4816      	ldr	r0, [pc, #88]	; (295ec <location_core_location_get_pos+0x68>)
   29592:	f240 1231 	movw	r2, #305	; 0x131
   29596:	f013 fb60 	bl	3cc5a <assert_print>
   2959a:	f240 1131 	movw	r1, #305	; 0x131
   2959e:	4812      	ldr	r0, [pc, #72]	; (295e8 <location_core_location_get_pos+0x64>)
   295a0:	f013 fb54 	bl	3cc4c <assert_post_action>
	if (config == &current_config) {
   295a4:	4d12      	ldr	r5, [pc, #72]	; (295f0 <location_core_location_get_pos+0x6c>)
   295a6:	42ac      	cmp	r4, r5
   295a8:	d00d      	beq.n	295c6 <location_core_location_get_pos+0x42>
	location_core_current_config_clear();
   295aa:	f7ff ffd7 	bl	2955c <location_core_current_config_clear>
	memcpy(&current_config, config, sizeof(struct location_config));
   295ae:	4622      	mov	r2, r4
   295b0:	462b      	mov	r3, r5
   295b2:	f104 011c 	add.w	r1, r4, #28
   295b6:	f852 0b04 	ldr.w	r0, [r2], #4
   295ba:	428a      	cmp	r2, r1
   295bc:	f843 0b04 	str.w	r0, [r3], #4
   295c0:	d1f9      	bne.n	295b6 <location_core_location_get_pos+0x32>
   295c2:	8812      	ldrh	r2, [r2, #0]
   295c4:	801a      	strh	r2, [r3, #0]
	int err;
	enum location_method requested_method;

	location_core_current_config_set(config);
	/* Location request starts from the first method */
	current_method_index = 0;
   295c6:	2200      	movs	r2, #0
	requested_method = config->methods[current_method_index].method;
   295c8:	f814 0f02 	ldrb.w	r0, [r4, #2]!
	current_method_index = 0;
   295cc:	4b09      	ldr	r3, [pc, #36]	; (295f4 <location_core_location_get_pos+0x70>)
	LOG_DBG("Requesting location with '%s' method",
		(char *)location_method_api_get(requested_method)->method_string);
	location_core_current_event_data_init(requested_method);
   295ce:	9001      	str	r0, [sp, #4]
	current_method_index = 0;
   295d0:	601a      	str	r2, [r3, #0]
	location_core_current_event_data_init(requested_method);
   295d2:	f7ff ffcb 	bl	2956c <location_core_current_event_data_init>
	err = location_method_api_get(requested_method)->location_get(
   295d6:	9801      	ldr	r0, [sp, #4]
   295d8:	f7ff ffb2 	bl	29540 <location_method_api_get>
   295dc:	6943      	ldr	r3, [r0, #20]
   295de:	4620      	mov	r0, r4
		&config->methods[current_method_index]);

	return err;
}
   295e0:	b003      	add	sp, #12
   295e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = location_method_api_get(requested_method)->location_get(
   295e6:	4718      	bx	r3
   295e8:	00047596 	.word	0x00047596
   295ec:	00044263 	.word	0x00044263
   295f0:	2001a56c 	.word	0x2001a56c
   295f4:	20019434 	.word	0x20019434

000295f8 <location_core_periodic_work_fn>:
}

static void location_core_periodic_work_fn(struct k_work *work)
{
	ARG_UNUSED(work);
	location_core_location_get_pos(&current_config);
   295f8:	4801      	ldr	r0, [pc, #4]	; (29600 <location_core_periodic_work_fn+0x8>)
   295fa:	f7ff bfc3 	b.w	29584 <location_core_location_get_pos>
   295fe:	bf00      	nop
   29600:	2001a56c 	.word	0x2001a56c

00029604 <location_core_event_handler_set>:
{
   29604:	b508      	push	{r3, lr}
	if (handler == NULL) {
   29606:	b930      	cbnz	r0, 29616 <location_core_event_handler_set+0x12>
		LOG_ERR("No event handler given");
   29608:	4805      	ldr	r0, [pc, #20]	; (29620 <location_core_event_handler_set+0x1c>)
   2960a:	2145      	movs	r1, #69	; 0x45
   2960c:	f013 fb5f 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   29610:	f06f 0015 	mvn.w	r0, #21
}
   29614:	bd08      	pop	{r3, pc}
	event_handler = handler;
   29616:	4b03      	ldr	r3, [pc, #12]	; (29624 <location_core_event_handler_set+0x20>)
   29618:	6018      	str	r0, [r3, #0]
	return 0;
   2961a:	2000      	movs	r0, #0
   2961c:	e7fa      	b.n	29614 <location_core_event_handler_set+0x10>
   2961e:	bf00      	nop
   29620:	000475c3 	.word	0x000475c3
   29624:	20019438 	.word	0x20019438

00029628 <location_core_init>:
{
   29628:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_work_queue_config cfg = {
   2962a:	2300      	movs	r3, #0
   2962c:	9303      	str	r3, [sp, #12]
   2962e:	4b0f      	ldr	r3, [pc, #60]	; (2966c <location_core_init+0x44>)
	k_work_queue_start(
   29630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	struct k_work_queue_config cfg = {
   29634:	9302      	str	r3, [sp, #8]
	k_work_queue_start(
   29636:	ab02      	add	r3, sp, #8
   29638:	9300      	str	r3, [sp, #0]
   2963a:	490d      	ldr	r1, [pc, #52]	; (29670 <location_core_init+0x48>)
   2963c:	2305      	movs	r3, #5
   2963e:	480d      	ldr	r0, [pc, #52]	; (29674 <location_core_init+0x4c>)
   29640:	f00d ff9a 	bl	37578 <k_work_queue_start>
	for (int i = 0; methods_supported[i] != NULL; i++) {
   29644:	4e0c      	ldr	r6, [pc, #48]	; (29678 <location_core_init+0x50>)
   29646:	f856 5b04 	ldr.w	r5, [r6], #4
   2964a:	b90d      	cbnz	r5, 29650 <location_core_init+0x28>
	return 0;
   2964c:	462c      	mov	r4, r5
   2964e:	e009      	b.n	29664 <location_core_init+0x3c>
		err = methods_supported[i]->init();
   29650:	68eb      	ldr	r3, [r5, #12]
   29652:	4798      	blx	r3
		if (err) {
   29654:	4604      	mov	r4, r0
   29656:	2800      	cmp	r0, #0
   29658:	d0f5      	beq.n	29646 <location_core_init+0x1e>
			LOG_ERR("Failed to initialize '%s' method",
   2965a:	2145      	movs	r1, #69	; 0x45
   2965c:	4807      	ldr	r0, [pc, #28]	; (2967c <location_core_init+0x54>)
   2965e:	1c6a      	adds	r2, r5, #1
   29660:	f013 fb35 	bl	3ccce <z_log_minimal_printk>
}
   29664:	4620      	mov	r0, r4
   29666:	b004      	add	sp, #16
   29668:	bd70      	pop	{r4, r5, r6, pc}
   2966a:	bf00      	nop
   2966c:	000475df 	.word	0x000475df
   29670:	2001fa00 	.word	0x2001fa00
   29674:	20015628 	.word	0x20015628
   29678:	000430bc 	.word	0x000430bc
   2967c:	000475f2 	.word	0x000475f2

00029680 <location_core_validate_params>:
{
   29680:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(config != NULL);
   29682:	4604      	mov	r4, r0
   29684:	b940      	cbnz	r0, 29698 <location_core_validate_params+0x18>
   29686:	4918      	ldr	r1, [pc, #96]	; (296e8 <location_core_validate_params+0x68>)
   29688:	4818      	ldr	r0, [pc, #96]	; (296ec <location_core_validate_params+0x6c>)
   2968a:	22ea      	movs	r2, #234	; 0xea
   2968c:	f013 fae5 	bl	3cc5a <assert_print>
   29690:	21ea      	movs	r1, #234	; 0xea
   29692:	4815      	ldr	r0, [pc, #84]	; (296e8 <location_core_validate_params+0x68>)
   29694:	f013 fada 	bl	3cc4c <assert_post_action>
	if (config->methods_count > CONFIG_LOCATION_METHODS_LIST_SIZE) {
   29698:	7823      	ldrb	r3, [r4, #0]
   2969a:	2b03      	cmp	r3, #3
   2969c:	d907      	bls.n	296ae <location_core_validate_params+0x2e>
		LOG_ERR("Maximum number of methods (%d) exceeded: %d",
   2969e:	2203      	movs	r2, #3
   296a0:	2145      	movs	r1, #69	; 0x45
   296a2:	4813      	ldr	r0, [pc, #76]	; (296f0 <location_core_validate_params+0x70>)
   296a4:	f013 fb13 	bl	3ccce <z_log_minimal_printk>
			return -EINVAL;
   296a8:	f06f 0015 	mvn.w	r0, #21
}
   296ac:	bd10      	pop	{r4, pc}
	if ((config->interval > 0) && (config->interval < 10)) {
   296ae:	8b62      	ldrh	r2, [r4, #26]
   296b0:	3a01      	subs	r2, #1
   296b2:	b292      	uxth	r2, r2
   296b4:	2a08      	cmp	r2, #8
   296b6:	d814      	bhi.n	296e2 <location_core_validate_params+0x62>
		LOG_ERR("Interval for periodic location updates must be longer than 10 seconds");
   296b8:	2145      	movs	r1, #69	; 0x45
   296ba:	480e      	ldr	r0, [pc, #56]	; (296f4 <location_core_validate_params+0x74>)
   296bc:	f013 fb07 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   296c0:	e7f2      	b.n	296a8 <location_core_validate_params+0x28>
		method_api = location_method_api_get(config->methods[i].method);
   296c2:	f814 2031 	ldrb.w	r2, [r4, r1, lsl #3]
   296c6:	4610      	mov	r0, r2
   296c8:	f7ff ff3a 	bl	29540 <location_method_api_get>
		if (method_api == NULL) {
   296cc:	b920      	cbnz	r0, 296d8 <location_core_validate_params+0x58>
			LOG_ERR("Location method (%d) not supported", config->methods[i].method);
   296ce:	2145      	movs	r1, #69	; 0x45
   296d0:	4809      	ldr	r0, [pc, #36]	; (296f8 <location_core_validate_params+0x78>)
   296d2:	f013 fafc 	bl	3ccce <z_log_minimal_printk>
   296d6:	e7e7      	b.n	296a8 <location_core_validate_params+0x28>
	for (int i = 0; i < config->methods_count; i++) {
   296d8:	3101      	adds	r1, #1
   296da:	4299      	cmp	r1, r3
   296dc:	dbf1      	blt.n	296c2 <location_core_validate_params+0x42>
	return 0;
   296de:	2000      	movs	r0, #0
   296e0:	e7e4      	b.n	296ac <location_core_validate_params+0x2c>
	for (int i = 0; i < config->methods_count; i++) {
   296e2:	2100      	movs	r1, #0
		method_api = location_method_api_get(config->methods[i].method);
   296e4:	3402      	adds	r4, #2
   296e6:	e7f8      	b.n	296da <location_core_validate_params+0x5a>
   296e8:	00047596 	.word	0x00047596
   296ec:	00044263 	.word	0x00044263
   296f0:	00047618 	.word	0x00047618
   296f4:	00047649 	.word	0x00047649
   296f8:	00047694 	.word	0x00047694

000296fc <location_core_location_get>:
{
   296fc:	b510      	push	{r4, lr}
   296fe:	4604      	mov	r4, r0
   29700:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   29704:	2300      	movs	r3, #0
   29706:	4808      	ldr	r0, [pc, #32]	; (29728 <location_core_location_get+0x2c>)
   29708:	f00d fbfe 	bl	36f08 <z_impl_k_sem_take>
	if (err) {
   2970c:	b920      	cbnz	r0, 29718 <location_core_location_get+0x1c>
	return location_core_location_get_pos(config);
   2970e:	4620      	mov	r0, r4
}
   29710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return location_core_location_get_pos(config);
   29714:	f7ff bf36 	b.w	29584 <location_core_location_get_pos>
		LOG_ERR("Location request already ongoing");
   29718:	2145      	movs	r1, #69	; 0x45
   2971a:	4804      	ldr	r0, [pc, #16]	; (2972c <location_core_location_get+0x30>)
   2971c:	f013 fad7 	bl	3ccce <z_log_minimal_printk>
}
   29720:	f06f 000f 	mvn.w	r0, #15
   29724:	bd10      	pop	{r4, pc}
   29726:	bf00      	nop
   29728:	20015078 	.word	0x20015078
   2972c:	000476bc 	.word	0x000476bc

00029730 <location_core_event_cb>:
{
   29730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29734:	4604      	mov	r4, r0
   29736:	b08c      	sub	sp, #48	; 0x30
	k_work_cancel_delayable(&location_timeout_work);
   29738:	485c      	ldr	r0, [pc, #368]	; (298ac <location_core_event_cb+0x17c>)
   2973a:	f00e f883 	bl	37844 <k_work_cancel_delayable>
	if (location != NULL) {
   2973e:	4f5c      	ldr	r7, [pc, #368]	; (298b0 <location_core_event_cb+0x180>)
   29740:	4e5c      	ldr	r6, [pc, #368]	; (298b4 <location_core_event_cb+0x184>)
   29742:	2c00      	cmp	r4, #0
   29744:	d07a      	beq.n	2983c <location_core_event_cb+0x10c>
		current_event_data.id = LOCATION_EVT_LOCATION;
   29746:	463d      	mov	r5, r7
   29748:	2301      	movs	r3, #1
   2974a:	f805 3b08 	strb.w	r3, [r5], #8
		current_event_data.location = *location;
   2974e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   29750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   29752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   29754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
		sprintf(latitude_str, "%.06f", current_event_data.location.latitude);
   29756:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
		current_event_data.location = *location;
   2975a:	e894 0003 	ldmia.w	r4, {r0, r1}
   2975e:	e885 0003 	stmia.w	r5, {r0, r1}
		sprintf(latitude_str, "%.06f", current_event_data.location.latitude);
   29762:	e9cd 2300 	strd	r2, r3, [sp]
   29766:	220c      	movs	r2, #12
   29768:	2100      	movs	r1, #0
   2976a:	4b53      	ldr	r3, [pc, #332]	; (298b8 <location_core_event_cb+0x188>)
   2976c:	eb0d 0002 	add.w	r0, sp, r2
   29770:	f018 f897 	bl	418a2 <__sprintf_chk>
		sprintf(longitude_str, "%.06f", current_event_data.location.longitude);
   29774:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   29778:	2100      	movs	r1, #0
   2977a:	e9cd 2300 	strd	r2, r3, [sp]
   2977e:	a806      	add	r0, sp, #24
   29780:	220c      	movs	r2, #12
   29782:	4b4d      	ldr	r3, [pc, #308]	; (298b8 <location_core_event_cb+0x188>)
   29784:	f018 f88d 	bl	418a2 <__sprintf_chk>
		sprintf(accuracy_str, "%.01f", current_event_data.location.accuracy);
   29788:	6a38      	ldr	r0, [r7, #32]
   2978a:	f7f2 ffbd 	bl	1c708 <__aeabi_f2d>
   2978e:	4b4b      	ldr	r3, [pc, #300]	; (298bc <location_core_event_cb+0x18c>)
   29790:	e9cd 0100 	strd	r0, r1, [sp]
   29794:	220c      	movs	r2, #12
   29796:	2100      	movs	r1, #0
   29798:	a809      	add	r0, sp, #36	; 0x24
   2979a:	f018 f882 	bl	418a2 <__sprintf_chk>
		if (current_config.mode == LOCATION_REQ_MODE_ALL) {
   2979e:	7f33      	ldrb	r3, [r6, #28]
   297a0:	2b01      	cmp	r3, #1
   297a2:	d12e      	bne.n	29802 <location_core_event_cb+0xd2>
			current_method_index++;
   297a4:	4c46      	ldr	r4, [pc, #280]	; (298c0 <location_core_event_cb+0x190>)
			if (current_method_index < current_config.methods_count) {
   297a6:	7832      	ldrb	r2, [r6, #0]
			current_method_index++;
   297a8:	6823      	ldr	r3, [r4, #0]
			previous_method = current_event_data.location.method;
   297aa:	7a38      	ldrb	r0, [r7, #8]
			current_method_index++;
   297ac:	3301      	adds	r3, #1
			if (current_method_index < current_config.methods_count) {
   297ae:	4293      	cmp	r3, r2
			current_method_index++;
   297b0:	6023      	str	r3, [r4, #0]
			if (current_method_index < current_config.methods_count) {
   297b2:	da20      	bge.n	297f6 <location_core_event_cb+0xc6>
				LOG_INF("LOCATION_REQ_MODE_ALL: acquired location using '%s', "
   297b4:	f7ff fec4 	bl	29540 <location_method_api_get>
				requested_method =
   297b8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   297bc:	f893 8002 	ldrb.w	r8, [r3, #2]
				LOG_INF("LOCATION_REQ_MODE_ALL: acquired location using '%s', "
   297c0:	4602      	mov	r2, r0
   297c2:	4640      	mov	r0, r8
   297c4:	f7ff febc 	bl	29540 <location_method_api_get>
   297c8:	4605      	mov	r5, r0
   297ca:	2149      	movs	r1, #73	; 0x49
   297cc:	1c43      	adds	r3, r0, #1
   297ce:	3201      	adds	r2, #1
   297d0:	483c      	ldr	r0, [pc, #240]	; (298c4 <location_core_event_cb+0x194>)
   297d2:	f013 fa7c 	bl	3ccce <z_log_minimal_printk>
				event_handler(&current_event_data);
   297d6:	4b3c      	ldr	r3, [pc, #240]	; (298c8 <location_core_event_cb+0x198>)
   297d8:	4638      	mov	r0, r7
   297da:	681b      	ldr	r3, [r3, #0]
   297dc:	4798      	blx	r3
				location_core_current_event_data_init(requested_method);
   297de:	4640      	mov	r0, r8
   297e0:	f7ff fec4 	bl	2956c <location_core_current_event_data_init>
					&current_config.methods[current_method_index]);
   297e4:	6820      	ldr	r0, [r4, #0]
				err = location_method_api_get(requested_method)->location_get(
   297e6:	696b      	ldr	r3, [r5, #20]
					&current_config.methods[current_method_index]);
   297e8:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
				err = location_method_api_get(requested_method)->location_get(
   297ec:	3002      	adds	r0, #2
   297ee:	4798      	blx	r3
}
   297f0:	b00c      	add	sp, #48	; 0x30
   297f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_INF("LOCATION_REQ_MODE_ALL: all methods done");
   297f6:	2149      	movs	r1, #73	; 0x49
   297f8:	4834      	ldr	r0, [pc, #208]	; (298cc <location_core_event_cb+0x19c>)
   297fa:	f013 fa68 	bl	3ccce <z_log_minimal_printk>
			current_method_index = 0;
   297fe:	2300      	movs	r3, #0
   29800:	6023      	str	r3, [r4, #0]
	event_handler(&current_event_data);
   29802:	4b31      	ldr	r3, [pc, #196]	; (298c8 <location_core_event_cb+0x198>)
   29804:	482a      	ldr	r0, [pc, #168]	; (298b0 <location_core_event_cb+0x180>)
   29806:	681b      	ldr	r3, [r3, #0]
   29808:	4798      	blx	r3
	if (current_config.interval > 0) {
   2980a:	8b74      	ldrh	r4, [r6, #26]
   2980c:	2c00      	cmp	r4, #0
   2980e:	d046      	beq.n	2989e <location_core_event_cb+0x16e>
			K_SECONDS(current_config.interval));
   29810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   29814:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   29818:	f240 30e7 	movw	r0, #999	; 0x3e7
   2981c:	2100      	movs	r1, #0
   2981e:	435c      	muls	r4, r3
   29820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29824:	2300      	movs	r3, #0
   29826:	fbe4 0105 	umlal	r0, r1, r4, r5
   2982a:	f7f3 fb5d 	bl	1cee8 <__aeabi_uldivmod>
   2982e:	4602      	mov	r2, r0
   29830:	460b      	mov	r3, r1
		k_work_schedule_for_queue(
   29832:	4827      	ldr	r0, [pc, #156]	; (298d0 <location_core_event_cb+0x1a0>)
   29834:	4927      	ldr	r1, [pc, #156]	; (298d4 <location_core_event_cb+0x1a4>)
   29836:	f00d ff33 	bl	376a0 <k_work_schedule_for_queue>
   2983a:	e7d9      	b.n	297f0 <location_core_event_cb+0xc0>
		current_method_index++;
   2983c:	4d20      	ldr	r5, [pc, #128]	; (298c0 <location_core_event_cb+0x190>)
		if (current_method_index < current_config.methods_count) {
   2983e:	7832      	ldrb	r2, [r6, #0]
		current_method_index++;
   29840:	682b      	ldr	r3, [r5, #0]
		previous_method = current_event_data.location.method;
   29842:	7a38      	ldrb	r0, [r7, #8]
		current_method_index++;
   29844:	3301      	adds	r3, #1
		if (current_method_index < current_config.methods_count) {
   29846:	4293      	cmp	r3, r2
		current_method_index++;
   29848:	602b      	str	r3, [r5, #0]
		if (current_method_index < current_config.methods_count) {
   2984a:	da23      	bge.n	29894 <location_core_event_cb+0x164>
			LOG_WRN("Failed to acquire location using '%s', "
   2984c:	f7ff fe78 	bl	29540 <location_method_api_get>
			requested_method = current_config.methods[current_method_index].method;
   29850:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   29854:	f893 8002 	ldrb.w	r8, [r3, #2]
			LOG_WRN("Failed to acquire location using '%s', "
   29858:	4602      	mov	r2, r0
   2985a:	4640      	mov	r0, r8
   2985c:	f7ff fe70 	bl	29540 <location_method_api_get>
   29860:	2157      	movs	r1, #87	; 0x57
   29862:	1c43      	adds	r3, r0, #1
   29864:	4604      	mov	r4, r0
   29866:	3201      	adds	r2, #1
   29868:	481b      	ldr	r0, [pc, #108]	; (298d8 <location_core_event_cb+0x1a8>)
   2986a:	f013 fa30 	bl	3ccce <z_log_minimal_printk>
			if (current_config.mode == LOCATION_REQ_MODE_ALL) {
   2986e:	7f33      	ldrb	r3, [r6, #28]
   29870:	2b01      	cmp	r3, #1
   29872:	d103      	bne.n	2987c <location_core_event_cb+0x14c>
				event_handler(&current_event_data);
   29874:	4b14      	ldr	r3, [pc, #80]	; (298c8 <location_core_event_cb+0x198>)
   29876:	4638      	mov	r0, r7
   29878:	681b      	ldr	r3, [r3, #0]
   2987a:	4798      	blx	r3
			location_core_current_event_data_init(requested_method);
   2987c:	4640      	mov	r0, r8
   2987e:	f7ff fe75 	bl	2956c <location_core_current_event_data_init>
				&current_config.methods[current_method_index]);
   29882:	6828      	ldr	r0, [r5, #0]
			err = location_method_api_get(requested_method)->location_get(
   29884:	6963      	ldr	r3, [r4, #20]
				&current_config.methods[current_method_index]);
   29886:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
			err = location_method_api_get(requested_method)->location_get(
   2988a:	3002      	adds	r0, #2
}
   2988c:	b00c      	add	sp, #48	; 0x30
   2988e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			err = location_method_api_get(requested_method)->location_get(
   29892:	4718      	bx	r3
		LOG_ERR("Location acquisition failed and fallbacks are also done");
   29894:	2145      	movs	r1, #69	; 0x45
   29896:	4811      	ldr	r0, [pc, #68]	; (298dc <location_core_event_cb+0x1ac>)
   29898:	f013 fa19 	bl	3ccce <z_log_minimal_printk>
   2989c:	e7b1      	b.n	29802 <location_core_event_cb+0xd2>
		location_core_current_config_clear();
   2989e:	f7ff fe5d 	bl	2955c <location_core_current_config_clear>
	z_impl_k_sem_give(sem);
   298a2:	480f      	ldr	r0, [pc, #60]	; (298e0 <location_core_event_cb+0x1b0>)
   298a4:	f00d faf4 	bl	36e90 <z_impl_k_sem_give>
}
   298a8:	e7a2      	b.n	297f0 <location_core_event_cb+0xc0>
   298aa:	bf00      	nop
   298ac:	20014560 	.word	0x20014560
   298b0:	200155f8 	.word	0x200155f8
   298b4:	2001a56c 	.word	0x2001a56c
   298b8:	000476e2 	.word	0x000476e2
   298bc:	000476e8 	.word	0x000476e8
   298c0:	20019434 	.word	0x20019434
   298c4:	000476ee 	.word	0x000476ee
   298c8:	20019438 	.word	0x20019438
   298cc:	0004773e 	.word	0x0004773e
   298d0:	20015628 	.word	0x20015628
   298d4:	20014530 	.word	0x20014530
   298d8:	0004776b 	.word	0x0004776b
   298dc:	000477ad 	.word	0x000477ad
   298e0:	20015078 	.word	0x20015078

000298e4 <location_core_event_cb_error>:
	current_event_data.id = LOCATION_EVT_ERROR;
   298e4:	2203      	movs	r2, #3
   298e6:	4b02      	ldr	r3, [pc, #8]	; (298f0 <location_core_event_cb_error+0xc>)
	location_core_event_cb(NULL);
   298e8:	2000      	movs	r0, #0
	current_event_data.id = LOCATION_EVT_ERROR;
   298ea:	701a      	strb	r2, [r3, #0]
	location_core_event_cb(NULL);
   298ec:	f7ff bf20 	b.w	29730 <location_core_event_cb>
   298f0:	200155f8 	.word	0x200155f8

000298f4 <location_core_event_cb_timeout>:
	current_event_data.id = LOCATION_EVT_TIMEOUT;
   298f4:	2202      	movs	r2, #2
   298f6:	4b02      	ldr	r3, [pc, #8]	; (29900 <location_core_event_cb_timeout+0xc>)
	location_core_event_cb(NULL);
   298f8:	2000      	movs	r0, #0
	current_event_data.id = LOCATION_EVT_TIMEOUT;
   298fa:	701a      	strb	r2, [r3, #0]
	location_core_event_cb(NULL);
   298fc:	f7ff bf18 	b.w	29730 <location_core_event_cb>
   29900:	200155f8 	.word	0x200155f8

00029904 <location_core_timeout_work_fn>:
}

static void location_core_timeout_work_fn(struct k_work *work)
{
   29904:	b510      	push	{r4, lr}
	enum location_method current_method =
		current_config.methods[current_method_index].method;
   29906:	4b09      	ldr	r3, [pc, #36]	; (2992c <location_core_timeout_work_fn+0x28>)

	ARG_UNUSED(work);

	LOG_WRN("Timeout occurred");
   29908:	2157      	movs	r1, #87	; 0x57
	enum location_method current_method =
   2990a:	681a      	ldr	r2, [r3, #0]
   2990c:	4b08      	ldr	r3, [pc, #32]	; (29930 <location_core_timeout_work_fn+0x2c>)
	LOG_WRN("Timeout occurred");
   2990e:	4809      	ldr	r0, [pc, #36]	; (29934 <location_core_timeout_work_fn+0x30>)
	enum location_method current_method =
   29910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   29914:	789c      	ldrb	r4, [r3, #2]
	LOG_WRN("Timeout occurred");
   29916:	f013 f9da 	bl	3ccce <z_log_minimal_printk>

	location_method_api_get(current_method)->cancel();
   2991a:	4620      	mov	r0, r4
   2991c:	f7ff fe10 	bl	29540 <location_method_api_get>
   29920:	6983      	ldr	r3, [r0, #24]
   29922:	4798      	blx	r3
	location_core_event_cb_timeout();
}
   29924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	location_core_event_cb_timeout();
   29928:	f7ff bfe4 	b.w	298f4 <location_core_event_cb_timeout>
   2992c:	20019434 	.word	0x20019434
   29930:	2001a56c 	.word	0x2001a56c
   29934:	000477ea 	.word	0x000477ea

00029938 <location_core_work_queue_get>:
}
   29938:	4800      	ldr	r0, [pc, #0]	; (2993c <location_core_work_queue_get+0x4>)
   2993a:	4770      	bx	lr
   2993c:	20015628 	.word	0x20015628

00029940 <location_core_timer_start>:

void location_core_timer_start(uint16_t timeout)
{
   29940:	b570      	push	{r4, r5, r6, lr}
	if (timeout > 0) {
   29942:	b1a8      	cbz	r0, 29970 <location_core_timer_start+0x30>
		 * their operation, blocking waiting of semaphores will block the timeout from
		 * expiring and canceling methods.
		 */
		k_work_schedule(
			&location_timeout_work,
			K_SECONDS(timeout));
   29944:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   29948:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   2994c:	4344      	muls	r4, r0
   2994e:	2100      	movs	r1, #0
   29950:	f240 30e7 	movw	r0, #999	; 0x3e7
   29954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29958:	2300      	movs	r3, #0
   2995a:	fbe4 0105 	umlal	r0, r1, r4, r5
   2995e:	f7f3 fac3 	bl	1cee8 <__aeabi_uldivmod>
	}
}
   29962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29966:	4602      	mov	r2, r0
   29968:	460b      	mov	r3, r1
		k_work_schedule(
   2996a:	4802      	ldr	r0, [pc, #8]	; (29974 <location_core_timer_start+0x34>)
   2996c:	f00d befc 	b.w	37768 <k_work_schedule>
}
   29970:	bd70      	pop	{r4, r5, r6, pc}
   29972:	bf00      	nop
   29974:	20014560 	.word	0x20014560

00029978 <location_utils_modem_params_read>:
	}
	return is_active;
}

int location_utils_modem_params_read(struct location_utils_modem_params_info *modem_params)
{
   29978:	b530      	push	{r4, r5, lr}
	/* Parsed strings include double quotes */
	char plmn_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   2997a:	2400      	movs	r4, #0
{
   2997c:	4605      	mov	r5, r0
   2997e:	b093      	sub	sp, #76	; 0x4c
	char plmn_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29980:	220d      	movs	r2, #13
   29982:	4621      	mov	r1, r4
   29984:	a804      	add	r0, sp, #16
   29986:	9403      	str	r4, [sp, #12]
   29988:	f017 fe3b 	bl	41602 <memset>
	char tac_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   2998c:	220d      	movs	r2, #13
   2998e:	4621      	mov	r1, r4
   29990:	a809      	add	r0, sp, #36	; 0x24
   29992:	9408      	str	r4, [sp, #32]
   29994:	f017 fe35 	bl	41602 <memset>
	char cell_id_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29998:	220d      	movs	r2, #13
   2999a:	4621      	mov	r1, r4
   2999c:	a80e      	add	r0, sp, #56	; 0x38
   2999e:	940d      	str	r4, [sp, #52]	; 0x34
   299a0:	f017 fe2f 	bl	41602 <memset>
	int err = 0;

	__ASSERT_NO_MSG(modem_params != NULL);
   299a4:	b945      	cbnz	r5, 299b8 <location_utils_modem_params_read+0x40>
   299a6:	491f      	ldr	r1, [pc, #124]	; (29a24 <location_utils_modem_params_read+0xac>)
   299a8:	481f      	ldr	r0, [pc, #124]	; (29a28 <location_utils_modem_params_read+0xb0>)
   299aa:	223f      	movs	r2, #63	; 0x3f
   299ac:	f013 f955 	bl	3cc5a <assert_print>
   299b0:	213f      	movs	r1, #63	; 0x3f
   299b2:	481c      	ldr	r0, [pc, #112]	; (29a24 <location_utils_modem_params_read+0xac>)
   299b4:	f013 f94a 	bl	3cc4c <assert_post_action>

	err = nrf_modem_at_scanf(
   299b8:	f105 0310 	add.w	r3, r5, #16
   299bc:	9301      	str	r3, [sp, #4]
   299be:	ab0d      	add	r3, sp, #52	; 0x34
   299c0:	9300      	str	r3, [sp, #0]
   299c2:	491a      	ldr	r1, [pc, #104]	; (29a2c <location_utils_modem_params_read+0xb4>)
   299c4:	481a      	ldr	r0, [pc, #104]	; (29a30 <location_utils_modem_params_read+0xb8>)
   299c6:	ab08      	add	r3, sp, #32
   299c8:	aa03      	add	r2, sp, #12
   299ca:	f00b fc4b 	bl	35264 <nrf_modem_at_scanf>
		",%*d"                                /* <band>: ignored */
		",%"L(MODEM_PARAM_STR_MAX_LEN)"[^,]"  /* <cell_id> */
		",%d",                                /* <phys_cell_id> */
		plmn_str, tac_str, cell_id_str, &modem_params->phys_cell_id);

	if (err <= 2) {
   299ce:	2802      	cmp	r0, #2
	err = nrf_modem_at_scanf(
   299d0:	4604      	mov	r4, r0
	if (err <= 2) {
   299d2:	dc07      	bgt.n	299e4 <location_utils_modem_params_read+0x6c>
		LOG_ERR("Cannot get modem parameters, err %d", err);
   299d4:	4602      	mov	r2, r0
   299d6:	2145      	movs	r1, #69	; 0x45
   299d8:	4816      	ldr	r0, [pc, #88]	; (29a34 <location_utils_modem_params_read+0xbc>)
   299da:	f013 f978 	bl	3ccce <z_log_minimal_printk>
			modem_params->mcc, modem_params->mnc, modem_params->tac,
			log_strdup(tac_str), modem_params->cell_id, log_strdup(cell_id_str),
			modem_params->phys_cell_id);
	}
	return err;
}
   299de:	4620      	mov	r0, r4
   299e0:	b013      	add	sp, #76	; 0x4c
   299e2:	bd30      	pop	{r4, r5, pc}
		modem_params->mnc = strtol(&plmn_str[4], NULL, 10);
   299e4:	220a      	movs	r2, #10
   299e6:	2100      	movs	r1, #0
   299e8:	a804      	add	r0, sp, #16
   299ea:	f010 ffd5 	bl	3a998 <strtol>
		plmn_str[4] = '\0';
   299ee:	2400      	movs	r4, #0
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   299f0:	220a      	movs	r2, #10
   299f2:	4621      	mov	r1, r4
		modem_params->mnc = strtol(&plmn_str[4], NULL, 10);
   299f4:	6068      	str	r0, [r5, #4]
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   299f6:	f10d 000d 	add.w	r0, sp, #13
		plmn_str[4] = '\0';
   299fa:	f88d 4010 	strb.w	r4, [sp, #16]
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   299fe:	f010 ffcb 	bl	3a998 <strtol>
		modem_params->tac = strtol(tac_str + 1, NULL, 16);
   29a02:	2210      	movs	r2, #16
   29a04:	4621      	mov	r1, r4
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   29a06:	6028      	str	r0, [r5, #0]
		modem_params->tac = strtol(tac_str + 1, NULL, 16);
   29a08:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   29a0c:	f010 ffc4 	bl	3a998 <strtol>
		modem_params->cell_id = strtol(cell_id_str + 1, NULL, 16);
   29a10:	2210      	movs	r2, #16
		modem_params->tac = strtol(tac_str + 1, NULL, 16);
   29a12:	60e8      	str	r0, [r5, #12]
		modem_params->cell_id = strtol(cell_id_str + 1, NULL, 16);
   29a14:	4621      	mov	r1, r4
   29a16:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   29a1a:	f010 ffbd 	bl	3a998 <strtol>
   29a1e:	60a8      	str	r0, [r5, #8]
	return err;
   29a20:	e7dd      	b.n	299de <location_utils_modem_params_read+0x66>
   29a22:	bf00      	nop
   29a24:	00047800 	.word	0x00047800
   29a28:	00044263 	.word	0x00044263
   29a2c:	0004782e 	.word	0x0004782e
   29a30:	0004786f 	.word	0x0004786f
   29a34:	0004787b 	.word	0x0004787b

00029a38 <location_utils_systime_to_location_datetime>:

	return jwt_buf;
}

void location_utils_systime_to_location_datetime(struct location_datetime *datetime)
{
   29a38:	b510      	push	{r4, lr}
   29a3a:	4604      	mov	r4, r0
   29a3c:	b08e      	sub	sp, #56	; 0x38
	struct timespec tp;
	struct tm ltm = { 0 };
   29a3e:	2224      	movs	r2, #36	; 0x24
   29a40:	2100      	movs	r1, #0
   29a42:	a805      	add	r0, sp, #20
   29a44:	f017 fddd 	bl	41602 <memset>

	__ASSERT_NO_MSG(datetime != NULL);
   29a48:	b944      	cbnz	r4, 29a5c <location_utils_systime_to_location_datetime+0x24>
   29a4a:	4914      	ldr	r1, [pc, #80]	; (29a9c <location_utils_systime_to_location_datetime+0x64>)
   29a4c:	4814      	ldr	r0, [pc, #80]	; (29aa0 <location_utils_systime_to_location_datetime+0x68>)
   29a4e:	227f      	movs	r2, #127	; 0x7f
   29a50:	f013 f903 	bl	3cc5a <assert_print>
   29a54:	217f      	movs	r1, #127	; 0x7f
   29a56:	4811      	ldr	r0, [pc, #68]	; (29a9c <location_utils_systime_to_location_datetime+0x64>)
   29a58:	f013 f8f8 	bl	3cc4c <assert_post_action>
   29a5c:	2001      	movs	r0, #1
   29a5e:	4669      	mov	r1, sp
   29a60:	f7fa f846 	bl	23af0 <z_impl_clock_gettime>

	clock_gettime(CLOCK_REALTIME, &tp);
	gmtime_r(&tp.tv_sec, &ltm);
   29a64:	4668      	mov	r0, sp
   29a66:	a905      	add	r1, sp, #20
   29a68:	f010 f888 	bl	39b7c <gmtime_r>

	/* System time should have been set when date_time lib is in use */
	if (IS_ENABLED(CONFIG_DATE_TIME)) {
		datetime->valid = true;
   29a6c:	2301      	movs	r3, #1
   29a6e:	7023      	strb	r3, [r4, #0]
	} else {
		datetime->valid = false;
	}

	/* Relative to 1900, as per POSIX */
	datetime->year = 1900 + ltm.tm_year;
   29a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28

	datetime->day = ltm.tm_mday;
	datetime->hour = ltm.tm_hour;
	datetime->minute = ltm.tm_min;
	datetime->second = ltm.tm_sec;
	datetime->ms = tp.tv_nsec / 1000000;
   29a72:	4a0c      	ldr	r2, [pc, #48]	; (29aa4 <location_utils_systime_to_location_datetime+0x6c>)
	datetime->year = 1900 + ltm.tm_year;
   29a74:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   29a78:	8063      	strh	r3, [r4, #2]
	datetime->month = ltm.tm_mon + 1;
   29a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29a7c:	3301      	adds	r3, #1
   29a7e:	7123      	strb	r3, [r4, #4]
	datetime->day = ltm.tm_mday;
   29a80:	9b08      	ldr	r3, [sp, #32]
   29a82:	7163      	strb	r3, [r4, #5]
	datetime->hour = ltm.tm_hour;
   29a84:	9b07      	ldr	r3, [sp, #28]
   29a86:	71a3      	strb	r3, [r4, #6]
	datetime->minute = ltm.tm_min;
   29a88:	9b06      	ldr	r3, [sp, #24]
   29a8a:	71e3      	strb	r3, [r4, #7]
	datetime->second = ltm.tm_sec;
   29a8c:	9b05      	ldr	r3, [sp, #20]
   29a8e:	7223      	strb	r3, [r4, #8]
	datetime->ms = tp.tv_nsec / 1000000;
   29a90:	9b02      	ldr	r3, [sp, #8]
   29a92:	fb93 f3f2 	sdiv	r3, r3, r2
   29a96:	8163      	strh	r3, [r4, #10]
}
   29a98:	b00e      	add	sp, #56	; 0x38
   29a9a:	bd10      	pop	{r4, pc}
   29a9c:	00047800 	.word	0x00047800
   29aa0:	00044263 	.word	0x00044263
   29aa4:	000f4240 	.word	0x000f4240

00029aa8 <method_gnss_notify_pgps>:
#endif
	}
}

static void method_gnss_notify_pgps(struct k_work *work)
{
   29aa8:	b508      	push	{r3, lr}
	ARG_UNUSED(work);
	int err = nrf_cloud_pgps_notify_prediction();
   29aaa:	f004 f93b 	bl	2dd24 <nrf_cloud_pgps_notify_prediction>

	if (err) {
   29aae:	4602      	mov	r2, r0
   29ab0:	b128      	cbz	r0, 29abe <method_gnss_notify_pgps+0x16>
		LOG_ERR("Error requesting notification of prediction availability: %d", err);
	}
}
   29ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Error requesting notification of prediction availability: %d", err);
   29ab6:	2145      	movs	r1, #69	; 0x45
   29ab8:	4801      	ldr	r0, [pc, #4]	; (29ac0 <method_gnss_notify_pgps+0x18>)
   29aba:	f013 b908 	b.w	3ccce <z_log_minimal_printk>
}
   29abe:	bd08      	pop	{r3, pc}
   29ac0:	000478a4 	.word	0x000478a4

00029ac4 <method_gnss_manage_pgps>:
{
   29ac4:	b508      	push	{r3, lr}
	err = nrf_cloud_pgps_inject(prediction, &pgps_agps_request);
   29ac6:	4b0b      	ldr	r3, [pc, #44]	; (29af4 <method_gnss_manage_pgps+0x30>)
   29ac8:	490b      	ldr	r1, [pc, #44]	; (29af8 <method_gnss_manage_pgps+0x34>)
   29aca:	6818      	ldr	r0, [r3, #0]
   29acc:	f004 fc52 	bl	2e374 <nrf_cloud_pgps_inject>
	if (err) {
   29ad0:	4602      	mov	r2, r0
   29ad2:	b118      	cbz	r0, 29adc <method_gnss_manage_pgps+0x18>
		LOG_ERR("Unable to send prediction to modem: %d", err);
   29ad4:	2145      	movs	r1, #69	; 0x45
   29ad6:	4809      	ldr	r0, [pc, #36]	; (29afc <method_gnss_manage_pgps+0x38>)
   29ad8:	f013 f8f9 	bl	3ccce <z_log_minimal_printk>
	err = nrf_cloud_pgps_preemptive_updates();
   29adc:	f004 fb92 	bl	2e204 <nrf_cloud_pgps_preemptive_updates>
	if (err) {
   29ae0:	4602      	mov	r2, r0
   29ae2:	b128      	cbz	r0, 29af0 <method_gnss_manage_pgps+0x2c>
}
   29ae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Error requesting updates: %d", err);
   29ae8:	2145      	movs	r1, #69	; 0x45
   29aea:	4805      	ldr	r0, [pc, #20]	; (29b00 <method_gnss_manage_pgps+0x3c>)
   29aec:	f013 b8ef 	b.w	3ccce <z_log_minimal_printk>
}
   29af0:	bd08      	pop	{r3, pc}
   29af2:	bf00      	nop
   29af4:	200194b8 	.word	0x200194b8
   29af8:	200194ac 	.word	0x200194ac
   29afc:	000478e6 	.word	0x000478e6
   29b00:	00047912 	.word	0x00047912

00029b04 <method_gnss_agps_request_work_fn>:
}

#if defined(CONFIG_NRF_CLOUD_AGPS) && !defined(CONFIG_LOCATION_METHOD_GNSS_AGPS_EXTERNAL)
#if defined(CONFIG_NRF_CLOUD_MQTT)
static void method_gnss_agps_request_work_fn(struct k_work *item)
{
   29b04:	b508      	push	{r3, lr}
	int err = nrf_cloud_agps_request(&agps_request);
   29b06:	4806      	ldr	r0, [pc, #24]	; (29b20 <method_gnss_agps_request_work_fn+0x1c>)
   29b08:	f002 ffea 	bl	2cae0 <nrf_cloud_agps_request>

	if (err) {
   29b0c:	4602      	mov	r2, r0
   29b0e:	b128      	cbz	r0, 29b1c <method_gnss_agps_request_work_fn+0x18>
		LOG_ERR("nRF Cloud A-GPS request failed, error: %d", err);
		return;
	}

	LOG_DBG("A-GPS data requested");
}
   29b10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("nRF Cloud A-GPS request failed, error: %d", err);
   29b14:	2145      	movs	r1, #69	; 0x45
   29b16:	4803      	ldr	r0, [pc, #12]	; (29b24 <method_gnss_agps_request_work_fn+0x20>)
   29b18:	f013 b8d9 	b.w	3ccce <z_log_minimal_printk>
}
   29b1c:	bd08      	pop	{r3, pc}
   29b1e:	bf00      	nop
   29b20:	2001943c 	.word	0x2001943c
   29b24:	00047934 	.word	0x00047934

00029b28 <method_gnss_pgps_handler>:
{
   29b28:	b508      	push	{r3, lr}
	if ((event->type == PGPS_EVT_AVAILABLE) ||
   29b2a:	7803      	ldrb	r3, [r0, #0]
   29b2c:	2b03      	cmp	r3, #3
   29b2e:	d003      	beq.n	29b38 <method_gnss_pgps_handler+0x10>
   29b30:	2b04      	cmp	r3, #4
   29b32:	d10b      	bne.n	29b4c <method_gnss_pgps_handler+0x24>
	    ((event->type == PGPS_EVT_READY) && (event->prediction != NULL))) {
   29b34:	6843      	ldr	r3, [r0, #4]
   29b36:	b17b      	cbz	r3, 29b58 <method_gnss_pgps_handler+0x30>
		prediction = event->prediction;
   29b38:	6842      	ldr	r2, [r0, #4]
   29b3a:	4b08      	ldr	r3, [pc, #32]	; (29b5c <method_gnss_pgps_handler+0x34>)
   29b3c:	601a      	str	r2, [r3, #0]
		k_work_submit_to_queue(location_core_work_queue_get(),
   29b3e:	f7ff fefb 	bl	29938 <location_core_work_queue_get>
   29b42:	4907      	ldr	r1, [pc, #28]	; (29b60 <method_gnss_pgps_handler+0x38>)
}
   29b44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit_to_queue(location_core_work_queue_get(),
   29b48:	f00d bc68 	b.w	3741c <k_work_submit_to_queue>
	} else if (event->type == PGPS_EVT_REQUEST) {
   29b4c:	2b05      	cmp	r3, #5
   29b4e:	d103      	bne.n	29b58 <method_gnss_pgps_handler+0x30>
		k_work_submit_to_queue(location_core_work_queue_get(),
   29b50:	f7ff fef2 	bl	29938 <location_core_work_queue_get>
   29b54:	4903      	ldr	r1, [pc, #12]	; (29b64 <method_gnss_pgps_handler+0x3c>)
   29b56:	e7f5      	b.n	29b44 <method_gnss_pgps_handler+0x1c>
}
   29b58:	bd08      	pop	{r3, pc}
   29b5a:	bf00      	nop
   29b5c:	200194b8 	.word	0x200194b8
   29b60:	2001945c 	.word	0x2001945c
   29b64:	2001947c 	.word	0x2001947c

00029b68 <method_gnss_positioning_work_fn>:
	location_core_event_cb_pgps_request(&pgps_request);
}
#endif

static void method_gnss_positioning_work_fn(struct k_work *work)
{
   29b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
	lte_lc_system_mode_get(&mode, NULL);
   29b6a:	2100      	movs	r1, #0
   29b6c:	f10d 0007 	add.w	r0, sp, #7
   29b70:	f7fd fcc8 	bl	27504 <lte_lc_system_mode_get>
	if (mode == LTE_LC_SYSTEM_MODE_GPS) {
   29b74:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29b78:	2b03      	cmp	r3, #3
   29b7a:	d00f      	beq.n	29b9c <method_gnss_positioning_work_fn+0x34>
	return z_impl_k_sem_take(sem, timeout);
   29b7c:	f44f 0216 	mov.w	r2, #9830400	; 0x960000
   29b80:	2300      	movs	r3, #0
   29b82:	4821      	ldr	r0, [pc, #132]	; (29c08 <method_gnss_positioning_work_fn+0xa0>)
   29b84:	f00d f9c0 	bl	36f08 <z_impl_k_sem_take>
	if (k_sem_take(&entered_rrc_idle, K_MINUTES(SLEEP_WAIT_BACKSTOP)) == -EAGAIN) {
   29b88:	300b      	adds	r0, #11
   29b8a:	d124      	bne.n	29bd6 <method_gnss_positioning_work_fn+0x6e>
		if (!running) { /* Location request was cancelled */
   29b8c:	4b1f      	ldr	r3, [pc, #124]	; (29c0c <method_gnss_positioning_work_fn+0xa4>)
   29b8e:	781b      	ldrb	r3, [r3, #0]
   29b90:	b1fb      	cbz	r3, 29bd2 <method_gnss_positioning_work_fn+0x6a>
		LOG_WRN("RRC connection was not released in %d minutes. Starting GNSS anyway.",
   29b92:	2205      	movs	r2, #5
   29b94:	2157      	movs	r1, #87	; 0x57
   29b96:	481e      	ldr	r0, [pc, #120]	; (29c10 <method_gnss_positioning_work_fn+0xa8>)
   29b98:	f013 f899 	bl	3ccce <z_log_minimal_printk>
		/* Location request was cancelled while waiting for RRC idle or PSM. Do nothing. */
		return;
	}

	/* Configure GNSS to continuous tracking mode */
	err = nrf_modem_gnss_fix_interval_set(1);
   29b9c:	2001      	movs	r0, #1
   29b9e:	f00c f8ab 	bl	35cf8 <nrf_modem_gnss_fix_interval_set>
   29ba2:	4604      	mov	r4, r0

#if defined(CONFIG_NRF_CLOUD_AGPS_ELEVATION_MASK)
	err |= nrf_modem_gnss_elevation_threshold_set(CONFIG_NRF_CLOUD_AGPS_ELEVATION_MASK);
#endif
	/* By default we take the first fix. */
	fixes_remaining = 1;
   29ba4:	2001      	movs	r0, #1

	uint8_t use_case = NRF_MODEM_GNSS_USE_CASE_MULTIPLE_HOT_START;

	switch (gnss_config.accuracy) {
   29ba6:	4d1b      	ldr	r5, [pc, #108]	; (29c14 <method_gnss_positioning_work_fn+0xac>)
	fixes_remaining = 1;
   29ba8:	4b1b      	ldr	r3, [pc, #108]	; (29c18 <method_gnss_positioning_work_fn+0xb0>)
	switch (gnss_config.accuracy) {
   29baa:	78aa      	ldrb	r2, [r5, #2]
	fixes_remaining = 1;
   29bac:	6018      	str	r0, [r3, #0]
	switch (gnss_config.accuracy) {
   29bae:	b1b2      	cbz	r2, 29bde <method_gnss_positioning_work_fn+0x76>
   29bb0:	2a02      	cmp	r2, #2
   29bb2:	d101      	bne.n	29bb8 <method_gnss_positioning_work_fn+0x50>
	case LOCATION_ACCURACY_NORMAL:
		break;

	case LOCATION_ACCURACY_HIGH:
		/* In high accuracy mode, use the configured fix count. */
		fixes_remaining = gnss_config.num_consecutive_fixes;
   29bb4:	78ea      	ldrb	r2, [r5, #3]
   29bb6:	601a      	str	r2, [r3, #0]
		break;
	}

	err |= nrf_modem_gnss_use_case_set(use_case);
   29bb8:	f00c f880 	bl	35cbc <nrf_modem_gnss_use_case_set>

	if (err) {
   29bbc:	4304      	orrs	r4, r0
   29bbe:	d010      	beq.n	29be2 <method_gnss_positioning_work_fn+0x7a>
		LOG_ERR("Failed to configure GNSS");
   29bc0:	2145      	movs	r1, #69	; 0x45
   29bc2:	4816      	ldr	r0, [pc, #88]	; (29c1c <method_gnss_positioning_work_fn+0xb4>)
   29bc4:	f013 f883 	bl	3ccce <z_log_minimal_printk>
		location_core_event_cb_error();
   29bc8:	f7ff fe8c 	bl	298e4 <location_core_event_cb_error>
		running = false;
   29bcc:	2200      	movs	r2, #0
   29bce:	4b0f      	ldr	r3, [pc, #60]	; (29c0c <method_gnss_positioning_work_fn+0xa4>)
   29bd0:	701a      	strb	r2, [r3, #0]
		running = false;
		return;
	}

	location_core_timer_start(gnss_config.timeout);
}
   29bd2:	b003      	add	sp, #12
   29bd4:	bd30      	pop	{r4, r5, pc}
	z_impl_k_sem_give(sem);
   29bd6:	480c      	ldr	r0, [pc, #48]	; (29c08 <method_gnss_positioning_work_fn+0xa0>)
   29bd8:	f00d f95a 	bl	36e90 <z_impl_k_sem_give>
   29bdc:	e7de      	b.n	29b9c <method_gnss_positioning_work_fn+0x34>
	switch (gnss_config.accuracy) {
   29bde:	2003      	movs	r0, #3
   29be0:	e7ea      	b.n	29bb8 <method_gnss_positioning_work_fn+0x50>
	err = nrf_modem_gnss_start();
   29be2:	f00b fffb 	bl	35bdc <nrf_modem_gnss_start>
	if (err) {
   29be6:	b140      	cbz	r0, 29bfa <method_gnss_positioning_work_fn+0x92>
		LOG_ERR("Failed to start GNSS");
   29be8:	2145      	movs	r1, #69	; 0x45
   29bea:	480d      	ldr	r0, [pc, #52]	; (29c20 <method_gnss_positioning_work_fn+0xb8>)
   29bec:	f013 f86f 	bl	3ccce <z_log_minimal_printk>
		location_core_event_cb_error();
   29bf0:	f7ff fe78 	bl	298e4 <location_core_event_cb_error>
		running = false;
   29bf4:	4b05      	ldr	r3, [pc, #20]	; (29c0c <method_gnss_positioning_work_fn+0xa4>)
   29bf6:	701c      	strb	r4, [r3, #0]
		return;
   29bf8:	e7eb      	b.n	29bd2 <method_gnss_positioning_work_fn+0x6a>
	location_core_timer_start(gnss_config.timeout);
   29bfa:	8828      	ldrh	r0, [r5, #0]
}
   29bfc:	b003      	add	sp, #12
   29bfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	location_core_timer_start(gnss_config.timeout);
   29c02:	f7ff be9d 	b.w	29940 <location_core_timer_start>
   29c06:	bf00      	nop
   29c08:	20015060 	.word	0x20015060
   29c0c:	2001c907 	.word	0x2001c907
   29c10:	00047963 	.word	0x00047963
   29c14:	2001a58a 	.word	0x2001a58a
   29c18:	20019448 	.word	0x20019448
   29c1c:	000479ad 	.word	0x000479ad
   29c20:	000479cb 	.word	0x000479cb

00029c24 <method_gnss_lte_ind_handler>:
	switch (evt->type) {
   29c24:	7803      	ldrb	r3, [r0, #0]
   29c26:	3b01      	subs	r3, #1
   29c28:	2b09      	cmp	r3, #9
   29c2a:	d821      	bhi.n	29c70 <method_gnss_lte_ind_handler+0x4c>
   29c2c:	e8df f003 	tbb	[pc, r3]
   29c30:	2018200e 	.word	0x2018200e
   29c34:	20202020 	.word	0x20202020
   29c38:	050b      	.short	0x050b
		if (evt->modem_sleep.type == LTE_LC_MODEM_SLEEP_PSM) {
   29c3a:	7a03      	ldrb	r3, [r0, #8]
   29c3c:	2b01      	cmp	r3, #1
   29c3e:	d117      	bne.n	29c70 <method_gnss_lte_ind_handler+0x4c>
   29c40:	480c      	ldr	r0, [pc, #48]	; (29c74 <method_gnss_lte_ind_handler+0x50>)
   29c42:	f00d b925 	b.w	36e90 <z_impl_k_sem_give>
	z_impl_k_sem_reset(sem);
   29c46:	480b      	ldr	r0, [pc, #44]	; (29c74 <method_gnss_lte_ind_handler+0x50>)
   29c48:	f00d b9c8 	b.w	36fdc <z_impl_k_sem_reset>
		if (evt->psm_cfg.active_time == -1) {
   29c4c:	68c3      	ldr	r3, [r0, #12]
   29c4e:	1c5a      	adds	r2, r3, #1
   29c50:	d0f6      	beq.n	29c40 <method_gnss_lte_ind_handler+0x1c>
		} else if (evt->psm_cfg.active_time > 0) {
   29c52:	2b00      	cmp	r3, #0
   29c54:	dd0c      	ble.n	29c70 <method_gnss_lte_ind_handler+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   29c56:	2200      	movs	r2, #0
   29c58:	2300      	movs	r3, #0
   29c5a:	4806      	ldr	r0, [pc, #24]	; (29c74 <method_gnss_lte_ind_handler+0x50>)
   29c5c:	f00d b954 	b.w	36f08 <z_impl_k_sem_take>
		if (evt->rrc_mode == LTE_LC_RRC_MODE_CONNECTED) {
   29c60:	7a03      	ldrb	r3, [r0, #8]
   29c62:	2b01      	cmp	r3, #1
   29c64:	d101      	bne.n	29c6a <method_gnss_lte_ind_handler+0x46>
	z_impl_k_sem_reset(sem);
   29c66:	4804      	ldr	r0, [pc, #16]	; (29c78 <method_gnss_lte_ind_handler+0x54>)
   29c68:	e7ee      	b.n	29c48 <method_gnss_lte_ind_handler+0x24>
		} else if (evt->rrc_mode == LTE_LC_RRC_MODE_IDLE) {
   29c6a:	b90b      	cbnz	r3, 29c70 <method_gnss_lte_ind_handler+0x4c>
	z_impl_k_sem_give(sem);
   29c6c:	4802      	ldr	r0, [pc, #8]	; (29c78 <method_gnss_lte_ind_handler+0x54>)
   29c6e:	e7e8      	b.n	29c42 <method_gnss_lte_ind_handler+0x1e>
}
   29c70:	4770      	bx	lr
   29c72:	bf00      	nop
   29c74:	20015048 	.word	0x20015048
   29c78:	20015060 	.word	0x20015060

00029c7c <method_gnss_event_handler>:
	switch (event) {
   29c7c:	2801      	cmp	r0, #1
{
   29c7e:	b510      	push	{r4, lr}
	switch (event) {
   29c80:	d002      	beq.n	29c88 <method_gnss_event_handler+0xc>
   29c82:	2804      	cmp	r0, #4
   29c84:	d007      	beq.n	29c96 <method_gnss_event_handler+0x1a>
}
   29c86:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(location_core_work_queue_get(), &method_gnss_pvt_work);
   29c88:	f7ff fe56 	bl	29938 <location_core_work_queue_get>
   29c8c:	4911      	ldr	r1, [pc, #68]	; (29cd4 <method_gnss_event_handler+0x58>)
}
   29c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_submit_to_queue(
   29c92:	f00d bbc3 	b.w	3741c <k_work_submit_to_queue>
	int err = nrf_modem_gnss_read(&agps_request,
   29c96:	4c10      	ldr	r4, [pc, #64]	; (29cd8 <method_gnss_event_handler+0x5c>)
   29c98:	2203      	movs	r2, #3
   29c9a:	210c      	movs	r1, #12
   29c9c:	4620      	mov	r0, r4
   29c9e:	f00b fe0d 	bl	358bc <nrf_modem_gnss_read>
	if (err) {
   29ca2:	4602      	mov	r2, r0
   29ca4:	b128      	cbz	r0, 29cb2 <method_gnss_event_handler+0x36>
}
   29ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_WRN("Reading A-GPS req data from GNSS failed, error: %d", err);
   29caa:	2157      	movs	r1, #87	; 0x57
   29cac:	480b      	ldr	r0, [pc, #44]	; (29cdc <method_gnss_event_handler+0x60>)
   29cae:	f013 b80e 	b.w	3ccce <z_log_minimal_printk>
		pgps_agps_request.sv_mask_ephe = agps_request.sv_mask_ephe;
   29cb2:	6821      	ldr	r1, [r4, #0]
   29cb4:	4b0a      	ldr	r3, [pc, #40]	; (29ce0 <method_gnss_event_handler+0x64>)
		agps_request.sv_mask_alm = 0;
   29cb6:	e9c4 0000 	strd	r0, r0, [r4]
	if (method_gnss_agps_required(&agps_request)) {
   29cba:	4620      	mov	r0, r4
		pgps_agps_request.sv_mask_ephe = agps_request.sv_mask_ephe;
   29cbc:	6019      	str	r1, [r3, #0]
	if (method_gnss_agps_required(&agps_request)) {
   29cbe:	f015 fd62 	bl	3f786 <method_gnss_agps_required>
   29cc2:	b118      	cbz	r0, 29ccc <method_gnss_event_handler+0x50>
		k_work_submit_to_queue(
   29cc4:	f7ff fe38 	bl	29938 <location_core_work_queue_get>
   29cc8:	4906      	ldr	r1, [pc, #24]	; (29ce4 <method_gnss_event_handler+0x68>)
   29cca:	e7e0      	b.n	29c8e <method_gnss_event_handler+0x12>
		k_work_submit_to_queue(
   29ccc:	f7ff fe34 	bl	29938 <location_core_work_queue_get>
   29cd0:	4905      	ldr	r1, [pc, #20]	; (29ce8 <method_gnss_event_handler+0x6c>)
   29cd2:	e7dc      	b.n	29c8e <method_gnss_event_handler+0x12>
   29cd4:	2001948c 	.word	0x2001948c
   29cd8:	2001943c 	.word	0x2001943c
   29cdc:	000479e5 	.word	0x000479e5
   29ce0:	200194ac 	.word	0x200194ac
   29ce4:	2001944c 	.word	0x2001944c
   29ce8:	2001946c 	.word	0x2001946c

00029cec <method_gnss_cancel>:
{
   29cec:	b510      	push	{r4, lr}
	int err = nrf_modem_gnss_stop();
   29cee:	f00b ffcb 	bl	35c88 <nrf_modem_gnss_stop>
	if ((err != 0) && (err != -NRF_EPERM)) {
   29cf2:	1c43      	adds	r3, r0, #1
   29cf4:	2b01      	cmp	r3, #1
	int err = nrf_modem_gnss_stop();
   29cf6:	4604      	mov	r4, r0
	if ((err != 0) && (err != -NRF_EPERM)) {
   29cf8:	d903      	bls.n	29d02 <method_gnss_cancel+0x16>
		LOG_ERR("Failed to stop GNSS");
   29cfa:	2145      	movs	r1, #69	; 0x45
   29cfc:	480a      	ldr	r0, [pc, #40]	; (29d28 <method_gnss_cancel+0x3c>)
   29cfe:	f012 ffe6 	bl	3ccce <z_log_minimal_printk>
	running = false;
   29d02:	2200      	movs	r2, #0
   29d04:	4b09      	ldr	r3, [pc, #36]	; (29d2c <method_gnss_cancel+0x40>)
	(void)k_work_cancel(&method_gnss_start_work);
   29d06:	480a      	ldr	r0, [pc, #40]	; (29d30 <method_gnss_cancel+0x44>)
	running = false;
   29d08:	701a      	strb	r2, [r3, #0]
	(void)k_work_cancel(&method_gnss_start_work);
   29d0a:	f00d fbe1 	bl	374d0 <k_work_cancel>
	return sem->count;
   29d0e:	4809      	ldr	r0, [pc, #36]	; (29d34 <method_gnss_cancel+0x48>)
	if (!sleeping) {
   29d10:	6883      	ldr	r3, [r0, #8]
   29d12:	b90b      	cbnz	r3, 29d18 <method_gnss_cancel+0x2c>
	z_impl_k_sem_reset(sem);
   29d14:	f00d f962 	bl	36fdc <z_impl_k_sem_reset>
   29d18:	4807      	ldr	r0, [pc, #28]	; (29d38 <method_gnss_cancel+0x4c>)
	if (!rrc_idling) {
   29d1a:	6883      	ldr	r3, [r0, #8]
   29d1c:	b90b      	cbnz	r3, 29d22 <method_gnss_cancel+0x36>
   29d1e:	f00d f95d 	bl	36fdc <z_impl_k_sem_reset>
}
   29d22:	4620      	mov	r0, r4
   29d24:	bd10      	pop	{r4, pc}
   29d26:	bf00      	nop
   29d28:	00047a1d 	.word	0x00047a1d
   29d2c:	2001c907 	.word	0x2001c907
   29d30:	2001949c 	.word	0x2001949c
   29d34:	20015048 	.word	0x20015048
   29d38:	20015060 	.word	0x20015060

00029d3c <method_gnss_pvt_work_fn>:
{
   29d3c:	b510      	push	{r4, lr}
	if (!running) {
   29d3e:	4b2e      	ldr	r3, [pc, #184]	; (29df8 <method_gnss_pvt_work_fn+0xbc>)
{
   29d40:	b0ba      	sub	sp, #232	; 0xe8
	if (!running) {
   29d42:	781b      	ldrb	r3, [r3, #0]
   29d44:	b14b      	cbz	r3, 29d5a <method_gnss_pvt_work_fn+0x1e>
	if (nrf_modem_gnss_read(&pvt_data, sizeof(pvt_data), NRF_MODEM_GNSS_DATA_PVT) != 0) {
   29d46:	2201      	movs	r2, #1
   29d48:	21e8      	movs	r1, #232	; 0xe8
   29d4a:	4668      	mov	r0, sp
   29d4c:	f00b fdb6 	bl	358bc <nrf_modem_gnss_read>
   29d50:	b128      	cbz	r0, 29d5e <method_gnss_pvt_work_fn+0x22>
		LOG_ERR("Failed to read PVT data from GNSS");
   29d52:	2145      	movs	r1, #69	; 0x45
   29d54:	4829      	ldr	r0, [pc, #164]	; (29dfc <method_gnss_pvt_work_fn+0xc0>)
   29d56:	f012 ffba 	bl	3ccce <z_log_minimal_printk>
}
   29d5a:	b03a      	add	sp, #232	; 0xe8
   29d5c:	bd10      	pop	{r4, pc}
	if (pvt_data.flags & NRF_MODEM_GNSS_PVT_FLAG_FIX_VALID) {
   29d5e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   29d62:	f013 0301 	ands.w	r3, r3, #1
   29d66:	d02a      	beq.n	29dbe <method_gnss_pvt_work_fn+0x82>
		location_result.latitude = pvt_data.latitude;
   29d68:	e9dd 0100 	ldrd	r0, r1, [sp]
		fixes_remaining--;
   29d6c:	4a24      	ldr	r2, [pc, #144]	; (29e00 <method_gnss_pvt_work_fn+0xc4>)
		location_result.method = LOCATION_METHOD_GNSS;
   29d6e:	4c25      	ldr	r4, [pc, #148]	; (29e04 <method_gnss_pvt_work_fn+0xc8>)
		fixes_remaining--;
   29d70:	6813      	ldr	r3, [r2, #0]
		location_result.latitude = pvt_data.latitude;
   29d72:	e9c4 0102 	strd	r0, r1, [r4, #8]
		location_result.longitude = pvt_data.longitude;
   29d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		fixes_remaining--;
   29d7a:	3b01      	subs	r3, #1
   29d7c:	6013      	str	r3, [r2, #0]
		location_result.method = LOCATION_METHOD_GNSS;
   29d7e:	2202      	movs	r2, #2
   29d80:	7022      	strb	r2, [r4, #0]
		location_result.accuracy = pvt_data.accuracy;
   29d82:	9a05      	ldr	r2, [sp, #20]
		location_result.longitude = pvt_data.longitude;
   29d84:	e9c4 0104 	strd	r0, r1, [r4, #16]
		location_result.accuracy = pvt_data.accuracy;
   29d88:	61a2      	str	r2, [r4, #24]
		location_result.datetime.valid = true;
   29d8a:	2201      	movs	r2, #1
		location_result.datetime.year = pvt_data.datetime.year;
   29d8c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
		location_result.datetime.valid = true;
   29d90:	7722      	strb	r2, [r4, #28]
		location_result.datetime.year = pvt_data.datetime.year;
   29d92:	83e1      	strh	r1, [r4, #30]
		location_result.datetime.second = pvt_data.datetime.seconds;
   29d94:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		location_result.datetime.month = pvt_data.datetime.month;
   29d98:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
		location_result.datetime.second = pvt_data.datetime.seconds;
   29d9c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
		location_result.datetime.month = pvt_data.datetime.month;
   29da0:	8421      	strh	r1, [r4, #32]
		location_result.datetime.ms = pvt_data.datetime.ms;
   29da2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
		location_result.datetime.hour = pvt_data.datetime.hour;
   29da6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
		if (fixes_remaining <= 0) {
   29daa:	2b00      	cmp	r3, #0
		location_result.datetime.hour = pvt_data.datetime.hour;
   29dac:	8461      	strh	r1, [r4, #34]	; 0x22
		location_result.datetime.ms = pvt_data.datetime.ms;
   29dae:	84e2      	strh	r2, [r4, #38]	; 0x26
		if (fixes_remaining <= 0) {
   29db0:	dcd3      	bgt.n	29d5a <method_gnss_pvt_work_fn+0x1e>
			method_gnss_cancel();
   29db2:	f7ff ff9b 	bl	29cec <method_gnss_cancel>
			location_core_event_cb(&location_result);
   29db6:	4620      	mov	r0, r4
   29db8:	f7ff fcba 	bl	29730 <location_core_event_cb>
   29dbc:	e7cd      	b.n	29d5a <method_gnss_pvt_work_fn+0x1e>
	} else if (gnss_config.visibility_detection) {
   29dbe:	4a12      	ldr	r2, [pc, #72]	; (29e08 <method_gnss_pvt_work_fn+0xcc>)
   29dc0:	7912      	ldrb	r2, [r2, #4]
   29dc2:	2a00      	cmp	r2, #0
   29dc4:	d0c9      	beq.n	29d5a <method_gnss_pvt_work_fn+0x1e>
		if (pvt_data.execution_time >= VISIBILITY_DETECTION_EXEC_TIME &&
   29dc6:	9a39      	ldr	r2, [sp, #228]	; 0xe4
   29dc8:	f6a2 32b8 	subw	r2, r2, #3000	; 0xbb8
   29dcc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   29dd0:	d2c3      	bcs.n	29d5a <method_gnss_pvt_work_fn+0x1e>
   29dd2:	466a      	mov	r2, sp
		if (pvt_data->sv[i].sv == 0) {
   29dd4:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
   29dd8:	b131      	cbz	r1, 29de8 <method_gnss_pvt_work_fn+0xac>
		tracked++;
   29dda:	3301      	adds	r3, #1
   29ddc:	b2db      	uxtb	r3, r3
	for (uint32_t i = 0; i < NRF_MODEM_GNSS_MAX_SATELLITES; i++) {
   29dde:	2b0c      	cmp	r3, #12
   29de0:	f102 020c 	add.w	r2, r2, #12
   29de4:	d1f6      	bne.n	29dd4 <method_gnss_pvt_work_fn+0x98>
   29de6:	e7b8      	b.n	29d5a <method_gnss_pvt_work_fn+0x1e>
		    pvt_data.execution_time < (VISIBILITY_DETECTION_EXEC_TIME + MSEC_PER_SEC) &&
   29de8:	2b02      	cmp	r3, #2
   29dea:	d8b6      	bhi.n	29d5a <method_gnss_pvt_work_fn+0x1e>
			method_gnss_cancel();
   29dec:	f7ff ff7e 	bl	29cec <method_gnss_cancel>
			location_core_event_cb_error();
   29df0:	f7ff fd78 	bl	298e4 <location_core_event_cb_error>
   29df4:	e7b1      	b.n	29d5a <method_gnss_pvt_work_fn+0x1e>
   29df6:	bf00      	nop
   29df8:	2001c907 	.word	0x2001c907
   29dfc:	00047a36 	.word	0x00047a36
   29e00:	20019448 	.word	0x20019448
   29e04:	20015718 	.word	0x20015718
   29e08:	2001a58a 	.word	0x2001a58a

00029e0c <method_gnss_location_get>:

int method_gnss_location_get(const struct location_method_config *config)
{
   29e0c:	b530      	push	{r4, r5, lr}
	int err;

	gnss_config = config->gnss;
   29e0e:	f8d0 2002 	ldr.w	r2, [r0, #2]
   29e12:	4b19      	ldr	r3, [pc, #100]	; (29e78 <method_gnss_location_get+0x6c>)
{
   29e14:	b085      	sub	sp, #20
	gnss_config = config->gnss;
   29e16:	601a      	str	r2, [r3, #0]
   29e18:	88c2      	ldrh	r2, [r0, #6]

	/* GNSS event handler is already set once in method_gnss_init(). If no other thread is
	 * using GNSS, setting it again is not needed.
	 */
	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   29e1a:	4818      	ldr	r0, [pc, #96]	; (29e7c <method_gnss_location_get+0x70>)
	gnss_config = config->gnss;
   29e1c:	809a      	strh	r2, [r3, #4]
	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   29e1e:	f00b ff89 	bl	35d34 <nrf_modem_gnss_event_handler_set>
	if (err) {
   29e22:	4604      	mov	r4, r0
   29e24:	b138      	cbz	r0, 29e36 <method_gnss_location_get+0x2a>
		LOG_ERR("Failed to set GNSS event handler, error %d", err);
   29e26:	4602      	mov	r2, r0
   29e28:	2145      	movs	r1, #69	; 0x45
   29e2a:	4815      	ldr	r0, [pc, #84]	; (29e80 <method_gnss_location_get+0x74>)
   29e2c:	f012 ff4f 	bl	3ccce <z_log_minimal_printk>
	k_work_submit_to_queue(location_core_work_queue_get(), &method_gnss_start_work);

	running = true;

	return 0;
}
   29e30:	4620      	mov	r0, r4
   29e32:	b005      	add	sp, #20
   29e34:	bd30      	pop	{r4, r5, pc}
	if (!initialized) {
   29e36:	4d13      	ldr	r5, [pc, #76]	; (29e84 <method_gnss_location_get+0x78>)
   29e38:	782b      	ldrb	r3, [r5, #0]
   29e3a:	b963      	cbnz	r3, 29e56 <method_gnss_location_get+0x4a>
		struct nrf_cloud_pgps_init_param param = {
   29e3c:	4b12      	ldr	r3, [pc, #72]	; (29e88 <method_gnss_location_get+0x7c>)
   29e3e:	9003      	str	r0, [sp, #12]
   29e40:	e9cd 3001 	strd	r3, r0, [sp, #4]
		err = nrf_cloud_pgps_init(&param);
   29e44:	a801      	add	r0, sp, #4
   29e46:	f004 fc39 	bl	2e6bc <nrf_cloud_pgps_init>
		if (err) {
   29e4a:	4602      	mov	r2, r0
   29e4c:	b180      	cbz	r0, 29e70 <method_gnss_location_get+0x64>
			LOG_ERR("Error from PGPS init: %d", err);
   29e4e:	2145      	movs	r1, #69	; 0x45
   29e50:	480e      	ldr	r0, [pc, #56]	; (29e8c <method_gnss_location_get+0x80>)
   29e52:	f012 ff3c 	bl	3ccce <z_log_minimal_printk>
	nrf_modem_gnss_start();
   29e56:	f00b fec1 	bl	35bdc <nrf_modem_gnss_start>
	nrf_modem_gnss_stop();
   29e5a:	f00b ff15 	bl	35c88 <nrf_modem_gnss_stop>
	k_work_submit_to_queue(location_core_work_queue_get(), &method_gnss_start_work);
   29e5e:	f7ff fd6b 	bl	29938 <location_core_work_queue_get>
   29e62:	490b      	ldr	r1, [pc, #44]	; (29e90 <method_gnss_location_get+0x84>)
   29e64:	f00d fada 	bl	3741c <k_work_submit_to_queue>
	running = true;
   29e68:	2201      	movs	r2, #1
   29e6a:	4b0a      	ldr	r3, [pc, #40]	; (29e94 <method_gnss_location_get+0x88>)
   29e6c:	701a      	strb	r2, [r3, #0]
	return 0;
   29e6e:	e7df      	b.n	29e30 <method_gnss_location_get+0x24>
			initialized = true;
   29e70:	2301      	movs	r3, #1
   29e72:	702b      	strb	r3, [r5, #0]
   29e74:	e7ef      	b.n	29e56 <method_gnss_location_get+0x4a>
   29e76:	bf00      	nop
   29e78:	2001a58a 	.word	0x2001a58a
   29e7c:	00029c7d 	.word	0x00029c7d
   29e80:	00047a5d 	.word	0x00047a5d
   29e84:	2001c906 	.word	0x2001c906
   29e88:	00029b29 	.word	0x00029b29
   29e8c:	00047a8d 	.word	0x00047a8d
   29e90:	2001949c 	.word	0x2001949c
   29e94:	2001c907 	.word	0x2001c907

00029e98 <method_gnss_init>:

int method_gnss_init(void)
{
	int err;
	running = false;
   29e98:	2200      	movs	r2, #0
   29e9a:	4b13      	ldr	r3, [pc, #76]	; (29ee8 <method_gnss_init+0x50>)
{
   29e9c:	b510      	push	{r4, lr}

	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   29e9e:	4813      	ldr	r0, [pc, #76]	; (29eec <method_gnss_init+0x54>)
	running = false;
   29ea0:	701a      	strb	r2, [r3, #0]
	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   29ea2:	f00b ff47 	bl	35d34 <nrf_modem_gnss_event_handler_set>
	if (err) {
   29ea6:	4604      	mov	r4, r0
   29ea8:	b130      	cbz	r0, 29eb8 <method_gnss_init+0x20>
		LOG_ERR("Failed to set GNSS event handler, error %d", err);
   29eaa:	4602      	mov	r2, r0
   29eac:	2145      	movs	r1, #69	; 0x45
   29eae:	4810      	ldr	r0, [pc, #64]	; (29ef0 <method_gnss_init+0x58>)
   29eb0:	f012 ff0d 	bl	3ccce <z_log_minimal_printk>
	/* Subscribe to sleep notification to monitor when modem enters power saving mode */
	method_gnss_modem_sleep_notif_subscribe(MIN_SLEEP_DURATION_FOR_STARTING_GNSS);
#endif
	lte_lc_register_handler(method_gnss_lte_ind_handler);
	return 0;
}
   29eb4:	4620      	mov	r0, r4
   29eb6:	bd10      	pop	{r4, pc}
	k_work_init(&method_gnss_pvt_work, method_gnss_pvt_work_fn);
   29eb8:	490e      	ldr	r1, [pc, #56]	; (29ef4 <method_gnss_init+0x5c>)
   29eba:	480f      	ldr	r0, [pc, #60]	; (29ef8 <method_gnss_init+0x60>)
   29ebc:	f00d fa56 	bl	3736c <k_work_init>
	k_work_init(&method_gnss_start_work, method_gnss_positioning_work_fn);
   29ec0:	490e      	ldr	r1, [pc, #56]	; (29efc <method_gnss_init+0x64>)
   29ec2:	480f      	ldr	r0, [pc, #60]	; (29f00 <method_gnss_init+0x68>)
   29ec4:	f00d fa52 	bl	3736c <k_work_init>
	k_work_init(&method_gnss_agps_request_work, method_gnss_agps_request_work_fn);
   29ec8:	490e      	ldr	r1, [pc, #56]	; (29f04 <method_gnss_init+0x6c>)
   29eca:	480f      	ldr	r0, [pc, #60]	; (29f08 <method_gnss_init+0x70>)
   29ecc:	f00d fa4e 	bl	3736c <k_work_init>
	k_work_init(&method_gnss_manage_pgps_work, method_gnss_manage_pgps);
   29ed0:	490e      	ldr	r1, [pc, #56]	; (29f0c <method_gnss_init+0x74>)
   29ed2:	480f      	ldr	r0, [pc, #60]	; (29f10 <method_gnss_init+0x78>)
   29ed4:	f00d fa4a 	bl	3736c <k_work_init>
	k_work_init(&method_gnss_notify_pgps_work, method_gnss_notify_pgps);
   29ed8:	490e      	ldr	r1, [pc, #56]	; (29f14 <method_gnss_init+0x7c>)
   29eda:	480f      	ldr	r0, [pc, #60]	; (29f18 <method_gnss_init+0x80>)
   29edc:	f00d fa46 	bl	3736c <k_work_init>
	lte_lc_register_handler(method_gnss_lte_ind_handler);
   29ee0:	480e      	ldr	r0, [pc, #56]	; (29f1c <method_gnss_init+0x84>)
   29ee2:	f7fd f971 	bl	271c8 <lte_lc_register_handler>
	return 0;
   29ee6:	e7e5      	b.n	29eb4 <method_gnss_init+0x1c>
   29ee8:	2001c907 	.word	0x2001c907
   29eec:	00029c7d 	.word	0x00029c7d
   29ef0:	00047a5d 	.word	0x00047a5d
   29ef4:	00029d3d 	.word	0x00029d3d
   29ef8:	2001948c 	.word	0x2001948c
   29efc:	00029b69 	.word	0x00029b69
   29f00:	2001949c 	.word	0x2001949c
   29f04:	00029b05 	.word	0x00029b05
   29f08:	2001944c 	.word	0x2001944c
   29f0c:	00029ac5 	.word	0x00029ac5
   29f10:	2001945c 	.word	0x2001945c
   29f14:	00029aa9 	.word	0x00029aa9
   29f18:	2001946c 	.word	0x2001946c
   29f1c:	00029c25 	.word	0x00029c25

00029f20 <method_cellular_positioning_work_fn>:
	}
	return 0;
}

static void method_cellular_positioning_work_fn(struct k_work *work)
{
   29f20:	b570      	push	{r4, r5, r6, lr}
   29f22:	4604      	mov	r4, r0
   29f24:	b090      	sub	sp, #64	; 0x40
	struct multicell_location location;
	struct location_data location_result = { 0 };
   29f26:	2228      	movs	r2, #40	; 0x28
   29f28:	2100      	movs	r1, #0
   29f2a:	a806      	add	r0, sp, #24
   29f2c:	f017 fb69 	bl	41602 <memset>
	int ret;
	struct method_cellular_positioning_work_args *work_data =
		CONTAINER_OF(work, struct method_cellular_positioning_work_args, work_item);
	const struct location_cellular_config cellular_config = work_data->cellular_config;

	location_core_timer_start(cellular_config.timeout);
   29f30:	8a20      	ldrh	r0, [r4, #16]
	const struct location_cellular_config cellular_config = work_data->cellular_config;
   29f32:	7ca6      	ldrb	r6, [r4, #18]
	location_core_timer_start(cellular_config.timeout);
   29f34:	f7ff fd04 	bl	29940 <location_core_timer_start>
	struct location_utils_modem_params_info modem_params = { 0 };
   29f38:	2214      	movs	r2, #20
   29f3a:	2100      	movs	r1, #0
   29f3c:	a801      	add	r0, sp, #4
   29f3e:	f017 fb60 	bl	41602 <memset>
	err = lte_lc_neighbor_cell_measurement(LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT);
   29f42:	2000      	movs	r0, #0
   29f44:	f7fd fce2 	bl	2790c <lte_lc_neighbor_cell_measurement>
	if (err) {
   29f48:	4d34      	ldr	r5, [pc, #208]	; (2a01c <method_cellular_positioning_work_fn+0xfc>)
   29f4a:	4602      	mov	r2, r0
   29f4c:	b358      	cbz	r0, 29fa6 <method_cellular_positioning_work_fn+0x86>
		LOG_WRN("Failed to initiate neighbor cell measurements: %d, "
   29f4e:	2157      	movs	r1, #87	; 0x57
   29f50:	4833      	ldr	r0, [pc, #204]	; (2a020 <method_cellular_positioning_work_fn+0x100>)
   29f52:	f012 febc 	bl	3ccce <z_log_minimal_printk>
		err = location_utils_modem_params_read(&modem_params);
   29f56:	a801      	add	r0, sp, #4
   29f58:	f7ff fd0e 	bl	29978 <location_utils_modem_params_read>
		if (err < 0) {
   29f5c:	2800      	cmp	r0, #0
   29f5e:	da0d      	bge.n	29f7c <method_cellular_positioning_work_fn+0x5c>
			LOG_ERR("Could not obtain modem parameters");
   29f60:	2145      	movs	r1, #69	; 0x45
   29f62:	4830      	ldr	r0, [pc, #192]	; (2a024 <method_cellular_positioning_work_fn+0x104>)
   29f64:	f012 feb3 	bl	3ccce <z_log_minimal_printk>

	LOG_DBG("Triggering neighbor cell measurements");
	ret = method_cellular_ncellmeas_start();
	if (ret) {
		LOG_WRN("Cannot start neighbor cell measurements");
   29f68:	2157      	movs	r1, #87	; 0x57
   29f6a:	482f      	ldr	r0, [pc, #188]	; (2a028 <method_cellular_positioning_work_fn+0x108>)
	if (!running) {
		return;
	}

	if (cell_data.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
		LOG_WRN("Current cell ID not valid");
   29f6c:	f012 feaf 	bl	3ccce <z_log_minimal_printk>
		location_core_event_cb_error();
   29f70:	f7ff fcb8 	bl	298e4 <location_core_event_cb_error>
		running = false;
   29f74:	2300      	movs	r3, #0
   29f76:	702b      	strb	r3, [r5, #0]
		if (running) {
			running = false;
			location_core_event_cb(&location_result);
		}
	}
}
   29f78:	b010      	add	sp, #64	; 0x40
   29f7a:	bd70      	pop	{r4, r5, r6, pc}
		memset(&cell_data, 0, sizeof(struct lte_lc_cells_info));
   29f7c:	4c2b      	ldr	r4, [pc, #172]	; (2a02c <method_cellular_positioning_work_fn+0x10c>)
   29f7e:	2228      	movs	r2, #40	; 0x28
   29f80:	2100      	movs	r1, #0
   29f82:	f104 0010 	add.w	r0, r4, #16
   29f86:	f017 fb3c 	bl	41602 <memset>
		cell_data.current_cell.mcc = modem_params.mcc;
   29f8a:	9b01      	ldr	r3, [sp, #4]
   29f8c:	6023      	str	r3, [r4, #0]
		cell_data.current_cell.mnc = modem_params.mnc;
   29f8e:	9b02      	ldr	r3, [sp, #8]
   29f90:	6063      	str	r3, [r4, #4]
		cell_data.current_cell.tac = modem_params.tac;
   29f92:	9b04      	ldr	r3, [sp, #16]
   29f94:	60e3      	str	r3, [r4, #12]
		cell_data.current_cell.id = modem_params.cell_id;
   29f96:	9b03      	ldr	r3, [sp, #12]
   29f98:	60a3      	str	r3, [r4, #8]
		cell_data.current_cell.phys_cell_id = modem_params.phys_cell_id;
   29f9a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   29f9e:	8523      	strh	r3, [r4, #40]	; 0x28
	z_impl_k_sem_give(sem);
   29fa0:	4823      	ldr	r0, [pc, #140]	; (2a030 <method_cellular_positioning_work_fn+0x110>)
   29fa2:	f00c ff75 	bl	36e90 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   29fa6:	f04f 33ff 	mov.w	r3, #4294967295
   29faa:	f04f 32ff 	mov.w	r2, #4294967295
   29fae:	4820      	ldr	r0, [pc, #128]	; (2a030 <method_cellular_positioning_work_fn+0x110>)
   29fb0:	f00c ffaa 	bl	36f08 <z_impl_k_sem_take>
	if (!running) {
   29fb4:	782b      	ldrb	r3, [r5, #0]
   29fb6:	2b00      	cmp	r3, #0
   29fb8:	d0de      	beq.n	29f78 <method_cellular_positioning_work_fn+0x58>
	if (cell_data.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   29fba:	4c1c      	ldr	r4, [pc, #112]	; (2a02c <method_cellular_positioning_work_fn+0x10c>)
   29fbc:	68a3      	ldr	r3, [r4, #8]
   29fbe:	3301      	adds	r3, #1
   29fc0:	d102      	bne.n	29fc8 <method_cellular_positioning_work_fn+0xa8>
		LOG_WRN("Current cell ID not valid");
   29fc2:	2157      	movs	r1, #87	; 0x57
   29fc4:	481b      	ldr	r0, [pc, #108]	; (2a034 <method_cellular_positioning_work_fn+0x114>)
   29fc6:	e7d1      	b.n	29f6c <method_cellular_positioning_work_fn+0x4c>
	location_utils_systime_to_location_datetime(&location_result.datetime);
   29fc8:	a80d      	add	r0, sp, #52	; 0x34
   29fca:	f7ff fd35 	bl	29a38 <location_utils_systime_to_location_datetime>
	ret = multicell_location_get(cellular_config.service, &cell_data, &location);
   29fce:	4621      	mov	r1, r4
   29fd0:	4630      	mov	r0, r6
   29fd2:	aa01      	add	r2, sp, #4
   29fd4:	f7ff f92c 	bl	29230 <multicell_location_get>
	if (ret) {
   29fd8:	4604      	mov	r4, r0
   29fda:	b138      	cbz	r0, 29fec <method_cellular_positioning_work_fn+0xcc>
		LOG_ERR("Failed to acquire location from multicell_location lib, error: %d", ret);
   29fdc:	4602      	mov	r2, r0
   29fde:	2145      	movs	r1, #69	; 0x45
   29fe0:	4815      	ldr	r0, [pc, #84]	; (2a038 <method_cellular_positioning_work_fn+0x118>)
   29fe2:	f012 fe74 	bl	3ccce <z_log_minimal_printk>
		location_core_event_cb_error();
   29fe6:	f7ff fc7d 	bl	298e4 <location_core_event_cb_error>
   29fea:	e7c5      	b.n	29f78 <method_cellular_positioning_work_fn+0x58>
		location_result.method = LOCATION_METHOD_CELLULAR;
   29fec:	2301      	movs	r3, #1
		location_result.latitude = location.latitude;
   29fee:	9801      	ldr	r0, [sp, #4]
		location_result.method = LOCATION_METHOD_CELLULAR;
   29ff0:	f88d 3018 	strb.w	r3, [sp, #24]
		location_result.latitude = location.latitude;
   29ff4:	f7f2 fb88 	bl	1c708 <__aeabi_f2d>
   29ff8:	e9cd 0108 	strd	r0, r1, [sp, #32]
		location_result.longitude = location.longitude;
   29ffc:	9802      	ldr	r0, [sp, #8]
   29ffe:	f7f2 fb83 	bl	1c708 <__aeabi_f2d>
		location_result.accuracy = location.accuracy;
   2a002:	9b03      	ldr	r3, [sp, #12]
		location_result.longitude = location.longitude;
   2a004:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		location_result.accuracy = location.accuracy;
   2a008:	930c      	str	r3, [sp, #48]	; 0x30
		if (running) {
   2a00a:	782b      	ldrb	r3, [r5, #0]
   2a00c:	2b00      	cmp	r3, #0
   2a00e:	d0b3      	beq.n	29f78 <method_cellular_positioning_work_fn+0x58>
			location_core_event_cb(&location_result);
   2a010:	a806      	add	r0, sp, #24
			running = false;
   2a012:	702c      	strb	r4, [r5, #0]
			location_core_event_cb(&location_result);
   2a014:	f7ff fb8c 	bl	29730 <location_core_event_cb>
   2a018:	e7ae      	b.n	29f78 <method_cellular_positioning_work_fn+0x58>
   2a01a:	bf00      	nop
   2a01c:	2001c908 	.word	0x2001c908
   2a020:	00047aab 	.word	0x00047aab
   2a024:	00047b0a 	.word	0x00047b0a
   2a028:	00047b31 	.word	0x00047b31
   2a02c:	20014590 	.word	0x20014590
   2a030:	20015018 	.word	0x20015018
   2a034:	00047b5e 	.word	0x00047b5e
   2a038:	00047b7d 	.word	0x00047b7d

0002a03c <method_cellular_lte_ind_handler>:
{
   2a03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (evt->type) {
   2a03e:	7803      	ldrb	r3, [r0, #0]
{
   2a040:	4604      	mov	r4, r0
	switch (evt->type) {
   2a042:	2b07      	cmp	r3, #7
   2a044:	d127      	bne.n	2a096 <method_cellular_lte_ind_handler+0x5a>
		memcpy(&cell_data.current_cell,
   2a046:	4a14      	ldr	r2, [pc, #80]	; (2a098 <method_cellular_lte_ind_handler+0x5c>)
   2a048:	f100 0308 	add.w	r3, r0, #8
   2a04c:	4616      	mov	r6, r2
   2a04e:	f100 0738 	add.w	r7, r0, #56	; 0x38
   2a052:	4615      	mov	r5, r2
   2a054:	6818      	ldr	r0, [r3, #0]
   2a056:	6859      	ldr	r1, [r3, #4]
   2a058:	3308      	adds	r3, #8
   2a05a:	c503      	stmia	r5!, {r0, r1}
   2a05c:	42bb      	cmp	r3, r7
   2a05e:	462a      	mov	r2, r5
   2a060:	d1f7      	bne.n	2a052 <method_cellular_lte_ind_handler+0x16>
		if (evt->cells_info.ncells_count > 0 && evt->cells_info.neighbor_cells) {
   2a062:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   2a066:	b172      	cbz	r2, 2a086 <method_cellular_lte_ind_handler+0x4a>
   2a068:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   2a06a:	b161      	cbz	r1, 2a086 <method_cellular_lte_ind_handler+0x4a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a06c:	6b70      	ldr	r0, [r6, #52]	; 0x34
   2a06e:	0112      	lsls	r2, r2, #4
   2a070:	f017 faa7 	bl	415c2 <memcpy>
			cell_data.ncells_count = evt->cells_info.ncells_count;
   2a074:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2a078:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	z_impl_k_sem_give(sem);
   2a07c:	4807      	ldr	r0, [pc, #28]	; (2a09c <method_cellular_lte_ind_handler+0x60>)
}
   2a07e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a082:	f00c bf05 	b.w	36e90 <z_impl_k_sem_give>
			cell_data.ncells_count = 0;
   2a086:	2300      	movs	r3, #0
			LOG_INF("No neighbor cell information from modem.");
   2a088:	2149      	movs	r1, #73	; 0x49
   2a08a:	4805      	ldr	r0, [pc, #20]	; (2a0a0 <method_cellular_lte_ind_handler+0x64>)
			cell_data.ncells_count = 0;
   2a08c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
			LOG_INF("No neighbor cell information from modem.");
   2a090:	f012 fe1d 	bl	3ccce <z_log_minimal_printk>
   2a094:	e7f2      	b.n	2a07c <method_cellular_lte_ind_handler+0x40>
}
   2a096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a098:	20014590 	.word	0x20014590
   2a09c:	20015018 	.word	0x20015018
   2a0a0:	00047bc4 	.word	0x00047bc4

0002a0a4 <method_cellular_location_get>:

int method_cellular_location_get(const struct location_method_config *config)
{
   2a0a4:	b510      	push	{r4, lr}
	/* Note: LTE status not checked, let it fail in NCELLMEAS if no connection */

	method_cellular_positioning_work.cellular_config = config->cellular;
   2a0a6:	f8d0 0002 	ldr.w	r0, [r0, #2]
   2a0aa:	4c06      	ldr	r4, [pc, #24]	; (2a0c4 <method_cellular_location_get+0x20>)
   2a0ac:	6120      	str	r0, [r4, #16]
	k_work_submit_to_queue(location_core_work_queue_get(),
   2a0ae:	f7ff fc43 	bl	29938 <location_core_work_queue_get>
   2a0b2:	4621      	mov	r1, r4
   2a0b4:	f00d f9b2 	bl	3741c <k_work_submit_to_queue>
			       &method_cellular_positioning_work.work_item);

	running = true;
   2a0b8:	2201      	movs	r2, #1
   2a0ba:	4b03      	ldr	r3, [pc, #12]	; (2a0c8 <method_cellular_location_get+0x24>)

	return 0;
}
   2a0bc:	2000      	movs	r0, #0
	running = true;
   2a0be:	701a      	strb	r2, [r3, #0]
}
   2a0c0:	bd10      	pop	{r4, pc}
   2a0c2:	bf00      	nop
   2a0c4:	200194bc 	.word	0x200194bc
   2a0c8:	2001c908 	.word	0x2001c908

0002a0cc <method_cellular_cancel>:

int method_cellular_cancel(void)
{
   2a0cc:	b538      	push	{r3, r4, r5, lr}
	if (running) {
   2a0ce:	4d09      	ldr	r5, [pc, #36]	; (2a0f4 <method_cellular_cancel+0x28>)
   2a0d0:	782b      	ldrb	r3, [r5, #0]
   2a0d2:	b15b      	cbz	r3, 2a0ec <method_cellular_cancel+0x20>
		(void)lte_lc_neighbor_cell_measurement_cancel();
		(void)k_work_cancel(&method_cellular_positioning_work.work_item);
		running = false;
   2a0d4:	2400      	movs	r4, #0
		(void)lte_lc_neighbor_cell_measurement_cancel();
   2a0d6:	f7fd fc2f 	bl	27938 <lte_lc_neighbor_cell_measurement_cancel>
		(void)k_work_cancel(&method_cellular_positioning_work.work_item);
   2a0da:	4807      	ldr	r0, [pc, #28]	; (2a0f8 <method_cellular_cancel+0x2c>)
   2a0dc:	f00d f9f8 	bl	374d0 <k_work_cancel>
		running = false;
   2a0e0:	702c      	strb	r4, [r5, #0]
	z_impl_k_sem_reset(sem);
   2a0e2:	4806      	ldr	r0, [pc, #24]	; (2a0fc <method_cellular_cancel+0x30>)
   2a0e4:	f00c ff7a 	bl	36fdc <z_impl_k_sem_reset>
		k_sem_reset(&cellmeas_data_ready);
	} else {
		return -EPERM;
	}

	return 0;
   2a0e8:	4620      	mov	r0, r4
}
   2a0ea:	bd38      	pop	{r3, r4, r5, pc}
		return -EPERM;
   2a0ec:	f04f 30ff 	mov.w	r0, #4294967295
   2a0f0:	e7fb      	b.n	2a0ea <method_cellular_cancel+0x1e>
   2a0f2:	bf00      	nop
   2a0f4:	2001c908 	.word	0x2001c908
   2a0f8:	200194bc 	.word	0x200194bc
   2a0fc:	20015018 	.word	0x20015018

0002a100 <method_cellular_init>:

int method_cellular_init(void)
{
   2a100:	b510      	push	{r4, lr}
	int ret;

	running = false;
   2a102:	2400      	movs	r4, #0
   2a104:	4b0d      	ldr	r3, [pc, #52]	; (2a13c <method_cellular_init+0x3c>)

	k_work_init(&method_cellular_positioning_work.work_item,
   2a106:	490e      	ldr	r1, [pc, #56]	; (2a140 <method_cellular_init+0x40>)
   2a108:	480e      	ldr	r0, [pc, #56]	; (2a144 <method_cellular_init+0x44>)
	running = false;
   2a10a:	701c      	strb	r4, [r3, #0]
	k_work_init(&method_cellular_positioning_work.work_item,
   2a10c:	f00d f92e 	bl	3736c <k_work_init>
		    method_cellular_positioning_work_fn);
	lte_lc_register_handler(method_cellular_lte_ind_handler);
   2a110:	480d      	ldr	r0, [pc, #52]	; (2a148 <method_cellular_init+0x48>)
   2a112:	f7fd f859 	bl	271c8 <lte_lc_register_handler>

	ret = multicell_location_provision_certificate(false);
   2a116:	4620      	mov	r0, r4
   2a118:	f7ff f8b8 	bl	2928c <multicell_location_provision_certificate>
	if (ret) {
   2a11c:	4604      	mov	r4, r0
   2a11e:	b158      	cbz	r0, 2a138 <method_cellular_init+0x38>
		LOG_ERR("Certificate provisioning failed, ret %d", ret);
   2a120:	4602      	mov	r2, r0
   2a122:	2145      	movs	r1, #69	; 0x45
   2a124:	4809      	ldr	r0, [pc, #36]	; (2a14c <method_cellular_init+0x4c>)
   2a126:	f012 fdd2 	bl	3ccce <z_log_minimal_printk>
		if (ret == -EACCES) {
   2a12a:	f114 0f0d 	cmn.w	r4, #13
   2a12e:	d103      	bne.n	2a138 <method_cellular_init+0x38>
			LOG_WRN("err: -EACCESS, that might indicate that modem is in state where "
   2a130:	2157      	movs	r1, #87	; 0x57
   2a132:	4807      	ldr	r0, [pc, #28]	; (2a150 <method_cellular_init+0x50>)
   2a134:	f012 fdcb 	bl	3ccce <z_log_minimal_printk>
		}
		return ret;
	}

	return 0;
}
   2a138:	4620      	mov	r0, r4
   2a13a:	bd10      	pop	{r4, pc}
   2a13c:	2001c908 	.word	0x2001c908
   2a140:	00029f21 	.word	0x00029f21
   2a144:	200194bc 	.word	0x200194bc
   2a148:	0002a03d 	.word	0x0002a03d
   2a14c:	00047bf2 	.word	0x00047bf2
   2a150:	00047c1f 	.word	0x00047c1f

0002a154 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
   2a154:	b508      	push	{r3, lr}
	if (ret != 0) {
   2a156:	b9d8      	cbnz	r0, 2a190 <on_modem_lib_init+0x3c>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   2a158:	480e      	ldr	r0, [pc, #56]	; (2a194 <on_modem_lib_init+0x40>)
   2a15a:	f7f3 f872 	bl	1d242 <strlen>
   2a15e:	b140      	cbz	r0, 2a172 <on_modem_lib_init+0x1e>
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		if (nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO) != 0) {
   2a160:	490c      	ldr	r1, [pc, #48]	; (2a194 <on_modem_lib_init+0x40>)
   2a162:	480d      	ldr	r0, [pc, #52]	; (2a198 <on_modem_lib_init+0x44>)
   2a164:	f00a ffec 	bl	35140 <nrf_modem_at_printf>
   2a168:	b118      	cbz	r0, 2a172 <on_modem_lib_init+0x1e>
			LOG_ERR("Failed to set MAGPIO configuration");
   2a16a:	2145      	movs	r1, #69	; 0x45
   2a16c:	480b      	ldr	r0, [pc, #44]	; (2a19c <on_modem_lib_init+0x48>)
   2a16e:	f012 fdae 	bl	3ccce <z_log_minimal_printk>
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
   2a172:	480b      	ldr	r0, [pc, #44]	; (2a1a0 <on_modem_lib_init+0x4c>)
   2a174:	f7f3 f865 	bl	1d242 <strlen>
   2a178:	b150      	cbz	r0, 2a190 <on_modem_lib_init+0x3c>
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		if (nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0) != 0) {
   2a17a:	4909      	ldr	r1, [pc, #36]	; (2a1a0 <on_modem_lib_init+0x4c>)
   2a17c:	4806      	ldr	r0, [pc, #24]	; (2a198 <on_modem_lib_init+0x44>)
   2a17e:	f00a ffdf 	bl	35140 <nrf_modem_at_printf>
   2a182:	b128      	cbz	r0, 2a190 <on_modem_lib_init+0x3c>
			LOG_ERR("Failed to set COEX0 configuration");
		}
	}
}
   2a184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			LOG_ERR("Failed to set COEX0 configuration");
   2a188:	2145      	movs	r1, #69	; 0x45
   2a18a:	4806      	ldr	r0, [pc, #24]	; (2a1a4 <on_modem_lib_init+0x50>)
   2a18c:	f012 bd9f 	b.w	3ccce <z_log_minimal_printk>
}
   2a190:	bd08      	pop	{r3, pc}
   2a192:	bf00      	nop
   2a194:	0004408e 	.word	0x0004408e
   2a198:	0004a4db 	.word	0x0004a4db
   2a19c:	00047c9a 	.word	0x00047c9a
   2a1a0:	000440ad 	.word	0x000440ad
   2a1a4:	00047cc2 	.word	0x00047cc2

0002a1a8 <json_item_string_exists>:
	return err;
}

static bool json_item_string_exists(const cJSON *const obj, const char *const key,
				    const char *const val)
{
   2a1a8:	b570      	push	{r4, r5, r6, lr}
   2a1aa:	460e      	mov	r6, r1
   2a1ac:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(obj != NULL);
   2a1ae:	4604      	mov	r4, r0
   2a1b0:	b950      	cbnz	r0, 2a1c8 <json_item_string_exists+0x20>
   2a1b2:	4911      	ldr	r1, [pc, #68]	; (2a1f8 <json_item_string_exists+0x50>)
   2a1b4:	4811      	ldr	r0, [pc, #68]	; (2a1fc <json_item_string_exists+0x54>)
   2a1b6:	f240 52a3 	movw	r2, #1443	; 0x5a3
   2a1ba:	f012 fd4e 	bl	3cc5a <assert_print>
   2a1be:	f240 51a3 	movw	r1, #1443	; 0x5a3
   2a1c2:	480d      	ldr	r0, [pc, #52]	; (2a1f8 <json_item_string_exists+0x50>)
   2a1c4:	f012 fd42 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(key != NULL);

	char *str_val;
	cJSON *item = cJSON_GetObjectItem(obj, key);
   2a1c8:	4631      	mov	r1, r6
   2a1ca:	4620      	mov	r0, r4
   2a1cc:	f015 fdb1 	bl	3fd32 <cJSON_GetObjectItem>

	if (!item) {
   2a1d0:	b148      	cbz	r0, 2a1e6 <json_item_string_exists+0x3e>
		return false;
	}

	if (!val) {
   2a1d2:	b92d      	cbnz	r5, 2a1e0 <json_item_string_exists+0x38>
		return cJSON_IsNull(item);
   2a1d4:	f015 fead 	bl	3ff32 <cJSON_IsNull>
   2a1d8:	3800      	subs	r0, #0
   2a1da:	bf18      	it	ne
   2a1dc:	2001      	movne	r0, #1
	if (!str_val) {
		return false;
	}

	return (strcmp(str_val, val) == 0);
}
   2a1de:	bd70      	pop	{r4, r5, r6, pc}
	str_val = cJSON_GetStringValue(item);
   2a1e0:	f015 febb 	bl	3ff5a <cJSON_GetStringValue>
	if (!str_val) {
   2a1e4:	b908      	cbnz	r0, 2a1ea <json_item_string_exists+0x42>
		return false;
   2a1e6:	2000      	movs	r0, #0
   2a1e8:	e7f9      	b.n	2a1de <json_item_string_exists+0x36>
	return (strcmp(str_val, val) == 0);
   2a1ea:	4629      	mov	r1, r5
   2a1ec:	f7f3 f81f 	bl	1d22e <strcmp>
   2a1f0:	fab0 f080 	clz	r0, r0
   2a1f4:	0940      	lsrs	r0, r0, #5
   2a1f6:	e7f2      	b.n	2a1de <json_item_string_exists+0x36>
   2a1f8:	00047cf7 	.word	0x00047cf7
   2a1fc:	00044263 	.word	0x00044263

0002a200 <nrf_cloud_decode_desired_obj>:
{
   2a200:	b538      	push	{r3, r4, r5, lr}
   2a202:	460c      	mov	r4, r1
	if ((root_obj != NULL) && (desired_obj != NULL)) {
   2a204:	4605      	mov	r5, r0
   2a206:	b140      	cbz	r0, 2a21a <nrf_cloud_decode_desired_obj+0x1a>
		state_obj = json_object_decode(root_obj, JSON_KEY_STATE);
   2a208:	4904      	ldr	r1, [pc, #16]	; (2a21c <nrf_cloud_decode_desired_obj+0x1c>)
   2a20a:	f015 fafc 	bl	3f806 <json_object_decode>
		if (state_obj == NULL) {
   2a20e:	b918      	cbnz	r0, 2a218 <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, JSON_KEY_DES);
   2a210:	4628      	mov	r0, r5
   2a212:	4903      	ldr	r1, [pc, #12]	; (2a220 <nrf_cloud_decode_desired_obj+0x20>)
   2a214:	f015 faf7 	bl	3f806 <json_object_decode>
			*desired_obj = state_obj;
   2a218:	6020      	str	r0, [r4, #0]
}
   2a21a:	bd38      	pop	{r3, r4, r5, pc}
   2a21c:	00047d36 	.word	0x00047d36
   2a220:	00047d3c 	.word	0x00047d3c

0002a224 <encode_info_item_cs>:
{
   2a224:	b570      	push	{r4, r5, r6, lr}
   2a226:	4605      	mov	r5, r0
	switch (inf) {
   2a228:	2d01      	cmp	r5, #1
{
   2a22a:	460c      	mov	r4, r1
   2a22c:	4610      	mov	r0, r2
   2a22e:	461e      	mov	r6, r3
	switch (inf) {
   2a230:	d003      	beq.n	2a23a <encode_info_item_cs+0x16>
   2a232:	2d02      	cmp	r5, #2
   2a234:	d01f      	beq.n	2a276 <encode_info_item_cs+0x52>
	return 0;
   2a236:	2000      	movs	r0, #0
   2a238:	e00a      	b.n	2a250 <encode_info_item_cs+0x2c>
		move_obj = cJSON_DetachItemFromObject(inf_obj, inf_name);
   2a23a:	f015 fda8 	bl	3fd8e <cJSON_DetachItemFromObject>
		if (!move_obj) {
   2a23e:	4605      	mov	r5, r0
   2a240:	b938      	cbnz	r0, 2a252 <encode_info_item_cs+0x2e>
			LOG_ERR("Info item \"%s\" not found", log_strdup(inf_name));
   2a242:	4811      	ldr	r0, [pc, #68]	; (2a288 <encode_info_item_cs+0x64>)
   2a244:	4622      	mov	r2, r4
   2a246:	2145      	movs	r1, #69	; 0x45
   2a248:	f012 fd41 	bl	3ccce <z_log_minimal_printk>
			return -ENOMSG;
   2a24c:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   2a250:	bd70      	pop	{r4, r5, r6, pc}
		if (json_add_obj_cs(root_obj, inf_name, move_obj)) {
   2a252:	4602      	mov	r2, r0
   2a254:	4621      	mov	r1, r4
   2a256:	4630      	mov	r0, r6
   2a258:	f015 fab8 	bl	3f7cc <json_add_obj_cs>
   2a25c:	2800      	cmp	r0, #0
   2a25e:	d0ea      	beq.n	2a236 <encode_info_item_cs+0x12>
			cJSON_Delete(move_obj);
   2a260:	4628      	mov	r0, r5
   2a262:	f007 ff07 	bl	32074 <cJSON_Delete>
			LOG_ERR("Failed to add info item \"%s\"", log_strdup(inf_name));
   2a266:	4622      	mov	r2, r4
   2a268:	2145      	movs	r1, #69	; 0x45
   2a26a:	4808      	ldr	r0, [pc, #32]	; (2a28c <encode_info_item_cs+0x68>)
			LOG_ERR("Failed to create NULL item for \"%s\"", log_strdup(inf_name));
   2a26c:	f012 fd2f 	bl	3ccce <z_log_minimal_printk>
			return -ENOMEM;
   2a270:	f06f 000b 	mvn.w	r0, #11
   2a274:	e7ec      	b.n	2a250 <encode_info_item_cs+0x2c>
		if (json_add_null_cs(root_obj, inf_name)) {
   2a276:	4618      	mov	r0, r3
   2a278:	f015 fac9 	bl	3f80e <json_add_null_cs>
   2a27c:	2800      	cmp	r0, #0
   2a27e:	d0da      	beq.n	2a236 <encode_info_item_cs+0x12>
			LOG_ERR("Failed to create NULL item for \"%s\"", log_strdup(inf_name));
   2a280:	4622      	mov	r2, r4
   2a282:	2145      	movs	r1, #69	; 0x45
   2a284:	4802      	ldr	r0, [pc, #8]	; (2a290 <encode_info_item_cs+0x6c>)
   2a286:	e7f1      	b.n	2a26c <encode_info_item_cs+0x48>
   2a288:	00047d44 	.word	0x00047d44
   2a28c:	00047d62 	.word	0x00047d62
   2a290:	00047d84 	.word	0x00047d84

0002a294 <get_error_code_value>:
{
   2a294:	b538      	push	{r3, r4, r5, lr}
   2a296:	460d      	mov	r5, r1
	err_obj = cJSON_GetObjectItem(obj, NRF_CLOUD_JSON_ERR_KEY);
   2a298:	490c      	ldr	r1, [pc, #48]	; (2a2cc <get_error_code_value+0x38>)
   2a29a:	f015 fd4a 	bl	3fd32 <cJSON_GetObjectItem>
	if (!err_obj) {
   2a29e:	4604      	mov	r4, r0
   2a2a0:	b188      	cbz	r0, 2a2c6 <get_error_code_value+0x32>
	if (!cJSON_IsNumber(err_obj)) {
   2a2a2:	f015 fe4c 	bl	3ff3e <cJSON_IsNumber>
   2a2a6:	b930      	cbnz	r0, 2a2b6 <get_error_code_value+0x22>
		LOG_WRN("Invalid JSON data type for error value");
   2a2a8:	4809      	ldr	r0, [pc, #36]	; (2a2d0 <get_error_code_value+0x3c>)
   2a2aa:	2157      	movs	r1, #87	; 0x57
   2a2ac:	f012 fd0f 	bl	3ccce <z_log_minimal_printk>
   2a2b0:	f06f 004c 	mvn.w	r0, #76	; 0x4c
}
   2a2b4:	bd38      	pop	{r3, r4, r5, pc}
	*err = (enum nrf_cloud_error)cJSON_GetNumberValue(err_obj);
   2a2b6:	4620      	mov	r0, r4
   2a2b8:	f007 ffaa 	bl	32210 <cJSON_GetNumberValue>
   2a2bc:	f7f2 fd2c 	bl	1cd18 <__aeabi_d2iz>
   2a2c0:	6028      	str	r0, [r5, #0]
	return 0;
   2a2c2:	2000      	movs	r0, #0
   2a2c4:	e7f6      	b.n	2a2b4 <get_error_code_value+0x20>
		return -ENOMSG;
   2a2c6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2a2ca:	e7f3      	b.n	2a2b4 <get_error_code_value+0x20>
   2a2cc:	00047dad 	.word	0x00047dad
   2a2d0:	00047db1 	.word	0x00047db1

0002a2d4 <nrf_cloud_codec_init>:
{
   2a2d4:	b510      	push	{r4, lr}
	if (!initialized) {
   2a2d6:	4c04      	ldr	r4, [pc, #16]	; (2a2e8 <nrf_cloud_codec_init+0x14>)
   2a2d8:	7823      	ldrb	r3, [r4, #0]
   2a2da:	b91b      	cbnz	r3, 2a2e4 <nrf_cloud_codec_init+0x10>
		cJSON_Init();
   2a2dc:	f007 ffac 	bl	32238 <cJSON_Init>
		initialized = true;
   2a2e0:	2301      	movs	r3, #1
   2a2e2:	7023      	strb	r3, [r4, #0]
}
   2a2e4:	2000      	movs	r0, #0
   2a2e6:	bd10      	pop	{r4, pc}
   2a2e8:	2001c909 	.word	0x2001c909

0002a2ec <json_create_req_obj>:
{
   2a2ec:	b570      	push	{r4, r5, r6, lr}
   2a2ee:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(app_id != NULL);
   2a2f0:	4606      	mov	r6, r0
   2a2f2:	b940      	cbnz	r0, 2a306 <json_create_req_obj+0x1a>
   2a2f4:	4915      	ldr	r1, [pc, #84]	; (2a34c <json_create_req_obj+0x60>)
   2a2f6:	4816      	ldr	r0, [pc, #88]	; (2a350 <json_create_req_obj+0x64>)
   2a2f8:	2266      	movs	r2, #102	; 0x66
   2a2fa:	f012 fcae 	bl	3cc5a <assert_print>
   2a2fe:	2166      	movs	r1, #102	; 0x66
   2a300:	4812      	ldr	r0, [pc, #72]	; (2a34c <json_create_req_obj+0x60>)
   2a302:	f012 fca3 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(msg_type != NULL);
   2a306:	b945      	cbnz	r5, 2a31a <json_create_req_obj+0x2e>
   2a308:	4910      	ldr	r1, [pc, #64]	; (2a34c <json_create_req_obj+0x60>)
   2a30a:	4811      	ldr	r0, [pc, #68]	; (2a350 <json_create_req_obj+0x64>)
   2a30c:	2267      	movs	r2, #103	; 0x67
   2a30e:	f012 fca4 	bl	3cc5a <assert_print>
   2a312:	2167      	movs	r1, #103	; 0x67
   2a314:	480d      	ldr	r0, [pc, #52]	; (2a34c <json_create_req_obj+0x60>)
   2a316:	f012 fc99 	bl	3cc4c <assert_post_action>
	nrf_cloud_codec_init();
   2a31a:	f7ff ffdb 	bl	2a2d4 <nrf_cloud_codec_init>
	cJSON *req_obj = cJSON_CreateObject();
   2a31e:	f007 ff6b 	bl	321f8 <cJSON_CreateObject>
	if (!cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_APPID_KEY, app_id) ||
   2a322:	4632      	mov	r2, r6
   2a324:	490b      	ldr	r1, [pc, #44]	; (2a354 <json_create_req_obj+0x68>)
	cJSON *req_obj = cJSON_CreateObject();
   2a326:	4604      	mov	r4, r0
	if (!cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_APPID_KEY, app_id) ||
   2a328:	f015 fd99 	bl	3fe5e <cJSON_AddStringToObject>
   2a32c:	b928      	cbnz	r0, 2a33a <json_create_req_obj+0x4e>
		cJSON_Delete(req_obj);
   2a32e:	4620      	mov	r0, r4
   2a330:	f007 fea0 	bl	32074 <cJSON_Delete>
		req_obj = NULL;
   2a334:	2400      	movs	r4, #0
}
   2a336:	4620      	mov	r0, r4
   2a338:	bd70      	pop	{r4, r5, r6, pc}
	    !cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
   2a33a:	462a      	mov	r2, r5
   2a33c:	4620      	mov	r0, r4
   2a33e:	4906      	ldr	r1, [pc, #24]	; (2a358 <json_create_req_obj+0x6c>)
   2a340:	f015 fd8d 	bl	3fe5e <cJSON_AddStringToObject>
	if (!cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_APPID_KEY, app_id) ||
   2a344:	2800      	cmp	r0, #0
   2a346:	d1f6      	bne.n	2a336 <json_create_req_obj+0x4a>
   2a348:	e7f1      	b.n	2a32e <json_create_req_obj+0x42>
   2a34a:	bf00      	nop
   2a34c:	00047cf7 	.word	0x00047cf7
   2a350:	00044263 	.word	0x00044263
   2a354:	000437b2 	.word	0x000437b2
   2a358:	00043803 	.word	0x00043803

0002a35c <nrf_cloud_json_add_modem_info>:
{
   2a35c:	b530      	push	{r4, r5, lr}
	__ASSERT_NO_MSG(data_obj != NULL);
   2a35e:	4605      	mov	r5, r0
{
   2a360:	f6ad 1d5c 	subw	sp, sp, #2396	; 0x95c
	__ASSERT_NO_MSG(data_obj != NULL);
   2a364:	b940      	cbnz	r0, 2a378 <nrf_cloud_json_add_modem_info+0x1c>
   2a366:	493f      	ldr	r1, [pc, #252]	; (2a464 <nrf_cloud_json_add_modem_info+0x108>)
   2a368:	483f      	ldr	r0, [pc, #252]	; (2a468 <nrf_cloud_json_add_modem_info+0x10c>)
   2a36a:	22bc      	movs	r2, #188	; 0xbc
   2a36c:	f012 fc75 	bl	3cc5a <assert_print>
   2a370:	21bc      	movs	r1, #188	; 0xbc
   2a372:	483c      	ldr	r0, [pc, #240]	; (2a464 <nrf_cloud_json_add_modem_info+0x108>)
   2a374:	f012 fc6a 	bl	3cc4c <assert_post_action>
	struct modem_param_info modem_info = {0};
   2a378:	f640 1258 	movw	r2, #2392	; 0x958
   2a37c:	2100      	movs	r1, #0
   2a37e:	4668      	mov	r0, sp
   2a380:	f017 f93f 	bl	41602 <memset>
	int err = modem_info_init();
   2a384:	f7fe f94a 	bl	2861c <modem_info_init>
	if (err) {
   2a388:	4604      	mov	r4, r0
   2a38a:	b140      	cbz	r0, 2a39e <nrf_cloud_json_add_modem_info+0x42>
		LOG_ERR("Could not initialize modem info module, error: %d",
   2a38c:	2145      	movs	r1, #69	; 0x45
   2a38e:	4602      	mov	r2, r0
   2a390:	4836      	ldr	r0, [pc, #216]	; (2a46c <nrf_cloud_json_add_modem_info+0x110>)
		LOG_ERR("Could not initialize modem info parameters, error: %d",
   2a392:	f012 fc9c 	bl	3ccce <z_log_minimal_printk>
}
   2a396:	4620      	mov	r0, r4
   2a398:	f60d 1d5c 	addw	sp, sp, #2396	; 0x95c
   2a39c:	bd30      	pop	{r4, r5, pc}
	err = modem_info_params_init(modem_info);
   2a39e:	4668      	mov	r0, sp
   2a3a0:	f7fe f974 	bl	2868c <modem_info_params_init>
	if (err) {
   2a3a4:	4604      	mov	r4, r0
   2a3a6:	b118      	cbz	r0, 2a3b0 <nrf_cloud_json_add_modem_info+0x54>
		LOG_ERR("Could not initialize modem info parameters, error: %d",
   2a3a8:	4602      	mov	r2, r0
   2a3aa:	2145      	movs	r1, #69	; 0x45
   2a3ac:	4830      	ldr	r0, [pc, #192]	; (2a470 <nrf_cloud_json_add_modem_info+0x114>)
   2a3ae:	e7f0      	b.n	2a392 <nrf_cloud_json_add_modem_info+0x36>
	err = modem_info_params_get(modem_info);
   2a3b0:	4668      	mov	r0, sp
   2a3b2:	f7fe f9c1 	bl	28738 <modem_info_params_get>
	if (err) {
   2a3b6:	4604      	mov	r4, r0
   2a3b8:	2800      	cmp	r0, #0
   2a3ba:	d14f      	bne.n	2a45c <nrf_cloud_json_add_modem_info+0x100>
	__ASSERT_NO_MSG(data_obj != NULL);
   2a3bc:	b945      	cbnz	r5, 2a3d0 <nrf_cloud_json_add_modem_info+0x74>
   2a3be:	4929      	ldr	r1, [pc, #164]	; (2a464 <nrf_cloud_json_add_modem_info+0x108>)
   2a3c0:	4829      	ldr	r0, [pc, #164]	; (2a468 <nrf_cloud_json_add_modem_info+0x10c>)
   2a3c2:	22a7      	movs	r2, #167	; 0xa7
   2a3c4:	f012 fc49 	bl	3cc5a <assert_print>
   2a3c8:	21a7      	movs	r1, #167	; 0xa7
   2a3ca:	4826      	ldr	r0, [pc, #152]	; (2a464 <nrf_cloud_json_add_modem_info+0x108>)
   2a3cc:	f012 fc3e 	bl	3cc4c <assert_post_action>
	if (json_add_num_cs(data_obj, NRF_CLOUD_JSON_MCC_KEY,
   2a3d0:	f8bd 01c0 	ldrh.w	r0, [sp, #448]	; 0x1c0
   2a3d4:	f7f2 f976 	bl	1c6c4 <__aeabi_ui2d>
   2a3d8:	4602      	mov	r2, r0
   2a3da:	460b      	mov	r3, r1
   2a3dc:	4628      	mov	r0, r5
   2a3de:	4925      	ldr	r1, [pc, #148]	; (2a474 <nrf_cloud_json_add_modem_info+0x118>)
   2a3e0:	f015 f9e7 	bl	3f7b2 <json_add_num_cs>
   2a3e4:	2800      	cmp	r0, #0
   2a3e6:	d136      	bne.n	2a456 <nrf_cloud_json_add_modem_info+0xfa>
	    json_add_num_cs(data_obj, NRF_CLOUD_JSON_MNC_KEY,
   2a3e8:	f8bd 0230 	ldrh.w	r0, [sp, #560]	; 0x230
   2a3ec:	f7f2 f96a 	bl	1c6c4 <__aeabi_ui2d>
   2a3f0:	4602      	mov	r2, r0
   2a3f2:	460b      	mov	r3, r1
   2a3f4:	4628      	mov	r0, r5
   2a3f6:	4920      	ldr	r1, [pc, #128]	; (2a478 <nrf_cloud_json_add_modem_info+0x11c>)
   2a3f8:	f015 f9db 	bl	3f7b2 <json_add_num_cs>
		modem_info->network.mcc.value) ||
   2a3fc:	bb58      	cbnz	r0, 2a456 <nrf_cloud_json_add_modem_info+0xfa>
	    json_add_num_cs(data_obj, NRF_CLOUD_JSON_AREA_CODE_KEY,
   2a3fe:	f8bd 00e0 	ldrh.w	r0, [sp, #224]	; 0xe0
   2a402:	f7f2 f95f 	bl	1c6c4 <__aeabi_ui2d>
   2a406:	4602      	mov	r2, r0
   2a408:	460b      	mov	r3, r1
   2a40a:	4628      	mov	r0, r5
   2a40c:	491b      	ldr	r1, [pc, #108]	; (2a47c <nrf_cloud_json_add_modem_info+0x120>)
   2a40e:	f015 f9d0 	bl	3f7b2 <json_add_num_cs>
		modem_info->network.mnc.value) ||
   2a412:	bb00      	cbnz	r0, 2a456 <nrf_cloud_json_add_modem_info+0xfa>
		(uint32_t)modem_info->network.cellid_dec) ||
   2a414:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
   2a418:	e9d3 0100 	ldrd	r0, r1, [r3]
   2a41c:	f7f2 fca4 	bl	1cd68 <__aeabi_d2uiz>
	    json_add_num_cs(data_obj, NRF_CLOUD_JSON_CELL_ID_KEY,
   2a420:	f7f2 f950 	bl	1c6c4 <__aeabi_ui2d>
   2a424:	4602      	mov	r2, r0
   2a426:	460b      	mov	r3, r1
   2a428:	4628      	mov	r0, r5
   2a42a:	4915      	ldr	r1, [pc, #84]	; (2a480 <nrf_cloud_json_add_modem_info+0x124>)
   2a42c:	f015 f9c1 	bl	3f7b2 <json_add_num_cs>
		modem_info->network.area_code.value) ||
   2a430:	b988      	cbnz	r0, 2a456 <nrf_cloud_json_add_modem_info+0xfa>
		RSRP_ADJ(modem_info->network.rsrp.value))) {
   2a432:	f8bd 3620 	ldrh.w	r3, [sp, #1568]	; 0x620
   2a436:	2b00      	cmp	r3, #0
   2a438:	bf0c      	ite	eq
   2a43a:	208c      	moveq	r0, #140	; 0x8c
   2a43c:	208d      	movne	r0, #141	; 0x8d
	    json_add_num_cs(data_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRP,
   2a43e:	1a18      	subs	r0, r3, r0
   2a440:	f7f2 f950 	bl	1c6e4 <__aeabi_i2d>
   2a444:	4602      	mov	r2, r0
   2a446:	460b      	mov	r3, r1
   2a448:	4628      	mov	r0, r5
   2a44a:	490e      	ldr	r1, [pc, #56]	; (2a484 <nrf_cloud_json_add_modem_info+0x128>)
   2a44c:	f015 f9b1 	bl	3f7b2 <json_add_num_cs>
		(uint32_t)modem_info->network.cellid_dec) ||
   2a450:	4604      	mov	r4, r0
   2a452:	2800      	cmp	r0, #0
   2a454:	d09f      	beq.n	2a396 <nrf_cloud_json_add_modem_info+0x3a>
		return -ENOMEM;
   2a456:	f06f 040b 	mvn.w	r4, #11
   2a45a:	e79c      	b.n	2a396 <nrf_cloud_json_add_modem_info+0x3a>
		LOG_ERR("Could not obtain cell information, error: %d",
   2a45c:	4602      	mov	r2, r0
   2a45e:	2145      	movs	r1, #69	; 0x45
   2a460:	4809      	ldr	r0, [pc, #36]	; (2a488 <nrf_cloud_json_add_modem_info+0x12c>)
   2a462:	e796      	b.n	2a392 <nrf_cloud_json_add_modem_info+0x36>
   2a464:	00047cf7 	.word	0x00047cf7
   2a468:	00044263 	.word	0x00044263
   2a46c:	00047ddd 	.word	0x00047ddd
   2a470:	00047e14 	.word	0x00047e14
   2a474:	00046394 	.word	0x00046394
   2a478:	0004639b 	.word	0x0004639b
   2a47c:	00047e81 	.word	0x00047e81
   2a480:	00047e85 	.word	0x00047e85
   2a484:	0004629b 	.word	0x0004629b
   2a488:	00047e4f 	.word	0x00047e4f

0002a48c <nrf_cloud_decode_requested_state>:
{
   2a48c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a48e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   2a490:	460e      	mov	r6, r1
   2a492:	b951      	cbnz	r1, 2a4aa <nrf_cloud_decode_requested_state+0x1e>
   2a494:	4946      	ldr	r1, [pc, #280]	; (2a5b0 <nrf_cloud_decode_requested_state+0x124>)
   2a496:	4847      	ldr	r0, [pc, #284]	; (2a5b4 <nrf_cloud_decode_requested_state+0x128>)
   2a498:	f44f 72bc 	mov.w	r2, #376	; 0x178
   2a49c:	f012 fbdd 	bl	3cc5a <assert_print>
   2a4a0:	f44f 71bc 	mov.w	r1, #376	; 0x178
   2a4a4:	4842      	ldr	r0, [pc, #264]	; (2a5b0 <nrf_cloud_decode_requested_state+0x124>)
   2a4a6:	f012 fbd1 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2a4aa:	b954      	cbnz	r4, 2a4c2 <nrf_cloud_decode_requested_state+0x36>
   2a4ac:	4940      	ldr	r1, [pc, #256]	; (2a5b0 <nrf_cloud_decode_requested_state+0x124>)
   2a4ae:	4841      	ldr	r0, [pc, #260]	; (2a5b4 <nrf_cloud_decode_requested_state+0x128>)
   2a4b0:	f240 1279 	movw	r2, #377	; 0x179
   2a4b4:	f012 fbd1 	bl	3cc5a <assert_print>
   2a4b8:	f240 1179 	movw	r1, #377	; 0x179
   2a4bc:	483c      	ldr	r0, [pc, #240]	; (2a5b0 <nrf_cloud_decode_requested_state+0x124>)
   2a4be:	f012 fbc5 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2a4c2:	6863      	ldr	r3, [r4, #4]
   2a4c4:	b953      	cbnz	r3, 2a4dc <nrf_cloud_decode_requested_state+0x50>
   2a4c6:	493a      	ldr	r1, [pc, #232]	; (2a5b0 <nrf_cloud_decode_requested_state+0x124>)
   2a4c8:	483a      	ldr	r0, [pc, #232]	; (2a5b4 <nrf_cloud_decode_requested_state+0x128>)
   2a4ca:	f44f 72bd 	mov.w	r2, #378	; 0x17a
   2a4ce:	f012 fbc4 	bl	3cc5a <assert_print>
   2a4d2:	f44f 71bd 	mov.w	r1, #378	; 0x17a
   2a4d6:	4836      	ldr	r0, [pc, #216]	; (2a5b0 <nrf_cloud_decode_requested_state+0x124>)
   2a4d8:	f012 fbb8 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2a4dc:	6823      	ldr	r3, [r4, #0]
   2a4de:	b953      	cbnz	r3, 2a4f6 <nrf_cloud_decode_requested_state+0x6a>
   2a4e0:	4933      	ldr	r1, [pc, #204]	; (2a5b0 <nrf_cloud_decode_requested_state+0x124>)
   2a4e2:	4834      	ldr	r0, [pc, #208]	; (2a5b4 <nrf_cloud_decode_requested_state+0x128>)
   2a4e4:	f240 127b 	movw	r2, #379	; 0x17b
   2a4e8:	f012 fbb7 	bl	3cc5a <assert_print>
   2a4ec:	f240 117b 	movw	r1, #379	; 0x17b
   2a4f0:	482f      	ldr	r0, [pc, #188]	; (2a5b0 <nrf_cloud_decode_requested_state+0x124>)
   2a4f2:	f012 fbab 	bl	3cc4c <assert_post_action>
	root_obj = cJSON_Parse(input->ptr);
   2a4f6:	6860      	ldr	r0, [r4, #4]
   2a4f8:	f015 fc06 	bl	3fd08 <cJSON_Parse>
	if (root_obj == NULL) {
   2a4fc:	4605      	mov	r5, r0
   2a4fe:	b938      	cbnz	r0, 2a510 <nrf_cloud_decode_requested_state+0x84>
		LOG_ERR("cJSON_Parse failed: %s",
   2a500:	2145      	movs	r1, #69	; 0x45
   2a502:	6862      	ldr	r2, [r4, #4]
   2a504:	482c      	ldr	r0, [pc, #176]	; (2a5b8 <nrf_cloud_decode_requested_state+0x12c>)
   2a506:	f012 fbe2 	bl	3ccce <z_log_minimal_printk>
		return -ENOENT;
   2a50a:	f06f 0401 	mvn.w	r4, #1
   2a50e:	e010      	b.n	2a532 <nrf_cloud_decode_requested_state+0xa6>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2a510:	a901      	add	r1, sp, #4
   2a512:	f7ff fe75 	bl	2a200 <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, JSON_KEY_TOPIC_PRFX);
   2a516:	4929      	ldr	r1, [pc, #164]	; (2a5bc <nrf_cloud_decode_requested_state+0x130>)
   2a518:	9801      	ldr	r0, [sp, #4]
   2a51a:	f015 f974 	bl	3f806 <json_object_decode>
	if (topic_prefix_obj != NULL) {
   2a51e:	b158      	cbz	r0, 2a538 <nrf_cloud_decode_requested_state+0xac>
		nct_set_topic_prefix(topic_prefix_obj->valuestring);
   2a520:	6900      	ldr	r0, [r0, #16]
   2a522:	f001 fe7d 	bl	2c220 <nct_set_topic_prefix>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2a526:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   2a528:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2a52a:	7033      	strb	r3, [r6, #0]
		cJSON_Delete(root_obj);
   2a52c:	f007 fda2 	bl	32074 <cJSON_Delete>
		return 0;
   2a530:	2400      	movs	r4, #0
}
   2a532:	4620      	mov	r0, r4
   2a534:	b002      	add	sp, #8
   2a536:	bd70      	pop	{r4, r5, r6, pc}
	pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   2a538:	4921      	ldr	r1, [pc, #132]	; (2a5c0 <nrf_cloud_decode_requested_state+0x134>)
   2a53a:	9801      	ldr	r0, [sp, #4]
   2a53c:	f015 f963 	bl	3f806 <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2a540:	4920      	ldr	r1, [pc, #128]	; (2a5c4 <nrf_cloud_decode_requested_state+0x138>)
   2a542:	f015 f960 	bl	3f806 <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   2a546:	b110      	cbz	r0, 2a54e <nrf_cloud_decode_requested_state+0xc2>
   2a548:	68c3      	ldr	r3, [r0, #12]
   2a54a:	2b10      	cmp	r3, #16
   2a54c:	d014      	beq.n	2a578 <nrf_cloud_decode_requested_state+0xec>
		if (cJSON_HasObjectItem(desired_obj, JSON_KEY_CFG) == false) {
   2a54e:	491e      	ldr	r1, [pc, #120]	; (2a5c8 <nrf_cloud_decode_requested_state+0x13c>)
   2a550:	9801      	ldr	r0, [sp, #4]
   2a552:	f015 fbf1 	bl	3fd38 <cJSON_HasObjectItem>
   2a556:	b958      	cbnz	r0, 2a570 <nrf_cloud_decode_requested_state+0xe4>
			LOG_WRN("Unhandled data received from nRF Cloud.");
   2a558:	2157      	movs	r1, #87	; 0x57
   2a55a:	481c      	ldr	r0, [pc, #112]	; (2a5cc <nrf_cloud_decode_requested_state+0x140>)
   2a55c:	f012 fbb7 	bl	3ccce <z_log_minimal_printk>
			LOG_INF("Ensure device firmware is up to date.");
   2a560:	2149      	movs	r1, #73	; 0x49
   2a562:	481b      	ldr	r0, [pc, #108]	; (2a5d0 <nrf_cloud_decode_requested_state+0x144>)
   2a564:	f012 fbb3 	bl	3ccce <z_log_minimal_printk>
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
   2a568:	2149      	movs	r1, #73	; 0x49
   2a56a:	481a      	ldr	r0, [pc, #104]	; (2a5d4 <nrf_cloud_decode_requested_state+0x148>)
   2a56c:	f012 fbaf 	bl	3ccce <z_log_minimal_printk>
		cJSON_Delete(root_obj);
   2a570:	4628      	mov	r0, r5
   2a572:	f007 fd7f 	bl	32074 <cJSON_Delete>
   2a576:	e7c8      	b.n	2a50a <nrf_cloud_decode_requested_state+0x7e>
	const char *state_str = pairing_state_obj->valuestring;
   2a578:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   2a57a:	4817      	ldr	r0, [pc, #92]	; (2a5d8 <nrf_cloud_decode_requested_state+0x14c>)
   2a57c:	f7f2 fe61 	bl	1d242 <strlen>
   2a580:	4915      	ldr	r1, [pc, #84]	; (2a5d8 <nrf_cloud_decode_requested_state+0x14c>)
   2a582:	4602      	mov	r2, r0
   2a584:	4620      	mov	r0, r4
   2a586:	f017 fa0f 	bl	419a8 <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   2a58a:	4604      	mov	r4, r0
   2a58c:	b928      	cbnz	r0, 2a59a <nrf_cloud_decode_requested_state+0x10e>
		(*requested_state) = STATE_UA_PIN_WAIT;
   2a58e:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   2a590:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_WAIT;
   2a592:	7033      	strb	r3, [r6, #0]
	cJSON_Delete(root_obj);
   2a594:	f007 fd6e 	bl	32074 <cJSON_Delete>
	return 0;
   2a598:	e7cb      	b.n	2a532 <nrf_cloud_decode_requested_state+0xa6>
		LOG_ERR("Deprecated state. Delete device from nRF Cloud and update device with JITP certificates.");
   2a59a:	2145      	movs	r1, #69	; 0x45
   2a59c:	480f      	ldr	r0, [pc, #60]	; (2a5dc <nrf_cloud_decode_requested_state+0x150>)
   2a59e:	f012 fb96 	bl	3ccce <z_log_minimal_printk>
		cJSON_Delete(root_obj);
   2a5a2:	4628      	mov	r0, r5
   2a5a4:	f007 fd66 	bl	32074 <cJSON_Delete>
		return -ENOTSUP;
   2a5a8:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2a5ac:	e7c1      	b.n	2a532 <nrf_cloud_decode_requested_state+0xa6>
   2a5ae:	bf00      	nop
   2a5b0:	00047cf7 	.word	0x00047cf7
   2a5b4:	00044263 	.word	0x00044263
   2a5b8:	00047e92 	.word	0x00047e92
   2a5bc:	00047eae 	.word	0x00047eae
   2a5c0:	00047ec9 	.word	0x00047ec9
   2a5c4:	00047d36 	.word	0x00047d36
   2a5c8:	00047ed1 	.word	0x00047ed1
   2a5cc:	00047ed8 	.word	0x00047ed8
   2a5d0:	00047f05 	.word	0x00047f05
   2a5d4:	00047f30 	.word	0x00047f30
   2a5d8:	00047f70 	.word	0x00047f70
   2a5dc:	00047f7f 	.word	0x00047f7f

0002a5e0 <nrf_cloud_encode_config_response>:
{
   2a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a5e4:	4604      	mov	r4, r0
   2a5e6:	4690      	mov	r8, r2
	__ASSERT_NO_MSG(output != NULL);
   2a5e8:	460e      	mov	r6, r1
   2a5ea:	b951      	cbnz	r1, 2a602 <nrf_cloud_encode_config_response+0x22>
   2a5ec:	4943      	ldr	r1, [pc, #268]	; (2a6fc <nrf_cloud_encode_config_response+0x11c>)
   2a5ee:	4844      	ldr	r0, [pc, #272]	; (2a700 <nrf_cloud_encode_config_response+0x120>)
   2a5f0:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   2a5f4:	f012 fb31 	bl	3cc5a <assert_print>
   2a5f8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   2a5fc:	483f      	ldr	r0, [pc, #252]	; (2a6fc <nrf_cloud_encode_config_response+0x11c>)
   2a5fe:	f012 fb25 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2a602:	2c00      	cmp	r4, #0
   2a604:	d14e      	bne.n	2a6a4 <nrf_cloud_encode_config_response+0xc4>
   2a606:	493d      	ldr	r1, [pc, #244]	; (2a6fc <nrf_cloud_encode_config_response+0x11c>)
   2a608:	483d      	ldr	r0, [pc, #244]	; (2a700 <nrf_cloud_encode_config_response+0x120>)
   2a60a:	f240 12c9 	movw	r2, #457	; 0x1c9
   2a60e:	f012 fb24 	bl	3cc5a <assert_print>
   2a612:	f240 11c9 	movw	r1, #457	; 0x1c9
   2a616:	4839      	ldr	r0, [pc, #228]	; (2a6fc <nrf_cloud_encode_config_response+0x11c>)
   2a618:	f012 fb18 	bl	3cc4c <assert_post_action>
		return -ESRCH; /* invalid input or no JSON parsed */
   2a61c:	f06f 0402 	mvn.w	r4, #2
   2a620:	e068      	b.n	2a6f4 <nrf_cloud_encode_config_response+0x114>
	root_obj = cJSON_CreateObject();
   2a622:	f007 fde9 	bl	321f8 <cJSON_CreateObject>
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   2a626:	4937      	ldr	r1, [pc, #220]	; (2a704 <nrf_cloud_encode_config_response+0x124>)
	root_obj = cJSON_CreateObject();
   2a628:	4680      	mov	r8, r0
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   2a62a:	f015 fc58 	bl	3fede <cJSON_AddObjectToObjectCS>
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2a62e:	4936      	ldr	r1, [pc, #216]	; (2a708 <nrf_cloud_encode_config_response+0x128>)
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   2a630:	4681      	mov	r9, r0
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2a632:	4640      	mov	r0, r8
   2a634:	f015 fc53 	bl	3fede <cJSON_AddObjectToObjectCS>
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   2a638:	4934      	ldr	r1, [pc, #208]	; (2a70c <nrf_cloud_encode_config_response+0x12c>)
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2a63a:	4604      	mov	r4, r0
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   2a63c:	4648      	mov	r0, r9
   2a63e:	f015 f8e6 	bl	3f80e <json_add_null_cs>
   2a642:	b148      	cbz	r0, 2a658 <nrf_cloud_encode_config_response+0x78>
		cJSON_Delete(root_obj);
   2a644:	4640      	mov	r0, r8
   2a646:	f007 fd15 	bl	32074 <cJSON_Delete>
		cJSON_Delete(config_obj);
   2a64a:	4638      	mov	r0, r7
   2a64c:	f007 fd12 	bl	32074 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2a650:	4628      	mov	r0, r5
		cJSON_Delete(root_obj);
   2a652:	f007 fd0f 	bl	32074 <cJSON_Delete>
	if (buffer == NULL) {
   2a656:	e01a      	b.n	2a68e <nrf_cloud_encode_config_response+0xae>
	    json_add_obj_cs(reported_obj, JSON_KEY_CFG, config_obj)) {
   2a658:	4620      	mov	r0, r4
   2a65a:	463a      	mov	r2, r7
   2a65c:	492b      	ldr	r1, [pc, #172]	; (2a70c <nrf_cloud_encode_config_response+0x12c>)
   2a65e:	f015 f8b5 	bl	3f7cc <json_add_obj_cs>
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   2a662:	4604      	mov	r4, r0
   2a664:	2800      	cmp	r0, #0
   2a666:	d1ed      	bne.n	2a644 <nrf_cloud_encode_config_response+0x64>
	cJSON_Delete(state_obj);
   2a668:	4628      	mov	r0, r5
   2a66a:	f007 fd03 	bl	32074 <cJSON_Delete>
	state_obj = cJSON_CreateObject();
   2a66e:	f007 fdc3 	bl	321f8 <cJSON_CreateObject>
	if (state_obj) {
   2a672:	4607      	mov	r7, r0
   2a674:	b170      	cbz	r0, 2a694 <nrf_cloud_encode_config_response+0xb4>
		(void)json_add_obj_cs(state_obj, JSON_KEY_STATE, root_obj);
   2a676:	4642      	mov	r2, r8
   2a678:	4925      	ldr	r1, [pc, #148]	; (2a710 <nrf_cloud_encode_config_response+0x130>)
   2a67a:	f015 f8a7 	bl	3f7cc <json_add_obj_cs>
		buffer = cJSON_PrintUnformatted(state_obj);
   2a67e:	4638      	mov	r0, r7
   2a680:	f015 fb46 	bl	3fd10 <cJSON_PrintUnformatted>
   2a684:	4605      	mov	r5, r0
		cJSON_Delete(state_obj);
   2a686:	4638      	mov	r0, r7
   2a688:	f007 fcf4 	bl	32074 <cJSON_Delete>
	if (buffer == NULL) {
   2a68c:	b925      	cbnz	r5, 2a698 <nrf_cloud_encode_config_response+0xb8>
		return -ENOMEM;
   2a68e:	f06f 040b 	mvn.w	r4, #11
   2a692:	e02f      	b.n	2a6f4 <nrf_cloud_encode_config_response+0x114>
		cJSON_Delete(root_obj);
   2a694:	4640      	mov	r0, r8
   2a696:	e7dc      	b.n	2a652 <nrf_cloud_encode_config_response+0x72>
	output->len = strlen(buffer);
   2a698:	4628      	mov	r0, r5
	output->ptr = buffer;
   2a69a:	6075      	str	r5, [r6, #4]
	output->len = strlen(buffer);
   2a69c:	f7f2 fdd1 	bl	1d242 <strlen>
   2a6a0:	6030      	str	r0, [r6, #0]
	return 0;
   2a6a2:	e027      	b.n	2a6f4 <nrf_cloud_encode_config_response+0x114>
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   2a6a4:	6860      	ldr	r0, [r4, #4]
   2a6a6:	f015 fb2f 	bl	3fd08 <cJSON_Parse>
	if (input_obj == NULL) {
   2a6aa:	4604      	mov	r4, r0
   2a6ac:	2800      	cmp	r0, #0
   2a6ae:	d0b5      	beq.n	2a61c <nrf_cloud_encode_config_response+0x3c>
	state_obj = cJSON_DetachItemFromObject(input_obj, JSON_KEY_STATE);
   2a6b0:	4917      	ldr	r1, [pc, #92]	; (2a710 <nrf_cloud_encode_config_response+0x130>)
   2a6b2:	f015 fb6c 	bl	3fd8e <cJSON_DetachItemFromObject>
	config_obj = cJSON_DetachItemFromObject(
   2a6b6:	1e05      	subs	r5, r0, #0
   2a6b8:	bf14      	ite	ne
   2a6ba:	4628      	movne	r0, r5
   2a6bc:	4620      	moveq	r0, r4
   2a6be:	4913      	ldr	r1, [pc, #76]	; (2a70c <nrf_cloud_encode_config_response+0x12c>)
   2a6c0:	f015 fb65 	bl	3fd8e <cJSON_DetachItemFromObject>
   2a6c4:	4607      	mov	r7, r0
	cJSON_Delete(input_obj);
   2a6c6:	4620      	mov	r0, r4
   2a6c8:	f007 fcd4 	bl	32074 <cJSON_Delete>
	if (has_config) {
   2a6cc:	f1b8 0f00 	cmp.w	r8, #0
   2a6d0:	d004      	beq.n	2a6dc <nrf_cloud_encode_config_response+0xfc>
		*has_config = (config_obj != NULL);
   2a6d2:	1e3b      	subs	r3, r7, #0
   2a6d4:	bf18      	it	ne
   2a6d6:	2301      	movne	r3, #1
   2a6d8:	f888 3000 	strb.w	r3, [r8]
	if ((state_obj == NULL) || (config_obj == NULL)) {
   2a6dc:	b10d      	cbz	r5, 2a6e2 <nrf_cloud_encode_config_response+0x102>
   2a6de:	2f00      	cmp	r7, #0
   2a6e0:	d19f      	bne.n	2a622 <nrf_cloud_encode_config_response+0x42>
		output->ptr = NULL;
   2a6e2:	2400      	movs	r4, #0
		cJSON_Delete(state_obj);
   2a6e4:	4628      	mov	r0, r5
   2a6e6:	f007 fcc5 	bl	32074 <cJSON_Delete>
		cJSON_Delete(config_obj);
   2a6ea:	4638      	mov	r0, r7
   2a6ec:	f007 fcc2 	bl	32074 <cJSON_Delete>
		output->len = 0;
   2a6f0:	e9c6 4400 	strd	r4, r4, [r6]
}
   2a6f4:	4620      	mov	r0, r4
   2a6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a6fa:	bf00      	nop
   2a6fc:	00047cf7 	.word	0x00047cf7
   2a700:	00044263 	.word	0x00044263
   2a704:	00047d3c 	.word	0x00047d3c
   2a708:	00047e89 	.word	0x00047e89
   2a70c:	00047ed1 	.word	0x00047ed1
   2a710:	00047d36 	.word	0x00047d36

0002a714 <nrf_cloud_encode_state>:
{
   2a714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   2a718:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(output != NULL);
   2a71a:	4688      	mov	r8, r1
{
   2a71c:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(output != NULL);
   2a71e:	b951      	cbnz	r1, 2a736 <nrf_cloud_encode_state+0x22>
   2a720:	4949      	ldr	r1, [pc, #292]	; (2a848 <nrf_cloud_encode_state+0x134>)
   2a722:	484a      	ldr	r0, [pc, #296]	; (2a84c <nrf_cloud_encode_state+0x138>)
   2a724:	f240 220f 	movw	r2, #527	; 0x20f
   2a728:	f012 fa97 	bl	3cc5a <assert_print>
   2a72c:	f240 210f 	movw	r1, #527	; 0x20f
   2a730:	4845      	ldr	r0, [pc, #276]	; (2a848 <nrf_cloud_encode_state+0x134>)
   2a732:	f012 fa8b 	bl	3cc4c <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   2a736:	f007 fd5f 	bl	321f8 <cJSON_CreateObject>
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   2a73a:	4945      	ldr	r1, [pc, #276]	; (2a850 <nrf_cloud_encode_state+0x13c>)
	cJSON *root_obj = cJSON_CreateObject();
   2a73c:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   2a73e:	f015 fbce 	bl	3fede <cJSON_AddObjectToObjectCS>
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, JSON_KEY_REP);
   2a742:	4944      	ldr	r1, [pc, #272]	; (2a854 <nrf_cloud_encode_state+0x140>)
   2a744:	f015 fbcb 	bl	3fede <cJSON_AddObjectToObjectCS>
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   2a748:	4943      	ldr	r1, [pc, #268]	; (2a858 <nrf_cloud_encode_state+0x144>)
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, JSON_KEY_REP);
   2a74a:	4683      	mov	fp, r0
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   2a74c:	f015 fbc7 	bl	3fede <cJSON_AddObjectToObjectCS>
	cJSON *connection_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_CONN);
   2a750:	4942      	ldr	r1, [pc, #264]	; (2a85c <nrf_cloud_encode_state+0x148>)
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   2a752:	4681      	mov	r9, r0
	cJSON *connection_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_CONN);
   2a754:	4658      	mov	r0, fp
   2a756:	f015 fbc2 	bl	3fede <cJSON_AddObjectToObjectCS>
   2a75a:	4682      	mov	sl, r0
	if (!pairing_obj || !connection_obj) {
   2a75c:	f1b9 0f00 	cmp.w	r9, #0
   2a760:	d000      	beq.n	2a764 <nrf_cloud_encode_state+0x50>
   2a762:	b928      	cbnz	r0, 2a770 <nrf_cloud_encode_state+0x5c>
			cJSON_Delete(root_obj);
   2a764:	4638      	mov	r0, r7
   2a766:	f007 fc85 	bl	32074 <cJSON_Delete>
		return -ENOMEM;
   2a76a:	f06f 000b 	mvn.w	r0, #11
   2a76e:	e008      	b.n	2a782 <nrf_cloud_encode_state+0x6e>
	switch (reported_state) {
   2a770:	2c06      	cmp	r4, #6
   2a772:	d009      	beq.n	2a788 <nrf_cloud_encode_state+0x74>
   2a774:	2c07      	cmp	r4, #7
   2a776:	d032      	beq.n	2a7de <nrf_cloud_encode_state+0xca>
		cJSON_Delete(root_obj);
   2a778:	4638      	mov	r0, r7
   2a77a:	f007 fc7b 	bl	32074 <cJSON_Delete>
		return -ENOTSUP;
   2a77e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2a782:	b006      	add	sp, #24
   2a784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, DUA_PIN_STR);
   2a788:	4a35      	ldr	r2, [pc, #212]	; (2a860 <nrf_cloud_encode_state+0x14c>)
   2a78a:	4931      	ldr	r1, [pc, #196]	; (2a850 <nrf_cloud_encode_state+0x13c>)
   2a78c:	4648      	mov	r0, r9
   2a78e:	f015 f82c 	bl	3f7ea <json_add_str_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_TOPICS);
   2a792:	4934      	ldr	r1, [pc, #208]	; (2a864 <nrf_cloud_encode_state+0x150>)
   2a794:	4648      	mov	r0, r9
   2a796:	f015 f83a 	bl	3f80e <json_add_null_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2a79a:	4933      	ldr	r1, [pc, #204]	; (2a868 <nrf_cloud_encode_state+0x154>)
   2a79c:	4648      	mov	r0, r9
   2a79e:	f015 f836 	bl	3f80e <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_STAGE);
   2a7a2:	4932      	ldr	r1, [pc, #200]	; (2a86c <nrf_cloud_encode_state+0x158>)
   2a7a4:	4658      	mov	r0, fp
   2a7a6:	f015 f832 	bl	3f80e <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_TOPIC_PRFX);
   2a7aa:	4931      	ldr	r1, [pc, #196]	; (2a870 <nrf_cloud_encode_state+0x15c>)
   2a7ac:	4658      	mov	r0, fp
   2a7ae:	f015 f82e 	bl	3f80e <json_add_null_cs>
		ret += json_add_null_cs(connection_obj, JSON_KEY_KEEPALIVE);
   2a7b2:	4650      	mov	r0, sl
   2a7b4:	492f      	ldr	r1, [pc, #188]	; (2a874 <nrf_cloud_encode_state+0x160>)
   2a7b6:	f015 f82a 	bl	3f80e <json_add_null_cs>
	buffer = cJSON_PrintUnformatted(root_obj);
   2a7ba:	4638      	mov	r0, r7
   2a7bc:	f015 faa8 	bl	3fd10 <cJSON_PrintUnformatted>
   2a7c0:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   2a7c2:	4638      	mov	r0, r7
   2a7c4:	f007 fc56 	bl	32074 <cJSON_Delete>
	if (buffer == NULL) {
   2a7c8:	2c00      	cmp	r4, #0
   2a7ca:	d0ce      	beq.n	2a76a <nrf_cloud_encode_state+0x56>
	output->len = strlen(buffer);
   2a7cc:	4620      	mov	r0, r4
	output->ptr = buffer;
   2a7ce:	f8c8 4004 	str.w	r4, [r8, #4]
	output->len = strlen(buffer);
   2a7d2:	f7f2 fd36 	bl	1d242 <strlen>
   2a7d6:	f8c8 0000 	str.w	r0, [r8]
	return 0;
   2a7da:	2000      	movs	r0, #0
   2a7dc:	e7d1      	b.n	2a782 <nrf_cloud_encode_state+0x6e>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, NULL, &m_endp);
   2a7de:	ab04      	add	r3, sp, #16
   2a7e0:	2200      	movs	r2, #0
   2a7e2:	4669      	mov	r1, sp
   2a7e4:	a802      	add	r0, sp, #8
   2a7e6:	f002 f879 	bl	2c8dc <nct_dc_endpoint_get>
		ret += json_add_str_cs(reported_obj, JSON_KEY_TOPIC_PRFX, m_endp.ptr);
   2a7ea:	9a05      	ldr	r2, [sp, #20]
   2a7ec:	4920      	ldr	r1, [pc, #128]	; (2a870 <nrf_cloud_encode_state+0x15c>)
   2a7ee:	4658      	mov	r0, fp
   2a7f0:	f014 fffb 	bl	3f7ea <json_add_str_cs>
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   2a7f4:	4a20      	ldr	r2, [pc, #128]	; (2a878 <nrf_cloud_encode_state+0x164>)
		ret += json_add_str_cs(reported_obj, JSON_KEY_TOPIC_PRFX, m_endp.ptr);
   2a7f6:	4604      	mov	r4, r0
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   2a7f8:	4915      	ldr	r1, [pc, #84]	; (2a850 <nrf_cloud_encode_state+0x13c>)
   2a7fa:	4648      	mov	r0, r9
   2a7fc:	f014 fff5 	bl	3f7ea <json_add_str_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2a800:	4919      	ldr	r1, [pc, #100]	; (2a868 <nrf_cloud_encode_state+0x154>)
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   2a802:	4404      	add	r4, r0
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2a804:	4648      	mov	r0, r9
   2a806:	f015 f802 	bl	3f80e <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   2a80a:	491c      	ldr	r1, [pc, #112]	; (2a87c <nrf_cloud_encode_state+0x168>)
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2a80c:	4404      	add	r4, r0
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   2a80e:	4658      	mov	r0, fp
   2a810:	f014 fffd 	bl	3f80e <json_add_null_cs>
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   2a814:	4b1a      	ldr	r3, [pc, #104]	; (2a880 <nrf_cloud_encode_state+0x16c>)
   2a816:	2200      	movs	r2, #0
   2a818:	4916      	ldr	r1, [pc, #88]	; (2a874 <nrf_cloud_encode_state+0x160>)
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   2a81a:	4404      	add	r4, r0
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   2a81c:	4650      	mov	r0, sl
   2a81e:	f014 ffc8 	bl	3f7b2 <json_add_num_cs>
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   2a822:	4910      	ldr	r1, [pc, #64]	; (2a864 <nrf_cloud_encode_state+0x150>)
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   2a824:	4404      	add	r4, r0
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   2a826:	4648      	mov	r0, r9
   2a828:	f015 fb59 	bl	3fede <cJSON_AddObjectToObjectCS>
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   2a82c:	9a03      	ldr	r2, [sp, #12]
   2a82e:	4915      	ldr	r1, [pc, #84]	; (2a884 <nrf_cloud_encode_state+0x170>)
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   2a830:	4605      	mov	r5, r0
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   2a832:	f014 ffda 	bl	3f7ea <json_add_str_cs>
		ret += json_add_str_cs(topics_obj, JSON_KEY_CLOUD_TO_DEVICE, rx_endp.ptr);
   2a836:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   2a838:	4404      	add	r4, r0
		ret += json_add_str_cs(topics_obj, JSON_KEY_CLOUD_TO_DEVICE, rx_endp.ptr);
   2a83a:	4913      	ldr	r1, [pc, #76]	; (2a888 <nrf_cloud_encode_state+0x174>)
   2a83c:	4628      	mov	r0, r5
   2a83e:	f014 ffd4 	bl	3f7ea <json_add_str_cs>
		if (ret != 0) {
   2a842:	42c4      	cmn	r4, r0
   2a844:	d0b9      	beq.n	2a7ba <nrf_cloud_encode_state+0xa6>
   2a846:	e78d      	b.n	2a764 <nrf_cloud_encode_state+0x50>
   2a848:	00047cf7 	.word	0x00047cf7
   2a84c:	00044263 	.word	0x00044263
   2a850:	00047d36 	.word	0x00047d36
   2a854:	00047e89 	.word	0x00047e89
   2a858:	00047ec9 	.word	0x00047ec9
   2a85c:	00044058 	.word	0x00044058
   2a860:	00047f70 	.word	0x00047f70
   2a864:	00047fdd 	.word	0x00047fdd
   2a868:	00047ed1 	.word	0x00047ed1
   2a86c:	00047fe4 	.word	0x00047fe4
   2a870:	00047eae 	.word	0x00047eae
   2a874:	00047fea 	.word	0x00047fea
   2a878:	00047ff4 	.word	0x00047ff4
   2a87c:	00047ffb 	.word	0x00047ffb
   2a880:	4092c000 	.word	0x4092c000
   2a884:	00048009 	.word	0x00048009
   2a888:	0004800d 	.word	0x0004800d

0002a88c <nrf_cloud_decode_data_endpoint>:
{
   2a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a890:	b085      	sub	sp, #20
   2a892:	460e      	mov	r6, r1
   2a894:	4690      	mov	r8, r2
   2a896:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(input != NULL);
   2a898:	4604      	mov	r4, r0
{
   2a89a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(input != NULL);
   2a89e:	b950      	cbnz	r0, 2a8b6 <nrf_cloud_decode_data_endpoint+0x2a>
   2a8a0:	4967      	ldr	r1, [pc, #412]	; (2aa40 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a8a2:	4868      	ldr	r0, [pc, #416]	; (2aa44 <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a8a4:	f240 2266 	movw	r2, #614	; 0x266
   2a8a8:	f012 f9d7 	bl	3cc5a <assert_print>
   2a8ac:	f240 2166 	movw	r1, #614	; 0x266
   2a8b0:	4863      	ldr	r0, [pc, #396]	; (2aa40 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a8b2:	f012 f9cb 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2a8b6:	6863      	ldr	r3, [r4, #4]
   2a8b8:	b953      	cbnz	r3, 2a8d0 <nrf_cloud_decode_data_endpoint+0x44>
   2a8ba:	4961      	ldr	r1, [pc, #388]	; (2aa40 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a8bc:	4861      	ldr	r0, [pc, #388]	; (2aa44 <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a8be:	f240 2267 	movw	r2, #615	; 0x267
   2a8c2:	f012 f9ca 	bl	3cc5a <assert_print>
   2a8c6:	f240 2167 	movw	r1, #615	; 0x267
   2a8ca:	485d      	ldr	r0, [pc, #372]	; (2aa40 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a8cc:	f012 f9be 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2a8d0:	6823      	ldr	r3, [r4, #0]
   2a8d2:	b953      	cbnz	r3, 2a8ea <nrf_cloud_decode_data_endpoint+0x5e>
   2a8d4:	495a      	ldr	r1, [pc, #360]	; (2aa40 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a8d6:	485b      	ldr	r0, [pc, #364]	; (2aa44 <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a8d8:	f44f 721a 	mov.w	r2, #616	; 0x268
   2a8dc:	f012 f9bd 	bl	3cc5a <assert_print>
   2a8e0:	f44f 711a 	mov.w	r1, #616	; 0x268
   2a8e4:	4856      	ldr	r0, [pc, #344]	; (2aa40 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a8e6:	f012 f9b1 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   2a8ea:	b956      	cbnz	r6, 2a902 <nrf_cloud_decode_data_endpoint+0x76>
   2a8ec:	4954      	ldr	r1, [pc, #336]	; (2aa40 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a8ee:	4855      	ldr	r0, [pc, #340]	; (2aa44 <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a8f0:	f240 2269 	movw	r2, #617	; 0x269
   2a8f4:	f012 f9b1 	bl	3cc5a <assert_print>
   2a8f8:	f240 2169 	movw	r1, #617	; 0x269
   2a8fc:	4850      	ldr	r0, [pc, #320]	; (2aa40 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a8fe:	f012 f9a5 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   2a902:	f1b8 0f00 	cmp.w	r8, #0
   2a906:	d10a      	bne.n	2a91e <nrf_cloud_decode_data_endpoint+0x92>
   2a908:	494d      	ldr	r1, [pc, #308]	; (2aa40 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a90a:	484e      	ldr	r0, [pc, #312]	; (2aa44 <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a90c:	f240 226a 	movw	r2, #618	; 0x26a
   2a910:	f012 f9a3 	bl	3cc5a <assert_print>
   2a914:	f240 216a 	movw	r1, #618	; 0x26a
   2a918:	4849      	ldr	r0, [pc, #292]	; (2aa40 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a91a:	f012 f997 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(bulk_endpoint != NULL);
   2a91e:	b957      	cbnz	r7, 2a936 <nrf_cloud_decode_data_endpoint+0xaa>
   2a920:	4947      	ldr	r1, [pc, #284]	; (2aa40 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a922:	4848      	ldr	r0, [pc, #288]	; (2aa44 <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a924:	f240 226b 	movw	r2, #619	; 0x26b
   2a928:	f012 f997 	bl	3cc5a <assert_print>
   2a92c:	f240 216b 	movw	r1, #619	; 0x26b
   2a930:	4843      	ldr	r0, [pc, #268]	; (2aa40 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a932:	f012 f98b 	bl	3cc4c <assert_post_action>
	cJSON *desired_obj = NULL;
   2a936:	2300      	movs	r3, #0
	root_obj = cJSON_Parse(input->ptr);
   2a938:	6860      	ldr	r0, [r4, #4]
	cJSON *desired_obj = NULL;
   2a93a:	9303      	str	r3, [sp, #12]
	root_obj = cJSON_Parse(input->ptr);
   2a93c:	f015 f9e4 	bl	3fd08 <cJSON_Parse>
	if (root_obj == NULL) {
   2a940:	4605      	mov	r5, r0
   2a942:	b318      	cbz	r0, 2a98c <nrf_cloud_decode_data_endpoint+0x100>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2a944:	a903      	add	r1, sp, #12
   2a946:	f7ff fc5b 	bl	2a200 <nrf_cloud_decode_desired_obj>
	if (m_endpoint != NULL) {
   2a94a:	f1ba 0f00 	cmp.w	sl, #0
   2a94e:	d020      	beq.n	2a992 <nrf_cloud_decode_data_endpoint+0x106>
		m_endpoint_obj = json_object_decode(
   2a950:	493d      	ldr	r1, [pc, #244]	; (2aa48 <nrf_cloud_decode_data_endpoint+0x1bc>)
   2a952:	9803      	ldr	r0, [sp, #12]
   2a954:	f014 ff57 	bl	3f806 <json_object_decode>
   2a958:	4604      	mov	r4, r0
	cJSON *pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   2a95a:	493c      	ldr	r1, [pc, #240]	; (2aa4c <nrf_cloud_decode_data_endpoint+0x1c0>)
   2a95c:	9803      	ldr	r0, [sp, #12]
   2a95e:	f014 ff52 	bl	3f806 <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2a962:	493b      	ldr	r1, [pc, #236]	; (2aa50 <nrf_cloud_decode_data_endpoint+0x1c4>)
	cJSON *pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   2a964:	4681      	mov	r9, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2a966:	f014 ff4e 	bl	3f806 <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, JSON_KEY_TOPICS);
   2a96a:	493a      	ldr	r1, [pc, #232]	; (2aa54 <nrf_cloud_decode_data_endpoint+0x1c8>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2a96c:	4683      	mov	fp, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, JSON_KEY_TOPICS);
   2a96e:	4648      	mov	r0, r9
   2a970:	f014 ff49 	bl	3f806 <json_object_decode>
   2a974:	4681      	mov	r9, r0
	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   2a976:	f1bb 0f00 	cmp.w	fp, #0
   2a97a:	d004      	beq.n	2a986 <nrf_cloud_decode_data_endpoint+0xfa>
   2a97c:	b118      	cbz	r0, 2a986 <nrf_cloud_decode_data_endpoint+0xfa>
   2a97e:	f8db 300c 	ldr.w	r3, [fp, #12]
   2a982:	2b10      	cmp	r3, #16
   2a984:	d007      	beq.n	2a996 <nrf_cloud_decode_data_endpoint+0x10a>
		cJSON_Delete(root_obj);
   2a986:	4628      	mov	r0, r5
   2a988:	f007 fb74 	bl	32074 <cJSON_Delete>
		return -ENOENT;
   2a98c:	f06f 0401 	mvn.w	r4, #1
   2a990:	e03b      	b.n	2aa0a <nrf_cloud_decode_data_endpoint+0x17e>
	cJSON *m_endpoint_obj = NULL;
   2a992:	4654      	mov	r4, sl
   2a994:	e7e1      	b.n	2a95a <nrf_cloud_decode_data_endpoint+0xce>
	return !strncmp(s1, s2, strlen(s2));
   2a996:	4830      	ldr	r0, [pc, #192]	; (2aa58 <nrf_cloud_decode_data_endpoint+0x1cc>)
	const char *state_str = pairing_state_obj->valuestring;
   2a998:	f8db b010 	ldr.w	fp, [fp, #16]
	return !strncmp(s1, s2, strlen(s2));
   2a99c:	f7f2 fc51 	bl	1d242 <strlen>
   2a9a0:	492d      	ldr	r1, [pc, #180]	; (2aa58 <nrf_cloud_decode_data_endpoint+0x1cc>)
   2a9a2:	4602      	mov	r2, r0
   2a9a4:	4658      	mov	r0, fp
   2a9a6:	f016 ffff 	bl	419a8 <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   2a9aa:	2800      	cmp	r0, #0
   2a9ac:	d1eb      	bne.n	2a986 <nrf_cloud_decode_data_endpoint+0xfa>
	if (m_endpoint_obj != NULL) {
   2a9ae:	b14c      	cbz	r4, 2a9c4 <nrf_cloud_decode_data_endpoint+0x138>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   2a9b0:	4620      	mov	r0, r4
   2a9b2:	4651      	mov	r1, sl
   2a9b4:	f014 ff4c 	bl	3f850 <json_decode_and_alloc>
		if (err) {
   2a9b8:	4604      	mov	r4, r0
   2a9ba:	b118      	cbz	r0, 2a9c4 <nrf_cloud_decode_data_endpoint+0x138>
			cJSON_Delete(root_obj);
   2a9bc:	4628      	mov	r0, r5
	cJSON_Delete(root_obj);
   2a9be:	f007 fb59 	bl	32074 <cJSON_Delete>
	return err;
   2a9c2:	e022      	b.n	2aa0a <nrf_cloud_decode_data_endpoint+0x17e>
	cJSON *tx_obj = json_object_decode(topic_obj, JSON_KEY_DEVICE_TO_CLOUD);
   2a9c4:	4925      	ldr	r1, [pc, #148]	; (2aa5c <nrf_cloud_decode_data_endpoint+0x1d0>)
   2a9c6:	4648      	mov	r0, r9
   2a9c8:	f014 ff1d 	bl	3f806 <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   2a9cc:	4631      	mov	r1, r6
   2a9ce:	f014 ff3f 	bl	3f850 <json_decode_and_alloc>
	if (err) {
   2a9d2:	4604      	mov	r4, r0
   2a9d4:	b140      	cbz	r0, 2a9e8 <nrf_cloud_decode_data_endpoint+0x15c>
		cJSON_Delete(root_obj);
   2a9d6:	4628      	mov	r0, r5
   2a9d8:	f007 fb4c 	bl	32074 <cJSON_Delete>
		LOG_ERR("could not decode topic for %s", JSON_KEY_DEVICE_TO_CLOUD);
   2a9dc:	4a1f      	ldr	r2, [pc, #124]	; (2aa5c <nrf_cloud_decode_data_endpoint+0x1d0>)
		LOG_ERR("could not decode topic for %s", JSON_KEY_CLOUD_TO_DEVICE);
   2a9de:	2145      	movs	r1, #69	; 0x45
   2a9e0:	481f      	ldr	r0, [pc, #124]	; (2aa60 <nrf_cloud_decode_data_endpoint+0x1d4>)
   2a9e2:	f012 f974 	bl	3ccce <z_log_minimal_printk>
		return err;
   2a9e6:	e010      	b.n	2aa0a <nrf_cloud_decode_data_endpoint+0x17e>
	size_t bulk_ep_len_temp = tx_endpoint->len + sizeof(NRF_CLOUD_BULK_MSG_TOPIC);
   2a9e8:	6834      	ldr	r4, [r6, #0]
	bulk_endpoint->ptr = nrf_cloud_calloc(bulk_ep_len_temp, 1);
   2a9ea:	2101      	movs	r1, #1
	size_t bulk_ep_len_temp = tx_endpoint->len + sizeof(NRF_CLOUD_BULK_MSG_TOPIC);
   2a9ec:	3406      	adds	r4, #6
	bulk_endpoint->ptr = nrf_cloud_calloc(bulk_ep_len_temp, 1);
   2a9ee:	4620      	mov	r0, r4
   2a9f0:	f016 fd61 	bl	414b6 <k_calloc>
   2a9f4:	6078      	str	r0, [r7, #4]
	if (bulk_endpoint->ptr == NULL) {
   2a9f6:	b960      	cbnz	r0, 2aa12 <nrf_cloud_decode_data_endpoint+0x186>
		cJSON_Delete(root_obj);
   2a9f8:	4628      	mov	r0, r5
   2a9fa:	f007 fb3b 	bl	32074 <cJSON_Delete>
		LOG_ERR("Could not allocate memory for bulk topic");
   2a9fe:	2145      	movs	r1, #69	; 0x45
   2aa00:	4818      	ldr	r0, [pc, #96]	; (2aa64 <nrf_cloud_decode_data_endpoint+0x1d8>)
   2aa02:	f012 f964 	bl	3ccce <z_log_minimal_printk>
		return -ENOMEM;
   2aa06:	f06f 040b 	mvn.w	r4, #11
}
   2aa0a:	4620      	mov	r0, r4
   2aa0c:	b005      	add	sp, #20
   2aa0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bulk_endpoint->len = snprintk((char *)bulk_endpoint->ptr, bulk_ep_len_temp, "%s%s",
   2aa12:	4b15      	ldr	r3, [pc, #84]	; (2aa68 <nrf_cloud_decode_data_endpoint+0x1dc>)
   2aa14:	4621      	mov	r1, r4
   2aa16:	4a15      	ldr	r2, [pc, #84]	; (2aa6c <nrf_cloud_decode_data_endpoint+0x1e0>)
   2aa18:	9300      	str	r3, [sp, #0]
   2aa1a:	6873      	ldr	r3, [r6, #4]
   2aa1c:	f011 ff47 	bl	3c8ae <snprintk>
	cJSON *rx_obj = json_object_decode(topic_obj, JSON_KEY_CLOUD_TO_DEVICE);
   2aa20:	4913      	ldr	r1, [pc, #76]	; (2aa70 <nrf_cloud_decode_data_endpoint+0x1e4>)
	bulk_endpoint->len = snprintk((char *)bulk_endpoint->ptr, bulk_ep_len_temp, "%s%s",
   2aa22:	6038      	str	r0, [r7, #0]
	cJSON *rx_obj = json_object_decode(topic_obj, JSON_KEY_CLOUD_TO_DEVICE);
   2aa24:	4648      	mov	r0, r9
   2aa26:	f014 feee 	bl	3f806 <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   2aa2a:	4641      	mov	r1, r8
   2aa2c:	f014 ff10 	bl	3f850 <json_decode_and_alloc>
	if (err) {
   2aa30:	4604      	mov	r4, r0
		cJSON_Delete(root_obj);
   2aa32:	4628      	mov	r0, r5
	if (err) {
   2aa34:	2c00      	cmp	r4, #0
   2aa36:	d0c2      	beq.n	2a9be <nrf_cloud_decode_data_endpoint+0x132>
		cJSON_Delete(root_obj);
   2aa38:	f007 fb1c 	bl	32074 <cJSON_Delete>
		LOG_ERR("could not decode topic for %s", JSON_KEY_CLOUD_TO_DEVICE);
   2aa3c:	4a0c      	ldr	r2, [pc, #48]	; (2aa70 <nrf_cloud_decode_data_endpoint+0x1e4>)
   2aa3e:	e7ce      	b.n	2a9de <nrf_cloud_decode_data_endpoint+0x152>
   2aa40:	00047cf7 	.word	0x00047cf7
   2aa44:	00044263 	.word	0x00044263
   2aa48:	00047eae 	.word	0x00047eae
   2aa4c:	00047ec9 	.word	0x00047ec9
   2aa50:	00047d36 	.word	0x00047d36
   2aa54:	00047fdd 	.word	0x00047fdd
   2aa58:	00047ff4 	.word	0x00047ff4
   2aa5c:	00048009 	.word	0x00048009
   2aa60:	00048011 	.word	0x00048011
   2aa64:	00048034 	.word	0x00048034
   2aa68:	00048062 	.word	0x00048062
   2aa6c:	0004a4d9 	.word	0x0004a4d9
   2aa70:	0004800d 	.word	0x0004800d

0002aa74 <json_send_to_cloud>:
{
   2aa74:	b530      	push	{r4, r5, lr}
	__ASSERT_NO_MSG(request != NULL);
   2aa76:	4604      	mov	r4, r0
{
   2aa78:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(request != NULL);
   2aa7a:	b950      	cbnz	r0, 2aa92 <json_send_to_cloud+0x1e>
   2aa7c:	491b      	ldr	r1, [pc, #108]	; (2aaec <json_send_to_cloud+0x78>)
   2aa7e:	481c      	ldr	r0, [pc, #112]	; (2aaf0 <json_send_to_cloud+0x7c>)
   2aa80:	f44f 7230 	mov.w	r2, #704	; 0x2c0
   2aa84:	f012 f8e9 	bl	3cc5a <assert_print>
   2aa88:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   2aa8c:	4817      	ldr	r0, [pc, #92]	; (2aaec <json_send_to_cloud+0x78>)
   2aa8e:	f012 f8dd 	bl	3cc4c <assert_post_action>
	if (nfsm_get_current_state() != STATE_DC_CONNECTED) {
   2aa92:	f000 fdef 	bl	2b674 <nfsm_get_current_state>
   2aa96:	2809      	cmp	r0, #9
   2aa98:	d125      	bne.n	2aae6 <json_send_to_cloud+0x72>
	msg_string = cJSON_PrintUnformatted(request);
   2aa9a:	4620      	mov	r0, r4
   2aa9c:	f015 f938 	bl	3fd10 <cJSON_PrintUnformatted>
	if (!msg_string) {
   2aaa0:	4605      	mov	r5, r0
   2aaa2:	b940      	cbnz	r0, 2aab6 <json_send_to_cloud+0x42>
		LOG_ERR("Could not allocate memory for request message");
   2aaa4:	2145      	movs	r1, #69	; 0x45
   2aaa6:	4813      	ldr	r0, [pc, #76]	; (2aaf4 <json_send_to_cloud+0x80>)
   2aaa8:	f012 f911 	bl	3ccce <z_log_minimal_printk>
		return -ENOMEM;
   2aaac:	f06f 040b 	mvn.w	r4, #11
}
   2aab0:	4620      	mov	r0, r4
   2aab2:	b007      	add	sp, #28
   2aab4:	bd30      	pop	{r4, r5, pc}
	struct nct_dc_data msg = {
   2aab6:	2214      	movs	r2, #20
   2aab8:	2100      	movs	r1, #0
   2aaba:	a801      	add	r0, sp, #4
   2aabc:	f016 fda1 	bl	41602 <memset>
		.data.len = strlen(msg_string)
   2aac0:	4628      	mov	r0, r5
   2aac2:	f7f2 fbbe 	bl	1d242 <strlen>
	struct nct_dc_data msg = {
   2aac6:	e9cd 0501 	strd	r0, r5, [sp, #4]
	err = nct_dc_send(&msg);
   2aaca:	a801      	add	r0, sp, #4
   2aacc:	f014 ff26 	bl	3f91c <nct_dc_send>
	if (err) {
   2aad0:	4604      	mov	r4, r0
   2aad2:	b120      	cbz	r0, 2aade <json_send_to_cloud+0x6a>
		LOG_ERR("Failed to send request, error: %d", err);
   2aad4:	4602      	mov	r2, r0
   2aad6:	2145      	movs	r1, #69	; 0x45
   2aad8:	4807      	ldr	r0, [pc, #28]	; (2aaf8 <json_send_to_cloud+0x84>)
   2aada:	f012 f8f8 	bl	3ccce <z_log_minimal_printk>
	k_free(msg_string);
   2aade:	4628      	mov	r0, r5
   2aae0:	f016 fcde 	bl	414a0 <k_free>
	return err;
   2aae4:	e7e4      	b.n	2aab0 <json_send_to_cloud+0x3c>
		return -EACCES;
   2aae6:	f06f 040c 	mvn.w	r4, #12
   2aaea:	e7e1      	b.n	2aab0 <json_send_to_cloud+0x3c>
   2aaec:	00047cf7 	.word	0x00047cf7
   2aaf0:	00044263 	.word	0x00044263
   2aaf4:	00048068 	.word	0x00048068
   2aaf8:	0004809b 	.word	0x0004809b

0002aafc <nrf_cloud_modem_info_json_encode>:
{
   2aafc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aafe:	4606      	mov	r6, r0
	if (!mod_inf_obj || !mod_inf) {
   2ab00:	460f      	mov	r7, r1
{
   2ab02:	f6ad 1d5c 	subw	sp, sp, #2396	; 0x95c
	if (!mod_inf_obj || !mod_inf) {
   2ab06:	2900      	cmp	r1, #0
   2ab08:	d057      	beq.n	2abba <nrf_cloud_modem_info_json_encode+0xbe>
   2ab0a:	2800      	cmp	r0, #0
   2ab0c:	d055      	beq.n	2abba <nrf_cloud_modem_info_json_encode+0xbe>
	cJSON *tmp = cJSON_CreateObject();
   2ab0e:	f007 fb73 	bl	321f8 <cJSON_CreateObject>
	if (!tmp) {
   2ab12:	4605      	mov	r5, r0
   2ab14:	2800      	cmp	r0, #0
   2ab16:	d04d      	beq.n	2abb4 <nrf_cloud_modem_info_json_encode+0xb8>
	struct modem_param_info *mpi = (struct modem_param_info *)mod_inf->mpi;
   2ab18:	6870      	ldr	r0, [r6, #4]
	if (!mpi) {
   2ab1a:	bb10      	cbnz	r0, 2ab62 <nrf_cloud_modem_info_json_encode+0x66>
		err = modem_info_init();
   2ab1c:	f7fd fd7e 	bl	2861c <modem_info_init>
		if (err) {
   2ab20:	4604      	mov	r4, r0
   2ab22:	b158      	cbz	r0, 2ab3c <nrf_cloud_modem_info_json_encode+0x40>
			LOG_ERR("modem_info_init() failed: %d", err);
   2ab24:	2145      	movs	r1, #69	; 0x45
   2ab26:	4602      	mov	r2, r0
   2ab28:	4825      	ldr	r0, [pc, #148]	; (2abc0 <nrf_cloud_modem_info_json_encode+0xc4>)
		LOG_ERR("Failed to encode modem info: %d", err);
   2ab2a:	f012 f8d0 	bl	3ccce <z_log_minimal_printk>
	cJSON_Delete(tmp);
   2ab2e:	4628      	mov	r0, r5
   2ab30:	f007 faa0 	bl	32074 <cJSON_Delete>
}
   2ab34:	4620      	mov	r0, r4
   2ab36:	f60d 1d5c 	addw	sp, sp, #2396	; 0x95c
   2ab3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = modem_info_params_init(&fetched_mod_inf);
   2ab3c:	4668      	mov	r0, sp
   2ab3e:	f7fd fda5 	bl	2868c <modem_info_params_init>
		if (err) {
   2ab42:	4604      	mov	r4, r0
   2ab44:	b118      	cbz	r0, 2ab4e <nrf_cloud_modem_info_json_encode+0x52>
			LOG_ERR("modem_info_params_init() failed: %d", err);
   2ab46:	4602      	mov	r2, r0
   2ab48:	2145      	movs	r1, #69	; 0x45
   2ab4a:	481e      	ldr	r0, [pc, #120]	; (2abc4 <nrf_cloud_modem_info_json_encode+0xc8>)
   2ab4c:	e7ed      	b.n	2ab2a <nrf_cloud_modem_info_json_encode+0x2e>
		err = modem_info_params_get(&fetched_mod_inf);
   2ab4e:	4668      	mov	r0, sp
   2ab50:	f7fd fdf2 	bl	28738 <modem_info_params_get>
		if (err < 0) {
   2ab54:	1e04      	subs	r4, r0, #0
   2ab56:	da03      	bge.n	2ab60 <nrf_cloud_modem_info_json_encode+0x64>
			LOG_ERR("modem_info_params_get() failed: %d", err);
   2ab58:	4622      	mov	r2, r4
   2ab5a:	2145      	movs	r1, #69	; 0x45
   2ab5c:	481a      	ldr	r0, [pc, #104]	; (2abc8 <nrf_cloud_modem_info_json_encode+0xcc>)
   2ab5e:	e7e4      	b.n	2ab2a <nrf_cloud_modem_info_json_encode+0x2e>
		mpi = &fetched_mod_inf;
   2ab60:	4668      	mov	r0, sp
	err = modem_info_json_object_encode(mpi, tmp);
   2ab62:	4629      	mov	r1, r5
   2ab64:	f7fd ff4c 	bl	28a00 <modem_info_json_object_encode>
	if (err < 0) {
   2ab68:	1e04      	subs	r4, r0, #0
   2ab6a:	da03      	bge.n	2ab74 <nrf_cloud_modem_info_json_encode+0x78>
		LOG_ERR("Failed to encode modem info: %d", err);
   2ab6c:	4622      	mov	r2, r4
   2ab6e:	2145      	movs	r1, #69	; 0x45
   2ab70:	4816      	ldr	r0, [pc, #88]	; (2abcc <nrf_cloud_modem_info_json_encode+0xd0>)
   2ab72:	e7da      	b.n	2ab2a <nrf_cloud_modem_info_json_encode+0x2e>
	if (encode_info_item_cs(mod_inf->device, MODEM_INFO_JSON_KEY_DEV_INF, tmp, mod_inf_obj) ||
   2ab74:	463b      	mov	r3, r7
   2ab76:	462a      	mov	r2, r5
   2ab78:	4915      	ldr	r1, [pc, #84]	; (2abd0 <nrf_cloud_modem_info_json_encode+0xd4>)
   2ab7a:	7830      	ldrb	r0, [r6, #0]
   2ab7c:	f7ff fb52 	bl	2a224 <encode_info_item_cs>
   2ab80:	b130      	cbz	r0, 2ab90 <nrf_cloud_modem_info_json_encode+0x94>
		LOG_ERR("Failed to encode modem info");
   2ab82:	2145      	movs	r1, #69	; 0x45
   2ab84:	4813      	ldr	r0, [pc, #76]	; (2abd4 <nrf_cloud_modem_info_json_encode+0xd8>)
   2ab86:	f012 f8a2 	bl	3ccce <z_log_minimal_printk>
		err = -EIO;
   2ab8a:	f06f 0404 	mvn.w	r4, #4
		goto cleanup;
   2ab8e:	e7ce      	b.n	2ab2e <nrf_cloud_modem_info_json_encode+0x32>
	    encode_info_item_cs(mod_inf->network, MODEM_INFO_JSON_KEY_NET_INF, tmp, mod_inf_obj) ||
   2ab90:	463b      	mov	r3, r7
   2ab92:	462a      	mov	r2, r5
   2ab94:	4910      	ldr	r1, [pc, #64]	; (2abd8 <nrf_cloud_modem_info_json_encode+0xdc>)
   2ab96:	7870      	ldrb	r0, [r6, #1]
   2ab98:	f7ff fb44 	bl	2a224 <encode_info_item_cs>
	if (encode_info_item_cs(mod_inf->device, MODEM_INFO_JSON_KEY_DEV_INF, tmp, mod_inf_obj) ||
   2ab9c:	2800      	cmp	r0, #0
   2ab9e:	d1f0      	bne.n	2ab82 <nrf_cloud_modem_info_json_encode+0x86>
	    encode_info_item_cs(mod_inf->sim, MODEM_INFO_JSON_KEY_SIM_INF, tmp, mod_inf_obj)) {
   2aba0:	463b      	mov	r3, r7
   2aba2:	462a      	mov	r2, r5
   2aba4:	490d      	ldr	r1, [pc, #52]	; (2abdc <nrf_cloud_modem_info_json_encode+0xe0>)
   2aba6:	78b0      	ldrb	r0, [r6, #2]
   2aba8:	f7ff fb3c 	bl	2a224 <encode_info_item_cs>
	    encode_info_item_cs(mod_inf->network, MODEM_INFO_JSON_KEY_NET_INF, tmp, mod_inf_obj) ||
   2abac:	4604      	mov	r4, r0
   2abae:	2800      	cmp	r0, #0
   2abb0:	d0bd      	beq.n	2ab2e <nrf_cloud_modem_info_json_encode+0x32>
   2abb2:	e7e6      	b.n	2ab82 <nrf_cloud_modem_info_json_encode+0x86>
		err = -ENOMEM;
   2abb4:	f06f 040b 	mvn.w	r4, #11
   2abb8:	e7b9      	b.n	2ab2e <nrf_cloud_modem_info_json_encode+0x32>
		return -EINVAL;
   2abba:	f06f 0415 	mvn.w	r4, #21
   2abbe:	e7b9      	b.n	2ab34 <nrf_cloud_modem_info_json_encode+0x38>
   2abc0:	000480c2 	.word	0x000480c2
   2abc4:	000480e4 	.word	0x000480e4
   2abc8:	0004810d 	.word	0x0004810d
   2abcc:	00048135 	.word	0x00048135
   2abd0:	000465cd 	.word	0x000465cd
   2abd4:	0004815a 	.word	0x0004815a
   2abd8:	000465b9 	.word	0x000465b9
   2abdc:	000465c5 	.word	0x000465c5

0002abe0 <nrf_cloud_service_info_json_encode>:
{
   2abe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2abe4:	460f      	mov	r7, r1
	if (!svc_inf || !svc_inf_obj) {
   2abe6:	4606      	mov	r6, r0
   2abe8:	2800      	cmp	r0, #0
   2abea:	f000 80b5 	beq.w	2ad58 <nrf_cloud_service_info_json_encode+0x178>
   2abee:	2900      	cmp	r1, #0
   2abf0:	f000 80b2 	beq.w	2ad58 <nrf_cloud_service_info_json_encode+0x178>
	int err = nrf_cloud_encode_service_info_fota(svc_inf->fota, svc_inf_obj);
   2abf4:	f8d0 8000 	ldr.w	r8, [r0]
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA) != 0) {
   2abf8:	4959      	ldr	r1, [pc, #356]	; (2ad60 <nrf_cloud_service_info_json_encode+0x180>)
   2abfa:	4638      	mov	r0, r7
	if (fota == NULL ||
   2abfc:	f1b8 0f00 	cmp.w	r8, #0
   2ac00:	d105      	bne.n	2ac0e <nrf_cloud_service_info_json_encode+0x2e>
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA) != 0) {
   2ac02:	f014 fe04 	bl	3f80e <json_add_null_cs>
   2ac06:	b3b0      	cbz	r0, 2ac76 <nrf_cloud_service_info_json_encode+0x96>
			return -ENOMEM;
   2ac08:	f06f 000b 	mvn.w	r0, #11
   2ac0c:	e03c      	b.n	2ac88 <nrf_cloud_service_info_json_encode+0xa8>
		cJSON *array = cJSON_AddArrayToObjectCS(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA);
   2ac0e:	f015 f93c 	bl	3fe8a <cJSON_AddArrayToObjectCS>
		if (!array) {
   2ac12:	4605      	mov	r5, r0
   2ac14:	2800      	cmp	r0, #0
   2ac16:	d0f7      	beq.n	2ac08 <nrf_cloud_service_info_json_encode+0x28>
		if (fota->bootloader) {
   2ac18:	f898 4000 	ldrb.w	r4, [r8]
   2ac1c:	f014 0401 	ands.w	r4, r4, #1
   2ac20:	d007      	beq.n	2ac32 <nrf_cloud_service_info_json_encode+0x52>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_BOOT));
   2ac22:	4850      	ldr	r0, [pc, #320]	; (2ad64 <nrf_cloud_service_info_json_encode+0x184>)
   2ac24:	f007 fac4 	bl	321b0 <cJSON_CreateString>
   2ac28:	4601      	mov	r1, r0
   2ac2a:	4628      	mov	r0, r5
   2ac2c:	f015 f88b 	bl	3fd46 <cJSON_AddItemToArray>
			++item_cnt;
   2ac30:	2401      	movs	r4, #1
		if (fota->modem) {
   2ac32:	f898 3000 	ldrb.w	r3, [r8]
   2ac36:	0798      	lsls	r0, r3, #30
   2ac38:	d507      	bpl.n	2ac4a <nrf_cloud_service_info_json_encode+0x6a>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_MODEM));
   2ac3a:	484b      	ldr	r0, [pc, #300]	; (2ad68 <nrf_cloud_service_info_json_encode+0x188>)
   2ac3c:	f007 fab8 	bl	321b0 <cJSON_CreateString>
   2ac40:	4601      	mov	r1, r0
   2ac42:	4628      	mov	r0, r5
   2ac44:	f015 f87f 	bl	3fd46 <cJSON_AddItemToArray>
			++item_cnt;
   2ac48:	3401      	adds	r4, #1
		if (fota->application) {
   2ac4a:	f898 3000 	ldrb.w	r3, [r8]
   2ac4e:	0759      	lsls	r1, r3, #29
   2ac50:	d507      	bpl.n	2ac62 <nrf_cloud_service_info_json_encode+0x82>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_APP));
   2ac52:	4846      	ldr	r0, [pc, #280]	; (2ad6c <nrf_cloud_service_info_json_encode+0x18c>)
   2ac54:	f007 faac 	bl	321b0 <cJSON_CreateString>
   2ac58:	4601      	mov	r1, r0
   2ac5a:	4628      	mov	r0, r5
   2ac5c:	f015 f873 	bl	3fd46 <cJSON_AddItemToArray>
			++item_cnt;
   2ac60:	3401      	adds	r4, #1
		if (cJSON_GetArraySize(array) != item_cnt) {
   2ac62:	4628      	mov	r0, r5
   2ac64:	f015 f857 	bl	3fd16 <cJSON_GetArraySize>
   2ac68:	42a0      	cmp	r0, r4
   2ac6a:	d004      	beq.n	2ac76 <nrf_cloud_service_info_json_encode+0x96>
			cJSON_DeleteItemFromObject(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA);
   2ac6c:	493c      	ldr	r1, [pc, #240]	; (2ad60 <nrf_cloud_service_info_json_encode+0x180>)
			cJSON_DeleteItemFromObject(svc_inf_obj, JSON_KEY_SRVC_INFO_UI);
   2ac6e:	4638      	mov	r0, r7
   2ac70:	f015 f897 	bl	3fda2 <cJSON_DeleteItemFromObject>
   2ac74:	e7c8      	b.n	2ac08 <nrf_cloud_service_info_json_encode+0x28>
   2ac76:	6876      	ldr	r6, [r6, #4]
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_UI) != 0) {
   2ac78:	4638      	mov	r0, r7
   2ac7a:	493d      	ldr	r1, [pc, #244]	; (2ad70 <nrf_cloud_service_info_json_encode+0x190>)
	if (ui == NULL) {
   2ac7c:	b936      	cbnz	r6, 2ac8c <nrf_cloud_service_info_json_encode+0xac>
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_UI) != 0) {
   2ac7e:	f014 fdc6 	bl	3f80e <json_add_null_cs>
   2ac82:	2800      	cmp	r0, #0
   2ac84:	d1c0      	bne.n	2ac08 <nrf_cloud_service_info_json_encode+0x28>
	return 0;
   2ac86:	2000      	movs	r0, #0
}
   2ac88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cJSON *array = cJSON_AddArrayToObjectCS(svc_inf_obj, JSON_KEY_SRVC_INFO_UI);
   2ac8c:	f015 f8fd 	bl	3fe8a <cJSON_AddArrayToObjectCS>
		if (!array) {
   2ac90:	4605      	mov	r5, r0
   2ac92:	2800      	cmp	r0, #0
   2ac94:	d0b8      	beq.n	2ac08 <nrf_cloud_service_info_json_encode+0x28>
		if (ui->air_pressure) {
   2ac96:	7834      	ldrb	r4, [r6, #0]
   2ac98:	f014 0410 	ands.w	r4, r4, #16
   2ac9c:	d007      	beq.n	2acae <nrf_cloud_service_info_json_encode+0xce>
			cJSON_AddItemToArray(array,
   2ac9e:	4835      	ldr	r0, [pc, #212]	; (2ad74 <nrf_cloud_service_info_json_encode+0x194>)
   2aca0:	f007 fa86 	bl	321b0 <cJSON_CreateString>
   2aca4:	4601      	mov	r1, r0
   2aca6:	4628      	mov	r0, r5
   2aca8:	f015 f84d 	bl	3fd46 <cJSON_AddItemToArray>
			++item_cnt;
   2acac:	2401      	movs	r4, #1
		if (ui->gps) {
   2acae:	7833      	ldrb	r3, [r6, #0]
   2acb0:	079a      	lsls	r2, r3, #30
   2acb2:	d507      	bpl.n	2acc4 <nrf_cloud_service_info_json_encode+0xe4>
			cJSON_AddItemToArray(array,
   2acb4:	4830      	ldr	r0, [pc, #192]	; (2ad78 <nrf_cloud_service_info_json_encode+0x198>)
   2acb6:	f007 fa7b 	bl	321b0 <cJSON_CreateString>
   2acba:	4601      	mov	r1, r0
   2acbc:	4628      	mov	r0, r5
   2acbe:	f015 f842 	bl	3fd46 <cJSON_AddItemToArray>
			++item_cnt;
   2acc2:	3401      	adds	r4, #1
		if (ui->flip) {
   2acc4:	7833      	ldrb	r3, [r6, #0]
   2acc6:	075b      	lsls	r3, r3, #29
   2acc8:	d507      	bpl.n	2acda <nrf_cloud_service_info_json_encode+0xfa>
			cJSON_AddItemToArray(array,
   2acca:	482c      	ldr	r0, [pc, #176]	; (2ad7c <nrf_cloud_service_info_json_encode+0x19c>)
   2accc:	f007 fa70 	bl	321b0 <cJSON_CreateString>
   2acd0:	4601      	mov	r1, r0
   2acd2:	4628      	mov	r0, r5
   2acd4:	f015 f837 	bl	3fd46 <cJSON_AddItemToArray>
			++item_cnt;
   2acd8:	3401      	adds	r4, #1
		if (ui->button) {
   2acda:	7873      	ldrb	r3, [r6, #1]
   2acdc:	07d8      	lsls	r0, r3, #31
   2acde:	d507      	bpl.n	2acf0 <nrf_cloud_service_info_json_encode+0x110>
			cJSON_AddItemToArray(array,
   2ace0:	4827      	ldr	r0, [pc, #156]	; (2ad80 <nrf_cloud_service_info_json_encode+0x1a0>)
   2ace2:	f007 fa65 	bl	321b0 <cJSON_CreateString>
   2ace6:	4601      	mov	r1, r0
   2ace8:	4628      	mov	r0, r5
   2acea:	f015 f82c 	bl	3fd46 <cJSON_AddItemToArray>
			++item_cnt;
   2acee:	3401      	adds	r4, #1
		if (ui->temperature) {
   2acf0:	7833      	ldrb	r3, [r6, #0]
   2acf2:	07d9      	lsls	r1, r3, #31
   2acf4:	d507      	bpl.n	2ad06 <nrf_cloud_service_info_json_encode+0x126>
			cJSON_AddItemToArray(array,
   2acf6:	4823      	ldr	r0, [pc, #140]	; (2ad84 <nrf_cloud_service_info_json_encode+0x1a4>)
   2acf8:	f007 fa5a 	bl	321b0 <cJSON_CreateString>
   2acfc:	4601      	mov	r1, r0
   2acfe:	4628      	mov	r0, r5
   2ad00:	f015 f821 	bl	3fd46 <cJSON_AddItemToArray>
			++item_cnt;
   2ad04:	3401      	adds	r4, #1
		if (ui->humidity) {
   2ad06:	7833      	ldrb	r3, [r6, #0]
   2ad08:	071a      	lsls	r2, r3, #28
   2ad0a:	d507      	bpl.n	2ad1c <nrf_cloud_service_info_json_encode+0x13c>
			cJSON_AddItemToArray(array,
   2ad0c:	481e      	ldr	r0, [pc, #120]	; (2ad88 <nrf_cloud_service_info_json_encode+0x1a8>)
   2ad0e:	f007 fa4f 	bl	321b0 <cJSON_CreateString>
   2ad12:	4601      	mov	r1, r0
   2ad14:	4628      	mov	r0, r5
   2ad16:	f015 f816 	bl	3fd46 <cJSON_AddItemToArray>
			++item_cnt;
   2ad1a:	3401      	adds	r4, #1
		if (ui->light_sensor) {
   2ad1c:	f996 3000 	ldrsb.w	r3, [r6]
   2ad20:	2b00      	cmp	r3, #0
   2ad22:	da07      	bge.n	2ad34 <nrf_cloud_service_info_json_encode+0x154>
			cJSON_AddItemToArray(array,
   2ad24:	4819      	ldr	r0, [pc, #100]	; (2ad8c <nrf_cloud_service_info_json_encode+0x1ac>)
   2ad26:	f007 fa43 	bl	321b0 <cJSON_CreateString>
   2ad2a:	4601      	mov	r1, r0
   2ad2c:	4628      	mov	r0, r5
   2ad2e:	f015 f80a 	bl	3fd46 <cJSON_AddItemToArray>
			++item_cnt;
   2ad32:	3401      	adds	r4, #1
		if (ui->rsrp) {
   2ad34:	7833      	ldrb	r3, [r6, #0]
   2ad36:	069b      	lsls	r3, r3, #26
   2ad38:	d507      	bpl.n	2ad4a <nrf_cloud_service_info_json_encode+0x16a>
			cJSON_AddItemToArray(array,
   2ad3a:	4815      	ldr	r0, [pc, #84]	; (2ad90 <nrf_cloud_service_info_json_encode+0x1b0>)
   2ad3c:	f007 fa38 	bl	321b0 <cJSON_CreateString>
   2ad40:	4601      	mov	r1, r0
   2ad42:	4628      	mov	r0, r5
   2ad44:	f014 ffff 	bl	3fd46 <cJSON_AddItemToArray>
			++item_cnt;
   2ad48:	3401      	adds	r4, #1
		if (cJSON_GetArraySize(array) != item_cnt) {
   2ad4a:	4628      	mov	r0, r5
   2ad4c:	f014 ffe3 	bl	3fd16 <cJSON_GetArraySize>
   2ad50:	42a0      	cmp	r0, r4
   2ad52:	d098      	beq.n	2ac86 <nrf_cloud_service_info_json_encode+0xa6>
			cJSON_DeleteItemFromObject(svc_inf_obj, JSON_KEY_SRVC_INFO_UI);
   2ad54:	4906      	ldr	r1, [pc, #24]	; (2ad70 <nrf_cloud_service_info_json_encode+0x190>)
   2ad56:	e78a      	b.n	2ac6e <nrf_cloud_service_info_json_encode+0x8e>
		return -EINVAL;
   2ad58:	f06f 0015 	mvn.w	r0, #21
   2ad5c:	e794      	b.n	2ac88 <nrf_cloud_service_info_json_encode+0xa8>
   2ad5e:	bf00      	nop
   2ad60:	0004817b 	.word	0x0004817b
   2ad64:	00048183 	.word	0x00048183
   2ad68:	00048188 	.word	0x00048188
   2ad6c:	0004818e 	.word	0x0004818e
   2ad70:	00048192 	.word	0x00048192
   2ad74:	00048195 	.word	0x00048195
   2ad78:	00048bf8 	.word	0x00048bf8
   2ad7c:	0004819f 	.word	0x0004819f
   2ad80:	000481a4 	.word	0x000481a4
   2ad84:	000481ab 	.word	0x000481ab
   2ad88:	000481b0 	.word	0x000481b0
   2ad8c:	000481b6 	.word	0x000481b6
   2ad90:	000481bc 	.word	0x000481bc

0002ad94 <nrf_cloud_device_status_encode>:
{
   2ad94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ad98:	460d      	mov	r5, r1
   2ad9a:	4614      	mov	r4, r2
	if (!dev_status || !output) {
   2ad9c:	4607      	mov	r7, r0
   2ad9e:	2800      	cmp	r0, #0
   2ada0:	d03d      	beq.n	2ae1e <nrf_cloud_device_status_encode+0x8a>
   2ada2:	2900      	cmp	r1, #0
   2ada4:	d03b      	beq.n	2ae1e <nrf_cloud_device_status_encode+0x8a>
	cJSON *root_obj = cJSON_CreateObject();
   2ada6:	f007 fa27 	bl	321f8 <cJSON_CreateObject>
   2adaa:	4606      	mov	r6, r0
	if (include_state) {
   2adac:	b114      	cbz	r4, 2adb4 <nrf_cloud_device_status_encode+0x20>
		state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   2adae:	491d      	ldr	r1, [pc, #116]	; (2ae24 <nrf_cloud_device_status_encode+0x90>)
   2adb0:	f015 f895 	bl	3fede <cJSON_AddObjectToObjectCS>
		reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2adb4:	491c      	ldr	r1, [pc, #112]	; (2ae28 <nrf_cloud_device_status_encode+0x94>)
   2adb6:	f015 f892 	bl	3fede <cJSON_AddObjectToObjectCS>
	cJSON *device_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_DEVICE);
   2adba:	491c      	ldr	r1, [pc, #112]	; (2ae2c <nrf_cloud_device_status_encode+0x98>)
   2adbc:	f015 f88f 	bl	3fede <cJSON_AddObjectToObjectCS>
	cJSON *svc_inf_obj = cJSON_AddObjectToObjectCS(device_obj, JSON_KEY_SRVC_INFO);
   2adc0:	491b      	ldr	r1, [pc, #108]	; (2ae30 <nrf_cloud_device_status_encode+0x9c>)
	cJSON *device_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_DEVICE);
   2adc2:	4604      	mov	r4, r0
	cJSON *svc_inf_obj = cJSON_AddObjectToObjectCS(device_obj, JSON_KEY_SRVC_INFO);
   2adc4:	f015 f88b 	bl	3fede <cJSON_AddObjectToObjectCS>
	if (svc_inf_obj == NULL) {
   2adc8:	4680      	mov	r8, r0
   2adca:	b958      	cbnz	r0, 2ade4 <nrf_cloud_device_status_encode+0x50>
		err = -ENOMEM;
   2adcc:	f06f 040b 	mvn.w	r4, #11
	cJSON_Delete(root_obj);
   2add0:	4630      	mov	r0, r6
   2add2:	f007 f94f 	bl	32074 <cJSON_Delete>
	if (err) {
   2add6:	b114      	cbz	r4, 2adde <nrf_cloud_device_status_encode+0x4a>
		output->ptr = NULL;
   2add8:	2300      	movs	r3, #0
		output->len = 0;
   2adda:	e9c5 3300 	strd	r3, r3, [r5]
}
   2adde:	4620      	mov	r0, r4
   2ade0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (dev_status->modem) {
   2ade4:	6838      	ldr	r0, [r7, #0]
   2ade6:	b960      	cbnz	r0, 2ae02 <nrf_cloud_device_status_encode+0x6e>
	if (dev_status->svc) {
   2ade8:	6878      	ldr	r0, [r7, #4]
   2adea:	b988      	cbnz	r0, 2ae10 <nrf_cloud_device_status_encode+0x7c>
	output->ptr = cJSON_PrintUnformatted(root_obj);
   2adec:	4630      	mov	r0, r6
   2adee:	f014 ff8f 	bl	3fd10 <cJSON_PrintUnformatted>
   2adf2:	6068      	str	r0, [r5, #4]
	if (output->ptr) {
   2adf4:	2800      	cmp	r0, #0
   2adf6:	d0e9      	beq.n	2adcc <nrf_cloud_device_status_encode+0x38>
		output->len = strlen(output->ptr);
   2adf8:	f7f2 fa23 	bl	1d242 <strlen>
   2adfc:	2400      	movs	r4, #0
   2adfe:	6028      	str	r0, [r5, #0]
   2ae00:	e7e6      	b.n	2add0 <nrf_cloud_device_status_encode+0x3c>
		err = nrf_cloud_modem_info_json_encode(dev_status->modem, device_obj);
   2ae02:	4621      	mov	r1, r4
   2ae04:	f7ff fe7a 	bl	2aafc <nrf_cloud_modem_info_json_encode>
		if (err) {
   2ae08:	4604      	mov	r4, r0
   2ae0a:	2800      	cmp	r0, #0
   2ae0c:	d0ec      	beq.n	2ade8 <nrf_cloud_device_status_encode+0x54>
   2ae0e:	e7df      	b.n	2add0 <nrf_cloud_device_status_encode+0x3c>
		err = nrf_cloud_service_info_json_encode(dev_status->svc, svc_inf_obj);
   2ae10:	4641      	mov	r1, r8
   2ae12:	f7ff fee5 	bl	2abe0 <nrf_cloud_service_info_json_encode>
		if (err) {
   2ae16:	4604      	mov	r4, r0
   2ae18:	2800      	cmp	r0, #0
   2ae1a:	d0e7      	beq.n	2adec <nrf_cloud_device_status_encode+0x58>
   2ae1c:	e7d8      	b.n	2add0 <nrf_cloud_device_status_encode+0x3c>
		return -EINVAL;
   2ae1e:	f06f 0415 	mvn.w	r4, #21
   2ae22:	e7dc      	b.n	2adde <nrf_cloud_device_status_encode+0x4a>
   2ae24:	00047d36 	.word	0x00047d36
   2ae28:	00047e89 	.word	0x00047e89
   2ae2c:	000481c1 	.word	0x000481c1
   2ae30:	000481c8 	.word	0x000481c8

0002ae34 <get_string_from_array>:
{
   2ae34:	b570      	push	{r4, r5, r6, lr}
   2ae36:	4605      	mov	r5, r0
   2ae38:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(string_out != NULL);
   2ae3a:	4614      	mov	r4, r2
   2ae3c:	b952      	cbnz	r2, 2ae54 <get_string_from_array+0x20>
   2ae3e:	490d      	ldr	r1, [pc, #52]	; (2ae74 <get_string_from_array+0x40>)
   2ae40:	480d      	ldr	r0, [pc, #52]	; (2ae78 <get_string_from_array+0x44>)
   2ae42:	f240 42cf 	movw	r2, #1231	; 0x4cf
   2ae46:	f011 ff08 	bl	3cc5a <assert_print>
   2ae4a:	f240 41cf 	movw	r1, #1231	; 0x4cf
   2ae4e:	4809      	ldr	r0, [pc, #36]	; (2ae74 <get_string_from_array+0x40>)
   2ae50:	f011 fefc 	bl	3cc4c <assert_post_action>
	cJSON *item = cJSON_GetArrayItem(array, index);
   2ae54:	4628      	mov	r0, r5
   2ae56:	4631      	mov	r1, r6
   2ae58:	f014 ff65 	bl	3fd26 <cJSON_GetArrayItem>
   2ae5c:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   2ae5e:	f015 f875 	bl	3ff4c <cJSON_IsString>
   2ae62:	b118      	cbz	r0, 2ae6c <get_string_from_array+0x38>
	return 0;
   2ae64:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   2ae66:	692b      	ldr	r3, [r5, #16]
   2ae68:	6023      	str	r3, [r4, #0]
}
   2ae6a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2ae6c:	f06f 0015 	mvn.w	r0, #21
   2ae70:	e7fb      	b.n	2ae6a <get_string_from_array+0x36>
   2ae72:	bf00      	nop
   2ae74:	00047cf7 	.word	0x00047cf7
   2ae78:	00044263 	.word	0x00044263

0002ae7c <get_string_from_obj>:
{
   2ae7c:	b570      	push	{r4, r5, r6, lr}
   2ae7e:	4605      	mov	r5, r0
   2ae80:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(string_out != NULL);
   2ae82:	4614      	mov	r4, r2
   2ae84:	b952      	cbnz	r2, 2ae9c <get_string_from_obj+0x20>
   2ae86:	490d      	ldr	r1, [pc, #52]	; (2aebc <__kernel_ram_size+0xc>)
   2ae88:	480d      	ldr	r0, [pc, #52]	; (2aec0 <__kernel_ram_size+0x10>)
   2ae8a:	f240 42df 	movw	r2, #1247	; 0x4df
   2ae8e:	f011 fee4 	bl	3cc5a <assert_print>
   2ae92:	f240 41df 	movw	r1, #1247	; 0x4df
   2ae96:	4809      	ldr	r0, [pc, #36]	; (2aebc <__kernel_ram_size+0xc>)
   2ae98:	f011 fed8 	bl	3cc4c <assert_post_action>
	cJSON *item = cJSON_GetObjectItem(obj, key);
   2ae9c:	4628      	mov	r0, r5
   2ae9e:	4631      	mov	r1, r6
   2aea0:	f014 ff47 	bl	3fd32 <cJSON_GetObjectItem>
   2aea4:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   2aea6:	f015 f851 	bl	3ff4c <cJSON_IsString>
   2aeaa:	b118      	cbz	r0, 2aeb4 <__kernel_ram_size+0x4>
	return 0;
   2aeac:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   2aeae:	692b      	ldr	r3, [r5, #16]
   2aeb0:	6023      	str	r3, [r4, #0]
}
   2aeb2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2aeb4:	f06f 0015 	mvn.w	r0, #21
   2aeb8:	e7fb      	b.n	2aeb2 <__kernel_ram_size+0x2>
   2aeba:	bf00      	nop
   2aebc:	00047cf7 	.word	0x00047cf7
   2aec0:	00044263 	.word	0x00044263

0002aec4 <nrf_cloud_parse_cell_pos_json>:

static int nrf_cloud_parse_cell_pos_json(const cJSON *const cell_pos_obj,
	struct nrf_cloud_cell_pos_result *const location_out)
{
   2aec4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2aec8:	460c      	mov	r4, r1
	if (!cell_pos_obj || !location_out) {
   2aeca:	4605      	mov	r5, r0
   2aecc:	2800      	cmp	r0, #0
   2aece:	d04f      	beq.n	2af70 <nrf_cloud_parse_cell_pos_json+0xac>
   2aed0:	2900      	cmp	r1, #0
   2aed2:	d04d      	beq.n	2af70 <nrf_cloud_parse_cell_pos_json+0xac>
	}

	cJSON *lat, *lon, *unc;
	char *type;

	lat = cJSON_GetObjectItem(cell_pos_obj,
   2aed4:	4928      	ldr	r1, [pc, #160]	; (2af78 <nrf_cloud_parse_cell_pos_json+0xb4>)
   2aed6:	f014 ff2c 	bl	3fd32 <cJSON_GetObjectItem>
				  NRF_CLOUD_CELL_POS_JSON_KEY_LAT);
	lon = cJSON_GetObjectItem(cell_pos_obj,
   2aeda:	4928      	ldr	r1, [pc, #160]	; (2af7c <nrf_cloud_parse_cell_pos_json+0xb8>)
	lat = cJSON_GetObjectItem(cell_pos_obj,
   2aedc:	4680      	mov	r8, r0
	lon = cJSON_GetObjectItem(cell_pos_obj,
   2aede:	4628      	mov	r0, r5
   2aee0:	f014 ff27 	bl	3fd32 <cJSON_GetObjectItem>
				NRF_CLOUD_CELL_POS_JSON_KEY_LON);
	unc = cJSON_GetObjectItem(cell_pos_obj,
   2aee4:	4926      	ldr	r1, [pc, #152]	; (2af80 <nrf_cloud_parse_cell_pos_json+0xbc>)
	lon = cJSON_GetObjectItem(cell_pos_obj,
   2aee6:	4607      	mov	r7, r0
	unc = cJSON_GetObjectItem(cell_pos_obj,
   2aee8:	4628      	mov	r0, r5
   2aeea:	f014 ff22 	bl	3fd32 <cJSON_GetObjectItem>
   2aeee:	4606      	mov	r6, r0
				NRF_CLOUD_CELL_POS_JSON_KEY_UNCERT);

	if (!cJSON_IsNumber(lat) || !cJSON_IsNumber(lon) ||
   2aef0:	4640      	mov	r0, r8
   2aef2:	f015 f824 	bl	3ff3e <cJSON_IsNumber>
   2aef6:	b920      	cbnz	r0, 2af02 <nrf_cloud_parse_cell_pos_json+0x3e>
	    !cJSON_IsNumber(unc)) {
		return -EBADMSG;
   2aef8:	f06f 004c 	mvn.w	r0, #76	; 0x4c
	} else {
		LOG_WRN("Cellular positioning type not found in message");
	}

	return 0;
}
   2aefc:	b002      	add	sp, #8
   2aefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cJSON_IsNumber(lat) || !cJSON_IsNumber(lon) ||
   2af02:	4638      	mov	r0, r7
   2af04:	f015 f81b 	bl	3ff3e <cJSON_IsNumber>
   2af08:	2800      	cmp	r0, #0
   2af0a:	d0f5      	beq.n	2aef8 <nrf_cloud_parse_cell_pos_json+0x34>
	    !cJSON_IsNumber(unc)) {
   2af0c:	4630      	mov	r0, r6
   2af0e:	f015 f816 	bl	3ff3e <cJSON_IsNumber>
	if (!cJSON_IsNumber(lat) || !cJSON_IsNumber(lon) ||
   2af12:	2800      	cmp	r0, #0
   2af14:	d0f0      	beq.n	2aef8 <nrf_cloud_parse_cell_pos_json+0x34>
	location_out->lat = lat->valuedouble;
   2af16:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
   2af1a:	e9c4 2302 	strd	r2, r3, [r4, #8]
	location_out->lon = lon->valuedouble;
   2af1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   2af22:	e9c4 2304 	strd	r2, r3, [r4, #16]
	location_out->unc = (uint32_t)unc->valueint;
   2af26:	6973      	ldr	r3, [r6, #20]
	if (!get_string_from_obj(cell_pos_obj, NRF_CLOUD_JSON_FULFILL_KEY, &type)) {
   2af28:	4628      	mov	r0, r5
	location_out->unc = (uint32_t)unc->valueint;
   2af2a:	61a3      	str	r3, [r4, #24]
	location_out->type = CELL_POS_TYPE__INVALID;
   2af2c:	2302      	movs	r3, #2
	if (!get_string_from_obj(cell_pos_obj, NRF_CLOUD_JSON_FULFILL_KEY, &type)) {
   2af2e:	4915      	ldr	r1, [pc, #84]	; (2af84 <nrf_cloud_parse_cell_pos_json+0xc0>)
	location_out->type = CELL_POS_TYPE__INVALID;
   2af30:	7023      	strb	r3, [r4, #0]
	if (!get_string_from_obj(cell_pos_obj, NRF_CLOUD_JSON_FULFILL_KEY, &type)) {
   2af32:	aa01      	add	r2, sp, #4
   2af34:	f7ff ffa2 	bl	2ae7c <get_string_from_obj>
   2af38:	b9a8      	cbnz	r0, 2af66 <nrf_cloud_parse_cell_pos_json+0xa2>
		if (!strcmp(type, NRF_CLOUD_CELL_POS_TYPE_VAL_MCELL)) {
   2af3a:	4913      	ldr	r1, [pc, #76]	; (2af88 <nrf_cloud_parse_cell_pos_json+0xc4>)
   2af3c:	9801      	ldr	r0, [sp, #4]
   2af3e:	f7f2 f976 	bl	1d22e <strcmp>
   2af42:	b910      	cbnz	r0, 2af4a <nrf_cloud_parse_cell_pos_json+0x86>
			location_out->type = CELL_POS_TYPE_MULTI;
   2af44:	2301      	movs	r3, #1
   2af46:	7023      	strb	r3, [r4, #0]
   2af48:	e7d8      	b.n	2aefc <nrf_cloud_parse_cell_pos_json+0x38>
		} else if (!strcmp(type, NRF_CLOUD_CELL_POS_TYPE_VAL_SCELL)) {
   2af4a:	4910      	ldr	r1, [pc, #64]	; (2af8c <nrf_cloud_parse_cell_pos_json+0xc8>)
   2af4c:	9801      	ldr	r0, [sp, #4]
   2af4e:	f7f2 f96e 	bl	1d22e <strcmp>
   2af52:	b908      	cbnz	r0, 2af58 <nrf_cloud_parse_cell_pos_json+0x94>
			location_out->type = CELL_POS_TYPE_SINGLE;
   2af54:	7020      	strb	r0, [r4, #0]
   2af56:	e7d1      	b.n	2aefc <nrf_cloud_parse_cell_pos_json+0x38>
			LOG_WRN("Unhandled cellular positioning type: %s", log_strdup(type));
   2af58:	2157      	movs	r1, #87	; 0x57
   2af5a:	9a01      	ldr	r2, [sp, #4]
   2af5c:	480c      	ldr	r0, [pc, #48]	; (2af90 <nrf_cloud_parse_cell_pos_json+0xcc>)
   2af5e:	f011 feb6 	bl	3ccce <z_log_minimal_printk>
	return 0;
   2af62:	2000      	movs	r0, #0
   2af64:	e7ca      	b.n	2aefc <nrf_cloud_parse_cell_pos_json+0x38>
		LOG_WRN("Cellular positioning type not found in message");
   2af66:	2157      	movs	r1, #87	; 0x57
   2af68:	480a      	ldr	r0, [pc, #40]	; (2af94 <nrf_cloud_parse_cell_pos_json+0xd0>)
   2af6a:	f011 feb0 	bl	3ccce <z_log_minimal_printk>
   2af6e:	e7f8      	b.n	2af62 <nrf_cloud_parse_cell_pos_json+0x9e>
		return -EINVAL;
   2af70:	f06f 0015 	mvn.w	r0, #21
   2af74:	e7c2      	b.n	2aefc <nrf_cloud_parse_cell_pos_json+0x38>
   2af76:	bf00      	nop
   2af78:	0004821e 	.word	0x0004821e
   2af7c:	00048222 	.word	0x00048222
   2af80:	00048226 	.word	0x00048226
   2af84:	00048232 	.word	0x00048232
   2af88:	00048240 	.word	0x00048240
   2af8c:	00048246 	.word	0x00048246
   2af90:	0004824c 	.word	0x0004824c
   2af94:	00048279 	.word	0x00048279

0002af98 <nrf_cloud_format_single_cell_pos_req_json>:
{
   2af98:	b570      	push	{r4, r5, r6, lr}
	cJSON *lte_array = cJSON_AddArrayToObjectCS(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2af9a:	490f      	ldr	r1, [pc, #60]	; (2afd8 <nrf_cloud_format_single_cell_pos_req_json+0x40>)
{
   2af9c:	4605      	mov	r5, r0
	cJSON *lte_array = cJSON_AddArrayToObjectCS(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2af9e:	f014 ff74 	bl	3fe8a <cJSON_AddArrayToObjectCS>
   2afa2:	4606      	mov	r6, r0
	cJSON *lte_obj = cJSON_CreateObject();
   2afa4:	f007 f928 	bl	321f8 <cJSON_CreateObject>
   2afa8:	4604      	mov	r4, r0
	if (!cJSON_AddItemToArray(lte_array, lte_obj)) {
   2afaa:	4601      	mov	r1, r0
   2afac:	4630      	mov	r0, r6
   2afae:	f014 feca 	bl	3fd46 <cJSON_AddItemToArray>
   2afb2:	b948      	cbnz	r0, 2afc8 <nrf_cloud_format_single_cell_pos_req_json+0x30>
		cJSON_Delete(lte_obj);
   2afb4:	4620      	mov	r0, r4
   2afb6:	f007 f85d 	bl	32074 <cJSON_Delete>
		err = -ENOMEM;
   2afba:	f06f 040b 	mvn.w	r4, #11
		cJSON_DeleteItemFromObject(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2afbe:	4628      	mov	r0, r5
   2afc0:	4905      	ldr	r1, [pc, #20]	; (2afd8 <nrf_cloud_format_single_cell_pos_req_json+0x40>)
   2afc2:	f014 feee 	bl	3fda2 <cJSON_DeleteItemFromObject>
	return err;
   2afc6:	e005      	b.n	2afd4 <nrf_cloud_format_single_cell_pos_req_json+0x3c>
		err = nrf_cloud_json_add_modem_info(lte_obj);
   2afc8:	4620      	mov	r0, r4
   2afca:	f7ff f9c7 	bl	2a35c <nrf_cloud_json_add_modem_info>
	if (err) {
   2afce:	4604      	mov	r4, r0
   2afd0:	2800      	cmp	r0, #0
   2afd2:	d1f4      	bne.n	2afbe <nrf_cloud_format_single_cell_pos_req_json+0x26>
}
   2afd4:	4620      	mov	r0, r4
   2afd6:	bd70      	pop	{r4, r5, r6, pc}
   2afd8:	000482ad 	.word	0x000482ad

0002afdc <nrf_cloud_format_cell_pos_req_json>:
{
   2afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2afe0:	b085      	sub	sp, #20
   2afe2:	4690      	mov	r8, r2
	if (!inf || !inf_cnt || !req_obj_out) {
   2afe4:	4604      	mov	r4, r0
{
   2afe6:	9101      	str	r1, [sp, #4]
	if (!inf || !inf_cnt || !req_obj_out) {
   2afe8:	2800      	cmp	r0, #0
   2afea:	f000 8123 	beq.w	2b234 <nrf_cloud_format_cell_pos_req_json+0x258>
   2afee:	2900      	cmp	r1, #0
   2aff0:	f000 8120 	beq.w	2b234 <nrf_cloud_format_cell_pos_req_json+0x258>
   2aff4:	2a00      	cmp	r2, #0
   2aff6:	f000 811d 	beq.w	2b234 <nrf_cloud_format_cell_pos_req_json+0x258>
	lte_array = cJSON_AddArrayToObjectCS(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2affa:	4610      	mov	r0, r2
   2affc:	498f      	ldr	r1, [pc, #572]	; (2b23c <nrf_cloud_format_cell_pos_req_json+0x260>)
   2affe:	f014 ff44 	bl	3fe8a <cJSON_AddArrayToObjectCS>
	if (!lte_array) {
   2b002:	9000      	str	r0, [sp, #0]
   2b004:	2800      	cmp	r0, #0
   2b006:	f000 8090 	beq.w	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
	for (size_t i = 0; i < inf_cnt; ++i) {
   2b00a:	f04f 0a00 	mov.w	sl, #0
	cJSON *nmr_array = NULL;
   2b00e:	46d3      	mov	fp, sl
		lte_obj = cJSON_CreateObject();
   2b010:	f007 f8f2 	bl	321f8 <cJSON_CreateObject>
		if (!lte_obj) {
   2b014:	4605      	mov	r5, r0
   2b016:	2800      	cmp	r0, #0
   2b018:	f000 8087 	beq.w	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
		if (!cJSON_AddItemToArray(lte_array, lte_obj)) {
   2b01c:	4601      	mov	r1, r0
   2b01e:	9800      	ldr	r0, [sp, #0]
   2b020:	f014 fe91 	bl	3fd46 <cJSON_AddItemToArray>
   2b024:	b918      	cbnz	r0, 2b02e <nrf_cloud_format_cell_pos_req_json+0x52>
				cJSON_Delete(ncell_obj);
   2b026:	4628      	mov	r0, r5
   2b028:	f007 f824 	bl	32074 <cJSON_Delete>
				goto cleanup;
   2b02c:	e07d      	b.n	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
		if (json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_ECI, cur->id) ||
   2b02e:	68a0      	ldr	r0, [r4, #8]
   2b030:	f7f1 fb48 	bl	1c6c4 <__aeabi_ui2d>
   2b034:	4602      	mov	r2, r0
   2b036:	460b      	mov	r3, r1
   2b038:	4628      	mov	r0, r5
   2b03a:	4981      	ldr	r1, [pc, #516]	; (2b240 <nrf_cloud_format_cell_pos_req_json+0x264>)
   2b03c:	f014 fbb9 	bl	3f7b2 <json_add_num_cs>
   2b040:	2800      	cmp	r0, #0
   2b042:	d172      	bne.n	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MCC, cur->mcc) ||
   2b044:	6820      	ldr	r0, [r4, #0]
   2b046:	f7f1 fb4d 	bl	1c6e4 <__aeabi_i2d>
   2b04a:	4602      	mov	r2, r0
   2b04c:	460b      	mov	r3, r1
   2b04e:	4628      	mov	r0, r5
   2b050:	497c      	ldr	r1, [pc, #496]	; (2b244 <nrf_cloud_format_cell_pos_req_json+0x268>)
   2b052:	f014 fbae 	bl	3f7b2 <json_add_num_cs>
		if (json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_ECI, cur->id) ||
   2b056:	2800      	cmp	r0, #0
   2b058:	d167      	bne.n	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MNC, cur->mnc) ||
   2b05a:	6860      	ldr	r0, [r4, #4]
   2b05c:	f7f1 fb42 	bl	1c6e4 <__aeabi_i2d>
   2b060:	4602      	mov	r2, r0
   2b062:	460b      	mov	r3, r1
   2b064:	4628      	mov	r0, r5
   2b066:	4978      	ldr	r1, [pc, #480]	; (2b248 <nrf_cloud_format_cell_pos_req_json+0x26c>)
   2b068:	f014 fba3 	bl	3f7b2 <json_add_num_cs>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MCC, cur->mcc) ||
   2b06c:	2800      	cmp	r0, #0
   2b06e:	d15c      	bne.n	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_TAC, cur->tac)) {
   2b070:	68e0      	ldr	r0, [r4, #12]
   2b072:	f7f1 fb27 	bl	1c6c4 <__aeabi_ui2d>
   2b076:	4602      	mov	r2, r0
   2b078:	460b      	mov	r3, r1
   2b07a:	4628      	mov	r0, r5
   2b07c:	4973      	ldr	r1, [pc, #460]	; (2b24c <nrf_cloud_format_cell_pos_req_json+0x270>)
   2b07e:	f014 fb98 	bl	3f7b2 <json_add_num_cs>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MNC, cur->mnc) ||
   2b082:	4606      	mov	r6, r0
   2b084:	2800      	cmp	r0, #0
   2b086:	d150      	bne.n	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
		if ((cur->earfcn != NRF_CLOUD_CELL_POS_OMIT_EARFCN) &&
   2b088:	6920      	ldr	r0, [r4, #16]
   2b08a:	1c43      	adds	r3, r0, #1
   2b08c:	d143      	bne.n	2b116 <nrf_cloud_format_cell_pos_req_json+0x13a>
		if ((cur->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b08e:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   2b092:	2bff      	cmp	r3, #255	; 0xff
   2b094:	d154      	bne.n	2b140 <nrf_cloud_format_cell_pos_req_json+0x164>
		if ((cur->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2b096:	f9b4 002c 	ldrsh.w	r0, [r4, #44]	; 0x2c
   2b09a:	28ff      	cmp	r0, #255	; 0xff
   2b09c:	d010      	beq.n	2b0c0 <nrf_cloud_format_cell_pos_req_json+0xe4>
				    RSRQ_ADJ(cur->rsrq))) {
   2b09e:	f7f1 fb21 	bl	1c6e4 <__aeabi_i2d>
   2b0a2:	2200      	movs	r2, #0
   2b0a4:	4b6a      	ldr	r3, [pc, #424]	; (2b250 <nrf_cloud_format_cell_pos_req_json+0x274>)
   2b0a6:	f7f1 fb87 	bl	1c7b8 <__aeabi_dmul>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRQ,
   2b0aa:	2200      	movs	r2, #0
   2b0ac:	4b69      	ldr	r3, [pc, #420]	; (2b254 <nrf_cloud_format_cell_pos_req_json+0x278>)
   2b0ae:	f7f1 f9cb 	bl	1c448 <__aeabi_dsub>
   2b0b2:	4602      	mov	r2, r0
   2b0b4:	460b      	mov	r3, r1
   2b0b6:	4628      	mov	r0, r5
   2b0b8:	4967      	ldr	r1, [pc, #412]	; (2b258 <nrf_cloud_format_cell_pos_req_json+0x27c>)
   2b0ba:	f014 fb7a 	bl	3f7b2 <json_add_num_cs>
		if ((cur->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2b0be:	bba0      	cbnz	r0, 2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
		if (cur->timing_advance != NRF_CLOUD_CELL_POS_OMIT_TIME_ADV) {
   2b0c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2b0c4:	8aa3      	ldrh	r3, [r4, #20]
   2b0c6:	4293      	cmp	r3, r2
   2b0c8:	d00d      	beq.n	2b0e6 <nrf_cloud_format_cell_pos_req_json+0x10a>
			if (json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_T_ADV, t_adv)) {
   2b0ca:	f245 0020 	movw	r0, #20512	; 0x5020
   2b0ce:	4298      	cmp	r0, r3
   2b0d0:	bf28      	it	cs
   2b0d2:	4618      	movcs	r0, r3
   2b0d4:	f7f1 faf6 	bl	1c6c4 <__aeabi_ui2d>
   2b0d8:	4602      	mov	r2, r0
   2b0da:	460b      	mov	r3, r1
   2b0dc:	4628      	mov	r0, r5
   2b0de:	495f      	ldr	r1, [pc, #380]	; (2b25c <nrf_cloud_format_cell_pos_req_json+0x280>)
   2b0e0:	f014 fb67 	bl	3f7b2 <json_add_num_cs>
   2b0e4:	bb08      	cbnz	r0, 2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
		if (lte->ncells_count) {
   2b0e6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   2b0ea:	2a00      	cmp	r2, #0
   2b0ec:	d138      	bne.n	2b160 <nrf_cloud_format_cell_pos_req_json+0x184>
		for (uint8_t j = 0; nmr_array && (j < lte->ncells_count); ++j) {
   2b0ee:	f04f 0900 	mov.w	r9, #0
   2b0f2:	fa5f f789 	uxtb.w	r7, r9
   2b0f6:	f1bb 0f00 	cmp.w	fp, #0
   2b0fa:	d003      	beq.n	2b104 <nrf_cloud_format_cell_pos_req_json+0x128>
   2b0fc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2b100:	42bb      	cmp	r3, r7
   2b102:	d83f      	bhi.n	2b184 <nrf_cloud_format_cell_pos_req_json+0x1a8>
	for (size_t i = 0; i < inf_cnt; ++i) {
   2b104:	9b01      	ldr	r3, [sp, #4]
   2b106:	f10a 0a01 	add.w	sl, sl, #1
   2b10a:	459a      	cmp	sl, r3
   2b10c:	f104 0438 	add.w	r4, r4, #56	; 0x38
   2b110:	f47f af7e 	bne.w	2b010 <nrf_cloud_format_cell_pos_req_json+0x34>
   2b114:	e02a      	b.n	2b16c <nrf_cloud_format_cell_pos_req_json+0x190>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_EARFCN, cur->earfcn)) {
   2b116:	f7f1 fad5 	bl	1c6c4 <__aeabi_ui2d>
   2b11a:	4602      	mov	r2, r0
   2b11c:	460b      	mov	r3, r1
   2b11e:	4628      	mov	r0, r5
   2b120:	494f      	ldr	r1, [pc, #316]	; (2b260 <nrf_cloud_format_cell_pos_req_json+0x284>)
   2b122:	f014 fb46 	bl	3f7b2 <json_add_num_cs>
		if ((cur->earfcn != NRF_CLOUD_CELL_POS_OMIT_EARFCN) &&
   2b126:	2800      	cmp	r0, #0
   2b128:	d0b1      	beq.n	2b08e <nrf_cloud_format_cell_pos_req_json+0xb2>
	cJSON_DeleteItemFromObject(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2b12a:	4640      	mov	r0, r8
   2b12c:	4943      	ldr	r1, [pc, #268]	; (2b23c <nrf_cloud_format_cell_pos_req_json+0x260>)
   2b12e:	f014 fe38 	bl	3fda2 <cJSON_DeleteItemFromObject>
	LOG_ERR("Failed to format location request, out of memory");
   2b132:	2145      	movs	r1, #69	; 0x45
   2b134:	484b      	ldr	r0, [pc, #300]	; (2b264 <nrf_cloud_format_cell_pos_req_json+0x288>)
   2b136:	f011 fdca 	bl	3ccce <z_log_minimal_printk>
	return -ENOMEM;
   2b13a:	f06f 060b 	mvn.w	r6, #11
   2b13e:	e015      	b.n	2b16c <nrf_cloud_format_cell_pos_req_json+0x190>
				    RSRP_ADJ(cur->rsrp))) {
   2b140:	2b00      	cmp	r3, #0
   2b142:	bfd4      	ite	le
   2b144:	208c      	movle	r0, #140	; 0x8c
   2b146:	208d      	movgt	r0, #141	; 0x8d
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRP,
   2b148:	1a18      	subs	r0, r3, r0
   2b14a:	f7f1 facb 	bl	1c6e4 <__aeabi_i2d>
   2b14e:	4602      	mov	r2, r0
   2b150:	460b      	mov	r3, r1
   2b152:	4628      	mov	r0, r5
   2b154:	4944      	ldr	r1, [pc, #272]	; (2b268 <nrf_cloud_format_cell_pos_req_json+0x28c>)
   2b156:	f014 fb2c 	bl	3f7b2 <json_add_num_cs>
		if ((cur->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b15a:	2800      	cmp	r0, #0
   2b15c:	d09b      	beq.n	2b096 <nrf_cloud_format_cell_pos_req_json+0xba>
   2b15e:	e7e4      	b.n	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
			if (lte->neighbor_cells == NULL) {
   2b160:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b162:	b93b      	cbnz	r3, 2b174 <nrf_cloud_format_cell_pos_req_json+0x198>
				LOG_WRN("Neighbor cell count is %u, but buffer is NULL",
   2b164:	2157      	movs	r1, #87	; 0x57
   2b166:	4841      	ldr	r0, [pc, #260]	; (2b26c <nrf_cloud_format_cell_pos_req_json+0x290>)
   2b168:	f011 fdb1 	bl	3ccce <z_log_minimal_printk>
}
   2b16c:	4630      	mov	r0, r6
   2b16e:	b005      	add	sp, #20
   2b170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nmr_array = cJSON_AddArrayToObjectCS(lte_obj,
   2b174:	4628      	mov	r0, r5
   2b176:	493e      	ldr	r1, [pc, #248]	; (2b270 <nrf_cloud_format_cell_pos_req_json+0x294>)
   2b178:	f014 fe87 	bl	3fe8a <cJSON_AddArrayToObjectCS>
			if (!nmr_array) {
   2b17c:	4683      	mov	fp, r0
   2b17e:	2800      	cmp	r0, #0
   2b180:	d1b5      	bne.n	2b0ee <nrf_cloud_format_cell_pos_req_json+0x112>
   2b182:	e7d2      	b.n	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
			struct lte_lc_ncell *ncell = lte->neighbor_cells + j;
   2b184:	013b      	lsls	r3, r7, #4
   2b186:	9303      	str	r3, [sp, #12]
   2b188:	6b63      	ldr	r3, [r4, #52]	; 0x34
			if (ncell == NULL) {
   2b18a:	eb13 1707 	adds.w	r7, r3, r7, lsl #4
			struct lte_lc_ncell *ncell = lte->neighbor_cells + j;
   2b18e:	9302      	str	r3, [sp, #8]
			if (ncell == NULL) {
   2b190:	d0b8      	beq.n	2b104 <nrf_cloud_format_cell_pos_req_json+0x128>
			ncell_obj = cJSON_CreateObject();
   2b192:	f007 f831 	bl	321f8 <cJSON_CreateObject>
			if (!ncell_obj) {
   2b196:	4605      	mov	r5, r0
   2b198:	2800      	cmp	r0, #0
   2b19a:	d0c6      	beq.n	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
			if (!cJSON_AddItemToArray(nmr_array, ncell_obj)) {
   2b19c:	4601      	mov	r1, r0
   2b19e:	4658      	mov	r0, fp
   2b1a0:	f014 fdd1 	bl	3fd46 <cJSON_AddItemToArray>
   2b1a4:	2800      	cmp	r0, #0
   2b1a6:	f43f af3e 	beq.w	2b026 <nrf_cloud_format_cell_pos_req_json+0x4a>
			if (json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_EARFCN,
   2b1aa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2b1ae:	5898      	ldr	r0, [r3, r2]
   2b1b0:	f7f1 fa88 	bl	1c6c4 <__aeabi_ui2d>
   2b1b4:	4602      	mov	r2, r0
   2b1b6:	460b      	mov	r3, r1
   2b1b8:	4628      	mov	r0, r5
   2b1ba:	4929      	ldr	r1, [pc, #164]	; (2b260 <nrf_cloud_format_cell_pos_req_json+0x284>)
   2b1bc:	f014 faf9 	bl	3f7b2 <json_add_num_cs>
   2b1c0:	2800      	cmp	r0, #0
   2b1c2:	d1b2      	bne.n	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
			    json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_PCI,
   2b1c4:	8938      	ldrh	r0, [r7, #8]
   2b1c6:	f7f1 fa7d 	bl	1c6c4 <__aeabi_ui2d>
   2b1ca:	4602      	mov	r2, r0
   2b1cc:	460b      	mov	r3, r1
   2b1ce:	4628      	mov	r0, r5
   2b1d0:	4928      	ldr	r1, [pc, #160]	; (2b274 <nrf_cloud_format_cell_pos_req_json+0x298>)
   2b1d2:	f014 faee 	bl	3f7b2 <json_add_num_cs>
					    ncell->earfcn) ||
   2b1d6:	2800      	cmp	r0, #0
   2b1d8:	d1a7      	bne.n	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
			if ((ncell->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b1da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   2b1de:	2bff      	cmp	r3, #255	; 0xff
   2b1e0:	d118      	bne.n	2b214 <nrf_cloud_format_cell_pos_req_json+0x238>
			if ((ncell->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2b1e2:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
   2b1e6:	28ff      	cmp	r0, #255	; 0xff
   2b1e8:	d011      	beq.n	2b20e <nrf_cloud_format_cell_pos_req_json+0x232>
					    RSRQ_ADJ(ncell->rsrq))) {
   2b1ea:	f7f1 fa7b 	bl	1c6e4 <__aeabi_i2d>
   2b1ee:	2200      	movs	r2, #0
   2b1f0:	4b17      	ldr	r3, [pc, #92]	; (2b250 <nrf_cloud_format_cell_pos_req_json+0x274>)
   2b1f2:	f7f1 fae1 	bl	1c7b8 <__aeabi_dmul>
			    json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRQ,
   2b1f6:	2200      	movs	r2, #0
   2b1f8:	4b16      	ldr	r3, [pc, #88]	; (2b254 <nrf_cloud_format_cell_pos_req_json+0x278>)
   2b1fa:	f7f1 f925 	bl	1c448 <__aeabi_dsub>
   2b1fe:	4602      	mov	r2, r0
   2b200:	460b      	mov	r3, r1
   2b202:	4628      	mov	r0, r5
   2b204:	4914      	ldr	r1, [pc, #80]	; (2b258 <nrf_cloud_format_cell_pos_req_json+0x27c>)
   2b206:	f014 fad4 	bl	3f7b2 <json_add_num_cs>
			if ((ncell->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2b20a:	2800      	cmp	r0, #0
   2b20c:	d18d      	bne.n	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
		for (uint8_t j = 0; nmr_array && (j < lte->ncells_count); ++j) {
   2b20e:	f109 0901 	add.w	r9, r9, #1
   2b212:	e76e      	b.n	2b0f2 <nrf_cloud_format_cell_pos_req_json+0x116>
					    RSRP_ADJ(ncell->rsrp))) {
   2b214:	2b00      	cmp	r3, #0
   2b216:	bfd4      	ite	le
   2b218:	208c      	movle	r0, #140	; 0x8c
   2b21a:	208d      	movgt	r0, #141	; 0x8d
			    json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRP,
   2b21c:	1a18      	subs	r0, r3, r0
   2b21e:	f7f1 fa61 	bl	1c6e4 <__aeabi_i2d>
   2b222:	4602      	mov	r2, r0
   2b224:	460b      	mov	r3, r1
   2b226:	4628      	mov	r0, r5
   2b228:	490f      	ldr	r1, [pc, #60]	; (2b268 <nrf_cloud_format_cell_pos_req_json+0x28c>)
   2b22a:	f014 fac2 	bl	3f7b2 <json_add_num_cs>
			if ((ncell->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b22e:	2800      	cmp	r0, #0
   2b230:	d0d7      	beq.n	2b1e2 <nrf_cloud_format_cell_pos_req_json+0x206>
   2b232:	e77a      	b.n	2b12a <nrf_cloud_format_cell_pos_req_json+0x14e>
		return -EINVAL;
   2b234:	f06f 0615 	mvn.w	r6, #21
   2b238:	e798      	b.n	2b16c <nrf_cloud_format_cell_pos_req_json+0x190>
   2b23a:	bf00      	nop
   2b23c:	000482ad 	.word	0x000482ad
   2b240:	00047e85 	.word	0x00047e85
   2b244:	00046394 	.word	0x00046394
   2b248:	0004639b 	.word	0x0004639b
   2b24c:	00047e81 	.word	0x00047e81
   2b250:	3fe00000 	.word	0x3fe00000
   2b254:	40338000 	.word	0x40338000
   2b258:	000482b8 	.word	0x000482b8
   2b25c:	000482bd 	.word	0x000482bd
   2b260:	000482b1 	.word	0x000482b1
   2b264:	000482fc 	.word	0x000482fc
   2b268:	0004629b 	.word	0x0004629b
   2b26c:	000482c1 	.word	0x000482c1
   2b270:	000482f4 	.word	0x000482f4
   2b274:	000482f8 	.word	0x000482f8

0002b278 <nrf_cloud_handle_error_message>:

int nrf_cloud_handle_error_message(const char *const buf,
				   const char *const app_id,
				   const char *const msg_type,
				   enum nrf_cloud_error * const err)
{
   2b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b27a:	460e      	mov	r6, r1
   2b27c:	4617      	mov	r7, r2
   2b27e:	461c      	mov	r4, r3
	if (!buf || !err) {
   2b280:	b320      	cbz	r0, 2b2cc <nrf_cloud_handle_error_message+0x54>
   2b282:	b31b      	cbz	r3, 2b2cc <nrf_cloud_handle_error_message+0x54>
	}

	int ret;
	cJSON *root_obj;

	*err = NRF_CLOUD_ERROR_NONE;
   2b284:	2300      	movs	r3, #0
   2b286:	6023      	str	r3, [r4, #0]

	root_obj = cJSON_Parse(buf);
   2b288:	f014 fd3e 	bl	3fd08 <cJSON_Parse>
	if (!root_obj) {
   2b28c:	4605      	mov	r5, r0
   2b28e:	b300      	cbz	r0, 2b2d2 <nrf_cloud_handle_error_message+0x5a>
		LOG_DBG("No JSON found");
		return -ENODATA;
	}

	ret = get_error_code_value(root_obj, err);
   2b290:	4621      	mov	r1, r4
   2b292:	f7fe ffff 	bl	2a294 <get_error_code_value>
	if (ret) {
   2b296:	4604      	mov	r4, r0
   2b298:	b908      	cbnz	r0, 2b29e <nrf_cloud_handle_error_message+0x26>
		goto clean_up;
	}

	/* If provided, check for matching app id and msg type */
	if (msg_type &&
   2b29a:	b92f      	cbnz	r7, 2b2a8 <nrf_cloud_handle_error_message+0x30>
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
		ret = -ENOENT;
		goto clean_up;
	}
	if (app_id &&
   2b29c:	b976      	cbnz	r6, 2b2bc <nrf_cloud_handle_error_message+0x44>
		ret = -ENOENT;
		goto clean_up;
	}

clean_up:
	cJSON_Delete(root_obj);
   2b29e:	4628      	mov	r0, r5
   2b2a0:	f006 fee8 	bl	32074 <cJSON_Delete>
	return ret;
}
   2b2a4:	4620      	mov	r0, r4
   2b2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
   2b2a8:	463a      	mov	r2, r7
   2b2aa:	4628      	mov	r0, r5
   2b2ac:	490a      	ldr	r1, [pc, #40]	; (2b2d8 <nrf_cloud_handle_error_message+0x60>)
   2b2ae:	f7fe ff7b 	bl	2a1a8 <json_item_string_exists>
	if (msg_type &&
   2b2b2:	2800      	cmp	r0, #0
   2b2b4:	d1f2      	bne.n	2b29c <nrf_cloud_handle_error_message+0x24>
		ret = -ENOENT;
   2b2b6:	f06f 0401 	mvn.w	r4, #1
		goto clean_up;
   2b2ba:	e7f0      	b.n	2b29e <nrf_cloud_handle_error_message+0x26>
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_APPID_KEY, app_id)) {
   2b2bc:	4632      	mov	r2, r6
   2b2be:	4628      	mov	r0, r5
   2b2c0:	4906      	ldr	r1, [pc, #24]	; (2b2dc <nrf_cloud_handle_error_message+0x64>)
   2b2c2:	f7fe ff71 	bl	2a1a8 <json_item_string_exists>
	if (app_id &&
   2b2c6:	2800      	cmp	r0, #0
   2b2c8:	d1e9      	bne.n	2b29e <nrf_cloud_handle_error_message+0x26>
   2b2ca:	e7f4      	b.n	2b2b6 <nrf_cloud_handle_error_message+0x3e>
		return -EINVAL;
   2b2cc:	f06f 0415 	mvn.w	r4, #21
   2b2d0:	e7e8      	b.n	2b2a4 <nrf_cloud_handle_error_message+0x2c>
		return -ENODATA;
   2b2d2:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2b2d6:	e7e5      	b.n	2b2a4 <nrf_cloud_handle_error_message+0x2c>
   2b2d8:	00043803 	.word	0x00043803
   2b2dc:	000437b2 	.word	0x000437b2

0002b2e0 <nrf_cloud_parse_pgps_response>:
{
   2b2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b2e2:	460c      	mov	r4, r1
	if (!response || !result ||
   2b2e4:	4606      	mov	r6, r0
{
   2b2e6:	b085      	sub	sp, #20
	if (!response || !result ||
   2b2e8:	2800      	cmp	r0, #0
   2b2ea:	d076      	beq.n	2b3da <nrf_cloud_parse_pgps_response+0xfa>
   2b2ec:	2900      	cmp	r1, #0
   2b2ee:	d074      	beq.n	2b3da <nrf_cloud_parse_pgps_response+0xfa>
   2b2f0:	680b      	ldr	r3, [r1, #0]
   2b2f2:	2b00      	cmp	r3, #0
   2b2f4:	d071      	beq.n	2b3da <nrf_cloud_parse_pgps_response+0xfa>
	    !result->host || !result->host_sz ||
   2b2f6:	684b      	ldr	r3, [r1, #4]
   2b2f8:	2b00      	cmp	r3, #0
   2b2fa:	d06e      	beq.n	2b3da <nrf_cloud_parse_pgps_response+0xfa>
   2b2fc:	688b      	ldr	r3, [r1, #8]
   2b2fe:	2b00      	cmp	r3, #0
   2b300:	d06b      	beq.n	2b3da <nrf_cloud_parse_pgps_response+0xfa>
	    !result->path || !result->path_sz) {
   2b302:	68cb      	ldr	r3, [r1, #12]
   2b304:	2b00      	cmp	r3, #0
   2b306:	d068      	beq.n	2b3da <nrf_cloud_parse_pgps_response+0xfa>
	char *host_ptr = NULL;
   2b308:	2700      	movs	r7, #0
	char *path_ptr = NULL;
   2b30a:	e9cd 7701 	strd	r7, r7, [sp, #4]
	cJSON *rsp_obj = cJSON_Parse(response);
   2b30e:	f014 fcfb 	bl	3fd08 <cJSON_Parse>
	if (!rsp_obj) {
   2b312:	4605      	mov	r5, r0
   2b314:	b940      	cbnz	r0, 2b328 <nrf_cloud_parse_pgps_response+0x48>
		LOG_ERR("P-GPS response does not contain valid JSON");
   2b316:	2145      	movs	r1, #69	; 0x45
   2b318:	4833      	ldr	r0, [pc, #204]	; (2b3e8 <nrf_cloud_parse_pgps_response+0x108>)
   2b31a:	f011 fcd8 	bl	3ccce <z_log_minimal_printk>
		err = -EBADMSG;
   2b31e:	f06f 044c 	mvn.w	r4, #76	; 0x4c
}
   2b322:	4620      	mov	r0, r4
   2b324:	b005      	add	sp, #20
   2b326:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cJSON_IsArray(rsp_obj)) {
   2b328:	f014 fe1e 	bl	3ff68 <cJSON_IsArray>
		if (get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_HOST, &host_ptr) ||
   2b32c:	aa01      	add	r2, sp, #4
	if (cJSON_IsArray(rsp_obj)) {
   2b32e:	b300      	cbz	r0, 2b372 <nrf_cloud_parse_pgps_response+0x92>
		if (get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_HOST, &host_ptr) ||
   2b330:	4639      	mov	r1, r7
   2b332:	4628      	mov	r0, r5
   2b334:	f7ff fd7e 	bl	2ae34 <get_string_from_array>
   2b338:	b130      	cbz	r0, 2b348 <nrf_cloud_parse_pgps_response+0x68>
			LOG_ERR("Invalid P-GPS array response format");
   2b33a:	2145      	movs	r1, #69	; 0x45
   2b33c:	482b      	ldr	r0, [pc, #172]	; (2b3ec <nrf_cloud_parse_pgps_response+0x10c>)
			LOG_ERR("Invalid P-GPS response format");
   2b33e:	f011 fcc6 	bl	3ccce <z_log_minimal_printk>
			err = -EFTYPE;
   2b342:	f06f 044e 	mvn.w	r4, #78	; 0x4e
		goto cleanup;
   2b346:	e032      	b.n	2b3ae <nrf_cloud_parse_pgps_response+0xce>
		    get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_PATH, &path_ptr)) {
   2b348:	2101      	movs	r1, #1
   2b34a:	4628      	mov	r0, r5
   2b34c:	aa02      	add	r2, sp, #8
   2b34e:	f7ff fd71 	bl	2ae34 <get_string_from_array>
		if (get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_HOST, &host_ptr) ||
   2b352:	2800      	cmp	r0, #0
   2b354:	d1f1      	bne.n	2b33a <nrf_cloud_parse_pgps_response+0x5a>
	if (!host_ptr || !path_ptr) {
   2b356:	9801      	ldr	r0, [sp, #4]
   2b358:	2800      	cmp	r0, #0
   2b35a:	d041      	beq.n	2b3e0 <nrf_cloud_parse_pgps_response+0x100>
   2b35c:	9b02      	ldr	r3, [sp, #8]
   2b35e:	2b00      	cmp	r3, #0
   2b360:	d03e      	beq.n	2b3e0 <nrf_cloud_parse_pgps_response+0x100>
	if ((result->host_sz <= strlen(host_ptr)) ||
   2b362:	6866      	ldr	r6, [r4, #4]
   2b364:	f7f1 ff6d 	bl	1d242 <strlen>
   2b368:	4286      	cmp	r6, r0
   2b36a:	d824      	bhi.n	2b3b6 <nrf_cloud_parse_pgps_response+0xd6>
		err = -ENOBUFS;
   2b36c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2b370:	e01d      	b.n	2b3ae <nrf_cloud_parse_pgps_response+0xce>
	} else if (get_string_from_obj(rsp_obj, NRF_CLOUD_PGPS_RCV_REST_HOST, &host_ptr) ||
   2b372:	4628      	mov	r0, r5
   2b374:	491e      	ldr	r1, [pc, #120]	; (2b3f0 <nrf_cloud_parse_pgps_response+0x110>)
   2b376:	f7ff fd81 	bl	2ae7c <get_string_from_obj>
   2b37a:	b148      	cbz	r0, 2b390 <nrf_cloud_parse_pgps_response+0xb0>
		err = nrf_cloud_handle_error_message(response, NRF_CLOUD_JSON_APPID_VAL_PGPS,
   2b37c:	4630      	mov	r0, r6
   2b37e:	4a1d      	ldr	r2, [pc, #116]	; (2b3f4 <nrf_cloud_parse_pgps_response+0x114>)
   2b380:	491d      	ldr	r1, [pc, #116]	; (2b3f8 <nrf_cloud_parse_pgps_response+0x118>)
   2b382:	ab03      	add	r3, sp, #12
   2b384:	f7ff ff78 	bl	2b278 <nrf_cloud_handle_error_message>
		if (!err) {
   2b388:	b150      	cbz	r0, 2b3a0 <nrf_cloud_parse_pgps_response+0xc0>
			LOG_ERR("Invalid P-GPS response format");
   2b38a:	2145      	movs	r1, #69	; 0x45
   2b38c:	481b      	ldr	r0, [pc, #108]	; (2b3fc <nrf_cloud_parse_pgps_response+0x11c>)
   2b38e:	e7d6      	b.n	2b33e <nrf_cloud_parse_pgps_response+0x5e>
		   get_string_from_obj(rsp_obj, NRF_CLOUD_PGPS_RCV_REST_PATH, &path_ptr)) {
   2b390:	4628      	mov	r0, r5
   2b392:	491b      	ldr	r1, [pc, #108]	; (2b400 <nrf_cloud_parse_pgps_response+0x120>)
   2b394:	aa02      	add	r2, sp, #8
   2b396:	f7ff fd71 	bl	2ae7c <get_string_from_obj>
	} else if (get_string_from_obj(rsp_obj, NRF_CLOUD_PGPS_RCV_REST_HOST, &host_ptr) ||
   2b39a:	2800      	cmp	r0, #0
   2b39c:	d0db      	beq.n	2b356 <nrf_cloud_parse_pgps_response+0x76>
   2b39e:	e7ed      	b.n	2b37c <nrf_cloud_parse_pgps_response+0x9c>
			LOG_ERR("nRF Cloud returned P-GPS error: %d", nrf_err);
   2b3a0:	2145      	movs	r1, #69	; 0x45
   2b3a2:	9a03      	ldr	r2, [sp, #12]
   2b3a4:	4817      	ldr	r0, [pc, #92]	; (2b404 <nrf_cloud_parse_pgps_response+0x124>)
   2b3a6:	f011 fc92 	bl	3ccce <z_log_minimal_printk>
			err = -EFAULT;
   2b3aa:	f06f 040d 	mvn.w	r4, #13
		cJSON_Delete(rsp_obj);
   2b3ae:	4628      	mov	r0, r5
   2b3b0:	f006 fe60 	bl	32074 <cJSON_Delete>
   2b3b4:	e7b5      	b.n	2b322 <nrf_cloud_parse_pgps_response+0x42>
	    (result->path_sz <= strlen(path_ptr))) {
   2b3b6:	9802      	ldr	r0, [sp, #8]
   2b3b8:	68e6      	ldr	r6, [r4, #12]
   2b3ba:	f7f1 ff42 	bl	1d242 <strlen>
	if ((result->host_sz <= strlen(host_ptr)) ||
   2b3be:	4286      	cmp	r6, r0
   2b3c0:	d9d4      	bls.n	2b36c <nrf_cloud_parse_pgps_response+0x8c>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2b3c2:	6862      	ldr	r2, [r4, #4]
   2b3c4:	9901      	ldr	r1, [sp, #4]
   2b3c6:	6820      	ldr	r0, [r4, #0]
   2b3c8:	f016 fb02 	bl	419d0 <strncpy>
   2b3cc:	68e2      	ldr	r2, [r4, #12]
   2b3ce:	68a0      	ldr	r0, [r4, #8]
   2b3d0:	9902      	ldr	r1, [sp, #8]
   2b3d2:	f016 fafd 	bl	419d0 <strncpy>
	int err = 0;
   2b3d6:	2400      	movs	r4, #0
   2b3d8:	e7e9      	b.n	2b3ae <nrf_cloud_parse_pgps_response+0xce>
		return -EINVAL;
   2b3da:	f06f 0415 	mvn.w	r4, #21
   2b3de:	e7a0      	b.n	2b322 <nrf_cloud_parse_pgps_response+0x42>
		err = -ENOSTR;
   2b3e0:	f06f 043b 	mvn.w	r4, #59	; 0x3b
   2b3e4:	e7e3      	b.n	2b3ae <nrf_cloud_parse_pgps_response+0xce>
   2b3e6:	bf00      	nop
   2b3e8:	00048332 	.word	0x00048332
   2b3ec:	00048362 	.word	0x00048362
   2b3f0:	000453f7 	.word	0x000453f7
   2b3f4:	000437fe 	.word	0x000437fe
   2b3f8:	0004838b 	.word	0x0004838b
   2b3fc:	000483b8 	.word	0x000483b8
   2b400:	000481e6 	.word	0x000481e6
   2b404:	00048390 	.word	0x00048390

0002b408 <nrf_cloud_parse_cell_pos_response>:

int nrf_cloud_parse_cell_pos_response(const char *const buf,
				      struct nrf_cloud_cell_pos_result *result)
{
   2b408:	b570      	push	{r4, r5, r6, lr}
   2b40a:	460d      	mov	r5, r1
	int ret = 1; /* 1: cell-based location not found */
	cJSON *cell_pos_obj;
	cJSON *data_obj;

	if ((buf == NULL) || (result == NULL)) {
   2b40c:	2800      	cmp	r0, #0
   2b40e:	d051      	beq.n	2b4b4 <nrf_cloud_parse_cell_pos_response+0xac>
   2b410:	2900      	cmp	r1, #0
   2b412:	d04f      	beq.n	2b4b4 <nrf_cloud_parse_cell_pos_response+0xac>
		return -EINVAL;
	}

	cell_pos_obj = cJSON_Parse(buf);
   2b414:	f014 fc78 	bl	3fd08 <cJSON_Parse>
	if (!cell_pos_obj) {
   2b418:	4606      	mov	r6, r0
   2b41a:	2800      	cmp	r0, #0
   2b41c:	d04d      	beq.n	2b4ba <nrf_cloud_parse_cell_pos_response+0xb2>
	}

	/* First, check to see if this is a REST payload, which is not wrapped in
	 * an nRF Cloud MQTT message
	 */
	ret = nrf_cloud_parse_cell_pos_json(cell_pos_obj, result);
   2b41e:	4629      	mov	r1, r5
   2b420:	f7ff fd50 	bl	2aec4 <nrf_cloud_parse_cell_pos_json>
	if (ret == 0) {
   2b424:	4604      	mov	r4, r0
   2b426:	b140      	cbz	r0, 2b43a <nrf_cloud_parse_cell_pos_response+0x32>
		goto cleanup;
	}

	/* Clear the error flag and check for MQTT payload format */
	result->err = NRF_CLOUD_ERROR_NONE;
   2b428:	2300      	movs	r3, #0
	ret = 1;

	/* Check for nRF Cloud MQTT message; valid appId and msgType */
	if (!json_item_string_exists(cell_pos_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b42a:	4630      	mov	r0, r6
   2b42c:	4a24      	ldr	r2, [pc, #144]	; (2b4c0 <nrf_cloud_parse_cell_pos_response+0xb8>)
   2b42e:	4925      	ldr	r1, [pc, #148]	; (2b4c4 <nrf_cloud_parse_cell_pos_response+0xbc>)
	result->err = NRF_CLOUD_ERROR_NONE;
   2b430:	61eb      	str	r3, [r5, #28]
	if (!json_item_string_exists(cell_pos_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b432:	f7fe feb9 	bl	2a1a8 <json_item_string_exists>
   2b436:	b9b0      	cbnz	r0, 2b466 <nrf_cloud_parse_cell_pos_response+0x5e>
	ret = 1;
   2b438:	2401      	movs	r4, #1
		LOG_ERR("Expected data not found in cellular positioning message");
		ret = -EBADMSG;
	}

cleanup:
	cJSON_Delete(cell_pos_obj);
   2b43a:	4630      	mov	r0, r6
   2b43c:	f006 fe1a 	bl	32074 <cJSON_Delete>

	if (ret < 0) {
   2b440:	2c00      	cmp	r4, #0
   2b442:	da0e      	bge.n	2b462 <nrf_cloud_parse_cell_pos_response+0x5a>
		/* Clear data on error */
		result->lat = 0.0;
   2b444:	2300      	movs	r3, #0
   2b446:	2200      	movs	r2, #0
   2b448:	e9c5 2302 	strd	r2, r3, [r5, #8]
		result->lon = 0.0;
   2b44c:	e9c5 2304 	strd	r2, r3, [r5, #16]
		result->unc = 0;
   2b450:	2300      	movs	r3, #0
   2b452:	61ab      	str	r3, [r5, #24]
		result->type = CELL_POS_TYPE__INVALID;
   2b454:	2302      	movs	r3, #2
   2b456:	702b      	strb	r3, [r5, #0]

		/* Set to unknown error if an error code was not found */
		if (result->err == NRF_CLOUD_ERROR_NONE) {
   2b458:	69eb      	ldr	r3, [r5, #28]
   2b45a:	b913      	cbnz	r3, 2b462 <nrf_cloud_parse_cell_pos_response+0x5a>
			result->err = NRF_CLOUD_ERROR_UNKNOWN;
   2b45c:	f04f 33ff 	mov.w	r3, #4294967295
   2b460:	61eb      	str	r3, [r5, #28]
		}
	}

	return ret;
}
   2b462:	4620      	mov	r0, r4
   2b464:	bd70      	pop	{r4, r5, r6, pc}
	    !json_item_string_exists(cell_pos_obj, NRF_CLOUD_JSON_APPID_KEY,
   2b466:	4630      	mov	r0, r6
   2b468:	4a17      	ldr	r2, [pc, #92]	; (2b4c8 <nrf_cloud_parse_cell_pos_response+0xc0>)
   2b46a:	4918      	ldr	r1, [pc, #96]	; (2b4cc <nrf_cloud_parse_cell_pos_response+0xc4>)
   2b46c:	f7fe fe9c 	bl	2a1a8 <json_item_string_exists>
				     NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA) ||
   2b470:	2800      	cmp	r0, #0
   2b472:	d0e1      	beq.n	2b438 <nrf_cloud_parse_cell_pos_response+0x30>
	data_obj = cJSON_GetObjectItem(cell_pos_obj, NRF_CLOUD_JSON_DATA_KEY);
   2b474:	4630      	mov	r0, r6
   2b476:	4916      	ldr	r1, [pc, #88]	; (2b4d0 <nrf_cloud_parse_cell_pos_response+0xc8>)
   2b478:	f014 fc5b 	bl	3fd32 <cJSON_GetObjectItem>
	if (data_obj) {
   2b47c:	b150      	cbz	r0, 2b494 <nrf_cloud_parse_cell_pos_response+0x8c>
		ret = nrf_cloud_parse_cell_pos_json(data_obj, result);
   2b47e:	4629      	mov	r1, r5
   2b480:	f7ff fd20 	bl	2aec4 <nrf_cloud_parse_cell_pos_json>
		if (ret) {
   2b484:	4604      	mov	r4, r0
   2b486:	2800      	cmp	r0, #0
   2b488:	d0d7      	beq.n	2b43a <nrf_cloud_parse_cell_pos_response+0x32>
			LOG_ERR("Failed to parse cellular positioning data");
   2b48a:	2145      	movs	r1, #69	; 0x45
   2b48c:	4811      	ldr	r0, [pc, #68]	; (2b4d4 <nrf_cloud_parse_cell_pos_response+0xcc>)
   2b48e:	f011 fc1e 	bl	3ccce <z_log_minimal_printk>
   2b492:	e7d2      	b.n	2b43a <nrf_cloud_parse_cell_pos_response+0x32>
	ret = get_error_code_value(cell_pos_obj, &result->err);
   2b494:	4630      	mov	r0, r6
   2b496:	f105 011c 	add.w	r1, r5, #28
   2b49a:	f7fe fefb 	bl	2a294 <get_error_code_value>
	if (ret) {
   2b49e:	b930      	cbnz	r0, 2b4ae <nrf_cloud_parse_cell_pos_response+0xa6>
		LOG_ERR("Expected data not found in cellular positioning message");
   2b4a0:	2145      	movs	r1, #69	; 0x45
   2b4a2:	480d      	ldr	r0, [pc, #52]	; (2b4d8 <nrf_cloud_parse_cell_pos_response+0xd0>)
   2b4a4:	f011 fc13 	bl	3ccce <z_log_minimal_printk>
		ret = -EBADMSG;
   2b4a8:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   2b4ac:	e7c5      	b.n	2b43a <nrf_cloud_parse_cell_pos_response+0x32>
		ret = -EFAULT;
   2b4ae:	f06f 040d 	mvn.w	r4, #13
   2b4b2:	e7c2      	b.n	2b43a <nrf_cloud_parse_cell_pos_response+0x32>
		return -EINVAL;
   2b4b4:	f06f 0415 	mvn.w	r4, #21
   2b4b8:	e7d3      	b.n	2b462 <nrf_cloud_parse_cell_pos_response+0x5a>
		return 1;
   2b4ba:	2401      	movs	r4, #1
   2b4bc:	e7d1      	b.n	2b462 <nrf_cloud_parse_cell_pos_response+0x5a>
   2b4be:	bf00      	nop
   2b4c0:	000437fe 	.word	0x000437fe
   2b4c4:	00043803 	.word	0x00043803
   2b4c8:	000483db 	.word	0x000483db
   2b4cc:	000437b2 	.word	0x000437b2
   2b4d0:	000438da 	.word	0x000438da
   2b4d4:	000483e4 	.word	0x000483e4
   2b4d8:	00048413 	.word	0x00048413

0002b4dc <nrf_cloud_detect_disconnection_request>:

	return ret;
}

bool nrf_cloud_detect_disconnection_request(const char *const buf)
{
   2b4dc:	b538      	push	{r3, r4, r5, lr}
	if (buf == NULL) {
   2b4de:	4604      	mov	r4, r0
   2b4e0:	b910      	cbnz	r0, 2b4e8 <nrf_cloud_detect_disconnection_request+0xc>
		return false;
   2b4e2:	2400      	movs	r4, #0
		ret = false;
	}

	cJSON_Delete(discon_request_obj);
	return ret;
}
   2b4e4:	4620      	mov	r0, r4
   2b4e6:	bd38      	pop	{r3, r4, r5, pc}
	if (memchr(buf, '\0', NRF_CLOUD_JSON_MSG_MAX_LEN_DISCONNECT) == NULL) {
   2b4e8:	22c8      	movs	r2, #200	; 0xc8
   2b4ea:	2100      	movs	r1, #0
   2b4ec:	f016 f84b 	bl	41586 <memchr>
   2b4f0:	2800      	cmp	r0, #0
   2b4f2:	d0f6      	beq.n	2b4e2 <nrf_cloud_detect_disconnection_request+0x6>
	if (strstr(buf, NRF_CLOUD_JSON_APPID_VAL_DEVICE) == NULL ||
   2b4f4:	4620      	mov	r0, r4
   2b4f6:	490f      	ldr	r1, [pc, #60]	; (2b534 <nrf_cloud_detect_disconnection_request+0x58>)
   2b4f8:	f016 fa9d 	bl	41a36 <strstr>
   2b4fc:	2800      	cmp	r0, #0
   2b4fe:	d0f0      	beq.n	2b4e2 <nrf_cloud_detect_disconnection_request+0x6>
	    strstr(buf, NRF_CLOUD_JSON_MSG_TYPE_VAL_DISCONNECT) == NULL) {
   2b500:	4620      	mov	r0, r4
   2b502:	490d      	ldr	r1, [pc, #52]	; (2b538 <nrf_cloud_detect_disconnection_request+0x5c>)
   2b504:	f016 fa97 	bl	41a36 <strstr>
	if (strstr(buf, NRF_CLOUD_JSON_APPID_VAL_DEVICE) == NULL ||
   2b508:	2800      	cmp	r0, #0
   2b50a:	d0ea      	beq.n	2b4e2 <nrf_cloud_detect_disconnection_request+0x6>
	cJSON *discon_request_obj = cJSON_Parse(buf);
   2b50c:	4620      	mov	r0, r4
   2b50e:	f014 fbfb 	bl	3fd08 <cJSON_Parse>
	if (!json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b512:	4a09      	ldr	r2, [pc, #36]	; (2b538 <nrf_cloud_detect_disconnection_request+0x5c>)
   2b514:	4909      	ldr	r1, [pc, #36]	; (2b53c <nrf_cloud_detect_disconnection_request+0x60>)
	cJSON *discon_request_obj = cJSON_Parse(buf);
   2b516:	4605      	mov	r5, r0
	if (!json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b518:	f7fe fe46 	bl	2a1a8 <json_item_string_exists>
   2b51c:	4604      	mov	r4, r0
   2b51e:	b128      	cbz	r0, 2b52c <nrf_cloud_detect_disconnection_request+0x50>
	    !json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_APPID_KEY,
   2b520:	4628      	mov	r0, r5
   2b522:	4a04      	ldr	r2, [pc, #16]	; (2b534 <nrf_cloud_detect_disconnection_request+0x58>)
   2b524:	4906      	ldr	r1, [pc, #24]	; (2b540 <nrf_cloud_detect_disconnection_request+0x64>)
   2b526:	f7fe fe3f 	bl	2a1a8 <json_item_string_exists>
   2b52a:	4604      	mov	r4, r0
	cJSON_Delete(discon_request_obj);
   2b52c:	4628      	mov	r0, r5
   2b52e:	f006 fda1 	bl	32074 <cJSON_Delete>
	return ret;
   2b532:	e7d7      	b.n	2b4e4 <nrf_cloud_detect_disconnection_request+0x8>
   2b534:	00048450 	.word	0x00048450
   2b538:	00048457 	.word	0x00048457
   2b53c:	00043803 	.word	0x00043803
   2b540:	000437b2 	.word	0x000437b2

0002b544 <nrf_cloud_configured_client_id_get>:
	return 0;
#endif
}

int nrf_cloud_configured_client_id_get(char * const buf, const size_t buf_sz)
{
   2b544:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b546:	460d      	mov	r5, r1
	if (!buf || !buf_sz) {
   2b548:	4606      	mov	r6, r0
{
   2b54a:	b089      	sub	sp, #36	; 0x24
	if (!buf || !buf_sz) {
   2b54c:	b310      	cbz	r0, 2b594 <nrf_cloud_configured_client_id_get+0x50>
   2b54e:	b309      	cbz	r1, 2b594 <nrf_cloud_configured_client_id_get+0x50>
	int print_ret;

#if defined(CONFIG_NRF_CLOUD_CLIENT_ID_SRC_IMEI)
	char imei_buf[CGSN_RESPONSE_LENGTH];

	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
   2b550:	af02      	add	r7, sp, #8
   2b552:	2116      	movs	r1, #22
   2b554:	4638      	mov	r0, r7
   2b556:	4a12      	ldr	r2, [pc, #72]	; (2b5a0 <nrf_cloud_configured_client_id_get+0x5c>)
   2b558:	f009 fe18 	bl	3518c <nrf_modem_at_cmd>
	if (err) {
   2b55c:	4604      	mov	r4, r0
   2b55e:	b138      	cbz	r0, 2b570 <nrf_cloud_configured_client_id_get+0x2c>
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
   2b560:	4602      	mov	r2, r0
   2b562:	2145      	movs	r1, #69	; 0x45
   2b564:	480f      	ldr	r0, [pc, #60]	; (2b5a4 <nrf_cloud_configured_client_id_get+0x60>)
   2b566:	f011 fbb2 	bl	3ccce <z_log_minimal_printk>
	} else if (print_ret >= buf_sz) {
		return -EMSGSIZE;
	}

	return 0;
}
   2b56a:	4620      	mov	r0, r4
   2b56c:	b009      	add	sp, #36	; 0x24
   2b56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	print_ret = snprintk(buf, buf_sz, "%s%.*s",
   2b570:	230f      	movs	r3, #15
	imei_buf[NRF_IMEI_LEN] = 0;
   2b572:	f88d 0017 	strb.w	r0, [sp, #23]
	print_ret = snprintk(buf, buf_sz, "%s%.*s",
   2b576:	9300      	str	r3, [sp, #0]
   2b578:	4629      	mov	r1, r5
   2b57a:	4630      	mov	r0, r6
   2b57c:	4b0a      	ldr	r3, [pc, #40]	; (2b5a8 <nrf_cloud_configured_client_id_get+0x64>)
   2b57e:	4a0b      	ldr	r2, [pc, #44]	; (2b5ac <nrf_cloud_configured_client_id_get+0x68>)
   2b580:	9701      	str	r7, [sp, #4]
   2b582:	f011 f994 	bl	3c8ae <snprintk>
	if (print_ret <= 0) {
   2b586:	2800      	cmp	r0, #0
   2b588:	dd07      	ble.n	2b59a <nrf_cloud_configured_client_id_get+0x56>
		return -EMSGSIZE;
   2b58a:	4285      	cmp	r5, r0
   2b58c:	bf98      	it	ls
   2b58e:	f06f 0479 	mvnls.w	r4, #121	; 0x79
   2b592:	e7ea      	b.n	2b56a <nrf_cloud_configured_client_id_get+0x26>
		return -EINVAL;
   2b594:	f06f 0415 	mvn.w	r4, #21
   2b598:	e7e7      	b.n	2b56a <nrf_cloud_configured_client_id_get+0x26>
		return -EIO;
   2b59a:	f06f 0404 	mvn.w	r4, #4
   2b59e:	e7e4      	b.n	2b56a <nrf_cloud_configured_client_id_get+0x26>
   2b5a0:	000462c8 	.word	0x000462c8
   2b5a4:	00048477 	.word	0x00048477
   2b5a8:	0004849d 	.word	0x0004849d
   2b5ac:	000484a2 	.word	0x000484a2

0002b5b0 <connect_error_translate>:
	return err;
}

static int connect_error_translate(const int err)
{
	switch (err) {
   2b5b0:	2800      	cmp	r0, #0
{
   2b5b2:	b508      	push	{r3, lr}
	switch (err) {
   2b5b4:	dc0e      	bgt.n	2b5d4 <connect_error_translate+0x24>
   2b5b6:	f110 0f0d 	cmn.w	r0, #13
   2b5ba:	da13      	bge.n	2b5e4 <connect_error_translate+0x34>
   2b5bc:	f110 0f6f 	cmn.w	r0, #111	; 0x6f
   2b5c0:	d049      	beq.n	2b656 <connect_error_translate+0xa6>
   2b5c2:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   2b5c6:	da34      	bge.n	2b632 <connect_error_translate+0x82>
   2b5c8:	f110 0f77 	cmn.w	r0, #119	; 0x77
   2b5cc:	d046      	beq.n	2b65c <connect_error_translate+0xac>
   2b5ce:	f110 0f74 	cmn.w	r0, #116	; 0x74
   2b5d2:	d046      	beq.n	2b662 <connect_error_translate+0xb2>
	case -ENOMEM:
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
	case -EINPROGRESS:
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
	default:
		LOG_ERR("nRF cloud connect failed %d", err);
   2b5d4:	4602      	mov	r2, r0
   2b5d6:	2145      	movs	r1, #69	; 0x45
   2b5d8:	4825      	ldr	r0, [pc, #148]	; (2b670 <connect_error_translate+0xc0>)
   2b5da:	f011 fb78 	bl	3ccce <z_log_minimal_printk>
		return NRF_CLOUD_CONNECT_RES_ERR_MISC;
   2b5de:	f06f 0004 	mvn.w	r0, #4
   2b5e2:	e025      	b.n	2b630 <connect_error_translate+0x80>
	switch (err) {
   2b5e4:	f100 030d 	add.w	r3, r0, #13
   2b5e8:	2b0d      	cmp	r3, #13
   2b5ea:	d8f3      	bhi.n	2b5d4 <connect_error_translate+0x24>
   2b5ec:	a201      	add	r2, pc, #4	; (adr r2, 2b5f4 <connect_error_translate+0x44>)
   2b5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2b5f2:	bf00      	nop
   2b5f4:	0002b645 	.word	0x0002b645
   2b5f8:	0002b651 	.word	0x0002b651
   2b5fc:	0002b5d5 	.word	0x0002b5d5
   2b600:	0002b62d 	.word	0x0002b62d
   2b604:	0002b5d5 	.word	0x0002b5d5
   2b608:	0002b64b 	.word	0x0002b64b
   2b60c:	0002b5d5 	.word	0x0002b5d5
   2b610:	0002b5d5 	.word	0x0002b5d5
   2b614:	0002b5d5 	.word	0x0002b5d5
   2b618:	0002b5d5 	.word	0x0002b5d5
   2b61c:	0002b5d5 	.word	0x0002b5d5
   2b620:	0002b5d5 	.word	0x0002b5d5
   2b624:	0002b5d5 	.word	0x0002b5d5
   2b628:	0002b631 	.word	0x0002b631
   2b62c:	f06f 0002 	mvn.w	r0, #2
	}
}
   2b630:	bd08      	pop	{r3, pc}
	switch (err) {
   2b632:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   2b636:	d017      	beq.n	2b668 <connect_error_translate+0xb8>
   2b638:	f110 0f16 	cmn.w	r0, #22
   2b63c:	d1ca      	bne.n	2b5d4 <connect_error_translate+0x24>
		return NRF_CLOUD_CONNECT_RES_ERR_PRV_KEY;
   2b63e:	f06f 0006 	mvn.w	r0, #6
   2b642:	e7f5      	b.n	2b630 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
   2b644:	f04f 30ff 	mov.w	r0, #4294967295
   2b648:	e7f2      	b.n	2b630 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_BACKEND;
   2b64a:	f06f 0003 	mvn.w	r0, #3
   2b64e:	e7ef      	b.n	2b630 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
   2b650:	f06f 0005 	mvn.w	r0, #5
   2b654:	e7ec      	b.n	2b630 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_CERT_MISC;
   2b656:	f06f 0008 	mvn.w	r0, #8
   2b65a:	e7e9      	b.n	2b630 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   2b65c:	f06f 000a 	mvn.w	r0, #10
   2b660:	e7e6      	b.n	2b630 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_TIMEOUT_NO_DATA;
   2b662:	f06f 0009 	mvn.w	r0, #9
   2b666:	e7e3      	b.n	2b630 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_CERT;
   2b668:	f06f 0007 	mvn.w	r0, #7
   2b66c:	e7e0      	b.n	2b630 <connect_error_translate+0x80>
   2b66e:	bf00      	nop
   2b670:	000484bd 	.word	0x000484bd

0002b674 <nfsm_get_current_state>:
	return current_state;
   2b674:	4b01      	ldr	r3, [pc, #4]	; (2b67c <nfsm_get_current_state+0x8>)
   2b676:	7818      	ldrb	r0, [r3, #0]
}
   2b678:	4770      	bx	lr
   2b67a:	bf00      	nop
   2b67c:	2001c90a 	.word	0x2001c90a

0002b680 <nfsm_set_current_state_and_notify>:
{
   2b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b682:	4606      	mov	r6, r0
	bool discon_evt = (evt != NULL) &&
   2b684:	460c      	mov	r4, r1
   2b686:	b341      	cbz	r1, 2b6da <nfsm_set_current_state_and_notify+0x5a>
   2b688:	780d      	ldrb	r5, [r1, #0]
   2b68a:	f1a5 0309 	sub.w	r3, r5, #9
   2b68e:	425d      	negs	r5, r3
   2b690:	415d      	adcs	r5, r3
	return z_impl_k_mutex_lock(mutex, timeout);
   2b692:	f04f 32ff 	mov.w	r2, #4294967295
   2b696:	f04f 33ff 	mov.w	r3, #4294967295
   2b69a:	4811      	ldr	r0, [pc, #68]	; (2b6e0 <nfsm_set_current_state_and_notify+0x60>)
   2b69c:	f00b f9a6 	bl	369ec <z_impl_k_mutex_lock>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b6a0:	4f10      	ldr	r7, [pc, #64]	; (2b6e4 <nfsm_set_current_state_and_notify+0x64>)
   2b6a2:	e8d7 3faf 	lda	r3, [r7]
	if (!atomic_get(&uninit_in_progress)) {
   2b6a6:	b90b      	cbnz	r3, 2b6ac <nfsm_set_current_state_and_notify+0x2c>
		current_state = state;
   2b6a8:	4b0f      	ldr	r3, [pc, #60]	; (2b6e8 <nfsm_set_current_state_and_notify+0x68>)
   2b6aa:	701e      	strb	r6, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   2b6ac:	480c      	ldr	r0, [pc, #48]	; (2b6e0 <nfsm_set_current_state_and_notify+0x60>)
   2b6ae:	f00b fa6f 	bl	36b90 <z_impl_k_mutex_unlock>
	if (discon_evt) {
   2b6b2:	b11d      	cbz	r5, 2b6bc <nfsm_set_current_state_and_notify+0x3c>
		atomic_set(&transport_disconnected, 1);
   2b6b4:	2101      	movs	r1, #1
   2b6b6:	480d      	ldr	r0, [pc, #52]	; (2b6ec <nfsm_set_current_state_and_notify+0x6c>)
   2b6b8:	f014 f8ef 	bl	3f89a <atomic_set.isra.0>
	if ((app_event_handler != NULL) && (evt != NULL)) {
   2b6bc:	4b0c      	ldr	r3, [pc, #48]	; (2b6f0 <nfsm_set_current_state_and_notify+0x70>)
   2b6be:	681b      	ldr	r3, [r3, #0]
   2b6c0:	b113      	cbz	r3, 2b6c8 <nfsm_set_current_state_and_notify+0x48>
   2b6c2:	b10c      	cbz	r4, 2b6c8 <nfsm_set_current_state_and_notify+0x48>
		app_event_handler(evt);
   2b6c4:	4620      	mov	r0, r4
   2b6c6:	4798      	blx	r3
	if (discon_evt && atomic_get(&uninit_in_progress)) {
   2b6c8:	b14d      	cbz	r5, 2b6de <nfsm_set_current_state_and_notify+0x5e>
   2b6ca:	e8d7 3faf 	lda	r3, [r7]
   2b6ce:	b133      	cbz	r3, 2b6de <nfsm_set_current_state_and_notify+0x5e>
}
   2b6d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   2b6d4:	4807      	ldr	r0, [pc, #28]	; (2b6f4 <nfsm_set_current_state_and_notify+0x74>)
   2b6d6:	f00b bbdb 	b.w	36e90 <z_impl_k_sem_give>
	bool discon_evt = (evt != NULL) &&
   2b6da:	460d      	mov	r5, r1
   2b6dc:	e7d9      	b.n	2b692 <nfsm_set_current_state_and_notify+0x12>
}
   2b6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b6e0:	20014fa4 	.word	0x20014fa4
   2b6e4:	20019560 	.word	0x20019560
   2b6e8:	2001c90a 	.word	0x2001c90a
   2b6ec:	2001955c 	.word	0x2001955c
   2b6f0:	20019550 	.word	0x20019550
   2b6f4:	200150d8 	.word	0x200150d8

0002b6f8 <nfsm_get_disconnect_requested>:
   2b6f8:	4b03      	ldr	r3, [pc, #12]	; (2b708 <nfsm_get_disconnect_requested+0x10>)
   2b6fa:	e8d3 0faf 	lda	r0, [r3]
}
   2b6fe:	3800      	subs	r0, #0
   2b700:	bf18      	it	ne
   2b702:	2001      	movne	r0, #1
   2b704:	4770      	bx	lr
   2b706:	bf00      	nop
   2b708:	20019558 	.word	0x20019558

0002b70c <nrf_cloud_init>:
{
   2b70c:	b538      	push	{r3, r4, r5, lr}
	if (current_state != STATE_IDLE ||
   2b70e:	4b15      	ldr	r3, [pc, #84]	; (2b764 <nrf_cloud_init+0x58>)
{
   2b710:	4605      	mov	r5, r0
	if (current_state != STATE_IDLE ||
   2b712:	781b      	ldrb	r3, [r3, #0]
   2b714:	b11b      	cbz	r3, 2b71e <nrf_cloud_init+0x12>
		return -EACCES;
   2b716:	f06f 040c 	mvn.w	r4, #12
}
   2b71a:	4620      	mov	r0, r4
   2b71c:	bd38      	pop	{r3, r4, r5, pc}
   2b71e:	4b12      	ldr	r3, [pc, #72]	; (2b768 <nrf_cloud_init+0x5c>)
   2b720:	e8d3 3faf 	lda	r3, [r3]
	if (current_state != STATE_IDLE ||
   2b724:	2b00      	cmp	r3, #0
   2b726:	d1f6      	bne.n	2b716 <nrf_cloud_init+0xa>
	if (param->event_handler == NULL) {
   2b728:	6803      	ldr	r3, [r0, #0]
   2b72a:	b1bb      	cbz	r3, 2b75c <nrf_cloud_init+0x50>
	err = nfsm_init();
   2b72c:	f000 fb86 	bl	2be3c <nfsm_init>
	if (err) {
   2b730:	4604      	mov	r4, r0
   2b732:	2800      	cmp	r0, #0
   2b734:	d1f1      	bne.n	2b71a <nrf_cloud_init+0xe>
	err = nrf_cloud_codec_init();
   2b736:	f7fe fdcd 	bl	2a2d4 <nrf_cloud_codec_init>
	if (err) {
   2b73a:	4604      	mov	r4, r0
   2b73c:	2800      	cmp	r0, #0
   2b73e:	d1ec      	bne.n	2b71a <nrf_cloud_init+0xe>
	err = nct_init(param->client_id);
   2b740:	6868      	ldr	r0, [r5, #4]
   2b742:	f000 fee9 	bl	2c518 <nct_init>
	if (err) {
   2b746:	4604      	mov	r4, r0
   2b748:	2800      	cmp	r0, #0
   2b74a:	d1e6      	bne.n	2b71a <nrf_cloud_init+0xe>
	app_event_handler = param->event_handler;
   2b74c:	682a      	ldr	r2, [r5, #0]
   2b74e:	4b07      	ldr	r3, [pc, #28]	; (2b76c <nrf_cloud_init+0x60>)
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, NULL);
   2b750:	4601      	mov	r1, r0
   2b752:	2001      	movs	r0, #1
	app_event_handler = param->event_handler;
   2b754:	601a      	str	r2, [r3, #0]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, NULL);
   2b756:	f7ff ff93 	bl	2b680 <nfsm_set_current_state_and_notify>
	return 0;
   2b75a:	e7de      	b.n	2b71a <nrf_cloud_init+0xe>
		return -EINVAL;
   2b75c:	f06f 0415 	mvn.w	r4, #21
   2b760:	e7db      	b.n	2b71a <nrf_cloud_init+0xe>
   2b762:	bf00      	nop
   2b764:	2001c90a 	.word	0x2001c90a
   2b768:	20019560 	.word	0x20019560
   2b76c:	20019550 	.word	0x20019550

0002b770 <nrf_cloud_uninit>:
{
   2b770:	b538      	push	{r3, r4, r5, lr}
	err = nrf_cloud_fota_uninit();
   2b772:	f004 f8a9 	bl	2f8c8 <nrf_cloud_fota_uninit>
	if (err == -EBUSY) {
   2b776:	f110 0f10 	cmn.w	r0, #16
	err = nrf_cloud_fota_uninit();
   2b77a:	4604      	mov	r4, r0
	if (err == -EBUSY) {
   2b77c:	d105      	bne.n	2b78a <nrf_cloud_uninit+0x1a>
		LOG_WRN("Cannot uninitialize while a FOTA job is active");
   2b77e:	2157      	movs	r1, #87	; 0x57
   2b780:	481e      	ldr	r0, [pc, #120]	; (2b7fc <nrf_cloud_uninit+0x8c>)
   2b782:	f011 faa4 	bl	3ccce <z_log_minimal_printk>
}
   2b786:	4620      	mov	r0, r4
   2b788:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set(&uninit_in_progress, 1);
   2b78a:	2101      	movs	r1, #1
   2b78c:	481c      	ldr	r0, [pc, #112]	; (2b800 <nrf_cloud_uninit+0x90>)
   2b78e:	f014 f884 	bl	3f89a <atomic_set.isra.0>
	return z_impl_k_mutex_lock(mutex, timeout);
   2b792:	f04f 32ff 	mov.w	r2, #4294967295
   2b796:	f04f 33ff 	mov.w	r3, #4294967295
   2b79a:	481a      	ldr	r0, [pc, #104]	; (2b804 <nrf_cloud_uninit+0x94>)
   2b79c:	f00b f926 	bl	369ec <z_impl_k_mutex_lock>
	current_state = STATE_IDLE;
   2b7a0:	2200      	movs	r2, #0
	prev_state = current_state;
   2b7a2:	4b19      	ldr	r3, [pc, #100]	; (2b808 <nrf_cloud_uninit+0x98>)
   2b7a4:	781d      	ldrb	r5, [r3, #0]
	current_state = STATE_IDLE;
   2b7a6:	701a      	strb	r2, [r3, #0]
	prev_state = current_state;
   2b7a8:	b2ed      	uxtb	r5, r5
	return z_impl_k_mutex_unlock(mutex);
   2b7aa:	4816      	ldr	r0, [pc, #88]	; (2b804 <nrf_cloud_uninit+0x94>)
   2b7ac:	f00b f9f0 	bl	36b90 <z_impl_k_mutex_unlock>
	if (prev_state >= STATE_CONNECTED) {
   2b7b0:	2d01      	cmp	r5, #1
   2b7b2:	d918      	bls.n	2b7e6 <nrf_cloud_uninit+0x76>
		atomic_set(&disconnect_requested, 1);
   2b7b4:	2101      	movs	r1, #1
   2b7b6:	4815      	ldr	r0, [pc, #84]	; (2b80c <nrf_cloud_uninit+0x9c>)
   2b7b8:	f014 f86f 	bl	3f89a <atomic_set.isra.0>
	z_impl_k_sem_reset(sem);
   2b7bc:	4814      	ldr	r0, [pc, #80]	; (2b810 <nrf_cloud_uninit+0xa0>)
   2b7be:	f00b fc0d 	bl	36fdc <z_impl_k_sem_reset>
		(void)nct_disconnect();
   2b7c2:	f001 f915 	bl	2c9f0 <nct_disconnect>
	return z_impl_k_sem_take(sem, timeout);
   2b7c6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2b7ca:	2300      	movs	r3, #0
   2b7cc:	4810      	ldr	r0, [pc, #64]	; (2b810 <nrf_cloud_uninit+0xa0>)
   2b7ce:	f00b fb9b 	bl	36f08 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   2b7d2:	f110 0f0b 	cmn.w	r0, #11
   2b7d6:	4604      	mov	r4, r0
   2b7d8:	d105      	bne.n	2b7e6 <nrf_cloud_uninit+0x76>
			LOG_WRN("Did not receive expected disconnect event during cloud unint");
   2b7da:	2157      	movs	r1, #87	; 0x57
   2b7dc:	480d      	ldr	r0, [pc, #52]	; (2b814 <nrf_cloud_uninit+0xa4>)
   2b7de:	f011 fa76 	bl	3ccce <z_log_minimal_printk>
			err = -EISCONN;
   2b7e2:	f06f 047e 	mvn.w	r4, #126	; 0x7e
	app_event_handler = NULL;
   2b7e6:	2500      	movs	r5, #0
   2b7e8:	4b0b      	ldr	r3, [pc, #44]	; (2b818 <nrf_cloud_uninit+0xa8>)
   2b7ea:	601d      	str	r5, [r3, #0]
	nct_uninit();
   2b7ec:	f000 ff88 	bl	2c700 <nct_uninit>
	atomic_set(&uninit_in_progress, 0);
   2b7f0:	4629      	mov	r1, r5
   2b7f2:	4803      	ldr	r0, [pc, #12]	; (2b800 <nrf_cloud_uninit+0x90>)
   2b7f4:	f014 f851 	bl	3f89a <atomic_set.isra.0>
	return err;
   2b7f8:	e7c5      	b.n	2b786 <nrf_cloud_uninit+0x16>
   2b7fa:	bf00      	nop
   2b7fc:	000484de 	.word	0x000484de
   2b800:	20019560 	.word	0x20019560
   2b804:	20014fa4 	.word	0x20014fa4
   2b808:	2001c90a 	.word	0x2001c90a
   2b80c:	20019558 	.word	0x20019558
   2b810:	200150d8 	.word	0x200150d8
   2b814:	00048512 	.word	0x00048512
   2b818:	20019550 	.word	0x20019550

0002b81c <nrf_cloud_connect>:
	atomic_set(&disconnect_requested, 0);
	return nct_connect();
}

int nrf_cloud_connect(const struct nrf_cloud_connect_param *param)
{
   2b81c:	b510      	push	{r4, lr}
	int err;

	if (current_state == STATE_IDLE) {
   2b81e:	4b12      	ldr	r3, [pc, #72]	; (2b868 <nrf_cloud_connect+0x4c>)
   2b820:	781a      	ldrb	r2, [r3, #0]
   2b822:	b1d2      	cbz	r2, 2b85a <nrf_cloud_connect+0x3e>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
	} else if (current_state != STATE_INITIALIZED) {
   2b824:	781a      	ldrb	r2, [r3, #0]
   2b826:	2a01      	cmp	r2, #1
   2b828:	d11a      	bne.n	2b860 <nrf_cloud_connect+0x44>
}

#if IS_ENABLED(CONFIG_NRF_CLOUD_CONNECTION_POLL_THREAD)
static int start_connection_poll()
{
	if (current_state == STATE_IDLE) {
   2b82a:	781b      	ldrb	r3, [r3, #0]
   2b82c:	b17b      	cbz	r3, 2b84e <nrf_cloud_connect+0x32>
   2b82e:	4b0f      	ldr	r3, [pc, #60]	; (2b86c <nrf_cloud_connect+0x50>)
   2b830:	e8d3 4faf 	lda	r4, [r3]
		return -EACCES;
	}

	if (atomic_get(&connection_poll_active)) {
   2b834:	b974      	cbnz	r4, 2b854 <nrf_cloud_connect+0x38>
		LOG_DBG("Connection poll in progress");
		return -EINPROGRESS;
	}

	atomic_set(&disconnect_requested, 0);
   2b836:	4621      	mov	r1, r4
   2b838:	480d      	ldr	r0, [pc, #52]	; (2b870 <nrf_cloud_connect+0x54>)
   2b83a:	f014 f82e 	bl	3f89a <atomic_set.isra.0>
	z_impl_k_sem_give(sem);
   2b83e:	480d      	ldr	r0, [pc, #52]	; (2b874 <nrf_cloud_connect+0x58>)
   2b840:	f00b fb26 	bl	36e90 <z_impl_k_sem_give>
	k_sem_give(&connection_poll_sem);

	return 0;
   2b844:	4620      	mov	r0, r4
}
   2b846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return connect_error_translate(err);
   2b84a:	f7ff beb1 	b.w	2b5b0 <connect_error_translate>
		return -EACCES;
   2b84e:	f06f 000c 	mvn.w	r0, #12
   2b852:	e7f8      	b.n	2b846 <nrf_cloud_connect+0x2a>
		return -EINPROGRESS;
   2b854:	f06f 0076 	mvn.w	r0, #118	; 0x76
   2b858:	e7f5      	b.n	2b846 <nrf_cloud_connect+0x2a>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
   2b85a:	f04f 30ff 	mov.w	r0, #4294967295
}
   2b85e:	bd10      	pop	{r4, pc}
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   2b860:	f06f 000a 	mvn.w	r0, #10
   2b864:	e7fb      	b.n	2b85e <nrf_cloud_connect+0x42>
   2b866:	bf00      	nop
   2b868:	2001c90a 	.word	0x2001c90a
   2b86c:	20019554 	.word	0x20019554
   2b870:	20019558 	.word	0x20019558
   2b874:	20015030 	.word	0x20015030

0002b878 <nrf_cloud_disconnect>:
{
   2b878:	b508      	push	{r3, lr}
	if (current_state < STATE_CONNECTED) {
   2b87a:	4b07      	ldr	r3, [pc, #28]	; (2b898 <nrf_cloud_disconnect+0x20>)
   2b87c:	781b      	ldrb	r3, [r3, #0]
   2b87e:	2b01      	cmp	r3, #1
   2b880:	d907      	bls.n	2b892 <nrf_cloud_disconnect+0x1a>
	atomic_set(&disconnect_requested, 1);
   2b882:	2101      	movs	r1, #1
   2b884:	4805      	ldr	r0, [pc, #20]	; (2b89c <nrf_cloud_disconnect+0x24>)
   2b886:	f014 f808 	bl	3f89a <atomic_set.isra.0>
}
   2b88a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_disconnect();
   2b88e:	f001 b8af 	b.w	2c9f0 <nct_disconnect>
}
   2b892:	f06f 000c 	mvn.w	r0, #12
   2b896:	bd08      	pop	{r3, pc}
   2b898:	2001c90a 	.word	0x2001c90a
   2b89c:	20019558 	.word	0x20019558

0002b8a0 <nrf_cloud_run>:
}

void nrf_cloud_run(void)
{
   2b8a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
start:
	k_sem_take(&connection_poll_sem, K_FOREVER);
	atomic_set(&connection_poll_active, 1);

	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   2b8a4:	2700      	movs	r7, #0
	return z_impl_k_sem_take(sem, timeout);
   2b8a6:	4d41      	ldr	r5, [pc, #260]	; (2b9ac <nrf_cloud_run+0x10c>)
	atomic_set(&connection_poll_active, 1);
   2b8a8:	4e41      	ldr	r6, [pc, #260]	; (2b9b0 <nrf_cloud_run+0x110>)
{
   2b8aa:	b089      	sub	sp, #36	; 0x24
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2b8ac:	f04f 0902 	mov.w	r9, #2
   2b8b0:	f04f 32ff 	mov.w	r2, #4294967295
   2b8b4:	f04f 33ff 	mov.w	r3, #4294967295
   2b8b8:	4628      	mov	r0, r5
	return current_state;
   2b8ba:	f8df 8104 	ldr.w	r8, [pc, #260]	; 2b9c0 <nrf_cloud_run+0x120>
   2b8be:	f00b fb23 	bl	36f08 <z_impl_k_sem_take>
	atomic_set(&connection_poll_active, 1);
   2b8c2:	2101      	movs	r1, #1
   2b8c4:	4630      	mov	r0, r6
   2b8c6:	f013 ffe8 	bl	3f89a <atomic_set.isra.0>
	return current_state;
   2b8ca:	f898 0000 	ldrb.w	r0, [r8]
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2b8ce:	a902      	add	r1, sp, #8
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2b8d0:	f88d 9008 	strb.w	r9, [sp, #8]
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   2b8d4:	9703      	str	r7, [sp, #12]
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2b8d6:	f7ff fed3 	bl	2b680 <nfsm_set_current_state_and_notify>
	atomic_set(&disconnect_requested, 0);
   2b8da:	2100      	movs	r1, #0
   2b8dc:	4835      	ldr	r0, [pc, #212]	; (2b9b4 <nrf_cloud_run+0x114>)
   2b8de:	f013 ffdc 	bl	3f89a <atomic_set.isra.0>
	return nct_connect();
   2b8e2:	f000 ff29 	bl	2c738 <nct_connect>

	ret = connect_to_cloud();
	ret = connect_error_translate(ret);
   2b8e6:	f7ff fe63 	bl	2b5b0 <connect_error_translate>

	if (ret != NRF_CLOUD_CONNECT_RES_SUCCESS) {
   2b8ea:	4604      	mov	r4, r0
   2b8ec:	b188      	cbz	r0, 2b912 <nrf_cloud_run+0x72>
		evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
		evt.status = ret;
   2b8ee:	9003      	str	r0, [sp, #12]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2b8f0:	a902      	add	r1, sp, #8
	return current_state;
   2b8f2:	f898 0000 	ldrb.w	r0, [r8]
		evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2b8f6:	f88d 9008 	strb.w	r9, [sp, #8]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2b8fa:	f7ff fec1 	bl	2b680 <nfsm_set_current_state_and_notify>
		nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
		nrf_cloud_disconnect();
	}

reset:
	atomic_set(&connection_poll_active, 0);
   2b8fe:	2100      	movs	r1, #0
   2b900:	4630      	mov	r0, r6
   2b902:	f013 ffca 	bl	3f89a <atomic_set.isra.0>
   2b906:	2200      	movs	r2, #0
   2b908:	2300      	movs	r3, #0
   2b90a:	4628      	mov	r0, r5
   2b90c:	f00b fafc 	bl	36f08 <z_impl_k_sem_take>
	k_sem_take(&connection_poll_sem, K_NO_WAIT);
	goto start;
   2b910:	e7cc      	b.n	2b8ac <nrf_cloud_run+0xc>
	fds[0].fd = nct_socket_get();
   2b912:	f001 f8cb 	bl	2caac <nct_socket_get>
	fds[0].events = POLLIN;
   2b916:	2301      	movs	r3, #1
   2b918:	f8ad 3004 	strh.w	r3, [sp, #4]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   2b91c:	2309      	movs	r3, #9
	fds[0].fd = nct_socket_get();
   2b91e:	9000      	str	r0, [sp, #0]
	atomic_set(&transport_disconnected, 0);
   2b920:	4825      	ldr	r0, [pc, #148]	; (2b9b8 <nrf_cloud_run+0x118>)
   2b922:	4621      	mov	r1, r4
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   2b924:	f88d 3008 	strb.w	r3, [sp, #8]
   2b928:	4604      	mov	r4, r0
	atomic_set(&transport_disconnected, 0);
   2b92a:	f013 ffb6 	bl	3f89a <atomic_set.isra.0>
		ret = poll(fds, ARRAY_SIZE(fds), nct_keepalive_time_left());
   2b92e:	f001 f8b7 	bl	2caa0 <nct_keepalive_time_left>
   2b932:	4602      	mov	r2, r0
	return z_impl_zsock_poll(fds, nfds, timeout);
   2b934:	2101      	movs	r1, #1
   2b936:	4668      	mov	r0, sp
   2b938:	f011 fde4 	bl	3d504 <z_impl_zsock_poll>
		if (ret == 0) {
   2b93c:	4602      	mov	r2, r0
   2b93e:	b940      	cbnz	r0, 2b952 <nrf_cloud_run+0xb2>
	return nct_process();
   2b940:	f001 f860 	bl	2ca04 <nct_process>
			if ((ret < 0) && (ret != -EAGAIN)) {
   2b944:	2800      	cmp	r0, #0
   2b946:	daf2      	bge.n	2b92e <nrf_cloud_run+0x8e>
   2b948:	300b      	adds	r0, #11
   2b94a:	d0f0      	beq.n	2b92e <nrf_cloud_run+0x8e>
				evt.status = NRF_CLOUD_DISCONNECT_CLOSED_BY_REMOTE;
   2b94c:	2301      	movs	r3, #1
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   2b94e:	9303      	str	r3, [sp, #12]
			break;
   2b950:	e00d      	b.n	2b96e <nrf_cloud_run+0xce>
		if ((fds[0].revents & POLLIN) == POLLIN) {
   2b952:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2b956:	07d8      	lsls	r0, r3, #31
   2b958:	d515      	bpl.n	2b986 <nrf_cloud_run+0xe6>
	return nct_process();
   2b95a:	f001 f853 	bl	2ca04 <nct_process>
			if ((ret < 0) && (ret != -EAGAIN)) {
   2b95e:	2800      	cmp	r0, #0
   2b960:	da01      	bge.n	2b966 <nrf_cloud_run+0xc6>
   2b962:	300b      	adds	r0, #11
   2b964:	d1f2      	bne.n	2b94c <nrf_cloud_run+0xac>
   2b966:	e8d4 3faf 	lda	r3, [r4]
			if (atomic_get(&transport_disconnected) == 1) {
   2b96a:	2b01      	cmp	r3, #1
   2b96c:	d1df      	bne.n	2b92e <nrf_cloud_run+0x8e>
   2b96e:	4b12      	ldr	r3, [pc, #72]	; (2b9b8 <nrf_cloud_run+0x118>)
   2b970:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&transport_disconnected) == 0) {
   2b974:	2b00      	cmp	r3, #0
   2b976:	d1c2      	bne.n	2b8fe <nrf_cloud_run+0x5e>
		nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   2b978:	a902      	add	r1, sp, #8
   2b97a:	2001      	movs	r0, #1
   2b97c:	f7ff fe80 	bl	2b680 <nfsm_set_current_state_and_notify>
		nrf_cloud_disconnect();
   2b980:	f7ff ff7a 	bl	2b878 <nrf_cloud_disconnect>
   2b984:	e7bb      	b.n	2b8fe <nrf_cloud_run+0x5e>
		if (ret < 0) {
   2b986:	2a00      	cmp	r2, #0
   2b988:	da05      	bge.n	2b996 <nrf_cloud_run+0xf6>
			LOG_ERR("poll() returned an error: %d", ret);
   2b98a:	2145      	movs	r1, #69	; 0x45
   2b98c:	480b      	ldr	r0, [pc, #44]	; (2b9bc <nrf_cloud_run+0x11c>)
   2b98e:	f011 f99e 	bl	3ccce <z_log_minimal_printk>
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   2b992:	2303      	movs	r3, #3
   2b994:	e7db      	b.n	2b94e <nrf_cloud_run+0xae>
		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   2b996:	0699      	lsls	r1, r3, #26
   2b998:	d503      	bpl.n	2b9a2 <nrf_cloud_run+0x102>
			if (nfsm_get_disconnect_requested()) {
   2b99a:	f7ff fead 	bl	2b6f8 <nfsm_get_disconnect_requested>
			evt.status = NRF_CLOUD_DISCONNECT_INVALID_REQUEST;
   2b99e:	2302      	movs	r3, #2
   2b9a0:	e7d5      	b.n	2b94e <nrf_cloud_run+0xae>
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   2b9a2:	06da      	lsls	r2, r3, #27
   2b9a4:	d4d2      	bmi.n	2b94c <nrf_cloud_run+0xac>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   2b9a6:	071b      	lsls	r3, r3, #28
   2b9a8:	d5c1      	bpl.n	2b92e <nrf_cloud_run+0x8e>
   2b9aa:	e7f2      	b.n	2b992 <nrf_cloud_run+0xf2>
   2b9ac:	20015030 	.word	0x20015030
   2b9b0:	20019554 	.word	0x20019554
   2b9b4:	20019558 	.word	0x20019558
   2b9b8:	2001955c 	.word	0x2001955c
   2b9bc:	00048554 	.word	0x00048554
   2b9c0:	2001c90a 	.word	0x2001c90a

0002b9c4 <nrf_cloud_send>:
{
   2b9c4:	b510      	push	{r4, lr}
   2b9c6:	b086      	sub	sp, #24
	if (!msg) {
   2b9c8:	2800      	cmp	r0, #0
   2b9ca:	d044      	beq.n	2ba56 <nrf_cloud_send+0x92>
	switch (msg->topic_type) {
   2b9cc:	7a03      	ldrb	r3, [r0, #8]
   2b9ce:	2b02      	cmp	r3, #2
   2b9d0:	d01f      	beq.n	2ba12 <nrf_cloud_send+0x4e>
   2b9d2:	2b03      	cmp	r3, #3
   2b9d4:	d042      	beq.n	2ba5c <nrf_cloud_send+0x98>
   2b9d6:	2b01      	cmp	r3, #1
   2b9d8:	d15d      	bne.n	2ba96 <nrf_cloud_send+0xd2>
		if (current_state < STATE_CC_CONNECTED) {
   2b9da:	4a32      	ldr	r2, [pc, #200]	; (2baa4 <nrf_cloud_send+0xe0>)
   2b9dc:	7812      	ldrb	r2, [r2, #0]
   2b9de:	2a03      	cmp	r2, #3
   2b9e0:	d956      	bls.n	2ba90 <nrf_cloud_send+0xcc>
		const struct nct_cc_data shadow_data = {
   2b9e2:	2200      	movs	r2, #0
   2b9e4:	9205      	str	r2, [sp, #20]
   2b9e6:	e9cd 2203 	strd	r2, r2, [sp, #12]
   2b9ea:	6802      	ldr	r2, [r0, #0]
   2b9ec:	f88d 3016 	strb.w	r3, [sp, #22]
   2b9f0:	9201      	str	r2, [sp, #4]
   2b9f2:	6842      	ldr	r2, [r0, #4]
   2b9f4:	9202      	str	r2, [sp, #8]
   2b9f6:	68c2      	ldr	r2, [r0, #12]
		err = nct_cc_send(&shadow_data);
   2b9f8:	a801      	add	r0, sp, #4
		const struct nct_cc_data shadow_data = {
   2b9fa:	f8ad 2014 	strh.w	r2, [sp, #20]
		err = nct_cc_send(&shadow_data);
   2b9fe:	f000 fee9 	bl	2c7d4 <nct_cc_send>
		if (err) {
   2ba02:	4604      	mov	r4, r0
   2ba04:	b1d0      	cbz	r0, 2ba3c <nrf_cloud_send+0x78>
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   2ba06:	2145      	movs	r1, #69	; 0x45
   2ba08:	4602      	mov	r2, r0
   2ba0a:	4827      	ldr	r0, [pc, #156]	; (2baa8 <nrf_cloud_send+0xe4>)
			LOG_ERR("nct_dc_bulk_send failed, error: %d", err);
   2ba0c:	f011 f95f 	bl	3ccce <z_log_minimal_printk>
			return err;
   2ba10:	e014      	b.n	2ba3c <nrf_cloud_send+0x78>
		if (current_state != STATE_DC_CONNECTED) {
   2ba12:	4b24      	ldr	r3, [pc, #144]	; (2baa4 <nrf_cloud_send+0xe0>)
   2ba14:	781b      	ldrb	r3, [r3, #0]
   2ba16:	2b09      	cmp	r3, #9
   2ba18:	d13a      	bne.n	2ba90 <nrf_cloud_send+0xcc>
		const struct nct_dc_data buf = {
   2ba1a:	2300      	movs	r3, #0
   2ba1c:	9305      	str	r3, [sp, #20]
   2ba1e:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2ba22:	6803      	ldr	r3, [r0, #0]
   2ba24:	9301      	str	r3, [sp, #4]
   2ba26:	6843      	ldr	r3, [r0, #4]
   2ba28:	9302      	str	r3, [sp, #8]
   2ba2a:	68c3      	ldr	r3, [r0, #12]
   2ba2c:	f8ad 3014 	strh.w	r3, [sp, #20]
		if (msg->qos == MQTT_QOS_0_AT_MOST_ONCE) {
   2ba30:	7a43      	ldrb	r3, [r0, #9]
   2ba32:	b933      	cbnz	r3, 2ba42 <nrf_cloud_send+0x7e>
			err = nct_dc_stream(&buf);
   2ba34:	a801      	add	r0, sp, #4
   2ba36:	f013 ff74 	bl	3f922 <nct_dc_stream>
	return 0;
   2ba3a:	2400      	movs	r4, #0
}
   2ba3c:	4620      	mov	r0, r4
   2ba3e:	b006      	add	sp, #24
   2ba40:	bd10      	pop	{r4, pc}
		} else if (msg->qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2ba42:	2b01      	cmp	r3, #1
   2ba44:	d103      	bne.n	2ba4e <nrf_cloud_send+0x8a>
			err = nct_dc_send(&buf);
   2ba46:	a801      	add	r0, sp, #4
   2ba48:	f013 ff68 	bl	3f91c <nct_dc_send>
   2ba4c:	e7f5      	b.n	2ba3a <nrf_cloud_send+0x76>
			LOG_ERR("Unsupported QoS setting");
   2ba4e:	2145      	movs	r1, #69	; 0x45
   2ba50:	4816      	ldr	r0, [pc, #88]	; (2baac <nrf_cloud_send+0xe8>)
   2ba52:	f011 f93c 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   2ba56:	f06f 0415 	mvn.w	r4, #21
   2ba5a:	e7ef      	b.n	2ba3c <nrf_cloud_send+0x78>
		if (current_state != STATE_DC_CONNECTED) {
   2ba5c:	4b11      	ldr	r3, [pc, #68]	; (2baa4 <nrf_cloud_send+0xe0>)
   2ba5e:	781b      	ldrb	r3, [r3, #0]
   2ba60:	2b09      	cmp	r3, #9
   2ba62:	d115      	bne.n	2ba90 <nrf_cloud_send+0xcc>
		const struct nct_dc_data buf = {
   2ba64:	2300      	movs	r3, #0
   2ba66:	9305      	str	r3, [sp, #20]
   2ba68:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2ba6c:	6803      	ldr	r3, [r0, #0]
		err = nct_dc_bulk_send(&buf, msg->qos);
   2ba6e:	7a41      	ldrb	r1, [r0, #9]
		const struct nct_dc_data buf = {
   2ba70:	9301      	str	r3, [sp, #4]
   2ba72:	6843      	ldr	r3, [r0, #4]
   2ba74:	9302      	str	r3, [sp, #8]
   2ba76:	68c3      	ldr	r3, [r0, #12]
		err = nct_dc_bulk_send(&buf, msg->qos);
   2ba78:	a801      	add	r0, sp, #4
		const struct nct_dc_data buf = {
   2ba7a:	f8ad 3014 	strh.w	r3, [sp, #20]
		err = nct_dc_bulk_send(&buf, msg->qos);
   2ba7e:	f000 ff67 	bl	2c950 <nct_dc_bulk_send>
		if (err) {
   2ba82:	4604      	mov	r4, r0
   2ba84:	2800      	cmp	r0, #0
   2ba86:	d0d9      	beq.n	2ba3c <nrf_cloud_send+0x78>
			LOG_ERR("nct_dc_bulk_send failed, error: %d", err);
   2ba88:	4602      	mov	r2, r0
   2ba8a:	2145      	movs	r1, #69	; 0x45
   2ba8c:	4808      	ldr	r0, [pc, #32]	; (2bab0 <nrf_cloud_send+0xec>)
   2ba8e:	e7bd      	b.n	2ba0c <nrf_cloud_send+0x48>
			return -EACCES;
   2ba90:	f06f 040c 	mvn.w	r4, #12
   2ba94:	e7d2      	b.n	2ba3c <nrf_cloud_send+0x78>
		LOG_ERR("Unknown topic type");
   2ba96:	2145      	movs	r1, #69	; 0x45
   2ba98:	4806      	ldr	r0, [pc, #24]	; (2bab4 <nrf_cloud_send+0xf0>)
   2ba9a:	f011 f918 	bl	3ccce <z_log_minimal_printk>
		return -ENODATA;
   2ba9e:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2baa2:	e7cb      	b.n	2ba3c <nrf_cloud_send+0x78>
   2baa4:	2001c90a 	.word	0x2001c90a
   2baa8:	00048576 	.word	0x00048576
   2baac:	0004859a 	.word	0x0004859a
   2bab0:	000485b7 	.word	0x000485b7
   2bab4:	000485df 	.word	0x000485df

0002bab8 <nrf_cloud_shadow_device_status_update>:
{
   2bab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2baba:	4604      	mov	r4, r0
	struct nrf_cloud_tx_data tx_data = {
   2babc:	2210      	movs	r2, #16
   2babe:	2100      	movs	r1, #0
   2bac0:	4668      	mov	r0, sp
   2bac2:	f015 fd9e 	bl	41602 <memset>
   2bac6:	f240 1301 	movw	r3, #257	; 0x101
   2baca:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (current_state != STATE_DC_CONNECTED) {
   2bace:	4b0c      	ldr	r3, [pc, #48]	; (2bb00 <nrf_cloud_shadow_device_status_update+0x48>)
   2bad0:	781b      	ldrb	r3, [r3, #0]
   2bad2:	2b09      	cmp	r3, #9
   2bad4:	d110      	bne.n	2baf8 <nrf_cloud_shadow_device_status_update+0x40>
	err = nrf_cloud_device_status_encode(dev_status, &tx_data.data, true);
   2bad6:	4620      	mov	r0, r4
   2bad8:	2201      	movs	r2, #1
   2bada:	4669      	mov	r1, sp
   2badc:	f7ff f95a 	bl	2ad94 <nrf_cloud_device_status_encode>
	if (err) {
   2bae0:	4604      	mov	r4, r0
   2bae2:	b930      	cbnz	r0, 2baf2 <nrf_cloud_shadow_device_status_update+0x3a>
	err = nrf_cloud_send(&tx_data);
   2bae4:	4668      	mov	r0, sp
   2bae6:	f7ff ff6d 	bl	2b9c4 <nrf_cloud_send>
   2baea:	4604      	mov	r4, r0
	nrf_cloud_device_status_free(&tx_data.data);
   2baec:	4668      	mov	r0, sp
   2baee:	f013 fec7 	bl	3f880 <nrf_cloud_device_status_free>
}
   2baf2:	4620      	mov	r0, r4
   2baf4:	b004      	add	sp, #16
   2baf6:	bd10      	pop	{r4, pc}
		return -EACCES;
   2baf8:	f06f 040c 	mvn.w	r4, #12
   2bafc:	e7f9      	b.n	2baf2 <nrf_cloud_shadow_device_status_update+0x3a>
   2bafe:	bf00      	nop
   2bb00:	2001c90a 	.word	0x2001c90a

0002bb04 <nct_input>:
	return nfsm_handle_incoming_event(evt, current_state);
   2bb04:	4b01      	ldr	r3, [pc, #4]	; (2bb0c <nct_input+0x8>)
   2bb06:	7819      	ldrb	r1, [r3, #0]
   2bb08:	f000 b99e 	b.w	2be48 <nfsm_handle_incoming_event>
   2bb0c:	2001c90a 	.word	0x2001c90a

0002bb10 <nct_apply_update>:
	app_event_handler(evt);
   2bb10:	4b01      	ldr	r3, [pc, #4]	; (2bb18 <nct_apply_update+0x8>)
   2bb12:	681b      	ldr	r3, [r3, #0]
   2bb14:	4718      	bx	r3
   2bb16:	bf00      	nop
   2bb18:	20019550 	.word	0x20019550

0002bb1c <dc_rx_data_handler>:
#endif
	return -EFTYPE;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   2bb1c:	b570      	push	{r4, r5, r6, lr}
	struct nrf_cloud_evt cloud_evt = {
   2bb1e:	2306      	movs	r3, #6
   2bb20:	2600      	movs	r6, #0
{
   2bb22:	b08e      	sub	sp, #56	; 0x38
	struct nrf_cloud_evt cloud_evt = {
   2bb24:	e9cd 6600 	strd	r6, r6, [sp]
   2bb28:	f88d 3000 	strb.w	r3, [sp]
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
   2bb2c:	6843      	ldr	r3, [r0, #4]
	struct nrf_cloud_evt cloud_evt = {
   2bb2e:	aa02      	add	r2, sp, #8
{
   2bb30:	4604      	mov	r4, r0
	struct nrf_cloud_evt cloud_evt = {
   2bb32:	e893 0003 	ldmia.w	r3, {r0, r1}
   2bb36:	e882 0003 	stmia.w	r2, {r0, r1}
   2bb3a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2bb3e:	aa04      	add	r2, sp, #16
   2bb40:	e882 0003 	stmia.w	r2, {r0, r1}
		.topic = nct_evt->param.dc->topic,
	};

	bool discon_req = nrf_cloud_detect_disconnection_request(nct_evt->param.dc->data.ptr);
   2bb44:	6858      	ldr	r0, [r3, #4]
   2bb46:	f7ff fcc9 	bl	2b4dc <nrf_cloud_detect_disconnection_request>

	/* All data is forwared to the app... unless a callback is registered */
	if (cell_pos_cb_send(nct_evt->param.dc->data.ptr) == 0) {
   2bb4a:	6863      	ldr	r3, [r4, #4]
	if (cell_pos_cb) {
   2bb4c:	4c10      	ldr	r4, [pc, #64]	; (2bb90 <dc_rx_data_handler+0x74>)
	bool discon_req = nrf_cloud_detect_disconnection_request(nct_evt->param.dc->data.ptr);
   2bb4e:	4605      	mov	r5, r0
	if (cell_pos_cb_send(nct_evt->param.dc->data.ptr) == 0) {
   2bb50:	6858      	ldr	r0, [r3, #4]
	if (cell_pos_cb) {
   2bb52:	6823      	ldr	r3, [r4, #0]
   2bb54:	b15b      	cbz	r3, 2bb6e <dc_rx_data_handler+0x52>
		int ret = nrf_cloud_cell_pos_process(rx_buf, &res);
   2bb56:	a906      	add	r1, sp, #24
   2bb58:	f003 fac0 	bl	2f0dc <nrf_cloud_cell_pos_process>
		if (ret <= 0) {
   2bb5c:	42b0      	cmp	r0, r6
   2bb5e:	dc06      	bgt.n	2bb6e <dc_rx_data_handler+0x52>
			cell_pos_cb(&res);
   2bb60:	6823      	ldr	r3, [r4, #0]
   2bb62:	a806      	add	r0, sp, #24
   2bb64:	4798      	blx	r3
	cell_pos_cb = cb;
   2bb66:	6026      	str	r6, [r4, #0]
			LOG_ERR("nRF Cloud disconnection-on-delete failure, error: %d", err);
		}
	}

	return 0;
}
   2bb68:	2000      	movs	r0, #0
   2bb6a:	b00e      	add	sp, #56	; 0x38
   2bb6c:	bd70      	pop	{r4, r5, r6, pc}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   2bb6e:	f7ff fd81 	bl	2b674 <nfsm_get_current_state>
   2bb72:	4669      	mov	r1, sp
   2bb74:	f7ff fd84 	bl	2b680 <nfsm_set_current_state_and_notify>
	if (discon_req) {
   2bb78:	2d00      	cmp	r5, #0
   2bb7a:	d0f5      	beq.n	2bb68 <dc_rx_data_handler+0x4c>
		int err = nrf_cloud_disconnect();
   2bb7c:	f7ff fe7c 	bl	2b878 <nrf_cloud_disconnect>
		if (err < 0) {
   2bb80:	1e02      	subs	r2, r0, #0
   2bb82:	daf1      	bge.n	2bb68 <dc_rx_data_handler+0x4c>
			LOG_ERR("nRF Cloud disconnection-on-delete failure, error: %d", err);
   2bb84:	2145      	movs	r1, #69	; 0x45
   2bb86:	4803      	ldr	r0, [pc, #12]	; (2bb94 <dc_rx_data_handler+0x78>)
   2bb88:	f011 f8a1 	bl	3ccce <z_log_minimal_printk>
   2bb8c:	e7ec      	b.n	2bb68 <dc_rx_data_handler+0x4c>
   2bb8e:	bf00      	nop
   2bb90:	20019564 	.word	0x20019564
   2bb94:	00048617 	.word	0x00048617

0002bb98 <cc_connection_handler>:
{
   2bb98:	b510      	push	{r4, lr}
   2bb9a:	4604      	mov	r4, r0
   2bb9c:	b086      	sub	sp, #24
	const struct nrf_cloud_evt evt = {
   2bb9e:	2100      	movs	r1, #0
   2bba0:	2218      	movs	r2, #24
   2bba2:	4668      	mov	r0, sp
   2bba4:	f015 fd2d 	bl	41602 <memset>
   2bba8:	23ff      	movs	r3, #255	; 0xff
	if (nct_evt->status != 0) {
   2bbaa:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   2bbac:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   2bbb0:	b151      	cbz	r1, 2bbc8 <cc_connection_handler+0x30>
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2bbb2:	f7ff fd5f 	bl	2b674 <nfsm_get_current_state>
   2bbb6:	4669      	mov	r1, sp
   2bbb8:	f7ff fd62 	bl	2b680 <nfsm_set_current_state_and_notify>
		return 0;
   2bbbc:	2400      	movs	r4, #0
		(void)nct_dc_disconnect();
   2bbbe:	f000 fef5 	bl	2c9ac <nct_dc_disconnect>
}
   2bbc2:	4620      	mov	r0, r4
   2bbc4:	b006      	add	sp, #24
   2bbc6:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   2bbc8:	2004      	movs	r0, #4
   2bbca:	f7ff fd59 	bl	2b680 <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   2bbce:	4806      	ldr	r0, [pc, #24]	; (2bbe8 <cc_connection_handler+0x50>)
   2bbd0:	f000 fe00 	bl	2c7d4 <nct_cc_send>
	if (err) {
   2bbd4:	4604      	mov	r4, r0
   2bbd6:	b120      	cbz	r0, 2bbe2 <cc_connection_handler+0x4a>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2bbd8:	4669      	mov	r1, sp
   2bbda:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2bbdc:	f7ff fd50 	bl	2b680 <nfsm_set_current_state_and_notify>
	return 0;
   2bbe0:	e7ef      	b.n	2bbc2 <cc_connection_handler+0x2a>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2bbe2:	4601      	mov	r1, r0
   2bbe4:	2005      	movs	r0, #5
   2bbe6:	e7f9      	b.n	2bbdc <cc_connection_handler+0x44>
   2bbe8:	000431d0 	.word	0x000431d0

0002bbec <state_ua_pin_wait>:
{
   2bbec:	b510      	push	{r4, lr}
   2bbee:	b08c      	sub	sp, #48	; 0x30
	struct nct_cc_data msg = {
   2bbf0:	2214      	movs	r2, #20
   2bbf2:	2100      	movs	r1, #0
   2bbf4:	a801      	add	r0, sp, #4
   2bbf6:	f015 fd04 	bl	41602 <memset>
   2bbfa:	4b17      	ldr	r3, [pc, #92]	; (2bc58 <state_ua_pin_wait+0x6c>)
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2bbfc:	2006      	movs	r0, #6
   2bbfe:	a901      	add	r1, sp, #4
	struct nct_cc_data msg = {
   2bc00:	9305      	str	r3, [sp, #20]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2bc02:	f7fe fd87 	bl	2a714 <nrf_cloud_encode_state>
	if (err) {
   2bc06:	4604      	mov	r4, r0
   2bc08:	b138      	cbz	r0, 2bc1a <state_ua_pin_wait+0x2e>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2bc0a:	4602      	mov	r2, r0
   2bc0c:	2145      	movs	r1, #69	; 0x45
   2bc0e:	4813      	ldr	r0, [pc, #76]	; (2bc5c <state_ua_pin_wait+0x70>)
   2bc10:	f011 f85d 	bl	3ccce <z_log_minimal_printk>
}
   2bc14:	4620      	mov	r0, r4
   2bc16:	b00c      	add	sp, #48	; 0x30
   2bc18:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   2bc1a:	a801      	add	r0, sp, #4
   2bc1c:	f000 fdda 	bl	2c7d4 <nct_cc_send>
	if (err) {
   2bc20:	4604      	mov	r4, r0
   2bc22:	b140      	cbz	r0, 2bc36 <state_ua_pin_wait+0x4a>
		LOG_ERR("nct_cc_send failed %d", err);
   2bc24:	4602      	mov	r2, r0
   2bc26:	2145      	movs	r1, #69	; 0x45
   2bc28:	480d      	ldr	r0, [pc, #52]	; (2bc60 <state_ua_pin_wait+0x74>)
   2bc2a:	f011 f850 	bl	3ccce <z_log_minimal_printk>
		nrf_cloud_free((void *)msg.data.ptr);
   2bc2e:	9802      	ldr	r0, [sp, #8]
   2bc30:	f015 fc36 	bl	414a0 <k_free>
		return err;
   2bc34:	e7ee      	b.n	2bc14 <state_ua_pin_wait+0x28>
	nrf_cloud_free((void *)msg.data.ptr);
   2bc36:	9802      	ldr	r0, [sp, #8]
   2bc38:	f015 fc32 	bl	414a0 <k_free>
	struct nrf_cloud_evt evt = {
   2bc3c:	2218      	movs	r2, #24
   2bc3e:	4621      	mov	r1, r4
   2bc40:	eb0d 0002 	add.w	r0, sp, r2
   2bc44:	f015 fcdd 	bl	41602 <memset>
   2bc48:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2bc4a:	2006      	movs	r0, #6
   2bc4c:	a906      	add	r1, sp, #24
	struct nrf_cloud_evt evt = {
   2bc4e:	f88d 3018 	strb.w	r3, [sp, #24]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2bc52:	f7ff fd15 	bl	2b680 <nfsm_set_current_state_and_notify>
	return 0;
   2bc56:	e7dd      	b.n	2bc14 <state_ua_pin_wait+0x28>
   2bc58:	0001012c 	.word	0x0001012c
   2bc5c:	00048651 	.word	0x00048651
   2bc60:	00048677 	.word	0x00048677

0002bc64 <cc_rx_data_handler>:
{
   2bc64:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool config_found = false;
   2bc66:	2400      	movs	r4, #0
{
   2bc68:	b097      	sub	sp, #92	; 0x5c
   2bc6a:	4606      	mov	r6, r0
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   2bc6c:	6847      	ldr	r7, [r0, #4]
	bool config_found = false;
   2bc6e:	f88d 400b 	strb.w	r4, [sp, #11]
	const enum nfsm_state current_state = nfsm_get_current_state();
   2bc72:	f7ff fcff 	bl	2b674 <nfsm_get_current_state>
	struct nct_cc_data msg = {
   2bc76:	2214      	movs	r2, #20
   2bc78:	4621      	mov	r1, r4
	const enum nfsm_state current_state = nfsm_get_current_state();
   2bc7a:	4605      	mov	r5, r0
	struct nct_cc_data msg = {
   2bc7c:	a80b      	add	r0, sp, #44	; 0x2c
   2bc7e:	f015 fcc0 	bl	41602 <memset>
   2bc82:	4b64      	ldr	r3, [pc, #400]	; (2be14 <cc_rx_data_handler+0x1b0>)
	struct nrf_cloud_evt cloud_evt = {
   2bc84:	2218      	movs	r2, #24
   2bc86:	4621      	mov	r1, r4
   2bc88:	a810      	add	r0, sp, #64	; 0x40
	struct nct_cc_data msg = {
   2bc8a:	930f      	str	r3, [sp, #60]	; 0x3c
	struct nrf_cloud_evt cloud_evt = {
   2bc8c:	f015 fcb9 	bl	41602 <memset>
   2bc90:	2306      	movs	r3, #6
	if (evt->param.cc == NULL) {
   2bc92:	6870      	ldr	r0, [r6, #4]
	struct nrf_cloud_evt cloud_evt = {
   2bc94:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (evt->param.cc == NULL) {
   2bc98:	b160      	cbz	r0, 2bcb4 <cc_rx_data_handler+0x50>
	err = nrf_cloud_encode_config_response(&evt->param.cc->data, &msg.data,
   2bc9a:	f10d 020b 	add.w	r2, sp, #11
   2bc9e:	a90b      	add	r1, sp, #44	; 0x2c
   2bca0:	f7fe fc9e 	bl	2a5e0 <nrf_cloud_encode_config_response>
	if ((err) && (err != -ESRCH)) {
   2bca4:	4602      	mov	r2, r0
   2bca6:	b1b8      	cbz	r0, 2bcd8 <cc_rx_data_handler+0x74>
   2bca8:	1cc3      	adds	r3, r0, #3
   2bcaa:	d015      	beq.n	2bcd8 <cc_rx_data_handler+0x74>
		LOG_ERR("nrf_cloud_encode_config_response failed %d", err);
   2bcac:	2145      	movs	r1, #69	; 0x45
   2bcae:	485a      	ldr	r0, [pc, #360]	; (2be18 <cc_rx_data_handler+0x1b4>)
   2bcb0:	f011 f80d 	bl	3ccce <z_log_minimal_printk>
	err = nrf_cloud_decode_requested_state(payload, &new_state);
   2bcb4:	4638      	mov	r0, r7
   2bcb6:	f10d 010a 	add.w	r1, sp, #10
   2bcba:	f7fe fbe7 	bl	2a48c <nrf_cloud_decode_requested_state>
	if (err) {
   2bcbe:	4604      	mov	r4, r0
   2bcc0:	b370      	cbz	r0, 2bd20 <cc_rx_data_handler+0xbc>
		if (!config_found) {
   2bcc2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2bcc6:	2b00      	cmp	r3, #0
   2bcc8:	f040 80a1 	bne.w	2be0e <cc_rx_data_handler+0x1aa>
			LOG_ERR("nrf_cloud_decode_requested_state Failed %d",
   2bccc:	2145      	movs	r1, #69	; 0x45
   2bcce:	4602      	mov	r2, r0
   2bcd0:	4852      	ldr	r0, [pc, #328]	; (2be1c <cc_rx_data_handler+0x1b8>)
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2bcd2:	f010 fffc 	bl	3ccce <z_log_minimal_printk>
		return err;
   2bcd6:	e055      	b.n	2bd84 <cc_rx_data_handler+0x120>
	if (*config_found == false) {
   2bcd8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2bcdc:	2b00      	cmp	r3, #0
   2bcde:	d0e9      	beq.n	2bcb4 <cc_rx_data_handler+0x50>
	if (msg.data.ptr) {
   2bce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2bce2:	b163      	cbz	r3, 2bcfe <cc_rx_data_handler+0x9a>
		err = nct_cc_send(&msg);
   2bce4:	a80b      	add	r0, sp, #44	; 0x2c
   2bce6:	f000 fd75 	bl	2c7d4 <nct_cc_send>
   2bcea:	4604      	mov	r4, r0
		nrf_cloud_free((void *)msg.data.ptr);
   2bcec:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bcee:	f015 fbd7 	bl	414a0 <k_free>
		if (err) {
   2bcf2:	b124      	cbz	r4, 2bcfe <cc_rx_data_handler+0x9a>
			LOG_ERR("nct_cc_send failed %d", err);
   2bcf4:	4622      	mov	r2, r4
   2bcf6:	2145      	movs	r1, #69	; 0x45
   2bcf8:	4849      	ldr	r0, [pc, #292]	; (2be20 <cc_rx_data_handler+0x1bc>)
   2bcfa:	f010 ffe8 	bl	3ccce <z_log_minimal_printk>
	cloud_evt.data = evt->param.cc->data;
   2bcfe:	6873      	ldr	r3, [r6, #4]
   2bd00:	aa12      	add	r2, sp, #72	; 0x48
   2bd02:	e893 0003 	ldmia.w	r3, {r0, r1}
   2bd06:	e882 0003 	stmia.w	r2, {r0, r1}
	cloud_evt.topic = evt->param.cc->topic;
   2bd0a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2bd0e:	ab16      	add	r3, sp, #88	; 0x58
   2bd10:	e903 0003 	stmdb	r3, {r0, r1}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   2bd14:	f7ff fcae 	bl	2b674 <nfsm_get_current_state>
   2bd18:	a910      	add	r1, sp, #64	; 0x40
   2bd1a:	f7ff fcb1 	bl	2b680 <nfsm_set_current_state_and_notify>
	return err;
   2bd1e:	e7c9      	b.n	2bcb4 <cc_rx_data_handler+0x50>
	switch (current_state) {
   2bd20:	2d07      	cmp	r5, #7
   2bd22:	d82b      	bhi.n	2bd7c <cc_rx_data_handler+0x118>
   2bd24:	2d03      	cmp	r5, #3
   2bd26:	d92d      	bls.n	2bd84 <cc_rx_data_handler+0x120>
		if (new_state == STATE_UA_PIN_COMPLETE) {
   2bd28:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2bd2c:	2b07      	cmp	r3, #7
   2bd2e:	d161      	bne.n	2bdf4 <cc_rx_data_handler+0x190>
			if (!config_found) {
   2bd30:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2bd34:	b9a2      	cbnz	r2, 2bd60 <cc_rx_data_handler+0xfc>
				struct nrf_cloud_evt cloud_evt = {
   2bd36:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
   2bd3a:	2206      	movs	r2, #6
					.data = nct_evt->param.cc->data,
   2bd3c:	6873      	ldr	r3, [r6, #4]
				struct nrf_cloud_evt cloud_evt = {
   2bd3e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
   2bd42:	aa12      	add	r2, sp, #72	; 0x48
   2bd44:	e893 0003 	ldmia.w	r3, {r0, r1}
   2bd48:	e882 0003 	stmia.w	r2, {r0, r1}
   2bd4c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2bd50:	ab16      	add	r3, sp, #88	; 0x58
   2bd52:	e903 0003 	stmdb	r3, {r0, r1}
				nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   2bd56:	f7ff fc8d 	bl	2b674 <nfsm_get_current_state>
   2bd5a:	a910      	add	r1, sp, #64	; 0x40
   2bd5c:	f7ff fc90 	bl	2b680 <nfsm_set_current_state_and_notify>
	err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, &bulk, &endpoint);
   2bd60:	ad09      	add	r5, sp, #36	; 0x24
   2bd62:	6870      	ldr	r0, [r6, #4]
   2bd64:	9500      	str	r5, [sp, #0]
   2bd66:	ab07      	add	r3, sp, #28
   2bd68:	aa03      	add	r2, sp, #12
   2bd6a:	a905      	add	r1, sp, #20
   2bd6c:	f7fe fd8e 	bl	2a88c <nrf_cloud_decode_data_endpoint>
	if (err) {
   2bd70:	4604      	mov	r4, r0
   2bd72:	b150      	cbz	r0, 2bd8a <cc_rx_data_handler+0x126>
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2bd74:	4602      	mov	r2, r0
   2bd76:	2145      	movs	r1, #69	; 0x45
   2bd78:	482a      	ldr	r0, [pc, #168]	; (2be24 <cc_rx_data_handler+0x1c0>)
   2bd7a:	e7aa      	b.n	2bcd2 <cc_rx_data_handler+0x6e>
	switch (current_state) {
   2bd7c:	3d08      	subs	r5, #8
   2bd7e:	b2ed      	uxtb	r5, r5
   2bd80:	2d01      	cmp	r5, #1
   2bd82:	d93d      	bls.n	2be00 <cc_rx_data_handler+0x19c>
}
   2bd84:	4620      	mov	r0, r4
   2bd86:	b017      	add	sp, #92	; 0x5c
   2bd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nct_dc_endpoint_set(&tx, &rx, &bulk, &endpoint);
   2bd8a:	462b      	mov	r3, r5
   2bd8c:	aa07      	add	r2, sp, #28
   2bd8e:	a903      	add	r1, sp, #12
   2bd90:	a805      	add	r0, sp, #20
   2bd92:	f000 fd69 	bl	2c868 <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   2bd96:	4621      	mov	r1, r4
   2bd98:	2214      	movs	r2, #20
   2bd9a:	a80b      	add	r0, sp, #44	; 0x2c
   2bd9c:	f015 fc31 	bl	41602 <memset>
   2bda0:	4b21      	ldr	r3, [pc, #132]	; (2be28 <cc_rx_data_handler+0x1c4>)
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2bda2:	2007      	movs	r0, #7
   2bda4:	a90b      	add	r1, sp, #44	; 0x2c
	struct nct_cc_data msg = {
   2bda6:	930f      	str	r3, [sp, #60]	; 0x3c
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2bda8:	f7fe fcb4 	bl	2a714 <nrf_cloud_encode_state>
	if (err) {
   2bdac:	4604      	mov	r4, r0
   2bdae:	b118      	cbz	r0, 2bdb8 <cc_rx_data_handler+0x154>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2bdb0:	4602      	mov	r2, r0
   2bdb2:	2145      	movs	r1, #69	; 0x45
   2bdb4:	481d      	ldr	r0, [pc, #116]	; (2be2c <cc_rx_data_handler+0x1c8>)
   2bdb6:	e78c      	b.n	2bcd2 <cc_rx_data_handler+0x6e>
	err = nct_cc_send(&msg);
   2bdb8:	a80b      	add	r0, sp, #44	; 0x2c
   2bdba:	f000 fd0b 	bl	2c7d4 <nct_cc_send>
	if (err) {
   2bdbe:	4604      	mov	r4, r0
   2bdc0:	b140      	cbz	r0, 2bdd4 <cc_rx_data_handler+0x170>
		LOG_ERR("nct_cc_send failed %d", err);
   2bdc2:	4602      	mov	r2, r0
   2bdc4:	2145      	movs	r1, #69	; 0x45
   2bdc6:	4816      	ldr	r0, [pc, #88]	; (2be20 <cc_rx_data_handler+0x1bc>)
   2bdc8:	f010 ff81 	bl	3ccce <z_log_minimal_printk>
		nrf_cloud_free((void *)msg.data.ptr);
   2bdcc:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bdce:	f015 fb67 	bl	414a0 <k_free>
		return err;
   2bdd2:	e7d7      	b.n	2bd84 <cc_rx_data_handler+0x120>
	nrf_cloud_free((void *)msg.data.ptr);
   2bdd4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bdd6:	f015 fb63 	bl	414a0 <k_free>
	struct nrf_cloud_evt evt = {
   2bdda:	4621      	mov	r1, r4
   2bddc:	2218      	movs	r2, #24
   2bdde:	a810      	add	r0, sp, #64	; 0x40
   2bde0:	f015 fc0f 	bl	41602 <memset>
   2bde4:	2304      	movs	r3, #4
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2bde6:	2007      	movs	r0, #7
   2bde8:	a910      	add	r1, sp, #64	; 0x40
	struct nrf_cloud_evt evt = {
   2bdea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2bdee:	f7ff fc47 	bl	2b680 <nfsm_set_current_state_and_notify>
			return handle_pin_complete(nct_evt);
   2bdf2:	e7c7      	b.n	2bd84 <cc_rx_data_handler+0x120>
		} else if (new_state == STATE_UA_PIN_WAIT) {
   2bdf4:	2b06      	cmp	r3, #6
   2bdf6:	d1c5      	bne.n	2bd84 <cc_rx_data_handler+0x120>
			return state_ua_pin_wait();
   2bdf8:	f7ff fef8 	bl	2bbec <state_ua_pin_wait>
   2bdfc:	4604      	mov	r4, r0
   2bdfe:	e7c1      	b.n	2bd84 <cc_rx_data_handler+0x120>
		if (new_state == STATE_UA_PIN_WAIT) {
   2be00:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2be04:	2b06      	cmp	r3, #6
   2be06:	d1bd      	bne.n	2bd84 <cc_rx_data_handler+0x120>
			(void)nct_dc_disconnect();
   2be08:	f000 fdd0 	bl	2c9ac <nct_dc_disconnect>
   2be0c:	e7f4      	b.n	2bdf8 <cc_rx_data_handler+0x194>
		return 0;
   2be0e:	2400      	movs	r4, #0
   2be10:	e7b8      	b.n	2bd84 <cc_rx_data_handler+0x120>
   2be12:	bf00      	nop
   2be14:	0001012c 	.word	0x0001012c
   2be18:	00048692 	.word	0x00048692
   2be1c:	000486c2 	.word	0x000486c2
   2be20:	00048677 	.word	0x00048677
   2be24:	000486f2 	.word	0x000486f2
   2be28:	0001012d 	.word	0x0001012d
   2be2c:	00048651 	.word	0x00048651

0002be30 <nfsm_set_cell_pos_response_cb>:
	cell_pos_cb = cb;
   2be30:	4b01      	ldr	r3, [pc, #4]	; (2be38 <nfsm_set_cell_pos_response_cb+0x8>)
   2be32:	6018      	str	r0, [r3, #0]
}
   2be34:	4770      	bx	lr
   2be36:	bf00      	nop
   2be38:	20019564 	.word	0x20019564

0002be3c <nfsm_init>:
	persistent_session = false;
   2be3c:	2000      	movs	r0, #0
   2be3e:	4b01      	ldr	r3, [pc, #4]	; (2be44 <nfsm_init+0x8>)
   2be40:	7018      	strb	r0, [r3, #0]
}
   2be42:	4770      	bx	lr
   2be44:	2001c90b 	.word	0x2001c90b

0002be48 <nfsm_handle_incoming_event>:
{
   2be48:	b570      	push	{r4, r5, r6, lr}
   2be4a:	460d      	mov	r5, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   2be4c:	4606      	mov	r6, r0
   2be4e:	b120      	cbz	r0, 2be5a <nfsm_handle_incoming_event+0x12>
   2be50:	7a03      	ldrb	r3, [r0, #8]
   2be52:	2b0a      	cmp	r3, #10
   2be54:	d801      	bhi.n	2be5a <nfsm_handle_incoming_event+0x12>
   2be56:	2909      	cmp	r1, #9
   2be58:	d90c      	bls.n	2be74 <nfsm_handle_incoming_event+0x2c>
		__ASSERT_NO_MSG(false);
   2be5a:	2280      	movs	r2, #128	; 0x80
   2be5c:	490e      	ldr	r1, [pc, #56]	; (2be98 <nfsm_handle_incoming_event+0x50>)
   2be5e:	480f      	ldr	r0, [pc, #60]	; (2be9c <nfsm_handle_incoming_event+0x54>)
   2be60:	f010 fefb 	bl	3cc5a <assert_print>
   2be64:	2180      	movs	r1, #128	; 0x80
   2be66:	480c      	ldr	r0, [pc, #48]	; (2be98 <nfsm_handle_incoming_event+0x50>)
   2be68:	f010 fef0 	bl	3cc4c <assert_post_action>
		return -EINVAL;
   2be6c:	f06f 0415 	mvn.w	r4, #21
}
   2be70:	4620      	mov	r0, r4
   2be72:	bd70      	pop	{r4, r5, r6, pc}
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   2be74:	4a0a      	ldr	r2, [pc, #40]	; (2bea0 <nfsm_handle_incoming_event+0x58>)
   2be76:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   2be7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   2be7e:	2c00      	cmp	r4, #0
   2be80:	d0f6      	beq.n	2be70 <nfsm_handle_incoming_event+0x28>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   2be82:	47a0      	blx	r4
		if (err) {
   2be84:	4604      	mov	r4, r0
   2be86:	2800      	cmp	r0, #0
   2be88:	d0f2      	beq.n	2be70 <nfsm_handle_incoming_event+0x28>
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   2be8a:	462a      	mov	r2, r5
   2be8c:	2145      	movs	r1, #69	; 0x45
   2be8e:	7a33      	ldrb	r3, [r6, #8]
   2be90:	4804      	ldr	r0, [pc, #16]	; (2bea4 <nfsm_handle_incoming_event+0x5c>)
   2be92:	f010 ff1c 	bl	3ccce <z_log_minimal_printk>
   2be96:	e7eb      	b.n	2be70 <nfsm_handle_incoming_event+0x28>
   2be98:	00048720 	.word	0x00048720
   2be9c:	00044263 	.word	0x00044263
   2bea0:	0004323c 	.word	0x0004323c
   2bea4:	0004875d 	.word	0x0004875d

0002bea8 <cc_tx_ack_handler>:
{
   2bea8:	b510      	push	{r4, lr}
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   2beaa:	8883      	ldrh	r3, [r0, #4]
{
   2beac:	4604      	mov	r4, r0
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   2beae:	2bc8      	cmp	r3, #200	; 0xc8
{
   2beb0:	b086      	sub	sp, #24
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   2beb2:	d105      	bne.n	2bec0 <cc_tx_ack_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   2beb4:	2100      	movs	r1, #0
   2beb6:	2005      	movs	r0, #5
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2beb8:	f7ff fbe2 	bl	2b680 <nfsm_set_current_state_and_notify>
	return 0;
   2bebc:	2400      	movs	r4, #0
   2bebe:	e00e      	b.n	2bede <cc_tx_ack_handler+0x36>
	} else if (nct_evt->param.message_id == NCT_MSG_ID_PAIR_STATUS_REPORT) {
   2bec0:	f240 122d 	movw	r2, #301	; 0x12d
   2bec4:	4293      	cmp	r3, r2
   2bec6:	d119      	bne.n	2befc <cc_tx_ack_handler+0x54>
		if (!persistent_session) {
   2bec8:	4b1c      	ldr	r3, [pc, #112]	; (2bf3c <cc_tx_ack_handler+0x94>)
   2beca:	781b      	ldrb	r3, [r3, #0]
   2becc:	b953      	cbnz	r3, 2bee4 <cc_tx_ack_handler+0x3c>
			err = nct_dc_connect();
   2bece:	f000 fd25 	bl	2c91c <nct_dc_connect>
			if (err) {
   2bed2:	4604      	mov	r4, r0
   2bed4:	b918      	cbnz	r0, 2bede <cc_tx_ack_handler+0x36>
			nfsm_set_current_state_and_notify(STATE_DC_CONNECTING,
   2bed6:	4601      	mov	r1, r0
   2bed8:	2008      	movs	r0, #8
   2beda:	f7ff fbd1 	bl	2b680 <nfsm_set_current_state_and_notify>
}
   2bede:	4620      	mov	r0, r4
   2bee0:	b006      	add	sp, #24
   2bee2:	bd10      	pop	{r4, pc}
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2bee4:	2400      	movs	r4, #0
   2bee6:	2302      	movs	r3, #2
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   2bee8:	2108      	movs	r1, #8
   2beea:	4668      	mov	r0, sp
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2beec:	9402      	str	r4, [sp, #8]
   2beee:	e9cd 4400 	strd	r4, r4, [sp]
   2bef2:	f88d 3008 	strb.w	r3, [sp, #8]
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   2bef6:	f7ff ffa7 	bl	2be48 <nfsm_handle_incoming_event>
   2befa:	e7f0      	b.n	2bede <cc_tx_ack_handler+0x36>
	} else if (nct_evt->type == NCT_EVT_PINGRESP) {
   2befc:	7a02      	ldrb	r2, [r0, #8]
   2befe:	2a05      	cmp	r2, #5
   2bf00:	d10b      	bne.n	2bf1a <cc_tx_ack_handler+0x72>
		struct nrf_cloud_evt evt = {
   2bf02:	2218      	movs	r2, #24
   2bf04:	2100      	movs	r1, #0
   2bf06:	4668      	mov	r0, sp
   2bf08:	f015 fb7b 	bl	41602 <memset>
   2bf0c:	2307      	movs	r3, #7
   2bf0e:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2bf12:	f7ff fbaf 	bl	2b674 <nfsm_get_current_state>
   2bf16:	4669      	mov	r1, sp
   2bf18:	e7ce      	b.n	2beb8 <cc_tx_ack_handler+0x10>
	} else if (IS_VALID_USER_TAG(nct_evt->param.message_id)) {
   2bf1a:	f242 720f 	movw	r2, #9999	; 0x270f
   2bf1e:	4293      	cmp	r3, r2
   2bf20:	d9cc      	bls.n	2bebc <cc_tx_ack_handler+0x14>
		struct nrf_cloud_evt evt = {
   2bf22:	2218      	movs	r2, #24
   2bf24:	2100      	movs	r1, #0
   2bf26:	4668      	mov	r0, sp
   2bf28:	f015 fb6b 	bl	41602 <memset>
   2bf2c:	2308      	movs	r3, #8
   2bf2e:	f88d 3000 	strb.w	r3, [sp]
   2bf32:	2302      	movs	r3, #2
			.data.ptr = &nct_evt->param.message_id
   2bf34:	3404      	adds	r4, #4
		struct nrf_cloud_evt evt = {
   2bf36:	9302      	str	r3, [sp, #8]
   2bf38:	9403      	str	r4, [sp, #12]
   2bf3a:	e7ea      	b.n	2bf12 <cc_tx_ack_handler+0x6a>
   2bf3c:	2001c90b 	.word	0x2001c90b

0002bf40 <connection_handler>:
{
   2bf40:	b570      	push	{r4, r5, r6, lr}
	if (nct_evt->status != 0) {
   2bf42:	6804      	ldr	r4, [r0, #0]
{
   2bf44:	4605      	mov	r5, r0
   2bf46:	b08a      	sub	sp, #40	; 0x28
	if (nct_evt->status != 0) {
   2bf48:	b164      	cbz	r4, 2bf64 <connection_handler+0x24>
		evt.type = NRF_CLOUD_EVT_ERROR;
   2bf4a:	23ff      	movs	r3, #255	; 0xff
		evt.status = nct_evt->status;
   2bf4c:	9405      	str	r4, [sp, #20]
		evt.type = NRF_CLOUD_EVT_ERROR;
   2bf4e:	f88d 3010 	strb.w	r3, [sp, #16]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   2bf52:	f7ff fb8f 	bl	2b674 <nfsm_get_current_state>
   2bf56:	a904      	add	r1, sp, #16
   2bf58:	f7ff fb92 	bl	2b680 <nfsm_set_current_state_and_notify>
		return 0;
   2bf5c:	2400      	movs	r4, #0
}
   2bf5e:	4620      	mov	r0, r4
   2bf60:	b00a      	add	sp, #40	; 0x28
   2bf62:	bd70      	pop	{r4, r5, r6, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2bf64:	2601      	movs	r6, #1
	evt.status = nct_evt->param.flag;
   2bf66:	7903      	ldrb	r3, [r0, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2bf68:	a904      	add	r1, sp, #16
   2bf6a:	2002      	movs	r0, #2
	evt.status = nct_evt->param.flag;
   2bf6c:	9305      	str	r3, [sp, #20]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2bf6e:	f88d 6010 	strb.w	r6, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2bf72:	f7ff fb85 	bl	2b680 <nfsm_set_current_state_and_notify>
	persistent_session = nct_evt->param.flag;
   2bf76:	792b      	ldrb	r3, [r5, #4]
   2bf78:	2b00      	cmp	r3, #0
   2bf7a:	bf14      	ite	ne
   2bf7c:	4632      	movne	r2, r6
   2bf7e:	2200      	moveq	r2, #0
   2bf80:	4b0b      	ldr	r3, [pc, #44]	; (2bfb0 <connection_handler+0x70>)
   2bf82:	701a      	strb	r2, [r3, #0]
	if (!persistent_session) {
   2bf84:	d109      	bne.n	2bf9a <connection_handler+0x5a>
		err = nct_cc_connect();
   2bf86:	f000 fc13 	bl	2c7b0 <nct_cc_connect>
		if (err) {
   2bf8a:	4604      	mov	r4, r0
   2bf8c:	2800      	cmp	r0, #0
   2bf8e:	d1e6      	bne.n	2bf5e <connection_handler+0x1e>
		nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   2bf90:	4601      	mov	r1, r0
   2bf92:	2003      	movs	r0, #3
   2bf94:	f7ff fb74 	bl	2b680 <nfsm_set_current_state_and_notify>
   2bf98:	e7e1      	b.n	2bf5e <connection_handler+0x1e>
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   2bf9a:	2103      	movs	r1, #3
   2bf9c:	a801      	add	r0, sp, #4
		struct nct_evt nevt = { .type = NCT_EVT_CC_CONNECTED,
   2bf9e:	9403      	str	r4, [sp, #12]
   2bfa0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2bfa4:	f88d 600c 	strb.w	r6, [sp, #12]
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   2bfa8:	f7ff ff4e 	bl	2be48 <nfsm_handle_incoming_event>
   2bfac:	e7d7      	b.n	2bf5e <connection_handler+0x1e>
   2bfae:	bf00      	nop
   2bfb0:	2001c90b 	.word	0x2001c90b

0002bfb4 <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   2bfb4:	2200      	movs	r2, #0
   2bfb6:	4b05      	ldr	r3, [pc, #20]	; (2bfcc <dc_endpoint_reset+0x18>)
	nct.dc_rx_endp.size = 0;
   2bfb8:	e9c3 2233 	strd	r2, r2, [r3, #204]	; 0xcc

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   2bfbc:	e9c3 2231 	strd	r2, r2, [r3, #196]	; 0xc4

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   2bfc0:	e9c3 2235 	strd	r2, r2, [r3, #212]	; 0xd4

	nct.dc_bulk_endp.utf8 = NULL;
	nct.dc_bulk_endp.size = 0;
   2bfc4:	e9c3 2237 	strd	r2, r2, [r3, #220]	; 0xdc
}
   2bfc8:	4770      	bx	lr
   2bfca:	bf00      	nop
   2bfcc:	20019570 	.word	0x20019570

0002bfd0 <get_message_id>:
	return nct.message_id;
}

static uint16_t get_message_id(const uint16_t requested_id)
{
	if (requested_id != NCT_MSG_ID_USE_NEXT_INCREMENT) {
   2bfd0:	b968      	cbnz	r0, 2bfee <get_message_id+0x1e>
	if (nct.message_id < NCT_MSG_ID_INCREMENT_BEGIN ||
   2bfd2:	4b09      	ldr	r3, [pc, #36]	; (2bff8 <get_message_id+0x28>)
   2bfd4:	f8b3 00e4 	ldrh.w	r0, [r3, #228]	; 0xe4
   2bfd8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   2bfdc:	d308      	bcc.n	2bff0 <get_message_id+0x20>
   2bfde:	f242 720f 	movw	r2, #9999	; 0x270f
   2bfe2:	4290      	cmp	r0, r2
   2bfe4:	d004      	beq.n	2bff0 <get_message_id+0x20>
		++nct.message_id;
   2bfe6:	3001      	adds	r0, #1
   2bfe8:	b280      	uxth	r0, r0
   2bfea:	f8a3 00e4 	strh.w	r0, [r3, #228]	; 0xe4
		return requested_id;
	}

	return get_next_message_id();
}
   2bfee:	4770      	bx	lr
		nct.message_id = NCT_MSG_ID_INCREMENT_BEGIN;
   2bff0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2bff4:	e7f9      	b.n	2bfea <get_message_id+0x1a>
   2bff6:	bf00      	nop
   2bff8:	20019570 	.word	0x20019570

0002bffc <nct_settings_set>:
	return 0;
}

static int nct_settings_set(const char *key, size_t len_rd,
			    settings_read_cb read_cb, void *cb_arg)
{
   2bffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bffe:	460d      	mov	r5, r1
   2c000:	4616      	mov	r6, r2
   2c002:	461f      	mov	r7, r3
	if (!key) {
   2c004:	4604      	mov	r4, r0
   2c006:	b1e8      	cbz	r0, 2c044 <nct_settings_set+0x48>

	int read_val;

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);

	if (!strncmp(key, SETTINGS_KEY_PERSISTENT_SESSION,
   2c008:	4810      	ldr	r0, [pc, #64]	; (2c04c <nct_settings_set+0x50>)
   2c00a:	f7f1 f91a 	bl	1d242 <strlen>
   2c00e:	490f      	ldr	r1, [pc, #60]	; (2c04c <nct_settings_set+0x50>)
   2c010:	4602      	mov	r2, r0
   2c012:	4620      	mov	r0, r4
   2c014:	f015 fcc8 	bl	419a8 <strncmp>
   2c018:	4604      	mov	r4, r0
   2c01a:	b120      	cbz	r0, 2c026 <nct_settings_set+0x2a>
#endif
			LOG_DBG("Read setting val: %d", read_val);
			return 0;
		}
	}
	return -ENOTSUP;
   2c01c:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   2c020:	4620      	mov	r0, r4
   2c022:	b003      	add	sp, #12
   2c024:	bdf0      	pop	{r4, r5, r6, r7, pc}
		     strlen(SETTINGS_KEY_PERSISTENT_SESSION)) &&
   2c026:	2d04      	cmp	r5, #4
   2c028:	d1f8      	bne.n	2c01c <nct_settings_set+0x20>
		if (read_cb(cb_arg, (void *)&read_val, len_rd) == len_rd) {
   2c02a:	462a      	mov	r2, r5
   2c02c:	4638      	mov	r0, r7
   2c02e:	a901      	add	r1, sp, #4
   2c030:	47b0      	blx	r6
   2c032:	2804      	cmp	r0, #4
   2c034:	d1f2      	bne.n	2c01c <nct_settings_set+0x20>
			persistent_session = (bool)read_val;
   2c036:	9b01      	ldr	r3, [sp, #4]
   2c038:	4a05      	ldr	r2, [pc, #20]	; (2c050 <nct_settings_set+0x54>)
   2c03a:	3b00      	subs	r3, #0
   2c03c:	bf18      	it	ne
   2c03e:	2301      	movne	r3, #1
   2c040:	7013      	strb	r3, [r2, #0]
			return 0;
   2c042:	e7ed      	b.n	2c020 <nct_settings_set+0x24>
		return -EINVAL;
   2c044:	f06f 0415 	mvn.w	r4, #21
   2c048:	e7ea      	b.n	2c020 <nct_settings_set+0x24>
   2c04a:	bf00      	nop
   2c04c:	00048836 	.word	0x00048836
   2c050:	2001c90d 	.word	0x2001c90d

0002c054 <nrf_cloud_fota_cb_handler>:
}

#if defined(CONFIG_NRF_CLOUD_FOTA)
static void nrf_cloud_fota_cb_handler(const struct nrf_cloud_fota_evt
				      * const evt)
{
   2c054:	b530      	push	{r4, r5, lr}
	switch (evt->id) {
   2c056:	7804      	ldrb	r4, [r0, #0]
{
   2c058:	4605      	mov	r5, r0
	switch (evt->id) {
   2c05a:	2c01      	cmp	r4, #1
{
   2c05c:	b089      	sub	sp, #36	; 0x24
	switch (evt->id) {
   2c05e:	d00b      	beq.n	2c078 <nrf_cloud_fota_cb_handler+0x24>
   2c060:	2c02      	cmp	r4, #2
   2c062:	d01d      	beq.n	2c0a0 <nrf_cloud_fota_cb_handler+0x4c>
   2c064:	b9d4      	cbnz	r4, 2c09c <nrf_cloud_fota_cb_handler+0x48>
	case NRF_CLOUD_FOTA_EVT_START: {
		LOG_DBG("NRF_CLOUD_FOTA_EVT_START");
		struct nrf_cloud_evt cloud_evt = {
   2c066:	2218      	movs	r2, #24
   2c068:	4621      	mov	r1, r4
   2c06a:	a802      	add	r0, sp, #8
   2c06c:	f015 fac9 	bl	41602 <memset>
   2c070:	230a      	movs	r3, #10
		nct_apply_update(&cloud_evt);
		break;
	}
	case NRF_CLOUD_FOTA_EVT_ERROR: {
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
		struct nrf_cloud_evt cloud_evt = {
   2c072:	f88d 3008 	strb.w	r3, [sp, #8]
   2c076:	e00e      	b.n	2c096 <nrf_cloud_fota_cb_handler+0x42>
		struct nrf_cloud_evt cloud_evt = {
   2c078:	2218      	movs	r2, #24
   2c07a:	2100      	movs	r1, #0
   2c07c:	a802      	add	r0, sp, #8
   2c07e:	f015 fac0 	bl	41602 <memset>
   2c082:	230b      	movs	r3, #11
   2c084:	f88d 3008 	strb.w	r3, [sp, #8]
			fota_type = evt->type;
   2c088:	78ab      	ldrb	r3, [r5, #2]
   2c08a:	f88d 3007 	strb.w	r3, [sp, #7]
			cloud_evt.data.ptr = &fota_type;
   2c08e:	f10d 0307 	add.w	r3, sp, #7
			cloud_evt.data.len = sizeof(fota_type);
   2c092:	e9cd 4304 	strd	r4, r3, [sp, #16]
			.type = NRF_CLOUD_EVT_FOTA_ERROR
		};

		nct_apply_update(&cloud_evt);
   2c096:	a802      	add	r0, sp, #8
   2c098:	f7ff fd3a 	bl	2bb10 <nct_apply_update>
	}
	default: {
		break;
	}
	}
}
   2c09c:	b009      	add	sp, #36	; 0x24
   2c09e:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
   2c0a0:	2145      	movs	r1, #69	; 0x45
   2c0a2:	4805      	ldr	r0, [pc, #20]	; (2c0b8 <nrf_cloud_fota_cb_handler+0x64>)
   2c0a4:	f010 fe13 	bl	3ccce <z_log_minimal_printk>
		struct nrf_cloud_evt cloud_evt = {
   2c0a8:	2218      	movs	r2, #24
   2c0aa:	2100      	movs	r1, #0
   2c0ac:	a802      	add	r0, sp, #8
   2c0ae:	f015 faa8 	bl	41602 <memset>
   2c0b2:	230c      	movs	r3, #12
   2c0b4:	e7dd      	b.n	2c072 <nrf_cloud_fota_cb_handler+0x1e>
   2c0b6:	bf00      	nop
   2c0b8:	00048794 	.word	0x00048794

0002c0bc <allocate_and_format_topic>:
{
   2c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const size_t client_sz = strlen(client_id_buf);
   2c0be:	4f13      	ldr	r7, [pc, #76]	; (2c10c <allocate_and_format_topic+0x50>)
{
   2c0c0:	4605      	mov	r5, r0
	const size_t client_sz = strlen(client_id_buf);
   2c0c2:	6838      	ldr	r0, [r7, #0]
{
   2c0c4:	460e      	mov	r6, r1
	const size_t client_sz = strlen(client_id_buf);
   2c0c6:	f7f1 f8bc 	bl	1d242 <strlen>
   2c0ca:	4604      	mov	r4, r0
	topic_sz = client_sz + strlen(topic_template) - 1;
   2c0cc:	4630      	mov	r0, r6
   2c0ce:	f7f1 f8b8 	bl	1d242 <strlen>
   2c0d2:	4404      	add	r4, r0
   2c0d4:	3c01      	subs	r4, #1
	*topic_buf = nrf_cloud_calloc(topic_sz, 1);
   2c0d6:	2101      	movs	r1, #1
   2c0d8:	4620      	mov	r0, r4
   2c0da:	f015 f9ec 	bl	414b6 <k_calloc>
   2c0de:	6028      	str	r0, [r5, #0]
	if (!*topic_buf) {
   2c0e0:	b170      	cbz	r0, 2c100 <allocate_and_format_topic+0x44>
	ret = snprintk(*topic_buf, topic_sz,
   2c0e2:	4632      	mov	r2, r6
   2c0e4:	4621      	mov	r1, r4
   2c0e6:	683b      	ldr	r3, [r7, #0]
   2c0e8:	f010 fbe1 	bl	3c8ae <snprintk>
	if (ret <= 0 || ret >= topic_sz) {
   2c0ec:	2800      	cmp	r0, #0
   2c0ee:	dd01      	ble.n	2c0f4 <allocate_and_format_topic+0x38>
   2c0f0:	42a0      	cmp	r0, r4
   2c0f2:	d308      	bcc.n	2c106 <allocate_and_format_topic+0x4a>
		nrf_cloud_free(*topic_buf);
   2c0f4:	6828      	ldr	r0, [r5, #0]
   2c0f6:	f015 f9d3 	bl	414a0 <k_free>
		return -EIO;
   2c0fa:	f06f 0004 	mvn.w	r0, #4
}
   2c0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   2c100:	f06f 000b 	mvn.w	r0, #11
   2c104:	e7fb      	b.n	2c0fe <allocate_and_format_topic+0x42>
	return 0;
   2c106:	2000      	movs	r0, #0
   2c108:	e7f9      	b.n	2c0fe <allocate_and_format_topic+0x42>
   2c10a:	bf00      	nop
   2c10c:	2001956c 	.word	0x2001956c

0002c110 <nct_reset_topics>:
{
   2c110:	b510      	push	{r4, lr}
	if (accepted_topic) {
   2c112:	4c17      	ldr	r4, [pc, #92]	; (2c170 <nct_reset_topics+0x60>)
   2c114:	6820      	ldr	r0, [r4, #0]
   2c116:	b118      	cbz	r0, 2c120 <nct_reset_topics+0x10>
		nrf_cloud_free(accepted_topic);
   2c118:	f015 f9c2 	bl	414a0 <k_free>
		accepted_topic = NULL;
   2c11c:	2300      	movs	r3, #0
   2c11e:	6023      	str	r3, [r4, #0]
	if (rejected_topic) {
   2c120:	4c14      	ldr	r4, [pc, #80]	; (2c174 <nct_reset_topics+0x64>)
   2c122:	6820      	ldr	r0, [r4, #0]
   2c124:	b118      	cbz	r0, 2c12e <nct_reset_topics+0x1e>
		nrf_cloud_free(rejected_topic);
   2c126:	f015 f9bb 	bl	414a0 <k_free>
		rejected_topic = NULL;
   2c12a:	2300      	movs	r3, #0
   2c12c:	6023      	str	r3, [r4, #0]
	if (update_delta_topic) {
   2c12e:	4c12      	ldr	r4, [pc, #72]	; (2c178 <nct_reset_topics+0x68>)
   2c130:	6820      	ldr	r0, [r4, #0]
   2c132:	b118      	cbz	r0, 2c13c <nct_reset_topics+0x2c>
		nrf_cloud_free(update_delta_topic);
   2c134:	f015 f9b4 	bl	414a0 <k_free>
		update_delta_topic = NULL;
   2c138:	2300      	movs	r3, #0
   2c13a:	6023      	str	r3, [r4, #0]
	if (update_topic) {
   2c13c:	4c0f      	ldr	r4, [pc, #60]	; (2c17c <nct_reset_topics+0x6c>)
   2c13e:	6820      	ldr	r0, [r4, #0]
   2c140:	b118      	cbz	r0, 2c14a <nct_reset_topics+0x3a>
		nrf_cloud_free(update_topic);
   2c142:	f015 f9ad 	bl	414a0 <k_free>
		update_topic = NULL;
   2c146:	2300      	movs	r3, #0
   2c148:	6023      	str	r3, [r4, #0]
	if (shadow_get_topic) {
   2c14a:	4c0d      	ldr	r4, [pc, #52]	; (2c180 <nct_reset_topics+0x70>)
   2c14c:	6820      	ldr	r0, [r4, #0]
   2c14e:	b118      	cbz	r0, 2c158 <nct_reset_topics+0x48>
		nrf_cloud_free(shadow_get_topic);
   2c150:	f015 f9a6 	bl	414a0 <k_free>
		shadow_get_topic = NULL;
   2c154:	2300      	movs	r3, #0
   2c156:	6023      	str	r3, [r4, #0]
	memset(nct_cc_rx_list, 0, sizeof(nct_cc_rx_list[0]) * CC_RX_LIST_CNT);
   2c158:	2224      	movs	r2, #36	; 0x24
   2c15a:	2100      	movs	r1, #0
   2c15c:	4809      	ldr	r0, [pc, #36]	; (2c184 <nct_reset_topics+0x74>)
   2c15e:	f015 fa50 	bl	41602 <memset>
}
   2c162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(nct_cc_tx_list, 0, sizeof(nct_cc_tx_list[0]) * CC_TX_LIST_CNT);
   2c166:	2218      	movs	r2, #24
   2c168:	2100      	movs	r1, #0
   2c16a:	4807      	ldr	r0, [pc, #28]	; (2c188 <nct_reset_topics+0x78>)
   2c16c:	f015 ba49 	b.w	41602 <memset>
   2c170:	20019568 	.word	0x20019568
   2c174:	2001a0f4 	.word	0x2001a0f4
   2c178:	2001a0fc 	.word	0x2001a0fc
   2c17c:	2001a100 	.word	0x2001a100
   2c180:	2001a0f8 	.word	0x2001a0f8
   2c184:	2001a0b8 	.word	0x2001a0b8
   2c188:	2001a0dc 	.word	0x2001a0dc

0002c18c <dc_endpoint_free>:
{
   2c18c:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   2c18e:	4c0d      	ldr	r4, [pc, #52]	; (2c1c4 <dc_endpoint_free+0x38>)
   2c190:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   2c194:	b108      	cbz	r0, 2c19a <dc_endpoint_free+0xe>
		nrf_cloud_free((void *)nct.dc_rx_endp.utf8);
   2c196:	f015 f983 	bl	414a0 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   2c19a:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   2c19e:	b108      	cbz	r0, 2c1a4 <dc_endpoint_free+0x18>
		nrf_cloud_free((void *)nct.dc_tx_endp.utf8);
   2c1a0:	f015 f97e 	bl	414a0 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   2c1a4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2c1a8:	b108      	cbz	r0, 2c1ae <dc_endpoint_free+0x22>
		nrf_cloud_free((void *)nct.dc_m_endp.utf8);
   2c1aa:	f015 f979 	bl	414a0 <k_free>
	if (nct.dc_bulk_endp.utf8 != NULL) {
   2c1ae:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   2c1b2:	b108      	cbz	r0, 2c1b8 <dc_endpoint_free+0x2c>
		nrf_cloud_free((void *)nct.dc_bulk_endp.utf8);
   2c1b4:	f015 f974 	bl	414a0 <k_free>
	dc_endpoint_reset();
   2c1b8:	f7ff fefc 	bl	2bfb4 <dc_endpoint_reset>
}
   2c1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nrf_cloud_fota_endpoint_clear();
   2c1c0:	f003 bb3e 	b.w	2f840 <nrf_cloud_fota_endpoint_clear>
   2c1c4:	20019570 	.word	0x20019570

0002c1c8 <dc_send>:
{
   2c1c8:	b530      	push	{r4, r5, lr}
   2c1ca:	460d      	mov	r5, r1
	if (dc_data == NULL) {
   2c1cc:	4604      	mov	r4, r0
{
   2c1ce:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   2c1d0:	b1f8      	cbz	r0, 2c212 <dc_send+0x4a>
	struct mqtt_publish_param publish = {
   2c1d2:	2210      	movs	r2, #16
   2c1d4:	2100      	movs	r1, #0
   2c1d6:	a802      	add	r0, sp, #8
   2c1d8:	f015 fa13 	bl	41602 <memset>
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   2c1dc:	4b0e      	ldr	r3, [pc, #56]	; (2c218 <dc_send+0x50>)
	struct mqtt_publish_param publish = {
   2c1de:	f88d 5008 	strb.w	r5, [sp, #8]
   2c1e2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
   2c1e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   2c1ea:	9200      	str	r2, [sp, #0]
   2c1ec:	9301      	str	r3, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2c1ee:	6823      	ldr	r3, [r4, #0]
   2c1f0:	b11b      	cbz	r3, 2c1fa <dc_send+0x32>
   2c1f2:	6862      	ldr	r2, [r4, #4]
   2c1f4:	b10a      	cbz	r2, 2c1fa <dc_send+0x32>
		publish.message.payload.len = dc_data->data.len;
   2c1f6:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (qos != MQTT_QOS_0_AT_MOST_ONCE) {
   2c1fa:	b125      	cbz	r5, 2c206 <dc_send+0x3e>
		publish.message_id = get_message_id(dc_data->message_id);
   2c1fc:	8a20      	ldrh	r0, [r4, #16]
   2c1fe:	f7ff fee7 	bl	2bfd0 <get_message_id>
   2c202:	f8ad 0014 	strh.w	r0, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2c206:	4669      	mov	r1, sp
   2c208:	4804      	ldr	r0, [pc, #16]	; (2c21c <dc_send+0x54>)
   2c20a:	f012 f910 	bl	3e42e <mqtt_publish>
}
   2c20e:	b007      	add	sp, #28
   2c210:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c212:	f06f 0015 	mvn.w	r0, #21
   2c216:	e7fa      	b.n	2c20e <dc_send+0x46>
   2c218:	20019570 	.word	0x20019570
   2c21c:	20019594 	.word	0x20019594

0002c220 <nct_set_topic_prefix>:
{
   2c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *end_of_stage = strchr(topic_prefix, '/');
   2c222:	212f      	movs	r1, #47	; 0x2f
{
   2c224:	4604      	mov	r4, r0
	char *end_of_stage = strchr(topic_prefix, '/');
   2c226:	f015 fbaa 	bl	4197e <strchr>
	if (end_of_stage) {
   2c22a:	4606      	mov	r6, r0
   2c22c:	b348      	cbz	r0, 2c282 <nct_set_topic_prefix+0x62>
		len = end_of_stage - topic_prefix;
   2c22e:	1b05      	subs	r5, r0, r4
		if (len >= sizeof(stage)) {
   2c230:	2d07      	cmp	r5, #7
   2c232:	d906      	bls.n	2c242 <nct_set_topic_prefix+0x22>
			LOG_WRN("Truncating copy of stage string length "
   2c234:	462a      	mov	r2, r5
   2c236:	2308      	movs	r3, #8
   2c238:	2157      	movs	r1, #87	; 0x57
   2c23a:	4812      	ldr	r0, [pc, #72]	; (2c284 <nct_set_topic_prefix+0x64>)
   2c23c:	f010 fd47 	bl	3ccce <z_log_minimal_printk>
			len = sizeof(stage) - 1;
   2c240:	2507      	movs	r5, #7
		memcpy(stage, topic_prefix, len);
   2c242:	4f11      	ldr	r7, [pc, #68]	; (2c288 <nct_set_topic_prefix+0x68>)
   2c244:	4621      	mov	r1, r4
   2c246:	2308      	movs	r3, #8
   2c248:	462a      	mov	r2, r5
   2c24a:	4638      	mov	r0, r7
   2c24c:	f015 f9c6 	bl	415dc <__memcpy_chk>
		stage[len] = '\0';
   2c250:	2300      	movs	r3, #0
		len = strlen(topic_prefix) - len - 2; /* skip both / */
   2c252:	4620      	mov	r0, r4
		stage[len] = '\0';
   2c254:	557b      	strb	r3, [r7, r5]
		len = strlen(topic_prefix) - len - 2; /* skip both / */
   2c256:	f7f0 fff4 	bl	1d242 <strlen>
   2c25a:	1e84      	subs	r4, r0, #2
   2c25c:	1b64      	subs	r4, r4, r5
		if (len >= sizeof(tenant)) {
   2c25e:	2c3f      	cmp	r4, #63	; 0x3f
   2c260:	d906      	bls.n	2c270 <nct_set_topic_prefix+0x50>
			LOG_WRN("Truncating copy of tenant id string length "
   2c262:	4622      	mov	r2, r4
   2c264:	2340      	movs	r3, #64	; 0x40
   2c266:	2157      	movs	r1, #87	; 0x57
   2c268:	4808      	ldr	r0, [pc, #32]	; (2c28c <nct_set_topic_prefix+0x6c>)
   2c26a:	f010 fd30 	bl	3ccce <z_log_minimal_printk>
			len = sizeof(tenant) - 1;
   2c26e:	243f      	movs	r4, #63	; 0x3f
		memcpy(tenant, end_of_stage + 1, len);
   2c270:	4d07      	ldr	r5, [pc, #28]	; (2c290 <nct_set_topic_prefix+0x70>)
   2c272:	2340      	movs	r3, #64	; 0x40
   2c274:	4622      	mov	r2, r4
   2c276:	4628      	mov	r0, r5
   2c278:	1c71      	adds	r1, r6, #1
   2c27a:	f015 f9af 	bl	415dc <__memcpy_chk>
		tenant[len] = '\0';
   2c27e:	2300      	movs	r3, #0
   2c280:	552b      	strb	r3, [r5, r4]
}
   2c282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c284:	000487b2 	.word	0x000487b2
   2c288:	2001c90e 	.word	0x2001c90e
   2c28c:	000487ed 	.word	0x000487ed
   2c290:	2001c916 	.word	0x2001c916

0002c294 <nct_save_session_state>:
{
   2c294:	b507      	push	{r0, r1, r2, lr}
   2c296:	9001      	str	r0, [sp, #4]
	persistent_session = (bool)session_valid;
   2c298:	3800      	subs	r0, #0
   2c29a:	bf18      	it	ne
   2c29c:	2001      	movne	r0, #1
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2c29e:	2204      	movs	r2, #4
	persistent_session = (bool)session_valid;
   2c2a0:	4b04      	ldr	r3, [pc, #16]	; (2c2b4 <nct_save_session_state+0x20>)
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2c2a2:	eb0d 0102 	add.w	r1, sp, r2
	persistent_session = (bool)session_valid;
   2c2a6:	7018      	strb	r0, [r3, #0]
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2c2a8:	4803      	ldr	r0, [pc, #12]	; (2c2b8 <nct_save_session_state+0x24>)
   2c2aa:	f7f5 feb3 	bl	22014 <settings_save_one>
}
   2c2ae:	b003      	add	sp, #12
   2c2b0:	f85d fb04 	ldr.w	pc, [sp], #4
   2c2b4:	2001c90d 	.word	0x2001c90d
   2c2b8:	0004882c 	.word	0x0004882c

0002c2bc <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2c2bc:	2300      	movs	r3, #0
{
   2c2be:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c2c0:	b08f      	sub	sp, #60	; 0x3c
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2c2c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2c2c6:	69cb      	ldr	r3, [r1, #28]
{
   2c2c8:	4606      	mov	r6, r0
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_NRF_CLOUD_FOTA)
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   2c2ca:	4608      	mov	r0, r1
{
   2c2cc:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2c2ce:	9301      	str	r3, [sp, #4]
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   2c2d0:	f003 fb38 	bl	2f944 <nrf_cloud_fota_mqtt_evt_handler>
	if (err == 0) {
   2c2d4:	1e02      	subs	r2, r0, #0
   2c2d6:	d033      	beq.n	2c340 <nct_mqtt_evt_handler+0x84>
		return;
	} else if (err < 0) {
   2c2d8:	da04      	bge.n	2c2e4 <nct_mqtt_evt_handler+0x28>
		LOG_ERR("nrf_cloud_fota_mqtt_evt_handler: Failed! %d", err);
   2c2da:	2145      	movs	r1, #69	; 0x45
   2c2dc:	485a      	ldr	r0, [pc, #360]	; (2c448 <nct_mqtt_evt_handler+0x18c>)

	if (event_notify) {
		err = nct_input(&evt);

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
   2c2de:	f010 fcf6 	bl	3ccce <z_log_minimal_printk>
   2c2e2:	e02d      	b.n	2c340 <nct_mqtt_evt_handler+0x84>
	switch (_mqtt_evt->type) {
   2c2e4:	7823      	ldrb	r3, [r4, #0]
   2c2e6:	2b09      	cmp	r3, #9
   2c2e8:	d82a      	bhi.n	2c340 <nct_mqtt_evt_handler+0x84>
   2c2ea:	e8df f003 	tbb	[pc, r3]
   2c2ee:	9305      	.short	0x9305
   2c2f0:	29298a16 	.word	0x29298a16
   2c2f4:	91858029 	.word	0x91858029
		evt.param.flag = (p->session_present_flag != 0) &&
   2c2f8:	4b54      	ldr	r3, [pc, #336]	; (2c44c <nct_mqtt_evt_handler+0x190>)
   2c2fa:	7920      	ldrb	r0, [r4, #4]
   2c2fc:	781b      	ldrb	r3, [r3, #0]
   2c2fe:	2800      	cmp	r0, #0
   2c300:	bf14      	ite	ne
   2c302:	461a      	movne	r2, r3
   2c304:	2200      	moveq	r2, #0
   2c306:	f88d 2008 	strb.w	r2, [sp, #8]
		if (persistent_session && (p->session_present_flag == 0)) {
   2c30a:	b113      	cbz	r3, 2c312 <nct_mqtt_evt_handler+0x56>
   2c30c:	b908      	cbnz	r0, 2c312 <nct_mqtt_evt_handler+0x56>
			nct_save_session_state(0);
   2c30e:	f7ff ffc1 	bl	2c294 <nct_save_session_state>
		evt.type = NCT_EVT_CONNECTED;
   2c312:	2300      	movs	r3, #0
		evt.type = NCT_EVT_DISCONNECTED;
   2c314:	f88d 300c 	strb.w	r3, [sp, #12]
	if (event_notify) {
   2c318:	e04b      	b.n	2c3b2 <nct_mqtt_evt_handler+0xf6>
		int err = publish_get_payload(mqtt_client,
   2c31a:	6967      	ldr	r7, [r4, #20]
	if (length > (sizeof(nct.payload_buf) - 1)) {
   2c31c:	f5b7 6f06 	cmp.w	r7, #2144	; 0x860
   2c320:	d910      	bls.n	2c344 <nct_mqtt_evt_handler+0x88>
		LOG_ERR("Length specified:%zd larger than payload_buf:%zd",
   2c322:	463a      	mov	r2, r7
   2c324:	f640 0361 	movw	r3, #2145	; 0x861
   2c328:	2145      	movs	r1, #69	; 0x45
   2c32a:	4849      	ldr	r0, [pc, #292]	; (2c450 <nct_mqtt_evt_handler+0x194>)
   2c32c:	f010 fccf 	bl	3ccce <z_log_minimal_printk>
		return -EMSGSIZE;
   2c330:	f06f 0279 	mvn.w	r2, #121	; 0x79
			LOG_ERR("publish_get_payload: failed %d", err);
   2c334:	2145      	movs	r1, #69	; 0x45
   2c336:	4847      	ldr	r0, [pc, #284]	; (2c454 <nct_mqtt_evt_handler+0x198>)
   2c338:	f010 fcc9 	bl	3ccce <z_log_minimal_printk>
			nrf_cloud_disconnect();
   2c33c:	f7ff fa9c 	bl	2b878 <nrf_cloud_disconnect>
		}
	}
}
   2c340:	b00f      	add	sp, #60	; 0x3c
   2c342:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int ret = mqtt_readall_publish_payload(client, nct.payload_buf, length);
   2c344:	4d44      	ldr	r5, [pc, #272]	; (2c458 <nct_mqtt_evt_handler+0x19c>)
   2c346:	463a      	mov	r2, r7
   2c348:	f205 21e6 	addw	r1, r5, #742	; 0x2e6
   2c34c:	4630      	mov	r0, r6
   2c34e:	f012 f9d8 	bl	3e702 <mqtt_readall_publish_payload>
	nct.payload_buf[length] = 0;
   2c352:	19ea      	adds	r2, r5, r7
   2c354:	2500      	movs	r5, #0
   2c356:	f882 52e6 	strb.w	r5, [r2, #742]	; 0x2e6
		if (err < 0) {
   2c35a:	1e02      	subs	r2, r0, #0
   2c35c:	dbea      	blt.n	2c334 <nct_mqtt_evt_handler+0x78>
   2c35e:	4f3f      	ldr	r7, [pc, #252]	; (2c45c <nct_mqtt_evt_handler+0x1a0>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   2c360:	68a2      	ldr	r2, [r4, #8]
   2c362:	687b      	ldr	r3, [r7, #4]
   2c364:	6839      	ldr	r1, [r7, #0]
   2c366:	429a      	cmp	r2, r3
   2c368:	bf28      	it	cs
   2c36a:	461a      	movcs	r2, r3
   2c36c:	6860      	ldr	r0, [r4, #4]
   2c36e:	f015 fb1b 	bl	419a8 <strncmp>
		if (strings_compare(
   2c372:	bb38      	cbnz	r0, 2c3c4 <nct_mqtt_evt_handler+0x108>
			*opcode = nct_cc_rx_opcode_map[index];
   2c374:	4b3a      	ldr	r3, [pc, #232]	; (2c460 <nct_mqtt_evt_handler+0x1a4>)
   2c376:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   2c37a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			cc.message_id = p->message_id;
   2c37e:	8b23      	ldrh	r3, [r4, #24]
   2c380:	f8ad 3020 	strh.w	r3, [sp, #32]
			cc.data.ptr = nct.payload_buf;
   2c384:	4b37      	ldr	r3, [pc, #220]	; (2c464 <nct_mqtt_evt_handler+0x1a8>)
   2c386:	9305      	str	r3, [sp, #20]
			cc.data.len = p->message.payload.len;
   2c388:	6963      	ldr	r3, [r4, #20]
   2c38a:	9304      	str	r3, [sp, #16]
			cc.topic.len = p->message.topic.topic.size;
   2c38c:	68a3      	ldr	r3, [r4, #8]
   2c38e:	9306      	str	r3, [sp, #24]
			cc.topic.ptr = p->message.topic.topic.utf8;
   2c390:	6863      	ldr	r3, [r4, #4]
   2c392:	9307      	str	r3, [sp, #28]
			evt.type = NCT_EVT_CC_RX_DATA;
   2c394:	2303      	movs	r3, #3
   2c396:	f88d 300c 	strb.w	r3, [sp, #12]
			evt.param.cc = &cc;
   2c39a:	ab04      	add	r3, sp, #16
			evt.param.dc = &dc;
   2c39c:	9302      	str	r3, [sp, #8]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2c39e:	7b23      	ldrb	r3, [r4, #12]
   2c3a0:	2b01      	cmp	r3, #1
   2c3a2:	d106      	bne.n	2c3b2 <nct_mqtt_evt_handler+0xf6>
			const struct mqtt_puback_param ack = {
   2c3a4:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2c3a6:	4669      	mov	r1, sp
   2c3a8:	4630      	mov	r0, r6
			const struct mqtt_puback_param ack = {
   2c3aa:	f8ad 3000 	strh.w	r3, [sp]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2c3ae:	f012 f882 	bl	3e4b6 <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   2c3b2:	a801      	add	r0, sp, #4
   2c3b4:	f7ff fba6 	bl	2bb04 <nct_input>
		if (err != 0) {
   2c3b8:	4602      	mov	r2, r0
   2c3ba:	2800      	cmp	r0, #0
   2c3bc:	d0c0      	beq.n	2c340 <nct_mqtt_evt_handler+0x84>
			LOG_ERR("nct_input: failed %d", err);
   2c3be:	2145      	movs	r1, #69	; 0x45
   2c3c0:	4829      	ldr	r0, [pc, #164]	; (2c468 <nct_mqtt_evt_handler+0x1ac>)
   2c3c2:	e78c      	b.n	2c2de <nct_mqtt_evt_handler+0x22>
	for (uint32_t index = 0; index < list_size; index++) {
   2c3c4:	3501      	adds	r5, #1
   2c3c6:	2d03      	cmp	r5, #3
   2c3c8:	f107 070c 	add.w	r7, r7, #12
   2c3cc:	d1c8      	bne.n	2c360 <nct_mqtt_evt_handler+0xa4>
			dc.message_id = p->message_id;
   2c3ce:	8b23      	ldrh	r3, [r4, #24]
   2c3d0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			dc.data.ptr = nct.payload_buf;
   2c3d4:	4b23      	ldr	r3, [pc, #140]	; (2c464 <nct_mqtt_evt_handler+0x1a8>)
   2c3d6:	930a      	str	r3, [sp, #40]	; 0x28
			dc.data.len = p->message.payload.len;
   2c3d8:	6963      	ldr	r3, [r4, #20]
   2c3da:	9309      	str	r3, [sp, #36]	; 0x24
			dc.topic.len = p->message.topic.topic.size;
   2c3dc:	68a3      	ldr	r3, [r4, #8]
   2c3de:	930b      	str	r3, [sp, #44]	; 0x2c
			dc.topic.ptr = p->message.topic.topic.utf8;
   2c3e0:	6863      	ldr	r3, [r4, #4]
   2c3e2:	930c      	str	r3, [sp, #48]	; 0x30
			evt.type = NCT_EVT_DC_RX_DATA;
   2c3e4:	2306      	movs	r3, #6
   2c3e6:	f88d 300c 	strb.w	r3, [sp, #12]
			evt.param.dc = &dc;
   2c3ea:	ab09      	add	r3, sp, #36	; 0x24
   2c3ec:	e7d6      	b.n	2c39c <nct_mqtt_evt_handler+0xe0>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_CC_SUB) {
   2c3ee:	88a3      	ldrh	r3, [r4, #4]
   2c3f0:	2b64      	cmp	r3, #100	; 0x64
   2c3f2:	d111      	bne.n	2c418 <nct_mqtt_evt_handler+0x15c>
			evt.type = NCT_EVT_CC_CONNECTED;
   2c3f4:	2301      	movs	r3, #1
   2c3f6:	e78d      	b.n	2c314 <nct_mqtt_evt_handler+0x58>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_CC_UNSUB) {
   2c3f8:	88a3      	ldrh	r3, [r4, #4]
   2c3fa:	2b96      	cmp	r3, #150	; 0x96
   2c3fc:	d1a0      	bne.n	2c340 <nct_mqtt_evt_handler+0x84>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   2c3fe:	2308      	movs	r3, #8
   2c400:	e788      	b.n	2c314 <nct_mqtt_evt_handler+0x58>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   2c402:	2304      	movs	r3, #4
   2c404:	f88d 300c 	strb.w	r3, [sp, #12]
		evt.param.message_id = _mqtt_evt->param.puback.message_id;
   2c408:	88a3      	ldrh	r3, [r4, #4]
   2c40a:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (event_notify) {
   2c40e:	e7d0      	b.n	2c3b2 <nct_mqtt_evt_handler+0xf6>
		evt.type = NCT_EVT_PINGRESP;
   2c410:	2305      	movs	r3, #5
   2c412:	e77f      	b.n	2c314 <nct_mqtt_evt_handler+0x58>
		evt.type = NCT_EVT_DISCONNECTED;
   2c414:	230a      	movs	r3, #10
   2c416:	e77d      	b.n	2c314 <nct_mqtt_evt_handler+0x58>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_DC_SUB) {
   2c418:	2b65      	cmp	r3, #101	; 0x65
   2c41a:	d191      	bne.n	2c340 <nct_mqtt_evt_handler+0x84>
			evt.type = NCT_EVT_DC_CONNECTED;
   2c41c:	2302      	movs	r3, #2
			err = nct_save_session_state(1);
   2c41e:	2001      	movs	r0, #1
			evt.type = NCT_EVT_DC_CONNECTED;
   2c420:	f88d 300c 	strb.w	r3, [sp, #12]
			err = nct_save_session_state(1);
   2c424:	f7ff ff36 	bl	2c294 <nct_save_session_state>
			if (err) {
   2c428:	4602      	mov	r2, r0
   2c42a:	b118      	cbz	r0, 2c434 <nct_mqtt_evt_handler+0x178>
				LOG_ERR("Failed to save session state: %d",
   2c42c:	2145      	movs	r1, #69	; 0x45
   2c42e:	480f      	ldr	r0, [pc, #60]	; (2c46c <nct_mqtt_evt_handler+0x1b0>)
   2c430:	f010 fc4d 	bl	3ccce <z_log_minimal_printk>
			err = nrf_cloud_fota_subscribe();
   2c434:	f003 fa0c 	bl	2f850 <nrf_cloud_fota_subscribe>
			if (err) {
   2c438:	4602      	mov	r2, r0
   2c43a:	2800      	cmp	r0, #0
   2c43c:	d0b9      	beq.n	2c3b2 <nct_mqtt_evt_handler+0xf6>
				LOG_ERR("FOTA MQTT subscribe failed: %d", err);
   2c43e:	2145      	movs	r1, #69	; 0x45
   2c440:	480b      	ldr	r0, [pc, #44]	; (2c470 <nct_mqtt_evt_handler+0x1b4>)
   2c442:	f010 fc44 	bl	3ccce <z_log_minimal_printk>
	if (event_notify) {
   2c446:	e7b4      	b.n	2c3b2 <nct_mqtt_evt_handler+0xf6>
   2c448:	0004883d 	.word	0x0004883d
   2c44c:	2001c90d 	.word	0x2001c90d
   2c450:	0004886e 	.word	0x0004886e
   2c454:	000488a4 	.word	0x000488a4
   2c458:	20019570 	.word	0x20019570
   2c45c:	2001a0b8 	.word	0x2001a0b8
   2c460:	00043290 	.word	0x00043290
   2c464:	20019856 	.word	0x20019856
   2c468:	00048912 	.word	0x00048912
   2c46c:	000488c8 	.word	0x000488c8
   2c470:	000488ee 	.word	0x000488ee

0002c474 <nct_mqtt_connect>:
{
   2c474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!mqtt_client_initialized) {
   2c476:	4e22      	ldr	r6, [pc, #136]	; (2c500 <nct_mqtt_connect+0x8c>)
   2c478:	7835      	ldrb	r5, [r6, #0]
   2c47a:	2d00      	cmp	r5, #0
   2c47c:	d13b      	bne.n	2c4f6 <nct_mqtt_connect+0x82>
		mqtt_client_init(&nct.client);
   2c47e:	4c21      	ldr	r4, [pc, #132]	; (2c504 <nct_mqtt_connect+0x90>)
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2c480:	2701      	movs	r7, #1
		mqtt_client_init(&nct.client);
   2c482:	f104 0024 	add.w	r0, r4, #36	; 0x24
   2c486:	f011 ff79 	bl	3e37c <mqtt_client_init>
		nct.client.broker = (struct sockaddr *)&nct.broker;
   2c48a:	f104 03ac 	add.w	r3, r4, #172	; 0xac
   2c48e:	67e3      	str	r3, [r4, #124]	; 0x7c
		nct.client.evt_cb = nct_mqtt_evt_handler;
   2c490:	4b1d      	ldr	r3, [pc, #116]	; (2c508 <nct_mqtt_connect+0x94>)
   2c492:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   2c496:	4b1d      	ldr	r3, [pc, #116]	; (2c50c <nct_mqtt_connect+0x98>)
   2c498:	6818      	ldr	r0, [r3, #0]
   2c49a:	6760      	str	r0, [r4, #116]	; 0x74
		nct.client.client_id.size = strlen(client_id_buf);
   2c49c:	f7f0 fed1 	bl	1d242 <strlen>
		nct.client.protocol_version = MQTT_VERSION_3_1_1;
   2c4a0:	2304      	movs	r3, #4
   2c4a2:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
		nct.client.keepalive = CONFIG_NRF_CLOUD_MQTT_KEEPALIVE;
   2c4a6:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   2c4aa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2c4ae:	4b18      	ldr	r3, [pc, #96]	; (2c510 <nct_mqtt_connect+0x9c>)
   2c4b0:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
   2c4b4:	781b      	ldrb	r3, [r3, #0]
		nct.client.user_name = NULL;
   2c4b6:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2c4ba:	f083 0301 	eor.w	r3, r3, #1
   2c4be:	f363 0241 	bfi	r2, r3, #1, #1
		nct.client.rx_buf = nct.rx_buf;
   2c4c2:	f104 03e6 	add.w	r3, r4, #230	; 0xe6
   2c4c6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2c4ca:	f44f 7380 	mov.w	r3, #256	; 0x100
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2c4ce:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
   2c4d2:	f104 0550 	add.w	r5, r4, #80	; 0x50
		nct.client.tx_buf = nct.tx_buf;
   2c4d6:	f504 72f3 	add.w	r2, r4, #486	; 0x1e6
		nct.client.client_id.size = strlen(client_id_buf);
   2c4da:	67a0      	str	r0, [r4, #120]	; 0x78
		nct.client.tx_buf_size = sizeof(nct.tx_buf);
   2c4dc:	e9c4 2327 	strd	r2, r3, [r4, #156]	; 0x9c
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2c4e0:	f884 7048 	strb.w	r7, [r4, #72]	; 0x48
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2c4e4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		memcpy(tls_config, &nct.tls_config,
   2c4e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2c4ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2c4ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2c4ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2c4f0:	6823      	ldr	r3, [r4, #0]
		mqtt_client_initialized = true;
   2c4f2:	7037      	strb	r7, [r6, #0]
   2c4f4:	602b      	str	r3, [r5, #0]
	err = mqtt_connect(&nct.client);
   2c4f6:	4807      	ldr	r0, [pc, #28]	; (2c514 <nct_mqtt_connect+0xa0>)
}
   2c4f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	err = mqtt_connect(&nct.client);
   2c4fc:	f011 bf55 	b.w	3e3aa <mqtt_connect>
   2c500:	2001c90c 	.word	0x2001c90c
   2c504:	20019570 	.word	0x20019570
   2c508:	0002c2bd 	.word	0x0002c2bd
   2c50c:	2001956c 	.word	0x2001956c
   2c510:	2001c90d 	.word	0x2001c90d
   2c514:	20019594 	.word	0x20019594

0002c518 <nct_init>:

int nct_init(const char * const client_id)
{
   2c518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c51c:	4605      	mov	r5, r0
	ret = settings_subsys_init();
   2c51e:	f7f5 fec5 	bl	222ac <settings_subsys_init>
	if (ret) {
   2c522:	4604      	mov	r4, r0
   2c524:	b138      	cbz	r0, 2c536 <nct_init+0x1e>
		LOG_ERR("Settings init failed: %d", ret);
   2c526:	2145      	movs	r1, #69	; 0x45
   2c528:	4602      	mov	r2, r0
   2c52a:	485c      	ldr	r0, [pc, #368]	; (2c69c <nct_init+0x184>)
		LOG_ERR("Cannot load settings: %d", ret);
   2c52c:	f010 fbcf 	bl	3ccce <z_log_minimal_printk>
	if (err) {
		return err;
	}

	return nct_provision();
}
   2c530:	4620      	mov	r0, r4
   2c532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ret = settings_load_subtree(settings_handler_nrf_cloud.name);
   2c536:	485a      	ldr	r0, [pc, #360]	; (2c6a0 <nct_init+0x188>)
   2c538:	f7f5 fda6 	bl	22088 <settings_load_subtree>
	if (ret) {
   2c53c:	4604      	mov	r4, r0
   2c53e:	2800      	cmp	r0, #0
   2c540:	f000 808d 	beq.w	2c65e <nct_init+0x146>
		LOG_ERR("Cannot load settings: %d", ret);
   2c544:	4602      	mov	r2, r0
   2c546:	2145      	movs	r1, #69	; 0x45
   2c548:	4856      	ldr	r0, [pc, #344]	; (2c6a4 <nct_init+0x18c>)
   2c54a:	e7ef      	b.n	2c52c <nct_init+0x14>
	if (client_id_buf) {
   2c54c:	4d56      	ldr	r5, [pc, #344]	; (2c6a8 <nct_init+0x190>)
   2c54e:	6828      	ldr	r0, [r5, #0]
   2c550:	b118      	cbz	r0, 2c55a <nct_init+0x42>
		nrf_cloud_free(client_id_buf);
   2c552:	f014 ffa5 	bl	414a0 <k_free>
		client_id_buf = NULL;
   2c556:	2300      	movs	r3, #0
   2c558:	602b      	str	r3, [r5, #0]
	++len;
   2c55a:	3401      	adds	r4, #1
	client_id_buf = nrf_cloud_calloc(len, 1);
   2c55c:	2101      	movs	r1, #1
   2c55e:	4620      	mov	r0, r4
   2c560:	f014 ffa9 	bl	414b6 <k_calloc>
   2c564:	6028      	str	r0, [r5, #0]
	if (!client_id_buf) {
   2c566:	2800      	cmp	r0, #0
   2c568:	d076      	beq.n	2c658 <nct_init+0x140>
		ret = nrf_cloud_configured_client_id_get(client_id_buf, len);
   2c56a:	4621      	mov	r1, r4
   2c56c:	f7fe ffea 	bl	2b544 <nrf_cloud_configured_client_id_get>
		if (ret) {
   2c570:	4604      	mov	r4, r0
   2c572:	b930      	cbnz	r0, 2c582 <nct_init+0x6a>
	dc_endpoint_reset();
   2c574:	f7ff fd1e 	bl	2bfb4 <dc_endpoint_reset>
	if (!client_id_buf) {
   2c578:	682b      	ldr	r3, [r5, #0]
   2c57a:	b933      	cbnz	r3, 2c58a <nct_init+0x72>
		return -ENODEV;
   2c57c:	f06f 0412 	mvn.w	r4, #18
   2c580:	e7d6      	b.n	2c530 <nct_init+0x18>
			LOG_ERR("Could not obtain configured client ID, error: %d", ret);
   2c582:	4602      	mov	r2, r0
   2c584:	2145      	movs	r1, #69	; 0x45
   2c586:	4849      	ldr	r0, [pc, #292]	; (2c6ac <nct_init+0x194>)
   2c588:	e7d0      	b.n	2c52c <nct_init+0x14>
	ret = allocate_and_format_topic(&accepted_topic, NCT_ACCEPTED_TOPIC);
   2c58a:	f8df b164 	ldr.w	fp, [pc, #356]	; 2c6f0 <nct_init+0x1d8>
	nct_reset_topics();
   2c58e:	f7ff fdbf 	bl	2c110 <nct_reset_topics>
	ret = allocate_and_format_topic(&accepted_topic, NCT_ACCEPTED_TOPIC);
   2c592:	4658      	mov	r0, fp
   2c594:	4946      	ldr	r1, [pc, #280]	; (2c6b0 <nct_init+0x198>)
   2c596:	f7ff fd91 	bl	2c0bc <allocate_and_format_topic>
	if (ret) {
   2c59a:	4604      	mov	r4, r0
   2c59c:	2800      	cmp	r0, #0
   2c59e:	d153      	bne.n	2c648 <nct_init+0x130>
	ret = allocate_and_format_topic(&rejected_topic, NCT_REJECTED_TOPIC);
   2c5a0:	f8df a150 	ldr.w	sl, [pc, #336]	; 2c6f4 <nct_init+0x1dc>
   2c5a4:	4943      	ldr	r1, [pc, #268]	; (2c6b4 <nct_init+0x19c>)
   2c5a6:	4650      	mov	r0, sl
   2c5a8:	f7ff fd88 	bl	2c0bc <allocate_and_format_topic>
	if (ret) {
   2c5ac:	4604      	mov	r4, r0
   2c5ae:	2800      	cmp	r0, #0
   2c5b0:	d14a      	bne.n	2c648 <nct_init+0x130>
	ret = allocate_and_format_topic(&update_delta_topic, NCT_UPDATE_DELTA_TOPIC);
   2c5b2:	f8df 9144 	ldr.w	r9, [pc, #324]	; 2c6f8 <nct_init+0x1e0>
   2c5b6:	4940      	ldr	r1, [pc, #256]	; (2c6b8 <nct_init+0x1a0>)
   2c5b8:	4648      	mov	r0, r9
   2c5ba:	f7ff fd7f 	bl	2c0bc <allocate_and_format_topic>
	if (ret) {
   2c5be:	4604      	mov	r4, r0
   2c5c0:	2800      	cmp	r0, #0
   2c5c2:	d141      	bne.n	2c648 <nct_init+0x130>
	ret = allocate_and_format_topic(&update_topic, NCT_UPDATE_TOPIC);
   2c5c4:	4f3d      	ldr	r7, [pc, #244]	; (2c6bc <nct_init+0x1a4>)
   2c5c6:	493e      	ldr	r1, [pc, #248]	; (2c6c0 <nct_init+0x1a8>)
   2c5c8:	4638      	mov	r0, r7
   2c5ca:	f7ff fd77 	bl	2c0bc <allocate_and_format_topic>
	if (ret) {
   2c5ce:	4604      	mov	r4, r0
   2c5d0:	2800      	cmp	r0, #0
   2c5d2:	d139      	bne.n	2c648 <nct_init+0x130>
	ret = allocate_and_format_topic(&shadow_get_topic, NCT_SHADOW_GET);
   2c5d4:	f8df 8124 	ldr.w	r8, [pc, #292]	; 2c6fc <nct_init+0x1e4>
   2c5d8:	493a      	ldr	r1, [pc, #232]	; (2c6c4 <nct_init+0x1ac>)
   2c5da:	4640      	mov	r0, r8
   2c5dc:	f7ff fd6e 	bl	2c0bc <allocate_and_format_topic>
	if (ret) {
   2c5e0:	4604      	mov	r4, r0
   2c5e2:	2800      	cmp	r0, #0
   2c5e4:	d130      	bne.n	2c648 <nct_init+0x130>
	nct_cc_rx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c5e6:	2601      	movs	r6, #1
   2c5e8:	4d37      	ldr	r5, [pc, #220]	; (2c6c8 <nct_init+0x1b0>)
	nct_cc_rx_list[0].topic.utf8 = accepted_topic;
   2c5ea:	f8db 0000 	ldr.w	r0, [fp]
	nct_cc_rx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c5ee:	722e      	strb	r6, [r5, #8]
	nct_cc_rx_list[0].topic.utf8 = accepted_topic;
   2c5f0:	6028      	str	r0, [r5, #0]
	nct_cc_rx_list[0].topic.size = strlen(accepted_topic);
   2c5f2:	f7f0 fe26 	bl	1d242 <strlen>
   2c5f6:	6068      	str	r0, [r5, #4]
	nct_cc_rx_list[1].topic.utf8 = rejected_topic;
   2c5f8:	f8da 0000 	ldr.w	r0, [sl]
	nct_cc_rx_list[1].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c5fc:	752e      	strb	r6, [r5, #20]
	nct_cc_rx_list[1].topic.utf8 = rejected_topic;
   2c5fe:	60e8      	str	r0, [r5, #12]
	nct_cc_rx_list[1].topic.size = strlen(rejected_topic);
   2c600:	f7f0 fe1f 	bl	1d242 <strlen>
   2c604:	6128      	str	r0, [r5, #16]
	nct_cc_rx_list[2].topic.utf8 = update_delta_topic;
   2c606:	f8d9 0000 	ldr.w	r0, [r9]
	nct_cc_rx_list[2].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c60a:	f885 6020 	strb.w	r6, [r5, #32]
	nct_cc_rx_list[2].topic.utf8 = update_delta_topic;
   2c60e:	61a8      	str	r0, [r5, #24]
	nct_cc_rx_list[2].topic.size = strlen(update_delta_topic);
   2c610:	f7f0 fe17 	bl	1d242 <strlen>
   2c614:	61e8      	str	r0, [r5, #28]
	nct_cc_tx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c616:	4d2d      	ldr	r5, [pc, #180]	; (2c6cc <nct_init+0x1b4>)
	nct_cc_tx_list[0].topic.utf8 = shadow_get_topic;
   2c618:	f8d8 0000 	ldr.w	r0, [r8]
	nct_cc_tx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c61c:	722e      	strb	r6, [r5, #8]
	nct_cc_tx_list[0].topic.utf8 = shadow_get_topic;
   2c61e:	6028      	str	r0, [r5, #0]
	nct_cc_tx_list[0].topic.size = strlen(shadow_get_topic);
   2c620:	f7f0 fe0f 	bl	1d242 <strlen>
   2c624:	6068      	str	r0, [r5, #4]
	nct_cc_tx_list[1].topic.utf8 = update_topic;
   2c626:	6838      	ldr	r0, [r7, #0]
	nct_cc_tx_list[1].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c628:	752e      	strb	r6, [r5, #20]
	nct_cc_tx_list[1].topic.utf8 = update_topic;
   2c62a:	60e8      	str	r0, [r5, #12]
	nct_cc_tx_list[1].topic.size = strlen(update_topic);
   2c62c:	f7f0 fe09 	bl	1d242 <strlen>
	nct.tls_config.peer_verify = 2;
   2c630:	2202      	movs	r2, #2
   2c632:	4b27      	ldr	r3, [pc, #156]	; (2c6d0 <nct_init+0x1b8>)
	nct_cc_tx_list[1].topic.size = strlen(update_topic);
   2c634:	6128      	str	r0, [r5, #16]
	nct.tls_config.cipher_count = 0;
   2c636:	e9c3 2400 	strd	r2, r4, [r3]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2c63a:	4a26      	ldr	r2, [pc, #152]	; (2c6d4 <nct_init+0x1bc>)
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   2c63c:	e9c3 4602 	strd	r4, r6, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2c640:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   2c642:	4a25      	ldr	r2, [pc, #148]	; (2c6d8 <nct_init+0x1c0>)
   2c644:	619a      	str	r2, [r3, #24]
	return nct_provision();
   2c646:	e773      	b.n	2c530 <nct_init+0x18>
	LOG_ERR("Failed to format MQTT topics, err: %d", ret);
   2c648:	4622      	mov	r2, r4
   2c64a:	2145      	movs	r1, #69	; 0x45
   2c64c:	4823      	ldr	r0, [pc, #140]	; (2c6dc <nct_init+0x1c4>)
   2c64e:	f010 fb3e 	bl	3ccce <z_log_minimal_printk>
	nct_reset_topics();
   2c652:	f7ff fd5d 	bl	2c110 <nct_reset_topics>
	if (err) {
   2c656:	e76b      	b.n	2c530 <nct_init+0x18>
		return -ENOMEM;
   2c658:	f06f 040b 	mvn.w	r4, #11
   2c65c:	e768      	b.n	2c530 <nct_init+0x18>
	err = nrf_cloud_fota_init(nrf_cloud_fota_cb_handler);
   2c65e:	4820      	ldr	r0, [pc, #128]	; (2c6e0 <nct_init+0x1c8>)
   2c660:	f003 f828 	bl	2f6b4 <nrf_cloud_fota_init>
	if (err < 0) {
   2c664:	1e04      	subs	r4, r0, #0
   2c666:	f6ff af63 	blt.w	2c530 <nct_init+0x18>
	} else if (err && persistent_session) {
   2c66a:	d005      	beq.n	2c678 <nct_init+0x160>
   2c66c:	4b1d      	ldr	r3, [pc, #116]	; (2c6e4 <nct_init+0x1cc>)
   2c66e:	781b      	ldrb	r3, [r3, #0]
   2c670:	b113      	cbz	r3, 2c678 <nct_init+0x160>
		nct_save_session_state(0);
   2c672:	2000      	movs	r0, #0
   2c674:	f7ff fe0e 	bl	2c294 <nct_save_session_state>
		if (client_id) {
   2c678:	b11d      	cbz	r5, 2c682 <nct_init+0x16a>
			LOG_WRN("Not configured to for runtime client ID, ignoring");
   2c67a:	2157      	movs	r1, #87	; 0x57
   2c67c:	481a      	ldr	r0, [pc, #104]	; (2c6e8 <nct_init+0x1d0>)
   2c67e:	f010 fb26 	bl	3ccce <z_log_minimal_printk>
		len = nrf_cloud_configured_client_id_length_get();
   2c682:	f013 f908 	bl	3f896 <nrf_cloud_configured_client_id_length_get>
	if (!len) {
   2c686:	4604      	mov	r4, r0
   2c688:	2800      	cmp	r0, #0
   2c68a:	f47f af5f 	bne.w	2c54c <nct_init+0x34>
		LOG_WRN("Could not determine size of client ID");
   2c68e:	2157      	movs	r1, #87	; 0x57
   2c690:	4816      	ldr	r0, [pc, #88]	; (2c6ec <nct_init+0x1d4>)
   2c692:	f010 fb1c 	bl	3ccce <z_log_minimal_printk>
		return -ENOMSG;
   2c696:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2c69a:	e749      	b.n	2c530 <nct_init+0x18>
   2c69c:	0004892c 	.word	0x0004892c
   2c6a0:	00046ebb 	.word	0x00046ebb
   2c6a4:	0004894a 	.word	0x0004894a
   2c6a8:	2001956c 	.word	0x2001956c
   2c6ac:	000489ca 	.word	0x000489ca
   2c6b0:	00048a00 	.word	0x00048a00
   2c6b4:	00048a17 	.word	0x00048a17
   2c6b8:	00048a3a 	.word	0x00048a3a
   2c6bc:	2001a100 	.word	0x2001a100
   2c6c0:	00048a5d 	.word	0x00048a5d
   2c6c4:	00048a7a 	.word	0x00048a7a
   2c6c8:	2001a0b8 	.word	0x2001a0b8
   2c6cc:	2001a0dc 	.word	0x2001a0dc
   2c6d0:	20019570 	.word	0x20019570
   2c6d4:	200146b0 	.word	0x200146b0
   2c6d8:	00048a94 	.word	0x00048a94
   2c6dc:	00048aa6 	.word	0x00048aa6
   2c6e0:	0002c055 	.word	0x0002c055
   2c6e4:	2001c90d 	.word	0x2001c90d
   2c6e8:	00048968 	.word	0x00048968
   2c6ec:	0004899f 	.word	0x0004899f
   2c6f0:	20019568 	.word	0x20019568
   2c6f4:	2001a0f4 	.word	0x2001a0f4
   2c6f8:	2001a0fc 	.word	0x2001a0fc
   2c6fc:	2001a0f8 	.word	0x2001a0f8

0002c700 <nct_uninit>:

void nct_uninit(void)
{
   2c700:	b510      	push	{r4, lr}
	LOG_DBG("Uninitializing nRF Cloud transport");
	dc_endpoint_free();
	nct_reset_topics();

	if (client_id_buf) {
   2c702:	4c0a      	ldr	r4, [pc, #40]	; (2c72c <nct_uninit+0x2c>)
	dc_endpoint_free();
   2c704:	f7ff fd42 	bl	2c18c <dc_endpoint_free>
	nct_reset_topics();
   2c708:	f7ff fd02 	bl	2c110 <nct_reset_topics>
	if (client_id_buf) {
   2c70c:	6820      	ldr	r0, [r4, #0]
   2c70e:	b118      	cbz	r0, 2c718 <nct_uninit+0x18>
		nrf_cloud_free(client_id_buf);
   2c710:	f014 fec6 	bl	414a0 <k_free>
		client_id_buf = NULL;
   2c714:	2300      	movs	r3, #0
   2c716:	6023      	str	r3, [r4, #0]
	}

	memset(&nct, 0, sizeof(nct));
   2c718:	f640 3248 	movw	r2, #2888	; 0xb48
   2c71c:	2100      	movs	r1, #0
   2c71e:	4804      	ldr	r0, [pc, #16]	; (2c730 <nct_uninit+0x30>)
   2c720:	f014 ff6f 	bl	41602 <memset>
	mqtt_client_initialized = false;
   2c724:	2200      	movs	r2, #0
   2c726:	4b03      	ldr	r3, [pc, #12]	; (2c734 <nct_uninit+0x34>)
   2c728:	701a      	strb	r2, [r3, #0]
}
   2c72a:	bd10      	pop	{r4, pc}
   2c72c:	2001956c 	.word	0x2001956c
   2c730:	20019570 	.word	0x20019570
   2c734:	2001c90c 	.word	0x2001c90c

0002c738 <nct_connect>:

	return err;
}
#else
int nct_connect(void)
{
   2c738:	b510      	push	{r4, lr}
   2c73a:	b09a      	sub	sp, #104	; 0x68
	int err;
	struct addrinfo *result;
	struct addrinfo *addr;
	struct addrinfo hints = {
   2c73c:	2250      	movs	r2, #80	; 0x50
   2c73e:	2100      	movs	r1, #0
   2c740:	a806      	add	r0, sp, #24
   2c742:	f014 ff5e 	bl	41602 <memset>
   2c746:	2301      	movs	r3, #1
	return zsock_getaddrinfo(host, service, hints, res);
   2c748:	2100      	movs	r1, #0
   2c74a:	e9cd 3308 	strd	r3, r3, [sp, #32]
   2c74e:	4815      	ldr	r0, [pc, #84]	; (2c7a4 <nct_connect+0x6c>)
   2c750:	ab01      	add	r3, sp, #4
   2c752:	aa06      	add	r2, sp, #24
   2c754:	f010 fded 	bl	3d332 <zsock_getaddrinfo>
		.ai_family = NRF_CLOUD_AF_FAMILY,
		.ai_socktype = SOCK_STREAM
	};

	err = getaddrinfo(NRF_CLOUD_HOSTNAME, NULL, &hints, &result);
	if (err) {
   2c758:	bb00      	cbnz	r0, 2c79c <nct_connect+0x64>
		LOG_DBG("getaddrinfo failed %d", err);
		return -ECHILD;
	}

	addr = result;
   2c75a:	9b01      	ldr	r3, [sp, #4]
	err = -ECHILD;

	/* Look for address of the broker. */
	while (addr != NULL) {
   2c75c:	b913      	cbnz	r3, 2c764 <nct_connect+0x2c>
	err = -ECHILD;
   2c75e:	f06f 0409 	mvn.w	r4, #9
   2c762:	e013      	b.n	2c78c <nct_connect+0x54>
		/* IPv4 Address. */
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   2c764:	695a      	ldr	r2, [r3, #20]
   2c766:	2a08      	cmp	r2, #8
   2c768:	d116      	bne.n	2c798 <nct_connect+0x60>
			struct sockaddr_in *broker =
				((struct sockaddr_in *)&nct.broker);

			broker->sin_addr.s_addr =
				((struct sockaddr_in *)addr->ai_addr)
					->sin_addr.s_addr;
   2c76a:	699b      	ldr	r3, [r3, #24]
			broker->sin_addr.s_addr =
   2c76c:	490e      	ldr	r1, [pc, #56]	; (2c7a8 <nct_connect+0x70>)
					->sin_addr.s_addr;
   2c76e:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   2c770:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
			broker->sin_family = AF_INET;
   2c774:	4b0d      	ldr	r3, [pc, #52]	; (2c7ac <nct_connect+0x74>)
   2c776:	f8c1 30ac 	str.w	r3, [r1, #172]	; 0xac
		union { uintptr_t x; size_t val; } parm3 = { .val = size };
		return (char *) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   2c77a:	2310      	movs	r3, #16
   2c77c:	aa02      	add	r2, sp, #8
   2c77e:	31b0      	adds	r1, #176	; 0xb0
   2c780:	2001      	movs	r0, #1
   2c782:	f7f7 fafd 	bl	23d80 <z_impl_net_addr_ntop>
				 addr_str,
				 sizeof(addr_str));

			LOG_DBG("IPv4 address: %s", log_strdup(addr_str));

			err = nct_mqtt_connect();
   2c786:	f7ff fe75 	bl	2c474 <nct_mqtt_connect>
   2c78a:	4604      	mov	r4, r0
	zsock_freeaddrinfo(ai);
   2c78c:	9801      	ldr	r0, [sp, #4]
   2c78e:	f010 fdd2 	bl	3d336 <zsock_freeaddrinfo>

	/* Free the address. */
	freeaddrinfo(result);

	return err;
}
   2c792:	4620      	mov	r0, r4
   2c794:	b01a      	add	sp, #104	; 0x68
   2c796:	bd10      	pop	{r4, pc}
		addr = addr->ai_next;
   2c798:	681b      	ldr	r3, [r3, #0]
   2c79a:	e7df      	b.n	2c75c <nct_connect+0x24>
		return -ECHILD;
   2c79c:	f06f 0409 	mvn.w	r4, #9
   2c7a0:	e7f7      	b.n	2c792 <nct_connect+0x5a>
   2c7a2:	bf00      	nop
   2c7a4:	00048a94 	.word	0x00048a94
   2c7a8:	20019570 	.word	0x20019570
   2c7ac:	b3220001 	.word	0xb3220001

0002c7b0 <nct_cc_connect>:
#endif /* defined(CONFIG_NRF_CLOUD_STATIC_IPV4) */

int nct_cc_connect(void)
{
   2c7b0:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");

	const struct mqtt_subscription_list subscription_list = {
   2c7b2:	466b      	mov	r3, sp
   2c7b4:	4a05      	ldr	r2, [pc, #20]	; (2c7cc <nct_cc_connect+0x1c>)
   2c7b6:	e892 0003 	ldmia.w	r2, {r0, r1}
   2c7ba:	e883 0003 	stmia.w	r3, {r0, r1}
		.list = (struct mqtt_topic *)&nct_cc_rx_list,
		.list_count = ARRAY_SIZE(nct_cc_rx_list),
		.message_id = NCT_MSG_ID_CC_SUB
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2c7be:	4619      	mov	r1, r3
   2c7c0:	4803      	ldr	r0, [pc, #12]	; (2c7d0 <nct_cc_connect+0x20>)
   2c7c2:	f011 fec6 	bl	3e552 <mqtt_subscribe>
}
   2c7c6:	b003      	add	sp, #12
   2c7c8:	f85d fb04 	ldr.w	pc, [sp], #4
   2c7cc:	000429dc 	.word	0x000429dc
   2c7d0:	20019594 	.word	0x20019594

0002c7d4 <nct_cc_send>:

int nct_cc_send(const struct nct_cc_data *cc_data)
{
   2c7d4:	b530      	push	{r4, r5, lr}
	if (cc_data == NULL) {
   2c7d6:	4604      	mov	r4, r0
{
   2c7d8:	b087      	sub	sp, #28
	if (cc_data == NULL) {
   2c7da:	b940      	cbnz	r0, 2c7ee <nct_cc_send+0x1a>
		LOG_ERR("cc_data == NULL");
   2c7dc:	2145      	movs	r1, #69	; 0x45
   2c7de:	481d      	ldr	r0, [pc, #116]	; (2c854 <nct_cc_send+0x80>)
   2c7e0:	f010 fa75 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   2c7e4:	f06f 0415 	mvn.w	r4, #21
	if (err) {
		LOG_ERR("mqtt_publish failed %d", err);
	}

	return err;
}
   2c7e8:	4620      	mov	r0, r4
   2c7ea:	b007      	add	sp, #28
   2c7ec:	bd30      	pop	{r4, r5, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   2c7ee:	7c85      	ldrb	r5, [r0, #18]
   2c7f0:	2d01      	cmp	r5, #1
   2c7f2:	d907      	bls.n	2c804 <nct_cc_send+0x30>
		LOG_ERR("opcode = %d", cc_data->opcode);
   2c7f4:	462a      	mov	r2, r5
   2c7f6:	2145      	movs	r1, #69	; 0x45
   2c7f8:	4817      	ldr	r0, [pc, #92]	; (2c858 <nct_cc_send+0x84>)
   2c7fa:	f010 fa68 	bl	3ccce <z_log_minimal_printk>
		return -ENOTSUP;
   2c7fe:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2c802:	e7f1      	b.n	2c7e8 <nct_cc_send+0x14>
	struct mqtt_publish_param publish = {
   2c804:	2210      	movs	r2, #16
   2c806:	2100      	movs	r1, #0
   2c808:	a802      	add	r0, sp, #8
   2c80a:	f014 fefa 	bl	41602 <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   2c80e:	230c      	movs	r3, #12
   2c810:	435d      	muls	r5, r3
   2c812:	4a12      	ldr	r2, [pc, #72]	; (2c85c <nct_cc_send+0x88>)
   2c814:	1953      	adds	r3, r2, r5
	struct mqtt_publish_param publish = {
   2c816:	5952      	ldr	r2, [r2, r5]
   2c818:	9200      	str	r2, [sp, #0]
   2c81a:	685a      	ldr	r2, [r3, #4]
   2c81c:	7a1b      	ldrb	r3, [r3, #8]
   2c81e:	9201      	str	r2, [sp, #4]
   2c820:	f88d 3008 	strb.w	r3, [sp, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2c824:	6823      	ldr	r3, [r4, #0]
   2c826:	b11b      	cbz	r3, 2c830 <nct_cc_send+0x5c>
   2c828:	6862      	ldr	r2, [r4, #4]
   2c82a:	b10a      	cbz	r2, 2c830 <nct_cc_send+0x5c>
		publish.message.payload.len = cc_data->data.len;
   2c82c:	e9cd 2303 	strd	r2, r3, [sp, #12]
	publish.message_id = get_message_id(cc_data->message_id);
   2c830:	8a20      	ldrh	r0, [r4, #16]
   2c832:	f7ff fbcd 	bl	2bfd0 <get_message_id>
	int err = mqtt_publish(&nct.client, &publish);
   2c836:	4669      	mov	r1, sp
	publish.message_id = get_message_id(cc_data->message_id);
   2c838:	f8ad 0014 	strh.w	r0, [sp, #20]
	int err = mqtt_publish(&nct.client, &publish);
   2c83c:	4808      	ldr	r0, [pc, #32]	; (2c860 <nct_cc_send+0x8c>)
   2c83e:	f011 fdf6 	bl	3e42e <mqtt_publish>
	if (err) {
   2c842:	4604      	mov	r4, r0
   2c844:	2800      	cmp	r0, #0
   2c846:	d0cf      	beq.n	2c7e8 <nct_cc_send+0x14>
		LOG_ERR("mqtt_publish failed %d", err);
   2c848:	4602      	mov	r2, r0
   2c84a:	2145      	movs	r1, #69	; 0x45
   2c84c:	4805      	ldr	r0, [pc, #20]	; (2c864 <nct_cc_send+0x90>)
   2c84e:	f010 fa3e 	bl	3ccce <z_log_minimal_printk>
   2c852:	e7c9      	b.n	2c7e8 <nct_cc_send+0x14>
   2c854:	00048ad1 	.word	0x00048ad1
   2c858:	00048ae6 	.word	0x00048ae6
   2c85c:	2001a0dc 	.word	0x2001a0dc
   2c860:	20019594 	.word	0x20019594
   2c864:	00048af7 	.word	0x00048af7

0002c868 <nct_dc_endpoint_set>:

void nct_dc_endpoint_set(const struct nrf_cloud_data *tx_endp,
			 const struct nrf_cloud_data *rx_endp,
			 const struct nrf_cloud_data *bulk_endp,
			 const struct nrf_cloud_data *m_endp)
{
   2c868:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
   2c86c:	4680      	mov	r8, r0
   2c86e:	460f      	mov	r7, r1
   2c870:	4616      	mov	r6, r2
   2c872:	461d      	mov	r5, r3
	LOG_DBG("nct_dc_endpoint_set");

	/* In case the endpoint was previous set, free and reset
	 * before copying new one.
	 */
	dc_endpoint_free();
   2c874:	f7ff fc8a 	bl	2c18c <dc_endpoint_free>

	nct.dc_tx_endp.utf8 = (const uint8_t *)tx_endp->ptr;
   2c878:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2c87c:	4814      	ldr	r0, [pc, #80]	; (2c8d0 <nct_dc_endpoint_set+0x68>)
   2c87e:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	nct.dc_tx_endp.size = tx_endp->len;
   2c882:	f8d8 3000 	ldr.w	r3, [r8]
   2c886:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

	nct.dc_rx_endp.utf8 = (const uint8_t *)rx_endp->ptr;
   2c88a:	687b      	ldr	r3, [r7, #4]
   2c88c:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	nct.dc_rx_endp.size = rx_endp->len;
   2c890:	683b      	ldr	r3, [r7, #0]
   2c892:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0

	nct.dc_bulk_endp.utf8 = (const uint8_t *)bulk_endp->ptr;
   2c896:	6873      	ldr	r3, [r6, #4]
   2c898:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
	nct.dc_bulk_endp.size = bulk_endp->len;
   2c89c:	6833      	ldr	r3, [r6, #0]
   2c89e:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0

	if (m_endp != NULL) {
   2c8a2:	b19d      	cbz	r5, 2c8cc <nct_dc_endpoint_set+0x64>
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2c8a4:	686b      	ldr	r3, [r5, #4]
		nct.dc_m_endp.size = m_endp->len;
#if defined(CONFIG_NRF_CLOUD_FOTA)
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2c8a6:	f100 02d4 	add.w	r2, r0, #212	; 0xd4
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2c8aa:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
		nct.dc_m_endp.size = m_endp->len;
   2c8ae:	682b      	ldr	r3, [r5, #0]
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2c8b0:	3024      	adds	r0, #36	; 0x24
		nct.dc_m_endp.size = m_endp->len;
   2c8b2:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2c8b6:	4b07      	ldr	r3, [pc, #28]	; (2c8d4 <nct_dc_endpoint_set+0x6c>)
   2c8b8:	6819      	ldr	r1, [r3, #0]
   2c8ba:	f002 ffad 	bl	2f818 <nrf_cloud_fota_endpoint_set_and_report>
			client_id_buf, &nct.dc_m_endp);
		if (persistent_session) {
   2c8be:	4b06      	ldr	r3, [pc, #24]	; (2c8d8 <nct_dc_endpoint_set+0x70>)
   2c8c0:	781b      	ldrb	r3, [r3, #0]
   2c8c2:	b11b      	cbz	r3, 2c8cc <nct_dc_endpoint_set+0x64>
			 */
			(void)nrf_cloud_fota_update_check();
		}
#endif
	}
}
   2c8c4:	e8bd 41e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, lr}
			(void)nrf_cloud_fota_update_check();
   2c8c8:	f003 b818 	b.w	2f8fc <nrf_cloud_fota_update_check>
}
   2c8cc:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
   2c8d0:	20019570 	.word	0x20019570
   2c8d4:	2001956c 	.word	0x2001956c
   2c8d8:	2001c90d 	.word	0x2001c90d

0002c8dc <nct_dc_endpoint_get>:

void nct_dc_endpoint_get(struct nrf_cloud_data *const tx_endp,
			 struct nrf_cloud_data *const rx_endp,
			 struct nrf_cloud_data *const bulk_endp,
			 struct nrf_cloud_data *const m_endp)
{
   2c8dc:	b530      	push	{r4, r5, lr}
	LOG_DBG("nct_dc_endpoint_get");

	tx_endp->ptr = nct.dc_tx_endp.utf8;
   2c8de:	4c0e      	ldr	r4, [pc, #56]	; (2c918 <nct_dc_endpoint_get+0x3c>)
   2c8e0:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
   2c8e4:	6045      	str	r5, [r0, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   2c8e6:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
   2c8ea:	6005      	str	r5, [r0, #0]

	rx_endp->ptr = nct.dc_rx_endp.utf8;
   2c8ec:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   2c8f0:	6048      	str	r0, [r1, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   2c8f2:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   2c8f6:	6008      	str	r0, [r1, #0]

	if (bulk_endp != NULL) {
   2c8f8:	b12a      	cbz	r2, 2c906 <nct_dc_endpoint_get+0x2a>
		bulk_endp->ptr = nct.dc_bulk_endp.utf8;
   2c8fa:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
   2c8fe:	6051      	str	r1, [r2, #4]
		bulk_endp->len = nct.dc_bulk_endp.size;
   2c900:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   2c904:	6011      	str	r1, [r2, #0]
	}

	if (m_endp != NULL) {
   2c906:	b12b      	cbz	r3, 2c914 <nct_dc_endpoint_get+0x38>
		m_endp->ptr = nct.dc_m_endp.utf8;
   2c908:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
   2c90c:	605a      	str	r2, [r3, #4]
		m_endp->len = nct.dc_m_endp.size;
   2c90e:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   2c912:	601a      	str	r2, [r3, #0]
	}
}
   2c914:	bd30      	pop	{r4, r5, pc}
   2c916:	bf00      	nop
   2c918:	20019570 	.word	0x20019570

0002c91c <nct_dc_connect>:

int nct_dc_connect(void)
{
   2c91c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   2c91e:	480a      	ldr	r0, [pc, #40]	; (2c948 <nct_dc_connect+0x2c>)
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_MSG_ID_DC_SUB
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2c920:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   2c922:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
	return mqtt_subscribe(&nct.client, &subscription_list);
   2c926:	3024      	adds	r0, #36	; 0x24
	struct mqtt_topic subscribe_topic = {
   2c928:	9303      	str	r3, [sp, #12]
   2c92a:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
   2c92e:	9304      	str	r3, [sp, #16]
   2c930:	2301      	movs	r3, #1
   2c932:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   2c936:	ab03      	add	r3, sp, #12
   2c938:	9301      	str	r3, [sp, #4]
   2c93a:	4b04      	ldr	r3, [pc, #16]	; (2c94c <nct_dc_connect+0x30>)
   2c93c:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2c93e:	f011 fe08 	bl	3e552 <mqtt_subscribe>
}
   2c942:	b007      	add	sp, #28
   2c944:	f85d fb04 	ldr.w	pc, [sp], #4
   2c948:	20019570 	.word	0x20019570
   2c94c:	00650001 	.word	0x00650001

0002c950 <nct_dc_bulk_send>:
{
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
}

int nct_dc_bulk_send(const struct nct_dc_data *dc_data, enum mqtt_qos qos)
{
   2c950:	b530      	push	{r4, r5, lr}
   2c952:	460d      	mov	r5, r1
	if (dc_data == NULL) {
   2c954:	4604      	mov	r4, r0
{
   2c956:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   2c958:	b308      	cbz	r0, 2c99e <nct_dc_bulk_send+0x4e>
	if (qos != MQTT_QOS_0_AT_MOST_ONCE && qos != MQTT_QOS_1_AT_LEAST_ONCE) {
   2c95a:	2901      	cmp	r1, #1
   2c95c:	d81f      	bhi.n	2c99e <nct_dc_bulk_send+0x4e>
	struct mqtt_publish_param publish = {
   2c95e:	2210      	movs	r2, #16
   2c960:	2100      	movs	r1, #0
   2c962:	a802      	add	r0, sp, #8
   2c964:	f014 fe4d 	bl	41602 <memset>
		.message.topic.topic.utf8 = nct.dc_bulk_endp.utf8,
   2c968:	4b0e      	ldr	r3, [pc, #56]	; (2c9a4 <nct_dc_bulk_send+0x54>)
	struct mqtt_publish_param publish = {
   2c96a:	f88d 5008 	strb.w	r5, [sp, #8]
   2c96e:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
   2c972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2c976:	9200      	str	r2, [sp, #0]
   2c978:	9301      	str	r3, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2c97a:	6823      	ldr	r3, [r4, #0]
   2c97c:	b11b      	cbz	r3, 2c986 <nct_dc_bulk_send+0x36>
   2c97e:	6862      	ldr	r2, [r4, #4]
   2c980:	b10a      	cbz	r2, 2c986 <nct_dc_bulk_send+0x36>
		publish.message.payload.len = dc_data->data.len;
   2c982:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (qos != MQTT_QOS_0_AT_MOST_ONCE) {
   2c986:	b125      	cbz	r5, 2c992 <nct_dc_bulk_send+0x42>
		publish.message_id = get_message_id(dc_data->message_id);
   2c988:	8a20      	ldrh	r0, [r4, #16]
   2c98a:	f7ff fb21 	bl	2bfd0 <get_message_id>
   2c98e:	f8ad 0014 	strh.w	r0, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2c992:	4669      	mov	r1, sp
   2c994:	4804      	ldr	r0, [pc, #16]	; (2c9a8 <nct_dc_bulk_send+0x58>)
   2c996:	f011 fd4a 	bl	3e42e <mqtt_publish>
	return bulk_send(dc_data, qos);
}
   2c99a:	b007      	add	sp, #28
   2c99c:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c99e:	f06f 0015 	mvn.w	r0, #21
	return bulk_send(dc_data, qos);
   2c9a2:	e7fa      	b.n	2c99a <nct_dc_bulk_send+0x4a>
   2c9a4:	20019570 	.word	0x20019570
   2c9a8:	20019594 	.word	0x20019594

0002c9ac <nct_dc_disconnect>:

int nct_dc_disconnect(void)
{
   2c9ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int ret;

	LOG_DBG("nct_dc_disconnect");

	const struct mqtt_subscription_list subscription_list = {
   2c9ae:	466b      	mov	r3, sp
   2c9b0:	4a0c      	ldr	r2, [pc, #48]	; (2c9e4 <nct_dc_disconnect+0x38>)
   2c9b2:	e892 0003 	ldmia.w	r2, {r0, r1}
   2c9b6:	e883 0003 	stmia.w	r3, {r0, r1}
		.list = (struct mqtt_topic *)&nct.dc_rx_endp,
		.list_count = 1,
		.message_id = NCT_MSG_ID_DC_UNSUB
	};

	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   2c9ba:	4619      	mov	r1, r3
   2c9bc:	480a      	ldr	r0, [pc, #40]	; (2c9e8 <nct_dc_disconnect+0x3c>)
   2c9be:	f011 fdee 	bl	3e59e <mqtt_unsubscribe>
   2c9c2:	4604      	mov	r4, r0

#if defined(CONFIG_NRF_CLOUD_FOTA)
	int err = nrf_cloud_fota_unsubscribe();
   2c9c4:	f002 ff62 	bl	2f88c <nrf_cloud_fota_unsubscribe>

	if (err) {
   2c9c8:	4605      	mov	r5, r0
   2c9ca:	b138      	cbz	r0, 2c9dc <nct_dc_disconnect+0x30>
		LOG_ERR("FOTA MQTT unsubscribe failed: %d", err);
   2c9cc:	4602      	mov	r2, r0
   2c9ce:	2145      	movs	r1, #69	; 0x45
   2c9d0:	4806      	ldr	r0, [pc, #24]	; (2c9ec <nct_dc_disconnect+0x40>)
   2c9d2:	f010 f97c 	bl	3ccce <z_log_minimal_printk>
		if (ret == 0) {
   2c9d6:	2c00      	cmp	r4, #0
   2c9d8:	bf08      	it	eq
   2c9da:	462c      	moveq	r4, r5
		}
	}
#endif

	return ret;
}
   2c9dc:	4620      	mov	r0, r4
   2c9de:	b003      	add	sp, #12
   2c9e0:	bd30      	pop	{r4, r5, pc}
   2c9e2:	bf00      	nop
   2c9e4:	000429e4 	.word	0x000429e4
   2c9e8:	20019594 	.word	0x20019594
   2c9ec:	00048b13 	.word	0x00048b13

0002c9f0 <nct_disconnect>:

int nct_disconnect(void)
{
   2c9f0:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");

	dc_endpoint_free();
   2c9f2:	f7ff fbcb 	bl	2c18c <dc_endpoint_free>
	return mqtt_disconnect(&nct.client);
}
   2c9f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   2c9fa:	4801      	ldr	r0, [pc, #4]	; (2ca00 <nct_disconnect+0x10>)
   2c9fc:	f011 bd81 	b.w	3e502 <mqtt_disconnect>
   2ca00:	20019594 	.word	0x20019594

0002ca04 <nct_process>:

int nct_process(void)
{
   2ca04:	b530      	push	{r4, r5, lr}
	int err;
	int ret;

	err = mqtt_input(&nct.client);
   2ca06:	4d21      	ldr	r5, [pc, #132]	; (2ca8c <nct_process+0x88>)
{
   2ca08:	b085      	sub	sp, #20
	err = mqtt_input(&nct.client);
   2ca0a:	f105 0024 	add.w	r0, r5, #36	; 0x24
   2ca0e:	f011 fe54 	bl	3e6ba <mqtt_input>
	if (err) {
   2ca12:	4604      	mov	r4, r0
   2ca14:	b320      	cbz	r0, 2ca60 <nct_process+0x5c>
		LOG_ERR("MQTT input error: %d", err);
   2ca16:	4602      	mov	r2, r0
   2ca18:	2145      	movs	r1, #69	; 0x45
   2ca1a:	481d      	ldr	r0, [pc, #116]	; (2ca90 <nct_process+0x8c>)
   2ca1c:	f010 f957 	bl	3ccce <z_log_minimal_printk>
		if (err != -ENOTCONN) {
   2ca20:	f114 0f80 	cmn.w	r4, #128	; 0x80
   2ca24:	d119      	bne.n	2ca5a <nct_process+0x56>
		} else {
			return err;
		}
	}

	ret = nct_disconnect();
   2ca26:	f7ff ffe3 	bl	2c9f0 <nct_disconnect>
	if (ret) {
   2ca2a:	4602      	mov	r2, r0
   2ca2c:	b118      	cbz	r0, 2ca36 <nct_process+0x32>
		LOG_ERR("Error disconnecting from cloud: %d", ret);
   2ca2e:	2145      	movs	r1, #69	; 0x45
   2ca30:	4818      	ldr	r0, [pc, #96]	; (2ca94 <nct_process+0x90>)
   2ca32:	f010 f94c 	bl	3ccce <z_log_minimal_printk>
	}

	struct nct_evt evt = { .status = err };
   2ca36:	2300      	movs	r3, #0
   2ca38:	e9cd 3302 	strd	r3, r3, [sp, #8]

	evt.type = NCT_EVT_DISCONNECTED;
   2ca3c:	230a      	movs	r3, #10
	ret = nct_input(&evt);
   2ca3e:	a801      	add	r0, sp, #4
	struct nct_evt evt = { .status = err };
   2ca40:	9401      	str	r4, [sp, #4]
	evt.type = NCT_EVT_DISCONNECTED;
   2ca42:	f88d 300c 	strb.w	r3, [sp, #12]
	ret = nct_input(&evt);
   2ca46:	f7ff f85d 	bl	2bb04 <nct_input>
	if (ret) {
   2ca4a:	4605      	mov	r5, r0
   2ca4c:	b128      	cbz	r0, 2ca5a <nct_process+0x56>
		LOG_ERR("Error sending event to application: %d", err);
   2ca4e:	4622      	mov	r2, r4
   2ca50:	2145      	movs	r1, #69	; 0x45
   2ca52:	4811      	ldr	r0, [pc, #68]	; (2ca98 <nct_process+0x94>)
   2ca54:	f010 f93b 	bl	3ccce <z_log_minimal_printk>
   2ca58:	462c      	mov	r4, r5
		err = ret;
	}
	return err;
}
   2ca5a:	4620      	mov	r0, r4
   2ca5c:	b005      	add	sp, #20
   2ca5e:	bd30      	pop	{r4, r5, pc}
	} else if (nct.client.unacked_ping) {
   2ca60:	f995 30a7 	ldrsb.w	r3, [r5, #167]	; 0xa7
   2ca64:	b97b      	cbnz	r3, 2ca86 <nct_process+0x82>
		err = mqtt_live(&nct.client);
   2ca66:	f105 0024 	add.w	r0, r5, #36	; 0x24
   2ca6a:	f011 fde8 	bl	3e63e <mqtt_live>
		if (err && (err != -EAGAIN)) {
   2ca6e:	4604      	mov	r4, r0
   2ca70:	2800      	cmp	r0, #0
   2ca72:	d0f2      	beq.n	2ca5a <nct_process+0x56>
   2ca74:	f110 0f0b 	cmn.w	r0, #11
   2ca78:	d0ef      	beq.n	2ca5a <nct_process+0x56>
			LOG_ERR("MQTT ping error: %d", err);
   2ca7a:	4602      	mov	r2, r0
   2ca7c:	2145      	movs	r1, #69	; 0x45
   2ca7e:	4807      	ldr	r0, [pc, #28]	; (2ca9c <nct_process+0x98>)
   2ca80:	f010 f925 	bl	3ccce <z_log_minimal_printk>
   2ca84:	e7cf      	b.n	2ca26 <nct_process+0x22>
		err = -ECONNRESET;
   2ca86:	f06f 0467 	mvn.w	r4, #103	; 0x67
   2ca8a:	e7cc      	b.n	2ca26 <nct_process+0x22>
   2ca8c:	20019570 	.word	0x20019570
   2ca90:	00048b39 	.word	0x00048b39
   2ca94:	00048b6c 	.word	0x00048b6c
   2ca98:	00048b94 	.word	0x00048b94
   2ca9c:	00048b53 	.word	0x00048b53

0002caa0 <nct_keepalive_time_left>:

int nct_keepalive_time_left(void)
{
	return mqtt_keepalive_time_left(&nct.client);
   2caa0:	4801      	ldr	r0, [pc, #4]	; (2caa8 <nct_keepalive_time_left+0x8>)
   2caa2:	f011 bdf3 	b.w	3e68c <mqtt_keepalive_time_left>
   2caa6:	bf00      	nop
   2caa8:	20019594 	.word	0x20019594

0002caac <nct_socket_get>:
}

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
}
   2caac:	4b01      	ldr	r3, [pc, #4]	; (2cab4 <nct_socket_get+0x8>)
   2caae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2cab0:	4770      	bx	lr
   2cab2:	bf00      	nop
   2cab4:	20019570 	.word	0x20019570

0002cab8 <send_to_modem>:
	return nrf_cloud_agps_request(&request);
}

static int send_to_modem(void *data, size_t data_len, uint16_t type)
{
	if (agps_print_enabled) {
   2cab8:	4b08      	ldr	r3, [pc, #32]	; (2cadc <send_to_modem+0x24>)
{
   2caba:	b570      	push	{r4, r5, r6, lr}
	if (agps_print_enabled) {
   2cabc:	781b      	ldrb	r3, [r3, #0]
{
   2cabe:	4604      	mov	r4, r0
   2cac0:	460e      	mov	r6, r1
   2cac2:	4615      	mov	r5, r2
	if (agps_print_enabled) {
   2cac4:	b11b      	cbz	r3, 2cace <send_to_modem+0x16>
		agps_print(type, data);
   2cac6:	4601      	mov	r1, r0
   2cac8:	b2d0      	uxtb	r0, r2
   2caca:	f000 fb73 	bl	2d1b4 <agps_print>
	}

	return nrf_modem_gnss_agps_write(data, data_len, type);
   2cace:	462a      	mov	r2, r5
   2cad0:	4631      	mov	r1, r6
   2cad2:	4620      	mov	r0, r4
}
   2cad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_modem_gnss_agps_write(data, data_len, type);
   2cad8:	f014 bac1 	b.w	4105e <nrf_modem_gnss_agps_write>
   2cadc:	2001c956 	.word	0x2001c956

0002cae0 <nrf_cloud_agps_request>:
{
   2cae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2cae4:	4605      	mov	r5, r0
	if (nfsm_get_current_state() != STATE_DC_CONNECTED) {
   2cae6:	f7fe fdc5 	bl	2b674 <nfsm_get_current_state>
   2caea:	2809      	cmp	r0, #9
   2caec:	f040 80b5 	bne.w	2cc5a <nrf_cloud_agps_request+0x17a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2caf0:	2400      	movs	r4, #0
   2caf2:	4e5b      	ldr	r6, [pc, #364]	; (2cc60 <nrf_cloud_agps_request+0x180>)
   2caf4:	e8d6 3fef 	ldaex	r3, [r6]
   2caf8:	e8c6 4fe2 	stlex	r2, r4, [r6]
   2cafc:	2a00      	cmp	r2, #0
   2cafe:	d1f9      	bne.n	2caf4 <nrf_cloud_agps_request+0x14>
	return z_impl_k_mutex_lock(mutex, timeout);
   2cb00:	f04f 32ff 	mov.w	r2, #4294967295
   2cb04:	f04f 33ff 	mov.w	r3, #4294967295
   2cb08:	4856      	ldr	r0, [pc, #344]	; (2cc64 <nrf_cloud_agps_request+0x184>)
   2cb0a:	f009 ff6f 	bl	369ec <z_impl_k_mutex_lock>
	memset(&processed, 0, sizeof(processed));
   2cb0e:	4b56      	ldr	r3, [pc, #344]	; (2cc68 <nrf_cloud_agps_request+0x188>)
   2cb10:	e9c3 4400 	strd	r4, r4, [r3]
   2cb14:	609c      	str	r4, [r3, #8]
	return z_impl_k_mutex_unlock(mutex);
   2cb16:	4853      	ldr	r0, [pc, #332]	; (2cc64 <nrf_cloud_agps_request+0x184>)
   2cb18:	f00a f83a 	bl	36b90 <z_impl_k_mutex_unlock>
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST) {
   2cb1c:	68ab      	ldr	r3, [r5, #8]
   2cb1e:	f013 0401 	ands.w	r4, r3, #1
		types[type_count++] = NRF_CLOUD_AGPS_UTC_PARAMETERS;
   2cb22:	bf1c      	itt	ne
   2cb24:	2201      	movne	r2, #1
   2cb26:	f88d 2004 	strbne.w	r2, [sp, #4]
	if (ephem) {
   2cb2a:	682a      	ldr	r2, [r5, #0]
   2cb2c:	b12a      	cbz	r2, 2cb3a <nrf_cloud_agps_request+0x5a>
		types[type_count++] = NRF_CLOUD_AGPS_EPHEMERIDES;
   2cb2e:	2102      	movs	r1, #2
   2cb30:	aa04      	add	r2, sp, #16
   2cb32:	4422      	add	r2, r4
   2cb34:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2cb38:	3401      	adds	r4, #1
	if (request->sv_mask_alm) {
   2cb3a:	686a      	ldr	r2, [r5, #4]
   2cb3c:	b12a      	cbz	r2, 2cb4a <nrf_cloud_agps_request+0x6a>
		types[type_count++] = NRF_CLOUD_AGPS_ALMANAC;
   2cb3e:	2103      	movs	r1, #3
   2cb40:	aa04      	add	r2, sp, #16
   2cb42:	4422      	add	r2, r4
   2cb44:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2cb48:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST) {
   2cb4a:	079d      	lsls	r5, r3, #30
   2cb4c:	d505      	bpl.n	2cb5a <nrf_cloud_agps_request+0x7a>
		types[type_count++] = NRF_CLOUD_AGPS_KLOBUCHAR_CORRECTION;
   2cb4e:	2104      	movs	r1, #4
   2cb50:	aa04      	add	r2, sp, #16
   2cb52:	4422      	add	r2, r4
   2cb54:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2cb58:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_NEQUICK_REQUEST) {
   2cb5a:	0758      	lsls	r0, r3, #29
   2cb5c:	d505      	bpl.n	2cb6a <nrf_cloud_agps_request+0x8a>
		types[type_count++] = NRF_CLOUD_AGPS_NEQUICK_CORRECTION;
   2cb5e:	2105      	movs	r1, #5
   2cb60:	aa04      	add	r2, sp, #16
   2cb62:	4422      	add	r2, r4
   2cb64:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2cb68:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   2cb6a:	0719      	lsls	r1, r3, #28
   2cb6c:	d50b      	bpl.n	2cb86 <nrf_cloud_agps_request+0xa6>
		types[type_count++] = NRF_CLOUD_AGPS_GPS_TOWS;
   2cb6e:	2006      	movs	r0, #6
   2cb70:	a904      	add	r1, sp, #16
   2cb72:	4421      	add	r1, r4
   2cb74:	1c62      	adds	r2, r4, #1
   2cb76:	f801 0c0c 	strb.w	r0, [r1, #-12]
		types[type_count++] = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   2cb7a:	a904      	add	r1, sp, #16
   2cb7c:	440a      	add	r2, r1
   2cb7e:	2107      	movs	r1, #7
   2cb80:	3402      	adds	r4, #2
   2cb82:	f802 1c0c 	strb.w	r1, [r2, #-12]
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   2cb86:	06da      	lsls	r2, r3, #27
   2cb88:	d505      	bpl.n	2cb96 <nrf_cloud_agps_request+0xb6>
		types[type_count++] = NRF_CLOUD_AGPS_LOCATION;
   2cb8a:	2108      	movs	r1, #8
   2cb8c:	aa04      	add	r2, sp, #16
   2cb8e:	4422      	add	r2, r4
   2cb90:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2cb94:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST) {
   2cb96:	069b      	lsls	r3, r3, #26
   2cb98:	d51f      	bpl.n	2cbda <nrf_cloud_agps_request+0xfa>
		types[type_count++] = NRF_CLOUD_AGPS_INTEGRITY;
   2cb9a:	2209      	movs	r2, #9
   2cb9c:	ab04      	add	r3, sp, #16
   2cb9e:	4423      	add	r3, r4
   2cba0:	f803 2c0c 	strb.w	r2, [r3, #-12]
   2cba4:	3401      	adds	r4, #1
	agps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_AGPS,
   2cba6:	4931      	ldr	r1, [pc, #196]	; (2cc6c <nrf_cloud_agps_request+0x18c>)
   2cba8:	4831      	ldr	r0, [pc, #196]	; (2cc70 <nrf_cloud_agps_request+0x190>)
   2cbaa:	f7fd fb9f 	bl	2a2ec <json_create_req_obj>
	data_obj = cJSON_AddObjectToObject(agps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2cbae:	4931      	ldr	r1, [pc, #196]	; (2cc74 <nrf_cloud_agps_request+0x194>)
	agps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_AGPS,
   2cbb0:	4607      	mov	r7, r0
	data_obj = cJSON_AddObjectToObject(agps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2cbb2:	f013 f9a9 	bl	3ff08 <cJSON_AddObjectToObject>
   2cbb6:	4680      	mov	r8, r0
	if (!agps_req_obj || !data_obj) {
   2cbb8:	2f00      	cmp	r7, #0
   2cbba:	d03d      	beq.n	2cc38 <nrf_cloud_agps_request+0x158>
   2cbbc:	2800      	cmp	r0, #0
   2cbbe:	d03b      	beq.n	2cc38 <nrf_cloud_agps_request+0x158>
	err = nrf_cloud_json_add_modem_info(data_obj);
   2cbc0:	f7fd fbcc 	bl	2a35c <nrf_cloud_json_add_modem_info>
	if (err) {
   2cbc4:	4605      	mov	r5, r0
   2cbc6:	b198      	cbz	r0, 2cbf0 <nrf_cloud_agps_request+0x110>
		LOG_ERR("Failed to add modem info to A-GPS request: %d", err);
   2cbc8:	4602      	mov	r2, r0
   2cbca:	2145      	movs	r1, #69	; 0x45
   2cbcc:	482a      	ldr	r0, [pc, #168]	; (2cc78 <nrf_cloud_agps_request+0x198>)
   2cbce:	f010 f87e 	bl	3ccce <z_log_minimal_printk>
	cJSON_Delete(agps_req_obj);
   2cbd2:	4638      	mov	r0, r7
   2cbd4:	f005 fa4e 	bl	32074 <cJSON_Delete>
	return err;
   2cbd8:	e006      	b.n	2cbe8 <nrf_cloud_agps_request+0x108>
	if (type_count == 0) {
   2cbda:	2c00      	cmp	r4, #0
   2cbdc:	d1e3      	bne.n	2cba6 <nrf_cloud_agps_request+0xc6>
		LOG_INF("No A-GPS data types requested");
   2cbde:	2149      	movs	r1, #73	; 0x49
   2cbe0:	4826      	ldr	r0, [pc, #152]	; (2cc7c <nrf_cloud_agps_request+0x19c>)
   2cbe2:	f010 f874 	bl	3ccce <z_log_minimal_printk>
		return 0;
   2cbe6:	4625      	mov	r5, r4
}
   2cbe8:	4628      	mov	r0, r5
   2cbea:	b004      	add	sp, #16
   2cbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	array = cJSON_AddArrayToObject(obj, AGPS_JSON_TYPES_KEY);
   2cbf0:	4640      	mov	r0, r8
   2cbf2:	4923      	ldr	r1, [pc, #140]	; (2cc80 <nrf_cloud_agps_request+0x1a0>)
   2cbf4:	f013 f95e 	bl	3feb4 <cJSON_AddArrayToObject>
	if (!array) {
   2cbf8:	4681      	mov	r9, r0
   2cbfa:	b1b8      	cbz	r0, 2cc2c <nrf_cloud_agps_request+0x14c>
   2cbfc:	f10d 0a04 	add.w	sl, sp, #4
		cJSON_AddItemToArray(array, cJSON_CreateNumber(types[i]));
   2cc00:	f81a 0b01 	ldrb.w	r0, [sl], #1
   2cc04:	f7ef fd5e 	bl	1c6c4 <__aeabi_ui2d>
   2cc08:	f7f1 fd52 	bl	1e6b0 <cJSON_CreateNumber>
	for (size_t i = 0; i < type_count; i++) {
   2cc0c:	3501      	adds	r5, #1
		cJSON_AddItemToArray(array, cJSON_CreateNumber(types[i]));
   2cc0e:	4601      	mov	r1, r0
   2cc10:	4648      	mov	r0, r9
   2cc12:	f013 f898 	bl	3fd46 <cJSON_AddItemToArray>
	for (size_t i = 0; i < type_count; i++) {
   2cc16:	42a5      	cmp	r5, r4
   2cc18:	d3f2      	bcc.n	2cc00 <nrf_cloud_agps_request+0x120>
	if (cJSON_GetArraySize(array) != type_count) {
   2cc1a:	4648      	mov	r0, r9
   2cc1c:	f013 f87b 	bl	3fd16 <cJSON_GetArraySize>
   2cc20:	42a0      	cmp	r0, r4
   2cc22:	d00c      	beq.n	2cc3e <nrf_cloud_agps_request+0x15e>
		cJSON_DeleteItemFromObject(obj, AGPS_JSON_TYPES_KEY);
   2cc24:	4640      	mov	r0, r8
   2cc26:	4916      	ldr	r1, [pc, #88]	; (2cc80 <nrf_cloud_agps_request+0x1a0>)
   2cc28:	f013 f8bb 	bl	3fda2 <cJSON_DeleteItemFromObject>
		LOG_ERR("Failed to add types array to A-GPS request %d", err);
   2cc2c:	f06f 020b 	mvn.w	r2, #11
   2cc30:	2145      	movs	r1, #69	; 0x45
   2cc32:	4814      	ldr	r0, [pc, #80]	; (2cc84 <nrf_cloud_agps_request+0x1a4>)
   2cc34:	f010 f84b 	bl	3ccce <z_log_minimal_printk>
		err = -ENOMEM;
   2cc38:	f06f 050b 	mvn.w	r5, #11
   2cc3c:	e7c9      	b.n	2cbd2 <nrf_cloud_agps_request+0xf2>
	err = json_send_to_cloud(agps_req_obj);
   2cc3e:	4638      	mov	r0, r7
   2cc40:	f7fd ff18 	bl	2aa74 <json_send_to_cloud>
	if (!err) {
   2cc44:	4605      	mov	r5, r0
   2cc46:	2800      	cmp	r0, #0
   2cc48:	d1c3      	bne.n	2cbd2 <nrf_cloud_agps_request+0xf2>
   2cc4a:	2301      	movs	r3, #1
   2cc4c:	e8d6 2fef 	ldaex	r2, [r6]
   2cc50:	e8c6 3fe1 	stlex	r1, r3, [r6]
   2cc54:	2900      	cmp	r1, #0
   2cc56:	d0bc      	beq.n	2cbd2 <nrf_cloud_agps_request+0xf2>
   2cc58:	e7f8      	b.n	2cc4c <nrf_cloud_agps_request+0x16c>
		return -EACCES;
   2cc5a:	f06f 050c 	mvn.w	r5, #12
   2cc5e:	e7c3      	b.n	2cbe8 <nrf_cloud_agps_request+0x108>
   2cc60:	2001a110 	.word	0x2001a110
   2cc64:	20014f68 	.word	0x20014f68
   2cc68:	2001a104 	.word	0x2001a104
   2cc6c:	000437fe 	.word	0x000437fe
   2cc70:	00048bf7 	.word	0x00048bf7
   2cc74:	000438da 	.word	0x000438da
   2cc78:	00048bfc 	.word	0x00048bfc
   2cc7c:	00048bd4 	.word	0x00048bd4
   2cc80:	00048c2f 	.word	0x00048c2f
   2cc84:	00048c35 	.word	0x00048c35

0002cc88 <nrf_cloud_agps_process>:

	return len;
}

int nrf_cloud_agps_process(const char *buf, size_t buf_len)
{
   2cc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cc8c:	4607      	mov	r7, r0
   2cc8e:	b0cb      	sub	sp, #300	; 0x12c
   2cc90:	9100      	str	r1, [sp, #0]
	int err;
	struct nrf_cloud_apgs_element element = {0};
	struct nrf_cloud_agps_system_time sys_time = {0};
   2cc92:	228c      	movs	r2, #140	; 0x8c
   2cc94:	2100      	movs	r1, #0
   2cc96:	a803      	add	r0, sp, #12
   2cc98:	f014 fcb3 	bl	41602 <memset>
	uint8_t version;
#if defined(CONFIG_NRF_CLOUD_AGPS_FILTERED)
	bool ephemerides_processed = false;
#endif

	if (!buf || (buf_len == 0)) {
   2cc9c:	2f00      	cmp	r7, #0
   2cc9e:	f000 8261 	beq.w	2d164 <nrf_cloud_agps_process+0x4dc>
   2cca2:	9b00      	ldr	r3, [sp, #0]
   2cca4:	2b00      	cmp	r3, #0
   2cca6:	f000 825d 	beq.w	2d164 <nrf_cloud_agps_process+0x4dc>
	}

	/* Check for a potential A-GPS JSON error message from nRF Cloud */
	enum nrf_cloud_error nrf_err;

	err = nrf_cloud_handle_error_message(buf, NRF_CLOUD_JSON_APPID_VAL_AGPS,
   2ccaa:	4638      	mov	r0, r7
   2ccac:	4abb      	ldr	r2, [pc, #748]	; (2cf9c <nrf_cloud_agps_process+0x314>)
   2ccae:	49bc      	ldr	r1, [pc, #752]	; (2cfa0 <nrf_cloud_agps_process+0x318>)
   2ccb0:	ab02      	add	r3, sp, #8
   2ccb2:	f7fe fae1 	bl	2b278 <nrf_cloud_handle_error_message>
		NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA, &nrf_err);
	if (!err) {
   2ccb6:	b950      	cbnz	r0, 2ccce <nrf_cloud_agps_process+0x46>
		LOG_ERR("nRF Cloud returned A-GPS error: %d", nrf_err);
   2ccb8:	2145      	movs	r1, #69	; 0x45
   2ccba:	9a02      	ldr	r2, [sp, #8]
   2ccbc:	48b9      	ldr	r0, [pc, #740]	; (2cfa4 <nrf_cloud_agps_process+0x31c>)
   2ccbe:	f010 f806 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   2ccc2:	f06f 050d 	mvn.w	r5, #13

	LOG_DBG("A-GPS_inject_active UNLOCKED");
	k_sem_give(&agps_injection_active);

	return err;
}
   2ccc6:	4628      	mov	r0, r5
   2ccc8:	b04b      	add	sp, #300	; 0x12c
   2ccca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (err == -ENODATA) { /* Not a JSON message, try to parse it as A-GPS data */
   2ccce:	303d      	adds	r0, #61	; 0x3d
   2ccd0:	f040 824b 	bne.w	2d16a <nrf_cloud_agps_process+0x4e2>
	version = buf[NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_INDEX];
   2ccd4:	783e      	ldrb	r6, [r7, #0]
	if (version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) {
   2ccd6:	2e01      	cmp	r6, #1
   2ccd8:	d007      	beq.n	2ccea <nrf_cloud_agps_process+0x62>
		LOG_ERR("Cannot parse schema version: %d", version);
   2ccda:	4632      	mov	r2, r6
   2ccdc:	2145      	movs	r1, #69	; 0x45
   2ccde:	48b2      	ldr	r0, [pc, #712]	; (2cfa8 <nrf_cloud_agps_process+0x320>)
   2cce0:	f00f fff5 	bl	3ccce <z_log_minimal_printk>
		return -EBADMSG;
   2cce4:	f06f 054c 	mvn.w	r5, #76	; 0x4c
   2cce8:	e7ed      	b.n	2ccc6 <nrf_cloud_agps_process+0x3e>
	return z_impl_k_sem_take(sem, timeout);
   2ccea:	f04f 32ff 	mov.w	r2, #4294967295
   2ccee:	f04f 33ff 	mov.w	r3, #4294967295
   2ccf2:	48ae      	ldr	r0, [pc, #696]	; (2cfac <nrf_cloud_agps_process+0x324>)
   2ccf4:	f00a f908 	bl	36f08 <z_impl_k_sem_take>
	if (err) {
   2ccf8:	4605      	mov	r5, r0
   2ccfa:	2800      	cmp	r0, #0
   2ccfc:	f000 822c 	beq.w	2d158 <nrf_cloud_agps_process+0x4d0>
		LOG_ERR("A-GPS injection already active.");
   2cd00:	2145      	movs	r1, #69	; 0x45
   2cd02:	48ab      	ldr	r0, [pc, #684]	; (2cfb0 <nrf_cloud_agps_process+0x328>)
   2cd04:	f00f ffe3 	bl	3ccce <z_log_minimal_printk>
		return err;
   2cd08:	e7dd      	b.n	2ccc6 <nrf_cloud_agps_process+0x3e>
		element->type = element_type;
   2cd0a:	4aaa      	ldr	r2, [pc, #680]	; (2cfb4 <nrf_cloud_agps_process+0x32c>)
		elements_left_to_process -= 1;
   2cd0c:	3b01      	subs	r3, #1
   2cd0e:	f8aa 3000 	strh.w	r3, [sl]
		element->type = element_type;
   2cd12:	f892 8000 	ldrb.w	r8, [r2]
	size_t len = 0;
   2cd16:	2300      	movs	r3, #0
   2cd18:	e02b      	b.n	2cd72 <nrf_cloud_agps_process+0xea>
		element->utc = (struct nrf_cloud_agps_utc *)(buf + len);
   2cd1a:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_utc);
   2cd1c:	330e      	adds	r3, #14
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2cd1e:	f1b8 0f06 	cmp.w	r8, #6
		parsed_len += element_size;
   2cd22:	441e      	add	r6, r3
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2cd24:	d152      	bne.n	2cdcc <nrf_cloud_agps_process+0x144>
			memcpy(&sys_time.sv_tow[element.tow->sv_id - 1],
   2cd26:	7823      	ldrb	r3, [r4, #0]
   2cd28:	a84a      	add	r0, sp, #296	; 0x128
   2cd2a:	6821      	ldr	r1, [r4, #0]
   2cd2c:	1e5a      	subs	r2, r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2cd2e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2cd32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
   2cd36:	6019      	str	r1, [r3, #0]
			if (element.tow->flags || element.tow->tlm) {
   2cd38:	78e3      	ldrb	r3, [r4, #3]
   2cd3a:	b913      	cbnz	r3, 2cd42 <nrf_cloud_agps_process+0xba>
   2cd3c:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   2cd40:	b11b      	cbz	r3, 2cd4a <nrf_cloud_agps_process+0xc2>
				sv_mask |= 1 << (element.tow->sv_id - 1);
   2cd42:	2301      	movs	r3, #1
   2cd44:	4093      	lsls	r3, r2
   2cd46:	ea49 0903 	orr.w	r9, r9, r3
	while (parsed_len < buf_len) {
   2cd4a:	9b00      	ldr	r3, [sp, #0]
   2cd4c:	42b3      	cmp	r3, r6
   2cd4e:	f240 8121 	bls.w	2cf94 <nrf_cloud_agps_process+0x30c>
	if (elements_left_to_process == 0) {
   2cd52:	f8ba 3000 	ldrh.w	r3, [sl]
			get_next_agps_element(&element, &buf[parsed_len]);
   2cd56:	19bc      	adds	r4, r7, r6
	if (elements_left_to_process == 0) {
   2cd58:	2b00      	cmp	r3, #0
   2cd5a:	d1d6      	bne.n	2cd0a <nrf_cloud_agps_process+0x82>
		element_type = element->type;
   2cd5c:	4b95      	ldr	r3, [pc, #596]	; (2cfb4 <nrf_cloud_agps_process+0x32c>)
			(enum nrf_cloud_agps_type)buf[NRF_CLOUD_AGPS_BIN_TYPE_OFFSET];
   2cd5e:	f817 8006 	ldrb.w	r8, [r7, r6]
		element_type = element->type;
   2cd62:	f883 8000 	strb.w	r8, [r3]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2cd66:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   2cd6a:	3b01      	subs	r3, #1
		elements_left_to_process =
   2cd6c:	f8aa 3000 	strh.w	r3, [sl]
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   2cd70:	2303      	movs	r3, #3
	switch (element->type) {
   2cd72:	f108 32ff 	add.w	r2, r8, #4294967295
   2cd76:	9201      	str	r2, [sp, #4]
   2cd78:	2a08      	cmp	r2, #8
   2cd7a:	f200 810b 	bhi.w	2cf94 <nrf_cloud_agps_process+0x30c>
   2cd7e:	a101      	add	r1, pc, #4	; (adr r1, 2cd84 <nrf_cloud_agps_process+0xfc>)
   2cd80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   2cd84:	0002cd1b 	.word	0x0002cd1b
   2cd88:	0002cda9 	.word	0x0002cda9
   2cd8c:	0002cdaf 	.word	0x0002cdaf
   2cd90:	0002cdb5 	.word	0x0002cdb5
   2cd94:	0002cf95 	.word	0x0002cf95
   2cd98:	0002cdc7 	.word	0x0002cdc7
   2cd9c:	0002cdbb 	.word	0x0002cdbb
   2cda0:	0002cdc1 	.word	0x0002cdc1
   2cda4:	0002cdc7 	.word	0x0002cdc7
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2cda8:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   2cdaa:	333e      	adds	r3, #62	; 0x3e
		break;
   2cdac:	e7b7      	b.n	2cd1e <nrf_cloud_agps_process+0x96>
		element->almanac = (struct nrf_cloud_agps_almanac *)(buf + len);
   2cdae:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_almanac);
   2cdb0:	331f      	adds	r3, #31
		break;
   2cdb2:	e7b4      	b.n	2cd1e <nrf_cloud_agps_process+0x96>
			(struct nrf_cloud_agps_klobuchar *)(buf + len);
   2cdb4:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_klobuchar);
   2cdb6:	3308      	adds	r3, #8
		break;
   2cdb8:	e7b1      	b.n	2cd1e <nrf_cloud_agps_process+0x96>
			(struct nrf_cloud_agps_system_time *)(buf + len);
   2cdba:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_system_time) -
   2cdbc:	3310      	adds	r3, #16
		break;
   2cdbe:	e7ae      	b.n	2cd1e <nrf_cloud_agps_process+0x96>
		element->location = (struct nrf_cloud_agps_location *)(buf + len);
   2cdc0:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_location);
   2cdc2:	330f      	adds	r3, #15
		break;
   2cdc4:	e7ab      	b.n	2cd1e <nrf_cloud_agps_process+0x96>
			(struct nrf_cloud_agps_integrity *)(buf + len);
   2cdc6:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_integrity);
   2cdc8:	3304      	adds	r3, #4
		break;
   2cdca:	e7a8      	b.n	2cd1e <nrf_cloud_agps_process+0x96>
		} else if (element.type == NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK) {
   2cdcc:	f1b8 0f07 	cmp.w	r8, #7
   2cdd0:	d108      	bne.n	2cde4 <nrf_cloud_agps_process+0x15c>
			memcpy(&sys_time, element.time_and_tow,
   2cdd2:	6820      	ldr	r0, [r4, #0]
   2cdd4:	6861      	ldr	r1, [r4, #4]
   2cdd6:	ab03      	add	r3, sp, #12
   2cdd8:	c303      	stmia	r3!, {r0, r1}
			sys_time.sv_mask = sv_mask | element.time_and_tow->sv_mask;
   2cdda:	68a3      	ldr	r3, [r4, #8]
			element.time_and_tow = &sys_time;
   2cddc:	ac03      	add	r4, sp, #12
			sys_time.sv_mask = sv_mask | element.time_and_tow->sv_mask;
   2cdde:	ea43 0309 	orr.w	r3, r3, r9
   2cde2:	9305      	str	r3, [sp, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
   2cde4:	f04f 32ff 	mov.w	r2, #4294967295
   2cde8:	f04f 33ff 	mov.w	r3, #4294967295
   2cdec:	4658      	mov	r0, fp
   2cdee:	f009 fdfd 	bl	369ec <z_impl_k_mutex_lock>
   2cdf2:	2300      	movs	r3, #0
   2cdf4:	4a70      	ldr	r2, [pc, #448]	; (2cfb8 <nrf_cloud_agps_process+0x330>)
   2cdf6:	e8d2 1fef 	ldaex	r1, [r2]
   2cdfa:	e8c2 3fe0 	stlex	r0, r3, [r2]
   2cdfe:	2800      	cmp	r0, #0
   2ce00:	d1f9      	bne.n	2cdf6 <nrf_cloud_agps_process+0x16e>
	switch (agps_data->type) {
   2ce02:	9a01      	ldr	r2, [sp, #4]
   2ce04:	2a08      	cmp	r2, #8
   2ce06:	f200 81a0 	bhi.w	2d14a <nrf_cloud_agps_process+0x4c2>
   2ce0a:	e8df f012 	tbh	[pc, r2, lsl #1]
   2ce0e:	0009      	.short	0x0009
   2ce10:	00db002a 	.word	0x00db002a
   2ce14:	019e011e 	.word	0x019e011e
   2ce18:	013e019e 	.word	0x013e019e
   2ce1c:	01950171 	.word	0x01950171
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST;
   2ce20:	4a66      	ldr	r2, [pc, #408]	; (2cfbc <nrf_cloud_agps_process+0x334>)
   2ce22:	6893      	ldr	r3, [r2, #8]
   2ce24:	f043 0301 	orr.w	r3, r3, #1
   2ce28:	6093      	str	r3, [r2, #8]
	dst->a1		= src->utc->a1;
   2ce2a:	6823      	ldr	r3, [r4, #0]
	dst->delta_tls	= src->utc->delta_tls;
   2ce2c:	f994 000a 	ldrsb.w	r0, [r4, #10]
	dst->a1		= src->utc->a1;
   2ce30:	9326      	str	r3, [sp, #152]	; 0x98
	dst->a0		= src->utc->a0;
   2ce32:	6863      	ldr	r3, [r4, #4]
	dst->delta_tls	= src->utc->delta_tls;
   2ce34:	f88d 00a2 	strb.w	r0, [sp, #162]	; 0xa2
	dst->a0		= src->utc->a0;
   2ce38:	9327      	str	r3, [sp, #156]	; 0x9c
	dst->tot	= src->utc->tot;
   2ce3a:	7a23      	ldrb	r3, [r4, #8]
   2ce3c:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
	dst->wn_t	= src->utc->wn_t;
   2ce40:	7a63      	ldrb	r3, [r4, #9]
   2ce42:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
	dst->wn_lsf	= src->utc->wn_lsf;
   2ce46:	7ae3      	ldrb	r3, [r4, #11]
   2ce48:	f88d 30a3 	strb.w	r3, [sp, #163]	; 0xa3
	dst->dn		= src->utc->dn;
   2ce4c:	7b23      	ldrb	r3, [r4, #12]
   2ce4e:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
	dst->delta_tlsf	= src->utc->delta_tlsf;
   2ce52:	7b63      	ldrb	r3, [r4, #13]
   2ce54:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
		nrf_cloud_pgps_set_leap_seconds(utc.delta_tls);
   2ce58:	f001 fee0 	bl	2ec1c <nrf_cloud_pgps_set_leap_seconds>
		return send_to_modem(&utc, sizeof(utc),
   2ce5c:	2201      	movs	r2, #1
		return send_to_modem(&location, sizeof(location),
   2ce5e:	2110      	movs	r1, #16
   2ce60:	e088      	b.n	2cf74 <nrf_cloud_agps_process+0x2ec>
		processed.sv_mask_ephe |= (1 << (agps_data->ephemeris->sv_id - 1));
   2ce62:	2301      	movs	r3, #1
   2ce64:	7822      	ldrb	r2, [r4, #0]
   2ce66:	4955      	ldr	r1, [pc, #340]	; (2cfbc <nrf_cloud_agps_process+0x334>)
   2ce68:	1e50      	subs	r0, r2, #1
   2ce6a:	4083      	lsls	r3, r0
   2ce6c:	6808      	ldr	r0, [r1, #0]
   2ce6e:	4303      	orrs	r3, r0
   2ce70:	600b      	str	r3, [r1, #0]
		if (agps_data->ephemeris->health ==
   2ce72:	7863      	ldrb	r3, [r4, #1]
   2ce74:	2bff      	cmp	r3, #255	; 0xff
   2ce76:	f000 816d 	beq.w	2d154 <nrf_cloud_agps_process+0x4cc>
	dst->sv_id	= src->ephemeris->sv_id;
   2ce7a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->health	= src->ephemeris->health;
   2ce7e:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
	dst->iodc	= src->ephemeris->iodc;
   2ce82:	78e2      	ldrb	r2, [r4, #3]
   2ce84:	78a3      	ldrb	r3, [r4, #2]
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2ce86:	2148      	movs	r1, #72	; 0x48
	dst->iodc	= src->ephemeris->iodc;
   2ce88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ce8c:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
	dst->toc	= src->ephemeris->toc;
   2ce90:	7962      	ldrb	r2, [r4, #5]
   2ce92:	7923      	ldrb	r3, [r4, #4]
   2ce94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ce98:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
	dst->af2	= src->ephemeris->af2;
   2ce9c:	79a3      	ldrb	r3, [r4, #6]
   2ce9e:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
	dst->af1	= src->ephemeris->af1;
   2cea2:	7a22      	ldrb	r2, [r4, #8]
   2cea4:	79e3      	ldrb	r3, [r4, #7]
   2cea6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ceaa:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->af0	= src->ephemeris->af0;
   2ceae:	f8d4 3009 	ldr.w	r3, [r4, #9]
   2ceb2:	9329      	str	r3, [sp, #164]	; 0xa4
	dst->tgd	= src->ephemeris->tgd;
   2ceb4:	7b63      	ldrb	r3, [r4, #13]
   2ceb6:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
	dst->ura	= src->ephemeris->ura;
   2ceba:	7ba3      	ldrb	r3, [r4, #14]
   2cebc:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
	dst->fit_int	= src->ephemeris->fit_int;
   2cec0:	7be3      	ldrb	r3, [r4, #15]
   2cec2:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
	dst->toe	= src->ephemeris->toe;
   2cec6:	7c62      	ldrb	r2, [r4, #17]
   2cec8:	7c23      	ldrb	r3, [r4, #16]
   2ceca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cece:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
	dst->w		= src->ephemeris->w;
   2ced2:	f8d4 3012 	ldr.w	r3, [r4, #18]
   2ced6:	932c      	str	r3, [sp, #176]	; 0xb0
	dst->delta_n	= src->ephemeris->delta_n;
   2ced8:	7de2      	ldrb	r2, [r4, #23]
   2ceda:	7da3      	ldrb	r3, [r4, #22]
   2cedc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cee0:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
	dst->m0		= src->ephemeris->m0;
   2cee4:	69a3      	ldr	r3, [r4, #24]
   2cee6:	932e      	str	r3, [sp, #184]	; 0xb8
	dst->omega_dot	= src->ephemeris->omega_dot;
   2cee8:	69e3      	ldr	r3, [r4, #28]
   2ceea:	932f      	str	r3, [sp, #188]	; 0xbc
	dst->e		= src->ephemeris->e;
   2ceec:	6a23      	ldr	r3, [r4, #32]
   2ceee:	9330      	str	r3, [sp, #192]	; 0xc0
	dst->idot	= src->ephemeris->idot;
   2cef0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   2cef4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2cef8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cefc:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
	dst->sqrt_a	= src->ephemeris->sqrt_a;
   2cf00:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
   2cf04:	9332      	str	r3, [sp, #200]	; 0xc8
	dst->i0		= src->ephemeris->i0;
   2cf06:	f8d4 302a 	ldr.w	r3, [r4, #42]	; 0x2a
   2cf0a:	9333      	str	r3, [sp, #204]	; 0xcc
	dst->omega0	= src->ephemeris->omega0;
   2cf0c:	f8d4 302e 	ldr.w	r3, [r4, #46]	; 0x2e
   2cf10:	9334      	str	r3, [sp, #208]	; 0xd0
	dst->crs	= src->ephemeris->crs;
   2cf12:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   2cf16:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   2cf1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cf1e:	f8ad 30d4 	strh.w	r3, [sp, #212]	; 0xd4
	dst->cis	= src->ephemeris->cis;
   2cf22:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   2cf26:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   2cf2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cf2e:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
	dst->cus	= src->ephemeris->cus;
   2cf32:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   2cf36:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   2cf3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cf3e:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
	dst->crc	= src->ephemeris->crc;
   2cf42:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   2cf46:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2cf4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cf4e:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
	dst->cic	= src->ephemeris->cic;
   2cf52:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
   2cf56:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   2cf5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cf5e:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
	dst->cuc	= src->ephemeris->cuc;
   2cf62:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   2cf66:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2cf6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2cf6e:	2202      	movs	r2, #2
	dst->cuc	= src->ephemeris->cuc;
   2cf70:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2cf74:	a826      	add	r0, sp, #152	; 0x98
   2cf76:	f7ff fd9f 	bl	2cab8 <send_to_modem>
   2cf7a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2cf7c:	4658      	mov	r0, fp
   2cf7e:	f009 fe07 	bl	36b90 <z_impl_k_mutex_unlock>
		if (err) {
   2cf82:	2c00      	cmp	r4, #0
   2cf84:	f43f aee1 	beq.w	2cd4a <nrf_cloud_agps_process+0xc2>
			LOG_ERR("Failed to send data to modem, error: %d", err);
   2cf88:	4622      	mov	r2, r4
   2cf8a:	2145      	movs	r1, #69	; 0x45
   2cf8c:	480c      	ldr	r0, [pc, #48]	; (2cfc0 <nrf_cloud_agps_process+0x338>)
   2cf8e:	f00f fe9e 	bl	3ccce <z_log_minimal_printk>
   2cf92:	4625      	mov	r5, r4
	z_impl_k_sem_give(sem);
   2cf94:	4805      	ldr	r0, [pc, #20]	; (2cfac <nrf_cloud_agps_process+0x324>)
   2cf96:	f009 ff7b 	bl	36e90 <z_impl_k_sem_give>
}
   2cf9a:	e694      	b.n	2ccc6 <nrf_cloud_agps_process+0x3e>
   2cf9c:	000437fe 	.word	0x000437fe
   2cfa0:	00048bf7 	.word	0x00048bf7
   2cfa4:	00048c68 	.word	0x00048c68
   2cfa8:	00048c90 	.word	0x00048c90
   2cfac:	20015000 	.word	0x20015000
   2cfb0:	00048cb5 	.word	0x00048cb5
   2cfb4:	2001c957 	.word	0x2001c957
   2cfb8:	2001a110 	.word	0x2001a110
   2cfbc:	2001a104 	.word	0x2001a104
   2cfc0:	00048cfa 	.word	0x00048cfa
		processed.sv_mask_alm |= (1 << (agps_data->almanac->sv_id - 1));
   2cfc4:	2301      	movs	r3, #1
   2cfc6:	7822      	ldrb	r2, [r4, #0]
   2cfc8:	4969      	ldr	r1, [pc, #420]	; (2d170 <nrf_cloud_agps_process+0x4e8>)
   2cfca:	1e50      	subs	r0, r2, #1
   2cfcc:	4083      	lsls	r3, r0
   2cfce:	6848      	ldr	r0, [r1, #4]
	dst->sv_id	= src->almanac->sv_id;
   2cfd0:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
		processed.sv_mask_alm |= (1 << (agps_data->almanac->sv_id - 1));
   2cfd4:	4303      	orrs	r3, r0
   2cfd6:	604b      	str	r3, [r1, #4]
	dst->wn		= src->almanac->wn;
   2cfd8:	7863      	ldrb	r3, [r4, #1]
		return send_to_modem(&almanac, sizeof(almanac),
   2cfda:	2120      	movs	r1, #32
	dst->wn		= src->almanac->wn;
   2cfdc:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
	dst->toa	= src->almanac->toa;
   2cfe0:	78a3      	ldrb	r3, [r4, #2]
   2cfe2:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
	dst->ioda	= src->almanac->ioda;
   2cfe6:	78e3      	ldrb	r3, [r4, #3]
   2cfe8:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
	dst->e		= src->almanac->e;
   2cfec:	7962      	ldrb	r2, [r4, #5]
   2cfee:	7923      	ldrb	r3, [r4, #4]
   2cff0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cff4:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
	dst->delta_i	= src->almanac->delta_i;
   2cff8:	79e2      	ldrb	r2, [r4, #7]
   2cffa:	79a3      	ldrb	r3, [r4, #6]
   2cffc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d000:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
	dst->omega_dot	= src->almanac->omega_dot;
   2d004:	7a62      	ldrb	r2, [r4, #9]
   2d006:	7a23      	ldrb	r3, [r4, #8]
   2d008:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d00c:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->sv_health	= src->almanac->sv_health;
   2d010:	7aa3      	ldrb	r3, [r4, #10]
   2d012:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
	dst->sqrt_a	= src->almanac->sqrt_a;
   2d016:	f8d4 300b 	ldr.w	r3, [r4, #11]
   2d01a:	9329      	str	r3, [sp, #164]	; 0xa4
	dst->omega0	= src->almanac->omega0;
   2d01c:	f8d4 300f 	ldr.w	r3, [r4, #15]
   2d020:	932a      	str	r3, [sp, #168]	; 0xa8
	dst->w		= src->almanac->w;
   2d022:	f8d4 3013 	ldr.w	r3, [r4, #19]
   2d026:	932b      	str	r3, [sp, #172]	; 0xac
	dst->m0		= src->almanac->m0;
   2d028:	f8d4 3017 	ldr.w	r3, [r4, #23]
   2d02c:	932c      	str	r3, [sp, #176]	; 0xb0
	dst->af0	= src->almanac->af0;
   2d02e:	7f22      	ldrb	r2, [r4, #28]
   2d030:	7ee3      	ldrb	r3, [r4, #27]
   2d032:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d036:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
	dst->af1	= src->almanac->af1;
   2d03a:	7f63      	ldrb	r3, [r4, #29]
   2d03c:	7fa2      	ldrb	r2, [r4, #30]
   2d03e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d042:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
		return send_to_modem(&almanac, sizeof(almanac),
   2d046:	2203      	movs	r2, #3
   2d048:	e794      	b.n	2cf74 <nrf_cloud_agps_process+0x2ec>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST;
   2d04a:	4a49      	ldr	r2, [pc, #292]	; (2d170 <nrf_cloud_agps_process+0x4e8>)
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2d04c:	2108      	movs	r1, #8
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST;
   2d04e:	6893      	ldr	r3, [r2, #8]
   2d050:	f043 0302 	orr.w	r3, r3, #2
   2d054:	6093      	str	r3, [r2, #8]
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2d056:	7823      	ldrb	r3, [r4, #0]
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2d058:	2204      	movs	r2, #4
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2d05a:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
	dst->alpha1	= src->ion_correction.klobuchar->alpha1;
   2d05e:	7863      	ldrb	r3, [r4, #1]
   2d060:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
	dst->alpha2	= src->ion_correction.klobuchar->alpha2;
   2d064:	78a3      	ldrb	r3, [r4, #2]
   2d066:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
	dst->alpha3	= src->ion_correction.klobuchar->alpha3;
   2d06a:	78e3      	ldrb	r3, [r4, #3]
   2d06c:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
	dst->beta0	= src->ion_correction.klobuchar->beta0;
   2d070:	7923      	ldrb	r3, [r4, #4]
   2d072:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
	dst->beta1	= src->ion_correction.klobuchar->beta1;
   2d076:	7963      	ldrb	r3, [r4, #5]
   2d078:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   2d07c:	79a3      	ldrb	r3, [r4, #6]
   2d07e:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   2d082:	79e3      	ldrb	r3, [r4, #7]
   2d084:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2d088:	e774      	b.n	2cf74 <nrf_cloud_agps_process+0x2ec>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST;
   2d08a:	4a39      	ldr	r2, [pc, #228]	; (2d170 <nrf_cloud_agps_process+0x4e8>)
   2d08c:	6893      	ldr	r3, [r2, #8]
   2d08e:	f043 0308 	orr.w	r3, r3, #8
   2d092:	6093      	str	r3, [r2, #8]
	dst->date_day		= src->time_and_tow->date_day;
   2d094:	7862      	ldrb	r2, [r4, #1]
   2d096:	7823      	ldrb	r3, [r4, #0]
   2d098:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d09c:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
	dst->time_full_s	= src->time_and_tow->time_full_s;
   2d0a0:	f8d4 3002 	ldr.w	r3, [r4, #2]
   2d0a4:	9327      	str	r3, [sp, #156]	; 0x9c
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   2d0a6:	79a3      	ldrb	r3, [r4, #6]
   2d0a8:	79e2      	ldrb	r2, [r4, #7]
   2d0aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d0ae:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->sv_mask		= src->time_and_tow->sv_mask;
   2d0b2:	68a1      	ldr	r1, [r4, #8]
   2d0b4:	9129      	str	r1, [sp, #164]	; 0xa4
	if (src->time_and_tow->sv_mask == 0U) {
   2d0b6:	b931      	cbnz	r1, 2d0c6 <nrf_cloud_agps_process+0x43e>
		memset(dst->sv_tow, 0, sizeof(dst->sv_tow));
   2d0b8:	2280      	movs	r2, #128	; 0x80
   2d0ba:	a82a      	add	r0, sp, #168	; 0xa8
   2d0bc:	f014 faa1 	bl	41602 <memset>
		return send_to_modem(&time_and_tow, sizeof(time_and_tow),
   2d0c0:	2206      	movs	r2, #6
   2d0c2:	2190      	movs	r1, #144	; 0x90
   2d0c4:	e756      	b.n	2cf74 <nrf_cloud_agps_process+0x2ec>
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2d0c6:	2300      	movs	r3, #0
   2d0c8:	aa26      	add	r2, sp, #152	; 0x98
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   2d0ca:	f104 000f 	add.w	r0, r4, #15
   2d0ce:	f810 1023 	ldrb.w	r1, [r0, r3, lsl #2]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2d0d2:	3204      	adds	r2, #4
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   2d0d4:	7391      	strb	r1, [r2, #14]
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2d0d6:	1c99      	adds	r1, r3, #2
   2d0d8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   2d0dc:	f891 c005 	ldrb.w	ip, [r1, #5]
   2d0e0:	7989      	ldrb	r1, [r1, #6]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2d0e2:	3301      	adds	r3, #1
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2d0e4:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2d0e8:	2b20      	cmp	r3, #32
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2d0ea:	8191      	strh	r1, [r2, #12]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2d0ec:	d1ef      	bne.n	2d0ce <nrf_cloud_agps_process+0x446>
   2d0ee:	e7e7      	b.n	2d0c0 <nrf_cloud_agps_process+0x438>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2d0f0:	4a1f      	ldr	r2, [pc, #124]	; (2d170 <nrf_cloud_agps_process+0x4e8>)
		struct nrf_modem_gnss_agps_data_location location = {0};
   2d0f2:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2d0f6:	6893      	ldr	r3, [r2, #8]
	dst->latitude		= src->location->latitude;
   2d0f8:	6820      	ldr	r0, [r4, #0]
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2d0fa:	f043 0310 	orr.w	r3, r3, #16
   2d0fe:	6093      	str	r3, [r2, #8]
	dst->latitude		= src->location->latitude;
   2d100:	9026      	str	r0, [sp, #152]	; 0x98
	dst->longitude		= src->location->longitude;
   2d102:	6861      	ldr	r1, [r4, #4]
   2d104:	9127      	str	r1, [sp, #156]	; 0x9c
	dst->altitude		= src->location->altitude;
   2d106:	7a62      	ldrb	r2, [r4, #9]
   2d108:	7a23      	ldrb	r3, [r4, #8]
   2d10a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2d10e:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->unc_semimajor	= src->location->unc_semimajor;
   2d112:	7aa3      	ldrb	r3, [r4, #10]
   2d114:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
	dst->unc_semiminor	= src->location->unc_semiminor;
   2d118:	7ae3      	ldrb	r3, [r4, #11]
   2d11a:	f88d 30a3 	strb.w	r3, [sp, #163]	; 0xa3
	dst->orientation_major	= src->location->orientation_major;
   2d11e:	7b23      	ldrb	r3, [r4, #12]
   2d120:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
	dst->unc_altitude	= src->location->unc_altitude;
   2d124:	7b63      	ldrb	r3, [r4, #13]
   2d126:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
	dst->confidence		= src->location->confidence;
   2d12a:	7ba3      	ldrb	r3, [r4, #14]
   2d12c:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
		nrf_cloud_pgps_set_location_normalized(location.latitude,
   2d130:	f001 fdd6 	bl	2ece0 <nrf_cloud_pgps_set_location_normalized>
		return send_to_modem(&location, sizeof(location),
   2d134:	2207      	movs	r2, #7
   2d136:	e692      	b.n	2ce5e <nrf_cloud_agps_process+0x1d6>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   2d138:	4a0d      	ldr	r2, [pc, #52]	; (2d170 <nrf_cloud_agps_process+0x4e8>)
		return send_to_modem(agps_data->integrity,
   2d13a:	2104      	movs	r1, #4
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   2d13c:	6893      	ldr	r3, [r2, #8]
		return send_to_modem(agps_data->integrity,
   2d13e:	4620      	mov	r0, r4
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   2d140:	f043 0320 	orr.w	r3, r3, #32
   2d144:	6093      	str	r3, [r2, #8]
		return send_to_modem(agps_data->integrity,
   2d146:	2208      	movs	r2, #8
   2d148:	e715      	b.n	2cf76 <nrf_cloud_agps_process+0x2ee>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   2d14a:	4642      	mov	r2, r8
   2d14c:	2157      	movs	r1, #87	; 0x57
   2d14e:	4809      	ldr	r0, [pc, #36]	; (2d174 <nrf_cloud_agps_process+0x4ec>)
   2d150:	f00f fdbd 	bl	3ccce <z_log_minimal_printk>
	return 0;
   2d154:	2400      	movs	r4, #0
   2d156:	e711      	b.n	2cf7c <nrf_cloud_agps_process+0x2f4>
	uint32_t sv_mask = 0;
   2d158:	4681      	mov	r9, r0
	if (elements_left_to_process == 0) {
   2d15a:	f8df a01c 	ldr.w	sl, [pc, #28]	; 2d178 <nrf_cloud_agps_process+0x4f0>
	return z_impl_k_mutex_lock(mutex, timeout);
   2d15e:	f8df b01c 	ldr.w	fp, [pc, #28]	; 2d17c <nrf_cloud_agps_process+0x4f4>
   2d162:	e5f2      	b.n	2cd4a <nrf_cloud_agps_process+0xc2>
		return -EINVAL;
   2d164:	f06f 0515 	mvn.w	r5, #21
   2d168:	e5ad      	b.n	2ccc6 <nrf_cloud_agps_process+0x3e>
		return -ENOMSG;
   2d16a:	f06f 0522 	mvn.w	r5, #34	; 0x22
   2d16e:	e5aa      	b.n	2ccc6 <nrf_cloud_agps_process+0x3e>
   2d170:	2001a104 	.word	0x2001a104
   2d174:	00048cda 	.word	0x00048cda
   2d178:	2001a590 	.word	0x2001a590
   2d17c:	20014f68 	.word	0x20014f68

0002d180 <nrf_cloud_agps_processed>:

void nrf_cloud_agps_processed(struct nrf_modem_gnss_agps_data_frame *received_elements)
{
   2d180:	b510      	push	{r4, lr}
	if (received_elements) {
   2d182:	4604      	mov	r4, r0
   2d184:	b188      	cbz	r0, 2d1aa <nrf_cloud_agps_processed+0x2a>
   2d186:	f04f 32ff 	mov.w	r2, #4294967295
   2d18a:	f04f 33ff 	mov.w	r3, #4294967295
   2d18e:	4807      	ldr	r0, [pc, #28]	; (2d1ac <nrf_cloud_agps_processed+0x2c>)
   2d190:	f009 fc2c 	bl	369ec <z_impl_k_mutex_lock>
   2d194:	4b06      	ldr	r3, [pc, #24]	; (2d1b0 <nrf_cloud_agps_processed+0x30>)
   2d196:	cb03      	ldmia	r3!, {r0, r1}
   2d198:	6020      	str	r0, [r4, #0]
   2d19a:	6061      	str	r1, [r4, #4]
   2d19c:	6818      	ldr	r0, [r3, #0]
   2d19e:	60a0      	str	r0, [r4, #8]
	return z_impl_k_mutex_unlock(mutex);
   2d1a0:	4802      	ldr	r0, [pc, #8]	; (2d1ac <nrf_cloud_agps_processed+0x2c>)
		k_mutex_lock(&processed_lock, K_FOREVER);
		memcpy(received_elements, &processed, sizeof(*received_elements));
		k_mutex_unlock(&processed_lock);
	}
}
   2d1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d1a6:	f009 bcf3 	b.w	36b90 <z_impl_k_mutex_unlock>
   2d1aa:	bd10      	pop	{r4, pc}
   2d1ac:	20014f68 	.word	0x20014f68
   2d1b0:	2001a104 	.word	0x2001a104

0002d1b4 <agps_print>:
}

void agps_print(uint16_t type, void *data)
{

	switch (type) {
   2d1b4:	3801      	subs	r0, #1
{
   2d1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d1ba:	460c      	mov	r4, r1
	switch (type) {
   2d1bc:	2807      	cmp	r0, #7
   2d1be:	f200 816b 	bhi.w	2d498 <agps_print+0x2e4>
   2d1c2:	e8df f010 	tbh	[pc, r0, lsl #1]
   2d1c6:	0008      	.short	0x0008
   2d1c8:	00a50030 	.word	0x00a50030
   2d1cc:	010d00e3 	.word	0x010d00e3
   2d1d0:	01400112 	.word	0x01400112
   2d1d4:	0163      	.short	0x0163
	printk("utc:\n");
   2d1d6:	48b1      	ldr	r0, [pc, #708]	; (2d49c <agps_print+0x2e8>)
   2d1d8:	f00f fb5c 	bl	3c894 <printk>
	printk("\ta1: %d\n", data->a1);
   2d1dc:	6821      	ldr	r1, [r4, #0]
   2d1de:	48b0      	ldr	r0, [pc, #704]	; (2d4a0 <agps_print+0x2ec>)
   2d1e0:	f00f fb58 	bl	3c894 <printk>
	printk("\ta0: %d\n", data->a0);
   2d1e4:	6861      	ldr	r1, [r4, #4]
   2d1e6:	48af      	ldr	r0, [pc, #700]	; (2d4a4 <agps_print+0x2f0>)
   2d1e8:	f00f fb54 	bl	3c894 <printk>
	printk("\ttot: %d\n", data->tot);
   2d1ec:	7a21      	ldrb	r1, [r4, #8]
   2d1ee:	48ae      	ldr	r0, [pc, #696]	; (2d4a8 <agps_print+0x2f4>)
   2d1f0:	f00f fb50 	bl	3c894 <printk>
	printk("\twn_t: %d\n", data->wn_t);
   2d1f4:	7a61      	ldrb	r1, [r4, #9]
   2d1f6:	48ad      	ldr	r0, [pc, #692]	; (2d4ac <agps_print+0x2f8>)
   2d1f8:	f00f fb4c 	bl	3c894 <printk>
	printk("\tdelta_tls: %d\n", data->delta_tls);
   2d1fc:	f994 100a 	ldrsb.w	r1, [r4, #10]
   2d200:	48ab      	ldr	r0, [pc, #684]	; (2d4b0 <agps_print+0x2fc>)
   2d202:	f00f fb47 	bl	3c894 <printk>
	printk("\twn_lsf: %d\n", data->wn_lsf);
   2d206:	7ae1      	ldrb	r1, [r4, #11]
   2d208:	48aa      	ldr	r0, [pc, #680]	; (2d4b4 <agps_print+0x300>)
   2d20a:	f00f fb43 	bl	3c894 <printk>
	printk("\tdn: %d\n", data->dn);
   2d20e:	f994 100c 	ldrsb.w	r1, [r4, #12]
   2d212:	48a9      	ldr	r0, [pc, #676]	; (2d4b8 <agps_print+0x304>)
   2d214:	f00f fb3e 	bl	3c894 <printk>
	printk("\tdelta_tlsf: %d\n", data->delta_tlsf);
   2d218:	f994 100d 	ldrsb.w	r1, [r4, #13]
   2d21c:	48a7      	ldr	r0, [pc, #668]	; (2d4bc <agps_print+0x308>)
	}
	default:
		printk("Unknown AGPS data type\n");
		break;
	}
}
   2d21e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printk("\tcuc: %d\n", data->cuc);
   2d222:	f00f bb37 	b.w	3c894 <printk>
	printk("ephemeris:\n");
   2d226:	48a6      	ldr	r0, [pc, #664]	; (2d4c0 <agps_print+0x30c>)
   2d228:	f00f fb34 	bl	3c894 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2d22c:	7821      	ldrb	r1, [r4, #0]
   2d22e:	48a5      	ldr	r0, [pc, #660]	; (2d4c4 <agps_print+0x310>)
   2d230:	f00f fb30 	bl	3c894 <printk>
	printk("\thealth: %d\n", data->health);
   2d234:	7861      	ldrb	r1, [r4, #1]
   2d236:	48a4      	ldr	r0, [pc, #656]	; (2d4c8 <agps_print+0x314>)
   2d238:	f00f fb2c 	bl	3c894 <printk>
	printk("\tiodc: %d\n", data->iodc);
   2d23c:	8861      	ldrh	r1, [r4, #2]
   2d23e:	48a3      	ldr	r0, [pc, #652]	; (2d4cc <agps_print+0x318>)
   2d240:	f00f fb28 	bl	3c894 <printk>
	printk("\ttoc: %d\n", data->toc);
   2d244:	88a1      	ldrh	r1, [r4, #4]
   2d246:	48a2      	ldr	r0, [pc, #648]	; (2d4d0 <agps_print+0x31c>)
   2d248:	f00f fb24 	bl	3c894 <printk>
	printk("\taf2: %d\n", data->af2);
   2d24c:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2d250:	48a0      	ldr	r0, [pc, #640]	; (2d4d4 <agps_print+0x320>)
   2d252:	f00f fb1f 	bl	3c894 <printk>
	printk("\taf1: %d\n", data->af1);
   2d256:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2d25a:	489f      	ldr	r0, [pc, #636]	; (2d4d8 <agps_print+0x324>)
   2d25c:	f00f fb1a 	bl	3c894 <printk>
	printk("\taf0: %d\n", data->af0);
   2d260:	68e1      	ldr	r1, [r4, #12]
   2d262:	489e      	ldr	r0, [pc, #632]	; (2d4dc <agps_print+0x328>)
   2d264:	f00f fb16 	bl	3c894 <printk>
	printk("\ttgd: %d\n", data->tgd);
   2d268:	f994 1010 	ldrsb.w	r1, [r4, #16]
   2d26c:	489c      	ldr	r0, [pc, #624]	; (2d4e0 <agps_print+0x32c>)
   2d26e:	f00f fb11 	bl	3c894 <printk>
	printk("\tura: %d\n", data->ura);
   2d272:	7c61      	ldrb	r1, [r4, #17]
   2d274:	489b      	ldr	r0, [pc, #620]	; (2d4e4 <agps_print+0x330>)
   2d276:	f00f fb0d 	bl	3c894 <printk>
	printk("\tfit_int: %d\n", data->fit_int);
   2d27a:	7ca1      	ldrb	r1, [r4, #18]
   2d27c:	489a      	ldr	r0, [pc, #616]	; (2d4e8 <agps_print+0x334>)
   2d27e:	f00f fb09 	bl	3c894 <printk>
	printk("\ttoe: %d\n", data->toe);
   2d282:	8aa1      	ldrh	r1, [r4, #20]
   2d284:	4899      	ldr	r0, [pc, #612]	; (2d4ec <agps_print+0x338>)
   2d286:	f00f fb05 	bl	3c894 <printk>
	printk("\tw: %d\n", data->w);
   2d28a:	69a1      	ldr	r1, [r4, #24]
   2d28c:	4898      	ldr	r0, [pc, #608]	; (2d4f0 <agps_print+0x33c>)
   2d28e:	f00f fb01 	bl	3c894 <printk>
	printk("\tdelta_n: %d\n", data->delta_n);
   2d292:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2d296:	4897      	ldr	r0, [pc, #604]	; (2d4f4 <agps_print+0x340>)
   2d298:	f00f fafc 	bl	3c894 <printk>
	printk("\tm0: %d\n", data->m0);
   2d29c:	6a21      	ldr	r1, [r4, #32]
   2d29e:	4896      	ldr	r0, [pc, #600]	; (2d4f8 <agps_print+0x344>)
   2d2a0:	f00f faf8 	bl	3c894 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2d2a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2d2a6:	4895      	ldr	r0, [pc, #596]	; (2d4fc <agps_print+0x348>)
   2d2a8:	f00f faf4 	bl	3c894 <printk>
	printk("\te: %d\n", data->e);
   2d2ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2d2ae:	4894      	ldr	r0, [pc, #592]	; (2d500 <agps_print+0x34c>)
   2d2b0:	f00f faf0 	bl	3c894 <printk>
	printk("\tidot: %d\n", data->idot);
   2d2b4:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   2d2b8:	4892      	ldr	r0, [pc, #584]	; (2d504 <agps_print+0x350>)
   2d2ba:	f00f faeb 	bl	3c894 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2d2be:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2d2c0:	4891      	ldr	r0, [pc, #580]	; (2d508 <agps_print+0x354>)
   2d2c2:	f00f fae7 	bl	3c894 <printk>
	printk("\ti0: %d\n", data->i0);
   2d2c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2d2c8:	4890      	ldr	r0, [pc, #576]	; (2d50c <agps_print+0x358>)
   2d2ca:	f00f fae3 	bl	3c894 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2d2ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2d2d0:	488f      	ldr	r0, [pc, #572]	; (2d510 <agps_print+0x35c>)
   2d2d2:	f00f fadf 	bl	3c894 <printk>
	printk("\tcrs: %d\n", data->crs);
   2d2d6:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
   2d2da:	488e      	ldr	r0, [pc, #568]	; (2d514 <agps_print+0x360>)
   2d2dc:	f00f fada 	bl	3c894 <printk>
	printk("\tcis: %d\n", data->cis);
   2d2e0:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
   2d2e4:	488c      	ldr	r0, [pc, #560]	; (2d518 <agps_print+0x364>)
   2d2e6:	f00f fad5 	bl	3c894 <printk>
	printk("\tcus: %d\n", data->cus);
   2d2ea:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
   2d2ee:	488b      	ldr	r0, [pc, #556]	; (2d51c <agps_print+0x368>)
   2d2f0:	f00f fad0 	bl	3c894 <printk>
	printk("\tcrc: %d\n", data->crc);
   2d2f4:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
   2d2f8:	4889      	ldr	r0, [pc, #548]	; (2d520 <agps_print+0x36c>)
   2d2fa:	f00f facb 	bl	3c894 <printk>
	printk("\tcic: %d\n", data->cic);
   2d2fe:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
   2d302:	4888      	ldr	r0, [pc, #544]	; (2d524 <agps_print+0x370>)
   2d304:	f00f fac6 	bl	3c894 <printk>
	printk("\tcuc: %d\n", data->cuc);
   2d308:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
   2d30c:	4886      	ldr	r0, [pc, #536]	; (2d528 <agps_print+0x374>)
   2d30e:	e786      	b.n	2d21e <agps_print+0x6a>
	printk("almanac\n");
   2d310:	4886      	ldr	r0, [pc, #536]	; (2d52c <agps_print+0x378>)
   2d312:	f00f fabf 	bl	3c894 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2d316:	7821      	ldrb	r1, [r4, #0]
   2d318:	486a      	ldr	r0, [pc, #424]	; (2d4c4 <agps_print+0x310>)
   2d31a:	f00f fabb 	bl	3c894 <printk>
	printk("\twn: %d\n", data->wn);
   2d31e:	7861      	ldrb	r1, [r4, #1]
   2d320:	4883      	ldr	r0, [pc, #524]	; (2d530 <agps_print+0x37c>)
   2d322:	f00f fab7 	bl	3c894 <printk>
	printk("\ttoa: %d\n", data->toa);
   2d326:	78a1      	ldrb	r1, [r4, #2]
   2d328:	4882      	ldr	r0, [pc, #520]	; (2d534 <agps_print+0x380>)
   2d32a:	f00f fab3 	bl	3c894 <printk>
	printk("\tioda: %d\n", data->ioda);
   2d32e:	78e1      	ldrb	r1, [r4, #3]
   2d330:	4881      	ldr	r0, [pc, #516]	; (2d538 <agps_print+0x384>)
   2d332:	f00f faaf 	bl	3c894 <printk>
	printk("\te: %d\n", data->e);
   2d336:	88a1      	ldrh	r1, [r4, #4]
   2d338:	4871      	ldr	r0, [pc, #452]	; (2d500 <agps_print+0x34c>)
   2d33a:	f00f faab 	bl	3c894 <printk>
	printk("\tdelta_i: %d\n", data->delta_i);
   2d33e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   2d342:	487e      	ldr	r0, [pc, #504]	; (2d53c <agps_print+0x388>)
   2d344:	f00f faa6 	bl	3c894 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2d348:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2d34c:	486b      	ldr	r0, [pc, #428]	; (2d4fc <agps_print+0x348>)
   2d34e:	f00f faa1 	bl	3c894 <printk>
	printk("\tsv_health: %d\n", data->sv_health);
   2d352:	7aa1      	ldrb	r1, [r4, #10]
   2d354:	487a      	ldr	r0, [pc, #488]	; (2d540 <agps_print+0x38c>)
   2d356:	f00f fa9d 	bl	3c894 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2d35a:	68e1      	ldr	r1, [r4, #12]
   2d35c:	486a      	ldr	r0, [pc, #424]	; (2d508 <agps_print+0x354>)
   2d35e:	f00f fa99 	bl	3c894 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2d362:	6921      	ldr	r1, [r4, #16]
   2d364:	486a      	ldr	r0, [pc, #424]	; (2d510 <agps_print+0x35c>)
   2d366:	f00f fa95 	bl	3c894 <printk>
	printk("\tw: %d\n", data->w);
   2d36a:	6961      	ldr	r1, [r4, #20]
   2d36c:	4860      	ldr	r0, [pc, #384]	; (2d4f0 <agps_print+0x33c>)
   2d36e:	f00f fa91 	bl	3c894 <printk>
	printk("\tm0: %d\n", data->m0);
   2d372:	69a1      	ldr	r1, [r4, #24]
   2d374:	4860      	ldr	r0, [pc, #384]	; (2d4f8 <agps_print+0x344>)
   2d376:	f00f fa8d 	bl	3c894 <printk>
	printk("\taf0: %d\n", data->af0);
   2d37a:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2d37e:	4857      	ldr	r0, [pc, #348]	; (2d4dc <agps_print+0x328>)
   2d380:	f00f fa88 	bl	3c894 <printk>
	printk("\taf1: %d\n", data->af1);
   2d384:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
   2d388:	4853      	ldr	r0, [pc, #332]	; (2d4d8 <agps_print+0x324>)
   2d38a:	e748      	b.n	2d21e <agps_print+0x6a>
	printk("klobuchar\n");
   2d38c:	486d      	ldr	r0, [pc, #436]	; (2d544 <agps_print+0x390>)
   2d38e:	f00f fa81 	bl	3c894 <printk>
	printk("\talpha0: %d\n", data->alpha0);
   2d392:	f994 1000 	ldrsb.w	r1, [r4]
   2d396:	486c      	ldr	r0, [pc, #432]	; (2d548 <agps_print+0x394>)
   2d398:	f00f fa7c 	bl	3c894 <printk>
	printk("\talpha1: %d\n", data->alpha1);
   2d39c:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2d3a0:	486a      	ldr	r0, [pc, #424]	; (2d54c <agps_print+0x398>)
   2d3a2:	f00f fa77 	bl	3c894 <printk>
	printk("\talpha2: %d\n", data->alpha2);
   2d3a6:	f994 1002 	ldrsb.w	r1, [r4, #2]
   2d3aa:	4869      	ldr	r0, [pc, #420]	; (2d550 <agps_print+0x39c>)
   2d3ac:	f00f fa72 	bl	3c894 <printk>
	printk("\talpha3: %d\n", data->alpha3);
   2d3b0:	f994 1003 	ldrsb.w	r1, [r4, #3]
   2d3b4:	4867      	ldr	r0, [pc, #412]	; (2d554 <agps_print+0x3a0>)
   2d3b6:	f00f fa6d 	bl	3c894 <printk>
	printk("\tbeta0: %d\n", data->beta0);
   2d3ba:	f994 1004 	ldrsb.w	r1, [r4, #4]
   2d3be:	4866      	ldr	r0, [pc, #408]	; (2d558 <agps_print+0x3a4>)
   2d3c0:	f00f fa68 	bl	3c894 <printk>
	printk("\tbeta1: %d\n", data->beta1);
   2d3c4:	f994 1005 	ldrsb.w	r1, [r4, #5]
   2d3c8:	4864      	ldr	r0, [pc, #400]	; (2d55c <agps_print+0x3a8>)
   2d3ca:	f00f fa63 	bl	3c894 <printk>
	printk("\tbeta2: %d\n", data->beta2);
   2d3ce:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2d3d2:	4863      	ldr	r0, [pc, #396]	; (2d560 <agps_print+0x3ac>)
   2d3d4:	f00f fa5e 	bl	3c894 <printk>
	printk("\tbeta3: %d\n", data->beta3);
   2d3d8:	f994 1007 	ldrsb.w	r1, [r4, #7]
   2d3dc:	4861      	ldr	r0, [pc, #388]	; (2d564 <agps_print+0x3b0>)
   2d3de:	e71e      	b.n	2d21e <agps_print+0x6a>
		printk("nequick unhandled\n");
   2d3e0:	4861      	ldr	r0, [pc, #388]	; (2d568 <agps_print+0x3b4>)
}
   2d3e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Unknown AGPS data type\n");
   2d3e6:	f00f ba55 	b.w	3c894 <printk>
	printk("clock_and_tows\n");
   2d3ea:	4860      	ldr	r0, [pc, #384]	; (2d56c <agps_print+0x3b8>)
   2d3ec:	f00f fa52 	bl	3c894 <printk>
	printk("\tdate_day: %d\n", data->date_day);
   2d3f0:	8821      	ldrh	r1, [r4, #0]
   2d3f2:	485f      	ldr	r0, [pc, #380]	; (2d570 <agps_print+0x3bc>)
   2d3f4:	f00f fa4e 	bl	3c894 <printk>
	printk("\ttime_full_s: %d\n", data->time_full_s);
   2d3f8:	6861      	ldr	r1, [r4, #4]
   2d3fa:	485e      	ldr	r0, [pc, #376]	; (2d574 <agps_print+0x3c0>)
   2d3fc:	f00f fa4a 	bl	3c894 <printk>
	printk("\ttime_frac_ms: %d\n", data->time_frac_ms);
   2d400:	8921      	ldrh	r1, [r4, #8]
   2d402:	485d      	ldr	r0, [pc, #372]	; (2d578 <agps_print+0x3c4>)
   2d404:	f00f fa46 	bl	3c894 <printk>
	printk("\tsv_mask: 0x%08x\n", data->sv_mask);
   2d408:	68e1      	ldr	r1, [r4, #12]
   2d40a:	485c      	ldr	r0, [pc, #368]	; (2d57c <agps_print+0x3c8>)
   2d40c:	f00f fa42 	bl	3c894 <printk>
	printk("\tsv_tow\n");
   2d410:	485b      	ldr	r0, [pc, #364]	; (2d580 <agps_print+0x3cc>)
   2d412:	f00f fa3f 	bl	3c894 <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   2d416:	2500      	movs	r5, #0
		printk("\t\tsv_tow[%d]\n", i);
   2d418:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 2d5bc <agps_print+0x408>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2d41c:	4f59      	ldr	r7, [pc, #356]	; (2d584 <agps_print+0x3d0>)
		printk("\t\t\tflags: 0x%02x\n", data->sv_tow[i].flags);
   2d41e:	4e5a      	ldr	r6, [pc, #360]	; (2d588 <agps_print+0x3d4>)
		printk("\t\tsv_tow[%d]\n", i);
   2d420:	4629      	mov	r1, r5
   2d422:	4640      	mov	r0, r8
   2d424:	f00f fa36 	bl	3c894 <printk>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2d428:	8a21      	ldrh	r1, [r4, #16]
   2d42a:	4638      	mov	r0, r7
   2d42c:	f00f fa32 	bl	3c894 <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   2d430:	3501      	adds	r5, #1
		printk("\t\t\tflags: 0x%02x\n", data->sv_tow[i].flags);
   2d432:	7ca1      	ldrb	r1, [r4, #18]
   2d434:	4630      	mov	r0, r6
   2d436:	f00f fa2d 	bl	3c894 <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   2d43a:	2d20      	cmp	r5, #32
   2d43c:	f104 0404 	add.w	r4, r4, #4
   2d440:	d1ee      	bne.n	2d420 <agps_print+0x26c>
}
   2d442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("location\n");
   2d446:	4851      	ldr	r0, [pc, #324]	; (2d58c <agps_print+0x3d8>)
   2d448:	f00f fa24 	bl	3c894 <printk>
	printk("\tlatitude: %d\n", data->latitude);
   2d44c:	6821      	ldr	r1, [r4, #0]
   2d44e:	4850      	ldr	r0, [pc, #320]	; (2d590 <agps_print+0x3dc>)
   2d450:	f00f fa20 	bl	3c894 <printk>
	printk("\tlongitude: %d\n", data->longitude);
   2d454:	6861      	ldr	r1, [r4, #4]
   2d456:	484f      	ldr	r0, [pc, #316]	; (2d594 <agps_print+0x3e0>)
   2d458:	f00f fa1c 	bl	3c894 <printk>
	printk("\taltitude: %d\n", data->altitude);
   2d45c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2d460:	484d      	ldr	r0, [pc, #308]	; (2d598 <agps_print+0x3e4>)
   2d462:	f00f fa17 	bl	3c894 <printk>
	printk("\tunc_semimajor: %d\n", data->unc_semimajor);
   2d466:	7aa1      	ldrb	r1, [r4, #10]
   2d468:	484c      	ldr	r0, [pc, #304]	; (2d59c <agps_print+0x3e8>)
   2d46a:	f00f fa13 	bl	3c894 <printk>
	printk("\tunc_semiminor: %d\n", data->unc_semiminor);
   2d46e:	7ae1      	ldrb	r1, [r4, #11]
   2d470:	484b      	ldr	r0, [pc, #300]	; (2d5a0 <agps_print+0x3ec>)
   2d472:	f00f fa0f 	bl	3c894 <printk>
	printk("\torientation_major: %d\n", data->orientation_major);
   2d476:	7b21      	ldrb	r1, [r4, #12]
   2d478:	484a      	ldr	r0, [pc, #296]	; (2d5a4 <agps_print+0x3f0>)
   2d47a:	f00f fa0b 	bl	3c894 <printk>
	printk("\tunc_altitude: %d\n", data->unc_altitude);
   2d47e:	7b61      	ldrb	r1, [r4, #13]
   2d480:	4849      	ldr	r0, [pc, #292]	; (2d5a8 <agps_print+0x3f4>)
   2d482:	f00f fa07 	bl	3c894 <printk>
	printk("\tconfidence: %d\n", data->confidence);
   2d486:	7ba1      	ldrb	r1, [r4, #14]
   2d488:	4848      	ldr	r0, [pc, #288]	; (2d5ac <agps_print+0x3f8>)
   2d48a:	e6c8      	b.n	2d21e <agps_print+0x6a>
	printk("integrity\n");
   2d48c:	4848      	ldr	r0, [pc, #288]	; (2d5b0 <agps_print+0x3fc>)
   2d48e:	f00f fa01 	bl	3c894 <printk>
	printk("\tintegrity_mask: %d\n", data->integrity_mask);
   2d492:	6821      	ldr	r1, [r4, #0]
   2d494:	4847      	ldr	r0, [pc, #284]	; (2d5b4 <agps_print+0x400>)
   2d496:	e6c2      	b.n	2d21e <agps_print+0x6a>
		printk("Unknown AGPS data type\n");
   2d498:	4847      	ldr	r0, [pc, #284]	; (2d5b8 <agps_print+0x404>)
   2d49a:	e7a2      	b.n	2d3e2 <agps_print+0x22e>
   2d49c:	00048d36 	.word	0x00048d36
   2d4a0:	00048d3c 	.word	0x00048d3c
   2d4a4:	00048d45 	.word	0x00048d45
   2d4a8:	00048d4e 	.word	0x00048d4e
   2d4ac:	00048d58 	.word	0x00048d58
   2d4b0:	00048d63 	.word	0x00048d63
   2d4b4:	00048d73 	.word	0x00048d73
   2d4b8:	00048d80 	.word	0x00048d80
   2d4bc:	00048d89 	.word	0x00048d89
   2d4c0:	00048d9a 	.word	0x00048d9a
   2d4c4:	00048da6 	.word	0x00048da6
   2d4c8:	00048db2 	.word	0x00048db2
   2d4cc:	00048dbf 	.word	0x00048dbf
   2d4d0:	00048dca 	.word	0x00048dca
   2d4d4:	00048dd4 	.word	0x00048dd4
   2d4d8:	00048dde 	.word	0x00048dde
   2d4dc:	00048de8 	.word	0x00048de8
   2d4e0:	00048df2 	.word	0x00048df2
   2d4e4:	00048dfc 	.word	0x00048dfc
   2d4e8:	00048e06 	.word	0x00048e06
   2d4ec:	00048e14 	.word	0x00048e14
   2d4f0:	00048e1e 	.word	0x00048e1e
   2d4f4:	00048e26 	.word	0x00048e26
   2d4f8:	00048e34 	.word	0x00048e34
   2d4fc:	00048e3d 	.word	0x00048e3d
   2d500:	00048e4d 	.word	0x00048e4d
   2d504:	00048e55 	.word	0x00048e55
   2d508:	00048e60 	.word	0x00048e60
   2d50c:	00048e6d 	.word	0x00048e6d
   2d510:	00048e76 	.word	0x00048e76
   2d514:	00048e83 	.word	0x00048e83
   2d518:	00048e8d 	.word	0x00048e8d
   2d51c:	00048e97 	.word	0x00048e97
   2d520:	00048ea1 	.word	0x00048ea1
   2d524:	00048eab 	.word	0x00048eab
   2d528:	00048eb5 	.word	0x00048eb5
   2d52c:	00048ebf 	.word	0x00048ebf
   2d530:	00048ec8 	.word	0x00048ec8
   2d534:	00048ed1 	.word	0x00048ed1
   2d538:	00048edb 	.word	0x00048edb
   2d53c:	00048ee6 	.word	0x00048ee6
   2d540:	00048ef4 	.word	0x00048ef4
   2d544:	00048f04 	.word	0x00048f04
   2d548:	00048f0f 	.word	0x00048f0f
   2d54c:	00048f1c 	.word	0x00048f1c
   2d550:	00048f29 	.word	0x00048f29
   2d554:	00048f36 	.word	0x00048f36
   2d558:	00048f43 	.word	0x00048f43
   2d55c:	00048f4f 	.word	0x00048f4f
   2d560:	00048f5b 	.word	0x00048f5b
   2d564:	00048f67 	.word	0x00048f67
   2d568:	00048f73 	.word	0x00048f73
   2d56c:	00048f86 	.word	0x00048f86
   2d570:	00048f96 	.word	0x00048f96
   2d574:	00048fa5 	.word	0x00048fa5
   2d578:	00048fb7 	.word	0x00048fb7
   2d57c:	00048fca 	.word	0x00048fca
   2d580:	00048fdc 	.word	0x00048fdc
   2d584:	00048ff3 	.word	0x00048ff3
   2d588:	00048fff 	.word	0x00048fff
   2d58c:	00046e9e 	.word	0x00046e9e
   2d590:	00049011 	.word	0x00049011
   2d594:	00049020 	.word	0x00049020
   2d598:	00049030 	.word	0x00049030
   2d59c:	0004903f 	.word	0x0004903f
   2d5a0:	00049053 	.word	0x00049053
   2d5a4:	00049067 	.word	0x00049067
   2d5a8:	0004907f 	.word	0x0004907f
   2d5ac:	00049092 	.word	0x00049092
   2d5b0:	000490a3 	.word	0x000490a3
   2d5b4:	000490ae 	.word	0x000490ae
   2d5b8:	000490c3 	.word	0x000490c3
   2d5bc:	00048fe5 	.word	0x00048fe5

0002d5c0 <log_pgps_header>:
		return -EINVAL;
	}
}

static void log_pgps_header(const char *msg, const struct nrf_cloud_pgps_header *header)
{
   2d5c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2d5c2:	460c      	mov	r4, r1
	LOG_INF("%sSchema version:%u, type:%u, num:%u, "
   2d5c4:	888b      	ldrh	r3, [r1, #4]
{
   2d5c6:	4602      	mov	r2, r0
	LOG_INF("%sSchema version:%u, type:%u, num:%u, "
   2d5c8:	9302      	str	r3, [sp, #8]
   2d5ca:	884b      	ldrh	r3, [r1, #2]
   2d5cc:	4809      	ldr	r0, [pc, #36]	; (2d5f4 <log_pgps_header+0x34>)
   2d5ce:	9301      	str	r3, [sp, #4]
   2d5d0:	784b      	ldrb	r3, [r1, #1]
   2d5d2:	9300      	str	r3, [sp, #0]
   2d5d4:	780b      	ldrb	r3, [r1, #0]
   2d5d6:	2149      	movs	r1, #73	; 0x49
   2d5d8:	f00f fb79 	bl	3ccce <z_log_minimal_printk>
		"count:%u", msg ? msg : "",
		header->schema_version & 0xFFU, header->array_type & 0xFFU,
		header->num_items, header->prediction_count);
	LOG_INF("  size:%u, period (minutes):%u, GPS day:%u, GPS time:%u",
   2d5dc:	68e3      	ldr	r3, [r4, #12]
   2d5de:	2149      	movs	r1, #73	; 0x49
   2d5e0:	9301      	str	r3, [sp, #4]
   2d5e2:	8963      	ldrh	r3, [r4, #10]
   2d5e4:	88e2      	ldrh	r2, [r4, #6]
   2d5e6:	9300      	str	r3, [sp, #0]
   2d5e8:	4803      	ldr	r0, [pc, #12]	; (2d5f8 <log_pgps_header+0x38>)
   2d5ea:	8923      	ldrh	r3, [r4, #8]
   2d5ec:	f00f fb6f 	bl	3ccce <z_log_minimal_printk>
		header->prediction_size,
		header->prediction_period_min,
		header->gps_day & 0xFFFFU, header->gps_time_of_day);
}
   2d5f0:	b004      	add	sp, #16
   2d5f2:	bd10      	pop	{r4, pc}
   2d5f4:	000490db 	.word	0x000490db
   2d5f8:	0004910f 	.word	0x0004910f

0002d5fc <validate_pgps_header>:

static bool validate_pgps_header(const struct nrf_cloud_pgps_header *header)
{
   2d5fc:	b510      	push	{r4, lr}
   2d5fe:	4604      	mov	r4, r0
	log_pgps_header("Checking P-GPS header: ", header);
   2d600:	4601      	mov	r1, r0
   2d602:	4811      	ldr	r0, [pc, #68]	; (2d648 <validate_pgps_header+0x4c>)
   2d604:	f7ff ffdc 	bl	2d5c0 <log_pgps_header>
	if ((header->schema_version != NRF_CLOUD_PGPS_BIN_SCHEMA_VERSION) ||
   2d608:	7823      	ldrb	r3, [r4, #0]
   2d60a:	2b01      	cmp	r3, #1
   2d60c:	d10d      	bne.n	2d62a <validate_pgps_header+0x2e>
   2d60e:	7863      	ldrb	r3, [r4, #1]
   2d610:	2b0a      	cmp	r3, #10
   2d612:	d115      	bne.n	2d640 <validate_pgps_header+0x44>
	    (header->array_type != NRF_CLOUD_PGPS_PREDICTION_HEADER) ||
   2d614:	8860      	ldrh	r0, [r4, #2]
   2d616:	2801      	cmp	r0, #1
   2d618:	d112      	bne.n	2d640 <validate_pgps_header+0x44>
	    (header->num_items != 1) ||
   2d61a:	8923      	ldrh	r3, [r4, #8]
   2d61c:	2bf0      	cmp	r3, #240	; 0xf0
   2d61e:	d10f      	bne.n	2d640 <validate_pgps_header+0x44>
	    (header->prediction_period_min != PREDICTION_PERIOD) ||
	    (header->prediction_count <= 0) ||
   2d620:	88a3      	ldrh	r3, [r4, #4]
	    (header->prediction_period_min != PREDICTION_PERIOD) ||
   2d622:	3b01      	subs	r3, #1
   2d624:	2b29      	cmp	r3, #41	; 0x29
   2d626:	d80b      	bhi.n	2d640 <validate_pgps_header+0x44>
			LOG_WRN("One or more fields are wrong");
		}
		return false;
	}
	return true;
}
   2d628:	bd10      	pop	{r4, pc}
		if ((((uint8_t)header->schema_version) == 0xff) &&
   2d62a:	2bff      	cmp	r3, #255	; 0xff
   2d62c:	d108      	bne.n	2d640 <validate_pgps_header+0x44>
   2d62e:	7863      	ldrb	r3, [r4, #1]
   2d630:	2bff      	cmp	r3, #255	; 0xff
   2d632:	d105      	bne.n	2d640 <validate_pgps_header+0x44>
			LOG_WRN("Flash is erased.");
   2d634:	2157      	movs	r1, #87	; 0x57
   2d636:	4805      	ldr	r0, [pc, #20]	; (2d64c <validate_pgps_header+0x50>)
			LOG_WRN("One or more fields are wrong");
   2d638:	f00f fb49 	bl	3ccce <z_log_minimal_printk>
		return false;
   2d63c:	2000      	movs	r0, #0
   2d63e:	e7f3      	b.n	2d628 <validate_pgps_header+0x2c>
			LOG_WRN("One or more fields are wrong");
   2d640:	2157      	movs	r1, #87	; 0x57
   2d642:	4803      	ldr	r0, [pc, #12]	; (2d650 <validate_pgps_header+0x54>)
   2d644:	e7f8      	b.n	2d638 <validate_pgps_header+0x3c>
   2d646:	bf00      	nop
   2d648:	0004914c 	.word	0x0004914c
   2d64c:	00049164 	.word	0x00049164
   2d650:	0004917a 	.word	0x0004917a

0002d654 <prediction_timer_handler>:
	}
}

static void prediction_timer_handler(struct k_timer *dummy)
{
	k_work_submit(&prediction_work);
   2d654:	4801      	ldr	r0, [pc, #4]	; (2d65c <prediction_timer_handler+0x8>)
   2d656:	f009 bf35 	b.w	374c4 <k_work_submit>
   2d65a:	bf00      	nop
   2d65c:	200146b4 	.word	0x200146b4

0002d660 <cache_pgps_header>:
	return 0;
}

static void cache_pgps_header(const struct nrf_cloud_pgps_header *header)
{
	memcpy(&index.header, header, sizeof(*header));
   2d660:	4a10      	ldr	r2, [pc, #64]	; (2d6a4 <cache_pgps_header+0x44>)
{
   2d662:	b570      	push	{r4, r5, r6, lr}
   2d664:	4603      	mov	r3, r0
   2d666:	4614      	mov	r4, r2
   2d668:	f100 0610 	add.w	r6, r0, #16
   2d66c:	4615      	mov	r5, r2
   2d66e:	6818      	ldr	r0, [r3, #0]
   2d670:	6859      	ldr	r1, [r3, #4]
   2d672:	3308      	adds	r3, #8
   2d674:	c503      	stmia	r5!, {r0, r1}
   2d676:	42b3      	cmp	r3, r6
   2d678:	462a      	mov	r2, r5
   2d67a:	d1f7      	bne.n	2d66c <cache_pgps_header+0xc>

	index.start_sec = npgps_gps_day_time_to_sec(index.header.gps_day,
   2d67c:	68e1      	ldr	r1, [r4, #12]
   2d67e:	8960      	ldrh	r0, [r4, #10]
   2d680:	f001 fada 	bl	2ec38 <npgps_gps_day_time_to_sec>
						    index.header.gps_time_of_day);
	index.period_sec = index.header.prediction_period_min * SEC_PER_MIN;
   2d684:	8923      	ldrh	r3, [r4, #8]
	index.end_sec = index.start_sec +
			index.period_sec * index.header.prediction_count;
   2d686:	88a2      	ldrh	r2, [r4, #4]
	index.period_sec = index.header.prediction_period_min * SEC_PER_MIN;
   2d688:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   2d68c:	009b      	lsls	r3, r3, #2
   2d68e:	b29b      	uxth	r3, r3
   2d690:	8563      	strh	r3, [r4, #42]	; 0x2a
			index.period_sec * index.header.prediction_count;
   2d692:	4353      	muls	r3, r2
	index.start_sec = npgps_gps_day_time_to_sec(index.header.gps_day,
   2d694:	e9c4 0104 	strd	r0, r1, [r4, #16]
	index.end_sec = index.start_sec +
   2d698:	1818      	adds	r0, r3, r0
   2d69a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   2d69e:	e9c4 0106 	strd	r0, r1, [r4, #24]
}
   2d6a2:	bd70      	pop	{r4, r5, r6, pc}
   2d6a4:	20015810 	.word	0x20015810

0002d6a8 <validate_prediction.constprop.0>:
static int validate_prediction(const struct nrf_cloud_pgps_prediction *p,
   2d6a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d6ac:	4699      	mov	r9, r3
	if ((p->schema_version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) ||
   2d6ae:	7cc3      	ldrb	r3, [r0, #19]
static int validate_prediction(const struct nrf_cloud_pgps_prediction *p,
   2d6b0:	4604      	mov	r4, r0
	if ((p->schema_version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) ||
   2d6b2:	2b01      	cmp	r3, #1
static int validate_prediction(const struct nrf_cloud_pgps_prediction *p,
   2d6b4:	460e      	mov	r6, r1
   2d6b6:	4617      	mov	r7, r2
   2d6b8:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
	if ((p->schema_version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) ||
   2d6bc:	d106      	bne.n	2d6cc <validate_prediction.constprop.0+0x24>
   2d6be:	7803      	ldrb	r3, [r0, #0]
   2d6c0:	2b07      	cmp	r3, #7
   2d6c2:	d103      	bne.n	2d6cc <validate_prediction.constprop.0+0x24>
	    (p->time_type != NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK) ||
   2d6c4:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   2d6c8:	2b01      	cmp	r3, #1
   2d6ca:	d038      	beq.n	2d73e <validate_prediction.constprop.0+0x96>
		LOG_ERR("invalid prediction header");
   2d6cc:	2145      	movs	r1, #69	; 0x45
   2d6ce:	4831      	ldr	r0, [pc, #196]	; (2d794 <validate_prediction.constprop.0+0xec>)
   2d6d0:	f00f fafd 	bl	3ccce <z_log_minimal_printk>
		err = -EINVAL;
   2d6d4:	f06f 0515 	mvn.w	r5, #21
	int64_t gps_sec = npgps_gps_day_time_to_sec(gps_day,
   2d6d8:	4639      	mov	r1, r7
   2d6da:	4630      	mov	r0, r6
   2d6dc:	f001 faac 	bl	2ec38 <npgps_gps_day_time_to_sec>
   2d6e0:	4680      	mov	r8, r0
   2d6e2:	468b      	mov	fp, r1
	int64_t pred_sec = npgps_gps_day_time_to_sec(p->time.date_day,
   2d6e4:	f8b4 0003 	ldrh.w	r0, [r4, #3]
   2d6e8:	f8d4 1005 	ldr.w	r1, [r4, #5]
   2d6ec:	f001 faa4 	bl	2ec38 <npgps_gps_day_time_to_sec>
   2d6f0:	4602      	mov	r2, r0
	int64_t end_sec = pred_sec + period_min * SEC_PER_MIN;
   2d6f2:	468c      	mov	ip, r1
   2d6f4:	203c      	movs	r0, #60	; 0x3c
   2d6f6:	4613      	mov	r3, r2
	if ((gps_sec < pred_sec) || (gps_sec > end_sec)) {
   2d6f8:	4590      	cmp	r8, r2
   2d6fa:	eb7b 0101 	sbcs.w	r1, fp, r1
	int64_t end_sec = pred_sec + period_min * SEC_PER_MIN;
   2d6fe:	fbe9 3c00 	umlal	r3, ip, r9, r0
	if ((gps_sec < pred_sec) || (gps_sec > end_sec)) {
   2d702:	db03      	blt.n	2d70c <validate_prediction.constprop.0+0x64>
   2d704:	4543      	cmp	r3, r8
   2d706:	eb7c 010b 	sbcs.w	r1, ip, fp
   2d70a:	da07      	bge.n	2d71c <validate_prediction.constprop.0+0x74>
		LOG_ERR("prediction does not contain desired time; "
   2d70c:	9300      	str	r3, [sp, #0]
   2d70e:	2145      	movs	r1, #69	; 0x45
   2d710:	4643      	mov	r3, r8
   2d712:	4821      	ldr	r0, [pc, #132]	; (2d798 <validate_prediction.constprop.0+0xf0>)
   2d714:	f00f fadb 	bl	3ccce <z_log_minimal_printk>
		err = -EINVAL;
   2d718:	f06f 0515 	mvn.w	r5, #21
	if ((p->ephemeris_type != NRF_CLOUD_AGPS_EPHEMERIDES) ||
   2d71c:	7d22      	ldrb	r2, [r4, #20]
	    (p->ephemeris_count != NRF_CLOUD_PGPS_NUM_SV)) {
   2d71e:	f8b4 3015 	ldrh.w	r3, [r4, #21]
	if ((p->ephemeris_type != NRF_CLOUD_AGPS_EPHEMERIDES) ||
   2d722:	2a02      	cmp	r2, #2
   2d724:	d101      	bne.n	2d72a <validate_prediction.constprop.0+0x82>
   2d726:	2b20      	cmp	r3, #32
   2d728:	d020      	beq.n	2d76c <validate_prediction.constprop.0+0xc4>
		LOG_ERR("ephemeris header bad:%u, %u",
   2d72a:	2145      	movs	r1, #69	; 0x45
   2d72c:	481b      	ldr	r0, [pc, #108]	; (2d79c <validate_prediction.constprop.0+0xf4>)
   2d72e:	f00f face 	bl	3ccce <z_log_minimal_printk>
			err = -EINVAL;
   2d732:	f06f 0515 	mvn.w	r5, #21
}
   2d736:	4628      	mov	r0, r5
   2d738:	b003      	add	sp, #12
   2d73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (exact && (p->time.date_day != gps_day)) {
   2d73e:	f1ba 0f00 	cmp.w	sl, #0
   2d742:	d011      	beq.n	2d768 <validate_prediction.constprop.0+0xc0>
   2d744:	f8b0 2003 	ldrh.w	r2, [r0, #3]
   2d748:	428a      	cmp	r2, r1
   2d74a:	d005      	beq.n	2d758 <validate_prediction.constprop.0+0xb0>
		LOG_ERR("prediction day:%u, expected:%u",
   2d74c:	460b      	mov	r3, r1
   2d74e:	2145      	movs	r1, #69	; 0x45
   2d750:	4813      	ldr	r0, [pc, #76]	; (2d7a0 <validate_prediction.constprop.0+0xf8>)
		LOG_ERR("prediction time:%u, expected:%u",
   2d752:	f00f fabc 	bl	3ccce <z_log_minimal_printk>
   2d756:	e7bd      	b.n	2d6d4 <validate_prediction.constprop.0+0x2c>
	} else if (exact && (p->time.time_full_s != gps_time_of_day)) {
   2d758:	f8d0 2005 	ldr.w	r2, [r0, #5]
   2d75c:	42ba      	cmp	r2, r7
   2d75e:	d003      	beq.n	2d768 <validate_prediction.constprop.0+0xc0>
		LOG_ERR("prediction time:%u, expected:%u",
   2d760:	463b      	mov	r3, r7
   2d762:	2145      	movs	r1, #69	; 0x45
   2d764:	480f      	ldr	r0, [pc, #60]	; (2d7a4 <validate_prediction.constprop.0+0xfc>)
   2d766:	e7f4      	b.n	2d752 <validate_prediction.constprop.0+0xaa>
	int err = 0;
   2d768:	2500      	movs	r5, #0
   2d76a:	e7b5      	b.n	2d6d8 <validate_prediction.constprop.0+0x30>
	if (exact && !err) {
   2d76c:	f1ba 0f00 	cmp.w	sl, #0
   2d770:	d0e1      	beq.n	2d736 <validate_prediction.constprop.0+0x8e>
   2d772:	2d00      	cmp	r5, #0
   2d774:	d1df      	bne.n	2d736 <validate_prediction.constprop.0+0x8e>
		expected_sentinel = npgps_gps_day_time_to_sec(gps_day,
   2d776:	4639      	mov	r1, r7
   2d778:	4630      	mov	r0, r6
   2d77a:	f001 fa5d 	bl	2ec38 <npgps_gps_day_time_to_sec>
		stored_sentinel = p->sentinel;
   2d77e:	f8d4 37d7 	ldr.w	r3, [r4, #2007]	; 0x7d7
		if (expected_sentinel != stored_sentinel) {
   2d782:	4298      	cmp	r0, r3
   2d784:	d0d7      	beq.n	2d736 <validate_prediction.constprop.0+0x8e>
			LOG_ERR("prediction at:%p has stored_sentinel:0x%08X, "
   2d786:	9000      	str	r0, [sp, #0]
   2d788:	4622      	mov	r2, r4
   2d78a:	2145      	movs	r1, #69	; 0x45
   2d78c:	4806      	ldr	r0, [pc, #24]	; (2d7a8 <validate_prediction.constprop.0+0x100>)
   2d78e:	f00f fa9e 	bl	3ccce <z_log_minimal_printk>
   2d792:	e7ce      	b.n	2d732 <validate_prediction.constprop.0+0x8a>
   2d794:	0004919c 	.word	0x0004919c
   2d798:	00049204 	.word	0x00049204
   2d79c:	0004924c 	.word	0x0004924c
   2d7a0:	000491bb 	.word	0x000491bb
   2d7a4:	000491df 	.word	0x000491df
   2d7a8:	0004926d 	.word	0x0004926d

0002d7ac <open_storage>:
{
   2d7ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d7b0:	4604      	mov	r4, r0
   2d7b2:	460f      	mov	r7, r1
   2d7b4:	b085      	sub	sp, #20
   2d7b6:	4929      	ldr	r1, [pc, #164]	; (2d85c <open_storage+0xb0>)
   2d7b8:	4608      	mov	r0, r1
   2d7ba:	f013 fc9b 	bl	410f4 <z_device_is_ready>
	if (!device_is_ready(flash_dev)) {
   2d7be:	4927      	ldr	r1, [pc, #156]	; (2d85c <open_storage+0xb0>)
   2d7c0:	b950      	cbnz	r0, 2d7d8 <open_storage+0x2c>
		LOG_ERR("Flash device not ready:'%s'", flash_dev->name);
   2d7c2:	680a      	ldr	r2, [r1, #0]
   2d7c4:	4826      	ldr	r0, [pc, #152]	; (2d860 <open_storage+0xb4>)
   2d7c6:	2145      	movs	r1, #69	; 0x45
   2d7c8:	f00f fa81 	bl	3ccce <z_log_minimal_printk>
		return -ENODEV;
   2d7cc:	f06f 0412 	mvn.w	r4, #18
}
   2d7d0:	4620      	mov	r0, r4
   2d7d2:	b005      	add	sp, #20
   2d7d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	block_offset = offset % flash_page_size;
   2d7d8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2d880 <open_storage+0xd4>
	err = stream_flash_init(&stream, flash_dev,
   2d7dc:	4a21      	ldr	r2, [pc, #132]	; (2d864 <open_storage+0xb8>)
	block_offset = offset % flash_page_size;
   2d7de:	f8d8 3000 	ldr.w	r3, [r8]
	err = stream_flash_init(&stream, flash_dev,
   2d7e2:	6812      	ldr	r2, [r2, #0]
	block_offset = offset % flash_page_size;
   2d7e4:	fbb4 f5f3 	udiv	r5, r4, r3
   2d7e8:	fb03 4515 	mls	r5, r3, r5, r4
	err = stream_flash_init(&stream, flash_dev,
   2d7ec:	9202      	str	r2, [sp, #8]
				((uint32_t)storage) + offset,
   2d7ee:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2d884 <open_storage+0xd8>
	err = stream_flash_init(&stream, flash_dev,
   2d7f2:	4a1d      	ldr	r2, [pc, #116]	; (2d868 <open_storage+0xbc>)
	offset -= block_offset;
   2d7f4:	1b66      	subs	r6, r4, r5
	err = stream_flash_init(&stream, flash_dev,
   2d7f6:	6810      	ldr	r0, [r2, #0]
   2d7f8:	f8d9 2000 	ldr.w	r2, [r9]
   2d7fc:	1b2c      	subs	r4, r5, r4
   2d7fe:	4432      	add	r2, r6
   2d800:	4404      	add	r4, r0
   2d802:	9200      	str	r2, [sp, #0]
   2d804:	4a19      	ldr	r2, [pc, #100]	; (2d86c <open_storage+0xc0>)
   2d806:	9401      	str	r4, [sp, #4]
   2d808:	6812      	ldr	r2, [r2, #0]
   2d80a:	4819      	ldr	r0, [pc, #100]	; (2d870 <open_storage+0xc4>)
   2d80c:	f7f4 fbae 	bl	21f6c <stream_flash_init>
	if (err) {
   2d810:	4604      	mov	r4, r0
   2d812:	b148      	cbz	r0, 2d828 <open_storage+0x7c>
		LOG_ERR("Failed to init flash stream for offset %u: %d",
   2d814:	4603      	mov	r3, r0
   2d816:	4632      	mov	r2, r6
   2d818:	2145      	movs	r1, #69	; 0x45
   2d81a:	4816      	ldr	r0, [pc, #88]	; (2d874 <open_storage+0xc8>)
   2d81c:	f00f fa57 	bl	3ccce <z_log_minimal_printk>
		state = PGPS_NONE;
   2d820:	2200      	movs	r2, #0
   2d822:	4b15      	ldr	r3, [pc, #84]	; (2d878 <open_storage+0xcc>)
   2d824:	701a      	strb	r2, [r3, #0]
		return err;
   2d826:	e7d3      	b.n	2d7d0 <open_storage+0x24>
	if (preserve && (block_offset != 0) && (block_offset < flash_page_size)) {
   2d828:	2f00      	cmp	r7, #0
   2d82a:	d0d1      	beq.n	2d7d0 <open_storage+0x24>
   2d82c:	2d00      	cmp	r5, #0
   2d82e:	d0cf      	beq.n	2d7d0 <open_storage+0x24>
   2d830:	f8d8 3000 	ldr.w	r3, [r8]
   2d834:	42ab      	cmp	r3, r5
   2d836:	d9cb      	bls.n	2d7d0 <open_storage+0x24>
		uint8_t *p = storage + offset;
   2d838:	f8d9 1000 	ldr.w	r1, [r9]
		err = stream_flash_buffered_write(&stream, p, block_offset, false);
   2d83c:	4603      	mov	r3, r0
   2d83e:	462a      	mov	r2, r5
   2d840:	480b      	ldr	r0, [pc, #44]	; (2d870 <open_storage+0xc4>)
   2d842:	4431      	add	r1, r6
   2d844:	f00f ff37 	bl	3d6b6 <stream_flash_buffered_write>
		if (err) {
   2d848:	4604      	mov	r4, r0
   2d84a:	2800      	cmp	r0, #0
   2d84c:	d0c0      	beq.n	2d7d0 <open_storage+0x24>
			LOG_ERR("Error writing back %u original bytes", block_offset);
   2d84e:	462a      	mov	r2, r5
   2d850:	2145      	movs	r1, #69	; 0x45
   2d852:	480a      	ldr	r0, [pc, #40]	; (2d87c <open_storage+0xd0>)
   2d854:	f00f fa3b 	bl	3ccce <z_log_minimal_printk>
   2d858:	e7ba      	b.n	2d7d0 <open_storage+0x24>
   2d85a:	bf00      	nop
   2d85c:	000425a4 	.word	0x000425a4
   2d860:	000492af 	.word	0x000492af
   2d864:	2001a118 	.word	0x2001a118
   2d868:	2001a128 	.word	0x2001a128
   2d86c:	2001a150 	.word	0x2001a150
   2d870:	2001a12c 	.word	0x2001a12c
   2d874:	000492d0 	.word	0x000492d0
   2d878:	2001d2bf 	.word	0x2001d2bf
   2d87c:	00049303 	.word	0x00049303
   2d880:	2001a11c 	.word	0x2001a11c
   2d884:	2001a124 	.word	0x2001a124

0002d888 <nrf_cloud_pgps_loading>:
		(state == PGPS_REQUESTING) ||
   2d888:	4b03      	ldr	r3, [pc, #12]	; (2d898 <nrf_cloud_pgps_loading+0x10>)
   2d88a:	7818      	ldrb	r0, [r3, #0]
   2d88c:	3803      	subs	r0, #3
}
   2d88e:	2802      	cmp	r0, #2
   2d890:	bf8c      	ite	hi
   2d892:	2000      	movhi	r0, #0
   2d894:	2001      	movls	r0, #1
   2d896:	4770      	bx	lr
   2d898:	2001d2bf 	.word	0x2001d2bf

0002d89c <pgps_request>:
{
   2d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (state == PGPS_NONE) {
   2d89e:	4f3f      	ldr	r7, [pc, #252]	; (2d99c <pgps_request+0x100>)
{
   2d8a0:	4605      	mov	r5, r0
	if (state == PGPS_NONE) {
   2d8a2:	783b      	ldrb	r3, [r7, #0]
   2d8a4:	b93b      	cbnz	r3, 2d8b6 <pgps_request+0x1a>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2d8a6:	2145      	movs	r1, #69	; 0x45
   2d8a8:	483d      	ldr	r0, [pc, #244]	; (2d9a0 <pgps_request+0x104>)
   2d8aa:	f00f fa10 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   2d8ae:	f06f 0415 	mvn.w	r4, #21
}
   2d8b2:	4620      	mov	r0, r4
   2d8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (nrf_cloud_pgps_loading()) {
   2d8b6:	f7ff ffe7 	bl	2d888 <nrf_cloud_pgps_loading>
   2d8ba:	2800      	cmp	r0, #0
   2d8bc:	d16c      	bne.n	2d998 <pgps_request+0xfc>
	if (request->prediction_count < index.header.prediction_count) {
   2d8be:	4b39      	ldr	r3, [pc, #228]	; (2d9a4 <pgps_request+0x108>)
   2d8c0:	882c      	ldrh	r4, [r5, #0]
   2d8c2:	8899      	ldrh	r1, [r3, #4]
   2d8c4:	b2a2      	uxth	r2, r4
   2d8c6:	428a      	cmp	r2, r1
		index.partial_request = true;
   2d8c8:	bf3e      	ittt	cc
   2d8ca:	2001      	movcc	r0, #1
		index.pnum_offset = index.header.prediction_count -
   2d8cc:	1a89      	subcc	r1, r1, r2
   2d8ce:	f883 102d 	strbcc.w	r1, [r3, #45]	; 0x2d
	ignore_packets = false;
   2d8d2:	f04f 0100 	mov.w	r1, #0
		index.partial_request = true;
   2d8d6:	bf32      	itee	cc
   2d8d8:	f883 002f 	strbcc.w	r0, [r3, #47]	; 0x2f
		index.partial_request = false;
   2d8dc:	f883 002f 	strbcs.w	r0, [r3, #47]	; 0x2f
		index.pnum_offset = 0;
   2d8e0:	f883 002d 	strbcs.w	r0, [r3, #45]	; 0x2d
	index.expected_count = request->prediction_count;
   2d8e4:	84dc      	strh	r4, [r3, #38]	; 0x26
	ignore_packets = false;
   2d8e6:	4b30      	ldr	r3, [pc, #192]	; (2d9a8 <pgps_request+0x10c>)
	LOG_INF("Requesting %u predictions...", request->prediction_count);
   2d8e8:	4830      	ldr	r0, [pc, #192]	; (2d9ac <pgps_request+0x110>)
	ignore_packets = false;
   2d8ea:	7019      	strb	r1, [r3, #0]
	LOG_INF("Requesting %u predictions...", request->prediction_count);
   2d8ec:	2149      	movs	r1, #73	; 0x49
   2d8ee:	f00f f9ee 	bl	3ccce <z_log_minimal_printk>
	pgps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_PGPS,
   2d8f2:	492f      	ldr	r1, [pc, #188]	; (2d9b0 <pgps_request+0x114>)
   2d8f4:	482f      	ldr	r0, [pc, #188]	; (2d9b4 <pgps_request+0x118>)
   2d8f6:	f7fc fcf9 	bl	2a2ec <json_create_req_obj>
	data_obj = cJSON_AddObjectToObject(pgps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2d8fa:	492f      	ldr	r1, [pc, #188]	; (2d9b8 <pgps_request+0x11c>)
	pgps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_PGPS,
   2d8fc:	4606      	mov	r6, r0
	data_obj = cJSON_AddObjectToObject(pgps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2d8fe:	f012 fb03 	bl	3ff08 <cJSON_AddObjectToObject>
   2d902:	4604      	mov	r4, r0
	if (!pgps_req_obj || !data_obj) {
   2d904:	b17e      	cbz	r6, 2d926 <pgps_request+0x8a>
   2d906:	b170      	cbz	r0, 2d926 <pgps_request+0x8a>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_PRED_COUNT,
   2d908:	8828      	ldrh	r0, [r5, #0]
   2d90a:	f7ee fedb 	bl	1c6c4 <__aeabi_ui2d>
   2d90e:	4602      	mov	r2, r0
   2d910:	460b      	mov	r3, r1
   2d912:	4620      	mov	r0, r4
   2d914:	4929      	ldr	r1, [pc, #164]	; (2d9bc <pgps_request+0x120>)
   2d916:	f012 fa76 	bl	3fe06 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2d91a:	4602      	mov	r2, r0
   2d91c:	b930      	cbnz	r0, 2d92c <pgps_request+0x90>
		LOG_ERR("Failed to add pred count to P-GPS request:%d", err);
   2d91e:	2145      	movs	r1, #69	; 0x45
   2d920:	4827      	ldr	r0, [pc, #156]	; (2d9c0 <pgps_request+0x124>)
		LOG_ERR("Failed to add gps time to P-GPS request:%d", err);
   2d922:	f00f f9d4 	bl	3ccce <z_log_minimal_printk>
		err = -ENOMEM;
   2d926:	f06f 040b 	mvn.w	r4, #11
   2d92a:	e031      	b.n	2d990 <pgps_request+0xf4>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_INT_MIN,
   2d92c:	8868      	ldrh	r0, [r5, #2]
   2d92e:	f7ee fec9 	bl	1c6c4 <__aeabi_ui2d>
   2d932:	4602      	mov	r2, r0
   2d934:	460b      	mov	r3, r1
   2d936:	4620      	mov	r0, r4
   2d938:	4922      	ldr	r1, [pc, #136]	; (2d9c4 <pgps_request+0x128>)
   2d93a:	f012 fa64 	bl	3fe06 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2d93e:	4602      	mov	r2, r0
   2d940:	b910      	cbnz	r0, 2d948 <pgps_request+0xac>
		LOG_ERR("Failed to add pred int min to P-GPS request:%d", err);
   2d942:	2145      	movs	r1, #69	; 0x45
   2d944:	4820      	ldr	r0, [pc, #128]	; (2d9c8 <pgps_request+0x12c>)
   2d946:	e7ec      	b.n	2d922 <pgps_request+0x86>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_GPS_DAY,
   2d948:	88a8      	ldrh	r0, [r5, #4]
   2d94a:	f7ee febb 	bl	1c6c4 <__aeabi_ui2d>
   2d94e:	4602      	mov	r2, r0
   2d950:	460b      	mov	r3, r1
   2d952:	4620      	mov	r0, r4
   2d954:	491d      	ldr	r1, [pc, #116]	; (2d9cc <pgps_request+0x130>)
   2d956:	f012 fa56 	bl	3fe06 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2d95a:	4602      	mov	r2, r0
   2d95c:	b910      	cbnz	r0, 2d964 <pgps_request+0xc8>
		LOG_ERR("Failed to add gps day to P-GPS request:%d", err);
   2d95e:	2145      	movs	r1, #69	; 0x45
   2d960:	481b      	ldr	r0, [pc, #108]	; (2d9d0 <pgps_request+0x134>)
   2d962:	e7de      	b.n	2d922 <pgps_request+0x86>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_GPS_TIME,
   2d964:	f8d5 0006 	ldr.w	r0, [r5, #6]
   2d968:	f7ee feac 	bl	1c6c4 <__aeabi_ui2d>
   2d96c:	4602      	mov	r2, r0
   2d96e:	460b      	mov	r3, r1
   2d970:	4620      	mov	r0, r4
   2d972:	4918      	ldr	r1, [pc, #96]	; (2d9d4 <pgps_request+0x138>)
   2d974:	f012 fa47 	bl	3fe06 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2d978:	4602      	mov	r2, r0
   2d97a:	b910      	cbnz	r0, 2d982 <pgps_request+0xe6>
		LOG_ERR("Failed to add gps time to P-GPS request:%d", err);
   2d97c:	2145      	movs	r1, #69	; 0x45
   2d97e:	4816      	ldr	r0, [pc, #88]	; (2d9d8 <pgps_request+0x13c>)
   2d980:	e7cf      	b.n	2d922 <pgps_request+0x86>
	err = json_send_to_cloud(pgps_req_obj);
   2d982:	4630      	mov	r0, r6
   2d984:	f7fd f876 	bl	2aa74 <json_send_to_cloud>
	if (!err) {
   2d988:	4604      	mov	r4, r0
   2d98a:	b908      	cbnz	r0, 2d990 <pgps_request+0xf4>
		state = PGPS_REQUESTING;
   2d98c:	2304      	movs	r3, #4
   2d98e:	703b      	strb	r3, [r7, #0]
	cJSON_Delete(pgps_req_obj);
   2d990:	4630      	mov	r0, r6
   2d992:	f004 fb6f 	bl	32074 <cJSON_Delete>
	return err;
   2d996:	e78c      	b.n	2d8b2 <pgps_request+0x16>
		return 0;
   2d998:	2400      	movs	r4, #0
   2d99a:	e78a      	b.n	2d8b2 <pgps_request+0x16>
   2d99c:	2001d2bf 	.word	0x2001d2bf
   2d9a0:	0004932d 	.word	0x0004932d
   2d9a4:	20015810 	.word	0x20015810
   2d9a8:	2001c9d9 	.word	0x2001c9d9
   2d9ac:	00049356 	.word	0x00049356
   2d9b0:	000437fe 	.word	0x000437fe
   2d9b4:	0004838b 	.word	0x0004838b
   2d9b8:	000438da 	.word	0x000438da
   2d9bc:	00049378 	.word	0x00049378
   2d9c0:	00049388 	.word	0x00049388
   2d9c4:	000493ba 	.word	0x000493ba
   2d9c8:	000493d4 	.word	0x000493d4
   2d9cc:	00049408 	.word	0x00049408
   2d9d0:	00049414 	.word	0x00049414
   2d9d4:	00049443 	.word	0x00049443
   2d9d8:	0004945c 	.word	0x0004945c

0002d9dc <pgps_request_all>:
{
   2d9dc:	b510      	push	{r4, lr}
	if (state == PGPS_NONE) {
   2d9de:	4b19      	ldr	r3, [pc, #100]	; (2da44 <pgps_request_all+0x68>)
{
   2d9e0:	b086      	sub	sp, #24
	if (state == PGPS_NONE) {
   2d9e2:	781b      	ldrb	r3, [r3, #0]
   2d9e4:	b93b      	cbnz	r3, 2d9f6 <pgps_request_all+0x1a>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2d9e6:	4818      	ldr	r0, [pc, #96]	; (2da48 <pgps_request_all+0x6c>)
   2d9e8:	2145      	movs	r1, #69	; 0x45
   2d9ea:	f00f f970 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   2d9ee:	f06f 0015 	mvn.w	r0, #21
}
   2d9f2:	b006      	add	sp, #24
   2d9f4:	bd10      	pop	{r4, pc}
	if (nrf_cloud_pgps_loading()) {
   2d9f6:	f7ff ff47 	bl	2d888 <nrf_cloud_pgps_loading>
   2d9fa:	4604      	mov	r4, r0
   2d9fc:	b9f8      	cbnz	r0, 2da3e <pgps_request_all+0x62>
	npgps_reset_block_pool();
   2d9fe:	f001 f9f9 	bl	2edf4 <npgps_reset_block_pool>
	index.stale_server_data = false;
   2da02:	4b12      	ldr	r3, [pc, #72]	; (2da4c <pgps_request_all+0x70>)
	err = npgps_get_time(NULL, &gps_day, &gps_time_of_day);
   2da04:	4620      	mov	r0, r4
   2da06:	aa02      	add	r2, sp, #8
   2da08:	f10d 0106 	add.w	r1, sp, #6
	index.stale_server_data = false;
   2da0c:	f883 4030 	strb.w	r4, [r3, #48]	; 0x30
	err = npgps_get_time(NULL, &gps_day, &gps_time_of_day);
   2da10:	f011 ff8a 	bl	3f928 <npgps_get_time>
	if (err) {
   2da14:	b110      	cbz	r0, 2da1c <pgps_request_all+0x40>
		gps_day = 0;
   2da16:	f8ad 4006 	strh.w	r4, [sp, #6]
		gps_time_of_day = 0;
   2da1a:	9402      	str	r4, [sp, #8]
	struct gps_pgps_request request = {
   2da1c:	232a      	movs	r3, #42	; 0x2a
   2da1e:	f8ad 300c 	strh.w	r3, [sp, #12]
   2da22:	23f0      	movs	r3, #240	; 0xf0
   2da24:	f8ad 300e 	strh.w	r3, [sp, #14]
   2da28:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return pgps_request(&request);
   2da2c:	a803      	add	r0, sp, #12
	struct gps_pgps_request request = {
   2da2e:	f8ad 3010 	strh.w	r3, [sp, #16]
   2da32:	9b02      	ldr	r3, [sp, #8]
   2da34:	f8cd 3012 	str.w	r3, [sp, #18]
	return pgps_request(&request);
   2da38:	f7ff ff30 	bl	2d89c <pgps_request>
   2da3c:	e7d9      	b.n	2d9f2 <pgps_request_all+0x16>
		return 0;
   2da3e:	2000      	movs	r0, #0
   2da40:	e7d7      	b.n	2d9f2 <pgps_request_all+0x16>
   2da42:	bf00      	nop
   2da44:	2001d2bf 	.word	0x2001d2bf
   2da48:	0004932d 	.word	0x0004932d
   2da4c:	20015810 	.word	0x20015810

0002da50 <nrf_cloud_pgps_find_prediction>:
{
   2da50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (state == PGPS_NONE) {
   2da54:	4a9c      	ldr	r2, [pc, #624]	; (2dcc8 <nrf_cloud_pgps_find_prediction+0x278>)
	int64_t start_sec = index.start_sec;
   2da56:	4c9d      	ldr	r4, [pc, #628]	; (2dccc <nrf_cloud_pgps_find_prediction+0x27c>)
{
   2da58:	b08d      	sub	sp, #52	; 0x34
	int64_t end_sec = index.end_sec;
   2da5a:	e9d4 a306 	ldrd	sl, r3, [r4, #24]
   2da5e:	9307      	str	r3, [sp, #28]
	if (state == PGPS_NONE) {
   2da60:	7813      	ldrb	r3, [r2, #0]
{
   2da62:	4605      	mov	r5, r0
	int64_t start_sec = index.start_sec;
   2da64:	e9d4 8b04 	ldrd	r8, fp, [r4, #16]
	uint16_t start_day = index.header.gps_day;
   2da68:	8966      	ldrh	r6, [r4, #10]
	uint32_t start_time = index.header.gps_time_of_day;
   2da6a:	68e7      	ldr	r7, [r4, #12]
	uint16_t period_min = index.header.prediction_period_min;
   2da6c:	f8b4 9008 	ldrh.w	r9, [r4, #8]
	if (state == PGPS_NONE) {
   2da70:	b933      	cbnz	r3, 2da80 <nrf_cloud_pgps_find_prediction+0x30>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2da72:	2145      	movs	r1, #69	; 0x45
   2da74:	4896      	ldr	r0, [pc, #600]	; (2dcd0 <nrf_cloud_pgps_find_prediction+0x280>)
   2da76:	f00f f92a 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   2da7a:	f06f 0415 	mvn.w	r4, #21
   2da7e:	e015      	b.n	2daac <nrf_cloud_pgps_find_prediction+0x5c>
	if (prediction == NULL) {
   2da80:	2800      	cmp	r0, #0
   2da82:	d0fa      	beq.n	2da7a <nrf_cloud_pgps_find_prediction+0x2a>
	*prediction = NULL;
   2da84:	2300      	movs	r3, #0
	if (index.stale_server_data) {
   2da86:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
	*prediction = NULL;
   2da8a:	6003      	str	r3, [r0, #0]
	if (index.stale_server_data) {
   2da8c:	b191      	cbz	r1, 2dab4 <nrf_cloud_pgps_find_prediction+0x64>
		LOG_ERR("server error: expired data");
   2da8e:	2145      	movs	r1, #69	; 0x45
   2da90:	4890      	ldr	r0, [pc, #576]	; (2dcd4 <nrf_cloud_pgps_find_prediction+0x284>)
   2da92:	f00f f91c 	bl	3ccce <z_log_minimal_printk>
		index.cur_pnum = 0xff;
   2da96:	21ff      	movs	r1, #255	; 0xff
   2da98:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
		state = PGPS_EXPIRED;
   2da9c:	2102      	movs	r1, #2
		pgps_need_assistance = false; /* make sure we request it */
   2da9e:	2300      	movs	r3, #0
		state = PGPS_EXPIRED;
   2daa0:	4a89      	ldr	r2, [pc, #548]	; (2dcc8 <nrf_cloud_pgps_find_prediction+0x278>)
   2daa2:	7011      	strb	r1, [r2, #0]
		pgps_need_assistance = false; /* make sure we request it */
   2daa4:	4a8c      	ldr	r2, [pc, #560]	; (2dcd8 <nrf_cloud_pgps_find_prediction+0x288>)
   2daa6:	6013      	str	r3, [r2, #0]
		return -ENODATA;
   2daa8:	f06f 043c 	mvn.w	r4, #60	; 0x3c
}
   2daac:	4620      	mov	r0, r4
   2daae:	b00d      	add	sp, #52	; 0x34
   2dab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = npgps_get_shifted_time(&cur_gps_sec, &cur_gps_day,
   2dab4:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   2dab8:	aa09      	add	r2, sp, #36	; 0x24
   2daba:	f10d 0122 	add.w	r1, sp, #34	; 0x22
   2dabe:	a80a      	add	r0, sp, #40	; 0x28
   2dac0:	f001 f8d8 	bl	2ec74 <npgps_get_shifted_time>
	if (err < 0) {
   2dac4:	2800      	cmp	r0, #0
   2dac6:	da07      	bge.n	2dad8 <nrf_cloud_pgps_find_prediction+0x88>
		LOG_INF("Unknown current time");
   2dac8:	2149      	movs	r1, #73	; 0x49
   2daca:	4884      	ldr	r0, [pc, #528]	; (2dcdc <nrf_cloud_pgps_find_prediction+0x28c>)
   2dacc:	f00f f8ff 	bl	3ccce <z_log_minimal_printk>
		cur_gps_sec = 0;
   2dad0:	2200      	movs	r2, #0
   2dad2:	2300      	movs	r3, #0
   2dad4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2dad8:	2207      	movs	r2, #7
	print_time_details("Looking for prediction for:",
   2dada:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
   2dade:	9c09      	ldr	r4, [sp, #36]	; 0x24
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2dae0:	fbb0 f2f2 	udiv	r2, r0, r2
   2dae4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
   2dae8:	1ac3      	subs	r3, r0, r3
   2daea:	497d      	ldr	r1, [pc, #500]	; (2dce0 <nrf_cloud_pgps_find_prediction+0x290>)
   2daec:	b29b      	uxth	r3, r3
   2daee:	fb01 4103 	mla	r1, r1, r3, r4
	LOG_INF("%s GPS sec:%u, day:%u, time of day:%u, week:%u, "
   2daf2:	ea4f 1c11 	mov.w	ip, r1, lsr #4
   2daf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2dafa:	e9cd 1c04 	strd	r1, ip, [sp, #16]
   2dafe:	e9cd 0400 	strd	r0, r4, [sp]
   2db02:	2149      	movs	r1, #73	; 0x49
   2db04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2db06:	4a77      	ldr	r2, [pc, #476]	; (2dce4 <nrf_cloud_pgps_find_prediction+0x294>)
   2db08:	4877      	ldr	r0, [pc, #476]	; (2dce8 <nrf_cloud_pgps_find_prediction+0x298>)
   2db0a:	f00f f8e0 	bl	3ccce <z_log_minimal_printk>
	if ((start_day == 0) && (start_time == 0)) {
   2db0e:	b9c6      	cbnz	r6, 2db42 <nrf_cloud_pgps_find_prediction+0xf2>
   2db10:	b9bf      	cbnz	r7, 2db42 <nrf_cloud_pgps_find_prediction+0xf2>
		if (nrf_cloud_pgps_loading()) {
   2db12:	f7ff feb9 	bl	2d888 <nrf_cloud_pgps_loading>
   2db16:	b130      	cbz	r0, 2db26 <nrf_cloud_pgps_find_prediction+0xd6>
			LOG_WRN("Predictions not loaded yet");
   2db18:	2157      	movs	r1, #87	; 0x57
   2db1a:	4874      	ldr	r0, [pc, #464]	; (2dcec <nrf_cloud_pgps_find_prediction+0x29c>)
   2db1c:	f00f f8d7 	bl	3ccce <z_log_minimal_printk>
		return -ELOADING;
   2db20:	f46f 54fa 	mvn.w	r4, #8000	; 0x1f40
   2db24:	e7c2      	b.n	2daac <nrf_cloud_pgps_find_prediction+0x5c>
		index.cur_pnum = 0xff;
   2db26:	22ff      	movs	r2, #255	; 0xff
   2db28:	4b68      	ldr	r3, [pc, #416]	; (2dccc <nrf_cloud_pgps_find_prediction+0x27c>)
		LOG_WRN("No data stored");
   2db2a:	2157      	movs	r1, #87	; 0x57
		index.cur_pnum = 0xff;
   2db2c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		state = PGPS_EXPIRED;
   2db30:	2202      	movs	r2, #2
   2db32:	4b65      	ldr	r3, [pc, #404]	; (2dcc8 <nrf_cloud_pgps_find_prediction+0x278>)
		LOG_WRN("No data stored");
   2db34:	486e      	ldr	r0, [pc, #440]	; (2dcf0 <nrf_cloud_pgps_find_prediction+0x2a0>)
		state = PGPS_EXPIRED;
   2db36:	701a      	strb	r2, [r3, #0]
		pgps_need_assistance = false; /* make sure we request it */
   2db38:	4b67      	ldr	r3, [pc, #412]	; (2dcd8 <nrf_cloud_pgps_find_prediction+0x288>)
   2db3a:	601f      	str	r7, [r3, #0]
		LOG_WRN("No data stored");
   2db3c:	f00f f8c7 	bl	3ccce <z_log_minimal_printk>
   2db40:	e7b2      	b.n	2daa8 <nrf_cloud_pgps_find_prediction+0x58>
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2db42:	2107      	movs	r1, #7
   2db44:	fbb6 f1f1 	udiv	r1, r6, r1
	offset_sec = cur_gps_sec - start_sec;
   2db48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2db4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2db4c:	ebb4 0408 	subs.w	r4, r4, r8
   2db50:	eb63 0b0b 	sbc.w	fp, r3, fp
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2db54:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
   2db58:	4a61      	ldr	r2, [pc, #388]	; (2dce0 <nrf_cloud_pgps_find_prediction+0x290>)
   2db5a:	1af3      	subs	r3, r6, r3
   2db5c:	b29b      	uxth	r3, r3
   2db5e:	fb02 7203 	mla	r2, r2, r3, r7
	LOG_INF("%s GPS sec:%u, day:%u, time of day:%u, week:%u, "
   2db62:	0910      	lsrs	r0, r2, #4
   2db64:	e9cd 2004 	strd	r2, r0, [sp, #16]
   2db68:	e9cd 1302 	strd	r1, r3, [sp, #8]
   2db6c:	4a61      	ldr	r2, [pc, #388]	; (2dcf4 <nrf_cloud_pgps_find_prediction+0x2a4>)
   2db6e:	4643      	mov	r3, r8
   2db70:	2149      	movs	r1, #73	; 0x49
   2db72:	485d      	ldr	r0, [pc, #372]	; (2dce8 <nrf_cloud_pgps_find_prediction+0x298>)
   2db74:	e9cd 6700 	strd	r6, r7, [sp]
   2db78:	f00f f8a9 	bl	3ccce <z_log_minimal_printk>
	LOG_INF("current offset into prediction set, sec:%d", (int32_t)offset_sec);
   2db7c:	4622      	mov	r2, r4
   2db7e:	2149      	movs	r1, #73	; 0x49
   2db80:	485d      	ldr	r0, [pc, #372]	; (2dcf8 <nrf_cloud_pgps_find_prediction+0x2a8>)
   2db82:	f00f f8a4 	bl	3ccce <z_log_minimal_printk>
	if (offset_sec < 0) {
   2db86:	f1bb 0f00 	cmp.w	fp, #0
   2db8a:	da05      	bge.n	2db98 <nrf_cloud_pgps_find_prediction+0x148>
		LOG_WRN("cannot find prediction; real time not known");
   2db8c:	2157      	movs	r1, #87	; 0x57
   2db8e:	485b      	ldr	r0, [pc, #364]	; (2dcfc <nrf_cloud_pgps_find_prediction+0x2ac>)
   2db90:	f00f f89d 	bl	3ccce <z_log_minimal_printk>
		return -ETIMEUNKNOWN;
   2db94:	4c5a      	ldr	r4, [pc, #360]	; (2dd00 <nrf_cloud_pgps_find_prediction+0x2b0>)
   2db96:	e789      	b.n	2daac <nrf_cloud_pgps_find_prediction+0x5c>
	} else if (cur_gps_sec > end_sec) {
   2db98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2db9a:	9a07      	ldr	r2, [sp, #28]
   2db9c:	459a      	cmp	sl, r3
   2db9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2dba0:	eb72 0303 	sbcs.w	r3, r2, r3
   2dba4:	da06      	bge.n	2dbb4 <nrf_cloud_pgps_find_prediction+0x164>
			LOG_WRN("data expired!");
   2dba6:	2157      	movs	r1, #87	; 0x57
   2dba8:	4856      	ldr	r0, [pc, #344]	; (2dd04 <nrf_cloud_pgps_find_prediction+0x2b4>)
   2dbaa:	f00f f890 	bl	3ccce <z_log_minimal_printk>
			return -ETIMEDOUT;
   2dbae:	f06f 0473 	mvn.w	r4, #115	; 0x73
   2dbb2:	e77b      	b.n	2daac <nrf_cloud_pgps_find_prediction+0x5c>
		pnum = offset_sec / (SEC_PER_MIN * period_min);
   2dbb4:	223c      	movs	r2, #60	; 0x3c
   2dbb6:	2300      	movs	r3, #0
   2dbb8:	4620      	mov	r0, r4
   2dbba:	4659      	mov	r1, fp
   2dbbc:	fb02 f209 	mul.w	r2, r2, r9
   2dbc0:	f7ef f942 	bl	1ce48 <__aeabi_ldivmod>
		if (pnum >= index.header.prediction_count) {
   2dbc4:	4e41      	ldr	r6, [pc, #260]	; (2dccc <nrf_cloud_pgps_find_prediction+0x27c>)
		pnum = offset_sec / (SEC_PER_MIN * period_min);
   2dbc6:	4604      	mov	r4, r0
		if (pnum >= index.header.prediction_count) {
   2dbc8:	88b3      	ldrh	r3, [r6, #4]
   2dbca:	4283      	cmp	r3, r0
   2dbcc:	dc06      	bgt.n	2dbdc <nrf_cloud_pgps_find_prediction+0x18c>
			LOG_WRN("prediction num:%d -- too large", pnum);
   2dbce:	4602      	mov	r2, r0
   2dbd0:	2157      	movs	r1, #87	; 0x57
   2dbd2:	484d      	ldr	r0, [pc, #308]	; (2dd08 <nrf_cloud_pgps_find_prediction+0x2b8>)
   2dbd4:	f00f f87b 	bl	3ccce <z_log_minimal_printk>
			pnum = index.header.prediction_count - 1;
   2dbd8:	88b4      	ldrh	r4, [r6, #4]
   2dbda:	3c01      	subs	r4, #1
	LOG_INF("Selected prediction num:%d", pnum);
   2dbdc:	484b      	ldr	r0, [pc, #300]	; (2dd0c <nrf_cloud_pgps_find_prediction+0x2bc>)
   2dbde:	4622      	mov	r2, r4
   2dbe0:	2149      	movs	r1, #73	; 0x49
   2dbe2:	f00f f874 	bl	3ccce <z_log_minimal_printk>
	*prediction = index.predictions[pnum];
   2dbe6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   2dbea:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	index.cur_pnum = pnum;
   2dbec:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
	*prediction = index.predictions[pnum];
   2dbf0:	6028      	str	r0, [r5, #0]
	if (*prediction) {
   2dbf2:	2800      	cmp	r0, #0
   2dbf4:	d054      	beq.n	2dca0 <nrf_cloud_pgps_find_prediction+0x250>
		err = validate_prediction(*prediction,
   2dbf6:	2300      	movs	r3, #0
   2dbf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2dbfa:	9300      	str	r3, [sp, #0]
   2dbfc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   2dc00:	464b      	mov	r3, r9
   2dc02:	f7ff fd51 	bl	2d6a8 <validate_prediction.constprop.0>
		if (!err) {
   2dc06:	2800      	cmp	r0, #0
   2dc08:	d15b      	bne.n	2dcc2 <nrf_cloud_pgps_find_prediction+0x272>
			start_expiration_timer(pnum, cur_gps_sec);
   2dc0a:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
	return z_timeout_remaining(&timer->timeout);
   2dc0e:	4840      	ldr	r0, [pc, #256]	; (2dd10 <nrf_cloud_pgps_find_prediction+0x2c0>)
   2dc10:	f00b f822 	bl	38c58 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2dc14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2dc18:	fba0 0302 	umull	r0, r3, r0, r2
   2dc1c:	0bc0      	lsrs	r0, r0, #15
	if (k_timer_remaining_get(&prediction_timer) > 0) {
   2dc1e:	ea50 4343 	orrs.w	r3, r0, r3, lsl #17
   2dc22:	f47f af43 	bne.w	2daac <nrf_cloud_pgps_find_prediction+0x5c>
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2dc26:	e9d6 5104 	ldrd	r5, r1, [r6, #16]
   2dc2a:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
	end_sec = index.header.prediction_period_min * SEC_PER_MIN + start_sec;
   2dc2c:	8930      	ldrh	r0, [r6, #8]
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2dc2e:	4363      	muls	r3, r4
   2dc30:	195d      	adds	r5, r3, r5
	end_sec = index.header.prediction_period_min * SEC_PER_MIN + start_sec;
   2dc32:	f04f 033c 	mov.w	r3, #60	; 0x3c
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2dc36:	f141 0100 	adc.w	r1, r1, #0
	end_sec = index.header.prediction_period_min * SEC_PER_MIN + start_sec;
   2dc3a:	fbe0 5103 	umlal	r5, r1, r0, r3
	delta = (end_sec - cur_gps_sec) + 1;
   2dc3e:	ebb5 0508 	subs.w	r5, r5, r8
   2dc42:	eb61 0107 	sbc.w	r1, r1, r7
   2dc46:	3501      	adds	r5, #1
   2dc48:	f141 0100 	adc.w	r1, r1, #0
	if (delta > 0) {
   2dc4c:	2d01      	cmp	r5, #1
   2dc4e:	f171 0300 	sbcs.w	r3, r1, #0
   2dc52:	db21      	blt.n	2dc98 <nrf_cloud_pgps_find_prediction+0x248>
		k_timer_start(&prediction_timer, K_SECONDS(delta), K_NO_WAIT);
   2dc54:	fba5 0302 	umull	r0, r3, r5, r2
   2dc58:	fb02 3101 	mla	r1, r2, r1, r3
			return ((t * to_hz + off) / from_hz);
   2dc5c:	f240 33e7 	movw	r3, #999	; 0x3e7
   2dc60:	03c9      	lsls	r1, r1, #15
   2dc62:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2dc66:	03c0      	lsls	r0, r0, #15
   2dc68:	18c0      	adds	r0, r0, r3
   2dc6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2dc6e:	f04f 0300 	mov.w	r3, #0
   2dc72:	f141 0100 	adc.w	r1, r1, #0
   2dc76:	f7ef f937 	bl	1cee8 <__aeabi_uldivmod>
   2dc7a:	4602      	mov	r2, r0
   2dc7c:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2dc7e:	2100      	movs	r1, #0
   2dc80:	2000      	movs	r0, #0
   2dc82:	e9cd 0100 	strd	r0, r1, [sp]
   2dc86:	4822      	ldr	r0, [pc, #136]	; (2dd10 <nrf_cloud_pgps_find_prediction+0x2c0>)
   2dc88:	f00b fa06 	bl	39098 <z_impl_k_timer_start>
		LOG_INF("injecting next prediction in %d seconds", (int32_t)delta);
   2dc8c:	462a      	mov	r2, r5
   2dc8e:	2149      	movs	r1, #73	; 0x49
   2dc90:	4820      	ldr	r0, [pc, #128]	; (2dd14 <nrf_cloud_pgps_find_prediction+0x2c4>)
		LOG_ERR("cannot start prediction expiration timer; delta = %d", (int32_t)delta);
   2dc92:	f00f f81c 	bl	3ccce <z_log_minimal_printk>
   2dc96:	e709      	b.n	2daac <nrf_cloud_pgps_find_prediction+0x5c>
   2dc98:	462a      	mov	r2, r5
   2dc9a:	2145      	movs	r1, #69	; 0x45
   2dc9c:	481e      	ldr	r0, [pc, #120]	; (2dd18 <nrf_cloud_pgps_find_prediction+0x2c8>)
   2dc9e:	e7f8      	b.n	2dc92 <nrf_cloud_pgps_find_prediction+0x242>
	if (nrf_cloud_pgps_loading()) {
   2dca0:	f7ff fdf2 	bl	2d888 <nrf_cloud_pgps_loading>
   2dca4:	b128      	cbz	r0, 2dcb2 <nrf_cloud_pgps_find_prediction+0x262>
		LOG_WRN("Prediction num:%u not loaded yet", pnum);
   2dca6:	4622      	mov	r2, r4
   2dca8:	2157      	movs	r1, #87	; 0x57
   2dcaa:	481c      	ldr	r0, [pc, #112]	; (2dd1c <nrf_cloud_pgps_find_prediction+0x2cc>)
   2dcac:	f00f f80f 	bl	3ccce <z_log_minimal_printk>
   2dcb0:	e736      	b.n	2db20 <nrf_cloud_pgps_find_prediction+0xd0>
	LOG_ERR("Prediction num:%u not available; state:%d", pnum, state);
   2dcb2:	4b05      	ldr	r3, [pc, #20]	; (2dcc8 <nrf_cloud_pgps_find_prediction+0x278>)
   2dcb4:	4622      	mov	r2, r4
   2dcb6:	2145      	movs	r1, #69	; 0x45
   2dcb8:	781b      	ldrb	r3, [r3, #0]
   2dcba:	4819      	ldr	r0, [pc, #100]	; (2dd20 <nrf_cloud_pgps_find_prediction+0x2d0>)
   2dcbc:	f00f f807 	bl	3ccce <z_log_minimal_printk>
	return -EINVAL;
   2dcc0:	e6db      	b.n	2da7a <nrf_cloud_pgps_find_prediction+0x2a>
   2dcc2:	4604      	mov	r4, r0
   2dcc4:	e6f2      	b.n	2daac <nrf_cloud_pgps_find_prediction+0x5c>
   2dcc6:	bf00      	nop
   2dcc8:	2001d2bf 	.word	0x2001d2bf
   2dccc:	20015810 	.word	0x20015810
   2dcd0:	0004932d 	.word	0x0004932d
   2dcd4:	0004948c 	.word	0x0004948c
   2dcd8:	2001a120 	.word	0x2001a120
   2dcdc:	000494ac 	.word	0x000494ac
   2dce0:	00015180 	.word	0x00015180
   2dce4:	000494c6 	.word	0x000494c6
   2dce8:	000494e2 	.word	0x000494e2
   2dcec:	0004953f 	.word	0x0004953f
   2dcf0:	0004955f 	.word	0x0004955f
   2dcf4:	00049573 	.word	0x00049573
   2dcf8:	0004958c 	.word	0x0004958c
   2dcfc:	000495bc 	.word	0x000495bc
   2dd00:	ffffe0c0 	.word	0xffffe0c0
   2dd04:	000495ed 	.word	0x000495ed
   2dd08:	00049600 	.word	0x00049600
   2dd0c:	00049624 	.word	0x00049624
   2dd10:	20014df8 	.word	0x20014df8
   2dd14:	00049644 	.word	0x00049644
   2dd18:	00049671 	.word	0x00049671
   2dd1c:	000496ab 	.word	0x000496ab
   2dd20:	000496d1 	.word	0x000496d1

0002dd24 <nrf_cloud_pgps_notify_prediction>:
{
   2dd24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct nrf_cloud_pgps_event evt = {
   2dd26:	2303      	movs	r3, #3
   2dd28:	2500      	movs	r5, #0
   2dd2a:	e9cd 5502 	strd	r5, r5, [sp, #8]
   2dd2e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (state == PGPS_NONE) {
   2dd32:	4b22      	ldr	r3, [pc, #136]	; (2ddbc <nrf_cloud_pgps_notify_prediction+0x98>)
   2dd34:	781b      	ldrb	r3, [r3, #0]
   2dd36:	b943      	cbnz	r3, 2dd4a <nrf_cloud_pgps_notify_prediction+0x26>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2dd38:	2145      	movs	r1, #69	; 0x45
   2dd3a:	4821      	ldr	r0, [pc, #132]	; (2ddc0 <nrf_cloud_pgps_notify_prediction+0x9c>)
   2dd3c:	f00e ffc7 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   2dd40:	f06f 0415 	mvn.w	r4, #21
}
   2dd44:	4620      	mov	r0, r4
   2dd46:	b004      	add	sp, #16
   2dd48:	bd70      	pop	{r4, r5, r6, pc}
	LOG_INF("Searching for prediction");
   2dd4a:	2149      	movs	r1, #73	; 0x49
   2dd4c:	481d      	ldr	r0, [pc, #116]	; (2ddc4 <nrf_cloud_pgps_notify_prediction+0xa0>)
   2dd4e:	f00e ffbe 	bl	3ccce <z_log_minimal_printk>
	err = nrf_cloud_pgps_find_prediction(&prediction);
   2dd52:	a801      	add	r0, sp, #4
   2dd54:	f7ff fe7c 	bl	2da50 <nrf_cloud_pgps_find_prediction>
	if (err == -ELOADING) {
   2dd58:	f46f 53fa 	mvn.w	r3, #8000	; 0x1f40
   2dd5c:	4298      	cmp	r0, r3
	err = nrf_cloud_pgps_find_prediction(&prediction);
   2dd5e:	4604      	mov	r4, r0
	if (err == -ELOADING) {
   2dd60:	d104      	bne.n	2dd6c <nrf_cloud_pgps_notify_prediction+0x48>
		pgps_need_assistance = true;
   2dd62:	2201      	movs	r2, #1
   2dd64:	4b18      	ldr	r3, [pc, #96]	; (2ddc8 <nrf_cloud_pgps_notify_prediction+0xa4>)
   2dd66:	601a      	str	r2, [r3, #0]
		err = 0;
   2dd68:	462c      	mov	r4, r5
   2dd6a:	e7eb      	b.n	2dd44 <nrf_cloud_pgps_notify_prediction+0x20>
	} else if (err < 0) {
   2dd6c:	2800      	cmp	r0, #0
   2dd6e:	da12      	bge.n	2dd96 <nrf_cloud_pgps_notify_prediction+0x72>
		if (!pgps_need_assistance) {
   2dd70:	4d15      	ldr	r5, [pc, #84]	; (2ddc8 <nrf_cloud_pgps_notify_prediction+0xa4>)
   2dd72:	682e      	ldr	r6, [r5, #0]
   2dd74:	b10e      	cbz	r6, 2dd7a <nrf_cloud_pgps_notify_prediction+0x56>
			err = 0;
   2dd76:	2400      	movs	r4, #0
   2dd78:	e7e4      	b.n	2dd44 <nrf_cloud_pgps_notify_prediction+0x20>
			pgps_need_assistance = true;
   2dd7a:	2301      	movs	r3, #1
   2dd7c:	602b      	str	r3, [r5, #0]
			err = pgps_request_all();
   2dd7e:	f7ff fe2d 	bl	2d9dc <pgps_request_all>
			if (err) {
   2dd82:	4604      	mov	r4, r0
   2dd84:	2800      	cmp	r0, #0
   2dd86:	d0dd      	beq.n	2dd44 <nrf_cloud_pgps_notify_prediction+0x20>
				LOG_ERR("Error while requesting pgps set: %d", err);
   2dd88:	4602      	mov	r2, r0
   2dd8a:	2145      	movs	r1, #69	; 0x45
   2dd8c:	480f      	ldr	r0, [pc, #60]	; (2ddcc <nrf_cloud_pgps_notify_prediction+0xa8>)
   2dd8e:	f00e ff9e 	bl	3ccce <z_log_minimal_printk>
				pgps_need_assistance = false; /* try again next time */
   2dd92:	602e      	str	r6, [r5, #0]
   2dd94:	e7d6      	b.n	2dd44 <nrf_cloud_pgps_notify_prediction+0x20>
	} else if ((err >= 0) && (err < NUM_PREDICTIONS)) {
   2dd96:	2829      	cmp	r0, #41	; 0x29
   2dd98:	dcd4      	bgt.n	2dd44 <nrf_cloud_pgps_notify_prediction+0x20>
		LOG_INF("Found P-GPS prediction %d", pnum);
   2dd9a:	4602      	mov	r2, r0
   2dd9c:	2149      	movs	r1, #73	; 0x49
   2dd9e:	480c      	ldr	r0, [pc, #48]	; (2ddd0 <nrf_cloud_pgps_notify_prediction+0xac>)
   2dda0:	f00e ff95 	bl	3ccce <z_log_minimal_printk>
		pgps_need_assistance = false;
   2dda4:	4b08      	ldr	r3, [pc, #32]	; (2ddc8 <nrf_cloud_pgps_notify_prediction+0xa4>)
   2dda6:	601d      	str	r5, [r3, #0]
		if (evt_handler) {
   2dda8:	4b0a      	ldr	r3, [pc, #40]	; (2ddd4 <nrf_cloud_pgps_notify_prediction+0xb0>)
   2ddaa:	681b      	ldr	r3, [r3, #0]
   2ddac:	2b00      	cmp	r3, #0
   2ddae:	d0e2      	beq.n	2dd76 <nrf_cloud_pgps_notify_prediction+0x52>
			evt.prediction = prediction;
   2ddb0:	9a01      	ldr	r2, [sp, #4]
			evt_handler(&evt);
   2ddb2:	a802      	add	r0, sp, #8
			evt.prediction = prediction;
   2ddb4:	9203      	str	r2, [sp, #12]
			evt_handler(&evt);
   2ddb6:	4798      	blx	r3
   2ddb8:	e7d6      	b.n	2dd68 <nrf_cloud_pgps_notify_prediction+0x44>
   2ddba:	bf00      	nop
   2ddbc:	2001d2bf 	.word	0x2001d2bf
   2ddc0:	0004932d 	.word	0x0004932d
   2ddc4:	00049700 	.word	0x00049700
   2ddc8:	2001a120 	.word	0x2001a120
   2ddcc:	0004971e 	.word	0x0004971e
   2ddd0:	00049747 	.word	0x00049747
   2ddd4:	2001a114 	.word	0x2001a114

0002ddd8 <process_buffer>:
{
   2ddd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (index.dl_offset == 0) {
   2dddc:	4c98      	ldr	r4, [pc, #608]	; (2e040 <process_buffer+0x268>)
{
   2ddde:	4605      	mov	r5, r0
	if (index.dl_offset == 0) {
   2dde0:	6a23      	ldr	r3, [r4, #32]
{
   2dde2:	468a      	mov	sl, r1
   2dde4:	b08d      	sub	sp, #52	; 0x34
	if (index.dl_offset == 0) {
   2dde6:	2b00      	cmp	r3, #0
   2dde8:	d14e      	bne.n	2de88 <process_buffer+0xb0>
		if (len < sizeof(*header)) {
   2ddea:	290f      	cmp	r1, #15
   2ddec:	d904      	bls.n	2ddf8 <process_buffer+0x20>
	if (!validate_pgps_header(header)) {
   2ddee:	f7ff fc05 	bl	2d5fc <validate_pgps_header>
   2ddf2:	b920      	cbnz	r0, 2ddfe <process_buffer+0x26>
		state = PGPS_NONE;
   2ddf4:	4b93      	ldr	r3, [pc, #588]	; (2e044 <process_buffer+0x26c>)
   2ddf6:	7018      	strb	r0, [r3, #0]
			return -EINVAL; /* need full header, for now */
   2ddf8:	f06f 0615 	mvn.w	r6, #21
   2ddfc:	e179      	b.n	2e0f2 <process_buffer+0x31a>
	if (index.partial_request) {
   2ddfe:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   2de02:	b163      	cbz	r3, 2de1e <process_buffer+0x46>
		LOG_INF("Partial request; starting at prediction num:%u", index.pnum_offset);
   2de04:	2149      	movs	r1, #73	; 0x49
   2de06:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   2de0a:	488f      	ldr	r0, [pc, #572]	; (2e048 <process_buffer+0x270>)
   2de0c:	f00e ff5f 	bl	3ccce <z_log_minimal_printk>
		header->prediction_count = index.header.prediction_count;
   2de10:	88a3      	ldrh	r3, [r4, #4]
   2de12:	80ab      	strh	r3, [r5, #4]
		header->gps_day = index.header.gps_day;
   2de14:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   2de18:	816b      	strh	r3, [r5, #10]
		header->gps_time_of_day = index.header.gps_time_of_day;
   2de1a:	68e3      	ldr	r3, [r4, #12]
   2de1c:	60eb      	str	r3, [r5, #12]
		LOG_INF("Storing P-GPS header");
   2de1e:	2149      	movs	r1, #73	; 0x49
   2de20:	488a      	ldr	r0, [pc, #552]	; (2e04c <process_buffer+0x274>)
   2de22:	f00e ff54 	bl	3ccce <z_log_minimal_printk>
		cache_pgps_header(header);
   2de26:	4628      	mov	r0, r5
   2de28:	f7ff fc1a 	bl	2d660 <cache_pgps_header>
		err = npgps_get_shifted_time(&gps_sec, NULL, NULL,
   2de2c:	2200      	movs	r2, #0
   2de2e:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   2de32:	4611      	mov	r1, r2
   2de34:	a808      	add	r0, sp, #32
   2de36:	f000 ff1d 	bl	2ec74 <npgps_get_shifted_time>
		if (!err) {
   2de3a:	2800      	cmp	r0, #0
   2de3c:	d172      	bne.n	2df24 <process_buffer+0x14c>
			if ((index.start_sec <= gps_sec) &&
   2de3e:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   2de42:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
   2de46:	4293      	cmp	r3, r2
   2de48:	eb71 0000 	sbcs.w	r0, r1, r0
   2de4c:	db55      	blt.n	2defa <process_buffer+0x122>
			    (gps_sec <= index.end_sec)) {
   2de4e:	e9d4 2006 	ldrd	r2, r0, [r4, #24]
			if ((index.start_sec <= gps_sec) &&
   2de52:	429a      	cmp	r2, r3
   2de54:	eb70 0101 	sbcs.w	r1, r0, r1
   2de58:	db60      	blt.n	2df1c <process_buffer+0x144>
				LOG_INF("Received data covers good timeframe");
   2de5a:	2149      	movs	r1, #73	; 0x49
   2de5c:	487c      	ldr	r0, [pc, #496]	; (2e050 <process_buffer+0x278>)
			LOG_WRN("Current time unknown; assume data's timeframe is valid");
   2de5e:	f00e ff36 	bl	3ccce <z_log_minimal_printk>
		log_pgps_header("pgps_header: ", header);
   2de62:	4629      	mov	r1, r5
   2de64:	487b      	ldr	r0, [pc, #492]	; (2e054 <process_buffer+0x27c>)
   2de66:	f7ff fbab 	bl	2d5c0 <log_pgps_header>
		npgps_save_header(header);
   2de6a:	4628      	mov	r0, r5
   2de6c:	f000 feaa 	bl	2ebc4 <npgps_save_header>
		index.dl_offset += sizeof(*header);
   2de70:	6a23      	ldr	r3, [r4, #32]
		len -= sizeof(*header);
   2de72:	f1aa 0a10 	sub.w	sl, sl, #16
		index.dl_offset += sizeof(*header);
   2de76:	3310      	adds	r3, #16
   2de78:	6223      	str	r3, [r4, #32]
		index.dl_pnum = index.pnum_offset;
   2de7a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
		buf += sizeof(*header);
   2de7e:	3510      	adds	r5, #16
		index.dl_pnum = index.pnum_offset;
   2de80:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		index.pred_offset = 0;
   2de84:	2300      	movs	r3, #0
   2de86:	84a3      	strh	r3, [r4, #36]	; 0x24
	need = MIN((PGPS_PREDICTION_DL_SIZE - index.pred_offset), len);
   2de88:	f240 79d6 	movw	r9, #2006	; 0x7d6
   2de8c:	8ca6      	ldrh	r6, [r4, #36]	; 0x24
	memcpy(&prediction_buf[index.pred_offset], buf, need);
   2de8e:	4f72      	ldr	r7, [pc, #456]	; (2e058 <process_buffer+0x280>)
	need = MIN((PGPS_PREDICTION_DL_SIZE - index.pred_offset), len);
   2de90:	eba9 0806 	sub.w	r8, r9, r6
   2de94:	45d0      	cmp	r8, sl
   2de96:	bf28      	it	cs
   2de98:	46d0      	movcs	r8, sl
   2de9a:	19b8      	adds	r0, r7, r6
   2de9c:	4642      	mov	r2, r8
   2de9e:	4629      	mov	r1, r5
   2dea0:	f013 fb8f 	bl	415c2 <memcpy>
	len -= need;
   2dea4:	ebaa 0308 	sub.w	r3, sl, r8
   2dea8:	9303      	str	r3, [sp, #12]
	index.pred_offset += need;
   2deaa:	4446      	add	r6, r8
	index.dl_offset += need;
   2deac:	6a23      	ldr	r3, [r4, #32]
	index.pred_offset += need;
   2deae:	b2b6      	uxth	r6, r6
	index.dl_offset += need;
   2deb0:	4443      	add	r3, r8
	if (index.pred_offset == PGPS_PREDICTION_DL_SIZE) {
   2deb2:	454e      	cmp	r6, r9
	index.pred_offset += need;
   2deb4:	84a6      	strh	r6, [r4, #36]	; 0x24
	index.dl_offset += need;
   2deb6:	6223      	str	r3, [r4, #32]
	if (index.pred_offset == PGPS_PREDICTION_DL_SIZE) {
   2deb8:	d17f      	bne.n	2dfba <process_buffer+0x1e2>
	struct agps_header *elem = (struct agps_header *)element_ptr;
	size_t parsed_len = 0;
	int64_t gps_sec;
	bool finished = false;

	gps_sec = 0;
   2deba:	2600      	movs	r6, #0
	size_t parsed_len = 0;
   2debc:	46b1      	mov	r9, r6
		err = consume_pgps_data(index.dl_pnum, prediction_buf,
   2debe:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
	gps_sec = 0;
   2dec2:	9604      	str	r6, [sp, #16]
	if (elements_left_to_process == 0) {
   2dec4:	4b65      	ldr	r3, [pc, #404]	; (2e05c <process_buffer+0x284>)
   2dec6:	881a      	ldrh	r2, [r3, #0]
   2dec8:	bb7a      	cbnz	r2, 2df2a <process_buffer+0x152>
		element_type = element->type;
   2deca:	4a65      	ldr	r2, [pc, #404]	; (2e060 <process_buffer+0x288>)
		element->type = (enum nrf_cloud_agps_type)
   2decc:	7839      	ldrb	r1, [r7, #0]
		element_type = element->type;
   2dece:	7011      	strb	r1, [r2, #0]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2ded0:	f8b7 2001 	ldrh.w	r2, [r7, #1]
   2ded4:	3a01      	subs	r2, #1
		elements_left_to_process =
   2ded6:	801a      	strh	r2, [r3, #0]
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   2ded8:	2203      	movs	r2, #3
	switch (element->type) {
   2deda:	2902      	cmp	r1, #2
   2dedc:	d02c      	beq.n	2df38 <process_buffer+0x160>
   2dede:	2907      	cmp	r1, #7
   2dee0:	d03c      	beq.n	2df5c <process_buffer+0x184>
	while (parsed_len < buf_len) {
		bool empty;
		size_t element_size = get_next_pgps_element(&element, element_ptr);

		if (element_size == 0) {
			LOG_INF("  End of element");
   2dee2:	2149      	movs	r1, #73	; 0x49
   2dee4:	485f      	ldr	r0, [pc, #380]	; (2e064 <process_buffer+0x28c>)
   2dee6:	f00e fef2 	bl	3ccce <z_log_minimal_printk>
					return err;
				}
			}
		}
	} else {
		LOG_ERR("Parsing incomplete; aborting.");
   2deea:	2145      	movs	r1, #69	; 0x45
   2deec:	485e      	ldr	r0, [pc, #376]	; (2e068 <process_buffer+0x290>)
   2deee:	f00e feee 	bl	3ccce <z_log_minimal_printk>
		state = PGPS_NONE;
   2def2:	2200      	movs	r2, #0
   2def4:	4b53      	ldr	r3, [pc, #332]	; (2e044 <process_buffer+0x26c>)
   2def6:	701a      	strb	r2, [r3, #0]
		if (err) {
   2def8:	e77e      	b.n	2ddf8 <process_buffer+0x20>
					LOG_ERR("Received data is not within required "
   2defa:	2145      	movs	r1, #69	; 0x45
   2defc:	485b      	ldr	r0, [pc, #364]	; (2e06c <process_buffer+0x294>)
   2defe:	1ad2      	subs	r2, r2, r3
					LOG_ERR("Received data is not within required "
   2df00:	f00e fee5 	bl	3ccce <z_log_minimal_printk>
				index.stale_server_data = true;
   2df04:	2301      	movs	r3, #1
__ssp_bos_icheck3(memset, void *, int)
   2df06:	2210      	movs	r2, #16
   2df08:	2100      	movs	r1, #0
   2df0a:	4628      	mov	r0, r5
   2df0c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   2df10:	f013 fb77 	bl	41602 <memset>
				cache_pgps_header(header);
   2df14:	4628      	mov	r0, r5
   2df16:	f7ff fba3 	bl	2d660 <cache_pgps_header>
				return -EINVAL;
   2df1a:	e76d      	b.n	2ddf8 <process_buffer+0x20>
					LOG_ERR("Received data is not within required "
   2df1c:	2145      	movs	r1, #69	; 0x45
   2df1e:	4854      	ldr	r0, [pc, #336]	; (2e070 <process_buffer+0x298>)
   2df20:	1a9a      	subs	r2, r3, r2
   2df22:	e7ed      	b.n	2df00 <process_buffer+0x128>
			LOG_WRN("Current time unknown; assume data's timeframe is valid");
   2df24:	2157      	movs	r1, #87	; 0x57
   2df26:	4853      	ldr	r0, [pc, #332]	; (2e074 <process_buffer+0x29c>)
   2df28:	e799      	b.n	2de5e <process_buffer+0x86>
		element->type = element_type;
   2df2a:	4b4d      	ldr	r3, [pc, #308]	; (2e060 <process_buffer+0x288>)
		elements_left_to_process -= 1;
   2df2c:	3a01      	subs	r2, #1
		element->type = element_type;
   2df2e:	7819      	ldrb	r1, [r3, #0]
		elements_left_to_process -= 1;
   2df30:	4b4a      	ldr	r3, [pc, #296]	; (2e05c <process_buffer+0x284>)
   2df32:	801a      	strh	r2, [r3, #0]
	size_t len = 0;
   2df34:	2200      	movs	r2, #0
   2df36:	e7d0      	b.n	2deda <process_buffer+0x102>
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   2df38:	4639      	mov	r1, r7
   2df3a:	f102 0b3e 	add.w	fp, r2, #62	; 0x3e
		switch (element.type) {
   2df3e:	f107 003d 	add.w	r0, r7, #61	; 0x3d
			for (int i = 1; i < sizeof(struct nrf_cloud_agps_ephemeris); i++) {
   2df42:	4288      	cmp	r0, r1
   2df44:	d13f      	bne.n	2dfc6 <process_buffer+0x1ee>
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2df46:	18bb      	adds	r3, r7, r2
				LOG_INF("Marking ephemeris:%u as empty",
   2df48:	2149      	movs	r1, #73	; 0x49
   2df4a:	5cba      	ldrb	r2, [r7, r2]
   2df4c:	484a      	ldr	r0, [pc, #296]	; (2e078 <process_buffer+0x2a0>)
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2df4e:	9305      	str	r3, [sp, #20]
				LOG_INF("Marking ephemeris:%u as empty",
   2df50:	f00e febd 	bl	3ccce <z_log_minimal_printk>
				element.ephemeris->health = NRF_CLOUD_PGPS_EMPTY_EPHEM_HEALTH;
   2df54:	22ff      	movs	r2, #255	; 0xff
   2df56:	9b05      	ldr	r3, [sp, #20]
   2df58:	705a      	strb	r2, [r3, #1]
   2df5a:	e009      	b.n	2df70 <process_buffer+0x198>
			(struct nrf_cloud_agps_system_time *)(buf + len);
   2df5c:	18b9      	adds	r1, r7, r2
			gps_sec = npgps_gps_day_time_to_sec(element.time_and_tow->date_day,
   2df5e:	f8d1 1002 	ldr.w	r1, [r1, #2]
   2df62:	5ab8      	ldrh	r0, [r7, r2]
		len += sizeof(struct nrf_cloud_agps_system_time) -
   2df64:	f102 0b10 	add.w	fp, r2, #16
			gps_sec = npgps_gps_day_time_to_sec(element.time_and_tow->date_day,
   2df68:	f000 fe66 	bl	2ec38 <npgps_gps_day_time_to_sec>
   2df6c:	4606      	mov	r6, r0
   2df6e:	9104      	str	r1, [sp, #16]
	while (parsed_len < buf_len) {
   2df70:	f240 72d5 	movw	r2, #2005	; 0x7d5
		parsed_len += element_size;
   2df74:	44d9      	add	r9, fp
	while (parsed_len < buf_len) {
   2df76:	4591      	cmp	r9, r2
		element_ptr += element_size;
   2df78:	445f      	add	r7, fp
	while (parsed_len < buf_len) {
   2df7a:	d9a3      	bls.n	2dec4 <process_buffer+0xec>
	if (parsed_len == buf_len) {
   2df7c:	f240 73d6 	movw	r3, #2006	; 0x7d6
   2df80:	4599      	cmp	r9, r3
   2df82:	d1b2      	bne.n	2deea <process_buffer+0x112>
		if (index.predictions[pnum]) {
   2df84:	f10a 090e 	add.w	r9, sl, #14
   2df88:	eb04 0389 	add.w	r3, r4, r9, lsl #2
   2df8c:	685b      	ldr	r3, [r3, #4]
   2df8e:	b1fb      	cbz	r3, 2dfd0 <process_buffer+0x1f8>
			LOG_WRN("Received duplicate packet; ignoring");
   2df90:	2157      	movs	r1, #87	; 0x57
   2df92:	483a      	ldr	r0, [pc, #232]	; (2e07c <process_buffer+0x2a4>)
			LOG_ERR("Prediction did not include GPS day and time of day; ignoring");
   2df94:	f00e fe9b 	bl	3ccce <z_log_minimal_printk>
		if (len) { /* keep extra data for next time */
   2df98:	9b03      	ldr	r3, [sp, #12]
   2df9a:	b13b      	cbz	r3, 2dfac <process_buffer+0x1d4>
			memcpy(prediction_buf, buf, len);
   2df9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   2dfa0:	9a03      	ldr	r2, [sp, #12]
   2dfa2:	482d      	ldr	r0, [pc, #180]	; (2e058 <process_buffer+0x280>)
   2dfa4:	eb05 0108 	add.w	r1, r5, r8
   2dfa8:	f013 fb18 	bl	415dc <__memcpy_chk>
		index.pred_offset = len;
   2dfac:	9b03      	ldr	r3, [sp, #12]
   2dfae:	84a3      	strh	r3, [r4, #36]	; 0x24
		index.dl_pnum++;
   2dfb0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   2dfb4:	3301      	adds	r3, #1
   2dfb6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	index.dl_offset += len;
   2dfba:	6a23      	ldr	r3, [r4, #32]
   2dfbc:	9a03      	ldr	r2, [sp, #12]
	return 0;
   2dfbe:	2600      	movs	r6, #0
	index.dl_offset += len;
   2dfc0:	4413      	add	r3, r2
   2dfc2:	6223      	str	r3, [r4, #32]
	return 0;
   2dfc4:	e095      	b.n	2e0f2 <process_buffer+0x31a>
				if (element_ptr[i] != 0) {
   2dfc6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2dfca:	2b00      	cmp	r3, #0
   2dfcc:	d0b9      	beq.n	2df42 <process_buffer+0x16a>
   2dfce:	e7cf      	b.n	2df70 <process_buffer+0x198>
		} else if (gps_sec == 0) {
   2dfd0:	9b04      	ldr	r3, [sp, #16]
   2dfd2:	4333      	orrs	r3, r6
   2dfd4:	d102      	bne.n	2dfdc <process_buffer+0x204>
			LOG_ERR("Prediction did not include GPS day and time of day; ignoring");
   2dfd6:	2145      	movs	r1, #69	; 0x45
   2dfd8:	4829      	ldr	r0, [pc, #164]	; (2e080 <process_buffer+0x2a8>)
   2dfda:	e7db      	b.n	2df94 <process_buffer+0x1bc>
			LOG_INF("Storing prediction num:%u idx:%u for gps sec:%d",
   2dfdc:	4652      	mov	r2, sl
   2dfde:	2149      	movs	r1, #73	; 0x49
   2dfe0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   2dfe2:	4828      	ldr	r0, [pc, #160]	; (2e084 <process_buffer+0x2ac>)
   2dfe4:	9600      	str	r6, [sp, #0]
   2dfe6:	f00e fe72 	bl	3ccce <z_log_minimal_printk>
			index.loading_count++;
   2dfea:	8d27      	ldrh	r7, [r4, #40]	; 0x28
			finished = (index.loading_count == index.expected_count);
   2dfec:	f8b4 b026 	ldrh.w	fp, [r4, #38]	; 0x26
			index.loading_count++;
   2dff0:	3701      	adds	r7, #1
   2dff2:	b2bf      	uxth	r7, r7
					 finished || (index.storage_extent == 1));
   2dff4:	455f      	cmp	r7, fp
			index.loading_count++;
   2dff6:	8527      	strh	r7, [r4, #40]	; 0x28
					 finished || (index.storage_extent == 1));
   2dff8:	d01f      	beq.n	2e03a <process_buffer+0x262>
   2dffa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2dffc:	3b01      	subs	r3, #1
   2dffe:	f1d3 0a00 	rsbs	sl, r3, #0
   2e002:	eb4a 0a03 	adc.w	sl, sl, r3
	uint8_t schema = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e006:	2301      	movs	r3, #1
   2e008:	960a      	str	r6, [sp, #40]	; 0x28
	if (first) {
   2e00a:	4e1f      	ldr	r6, [pc, #124]	; (2e088 <process_buffer+0x2b0>)
	uint8_t schema = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e00c:	f88d 301f 	strb.w	r3, [sp, #31]
	if (first) {
   2e010:	7833      	ldrb	r3, [r6, #0]
   2e012:	b133      	cbz	r3, 2e022 <process_buffer+0x24a>
		memset(pad, 0xff, PGPS_PREDICTION_PAD);
   2e014:	2225      	movs	r2, #37	; 0x25
   2e016:	21ff      	movs	r1, #255	; 0xff
   2e018:	481c      	ldr	r0, [pc, #112]	; (2e08c <process_buffer+0x2b4>)
   2e01a:	f013 faf2 	bl	41602 <memset>
		first = false;
   2e01e:	2300      	movs	r3, #0
   2e020:	7033      	strb	r3, [r6, #0]
	err = stream_flash_buffered_write(&stream, p, schema_offset, false);
   2e022:	2300      	movs	r3, #0
   2e024:	2213      	movs	r2, #19
   2e026:	490c      	ldr	r1, [pc, #48]	; (2e058 <process_buffer+0x280>)
   2e028:	4819      	ldr	r0, [pc, #100]	; (2e090 <process_buffer+0x2b8>)
   2e02a:	f00f fb44 	bl	3d6b6 <stream_flash_buffered_write>
	if (err) {
   2e02e:	4603      	mov	r3, r0
   2e030:	b390      	cbz	r0, 2e098 <process_buffer+0x2c0>
		LOG_ERR("Error writing pgps prediction:%d", err);
   2e032:	461a      	mov	r2, r3
   2e034:	2145      	movs	r1, #69	; 0x45
   2e036:	4817      	ldr	r0, [pc, #92]	; (2e094 <process_buffer+0x2bc>)
   2e038:	e039      	b.n	2e0ae <process_buffer+0x2d6>
					 finished || (index.storage_extent == 1));
   2e03a:	f04f 0a01 	mov.w	sl, #1
   2e03e:	e7e2      	b.n	2e006 <process_buffer+0x22e>
   2e040:	20015810 	.word	0x20015810
   2e044:	2001d2bf 	.word	0x2001d2bf
   2e048:	00049766 	.word	0x00049766
   2e04c:	0004979a 	.word	0x0004979a
   2e050:	000497b4 	.word	0x000497b4
   2e054:	000498e9 	.word	0x000498e9
   2e058:	2001cabf 	.word	0x2001cabf
   2e05c:	2001a592 	.word	0x2001a592
   2e060:	2001c958 	.word	0x2001c958
   2e064:	000498f7 	.word	0x000498f7
   2e068:	00049abb 	.word	0x00049abb
   2e06c:	000497dd 	.word	0x000497dd
   2e070:	00049847 	.word	0x00049847
   2e074:	000498ad 	.word	0x000498ad
   2e078:	00049ade 	.word	0x00049ade
   2e07c:	0004990d 	.word	0x0004990d
   2e080:	00049936 	.word	0x00049936
   2e084:	00049978 	.word	0x00049978
   2e088:	20014c45 	.word	0x20014c45
   2e08c:	2001c9da 	.word	0x2001c9da
   2e090:	2001a12c 	.word	0x2001a12c
   2e094:	000499ad 	.word	0x000499ad
	err = stream_flash_buffered_write(&stream, &schema, sizeof(schema), false);
   2e098:	2201      	movs	r2, #1
   2e09a:	484d      	ldr	r0, [pc, #308]	; (2e1d0 <process_buffer+0x3f8>)
   2e09c:	f10d 011f 	add.w	r1, sp, #31
   2e0a0:	f00f fb09 	bl	3d6b6 <stream_flash_buffered_write>
	if (err) {
   2e0a4:	4603      	mov	r3, r0
   2e0a6:	b340      	cbz	r0, 2e0fa <process_buffer+0x322>
		LOG_ERR("Error writing schema:%d", err);
   2e0a8:	2145      	movs	r1, #69	; 0x45
   2e0aa:	4602      	mov	r2, r0
   2e0ac:	4849      	ldr	r0, [pc, #292]	; (2e1d4 <process_buffer+0x3fc>)
		LOG_ERR("Error writing sentinel:%d", err);
   2e0ae:	f00e fe0e 	bl	3ccce <z_log_minimal_printk>
			index.predictions[pnum] = npgps_block_to_pointer(index.store_block);
   2e0b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2e0b4:	f000 ff5e 	bl	2ef74 <npgps_block_to_pointer>
			if (pgps_need_assistance &&
   2e0b8:	4b47      	ldr	r3, [pc, #284]	; (2e1d8 <process_buffer+0x400>)
			index.predictions[pnum] = npgps_block_to_pointer(index.store_block);
   2e0ba:	eb04 0989 	add.w	r9, r4, r9, lsl #2
			if (pgps_need_assistance &&
   2e0be:	681b      	ldr	r3, [r3, #0]
   2e0c0:	4e46      	ldr	r6, [pc, #280]	; (2e1dc <process_buffer+0x404>)
			index.predictions[pnum] = npgps_block_to_pointer(index.store_block);
   2e0c2:	f8c9 0004 	str.w	r0, [r9, #4]
			if (pgps_need_assistance &&
   2e0c6:	2b00      	cmp	r3, #0
   2e0c8:	d039      	beq.n	2e13e <process_buffer+0x366>
   2e0ca:	455f      	cmp	r7, fp
   2e0cc:	d035      	beq.n	2e13a <process_buffer+0x362>
			    (finished || (index.loading_count > 1))) {
   2e0ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   2e0d0:	2b01      	cmp	r3, #1
   2e0d2:	d832      	bhi.n	2e13a <process_buffer+0x362>
				if (evt_handler) {
   2e0d4:	6833      	ldr	r3, [r6, #0]
   2e0d6:	2b00      	cmp	r3, #0
   2e0d8:	d146      	bne.n	2e168 <process_buffer+0x390>
			index.store_block = npgps_alloc_block();
   2e0da:	f000 fe49 	bl	2ed70 <npgps_alloc_block>
   2e0de:	4603      	mov	r3, r0
			if (index.store_block == NO_BLOCK) {
   2e0e0:	3301      	adds	r3, #1
			index.store_block = npgps_alloc_block();
   2e0e2:	63a0      	str	r0, [r4, #56]	; 0x38
			if (index.store_block == NO_BLOCK) {
   2e0e4:	d149      	bne.n	2e17a <process_buffer+0x3a2>
				LOG_ERR("No more free blocks!");
   2e0e6:	2145      	movs	r1, #69	; 0x45
   2e0e8:	483d      	ldr	r0, [pc, #244]	; (2e1e0 <process_buffer+0x408>)
   2e0ea:	f00e fdf0 	bl	3ccce <z_log_minimal_printk>
				return -ENOMEM;
   2e0ee:	f06f 060b 	mvn.w	r6, #11
}
   2e0f2:	4630      	mov	r0, r6
   2e0f4:	b00d      	add	sp, #52	; 0x34
   2e0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = stream_flash_buffered_write(&stream, p, len, false);
   2e0fa:	f240 72c3 	movw	r2, #1987	; 0x7c3
   2e0fe:	4939      	ldr	r1, [pc, #228]	; (2e1e4 <process_buffer+0x40c>)
   2e100:	4833      	ldr	r0, [pc, #204]	; (2e1d0 <process_buffer+0x3f8>)
   2e102:	f00f fad8 	bl	3d6b6 <stream_flash_buffered_write>
	if (err) {
   2e106:	4603      	mov	r3, r0
   2e108:	2800      	cmp	r0, #0
   2e10a:	d192      	bne.n	2e032 <process_buffer+0x25a>
	err = stream_flash_buffered_write(&stream, (uint8_t *)&sentinel,
   2e10c:	2204      	movs	r2, #4
   2e10e:	4830      	ldr	r0, [pc, #192]	; (2e1d0 <process_buffer+0x3f8>)
   2e110:	a90a      	add	r1, sp, #40	; 0x28
   2e112:	f00f fad0 	bl	3d6b6 <stream_flash_buffered_write>
	if (err) {
   2e116:	4602      	mov	r2, r0
   2e118:	b118      	cbz	r0, 2e122 <process_buffer+0x34a>
		LOG_ERR("Error writing sentinel:%d", err);
   2e11a:	2145      	movs	r1, #69	; 0x45
   2e11c:	4832      	ldr	r0, [pc, #200]	; (2e1e8 <process_buffer+0x410>)
   2e11e:	f00e fdd6 	bl	3ccce <z_log_minimal_printk>
	err = stream_flash_buffered_write(&stream, pad, PGPS_PREDICTION_PAD, last);
   2e122:	2225      	movs	r2, #37	; 0x25
   2e124:	4653      	mov	r3, sl
   2e126:	4931      	ldr	r1, [pc, #196]	; (2e1ec <process_buffer+0x414>)
   2e128:	4829      	ldr	r0, [pc, #164]	; (2e1d0 <process_buffer+0x3f8>)
   2e12a:	f00f fac4 	bl	3d6b6 <stream_flash_buffered_write>
	if (err) {
   2e12e:	4602      	mov	r2, r0
   2e130:	2800      	cmp	r0, #0
   2e132:	d0be      	beq.n	2e0b2 <process_buffer+0x2da>
		LOG_ERR("Error writing sentinel:%d", err);
   2e134:	2145      	movs	r1, #69	; 0x45
   2e136:	482c      	ldr	r0, [pc, #176]	; (2e1e8 <process_buffer+0x410>)
   2e138:	e7b9      	b.n	2e0ae <process_buffer+0x2d6>
				nrf_cloud_pgps_notify_prediction();
   2e13a:	f7ff fdf3 	bl	2dd24 <nrf_cloud_pgps_notify_prediction>
			if (!finished) {
   2e13e:	455f      	cmp	r7, fp
   2e140:	d1c8      	bne.n	2e0d4 <process_buffer+0x2fc>
				LOG_INF("All P-GPS data received. Done.");
   2e142:	2149      	movs	r1, #73	; 0x49
   2e144:	482a      	ldr	r0, [pc, #168]	; (2e1f0 <process_buffer+0x418>)
   2e146:	f00e fdc2 	bl	3ccce <z_log_minimal_printk>
				state = PGPS_READY;
   2e14a:	2206      	movs	r2, #6
   2e14c:	4b29      	ldr	r3, [pc, #164]	; (2e1f4 <process_buffer+0x41c>)
   2e14e:	701a      	strb	r2, [r3, #0]
				if (evt_handler) {
   2e150:	6833      	ldr	r3, [r6, #0]
   2e152:	b133      	cbz	r3, 2e162 <process_buffer+0x38a>
					struct nrf_cloud_pgps_event evt = {
   2e154:	2204      	movs	r2, #4
   2e156:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   2e15a:	2200      	movs	r2, #0
					evt_handler(&evt);
   2e15c:	a80a      	add	r0, sp, #40	; 0x28
					struct nrf_cloud_pgps_event evt = {
   2e15e:	920b      	str	r2, [sp, #44]	; 0x2c
					evt_handler(&evt);
   2e160:	4798      	blx	r3
				npgps_print_blocks();
   2e162:	f000 fe79 	bl	2ee58 <npgps_print_blocks>
		if (err) {
   2e166:	e717      	b.n	2df98 <process_buffer+0x1c0>
					struct nrf_cloud_pgps_event evt = {
   2e168:	2200      	movs	r2, #0
   2e16a:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
   2e16e:	2202      	movs	r2, #2
					evt_handler(&evt);
   2e170:	a80a      	add	r0, sp, #40	; 0x28
					struct nrf_cloud_pgps_event evt = {
   2e172:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
					evt_handler(&evt);
   2e176:	4798      	blx	r3
   2e178:	e7af      	b.n	2e0da <process_buffer+0x302>
			index.storage_extent--;
   2e17a:	6b66      	ldr	r6, [r4, #52]	; 0x34
   2e17c:	3e01      	subs	r6, #1
   2e17e:	6366      	str	r6, [r4, #52]	; 0x34
			if (index.storage_extent == 0) {
   2e180:	2e00      	cmp	r6, #0
   2e182:	f47f af09 	bne.w	2df98 <process_buffer+0x1c0>
				index.storage_extent = npgps_get_block_extent(index.store_block);
   2e186:	f000 fe1d 	bl	2edc4 <npgps_get_block_extent>
				LOG_INF("Moving to new flash region:%d, len:%d",
   2e18a:	2149      	movs	r1, #73	; 0x49
				index.storage_extent = npgps_get_block_extent(index.store_block);
   2e18c:	4603      	mov	r3, r0
				LOG_INF("Moving to new flash region:%d, len:%d",
   2e18e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
				index.storage_extent = npgps_get_block_extent(index.store_block);
   2e190:	6360      	str	r0, [r4, #52]	; 0x34
				LOG_INF("Moving to new flash region:%d, len:%d",
   2e192:	4819      	ldr	r0, [pc, #100]	; (2e1f8 <process_buffer+0x420>)
   2e194:	f00e fd9b 	bl	3ccce <z_log_minimal_printk>
	return stream_flash_buffered_write(&stream, NULL, 0, true);
   2e198:	4632      	mov	r2, r6
   2e19a:	4631      	mov	r1, r6
   2e19c:	2301      	movs	r3, #1
   2e19e:	480c      	ldr	r0, [pc, #48]	; (2e1d0 <process_buffer+0x3f8>)
   2e1a0:	f00f fa89 	bl	3d6b6 <stream_flash_buffered_write>
				if (err) {
   2e1a4:	4606      	mov	r6, r0
   2e1a6:	b128      	cbz	r0, 2e1b4 <process_buffer+0x3dc>
					LOG_ERR("Error flushing storage:%d", err);
   2e1a8:	2145      	movs	r1, #69	; 0x45
   2e1aa:	4602      	mov	r2, r0
   2e1ac:	4813      	ldr	r0, [pc, #76]	; (2e1fc <process_buffer+0x424>)
					LOG_ERR("Error opening storage again:%d", err);
   2e1ae:	f00e fd8e 	bl	3ccce <z_log_minimal_printk>
					return err;
   2e1b2:	e79e      	b.n	2e0f2 <process_buffer+0x31a>
				err = open_storage(npgps_block_to_offset(index.store_block),
   2e1b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2e1b6:	f000 feb7 	bl	2ef28 <npgps_block_to_offset>
   2e1ba:	4631      	mov	r1, r6
   2e1bc:	f7ff faf6 	bl	2d7ac <open_storage>
				if (err) {
   2e1c0:	4606      	mov	r6, r0
   2e1c2:	2800      	cmp	r0, #0
   2e1c4:	f43f aee8 	beq.w	2df98 <process_buffer+0x1c0>
					LOG_ERR("Error opening storage again:%d", err);
   2e1c8:	4602      	mov	r2, r0
   2e1ca:	2145      	movs	r1, #69	; 0x45
   2e1cc:	480c      	ldr	r0, [pc, #48]	; (2e200 <process_buffer+0x428>)
   2e1ce:	e7ee      	b.n	2e1ae <process_buffer+0x3d6>
   2e1d0:	2001a12c 	.word	0x2001a12c
   2e1d4:	000499d3 	.word	0x000499d3
   2e1d8:	2001a120 	.word	0x2001a120
   2e1dc:	2001a114 	.word	0x2001a114
   2e1e0:	00049a33 	.word	0x00049a33
   2e1e4:	2001cad2 	.word	0x2001cad2
   2e1e8:	000499f0 	.word	0x000499f0
   2e1ec:	2001c9da 	.word	0x2001c9da
   2e1f0:	00049a0f 	.word	0x00049a0f
   2e1f4:	2001d2bf 	.word	0x2001d2bf
   2e1f8:	00049a4d 	.word	0x00049a4d
   2e1fc:	00049a78 	.word	0x00049a78
   2e200:	00049a97 	.word	0x00049a97

0002e204 <nrf_cloud_pgps_preemptive_updates>:
	uint16_t gps_day = 0;
   2e204:	2300      	movs	r3, #0
{
   2e206:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e20a:	b089      	sub	sp, #36	; 0x24
	uint16_t gps_day = 0;
   2e20c:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint32_t gps_time_of_day = 0;
   2e210:	9304      	str	r3, [sp, #16]
	if (state == PGPS_NONE) {
   2e212:	4b4f      	ldr	r3, [pc, #316]	; (2e350 <nrf_cloud_pgps_preemptive_updates+0x14c>)
	int current = index.cur_pnum;
   2e214:	4c4f      	ldr	r4, [pc, #316]	; (2e354 <nrf_cloud_pgps_preemptive_updates+0x150>)
	if (state == PGPS_NONE) {
   2e216:	781b      	ldrb	r3, [r3, #0]
	int current = index.cur_pnum;
   2e218:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
	uint16_t period_min = index.header.prediction_period_min;
   2e21c:	8927      	ldrh	r7, [r4, #8]
	if (state == PGPS_NONE) {
   2e21e:	b943      	cbnz	r3, 2e232 <nrf_cloud_pgps_preemptive_updates+0x2e>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2e220:	484d      	ldr	r0, [pc, #308]	; (2e358 <nrf_cloud_pgps_preemptive_updates+0x154>)
   2e222:	2145      	movs	r1, #69	; 0x45
   2e224:	f00e fd53 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   2e228:	f06f 0015 	mvn.w	r0, #21
}
   2e22c:	b009      	add	sp, #36	; 0x24
   2e22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (nrf_cloud_pgps_loading()) {
   2e232:	f7ff fb29 	bl	2d888 <nrf_cloud_pgps_loading>
   2e236:	4606      	mov	r6, r0
   2e238:	b108      	cbz	r0, 2e23e <nrf_cloud_pgps_preemptive_updates+0x3a>
		return 0;
   2e23a:	2000      	movs	r0, #0
   2e23c:	e7f6      	b.n	2e22c <nrf_cloud_pgps_preemptive_updates+0x28>
	if (current == 0xff) {
   2e23e:	2dff      	cmp	r5, #255	; 0xff
   2e240:	d102      	bne.n	2e248 <nrf_cloud_pgps_preemptive_updates+0x44>
		return pgps_request_all();
   2e242:	f7ff fbcb 	bl	2d9dc <pgps_request_all>
   2e246:	e7f1      	b.n	2e22c <nrf_cloud_pgps_preemptive_updates+0x28>
	if ((current + npgps_num_free()) < n) {
   2e248:	f000 fe3e 	bl	2eec8 <npgps_num_free>
   2e24c:	4428      	add	r0, r5
   2e24e:	2825      	cmp	r0, #37	; 0x25
   2e250:	ddf3      	ble.n	2e23a <nrf_cloud_pgps_preemptive_updates+0x36>
	if (evt_handler) {
   2e252:	4b42      	ldr	r3, [pc, #264]	; (2e35c <nrf_cloud_pgps_preemptive_updates+0x158>)
   2e254:	681b      	ldr	r3, [r3, #0]
   2e256:	b133      	cbz	r3, 2e266 <nrf_cloud_pgps_preemptive_updates+0x62>
		struct nrf_cloud_pgps_event evt = {
   2e258:	2202      	movs	r2, #2
   2e25a:	e9cd 6605 	strd	r6, r6, [sp, #20]
		evt_handler(&evt);
   2e25e:	a805      	add	r0, sp, #20
		struct nrf_cloud_pgps_event evt = {
   2e260:	f88d 2014 	strb.w	r2, [sp, #20]
		evt_handler(&evt);
   2e264:	4798      	blx	r3
	LOG_INF("Replacing %d oldest predictions; %d already free",
   2e266:	f000 fe2f 	bl	2eec8 <npgps_num_free>
   2e26a:	462a      	mov	r2, r5
   2e26c:	4603      	mov	r3, r0
   2e26e:	2149      	movs	r1, #73	; 0x49
   2e270:	483b      	ldr	r0, [pc, #236]	; (2e360 <nrf_cloud_pgps_preemptive_updates+0x15c>)
   2e272:	f00e fd2c 	bl	3ccce <z_log_minimal_printk>
	if (current >= n) {
   2e276:	2d25      	cmp	r5, #37	; 0x25
   2e278:	dd2f      	ble.n	2e2da <nrf_cloud_pgps_preemptive_updates+0xd6>
	int last = MIN(num, index.header.prediction_count);
   2e27a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
   2e27e:	4e39      	ldr	r6, [pc, #228]	; (2e364 <nrf_cloud_pgps_preemptive_updates+0x160>)
   2e280:	45a8      	cmp	r8, r5
   2e282:	bfa8      	it	ge
   2e284:	46a8      	movge	r8, r5
	LOG_INF("discarding %d", last);
   2e286:	2149      	movs	r1, #73	; 0x49
   2e288:	4642      	mov	r2, r8
   2e28a:	4837      	ldr	r0, [pc, #220]	; (2e368 <nrf_cloud_pgps_preemptive_updates+0x164>)
   2e28c:	f00e fd1f 	bl	3ccce <z_log_minimal_printk>
	for (pnum = 0; pnum < last; pnum++) {
   2e290:	46b1      	mov	r9, r6
   2e292:	2500      	movs	r5, #0
		__ASSERT((block != -1), "unexpected ptr:%p for Prediction num:%d",
   2e294:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 2e36c <nrf_cloud_pgps_preemptive_updates+0x168>
   2e298:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 2e370 <nrf_cloud_pgps_preemptive_updates+0x16c>
	for (pnum = 0; pnum < last; pnum++) {
   2e29c:	45a8      	cmp	r8, r5
   2e29e:	d133      	bne.n	2e308 <nrf_cloud_pgps_preemptive_updates+0x104>
	for (i = last; i < index.header.prediction_count; i++) {
   2e2a0:	462b      	mov	r3, r5
   2e2a2:	88a2      	ldrh	r2, [r4, #4]
   2e2a4:	4293      	cmp	r3, r2
   2e2a6:	db48      	blt.n	2e33a <nrf_cloud_pgps_preemptive_updates+0x136>
		index.predictions[pnum] = NULL;
   2e2a8:	2100      	movs	r1, #0
	for (pnum = index.header.prediction_count - last; pnum <
   2e2aa:	1b53      	subs	r3, r2, r5
   2e2ac:	429a      	cmp	r2, r3
   2e2ae:	dc4a      	bgt.n	2e346 <nrf_cloud_pgps_preemptive_updates+0x142>
	npgps_print_blocks();
   2e2b0:	f000 fdd2 	bl	2ee58 <npgps_print_blocks>
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e2b4:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   2e2b8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e2ba:	f10d 020e 	add.w	r2, sp, #14
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e2be:	4368      	muls	r0, r5
   2e2c0:	18c0      	adds	r0, r0, r3
   2e2c2:	f141 0100 	adc.w	r1, r1, #0
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e2c6:	ab05      	add	r3, sp, #20
		*gps_sec = psec;
   2e2c8:	e9c4 0104 	strd	r0, r1, [r4, #16]
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e2cc:	f000 fcbe 	bl	2ec4c <npgps_gps_sec_to_day_time>
	index.header.gps_day = gps_day;
   2e2d0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2e2d4:	8163      	strh	r3, [r4, #10]
	index.header.gps_time_of_day = gps_time_of_day;
   2e2d6:	9b05      	ldr	r3, [sp, #20]
   2e2d8:	60e3      	str	r3, [r4, #12]
	npgps_gps_sec_to_day_time(index.end_sec, &gps_day, &gps_time_of_day);
   2e2da:	ab04      	add	r3, sp, #16
   2e2dc:	aa03      	add	r2, sp, #12
   2e2de:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   2e2e2:	f000 fcb3 	bl	2ec4c <npgps_gps_sec_to_day_time>
	request.gps_day = gps_day;
   2e2e6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2e2ea:	f8ad 3018 	strh.w	r3, [sp, #24]
	request.gps_time_of_day = gps_time_of_day;
   2e2ee:	9b04      	ldr	r3, [sp, #16]
   2e2f0:	f8cd 301a 	str.w	r3, [sp, #26]
	request.prediction_count = npgps_num_free();
   2e2f4:	f000 fde8 	bl	2eec8 <npgps_num_free>
   2e2f8:	f8ad 0014 	strh.w	r0, [sp, #20]
	return pgps_request(&request);
   2e2fc:	a805      	add	r0, sp, #20
	request.prediction_period_min = period_min;
   2e2fe:	f8ad 7016 	strh.w	r7, [sp, #22]
	return pgps_request(&request);
   2e302:	f7ff facb 	bl	2d89c <pgps_request>
   2e306:	e791      	b.n	2e22c <nrf_cloud_pgps_preemptive_updates+0x28>
		block = npgps_pointer_to_block((uint8_t *)index.predictions[pnum]);
   2e308:	f859 0b04 	ldr.w	r0, [r9], #4
   2e30c:	f000 fe20 	bl	2ef50 <npgps_pointer_to_block>
		__ASSERT((block != -1), "unexpected ptr:%p for Prediction num:%d",
   2e310:	1c42      	adds	r2, r0, #1
		block = npgps_pointer_to_block((uint8_t *)index.predictions[pnum]);
   2e312:	4603      	mov	r3, r0
		__ASSERT((block != -1), "unexpected ptr:%p for Prediction num:%d",
   2e314:	d10c      	bne.n	2e330 <nrf_cloud_pgps_preemptive_updates+0x12c>
   2e316:	f44f 72b1 	mov.w	r2, #354	; 0x162
   2e31a:	4651      	mov	r1, sl
   2e31c:	9001      	str	r0, [sp, #4]
   2e31e:	4658      	mov	r0, fp
   2e320:	f00e fc9b 	bl	3cc5a <assert_print>
   2e324:	f44f 71b1 	mov.w	r1, #354	; 0x162
   2e328:	4650      	mov	r0, sl
   2e32a:	f00e fc8f 	bl	3cc4c <assert_post_action>
   2e32e:	9b01      	ldr	r3, [sp, #4]
		npgps_free_block(block);
   2e330:	4618      	mov	r0, r3
   2e332:	f000 fd3b 	bl	2edac <npgps_free_block>
	for (pnum = 0; pnum < last; pnum++) {
   2e336:	3501      	adds	r5, #1
   2e338:	e7b0      	b.n	2e29c <nrf_cloud_pgps_preemptive_updates+0x98>
		index.predictions[pnum] = index.predictions[i];
   2e33a:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
	for (i = last; i < index.header.prediction_count; i++) {
   2e33e:	3301      	adds	r3, #1
		index.predictions[pnum] = index.predictions[i];
   2e340:	f846 1b04 	str.w	r1, [r6], #4
	for (i = last; i < index.header.prediction_count; i++) {
   2e344:	e7ae      	b.n	2e2a4 <nrf_cloud_pgps_preemptive_updates+0xa0>
		index.predictions[pnum] = NULL;
   2e346:	eb04 0083 	add.w	r0, r4, r3, lsl #2
   2e34a:	63c1      	str	r1, [r0, #60]	; 0x3c
	      index.header.prediction_count; pnum++) {
   2e34c:	3301      	adds	r3, #1
   2e34e:	e7ad      	b.n	2e2ac <nrf_cloud_pgps_preemptive_updates+0xa8>
   2e350:	2001d2bf 	.word	0x2001d2bf
   2e354:	20015810 	.word	0x20015810
   2e358:	0004932d 	.word	0x0004932d
   2e35c:	2001a114 	.word	0x2001a114
   2e360:	00049b01 	.word	0x00049b01
   2e364:	2001584c 	.word	0x2001584c
   2e368:	00049b37 	.word	0x00049b37
   2e36c:	00049b4a 	.word	0x00049b4a
   2e370:	00044263 	.word	0x00044263

0002e374 <nrf_cloud_pgps_inject>:
{
   2e374:	b570      	push	{r4, r5, r6, lr}
	if (state == PGPS_NONE) {
   2e376:	4a64      	ldr	r2, [pc, #400]	; (2e508 <nrf_cloud_pgps_inject+0x194>)
{
   2e378:	4606      	mov	r6, r0
	if (state == PGPS_NONE) {
   2e37a:	7812      	ldrb	r2, [r2, #0]
{
   2e37c:	460b      	mov	r3, r1
   2e37e:	b0ae      	sub	sp, #184	; 0xb8
	if (state == PGPS_NONE) {
   2e380:	b942      	cbnz	r2, 2e394 <nrf_cloud_pgps_inject+0x20>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2e382:	2145      	movs	r1, #69	; 0x45
   2e384:	4861      	ldr	r0, [pc, #388]	; (2e50c <nrf_cloud_pgps_inject+0x198>)
   2e386:	f00e fca2 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   2e38a:	f06f 0415 	mvn.w	r4, #21
}
   2e38e:	4620      	mov	r0, r4
   2e390:	b02e      	add	sp, #184	; 0xb8
   2e392:	bd70      	pop	{r4, r5, r6, pc}
	if (request != NULL) {
   2e394:	2900      	cmp	r1, #0
   2e396:	f000 809c 	beq.w	2e4d2 <nrf_cloud_pgps_inject+0x15e>
		memcpy(&remainder, request, sizeof(remainder));
   2e39a:	6808      	ldr	r0, [r1, #0]
   2e39c:	6849      	ldr	r1, [r1, #4]
   2e39e:	aa04      	add	r2, sp, #16
   2e3a0:	c203      	stmia	r2!, {r0, r1}
   2e3a2:	6898      	ldr	r0, [r3, #8]
   2e3a4:	6010      	str	r0, [r2, #0]
	nrf_cloud_agps_processed(&processed);
   2e3a6:	a807      	add	r0, sp, #28
   2e3a8:	f7fe feea 	bl	2d180 <nrf_cloud_agps_processed>
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST &&
   2e3ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2e3ae:	06d4      	lsls	r4, r2, #27
   2e3b0:	d505      	bpl.n	2e3be <nrf_cloud_pgps_inject+0x4a>
	    remainder.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   2e3b2:	9b06      	ldr	r3, [sp, #24]
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST &&
   2e3b4:	06d8      	lsls	r0, r3, #27
		remainder.data_flags &= ~NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2e3b6:	bf44      	itt	mi
   2e3b8:	f023 0310 	bicmi.w	r3, r3, #16
   2e3bc:	9306      	strmi	r3, [sp, #24]
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST &&
   2e3be:	0711      	lsls	r1, r2, #28
   2e3c0:	d505      	bpl.n	2e3ce <nrf_cloud_pgps_inject+0x5a>
	    remainder.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   2e3c2:	9b06      	ldr	r3, [sp, #24]
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST &&
   2e3c4:	071a      	lsls	r2, r3, #28
		remainder.data_flags &= ~NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST;
   2e3c6:	bf44      	itt	mi
   2e3c8:	f023 0308 	bicmi.w	r3, r3, #8
   2e3cc:	9306      	strmi	r3, [sp, #24]
	if (remainder.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   2e3ce:	9d06      	ldr	r5, [sp, #24]
   2e3d0:	f015 0408 	ands.w	r4, r5, #8
   2e3d4:	f000 8088 	beq.w	2e4e8 <nrf_cloud_pgps_inject+0x174>
		sys_time.time.time_frac_ms = 0;
   2e3d8:	2400      	movs	r4, #0
		sys_time.type = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   2e3da:	2207      	movs	r2, #7
		sys_time.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e3dc:	2301      	movs	r3, #1
		sys_time.type = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   2e3de:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
		err = npgps_get_time(NULL, &day, &sec);
   2e3e2:	4620      	mov	r0, r4
   2e3e4:	aa03      	add	r2, sp, #12
   2e3e6:	f10d 010a 	add.w	r1, sp, #10
		sys_time.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e3ea:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		sys_time.count = 1;
   2e3ee:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		sys_time.time.time_frac_ms = 0;
   2e3f2:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
		sys_time.time.sv_mask = 0;
   2e3f6:	940d      	str	r4, [sp, #52]	; 0x34
		err = npgps_get_time(NULL, &day, &sec);
   2e3f8:	f011 fa96 	bl	3f928 <npgps_get_time>
		if (!err) {
   2e3fc:	2800      	cmp	r0, #0
   2e3fe:	d16e      	bne.n	2e4de <nrf_cloud_pgps_inject+0x16a>
			sys_time.time.date_day = day;
   2e400:	f8bd 200a 	ldrh.w	r2, [sp, #10]
			sys_time.time.time_full_s = sec;
   2e404:	9b03      	ldr	r3, [sp, #12]
			LOG_INF("GPS unit needs time assistance. Injecting day:%u, time:%u",
   2e406:	2149      	movs	r1, #73	; 0x49
   2e408:	4841      	ldr	r0, [pc, #260]	; (2e510 <nrf_cloud_pgps_inject+0x19c>)
			sys_time.time.date_day = day;
   2e40a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
			sys_time.time.time_full_s = sec;
   2e40e:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
			LOG_INF("GPS unit needs time assistance. Injecting day:%u, time:%u",
   2e412:	f00e fc5c 	bl	3ccce <z_log_minimal_printk>
			err = nrf_cloud_agps_process((const char *)&sys_time,
   2e416:	2110      	movs	r1, #16
   2e418:	a80a      	add	r0, sp, #40	; 0x28
   2e41a:	f7fe fc35 	bl	2cc88 <nrf_cloud_agps_process>
			if (err) {
   2e41e:	4604      	mov	r4, r0
   2e420:	b140      	cbz	r0, 2e434 <nrf_cloud_pgps_inject+0xc0>
				LOG_ERR("Error injecting P-GPS sys_time (%u, %u): %d",
   2e422:	9000      	str	r0, [sp, #0]
   2e424:	2145      	movs	r1, #69	; 0x45
   2e426:	f8dd 302e 	ldr.w	r3, [sp, #46]	; 0x2e
   2e42a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   2e42e:	4839      	ldr	r0, [pc, #228]	; (2e514 <nrf_cloud_pgps_inject+0x1a0>)
   2e430:	f00e fc4d 	bl	3ccce <z_log_minimal_printk>
	const struct gps_location *saved_location = npgps_get_saved_location();
   2e434:	f000 fbd2 	bl	2ebdc <npgps_get_saved_location>
	if (remainder.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST &&
   2e438:	06eb      	lsls	r3, r5, #27
   2e43a:	d55d      	bpl.n	2e4f8 <nrf_cloud_pgps_inject+0x184>
   2e43c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   2e440:	4313      	orrs	r3, r2
   2e442:	d054      	beq.n	2e4ee <nrf_cloud_pgps_inject+0x17a>
		location.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e444:	2301      	movs	r3, #1
		location.type = NRF_CLOUD_AGPS_LOCATION;
   2e446:	2208      	movs	r2, #8
		location.location.altitude = 0;
   2e448:	2100      	movs	r1, #0
		location.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e44a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		location.type = NRF_CLOUD_AGPS_LOCATION;
   2e44e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
		location.location.latitude = saved_location->latitude;
   2e452:	6802      	ldr	r2, [r0, #0]
		location.count = 1;
   2e454:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		location.location.longitude = saved_location->longitude;
   2e458:	6843      	ldr	r3, [r0, #4]
		location.location.altitude = 0;
   2e45a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
		location.location.orientation_major = 0;
   2e45e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
		location.location.unc_altitude = 0xFF; /* tell modem it is invalid */
   2e462:	21ff      	movs	r1, #255	; 0xff
		location.location.unc_semimajor = LOCATION_UNC_SEMIMAJOR_K;
   2e464:	2059      	movs	r0, #89	; 0x59
		location.location.unc_altitude = 0xFF; /* tell modem it is invalid */
   2e466:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		location.location.confidence = LOCATION_CONFIDENCE_PERCENT;
   2e46a:	2144      	movs	r1, #68	; 0x44
		location.location.unc_semimajor = LOCATION_UNC_SEMIMAJOR_K;
   2e46c:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
		location.location.unc_semiminor = LOCATION_UNC_SEMIMINOR_K;
   2e470:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
		location.location.confidence = LOCATION_CONFIDENCE_PERCENT;
   2e474:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
		LOG_INF("GPS unit needs position. Injecting lat:%d, lng:%d",
   2e478:	4827      	ldr	r0, [pc, #156]	; (2e518 <nrf_cloud_pgps_inject+0x1a4>)
   2e47a:	2149      	movs	r1, #73	; 0x49
		location.location.latitude = saved_location->latitude;
   2e47c:	920b      	str	r2, [sp, #44]	; 0x2c
		location.location.longitude = saved_location->longitude;
   2e47e:	930c      	str	r3, [sp, #48]	; 0x30
		LOG_INF("GPS unit needs position. Injecting lat:%d, lng:%d",
   2e480:	f00e fc25 	bl	3ccce <z_log_minimal_printk>
		err = nrf_cloud_agps_process((const char *)&location, sizeof(location));
   2e484:	2113      	movs	r1, #19
   2e486:	a80a      	add	r0, sp, #40	; 0x28
   2e488:	f7fe fbfe 	bl	2cc88 <nrf_cloud_agps_process>
		if (err) {
   2e48c:	4605      	mov	r5, r0
   2e48e:	b138      	cbz	r0, 2e4a0 <nrf_cloud_pgps_inject+0x12c>
			LOG_ERR("Error injecting P-GPS location (%d, %d): %d",
   2e490:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
   2e494:	9000      	str	r0, [sp, #0]
   2e496:	2145      	movs	r1, #69	; 0x45
   2e498:	4820      	ldr	r0, [pc, #128]	; (2e51c <nrf_cloud_pgps_inject+0x1a8>)
   2e49a:	f00e fc18 	bl	3ccce <z_log_minimal_printk>
   2e49e:	462c      	mov	r4, r5
	if (remainder.sv_mask_ephe) {
   2e4a0:	9b04      	ldr	r3, [sp, #16]
   2e4a2:	b363      	cbz	r3, 2e4fe <nrf_cloud_pgps_inject+0x18a>
		LOG_INF("GPS unit needs ephemerides. Injecting %u.", p->ephemeris_count);
   2e4a4:	2149      	movs	r1, #73	; 0x49
   2e4a6:	f8b6 2015 	ldrh.w	r2, [r6, #21]
   2e4aa:	481d      	ldr	r0, [pc, #116]	; (2e520 <nrf_cloud_pgps_inject+0x1ac>)
   2e4ac:	f00e fc0f 	bl	3ccce <z_log_minimal_printk>
		err = nrf_cloud_agps_process((const char *)&p->schema_version,
   2e4b0:	f240 71c4 	movw	r1, #1988	; 0x7c4
   2e4b4:	f106 0013 	add.w	r0, r6, #19
   2e4b8:	f7fe fbe6 	bl	2cc88 <nrf_cloud_agps_process>
		if (err) {
   2e4bc:	4605      	mov	r5, r0
   2e4be:	2800      	cmp	r0, #0
   2e4c0:	f43f af65 	beq.w	2e38e <nrf_cloud_pgps_inject+0x1a>
			LOG_ERR("Error injecting ephermerii:%d", err);
   2e4c4:	4602      	mov	r2, r0
   2e4c6:	2145      	movs	r1, #69	; 0x45
   2e4c8:	4816      	ldr	r0, [pc, #88]	; (2e524 <nrf_cloud_pgps_inject+0x1b0>)
   2e4ca:	f00e fc00 	bl	3ccce <z_log_minimal_printk>
   2e4ce:	462c      	mov	r4, r5
   2e4d0:	e75d      	b.n	2e38e <nrf_cloud_pgps_inject+0x1a>
		remainder.sv_mask_ephe = 0xFFFFFFFFU;
   2e4d2:	f04f 33ff 	mov.w	r3, #4294967295
		memset(&remainder, 0, sizeof(remainder));
   2e4d6:	e9cd 1105 	strd	r1, r1, [sp, #20]
		remainder.sv_mask_ephe = 0xFFFFFFFFU;
   2e4da:	9304      	str	r3, [sp, #16]
   2e4dc:	e763      	b.n	2e3a6 <nrf_cloud_pgps_inject+0x32>
			LOG_WRN("Current time not known; cannot provide time assistance");
   2e4de:	2157      	movs	r1, #87	; 0x57
   2e4e0:	4811      	ldr	r0, [pc, #68]	; (2e528 <nrf_cloud_pgps_inject+0x1b4>)
		LOG_INF("GPS unit does not need time assistance.");
   2e4e2:	f00e fbf4 	bl	3ccce <z_log_minimal_printk>
   2e4e6:	e7a5      	b.n	2e434 <nrf_cloud_pgps_inject+0xc0>
   2e4e8:	2149      	movs	r1, #73	; 0x49
   2e4ea:	4810      	ldr	r0, [pc, #64]	; (2e52c <nrf_cloud_pgps_inject+0x1b8>)
   2e4ec:	e7f9      	b.n	2e4e2 <nrf_cloud_pgps_inject+0x16e>
		LOG_WRN("GPS unit needs location, but it is unknown!");
   2e4ee:	2157      	movs	r1, #87	; 0x57
   2e4f0:	480f      	ldr	r0, [pc, #60]	; (2e530 <nrf_cloud_pgps_inject+0x1bc>)
		LOG_INF("GPS unit does not need location assistance.");
   2e4f2:	f00e fbec 	bl	3ccce <z_log_minimal_printk>
   2e4f6:	e7d3      	b.n	2e4a0 <nrf_cloud_pgps_inject+0x12c>
   2e4f8:	2149      	movs	r1, #73	; 0x49
   2e4fa:	480e      	ldr	r0, [pc, #56]	; (2e534 <nrf_cloud_pgps_inject+0x1c0>)
   2e4fc:	e7f9      	b.n	2e4f2 <nrf_cloud_pgps_inject+0x17e>
		LOG_INF("GPS unit does not need ephemerides.");
   2e4fe:	2149      	movs	r1, #73	; 0x49
   2e500:	480d      	ldr	r0, [pc, #52]	; (2e538 <nrf_cloud_pgps_inject+0x1c4>)
   2e502:	f00e fbe4 	bl	3ccce <z_log_minimal_printk>
   2e506:	e742      	b.n	2e38e <nrf_cloud_pgps_inject+0x1a>
   2e508:	2001d2bf 	.word	0x2001d2bf
   2e50c:	0004932d 	.word	0x0004932d
   2e510:	00049b88 	.word	0x00049b88
   2e514:	00049bc7 	.word	0x00049bc7
   2e518:	00049c61 	.word	0x00049c61
   2e51c:	00049c98 	.word	0x00049c98
   2e520:	00049d2b 	.word	0x00049d2b
   2e524:	00049d5a 	.word	0x00049d5a
   2e528:	00049bf8 	.word	0x00049bf8
   2e52c:	00049c34 	.word	0x00049c34
   2e530:	00049cc9 	.word	0x00049cc9
   2e534:	00049cfa 	.word	0x00049cfa
   2e538:	00049d7d 	.word	0x00049d7d

0002e53c <prediction_work_handler>:
{
   2e53c:	b507      	push	{r0, r1, r2, lr}
	LOG_INF("prediction is expiring; finding next");
   2e53e:	2149      	movs	r1, #73	; 0x49
   2e540:	480c      	ldr	r0, [pc, #48]	; (2e574 <prediction_work_handler+0x38>)
   2e542:	f00e fbc4 	bl	3ccce <z_log_minimal_printk>
	ret = nrf_cloud_pgps_find_prediction(&p);
   2e546:	a801      	add	r0, sp, #4
   2e548:	f7ff fa82 	bl	2da50 <nrf_cloud_pgps_find_prediction>
	if (ret >= 0) {
   2e54c:	2800      	cmp	r0, #0
   2e54e:	db09      	blt.n	2e564 <prediction_work_handler+0x28>
		ret = nrf_cloud_pgps_inject(p, NULL);
   2e550:	2100      	movs	r1, #0
   2e552:	9801      	ldr	r0, [sp, #4]
   2e554:	f7ff ff0e 	bl	2e374 <nrf_cloud_pgps_inject>
		if (ret) {
   2e558:	4602      	mov	r2, r0
   2e55a:	b130      	cbz	r0, 2e56a <prediction_work_handler+0x2e>
			LOG_ERR("Error injecting prediction:%d", ret);
   2e55c:	2145      	movs	r1, #69	; 0x45
   2e55e:	4806      	ldr	r0, [pc, #24]	; (2e578 <prediction_work_handler+0x3c>)
   2e560:	f00e fbb5 	bl	3ccce <z_log_minimal_printk>
}
   2e564:	b003      	add	sp, #12
   2e566:	f85d fb04 	ldr.w	pc, [sp], #4
			LOG_INF("Next prediction injected successfully.");
   2e56a:	2149      	movs	r1, #73	; 0x49
   2e56c:	4803      	ldr	r0, [pc, #12]	; (2e57c <prediction_work_handler+0x40>)
   2e56e:	f00e fbae 	bl	3ccce <z_log_minimal_printk>
}
   2e572:	e7f7      	b.n	2e564 <prediction_work_handler+0x28>
   2e574:	00049da6 	.word	0x00049da6
   2e578:	00049dd0 	.word	0x00049dd0
   2e57c:	00049df3 	.word	0x00049df3

0002e580 <nrf_cloud_pgps_process>:
	return 0;
}

/* handle incoming P-GPS packets */
int nrf_cloud_pgps_process(const char *buf, size_t buf_len)
{
   2e580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static char host[CONFIG_DOWNLOAD_CLIENT_MAX_HOSTNAME_SIZE];
	static char path[CONFIG_DOWNLOAD_CLIENT_MAX_FILENAME_SIZE];
	static uint8_t prev_pnum;
	uint8_t pnum;
	int err;
	struct nrf_cloud_pgps_result pgps_dl = {
   2e584:	4b41      	ldr	r3, [pc, #260]	; (2e68c <nrf_cloud_pgps_process+0x10c>)
		.host_sz = sizeof(host),
		.path = path,
		.path_sz = sizeof(path)
	};

	if (state == PGPS_NONE) {
   2e586:	4d42      	ldr	r5, [pc, #264]	; (2e690 <nrf_cloud_pgps_process+0x110>)
{
   2e588:	b086      	sub	sp, #24
	struct nrf_cloud_pgps_result pgps_dl = {
   2e58a:	ac02      	add	r4, sp, #8
{
   2e58c:	4680      	mov	r8, r0
   2e58e:	460f      	mov	r7, r1
	struct nrf_cloud_pgps_result pgps_dl = {
   2e590:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2e592:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (state == PGPS_NONE) {
   2e596:	782b      	ldrb	r3, [r5, #0]
   2e598:	b943      	cbnz	r3, 2e5ac <nrf_cloud_pgps_process+0x2c>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2e59a:	2145      	movs	r1, #69	; 0x45
   2e59c:	483d      	ldr	r0, [pc, #244]	; (2e694 <nrf_cloud_pgps_process+0x114>)
   2e59e:	f00e fb96 	bl	3ccce <z_log_minimal_printk>
	LOG_HEXDUMP_DBG(buf, buf_len, "MQTT packet");
#endif
	if (!buf_len) {
		LOG_ERR("Zero length packet received");
		state = PGPS_NONE;
		return -EINVAL;
   2e5a2:	f06f 0015 	mvn.w	r0, #21
	if (err) {
		state = PGPS_NONE;
	}

	return err;
}
   2e5a6:	b006      	add	sp, #24
   2e5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!buf_len) {
   2e5ac:	b92f      	cbnz	r7, 2e5ba <nrf_cloud_pgps_process+0x3a>
		LOG_ERR("Zero length packet received");
   2e5ae:	2145      	movs	r1, #69	; 0x45
   2e5b0:	4839      	ldr	r0, [pc, #228]	; (2e698 <nrf_cloud_pgps_process+0x118>)
   2e5b2:	f00e fb8c 	bl	3ccce <z_log_minimal_printk>
		state = PGPS_NONE;
   2e5b6:	702f      	strb	r7, [r5, #0]
   2e5b8:	e7f3      	b.n	2e5a2 <nrf_cloud_pgps_process+0x22>
	if (ignore_packets) {
   2e5ba:	4e38      	ldr	r6, [pc, #224]	; (2e69c <nrf_cloud_pgps_process+0x11c>)
   2e5bc:	7833      	ldrb	r3, [r6, #0]
   2e5be:	b173      	cbz	r3, 2e5de <nrf_cloud_pgps_process+0x5e>
		LOG_ERR("IGNORING PACKETS");
   2e5c0:	2145      	movs	r1, #69	; 0x45
   2e5c2:	4837      	ldr	r0, [pc, #220]	; (2e6a0 <nrf_cloud_pgps_process+0x120>)
   2e5c4:	f00e fb83 	bl	3ccce <z_log_minimal_printk>
		LOG_HEXDUMP_INF(buf, buf_len, "Unexpected packet");
   2e5c8:	2149      	movs	r1, #73	; 0x49
   2e5ca:	4a36      	ldr	r2, [pc, #216]	; (2e6a4 <nrf_cloud_pgps_process+0x124>)
   2e5cc:	4836      	ldr	r0, [pc, #216]	; (2e6a8 <nrf_cloud_pgps_process+0x128>)
   2e5ce:	f00e fb7e 	bl	3ccce <z_log_minimal_printk>
   2e5d2:	463a      	mov	r2, r7
   2e5d4:	4641      	mov	r1, r8
   2e5d6:	2003      	movs	r0, #3
   2e5d8:	f7f3 f862 	bl	216a0 <z_log_minimal_hexdump_print>
		return -EINVAL;
   2e5dc:	e7e1      	b.n	2e5a2 <nrf_cloud_pgps_process+0x22>
	err = nrf_cloud_parse_pgps_response(buf, &pgps_dl);
   2e5de:	4621      	mov	r1, r4
   2e5e0:	4640      	mov	r0, r8
   2e5e2:	f7fc fe7d 	bl	2b2e0 <nrf_cloud_parse_pgps_response>
	if (err) {
   2e5e6:	2800      	cmp	r0, #0
   2e5e8:	d1dd      	bne.n	2e5a6 <nrf_cloud_pgps_process+0x26>
	state = PGPS_LOADING;
   2e5ea:	2305      	movs	r3, #5
	if (!index.partial_request) {
   2e5ec:	4c2f      	ldr	r4, [pc, #188]	; (2e6ac <nrf_cloud_pgps_process+0x12c>)
	state = PGPS_LOADING;
   2e5ee:	702b      	strb	r3, [r5, #0]
	if (!index.partial_request) {
   2e5f0:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
   2e5f4:	b9d9      	cbnz	r1, 2e62e <nrf_cloud_pgps_process+0xae>
		index.header.prediction_count = NUM_PREDICTIONS;
   2e5f6:	232a      	movs	r3, #42	; 0x2a
   2e5f8:	80a3      	strh	r3, [r4, #4]
		index.header.prediction_period_min = PREDICTION_PERIOD;
   2e5fa:	23f0      	movs	r3, #240	; 0xf0
   2e5fc:	8123      	strh	r3, [r4, #8]
		index.period_sec =
   2e5fe:	f44f 5361 	mov.w	r3, #14400	; 0x3840
		memset(index.predictions, 0, sizeof(index.predictions));
   2e602:	22a8      	movs	r2, #168	; 0xa8
   2e604:	f104 003c 	add.w	r0, r4, #60	; 0x3c
		index.period_sec =
   2e608:	8563      	strh	r3, [r4, #42]	; 0x2a
		memset(index.predictions, 0, sizeof(index.predictions));
   2e60a:	f012 fffa 	bl	41602 <memset>
	index.loading_count = 0;
   2e60e:	2700      	movs	r7, #0
   2e610:	8527      	strh	r7, [r4, #40]	; 0x28
	index.store_block = npgps_alloc_block();
   2e612:	f000 fbad 	bl	2ed70 <npgps_alloc_block>
   2e616:	4603      	mov	r3, r0
	if (index.store_block == NO_BLOCK) {
   2e618:	3301      	adds	r3, #1
	index.store_block = npgps_alloc_block();
   2e61a:	63a0      	str	r0, [r4, #56]	; 0x38
	if (index.store_block == NO_BLOCK) {
   2e61c:	d113      	bne.n	2e646 <nrf_cloud_pgps_process+0xc6>
		LOG_ERR("No free flash space!");
   2e61e:	4824      	ldr	r0, [pc, #144]	; (2e6b0 <nrf_cloud_pgps_process+0x130>)
   2e620:	2145      	movs	r1, #69	; 0x45
   2e622:	f00e fb54 	bl	3ccce <z_log_minimal_printk>
		return -ENOMEM;
   2e626:	f06f 000b 	mvn.w	r0, #11
		state = PGPS_NONE;
   2e62a:	702f      	strb	r7, [r5, #0]
		return -ENOMEM;
   2e62c:	e7bb      	b.n	2e5a6 <nrf_cloud_pgps_process+0x26>
		for (pnum = index.pnum_offset;
   2e62e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
		     pnum < index.expected_count + index.pnum_offset; pnum++) {
   2e632:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   2e634:	441a      	add	r2, r3
		for (pnum = index.pnum_offset;
   2e636:	4293      	cmp	r3, r2
   2e638:	dae9      	bge.n	2e60e <nrf_cloud_pgps_process+0x8e>
			index.predictions[pnum] = NULL;
   2e63a:	eb04 0183 	add.w	r1, r4, r3, lsl #2
		     pnum < index.expected_count + index.pnum_offset; pnum++) {
   2e63e:	3301      	adds	r3, #1
			index.predictions[pnum] = NULL;
   2e640:	63c8      	str	r0, [r1, #60]	; 0x3c
		     pnum < index.expected_count + index.pnum_offset; pnum++) {
   2e642:	b2db      	uxtb	r3, r3
   2e644:	e7f7      	b.n	2e636 <nrf_cloud_pgps_process+0xb6>
	index.storage_extent = npgps_get_block_extent(index.store_block);
   2e646:	f000 fbbd 	bl	2edc4 <npgps_get_block_extent>
	LOG_INF("opening storage at block:%d, len:%d", index.store_block,
   2e64a:	2149      	movs	r1, #73	; 0x49
	index.storage_extent = npgps_get_block_extent(index.store_block);
   2e64c:	4603      	mov	r3, r0
	LOG_INF("opening storage at block:%d, len:%d", index.store_block,
   2e64e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	index.storage_extent = npgps_get_block_extent(index.store_block);
   2e650:	6360      	str	r0, [r4, #52]	; 0x34
	LOG_INF("opening storage at block:%d, len:%d", index.store_block,
   2e652:	4818      	ldr	r0, [pc, #96]	; (2e6b4 <nrf_cloud_pgps_process+0x134>)
   2e654:	f00e fb3b 	bl	3ccce <z_log_minimal_printk>
	err = open_storage(npgps_block_to_offset(index.store_block),
   2e658:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2e65a:	f000 fc65 	bl	2ef28 <npgps_block_to_offset>
   2e65e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
   2e662:	f7ff f8a3 	bl	2d7ac <open_storage>
	if (err) {
   2e666:	b108      	cbz	r0, 2e66c <nrf_cloud_pgps_process+0xec>
		state = PGPS_NONE;
   2e668:	702f      	strb	r7, [r5, #0]
   2e66a:	e79c      	b.n	2e5a6 <nrf_cloud_pgps_process+0x26>
	ignore_packets = true;
   2e66c:	2301      	movs	r3, #1
   2e66e:	7033      	strb	r3, [r6, #0]
	err =  npgps_download_start(pgps_dl.host, pgps_dl.path, sec_tag, 0, FRAGMENT_SIZE);
   2e670:	f240 53dc 	movw	r3, #1500	; 0x5dc
	index.dl_offset = 0;
   2e674:	6220      	str	r0, [r4, #32]
	err =  npgps_download_start(pgps_dl.host, pgps_dl.path, sec_tag, 0, FRAGMENT_SIZE);
   2e676:	4a10      	ldr	r2, [pc, #64]	; (2e6b8 <nrf_cloud_pgps_process+0x138>)
   2e678:	9300      	str	r3, [sp, #0]
   2e67a:	9904      	ldr	r1, [sp, #16]
   2e67c:	4603      	mov	r3, r0
   2e67e:	9802      	ldr	r0, [sp, #8]
   2e680:	f000 fcb0 	bl	2efe4 <npgps_download_start>
	if (err) {
   2e684:	2800      	cmp	r0, #0
   2e686:	d08e      	beq.n	2e5a6 <nrf_cloud_pgps_process+0x26>
   2e688:	e7ee      	b.n	2e668 <nrf_cloud_pgps_process+0xe8>
   2e68a:	bf00      	nop
   2e68c:	000429ec 	.word	0x000429ec
   2e690:	2001d2bf 	.word	0x2001d2bf
   2e694:	0004932d 	.word	0x0004932d
   2e698:	00049e1f 	.word	0x00049e1f
   2e69c:	2001c9d9 	.word	0x2001c9d9
   2e6a0:	00049e40 	.word	0x00049e40
   2e6a4:	00049e56 	.word	0x00049e56
   2e6a8:	00049e68 	.word	0x00049e68
   2e6ac:	20015810 	.word	0x20015810
   2e6b0:	00049e70 	.word	0x00049e70
   2e6b4:	00049e8a 	.word	0x00049e8a
   2e6b8:	01010001 	.word	0x01010001

0002e6bc <nrf_cloud_pgps_init>:

int nrf_cloud_pgps_init(struct nrf_cloud_pgps_init_param *param)
{
	int err = 0;
	struct nrf_cloud_pgps_event evt = {
   2e6bc:	2300      	movs	r3, #0
{
   2e6be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e6c2:	b097      	sub	sp, #92	; 0x5c
	struct nrf_cloud_pgps_event evt = {
   2e6c4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44

#if defined(CONFIG_NRF_CLOUD_PGPS_STORAGE_PARTITION)
	BUILD_ASSERT(CONFIG_NRF_CLOUD_PGPS_PARTITION_SIZE >=
		 (CONFIG_NRF_CLOUD_PGPS_NUM_PREDICTIONS * BLOCK_SIZE),
		 "P-GPS partition size is too small");
	if (param->storage_base || param->storage_size) {
   2e6c8:	6843      	ldr	r3, [r0, #4]
{
   2e6ca:	4604      	mov	r4, r0
	if (param->storage_base || param->storage_size) {
   2e6cc:	b90b      	cbnz	r3, 2e6d2 <nrf_cloud_pgps_init+0x16>
   2e6ce:	6883      	ldr	r3, [r0, #8]
   2e6d0:	b11b      	cbz	r3, 2e6da <nrf_cloud_pgps_init+0x1e>
		LOG_WRN("Overriding P-GPS storage with P-GPS partition");
   2e6d2:	2157      	movs	r1, #87	; 0x57
   2e6d4:	48ae      	ldr	r0, [pc, #696]	; (2e990 <nrf_cloud_pgps_init+0x2d4>)
   2e6d6:	f00e fafa 	bl	3ccce <z_log_minimal_printk>
	}
	param->storage_base = PM_PGPS_ADDRESS;
	param->storage_size = PM_PGPS_SIZE;
   2e6da:	f44f 33a8 	mov.w	r3, #86016	; 0x15000
   2e6de:	f44f 216b 	mov.w	r1, #962560	; 0xeb000
	__ASSERT(param->storage_base != 0u, "P-GPS flash storage must be provided");
	__ASSERT((param->storage_size >= (NUM_BLOCKS * BLOCK_SIZE)),
		 "insufficient storage provided; need at least %u bytes",
		 (NUM_BLOCKS * BLOCK_SIZE));

	evt_handler = param->event_handler;
   2e6e2:	4aac      	ldr	r2, [pc, #688]	; (2e994 <nrf_cloud_pgps_init+0x2d8>)
	param->storage_size = PM_PGPS_SIZE;
   2e6e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
	evt_handler = param->event_handler;
   2e6e8:	6823      	ldr	r3, [r4, #0]
   2e6ea:	6013      	str	r3, [r2, #0]
	if (evt_handler) {
   2e6ec:	b10b      	cbz	r3, 2e6f2 <nrf_cloud_pgps_init+0x36>
		evt_handler(&evt);
   2e6ee:	a811      	add	r0, sp, #68	; 0x44
   2e6f0:	4798      	blx	r3
	}

	flash_page_size = nrfx_nvmc_flash_page_size_get();
   2e6f2:	f011 fcc1 	bl	40078 <nrfx_nvmc_flash_page_size_get>
	if (!flash_page_size) {
   2e6f6:	4aa8      	ldr	r2, [pc, #672]	; (2e998 <nrf_cloud_pgps_init+0x2dc>)
   2e6f8:	b140      	cbz	r0, 2e70c <nrf_cloud_pgps_init+0x50>
	flash_page_size = nrfx_nvmc_flash_page_size_get();
   2e6fa:	6010      	str	r0, [r2, #0]
		flash_page_size = 4096;
	}

	if (nrf_cloud_pgps_loading()) {
   2e6fc:	f7ff f8c4 	bl	2d888 <nrf_cloud_pgps_loading>
   2e700:	b140      	cbz	r0, 2e714 <nrf_cloud_pgps_init+0x58>
		return 0;
   2e702:	2400      	movs	r4, #0
		}
		err = 0;
	}

	return err;
}
   2e704:	4620      	mov	r0, r4
   2e706:	b017      	add	sp, #92	; 0x5c
   2e708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		flash_page_size = 4096;
   2e70c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   2e710:	6013      	str	r3, [r2, #0]
   2e712:	e7f3      	b.n	2e6fc <nrf_cloud_pgps_init+0x40>
	if (!write_buf) {
   2e714:	4da1      	ldr	r5, [pc, #644]	; (2e99c <nrf_cloud_pgps_init+0x2e0>)
	state = PGPS_NONE;
   2e716:	4ea2      	ldr	r6, [pc, #648]	; (2e9a0 <nrf_cloud_pgps_init+0x2e4>)
	if (!write_buf) {
   2e718:	682b      	ldr	r3, [r5, #0]
	state = PGPS_NONE;
   2e71a:	7030      	strb	r0, [r6, #0]
	if (!write_buf) {
   2e71c:	b1db      	cbz	r3, 2e756 <nrf_cloud_pgps_init+0x9a>
	storage_size = param->storage_size;
   2e71e:	4ba1      	ldr	r3, [pc, #644]	; (2e9a4 <nrf_cloud_pgps_init+0x2e8>)
   2e720:	68a2      	ldr	r2, [r4, #8]
	storage = (uint8_t *)param->storage_base;
   2e722:	6860      	ldr	r0, [r4, #4]
   2e724:	4fa0      	ldr	r7, [pc, #640]	; (2e9a8 <nrf_cloud_pgps_init+0x2ec>)
	memset(&index, 0, sizeof(index));
   2e726:	4da1      	ldr	r5, [pc, #644]	; (2e9ac <nrf_cloud_pgps_init+0x2f0>)
	(void)ngps_block_pool_init(param->storage_base, NUM_PREDICTIONS);
   2e728:	212a      	movs	r1, #42	; 0x2a
	storage_size = param->storage_size;
   2e72a:	601a      	str	r2, [r3, #0]
	storage = (uint8_t *)param->storage_base;
   2e72c:	6038      	str	r0, [r7, #0]
	(void)ngps_block_pool_init(param->storage_base, NUM_PREDICTIONS);
   2e72e:	f000 fb15 	bl	2ed5c <ngps_block_pool_init>
	memset(&index, 0, sizeof(index));
   2e732:	22e8      	movs	r2, #232	; 0xe8
   2e734:	2100      	movs	r1, #0
   2e736:	4628      	mov	r0, r5
   2e738:	f012 ff63 	bl	41602 <memset>
	(void)npgps_settings_init();
   2e73c:	f000 fa52 	bl	2ebe4 <npgps_settings_init>
	err = npgps_download_init(process_buffer);
   2e740:	489b      	ldr	r0, [pc, #620]	; (2e9b0 <nrf_cloud_pgps_init+0x2f4>)
   2e742:	f000 fc2f 	bl	2efa4 <npgps_download_init>
	if (err) {
   2e746:	4604      	mov	r4, r0
   2e748:	b170      	cbz	r0, 2e768 <nrf_cloud_pgps_init+0xac>
		LOG_ERR("Error initializing download client:%d", err);
   2e74a:	4602      	mov	r2, r0
   2e74c:	2145      	movs	r1, #69	; 0x45
   2e74e:	4899      	ldr	r0, [pc, #612]	; (2e9b4 <nrf_cloud_pgps_init+0x2f8>)
   2e750:	f00e fabd 	bl	3ccce <z_log_minimal_printk>
		return err;
   2e754:	e7d6      	b.n	2e704 <nrf_cloud_pgps_init+0x48>
		write_buf = k_malloc(flash_page_size);
   2e756:	6810      	ldr	r0, [r2, #0]
   2e758:	f012 fea9 	bl	414ae <k_malloc>
   2e75c:	6028      	str	r0, [r5, #0]
		if (!write_buf) {
   2e75e:	2800      	cmp	r0, #0
   2e760:	d1dd      	bne.n	2e71e <nrf_cloud_pgps_init+0x62>
			return -ENOMEM;
   2e762:	f06f 040b 	mvn.w	r4, #11
   2e766:	e7cd      	b.n	2e704 <nrf_cloud_pgps_init+0x48>
	state = PGPS_INITIALIZING;
   2e768:	2301      	movs	r3, #1
	uint16_t gps_day = 0;
   2e76a:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
	state = PGPS_INITIALIZING;
   2e76e:	7033      	strb	r3, [r6, #0]
	uint32_t gps_time_of_day = 0;
   2e770:	900f      	str	r0, [sp, #60]	; 0x3c
	saved_header = npgps_get_saved_header();
   2e772:	f000 fa2f 	bl	2ebd4 <npgps_get_saved_header>
   2e776:	4606      	mov	r6, r0
	if (validate_pgps_header(saved_header)) {
   2e778:	f7fe ff40 	bl	2d5fc <validate_pgps_header>
   2e77c:	2800      	cmp	r0, #0
   2e77e:	f000 8103 	beq.w	2e988 <nrf_cloud_pgps_init+0x2cc>
		cache_pgps_header(saved_header);
   2e782:	4630      	mov	r0, r6
   2e784:	f7fe ff6c 	bl	2d660 <cache_pgps_header>
		period_min = index.header.prediction_period_min;
   2e788:	892b      	ldrh	r3, [r5, #8]
		count = index.header.prediction_count;
   2e78a:	88ae      	ldrh	r6, [r5, #4]
		period_min = index.header.prediction_period_min;
   2e78c:	9305      	str	r3, [sp, #20]
		gps_day = index.header.gps_day;
   2e78e:	896b      	ldrh	r3, [r5, #10]
		LOG_INF("Checking stored P-GPS data; count:%u, period_min:%u",
   2e790:	4632      	mov	r2, r6
		gps_day = index.header.gps_day;
   2e792:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gps_time_of_day = index.header.gps_time_of_day;
   2e796:	68eb      	ldr	r3, [r5, #12]
		LOG_INF("Checking stored P-GPS data; count:%u, period_min:%u",
   2e798:	2149      	movs	r1, #73	; 0x49
		gps_time_of_day = index.header.gps_time_of_day;
   2e79a:	930f      	str	r3, [sp, #60]	; 0x3c
		LOG_INF("Checking stored P-GPS data; count:%u, period_min:%u",
   2e79c:	4886      	ldr	r0, [pc, #536]	; (2e9b8 <nrf_cloud_pgps_init+0x2fc>)
   2e79e:	9b05      	ldr	r3, [sp, #20]
   2e7a0:	f00e fa95 	bl	3ccce <z_log_minimal_printk>
	uint16_t count = index.header.prediction_count;
   2e7a4:	88ab      	ldrh	r3, [r5, #4]
   2e7a6:	4621      	mov	r1, r4
   2e7a8:	9306      	str	r3, [sp, #24]
	uint16_t period_min = index.header.prediction_period_min;
   2e7aa:	892b      	ldrh	r3, [r5, #8]
   2e7ac:	9308      	str	r3, [sp, #32]
	uint16_t gps_day = index.header.gps_day;
   2e7ae:	896b      	ldrh	r3, [r5, #10]
   2e7b0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
	uint32_t gps_time_of_day = index.header.gps_time_of_day;
   2e7b4:	68eb      	ldr	r3, [r5, #12]
   2e7b6:	9313      	str	r3, [sp, #76]	; 0x4c
	uint8_t *p = storage;
   2e7b8:	683b      	ldr	r3, [r7, #0]
   2e7ba:	9309      	str	r3, [sp, #36]	; 0x24
	int64_t start_gps_sec = index.start_sec;
   2e7bc:	692b      	ldr	r3, [r5, #16]
   2e7be:	930a      	str	r3, [sp, #40]	; 0x28
   2e7c0:	696b      	ldr	r3, [r5, #20]
   2e7c2:	930b      	str	r3, [sp, #44]	; 0x2c
	for (pnum = 0; pnum < count; pnum++) {
   2e7c4:	f105 033c 	add.w	r3, r5, #60	; 0x3c
   2e7c8:	461a      	mov	r2, r3
   2e7ca:	9307      	str	r3, [sp, #28]
   2e7cc:	4623      	mov	r3, r4
   2e7ce:	9806      	ldr	r0, [sp, #24]
   2e7d0:	4283      	cmp	r3, r0
   2e7d2:	db5d      	blt.n	2e890 <nrf_cloud_pgps_init+0x1d4>
	npgps_reset_block_pool();
   2e7d4:	f000 fb0e 	bl	2edf4 <npgps_reset_block_pool>
	for (i = 0; i < count; i++) {
   2e7d8:	f04f 0900 	mov.w	r9, #0
						      header->gps_time_of_day);
   2e7dc:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 2e9ac <nrf_cloud_pgps_init+0x2f0>
   2e7e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e7e2:	eb03 28c9 	add.w	r8, r3, r9, lsl #11
	for (i = 0; i < count; i++) {
   2e7e6:	9b06      	ldr	r3, [sp, #24]
   2e7e8:	454b      	cmp	r3, r9
   2e7ea:	dc55      	bgt.n	2e898 <nrf_cloud_pgps_init+0x1dc>
	for (pnum = 0; pnum < count; pnum++) {
   2e7ec:	2500      	movs	r5, #0
   2e7ee:	233c      	movs	r3, #60	; 0x3c
	for (i = 0; i < count; i++) {
   2e7f0:	46a8      	mov	r8, r5
	i = -1;
   2e7f2:	f04f 37ff 	mov.w	r7, #4294967295
   2e7f6:	9a08      	ldr	r2, [sp, #32]
		__ASSERT(i != -1, "unexpected pointer value %p", pred);
   2e7f8:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 2e9d4 <nrf_cloud_pgps_init+0x318>
   2e7fc:	4353      	muls	r3, r2
   2e7fe:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 2e9d8 <nrf_cloud_pgps_init+0x31c>
   2e802:	9309      	str	r3, [sp, #36]	; 0x24
	for (pnum = 0; pnum < count; pnum++) {
   2e804:	9b06      	ldr	r3, [sp, #24]
   2e806:	42ab      	cmp	r3, r5
   2e808:	dd1b      	ble.n	2e842 <nrf_cloud_pgps_init+0x186>
		gps_sec = start_gps_sec + pnum * period_min * SEC_PER_MIN;
   2e80a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		npgps_gps_sec_to_day_time(gps_sec, &gps_day, &gps_time_of_day);
   2e80c:	990b      	ldr	r1, [sp, #44]	; 0x2c
		gps_sec = start_gps_sec + pnum * period_min * SEC_PER_MIN;
   2e80e:	eb18 0003 	adds.w	r0, r8, r3
		npgps_gps_sec_to_day_time(gps_sec, &gps_day, &gps_time_of_day);
   2e812:	aa10      	add	r2, sp, #64	; 0x40
   2e814:	ab13      	add	r3, sp, #76	; 0x4c
   2e816:	f141 0100 	adc.w	r1, r1, #0
   2e81a:	f000 fa17 	bl	2ec4c <npgps_gps_sec_to_day_time>
		pred = index.predictions[pnum];
   2e81e:	9b07      	ldr	r3, [sp, #28]
   2e820:	f853 9b04 	ldr.w	r9, [r3], #4
   2e824:	9307      	str	r3, [sp, #28]
		if (pred == NULL) {
   2e826:	f1b9 0f00 	cmp.w	r9, #0
   2e82a:	d17e      	bne.n	2e92a <nrf_cloud_pgps_init+0x26e>
			LOG_WRN("Prediction num:%u missing", pnum);
   2e82c:	462a      	mov	r2, r5
   2e82e:	2157      	movs	r1, #87	; 0x57
   2e830:	4862      	ldr	r0, [pc, #392]	; (2e9bc <nrf_cloud_pgps_init+0x300>)
   2e832:	f00e fa4c 	bl	3ccce <z_log_minimal_printk>
			*first_bad_day = gps_day;
   2e836:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2e83a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			*first_bad_time = gps_time_of_day;
   2e83e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2e840:	930f      	str	r3, [sp, #60]	; 0x3c
	if (i != -1) {
   2e842:	1c7b      	adds	r3, r7, #1
   2e844:	d002      	beq.n	2e84c <nrf_cloud_pgps_init+0x190>
		i = npgps_find_first_free(i);
   2e846:	4638      	mov	r0, r7
   2e848:	f000 fb52 	bl	2eef0 <npgps_find_first_free>
	npgps_print_blocks();
   2e84c:	f000 fb04 	bl	2ee58 <npgps_print_blocks>
		num_valid = validate_stored_predictions(&gps_day, &gps_time_of_day);
   2e850:	b2ad      	uxth	r5, r5
	struct nrf_cloud_pgps_prediction *found_prediction = NULL;
   2e852:	2300      	movs	r3, #0
   2e854:	9310      	str	r3, [sp, #64]	; 0x40
	if (num_valid) {
   2e856:	b17d      	cbz	r5, 2e878 <nrf_cloud_pgps_init+0x1bc>
		LOG_INF("Checking if P-GPS data is expired...");
   2e858:	2149      	movs	r1, #73	; 0x49
   2e85a:	4859      	ldr	r0, [pc, #356]	; (2e9c0 <nrf_cloud_pgps_init+0x304>)
   2e85c:	f00e fa37 	bl	3ccce <z_log_minimal_printk>
		err = nrf_cloud_pgps_find_prediction(&found_prediction);
   2e860:	a810      	add	r0, sp, #64	; 0x40
   2e862:	f7ff f8f5 	bl	2da50 <nrf_cloud_pgps_find_prediction>
		if (err == -ETIMEDOUT) {
   2e866:	f110 0f74 	cmn.w	r0, #116	; 0x74
		err = nrf_cloud_pgps_find_prediction(&found_prediction);
   2e86a:	4607      	mov	r7, r0
		if (err == -ETIMEDOUT) {
   2e86c:	f040 80b6 	bne.w	2e9dc <nrf_cloud_pgps_init+0x320>
			LOG_WRN("Predictions expired. Requesting predictions...");
   2e870:	2157      	movs	r1, #87	; 0x57
   2e872:	4854      	ldr	r0, [pc, #336]	; (2e9c4 <nrf_cloud_pgps_init+0x308>)
   2e874:	f00e fa2b 	bl	3ccce <z_log_minimal_printk>
		if (evt_handler) {
   2e878:	4b46      	ldr	r3, [pc, #280]	; (2e994 <nrf_cloud_pgps_init+0x2d8>)
   2e87a:	681b      	ldr	r3, [r3, #0]
   2e87c:	b123      	cbz	r3, 2e888 <nrf_cloud_pgps_init+0x1cc>
			evt.type = PGPS_EVT_UNAVAILABLE;
   2e87e:	2201      	movs	r2, #1
			evt_handler(&evt);
   2e880:	a811      	add	r0, sp, #68	; 0x44
			evt.type = PGPS_EVT_UNAVAILABLE;
   2e882:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
			evt_handler(&evt);
   2e886:	4798      	blx	r3
		err = pgps_request_all();
   2e888:	f7ff f8a8 	bl	2d9dc <pgps_request_all>
		err = nrf_cloud_pgps_preemptive_updates();
   2e88c:	4604      	mov	r4, r0
   2e88e:	e739      	b.n	2e704 <nrf_cloud_pgps_init+0x48>
		index.predictions[pnum] = NULL;
   2e890:	f842 1b04 	str.w	r1, [r2], #4
	for (pnum = 0; pnum < count; pnum++) {
   2e894:	3301      	adds	r3, #1
   2e896:	e79a      	b.n	2e7ce <nrf_cloud_pgps_init+0x112>
	int64_t start_sec = npgps_gps_day_time_to_sec(header->gps_day,
   2e898:	f8da 100c 	ldr.w	r1, [sl, #12]
   2e89c:	f8ba 000a 	ldrh.w	r0, [sl, #10]
   2e8a0:	f000 f9ca 	bl	2ec38 <npgps_gps_day_time_to_sec>
	uint32_t period_sec = header->prediction_period_min * SEC_PER_MIN;
   2e8a4:	233c      	movs	r3, #60	; 0x3c
   2e8a6:	f8ba 2008 	ldrh.w	r2, [sl, #8]
	int64_t end_sec = start_sec + header->prediction_count * period_sec;
   2e8aa:	f8ba 7004 	ldrh.w	r7, [sl, #4]
	uint32_t period_sec = header->prediction_period_min * SEC_PER_MIN;
   2e8ae:	435a      	muls	r2, r3
	int64_t end_sec = start_sec + header->prediction_count * period_sec;
   2e8b0:	4357      	muls	r7, r2
   2e8b2:	183f      	adds	r7, r7, r0
   2e8b4:	f141 0300 	adc.w	r3, r1, #0
   2e8b8:	930c      	str	r3, [sp, #48]	; 0x30
   2e8ba:	920d      	str	r2, [sp, #52]	; 0x34
	int64_t start_sec = npgps_gps_day_time_to_sec(header->gps_day,
   2e8bc:	4605      	mov	r5, r0
   2e8be:	468b      	mov	fp, r1
	int64_t pred_sec = npgps_gps_day_time_to_sec(p->time.date_day,
   2e8c0:	f8b8 0003 	ldrh.w	r0, [r8, #3]
   2e8c4:	f8d8 1005 	ldr.w	r1, [r8, #5]
   2e8c8:	f000 f9b6 	bl	2ec38 <npgps_gps_day_time_to_sec>
	if ((start_sec <= pred_sec) && (pred_sec < end_sec)) {
   2e8cc:	42a8      	cmp	r0, r5
   2e8ce:	eb71 030b 	sbcs.w	r3, r1, fp
   2e8d2:	db0d      	blt.n	2e8f0 <nrf_cloud_pgps_init+0x234>
   2e8d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2e8d6:	42b8      	cmp	r0, r7
   2e8d8:	eb71 0303 	sbcs.w	r3, r1, r3
   2e8dc:	da08      	bge.n	2e8f0 <nrf_cloud_pgps_init+0x234>
		return (int)((pred_sec - start_sec) / period_sec);
   2e8de:	1b40      	subs	r0, r0, r5
   2e8e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2e8e2:	eb61 010b 	sbc.w	r1, r1, fp
   2e8e6:	2300      	movs	r3, #0
   2e8e8:	f7ee faae 	bl	1ce48 <__aeabi_ldivmod>
		if (pnum < 0) {
   2e8ec:	1e02      	subs	r2, r0, #0
   2e8ee:	da0e      	bge.n	2e90e <nrf_cloud_pgps_init+0x252>
			LOG_ERR("prediction idx:%u, ofs:%p, out of expected time range;"
   2e8f0:	f8d8 3005 	ldr.w	r3, [r8, #5]
   2e8f4:	464a      	mov	r2, r9
   2e8f6:	9301      	str	r3, [sp, #4]
   2e8f8:	f8b8 3003 	ldrh.w	r3, [r8, #3]
   2e8fc:	2145      	movs	r1, #69	; 0x45
   2e8fe:	9300      	str	r3, [sp, #0]
   2e900:	4831      	ldr	r0, [pc, #196]	; (2e9c8 <nrf_cloud_pgps_init+0x30c>)
   2e902:	4643      	mov	r3, r8
   2e904:	f00e f9e3 	bl	3ccce <z_log_minimal_printk>
	for (i = 0; i < count; i++) {
   2e908:	f109 0901 	add.w	r9, r9, #1
   2e90c:	e768      	b.n	2e7e0 <nrf_cloud_pgps_init+0x124>
		} else if (index.predictions[pnum] == NULL) {
   2e90e:	f102 030e 	add.w	r3, r2, #14
   2e912:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   2e916:	6859      	ldr	r1, [r3, #4]
   2e918:	b911      	cbnz	r1, 2e920 <nrf_cloud_pgps_init+0x264>
			index.predictions[pnum] = pred;
   2e91a:	f8c3 8004 	str.w	r8, [r3, #4]
			LOG_DBG("Prediction num:%u stored at idx:%d", pnum, i);
   2e91e:	e7f3      	b.n	2e908 <nrf_cloud_pgps_init+0x24c>
			LOG_WRN("Prediction num:%u stored more than once!", pnum);
   2e920:	2157      	movs	r1, #87	; 0x57
   2e922:	482a      	ldr	r0, [pc, #168]	; (2e9cc <nrf_cloud_pgps_init+0x310>)
   2e924:	f00e f9d3 	bl	3ccce <z_log_minimal_printk>
   2e928:	e7ee      	b.n	2e908 <nrf_cloud_pgps_init+0x24c>
		err = validate_prediction(pred, gps_day, gps_time_of_day,
   2e92a:	2301      	movs	r3, #1
   2e92c:	4648      	mov	r0, r9
   2e92e:	9300      	str	r3, [sp, #0]
   2e930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2e932:	9b08      	ldr	r3, [sp, #32]
   2e934:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   2e938:	f7fe feb6 	bl	2d6a8 <validate_prediction.constprop.0>
		if (err) {
   2e93c:	b158      	cbz	r0, 2e956 <nrf_cloud_pgps_init+0x29a>
			LOG_ERR("Prediction num:%u, gps_day:%u, "
   2e93e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2e940:	e9cd 0901 	strd	r0, r9, [sp, #4]
   2e944:	9300      	str	r3, [sp, #0]
   2e946:	462a      	mov	r2, r5
   2e948:	2145      	movs	r1, #69	; 0x45
   2e94a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2e94e:	4820      	ldr	r0, [pc, #128]	; (2e9d0 <nrf_cloud_pgps_init+0x314>)
   2e950:	f00e f9bd 	bl	3ccce <z_log_minimal_printk>
   2e954:	e76f      	b.n	2e836 <nrf_cloud_pgps_init+0x17a>
		i = npgps_pointer_to_block((uint8_t *)pred);
   2e956:	4648      	mov	r0, r9
   2e958:	f000 fafa 	bl	2ef50 <npgps_pointer_to_block>
		__ASSERT(i != -1, "unexpected pointer value %p", pred);
   2e95c:	1c42      	adds	r2, r0, #1
		i = npgps_pointer_to_block((uint8_t *)pred);
   2e95e:	4607      	mov	r7, r0
		__ASSERT(i != -1, "unexpected pointer value %p", pred);
   2e960:	d10a      	bne.n	2e978 <nrf_cloud_pgps_init+0x2bc>
   2e962:	4651      	mov	r1, sl
   2e964:	4658      	mov	r0, fp
   2e966:	f44f 7298 	mov.w	r2, #304	; 0x130
   2e96a:	f00e f976 	bl	3cc5a <assert_print>
   2e96e:	f44f 7198 	mov.w	r1, #304	; 0x130
   2e972:	4650      	mov	r0, sl
   2e974:	f00e f96a 	bl	3cc4c <assert_post_action>
		npgps_mark_block_used(i, true);
   2e978:	2101      	movs	r1, #1
   2e97a:	4638      	mov	r0, r7
   2e97c:	f000 fa4c 	bl	2ee18 <npgps_mark_block_used>
	for (pnum = 0; pnum < count; pnum++) {
   2e980:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e982:	3501      	adds	r5, #1
   2e984:	4498      	add	r8, r3
   2e986:	e73d      	b.n	2e804 <nrf_cloud_pgps_init+0x148>
	uint16_t count = 0;
   2e988:	4626      	mov	r6, r4
	uint16_t num_valid = 0;
   2e98a:	4625      	mov	r5, r4
	uint16_t period_min  = 0;
   2e98c:	9405      	str	r4, [sp, #20]
   2e98e:	e760      	b.n	2e852 <nrf_cloud_pgps_init+0x196>
   2e990:	00049eb3 	.word	0x00049eb3
   2e994:	2001a114 	.word	0x2001a114
   2e998:	2001a11c 	.word	0x2001a11c
   2e99c:	2001a150 	.word	0x2001a150
   2e9a0:	2001d2bf 	.word	0x2001d2bf
   2e9a4:	2001a128 	.word	0x2001a128
   2e9a8:	2001a124 	.word	0x2001a124
   2e9ac:	20015810 	.word	0x20015810
   2e9b0:	0002ddd9 	.word	0x0002ddd9
   2e9b4:	00049ee6 	.word	0x00049ee6
   2e9b8:	00049f11 	.word	0x00049f11
   2e9bc:	00049fc4 	.word	0x00049fc4
   2e9c0:	0004a02c 	.word	0x0004a02c
   2e9c4:	0004a056 	.word	0x0004a056
   2e9c8:	00049f4a 	.word	0x00049f4a
   2e9cc:	00049f96 	.word	0x00049f96
   2e9d0:	00049fe3 	.word	0x00049fe3
   2e9d4:	00049b4a 	.word	0x00049b4a
   2e9d8:	00044263 	.word	0x00044263
		} else if (err >= 0) {
   2e9dc:	2800      	cmp	r0, #0
   2e9de:	db46      	blt.n	2ea6e <nrf_cloud_pgps_init+0x3b2>
			LOG_INF("Found valid prediction, day:%u, time:%u",
   2e9e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2e9e2:	2149      	movs	r1, #73	; 0x49
   2e9e4:	f8d2 3005 	ldr.w	r3, [r2, #5]
   2e9e8:	4822      	ldr	r0, [pc, #136]	; (2ea74 <nrf_cloud_pgps_init+0x3b8>)
   2e9ea:	f8b2 2003 	ldrh.w	r2, [r2, #3]
   2e9ee:	f00e f96e 	bl	3ccce <z_log_minimal_printk>
	} else if (num_valid < count) {
   2e9f2:	42ae      	cmp	r6, r5
   2e9f4:	d920      	bls.n	2ea38 <nrf_cloud_pgps_init+0x37c>
		LOG_INF("Incomplete P-GPS data; "
   2e9f6:	1b76      	subs	r6, r6, r5
   2e9f8:	4632      	mov	r2, r6
   2e9fa:	2149      	movs	r1, #73	; 0x49
   2e9fc:	481e      	ldr	r0, [pc, #120]	; (2ea78 <nrf_cloud_pgps_init+0x3bc>)
   2e9fe:	f00e f966 	bl	3ccce <z_log_minimal_printk>
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2ea02:	4b1e      	ldr	r3, [pc, #120]	; (2ea7c <nrf_cloud_pgps_init+0x3c0>)
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2ea04:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2ea08:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
   2ea0a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2ea0e:	ab0f      	add	r3, sp, #60	; 0x3c
   2ea10:	fbe4 0105 	umlal	r0, r1, r4, r5
   2ea14:	f000 f91a 	bl	2ec4c <npgps_gps_sec_to_day_time>
		request.gps_day = gps_day;
   2ea18:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
		err = pgps_request(&request);
   2ea1c:	a813      	add	r0, sp, #76	; 0x4c
		request.gps_day = gps_day;
   2ea1e:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
		request.gps_time_of_day = gps_time_of_day;
   2ea22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		request.prediction_count = count - num_valid;
   2ea24:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
		request.gps_time_of_day = gps_time_of_day;
   2ea28:	f8cd 3052 	str.w	r3, [sp, #82]	; 0x52
		request.prediction_period_min = period_min;
   2ea2c:	9b05      	ldr	r3, [sp, #20]
   2ea2e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
		err = pgps_request(&request);
   2ea32:	f7fe ff33 	bl	2d89c <pgps_request>
   2ea36:	e729      	b.n	2e88c <nrf_cloud_pgps_init+0x1d0>
	} else if ((count - (pnum + 1)) < REPLACEMENT_THRESHOLD) {
   2ea38:	3701      	adds	r7, #1
   2ea3a:	1bf6      	subs	r6, r6, r7
   2ea3c:	2e03      	cmp	r6, #3
   2ea3e:	dc02      	bgt.n	2ea46 <nrf_cloud_pgps_init+0x38a>
		err = nrf_cloud_pgps_preemptive_updates();
   2ea40:	f7ff fbe0 	bl	2e204 <nrf_cloud_pgps_preemptive_updates>
   2ea44:	e722      	b.n	2e88c <nrf_cloud_pgps_init+0x1d0>
		state = PGPS_READY;
   2ea46:	2206      	movs	r2, #6
   2ea48:	4b0d      	ldr	r3, [pc, #52]	; (2ea80 <nrf_cloud_pgps_init+0x3c4>)
		LOG_INF("P-GPS data is up to date.");
   2ea4a:	2149      	movs	r1, #73	; 0x49
   2ea4c:	480d      	ldr	r0, [pc, #52]	; (2ea84 <nrf_cloud_pgps_init+0x3c8>)
		state = PGPS_READY;
   2ea4e:	701a      	strb	r2, [r3, #0]
		LOG_INF("P-GPS data is up to date.");
   2ea50:	f00e f93d 	bl	3ccce <z_log_minimal_printk>
		if (evt_handler) {
   2ea54:	4b0c      	ldr	r3, [pc, #48]	; (2ea88 <nrf_cloud_pgps_init+0x3cc>)
   2ea56:	681b      	ldr	r3, [r3, #0]
   2ea58:	2b00      	cmp	r3, #0
   2ea5a:	f43f ae52 	beq.w	2e702 <nrf_cloud_pgps_init+0x46>
			evt.type = PGPS_EVT_READY;
   2ea5e:	2204      	movs	r2, #4
   2ea60:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
			evt.prediction = found_prediction;
   2ea64:	9a10      	ldr	r2, [sp, #64]	; 0x40
			evt_handler(&evt);
   2ea66:	a811      	add	r0, sp, #68	; 0x44
			evt.prediction = found_prediction;
   2ea68:	9212      	str	r2, [sp, #72]	; 0x48
			evt_handler(&evt);
   2ea6a:	4798      	blx	r3
   2ea6c:	e64a      	b.n	2e704 <nrf_cloud_pgps_init+0x48>
	int pnum = -1;
   2ea6e:	f04f 37ff 	mov.w	r7, #4294967295
   2ea72:	e7be      	b.n	2e9f2 <nrf_cloud_pgps_init+0x336>
   2ea74:	0004a08a 	.word	0x0004a08a
   2ea78:	0004a0b7 	.word	0x0004a0b7
   2ea7c:	20015810 	.word	0x20015810
   2ea80:	2001d2bf 	.word	0x2001d2bf
   2ea84:	0004a0fa 	.word	0x0004a0fa
   2ea88:	2001a114 	.word	0x2001a114

0002ea8c <settings_set>:
SETTINGS_STATIC_HANDLER_DEFINE(nrf_cloud_pgps, SETTINGS_NAME, NULL, settings_set,
			       NULL, NULL);

static int settings_set(const char *key, size_t len_rd,
			settings_read_cb read_cb, void *cb_arg)
{
   2ea8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ea8e:	460c      	mov	r4, r1
   2ea90:	4616      	mov	r6, r2
   2ea92:	461f      	mov	r7, r3
	if (!key) {
   2ea94:	4605      	mov	r5, r0
   2ea96:	2800      	cmp	r0, #0
   2ea98:	d039      	beq.n	2eb0e <settings_set+0x82>
		return -EINVAL;
	}

	LOG_DBG("Settings key:%s, size:%d", log_strdup(key), len_rd);

	if (!strncmp(key, SETTINGS_KEY_PGPS_HEADER,
   2ea9a:	481e      	ldr	r0, [pc, #120]	; (2eb14 <settings_set+0x88>)
   2ea9c:	f7ee fbd1 	bl	1d242 <strlen>
   2eaa0:	491c      	ldr	r1, [pc, #112]	; (2eb14 <settings_set+0x88>)
   2eaa2:	4602      	mov	r2, r0
   2eaa4:	4628      	mov	r0, r5
   2eaa6:	f012 ff7f 	bl	419a8 <strncmp>
   2eaaa:	b1a0      	cbz	r0, 2ead6 <settings_set+0x4a>
				saved_header.prediction_count, saved_header.prediction_period_min,
				saved_header.gps_day, saved_header.gps_time_of_day);
			return 0;
		}
	}
	if (!strncmp(key, SETTINGS_KEY_LOCATION,
   2eaac:	481a      	ldr	r0, [pc, #104]	; (2eb18 <settings_set+0x8c>)
   2eaae:	f7ee fbc8 	bl	1d242 <strlen>
   2eab2:	4919      	ldr	r1, [pc, #100]	; (2eb18 <settings_set+0x8c>)
   2eab4:	4602      	mov	r2, r0
   2eab6:	4628      	mov	r0, r5
   2eab8:	f012 ff76 	bl	419a8 <strncmp>
   2eabc:	b1a8      	cbz	r0, 2eaea <settings_set+0x5e>
				saved_location.latitude, saved_location.longitude,
				(int32_t)saved_location.gps_sec);
			return 0;
		}
	}
	if (!strncmp(key, SETTINGS_KEY_LEAP_SEC,
   2eabe:	4817      	ldr	r0, [pc, #92]	; (2eb1c <settings_set+0x90>)
   2eac0:	f7ee fbbf 	bl	1d242 <strlen>
   2eac4:	4915      	ldr	r1, [pc, #84]	; (2eb1c <settings_set+0x90>)
   2eac6:	4602      	mov	r2, r0
   2eac8:	4628      	mov	r0, r5
   2eaca:	f012 ff6d 	bl	419a8 <strncmp>
   2eace:	b1a8      	cbz	r0, 2eafc <settings_set+0x70>
			LOG_DBG("Read gps to utc leap seconds offset:%d",
				gps_leap_seconds);
			return 0;
		}
	}
	return -ENOTSUP;
   2ead0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2ead4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		     strlen(SETTINGS_KEY_PGPS_HEADER)) &&
   2ead6:	2c10      	cmp	r4, #16
   2ead8:	d1e8      	bne.n	2eaac <settings_set+0x20>
		if (read_cb(cb_arg, (void *)&saved_header, len_rd) == len_rd) {
   2eada:	4622      	mov	r2, r4
   2eadc:	4638      	mov	r0, r7
   2eade:	4910      	ldr	r1, [pc, #64]	; (2eb20 <settings_set+0x94>)
   2eae0:	47b0      	blx	r6
   2eae2:	2810      	cmp	r0, #16
   2eae4:	d1e2      	bne.n	2eaac <settings_set+0x20>
			return 0;
   2eae6:	2000      	movs	r0, #0
   2eae8:	e7f4      	b.n	2ead4 <settings_set+0x48>
		     strlen(SETTINGS_KEY_LOCATION)) &&
   2eaea:	2c10      	cmp	r4, #16
   2eaec:	d1e7      	bne.n	2eabe <settings_set+0x32>
		if (read_cb(cb_arg, (void *)&saved_location, len_rd) == len_rd) {
   2eaee:	4622      	mov	r2, r4
   2eaf0:	4638      	mov	r0, r7
   2eaf2:	490c      	ldr	r1, [pc, #48]	; (2eb24 <settings_set+0x98>)
   2eaf4:	47b0      	blx	r6
   2eaf6:	2810      	cmp	r0, #16
   2eaf8:	d1e1      	bne.n	2eabe <settings_set+0x32>
   2eafa:	e7f4      	b.n	2eae6 <settings_set+0x5a>
		     strlen(SETTINGS_KEY_LEAP_SEC)) &&
   2eafc:	2c04      	cmp	r4, #4
   2eafe:	d1e7      	bne.n	2ead0 <settings_set+0x44>
		if (read_cb(cb_arg, (void *)&gps_leap_seconds, len_rd) == len_rd) {
   2eb00:	4622      	mov	r2, r4
   2eb02:	4638      	mov	r0, r7
   2eb04:	4908      	ldr	r1, [pc, #32]	; (2eb28 <settings_set+0x9c>)
   2eb06:	47b0      	blx	r6
   2eb08:	2804      	cmp	r0, #4
   2eb0a:	d0ec      	beq.n	2eae6 <settings_set+0x5a>
   2eb0c:	e7e0      	b.n	2ead0 <settings_set+0x44>
		return -EINVAL;
   2eb0e:	f06f 0015 	mvn.w	r0, #21
   2eb12:	e7df      	b.n	2ead4 <settings_set+0x48>
   2eb14:	0004a1b1 	.word	0x0004a1b1
   2eb18:	0004a206 	.word	0x0004a206
   2eb1c:	0004a21e 	.word	0x0004a21e
   2eb20:	2001d2c0 	.word	0x2001d2c0
   2eb24:	20017350 	.word	0x20017350
   2eb28:	200146c4 	.word	0x200146c4

0002eb2c <download_client_callback>:
	LOG_DBG("pgps_active UNLOCKED");
	return err;
}

static int download_client_callback(const struct download_client_evt *event)
{
   2eb2c:	b538      	push	{r3, r4, r5, lr}
	int err = 0;

	if (event == NULL) {
   2eb2e:	2800      	cmp	r0, #0
   2eb30:	d037      	beq.n	2eba2 <download_client_callback+0x76>
		return -EINVAL;
	}

	switch (event->id) {
   2eb32:	7803      	ldrb	r3, [r0, #0]
   2eb34:	2b01      	cmp	r3, #1
   2eb36:	d01f      	beq.n	2eb78 <download_client_callback+0x4c>
   2eb38:	2b02      	cmp	r3, #2
   2eb3a:	d009      	beq.n	2eb50 <download_client_callback+0x24>
   2eb3c:	bb63      	cbnz	r3, 2eb98 <download_client_callback+0x6c>
	case DOWNLOAD_CLIENT_EVT_FRAGMENT:
		err = buffer_handler((uint8_t *)event->fragment.buf,
   2eb3e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2eb42:	4b19      	ldr	r3, [pc, #100]	; (2eba8 <download_client_callback+0x7c>)
   2eb44:	681b      	ldr	r3, [r3, #0]
   2eb46:	4798      	blx	r3
				     event->fragment.len);
		if (!err) {
   2eb48:	4604      	mov	r4, r0
   2eb4a:	b930      	cbnz	r0, 2eb5a <download_client_callback+0x2e>
		err = ret;
	}
	k_sem_give(&pgps_active);
	LOG_DBG("pgps_active UNLOCKED");
	return err;
}
   2eb4c:	4620      	mov	r0, r4
   2eb4e:	bd38      	pop	{r3, r4, r5, pc}
		LOG_INF("Download client done");
   2eb50:	2149      	movs	r1, #73	; 0x49
   2eb52:	4816      	ldr	r0, [pc, #88]	; (2ebac <download_client_callback+0x80>)
   2eb54:	f00e f8bb 	bl	3ccce <z_log_minimal_printk>
	int err = 0;
   2eb58:	2400      	movs	r4, #0
	int ret = download_client_disconnect(&dlc);
   2eb5a:	4815      	ldr	r0, [pc, #84]	; (2ebb0 <download_client_callback+0x84>)
   2eb5c:	f001 fbc6 	bl	302ec <download_client_disconnect>
	if (ret) {
   2eb60:	4605      	mov	r5, r0
   2eb62:	b128      	cbz	r0, 2eb70 <download_client_callback+0x44>
		LOG_ERR("Error disconnecting from "
   2eb64:	4602      	mov	r2, r0
   2eb66:	2145      	movs	r1, #69	; 0x45
   2eb68:	4812      	ldr	r0, [pc, #72]	; (2ebb4 <download_client_callback+0x88>)
   2eb6a:	f00e f8b0 	bl	3ccce <z_log_minimal_printk>
   2eb6e:	462c      	mov	r4, r5
	z_impl_k_sem_give(sem);
   2eb70:	4811      	ldr	r0, [pc, #68]	; (2ebb8 <download_client_callback+0x8c>)
   2eb72:	f008 f98d 	bl	36e90 <z_impl_k_sem_give>
}
   2eb76:	e7e9      	b.n	2eb4c <download_client_callback+0x20>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   2eb78:	4c10      	ldr	r4, [pc, #64]	; (2ebbc <download_client_callback+0x90>)
   2eb7a:	6822      	ldr	r2, [r4, #0]
   2eb7c:	b172      	cbz	r2, 2eb9c <download_client_callback+0x70>
   2eb7e:	6843      	ldr	r3, [r0, #4]
   2eb80:	f113 0f80 	cmn.w	r3, #128	; 0x80
   2eb84:	d001      	beq.n	2eb8a <download_client_callback+0x5e>
   2eb86:	3368      	adds	r3, #104	; 0x68
   2eb88:	d108      	bne.n	2eb9c <download_client_callback+0x70>
			LOG_WRN("Download socket error. %d retries left...",
   2eb8a:	2157      	movs	r1, #87	; 0x57
   2eb8c:	480c      	ldr	r0, [pc, #48]	; (2ebc0 <download_client_callback+0x94>)
   2eb8e:	f00e f89e 	bl	3ccce <z_log_minimal_printk>
			socket_retries_left--;
   2eb92:	6823      	ldr	r3, [r4, #0]
   2eb94:	3b01      	subs	r3, #1
   2eb96:	6023      	str	r3, [r4, #0]
	switch (event->id) {
   2eb98:	2400      	movs	r4, #0
   2eb9a:	e7d7      	b.n	2eb4c <download_client_callback+0x20>
		err = -EIO;
   2eb9c:	f06f 0404 	mvn.w	r4, #4
   2eba0:	e7db      	b.n	2eb5a <download_client_callback+0x2e>
		return -EINVAL;
   2eba2:	f06f 0415 	mvn.w	r4, #21
   2eba6:	e7d1      	b.n	2eb4c <download_client_callback+0x20>
   2eba8:	2001a158 	.word	0x2001a158
   2ebac:	0004a128 	.word	0x0004a128
   2ebb0:	200158f8 	.word	0x200158f8
   2ebb4:	0004a171 	.word	0x0004a171
   2ebb8:	200150a8 	.word	0x200150a8
   2ebbc:	2001a194 	.word	0x2001a194
   2ebc0:	0004a142 	.word	0x0004a142

0002ebc4 <npgps_save_header>:
{
   2ebc4:	4601      	mov	r1, r0
	ret = settings_save_one(SETTINGS_FULL_PGPS_HEADER, header, sizeof(*header));
   2ebc6:	2210      	movs	r2, #16
   2ebc8:	4801      	ldr	r0, [pc, #4]	; (2ebd0 <npgps_save_header+0xc>)
   2ebca:	f7f3 ba23 	b.w	22014 <settings_save_one>
   2ebce:	bf00      	nop
   2ebd0:	0004a1a2 	.word	0x0004a1a2

0002ebd4 <npgps_get_saved_header>:
}
   2ebd4:	4800      	ldr	r0, [pc, #0]	; (2ebd8 <npgps_get_saved_header+0x4>)
   2ebd6:	4770      	bx	lr
   2ebd8:	2001d2c0 	.word	0x2001d2c0

0002ebdc <npgps_get_saved_location>:
}
   2ebdc:	4800      	ldr	r0, [pc, #0]	; (2ebe0 <npgps_get_saved_location+0x4>)
   2ebde:	4770      	bx	lr
   2ebe0:	20017350 	.word	0x20017350

0002ebe4 <npgps_settings_init>:
{
   2ebe4:	b510      	push	{r4, lr}
	ret = settings_subsys_init();
   2ebe6:	f7f3 fb61 	bl	222ac <settings_subsys_init>
	if (ret) {
   2ebea:	4604      	mov	r4, r0
   2ebec:	b130      	cbz	r0, 2ebfc <npgps_settings_init+0x18>
		LOG_ERR("Settings init failed:%d", ret);
   2ebee:	2145      	movs	r1, #69	; 0x45
   2ebf0:	4602      	mov	r2, r0
   2ebf2:	4807      	ldr	r0, [pc, #28]	; (2ec10 <npgps_settings_init+0x2c>)
		LOG_ERR("Cannot load settings:%d", ret);
   2ebf4:	f00e f86b 	bl	3ccce <z_log_minimal_printk>
}
   2ebf8:	4620      	mov	r0, r4
   2ebfa:	bd10      	pop	{r4, pc}
	ret = settings_load_subtree(settings_handler_nrf_cloud_pgps.name);
   2ebfc:	4805      	ldr	r0, [pc, #20]	; (2ec14 <npgps_settings_init+0x30>)
   2ebfe:	f7f3 fa43 	bl	22088 <settings_load_subtree>
	if (ret) {
   2ec02:	4604      	mov	r4, r0
   2ec04:	2800      	cmp	r0, #0
   2ec06:	d0f7      	beq.n	2ebf8 <npgps_settings_init+0x14>
		LOG_ERR("Cannot load settings:%d", ret);
   2ec08:	4602      	mov	r2, r0
   2ec0a:	2145      	movs	r1, #69	; 0x45
   2ec0c:	4802      	ldr	r0, [pc, #8]	; (2ec18 <npgps_settings_init+0x34>)
   2ec0e:	e7f1      	b.n	2ebf4 <npgps_settings_init+0x10>
   2ec10:	0004a1bd 	.word	0x0004a1bd
   2ec14:	0004a119 	.word	0x0004a119
   2ec18:	0004a1da 	.word	0x0004a1da

0002ec1c <nrf_cloud_pgps_set_leap_seconds>:
	if (gps_leap_seconds != leap_seconds) {
   2ec1c:	4904      	ldr	r1, [pc, #16]	; (2ec30 <nrf_cloud_pgps_set_leap_seconds+0x14>)
   2ec1e:	680b      	ldr	r3, [r1, #0]
   2ec20:	4283      	cmp	r3, r0
   2ec22:	d004      	beq.n	2ec2e <nrf_cloud_pgps_set_leap_seconds+0x12>
		gps_leap_seconds = leap_seconds;
   2ec24:	6008      	str	r0, [r1, #0]
	ret = settings_save_one(SETTINGS_FULL_LEAP_SEC,
   2ec26:	2204      	movs	r2, #4
   2ec28:	4802      	ldr	r0, [pc, #8]	; (2ec34 <nrf_cloud_pgps_set_leap_seconds+0x18>)
   2ec2a:	f7f3 b9f3 	b.w	22014 <settings_save_one>
}
   2ec2e:	4770      	bx	lr
   2ec30:	200146c4 	.word	0x200146c4
   2ec34:	0004a20f 	.word	0x0004a20f

0002ec38 <npgps_gps_day_time_to_sec>:
	int64_t gps_sec = (int64_t)gps_day * SEC_PER_DAY + gps_time_of_day;
   2ec38:	4b03      	ldr	r3, [pc, #12]	; (2ec48 <npgps_gps_day_time_to_sec+0x10>)
   2ec3a:	fba0 0303 	umull	r0, r3, r0, r3
   2ec3e:	1840      	adds	r0, r0, r1
}
   2ec40:	f143 0100 	adc.w	r1, r3, #0
   2ec44:	4770      	bx	lr
   2ec46:	bf00      	nop
   2ec48:	00015180 	.word	0x00015180

0002ec4c <npgps_gps_sec_to_day_time>:
{
   2ec4c:	b570      	push	{r4, r5, r6, lr}
   2ec4e:	4616      	mov	r6, r2
   2ec50:	461d      	mov	r5, r3
	day = (uint16_t)(gps_sec / SEC_PER_DAY);
   2ec52:	4a07      	ldr	r2, [pc, #28]	; (2ec70 <npgps_gps_sec_to_day_time+0x24>)
   2ec54:	2300      	movs	r3, #0
{
   2ec56:	4604      	mov	r4, r0
	day = (uint16_t)(gps_sec / SEC_PER_DAY);
   2ec58:	f7ee f8f6 	bl	1ce48 <__aeabi_ldivmod>
   2ec5c:	b280      	uxth	r0, r0
	if (gps_day) {
   2ec5e:	b106      	cbz	r6, 2ec62 <npgps_gps_sec_to_day_time+0x16>
		*gps_day = day;
   2ec60:	8030      	strh	r0, [r6, #0]
	if (gps_time_of_day) {
   2ec62:	b11d      	cbz	r5, 2ec6c <npgps_gps_sec_to_day_time+0x20>
	time = (uint32_t)(gps_sec - (day * SEC_PER_DAY));
   2ec64:	4b02      	ldr	r3, [pc, #8]	; (2ec70 <npgps_gps_sec_to_day_time+0x24>)
   2ec66:	fb03 4410 	mls	r4, r3, r0, r4
		*gps_time_of_day = time;
   2ec6a:	602c      	str	r4, [r5, #0]
}
   2ec6c:	bd70      	pop	{r4, r5, r6, pc}
   2ec6e:	bf00      	nop
   2ec70:	00015180 	.word	0x00015180

0002ec74 <npgps_get_shifted_time>:
{
   2ec74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ec78:	4606      	mov	r6, r0
	err = date_time_now(&now);
   2ec7a:	4668      	mov	r0, sp
{
   2ec7c:	460f      	mov	r7, r1
   2ec7e:	4690      	mov	r8, r2
   2ec80:	461c      	mov	r4, r3
	err = date_time_now(&now);
   2ec82:	f7f9 fffb 	bl	28c7c <date_time_now>
	if (!err) {
   2ec86:	4605      	mov	r5, r0
   2ec88:	bb08      	cbnz	r0, 2ecce <npgps_get_shifted_time+0x5a>
		now += shift * MSEC_PER_SEC;
   2ec8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2ec8e:	4344      	muls	r4, r0
   2ec90:	9800      	ldr	r0, [sp, #0]
	utc_sec = utc / MSEC_PER_SEC;
   2ec92:	9901      	ldr	r1, [sp, #4]
		now += shift * MSEC_PER_SEC;
   2ec94:	1820      	adds	r0, r4, r0
	utc_sec = utc / MSEC_PER_SEC;
   2ec96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2ec9a:	f04f 0300 	mov.w	r3, #0
   2ec9e:	f141 0100 	adc.w	r1, r1, #0
   2eca2:	f7ee f8d1 	bl	1ce48 <__aeabi_ldivmod>
	gps_sec = (utc_sec - GPS_TO_UNIX_UTC_OFFSET_SECONDS) + gps_leap_seconds;
   2eca6:	4b0c      	ldr	r3, [pc, #48]	; (2ecd8 <npgps_get_shifted_time+0x64>)
   2eca8:	4c0c      	ldr	r4, [pc, #48]	; (2ecdc <npgps_get_shifted_time+0x68>)
   2ecaa:	681b      	ldr	r3, [r3, #0]
   2ecac:	1904      	adds	r4, r0, r4
   2ecae:	f161 0100 	sbc.w	r1, r1, #0
   2ecb2:	18e0      	adds	r0, r4, r3
   2ecb4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
		npgps_gps_sec_to_day_time(now, gps_day, gps_time_of_day);
   2ecb8:	463a      	mov	r2, r7
   2ecba:	4643      	mov	r3, r8
		now = utc_to_gps_sec(now, NULL);
   2ecbc:	e9cd 0100 	strd	r0, r1, [sp]
		npgps_gps_sec_to_day_time(now, gps_day, gps_time_of_day);
   2ecc0:	f7ff ffc4 	bl	2ec4c <npgps_gps_sec_to_day_time>
		if (gps_sec != NULL) {
   2ecc4:	b11e      	cbz	r6, 2ecce <npgps_get_shifted_time+0x5a>
			*gps_sec = now;
   2ecc6:	e9dd 2300 	ldrd	r2, r3, [sp]
   2ecca:	e9c6 2300 	strd	r2, r3, [r6]
}
   2ecce:	4628      	mov	r0, r5
   2ecd0:	b002      	add	sp, #8
   2ecd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ecd6:	bf00      	nop
   2ecd8:	200146c4 	.word	0x200146c4
   2ecdc:	ed2ac280 	.word	0xed2ac280

0002ece0 <nrf_cloud_pgps_set_location_normalized>:
	if (npgps_get_time(&sec, NULL, NULL)) {
   2ece0:	2200      	movs	r2, #0
{
   2ece2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ece4:	4605      	mov	r5, r0
   2ece6:	460e      	mov	r6, r1
	if (npgps_get_time(&sec, NULL, NULL)) {
   2ece8:	4668      	mov	r0, sp
   2ecea:	4611      	mov	r1, r2
   2ecec:	f010 fe1c 	bl	3f928 <npgps_get_time>
   2ecf0:	4c18      	ldr	r4, [pc, #96]	; (2ed54 <nrf_cloud_pgps_set_location_normalized+0x74>)
   2ecf2:	b118      	cbz	r0, 2ecfc <nrf_cloud_pgps_set_location_normalized+0x1c>
		sec = saved_location.gps_sec; /* could not get time; use prev */
   2ecf4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2ecf8:	e9cd 2300 	strd	r2, r3, [sp]
	if ((abs(latitude - saved_location.latitude) > SAVED_LOCATION_LAT_DELTA) ||
   2ecfc:	6820      	ldr	r0, [r4, #0]
   2ecfe:	1a28      	subs	r0, r5, r0
   2ed00:	f012 fc39 	bl	41576 <abs>
   2ed04:	f242 4368 	movw	r3, #9320	; 0x2468
   2ed08:	4298      	cmp	r0, r3
   2ed0a:	dd0c      	ble.n	2ed26 <nrf_cloud_pgps_set_location_normalized+0x46>
		saved_location.gps_sec = sec;
   2ed0c:	e9dd 2300 	ldrd	r2, r3, [sp]
	ret = settings_save_one(SETTINGS_FULL_LOCATION,
   2ed10:	4910      	ldr	r1, [pc, #64]	; (2ed54 <nrf_cloud_pgps_set_location_normalized+0x74>)
		saved_location.gps_sec = sec;
   2ed12:	e9c4 2302 	strd	r2, r3, [r4, #8]
	ret = settings_save_one(SETTINGS_FULL_LOCATION,
   2ed16:	4810      	ldr	r0, [pc, #64]	; (2ed58 <nrf_cloud_pgps_set_location_normalized+0x78>)
   2ed18:	2210      	movs	r2, #16
		saved_location.longitude = longitude;
   2ed1a:	e9c4 5600 	strd	r5, r6, [r4]
	ret = settings_save_one(SETTINGS_FULL_LOCATION,
   2ed1e:	f7f3 f979 	bl	22014 <settings_save_one>
}
   2ed22:	b002      	add	sp, #8
   2ed24:	bd70      	pop	{r4, r5, r6, pc}
	    (abs(longitude - saved_location.longitude) > SAVED_LOCATION_LNG_DELTA) ||
   2ed26:	6860      	ldr	r0, [r4, #4]
   2ed28:	1a30      	subs	r0, r6, r0
   2ed2a:	f012 fc24 	bl	41576 <abs>
	if ((abs(latitude - saved_location.latitude) > SAVED_LOCATION_LAT_DELTA) ||
   2ed2e:	f241 2334 	movw	r3, #4660	; 0x1234
   2ed32:	4298      	cmp	r0, r3
   2ed34:	dcea      	bgt.n	2ed0c <nrf_cloud_pgps_set_location_normalized+0x2c>
	    ((sec - saved_location.gps_sec) > SAVED_LOCATION_MIN_DELTA_SEC)) {
   2ed36:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
   2ed3a:	9b00      	ldr	r3, [sp, #0]
   2ed3c:	9a01      	ldr	r2, [sp, #4]
   2ed3e:	1a5b      	subs	r3, r3, r1
	    (abs(longitude - saved_location.longitude) > SAVED_LOCATION_LNG_DELTA) ||
   2ed40:	f64a 01c1 	movw	r1, #43201	; 0xa8c1
	    ((sec - saved_location.gps_sec) > SAVED_LOCATION_MIN_DELTA_SEC)) {
   2ed44:	eb62 0200 	sbc.w	r2, r2, r0
	    (abs(longitude - saved_location.longitude) > SAVED_LOCATION_LNG_DELTA) ||
   2ed48:	428b      	cmp	r3, r1
   2ed4a:	f172 0300 	sbcs.w	r3, r2, #0
   2ed4e:	dadd      	bge.n	2ed0c <nrf_cloud_pgps_set_location_normalized+0x2c>
   2ed50:	e7e7      	b.n	2ed22 <nrf_cloud_pgps_set_location_normalized+0x42>
   2ed52:	bf00      	nop
   2ed54:	20017350 	.word	0x20017350
   2ed58:	0004a1f7 	.word	0x0004a1f7

0002ed5c <ngps_block_pool_init>:
	block_pool_base = (uint8_t *)base_address;
   2ed5c:	4b02      	ldr	r3, [pc, #8]	; (2ed68 <ngps_block_pool_init+0xc>)
   2ed5e:	6018      	str	r0, [r3, #0]
	num_blocks = num;
   2ed60:	4b02      	ldr	r3, [pc, #8]	; (2ed6c <ngps_block_pool_init+0x10>)
}
   2ed62:	2000      	movs	r0, #0
	num_blocks = num;
   2ed64:	6019      	str	r1, [r3, #0]
}
   2ed66:	4770      	bx	lr
   2ed68:	2001a154 	.word	0x2001a154
   2ed6c:	2001a15c 	.word	0x2001a15c

0002ed70 <npgps_alloc_block>:
	if (pool.first_free < 0) {
   2ed70:	4a0c      	ldr	r2, [pc, #48]	; (2eda4 <npgps_alloc_block+0x34>)
{
   2ed72:	b510      	push	{r4, lr}
	if (pool.first_free < 0) {
   2ed74:	6810      	ldr	r0, [r2, #0]
   2ed76:	2800      	cmp	r0, #0
   2ed78:	db11      	blt.n	2ed9e <npgps_alloc_block+0x2e>
	pool.block_used[pool.first_free] = true;
   2ed7a:	2101      	movs	r1, #1
   2ed7c:	1813      	adds	r3, r2, r0
   2ed7e:	7219      	strb	r1, [r3, #8]
	pool.first_free = (pool.first_free + 1) % num_blocks;
   2ed80:	1843      	adds	r3, r0, r1
   2ed82:	4909      	ldr	r1, [pc, #36]	; (2eda8 <npgps_alloc_block+0x38>)
   2ed84:	6809      	ldr	r1, [r1, #0]
   2ed86:	fb93 f4f1 	sdiv	r4, r3, r1
   2ed8a:	fb01 3314 	mls	r3, r1, r4, r3
   2ed8e:	6013      	str	r3, [r2, #0]
	if (pool.block_used[pool.first_free]) {
   2ed90:	4413      	add	r3, r2
   2ed92:	7a1b      	ldrb	r3, [r3, #8]
   2ed94:	b113      	cbz	r3, 2ed9c <npgps_alloc_block+0x2c>
		pool.first_free = NO_BLOCK;
   2ed96:	f04f 33ff 	mov.w	r3, #4294967295
   2ed9a:	6013      	str	r3, [r2, #0]
}
   2ed9c:	bd10      	pop	{r4, pc}
		return NO_BLOCK;
   2ed9e:	f04f 30ff 	mov.w	r0, #4294967295
   2eda2:	e7fb      	b.n	2ed9c <npgps_alloc_block+0x2c>
   2eda4:	2001a160 	.word	0x2001a160
   2eda8:	2001a15c 	.word	0x2001a15c

0002edac <npgps_free_block>:
	if (pool.first_free < 0) {
   2edac:	4b04      	ldr	r3, [pc, #16]	; (2edc0 <npgps_free_block+0x14>)
   2edae:	681a      	ldr	r2, [r3, #0]
   2edb0:	2a00      	cmp	r2, #0
	pool.block_used[block] = false;
   2edb2:	f04f 0200 	mov.w	r2, #0
		pool.first_free = block;
   2edb6:	bfb8      	it	lt
   2edb8:	6018      	strlt	r0, [r3, #0]
	pool.block_used[block] = false;
   2edba:	4403      	add	r3, r0
   2edbc:	721a      	strb	r2, [r3, #8]
}
   2edbe:	4770      	bx	lr
   2edc0:	2001a160 	.word	0x2001a160

0002edc4 <npgps_get_block_extent>:
	for (i = 0; i < num_blocks; i++) {
   2edc4:	2200      	movs	r2, #0
   2edc6:	4b09      	ldr	r3, [pc, #36]	; (2edec <npgps_get_block_extent+0x28>)
{
   2edc8:	b510      	push	{r4, lr}
	for (i = 0; i < num_blocks; i++) {
   2edca:	6819      	ldr	r1, [r3, #0]
		if (pool.block_used[block]) {
   2edcc:	4c08      	ldr	r4, [pc, #32]	; (2edf0 <npgps_get_block_extent+0x2c>)
	for (i = 0; i < num_blocks; i++) {
   2edce:	4291      	cmp	r1, r2
   2edd0:	dc01      	bgt.n	2edd6 <npgps_get_block_extent+0x12>
}
   2edd2:	4610      	mov	r0, r2
   2edd4:	bd10      	pop	{r4, pc}
		if (pool.block_used[block]) {
   2edd6:	1823      	adds	r3, r4, r0
   2edd8:	7a1b      	ldrb	r3, [r3, #8]
   2edda:	2b00      	cmp	r3, #0
   2eddc:	d1f9      	bne.n	2edd2 <npgps_get_block_extent+0xe>
		block = (block + 1) % num_blocks;
   2edde:	1c43      	adds	r3, r0, #1
   2ede0:	fb93 f0f1 	sdiv	r0, r3, r1
		len++;
   2ede4:	3201      	adds	r2, #1
		block = (block + 1) % num_blocks;
   2ede6:	fb01 3010 	mls	r0, r1, r0, r3
	for (i = 0; i < num_blocks; i++) {
   2edea:	e7f0      	b.n	2edce <npgps_get_block_extent+0xa>
   2edec:	2001a15c 	.word	0x2001a15c
   2edf0:	2001a160 	.word	0x2001a160

0002edf4 <npgps_reset_block_pool>:
	pool.first_free = 0;
   2edf4:	2300      	movs	r3, #0
		pool.block_used[i] = false;
   2edf6:	4618      	mov	r0, r3
	for (i = 0; i < num_blocks; i++) {
   2edf8:	4905      	ldr	r1, [pc, #20]	; (2ee10 <npgps_reset_block_pool+0x1c>)
	pool.first_free = 0;
   2edfa:	4a06      	ldr	r2, [pc, #24]	; (2ee14 <npgps_reset_block_pool+0x20>)
	for (i = 0; i < num_blocks; i++) {
   2edfc:	6809      	ldr	r1, [r1, #0]
	pool.first_free = 0;
   2edfe:	f842 3b08 	str.w	r3, [r2], #8
	for (i = 0; i < num_blocks; i++) {
   2ee02:	428b      	cmp	r3, r1
   2ee04:	db00      	blt.n	2ee08 <npgps_reset_block_pool+0x14>
}
   2ee06:	4770      	bx	lr
		pool.block_used[i] = false;
   2ee08:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < num_blocks; i++) {
   2ee0c:	3301      	adds	r3, #1
   2ee0e:	e7f8      	b.n	2ee02 <npgps_reset_block_pool+0xe>
   2ee10:	2001a15c 	.word	0x2001a15c
   2ee14:	2001a160 	.word	0x2001a160

0002ee18 <npgps_mark_block_used>:
{
   2ee18:	b538      	push	{r3, r4, r5, lr}
	__ASSERT((block >= 0) && (block < num_blocks), "block %d out of range", block);
   2ee1a:	1e04      	subs	r4, r0, #0
{
   2ee1c:	460d      	mov	r5, r1
	__ASSERT((block >= 0) && (block < num_blocks), "block %d out of range", block);
   2ee1e:	db03      	blt.n	2ee28 <npgps_mark_block_used+0x10>
   2ee20:	4b09      	ldr	r3, [pc, #36]	; (2ee48 <npgps_mark_block_used+0x30>)
   2ee22:	681b      	ldr	r3, [r3, #0]
   2ee24:	42a3      	cmp	r3, r4
   2ee26:	dc0a      	bgt.n	2ee3e <npgps_mark_block_used+0x26>
   2ee28:	4908      	ldr	r1, [pc, #32]	; (2ee4c <npgps_mark_block_used+0x34>)
   2ee2a:	4809      	ldr	r0, [pc, #36]	; (2ee50 <npgps_mark_block_used+0x38>)
   2ee2c:	f240 1253 	movw	r2, #339	; 0x153
   2ee30:	f00d ff13 	bl	3cc5a <assert_print>
   2ee34:	f240 1153 	movw	r1, #339	; 0x153
   2ee38:	4804      	ldr	r0, [pc, #16]	; (2ee4c <npgps_mark_block_used+0x34>)
   2ee3a:	f00d ff07 	bl	3cc4c <assert_post_action>
	pool.block_used[block] = used;
   2ee3e:	4805      	ldr	r0, [pc, #20]	; (2ee54 <npgps_mark_block_used+0x3c>)
   2ee40:	4404      	add	r4, r0
   2ee42:	7225      	strb	r5, [r4, #8]
}
   2ee44:	bd38      	pop	{r3, r4, r5, pc}
   2ee46:	bf00      	nop
   2ee48:	2001a15c 	.word	0x2001a15c
   2ee4c:	0004a22b 	.word	0x0004a22b
   2ee50:	00044263 	.word	0x00044263
   2ee54:	2001a160 	.word	0x2001a160

0002ee58 <npgps_print_blocks>:
{
   2ee58:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ee5a:	b083      	sub	sp, #12
	char map[num_blocks + 1];
   2ee5c:	4e16      	ldr	r6, [pc, #88]	; (2eeb8 <npgps_print_blocks+0x60>)
{
   2ee5e:	af02      	add	r7, sp, #8
	char map[num_blocks + 1];
   2ee60:	6832      	ldr	r2, [r6, #0]
	LOG_INF("num blocks:%u, size:%u, first_free:%d", num_blocks,
   2ee62:	4d16      	ldr	r5, [pc, #88]	; (2eebc <npgps_print_blocks+0x64>)
	char map[num_blocks + 1];
   2ee64:	f102 0308 	add.w	r3, r2, #8
   2ee68:	f023 0307 	bic.w	r3, r3, #7
   2ee6c:	ebad 0d03 	sub.w	sp, sp, r3
   2ee70:	466c      	mov	r4, sp
	LOG_INF("num blocks:%u, size:%u, first_free:%d", num_blocks,
   2ee72:	f855 3b08 	ldr.w	r3, [r5], #8
   2ee76:	2149      	movs	r1, #73	; 0x49
   2ee78:	f844 3b08 	str.w	r3, [r4], #8
   2ee7c:	4810      	ldr	r0, [pc, #64]	; (2eec0 <npgps_print_blocks+0x68>)
   2ee7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   2ee82:	f00d ff24 	bl	3ccce <z_log_minimal_printk>
	for (i = 0; i < num_blocks; i++) {
   2ee86:	2200      	movs	r2, #0
   2ee88:	6833      	ldr	r3, [r6, #0]
   2ee8a:	4293      	cmp	r3, r2
   2ee8c:	dc0b      	bgt.n	2eea6 <npgps_print_blocks+0x4e>
	map[i] = '\0';
   2ee8e:	2200      	movs	r2, #0
   2ee90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2ee94:	54e2      	strb	r2, [r4, r3]
	LOG_INF("map:%s", log_strdup(map));
   2ee96:	2149      	movs	r1, #73	; 0x49
   2ee98:	4622      	mov	r2, r4
   2ee9a:	480a      	ldr	r0, [pc, #40]	; (2eec4 <npgps_print_blocks+0x6c>)
   2ee9c:	f00d ff17 	bl	3ccce <z_log_minimal_printk>
}
   2eea0:	3704      	adds	r7, #4
   2eea2:	46bd      	mov	sp, r7
   2eea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		map[i] = pool.block_used[i] ? '1' : '0';
   2eea6:	f815 1b01 	ldrb.w	r1, [r5], #1
   2eeaa:	2900      	cmp	r1, #0
   2eeac:	bf14      	ite	ne
   2eeae:	2131      	movne	r1, #49	; 0x31
   2eeb0:	2130      	moveq	r1, #48	; 0x30
   2eeb2:	54a1      	strb	r1, [r4, r2]
	for (i = 0; i < num_blocks; i++) {
   2eeb4:	3201      	adds	r2, #1
   2eeb6:	e7e8      	b.n	2ee8a <npgps_print_blocks+0x32>
   2eeb8:	2001a15c 	.word	0x2001a15c
   2eebc:	2001a160 	.word	0x2001a160
   2eec0:	0004a26f 	.word	0x0004a26f
   2eec4:	0004a29a 	.word	0x0004a29a

0002eec8 <npgps_num_free>:
	for (int i = 0; i < num_blocks; i++) {
   2eec8:	4b07      	ldr	r3, [pc, #28]	; (2eee8 <npgps_num_free+0x20>)
{
   2eeca:	b510      	push	{r4, lr}
	for (int i = 0; i < num_blocks; i++) {
   2eecc:	6819      	ldr	r1, [r3, #0]
   2eece:	2300      	movs	r3, #0
	int num = 0;
   2eed0:	4618      	mov	r0, r3
   2eed2:	4a06      	ldr	r2, [pc, #24]	; (2eeec <npgps_num_free+0x24>)
	for (int i = 0; i < num_blocks; i++) {
   2eed4:	4299      	cmp	r1, r3
   2eed6:	dc00      	bgt.n	2eeda <npgps_num_free+0x12>
}
   2eed8:	bd10      	pop	{r4, pc}
		if (!pool.block_used[i]) {
   2eeda:	f812 4b01 	ldrb.w	r4, [r2], #1
   2eede:	b904      	cbnz	r4, 2eee2 <npgps_num_free+0x1a>
			num++;
   2eee0:	3001      	adds	r0, #1
	for (int i = 0; i < num_blocks; i++) {
   2eee2:	3301      	adds	r3, #1
   2eee4:	e7f6      	b.n	2eed4 <npgps_num_free+0xc>
   2eee6:	bf00      	nop
   2eee8:	2001a15c 	.word	0x2001a15c
   2eeec:	2001a168 	.word	0x2001a168

0002eef0 <npgps_find_first_free>:
	pool.first_free = NO_BLOCK;
   2eef0:	f04f 32ff 	mov.w	r2, #4294967295
   2eef4:	4b0a      	ldr	r3, [pc, #40]	; (2ef20 <npgps_find_first_free+0x30>)
{
   2eef6:	b510      	push	{r4, lr}
	pool.first_free = NO_BLOCK;
   2eef8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_blocks; i++) {
   2eefa:	4a0a      	ldr	r2, [pc, #40]	; (2ef24 <npgps_find_first_free+0x34>)
   2eefc:	6811      	ldr	r1, [r2, #0]
   2eefe:	2200      	movs	r2, #0
   2ef00:	4291      	cmp	r1, r2
   2ef02:	dd03      	ble.n	2ef0c <npgps_find_first_free+0x1c>
		if (!pool.block_used[from_block]) {
   2ef04:	181c      	adds	r4, r3, r0
   2ef06:	7a24      	ldrb	r4, [r4, #8]
   2ef08:	b914      	cbnz	r4, 2ef10 <npgps_find_first_free+0x20>
			pool.first_free = from_block;
   2ef0a:	6018      	str	r0, [r3, #0]
}
   2ef0c:	6818      	ldr	r0, [r3, #0]
   2ef0e:	bd10      	pop	{r4, pc}
		from_block = (from_block + 1) % num_blocks;
   2ef10:	3001      	adds	r0, #1
   2ef12:	fb90 f4f1 	sdiv	r4, r0, r1
	for (i = 0; i < num_blocks; i++) {
   2ef16:	3201      	adds	r2, #1
		from_block = (from_block + 1) % num_blocks;
   2ef18:	fb01 0014 	mls	r0, r1, r4, r0
	for (i = 0; i < num_blocks; i++) {
   2ef1c:	e7f0      	b.n	2ef00 <npgps_find_first_free+0x10>
   2ef1e:	bf00      	nop
   2ef20:	2001a160 	.word	0x2001a160
   2ef24:	2001a15c 	.word	0x2001a15c

0002ef28 <npgps_block_to_offset>:
	if ((block < 0) || (block >= num_blocks)) {
   2ef28:	1e02      	subs	r2, r0, #0
{
   2ef2a:	b508      	push	{r3, lr}
	if ((block < 0) || (block >= num_blocks)) {
   2ef2c:	db03      	blt.n	2ef36 <npgps_block_to_offset+0xe>
   2ef2e:	4b06      	ldr	r3, [pc, #24]	; (2ef48 <npgps_block_to_offset+0x20>)
   2ef30:	681b      	ldr	r3, [r3, #0]
   2ef32:	4293      	cmp	r3, r2
   2ef34:	dc05      	bgt.n	2ef42 <npgps_block_to_offset+0x1a>
		LOG_ERR("invalid block:%d", block);
   2ef36:	4805      	ldr	r0, [pc, #20]	; (2ef4c <npgps_block_to_offset+0x24>)
   2ef38:	2145      	movs	r1, #69	; 0x45
   2ef3a:	f00d fec8 	bl	3ccce <z_log_minimal_printk>
		return 0;
   2ef3e:	2000      	movs	r0, #0
}
   2ef40:	bd08      	pop	{r3, pc}
	return block * BLOCK_SIZE;
   2ef42:	02d0      	lsls	r0, r2, #11
   2ef44:	e7fc      	b.n	2ef40 <npgps_block_to_offset+0x18>
   2ef46:	bf00      	nop
   2ef48:	2001a15c 	.word	0x2001a15c
   2ef4c:	0004a2a6 	.word	0x0004a2a6

0002ef50 <npgps_pointer_to_block>:
	int ret = (uint32_t)(p - block_pool_base) / BLOCK_SIZE;
   2ef50:	4b06      	ldr	r3, [pc, #24]	; (2ef6c <npgps_pointer_to_block+0x1c>)
	if ((ret < 0) || (ret >= num_blocks)) {
   2ef52:	4a07      	ldr	r2, [pc, #28]	; (2ef70 <npgps_pointer_to_block+0x20>)
	int ret = (uint32_t)(p - block_pool_base) / BLOCK_SIZE;
   2ef54:	681b      	ldr	r3, [r3, #0]
	if ((ret < 0) || (ret >= num_blocks)) {
   2ef56:	6812      	ldr	r2, [r2, #0]
	int ret = (uint32_t)(p - block_pool_base) / BLOCK_SIZE;
   2ef58:	1ac0      	subs	r0, r0, r3
   2ef5a:	0ac3      	lsrs	r3, r0, #11
		return NO_BLOCK;
   2ef5c:	ebb2 2fd0 	cmp.w	r2, r0, lsr #11
}
   2ef60:	bfcc      	ite	gt
   2ef62:	4618      	movgt	r0, r3
   2ef64:	f04f 30ff 	movle.w	r0, #4294967295
   2ef68:	4770      	bx	lr
   2ef6a:	bf00      	nop
   2ef6c:	2001a154 	.word	0x2001a154
   2ef70:	2001a15c 	.word	0x2001a15c

0002ef74 <npgps_block_to_pointer>:
	if ((block < 0) || (block >= num_blocks)) {
   2ef74:	1e02      	subs	r2, r0, #0
{
   2ef76:	b508      	push	{r3, lr}
	if ((block < 0) || (block >= num_blocks)) {
   2ef78:	db03      	blt.n	2ef82 <npgps_block_to_pointer+0xe>
   2ef7a:	4b07      	ldr	r3, [pc, #28]	; (2ef98 <npgps_block_to_pointer+0x24>)
   2ef7c:	681b      	ldr	r3, [r3, #0]
   2ef7e:	4293      	cmp	r3, r2
   2ef80:	dc05      	bgt.n	2ef8e <npgps_block_to_pointer+0x1a>
		LOG_ERR("invalid block:%d", block);
   2ef82:	4806      	ldr	r0, [pc, #24]	; (2ef9c <npgps_block_to_pointer+0x28>)
   2ef84:	2145      	movs	r1, #69	; 0x45
   2ef86:	f00d fea2 	bl	3ccce <z_log_minimal_printk>
		ret = NULL;
   2ef8a:	2000      	movs	r0, #0
}
   2ef8c:	bd08      	pop	{r3, pc}
		ret = (void *)(block_pool_base + block * BLOCK_SIZE);
   2ef8e:	4b04      	ldr	r3, [pc, #16]	; (2efa0 <npgps_block_to_pointer+0x2c>)
   2ef90:	6818      	ldr	r0, [r3, #0]
   2ef92:	eb00 20c2 	add.w	r0, r0, r2, lsl #11
	return ret;
   2ef96:	e7f9      	b.n	2ef8c <npgps_block_to_pointer+0x18>
   2ef98:	2001a15c 	.word	0x2001a15c
   2ef9c:	0004a2a6 	.word	0x0004a2a6
   2efa0:	2001a154 	.word	0x2001a154

0002efa4 <npgps_download_init>:
{
   2efa4:	b510      	push	{r4, lr}
	__ASSERT(handler != NULL, "must specify handler");
   2efa6:	4604      	mov	r4, r0
   2efa8:	b950      	cbnz	r0, 2efc0 <npgps_download_init+0x1c>
   2efaa:	4909      	ldr	r1, [pc, #36]	; (2efd0 <npgps_download_init+0x2c>)
   2efac:	4809      	ldr	r0, [pc, #36]	; (2efd4 <npgps_download_init+0x30>)
   2efae:	f240 12b3 	movw	r2, #435	; 0x1b3
   2efb2:	f00d fe52 	bl	3cc5a <assert_print>
   2efb6:	f240 11b3 	movw	r1, #435	; 0x1b3
   2efba:	4805      	ldr	r0, [pc, #20]	; (2efd0 <npgps_download_init+0x2c>)
   2efbc:	f00d fe46 	bl	3cc4c <assert_post_action>
	buffer_handler = handler;
   2efc0:	4b05      	ldr	r3, [pc, #20]	; (2efd8 <npgps_download_init+0x34>)
	return download_client_init(&dlc, download_client_callback);
   2efc2:	4906      	ldr	r1, [pc, #24]	; (2efdc <npgps_download_init+0x38>)
	buffer_handler = handler;
   2efc4:	601c      	str	r4, [r3, #0]
	return download_client_init(&dlc, download_client_callback);
   2efc6:	4806      	ldr	r0, [pc, #24]	; (2efe0 <npgps_download_init+0x3c>)
}
   2efc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return download_client_init(&dlc, download_client_callback);
   2efcc:	f000 bf7a 	b.w	2fec4 <download_client_init>
   2efd0:	0004a22b 	.word	0x0004a22b
   2efd4:	00044263 	.word	0x00044263
   2efd8:	2001a158 	.word	0x2001a158
   2efdc:	0002eb2d 	.word	0x0002eb2d
   2efe0:	200158f8 	.word	0x200158f8

0002efe4 <npgps_download_start>:
{
   2efe4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2efe8:	460f      	mov	r7, r1
   2efea:	4615      	mov	r5, r2
   2efec:	4698      	mov	r8, r3
	if (host == NULL || file == NULL) {
   2efee:	4606      	mov	r6, r0
   2eff0:	2800      	cmp	r0, #0
   2eff2:	d033      	beq.n	2f05c <npgps_download_start+0x78>
   2eff4:	2900      	cmp	r1, #0
   2eff6:	d031      	beq.n	2f05c <npgps_download_start+0x78>
	return z_impl_k_sem_take(sem, timeout);
   2eff8:	2200      	movs	r2, #0
   2effa:	2300      	movs	r3, #0
   2effc:	4819      	ldr	r0, [pc, #100]	; (2f064 <npgps_download_start+0x80>)
   2effe:	f007 ff83 	bl	36f08 <z_impl_k_sem_take>
	if (err) {
   2f002:	4604      	mov	r4, r0
   2f004:	b138      	cbz	r0, 2f016 <npgps_download_start+0x32>
		LOG_ERR("PGPS download already active.");
   2f006:	2145      	movs	r1, #69	; 0x45
   2f008:	4817      	ldr	r0, [pc, #92]	; (2f068 <npgps_download_start+0x84>)
   2f00a:	f00d fe60 	bl	3ccce <z_log_minimal_printk>
}
   2f00e:	4620      	mov	r0, r4
   2f010:	b004      	add	sp, #16
   2f012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	socket_retries_left = SOCKET_RETRIES;
   2f016:	2202      	movs	r2, #2
	struct download_client_cfg config = {
   2f018:	9500      	str	r5, [sp, #0]
		.set_tls_hostname = (sec_tag != -1),
   2f01a:	3501      	adds	r5, #1
   2f01c:	bf18      	it	ne
   2f01e:	2501      	movne	r5, #1
	socket_retries_left = SOCKET_RETRIES;
   2f020:	4b12      	ldr	r3, [pc, #72]	; (2f06c <npgps_download_start+0x88>)
	err = download_client_connect(&dlc, host, &config);
   2f022:	4631      	mov	r1, r6
	socket_retries_left = SOCKET_RETRIES;
   2f024:	601a      	str	r2, [r3, #0]
	struct download_client_cfg config = {
   2f026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	err = download_client_connect(&dlc, host, &config);
   2f028:	466a      	mov	r2, sp
   2f02a:	4811      	ldr	r0, [pc, #68]	; (2f070 <npgps_download_start+0x8c>)
	struct download_client_cfg config = {
   2f02c:	f88d 8004 	strb.w	r8, [sp, #4]
   2f030:	9302      	str	r3, [sp, #8]
		.set_tls_hostname = (sec_tag != -1),
   2f032:	f88d 500c 	strb.w	r5, [sp, #12]
	err = download_client_connect(&dlc, host, &config);
   2f036:	f000 ff75 	bl	2ff24 <download_client_connect>
	if (err != 0) {
   2f03a:	4604      	mov	r4, r0
   2f03c:	b950      	cbnz	r0, 2f054 <npgps_download_start+0x70>
	err = download_client_start(&dlc, file, 0);
   2f03e:	4602      	mov	r2, r0
   2f040:	4639      	mov	r1, r7
   2f042:	480b      	ldr	r0, [pc, #44]	; (2f070 <npgps_download_start+0x8c>)
   2f044:	f001 faae 	bl	305a4 <download_client_start>
	if (err != 0) {
   2f048:	4604      	mov	r4, r0
   2f04a:	2800      	cmp	r0, #0
   2f04c:	d0df      	beq.n	2f00e <npgps_download_start+0x2a>
		download_client_disconnect(&dlc);
   2f04e:	4808      	ldr	r0, [pc, #32]	; (2f070 <npgps_download_start+0x8c>)
   2f050:	f001 f94c 	bl	302ec <download_client_disconnect>
	z_impl_k_sem_give(sem);
   2f054:	4803      	ldr	r0, [pc, #12]	; (2f064 <npgps_download_start+0x80>)
   2f056:	f007 ff1b 	bl	36e90 <z_impl_k_sem_give>
}
   2f05a:	e7d8      	b.n	2f00e <npgps_download_start+0x2a>
		return -EINVAL;
   2f05c:	f06f 0415 	mvn.w	r4, #21
   2f060:	e7d5      	b.n	2f00e <npgps_download_start+0x2a>
   2f062:	bf00      	nop
   2f064:	200150a8 	.word	0x200150a8
   2f068:	0004a2bc 	.word	0x0004a2bc
   2f06c:	2001a194 	.word	0x2001a194
   2f070:	200158f8 	.word	0x200158f8

0002f074 <nrf_cloud_cell_pos_request_json_get>:
	return err;
}

int nrf_cloud_cell_pos_request_json_get(const struct lte_lc_cells_info *const cells_inf,
					const bool request_loc, cJSON **req_obj_out)
{
   2f074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f076:	4604      	mov	r4, r0
   2f078:	460f      	mov	r7, r1
	int err = 0;
	*req_obj_out = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_CELL_POS,
   2f07a:	4814      	ldr	r0, [pc, #80]	; (2f0cc <nrf_cloud_cell_pos_request_json_get+0x58>)
   2f07c:	4914      	ldr	r1, [pc, #80]	; (2f0d0 <nrf_cloud_cell_pos_request_json_get+0x5c>)
{
   2f07e:	4616      	mov	r6, r2
	*req_obj_out = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_CELL_POS,
   2f080:	f7fb f934 	bl	2a2ec <json_create_req_obj>
						      NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA);
	cJSON *data_obj = cJSON_AddObjectToObject(*req_obj_out, NRF_CLOUD_JSON_DATA_KEY);
   2f084:	4913      	ldr	r1, [pc, #76]	; (2f0d4 <nrf_cloud_cell_pos_request_json_get+0x60>)
	*req_obj_out = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_CELL_POS,
   2f086:	6030      	str	r0, [r6, #0]
	cJSON *data_obj = cJSON_AddObjectToObject(*req_obj_out, NRF_CLOUD_JSON_DATA_KEY);
   2f088:	f010 ff3e 	bl	3ff08 <cJSON_AddObjectToObject>

	if (!data_obj) {
   2f08c:	4605      	mov	r5, r0
   2f08e:	b928      	cbnz	r0, 2f09c <nrf_cloud_cell_pos_request_json_get+0x28>
		err = -ENOMEM;
   2f090:	f06f 040b 	mvn.w	r4, #11
	}

	return 0;

cleanup:
	cJSON_Delete(*req_obj_out);
   2f094:	6830      	ldr	r0, [r6, #0]
   2f096:	f002 ffed 	bl	32074 <cJSON_Delete>
	return err;
   2f09a:	e011      	b.n	2f0c0 <nrf_cloud_cell_pos_request_json_get+0x4c>
	if (cells_inf) {
   2f09c:	b194      	cbz	r4, 2f0c4 <nrf_cloud_cell_pos_request_json_get+0x50>
		err = nrf_cloud_format_cell_pos_req_json(cells_inf, 1, data_obj);
   2f09e:	4602      	mov	r2, r0
   2f0a0:	2101      	movs	r1, #1
   2f0a2:	4620      	mov	r0, r4
   2f0a4:	f7fb ff9a 	bl	2afdc <nrf_cloud_format_cell_pos_req_json>
		err = nrf_cloud_format_single_cell_pos_req_json(data_obj);
   2f0a8:	4604      	mov	r4, r0
	if (err) {
   2f0aa:	2800      	cmp	r0, #0
   2f0ac:	d1f2      	bne.n	2f094 <nrf_cloud_cell_pos_request_json_get+0x20>
	if (!request_loc &&
   2f0ae:	b93f      	cbnz	r7, 2f0c0 <nrf_cloud_cell_pos_request_json_get+0x4c>
	    !cJSON_AddNumberToObjectCS(data_obj, CELL_POS_JSON_CELL_LOC_KEY_DOREPLY, 0)) {
   2f0b0:	2200      	movs	r2, #0
   2f0b2:	2300      	movs	r3, #0
   2f0b4:	4628      	mov	r0, r5
   2f0b6:	4908      	ldr	r1, [pc, #32]	; (2f0d8 <nrf_cloud_cell_pos_request_json_get+0x64>)
   2f0b8:	f010 fe8f 	bl	3fdda <cJSON_AddNumberToObjectCS>
	if (!request_loc &&
   2f0bc:	2800      	cmp	r0, #0
   2f0be:	d0e7      	beq.n	2f090 <nrf_cloud_cell_pos_request_json_get+0x1c>
}
   2f0c0:	4620      	mov	r0, r4
   2f0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = nrf_cloud_format_single_cell_pos_req_json(data_obj);
   2f0c4:	f7fb ff68 	bl	2af98 <nrf_cloud_format_single_cell_pos_req_json>
   2f0c8:	e7ee      	b.n	2f0a8 <nrf_cloud_cell_pos_request_json_get+0x34>
   2f0ca:	bf00      	nop
   2f0cc:	000483db 	.word	0x000483db
   2f0d0:	000437fe 	.word	0x000437fe
   2f0d4:	000438da 	.word	0x000438da
   2f0d8:	0004a2df 	.word	0x0004a2df

0002f0dc <nrf_cloud_cell_pos_process>:

int nrf_cloud_cell_pos_process(const char *buf, struct nrf_cloud_cell_pos_result *result)
{
   2f0dc:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!result) {
   2f0de:	460d      	mov	r5, r1
   2f0e0:	b191      	cbz	r1, 2f108 <nrf_cloud_cell_pos_process+0x2c>
		return -EINVAL;
	}

	err = nrf_cloud_parse_cell_pos_response(buf, result);
   2f0e2:	f7fc f991 	bl	2b408 <nrf_cloud_parse_cell_pos_response>
	if (err == -EFAULT) {
   2f0e6:	f110 0f0e 	cmn.w	r0, #14
	err = nrf_cloud_parse_cell_pos_response(buf, result);
   2f0ea:	4604      	mov	r4, r0
	if (err == -EFAULT) {
   2f0ec:	d106      	bne.n	2f0fc <nrf_cloud_cell_pos_process+0x20>
		LOG_ERR("nRF Cloud cell-based location error: %d",
   2f0ee:	2145      	movs	r1, #69	; 0x45
   2f0f0:	69ea      	ldr	r2, [r5, #28]
   2f0f2:	4807      	ldr	r0, [pc, #28]	; (2f110 <nrf_cloud_cell_pos_process+0x34>)
			result->err);
	} else if (err < 0) {
		LOG_ERR("Error processing cell-based location: %d", err);
   2f0f4:	f00d fdeb 	bl	3ccce <z_log_minimal_printk>
	}

	return err;
}
   2f0f8:	4620      	mov	r0, r4
   2f0fa:	bd38      	pop	{r3, r4, r5, pc}
	} else if (err < 0) {
   2f0fc:	2800      	cmp	r0, #0
   2f0fe:	dafb      	bge.n	2f0f8 <nrf_cloud_cell_pos_process+0x1c>
		LOG_ERR("Error processing cell-based location: %d", err);
   2f100:	4602      	mov	r2, r0
   2f102:	2145      	movs	r1, #69	; 0x45
   2f104:	4803      	ldr	r0, [pc, #12]	; (2f114 <nrf_cloud_cell_pos_process+0x38>)
   2f106:	e7f5      	b.n	2f0f4 <nrf_cloud_cell_pos_process+0x18>
		return -EINVAL;
   2f108:	f06f 0415 	mvn.w	r4, #21
   2f10c:	e7f4      	b.n	2f0f8 <nrf_cloud_cell_pos_process+0x1c>
   2f10e:	bf00      	nop
   2f110:	0004a2e7 	.word	0x0004a2e7
   2f114:	0004a314 	.word	0x0004a314

0002f118 <fota_settings_set>:
SETTINGS_STATIC_HANDLER_DEFINE(fota, NRF_CLOUD_SETTINGS_FULL_FOTA, NULL,
			       fota_settings_set, NULL, NULL);

static int fota_settings_set(const char *key, size_t len_rd,
			     settings_read_cb read_cb, void *cb_arg)
{
   2f118:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f11c:	460d      	mov	r5, r1
   2f11e:	4617      	mov	r7, r2
   2f120:	4698      	mov	r8, r3
	if (!key) {
   2f122:	4604      	mov	r4, r0
   2f124:	2800      	cmp	r0, #0
   2f126:	d036      	beq.n	2f196 <fota_settings_set+0x7e>
		return -EINVAL;
	}

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);

	if (strncmp(key, NRF_CLOUD_SETTINGS_FOTA_JOB, strlen(NRF_CLOUD_SETTINGS_FOTA_JOB)) != 0) {
   2f128:	481f      	ldr	r0, [pc, #124]	; (2f1a8 <fota_settings_set+0x90>)
   2f12a:	f7ee f88a 	bl	1d242 <strlen>
   2f12e:	491e      	ldr	r1, [pc, #120]	; (2f1a8 <fota_settings_set+0x90>)
   2f130:	4602      	mov	r2, r0
   2f132:	4620      	mov	r0, r4
   2f134:	f012 fc38 	bl	419a8 <strncmp>
   2f138:	4604      	mov	r4, r0
   2f13a:	bb78      	cbnz	r0, 2f19c <fota_settings_set+0x84>
		return -ENOMSG;
	}

	if (len_rd > sizeof(saved_job)) {
   2f13c:	2d28      	cmp	r5, #40	; 0x28
   2f13e:	d904      	bls.n	2f14a <fota_settings_set+0x32>
		LOG_INF("FOTA settings size larger than expected");
   2f140:	2149      	movs	r1, #73	; 0x49
   2f142:	481a      	ldr	r0, [pc, #104]	; (2f1ac <fota_settings_set+0x94>)
   2f144:	f00d fdc3 	bl	3ccce <z_log_minimal_printk>
		len_rd = sizeof(saved_job);
   2f148:	2528      	movs	r5, #40	; 0x28
	}

	ssize_t sz = read_cb(cb_arg, (void *)&saved_job, len_rd);
   2f14a:	4e19      	ldr	r6, [pc, #100]	; (2f1b0 <fota_settings_set+0x98>)
   2f14c:	462a      	mov	r2, r5
   2f14e:	4631      	mov	r1, r6
   2f150:	4640      	mov	r0, r8
   2f152:	47b8      	blx	r7

	if (sz == 0) {
   2f154:	1e02      	subs	r2, r0, #0
   2f156:	d024      	beq.n	2f1a2 <fota_settings_set+0x8a>
		LOG_DBG("FOTA settings key-value pair has been deleted");
		return -EIDRM;
	} else if (sz < 0) {
   2f158:	da09      	bge.n	2f16e <fota_settings_set+0x56>
		LOG_ERR("FOTA settings read error: %d", sz);
   2f15a:	2145      	movs	r1, #69	; 0x45
   2f15c:	4815      	ldr	r0, [pc, #84]	; (2f1b4 <fota_settings_set+0x9c>)
   2f15e:	f00d fdb6 	bl	3ccce <z_log_minimal_printk>
		return -EIO;
   2f162:	f06f 0404 	mvn.w	r4, #4
	} else {
		LOG_INF("FOTA settings size smaller than expected, likely outdated");
	}

	return 0;
}
   2f166:	4620      	mov	r0, r4
   2f168:	b002      	add	sp, #8
   2f16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sz == sizeof(saved_job)) {
   2f16e:	2a28      	cmp	r2, #40	; 0x28
   2f170:	d10c      	bne.n	2f18c <fota_settings_set+0x74>
		LOG_INF("Saved job: %s, type: %d, validate: %d, bl: 0x%X",
   2f172:	4632      	mov	r2, r6
   2f174:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   2f178:	2149      	movs	r1, #73	; 0x49
   2f17a:	9301      	str	r3, [sp, #4]
   2f17c:	f812 3b02 	ldrb.w	r3, [r2], #2
   2f180:	480d      	ldr	r0, [pc, #52]	; (2f1b8 <fota_settings_set+0xa0>)
   2f182:	9300      	str	r3, [sp, #0]
   2f184:	7873      	ldrb	r3, [r6, #1]
   2f186:	f00d fda2 	bl	3ccce <z_log_minimal_printk>
   2f18a:	e7ec      	b.n	2f166 <fota_settings_set+0x4e>
		LOG_INF("FOTA settings size smaller than expected, likely outdated");
   2f18c:	2149      	movs	r1, #73	; 0x49
   2f18e:	480b      	ldr	r0, [pc, #44]	; (2f1bc <fota_settings_set+0xa4>)
   2f190:	f00d fd9d 	bl	3ccce <z_log_minimal_printk>
   2f194:	e7e7      	b.n	2f166 <fota_settings_set+0x4e>
		return -EINVAL;
   2f196:	f06f 0415 	mvn.w	r4, #21
   2f19a:	e7e4      	b.n	2f166 <fota_settings_set+0x4e>
		return -ENOMSG;
   2f19c:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2f1a0:	e7e1      	b.n	2f166 <fota_settings_set+0x4e>
		return -EIDRM;
   2f1a2:	f06f 0423 	mvn.w	r4, #35	; 0x23
   2f1a6:	e7de      	b.n	2f166 <fota_settings_set+0x4e>
   2f1a8:	0004a4b1 	.word	0x0004a4b1
   2f1ac:	0004a355 	.word	0x0004a355
   2f1b0:	20014c47 	.word	0x20014c47
   2f1b4:	0004a382 	.word	0x0004a382
   2f1b8:	0004a3a4 	.word	0x0004a3a4
   2f1bc:	0004a3d9 	.word	0x0004a3d9

0002f1c0 <add_number_to_array>:
	}
	return item;
}

static bool add_number_to_array(cJSON *const array, const int number)
{
   2f1c0:	b538      	push	{r3, r4, r5, lr}
   2f1c2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(array != NULL);
   2f1c4:	4605      	mov	r5, r0
   2f1c6:	b950      	cbnz	r0, 2f1de <add_number_to_array+0x1e>
   2f1c8:	490c      	ldr	r1, [pc, #48]	; (2f1fc <add_number_to_array+0x3c>)
   2f1ca:	480d      	ldr	r0, [pc, #52]	; (2f200 <add_number_to_array+0x40>)
   2f1cc:	f240 229f 	movw	r2, #671	; 0x29f
   2f1d0:	f00d fd43 	bl	3cc5a <assert_print>
   2f1d4:	f240 219f 	movw	r1, #671	; 0x29f
   2f1d8:	4808      	ldr	r0, [pc, #32]	; (2f1fc <add_number_to_array+0x3c>)
   2f1da:	f00d fd37 	bl	3cc4c <assert_post_action>

	cJSON *item = cJSON_CreateNumber(number);
   2f1de:	4620      	mov	r0, r4
   2f1e0:	f7ed fa80 	bl	1c6e4 <__aeabi_i2d>
   2f1e4:	f7ef fa64 	bl	1e6b0 <cJSON_CreateNumber>

	if (item) {
   2f1e8:	4604      	mov	r4, r0
   2f1ea:	b118      	cbz	r0, 2f1f4 <add_number_to_array+0x34>
		cJSON_AddItemToArray(array, item);
   2f1ec:	4601      	mov	r1, r0
   2f1ee:	4628      	mov	r0, r5
   2f1f0:	f010 fda9 	bl	3fd46 <cJSON_AddItemToArray>
	}
	return item;
}
   2f1f4:	1e20      	subs	r0, r4, #0
   2f1f6:	bf18      	it	ne
   2f1f8:	2001      	movne	r0, #1
   2f1fa:	bd38      	pop	{r3, r4, r5, pc}
   2f1fc:	0004a418 	.word	0x0004a418
   2f200:	00044263 	.word	0x00044263

0002f204 <add_string_to_array>:
{
   2f204:	b538      	push	{r3, r4, r5, lr}
   2f206:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(array != NULL);
   2f208:	4605      	mov	r5, r0
   2f20a:	b950      	cbnz	r0, 2f222 <add_string_to_array+0x1e>
   2f20c:	490b      	ldr	r1, [pc, #44]	; (2f23c <add_string_to_array+0x38>)
   2f20e:	480c      	ldr	r0, [pc, #48]	; (2f240 <add_string_to_array+0x3c>)
   2f210:	f240 2293 	movw	r2, #659	; 0x293
   2f214:	f00d fd21 	bl	3cc5a <assert_print>
   2f218:	f240 2193 	movw	r1, #659	; 0x293
   2f21c:	4807      	ldr	r0, [pc, #28]	; (2f23c <add_string_to_array+0x38>)
   2f21e:	f00d fd15 	bl	3cc4c <assert_post_action>
	cJSON *item = cJSON_CreateString(string);
   2f222:	4620      	mov	r0, r4
   2f224:	f002 ffc4 	bl	321b0 <cJSON_CreateString>
	if (item) {
   2f228:	4604      	mov	r4, r0
   2f22a:	b118      	cbz	r0, 2f234 <add_string_to_array+0x30>
		cJSON_AddItemToArray(array, item);
   2f22c:	4601      	mov	r1, r0
   2f22e:	4628      	mov	r0, r5
   2f230:	f010 fd89 	bl	3fd46 <cJSON_AddItemToArray>
}
   2f234:	1e20      	subs	r0, r4, #0
   2f236:	bf18      	it	ne
   2f238:	2001      	movne	r0, #1
   2f23a:	bd38      	pop	{r3, r4, r5, pc}
   2f23c:	0004a418 	.word	0x0004a418
   2f240:	00044263 	.word	0x00044263

0002f244 <publish>:
		log_strdup(pub->message.topic.topic.utf8));
	LOG_DBG("Payload (%d bytes): %s",
		pub->message.payload.len,
		log_strdup(pub->message.payload.data));

	ret = mqtt_publish(client_mqtt, pub);
   2f244:	4b07      	ldr	r3, [pc, #28]	; (2f264 <publish+0x20>)
{
   2f246:	4601      	mov	r1, r0
   2f248:	b510      	push	{r4, lr}
	ret = mqtt_publish(client_mqtt, pub);
   2f24a:	6818      	ldr	r0, [r3, #0]
   2f24c:	f00f f8ef 	bl	3e42e <mqtt_publish>
	if (ret) {
   2f250:	4604      	mov	r4, r0
   2f252:	b120      	cbz	r0, 2f25e <publish+0x1a>
		LOG_ERR("Publish failed: %d", ret);
   2f254:	4602      	mov	r2, r0
   2f256:	2145      	movs	r1, #69	; 0x45
   2f258:	4803      	ldr	r0, [pc, #12]	; (2f268 <publish+0x24>)
   2f25a:	f00d fd38 	bl	3ccce <z_log_minimal_printk>
	}
	return ret;
}
   2f25e:	4620      	mov	r0, r4
   2f260:	bd10      	pop	{r4, pc}
   2f262:	bf00      	nop
   2f264:	2001a198 	.word	0x2001a198
   2f268:	0004a456 	.word	0x0004a456

0002f26c <save_validate_status>:
{
   2f26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f26e:	460f      	mov	r7, r1
   2f270:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(job_id != NULL);
   2f272:	4605      	mov	r5, r0
   2f274:	b950      	cbnz	r0, 2f28c <save_validate_status+0x20>
   2f276:	491e      	ldr	r1, [pc, #120]	; (2f2f0 <save_validate_status+0x84>)
   2f278:	481e      	ldr	r0, [pc, #120]	; (2f2f4 <save_validate_status+0x88>)
   2f27a:	f240 2202 	movw	r2, #514	; 0x202
   2f27e:	f00d fcec 	bl	3cc5a <assert_print>
   2f282:	f240 2102 	movw	r1, #514	; 0x202
   2f286:	481a      	ldr	r0, [pc, #104]	; (2f2f0 <save_validate_status+0x84>)
   2f288:	f00d fce0 	bl	3cc4c <assert_post_action>
	if (validate == NRF_CLOUD_FOTA_VALIDATE_DONE) {
   2f28c:	2e05      	cmp	r6, #5
   2f28e:	4c1a      	ldr	r4, [pc, #104]	; (2f2f8 <save_validate_status+0x8c>)
   2f290:	d117      	bne.n	2f2c2 <save_validate_status+0x56>
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   2f292:	2100      	movs	r1, #0
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f294:	2303      	movs	r3, #3
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2f296:	2225      	movs	r2, #37	; 0x25
   2f298:	1ca0      	adds	r0, r4, #2
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f29a:	7063      	strb	r3, [r4, #1]
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   2f29c:	7021      	strb	r1, [r4, #0]
		saved_job.bl_flags = NRF_CLOUD_FOTA_BL_STATUS_CLEAR;
   2f29e:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2f2a2:	f012 f9ae 	bl	41602 <memset>
	ret = settings_save_one(NRF_CLOUD_SETTINGS_FULL_FOTA_JOB, &saved_job,
   2f2a6:	2228      	movs	r2, #40	; 0x28
   2f2a8:	4913      	ldr	r1, [pc, #76]	; (2f2f8 <save_validate_status+0x8c>)
   2f2aa:	4814      	ldr	r0, [pc, #80]	; (2f2fc <save_validate_status+0x90>)
   2f2ac:	f7f2 feb2 	bl	22014 <settings_save_one>
	if (ret) {
   2f2b0:	4604      	mov	r4, r0
   2f2b2:	b120      	cbz	r0, 2f2be <save_validate_status+0x52>
		LOG_ERR("settings_save_one failed: %d", ret);
   2f2b4:	4602      	mov	r2, r0
   2f2b6:	2145      	movs	r1, #69	; 0x45
   2f2b8:	4811      	ldr	r0, [pc, #68]	; (2f300 <save_validate_status+0x94>)
   2f2ba:	f00d fd08 	bl	3ccce <z_log_minimal_printk>
}
   2f2be:	4620      	mov	r0, r4
   2f2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		saved_job.validate = validate;
   2f2c2:	4620      	mov	r0, r4
   2f2c4:	f800 6b02 	strb.w	r6, [r0], #2
		if (job_id != saved_job.id) {
   2f2c8:	4285      	cmp	r5, r0
		saved_job.type = job_type;
   2f2ca:	7067      	strb	r7, [r4, #1]
		if (job_id != saved_job.id) {
   2f2cc:	d006      	beq.n	2f2dc <save_validate_status+0x70>
			strncpy(saved_job.id, job_id, sizeof(saved_job.id) - 1);
   2f2ce:	2224      	movs	r2, #36	; 0x24
   2f2d0:	4629      	mov	r1, r5
   2f2d2:	f012 fb7d 	bl	419d0 <strncpy>
			saved_job.id[sizeof(saved_job.id) - 1] = '\0';
   2f2d6:	2300      	movs	r3, #0
   2f2d8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		ret = nrf_cloud_bootloader_fota_slot_set(&saved_job);
   2f2dc:	4806      	ldr	r0, [pc, #24]	; (2f2f8 <save_validate_status+0x8c>)
   2f2de:	f000 fcab 	bl	2fc38 <nrf_cloud_bootloader_fota_slot_set>
		if (ret) {
   2f2e2:	2800      	cmp	r0, #0
   2f2e4:	d0df      	beq.n	2f2a6 <save_validate_status+0x3a>
			LOG_WRN("Failed to set active bootloader (B1) slot flag");
   2f2e6:	2157      	movs	r1, #87	; 0x57
   2f2e8:	4806      	ldr	r0, [pc, #24]	; (2f304 <save_validate_status+0x98>)
   2f2ea:	f00d fcf0 	bl	3ccce <z_log_minimal_printk>
   2f2ee:	e7da      	b.n	2f2a6 <save_validate_status+0x3a>
   2f2f0:	0004a418 	.word	0x0004a418
   2f2f4:	00044263 	.word	0x00044263
   2f2f8:	20014c47 	.word	0x20014c47
   2f2fc:	0004a4a2 	.word	0x0004a4a2
   2f300:	0004a4b5 	.word	0x0004a4b5
   2f304:	0004a46e 	.word	0x0004a46e

0002f308 <reset_topics>:
{
   2f308:	b508      	push	{r3, lr}
	reset_topic(&sub_topics[SUB_TOPIC_IDX_RCV].topic);
   2f30a:	4805      	ldr	r0, [pc, #20]	; (2f320 <reset_topics+0x18>)
   2f30c:	f010 fb31 	bl	3f972 <reset_topic>
	reset_topic(&topic_updt.topic);
   2f310:	4804      	ldr	r0, [pc, #16]	; (2f324 <reset_topics+0x1c>)
   2f312:	f010 fb2e 	bl	3f972 <reset_topic>
}
   2f316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	reset_topic(&topic_req.topic);
   2f31a:	4803      	ldr	r0, [pc, #12]	; (2f328 <reset_topics+0x20>)
   2f31c:	f010 bb29 	b.w	3f972 <reset_topic>
   2f320:	200146c8 	.word	0x200146c8
   2f324:	200146e0 	.word	0x200146e0
   2f328:	200146d4 	.word	0x200146d4

0002f32c <build_topic>:
{
   2f32c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	size_t size = endpoint->size + strlen(client_id) +
   2f330:	684d      	ldr	r5, [r1, #4]
{
   2f332:	4690      	mov	r8, r2
   2f334:	460f      	mov	r7, r1
   2f336:	461e      	mov	r6, r3
   2f338:	4681      	mov	r9, r0
	size_t size = endpoint->size + strlen(client_id) +
   2f33a:	f7ed ff82 	bl	1d242 <strlen>
   2f33e:	4682      	mov	sl, r0
		      strlen(topic_str) + 1;
   2f340:	4640      	mov	r0, r8
   2f342:	f7ed ff7e 	bl	1d242 <strlen>
	size_t size = endpoint->size + strlen(client_id) +
   2f346:	1c6b      	adds	r3, r5, #1
   2f348:	eb03 050a 	add.w	r5, r3, sl
   2f34c:	182c      	adds	r4, r5, r0
	buf = nrf_cloud_calloc(size, 1);
   2f34e:	2101      	movs	r1, #1
   2f350:	4620      	mov	r0, r4
   2f352:	f012 f8b0 	bl	414b6 <k_calloc>
	if (!buf) {
   2f356:	4605      	mov	r5, r0
   2f358:	b938      	cbnz	r0, 2f36a <build_topic+0x3e>
		reset_topic(topic_out);
   2f35a:	4630      	mov	r0, r6
   2f35c:	f010 fb09 	bl	3f972 <reset_topic>
		return ret;
   2f360:	f06f 000b 	mvn.w	r0, #11
}
   2f364:	b002      	add	sp, #8
   2f366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ret = snprintk(buf, size, "%s%s%s",
   2f36a:	4621      	mov	r1, r4
   2f36c:	e9cd 9800 	strd	r9, r8, [sp]
   2f370:	683b      	ldr	r3, [r7, #0]
   2f372:	4a08      	ldr	r2, [pc, #32]	; (2f394 <build_topic+0x68>)
   2f374:	f00d fa9b 	bl	3c8ae <snprintk>
	if (ret <= 0 || ret >= size) {
   2f378:	2800      	cmp	r0, #0
   2f37a:	dd01      	ble.n	2f380 <build_topic+0x54>
   2f37c:	42a0      	cmp	r0, r4
   2f37e:	d305      	bcc.n	2f38c <build_topic+0x60>
		nrf_cloud_free(buf);
   2f380:	4628      	mov	r0, r5
   2f382:	f012 f88d 	bl	414a0 <k_free>
		return ret;
   2f386:	f06f 0006 	mvn.w	r0, #6
   2f38a:	e7eb      	b.n	2f364 <build_topic+0x38>
	topic_out->size = ret;
   2f38c:	e9c6 5000 	strd	r5, r0, [r6]
	return 0;
   2f390:	2000      	movs	r0, #0
   2f392:	e7e7      	b.n	2f364 <build_topic+0x38>
   2f394:	0004a4d7 	.word	0x0004a4d7

0002f398 <send_event.constprop.0>:
	struct nrf_cloud_fota_evt evt = {
   2f398:	2300      	movs	r3, #0
static void send_event(const enum nrf_cloud_fota_evt_id id,
   2f39a:	b507      	push	{r0, r1, r2, lr}
	struct nrf_cloud_fota_evt evt = {
   2f39c:	f8cd 3003 	str.w	r3, [sp, #3]
   2f3a0:	f88d 3007 	strb.w	r3, [sp, #7]
		.status = job->status,
   2f3a4:	4b0b      	ldr	r3, [pc, #44]	; (2f3d4 <send_event.constprop.0+0x3c>)
	switch (id) {
   2f3a6:	2802      	cmp	r0, #2
	struct nrf_cloud_fota_evt evt = {
   2f3a8:	791a      	ldrb	r2, [r3, #4]
   2f3aa:	f88d 0000 	strb.w	r0, [sp]
   2f3ae:	f88d 2001 	strb.w	r2, [sp, #1]
   2f3b2:	7a1a      	ldrb	r2, [r3, #8]
		evt.evt_data.error = job->error;
   2f3b4:	bf08      	it	eq
   2f3b6:	7f1b      	ldrbeq	r3, [r3, #28]
	struct nrf_cloud_fota_evt evt = {
   2f3b8:	f88d 2002 	strb.w	r2, [sp, #2]
		evt.evt_data.error = job->error;
   2f3bc:	bf08      	it	eq
   2f3be:	f88d 3004 	strbeq.w	r3, [sp, #4]
	if (event_cb) {
   2f3c2:	4b05      	ldr	r3, [pc, #20]	; (2f3d8 <send_event.constprop.0+0x40>)
   2f3c4:	681b      	ldr	r3, [r3, #0]
   2f3c6:	b10b      	cbz	r3, 2f3cc <send_event.constprop.0+0x34>
		event_cb(&evt);
   2f3c8:	4668      	mov	r0, sp
   2f3ca:	4798      	blx	r3
}
   2f3cc:	b003      	add	sp, #12
   2f3ce:	f85d fb04 	ldr.w	pc, [sp], #4
   2f3d2:	bf00      	nop
   2f3d4:	2001a19c 	.word	0x2001a19c
   2f3d8:	2001a1c4 	.word	0x2001a1c4

0002f3dc <send_job_update>:
		return false;
	}
}

static int send_job_update(struct nrf_cloud_fota_job *const job)
{
   2f3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* ensure shell-invoked fota doesn't crash below */
	if ((job == NULL) || (job->info.id == NULL)) {
   2f3e0:	68c3      	ldr	r3, [r0, #12]
{
   2f3e2:	4604      	mov	r4, r0
   2f3e4:	b086      	sub	sp, #24
	if ((job == NULL) || (job->info.id == NULL)) {
   2f3e6:	2b00      	cmp	r3, #0
   2f3e8:	d065      	beq.n	2f4b6 <send_job_update+0xda>
		return -EINVAL;
	} else if (client_mqtt == NULL) {
   2f3ea:	4b37      	ldr	r3, [pc, #220]	; (2f4c8 <send_job_update+0xec>)
   2f3ec:	681b      	ldr	r3, [r3, #0]
   2f3ee:	2b00      	cmp	r3, #0
   2f3f0:	d064      	beq.n	2f4bc <send_job_update+0xe0>
		return -ENXIO;
	} else if (topic_updt.topic.utf8 == NULL) {
   2f3f2:	4d36      	ldr	r5, [pc, #216]	; (2f4cc <send_job_update+0xf0>)
   2f3f4:	682b      	ldr	r3, [r5, #0]
   2f3f6:	2b00      	cmp	r3, #0
   2f3f8:	d063      	beq.n	2f4c2 <send_job_update+0xe6>
		return -EHOSTUNREACH;
	}

	int ret;
	struct mqtt_publish_param param = {
   2f3fa:	466e      	mov	r6, sp
   2f3fc:	2218      	movs	r2, #24
   2f3fe:	2100      	movs	r1, #0
   2f400:	4630      	mov	r0, r6
   2f402:	f012 f8fe 	bl	41602 <memset>
   2f406:	f44f 7397 	mov.w	r3, #302	; 0x12e
   2f40a:	f8ad 3014 	strh.w	r3, [sp, #20]
		.message_id = NCT_MSG_ID_FOTA_REPORT,
		.dup_flag = 0,
		.retain_flag = 0,
	};
	bool result;
	cJSON *array = cJSON_CreateArray();
   2f40e:	f002 fee7 	bl	321e0 <cJSON_CreateArray>

	if (!array) {
   2f412:	4680      	mov	r8, r0
   2f414:	b928      	cbnz	r0, 2f422 <send_job_update+0x46>
					      get_error_string(job->error));
	}

	if (!result) {
		cJSON_Delete(array);
		return -ENOMEM;
   2f416:	f06f 050b 	mvn.w	r5, #11
		/* If job was updated to terminal status, save job ID */
		strncpy(last_job, job->info.id, sizeof(last_job));
	}

	return ret;
}
   2f41a:	4628      	mov	r0, r5
   2f41c:	b006      	add	sp, #24
   2f41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = add_string_to_array(array, job->info.id) &&
   2f422:	68e1      	ldr	r1, [r4, #12]
   2f424:	f7ff feee 	bl	2f204 <add_string_to_array>
   2f428:	b118      	cbz	r0, 2f432 <send_job_update+0x56>
		 add_number_to_array(array, job->status);
   2f42a:	4640      	mov	r0, r8
   2f42c:	7921      	ldrb	r1, [r4, #4]
   2f42e:	f7ff fec7 	bl	2f1c0 <add_number_to_array>
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   2f432:	7923      	ldrb	r3, [r4, #4]
	result = add_string_to_array(array, job->info.id) &&
   2f434:	4607      	mov	r7, r0
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   2f436:	2b07      	cmp	r3, #7
   2f438:	d10c      	bne.n	2f454 <send_job_update+0x78>
		result &= add_number_to_array(array, job->dl_progress);
   2f43a:	4640      	mov	r0, r8
   2f43c:	6a21      	ldr	r1, [r4, #32]
   2f43e:	f7ff febf 	bl	2f1c0 <add_number_to_array>
		result &= add_string_to_array(array,
   2f442:	ea00 0307 	and.w	r3, r0, r7
   2f446:	f003 0301 	and.w	r3, r3, #1
		cJSON_Delete(array);
   2f44a:	4640      	mov	r0, r8
	if (!result) {
   2f44c:	b97b      	cbnz	r3, 2f46e <send_job_update+0x92>
		cJSON_Delete(array);
   2f44e:	f002 fe11 	bl	32074 <cJSON_Delete>
   2f452:	e7e0      	b.n	2f416 <send_job_update+0x3a>
	switch (err) {
   2f454:	7f23      	ldrb	r3, [r4, #28]
		result &= add_string_to_array(array,
   2f456:	4640      	mov	r0, r8
   2f458:	3b01      	subs	r3, #1
   2f45a:	b2db      	uxtb	r3, r3
   2f45c:	2b04      	cmp	r3, #4
   2f45e:	bf96      	itet	ls
   2f460:	4a1b      	ldrls	r2, [pc, #108]	; (2f4d0 <send_job_update+0xf4>)
   2f462:	491c      	ldrhi	r1, [pc, #112]	; (2f4d4 <send_job_update+0xf8>)
   2f464:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   2f468:	f7ff fecc 	bl	2f204 <add_string_to_array>
   2f46c:	e7e9      	b.n	2f442 <send_job_update+0x66>
	char *array_str = cJSON_PrintUnformatted(array);
   2f46e:	f010 fc4f 	bl	3fd10 <cJSON_PrintUnformatted>
   2f472:	4607      	mov	r7, r0
	cJSON_Delete(array);
   2f474:	4640      	mov	r0, r8
   2f476:	f002 fdfd 	bl	32074 <cJSON_Delete>
	if (array_str == NULL) {
   2f47a:	2f00      	cmp	r7, #0
   2f47c:	d0cb      	beq.n	2f416 <send_job_update+0x3a>
		pub_param->message.topic = *topic;
   2f47e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2f482:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		pub_param->message.payload.len = strlen(array_str);
   2f486:	4638      	mov	r0, r7
		pub_param->message.payload.data = array_str;
   2f488:	9703      	str	r7, [sp, #12]
		pub_param->message.payload.len = strlen(array_str);
   2f48a:	f7ed feda 	bl	1d242 <strlen>
   2f48e:	9004      	str	r0, [sp, #16]
		ret = publish(pub_param);
   2f490:	4630      	mov	r0, r6
   2f492:	f7ff fed7 	bl	2f244 <publish>
   2f496:	4605      	mov	r5, r0
	cJSON_FreeString(array_str);
   2f498:	4638      	mov	r0, r7
   2f49a:	f010 fd70 	bl	3ff7e <cJSON_FreeString>
	if (ret == 0 && is_job_status_terminal(job->status)) {
   2f49e:	2d00      	cmp	r5, #0
   2f4a0:	d1bb      	bne.n	2f41a <send_job_update+0x3e>
	switch (status) {
   2f4a2:	7923      	ldrb	r3, [r4, #4]
   2f4a4:	3b02      	subs	r3, #2
   2f4a6:	2b04      	cmp	r3, #4
   2f4a8:	d8b7      	bhi.n	2f41a <send_job_update+0x3e>
		strncpy(last_job, job->info.id, sizeof(last_job));
   2f4aa:	2225      	movs	r2, #37	; 0x25
   2f4ac:	68e1      	ldr	r1, [r4, #12]
   2f4ae:	480a      	ldr	r0, [pc, #40]	; (2f4d8 <send_job_update+0xfc>)
   2f4b0:	f012 fa8e 	bl	419d0 <strncpy>
   2f4b4:	e7b1      	b.n	2f41a <send_job_update+0x3e>
		return -EINVAL;
   2f4b6:	f06f 0515 	mvn.w	r5, #21
   2f4ba:	e7ae      	b.n	2f41a <send_job_update+0x3e>
		return -ENXIO;
   2f4bc:	f06f 0505 	mvn.w	r5, #5
   2f4c0:	e7ab      	b.n	2f41a <send_job_update+0x3e>
		return -EHOSTUNREACH;
   2f4c2:	f06f 0575 	mvn.w	r5, #117	; 0x75
   2f4c6:	e7a8      	b.n	2f41a <send_job_update+0x3e>
   2f4c8:	2001a198 	.word	0x2001a198
   2f4cc:	200146e0 	.word	0x200146e0
   2f4d0:	0004329c 	.word	0x0004329c
   2f4d4:	000453f3 	.word	0x000453f3
   2f4d8:	2001d2d2 	.word	0x2001d2d2

0002f4dc <report_validated_job_status>:
{
   2f4dc:	b530      	push	{r4, r5, lr}
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f4de:	4c21      	ldr	r4, [pc, #132]	; (2f564 <report_validated_job_status+0x88>)
{
   2f4e0:	b08b      	sub	sp, #44	; 0x2c
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f4e2:	7865      	ldrb	r5, [r4, #1]
   2f4e4:	2d03      	cmp	r5, #3
   2f4e6:	d03a      	beq.n	2f55e <report_validated_job_status+0x82>
	struct nrf_cloud_fota_job job = {
   2f4e8:	2228      	movs	r2, #40	; 0x28
   2f4ea:	2100      	movs	r1, #0
   2f4ec:	4668      	mov	r0, sp
   2f4ee:	f012 f888 	bl	41602 <memset>
	switch (saved_job.validate) {
   2f4f2:	7822      	ldrb	r2, [r4, #0]
	struct nrf_cloud_fota_job job = {
   2f4f4:	1ca3      	adds	r3, r4, #2
	switch (saved_job.validate) {
   2f4f6:	2a03      	cmp	r2, #3
	struct nrf_cloud_fota_job job = {
   2f4f8:	f88d 5008 	strb.w	r5, [sp, #8]
   2f4fc:	9303      	str	r3, [sp, #12]
	switch (saved_job.validate) {
   2f4fe:	d01c      	beq.n	2f53a <report_validated_job_status+0x5e>
   2f500:	2a04      	cmp	r2, #4
   2f502:	f04f 0503 	mov.w	r5, #3
   2f506:	d015      	beq.n	2f534 <report_validated_job_status+0x58>
   2f508:	2a02      	cmp	r2, #2
   2f50a:	d11a      	bne.n	2f542 <report_validated_job_status+0x66>
		job.status = NRF_CLOUD_FOTA_SUCCEEDED;
   2f50c:	f88d 5004 	strb.w	r5, [sp, #4]
	int ret = 0;
   2f510:	2400      	movs	r4, #0
	if (job.info.type != NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f512:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2f516:	2b03      	cmp	r3, #3
   2f518:	d009      	beq.n	2f52e <report_validated_job_status+0x52>
		ret = send_job_update(&job);
   2f51a:	4668      	mov	r0, sp
   2f51c:	f7ff ff5e 	bl	2f3dc <send_job_update>
		if (ret) {
   2f520:	4604      	mov	r4, r0
   2f522:	b120      	cbz	r0, 2f52e <report_validated_job_status+0x52>
			LOG_ERR("Error sending job update: %d", ret);
   2f524:	4602      	mov	r2, r0
   2f526:	2145      	movs	r1, #69	; 0x45
   2f528:	480f      	ldr	r0, [pc, #60]	; (2f568 <report_validated_job_status+0x8c>)
   2f52a:	f00d fbd0 	bl	3ccce <z_log_minimal_printk>
}
   2f52e:	4620      	mov	r0, r4
   2f530:	b00b      	add	sp, #44	; 0x2c
   2f532:	bd30      	pop	{r4, r5, pc}
		job.error = NRF_CLOUD_FOTA_ERROR_UNABLE_TO_VALIDATE;
   2f534:	f88d 501c 	strb.w	r5, [sp, #28]
   2f538:	e7e8      	b.n	2f50c <report_validated_job_status+0x30>
		job.status = NRF_CLOUD_FOTA_FAILED;
   2f53a:	2302      	movs	r3, #2
   2f53c:	f88d 3004 	strb.w	r3, [sp, #4]
   2f540:	e7e6      	b.n	2f510 <report_validated_job_status+0x34>
		LOG_ERR("Unexpected job validation status: %d",
   2f542:	2145      	movs	r1, #69	; 0x45
   2f544:	4809      	ldr	r0, [pc, #36]	; (2f56c <report_validated_job_status+0x90>)
   2f546:	f00d fbc2 	bl	3ccce <z_log_minimal_printk>
		ret = save_validate_status(job.info.id, job.info.type,
   2f54a:	2205      	movs	r2, #5
   2f54c:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2f550:	9803      	ldr	r0, [sp, #12]
   2f552:	f7ff fe8b 	bl	2f26c <save_validate_status>
		job.info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f556:	f88d 5008 	strb.w	r5, [sp, #8]
		ret = save_validate_status(job.info.id, job.info.type,
   2f55a:	4604      	mov	r4, r0
		break;
   2f55c:	e7d9      	b.n	2f512 <report_validated_job_status+0x36>
		return 1;
   2f55e:	2401      	movs	r4, #1
   2f560:	e7e5      	b.n	2f52e <report_validated_job_status+0x52>
   2f562:	bf00      	nop
   2f564:	20014c47 	.word	0x20014c47
   2f568:	0004a508 	.word	0x0004a508
   2f56c:	0004a4de 	.word	0x0004a4de

0002f570 <cleanup_job.constprop.0>:
static void cleanup_job(struct nrf_cloud_fota_job *const job)
   2f570:	b510      	push	{r4, lr}
	if (job->parsed_payload) {
   2f572:	4c06      	ldr	r4, [pc, #24]	; (2f58c <cleanup_job.constprop.0+0x1c>)
   2f574:	6820      	ldr	r0, [r4, #0]
   2f576:	b108      	cbz	r0, 2f57c <cleanup_job.constprop.0+0xc>
		cJSON_Delete(job->parsed_payload);
   2f578:	f002 fd7c 	bl	32074 <cJSON_Delete>
	memset(job, 0, sizeof(*job));
   2f57c:	2228      	movs	r2, #40	; 0x28
   2f57e:	2100      	movs	r1, #0
   2f580:	4802      	ldr	r0, [pc, #8]	; (2f58c <cleanup_job.constprop.0+0x1c>)
   2f582:	f012 f83e 	bl	41602 <memset>
	job->info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f586:	2303      	movs	r3, #3
   2f588:	7223      	strb	r3, [r4, #8]
}
   2f58a:	bd10      	pop	{r4, pc}
   2f58c:	2001a19c 	.word	0x2001a19c

0002f590 <http_fota_handler>:
{
   2f590:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(evt != NULL);
   2f592:	4605      	mov	r5, r0
   2f594:	b950      	cbnz	r0, 2f5ac <http_fota_handler+0x1c>
   2f596:	4941      	ldr	r1, [pc, #260]	; (2f69c <http_fota_handler+0x10c>)
   2f598:	4841      	ldr	r0, [pc, #260]	; (2f6a0 <http_fota_handler+0x110>)
   2f59a:	f44f 720a 	mov.w	r2, #552	; 0x228
   2f59e:	f00d fb5c 	bl	3cc5a <assert_print>
   2f5a2:	f44f 710a 	mov.w	r1, #552	; 0x228
   2f5a6:	483d      	ldr	r0, [pc, #244]	; (2f69c <http_fota_handler+0x10c>)
   2f5a8:	f00d fb50 	bl	3cc4c <assert_post_action>
	switch (evt->id) {
   2f5ac:	782b      	ldrb	r3, [r5, #0]
   2f5ae:	4e3d      	ldr	r6, [pc, #244]	; (2f6a4 <http_fota_handler+0x114>)
   2f5b0:	2b04      	cmp	r3, #4
   2f5b2:	d838      	bhi.n	2f626 <http_fota_handler+0x96>
   2f5b4:	e8df f003 	tbb	[pc, r3]
   2f5b8:	341f0359 	.word	0x341f0359
   2f5bc:	3a          	.byte	0x3a
   2f5bd:	00          	.byte	0x00
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   2f5be:	4c3a      	ldr	r4, [pc, #232]	; (2f6a8 <http_fota_handler+0x118>)
		LOG_INF("Download complete");
   2f5c0:	2149      	movs	r1, #73	; 0x49
   2f5c2:	483a      	ldr	r0, [pc, #232]	; (2f6ac <http_fota_handler+0x11c>)
   2f5c4:	f00d fb83 	bl	3ccce <z_log_minimal_printk>
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   2f5c8:	7923      	ldrb	r3, [r4, #4]
   2f5ca:	2b07      	cmp	r3, #7
   2f5cc:	d108      	bne.n	2f5e0 <http_fota_handler+0x50>
   2f5ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2f5d0:	2b64      	cmp	r3, #100	; 0x64
   2f5d2:	d005      	beq.n	2f5e0 <http_fota_handler+0x50>
			current_fota.dl_progress = 100;
   2f5d4:	2364      	movs	r3, #100	; 0x64
			(void)send_job_update(&current_fota);
   2f5d6:	4620      	mov	r0, r4
			current_fota.sent_dl_progress = 100;
   2f5d8:	e9c4 3308 	strd	r3, r3, [r4, #32]
			(void)send_job_update(&current_fota);
   2f5dc:	f7ff fefe 	bl	2f3dc <send_job_update>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2f5e0:	2201      	movs	r2, #1
		save_validate_status(current_fota.info.id,
   2f5e2:	7a21      	ldrb	r1, [r4, #8]
   2f5e4:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2f5e6:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   2f5e8:	f7ff fe40 	bl	2f26c <save_validate_status>
		ret = send_job_update(&current_fota);
   2f5ec:	482e      	ldr	r0, [pc, #184]	; (2f6a8 <http_fota_handler+0x118>)
   2f5ee:	f7ff fef5 	bl	2f3dc <send_job_update>
   2f5f2:	4604      	mov	r4, r0
		break;
   2f5f4:	e00d      	b.n	2f612 <http_fota_handler+0x82>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2f5f6:	2201      	movs	r2, #1
   2f5f8:	4c2b      	ldr	r4, [pc, #172]	; (2f6a8 <http_fota_handler+0x118>)
		save_validate_status(current_fota.info.id,
   2f5fa:	7a21      	ldrb	r1, [r4, #8]
   2f5fc:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2f5fe:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   2f600:	f7ff fe34 	bl	2f26c <save_validate_status>
		ret = send_job_update(&current_fota);
   2f604:	4620      	mov	r0, r4
   2f606:	f7ff fee9 	bl	2f3dc <send_job_update>
   2f60a:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_PENDING, &current_fota);
   2f60c:	2003      	movs	r0, #3
   2f60e:	f7ff fec3 	bl	2f398 <send_event.constprop.0>
	if (ret) {
   2f612:	b144      	cbz	r4, 2f626 <http_fota_handler+0x96>
		LOG_ERR("Failed to send job update to cloud: %d", ret);
   2f614:	4622      	mov	r2, r4
   2f616:	2145      	movs	r1, #69	; 0x45
   2f618:	4825      	ldr	r0, [pc, #148]	; (2f6b0 <http_fota_handler+0x120>)
   2f61a:	f00d fb58 	bl	3ccce <z_log_minimal_printk>
   2f61e:	e002      	b.n	2f626 <http_fota_handler+0x96>
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_DONE, &current_fota);
   2f620:	2004      	movs	r0, #4
   2f622:	f7ff feb9 	bl	2f398 <send_event.constprop.0>
	last_fota_dl_evt = evt->id;
   2f626:	782b      	ldrb	r3, [r5, #0]
   2f628:	7033      	strb	r3, [r6, #0]
}
   2f62a:	bd70      	pop	{r4, r5, r6, pc}
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2f62c:	2202      	movs	r2, #2
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2f62e:	7831      	ldrb	r1, [r6, #0]
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2f630:	4b1d      	ldr	r3, [pc, #116]	; (2f6a8 <http_fota_handler+0x118>)
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2f632:	2903      	cmp	r1, #3
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2f634:	711a      	strb	r2, [r3, #4]
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2f636:	d002      	beq.n	2f63e <http_fota_handler+0xae>
		    evt->cause == FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE) {
   2f638:	7929      	ldrb	r1, [r5, #4]
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2f63a:	4291      	cmp	r1, r2
   2f63c:	d110      	bne.n	2f660 <http_fota_handler+0xd0>
			current_fota.status = NRF_CLOUD_FOTA_REJECTED;
   2f63e:	2206      	movs	r2, #6
   2f640:	711a      	strb	r2, [r3, #4]
		save_validate_status(current_fota.info.id,
   2f642:	2205      	movs	r2, #5
   2f644:	7a19      	ldrb	r1, [r3, #8]
   2f646:	68d8      	ldr	r0, [r3, #12]
   2f648:	f7ff fe10 	bl	2f26c <save_validate_status>
		ret = send_job_update(&current_fota);
   2f64c:	4816      	ldr	r0, [pc, #88]	; (2f6a8 <http_fota_handler+0x118>)
   2f64e:	f7ff fec5 	bl	2f3dc <send_job_update>
   2f652:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERROR, &current_fota);
   2f654:	2002      	movs	r0, #2
   2f656:	f7ff fe9f 	bl	2f398 <send_event.constprop.0>
		cleanup_job(&current_fota);
   2f65a:	f7ff ff89 	bl	2f570 <cleanup_job.constprop.0>
		break;
   2f65e:	e7d8      	b.n	2f612 <http_fota_handler+0x82>
		} else if (evt->cause == FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH) {
   2f660:	2903      	cmp	r1, #3
			current_fota.error = NRF_CLOUD_FOTA_ERROR_MISMATCH;
   2f662:	bf08      	it	eq
   2f664:	2205      	moveq	r2, #5
			current_fota.error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD;
   2f666:	771a      	strb	r2, [r3, #28]
   2f668:	e7eb      	b.n	2f642 <http_fota_handler+0xb2>
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   2f66a:	2307      	movs	r3, #7
   2f66c:	4a0e      	ldr	r2, [pc, #56]	; (2f6a8 <http_fota_handler+0x118>)
		if ((current_fota.sent_dl_progress == 100) &&
   2f66e:	6a51      	ldr	r1, [r2, #36]	; 0x24
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   2f670:	7113      	strb	r3, [r2, #4]
		current_fota.dl_progress = evt->progress;
   2f672:	686b      	ldr	r3, [r5, #4]
		if ((current_fota.sent_dl_progress == 100) &&
   2f674:	2964      	cmp	r1, #100	; 0x64
		current_fota.dl_progress = evt->progress;
   2f676:	6213      	str	r3, [r2, #32]
		if ((current_fota.sent_dl_progress == 100) &&
   2f678:	d108      	bne.n	2f68c <http_fota_handler+0xfc>
   2f67a:	2b64      	cmp	r3, #100	; 0x64
   2f67c:	d0d3      	beq.n	2f626 <http_fota_handler+0x96>
		if (current_fota.sent_dl_progress >
   2f67e:	2b63      	cmp	r3, #99	; 0x63
   2f680:	dd06      	ble.n	2f690 <http_fota_handler+0x100>
		    (((current_fota.dl_progress -
   2f682:	6a51      	ldr	r1, [r2, #36]	; 0x24
   2f684:	1a59      	subs	r1, r3, r1
		if (current_fota.dl_progress != 100 &&
   2f686:	2909      	cmp	r1, #9
   2f688:	ddcd      	ble.n	2f626 <http_fota_handler+0x96>
   2f68a:	e005      	b.n	2f698 <http_fota_handler+0x108>
		if (current_fota.sent_dl_progress >
   2f68c:	428b      	cmp	r3, r1
   2f68e:	da01      	bge.n	2f694 <http_fota_handler+0x104>
			current_fota.sent_dl_progress = 0;
   2f690:	2100      	movs	r1, #0
   2f692:	6251      	str	r1, [r2, #36]	; 0x24
		if (current_fota.dl_progress != 100 &&
   2f694:	2b64      	cmp	r3, #100	; 0x64
   2f696:	d1f4      	bne.n	2f682 <http_fota_handler+0xf2>
		current_fota.sent_dl_progress = current_fota.dl_progress;
   2f698:	6253      	str	r3, [r2, #36]	; 0x24
   2f69a:	e7a7      	b.n	2f5ec <http_fota_handler+0x5c>
   2f69c:	0004a418 	.word	0x0004a418
   2f6a0:	00044263 	.word	0x00044263
   2f6a4:	20014c46 	.word	0x20014c46
   2f6a8:	2001a19c 	.word	0x2001a19c
   2f6ac:	0004a52a 	.word	0x0004a52a
   2f6b0:	0004a541 	.word	0x0004a541

0002f6b4 <nrf_cloud_fota_init>:
{
   2f6b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool reboot_required = false;
   2f6b6:	2400      	movs	r4, #0
   2f6b8:	f88d 4007 	strb.w	r4, [sp, #7]
	if (cb == NULL) {
   2f6bc:	b940      	cbnz	r0, 2f6d0 <nrf_cloud_fota_init+0x1c>
		LOG_ERR("Invalid parameter");
   2f6be:	2145      	movs	r1, #69	; 0x45
   2f6c0:	482b      	ldr	r0, [pc, #172]	; (2f770 <nrf_cloud_fota_init+0xbc>)
   2f6c2:	f00d fb04 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   2f6c6:	f06f 0415 	mvn.w	r4, #21
}
   2f6ca:	4620      	mov	r0, r4
   2f6cc:	b003      	add	sp, #12
   2f6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event_cb = cb;
   2f6d0:	4b28      	ldr	r3, [pc, #160]	; (2f774 <nrf_cloud_fota_init+0xc0>)
	if (initialized) {
   2f6d2:	4f29      	ldr	r7, [pc, #164]	; (2f778 <nrf_cloud_fota_init+0xc4>)
	event_cb = cb;
   2f6d4:	6018      	str	r0, [r3, #0]
	if (initialized) {
   2f6d6:	783b      	ldrb	r3, [r7, #0]
   2f6d8:	2b00      	cmp	r3, #0
   2f6da:	d1f6      	bne.n	2f6ca <nrf_cloud_fota_init+0x16>
	if (!fota_dl_initialized) {
   2f6dc:	4d27      	ldr	r5, [pc, #156]	; (2f77c <nrf_cloud_fota_init+0xc8>)
   2f6de:	782b      	ldrb	r3, [r5, #0]
   2f6e0:	b963      	cbnz	r3, 2f6fc <nrf_cloud_fota_init+0x48>
		ret = fota_download_init(http_fota_handler);
   2f6e2:	4827      	ldr	r0, [pc, #156]	; (2f780 <nrf_cloud_fota_init+0xcc>)
   2f6e4:	f001 fba6 	bl	30e34 <fota_download_init>
		if (ret != 0) {
   2f6e8:	4604      	mov	r4, r0
   2f6ea:	b128      	cbz	r0, 2f6f8 <nrf_cloud_fota_init+0x44>
			LOG_ERR("fota_download_init error: %d", ret);
   2f6ec:	2145      	movs	r1, #69	; 0x45
   2f6ee:	4602      	mov	r2, r0
   2f6f0:	4824      	ldr	r0, [pc, #144]	; (2f784 <nrf_cloud_fota_init+0xd0>)
		LOG_ERR("Cannot load settings: %d", ret);
   2f6f2:	f00d faec 	bl	3ccce <z_log_minimal_printk>
		return ret;
   2f6f6:	e7e8      	b.n	2f6ca <nrf_cloud_fota_init+0x16>
		fota_dl_initialized = true;
   2f6f8:	2301      	movs	r3, #1
   2f6fa:	702b      	strb	r3, [r5, #0]
	ret = settings_load_subtree(settings_handler_fota.name);
   2f6fc:	4822      	ldr	r0, [pc, #136]	; (2f788 <nrf_cloud_fota_init+0xd4>)
   2f6fe:	f7f2 fcc3 	bl	22088 <settings_load_subtree>
	if (ret) {
   2f702:	4604      	mov	r4, r0
   2f704:	b118      	cbz	r0, 2f70e <nrf_cloud_fota_init+0x5a>
		LOG_ERR("Cannot load settings: %d", ret);
   2f706:	4602      	mov	r2, r0
   2f708:	2145      	movs	r1, #69	; 0x45
   2f70a:	4820      	ldr	r0, [pc, #128]	; (2f78c <nrf_cloud_fota_init+0xd8>)
   2f70c:	e7f1      	b.n	2f6f2 <nrf_cloud_fota_init+0x3e>
	ret = nrf_cloud_pending_fota_job_process(&saved_job, &reboot_required);
   2f70e:	4e20      	ldr	r6, [pc, #128]	; (2f790 <nrf_cloud_fota_init+0xdc>)
   2f710:	f10d 0107 	add.w	r1, sp, #7
   2f714:	4630      	mov	r0, r6
   2f716:	f000 fabd 	bl	2fc94 <nrf_cloud_pending_fota_job_process>
	if (ret == 0) {
   2f71a:	4605      	mov	r5, r0
   2f71c:	b970      	cbnz	r0, 2f73c <nrf_cloud_fota_init+0x88>
		save_validate_status(saved_job.id, saved_job.type, saved_job.validate);
   2f71e:	7832      	ldrb	r2, [r6, #0]
   2f720:	7871      	ldrb	r1, [r6, #1]
   2f722:	1cb0      	adds	r0, r6, #2
   2f724:	f7ff fda2 	bl	2f26c <save_validate_status>
		if (reboot_required) {
   2f728:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2f72c:	b1a3      	cbz	r3, 2f758 <nrf_cloud_fota_init+0xa4>
			LOG_INF("Rebooting to complete FOTA update...");
   2f72e:	4819      	ldr	r0, [pc, #100]	; (2f794 <nrf_cloud_fota_init+0xe0>)
   2f730:	2149      	movs	r1, #73	; 0x49
   2f732:	f00d facc 	bl	3ccce <z_log_minimal_printk>
			sys_reboot(SYS_REBOOT_COLD);
   2f736:	2001      	movs	r0, #1
   2f738:	f7f1 ff80 	bl	2163c <sys_reboot>
	} else if (ret == -ENODEV) {
   2f73c:	f110 0f13 	cmn.w	r0, #19
   2f740:	d10c      	bne.n	2f75c <nrf_cloud_fota_init+0xa8>
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM &&
   2f742:	7875      	ldrb	r5, [r6, #1]
   2f744:	2d01      	cmp	r5, #1
   2f746:	d10f      	bne.n	2f768 <nrf_cloud_fota_init+0xb4>
		     saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_FAIL ||
   2f748:	7833      	ldrb	r3, [r6, #0]
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM &&
   2f74a:	3b02      	subs	r3, #2
   2f74c:	2b02      	cmp	r3, #2
   2f74e:	d80b      	bhi.n	2f768 <nrf_cloud_fota_init+0xb4>
			LOG_INF("FOTA updated modem");
   2f750:	2149      	movs	r1, #73	; 0x49
   2f752:	4811      	ldr	r0, [pc, #68]	; (2f798 <nrf_cloud_fota_init+0xe4>)
   2f754:	f00d fabb 	bl	3ccce <z_log_minimal_printk>
		ret = 1;
   2f758:	2401      	movs	r4, #1
   2f75a:	e005      	b.n	2f768 <nrf_cloud_fota_init+0xb4>
		LOG_ERR("Failed to process pending FOTA job, error: %d", ret);
   2f75c:	4602      	mov	r2, r0
   2f75e:	2145      	movs	r1, #69	; 0x45
   2f760:	480e      	ldr	r0, [pc, #56]	; (2f79c <nrf_cloud_fota_init+0xe8>)
   2f762:	f00d fab4 	bl	3ccce <z_log_minimal_printk>
   2f766:	462c      	mov	r4, r5
	initialized = true;
   2f768:	2301      	movs	r3, #1
   2f76a:	703b      	strb	r3, [r7, #0]
	return ret;
   2f76c:	e7ad      	b.n	2f6ca <nrf_cloud_fota_init+0x16>
   2f76e:	bf00      	nop
   2f770:	0004a56d 	.word	0x0004a56d
   2f774:	2001a1c4 	.word	0x2001a1c4
   2f778:	2001d2d1 	.word	0x2001d2d1
   2f77c:	2001d2d0 	.word	0x2001d2d0
   2f780:	0002f591 	.word	0x0002f591
   2f784:	0004a584 	.word	0x0004a584
   2f788:	0004a5a6 	.word	0x0004a5a6
   2f78c:	0004894a 	.word	0x0004894a
   2f790:	20014c47 	.word	0x20014c47
   2f794:	0004a5b5 	.word	0x0004a5b5
   2f798:	0004a5df 	.word	0x0004a5df
   2f79c:	0004a5f7 	.word	0x0004a5f7

0002f7a0 <nrf_cloud_fota_endpoint_set>:
{
   2f7a0:	b570      	push	{r4, r5, r6, lr}
   2f7a2:	460e      	mov	r6, r1
   2f7a4:	4615      	mov	r5, r2
	if (client == NULL || endpoint == NULL ||
   2f7a6:	b328      	cbz	r0, 2f7f4 <nrf_cloud_fota_endpoint_set+0x54>
   2f7a8:	b322      	cbz	r2, 2f7f4 <nrf_cloud_fota_endpoint_set+0x54>
   2f7aa:	6813      	ldr	r3, [r2, #0]
   2f7ac:	b313      	cbz	r3, 2f7f4 <nrf_cloud_fota_endpoint_set+0x54>
	    endpoint->utf8 == NULL || endpoint->size == 0 ||
   2f7ae:	6853      	ldr	r3, [r2, #4]
   2f7b0:	b303      	cbz	r3, 2f7f4 <nrf_cloud_fota_endpoint_set+0x54>
   2f7b2:	b1f9      	cbz	r1, 2f7f4 <nrf_cloud_fota_endpoint_set+0x54>
	client_mqtt = client;
   2f7b4:	4b11      	ldr	r3, [pc, #68]	; (2f7fc <nrf_cloud_fota_endpoint_set+0x5c>)
   2f7b6:	6018      	str	r0, [r3, #0]
	reset_topics();
   2f7b8:	f7ff fda6 	bl	2f308 <reset_topics>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_RCV,
   2f7bc:	4629      	mov	r1, r5
   2f7be:	4630      	mov	r0, r6
   2f7c0:	4b0f      	ldr	r3, [pc, #60]	; (2f800 <nrf_cloud_fota_endpoint_set+0x60>)
   2f7c2:	4a10      	ldr	r2, [pc, #64]	; (2f804 <nrf_cloud_fota_endpoint_set+0x64>)
   2f7c4:	f7ff fdb2 	bl	2f32c <build_topic>
	if (ret) {
   2f7c8:	4604      	mov	r4, r0
   2f7ca:	b978      	cbnz	r0, 2f7ec <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_UPDATE,
   2f7cc:	4629      	mov	r1, r5
   2f7ce:	4630      	mov	r0, r6
   2f7d0:	4b0d      	ldr	r3, [pc, #52]	; (2f808 <nrf_cloud_fota_endpoint_set+0x68>)
   2f7d2:	4a0e      	ldr	r2, [pc, #56]	; (2f80c <nrf_cloud_fota_endpoint_set+0x6c>)
   2f7d4:	f7ff fdaa 	bl	2f32c <build_topic>
	if (ret) {
   2f7d8:	4604      	mov	r4, r0
   2f7da:	b938      	cbnz	r0, 2f7ec <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_REQ,
   2f7dc:	4629      	mov	r1, r5
   2f7de:	4630      	mov	r0, r6
   2f7e0:	4b0b      	ldr	r3, [pc, #44]	; (2f810 <nrf_cloud_fota_endpoint_set+0x70>)
   2f7e2:	4a0c      	ldr	r2, [pc, #48]	; (2f814 <nrf_cloud_fota_endpoint_set+0x74>)
   2f7e4:	f7ff fda2 	bl	2f32c <build_topic>
	if (ret) {
   2f7e8:	4604      	mov	r4, r0
   2f7ea:	b108      	cbz	r0, 2f7f0 <nrf_cloud_fota_endpoint_set+0x50>
	reset_topics();
   2f7ec:	f7ff fd8c 	bl	2f308 <reset_topics>
}
   2f7f0:	4620      	mov	r0, r4
   2f7f2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2f7f4:	f06f 0415 	mvn.w	r4, #21
   2f7f8:	e7fa      	b.n	2f7f0 <nrf_cloud_fota_endpoint_set+0x50>
   2f7fa:	bf00      	nop
   2f7fc:	2001a198 	.word	0x2001a198
   2f800:	200146c8 	.word	0x200146c8
   2f804:	0004a62a 	.word	0x0004a62a
   2f808:	200146e0 	.word	0x200146e0
   2f80c:	0004a634 	.word	0x0004a634
   2f810:	200146d4 	.word	0x200146d4
   2f814:	0004a641 	.word	0x0004a641

0002f818 <nrf_cloud_fota_endpoint_set_and_report>:
{
   2f818:	b510      	push	{r4, lr}
	int ret = nrf_cloud_fota_endpoint_set(client, client_id, endpoint);
   2f81a:	f7ff ffc1 	bl	2f7a0 <nrf_cloud_fota_endpoint_set>
	if (ret) {
   2f81e:	4604      	mov	r4, r0
   2f820:	b130      	cbz	r0, 2f830 <nrf_cloud_fota_endpoint_set_and_report+0x18>
		LOG_ERR("Failed to set FOTA endpoint: %d", ret);
   2f822:	4602      	mov	r2, r0
   2f824:	2145      	movs	r1, #69	; 0x45
   2f826:	4805      	ldr	r0, [pc, #20]	; (2f83c <nrf_cloud_fota_endpoint_set_and_report+0x24>)
   2f828:	f00d fa51 	bl	3ccce <z_log_minimal_printk>
}
   2f82c:	4620      	mov	r0, r4
   2f82e:	bd10      	pop	{r4, pc}
	ret = report_validated_job_status();
   2f830:	f7ff fe54 	bl	2f4dc <report_validated_job_status>
	if (ret > 0) {
   2f834:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   2f838:	e7f8      	b.n	2f82c <nrf_cloud_fota_endpoint_set_and_report+0x14>
   2f83a:	bf00      	nop
   2f83c:	0004a64b 	.word	0x0004a64b

0002f840 <nrf_cloud_fota_endpoint_clear>:
	client_mqtt = NULL;
   2f840:	2200      	movs	r2, #0
   2f842:	4b02      	ldr	r3, [pc, #8]	; (2f84c <nrf_cloud_fota_endpoint_clear+0xc>)
   2f844:	601a      	str	r2, [r3, #0]
	reset_topics();
   2f846:	f7ff bd5f 	b.w	2f308 <reset_topics>
   2f84a:	bf00      	nop
   2f84c:	2001a198 	.word	0x2001a198

0002f850 <nrf_cloud_fota_subscribe>:
{
   2f850:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   2f852:	466b      	mov	r3, sp
   2f854:	4a0a      	ldr	r2, [pc, #40]	; (2f880 <nrf_cloud_fota_subscribe+0x30>)
   2f856:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2f85a:	4a0a      	ldr	r2, [pc, #40]	; (2f884 <nrf_cloud_fota_subscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   2f85c:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2f860:	6851      	ldr	r1, [r2, #4]
   2f862:	b149      	cbz	r1, 2f878 <nrf_cloud_fota_subscribe+0x28>
   2f864:	6812      	ldr	r2, [r2, #0]
   2f866:	b13a      	cbz	r2, 2f878 <nrf_cloud_fota_subscribe+0x28>
	return mqtt_subscribe(client_mqtt, &sub_list);
   2f868:	4619      	mov	r1, r3
   2f86a:	4b07      	ldr	r3, [pc, #28]	; (2f888 <nrf_cloud_fota_subscribe+0x38>)
   2f86c:	6818      	ldr	r0, [r3, #0]
   2f86e:	f00e fe70 	bl	3e552 <mqtt_subscribe>
}
   2f872:	b003      	add	sp, #12
   2f874:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   2f878:	f06f 000d 	mvn.w	r0, #13
   2f87c:	e7f9      	b.n	2f872 <nrf_cloud_fota_subscribe+0x22>
   2f87e:	bf00      	nop
   2f880:	000429fc 	.word	0x000429fc
   2f884:	200146c8 	.word	0x200146c8
   2f888:	2001a198 	.word	0x2001a198

0002f88c <nrf_cloud_fota_unsubscribe>:
{
   2f88c:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   2f88e:	466b      	mov	r3, sp
   2f890:	4a0a      	ldr	r2, [pc, #40]	; (2f8bc <nrf_cloud_fota_unsubscribe+0x30>)
   2f892:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2f896:	4a0a      	ldr	r2, [pc, #40]	; (2f8c0 <nrf_cloud_fota_unsubscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   2f898:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2f89c:	6851      	ldr	r1, [r2, #4]
   2f89e:	b149      	cbz	r1, 2f8b4 <nrf_cloud_fota_unsubscribe+0x28>
   2f8a0:	6812      	ldr	r2, [r2, #0]
   2f8a2:	b13a      	cbz	r2, 2f8b4 <nrf_cloud_fota_unsubscribe+0x28>
	return mqtt_unsubscribe(client_mqtt, &sub_list);
   2f8a4:	4619      	mov	r1, r3
   2f8a6:	4b07      	ldr	r3, [pc, #28]	; (2f8c4 <nrf_cloud_fota_unsubscribe+0x38>)
   2f8a8:	6818      	ldr	r0, [r3, #0]
   2f8aa:	f00e fe78 	bl	3e59e <mqtt_unsubscribe>
}
   2f8ae:	b003      	add	sp, #12
   2f8b0:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   2f8b4:	f06f 000d 	mvn.w	r0, #13
   2f8b8:	e7f9      	b.n	2f8ae <nrf_cloud_fota_unsubscribe+0x22>
   2f8ba:	bf00      	nop
   2f8bc:	00042a04 	.word	0x00042a04
   2f8c0:	200146c8 	.word	0x200146c8
   2f8c4:	2001a198 	.word	0x2001a198

0002f8c8 <nrf_cloud_fota_uninit>:
	return current_fota.parsed_payload != NULL;
   2f8c8:	4b09      	ldr	r3, [pc, #36]	; (2f8f0 <nrf_cloud_fota_uninit+0x28>)
{
   2f8ca:	b510      	push	{r4, lr}
	if (nrf_cloud_fota_is_active()) {
   2f8cc:	681c      	ldr	r4, [r3, #0]
   2f8ce:	b95c      	cbnz	r4, 2f8e8 <nrf_cloud_fota_uninit+0x20>
	event_cb = NULL;
   2f8d0:	4b08      	ldr	r3, [pc, #32]	; (2f8f4 <nrf_cloud_fota_uninit+0x2c>)
   2f8d2:	601c      	str	r4, [r3, #0]
	initialized = false;
   2f8d4:	4b08      	ldr	r3, [pc, #32]	; (2f8f8 <nrf_cloud_fota_uninit+0x30>)
   2f8d6:	701c      	strb	r4, [r3, #0]
	(void)nrf_cloud_fota_unsubscribe();
   2f8d8:	f7ff ffd8 	bl	2f88c <nrf_cloud_fota_unsubscribe>
	reset_topics();
   2f8dc:	f7ff fd14 	bl	2f308 <reset_topics>
	cleanup_job(&current_fota);
   2f8e0:	f7ff fe46 	bl	2f570 <cleanup_job.constprop.0>
	return 0;
   2f8e4:	4620      	mov	r0, r4
}
   2f8e6:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2f8e8:	f06f 000f 	mvn.w	r0, #15
   2f8ec:	e7fb      	b.n	2f8e6 <nrf_cloud_fota_uninit+0x1e>
   2f8ee:	bf00      	nop
   2f8f0:	2001a19c 	.word	0x2001a19c
   2f8f4:	2001a1c4 	.word	0x2001a1c4
   2f8f8:	2001d2d1 	.word	0x2001d2d1

0002f8fc <nrf_cloud_fota_update_check>:

int nrf_cloud_fota_update_check(void)
{
   2f8fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (client_mqtt == NULL) {
   2f8fe:	4b0e      	ldr	r3, [pc, #56]	; (2f938 <nrf_cloud_fota_update_check+0x3c>)
   2f900:	681b      	ldr	r3, [r3, #0]
   2f902:	b193      	cbz	r3, 2f92a <nrf_cloud_fota_update_check+0x2e>
		return -ENXIO;
	} else if (topic_req.topic.utf8 == NULL) {
   2f904:	4a0d      	ldr	r2, [pc, #52]	; (2f93c <nrf_cloud_fota_update_check+0x40>)
   2f906:	6813      	ldr	r3, [r2, #0]
   2f908:	b193      	cbz	r3, 2f930 <nrf_cloud_fota_update_check+0x34>
		.message_id = NCT_MSG_ID_FOTA_REQUEST,
		.dup_flag = 0,
		.retain_flag = 0,
	};

	param.message.topic = topic_req;
   2f90a:	ca07      	ldmia	r2, {r0, r1, r2}
   2f90c:	466b      	mov	r3, sp
   2f90e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   2f912:	4a0b      	ldr	r2, [pc, #44]	; (2f940 <nrf_cloud_fota_update_check+0x44>)
	struct mqtt_publish_param param = {
   2f914:	2104      	movs	r1, #4
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   2f916:	9203      	str	r2, [sp, #12]
	struct mqtt_publish_param param = {
   2f918:	22c9      	movs	r2, #201	; 0xc9
	param.message.payload.len = sizeof(JOB_REQUEST_LATEST_PAYLOAD)-1;

	return publish(&param);
   2f91a:	4618      	mov	r0, r3
	struct mqtt_publish_param param = {
   2f91c:	e9cd 1204 	strd	r1, r2, [sp, #16]
	return publish(&param);
   2f920:	f7ff fc90 	bl	2f244 <publish>
}
   2f924:	b007      	add	sp, #28
   2f926:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENXIO;
   2f92a:	f06f 0005 	mvn.w	r0, #5
   2f92e:	e7f9      	b.n	2f924 <nrf_cloud_fota_update_check+0x28>
		return -EHOSTUNREACH;
   2f930:	f06f 0075 	mvn.w	r0, #117	; 0x75
   2f934:	e7f6      	b.n	2f924 <nrf_cloud_fota_update_check+0x28>
   2f936:	bf00      	nop
   2f938:	2001a198 	.word	0x2001a198
   2f93c:	200146d4 	.word	0x200146d4
   2f940:	0004a670 	.word	0x0004a670

0002f944 <nrf_cloud_fota_mqtt_evt_handler>:

	return 0;
}

int nrf_cloud_fota_mqtt_evt_handler(const struct mqtt_evt *evt)
{
   2f944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2f948:	4ba4      	ldr	r3, [pc, #656]	; (2fbdc <nrf_cloud_fota_mqtt_evt_handler+0x298>)
{
   2f94a:	4606      	mov	r6, r0
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2f94c:	6818      	ldr	r0, [r3, #0]
{
   2f94e:	b085      	sub	sp, #20
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2f950:	2800      	cmp	r0, #0
   2f952:	f000 8141 	beq.w	2fbd8 <nrf_cloud_fota_mqtt_evt_handler+0x294>
   2f956:	685b      	ldr	r3, [r3, #4]
   2f958:	2b00      	cmp	r3, #0
   2f95a:	f000 813d 	beq.w	2fbd8 <nrf_cloud_fota_mqtt_evt_handler+0x294>
	    sub_topics[SUB_TOPIC_IDX_RCV].topic.size == 0) {
		/* Ignore MQTT until a topic has been set */
		return 1;
	}

	switch (evt->type) {
   2f95e:	f896 9000 	ldrb.w	r9, [r6]
   2f962:	f1b9 0f09 	cmp.w	r9, #9
   2f966:	f200 80e4 	bhi.w	2fb32 <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
   2f96a:	e8df f019 	tbh	[pc, r9, lsl #1]
   2f96e:	0135      	.short	0x0135
   2f970:	000a0135 	.word	0x000a0135
   2f974:	01350114 	.word	0x01350114
   2f978:	01350135 	.word	0x01350135
   2f97c:	010f0109 	.word	0x010f0109
   2f980:	0135      	.short	0x0135
	struct mqtt_puback_param ack = {
   2f982:	8b33      	ldrh	r3, [r6, #24]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   2f984:	6871      	ldr	r1, [r6, #4]
	struct mqtt_puback_param ack = {
   2f986:	f8ad 300c 	strh.w	r3, [sp, #12]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   2f98a:	f012 f854 	bl	41a36 <strstr>
   2f98e:	2800      	cmp	r0, #0
   2f990:	f000 8122 	beq.w	2fbd8 <nrf_cloud_fota_mqtt_evt_handler+0x294>
	payload = nrf_cloud_calloc(p->message.payload.len + 1, 1);
   2f994:	2101      	movs	r1, #1
   2f996:	6970      	ldr	r0, [r6, #20]
   2f998:	4408      	add	r0, r1
   2f99a:	f011 fd8c 	bl	414b6 <k_calloc>
	if (!payload) {
   2f99e:	4680      	mov	r8, r0
   2f9a0:	bb38      	cbnz	r0, 2f9f2 <nrf_cloud_fota_mqtt_evt_handler+0xae>
		LOG_ERR("Unable to allocate memory for job");
   2f9a2:	2145      	movs	r1, #69	; 0x45
   2f9a4:	488e      	ldr	r0, [pc, #568]	; (2fbe0 <nrf_cloud_fota_mqtt_evt_handler+0x29c>)
   2f9a6:	f00d f992 	bl	3ccce <z_log_minimal_printk>
	bool skip = false;
   2f9aa:	4647      	mov	r7, r8
		ret = -ENOMEM;
   2f9ac:	f06f 040b 	mvn.w	r4, #11
	if (p->message.topic.qos == MQTT_QOS_0_AT_MOST_ONCE) {
   2f9b0:	7b33      	ldrb	r3, [r6, #12]
   2f9b2:	b173      	cbz	r3, 2f9d2 <nrf_cloud_fota_mqtt_evt_handler+0x8e>
		int ack_res = mqtt_publish_qos1_ack(client_mqtt, &ack);
   2f9b4:	4b8b      	ldr	r3, [pc, #556]	; (2fbe4 <nrf_cloud_fota_mqtt_evt_handler+0x2a0>)
   2f9b6:	a903      	add	r1, sp, #12
   2f9b8:	6818      	ldr	r0, [r3, #0]
   2f9ba:	f00e fd7c 	bl	3e4b6 <mqtt_publish_qos1_ack>
		if (ack_res) {
   2f9be:	4605      	mov	r5, r0
   2f9c0:	b138      	cbz	r0, 2f9d2 <nrf_cloud_fota_mqtt_evt_handler+0x8e>
			LOG_ERR("MQTT ACK failed: %d", ack_res);
   2f9c2:	4602      	mov	r2, r0
   2f9c4:	2145      	movs	r1, #69	; 0x45
   2f9c6:	4888      	ldr	r0, [pc, #544]	; (2fbe8 <nrf_cloud_fota_mqtt_evt_handler+0x2a4>)
   2f9c8:	f00d f981 	bl	3ccce <z_log_minimal_printk>
			if (!ret) {
   2f9cc:	2c00      	cmp	r4, #0
   2f9ce:	bf08      	it	eq
   2f9d0:	462c      	moveq	r4, r5
	if (skip || job_info->type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f9d2:	b927      	cbnz	r7, 2f9de <nrf_cloud_fota_mqtt_evt_handler+0x9a>
   2f9d4:	4d85      	ldr	r5, [pc, #532]	; (2fbec <nrf_cloud_fota_mqtt_evt_handler+0x2a8>)
   2f9d6:	7a2a      	ldrb	r2, [r5, #8]
   2f9d8:	2a03      	cmp	r2, #3
   2f9da:	f040 8095 	bne.w	2fb08 <nrf_cloud_fota_mqtt_evt_handler+0x1c4>
		if (payload_array) {
   2f9de:	f1b8 0f00 	cmp.w	r8, #0
   2f9e2:	d002      	beq.n	2f9ea <nrf_cloud_fota_mqtt_evt_handler+0xa6>
			cJSON_Delete(payload_array);
   2f9e4:	4640      	mov	r0, r8
   2f9e6:	f002 fb45 	bl	32074 <cJSON_Delete>
		return 1;
	break;
	}

	return 0;
}
   2f9ea:	4620      	mov	r0, r4
   2f9ec:	b005      	add	sp, #20
   2f9ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = mqtt_readall_publish_payload(client_mqtt, payload,
   2f9f2:	4b7c      	ldr	r3, [pc, #496]	; (2fbe4 <nrf_cloud_fota_mqtt_evt_handler+0x2a0>)
   2f9f4:	4601      	mov	r1, r0
   2f9f6:	6972      	ldr	r2, [r6, #20]
   2f9f8:	6818      	ldr	r0, [r3, #0]
   2f9fa:	f00e fe82 	bl	3e702 <mqtt_readall_publish_payload>
	if (ret) {
   2f9fe:	4604      	mov	r4, r0
   2fa00:	b138      	cbz	r0, 2fa12 <nrf_cloud_fota_mqtt_evt_handler+0xce>
		LOG_ERR("Error reading MQTT payload: %d", ret);
   2fa02:	4602      	mov	r2, r0
   2fa04:	2145      	movs	r1, #69	; 0x45
   2fa06:	487a      	ldr	r0, [pc, #488]	; (2fbf0 <nrf_cloud_fota_mqtt_evt_handler+0x2ac>)
   2fa08:	f00d f961 	bl	3ccce <z_log_minimal_printk>
		cJSON_Delete(array);
   2fa0c:	2500      	movs	r5, #0
	bool skip = false;
   2fa0e:	462f      	mov	r7, r5
   2fa10:	e06a      	b.n	2fae8 <nrf_cloud_fota_mqtt_evt_handler+0x1a4>
	return current_fota.parsed_payload != NULL;
   2fa12:	4f76      	ldr	r7, [pc, #472]	; (2fbec <nrf_cloud_fota_mqtt_evt_handler+0x2a8>)
   2fa14:	683b      	ldr	r3, [r7, #0]
	if (nrf_cloud_fota_is_active() && !ble_id) {
   2fa16:	b133      	cbz	r3, 2fa26 <nrf_cloud_fota_mqtt_evt_handler+0xe2>
		LOG_INF("Job in progress... skipping");
   2fa18:	2149      	movs	r1, #73	; 0x49
   2fa1a:	4876      	ldr	r0, [pc, #472]	; (2fbf4 <nrf_cloud_fota_mqtt_evt_handler+0x2b0>)
   2fa1c:	f00d f957 	bl	3ccce <z_log_minimal_printk>
	cJSON *payload_array = NULL;
   2fa20:	4625      	mov	r5, r4
		skip = true;
   2fa22:	2701      	movs	r7, #1
   2fa24:	e060      	b.n	2fae8 <nrf_cloud_fota_mqtt_evt_handler+0x1a4>
	cJSON *array = cJSON_Parse(payload_in);
   2fa26:	4640      	mov	r0, r8
   2fa28:	f010 f96e 	bl	3fd08 <cJSON_Parse>
	if (!array || !cJSON_IsArray(array)) {
   2fa2c:	4605      	mov	r5, r0
   2fa2e:	b990      	cbnz	r0, 2fa56 <nrf_cloud_fota_mqtt_evt_handler+0x112>
		LOG_ERR("Invalid JSON array");
   2fa30:	2145      	movs	r1, #69	; 0x45
   2fa32:	4871      	ldr	r0, [pc, #452]	; (2fbf8 <nrf_cloud_fota_mqtt_evt_handler+0x2b4>)
   2fa34:	f00d f94b 	bl	3ccce <z_log_minimal_printk>
		err = -EINVAL;
   2fa38:	f06f 0415 	mvn.w	r4, #21
	memset(job_info, 0, sizeof(*job_info));
   2fa3c:	2214      	movs	r2, #20
   2fa3e:	2100      	movs	r1, #0
   2fa40:	486e      	ldr	r0, [pc, #440]	; (2fbfc <nrf_cloud_fota_mqtt_evt_handler+0x2b8>)
   2fa42:	f011 fdde 	bl	41602 <memset>
	job_info->type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2fa46:	2303      	movs	r3, #3
   2fa48:	723b      	strb	r3, [r7, #8]
	if (array) {
   2fa4a:	2d00      	cmp	r5, #0
   2fa4c:	d0df      	beq.n	2fa0e <nrf_cloud_fota_mqtt_evt_handler+0xca>
		cJSON_Delete(array);
   2fa4e:	4628      	mov	r0, r5
   2fa50:	f002 fb10 	bl	32074 <cJSON_Delete>
   2fa54:	e7da      	b.n	2fa0c <nrf_cloud_fota_mqtt_evt_handler+0xc8>
	if (!array || !cJSON_IsArray(array)) {
   2fa56:	f010 fa87 	bl	3ff68 <cJSON_IsArray>
   2fa5a:	2800      	cmp	r0, #0
   2fa5c:	d0e8      	beq.n	2fa30 <nrf_cloud_fota_mqtt_evt_handler+0xec>
	temp = cJSON_PrintUnformatted(array);
   2fa5e:	4628      	mov	r0, r5
   2fa60:	f010 f956 	bl	3fd10 <cJSON_PrintUnformatted>
	if (temp) {
   2fa64:	b108      	cbz	r0, 2fa6a <nrf_cloud_fota_mqtt_evt_handler+0x126>
		cJSON_FreeString(temp);
   2fa66:	f010 fa8a 	bl	3ff7e <cJSON_FreeString>
	if (get_string_from_array(array, RCV_ITEM_IDX_JOB_ID - offset,
   2fa6a:	2100      	movs	r1, #0
   2fa6c:	4628      	mov	r0, r5
   2fa6e:	4a64      	ldr	r2, [pc, #400]	; (2fc00 <nrf_cloud_fota_mqtt_evt_handler+0x2bc>)
   2fa70:	f7fb f9e0 	bl	2ae34 <get_string_from_array>
   2fa74:	b130      	cbz	r0, 2fa84 <nrf_cloud_fota_mqtt_evt_handler+0x140>
		LOG_ERR("Error parsing job info");
   2fa76:	2145      	movs	r1, #69	; 0x45
   2fa78:	4862      	ldr	r0, [pc, #392]	; (2fc04 <nrf_cloud_fota_mqtt_evt_handler+0x2c0>)
   2fa7a:	f00d f928 	bl	3ccce <z_log_minimal_printk>
	int err = -ENOMSG;
   2fa7e:	f06f 0422 	mvn.w	r4, #34	; 0x22
		goto cleanup;
   2fa82:	e7db      	b.n	2fa3c <nrf_cloud_fota_mqtt_evt_handler+0xf8>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_HOST - offset,
   2fa84:	2103      	movs	r1, #3
   2fa86:	4628      	mov	r0, r5
   2fa88:	4a5f      	ldr	r2, [pc, #380]	; (2fc08 <nrf_cloud_fota_mqtt_evt_handler+0x2c4>)
   2fa8a:	f7fb f9d3 	bl	2ae34 <get_string_from_array>
				  &job_info->id) ||
   2fa8e:	2800      	cmp	r0, #0
   2fa90:	d1f1      	bne.n	2fa76 <nrf_cloud_fota_mqtt_evt_handler+0x132>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_PATH - offset,
   2fa92:	2104      	movs	r1, #4
   2fa94:	4628      	mov	r0, r5
   2fa96:	4a5d      	ldr	r2, [pc, #372]	; (2fc0c <nrf_cloud_fota_mqtt_evt_handler+0x2c8>)
   2fa98:	f7fb f9cc 	bl	2ae34 <get_string_from_array>
				  &job_info->host) ||
   2fa9c:	2800      	cmp	r0, #0
   2fa9e:	d1ea      	bne.n	2fa76 <nrf_cloud_fota_mqtt_evt_handler+0x132>
	    get_number_from_array(array, RCV_ITEM_IDX_FW_TYPE - offset,
   2faa0:	2101      	movs	r1, #1
   2faa2:	4628      	mov	r0, r5
   2faa4:	4a55      	ldr	r2, [pc, #340]	; (2fbfc <nrf_cloud_fota_mqtt_evt_handler+0x2b8>)
   2faa6:	f00f ff6f 	bl	3f988 <get_number_from_array>
				  &job_info->path) ||
   2faaa:	2800      	cmp	r0, #0
   2faac:	d1e3      	bne.n	2fa76 <nrf_cloud_fota_mqtt_evt_handler+0x132>
	    get_number_from_array(array, RCV_ITEM_IDX_FILE_SIZE - offset,
   2faae:	2102      	movs	r1, #2
   2fab0:	4628      	mov	r0, r5
   2fab2:	4a57      	ldr	r2, [pc, #348]	; (2fc10 <nrf_cloud_fota_mqtt_evt_handler+0x2cc>)
   2fab4:	f00f ff68 	bl	3f988 <get_number_from_array>
				  (int *)&job_info->type) ||
   2fab8:	4604      	mov	r4, r0
   2faba:	2800      	cmp	r0, #0
   2fabc:	d1db      	bne.n	2fa76 <nrf_cloud_fota_mqtt_evt_handler+0x132>
	job_id_len = strlen(job_info->id);
   2fabe:	68f8      	ldr	r0, [r7, #12]
   2fac0:	f7ed fbbf 	bl	1d242 <strlen>
	if (job_id_len > (NRF_CLOUD_FOTA_JOB_ID_SIZE - 1)) {
   2fac4:	2824      	cmp	r0, #36	; 0x24
	job_id_len = strlen(job_info->id);
   2fac6:	4602      	mov	r2, r0
	if (job_id_len > (NRF_CLOUD_FOTA_JOB_ID_SIZE - 1)) {
   2fac8:	d905      	bls.n	2fad6 <nrf_cloud_fota_mqtt_evt_handler+0x192>
		LOG_ERR("Job ID length: %d, exceeds allowed length: %d",
   2faca:	2324      	movs	r3, #36	; 0x24
   2facc:	2145      	movs	r1, #69	; 0x45
   2face:	4851      	ldr	r0, [pc, #324]	; (2fc14 <nrf_cloud_fota_mqtt_evt_handler+0x2d0>)
   2fad0:	f00d f8fd 	bl	3ccce <z_log_minimal_printk>
		goto cleanup;
   2fad4:	e7d3      	b.n	2fa7e <nrf_cloud_fota_mqtt_evt_handler+0x13a>
	    job_info->type >= NRF_CLOUD_FOTA_TYPE__INVALID) {
   2fad6:	7a3a      	ldrb	r2, [r7, #8]
	if (job_info->type < NRF_CLOUD_FOTA_TYPE__FIRST ||
   2fad8:	2a02      	cmp	r2, #2
   2fada:	d80a      	bhi.n	2faf2 <nrf_cloud_fota_mqtt_evt_handler+0x1ae>
	if (ret == 0 && strcmp(last_job, job_info->id) == 0) {
   2fadc:	68f9      	ldr	r1, [r7, #12]
   2fade:	484e      	ldr	r0, [pc, #312]	; (2fc18 <nrf_cloud_fota_mqtt_evt_handler+0x2d4>)
   2fae0:	f7ed fba5 	bl	1d22e <strcmp>
   2fae4:	b150      	cbz	r0, 2fafc <nrf_cloud_fota_mqtt_evt_handler+0x1b8>
	bool skip = false;
   2fae6:	4627      	mov	r7, r4
		nrf_cloud_free(payload);
   2fae8:	4640      	mov	r0, r8
   2faea:	f011 fcd9 	bl	414a0 <k_free>
   2faee:	46a8      	mov	r8, r5
   2faf0:	e75e      	b.n	2f9b0 <nrf_cloud_fota_mqtt_evt_handler+0x6c>
		LOG_ERR("Invalid FOTA type: %d", job_info->type);
   2faf2:	2145      	movs	r1, #69	; 0x45
   2faf4:	4849      	ldr	r0, [pc, #292]	; (2fc1c <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   2faf6:	f00d f8ea 	bl	3ccce <z_log_minimal_printk>
   2fafa:	e7c0      	b.n	2fa7e <nrf_cloud_fota_mqtt_evt_handler+0x13a>
		LOG_INF("Job %s already completed... skipping",
   2fafc:	2149      	movs	r1, #73	; 0x49
   2fafe:	4a46      	ldr	r2, [pc, #280]	; (2fc18 <nrf_cloud_fota_mqtt_evt_handler+0x2d4>)
   2fb00:	4847      	ldr	r0, [pc, #284]	; (2fc20 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
   2fb02:	f00d f8e4 	bl	3ccce <z_log_minimal_printk>
   2fb06:	e78c      	b.n	2fa22 <nrf_cloud_fota_mqtt_evt_handler+0xde>
	switch (job->info.type) {
   2fb08:	2a01      	cmp	r2, #1
		current_fota.parsed_payload = payload_array;
   2fb0a:	f8c5 8000 	str.w	r8, [r5]
	switch (job->info.type) {
   2fb0e:	d014      	beq.n	2fb3a <nrf_cloud_fota_mqtt_evt_handler+0x1f6>
   2fb10:	f012 0ffd 	tst.w	r2, #253	; 0xfd
   2fb14:	d00f      	beq.n	2fb36 <nrf_cloud_fota_mqtt_evt_handler+0x1f2>
		LOG_ERR("Unhandled FOTA type: %d", job->info.type);
   2fb16:	2145      	movs	r1, #69	; 0x45
   2fb18:	4842      	ldr	r0, [pc, #264]	; (2fc24 <nrf_cloud_fota_mqtt_evt_handler+0x2e0>)
   2fb1a:	f00d f8d8 	bl	3ccce <z_log_minimal_printk>
		return -EFTYPE;
   2fb1e:	f06f 044e 	mvn.w	r4, #78	; 0x4e
		(void)send_job_update(&current_fota);
   2fb22:	4832      	ldr	r0, [pc, #200]	; (2fbec <nrf_cloud_fota_mqtt_evt_handler+0x2a8>)
   2fb24:	f7ff fc5a 	bl	2f3dc <send_job_update>
		if (ret) {
   2fb28:	2c00      	cmp	r4, #0
   2fb2a:	f43f af5e 	beq.w	2f9ea <nrf_cloud_fota_mqtt_evt_handler+0xa6>
			cleanup_job(&current_fota);
   2fb2e:	f7ff fd1f 	bl	2f570 <cleanup_job.constprop.0>
   2fb32:	2400      	movs	r4, #0
   2fb34:	e759      	b.n	2f9ea <nrf_cloud_fota_mqtt_evt_handler+0xa6>
		img_type = DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   2fb36:	f04f 0901 	mov.w	r9, #1
	ret = fota_download_start_with_image_type(job->info.host,
   2fb3a:	f240 63a4 	movw	r3, #1700	; 0x6a4
   2fb3e:	f8cd 9004 	str.w	r9, [sp, #4]
   2fb42:	9300      	str	r3, [sp, #0]
   2fb44:	4a38      	ldr	r2, [pc, #224]	; (2fc28 <nrf_cloud_fota_mqtt_evt_handler+0x2e4>)
   2fb46:	2300      	movs	r3, #0
   2fb48:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   2fb4c:	f001 f90c 	bl	30d68 <fota_download_start_with_image_type>
	if (ret) {
   2fb50:	4604      	mov	r4, r0
   2fb52:	b158      	cbz	r0, 2fb6c <nrf_cloud_fota_mqtt_evt_handler+0x228>
		LOG_ERR("Failed to start FOTA download: %d", ret);
   2fb54:	4602      	mov	r2, r0
   2fb56:	2145      	movs	r1, #69	; 0x45
   2fb58:	4834      	ldr	r0, [pc, #208]	; (2fc2c <nrf_cloud_fota_mqtt_evt_handler+0x2e8>)
   2fb5a:	f00d f8b8 	bl	3ccce <z_log_minimal_printk>
		job->status = NRF_CLOUD_FOTA_FAILED;
   2fb5e:	2002      	movs	r0, #2
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   2fb60:	2301      	movs	r3, #1
		job->status = NRF_CLOUD_FOTA_FAILED;
   2fb62:	7128      	strb	r0, [r5, #4]
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   2fb64:	772b      	strb	r3, [r5, #28]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   2fb66:	f7ff fc17 	bl	2f398 <send_event.constprop.0>
   2fb6a:	e7da      	b.n	2fb22 <nrf_cloud_fota_mqtt_evt_handler+0x1de>
		LOG_INF("Downloading update");
   2fb6c:	4830      	ldr	r0, [pc, #192]	; (2fc30 <nrf_cloud_fota_mqtt_evt_handler+0x2ec>)
   2fb6e:	2149      	movs	r1, #73	; 0x49
   2fb70:	f00d f8ad 	bl	3ccce <z_log_minimal_printk>
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   2fb74:	2307      	movs	r3, #7
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   2fb76:	4620      	mov	r0, r4
		job->sent_dl_progress = 0;
   2fb78:	e9c5 4408 	strd	r4, r4, [r5, #32]
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   2fb7c:	712b      	strb	r3, [r5, #4]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   2fb7e:	e7f2      	b.n	2fb66 <nrf_cloud_fota_mqtt_evt_handler+0x222>
		if (evt->param.suback.message_id != NCT_MSG_ID_FOTA_SUB) {
   2fb80:	88b3      	ldrh	r3, [r6, #4]
   2fb82:	2b67      	cmp	r3, #103	; 0x67
   2fb84:	d128      	bne.n	2fbd8 <nrf_cloud_fota_mqtt_evt_handler+0x294>
		nrf_cloud_fota_update_check();
   2fb86:	f7ff feb9 	bl	2f8fc <nrf_cloud_fota_update_check>
		break;
   2fb8a:	e7d2      	b.n	2fb32 <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
		if (evt->param.unsuback.message_id != NCT_MSG_ID_FOTA_UNSUB) {
   2fb8c:	88b4      	ldrh	r4, [r6, #4]
   2fb8e:	3c99      	subs	r4, #153	; 0x99
   2fb90:	bf18      	it	ne
   2fb92:	2401      	movne	r4, #1
   2fb94:	e729      	b.n	2f9ea <nrf_cloud_fota_mqtt_evt_handler+0xa6>
		switch (evt->param.puback.message_id) {
   2fb96:	88b4      	ldrh	r4, [r6, #4]
   2fb98:	f5b4 7f97 	cmp.w	r4, #302	; 0x12e
   2fb9c:	d00c      	beq.n	2fbb8 <nrf_cloud_fota_mqtt_evt_handler+0x274>
   2fb9e:	d805      	bhi.n	2fbac <nrf_cloud_fota_mqtt_evt_handler+0x268>
		return 1;
   2fba0:	3cc9      	subs	r4, #201	; 0xc9
   2fba2:	2c01      	cmp	r4, #1
   2fba4:	bf94      	ite	ls
   2fba6:	2400      	movls	r4, #0
   2fba8:	2401      	movhi	r4, #1
   2fbaa:	e71e      	b.n	2f9ea <nrf_cloud_fota_mqtt_evt_handler+0xa6>
   2fbac:	f240 102f 	movw	r0, #303	; 0x12f
   2fbb0:	1a24      	subs	r4, r4, r0
   2fbb2:	bf18      	it	ne
   2fbb4:	2401      	movne	r4, #1
   2fbb6:	e718      	b.n	2f9ea <nrf_cloud_fota_mqtt_evt_handler+0xa6>
		switch (saved_job.validate) {
   2fbb8:	4b1e      	ldr	r3, [pc, #120]	; (2fc34 <nrf_cloud_fota_mqtt_evt_handler+0x2f0>)
   2fbba:	7818      	ldrb	r0, [r3, #0]
   2fbbc:	2801      	cmp	r0, #1
   2fbbe:	d008      	beq.n	2fbd2 <nrf_cloud_fota_mqtt_evt_handler+0x28e>
   2fbc0:	3802      	subs	r0, #2
   2fbc2:	2802      	cmp	r0, #2
   2fbc4:	d8b5      	bhi.n	2fb32 <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
			save_validate_status(saved_job.id, saved_job.type,
   2fbc6:	2205      	movs	r2, #5
   2fbc8:	7859      	ldrb	r1, [r3, #1]
   2fbca:	1c98      	adds	r0, r3, #2
   2fbcc:	f7ff fb4e 	bl	2f26c <save_validate_status>
			break;
   2fbd0:	e7af      	b.n	2fb32 <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
			send_event(NRF_CLOUD_FOTA_EVT_DONE, &current_fota);
   2fbd2:	f7ff fbe1 	bl	2f398 <send_event.constprop.0>
			break;
   2fbd6:	e7ac      	b.n	2fb32 <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
		return 1;
   2fbd8:	2401      	movs	r4, #1
   2fbda:	e706      	b.n	2f9ea <nrf_cloud_fota_mqtt_evt_handler+0xa6>
   2fbdc:	200146c8 	.word	0x200146c8
   2fbe0:	0004a675 	.word	0x0004a675
   2fbe4:	2001a198 	.word	0x2001a198
   2fbe8:	0004a78d 	.word	0x0004a78d
   2fbec:	2001a19c 	.word	0x2001a19c
   2fbf0:	0004a69c 	.word	0x0004a69c
   2fbf4:	0004a6c0 	.word	0x0004a6c0
   2fbf8:	0004a6e1 	.word	0x0004a6e1
   2fbfc:	2001a1a4 	.word	0x2001a1a4
   2fc00:	2001a1a8 	.word	0x2001a1a8
   2fc04:	0004a6f9 	.word	0x0004a6f9
   2fc08:	2001a1ac 	.word	0x2001a1ac
   2fc0c:	2001a1b0 	.word	0x2001a1b0
   2fc10:	2001a1b4 	.word	0x2001a1b4
   2fc14:	0004a715 	.word	0x0004a715
   2fc18:	2001d2d2 	.word	0x2001d2d2
   2fc1c:	0004a748 	.word	0x0004a748
   2fc20:	0004a763 	.word	0x0004a763
   2fc24:	0004a7a6 	.word	0x0004a7a6
   2fc28:	01010001 	.word	0x01010001
   2fc2c:	0004a7c3 	.word	0x0004a7c3
   2fc30:	0004a7ea 	.word	0x0004a7ea
   2fc34:	20014c47 	.word	0x20014c47

0002fc38 <nrf_cloud_bootloader_fota_slot_set>:
#include <net/nrf_cloud.h>

LOG_MODULE_REGISTER(nrf_cloud_fota_common, CONFIG_NRF_CLOUD_LOG_LEVEL);

int nrf_cloud_bootloader_fota_slot_set(struct nrf_cloud_settings_fota_job * const job)
{
   2fc38:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err = -ENOTSUP;

	if (!job) {
   2fc3a:	4605      	mov	r5, r0
   2fc3c:	b318      	cbz	r0, 2fc86 <nrf_cloud_bootloader_fota_slot_set+0x4e>
		return -EINVAL;
	}

	/* Only set the slot flag once for bootloader updates */
	if (job->type == NRF_CLOUD_FOTA_BOOTLOADER &&
   2fc3e:	7843      	ldrb	r3, [r0, #1]
   2fc40:	2b02      	cmp	r3, #2
   2fc42:	d123      	bne.n	2fc8c <nrf_cloud_bootloader_fota_slot_set+0x54>
   2fc44:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   2fc48:	07db      	lsls	r3, r3, #31
   2fc4a:	d41f      	bmi.n	2fc8c <nrf_cloud_bootloader_fota_slot_set+0x54>
	    !(job->bl_flags & NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET)) {
		bool s0_active;

#if defined(CONFIG_FOTA_DOWNLOAD)
		err = fota_download_s0_active_get(&s0_active);
   2fc4c:	f10d 0007 	add.w	r0, sp, #7
   2fc50:	f00f fee1 	bl	3fa16 <fota_download_s0_active_get>
#endif

		if (err) {
   2fc54:	4604      	mov	r4, r0
   2fc56:	b138      	cbz	r0, 2fc68 <nrf_cloud_bootloader_fota_slot_set+0x30>
			LOG_ERR("Unable to determine active B1 slot, error: %d", err);
   2fc58:	4602      	mov	r2, r0
   2fc5a:	2145      	movs	r1, #69	; 0x45
   2fc5c:	480c      	ldr	r0, [pc, #48]	; (2fc90 <nrf_cloud_bootloader_fota_slot_set+0x58>)
   2fc5e:	f00d f836 	bl	3ccce <z_log_minimal_printk>

		job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET;
	}

	return 0;
}
   2fc62:	4620      	mov	r0, r4
   2fc64:	b003      	add	sp, #12
   2fc66:	bd30      	pop	{r4, r5, pc}
		if (s0_active) {
   2fc68:	f89d 2007 	ldrb.w	r2, [sp, #7]
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   2fc6c:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
		if (s0_active) {
   2fc70:	b132      	cbz	r2, 2fc80 <nrf_cloud_bootloader_fota_slot_set+0x48>
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   2fc72:	f043 0302 	orr.w	r3, r3, #2
		job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET;
   2fc76:	f043 0301 	orr.w	r3, r3, #1
   2fc7a:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
   2fc7e:	e7f0      	b.n	2fc62 <nrf_cloud_bootloader_fota_slot_set+0x2a>
			job->bl_flags &= ~NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   2fc80:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   2fc84:	e7f7      	b.n	2fc76 <nrf_cloud_bootloader_fota_slot_set+0x3e>
		return -EINVAL;
   2fc86:	f06f 0415 	mvn.w	r4, #21
   2fc8a:	e7ea      	b.n	2fc62 <nrf_cloud_bootloader_fota_slot_set+0x2a>
	return 0;
   2fc8c:	2400      	movs	r4, #0
   2fc8e:	e7e8      	b.n	2fc62 <nrf_cloud_bootloader_fota_slot_set+0x2a>
   2fc90:	0004a89b 	.word	0x0004a89b

0002fc94 <nrf_cloud_pending_fota_job_process>:

int nrf_cloud_pending_fota_job_process(struct nrf_cloud_settings_fota_job * const job,
				       bool * const reboot_required)
{
   2fc94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2fc98:	460f      	mov	r7, r1
	if (!job || !reboot_required) {
   2fc9a:	4605      	mov	r5, r0
   2fc9c:	2800      	cmp	r0, #0
   2fc9e:	f000 8085 	beq.w	2fdac <nrf_cloud_pending_fota_job_process+0x118>
   2fca2:	2900      	cmp	r1, #0
   2fca4:	f000 8082 	beq.w	2fdac <nrf_cloud_pending_fota_job_process+0x118>
		return -EINVAL;
	}

	if (job->validate != NRF_CLOUD_FOTA_VALIDATE_PENDING) {
   2fca8:	f890 8000 	ldrb.w	r8, [r0]
   2fcac:	f1b8 0f01 	cmp.w	r8, #1
   2fcb0:	d17f      	bne.n	2fdb2 <nrf_cloud_pending_fota_job_process+0x11e>
		return -ENODEV;
	}

	int err;

	if (job->type == NRF_CLOUD_FOTA_MODEM) {
   2fcb2:	7843      	ldrb	r3, [r0, #1]
   2fcb4:	2b01      	cmp	r3, #1
   2fcb6:	d124      	bne.n	2fd02 <nrf_cloud_pending_fota_job_process+0x6e>
#if defined(CONFIG_NRF_MODEM_LIB)
		int modem_lib_init_result = nrf_modem_lib_get_init_ret();
   2fcb8:	f7f5 fd80 	bl	257bc <nrf_modem_lib_get_init_ret>

		switch (modem_lib_init_result) {
   2fcbc:	4b3e      	ldr	r3, [pc, #248]	; (2fdb8 <nrf_cloud_pending_fota_job_process+0x124>)
		int modem_lib_init_result = nrf_modem_lib_get_init_ret();
   2fcbe:	4602      	mov	r2, r0
		switch (modem_lib_init_result) {
   2fcc0:	4298      	cmp	r0, r3
   2fcc2:	dc08      	bgt.n	2fcd6 <nrf_cloud_pending_fota_job_process+0x42>
   2fcc4:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   2fcc8:	dd15      	ble.n	2fcf6 <nrf_cloud_pending_fota_job_process+0x62>
			break;
		case MODEM_DFU_RESULT_UUID_ERROR:
		case MODEM_DFU_RESULT_AUTH_ERROR:
		case MODEM_DFU_RESULT_HARDWARE_ERROR:
		case MODEM_DFU_RESULT_INTERNAL_ERROR:
			LOG_ERR("Modem FOTA error: %d", modem_lib_init_result);
   2fcca:	2145      	movs	r1, #69	; 0x45
   2fccc:	483b      	ldr	r0, [pc, #236]	; (2fdbc <nrf_cloud_pending_fota_job_process+0x128>)
   2fcce:	f00c fffe 	bl	3ccce <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fcd2:	2303      	movs	r3, #3
   2fcd4:	e007      	b.n	2fce6 <nrf_cloud_pending_fota_job_process+0x52>
		switch (modem_lib_init_result) {
   2fcd6:	4b3a      	ldr	r3, [pc, #232]	; (2fdc0 <nrf_cloud_pending_fota_job_process+0x12c>)
   2fcd8:	4298      	cmp	r0, r3
   2fcda:	d10c      	bne.n	2fcf6 <nrf_cloud_pending_fota_job_process+0x62>
			LOG_INF("Modem FOTA update confirmed");
   2fcdc:	2149      	movs	r1, #73	; 0x49
   2fcde:	4839      	ldr	r0, [pc, #228]	; (2fdc4 <nrf_cloud_pending_fota_job_process+0x130>)
   2fce0:	f00c fff5 	bl	3ccce <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_PASS;
   2fce4:	2302      	movs	r3, #2
			break;
		default:
			LOG_INF("Modem FOTA result unknown: %d", modem_lib_init_result);
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fce6:	702b      	strb	r3, [r5, #0]
			break;
		}
#else
		job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
#endif
		*reboot_required = true;
   2fce8:	2301      	movs	r3, #1

		LOG_INF("Modem FOTA update complete on reboot");
   2fcea:	2149      	movs	r1, #73	; 0x49
   2fcec:	4836      	ldr	r0, [pc, #216]	; (2fdc8 <nrf_cloud_pending_fota_job_process+0x134>)
		*reboot_required = true;
   2fcee:	703b      	strb	r3, [r7, #0]
#endif
		}

		if (err) {
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
			LOG_WRN("Bootloader FOTA update complete but not validated");
   2fcf0:	f00c ffed 	bl	3ccce <z_log_minimal_printk>
   2fcf4:	e00b      	b.n	2fd0e <nrf_cloud_pending_fota_job_process+0x7a>
			LOG_INF("Modem FOTA result unknown: %d", modem_lib_init_result);
   2fcf6:	2149      	movs	r1, #73	; 0x49
   2fcf8:	4834      	ldr	r0, [pc, #208]	; (2fdcc <nrf_cloud_pending_fota_job_process+0x138>)
   2fcfa:	f00c ffe8 	bl	3ccce <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fcfe:	2304      	movs	r3, #4
   2fd00:	e7f1      	b.n	2fce6 <nrf_cloud_pending_fota_job_process+0x52>
	} else if (job->type == NRF_CLOUD_FOTA_APPLICATION) {
   2fd02:	b9eb      	cbnz	r3, 2fd40 <nrf_cloud_pending_fota_job_process+0xac>
		job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fd04:	2304      	movs	r3, #4
   2fd06:	7003      	strb	r3, [r0, #0]
		if (!boot_is_img_confirmed()) {
   2fd08:	f00d fe2a 	bl	3d960 <boot_is_img_confirmed>
   2fd0c:	b108      	cbz	r0, 2fd12 <nrf_cloud_pending_fota_job_process+0x7e>
		}
	}

	return 0;
   2fd0e:	2400      	movs	r4, #0
   2fd10:	e027      	b.n	2fd62 <nrf_cloud_pending_fota_job_process+0xce>
			err = boot_write_img_confirmed();
   2fd12:	f00d fe3c 	bl	3d98e <boot_write_img_confirmed>
			if (err) {
   2fd16:	4604      	mov	r4, r0
   2fd18:	b158      	cbz	r0, 2fd32 <nrf_cloud_pending_fota_job_process+0x9e>
				LOG_ERR("Application FOTA update confirmation failed: %d",
   2fd1a:	4602      	mov	r2, r0
   2fd1c:	2145      	movs	r1, #69	; 0x45
   2fd1e:	482c      	ldr	r0, [pc, #176]	; (2fdd0 <nrf_cloud_pending_fota_job_process+0x13c>)
   2fd20:	f00c ffd5 	bl	3ccce <z_log_minimal_printk>
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fd24:	2303      	movs	r3, #3
				LOG_INF("Rebooting to revert to previous version...");
   2fd26:	2149      	movs	r1, #73	; 0x49
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fd28:	702b      	strb	r3, [r5, #0]
				LOG_INF("Rebooting to revert to previous version...");
   2fd2a:	482a      	ldr	r0, [pc, #168]	; (2fdd4 <nrf_cloud_pending_fota_job_process+0x140>)
				*reboot_required = true;
   2fd2c:	f887 8000 	strb.w	r8, [r7]
   2fd30:	e7de      	b.n	2fcf0 <nrf_cloud_pending_fota_job_process+0x5c>
				LOG_INF("App FOTA update confirmed");
   2fd32:	2149      	movs	r1, #73	; 0x49
   2fd34:	4828      	ldr	r0, [pc, #160]	; (2fdd8 <nrf_cloud_pending_fota_job_process+0x144>)
				LOG_INF("Bootloader slot changed, FOTA update validated");
   2fd36:	f00c ffca 	bl	3ccce <z_log_minimal_printk>
				job->validate = NRF_CLOUD_FOTA_VALIDATE_PASS;
   2fd3a:	2302      	movs	r3, #2
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fd3c:	702b      	strb	r3, [r5, #0]
   2fd3e:	e010      	b.n	2fd62 <nrf_cloud_pending_fota_job_process+0xce>
	} else if (job->type == NRF_CLOUD_FOTA_BOOTLOADER) {
   2fd40:	2b02      	cmp	r3, #2
   2fd42:	d1e4      	bne.n	2fd0e <nrf_cloud_pending_fota_job_process+0x7a>
		if (!(job->bl_flags & NRF_CLOUD_FOTA_BL_STATUS_REBOOTED)) {
   2fd44:	f890 6027 	ldrb.w	r6, [r0, #39]	; 0x27
   2fd48:	f016 0404 	ands.w	r4, r6, #4
   2fd4c:	d10d      	bne.n	2fd6a <nrf_cloud_pending_fota_job_process+0xd6>
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_REBOOTED;
   2fd4e:	f046 0604 	orr.w	r6, r6, #4
   2fd52:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
			*reboot_required = true;
   2fd56:	f881 8000 	strb.w	r8, [r1]
			LOG_INF("Bootloader FOTA update will be processed on reboot");
   2fd5a:	4820      	ldr	r0, [pc, #128]	; (2fddc <nrf_cloud_pending_fota_job_process+0x148>)
   2fd5c:	2149      	movs	r1, #73	; 0x49
   2fd5e:	f00c ffb6 	bl	3ccce <z_log_minimal_printk>
}
   2fd62:	4620      	mov	r0, r4
   2fd64:	b002      	add	sp, #8
   2fd66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (job->bl_flags & NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET) {
   2fd6a:	07f3      	lsls	r3, r6, #31
   2fd6c:	d50a      	bpl.n	2fd84 <nrf_cloud_pending_fota_job_process+0xf0>
			err = fota_download_s0_active_get(&s0_active);
   2fd6e:	f10d 0007 	add.w	r0, sp, #7
   2fd72:	f00f fe50 	bl	3fa16 <fota_download_s0_active_get>
			if (err) {
   2fd76:	4604      	mov	r4, r0
   2fd78:	b148      	cbz	r0, 2fd8e <nrf_cloud_pending_fota_job_process+0xfa>
				LOG_WRN("Active slot unknown, error: %d", err);
   2fd7a:	4602      	mov	r2, r0
   2fd7c:	2157      	movs	r1, #87	; 0x57
   2fd7e:	4818      	ldr	r0, [pc, #96]	; (2fde0 <nrf_cloud_pending_fota_job_process+0x14c>)
   2fd80:	f00c ffa5 	bl	3ccce <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fd84:	2304      	movs	r3, #4
			LOG_WRN("Bootloader FOTA update complete but not validated");
   2fd86:	2157      	movs	r1, #87	; 0x57
   2fd88:	4816      	ldr	r0, [pc, #88]	; (2fde4 <nrf_cloud_pending_fota_job_process+0x150>)
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fd8a:	702b      	strb	r3, [r5, #0]
   2fd8c:	e7b0      	b.n	2fcf0 <nrf_cloud_pending_fota_job_process+0x5c>
			} else if (s0_active != s0_prev) {
   2fd8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2fd92:	f3c6 0640 	ubfx	r6, r6, #1, #1
   2fd96:	42b3      	cmp	r3, r6
   2fd98:	d002      	beq.n	2fda0 <nrf_cloud_pending_fota_job_process+0x10c>
				LOG_INF("Bootloader slot changed, FOTA update validated");
   2fd9a:	2149      	movs	r1, #73	; 0x49
   2fd9c:	4812      	ldr	r0, [pc, #72]	; (2fde8 <nrf_cloud_pending_fota_job_process+0x154>)
   2fd9e:	e7ca      	b.n	2fd36 <nrf_cloud_pending_fota_job_process+0xa2>
				LOG_WRN("Bootloader slot unchanged, FOTA update invalidated");
   2fda0:	2157      	movs	r1, #87	; 0x57
   2fda2:	4812      	ldr	r0, [pc, #72]	; (2fdec <nrf_cloud_pending_fota_job_process+0x158>)
   2fda4:	f00c ff93 	bl	3ccce <z_log_minimal_printk>
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fda8:	2303      	movs	r3, #3
   2fdaa:	e7c7      	b.n	2fd3c <nrf_cloud_pending_fota_job_process+0xa8>
		return -EINVAL;
   2fdac:	f06f 0415 	mvn.w	r4, #21
   2fdb0:	e7d7      	b.n	2fd62 <nrf_cloud_pending_fota_job_process+0xce>
		return -ENODEV;
   2fdb2:	f06f 0412 	mvn.w	r4, #18
   2fdb6:	e7d4      	b.n	2fd62 <nrf_cloud_pending_fota_job_process+0xce>
   2fdb8:	04400004 	.word	0x04400004
   2fdbc:	0004a8ef 	.word	0x0004a8ef
   2fdc0:	05500001 	.word	0x05500001
   2fdc4:	0004a8ce 	.word	0x0004a8ce
   2fdc8:	0004a92c 	.word	0x0004a92c
   2fdcc:	0004a909 	.word	0x0004a909
   2fdd0:	0004a956 	.word	0x0004a956
   2fdd4:	0004a98b 	.word	0x0004a98b
   2fdd8:	0004a9bb 	.word	0x0004a9bb
   2fddc:	0004a9da 	.word	0x0004a9da
   2fde0:	0004aa12 	.word	0x0004aa12
   2fde4:	0004aaa2 	.word	0x0004aaa2
   2fde8:	0004aa36 	.word	0x0004aa36
   2fdec:	0004aa6a 	.word	0x0004aa6a

0002fdf0 <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   2fdf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   2fdf2:	f640 03fc 	movw	r3, #2300	; 0x8fc
   2fdf6:	f8d0 2918 	ldr.w	r2, [r0, #2328]	; 0x918
{
   2fdfa:	4604      	mov	r4, r0
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   2fdfc:	429a      	cmp	r2, r3
   2fdfe:	d90a      	bls.n	2fe16 <fragment_evt_send+0x26>
   2fe00:	490d      	ldr	r1, [pc, #52]	; (2fe38 <fragment_evt_send+0x48>)
   2fe02:	480e      	ldr	r0, [pc, #56]	; (2fe3c <fragment_evt_send+0x4c>)
   2fe04:	f44f 72bd 	mov.w	r2, #378	; 0x17a
   2fe08:	f00c ff27 	bl	3cc5a <assert_print>
   2fe0c:	f44f 71bd 	mov.w	r1, #378	; 0x17a
   2fe10:	4809      	ldr	r0, [pc, #36]	; (2fe38 <fragment_evt_send+0x48>)
   2fe12:	f00c ff1b 	bl	3cc4c <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   2fe16:	2300      	movs	r3, #0
   2fe18:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   2fe1c:	f104 031c 	add.w	r3, r4, #28
	const struct download_client_evt evt = {
   2fe20:	9302      	str	r3, [sp, #8]
   2fe22:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
			.len = client->offset,
		}
	};

	return client->callback(&evt);
   2fe26:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	const struct download_client_evt evt = {
   2fe2a:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   2fe2c:	a801      	add	r0, sp, #4
   2fe2e:	f8d4 3a50 	ldr.w	r3, [r4, #2640]	; 0xa50
   2fe32:	4798      	blx	r3
}
   2fe34:	b004      	add	sp, #16
   2fe36:	bd10      	pop	{r4, pc}
   2fe38:	0004aaef 	.word	0x0004aaef
   2fe3c:	00044263 	.word	0x00044263

0002fe40 <socket_send>:
{
   2fe40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (timeout_ms <= 0) {
   2fe44:	2a00      	cmp	r2, #0
{
   2fe46:	4605      	mov	r5, r0
   2fe48:	460c      	mov	r4, r1
   2fe4a:	b086      	sub	sp, #24
	if (timeout_ms <= 0) {
   2fe4c:	dc06      	bgt.n	2fe5c <socket_send+0x1c>
	if (err) {
   2fe4e:	2600      	movs	r6, #0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2fe50:	4637      	mov	r7, r6
		sent = send(client->fd, client->buf + off, len, 0);
   2fe52:	f105 081c 	add.w	r8, r5, #28
	while (len) {
   2fe56:	bb24      	cbnz	r4, 2fea2 <socket_send+0x62>
	return 0;
   2fe58:	4620      	mov	r0, r4
   2fe5a:	e01f      	b.n	2fe9c <socket_send+0x5c>
		.tv_sec = (timeout_ms / 1000),
   2fe5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2fe60:	fb92 f1f3 	sdiv	r1, r2, r3
		.tv_usec = (timeout_ms % 1000) * 1000,
   2fe64:	fb03 2211 	mls	r2, r3, r1, r2
   2fe68:	435a      	muls	r2, r3
		.tv_sec = (timeout_ms / 1000),
   2fe6a:	17ce      	asrs	r6, r1, #31
   2fe6c:	e9cd 1602 	strd	r1, r6, [sp, #8]
	err = set_snd_socket_timeout(client->fd, timeout);
   2fe70:	6800      	ldr	r0, [r0, #0]
	struct timeval timeo = {
   2fe72:	9204      	str	r2, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2fe74:	2310      	movs	r3, #16
   2fe76:	2215      	movs	r2, #21
   2fe78:	9300      	str	r3, [sp, #0]
   2fe7a:	2101      	movs	r1, #1
   2fe7c:	ab02      	add	r3, sp, #8
   2fe7e:	f00d fb66 	bl	3d54e <z_impl_zsock_setsockopt>
	if (err) {
   2fe82:	2800      	cmp	r0, #0
   2fe84:	d0e3      	beq.n	2fe4e <socket_send+0xe>
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   2fe86:	f00d fd61 	bl	3d94c <__errno>
   2fe8a:	2157      	movs	r1, #87	; 0x57
   2fe8c:	6802      	ldr	r2, [r0, #0]
   2fe8e:	480c      	ldr	r0, [pc, #48]	; (2fec0 <socket_send+0x80>)
   2fe90:	f00c ff1d 	bl	3ccce <z_log_minimal_printk>
			return -errno;
   2fe94:	f00d fd5a 	bl	3d94c <__errno>
   2fe98:	6800      	ldr	r0, [r0, #0]
   2fe9a:	4240      	negs	r0, r0
}
   2fe9c:	b006      	add	sp, #24
   2fe9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sent = send(client->fd, client->buf + off, len, 0);
   2fea2:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2fea4:	2300      	movs	r3, #0
   2fea6:	4622      	mov	r2, r4
   2fea8:	e9cd 7700 	strd	r7, r7, [sp]
   2feac:	eb08 0106 	add.w	r1, r8, r6
   2feb0:	f00d faa1 	bl	3d3f6 <z_impl_zsock_sendto>
		if (sent < 0) {
   2feb4:	2800      	cmp	r0, #0
   2feb6:	dbed      	blt.n	2fe94 <socket_send+0x54>
		off += sent;
   2feb8:	4406      	add	r6, r0
		len -= sent;
   2feba:	1a24      	subs	r4, r4, r0
   2febc:	e7cb      	b.n	2fe56 <socket_send+0x16>
   2febe:	bf00      	nop
   2fec0:	0004ab34 	.word	0x0004ab34

0002fec4 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   2fec4:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   2fec6:	4604      	mov	r4, r0
{
   2fec8:	b089      	sub	sp, #36	; 0x24
	if (client == NULL || callback == NULL) {
   2feca:	b318      	cbz	r0, 2ff14 <download_client_init+0x50>
   2fecc:	b311      	cbz	r1, 2ff14 <download_client_init+0x50>
		return -EINVAL;
	}

	client->fd = -1;
   2fece:	f04f 33ff 	mov.w	r3, #4294967295
   2fed2:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   2fed4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
   2fed8:	f8c3 1a50 	str.w	r1, [r3, #2640]	; 0xa50
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2fedc:	2200      	movs	r2, #0
   2fede:	2300      	movs	r3, #0
   2fee0:	2500      	movs	r5, #0
   2fee2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2fee6:	230e      	movs	r3, #14
   2fee8:	9000      	str	r0, [sp, #0]
   2feea:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2feee:	f500 6125 	add.w	r1, r0, #2640	; 0xa50
   2fef2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2fef6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   2fefa:	4b08      	ldr	r3, [pc, #32]	; (2ff1c <download_client_init+0x58>)
   2fefc:	f500 6018 	add.w	r0, r0, #2432	; 0x980
   2ff00:	f006 fb36 	bl	36570 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   2ff04:	f8c4 097c 	str.w	r0, [r4, #2428]	; 0x97c
	return z_impl_k_thread_name_set(thread, str);
   2ff08:	4905      	ldr	r1, [pc, #20]	; (2ff20 <download_client_init+0x5c>)
   2ff0a:	f011 f91a 	bl	41142 <z_impl_k_thread_name_set>
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	k_thread_name_set(client->tid, "download_client");

	return 0;
   2ff0e:	4628      	mov	r0, r5
}
   2ff10:	b009      	add	sp, #36	; 0x24
   2ff12:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2ff14:	f06f 0015 	mvn.w	r0, #21
   2ff18:	e7fa      	b.n	2ff10 <download_client_init+0x4c>
   2ff1a:	bf00      	nop
   2ff1c:	00030355 	.word	0x00030355
   2ff20:	0004ab60 	.word	0x0004ab60

0002ff24 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   2ff24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ff28:	460f      	mov	r7, r1
   2ff2a:	4616      	mov	r6, r2
	int err;

	if (client == NULL || host == NULL || config == NULL) {
   2ff2c:	4604      	mov	r4, r0
{
   2ff2e:	b0b8      	sub	sp, #224	; 0xe0
	if (client == NULL || host == NULL || config == NULL) {
   2ff30:	2800      	cmp	r0, #0
   2ff32:	f000 81d2 	beq.w	302da <CONFIG_FLASH_LOAD_SIZE+0x2da>
   2ff36:	2900      	cmp	r1, #0
   2ff38:	f000 81cf 	beq.w	302da <CONFIG_FLASH_LOAD_SIZE+0x2da>
   2ff3c:	2a00      	cmp	r2, #0
   2ff3e:	f000 81cc 	beq.w	302da <CONFIG_FLASH_LOAD_SIZE+0x2da>
		return -EINVAL;
	}

	if (client->fd != -1) {
   2ff42:	6803      	ldr	r3, [r0, #0]
   2ff44:	3301      	adds	r3, #1
   2ff46:	d17f      	bne.n	30048 <CONFIG_FLASH_LOAD_SIZE+0x48>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   2ff48:	f640 03fc 	movw	r3, #2300	; 0x8fc
   2ff4c:	6892      	ldr	r2, [r2, #8]
   2ff4e:	429a      	cmp	r2, r3
   2ff50:	d909      	bls.n	2ff66 <download_client_connect+0x42>
		LOG_ERR("The configured fragment size is larger than buffer");
   2ff52:	2145      	movs	r1, #69	; 0x45
   2ff54:	48b3      	ldr	r0, [pc, #716]	; (30224 <CONFIG_FLASH_LOAD_SIZE+0x224>)
   2ff56:	f00c feba 	bl	3ccce <z_log_minimal_printk>
		return -E2BIG;
   2ff5a:	f06f 0506 	mvn.w	r5, #6
	if (client->fd < 0) {
		return err;
	}

	return 0;
}
   2ff5e:	4628      	mov	r0, r5
   2ff60:	b038      	add	sp, #224	; 0xe0
   2ff62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct addrinfo hints = {
   2ff66:	2250      	movs	r2, #80	; 0x50
   2ff68:	2100      	movs	r1, #0
   2ff6a:	a804      	add	r0, sp, #16
		err = host_lookup(host, AF_INET, config->pdn_id, &client->remote_addr);
   2ff6c:	f896 8004 	ldrb.w	r8, [r6, #4]
	struct addrinfo hints = {
   2ff70:	f011 fb47 	bl	41602 <memset>
   2ff74:	2301      	movs	r3, #1
	err = url_parse_host(host, hostname, sizeof(hostname));
   2ff76:	2280      	movs	r2, #128	; 0x80
   2ff78:	4638      	mov	r0, r7
   2ff7a:	a918      	add	r1, sp, #96	; 0x60
	struct addrinfo hints = {
   2ff7c:	9306      	str	r3, [sp, #24]
	err = url_parse_host(host, hostname, sizeof(hostname));
   2ff7e:	f000 fb73 	bl	30668 <url_parse_host>
	if (err) {
   2ff82:	4605      	mov	r5, r0
   2ff84:	2800      	cmp	r0, #0
   2ff86:	d1ea      	bne.n	2ff5e <download_client_connect+0x3a>
	if (pdn_id) {
   2ff88:	f1b8 0f00 	cmp.w	r8, #0
   2ff8c:	d019      	beq.n	2ffc2 <download_client_connect+0x9e>
		hints.ai_flags = AI_PDNSERV;
   2ff8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		(void)snprintf(pdnserv, sizeof(pdnserv), "%d", pdn_id);
   2ff92:	2104      	movs	r1, #4
   2ff94:	4aa4      	ldr	r2, [pc, #656]	; (30228 <CONFIG_FLASH_LOAD_SIZE+0x228>)
		hints.ai_flags = AI_PDNSERV;
   2ff96:	9305      	str	r3, [sp, #20]
		(void)snprintf(pdnserv, sizeof(pdnserv), "%d", pdn_id);
   2ff98:	a802      	add	r0, sp, #8
   2ff9a:	4643      	mov	r3, r8
   2ff9c:	f00a fc0e 	bl	3a7bc <sniprintf>
	return zsock_getaddrinfo(host, service, hints, res);
   2ffa0:	ab03      	add	r3, sp, #12
   2ffa2:	aa04      	add	r2, sp, #16
   2ffa4:	a902      	add	r1, sp, #8
   2ffa6:	a818      	add	r0, sp, #96	; 0x60
   2ffa8:	f00d f9c3 	bl	3d332 <zsock_getaddrinfo>
   2ffac:	4605      	mov	r5, r0
	if (err) {
   2ffae:	b160      	cbz	r0, 2ffca <download_client_connect+0xa6>
		LOG_WRN("Failed to resolve hostname %s on %s",
   2ffb0:	2157      	movs	r1, #87	; 0x57
   2ffb2:	4b9e      	ldr	r3, [pc, #632]	; (3022c <CONFIG_FLASH_LOAD_SIZE+0x22c>)
   2ffb4:	489e      	ldr	r0, [pc, #632]	; (30230 <CONFIG_FLASH_LOAD_SIZE+0x230>)
   2ffb6:	aa18      	add	r2, sp, #96	; 0x60
   2ffb8:	f00c fe89 	bl	3ccce <z_log_minimal_printk>
		return -EHOSTUNREACH;
   2ffbc:	f06f 0575 	mvn.w	r5, #117	; 0x75
   2ffc0:	e7cd      	b.n	2ff5e <download_client_connect+0x3a>
   2ffc2:	4601      	mov	r1, r0
   2ffc4:	ab03      	add	r3, sp, #12
   2ffc6:	aa04      	add	r2, sp, #16
   2ffc8:	e7ed      	b.n	2ffa6 <download_client_connect+0x82>
	*sa = *(ai->ai_addr);
   2ffca:	1d22      	adds	r2, r4, #4
   2ffcc:	4690      	mov	r8, r2
   2ffce:	9803      	ldr	r0, [sp, #12]
   2ffd0:	6983      	ldr	r3, [r0, #24]
   2ffd2:	f103 0118 	add.w	r1, r3, #24
   2ffd6:	f853 cb04 	ldr.w	ip, [r3], #4
   2ffda:	428b      	cmp	r3, r1
   2ffdc:	f842 cb04 	str.w	ip, [r2], #4
   2ffe0:	d1f9      	bne.n	2ffd6 <download_client_connect+0xb2>
	zsock_freeaddrinfo(ai);
   2ffe2:	f00d f9a8 	bl	3d336 <zsock_freeaddrinfo>
	client->config = *config;
   2ffe6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   2ffea:	f604 1c2c 	addw	ip, r4, #2348	; 0x92c
   2ffee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	err = url_parse_proto(dl->host, &dl->proto, &type);
   2fff2:	4638      	mov	r0, r7
	client->host = host;
   2fff4:	f8c4 7924 	str.w	r7, [r4, #2340]	; 0x924
	err = url_parse_proto(dl->host, &dl->proto, &type);
   2fff8:	aa03      	add	r2, sp, #12
   2fffa:	f604 113c 	addw	r1, r4, #2364	; 0x93c
   2fffe:	f000 fafd 	bl	305fc <url_parse_proto>
	if (err) {
   30002:	b150      	cbz	r0, 3001a <CONFIG_FLASH_LOAD_SIZE+0x1a>
		type = SOCK_STREAM;
   30004:	2301      	movs	r3, #1
   30006:	9303      	str	r3, [sp, #12]
		if (dl->config.sec_tag != -1) {
   30008:	f8d4 392c 	ldr.w	r3, [r4, #2348]	; 0x92c
   3000c:	3301      	adds	r3, #1
			dl->proto = IPPROTO_TLS_1_2;
   3000e:	bf14      	ite	ne
   30010:	f44f 7381 	movne.w	r3, #258	; 0x102
			dl->proto = IPPROTO_TCP;
   30014:	2306      	moveq	r3, #6
   30016:	f8c4 393c 	str.w	r3, [r4, #2364]	; 0x93c
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   3001a:	f8d4 293c 	ldr.w	r2, [r4, #2364]	; 0x93c
   3001e:	f422 7380 	bic.w	r3, r2, #256	; 0x100
   30022:	2b11      	cmp	r3, #17
   30024:	f000 8153 	beq.w	302ce <CONFIG_FLASH_LOAD_SIZE+0x2ce>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   30028:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
		if (dl->config.sec_tag != -1) {
   3002c:	f8d4 392c 	ldr.w	r3, [r4, #2348]	; 0x92c
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   30030:	d10c      	bne.n	3004c <CONFIG_FLASH_LOAD_SIZE+0x4c>
		if (dl->config.sec_tag == -1) {
   30032:	3301      	adds	r3, #1
   30034:	d112      	bne.n	3005c <CONFIG_FLASH_LOAD_SIZE+0x5c>
			LOG_WRN("No security tag provided for TLS/DTLS");
   30036:	2157      	movs	r1, #87	; 0x57
   30038:	487e      	ldr	r0, [pc, #504]	; (30234 <CONFIG_FLASH_LOAD_SIZE+0x234>)
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   3003a:	f00c fe48 	bl	3ccce <z_log_minimal_printk>
		return -EINVAL;
   3003e:	f06f 0515 	mvn.w	r5, #21
	if (client->fd < 0) {
   30042:	6823      	ldr	r3, [r4, #0]
   30044:	2b00      	cmp	r3, #0
   30046:	db8a      	blt.n	2ff5e <download_client_connect+0x3a>
	return 0;
   30048:	2500      	movs	r5, #0
   3004a:	e788      	b.n	2ff5e <download_client_connect+0x3a>
	if (dl->config.sec_tag == -1 && dl->config.set_tls_hostname) {
   3004c:	3301      	adds	r3, #1
   3004e:	d105      	bne.n	3005c <CONFIG_FLASH_LOAD_SIZE+0x5c>
   30050:	f894 3938 	ldrb.w	r3, [r4, #2360]	; 0x938
   30054:	b113      	cbz	r3, 3005c <CONFIG_FLASH_LOAD_SIZE+0x5c>
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   30056:	2157      	movs	r1, #87	; 0x57
   30058:	4877      	ldr	r0, [pc, #476]	; (30238 <CONFIG_FLASH_LOAD_SIZE+0x238>)
   3005a:	e7ee      	b.n	3003a <CONFIG_FLASH_LOAD_SIZE+0x3a>
	err = url_parse_port(dl->host, &port);
   3005c:	f8d4 0924 	ldr.w	r0, [r4, #2340]	; 0x924
   30060:	a902      	add	r1, sp, #8
   30062:	f000 fb39 	bl	306d8 <url_parse_port>
	if (err) {
   30066:	b148      	cbz	r0, 3007c <CONFIG_FLASH_LOAD_SIZE+0x7c>
		switch (dl->proto) {
   30068:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
   3006c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   30070:	d034      	beq.n	300dc <CONFIG_FLASH_LOAD_SIZE+0xdc>
   30072:	dc2c      	bgt.n	300ce <CONFIG_FLASH_LOAD_SIZE+0xce>
   30074:	2b06      	cmp	r3, #6
   30076:	d036      	beq.n	300e6 <CONFIG_FLASH_LOAD_SIZE+0xe6>
   30078:	2b11      	cmp	r3, #17
   3007a:	d036      	beq.n	300ea <CONFIG_FLASH_LOAD_SIZE+0xea>
	switch (dl->remote_addr.sa_family) {
   3007c:	88a0      	ldrh	r0, [r4, #4]
   3007e:	2801      	cmp	r0, #1
   30080:	d036      	beq.n	300f0 <CONFIG_FLASH_LOAD_SIZE+0xf0>
   30082:	2802      	cmp	r0, #2
   30084:	f040 8126 	bne.w	302d4 <CONFIG_FLASH_LOAD_SIZE+0x2d4>
		addrlen = sizeof(struct sockaddr_in6);
   30088:	2718      	movs	r7, #24
		SIN6(&dl->remote_addr)->sin6_port = htons(port);
   3008a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   3008e:	ba5b      	rev16	r3, r3
   30090:	80e3      	strh	r3, [r4, #6]
	if (dl->set_native_tls) {
   30092:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
   30096:	f893 3a54 	ldrb.w	r3, [r3, #2644]	; 0xa54
   3009a:	b11b      	cbz	r3, 300a4 <CONFIG_FLASH_LOAD_SIZE+0xa4>
		type |= SOCK_NATIVE_TLS;
   3009c:	9b03      	ldr	r3, [sp, #12]
   3009e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   300a2:	9303      	str	r3, [sp, #12]
	dl->fd = socket(dl->remote_addr.sa_family, type, dl->proto);
   300a4:	9903      	ldr	r1, [sp, #12]
   300a6:	f8d4 293c 	ldr.w	r2, [r4, #2364]	; 0x93c
	return z_impl_zsock_socket(family, type, proto);
   300aa:	f7f1 fc8d 	bl	219c8 <z_impl_zsock_socket>
	if (dl->fd < 0) {
   300ae:	2800      	cmp	r0, #0
   300b0:	4606      	mov	r6, r0
	dl->fd = socket(dl->remote_addr.sa_family, type, dl->proto);
   300b2:	6020      	str	r0, [r4, #0]
	if (dl->fd < 0) {
   300b4:	da22      	bge.n	300fc <CONFIG_FLASH_LOAD_SIZE+0xfc>
		LOG_ERR("Failed to create socket, err %d", errno);
   300b6:	f00d fc49 	bl	3d94c <__errno>
   300ba:	2145      	movs	r1, #69	; 0x45
   300bc:	6802      	ldr	r2, [r0, #0]
   300be:	485f      	ldr	r0, [pc, #380]	; (3023c <CONFIG_FLASH_LOAD_SIZE+0x23c>)
   300c0:	f00c fe05 	bl	3ccce <z_log_minimal_printk>
		return -errno;
   300c4:	f00d fc42 	bl	3d94c <__errno>
   300c8:	6805      	ldr	r5, [r0, #0]
   300ca:	426d      	negs	r5, r5
   300cc:	e7b9      	b.n	30042 <CONFIG_FLASH_LOAD_SIZE+0x42>
		switch (dl->proto) {
   300ce:	f240 1211 	movw	r2, #273	; 0x111
   300d2:	4293      	cmp	r3, r2
   300d4:	d1d2      	bne.n	3007c <CONFIG_FLASH_LOAD_SIZE+0x7c>
			port = 5684;
   300d6:	f241 6334 	movw	r3, #5684	; 0x1634
   300da:	e001      	b.n	300e0 <CONFIG_FLASH_LOAD_SIZE+0xe0>
			port = 443;
   300dc:	f240 13bb 	movw	r3, #443	; 0x1bb
			port = 5683;
   300e0:	f8ad 3008 	strh.w	r3, [sp, #8]
			break;
   300e4:	e7ca      	b.n	3007c <CONFIG_FLASH_LOAD_SIZE+0x7c>
			port = 80;
   300e6:	2350      	movs	r3, #80	; 0x50
   300e8:	e7fa      	b.n	300e0 <CONFIG_FLASH_LOAD_SIZE+0xe0>
			port = 5683;
   300ea:	f241 6333 	movw	r3, #5683	; 0x1633
   300ee:	e7f7      	b.n	300e0 <CONFIG_FLASH_LOAD_SIZE+0xe0>
		SIN(&dl->remote_addr)->sin_port = htons(port);
   300f0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		addrlen = sizeof(struct sockaddr_in);
   300f4:	2708      	movs	r7, #8
		SIN(&dl->remote_addr)->sin_port = htons(port);
   300f6:	ba5b      	rev16	r3, r3
   300f8:	80e3      	strh	r3, [r4, #6]
		break;
   300fa:	e7ca      	b.n	30092 <CONFIG_FLASH_LOAD_SIZE+0x92>
	if (dl->config.pdn_id) {
   300fc:	f894 9930 	ldrb.w	r9, [r4, #2352]	; 0x930
   30100:	f1b9 0f00 	cmp.w	r9, #0
   30104:	d02a      	beq.n	3015c <CONFIG_FLASH_LOAD_SIZE+0x15c>
	char buf[8] = {0};
   30106:	2300      	movs	r3, #0
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   30108:	2108      	movs	r1, #8
	char buf[8] = {0};
   3010a:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   3010e:	4a4c      	ldr	r2, [pc, #304]	; (30240 <CONFIG_FLASH_LOAD_SIZE+0x240>)
   30110:	464b      	mov	r3, r9
   30112:	a818      	add	r0, sp, #96	; 0x60
   30114:	f00a fb52 	bl	3a7bc <sniprintf>
	LOG_INF("Binding to PDN ID: %s", log_strdup(buf));
   30118:	2149      	movs	r1, #73	; 0x49
   3011a:	aa18      	add	r2, sp, #96	; 0x60
   3011c:	4849      	ldr	r0, [pc, #292]	; (30244 <CONFIG_FLASH_LOAD_SIZE+0x244>)
   3011e:	f00c fdd6 	bl	3ccce <z_log_minimal_printk>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &buf, strlen(buf));
   30122:	a818      	add	r0, sp, #96	; 0x60
   30124:	f7ed f88d 	bl	1d242 <strlen>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   30128:	2219      	movs	r2, #25
   3012a:	9000      	str	r0, [sp, #0]
   3012c:	2101      	movs	r1, #1
   3012e:	4630      	mov	r0, r6
   30130:	ab18      	add	r3, sp, #96	; 0x60
   30132:	f00d fa0c 	bl	3d54e <z_impl_zsock_setsockopt>
	if (err) {
   30136:	b188      	cbz	r0, 3015c <CONFIG_FLASH_LOAD_SIZE+0x15c>
		LOG_ERR("Failed to bind socket to PDN ID %d, err %d",
   30138:	f00d fc08 	bl	3d94c <__errno>
   3013c:	464a      	mov	r2, r9
   3013e:	6803      	ldr	r3, [r0, #0]
   30140:	2145      	movs	r1, #69	; 0x45
   30142:	4841      	ldr	r0, [pc, #260]	; (30248 <CONFIG_FLASH_LOAD_SIZE+0x248>)
   30144:	f00c fdc3 	bl	3ccce <z_log_minimal_printk>
		return -ENETDOWN;
   30148:	f06f 0672 	mvn.w	r6, #114	; 0x72
		close(dl->fd);
   3014c:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   3014e:	f00d f907 	bl	3d360 <z_impl_zsock_close>
		dl->fd = -1;
   30152:	f04f 33ff 	mov.w	r3, #4294967295
   30156:	4635      	mov	r5, r6
   30158:	6023      	str	r3, [r4, #0]
   3015a:	e772      	b.n	30042 <CONFIG_FLASH_LOAD_SIZE+0x42>
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   3015c:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
   30160:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   30164:	d004      	beq.n	30170 <CONFIG_FLASH_LOAD_SIZE+0x170>
   30166:	f240 1211 	movw	r2, #273	; 0x111
   3016a:	4293      	cmp	r3, r2
   3016c:	f040 8094 	bne.w	30298 <CONFIG_FLASH_LOAD_SIZE+0x298>
	     && (dl->config.sec_tag != -1)) {
   30170:	f8d4 692c 	ldr.w	r6, [r4, #2348]	; 0x92c
   30174:	1c73      	adds	r3, r6, #1
   30176:	f000 808f 	beq.w	30298 <CONFIG_FLASH_LOAD_SIZE+0x298>
	verify = REQUIRED;
   3017a:	2302      	movs	r3, #2
		err = socket_sectag_set(dl->fd, dl->config.sec_tag);
   3017c:	f8d4 9000 	ldr.w	r9, [r4]
	sec_tag_t sec_tag_list[] = { sec_tag };
   30180:	9618      	str	r6, [sp, #96]	; 0x60
	verify = REQUIRED;
   30182:	9304      	str	r3, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   30184:	f04f 0a04 	mov.w	sl, #4
   30188:	2205      	movs	r2, #5
   3018a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3018e:	4648      	mov	r0, r9
   30190:	f8cd a000 	str.w	sl, [sp]
   30194:	ab04      	add	r3, sp, #16
   30196:	f00d f9da 	bl	3d54e <z_impl_zsock_setsockopt>
	if (err) {
   3019a:	b360      	cbz	r0, 301f6 <CONFIG_FLASH_LOAD_SIZE+0x1f6>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   3019c:	f00d fbd6 	bl	3d94c <__errno>
   301a0:	2145      	movs	r1, #69	; 0x45
   301a2:	6802      	ldr	r2, [r0, #0]
   301a4:	4829      	ldr	r0, [pc, #164]	; (3024c <CONFIG_FLASH_LOAD_SIZE+0x24c>)
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   301a6:	f00c fd92 	bl	3ccce <z_log_minimal_printk>
		return -errno;
   301aa:	f00d fbcf 	bl	3d94c <__errno>
   301ae:	6806      	ldr	r6, [r0, #0]
   301b0:	4276      	negs	r6, r6
		if (err) {
   301b2:	2e00      	cmp	r6, #0
   301b4:	d1ca      	bne.n	3014c <CONFIG_FLASH_LOAD_SIZE+0x14c>
		if (dl->config.set_tls_hostname) {
   301b6:	f894 3938 	ldrb.w	r3, [r4, #2360]	; 0x938
   301ba:	2b00      	cmp	r3, #0
   301bc:	d06c      	beq.n	30298 <CONFIG_FLASH_LOAD_SIZE+0x298>
			err = socket_tls_hostname_set(dl->fd, dl->host);
   301be:	f8d4 6924 	ldr.w	r6, [r4, #2340]	; 0x924
   301c2:	f8d4 9000 	ldr.w	r9, [r4]
	__ASSERT_NO_MSG(hostname);
   301c6:	b946      	cbnz	r6, 301da <CONFIG_FLASH_LOAD_SIZE+0x1da>
   301c8:	4921      	ldr	r1, [pc, #132]	; (30250 <CONFIG_FLASH_LOAD_SIZE+0x250>)
   301ca:	4822      	ldr	r0, [pc, #136]	; (30254 <CONFIG_FLASH_LOAD_SIZE+0x254>)
   301cc:	2286      	movs	r2, #134	; 0x86
   301ce:	f00c fd44 	bl	3cc5a <assert_print>
   301d2:	2186      	movs	r1, #134	; 0x86
   301d4:	481e      	ldr	r0, [pc, #120]	; (30250 <CONFIG_FLASH_LOAD_SIZE+0x250>)
   301d6:	f00c fd39 	bl	3cc4c <assert_post_action>
	err = url_parse_host(hostname, parsed_host, sizeof(parsed_host));
   301da:	4630      	mov	r0, r6
   301dc:	2280      	movs	r2, #128	; 0x80
   301de:	a918      	add	r1, sp, #96	; 0x60
   301e0:	f000 fa42 	bl	30668 <url_parse_host>
	if (err) {
   301e4:	4606      	mov	r6, r0
   301e6:	2800      	cmp	r0, #0
   301e8:	d03c      	beq.n	30264 <CONFIG_FLASH_LOAD_SIZE+0x264>
		LOG_ERR("Failed to parse host, err %d", err);
   301ea:	4602      	mov	r2, r0
   301ec:	2145      	movs	r1, #69	; 0x45
   301ee:	481a      	ldr	r0, [pc, #104]	; (30258 <CONFIG_FLASH_LOAD_SIZE+0x258>)
   301f0:	f00c fd6d 	bl	3ccce <z_log_minimal_printk>
			if (err) {
   301f4:	e7aa      	b.n	3014c <CONFIG_FLASH_LOAD_SIZE+0x14c>
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   301f6:	4632      	mov	r2, r6
   301f8:	2149      	movs	r1, #73	; 0x49
   301fa:	4818      	ldr	r0, [pc, #96]	; (3025c <CONFIG_FLASH_LOAD_SIZE+0x25c>)
   301fc:	f00c fd67 	bl	3ccce <z_log_minimal_printk>
   30200:	2201      	movs	r2, #1
   30202:	f44f 718d 	mov.w	r1, #282	; 0x11a
   30206:	4648      	mov	r0, r9
   30208:	f8cd a000 	str.w	sl, [sp]
   3020c:	ab18      	add	r3, sp, #96	; 0x60
   3020e:	f00d f99e 	bl	3d54e <z_impl_zsock_setsockopt>
	if (err) {
   30212:	2800      	cmp	r0, #0
   30214:	d0cf      	beq.n	301b6 <CONFIG_FLASH_LOAD_SIZE+0x1b6>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   30216:	f00d fb99 	bl	3d94c <__errno>
   3021a:	2145      	movs	r1, #69	; 0x45
   3021c:	6802      	ldr	r2, [r0, #0]
   3021e:	4810      	ldr	r0, [pc, #64]	; (30260 <CONFIG_FLASH_LOAD_SIZE+0x260>)
   30220:	e7c1      	b.n	301a6 <CONFIG_FLASH_LOAD_SIZE+0x1a6>
   30222:	bf00      	nop
   30224:	0004ab70 	.word	0x0004ab70
   30228:	00046657 	.word	0x00046657
   3022c:	0004aba8 	.word	0x0004aba8
   30230:	0004abad 	.word	0x0004abad
   30234:	0004abd6 	.word	0x0004abd6
   30238:	0004ac01 	.word	0x0004ac01
   3023c:	0004ac3a 	.word	0x0004ac3a
   30240:	0004ac5f 	.word	0x0004ac5f
   30244:	0004ac65 	.word	0x0004ac65
   30248:	0004ac80 	.word	0x0004ac80
   3024c:	0004acb0 	.word	0x0004acb0
   30250:	0004aaef 	.word	0x0004aaef
   30254:	00044263 	.word	0x00044263
   30258:	0004ad3c 	.word	0x0004ad3c
   3025c:	0004ace1 	.word	0x0004ace1
   30260:	0004ad09 	.word	0x0004ad09
	err = setsockopt(fd, SOL_TLS, TLS_HOSTNAME, parsed_host,
   30264:	a818      	add	r0, sp, #96	; 0x60
   30266:	f7ec ffec 	bl	1d242 <strlen>
   3026a:	2202      	movs	r2, #2
   3026c:	9000      	str	r0, [sp, #0]
   3026e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   30272:	4648      	mov	r0, r9
   30274:	ab18      	add	r3, sp, #96	; 0x60
   30276:	f00d f96a 	bl	3d54e <z_impl_zsock_setsockopt>
	if (err) {
   3027a:	b168      	cbz	r0, 30298 <CONFIG_FLASH_LOAD_SIZE+0x298>
		LOG_ERR("Failed to setup TLS hostname (%s), errno %d",
   3027c:	f00d fb66 	bl	3d94c <__errno>
   30280:	2145      	movs	r1, #69	; 0x45
   30282:	6803      	ldr	r3, [r0, #0]
   30284:	aa18      	add	r2, sp, #96	; 0x60
   30286:	4816      	ldr	r0, [pc, #88]	; (302e0 <CONFIG_FLASH_LOAD_SIZE+0x2e0>)
   30288:	f00c fd21 	bl	3ccce <z_log_minimal_printk>
		return -errno;
   3028c:	f00d fb5e 	bl	3d94c <__errno>
   30290:	6806      	ldr	r6, [r0, #0]
			if (err) {
   30292:	b10e      	cbz	r6, 30298 <CONFIG_FLASH_LOAD_SIZE+0x298>
		err = -errno;
   30294:	4276      	negs	r6, r6
   30296:	e759      	b.n	3014c <CONFIG_FLASH_LOAD_SIZE+0x14c>
	LOG_INF("Connecting to %s", log_strdup(dl->host));
   30298:	2149      	movs	r1, #73	; 0x49
   3029a:	f8d4 2924 	ldr.w	r2, [r4, #2340]	; 0x924
   3029e:	4811      	ldr	r0, [pc, #68]	; (302e4 <CONFIG_FLASH_LOAD_SIZE+0x2e4>)
   302a0:	f00c fd15 	bl	3ccce <z_log_minimal_printk>
	err = connect(dl->fd, &dl->remote_addr, addrlen);
   302a4:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   302a6:	463a      	mov	r2, r7
   302a8:	4641      	mov	r1, r8
   302aa:	f00d f87d 	bl	3d3a8 <z_impl_zsock_connect>
	if (err) {
   302ae:	2800      	cmp	r0, #0
   302b0:	f43f aec7 	beq.w	30042 <CONFIG_FLASH_LOAD_SIZE+0x42>
		LOG_ERR("Unable to connect, errno %d", errno);
   302b4:	f00d fb4a 	bl	3d94c <__errno>
   302b8:	2145      	movs	r1, #69	; 0x45
   302ba:	6802      	ldr	r2, [r0, #0]
   302bc:	480a      	ldr	r0, [pc, #40]	; (302e8 <CONFIG_FLASH_LOAD_SIZE+0x2e8>)
   302be:	f00c fd06 	bl	3ccce <z_log_minimal_printk>
		err = -errno;
   302c2:	f00d fb43 	bl	3d94c <__errno>
   302c6:	6806      	ldr	r6, [r0, #0]
	if (err) {
   302c8:	2e00      	cmp	r6, #0
   302ca:	d1e3      	bne.n	30294 <CONFIG_FLASH_LOAD_SIZE+0x294>
   302cc:	e6b9      	b.n	30042 <CONFIG_FLASH_LOAD_SIZE+0x42>
			return -EPROTONOSUPPORT;
   302ce:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   302d2:	e6b6      	b.n	30042 <CONFIG_FLASH_LOAD_SIZE+0x42>
	switch (dl->remote_addr.sa_family) {
   302d4:	f06f 0569 	mvn.w	r5, #105	; 0x69
   302d8:	e6b3      	b.n	30042 <CONFIG_FLASH_LOAD_SIZE+0x42>
		return -EINVAL;
   302da:	f06f 0515 	mvn.w	r5, #21
   302de:	e63e      	b.n	2ff5e <download_client_connect+0x3a>
   302e0:	0004ad5e 	.word	0x0004ad5e
   302e4:	0004ad8f 	.word	0x0004ad8f
   302e8:	0004ada5 	.word	0x0004ada5

000302ec <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   302ec:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   302ee:	4604      	mov	r4, r0
   302f0:	b1a8      	cbz	r0, 3031e <download_client_disconnect+0x32>
   302f2:	6800      	ldr	r0, [r0, #0]
   302f4:	2800      	cmp	r0, #0
   302f6:	db12      	blt.n	3031e <download_client_disconnect+0x32>
	return z_impl_zsock_close(sock);
   302f8:	f00d f832 	bl	3d360 <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   302fc:	b158      	cbz	r0, 30316 <download_client_disconnect+0x2a>
		LOG_ERR("Failed to close socket, errno %d", errno);
   302fe:	f00d fb25 	bl	3d94c <__errno>
   30302:	2145      	movs	r1, #69	; 0x45
   30304:	6802      	ldr	r2, [r0, #0]
   30306:	4807      	ldr	r0, [pc, #28]	; (30324 <download_client_disconnect+0x38>)
   30308:	f00c fce1 	bl	3ccce <z_log_minimal_printk>
		return -errno;
   3030c:	f00d fb1e 	bl	3d94c <__errno>
   30310:	6800      	ldr	r0, [r0, #0]
   30312:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   30314:	bd10      	pop	{r4, pc}
	client->fd = -1;
   30316:	f04f 33ff 	mov.w	r3, #4294967295
   3031a:	6023      	str	r3, [r4, #0]
	return 0;
   3031c:	e7fa      	b.n	30314 <download_client_disconnect+0x28>
		return -EINVAL;
   3031e:	f06f 0015 	mvn.w	r0, #21
   30322:	e7f7      	b.n	30314 <download_client_disconnect+0x28>
   30324:	0004adc6 	.word	0x0004adc6

00030328 <reconnect>:
{
   30328:	b510      	push	{r4, lr}
   3032a:	4604      	mov	r4, r0
	LOG_INF("Reconnecting..");
   3032c:	2149      	movs	r1, #73	; 0x49
   3032e:	4808      	ldr	r0, [pc, #32]	; (30350 <reconnect+0x28>)
   30330:	f00c fccd 	bl	3ccce <z_log_minimal_printk>
	err = download_client_disconnect(dl);
   30334:	4620      	mov	r0, r4
   30336:	f7ff ffd9 	bl	302ec <download_client_disconnect>
	if (err) {
   3033a:	b940      	cbnz	r0, 3034e <reconnect+0x26>
	err = download_client_connect(dl, dl->host, &dl->config);
   3033c:	4620      	mov	r0, r4
   3033e:	f8d4 1924 	ldr.w	r1, [r4, #2340]	; 0x924
   30342:	f604 122c 	addw	r2, r4, #2348	; 0x92c
}
   30346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   3034a:	f7ff bdeb 	b.w	2ff24 <download_client_connect>
}
   3034e:	bd10      	pop	{r4, pc}
   30350:	0004adec 	.word	0x0004adec

00030354 <download_thread>:
{
   30354:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   30358:	4605      	mov	r5, r0
	int rc = 0;
   3035a:	2400      	movs	r4, #0
	struct timeval timeo = {
   3035c:	f04f 0a1e 	mov.w	sl, #30
   30360:	f04f 0b00 	mov.w	fp, #0
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   30364:	4f84      	ldr	r7, [pc, #528]	; (30578 <download_thread+0x224>)
{
   30366:	b086      	sub	sp, #24
	k_thread_suspend(dl->tid);
   30368:	f8d5 097c 	ldr.w	r0, [r5, #2428]	; 0x97c
	z_impl_k_thread_suspend(thread);
   3036c:	f007 ffd0 	bl	38310 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   30370:	f8df 822c 	ldr.w	r8, [pc, #556]	; 305a0 <download_thread+0x24c>
   30374:	f640 03fb 	movw	r3, #2299	; 0x8fb
   30378:	f8d5 2918 	ldr.w	r2, [r5, #2328]	; 0x918
   3037c:	429a      	cmp	r2, r3
   3037e:	d90a      	bls.n	30396 <download_thread+0x42>
   30380:	4639      	mov	r1, r7
   30382:	4640      	mov	r0, r8
   30384:	f240 12e7 	movw	r2, #487	; 0x1e7
   30388:	f00c fc67 	bl	3cc5a <assert_print>
   3038c:	f240 11e7 	movw	r1, #487	; 0x1e7
   30390:	4638      	mov	r0, r7
   30392:	f00c fc5b 	bl	3cc4c <assert_post_action>
		if (sizeof(dl->buf) - dl->offset == 0) {
   30396:	f640 03fc 	movw	r3, #2300	; 0x8fc
   3039a:	f8d5 2918 	ldr.w	r2, [r5, #2328]	; 0x918
   3039e:	429a      	cmp	r2, r3
   303a0:	d108      	bne.n	303b4 <download_thread+0x60>
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   303a2:	2145      	movs	r1, #69	; 0x45
   303a4:	4875      	ldr	r0, [pc, #468]	; (3057c <download_thread+0x228>)
   303a6:	f00c fc92 	bl	3ccce <z_log_minimal_printk>
			error_evt_send(dl, E2BIG);
   303aa:	2107      	movs	r1, #7
				error_evt_send(dl, EHOSTDOWN);
   303ac:	4628      	mov	r0, r5
   303ae:	f00f fafa 	bl	3f9a6 <error_evt_send>
				break;
   303b2:	e7d9      	b.n	30368 <download_thread+0x14>
	switch (dl->proto) {
   303b4:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
   303b8:	2b06      	cmp	r3, #6
   303ba:	d002      	beq.n	303c2 <download_thread+0x6e>
   303bc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   303c0:	d138      	bne.n	30434 <download_thread+0xe0>
	struct timeval timeo = {
   303c2:	2300      	movs	r3, #0
   303c4:	e9cd ab02 	strd	sl, fp, [sp, #8]
	err = set_recv_socket_timeout(dl->fd, timeout);
   303c8:	6828      	ldr	r0, [r5, #0]
	struct timeval timeo = {
   303ca:	9304      	str	r3, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   303cc:	2310      	movs	r3, #16
   303ce:	2214      	movs	r2, #20
   303d0:	9300      	str	r3, [sp, #0]
   303d2:	2101      	movs	r1, #1
   303d4:	ab02      	add	r3, sp, #8
   303d6:	f00d f8ba 	bl	3d54e <z_impl_zsock_setsockopt>
	if (err) {
   303da:	4603      	mov	r3, r0
   303dc:	b148      	cbz	r0, 303f2 <download_thread+0x9e>
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   303de:	f00d fab5 	bl	3d94c <__errno>
   303e2:	2157      	movs	r1, #87	; 0x57
   303e4:	6802      	ldr	r2, [r0, #0]
   303e6:	4866      	ldr	r0, [pc, #408]	; (30580 <download_thread+0x22c>)
   303e8:	f00c fc71 	bl	3ccce <z_log_minimal_printk>
		return -1;
   303ec:	f04f 36ff 	mov.w	r6, #4294967295
   303f0:	e00d      	b.n	3040e <download_thread+0xba>
	return recv(dl->fd, dl->buf + dl->offset, sizeof(dl->buf) - dl->offset, 0);
   303f2:	6828      	ldr	r0, [r5, #0]
   303f4:	f8d5 6918 	ldr.w	r6, [r5, #2328]	; 0x918
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   303f8:	f5c6 620f 	rsb	r2, r6, #2288	; 0x8f0
   303fc:	f105 011c 	add.w	r1, r5, #28
   30400:	4431      	add	r1, r6
   30402:	e9cd 3300 	strd	r3, r3, [sp]
   30406:	320c      	adds	r2, #12
   30408:	f00d f84c 	bl	3d4a4 <z_impl_zsock_recvfrom>
   3040c:	4606      	mov	r6, r0
		if ((len == 0) || (len == -1)) {
   3040e:	1e73      	subs	r3, r6, #1
   30410:	3303      	adds	r3, #3
   30412:	d94b      	bls.n	304ac <download_thread+0x158>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   30414:	f8d5 3918 	ldr.w	r3, [r5, #2328]	; 0x918
   30418:	b18b      	cbz	r3, 3043e <download_thread+0xea>
   3041a:	f895 3940 	ldrb.w	r3, [r5, #2368]	; 0x940
   3041e:	b173      	cbz	r3, 3043e <download_thread+0xea>
				rc = fragment_evt_send(dl);
   30420:	4628      	mov	r0, r5
   30422:	f7ff fce5 	bl	2fdf0 <fragment_evt_send>
				if (rc) {
   30426:	4604      	mov	r4, r0
   30428:	b148      	cbz	r0, 3043e <download_thread+0xea>
			LOG_INF("Fragment refused, download stopped.");
   3042a:	2149      	movs	r1, #73	; 0x49
   3042c:	4855      	ldr	r0, [pc, #340]	; (30584 <download_thread+0x230>)
   3042e:	f00c fc4e 	bl	3ccce <z_log_minimal_printk>
   30432:	e799      	b.n	30368 <download_thread+0x14>
		LOG_ERR("unhandled proto");
   30434:	2145      	movs	r1, #69	; 0x45
   30436:	4854      	ldr	r0, [pc, #336]	; (30588 <download_thread+0x234>)
   30438:	f00c fc49 	bl	3ccce <z_log_minimal_printk>
   3043c:	e7d6      	b.n	303ec <download_thread+0x98>
			if (len == -1) {
   3043e:	3601      	adds	r6, #1
   30440:	d12e      	bne.n	304a0 <download_thread+0x14c>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   30442:	f00d fa83 	bl	3d94c <__errno>
   30446:	6803      	ldr	r3, [r0, #0]
   30448:	2b74      	cmp	r3, #116	; 0x74
   3044a:	d11d      	bne.n	30488 <download_thread+0x134>
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   3044c:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
   30450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   30454:	2b11      	cmp	r3, #17
   30456:	d073      	beq.n	30540 <download_thread+0x1ec>
					error_cause = ETIMEDOUT;
   30458:	2474      	movs	r4, #116	; 0x74
				LOG_ERR("Error in recv(), errno %d", errno);
   3045a:	f00d fa77 	bl	3d94c <__errno>
   3045e:	2145      	movs	r1, #69	; 0x45
   30460:	6802      	ldr	r2, [r0, #0]
   30462:	484a      	ldr	r0, [pc, #296]	; (3058c <download_thread+0x238>)
   30464:	f00c fc33 	bl	3ccce <z_log_minimal_printk>
			rc = error_evt_send(dl, error_cause);
   30468:	4621      	mov	r1, r4
   3046a:	4628      	mov	r0, r5
   3046c:	f00f fa9b 	bl	3f9a6 <error_evt_send>
			if (rc) {
   30470:	4604      	mov	r4, r0
   30472:	2800      	cmp	r0, #0
   30474:	f47f af78 	bne.w	30368 <download_thread+0x14>
			rc = reconnect(dl);
   30478:	4628      	mov	r0, r5
   3047a:	f7ff ff55 	bl	30328 <reconnect>
			if (rc) {
   3047e:	4604      	mov	r4, r0
   30480:	2800      	cmp	r0, #0
   30482:	d05d      	beq.n	30540 <download_thread+0x1ec>
				error_evt_send(dl, EHOSTDOWN);
   30484:	2175      	movs	r1, #117	; 0x75
   30486:	e791      	b.n	303ac <download_thread+0x58>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   30488:	f00d fa60 	bl	3d94c <__errno>
   3048c:	6803      	ldr	r3, [r0, #0]
   3048e:	2b0b      	cmp	r3, #11
   30490:	d0dc      	beq.n	3044c <download_thread+0xf8>
				    (errno == EAGAIN)) {
   30492:	f00d fa5b 	bl	3d94c <__errno>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   30496:	6803      	ldr	r3, [r0, #0]
   30498:	2b0b      	cmp	r3, #11
   3049a:	d0d7      	beq.n	3044c <download_thread+0xf8>
			error_cause = ECONNRESET;
   3049c:	2468      	movs	r4, #104	; 0x68
   3049e:	e7dc      	b.n	3045a <download_thread+0x106>
				LOG_WRN("Peer closed connection!");
   304a0:	2157      	movs	r1, #87	; 0x57
   304a2:	483b      	ldr	r0, [pc, #236]	; (30590 <download_thread+0x23c>)
   304a4:	f00c fc13 	bl	3ccce <z_log_minimal_printk>
			error_cause = ECONNRESET;
   304a8:	2468      	movs	r4, #104	; 0x68
   304aa:	e7dd      	b.n	30468 <download_thread+0x114>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   304ac:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
   304b0:	2b06      	cmp	r3, #6
   304b2:	d002      	beq.n	304ba <download_thread+0x166>
   304b4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   304b8:	d106      	bne.n	304c8 <download_thread+0x174>
			rc = http_parse(client, len);
   304ba:	4631      	mov	r1, r6
   304bc:	4628      	mov	r0, r5
   304be:	f000 f9e1 	bl	30884 <http_parse>
			if (rc > 0) {
   304c2:	1e04      	subs	r4, r0, #0
   304c4:	f73f af56 	bgt.w	30374 <download_thread+0x20>
		if (rc < 0) {
   304c8:	2c00      	cmp	r4, #0
   304ca:	da01      	bge.n	304d0 <download_thread+0x17c>
			error_evt_send(dl, EBADMSG);
   304cc:	214d      	movs	r1, #77	; 0x4d
   304ce:	e76d      	b.n	303ac <download_thread+0x58>
		if (dl->file_size) {
   304d0:	f8d5 391c 	ldr.w	r3, [r5, #2332]	; 0x91c
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   304d4:	f8d5 2920 	ldr.w	r2, [r5, #2336]	; 0x920
		if (dl->file_size) {
   304d8:	b32b      	cbz	r3, 30526 <download_thread+0x1d2>
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   304da:	2164      	movs	r1, #100	; 0x64
   304dc:	4351      	muls	r1, r2
   304de:	fbb1 f1f3 	udiv	r1, r1, r3
   304e2:	482c      	ldr	r0, [pc, #176]	; (30594 <download_thread+0x240>)
   304e4:	9100      	str	r1, [sp, #0]
   304e6:	2149      	movs	r1, #73	; 0x49
   304e8:	f00c fbf1 	bl	3ccce <z_log_minimal_printk>
		rc = fragment_evt_send(dl);
   304ec:	4628      	mov	r0, r5
   304ee:	f7ff fc7f 	bl	2fdf0 <fragment_evt_send>
		if (rc) {
   304f2:	4604      	mov	r4, r0
   304f4:	2800      	cmp	r0, #0
   304f6:	d198      	bne.n	3042a <download_thread+0xd6>
		if (dl->progress == dl->file_size) {
   304f8:	f8d5 2920 	ldr.w	r2, [r5, #2336]	; 0x920
   304fc:	f8d5 391c 	ldr.w	r3, [r5, #2332]	; 0x91c
   30500:	429a      	cmp	r2, r3
   30502:	d115      	bne.n	30530 <download_thread+0x1dc>
			LOG_INF("Download complete");
   30504:	2149      	movs	r1, #73	; 0x49
   30506:	4824      	ldr	r0, [pc, #144]	; (30598 <download_thread+0x244>)
   30508:	f00c fbe1 	bl	3ccce <z_log_minimal_printk>
			const struct download_client_evt evt = {
   3050c:	2302      	movs	r3, #2
   3050e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   30512:	f88d 3008 	strb.w	r3, [sp, #8]
			dl->callback(&evt);
   30516:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
   3051a:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
			const struct download_client_evt evt = {
   3051e:	9404      	str	r4, [sp, #16]
			dl->callback(&evt);
   30520:	a802      	add	r0, sp, #8
   30522:	4798      	blx	r3
			break;
   30524:	e720      	b.n	30368 <download_thread+0x14>
			LOG_INF("Downloaded %u bytes", dl->progress);
   30526:	2149      	movs	r1, #73	; 0x49
   30528:	481c      	ldr	r0, [pc, #112]	; (3059c <download_thread+0x248>)
   3052a:	f00c fbd0 	bl	3ccce <z_log_minimal_printk>
   3052e:	e7dd      	b.n	304ec <download_thread+0x198>
		if (dl->http.connection_close) {
   30530:	f895 3941 	ldrb.w	r3, [r5, #2369]	; 0x941
   30534:	b123      	cbz	r3, 30540 <download_thread+0x1ec>
			dl->http.connection_close = false;
   30536:	f885 0941 	strb.w	r0, [r5, #2369]	; 0x941
			reconnect(dl);
   3053a:	4628      	mov	r0, r5
   3053c:	f7ff fef4 	bl	30328 <reconnect>
		dl->offset = 0;
   30540:	2600      	movs	r6, #0
			rc = request_send(dl);
   30542:	4628      	mov	r0, r5
		dl->offset = 0;
   30544:	f8c5 6918 	str.w	r6, [r5, #2328]	; 0x918
			dl->http.has_header = false;
   30548:	f885 6940 	strb.w	r6, [r5, #2368]	; 0x940
			rc = request_send(dl);
   3054c:	f00f fa3d 	bl	3f9ca <request_send>
			if (rc) {
   30550:	4604      	mov	r4, r0
   30552:	2800      	cmp	r0, #0
   30554:	f43f af0e 	beq.w	30374 <download_thread+0x20>
				rc = error_evt_send(dl, ECONNRESET);
   30558:	2168      	movs	r1, #104	; 0x68
   3055a:	4628      	mov	r0, r5
   3055c:	f00f fa23 	bl	3f9a6 <error_evt_send>
				if (rc) {
   30560:	4604      	mov	r4, r0
   30562:	2800      	cmp	r0, #0
   30564:	f47f af00 	bne.w	30368 <download_thread+0x14>
				rc = reconnect(dl);
   30568:	4628      	mov	r0, r5
   3056a:	f7ff fedd 	bl	30328 <reconnect>
				if (rc) {
   3056e:	4604      	mov	r4, r0
   30570:	2800      	cmp	r0, #0
   30572:	d0e6      	beq.n	30542 <download_thread+0x1ee>
   30574:	e786      	b.n	30484 <download_thread+0x130>
   30576:	bf00      	nop
   30578:	0004aaef 	.word	0x0004aaef
   3057c:	0004ae00 	.word	0x0004ae00
   30580:	0004ab34 	.word	0x0004ab34
   30584:	0004ae47 	.word	0x0004ae47
   30588:	0004ae32 	.word	0x0004ae32
   3058c:	0004ae70 	.word	0x0004ae70
   30590:	0004ae8f 	.word	0x0004ae8f
   30594:	0004aeac 	.word	0x0004aeac
   30598:	0004a52a 	.word	0x0004a52a
   3059c:	0004aecf 	.word	0x0004aecf
   305a0:	00044263 	.word	0x00044263

000305a4 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   305a4:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (client == NULL) {
   305a6:	4604      	mov	r4, r0
   305a8:	b1f8      	cbz	r0, 305ea <download_client_start+0x46>
		return -EINVAL;
	}

	if (client->fd < 0) {
   305aa:	6803      	ldr	r3, [r0, #0]
   305ac:	2b00      	cmp	r3, #0
   305ae:	db1f      	blt.n	305f0 <download_client_start+0x4c>
		return -ENOTCONN;
	}

	client->file = file;
	client->file_size = 0;
   305b0:	2300      	movs	r3, #0
	client->file = file;
   305b2:	f8c0 1928 	str.w	r1, [r0, #2344]	; 0x928
	client->file_size = 0;
   305b6:	f8c0 391c 	str.w	r3, [r0, #2332]	; 0x91c
	client->progress = from;
   305ba:	f8c0 2920 	str.w	r2, [r0, #2336]	; 0x920

	client->offset = 0;
   305be:	f8c0 3918 	str.w	r3, [r0, #2328]	; 0x918
	client->http.has_header = false;
   305c2:	f880 3940 	strb.w	r3, [r0, #2368]	; 0x940
		if (IS_ENABLED(CONFIG_COAP)) {
			coap_block_init(client, from);
		}
	}

	err = request_send(client);
   305c6:	f00f fa00 	bl	3f9ca <request_send>
	if (err) {
   305ca:	4605      	mov	r5, r0
   305cc:	b958      	cbnz	r0, 305e6 <download_client_start+0x42>
		return err;
	}

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   305ce:	2149      	movs	r1, #73	; 0x49
   305d0:	f8d4 3920 	ldr.w	r3, [r4, #2336]	; 0x920
   305d4:	f8d4 2928 	ldr.w	r2, [r4, #2344]	; 0x928
   305d8:	4807      	ldr	r0, [pc, #28]	; (305f8 <download_client_start+0x54>)
   305da:	f00c fb78 	bl	3ccce <z_log_minimal_printk>
		client->progress);

	/* Let the thread run */
	k_thread_resume(client->tid);
   305de:	f8d4 097c 	ldr.w	r0, [r4, #2428]	; 0x97c
	z_impl_k_thread_resume(thread);
   305e2:	f007 fcbd 	bl	37f60 <z_impl_k_thread_resume>

	return 0;
}
   305e6:	4628      	mov	r0, r5
   305e8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   305ea:	f06f 0515 	mvn.w	r5, #21
   305ee:	e7fa      	b.n	305e6 <download_client_start+0x42>
		return -ENOTCONN;
   305f0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   305f4:	e7f7      	b.n	305e6 <download_client_start+0x42>
   305f6:	bf00      	nop
   305f8:	0004aee8 	.word	0x0004aee8

000305fc <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   305fc:	b570      	push	{r4, r5, r6, lr}
   305fe:	460d      	mov	r5, r1
   30600:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   30602:	4915      	ldr	r1, [pc, #84]	; (30658 <url_parse_proto+0x5c>)
   30604:	2205      	movs	r2, #5
{
   30606:	4606      	mov	r6, r0
	if (strncmp(url, "https", 5) == 0) {
   30608:	f011 f9ce 	bl	419a8 <strncmp>
   3060c:	b928      	cbnz	r0, 3061a <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   3060e:	f44f 7381 	mov.w	r3, #258	; 0x102
		*type = SOCK_STREAM;
	} else if (strncmp(url, "http", 4) == 0) {
		*proto = IPPROTO_TCP;
   30612:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   30614:	2301      	movs	r3, #1
	} else if (strncmp(url, "coaps", 5) == 0) {
		*proto = IPPROTO_DTLS_1_2;
		*type = SOCK_DGRAM;
	} else if (strncmp(url, "coap", 4) == 0) {
		*proto = IPPROTO_UDP;
		*type = SOCK_DGRAM;
   30616:	6023      	str	r3, [r4, #0]
	} else {
		return -EINVAL;
	}
	return 0;
}
   30618:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   3061a:	2204      	movs	r2, #4
   3061c:	4630      	mov	r0, r6
   3061e:	490f      	ldr	r1, [pc, #60]	; (3065c <url_parse_proto+0x60>)
   30620:	f011 f9c2 	bl	419a8 <strncmp>
   30624:	b908      	cbnz	r0, 3062a <url_parse_proto+0x2e>
		*proto = IPPROTO_TCP;
   30626:	2306      	movs	r3, #6
   30628:	e7f3      	b.n	30612 <url_parse_proto+0x16>
	} else if (strncmp(url, "coaps", 5) == 0) {
   3062a:	2205      	movs	r2, #5
   3062c:	4630      	mov	r0, r6
   3062e:	490c      	ldr	r1, [pc, #48]	; (30660 <url_parse_proto+0x64>)
   30630:	f011 f9ba 	bl	419a8 <strncmp>
   30634:	b920      	cbnz	r0, 30640 <url_parse_proto+0x44>
		*proto = IPPROTO_DTLS_1_2;
   30636:	f240 1311 	movw	r3, #273	; 0x111
		*proto = IPPROTO_UDP;
   3063a:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   3063c:	2302      	movs	r3, #2
   3063e:	e7ea      	b.n	30616 <url_parse_proto+0x1a>
	} else if (strncmp(url, "coap", 4) == 0) {
   30640:	2204      	movs	r2, #4
   30642:	4630      	mov	r0, r6
   30644:	4907      	ldr	r1, [pc, #28]	; (30664 <url_parse_proto+0x68>)
   30646:	f011 f9af 	bl	419a8 <strncmp>
   3064a:	b908      	cbnz	r0, 30650 <url_parse_proto+0x54>
		*proto = IPPROTO_UDP;
   3064c:	2311      	movs	r3, #17
   3064e:	e7f4      	b.n	3063a <url_parse_proto+0x3e>
		return -EINVAL;
   30650:	f06f 0015 	mvn.w	r0, #21
   30654:	e7e0      	b.n	30618 <url_parse_proto+0x1c>
   30656:	bf00      	nop
   30658:	0004af02 	.word	0x0004af02
   3065c:	0004af08 	.word	0x0004af08
   30660:	0004af0d 	.word	0x0004af0d
   30664:	0004af13 	.word	0x0004af13

00030668 <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   30668:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3066a:	4604      	mov	r4, r0
	const char *cur;
	const char *end;

	cur = url;
   3066c:	9001      	str	r0, [sp, #4]
{
   3066e:	460d      	mov	r5, r1

	(void)swallow(&cur, "://");
   30670:	a801      	add	r0, sp, #4
   30672:	4918      	ldr	r1, [pc, #96]	; (306d4 <url_parse_host+0x6c>)
{
   30674:	4616      	mov	r6, r2
	(void)swallow(&cur, "://");
   30676:	f00f f9bd 	bl	3f9f4 <swallow>

	if (cur[0] == '[') {
   3067a:	9801      	ldr	r0, [sp, #4]
   3067c:	7803      	ldrb	r3, [r0, #0]
   3067e:	2b5b      	cmp	r3, #91	; 0x5b
   30680:	d111      	bne.n	306a6 <url_parse_host+0x3e>
		/* literal IPv6 address */
		end = strchr(cur, ']');
   30682:	215d      	movs	r1, #93	; 0x5d
   30684:	f011 f97b 	bl	4197e <strchr>

		if (!end) {
   30688:	b1f0      	cbz	r0, 306c8 <url_parse_host+0x60>
			return -EINVAL;
		}
		++end;
   3068a:	3001      	adds	r0, #1
				end = url + strlen(url) + 1;
			}
		}
	}

	if (end - cur + 1 > len) {
   3068c:	9901      	ldr	r1, [sp, #4]
   3068e:	1a44      	subs	r4, r0, r1
   30690:	1c63      	adds	r3, r4, #1
   30692:	42b3      	cmp	r3, r6
   30694:	d81b      	bhi.n	306ce <url_parse_host+0x66>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30696:	4622      	mov	r2, r4
   30698:	4628      	mov	r0, r5
   3069a:	f010 ff92 	bl	415c2 <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   3069e:	2000      	movs	r0, #0
   306a0:	5528      	strb	r0, [r5, r4]

	return 0;
}
   306a2:	b002      	add	sp, #8
   306a4:	bd70      	pop	{r4, r5, r6, pc}
		end = strchr(cur, ':');
   306a6:	213a      	movs	r1, #58	; 0x3a
   306a8:	f011 f969 	bl	4197e <strchr>
		if (!end) {
   306ac:	2800      	cmp	r0, #0
   306ae:	d1ed      	bne.n	3068c <url_parse_host+0x24>
			end = strchr(cur, '/');
   306b0:	212f      	movs	r1, #47	; 0x2f
   306b2:	9801      	ldr	r0, [sp, #4]
   306b4:	f011 f963 	bl	4197e <strchr>
			if (!end) {
   306b8:	2800      	cmp	r0, #0
   306ba:	d1e7      	bne.n	3068c <url_parse_host+0x24>
				end = url + strlen(url) + 1;
   306bc:	4620      	mov	r0, r4
   306be:	f7ec fdc0 	bl	1d242 <strlen>
   306c2:	1c43      	adds	r3, r0, #1
   306c4:	18e0      	adds	r0, r4, r3
   306c6:	e7e1      	b.n	3068c <url_parse_host+0x24>
			return -EINVAL;
   306c8:	f06f 0015 	mvn.w	r0, #21
   306cc:	e7e9      	b.n	306a2 <url_parse_host+0x3a>
		return -E2BIG;
   306ce:	f06f 0006 	mvn.w	r0, #6
   306d2:	e7e6      	b.n	306a2 <url_parse_host+0x3a>
   306d4:	0004af18 	.word	0x0004af18

000306d8 <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   306d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   306da:	460e      	mov	r6, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   306dc:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   306de:	491b      	ldr	r1, [pc, #108]	; (3074c <url_parse_port+0x74>)
   306e0:	a801      	add	r0, sp, #4
   306e2:	f00f f987 	bl	3f9f4 <swallow>

	if (cur[0] == '[') {
   306e6:	9b01      	ldr	r3, [sp, #4]
   306e8:	781b      	ldrb	r3, [r3, #0]
   306ea:	2b5b      	cmp	r3, #91	; 0x5b
   306ec:	d103      	bne.n	306f6 <url_parse_port+0x1e>
		/* literal IPv6 address */
		swallow(&cur, "]");
   306ee:	4918      	ldr	r1, [pc, #96]	; (30750 <url_parse_port+0x78>)
   306f0:	a801      	add	r0, sp, #4
   306f2:	f00f f97f 	bl	3f9f4 <swallow>
	}

	err = swallow(&cur, ":");
   306f6:	4917      	ldr	r1, [pc, #92]	; (30754 <url_parse_port+0x7c>)
   306f8:	a801      	add	r0, sp, #4
   306fa:	f00f f97b 	bl	3f9f4 <swallow>
	if (err) {
   306fe:	4605      	mov	r5, r0
   30700:	bb08      	cbnz	r0, 30746 <url_parse_port+0x6e>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   30702:	212f      	movs	r1, #47	; 0x2f
   30704:	9801      	ldr	r0, [sp, #4]
   30706:	f011 f93a 	bl	4197e <strchr>
	if (!end) {
   3070a:	4604      	mov	r4, r0
		len = strlen(cur);
   3070c:	9801      	ldr	r0, [sp, #4]
	if (!end) {
   3070e:	b9c4      	cbnz	r4, 30742 <url_parse_port+0x6a>
		len = strlen(cur);
   30710:	f7ec fd97 	bl	1d242 <strlen>
   30714:	4604      	mov	r4, r0
	} else {
		len = end - cur;
	}

	len = MIN(len, sizeof(aport) - 1);
   30716:	2c07      	cmp	r4, #7
   30718:	bf28      	it	cs
   3071a:	2407      	movcs	r4, #7

	memcpy(aport, cur, len);
   3071c:	2308      	movs	r3, #8
   3071e:	4622      	mov	r2, r4
   30720:	9901      	ldr	r1, [sp, #4]
   30722:	eb0d 0003 	add.w	r0, sp, r3
   30726:	f010 ff59 	bl	415dc <__memcpy_chk>
	aport[len] = '\0';
   3072a:	ab04      	add	r3, sp, #16
   3072c:	441c      	add	r4, r3
   3072e:	2300      	movs	r3, #0

	*port = atoi(aport);
   30730:	a802      	add	r0, sp, #8
	aport[len] = '\0';
   30732:	f804 3c08 	strb.w	r3, [r4, #-8]
	*port = atoi(aport);
   30736:	f010 ff22 	bl	4157e <atoi>
   3073a:	8030      	strh	r0, [r6, #0]

	return 0;
}
   3073c:	4628      	mov	r0, r5
   3073e:	b004      	add	sp, #16
   30740:	bd70      	pop	{r4, r5, r6, pc}
		len = end - cur;
   30742:	1a24      	subs	r4, r4, r0
   30744:	e7e7      	b.n	30716 <url_parse_port+0x3e>
		return -EINVAL;
   30746:	f06f 0515 	mvn.w	r5, #21
   3074a:	e7f7      	b.n	3073c <url_parse_port+0x64>
   3074c:	0004af18 	.word	0x0004af18
   30750:	0004a673 	.word	0x0004a673
   30754:	0004bb89 	.word	0x0004bb89

00030758 <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   30758:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3075a:	460d      	mov	r5, r1
	int err;
	const char *cur;

	cur = url;

	if (strstr(url, "//")) {
   3075c:	4915      	ldr	r1, [pc, #84]	; (307b4 <url_parse_file+0x5c>)
{
   3075e:	4614      	mov	r4, r2
	cur = url;
   30760:	9001      	str	r0, [sp, #4]
	if (strstr(url, "//")) {
   30762:	f011 f968 	bl	41a36 <strstr>
   30766:	b940      	cbnz	r0, 3077a <url_parse_file+0x22>
		if (err) {
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   30768:	9801      	ldr	r0, [sp, #4]
   3076a:	f7ec fd6a 	bl	1d242 <strlen>
   3076e:	3001      	adds	r0, #1
   30770:	42a0      	cmp	r0, r4
   30772:	d912      	bls.n	3079a <url_parse_file+0x42>
		return -E2BIG;
   30774:	f06f 0006 	mvn.w	r0, #6
   30778:	e006      	b.n	30788 <url_parse_file+0x30>
		err = swallow(&cur, "://");
   3077a:	490f      	ldr	r1, [pc, #60]	; (307b8 <url_parse_file+0x60>)
   3077c:	a801      	add	r0, sp, #4
   3077e:	f00f f939 	bl	3f9f4 <swallow>
		if (err) {
   30782:	b118      	cbz	r0, 3078c <url_parse_file+0x34>
			return -EINVAL;
   30784:	f06f 0015 	mvn.w	r0, #21

	memcpy(file, cur, len);
	file[len] = '\0';

	return 0;
}
   30788:	b003      	add	sp, #12
   3078a:	bd30      	pop	{r4, r5, pc}
		err = swallow(&cur, "/");
   3078c:	490b      	ldr	r1, [pc, #44]	; (307bc <url_parse_file+0x64>)
   3078e:	a801      	add	r0, sp, #4
   30790:	f00f f930 	bl	3f9f4 <swallow>
		if (err) {
   30794:	2800      	cmp	r0, #0
   30796:	d0e7      	beq.n	30768 <url_parse_file+0x10>
   30798:	e7f4      	b.n	30784 <url_parse_file+0x2c>
	len = strlen(cur);
   3079a:	9801      	ldr	r0, [sp, #4]
   3079c:	f7ec fd51 	bl	1d242 <strlen>
   307a0:	9901      	ldr	r1, [sp, #4]
   307a2:	4604      	mov	r4, r0
   307a4:	4602      	mov	r2, r0
   307a6:	4628      	mov	r0, r5
   307a8:	f010 ff0b 	bl	415c2 <memcpy>
	file[len] = '\0';
   307ac:	2300      	movs	r3, #0
	return 0;
   307ae:	4618      	mov	r0, r3
	file[len] = '\0';
   307b0:	552b      	strb	r3, [r5, r4]
	return 0;
   307b2:	e7e9      	b.n	30788 <url_parse_file+0x30>
   307b4:	0004af19 	.word	0x0004af19
   307b8:	0004af18 	.word	0x0004af18
   307bc:	0004af1a 	.word	0x0004af1a

000307c0 <http_get_request_send>:
int url_parse_host(const char *url, char *host, size_t len);
int url_parse_file(const char *url, char *file, size_t len);
int socket_send(const struct download_client *client, size_t len, int timeout);

int http_get_request_send(struct download_client *client)
{
   307c0:	b570      	push	{r4, r5, r6, lr}
	int len;
	size_t off;
	char host[HOSTNAME_SIZE];
	char file[FILENAME_SIZE];

	__ASSERT_NO_MSG(client->host);
   307c2:	f8d0 3924 	ldr.w	r3, [r0, #2340]	; 0x924
{
   307c6:	4605      	mov	r5, r0
   307c8:	b0d4      	sub	sp, #336	; 0x150
	__ASSERT_NO_MSG(client->host);
   307ca:	b943      	cbnz	r3, 307de <http_get_request_send+0x1e>
   307cc:	4929      	ldr	r1, [pc, #164]	; (30874 <http_get_request_send+0xb4>)
   307ce:	482a      	ldr	r0, [pc, #168]	; (30878 <http_get_request_send+0xb8>)
   307d0:	2237      	movs	r2, #55	; 0x37
   307d2:	f00c fa42 	bl	3cc5a <assert_print>
   307d6:	2137      	movs	r1, #55	; 0x37
   307d8:	4826      	ldr	r0, [pc, #152]	; (30874 <http_get_request_send+0xb4>)
   307da:	f00c fa37 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   307de:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
   307e2:	b943      	cbnz	r3, 307f6 <http_get_request_send+0x36>
   307e4:	4923      	ldr	r1, [pc, #140]	; (30874 <http_get_request_send+0xb4>)
   307e6:	4824      	ldr	r0, [pc, #144]	; (30878 <http_get_request_send+0xb8>)
   307e8:	2238      	movs	r2, #56	; 0x38
   307ea:	f00c fa36 	bl	3cc5a <assert_print>
   307ee:	2138      	movs	r1, #56	; 0x38
   307f0:	4820      	ldr	r0, [pc, #128]	; (30874 <http_get_request_send+0xb4>)
   307f2:	f00c fa2b 	bl	3cc4c <assert_post_action>

	err = url_parse_host(client->host, host, sizeof(host));
   307f6:	ae04      	add	r6, sp, #16
   307f8:	2280      	movs	r2, #128	; 0x80
   307fa:	4631      	mov	r1, r6
   307fc:	f8d5 0924 	ldr.w	r0, [r5, #2340]	; 0x924
   30800:	f7ff ff32 	bl	30668 <url_parse_host>
	if (err) {
   30804:	4604      	mov	r4, r0
   30806:	bb70      	cbnz	r0, 30866 <http_get_request_send+0xa6>
		return err;
	}

	err = url_parse_file(client->file, file, sizeof(file));
   30808:	22c0      	movs	r2, #192	; 0xc0
   3080a:	f8d5 0928 	ldr.w	r0, [r5, #2344]	; 0x928
   3080e:	a924      	add	r1, sp, #144	; 0x90
   30810:	f7ff ffa2 	bl	30758 <url_parse_file>
	if (err) {
   30814:	4604      	mov	r4, r0
   30816:	bb30      	cbnz	r0, 30866 <http_get_request_send+0xa6>
		return err;
	}

	/* Offset of last byte in range (Content-Range) */
	if (client->config.frag_size_override) {
   30818:	f8d5 3934 	ldr.w	r3, [r5, #2356]	; 0x934
		off = client->progress + client->config.frag_size_override - 1;
   3081c:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
	if (client->config.frag_size_override) {
   30820:	b323      	cbz	r3, 3086c <http_get_request_send+0xac>
		off = client->progress + client->config.frag_size_override - 1;
   30822:	440b      	add	r3, r1
   30824:	3b01      	subs	r3, #1
	} else {
		off = client->progress +
			CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE - 1;
	}

	if (client->file_size != 0) {
   30826:	f8d5 291c 	ldr.w	r2, [r5, #2332]	; 0x91c
   3082a:	b11a      	cbz	r2, 30834 <http_get_request_send+0x74>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size - 1);
   3082c:	3a01      	subs	r2, #1
   3082e:	4293      	cmp	r3, r2
   30830:	bf28      	it	cs
   30832:	4613      	movcs	r3, r2
	}

	if (client->proto == IPPROTO_TLS_1_2
	   || IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_RANGE_REQUESTS)) {
		len = snprintf(client->buf,
   30834:	e9cd 1301 	strd	r1, r3, [sp, #4]
   30838:	4a10      	ldr	r2, [pc, #64]	; (3087c <http_get_request_send+0xbc>)
   3083a:	f640 01fc 	movw	r1, #2300	; 0x8fc
   3083e:	ab24      	add	r3, sp, #144	; 0x90
   30840:	9600      	str	r6, [sp, #0]
   30842:	f105 001c 	add.w	r0, r5, #28
   30846:	f009 ffb9 	bl	3a7bc <sniprintf>

	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_LOG_HEADERS)) {
		LOG_HEXDUMP_DBG(client->buf, len, "HTTP request");
	}

	err = socket_send(client, len, 0);
   3084a:	2200      	movs	r2, #0
		len = snprintf(client->buf,
   3084c:	4601      	mov	r1, r0
	err = socket_send(client, len, 0);
   3084e:	4628      	mov	r0, r5
   30850:	f7ff faf6 	bl	2fe40 <socket_send>
	if (err) {
   30854:	4604      	mov	r4, r0
   30856:	b130      	cbz	r0, 30866 <http_get_request_send+0xa6>
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   30858:	f00d f878 	bl	3d94c <__errno>
   3085c:	2145      	movs	r1, #69	; 0x45
   3085e:	6802      	ldr	r2, [r0, #0]
   30860:	4807      	ldr	r0, [pc, #28]	; (30880 <http_get_request_send+0xc0>)
   30862:	f00c fa34 	bl	3ccce <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   30866:	4620      	mov	r0, r4
   30868:	b054      	add	sp, #336	; 0x150
   3086a:	bd70      	pop	{r4, r5, r6, pc}
		off = client->progress +
   3086c:	f201 33ff 	addw	r3, r1, #1023	; 0x3ff
   30870:	e7d9      	b.n	30826 <http_get_request_send+0x66>
   30872:	bf00      	nop
   30874:	0004af1c 	.word	0x0004af1c
   30878:	00044263 	.word	0x00044263
   3087c:	0004af56 	.word	0x0004af56
   30880:	0004afa1 	.word	0x0004afa1

00030884 <http_parse>:
{
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   30884:	f8d0 3918 	ldr.w	r3, [r0, #2328]	; 0x918
{
   30888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	client->offset += len;
   3088c:	440b      	add	r3, r1
   3088e:	f8c0 3918 	str.w	r3, [r0, #2328]	; 0x918

	if (!client->http.has_header) {
   30892:	f890 3940 	ldrb.w	r3, [r0, #2368]	; 0x940
{
   30896:	4604      	mov	r4, r0
   30898:	4688      	mov	r8, r1
	if (!client->http.has_header) {
   3089a:	2b00      	cmp	r3, #0
   3089c:	f040 8092 	bne.w	309c4 <http_parse+0x140>
	p = strstr(client->buf, "\r\n\r\n");
   308a0:	f100 071c 	add.w	r7, r0, #28
   308a4:	4638      	mov	r0, r7
   308a6:	4956      	ldr	r1, [pc, #344]	; (30a00 <http_parse+0x17c>)
   308a8:	f011 f8c5 	bl	41a36 <strstr>
	if (!p || p > client->buf + client->offset) {
   308ac:	4605      	mov	r5, r0
   308ae:	b918      	cbnz	r0, 308b8 <http_parse+0x34>
		rc = http_header_parse(client, &hdr_len);
		if (rc > 0) {
			/* Wait for header */
			return 1;
   308b0:	2001      	movs	r0, #1
			      CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE)) {
		return 1;
	}

	return 0;
}
   308b2:	b003      	add	sp, #12
   308b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!p || p > client->buf + client->offset) {
   308b8:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
   308bc:	443b      	add	r3, r7
   308be:	4298      	cmp	r0, r3
   308c0:	d8f6      	bhi.n	308b0 <http_parse+0x2c>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   308c2:	484f      	ldr	r0, [pc, #316]	; (30a00 <http_parse+0x17c>)
   308c4:	f7ec fcbd 	bl	1d242 <strlen>
   308c8:	4405      	add	r5, r0
   308ca:	463b      	mov	r3, r7
   308cc:	4628      	mov	r0, r5
		client->buf[i] = tolower(client->buf[i]);
   308ce:	4e4d      	ldr	r6, [pc, #308]	; (30a04 <http_parse+0x180>)
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   308d0:	eba5 0907 	sub.w	r9, r5, r7
	for (size_t i = 0; i < *hdr_len; i++) {
   308d4:	4298      	cmp	r0, r3
   308d6:	d10a      	bne.n	308ee <http_parse+0x6a>
	p = strstr(client->buf, "http/1.1 ");
   308d8:	4638      	mov	r0, r7
   308da:	494b      	ldr	r1, [pc, #300]	; (30a08 <http_parse+0x184>)
   308dc:	f011 f8ab 	bl	41a36 <strstr>
	if (!p) {
   308e0:	4606      	mov	r6, r0
   308e2:	b970      	cbnz	r0, 30902 <http_parse+0x7e>
		LOG_ERR("Server response missing HTTP/1.1");
   308e4:	2145      	movs	r1, #69	; 0x45
   308e6:	4849      	ldr	r0, [pc, #292]	; (30a0c <http_parse+0x188>)
				LOG_ERR("No file size in response");
   308e8:	f00c f9f1 	bl	3ccce <z_log_minimal_printk>
   308ec:	e02b      	b.n	30946 <http_parse+0xc2>
		client->buf[i] = tolower(client->buf[i]);
   308ee:	781a      	ldrb	r2, [r3, #0]
   308f0:	5d91      	ldrb	r1, [r2, r6]
   308f2:	f001 0103 	and.w	r1, r1, #3
   308f6:	2901      	cmp	r1, #1
   308f8:	bf08      	it	eq
   308fa:	3220      	addeq	r2, #32
   308fc:	f803 2b01 	strb.w	r2, [r3], #1
	for (size_t i = 0; i < *hdr_len; i++) {
   30900:	e7e8      	b.n	308d4 <http_parse+0x50>
	p += strlen("http/1.1 ");
   30902:	4841      	ldr	r0, [pc, #260]	; (30a08 <http_parse+0x184>)
   30904:	f7ec fc9d 	bl	1d242 <strlen>
   30908:	4406      	add	r6, r0
	http_status = strtoul(p, &q, 10);
   3090a:	220a      	movs	r2, #10
   3090c:	4630      	mov	r0, r6
   3090e:	a901      	add	r1, sp, #4
   30910:	f00a f95e 	bl	3abd0 <strtoul>
	if (!q) {
   30914:	9b01      	ldr	r3, [sp, #4]
   30916:	b913      	cbnz	r3, 3091e <http_parse+0x9a>
		LOG_ERR("Server response malformed: status code not found");
   30918:	2145      	movs	r1, #69	; 0x45
   3091a:	483d      	ldr	r0, [pc, #244]	; (30a10 <http_parse+0x18c>)
   3091c:	e7e4      	b.n	308e8 <http_parse+0x64>
	if (http_status != expected_status) {
   3091e:	28ce      	cmp	r0, #206	; 0xce
   30920:	d017      	beq.n	30952 <http_parse+0xce>
		while ((*q != '\0') && (*q != '\r') && (*q != '\n')) {
   30922:	f242 4201 	movw	r2, #9217	; 0x2401
   30926:	9901      	ldr	r1, [sp, #4]
   30928:	780b      	ldrb	r3, [r1, #0]
   3092a:	2b0d      	cmp	r3, #13
   3092c:	d80e      	bhi.n	3094c <http_parse+0xc8>
   3092e:	fa22 f303 	lsr.w	r3, r2, r3
   30932:	43db      	mvns	r3, r3
   30934:	f013 0301 	ands.w	r3, r3, #1
   30938:	d108      	bne.n	3094c <http_parse+0xc8>
		*q = '\0';
   3093a:	700b      	strb	r3, [r1, #0]
		LOG_ERR("Unexpected HTTP response: %s", log_strdup(p));
   3093c:	4632      	mov	r2, r6
   3093e:	2145      	movs	r1, #69	; 0x45
   30940:	4834      	ldr	r0, [pc, #208]	; (30a14 <http_parse+0x190>)
   30942:	f00c f9c4 	bl	3ccce <z_log_minimal_printk>
			return -1;
   30946:	f04f 30ff 	mov.w	r0, #4294967295
   3094a:	e7b2      	b.n	308b2 <http_parse+0x2e>
			q++;
   3094c:	3101      	adds	r1, #1
   3094e:	9101      	str	r1, [sp, #4]
   30950:	e7e9      	b.n	30926 <http_parse+0xa2>
	if (client->file_size == 0) {
   30952:	f8d4 391c 	ldr.w	r3, [r4, #2332]	; 0x91c
   30956:	b9b3      	cbnz	r3, 30986 <http_parse+0x102>
			p = strstr(client->buf, "content-range");
   30958:	4638      	mov	r0, r7
   3095a:	492f      	ldr	r1, [pc, #188]	; (30a18 <http_parse+0x194>)
   3095c:	f011 f86b 	bl	41a36 <strstr>
			if (!p) {
   30960:	b910      	cbnz	r0, 30968 <http_parse+0xe4>
				LOG_ERR("Server did not send "
   30962:	2145      	movs	r1, #69	; 0x45
   30964:	482d      	ldr	r0, [pc, #180]	; (30a1c <http_parse+0x198>)
   30966:	e7bf      	b.n	308e8 <http_parse+0x64>
			p = strstr(p, "/");
   30968:	492d      	ldr	r1, [pc, #180]	; (30a20 <http_parse+0x19c>)
   3096a:	f011 f864 	bl	41a36 <strstr>
			if (!p) {
   3096e:	b910      	cbnz	r0, 30976 <http_parse+0xf2>
				LOG_ERR("No file size in response");
   30970:	2145      	movs	r1, #69	; 0x45
   30972:	482c      	ldr	r0, [pc, #176]	; (30a24 <http_parse+0x1a0>)
   30974:	e7b8      	b.n	308e8 <http_parse+0x64>
		client->file_size += atoi(p + 1);
   30976:	3001      	adds	r0, #1
   30978:	f010 fe01 	bl	4157e <atoi>
   3097c:	f8d4 391c 	ldr.w	r3, [r4, #2332]	; 0x91c
   30980:	4418      	add	r0, r3
   30982:	f8c4 091c 	str.w	r0, [r4, #2332]	; 0x91c
	p = strstr(client->buf, "connection: close");
   30986:	4638      	mov	r0, r7
   30988:	4927      	ldr	r1, [pc, #156]	; (30a28 <http_parse+0x1a4>)
   3098a:	f011 f854 	bl	41a36 <strstr>
	if (p) {
   3098e:	b130      	cbz	r0, 3099e <http_parse+0x11a>
		LOG_WRN("Peer closed connection, will re-connect");
   30990:	2157      	movs	r1, #87	; 0x57
   30992:	4826      	ldr	r0, [pc, #152]	; (30a2c <http_parse+0x1a8>)
   30994:	f00c f99b 	bl	3ccce <z_log_minimal_printk>
		client->http.connection_close = true;
   30998:	2301      	movs	r3, #1
   3099a:	f884 3941 	strb.w	r3, [r4, #2369]	; 0x941
	client->http.has_header = true;
   3099e:	2301      	movs	r3, #1
		if (client->offset != hdr_len) {
   309a0:	f8d4 2918 	ldr.w	r2, [r4, #2328]	; 0x918
	client->http.has_header = true;
   309a4:	f884 3940 	strb.w	r3, [r4, #2368]	; 0x940
		if (client->offset != hdr_len) {
   309a8:	454a      	cmp	r2, r9
   309aa:	d024      	beq.n	309f6 <http_parse+0x172>
   309ac:	4629      	mov	r1, r5
   309ae:	4638      	mov	r0, r7
   309b0:	eba2 0209 	sub.w	r2, r2, r9
   309b4:	f010 fe05 	bl	415c2 <memcpy>
			client->offset -= hdr_len;
   309b8:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
   309bc:	eba3 0309 	sub.w	r3, r3, r9
			client->offset = 0;
   309c0:	f8c4 3918 	str.w	r3, [r4, #2328]	; 0x918
	client->progress += MIN(client->offset, len);
   309c4:	f8d4 3920 	ldr.w	r3, [r4, #2336]	; 0x920
   309c8:	f8d4 2918 	ldr.w	r2, [r4, #2328]	; 0x918
	if (client->progress != client->file_size &&
   309cc:	f8d4 191c 	ldr.w	r1, [r4, #2332]	; 0x91c
	client->progress += MIN(client->offset, len);
   309d0:	4590      	cmp	r8, r2
   309d2:	bf94      	ite	ls
   309d4:	4443      	addls	r3, r8
   309d6:	189b      	addhi	r3, r3, r2
	if (client->progress != client->file_size &&
   309d8:	428b      	cmp	r3, r1
	client->progress += MIN(client->offset, len);
   309da:	f8c4 3920 	str.w	r3, [r4, #2336]	; 0x920
	if (client->progress != client->file_size &&
   309de:	d00c      	beq.n	309fa <http_parse+0x176>
	    client->offset < (client->config.frag_size_override != 0 ?
   309e0:	f8d4 0934 	ldr.w	r0, [r4, #2356]	; 0x934
			      client->config.frag_size_override :
   309e4:	2800      	cmp	r0, #0
   309e6:	bf08      	it	eq
   309e8:	f44f 6080 	moveq.w	r0, #1024	; 0x400
	if (client->progress != client->file_size &&
   309ec:	4290      	cmp	r0, r2
   309ee:	bf94      	ite	ls
   309f0:	2000      	movls	r0, #0
   309f2:	2001      	movhi	r0, #1
   309f4:	e75d      	b.n	308b2 <http_parse+0x2e>
			client->offset = 0;
   309f6:	2300      	movs	r3, #0
   309f8:	e7e2      	b.n	309c0 <http_parse+0x13c>
	return 0;
   309fa:	2000      	movs	r0, #0
   309fc:	e759      	b.n	308b2 <http_parse+0x2e>
   309fe:	bf00      	nop
   30a00:	0004af9c 	.word	0x0004af9c
   30a04:	0004bf0e 	.word	0x0004bf0e
   30a08:	0004afcc 	.word	0x0004afcc
   30a0c:	0004afd6 	.word	0x0004afd6
   30a10:	0004affc 	.word	0x0004affc
   30a14:	0004b032 	.word	0x0004b032
   30a18:	0004b054 	.word	0x0004b054
   30a1c:	0004b062 	.word	0x0004b062
   30a20:	0004af1a 	.word	0x0004af1a
   30a24:	0004b097 	.word	0x0004b097
   30a28:	0004b0b5 	.word	0x0004b0b5
   30a2c:	0004b0c7 	.word	0x0004b0c7

00030a30 <send_error_evt>:
	};
	callback(&evt);
}

static void send_error_evt(enum fota_download_error_cause cause)
{
   30a30:	b507      	push	{r0, r1, r2, lr}
	__ASSERT(cause != FOTA_DOWNLOAD_ERROR_CAUSE_NO_ERROR, "use a valid error cause");
	const struct fota_download_evt evt = {
   30a32:	2300      	movs	r3, #0
   30a34:	2204      	movs	r2, #4
   30a36:	e9cd 3300 	strd	r3, r3, [sp]
   30a3a:	f88d 2000 	strb.w	r2, [sp]
		.id = FOTA_DOWNLOAD_EVT_ERROR,
		.cause = cause
	};
	downloading = false;
   30a3e:	4a05      	ldr	r2, [pc, #20]	; (30a54 <send_error_evt+0x24>)
	const struct fota_download_evt evt = {
   30a40:	f88d 0004 	strb.w	r0, [sp, #4]
	downloading = false;
   30a44:	7013      	strb	r3, [r2, #0]
	callback(&evt);
   30a46:	4b04      	ldr	r3, [pc, #16]	; (30a58 <send_error_evt+0x28>)
   30a48:	4668      	mov	r0, sp
   30a4a:	681b      	ldr	r3, [r3, #0]
   30a4c:	4798      	blx	r3
}
   30a4e:	b003      	add	sp, #12
   30a50:	f85d fb04 	ldr.w	pc, [sp], #4
   30a54:	2001d2f7 	.word	0x2001d2f7
   30a58:	2001a1c8 	.word	0x2001a1c8

00030a5c <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   30a5c:	b513      	push	{r0, r1, r4, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   30a5e:	a801      	add	r0, sp, #4
   30a60:	f000 fa6a 	bl	30f38 <dfu_target_offset_get>
	if (err != 0) {
   30a64:	4603      	mov	r3, r0
   30a66:	b148      	cbz	r0, 30a7c <download_with_offset+0x20>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   30a68:	2145      	movs	r1, #69	; 0x45
   30a6a:	4a16      	ldr	r2, [pc, #88]	; (30ac4 <download_with_offset+0x68>)
   30a6c:	4816      	ldr	r0, [pc, #88]	; (30ac8 <download_with_offset+0x6c>)
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
	if (err != 0) {
		LOG_ERR("%s failed to start download  with error %d", __func__,
   30a6e:	f00c f92e 	bl	3ccce <z_log_minimal_printk>
			err);
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30a72:	2001      	movs	r0, #1
   30a74:	f7ff ffdc 	bl	30a30 <send_error_evt>
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
	downloading = true;
	return;
}
   30a78:	b002      	add	sp, #8
   30a7a:	bd10      	pop	{r4, pc}
	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   30a7c:	4c13      	ldr	r4, [pc, #76]	; (30acc <download_with_offset+0x70>)
   30a7e:	4620      	mov	r0, r4
   30a80:	f8d4 1924 	ldr.w	r1, [r4, #2340]	; 0x924
   30a84:	f604 122c 	addw	r2, r4, #2348	; 0x92c
   30a88:	f7ff fa4c 	bl	2ff24 <download_client_connect>
	if (err != 0) {
   30a8c:	4603      	mov	r3, r0
   30a8e:	b118      	cbz	r0, 30a98 <download_with_offset+0x3c>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   30a90:	2145      	movs	r1, #69	; 0x45
   30a92:	4a0c      	ldr	r2, [pc, #48]	; (30ac4 <download_with_offset+0x68>)
   30a94:	480e      	ldr	r0, [pc, #56]	; (30ad0 <download_with_offset+0x74>)
   30a96:	e7ea      	b.n	30a6e <download_with_offset+0x12>
	err = download_client_start(&dlc, dlc.file, offset);
   30a98:	4620      	mov	r0, r4
   30a9a:	9a01      	ldr	r2, [sp, #4]
   30a9c:	f8d4 1928 	ldr.w	r1, [r4, #2344]	; 0x928
   30aa0:	f7ff fd80 	bl	305a4 <download_client_start>
	if (err != 0) {
   30aa4:	4603      	mov	r3, r0
   30aa6:	b118      	cbz	r0, 30ab0 <download_with_offset+0x54>
		LOG_ERR("%s failed to start download  with error %d", __func__,
   30aa8:	2145      	movs	r1, #69	; 0x45
   30aaa:	4a06      	ldr	r2, [pc, #24]	; (30ac4 <download_with_offset+0x68>)
   30aac:	4809      	ldr	r0, [pc, #36]	; (30ad4 <download_with_offset+0x78>)
   30aae:	e7de      	b.n	30a6e <download_with_offset+0x12>
	LOG_INF("Downloading from offset: 0x%x", offset);
   30ab0:	9a01      	ldr	r2, [sp, #4]
   30ab2:	2149      	movs	r1, #73	; 0x49
   30ab4:	4808      	ldr	r0, [pc, #32]	; (30ad8 <download_with_offset+0x7c>)
   30ab6:	f00c f90a 	bl	3ccce <z_log_minimal_printk>
	downloading = true;
   30aba:	2201      	movs	r2, #1
   30abc:	4b07      	ldr	r3, [pc, #28]	; (30adc <download_with_offset+0x80>)
   30abe:	701a      	strb	r2, [r3, #0]
	return;
   30ac0:	e7da      	b.n	30a78 <download_with_offset+0x1c>
   30ac2:	bf00      	nop
   30ac4:	0004b33a 	.word	0x0004b33a
   30ac8:	0004b0f4 	.word	0x0004b0f4
   30acc:	20017360 	.word	0x20017360
   30ad0:	0004b11f 	.word	0x0004b11f
   30ad4:	0004b147 	.word	0x0004b147
   30ad8:	0004b177 	.word	0x0004b177
   30adc:	2001d2f7 	.word	0x2001d2f7

00030ae0 <download_client_callback>:
{
   30ae0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (event == NULL) {
   30ae2:	4605      	mov	r5, r0
   30ae4:	2800      	cmp	r0, #0
   30ae6:	f000 80f2 	beq.w	30cce <_flash_used+0x36>
	switch (event->id) {
   30aea:	7803      	ldrb	r3, [r0, #0]
   30aec:	2b01      	cmp	r3, #1
   30aee:	f000 80bf 	beq.w	30c70 <download_client_callback+0x190>
   30af2:	2b02      	cmp	r3, #2
   30af4:	f000 8098 	beq.w	30c28 <download_client_callback+0x148>
   30af8:	2b00      	cmp	r3, #0
   30afa:	f040 80eb 	bne.w	30cd4 <_flash_used+0x3c>
		if (first_fragment) {
   30afe:	4e76      	ldr	r6, [pc, #472]	; (30cd8 <_flash_used+0x40>)
   30b00:	7833      	ldrb	r3, [r6, #0]
   30b02:	2b00      	cmp	r3, #0
   30b04:	d05a      	beq.n	30bbc <download_client_callback+0xdc>
			err = download_client_file_size_get(&dlc, &file_size);
   30b06:	4975      	ldr	r1, [pc, #468]	; (30cdc <_flash_used+0x44>)
   30b08:	4875      	ldr	r0, [pc, #468]	; (30ce0 <_flash_used+0x48>)
   30b0a:	f00e ff69 	bl	3f9e0 <download_client_file_size_get>
			if (err != 0) {
   30b0e:	4604      	mov	r4, r0
   30b10:	b108      	cbz	r0, 30b16 <download_client_callback+0x36>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30b12:	2001      	movs	r0, #1
   30b14:	e06b      	b.n	30bee <download_client_callback+0x10e>
			first_fragment = false;
   30b16:	7030      	strb	r0, [r6, #0]
			img_type = dfu_target_img_type(event->fragment.buf,
   30b18:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   30b1c:	f000 f9c2 	bl	30ea4 <dfu_target_img_type>
   30b20:	4b70      	ldr	r3, [pc, #448]	; (30ce4 <_flash_used+0x4c>)
   30b22:	b2c0      	uxtb	r0, r0
   30b24:	7018      	strb	r0, [r3, #0]
			if ((img_type_expected != DFU_TARGET_IMAGE_TYPE_ANY) &&
   30b26:	4b70      	ldr	r3, [pc, #448]	; (30ce8 <_flash_used+0x50>)
   30b28:	781b      	ldrb	r3, [r3, #0]
   30b2a:	b1e3      	cbz	r3, 30b66 <download_client_callback+0x86>
   30b2c:	4298      	cmp	r0, r3
   30b2e:	d01a      	beq.n	30b66 <download_client_callback+0x86>
				LOG_ERR("FOTA image type %d does not match expected type %d",
   30b30:	4602      	mov	r2, r0
   30b32:	2145      	movs	r1, #69	; 0x45
   30b34:	486d      	ldr	r0, [pc, #436]	; (30cec <_flash_used+0x54>)
   30b36:	f00c f8ca 	bl	3ccce <z_log_minimal_printk>
				err_cause = FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH;
   30b3a:	2503      	movs	r5, #3
				err = -EPROTOTYPE;
   30b3c:	f06f 046a 	mvn.w	r4, #106	; 0x6a
				(void)download_client_disconnect(&dlc);
   30b40:	4867      	ldr	r0, [pc, #412]	; (30ce0 <_flash_used+0x48>)
   30b42:	f7ff fbd3 	bl	302ec <download_client_disconnect>
				send_error_evt(err_cause);
   30b46:	4628      	mov	r0, r5
   30b48:	f7ff ff72 	bl	30a30 <send_error_evt>
				int res = dfu_target_reset();
   30b4c:	f000 fa20 	bl	30f90 <dfu_target_reset>
				if (res != 0) {
   30b50:	4602      	mov	r2, r0
   30b52:	b118      	cbz	r0, 30b5c <download_client_callback+0x7c>
					LOG_ERR("Unable to reset DFU target, err: %d",
   30b54:	2145      	movs	r1, #69	; 0x45
   30b56:	4866      	ldr	r0, [pc, #408]	; (30cf0 <_flash_used+0x58>)
   30b58:	f00c f8b9 	bl	3ccce <z_log_minimal_printk>
				first_fragment = true;
   30b5c:	2301      	movs	r3, #1
   30b5e:	7033      	strb	r3, [r6, #0]
}
   30b60:	4620      	mov	r0, r4
   30b62:	b004      	add	sp, #16
   30b64:	bd70      	pop	{r4, r5, r6, pc}
				err = dfu_target_init(img_type, 0, file_size,
   30b66:	4a5d      	ldr	r2, [pc, #372]	; (30cdc <_flash_used+0x44>)
   30b68:	2100      	movs	r1, #0
   30b6a:	4b62      	ldr	r3, [pc, #392]	; (30cf4 <_flash_used+0x5c>)
   30b6c:	6812      	ldr	r2, [r2, #0]
   30b6e:	f000 f9b5 	bl	30edc <dfu_target_init>
				if ((err < 0) && (err != -EBUSY)) {
   30b72:	1e04      	subs	r4, r0, #0
   30b74:	da09      	bge.n	30b8a <download_client_callback+0xaa>
   30b76:	f114 0f10 	cmn.w	r4, #16
   30b7a:	d006      	beq.n	30b8a <download_client_callback+0xaa>
					LOG_ERR("dfu_target_init error %d", err);
   30b7c:	4622      	mov	r2, r4
   30b7e:	2145      	movs	r1, #69	; 0x45
   30b80:	485d      	ldr	r0, [pc, #372]	; (30cf8 <_flash_used+0x60>)
   30b82:	f00c f8a4 	bl	3ccce <z_log_minimal_printk>
					err_cause = FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED;
   30b86:	2501      	movs	r5, #1
   30b88:	e7da      	b.n	30b40 <download_client_callback+0x60>
			err = dfu_target_offset_get(&offset);
   30b8a:	a801      	add	r0, sp, #4
   30b8c:	f000 f9d4 	bl	30f38 <dfu_target_offset_get>
			if (err != 0) {
   30b90:	b110      	cbz	r0, 30b98 <download_client_callback+0xb8>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30b92:	2001      	movs	r0, #1
   30b94:	f7ff ff4c 	bl	30a30 <send_error_evt>
			if (offset != 0) {
   30b98:	9b01      	ldr	r3, [sp, #4]
   30b9a:	b17b      	cbz	r3, 30bbc <download_client_callback+0xdc>
				(void)download_client_disconnect(&dlc);
   30b9c:	4850      	ldr	r0, [pc, #320]	; (30ce0 <_flash_used+0x48>)
   30b9e:	f7ff fba5 	bl	302ec <download_client_disconnect>
				k_work_schedule(&dlc_with_offset_work,
   30ba2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   30ba6:	2300      	movs	r3, #0
   30ba8:	4854      	ldr	r0, [pc, #336]	; (30cfc <_flash_used+0x64>)
   30baa:	f006 fddd 	bl	37768 <k_work_schedule>
				LOG_INF("Refuse fragment, restart with offset");
   30bae:	2149      	movs	r1, #73	; 0x49
   30bb0:	4853      	ldr	r0, [pc, #332]	; (30d00 <_flash_used+0x68>)
   30bb2:	f00c f88c 	bl	3ccce <z_log_minimal_printk>
				return -1;
   30bb6:	f04f 34ff 	mov.w	r4, #4294967295
   30bba:	e7d1      	b.n	30b60 <download_client_callback+0x80>
		err = dfu_target_write(event->fragment.buf,
   30bbc:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   30bc0:	f000 f9c4 	bl	30f4c <dfu_target_write>
		if (err != 0) {
   30bc4:	4604      	mov	r4, r0
   30bc6:	b1a8      	cbz	r0, 30bf4 <download_client_callback+0x114>
			LOG_ERR("dfu_target_write error %d", err);
   30bc8:	4602      	mov	r2, r0
   30bca:	2145      	movs	r1, #69	; 0x45
   30bcc:	484d      	ldr	r0, [pc, #308]	; (30d04 <_flash_used+0x6c>)
   30bce:	f00c f87e 	bl	3ccce <z_log_minimal_printk>
			int res = dfu_target_done(false);
   30bd2:	2000      	movs	r0, #0
   30bd4:	f000 f9c6 	bl	30f64 <dfu_target_done>
			if (res != 0) {
   30bd8:	b118      	cbz	r0, 30be2 <download_client_callback+0x102>
				LOG_ERR("Unable to free DFU target resources");
   30bda:	2145      	movs	r1, #69	; 0x45
   30bdc:	484a      	ldr	r0, [pc, #296]	; (30d08 <_flash_used+0x70>)
   30bde:	f00c f876 	bl	3ccce <z_log_minimal_printk>
			first_fragment = true;
   30be2:	2301      	movs	r3, #1
			(void) download_client_disconnect(&dlc);
   30be4:	483e      	ldr	r0, [pc, #248]	; (30ce0 <_flash_used+0x48>)
			first_fragment = true;
   30be6:	7033      	strb	r3, [r6, #0]
			(void) download_client_disconnect(&dlc);
   30be8:	f7ff fb80 	bl	302ec <download_client_disconnect>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE);
   30bec:	2002      	movs	r0, #2
   30bee:	f7ff ff1f 	bl	30a30 <send_error_evt>
			return err;
   30bf2:	e7b5      	b.n	30b60 <download_client_callback+0x80>
		if (IS_ENABLED(CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT) &&
   30bf4:	7833      	ldrb	r3, [r6, #0]
   30bf6:	2b00      	cmp	r3, #0
   30bf8:	d1b2      	bne.n	30b60 <download_client_callback+0x80>
			err = dfu_target_offset_get(&offset);
   30bfa:	a801      	add	r0, sp, #4
   30bfc:	f000 f99c 	bl	30f38 <dfu_target_offset_get>
			if (err != 0) {
   30c00:	4604      	mov	r4, r0
   30c02:	2800      	cmp	r0, #0
   30c04:	d185      	bne.n	30b12 <download_client_callback+0x32>
			if (file_size == 0) {
   30c06:	4b35      	ldr	r3, [pc, #212]	; (30cdc <_flash_used+0x44>)
   30c08:	681a      	ldr	r2, [r3, #0]
   30c0a:	2a00      	cmp	r2, #0
   30c0c:	d081      	beq.n	30b12 <download_client_callback+0x32>
			send_progress((offset * 100) / file_size);
   30c0e:	2164      	movs	r1, #100	; 0x64
   30c10:	9b01      	ldr	r3, [sp, #4]
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   30c12:	f88d 0008 	strb.w	r0, [sp, #8]
			send_progress((offset * 100) / file_size);
   30c16:	434b      	muls	r3, r1
   30c18:	fbb3 f3f2 	udiv	r3, r3, r2
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   30c1c:	9303      	str	r3, [sp, #12]
	callback(&evt);
   30c1e:	4b3b      	ldr	r3, [pc, #236]	; (30d0c <_flash_used+0x74>)
   30c20:	a802      	add	r0, sp, #8
   30c22:	681b      	ldr	r3, [r3, #0]
   30c24:	4798      	blx	r3
}
   30c26:	e79b      	b.n	30b60 <download_client_callback+0x80>
		err = dfu_target_done(true);
   30c28:	2001      	movs	r0, #1
   30c2a:	f000 f99b 	bl	30f64 <dfu_target_done>
		if (err == 0) {
   30c2e:	4604      	mov	r4, r0
   30c30:	b918      	cbnz	r0, 30c3a <download_client_callback+0x15a>
			err = dfu_target_schedule_update(0);
   30c32:	f000 f9c3 	bl	30fbc <dfu_target_schedule_update>
		if (err != 0) {
   30c36:	4604      	mov	r4, r0
   30c38:	b128      	cbz	r0, 30c46 <download_client_callback+0x166>
			LOG_ERR("dfu_target_done error: %d", err);
   30c3a:	4622      	mov	r2, r4
   30c3c:	2145      	movs	r1, #69	; 0x45
   30c3e:	4834      	ldr	r0, [pc, #208]	; (30d10 <_flash_used+0x78>)
   30c40:	f00c f845 	bl	3ccce <z_log_minimal_printk>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30c44:	e765      	b.n	30b12 <download_client_callback+0x32>
		err = download_client_disconnect(&dlc);
   30c46:	4826      	ldr	r0, [pc, #152]	; (30ce0 <_flash_used+0x48>)
   30c48:	f7ff fb50 	bl	302ec <download_client_disconnect>
		if (err != 0) {
   30c4c:	4604      	mov	r4, r0
   30c4e:	2800      	cmp	r0, #0
   30c50:	f47f af5f 	bne.w	30b12 <download_client_callback+0x32>
	const struct fota_download_evt evt = {
   30c54:	2501      	movs	r5, #1
	callback(&evt);
   30c56:	4b2d      	ldr	r3, [pc, #180]	; (30d0c <_flash_used+0x74>)
	const struct fota_download_evt evt = {
   30c58:	e9cd 0002 	strd	r0, r0, [sp, #8]
	callback(&evt);
   30c5c:	681b      	ldr	r3, [r3, #0]
	const struct fota_download_evt evt = {
   30c5e:	f88d 5008 	strb.w	r5, [sp, #8]
	callback(&evt);
   30c62:	a802      	add	r0, sp, #8
   30c64:	4798      	blx	r3
		first_fragment = true;
   30c66:	4b1c      	ldr	r3, [pc, #112]	; (30cd8 <_flash_used+0x40>)
   30c68:	701d      	strb	r5, [r3, #0]
		downloading = false;
   30c6a:	4b2a      	ldr	r3, [pc, #168]	; (30d14 <_flash_used+0x7c>)
   30c6c:	701c      	strb	r4, [r3, #0]
		break;
   30c6e:	e777      	b.n	30b60 <download_client_callback+0x80>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   30c70:	4e29      	ldr	r6, [pc, #164]	; (30d18 <_flash_used+0x80>)
   30c72:	6832      	ldr	r2, [r6, #0]
   30c74:	b192      	cbz	r2, 30c9c <_flash_used+0x4>
   30c76:	6844      	ldr	r4, [r0, #4]
   30c78:	f104 0380 	add.w	r3, r4, #128	; 0x80
   30c7c:	2b18      	cmp	r3, #24
   30c7e:	d80d      	bhi.n	30c9c <_flash_used+0x4>
   30c80:	4c26      	ldr	r4, [pc, #152]	; (30d1c <_flash_used+0x84>)
   30c82:	40dc      	lsrs	r4, r3
   30c84:	43e4      	mvns	r4, r4
   30c86:	f014 0401 	ands.w	r4, r4, #1
   30c8a:	d107      	bne.n	30c9c <_flash_used+0x4>
			LOG_WRN("Download socket error. %d retries left...",
   30c8c:	2157      	movs	r1, #87	; 0x57
   30c8e:	4824      	ldr	r0, [pc, #144]	; (30d20 <_flash_used+0x88>)
   30c90:	f00c f81d 	bl	3ccce <z_log_minimal_printk>
			socket_retries_left--;
   30c94:	6833      	ldr	r3, [r6, #0]
   30c96:	3b01      	subs	r3, #1
   30c98:	6033      	str	r3, [r6, #0]
   30c9a:	e761      	b.n	30b60 <download_client_callback+0x80>
			download_client_disconnect(&dlc);
   30c9c:	4810      	ldr	r0, [pc, #64]	; (30ce0 <_flash_used+0x48>)
   30c9e:	f7ff fb25 	bl	302ec <download_client_disconnect>
			LOG_ERR("Download client error");
   30ca2:	2145      	movs	r1, #69	; 0x45
   30ca4:	481f      	ldr	r0, [pc, #124]	; (30d24 <_flash_used+0x8c>)
   30ca6:	f00c f812 	bl	3ccce <z_log_minimal_printk>
			err = dfu_target_done(false);
   30caa:	2000      	movs	r0, #0
   30cac:	f000 f95a 	bl	30f64 <dfu_target_done>
			if (err == -EACCES) {
   30cb0:	f110 0f0d 	cmn.w	r0, #13
   30cb4:	d004      	beq.n	30cc0 <_flash_used+0x28>
			} else if (err != 0) {
   30cb6:	b118      	cbz	r0, 30cc0 <_flash_used+0x28>
				LOG_ERR("Unable to deinitialze resources "
   30cb8:	2145      	movs	r1, #69	; 0x45
   30cba:	481b      	ldr	r0, [pc, #108]	; (30d28 <_flash_used+0x90>)
   30cbc:	f00c f807 	bl	3ccce <z_log_minimal_printk>
			first_fragment = true;
   30cc0:	2001      	movs	r0, #1
   30cc2:	4b05      	ldr	r3, [pc, #20]	; (30cd8 <_flash_used+0x40>)
   30cc4:	7018      	strb	r0, [r3, #0]
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30cc6:	f7ff feb3 	bl	30a30 <send_error_evt>
			return event->error;
   30cca:	686c      	ldr	r4, [r5, #4]
   30ccc:	e748      	b.n	30b60 <download_client_callback+0x80>
		return -EINVAL;
   30cce:	f06f 0415 	mvn.w	r4, #21
   30cd2:	e745      	b.n	30b60 <download_client_callback+0x80>
	switch (event->id) {
   30cd4:	2400      	movs	r4, #0
   30cd6:	e743      	b.n	30b60 <download_client_callback+0x80>
   30cd8:	2001d3b8 	.word	0x2001d3b8
   30cdc:	2001a1cc 	.word	0x2001a1cc
   30ce0:	20017360 	.word	0x20017360
   30ce4:	2001d3b9 	.word	0x2001d3b9
   30ce8:	2001d3ba 	.word	0x2001d3ba
   30cec:	0004b19a 	.word	0x0004b19a
   30cf0:	0004b1f0 	.word	0x0004b1f0
   30cf4:	00030d2d 	.word	0x00030d2d
   30cf8:	0004b1d2 	.word	0x0004b1d2
   30cfc:	20018db8 	.word	0x20018db8
   30d00:	0004b219 	.word	0x0004b219
   30d04:	0004b243 	.word	0x0004b243
   30d08:	0004b262 	.word	0x0004b262
   30d0c:	2001a1c8 	.word	0x2001a1c8
   30d10:	0004b28b 	.word	0x0004b28b
   30d14:	2001d2f7 	.word	0x2001d2f7
   30d18:	2001a3d0 	.word	0x2001a3d0
   30d1c:	01001001 	.word	0x01001001
   30d20:	0004a142 	.word	0x0004a142
   30d24:	0004b2aa 	.word	0x0004b2aa
   30d28:	0004b2c5 	.word	0x0004b2c5

00030d2c <dfu_target_callback_handler>:
{
   30d2c:	b507      	push	{r0, r1, r2, lr}
	switch (evt) {
   30d2e:	b138      	cbz	r0, 30d40 <dfu_target_callback_handler+0x14>
   30d30:	2801      	cmp	r0, #1
   30d32:	d011      	beq.n	30d58 <dfu_target_callback_handler+0x2c>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30d34:	2001      	movs	r0, #1
}
   30d36:	b003      	add	sp, #12
   30d38:	f85d eb04 	ldr.w	lr, [sp], #4
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30d3c:	f7ff be78 	b.w	30a30 <send_error_evt>
	const struct fota_download_evt evt = {
   30d40:	2302      	movs	r3, #2
   30d42:	e9cd 0000 	strd	r0, r0, [sp]
   30d46:	f88d 3000 	strb.w	r3, [sp]
	callback(&evt);
   30d4a:	4b06      	ldr	r3, [pc, #24]	; (30d64 <dfu_target_callback_handler+0x38>)
   30d4c:	4668      	mov	r0, sp
   30d4e:	681b      	ldr	r3, [r3, #0]
   30d50:	4798      	blx	r3
}
   30d52:	b003      	add	sp, #12
   30d54:	f85d fb04 	ldr.w	pc, [sp], #4
	const struct fota_download_evt evt = {
   30d58:	2300      	movs	r3, #0
   30d5a:	e9cd 3300 	strd	r3, r3, [sp]
   30d5e:	2303      	movs	r3, #3
   30d60:	e7f1      	b.n	30d46 <dfu_target_callback_handler+0x1a>
   30d62:	bf00      	nop
   30d64:	2001a1c8 	.word	0x2001a1c8

00030d68 <fota_download_start_with_image_type>:
}

int fota_download_start_with_image_type(const char *host, const char *file,
	int sec_tag, uint8_t pdn_id, size_t fragment_size,
	const enum dfu_target_image_type expected_type)
{
   30d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   30d6a:	460d      	mov	r5, r1
	 */
	static char file_buf[FILE_BUF_LEN];
	const char *file_buf_ptr = file_buf;
	int err = -1;

	struct download_client_cfg config = {
   30d6c:	2100      	movs	r1, #0
{
   30d6e:	b08b      	sub	sp, #44	; 0x2c
	struct download_client_cfg config = {
   30d70:	9101      	str	r1, [sp, #4]
   30d72:	f88d 3004 	strb.w	r3, [sp, #4]
   30d76:	9b10      	ldr	r3, [sp, #64]	; 0x40
		.sec_tag = sec_tag,
		.pdn_id = pdn_id,
		.frag_size_override = fragment_size,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   30d78:	4604      	mov	r4, r0
	struct download_client_cfg config = {
   30d7a:	9103      	str	r1, [sp, #12]
   30d7c:	9200      	str	r2, [sp, #0]
   30d7e:	9302      	str	r3, [sp, #8]
	if (host == NULL || file == NULL || callback == NULL) {
   30d80:	2800      	cmp	r0, #0
   30d82:	d045      	beq.n	30e10 <fota_download_start_with_image_type+0xa8>
   30d84:	2d00      	cmp	r5, #0
   30d86:	d043      	beq.n	30e10 <fota_download_start_with_image_type+0xa8>
   30d88:	4b24      	ldr	r3, [pc, #144]	; (30e1c <fota_download_start_with_image_type+0xb4>)
   30d8a:	681b      	ldr	r3, [r3, #0]
   30d8c:	2b00      	cmp	r3, #0
   30d8e:	d03f      	beq.n	30e10 <fota_download_start_with_image_type+0xa8>
		return -EINVAL;
	}

	if (downloading) {
   30d90:	4f23      	ldr	r7, [pc, #140]	; (30e20 <fota_download_start_with_image_type+0xb8>)
   30d92:	783b      	ldrb	r3, [r7, #0]
   30d94:	2b00      	cmp	r3, #0
   30d96:	d13e      	bne.n	30e16 <fota_download_start_with_image_type+0xae>
		return -EALREADY;
	}

	if (sec_tag != -1 && !is_ip_address(host)) {
   30d98:	3201      	adds	r2, #1
   30d9a:	d012      	beq.n	30dc2 <fota_download_start_with_image_type+0x5a>
		union { uintptr_t x; void * val; } parm2 = { .val = dst };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
   30d9c:	4601      	mov	r1, r0
   30d9e:	f10d 0212 	add.w	r2, sp, #18
   30da2:	2001      	movs	r0, #1
   30da4:	f00c fbcc 	bl	3d540 <z_impl_zsock_inet_pton>
	if (zsock_inet_pton(AF_INET, host, sa.data) == 1) {
   30da8:	2801      	cmp	r0, #1
   30daa:	d00a      	beq.n	30dc2 <fota_download_start_with_image_type+0x5a>
   30dac:	2002      	movs	r0, #2
   30dae:	4621      	mov	r1, r4
   30db0:	f10d 0212 	add.w	r2, sp, #18
   30db4:	f00c fbc4 	bl	3d540 <z_impl_zsock_inet_pton>
	} else if (zsock_inet_pton(AF_INET6, host, sa.data) == 1) {
   30db8:	2801      	cmp	r0, #1
		config.set_tls_hostname = true;
   30dba:	bf1c      	itt	ne
   30dbc:	2301      	movne	r3, #1
   30dbe:	f88d 300c 	strbne.w	r3, [sp, #12]
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   30dc2:	2202      	movs	r2, #2
   30dc4:	4b17      	ldr	r3, [pc, #92]	; (30e24 <fota_download_start_with_image_type+0xbc>)

	strncpy(file_buf, file, sizeof(file_buf) - 1);
   30dc6:	4e18      	ldr	r6, [pc, #96]	; (30e28 <fota_download_start_with_image_type+0xc0>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   30dc8:	601a      	str	r2, [r3, #0]
	strncpy(file_buf, file, sizeof(file_buf) - 1);
   30dca:	4629      	mov	r1, r5
   30dcc:	22bf      	movs	r2, #191	; 0xbf
   30dce:	4630      	mov	r0, r6
   30dd0:	f010 fdfe 	bl	419d0 <strncpy>
	file_buf[sizeof(file_buf) - 1] = '\0';
   30dd4:	2300      	movs	r3, #0
		LOG_INF("B1 update, selected file:\n%s", log_strdup(update));
		file_buf_ptr = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   30dd6:	4621      	mov	r1, r4
   30dd8:	466a      	mov	r2, sp
   30dda:	4814      	ldr	r0, [pc, #80]	; (30e2c <fota_download_start_with_image_type+0xc4>)
	file_buf[sizeof(file_buf) - 1] = '\0';
   30ddc:	f886 30bf 	strb.w	r3, [r6, #191]	; 0xbf
	err = download_client_connect(&dlc, host, &config);
   30de0:	f7ff f8a0 	bl	2ff24 <download_client_connect>
	if (err != 0) {
   30de4:	4604      	mov	r4, r0
   30de6:	b968      	cbnz	r0, 30e04 <fota_download_start_with_image_type+0x9c>
		return err;
	}

	img_type_expected = expected_type;
   30de8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   30dec:	4b10      	ldr	r3, [pc, #64]	; (30e30 <fota_download_start_with_image_type+0xc8>)

	err = download_client_start(&dlc, file_buf_ptr, 0);
   30dee:	4631      	mov	r1, r6
	img_type_expected = expected_type;
   30df0:	701a      	strb	r2, [r3, #0]
	err = download_client_start(&dlc, file_buf_ptr, 0);
   30df2:	4602      	mov	r2, r0
   30df4:	480d      	ldr	r0, [pc, #52]	; (30e2c <fota_download_start_with_image_type+0xc4>)
   30df6:	f7ff fbd5 	bl	305a4 <download_client_start>
	if (err != 0) {
   30dfa:	4604      	mov	r4, r0
   30dfc:	b128      	cbz	r0, 30e0a <fota_download_start_with_image_type+0xa2>
		download_client_disconnect(&dlc);
   30dfe:	480b      	ldr	r0, [pc, #44]	; (30e2c <fota_download_start_with_image_type+0xc4>)
   30e00:	f7ff fa74 	bl	302ec <download_client_disconnect>
	}

	downloading = true;

	return 0;
}
   30e04:	4620      	mov	r0, r4
   30e06:	b00b      	add	sp, #44	; 0x2c
   30e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	downloading = true;
   30e0a:	2301      	movs	r3, #1
   30e0c:	703b      	strb	r3, [r7, #0]
	return 0;
   30e0e:	e7f9      	b.n	30e04 <fota_download_start_with_image_type+0x9c>
		return -EINVAL;
   30e10:	f06f 0415 	mvn.w	r4, #21
   30e14:	e7f6      	b.n	30e04 <fota_download_start_with_image_type+0x9c>
		return -EALREADY;
   30e16:	f06f 0477 	mvn.w	r4, #119	; 0x77
   30e1a:	e7f3      	b.n	30e04 <fota_download_start_with_image_type+0x9c>
   30e1c:	2001a1c8 	.word	0x2001a1c8
   30e20:	2001d2f7 	.word	0x2001d2f7
   30e24:	2001a3d0 	.word	0x2001a3d0
   30e28:	2001d2f8 	.word	0x2001d2f8
   30e2c:	20017360 	.word	0x20017360
   30e30:	2001d3ba 	.word	0x2001d3ba

00030e34 <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   30e34:	b510      	push	{r4, lr}
	if (client_callback == NULL) {
   30e36:	b1f8      	cbz	r0, 30e78 <fota_download_init+0x44>
		return -EINVAL;
	}

	int err;

	callback = client_callback;
   30e38:	4b11      	ldr	r3, [pc, #68]	; (30e80 <fota_download_init+0x4c>)
	dlc.set_native_tls = CONFIG_FOTA_DOWNLOAD_NATIVE_TLS;
#endif

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	/* Set the required buffer for MCUboot targets */
	err = dfu_target_mcuboot_set_buf(mcuboot_buf, sizeof(mcuboot_buf));
   30e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
	callback = client_callback;
   30e3e:	6018      	str	r0, [r3, #0]
	err = dfu_target_mcuboot_set_buf(mcuboot_buf, sizeof(mcuboot_buf));
   30e40:	4810      	ldr	r0, [pc, #64]	; (30e84 <fota_download_init+0x50>)
   30e42:	f000 fa63 	bl	3130c <dfu_target_mcuboot_set_buf>
	if (err) {
   30e46:	4604      	mov	r4, r0
   30e48:	b138      	cbz	r0, 30e5a <fota_download_init+0x26>
		LOG_ERR("%s failed to set MCUboot flash buffer %d",
   30e4a:	4603      	mov	r3, r0
   30e4c:	2145      	movs	r1, #69	; 0x45
   30e4e:	4a0e      	ldr	r2, [pc, #56]	; (30e88 <fota_download_init+0x54>)
   30e50:	480e      	ldr	r0, [pc, #56]	; (30e8c <fota_download_init+0x58>)
   30e52:	f00b ff3c 	bl	3ccce <z_log_minimal_printk>
		return err;
	}

	first_fragment = true;
	return 0;
}
   30e56:	4620      	mov	r0, r4
   30e58:	bd10      	pop	{r4, pc}
	k_work_init_delayable(&dlc_with_offset_work, download_with_offset);
   30e5a:	490d      	ldr	r1, [pc, #52]	; (30e90 <fota_download_init+0x5c>)
   30e5c:	480d      	ldr	r0, [pc, #52]	; (30e94 <fota_download_init+0x60>)
   30e5e:	f006 fbf5 	bl	3764c <k_work_init_delayable>
	err = download_client_init(&dlc, download_client_callback);
   30e62:	490d      	ldr	r1, [pc, #52]	; (30e98 <fota_download_init+0x64>)
   30e64:	480d      	ldr	r0, [pc, #52]	; (30e9c <fota_download_init+0x68>)
   30e66:	f7ff f82d 	bl	2fec4 <download_client_init>
	if (err != 0) {
   30e6a:	4604      	mov	r4, r0
   30e6c:	2800      	cmp	r0, #0
   30e6e:	d1f2      	bne.n	30e56 <fota_download_init+0x22>
	first_fragment = true;
   30e70:	2201      	movs	r2, #1
   30e72:	4b0b      	ldr	r3, [pc, #44]	; (30ea0 <fota_download_init+0x6c>)
   30e74:	701a      	strb	r2, [r3, #0]
	return 0;
   30e76:	e7ee      	b.n	30e56 <fota_download_init+0x22>
		return -EINVAL;
   30e78:	f06f 0415 	mvn.w	r4, #21
   30e7c:	e7eb      	b.n	30e56 <fota_download_init+0x22>
   30e7e:	bf00      	nop
   30e80:	2001a1c8 	.word	0x2001a1c8
   30e84:	2001a1d0 	.word	0x2001a1d0
   30e88:	0004b34f 	.word	0x0004b34f
   30e8c:	0004b2fe 	.word	0x0004b2fe
   30e90:	00030a5d 	.word	0x00030a5d
   30e94:	20018db8 	.word	0x20018db8
   30e98:	00030ae1 	.word	0x00030ae1
   30e9c:	20017360 	.word	0x20017360
   30ea0:	2001d3b8 	.word	0x2001d3b8

00030ea4 <dfu_target_img_type>:
static const struct dfu_target *current_target;
static int current_img_num = -1;

int dfu_target_img_type(const void *const buf, size_t len)
{
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   30ea4:	291f      	cmp	r1, #31
{
   30ea6:	b510      	push	{r4, lr}
   30ea8:	4604      	mov	r4, r0
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   30eaa:	d90d      	bls.n	30ec8 <dfu_target_img_type+0x24>
		return -EAGAIN;
	}
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   30eac:	f000 fa26 	bl	312fc <dfu_target_mcuboot_identify>
   30eb0:	b968      	cbnz	r0, 30ece <dfu_target_img_type+0x2a>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (dfu_target_modem_delta_identify(buf)) {
   30eb2:	4620      	mov	r0, r4
   30eb4:	f000 f93e 	bl	31134 <dfu_target_modem_delta_identify>
   30eb8:	b958      	cbnz	r0, 30ed2 <dfu_target_img_type+0x2e>
#ifdef CONFIG_DFU_TARGET_FULL_MODEM
	if (dfu_target_full_modem_identify(buf)) {
		return DFU_TARGET_IMAGE_TYPE_FULL_MODEM;
	}
#endif
	LOG_ERR("No supported image type found");
   30eba:	4807      	ldr	r0, [pc, #28]	; (30ed8 <dfu_target_img_type+0x34>)
   30ebc:	2145      	movs	r1, #69	; 0x45
   30ebe:	f00b ff06 	bl	3ccce <z_log_minimal_printk>
	return -ENOTSUP;
   30ec2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   30ec6:	bd10      	pop	{r4, pc}
		return -EAGAIN;
   30ec8:	f06f 000a 	mvn.w	r0, #10
   30ecc:	e7fb      	b.n	30ec6 <dfu_target_img_type+0x22>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   30ece:	2001      	movs	r0, #1
   30ed0:	e7f9      	b.n	30ec6 <dfu_target_img_type+0x22>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   30ed2:	2002      	movs	r0, #2
   30ed4:	e7f7      	b.n	30ec6 <dfu_target_img_type+0x22>
   30ed6:	bf00      	nop
   30ed8:	0004b362 	.word	0x0004b362

00030edc <dfu_target_init>:

int dfu_target_init(int img_type, int img_num, size_t file_size, dfu_target_callback_t cb)
{
   30edc:	b570      	push	{r4, r5, r6, lr}
   30ede:	4604      	mov	r4, r0
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   30ee0:	2c01      	cmp	r4, #1
{
   30ee2:	4610      	mov	r0, r2
   30ee4:	461a      	mov	r2, r3
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   30ee6:	d008      	beq.n	30efa <dfu_target_init+0x1e>
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   30ee8:	2c02      	cmp	r4, #2
   30eea:	d017      	beq.n	30f1c <dfu_target_init+0x40>
	if (img_type == DFU_TARGET_IMAGE_TYPE_FULL_MODEM) {
		new_target = &dfu_target_full_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   30eec:	480d      	ldr	r0, [pc, #52]	; (30f24 <dfu_target_init+0x48>)
   30eee:	2145      	movs	r1, #69	; 0x45
   30ef0:	f00b feed 	bl	3ccce <z_log_minimal_printk>
		return -ENOTSUP;
   30ef4:	f06f 0085 	mvn.w	r0, #133	; 0x85

	current_target = new_target;
	current_img_num = img_num;

	return current_target->init(file_size, img_num, cb);
}
   30ef8:	bd70      	pop	{r4, r5, r6, pc}
		new_target = &dfu_target_mcuboot;
   30efa:	4d0b      	ldr	r5, [pc, #44]	; (30f28 <dfu_target_init+0x4c>)
	if (new_target == current_target
   30efc:	4e0b      	ldr	r6, [pc, #44]	; (30f2c <dfu_target_init+0x50>)
   30efe:	6833      	ldr	r3, [r6, #0]
   30f00:	42ab      	cmp	r3, r5
   30f02:	4b0b      	ldr	r3, [pc, #44]	; (30f30 <dfu_target_init+0x54>)
   30f04:	d104      	bne.n	30f10 <dfu_target_init+0x34>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA
   30f06:	2c02      	cmp	r4, #2
   30f08:	d002      	beq.n	30f10 <dfu_target_init+0x34>
	   && current_img_num == img_num) {
   30f0a:	681c      	ldr	r4, [r3, #0]
   30f0c:	42a1      	cmp	r1, r4
   30f0e:	d007      	beq.n	30f20 <dfu_target_init+0x44>
	current_target = new_target;
   30f10:	6035      	str	r5, [r6, #0]
	current_img_num = img_num;
   30f12:	6019      	str	r1, [r3, #0]
	return current_target->init(file_size, img_num, cb);
   30f14:	682b      	ldr	r3, [r5, #0]
}
   30f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, img_num, cb);
   30f1a:	4718      	bx	r3
		new_target = &dfu_target_modem_delta;
   30f1c:	4d05      	ldr	r5, [pc, #20]	; (30f34 <dfu_target_init+0x58>)
   30f1e:	e7ed      	b.n	30efc <dfu_target_init+0x20>
		return 0;
   30f20:	2000      	movs	r0, #0
   30f22:	e7e9      	b.n	30ef8 <dfu_target_init+0x1c>
   30f24:	0004b385 	.word	0x0004b385
   30f28:	000432b0 	.word	0x000432b0
   30f2c:	2001a3d4 	.word	0x2001a3d4
   30f30:	200146ec 	.word	0x200146ec
   30f34:	000432c4 	.word	0x000432c4

00030f38 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   30f38:	4b03      	ldr	r3, [pc, #12]	; (30f48 <dfu_target_offset_get+0x10>)
   30f3a:	681b      	ldr	r3, [r3, #0]
   30f3c:	b10b      	cbz	r3, 30f42 <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   30f3e:	685b      	ldr	r3, [r3, #4]
   30f40:	4718      	bx	r3
}
   30f42:	f06f 000c 	mvn.w	r0, #12
   30f46:	4770      	bx	lr
   30f48:	2001a3d4 	.word	0x2001a3d4

00030f4c <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   30f4c:	4a04      	ldr	r2, [pc, #16]	; (30f60 <dfu_target_write+0x14>)
   30f4e:	6812      	ldr	r2, [r2, #0]
   30f50:	b112      	cbz	r2, 30f58 <dfu_target_write+0xc>
   30f52:	b108      	cbz	r0, 30f58 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   30f54:	6893      	ldr	r3, [r2, #8]
   30f56:	4718      	bx	r3
}
   30f58:	f06f 000c 	mvn.w	r0, #12
   30f5c:	4770      	bx	lr
   30f5e:	bf00      	nop
   30f60:	2001a3d4 	.word	0x2001a3d4

00030f64 <dfu_target_done>:

int dfu_target_done(bool successful)
{
	int err;

	if (current_target == NULL) {
   30f64:	4b08      	ldr	r3, [pc, #32]	; (30f88 <dfu_target_done+0x24>)
{
   30f66:	b510      	push	{r4, lr}
	if (current_target == NULL) {
   30f68:	681b      	ldr	r3, [r3, #0]
   30f6a:	b14b      	cbz	r3, 30f80 <dfu_target_done+0x1c>
		return -EACCES;
	}

	err = current_target->done(successful);
   30f6c:	68db      	ldr	r3, [r3, #12]
   30f6e:	4798      	blx	r3
	if (err != 0) {
   30f70:	4604      	mov	r4, r0
   30f72:	b118      	cbz	r0, 30f7c <dfu_target_done+0x18>
		LOG_ERR("Unable to clean up dfu_target");
   30f74:	2145      	movs	r1, #69	; 0x45
   30f76:	4805      	ldr	r0, [pc, #20]	; (30f8c <dfu_target_done+0x28>)
   30f78:	f00b fea9 	bl	3ccce <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   30f7c:	4620      	mov	r0, r4
   30f7e:	bd10      	pop	{r4, pc}
		return -EACCES;
   30f80:	f06f 040c 	mvn.w	r4, #12
   30f84:	e7fa      	b.n	30f7c <dfu_target_done+0x18>
   30f86:	bf00      	nop
   30f88:	2001a3d4 	.word	0x2001a3d4
   30f8c:	0004b39d 	.word	0x0004b39d

00030f90 <dfu_target_reset>:

int dfu_target_reset(void)
{
   30f90:	b538      	push	{r3, r4, r5, lr}
	if (current_target != NULL) {
   30f92:	4d08      	ldr	r5, [pc, #32]	; (30fb4 <dfu_target_reset+0x24>)
   30f94:	682b      	ldr	r3, [r5, #0]
   30f96:	b153      	cbz	r3, 30fae <dfu_target_reset+0x1e>
		int err = current_target->done(false);
   30f98:	2000      	movs	r0, #0
   30f9a:	68db      	ldr	r3, [r3, #12]
   30f9c:	4798      	blx	r3

		if (err != 0) {
   30f9e:	4604      	mov	r4, r0
   30fa0:	b128      	cbz	r0, 30fae <dfu_target_reset+0x1e>
			LOG_ERR("Unable to clean up dfu_target");
   30fa2:	2145      	movs	r1, #69	; 0x45
   30fa4:	4804      	ldr	r0, [pc, #16]	; (30fb8 <dfu_target_reset+0x28>)
   30fa6:	f00b fe92 	bl	3ccce <z_log_minimal_printk>
			return err;
		}
	}
	current_target = NULL;
	return 0;
}
   30faa:	4620      	mov	r0, r4
   30fac:	bd38      	pop	{r3, r4, r5, pc}
	current_target = NULL;
   30fae:	2400      	movs	r4, #0
   30fb0:	602c      	str	r4, [r5, #0]
	return 0;
   30fb2:	e7fa      	b.n	30faa <dfu_target_reset+0x1a>
   30fb4:	2001a3d4 	.word	0x2001a3d4
   30fb8:	0004b39d 	.word	0x0004b39d

00030fbc <dfu_target_schedule_update>:

int dfu_target_schedule_update(int img_num)
{
   30fbc:	b510      	push	{r4, lr}
	int err = 0;

	if (current_target == NULL) {
   30fbe:	4c05      	ldr	r4, [pc, #20]	; (30fd4 <dfu_target_schedule_update+0x18>)
   30fc0:	6823      	ldr	r3, [r4, #0]
   30fc2:	b123      	cbz	r3, 30fce <dfu_target_schedule_update+0x12>
		return -EACCES;
	}

	err = current_target->schedule_update(img_num);
   30fc4:	691b      	ldr	r3, [r3, #16]
   30fc6:	4798      	blx	r3
	current_target = NULL;
   30fc8:	2300      	movs	r3, #0
   30fca:	6023      	str	r3, [r4, #0]

	return err;
}
   30fcc:	bd10      	pop	{r4, pc}
		return -EACCES;
   30fce:	f06f 000c 	mvn.w	r0, #12
   30fd2:	e7fb      	b.n	30fcc <dfu_target_schedule_update+0x10>
   30fd4:	2001a3d4 	.word	0x2001a3d4

00030fd8 <dfu_target_stream_get_stream>:
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

struct stream_flash_ctx *dfu_target_stream_get_stream(void)
{
	return &stream;
}
   30fd8:	4800      	ldr	r0, [pc, #0]	; (30fdc <dfu_target_stream_get_stream+0x4>)
   30fda:	4770      	bx	lr
   30fdc:	2001a3dc 	.word	0x2001a3dc

00030fe0 <dfu_target_stream_init>:

int dfu_target_stream_init(const struct dfu_target_stream_init *init)
{
   30fe0:	b530      	push	{r4, r5, lr}
	int err;

	if (current_id != NULL) {
   30fe2:	4c12      	ldr	r4, [pc, #72]	; (3102c <dfu_target_stream_init+0x4c>)
{
   30fe4:	b085      	sub	sp, #20
	if (current_id != NULL) {
   30fe6:	6823      	ldr	r3, [r4, #0]
   30fe8:	b9d3      	cbnz	r3, 31020 <dfu_target_stream_init+0x40>
		return -EFAULT;
	}

	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   30fea:	b1e0      	cbz	r0, 31026 <dfu_target_stream_init+0x46>
   30fec:	6805      	ldr	r5, [r0, #0]
   30fee:	b1d5      	cbz	r5, 31026 <dfu_target_stream_init+0x46>
   30ff0:	6841      	ldr	r1, [r0, #4]
   30ff2:	b1c1      	cbz	r1, 31026 <dfu_target_stream_init+0x46>
	    init->buf == NULL) {
   30ff4:	6882      	ldr	r2, [r0, #8]
	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   30ff6:	b1b2      	cbz	r2, 31026 <dfu_target_stream_init+0x46>
		return -EINVAL;
	}

	current_id = init->id;
   30ff8:	6025      	str	r5, [r4, #0]

	err = stream_flash_init(&stream, init->fdev, init->buf, init->len,
   30ffa:	9302      	str	r3, [sp, #8]
   30ffc:	6943      	ldr	r3, [r0, #20]
   30ffe:	9301      	str	r3, [sp, #4]
   31000:	6903      	ldr	r3, [r0, #16]
   31002:	9300      	str	r3, [sp, #0]
   31004:	68c3      	ldr	r3, [r0, #12]
   31006:	480a      	ldr	r0, [pc, #40]	; (31030 <dfu_target_stream_init+0x50>)
   31008:	f7f0 ffb0 	bl	21f6c <stream_flash_init>
				init->offset, init->size, NULL);
	if (err) {
   3100c:	4604      	mov	r4, r0
   3100e:	b120      	cbz	r0, 3101a <dfu_target_stream_init+0x3a>
		LOG_ERR("stream_flash_init failed (err %d)", err);
   31010:	4602      	mov	r2, r0
   31012:	2145      	movs	r1, #69	; 0x45
   31014:	4807      	ldr	r0, [pc, #28]	; (31034 <dfu_target_stream_init+0x54>)
   31016:	f00b fe5a 	bl	3ccce <z_log_minimal_printk>
		return err;
	}
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

	return 0;
}
   3101a:	4620      	mov	r0, r4
   3101c:	b005      	add	sp, #20
   3101e:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   31020:	f06f 040d 	mvn.w	r4, #13
   31024:	e7f9      	b.n	3101a <dfu_target_stream_init+0x3a>
		return -EINVAL;
   31026:	f06f 0415 	mvn.w	r4, #21
   3102a:	e7f6      	b.n	3101a <dfu_target_stream_init+0x3a>
   3102c:	2001a3d8 	.word	0x2001a3d8
   31030:	2001a3dc 	.word	0x2001a3dc
   31034:	0004b3cb 	.word	0x0004b3cb

00031038 <dfu_target_stream_offset_get>:

int dfu_target_stream_offset_get(size_t *out)
{
   31038:	b510      	push	{r4, lr}
   3103a:	4604      	mov	r4, r0
	*out = stream_flash_bytes_written(&stream);
   3103c:	4802      	ldr	r0, [pc, #8]	; (31048 <dfu_target_stream_offset_get+0x10>)
   3103e:	f00c fb7e 	bl	3d73e <stream_flash_bytes_written>
   31042:	6020      	str	r0, [r4, #0]

	return 0;
}
   31044:	2000      	movs	r0, #0
   31046:	bd10      	pop	{r4, pc}
   31048:	2001a3dc 	.word	0x2001a3dc

0003104c <dfu_target_stream_write>:

int dfu_target_stream_write(const uint8_t *buf, size_t len)
{
   3104c:	460a      	mov	r2, r1
   3104e:	b510      	push	{r4, lr}
	int err = stream_flash_buffered_write(&stream, buf, len, false);
   31050:	4601      	mov	r1, r0
   31052:	2300      	movs	r3, #0
   31054:	4805      	ldr	r0, [pc, #20]	; (3106c <dfu_target_stream_write+0x20>)
   31056:	f00c fb2e 	bl	3d6b6 <stream_flash_buffered_write>

	if (err != 0) {
   3105a:	4604      	mov	r4, r0
   3105c:	b120      	cbz	r0, 31068 <dfu_target_stream_write+0x1c>
		LOG_ERR("stream_flash_buffered_write error %d", err);
   3105e:	4602      	mov	r2, r0
   31060:	2145      	movs	r1, #69	; 0x45
   31062:	4803      	ldr	r0, [pc, #12]	; (31070 <dfu_target_stream_write+0x24>)
   31064:	f00b fe33 	bl	3ccce <z_log_minimal_printk>
		LOG_WRN("Unable to store write progress: %d", err);
	}
#endif

	return err;
}
   31068:	4620      	mov	r0, r4
   3106a:	bd10      	pop	{r4, pc}
   3106c:	2001a3dc 	.word	0x2001a3dc
   31070:	0004b3f2 	.word	0x0004b3f2

00031074 <dfu_target_stream_done>:

int dfu_target_stream_done(bool successful)
{
   31074:	b510      	push	{r4, lr}
	int err = 0;

	if (successful) {
   31076:	b188      	cbz	r0, 3109c <dfu_target_stream_done+0x28>
		err = stream_flash_buffered_write(&stream, NULL, 0, true);
   31078:	2200      	movs	r2, #0
   3107a:	2301      	movs	r3, #1
   3107c:	4611      	mov	r1, r2
   3107e:	4808      	ldr	r0, [pc, #32]	; (310a0 <dfu_target_stream_done+0x2c>)
   31080:	f00c fb19 	bl	3d6b6 <stream_flash_buffered_write>
		if (err != 0) {
   31084:	4604      	mov	r4, r0
   31086:	b120      	cbz	r0, 31092 <dfu_target_stream_done+0x1e>
			LOG_ERR("stream_flash_buffered_write error %d", err);
   31088:	4602      	mov	r2, r0
   3108a:	2145      	movs	r1, #69	; 0x45
   3108c:	4805      	ldr	r0, [pc, #20]	; (310a4 <dfu_target_stream_done+0x30>)
   3108e:	f00b fe1e 	bl	3ccce <z_log_minimal_printk>
			LOG_ERR("Unable to reset write progress: %d", err);
		}
#endif
	}

	current_id = NULL;
   31092:	2200      	movs	r2, #0
   31094:	4b04      	ldr	r3, [pc, #16]	; (310a8 <dfu_target_stream_done+0x34>)

	return err;
}
   31096:	4620      	mov	r0, r4
	current_id = NULL;
   31098:	601a      	str	r2, [r3, #0]
}
   3109a:	bd10      	pop	{r4, pc}
	int err = 0;
   3109c:	4604      	mov	r4, r0
   3109e:	e7f8      	b.n	31092 <dfu_target_stream_done+0x1e>
   310a0:	2001a3dc 	.word	0x2001a3dc
   310a4:	0004b3f2 	.word	0x0004b3f2
   310a8:	2001a3d8 	.word	0x2001a3d8

000310ac <delete_banked_modem_delta_fw>:

static dfu_target_callback_t callback;

#define SLEEP_TIME 1
static int delete_banked_modem_delta_fw(void)
{
   310ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int err;
	int offset;
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
   310ae:	2149      	movs	r1, #73	; 0x49
   310b0:	481b      	ldr	r0, [pc, #108]	; (31120 <delete_banked_modem_delta_fw+0x74>)
   310b2:	f00b fe0c 	bl	3ccce <z_log_minimal_printk>
	err = nrf_modem_delta_dfu_erase();
   310b6:	f004 fa8b 	bl	355d0 <nrf_modem_delta_dfu_erase>
	if (err != 0) {
   310ba:	4602      	mov	r2, r0
   310bc:	b140      	cbz	r0, 310d0 <delete_banked_modem_delta_fw+0x24>
		LOG_ERR("Failed to delete backup, error %d", err);
   310be:	2145      	movs	r1, #69	; 0x45
   310c0:	4818      	ldr	r0, [pc, #96]	; (31124 <delete_banked_modem_delta_fw+0x78>)
   310c2:	f00b fe04 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   310c6:	f06f 040d 	mvn.w	r4, #13
			break;
		}
	}

	return 0;
}
   310ca:	4620      	mov	r0, r4
   310cc:	b003      	add	sp, #12
   310ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   310d0:	253c      	movs	r5, #60	; 0x3c
				callback(DFU_TARGET_EVT_TIMEOUT);
   310d2:	4e15      	ldr	r6, [pc, #84]	; (31128 <delete_banked_modem_delta_fw+0x7c>)
				LOG_ERR("Error during erase, error %d", err);
   310d4:	4f15      	ldr	r7, [pc, #84]	; (3112c <delete_banked_modem_delta_fw+0x80>)
		err = nrf_modem_delta_dfu_offset(&offset);
   310d6:	a801      	add	r0, sp, #4
   310d8:	f004 f976 	bl	353c8 <nrf_modem_delta_dfu_offset>
		if (err != 0) {
   310dc:	4604      	mov	r4, r0
   310de:	b1a8      	cbz	r0, 3110c <delete_banked_modem_delta_fw+0x60>
			if (timeout < 0) {
   310e0:	2d00      	cmp	r5, #0
   310e2:	da03      	bge.n	310ec <delete_banked_modem_delta_fw+0x40>
				callback(DFU_TARGET_EVT_TIMEOUT);
   310e4:	2000      	movs	r0, #0
   310e6:	6833      	ldr	r3, [r6, #0]
   310e8:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   310ea:	253c      	movs	r5, #60	; 0x3c
			if (err != NRF_MODEM_DELTA_DFU_ERASE_PENDING &&
   310ec:	2c11      	cmp	r4, #17
   310ee:	d006      	beq.n	310fe <delete_banked_modem_delta_fw+0x52>
   310f0:	2c05      	cmp	r4, #5
   310f2:	d004      	beq.n	310fe <delete_banked_modem_delta_fw+0x52>
				LOG_ERR("Error during erase, error %d", err);
   310f4:	4622      	mov	r2, r4
   310f6:	2145      	movs	r1, #69	; 0x45
   310f8:	4638      	mov	r0, r7
   310fa:	f00b fde8 	bl	3ccce <z_log_minimal_printk>
	return z_impl_k_sleep(timeout);
   310fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   31102:	2100      	movs	r1, #0
   31104:	f007 fb10 	bl	38728 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   31108:	3d01      	subs	r5, #1
		err = nrf_modem_delta_dfu_offset(&offset);
   3110a:	e7e4      	b.n	310d6 <delete_banked_modem_delta_fw+0x2a>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   3110c:	4b06      	ldr	r3, [pc, #24]	; (31128 <delete_banked_modem_delta_fw+0x7c>)
   3110e:	2001      	movs	r0, #1
   31110:	681b      	ldr	r3, [r3, #0]
   31112:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   31114:	2149      	movs	r1, #73	; 0x49
   31116:	4806      	ldr	r0, [pc, #24]	; (31130 <delete_banked_modem_delta_fw+0x84>)
   31118:	f00b fdd9 	bl	3ccce <z_log_minimal_printk>
	return 0;
   3111c:	e7d5      	b.n	310ca <delete_banked_modem_delta_fw+0x1e>
   3111e:	bf00      	nop
   31120:	0004b42e 	.word	0x0004b42e
   31124:	0004b46a 	.word	0x0004b46a
   31128:	2001a400 	.word	0x2001a400
   3112c:	0004b491 	.word	0x0004b491
   31130:	0004b4b3 	.word	0x0004b4b3

00031134 <dfu_target_modem_delta_identify>:

bool dfu_target_modem_delta_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   31134:	6840      	ldr	r0, [r0, #4]
}
   31136:	4b02      	ldr	r3, [pc, #8]	; (31140 <dfu_target_modem_delta_identify+0xc>)
   31138:	1ac3      	subs	r3, r0, r3
   3113a:	4258      	negs	r0, r3
   3113c:	4158      	adcs	r0, r3
   3113e:	4770      	bx	lr
   31140:	7544656d 	.word	0x7544656d

00031144 <dfu_target_modem_delta_init>:

int dfu_target_modem_delta_init(size_t file_size, int img_num, dfu_target_callback_t cb)
{
   31144:	b530      	push	{r4, r5, lr}
   31146:	b099      	sub	sp, #100	; 0x64
	int offset;
	size_t scratch_space;
	struct nrf_modem_delta_dfu_uuid version;
	char version_string[NRF_MODEM_DELTA_DFU_UUID_LEN+1];

	callback = cb;
   31148:	4b1f      	ldr	r3, [pc, #124]	; (311c8 <dfu_target_modem_delta_init+0x84>)

	/* Retrieve and print modem firmware UUID */
	err = nrf_modem_delta_dfu_uuid(&version);
   3114a:	ad05      	add	r5, sp, #20
{
   3114c:	4604      	mov	r4, r0
	err = nrf_modem_delta_dfu_uuid(&version);
   3114e:	4628      	mov	r0, r5
	callback = cb;
   31150:	601a      	str	r2, [r3, #0]
	err = nrf_modem_delta_dfu_uuid(&version);
   31152:	f004 f981 	bl	35458 <nrf_modem_delta_dfu_uuid>
	if (err != 0) {
   31156:	4602      	mov	r2, r0
   31158:	b138      	cbz	r0, 3116a <dfu_target_modem_delta_init+0x26>
		LOG_ERR("Firmware version request failed, error %d", err);
   3115a:	2145      	movs	r1, #69	; 0x45
   3115c:	481b      	ldr	r0, [pc, #108]	; (311cc <dfu_target_modem_delta_init+0x88>)
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));

	/* Check if scratch area is big enough for downloaded image */
	err = nrf_modem_delta_dfu_area(&scratch_space);
	if (err != 0) {
		LOG_ERR("Failed to retrieve size of modem DFU area, error %d", err);
   3115e:	f00b fdb6 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   31162:	f06f 000d 	mvn.w	r0, #13
		err = delete_banked_modem_delta_fw();
		return err;
	}

	return 0;
}
   31166:	b019      	add	sp, #100	; 0x64
   31168:	bd30      	pop	{r4, r5, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   3116a:	2324      	movs	r3, #36	; 0x24
   3116c:	2125      	movs	r1, #37	; 0x25
   3116e:	4a18      	ldr	r2, [pc, #96]	; (311d0 <dfu_target_modem_delta_init+0x8c>)
   31170:	9500      	str	r5, [sp, #0]
   31172:	a80e      	add	r0, sp, #56	; 0x38
   31174:	f009 fb22 	bl	3a7bc <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   31178:	aa0e      	add	r2, sp, #56	; 0x38
   3117a:	2149      	movs	r1, #73	; 0x49
   3117c:	4815      	ldr	r0, [pc, #84]	; (311d4 <dfu_target_modem_delta_init+0x90>)
   3117e:	f00b fda6 	bl	3ccce <z_log_minimal_printk>
	err = nrf_modem_delta_dfu_area(&scratch_space);
   31182:	a804      	add	r0, sp, #16
   31184:	f004 f944 	bl	35410 <nrf_modem_delta_dfu_area>
	if (err != 0) {
   31188:	4602      	mov	r2, r0
   3118a:	b110      	cbz	r0, 31192 <dfu_target_modem_delta_init+0x4e>
		LOG_ERR("Failed to retrieve size of modem DFU area, error %d", err);
   3118c:	2145      	movs	r1, #69	; 0x45
   3118e:	4812      	ldr	r0, [pc, #72]	; (311d8 <dfu_target_modem_delta_init+0x94>)
   31190:	e7e5      	b.n	3115e <dfu_target_modem_delta_init+0x1a>
	if (file_size > scratch_space) {
   31192:	9b04      	ldr	r3, [sp, #16]
   31194:	42a3      	cmp	r3, r4
   31196:	d207      	bcs.n	311a8 <dfu_target_modem_delta_init+0x64>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   31198:	4810      	ldr	r0, [pc, #64]	; (311dc <dfu_target_modem_delta_init+0x98>)
   3119a:	4622      	mov	r2, r4
   3119c:	2145      	movs	r1, #69	; 0x45
   3119e:	f00b fd96 	bl	3ccce <z_log_minimal_printk>
		return -EFBIG;
   311a2:	f06f 001a 	mvn.w	r0, #26
   311a6:	e7de      	b.n	31166 <dfu_target_modem_delta_init+0x22>
	err = nrf_modem_delta_dfu_offset(&offset);
   311a8:	a803      	add	r0, sp, #12
   311aa:	f004 f90d 	bl	353c8 <nrf_modem_delta_dfu_offset>
	if (err != 0) {
   311ae:	b118      	cbz	r0, 311b8 <dfu_target_modem_delta_init+0x74>
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
   311b0:	4602      	mov	r2, r0
   311b2:	2145      	movs	r1, #69	; 0x45
   311b4:	480a      	ldr	r0, [pc, #40]	; (311e0 <dfu_target_modem_delta_init+0x9c>)
   311b6:	e7d2      	b.n	3115e <dfu_target_modem_delta_init+0x1a>
	if (offset == NRF_MODEM_DELTA_DFU_OFFSET_DIRTY) {
   311b8:	9b03      	ldr	r3, [sp, #12]
   311ba:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
   311be:	d1d2      	bne.n	31166 <dfu_target_modem_delta_init+0x22>
		err = delete_banked_modem_delta_fw();
   311c0:	f7ff ff74 	bl	310ac <delete_banked_modem_delta_fw>
		return err;
   311c4:	e7cf      	b.n	31166 <dfu_target_modem_delta_init+0x22>
   311c6:	bf00      	nop
   311c8:	2001a400 	.word	0x2001a400
   311cc:	0004b4d1 	.word	0x0004b4d1
   311d0:	000484a4 	.word	0x000484a4
   311d4:	0004b500 	.word	0x0004b500
   311d8:	0004b520 	.word	0x0004b520
   311dc:	0004b559 	.word	0x0004b559
   311e0:	0004b58d 	.word	0x0004b58d

000311e4 <dfu_target_modem_delta_offset_get>:

int dfu_target_modem_delta_offset_get(size_t *out)
{
   311e4:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_delta_dfu_offset(out);
   311e6:	f004 f8ef 	bl	353c8 <nrf_modem_delta_dfu_offset>
	if (err != 0) {
   311ea:	b130      	cbz	r0, 311fa <dfu_target_modem_delta_offset_get+0x16>
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
   311ec:	4602      	mov	r2, r0
   311ee:	2145      	movs	r1, #69	; 0x45
   311f0:	4802      	ldr	r0, [pc, #8]	; (311fc <dfu_target_modem_delta_offset_get+0x18>)
   311f2:	f00b fd6c 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   311f6:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   311fa:	bd08      	pop	{r3, pc}
   311fc:	0004b58d 	.word	0x0004b58d

00031200 <dfu_target_modem_delta_write>:

int dfu_target_modem_delta_write(const void *const buf, size_t len)
{
   31200:	b570      	push	{r4, r5, r6, lr}
   31202:	4605      	mov	r5, r0
   31204:	460e      	mov	r6, r1
	int err;

	err = nrf_modem_delta_dfu_write_init();
   31206:	f004 f951 	bl	354ac <nrf_modem_delta_dfu_write_init>
	if (err != 0 && err != -NRF_EALREADY) {
   3120a:	4602      	mov	r2, r0
   3120c:	b148      	cbz	r0, 31222 <dfu_target_modem_delta_write+0x22>
   3120e:	f110 0f78 	cmn.w	r0, #120	; 0x78
   31212:	d006      	beq.n	31222 <dfu_target_modem_delta_write+0x22>
		LOG_ERR("Failed to ready modem for firmware update receival, error %d", err);
   31214:	2145      	movs	r1, #69	; 0x45
   31216:	4816      	ldr	r0, [pc, #88]	; (31270 <dfu_target_modem_delta_write+0x70>)
		return -EFAULT;
	}

	err = nrf_modem_delta_dfu_write(buf, len);
	if (err < 0) {
		LOG_ERR("Write failed, modem library error %d", err);
   31218:	f00b fd59 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   3121c:	f06f 000d 	mvn.w	r0, #13
			return -EFAULT;
		}
	}

	return 0;
}
   31220:	bd70      	pop	{r4, r5, r6, pc}
	err = nrf_modem_delta_dfu_write(buf, len);
   31222:	4631      	mov	r1, r6
   31224:	4628      	mov	r0, r5
   31226:	f004 f96d 	bl	35504 <nrf_modem_delta_dfu_write>
	if (err < 0) {
   3122a:	1e04      	subs	r4, r0, #0
   3122c:	da03      	bge.n	31236 <dfu_target_modem_delta_write+0x36>
		LOG_ERR("Write failed, modem library error %d", err);
   3122e:	4622      	mov	r2, r4
   31230:	2145      	movs	r1, #69	; 0x45
   31232:	4810      	ldr	r0, [pc, #64]	; (31274 <dfu_target_modem_delta_write+0x74>)
   31234:	e7f0      	b.n	31218 <dfu_target_modem_delta_write+0x18>
	} else if (err > 0) {
   31236:	d016      	beq.n	31266 <dfu_target_modem_delta_write+0x66>
		LOG_ERR("Write failed, modem error %d", err);
   31238:	4622      	mov	r2, r4
   3123a:	2145      	movs	r1, #69	; 0x45
   3123c:	480e      	ldr	r0, [pc, #56]	; (31278 <dfu_target_modem_delta_write+0x78>)
   3123e:	f00b fd46 	bl	3ccce <z_log_minimal_printk>
		switch (err) {
   31242:	2c0b      	cmp	r4, #11
   31244:	d008      	beq.n	31258 <dfu_target_modem_delta_write+0x58>
   31246:	2c0e      	cmp	r4, #14
   31248:	d006      	beq.n	31258 <dfu_target_modem_delta_write+0x58>
			return -EINVAL;
   3124a:	2c09      	cmp	r4, #9
   3124c:	bf14      	ite	ne
   3124e:	f06f 000d 	mvnne.w	r0, #13
   31252:	f06f 0015 	mvneq.w	r0, #21
   31256:	e7e3      	b.n	31220 <dfu_target_modem_delta_write+0x20>
			delete_banked_modem_delta_fw();
   31258:	f7ff ff28 	bl	310ac <delete_banked_modem_delta_fw>
			err = dfu_target_modem_delta_write(buf, len);
   3125c:	4631      	mov	r1, r6
   3125e:	4628      	mov	r0, r5
   31260:	f7ff ffce 	bl	31200 <dfu_target_modem_delta_write>
			if (err != 0) {
   31264:	b908      	cbnz	r0, 3126a <dfu_target_modem_delta_write+0x6a>
				return 0;
   31266:	2000      	movs	r0, #0
   31268:	e7da      	b.n	31220 <dfu_target_modem_delta_write+0x20>
				return -EINVAL;
   3126a:	f06f 0015 	mvn.w	r0, #21
   3126e:	e7d7      	b.n	31220 <dfu_target_modem_delta_write+0x20>
   31270:	0004b5c6 	.word	0x0004b5c6
   31274:	0004b608 	.word	0x0004b608
   31278:	0004b632 	.word	0x0004b632

0003127c <dfu_target_modem_delta_done>:

int dfu_target_modem_delta_done(bool successful)
{
   3127c:	b508      	push	{r3, lr}
	int err;

	ARG_UNUSED(successful);

	err = nrf_modem_delta_dfu_write_done();
   3127e:	f004 f96d 	bl	3555c <nrf_modem_delta_dfu_write_done>
	if (err != 0) {
   31282:	b130      	cbz	r0, 31292 <dfu_target_modem_delta_done+0x16>
		LOG_ERR("Failed to stop MFU and release resources, error %d", err);
   31284:	4602      	mov	r2, r0
   31286:	2145      	movs	r1, #69	; 0x45
   31288:	4802      	ldr	r0, [pc, #8]	; (31294 <dfu_target_modem_delta_done+0x18>)
   3128a:	f00b fd20 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   3128e:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   31292:	bd08      	pop	{r3, pc}
   31294:	0004b654 	.word	0x0004b654

00031298 <dfu_target_modem_delta_schedule_update>:

int dfu_target_modem_delta_schedule_update(int img_num)
{
   31298:	b510      	push	{r4, lr}
	int err;

	ARG_UNUSED(img_num);

	err = nrf_modem_delta_dfu_update();
   3129a:	f004 f97f 	bl	3559c <nrf_modem_delta_dfu_update>

	if (err != 0) {
   3129e:	4604      	mov	r4, r0
   312a0:	b140      	cbz	r0, 312b4 <dfu_target_modem_delta_schedule_update+0x1c>
		LOG_ERR("Modem firmware upgrade scheduling failed, error %d", err);
   312a2:	4602      	mov	r2, r0
   312a4:	2145      	movs	r1, #69	; 0x45
   312a6:	4806      	ldr	r0, [pc, #24]	; (312c0 <dfu_target_modem_delta_schedule_update+0x28>)
   312a8:	f00b fd11 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   312ac:	f06f 040d 	mvn.w	r4, #13
	}
	LOG_INF("Scheduling modem firmware upgrade at next boot");

	return err;
}
   312b0:	4620      	mov	r0, r4
   312b2:	bd10      	pop	{r4, pc}
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   312b4:	2149      	movs	r1, #73	; 0x49
   312b6:	4803      	ldr	r0, [pc, #12]	; (312c4 <dfu_target_modem_delta_schedule_update+0x2c>)
   312b8:	f00b fd09 	bl	3ccce <z_log_minimal_printk>
	return err;
   312bc:	e7f8      	b.n	312b0 <dfu_target_modem_delta_schedule_update+0x18>
   312be:	bf00      	nop
   312c0:	0004b68c 	.word	0x0004b68c
   312c4:	0004b6c4 	.word	0x0004b6c4

000312c8 <dfu_target_mcuboot_schedule_one_img.constprop.0>:

static int dfu_target_mcuboot_schedule_one_img(int img_num)
{
	int err = 0;

	err = boot_request_upgrade_multi(img_num, BOOT_UPGRADE_TEST);
   312c8:	2100      	movs	r1, #0
static int dfu_target_mcuboot_schedule_one_img(int img_num)
   312ca:	b510      	push	{r4, lr}
	err = boot_request_upgrade_multi(img_num, BOOT_UPGRADE_TEST);
   312cc:	4608      	mov	r0, r1
   312ce:	f00c fb3f 	bl	3d950 <boot_request_upgrade_multi>
	if (err != 0) {
   312d2:	4604      	mov	r4, r0
   312d4:	b138      	cbz	r0, 312e6 <dfu_target_mcuboot_schedule_one_img.constprop.0+0x1e>
		LOG_ERR("boot_request_upgrade for image-%d error %d",
   312d6:	4603      	mov	r3, r0
   312d8:	2200      	movs	r2, #0
   312da:	2145      	movs	r1, #69	; 0x45
   312dc:	4805      	ldr	r0, [pc, #20]	; (312f4 <dfu_target_mcuboot_schedule_one_img.constprop.0+0x2c>)
   312de:	f00b fcf6 	bl	3ccce <z_log_minimal_printk>
		LOG_INF("MCUBoot image-%d upgrade scheduled. "
			"Reset device to apply", img_num);
	}

	return err;
}
   312e2:	4620      	mov	r0, r4
   312e4:	bd10      	pop	{r4, pc}
		LOG_INF("MCUBoot image-%d upgrade scheduled. "
   312e6:	4602      	mov	r2, r0
   312e8:	2149      	movs	r1, #73	; 0x49
   312ea:	4803      	ldr	r0, [pc, #12]	; (312f8 <dfu_target_mcuboot_schedule_one_img.constprop.0+0x30>)
   312ec:	f00b fcef 	bl	3ccce <z_log_minimal_printk>
	return err;
   312f0:	e7f7      	b.n	312e2 <dfu_target_mcuboot_schedule_one_img.constprop.0+0x1a>
   312f2:	bf00      	nop
   312f4:	0004b70f 	.word	0x0004b70f
   312f8:	0004b73f 	.word	0x0004b73f

000312fc <dfu_target_mcuboot_identify>:
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   312fc:	6800      	ldr	r0, [r0, #0]
}
   312fe:	4b02      	ldr	r3, [pc, #8]	; (31308 <dfu_target_mcuboot_identify+0xc>)
   31300:	1ac3      	subs	r3, r0, r3
   31302:	4258      	negs	r0, r3
   31304:	4158      	adcs	r0, r3
   31306:	4770      	bx	lr
   31308:	96f3b83d 	.word	0x96f3b83d

0003130c <dfu_target_mcuboot_set_buf>:
	if (buf == NULL) {
   3130c:	b140      	cbz	r0, 31320 <dfu_target_mcuboot_set_buf+0x14>
	if (!IS_ALIGNED_32(buf)) {
   3130e:	f010 0303 	ands.w	r3, r0, #3
   31312:	d105      	bne.n	31320 <dfu_target_mcuboot_set_buf+0x14>
	stream_buf = buf;
   31314:	4a04      	ldr	r2, [pc, #16]	; (31328 <dfu_target_mcuboot_set_buf+0x1c>)
   31316:	6010      	str	r0, [r2, #0]
	stream_buf_len = len;
   31318:	4a04      	ldr	r2, [pc, #16]	; (3132c <dfu_target_mcuboot_set_buf+0x20>)
	return 0;
   3131a:	4618      	mov	r0, r3
	stream_buf_len = len;
   3131c:	6011      	str	r1, [r2, #0]
	return 0;
   3131e:	4770      	bx	lr
		return -EINVAL;
   31320:	f06f 0015 	mvn.w	r0, #21
}
   31324:	4770      	bx	lr
   31326:	bf00      	nop
   31328:	2001a404 	.word	0x2001a404
   3132c:	2001a40c 	.word	0x2001a40c

00031330 <dfu_target_mcuboot_init>:
{
   31330:	b530      	push	{r4, r5, lr}
	stream_buf_bytes = 0;
   31332:	2500      	movs	r5, #0
   31334:	4b21      	ldr	r3, [pc, #132]	; (313bc <dfu_target_mcuboot_init+0x8c>)
	if (stream_buf == NULL) {
   31336:	4c22      	ldr	r4, [pc, #136]	; (313c0 <dfu_target_mcuboot_init+0x90>)
	stream_buf_bytes = 0;
   31338:	601d      	str	r5, [r3, #0]
	if (stream_buf == NULL) {
   3133a:	6823      	ldr	r3, [r4, #0]
{
   3133c:	4602      	mov	r2, r0
   3133e:	b089      	sub	sp, #36	; 0x24
	if (stream_buf == NULL) {
   31340:	b943      	cbnz	r3, 31354 <dfu_target_mcuboot_init+0x24>
		LOG_ERR("Missing stream_buf, call '..set_buf' before '..init");
   31342:	2145      	movs	r1, #69	; 0x45
   31344:	481f      	ldr	r0, [pc, #124]	; (313c4 <dfu_target_mcuboot_init+0x94>)
   31346:	f00b fcc2 	bl	3ccce <z_log_minimal_printk>
		return -ENODEV;
   3134a:	f06f 0412 	mvn.w	r4, #18
}
   3134e:	4620      	mov	r0, r4
   31350:	b009      	add	sp, #36	; 0x24
   31352:	bd30      	pop	{r4, r5, pc}
	if (file_size > secondary_size[img_num]) {
   31354:	f5b0 2fd0 	cmp.w	r0, #425984	; 0x68000
   31358:	d908      	bls.n	3136c <dfu_target_mcuboot_init+0x3c>
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   3135a:	f44f 23d0 	mov.w	r3, #425984	; 0x68000
   3135e:	2145      	movs	r1, #69	; 0x45
   31360:	4819      	ldr	r0, [pc, #100]	; (313c8 <dfu_target_mcuboot_init+0x98>)
   31362:	f00b fcb4 	bl	3ccce <z_log_minimal_printk>
		return -EFBIG;
   31366:	f06f 041a 	mvn.w	r4, #26
   3136a:	e7f0      	b.n	3134e <dfu_target_mcuboot_init+0x1e>
   3136c:	4817      	ldr	r0, [pc, #92]	; (313cc <dfu_target_mcuboot_init+0x9c>)
   3136e:	f004 fe39 	bl	35fe4 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   31372:	b938      	cbnz	r0, 31384 <dfu_target_mcuboot_init+0x54>
		LOG_ERR("Failed to get device '%s'",
   31374:	2145      	movs	r1, #69	; 0x45
   31376:	4a15      	ldr	r2, [pc, #84]	; (313cc <dfu_target_mcuboot_init+0x9c>)
   31378:	4815      	ldr	r0, [pc, #84]	; (313d0 <dfu_target_mcuboot_init+0xa0>)
   3137a:	f00b fca8 	bl	3ccce <z_log_minimal_printk>
		return -EFAULT;
   3137e:	f06f 040d 	mvn.w	r4, #13
   31382:	e7e4      	b.n	3134e <dfu_target_mcuboot_init+0x1e>
	err = dfu_target_stream_init(&(struct dfu_target_stream_init){
   31384:	4b13      	ldr	r3, [pc, #76]	; (313d4 <dfu_target_mcuboot_init+0xa4>)
   31386:	f44f 22f0 	mov.w	r2, #491520	; 0x78000
   3138a:	e9cd 3001 	strd	r3, r0, [sp, #4]
   3138e:	6823      	ldr	r3, [r4, #0]
   31390:	a801      	add	r0, sp, #4
   31392:	9303      	str	r3, [sp, #12]
   31394:	4b10      	ldr	r3, [pc, #64]	; (313d8 <dfu_target_mcuboot_init+0xa8>)
   31396:	9507      	str	r5, [sp, #28]
   31398:	681b      	ldr	r3, [r3, #0]
   3139a:	9304      	str	r3, [sp, #16]
   3139c:	f44f 23d0 	mov.w	r3, #425984	; 0x68000
   313a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
   313a4:	f7ff fe1c 	bl	30fe0 <dfu_target_stream_init>
	if (err < 0) {
   313a8:	1e04      	subs	r4, r0, #0
   313aa:	da05      	bge.n	313b8 <dfu_target_mcuboot_init+0x88>
		LOG_ERR("dfu_target_stream_init failed %d", err);
   313ac:	4622      	mov	r2, r4
   313ae:	2145      	movs	r1, #69	; 0x45
   313b0:	480a      	ldr	r0, [pc, #40]	; (313dc <dfu_target_mcuboot_init+0xac>)
   313b2:	f00b fc8c 	bl	3ccce <z_log_minimal_printk>
		return err;
   313b6:	e7ca      	b.n	3134e <dfu_target_mcuboot_init+0x1e>
	return 0;
   313b8:	462c      	mov	r4, r5
   313ba:	e7c8      	b.n	3134e <dfu_target_mcuboot_init+0x1e>
   313bc:	2001a408 	.word	0x2001a408
   313c0:	2001a404 	.word	0x2001a404
   313c4:	0004b77e 	.word	0x0004b77e
   313c8:	0004b7b7 	.word	0x0004b7b7
   313cc:	0004464a 	.word	0x0004464a
   313d0:	0004b7ee 	.word	0x0004b7ee
   313d4:	0004b80d 	.word	0x0004b80d
   313d8:	2001a40c 	.word	0x2001a40c
   313dc:	0004b816 	.word	0x0004b816

000313e0 <dfu_target_mcuboot_offset_get>:
{
   313e0:	b510      	push	{r4, lr}
   313e2:	4604      	mov	r4, r0
	err = dfu_target_stream_offset_get(out);
   313e4:	f7ff fe28 	bl	31038 <dfu_target_stream_offset_get>
	if (err == 0) {
   313e8:	b920      	cbnz	r0, 313f4 <dfu_target_mcuboot_offset_get+0x14>
		*out += stream_buf_bytes;
   313ea:	4a03      	ldr	r2, [pc, #12]	; (313f8 <dfu_target_mcuboot_offset_get+0x18>)
   313ec:	6823      	ldr	r3, [r4, #0]
   313ee:	6812      	ldr	r2, [r2, #0]
   313f0:	4413      	add	r3, r2
   313f2:	6023      	str	r3, [r4, #0]
}
   313f4:	bd10      	pop	{r4, pc}
   313f6:	bf00      	nop
   313f8:	2001a408 	.word	0x2001a408

000313fc <dfu_target_mcuboot_write>:
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   313fc:	4a06      	ldr	r2, [pc, #24]	; (31418 <dfu_target_mcuboot_write+0x1c>)
{
   313fe:	b430      	push	{r4, r5}
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   31400:	4c06      	ldr	r4, [pc, #24]	; (3141c <dfu_target_mcuboot_write+0x20>)
   31402:	6813      	ldr	r3, [r2, #0]
   31404:	6824      	ldr	r4, [r4, #0]
   31406:	440b      	add	r3, r1
   31408:	fbb3 f5f4 	udiv	r5, r3, r4
   3140c:	fb04 3315 	mls	r3, r4, r5, r3
}
   31410:	bc30      	pop	{r4, r5}
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   31412:	6013      	str	r3, [r2, #0]
	return dfu_target_stream_write(buf, len);
   31414:	f7ff be1a 	b.w	3104c <dfu_target_stream_write>
   31418:	2001a408 	.word	0x2001a408
   3141c:	2001a40c 	.word	0x2001a40c

00031420 <dfu_target_mcuboot_done>:
{
   31420:	b538      	push	{r3, r4, r5, lr}
   31422:	4605      	mov	r5, r0
	err = dfu_target_stream_done(successful);
   31424:	f7ff fe26 	bl	31074 <dfu_target_stream_done>
	if (err != 0) {
   31428:	4604      	mov	r4, r0
   3142a:	b130      	cbz	r0, 3143a <dfu_target_mcuboot_done+0x1a>
		LOG_ERR("dfu_target_stream_done error %d", err);
   3142c:	2145      	movs	r1, #69	; 0x45
   3142e:	4602      	mov	r2, r0
   31430:	480c      	ldr	r0, [pc, #48]	; (31464 <dfu_target_mcuboot_done+0x44>)
			LOG_ERR("Unable to delete last page: %d", err);
   31432:	f00b fc4c 	bl	3ccce <z_log_minimal_printk>
}
   31436:	4620      	mov	r0, r4
   31438:	bd38      	pop	{r3, r4, r5, pc}
	if (successful) {
   3143a:	b16d      	cbz	r5, 31458 <dfu_target_mcuboot_done+0x38>
		stream_buf_bytes = 0;
   3143c:	4b0a      	ldr	r3, [pc, #40]	; (31468 <dfu_target_mcuboot_done+0x48>)
   3143e:	6018      	str	r0, [r3, #0]
		err = stream_flash_erase_page(dfu_target_stream_get_stream(),
   31440:	f7ff fdca 	bl	30fd8 <dfu_target_stream_get_stream>
   31444:	4909      	ldr	r1, [pc, #36]	; (3146c <dfu_target_mcuboot_done+0x4c>)
   31446:	f7f0 fcf7 	bl	21e38 <stream_flash_erase_page>
		if (err != 0) {
   3144a:	4604      	mov	r4, r0
   3144c:	2800      	cmp	r0, #0
   3144e:	d0f2      	beq.n	31436 <dfu_target_mcuboot_done+0x16>
			LOG_ERR("Unable to delete last page: %d", err);
   31450:	4602      	mov	r2, r0
   31452:	2145      	movs	r1, #69	; 0x45
   31454:	4806      	ldr	r0, [pc, #24]	; (31470 <dfu_target_mcuboot_done+0x50>)
   31456:	e7ec      	b.n	31432 <dfu_target_mcuboot_done+0x12>
		LOG_INF("MCUBoot image upgrade aborted.");
   31458:	2149      	movs	r1, #73	; 0x49
   3145a:	4806      	ldr	r0, [pc, #24]	; (31474 <dfu_target_mcuboot_done+0x54>)
   3145c:	f00b fc37 	bl	3ccce <z_log_minimal_printk>
   31460:	e7e9      	b.n	31436 <dfu_target_mcuboot_done+0x16>
   31462:	bf00      	nop
   31464:	0004b83c 	.word	0x0004b83c
   31468:	2001a408 	.word	0x2001a408
   3146c:	000dffff 	.word	0x000dffff
   31470:	0004b861 	.word	0x0004b861
   31474:	0004b885 	.word	0x0004b885

00031478 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   31478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   3147c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   3147e:	4c21      	ldr	r4, [pc, #132]	; (31504 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   31480:	4e21      	ldr	r6, [pc, #132]	; (31508 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31482:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   31486:	f8df 9088 	ldr.w	r9, [pc, #136]	; 31510 <check_ext_api_requests+0x98>
{
   3148a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   3148c:	45a8      	cmp	r8, r5
   3148e:	d803      	bhi.n	31498 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   31490:	2000      	movs	r0, #0
   31492:	b005      	add	sp, #20
   31494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   31498:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3149a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   3149e:	681f      	ldr	r7, [r3, #0]
   314a0:	ab01      	add	r3, sp, #4
   314a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   314a6:	220c      	movs	r2, #12
   314a8:	4619      	mov	r1, r3
   314aa:	4638      	mov	r0, r7
   314ac:	f010 f879 	bl	415a2 <memcmp>
   314b0:	b990      	cbnz	r0, 314d8 <check_ext_api_requests+0x60>
   314b2:	b18f      	cbz	r7, 314d8 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   314b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   314b6:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   314b8:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   314ba:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   314bc:	4291      	cmp	r1, r2
   314be:	d10b      	bne.n	314d8 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   314c0:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   314c2:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   314c4:	4291      	cmp	r1, r2
   314c6:	d807      	bhi.n	314d8 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   314c8:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   314ca:	4291      	cmp	r1, r2
   314cc:	d904      	bls.n	314d8 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   314ce:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   314d0:	695b      	ldr	r3, [r3, #20]
   314d2:	ea32 0303 	bics.w	r3, r2, r3
   314d6:	d00a      	beq.n	314ee <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   314d8:	6a27      	ldr	r7, [r4, #32]
   314da:	b167      	cbz	r7, 314f6 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   314dc:	480b      	ldr	r0, [pc, #44]	; (3150c <check_ext_api_requests+0x94>)
   314de:	f00b f9d9 	bl	3c894 <printk>
			k_panic();
   314e2:	4040      	eors	r0, r0
   314e4:	f380 8811 	msr	BASEPRI, r0
   314e8:	f04f 0004 	mov.w	r0, #4
   314ec:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   314ee:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   314f0:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   314f2:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   314f4:	e7ca      	b.n	3148c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   314f6:	4648      	mov	r0, r9
   314f8:	f00b f9cc 	bl	3c894 <printk>
			*ext_api_req->ext_api = NULL;
   314fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   314fe:	601f      	str	r7, [r3, #0]
   31500:	e7f5      	b.n	314ee <check_ext_api_requests+0x76>
   31502:	bf00      	nop
   31504:	0001c43c 	.word	0x0001c43c
   31508:	00042a0c 	.word	0x00042a0c
   3150c:	0004b8bc 	.word	0x0004b8bc
   31510:	0004b8e5 	.word	0x0004b8e5

00031514 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   31514:	b5f0      	push	{r4, r5, r6, r7, lr}
   31516:	b085      	sub	sp, #20
   31518:	466e      	mov	r6, sp
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   3151a:	6881      	ldr	r1, [r0, #8]
{
   3151c:	4605      	mov	r5, r0
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   3151e:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
   31520:	f021 0407 	bic.w	r4, r1, #7

    erased_val = flash_area_erased_val(fap);
   31524:	f00c f89a 	bl	3d65c <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
   31528:	4632      	mov	r2, r6
   3152a:	4b0a      	ldr	r3, [pc, #40]	; (31554 <boot_write_magic+0x40>)
   3152c:	f103 0c10 	add.w	ip, r3, #16
   31530:	4637      	mov	r7, r6
   31532:	6818      	ldr	r0, [r3, #0]
   31534:	6859      	ldr	r1, [r3, #4]
   31536:	3308      	adds	r3, #8
   31538:	c703      	stmia	r7!, {r0, r1}
   3153a:	4563      	cmp	r3, ip
   3153c:	463e      	mov	r6, r7
   3153e:	d1f7      	bne.n	31530 <boot_write_magic+0x1c>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
   31540:	2310      	movs	r3, #16
   31542:	4621      	mov	r1, r4
   31544:	4628      	mov	r0, r5
   31546:	f00c f84d 	bl	3d5e4 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   3154a:	3800      	subs	r0, #0
   3154c:	bf18      	it	ne
   3154e:	2001      	movne	r0, #1
   31550:	b005      	add	sp, #20
   31552:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31554:	000436b4 	.word	0x000436b4

00031558 <boot_read_swap_state>:
{
   31558:	b530      	push	{r4, r5, lr}
   3155a:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   3155c:	6881      	ldr	r1, [r0, #8]
{
   3155e:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   31560:	2310      	movs	r3, #16
   31562:	aa02      	add	r2, sp, #8
   31564:	3910      	subs	r1, #16
{
   31566:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   31568:	f00c f820 	bl	3d5ac <flash_area_read>
    if (rc < 0) {
   3156c:	2800      	cmp	r0, #0
   3156e:	da02      	bge.n	31576 <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
   31570:	2001      	movs	r0, #1
}
   31572:	b007      	add	sp, #28
   31574:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
   31576:	2210      	movs	r2, #16
   31578:	4628      	mov	r0, r5
   3157a:	a902      	add	r1, sp, #8
   3157c:	f00e fa56 	bl	3fa2c <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   31580:	b390      	cbz	r0, 315e8 <boot_read_swap_state+0x90>
        state->magic = BOOT_MAGIC_UNSET;
   31582:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
   31584:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
   31586:	4628      	mov	r0, r5
   31588:	f00e fa61 	bl	3fa4e <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   3158c:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
   3158e:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   31590:	f10d 0207 	add.w	r2, sp, #7
   31594:	4628      	mov	r0, r5
   31596:	f00c f809 	bl	3d5ac <flash_area_read>
    if (rc < 0) {
   3159a:	2800      	cmp	r0, #0
   3159c:	dbe8      	blt.n	31570 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   3159e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   315a2:	4628      	mov	r0, r5
   315a4:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   315a8:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   315aa:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   315ac:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
   315ae:	2201      	movs	r2, #1
   315b0:	f10d 0107 	add.w	r1, sp, #7
   315b4:	f00e fa3a 	bl	3fa2c <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   315b8:	b910      	cbnz	r0, 315c0 <boot_read_swap_state+0x68>
   315ba:	7863      	ldrb	r3, [r4, #1]
   315bc:	2b04      	cmp	r3, #4
   315be:	d903      	bls.n	315c8 <boot_read_swap_state+0x70>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   315c0:	2301      	movs	r3, #1
   315c2:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
   315c4:	2300      	movs	r3, #0
   315c6:	7123      	strb	r3, [r4, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   315c8:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   315ca:	4628      	mov	r0, r5
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   315cc:	3a18      	subs	r2, #24
   315ce:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   315d2:	3a08      	subs	r2, #8
   315d4:	1ca1      	adds	r1, r4, #2
   315d6:	f00e fa46 	bl	3fa66 <boot_read_flag>
    if (rc) {
   315da:	2800      	cmp	r0, #0
   315dc:	d1c8      	bne.n	31570 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
   315de:	4628      	mov	r0, r5
   315e0:	1ce1      	adds	r1, r4, #3
   315e2:	f00e fa9b 	bl	3fb1c <boot_read_image_ok>
   315e6:	e7c4      	b.n	31572 <boot_read_swap_state+0x1a>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
   315e8:	2210      	movs	r2, #16
   315ea:	4904      	ldr	r1, [pc, #16]	; (315fc <boot_read_swap_state+0xa4>)
   315ec:	a802      	add	r0, sp, #8
   315ee:	f00f ffd8 	bl	415a2 <memcmp>
        return BOOT_MAGIC_GOOD;
   315f2:	2800      	cmp	r0, #0
   315f4:	bf14      	ite	ne
   315f6:	2302      	movne	r3, #2
   315f8:	2301      	moveq	r3, #1
   315fa:	e7c3      	b.n	31584 <boot_read_swap_state+0x2c>
   315fc:	000436b4 	.word	0x000436b4

00031600 <boot_write_swap_info>:
                     uint8_t image_num)
{
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   31600:	2a0e      	cmp	r2, #14
{
   31602:	b513      	push	{r0, r1, r4, lr}
   31604:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   31606:	d906      	bls.n	31616 <boot_write_swap_info+0x16>
   31608:	4b0c      	ldr	r3, [pc, #48]	; (3163c <boot_write_swap_info+0x3c>)
   3160a:	f240 11b1 	movw	r1, #433	; 0x1b1
   3160e:	4a0c      	ldr	r2, [pc, #48]	; (31640 <boot_write_swap_info+0x40>)
   31610:	480c      	ldr	r0, [pc, #48]	; (31644 <boot_write_swap_info+0x44>)
   31612:	f008 fa83 	bl	39b1c <__assert_func>
   31616:	290e      	cmp	r1, #14
   31618:	d901      	bls.n	3161e <boot_write_swap_info+0x1e>
   3161a:	4b0b      	ldr	r3, [pc, #44]	; (31648 <boot_write_swap_info+0x48>)
   3161c:	e7f5      	b.n	3160a <boot_write_swap_info+0xa>
   3161e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   31622:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
   31626:	f00e fa12 	bl	3fa4e <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off),
                 swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   3162a:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
   3162c:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   3162e:	f10d 0207 	add.w	r2, sp, #7
   31632:	4620      	mov	r0, r4
   31634:	f00e fa34 	bl	3faa0 <boot_write_trailer>
}
   31638:	b002      	add	sp, #8
   3163a:	bd10      	pop	{r4, pc}
   3163c:	0004b918 	.word	0x0004b918
   31640:	0004b9a3 	.word	0x0004b9a3
   31644:	0004b92a 	.word	0x0004b92a
   31648:	0004b96d 	.word	0x0004b96d

0003164c <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   3164c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   3164e:	460e      	mov	r6, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   31650:	2009      	movs	r0, #9
   31652:	a901      	add	r1, sp, #4
   31654:	f7f0 fb8a 	bl	21d6c <flash_area_open>
    if (rc != 0) {
   31658:	2800      	cmp	r0, #0
   3165a:	d137      	bne.n	316cc <boot_set_pending_multi+0x80>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_secondary_slot);
   3165c:	9801      	ldr	r0, [sp, #4]
   3165e:	a902      	add	r1, sp, #8
   31660:	f7ff ff7a 	bl	31558 <boot_read_swap_state>
    if (rc != 0) {
   31664:	4604      	mov	r4, r0
   31666:	b938      	cbnz	r0, 31678 <boot_set_pending_multi+0x2c>
        goto done;
    }

    switch (state_secondary_slot.magic) {
   31668:	f89d 5008 	ldrb.w	r5, [sp, #8]
   3166c:	2d02      	cmp	r5, #2
   3166e:	d01f      	beq.n	316b0 <boot_set_pending_multi+0x64>
   31670:	2d03      	cmp	r5, #3
   31672:	d007      	beq.n	31684 <boot_set_pending_multi+0x38>
   31674:	2d01      	cmp	r5, #1
   31676:	d122      	bne.n	316be <boot_set_pending_multi+0x72>
        assert(0);
        rc = BOOT_EBADIMAGE;
    }

done:
    flash_area_close(fap);
   31678:	9801      	ldr	r0, [sp, #4]
   3167a:	f00b ff96 	bl	3d5aa <flash_area_close>
    return rc;
}
   3167e:	4620      	mov	r0, r4
   31680:	b004      	add	sp, #16
   31682:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_write_magic(fap);
   31684:	9801      	ldr	r0, [sp, #4]
   31686:	f7ff ff45 	bl	31514 <boot_write_magic>
        if (rc == 0 && permanent) {
   3168a:	4604      	mov	r4, r0
   3168c:	2800      	cmp	r0, #0
   3168e:	d1f3      	bne.n	31678 <boot_set_pending_multi+0x2c>
   31690:	b166      	cbz	r6, 316ac <boot_set_pending_multi+0x60>
            rc = boot_write_image_ok(fap);
   31692:	9801      	ldr	r0, [sp, #4]
   31694:	f00e fa3b 	bl	3fb0e <boot_write_image_ok>
        if (rc == 0) {
   31698:	4604      	mov	r4, r0
   3169a:	2800      	cmp	r0, #0
   3169c:	d1ec      	bne.n	31678 <boot_set_pending_multi+0x2c>
            rc = boot_write_swap_info(fap, swap_type, 0);
   3169e:	2200      	movs	r2, #0
   316a0:	4629      	mov	r1, r5
   316a2:	9801      	ldr	r0, [sp, #4]
   316a4:	f7ff ffac 	bl	31600 <boot_write_swap_info>
   316a8:	4604      	mov	r4, r0
   316aa:	e7e5      	b.n	31678 <boot_set_pending_multi+0x2c>
                swap_type = BOOT_SWAP_TYPE_TEST;
   316ac:	2502      	movs	r5, #2
   316ae:	e7f6      	b.n	3169e <boot_set_pending_multi+0x52>
        flash_area_erase(fap, 0, flash_area_get_size(fap));
   316b0:	9801      	ldr	r0, [sp, #4]
   316b2:	4621      	mov	r1, r4
   316b4:	6882      	ldr	r2, [r0, #8]
   316b6:	f00b ffb1 	bl	3d61c <flash_area_erase>
        rc = BOOT_EBADIMAGE;
   316ba:	2403      	movs	r4, #3
        break;
   316bc:	e7dc      	b.n	31678 <boot_set_pending_multi+0x2c>
        assert(0);
   316be:	f240 2146 	movw	r1, #582	; 0x246
   316c2:	4b03      	ldr	r3, [pc, #12]	; (316d0 <boot_set_pending_multi+0x84>)
   316c4:	4a03      	ldr	r2, [pc, #12]	; (316d4 <boot_set_pending_multi+0x88>)
   316c6:	4804      	ldr	r0, [pc, #16]	; (316d8 <boot_set_pending_multi+0x8c>)
   316c8:	f008 fa28 	bl	39b1c <__assert_func>
        return BOOT_EFLASH;
   316cc:	2401      	movs	r4, #1
   316ce:	e7d6      	b.n	3167e <boot_set_pending_multi+0x32>
   316d0:	00045cbc 	.word	0x00045cbc
   316d4:	0004b98c 	.word	0x0004b98c
   316d8:	0004b92a 	.word	0x0004b92a

000316dc <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   316dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   316e0:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   316e2:	4b15      	ldr	r3, [pc, #84]	; (31738 <tfm_ns_interface_dispatch+0x5c>)
   316e4:	4604      	mov	r4, r0
   316e6:	f893 8000 	ldrb.w	r8, [r3]
   316ea:	460d      	mov	r5, r1
   316ec:	4616      	mov	r6, r2
   316ee:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   316f0:	f1b8 0f00 	cmp.w	r8, #0
   316f4:	d115      	bne.n	31722 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   316f6:	4668      	mov	r0, sp
   316f8:	f7f1 fe60 	bl	233bc <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   316fc:	463a      	mov	r2, r7
   316fe:	4631      	mov	r1, r6
   31700:	4628      	mov	r0, r5
   31702:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   31704:	47a0      	blx	r4
   31706:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   31708:	4668      	mov	r0, sp
   3170a:	f00c f8df 	bl	3d8cc <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   3170e:	f1b8 0f00 	cmp.w	r8, #0
   31712:	d002      	beq.n	3171a <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   31714:	4809      	ldr	r0, [pc, #36]	; (3173c <tfm_ns_interface_dispatch+0x60>)
   31716:	f005 fa3b 	bl	36b90 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   3171a:	4620      	mov	r0, r4
   3171c:	b022      	add	sp, #136	; 0x88
   3171e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   31722:	f04f 32ff 	mov.w	r2, #4294967295
   31726:	f04f 33ff 	mov.w	r3, #4294967295
   3172a:	4804      	ldr	r0, [pc, #16]	; (3173c <tfm_ns_interface_dispatch+0x60>)
   3172c:	f005 f95e 	bl	369ec <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   31730:	2800      	cmp	r0, #0
   31732:	d0e0      	beq.n	316f6 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   31734:	241f      	movs	r4, #31
   31736:	e7f0      	b.n	3171a <tfm_ns_interface_dispatch+0x3e>
   31738:	2001d3cc 	.word	0x2001d3cc
   3173c:	20014fb8 	.word	0x20014fb8

00031740 <parse_string>:
{
   31740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   31744:	680a      	ldr	r2, [r1, #0]
   31746:	688b      	ldr	r3, [r1, #8]
{
   31748:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   3174a:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   3174c:	18d0      	adds	r0, r2, r3
   3174e:	5cd3      	ldrb	r3, [r2, r3]
{
   31750:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   31752:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   31754:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   31756:	f040 80dd 	bne.w	31914 <parse_string+0x1d4>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   3175a:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   3175c:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   3175e:	684c      	ldr	r4, [r1, #4]
   31760:	1ab9      	subs	r1, r7, r2
   31762:	42a1      	cmp	r1, r4
   31764:	f080 80d6 	bcs.w	31914 <parse_string+0x1d4>
   31768:	7839      	ldrb	r1, [r7, #0]
   3176a:	2922      	cmp	r1, #34	; 0x22
   3176c:	d10e      	bne.n	3178c <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   3176e:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   31772:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   31774:	f8da 2010 	ldr.w	r2, [sl, #16]
   31778:	4418      	add	r0, r3
   3177a:	4790      	blx	r2
        if (output == NULL)
   3177c:	4683      	mov	fp, r0
   3177e:	2800      	cmp	r0, #0
   31780:	f000 80c8 	beq.w	31914 <parse_string+0x1d4>
   31784:	4604      	mov	r4, r0
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   31786:	f8df 9198 	ldr.w	r9, [pc, #408]	; 31920 <parse_string+0x1e0>
   3178a:	e00f      	b.n	317ac <parse_string+0x6c>
            if (input_end[0] == '\\')
   3178c:	295c      	cmp	r1, #92	; 0x5c
   3178e:	d105      	bne.n	3179c <parse_string+0x5c>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   31790:	3701      	adds	r7, #1
   31792:	1ab9      	subs	r1, r7, r2
   31794:	428c      	cmp	r4, r1
   31796:	f240 80bd 	bls.w	31914 <parse_string+0x1d4>
                skipped_bytes++;
   3179a:	3301      	adds	r3, #1
            input_end++;
   3179c:	3701      	adds	r7, #1
   3179e:	e7df      	b.n	31760 <parse_string+0x20>
        if (*input_pointer != '\\')
   317a0:	782b      	ldrb	r3, [r5, #0]
   317a2:	2b5c      	cmp	r3, #92	; 0x5c
   317a4:	d012      	beq.n	317cc <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   317a6:	3501      	adds	r5, #1
   317a8:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   317ac:	42bd      	cmp	r5, r7
   317ae:	d3f7      	bcc.n	317a0 <parse_string+0x60>
    *output_pointer = '\0';
   317b0:	2300      	movs	r3, #0
   317b2:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   317b4:	2310      	movs	r3, #16
    return true;
   317b6:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   317b8:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   317bc:	f8da 3000 	ldr.w	r3, [sl]
   317c0:	1afb      	subs	r3, r7, r3
    input_buffer->offset++;
   317c2:	3301      	adds	r3, #1
   317c4:	f8ca 3008 	str.w	r3, [sl, #8]
}
   317c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   317cc:	1b7a      	subs	r2, r7, r5
   317ce:	2a00      	cmp	r2, #0
   317d0:	dd0d      	ble.n	317ee <parse_string+0xae>
            switch (input_pointer[1])
   317d2:	786b      	ldrb	r3, [r5, #1]
   317d4:	2b75      	cmp	r3, #117	; 0x75
   317d6:	d80a      	bhi.n	317ee <parse_string+0xae>
   317d8:	2b6d      	cmp	r3, #109	; 0x6d
   317da:	d812      	bhi.n	31802 <parse_string+0xc2>
   317dc:	2b62      	cmp	r3, #98	; 0x62
   317de:	d02b      	beq.n	31838 <parse_string+0xf8>
   317e0:	d826      	bhi.n	31830 <parse_string+0xf0>
   317e2:	2b2f      	cmp	r3, #47	; 0x2f
   317e4:	d029      	beq.n	3183a <parse_string+0xfa>
   317e6:	2b5c      	cmp	r3, #92	; 0x5c
   317e8:	d027      	beq.n	3183a <parse_string+0xfa>
   317ea:	2b22      	cmp	r3, #34	; 0x22
   317ec:	d025      	beq.n	3183a <parse_string+0xfa>
        input_buffer->hooks.deallocate(output);
   317ee:	4658      	mov	r0, fp
   317f0:	f8da 3014 	ldr.w	r3, [sl, #20]
   317f4:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   317f6:	f8da 0000 	ldr.w	r0, [sl]
   317fa:	1a28      	subs	r0, r5, r0
   317fc:	f8ca 0008 	str.w	r0, [sl, #8]
   31800:	e08b      	b.n	3191a <parse_string+0x1da>
            switch (input_pointer[1])
   31802:	3b6e      	subs	r3, #110	; 0x6e
   31804:	2b07      	cmp	r3, #7
   31806:	d8f2      	bhi.n	317ee <parse_string+0xae>
   31808:	a101      	add	r1, pc, #4	; (adr r1, 31810 <parse_string+0xd0>)
   3180a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   3180e:	bf00      	nop
   31810:	00031845 	.word	0x00031845
   31814:	000317ef 	.word	0x000317ef
   31818:	000317ef 	.word	0x000317ef
   3181c:	000317ef 	.word	0x000317ef
   31820:	00031849 	.word	0x00031849
   31824:	000317ef 	.word	0x000317ef
   31828:	0003184d 	.word	0x0003184d
   3182c:	00031851 	.word	0x00031851
   31830:	2b66      	cmp	r3, #102	; 0x66
   31832:	d1dc      	bne.n	317ee <parse_string+0xae>
                    *output_pointer++ = '\f';
   31834:	230c      	movs	r3, #12
   31836:	e000      	b.n	3183a <parse_string+0xfa>
                    *output_pointer++ = '\b';
   31838:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
   3183a:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
   3183e:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   31840:	441d      	add	r5, r3
   31842:	e7b3      	b.n	317ac <parse_string+0x6c>
                    *output_pointer++ = '\n';
   31844:	230a      	movs	r3, #10
   31846:	e7f8      	b.n	3183a <parse_string+0xfa>
                    *output_pointer++ = '\r';
   31848:	230d      	movs	r3, #13
   3184a:	e7f6      	b.n	3183a <parse_string+0xfa>
                    *output_pointer++ = '\t';
   3184c:	2309      	movs	r3, #9
   3184e:	e7f4      	b.n	3183a <parse_string+0xfa>
    if ((input_end - first_sequence) < 6)
   31850:	2a05      	cmp	r2, #5
   31852:	ddcc      	ble.n	317ee <parse_string+0xae>
    first_code = parse_hex4(first_sequence + 2);
   31854:	1ca8      	adds	r0, r5, #2
   31856:	f00e f992 	bl	3fb7e <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   3185a:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   3185e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   31862:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   31864:	d3c3      	bcc.n	317ee <parse_string+0xae>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   31866:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   3186a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   3186e:	d22d      	bcs.n	318cc <parse_string+0x18c>
        const unsigned char *second_sequence = first_sequence + 6;
   31870:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   31872:	1afb      	subs	r3, r7, r3
   31874:	2b05      	cmp	r3, #5
   31876:	ddba      	ble.n	317ee <parse_string+0xae>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   31878:	79ab      	ldrb	r3, [r5, #6]
   3187a:	2b5c      	cmp	r3, #92	; 0x5c
   3187c:	d1b7      	bne.n	317ee <parse_string+0xae>
   3187e:	79eb      	ldrb	r3, [r5, #7]
   31880:	2b75      	cmp	r3, #117	; 0x75
   31882:	d1b4      	bne.n	317ee <parse_string+0xae>
        second_code = parse_hex4(second_sequence + 2);
   31884:	f105 0008 	add.w	r0, r5, #8
   31888:	f00e f979 	bl	3fb7e <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   3188c:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   31890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   31894:	d2ab      	bcs.n	317ee <parse_string+0xae>
        sequence_length = 12; /* \uXXXX\uXXXX */
   31896:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   31898:	ea09 2686 	and.w	r6, r9, r6, lsl #10
   3189c:	f3c0 0009 	ubfx	r0, r0, #0, #10
   318a0:	4330      	orrs	r0, r6
   318a2:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   318a6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   318aa:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   318ac:	f100 3eff 	add.w	lr, r0, #4294967295
   318b0:	fa54 fe8e 	uxtab	lr, r4, lr
   318b4:	45a6      	cmp	lr, r4
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   318b6:	b2f2      	uxtb	r2, r6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   318b8:	d124      	bne.n	31904 <parse_string+0x1c4>
    if (utf8_length > 1)
   318ba:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   318bc:	bf14      	ite	ne
   318be:	ea42 020c 	orrne.w	r2, r2, ip
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   318c2:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   318c6:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   318c8:	4404      	add	r4, r0
                    if (sequence_length == 0)
   318ca:	e7b9      	b.n	31840 <parse_string+0x100>
    if (codepoint < 0x80)
   318cc:	287f      	cmp	r0, #127	; 0x7f
   318ce:	d90a      	bls.n	318e6 <parse_string+0x1a6>
    else if (codepoint < 0x800)
   318d0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   318d4:	d30c      	bcc.n	318f0 <parse_string+0x1b0>
    else if (codepoint < 0x10000)
   318d6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   318da:	d30e      	bcc.n	318fa <parse_string+0x1ba>
    else if (codepoint <= 0x10FFFF)
   318dc:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   318e0:	d285      	bcs.n	317ee <parse_string+0xae>
        sequence_length = 6; /* \uXXXX */
   318e2:	2306      	movs	r3, #6
   318e4:	e7df      	b.n	318a6 <parse_string+0x166>
   318e6:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   318e8:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   318ec:	2001      	movs	r0, #1
   318ee:	e7dd      	b.n	318ac <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   318f0:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   318f2:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   318f6:	2002      	movs	r0, #2
   318f8:	e7d8      	b.n	318ac <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   318fa:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   318fc:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   31900:	2003      	movs	r0, #3
   31902:	e7d3      	b.n	318ac <parse_string+0x16c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   31904:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   31908:	f062 017f 	orn	r1, r2, #127	; 0x7f
   3190c:	f80e 1901 	strb.w	r1, [lr], #-1
        codepoint >>= 6;
   31910:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   31912:	e7cf      	b.n	318b4 <parse_string+0x174>
    if (input_pointer != NULL)
   31914:	2d00      	cmp	r5, #0
   31916:	f47f af6e 	bne.w	317f6 <parse_string+0xb6>
    return false;
   3191a:	2000      	movs	r0, #0
   3191c:	e754      	b.n	317c8 <parse_string+0x88>
   3191e:	bf00      	nop
   31920:	000ffc00 	.word	0x000ffc00

00031924 <compare_double>:
{
   31924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31928:	4616      	mov	r6, r2
   3192a:	461f      	mov	r7, r3
   3192c:	4680      	mov	r8, r0
   3192e:	4689      	mov	r9, r1
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   31930:	f00f fe1e 	bl	41570 <fabs>
   31934:	4604      	mov	r4, r0
   31936:	460d      	mov	r5, r1
   31938:	4630      	mov	r0, r6
   3193a:	4639      	mov	r1, r7
   3193c:	f00f fe18 	bl	41570 <fabs>
   31940:	4602      	mov	r2, r0
   31942:	460b      	mov	r3, r1
   31944:	4620      	mov	r0, r4
   31946:	4629      	mov	r1, r5
   31948:	f7eb f9c6 	bl	1ccd8 <__aeabi_dcmpgt>
   3194c:	b300      	cbz	r0, 31990 <compare_double+0x6c>
   3194e:	4640      	mov	r0, r8
   31950:	4649      	mov	r1, r9
   31952:	f00f fe0d 	bl	41570 <fabs>
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   31956:	4632      	mov	r2, r6
   31958:	463b      	mov	r3, r7
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   3195a:	4604      	mov	r4, r0
   3195c:	460d      	mov	r5, r1
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   3195e:	4640      	mov	r0, r8
   31960:	4649      	mov	r1, r9
   31962:	f7ea fd71 	bl	1c448 <__aeabi_dsub>
   31966:	f00f fe03 	bl	41570 <fabs>
   3196a:	2200      	movs	r2, #0
   3196c:	4606      	mov	r6, r0
   3196e:	460f      	mov	r7, r1
   31970:	4620      	mov	r0, r4
   31972:	4629      	mov	r1, r5
   31974:	4b08      	ldr	r3, [pc, #32]	; (31998 <compare_double+0x74>)
   31976:	f7ea ff1f 	bl	1c7b8 <__aeabi_dmul>
   3197a:	4602      	mov	r2, r0
   3197c:	460b      	mov	r3, r1
   3197e:	4630      	mov	r0, r6
   31980:	4639      	mov	r1, r7
   31982:	f7eb f995 	bl	1ccb0 <__aeabi_dcmple>
}
   31986:	3800      	subs	r0, #0
   31988:	bf18      	it	ne
   3198a:	2001      	movne	r0, #1
   3198c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   31990:	4630      	mov	r0, r6
   31992:	4639      	mov	r1, r7
   31994:	e7dd      	b.n	31952 <compare_double+0x2e>
   31996:	bf00      	nop
   31998:	3cb00000 	.word	0x3cb00000

0003199c <get_object_item>:
{
   3199c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3199e:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   319a0:	b360      	cbz	r0, 319fc <get_object_item+0x60>
   319a2:	b359      	cbz	r1, 319fc <get_object_item+0x60>
    current_element = object->child;
   319a4:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   319a6:	b9fa      	cbnz	r2, 319e8 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   319a8:	4e17      	ldr	r6, [pc, #92]	; (31a08 <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   319aa:	b33c      	cbz	r4, 319fc <get_object_item+0x60>
   319ac:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   319ae:	b1c3      	cbz	r3, 319e2 <get_object_item+0x46>
    if (string1 == string2)
   319b0:	42ab      	cmp	r3, r5
   319b2:	d021      	beq.n	319f8 <get_object_item+0x5c>
   319b4:	f105 3cff 	add.w	ip, r5, #4294967295
   319b8:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   319ba:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   319be:	460f      	mov	r7, r1
   319c0:	5d8a      	ldrb	r2, [r1, r6]
   319c2:	f002 0203 	and.w	r2, r2, #3
   319c6:	2a01      	cmp	r2, #1
   319c8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   319cc:	bf08      	it	eq
   319ce:	f101 0720 	addeq.w	r7, r1, #32
   319d2:	5cb0      	ldrb	r0, [r6, r2]
   319d4:	f000 0003 	and.w	r0, r0, #3
   319d8:	2801      	cmp	r0, #1
   319da:	bf08      	it	eq
   319dc:	3220      	addeq	r2, #32
   319de:	4297      	cmp	r7, r2
   319e0:	d00f      	beq.n	31a02 <get_object_item+0x66>
            current_element = current_element->next;
   319e2:	6824      	ldr	r4, [r4, #0]
   319e4:	e7e1      	b.n	319aa <get_object_item+0xe>
            current_element = current_element->next;
   319e6:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   319e8:	b144      	cbz	r4, 319fc <get_object_item+0x60>
   319ea:	6a21      	ldr	r1, [r4, #32]
   319ec:	b121      	cbz	r1, 319f8 <get_object_item+0x5c>
   319ee:	4628      	mov	r0, r5
   319f0:	f7eb fc1d 	bl	1d22e <strcmp>
   319f4:	2800      	cmp	r0, #0
   319f6:	d1f6      	bne.n	319e6 <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   319f8:	6a23      	ldr	r3, [r4, #32]
   319fa:	b903      	cbnz	r3, 319fe <get_object_item+0x62>
        return NULL;
   319fc:	2400      	movs	r4, #0
}
   319fe:	4620      	mov	r0, r4
   31a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   31a02:	2900      	cmp	r1, #0
   31a04:	d1d9      	bne.n	319ba <get_object_item+0x1e>
   31a06:	e7f7      	b.n	319f8 <get_object_item+0x5c>
   31a08:	0004bf0e 	.word	0x0004bf0e

00031a0c <print_string_ptr>:
{
   31a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char quotes[] = "\"\"";
   31a10:	4b52      	ldr	r3, [pc, #328]	; (31b5c <print_string_ptr+0x150>)
{
   31a12:	b085      	sub	sp, #20
    const char quotes[] = "\"\"";
   31a14:	881a      	ldrh	r2, [r3, #0]
   31a16:	789b      	ldrb	r3, [r3, #2]
{
   31a18:	4605      	mov	r5, r0
    if (output_buffer == NULL)
   31a1a:	460f      	mov	r7, r1
    const char quotes[] = "\"\"";
   31a1c:	f8ad 200c 	strh.w	r2, [sp, #12]
   31a20:	f88d 300e 	strb.w	r3, [sp, #14]
    if (output_buffer == NULL)
   31a24:	b919      	cbnz	r1, 31a2e <print_string_ptr+0x22>
        return false;
   31a26:	2000      	movs	r0, #0
}
   31a28:	b005      	add	sp, #20
   31a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   31a2e:	b340      	cbz	r0, 31a82 <print_string_ptr+0x76>
   31a30:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   31a32:	f04f 0b00 	mov.w	fp, #0
   31a36:	2001      	movs	r0, #1
   31a38:	4c49      	ldr	r4, [pc, #292]	; (31b60 <print_string_ptr+0x154>)
   31a3a:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   31a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
   31a40:	bb6b      	cbnz	r3, 31a9e <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   31a42:	ebaa 0a05 	sub.w	sl, sl, r5
   31a46:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   31a48:	4638      	mov	r0, r7
   31a4a:	f10a 0103 	add.w	r1, sl, #3
   31a4e:	f00e f8fc 	bl	3fc4a <ensure>
    if (output == NULL)
   31a52:	4606      	mov	r6, r0
   31a54:	2800      	cmp	r0, #0
   31a56:	d0e6      	beq.n	31a26 <print_string_ptr+0x1a>
    if (escape_characters == 0)
   31a58:	2322      	movs	r3, #34	; 0x22
        output[output_length + 1] = '\"';
   31a5a:	f10a 0901 	add.w	r9, sl, #1
        output[output_length + 2] = '\0';
   31a5e:	f10a 0802 	add.w	r8, sl, #2
        memcpy(output + 1, input, output_length);
   31a62:	1c44      	adds	r4, r0, #1
        output[0] = '\"';
   31a64:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   31a66:	f1bb 0f00 	cmp.w	fp, #0
   31a6a:	d12e      	bne.n	31aca <print_string_ptr+0xbe>
   31a6c:	4652      	mov	r2, sl
   31a6e:	4629      	mov	r1, r5
   31a70:	4620      	mov	r0, r4
   31a72:	f00f fda6 	bl	415c2 <memcpy>
        output[output_length + 1] = '\"';
   31a76:	2322      	movs	r3, #34	; 0x22
   31a78:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   31a7c:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   31a80:	e00b      	b.n	31a9a <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   31a82:	2103      	movs	r1, #3
   31a84:	4638      	mov	r0, r7
   31a86:	f00e f8e0 	bl	3fc4a <ensure>
        if (output == NULL)
   31a8a:	2800      	cmp	r0, #0
   31a8c:	d0cb      	beq.n	31a26 <print_string_ptr+0x1a>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   31a8e:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   31a92:	a903      	add	r1, sp, #12
   31a94:	1ad2      	subs	r2, r2, r3
   31a96:	f00f ff9b 	bl	419d0 <strncpy>
    return true;
   31a9a:	2001      	movs	r0, #1
   31a9c:	e7c4      	b.n	31a28 <print_string_ptr+0x1c>
        switch (*input_pointer)
   31a9e:	2b22      	cmp	r3, #34	; 0x22
   31aa0:	d80b      	bhi.n	31aba <print_string_ptr+0xae>
   31aa2:	2b07      	cmp	r3, #7
   31aa4:	d90c      	bls.n	31ac0 <print_string_ptr+0xb4>
   31aa6:	f1a3 0208 	sub.w	r2, r3, #8
   31aaa:	b2d2      	uxtb	r2, r2
   31aac:	fa00 f202 	lsl.w	r2, r0, r2
   31ab0:	4222      	tst	r2, r4
   31ab2:	d005      	beq.n	31ac0 <print_string_ptr+0xb4>
                escape_characters++;
   31ab4:	f10b 0b01 	add.w	fp, fp, #1
                break;
   31ab8:	e7bf      	b.n	31a3a <print_string_ptr+0x2e>
        switch (*input_pointer)
   31aba:	2b5c      	cmp	r3, #92	; 0x5c
   31abc:	d1bd      	bne.n	31a3a <print_string_ptr+0x2e>
   31abe:	e7f9      	b.n	31ab4 <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   31ac0:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   31ac2:	bf98      	it	ls
   31ac4:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   31ac8:	e7b7      	b.n	31a3a <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   31aca:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   31ace:	f04f 0b74 	mov.w	fp, #116	; 0x74
   31ad2:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   31ad4:	4a23      	ldr	r2, [pc, #140]	; (31b64 <print_string_ptr+0x158>)
   31ad6:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   31ad8:	9901      	ldr	r1, [sp, #4]
   31ada:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   31ade:	9101      	str	r1, [sp, #4]
   31ae0:	b92b      	cbnz	r3, 31aee <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   31ae2:	2222      	movs	r2, #34	; 0x22
   31ae4:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   31ae8:	f806 3008 	strb.w	r3, [r6, r8]
   31aec:	e7d5      	b.n	31a9a <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   31aee:	2b1f      	cmp	r3, #31
   31af0:	d907      	bls.n	31b02 <print_string_ptr+0xf6>
   31af2:	2b22      	cmp	r3, #34	; 0x22
   31af4:	d005      	beq.n	31b02 <print_string_ptr+0xf6>
   31af6:	2b5c      	cmp	r3, #92	; 0x5c
   31af8:	d003      	beq.n	31b02 <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   31afa:	4620      	mov	r0, r4
   31afc:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   31afe:	1c44      	adds	r4, r0, #1
   31b00:	e7ea      	b.n	31ad8 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   31b02:	4620      	mov	r0, r4
            switch (*input_pointer)
   31b04:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   31b06:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   31b0a:	781b      	ldrb	r3, [r3, #0]
   31b0c:	2b0d      	cmp	r3, #13
   31b0e:	d80a      	bhi.n	31b26 <print_string_ptr+0x11a>
   31b10:	2b07      	cmp	r3, #7
   31b12:	d919      	bls.n	31b48 <print_string_ptr+0x13c>
   31b14:	f1a3 0108 	sub.w	r1, r3, #8
   31b18:	2905      	cmp	r1, #5
   31b1a:	d815      	bhi.n	31b48 <print_string_ptr+0x13c>
   31b1c:	e8df f001 	tbb	[pc, r1]
   31b20:	140d1109 	.word	0x140d1109
   31b24:	0f0b      	.short	0x0f0b
   31b26:	2b22      	cmp	r3, #34	; 0x22
   31b28:	d001      	beq.n	31b2e <print_string_ptr+0x122>
   31b2a:	2b5c      	cmp	r3, #92	; 0x5c
   31b2c:	d10c      	bne.n	31b48 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   31b2e:	7063      	strb	r3, [r4, #1]
                    break;
   31b30:	e7e5      	b.n	31afe <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   31b32:	2362      	movs	r3, #98	; 0x62
   31b34:	e7fb      	b.n	31b2e <print_string_ptr+0x122>
                    *output_pointer = 'f';
   31b36:	2366      	movs	r3, #102	; 0x66
   31b38:	e7f9      	b.n	31b2e <print_string_ptr+0x122>
                    *output_pointer = 'n';
   31b3a:	236e      	movs	r3, #110	; 0x6e
   31b3c:	e7f7      	b.n	31b2e <print_string_ptr+0x122>
                    *output_pointer = 'r';
   31b3e:	2372      	movs	r3, #114	; 0x72
   31b40:	e7f5      	b.n	31b2e <print_string_ptr+0x122>
                    *output_pointer = 't';
   31b42:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   31b46:	e7da      	b.n	31afe <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   31b48:	6839      	ldr	r1, [r7, #0]
   31b4a:	687d      	ldr	r5, [r7, #4]
   31b4c:	1a41      	subs	r1, r0, r1
   31b4e:	1a69      	subs	r1, r5, r1
   31b50:	f008 fe34 	bl	3a7bc <sniprintf>
                    output_pointer += 4;
   31b54:	4a03      	ldr	r2, [pc, #12]	; (31b64 <print_string_ptr+0x158>)
   31b56:	1d60      	adds	r0, r4, #5
                    break;
   31b58:	e7d1      	b.n	31afe <print_string_ptr+0xf2>
   31b5a:	bf00      	nop
   31b5c:	0004b9be 	.word	0x0004b9be
   31b60:	04000037 	.word	0x04000037
   31b64:	0004b9b8 	.word	0x0004b9b8

00031b68 <cJSON_strdup.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   31b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   31b6a:	4605      	mov	r5, r0
   31b6c:	b180      	cbz	r0, 31b90 <cJSON_strdup.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   31b6e:	f7eb fb68 	bl	1d242 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   31b72:	4b08      	ldr	r3, [pc, #32]	; (31b94 <cJSON_strdup.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   31b74:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   31b76:	4610      	mov	r0, r2
   31b78:	681b      	ldr	r3, [r3, #0]
   31b7a:	9201      	str	r2, [sp, #4]
   31b7c:	4798      	blx	r3
    if (copy == NULL)
   31b7e:	4604      	mov	r4, r0
   31b80:	b118      	cbz	r0, 31b8a <cJSON_strdup.constprop.0+0x22>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31b82:	4629      	mov	r1, r5
   31b84:	9a01      	ldr	r2, [sp, #4]
   31b86:	f00f fd1c 	bl	415c2 <memcpy>
}
   31b8a:	4620      	mov	r0, r4
   31b8c:	b003      	add	sp, #12
   31b8e:	bd30      	pop	{r4, r5, pc}
        return NULL;
   31b90:	4604      	mov	r4, r0
   31b92:	e7fa      	b.n	31b8a <cJSON_strdup.constprop.0+0x22>
   31b94:	200146f0 	.word	0x200146f0

00031b98 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   31b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31b9a:	460d      	mov	r5, r1
   31b9c:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   31b9e:	4607      	mov	r7, r0
   31ba0:	b300      	cbz	r0, 31be4 <add_item_to_object.constprop.0+0x4c>
   31ba2:	b1f9      	cbz	r1, 31be4 <add_item_to_object.constprop.0+0x4c>
   31ba4:	b1f2      	cbz	r2, 31be4 <add_item_to_object.constprop.0+0x4c>
   31ba6:	4290      	cmp	r0, r2
   31ba8:	d01c      	beq.n	31be4 <add_item_to_object.constprop.0+0x4c>
    if (constant_key)
   31baa:	b193      	cbz	r3, 31bd2 <add_item_to_object.constprop.0+0x3a>
        new_type = item->type | cJSON_StringIsConst;
   31bac:	68d6      	ldr	r6, [r2, #12]
   31bae:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   31bb2:	68e3      	ldr	r3, [r4, #12]
   31bb4:	059b      	lsls	r3, r3, #22
   31bb6:	d404      	bmi.n	31bc2 <add_item_to_object.constprop.0+0x2a>
   31bb8:	6a20      	ldr	r0, [r4, #32]
   31bba:	b110      	cbz	r0, 31bc2 <add_item_to_object.constprop.0+0x2a>
        hooks->deallocate(item->string);
   31bbc:	4b0a      	ldr	r3, [pc, #40]	; (31be8 <add_item_to_object.constprop.0+0x50>)
   31bbe:	685b      	ldr	r3, [r3, #4]
   31bc0:	4798      	blx	r3
    return add_item_to_array(object, item);
   31bc2:	4621      	mov	r1, r4
   31bc4:	4638      	mov	r0, r7
    item->string = new_key;
   31bc6:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   31bc8:	60e6      	str	r6, [r4, #12]
}
   31bca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   31bce:	f00e b828 	b.w	3fc22 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   31bd2:	4608      	mov	r0, r1
   31bd4:	f7ff ffc8 	bl	31b68 <cJSON_strdup.constprop.0>
        if (new_key == NULL)
   31bd8:	4605      	mov	r5, r0
   31bda:	b118      	cbz	r0, 31be4 <add_item_to_object.constprop.0+0x4c>
        new_type = item->type & ~cJSON_StringIsConst;
   31bdc:	68e6      	ldr	r6, [r4, #12]
   31bde:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   31be2:	e7e6      	b.n	31bb2 <add_item_to_object.constprop.0+0x1a>
}
   31be4:	2000      	movs	r0, #0
   31be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31be8:	200146f0 	.word	0x200146f0

00031bec <print_value>:
{
   31bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31bf0:	460c      	mov	r4, r1
    if ((item == NULL) || (output_buffer == NULL))
   31bf2:	4606      	mov	r6, r0
{
   31bf4:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   31bf6:	b908      	cbnz	r0, 31bfc <print_value+0x10>
    switch ((item->type) & 0xFF)
   31bf8:	2500      	movs	r5, #0
   31bfa:	e06f      	b.n	31cdc <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   31bfc:	2900      	cmp	r1, #0
   31bfe:	d0fb      	beq.n	31bf8 <print_value+0xc>
    switch ((item->type) & 0xFF)
   31c00:	7b05      	ldrb	r5, [r0, #12]
   31c02:	2d10      	cmp	r5, #16
   31c04:	f000 80ea 	beq.w	31ddc <print_value+0x1f0>
   31c08:	dc18      	bgt.n	31c3c <print_value+0x50>
   31c0a:	1e6b      	subs	r3, r5, #1
   31c0c:	2b07      	cmp	r3, #7
   31c0e:	d8f3      	bhi.n	31bf8 <print_value+0xc>
   31c10:	2b07      	cmp	r3, #7
   31c12:	d8f1      	bhi.n	31bf8 <print_value+0xc>
   31c14:	a201      	add	r2, pc, #4	; (adr r2, 31c1c <print_value+0x30>)
   31c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   31c1a:	bf00      	nop
   31c1c:	00031cb9 	.word	0x00031cb9
   31c20:	00031ce5 	.word	0x00031ce5
   31c24:	00031bf9 	.word	0x00031bf9
   31c28:	00031c91 	.word	0x00031c91
   31c2c:	00031bf9 	.word	0x00031bf9
   31c30:	00031bf9 	.word	0x00031bf9
   31c34:	00031bf9 	.word	0x00031bf9
   31c38:	00031ce9 	.word	0x00031ce9
   31c3c:	2d40      	cmp	r5, #64	; 0x40
   31c3e:	f000 80fc 	beq.w	31e3a <print_value+0x24e>
   31c42:	2d80      	cmp	r5, #128	; 0x80
   31c44:	f000 80b6 	beq.w	31db4 <print_value+0x1c8>
   31c48:	2d20      	cmp	r5, #32
   31c4a:	d1d5      	bne.n	31bf8 <print_value+0xc>
            return print_array(item, output_buffer);
   31c4c:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   31c4e:	2101      	movs	r1, #1
   31c50:	4620      	mov	r0, r4
   31c52:	f00d fffa 	bl	3fc4a <ensure>
    if (output_pointer == NULL)
   31c56:	2800      	cmp	r0, #0
   31c58:	d0ce      	beq.n	31bf8 <print_value+0xc>
    *output_pointer = '[';
   31c5a:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   31c5c:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   31c5e:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   31c62:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   31c64:	68a3      	ldr	r3, [r4, #8]
   31c66:	3301      	adds	r3, #1
   31c68:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   31c6a:	68e3      	ldr	r3, [r4, #12]
   31c6c:	3301      	adds	r3, #1
   31c6e:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   31c70:	2e00      	cmp	r6, #0
   31c72:	f040 80b9 	bne.w	31de8 <print_value+0x1fc>
    output_pointer = ensure(output_buffer, 2);
   31c76:	2102      	movs	r1, #2
   31c78:	4620      	mov	r0, r4
   31c7a:	f00d ffe6 	bl	3fc4a <ensure>
    if (output_pointer == NULL)
   31c7e:	2800      	cmp	r0, #0
   31c80:	d0ba      	beq.n	31bf8 <print_value+0xc>
    *output_pointer++ = ']';
   31c82:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   31c84:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   31c86:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   31c88:	68e3      	ldr	r3, [r4, #12]
   31c8a:	3b01      	subs	r3, #1
   31c8c:	60e3      	str	r3, [r4, #12]
   31c8e:	e011      	b.n	31cb4 <print_value+0xc8>
            const char buff[] = "null";
   31c90:	4b82      	ldr	r3, [pc, #520]	; (31e9c <print_value+0x2b0>)
            const char buff[] = "true";
   31c92:	6818      	ldr	r0, [r3, #0]
   31c94:	791b      	ldrb	r3, [r3, #4]
   31c96:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   31c98:	2105      	movs	r1, #5
   31c9a:	4620      	mov	r0, r4
            const char buff[] = "true";
   31c9c:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   31ca0:	f00d ffd3 	bl	3fc4a <ensure>
            if (output == NULL)
   31ca4:	4605      	mov	r5, r0
   31ca6:	b1c8      	cbz	r0, 31cdc <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   31ca8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   31cac:	a907      	add	r1, sp, #28
   31cae:	1ad2      	subs	r2, r2, r3
   31cb0:	f00f fe8e 	bl	419d0 <strncpy>
    return true;
   31cb4:	2501      	movs	r5, #1
   31cb6:	e011      	b.n	31cdc <print_value+0xf0>
            const char buff[] = "false";
   31cb8:	4b79      	ldr	r3, [pc, #484]	; (31ea0 <print_value+0x2b4>)
            output = ensure(output_buffer, sizeof(buff));
   31cba:	2106      	movs	r1, #6
            const char buff[] = "false";
   31cbc:	6818      	ldr	r0, [r3, #0]
   31cbe:	889b      	ldrh	r3, [r3, #4]
   31cc0:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   31cc2:	4620      	mov	r0, r4
            const char buff[] = "false";
   31cc4:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   31cc8:	f00d ffbf 	bl	3fc4a <ensure>
            if (output == NULL)
   31ccc:	2800      	cmp	r0, #0
   31cce:	d093      	beq.n	31bf8 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   31cd0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   31cd4:	a907      	add	r1, sp, #28
   31cd6:	1ad2      	subs	r2, r2, r3
   31cd8:	f00f fe7a 	bl	419d0 <strncpy>
}
   31cdc:	4628      	mov	r0, r5
   31cde:	b00f      	add	sp, #60	; 0x3c
   31ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   31ce4:	4b6f      	ldr	r3, [pc, #444]	; (31ea4 <print_value+0x2b8>)
   31ce6:	e7d4      	b.n	31c92 <print_value+0xa6>
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   31ce8:	2100      	movs	r1, #0
    double d = item->valuedouble;
   31cea:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   31cee:	2216      	movs	r2, #22
   31cf0:	a808      	add	r0, sp, #32
   31cf2:	9107      	str	r1, [sp, #28]
   31cf4:	f00f fc85 	bl	41602 <memset>
    double test = 0.0;
   31cf8:	2200      	movs	r2, #0
   31cfa:	2300      	movs	r3, #0
    if (isnan(d) || isinf(d))
   31cfc:	4630      	mov	r0, r6
    double test = 0.0;
   31cfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (isnan(d) || isinf(d))
   31d02:	4639      	mov	r1, r7
   31d04:	4632      	mov	r2, r6
   31d06:	463b      	mov	r3, r7
   31d08:	f7ea fff0 	bl	1ccec <__aeabi_dcmpun>
   31d0c:	b988      	cbnz	r0, 31d32 <print_value+0x146>
   31d0e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   31d12:	f04f 32ff 	mov.w	r2, #4294967295
   31d16:	4630      	mov	r0, r6
   31d18:	4649      	mov	r1, r9
   31d1a:	4b63      	ldr	r3, [pc, #396]	; (31ea8 <print_value+0x2bc>)
   31d1c:	f7ea ffe6 	bl	1ccec <__aeabi_dcmpun>
   31d20:	b9f0      	cbnz	r0, 31d60 <print_value+0x174>
   31d22:	f04f 32ff 	mov.w	r2, #4294967295
   31d26:	4630      	mov	r0, r6
   31d28:	4649      	mov	r1, r9
   31d2a:	4b5f      	ldr	r3, [pc, #380]	; (31ea8 <print_value+0x2bc>)
   31d2c:	f7ea ffc0 	bl	1ccb0 <__aeabi_dcmple>
   31d30:	b9b0      	cbnz	r0, 31d60 <print_value+0x174>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   31d32:	495a      	ldr	r1, [pc, #360]	; (31e9c <print_value+0x2b0>)
   31d34:	a807      	add	r0, sp, #28
   31d36:	f00f fe2f 	bl	41998 <strcpy>
   31d3a:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   31d3c:	4620      	mov	r0, r4
   31d3e:	1c69      	adds	r1, r5, #1
   31d40:	f00d ff83 	bl	3fc4a <ensure>
    if (output_pointer == NULL)
   31d44:	2800      	cmp	r0, #0
   31d46:	f43f af57 	beq.w	31bf8 <print_value+0xc>
   31d4a:	4602      	mov	r2, r0
   31d4c:	ab07      	add	r3, sp, #28
   31d4e:	1946      	adds	r6, r0, r5
    for (i = 0; i < ((size_t)length); i++)
   31d50:	4296      	cmp	r6, r2
   31d52:	d129      	bne.n	31da8 <print_value+0x1bc>
    output_pointer[i] = '\0';
   31d54:	2300      	movs	r3, #0
   31d56:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   31d58:	68a0      	ldr	r0, [r4, #8]
   31d5a:	4428      	add	r0, r5
   31d5c:	60a0      	str	r0, [r4, #8]
    return true;
   31d5e:	e7a9      	b.n	31cb4 <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   31d60:	211a      	movs	r1, #26
   31d62:	4a52      	ldr	r2, [pc, #328]	; (31eac <print_value+0x2c0>)
   31d64:	e9cd 6700 	strd	r6, r7, [sp]
   31d68:	a807      	add	r0, sp, #28
   31d6a:	f008 fd27 	bl	3a7bc <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   31d6e:	4950      	ldr	r1, [pc, #320]	; (31eb0 <print_value+0x2c4>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   31d70:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   31d72:	aa04      	add	r2, sp, #16
   31d74:	a807      	add	r0, sp, #28
   31d76:	f008 fd55 	bl	3a824 <siscanf>
   31d7a:	2801      	cmp	r0, #1
   31d7c:	d00b      	beq.n	31d96 <print_value+0x1aa>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   31d7e:	211a      	movs	r1, #26
   31d80:	e9cd 6700 	strd	r6, r7, [sp]
   31d84:	4a4b      	ldr	r2, [pc, #300]	; (31eb4 <print_value+0x2c8>)
   31d86:	a807      	add	r0, sp, #28
   31d88:	f008 fd18 	bl	3a7bc <sniprintf>
   31d8c:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   31d8e:	2d19      	cmp	r5, #25
   31d90:	f73f af32 	bgt.w	31bf8 <print_value+0xc>
   31d94:	e7d2      	b.n	31d3c <print_value+0x150>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   31d96:	4632      	mov	r2, r6
   31d98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   31d9c:	463b      	mov	r3, r7
   31d9e:	f7ff fdc1 	bl	31924 <compare_double>
   31da2:	2800      	cmp	r0, #0
   31da4:	d0eb      	beq.n	31d7e <print_value+0x192>
   31da6:	e7f2      	b.n	31d8e <print_value+0x1a2>
        if (number_buffer[i] == decimal_point)
   31da8:	f813 1b01 	ldrb.w	r1, [r3], #1
   31dac:	3201      	adds	r2, #1
            output_pointer[i] = '.';
   31dae:	f802 1c01 	strb.w	r1, [r2, #-1]
    for (i = 0; i < ((size_t)length); i++)
   31db2:	e7cd      	b.n	31d50 <print_value+0x164>
            if (item->valuestring == NULL)
   31db4:	6900      	ldr	r0, [r0, #16]
   31db6:	2800      	cmp	r0, #0
   31db8:	f43f af1e 	beq.w	31bf8 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   31dbc:	f7eb fa41 	bl	1d242 <strlen>
   31dc0:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   31dc2:	4611      	mov	r1, r2
   31dc4:	4620      	mov	r0, r4
   31dc6:	9203      	str	r2, [sp, #12]
   31dc8:	f00d ff3f 	bl	3fc4a <ensure>
            if (output == NULL)
   31dcc:	2800      	cmp	r0, #0
   31dce:	f43f af13 	beq.w	31bf8 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31dd2:	9a03      	ldr	r2, [sp, #12]
   31dd4:	6931      	ldr	r1, [r6, #16]
   31dd6:	f00f fbf4 	bl	415c2 <memcpy>
   31dda:	e76b      	b.n	31cb4 <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   31ddc:	6900      	ldr	r0, [r0, #16]
}
   31dde:	b00f      	add	sp, #60	; 0x3c
   31de0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
   31de4:	f7ff be12 	b.w	31a0c <print_string_ptr>
        if (!print_value(current_element, output_buffer))
   31de8:	4621      	mov	r1, r4
   31dea:	4630      	mov	r0, r6
   31dec:	f7ff fefe 	bl	31bec <print_value>
   31df0:	2800      	cmp	r0, #0
   31df2:	f43f af01 	beq.w	31bf8 <print_value+0xc>
        update_offset(output_buffer);
   31df6:	4620      	mov	r0, r4
   31df8:	f00d ff06 	bl	3fc08 <update_offset>
        if (current_element->next)
   31dfc:	6833      	ldr	r3, [r6, #0]
   31dfe:	b1bb      	cbz	r3, 31e30 <print_value+0x244>
            length = (size_t) (output_buffer->format ? 2 : 1);
   31e00:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   31e02:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   31e04:	2b00      	cmp	r3, #0
   31e06:	bf14      	ite	ne
   31e08:	f04f 0902 	movne.w	r9, #2
   31e0c:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   31e10:	f109 0101 	add.w	r1, r9, #1
   31e14:	f00d ff19 	bl	3fc4a <ensure>
            if (output_pointer == NULL)
   31e18:	2800      	cmp	r0, #0
   31e1a:	f43f aeed 	beq.w	31bf8 <print_value+0xc>
            *output_pointer++ = ',';
   31e1e:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   31e20:	6963      	ldr	r3, [r4, #20]
   31e22:	b93b      	cbnz	r3, 31e34 <print_value+0x248>
            *output_pointer++ = ',';
   31e24:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   31e26:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   31e2a:	68a3      	ldr	r3, [r4, #8]
   31e2c:	444b      	add	r3, r9
   31e2e:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   31e30:	6836      	ldr	r6, [r6, #0]
   31e32:	e71d      	b.n	31c70 <print_value+0x84>
                *output_pointer++ = ' ';
   31e34:	1c83      	adds	r3, r0, #2
   31e36:	7045      	strb	r5, [r0, #1]
   31e38:	e7f5      	b.n	31e26 <print_value+0x23a>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   31e3a:	694b      	ldr	r3, [r1, #20]
   31e3c:	6885      	ldr	r5, [r0, #8]
   31e3e:	2b00      	cmp	r3, #0
   31e40:	bf14      	ite	ne
   31e42:	2702      	movne	r7, #2
   31e44:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   31e46:	4620      	mov	r0, r4
   31e48:	1c79      	adds	r1, r7, #1
   31e4a:	f00d fefe 	bl	3fc4a <ensure>
    if (output_pointer == NULL)
   31e4e:	2800      	cmp	r0, #0
   31e50:	f43f aed2 	beq.w	31bf8 <print_value+0xc>
    *output_pointer++ = '{';
   31e54:	237b      	movs	r3, #123	; 0x7b
   31e56:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   31e58:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   31e5a:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   31e5c:	3201      	adds	r2, #1
   31e5e:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   31e60:	b10b      	cbz	r3, 31e66 <print_value+0x27a>
        *output_pointer++ = '\n';
   31e62:	230a      	movs	r3, #10
   31e64:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   31e66:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   31e68:	2609      	movs	r6, #9
    output_buffer->offset += length;
   31e6a:	443b      	add	r3, r7
        *output_pointer++ = ':';
   31e6c:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   31e6e:	60a3      	str	r3, [r4, #8]
        if (output_buffer->format)
   31e70:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   31e72:	bb0d      	cbnz	r5, 31eb8 <print_value+0x2cc>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   31e74:	2b00      	cmp	r3, #0
   31e76:	d07f      	beq.n	31f78 <print_value+0x38c>
   31e78:	68e1      	ldr	r1, [r4, #12]
   31e7a:	3101      	adds	r1, #1
   31e7c:	4620      	mov	r0, r4
   31e7e:	f00d fee4 	bl	3fc4a <ensure>
    if (output_pointer == NULL)
   31e82:	2800      	cmp	r0, #0
   31e84:	f43f aeb8 	beq.w	31bf8 <print_value+0xc>
    if (output_buffer->format)
   31e88:	6963      	ldr	r3, [r4, #20]
   31e8a:	2b00      	cmp	r3, #0
   31e8c:	d17e      	bne.n	31f8c <print_value+0x3a0>
   31e8e:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   31e90:	227d      	movs	r2, #125	; 0x7d
   31e92:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   31e94:	2200      	movs	r2, #0
   31e96:	705a      	strb	r2, [r3, #1]
   31e98:	e6f6      	b.n	31c88 <print_value+0x9c>
   31e9a:	bf00      	nop
   31e9c:	0004b9c1 	.word	0x0004b9c1
   31ea0:	0004b9d8 	.word	0x0004b9d8
   31ea4:	0004b9de 	.word	0x0004b9de
   31ea8:	7fefffff 	.word	0x7fefffff
   31eac:	0004b9c6 	.word	0x0004b9c6
   31eb0:	0004b9cd 	.word	0x0004b9cd
   31eb4:	0004b9d1 	.word	0x0004b9d1
        if (output_buffer->format)
   31eb8:	b173      	cbz	r3, 31ed8 <print_value+0x2ec>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   31eba:	4620      	mov	r0, r4
   31ebc:	68e1      	ldr	r1, [r4, #12]
   31ebe:	f00d fec4 	bl	3fc4a <ensure>
            if (output_pointer == NULL)
   31ec2:	2800      	cmp	r0, #0
   31ec4:	f43f ae98 	beq.w	31bf8 <print_value+0xc>
   31ec8:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   31eca:	68e1      	ldr	r1, [r4, #12]
   31ecc:	1a13      	subs	r3, r2, r0
   31ece:	428b      	cmp	r3, r1
   31ed0:	d34f      	bcc.n	31f72 <print_value+0x386>
            output_buffer->offset += output_buffer->depth;
   31ed2:	68a3      	ldr	r3, [r4, #8]
   31ed4:	440b      	add	r3, r1
   31ed6:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   31ed8:	4621      	mov	r1, r4
   31eda:	6a28      	ldr	r0, [r5, #32]
   31edc:	f7ff fd96 	bl	31a0c <print_string_ptr>
   31ee0:	2800      	cmp	r0, #0
   31ee2:	f43f ae89 	beq.w	31bf8 <print_value+0xc>
        update_offset(output_buffer);
   31ee6:	4620      	mov	r0, r4
   31ee8:	f00d fe8e 	bl	3fc08 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   31eec:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   31eee:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   31ef0:	2b00      	cmp	r3, #0
   31ef2:	bf14      	ite	ne
   31ef4:	f04f 0802 	movne.w	r8, #2
   31ef8:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   31efc:	4641      	mov	r1, r8
   31efe:	f00d fea4 	bl	3fc4a <ensure>
        if (output_pointer == NULL)
   31f02:	2800      	cmp	r0, #0
   31f04:	f43f ae78 	beq.w	31bf8 <print_value+0xc>
        *output_pointer++ = ':';
   31f08:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   31f0a:	6963      	ldr	r3, [r4, #20]
   31f0c:	b103      	cbz	r3, 31f10 <print_value+0x324>
            *output_pointer++ = '\t';
   31f0e:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   31f10:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   31f12:	4621      	mov	r1, r4
        output_buffer->offset += length;
   31f14:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   31f16:	4628      	mov	r0, r5
        output_buffer->offset += length;
   31f18:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   31f1a:	f7ff fe67 	bl	31bec <print_value>
   31f1e:	2800      	cmp	r0, #0
   31f20:	f43f ae6a 	beq.w	31bf8 <print_value+0xc>
        update_offset(output_buffer);
   31f24:	4620      	mov	r0, r4
   31f26:	f00d fe6f 	bl	3fc08 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   31f2a:	682b      	ldr	r3, [r5, #0]
   31f2c:	6962      	ldr	r2, [r4, #20]
   31f2e:	f1b3 0800 	subs.w	r8, r3, #0
   31f32:	bf18      	it	ne
   31f34:	f04f 0801 	movne.w	r8, #1
   31f38:	2a00      	cmp	r2, #0
   31f3a:	bf18      	it	ne
   31f3c:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
   31f40:	4620      	mov	r0, r4
   31f42:	f108 0101 	add.w	r1, r8, #1
   31f46:	f00d fe80 	bl	3fc4a <ensure>
        if (output_pointer == NULL)
   31f4a:	2800      	cmp	r0, #0
   31f4c:	f43f ae54 	beq.w	31bf8 <print_value+0xc>
        if (current_item->next)
   31f50:	682b      	ldr	r3, [r5, #0]
   31f52:	b113      	cbz	r3, 31f5a <print_value+0x36e>
            *output_pointer++ = ',';
   31f54:	232c      	movs	r3, #44	; 0x2c
   31f56:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   31f5a:	6963      	ldr	r3, [r4, #20]
   31f5c:	b113      	cbz	r3, 31f64 <print_value+0x378>
            *output_pointer++ = '\n';
   31f5e:	230a      	movs	r3, #10
   31f60:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   31f64:	2300      	movs	r3, #0
   31f66:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   31f68:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   31f6a:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   31f6c:	4443      	add	r3, r8
   31f6e:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   31f70:	e77e      	b.n	31e70 <print_value+0x284>
                *output_pointer++ = '\t';
   31f72:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   31f76:	e7a8      	b.n	31eca <print_value+0x2de>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   31f78:	2102      	movs	r1, #2
   31f7a:	e77f      	b.n	31e7c <print_value+0x290>
            *output_pointer++ = '\t';
   31f7c:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   31f80:	68e2      	ldr	r2, [r4, #12]
   31f82:	1a19      	subs	r1, r3, r0
   31f84:	3a01      	subs	r2, #1
   31f86:	4291      	cmp	r1, r2
   31f88:	d3f8      	bcc.n	31f7c <print_value+0x390>
   31f8a:	e781      	b.n	31e90 <print_value+0x2a4>
   31f8c:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   31f8e:	2509      	movs	r5, #9
   31f90:	e7f6      	b.n	31f80 <print_value+0x394>
   31f92:	bf00      	nop

00031f94 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   31f94:	b570      	push	{r4, r5, r6, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   31f96:	4d23      	ldr	r5, [pc, #140]	; (32024 <print.constprop.0+0x90>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   31f98:	b08a      	sub	sp, #40	; 0x28
   31f9a:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   31f9c:	2224      	movs	r2, #36	; 0x24
   31f9e:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   31fa0:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   31fa2:	a801      	add	r0, sp, #4
   31fa4:	f00f fb2d 	bl	41602 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   31fa8:	682b      	ldr	r3, [r5, #0]
   31faa:	f44f 7080 	mov.w	r0, #256	; 0x100
   31fae:	4798      	blx	r3
    buffer->length = default_buffer_size;
   31fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   31fb4:	4603      	mov	r3, r0
    buffer->format = format;
   31fb6:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   31fb8:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   31fba:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   31fbc:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   31fbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   31fc2:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   31fc6:	b17b      	cbz	r3, 31fe8 <print.constprop.0+0x54>
    if (!print_value(item, buffer))
   31fc8:	4620      	mov	r0, r4
   31fca:	a901      	add	r1, sp, #4
   31fcc:	f7ff fe0e 	bl	31bec <print_value>
   31fd0:	b150      	cbz	r0, 31fe8 <print.constprop.0+0x54>
    update_offset(buffer);
   31fd2:	a801      	add	r0, sp, #4
   31fd4:	f00d fe18 	bl	3fc08 <update_offset>
    if (hooks->reallocate != NULL)
   31fd8:	68ae      	ldr	r6, [r5, #8]
   31fda:	9903      	ldr	r1, [sp, #12]
   31fdc:	b15e      	cbz	r6, 31ff6 <print.constprop.0+0x62>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   31fde:	9801      	ldr	r0, [sp, #4]
   31fe0:	3101      	adds	r1, #1
   31fe2:	47b0      	blx	r6
        if (printed == NULL) {
   31fe4:	4604      	mov	r4, r0
   31fe6:	b9d0      	cbnz	r0, 3201e <print.constprop.0+0x8a>
    if (buffer->buffer != NULL)
   31fe8:	9c01      	ldr	r4, [sp, #4]
   31fea:	b1c4      	cbz	r4, 3201e <print.constprop.0+0x8a>
        hooks->deallocate(buffer->buffer);
   31fec:	4620      	mov	r0, r4
   31fee:	686b      	ldr	r3, [r5, #4]
   31ff0:	4798      	blx	r3
    return NULL;
   31ff2:	2400      	movs	r4, #0
   31ff4:	e013      	b.n	3201e <print.constprop.0+0x8a>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   31ff6:	682b      	ldr	r3, [r5, #0]
   31ff8:	1c48      	adds	r0, r1, #1
   31ffa:	4798      	blx	r3
        if (printed == NULL)
   31ffc:	4604      	mov	r4, r0
   31ffe:	2800      	cmp	r0, #0
   32000:	d0f2      	beq.n	31fe8 <print.constprop.0+0x54>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   32002:	9a03      	ldr	r2, [sp, #12]
   32004:	9b02      	ldr	r3, [sp, #8]
   32006:	3201      	adds	r2, #1
   32008:	429a      	cmp	r2, r3
   3200a:	bf28      	it	cs
   3200c:	461a      	movcs	r2, r3
   3200e:	9901      	ldr	r1, [sp, #4]
   32010:	f00f fad7 	bl	415c2 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   32014:	9b03      	ldr	r3, [sp, #12]
   32016:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   32018:	686b      	ldr	r3, [r5, #4]
   3201a:	9801      	ldr	r0, [sp, #4]
   3201c:	4798      	blx	r3
}
   3201e:	4620      	mov	r0, r4
   32020:	b00a      	add	sp, #40	; 0x28
   32022:	bd70      	pop	{r4, r5, r6, pc}
   32024:	200146f0 	.word	0x200146f0

00032028 <cJSON_InitHooks>:
{
   32028:	b530      	push	{r4, r5, lr}
   3202a:	4b0e      	ldr	r3, [pc, #56]	; (32064 <cJSON_InitHooks+0x3c>)
   3202c:	490e      	ldr	r1, [pc, #56]	; (32068 <cJSON_InitHooks+0x40>)
   3202e:	4a0f      	ldr	r2, [pc, #60]	; (3206c <cJSON_InitHooks+0x44>)
    if (hooks == NULL)
   32030:	b920      	cbnz	r0, 3203c <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   32032:	e9c3 1200 	strd	r1, r2, [r3]
        global_hooks.reallocate = realloc;
   32036:	4a0e      	ldr	r2, [pc, #56]	; (32070 <cJSON_InitHooks+0x48>)
   32038:	609a      	str	r2, [r3, #8]
   3203a:	e011      	b.n	32060 <cJSON_InitHooks+0x38>
    if (hooks->malloc_fn != NULL)
   3203c:	6805      	ldr	r5, [r0, #0]
        global_hooks.allocate = hooks->malloc_fn;
   3203e:	2d00      	cmp	r5, #0
   32040:	bf14      	ite	ne
   32042:	462c      	movne	r4, r5
   32044:	460c      	moveq	r4, r1
    if (hooks->free_fn != NULL)
   32046:	6845      	ldr	r5, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   32048:	601c      	str	r4, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   3204a:	2d00      	cmp	r5, #0
   3204c:	bf14      	ite	ne
   3204e:	4628      	movne	r0, r5
   32050:	4610      	moveq	r0, r2
    global_hooks.reallocate = NULL;
   32052:	2500      	movs	r5, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   32054:	428c      	cmp	r4, r1
        global_hooks.deallocate = hooks->free_fn;
   32056:	6058      	str	r0, [r3, #4]
    global_hooks.reallocate = NULL;
   32058:	609d      	str	r5, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   3205a:	d101      	bne.n	32060 <cJSON_InitHooks+0x38>
   3205c:	4290      	cmp	r0, r2
   3205e:	d0ea      	beq.n	32036 <cJSON_InitHooks+0xe>
}
   32060:	bd30      	pop	{r4, r5, pc}
   32062:	bf00      	nop
   32064:	200146f0 	.word	0x200146f0
   32068:	00039cd5 	.word	0x00039cd5
   3206c:	00039ce5 	.word	0x00039ce5
   32070:	0003a78d 	.word	0x0003a78d

00032074 <cJSON_Delete>:
{
   32074:	b570      	push	{r4, r5, r6, lr}
   32076:	4604      	mov	r4, r0
   32078:	4d0f      	ldr	r5, [pc, #60]	; (320b8 <cJSON_Delete+0x44>)
    while (item != NULL)
   3207a:	b904      	cbnz	r4, 3207e <cJSON_Delete+0xa>
}
   3207c:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   3207e:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   32080:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   32082:	05d9      	lsls	r1, r3, #23
   32084:	d403      	bmi.n	3208e <cJSON_Delete+0x1a>
   32086:	68a0      	ldr	r0, [r4, #8]
   32088:	b968      	cbnz	r0, 320a6 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   3208a:	6920      	ldr	r0, [r4, #16]
   3208c:	b988      	cbnz	r0, 320b2 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   3208e:	68e3      	ldr	r3, [r4, #12]
   32090:	059b      	lsls	r3, r3, #22
   32092:	d403      	bmi.n	3209c <cJSON_Delete+0x28>
   32094:	6a20      	ldr	r0, [r4, #32]
   32096:	b108      	cbz	r0, 3209c <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   32098:	686b      	ldr	r3, [r5, #4]
   3209a:	4798      	blx	r3
        global_hooks.deallocate(item);
   3209c:	4620      	mov	r0, r4
   3209e:	686b      	ldr	r3, [r5, #4]
   320a0:	4798      	blx	r3
        item = next;
   320a2:	4634      	mov	r4, r6
   320a4:	e7e9      	b.n	3207a <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   320a6:	f7ff ffe5 	bl	32074 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   320aa:	68e3      	ldr	r3, [r4, #12]
   320ac:	05da      	lsls	r2, r3, #23
   320ae:	d5ec      	bpl.n	3208a <cJSON_Delete+0x16>
   320b0:	e7ed      	b.n	3208e <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   320b2:	686b      	ldr	r3, [r5, #4]
   320b4:	4798      	blx	r3
   320b6:	e7ea      	b.n	3208e <cJSON_Delete+0x1a>
   320b8:	200146f0 	.word	0x200146f0

000320bc <cJSON_ParseWithLengthOpts>:
{
   320bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   320c0:	4605      	mov	r5, r0
    global_error.json = NULL;
   320c2:	f04f 0900 	mov.w	r9, #0
{
   320c6:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   320c8:	4f30      	ldr	r7, [pc, #192]	; (3218c <cJSON_ParseWithLengthOpts+0xd0>)
{
   320ca:	460c      	mov	r4, r1
   320cc:	4616      	mov	r6, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   320ce:	2100      	movs	r1, #0
   320d0:	221c      	movs	r2, #28
   320d2:	a801      	add	r0, sp, #4
{
   320d4:	4698      	mov	r8, r3
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   320d6:	f00f fa94 	bl	41602 <memset>
    global_error.position = 0;
   320da:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL || 0 == buffer_length)
   320de:	2d00      	cmp	r5, #0
   320e0:	d04a      	beq.n	32178 <cJSON_ParseWithLengthOpts+0xbc>
   320e2:	2c00      	cmp	r4, #0
   320e4:	d03d      	beq.n	32162 <cJSON_ParseWithLengthOpts+0xa6>
    buffer.hooks = global_hooks;
   320e6:	4b2a      	ldr	r3, [pc, #168]	; (32190 <cJSON_ParseWithLengthOpts+0xd4>)
    buffer.length = buffer_length; 
   320e8:	e9cd 5401 	strd	r5, r4, [sp, #4]
    buffer.hooks = global_hooks;
   320ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   320f0:	ab08      	add	r3, sp, #32
   320f2:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   320f6:	f00d fde9 	bl	3fccc <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   320fa:	4604      	mov	r4, r0
   320fc:	2800      	cmp	r0, #0
   320fe:	d030      	beq.n	32162 <cJSON_ParseWithLengthOpts+0xa6>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   32100:	9801      	ldr	r0, [sp, #4]
   32102:	b128      	cbz	r0, 32110 <cJSON_ParseWithLengthOpts+0x54>
   32104:	9b03      	ldr	r3, [sp, #12]
   32106:	b9e3      	cbnz	r3, 32142 <cJSON_ParseWithLengthOpts+0x86>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   32108:	9b02      	ldr	r3, [sp, #8]
   3210a:	2b04      	cmp	r3, #4
   3210c:	d80f      	bhi.n	3212e <cJSON_ParseWithLengthOpts+0x72>
    return buffer;
   3210e:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   32110:	f00d fd5a 	bl	3fbc8 <buffer_skip_whitespace>
   32114:	4601      	mov	r1, r0
   32116:	4620      	mov	r0, r4
   32118:	f7ec f93a 	bl	1e390 <parse_value>
   3211c:	b1f0      	cbz	r0, 3215c <cJSON_ParseWithLengthOpts+0xa0>
    if (require_null_terminated)
   3211e:	f1b8 0f00 	cmp.w	r8, #0
   32122:	d110      	bne.n	32146 <cJSON_ParseWithLengthOpts+0x8a>
    if (return_parse_end)
   32124:	bb56      	cbnz	r6, 3217c <cJSON_ParseWithLengthOpts+0xc0>
}
   32126:	4620      	mov	r0, r4
   32128:	b009      	add	sp, #36	; 0x24
   3212a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   3212e:	2203      	movs	r2, #3
   32130:	4918      	ldr	r1, [pc, #96]	; (32194 <cJSON_ParseWithLengthOpts+0xd8>)
   32132:	f00f fc39 	bl	419a8 <strncmp>
   32136:	2800      	cmp	r0, #0
   32138:	d1e9      	bne.n	3210e <cJSON_ParseWithLengthOpts+0x52>
        buffer->offset += 3;
   3213a:	9b03      	ldr	r3, [sp, #12]
   3213c:	3303      	adds	r3, #3
   3213e:	9303      	str	r3, [sp, #12]
   32140:	e7e5      	b.n	3210e <cJSON_ParseWithLengthOpts+0x52>
        return NULL;
   32142:	4648      	mov	r0, r9
   32144:	e7e4      	b.n	32110 <cJSON_ParseWithLengthOpts+0x54>
        buffer_skip_whitespace(&buffer);
   32146:	a801      	add	r0, sp, #4
   32148:	f00d fd3e 	bl	3fbc8 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   3214c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   32150:	4293      	cmp	r3, r2
   32152:	d203      	bcs.n	3215c <cJSON_ParseWithLengthOpts+0xa0>
   32154:	9a01      	ldr	r2, [sp, #4]
   32156:	5cd3      	ldrb	r3, [r2, r3]
   32158:	2b00      	cmp	r3, #0
   3215a:	d0e3      	beq.n	32124 <cJSON_ParseWithLengthOpts+0x68>
        cJSON_Delete(item);
   3215c:	4620      	mov	r0, r4
   3215e:	f7ff ff89 	bl	32074 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   32162:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   32166:	429a      	cmp	r2, r3
   32168:	d30d      	bcc.n	32186 <cJSON_ParseWithLengthOpts+0xca>
        else if (buffer.length > 0)
   3216a:	b103      	cbz	r3, 3216e <cJSON_ParseWithLengthOpts+0xb2>
            local_error.position = buffer.length - 1;
   3216c:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   3216e:	b10e      	cbz	r6, 32174 <cJSON_ParseWithLengthOpts+0xb8>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   32170:	18ea      	adds	r2, r5, r3
   32172:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   32174:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
   32178:	2400      	movs	r4, #0
   3217a:	e7d4      	b.n	32126 <cJSON_ParseWithLengthOpts+0x6a>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   3217c:	9b01      	ldr	r3, [sp, #4]
   3217e:	9a03      	ldr	r2, [sp, #12]
   32180:	4413      	add	r3, r2
   32182:	6033      	str	r3, [r6, #0]
   32184:	e7cf      	b.n	32126 <cJSON_ParseWithLengthOpts+0x6a>
   32186:	4613      	mov	r3, r2
   32188:	e7f1      	b.n	3216e <cJSON_ParseWithLengthOpts+0xb2>
   3218a:	bf00      	nop
   3218c:	2001a410 	.word	0x2001a410
   32190:	200146f0 	.word	0x200146f0
   32194:	0004b9e3 	.word	0x0004b9e3

00032198 <cJSON_CreateNull>:
{
   32198:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   3219a:	4b04      	ldr	r3, [pc, #16]	; (321ac <cJSON_CreateNull+0x14>)
   3219c:	6818      	ldr	r0, [r3, #0]
   3219e:	f00d fd95 	bl	3fccc <cJSON_New_Item.isra.0>
    if(item)
   321a2:	b108      	cbz	r0, 321a8 <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   321a4:	2304      	movs	r3, #4
   321a6:	60c3      	str	r3, [r0, #12]
}
   321a8:	bd08      	pop	{r3, pc}
   321aa:	bf00      	nop
   321ac:	200146f0 	.word	0x200146f0

000321b0 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   321b0:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   321b2:	4b0a      	ldr	r3, [pc, #40]	; (321dc <cJSON_CreateString+0x2c>)
{
   321b4:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   321b6:	6818      	ldr	r0, [r3, #0]
   321b8:	f00d fd88 	bl	3fccc <cJSON_New_Item.isra.0>
    if(item)
   321bc:	4604      	mov	r4, r0
   321be:	b158      	cbz	r0, 321d8 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   321c0:	2310      	movs	r3, #16
   321c2:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   321c4:	4628      	mov	r0, r5
   321c6:	f7ff fccf 	bl	31b68 <cJSON_strdup.constprop.0>
   321ca:	4605      	mov	r5, r0
   321cc:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   321ce:	b918      	cbnz	r0, 321d8 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   321d0:	4620      	mov	r0, r4
   321d2:	f7ff ff4f 	bl	32074 <cJSON_Delete>
            return NULL;
   321d6:	462c      	mov	r4, r5
        }
    }

    return item;
}
   321d8:	4620      	mov	r0, r4
   321da:	bd38      	pop	{r3, r4, r5, pc}
   321dc:	200146f0 	.word	0x200146f0

000321e0 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   321e0:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   321e2:	4b04      	ldr	r3, [pc, #16]	; (321f4 <cJSON_CreateArray+0x14>)
   321e4:	6818      	ldr	r0, [r3, #0]
   321e6:	f00d fd71 	bl	3fccc <cJSON_New_Item.isra.0>
    if(item)
   321ea:	b108      	cbz	r0, 321f0 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   321ec:	2320      	movs	r3, #32
   321ee:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   321f0:	bd08      	pop	{r3, pc}
   321f2:	bf00      	nop
   321f4:	200146f0 	.word	0x200146f0

000321f8 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   321f8:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   321fa:	4b04      	ldr	r3, [pc, #16]	; (3220c <cJSON_CreateObject+0x14>)
   321fc:	6818      	ldr	r0, [r3, #0]
   321fe:	f00d fd65 	bl	3fccc <cJSON_New_Item.isra.0>
    if (item)
   32202:	b108      	cbz	r0, 32208 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   32204:	2340      	movs	r3, #64	; 0x40
   32206:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   32208:	bd08      	pop	{r3, pc}
   3220a:	bf00      	nop
   3220c:	200146f0 	.word	0x200146f0

00032210 <cJSON_GetNumberValue>:
{
   32210:	b508      	push	{r3, lr}
   32212:	4602      	mov	r2, r0
    if (!cJSON_IsNumber(item)) 
   32214:	f00d fe93 	bl	3ff3e <cJSON_IsNumber>
   32218:	b110      	cbz	r0, 32220 <cJSON_GetNumberValue+0x10>
    return item->valuedouble;
   3221a:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
}
   3221e:	bd08      	pop	{r3, pc}
        return (double) NAN;
   32220:	2000      	movs	r0, #0
   32222:	4901      	ldr	r1, [pc, #4]	; (32228 <cJSON_GetNumberValue+0x18>)
   32224:	e7fb      	b.n	3221e <cJSON_GetNumberValue+0xe>
   32226:	bf00      	nop
   32228:	7ff80000 	.word	0x7ff80000

0003222c <cJSON_free>:
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
    global_hooks.deallocate(object);
   3222c:	4b01      	ldr	r3, [pc, #4]	; (32234 <cJSON_free+0x8>)
   3222e:	685b      	ldr	r3, [r3, #4]
   32230:	4718      	bx	r3
   32232:	bf00      	nop
   32234:	200146f0 	.word	0x200146f0

00032238 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   32238:	4803      	ldr	r0, [pc, #12]	; (32248 <cJSON_Init+0x10>)
   3223a:	4b04      	ldr	r3, [pc, #16]	; (3224c <cJSON_Init+0x14>)
   3223c:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   3223e:	4b04      	ldr	r3, [pc, #16]	; (32250 <cJSON_Init+0x18>)
   32240:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   32242:	f7ff bef1 	b.w	32028 <cJSON_InitHooks>
   32246:	bf00      	nop
   32248:	2001a418 	.word	0x2001a418
   3224c:	0003ff77 	.word	0x0003ff77
   32250:	0003ff7b 	.word	0x0003ff7b

00032254 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   32254:	4a07      	ldr	r2, [pc, #28]	; (32274 <SystemInit+0x20>)
   32256:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   3225a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   3225e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   32262:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   32266:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   3226a:	4b03      	ldr	r3, [pc, #12]	; (32278 <SystemInit+0x24>)
   3226c:	4a03      	ldr	r2, [pc, #12]	; (3227c <SystemInit+0x28>)
   3226e:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   32270:	4770      	bx	lr
   32272:	bf00      	nop
   32274:	e000ed00 	.word	0xe000ed00
   32278:	200146fc 	.word	0x200146fc
   3227c:	03d09000 	.word	0x03d09000

00032280 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   32280:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   32282:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   32284:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   32286:	fab2 f382 	clz	r3, r2
   3228a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   3228e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   32290:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   32292:	d010      	beq.n	322b6 <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
   32294:	fa05 f303 	lsl.w	r3, r5, r3
   32298:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3229c:	e8d0 6fef 	ldaex	r6, [r0]
   322a0:	4296      	cmp	r6, r2
   322a2:	d104      	bne.n	322ae <nrfx_flag32_alloc+0x2e>
   322a4:	e8c0 3fec 	stlex	ip, r3, [r0]
   322a8:	f1bc 0f00 	cmp.w	ip, #0
   322ac:	d1f6      	bne.n	3229c <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   322ae:	d1e9      	bne.n	32284 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   322b0:	4802      	ldr	r0, [pc, #8]	; (322bc <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   322b2:	700c      	strb	r4, [r1, #0]
}
   322b4:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   322b6:	4802      	ldr	r0, [pc, #8]	; (322c0 <nrfx_flag32_alloc+0x40>)
   322b8:	e7fc      	b.n	322b4 <nrfx_flag32_alloc+0x34>
   322ba:	bf00      	nop
   322bc:	0bad0000 	.word	0x0bad0000
   322c0:	0bad0002 	.word	0x0bad0002

000322c4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   322c4:	6803      	ldr	r3, [r0, #0]
{
   322c6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   322c8:	40cb      	lsrs	r3, r1
   322ca:	07db      	lsls	r3, r3, #31
   322cc:	d411      	bmi.n	322f2 <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   322ce:	2301      	movs	r3, #1
   322d0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   322d4:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   322d6:	ea41 0203 	orr.w	r2, r1, r3
   322da:	e8d0 4fef 	ldaex	r4, [r0]
   322de:	429c      	cmp	r4, r3
   322e0:	d104      	bne.n	322ec <nrfx_flag32_free+0x28>
   322e2:	e8c0 2fec 	stlex	ip, r2, [r0]
   322e6:	f1bc 0f00 	cmp.w	ip, #0
   322ea:	d1f6      	bne.n	322da <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   322ec:	d1f2      	bne.n	322d4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   322ee:	4802      	ldr	r0, [pc, #8]	; (322f8 <nrfx_flag32_free+0x34>)
}
   322f0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   322f2:	4802      	ldr	r0, [pc, #8]	; (322fc <nrfx_flag32_free+0x38>)
   322f4:	e7fc      	b.n	322f0 <nrfx_flag32_free+0x2c>
   322f6:	bf00      	nop
   322f8:	0bad0000 	.word	0x0bad0000
   322fc:	0bad0004 	.word	0x0bad0004

00032300 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   32300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   32302:	4604      	mov	r4, r0
   32304:	b168      	cbz	r0, 32322 <clock_stop+0x22>
   32306:	2801      	cmp	r0, #1
   32308:	d02e      	beq.n	32368 <clock_stop+0x68>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   3230a:	492c      	ldr	r1, [pc, #176]	; (323bc <clock_stop+0xbc>)
   3230c:	482c      	ldr	r0, [pc, #176]	; (323c0 <clock_stop+0xc0>)
   3230e:	22d8      	movs	r2, #216	; 0xd8
   32310:	f00a fca3 	bl	3cc5a <assert_print>
   32314:	21d8      	movs	r1, #216	; 0xd8
   32316:	4829      	ldr	r0, [pc, #164]	; (323bc <clock_stop+0xbc>)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   32318:	b003      	add	sp, #12
   3231a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
   3231e:	f00a bc95 	b.w	3cc4c <assert_post_action>
    p_reg->INTENCLR = mask;
   32322:	2202      	movs	r2, #2
   32324:	4b27      	ldr	r3, [pc, #156]	; (323c4 <clock_stop+0xc4>)
   32326:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3232a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   3232e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32332:	2201      	movs	r2, #1
   32334:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   32336:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   32338:	429c      	cmp	r4, r3
   3233a:	bf18      	it	ne
   3233c:	2500      	movne	r5, #0
   3233e:	f242 7710 	movw	r7, #10000	; 0x2710
   32342:	4e20      	ldr	r6, [pc, #128]	; (323c4 <clock_stop+0xc4>)
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   32344:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   32348:	bf08      	it	eq
   3234a:	f10d 0507 	addeq.w	r5, sp, #7
    switch (domain)
   3234e:	b1ac      	cbz	r4, 3237c <clock_stop+0x7c>
   32350:	2c01      	cmp	r4, #1
   32352:	d029      	beq.n	323a8 <clock_stop+0xa8>
            NRFX_ASSERT(0);
   32354:	491c      	ldr	r1, [pc, #112]	; (323c8 <clock_stop+0xc8>)
   32356:	481a      	ldr	r0, [pc, #104]	; (323c0 <clock_stop+0xc0>)
   32358:	f44f 724f 	mov.w	r2, #828	; 0x33c
   3235c:	f00a fc7d 	bl	3cc5a <assert_print>
   32360:	f44f 714f 	mov.w	r1, #828	; 0x33c
   32364:	4818      	ldr	r0, [pc, #96]	; (323c8 <clock_stop+0xc8>)
   32366:	e7d7      	b.n	32318 <clock_stop+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32368:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   3236a:	4b16      	ldr	r3, [pc, #88]	; (323c4 <clock_stop+0xc4>)
   3236c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32370:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   32374:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32378:	6058      	str	r0, [r3, #4]
}
   3237a:	e7dc      	b.n	32336 <clock_stop+0x36>
            if (p_clk_src != NULL)
   3237c:	b125      	cbz	r5, 32388 <clock_stop+0x88>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3237e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   32382:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   32386:	702b      	strb	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   32388:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3238c:	03db      	lsls	r3, r3, #15
   3238e:	d509      	bpl.n	323a4 <clock_stop+0xa4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   32390:	b11d      	cbz	r5, 3239a <clock_stop+0x9a>
   32392:	f89d 3007 	ldrb.w	r3, [sp, #7]
   32396:	2b01      	cmp	r3, #1
   32398:	d104      	bne.n	323a4 <clock_stop+0xa4>
   3239a:	2001      	movs	r0, #1
   3239c:	f00d fdf2 	bl	3ff84 <nrfx_busy_wait>
   323a0:	3f01      	subs	r7, #1
   323a2:	d1d4      	bne.n	3234e <clock_stop+0x4e>
}
   323a4:	b003      	add	sp, #12
   323a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
   323a8:	b125      	cbz	r5, 323b4 <clock_stop+0xb4>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   323aa:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   323ae:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   323b2:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   323b4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   323b8:	e7e8      	b.n	3238c <clock_stop+0x8c>
   323ba:	bf00      	nop
   323bc:	0004b9e7 	.word	0x0004b9e7
   323c0:	00044263 	.word	0x00044263
   323c4:	40005000 	.word	0x40005000
   323c8:	0004ba24 	.word	0x0004ba24

000323cc <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   323cc:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   323ce:	4604      	mov	r4, r0
   323d0:	b950      	cbnz	r0, 323e8 <nrfx_clock_init+0x1c>
   323d2:	490a      	ldr	r1, [pc, #40]	; (323fc <nrfx_clock_init+0x30>)
   323d4:	480a      	ldr	r0, [pc, #40]	; (32400 <nrfx_clock_init+0x34>)
   323d6:	f240 1215 	movw	r2, #277	; 0x115
   323da:	f00a fc3e 	bl	3cc5a <assert_print>
   323de:	f240 1115 	movw	r1, #277	; 0x115
   323e2:	4806      	ldr	r0, [pc, #24]	; (323fc <nrfx_clock_init+0x30>)
   323e4:	f00a fc32 	bl	3cc4c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   323e8:	4b06      	ldr	r3, [pc, #24]	; (32404 <nrfx_clock_init+0x38>)
   323ea:	791a      	ldrb	r2, [r3, #4]
   323ec:	b922      	cbnz	r2, 323f8 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   323ee:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   323f0:	4805      	ldr	r0, [pc, #20]	; (32408 <nrfx_clock_init+0x3c>)
        m_clock_cb.event_handler = event_handler;
   323f2:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   323f4:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   323f6:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   323f8:	4804      	ldr	r0, [pc, #16]	; (3240c <nrfx_clock_init+0x40>)
    return err_code;
   323fa:	e7fc      	b.n	323f6 <nrfx_clock_init+0x2a>
   323fc:	0004b9e7 	.word	0x0004b9e7
   32400:	00044263 	.word	0x00044263
   32404:	2001a420 	.word	0x2001a420
   32408:	0bad0000 	.word	0x0bad0000
   3240c:	0bad000c 	.word	0x0bad000c

00032410 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   32410:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32412:	4b0d      	ldr	r3, [pc, #52]	; (32448 <nrfx_clock_enable+0x38>)
   32414:	791b      	ldrb	r3, [r3, #4]
   32416:	b953      	cbnz	r3, 3242e <nrfx_clock_enable+0x1e>
   32418:	490c      	ldr	r1, [pc, #48]	; (3244c <nrfx_clock_enable+0x3c>)
   3241a:	480d      	ldr	r0, [pc, #52]	; (32450 <nrfx_clock_enable+0x40>)
   3241c:	f44f 7297 	mov.w	r2, #302	; 0x12e
   32420:	f00a fc1b 	bl	3cc5a <assert_print>
   32424:	f44f 7197 	mov.w	r1, #302	; 0x12e
   32428:	4808      	ldr	r0, [pc, #32]	; (3244c <nrfx_clock_enable+0x3c>)
   3242a:	f00a fc0f 	bl	3cc4c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3242e:	2005      	movs	r0, #5
   32430:	f7f0 fc40 	bl	22cb4 <arch_irq_is_enabled>
   32434:	b910      	cbnz	r0, 3243c <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   32436:	2005      	movs	r0, #5
   32438:	f7f0 fc18 	bl	22c6c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3243c:	2201      	movs	r2, #1
   3243e:	4b05      	ldr	r3, [pc, #20]	; (32454 <nrfx_clock_enable+0x44>)
   32440:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   32444:	bd08      	pop	{r3, pc}
   32446:	bf00      	nop
   32448:	2001a420 	.word	0x2001a420
   3244c:	0004b9e7 	.word	0x0004b9e7
   32450:	00044263 	.word	0x00044263
   32454:	40005000 	.word	0x40005000

00032458 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32458:	4b2c      	ldr	r3, [pc, #176]	; (3250c <nrfx_clock_start+0xb4>)
{
   3245a:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3245c:	791b      	ldrb	r3, [r3, #4]
{
   3245e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32460:	b953      	cbnz	r3, 32478 <nrfx_clock_start+0x20>
   32462:	492b      	ldr	r1, [pc, #172]	; (32510 <nrfx_clock_start+0xb8>)
   32464:	482b      	ldr	r0, [pc, #172]	; (32514 <nrfx_clock_start+0xbc>)
   32466:	f44f 72b4 	mov.w	r2, #360	; 0x168
   3246a:	f00a fbf6 	bl	3cc5a <assert_print>
   3246e:	f44f 71b4 	mov.w	r1, #360	; 0x168
   32472:	4827      	ldr	r0, [pc, #156]	; (32510 <nrfx_clock_start+0xb8>)
   32474:	f00a fbea 	bl	3cc4c <assert_post_action>
    switch (domain)
   32478:	b174      	cbz	r4, 32498 <nrfx_clock_start+0x40>
   3247a:	2c01      	cmp	r4, #1
   3247c:	d03b      	beq.n	324f6 <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   3247e:	4924      	ldr	r1, [pc, #144]	; (32510 <nrfx_clock_start+0xb8>)
   32480:	4824      	ldr	r0, [pc, #144]	; (32514 <nrfx_clock_start+0xbc>)
   32482:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
   32486:	f00a fbe8 	bl	3cc5a <assert_print>
            break;
    }
}
   3248a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   3248e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   32492:	481f      	ldr	r0, [pc, #124]	; (32510 <nrfx_clock_start+0xb8>)
   32494:	f00a bbda 	b.w	3cc4c <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   32498:	4a1f      	ldr	r2, [pc, #124]	; (32518 <nrfx_clock_start+0xc0>)
   3249a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3249e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   324a2:	03c9      	lsls	r1, r1, #15
   324a4:	d412      	bmi.n	324cc <nrfx_clock_start+0x74>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   324a6:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   324aa:	07db      	lsls	r3, r3, #31
   324ac:	d418      	bmi.n	324e0 <nrfx_clock_start+0x88>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   324ae:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   324b0:	4a19      	ldr	r2, [pc, #100]	; (32518 <nrfx_clock_start+0xc0>)
   324b2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   324b6:	2300      	movs	r3, #0
   324b8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   324bc:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   324c0:	2302      	movs	r3, #2
   324c2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   324c6:	2301      	movs	r3, #1
   324c8:	6093      	str	r3, [r2, #8]
}
   324ca:	bd10      	pop	{r4, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   324cc:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   324d0:	2b02      	cmp	r3, #2
   324d2:	d0ed      	beq.n	324b0 <nrfx_clock_start+0x58>
    if (!is_correct_clk)
   324d4:	2b01      	cmp	r3, #1
   324d6:	d0eb      	beq.n	324b0 <nrfx_clock_start+0x58>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   324d8:	2000      	movs	r0, #0
   324da:	f7ff ff11 	bl	32300 <clock_stop>
   324de:	e7e6      	b.n	324ae <nrfx_clock_start+0x56>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   324e0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   324e4:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
   324e8:	3b01      	subs	r3, #1
   324ea:	2b01      	cmp	r3, #1
   324ec:	d8f4      	bhi.n	324d8 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   324ee:	2302      	movs	r3, #2
   324f0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   324f4:	e7e9      	b.n	324ca <nrfx_clock_start+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   324f6:	2200      	movs	r2, #0
   324f8:	4b07      	ldr	r3, [pc, #28]	; (32518 <nrfx_clock_start+0xc0>)
   324fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   324fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   32502:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32506:	601c      	str	r4, [r3, #0]
}
   32508:	e7df      	b.n	324ca <nrfx_clock_start+0x72>
   3250a:	bf00      	nop
   3250c:	2001a420 	.word	0x2001a420
   32510:	0004b9e7 	.word	0x0004b9e7
   32514:	00044263 	.word	0x00044263
   32518:	40005000 	.word	0x40005000

0003251c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3251c:	4b0a      	ldr	r3, [pc, #40]	; (32548 <nrfx_clock_stop+0x2c>)
{
   3251e:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32520:	791b      	ldrb	r3, [r3, #4]
{
   32522:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32524:	b953      	cbnz	r3, 3253c <nrfx_clock_stop+0x20>
   32526:	4909      	ldr	r1, [pc, #36]	; (3254c <nrfx_clock_stop+0x30>)
   32528:	4809      	ldr	r0, [pc, #36]	; (32550 <nrfx_clock_stop+0x34>)
   3252a:	f240 12ad 	movw	r2, #429	; 0x1ad
   3252e:	f00a fb94 	bl	3cc5a <assert_print>
   32532:	f240 11ad 	movw	r1, #429	; 0x1ad
   32536:	4805      	ldr	r0, [pc, #20]	; (3254c <nrfx_clock_stop+0x30>)
   32538:	f00a fb88 	bl	3cc4c <assert_post_action>
    clock_stop(domain);
   3253c:	4620      	mov	r0, r4
}
   3253e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
   32542:	f7ff bedd 	b.w	32300 <clock_stop>
   32546:	bf00      	nop
   32548:	2001a420 	.word	0x2001a420
   3254c:	0004b9e7 	.word	0x0004b9e7
   32550:	00044263 	.word	0x00044263

00032554 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   32554:	4b17      	ldr	r3, [pc, #92]	; (325b4 <nrfx_power_clock_irq_handler+0x60>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   32556:	b510      	push	{r4, lr}
   32558:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   3255c:	b152      	cbz	r2, 32574 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3255e:	2000      	movs	r0, #0
   32560:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   32564:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   32568:	2201      	movs	r2, #1
   3256a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   3256e:	4b12      	ldr	r3, [pc, #72]	; (325b8 <nrfx_power_clock_irq_handler+0x64>)
   32570:	681b      	ldr	r3, [r3, #0]
   32572:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   32574:	4b0f      	ldr	r3, [pc, #60]	; (325b4 <nrfx_power_clock_irq_handler+0x60>)
   32576:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   3257a:	b18a      	cbz	r2, 325a0 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3257c:	2200      	movs	r2, #0
   3257e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   32582:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   32586:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3258a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   3258e:	f002 0203 	and.w	r2, r2, #3
   32592:	2a01      	cmp	r2, #1
   32594:	f04f 0102 	mov.w	r1, #2
   32598:	d103      	bne.n	325a2 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3259a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3259e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   325a0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   325a2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   325a6:	4b04      	ldr	r3, [pc, #16]	; (325b8 <nrfx_power_clock_irq_handler+0x64>)
   325a8:	2001      	movs	r0, #1
}
   325aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   325ae:	681b      	ldr	r3, [r3, #0]
   325b0:	4718      	bx	r3
   325b2:	bf00      	nop
   325b4:	40005000 	.word	0x40005000
   325b8:	2001a420 	.word	0x2001a420

000325bc <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   325bc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   325be:	4801      	ldr	r0, [pc, #4]	; (325c4 <nrfx_dppi_channel_alloc+0x8>)
   325c0:	f7ff be5e 	b.w	32280 <nrfx_flag32_alloc>
   325c4:	20014700 	.word	0x20014700

000325c8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   325c8:	4b03      	ldr	r3, [pc, #12]	; (325d8 <pin_in_use_by_te+0x10>)
   325ca:	3008      	adds	r0, #8
   325cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   325d0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   325d4:	4770      	bx	lr
   325d6:	bf00      	nop
   325d8:	20014704 	.word	0x20014704

000325dc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   325dc:	4b04      	ldr	r3, [pc, #16]	; (325f0 <pin_has_trigger+0x14>)
   325de:	3008      	adds	r0, #8
   325e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   325e4:	f010 001c 	ands.w	r0, r0, #28
   325e8:	bf18      	it	ne
   325ea:	2001      	movne	r0, #1
   325ec:	4770      	bx	lr
   325ee:	bf00      	nop
   325f0:	20014704 	.word	0x20014704

000325f4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   325f4:	4b03      	ldr	r3, [pc, #12]	; (32604 <pin_is_output+0x10>)
   325f6:	3008      	adds	r0, #8
   325f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   325fc:	f3c0 0040 	ubfx	r0, r0, #1, #1
   32600:	4770      	bx	lr
   32602:	bf00      	nop
   32604:	20014704 	.word	0x20014704

00032608 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   32608:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3260a:	4c0d      	ldr	r4, [pc, #52]	; (32640 <call_handler+0x38>)
   3260c:	f100 0308 	add.w	r3, r0, #8
   32610:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   32614:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   32616:	05da      	lsls	r2, r3, #23
{
   32618:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3261a:	d507      	bpl.n	3262c <call_handler+0x24>
   3261c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   32620:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   32624:	6852      	ldr	r2, [r2, #4]
   32626:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   3262a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   3262c:	68a3      	ldr	r3, [r4, #8]
   3262e:	b12b      	cbz	r3, 3263c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   32630:	4631      	mov	r1, r6
   32632:	4628      	mov	r0, r5
   32634:	68e2      	ldr	r2, [r4, #12]
    }
}
   32636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   3263a:	4718      	bx	r3
}
   3263c:	bd70      	pop	{r4, r5, r6, pc}
   3263e:	bf00      	nop
   32640:	20014704 	.word	0x20014704

00032644 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   32644:	4a19      	ldr	r2, [pc, #100]	; (326ac <release_handler+0x68>)
   32646:	3008      	adds	r0, #8
   32648:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
   3264c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3264e:	05d9      	lsls	r1, r3, #23
   32650:	d51d      	bpl.n	3268e <release_handler+0x4a>
   32652:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   32656:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3265a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3265e:	2000      	movs	r0, #0
   32660:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   32664:	f834 3b02 	ldrh.w	r3, [r4], #2
   32668:	f413 7f80 	tst.w	r3, #256	; 0x100
   3266c:	d003      	beq.n	32676 <release_handler+0x32>
   3266e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   32672:	4299      	cmp	r1, r3
   32674:	d00b      	beq.n	3268e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   32676:	3001      	adds	r0, #1
   32678:	2820      	cmp	r0, #32
   3267a:	d1f3      	bne.n	32664 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   3267c:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3267e:	480c      	ldr	r0, [pc, #48]	; (326b0 <release_handler+0x6c>)
        m_cb.handlers[handler_id].handler = NULL;
   32680:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   32684:	f7ff fe1e 	bl	322c4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   32688:	4b0a      	ldr	r3, [pc, #40]	; (326b4 <release_handler+0x70>)
   3268a:	4298      	cmp	r0, r3
   3268c:	d100      	bne.n	32690 <release_handler+0x4c>
}
   3268e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   32690:	4909      	ldr	r1, [pc, #36]	; (326b8 <release_handler+0x74>)
   32692:	480a      	ldr	r0, [pc, #40]	; (326bc <release_handler+0x78>)
   32694:	f44f 7299 	mov.w	r2, #306	; 0x132
   32698:	f00a fadf 	bl	3cc5a <assert_print>
}
   3269c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   326a0:	f44f 7199 	mov.w	r1, #306	; 0x132
   326a4:	4804      	ldr	r0, [pc, #16]	; (326b8 <release_handler+0x74>)
   326a6:	f00a bad1 	b.w	3cc4c <assert_post_action>
   326aa:	bf00      	nop
   326ac:	20014704 	.word	0x20014704
   326b0:	20014758 	.word	0x20014758
   326b4:	0bad0000 	.word	0x0bad0000
   326b8:	0004ba58 	.word	0x0004ba58
   326bc:	00044263 	.word	0x00044263

000326c0 <pin_handler_trigger_uninit>:
{
   326c0:	b538      	push	{r3, r4, r5, lr}
   326c2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   326c4:	f7ff ff80 	bl	325c8 <pin_in_use_by_te>
   326c8:	4c0b      	ldr	r4, [pc, #44]	; (326f8 <pin_handler_trigger_uninit+0x38>)
   326ca:	f102 0508 	add.w	r5, r2, #8
   326ce:	b160      	cbz	r0, 326ea <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   326d0:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   326d2:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   326d6:	0b5b      	lsrs	r3, r3, #13
   326d8:	009b      	lsls	r3, r3, #2
   326da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   326de:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   326e2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   326e6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   326ea:	4610      	mov	r0, r2
   326ec:	f7ff ffaa 	bl	32644 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   326f0:	2300      	movs	r3, #0
   326f2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   326f6:	bd38      	pop	{r3, r4, r5, pc}
   326f8:	20014704 	.word	0x20014704

000326fc <nrf_gpio_pin_port_decode>:
{
   326fc:	b510      	push	{r4, lr}
   326fe:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   32700:	6800      	ldr	r0, [r0, #0]
   32702:	f00d fc41 	bl	3ff88 <nrf_gpio_pin_present_check>
   32706:	b950      	cbnz	r0, 3271e <nrf_gpio_pin_port_decode+0x22>
   32708:	490e      	ldr	r1, [pc, #56]	; (32744 <nrf_gpio_pin_port_decode+0x48>)
   3270a:	480f      	ldr	r0, [pc, #60]	; (32748 <nrf_gpio_pin_port_decode+0x4c>)
   3270c:	f240 2229 	movw	r2, #553	; 0x229
   32710:	f00a faa3 	bl	3cc5a <assert_print>
   32714:	f240 2129 	movw	r1, #553	; 0x229
   32718:	480a      	ldr	r0, [pc, #40]	; (32744 <nrf_gpio_pin_port_decode+0x48>)
   3271a:	f00a fa97 	bl	3cc4c <assert_post_action>
    uint32_t pin_number = *p_pin;
   3271e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   32720:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   32724:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   32726:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   32728:	d00a      	beq.n	32740 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   3272a:	4906      	ldr	r1, [pc, #24]	; (32744 <nrf_gpio_pin_port_decode+0x48>)
   3272c:	4806      	ldr	r0, [pc, #24]	; (32748 <nrf_gpio_pin_port_decode+0x4c>)
   3272e:	f240 222e 	movw	r2, #558	; 0x22e
   32732:	f00a fa92 	bl	3cc5a <assert_print>
   32736:	f240 212e 	movw	r1, #558	; 0x22e
   3273a:	4802      	ldr	r0, [pc, #8]	; (32744 <nrf_gpio_pin_port_decode+0x48>)
   3273c:	f00a fa86 	bl	3cc4c <assert_post_action>
}
   32740:	4802      	ldr	r0, [pc, #8]	; (3274c <nrf_gpio_pin_port_decode+0x50>)
   32742:	bd10      	pop	{r4, pc}
   32744:	00044e46 	.word	0x00044e46
   32748:	00044263 	.word	0x00044263
   3274c:	40842500 	.word	0x40842500

00032750 <nrfx_gpiote_input_configure>:
{
   32750:	b5f0      	push	{r4, r5, r6, r7, lr}
   32752:	4604      	mov	r4, r0
   32754:	4617      	mov	r7, r2
   32756:	461d      	mov	r5, r3
   32758:	b085      	sub	sp, #20
    if (p_input_config)
   3275a:	b1f1      	cbz	r1, 3279a <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   3275c:	f00d fc20 	bl	3ffa0 <pin_is_task_output>
   32760:	b110      	cbz	r0, 32768 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   32762:	484d      	ldr	r0, [pc, #308]	; (32898 <nrfx_gpiote_input_configure+0x148>)
}
   32764:	b005      	add	sp, #20
   32766:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   32768:	460b      	mov	r3, r1
   3276a:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   3276e:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   32772:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   32776:	f10d 020f 	add.w	r2, sp, #15
   3277a:	f10d 010e 	add.w	r1, sp, #14
   3277e:	4620      	mov	r0, r4
   32780:	f00d fc1d 	bl	3ffbe <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   32784:	4a45      	ldr	r2, [pc, #276]	; (3289c <nrfx_gpiote_input_configure+0x14c>)
   32786:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   3278a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   3278e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   32792:	f043 0301 	orr.w	r3, r3, #1
   32796:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   3279a:	b197      	cbz	r7, 327c2 <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
   3279c:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   3279e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   327a0:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   327a2:	f7ff ff27 	bl	325f4 <pin_is_output>
   327a6:	b180      	cbz	r0, 327ca <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
   327a8:	2a00      	cmp	r2, #0
   327aa:	d1da      	bne.n	32762 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   327ac:	4a3b      	ldr	r2, [pc, #236]	; (3289c <nrfx_gpiote_input_configure+0x14c>)
   327ae:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   327b2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   327b6:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   327ba:	ea43 0686 	orr.w	r6, r3, r6, lsl #2
   327be:	f822 6011 	strh.w	r6, [r2, r1, lsl #1]
    if (p_handler_config)
   327c2:	2d00      	cmp	r5, #0
   327c4:	d13e      	bne.n	32844 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   327c6:	4836      	ldr	r0, [pc, #216]	; (328a0 <nrfx_gpiote_input_configure+0x150>)
   327c8:	e7cc      	b.n	32764 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   327ca:	4834      	ldr	r0, [pc, #208]	; (3289c <nrfx_gpiote_input_configure+0x14c>)
   327cc:	f104 0708 	add.w	r7, r4, #8
   327d0:	f830 1017 	ldrh.w	r1, [r0, r7, lsl #1]
   327d4:	f021 0120 	bic.w	r1, r1, #32
   327d8:	04c9      	lsls	r1, r1, #19
   327da:	0cc9      	lsrs	r1, r1, #19
   327dc:	f820 1017 	strh.w	r1, [r0, r7, lsl #1]
            if (use_evt)
   327e0:	2a00      	cmp	r2, #0
   327e2:	d0e3      	beq.n	327ac <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
   327e4:	2e03      	cmp	r6, #3
   327e6:	d8bc      	bhi.n	32762 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   327e8:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   327ec:	4662      	mov	r2, ip
   327ee:	0092      	lsls	r2, r2, #2
   327f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   327f4:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   327f8:	b926      	cbnz	r6, 32804 <nrfx_gpiote_input_configure+0xb4>
    p_reg->CONFIG[idx] = 0;
   327fa:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   327fe:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
#endif
}
   32802:	e7d3      	b.n	327ac <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   32804:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   32808:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   3280c:	f023 0303 	bic.w	r3, r3, #3
   32810:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   32814:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   32818:	f041 0120 	orr.w	r1, r1, #32
   3281c:	f423 3347 	bic.w	r3, r3, #203776	; 0x31c00
   32820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   32824:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32828:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   3282c:	0223      	lsls	r3, r4, #8
   3282e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   32832:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   32836:	ea43 030e 	orr.w	r3, r3, lr
   3283a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   3283e:	f820 1017 	strh.w	r1, [r0, r7, lsl #1]
   32842:	e7b3      	b.n	327ac <nrfx_gpiote_input_configure+0x5c>
    release_handler(pin);
   32844:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   32846:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   3284a:	f7ff fefb 	bl	32644 <release_handler>
    if (!handler)
   3284e:	2e00      	cmp	r6, #0
   32850:	d0b9      	beq.n	327c6 <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   32852:	4d12      	ldr	r5, [pc, #72]	; (3289c <nrfx_gpiote_input_configure+0x14c>)
   32854:	682b      	ldr	r3, [r5, #0]
   32856:	429e      	cmp	r6, r3
   32858:	d104      	bne.n	32864 <nrfx_gpiote_input_configure+0x114>
   3285a:	686b      	ldr	r3, [r5, #4]
   3285c:	429f      	cmp	r7, r3
   3285e:	d101      	bne.n	32864 <nrfx_gpiote_input_configure+0x114>
   32860:	2200      	movs	r2, #0
   32862:	e00a      	b.n	3287a <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   32864:	480f      	ldr	r0, [pc, #60]	; (328a4 <nrfx_gpiote_input_configure+0x154>)
   32866:	f10d 010f 	add.w	r1, sp, #15
   3286a:	f7ff fd09 	bl	32280 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   3286e:	4b0c      	ldr	r3, [pc, #48]	; (328a0 <nrfx_gpiote_input_configure+0x150>)
   32870:	4298      	cmp	r0, r3
   32872:	f47f af77 	bne.w	32764 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   32876:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   3287a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3287e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   32880:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   32882:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   32886:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3288a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   3288e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   32892:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   32896:	e796      	b.n	327c6 <nrfx_gpiote_input_configure+0x76>
   32898:	0bad0004 	.word	0x0bad0004
   3289c:	20014704 	.word	0x20014704
   328a0:	0bad0000 	.word	0x0bad0000
   328a4:	20014758 	.word	0x20014758

000328a8 <nrfx_gpiote_output_configure>:
{
   328a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   328aa:	4604      	mov	r4, r0
   328ac:	4615      	mov	r5, r2
   328ae:	b085      	sub	sp, #20
    if (p_config)
   328b0:	b321      	cbz	r1, 328fc <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   328b2:	f7ff fe9f 	bl	325f4 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   328b6:	b920      	cbnz	r0, 328c2 <nrfx_gpiote_output_configure+0x1a>
   328b8:	4620      	mov	r0, r4
   328ba:	f7ff fe85 	bl	325c8 <pin_in_use_by_te>
   328be:	2800      	cmp	r0, #0
   328c0:	d161      	bne.n	32986 <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   328c2:	4620      	mov	r0, r4
   328c4:	f7ff fe8a 	bl	325dc <pin_has_trigger>
   328c8:	b110      	cbz	r0, 328d0 <nrfx_gpiote_output_configure+0x28>
   328ca:	784b      	ldrb	r3, [r1, #1]
   328cc:	2b01      	cmp	r3, #1
   328ce:	d05a      	beq.n	32986 <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   328d0:	2301      	movs	r3, #1
   328d2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   328d6:	2300      	movs	r3, #0
   328d8:	1c4a      	adds	r2, r1, #1
   328da:	e9cd 1300 	strd	r1, r3, [sp]
   328de:	4620      	mov	r0, r4
   328e0:	1c8b      	adds	r3, r1, #2
   328e2:	f10d 010f 	add.w	r1, sp, #15
   328e6:	f00d fb6a 	bl	3ffbe <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   328ea:	4a28      	ldr	r2, [pc, #160]	; (3298c <nrfx_gpiote_output_configure+0xe4>)
   328ec:	f104 0108 	add.w	r1, r4, #8
   328f0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   328f4:	f043 0303 	orr.w	r3, r3, #3
   328f8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   328fc:	b915      	cbnz	r5, 32904 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   328fe:	4824      	ldr	r0, [pc, #144]	; (32990 <nrfx_gpiote_output_configure+0xe8>)
}
   32900:	b005      	add	sp, #20
   32902:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   32904:	4620      	mov	r0, r4
   32906:	f7ff fe75 	bl	325f4 <pin_is_output>
        if (pin_is_input(pin))
   3290a:	2800      	cmp	r0, #0
   3290c:	d03b      	beq.n	32986 <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   3290e:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   32912:	2300      	movs	r3, #0
   32914:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   32916:	4e1d      	ldr	r6, [pc, #116]	; (3298c <nrfx_gpiote_output_configure+0xe4>)
   32918:	f104 0708 	add.w	r7, r4, #8
   3291c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   32920:	0089      	lsls	r1, r1, #2
   32922:	f020 0020 	bic.w	r0, r0, #32
   32926:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   3292a:	04c0      	lsls	r0, r0, #19
   3292c:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   32930:	0cc0      	lsrs	r0, r0, #19
   32932:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   32936:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   3293a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   3293e:	786a      	ldrb	r2, [r5, #1]
   32940:	2a00      	cmp	r2, #0
   32942:	d0dc      	beq.n	328fe <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   32944:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   32948:	78ad      	ldrb	r5, [r5, #2]
   3294a:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   3294e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   32952:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32956:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   3295a:	0223      	lsls	r3, r4, #8
   3295c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   32960:	0412      	lsls	r2, r2, #16
   32962:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32966:	ea43 030e 	orr.w	r3, r3, lr
   3296a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   3296c:	052a      	lsls	r2, r5, #20
   3296e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   32972:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32976:	4313      	orrs	r3, r2
   32978:	f040 0020 	orr.w	r0, r0, #32
   3297c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   32980:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   32984:	e7bb      	b.n	328fe <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
   32986:	4803      	ldr	r0, [pc, #12]	; (32994 <nrfx_gpiote_output_configure+0xec>)
   32988:	e7ba      	b.n	32900 <nrfx_gpiote_output_configure+0x58>
   3298a:	bf00      	nop
   3298c:	20014704 	.word	0x20014704
   32990:	0bad0000 	.word	0x0bad0000
   32994:	0bad0004 	.word	0x0bad0004

00032998 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   32998:	4b01      	ldr	r3, [pc, #4]	; (329a0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   3299a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   3299e:	4770      	bx	lr
   329a0:	20014704 	.word	0x20014704

000329a4 <nrfx_gpiote_channel_get>:
{
   329a4:	b538      	push	{r3, r4, r5, lr}
   329a6:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   329a8:	460d      	mov	r5, r1
   329aa:	b951      	cbnz	r1, 329c2 <nrfx_gpiote_channel_get+0x1e>
   329ac:	490c      	ldr	r1, [pc, #48]	; (329e0 <nrfx_gpiote_channel_get+0x3c>)
   329ae:	480d      	ldr	r0, [pc, #52]	; (329e4 <nrfx_gpiote_channel_get+0x40>)
   329b0:	f240 2235 	movw	r2, #565	; 0x235
   329b4:	f00a f951 	bl	3cc5a <assert_print>
   329b8:	f240 2135 	movw	r1, #565	; 0x235
   329bc:	4808      	ldr	r0, [pc, #32]	; (329e0 <nrfx_gpiote_channel_get+0x3c>)
   329be:	f00a f945 	bl	3cc4c <assert_post_action>
    if (pin_in_use_by_te(pin))
   329c2:	4620      	mov	r0, r4
   329c4:	f7ff fe00 	bl	325c8 <pin_in_use_by_te>
   329c8:	b138      	cbz	r0, 329da <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   329ca:	4b07      	ldr	r3, [pc, #28]	; (329e8 <nrfx_gpiote_channel_get+0x44>)
   329cc:	3408      	adds	r4, #8
   329ce:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
        return NRFX_SUCCESS;
   329d2:	4806      	ldr	r0, [pc, #24]	; (329ec <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   329d4:	0b5b      	lsrs	r3, r3, #13
   329d6:	702b      	strb	r3, [r5, #0]
}
   329d8:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   329da:	4805      	ldr	r0, [pc, #20]	; (329f0 <nrfx_gpiote_channel_get+0x4c>)
   329dc:	e7fc      	b.n	329d8 <nrfx_gpiote_channel_get+0x34>
   329de:	bf00      	nop
   329e0:	0004ba58 	.word	0x0004ba58
   329e4:	00044263 	.word	0x00044263
   329e8:	20014704 	.word	0x20014704
   329ec:	0bad0000 	.word	0x0bad0000
   329f0:	0bad0004 	.word	0x0bad0004

000329f4 <nrfx_gpiote_init>:
{
   329f4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   329f6:	4c0f      	ldr	r4, [pc, #60]	; (32a34 <nrfx_gpiote_init+0x40>)
   329f8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   329fc:	b9bd      	cbnz	r5, 32a2e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   329fe:	2240      	movs	r2, #64	; 0x40
   32a00:	4629      	mov	r1, r5
   32a02:	f104 0010 	add.w	r0, r4, #16
   32a06:	f00e fdfc 	bl	41602 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   32a0a:	2031      	movs	r0, #49	; 0x31
   32a0c:	f7f0 f92e 	bl	22c6c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32a10:	4b09      	ldr	r3, [pc, #36]	; (32a38 <nrfx_gpiote_init+0x44>)
    return err_code;
   32a12:	480a      	ldr	r0, [pc, #40]	; (32a3c <nrfx_gpiote_init+0x48>)
   32a14:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   32a18:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   32a1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   32a20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   32a24:	2301      	movs	r3, #1
   32a26:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   32a2a:	6563      	str	r3, [r4, #84]	; 0x54
}
   32a2c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   32a2e:	4804      	ldr	r0, [pc, #16]	; (32a40 <nrfx_gpiote_init+0x4c>)
   32a30:	e7fc      	b.n	32a2c <nrfx_gpiote_init+0x38>
   32a32:	bf00      	nop
   32a34:	20014704 	.word	0x20014704
   32a38:	40031000 	.word	0x40031000
   32a3c:	0bad0000 	.word	0x0bad0000
   32a40:	0bad0005 	.word	0x0bad0005

00032a44 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   32a44:	4b03      	ldr	r3, [pc, #12]	; (32a54 <nrfx_gpiote_is_init+0x10>)
   32a46:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   32a4a:	3800      	subs	r0, #0
   32a4c:	bf18      	it	ne
   32a4e:	2001      	movne	r0, #1
   32a50:	4770      	bx	lr
   32a52:	bf00      	nop
   32a54:	20014704 	.word	0x20014704

00032a58 <nrfx_gpiote_channel_free>:
{
   32a58:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   32a5a:	4801      	ldr	r0, [pc, #4]	; (32a60 <nrfx_gpiote_channel_free+0x8>)
   32a5c:	f7ff bc32 	b.w	322c4 <nrfx_flag32_free>
   32a60:	20014754 	.word	0x20014754

00032a64 <nrfx_gpiote_channel_alloc>:
{
   32a64:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   32a66:	4801      	ldr	r0, [pc, #4]	; (32a6c <nrfx_gpiote_channel_alloc+0x8>)
   32a68:	f7ff bc0a 	b.w	32280 <nrfx_flag32_alloc>
   32a6c:	20014754 	.word	0x20014754

00032a70 <nrfx_gpiote_trigger_enable>:
{
   32a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   32a72:	4604      	mov	r4, r0
   32a74:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   32a76:	f7ff fdb1 	bl	325dc <pin_has_trigger>
   32a7a:	b950      	cbnz	r0, 32a92 <nrfx_gpiote_trigger_enable+0x22>
   32a7c:	492e      	ldr	r1, [pc, #184]	; (32b38 <nrfx_gpiote_trigger_enable+0xc8>)
   32a7e:	482f      	ldr	r0, [pc, #188]	; (32b3c <nrfx_gpiote_trigger_enable+0xcc>)
   32a80:	f240 32df 	movw	r2, #991	; 0x3df
   32a84:	f00a f8e9 	bl	3cc5a <assert_print>
   32a88:	f240 31df 	movw	r1, #991	; 0x3df
   32a8c:	482a      	ldr	r0, [pc, #168]	; (32b38 <nrfx_gpiote_trigger_enable+0xc8>)
   32a8e:	f00a f8dd 	bl	3cc4c <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   32a92:	4620      	mov	r0, r4
   32a94:	f7ff fd98 	bl	325c8 <pin_in_use_by_te>
   32a98:	4e29      	ldr	r6, [pc, #164]	; (32b40 <nrfx_gpiote_trigger_enable+0xd0>)
   32a9a:	f104 0708 	add.w	r7, r4, #8
   32a9e:	b318      	cbz	r0, 32ae8 <nrfx_gpiote_trigger_enable+0x78>
    return !pin_is_output(pin);
   32aa0:	4620      	mov	r0, r4
   32aa2:	f7ff fda7 	bl	325f4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   32aa6:	4602      	mov	r2, r0
   32aa8:	b9f0      	cbnz	r0, 32ae8 <nrfx_gpiote_trigger_enable+0x78>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32aaa:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   32aae:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   32ab0:	4608      	mov	r0, r1
   32ab2:	f00d fa80 	bl	3ffb6 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   32ab6:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   32aba:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32abe:	601a      	str	r2, [r3, #0]
   32ac0:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   32ac2:	008b      	lsls	r3, r1, #2
   32ac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   32ac8:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   32acc:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   32ad0:	f042 0201 	orr.w	r2, r2, #1
   32ad4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   32ad8:	b125      	cbz	r5, 32ae4 <nrfx_gpiote_trigger_enable+0x74>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   32ada:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   32adc:	4a19      	ldr	r2, [pc, #100]	; (32b44 <nrfx_gpiote_trigger_enable+0xd4>)
   32ade:	408b      	lsls	r3, r1
   32ae0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   32ae4:	b003      	add	sp, #12
   32ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   32ae8:	b955      	cbnz	r5, 32b00 <nrfx_gpiote_trigger_enable+0x90>
   32aea:	4913      	ldr	r1, [pc, #76]	; (32b38 <nrfx_gpiote_trigger_enable+0xc8>)
   32aec:	4813      	ldr	r0, [pc, #76]	; (32b3c <nrfx_gpiote_trigger_enable+0xcc>)
   32aee:	f240 32ee 	movw	r2, #1006	; 0x3ee
   32af2:	f00a f8b2 	bl	3cc5a <assert_print>
   32af6:	f240 31ee 	movw	r1, #1006	; 0x3ee
   32afa:	480f      	ldr	r0, [pc, #60]	; (32b38 <nrfx_gpiote_trigger_enable+0xc8>)
   32afc:	f00a f8a6 	bl	3cc4c <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   32b00:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   32b04:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   32b08:	2b04      	cmp	r3, #4
   32b0a:	d011      	beq.n	32b30 <nrfx_gpiote_trigger_enable+0xc0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   32b0c:	2b05      	cmp	r3, #5
   32b0e:	d011      	beq.n	32b34 <nrfx_gpiote_trigger_enable+0xc4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32b10:	a801      	add	r0, sp, #4
   32b12:	9401      	str	r4, [sp, #4]
   32b14:	f7ff fdf2 	bl	326fc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   32b18:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   32b1a:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   32b1c:	40d9      	lsrs	r1, r3
   32b1e:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   32b22:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   32b24:	4620      	mov	r0, r4
}
   32b26:	b003      	add	sp, #12
   32b28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   32b2c:	f00d ba92 	b.w	40054 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   32b30:	2103      	movs	r1, #3
   32b32:	e7f7      	b.n	32b24 <nrfx_gpiote_trigger_enable+0xb4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   32b34:	2102      	movs	r1, #2
   32b36:	e7f5      	b.n	32b24 <nrfx_gpiote_trigger_enable+0xb4>
   32b38:	0004ba58 	.word	0x0004ba58
   32b3c:	00044263 	.word	0x00044263
   32b40:	20014704 	.word	0x20014704
   32b44:	40031000 	.word	0x40031000

00032b48 <nrfx_gpiote_trigger_disable>:
{
   32b48:	b508      	push	{r3, lr}
   32b4a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   32b4c:	f7ff fd3c 	bl	325c8 <pin_in_use_by_te>
   32b50:	b1c8      	cbz	r0, 32b86 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   32b52:	4610      	mov	r0, r2
   32b54:	f7ff fd4e 	bl	325f4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   32b58:	b9a8      	cbnz	r0, 32b86 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32b5a:	4b0e      	ldr	r3, [pc, #56]	; (32b94 <nrfx_gpiote_trigger_disable+0x4c>)
   32b5c:	3208      	adds	r2, #8
   32b5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   32b62:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32b64:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   32b66:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   32b68:	490b      	ldr	r1, [pc, #44]	; (32b98 <nrfx_gpiote_trigger_disable+0x50>)
   32b6a:	009b      	lsls	r3, r3, #2
   32b6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   32b70:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   32b74:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   32b78:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   32b7c:	f022 0203 	bic.w	r2, r2, #3
   32b80:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   32b84:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   32b86:	2100      	movs	r1, #0
}
   32b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   32b8c:	4610      	mov	r0, r2
   32b8e:	f00d ba61 	b.w	40054 <nrf_gpio_cfg_sense_set>
   32b92:	bf00      	nop
   32b94:	20014704 	.word	0x20014704
   32b98:	40031000 	.word	0x40031000

00032b9c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   32b9c:	4b0d      	ldr	r3, [pc, #52]	; (32bd4 <nrfx_gpiote_pin_uninit+0x38>)
   32b9e:	f100 0208 	add.w	r2, r0, #8
   32ba2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   32ba6:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
   32ba8:	07db      	lsls	r3, r3, #31
{
   32baa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   32bac:	d510      	bpl.n	32bd0 <nrfx_gpiote_pin_uninit+0x34>
    nrfx_gpiote_trigger_disable(pin);
   32bae:	f7ff ffcb 	bl	32b48 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   32bb2:	4620      	mov	r0, r4
   32bb4:	f7ff fd84 	bl	326c0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32bb8:	a801      	add	r0, sp, #4
   32bba:	9401      	str	r4, [sp, #4]
   32bbc:	f7ff fd9e 	bl	326fc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   32bc0:	2202      	movs	r2, #2
   32bc2:	9b01      	ldr	r3, [sp, #4]
   32bc4:	3380      	adds	r3, #128	; 0x80
   32bc6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   32bca:	4803      	ldr	r0, [pc, #12]	; (32bd8 <nrfx_gpiote_pin_uninit+0x3c>)
}
   32bcc:	b002      	add	sp, #8
   32bce:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   32bd0:	4802      	ldr	r0, [pc, #8]	; (32bdc <nrfx_gpiote_pin_uninit+0x40>)
   32bd2:	e7fb      	b.n	32bcc <nrfx_gpiote_pin_uninit+0x30>
   32bd4:	20014704 	.word	0x20014704
   32bd8:	0bad0000 	.word	0x0bad0000
   32bdc:	0bad0004 	.word	0x0bad0004

00032be0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   32be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   32be4:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   32be6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32be8:	4634      	mov	r4, r6
{
   32bea:	4b53      	ldr	r3, [pc, #332]	; (32d38 <nrfx_gpiote_irq_handler+0x158>)
    return p_reg->INTENSET & mask;
   32bec:	4853      	ldr	r0, [pc, #332]	; (32d3c <nrfx_gpiote_irq_handler+0x15c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   32bee:	4954      	ldr	r1, [pc, #336]	; (32d40 <nrfx_gpiote_irq_handler+0x160>)
{
   32bf0:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32bf2:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   32bf4:	b135      	cbz	r5, 32c04 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   32bf6:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   32bfa:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32bfc:	bf1e      	ittt	ne
   32bfe:	601c      	strne	r4, [r3, #0]
   32c00:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   32c02:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   32c04:	3304      	adds	r3, #4
   32c06:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   32c08:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   32c0c:	d1f1      	bne.n	32bf2 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32c0e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 32d3c <nrfx_gpiote_irq_handler+0x15c>
   32c12:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   32c16:	b183      	cbz	r3, 32c3a <nrfx_gpiote_irq_handler+0x5a>
        *p_masks = gpio_regs[i]->LATCH;
   32c18:	4f4a      	ldr	r7, [pc, #296]	; (32d44 <nrfx_gpiote_irq_handler+0x164>)
   32c1a:	6a3b      	ldr	r3, [r7, #32]
   32c1c:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   32c1e:	623b      	str	r3, [r7, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   32c20:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   32c24:	9c02      	ldr	r4, [sp, #8]
   32c26:	b954      	cbnz	r4, 32c3e <nrfx_gpiote_irq_handler+0x5e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32c28:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   32c2c:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   32c30:	6a3b      	ldr	r3, [r7, #32]
   32c32:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   32c34:	623b      	str	r3, [r7, #32]
        if (latch[port_idx])
   32c36:	2b00      	cmp	r3, #0
   32c38:	d1f2      	bne.n	32c20 <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
   32c3a:	2401      	movs	r4, #1
   32c3c:	e076      	b.n	32d2c <nrfx_gpiote_irq_handler+0x14c>
                uint32_t pin = NRF_CTZ(latch[i]);
   32c3e:	fa94 f4a4 	rbit	r4, r4
   32c42:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   32c46:	4a40      	ldr	r2, [pc, #256]	; (32d48 <nrfx_gpiote_irq_handler+0x168>)
   32c48:	f104 0308 	add.w	r3, r4, #8
   32c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   32c50:	08e5      	lsrs	r5, r4, #3
   32c52:	089a      	lsrs	r2, r3, #2
   32c54:	f3c3 0b82 	ubfx	fp, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
   32c58:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   32c5c:	ab02      	add	r3, sp, #8
   32c5e:	fa09 f001 	lsl.w	r0, r9, r1
   32c62:	5d59      	ldrb	r1, [r3, r5]
   32c64:	9201      	str	r2, [sp, #4]
   32c66:	ea21 0100 	bic.w	r1, r1, r0
   32c6a:	5559      	strb	r1, [r3, r5]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32c6c:	a803      	add	r0, sp, #12
   32c6e:	9403      	str	r4, [sp, #12]
   32c70:	f7ff fd44 	bl	326fc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   32c74:	9903      	ldr	r1, [sp, #12]
    if (is_level(trigger))
   32c76:	9a01      	ldr	r2, [sp, #4]
   32c78:	3180      	adds	r1, #128	; 0x80
   32c7a:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   32c7e:	0753      	lsls	r3, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   32c80:	46da      	mov	sl, fp
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   32c82:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   32c86:	d521      	bpl.n	32ccc <nrfx_gpiote_irq_handler+0xec>
        call_handler(pin, trigger);
   32c88:	4659      	mov	r1, fp
   32c8a:	4620      	mov	r0, r4
   32c8c:	f7ff fcbc 	bl	32608 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32c90:	a803      	add	r0, sp, #12
   32c92:	9403      	str	r4, [sp, #12]
   32c94:	f7ff fd32 	bl	326fc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   32c98:	9b03      	ldr	r3, [sp, #12]
   32c9a:	b2ed      	uxtb	r5, r5
   32c9c:	3380      	adds	r3, #128	; 0x80
   32c9e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   32ca2:	f3c3 4301 	ubfx	r3, r3, #16, #2
   32ca6:	429d      	cmp	r5, r3
   32ca8:	d107      	bne.n	32cba <nrfx_gpiote_irq_handler+0xda>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   32caa:	2100      	movs	r1, #0
   32cac:	4620      	mov	r0, r4
   32cae:	f00d f9d1 	bl	40054 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   32cb2:	4629      	mov	r1, r5
   32cb4:	4620      	mov	r0, r4
   32cb6:	f00d f9cd 	bl	40054 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32cba:	a803      	add	r0, sp, #12
   32cbc:	9403      	str	r4, [sp, #12]
   32cbe:	f7ff fd1d 	bl	326fc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   32cc2:	9b03      	ldr	r3, [sp, #12]
   32cc4:	fa09 f303 	lsl.w	r3, r9, r3
   32cc8:	6203      	str	r3, [r0, #32]
   32cca:	e7ab      	b.n	32c24 <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   32ccc:	2d02      	cmp	r5, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   32cce:	bf0c      	ite	eq
   32cd0:	2103      	moveq	r1, #3
   32cd2:	2102      	movne	r1, #2
   32cd4:	4620      	mov	r0, r4
   32cd6:	f00d f9bd 	bl	40054 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   32cda:	f1bb 0f03 	cmp.w	fp, #3
   32cde:	d004      	beq.n	32cea <nrfx_gpiote_irq_handler+0x10a>
   32ce0:	2d02      	cmp	r5, #2
   32ce2:	d107      	bne.n	32cf4 <nrfx_gpiote_irq_handler+0x114>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   32ce4:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   32ce8:	d1e7      	bne.n	32cba <nrfx_gpiote_irq_handler+0xda>
            call_handler(pin, trigger);
   32cea:	4651      	mov	r1, sl
   32cec:	4620      	mov	r0, r4
   32cee:	f7ff fc8b 	bl	32608 <call_handler>
   32cf2:	e7e2      	b.n	32cba <nrfx_gpiote_irq_handler+0xda>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   32cf4:	2d03      	cmp	r5, #3
   32cf6:	d1e0      	bne.n	32cba <nrfx_gpiote_irq_handler+0xda>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   32cf8:	f1bb 0f02 	cmp.w	fp, #2
   32cfc:	e7f4      	b.n	32ce8 <nrfx_gpiote_irq_handler+0x108>
        uint32_t ch = NRF_CTZ(mask);
   32cfe:	fa96 f3a6 	rbit	r3, r6
   32d02:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   32d06:	fa04 f203 	lsl.w	r2, r4, r3
   32d0a:	009b      	lsls	r3, r3, #2
   32d0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   32d10:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   32d14:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   32d18:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   32d1c:	f3c0 2004 	ubfx	r0, r0, #8, #5
   32d20:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   32d24:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   32d28:	f7ff fc6e 	bl	32608 <call_handler>
    while (mask)
   32d2c:	2e00      	cmp	r6, #0
   32d2e:	d1e6      	bne.n	32cfe <nrfx_gpiote_irq_handler+0x11e>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   32d30:	b005      	add	sp, #20
   32d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32d36:	bf00      	nop
   32d38:	40031100 	.word	0x40031100
   32d3c:	40031000 	.word	0x40031000
   32d40:	40031120 	.word	0x40031120
   32d44:	40842500 	.word	0x40842500
   32d48:	20014704 	.word	0x20014704

00032d4c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   32d4c:	b570      	push	{r4, r5, r6, lr}
   32d4e:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   32d50:	460d      	mov	r5, r1
   32d52:	b941      	cbnz	r1, 32d66 <nrfx_ipc_init+0x1a>
   32d54:	490b      	ldr	r1, [pc, #44]	; (32d84 <nrfx_ipc_init+0x38>)
   32d56:	480c      	ldr	r0, [pc, #48]	; (32d88 <nrfx_ipc_init+0x3c>)
   32d58:	2234      	movs	r2, #52	; 0x34
   32d5a:	f009 ff7e 	bl	3cc5a <assert_print>
   32d5e:	2134      	movs	r1, #52	; 0x34
   32d60:	4808      	ldr	r0, [pc, #32]	; (32d84 <nrfx_ipc_init+0x38>)
   32d62:	f009 ff73 	bl	3cc4c <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   32d66:	4c09      	ldr	r4, [pc, #36]	; (32d8c <nrfx_ipc_init+0x40>)
   32d68:	7923      	ldrb	r3, [r4, #4]
   32d6a:	b943      	cbnz	r3, 32d7e <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   32d6c:	202a      	movs	r0, #42	; 0x2a
   32d6e:	f7ef ff7d 	bl	22c6c <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   32d72:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   32d74:	4806      	ldr	r0, [pc, #24]	; (32d90 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   32d76:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   32d78:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   32d7a:	60a6      	str	r6, [r4, #8]
}
   32d7c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   32d7e:	4805      	ldr	r0, [pc, #20]	; (32d94 <nrfx_ipc_init+0x48>)
   32d80:	e7fc      	b.n	32d7c <nrfx_ipc_init+0x30>
   32d82:	bf00      	nop
   32d84:	0004ba96 	.word	0x0004ba96
   32d88:	00044263 	.word	0x00044263
   32d8c:	2001a428 	.word	0x2001a428
   32d90:	0bad0000 	.word	0x0bad0000
   32d94:	0bad000c 	.word	0x0bad000c

00032d98 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   32d98:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   32d9a:	4604      	mov	r4, r0
   32d9c:	b940      	cbnz	r0, 32db0 <nrfx_ipc_config_load+0x18>
   32d9e:	4919      	ldr	r1, [pc, #100]	; (32e04 <nrfx_ipc_config_load+0x6c>)
   32da0:	4819      	ldr	r0, [pc, #100]	; (32e08 <nrfx_ipc_config_load+0x70>)
   32da2:	2246      	movs	r2, #70	; 0x46
   32da4:	f009 ff59 	bl	3cc5a <assert_print>
   32da8:	2146      	movs	r1, #70	; 0x46
   32daa:	4816      	ldr	r0, [pc, #88]	; (32e04 <nrfx_ipc_config_load+0x6c>)
   32dac:	f009 ff4e 	bl	3cc4c <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32db0:	4b16      	ldr	r3, [pc, #88]	; (32e0c <nrfx_ipc_config_load+0x74>)
   32db2:	791b      	ldrb	r3, [r3, #4]
   32db4:	2b01      	cmp	r3, #1
   32db6:	d008      	beq.n	32dca <nrfx_ipc_config_load+0x32>
   32db8:	4912      	ldr	r1, [pc, #72]	; (32e04 <nrfx_ipc_config_load+0x6c>)
   32dba:	4813      	ldr	r0, [pc, #76]	; (32e08 <nrfx_ipc_config_load+0x70>)
   32dbc:	2247      	movs	r2, #71	; 0x47
   32dbe:	f009 ff4c 	bl	3cc5a <assert_print>
   32dc2:	2147      	movs	r1, #71	; 0x47
   32dc4:	480f      	ldr	r0, [pc, #60]	; (32e04 <nrfx_ipc_config_load+0x6c>)
   32dc6:	f009 ff41 	bl	3cc4c <assert_post_action>
{
   32dca:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   32dcc:	4a10      	ldr	r2, [pc, #64]	; (32e10 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   32dce:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   32dd2:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   32dd6:	3301      	adds	r3, #1
   32dd8:	2b08      	cmp	r3, #8
   32dda:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   32dde:	d1f6      	bne.n	32dce <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   32de0:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   32de2:	4a0b      	ldr	r2, [pc, #44]	; (32e10 <nrfx_ipc_config_load+0x78>)
   32de4:	f104 0120 	add.w	r1, r4, #32
   32de8:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   32dec:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   32df0:	3301      	adds	r3, #1
   32df2:	2b08      	cmp	r3, #8
   32df4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   32df8:	d1f6      	bne.n	32de8 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   32dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    p_reg->INTENSET = mask;
   32dfc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   32e00:	bd38      	pop	{r3, r4, r5, pc}
   32e02:	bf00      	nop
   32e04:	0004ba96 	.word	0x0004ba96
   32e08:	00044263 	.word	0x00044263
   32e0c:	2001a428 	.word	0x2001a428
   32e10:	4002a000 	.word	0x4002a000

00032e14 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   32e14:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32e16:	4c1a      	ldr	r4, [pc, #104]	; (32e80 <nrfx_ipc_uninit+0x6c>)
   32e18:	7923      	ldrb	r3, [r4, #4]
   32e1a:	2b01      	cmp	r3, #1
   32e1c:	d008      	beq.n	32e30 <nrfx_ipc_uninit+0x1c>
   32e1e:	4919      	ldr	r1, [pc, #100]	; (32e84 <nrfx_ipc_uninit+0x70>)
   32e20:	4819      	ldr	r0, [pc, #100]	; (32e88 <nrfx_ipc_uninit+0x74>)
   32e22:	2259      	movs	r2, #89	; 0x59
   32e24:	f009 ff19 	bl	3cc5a <assert_print>
   32e28:	2159      	movs	r1, #89	; 0x59
   32e2a:	4816      	ldr	r0, [pc, #88]	; (32e84 <nrfx_ipc_uninit+0x70>)
   32e2c:	f009 ff0e 	bl	3cc4c <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   32e30:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   32e32:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   32e36:	4a15      	ldr	r2, [pc, #84]	; (32e8c <nrfx_ipc_uninit+0x78>)
   32e38:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   32e3c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   32e40:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   32e44:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   32e48:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   32e4c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   32e50:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   32e54:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   32e58:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   32e5c:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   32e60:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   32e64:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   32e68:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   32e6c:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   32e70:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   32e74:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   32e78:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   32e7c:	7123      	strb	r3, [r4, #4]
}
   32e7e:	bd10      	pop	{r4, pc}
   32e80:	2001a428 	.word	0x2001a428
   32e84:	0004ba96 	.word	0x0004ba96
   32e88:	00044263 	.word	0x00044263
   32e8c:	4002a000 	.word	0x4002a000

00032e90 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   32e90:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32e92:	4b0a      	ldr	r3, [pc, #40]	; (32ebc <nrfx_ipc_receive_event_enable+0x2c>)
{
   32e94:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32e96:	791b      	ldrb	r3, [r3, #4]
   32e98:	2b01      	cmp	r3, #1
   32e9a:	d008      	beq.n	32eae <nrfx_ipc_receive_event_enable+0x1e>
   32e9c:	4908      	ldr	r1, [pc, #32]	; (32ec0 <nrfx_ipc_receive_event_enable+0x30>)
   32e9e:	4809      	ldr	r0, [pc, #36]	; (32ec4 <nrfx_ipc_receive_event_enable+0x34>)
   32ea0:	226c      	movs	r2, #108	; 0x6c
   32ea2:	f009 feda 	bl	3cc5a <assert_print>
   32ea6:	216c      	movs	r1, #108	; 0x6c
   32ea8:	4805      	ldr	r0, [pc, #20]	; (32ec0 <nrfx_ipc_receive_event_enable+0x30>)
   32eaa:	f009 fecf 	bl	3cc4c <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   32eae:	2301      	movs	r3, #1
   32eb0:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
   32eb4:	4b04      	ldr	r3, [pc, #16]	; (32ec8 <nrfx_ipc_receive_event_enable+0x38>)
   32eb6:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   32eba:	bd10      	pop	{r4, pc}
   32ebc:	2001a428 	.word	0x2001a428
   32ec0:	0004ba96 	.word	0x0004ba96
   32ec4:	00044263 	.word	0x00044263
   32ec8:	4002a000 	.word	0x4002a000

00032ecc <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   32ecc:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32ece:	4b0a      	ldr	r3, [pc, #40]	; (32ef8 <nrfx_ipc_receive_event_disable+0x2c>)
{
   32ed0:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32ed2:	791b      	ldrb	r3, [r3, #4]
   32ed4:	2b01      	cmp	r3, #1
   32ed6:	d008      	beq.n	32eea <nrfx_ipc_receive_event_disable+0x1e>
   32ed8:	4908      	ldr	r1, [pc, #32]	; (32efc <nrfx_ipc_receive_event_disable+0x30>)
   32eda:	4809      	ldr	r0, [pc, #36]	; (32f00 <nrfx_ipc_receive_event_disable+0x34>)
   32edc:	2272      	movs	r2, #114	; 0x72
   32ede:	f009 febc 	bl	3cc5a <assert_print>
   32ee2:	2172      	movs	r1, #114	; 0x72
   32ee4:	4805      	ldr	r0, [pc, #20]	; (32efc <nrfx_ipc_receive_event_disable+0x30>)
   32ee6:	f009 feb1 	bl	3cc4c <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   32eea:	2301      	movs	r3, #1
   32eec:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   32ef0:	4b04      	ldr	r3, [pc, #16]	; (32f04 <nrfx_ipc_receive_event_disable+0x38>)
   32ef2:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   32ef6:	bd10      	pop	{r4, pc}
   32ef8:	2001a428 	.word	0x2001a428
   32efc:	0004ba96 	.word	0x0004ba96
   32f00:	00044263 	.word	0x00044263
   32f04:	4002a000 	.word	0x4002a000

00032f08 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   32f08:	4b16      	ldr	r3, [pc, #88]	; (32f64 <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   32f0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32f0e:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   32f12:	f04f 0801 	mov.w	r8, #1
    uint32_t bitmask = events_map;
   32f16:	4635      	mov	r5, r6
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   32f18:	4f13      	ldr	r7, [pc, #76]	; (32f68 <nrfx_ipc_irq_handler+0x60>)
   32f1a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 32f74 <nrfx_ipc_irq_handler+0x6c>
    while (bitmask)
   32f1e:	b935      	cbnz	r5, 32f2e <nrfx_ipc_irq_handler+0x26>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   32f20:	4b12      	ldr	r3, [pc, #72]	; (32f6c <nrfx_ipc_irq_handler+0x64>)
   32f22:	4630      	mov	r0, r6
}
   32f24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   32f28:	681a      	ldr	r2, [r3, #0]
   32f2a:	6899      	ldr	r1, [r3, #8]
   32f2c:	4710      	bx	r2
        uint8_t event_idx = NRF_CTZ(bitmask);
   32f2e:	fa95 f4a5 	rbit	r4, r5
   32f32:	fab4 f484 	clz	r4, r4
        bitmask &= ~(1UL << event_idx);
   32f36:	fa08 f304 	lsl.w	r3, r8, r4
   32f3a:	2c07      	cmp	r4, #7
   32f3c:	ea25 0503 	bic.w	r5, r5, r3
   32f40:	dd0a      	ble.n	32f58 <nrfx_ipc_irq_handler+0x50>
   32f42:	4639      	mov	r1, r7
   32f44:	4648      	mov	r0, r9
   32f46:	f240 12e7 	movw	r2, #487	; 0x1e7
   32f4a:	f009 fe86 	bl	3cc5a <assert_print>
   32f4e:	f240 11e7 	movw	r1, #487	; 0x1e7
   32f52:	4638      	mov	r0, r7
   32f54:	f009 fe7a 	bl	3cc4c <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32f58:	2200      	movs	r2, #0
   32f5a:	4b05      	ldr	r3, [pc, #20]	; (32f70 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   32f5c:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32f5e:	511a      	str	r2, [r3, r4]
}
   32f60:	e7dd      	b.n	32f1e <nrfx_ipc_irq_handler+0x16>
   32f62:	bf00      	nop
   32f64:	4002a000 	.word	0x4002a000
   32f68:	0004bad1 	.word	0x0004bad1
   32f6c:	2001a428 	.word	0x2001a428
   32f70:	4002a100 	.word	0x4002a100
   32f74:	00044263 	.word	0x00044263

00032f78 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   32f78:	4a04      	ldr	r2, [pc, #16]	; (32f8c <nvmc_word_write+0x14>)
   32f7a:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   32f7e:	07db      	lsls	r3, r3, #31
   32f80:	d5fb      	bpl.n	32f7a <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   32f82:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   32f84:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   32f88:	4770      	bx	lr
   32f8a:	bf00      	nop
   32f8c:	40039000 	.word	0x40039000

00032f90 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   32f90:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   32f94:	b510      	push	{r4, lr}
   32f96:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   32f98:	d30a      	bcc.n	32fb0 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   32f9a:	4910      	ldr	r1, [pc, #64]	; (32fdc <nrfx_nvmc_page_erase+0x4c>)
   32f9c:	4810      	ldr	r0, [pc, #64]	; (32fe0 <nrfx_nvmc_page_erase+0x50>)
   32f9e:	f44f 7283 	mov.w	r2, #262	; 0x106
   32fa2:	f009 fe5a 	bl	3cc5a <assert_print>
   32fa6:	f44f 7183 	mov.w	r1, #262	; 0x106
   32faa:	480c      	ldr	r0, [pc, #48]	; (32fdc <nrfx_nvmc_page_erase+0x4c>)
   32fac:	f009 fe4e 	bl	3cc4c <assert_post_action>
    return !(addr % flash_page_size_get());
   32fb0:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   32fb4:	b97b      	cbnz	r3, 32fd6 <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   32fb6:	2202      	movs	r2, #2
   32fb8:	4b0a      	ldr	r3, [pc, #40]	; (32fe4 <nrfx_nvmc_page_erase+0x54>)
   32fba:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   32fbe:	f04f 32ff 	mov.w	r2, #4294967295
   32fc2:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   32fc4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   32fc8:	07d2      	lsls	r2, r2, #31
   32fca:	d5fb      	bpl.n	32fc4 <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   32fcc:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   32fce:	4806      	ldr	r0, [pc, #24]	; (32fe8 <nrfx_nvmc_page_erase+0x58>)
   32fd0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   32fd4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   32fd6:	4805      	ldr	r0, [pc, #20]	; (32fec <nrfx_nvmc_page_erase+0x5c>)
   32fd8:	e7fc      	b.n	32fd4 <nrfx_nvmc_page_erase+0x44>
   32fda:	bf00      	nop
   32fdc:	0004bb03 	.word	0x0004bb03
   32fe0:	00044263 	.word	0x00044263
   32fe4:	40039000 	.word	0x40039000
   32fe8:	0bad0000 	.word	0x0bad0000
   32fec:	0bad000a 	.word	0x0bad000a

00032ff0 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   32ff0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   32ff4:	b570      	push	{r4, r5, r6, lr}
   32ff6:	4604      	mov	r4, r0
   32ff8:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   32ffa:	d30a      	bcc.n	33012 <nrfx_nvmc_word_write+0x22>
    NRFX_ASSERT(is_valid_address(addr, true));
   32ffc:	4911      	ldr	r1, [pc, #68]	; (33044 <nrfx_nvmc_word_write+0x54>)
   32ffe:	4812      	ldr	r0, [pc, #72]	; (33048 <nrfx_nvmc_word_write+0x58>)
   33000:	f44f 72ca 	mov.w	r2, #404	; 0x194
   33004:	f009 fe29 	bl	3cc5a <assert_print>
   33008:	f44f 71ca 	mov.w	r1, #404	; 0x194
   3300c:	480d      	ldr	r0, [pc, #52]	; (33044 <nrfx_nvmc_word_write+0x54>)
   3300e:	f009 fe1d 	bl	3cc4c <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   33012:	07a3      	lsls	r3, r4, #30
   33014:	d00a      	beq.n	3302c <nrfx_nvmc_word_write+0x3c>
   33016:	490b      	ldr	r1, [pc, #44]	; (33044 <nrfx_nvmc_word_write+0x54>)
   33018:	480b      	ldr	r0, [pc, #44]	; (33048 <nrfx_nvmc_word_write+0x58>)
   3301a:	f240 1295 	movw	r2, #405	; 0x195
   3301e:	f009 fe1c 	bl	3cc5a <assert_print>
   33022:	f240 1195 	movw	r1, #405	; 0x195
   33026:	4807      	ldr	r0, [pc, #28]	; (33044 <nrfx_nvmc_word_write+0x54>)
   33028:	f009 fe10 	bl	3cc4c <assert_post_action>
   3302c:	2301      	movs	r3, #1
   3302e:	4e07      	ldr	r6, [pc, #28]	; (3304c <nrfx_nvmc_word_write+0x5c>)

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   33030:	4629      	mov	r1, r5
   33032:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584
   33036:	4620      	mov	r0, r4
   33038:	f7ff ff9e 	bl	32f78 <nvmc_word_write>
   3303c:	2300      	movs	r3, #0
   3303e:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   33042:	bd70      	pop	{r4, r5, r6, pc}
   33044:	0004bb03 	.word	0x0004bb03
   33048:	00044263 	.word	0x00044263
   3304c:	40039000 	.word	0x40039000

00033050 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33050:	6803      	ldr	r3, [r0, #0]
{
   33052:	b510      	push	{r4, lr}
    switch (port)
   33054:	095a      	lsrs	r2, r3, #5
   33056:	bf0c      	ite	eq
   33058:	f04f 32ff 	moveq.w	r2, #4294967295
   3305c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   3305e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   33062:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33066:	07db      	lsls	r3, r3, #31
{
   33068:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   3306a:	d40a      	bmi.n	33082 <nrf_gpio_pin_port_decode+0x32>
   3306c:	490e      	ldr	r1, [pc, #56]	; (330a8 <nrf_gpio_pin_port_decode+0x58>)
   3306e:	480f      	ldr	r0, [pc, #60]	; (330ac <nrf_gpio_pin_port_decode+0x5c>)
   33070:	f240 2229 	movw	r2, #553	; 0x229
   33074:	f009 fdf1 	bl	3cc5a <assert_print>
   33078:	f240 2129 	movw	r1, #553	; 0x229
   3307c:	480a      	ldr	r0, [pc, #40]	; (330a8 <nrf_gpio_pin_port_decode+0x58>)
   3307e:	f009 fde5 	bl	3cc4c <assert_post_action>
    uint32_t pin_number = *p_pin;
   33082:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   33084:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   33088:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   3308a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   3308c:	d00a      	beq.n	330a4 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   3308e:	4906      	ldr	r1, [pc, #24]	; (330a8 <nrf_gpio_pin_port_decode+0x58>)
   33090:	4806      	ldr	r0, [pc, #24]	; (330ac <nrf_gpio_pin_port_decode+0x5c>)
   33092:	f240 222e 	movw	r2, #558	; 0x22e
   33096:	f009 fde0 	bl	3cc5a <assert_print>
   3309a:	f240 212e 	movw	r1, #558	; 0x22e
   3309e:	4802      	ldr	r0, [pc, #8]	; (330a8 <nrf_gpio_pin_port_decode+0x58>)
   330a0:	f009 fdd4 	bl	3cc4c <assert_post_action>
}
   330a4:	4802      	ldr	r0, [pc, #8]	; (330b0 <nrf_gpio_pin_port_decode+0x60>)
   330a6:	bd10      	pop	{r4, pc}
   330a8:	00044e46 	.word	0x00044e46
   330ac:	00044263 	.word	0x00044263
   330b0:	40842500 	.word	0x40842500

000330b4 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   330b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   330b8:	4606      	mov	r6, r0
   330ba:	4690      	mov	r8, r2
   330bc:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
   330be:	460c      	mov	r4, r1
   330c0:	b951      	cbnz	r1, 330d8 <nrfx_twim_init+0x24>
   330c2:	492f      	ldr	r1, [pc, #188]	; (33180 <nrfx_twim_init+0xcc>)
   330c4:	482f      	ldr	r0, [pc, #188]	; (33184 <nrfx_twim_init+0xd0>)
   330c6:	f240 1215 	movw	r2, #277	; 0x115
   330ca:	f009 fdc6 	bl	3cc5a <assert_print>
   330ce:	f240 1115 	movw	r1, #277	; 0x115
   330d2:	482b      	ldr	r0, [pc, #172]	; (33180 <nrfx_twim_init+0xcc>)
   330d4:	f009 fdba 	bl	3cc4c <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   330d8:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   330da:	f896 a004 	ldrb.w	sl, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   330de:	4d2a      	ldr	r5, [pc, #168]	; (33188 <nrfx_twim_init+0xd4>)
   330e0:	fb07 f70a 	mul.w	r7, r7, sl
   330e4:	19e9      	adds	r1, r5, r7
   330e6:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
   330ea:	2800      	cmp	r0, #0
   330ec:	d145      	bne.n	3317a <nrfx_twim_init+0xc6>
    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   330ee:	7b63      	ldrb	r3, [r4, #13]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   330f0:	f8d6 b000 	ldr.w	fp, [r6]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   330f4:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   330f8:	7ba3      	ldrb	r3, [r4, #14]
    p_cb->int_mask        = 0;
   330fa:	6088      	str	r0, [r1, #8]
    p_cb->handler         = event_handler;
   330fc:	f845 8007 	str.w	r8, [r5, r7]
    p_cb->p_context       = p_context;
   33100:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->repeated        = false;
   33104:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    p_cb->busy            = false;
   33108:	f881 002f 	strb.w	r0, [r1, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   3310c:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   33110:	b1f3      	cbz	r3, 33150 <nrfx_twim_init+0x9c>
   33112:	7be3      	ldrb	r3, [r4, #15]
   33114:	b92b      	cbnz	r3, 33122 <nrfx_twim_init+0x6e>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   33116:	e9d4 2300 	ldrd	r2, r3, [r4]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   3311a:	f8cb 2508 	str.w	r2, [fp, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   3311e:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   33122:	68a3      	ldr	r3, [r4, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   33124:	f8cb 3524 	str.w	r3, [fp, #1316]	; 0x524

    if (p_cb->handler)
   33128:	2334      	movs	r3, #52	; 0x34
   3312a:	fb03 f30a 	mul.w	r3, r3, sl
   3312e:	58eb      	ldr	r3, [r5, r3]
   33130:	b123      	cbz	r3, 3313c <nrfx_twim_init+0x88>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   33132:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   33134:	f340 3007 	sbfx	r0, r0, #12, #8
   33138:	f7ef fd98 	bl	22c6c <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3313c:	2334      	movs	r3, #52	; 0x34
   3313e:	fb03 550a 	mla	r5, r3, sl, r5
   33142:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   33144:	4811      	ldr	r0, [pc, #68]	; (3318c <nrfx_twim_init+0xd8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   33146:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   3314a:	b003      	add	sp, #12
   3314c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
   33150:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33152:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   33154:	f240 670c 	movw	r7, #1548	; 0x60c
   33158:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3315a:	f7ff ff79 	bl	33050 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   3315e:	9b01      	ldr	r3, [sp, #4]
   33160:	3380      	adds	r3, #128	; 0x80
   33162:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   33166:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33168:	a801      	add	r0, sp, #4
   3316a:	9301      	str	r3, [sp, #4]
   3316c:	f7ff ff70 	bl	33050 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   33170:	9b01      	ldr	r3, [sp, #4]
   33172:	3380      	adds	r3, #128	; 0x80
   33174:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   33178:	e7cb      	b.n	33112 <nrfx_twim_init+0x5e>
        return err_code;
   3317a:	4805      	ldr	r0, [pc, #20]	; (33190 <nrfx_twim_init+0xdc>)
   3317c:	e7e5      	b.n	3314a <nrfx_twim_init+0x96>
   3317e:	bf00      	nop
   33180:	0004bb3f 	.word	0x0004bb3f
   33184:	00044263 	.word	0x00044263
   33188:	2001a434 	.word	0x2001a434
   3318c:	0bad0000 	.word	0x0bad0000
   33190:	0bad0005 	.word	0x0bad0005

00033194 <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   33194:	2334      	movs	r3, #52	; 0x34
{
   33196:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   33198:	4c0f      	ldr	r4, [pc, #60]	; (331d8 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3319a:	7906      	ldrb	r6, [r0, #4]
{
   3319c:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3319e:	fb03 4306 	mla	r3, r3, r6, r4
   331a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   331a6:	2b01      	cmp	r3, #1
   331a8:	d00a      	beq.n	331c0 <nrfx_twim_enable+0x2c>
   331aa:	490c      	ldr	r1, [pc, #48]	; (331dc <nrfx_twim_enable+0x48>)
   331ac:	480c      	ldr	r0, [pc, #48]	; (331e0 <nrfx_twim_enable+0x4c>)
   331ae:	f240 1279 	movw	r2, #377	; 0x179
   331b2:	f009 fd52 	bl	3cc5a <assert_print>
   331b6:	f240 1179 	movw	r1, #377	; 0x179
   331ba:	4808      	ldr	r0, [pc, #32]	; (331dc <nrfx_twim_enable+0x48>)
   331bc:	f009 fd46 	bl	3cc4c <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   331c0:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   331c2:	682b      	ldr	r3, [r5, #0]
   331c4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   331c8:	2334      	movs	r3, #52	; 0x34
   331ca:	fb03 4406 	mla	r4, r3, r6, r4
   331ce:	2302      	movs	r3, #2
   331d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   331d4:	bd70      	pop	{r4, r5, r6, pc}
   331d6:	bf00      	nop
   331d8:	2001a434 	.word	0x2001a434
   331dc:	0004bb3f 	.word	0x0004bb3f
   331e0:	00044263 	.word	0x00044263

000331e4 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   331e4:	2234      	movs	r2, #52	; 0x34
{
   331e6:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   331e8:	4c14      	ldr	r4, [pc, #80]	; (3323c <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   331ea:	7906      	ldrb	r6, [r0, #4]
{
   331ec:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   331ee:	fb02 4206 	mla	r2, r2, r6, r4
   331f2:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
   331f6:	b953      	cbnz	r3, 3320e <nrfx_twim_disable+0x2a>
   331f8:	4911      	ldr	r1, [pc, #68]	; (33240 <nrfx_twim_disable+0x5c>)
   331fa:	4812      	ldr	r0, [pc, #72]	; (33244 <nrfx_twim_disable+0x60>)
   331fc:	f44f 72c2 	mov.w	r2, #388	; 0x184
   33200:	f009 fd2b 	bl	3cc5a <assert_print>
   33204:	f44f 71c2 	mov.w	r1, #388	; 0x184
   33208:	480d      	ldr	r0, [pc, #52]	; (33240 <nrfx_twim_disable+0x5c>)
   3320a:	f009 fd1f 	bl	3cc4c <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   3320e:	2334      	movs	r3, #52	; 0x34
   33210:	2100      	movs	r1, #0
   33212:	fb03 4306 	mla	r3, r3, r6, r4
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   33216:	682a      	ldr	r2, [r5, #0]
    p_reg->INTENCLR = mask;
   33218:	480b      	ldr	r0, [pc, #44]	; (33248 <nrfx_twim_disable+0x64>)
    p_cb->int_mask = 0;
   3321a:	6099      	str	r1, [r3, #8]
   3321c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   33220:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   33224:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   33228:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3322c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   33230:	2201      	movs	r2, #1
    p_cb->busy = false;
   33232:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   33236:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   3323a:	bd70      	pop	{r4, r5, r6, pc}
   3323c:	2001a434 	.word	0x2001a434
   33240:	0004bb3f 	.word	0x0004bb3f
   33244:	00044263 	.word	0x00044263
   33248:	019c0202 	.word	0x019c0202

0003324c <nrfx_twim_uninit>:
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3324c:	2334      	movs	r3, #52	; 0x34
{
   3324e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   33250:	4d23      	ldr	r5, [pc, #140]	; (332e0 <nrfx_twim_uninit+0x94>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   33252:	7906      	ldrb	r6, [r0, #4]
{
   33254:	4604      	mov	r4, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   33256:	fb03 5306 	mla	r3, r3, r6, r5
   3325a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   3325e:	b953      	cbnz	r3, 33276 <nrfx_twim_uninit+0x2a>
   33260:	4920      	ldr	r1, [pc, #128]	; (332e4 <nrfx_twim_uninit+0x98>)
   33262:	4821      	ldr	r0, [pc, #132]	; (332e8 <nrfx_twim_uninit+0x9c>)
   33264:	f44f 72b0 	mov.w	r2, #352	; 0x160
   33268:	f009 fcf7 	bl	3cc5a <assert_print>
   3326c:	f44f 71b0 	mov.w	r1, #352	; 0x160
   33270:	481c      	ldr	r0, [pc, #112]	; (332e4 <nrfx_twim_uninit+0x98>)
   33272:	f009 fceb 	bl	3cc4c <assert_post_action>
    if (p_cb->handler)
   33276:	2334      	movs	r3, #52	; 0x34
   33278:	4373      	muls	r3, r6
   3327a:	58eb      	ldr	r3, [r5, r3]
   3327c:	b123      	cbz	r3, 33288 <nrfx_twim_uninit+0x3c>
   3327e:	6820      	ldr	r0, [r4, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
   33280:	f340 3007 	sbfx	r0, r0, #12, #8
   33284:	f7ef fd02 	bl	22c8c <arch_irq_disable>
    nrfx_twim_disable(p_instance);
   33288:	4620      	mov	r0, r4
   3328a:	f7ff ffab 	bl	331e4 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   3328e:	2334      	movs	r3, #52	; 0x34
   33290:	fb03 5306 	mla	r3, r3, r6, r5
   33294:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   33298:	b9ca      	cbnz	r2, 332ce <nrfx_twim_uninit+0x82>
   3329a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   3329e:	b9b3      	cbnz	r3, 332ce <nrfx_twim_uninit+0x82>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
   332a0:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   332a2:	a801      	add	r0, sp, #4
    return p_reg->PSEL.SCL;
   332a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   332a8:	2702      	movs	r7, #2
   332aa:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   332ac:	f7ff fed0 	bl	33050 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   332b0:	9b01      	ldr	r3, [sp, #4]
   332b2:	3380      	adds	r3, #128	; 0x80
   332b4:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        nrf_gpio_cfg_default(nrf_twim_sda_pin_get(p_instance->p_twim));
   332b8:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   332ba:	a801      	add	r0, sp, #4
    return p_reg->PSEL.SDA;
   332bc:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
    nrf_gpio_cfg(
   332c0:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   332c2:	f7ff fec5 	bl	33050 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   332c6:	9b01      	ldr	r3, [sp, #4]
   332c8:	3380      	adds	r3, #128	; 0x80
   332ca:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   332ce:	2334      	movs	r3, #52	; 0x34
   332d0:	fb03 5506 	mla	r5, r3, r6, r5
   332d4:	2300      	movs	r3, #0
   332d6:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   332da:	b003      	add	sp, #12
   332dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   332de:	bf00      	nop
   332e0:	2001a434 	.word	0x2001a434
   332e4:	0004bb3f 	.word	0x0004bb3f
   332e8:	00044263 	.word	0x00044263

000332ec <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   332ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   332f0:	7903      	ldrb	r3, [r0, #4]
{
   332f2:	4604      	mov	r4, r0
   332f4:	460d      	mov	r5, r1
   332f6:	4616      	mov	r6, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   332f8:	b93b      	cbnz	r3, 3330a <nrfx_twim_xfer+0x1e>
   332fa:	684b      	ldr	r3, [r1, #4]
   332fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   33300:	d203      	bcs.n	3330a <nrfx_twim_xfer+0x1e>
   33302:	688b      	ldr	r3, [r1, #8]
   33304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   33308:	d30a      	bcc.n	33320 <nrfx_twim_xfer+0x34>
   3330a:	49ba      	ldr	r1, [pc, #744]	; (335f4 <nrfx_twim_xfer+0x308>)
   3330c:	48ba      	ldr	r0, [pc, #744]	; (335f8 <nrfx_twim_xfer+0x30c>)
   3330e:	f240 2299 	movw	r2, #665	; 0x299
   33312:	f009 fca2 	bl	3cc5a <assert_print>
   33316:	f240 2199 	movw	r1, #665	; 0x299
   3331a:	48b6      	ldr	r0, [pc, #728]	; (335f4 <nrfx_twim_xfer+0x308>)
   3331c:	f009 fc96 	bl	3cc4c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   33320:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   33322:	f894 9004 	ldrb.w	r9, [r4, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   33326:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 33610 <nrfx_twim_xfer+0x324>
   3332a:	fb07 f709 	mul.w	r7, r7, r9
   3332e:	f858 3007 	ldr.w	r3, [r8, r7]
   33332:	bb03      	cbnz	r3, 33376 <nrfx_twim_xfer+0x8a>
   33334:	782b      	ldrb	r3, [r5, #0]
   33336:	2b02      	cmp	r3, #2
   33338:	d00e      	beq.n	33358 <nrfx_twim_xfer+0x6c>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   3333a:	782b      	ldrb	r3, [r5, #0]
   3333c:	2b03      	cmp	r3, #3
   3333e:	d11a      	bne.n	33376 <nrfx_twim_xfer+0x8a>
   33340:	f240 22a2 	movw	r2, #674	; 0x2a2
   33344:	49ab      	ldr	r1, [pc, #684]	; (335f4 <nrfx_twim_xfer+0x308>)
   33346:	48ac      	ldr	r0, [pc, #688]	; (335f8 <nrfx_twim_xfer+0x30c>)
   33348:	f009 fc87 	bl	3cc5a <assert_print>
   3334c:	f240 21a2 	movw	r1, #674	; 0x2a2
   33350:	48a8      	ldr	r0, [pc, #672]	; (335f4 <nrfx_twim_xfer+0x308>)
   33352:	f009 fc7b 	bl	3cc4c <assert_post_action>
   33356:	e00e      	b.n	33376 <nrfx_twim_xfer+0x8a>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   33358:	f240 22a1 	movw	r2, #673	; 0x2a1
   3335c:	49a5      	ldr	r1, [pc, #660]	; (335f4 <nrfx_twim_xfer+0x308>)
   3335e:	48a6      	ldr	r0, [pc, #664]	; (335f8 <nrfx_twim_xfer+0x30c>)
   33360:	f009 fc7b 	bl	3cc5a <assert_print>
   33364:	f240 21a1 	movw	r1, #673	; 0x2a1
   33368:	48a2      	ldr	r0, [pc, #648]	; (335f4 <nrfx_twim_xfer+0x308>)
   3336a:	f009 fc6f 	bl	3cc4c <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   3336e:	f858 3007 	ldr.w	r3, [r8, r7]
   33372:	2b00      	cmp	r3, #0
   33374:	d0e1      	beq.n	3333a <nrfx_twim_xfer+0x4e>
    p_cb->error = false;
   33376:	2334      	movs	r3, #52	; 0x34
   33378:	2200      	movs	r2, #0
   3337a:	fb03 8309 	mla	r3, r3, r9, r8
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   3337e:	6824      	ldr	r4, [r4, #0]
    p_cb->error = false;
   33380:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   33384:	686b      	ldr	r3, [r5, #4]
   33386:	b14b      	cbz	r3, 3339c <nrfx_twim_xfer+0xb0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   33388:	68eb      	ldr	r3, [r5, #12]
   3338a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   3338e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   33392:	d003      	beq.n	3339c <nrfx_twim_xfer+0xb0>
        return err_code;
   33394:	4f99      	ldr	r7, [pc, #612]	; (335fc <nrfx_twim_xfer+0x310>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   33396:	4638      	mov	r0, r7
   33398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   3339c:	2734      	movs	r7, #52	; 0x34
   3339e:	fb07 8709 	mla	r7, r7, r9, r8
    p_reg->INTENCLR = mask;
   333a2:	4b97      	ldr	r3, [pc, #604]	; (33600 <nrfx_twim_xfer+0x314>)
   333a4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   333a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   333ac:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   333b0:	b123      	cbz	r3, 333bc <nrfx_twim_xfer+0xd0>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   333b2:	68bb      	ldr	r3, [r7, #8]
        return err_code;
   333b4:	4f93      	ldr	r7, [pc, #588]	; (33604 <nrfx_twim_xfer+0x318>)
    p_reg->INTENSET = mask;
   333b6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   333ba:	e7ec      	b.n	33396 <nrfx_twim_xfer+0xaa>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   333bc:	f016 0f14 	tst.w	r6, #20
   333c0:	bf0c      	ite	eq
   333c2:	2301      	moveq	r3, #1
   333c4:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   333c6:	46ae      	mov	lr, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   333c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   333cc:	f107 0c0c 	add.w	ip, r7, #12
   333d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   333d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   333d8:	f8de 3000 	ldr.w	r3, [lr]
    p_cb->flags = flags;
   333dc:	623e      	str	r6, [r7, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   333de:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   333e2:	f3c6 1300 	ubfx	r3, r6, #4, #1
   333e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   333ea:	786b      	ldrb	r3, [r5, #1]
   333ec:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   333f0:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   333f4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   333f8:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   333fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   33400:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   33404:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   33408:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   3340c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   33410:	f016 0301 	ands.w	r3, r6, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   33414:	bf18      	it	ne
   33416:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   33418:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   3341c:	f016 0302 	ands.w	r3, r6, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   33420:	bf18      	it	ne
   33422:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   33424:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   33428:	782b      	ldrb	r3, [r5, #0]
   3342a:	2b03      	cmp	r3, #3
   3342c:	f200 80df 	bhi.w	335ee <nrfx_twim_xfer+0x302>
   33430:	e8df f003 	tbb	[pc, r3]
   33434:	0293caae 	.word	0x0293caae
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   33438:	06f3      	lsls	r3, r6, #27
   3343a:	d50a      	bpl.n	33452 <nrfx_twim_xfer+0x166>
   3343c:	496d      	ldr	r1, [pc, #436]	; (335f4 <nrfx_twim_xfer+0x308>)
   3343e:	486e      	ldr	r0, [pc, #440]	; (335f8 <nrfx_twim_xfer+0x30c>)
   33440:	f240 12dd 	movw	r2, #477	; 0x1dd
   33444:	f009 fc09 	bl	3cc5a <assert_print>
   33448:	f240 11dd 	movw	r1, #477	; 0x1dd
   3344c:	4869      	ldr	r0, [pc, #420]	; (335f4 <nrfx_twim_xfer+0x308>)
   3344e:	f009 fbfd 	bl	3cc4c <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   33452:	0737      	lsls	r7, r6, #28
   33454:	d50a      	bpl.n	3346c <nrfx_twim_xfer+0x180>
   33456:	4967      	ldr	r1, [pc, #412]	; (335f4 <nrfx_twim_xfer+0x308>)
   33458:	4867      	ldr	r0, [pc, #412]	; (335f8 <nrfx_twim_xfer+0x30c>)
   3345a:	f44f 72ef 	mov.w	r2, #478	; 0x1de
   3345e:	f009 fbfc 	bl	3cc5a <assert_print>
   33462:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   33466:	4863      	ldr	r0, [pc, #396]	; (335f4 <nrfx_twim_xfer+0x308>)
   33468:	f009 fbf0 	bl	3cc4c <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   3346c:	0770      	lsls	r0, r6, #29
   3346e:	d50a      	bpl.n	33486 <nrfx_twim_xfer+0x19a>
   33470:	4960      	ldr	r1, [pc, #384]	; (335f4 <nrfx_twim_xfer+0x308>)
   33472:	4861      	ldr	r0, [pc, #388]	; (335f8 <nrfx_twim_xfer+0x30c>)
   33474:	f240 12df 	movw	r2, #479	; 0x1df
   33478:	f009 fbef 	bl	3cc5a <assert_print>
   3347c:	f240 11df 	movw	r1, #479	; 0x1df
   33480:	485c      	ldr	r0, [pc, #368]	; (335f4 <nrfx_twim_xfer+0x308>)
   33482:	f009 fbe3 	bl	3cc4c <assert_post_action>
   33486:	692b      	ldr	r3, [r5, #16]
   33488:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   3348c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   33490:	d180      	bne.n	33394 <nrfx_twim_xfer+0xa8>
    p_reg->SHORTS = mask;
   33492:	f44f 7280 	mov.w	r2, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   33496:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   33498:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   3349c:	686a      	ldr	r2, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3349e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   334a2:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   334a6:	2200      	movs	r2, #0
   334a8:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
   334ac:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   334b0:	2101      	movs	r1, #1
   334b2:	6221      	str	r1, [r4, #32]
   334b4:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   334b6:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   334ba:	2900      	cmp	r1, #0
   334bc:	d0fb      	beq.n	334b6 <nrfx_twim_xfer+0x1ca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   334be:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
   334c2:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   334c6:	68aa      	ldr	r2, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   334c8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   334cc:	2334      	movs	r3, #52	; 0x34
    p_reg->TXD.MAXCNT = length;
   334ce:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
   334d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   334d6:	fb03 8309 	mla	r3, r3, r9, r8
   334da:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   334dc:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   334de:	4f4a      	ldr	r7, [pc, #296]	; (33608 <nrfx_twim_xfer+0x31c>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   334e0:	0731      	lsls	r1, r6, #28
   334e2:	d407      	bmi.n	334f4 <nrfx_twim_xfer+0x208>
   334e4:	782a      	ldrb	r2, [r5, #0]
   334e6:	2a03      	cmp	r2, #3
   334e8:	d004      	beq.n	334f4 <nrfx_twim_xfer+0x208>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   334ea:	2201      	movs	r2, #1
   334ec:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   334ee:	686b      	ldr	r3, [r5, #4]
   334f0:	b903      	cbnz	r3, 334f4 <nrfx_twim_xfer+0x208>
   334f2:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   334f4:	2334      	movs	r3, #52	; 0x34
   334f6:	fb03 f309 	mul.w	r3, r3, r9
   334fa:	f858 2003 	ldr.w	r2, [r8, r3]
   334fe:	eb08 0103 	add.w	r1, r8, r3
   33502:	2a00      	cmp	r2, #0
   33504:	f040 8086 	bne.w	33614 <nrfx_twim_xfer+0x328>
                transmission_finished = true;
   33508:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3350a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   3350e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   33512:	2800      	cmp	r0, #0
   33514:	f040 8099 	bne.w	3364a <nrfx_twim_xfer+0x35e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   33518:	3b00      	subs	r3, #0
   3351a:	bf18      	it	ne
   3351c:	2301      	movne	r3, #1
   3351e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   33522:	2800      	cmp	r0, #0
   33524:	f000 8097 	beq.w	33656 <nrfx_twim_xfer+0x36a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33528:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   3352c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   33530:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   33534:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   33538:	b115      	cbz	r5, 33540 <nrfx_twim_xfer+0x254>
   3353a:	f410 7f00 	tst.w	r0, #512	; 0x200
   3353e:	d104      	bne.n	3354a <nrfx_twim_xfer+0x25e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33540:	6221      	str	r1, [r4, #32]
   33542:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   33544:	2d00      	cmp	r5, #0
   33546:	d0e0      	beq.n	3350a <nrfx_twim_xfer+0x21e>
                    transmission_finished = false;
   33548:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   3354a:	05c0      	lsls	r0, r0, #23
   3354c:	f140 8083 	bpl.w	33656 <nrfx_twim_xfer+0x36a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33550:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   33554:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   33558:	e7d7      	b.n	3350a <nrfx_twim_xfer+0x21e>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   3355a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3355c:	68ea      	ldr	r2, [r5, #12]
   3355e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   33562:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   33566:	692b      	ldr	r3, [r5, #16]
   33568:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   3356c:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   33570:	f47f af10 	bne.w	33394 <nrfx_twim_xfer+0xa8>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   33574:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   33576:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   3357a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   3357e:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   33582:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   33586:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   33588:	2202      	movs	r2, #2
   3358a:	fb03 8309 	mla	r3, r3, r9, r8
   3358e:	e012      	b.n	335b6 <nrfx_twim_xfer+0x2ca>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   33590:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   33592:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   33594:	f016 0f20 	tst.w	r6, #32
   33598:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3359c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   335a0:	f04f 0334 	mov.w	r3, #52	; 0x34
   335a4:	d00b      	beq.n	335be <nrfx_twim_xfer+0x2d2>
    p_reg->SHORTS = mask;
   335a6:	f44f 7280 	mov.w	r2, #256	; 0x100
   335aa:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   335ae:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   335b2:	fb03 8309 	mla	r3, r3, r9, r8
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   335b6:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   335b8:	2301      	movs	r3, #1
   335ba:	6223      	str	r3, [r4, #32]
   335bc:	e78e      	b.n	334dc <nrfx_twim_xfer+0x1f0>
    p_reg->SHORTS = mask;
   335be:	f44f 7200 	mov.w	r2, #512	; 0x200
   335c2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   335c6:	e7df      	b.n	33588 <nrfx_twim_xfer+0x29c>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   335c8:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   335ca:	68ea      	ldr	r2, [r5, #12]
   335cc:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   335d0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   335d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   335d8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   335dc:	2334      	movs	r3, #52	; 0x34
   335de:	2202      	movs	r2, #2
   335e0:	fb03 8309 	mla	r3, r3, r9, r8
   335e4:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   335e6:	2301      	movs	r3, #1
   335e8:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   335ea:	2300      	movs	r3, #0
   335ec:	e777      	b.n	334de <nrfx_twim_xfer+0x1f2>
    switch (p_xfer_desc->type)
   335ee:	2308      	movs	r3, #8
   335f0:	4f06      	ldr	r7, [pc, #24]	; (3360c <nrfx_twim_xfer+0x320>)
   335f2:	e775      	b.n	334e0 <nrfx_twim_xfer+0x1f4>
   335f4:	0004bb3f 	.word	0x0004bb3f
   335f8:	00044263 	.word	0x00044263
   335fc:	0bad000a 	.word	0x0bad000a
   33600:	019c0202 	.word	0x019c0202
   33604:	0bad000b 	.word	0x0bad000b
   33608:	0bad0000 	.word	0x0bad0000
   3360c:	0bad0004 	.word	0x0bad0004
   33610:	2001a434 	.word	0x2001a434
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   33614:	0772      	lsls	r2, r6, #29
            p_cb->int_mask = 0;
   33616:	bf44      	itt	mi
   33618:	2300      	movmi	r3, #0
   3361a:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   3361c:	0673      	lsls	r3, r6, #25
   3361e:	d406      	bmi.n	3362e <nrfx_twim_xfer+0x342>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   33620:	2334      	movs	r3, #52	; 0x34
   33622:	fb03 8309 	mla	r3, r3, r9, r8
   33626:	689a      	ldr	r2, [r3, #8]
   33628:	f042 0202 	orr.w	r2, r2, #2
   3362c:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   3362e:	2334      	movs	r3, #52	; 0x34
   33630:	fb03 8809 	mla	r8, r3, r9, r8
   33634:	f8d8 3008 	ldr.w	r3, [r8, #8]
   33638:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   3363c:	f8c8 3008 	str.w	r3, [r8, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   33640:	f8d8 3008 	ldr.w	r3, [r8, #8]
    p_reg->INTENSET = mask;
   33644:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   33648:	e6a5      	b.n	33396 <nrfx_twim_xfer+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3364a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   3364e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   33652:	2301      	movs	r3, #1
   33654:	e763      	b.n	3351e <nrfx_twim_xfer+0x232>
        } while (!transmission_finished);
   33656:	2b00      	cmp	r3, #0
   33658:	f43f af57 	beq.w	3350a <nrfx_twim_xfer+0x21e>
        p_cb->busy = false;
   3365c:	2134      	movs	r1, #52	; 0x34
   3365e:	2000      	movs	r0, #0
   33660:	fb01 8209 	mla	r2, r1, r9, r8
    uint32_t error_source = p_reg->ERRORSRC;
   33664:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   33668:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   3366c:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   33670:	b18b      	cbz	r3, 33696 <nrfx_twim_xfer+0x3aa>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   33672:	4a0f      	ldr	r2, [pc, #60]	; (336b0 <nrfx_twim_xfer+0x3c4>)
   33674:	f013 0f01 	tst.w	r3, #1
   33678:	4f0e      	ldr	r7, [pc, #56]	; (336b4 <nrfx_twim_xfer+0x3c8>)
   3367a:	bf18      	it	ne
   3367c:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   3367e:	f013 0f02 	tst.w	r3, #2
   33682:	f102 0201 	add.w	r2, r2, #1
   33686:	bf18      	it	ne
   33688:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   3368a:	f013 0f04 	tst.w	r3, #4
   3368e:	4b0a      	ldr	r3, [pc, #40]	; (336b8 <nrfx_twim_xfer+0x3cc>)
   33690:	bf18      	it	ne
   33692:	461f      	movne	r7, r3
   33694:	e67f      	b.n	33396 <nrfx_twim_xfer+0xaa>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   33696:	0673      	lsls	r3, r6, #25
   33698:	f53f ae7d 	bmi.w	33396 <nrfx_twim_xfer+0xaa>
                !xfer_completeness_check(p_twim, p_cb))
   3369c:	4620      	mov	r0, r4
   3369e:	fb09 8101 	mla	r1, r9, r1, r8
   336a2:	f00c fcef 	bl	40084 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   336a6:	4b03      	ldr	r3, [pc, #12]	; (336b4 <nrfx_twim_xfer+0x3c8>)
   336a8:	2800      	cmp	r0, #0
   336aa:	bf08      	it	eq
   336ac:	461f      	moveq	r7, r3
   336ae:	e672      	b.n	33396 <nrfx_twim_xfer+0xaa>
   336b0:	0bae0000 	.word	0x0bae0000
   336b4:	0bad0001 	.word	0x0bad0001
   336b8:	0bae0002 	.word	0x0bae0002

000336bc <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   336bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   336be:	4c61      	ldr	r4, [pc, #388]	; (33844 <nrfx_twim_2_irq_handler+0x188>)
{
   336c0:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   336c2:	6823      	ldr	r3, [r4, #0]
   336c4:	b953      	cbnz	r3, 336dc <nrfx_twim_2_irq_handler+0x20>
   336c6:	4960      	ldr	r1, [pc, #384]	; (33848 <nrfx_twim_2_irq_handler+0x18c>)
   336c8:	4860      	ldr	r0, [pc, #384]	; (3384c <nrfx_twim_2_irq_handler+0x190>)
   336ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   336ce:	f009 fac4 	bl	3cc5a <assert_print>
   336d2:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   336d6:	485c      	ldr	r0, [pc, #368]	; (33848 <nrfx_twim_2_irq_handler+0x18c>)
   336d8:	f009 fab8 	bl	3cc4c <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   336dc:	4d5c      	ldr	r5, [pc, #368]	; (33850 <nrfx_twim_2_irq_handler+0x194>)
   336de:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   336e2:	b1fb      	cbz	r3, 33724 <nrfx_twim_2_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   336e4:	2300      	movs	r3, #0
   336e6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   336ea:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   336ee:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   336f2:	b9bb      	cbnz	r3, 33724 <nrfx_twim_2_irq_handler+0x68>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   336f4:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   336f6:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   336fa:	2302      	movs	r3, #2
   336fc:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   336fe:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   33700:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   33704:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   33708:	b11b      	cbz	r3, 33712 <nrfx_twim_2_irq_handler+0x56>
    return p_reg->SHORTS;
   3370a:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   3370e:	059e      	lsls	r6, r3, #22
   33710:	d403      	bmi.n	3371a <nrfx_twim_2_irq_handler+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33712:	2201      	movs	r2, #1
   33714:	4b4e      	ldr	r3, [pc, #312]	; (33850 <nrfx_twim_2_irq_handler+0x194>)
   33716:	621a      	str	r2, [r3, #32]
   33718:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   3371a:	2301      	movs	r3, #1
   3371c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   33720:	b007      	add	sp, #28
   33722:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   33724:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   33728:	2b00      	cmp	r3, #0
   3372a:	d054      	beq.n	337d6 <nrfx_twim_2_irq_handler+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3372c:	2300      	movs	r3, #0
   3372e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   33732:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   33736:	6a23      	ldr	r3, [r4, #32]
   33738:	065d      	lsls	r5, r3, #25
   3373a:	d40a      	bmi.n	33752 <nrfx_twim_2_irq_handler+0x96>
   3373c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   33740:	b93b      	cbnz	r3, 33752 <nrfx_twim_2_irq_handler+0x96>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   33742:	4940      	ldr	r1, [pc, #256]	; (33844 <nrfx_twim_2_irq_handler+0x188>)
   33744:	4842      	ldr	r0, [pc, #264]	; (33850 <nrfx_twim_2_irq_handler+0x194>)
   33746:	f00c fc9d 	bl	40084 <xfer_completeness_check>
   3374a:	f080 0001 	eor.w	r0, r0, #1
   3374e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   33752:	6a23      	ldr	r3, [r4, #32]
   33754:	f013 0704 	ands.w	r7, r3, #4
   33758:	d122      	bne.n	337a0 <nrfx_twim_2_irq_handler+0xe4>
            event.xfer_desc = p_cb->xfer_desc;
   3375a:	4e3e      	ldr	r6, [pc, #248]	; (33854 <nrfx_twim_2_irq_handler+0x198>)
   3375c:	ad01      	add	r5, sp, #4
   3375e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   33760:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   33762:	6833      	ldr	r3, [r6, #0]
            if (!p_cb->repeated || p_cb->error)
   33764:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   33768:	602b      	str	r3, [r5, #0]
   3376a:	4b39      	ldr	r3, [pc, #228]	; (33850 <nrfx_twim_2_irq_handler+0x194>)
   3376c:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   33770:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   33774:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   33778:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   3377c:	f1bc 0f00 	cmp.w	ip, #0
   33780:	d002      	beq.n	33788 <nrfx_twim_2_irq_handler+0xcc>
   33782:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   33786:	b15a      	cbz	r2, 337a0 <nrfx_twim_2_irq_handler+0xe4>
    p_reg->SHORTS = mask;
   33788:	2200      	movs	r2, #0
   3378a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   3378e:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   33790:	4a31      	ldr	r2, [pc, #196]	; (33858 <nrfx_twim_2_irq_handler+0x19c>)
   33792:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   33796:	f44f 6280 	mov.w	r2, #1024	; 0x400
   3379a:	4b30      	ldr	r3, [pc, #192]	; (3385c <nrfx_twim_2_irq_handler+0x1a0>)
   3379c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   337a0:	4a2b      	ldr	r2, [pc, #172]	; (33850 <nrfx_twim_2_irq_handler+0x194>)
   337a2:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   337a6:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   337a8:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   337ac:	d53c      	bpl.n	33828 <nrfx_twim_2_irq_handler+0x16c>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   337ae:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   337b0:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   337b4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   337b8:	b90b      	cbnz	r3, 337be <nrfx_twim_2_irq_handler+0x102>
        p_cb->busy = false;
   337ba:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   337be:	6a23      	ldr	r3, [r4, #32]
   337c0:	075b      	lsls	r3, r3, #29
   337c2:	d503      	bpl.n	337cc <nrfx_twim_2_irq_handler+0x110>
   337c4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   337c8:	2b00      	cmp	r3, #0
   337ca:	d0a9      	beq.n	33720 <nrfx_twim_2_irq_handler+0x64>
        p_cb->handler(&event, p_cb->p_context);
   337cc:	e9d4 3100 	ldrd	r3, r1, [r4]
   337d0:	4668      	mov	r0, sp
   337d2:	4798      	blx	r3
}
   337d4:	e7a4      	b.n	33720 <nrfx_twim_2_irq_handler+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   337d6:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   337da:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   337de:	7b23      	ldrb	r3, [r4, #12]
   337e0:	b983      	cbnz	r3, 33804 <nrfx_twim_2_irq_handler+0x148>
            event.xfer_desc = p_cb->xfer_desc;
   337e2:	4f1c      	ldr	r7, [pc, #112]	; (33854 <nrfx_twim_2_irq_handler+0x198>)
   337e4:	ae01      	add	r6, sp, #4
   337e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   337e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   337ea:	683b      	ldr	r3, [r7, #0]
   337ec:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   337ee:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   337f2:	2b00      	cmp	r3, #0
   337f4:	d1d4      	bne.n	337a0 <nrfx_twim_2_irq_handler+0xe4>
    p_reg->SHORTS = mask;
   337f6:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   337fa:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   337fc:	4b16      	ldr	r3, [pc, #88]	; (33858 <nrfx_twim_2_irq_handler+0x19c>)
   337fe:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   33802:	e7c8      	b.n	33796 <nrfx_twim_2_irq_handler+0xda>
    p_reg->SHORTS = mask;
   33804:	f44f 7300 	mov.w	r3, #512	; 0x200
   33808:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   3380c:	f240 2302 	movw	r3, #514	; 0x202
   33810:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   33812:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   33816:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   3381a:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   3381c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33820:	2301      	movs	r3, #1
   33822:	60ab      	str	r3, [r5, #8]
   33824:	622b      	str	r3, [r5, #32]
            return;
   33826:	e77b      	b.n	33720 <nrfx_twim_2_irq_handler+0x64>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   33828:	0759      	lsls	r1, r3, #29
   3382a:	d501      	bpl.n	33830 <nrfx_twim_2_irq_handler+0x174>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   3382c:	2302      	movs	r3, #2
   3382e:	e7bf      	b.n	337b0 <nrfx_twim_2_irq_handler+0xf4>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   33830:	07da      	lsls	r2, r3, #31
   33832:	d501      	bpl.n	33838 <nrfx_twim_2_irq_handler+0x17c>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   33834:	2303      	movs	r3, #3
   33836:	e7bb      	b.n	337b0 <nrfx_twim_2_irq_handler+0xf4>
    else if (p_cb->error)
   33838:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   3383c:	2b00      	cmp	r3, #0
   3383e:	d0b7      	beq.n	337b0 <nrfx_twim_2_irq_handler+0xf4>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   33840:	2304      	movs	r3, #4
   33842:	e7b5      	b.n	337b0 <nrfx_twim_2_irq_handler+0xf4>
   33844:	2001a434 	.word	0x2001a434
   33848:	0004bb3f 	.word	0x0004bb3f
   3384c:	00044263 	.word	0x00044263
   33850:	4000a000 	.word	0x4000a000
   33854:	2001a440 	.word	0x2001a440
   33858:	019c0202 	.word	0x019c0202
   3385c:	e000e100 	.word	0xe000e100

00033860 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33860:	6803      	ldr	r3, [r0, #0]
{
   33862:	b510      	push	{r4, lr}
    switch (port)
   33864:	095a      	lsrs	r2, r3, #5
   33866:	bf0c      	ite	eq
   33868:	f04f 32ff 	moveq.w	r2, #4294967295
   3386c:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   3386e:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   33872:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33876:	07db      	lsls	r3, r3, #31
{
   33878:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   3387a:	d40a      	bmi.n	33892 <nrf_gpio_pin_port_decode+0x32>
   3387c:	490e      	ldr	r1, [pc, #56]	; (338b8 <nrf_gpio_pin_port_decode+0x58>)
   3387e:	480f      	ldr	r0, [pc, #60]	; (338bc <nrf_gpio_pin_port_decode+0x5c>)
   33880:	f240 2229 	movw	r2, #553	; 0x229
   33884:	f009 f9e9 	bl	3cc5a <assert_print>
   33888:	f240 2129 	movw	r1, #553	; 0x229
   3388c:	480a      	ldr	r0, [pc, #40]	; (338b8 <nrf_gpio_pin_port_decode+0x58>)
   3388e:	f009 f9dd 	bl	3cc4c <assert_post_action>
    uint32_t pin_number = *p_pin;
   33892:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   33894:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   33898:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   3389a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   3389c:	d00a      	beq.n	338b4 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   3389e:	4906      	ldr	r1, [pc, #24]	; (338b8 <nrf_gpio_pin_port_decode+0x58>)
   338a0:	4806      	ldr	r0, [pc, #24]	; (338bc <nrf_gpio_pin_port_decode+0x5c>)
   338a2:	f240 222e 	movw	r2, #558	; 0x22e
   338a6:	f009 f9d8 	bl	3cc5a <assert_print>
   338aa:	f240 212e 	movw	r1, #558	; 0x22e
   338ae:	4802      	ldr	r0, [pc, #8]	; (338b8 <nrf_gpio_pin_port_decode+0x58>)
   338b0:	f009 f9cc 	bl	3cc4c <assert_post_action>
}
   338b4:	4802      	ldr	r0, [pc, #8]	; (338c0 <nrf_gpio_pin_port_decode+0x60>)
   338b6:	bd10      	pop	{r4, pc}
   338b8:	00044e46 	.word	0x00044e46
   338bc:	00044263 	.word	0x00044263
   338c0:	40842500 	.word	0x40842500

000338c4 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   338c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   338c6:	460c      	mov	r4, r1
   338c8:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   338ca:	f00c fc0b 	bl	400e4 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   338ce:	4620      	mov	r0, r4
   338d0:	f00c fc08 	bl	400e4 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   338d4:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   338d6:	f240 650d 	movw	r5, #1549	; 0x60d
   338da:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   338dc:	f7ff ffc0 	bl	33860 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   338e0:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   338e2:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   338e4:	3380      	adds	r3, #128	; 0x80
   338e6:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   338ea:	a801      	add	r0, sp, #4
   338ec:	9401      	str	r4, [sp, #4]
   338ee:	f7ff ffb7 	bl	33860 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   338f2:	9b01      	ldr	r3, [sp, #4]
   338f4:	3380      	adds	r3, #128	; 0x80
   338f6:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   338fa:	2004      	movs	r0, #4
   338fc:	f00c fb42 	bl	3ff84 <nrfx_busy_wait>
   33900:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33902:	a801      	add	r0, sp, #4
   33904:	9401      	str	r4, [sp, #4]
   33906:	f7ff ffab 	bl	33860 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3390a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   3390c:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3390e:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   33910:	07db      	lsls	r3, r3, #31
   33912:	d414      	bmi.n	3393e <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33914:	a801      	add	r0, sp, #4
   33916:	9601      	str	r6, [sp, #4]
   33918:	f7ff ffa2 	bl	33860 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3391c:	9b01      	ldr	r3, [sp, #4]
    for (uint8_t i = 0; i < 9; i++)
   3391e:	3d01      	subs	r5, #1
   33920:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   33924:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   33926:	2004      	movs	r0, #4
   33928:	f00c fb2c 	bl	3ff84 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   3392c:	4630      	mov	r0, r6
   3392e:	f00c fbd9 	bl	400e4 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   33932:	2004      	movs	r0, #4
   33934:	f00c fb26 	bl	3ff84 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   33938:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   3393c:	d1e1      	bne.n	33902 <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3393e:	a801      	add	r0, sp, #4
   33940:	9401      	str	r4, [sp, #4]
   33942:	f7ff ff8d 	bl	33860 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   33946:	2301      	movs	r3, #1
   33948:	9a01      	ldr	r2, [sp, #4]
   3394a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   3394c:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   3394e:	2004      	movs	r0, #4
   33950:	f00c fb18 	bl	3ff84 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   33954:	4620      	mov	r0, r4
   33956:	f00c fbc5 	bl	400e4 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   3395a:	2004      	movs	r0, #4
   3395c:	f00c fb12 	bl	3ff84 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33960:	a801      	add	r0, sp, #4
   33962:	9401      	str	r4, [sp, #4]
   33964:	f7ff ff7c 	bl	33860 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   33968:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   3396a:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   3396c:	4803      	ldr	r0, [pc, #12]	; (3397c <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3396e:	40d3      	lsrs	r3, r2
   33970:	f003 0301 	and.w	r3, r3, #1
   33974:	1ac0      	subs	r0, r0, r3
   33976:	b003      	add	sp, #12
   33978:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3397a:	bf00      	nop
   3397c:	0bad0001 	.word	0x0bad0001

00033980 <rpc_handle_data_message>:
   33980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33984:	4680      	mov	r8, r0
   33986:	4605      	mov	r5, r0
   33988:	2404      	movs	r4, #4
   3398a:	f858 7b08 	ldr.w	r7, [r8], #8
   3398e:	4e0c      	ldr	r6, [pc, #48]	; (339c0 <rpc_handle_data_message+0x40>)
   33990:	b2ff      	uxtb	r7, r7
   33992:	7833      	ldrb	r3, [r6, #0]
   33994:	42bb      	cmp	r3, r7
   33996:	d009      	beq.n	339ac <rpc_handle_data_message+0x2c>
   33998:	3c01      	subs	r4, #1
   3399a:	f106 060c 	add.w	r6, r6, #12
   3399e:	d1f8      	bne.n	33992 <rpc_handle_data_message+0x12>
   339a0:	68a8      	ldr	r0, [r5, #8]
   339a2:	b108      	cbz	r0, 339a8 <rpc_handle_data_message+0x28>
   339a4:	f00c fbee 	bl	40184 <rpc_transport_peer_data_free>
   339a8:	4620      	mov	r0, r4
   339aa:	e006      	b.n	339ba <rpc_handle_data_message+0x3a>
   339ac:	6829      	ldr	r1, [r5, #0]
   339ae:	4640      	mov	r0, r8
   339b0:	6873      	ldr	r3, [r6, #4]
   339b2:	0c09      	lsrs	r1, r1, #16
   339b4:	4798      	blx	r3
   339b6:	2802      	cmp	r0, #2
   339b8:	d0ee      	beq.n	33998 <rpc_handle_data_message+0x18>
   339ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   339be:	bf00      	nop
   339c0:	000432d8 	.word	0x000432d8

000339c4 <trace_write>:
   339c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   339c8:	7803      	ldrb	r3, [r0, #0]
   339ca:	4605      	mov	r5, r0
   339cc:	2b62      	cmp	r3, #98	; 0x62
   339ce:	d045      	beq.n	33a5c <trace_write+0x98>
   339d0:	2b63      	cmp	r3, #99	; 0x63
   339d2:	d048      	beq.n	33a66 <trace_write+0xa2>
   339d4:	2b61      	cmp	r3, #97	; 0x61
   339d6:	f040 8083 	bne.w	33ae0 <trace_write+0x11c>
   339da:	4b42      	ldr	r3, [pc, #264]	; (33ae4 <trace_write+0x120>)
   339dc:	8819      	ldrh	r1, [r3, #0]
   339de:	4b42      	ldr	r3, [pc, #264]	; (33ae8 <trace_write+0x124>)
   339e0:	b289      	uxth	r1, r1
   339e2:	6928      	ldr	r0, [r5, #16]
   339e4:	f8d5 800c 	ldr.w	r8, [r5, #12]
   339e8:	68aa      	ldr	r2, [r5, #8]
   339ea:	eba0 0708 	sub.w	r7, r0, r8
   339ee:	eba2 0208 	sub.w	r2, r2, r8
   339f2:	b2bf      	uxth	r7, r7
   339f4:	fa11 f282 	uxtah	r2, r1, r2
   339f8:	fbb2 f1f7 	udiv	r1, r2, r7
   339fc:	681b      	ldr	r3, [r3, #0]
   339fe:	fb07 2211 	mls	r2, r7, r1, r2
   33a02:	eba3 0308 	sub.w	r3, r3, r8
   33a06:	b29b      	uxth	r3, r3
   33a08:	1a9b      	subs	r3, r3, r2
   33a0a:	443b      	add	r3, r7
   33a0c:	fb93 f1f7 	sdiv	r1, r3, r7
   33a10:	fb07 3311 	mls	r3, r7, r1, r3
   33a14:	fa1f f983 	uxth.w	r9, r3
   33a18:	fa12 f383 	uxtah	r3, r2, r3
   33a1c:	429f      	cmp	r7, r3
   33a1e:	4490      	add	r8, r2
   33a20:	bfbf      	itttt	lt
   33a22:	eba0 0008 	sublt.w	r0, r0, r8
   33a26:	b280      	uxthlt	r0, r0
   33a28:	eba9 0400 	sublt.w	r4, r9, r0
   33a2c:	4681      	movlt	r9, r0
   33a2e:	bfac      	ite	ge
   33a30:	2400      	movge	r4, #0
   33a32:	b2a4      	uxthlt	r4, r4
   33a34:	f1b9 0f00 	cmp.w	r9, #0
   33a38:	d052      	beq.n	33ae0 <trace_write+0x11c>
   33a3a:	2005      	movs	r0, #5
   33a3c:	f7f2 f8a6 	bl	25b8c <nrf_modem_os_trace_alloc>
   33a40:	4607      	mov	r7, r0
   33a42:	2800      	cmp	r0, #0
   33a44:	d04c      	beq.n	33ae0 <trace_write+0x11c>
   33a46:	b19c      	cbz	r4, 33a70 <trace_write+0xac>
   33a48:	2005      	movs	r0, #5
   33a4a:	f7f2 f89f 	bl	25b8c <nrf_modem_os_trace_alloc>
   33a4e:	4606      	mov	r6, r0
   33a50:	b970      	cbnz	r0, 33a70 <trace_write+0xac>
   33a52:	4638      	mov	r0, r7
   33a54:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33a58:	f7f2 b8a0 	b.w	25b9c <nrf_modem_os_trace_free>
   33a5c:	4b23      	ldr	r3, [pc, #140]	; (33aec <trace_write+0x128>)
   33a5e:	8819      	ldrh	r1, [r3, #0]
   33a60:	4b23      	ldr	r3, [pc, #140]	; (33af0 <trace_write+0x12c>)
   33a62:	b289      	uxth	r1, r1
   33a64:	e7bd      	b.n	339e2 <trace_write+0x1e>
   33a66:	4b23      	ldr	r3, [pc, #140]	; (33af4 <trace_write+0x130>)
   33a68:	8819      	ldrh	r1, [r3, #0]
   33a6a:	4b23      	ldr	r3, [pc, #140]	; (33af8 <trace_write+0x134>)
   33a6c:	b289      	uxth	r1, r1
   33a6e:	e7b8      	b.n	339e2 <trace_write+0x1e>
   33a70:	782a      	ldrb	r2, [r5, #0]
   33a72:	2a62      	cmp	r2, #98	; 0x62
   33a74:	d030      	beq.n	33ad8 <trace_write+0x114>
   33a76:	2a63      	cmp	r2, #99	; 0x63
   33a78:	d030      	beq.n	33adc <trace_write+0x118>
   33a7a:	2a61      	cmp	r2, #97	; 0x61
   33a7c:	d107      	bne.n	33a8e <trace_write+0xca>
   33a7e:	4919      	ldr	r1, [pc, #100]	; (33ae4 <trace_write+0x120>)
   33a80:	880b      	ldrh	r3, [r1, #0]
   33a82:	eb09 0004 	add.w	r0, r9, r4
   33a86:	fa10 f383 	uxtah	r3, r0, r3
   33a8a:	b29b      	uxth	r3, r3
   33a8c:	800b      	strh	r3, [r1, #0]
   33a8e:	f06f 0b10 	mvn.w	fp, #16
   33a92:	f06f 0a41 	mvn.w	sl, #65	; 0x41
   33a96:	2105      	movs	r1, #5
   33a98:	4638      	mov	r0, r7
   33a9a:	f887 b000 	strb.w	fp, [r7]
   33a9e:	f887 a001 	strb.w	sl, [r7, #1]
   33aa2:	713a      	strb	r2, [r7, #4]
   33aa4:	f8a7 9002 	strh.w	r9, [r7, #2]
   33aa8:	f00b fa3a 	bl	3ef20 <nrf_modem_os_trace_put>
   33aac:	4649      	mov	r1, r9
   33aae:	4640      	mov	r0, r8
   33ab0:	f00b fa36 	bl	3ef20 <nrf_modem_os_trace_put>
   33ab4:	b1a4      	cbz	r4, 33ae0 <trace_write+0x11c>
   33ab6:	f886 b000 	strb.w	fp, [r6]
   33aba:	f886 a001 	strb.w	sl, [r6, #1]
   33abe:	782b      	ldrb	r3, [r5, #0]
   33ac0:	2105      	movs	r1, #5
   33ac2:	4630      	mov	r0, r6
   33ac4:	7133      	strb	r3, [r6, #4]
   33ac6:	8074      	strh	r4, [r6, #2]
   33ac8:	f00b fa2a 	bl	3ef20 <nrf_modem_os_trace_put>
   33acc:	4621      	mov	r1, r4
   33ace:	68e8      	ldr	r0, [r5, #12]
   33ad0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ad4:	f00b ba24 	b.w	3ef20 <nrf_modem_os_trace_put>
   33ad8:	4904      	ldr	r1, [pc, #16]	; (33aec <trace_write+0x128>)
   33ada:	e7d1      	b.n	33a80 <trace_write+0xbc>
   33adc:	4905      	ldr	r1, [pc, #20]	; (33af4 <trace_write+0x130>)
   33ade:	e7cf      	b.n	33a80 <trace_write+0xbc>
   33ae0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33ae4:	2001a598 	.word	0x2001a598
   33ae8:	2001a470 	.word	0x2001a470
   33aec:	2001a594 	.word	0x2001a594
   33af0:	2001a468 	.word	0x2001a468
   33af4:	2001a596 	.word	0x2001a596
   33af8:	2001a46c 	.word	0x2001a46c

00033afc <ipc_trace_init>:
   33afc:	2300      	movs	r3, #0
   33afe:	4a04      	ldr	r2, [pc, #16]	; (33b10 <ipc_trace_init+0x14>)
   33b00:	8013      	strh	r3, [r2, #0]
   33b02:	4a04      	ldr	r2, [pc, #16]	; (33b14 <ipc_trace_init+0x18>)
   33b04:	8013      	strh	r3, [r2, #0]
   33b06:	4a04      	ldr	r2, [pc, #16]	; (33b18 <ipc_trace_init+0x1c>)
   33b08:	8013      	strh	r3, [r2, #0]
   33b0a:	4b04      	ldr	r3, [pc, #16]	; (33b1c <ipc_trace_init+0x20>)
   33b0c:	6018      	str	r0, [r3, #0]
   33b0e:	4770      	bx	lr
   33b10:	2001a598 	.word	0x2001a598
   33b14:	2001a594 	.word	0x2001a594
   33b18:	2001a596 	.word	0x2001a596
   33b1c:	2001a480 	.word	0x2001a480

00033b20 <nrf_modem_trace_irq_handler>:
   33b20:	b508      	push	{r3, lr}
   33b22:	4b10      	ldr	r3, [pc, #64]	; (33b64 <nrf_modem_trace_irq_handler+0x44>)
   33b24:	781b      	ldrb	r3, [r3, #0]
   33b26:	b90b      	cbnz	r3, 33b2c <nrf_modem_trace_irq_handler+0xc>
   33b28:	f7f2 f804 	bl	25b34 <nrf_modem_os_trace_irq_clear>
   33b2c:	4b0e      	ldr	r3, [pc, #56]	; (33b68 <nrf_modem_trace_irq_handler+0x48>)
   33b2e:	6818      	ldr	r0, [r3, #0]
   33b30:	6842      	ldr	r2, [r0, #4]
   33b32:	6883      	ldr	r3, [r0, #8]
   33b34:	429a      	cmp	r2, r3
   33b36:	d001      	beq.n	33b3c <nrf_modem_trace_irq_handler+0x1c>
   33b38:	f7ff ff44 	bl	339c4 <trace_write>
   33b3c:	4b0b      	ldr	r3, [pc, #44]	; (33b6c <nrf_modem_trace_irq_handler+0x4c>)
   33b3e:	6818      	ldr	r0, [r3, #0]
   33b40:	6882      	ldr	r2, [r0, #8]
   33b42:	6843      	ldr	r3, [r0, #4]
   33b44:	429a      	cmp	r2, r3
   33b46:	d001      	beq.n	33b4c <nrf_modem_trace_irq_handler+0x2c>
   33b48:	f7ff ff3c 	bl	339c4 <trace_write>
   33b4c:	4b08      	ldr	r3, [pc, #32]	; (33b70 <nrf_modem_trace_irq_handler+0x50>)
   33b4e:	6818      	ldr	r0, [r3, #0]
   33b50:	6882      	ldr	r2, [r0, #8]
   33b52:	6843      	ldr	r3, [r0, #4]
   33b54:	429a      	cmp	r2, r3
   33b56:	d003      	beq.n	33b60 <nrf_modem_trace_irq_handler+0x40>
   33b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   33b5c:	f7ff bf32 	b.w	339c4 <trace_write>
   33b60:	bd08      	pop	{r3, pc}
   33b62:	bf00      	nop
   33b64:	2001d3bb 	.word	0x2001d3bb
   33b68:	2001a47c 	.word	0x2001a47c
   33b6c:	2001a474 	.word	0x2001a474
   33b70:	2001a478 	.word	0x2001a478

00033b74 <ipc_trace_handle>:
   33b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33b78:	4b55      	ldr	r3, [pc, #340]	; (33cd0 <ipc_trace_handle+0x15c>)
   33b7a:	681b      	ldr	r3, [r3, #0]
   33b7c:	6919      	ldr	r1, [r3, #16]
   33b7e:	f8d3 b014 	ldr.w	fp, [r3, #20]
   33b82:	7c1a      	ldrb	r2, [r3, #16]
   33b84:	2200      	movs	r2, #0
   33b86:	741a      	strb	r2, [r3, #16]
   33b88:	7c58      	ldrb	r0, [r3, #17]
   33b8a:	745a      	strb	r2, [r3, #17]
   33b8c:	7c98      	ldrb	r0, [r3, #18]
   33b8e:	749a      	strb	r2, [r3, #18]
   33b90:	7cd8      	ldrb	r0, [r3, #19]
   33b92:	74da      	strb	r2, [r3, #19]
   33b94:	7d18      	ldrb	r0, [r3, #20]
   33b96:	751a      	strb	r2, [r3, #20]
   33b98:	7d58      	ldrb	r0, [r3, #21]
   33b9a:	755a      	strb	r2, [r3, #21]
   33b9c:	7d98      	ldrb	r0, [r3, #22]
   33b9e:	759a      	strb	r2, [r3, #22]
   33ba0:	7dd8      	ldrb	r0, [r3, #23]
   33ba2:	75da      	strb	r2, [r3, #23]
   33ba4:	2900      	cmp	r1, #0
   33ba6:	d047      	beq.n	33c38 <ipc_trace_handle+0xc4>
   33ba8:	3901      	subs	r1, #1
   33baa:	2903      	cmp	r1, #3
   33bac:	d844      	bhi.n	33c38 <ipc_trace_handle+0xc4>
   33bae:	e8df f001 	tbb	[pc, r1]
   33bb2:	7b02      	.short	0x7b02
   33bb4:	6962      	.short	0x6962
   33bb6:	4a47      	ldr	r2, [pc, #284]	; (33cd4 <ipc_trace_handle+0x160>)
   33bb8:	7811      	ldrb	r1, [r2, #0]
   33bba:	b109      	cbz	r1, 33bc0 <ipc_trace_handle+0x4c>
   33bbc:	2100      	movs	r1, #0
   33bbe:	7011      	strb	r1, [r2, #0]
   33bc0:	2100      	movs	r1, #0
   33bc2:	468e      	mov	lr, r1
   33bc4:	468a      	mov	sl, r1
   33bc6:	4608      	mov	r0, r1
   33bc8:	f8db 2008 	ldr.w	r2, [fp, #8]
   33bcc:	4d42      	ldr	r5, [pc, #264]	; (33cd8 <ipc_trace_handle+0x164>)
   33bce:	9201      	str	r2, [sp, #4]
   33bd0:	4a42      	ldr	r2, [pc, #264]	; (33cdc <ipc_trace_handle+0x168>)
   33bd2:	682e      	ldr	r6, [r5, #0]
   33bd4:	6812      	ldr	r2, [r2, #0]
   33bd6:	9200      	str	r2, [sp, #0]
   33bd8:	4a41      	ldr	r2, [pc, #260]	; (33ce0 <ipc_trace_handle+0x16c>)
   33bda:	f8d2 c000 	ldr.w	ip, [r2]
   33bde:	4a41      	ldr	r2, [pc, #260]	; (33ce4 <ipc_trace_handle+0x170>)
   33be0:	6817      	ldr	r7, [r2, #0]
   33be2:	4a41      	ldr	r2, [pc, #260]	; (33ce8 <ipc_trace_handle+0x174>)
   33be4:	f8d2 9000 	ldr.w	r9, [r2]
   33be8:	4a40      	ldr	r2, [pc, #256]	; (33cec <ipc_trace_handle+0x178>)
   33bea:	f8d2 8000 	ldr.w	r8, [r2]
   33bee:	9a01      	ldr	r2, [sp, #4]
   33bf0:	4282      	cmp	r2, r0
   33bf2:	d124      	bne.n	33c3e <ipc_trace_handle+0xca>
   33bf4:	f1ba 0f00 	cmp.w	sl, #0
   33bf8:	d005      	beq.n	33c06 <ipc_trace_handle+0x92>
   33bfa:	4a3b      	ldr	r2, [pc, #236]	; (33ce8 <ipc_trace_handle+0x174>)
   33bfc:	f8c2 9000 	str.w	r9, [r2]
   33c00:	4a3a      	ldr	r2, [pc, #232]	; (33cec <ipc_trace_handle+0x178>)
   33c02:	f8c2 8000 	str.w	r8, [r2]
   33c06:	f1be 0f00 	cmp.w	lr, #0
   33c0a:	d004      	beq.n	33c16 <ipc_trace_handle+0xa2>
   33c0c:	4a34      	ldr	r2, [pc, #208]	; (33ce0 <ipc_trace_handle+0x16c>)
   33c0e:	f8c2 c000 	str.w	ip, [r2]
   33c12:	4a34      	ldr	r2, [pc, #208]	; (33ce4 <ipc_trace_handle+0x170>)
   33c14:	6017      	str	r7, [r2, #0]
   33c16:	b119      	cbz	r1, 33c20 <ipc_trace_handle+0xac>
   33c18:	4a30      	ldr	r2, [pc, #192]	; (33cdc <ipc_trace_handle+0x168>)
   33c1a:	9900      	ldr	r1, [sp, #0]
   33c1c:	602e      	str	r6, [r5, #0]
   33c1e:	6011      	str	r1, [r2, #0]
   33c20:	7a1a      	ldrb	r2, [r3, #8]
   33c22:	2101      	movs	r1, #1
   33c24:	2200      	movs	r2, #0
   33c26:	7219      	strb	r1, [r3, #8]
   33c28:	7a59      	ldrb	r1, [r3, #9]
   33c2a:	725a      	strb	r2, [r3, #9]
   33c2c:	7a99      	ldrb	r1, [r3, #10]
   33c2e:	729a      	strb	r2, [r3, #10]
   33c30:	7ada      	ldrb	r2, [r3, #11]
   33c32:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   33c36:	72da      	strb	r2, [r3, #11]
   33c38:	b003      	add	sp, #12
   33c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c3e:	1c82      	adds	r2, r0, #2
   33c40:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
   33c44:	6852      	ldr	r2, [r2, #4]
   33c46:	7814      	ldrb	r4, [r2, #0]
   33c48:	2c62      	cmp	r4, #98	; 0x62
   33c4a:	d00a      	beq.n	33c62 <ipc_trace_handle+0xee>
   33c4c:	2c63      	cmp	r4, #99	; 0x63
   33c4e:	d00d      	beq.n	33c6c <ipc_trace_handle+0xf8>
   33c50:	2c61      	cmp	r4, #97	; 0x61
   33c52:	d104      	bne.n	33c5e <ipc_trace_handle+0xea>
   33c54:	4691      	mov	r9, r2
   33c56:	f04f 0a01 	mov.w	sl, #1
   33c5a:	f8d2 8004 	ldr.w	r8, [r2, #4]
   33c5e:	3001      	adds	r0, #1
   33c60:	e7c5      	b.n	33bee <ipc_trace_handle+0x7a>
   33c62:	4694      	mov	ip, r2
   33c64:	f04f 0e01 	mov.w	lr, #1
   33c68:	6857      	ldr	r7, [r2, #4]
   33c6a:	e7f8      	b.n	33c5e <ipc_trace_handle+0xea>
   33c6c:	6851      	ldr	r1, [r2, #4]
   33c6e:	4616      	mov	r6, r2
   33c70:	9100      	str	r1, [sp, #0]
   33c72:	2101      	movs	r1, #1
   33c74:	e7f3      	b.n	33c5e <ipc_trace_handle+0xea>
   33c76:	2101      	movs	r1, #1
   33c78:	4a16      	ldr	r2, [pc, #88]	; (33cd4 <ipc_trace_handle+0x160>)
   33c7a:	7011      	strb	r1, [r2, #0]
   33c7c:	7a1a      	ldrb	r2, [r3, #8]
   33c7e:	2103      	movs	r1, #3
   33c80:	2200      	movs	r2, #0
   33c82:	e7d0      	b.n	33c26 <ipc_trace_handle+0xb2>
   33c84:	7a19      	ldrb	r1, [r3, #8]
   33c86:	2104      	movs	r1, #4
   33c88:	7219      	strb	r1, [r3, #8]
   33c8a:	7a59      	ldrb	r1, [r3, #9]
   33c8c:	725a      	strb	r2, [r3, #9]
   33c8e:	7a99      	ldrb	r1, [r3, #10]
   33c90:	729a      	strb	r2, [r3, #10]
   33c92:	7ad9      	ldrb	r1, [r3, #11]
   33c94:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   33c98:	72d9      	strb	r1, [r3, #11]
   33c9a:	4b0e      	ldr	r3, [pc, #56]	; (33cd4 <ipc_trace_handle+0x160>)
   33c9c:	701a      	strb	r2, [r3, #0]
   33c9e:	b003      	add	sp, #12
   33ca0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ca4:	f7ff bf3c 	b.w	33b20 <nrf_modem_trace_irq_handler>
   33ca8:	4b0f      	ldr	r3, [pc, #60]	; (33ce8 <ipc_trace_handle+0x174>)
   33caa:	681b      	ldr	r3, [r3, #0]
   33cac:	685a      	ldr	r2, [r3, #4]
   33cae:	4b0f      	ldr	r3, [pc, #60]	; (33cec <ipc_trace_handle+0x178>)
   33cb0:	601a      	str	r2, [r3, #0]
   33cb2:	4b0b      	ldr	r3, [pc, #44]	; (33ce0 <ipc_trace_handle+0x16c>)
   33cb4:	681b      	ldr	r3, [r3, #0]
   33cb6:	685a      	ldr	r2, [r3, #4]
   33cb8:	4b0a      	ldr	r3, [pc, #40]	; (33ce4 <ipc_trace_handle+0x170>)
   33cba:	601a      	str	r2, [r3, #0]
   33cbc:	4b06      	ldr	r3, [pc, #24]	; (33cd8 <ipc_trace_handle+0x164>)
   33cbe:	681b      	ldr	r3, [r3, #0]
   33cc0:	685a      	ldr	r2, [r3, #4]
   33cc2:	4b06      	ldr	r3, [pc, #24]	; (33cdc <ipc_trace_handle+0x168>)
   33cc4:	601a      	str	r2, [r3, #0]
   33cc6:	b003      	add	sp, #12
   33cc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ccc:	f7f1 bf2a 	b.w	25b24 <nrf_modem_os_trace_irq_set>
   33cd0:	2001a480 	.word	0x2001a480
   33cd4:	2001d3bb 	.word	0x2001d3bb
   33cd8:	2001a478 	.word	0x2001a478
   33cdc:	2001a46c 	.word	0x2001a46c
   33ce0:	2001a474 	.word	0x2001a474
   33ce4:	2001a468 	.word	0x2001a468
   33ce8:	2001a47c 	.word	0x2001a47c
   33cec:	2001a470 	.word	0x2001a470

00033cf0 <rpc_trace_coredump_in_progress>:
   33cf0:	4b01      	ldr	r3, [pc, #4]	; (33cf8 <rpc_trace_coredump_in_progress+0x8>)
   33cf2:	7818      	ldrb	r0, [r3, #0]
   33cf4:	4770      	bx	lr
   33cf6:	bf00      	nop
   33cf8:	2001d3bb 	.word	0x2001d3bb

00033cfc <rpc_transport_ipc_msg_alloc>:
   33cfc:	b570      	push	{r4, r5, r6, lr}
   33cfe:	4616      	mov	r6, r2
   33d00:	2400      	movs	r4, #0
   33d02:	6803      	ldr	r3, [r0, #0]
   33d04:	42a3      	cmp	r3, r4
   33d06:	d101      	bne.n	33d0c <rpc_transport_ipc_msg_alloc+0x10>
   33d08:	2300      	movs	r3, #0
   33d0a:	e01c      	b.n	33d46 <rpc_transport_ipc_msg_alloc+0x4a>
   33d0c:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   33d10:	6855      	ldr	r5, [r2, #4]
   33d12:	b2ed      	uxtb	r5, r5
   33d14:	2d03      	cmp	r5, #3
   33d16:	d118      	bne.n	33d4a <rpc_transport_ipc_msg_alloc+0x4e>
   33d18:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   33d1c:	6093      	str	r3, [r2, #8]
   33d1e:	6851      	ldr	r1, [r2, #4]
   33d20:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   33d24:	6051      	str	r1, [r2, #4]
   33d26:	490c      	ldr	r1, [pc, #48]	; (33d58 <rpc_transport_ipc_msg_alloc+0x5c>)
   33d28:	8808      	ldrh	r0, [r1, #0]
   33d2a:	1c44      	adds	r4, r0, #1
   33d2c:	800c      	strh	r4, [r1, #0]
   33d2e:	6851      	ldr	r1, [r2, #4]
   33d30:	b289      	uxth	r1, r1
   33d32:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   33d36:	6051      	str	r1, [r2, #4]
   33d38:	4618      	mov	r0, r3
   33d3a:	2240      	movs	r2, #64	; 0x40
   33d3c:	2100      	movs	r1, #0
   33d3e:	f00d fc60 	bl	41602 <memset>
   33d42:	4603      	mov	r3, r0
   33d44:	6046      	str	r6, [r0, #4]
   33d46:	4618      	mov	r0, r3
   33d48:	bd70      	pop	{r4, r5, r6, pc}
   33d4a:	b915      	cbnz	r5, 33d52 <rpc_transport_ipc_msg_alloc+0x56>
   33d4c:	6895      	ldr	r5, [r2, #8]
   33d4e:	2d00      	cmp	r5, #0
   33d50:	d0e2      	beq.n	33d18 <rpc_transport_ipc_msg_alloc+0x1c>
   33d52:	3401      	adds	r4, #1
   33d54:	e7d6      	b.n	33d04 <rpc_transport_ipc_msg_alloc+0x8>
   33d56:	bf00      	nop
   33d58:	2001a59c 	.word	0x2001a59c

00033d5c <handle_modem_rpc_msg.part.0>:
   33d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33d60:	4606      	mov	r6, r0
   33d62:	460f      	mov	r7, r1
   33d64:	2500      	movs	r5, #0
   33d66:	f8df 8074 	ldr.w	r8, [pc, #116]	; 33ddc <handle_modem_rpc_msg.part.0+0x80>
   33d6a:	6833      	ldr	r3, [r6, #0]
   33d6c:	429d      	cmp	r5, r3
   33d6e:	d301      	bcc.n	33d74 <handle_modem_rpc_msg.part.0+0x18>
   33d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33d74:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   33d78:	68a3      	ldr	r3, [r4, #8]
   33d7a:	b1fb      	cbz	r3, 33dbc <handle_modem_rpc_msg.part.0+0x60>
   33d7c:	6863      	ldr	r3, [r4, #4]
   33d7e:	b2db      	uxtb	r3, r3
   33d80:	2b01      	cmp	r3, #1
   33d82:	d11b      	bne.n	33dbc <handle_modem_rpc_msg.part.0+0x60>
   33d84:	6862      	ldr	r2, [r4, #4]
   33d86:	f8b8 3000 	ldrh.w	r3, [r8]
   33d8a:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   33d8e:	d115      	bne.n	33dbc <handle_modem_rpc_msg.part.0+0x60>
   33d90:	2f02      	cmp	r7, #2
   33d92:	68a0      	ldr	r0, [r4, #8]
   33d94:	d114      	bne.n	33dc0 <handle_modem_rpc_msg.part.0+0x64>
   33d96:	f7ff fdf3 	bl	33980 <rpc_handle_data_message>
   33d9a:	2802      	cmp	r0, #2
   33d9c:	d00e      	beq.n	33dbc <handle_modem_rpc_msg.part.0+0x60>
   33d9e:	2801      	cmp	r0, #1
   33da0:	d113      	bne.n	33dca <handle_modem_rpc_msg.part.0+0x6e>
   33da2:	6863      	ldr	r3, [r4, #4]
   33da4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33da8:	f043 0302 	orr.w	r3, r3, #2
   33dac:	6063      	str	r3, [r4, #4]
   33dae:	f8b8 3000 	ldrh.w	r3, [r8]
   33db2:	3301      	adds	r3, #1
   33db4:	f8a8 3000 	strh.w	r3, [r8]
   33db8:	f7f1 fea4 	bl	25b04 <nrf_modem_os_application_irq_set>
   33dbc:	3501      	adds	r5, #1
   33dbe:	e7d4      	b.n	33d6a <handle_modem_rpc_msg.part.0+0xe>
   33dc0:	6801      	ldr	r1, [r0, #0]
   33dc2:	0c09      	lsrs	r1, r1, #16
   33dc4:	f00c f99a 	bl	400fc <rpc_handle_ctrl_message>
   33dc8:	e7e7      	b.n	33d9a <handle_modem_rpc_msg.part.0+0x3e>
   33dca:	2800      	cmp	r0, #0
   33dcc:	d1ef      	bne.n	33dae <handle_modem_rpc_msg.part.0+0x52>
   33dce:	6863      	ldr	r3, [r4, #4]
   33dd0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33dd4:	f043 0303 	orr.w	r3, r3, #3
   33dd8:	e7e8      	b.n	33dac <handle_modem_rpc_msg.part.0+0x50>
   33dda:	bf00      	nop
   33ddc:	2001a59a 	.word	0x2001a59a

00033de0 <ipc_irq_handler>:
   33de0:	b538      	push	{r3, r4, r5, lr}
   33de2:	4604      	mov	r4, r0
   33de4:	0620      	lsls	r0, r4, #24
   33de6:	d50c      	bpl.n	33e02 <ipc_irq_handler+0x22>
   33de8:	f7ff fec4 	bl	33b74 <ipc_trace_handle>
   33dec:	f7ff ff80 	bl	33cf0 <rpc_trace_coredump_in_progress>
   33df0:	b138      	cbz	r0, 33e02 <ipc_irq_handler+0x22>
   33df2:	22e0      	movs	r2, #224	; 0xe0
   33df4:	4b37      	ldr	r3, [pc, #220]	; (33ed4 <ipc_irq_handler+0xf4>)
   33df6:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   33dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   33dfe:	605a      	str	r2, [r3, #4]
   33e00:	bd38      	pop	{r3, r4, r5, pc}
   33e02:	07e1      	lsls	r1, r4, #31
   33e04:	d539      	bpl.n	33e7a <ipc_irq_handler+0x9a>
   33e06:	2203      	movs	r2, #3
   33e08:	4b33      	ldr	r3, [pc, #204]	; (33ed8 <ipc_irq_handler+0xf8>)
   33e0a:	701a      	strb	r2, [r3, #0]
   33e0c:	4b33      	ldr	r3, [pc, #204]	; (33edc <ipc_irq_handler+0xfc>)
   33e0e:	4a34      	ldr	r2, [pc, #208]	; (33ee0 <ipc_irq_handler+0x100>)
   33e10:	f8d3 0614 	ldr.w	r0, [r3, #1556]	; 0x614
   33e14:	4290      	cmp	r0, r2
   33e16:	d02c      	beq.n	33e72 <ipc_irq_handler+0x92>
   33e18:	d80c      	bhi.n	33e34 <ipc_irq_handler+0x54>
   33e1a:	3a02      	subs	r2, #2
   33e1c:	4290      	cmp	r0, r2
   33e1e:	d020      	beq.n	33e62 <ipc_irq_handler+0x82>
   33e20:	3201      	adds	r2, #1
   33e22:	4290      	cmp	r0, r2
   33e24:	d021      	beq.n	33e6a <ipc_irq_handler+0x8a>
   33e26:	f8d3 1618 	ldr.w	r1, [r3, #1560]	; 0x618
   33e2a:	f3c0 000b 	ubfx	r0, r0, #0, #12
   33e2e:	f002 f893 	bl	35f58 <nrf_modem_fault_handler_internal>
   33e32:	e012      	b.n	33e5a <ipc_irq_handler+0x7a>
   33e34:	4a2b      	ldr	r2, [pc, #172]	; (33ee4 <ipc_irq_handler+0x104>)
   33e36:	4290      	cmp	r0, r2
   33e38:	d80a      	bhi.n	33e50 <ipc_irq_handler+0x70>
   33e3a:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   33e3e:	d80a      	bhi.n	33e56 <ipc_irq_handler+0x76>
   33e40:	4a29      	ldr	r2, [pc, #164]	; (33ee8 <ipc_irq_handler+0x108>)
   33e42:	4290      	cmp	r0, r2
   33e44:	d1ef      	bne.n	33e26 <ipc_irq_handler+0x46>
   33e46:	f06f 0204 	mvn.w	r2, #4
   33e4a:	4b28      	ldr	r3, [pc, #160]	; (33eec <ipc_irq_handler+0x10c>)
   33e4c:	601a      	str	r2, [r3, #0]
   33e4e:	e004      	b.n	33e5a <ipc_irq_handler+0x7a>
   33e50:	4a27      	ldr	r2, [pc, #156]	; (33ef0 <ipc_irq_handler+0x110>)
   33e52:	4290      	cmp	r0, r2
   33e54:	d1e7      	bne.n	33e26 <ipc_irq_handler+0x46>
   33e56:	4b25      	ldr	r3, [pc, #148]	; (33eec <ipc_irq_handler+0x10c>)
   33e58:	6018      	str	r0, [r3, #0]
   33e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33e5e:	f7f1 be71 	b.w	25b44 <nrf_modem_os_event_notify>
   33e62:	f06f 0215 	mvn.w	r2, #21
   33e66:	4b21      	ldr	r3, [pc, #132]	; (33eec <ipc_irq_handler+0x10c>)
   33e68:	e7f0      	b.n	33e4c <ipc_irq_handler+0x6c>
   33e6a:	f06f 025e 	mvn.w	r2, #94	; 0x5e
   33e6e:	4b1f      	ldr	r3, [pc, #124]	; (33eec <ipc_irq_handler+0x10c>)
   33e70:	e7ec      	b.n	33e4c <ipc_irq_handler+0x6c>
   33e72:	f06f 020b 	mvn.w	r2, #11
   33e76:	4b1d      	ldr	r3, [pc, #116]	; (33eec <ipc_irq_handler+0x10c>)
   33e78:	e7e8      	b.n	33e4c <ipc_irq_handler+0x6c>
   33e7a:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   33e7e:	d003      	beq.n	33e88 <ipc_irq_handler+0xa8>
   33e80:	2202      	movs	r2, #2
   33e82:	4b15      	ldr	r3, [pc, #84]	; (33ed8 <ipc_irq_handler+0xf8>)
   33e84:	701a      	strb	r2, [r3, #0]
   33e86:	e7e8      	b.n	33e5a <ipc_irq_handler+0x7a>
   33e88:	0762      	lsls	r2, r4, #29
   33e8a:	d504      	bpl.n	33e96 <ipc_irq_handler+0xb6>
   33e8c:	4b12      	ldr	r3, [pc, #72]	; (33ed8 <ipc_irq_handler+0xf8>)
   33e8e:	781a      	ldrb	r2, [r3, #0]
   33e90:	b93a      	cbnz	r2, 33ea2 <ipc_irq_handler+0xc2>
   33e92:	f7f1 fe37 	bl	25b04 <nrf_modem_os_application_irq_set>
   33e96:	06e3      	lsls	r3, r4, #27
   33e98:	d5b2      	bpl.n	33e00 <ipc_irq_handler+0x20>
   33e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33e9e:	f7f1 be31 	b.w	25b04 <nrf_modem_os_application_irq_set>
   33ea2:	781a      	ldrb	r2, [r3, #0]
   33ea4:	2a01      	cmp	r2, #1
   33ea6:	d1f6      	bne.n	33e96 <ipc_irq_handler+0xb6>
   33ea8:	4a12      	ldr	r2, [pc, #72]	; (33ef4 <ipc_irq_handler+0x114>)
   33eaa:	4813      	ldr	r0, [pc, #76]	; (33ef8 <ipc_irq_handler+0x118>)
   33eac:	6812      	ldr	r2, [r2, #0]
   33eae:	6891      	ldr	r1, [r2, #8]
   33eb0:	6041      	str	r1, [r0, #4]
   33eb2:	6852      	ldr	r2, [r2, #4]
   33eb4:	6002      	str	r2, [r0, #0]
   33eb6:	b121      	cbz	r1, 33ec2 <ipc_irq_handler+0xe2>
   33eb8:	b11a      	cbz	r2, 33ec2 <ipc_irq_handler+0xe2>
   33eba:	6809      	ldr	r1, [r1, #0]
   33ebc:	b109      	cbz	r1, 33ec2 <ipc_irq_handler+0xe2>
   33ebe:	6812      	ldr	r2, [r2, #0]
   33ec0:	b932      	cbnz	r2, 33ed0 <ipc_irq_handler+0xf0>
   33ec2:	f06f 0104 	mvn.w	r1, #4
   33ec6:	4a09      	ldr	r2, [pc, #36]	; (33eec <ipc_irq_handler+0x10c>)
   33ec8:	6011      	str	r1, [r2, #0]
   33eca:	2203      	movs	r2, #3
   33ecc:	701a      	strb	r2, [r3, #0]
   33ece:	e7e2      	b.n	33e96 <ipc_irq_handler+0xb6>
   33ed0:	701d      	strb	r5, [r3, #0]
   33ed2:	e7e0      	b.n	33e96 <ipc_irq_handler+0xb6>
   33ed4:	e000e100 	.word	0xe000e100
   33ed8:	2001d3bc 	.word	0x2001d3bc
   33edc:	4002a000 	.word	0x4002a000
   33ee0:	00010022 	.word	0x00010022
   33ee4:	04400004 	.word	0x04400004
   33ee8:	00013032 	.word	0x00013032
   33eec:	2001a484 	.word	0x2001a484
   33ef0:	05500001 	.word	0x05500001
   33ef4:	2001a490 	.word	0x2001a490
   33ef8:	2001a488 	.word	0x2001a488

00033efc <rpc_transport_ipc_data_msg_send>:
   33efc:	b508      	push	{r3, lr}
   33efe:	4b0b      	ldr	r3, [pc, #44]	; (33f2c <rpc_transport_ipc_data_msg_send+0x30>)
   33f00:	681b      	ldr	r3, [r3, #0]
   33f02:	1ac0      	subs	r0, r0, r3
   33f04:	4b0a      	ldr	r3, [pc, #40]	; (33f30 <rpc_transport_ipc_data_msg_send+0x34>)
   33f06:	f3c0 1089 	ubfx	r0, r0, #6, #10
   33f0a:	681b      	ldr	r3, [r3, #0]
   33f0c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   33f10:	6843      	ldr	r3, [r0, #4]
   33f12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33f16:	f043 0301 	orr.w	r3, r3, #1
   33f1a:	6043      	str	r3, [r0, #4]
   33f1c:	2003      	movs	r0, #3
   33f1e:	f00a ffdd 	bl	3eedc <nrf_modem_os_busywait>
   33f22:	2201      	movs	r2, #1
   33f24:	4b03      	ldr	r3, [pc, #12]	; (33f34 <rpc_transport_ipc_data_msg_send+0x38>)
   33f26:	60da      	str	r2, [r3, #12]
   33f28:	bd08      	pop	{r3, pc}
   33f2a:	bf00      	nop
   33f2c:	2001a49c 	.word	0x2001a49c
   33f30:	2001a4a0 	.word	0x2001a4a0
   33f34:	4002a000 	.word	0x4002a000

00033f38 <rpc_transport_ipc_ctrl_msg_send>:
   33f38:	b508      	push	{r3, lr}
   33f3a:	4b0b      	ldr	r3, [pc, #44]	; (33f68 <rpc_transport_ipc_ctrl_msg_send+0x30>)
   33f3c:	681b      	ldr	r3, [r3, #0]
   33f3e:	1ac0      	subs	r0, r0, r3
   33f40:	4b0a      	ldr	r3, [pc, #40]	; (33f6c <rpc_transport_ipc_ctrl_msg_send+0x34>)
   33f42:	f3c0 1089 	ubfx	r0, r0, #6, #10
   33f46:	681b      	ldr	r3, [r3, #0]
   33f48:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   33f4c:	6843      	ldr	r3, [r0, #4]
   33f4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33f52:	f043 0301 	orr.w	r3, r3, #1
   33f56:	6043      	str	r3, [r0, #4]
   33f58:	2003      	movs	r0, #3
   33f5a:	f00a ffbf 	bl	3eedc <nrf_modem_os_busywait>
   33f5e:	2201      	movs	r2, #1
   33f60:	4b03      	ldr	r3, [pc, #12]	; (33f70 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   33f62:	605a      	str	r2, [r3, #4]
   33f64:	bd08      	pop	{r3, pc}
   33f66:	bf00      	nop
   33f68:	2001a494 	.word	0x2001a494
   33f6c:	2001a498 	.word	0x2001a498
   33f70:	4002a000 	.word	0x4002a000

00033f74 <rpc_transport_ipc_data_msg_alloc>:
   33f74:	4b05      	ldr	r3, [pc, #20]	; (33f8c <rpc_transport_ipc_data_msg_alloc+0x18>)
   33f76:	781b      	ldrb	r3, [r3, #0]
   33f78:	b933      	cbnz	r3, 33f88 <rpc_transport_ipc_data_msg_alloc+0x14>
   33f7a:	4b05      	ldr	r3, [pc, #20]	; (33f90 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   33f7c:	2202      	movs	r2, #2
   33f7e:	6819      	ldr	r1, [r3, #0]
   33f80:	4b04      	ldr	r3, [pc, #16]	; (33f94 <rpc_transport_ipc_data_msg_alloc+0x20>)
   33f82:	6818      	ldr	r0, [r3, #0]
   33f84:	f7ff beba 	b.w	33cfc <rpc_transport_ipc_msg_alloc>
   33f88:	2000      	movs	r0, #0
   33f8a:	4770      	bx	lr
   33f8c:	2001d3bd 	.word	0x2001d3bd
   33f90:	2001a49c 	.word	0x2001a49c
   33f94:	2001a4a0 	.word	0x2001a4a0

00033f98 <rpc_transport_ipc_ctrl_msg_alloc>:
   33f98:	230a      	movs	r3, #10
   33f9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   33f9c:	4d0d      	ldr	r5, [pc, #52]	; (33fd4 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   33f9e:	4e0e      	ldr	r6, [pc, #56]	; (33fd8 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   33fa0:	9301      	str	r3, [sp, #4]
   33fa2:	2201      	movs	r2, #1
   33fa4:	6829      	ldr	r1, [r5, #0]
   33fa6:	6830      	ldr	r0, [r6, #0]
   33fa8:	f7ff fea8 	bl	33cfc <rpc_transport_ipc_msg_alloc>
   33fac:	4604      	mov	r4, r0
   33fae:	b938      	cbnz	r0, 33fc0 <rpc_transport_ipc_ctrl_msg_alloc+0x28>
   33fb0:	f00a ff96 	bl	3eee0 <nrf_modem_os_is_in_isr>
   33fb4:	b938      	cbnz	r0, 33fc6 <rpc_transport_ipc_ctrl_msg_alloc+0x2e>
   33fb6:	a901      	add	r1, sp, #4
   33fb8:	f7f1 fc3c 	bl	25834 <nrf_modem_os_timedwait>
   33fbc:	306e      	adds	r0, #110	; 0x6e
   33fbe:	d1f0      	bne.n	33fa2 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   33fc0:	4620      	mov	r0, r4
   33fc2:	b002      	add	sp, #8
   33fc4:	bd70      	pop	{r4, r5, r6, pc}
   33fc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   33fca:	9b01      	ldr	r3, [sp, #4]
   33fcc:	4358      	muls	r0, r3
   33fce:	f00a ff85 	bl	3eedc <nrf_modem_os_busywait>
   33fd2:	e7e6      	b.n	33fa2 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   33fd4:	2001a494 	.word	0x2001a494
   33fd8:	2001a498 	.word	0x2001a498

00033fdc <rpc_transport_ipc_data_alloc>:
   33fdc:	4b03      	ldr	r3, [pc, #12]	; (33fec <rpc_transport_ipc_data_alloc+0x10>)
   33fde:	781b      	ldrb	r3, [r3, #0]
   33fe0:	b90b      	cbnz	r3, 33fe6 <rpc_transport_ipc_data_alloc+0xa>
   33fe2:	f7f1 bde1 	b.w	25ba8 <nrf_modem_os_shm_tx_alloc>
   33fe6:	2000      	movs	r0, #0
   33fe8:	4770      	bx	lr
   33fea:	bf00      	nop
   33fec:	2001d3bd 	.word	0x2001d3bd

00033ff0 <nrf_modem_application_irq_handler>:
   33ff0:	b510      	push	{r4, lr}
   33ff2:	4c08      	ldr	r4, [pc, #32]	; (34014 <nrf_modem_application_irq_handler+0x24>)
   33ff4:	f7f1 fd8e 	bl	25b14 <nrf_modem_os_application_irq_clear>
   33ff8:	6820      	ldr	r0, [r4, #0]
   33ffa:	b110      	cbz	r0, 34002 <nrf_modem_application_irq_handler+0x12>
   33ffc:	2101      	movs	r1, #1
   33ffe:	f7ff fead 	bl	33d5c <handle_modem_rpc_msg.part.0>
   34002:	6860      	ldr	r0, [r4, #4]
   34004:	b120      	cbz	r0, 34010 <nrf_modem_application_irq_handler+0x20>
   34006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3400a:	2102      	movs	r1, #2
   3400c:	f7ff bea6 	b.w	33d5c <handle_modem_rpc_msg.part.0>
   34010:	bd10      	pop	{r4, pc}
   34012:	bf00      	nop
   34014:	2001a488 	.word	0x2001a488

00034018 <rpc_transport_ipc_msg_free>:
   34018:	2300      	movs	r3, #0
   3401a:	4911      	ldr	r1, [pc, #68]	; (34060 <rpc_transport_ipc_msg_free+0x48>)
   3401c:	b530      	push	{r4, r5, lr}
   3401e:	680a      	ldr	r2, [r1, #0]
   34020:	6814      	ldr	r4, [r2, #0]
   34022:	42a3      	cmp	r3, r4
   34024:	d10b      	bne.n	3403e <rpc_transport_ipc_msg_free+0x26>
   34026:	2300      	movs	r3, #0
   34028:	684a      	ldr	r2, [r1, #4]
   3402a:	6811      	ldr	r1, [r2, #0]
   3402c:	428b      	cmp	r3, r1
   3402e:	d015      	beq.n	3405c <rpc_transport_ipc_msg_free+0x44>
   34030:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   34034:	68a4      	ldr	r4, [r4, #8]
   34036:	42a0      	cmp	r0, r4
   34038:	d008      	beq.n	3404c <rpc_transport_ipc_msg_free+0x34>
   3403a:	3301      	adds	r3, #1
   3403c:	e7f6      	b.n	3402c <rpc_transport_ipc_msg_free+0x14>
   3403e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   34042:	68ad      	ldr	r5, [r5, #8]
   34044:	42a8      	cmp	r0, r5
   34046:	d001      	beq.n	3404c <rpc_transport_ipc_msg_free+0x34>
   34048:	3301      	adds	r3, #1
   3404a:	e7ea      	b.n	34022 <rpc_transport_ipc_msg_free+0xa>
   3404c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   34050:	685a      	ldr	r2, [r3, #4]
   34052:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   34056:	f042 0203 	orr.w	r2, r2, #3
   3405a:	605a      	str	r2, [r3, #4]
   3405c:	bd30      	pop	{r4, r5, pc}
   3405e:	bf00      	nop
   34060:	2001a488 	.word	0x2001a488

00034064 <rpc_transport_ipc_peer_data_free>:
   34064:	b510      	push	{r4, lr}
   34066:	4b0b      	ldr	r3, [pc, #44]	; (34094 <rpc_transport_ipc_peer_data_free+0x30>)
   34068:	4604      	mov	r4, r0
   3406a:	781b      	ldrb	r3, [r3, #0]
   3406c:	2b03      	cmp	r3, #3
   3406e:	d010      	beq.n	34092 <rpc_transport_ipc_peer_data_free+0x2e>
   34070:	f7ff ff92 	bl	33f98 <rpc_transport_ipc_ctrl_msg_alloc>
   34074:	b168      	cbz	r0, 34092 <rpc_transport_ipc_peer_data_free+0x2e>
   34076:	2101      	movs	r1, #1
   34078:	2200      	movs	r2, #0
   3407a:	7001      	strb	r1, [r0, #0]
   3407c:	2102      	movs	r1, #2
   3407e:	6084      	str	r4, [r0, #8]
   34080:	7042      	strb	r2, [r0, #1]
   34082:	7081      	strb	r1, [r0, #2]
   34084:	70c2      	strb	r2, [r0, #3]
   34086:	f7ff ff57 	bl	33f38 <rpc_transport_ipc_ctrl_msg_send>
   3408a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3408e:	f7f1 bd39 	b.w	25b04 <nrf_modem_os_application_irq_set>
   34092:	bd10      	pop	{r4, pc}
   34094:	2001d3bc 	.word	0x2001d3bc

00034098 <rpc_transport_ipc_init>:
   34098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3409c:	2200      	movs	r2, #0
   3409e:	b095      	sub	sp, #84	; 0x54
   340a0:	4605      	mov	r5, r0
   340a2:	4957      	ldr	r1, [pc, #348]	; (34200 <rpc_transport_ipc_init+0x168>)
   340a4:	7900      	ldrb	r0, [r0, #4]
   340a6:	f7fe fe51 	bl	32d4c <nrfx_ipc_init>
   340aa:	2238      	movs	r2, #56	; 0x38
   340ac:	2100      	movs	r1, #0
   340ae:	a803      	add	r0, sp, #12
   340b0:	f00d faa7 	bl	41602 <memset>
   340b4:	2302      	movs	r3, #2
   340b6:	9304      	str	r3, [sp, #16]
   340b8:	2308      	movs	r3, #8
   340ba:	9306      	str	r3, [sp, #24]
   340bc:	2320      	movs	r3, #32
   340be:	9308      	str	r3, [sp, #32]
   340c0:	2301      	movs	r3, #1
   340c2:	930b      	str	r3, [sp, #44]	; 0x2c
   340c4:	2304      	movs	r3, #4
   340c6:	930d      	str	r3, [sp, #52]	; 0x34
   340c8:	2310      	movs	r3, #16
   340ca:	f04f 0c40 	mov.w	ip, #64	; 0x40
   340ce:	930f      	str	r3, [sp, #60]	; 0x3c
   340d0:	2380      	movs	r3, #128	; 0x80
   340d2:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   340d6:	23d5      	movs	r3, #213	; 0xd5
   340d8:	a803      	add	r0, sp, #12
   340da:	9313      	str	r3, [sp, #76]	; 0x4c
   340dc:	f7fe fe5c 	bl	32d98 <nrfx_ipc_config_load>
   340e0:	6828      	ldr	r0, [r5, #0]
   340e2:	6842      	ldr	r2, [r0, #4]
   340e4:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   340e8:	f040 8085 	bne.w	341f6 <rpc_transport_ipc_init+0x15e>
   340ec:	6941      	ldr	r1, [r0, #20]
   340ee:	68c3      	ldr	r3, [r0, #12]
   340f0:	440b      	add	r3, r1
   340f2:	69c1      	ldr	r1, [r0, #28]
   340f4:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   340f8:	440b      	add	r3, r1
   340fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   340fe:	d87a      	bhi.n	341f6 <rpc_transport_ipc_init+0x15e>
   34100:	2100      	movs	r1, #0
   34102:	6800      	ldr	r0, [r0, #0]
   34104:	f00d fa7d 	bl	41602 <memset>
   34108:	682a      	ldr	r2, [r5, #0]
   3410a:	6814      	ldr	r4, [r2, #0]
   3410c:	69d3      	ldr	r3, [r2, #28]
   3410e:	f104 0660 	add.w	r6, r4, #96	; 0x60
   34112:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   34116:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   3411a:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   3411e:	f104 0920 	add.w	r9, r4, #32
   34122:	2b00      	cmp	r3, #0
   34124:	d05c      	beq.n	341e0 <rpc_transport_ipc_init+0x148>
   34126:	f104 0840 	add.w	r8, r4, #64	; 0x40
   3412a:	4936      	ldr	r1, [pc, #216]	; (34204 <rpc_transport_ipc_init+0x16c>)
   3412c:	f8c1 9000 	str.w	r9, [r1]
   34130:	b13b      	cbz	r3, 34142 <rpc_transport_ipc_init+0xaa>
   34132:	6992      	ldr	r2, [r2, #24]
   34134:	4640      	mov	r0, r8
   34136:	f8c8 2004 	str.w	r2, [r8, #4]
   3413a:	f8c8 3000 	str.w	r3, [r8]
   3413e:	f7ff fcdd 	bl	33afc <ipc_trace_init>
   34142:	6828      	ldr	r0, [r5, #0]
   34144:	2300      	movs	r3, #0
   34146:	6902      	ldr	r2, [r0, #16]
   34148:	2101      	movs	r1, #1
   3414a:	6062      	str	r2, [r4, #4]
   3414c:	6942      	ldr	r2, [r0, #20]
   3414e:	7023      	strb	r3, [r4, #0]
   34150:	60a2      	str	r2, [r4, #8]
   34152:	4a2d      	ldr	r2, [pc, #180]	; (34208 <rpc_transport_ipc_init+0x170>)
   34154:	60e6      	str	r6, [r4, #12]
   34156:	6017      	str	r7, [r2, #0]
   34158:	4a2c      	ldr	r2, [pc, #176]	; (3420c <rpc_transport_ipc_init+0x174>)
   3415a:	6127      	str	r7, [r4, #16]
   3415c:	6016      	str	r6, [r2, #0]
   3415e:	2208      	movs	r2, #8
   34160:	7063      	strb	r3, [r4, #1]
   34162:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   34166:	70a1      	strb	r1, [r4, #2]
   34168:	70e3      	strb	r3, [r4, #3]
   3416a:	f8c4 9014 	str.w	r9, [r4, #20]
   3416e:	f8c4 8018 	str.w	r8, [r4, #24]
   34172:	707b      	strb	r3, [r7, #1]
   34174:	70bb      	strb	r3, [r7, #2]
   34176:	70fb      	strb	r3, [r7, #3]
   34178:	270a      	movs	r7, #10
   3417a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   3417e:	4a24      	ldr	r2, [pc, #144]	; (34210 <rpc_transport_ipc_init+0x178>)
   34180:	7073      	strb	r3, [r6, #1]
   34182:	f8c2 b000 	str.w	fp, [r2]
   34186:	4a23      	ldr	r2, [pc, #140]	; (34214 <rpc_transport_ipc_init+0x17c>)
   34188:	70b3      	strb	r3, [r6, #2]
   3418a:	f8c2 a000 	str.w	sl, [r2]
   3418e:	4a22      	ldr	r2, [pc, #136]	; (34218 <rpc_transport_ipc_init+0x180>)
   34190:	70f3      	strb	r3, [r6, #3]
   34192:	4d22      	ldr	r5, [pc, #136]	; (3421c <rpc_transport_ipc_init+0x184>)
   34194:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   34198:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   3419c:	4c20      	ldr	r4, [pc, #128]	; (34220 <rpc_transport_ipc_init+0x188>)
   3419e:	4a21      	ldr	r2, [pc, #132]	; (34224 <rpc_transport_ipc_init+0x18c>)
   341a0:	7021      	strb	r1, [r4, #0]
   341a2:	602b      	str	r3, [r5, #0]
   341a4:	9302      	str	r3, [sp, #8]
   341a6:	6113      	str	r3, [r2, #16]
   341a8:	6913      	ldr	r3, [r2, #16]
   341aa:	4e1f      	ldr	r6, [pc, #124]	; (34228 <rpc_transport_ipc_init+0x190>)
   341ac:	9302      	str	r3, [sp, #8]
   341ae:	9b02      	ldr	r3, [sp, #8]
   341b0:	7823      	ldrb	r3, [r4, #0]
   341b2:	2b01      	cmp	r3, #1
   341b4:	d100      	bne.n	341b8 <rpc_transport_ipc_init+0x120>
   341b6:	b9ae      	cbnz	r6, 341e4 <rpc_transport_ipc_init+0x14c>
   341b8:	7823      	ldrb	r3, [r4, #0]
   341ba:	2b01      	cmp	r3, #1
   341bc:	bf01      	itttt	eq
   341be:	f06f 0373 	mvneq.w	r3, #115	; 0x73
   341c2:	602b      	streq	r3, [r5, #0]
   341c4:	2303      	moveq	r3, #3
   341c6:	7023      	strbeq	r3, [r4, #0]
   341c8:	682c      	ldr	r4, [r5, #0]
   341ca:	b9b4      	cbnz	r4, 341fa <rpc_transport_ipc_init+0x162>
   341cc:	4b17      	ldr	r3, [pc, #92]	; (3422c <rpc_transport_ipc_init+0x194>)
   341ce:	701c      	strb	r4, [r3, #0]
   341d0:	4b17      	ldr	r3, [pc, #92]	; (34230 <rpc_transport_ipc_init+0x198>)
   341d2:	801c      	strh	r4, [r3, #0]
   341d4:	4b17      	ldr	r3, [pc, #92]	; (34234 <rpc_transport_ipc_init+0x19c>)
   341d6:	801c      	strh	r4, [r3, #0]
   341d8:	4620      	mov	r0, r4
   341da:	b015      	add	sp, #84	; 0x54
   341dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   341e0:	4698      	mov	r8, r3
   341e2:	e7a2      	b.n	3412a <rpc_transport_ipc_init+0x92>
   341e4:	2000      	movs	r0, #0
   341e6:	a901      	add	r1, sp, #4
   341e8:	9701      	str	r7, [sp, #4]
   341ea:	f7f1 fb23 	bl	25834 <nrf_modem_os_timedwait>
   341ee:	9b01      	ldr	r3, [sp, #4]
   341f0:	3b0a      	subs	r3, #10
   341f2:	441e      	add	r6, r3
   341f4:	e7dc      	b.n	341b0 <rpc_transport_ipc_init+0x118>
   341f6:	f06f 0415 	mvn.w	r4, #21
   341fa:	f7fe fe0b 	bl	32e14 <nrfx_ipc_uninit>
   341fe:	e7eb      	b.n	341d8 <rpc_transport_ipc_init+0x140>
   34200:	00033de1 	.word	0x00033de1
   34204:	2001a490 	.word	0x2001a490
   34208:	2001a4a0 	.word	0x2001a4a0
   3420c:	2001a498 	.word	0x2001a498
   34210:	2001a49c 	.word	0x2001a49c
   34214:	2001a494 	.word	0x2001a494
   34218:	4002a000 	.word	0x4002a000
   3421c:	2001a484 	.word	0x2001a484
   34220:	2001d3bc 	.word	0x2001d3bc
   34224:	40005600 	.word	0x40005600
   34228:	000249f0 	.word	0x000249f0
   3422c:	2001d3bd 	.word	0x2001d3bd
   34230:	2001a59c 	.word	0x2001a59c
   34234:	2001a59a 	.word	0x2001a59a

00034238 <sock_init>:
   34238:	f44f 7240 	mov.w	r2, #768	; 0x300
   3423c:	2100      	movs	r1, #0
   3423e:	b508      	push	{r3, lr}
   34240:	4808      	ldr	r0, [pc, #32]	; (34264 <sock_init+0x2c>)
   34242:	f00d f9de 	bl	41602 <memset>
   34246:	2100      	movs	r1, #0
   34248:	2208      	movs	r2, #8
   3424a:	4b07      	ldr	r3, [pc, #28]	; (34268 <sock_init+0x30>)
   3424c:	4807      	ldr	r0, [pc, #28]	; (3426c <sock_init+0x34>)
   3424e:	7019      	strb	r1, [r3, #0]
   34250:	4b04      	ldr	r3, [pc, #16]	; (34264 <sock_init+0x2c>)
   34252:	3a01      	subs	r2, #1
   34254:	e9c3 0100 	strd	r0, r1, [r3]
   34258:	6099      	str	r1, [r3, #8]
   3425a:	f103 0360 	add.w	r3, r3, #96	; 0x60
   3425e:	d1f8      	bne.n	34252 <sock_init+0x1a>
   34260:	bd08      	pop	{r3, pc}
   34262:	bf00      	nop
   34264:	20014760 	.word	0x20014760
   34268:	2001d3be 	.word	0x2001d3be
   3426c:	1badf11e 	.word	0x1badf11e

00034270 <sock_open>:
   34270:	2300      	movs	r3, #0
   34272:	2060      	movs	r0, #96	; 0x60
   34274:	b530      	push	{r4, r5, lr}
   34276:	4a0d      	ldr	r2, [pc, #52]	; (342ac <sock_open+0x3c>)
   34278:	4c0d      	ldr	r4, [pc, #52]	; (342b0 <sock_open+0x40>)
   3427a:	fb00 f103 	mul.w	r1, r0, r3
   3427e:	588d      	ldr	r5, [r1, r2]
   34280:	42a5      	cmp	r5, r4
   34282:	d10e      	bne.n	342a2 <sock_open+0x32>
   34284:	f04f 33ff 	mov.w	r3, #4294967295
   34288:	1850      	adds	r0, r2, r1
   3428a:	5053      	str	r3, [r2, r1]
   3428c:	4a09      	ldr	r2, [pc, #36]	; (342b4 <sock_open+0x44>)
   3428e:	7f03      	ldrb	r3, [r0, #28]
   34290:	7812      	ldrb	r2, [r2, #0]
   34292:	f362 1386 	bfi	r3, r2, #6, #1
   34296:	7703      	strb	r3, [r0, #28]
   34298:	2302      	movs	r3, #2
   3429a:	8783      	strh	r3, [r0, #60]	; 0x3c
   3429c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   342a0:	bd30      	pop	{r4, r5, pc}
   342a2:	3301      	adds	r3, #1
   342a4:	2b08      	cmp	r3, #8
   342a6:	d1e8      	bne.n	3427a <sock_open+0xa>
   342a8:	2000      	movs	r0, #0
   342aa:	e7f9      	b.n	342a0 <sock_open+0x30>
   342ac:	20014760 	.word	0x20014760
   342b0:	1badf11e 	.word	0x1badf11e
   342b4:	2001d3be 	.word	0x2001d3be

000342b8 <sock_find>:
   342b8:	b530      	push	{r4, r5, lr}
   342ba:	2200      	movs	r2, #0
   342bc:	2460      	movs	r4, #96	; 0x60
   342be:	4b06      	ldr	r3, [pc, #24]	; (342d8 <sock_find+0x20>)
   342c0:	fb04 f102 	mul.w	r1, r4, r2
   342c4:	58cd      	ldr	r5, [r1, r3]
   342c6:	4285      	cmp	r5, r0
   342c8:	d101      	bne.n	342ce <sock_find+0x16>
   342ca:	1858      	adds	r0, r3, r1
   342cc:	bd30      	pop	{r4, r5, pc}
   342ce:	3201      	adds	r2, #1
   342d0:	2a08      	cmp	r2, #8
   342d2:	d1f5      	bne.n	342c0 <sock_find+0x8>
   342d4:	2000      	movs	r0, #0
   342d6:	e7f9      	b.n	342cc <sock_find+0x14>
   342d8:	20014760 	.word	0x20014760

000342dc <_sock_close>:
   342dc:	b538      	push	{r3, r4, r5, lr}
   342de:	f7ff ffeb 	bl	342b8 <sock_find>
   342e2:	4604      	mov	r4, r0
   342e4:	1d05      	adds	r5, r0, #4
   342e6:	4628      	mov	r0, r5
   342e8:	f00c f9bd 	bl	40666 <pkt_flush>
   342ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   342ee:	b108      	cbz	r0, 342f4 <_sock_close+0x18>
   342f0:	f7f1 fc46 	bl	25b80 <nrf_modem_os_free>
   342f4:	225c      	movs	r2, #92	; 0x5c
   342f6:	2100      	movs	r1, #0
   342f8:	4628      	mov	r0, r5
   342fa:	f00d f982 	bl	41602 <memset>
   342fe:	4b01      	ldr	r3, [pc, #4]	; (34304 <_sock_close+0x28>)
   34300:	6023      	str	r3, [r4, #0]
   34302:	bd38      	pop	{r3, r4, r5, pc}
   34304:	1badf11e 	.word	0x1badf11e

00034308 <sock_flow_control_set>:
   34308:	1e02      	subs	r2, r0, #0
   3430a:	bf18      	it	ne
   3430c:	2201      	movne	r2, #1
   3430e:	4b0a      	ldr	r3, [pc, #40]	; (34338 <sock_flow_control_set+0x30>)
   34310:	b570      	push	{r4, r5, r6, lr}
   34312:	701a      	strb	r2, [r3, #0]
   34314:	2560      	movs	r5, #96	; 0x60
   34316:	2200      	movs	r2, #0
   34318:	4908      	ldr	r1, [pc, #32]	; (3433c <sock_flow_control_set+0x34>)
   3431a:	4e09      	ldr	r6, [pc, #36]	; (34340 <sock_flow_control_set+0x38>)
   3431c:	fb05 f302 	mul.w	r3, r5, r2
   34320:	585c      	ldr	r4, [r3, r1]
   34322:	3201      	adds	r2, #1
   34324:	42b4      	cmp	r4, r6
   34326:	bf1f      	itttt	ne
   34328:	185b      	addne	r3, r3, r1
   3432a:	7f1c      	ldrbne	r4, [r3, #28]
   3432c:	f360 1486 	bfine	r4, r0, #6, #1
   34330:	771c      	strbne	r4, [r3, #28]
   34332:	2a08      	cmp	r2, #8
   34334:	d1f2      	bne.n	3431c <sock_flow_control_set+0x14>
   34336:	bd70      	pop	{r4, r5, r6, pc}
   34338:	2001d3be 	.word	0x2001d3be
   3433c:	20014760 	.word	0x20014760
   34340:	1badf11e 	.word	0x1badf11e

00034344 <on_getaddrinfo_res>:
   34344:	2301      	movs	r3, #1
   34346:	4a03      	ldr	r2, [pc, #12]	; (34354 <on_getaddrinfo_res+0x10>)
   34348:	7013      	strb	r3, [r2, #0]
   3434a:	4a03      	ldr	r2, [pc, #12]	; (34358 <on_getaddrinfo_res+0x14>)
   3434c:	6010      	str	r0, [r2, #0]
   3434e:	4618      	mov	r0, r3
   34350:	4770      	bx	lr
   34352:	bf00      	nop
   34354:	2001d3bf 	.word	0x2001d3bf
   34358:	2001a4b4 	.word	0x2001a4b4

0003435c <addrinfo_init>:
   3435c:	2201      	movs	r2, #1
   3435e:	4802      	ldr	r0, [pc, #8]	; (34368 <addrinfo_init+0xc>)
   34360:	4611      	mov	r1, r2
   34362:	f7f1 bb3d 	b.w	259e0 <nrf_modem_os_sem_init>
   34366:	bf00      	nop
   34368:	2001a4a4 	.word	0x2001a4a4

0003436c <nrf_getaddrinfo>:
   3436c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34370:	4604      	mov	r4, r0
   34372:	460e      	mov	r6, r1
   34374:	4617      	mov	r7, r2
   34376:	461d      	mov	r5, r3
   34378:	f001 fe04 	bl	35f84 <nrf_modem_state_is_initialized>
   3437c:	b940      	cbnz	r0, 34390 <nrf_getaddrinfo+0x24>
   3437e:	2001      	movs	r0, #1
   34380:	f7f1 fb1a 	bl	259b8 <nrf_modem_os_errno_set>
   34384:	f04f 34ff 	mov.w	r4, #4294967295
   34388:	4620      	mov	r0, r4
   3438a:	b003      	add	sp, #12
   3438c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34390:	ea54 0306 	orrs.w	r3, r4, r6
   34394:	f000 817c 	beq.w	34690 <nrf_getaddrinfo+0x324>
   34398:	b327      	cbz	r7, 343e4 <nrf_getaddrinfo+0x78>
   3439a:	683b      	ldr	r3, [r7, #0]
   3439c:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   343a0:	f023 0302 	bic.w	r3, r3, #2
   343a4:	2b00      	cmp	r3, #0
   343a6:	f040 8176 	bne.w	34696 <nrf_getaddrinfo+0x32a>
   343aa:	6878      	ldr	r0, [r7, #4]
   343ac:	b938      	cbnz	r0, 343be <nrf_getaddrinfo+0x52>
   343ae:	68b8      	ldr	r0, [r7, #8]
   343b0:	b160      	cbz	r0, 343cc <nrf_getaddrinfo+0x60>
   343b2:	f00c f8e7 	bl	40584 <sock_type_is_valid>
   343b6:	b948      	cbnz	r0, 343cc <nrf_getaddrinfo+0x60>
   343b8:	f240 1413 	movw	r4, #275	; 0x113
   343bc:	e7e4      	b.n	34388 <nrf_getaddrinfo+0x1c>
   343be:	f00c f8d8 	bl	40572 <sock_family_is_valid>
   343c2:	2800      	cmp	r0, #0
   343c4:	d1f3      	bne.n	343ae <nrf_getaddrinfo+0x42>
   343c6:	f44f 7487 	mov.w	r4, #270	; 0x10e
   343ca:	e7dd      	b.n	34388 <nrf_getaddrinfo+0x1c>
   343cc:	68f8      	ldr	r0, [r7, #12]
   343ce:	b148      	cbz	r0, 343e4 <nrf_getaddrinfo+0x78>
   343d0:	68b9      	ldr	r1, [r7, #8]
   343d2:	f00c f8eb 	bl	405ac <sock_proto_supports_type>
   343d6:	b928      	cbnz	r0, 343e4 <nrf_getaddrinfo+0x78>
   343d8:	206b      	movs	r0, #107	; 0x6b
   343da:	f7f1 faed 	bl	259b8 <nrf_modem_os_errno_set>
   343de:	f240 1415 	movw	r4, #277	; 0x115
   343e2:	e7d1      	b.n	34388 <nrf_getaddrinfo+0x1c>
   343e4:	4baf      	ldr	r3, [pc, #700]	; (346a4 <nrf_getaddrinfo+0x338>)
   343e6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   343ea:	6818      	ldr	r0, [r3, #0]
   343ec:	f7f1 fb50 	bl	25a90 <nrf_modem_os_sem_take>
   343f0:	4680      	mov	r8, r0
   343f2:	2800      	cmp	r0, #0
   343f4:	f040 8152 	bne.w	3469c <nrf_getaddrinfo+0x330>
   343f8:	2e00      	cmp	r6, #0
   343fa:	d042      	beq.n	34482 <nrf_getaddrinfo+0x116>
   343fc:	b31f      	cbz	r7, 34446 <nrf_getaddrinfo+0xda>
   343fe:	683b      	ldr	r3, [r7, #0]
   34400:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   34404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   34408:	d11d      	bne.n	34446 <nrf_getaddrinfo+0xda>
   3440a:	683b      	ldr	r3, [r7, #0]
   3440c:	04db      	lsls	r3, r3, #19
   3440e:	d53c      	bpl.n	3448a <nrf_getaddrinfo+0x11e>
   34410:	213a      	movs	r1, #58	; 0x3a
   34412:	4630      	mov	r0, r6
   34414:	f00d fab3 	bl	4197e <strchr>
   34418:	4681      	mov	r9, r0
   3441a:	b120      	cbz	r0, 34426 <nrf_getaddrinfo+0xba>
   3441c:	48a2      	ldr	r0, [pc, #648]	; (346a8 <nrf_getaddrinfo+0x33c>)
   3441e:	f7e8 ff10 	bl	1d242 <strlen>
   34422:	eb09 0600 	add.w	r6, r9, r0
   34426:	4630      	mov	r0, r6
   34428:	49a0      	ldr	r1, [pc, #640]	; (346ac <nrf_getaddrinfo+0x340>)
   3442a:	f00d fb04 	bl	41a36 <strstr>
   3442e:	4681      	mov	r9, r0
   34430:	b318      	cbz	r0, 3447a <nrf_getaddrinfo+0x10e>
   34432:	489e      	ldr	r0, [pc, #632]	; (346ac <nrf_getaddrinfo+0x340>)
   34434:	f7e8 ff05 	bl	1d242 <strlen>
   34438:	220a      	movs	r2, #10
   3443a:	2100      	movs	r1, #0
   3443c:	4448      	add	r0, r9
   3443e:	f006 faab 	bl	3a998 <strtol>
   34442:	4606      	mov	r6, r0
   34444:	e023      	b.n	3448e <nrf_getaddrinfo+0x122>
   34446:	220a      	movs	r2, #10
   34448:	2100      	movs	r1, #0
   3444a:	4630      	mov	r0, r6
   3444c:	f006 fbc0 	bl	3abd0 <strtoul>
   34450:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   34454:	1e42      	subs	r2, r0, #1
   34456:	429a      	cmp	r2, r3
   34458:	f200 8114 	bhi.w	34684 <nrf_getaddrinfo+0x318>
   3445c:	0203      	lsls	r3, r0, #8
   3445e:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
   34462:	4b93      	ldr	r3, [pc, #588]	; (346b0 <nrf_getaddrinfo+0x344>)
   34464:	8018      	strh	r0, [r3, #0]
   34466:	2f00      	cmp	r7, #0
   34468:	d1cf      	bne.n	3440a <nrf_getaddrinfo+0x9e>
   3446a:	f04f 36ff 	mov.w	r6, #4294967295
   3446e:	2200      	movs	r2, #0
   34470:	4b90      	ldr	r3, [pc, #576]	; (346b4 <nrf_getaddrinfo+0x348>)
   34472:	601a      	str	r2, [r3, #0]
   34474:	b997      	cbnz	r7, 3449c <nrf_getaddrinfo+0x130>
   34476:	2301      	movs	r3, #1
   34478:	e014      	b.n	344a4 <nrf_getaddrinfo+0x138>
   3447a:	4601      	mov	r1, r0
   3447c:	220a      	movs	r2, #10
   3447e:	4630      	mov	r0, r6
   34480:	e7dd      	b.n	3443e <nrf_getaddrinfo+0xd2>
   34482:	4b8b      	ldr	r3, [pc, #556]	; (346b0 <nrf_getaddrinfo+0x344>)
   34484:	8018      	strh	r0, [r3, #0]
   34486:	2f00      	cmp	r7, #0
   34488:	d0ef      	beq.n	3446a <nrf_getaddrinfo+0xfe>
   3448a:	f04f 36ff 	mov.w	r6, #4294967295
   3448e:	6878      	ldr	r0, [r7, #4]
   34490:	2800      	cmp	r0, #0
   34492:	d0ec      	beq.n	3446e <nrf_getaddrinfo+0x102>
   34494:	f00c fd80 	bl	40f98 <nrf_af_to_rpc_af>
   34498:	4b86      	ldr	r3, [pc, #536]	; (346b4 <nrf_getaddrinfo+0x348>)
   3449a:	6018      	str	r0, [r3, #0]
   3449c:	68bb      	ldr	r3, [r7, #8]
   3449e:	2b00      	cmp	r3, #0
   344a0:	bf08      	it	eq
   344a2:	2301      	moveq	r3, #1
   344a4:	f8df b210 	ldr.w	fp, [pc, #528]	; 346b8 <nrf_getaddrinfo+0x34c>
   344a8:	f8cb 3000 	str.w	r3, [fp]
   344ac:	2f00      	cmp	r7, #0
   344ae:	d049      	beq.n	34544 <nrf_getaddrinfo+0x1d8>
   344b0:	68fb      	ldr	r3, [r7, #12]
   344b2:	2b00      	cmp	r3, #0
   344b4:	bf08      	it	eq
   344b6:	2306      	moveq	r3, #6
   344b8:	f8df a200 	ldr.w	sl, [pc, #512]	; 346bc <nrf_getaddrinfo+0x350>
   344bc:	f8ca 3000 	str.w	r3, [sl]
   344c0:	b10f      	cbz	r7, 344c6 <nrf_getaddrinfo+0x15a>
   344c2:	f8d7 8000 	ldr.w	r8, [r7]
   344c6:	4f7e      	ldr	r7, [pc, #504]	; (346c0 <nrf_getaddrinfo+0x354>)
   344c8:	4620      	mov	r0, r4
   344ca:	f8c7 8000 	str.w	r8, [r7]
   344ce:	b10c      	cbz	r4, 344d4 <nrf_getaddrinfo+0x168>
   344d0:	f7e8 feb7 	bl	1d242 <strlen>
   344d4:	f00b fe6b 	bl	401ae <rpc_client_request_alloc>
   344d8:	4680      	mov	r8, r0
   344da:	2800      	cmp	r0, #0
   344dc:	f000 80d5 	beq.w	3468a <nrf_getaddrinfo+0x31e>
   344e0:	6106      	str	r6, [r0, #16]
   344e2:	b144      	cbz	r4, 344f6 <nrf_getaddrinfo+0x18a>
   344e4:	6806      	ldr	r6, [r0, #0]
   344e6:	4620      	mov	r0, r4
   344e8:	f7e8 feab 	bl	1d242 <strlen>
   344ec:	4621      	mov	r1, r4
   344ee:	4602      	mov	r2, r0
   344f0:	4630      	mov	r0, r6
   344f2:	f00d f866 	bl	415c2 <memcpy>
   344f6:	4b6f      	ldr	r3, [pc, #444]	; (346b4 <nrf_getaddrinfo+0x348>)
   344f8:	4642      	mov	r2, r8
   344fa:	681b      	ldr	r3, [r3, #0]
   344fc:	f247 010d 	movw	r1, #28685	; 0x700d
   34500:	f8c8 3018 	str.w	r3, [r8, #24]
   34504:	f8db 3000 	ldr.w	r3, [fp]
   34508:	2004      	movs	r0, #4
   3450a:	f8c8 301c 	str.w	r3, [r8, #28]
   3450e:	f8da 3000 	ldr.w	r3, [sl]
   34512:	4e6c      	ldr	r6, [pc, #432]	; (346c4 <nrf_getaddrinfo+0x358>)
   34514:	f8c8 3020 	str.w	r3, [r8, #32]
   34518:	683b      	ldr	r3, [r7, #0]
   3451a:	f8c8 3014 	str.w	r3, [r8, #20]
   3451e:	f00b fe4c 	bl	401ba <rpc_client_request_send>
   34522:	2300      	movs	r3, #0
   34524:	7033      	strb	r3, [r6, #0]
   34526:	f04f 33ff 	mov.w	r3, #4294967295
   3452a:	9301      	str	r3, [sp, #4]
   3452c:	2000      	movs	r0, #0
   3452e:	a901      	add	r1, sp, #4
   34530:	f7f1 f980 	bl	25834 <nrf_modem_os_timedwait>
   34534:	4604      	mov	r4, r0
   34536:	b138      	cbz	r0, 34548 <nrf_getaddrinfo+0x1dc>
   34538:	206e      	movs	r0, #110	; 0x6e
   3453a:	f7f1 fa3d 	bl	259b8 <nrf_modem_os_errno_set>
   3453e:	f46f 748a 	mvn.w	r4, #276	; 0x114
   34542:	e721      	b.n	34388 <nrf_getaddrinfo+0x1c>
   34544:	2306      	movs	r3, #6
   34546:	e7b7      	b.n	344b8 <nrf_getaddrinfo+0x14c>
   34548:	7833      	ldrb	r3, [r6, #0]
   3454a:	2b01      	cmp	r3, #1
   3454c:	d1ee      	bne.n	3452c <nrf_getaddrinfo+0x1c0>
   3454e:	4b5e      	ldr	r3, [pc, #376]	; (346c8 <nrf_getaddrinfo+0x35c>)
   34550:	681b      	ldr	r3, [r3, #0]
   34552:	6958      	ldr	r0, [r3, #20]
   34554:	2800      	cmp	r0, #0
   34556:	f040 8091 	bne.w	3467c <nrf_getaddrinfo+0x310>
   3455a:	2020      	movs	r0, #32
   3455c:	681e      	ldr	r6, [r3, #0]
   3455e:	f7f1 fb07 	bl	25b70 <nrf_modem_os_alloc>
   34562:	6028      	str	r0, [r5, #0]
   34564:	b300      	cbz	r0, 345a8 <nrf_getaddrinfo+0x23c>
   34566:	f8d6 8008 	ldr.w	r8, [r6, #8]
   3456a:	f1b8 0f01 	cmp.w	r8, #1
   3456e:	d013      	beq.n	34598 <nrf_getaddrinfo+0x22c>
   34570:	f1b8 0f02 	cmp.w	r8, #2
   34574:	d03a      	beq.n	345ec <nrf_getaddrinfo+0x280>
   34576:	f44f 7487 	mov.w	r4, #270	; 0x10e
   3457a:	4b53      	ldr	r3, [pc, #332]	; (346c8 <nrf_getaddrinfo+0x35c>)
   3457c:	681b      	ldr	r3, [r3, #0]
   3457e:	6818      	ldr	r0, [r3, #0]
   34580:	b108      	cbz	r0, 34586 <nrf_getaddrinfo+0x21a>
   34582:	f00b fe24 	bl	401ce <rpc_client_data_free>
   34586:	4b50      	ldr	r3, [pc, #320]	; (346c8 <nrf_getaddrinfo+0x35c>)
   34588:	6818      	ldr	r0, [r3, #0]
   3458a:	f00b fe1d 	bl	401c8 <rpc_client_message_free>
   3458e:	4b45      	ldr	r3, [pc, #276]	; (346a4 <nrf_getaddrinfo+0x338>)
   34590:	6818      	ldr	r0, [r3, #0]
   34592:	f7f1 fa5d 	bl	25a50 <nrf_modem_os_sem_give>
   34596:	e6f7      	b.n	34388 <nrf_getaddrinfo+0x1c>
   34598:	2010      	movs	r0, #16
   3459a:	f7f1 fae9 	bl	25b70 <nrf_modem_os_alloc>
   3459e:	4681      	mov	r9, r0
   345a0:	b928      	cbnz	r0, 345ae <nrf_getaddrinfo+0x242>
   345a2:	6828      	ldr	r0, [r5, #0]
   345a4:	f7f1 faec 	bl	25b80 <nrf_modem_os_free>
   345a8:	f240 140f 	movw	r4, #271	; 0x10f
   345ac:	e7e5      	b.n	3457a <nrf_getaddrinfo+0x20e>
   345ae:	2210      	movs	r2, #16
   345b0:	493f      	ldr	r1, [pc, #252]	; (346b0 <nrf_getaddrinfo+0x344>)
   345b2:	7002      	strb	r2, [r0, #0]
   345b4:	8809      	ldrh	r1, [r1, #0]
   345b6:	f8c0 8004 	str.w	r8, [r0, #4]
   345ba:	8101      	strh	r1, [r0, #8]
   345bc:	69b1      	ldr	r1, [r6, #24]
   345be:	60c1      	str	r1, [r0, #12]
   345c0:	6829      	ldr	r1, [r5, #0]
   345c2:	610a      	str	r2, [r1, #16]
   345c4:	683a      	ldr	r2, [r7, #0]
   345c6:	f8d5 8000 	ldr.w	r8, [r5]
   345ca:	f012 0202 	ands.w	r2, r2, #2
   345ce:	d052      	beq.n	34676 <nrf_getaddrinfo+0x30a>
   345d0:	8af0      	ldrh	r0, [r6, #22]
   345d2:	3001      	adds	r0, #1
   345d4:	f7f1 facc 	bl	25b70 <nrf_modem_os_alloc>
   345d8:	682a      	ldr	r2, [r5, #0]
   345da:	f8c8 0018 	str.w	r0, [r8, #24]
   345de:	6990      	ldr	r0, [r2, #24]
   345e0:	bb38      	cbnz	r0, 34632 <nrf_getaddrinfo+0x2c6>
   345e2:	4628      	mov	r0, r5
   345e4:	f7f1 facc 	bl	25b80 <nrf_modem_os_free>
   345e8:	4648      	mov	r0, r9
   345ea:	e7db      	b.n	345a4 <nrf_getaddrinfo+0x238>
   345ec:	2024      	movs	r0, #36	; 0x24
   345ee:	f7f1 fabf 	bl	25b70 <nrf_modem_os_alloc>
   345f2:	4681      	mov	r9, r0
   345f4:	2800      	cmp	r0, #0
   345f6:	d0d4      	beq.n	345a2 <nrf_getaddrinfo+0x236>
   345f8:	2224      	movs	r2, #36	; 0x24
   345fa:	4621      	mov	r1, r4
   345fc:	f00d f801 	bl	41602 <memset>
   34600:	2224      	movs	r2, #36	; 0x24
   34602:	f889 2000 	strb.w	r2, [r9]
   34606:	4a2a      	ldr	r2, [pc, #168]	; (346b0 <nrf_getaddrinfo+0x344>)
   34608:	f8c9 8004 	str.w	r8, [r9, #4]
   3460c:	8812      	ldrh	r2, [r2, #0]
   3460e:	f109 0110 	add.w	r1, r9, #16
   34612:	f8a9 2008 	strh.w	r2, [r9, #8]
   34616:	f106 0028 	add.w	r0, r6, #40	; 0x28
   3461a:	f106 0218 	add.w	r2, r6, #24
   3461e:	f852 cb04 	ldr.w	ip, [r2], #4
   34622:	4282      	cmp	r2, r0
   34624:	f841 cb04 	str.w	ip, [r1], #4
   34628:	d1f9      	bne.n	3461e <nrf_getaddrinfo+0x2b2>
   3462a:	2124      	movs	r1, #36	; 0x24
   3462c:	682a      	ldr	r2, [r5, #0]
   3462e:	6111      	str	r1, [r2, #16]
   34630:	e7c8      	b.n	345c4 <nrf_getaddrinfo+0x258>
   34632:	f8b6 c014 	ldrh.w	ip, [r6, #20]
   34636:	f106 0118 	add.w	r1, r6, #24
   3463a:	8af2      	ldrh	r2, [r6, #22]
   3463c:	4461      	add	r1, ip
   3463e:	f00c ffc0 	bl	415c2 <memcpy>
   34642:	2000      	movs	r0, #0
   34644:	6829      	ldr	r1, [r5, #0]
   34646:	8af2      	ldrh	r2, [r6, #22]
   34648:	6989      	ldr	r1, [r1, #24]
   3464a:	5488      	strb	r0, [r1, r2]
   3464c:	68b0      	ldr	r0, [r6, #8]
   3464e:	f8d5 8000 	ldr.w	r8, [r5]
   34652:	f00c fca2 	bl	40f9a <rpc_af_to_nrf_af>
   34656:	2300      	movs	r3, #0
   34658:	682a      	ldr	r2, [r5, #0]
   3465a:	f8db 1000 	ldr.w	r1, [fp]
   3465e:	f8c8 0004 	str.w	r0, [r8, #4]
   34662:	6091      	str	r1, [r2, #8]
   34664:	f8da 1000 	ldr.w	r1, [sl]
   34668:	f8c2 9014 	str.w	r9, [r2, #20]
   3466c:	60d1      	str	r1, [r2, #12]
   3466e:	6839      	ldr	r1, [r7, #0]
   34670:	61d3      	str	r3, [r2, #28]
   34672:	6011      	str	r1, [r2, #0]
   34674:	e781      	b.n	3457a <nrf_getaddrinfo+0x20e>
   34676:	f8c8 2018 	str.w	r2, [r8, #24]
   3467a:	e7e7      	b.n	3464c <nrf_getaddrinfo+0x2e0>
   3467c:	f00c fccf 	bl	4101e <rpc_error_to_nrf_gai_errno>
   34680:	4604      	mov	r4, r0
   34682:	e77a      	b.n	3457a <nrf_getaddrinfo+0x20e>
   34684:	f44f 7489 	mov.w	r4, #274	; 0x112
   34688:	e781      	b.n	3458e <nrf_getaddrinfo+0x222>
   3468a:	f240 140f 	movw	r4, #271	; 0x10f
   3468e:	e77e      	b.n	3458e <nrf_getaddrinfo+0x222>
   34690:	f240 1411 	movw	r4, #273	; 0x111
   34694:	e678      	b.n	34388 <nrf_getaddrinfo+0x1c>
   34696:	f240 1403 	movw	r4, #259	; 0x103
   3469a:	e675      	b.n	34388 <nrf_getaddrinfo+0x1c>
   3469c:	f44f 7481 	mov.w	r4, #258	; 0x102
   346a0:	e672      	b.n	34388 <nrf_getaddrinfo+0x1c>
   346a2:	bf00      	nop
   346a4:	2001a4a4 	.word	0x2001a4a4
   346a8:	0004bb89 	.word	0x0004bb89
   346ac:	0004bb7b 	.word	0x0004bb7b
   346b0:	2001a59e 	.word	0x2001a59e
   346b4:	2001a4a8 	.word	0x2001a4a8
   346b8:	2001a4b8 	.word	0x2001a4b8
   346bc:	2001a4b0 	.word	0x2001a4b0
   346c0:	2001a4ac 	.word	0x2001a4ac
   346c4:	2001d3bf 	.word	0x2001d3bf
   346c8:	2001a4b4 	.word	0x2001a4b4

000346cc <rpc_ip_event_handler>:
   346cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   346ce:	f248 030f 	movw	r3, #32783	; 0x800f
   346d2:	4299      	cmp	r1, r3
   346d4:	4605      	mov	r5, r0
   346d6:	460e      	mov	r6, r1
   346d8:	d00b      	beq.n	346f2 <rpc_ip_event_handler+0x26>
   346da:	f249 0304 	movw	r3, #36868	; 0x9004
   346de:	4299      	cmp	r1, r3
   346e0:	d00a      	beq.n	346f8 <rpc_ip_event_handler+0x2c>
   346e2:	f248 030d 	movw	r3, #32781	; 0x800d
   346e6:	4299      	cmp	r1, r3
   346e8:	d117      	bne.n	3471a <rpc_ip_event_handler+0x4e>
   346ea:	f7ff fe2b 	bl	34344 <on_getaddrinfo_res>
   346ee:	b2c0      	uxtb	r0, r0
   346f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   346f2:	f00b ffc6 	bl	40682 <on_conf_dnssrv_res>
   346f6:	e7fa      	b.n	346ee <rpc_ip_event_handler+0x22>
   346f8:	6903      	ldr	r3, [r0, #16]
   346fa:	2b03      	cmp	r3, #3
   346fc:	d806      	bhi.n	3470c <rpc_ip_event_handler+0x40>
   346fe:	e8df f003 	tbb	[pc, r3]
   34702:	0a02      	.short	0x0a02
   34704:	0702      	.short	0x0702
   34706:	2000      	movs	r0, #0
   34708:	f7ff fdfe 	bl	34308 <sock_flow_control_set>
   3470c:	2000      	movs	r0, #0
   3470e:	e7ef      	b.n	346f0 <rpc_ip_event_handler+0x24>
   34710:	2201      	movs	r2, #1
   34712:	4b71      	ldr	r3, [pc, #452]	; (348d8 <rpc_ip_event_handler+0x20c>)
   34714:	701a      	strb	r2, [r3, #0]
   34716:	2001      	movs	r0, #1
   34718:	e7f6      	b.n	34708 <rpc_ip_event_handler+0x3c>
   3471a:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   3471e:	bf8c      	ite	hi
   34720:	68c0      	ldrhi	r0, [r0, #12]
   34722:	6928      	ldrls	r0, [r5, #16]
   34724:	f7ff fdc8 	bl	342b8 <sock_find>
   34728:	4604      	mov	r4, r0
   3472a:	b928      	cbnz	r0, 34738 <rpc_ip_event_handler+0x6c>
   3472c:	6828      	ldr	r0, [r5, #0]
   3472e:	2800      	cmp	r0, #0
   34730:	d0ec      	beq.n	3470c <rpc_ip_event_handler+0x40>
   34732:	f00b fd4c 	bl	401ce <rpc_client_data_free>
   34736:	e7e9      	b.n	3470c <rpc_ip_event_handler+0x40>
   34738:	f248 030c 	movw	r3, #32780	; 0x800c
   3473c:	429e      	cmp	r6, r3
   3473e:	d823      	bhi.n	34788 <rpc_ip_event_handler+0xbc>
   34740:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   34744:	d9f2      	bls.n	3472c <rpc_ip_event_handler+0x60>
   34746:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   3474a:	3e01      	subs	r6, #1
   3474c:	2e0b      	cmp	r6, #11
   3474e:	d8ed      	bhi.n	3472c <rpc_ip_event_handler+0x60>
   34750:	a301      	add	r3, pc, #4	; (adr r3, 34758 <rpc_ip_event_handler+0x8c>)
   34752:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   34756:	bf00      	nop
   34758:	000347fb 	.word	0x000347fb
   3475c:	00034817 	.word	0x00034817
   34760:	000347fb 	.word	0x000347fb
   34764:	000347fb 	.word	0x000347fb
   34768:	000347fb 	.word	0x000347fb
   3476c:	000347fb 	.word	0x000347fb
   34770:	000347fb 	.word	0x000347fb
   34774:	000347fb 	.word	0x000347fb
   34778:	000347f3 	.word	0x000347f3
   3477c:	0003472d 	.word	0x0003472d
   34780:	0003472d 	.word	0x0003472d
   34784:	0003485b 	.word	0x0003485b
   34788:	f249 0302 	movw	r3, #36866	; 0x9002
   3478c:	429e      	cmp	r6, r3
   3478e:	d068      	beq.n	34862 <rpc_ip_event_handler+0x196>
   34790:	d822      	bhi.n	347d8 <rpc_ip_event_handler+0x10c>
   34792:	f248 0381 	movw	r3, #32897	; 0x8081
   34796:	429e      	cmp	r6, r3
   34798:	f000 8098 	beq.w	348cc <rpc_ip_event_handler+0x200>
   3479c:	f249 0301 	movw	r3, #36865	; 0x9001
   347a0:	429e      	cmp	r6, r3
   347a2:	d1c3      	bne.n	3472c <rpc_ip_event_handler+0x60>
   347a4:	2010      	movs	r0, #16
   347a6:	f7f1 f9e3 	bl	25b70 <nrf_modem_os_alloc>
   347aa:	4606      	mov	r6, r0
   347ac:	2800      	cmp	r0, #0
   347ae:	d065      	beq.n	3487c <rpc_ip_event_handler+0x1b0>
   347b0:	2710      	movs	r7, #16
   347b2:	2100      	movs	r1, #0
   347b4:	463a      	mov	r2, r7
   347b6:	f00c ff24 	bl	41602 <memset>
   347ba:	682b      	ldr	r3, [r5, #0]
   347bc:	6073      	str	r3, [r6, #4]
   347be:	686b      	ldr	r3, [r5, #4]
   347c0:	8133      	strh	r3, [r6, #8]
   347c2:	8a6b      	ldrh	r3, [r5, #18]
   347c4:	2b04      	cmp	r3, #4
   347c6:	d051      	beq.n	3486c <rpc_ip_event_handler+0x1a0>
   347c8:	42bb      	cmp	r3, r7
   347ca:	d064      	beq.n	34896 <rpc_ip_event_handler+0x1ca>
   347cc:	4620      	mov	r0, r4
   347ce:	4631      	mov	r1, r6
   347d0:	f00b fe16 	bl	40400 <sock_pkt_append>
   347d4:	2000      	movs	r0, #0
   347d6:	e78a      	b.n	346ee <rpc_ip_event_handler+0x22>
   347d8:	f249 0303 	movw	r3, #36867	; 0x9003
   347dc:	429e      	cmp	r6, r3
   347de:	d010      	beq.n	34802 <rpc_ip_event_handler+0x136>
   347e0:	f249 0382 	movw	r3, #36994	; 0x9082
   347e4:	429e      	cmp	r6, r3
   347e6:	d1a1      	bne.n	3472c <rpc_ip_event_handler+0x60>
   347e8:	4601      	mov	r1, r0
   347ea:	4628      	mov	r0, r5
   347ec:	f000 fb36 	bl	34e5c <on_tls_handshake_ntf>
   347f0:	e77d      	b.n	346ee <rpc_ip_event_handler+0x22>
   347f2:	7f03      	ldrb	r3, [r0, #28]
   347f4:	f043 0302 	orr.w	r3, r3, #2
   347f8:	7723      	strb	r3, [r4, #28]
   347fa:	4628      	mov	r0, r5
   347fc:	f00c fc29 	bl	41052 <res_forward>
   34800:	e775      	b.n	346ee <rpc_ip_event_handler+0x22>
   34802:	7f03      	ldrb	r3, [r0, #28]
   34804:	f043 0302 	orr.w	r3, r3, #2
   34808:	7703      	strb	r3, [r0, #28]
   3480a:	6928      	ldr	r0, [r5, #16]
   3480c:	2869      	cmp	r0, #105	; 0x69
   3480e:	d109      	bne.n	34824 <rpc_ip_event_handler+0x158>
   34810:	2368      	movs	r3, #104	; 0x68
   34812:	61a3      	str	r3, [r4, #24]
   34814:	e77a      	b.n	3470c <rpc_ip_event_handler+0x40>
   34816:	7f03      	ldrb	r3, [r0, #28]
   34818:	68ee      	ldr	r6, [r5, #12]
   3481a:	f36f 0382 	bfc	r3, #2, #1
   3481e:	7703      	strb	r3, [r0, #28]
   34820:	6968      	ldr	r0, [r5, #20]
   34822:	b118      	cbz	r0, 3482c <rpc_ip_event_handler+0x160>
   34824:	f000 fba8 	bl	34f78 <rpc_error_to_nrf_errno>
   34828:	61a0      	str	r0, [r4, #24]
   3482a:	e76f      	b.n	3470c <rpc_ip_event_handler+0x40>
   3482c:	61a0      	str	r0, [r4, #24]
   3482e:	4620      	mov	r0, r4
   34830:	f00b fe17 	bl	40462 <sock_proto_is_secure>
   34834:	b918      	cbnz	r0, 3483e <rpc_ip_event_handler+0x172>
   34836:	7f23      	ldrb	r3, [r4, #28]
   34838:	f043 0308 	orr.w	r3, r3, #8
   3483c:	7723      	strb	r3, [r4, #28]
   3483e:	4620      	mov	r0, r4
   34840:	f00b fe0f 	bl	40462 <sock_proto_is_secure>
   34844:	2800      	cmp	r0, #0
   34846:	f43f af61 	beq.w	3470c <rpc_ip_event_handler+0x40>
   3484a:	2e00      	cmp	r6, #0
   3484c:	f43f af5e 	beq.w	3470c <rpc_ip_event_handler+0x40>
   34850:	2100      	movs	r1, #0
   34852:	4620      	mov	r0, r4
   34854:	f000 fb18 	bl	34e88 <tls_attach>
   34858:	e758      	b.n	3470c <rpc_ip_event_handler+0x40>
   3485a:	7f03      	ldrb	r3, [r0, #28]
   3485c:	f36f 1345 	bfc	r3, #5, #1
   34860:	e7ca      	b.n	347f8 <rpc_ip_event_handler+0x12c>
   34862:	7f03      	ldrb	r3, [r0, #28]
   34864:	f043 0320 	orr.w	r3, r3, #32
   34868:	7703      	strb	r3, [r0, #28]
   3486a:	e74f      	b.n	3470c <rpc_ip_event_handler+0x40>
   3486c:	4638      	mov	r0, r7
   3486e:	f7f1 f97f 	bl	25b70 <nrf_modem_os_alloc>
   34872:	60f0      	str	r0, [r6, #12]
   34874:	b920      	cbnz	r0, 34880 <rpc_ip_event_handler+0x1b4>
   34876:	4630      	mov	r0, r6
   34878:	f7f1 f982 	bl	25b80 <nrf_modem_os_free>
   3487c:	2002      	movs	r0, #2
   3487e:	e736      	b.n	346ee <rpc_ip_event_handler+0x22>
   34880:	2301      	movs	r3, #1
   34882:	7007      	strb	r7, [r0, #0]
   34884:	7c6a      	ldrb	r2, [r5, #17]
   34886:	6043      	str	r3, [r0, #4]
   34888:	7c2b      	ldrb	r3, [r5, #16]
   3488a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3488e:	8103      	strh	r3, [r0, #8]
   34890:	696b      	ldr	r3, [r5, #20]
   34892:	60c3      	str	r3, [r0, #12]
   34894:	e79a      	b.n	347cc <rpc_ip_event_handler+0x100>
   34896:	2024      	movs	r0, #36	; 0x24
   34898:	f7f1 f96a 	bl	25b70 <nrf_modem_os_alloc>
   3489c:	60f0      	str	r0, [r6, #12]
   3489e:	2800      	cmp	r0, #0
   348a0:	d0e9      	beq.n	34876 <rpc_ip_event_handler+0x1aa>
   348a2:	2324      	movs	r3, #36	; 0x24
   348a4:	7003      	strb	r3, [r0, #0]
   348a6:	2302      	movs	r3, #2
   348a8:	7c6a      	ldrb	r2, [r5, #17]
   348aa:	6043      	str	r3, [r0, #4]
   348ac:	7c2b      	ldrb	r3, [r5, #16]
   348ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   348b2:	8103      	strh	r3, [r0, #8]
   348b4:	f105 0214 	add.w	r2, r5, #20
   348b8:	f100 0310 	add.w	r3, r0, #16
   348bc:	3524      	adds	r5, #36	; 0x24
   348be:	f852 1b04 	ldr.w	r1, [r2], #4
   348c2:	42aa      	cmp	r2, r5
   348c4:	f843 1b04 	str.w	r1, [r3], #4
   348c8:	d1f9      	bne.n	348be <rpc_ip_event_handler+0x1f2>
   348ca:	e77f      	b.n	347cc <rpc_ip_event_handler+0x100>
   348cc:	4601      	mov	r1, r0
   348ce:	4628      	mov	r0, r5
   348d0:	f000 fab4 	bl	34e3c <on_tls_attach_res>
   348d4:	e70b      	b.n	346ee <rpc_ip_event_handler+0x22>
   348d6:	bf00      	nop
   348d8:	2001d3c0 	.word	0x2001d3c0

000348dc <ip_interface_init>:
   348dc:	b508      	push	{r3, lr}
   348de:	f7ff fcab 	bl	34238 <sock_init>
   348e2:	f7ff fd3b 	bl	3435c <addrinfo_init>
   348e6:	2200      	movs	r2, #0
   348e8:	4b04      	ldr	r3, [pc, #16]	; (348fc <ip_interface_init+0x20>)
   348ea:	4805      	ldr	r0, [pc, #20]	; (34900 <ip_interface_init+0x24>)
   348ec:	701a      	strb	r2, [r3, #0]
   348ee:	2201      	movs	r2, #1
   348f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   348f4:	4611      	mov	r1, r2
   348f6:	f7f1 b873 	b.w	259e0 <nrf_modem_os_sem_init>
   348fa:	bf00      	nop
   348fc:	2001d3c0 	.word	0x2001d3c0
   34900:	2001a4bc 	.word	0x2001a4bc

00034904 <nrf_connect>:
   34904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   34908:	4607      	mov	r7, r0
   3490a:	460c      	mov	r4, r1
   3490c:	4690      	mov	r8, r2
   3490e:	f7ff fcd3 	bl	342b8 <sock_find>
   34912:	4605      	mov	r5, r0
   34914:	b940      	cbnz	r0, 34928 <nrf_connect+0x24>
   34916:	2009      	movs	r0, #9
   34918:	f7f1 f84e 	bl	259b8 <nrf_modem_os_errno_set>
   3491c:	f04f 34ff 	mov.w	r4, #4294967295
   34920:	4620      	mov	r0, r4
   34922:	b002      	add	sp, #8
   34924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34928:	f00b fdab 	bl	40482 <sock_is_connected>
   3492c:	b108      	cbz	r0, 34932 <nrf_connect+0x2e>
   3492e:	207f      	movs	r0, #127	; 0x7f
   34930:	e7f2      	b.n	34918 <nrf_connect+0x14>
   34932:	4628      	mov	r0, r5
   34934:	f00b fda1 	bl	4047a <sock_is_connecting>
   34938:	4606      	mov	r6, r0
   3493a:	b108      	cbz	r0, 34940 <nrf_connect+0x3c>
   3493c:	2078      	movs	r0, #120	; 0x78
   3493e:	e7eb      	b.n	34918 <nrf_connect+0x14>
   34940:	b90c      	cbnz	r4, 34946 <nrf_connect+0x42>
   34942:	200e      	movs	r0, #14
   34944:	e7e8      	b.n	34918 <nrf_connect+0x14>
   34946:	4641      	mov	r1, r8
   34948:	4620      	mov	r0, r4
   3494a:	f00b fe49 	bl	405e0 <sock_sockaddr_len_is_valid>
   3494e:	b908      	cbnz	r0, 34954 <nrf_connect+0x50>
   34950:	2016      	movs	r0, #22
   34952:	e7e1      	b.n	34918 <nrf_connect+0x14>
   34954:	4621      	mov	r1, r4
   34956:	4628      	mov	r0, r5
   34958:	f00b fe56 	bl	40608 <sock_sockaddr_fam_is_valid>
   3495c:	b908      	cbnz	r0, 34962 <nrf_connect+0x5e>
   3495e:	206a      	movs	r0, #106	; 0x6a
   34960:	e7da      	b.n	34918 <nrf_connect+0x14>
   34962:	4628      	mov	r0, r5
   34964:	f00b fd95 	bl	40492 <sock_is_nonblock>
   34968:	b1a8      	cbz	r0, 34996 <nrf_connect+0x92>
   3496a:	696b      	ldr	r3, [r5, #20]
   3496c:	2b11      	cmp	r3, #17
   3496e:	d00b      	beq.n	34988 <nrf_connect+0x84>
   34970:	4628      	mov	r0, r5
   34972:	f00b fd76 	bl	40462 <sock_proto_is_secure>
   34976:	b130      	cbz	r0, 34986 <nrf_connect+0x82>
   34978:	4b32      	ldr	r3, [pc, #200]	; (34a44 <nrf_connect+0x140>)
   3497a:	6818      	ldr	r0, [r3, #0]
   3497c:	f00a fab2 	bl	3eee4 <nrf_modem_os_sem_count_get>
   34980:	b908      	cbnz	r0, 34986 <nrf_connect+0x82>
   34982:	2010      	movs	r0, #16
   34984:	e7c8      	b.n	34918 <nrf_connect+0x14>
   34986:	2601      	movs	r6, #1
   34988:	2000      	movs	r0, #0
   3498a:	f00b fc10 	bl	401ae <rpc_client_request_alloc>
   3498e:	4602      	mov	r2, r0
   34990:	b918      	cbnz	r0, 3499a <nrf_connect+0x96>
   34992:	2069      	movs	r0, #105	; 0x69
   34994:	e7c0      	b.n	34918 <nrf_connect+0x14>
   34996:	4606      	mov	r6, r0
   34998:	e7f6      	b.n	34988 <nrf_connect+0x84>
   3499a:	2114      	movs	r1, #20
   3499c:	2300      	movs	r3, #0
   3499e:	7201      	strb	r1, [r0, #8]
   349a0:	6861      	ldr	r1, [r4, #4]
   349a2:	6107      	str	r7, [r0, #16]
   349a4:	2901      	cmp	r1, #1
   349a6:	7243      	strb	r3, [r0, #9]
   349a8:	7283      	strb	r3, [r0, #10]
   349aa:	72c3      	strb	r3, [r0, #11]
   349ac:	d00e      	beq.n	349cc <nrf_connect+0xc8>
   349ae:	2902      	cmp	r1, #2
   349b0:	d014      	beq.n	349dc <nrf_connect+0xd8>
   349b2:	7f2b      	ldrb	r3, [r5, #28]
   349b4:	f247 0102 	movw	r1, #28674	; 0x7002
   349b8:	f043 0304 	orr.w	r3, r3, #4
   349bc:	772b      	strb	r3, [r5, #28]
   349be:	2004      	movs	r0, #4
   349c0:	60d6      	str	r6, [r2, #12]
   349c2:	f00b fbfa 	bl	401ba <rpc_client_request_send>
   349c6:	b1ce      	cbz	r6, 349fc <nrf_connect+0xf8>
   349c8:	2077      	movs	r0, #119	; 0x77
   349ca:	e7a5      	b.n	34918 <nrf_connect+0x14>
   349cc:	8921      	ldrh	r1, [r4, #8]
   349ce:	75c3      	strb	r3, [r0, #23]
   349d0:	8281      	strh	r1, [r0, #20]
   349d2:	2104      	movs	r1, #4
   349d4:	7581      	strb	r1, [r0, #22]
   349d6:	68e3      	ldr	r3, [r4, #12]
   349d8:	6183      	str	r3, [r0, #24]
   349da:	e7ea      	b.n	349b2 <nrf_connect+0xae>
   349dc:	8921      	ldrh	r1, [r4, #8]
   349de:	75c3      	strb	r3, [r0, #23]
   349e0:	8281      	strh	r1, [r0, #20]
   349e2:	2110      	movs	r1, #16
   349e4:	1863      	adds	r3, r4, r1
   349e6:	7581      	strb	r1, [r0, #22]
   349e8:	3420      	adds	r4, #32
   349ea:	f100 0118 	add.w	r1, r0, #24
   349ee:	f853 0b04 	ldr.w	r0, [r3], #4
   349f2:	42a3      	cmp	r3, r4
   349f4:	f841 0b04 	str.w	r0, [r1], #4
   349f8:	d1f9      	bne.n	349ee <nrf_connect+0xea>
   349fa:	e7da      	b.n	349b2 <nrf_connect+0xae>
   349fc:	4628      	mov	r0, r5
   349fe:	f00b fda6 	bl	4054e <sock_sndtimeo_ms_get>
   34a02:	9001      	str	r0, [sp, #4]
   34a04:	4628      	mov	r0, r5
   34a06:	f00b fd38 	bl	4047a <sock_is_connecting>
   34a0a:	b918      	cbnz	r0, 34a14 <nrf_connect+0x110>
   34a0c:	69ac      	ldr	r4, [r5, #24]
   34a0e:	b16c      	cbz	r4, 34a2c <nrf_connect+0x128>
   34a10:	4620      	mov	r0, r4
   34a12:	e781      	b.n	34918 <nrf_connect+0x14>
   34a14:	2000      	movs	r0, #0
   34a16:	a901      	add	r1, sp, #4
   34a18:	f7f0 ff0c 	bl	25834 <nrf_modem_os_timedwait>
   34a1c:	2800      	cmp	r0, #0
   34a1e:	d0f1      	beq.n	34a04 <nrf_connect+0x100>
   34a20:	f110 0f0b 	cmn.w	r0, #11
   34a24:	bf0c      	ite	eq
   34a26:	2074      	moveq	r0, #116	; 0x74
   34a28:	206e      	movne	r0, #110	; 0x6e
   34a2a:	e775      	b.n	34918 <nrf_connect+0x14>
   34a2c:	4628      	mov	r0, r5
   34a2e:	f00b fd18 	bl	40462 <sock_proto_is_secure>
   34a32:	2800      	cmp	r0, #0
   34a34:	f43f af74 	beq.w	34920 <nrf_connect+0x1c>
   34a38:	4628      	mov	r0, r5
   34a3a:	9901      	ldr	r1, [sp, #4]
   34a3c:	f000 fa24 	bl	34e88 <tls_attach>
   34a40:	4604      	mov	r4, r0
   34a42:	e76d      	b.n	34920 <nrf_connect+0x1c>
   34a44:	2001a4bc 	.word	0x2001a4bc

00034a48 <nrf_sendto>:
   34a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34a4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   34a4e:	4682      	mov	sl, r0
   34a50:	4689      	mov	r9, r1
   34a52:	4617      	mov	r7, r2
   34a54:	461e      	mov	r6, r3
   34a56:	f7ff fc2f 	bl	342b8 <sock_find>
   34a5a:	4604      	mov	r4, r0
   34a5c:	b928      	cbnz	r0, 34a6a <nrf_sendto+0x22>
   34a5e:	2009      	movs	r0, #9
   34a60:	f7f0 ffaa 	bl	259b8 <nrf_modem_os_errno_set>
   34a64:	f04f 34ff 	mov.w	r4, #4294967295
   34a68:	e096      	b.n	34b98 <nrf_sendto+0x150>
   34a6a:	f036 0340 	bics.w	r3, r6, #64	; 0x40
   34a6e:	d001      	beq.n	34a74 <nrf_sendto+0x2c>
   34a70:	205f      	movs	r0, #95	; 0x5f
   34a72:	e7f5      	b.n	34a60 <nrf_sendto+0x18>
   34a74:	2d00      	cmp	r5, #0
   34a76:	f000 80dc 	beq.w	34c32 <nrf_sendto+0x1ea>
   34a7a:	f00b fce3 	bl	40444 <sock_is_stream>
   34a7e:	b9b8      	cbnz	r0, 34ab0 <nrf_sendto+0x68>
   34a80:	4629      	mov	r1, r5
   34a82:	4620      	mov	r0, r4
   34a84:	f00b fdc0 	bl	40608 <sock_sockaddr_fam_is_valid>
   34a88:	b908      	cbnz	r0, 34a8e <nrf_sendto+0x46>
   34a8a:	206a      	movs	r0, #106	; 0x6a
   34a8c:	e7e8      	b.n	34a60 <nrf_sendto+0x18>
   34a8e:	4628      	mov	r0, r5
   34a90:	990d      	ldr	r1, [sp, #52]	; 0x34
   34a92:	f00b fda5 	bl	405e0 <sock_sockaddr_len_is_valid>
   34a96:	b908      	cbnz	r0, 34a9c <nrf_sendto+0x54>
   34a98:	2016      	movs	r0, #22
   34a9a:	e7e1      	b.n	34a60 <nrf_sendto+0x18>
   34a9c:	4620      	mov	r0, r4
   34a9e:	f00b fcd6 	bl	4044e <sock_is_datagram>
   34aa2:	b128      	cbz	r0, 34ab0 <nrf_sendto+0x68>
   34aa4:	4620      	mov	r0, r4
   34aa6:	f00b fcdc 	bl	40462 <sock_proto_is_secure>
   34aaa:	b108      	cbz	r0, 34ab0 <nrf_sendto+0x68>
   34aac:	207f      	movs	r0, #127	; 0x7f
   34aae:	e7d7      	b.n	34a60 <nrf_sendto+0x18>
   34ab0:	4620      	mov	r0, r4
   34ab2:	f00b fcf6 	bl	404a2 <sock_is_closed>
   34ab6:	b108      	cbz	r0, 34abc <nrf_sendto+0x74>
   34ab8:	69a0      	ldr	r0, [r4, #24]
   34aba:	e7d1      	b.n	34a60 <nrf_sendto+0x18>
   34abc:	4620      	mov	r0, r4
   34abe:	f00b fd46 	bl	4054e <sock_sndtimeo_ms_get>
   34ac2:	9000      	str	r0, [sp, #0]
   34ac4:	4620      	mov	r0, r4
   34ac6:	f00b fce4 	bl	40492 <sock_is_nonblock>
   34aca:	bb18      	cbnz	r0, 34b14 <nrf_sendto+0xcc>
   34acc:	f3c6 1880 	ubfx	r8, r6, #6, #1
   34ad0:	4620      	mov	r0, r4
   34ad2:	f00b fcb7 	bl	40444 <sock_is_stream>
   34ad6:	b140      	cbz	r0, 34aea <nrf_sendto+0xa2>
   34ad8:	4620      	mov	r0, r4
   34ada:	f00b fcc2 	bl	40462 <sock_proto_is_secure>
   34ade:	b120      	cbz	r0, 34aea <nrf_sendto+0xa2>
   34ae0:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
   34ae4:	bf28      	it	cs
   34ae6:	f44f 6700 	movcs.w	r7, #2048	; 0x800
   34aea:	4620      	mov	r0, r4
   34aec:	f00b fce4 	bl	404b8 <sock_has_flow_control>
   34af0:	b118      	cbz	r0, 34afa <nrf_sendto+0xb2>
   34af2:	4620      	mov	r0, r4
   34af4:	f00b fcd5 	bl	404a2 <sock_is_closed>
   34af8:	b178      	cbz	r0, 34b1a <nrf_sendto+0xd2>
   34afa:	4638      	mov	r0, r7
   34afc:	f00b fb57 	bl	401ae <rpc_client_request_alloc>
   34b00:	4683      	mov	fp, r0
   34b02:	b9b8      	cbnz	r0, 34b34 <nrf_sendto+0xec>
   34b04:	4669      	mov	r1, sp
   34b06:	f7f0 fe95 	bl	25834 <nrf_modem_os_timedwait>
   34b0a:	b980      	cbnz	r0, 34b2e <nrf_sendto+0xe6>
   34b0c:	f1b8 0f00 	cmp.w	r8, #0
   34b10:	d0f3      	beq.n	34afa <nrf_sendto+0xb2>
   34b12:	e005      	b.n	34b20 <nrf_sendto+0xd8>
   34b14:	f04f 0801 	mov.w	r8, #1
   34b18:	e7da      	b.n	34ad0 <nrf_sendto+0x88>
   34b1a:	f1b8 0f00 	cmp.w	r8, #0
   34b1e:	d001      	beq.n	34b24 <nrf_sendto+0xdc>
   34b20:	200b      	movs	r0, #11
   34b22:	e79d      	b.n	34a60 <nrf_sendto+0x18>
   34b24:	4669      	mov	r1, sp
   34b26:	f7f0 fe85 	bl	25834 <nrf_modem_os_timedwait>
   34b2a:	2800      	cmp	r0, #0
   34b2c:	d0dd      	beq.n	34aea <nrf_sendto+0xa2>
   34b2e:	f00c fd22 	bl	41576 <abs>
   34b32:	e795      	b.n	34a60 <nrf_sendto+0x18>
   34b34:	f8c0 a010 	str.w	sl, [r0, #16]
   34b38:	f1b9 0f00 	cmp.w	r9, #0
   34b3c:	d004      	beq.n	34b48 <nrf_sendto+0x100>
   34b3e:	463a      	mov	r2, r7
   34b40:	4649      	mov	r1, r9
   34b42:	6800      	ldr	r0, [r0, #0]
   34b44:	f00c fd3d 	bl	415c2 <memcpy>
   34b48:	6b22      	ldr	r2, [r4, #48]	; 0x30
   34b4a:	b112      	cbz	r2, 34b52 <nrf_sendto+0x10a>
   34b4c:	4316      	orrs	r6, r2
   34b4e:	2200      	movs	r2, #0
   34b50:	6322      	str	r2, [r4, #48]	; 0x30
   34b52:	2d00      	cmp	r5, #0
   34b54:	d044      	beq.n	34be0 <nrf_sendto+0x198>
   34b56:	4620      	mov	r0, r4
   34b58:	f00b fc74 	bl	40444 <sock_is_stream>
   34b5c:	2800      	cmp	r0, #0
   34b5e:	d13f      	bne.n	34be0 <nrf_sendto+0x198>
   34b60:	2218      	movs	r2, #24
   34b62:	f88b 2008 	strb.w	r2, [fp, #8]
   34b66:	686a      	ldr	r2, [r5, #4]
   34b68:	f88b 0009 	strb.w	r0, [fp, #9]
   34b6c:	2a01      	cmp	r2, #1
   34b6e:	f88b 000a 	strb.w	r0, [fp, #10]
   34b72:	f88b 000b 	strb.w	r0, [fp, #11]
   34b76:	f8cb 6014 	str.w	r6, [fp, #20]
   34b7a:	d011      	beq.n	34ba0 <nrf_sendto+0x158>
   34b7c:	2a02      	cmp	r2, #2
   34b7e:	d01b      	beq.n	34bb8 <nrf_sendto+0x170>
   34b80:	f247 0007 	movw	r0, #28679	; 0x7007
   34b84:	4659      	mov	r1, fp
   34b86:	aa01      	add	r2, sp, #4
   34b88:	f000 fa02 	bl	34f90 <req_forward>
   34b8c:	4603      	mov	r3, r0
   34b8e:	bbb0      	cbnz	r0, 34bfe <nrf_sendto+0x1b6>
   34b90:	9801      	ldr	r0, [sp, #4]
   34b92:	6984      	ldr	r4, [r0, #24]
   34b94:	f00b fb18 	bl	401c8 <rpc_client_message_free>
   34b98:	4620      	mov	r0, r4
   34b9a:	b003      	add	sp, #12
   34b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34ba0:	892a      	ldrh	r2, [r5, #8]
   34ba2:	f88b 001b 	strb.w	r0, [fp, #27]
   34ba6:	f8ab 2018 	strh.w	r2, [fp, #24]
   34baa:	2204      	movs	r2, #4
   34bac:	f88b 201a 	strb.w	r2, [fp, #26]
   34bb0:	68ea      	ldr	r2, [r5, #12]
   34bb2:	f8cb 201c 	str.w	r2, [fp, #28]
   34bb6:	e7e3      	b.n	34b80 <nrf_sendto+0x138>
   34bb8:	892a      	ldrh	r2, [r5, #8]
   34bba:	f10b 011c 	add.w	r1, fp, #28
   34bbe:	f8ab 2018 	strh.w	r2, [fp, #24]
   34bc2:	2210      	movs	r2, #16
   34bc4:	f88b 001b 	strb.w	r0, [fp, #27]
   34bc8:	f88b 201a 	strb.w	r2, [fp, #26]
   34bcc:	f105 0020 	add.w	r0, r5, #32
   34bd0:	18aa      	adds	r2, r5, r2
   34bd2:	f852 cb04 	ldr.w	ip, [r2], #4
   34bd6:	4282      	cmp	r2, r0
   34bd8:	f841 cb04 	str.w	ip, [r1], #4
   34bdc:	d1f9      	bne.n	34bd2 <nrf_sendto+0x18a>
   34bde:	e7cf      	b.n	34b80 <nrf_sendto+0x138>
   34be0:	2200      	movs	r2, #0
   34be2:	2104      	movs	r1, #4
   34be4:	f247 0006 	movw	r0, #28678	; 0x7006
   34be8:	f88b 1008 	strb.w	r1, [fp, #8]
   34bec:	f88b 2009 	strb.w	r2, [fp, #9]
   34bf0:	f88b 200a 	strb.w	r2, [fp, #10]
   34bf4:	f88b 200b 	strb.w	r2, [fp, #11]
   34bf8:	f8cb 6014 	str.w	r6, [fp, #20]
   34bfc:	e7c2      	b.n	34b84 <nrf_sendto+0x13c>
   34bfe:	286e      	cmp	r0, #110	; 0x6e
   34c00:	f43f af2e 	beq.w	34a60 <nrf_sendto+0x18>
   34c04:	280c      	cmp	r0, #12
   34c06:	dc09      	bgt.n	34c1c <nrf_sendto+0x1d4>
   34c08:	280a      	cmp	r0, #10
   34c0a:	dd0a      	ble.n	34c22 <nrf_sendto+0x1da>
   34c0c:	4b0f      	ldr	r3, [pc, #60]	; (34c4c <nrf_sendto+0x204>)
   34c0e:	7818      	ldrb	r0, [r3, #0]
   34c10:	b148      	cbz	r0, 34c26 <nrf_sendto+0x1de>
   34c12:	f1b8 0f00 	cmp.w	r8, #0
   34c16:	f43f af68 	beq.w	34aea <nrf_sendto+0xa2>
   34c1a:	e781      	b.n	34b20 <nrf_sendto+0xd8>
   34c1c:	288c      	cmp	r0, #140	; 0x8c
   34c1e:	f43f af1f 	beq.w	34a60 <nrf_sendto+0x18>
   34c22:	4618      	mov	r0, r3
   34c24:	e71c      	b.n	34a60 <nrf_sendto+0x18>
   34c26:	4669      	mov	r1, sp
   34c28:	f7f0 fe04 	bl	25834 <nrf_modem_os_timedwait>
   34c2c:	2800      	cmp	r0, #0
   34c2e:	d0f0      	beq.n	34c12 <nrf_sendto+0x1ca>
   34c30:	e77d      	b.n	34b2e <nrf_sendto+0xe6>
   34c32:	f00b fc0c 	bl	4044e <sock_is_datagram>
   34c36:	2800      	cmp	r0, #0
   34c38:	f43f af3a 	beq.w	34ab0 <nrf_sendto+0x68>
   34c3c:	4620      	mov	r0, r4
   34c3e:	f00b fc20 	bl	40482 <sock_is_connected>
   34c42:	2800      	cmp	r0, #0
   34c44:	f47f af34 	bne.w	34ab0 <nrf_sendto+0x68>
   34c48:	2079      	movs	r0, #121	; 0x79
   34c4a:	e709      	b.n	34a60 <nrf_sendto+0x18>
   34c4c:	2001d3c0 	.word	0x2001d3c0

00034c50 <nrf_setsockopt>:
   34c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34c54:	b085      	sub	sp, #20
   34c56:	4680      	mov	r8, r0
   34c58:	4689      	mov	r9, r1
   34c5a:	4617      	mov	r7, r2
   34c5c:	461d      	mov	r5, r3
   34c5e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   34c60:	f7ff fb2a 	bl	342b8 <sock_find>
   34c64:	b928      	cbnz	r0, 34c72 <nrf_setsockopt+0x22>
   34c66:	2009      	movs	r0, #9
   34c68:	f7f0 fea6 	bl	259b8 <nrf_modem_os_errno_set>
   34c6c:	f04f 34ff 	mov.w	r4, #4294967295
   34c70:	e06d      	b.n	34d4e <nrf_setsockopt+0xfe>
   34c72:	b915      	cbnz	r5, 34c7a <nrf_setsockopt+0x2a>
   34c74:	b10c      	cbz	r4, 34c7a <nrf_setsockopt+0x2a>
   34c76:	2016      	movs	r0, #22
   34c78:	e7f6      	b.n	34c68 <nrf_setsockopt+0x18>
   34c7a:	f5b9 7f8d 	cmp.w	r9, #282	; 0x11a
   34c7e:	d12c      	bne.n	34cda <nrf_setsockopt+0x8a>
   34c80:	1e7b      	subs	r3, r7, #1
   34c82:	2b08      	cmp	r3, #8
   34c84:	d829      	bhi.n	34cda <nrf_setsockopt+0x8a>
   34c86:	e8df f003 	tbb	[pc, r3]
   34c8a:	0c05      	.short	0x0c05
   34c8c:	a7211a13 	.word	0xa7211a13
   34c90:	a728      	.short	0xa728
   34c92:	a7          	.byte	0xa7
   34c93:	00          	.byte	0x00
   34c94:	4622      	mov	r2, r4
   34c96:	4629      	mov	r1, r5
   34c98:	b005      	add	sp, #20
   34c9a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34c9e:	f00c b85d 	b.w	40d5c <tls_setopt_role>
   34ca2:	4622      	mov	r2, r4
   34ca4:	4629      	mov	r1, r5
   34ca6:	b005      	add	sp, #20
   34ca8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34cac:	f00c b86d 	b.w	40d8a <tls_setopt_taglist>
   34cb0:	4622      	mov	r2, r4
   34cb2:	4629      	mov	r1, r5
   34cb4:	b005      	add	sp, #20
   34cb6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34cba:	f00c b879 	b.w	40db0 <tls_setopt_sess_cache>
   34cbe:	4622      	mov	r2, r4
   34cc0:	4629      	mov	r1, r5
   34cc2:	b005      	add	sp, #20
   34cc4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34cc8:	f00c b884 	b.w	40dd4 <tls_setopt_peer_verify>
   34ccc:	4622      	mov	r2, r4
   34cce:	4629      	mov	r1, r5
   34cd0:	b005      	add	sp, #20
   34cd2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34cd6:	f00c b88c 	b.w	40df2 <tls_setopt_hostname>
   34cda:	2f37      	cmp	r7, #55	; 0x37
   34cdc:	dc07      	bgt.n	34cee <nrf_setsockopt+0x9e>
   34cde:	2f31      	cmp	r7, #49	; 0x31
   34ce0:	dc07      	bgt.n	34cf2 <nrf_setsockopt+0xa2>
   34ce2:	2f02      	cmp	r7, #2
   34ce4:	d078      	beq.n	34dd8 <nrf_setsockopt+0x188>
   34ce6:	f1a7 0314 	sub.w	r3, r7, #20
   34cea:	2b0c      	cmp	r3, #12
   34cec:	d90a      	bls.n	34d04 <nrf_setsockopt+0xb4>
   34cee:	206d      	movs	r0, #109	; 0x6d
   34cf0:	e7ba      	b.n	34c68 <nrf_setsockopt+0x18>
   34cf2:	f1a7 0333 	sub.w	r3, r7, #51	; 0x33
   34cf6:	2b04      	cmp	r3, #4
   34cf8:	d849      	bhi.n	34d8e <nrf_setsockopt+0x13e>
   34cfa:	e8df f003 	tbb	[pc, r3]
   34cfe:	3f3b      	.short	0x3f3b
   34d00:	4542      	.short	0x4542
   34d02:	6d          	.byte	0x6d
   34d03:	00          	.byte	0x00
   34d04:	2b0c      	cmp	r3, #12
   34d06:	d8f2      	bhi.n	34cee <nrf_setsockopt+0x9e>
   34d08:	a201      	add	r2, pc, #4	; (adr r2, 34d10 <nrf_setsockopt+0xc0>)
   34d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   34d0e:	bf00      	nop
   34d10:	00034d45 	.word	0x00034d45
   34d14:	00034d57 	.word	0x00034d57
   34d18:	00034cef 	.word	0x00034cef
   34d1c:	00034cef 	.word	0x00034cef
   34d20:	00034cef 	.word	0x00034cef
   34d24:	00034da9 	.word	0x00034da9
   34d28:	00034cef 	.word	0x00034cef
   34d2c:	00034cef 	.word	0x00034cef
   34d30:	00034cef 	.word	0x00034cef
   34d34:	00034cef 	.word	0x00034cef
   34d38:	00034dd9 	.word	0x00034dd9
   34d3c:	00034dd9 	.word	0x00034dd9
   34d40:	00034dd9 	.word	0x00034dd9
   34d44:	f100 0320 	add.w	r3, r0, #32
   34d48:	b954      	cbnz	r4, 34d60 <nrf_setsockopt+0x110>
   34d4a:	6204      	str	r4, [r0, #32]
   34d4c:	605c      	str	r4, [r3, #4]
   34d4e:	4620      	mov	r0, r4
   34d50:	b005      	add	sp, #20
   34d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   34d56:	f100 0328 	add.w	r3, r0, #40	; 0x28
   34d5a:	b90c      	cbnz	r4, 34d60 <nrf_setsockopt+0x110>
   34d5c:	6284      	str	r4, [r0, #40]	; 0x28
   34d5e:	e7f5      	b.n	34d4c <nrf_setsockopt+0xfc>
   34d60:	2c08      	cmp	r4, #8
   34d62:	4622      	mov	r2, r4
   34d64:	4629      	mov	r1, r5
   34d66:	bf28      	it	cs
   34d68:	2208      	movcs	r2, #8
   34d6a:	4618      	mov	r0, r3
   34d6c:	f00c fc29 	bl	415c2 <memcpy>
   34d70:	2400      	movs	r4, #0
   34d72:	e7ec      	b.n	34d4e <nrf_setsockopt+0xfe>
   34d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   34d78:	6303      	str	r3, [r0, #48]	; 0x30
   34d7a:	e7f9      	b.n	34d70 <nrf_setsockopt+0x120>
   34d7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   34d80:	e7fa      	b.n	34d78 <nrf_setsockopt+0x128>
   34d82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   34d86:	e7f7      	b.n	34d78 <nrf_setsockopt+0x128>
   34d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   34d8c:	e7f4      	b.n	34d78 <nrf_setsockopt+0x128>
   34d8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   34d92:	6303      	str	r3, [r0, #48]	; 0x30
   34d94:	2300      	movs	r3, #0
   34d96:	4640      	mov	r0, r8
   34d98:	461a      	mov	r2, r3
   34d9a:	4619      	mov	r1, r3
   34d9c:	e9cd 3300 	strd	r3, r3, [sp]
   34da0:	f7ff fe52 	bl	34a48 <nrf_sendto>
   34da4:	4604      	mov	r4, r0
   34da6:	e7d2      	b.n	34d4e <nrf_setsockopt+0xfe>
   34da8:	2d00      	cmp	r5, #0
   34daa:	f43f af64 	beq.w	34c76 <nrf_setsockopt+0x26>
   34dae:	4822      	ldr	r0, [pc, #136]	; (34e38 <nrf_setsockopt+0x1e8>)
   34db0:	f7e8 fa47 	bl	1d242 <strlen>
   34db4:	4920      	ldr	r1, [pc, #128]	; (34e38 <nrf_setsockopt+0x1e8>)
   34db6:	4602      	mov	r2, r0
   34db8:	4628      	mov	r0, r5
   34dba:	f00c fbf2 	bl	415a2 <memcmp>
   34dbe:	4604      	mov	r4, r0
   34dc0:	b988      	cbnz	r0, 34de6 <nrf_setsockopt+0x196>
   34dc2:	481d      	ldr	r0, [pc, #116]	; (34e38 <nrf_setsockopt+0x1e8>)
   34dc4:	f7e8 fa3d 	bl	1d242 <strlen>
   34dc8:	220a      	movs	r2, #10
   34dca:	4621      	mov	r1, r4
   34dcc:	4428      	add	r0, r5
   34dce:	f005 feff 	bl	3abd0 <strtoul>
   34dd2:	2404      	movs	r4, #4
   34dd4:	9003      	str	r0, [sp, #12]
   34dd6:	ad03      	add	r5, sp, #12
   34dd8:	4620      	mov	r0, r4
   34dda:	f00b f9e8 	bl	401ae <rpc_client_request_alloc>
   34dde:	4606      	mov	r6, r0
   34de0:	b928      	cbnz	r0, 34dee <nrf_setsockopt+0x19e>
   34de2:	2069      	movs	r0, #105	; 0x69
   34de4:	e740      	b.n	34c68 <nrf_setsockopt+0x18>
   34de6:	220a      	movs	r2, #10
   34de8:	2100      	movs	r1, #0
   34dea:	4628      	mov	r0, r5
   34dec:	e7ef      	b.n	34dce <nrf_setsockopt+0x17e>
   34dee:	2308      	movs	r3, #8
   34df0:	f8c0 8010 	str.w	r8, [r0, #16]
   34df4:	f04f 0800 	mov.w	r8, #0
   34df8:	7203      	strb	r3, [r0, #8]
   34dfa:	f880 8009 	strb.w	r8, [r0, #9]
   34dfe:	f880 800a 	strb.w	r8, [r0, #10]
   34e02:	f880 800b 	strb.w	r8, [r0, #11]
   34e06:	4648      	mov	r0, r9
   34e08:	f00c f8ea 	bl	40fe0 <nrf_sol_to_rpc_sol>
   34e0c:	6170      	str	r0, [r6, #20]
   34e0e:	4638      	mov	r0, r7
   34e10:	f000 f8a6 	bl	34f60 <nrf_so_to_rpc_so>
   34e14:	4622      	mov	r2, r4
   34e16:	4629      	mov	r1, r5
   34e18:	61b0      	str	r0, [r6, #24]
   34e1a:	6830      	ldr	r0, [r6, #0]
   34e1c:	f00c fbd1 	bl	415c2 <memcpy>
   34e20:	6074      	str	r4, [r6, #4]
   34e22:	4642      	mov	r2, r8
   34e24:	4631      	mov	r1, r6
   34e26:	f247 0003 	movw	r0, #28675	; 0x7003
   34e2a:	f000 f8b1 	bl	34f90 <req_forward>
   34e2e:	4604      	mov	r4, r0
   34e30:	2800      	cmp	r0, #0
   34e32:	d08c      	beq.n	34d4e <nrf_setsockopt+0xfe>
   34e34:	e718      	b.n	34c68 <nrf_setsockopt+0x18>
   34e36:	bf00      	nop
   34e38:	0004bb7b 	.word	0x0004bb7b

00034e3c <on_tls_attach_res>:
   34e3c:	b510      	push	{r4, lr}
   34e3e:	6940      	ldr	r0, [r0, #20]
   34e40:	460c      	mov	r4, r1
   34e42:	b130      	cbz	r0, 34e52 <on_tls_attach_res+0x16>
   34e44:	f000 f898 	bl	34f78 <rpc_error_to_nrf_errno>
   34e48:	4b03      	ldr	r3, [pc, #12]	; (34e58 <on_tls_attach_res+0x1c>)
   34e4a:	61a0      	str	r0, [r4, #24]
   34e4c:	6818      	ldr	r0, [r3, #0]
   34e4e:	f7f0 fdff 	bl	25a50 <nrf_modem_os_sem_give>
   34e52:	2000      	movs	r0, #0
   34e54:	bd10      	pop	{r4, pc}
   34e56:	bf00      	nop
   34e58:	2001a4bc 	.word	0x2001a4bc

00034e5c <on_tls_handshake_ntf>:
   34e5c:	b510      	push	{r4, lr}
   34e5e:	6900      	ldr	r0, [r0, #16]
   34e60:	460c      	mov	r4, r1
   34e62:	b958      	cbnz	r0, 34e7c <on_tls_handshake_ntf+0x20>
   34e64:	7f0b      	ldrb	r3, [r1, #28]
   34e66:	f023 0318 	bic.w	r3, r3, #24
   34e6a:	f043 0318 	orr.w	r3, r3, #24
   34e6e:	770b      	strb	r3, [r1, #28]
   34e70:	4b04      	ldr	r3, [pc, #16]	; (34e84 <on_tls_handshake_ntf+0x28>)
   34e72:	6818      	ldr	r0, [r3, #0]
   34e74:	f7f0 fdec 	bl	25a50 <nrf_modem_os_sem_give>
   34e78:	2000      	movs	r0, #0
   34e7a:	bd10      	pop	{r4, pc}
   34e7c:	f000 f87c 	bl	34f78 <rpc_error_to_nrf_errno>
   34e80:	61a0      	str	r0, [r4, #24]
   34e82:	e7f5      	b.n	34e70 <on_tls_handshake_ntf+0x14>
   34e84:	2001a4bc 	.word	0x2001a4bc

00034e88 <tls_attach>:
   34e88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   34e8c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 34f5c <tls_attach+0xd4>
   34e90:	4606      	mov	r6, r0
   34e92:	f8d8 0000 	ldr.w	r0, [r8]
   34e96:	9101      	str	r1, [sp, #4]
   34e98:	f7f0 fdfa 	bl	25a90 <nrf_modem_os_sem_take>
   34e9c:	4607      	mov	r7, r0
   34e9e:	b120      	cbz	r0, 34eaa <tls_attach+0x22>
   34ea0:	2310      	movs	r3, #16
   34ea2:	61b3      	str	r3, [r6, #24]
   34ea4:	f04f 37ff 	mov.w	r7, #4294967295
   34ea8:	e054      	b.n	34f54 <tls_attach+0xcc>
   34eaa:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   34eac:	b1a8      	cbz	r0, 34eda <tls_attach+0x52>
   34eae:	f7e8 f9c8 	bl	1d242 <strlen>
   34eb2:	1c45      	adds	r5, r0, #1
   34eb4:	4628      	mov	r0, r5
   34eb6:	f00b f97a 	bl	401ae <rpc_client_request_alloc>
   34eba:	4604      	mov	r4, r0
   34ebc:	b978      	cbnz	r0, 34ede <tls_attach+0x56>
   34ebe:	4630      	mov	r0, r6
   34ec0:	f00b fae7 	bl	40492 <sock_is_nonblock>
   34ec4:	b108      	cbz	r0, 34eca <tls_attach+0x42>
   34ec6:	2369      	movs	r3, #105	; 0x69
   34ec8:	61b3      	str	r3, [r6, #24]
   34eca:	f8d8 0000 	ldr.w	r0, [r8]
   34ece:	f7f0 fdbf 	bl	25a50 <nrf_modem_os_sem_give>
   34ed2:	2069      	movs	r0, #105	; 0x69
   34ed4:	f7f0 fd70 	bl	259b8 <nrf_modem_os_errno_set>
   34ed8:	e7e4      	b.n	34ea4 <tls_attach+0x1c>
   34eda:	463d      	mov	r5, r7
   34edc:	e7ea      	b.n	34eb4 <tls_attach+0x2c>
   34ede:	6833      	ldr	r3, [r6, #0]
   34ee0:	f106 013c 	add.w	r1, r6, #60	; 0x3c
   34ee4:	6103      	str	r3, [r0, #16]
   34ee6:	f896 203f 	ldrb.w	r2, [r6, #63]	; 0x3f
   34eea:	3014      	adds	r0, #20
   34eec:	3201      	adds	r2, #1
   34eee:	0092      	lsls	r2, r2, #2
   34ef0:	f840 2c0c 	str.w	r2, [r0, #-12]
   34ef4:	f00c fb65 	bl	415c2 <memcpy>
   34ef8:	b1b5      	cbz	r5, 34f28 <tls_attach+0xa0>
   34efa:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   34efc:	6820      	ldr	r0, [r4, #0]
   34efe:	f00c fd4b 	bl	41998 <strcpy>
   34f02:	6065      	str	r5, [r4, #4]
   34f04:	2004      	movs	r0, #4
   34f06:	4622      	mov	r2, r4
   34f08:	f247 0181 	movw	r1, #28801	; 0x7081
   34f0c:	f00b f955 	bl	401ba <rpc_client_request_send>
   34f10:	4630      	mov	r0, r6
   34f12:	f00b fabe 	bl	40492 <sock_is_nonblock>
   34f16:	b9e8      	cbnz	r0, 34f54 <tls_attach+0xcc>
   34f18:	4630      	mov	r0, r6
   34f1a:	f00b fab6 	bl	4048a <sock_is_secured>
   34f1e:	69b3      	ldr	r3, [r6, #24]
   34f20:	b9b0      	cbnz	r0, 34f50 <tls_attach+0xc8>
   34f22:	b153      	cbz	r3, 34f3a <tls_attach+0xb2>
   34f24:	4618      	mov	r0, r3
   34f26:	e7d5      	b.n	34ed4 <tls_attach+0x4c>
   34f28:	7025      	strb	r5, [r4, #0]
   34f2a:	7065      	strb	r5, [r4, #1]
   34f2c:	70a5      	strb	r5, [r4, #2]
   34f2e:	70e5      	strb	r5, [r4, #3]
   34f30:	7125      	strb	r5, [r4, #4]
   34f32:	7165      	strb	r5, [r4, #5]
   34f34:	71a5      	strb	r5, [r4, #6]
   34f36:	71e5      	strb	r5, [r4, #7]
   34f38:	e7e4      	b.n	34f04 <tls_attach+0x7c>
   34f3a:	a901      	add	r1, sp, #4
   34f3c:	f7f0 fc7a 	bl	25834 <nrf_modem_os_timedwait>
   34f40:	2800      	cmp	r0, #0
   34f42:	d0e9      	beq.n	34f18 <tls_attach+0x90>
   34f44:	f110 0f0b 	cmn.w	r0, #11
   34f48:	bf0c      	ite	eq
   34f4a:	2074      	moveq	r0, #116	; 0x74
   34f4c:	206e      	movne	r0, #110	; 0x6e
   34f4e:	e7c1      	b.n	34ed4 <tls_attach+0x4c>
   34f50:	2b00      	cmp	r3, #0
   34f52:	d1e7      	bne.n	34f24 <tls_attach+0x9c>
   34f54:	4638      	mov	r0, r7
   34f56:	b002      	add	sp, #8
   34f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34f5c:	2001a4bc 	.word	0x2001a4bc

00034f60 <nrf_so_to_rpc_so>:
   34f60:	3802      	subs	r0, #2
   34f62:	2835      	cmp	r0, #53	; 0x35
   34f64:	bf9a      	itte	ls
   34f66:	4b03      	ldrls	r3, [pc, #12]	; (34f74 <nrf_so_to_rpc_so+0x14>)
   34f68:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   34f6c:	f04f 30ff 	movhi.w	r0, #4294967295
   34f70:	4770      	bx	lr
   34f72:	bf00      	nop
   34f74:	00043308 	.word	0x00043308

00034f78 <rpc_error_to_nrf_errno>:
   34f78:	286c      	cmp	r0, #108	; 0x6c
   34f7a:	bf9a      	itte	ls
   34f7c:	4b02      	ldrls	r3, [pc, #8]	; (34f88 <rpc_error_to_nrf_errno+0x10>)
   34f7e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   34f82:	4802      	ldrhi	r0, [pc, #8]	; (34f8c <rpc_error_to_nrf_errno+0x14>)
   34f84:	4770      	bx	lr
   34f86:	bf00      	nop
   34f88:	000433e0 	.word	0x000433e0
   34f8c:	baadbaad 	.word	0xbaadbaad

00034f90 <req_forward>:
   34f90:	b573      	push	{r0, r1, r4, r5, r6, lr}
   34f92:	4616      	mov	r6, r2
   34f94:	b9aa      	cbnz	r2, 34fc2 <req_forward+0x32>
   34f96:	ad01      	add	r5, sp, #4
   34f98:	2300      	movs	r3, #0
   34f9a:	460a      	mov	r2, r1
   34f9c:	602b      	str	r3, [r5, #0]
   34f9e:	60cd      	str	r5, [r1, #12]
   34fa0:	b281      	uxth	r1, r0
   34fa2:	2004      	movs	r0, #4
   34fa4:	f00b f909 	bl	401ba <rpc_client_request_send>
   34fa8:	4c0c      	ldr	r4, [pc, #48]	; (34fdc <req_forward+0x4c>)
   34faa:	6828      	ldr	r0, [r5, #0]
   34fac:	b158      	cbz	r0, 34fc6 <req_forward+0x36>
   34fae:	6940      	ldr	r0, [r0, #20]
   34fb0:	f7ff ffe2 	bl	34f78 <rpc_error_to_nrf_errno>
   34fb4:	4604      	mov	r4, r0
   34fb6:	b106      	cbz	r6, 34fba <req_forward+0x2a>
   34fb8:	b168      	cbz	r0, 34fd6 <req_forward+0x46>
   34fba:	6828      	ldr	r0, [r5, #0]
   34fbc:	f00b f904 	bl	401c8 <rpc_client_message_free>
   34fc0:	e009      	b.n	34fd6 <req_forward+0x46>
   34fc2:	4615      	mov	r5, r2
   34fc4:	e7e8      	b.n	34f98 <req_forward+0x8>
   34fc6:	4621      	mov	r1, r4
   34fc8:	f7f0 fc34 	bl	25834 <nrf_modem_os_timedwait>
   34fcc:	2800      	cmp	r0, #0
   34fce:	d0ec      	beq.n	34faa <req_forward+0x1a>
   34fd0:	f00c fad1 	bl	41576 <abs>
   34fd4:	4604      	mov	r4, r0
   34fd6:	4620      	mov	r0, r4
   34fd8:	b002      	add	sp, #8
   34fda:	bd70      	pop	{r4, r5, r6, pc}
   34fdc:	20014a60 	.word	0x20014a60

00034fe0 <at_cmd_send>:
   34fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34fe2:	4614      	mov	r4, r2
   34fe4:	f06f 0258 	mvn.w	r2, #88	; 0x58
   34fe8:	2300      	movs	r3, #0
   34fea:	7302      	strb	r2, [r0, #12]
   34fec:	2204      	movs	r2, #4
   34fee:	4d0f      	ldr	r5, [pc, #60]	; (3502c <at_cmd_send+0x4c>)
   34ff0:	7343      	strb	r3, [r0, #13]
   34ff2:	7383      	strb	r3, [r0, #14]
   34ff4:	73c3      	strb	r3, [r0, #15]
   34ff6:	7202      	strb	r2, [r0, #8]
   34ff8:	7243      	strb	r3, [r0, #9]
   34ffa:	7283      	strb	r3, [r0, #10]
   34ffc:	72c3      	strb	r3, [r0, #11]
   34ffe:	4602      	mov	r2, r0
   35000:	b289      	uxth	r1, r1
   35002:	2003      	movs	r0, #3
   35004:	702b      	strb	r3, [r5, #0]
   35006:	f00b f8d8 	bl	401ba <rpc_client_request_send>
   3500a:	f04f 33ff 	mov.w	r3, #4294967295
   3500e:	9301      	str	r3, [sp, #4]
   35010:	782b      	ldrb	r3, [r5, #0]
   35012:	42a3      	cmp	r3, r4
   35014:	d101      	bne.n	3501a <at_cmd_send+0x3a>
   35016:	2000      	movs	r0, #0
   35018:	e005      	b.n	35026 <at_cmd_send+0x46>
   3501a:	2000      	movs	r0, #0
   3501c:	a901      	add	r1, sp, #4
   3501e:	f7f0 fc09 	bl	25834 <nrf_modem_os_timedwait>
   35022:	2800      	cmp	r0, #0
   35024:	d0f4      	beq.n	35010 <at_cmd_send+0x30>
   35026:	b003      	add	sp, #12
   35028:	bd30      	pop	{r4, r5, pc}
   3502a:	bf00      	nop
   3502c:	2001d3c1 	.word	0x2001d3c1

00035030 <at_response_match>:
   35030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35032:	4605      	mov	r5, r0
   35034:	2400      	movs	r4, #0
   35036:	4f10      	ldr	r7, [pc, #64]	; (35078 <at_response_match+0x48>)
   35038:	f857 6b04 	ldr.w	r6, [r7], #4
   3503c:	4628      	mov	r0, r5
   3503e:	4631      	mov	r1, r6
   35040:	f00c fcf9 	bl	41a36 <strstr>
   35044:	b928      	cbnz	r0, 35052 <at_response_match+0x22>
   35046:	3401      	adds	r4, #1
   35048:	2c04      	cmp	r4, #4
   3504a:	d1f5      	bne.n	35038 <at_response_match+0x8>
   3504c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   35050:	e00e      	b.n	35070 <at_response_match+0x40>
   35052:	2c01      	cmp	r4, #1
   35054:	d0fa      	beq.n	3504c <at_response_match+0x1c>
   35056:	1ea3      	subs	r3, r4, #2
   35058:	2b01      	cmp	r3, #1
   3505a:	d80a      	bhi.n	35072 <at_response_match+0x42>
   3505c:	4630      	mov	r0, r6
   3505e:	f7e8 f8f0 	bl	1d242 <strlen>
   35062:	220a      	movs	r2, #10
   35064:	2100      	movs	r1, #0
   35066:	4428      	add	r0, r5
   35068:	f005 fc96 	bl	3a998 <strtol>
   3506c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   35070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35072:	2000      	movs	r0, #0
   35074:	e7fc      	b.n	35070 <at_response_match+0x40>
   35076:	bf00      	nop
   35078:	00043594 	.word	0x00043594

0003507c <at_vprintf>:
   3507c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   35080:	4607      	mov	r7, r0
   35082:	460e      	mov	r6, r1
   35084:	481e      	ldr	r0, [pc, #120]	; (35100 <at_vprintf+0x84>)
   35086:	2100      	movs	r1, #0
   35088:	4690      	mov	r8, r2
   3508a:	461d      	mov	r5, r3
   3508c:	9301      	str	r3, [sp, #4]
   3508e:	f005 fda9 	bl	3abe4 <vsniprintf>
   35092:	3001      	adds	r0, #1
   35094:	f00b f88b 	bl	401ae <rpc_client_request_alloc>
   35098:	4604      	mov	r4, r0
   3509a:	b368      	cbz	r0, 350f8 <at_vprintf+0x7c>
   3509c:	9501      	str	r5, [sp, #4]
   3509e:	6841      	ldr	r1, [r0, #4]
   350a0:	462b      	mov	r3, r5
   350a2:	4642      	mov	r2, r8
   350a4:	6800      	ldr	r0, [r0, #0]
   350a6:	f005 fd9d 	bl	3abe4 <vsniprintf>
   350aa:	4620      	mov	r0, r4
   350ac:	2202      	movs	r2, #2
   350ae:	2101      	movs	r1, #1
   350b0:	f7ff ff96 	bl	34fe0 <at_cmd_send>
   350b4:	4604      	mov	r4, r0
   350b6:	b970      	cbnz	r0, 350d6 <at_vprintf+0x5a>
   350b8:	4d12      	ldr	r5, [pc, #72]	; (35104 <at_vprintf+0x88>)
   350ba:	682c      	ldr	r4, [r5, #0]
   350bc:	6821      	ldr	r1, [r4, #0]
   350be:	b977      	cbnz	r7, 350de <at_vprintf+0x62>
   350c0:	6820      	ldr	r0, [r4, #0]
   350c2:	f7ff ffb5 	bl	35030 <at_response_match>
   350c6:	4604      	mov	r4, r0
   350c8:	682b      	ldr	r3, [r5, #0]
   350ca:	6818      	ldr	r0, [r3, #0]
   350cc:	f00b f87f 	bl	401ce <rpc_client_data_free>
   350d0:	6828      	ldr	r0, [r5, #0]
   350d2:	f00b f879 	bl	401c8 <rpc_client_message_free>
   350d6:	4620      	mov	r0, r4
   350d8:	b002      	add	sp, #8
   350da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   350de:	6862      	ldr	r2, [r4, #4]
   350e0:	4638      	mov	r0, r7
   350e2:	42b2      	cmp	r2, r6
   350e4:	bf28      	it	cs
   350e6:	4632      	movcs	r2, r6
   350e8:	f00c fa6b 	bl	415c2 <memcpy>
   350ec:	6863      	ldr	r3, [r4, #4]
   350ee:	42b3      	cmp	r3, r6
   350f0:	d9e6      	bls.n	350c0 <at_vprintf+0x44>
   350f2:	f06f 0406 	mvn.w	r4, #6
   350f6:	e7e7      	b.n	350c8 <at_vprintf+0x4c>
   350f8:	f06f 040b 	mvn.w	r4, #11
   350fc:	e7eb      	b.n	350d6 <at_vprintf+0x5a>
   350fe:	bf00      	nop
   35100:	00042a34 	.word	0x00042a34
   35104:	2001a4d0 	.word	0x2001a4d0

00035108 <nrf_modem_at_init>:
   35108:	2201      	movs	r2, #1
   3510a:	b508      	push	{r3, lr}
   3510c:	4611      	mov	r1, r2
   3510e:	4808      	ldr	r0, [pc, #32]	; (35130 <nrf_modem_at_init+0x28>)
   35110:	f7f0 fc66 	bl	259e0 <nrf_modem_os_sem_init>
   35114:	2000      	movs	r0, #0
   35116:	f00b f84a 	bl	401ae <rpc_client_request_alloc>
   3511a:	b128      	cbz	r0, 35128 <nrf_modem_at_init+0x20>
   3511c:	2201      	movs	r2, #1
   3511e:	2105      	movs	r1, #5
   35120:	f7ff ff5e 	bl	34fe0 <at_cmd_send>
   35124:	2000      	movs	r0, #0
   35126:	bd08      	pop	{r3, pc}
   35128:	f06f 000b 	mvn.w	r0, #11
   3512c:	e7fb      	b.n	35126 <nrf_modem_at_init+0x1e>
   3512e:	bf00      	nop
   35130:	2001a4c0 	.word	0x2001a4c0

00035134 <nrf_modem_at_notif_handler_set>:
   35134:	4b01      	ldr	r3, [pc, #4]	; (3513c <nrf_modem_at_notif_handler_set+0x8>)
   35136:	6018      	str	r0, [r3, #0]
   35138:	2000      	movs	r0, #0
   3513a:	4770      	bx	lr
   3513c:	2001a4cc 	.word	0x2001a4cc

00035140 <nrf_modem_at_printf>:
   35140:	b40f      	push	{r0, r1, r2, r3}
   35142:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35144:	9c06      	ldr	r4, [sp, #24]
   35146:	f000 ff1d 	bl	35f84 <nrf_modem_state_is_initialized>
   3514a:	b1b8      	cbz	r0, 3517c <nrf_modem_at_printf+0x3c>
   3514c:	b1cc      	cbz	r4, 35182 <nrf_modem_at_printf+0x42>
   3514e:	4d0e      	ldr	r5, [pc, #56]	; (35188 <nrf_modem_at_printf+0x48>)
   35150:	f04f 31ff 	mov.w	r1, #4294967295
   35154:	6828      	ldr	r0, [r5, #0]
   35156:	f7f0 fc9b 	bl	25a90 <nrf_modem_os_sem_take>
   3515a:	2100      	movs	r1, #0
   3515c:	4622      	mov	r2, r4
   3515e:	ab07      	add	r3, sp, #28
   35160:	4608      	mov	r0, r1
   35162:	9301      	str	r3, [sp, #4]
   35164:	f7ff ff8a 	bl	3507c <at_vprintf>
   35168:	4604      	mov	r4, r0
   3516a:	6828      	ldr	r0, [r5, #0]
   3516c:	f7f0 fc70 	bl	25a50 <nrf_modem_os_sem_give>
   35170:	4620      	mov	r0, r4
   35172:	b003      	add	sp, #12
   35174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   35178:	b004      	add	sp, #16
   3517a:	4770      	bx	lr
   3517c:	f04f 34ff 	mov.w	r4, #4294967295
   35180:	e7f6      	b.n	35170 <nrf_modem_at_printf+0x30>
   35182:	f06f 040d 	mvn.w	r4, #13
   35186:	e7f3      	b.n	35170 <nrf_modem_at_printf+0x30>
   35188:	2001a4c0 	.word	0x2001a4c0

0003518c <nrf_modem_at_cmd>:
   3518c:	b40c      	push	{r2, r3}
   3518e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   35192:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   35194:	4605      	mov	r5, r0
   35196:	460e      	mov	r6, r1
   35198:	f000 fef4 	bl	35f84 <nrf_modem_state_is_initialized>
   3519c:	2800      	cmp	r0, #0
   3519e:	d051      	beq.n	35244 <nrf_modem_at_cmd+0xb8>
   351a0:	2d00      	cmp	r5, #0
   351a2:	d052      	beq.n	3524a <nrf_modem_at_cmd+0xbe>
   351a4:	2f00      	cmp	r7, #0
   351a6:	d050      	beq.n	3524a <nrf_modem_at_cmd+0xbe>
   351a8:	2e00      	cmp	r6, #0
   351aa:	d051      	beq.n	35250 <nrf_modem_at_cmd+0xc4>
   351ac:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 35258 <nrf_modem_at_cmd+0xcc>
   351b0:	f8d9 3000 	ldr.w	r3, [r9]
   351b4:	b1fb      	cbz	r3, 351f6 <nrf_modem_at_cmd+0x6a>
   351b6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 3525c <nrf_modem_at_cmd+0xd0>
   351ba:	f8d8 3000 	ldr.w	r3, [r8]
   351be:	b1d3      	cbz	r3, 351f6 <nrf_modem_at_cmd+0x6a>
   351c0:	2400      	movs	r4, #0
   351c2:	f8d9 3000 	ldr.w	r3, [r9]
   351c6:	429c      	cmp	r4, r3
   351c8:	d215      	bcs.n	351f6 <nrf_modem_at_cmd+0x6a>
   351ca:	f8d8 3000 	ldr.w	r3, [r8]
   351ce:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
   351d2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   351d6:	f7e8 f834 	bl	1d242 <strlen>
   351da:	f8d8 3000 	ldr.w	r3, [r8]
   351de:	4602      	mov	r2, r0
   351e0:	4639      	mov	r1, r7
   351e2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   351e6:	f00c fbdf 	bl	419a8 <strncmp>
   351ea:	b9c8      	cbnz	r0, 35220 <nrf_modem_at_cmd+0x94>
   351ec:	f8d8 3000 	ldr.w	r3, [r8]
   351f0:	4453      	add	r3, sl
   351f2:	685b      	ldr	r3, [r3, #4]
   351f4:	b9b3      	cbnz	r3, 35224 <nrf_modem_at_cmd+0x98>
   351f6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 35260 <nrf_modem_at_cmd+0xd4>
   351fa:	f04f 31ff 	mov.w	r1, #4294967295
   351fe:	f8d8 0000 	ldr.w	r0, [r8]
   35202:	f7f0 fc45 	bl	25a90 <nrf_modem_os_sem_take>
   35206:	ab0b      	add	r3, sp, #44	; 0x2c
   35208:	463a      	mov	r2, r7
   3520a:	4631      	mov	r1, r6
   3520c:	4628      	mov	r0, r5
   3520e:	9301      	str	r3, [sp, #4]
   35210:	f7ff ff34 	bl	3507c <at_vprintf>
   35214:	4604      	mov	r4, r0
   35216:	f8d8 0000 	ldr.w	r0, [r8]
   3521a:	f7f0 fc19 	bl	25a50 <nrf_modem_os_sem_give>
   3521e:	e00b      	b.n	35238 <nrf_modem_at_cmd+0xac>
   35220:	3401      	adds	r4, #1
   35222:	e7ce      	b.n	351c2 <nrf_modem_at_cmd+0x36>
   35224:	463a      	mov	r2, r7
   35226:	4631      	mov	r1, r6
   35228:	4628      	mov	r0, r5
   3522a:	4798      	blx	r3
   3522c:	1e04      	subs	r4, r0, #0
   3522e:	db03      	blt.n	35238 <nrf_modem_at_cmd+0xac>
   35230:	4628      	mov	r0, r5
   35232:	f7ff fefd 	bl	35030 <at_response_match>
   35236:	4604      	mov	r4, r0
   35238:	4620      	mov	r0, r4
   3523a:	b002      	add	sp, #8
   3523c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35240:	b002      	add	sp, #8
   35242:	4770      	bx	lr
   35244:	f04f 34ff 	mov.w	r4, #4294967295
   35248:	e7f6      	b.n	35238 <nrf_modem_at_cmd+0xac>
   3524a:	f06f 040d 	mvn.w	r4, #13
   3524e:	e7f3      	b.n	35238 <nrf_modem_at_cmd+0xac>
   35250:	f06f 0415 	mvn.w	r4, #21
   35254:	e7f0      	b.n	35238 <nrf_modem_at_cmd+0xac>
   35256:	bf00      	nop
   35258:	2001a4c8 	.word	0x2001a4c8
   3525c:	2001a4c4 	.word	0x2001a4c4
   35260:	2001a4c0 	.word	0x2001a4c0

00035264 <nrf_modem_at_scanf>:
   35264:	b40e      	push	{r1, r2, r3}
   35266:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   35268:	9f07      	ldr	r7, [sp, #28]
   3526a:	4605      	mov	r5, r0
   3526c:	f000 fe8a 	bl	35f84 <nrf_modem_state_is_initialized>
   35270:	2800      	cmp	r0, #0
   35272:	d03b      	beq.n	352ec <nrf_modem_at_scanf+0x88>
   35274:	2d00      	cmp	r5, #0
   35276:	d03c      	beq.n	352f2 <nrf_modem_at_scanf+0x8e>
   35278:	2f00      	cmp	r7, #0
   3527a:	d03a      	beq.n	352f2 <nrf_modem_at_scanf+0x8e>
   3527c:	4e1e      	ldr	r6, [pc, #120]	; (352f8 <nrf_modem_at_scanf+0x94>)
   3527e:	f04f 31ff 	mov.w	r1, #4294967295
   35282:	6830      	ldr	r0, [r6, #0]
   35284:	f7f0 fc04 	bl	25a90 <nrf_modem_os_sem_take>
   35288:	4628      	mov	r0, r5
   3528a:	f7e7 ffda 	bl	1d242 <strlen>
   3528e:	3001      	adds	r0, #1
   35290:	f00a ff8d 	bl	401ae <rpc_client_request_alloc>
   35294:	4604      	mov	r4, r0
   35296:	b330      	cbz	r0, 352e6 <nrf_modem_at_scanf+0x82>
   35298:	4629      	mov	r1, r5
   3529a:	6800      	ldr	r0, [r0, #0]
   3529c:	f00c fb7c 	bl	41998 <strcpy>
   352a0:	4620      	mov	r0, r4
   352a2:	2202      	movs	r2, #2
   352a4:	2101      	movs	r1, #1
   352a6:	f7ff fe9b 	bl	34fe0 <at_cmd_send>
   352aa:	4604      	mov	r4, r0
   352ac:	b990      	cbnz	r0, 352d4 <nrf_modem_at_scanf+0x70>
   352ae:	4d13      	ldr	r5, [pc, #76]	; (352fc <nrf_modem_at_scanf+0x98>)
   352b0:	aa08      	add	r2, sp, #32
   352b2:	682b      	ldr	r3, [r5, #0]
   352b4:	4639      	mov	r1, r7
   352b6:	6818      	ldr	r0, [r3, #0]
   352b8:	9201      	str	r2, [sp, #4]
   352ba:	f005 fce5 	bl	3ac88 <vsiscanf>
   352be:	682b      	ldr	r3, [r5, #0]
   352c0:	1e04      	subs	r4, r0, #0
   352c2:	6818      	ldr	r0, [r3, #0]
   352c4:	bf08      	it	eq
   352c6:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   352ca:	f00a ff80 	bl	401ce <rpc_client_data_free>
   352ce:	6828      	ldr	r0, [r5, #0]
   352d0:	f00a ff7a 	bl	401c8 <rpc_client_message_free>
   352d4:	6830      	ldr	r0, [r6, #0]
   352d6:	f7f0 fbbb 	bl	25a50 <nrf_modem_os_sem_give>
   352da:	4620      	mov	r0, r4
   352dc:	b002      	add	sp, #8
   352de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   352e2:	b003      	add	sp, #12
   352e4:	4770      	bx	lr
   352e6:	f06f 040b 	mvn.w	r4, #11
   352ea:	e7f3      	b.n	352d4 <nrf_modem_at_scanf+0x70>
   352ec:	f04f 34ff 	mov.w	r4, #4294967295
   352f0:	e7f3      	b.n	352da <nrf_modem_at_scanf+0x76>
   352f2:	f06f 040d 	mvn.w	r4, #13
   352f6:	e7f0      	b.n	352da <nrf_modem_at_scanf+0x76>
   352f8:	2001a4c0 	.word	0x2001a4c0
   352fc:	2001a4d0 	.word	0x2001a4d0

00035300 <rpc_at_event_handler>:
   35300:	b570      	push	{r4, r5, r6, lr}
   35302:	68c3      	ldr	r3, [r0, #12]
   35304:	4605      	mov	r5, r0
   35306:	2ba7      	cmp	r3, #167	; 0xa7
   35308:	d003      	beq.n	35312 <rpc_at_event_handler+0x12>
   3530a:	6828      	ldr	r0, [r5, #0]
   3530c:	f00a ff5f 	bl	401ce <rpc_client_data_free>
   35310:	e008      	b.n	35324 <rpc_at_event_handler+0x24>
   35312:	2903      	cmp	r1, #3
   35314:	d008      	beq.n	35328 <rpc_at_event_handler+0x28>
   35316:	2904      	cmp	r1, #4
   35318:	d019      	beq.n	3534e <rpc_at_event_handler+0x4e>
   3531a:	2902      	cmp	r1, #2
   3531c:	d102      	bne.n	35324 <rpc_at_event_handler+0x24>
   3531e:	2201      	movs	r2, #1
   35320:	4b0e      	ldr	r3, [pc, #56]	; (3535c <rpc_at_event_handler+0x5c>)
   35322:	701a      	strb	r2, [r3, #0]
   35324:	2000      	movs	r0, #0
   35326:	e00a      	b.n	3533e <rpc_at_event_handler+0x3e>
   35328:	4e0d      	ldr	r6, [pc, #52]	; (35360 <rpc_at_event_handler+0x60>)
   3532a:	6833      	ldr	r3, [r6, #0]
   3532c:	b143      	cbz	r3, 35340 <rpc_at_event_handler+0x40>
   3532e:	2400      	movs	r4, #0
   35330:	6800      	ldr	r0, [r0, #0]
   35332:	4798      	blx	r3
   35334:	6828      	ldr	r0, [r5, #0]
   35336:	6034      	str	r4, [r6, #0]
   35338:	f00a ff49 	bl	401ce <rpc_client_data_free>
   3533c:	b2e0      	uxtb	r0, r4
   3533e:	bd70      	pop	{r4, r5, r6, pc}
   35340:	2202      	movs	r2, #2
   35342:	4b08      	ldr	r3, [pc, #32]	; (35364 <rpc_at_event_handler+0x64>)
   35344:	2401      	movs	r4, #1
   35346:	6018      	str	r0, [r3, #0]
   35348:	4b04      	ldr	r3, [pc, #16]	; (3535c <rpc_at_event_handler+0x5c>)
   3534a:	701a      	strb	r2, [r3, #0]
   3534c:	e7f6      	b.n	3533c <rpc_at_event_handler+0x3c>
   3534e:	4b06      	ldr	r3, [pc, #24]	; (35368 <rpc_at_event_handler+0x68>)
   35350:	681b      	ldr	r3, [r3, #0]
   35352:	2b00      	cmp	r3, #0
   35354:	d0d9      	beq.n	3530a <rpc_at_event_handler+0xa>
   35356:	6800      	ldr	r0, [r0, #0]
   35358:	4798      	blx	r3
   3535a:	e7d6      	b.n	3530a <rpc_at_event_handler+0xa>
   3535c:	2001d3c1 	.word	0x2001d3c1
   35360:	2001a4d4 	.word	0x2001a4d4
   35364:	2001a4d0 	.word	0x2001a4d0
   35368:	2001a4cc 	.word	0x2001a4cc

0003536c <mfu_client_send>:
   3536c:	f04f 33ff 	mov.w	r3, #4294967295
   35370:	b513      	push	{r0, r1, r4, lr}
   35372:	9301      	str	r3, [sp, #4]
   35374:	231a      	movs	r3, #26
   35376:	7303      	strb	r3, [r0, #12]
   35378:	f06f 031e 	mvn.w	r3, #30
   3537c:	7343      	strb	r3, [r0, #13]
   3537e:	f06f 0354 	mvn.w	r3, #84	; 0x54
   35382:	7383      	strb	r3, [r0, #14]
   35384:	2315      	movs	r3, #21
   35386:	2903      	cmp	r1, #3
   35388:	73c3      	strb	r3, [r0, #15]
   3538a:	bf14      	ite	ne
   3538c:	2304      	movne	r3, #4
   3538e:	2308      	moveq	r3, #8
   35390:	6083      	str	r3, [r0, #8]
   35392:	2300      	movs	r3, #0
   35394:	4c0a      	ldr	r4, [pc, #40]	; (353c0 <mfu_client_send+0x54>)
   35396:	4602      	mov	r2, r0
   35398:	2006      	movs	r0, #6
   3539a:	7023      	strb	r3, [r4, #0]
   3539c:	f00a ff0d 	bl	401ba <rpc_client_request_send>
   353a0:	7823      	ldrb	r3, [r4, #0]
   353a2:	2b01      	cmp	r3, #1
   353a4:	d104      	bne.n	353b0 <mfu_client_send+0x44>
   353a6:	4b07      	ldr	r3, [pc, #28]	; (353c4 <mfu_client_send+0x58>)
   353a8:	681b      	ldr	r3, [r3, #0]
   353aa:	6918      	ldr	r0, [r3, #16]
   353ac:	4240      	negs	r0, r0
   353ae:	e005      	b.n	353bc <mfu_client_send+0x50>
   353b0:	2000      	movs	r0, #0
   353b2:	a901      	add	r1, sp, #4
   353b4:	f7f0 fa3e 	bl	25834 <nrf_modem_os_timedwait>
   353b8:	2800      	cmp	r0, #0
   353ba:	d0f1      	beq.n	353a0 <mfu_client_send+0x34>
   353bc:	b002      	add	sp, #8
   353be:	bd10      	pop	{r4, pc}
   353c0:	2001d3c2 	.word	0x2001d3c2
   353c4:	2001a4d8 	.word	0x2001a4d8

000353c8 <nrf_modem_delta_dfu_offset>:
   353c8:	b538      	push	{r3, r4, r5, lr}
   353ca:	4605      	mov	r5, r0
   353cc:	f000 fdda 	bl	35f84 <nrf_modem_state_is_initialized>
   353d0:	b190      	cbz	r0, 353f8 <nrf_modem_delta_dfu_offset+0x30>
   353d2:	b1a5      	cbz	r5, 353fe <nrf_modem_delta_dfu_offset+0x36>
   353d4:	2000      	movs	r0, #0
   353d6:	f00a feea 	bl	401ae <rpc_client_request_alloc>
   353da:	b198      	cbz	r0, 35404 <nrf_modem_delta_dfu_offset+0x3c>
   353dc:	2109      	movs	r1, #9
   353de:	f7ff ffc5 	bl	3536c <mfu_client_send>
   353e2:	4b0a      	ldr	r3, [pc, #40]	; (3540c <nrf_modem_delta_dfu_offset+0x44>)
   353e4:	4604      	mov	r4, r0
   353e6:	b910      	cbnz	r0, 353ee <nrf_modem_delta_dfu_offset+0x26>
   353e8:	681a      	ldr	r2, [r3, #0]
   353ea:	6952      	ldr	r2, [r2, #20]
   353ec:	602a      	str	r2, [r5, #0]
   353ee:	6818      	ldr	r0, [r3, #0]
   353f0:	f00a feea 	bl	401c8 <rpc_client_message_free>
   353f4:	4620      	mov	r0, r4
   353f6:	bd38      	pop	{r3, r4, r5, pc}
   353f8:	f04f 34ff 	mov.w	r4, #4294967295
   353fc:	e7fa      	b.n	353f4 <nrf_modem_delta_dfu_offset+0x2c>
   353fe:	f06f 040d 	mvn.w	r4, #13
   35402:	e7f7      	b.n	353f4 <nrf_modem_delta_dfu_offset+0x2c>
   35404:	f06f 040b 	mvn.w	r4, #11
   35408:	e7f4      	b.n	353f4 <nrf_modem_delta_dfu_offset+0x2c>
   3540a:	bf00      	nop
   3540c:	2001a4d8 	.word	0x2001a4d8

00035410 <nrf_modem_delta_dfu_area>:
   35410:	b538      	push	{r3, r4, r5, lr}
   35412:	4605      	mov	r5, r0
   35414:	f000 fdb6 	bl	35f84 <nrf_modem_state_is_initialized>
   35418:	b190      	cbz	r0, 35440 <nrf_modem_delta_dfu_area+0x30>
   3541a:	b1a5      	cbz	r5, 35446 <nrf_modem_delta_dfu_area+0x36>
   3541c:	2000      	movs	r0, #0
   3541e:	f00a fec6 	bl	401ae <rpc_client_request_alloc>
   35422:	b198      	cbz	r0, 3544c <nrf_modem_delta_dfu_area+0x3c>
   35424:	2102      	movs	r1, #2
   35426:	f7ff ffa1 	bl	3536c <mfu_client_send>
   3542a:	4b0a      	ldr	r3, [pc, #40]	; (35454 <nrf_modem_delta_dfu_area+0x44>)
   3542c:	4604      	mov	r4, r0
   3542e:	b910      	cbnz	r0, 35436 <nrf_modem_delta_dfu_area+0x26>
   35430:	681a      	ldr	r2, [r3, #0]
   35432:	6952      	ldr	r2, [r2, #20]
   35434:	602a      	str	r2, [r5, #0]
   35436:	6818      	ldr	r0, [r3, #0]
   35438:	f00a fec6 	bl	401c8 <rpc_client_message_free>
   3543c:	4620      	mov	r0, r4
   3543e:	bd38      	pop	{r3, r4, r5, pc}
   35440:	f04f 34ff 	mov.w	r4, #4294967295
   35444:	e7fa      	b.n	3543c <nrf_modem_delta_dfu_area+0x2c>
   35446:	f06f 040d 	mvn.w	r4, #13
   3544a:	e7f7      	b.n	3543c <nrf_modem_delta_dfu_area+0x2c>
   3544c:	f06f 040b 	mvn.w	r4, #11
   35450:	e7f4      	b.n	3543c <nrf_modem_delta_dfu_area+0x2c>
   35452:	bf00      	nop
   35454:	2001a4d8 	.word	0x2001a4d8

00035458 <nrf_modem_delta_dfu_uuid>:
   35458:	b538      	push	{r3, r4, r5, lr}
   3545a:	4605      	mov	r5, r0
   3545c:	f000 fd92 	bl	35f84 <nrf_modem_state_is_initialized>
   35460:	b1c8      	cbz	r0, 35496 <nrf_modem_delta_dfu_uuid+0x3e>
   35462:	b1dd      	cbz	r5, 3549c <nrf_modem_delta_dfu_uuid+0x44>
   35464:	2000      	movs	r0, #0
   35466:	f00a fea2 	bl	401ae <rpc_client_request_alloc>
   3546a:	b1d0      	cbz	r0, 354a2 <nrf_modem_delta_dfu_uuid+0x4a>
   3546c:	2101      	movs	r1, #1
   3546e:	f7ff ff7d 	bl	3536c <mfu_client_send>
   35472:	490d      	ldr	r1, [pc, #52]	; (354a8 <nrf_modem_delta_dfu_uuid+0x50>)
   35474:	4604      	mov	r4, r0
   35476:	b948      	cbnz	r0, 3548c <nrf_modem_delta_dfu_uuid+0x34>
   35478:	680b      	ldr	r3, [r1, #0]
   3547a:	f103 0214 	add.w	r2, r3, #20
   3547e:	3338      	adds	r3, #56	; 0x38
   35480:	f852 0b04 	ldr.w	r0, [r2], #4
   35484:	429a      	cmp	r2, r3
   35486:	f845 0b04 	str.w	r0, [r5], #4
   3548a:	d1f9      	bne.n	35480 <nrf_modem_delta_dfu_uuid+0x28>
   3548c:	6808      	ldr	r0, [r1, #0]
   3548e:	f00a fe9b 	bl	401c8 <rpc_client_message_free>
   35492:	4620      	mov	r0, r4
   35494:	bd38      	pop	{r3, r4, r5, pc}
   35496:	f04f 34ff 	mov.w	r4, #4294967295
   3549a:	e7fa      	b.n	35492 <nrf_modem_delta_dfu_uuid+0x3a>
   3549c:	f06f 040d 	mvn.w	r4, #13
   354a0:	e7f7      	b.n	35492 <nrf_modem_delta_dfu_uuid+0x3a>
   354a2:	f06f 040b 	mvn.w	r4, #11
   354a6:	e7f4      	b.n	35492 <nrf_modem_delta_dfu_uuid+0x3a>
   354a8:	2001a4d8 	.word	0x2001a4d8

000354ac <nrf_modem_delta_dfu_write_init>:
   354ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   354ae:	f000 fd69 	bl	35f84 <nrf_modem_state_is_initialized>
   354b2:	b1d0      	cbz	r0, 354ea <nrf_modem_delta_dfu_write_init+0x3e>
   354b4:	4d11      	ldr	r5, [pc, #68]	; (354fc <nrf_modem_delta_dfu_write_init+0x50>)
   354b6:	782b      	ldrb	r3, [r5, #0]
   354b8:	b9d3      	cbnz	r3, 354f0 <nrf_modem_delta_dfu_write_init+0x44>
   354ba:	a801      	add	r0, sp, #4
   354bc:	f7ff ff84 	bl	353c8 <nrf_modem_delta_dfu_offset>
   354c0:	4604      	mov	r4, r0
   354c2:	b978      	cbnz	r0, 354e4 <nrf_modem_delta_dfu_write_init+0x38>
   354c4:	f00a fe73 	bl	401ae <rpc_client_request_alloc>
   354c8:	b1a8      	cbz	r0, 354f6 <nrf_modem_delta_dfu_write_init+0x4a>
   354ca:	9a01      	ldr	r2, [sp, #4]
   354cc:	2103      	movs	r1, #3
   354ce:	6102      	str	r2, [r0, #16]
   354d0:	f7ff ff4c 	bl	3536c <mfu_client_send>
   354d4:	4604      	mov	r4, r0
   354d6:	4b0a      	ldr	r3, [pc, #40]	; (35500 <nrf_modem_delta_dfu_write_init+0x54>)
   354d8:	6818      	ldr	r0, [r3, #0]
   354da:	f00a fe75 	bl	401c8 <rpc_client_message_free>
   354de:	b90c      	cbnz	r4, 354e4 <nrf_modem_delta_dfu_write_init+0x38>
   354e0:	2301      	movs	r3, #1
   354e2:	702b      	strb	r3, [r5, #0]
   354e4:	4620      	mov	r0, r4
   354e6:	b003      	add	sp, #12
   354e8:	bd30      	pop	{r4, r5, pc}
   354ea:	f04f 34ff 	mov.w	r4, #4294967295
   354ee:	e7f9      	b.n	354e4 <nrf_modem_delta_dfu_write_init+0x38>
   354f0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   354f4:	e7f6      	b.n	354e4 <nrf_modem_delta_dfu_write_init+0x38>
   354f6:	f06f 040b 	mvn.w	r4, #11
   354fa:	e7f3      	b.n	354e4 <nrf_modem_delta_dfu_write_init+0x38>
   354fc:	2001d3c3 	.word	0x2001d3c3
   35500:	2001a4d8 	.word	0x2001a4d8

00035504 <nrf_modem_delta_dfu_write>:
   35504:	b570      	push	{r4, r5, r6, lr}
   35506:	4606      	mov	r6, r0
   35508:	460d      	mov	r5, r1
   3550a:	f000 fd3b 	bl	35f84 <nrf_modem_state_is_initialized>
   3550e:	b1b0      	cbz	r0, 3553e <nrf_modem_delta_dfu_write+0x3a>
   35510:	b1c6      	cbz	r6, 35544 <nrf_modem_delta_dfu_write+0x40>
   35512:	b1d5      	cbz	r5, 3554a <nrf_modem_delta_dfu_write+0x46>
   35514:	4628      	mov	r0, r5
   35516:	f00a fe4a 	bl	401ae <rpc_client_request_alloc>
   3551a:	4604      	mov	r4, r0
   3551c:	b1c0      	cbz	r0, 35550 <nrf_modem_delta_dfu_write+0x4c>
   3551e:	462a      	mov	r2, r5
   35520:	4631      	mov	r1, r6
   35522:	6800      	ldr	r0, [r0, #0]
   35524:	f00c f84d 	bl	415c2 <memcpy>
   35528:	4620      	mov	r0, r4
   3552a:	2104      	movs	r1, #4
   3552c:	f7ff ff1e 	bl	3536c <mfu_client_send>
   35530:	4b09      	ldr	r3, [pc, #36]	; (35558 <nrf_modem_delta_dfu_write+0x54>)
   35532:	4604      	mov	r4, r0
   35534:	6818      	ldr	r0, [r3, #0]
   35536:	f00a fe47 	bl	401c8 <rpc_client_message_free>
   3553a:	4620      	mov	r0, r4
   3553c:	bd70      	pop	{r4, r5, r6, pc}
   3553e:	f04f 34ff 	mov.w	r4, #4294967295
   35542:	e7fa      	b.n	3553a <nrf_modem_delta_dfu_write+0x36>
   35544:	f06f 040d 	mvn.w	r4, #13
   35548:	e7f7      	b.n	3553a <nrf_modem_delta_dfu_write+0x36>
   3554a:	f06f 0415 	mvn.w	r4, #21
   3554e:	e7f4      	b.n	3553a <nrf_modem_delta_dfu_write+0x36>
   35550:	f06f 040b 	mvn.w	r4, #11
   35554:	e7f1      	b.n	3553a <nrf_modem_delta_dfu_write+0x36>
   35556:	bf00      	nop
   35558:	2001a4d8 	.word	0x2001a4d8

0003555c <nrf_modem_delta_dfu_write_done>:
   3555c:	b510      	push	{r4, lr}
   3555e:	f000 fd11 	bl	35f84 <nrf_modem_state_is_initialized>
   35562:	b180      	cbz	r0, 35586 <nrf_modem_delta_dfu_write_done+0x2a>
   35564:	2000      	movs	r0, #0
   35566:	f00a fe22 	bl	401ae <rpc_client_request_alloc>
   3556a:	b178      	cbz	r0, 3558c <nrf_modem_delta_dfu_write_done+0x30>
   3556c:	2106      	movs	r1, #6
   3556e:	f7ff fefd 	bl	3536c <mfu_client_send>
   35572:	4b08      	ldr	r3, [pc, #32]	; (35594 <nrf_modem_delta_dfu_write_done+0x38>)
   35574:	4604      	mov	r4, r0
   35576:	6818      	ldr	r0, [r3, #0]
   35578:	f00a fe26 	bl	401c8 <rpc_client_message_free>
   3557c:	2200      	movs	r2, #0
   3557e:	4b06      	ldr	r3, [pc, #24]	; (35598 <nrf_modem_delta_dfu_write_done+0x3c>)
   35580:	701a      	strb	r2, [r3, #0]
   35582:	4620      	mov	r0, r4
   35584:	bd10      	pop	{r4, pc}
   35586:	f04f 34ff 	mov.w	r4, #4294967295
   3558a:	e7fa      	b.n	35582 <nrf_modem_delta_dfu_write_done+0x26>
   3558c:	f06f 040b 	mvn.w	r4, #11
   35590:	e7f7      	b.n	35582 <nrf_modem_delta_dfu_write_done+0x26>
   35592:	bf00      	nop
   35594:	2001a4d8 	.word	0x2001a4d8
   35598:	2001d3c3 	.word	0x2001d3c3

0003559c <nrf_modem_delta_dfu_update>:
   3559c:	b510      	push	{r4, lr}
   3559e:	f000 fcf1 	bl	35f84 <nrf_modem_state_is_initialized>
   355a2:	b168      	cbz	r0, 355c0 <nrf_modem_delta_dfu_update+0x24>
   355a4:	2000      	movs	r0, #0
   355a6:	f00a fe02 	bl	401ae <rpc_client_request_alloc>
   355aa:	b160      	cbz	r0, 355c6 <nrf_modem_delta_dfu_update+0x2a>
   355ac:	2105      	movs	r1, #5
   355ae:	f7ff fedd 	bl	3536c <mfu_client_send>
   355b2:	4b06      	ldr	r3, [pc, #24]	; (355cc <nrf_modem_delta_dfu_update+0x30>)
   355b4:	4604      	mov	r4, r0
   355b6:	6818      	ldr	r0, [r3, #0]
   355b8:	f00a fe06 	bl	401c8 <rpc_client_message_free>
   355bc:	4620      	mov	r0, r4
   355be:	bd10      	pop	{r4, pc}
   355c0:	f04f 34ff 	mov.w	r4, #4294967295
   355c4:	e7fa      	b.n	355bc <nrf_modem_delta_dfu_update+0x20>
   355c6:	f06f 040b 	mvn.w	r4, #11
   355ca:	e7f7      	b.n	355bc <nrf_modem_delta_dfu_update+0x20>
   355cc:	2001a4d8 	.word	0x2001a4d8

000355d0 <nrf_modem_delta_dfu_erase>:
   355d0:	b510      	push	{r4, lr}
   355d2:	f000 fcd7 	bl	35f84 <nrf_modem_state_is_initialized>
   355d6:	b168      	cbz	r0, 355f4 <nrf_modem_delta_dfu_erase+0x24>
   355d8:	2000      	movs	r0, #0
   355da:	f00a fde8 	bl	401ae <rpc_client_request_alloc>
   355de:	b160      	cbz	r0, 355fa <nrf_modem_delta_dfu_erase+0x2a>
   355e0:	2108      	movs	r1, #8
   355e2:	f7ff fec3 	bl	3536c <mfu_client_send>
   355e6:	4b06      	ldr	r3, [pc, #24]	; (35600 <nrf_modem_delta_dfu_erase+0x30>)
   355e8:	4604      	mov	r4, r0
   355ea:	6818      	ldr	r0, [r3, #0]
   355ec:	f00a fdec 	bl	401c8 <rpc_client_message_free>
   355f0:	4620      	mov	r0, r4
   355f2:	bd10      	pop	{r4, pc}
   355f4:	f04f 34ff 	mov.w	r4, #4294967295
   355f8:	e7fa      	b.n	355f0 <nrf_modem_delta_dfu_erase+0x20>
   355fa:	f06f 040b 	mvn.w	r4, #11
   355fe:	e7f7      	b.n	355f0 <nrf_modem_delta_dfu_erase+0x20>
   35600:	2001a4d8 	.word	0x2001a4d8

00035604 <rpc_dfu_event_handler>:
   35604:	b510      	push	{r4, lr}
   35606:	4604      	mov	r4, r0
   35608:	6800      	ldr	r0, [r0, #0]
   3560a:	b108      	cbz	r0, 35610 <rpc_dfu_event_handler+0xc>
   3560c:	f00a fddf 	bl	401ce <rpc_client_data_free>
   35610:	4b05      	ldr	r3, [pc, #20]	; (35628 <rpc_dfu_event_handler+0x24>)
   35612:	68e2      	ldr	r2, [r4, #12]
   35614:	429a      	cmp	r2, r3
   35616:	bf05      	ittet	eq
   35618:	2001      	moveq	r0, #1
   3561a:	4b04      	ldreq	r3, [pc, #16]	; (3562c <rpc_dfu_event_handler+0x28>)
   3561c:	2000      	movne	r0, #0
   3561e:	7018      	strbeq	r0, [r3, #0]
   35620:	bf04      	itt	eq
   35622:	4b03      	ldreq	r3, [pc, #12]	; (35630 <rpc_dfu_event_handler+0x2c>)
   35624:	601c      	streq	r4, [r3, #0]
   35626:	bd10      	pop	{r4, pc}
   35628:	15abe11a 	.word	0x15abe11a
   3562c:	2001d3c2 	.word	0x2001d3c2
   35630:	2001a4d8 	.word	0x2001a4d8

00035634 <send_message>:
   35634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   35638:	4607      	mov	r7, r0
   3563a:	4688      	mov	r8, r1
   3563c:	4616      	mov	r6, r2
   3563e:	f000 fca1 	bl	35f84 <nrf_modem_state_is_initialized>
   35642:	2800      	cmp	r0, #0
   35644:	d053      	beq.n	356ee <send_message+0xba>
   35646:	4d2b      	ldr	r5, [pc, #172]	; (356f4 <send_message+0xc0>)
   35648:	782b      	ldrb	r3, [r5, #0]
   3564a:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   3564e:	2b00      	cmp	r3, #0
   35650:	d14d      	bne.n	356ee <send_message+0xba>
   35652:	2301      	movs	r3, #1
   35654:	4630      	mov	r0, r6
   35656:	702b      	strb	r3, [r5, #0]
   35658:	f00a fda9 	bl	401ae <rpc_client_request_alloc>
   3565c:	4604      	mov	r4, r0
   3565e:	2800      	cmp	r0, #0
   35660:	d03c      	beq.n	356dc <send_message+0xa8>
   35662:	4a25      	ldr	r2, [pc, #148]	; (356f8 <send_message+0xc4>)
   35664:	4641      	mov	r1, r8
   35666:	8813      	ldrh	r3, [r2, #0]
   35668:	3301      	adds	r3, #1
   3566a:	b29b      	uxth	r3, r3
   3566c:	8013      	strh	r3, [r2, #0]
   3566e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   35672:	f8c8 3000 	str.w	r3, [r8]
   35676:	2343      	movs	r3, #67	; 0x43
   35678:	7303      	strb	r3, [r0, #12]
   3567a:	2354      	movs	r3, #84	; 0x54
   3567c:	7343      	strb	r3, [r0, #13]
   3567e:	2376      	movs	r3, #118	; 0x76
   35680:	7383      	strb	r3, [r0, #14]
   35682:	2349      	movs	r3, #73	; 0x49
   35684:	4632      	mov	r2, r6
   35686:	73c3      	strb	r3, [r0, #15]
   35688:	6046      	str	r6, [r0, #4]
   3568a:	f880 9008 	strb.w	r9, [r0, #8]
   3568e:	f880 9009 	strb.w	r9, [r0, #9]
   35692:	f880 900a 	strb.w	r9, [r0, #10]
   35696:	f880 900b 	strb.w	r9, [r0, #11]
   3569a:	6800      	ldr	r0, [r0, #0]
   3569c:	f00b ff91 	bl	415c2 <memcpy>
   356a0:	4622      	mov	r2, r4
   356a2:	4639      	mov	r1, r7
   356a4:	2007      	movs	r0, #7
   356a6:	f00a fd88 	bl	401ba <rpc_client_request_send>
   356aa:	f04f 33ff 	mov.w	r3, #4294967295
   356ae:	4c13      	ldr	r4, [pc, #76]	; (356fc <send_message+0xc8>)
   356b0:	9301      	str	r3, [sp, #4]
   356b2:	4620      	mov	r0, r4
   356b4:	a901      	add	r1, sp, #4
   356b6:	f7f0 f8bd 	bl	25834 <nrf_modem_os_timedwait>
   356ba:	782b      	ldrb	r3, [r5, #0]
   356bc:	2b01      	cmp	r3, #1
   356be:	d102      	bne.n	356c6 <send_message+0x92>
   356c0:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   356c4:	d1f5      	bne.n	356b2 <send_message+0x7e>
   356c6:	782b      	ldrb	r3, [r5, #0]
   356c8:	2b02      	cmp	r3, #2
   356ca:	d00d      	beq.n	356e8 <send_message+0xb4>
   356cc:	782b      	ldrb	r3, [r5, #0]
   356ce:	2b03      	cmp	r3, #3
   356d0:	bf08      	it	eq
   356d2:	f06f 005e 	mvneq.w	r0, #94	; 0x5e
   356d6:	2300      	movs	r3, #0
   356d8:	702b      	strb	r3, [r5, #0]
   356da:	e002      	b.n	356e2 <send_message+0xae>
   356dc:	7028      	strb	r0, [r5, #0]
   356de:	f06f 000b 	mvn.w	r0, #11
   356e2:	b003      	add	sp, #12
   356e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   356e8:	f06f 0015 	mvn.w	r0, #21
   356ec:	e7f3      	b.n	356d6 <send_message+0xa2>
   356ee:	f04f 30ff 	mov.w	r0, #4294967295
   356f2:	e7f6      	b.n	356e2 <send_message+0xae>
   356f4:	2001d3c6 	.word	0x2001d3c6
   356f8:	2001a5a0 	.word	0x2001a5a0
   356fc:	49765443 	.word	0x49765443

00035700 <rpc_gnss_event_handler>:
   35700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35704:	6804      	ldr	r4, [r0, #0]
   35706:	4607      	mov	r7, r0
   35708:	460d      	mov	r5, r1
   3570a:	2c00      	cmp	r4, #0
   3570c:	f000 8086 	beq.w	3581c <rpc_gnss_event_handler+0x11c>
   35710:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   35714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   35718:	d142      	bne.n	357a0 <rpc_gnss_event_handler+0xa0>
   3571a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 35898 <rpc_gnss_event_handler+0x198>
   3571e:	f898 3000 	ldrb.w	r3, [r8]
   35722:	2b01      	cmp	r3, #1
   35724:	d131      	bne.n	3578a <rpc_gnss_event_handler+0x8a>
   35726:	4b5d      	ldr	r3, [pc, #372]	; (3589c <rpc_gnss_event_handler+0x19c>)
   35728:	6822      	ldr	r2, [r4, #0]
   3572a:	881b      	ldrh	r3, [r3, #0]
   3572c:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   35730:	d12b      	bne.n	3578a <rpc_gnss_event_handler+0x8a>
   35732:	6863      	ldr	r3, [r4, #4]
   35734:	bb6b      	cbnz	r3, 35792 <rpc_gnss_event_handler+0x92>
   35736:	4b5a      	ldr	r3, [pc, #360]	; (358a0 <rpc_gnss_event_handler+0x1a0>)
   35738:	681e      	ldr	r6, [r3, #0]
   3573a:	b31e      	cbz	r6, 35784 <rpc_gnss_event_handler+0x84>
   3573c:	f242 0309 	movw	r3, #8201	; 0x2009
   35740:	4299      	cmp	r1, r3
   35742:	d11f      	bne.n	35784 <rpc_gnss_event_handler+0x84>
   35744:	4630      	mov	r0, r6
   35746:	8923      	ldrh	r3, [r4, #8]
   35748:	2280      	movs	r2, #128	; 0x80
   3574a:	f840 3b04 	str.w	r3, [r0], #4
   3574e:	f104 010a 	add.w	r1, r4, #10
   35752:	f00b ff36 	bl	415c2 <memcpy>
   35756:	2280      	movs	r2, #128	; 0x80
   35758:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   3575c:	f106 0084 	add.w	r0, r6, #132	; 0x84
   35760:	f00b ff2f 	bl	415c2 <memcpy>
   35764:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   35768:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   3576c:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   35770:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   35774:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   35778:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   3577c:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   35780:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   35784:	2300      	movs	r3, #0
   35786:	f888 3000 	strb.w	r3, [r8]
   3578a:	6838      	ldr	r0, [r7, #0]
   3578c:	f00a fd1f 	bl	401ce <rpc_client_data_free>
   35790:	e044      	b.n	3581c <rpc_gnss_event_handler+0x11c>
   35792:	f647 72ff 	movw	r2, #32767	; 0x7fff
   35796:	4293      	cmp	r3, r2
   35798:	bf0c      	ite	eq
   3579a:	2303      	moveq	r3, #3
   3579c:	2302      	movne	r3, #2
   3579e:	e7f2      	b.n	35786 <rpc_gnss_event_handler+0x86>
   357a0:	4e40      	ldr	r6, [pc, #256]	; (358a4 <rpc_gnss_event_handler+0x1a4>)
   357a2:	6833      	ldr	r3, [r6, #0]
   357a4:	2b00      	cmp	r3, #0
   357a6:	d0f0      	beq.n	3578a <rpc_gnss_event_handler+0x8a>
   357a8:	f244 0204 	movw	r2, #16388	; 0x4004
   357ac:	4291      	cmp	r1, r2
   357ae:	d80b      	bhi.n	357c8 <rpc_gnss_event_handler+0xc8>
   357b0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   357b4:	d9e9      	bls.n	3578a <rpc_gnss_event_handler+0x8a>
   357b6:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   357ba:	3a02      	subs	r2, #2
   357bc:	2a02      	cmp	r2, #2
   357be:	d80b      	bhi.n	357d8 <rpc_gnss_event_handler+0xd8>
   357c0:	e8df f002 	tbb	[pc, r2]
   357c4:	4f45      	.short	0x4f45
   357c6:	59          	.byte	0x59
   357c7:	00          	.byte	0x00
   357c8:	f244 1301 	movw	r3, #16641	; 0x4101
   357cc:	4299      	cmp	r1, r3
   357ce:	d003      	beq.n	357d8 <rpc_gnss_event_handler+0xd8>
   357d0:	f244 2301 	movw	r3, #16897	; 0x4201
   357d4:	4299      	cmp	r1, r3
   357d6:	d1d8      	bne.n	3578a <rpc_gnss_event_handler+0x8a>
   357d8:	4f33      	ldr	r7, [pc, #204]	; (358a8 <rpc_gnss_event_handler+0x1a8>)
   357da:	6838      	ldr	r0, [r7, #0]
   357dc:	b108      	cbz	r0, 357e2 <rpc_gnss_event_handler+0xe2>
   357de:	f00a fcf6 	bl	401ce <rpc_client_data_free>
   357e2:	f244 2301 	movw	r3, #16897	; 0x4201
   357e6:	429d      	cmp	r5, r3
   357e8:	4b30      	ldr	r3, [pc, #192]	; (358ac <rpc_gnss_event_handler+0x1ac>)
   357ea:	d11a      	bne.n	35822 <rpc_gnss_event_handler+0x122>
   357ec:	2202      	movs	r2, #2
   357ee:	603c      	str	r4, [r7, #0]
   357f0:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   357f4:	701a      	strb	r2, [r3, #0]
   357f6:	4d2e      	ldr	r5, [pc, #184]	; (358b0 <rpc_gnss_event_handler+0x1b0>)
   357f8:	f014 0718 	ands.w	r7, r4, #24
   357fc:	6833      	ldr	r3, [r6, #0]
   357fe:	782a      	ldrb	r2, [r5, #0]
   35800:	d01f      	beq.n	35842 <rpc_gnss_event_handler+0x142>
   35802:	b91a      	cbnz	r2, 3580c <rpc_gnss_event_handler+0x10c>
   35804:	2005      	movs	r0, #5
   35806:	4798      	blx	r3
   35808:	2301      	movs	r3, #1
   3580a:	702b      	strb	r3, [r5, #0]
   3580c:	07e3      	lsls	r3, r4, #31
   3580e:	d502      	bpl.n	35816 <rpc_gnss_event_handler+0x116>
   35810:	2002      	movs	r0, #2
   35812:	6833      	ldr	r3, [r6, #0]
   35814:	4798      	blx	r3
   35816:	2001      	movs	r0, #1
   35818:	6833      	ldr	r3, [r6, #0]
   3581a:	4798      	blx	r3
   3581c:	2000      	movs	r0, #0
   3581e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35822:	f244 1201 	movw	r2, #16641	; 0x4101
   35826:	4295      	cmp	r5, r2
   35828:	bf0b      	itete	eq
   3582a:	2201      	moveq	r2, #1
   3582c:	2200      	movne	r2, #0
   3582e:	603c      	streq	r4, [r7, #0]
   35830:	603c      	strne	r4, [r7, #0]
   35832:	bf0b      	itete	eq
   35834:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   35838:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   3583c:	701a      	strbeq	r2, [r3, #0]
   3583e:	701a      	strbne	r2, [r3, #0]
   35840:	e7d9      	b.n	357f6 <rpc_gnss_event_handler+0xf6>
   35842:	2a00      	cmp	r2, #0
   35844:	d0e2      	beq.n	3580c <rpc_gnss_event_handler+0x10c>
   35846:	2006      	movs	r0, #6
   35848:	4798      	blx	r3
   3584a:	702f      	strb	r7, [r5, #0]
   3584c:	e7de      	b.n	3580c <rpc_gnss_event_handler+0x10c>
   3584e:	4c19      	ldr	r4, [pc, #100]	; (358b4 <rpc_gnss_event_handler+0x1b4>)
   35850:	6820      	ldr	r0, [r4, #0]
   35852:	b108      	cbz	r0, 35858 <rpc_gnss_event_handler+0x158>
   35854:	f00a fcbb 	bl	401ce <rpc_client_data_free>
   35858:	683b      	ldr	r3, [r7, #0]
   3585a:	2003      	movs	r0, #3
   3585c:	6023      	str	r3, [r4, #0]
   3585e:	6833      	ldr	r3, [r6, #0]
   35860:	e7db      	b.n	3581a <rpc_gnss_event_handler+0x11a>
   35862:	4c15      	ldr	r4, [pc, #84]	; (358b8 <rpc_gnss_event_handler+0x1b8>)
   35864:	6820      	ldr	r0, [r4, #0]
   35866:	b108      	cbz	r0, 3586c <rpc_gnss_event_handler+0x16c>
   35868:	f00a fcb1 	bl	401ce <rpc_client_data_free>
   3586c:	683b      	ldr	r3, [r7, #0]
   3586e:	2004      	movs	r0, #4
   35870:	6023      	str	r3, [r4, #0]
   35872:	6833      	ldr	r3, [r6, #0]
   35874:	e7d1      	b.n	3581a <rpc_gnss_event_handler+0x11a>
   35876:	7822      	ldrb	r2, [r4, #0]
   35878:	2a03      	cmp	r2, #3
   3587a:	d886      	bhi.n	3578a <rpc_gnss_event_handler+0x8a>
   3587c:	e8df f002 	tbb	[pc, r2]
   35880:	09070502 	.word	0x09070502
   35884:	2007      	movs	r0, #7
   35886:	4798      	blx	r3
   35888:	e77f      	b.n	3578a <rpc_gnss_event_handler+0x8a>
   3588a:	2008      	movs	r0, #8
   3588c:	e7fb      	b.n	35886 <rpc_gnss_event_handler+0x186>
   3588e:	2009      	movs	r0, #9
   35890:	e7f9      	b.n	35886 <rpc_gnss_event_handler+0x186>
   35892:	200a      	movs	r0, #10
   35894:	e7f7      	b.n	35886 <rpc_gnss_event_handler+0x186>
   35896:	bf00      	nop
   35898:	2001d3c6 	.word	0x2001d3c6
   3589c:	2001a5a0 	.word	0x2001a5a0
   358a0:	2001a4ec 	.word	0x2001a4ec
   358a4:	2001a4dc 	.word	0x2001a4dc
   358a8:	2001a4e0 	.word	0x2001a4e0
   358ac:	2001d3c5 	.word	0x2001d3c5
   358b0:	2001d3c4 	.word	0x2001d3c4
   358b4:	2001a4e8 	.word	0x2001a4e8
   358b8:	2001a4e4 	.word	0x2001a4e4

000358bc <nrf_modem_gnss_read>:
   358bc:	b570      	push	{r4, r5, r6, lr}
   358be:	4604      	mov	r4, r0
   358c0:	2800      	cmp	r0, #0
   358c2:	f000 817d 	beq.w	35bc0 <nrf_modem_gnss_read+0x304>
   358c6:	2a02      	cmp	r2, #2
   358c8:	f000 815a 	beq.w	35b80 <nrf_modem_gnss_read+0x2c4>
   358cc:	2a03      	cmp	r2, #3
   358ce:	f000 8166 	beq.w	35b9e <nrf_modem_gnss_read+0x2e2>
   358d2:	2a01      	cmp	r2, #1
   358d4:	f040 8174 	bne.w	35bc0 <nrf_modem_gnss_read+0x304>
   358d8:	29e7      	cmp	r1, #231	; 0xe7
   358da:	f240 8174 	bls.w	35bc6 <nrf_modem_gnss_read+0x30a>
   358de:	f00a fc55 	bl	4018c <rpc_transport_rx_data_suspend>
   358e2:	4bba      	ldr	r3, [pc, #744]	; (35bcc <nrf_modem_gnss_read+0x310>)
   358e4:	681d      	ldr	r5, [r3, #0]
   358e6:	b925      	cbnz	r5, 358f2 <nrf_modem_gnss_read+0x36>
   358e8:	f00a fc52 	bl	40190 <rpc_transport_rx_data_resume>
   358ec:	f06f 0022 	mvn.w	r0, #34	; 0x22
   358f0:	e083      	b.n	359fa <nrf_modem_gnss_read+0x13e>
   358f2:	2100      	movs	r1, #0
   358f4:	22e8      	movs	r2, #232	; 0xe8
   358f6:	4620      	mov	r0, r4
   358f8:	f00b fe83 	bl	41602 <memset>
   358fc:	4bb4      	ldr	r3, [pc, #720]	; (35bd0 <nrf_modem_gnss_read+0x314>)
   358fe:	68a9      	ldr	r1, [r5, #8]
   35900:	781b      	ldrb	r3, [r3, #0]
   35902:	2b01      	cmp	r3, #1
   35904:	d07a      	beq.n	359fc <nrf_modem_gnss_read+0x140>
   35906:	2b02      	cmp	r3, #2
   35908:	460b      	mov	r3, r1
   3590a:	686a      	ldr	r2, [r5, #4]
   3590c:	e9c4 2300 	strd	r2, r3, [r4]
   35910:	692b      	ldr	r3, [r5, #16]
   35912:	68ea      	ldr	r2, [r5, #12]
   35914:	e9c4 2302 	strd	r2, r3, [r4, #8]
   35918:	696b      	ldr	r3, [r5, #20]
   3591a:	6123      	str	r3, [r4, #16]
   3591c:	69ab      	ldr	r3, [r5, #24]
   3591e:	6163      	str	r3, [r4, #20]
   35920:	69eb      	ldr	r3, [r5, #28]
   35922:	f040 80d4 	bne.w	35ace <nrf_modem_gnss_read+0x212>
   35926:	61a3      	str	r3, [r4, #24]
   35928:	6a2b      	ldr	r3, [r5, #32]
   3592a:	260a      	movs	r6, #10
   3592c:	61e3      	str	r3, [r4, #28]
   3592e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   35930:	6223      	str	r3, [r4, #32]
   35932:	6aab      	ldr	r3, [r5, #40]	; 0x28
   35934:	6263      	str	r3, [r4, #36]	; 0x24
   35936:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   35938:	62a3      	str	r3, [r4, #40]	; 0x28
   3593a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   3593c:	62e3      	str	r3, [r4, #44]	; 0x2c
   3593e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   35940:	6323      	str	r3, [r4, #48]	; 0x30
   35942:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
   35946:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   3594a:	f8d5 3041 	ldr.w	r3, [r5, #65]	; 0x41
   3594e:	6423      	str	r3, [r4, #64]	; 0x40
   35950:	f8d5 3045 	ldr.w	r3, [r5, #69]	; 0x45
   35954:	6463      	str	r3, [r4, #68]	; 0x44
   35956:	f8d5 3049 	ldr.w	r3, [r5, #73]	; 0x49
   3595a:	64a3      	str	r3, [r4, #72]	; 0x48
   3595c:	f8d5 304d 	ldr.w	r3, [r5, #77]	; 0x4d
   35960:	64e3      	str	r3, [r4, #76]	; 0x4c
   35962:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   35966:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   3596a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3596e:	86a3      	strh	r3, [r4, #52]	; 0x34
   35970:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   35974:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   35978:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   3597c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   35980:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   35984:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   35988:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   3598c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   35990:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
   35994:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   35998:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   3599c:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
   359a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   359a4:	87a3      	strh	r3, [r4, #60]	; 0x3c
   359a6:	f8d5 30ca 	ldr.w	r3, [r5, #202]	; 0xca
   359aa:	462a      	mov	r2, r5
   359ac:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   359b0:	2300      	movs	r3, #0
   359b2:	fb06 5103 	mla	r1, r6, r3, r5
   359b6:	f8b1 0052 	ldrh.w	r0, [r1, #82]	; 0x52
   359ba:	3301      	adds	r3, #1
   359bc:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   359c0:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
   359c4:	2b0c      	cmp	r3, #12
   359c6:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   359ca:	f8b1 0055 	ldrh.w	r0, [r1, #85]	; 0x55
   359ce:	f104 040c 	add.w	r4, r4, #12
   359d2:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   359d6:	f9b1 0057 	ldrsh.w	r0, [r1, #87]	; 0x57
   359da:	f102 020a 	add.w	r2, r2, #10
   359de:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   359e2:	f9b1 1059 	ldrsh.w	r1, [r1, #89]	; 0x59
   359e6:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   359ea:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
   359ee:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   359f2:	d1de      	bne.n	359b2 <nrf_modem_gnss_read+0xf6>
   359f4:	f00a fbcc 	bl	40190 <rpc_transport_rx_data_resume>
   359f8:	2000      	movs	r0, #0
   359fa:	bd70      	pop	{r4, r5, r6, pc}
   359fc:	460b      	mov	r3, r1
   359fe:	686a      	ldr	r2, [r5, #4]
   35a00:	260a      	movs	r6, #10
   35a02:	e9c4 2300 	strd	r2, r3, [r4]
   35a06:	68ea      	ldr	r2, [r5, #12]
   35a08:	692b      	ldr	r3, [r5, #16]
   35a0a:	e9c4 2302 	strd	r2, r3, [r4, #8]
   35a0e:	696b      	ldr	r3, [r5, #20]
   35a10:	6123      	str	r3, [r4, #16]
   35a12:	69ab      	ldr	r3, [r5, #24]
   35a14:	6163      	str	r3, [r4, #20]
   35a16:	69eb      	ldr	r3, [r5, #28]
   35a18:	61e3      	str	r3, [r4, #28]
   35a1a:	6a2b      	ldr	r3, [r5, #32]
   35a1c:	6223      	str	r3, [r4, #32]
   35a1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   35a20:	62e3      	str	r3, [r4, #44]	; 0x2c
   35a22:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
   35a26:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   35a2a:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   35a2e:	6423      	str	r3, [r4, #64]	; 0x40
   35a30:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   35a34:	6463      	str	r3, [r4, #68]	; 0x44
   35a36:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   35a3a:	64a3      	str	r3, [r4, #72]	; 0x48
   35a3c:	f8d5 303d 	ldr.w	r3, [r5, #61]	; 0x3d
   35a40:	64e3      	str	r3, [r4, #76]	; 0x4c
   35a42:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
   35a46:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   35a4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35a4e:	86a3      	strh	r3, [r4, #52]	; 0x34
   35a50:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   35a54:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   35a58:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   35a5c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   35a60:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   35a64:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   35a68:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   35a6c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   35a70:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   35a74:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   35a78:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   35a7c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   35a80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35a84:	87a3      	strh	r3, [r4, #60]	; 0x3c
   35a86:	462a      	mov	r2, r5
   35a88:	2300      	movs	r3, #0
   35a8a:	fb06 5103 	mla	r1, r6, r3, r5
   35a8e:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
   35a92:	3301      	adds	r3, #1
   35a94:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   35a98:	f892 0044 	ldrb.w	r0, [r2, #68]	; 0x44
   35a9c:	2b0c      	cmp	r3, #12
   35a9e:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   35aa2:	f8b1 0045 	ldrh.w	r0, [r1, #69]	; 0x45
   35aa6:	f104 040c 	add.w	r4, r4, #12
   35aaa:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   35aae:	f9b1 0047 	ldrsh.w	r0, [r1, #71]	; 0x47
   35ab2:	f102 020a 	add.w	r2, r2, #10
   35ab6:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   35aba:	f9b1 1049 	ldrsh.w	r1, [r1, #73]	; 0x49
   35abe:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   35ac2:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
   35ac6:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   35aca:	d1de      	bne.n	35a8a <nrf_modem_gnss_read+0x1ce>
   35acc:	e792      	b.n	359f4 <nrf_modem_gnss_read+0x138>
   35ace:	61e3      	str	r3, [r4, #28]
   35ad0:	6a2b      	ldr	r3, [r5, #32]
   35ad2:	260a      	movs	r6, #10
   35ad4:	62e3      	str	r3, [r4, #44]	; 0x2c
   35ad6:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   35ada:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   35ade:	f8d5 302d 	ldr.w	r3, [r5, #45]	; 0x2d
   35ae2:	6423      	str	r3, [r4, #64]	; 0x40
   35ae4:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   35ae8:	6463      	str	r3, [r4, #68]	; 0x44
   35aea:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   35aee:	64a3      	str	r3, [r4, #72]	; 0x48
   35af0:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   35af4:	64e3      	str	r3, [r4, #76]	; 0x4c
   35af6:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   35afa:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   35afe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35b02:	86a3      	strh	r3, [r4, #52]	; 0x34
   35b04:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   35b08:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   35b0c:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   35b10:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   35b14:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   35b18:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   35b1c:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   35b20:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   35b24:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   35b28:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   35b2c:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   35b30:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   35b34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35b38:	87a3      	strh	r3, [r4, #60]	; 0x3c
   35b3a:	462a      	mov	r2, r5
   35b3c:	2300      	movs	r3, #0
   35b3e:	fb06 5103 	mla	r1, r6, r3, r5
   35b42:	8fc8      	ldrh	r0, [r1, #62]	; 0x3e
   35b44:	3301      	adds	r3, #1
   35b46:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   35b4a:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
   35b4e:	2b0c      	cmp	r3, #12
   35b50:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   35b54:	f8b1 0041 	ldrh.w	r0, [r1, #65]	; 0x41
   35b58:	f104 040c 	add.w	r4, r4, #12
   35b5c:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   35b60:	f9b1 0043 	ldrsh.w	r0, [r1, #67]	; 0x43
   35b64:	f102 020a 	add.w	r2, r2, #10
   35b68:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   35b6c:	f9b1 1045 	ldrsh.w	r1, [r1, #69]	; 0x45
   35b70:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   35b74:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
   35b78:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   35b7c:	d1df      	bne.n	35b3e <nrf_modem_gnss_read+0x282>
   35b7e:	e739      	b.n	359f4 <nrf_modem_gnss_read+0x138>
   35b80:	2952      	cmp	r1, #82	; 0x52
   35b82:	d920      	bls.n	35bc6 <nrf_modem_gnss_read+0x30a>
   35b84:	4d13      	ldr	r5, [pc, #76]	; (35bd4 <nrf_modem_gnss_read+0x318>)
   35b86:	682b      	ldr	r3, [r5, #0]
   35b88:	2b00      	cmp	r3, #0
   35b8a:	f43f aeaf 	beq.w	358ec <nrf_modem_gnss_read+0x30>
   35b8e:	f00a fafd 	bl	4018c <rpc_transport_rx_data_suspend>
   35b92:	2253      	movs	r2, #83	; 0x53
   35b94:	4620      	mov	r0, r4
   35b96:	6829      	ldr	r1, [r5, #0]
   35b98:	f00b fd13 	bl	415c2 <memcpy>
   35b9c:	e72a      	b.n	359f4 <nrf_modem_gnss_read+0x138>
   35b9e:	290b      	cmp	r1, #11
   35ba0:	d911      	bls.n	35bc6 <nrf_modem_gnss_read+0x30a>
   35ba2:	4d0d      	ldr	r5, [pc, #52]	; (35bd8 <nrf_modem_gnss_read+0x31c>)
   35ba4:	682b      	ldr	r3, [r5, #0]
   35ba6:	2b00      	cmp	r3, #0
   35ba8:	f43f aea0 	beq.w	358ec <nrf_modem_gnss_read+0x30>
   35bac:	f00a faee 	bl	4018c <rpc_transport_rx_data_suspend>
   35bb0:	682b      	ldr	r3, [r5, #0]
   35bb2:	681a      	ldr	r2, [r3, #0]
   35bb4:	6022      	str	r2, [r4, #0]
   35bb6:	685a      	ldr	r2, [r3, #4]
   35bb8:	6062      	str	r2, [r4, #4]
   35bba:	891b      	ldrh	r3, [r3, #8]
   35bbc:	60a3      	str	r3, [r4, #8]
   35bbe:	e719      	b.n	359f4 <nrf_modem_gnss_read+0x138>
   35bc0:	f06f 0015 	mvn.w	r0, #21
   35bc4:	e719      	b.n	359fa <nrf_modem_gnss_read+0x13e>
   35bc6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   35bca:	e716      	b.n	359fa <nrf_modem_gnss_read+0x13e>
   35bcc:	2001a4e0 	.word	0x2001a4e0
   35bd0:	2001d3c5 	.word	0x2001d3c5
   35bd4:	2001a4e8 	.word	0x2001a4e8
   35bd8:	2001a4e4 	.word	0x2001a4e4

00035bdc <nrf_modem_gnss_start>:
   35bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35be0:	4f27      	ldr	r7, [pc, #156]	; (35c80 <nrf_modem_gnss_start+0xa4>)
   35be2:	b087      	sub	sp, #28
   35be4:	783b      	ldrb	r3, [r7, #0]
   35be6:	2b00      	cmp	r3, #0
   35be8:	d146      	bne.n	35c78 <nrf_modem_gnss_start+0x9c>
   35bea:	f8df 8098 	ldr.w	r8, [pc, #152]	; 35c84 <nrf_modem_gnss_start+0xa8>
   35bee:	f898 3000 	ldrb.w	r3, [r8]
   35bf2:	bb63      	cbnz	r3, 35c4e <nrf_modem_gnss_start+0x72>
   35bf4:	2502      	movs	r5, #2
   35bf6:	f04f 0905 	mov.w	r9, #5
   35bfa:	462e      	mov	r6, r5
   35bfc:	2214      	movs	r2, #20
   35bfe:	2100      	movs	r1, #0
   35c00:	a801      	add	r0, sp, #4
   35c02:	f00b fcfe 	bl	41602 <memset>
   35c06:	2214      	movs	r2, #20
   35c08:	f241 0004 	movw	r0, #4100	; 0x1004
   35c0c:	a901      	add	r1, sp, #4
   35c0e:	f88d 9008 	strb.w	r9, [sp, #8]
   35c12:	f8cd 6009 	str.w	r6, [sp, #9]
   35c16:	f7ff fd0d 	bl	35634 <send_message>
   35c1a:	4604      	mov	r4, r0
   35c1c:	b110      	cbz	r0, 35c24 <nrf_modem_gnss_start+0x48>
   35c1e:	2601      	movs	r6, #1
   35c20:	42b5      	cmp	r5, r6
   35c22:	d127      	bne.n	35c74 <nrf_modem_gnss_start+0x98>
   35c24:	2214      	movs	r2, #20
   35c26:	2100      	movs	r1, #0
   35c28:	a801      	add	r0, sp, #4
   35c2a:	f00b fcea 	bl	41602 <memset>
   35c2e:	2501      	movs	r5, #1
   35c30:	2380      	movs	r3, #128	; 0x80
   35c32:	2214      	movs	r2, #20
   35c34:	f241 2003 	movw	r0, #4611	; 0x1203
   35c38:	a901      	add	r1, sp, #4
   35c3a:	9302      	str	r3, [sp, #8]
   35c3c:	f88d 5016 	strb.w	r5, [sp, #22]
   35c40:	f7ff fcf8 	bl	35634 <send_message>
   35c44:	ea54 0300 	orrs.w	r3, r4, r0
   35c48:	bf08      	it	eq
   35c4a:	f888 5000 	strbeq.w	r5, [r8]
   35c4e:	2401      	movs	r4, #1
   35c50:	2214      	movs	r2, #20
   35c52:	2100      	movs	r1, #0
   35c54:	a801      	add	r0, sp, #4
   35c56:	f00b fcd4 	bl	41602 <memset>
   35c5a:	2214      	movs	r2, #20
   35c5c:	f241 0004 	movw	r0, #4100	; 0x1004
   35c60:	a901      	add	r1, sp, #4
   35c62:	f88d 4008 	strb.w	r4, [sp, #8]
   35c66:	f7ff fce5 	bl	35634 <send_message>
   35c6a:	b900      	cbnz	r0, 35c6e <nrf_modem_gnss_start+0x92>
   35c6c:	703c      	strb	r4, [r7, #0]
   35c6e:	b007      	add	sp, #28
   35c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35c74:	4635      	mov	r5, r6
   35c76:	e7c1      	b.n	35bfc <nrf_modem_gnss_start+0x20>
   35c78:	f04f 30ff 	mov.w	r0, #4294967295
   35c7c:	e7f7      	b.n	35c6e <nrf_modem_gnss_start+0x92>
   35c7e:	bf00      	nop
   35c80:	2001d3c8 	.word	0x2001d3c8
   35c84:	2001d3c7 	.word	0x2001d3c7

00035c88 <nrf_modem_gnss_stop>:
   35c88:	b510      	push	{r4, lr}
   35c8a:	4c0b      	ldr	r4, [pc, #44]	; (35cb8 <nrf_modem_gnss_stop+0x30>)
   35c8c:	b086      	sub	sp, #24
   35c8e:	7823      	ldrb	r3, [r4, #0]
   35c90:	2b01      	cmp	r3, #1
   35c92:	d10e      	bne.n	35cb2 <nrf_modem_gnss_stop+0x2a>
   35c94:	2214      	movs	r2, #20
   35c96:	2100      	movs	r1, #0
   35c98:	a801      	add	r0, sp, #4
   35c9a:	f00b fcb2 	bl	41602 <memset>
   35c9e:	2214      	movs	r2, #20
   35ca0:	f241 0004 	movw	r0, #4100	; 0x1004
   35ca4:	a901      	add	r1, sp, #4
   35ca6:	f7ff fcc5 	bl	35634 <send_message>
   35caa:	b900      	cbnz	r0, 35cae <nrf_modem_gnss_stop+0x26>
   35cac:	7020      	strb	r0, [r4, #0]
   35cae:	b006      	add	sp, #24
   35cb0:	bd10      	pop	{r4, pc}
   35cb2:	f04f 30ff 	mov.w	r0, #4294967295
   35cb6:	e7fa      	b.n	35cae <nrf_modem_gnss_stop+0x26>
   35cb8:	2001d3c8 	.word	0x2001d3c8

00035cbc <nrf_modem_gnss_use_case_set>:
   35cbc:	b510      	push	{r4, lr}
   35cbe:	4b0d      	ldr	r3, [pc, #52]	; (35cf4 <nrf_modem_gnss_use_case_set+0x38>)
   35cc0:	4604      	mov	r4, r0
   35cc2:	781b      	ldrb	r3, [r3, #0]
   35cc4:	b086      	sub	sp, #24
   35cc6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   35cca:	b97b      	cbnz	r3, 35cec <nrf_modem_gnss_use_case_set+0x30>
   35ccc:	2214      	movs	r2, #20
   35cce:	a801      	add	r0, sp, #4
   35cd0:	f00b fc97 	bl	41602 <memset>
   35cd4:	2302      	movs	r3, #2
   35cd6:	2214      	movs	r2, #20
   35cd8:	f241 1003 	movw	r0, #4355	; 0x1103
   35cdc:	a901      	add	r1, sp, #4
   35cde:	9302      	str	r3, [sp, #8]
   35ce0:	f88d 400d 	strb.w	r4, [sp, #13]
   35ce4:	f7ff fca6 	bl	35634 <send_message>
   35ce8:	b006      	add	sp, #24
   35cea:	bd10      	pop	{r4, pc}
   35cec:	f04f 30ff 	mov.w	r0, #4294967295
   35cf0:	e7fa      	b.n	35ce8 <nrf_modem_gnss_use_case_set+0x2c>
   35cf2:	bf00      	nop
   35cf4:	2001d3c8 	.word	0x2001d3c8

00035cf8 <nrf_modem_gnss_fix_interval_set>:
   35cf8:	b510      	push	{r4, lr}
   35cfa:	4b0d      	ldr	r3, [pc, #52]	; (35d30 <nrf_modem_gnss_fix_interval_set+0x38>)
   35cfc:	4604      	mov	r4, r0
   35cfe:	781b      	ldrb	r3, [r3, #0]
   35d00:	b086      	sub	sp, #24
   35d02:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   35d06:	b97b      	cbnz	r3, 35d28 <nrf_modem_gnss_fix_interval_set+0x30>
   35d08:	2214      	movs	r2, #20
   35d0a:	a801      	add	r0, sp, #4
   35d0c:	f00b fc79 	bl	41602 <memset>
   35d10:	2308      	movs	r3, #8
   35d12:	2214      	movs	r2, #20
   35d14:	f241 1003 	movw	r0, #4355	; 0x1103
   35d18:	a901      	add	r1, sp, #4
   35d1a:	9302      	str	r3, [sp, #8]
   35d1c:	f8ad 400f 	strh.w	r4, [sp, #15]
   35d20:	f7ff fc88 	bl	35634 <send_message>
   35d24:	b006      	add	sp, #24
   35d26:	bd10      	pop	{r4, pc}
   35d28:	f04f 30ff 	mov.w	r0, #4294967295
   35d2c:	e7fa      	b.n	35d24 <nrf_modem_gnss_fix_interval_set+0x2c>
   35d2e:	bf00      	nop
   35d30:	2001d3c8 	.word	0x2001d3c8

00035d34 <nrf_modem_gnss_event_handler_set>:
   35d34:	4a05      	ldr	r2, [pc, #20]	; (35d4c <nrf_modem_gnss_event_handler_set+0x18>)
   35d36:	4603      	mov	r3, r0
   35d38:	7812      	ldrb	r2, [r2, #0]
   35d3a:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   35d3e:	b912      	cbnz	r2, 35d46 <nrf_modem_gnss_event_handler_set+0x12>
   35d40:	4a03      	ldr	r2, [pc, #12]	; (35d50 <nrf_modem_gnss_event_handler_set+0x1c>)
   35d42:	6013      	str	r3, [r2, #0]
   35d44:	4770      	bx	lr
   35d46:	f04f 30ff 	mov.w	r0, #4294967295
   35d4a:	4770      	bx	lr
   35d4c:	2001d3c8 	.word	0x2001d3c8
   35d50:	2001a4dc 	.word	0x2001a4dc

00035d54 <full_dfu_ipc_irq_handler>:
   35d54:	b510      	push	{r4, lr}
   35d56:	4604      	mov	r4, r0
   35d58:	4b04      	ldr	r3, [pc, #16]	; (35d6c <full_dfu_ipc_irq_handler+0x18>)
   35d5a:	6818      	ldr	r0, [r3, #0]
   35d5c:	f7ef fe78 	bl	25a50 <nrf_modem_os_sem_give>
   35d60:	07e3      	lsls	r3, r4, #31
   35d62:	bf42      	ittt	mi
   35d64:	2201      	movmi	r2, #1
   35d66:	4b02      	ldrmi	r3, [pc, #8]	; (35d70 <full_dfu_ipc_irq_handler+0x1c>)
   35d68:	701a      	strbmi	r2, [r3, #0]
   35d6a:	bd10      	pop	{r4, pc}
   35d6c:	2001a4f0 	.word	0x2001a4f0
   35d70:	2001d3c9 	.word	0x2001d3c9

00035d74 <modem_ipc_wait_for_event>:
   35d74:	b508      	push	{r3, lr}
   35d76:	4b08      	ldr	r3, [pc, #32]	; (35d98 <modem_ipc_wait_for_event+0x24>)
   35d78:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   35d7c:	6818      	ldr	r0, [r3, #0]
   35d7e:	f7ef fe87 	bl	25a90 <nrf_modem_os_sem_take>
   35d82:	b930      	cbnz	r0, 35d92 <modem_ipc_wait_for_event+0x1e>
   35d84:	4b05      	ldr	r3, [pc, #20]	; (35d9c <modem_ipc_wait_for_event+0x28>)
   35d86:	781b      	ldrb	r3, [r3, #0]
   35d88:	2b01      	cmp	r3, #1
   35d8a:	bf08      	it	eq
   35d8c:	f06f 0004 	mvneq.w	r0, #4
   35d90:	bd08      	pop	{r3, pc}
   35d92:	f06f 0073 	mvn.w	r0, #115	; 0x73
   35d96:	e7fb      	b.n	35d90 <modem_ipc_wait_for_event+0x1c>
   35d98:	2001a4f0 	.word	0x2001a4f0
   35d9c:	2001d3c9 	.word	0x2001d3c9

00035da0 <nrf_modem_full_dfu_setup>:
   35da0:	2200      	movs	r2, #0
   35da2:	2300      	movs	r3, #0
   35da4:	b5f0      	push	{r4, r5, r6, r7, lr}
   35da6:	4d2d      	ldr	r5, [pc, #180]	; (35e5c <nrf_modem_full_dfu_setup+0xbc>)
   35da8:	4f2d      	ldr	r7, [pc, #180]	; (35e60 <nrf_modem_full_dfu_setup+0xc0>)
   35daa:	e9c5 2302 	strd	r2, r3, [r5, #8]
   35dae:	e9c5 2304 	strd	r2, r3, [r5, #16]
   35db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   35db6:	4b2b      	ldr	r3, [pc, #172]	; (35e64 <nrf_modem_full_dfu_setup+0xc4>)
   35db8:	2400      	movs	r4, #0
   35dba:	601a      	str	r2, [r3, #0]
   35dbc:	f100 031c 	add.w	r3, r0, #28
   35dc0:	603b      	str	r3, [r7, #0]
   35dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   35dc6:	6043      	str	r3, [r0, #4]
   35dc8:	231c      	movs	r3, #28
   35dca:	7203      	strb	r3, [r0, #8]
   35dcc:	2320      	movs	r3, #32
   35dce:	2601      	movs	r6, #1
   35dd0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   35dd4:	7243      	strb	r3, [r0, #9]
   35dd6:	4b24      	ldr	r3, [pc, #144]	; (35e68 <nrf_modem_full_dfu_setup+0xc8>)
   35dd8:	7004      	strb	r4, [r0, #0]
   35dda:	7044      	strb	r4, [r0, #1]
   35ddc:	70c2      	strb	r2, [r0, #3]
   35dde:	7284      	strb	r4, [r0, #10]
   35de0:	72c4      	strb	r4, [r0, #11]
   35de2:	7086      	strb	r6, [r0, #2]
   35de4:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   35de8:	702c      	strb	r4, [r5, #0]
   35dea:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   35dee:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   35df2:	4b1e      	ldr	r3, [pc, #120]	; (35e6c <nrf_modem_full_dfu_setup+0xcc>)
   35df4:	b093      	sub	sp, #76	; 0x4c
   35df6:	4622      	mov	r2, r4
   35df8:	4620      	mov	r0, r4
   35dfa:	491d      	ldr	r1, [pc, #116]	; (35e70 <nrf_modem_full_dfu_setup+0xd0>)
   35dfc:	701c      	strb	r4, [r3, #0]
   35dfe:	f7fc ffa5 	bl	32d4c <nrfx_ipc_init>
   35e02:	4621      	mov	r1, r4
   35e04:	2240      	movs	r2, #64	; 0x40
   35e06:	a801      	add	r0, sp, #4
   35e08:	f00b fbfb 	bl	41602 <memset>
   35e0c:	2302      	movs	r3, #2
   35e0e:	9302      	str	r3, [sp, #8]
   35e10:	2304      	movs	r3, #4
   35e12:	930b      	str	r3, [sp, #44]	; 0x2c
   35e14:	2305      	movs	r3, #5
   35e16:	a801      	add	r0, sp, #4
   35e18:	9311      	str	r3, [sp, #68]	; 0x44
   35e1a:	9609      	str	r6, [sp, #36]	; 0x24
   35e1c:	f7fc ffbc 	bl	32d98 <nrfx_ipc_config_load>
   35e20:	4621      	mov	r1, r4
   35e22:	4632      	mov	r2, r6
   35e24:	4813      	ldr	r0, [pc, #76]	; (35e74 <nrf_modem_full_dfu_setup+0xd4>)
   35e26:	683f      	ldr	r7, [r7, #0]
   35e28:	f7ef fdda 	bl	259e0 <nrf_modem_os_sem_init>
   35e2c:	4b12      	ldr	r3, [pc, #72]	; (35e78 <nrf_modem_full_dfu_setup+0xd8>)
   35e2e:	9400      	str	r4, [sp, #0]
   35e30:	611c      	str	r4, [r3, #16]
   35e32:	691b      	ldr	r3, [r3, #16]
   35e34:	9300      	str	r3, [sp, #0]
   35e36:	9b00      	ldr	r3, [sp, #0]
   35e38:	f7ff ff9c 	bl	35d74 <modem_ipc_wait_for_event>
   35e3c:	4604      	mov	r4, r0
   35e3e:	b130      	cbz	r0, 35e4e <nrf_modem_full_dfu_setup+0xae>
   35e40:	2303      	movs	r3, #3
   35e42:	702b      	strb	r3, [r5, #0]
   35e44:	f7fc ffe6 	bl	32e14 <nrfx_ipc_uninit>
   35e48:	4620      	mov	r0, r4
   35e4a:	b013      	add	sp, #76	; 0x4c
   35e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35e4e:	683a      	ldr	r2, [r7, #0]
   35e50:	4b0a      	ldr	r3, [pc, #40]	; (35e7c <nrf_modem_full_dfu_setup+0xdc>)
   35e52:	429a      	cmp	r2, r3
   35e54:	d0f8      	beq.n	35e48 <nrf_modem_full_dfu_setup+0xa8>
   35e56:	f06f 0404 	mvn.w	r4, #4
   35e5a:	e7f3      	b.n	35e44 <nrf_modem_full_dfu_setup+0xa4>
   35e5c:	20018de8 	.word	0x20018de8
   35e60:	2001a4f4 	.word	0x2001a4f4
   35e64:	2001a4f8 	.word	0x2001a4f8
   35e68:	4002a000 	.word	0x4002a000
   35e6c:	2001d3c9 	.word	0x2001d3c9
   35e70:	00035d55 	.word	0x00035d55
   35e74:	2001a4f0 	.word	0x2001a4f0
   35e78:	40005600 	.word	0x40005600
   35e7c:	a5000001 	.word	0xa5000001

00035e80 <modem_off>:
   35e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35e82:	2501      	movs	r5, #1
   35e84:	4c07      	ldr	r4, [pc, #28]	; (35ea4 <modem_off+0x24>)
   35e86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   35e8a:	6165      	str	r5, [r4, #20]
   35e8c:	f009 f826 	bl	3eedc <nrf_modem_os_busywait>
   35e90:	2300      	movs	r3, #0
   35e92:	6163      	str	r3, [r4, #20]
   35e94:	9301      	str	r3, [sp, #4]
   35e96:	6125      	str	r5, [r4, #16]
   35e98:	6923      	ldr	r3, [r4, #16]
   35e9a:	9301      	str	r3, [sp, #4]
   35e9c:	9b01      	ldr	r3, [sp, #4]
   35e9e:	b003      	add	sp, #12
   35ea0:	bd30      	pop	{r4, r5, pc}
   35ea2:	bf00      	nop
   35ea4:	40005600 	.word	0x40005600

00035ea8 <nrf_modem_init>:
   35ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35eaa:	4604      	mov	r4, r0
   35eac:	460d      	mov	r5, r1
   35eae:	f000 f871 	bl	35f94 <nrf_modem_state_is_uninitialized>
   35eb2:	2800      	cmp	r0, #0
   35eb4:	d03b      	beq.n	35f2e <nrf_modem_init+0x86>
   35eb6:	2c00      	cmp	r4, #0
   35eb8:	d03c      	beq.n	35f34 <nrf_modem_init+0x8c>
   35eba:	6a60      	ldr	r0, [r4, #36]	; 0x24
   35ebc:	2800      	cmp	r0, #0
   35ebe:	d03c      	beq.n	35f3a <nrf_modem_init+0x92>
   35ec0:	f000 f844 	bl	35f4c <nrf_modem_fault_handler_set>
   35ec4:	b9ed      	cbnz	r5, 35f02 <nrf_modem_init+0x5a>
   35ec6:	f7ef fe7d 	bl	25bc4 <nrf_modem_os_init>
   35eca:	2001      	movs	r0, #1
   35ecc:	f000 f854 	bl	35f78 <nrf_modem_state_set>
   35ed0:	6a23      	ldr	r3, [r4, #32]
   35ed2:	4668      	mov	r0, sp
   35ed4:	9400      	str	r4, [sp, #0]
   35ed6:	f88d 3004 	strb.w	r3, [sp, #4]
   35eda:	f7fe f8dd 	bl	34098 <rpc_transport_ipc_init>
   35ede:	4604      	mov	r4, r0
   35ee0:	b938      	cbnz	r0, 35ef2 <nrf_modem_init+0x4a>
   35ee2:	f7ff f911 	bl	35108 <nrf_modem_at_init>
   35ee6:	4604      	mov	r4, r0
   35ee8:	b918      	cbnz	r0, 35ef2 <nrf_modem_init+0x4a>
   35eea:	f7fe fcf7 	bl	348dc <ip_interface_init>
   35eee:	4604      	mov	r4, r0
   35ef0:	b1c8      	cbz	r0, 35f26 <nrf_modem_init+0x7e>
   35ef2:	2000      	movs	r0, #0
   35ef4:	f000 f840 	bl	35f78 <nrf_modem_state_set>
   35ef8:	f7ff ffc2 	bl	35e80 <modem_off>
   35efc:	4620      	mov	r0, r4
   35efe:	b003      	add	sp, #12
   35f00:	bd30      	pop	{r4, r5, pc}
   35f02:	68e2      	ldr	r2, [r4, #12]
   35f04:	6863      	ldr	r3, [r4, #4]
   35f06:	4413      	add	r3, r2
   35f08:	6962      	ldr	r2, [r4, #20]
   35f0a:	4413      	add	r3, r2
   35f0c:	69e2      	ldr	r2, [r4, #28]
   35f0e:	4413      	add	r3, r2
   35f10:	f242 021b 	movw	r2, #8219	; 0x201b
   35f14:	4293      	cmp	r3, r2
   35f16:	d913      	bls.n	35f40 <nrf_modem_init+0x98>
   35f18:	2002      	movs	r0, #2
   35f1a:	f000 f82d 	bl	35f78 <nrf_modem_state_set>
   35f1e:	6820      	ldr	r0, [r4, #0]
   35f20:	f7ff ff3e 	bl	35da0 <nrf_modem_full_dfu_setup>
   35f24:	e7e3      	b.n	35eee <nrf_modem_init+0x46>
   35f26:	4b08      	ldr	r3, [pc, #32]	; (35f48 <nrf_modem_init+0xa0>)
   35f28:	2400      	movs	r4, #0
   35f2a:	701d      	strb	r5, [r3, #0]
   35f2c:	e7e6      	b.n	35efc <nrf_modem_init+0x54>
   35f2e:	f04f 34ff 	mov.w	r4, #4294967295
   35f32:	e7e3      	b.n	35efc <nrf_modem_init+0x54>
   35f34:	f06f 040d 	mvn.w	r4, #13
   35f38:	e7e0      	b.n	35efc <nrf_modem_init+0x54>
   35f3a:	f06f 0415 	mvn.w	r4, #21
   35f3e:	e7dd      	b.n	35efc <nrf_modem_init+0x54>
   35f40:	f06f 040b 	mvn.w	r4, #11
   35f44:	e7da      	b.n	35efc <nrf_modem_init+0x54>
   35f46:	bf00      	nop
   35f48:	2001d3ca 	.word	0x2001d3ca

00035f4c <nrf_modem_fault_handler_set>:
   35f4c:	4b01      	ldr	r3, [pc, #4]	; (35f54 <nrf_modem_fault_handler_set+0x8>)
   35f4e:	6018      	str	r0, [r3, #0]
   35f50:	4770      	bx	lr
   35f52:	bf00      	nop
   35f54:	2001a4fc 	.word	0x2001a4fc

00035f58 <nrf_modem_fault_handler_internal>:
   35f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35f5a:	460c      	mov	r4, r1
   35f5c:	4605      	mov	r5, r0
   35f5e:	2003      	movs	r0, #3
   35f60:	f000 f80a 	bl	35f78 <nrf_modem_state_set>
   35f64:	4b03      	ldr	r3, [pc, #12]	; (35f74 <nrf_modem_fault_handler_internal+0x1c>)
   35f66:	4668      	mov	r0, sp
   35f68:	e9cd 5400 	strd	r5, r4, [sp]
   35f6c:	681b      	ldr	r3, [r3, #0]
   35f6e:	4798      	blx	r3
   35f70:	b003      	add	sp, #12
   35f72:	bd30      	pop	{r4, r5, pc}
   35f74:	2001a4fc 	.word	0x2001a4fc

00035f78 <nrf_modem_state_set>:
   35f78:	4b01      	ldr	r3, [pc, #4]	; (35f80 <nrf_modem_state_set+0x8>)
   35f7a:	7018      	strb	r0, [r3, #0]
   35f7c:	4770      	bx	lr
   35f7e:	bf00      	nop
   35f80:	2001d3cb 	.word	0x2001d3cb

00035f84 <nrf_modem_state_is_initialized>:
   35f84:	4b02      	ldr	r3, [pc, #8]	; (35f90 <nrf_modem_state_is_initialized+0xc>)
   35f86:	7818      	ldrb	r0, [r3, #0]
   35f88:	1e43      	subs	r3, r0, #1
   35f8a:	4258      	negs	r0, r3
   35f8c:	4158      	adcs	r0, r3
   35f8e:	4770      	bx	lr
   35f90:	2001d3cb 	.word	0x2001d3cb

00035f94 <nrf_modem_state_is_uninitialized>:
   35f94:	4b02      	ldr	r3, [pc, #8]	; (35fa0 <nrf_modem_state_is_uninitialized+0xc>)
   35f96:	7818      	ldrb	r0, [r3, #0]
   35f98:	fab0 f080 	clz	r0, r0
   35f9c:	0940      	lsrs	r0, r0, #5
   35f9e:	4770      	bx	lr
   35fa0:	2001d3cb 	.word	0x2001d3cb

00035fa4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   35fa4:	4b0e      	ldr	r3, [pc, #56]	; (35fe0 <z_sys_init_run_level+0x3c>)
{
   35fa6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   35fa8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   35fac:	3001      	adds	r0, #1
   35fae:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   35fb2:	42a6      	cmp	r6, r4
   35fb4:	d800      	bhi.n	35fb8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   35fb6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   35fb8:	e9d4 3500 	ldrd	r3, r5, [r4]
   35fbc:	4628      	mov	r0, r5
   35fbe:	4798      	blx	r3
		if (dev != NULL) {
   35fc0:	b165      	cbz	r5, 35fdc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   35fc2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   35fc4:	b130      	cbz	r0, 35fd4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   35fc6:	2800      	cmp	r0, #0
   35fc8:	bfb8      	it	lt
   35fca:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   35fcc:	28ff      	cmp	r0, #255	; 0xff
   35fce:	bfa8      	it	ge
   35fd0:	20ff      	movge	r0, #255	; 0xff
   35fd2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   35fd4:	785a      	ldrb	r2, [r3, #1]
   35fd6:	f042 0201 	orr.w	r2, r2, #1
   35fda:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   35fdc:	3408      	adds	r4, #8
   35fde:	e7e8      	b.n	35fb2 <z_sys_init_run_level+0xe>
   35fe0:	000435a4 	.word	0x000435a4

00035fe4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   35fe4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   35fe6:	4605      	mov	r5, r0
   35fe8:	b910      	cbnz	r0, 35ff0 <z_impl_device_get_binding+0xc>
		return NULL;
   35fea:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   35fec:	4620      	mov	r0, r4
   35fee:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   35ff0:	7803      	ldrb	r3, [r0, #0]
   35ff2:	2b00      	cmp	r3, #0
   35ff4:	d0f9      	beq.n	35fea <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   35ff6:	4c0e      	ldr	r4, [pc, #56]	; (36030 <z_impl_device_get_binding+0x4c>)
   35ff8:	4e0e      	ldr	r6, [pc, #56]	; (36034 <z_impl_device_get_binding+0x50>)
   35ffa:	42b4      	cmp	r4, r6
   35ffc:	d108      	bne.n	36010 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   35ffe:	4c0c      	ldr	r4, [pc, #48]	; (36030 <z_impl_device_get_binding+0x4c>)
   36000:	42b4      	cmp	r4, r6
   36002:	d0f2      	beq.n	35fea <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   36004:	4620      	mov	r0, r4
   36006:	f00b f875 	bl	410f4 <z_device_is_ready>
   3600a:	b950      	cbnz	r0, 36022 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   3600c:	3418      	adds	r4, #24
   3600e:	e7f7      	b.n	36000 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   36010:	4620      	mov	r0, r4
   36012:	f00b f86f 	bl	410f4 <z_device_is_ready>
   36016:	b110      	cbz	r0, 3601e <z_impl_device_get_binding+0x3a>
   36018:	6823      	ldr	r3, [r4, #0]
   3601a:	42ab      	cmp	r3, r5
   3601c:	d0e6      	beq.n	35fec <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   3601e:	3418      	adds	r4, #24
   36020:	e7eb      	b.n	35ffa <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   36022:	4628      	mov	r0, r5
   36024:	6821      	ldr	r1, [r4, #0]
   36026:	f7e7 f902 	bl	1d22e <strcmp>
   3602a:	2800      	cmp	r0, #0
   3602c:	d1ee      	bne.n	3600c <z_impl_device_get_binding+0x28>
   3602e:	e7dd      	b.n	35fec <z_impl_device_get_binding+0x8>
   36030:	00042514 	.word	0x00042514
   36034:	000425bc 	.word	0x000425bc

00036038 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   36038:	4b01      	ldr	r3, [pc, #4]	; (36040 <z_impl_z_errno+0x8>)
   3603a:	6898      	ldr	r0, [r3, #8]
}
   3603c:	3070      	adds	r0, #112	; 0x70
   3603e:	4770      	bx	lr
   36040:	2001a500 	.word	0x2001a500

00036044 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   36044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36046:	4604      	mov	r4, r0
   36048:	460e      	mov	r6, r1
	__asm__ volatile(
   3604a:	f04f 0320 	mov.w	r3, #32
   3604e:	f3ef 8711 	mrs	r7, BASEPRI
   36052:	f383 8812 	msr	BASEPRI_MAX, r3
   36056:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   3605a:	f002 fb95 	bl	38788 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   3605e:	2200      	movs	r2, #0
   36060:	2c04      	cmp	r4, #4
   36062:	bf98      	it	ls
   36064:	4b1d      	ldrls	r3, [pc, #116]	; (360dc <z_fatal_error+0x98>)
   36066:	4605      	mov	r5, r0
	switch (reason) {
   36068:	bf94      	ite	ls
   3606a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   3606e:	4b1c      	ldrhi	r3, [pc, #112]	; (360e0 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   36070:	9200      	str	r2, [sp, #0]
   36072:	2145      	movs	r1, #69	; 0x45
   36074:	4622      	mov	r2, r4
   36076:	481b      	ldr	r0, [pc, #108]	; (360e4 <z_fatal_error+0xa0>)
   36078:	f006 fe29 	bl	3ccce <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   3607c:	b13e      	cbz	r6, 3608e <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   3607e:	69f3      	ldr	r3, [r6, #28]
   36080:	f3c3 0308 	ubfx	r3, r3, #0, #9
   36084:	b11b      	cbz	r3, 3608e <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   36086:	2145      	movs	r1, #69	; 0x45
   36088:	4817      	ldr	r0, [pc, #92]	; (360e8 <z_fatal_error+0xa4>)
   3608a:	f006 fe20 	bl	3ccce <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   3608e:	b12d      	cbz	r5, 3609c <z_fatal_error+0x58>
   36090:	4628      	mov	r0, r5
   36092:	f00b f859 	bl	41148 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   36096:	b108      	cbz	r0, 3609c <z_fatal_error+0x58>
   36098:	7803      	ldrb	r3, [r0, #0]
   3609a:	b903      	cbnz	r3, 3609e <z_fatal_error+0x5a>
		thread_name = "unknown";
   3609c:	4813      	ldr	r0, [pc, #76]	; (360ec <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   3609e:	4603      	mov	r3, r0
   360a0:	462a      	mov	r2, r5
   360a2:	2145      	movs	r1, #69	; 0x45
   360a4:	4812      	ldr	r0, [pc, #72]	; (360f0 <z_fatal_error+0xac>)
   360a6:	f006 fe12 	bl	3ccce <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   360aa:	4631      	mov	r1, r6
   360ac:	4620      	mov	r0, r4
   360ae:	f7f2 fd07 	bl	28ac0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   360b2:	2c04      	cmp	r4, #4
   360b4:	d108      	bne.n	360c8 <z_fatal_error+0x84>
   360b6:	490f      	ldr	r1, [pc, #60]	; (360f4 <z_fatal_error+0xb0>)
   360b8:	480f      	ldr	r0, [pc, #60]	; (360f8 <z_fatal_error+0xb4>)
   360ba:	228f      	movs	r2, #143	; 0x8f
   360bc:	f006 fdcd 	bl	3cc5a <assert_print>
   360c0:	218f      	movs	r1, #143	; 0x8f
   360c2:	480c      	ldr	r0, [pc, #48]	; (360f4 <z_fatal_error+0xb0>)
   360c4:	f006 fdc2 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   360c8:	f387 8811 	msr	BASEPRI, r7
   360cc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   360d0:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   360d2:	b003      	add	sp, #12
   360d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   360d8:	f7ed ba1c 	b.w	23514 <z_impl_k_thread_abort>
   360dc:	000435bc 	.word	0x000435bc
   360e0:	0004bb97 	.word	0x0004bb97
   360e4:	0004bbad 	.word	0x0004bbad
   360e8:	0004bbda 	.word	0x0004bbda
   360ec:	0004bba5 	.word	0x0004bba5
   360f0:	0004bc00 	.word	0x0004bc00
   360f4:	0004bc1d 	.word	0x0004bc1d
   360f8:	00044263 	.word	0x00044263

000360fc <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   360fc:	2201      	movs	r2, #1
{
   360fe:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   36100:	4b09      	ldr	r3, [pc, #36]	; (36128 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   36102:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   36104:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   36106:	f7ff ff4d 	bl	35fa4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   3610a:	f003 fc87 	bl	39a1c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   3610e:	2003      	movs	r0, #3
   36110:	f7ff ff48 	bl	35fa4 <z_sys_init_run_level>

	z_init_static_threads();
   36114:	f000 fa74 	bl	36600 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   36118:	f7e9 ff62 	bl	1ffe0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   3611c:	4a03      	ldr	r2, [pc, #12]	; (3612c <bg_thread_main+0x30>)
   3611e:	7b13      	ldrb	r3, [r2, #12]
   36120:	f023 0301 	bic.w	r3, r3, #1
   36124:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   36126:	bd08      	pop	{r3, pc}
   36128:	2001d3cc 	.word	0x2001d3cc
   3612c:	20018ed0 	.word	0x20018ed0

00036130 <z_bss_zero>:
{
   36130:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   36132:	4803      	ldr	r0, [pc, #12]	; (36140 <z_bss_zero+0x10>)
   36134:	4a03      	ldr	r2, [pc, #12]	; (36144 <z_bss_zero+0x14>)
   36136:	2100      	movs	r1, #0
   36138:	1a12      	subs	r2, r2, r0
   3613a:	f00a ffe5 	bl	41108 <z_early_memset>
}
   3613e:	bd08      	pop	{r3, pc}
   36140:	20015150 	.word	0x20015150
   36144:	2001d3d0 	.word	0x2001d3d0

00036148 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   36148:	23d0      	movs	r3, #208	; 0xd0
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   3614a:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   3614c:	4e13      	ldr	r6, [pc, #76]	; (3619c <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   3614e:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   36150:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   36154:	2300      	movs	r3, #0
{
   36156:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   36158:	e9cd 2304 	strd	r2, r3, [sp, #16]
   3615c:	220f      	movs	r2, #15
   3615e:	9301      	str	r3, [sp, #4]
   36160:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   36164:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   36166:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   3616a:	4d0d      	ldr	r5, [pc, #52]	; (361a0 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   3616c:	490d      	ldr	r1, [pc, #52]	; (361a4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   3616e:	fb03 5500 	mla	r5, r3, r0, r5
{
   36172:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   36174:	fb02 1100 	mla	r1, r2, r0, r1
   36178:	4b0b      	ldr	r3, [pc, #44]	; (361a8 <z_init_cpu+0x60>)
   3617a:	4630      	mov	r0, r6
   3617c:	9500      	str	r5, [sp, #0]
   3617e:	f000 f9a1 	bl	364c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   36182:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   36184:	4809      	ldr	r0, [pc, #36]	; (361ac <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   36186:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   36188:	3401      	adds	r4, #1
   3618a:	f023 0304 	bic.w	r3, r3, #4
   3618e:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   36192:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   36194:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   36196:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   36198:	b006      	add	sp, #24
   3619a:	bd70      	pop	{r4, r5, r6, pc}
   3619c:	20018e00 	.word	0x20018e00
   361a0:	2001a500 	.word	0x2001a500
   361a4:	20021a00 	.word	0x20021a00
   361a8:	00036745 	.word	0x00036745
   361ac:	20021b40 	.word	0x20021b40

000361b0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   361b0:	b500      	push	{lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   361b2:	4b2e      	ldr	r3, [pc, #184]	; (3626c <z_cstart+0xbc>)
   361b4:	b0bd      	sub	sp, #244	; 0xf4
	uint32_t msp =
   361b6:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   361ba:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   361be:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   361c2:	2400      	movs	r4, #0
   361c4:	23e0      	movs	r3, #224	; 0xe0
   361c6:	4d2a      	ldr	r5, [pc, #168]	; (36270 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   361c8:	4e2a      	ldr	r6, [pc, #168]	; (36274 <z_cstart+0xc4>)
   361ca:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   361ce:	77ec      	strb	r4, [r5, #31]
   361d0:	762c      	strb	r4, [r5, #24]
   361d2:	766c      	strb	r4, [r5, #25]
   361d4:	76ac      	strb	r4, [r5, #26]
   361d6:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   361da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   361dc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   361e0:	626b      	str	r3, [r5, #36]	; 0x24
   361e2:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   361e6:	f7ed f8d3 	bl	23390 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   361ea:	f7ec fcbb 	bl	22b64 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   361ee:	f04f 33ff 	mov.w	r3, #4294967295
   361f2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   361f4:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   361f6:	f7ed fb61 	bl	238bc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   361fa:	f7ed f9a1 	bl	23540 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   361fe:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   36202:	ad08      	add	r5, sp, #32
   36204:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   36206:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	dummy_thread->stack_info.size = 0U;
   3620a:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
	k_thread_system_pool_assign(dummy_thread);
   3620e:	f003 fbe3 	bl	399d8 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   36212:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   36214:	f00a ff6d 	bl	410f2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   36218:	4620      	mov	r0, r4
   3621a:	f7ff fec3 	bl	35fa4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   3621e:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   36220:	4d15      	ldr	r5, [pc, #84]	; (36278 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   36222:	f7ff febf 	bl	35fa4 <z_sys_init_run_level>
	z_sched_init();
   36226:	f002 f965 	bl	384f4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3622a:	4b14      	ldr	r3, [pc, #80]	; (3627c <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
   3622c:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3622e:	9305      	str	r3, [sp, #20]
   36230:	2301      	movs	r3, #1
   36232:	4e13      	ldr	r6, [pc, #76]	; (36280 <z_cstart+0xd0>)
   36234:	4913      	ldr	r1, [pc, #76]	; (36284 <z_cstart+0xd4>)
   36236:	f44f 6280 	mov.w	r2, #1024	; 0x400
   3623a:	e9cd 4303 	strd	r4, r3, [sp, #12]
   3623e:	4628      	mov	r0, r5
   36240:	4633      	mov	r3, r6
   36242:	e9cd 4401 	strd	r4, r4, [sp, #4]
   36246:	9400      	str	r4, [sp, #0]
   36248:	f000 f93c 	bl	364c4 <z_setup_new_thread>
   3624c:	7b6a      	ldrb	r2, [r5, #13]
   3624e:	9007      	str	r0, [sp, #28]
   36250:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   36254:	4628      	mov	r0, r5
   36256:	736a      	strb	r2, [r5, #13]
   36258:	f001 fe0a 	bl	37e70 <z_ready_thread>
	z_init_cpu(0);
   3625c:	4620      	mov	r0, r4
   3625e:	f7ff ff73 	bl	36148 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   36262:	4632      	mov	r2, r6
   36264:	4628      	mov	r0, r5
   36266:	9907      	ldr	r1, [sp, #28]
   36268:	f7ec fe30 	bl	22ecc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   3626c:	20021b40 	.word	0x20021b40
   36270:	e000ed00 	.word	0xe000ed00
   36274:	2001a500 	.word	0x2001a500
   36278:	20018ed0 	.word	0x20018ed0
   3627c:	0004371c 	.word	0x0004371c
   36280:	000360fd 	.word	0x000360fd
   36284:	20021600 	.word	0x20021600

00036288 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   36288:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   3628a:	4c0c      	ldr	r4, [pc, #48]	; (362bc <statics_init+0x34>)
   3628c:	4d0c      	ldr	r5, [pc, #48]	; (362c0 <statics_init+0x38>)
   3628e:	4e0d      	ldr	r6, [pc, #52]	; (362c4 <statics_init+0x3c>)
   36290:	42ac      	cmp	r4, r5
   36292:	d908      	bls.n	362a6 <statics_init+0x1e>
   36294:	4631      	mov	r1, r6
   36296:	480c      	ldr	r0, [pc, #48]	; (362c8 <statics_init+0x40>)
   36298:	2218      	movs	r2, #24
   3629a:	f006 fcde 	bl	3cc5a <assert_print>
   3629e:	2118      	movs	r1, #24
   362a0:	4630      	mov	r0, r6
   362a2:	f006 fcd3 	bl	3cc4c <assert_post_action>
   362a6:	42ac      	cmp	r4, r5
   362a8:	d301      	bcc.n	362ae <statics_init+0x26>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   362aa:	2000      	movs	r0, #0
   362ac:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   362ae:	4620      	mov	r0, r4
   362b0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   362b4:	f00a ff2c 	bl	41110 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   362b8:	3418      	adds	r4, #24
   362ba:	e7e9      	b.n	36290 <statics_init+0x8>
   362bc:	20014e68 	.word	0x20014e68
   362c0:	20014ec8 	.word	0x20014ec8
   362c4:	0004bc89 	.word	0x0004bc89
   362c8:	00044263 	.word	0x00044263

000362cc <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   362cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   362d0:	b085      	sub	sp, #20
   362d2:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   362d6:	4606      	mov	r6, r0
   362d8:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   362da:	4648      	mov	r0, r9
   362dc:	4639      	mov	r1, r7
{
   362de:	4690      	mov	r8, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   362e0:	f00b f805 	bl	412ee <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   362e4:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   362e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
	__asm__ volatile(
   362ec:	f04f 0320 	mov.w	r3, #32
   362f0:	f3ef 8411 	mrs	r4, BASEPRI
   362f4:	f383 8812 	msr	BASEPRI_MAX, r3
   362f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   362fc:	4628      	mov	r0, r5
   362fe:	f000 f9fb 	bl	366f8 <z_spin_lock_valid>
   36302:	b940      	cbnz	r0, 36316 <k_heap_aligned_alloc+0x4a>
   36304:	4932      	ldr	r1, [pc, #200]	; (363d0 <k_heap_aligned_alloc+0x104>)
   36306:	4833      	ldr	r0, [pc, #204]	; (363d4 <k_heap_aligned_alloc+0x108>)
   36308:	228e      	movs	r2, #142	; 0x8e
   3630a:	f006 fca6 	bl	3cc5a <assert_print>
   3630e:	218e      	movs	r1, #142	; 0x8e
   36310:	482f      	ldr	r0, [pc, #188]	; (363d0 <k_heap_aligned_alloc+0x104>)
   36312:	f006 fc9b 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   36316:	4628      	mov	r0, r5
   36318:	f000 fa0c 	bl	36734 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3631c:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   36320:	b15b      	cbz	r3, 3633a <k_heap_aligned_alloc+0x6e>
   36322:	ea59 0307 	orrs.w	r3, r9, r7
   36326:	d008      	beq.n	3633a <k_heap_aligned_alloc+0x6e>
   36328:	492b      	ldr	r1, [pc, #172]	; (363d8 <k_heap_aligned_alloc+0x10c>)
   3632a:	482a      	ldr	r0, [pc, #168]	; (363d4 <k_heap_aligned_alloc+0x108>)
   3632c:	2249      	movs	r2, #73	; 0x49
   3632e:	f006 fc94 	bl	3cc5a <assert_print>
   36332:	2149      	movs	r1, #73	; 0x49
   36334:	4828      	ldr	r0, [pc, #160]	; (363d8 <k_heap_aligned_alloc+0x10c>)
   36336:	f006 fc89 	bl	3cc4c <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3633a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 363d0 <k_heap_aligned_alloc+0x104>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   3633e:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   36342:	4642      	mov	r2, r8
   36344:	4659      	mov	r1, fp
   36346:	4630      	mov	r0, r6
   36348:	f7eb f81e 	bl	21388 <sys_heap_aligned_alloc>
   3634c:	4607      	mov	r7, r0
		now = sys_clock_tick_get();
   3634e:	f002 fdcf 	bl	38ef0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   36352:	b1a7      	cbz	r7, 3637e <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36354:	4628      	mov	r0, r5
   36356:	f000 f9dd 	bl	36714 <z_spin_unlock_valid>
   3635a:	b940      	cbnz	r0, 3636e <k_heap_aligned_alloc+0xa2>
   3635c:	491c      	ldr	r1, [pc, #112]	; (363d0 <k_heap_aligned_alloc+0x104>)
   3635e:	481d      	ldr	r0, [pc, #116]	; (363d4 <k_heap_aligned_alloc+0x108>)
   36360:	22b9      	movs	r2, #185	; 0xb9
   36362:	f006 fc7a 	bl	3cc5a <assert_print>
   36366:	21b9      	movs	r1, #185	; 0xb9
   36368:	4819      	ldr	r0, [pc, #100]	; (363d0 <k_heap_aligned_alloc+0x104>)
   3636a:	f006 fc6f 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   3636e:	f384 8811 	msr	BASEPRI, r4
   36372:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   36376:	4638      	mov	r0, r7
   36378:	b005      	add	sp, #20
   3637a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   3637e:	9b02      	ldr	r3, [sp, #8]
   36380:	1a18      	subs	r0, r3, r0
   36382:	9b03      	ldr	r3, [sp, #12]
   36384:	eb63 0101 	sbc.w	r1, r3, r1
   36388:	2801      	cmp	r0, #1
   3638a:	f171 0300 	sbcs.w	r3, r1, #0
   3638e:	dbe1      	blt.n	36354 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   36390:	e9cd 0100 	strd	r0, r1, [sp]
   36394:	4652      	mov	r2, sl
   36396:	4621      	mov	r1, r4
   36398:	4628      	mov	r0, r5
   3639a:	f001 ff11 	bl	381c0 <z_pend_curr>
	__asm__ volatile(
   3639e:	f04f 0320 	mov.w	r3, #32
   363a2:	f3ef 8411 	mrs	r4, BASEPRI
   363a6:	f383 8812 	msr	BASEPRI_MAX, r3
   363aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   363ae:	4628      	mov	r0, r5
   363b0:	f000 f9a2 	bl	366f8 <z_spin_lock_valid>
   363b4:	b940      	cbnz	r0, 363c8 <k_heap_aligned_alloc+0xfc>
   363b6:	4649      	mov	r1, r9
   363b8:	4806      	ldr	r0, [pc, #24]	; (363d4 <k_heap_aligned_alloc+0x108>)
   363ba:	228e      	movs	r2, #142	; 0x8e
   363bc:	f006 fc4d 	bl	3cc5a <assert_print>
   363c0:	218e      	movs	r1, #142	; 0x8e
   363c2:	4648      	mov	r0, r9
   363c4:	f006 fc42 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   363c8:	4628      	mov	r0, r5
   363ca:	f000 f9b3 	bl	36734 <z_spin_lock_set_owner>
	return k;
   363ce:	e7b8      	b.n	36342 <k_heap_aligned_alloc+0x76>
   363d0:	0004429d 	.word	0x0004429d
   363d4:	00044263 	.word	0x00044263
   363d8:	0004bc89 	.word	0x0004bc89

000363dc <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   363dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   363de:	4604      	mov	r4, r0
   363e0:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   363e2:	f100 0514 	add.w	r5, r0, #20
   363e6:	f04f 0320 	mov.w	r3, #32
   363ea:	f3ef 8711 	mrs	r7, BASEPRI
   363ee:	f383 8812 	msr	BASEPRI_MAX, r3
   363f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   363f6:	4628      	mov	r0, r5
   363f8:	f000 f97e 	bl	366f8 <z_spin_lock_valid>
   363fc:	b940      	cbnz	r0, 36410 <k_heap_free+0x34>
   363fe:	4916      	ldr	r1, [pc, #88]	; (36458 <k_heap_free+0x7c>)
   36400:	4816      	ldr	r0, [pc, #88]	; (3645c <k_heap_free+0x80>)
   36402:	228e      	movs	r2, #142	; 0x8e
   36404:	f006 fc29 	bl	3cc5a <assert_print>
   36408:	218e      	movs	r1, #142	; 0x8e
   3640a:	4813      	ldr	r0, [pc, #76]	; (36458 <k_heap_free+0x7c>)
   3640c:	f006 fc1e 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   36410:	4628      	mov	r0, r5
   36412:	f000 f98f 	bl	36734 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   36416:	4620      	mov	r0, r4
   36418:	4631      	mov	r1, r6
   3641a:	f7ea ff7d 	bl	21318 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   3641e:	f104 000c 	add.w	r0, r4, #12
   36422:	f00a ff4a 	bl	412ba <z_unpend_all>
   36426:	b128      	cbz	r0, 36434 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   36428:	4639      	mov	r1, r7
   3642a:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   3642c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   36430:	f001 baee 	b.w	37a10 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36434:	4628      	mov	r0, r5
   36436:	f000 f96d 	bl	36714 <z_spin_unlock_valid>
   3643a:	b940      	cbnz	r0, 3644e <k_heap_free+0x72>
   3643c:	4906      	ldr	r1, [pc, #24]	; (36458 <k_heap_free+0x7c>)
   3643e:	4807      	ldr	r0, [pc, #28]	; (3645c <k_heap_free+0x80>)
   36440:	22b9      	movs	r2, #185	; 0xb9
   36442:	f006 fc0a 	bl	3cc5a <assert_print>
   36446:	21b9      	movs	r1, #185	; 0xb9
   36448:	4803      	ldr	r0, [pc, #12]	; (36458 <k_heap_free+0x7c>)
   3644a:	f006 fbff 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   3644e:	f387 8811 	msr	BASEPRI, r7
   36452:	f3bf 8f6f 	isb	sy
}
   36456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36458:	0004429d 	.word	0x0004429d
   3645c:	00044263 	.word	0x00044263

00036460 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   36460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   36462:	4c14      	ldr	r4, [pc, #80]	; (364b4 <init_mem_slab_module+0x54>)
   36464:	4d14      	ldr	r5, [pc, #80]	; (364b8 <init_mem_slab_module+0x58>)
   36466:	4e15      	ldr	r6, [pc, #84]	; (364bc <init_mem_slab_module+0x5c>)
   36468:	42ac      	cmp	r4, r5
   3646a:	d908      	bls.n	3647e <init_mem_slab_module+0x1e>
   3646c:	4631      	mov	r1, r6
   3646e:	4814      	ldr	r0, [pc, #80]	; (364c0 <init_mem_slab_module+0x60>)
   36470:	223d      	movs	r2, #61	; 0x3d
   36472:	f006 fbf2 	bl	3cc5a <assert_print>
   36476:	213d      	movs	r1, #61	; 0x3d
   36478:	4630      	mov	r0, r6
   3647a:	f006 fbe7 	bl	3cc4c <assert_post_action>
   3647e:	42ac      	cmp	r4, r5
   36480:	d301      	bcc.n	36486 <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   36482:	2000      	movs	r0, #0
	return rc;
}
   36484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   36486:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   3648a:	ea42 0301 	orr.w	r3, r2, r1
   3648e:	f013 0303 	ands.w	r3, r3, #3
   36492:	d10b      	bne.n	364ac <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   36494:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   36496:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   36498:	4283      	cmp	r3, r0
   3649a:	d101      	bne.n	364a0 <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3649c:	3420      	adds	r4, #32
   3649e:	e7e3      	b.n	36468 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   364a0:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   364a2:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   364a4:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   364a6:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   364a8:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   364aa:	e7f5      	b.n	36498 <init_mem_slab_module+0x38>
	return rc;
   364ac:	f06f 0015 	mvn.w	r0, #21
   364b0:	e7e8      	b.n	36484 <init_mem_slab_module+0x24>
   364b2:	bf00      	nop
   364b4:	20014e68 	.word	0x20014e68
   364b8:	20014e68 	.word	0x20014e68
   364bc:	0004bcab 	.word	0x0004bcab
   364c0:	00044263 	.word	0x00044263

000364c4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   364c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   364c8:	b085      	sub	sp, #20
   364ca:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   364ce:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   364d0:	f1b9 0f0f 	cmp.w	r9, #15
{
   364d4:	460f      	mov	r7, r1
   364d6:	4615      	mov	r5, r2
   364d8:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   364da:	d130      	bne.n	3653e <z_setup_new_thread+0x7a>
   364dc:	4b20      	ldr	r3, [pc, #128]	; (36560 <z_setup_new_thread+0x9c>)
   364de:	4598      	cmp	r8, r3
   364e0:	d131      	bne.n	36546 <z_setup_new_thread+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   364e2:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   364e6:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   364ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   364ec:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   364ee:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   364f0:	2304      	movs	r3, #4
   364f2:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   364f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   364f6:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   364f8:	9302      	str	r3, [sp, #8]
   364fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   364fc:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   36500:	9301      	str	r3, [sp, #4]
   36502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   36504:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   36506:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3650a:	9300      	str	r3, [sp, #0]
   3650c:	462a      	mov	r2, r5
   3650e:	4643      	mov	r3, r8
   36510:	4639      	mov	r1, r7
   36512:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   36514:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   36518:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   3651a:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   3651e:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   36520:	67e6      	str	r6, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   36522:	f7ec fcb3 	bl	22e8c <arch_new_thread>
	if (!_current) {
   36526:	4b0f      	ldr	r3, [pc, #60]	; (36564 <z_setup_new_thread+0xa0>)
	new_thread->init_data = NULL;
   36528:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   3652a:	689b      	ldr	r3, [r3, #8]
   3652c:	b10b      	cbz	r3, 36532 <z_setup_new_thread+0x6e>
	new_thread->resource_pool = _current->resource_pool;
   3652e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   36532:	4628      	mov	r0, r5
   36534:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   36538:	b005      	add	sp, #20
   3653a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   3653e:	f109 0310 	add.w	r3, r9, #16
   36542:	2b1e      	cmp	r3, #30
   36544:	d9cd      	bls.n	364e2 <z_setup_new_thread+0x1e>
   36546:	f240 12ff 	movw	r2, #511	; 0x1ff
   3654a:	4907      	ldr	r1, [pc, #28]	; (36568 <z_setup_new_thread+0xa4>)
   3654c:	4807      	ldr	r0, [pc, #28]	; (3656c <z_setup_new_thread+0xa8>)
   3654e:	f006 fb84 	bl	3cc5a <assert_print>
   36552:	f240 11ff 	movw	r1, #511	; 0x1ff
   36556:	4804      	ldr	r0, [pc, #16]	; (36568 <z_setup_new_thread+0xa4>)
   36558:	f006 fb78 	bl	3cc4c <assert_post_action>
   3655c:	e7c1      	b.n	364e2 <z_setup_new_thread+0x1e>
   3655e:	bf00      	nop
   36560:	00036745 	.word	0x00036745
   36564:	2001a500 	.word	0x2001a500
   36568:	0004bcd0 	.word	0x0004bcd0
   3656c:	00044263 	.word	0x00044263

00036570 <z_impl_k_thread_create>:
{
   36570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36574:	b088      	sub	sp, #32
   36576:	4604      	mov	r4, r0
   36578:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   3657c:	460f      	mov	r7, r1
   3657e:	4690      	mov	r8, r2
   36580:	f3ef 8205 	mrs	r2, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   36584:	b162      	cbz	r2, 365a0 <z_impl_k_thread_create+0x30>
   36586:	f240 226e 	movw	r2, #622	; 0x26e
   3658a:	491a      	ldr	r1, [pc, #104]	; (365f4 <z_impl_k_thread_create+0x84>)
   3658c:	481a      	ldr	r0, [pc, #104]	; (365f8 <z_impl_k_thread_create+0x88>)
   3658e:	9307      	str	r3, [sp, #28]
   36590:	f006 fb63 	bl	3cc5a <assert_print>
   36594:	f240 216e 	movw	r1, #622	; 0x26e
   36598:	4816      	ldr	r0, [pc, #88]	; (365f4 <z_impl_k_thread_create+0x84>)
   3659a:	f006 fb57 	bl	3cc4c <assert_post_action>
   3659e:	9b07      	ldr	r3, [sp, #28]
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   365a0:	2200      	movs	r2, #0
   365a2:	9205      	str	r2, [sp, #20]
   365a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   365a6:	4639      	mov	r1, r7
   365a8:	9204      	str	r2, [sp, #16]
   365aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
   365ac:	4620      	mov	r0, r4
   365ae:	9203      	str	r2, [sp, #12]
   365b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   365b2:	9202      	str	r2, [sp, #8]
   365b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   365b6:	9201      	str	r2, [sp, #4]
   365b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   365ba:	9200      	str	r2, [sp, #0]
   365bc:	4642      	mov	r2, r8
   365be:	f7ff ff81 	bl	364c4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   365c2:	f1b5 3fff 	cmp.w	r5, #4294967295
   365c6:	bf08      	it	eq
   365c8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   365cc:	d005      	beq.n	365da <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   365ce:	ea55 0306 	orrs.w	r3, r5, r6
   365d2:	d106      	bne.n	365e2 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   365d4:	4620      	mov	r0, r4
   365d6:	f001 fc81 	bl	37edc <z_sched_start>
}
   365da:	4620      	mov	r0, r4
   365dc:	b008      	add	sp, #32
   365de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   365e2:	4632      	mov	r2, r6
   365e4:	462b      	mov	r3, r5
   365e6:	4905      	ldr	r1, [pc, #20]	; (365fc <z_impl_k_thread_create+0x8c>)
   365e8:	f104 0018 	add.w	r0, r4, #24
   365ec:	f002 fa4a 	bl	38a84 <z_add_timeout>
   365f0:	e7f3      	b.n	365da <z_impl_k_thread_create+0x6a>
   365f2:	bf00      	nop
   365f4:	0004bcd0 	.word	0x0004bcd0
   365f8:	00044263 	.word	0x00044263
   365fc:	00037fe5 	.word	0x00037fe5

00036600 <z_init_static_threads>:
{
   36600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36604:	4c37      	ldr	r4, [pc, #220]	; (366e4 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   36606:	4d38      	ldr	r5, [pc, #224]	; (366e8 <z_init_static_threads+0xe8>)
   36608:	4f38      	ldr	r7, [pc, #224]	; (366ec <z_init_static_threads+0xec>)
{
   3660a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   3660c:	42ac      	cmp	r4, r5
   3660e:	4626      	mov	r6, r4
   36610:	d90a      	bls.n	36628 <z_init_static_threads+0x28>
   36612:	4639      	mov	r1, r7
   36614:	4836      	ldr	r0, [pc, #216]	; (366f0 <z_init_static_threads+0xf0>)
   36616:	f240 22d5 	movw	r2, #725	; 0x2d5
   3661a:	f006 fb1e 	bl	3cc5a <assert_print>
   3661e:	f240 21d5 	movw	r1, #725	; 0x2d5
   36622:	4638      	mov	r0, r7
   36624:	f006 fb12 	bl	3cc4c <assert_post_action>
   36628:	42ae      	cmp	r6, r5
   3662a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   3662e:	d31b      	bcc.n	36668 <z_init_static_threads+0x68>
	k_sched_lock();
   36630:	f001 fa24 	bl	37a7c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   36634:	4c2b      	ldr	r4, [pc, #172]	; (366e4 <z_init_static_threads+0xe4>)
   36636:	4e2d      	ldr	r6, [pc, #180]	; (366ec <z_init_static_threads+0xec>)
   36638:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 366f0 <z_init_static_threads+0xf0>
   3663c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 366f4 <z_init_static_threads+0xf4>
   36640:	42ac      	cmp	r4, r5
   36642:	d90a      	bls.n	3665a <z_init_static_threads+0x5a>
   36644:	4631      	mov	r1, r6
   36646:	4640      	mov	r0, r8
   36648:	f44f 723d 	mov.w	r2, #756	; 0x2f4
   3664c:	f006 fb05 	bl	3cc5a <assert_print>
   36650:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   36654:	4630      	mov	r0, r6
   36656:	f006 faf9 	bl	3cc4c <assert_post_action>
   3665a:	42ac      	cmp	r4, r5
   3665c:	d320      	bcc.n	366a0 <z_init_static_threads+0xa0>
}
   3665e:	b007      	add	sp, #28
   36660:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   36664:	f001 beac 	b.w	383c0 <k_sched_unlock>
		z_setup_new_thread(
   36668:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3666c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   36670:	9305      	str	r3, [sp, #20]
   36672:	f854 3c10 	ldr.w	r3, [r4, #-16]
   36676:	9304      	str	r3, [sp, #16]
   36678:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3667c:	9303      	str	r3, [sp, #12]
   3667e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   36682:	9302      	str	r3, [sp, #8]
   36684:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   36688:	9301      	str	r3, [sp, #4]
   3668a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   3668e:	9300      	str	r3, [sp, #0]
   36690:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   36694:	f7ff ff16 	bl	364c4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   36698:	f854 3c30 	ldr.w	r3, [r4, #-48]
   3669c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   3669e:	e7b5      	b.n	3660c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   366a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   366a2:	1c5a      	adds	r2, r3, #1
   366a4:	d00f      	beq.n	366c6 <z_init_static_threads+0xc6>
   366a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   366aa:	f240 30e7 	movw	r0, #999	; 0x3e7
   366ae:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   366b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   366b4:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   366b8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   366bc:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   366be:	d104      	bne.n	366ca <z_init_static_threads+0xca>
	z_sched_start(thread);
   366c0:	4638      	mov	r0, r7
   366c2:	f001 fc0b 	bl	37edc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   366c6:	3430      	adds	r4, #48	; 0x30
   366c8:	e7ba      	b.n	36640 <z_init_static_threads+0x40>
   366ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   366ce:	2300      	movs	r3, #0
   366d0:	f7e6 fc0a 	bl	1cee8 <__aeabi_uldivmod>
   366d4:	4602      	mov	r2, r0
   366d6:	460b      	mov	r3, r1
   366d8:	f107 0018 	add.w	r0, r7, #24
   366dc:	4649      	mov	r1, r9
   366de:	f002 f9d1 	bl	38a84 <z_add_timeout>
   366e2:	e7f0      	b.n	366c6 <z_init_static_threads+0xc6>
   366e4:	20014d08 	.word	0x20014d08
   366e8:	20014df8 	.word	0x20014df8
   366ec:	0004bcd0 	.word	0x0004bcd0
   366f0:	00044263 	.word	0x00044263
   366f4:	00037fe5 	.word	0x00037fe5

000366f8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   366f8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   366fa:	b138      	cbz	r0, 3670c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   366fc:	4b04      	ldr	r3, [pc, #16]	; (36710 <z_spin_lock_valid+0x18>)
   366fe:	f000 0003 	and.w	r0, r0, #3
   36702:	7d1b      	ldrb	r3, [r3, #20]
   36704:	1ac0      	subs	r0, r0, r3
   36706:	bf18      	it	ne
   36708:	2001      	movne	r0, #1
   3670a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   3670c:	2001      	movs	r0, #1
}
   3670e:	4770      	bx	lr
   36710:	2001a500 	.word	0x2001a500

00036714 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   36714:	4a06      	ldr	r2, [pc, #24]	; (36730 <z_spin_unlock_valid+0x1c>)
   36716:	7d11      	ldrb	r1, [r2, #20]
   36718:	6893      	ldr	r3, [r2, #8]
   3671a:	6802      	ldr	r2, [r0, #0]
   3671c:	430b      	orrs	r3, r1
   3671e:	429a      	cmp	r2, r3
   36720:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   36724:	bf06      	itte	eq
   36726:	6003      	streq	r3, [r0, #0]
	return true;
   36728:	2001      	moveq	r0, #1
		return false;
   3672a:	4618      	movne	r0, r3
}
   3672c:	4770      	bx	lr
   3672e:	bf00      	nop
   36730:	2001a500 	.word	0x2001a500

00036734 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   36734:	4a02      	ldr	r2, [pc, #8]	; (36740 <z_spin_lock_set_owner+0xc>)
   36736:	7d11      	ldrb	r1, [r2, #20]
   36738:	6893      	ldr	r3, [r2, #8]
   3673a:	430b      	orrs	r3, r1
   3673c:	6003      	str	r3, [r0, #0]
}
   3673e:	4770      	bx	lr
   36740:	2001a500 	.word	0x2001a500

00036744 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   36744:	4c12      	ldr	r4, [pc, #72]	; (36790 <idle+0x4c>)
{
   36746:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   36748:	68a3      	ldr	r3, [r4, #8]
   3674a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   3674e:	2b00      	cmp	r3, #0
   36750:	da08      	bge.n	36764 <idle+0x20>
   36752:	4910      	ldr	r1, [pc, #64]	; (36794 <idle+0x50>)
   36754:	4810      	ldr	r0, [pc, #64]	; (36798 <idle+0x54>)
   36756:	2227      	movs	r2, #39	; 0x27
   36758:	f006 fa7f 	bl	3cc5a <assert_print>
   3675c:	2127      	movs	r1, #39	; 0x27
   3675e:	480d      	ldr	r0, [pc, #52]	; (36794 <idle+0x50>)
   36760:	f006 fa74 	bl	3cc4c <assert_post_action>
   36764:	4d0d      	ldr	r5, [pc, #52]	; (3679c <idle+0x58>)
	__asm__ volatile(
   36766:	f04f 0220 	mov.w	r2, #32
   3676a:	f3ef 8311 	mrs	r3, BASEPRI
   3676e:	f382 8812 	msr	BASEPRI_MAX, r2
   36772:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   36776:	f002 faa9 	bl	38ccc <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   3677a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   3677c:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   3677e:	b913      	cbnz	r3, 36786 <idle+0x42>
	arch_cpu_idle();
   36780:	f7ec f9f6 	bl	22b70 <arch_cpu_idle>
}
   36784:	e7ef      	b.n	36766 <idle+0x22>
   36786:	f7ec f91b 	bl	229c0 <pm_system_suspend>
   3678a:	2800      	cmp	r0, #0
   3678c:	d1eb      	bne.n	36766 <idle+0x22>
   3678e:	e7f7      	b.n	36780 <idle+0x3c>
   36790:	2001a500 	.word	0x2001a500
   36794:	0004bcf3 	.word	0x0004bcf3
   36798:	00044263 	.word	0x00044263
   3679c:	2001d3cc 	.word	0x2001d3cc

000367a0 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   367a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   367a4:	4604      	mov	r4, r0
   367a6:	4689      	mov	r9, r1
   367a8:	4690      	mov	r8, r2
   367aa:	461d      	mov	r5, r3
   367ac:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   367b0:	b15b      	cbz	r3, 367ca <z_impl_k_msgq_put+0x2a>
   367b2:	ea52 0305 	orrs.w	r3, r2, r5
   367b6:	d008      	beq.n	367ca <z_impl_k_msgq_put+0x2a>
   367b8:	493d      	ldr	r1, [pc, #244]	; (368b0 <z_impl_k_msgq_put+0x110>)
   367ba:	483e      	ldr	r0, [pc, #248]	; (368b4 <z_impl_k_msgq_put+0x114>)
   367bc:	2276      	movs	r2, #118	; 0x76
   367be:	f006 fa4c 	bl	3cc5a <assert_print>
   367c2:	2176      	movs	r1, #118	; 0x76
   367c4:	483a      	ldr	r0, [pc, #232]	; (368b0 <z_impl_k_msgq_put+0x110>)
   367c6:	f006 fa41 	bl	3cc4c <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   367ca:	f104 0608 	add.w	r6, r4, #8
   367ce:	f04f 0320 	mov.w	r3, #32
   367d2:	f3ef 8711 	mrs	r7, BASEPRI
   367d6:	f383 8812 	msr	BASEPRI_MAX, r3
   367da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   367de:	4630      	mov	r0, r6
   367e0:	f7ff ff8a 	bl	366f8 <z_spin_lock_valid>
   367e4:	b940      	cbnz	r0, 367f8 <z_impl_k_msgq_put+0x58>
   367e6:	4934      	ldr	r1, [pc, #208]	; (368b8 <z_impl_k_msgq_put+0x118>)
   367e8:	4832      	ldr	r0, [pc, #200]	; (368b4 <z_impl_k_msgq_put+0x114>)
   367ea:	228e      	movs	r2, #142	; 0x8e
   367ec:	f006 fa35 	bl	3cc5a <assert_print>
   367f0:	218e      	movs	r1, #142	; 0x8e
   367f2:	4831      	ldr	r0, [pc, #196]	; (368b8 <z_impl_k_msgq_put+0x118>)
   367f4:	f006 fa2a 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   367f8:	4630      	mov	r0, r6
   367fa:	f7ff ff9b 	bl	36734 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   367fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
   36800:	6923      	ldr	r3, [r4, #16]
   36802:	429a      	cmp	r2, r3
   36804:	d240      	bcs.n	36888 <z_impl_k_msgq_put+0xe8>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   36806:	4620      	mov	r0, r4
   36808:	f001 fe36 	bl	38478 <z_unpend_first_thread>
   3680c:	4649      	mov	r1, r9
		if (pending_thread != NULL) {
   3680e:	4605      	mov	r5, r0
   36810:	68e2      	ldr	r2, [r4, #12]
   36812:	b180      	cbz	r0, 36836 <z_impl_k_msgq_put+0x96>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   36814:	2400      	movs	r4, #0
   36816:	6940      	ldr	r0, [r0, #20]
   36818:	f00a fed3 	bl	415c2 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   3681c:	4628      	mov	r0, r5
   3681e:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
   36822:	f001 fb25 	bl	37e70 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   36826:	4639      	mov	r1, r7
   36828:	4630      	mov	r0, r6
   3682a:	f001 f8f1 	bl	37a10 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3682e:	4620      	mov	r0, r4
   36830:	b003      	add	sp, #12
   36832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   36836:	6a20      	ldr	r0, [r4, #32]
   36838:	f00a fec3 	bl	415c2 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   3683c:	6a23      	ldr	r3, [r4, #32]
   3683e:	68e2      	ldr	r2, [r4, #12]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   36840:	f104 0028 	add.w	r0, r4, #40	; 0x28
			msgq->write_ptr += msgq->msg_size;
   36844:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   36846:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   36848:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3684a:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3684c:	bf08      	it	eq
   3684e:	6963      	ldreq	r3, [r4, #20]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   36850:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   36854:	bf08      	it	eq
   36856:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   36858:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3685a:	3301      	adds	r3, #1
   3685c:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
   3685e:	f00a fdff 	bl	41460 <z_handle_obj_poll_events>
		result = 0;
   36862:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36864:	4630      	mov	r0, r6
   36866:	f7ff ff55 	bl	36714 <z_spin_unlock_valid>
   3686a:	b940      	cbnz	r0, 3687e <z_impl_k_msgq_put+0xde>
   3686c:	4912      	ldr	r1, [pc, #72]	; (368b8 <z_impl_k_msgq_put+0x118>)
   3686e:	4811      	ldr	r0, [pc, #68]	; (368b4 <z_impl_k_msgq_put+0x114>)
   36870:	22b9      	movs	r2, #185	; 0xb9
   36872:	f006 f9f2 	bl	3cc5a <assert_print>
   36876:	21b9      	movs	r1, #185	; 0xb9
   36878:	480f      	ldr	r0, [pc, #60]	; (368b8 <z_impl_k_msgq_put+0x118>)
   3687a:	f006 f9e7 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   3687e:	f387 8811 	msr	BASEPRI, r7
   36882:	f3bf 8f6f 	isb	sy
	return result;
   36886:	e7d2      	b.n	3682e <z_impl_k_msgq_put+0x8e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36888:	ea58 0305 	orrs.w	r3, r8, r5
   3688c:	d00c      	beq.n	368a8 <z_impl_k_msgq_put+0x108>
		_current->base.swap_data = (void *) data;
   3688e:	4b0b      	ldr	r3, [pc, #44]	; (368bc <z_impl_k_msgq_put+0x11c>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36890:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   36892:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36894:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   36896:	f8c3 9014 	str.w	r9, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3689a:	4630      	mov	r0, r6
   3689c:	e9cd 8500 	strd	r8, r5, [sp]
   368a0:	f001 fc8e 	bl	381c0 <z_pend_curr>
   368a4:	4604      	mov	r4, r0
		return result;
   368a6:	e7c2      	b.n	3682e <z_impl_k_msgq_put+0x8e>
		result = -ENOMSG;
   368a8:	f06f 0422 	mvn.w	r4, #34	; 0x22
   368ac:	e7da      	b.n	36864 <z_impl_k_msgq_put+0xc4>
   368ae:	bf00      	nop
   368b0:	0004bd14 	.word	0x0004bd14
   368b4:	00044263 	.word	0x00044263
   368b8:	0004429d 	.word	0x0004429d
   368bc:	2001a500 	.word	0x2001a500

000368c0 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   368c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   368c4:	4604      	mov	r4, r0
   368c6:	4688      	mov	r8, r1
   368c8:	4617      	mov	r7, r2
   368ca:	461d      	mov	r5, r3
   368cc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   368d0:	b15b      	cbz	r3, 368ea <z_impl_k_msgq_get+0x2a>
   368d2:	ea52 0305 	orrs.w	r3, r2, r5
   368d6:	d008      	beq.n	368ea <z_impl_k_msgq_get+0x2a>
   368d8:	4940      	ldr	r1, [pc, #256]	; (369dc <z_impl_k_msgq_get+0x11c>)
   368da:	4841      	ldr	r0, [pc, #260]	; (369e0 <z_impl_k_msgq_get+0x120>)
   368dc:	22d0      	movs	r2, #208	; 0xd0
   368de:	f006 f9bc 	bl	3cc5a <assert_print>
   368e2:	21d0      	movs	r1, #208	; 0xd0
   368e4:	483d      	ldr	r0, [pc, #244]	; (369dc <z_impl_k_msgq_get+0x11c>)
   368e6:	f006 f9b1 	bl	3cc4c <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   368ea:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   368ee:	f04f 0320 	mov.w	r3, #32
   368f2:	f3ef 8911 	mrs	r9, BASEPRI
   368f6:	f383 8812 	msr	BASEPRI_MAX, r3
   368fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   368fe:	4630      	mov	r0, r6
   36900:	f7ff fefa 	bl	366f8 <z_spin_lock_valid>
   36904:	b940      	cbnz	r0, 36918 <z_impl_k_msgq_get+0x58>
   36906:	4937      	ldr	r1, [pc, #220]	; (369e4 <z_impl_k_msgq_get+0x124>)
   36908:	4835      	ldr	r0, [pc, #212]	; (369e0 <z_impl_k_msgq_get+0x120>)
   3690a:	228e      	movs	r2, #142	; 0x8e
   3690c:	f006 f9a5 	bl	3cc5a <assert_print>
   36910:	218e      	movs	r1, #142	; 0x8e
   36912:	4834      	ldr	r0, [pc, #208]	; (369e4 <z_impl_k_msgq_get+0x124>)
   36914:	f006 f99a 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   36918:	4630      	mov	r0, r6
   3691a:	f7ff ff0b 	bl	36734 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   3691e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36920:	2b00      	cmp	r3, #0
   36922:	d036      	beq.n	36992 <z_impl_k_msgq_get+0xd2>
   36924:	68e2      	ldr	r2, [r4, #12]
   36926:	69e1      	ldr	r1, [r4, #28]
   36928:	4640      	mov	r0, r8
   3692a:	f00a fe4a 	bl	415c2 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   3692e:	69e3      	ldr	r3, [r4, #28]
   36930:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   36932:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   36934:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   36936:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   36938:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   3693a:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   3693c:	bf04      	itt	eq
   3693e:	6963      	ldreq	r3, [r4, #20]
   36940:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   36942:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36944:	3b01      	subs	r3, #1
   36946:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   36948:	f001 fd96 	bl	38478 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   3694c:	4605      	mov	r5, r0
   3694e:	2800      	cmp	r0, #0
   36950:	d031      	beq.n	369b6 <z_impl_k_msgq_get+0xf6>
   36952:	6941      	ldr	r1, [r0, #20]
   36954:	68e2      	ldr	r2, [r4, #12]
   36956:	6a20      	ldr	r0, [r4, #32]
   36958:	f00a fe33 	bl	415c2 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   3695c:	6a23      	ldr	r3, [r4, #32]
   3695e:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   36960:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   36962:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   36964:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   36966:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   36968:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3696a:	bf04      	itt	eq
   3696c:	6963      	ldreq	r3, [r4, #20]
   3696e:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   36970:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36972:	3301      	adds	r3, #1
   36974:	6263      	str	r3, [r4, #36]	; 0x24
   36976:	2400      	movs	r4, #0
   36978:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
			z_ready_thread(pending_thread);
   3697c:	f001 fa78 	bl	37e70 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   36980:	4649      	mov	r1, r9
   36982:	4630      	mov	r0, r6
   36984:	f001 f844 	bl	37a10 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   36988:	4625      	mov	r5, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3698a:	4628      	mov	r0, r5
   3698c:	b003      	add	sp, #12
   3698e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36992:	ea57 0305 	orrs.w	r3, r7, r5
   36996:	d00c      	beq.n	369b2 <z_impl_k_msgq_get+0xf2>
		_current->base.swap_data = data;
   36998:	4b13      	ldr	r3, [pc, #76]	; (369e8 <z_impl_k_msgq_get+0x128>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3699a:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   3699c:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3699e:	4649      	mov	r1, r9
		_current->base.swap_data = data;
   369a0:	f8c3 8014 	str.w	r8, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   369a4:	4630      	mov	r0, r6
   369a6:	e9cd 7500 	strd	r7, r5, [sp]
   369aa:	f001 fc09 	bl	381c0 <z_pend_curr>
   369ae:	4605      	mov	r5, r0
		return result;
   369b0:	e7eb      	b.n	3698a <z_impl_k_msgq_get+0xca>
		result = -ENOMSG;
   369b2:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   369b6:	4630      	mov	r0, r6
   369b8:	f7ff feac 	bl	36714 <z_spin_unlock_valid>
   369bc:	b940      	cbnz	r0, 369d0 <z_impl_k_msgq_get+0x110>
   369be:	4909      	ldr	r1, [pc, #36]	; (369e4 <z_impl_k_msgq_get+0x124>)
   369c0:	4807      	ldr	r0, [pc, #28]	; (369e0 <z_impl_k_msgq_get+0x120>)
   369c2:	22b9      	movs	r2, #185	; 0xb9
   369c4:	f006 f949 	bl	3cc5a <assert_print>
   369c8:	21b9      	movs	r1, #185	; 0xb9
   369ca:	4806      	ldr	r0, [pc, #24]	; (369e4 <z_impl_k_msgq_get+0x124>)
   369cc:	f006 f93e 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   369d0:	f389 8811 	msr	BASEPRI, r9
   369d4:	f3bf 8f6f 	isb	sy
	return result;
   369d8:	e7d7      	b.n	3698a <z_impl_k_msgq_get+0xca>
   369da:	bf00      	nop
   369dc:	0004bd14 	.word	0x0004bd14
   369e0:	00044263 	.word	0x00044263
   369e4:	0004429d 	.word	0x0004429d
   369e8:	2001a500 	.word	0x2001a500

000369ec <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   369ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   369f0:	4604      	mov	r4, r0
   369f2:	4617      	mov	r7, r2
   369f4:	461e      	mov	r6, r3
   369f6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   369fa:	b143      	cbz	r3, 36a0e <z_impl_k_mutex_lock+0x22>
   369fc:	495f      	ldr	r1, [pc, #380]	; (36b7c <z_impl_k_mutex_lock+0x190>)
   369fe:	4860      	ldr	r0, [pc, #384]	; (36b80 <z_impl_k_mutex_lock+0x194>)
   36a00:	2265      	movs	r2, #101	; 0x65
   36a02:	f006 f92a 	bl	3cc5a <assert_print>
   36a06:	2165      	movs	r1, #101	; 0x65
   36a08:	485c      	ldr	r0, [pc, #368]	; (36b7c <z_impl_k_mutex_lock+0x190>)
   36a0a:	f006 f91f 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   36a0e:	f04f 0320 	mov.w	r3, #32
   36a12:	f3ef 8811 	mrs	r8, BASEPRI
   36a16:	f383 8812 	msr	BASEPRI_MAX, r3
   36a1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36a1e:	4859      	ldr	r0, [pc, #356]	; (36b84 <z_impl_k_mutex_lock+0x198>)
   36a20:	f7ff fe6a 	bl	366f8 <z_spin_lock_valid>
   36a24:	b940      	cbnz	r0, 36a38 <z_impl_k_mutex_lock+0x4c>
   36a26:	4958      	ldr	r1, [pc, #352]	; (36b88 <z_impl_k_mutex_lock+0x19c>)
   36a28:	4855      	ldr	r0, [pc, #340]	; (36b80 <z_impl_k_mutex_lock+0x194>)
   36a2a:	228e      	movs	r2, #142	; 0x8e
   36a2c:	f006 f915 	bl	3cc5a <assert_print>
   36a30:	218e      	movs	r1, #142	; 0x8e
   36a32:	4855      	ldr	r0, [pc, #340]	; (36b88 <z_impl_k_mutex_lock+0x19c>)
   36a34:	f006 f90a 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   36a38:	4852      	ldr	r0, [pc, #328]	; (36b84 <z_impl_k_mutex_lock+0x198>)
   36a3a:	f7ff fe7b 	bl	36734 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   36a3e:	68e3      	ldr	r3, [r4, #12]
   36a40:	4a52      	ldr	r2, [pc, #328]	; (36b8c <z_impl_k_mutex_lock+0x1a0>)
   36a42:	b1d3      	cbz	r3, 36a7a <z_impl_k_mutex_lock+0x8e>
   36a44:	68a0      	ldr	r0, [r4, #8]
   36a46:	6891      	ldr	r1, [r2, #8]
   36a48:	4288      	cmp	r0, r1
   36a4a:	d033      	beq.n	36ab4 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   36a4c:	ea57 0306 	orrs.w	r3, r7, r6
   36a50:	d132      	bne.n	36ab8 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36a52:	484c      	ldr	r0, [pc, #304]	; (36b84 <z_impl_k_mutex_lock+0x198>)
   36a54:	f7ff fe5e 	bl	36714 <z_spin_unlock_valid>
   36a58:	b940      	cbnz	r0, 36a6c <z_impl_k_mutex_lock+0x80>
   36a5a:	494b      	ldr	r1, [pc, #300]	; (36b88 <z_impl_k_mutex_lock+0x19c>)
   36a5c:	4848      	ldr	r0, [pc, #288]	; (36b80 <z_impl_k_mutex_lock+0x194>)
   36a5e:	22b9      	movs	r2, #185	; 0xb9
   36a60:	f006 f8fb 	bl	3cc5a <assert_print>
   36a64:	21b9      	movs	r1, #185	; 0xb9
   36a66:	4848      	ldr	r0, [pc, #288]	; (36b88 <z_impl_k_mutex_lock+0x19c>)
   36a68:	f006 f8f0 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   36a6c:	f388 8811 	msr	BASEPRI, r8
   36a70:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   36a74:	f06f 000f 	mvn.w	r0, #15
   36a78:	e019      	b.n	36aae <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   36a7a:	6891      	ldr	r1, [r2, #8]
   36a7c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   36a80:	3301      	adds	r3, #1
   36a82:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   36a84:	6893      	ldr	r3, [r2, #8]
   36a86:	483f      	ldr	r0, [pc, #252]	; (36b84 <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   36a88:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   36a8a:	60a3      	str	r3, [r4, #8]
   36a8c:	f7ff fe42 	bl	36714 <z_spin_unlock_valid>
   36a90:	b940      	cbnz	r0, 36aa4 <z_impl_k_mutex_lock+0xb8>
   36a92:	493d      	ldr	r1, [pc, #244]	; (36b88 <z_impl_k_mutex_lock+0x19c>)
   36a94:	483a      	ldr	r0, [pc, #232]	; (36b80 <z_impl_k_mutex_lock+0x194>)
   36a96:	22b9      	movs	r2, #185	; 0xb9
   36a98:	f006 f8df 	bl	3cc5a <assert_print>
   36a9c:	21b9      	movs	r1, #185	; 0xb9
   36a9e:	483a      	ldr	r0, [pc, #232]	; (36b88 <z_impl_k_mutex_lock+0x19c>)
   36aa0:	f006 f8d4 	bl	3cc4c <assert_post_action>
   36aa4:	f388 8811 	msr	BASEPRI, r8
   36aa8:	f3bf 8f6f 	isb	sy
		return 0;
   36aac:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   36aae:	b002      	add	sp, #8
   36ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   36ab4:	6921      	ldr	r1, [r4, #16]
   36ab6:	e7e3      	b.n	36a80 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   36ab8:	f991 100e 	ldrsb.w	r1, [r1, #14]
   36abc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   36ac0:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   36ac4:	4299      	cmp	r1, r3
   36ac6:	bfa8      	it	ge
   36ac8:	4619      	movge	r1, r3
   36aca:	4291      	cmp	r1, r2
   36acc:	bfb8      	it	lt
   36ace:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   36ad0:	428b      	cmp	r3, r1
   36ad2:	dd3e      	ble.n	36b52 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   36ad4:	f00a fb43 	bl	4115e <adjust_owner_prio.isra.0>
   36ad8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   36ada:	4622      	mov	r2, r4
   36adc:	4641      	mov	r1, r8
   36ade:	e9cd 7600 	strd	r7, r6, [sp]
   36ae2:	4828      	ldr	r0, [pc, #160]	; (36b84 <z_impl_k_mutex_lock+0x198>)
   36ae4:	f001 fb6c 	bl	381c0 <z_pend_curr>
	if (got_mutex == 0) {
   36ae8:	2800      	cmp	r0, #0
   36aea:	d0e0      	beq.n	36aae <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   36aec:	f04f 0320 	mov.w	r3, #32
   36af0:	f3ef 8611 	mrs	r6, BASEPRI
   36af4:	f383 8812 	msr	BASEPRI_MAX, r3
   36af8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36afc:	4821      	ldr	r0, [pc, #132]	; (36b84 <z_impl_k_mutex_lock+0x198>)
   36afe:	f7ff fdfb 	bl	366f8 <z_spin_lock_valid>
   36b02:	b940      	cbnz	r0, 36b16 <z_impl_k_mutex_lock+0x12a>
   36b04:	4920      	ldr	r1, [pc, #128]	; (36b88 <z_impl_k_mutex_lock+0x19c>)
   36b06:	481e      	ldr	r0, [pc, #120]	; (36b80 <z_impl_k_mutex_lock+0x194>)
   36b08:	228e      	movs	r2, #142	; 0x8e
   36b0a:	f006 f8a6 	bl	3cc5a <assert_print>
   36b0e:	218e      	movs	r1, #142	; 0x8e
   36b10:	481d      	ldr	r0, [pc, #116]	; (36b88 <z_impl_k_mutex_lock+0x19c>)
   36b12:	f006 f89b 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   36b16:	481b      	ldr	r0, [pc, #108]	; (36b84 <z_impl_k_mutex_lock+0x198>)
   36b18:	f7ff fe0c 	bl	36734 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   36b1c:	6823      	ldr	r3, [r4, #0]
   36b1e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36b20:	429c      	cmp	r4, r3
   36b22:	d00a      	beq.n	36b3a <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   36b24:	b14b      	cbz	r3, 36b3a <z_impl_k_mutex_lock+0x14e>
   36b26:	f993 300e 	ldrsb.w	r3, [r3, #14]
   36b2a:	4299      	cmp	r1, r3
   36b2c:	bfa8      	it	ge
   36b2e:	4619      	movge	r1, r3
   36b30:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   36b34:	4299      	cmp	r1, r3
   36b36:	bfb8      	it	lt
   36b38:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   36b3a:	68a0      	ldr	r0, [r4, #8]
   36b3c:	f00a fb0f 	bl	4115e <adjust_owner_prio.isra.0>
   36b40:	b900      	cbnz	r0, 36b44 <z_impl_k_mutex_lock+0x158>
	if (resched) {
   36b42:	b145      	cbz	r5, 36b56 <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   36b44:	4631      	mov	r1, r6
   36b46:	480f      	ldr	r0, [pc, #60]	; (36b84 <z_impl_k_mutex_lock+0x198>)
   36b48:	f000 ff62 	bl	37a10 <z_reschedule>
	return -EAGAIN;
   36b4c:	f06f 000a 	mvn.w	r0, #10
   36b50:	e7ad      	b.n	36aae <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   36b52:	2500      	movs	r5, #0
   36b54:	e7c1      	b.n	36ada <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36b56:	480b      	ldr	r0, [pc, #44]	; (36b84 <z_impl_k_mutex_lock+0x198>)
   36b58:	f7ff fddc 	bl	36714 <z_spin_unlock_valid>
   36b5c:	b940      	cbnz	r0, 36b70 <z_impl_k_mutex_lock+0x184>
   36b5e:	490a      	ldr	r1, [pc, #40]	; (36b88 <z_impl_k_mutex_lock+0x19c>)
   36b60:	4807      	ldr	r0, [pc, #28]	; (36b80 <z_impl_k_mutex_lock+0x194>)
   36b62:	22b9      	movs	r2, #185	; 0xb9
   36b64:	f006 f879 	bl	3cc5a <assert_print>
   36b68:	21b9      	movs	r1, #185	; 0xb9
   36b6a:	4807      	ldr	r0, [pc, #28]	; (36b88 <z_impl_k_mutex_lock+0x19c>)
   36b6c:	f006 f86e 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   36b70:	f386 8811 	msr	BASEPRI, r6
   36b74:	f3bf 8f6f 	isb	sy
   36b78:	e7e8      	b.n	36b4c <z_impl_k_mutex_lock+0x160>
   36b7a:	bf00      	nop
   36b7c:	0004bd36 	.word	0x0004bd36
   36b80:	00044263 	.word	0x00044263
   36b84:	2001a52c 	.word	0x2001a52c
   36b88:	0004429d 	.word	0x0004429d
   36b8c:	2001a500 	.word	0x2001a500

00036b90 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   36b90:	b538      	push	{r3, r4, r5, lr}
   36b92:	4604      	mov	r4, r0
   36b94:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   36b98:	b143      	cbz	r3, 36bac <z_impl_k_mutex_unlock+0x1c>
   36b9a:	4944      	ldr	r1, [pc, #272]	; (36cac <z_impl_k_mutex_unlock+0x11c>)
   36b9c:	4844      	ldr	r0, [pc, #272]	; (36cb0 <z_impl_k_mutex_unlock+0x120>)
   36b9e:	22c7      	movs	r2, #199	; 0xc7
   36ba0:	f006 f85b 	bl	3cc5a <assert_print>
   36ba4:	21c7      	movs	r1, #199	; 0xc7
   36ba6:	4841      	ldr	r0, [pc, #260]	; (36cac <z_impl_k_mutex_unlock+0x11c>)
   36ba8:	f006 f850 	bl	3cc4c <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   36bac:	68a3      	ldr	r3, [r4, #8]
   36bae:	2b00      	cmp	r3, #0
   36bb0:	d075      	beq.n	36c9e <z_impl_k_mutex_unlock+0x10e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   36bb2:	4d40      	ldr	r5, [pc, #256]	; (36cb4 <z_impl_k_mutex_unlock+0x124>)
   36bb4:	68aa      	ldr	r2, [r5, #8]
   36bb6:	4293      	cmp	r3, r2
   36bb8:	d174      	bne.n	36ca4 <z_impl_k_mutex_unlock+0x114>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   36bba:	68e3      	ldr	r3, [r4, #12]
   36bbc:	b943      	cbnz	r3, 36bd0 <z_impl_k_mutex_unlock+0x40>
   36bbe:	493b      	ldr	r1, [pc, #236]	; (36cac <z_impl_k_mutex_unlock+0x11c>)
   36bc0:	483b      	ldr	r0, [pc, #236]	; (36cb0 <z_impl_k_mutex_unlock+0x120>)
   36bc2:	22df      	movs	r2, #223	; 0xdf
   36bc4:	f006 f849 	bl	3cc5a <assert_print>
   36bc8:	21df      	movs	r1, #223	; 0xdf
   36bca:	4838      	ldr	r0, [pc, #224]	; (36cac <z_impl_k_mutex_unlock+0x11c>)
   36bcc:	f006 f83e 	bl	3cc4c <assert_post_action>
   36bd0:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   36bd4:	b143      	cbz	r3, 36be8 <z_impl_k_mutex_unlock+0x58>
   36bd6:	4938      	ldr	r1, [pc, #224]	; (36cb8 <z_impl_k_mutex_unlock+0x128>)
   36bd8:	4835      	ldr	r0, [pc, #212]	; (36cb0 <z_impl_k_mutex_unlock+0x120>)
   36bda:	22fd      	movs	r2, #253	; 0xfd
   36bdc:	f006 f83d 	bl	3cc5a <assert_print>
   36be0:	21fd      	movs	r1, #253	; 0xfd
   36be2:	4835      	ldr	r0, [pc, #212]	; (36cb8 <z_impl_k_mutex_unlock+0x128>)
   36be4:	f006 f832 	bl	3cc4c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   36be8:	68ab      	ldr	r3, [r5, #8]
   36bea:	7bdb      	ldrb	r3, [r3, #15]
   36bec:	2b01      	cmp	r3, #1
   36bee:	d108      	bne.n	36c02 <z_impl_k_mutex_unlock+0x72>
   36bf0:	4931      	ldr	r1, [pc, #196]	; (36cb8 <z_impl_k_mutex_unlock+0x128>)
   36bf2:	482f      	ldr	r0, [pc, #188]	; (36cb0 <z_impl_k_mutex_unlock+0x120>)
   36bf4:	22fe      	movs	r2, #254	; 0xfe
   36bf6:	f006 f830 	bl	3cc5a <assert_print>
   36bfa:	21fe      	movs	r1, #254	; 0xfe
   36bfc:	482e      	ldr	r0, [pc, #184]	; (36cb8 <z_impl_k_mutex_unlock+0x128>)
   36bfe:	f006 f825 	bl	3cc4c <assert_post_action>

	--_current->base.sched_locked;
   36c02:	68aa      	ldr	r2, [r5, #8]
   36c04:	7bd3      	ldrb	r3, [r2, #15]
   36c06:	3b01      	subs	r3, #1
   36c08:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   36c0a:	68e3      	ldr	r3, [r4, #12]
   36c0c:	2b01      	cmp	r3, #1
   36c0e:	d905      	bls.n	36c1c <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   36c10:	3b01      	subs	r3, #1
   36c12:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   36c14:	f001 fbd4 	bl	383c0 <k_sched_unlock>

	return 0;
   36c18:	2000      	movs	r0, #0
}
   36c1a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   36c1c:	f04f 0320 	mov.w	r3, #32
   36c20:	f3ef 8511 	mrs	r5, BASEPRI
   36c24:	f383 8812 	msr	BASEPRI_MAX, r3
   36c28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36c2c:	4823      	ldr	r0, [pc, #140]	; (36cbc <z_impl_k_mutex_unlock+0x12c>)
   36c2e:	f7ff fd63 	bl	366f8 <z_spin_lock_valid>
   36c32:	b940      	cbnz	r0, 36c46 <z_impl_k_mutex_unlock+0xb6>
   36c34:	4922      	ldr	r1, [pc, #136]	; (36cc0 <z_impl_k_mutex_unlock+0x130>)
   36c36:	481e      	ldr	r0, [pc, #120]	; (36cb0 <z_impl_k_mutex_unlock+0x120>)
   36c38:	228e      	movs	r2, #142	; 0x8e
   36c3a:	f006 f80e 	bl	3cc5a <assert_print>
   36c3e:	218e      	movs	r1, #142	; 0x8e
   36c40:	481f      	ldr	r0, [pc, #124]	; (36cc0 <z_impl_k_mutex_unlock+0x130>)
   36c42:	f006 f803 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   36c46:	481d      	ldr	r0, [pc, #116]	; (36cbc <z_impl_k_mutex_unlock+0x12c>)
   36c48:	f7ff fd74 	bl	36734 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   36c4c:	6921      	ldr	r1, [r4, #16]
   36c4e:	68a0      	ldr	r0, [r4, #8]
   36c50:	f00a fa85 	bl	4115e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   36c54:	4620      	mov	r0, r4
   36c56:	f001 fc0f 	bl	38478 <z_unpend_first_thread>
	mutex->owner = new_owner;
   36c5a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   36c5c:	b160      	cbz	r0, 36c78 <z_impl_k_mutex_unlock+0xe8>
		mutex->owner_orig_prio = new_owner->base.prio;
   36c5e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   36c62:	6122      	str	r2, [r4, #16]
   36c64:	2200      	movs	r2, #0
   36c66:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   36c6a:	f001 f901 	bl	37e70 <z_ready_thread>
		z_reschedule(&lock, key);
   36c6e:	4629      	mov	r1, r5
   36c70:	4812      	ldr	r0, [pc, #72]	; (36cbc <z_impl_k_mutex_unlock+0x12c>)
   36c72:	f000 fecd 	bl	37a10 <z_reschedule>
   36c76:	e7cd      	b.n	36c14 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   36c78:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36c7a:	4810      	ldr	r0, [pc, #64]	; (36cbc <z_impl_k_mutex_unlock+0x12c>)
   36c7c:	f7ff fd4a 	bl	36714 <z_spin_unlock_valid>
   36c80:	b940      	cbnz	r0, 36c94 <z_impl_k_mutex_unlock+0x104>
   36c82:	490f      	ldr	r1, [pc, #60]	; (36cc0 <z_impl_k_mutex_unlock+0x130>)
   36c84:	480a      	ldr	r0, [pc, #40]	; (36cb0 <z_impl_k_mutex_unlock+0x120>)
   36c86:	22b9      	movs	r2, #185	; 0xb9
   36c88:	f005 ffe7 	bl	3cc5a <assert_print>
   36c8c:	21b9      	movs	r1, #185	; 0xb9
   36c8e:	480c      	ldr	r0, [pc, #48]	; (36cc0 <z_impl_k_mutex_unlock+0x130>)
   36c90:	f005 ffdc 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   36c94:	f385 8811 	msr	BASEPRI, r5
   36c98:	f3bf 8f6f 	isb	sy
   36c9c:	e7ba      	b.n	36c14 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   36c9e:	f06f 0015 	mvn.w	r0, #21
   36ca2:	e7ba      	b.n	36c1a <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   36ca4:	f04f 30ff 	mov.w	r0, #4294967295
   36ca8:	e7b7      	b.n	36c1a <z_impl_k_mutex_unlock+0x8a>
   36caa:	bf00      	nop
   36cac:	0004bd36 	.word	0x0004bd36
   36cb0:	00044263 	.word	0x00044263
   36cb4:	2001a500 	.word	0x2001a500
   36cb8:	0004bd58 	.word	0x0004bd58
   36cbc:	2001a52c 	.word	0x2001a52c
   36cc0:	0004429d 	.word	0x0004429d

00036cc4 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   36cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36cc8:	4604      	mov	r4, r0
   36cca:	460d      	mov	r5, r1
   36ccc:	4690      	mov	r8, r2
   36cce:	4699      	mov	r9, r3
   36cd0:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   36cd4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   36cd8:	f04f 0320 	mov.w	r3, #32
   36cdc:	f3ef 8711 	mrs	r7, BASEPRI
   36ce0:	f383 8812 	msr	BASEPRI_MAX, r3
   36ce4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36ce8:	4630      	mov	r0, r6
   36cea:	f7ff fd05 	bl	366f8 <z_spin_lock_valid>
   36cee:	b940      	cbnz	r0, 36d02 <queue_insert+0x3e>
   36cf0:	4937      	ldr	r1, [pc, #220]	; (36dd0 <queue_insert+0x10c>)
   36cf2:	4838      	ldr	r0, [pc, #224]	; (36dd4 <queue_insert+0x110>)
   36cf4:	228e      	movs	r2, #142	; 0x8e
   36cf6:	f005 ffb0 	bl	3cc5a <assert_print>
   36cfa:	218e      	movs	r1, #142	; 0x8e
   36cfc:	4834      	ldr	r0, [pc, #208]	; (36dd0 <queue_insert+0x10c>)
   36cfe:	f005 ffa5 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   36d02:	4630      	mov	r0, r6
   36d04:	f7ff fd16 	bl	36734 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   36d08:	f1ba 0f00 	cmp.w	sl, #0
   36d0c:	d000      	beq.n	36d10 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   36d0e:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   36d10:	f104 000c 	add.w	r0, r4, #12
   36d14:	f001 fbb0 	bl	38478 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   36d18:	b160      	cbz	r0, 36d34 <queue_insert+0x70>
   36d1a:	2400      	movs	r4, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   36d1c:	f8c0 8014 	str.w	r8, [r0, #20]
   36d20:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   36d24:	f001 f8a4 	bl	37e70 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   36d28:	4630      	mov	r0, r6
   36d2a:	4639      	mov	r1, r7
   36d2c:	f000 fe70 	bl	37a10 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   36d30:	2000      	movs	r0, #0
   36d32:	e019      	b.n	36d68 <queue_insert+0xa4>
	if (alloc) {
   36d34:	f1b9 0f00 	cmp.w	r9, #0
   36d38:	d028      	beq.n	36d8c <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   36d3a:	2108      	movs	r1, #8
   36d3c:	f002 fe52 	bl	399e4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   36d40:	b9a0      	cbnz	r0, 36d6c <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36d42:	4630      	mov	r0, r6
   36d44:	f7ff fce6 	bl	36714 <z_spin_unlock_valid>
   36d48:	b940      	cbnz	r0, 36d5c <queue_insert+0x98>
   36d4a:	4921      	ldr	r1, [pc, #132]	; (36dd0 <queue_insert+0x10c>)
   36d4c:	4821      	ldr	r0, [pc, #132]	; (36dd4 <queue_insert+0x110>)
   36d4e:	22b9      	movs	r2, #185	; 0xb9
   36d50:	f005 ff83 	bl	3cc5a <assert_print>
   36d54:	21b9      	movs	r1, #185	; 0xb9
   36d56:	481e      	ldr	r0, [pc, #120]	; (36dd0 <queue_insert+0x10c>)
   36d58:	f005 ff78 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   36d5c:	f387 8811 	msr	BASEPRI, r7
   36d60:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   36d64:	f06f 000b 	mvn.w	r0, #11
}
   36d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   36d6c:	2301      	movs	r3, #1
		anode->data = data;
   36d6e:	f8c0 8004 	str.w	r8, [r0, #4]
   36d72:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36d74:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   36d76:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   36d7a:	b95d      	cbnz	r5, 36d94 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   36d7c:	6823      	ldr	r3, [r4, #0]
   36d7e:	4313      	orrs	r3, r2
   36d80:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   36d82:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   36d84:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   36d86:	b973      	cbnz	r3, 36da6 <queue_insert+0xe2>
	list->tail = node;
   36d88:	6060      	str	r0, [r4, #4]
}
   36d8a:	e00c      	b.n	36da6 <queue_insert+0xe2>
}
   36d8c:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   36d8e:	f8c8 9000 	str.w	r9, [r8]
}
   36d92:	e7ef      	b.n	36d74 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   36d94:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   36d96:	f033 0303 	bics.w	r3, r3, #3
   36d9a:	d110      	bne.n	36dbe <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   36d9c:	6002      	str	r2, [r0, #0]
	return list->tail;
   36d9e:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   36da0:	b93a      	cbnz	r2, 36db2 <queue_insert+0xee>
	list->head = node;
   36da2:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   36da6:	2104      	movs	r1, #4
   36da8:	f104 0014 	add.w	r0, r4, #20
   36dac:	f00a fb58 	bl	41460 <z_handle_obj_poll_events>
   36db0:	e7ba      	b.n	36d28 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36db2:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   36db4:	f003 0303 	and.w	r3, r3, #3
   36db8:	4303      	orrs	r3, r0
   36dba:	6013      	str	r3, [r2, #0]
   36dbc:	e7e4      	b.n	36d88 <queue_insert+0xc4>
   36dbe:	4313      	orrs	r3, r2
   36dc0:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36dc2:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   36dc4:	f003 0303 	and.w	r3, r3, #3
   36dc8:	4303      	orrs	r3, r0
   36dca:	602b      	str	r3, [r5, #0]
}
   36dcc:	e7eb      	b.n	36da6 <queue_insert+0xe2>
   36dce:	bf00      	nop
   36dd0:	0004429d 	.word	0x0004429d
   36dd4:	00044263 	.word	0x00044263

00036dd8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   36dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   36ddc:	4605      	mov	r5, r0
   36dde:	4690      	mov	r8, r2
   36de0:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   36de2:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   36de6:	f04f 0320 	mov.w	r3, #32
   36dea:	f3ef 8911 	mrs	r9, BASEPRI
   36dee:	f383 8812 	msr	BASEPRI_MAX, r3
   36df2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36df6:	4630      	mov	r0, r6
   36df8:	f7ff fc7e 	bl	366f8 <z_spin_lock_valid>
   36dfc:	b940      	cbnz	r0, 36e10 <z_impl_k_queue_get+0x38>
   36dfe:	4921      	ldr	r1, [pc, #132]	; (36e84 <z_impl_k_queue_get+0xac>)
   36e00:	4821      	ldr	r0, [pc, #132]	; (36e88 <z_impl_k_queue_get+0xb0>)
   36e02:	228e      	movs	r2, #142	; 0x8e
   36e04:	f005 ff29 	bl	3cc5a <assert_print>
   36e08:	218e      	movs	r1, #142	; 0x8e
   36e0a:	481e      	ldr	r0, [pc, #120]	; (36e84 <z_impl_k_queue_get+0xac>)
   36e0c:	f005 ff1e 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   36e10:	4630      	mov	r0, r6
   36e12:	f7ff fc8f 	bl	36734 <z_spin_lock_set_owner>
	return list->head;
   36e16:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   36e18:	b314      	cbz	r4, 36e60 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   36e1a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   36e1c:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   36e1e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   36e22:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   36e24:	4620      	mov	r0, r4
   36e26:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   36e2a:	602b      	str	r3, [r5, #0]
	list->tail = node;
   36e2c:	bf08      	it	eq
   36e2e:	606b      	streq	r3, [r5, #4]
   36e30:	f00a f9a4 	bl	4117c <z_queue_node_peek>
   36e34:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36e36:	4630      	mov	r0, r6
   36e38:	f7ff fc6c 	bl	36714 <z_spin_unlock_valid>
   36e3c:	b940      	cbnz	r0, 36e50 <z_impl_k_queue_get+0x78>
   36e3e:	4911      	ldr	r1, [pc, #68]	; (36e84 <z_impl_k_queue_get+0xac>)
   36e40:	4811      	ldr	r0, [pc, #68]	; (36e88 <z_impl_k_queue_get+0xb0>)
   36e42:	22b9      	movs	r2, #185	; 0xb9
   36e44:	f005 ff09 	bl	3cc5a <assert_print>
   36e48:	21b9      	movs	r1, #185	; 0xb9
   36e4a:	480e      	ldr	r0, [pc, #56]	; (36e84 <z_impl_k_queue_get+0xac>)
   36e4c:	f005 fefe 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   36e50:	f389 8811 	msr	BASEPRI, r9
   36e54:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   36e58:	4620      	mov	r0, r4
   36e5a:	b003      	add	sp, #12
   36e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36e60:	ea58 0307 	orrs.w	r3, r8, r7
   36e64:	d0e7      	beq.n	36e36 <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   36e66:	4649      	mov	r1, r9
   36e68:	4630      	mov	r0, r6
   36e6a:	e9cd 8700 	strd	r8, r7, [sp]
   36e6e:	f105 020c 	add.w	r2, r5, #12
   36e72:	f001 f9a5 	bl	381c0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   36e76:	2800      	cmp	r0, #0
   36e78:	d1ee      	bne.n	36e58 <z_impl_k_queue_get+0x80>
   36e7a:	4b04      	ldr	r3, [pc, #16]	; (36e8c <z_impl_k_queue_get+0xb4>)
   36e7c:	689b      	ldr	r3, [r3, #8]
   36e7e:	695c      	ldr	r4, [r3, #20]
   36e80:	e7ea      	b.n	36e58 <z_impl_k_queue_get+0x80>
   36e82:	bf00      	nop
   36e84:	0004429d 	.word	0x0004429d
   36e88:	00044263 	.word	0x00044263
   36e8c:	2001a500 	.word	0x2001a500

00036e90 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   36e90:	b538      	push	{r3, r4, r5, lr}
   36e92:	4604      	mov	r4, r0
	__asm__ volatile(
   36e94:	f04f 0320 	mov.w	r3, #32
   36e98:	f3ef 8511 	mrs	r5, BASEPRI
   36e9c:	f383 8812 	msr	BASEPRI_MAX, r3
   36ea0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36ea4:	4815      	ldr	r0, [pc, #84]	; (36efc <z_impl_k_sem_give+0x6c>)
   36ea6:	f7ff fc27 	bl	366f8 <z_spin_lock_valid>
   36eaa:	b940      	cbnz	r0, 36ebe <z_impl_k_sem_give+0x2e>
   36eac:	4914      	ldr	r1, [pc, #80]	; (36f00 <z_impl_k_sem_give+0x70>)
   36eae:	4815      	ldr	r0, [pc, #84]	; (36f04 <z_impl_k_sem_give+0x74>)
   36eb0:	228e      	movs	r2, #142	; 0x8e
   36eb2:	f005 fed2 	bl	3cc5a <assert_print>
   36eb6:	218e      	movs	r1, #142	; 0x8e
   36eb8:	4811      	ldr	r0, [pc, #68]	; (36f00 <z_impl_k_sem_give+0x70>)
   36eba:	f005 fec7 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   36ebe:	480f      	ldr	r0, [pc, #60]	; (36efc <z_impl_k_sem_give+0x6c>)
   36ec0:	f7ff fc38 	bl	36734 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   36ec4:	4620      	mov	r0, r4
   36ec6:	f001 fad7 	bl	38478 <z_unpend_first_thread>

	if (thread != NULL) {
   36eca:	b150      	cbz	r0, 36ee2 <z_impl_k_sem_give+0x52>
   36ecc:	2200      	movs	r2, #0
   36ece:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   36ed2:	f000 ffcd 	bl	37e70 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   36ed6:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   36ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   36edc:	4807      	ldr	r0, [pc, #28]	; (36efc <z_impl_k_sem_give+0x6c>)
   36ede:	f000 bd97 	b.w	37a10 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   36ee2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   36ee6:	429a      	cmp	r2, r3
   36ee8:	bf18      	it	ne
   36eea:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   36eec:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   36eee:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   36ef0:	f104 0010 	add.w	r0, r4, #16
   36ef4:	f00a fab4 	bl	41460 <z_handle_obj_poll_events>
}
   36ef8:	e7ed      	b.n	36ed6 <z_impl_k_sem_give+0x46>
   36efa:	bf00      	nop
   36efc:	2001a530 	.word	0x2001a530
   36f00:	0004429d 	.word	0x0004429d
   36f04:	00044263 	.word	0x00044263

00036f08 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   36f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36f0a:	4604      	mov	r4, r0
   36f0c:	4616      	mov	r6, r2
   36f0e:	461d      	mov	r5, r3
   36f10:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   36f14:	b15b      	cbz	r3, 36f2e <z_impl_k_sem_take+0x26>
   36f16:	ea52 0305 	orrs.w	r3, r2, r5
   36f1a:	d008      	beq.n	36f2e <z_impl_k_sem_take+0x26>
   36f1c:	492b      	ldr	r1, [pc, #172]	; (36fcc <z_impl_k_sem_take+0xc4>)
   36f1e:	482c      	ldr	r0, [pc, #176]	; (36fd0 <z_impl_k_sem_take+0xc8>)
   36f20:	2279      	movs	r2, #121	; 0x79
   36f22:	f005 fe9a 	bl	3cc5a <assert_print>
   36f26:	2179      	movs	r1, #121	; 0x79
   36f28:	4828      	ldr	r0, [pc, #160]	; (36fcc <z_impl_k_sem_take+0xc4>)
   36f2a:	f005 fe8f 	bl	3cc4c <assert_post_action>
   36f2e:	f04f 0320 	mov.w	r3, #32
   36f32:	f3ef 8711 	mrs	r7, BASEPRI
   36f36:	f383 8812 	msr	BASEPRI_MAX, r3
   36f3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36f3e:	4825      	ldr	r0, [pc, #148]	; (36fd4 <z_impl_k_sem_take+0xcc>)
   36f40:	f7ff fbda 	bl	366f8 <z_spin_lock_valid>
   36f44:	b940      	cbnz	r0, 36f58 <z_impl_k_sem_take+0x50>
   36f46:	4924      	ldr	r1, [pc, #144]	; (36fd8 <z_impl_k_sem_take+0xd0>)
   36f48:	4821      	ldr	r0, [pc, #132]	; (36fd0 <z_impl_k_sem_take+0xc8>)
   36f4a:	228e      	movs	r2, #142	; 0x8e
   36f4c:	f005 fe85 	bl	3cc5a <assert_print>
   36f50:	218e      	movs	r1, #142	; 0x8e
   36f52:	4821      	ldr	r0, [pc, #132]	; (36fd8 <z_impl_k_sem_take+0xd0>)
   36f54:	f005 fe7a 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   36f58:	481e      	ldr	r0, [pc, #120]	; (36fd4 <z_impl_k_sem_take+0xcc>)
   36f5a:	f7ff fbeb 	bl	36734 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   36f5e:	68a3      	ldr	r3, [r4, #8]
   36f60:	b1ab      	cbz	r3, 36f8e <z_impl_k_sem_take+0x86>
		sem->count--;
   36f62:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36f64:	481b      	ldr	r0, [pc, #108]	; (36fd4 <z_impl_k_sem_take+0xcc>)
   36f66:	60a3      	str	r3, [r4, #8]
   36f68:	f7ff fbd4 	bl	36714 <z_spin_unlock_valid>
   36f6c:	b940      	cbnz	r0, 36f80 <z_impl_k_sem_take+0x78>
   36f6e:	491a      	ldr	r1, [pc, #104]	; (36fd8 <z_impl_k_sem_take+0xd0>)
   36f70:	4817      	ldr	r0, [pc, #92]	; (36fd0 <z_impl_k_sem_take+0xc8>)
   36f72:	22b9      	movs	r2, #185	; 0xb9
   36f74:	f005 fe71 	bl	3cc5a <assert_print>
   36f78:	21b9      	movs	r1, #185	; 0xb9
   36f7a:	4817      	ldr	r0, [pc, #92]	; (36fd8 <z_impl_k_sem_take+0xd0>)
   36f7c:	f005 fe66 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   36f80:	f387 8811 	msr	BASEPRI, r7
   36f84:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   36f88:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   36f8a:	b003      	add	sp, #12
   36f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36f8e:	ea56 0305 	orrs.w	r3, r6, r5
   36f92:	d113      	bne.n	36fbc <z_impl_k_sem_take+0xb4>
   36f94:	480f      	ldr	r0, [pc, #60]	; (36fd4 <z_impl_k_sem_take+0xcc>)
   36f96:	f7ff fbbd 	bl	36714 <z_spin_unlock_valid>
   36f9a:	b940      	cbnz	r0, 36fae <z_impl_k_sem_take+0xa6>
   36f9c:	490e      	ldr	r1, [pc, #56]	; (36fd8 <z_impl_k_sem_take+0xd0>)
   36f9e:	480c      	ldr	r0, [pc, #48]	; (36fd0 <z_impl_k_sem_take+0xc8>)
   36fa0:	22b9      	movs	r2, #185	; 0xb9
   36fa2:	f005 fe5a 	bl	3cc5a <assert_print>
   36fa6:	21b9      	movs	r1, #185	; 0xb9
   36fa8:	480b      	ldr	r0, [pc, #44]	; (36fd8 <z_impl_k_sem_take+0xd0>)
   36faa:	f005 fe4f 	bl	3cc4c <assert_post_action>
   36fae:	f387 8811 	msr	BASEPRI, r7
   36fb2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   36fb6:	f06f 000f 	mvn.w	r0, #15
   36fba:	e7e6      	b.n	36f8a <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   36fbc:	4622      	mov	r2, r4
   36fbe:	4639      	mov	r1, r7
   36fc0:	e9cd 6500 	strd	r6, r5, [sp]
   36fc4:	4803      	ldr	r0, [pc, #12]	; (36fd4 <z_impl_k_sem_take+0xcc>)
   36fc6:	f001 f8fb 	bl	381c0 <z_pend_curr>
	return ret;
   36fca:	e7de      	b.n	36f8a <z_impl_k_sem_take+0x82>
   36fcc:	0004bd83 	.word	0x0004bd83
   36fd0:	00044263 	.word	0x00044263
   36fd4:	2001a530 	.word	0x2001a530
   36fd8:	0004429d 	.word	0x0004429d

00036fdc <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   36fdc:	b570      	push	{r4, r5, r6, lr}
   36fde:	4604      	mov	r4, r0
	__asm__ volatile(
   36fe0:	f04f 0320 	mov.w	r3, #32
   36fe4:	f3ef 8511 	mrs	r5, BASEPRI
   36fe8:	f383 8812 	msr	BASEPRI_MAX, r3
   36fec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36ff0:	4813      	ldr	r0, [pc, #76]	; (37040 <z_impl_k_sem_reset+0x64>)
   36ff2:	f7ff fb81 	bl	366f8 <z_spin_lock_valid>
   36ff6:	b940      	cbnz	r0, 3700a <z_impl_k_sem_reset+0x2e>
   36ff8:	4912      	ldr	r1, [pc, #72]	; (37044 <z_impl_k_sem_reset+0x68>)
   36ffa:	4813      	ldr	r0, [pc, #76]	; (37048 <z_impl_k_sem_reset+0x6c>)
   36ffc:	228e      	movs	r2, #142	; 0x8e
   36ffe:	f005 fe2c 	bl	3cc5a <assert_print>
   37002:	218e      	movs	r1, #142	; 0x8e
   37004:	480f      	ldr	r0, [pc, #60]	; (37044 <z_impl_k_sem_reset+0x68>)
   37006:	f005 fe21 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   3700a:	480d      	ldr	r0, [pc, #52]	; (37040 <z_impl_k_sem_reset+0x64>)
   3700c:	f7ff fb92 	bl	36734 <z_spin_lock_set_owner>
   37010:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   37014:	4620      	mov	r0, r4
   37016:	f001 fa2f 	bl	38478 <z_unpend_first_thread>
		if (thread == NULL) {
   3701a:	b120      	cbz	r0, 37026 <z_impl_k_sem_reset+0x4a>
   3701c:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   37020:	f000 ff26 	bl	37e70 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   37024:	e7f6      	b.n	37014 <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   37026:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   37028:	2102      	movs	r1, #2
   3702a:	f104 0010 	add.w	r0, r4, #16
   3702e:	f00a fa17 	bl	41460 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   37032:	4629      	mov	r1, r5
}
   37034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   37038:	4801      	ldr	r0, [pc, #4]	; (37040 <z_impl_k_sem_reset+0x64>)
   3703a:	f000 bce9 	b.w	37a10 <z_reschedule>
   3703e:	bf00      	nop
   37040:	2001a530 	.word	0x2001a530
   37044:	0004429d 	.word	0x0004429d
   37048:	00044263 	.word	0x00044263

0003704c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   3704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37050:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37052:	4e70      	ldr	r6, [pc, #448]	; (37214 <work_queue_main+0x1c8>)
	return list->head;
   37054:	4f70      	ldr	r7, [pc, #448]	; (37218 <work_queue_main+0x1cc>)
   37056:	b085      	sub	sp, #20
   37058:	f04f 0320 	mov.w	r3, #32
   3705c:	f3ef 8811 	mrs	r8, BASEPRI
   37060:	f383 8812 	msr	BASEPRI_MAX, r3
   37064:	f3bf 8f6f 	isb	sy
   37068:	4630      	mov	r0, r6
   3706a:	f7ff fb45 	bl	366f8 <z_spin_lock_valid>
   3706e:	b940      	cbnz	r0, 37082 <work_queue_main+0x36>
   37070:	496a      	ldr	r1, [pc, #424]	; (3721c <work_queue_main+0x1d0>)
   37072:	486b      	ldr	r0, [pc, #428]	; (37220 <work_queue_main+0x1d4>)
   37074:	228e      	movs	r2, #142	; 0x8e
   37076:	f005 fdf0 	bl	3cc5a <assert_print>
   3707a:	218e      	movs	r1, #142	; 0x8e
   3707c:	4867      	ldr	r0, [pc, #412]	; (3721c <work_queue_main+0x1d0>)
   3707e:	f005 fde5 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   37082:	4630      	mov	r0, r6
   37084:	f7ff fb56 	bl	36734 <z_spin_lock_set_owner>
   37088:	f8d4 50d0 	ldr.w	r5, [r4, #208]	; 0xd0
Z_GENLIST_GET(slist, snode)
   3708c:	b9b5      	cbnz	r5, 370bc <work_queue_main+0x70>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   3708e:	2102      	movs	r1, #2
   37090:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   37094:	f00a f899 	bl	411ca <flag_test_and_clear>
   37098:	2800      	cmp	r0, #0
   3709a:	f040 8084 	bne.w	371a6 <work_queue_main+0x15a>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   3709e:	2300      	movs	r3, #0
   370a0:	f04f 32ff 	mov.w	r2, #4294967295
   370a4:	9302      	str	r3, [sp, #8]
   370a6:	f04f 33ff 	mov.w	r3, #4294967295
   370aa:	4641      	mov	r1, r8
   370ac:	e9cd 2300 	strd	r2, r3, [sp]
   370b0:	4630      	mov	r0, r6
   370b2:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
   370b6:	f001 fc49 	bl	3894c <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   370ba:	e7cd      	b.n	37058 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   370bc:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
	return node->next;
   370c0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   370c2:	4295      	cmp	r5, r2
	list->head = node;
   370c4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   370c8:	d101      	bne.n	370ce <work_queue_main+0x82>
	list->tail = node;
   370ca:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	*flagp |= BIT(bit);
   370ce:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   370d2:	4630      	mov	r0, r6
   370d4:	f043 0302 	orr.w	r3, r3, #2
   370d8:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	*flagp &= ~BIT(bit);
   370dc:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   370de:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   370e2:	f023 0304 	bic.w	r3, r3, #4
   370e6:	f043 0301 	orr.w	r3, r3, #1
   370ea:	60eb      	str	r3, [r5, #12]
   370ec:	f7ff fb12 	bl	36714 <z_spin_unlock_valid>
   370f0:	b940      	cbnz	r0, 37104 <work_queue_main+0xb8>
   370f2:	494a      	ldr	r1, [pc, #296]	; (3721c <work_queue_main+0x1d0>)
   370f4:	484a      	ldr	r0, [pc, #296]	; (37220 <work_queue_main+0x1d4>)
   370f6:	22b9      	movs	r2, #185	; 0xb9
   370f8:	f005 fdaf 	bl	3cc5a <assert_print>
   370fc:	21b9      	movs	r1, #185	; 0xb9
   370fe:	4847      	ldr	r0, [pc, #284]	; (3721c <work_queue_main+0x1d0>)
   37100:	f005 fda4 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   37104:	f388 8811 	msr	BASEPRI, r8
   37108:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   3710c:	f1b9 0f00 	cmp.w	r9, #0
   37110:	d10a      	bne.n	37128 <work_queue_main+0xdc>
   37112:	4944      	ldr	r1, [pc, #272]	; (37224 <work_queue_main+0x1d8>)
   37114:	4842      	ldr	r0, [pc, #264]	; (37220 <work_queue_main+0x1d4>)
   37116:	f44f 7222 	mov.w	r2, #648	; 0x288
   3711a:	f005 fd9e 	bl	3cc5a <assert_print>
   3711e:	f44f 7122 	mov.w	r1, #648	; 0x288
   37122:	4840      	ldr	r0, [pc, #256]	; (37224 <work_queue_main+0x1d8>)
   37124:	f005 fd92 	bl	3cc4c <assert_post_action>
		handler(work);
   37128:	4628      	mov	r0, r5
   3712a:	47c8      	blx	r9
	__asm__ volatile(
   3712c:	f04f 0320 	mov.w	r3, #32
   37130:	f3ef 8a11 	mrs	sl, BASEPRI
   37134:	f383 8812 	msr	BASEPRI_MAX, r3
   37138:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3713c:	4630      	mov	r0, r6
   3713e:	f7ff fadb 	bl	366f8 <z_spin_lock_valid>
   37142:	b940      	cbnz	r0, 37156 <work_queue_main+0x10a>
   37144:	4935      	ldr	r1, [pc, #212]	; (3721c <work_queue_main+0x1d0>)
   37146:	4836      	ldr	r0, [pc, #216]	; (37220 <work_queue_main+0x1d4>)
   37148:	228e      	movs	r2, #142	; 0x8e
   3714a:	f005 fd86 	bl	3cc5a <assert_print>
   3714e:	218e      	movs	r1, #142	; 0x8e
   37150:	4832      	ldr	r0, [pc, #200]	; (3721c <work_queue_main+0x1d0>)
   37152:	f005 fd7b 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   37156:	4630      	mov	r0, r6
   37158:	f7ff faec 	bl	36734 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   3715c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3715e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   37160:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   37164:	d429      	bmi.n	371ba <work_queue_main+0x16e>
	*flagp &= ~BIT(bit);
   37166:	60ea      	str	r2, [r5, #12]
   37168:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3716c:	4630      	mov	r0, r6
   3716e:	f023 0302 	bic.w	r3, r3, #2
   37172:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	return (*flagp & BIT(bit)) != 0U;
   37176:	f3c3 2500 	ubfx	r5, r3, #8, #1
   3717a:	f7ff facb 	bl	36714 <z_spin_unlock_valid>
   3717e:	b940      	cbnz	r0, 37192 <work_queue_main+0x146>
   37180:	4926      	ldr	r1, [pc, #152]	; (3721c <work_queue_main+0x1d0>)
   37182:	4827      	ldr	r0, [pc, #156]	; (37220 <work_queue_main+0x1d4>)
   37184:	22b9      	movs	r2, #185	; 0xb9
   37186:	f005 fd68 	bl	3cc5a <assert_print>
   3718a:	21b9      	movs	r1, #185	; 0xb9
   3718c:	4823      	ldr	r0, [pc, #140]	; (3721c <work_queue_main+0x1d0>)
   3718e:	f005 fd5d 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   37192:	f38a 8811 	msr	BASEPRI, sl
   37196:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   3719a:	2d00      	cmp	r5, #0
   3719c:	f47f af5c 	bne.w	37058 <work_queue_main+0xc>
	z_impl_k_yield();
   371a0:	f001 f9b4 	bl	3850c <z_impl_k_yield>
}
   371a4:	e758      	b.n	37058 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   371a6:	f104 05e0 	add.w	r5, r4, #224	; 0xe0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   371aa:	2200      	movs	r2, #0
   371ac:	2101      	movs	r1, #1
   371ae:	4628      	mov	r0, r5
   371b0:	f001 fb84 	bl	388bc <z_sched_wake>
   371b4:	2800      	cmp	r0, #0
   371b6:	d1f8      	bne.n	371aa <work_queue_main+0x15e>
   371b8:	e771      	b.n	3709e <work_queue_main+0x52>
	return list->head;
   371ba:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   371bc:	f023 0303 	bic.w	r3, r3, #3
   371c0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   371c2:	2800      	cmp	r0, #0
   371c4:	d0d0      	beq.n	37168 <work_queue_main+0x11c>
	return node->next;
   371c6:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   371ca:	46c3      	mov	fp, r8
	return node->next;
   371cc:	f8d0 9000 	ldr.w	r9, [r0]
		if (wc->work == work) {
   371d0:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   371d2:	4602      	mov	r2, r0
		if (wc->work == work) {
   371d4:	429d      	cmp	r5, r3
   371d6:	d10d      	bne.n	371f4 <work_queue_main+0x1a8>
   371d8:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   371da:	f1b8 0f00 	cmp.w	r8, #0
   371de:	d111      	bne.n	37204 <work_queue_main+0x1b8>
   371e0:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   371e2:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   371e4:	4283      	cmp	r3, r0
   371e6:	d100      	bne.n	371ea <work_queue_main+0x19e>
	list->tail = node;
   371e8:	607a      	str	r2, [r7, #4]
	parent->next = child;
   371ea:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   371ee:	f7ff fe4f 	bl	36e90 <z_impl_k_sem_give>
}
   371f2:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   371f4:	f1b9 0f00 	cmp.w	r9, #0
   371f8:	d0b6      	beq.n	37168 <work_queue_main+0x11c>
	return node->next;
   371fa:	4648      	mov	r0, r9
   371fc:	4690      	mov	r8, r2
   371fe:	f8d9 9000 	ldr.w	r9, [r9]
   37202:	e7e5      	b.n	371d0 <work_queue_main+0x184>
	return list->tail;
   37204:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   37206:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   3720a:	4298      	cmp	r0, r3
	list->tail = node;
   3720c:	bf08      	it	eq
   3720e:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   37212:	e7ea      	b.n	371ea <work_queue_main+0x19e>
   37214:	2001a534 	.word	0x2001a534
   37218:	2001a538 	.word	0x2001a538
   3721c:	0004429d 	.word	0x0004429d
   37220:	00044263 	.word	0x00044263
   37224:	0004bda3 	.word	0x0004bda3

00037228 <submit_to_queue_locked>:
{
   37228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   3722a:	68c3      	ldr	r3, [r0, #12]
{
   3722c:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3722e:	079a      	lsls	r2, r3, #30
{
   37230:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   37232:	f3c3 0540 	ubfx	r5, r3, #1, #1
   37236:	d42a      	bmi.n	3728e <submit_to_queue_locked+0x66>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   37238:	075f      	lsls	r7, r3, #29
   3723a:	d42a      	bmi.n	37292 <submit_to_queue_locked+0x6a>
		if (*queuep == NULL) {
   3723c:	680a      	ldr	r2, [r1, #0]
   3723e:	b90a      	cbnz	r2, 37244 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   37240:	6882      	ldr	r2, [r0, #8]
   37242:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   37244:	07d8      	lsls	r0, r3, #31
   37246:	d527      	bpl.n	37298 <submit_to_queue_locked+0x70>
			__ASSERT_NO_MSG(work->queue != NULL);
   37248:	68a3      	ldr	r3, [r4, #8]
   3724a:	b953      	cbnz	r3, 37262 <submit_to_queue_locked+0x3a>
   3724c:	4923      	ldr	r1, [pc, #140]	; (372dc <submit_to_queue_locked+0xb4>)
   3724e:	4824      	ldr	r0, [pc, #144]	; (372e0 <submit_to_queue_locked+0xb8>)
   37250:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   37254:	f005 fd01 	bl	3cc5a <assert_print>
   37258:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   3725c:	481f      	ldr	r0, [pc, #124]	; (372dc <submit_to_queue_locked+0xb4>)
   3725e:	f005 fcf5 	bl	3cc4c <assert_post_action>
			ret = 2;
   37262:	2502      	movs	r5, #2
			*queuep = work->queue;
   37264:	68a3      	ldr	r3, [r4, #8]
   37266:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   37268:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   3726a:	b38f      	cbz	r7, 372d0 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   3726c:	4b1d      	ldr	r3, [pc, #116]	; (372e4 <submit_to_queue_locked+0xbc>)
   3726e:	689b      	ldr	r3, [r3, #8]
   37270:	42bb      	cmp	r3, r7
   37272:	d113      	bne.n	3729c <submit_to_queue_locked+0x74>
   37274:	f009 ff5f 	bl	41136 <k_is_in_isr>
   37278:	f080 0001 	eor.w	r0, r0, #1
   3727c:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   3727e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   37282:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   37284:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   37288:	d525      	bpl.n	372d6 <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
   3728a:	b14a      	cbz	r2, 372a0 <submit_to_queue_locked+0x78>
   3728c:	b950      	cbnz	r0, 372a4 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   3728e:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   37292:	2300      	movs	r3, #0
   37294:	6033      	str	r3, [r6, #0]
	return ret;
   37296:	e015      	b.n	372c4 <submit_to_queue_locked+0x9c>
		ret = 1;
   37298:	2501      	movs	r5, #1
   3729a:	e7e5      	b.n	37268 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   3729c:	2000      	movs	r0, #0
   3729e:	e7ee      	b.n	3727e <submit_to_queue_locked+0x56>
	} else if (plugged && !draining) {
   372a0:	071b      	lsls	r3, r3, #28
   372a2:	d4f4      	bmi.n	3728e <submit_to_queue_locked+0x66>
	parent->next = child;
   372a4:	2300      	movs	r3, #0
   372a6:	6023      	str	r3, [r4, #0]
	return list->tail;
   372a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
Z_GENLIST_APPEND(slist, snode)
   372ac:	b963      	cbnz	r3, 372c8 <submit_to_queue_locked+0xa0>
	list->head = node;
   372ae:	e9c7 4434 	strd	r4, r4, [r7, #208]	; 0xd0
		(void)notify_queue_locked(queue);
   372b2:	4638      	mov	r0, r7
   372b4:	f009 ffa2 	bl	411fc <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   372b8:	68e3      	ldr	r3, [r4, #12]
   372ba:	f043 0304 	orr.w	r3, r3, #4
   372be:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   372c0:	6833      	ldr	r3, [r6, #0]
   372c2:	60a3      	str	r3, [r4, #8]
}
   372c4:	4628      	mov	r0, r5
   372c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   372c8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   372ca:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
}
   372ce:	e7f0      	b.n	372b2 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   372d0:	f06f 0515 	mvn.w	r5, #21
   372d4:	e7dd      	b.n	37292 <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
   372d6:	f06f 0512 	mvn.w	r5, #18
   372da:	e7da      	b.n	37292 <submit_to_queue_locked+0x6a>
   372dc:	0004bda3 	.word	0x0004bda3
   372e0:	00044263 	.word	0x00044263
   372e4:	2001a500 	.word	0x2001a500

000372e8 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   372e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   372ea:	4604      	mov	r4, r0
	__asm__ volatile(
   372ec:	f04f 0320 	mov.w	r3, #32
   372f0:	f3ef 8511 	mrs	r5, BASEPRI
   372f4:	f383 8812 	msr	BASEPRI_MAX, r3
   372f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   372fc:	4818      	ldr	r0, [pc, #96]	; (37360 <work_timeout+0x78>)
   372fe:	f7ff f9fb 	bl	366f8 <z_spin_lock_valid>
   37302:	b940      	cbnz	r0, 37316 <work_timeout+0x2e>
   37304:	4917      	ldr	r1, [pc, #92]	; (37364 <work_timeout+0x7c>)
   37306:	4818      	ldr	r0, [pc, #96]	; (37368 <work_timeout+0x80>)
   37308:	228e      	movs	r2, #142	; 0x8e
   3730a:	f005 fca6 	bl	3cc5a <assert_print>
   3730e:	218e      	movs	r1, #142	; 0x8e
   37310:	4814      	ldr	r0, [pc, #80]	; (37364 <work_timeout+0x7c>)
   37312:	f005 fc9b 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   37316:	4812      	ldr	r0, [pc, #72]	; (37360 <work_timeout+0x78>)
   37318:	f7ff fa0c 	bl	36734 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   3731c:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   3731e:	2103      	movs	r1, #3
   37320:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   37322:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   37324:	f1a4 0610 	sub.w	r6, r4, #16
   37328:	f009 ff4f 	bl	411ca <flag_test_and_clear>
   3732c:	b128      	cbz	r0, 3733a <work_timeout+0x52>
		queue = dw->queue;
   3732e:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   37330:	4630      	mov	r0, r6
   37332:	a901      	add	r1, sp, #4
		queue = dw->queue;
   37334:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   37336:	f7ff ff77 	bl	37228 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3733a:	4809      	ldr	r0, [pc, #36]	; (37360 <work_timeout+0x78>)
   3733c:	f7ff f9ea 	bl	36714 <z_spin_unlock_valid>
   37340:	b940      	cbnz	r0, 37354 <work_timeout+0x6c>
   37342:	4908      	ldr	r1, [pc, #32]	; (37364 <work_timeout+0x7c>)
   37344:	4808      	ldr	r0, [pc, #32]	; (37368 <work_timeout+0x80>)
   37346:	22b9      	movs	r2, #185	; 0xb9
   37348:	f005 fc87 	bl	3cc5a <assert_print>
   3734c:	21b9      	movs	r1, #185	; 0xb9
   3734e:	4805      	ldr	r0, [pc, #20]	; (37364 <work_timeout+0x7c>)
   37350:	f005 fc7c 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   37354:	f385 8811 	msr	BASEPRI, r5
   37358:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   3735c:	b002      	add	sp, #8
   3735e:	bd70      	pop	{r4, r5, r6, pc}
   37360:	2001a534 	.word	0x2001a534
   37364:	0004429d 	.word	0x0004429d
   37368:	00044263 	.word	0x00044263

0003736c <k_work_init>:
{
   3736c:	b538      	push	{r3, r4, r5, lr}
   3736e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   37370:	4604      	mov	r4, r0
   37372:	b940      	cbnz	r0, 37386 <k_work_init+0x1a>
   37374:	490c      	ldr	r1, [pc, #48]	; (373a8 <k_work_init+0x3c>)
   37376:	480d      	ldr	r0, [pc, #52]	; (373ac <k_work_init+0x40>)
   37378:	2289      	movs	r2, #137	; 0x89
   3737a:	f005 fc6e 	bl	3cc5a <assert_print>
   3737e:	2189      	movs	r1, #137	; 0x89
   37380:	4809      	ldr	r0, [pc, #36]	; (373a8 <k_work_init+0x3c>)
   37382:	f005 fc63 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   37386:	b945      	cbnz	r5, 3739a <k_work_init+0x2e>
   37388:	4907      	ldr	r1, [pc, #28]	; (373a8 <k_work_init+0x3c>)
   3738a:	4808      	ldr	r0, [pc, #32]	; (373ac <k_work_init+0x40>)
   3738c:	228a      	movs	r2, #138	; 0x8a
   3738e:	f005 fc64 	bl	3cc5a <assert_print>
   37392:	218a      	movs	r1, #138	; 0x8a
   37394:	4804      	ldr	r0, [pc, #16]	; (373a8 <k_work_init+0x3c>)
   37396:	f005 fc59 	bl	3cc4c <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   3739a:	2210      	movs	r2, #16
   3739c:	2100      	movs	r1, #0
   3739e:	4620      	mov	r0, r4
   373a0:	f00a f92f 	bl	41602 <memset>
   373a4:	6065      	str	r5, [r4, #4]
}
   373a6:	bd38      	pop	{r3, r4, r5, pc}
   373a8:	0004bda3 	.word	0x0004bda3
   373ac:	00044263 	.word	0x00044263

000373b0 <k_work_busy_get>:
{
   373b0:	b538      	push	{r3, r4, r5, lr}
   373b2:	4604      	mov	r4, r0
	__asm__ volatile(
   373b4:	f04f 0320 	mov.w	r3, #32
   373b8:	f3ef 8511 	mrs	r5, BASEPRI
   373bc:	f383 8812 	msr	BASEPRI_MAX, r3
   373c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   373c4:	4812      	ldr	r0, [pc, #72]	; (37410 <k_work_busy_get+0x60>)
   373c6:	f7ff f997 	bl	366f8 <z_spin_lock_valid>
   373ca:	b940      	cbnz	r0, 373de <k_work_busy_get+0x2e>
   373cc:	4911      	ldr	r1, [pc, #68]	; (37414 <k_work_busy_get+0x64>)
   373ce:	4812      	ldr	r0, [pc, #72]	; (37418 <k_work_busy_get+0x68>)
   373d0:	228e      	movs	r2, #142	; 0x8e
   373d2:	f005 fc42 	bl	3cc5a <assert_print>
   373d6:	218e      	movs	r1, #142	; 0x8e
   373d8:	480e      	ldr	r0, [pc, #56]	; (37414 <k_work_busy_get+0x64>)
   373da:	f005 fc37 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   373de:	480c      	ldr	r0, [pc, #48]	; (37410 <k_work_busy_get+0x60>)
   373e0:	f7ff f9a8 	bl	36734 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   373e4:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   373e6:	480a      	ldr	r0, [pc, #40]	; (37410 <k_work_busy_get+0x60>)
   373e8:	f004 040f 	and.w	r4, r4, #15
   373ec:	f7ff f992 	bl	36714 <z_spin_unlock_valid>
   373f0:	b940      	cbnz	r0, 37404 <k_work_busy_get+0x54>
   373f2:	4908      	ldr	r1, [pc, #32]	; (37414 <k_work_busy_get+0x64>)
   373f4:	4808      	ldr	r0, [pc, #32]	; (37418 <k_work_busy_get+0x68>)
   373f6:	22b9      	movs	r2, #185	; 0xb9
   373f8:	f005 fc2f 	bl	3cc5a <assert_print>
   373fc:	21b9      	movs	r1, #185	; 0xb9
   373fe:	4805      	ldr	r0, [pc, #20]	; (37414 <k_work_busy_get+0x64>)
   37400:	f005 fc24 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   37404:	f385 8811 	msr	BASEPRI, r5
   37408:	f3bf 8f6f 	isb	sy
}
   3740c:	4620      	mov	r0, r4
   3740e:	bd38      	pop	{r3, r4, r5, pc}
   37410:	2001a534 	.word	0x2001a534
   37414:	0004429d 	.word	0x0004429d
   37418:	00044263 	.word	0x00044263

0003741c <k_work_submit_to_queue>:
{
   3741c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   3741e:	460c      	mov	r4, r1
{
   37420:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   37422:	b951      	cbnz	r1, 3743a <k_work_submit_to_queue+0x1e>
   37424:	4923      	ldr	r1, [pc, #140]	; (374b4 <k_work_submit_to_queue+0x98>)
   37426:	4824      	ldr	r0, [pc, #144]	; (374b8 <k_work_submit_to_queue+0x9c>)
   37428:	f240 1269 	movw	r2, #361	; 0x169
   3742c:	f005 fc15 	bl	3cc5a <assert_print>
   37430:	f240 1169 	movw	r1, #361	; 0x169
   37434:	481f      	ldr	r0, [pc, #124]	; (374b4 <k_work_submit_to_queue+0x98>)
   37436:	f005 fc09 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   3743a:	f04f 0320 	mov.w	r3, #32
   3743e:	f3ef 8511 	mrs	r5, BASEPRI
   37442:	f383 8812 	msr	BASEPRI_MAX, r3
   37446:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3744a:	481c      	ldr	r0, [pc, #112]	; (374bc <k_work_submit_to_queue+0xa0>)
   3744c:	f7ff f954 	bl	366f8 <z_spin_lock_valid>
   37450:	b940      	cbnz	r0, 37464 <k_work_submit_to_queue+0x48>
   37452:	491b      	ldr	r1, [pc, #108]	; (374c0 <k_work_submit_to_queue+0xa4>)
   37454:	4818      	ldr	r0, [pc, #96]	; (374b8 <k_work_submit_to_queue+0x9c>)
   37456:	228e      	movs	r2, #142	; 0x8e
   37458:	f005 fbff 	bl	3cc5a <assert_print>
   3745c:	218e      	movs	r1, #142	; 0x8e
   3745e:	4818      	ldr	r0, [pc, #96]	; (374c0 <k_work_submit_to_queue+0xa4>)
   37460:	f005 fbf4 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   37464:	4815      	ldr	r0, [pc, #84]	; (374bc <k_work_submit_to_queue+0xa0>)
   37466:	f7ff f965 	bl	36734 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   3746a:	4620      	mov	r0, r4
   3746c:	a901      	add	r1, sp, #4
   3746e:	f7ff fedb 	bl	37228 <submit_to_queue_locked>
   37472:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37474:	4811      	ldr	r0, [pc, #68]	; (374bc <k_work_submit_to_queue+0xa0>)
   37476:	f7ff f94d 	bl	36714 <z_spin_unlock_valid>
   3747a:	b940      	cbnz	r0, 3748e <k_work_submit_to_queue+0x72>
   3747c:	4910      	ldr	r1, [pc, #64]	; (374c0 <k_work_submit_to_queue+0xa4>)
   3747e:	480e      	ldr	r0, [pc, #56]	; (374b8 <k_work_submit_to_queue+0x9c>)
   37480:	22b9      	movs	r2, #185	; 0xb9
   37482:	f005 fbea 	bl	3cc5a <assert_print>
   37486:	21b9      	movs	r1, #185	; 0xb9
   37488:	480d      	ldr	r0, [pc, #52]	; (374c0 <k_work_submit_to_queue+0xa4>)
   3748a:	f005 fbdf 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   3748e:	f385 8811 	msr	BASEPRI, r5
   37492:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
   37496:	2c00      	cmp	r4, #0
   37498:	dd09      	ble.n	374ae <k_work_submit_to_queue+0x92>
	__asm__ volatile(
   3749a:	f04f 0320 	mov.w	r3, #32
   3749e:	f3ef 8011 	mrs	r0, BASEPRI
   374a2:	f383 8812 	msr	BASEPRI_MAX, r3
   374a6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   374aa:	f009 feea 	bl	41282 <z_reschedule_irqlock>
}
   374ae:	4620      	mov	r0, r4
   374b0:	b003      	add	sp, #12
   374b2:	bd30      	pop	{r4, r5, pc}
   374b4:	0004bda3 	.word	0x0004bda3
   374b8:	00044263 	.word	0x00044263
   374bc:	2001a534 	.word	0x2001a534
   374c0:	0004429d 	.word	0x0004429d

000374c4 <k_work_submit>:
{
   374c4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   374c6:	4801      	ldr	r0, [pc, #4]	; (374cc <k_work_submit+0x8>)
   374c8:	f7ff bfa8 	b.w	3741c <k_work_submit_to_queue>
   374cc:	20018fa8 	.word	0x20018fa8

000374d0 <k_work_cancel>:
{
   374d0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   374d2:	4604      	mov	r4, r0
   374d4:	b950      	cbnz	r0, 374ec <k_work_cancel+0x1c>
   374d6:	4924      	ldr	r1, [pc, #144]	; (37568 <k_work_cancel+0x98>)
   374d8:	4824      	ldr	r0, [pc, #144]	; (3756c <k_work_cancel+0x9c>)
   374da:	f240 220e 	movw	r2, #526	; 0x20e
   374de:	f005 fbbc 	bl	3cc5a <assert_print>
   374e2:	f240 210e 	movw	r1, #526	; 0x20e
   374e6:	4820      	ldr	r0, [pc, #128]	; (37568 <k_work_cancel+0x98>)
   374e8:	f005 fbb0 	bl	3cc4c <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   374ec:	68e3      	ldr	r3, [r4, #12]
	__ASSERT_NO_MSG(!flag_test(&work->flags, K_WORK_DELAYABLE_BIT));
   374ee:	05db      	lsls	r3, r3, #23
   374f0:	d50a      	bpl.n	37508 <k_work_cancel+0x38>
   374f2:	491d      	ldr	r1, [pc, #116]	; (37568 <k_work_cancel+0x98>)
   374f4:	481d      	ldr	r0, [pc, #116]	; (3756c <k_work_cancel+0x9c>)
   374f6:	f240 220f 	movw	r2, #527	; 0x20f
   374fa:	f005 fbae 	bl	3cc5a <assert_print>
   374fe:	f240 210f 	movw	r1, #527	; 0x20f
   37502:	4819      	ldr	r0, [pc, #100]	; (37568 <k_work_cancel+0x98>)
   37504:	f005 fba2 	bl	3cc4c <assert_post_action>
   37508:	f04f 0320 	mov.w	r3, #32
   3750c:	f3ef 8511 	mrs	r5, BASEPRI
   37510:	f383 8812 	msr	BASEPRI_MAX, r3
   37514:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37518:	4815      	ldr	r0, [pc, #84]	; (37570 <k_work_cancel+0xa0>)
   3751a:	f7ff f8ed 	bl	366f8 <z_spin_lock_valid>
   3751e:	b940      	cbnz	r0, 37532 <k_work_cancel+0x62>
   37520:	4914      	ldr	r1, [pc, #80]	; (37574 <k_work_cancel+0xa4>)
   37522:	4812      	ldr	r0, [pc, #72]	; (3756c <k_work_cancel+0x9c>)
   37524:	228e      	movs	r2, #142	; 0x8e
   37526:	f005 fb98 	bl	3cc5a <assert_print>
   3752a:	218e      	movs	r1, #142	; 0x8e
   3752c:	4811      	ldr	r0, [pc, #68]	; (37574 <k_work_cancel+0xa4>)
   3752e:	f005 fb8d 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   37532:	480f      	ldr	r0, [pc, #60]	; (37570 <k_work_cancel+0xa0>)
   37534:	f7ff f8fe 	bl	36734 <z_spin_lock_set_owner>
	int ret = cancel_async_locked(work);
   37538:	4620      	mov	r0, r4
   3753a:	f009 fe66 	bl	4120a <cancel_async_locked>
   3753e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37540:	480b      	ldr	r0, [pc, #44]	; (37570 <k_work_cancel+0xa0>)
   37542:	f7ff f8e7 	bl	36714 <z_spin_unlock_valid>
   37546:	b940      	cbnz	r0, 3755a <k_work_cancel+0x8a>
   37548:	490a      	ldr	r1, [pc, #40]	; (37574 <k_work_cancel+0xa4>)
   3754a:	4808      	ldr	r0, [pc, #32]	; (3756c <k_work_cancel+0x9c>)
   3754c:	22b9      	movs	r2, #185	; 0xb9
   3754e:	f005 fb84 	bl	3cc5a <assert_print>
   37552:	21b9      	movs	r1, #185	; 0xb9
   37554:	4807      	ldr	r0, [pc, #28]	; (37574 <k_work_cancel+0xa4>)
   37556:	f005 fb79 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   3755a:	f385 8811 	msr	BASEPRI, r5
   3755e:	f3bf 8f6f 	isb	sy
}
   37562:	4620      	mov	r0, r4
   37564:	bd38      	pop	{r3, r4, r5, pc}
   37566:	bf00      	nop
   37568:	0004bda3 	.word	0x0004bda3
   3756c:	00044263 	.word	0x00044263
   37570:	2001a534 	.word	0x2001a534
   37574:	0004429d 	.word	0x0004429d

00037578 <k_work_queue_start>:
{
   37578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3757c:	b088      	sub	sp, #32
   3757e:	460e      	mov	r6, r1
   37580:	4617      	mov	r7, r2
   37582:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   37584:	4604      	mov	r4, r0
{
   37586:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   37588:	b950      	cbnz	r0, 375a0 <k_work_queue_start+0x28>
   3758a:	492d      	ldr	r1, [pc, #180]	; (37640 <k_work_queue_start+0xc8>)
   3758c:	482d      	ldr	r0, [pc, #180]	; (37644 <k_work_queue_start+0xcc>)
   3758e:	f240 22b5 	movw	r2, #693	; 0x2b5
   37592:	f005 fb62 	bl	3cc5a <assert_print>
   37596:	f240 21b5 	movw	r1, #693	; 0x2b5
   3759a:	4829      	ldr	r0, [pc, #164]	; (37640 <k_work_queue_start+0xc8>)
   3759c:	f005 fb56 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(stack);
   375a0:	b956      	cbnz	r6, 375b8 <k_work_queue_start+0x40>
   375a2:	4927      	ldr	r1, [pc, #156]	; (37640 <k_work_queue_start+0xc8>)
   375a4:	4827      	ldr	r0, [pc, #156]	; (37644 <k_work_queue_start+0xcc>)
   375a6:	f240 22b6 	movw	r2, #694	; 0x2b6
   375aa:	f005 fb56 	bl	3cc5a <assert_print>
   375ae:	f240 21b6 	movw	r1, #694	; 0x2b6
   375b2:	4823      	ldr	r0, [pc, #140]	; (37640 <k_work_queue_start+0xc8>)
   375b4:	f005 fb4a 	bl	3cc4c <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   375b8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   375bc:	07db      	lsls	r3, r3, #31
   375be:	d50a      	bpl.n	375d6 <k_work_queue_start+0x5e>
   375c0:	491f      	ldr	r1, [pc, #124]	; (37640 <k_work_queue_start+0xc8>)
   375c2:	4820      	ldr	r0, [pc, #128]	; (37644 <k_work_queue_start+0xcc>)
   375c4:	f240 22b7 	movw	r2, #695	; 0x2b7
   375c8:	f005 fb47 	bl	3cc5a <assert_print>
   375cc:	f240 21b7 	movw	r1, #695	; 0x2b7
   375d0:	481b      	ldr	r0, [pc, #108]	; (37640 <k_work_queue_start+0xc8>)
   375d2:	f005 fb3b 	bl	3cc4c <assert_post_action>
	list->head = NULL;
   375d6:	2300      	movs	r3, #0
	list->tail = NULL;
   375d8:	e9c4 3334 	strd	r3, r3, [r4, #208]	; 0xd0
   375dc:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
	list->tail = (sys_dnode_t *)list;
   375e0:	e9c4 3336 	strd	r3, r3, [r4, #216]	; 0xd8
   375e4:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
   375e8:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
	if ((cfg != NULL) && cfg->no_yield) {
   375ec:	b32d      	cbz	r5, 3763a <k_work_queue_start+0xc2>
   375ee:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   375f0:	f240 1101 	movw	r1, #257	; 0x101
   375f4:	2b00      	cmp	r3, #0
   375f6:	bf08      	it	eq
   375f8:	2101      	moveq	r1, #1
	*flagp = flags;
   375fa:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   375fe:	f04f 32ff 	mov.w	r2, #4294967295
   37602:	f04f 33ff 	mov.w	r3, #4294967295
   37606:	e9cd 2306 	strd	r2, r3, [sp, #24]
   3760a:	2200      	movs	r2, #0
   3760c:	4631      	mov	r1, r6
   3760e:	e9cd 8203 	strd	r8, r2, [sp, #12]
   37612:	e9cd 2201 	strd	r2, r2, [sp, #4]
   37616:	4620      	mov	r0, r4
   37618:	463a      	mov	r2, r7
   3761a:	4b0b      	ldr	r3, [pc, #44]	; (37648 <k_work_queue_start+0xd0>)
   3761c:	9400      	str	r4, [sp, #0]
   3761e:	f7fe ffa7 	bl	36570 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   37622:	b125      	cbz	r5, 3762e <k_work_queue_start+0xb6>
   37624:	6829      	ldr	r1, [r5, #0]
   37626:	b111      	cbz	r1, 3762e <k_work_queue_start+0xb6>
	return z_impl_k_thread_name_set(thread, str);
   37628:	4620      	mov	r0, r4
   3762a:	f009 fd8a 	bl	41142 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   3762e:	4620      	mov	r0, r4
}
   37630:	b008      	add	sp, #32
   37632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   37636:	f009 bd89 	b.w	4114c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   3763a:	2101      	movs	r1, #1
   3763c:	e7dd      	b.n	375fa <k_work_queue_start+0x82>
   3763e:	bf00      	nop
   37640:	0004bda3 	.word	0x0004bda3
   37644:	00044263 	.word	0x00044263
   37648:	0003704d 	.word	0x0003704d

0003764c <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   3764c:	b538      	push	{r3, r4, r5, lr}
   3764e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   37650:	4604      	mov	r4, r0
   37652:	b950      	cbnz	r0, 3766a <k_work_init_delayable+0x1e>
   37654:	4910      	ldr	r1, [pc, #64]	; (37698 <k_work_init_delayable+0x4c>)
   37656:	4811      	ldr	r0, [pc, #68]	; (3769c <k_work_init_delayable+0x50>)
   37658:	f240 322d 	movw	r2, #813	; 0x32d
   3765c:	f005 fafd 	bl	3cc5a <assert_print>
   37660:	f240 312d 	movw	r1, #813	; 0x32d
   37664:	480c      	ldr	r0, [pc, #48]	; (37698 <k_work_init_delayable+0x4c>)
   37666:	f005 faf1 	bl	3cc4c <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   3766a:	b955      	cbnz	r5, 37682 <k_work_init_delayable+0x36>
   3766c:	490a      	ldr	r1, [pc, #40]	; (37698 <k_work_init_delayable+0x4c>)
   3766e:	480b      	ldr	r0, [pc, #44]	; (3769c <k_work_init_delayable+0x50>)
   37670:	f240 322e 	movw	r2, #814	; 0x32e
   37674:	f005 faf1 	bl	3cc5a <assert_print>
   37678:	f240 312e 	movw	r1, #814	; 0x32e
   3767c:	4806      	ldr	r0, [pc, #24]	; (37698 <k_work_init_delayable+0x4c>)
   3767e:	f005 fae5 	bl	3cc4c <assert_post_action>

	*dwork = (struct k_work_delayable){
   37682:	2230      	movs	r2, #48	; 0x30
   37684:	2100      	movs	r1, #0
   37686:	4620      	mov	r0, r4
   37688:	f009 ffbb 	bl	41602 <memset>
   3768c:	f44f 7380 	mov.w	r3, #256	; 0x100
   37690:	6065      	str	r5, [r4, #4]
   37692:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   37694:	bd38      	pop	{r3, r4, r5, pc}
   37696:	bf00      	nop
   37698:	0004bda3 	.word	0x0004bda3
   3769c:	00044263 	.word	0x00044263

000376a0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   376a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   376a2:	4616      	mov	r6, r2
   376a4:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   376a6:	460c      	mov	r4, r1
{
   376a8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   376aa:	b951      	cbnz	r1, 376c2 <k_work_schedule_for_queue+0x22>
   376ac:	4929      	ldr	r1, [pc, #164]	; (37754 <k_work_schedule_for_queue+0xb4>)
   376ae:	482a      	ldr	r0, [pc, #168]	; (37758 <k_work_schedule_for_queue+0xb8>)
   376b0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
   376b4:	f005 fad1 	bl	3cc5a <assert_print>
   376b8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   376bc:	4825      	ldr	r0, [pc, #148]	; (37754 <k_work_schedule_for_queue+0xb4>)
   376be:	f005 fac5 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   376c2:	f04f 0320 	mov.w	r3, #32
   376c6:	f3ef 8711 	mrs	r7, BASEPRI
   376ca:	f383 8812 	msr	BASEPRI_MAX, r3
   376ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   376d2:	4822      	ldr	r0, [pc, #136]	; (3775c <k_work_schedule_for_queue+0xbc>)
   376d4:	f7ff f810 	bl	366f8 <z_spin_lock_valid>
   376d8:	b940      	cbnz	r0, 376ec <k_work_schedule_for_queue+0x4c>
   376da:	4921      	ldr	r1, [pc, #132]	; (37760 <k_work_schedule_for_queue+0xc0>)
   376dc:	481e      	ldr	r0, [pc, #120]	; (37758 <k_work_schedule_for_queue+0xb8>)
   376de:	228e      	movs	r2, #142	; 0x8e
   376e0:	f005 fabb 	bl	3cc5a <assert_print>
   376e4:	218e      	movs	r1, #142	; 0x8e
   376e6:	481e      	ldr	r0, [pc, #120]	; (37760 <k_work_schedule_for_queue+0xc0>)
   376e8:	f005 fab0 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   376ec:	481b      	ldr	r0, [pc, #108]	; (3775c <k_work_schedule_for_queue+0xbc>)
   376ee:	f7ff f821 	bl	36734 <z_spin_lock_set_owner>
	return *flagp;
   376f2:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   376f4:	f013 0f0e 	tst.w	r3, #14
   376f8:	d129      	bne.n	3774e <k_work_schedule_for_queue+0xae>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   376fa:	ea55 0206 	orrs.w	r2, r5, r6
   376fe:	d118      	bne.n	37732 <k_work_schedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   37700:	4620      	mov	r0, r4
   37702:	a901      	add	r1, sp, #4
   37704:	f7ff fd90 	bl	37228 <submit_to_queue_locked>
   37708:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3770a:	4814      	ldr	r0, [pc, #80]	; (3775c <k_work_schedule_for_queue+0xbc>)
   3770c:	f7ff f802 	bl	36714 <z_spin_unlock_valid>
   37710:	b940      	cbnz	r0, 37724 <k_work_schedule_for_queue+0x84>
   37712:	4913      	ldr	r1, [pc, #76]	; (37760 <k_work_schedule_for_queue+0xc0>)
   37714:	4810      	ldr	r0, [pc, #64]	; (37758 <k_work_schedule_for_queue+0xb8>)
   37716:	22b9      	movs	r2, #185	; 0xb9
   37718:	f005 fa9f 	bl	3cc5a <assert_print>
   3771c:	21b9      	movs	r1, #185	; 0xb9
   3771e:	4810      	ldr	r0, [pc, #64]	; (37760 <k_work_schedule_for_queue+0xc0>)
   37720:	f005 fa94 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   37724:	f387 8811 	msr	BASEPRI, r7
   37728:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   3772c:	4620      	mov	r0, r4
   3772e:	b003      	add	sp, #12
   37730:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   37732:	f043 0308 	orr.w	r3, r3, #8
   37736:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   37738:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   3773a:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   3773e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   37740:	4632      	mov	r2, r6
   37742:	462b      	mov	r3, r5
   37744:	4907      	ldr	r1, [pc, #28]	; (37764 <k_work_schedule_for_queue+0xc4>)
   37746:	f001 f99d 	bl	38a84 <z_add_timeout>
	return ret;
   3774a:	2401      	movs	r4, #1
   3774c:	e7dd      	b.n	3770a <k_work_schedule_for_queue+0x6a>
	int ret = 0;
   3774e:	2400      	movs	r4, #0
   37750:	e7db      	b.n	3770a <k_work_schedule_for_queue+0x6a>
   37752:	bf00      	nop
   37754:	0004bda3 	.word	0x0004bda3
   37758:	00044263 	.word	0x00044263
   3775c:	2001a534 	.word	0x2001a534
   37760:	0004429d 	.word	0x0004429d
   37764:	000372e9 	.word	0x000372e9

00037768 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   37768:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   3776a:	4801      	ldr	r0, [pc, #4]	; (37770 <k_work_schedule+0x8>)
   3776c:	f7ff bf98 	b.w	376a0 <k_work_schedule_for_queue>
   37770:	20018fa8 	.word	0x20018fa8

00037774 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   37774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   37776:	4616      	mov	r6, r2
   37778:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   3777a:	460c      	mov	r4, r1
{
   3777c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   3777e:	b951      	cbnz	r1, 37796 <k_work_reschedule_for_queue+0x22>
   37780:	4928      	ldr	r1, [pc, #160]	; (37824 <k_work_reschedule_for_queue+0xb0>)
   37782:	4829      	ldr	r0, [pc, #164]	; (37828 <k_work_reschedule_for_queue+0xb4>)
   37784:	f44f 7272 	mov.w	r2, #968	; 0x3c8
   37788:	f005 fa67 	bl	3cc5a <assert_print>
   3778c:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   37790:	4824      	ldr	r0, [pc, #144]	; (37824 <k_work_reschedule_for_queue+0xb0>)
   37792:	f005 fa5b 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   37796:	f04f 0320 	mov.w	r3, #32
   3779a:	f3ef 8711 	mrs	r7, BASEPRI
   3779e:	f383 8812 	msr	BASEPRI_MAX, r3
   377a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   377a6:	4821      	ldr	r0, [pc, #132]	; (3782c <k_work_reschedule_for_queue+0xb8>)
   377a8:	f7fe ffa6 	bl	366f8 <z_spin_lock_valid>
   377ac:	b940      	cbnz	r0, 377c0 <k_work_reschedule_for_queue+0x4c>
   377ae:	4920      	ldr	r1, [pc, #128]	; (37830 <k_work_reschedule_for_queue+0xbc>)
   377b0:	481d      	ldr	r0, [pc, #116]	; (37828 <k_work_reschedule_for_queue+0xb4>)
   377b2:	228e      	movs	r2, #142	; 0x8e
   377b4:	f005 fa51 	bl	3cc5a <assert_print>
   377b8:	218e      	movs	r1, #142	; 0x8e
   377ba:	481d      	ldr	r0, [pc, #116]	; (37830 <k_work_reschedule_for_queue+0xbc>)
   377bc:	f005 fa46 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   377c0:	481a      	ldr	r0, [pc, #104]	; (3782c <k_work_reschedule_for_queue+0xb8>)
   377c2:	f7fe ffb7 	bl	36734 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   377c6:	4620      	mov	r0, r4
   377c8:	f009 fd0a 	bl	411e0 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   377cc:	ea55 0306 	orrs.w	r3, r5, r6
   377d0:	d118      	bne.n	37804 <k_work_reschedule_for_queue+0x90>
		return submit_to_queue_locked(work, queuep);
   377d2:	4620      	mov	r0, r4
   377d4:	a901      	add	r1, sp, #4
   377d6:	f7ff fd27 	bl	37228 <submit_to_queue_locked>
   377da:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   377dc:	4813      	ldr	r0, [pc, #76]	; (3782c <k_work_reschedule_for_queue+0xb8>)
   377de:	f7fe ff99 	bl	36714 <z_spin_unlock_valid>
   377e2:	b940      	cbnz	r0, 377f6 <k_work_reschedule_for_queue+0x82>
   377e4:	4912      	ldr	r1, [pc, #72]	; (37830 <k_work_reschedule_for_queue+0xbc>)
   377e6:	4810      	ldr	r0, [pc, #64]	; (37828 <k_work_reschedule_for_queue+0xb4>)
   377e8:	22b9      	movs	r2, #185	; 0xb9
   377ea:	f005 fa36 	bl	3cc5a <assert_print>
   377ee:	21b9      	movs	r1, #185	; 0xb9
   377f0:	480f      	ldr	r0, [pc, #60]	; (37830 <k_work_reschedule_for_queue+0xbc>)
   377f2:	f005 fa2b 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   377f6:	f387 8811 	msr	BASEPRI, r7
   377fa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   377fe:	4620      	mov	r0, r4
   37800:	b003      	add	sp, #12
   37802:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   37804:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   37806:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   3780a:	f043 0308 	orr.w	r3, r3, #8
   3780e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   37810:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   37812:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   37814:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   37816:	4907      	ldr	r1, [pc, #28]	; (37834 <k_work_reschedule_for_queue+0xc0>)
   37818:	462b      	mov	r3, r5
   3781a:	f001 f933 	bl	38a84 <z_add_timeout>
	return ret;
   3781e:	2401      	movs	r4, #1
   37820:	e7dc      	b.n	377dc <k_work_reschedule_for_queue+0x68>
   37822:	bf00      	nop
   37824:	0004bda3 	.word	0x0004bda3
   37828:	00044263 	.word	0x00044263
   3782c:	2001a534 	.word	0x2001a534
   37830:	0004429d 	.word	0x0004429d
   37834:	000372e9 	.word	0x000372e9

00037838 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   37838:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   3783a:	4801      	ldr	r0, [pc, #4]	; (37840 <k_work_reschedule+0x8>)
   3783c:	f7ff bf9a 	b.w	37774 <k_work_reschedule_for_queue>
   37840:	20018fa8 	.word	0x20018fa8

00037844 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   37844:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   37846:	4604      	mov	r4, r0
   37848:	b950      	cbnz	r0, 37860 <k_work_cancel_delayable+0x1c>
   3784a:	491e      	ldr	r1, [pc, #120]	; (378c4 <k_work_cancel_delayable+0x80>)
   3784c:	481e      	ldr	r0, [pc, #120]	; (378c8 <k_work_cancel_delayable+0x84>)
   3784e:	f240 32ea 	movw	r2, #1002	; 0x3ea
   37852:	f005 fa02 	bl	3cc5a <assert_print>
   37856:	f240 31ea 	movw	r1, #1002	; 0x3ea
   3785a:	481a      	ldr	r0, [pc, #104]	; (378c4 <k_work_cancel_delayable+0x80>)
   3785c:	f005 f9f6 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   37860:	f04f 0320 	mov.w	r3, #32
   37864:	f3ef 8511 	mrs	r5, BASEPRI
   37868:	f383 8812 	msr	BASEPRI_MAX, r3
   3786c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37870:	4816      	ldr	r0, [pc, #88]	; (378cc <k_work_cancel_delayable+0x88>)
   37872:	f7fe ff41 	bl	366f8 <z_spin_lock_valid>
   37876:	b940      	cbnz	r0, 3788a <k_work_cancel_delayable+0x46>
   37878:	4915      	ldr	r1, [pc, #84]	; (378d0 <k_work_cancel_delayable+0x8c>)
   3787a:	4813      	ldr	r0, [pc, #76]	; (378c8 <k_work_cancel_delayable+0x84>)
   3787c:	228e      	movs	r2, #142	; 0x8e
   3787e:	f005 f9ec 	bl	3cc5a <assert_print>
   37882:	218e      	movs	r1, #142	; 0x8e
   37884:	4812      	ldr	r0, [pc, #72]	; (378d0 <k_work_cancel_delayable+0x8c>)
   37886:	f005 f9e1 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   3788a:	4810      	ldr	r0, [pc, #64]	; (378cc <k_work_cancel_delayable+0x88>)
   3788c:	f7fe ff52 	bl	36734 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   37890:	4620      	mov	r0, r4
   37892:	f009 fca5 	bl	411e0 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   37896:	4620      	mov	r0, r4
   37898:	f009 fcb7 	bl	4120a <cancel_async_locked>
   3789c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3789e:	480b      	ldr	r0, [pc, #44]	; (378cc <k_work_cancel_delayable+0x88>)
   378a0:	f7fe ff38 	bl	36714 <z_spin_unlock_valid>
   378a4:	b940      	cbnz	r0, 378b8 <k_work_cancel_delayable+0x74>
   378a6:	490a      	ldr	r1, [pc, #40]	; (378d0 <k_work_cancel_delayable+0x8c>)
   378a8:	4807      	ldr	r0, [pc, #28]	; (378c8 <k_work_cancel_delayable+0x84>)
   378aa:	22b9      	movs	r2, #185	; 0xb9
   378ac:	f005 f9d5 	bl	3cc5a <assert_print>
   378b0:	21b9      	movs	r1, #185	; 0xb9
   378b2:	4807      	ldr	r0, [pc, #28]	; (378d0 <k_work_cancel_delayable+0x8c>)
   378b4:	f005 f9ca 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   378b8:	f385 8811 	msr	BASEPRI, r5
   378bc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   378c0:	4620      	mov	r0, r4
   378c2:	bd38      	pop	{r3, r4, r5, pc}
   378c4:	0004bda3 	.word	0x0004bda3
   378c8:	00044263 	.word	0x00044263
   378cc:	2001a534 	.word	0x2001a534
   378d0:	0004429d 	.word	0x0004429d

000378d4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   378d4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   378d6:	4d07      	ldr	r5, [pc, #28]	; (378f4 <z_reset_time_slice+0x20>)
   378d8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   378da:	b154      	cbz	r4, 378f2 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   378dc:	f7ed fed4 	bl	25688 <sys_clock_elapsed>
   378e0:	4b05      	ldr	r3, [pc, #20]	; (378f8 <z_reset_time_slice+0x24>)
   378e2:	4420      	add	r0, r4
   378e4:	6118      	str	r0, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   378e6:	2100      	movs	r1, #0
   378e8:	6828      	ldr	r0, [r5, #0]
	}
}
   378ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   378ee:	f001 ba23 	b.w	38d38 <z_set_timeout_expiry>
}
   378f2:	bd38      	pop	{r3, r4, r5, pc}
   378f4:	2001a54c 	.word	0x2001a54c
   378f8:	2001a500 	.word	0x2001a500

000378fc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   378fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   378fe:	4604      	mov	r4, r0
   37900:	460d      	mov	r5, r1
	__asm__ volatile(
   37902:	f04f 0320 	mov.w	r3, #32
   37906:	f3ef 8711 	mrs	r7, BASEPRI
   3790a:	f383 8812 	msr	BASEPRI_MAX, r3
   3790e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37912:	481e      	ldr	r0, [pc, #120]	; (3798c <k_sched_time_slice_set+0x90>)
   37914:	f7fe fef0 	bl	366f8 <z_spin_lock_valid>
   37918:	b940      	cbnz	r0, 3792c <k_sched_time_slice_set+0x30>
   3791a:	491d      	ldr	r1, [pc, #116]	; (37990 <k_sched_time_slice_set+0x94>)
   3791c:	481d      	ldr	r0, [pc, #116]	; (37994 <k_sched_time_slice_set+0x98>)
   3791e:	228e      	movs	r2, #142	; 0x8e
   37920:	f005 f99b 	bl	3cc5a <assert_print>
   37924:	218e      	movs	r1, #142	; 0x8e
   37926:	481a      	ldr	r0, [pc, #104]	; (37990 <k_sched_time_slice_set+0x94>)
   37928:	f005 f990 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   3792c:	4817      	ldr	r0, [pc, #92]	; (3798c <k_sched_time_slice_set+0x90>)
   3792e:	f7fe ff01 	bl	36734 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   37932:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   37934:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   37938:	f240 30e7 	movw	r0, #999	; 0x3e7
   3793c:	4e16      	ldr	r6, [pc, #88]	; (37998 <k_sched_time_slice_set+0x9c>)
   3793e:	2300      	movs	r3, #0
   37940:	6131      	str	r1, [r6, #16]
   37942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   37946:	fbe4 010c 	umlal	r0, r1, r4, ip
   3794a:	f7e5 facd 	bl	1cee8 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   3794e:	2c00      	cmp	r4, #0
   37950:	4b12      	ldr	r3, [pc, #72]	; (3799c <k_sched_time_slice_set+0xa0>)
   37952:	dc17      	bgt.n	37984 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   37954:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   37956:	4b12      	ldr	r3, [pc, #72]	; (379a0 <k_sched_time_slice_set+0xa4>)
		z_reset_time_slice(_current);
   37958:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   3795a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   3795c:	f7ff ffba 	bl	378d4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37960:	480a      	ldr	r0, [pc, #40]	; (3798c <k_sched_time_slice_set+0x90>)
   37962:	f7fe fed7 	bl	36714 <z_spin_unlock_valid>
   37966:	b940      	cbnz	r0, 3797a <k_sched_time_slice_set+0x7e>
   37968:	4909      	ldr	r1, [pc, #36]	; (37990 <k_sched_time_slice_set+0x94>)
   3796a:	480a      	ldr	r0, [pc, #40]	; (37994 <k_sched_time_slice_set+0x98>)
   3796c:	22b9      	movs	r2, #185	; 0xb9
   3796e:	f005 f974 	bl	3cc5a <assert_print>
   37972:	21b9      	movs	r1, #185	; 0xb9
   37974:	4806      	ldr	r0, [pc, #24]	; (37990 <k_sched_time_slice_set+0x94>)
   37976:	f005 f969 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   3797a:	f387 8811 	msr	BASEPRI, r7
   3797e:	f3bf 8f6f 	isb	sy
	}
}
   37982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   37984:	2802      	cmp	r0, #2
   37986:	bfb8      	it	lt
   37988:	2002      	movlt	r0, #2
   3798a:	e7e3      	b.n	37954 <k_sched_time_slice_set+0x58>
   3798c:	2001a544 	.word	0x2001a544
   37990:	0004429d 	.word	0x0004429d
   37994:	00044263 	.word	0x00044263
   37998:	2001a500 	.word	0x2001a500
   3799c:	2001a54c 	.word	0x2001a54c
   379a0:	2001a548 	.word	0x2001a548

000379a4 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   379a4:	b538      	push	{r3, r4, r5, lr}
   379a6:	4604      	mov	r4, r0
	__asm__ volatile(
   379a8:	f04f 0320 	mov.w	r3, #32
   379ac:	f3ef 8511 	mrs	r5, BASEPRI
   379b0:	f383 8812 	msr	BASEPRI_MAX, r3
   379b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   379b8:	4812      	ldr	r0, [pc, #72]	; (37a04 <z_unpend_thread_no_timeout+0x60>)
   379ba:	f7fe fe9d 	bl	366f8 <z_spin_lock_valid>
   379be:	b940      	cbnz	r0, 379d2 <z_unpend_thread_no_timeout+0x2e>
   379c0:	4911      	ldr	r1, [pc, #68]	; (37a08 <z_unpend_thread_no_timeout+0x64>)
   379c2:	4812      	ldr	r0, [pc, #72]	; (37a0c <z_unpend_thread_no_timeout+0x68>)
   379c4:	228e      	movs	r2, #142	; 0x8e
   379c6:	f005 f948 	bl	3cc5a <assert_print>
   379ca:	218e      	movs	r1, #142	; 0x8e
   379cc:	480e      	ldr	r0, [pc, #56]	; (37a08 <z_unpend_thread_no_timeout+0x64>)
   379ce:	f005 f93d 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   379d2:	480c      	ldr	r0, [pc, #48]	; (37a04 <z_unpend_thread_no_timeout+0x60>)
   379d4:	f7fe feae 	bl	36734 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   379d8:	4620      	mov	r0, r4
   379da:	f000 f8c1 	bl	37b60 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   379de:	4809      	ldr	r0, [pc, #36]	; (37a04 <z_unpend_thread_no_timeout+0x60>)
   379e0:	f7fe fe98 	bl	36714 <z_spin_unlock_valid>
   379e4:	b940      	cbnz	r0, 379f8 <z_unpend_thread_no_timeout+0x54>
   379e6:	4908      	ldr	r1, [pc, #32]	; (37a08 <z_unpend_thread_no_timeout+0x64>)
   379e8:	4808      	ldr	r0, [pc, #32]	; (37a0c <z_unpend_thread_no_timeout+0x68>)
   379ea:	22b9      	movs	r2, #185	; 0xb9
   379ec:	f005 f935 	bl	3cc5a <assert_print>
   379f0:	21b9      	movs	r1, #185	; 0xb9
   379f2:	4805      	ldr	r0, [pc, #20]	; (37a08 <z_unpend_thread_no_timeout+0x64>)
   379f4:	f005 f92a 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   379f8:	f385 8811 	msr	BASEPRI, r5
   379fc:	f3bf 8f6f 	isb	sy
	}
}
   37a00:	bd38      	pop	{r3, r4, r5, pc}
   37a02:	bf00      	nop
   37a04:	2001a544 	.word	0x2001a544
   37a08:	0004429d 	.word	0x0004429d
   37a0c:	00044263 	.word	0x00044263

00037a10 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   37a10:	b510      	push	{r4, lr}
   37a12:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   37a14:	460c      	mov	r4, r1
   37a16:	b9c1      	cbnz	r1, 37a4a <z_reschedule+0x3a>
   37a18:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   37a1c:	b9aa      	cbnz	r2, 37a4a <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   37a1e:	4a14      	ldr	r2, [pc, #80]	; (37a70 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   37a20:	69d1      	ldr	r1, [r2, #28]
   37a22:	6892      	ldr	r2, [r2, #8]
   37a24:	4291      	cmp	r1, r2
   37a26:	d010      	beq.n	37a4a <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37a28:	f7fe fe74 	bl	36714 <z_spin_unlock_valid>
   37a2c:	b940      	cbnz	r0, 37a40 <z_reschedule+0x30>
   37a2e:	4911      	ldr	r1, [pc, #68]	; (37a74 <z_reschedule+0x64>)
   37a30:	4811      	ldr	r0, [pc, #68]	; (37a78 <z_reschedule+0x68>)
   37a32:	22d0      	movs	r2, #208	; 0xd0
   37a34:	f005 f911 	bl	3cc5a <assert_print>
   37a38:	21d0      	movs	r1, #208	; 0xd0
   37a3a:	480e      	ldr	r0, [pc, #56]	; (37a74 <z_reschedule+0x64>)
   37a3c:	f005 f906 	bl	3cc4c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   37a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   37a44:	2000      	movs	r0, #0
   37a46:	f7eb b9a9 	b.w	22d9c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37a4a:	4618      	mov	r0, r3
   37a4c:	f7fe fe62 	bl	36714 <z_spin_unlock_valid>
   37a50:	b940      	cbnz	r0, 37a64 <z_reschedule+0x54>
   37a52:	4908      	ldr	r1, [pc, #32]	; (37a74 <z_reschedule+0x64>)
   37a54:	4808      	ldr	r0, [pc, #32]	; (37a78 <z_reschedule+0x68>)
   37a56:	22b9      	movs	r2, #185	; 0xb9
   37a58:	f005 f8ff 	bl	3cc5a <assert_print>
   37a5c:	21b9      	movs	r1, #185	; 0xb9
   37a5e:	4805      	ldr	r0, [pc, #20]	; (37a74 <z_reschedule+0x64>)
   37a60:	f005 f8f4 	bl	3cc4c <assert_post_action>
   37a64:	f384 8811 	msr	BASEPRI, r4
   37a68:	f3bf 8f6f 	isb	sy
   37a6c:	bd10      	pop	{r4, pc}
   37a6e:	bf00      	nop
   37a70:	2001a500 	.word	0x2001a500
   37a74:	0004429d 	.word	0x0004429d
   37a78:	00044263 	.word	0x00044263

00037a7c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   37a7c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   37a7e:	f04f 0320 	mov.w	r3, #32
   37a82:	f3ef 8511 	mrs	r5, BASEPRI
   37a86:	f383 8812 	msr	BASEPRI_MAX, r3
   37a8a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37a8e:	4820      	ldr	r0, [pc, #128]	; (37b10 <k_sched_lock+0x94>)
   37a90:	f7fe fe32 	bl	366f8 <z_spin_lock_valid>
   37a94:	b940      	cbnz	r0, 37aa8 <k_sched_lock+0x2c>
   37a96:	491f      	ldr	r1, [pc, #124]	; (37b14 <k_sched_lock+0x98>)
   37a98:	481f      	ldr	r0, [pc, #124]	; (37b18 <k_sched_lock+0x9c>)
   37a9a:	228e      	movs	r2, #142	; 0x8e
   37a9c:	f005 f8dd 	bl	3cc5a <assert_print>
   37aa0:	218e      	movs	r1, #142	; 0x8e
   37aa2:	481c      	ldr	r0, [pc, #112]	; (37b14 <k_sched_lock+0x98>)
   37aa4:	f005 f8d2 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   37aa8:	4819      	ldr	r0, [pc, #100]	; (37b10 <k_sched_lock+0x94>)
   37aaa:	f7fe fe43 	bl	36734 <z_spin_lock_set_owner>
   37aae:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   37ab2:	b143      	cbz	r3, 37ac6 <k_sched_lock+0x4a>
   37ab4:	4919      	ldr	r1, [pc, #100]	; (37b1c <k_sched_lock+0xa0>)
   37ab6:	4818      	ldr	r0, [pc, #96]	; (37b18 <k_sched_lock+0x9c>)
   37ab8:	22fd      	movs	r2, #253	; 0xfd
   37aba:	f005 f8ce 	bl	3cc5a <assert_print>
   37abe:	21fd      	movs	r1, #253	; 0xfd
   37ac0:	4816      	ldr	r0, [pc, #88]	; (37b1c <k_sched_lock+0xa0>)
   37ac2:	f005 f8c3 	bl	3cc4c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   37ac6:	4c16      	ldr	r4, [pc, #88]	; (37b20 <k_sched_lock+0xa4>)
   37ac8:	68a3      	ldr	r3, [r4, #8]
   37aca:	7bdb      	ldrb	r3, [r3, #15]
   37acc:	2b01      	cmp	r3, #1
   37ace:	d108      	bne.n	37ae2 <k_sched_lock+0x66>
   37ad0:	4912      	ldr	r1, [pc, #72]	; (37b1c <k_sched_lock+0xa0>)
   37ad2:	4811      	ldr	r0, [pc, #68]	; (37b18 <k_sched_lock+0x9c>)
   37ad4:	22fe      	movs	r2, #254	; 0xfe
   37ad6:	f005 f8c0 	bl	3cc5a <assert_print>
   37ada:	21fe      	movs	r1, #254	; 0xfe
   37adc:	480f      	ldr	r0, [pc, #60]	; (37b1c <k_sched_lock+0xa0>)
   37ade:	f005 f8b5 	bl	3cc4c <assert_post_action>
	--_current->base.sched_locked;
   37ae2:	68a2      	ldr	r2, [r4, #8]
   37ae4:	7bd3      	ldrb	r3, [r2, #15]
   37ae6:	3b01      	subs	r3, #1
   37ae8:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37aea:	4809      	ldr	r0, [pc, #36]	; (37b10 <k_sched_lock+0x94>)
   37aec:	f7fe fe12 	bl	36714 <z_spin_unlock_valid>
   37af0:	b940      	cbnz	r0, 37b04 <k_sched_lock+0x88>
   37af2:	4908      	ldr	r1, [pc, #32]	; (37b14 <k_sched_lock+0x98>)
   37af4:	4808      	ldr	r0, [pc, #32]	; (37b18 <k_sched_lock+0x9c>)
   37af6:	22b9      	movs	r2, #185	; 0xb9
   37af8:	f005 f8af 	bl	3cc5a <assert_print>
   37afc:	21b9      	movs	r1, #185	; 0xb9
   37afe:	4805      	ldr	r0, [pc, #20]	; (37b14 <k_sched_lock+0x98>)
   37b00:	f005 f8a4 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   37b04:	f385 8811 	msr	BASEPRI, r5
   37b08:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   37b0c:	bd38      	pop	{r3, r4, r5, pc}
   37b0e:	bf00      	nop
   37b10:	2001a544 	.word	0x2001a544
   37b14:	0004429d 	.word	0x0004429d
   37b18:	00044263 	.word	0x00044263
   37b1c:	0004bd58 	.word	0x0004bd58
   37b20:	2001a500 	.word	0x2001a500

00037b24 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37b24:	4b0b      	ldr	r3, [pc, #44]	; (37b54 <z_priq_dumb_remove+0x30>)
{
   37b26:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37b28:	4299      	cmp	r1, r3
{
   37b2a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37b2c:	d10a      	bne.n	37b44 <z_priq_dumb_remove+0x20>
   37b2e:	490a      	ldr	r1, [pc, #40]	; (37b58 <z_priq_dumb_remove+0x34>)
   37b30:	480a      	ldr	r0, [pc, #40]	; (37b5c <z_priq_dumb_remove+0x38>)
   37b32:	f240 423d 	movw	r2, #1085	; 0x43d
   37b36:	f005 f890 	bl	3cc5a <assert_print>
   37b3a:	f240 413d 	movw	r1, #1085	; 0x43d
   37b3e:	4806      	ldr	r0, [pc, #24]	; (37b58 <z_priq_dumb_remove+0x34>)
   37b40:	f005 f884 	bl	3cc4c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   37b44:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   37b48:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   37b4a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   37b4c:	2300      	movs	r3, #0
	node->prev = NULL;
   37b4e:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   37b52:	bd10      	pop	{r4, pc}
   37b54:	20018e00 	.word	0x20018e00
   37b58:	0004bdc4 	.word	0x0004bdc4
   37b5c:	00044263 	.word	0x00044263

00037b60 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   37b60:	6883      	ldr	r3, [r0, #8]
{
   37b62:	b510      	push	{r4, lr}
   37b64:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   37b66:	b953      	cbnz	r3, 37b7e <unpend_thread_no_timeout+0x1e>
   37b68:	490a      	ldr	r1, [pc, #40]	; (37b94 <unpend_thread_no_timeout+0x34>)
   37b6a:	480b      	ldr	r0, [pc, #44]	; (37b98 <unpend_thread_no_timeout+0x38>)
   37b6c:	f240 22b9 	movw	r2, #697	; 0x2b9
   37b70:	f005 f873 	bl	3cc5a <assert_print>
   37b74:	f240 21b9 	movw	r1, #697	; 0x2b9
   37b78:	4806      	ldr	r0, [pc, #24]	; (37b94 <unpend_thread_no_timeout+0x34>)
   37b7a:	f005 f867 	bl	3cc4c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   37b7e:	4621      	mov	r1, r4
   37b80:	68a0      	ldr	r0, [r4, #8]
   37b82:	f7ff ffcf 	bl	37b24 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   37b86:	7b63      	ldrb	r3, [r4, #13]
   37b88:	f023 0302 	bic.w	r3, r3, #2
   37b8c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   37b8e:	2300      	movs	r3, #0
   37b90:	60a3      	str	r3, [r4, #8]
}
   37b92:	bd10      	pop	{r4, pc}
   37b94:	0004bdc4 	.word	0x0004bdc4
   37b98:	00044263 	.word	0x00044263

00037b9c <z_unpend_thread>:
{
   37b9c:	b538      	push	{r3, r4, r5, lr}
   37b9e:	4604      	mov	r4, r0
	__asm__ volatile(
   37ba0:	f04f 0320 	mov.w	r3, #32
   37ba4:	f3ef 8511 	mrs	r5, BASEPRI
   37ba8:	f383 8812 	msr	BASEPRI_MAX, r3
   37bac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37bb0:	4814      	ldr	r0, [pc, #80]	; (37c04 <z_unpend_thread+0x68>)
   37bb2:	f7fe fda1 	bl	366f8 <z_spin_lock_valid>
   37bb6:	b940      	cbnz	r0, 37bca <z_unpend_thread+0x2e>
   37bb8:	4913      	ldr	r1, [pc, #76]	; (37c08 <z_unpend_thread+0x6c>)
   37bba:	4814      	ldr	r0, [pc, #80]	; (37c0c <z_unpend_thread+0x70>)
   37bbc:	228e      	movs	r2, #142	; 0x8e
   37bbe:	f005 f84c 	bl	3cc5a <assert_print>
   37bc2:	218e      	movs	r1, #142	; 0x8e
   37bc4:	4810      	ldr	r0, [pc, #64]	; (37c08 <z_unpend_thread+0x6c>)
   37bc6:	f005 f841 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   37bca:	480e      	ldr	r0, [pc, #56]	; (37c04 <z_unpend_thread+0x68>)
   37bcc:	f7fe fdb2 	bl	36734 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   37bd0:	4620      	mov	r0, r4
   37bd2:	f7ff ffc5 	bl	37b60 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37bd6:	480b      	ldr	r0, [pc, #44]	; (37c04 <z_unpend_thread+0x68>)
   37bd8:	f7fe fd9c 	bl	36714 <z_spin_unlock_valid>
   37bdc:	b940      	cbnz	r0, 37bf0 <z_unpend_thread+0x54>
   37bde:	490a      	ldr	r1, [pc, #40]	; (37c08 <z_unpend_thread+0x6c>)
   37be0:	480a      	ldr	r0, [pc, #40]	; (37c0c <z_unpend_thread+0x70>)
   37be2:	22b9      	movs	r2, #185	; 0xb9
   37be4:	f005 f839 	bl	3cc5a <assert_print>
   37be8:	21b9      	movs	r1, #185	; 0xb9
   37bea:	4807      	ldr	r0, [pc, #28]	; (37c08 <z_unpend_thread+0x6c>)
   37bec:	f005 f82e 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   37bf0:	f385 8811 	msr	BASEPRI, r5
   37bf4:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   37bf8:	f104 0018 	add.w	r0, r4, #24
}
   37bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   37c00:	f000 bfee 	b.w	38be0 <z_abort_timeout>
   37c04:	2001a544 	.word	0x2001a544
   37c08:	0004429d 	.word	0x0004429d
   37c0c:	00044263 	.word	0x00044263

00037c10 <update_cache>:
{
   37c10:	b538      	push	{r3, r4, r5, lr}
   37c12:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   37c14:	4812      	ldr	r0, [pc, #72]	; (37c60 <update_cache+0x50>)
   37c16:	f009 fb4a 	bl	412ae <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   37c1a:	4d12      	ldr	r5, [pc, #72]	; (37c64 <update_cache+0x54>)
   37c1c:	4604      	mov	r4, r0
   37c1e:	b900      	cbnz	r0, 37c22 <update_cache+0x12>
   37c20:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   37c22:	b9aa      	cbnz	r2, 37c50 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   37c24:	68ab      	ldr	r3, [r5, #8]
   37c26:	b943      	cbnz	r3, 37c3a <update_cache+0x2a>
   37c28:	490f      	ldr	r1, [pc, #60]	; (37c68 <update_cache+0x58>)
   37c2a:	4810      	ldr	r0, [pc, #64]	; (37c6c <update_cache+0x5c>)
   37c2c:	2289      	movs	r2, #137	; 0x89
   37c2e:	f005 f814 	bl	3cc5a <assert_print>
   37c32:	2189      	movs	r1, #137	; 0x89
   37c34:	480c      	ldr	r0, [pc, #48]	; (37c68 <update_cache+0x58>)
   37c36:	f005 f809 	bl	3cc4c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   37c3a:	68ab      	ldr	r3, [r5, #8]
   37c3c:	7b5a      	ldrb	r2, [r3, #13]
   37c3e:	06d2      	lsls	r2, r2, #27
   37c40:	d106      	bne.n	37c50 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   37c42:	69a2      	ldr	r2, [r4, #24]
   37c44:	b922      	cbnz	r2, 37c50 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   37c46:	89da      	ldrh	r2, [r3, #14]
   37c48:	2a7f      	cmp	r2, #127	; 0x7f
   37c4a:	d901      	bls.n	37c50 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   37c4c:	61eb      	str	r3, [r5, #28]
}
   37c4e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   37c50:	68ab      	ldr	r3, [r5, #8]
   37c52:	42a3      	cmp	r3, r4
   37c54:	d002      	beq.n	37c5c <update_cache+0x4c>
			z_reset_time_slice(thread);
   37c56:	4620      	mov	r0, r4
   37c58:	f7ff fe3c 	bl	378d4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   37c5c:	61ec      	str	r4, [r5, #28]
}
   37c5e:	e7f6      	b.n	37c4e <update_cache+0x3e>
   37c60:	2001a520 	.word	0x2001a520
   37c64:	2001a500 	.word	0x2001a500
   37c68:	0004bdc4 	.word	0x0004bdc4
   37c6c:	00044263 	.word	0x00044263

00037c70 <move_thread_to_end_of_prio_q>:
{
   37c70:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   37c72:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   37c76:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   37c78:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   37c7a:	7b43      	ldrb	r3, [r0, #13]
   37c7c:	da06      	bge.n	37c8c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   37c82:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37c84:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   37c86:	481d      	ldr	r0, [pc, #116]	; (37cfc <move_thread_to_end_of_prio_q+0x8c>)
   37c88:	f7ff ff4c 	bl	37b24 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   37c8c:	7b63      	ldrb	r3, [r4, #13]
   37c8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   37c92:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37c94:	4b1a      	ldr	r3, [pc, #104]	; (37d00 <move_thread_to_end_of_prio_q+0x90>)
   37c96:	429c      	cmp	r4, r3
   37c98:	d108      	bne.n	37cac <move_thread_to_end_of_prio_q+0x3c>
   37c9a:	491a      	ldr	r1, [pc, #104]	; (37d04 <move_thread_to_end_of_prio_q+0x94>)
   37c9c:	481a      	ldr	r0, [pc, #104]	; (37d08 <move_thread_to_end_of_prio_q+0x98>)
   37c9e:	22ba      	movs	r2, #186	; 0xba
   37ca0:	f004 ffdb 	bl	3cc5a <assert_print>
   37ca4:	21ba      	movs	r1, #186	; 0xba
   37ca6:	4817      	ldr	r0, [pc, #92]	; (37d04 <move_thread_to_end_of_prio_q+0x94>)
   37ca8:	f004 ffd0 	bl	3cc4c <assert_post_action>
	return list->head == list;
   37cac:	4a17      	ldr	r2, [pc, #92]	; (37d0c <move_thread_to_end_of_prio_q+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37cae:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   37cb2:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37cb6:	42ab      	cmp	r3, r5
   37cb8:	d01b      	beq.n	37cf2 <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37cba:	b1d3      	cbz	r3, 37cf2 <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
   37cbc:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   37cc0:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   37cc4:	428e      	cmp	r6, r1
   37cc6:	d00f      	beq.n	37ce8 <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
   37cc8:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   37cca:	2900      	cmp	r1, #0
   37ccc:	dd0c      	ble.n	37ce8 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
   37cce:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   37cd0:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   37cd4:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   37cd6:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   37cd8:	6890      	ldr	r0, [r2, #8]
   37cda:	1b03      	subs	r3, r0, r4
   37cdc:	4258      	negs	r0, r3
   37cde:	4158      	adcs	r0, r3
}
   37ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   37ce4:	f7ff bf94 	b.w	37c10 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   37ce8:	4283      	cmp	r3, r0
   37cea:	d002      	beq.n	37cf2 <move_thread_to_end_of_prio_q+0x82>
   37cec:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37cee:	2b00      	cmp	r3, #0
   37cf0:	d1e6      	bne.n	37cc0 <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
   37cf2:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   37cf6:	6004      	str	r4, [r0, #0]
	list->tail = node;
   37cf8:	6254      	str	r4, [r2, #36]	; 0x24
}
   37cfa:	e7ed      	b.n	37cd8 <move_thread_to_end_of_prio_q+0x68>
   37cfc:	2001a520 	.word	0x2001a520
   37d00:	20018e00 	.word	0x20018e00
   37d04:	0004bdc4 	.word	0x0004bdc4
   37d08:	00044263 	.word	0x00044263
   37d0c:	2001a500 	.word	0x2001a500

00037d10 <z_time_slice>:
{
   37d10:	b570      	push	{r4, r5, r6, lr}
   37d12:	4605      	mov	r5, r0
	__asm__ volatile(
   37d14:	f04f 0320 	mov.w	r3, #32
   37d18:	f3ef 8611 	mrs	r6, BASEPRI
   37d1c:	f383 8812 	msr	BASEPRI_MAX, r3
   37d20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37d24:	4825      	ldr	r0, [pc, #148]	; (37dbc <z_time_slice+0xac>)
   37d26:	f7fe fce7 	bl	366f8 <z_spin_lock_valid>
   37d2a:	b940      	cbnz	r0, 37d3e <z_time_slice+0x2e>
   37d2c:	4924      	ldr	r1, [pc, #144]	; (37dc0 <z_time_slice+0xb0>)
   37d2e:	4825      	ldr	r0, [pc, #148]	; (37dc4 <z_time_slice+0xb4>)
   37d30:	228e      	movs	r2, #142	; 0x8e
   37d32:	f004 ff92 	bl	3cc5a <assert_print>
   37d36:	218e      	movs	r1, #142	; 0x8e
   37d38:	4821      	ldr	r0, [pc, #132]	; (37dc0 <z_time_slice+0xb0>)
   37d3a:	f004 ff87 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   37d3e:	481f      	ldr	r0, [pc, #124]	; (37dbc <z_time_slice+0xac>)
   37d40:	f7fe fcf8 	bl	36734 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   37d44:	4b20      	ldr	r3, [pc, #128]	; (37dc8 <z_time_slice+0xb8>)
   37d46:	4a21      	ldr	r2, [pc, #132]	; (37dcc <z_time_slice+0xbc>)
   37d48:	689c      	ldr	r4, [r3, #8]
   37d4a:	6811      	ldr	r1, [r2, #0]
   37d4c:	428c      	cmp	r4, r1
   37d4e:	d114      	bne.n	37d7a <z_time_slice+0x6a>
	z_reset_time_slice(curr);
   37d50:	4620      	mov	r0, r4
   37d52:	f7ff fdbf 	bl	378d4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37d56:	4819      	ldr	r0, [pc, #100]	; (37dbc <z_time_slice+0xac>)
   37d58:	f7fe fcdc 	bl	36714 <z_spin_unlock_valid>
   37d5c:	b940      	cbnz	r0, 37d70 <z_time_slice+0x60>
   37d5e:	4918      	ldr	r1, [pc, #96]	; (37dc0 <z_time_slice+0xb0>)
   37d60:	4818      	ldr	r0, [pc, #96]	; (37dc4 <z_time_slice+0xb4>)
   37d62:	22b9      	movs	r2, #185	; 0xb9
   37d64:	f004 ff79 	bl	3cc5a <assert_print>
   37d68:	21b9      	movs	r1, #185	; 0xb9
   37d6a:	4815      	ldr	r0, [pc, #84]	; (37dc0 <z_time_slice+0xb0>)
   37d6c:	f004 ff6e 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   37d70:	f386 8811 	msr	BASEPRI, r6
   37d74:	f3bf 8f6f 	isb	sy
}
   37d78:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   37d7a:	2100      	movs	r1, #0
   37d7c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   37d7e:	4a14      	ldr	r2, [pc, #80]	; (37dd0 <z_time_slice+0xc0>)
	if (slice_time(_current) && sliceable(_current)) {
   37d80:	6812      	ldr	r2, [r2, #0]
   37d82:	b1c2      	cbz	r2, 37db6 <z_time_slice+0xa6>
		&& !z_is_idle_thread_object(thread);
   37d84:	89e2      	ldrh	r2, [r4, #14]
   37d86:	2a7f      	cmp	r2, #127	; 0x7f
   37d88:	d815      	bhi.n	37db6 <z_time_slice+0xa6>
		&& !z_is_thread_prevented_from_running(thread)
   37d8a:	7b62      	ldrb	r2, [r4, #13]
   37d8c:	06d2      	lsls	r2, r2, #27
   37d8e:	d112      	bne.n	37db6 <z_time_slice+0xa6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   37d90:	4a10      	ldr	r2, [pc, #64]	; (37dd4 <z_time_slice+0xc4>)
   37d92:	f994 100e 	ldrsb.w	r1, [r4, #14]
   37d96:	6812      	ldr	r2, [r2, #0]
   37d98:	4291      	cmp	r1, r2
   37d9a:	db0c      	blt.n	37db6 <z_time_slice+0xa6>
	if (slice_time(_current) && sliceable(_current)) {
   37d9c:	4a0e      	ldr	r2, [pc, #56]	; (37dd8 <z_time_slice+0xc8>)
   37d9e:	4294      	cmp	r4, r2
   37da0:	d009      	beq.n	37db6 <z_time_slice+0xa6>
		if (ticks >= _current_cpu->slice_ticks) {
   37da2:	691a      	ldr	r2, [r3, #16]
   37da4:	42aa      	cmp	r2, r5
   37da6:	dc03      	bgt.n	37db0 <z_time_slice+0xa0>
		move_thread_to_end_of_prio_q(curr);
   37da8:	4620      	mov	r0, r4
   37daa:	f7ff ff61 	bl	37c70 <move_thread_to_end_of_prio_q>
   37dae:	e7cf      	b.n	37d50 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   37db0:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   37db2:	611a      	str	r2, [r3, #16]
   37db4:	e7cf      	b.n	37d56 <z_time_slice+0x46>
   37db6:	2200      	movs	r2, #0
   37db8:	e7fb      	b.n	37db2 <z_time_slice+0xa2>
   37dba:	bf00      	nop
   37dbc:	2001a544 	.word	0x2001a544
   37dc0:	0004429d 	.word	0x0004429d
   37dc4:	00044263 	.word	0x00044263
   37dc8:	2001a500 	.word	0x2001a500
   37dcc:	2001a540 	.word	0x2001a540
   37dd0:	2001a54c 	.word	0x2001a54c
   37dd4:	2001a548 	.word	0x2001a548
   37dd8:	20018e00 	.word	0x20018e00

00037ddc <ready_thread>:
{
   37ddc:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   37dde:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   37de2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   37de4:	2a00      	cmp	r2, #0
   37de6:	7b43      	ldrb	r3, [r0, #13]
   37de8:	db38      	blt.n	37e5c <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   37dea:	06da      	lsls	r2, r3, #27
   37dec:	d136      	bne.n	37e5c <ready_thread+0x80>
   37dee:	6982      	ldr	r2, [r0, #24]
   37df0:	2a00      	cmp	r2, #0
   37df2:	d133      	bne.n	37e5c <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
   37df4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   37df8:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37dfa:	4b19      	ldr	r3, [pc, #100]	; (37e60 <ready_thread+0x84>)
   37dfc:	4298      	cmp	r0, r3
   37dfe:	d108      	bne.n	37e12 <ready_thread+0x36>
   37e00:	4918      	ldr	r1, [pc, #96]	; (37e64 <ready_thread+0x88>)
   37e02:	4819      	ldr	r0, [pc, #100]	; (37e68 <ready_thread+0x8c>)
   37e04:	22ba      	movs	r2, #186	; 0xba
   37e06:	f004 ff28 	bl	3cc5a <assert_print>
   37e0a:	21ba      	movs	r1, #186	; 0xba
   37e0c:	4815      	ldr	r0, [pc, #84]	; (37e64 <ready_thread+0x88>)
   37e0e:	f004 ff1d 	bl	3cc4c <assert_post_action>
	return list->head == list;
   37e12:	4a16      	ldr	r2, [pc, #88]	; (37e6c <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37e14:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   37e18:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37e1c:	42ab      	cmp	r3, r5
   37e1e:	d018      	beq.n	37e52 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37e20:	b1bb      	cbz	r3, 37e52 <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
   37e22:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   37e26:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   37e2a:	428e      	cmp	r6, r1
   37e2c:	d00c      	beq.n	37e48 <ready_thread+0x6c>
		return b2 - b1;
   37e2e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   37e30:	2900      	cmp	r1, #0
   37e32:	dd09      	ble.n	37e48 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
   37e34:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   37e36:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   37e3a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   37e3c:	605c      	str	r4, [r3, #4]
		update_cache(0);
   37e3e:	2000      	movs	r0, #0
}
   37e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   37e44:	f7ff bee4 	b.w	37c10 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   37e48:	4298      	cmp	r0, r3
   37e4a:	d002      	beq.n	37e52 <ready_thread+0x76>
   37e4c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37e4e:	2b00      	cmp	r3, #0
   37e50:	d1e9      	bne.n	37e26 <ready_thread+0x4a>
	node->prev = tail;
   37e52:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   37e56:	6004      	str	r4, [r0, #0]
	list->tail = node;
   37e58:	6254      	str	r4, [r2, #36]	; 0x24
}
   37e5a:	e7f0      	b.n	37e3e <ready_thread+0x62>
}
   37e5c:	bd70      	pop	{r4, r5, r6, pc}
   37e5e:	bf00      	nop
   37e60:	20018e00 	.word	0x20018e00
   37e64:	0004bdc4 	.word	0x0004bdc4
   37e68:	00044263 	.word	0x00044263
   37e6c:	2001a500 	.word	0x2001a500

00037e70 <z_ready_thread>:
{
   37e70:	b538      	push	{r3, r4, r5, lr}
   37e72:	4604      	mov	r4, r0
	__asm__ volatile(
   37e74:	f04f 0320 	mov.w	r3, #32
   37e78:	f3ef 8511 	mrs	r5, BASEPRI
   37e7c:	f383 8812 	msr	BASEPRI_MAX, r3
   37e80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37e84:	4812      	ldr	r0, [pc, #72]	; (37ed0 <z_ready_thread+0x60>)
   37e86:	f7fe fc37 	bl	366f8 <z_spin_lock_valid>
   37e8a:	b940      	cbnz	r0, 37e9e <z_ready_thread+0x2e>
   37e8c:	4911      	ldr	r1, [pc, #68]	; (37ed4 <z_ready_thread+0x64>)
   37e8e:	4812      	ldr	r0, [pc, #72]	; (37ed8 <z_ready_thread+0x68>)
   37e90:	228e      	movs	r2, #142	; 0x8e
   37e92:	f004 fee2 	bl	3cc5a <assert_print>
   37e96:	218e      	movs	r1, #142	; 0x8e
   37e98:	480e      	ldr	r0, [pc, #56]	; (37ed4 <z_ready_thread+0x64>)
   37e9a:	f004 fed7 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   37e9e:	480c      	ldr	r0, [pc, #48]	; (37ed0 <z_ready_thread+0x60>)
   37ea0:	f7fe fc48 	bl	36734 <z_spin_lock_set_owner>
			ready_thread(thread);
   37ea4:	4620      	mov	r0, r4
   37ea6:	f7ff ff99 	bl	37ddc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37eaa:	4809      	ldr	r0, [pc, #36]	; (37ed0 <z_ready_thread+0x60>)
   37eac:	f7fe fc32 	bl	36714 <z_spin_unlock_valid>
   37eb0:	b940      	cbnz	r0, 37ec4 <z_ready_thread+0x54>
   37eb2:	4908      	ldr	r1, [pc, #32]	; (37ed4 <z_ready_thread+0x64>)
   37eb4:	4808      	ldr	r0, [pc, #32]	; (37ed8 <z_ready_thread+0x68>)
   37eb6:	22b9      	movs	r2, #185	; 0xb9
   37eb8:	f004 fecf 	bl	3cc5a <assert_print>
   37ebc:	21b9      	movs	r1, #185	; 0xb9
   37ebe:	4805      	ldr	r0, [pc, #20]	; (37ed4 <z_ready_thread+0x64>)
   37ec0:	f004 fec4 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   37ec4:	f385 8811 	msr	BASEPRI, r5
   37ec8:	f3bf 8f6f 	isb	sy
}
   37ecc:	bd38      	pop	{r3, r4, r5, pc}
   37ece:	bf00      	nop
   37ed0:	2001a544 	.word	0x2001a544
   37ed4:	0004429d 	.word	0x0004429d
   37ed8:	00044263 	.word	0x00044263

00037edc <z_sched_start>:
{
   37edc:	b538      	push	{r3, r4, r5, lr}
   37ede:	4604      	mov	r4, r0
	__asm__ volatile(
   37ee0:	f04f 0320 	mov.w	r3, #32
   37ee4:	f3ef 8511 	mrs	r5, BASEPRI
   37ee8:	f383 8812 	msr	BASEPRI_MAX, r3
   37eec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37ef0:	4818      	ldr	r0, [pc, #96]	; (37f54 <z_sched_start+0x78>)
   37ef2:	f7fe fc01 	bl	366f8 <z_spin_lock_valid>
   37ef6:	b940      	cbnz	r0, 37f0a <z_sched_start+0x2e>
   37ef8:	4917      	ldr	r1, [pc, #92]	; (37f58 <z_sched_start+0x7c>)
   37efa:	4818      	ldr	r0, [pc, #96]	; (37f5c <z_sched_start+0x80>)
   37efc:	228e      	movs	r2, #142	; 0x8e
   37efe:	f004 feac 	bl	3cc5a <assert_print>
   37f02:	218e      	movs	r1, #142	; 0x8e
   37f04:	4814      	ldr	r0, [pc, #80]	; (37f58 <z_sched_start+0x7c>)
   37f06:	f004 fea1 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   37f0a:	4812      	ldr	r0, [pc, #72]	; (37f54 <z_sched_start+0x78>)
   37f0c:	f7fe fc12 	bl	36734 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   37f10:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   37f12:	075a      	lsls	r2, r3, #29
   37f14:	d411      	bmi.n	37f3a <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37f16:	480f      	ldr	r0, [pc, #60]	; (37f54 <z_sched_start+0x78>)
   37f18:	f7fe fbfc 	bl	36714 <z_spin_unlock_valid>
   37f1c:	b940      	cbnz	r0, 37f30 <z_sched_start+0x54>
   37f1e:	490e      	ldr	r1, [pc, #56]	; (37f58 <z_sched_start+0x7c>)
   37f20:	480e      	ldr	r0, [pc, #56]	; (37f5c <z_sched_start+0x80>)
   37f22:	22b9      	movs	r2, #185	; 0xb9
   37f24:	f004 fe99 	bl	3cc5a <assert_print>
   37f28:	21b9      	movs	r1, #185	; 0xb9
   37f2a:	480b      	ldr	r0, [pc, #44]	; (37f58 <z_sched_start+0x7c>)
   37f2c:	f004 fe8e 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   37f30:	f385 8811 	msr	BASEPRI, r5
   37f34:	f3bf 8f6f 	isb	sy
}
   37f38:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   37f3a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   37f3e:	4620      	mov	r0, r4
   37f40:	7363      	strb	r3, [r4, #13]
   37f42:	f7ff ff4b 	bl	37ddc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   37f46:	4629      	mov	r1, r5
}
   37f48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   37f4c:	4801      	ldr	r0, [pc, #4]	; (37f54 <z_sched_start+0x78>)
   37f4e:	f7ff bd5f 	b.w	37a10 <z_reschedule>
   37f52:	bf00      	nop
   37f54:	2001a544 	.word	0x2001a544
   37f58:	0004429d 	.word	0x0004429d
   37f5c:	00044263 	.word	0x00044263

00037f60 <z_impl_k_thread_resume>:
{
   37f60:	b538      	push	{r3, r4, r5, lr}
   37f62:	4604      	mov	r4, r0
	__asm__ volatile(
   37f64:	f04f 0320 	mov.w	r3, #32
   37f68:	f3ef 8511 	mrs	r5, BASEPRI
   37f6c:	f383 8812 	msr	BASEPRI_MAX, r3
   37f70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37f74:	4818      	ldr	r0, [pc, #96]	; (37fd8 <z_impl_k_thread_resume+0x78>)
   37f76:	f7fe fbbf 	bl	366f8 <z_spin_lock_valid>
   37f7a:	b940      	cbnz	r0, 37f8e <z_impl_k_thread_resume+0x2e>
   37f7c:	4917      	ldr	r1, [pc, #92]	; (37fdc <z_impl_k_thread_resume+0x7c>)
   37f7e:	4818      	ldr	r0, [pc, #96]	; (37fe0 <z_impl_k_thread_resume+0x80>)
   37f80:	228e      	movs	r2, #142	; 0x8e
   37f82:	f004 fe6a 	bl	3cc5a <assert_print>
   37f86:	218e      	movs	r1, #142	; 0x8e
   37f88:	4814      	ldr	r0, [pc, #80]	; (37fdc <z_impl_k_thread_resume+0x7c>)
   37f8a:	f004 fe5f 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   37f8e:	4812      	ldr	r0, [pc, #72]	; (37fd8 <z_impl_k_thread_resume+0x78>)
   37f90:	f7fe fbd0 	bl	36734 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_SUSPENDED) != 0U;
   37f94:	7b63      	ldrb	r3, [r4, #13]
	if (!z_is_thread_suspended(thread)) {
   37f96:	06da      	lsls	r2, r3, #27
   37f98:	d411      	bmi.n	37fbe <z_impl_k_thread_resume+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37f9a:	480f      	ldr	r0, [pc, #60]	; (37fd8 <z_impl_k_thread_resume+0x78>)
   37f9c:	f7fe fbba 	bl	36714 <z_spin_unlock_valid>
   37fa0:	b940      	cbnz	r0, 37fb4 <z_impl_k_thread_resume+0x54>
   37fa2:	490e      	ldr	r1, [pc, #56]	; (37fdc <z_impl_k_thread_resume+0x7c>)
   37fa4:	480e      	ldr	r0, [pc, #56]	; (37fe0 <z_impl_k_thread_resume+0x80>)
   37fa6:	22b9      	movs	r2, #185	; 0xb9
   37fa8:	f004 fe57 	bl	3cc5a <assert_print>
   37fac:	21b9      	movs	r1, #185	; 0xb9
   37fae:	480b      	ldr	r0, [pc, #44]	; (37fdc <z_impl_k_thread_resume+0x7c>)
   37fb0:	f004 fe4c 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   37fb4:	f385 8811 	msr	BASEPRI, r5
   37fb8:	f3bf 8f6f 	isb	sy
}
   37fbc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   37fbe:	f023 0310 	bic.w	r3, r3, #16
	ready_thread(thread);
   37fc2:	4620      	mov	r0, r4
   37fc4:	7363      	strb	r3, [r4, #13]
   37fc6:	f7ff ff09 	bl	37ddc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   37fca:	4629      	mov	r1, r5
}
   37fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   37fd0:	4801      	ldr	r0, [pc, #4]	; (37fd8 <z_impl_k_thread_resume+0x78>)
   37fd2:	f7ff bd1d 	b.w	37a10 <z_reschedule>
   37fd6:	bf00      	nop
   37fd8:	2001a544 	.word	0x2001a544
   37fdc:	0004429d 	.word	0x0004429d
   37fe0:	00044263 	.word	0x00044263

00037fe4 <z_thread_timeout>:
{
   37fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   37fe6:	4604      	mov	r4, r0
	__asm__ volatile(
   37fe8:	f04f 0320 	mov.w	r3, #32
   37fec:	f3ef 8511 	mrs	r5, BASEPRI
   37ff0:	f383 8812 	msr	BASEPRI_MAX, r3
   37ff4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37ff8:	481c      	ldr	r0, [pc, #112]	; (3806c <z_thread_timeout+0x88>)
   37ffa:	f7fe fb7d 	bl	366f8 <z_spin_lock_valid>
   37ffe:	b940      	cbnz	r0, 38012 <z_thread_timeout+0x2e>
   38000:	491b      	ldr	r1, [pc, #108]	; (38070 <z_thread_timeout+0x8c>)
   38002:	481c      	ldr	r0, [pc, #112]	; (38074 <z_thread_timeout+0x90>)
   38004:	228e      	movs	r2, #142	; 0x8e
   38006:	f004 fe28 	bl	3cc5a <assert_print>
   3800a:	218e      	movs	r1, #142	; 0x8e
   3800c:	4818      	ldr	r0, [pc, #96]	; (38070 <z_thread_timeout+0x8c>)
   3800e:	f004 fe1d 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   38012:	4816      	ldr	r0, [pc, #88]	; (3806c <z_thread_timeout+0x88>)
   38014:	f7fe fb8e 	bl	36734 <z_spin_lock_set_owner>
		if (!killed) {
   38018:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   3801c:	f013 0f28 	tst.w	r3, #40	; 0x28
   38020:	d110      	bne.n	38044 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   38022:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   38026:	f1a4 0018 	sub.w	r0, r4, #24
			if (thread->base.pended_on != NULL) {
   3802a:	b11b      	cbz	r3, 38034 <z_thread_timeout+0x50>
				unpend_thread_no_timeout(thread);
   3802c:	9001      	str	r0, [sp, #4]
   3802e:	f7ff fd97 	bl	37b60 <unpend_thread_no_timeout>
   38032:	9801      	ldr	r0, [sp, #4]
   38034:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   38038:	f023 0314 	bic.w	r3, r3, #20
   3803c:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   38040:	f7ff fecc 	bl	37ddc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38044:	4809      	ldr	r0, [pc, #36]	; (3806c <z_thread_timeout+0x88>)
   38046:	f7fe fb65 	bl	36714 <z_spin_unlock_valid>
   3804a:	b940      	cbnz	r0, 3805e <z_thread_timeout+0x7a>
   3804c:	4908      	ldr	r1, [pc, #32]	; (38070 <z_thread_timeout+0x8c>)
   3804e:	4809      	ldr	r0, [pc, #36]	; (38074 <z_thread_timeout+0x90>)
   38050:	22b9      	movs	r2, #185	; 0xb9
   38052:	f004 fe02 	bl	3cc5a <assert_print>
   38056:	21b9      	movs	r1, #185	; 0xb9
   38058:	4805      	ldr	r0, [pc, #20]	; (38070 <z_thread_timeout+0x8c>)
   3805a:	f004 fdf7 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   3805e:	f385 8811 	msr	BASEPRI, r5
   38062:	f3bf 8f6f 	isb	sy
}
   38066:	b003      	add	sp, #12
   38068:	bd30      	pop	{r4, r5, pc}
   3806a:	bf00      	nop
   3806c:	2001a544 	.word	0x2001a544
   38070:	0004429d 	.word	0x0004429d
   38074:	00044263 	.word	0x00044263

00038078 <unready_thread>:
{
   38078:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   3807a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   3807e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   38080:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   38082:	7b43      	ldrb	r3, [r0, #13]
   38084:	da06      	bge.n	38094 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   3808a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3808c:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   3808e:	4806      	ldr	r0, [pc, #24]	; (380a8 <unready_thread+0x30>)
   38090:	f7ff fd48 	bl	37b24 <z_priq_dumb_remove>
	update_cache(thread == _current);
   38094:	4b05      	ldr	r3, [pc, #20]	; (380ac <unready_thread+0x34>)
   38096:	6898      	ldr	r0, [r3, #8]
   38098:	1b03      	subs	r3, r0, r4
   3809a:	4258      	negs	r0, r3
   3809c:	4158      	adcs	r0, r3
}
   3809e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   380a2:	f7ff bdb5 	b.w	37c10 <update_cache>
   380a6:	bf00      	nop
   380a8:	2001a520 	.word	0x2001a520
   380ac:	2001a500 	.word	0x2001a500

000380b0 <add_to_waitq_locked>:
{
   380b0:	b538      	push	{r3, r4, r5, lr}
   380b2:	4604      	mov	r4, r0
   380b4:	460d      	mov	r5, r1
	unready_thread(thread);
   380b6:	f7ff ffdf 	bl	38078 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   380ba:	7b63      	ldrb	r3, [r4, #13]
   380bc:	f043 0302 	orr.w	r3, r3, #2
   380c0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   380c2:	b1f5      	cbz	r5, 38102 <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   380c4:	4b15      	ldr	r3, [pc, #84]	; (3811c <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   380c6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   380c8:	429c      	cmp	r4, r3
   380ca:	d108      	bne.n	380de <add_to_waitq_locked+0x2e>
   380cc:	4914      	ldr	r1, [pc, #80]	; (38120 <add_to_waitq_locked+0x70>)
   380ce:	4815      	ldr	r0, [pc, #84]	; (38124 <add_to_waitq_locked+0x74>)
   380d0:	22ba      	movs	r2, #186	; 0xba
   380d2:	f004 fdc2 	bl	3cc5a <assert_print>
   380d6:	21ba      	movs	r1, #186	; 0xba
   380d8:	4811      	ldr	r0, [pc, #68]	; (38120 <add_to_waitq_locked+0x70>)
   380da:	f004 fdb7 	bl	3cc4c <assert_post_action>
	return list->head == list;
   380de:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   380e0:	429d      	cmp	r5, r3
   380e2:	d015      	beq.n	38110 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   380e4:	b1a3      	cbz	r3, 38110 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
   380e6:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   380ea:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   380ee:	4291      	cmp	r1, r2
   380f0:	d008      	beq.n	38104 <add_to_waitq_locked+0x54>
		return b2 - b1;
   380f2:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   380f4:	2a00      	cmp	r2, #0
   380f6:	dd05      	ble.n	38104 <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
   380f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   380fa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   380fe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   38100:	605c      	str	r4, [r3, #4]
}
   38102:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   38104:	686a      	ldr	r2, [r5, #4]
   38106:	4293      	cmp	r3, r2
   38108:	d002      	beq.n	38110 <add_to_waitq_locked+0x60>
   3810a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3810c:	2b00      	cmp	r3, #0
   3810e:	d1ec      	bne.n	380ea <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
   38110:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   38112:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   38116:	601c      	str	r4, [r3, #0]
	list->tail = node;
   38118:	606c      	str	r4, [r5, #4]
}
   3811a:	e7f2      	b.n	38102 <add_to_waitq_locked+0x52>
   3811c:	20018e00 	.word	0x20018e00
   38120:	0004bdc4 	.word	0x0004bdc4
   38124:	00044263 	.word	0x00044263

00038128 <pend>:
{
   38128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3812c:	4604      	mov	r4, r0
   3812e:	4688      	mov	r8, r1
   38130:	4616      	mov	r6, r2
   38132:	461d      	mov	r5, r3
	__asm__ volatile(
   38134:	f04f 0320 	mov.w	r3, #32
   38138:	f3ef 8711 	mrs	r7, BASEPRI
   3813c:	f383 8812 	msr	BASEPRI_MAX, r3
   38140:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38144:	481a      	ldr	r0, [pc, #104]	; (381b0 <pend+0x88>)
   38146:	f7fe fad7 	bl	366f8 <z_spin_lock_valid>
   3814a:	b940      	cbnz	r0, 3815e <pend+0x36>
   3814c:	4919      	ldr	r1, [pc, #100]	; (381b4 <pend+0x8c>)
   3814e:	481a      	ldr	r0, [pc, #104]	; (381b8 <pend+0x90>)
   38150:	228e      	movs	r2, #142	; 0x8e
   38152:	f004 fd82 	bl	3cc5a <assert_print>
   38156:	218e      	movs	r1, #142	; 0x8e
   38158:	4816      	ldr	r0, [pc, #88]	; (381b4 <pend+0x8c>)
   3815a:	f004 fd77 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   3815e:	4814      	ldr	r0, [pc, #80]	; (381b0 <pend+0x88>)
   38160:	f7fe fae8 	bl	36734 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   38164:	4620      	mov	r0, r4
   38166:	4641      	mov	r1, r8
   38168:	f7ff ffa2 	bl	380b0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3816c:	4810      	ldr	r0, [pc, #64]	; (381b0 <pend+0x88>)
   3816e:	f7fe fad1 	bl	36714 <z_spin_unlock_valid>
   38172:	b940      	cbnz	r0, 38186 <pend+0x5e>
   38174:	490f      	ldr	r1, [pc, #60]	; (381b4 <pend+0x8c>)
   38176:	4810      	ldr	r0, [pc, #64]	; (381b8 <pend+0x90>)
   38178:	22b9      	movs	r2, #185	; 0xb9
   3817a:	f004 fd6e 	bl	3cc5a <assert_print>
   3817e:	21b9      	movs	r1, #185	; 0xb9
   38180:	480c      	ldr	r0, [pc, #48]	; (381b4 <pend+0x8c>)
   38182:	f004 fd63 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   38186:	f387 8811 	msr	BASEPRI, r7
   3818a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3818e:	f1b5 3fff 	cmp.w	r5, #4294967295
   38192:	bf08      	it	eq
   38194:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   38198:	d008      	beq.n	381ac <pend+0x84>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   3819a:	4632      	mov	r2, r6
   3819c:	462b      	mov	r3, r5
   3819e:	f104 0018 	add.w	r0, r4, #24
   381a2:	4906      	ldr	r1, [pc, #24]	; (381bc <pend+0x94>)
}
   381a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   381a8:	f000 bc6c 	b.w	38a84 <z_add_timeout>
   381ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   381b0:	2001a544 	.word	0x2001a544
   381b4:	0004429d 	.word	0x0004429d
   381b8:	00044263 	.word	0x00044263
   381bc:	00037fe5 	.word	0x00037fe5

000381c0 <z_pend_curr>:
{
   381c0:	b538      	push	{r3, r4, r5, lr}
   381c2:	4605      	mov	r5, r0
	pending_current = _current;
   381c4:	4b0d      	ldr	r3, [pc, #52]	; (381fc <z_pend_curr+0x3c>)
{
   381c6:	460c      	mov	r4, r1
	pending_current = _current;
   381c8:	6898      	ldr	r0, [r3, #8]
   381ca:	4b0d      	ldr	r3, [pc, #52]	; (38200 <z_pend_curr+0x40>)
{
   381cc:	4611      	mov	r1, r2
	pending_current = _current;
   381ce:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   381d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   381d4:	f7ff ffa8 	bl	38128 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   381d8:	4628      	mov	r0, r5
   381da:	f7fe fa9b 	bl	36714 <z_spin_unlock_valid>
   381de:	b940      	cbnz	r0, 381f2 <z_pend_curr+0x32>
   381e0:	4908      	ldr	r1, [pc, #32]	; (38204 <z_pend_curr+0x44>)
   381e2:	4809      	ldr	r0, [pc, #36]	; (38208 <z_pend_curr+0x48>)
   381e4:	22d0      	movs	r2, #208	; 0xd0
   381e6:	f004 fd38 	bl	3cc5a <assert_print>
   381ea:	21d0      	movs	r1, #208	; 0xd0
   381ec:	4805      	ldr	r0, [pc, #20]	; (38204 <z_pend_curr+0x44>)
   381ee:	f004 fd2d 	bl	3cc4c <assert_post_action>
   381f2:	4620      	mov	r0, r4
}
   381f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   381f8:	f7ea bdd0 	b.w	22d9c <arch_swap>
   381fc:	2001a500 	.word	0x2001a500
   38200:	2001a540 	.word	0x2001a540
   38204:	0004429d 	.word	0x0004429d
   38208:	00044263 	.word	0x00044263

0003820c <z_set_prio>:
{
   3820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3820e:	4604      	mov	r4, r0
   38210:	460d      	mov	r5, r1
	__asm__ volatile(
   38212:	f04f 0320 	mov.w	r3, #32
   38216:	f3ef 8611 	mrs	r6, BASEPRI
   3821a:	f383 8812 	msr	BASEPRI_MAX, r3
   3821e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38222:	4834      	ldr	r0, [pc, #208]	; (382f4 <z_set_prio+0xe8>)
   38224:	f7fe fa68 	bl	366f8 <z_spin_lock_valid>
   38228:	b940      	cbnz	r0, 3823c <z_set_prio+0x30>
   3822a:	4933      	ldr	r1, [pc, #204]	; (382f8 <z_set_prio+0xec>)
   3822c:	4833      	ldr	r0, [pc, #204]	; (382fc <z_set_prio+0xf0>)
   3822e:	228e      	movs	r2, #142	; 0x8e
   38230:	f004 fd13 	bl	3cc5a <assert_print>
   38234:	218e      	movs	r1, #142	; 0x8e
   38236:	4830      	ldr	r0, [pc, #192]	; (382f8 <z_set_prio+0xec>)
   38238:	f004 fd08 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   3823c:	482d      	ldr	r0, [pc, #180]	; (382f4 <z_set_prio+0xe8>)
   3823e:	f7fe fa79 	bl	36734 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   38242:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   38244:	b26d      	sxtb	r5, r5
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   38246:	06da      	lsls	r2, r3, #27
   38248:	d151      	bne.n	382ee <z_set_prio+0xe2>
		if (need_sched) {
   3824a:	69a2      	ldr	r2, [r4, #24]
   3824c:	2a00      	cmp	r2, #0
   3824e:	d14e      	bne.n	382ee <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   38254:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   38256:	4621      	mov	r1, r4
   38258:	4829      	ldr	r0, [pc, #164]	; (38300 <z_set_prio+0xf4>)
   3825a:	f7ff fc63 	bl	37b24 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   3825e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   38260:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   38262:	f063 037f 	orn	r3, r3, #127	; 0x7f
   38266:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38268:	4b26      	ldr	r3, [pc, #152]	; (38304 <z_set_prio+0xf8>)
   3826a:	429c      	cmp	r4, r3
   3826c:	d108      	bne.n	38280 <z_set_prio+0x74>
   3826e:	4926      	ldr	r1, [pc, #152]	; (38308 <z_set_prio+0xfc>)
   38270:	4822      	ldr	r0, [pc, #136]	; (382fc <z_set_prio+0xf0>)
   38272:	22ba      	movs	r2, #186	; 0xba
   38274:	f004 fcf1 	bl	3cc5a <assert_print>
   38278:	21ba      	movs	r1, #186	; 0xba
   3827a:	4823      	ldr	r0, [pc, #140]	; (38308 <z_set_prio+0xfc>)
   3827c:	f004 fce6 	bl	3cc4c <assert_post_action>
	return list->head == list;
   38280:	4a22      	ldr	r2, [pc, #136]	; (3830c <z_set_prio+0x100>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38282:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   38286:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3828a:	42ab      	cmp	r3, r5
   3828c:	d02a      	beq.n	382e4 <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3828e:	b34b      	cbz	r3, 382e4 <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
   38290:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   38294:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   38298:	428f      	cmp	r7, r1
   3829a:	d01e      	beq.n	382da <z_set_prio+0xce>
		return b2 - b1;
   3829c:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   3829e:	2900      	cmp	r1, #0
   382a0:	dd1b      	ble.n	382da <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
   382a2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   382a4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   382a8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   382aa:	605c      	str	r4, [r3, #4]
			update_cache(1);
   382ac:	2001      	movs	r0, #1
   382ae:	f7ff fcaf 	bl	37c10 <update_cache>
   382b2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   382b4:	480f      	ldr	r0, [pc, #60]	; (382f4 <z_set_prio+0xe8>)
   382b6:	f7fe fa2d 	bl	36714 <z_spin_unlock_valid>
   382ba:	b940      	cbnz	r0, 382ce <z_set_prio+0xc2>
   382bc:	490e      	ldr	r1, [pc, #56]	; (382f8 <z_set_prio+0xec>)
   382be:	480f      	ldr	r0, [pc, #60]	; (382fc <z_set_prio+0xf0>)
   382c0:	22b9      	movs	r2, #185	; 0xb9
   382c2:	f004 fcca 	bl	3cc5a <assert_print>
   382c6:	21b9      	movs	r1, #185	; 0xb9
   382c8:	480b      	ldr	r0, [pc, #44]	; (382f8 <z_set_prio+0xec>)
   382ca:	f004 fcbf 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   382ce:	f386 8811 	msr	BASEPRI, r6
   382d2:	f3bf 8f6f 	isb	sy
}
   382d6:	4620      	mov	r0, r4
   382d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   382da:	4283      	cmp	r3, r0
   382dc:	d002      	beq.n	382e4 <z_set_prio+0xd8>
   382de:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   382e0:	2b00      	cmp	r3, #0
   382e2:	d1d7      	bne.n	38294 <z_set_prio+0x88>
	node->prev = tail;
   382e4:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   382e8:	6004      	str	r4, [r0, #0]
	list->tail = node;
   382ea:	6254      	str	r4, [r2, #36]	; 0x24
}
   382ec:	e7de      	b.n	382ac <z_set_prio+0xa0>
			thread->base.prio = prio;
   382ee:	73a5      	strb	r5, [r4, #14]
   382f0:	2400      	movs	r4, #0
   382f2:	e7df      	b.n	382b4 <z_set_prio+0xa8>
   382f4:	2001a544 	.word	0x2001a544
   382f8:	0004429d 	.word	0x0004429d
   382fc:	00044263 	.word	0x00044263
   38300:	2001a520 	.word	0x2001a520
   38304:	20018e00 	.word	0x20018e00
   38308:	0004bdc4 	.word	0x0004bdc4
   3830c:	2001a500 	.word	0x2001a500

00038310 <z_impl_k_thread_suspend>:
{
   38310:	b570      	push	{r4, r5, r6, lr}
   38312:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   38314:	3018      	adds	r0, #24
   38316:	f000 fc63 	bl	38be0 <z_abort_timeout>
	__asm__ volatile(
   3831a:	f04f 0320 	mov.w	r3, #32
   3831e:	f3ef 8611 	mrs	r6, BASEPRI
   38322:	f383 8812 	msr	BASEPRI_MAX, r3
   38326:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3832a:	4820      	ldr	r0, [pc, #128]	; (383ac <z_impl_k_thread_suspend+0x9c>)
   3832c:	f7fe f9e4 	bl	366f8 <z_spin_lock_valid>
   38330:	b940      	cbnz	r0, 38344 <z_impl_k_thread_suspend+0x34>
   38332:	491f      	ldr	r1, [pc, #124]	; (383b0 <z_impl_k_thread_suspend+0xa0>)
   38334:	481f      	ldr	r0, [pc, #124]	; (383b4 <z_impl_k_thread_suspend+0xa4>)
   38336:	228e      	movs	r2, #142	; 0x8e
   38338:	f004 fc8f 	bl	3cc5a <assert_print>
   3833c:	218e      	movs	r1, #142	; 0x8e
   3833e:	481c      	ldr	r0, [pc, #112]	; (383b0 <z_impl_k_thread_suspend+0xa0>)
   38340:	f004 fc84 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   38344:	4819      	ldr	r0, [pc, #100]	; (383ac <z_impl_k_thread_suspend+0x9c>)
   38346:	f7fe f9f5 	bl	36734 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3834a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   3834e:	7b63      	ldrb	r3, [r4, #13]
   38350:	2a00      	cmp	r2, #0
   38352:	da06      	bge.n	38362 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   38358:	4621      	mov	r1, r4
   3835a:	4817      	ldr	r0, [pc, #92]	; (383b8 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3835c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   3835e:	f7ff fbe1 	bl	37b24 <z_priq_dumb_remove>
		update_cache(thread == _current);
   38362:	4d16      	ldr	r5, [pc, #88]	; (383bc <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   38364:	7b63      	ldrb	r3, [r4, #13]
   38366:	68a8      	ldr	r0, [r5, #8]
   38368:	f043 0310 	orr.w	r3, r3, #16
   3836c:	7363      	strb	r3, [r4, #13]
   3836e:	1b03      	subs	r3, r0, r4
   38370:	4258      	negs	r0, r3
   38372:	4158      	adcs	r0, r3
   38374:	f7ff fc4c 	bl	37c10 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38378:	480c      	ldr	r0, [pc, #48]	; (383ac <z_impl_k_thread_suspend+0x9c>)
   3837a:	f7fe f9cb 	bl	36714 <z_spin_unlock_valid>
   3837e:	b940      	cbnz	r0, 38392 <z_impl_k_thread_suspend+0x82>
   38380:	490b      	ldr	r1, [pc, #44]	; (383b0 <z_impl_k_thread_suspend+0xa0>)
   38382:	480c      	ldr	r0, [pc, #48]	; (383b4 <z_impl_k_thread_suspend+0xa4>)
   38384:	22b9      	movs	r2, #185	; 0xb9
   38386:	f004 fc68 	bl	3cc5a <assert_print>
   3838a:	21b9      	movs	r1, #185	; 0xb9
   3838c:	4808      	ldr	r0, [pc, #32]	; (383b0 <z_impl_k_thread_suspend+0xa0>)
   3838e:	f004 fc5d 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   38392:	f386 8811 	msr	BASEPRI, r6
   38396:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   3839a:	68ab      	ldr	r3, [r5, #8]
   3839c:	42a3      	cmp	r3, r4
   3839e:	d103      	bne.n	383a8 <z_impl_k_thread_suspend+0x98>
}
   383a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   383a4:	f008 bf79 	b.w	4129a <z_reschedule_unlocked>
}
   383a8:	bd70      	pop	{r4, r5, r6, pc}
   383aa:	bf00      	nop
   383ac:	2001a544 	.word	0x2001a544
   383b0:	0004429d 	.word	0x0004429d
   383b4:	00044263 	.word	0x00044263
   383b8:	2001a520 	.word	0x2001a520
   383bc:	2001a500 	.word	0x2001a500

000383c0 <k_sched_unlock>:
{
   383c0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   383c2:	f04f 0320 	mov.w	r3, #32
   383c6:	f3ef 8511 	mrs	r5, BASEPRI
   383ca:	f383 8812 	msr	BASEPRI_MAX, r3
   383ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   383d2:	4824      	ldr	r0, [pc, #144]	; (38464 <k_sched_unlock+0xa4>)
   383d4:	f7fe f990 	bl	366f8 <z_spin_lock_valid>
   383d8:	b940      	cbnz	r0, 383ec <k_sched_unlock+0x2c>
   383da:	4923      	ldr	r1, [pc, #140]	; (38468 <k_sched_unlock+0xa8>)
   383dc:	4823      	ldr	r0, [pc, #140]	; (3846c <k_sched_unlock+0xac>)
   383de:	228e      	movs	r2, #142	; 0x8e
   383e0:	f004 fc3b 	bl	3cc5a <assert_print>
   383e4:	218e      	movs	r1, #142	; 0x8e
   383e6:	4820      	ldr	r0, [pc, #128]	; (38468 <k_sched_unlock+0xa8>)
   383e8:	f004 fc30 	bl	3cc4c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   383ec:	4c20      	ldr	r4, [pc, #128]	; (38470 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   383ee:	481d      	ldr	r0, [pc, #116]	; (38464 <k_sched_unlock+0xa4>)
   383f0:	f7fe f9a0 	bl	36734 <z_spin_lock_set_owner>
   383f4:	68a3      	ldr	r3, [r4, #8]
   383f6:	7bdb      	ldrb	r3, [r3, #15]
   383f8:	b953      	cbnz	r3, 38410 <k_sched_unlock+0x50>
   383fa:	491e      	ldr	r1, [pc, #120]	; (38474 <k_sched_unlock+0xb4>)
   383fc:	481b      	ldr	r0, [pc, #108]	; (3846c <k_sched_unlock+0xac>)
   383fe:	f240 32bb 	movw	r2, #955	; 0x3bb
   38402:	f004 fc2a 	bl	3cc5a <assert_print>
   38406:	f240 31bb 	movw	r1, #955	; 0x3bb
   3840a:	481a      	ldr	r0, [pc, #104]	; (38474 <k_sched_unlock+0xb4>)
   3840c:	f004 fc1e 	bl	3cc4c <assert_post_action>
   38410:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   38414:	b153      	cbz	r3, 3842c <k_sched_unlock+0x6c>
   38416:	4917      	ldr	r1, [pc, #92]	; (38474 <k_sched_unlock+0xb4>)
   38418:	4814      	ldr	r0, [pc, #80]	; (3846c <k_sched_unlock+0xac>)
   3841a:	f44f 726f 	mov.w	r2, #956	; 0x3bc
   3841e:	f004 fc1c 	bl	3cc5a <assert_print>
   38422:	f44f 716f 	mov.w	r1, #956	; 0x3bc
   38426:	4813      	ldr	r0, [pc, #76]	; (38474 <k_sched_unlock+0xb4>)
   38428:	f004 fc10 	bl	3cc4c <assert_post_action>
		++_current->base.sched_locked;
   3842c:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   3842e:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   38430:	7bd3      	ldrb	r3, [r2, #15]
   38432:	3301      	adds	r3, #1
   38434:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   38436:	f7ff fbeb 	bl	37c10 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3843a:	480a      	ldr	r0, [pc, #40]	; (38464 <k_sched_unlock+0xa4>)
   3843c:	f7fe f96a 	bl	36714 <z_spin_unlock_valid>
   38440:	b940      	cbnz	r0, 38454 <k_sched_unlock+0x94>
   38442:	4909      	ldr	r1, [pc, #36]	; (38468 <k_sched_unlock+0xa8>)
   38444:	4809      	ldr	r0, [pc, #36]	; (3846c <k_sched_unlock+0xac>)
   38446:	22b9      	movs	r2, #185	; 0xb9
   38448:	f004 fc07 	bl	3cc5a <assert_print>
   3844c:	21b9      	movs	r1, #185	; 0xb9
   3844e:	4806      	ldr	r0, [pc, #24]	; (38468 <k_sched_unlock+0xa8>)
   38450:	f004 fbfc 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   38454:	f385 8811 	msr	BASEPRI, r5
   38458:	f3bf 8f6f 	isb	sy
}
   3845c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   38460:	f008 bf1b 	b.w	4129a <z_reschedule_unlocked>
   38464:	2001a544 	.word	0x2001a544
   38468:	0004429d 	.word	0x0004429d
   3846c:	00044263 	.word	0x00044263
   38470:	2001a500 	.word	0x2001a500
   38474:	0004bdc4 	.word	0x0004bdc4

00038478 <z_unpend_first_thread>:
{
   38478:	b538      	push	{r3, r4, r5, lr}
   3847a:	4604      	mov	r4, r0
	__asm__ volatile(
   3847c:	f04f 0320 	mov.w	r3, #32
   38480:	f3ef 8511 	mrs	r5, BASEPRI
   38484:	f383 8812 	msr	BASEPRI_MAX, r3
   38488:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3848c:	4816      	ldr	r0, [pc, #88]	; (384e8 <z_unpend_first_thread+0x70>)
   3848e:	f7fe f933 	bl	366f8 <z_spin_lock_valid>
   38492:	b940      	cbnz	r0, 384a6 <z_unpend_first_thread+0x2e>
   38494:	4915      	ldr	r1, [pc, #84]	; (384ec <z_unpend_first_thread+0x74>)
   38496:	4816      	ldr	r0, [pc, #88]	; (384f0 <z_unpend_first_thread+0x78>)
   38498:	228e      	movs	r2, #142	; 0x8e
   3849a:	f004 fbde 	bl	3cc5a <assert_print>
   3849e:	218e      	movs	r1, #142	; 0x8e
   384a0:	4812      	ldr	r0, [pc, #72]	; (384ec <z_unpend_first_thread+0x74>)
   384a2:	f004 fbd3 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   384a6:	4810      	ldr	r0, [pc, #64]	; (384e8 <z_unpend_first_thread+0x70>)
   384a8:	f7fe f944 	bl	36734 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   384ac:	4620      	mov	r0, r4
   384ae:	f008 fefe 	bl	412ae <z_priq_dumb_best>
		if (thread != NULL) {
   384b2:	4604      	mov	r4, r0
   384b4:	b128      	cbz	r0, 384c2 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   384b6:	f7ff fb53 	bl	37b60 <unpend_thread_no_timeout>
   384ba:	f104 0018 	add.w	r0, r4, #24
   384be:	f000 fb8f 	bl	38be0 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   384c2:	4809      	ldr	r0, [pc, #36]	; (384e8 <z_unpend_first_thread+0x70>)
   384c4:	f7fe f926 	bl	36714 <z_spin_unlock_valid>
   384c8:	b940      	cbnz	r0, 384dc <z_unpend_first_thread+0x64>
   384ca:	4908      	ldr	r1, [pc, #32]	; (384ec <z_unpend_first_thread+0x74>)
   384cc:	4808      	ldr	r0, [pc, #32]	; (384f0 <z_unpend_first_thread+0x78>)
   384ce:	22b9      	movs	r2, #185	; 0xb9
   384d0:	f004 fbc3 	bl	3cc5a <assert_print>
   384d4:	21b9      	movs	r1, #185	; 0xb9
   384d6:	4805      	ldr	r0, [pc, #20]	; (384ec <z_unpend_first_thread+0x74>)
   384d8:	f004 fbb8 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   384dc:	f385 8811 	msr	BASEPRI, r5
   384e0:	f3bf 8f6f 	isb	sy
}
   384e4:	4620      	mov	r0, r4
   384e6:	bd38      	pop	{r3, r4, r5, pc}
   384e8:	2001a544 	.word	0x2001a544
   384ec:	0004429d 	.word	0x0004429d
   384f0:	00044263 	.word	0x00044263

000384f4 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   384f4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   384f6:	4b04      	ldr	r3, [pc, #16]	; (38508 <z_sched_init+0x14>)
   384f8:	4608      	mov	r0, r1
   384fa:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   384fe:	e9c3 2208 	strd	r2, r2, [r3, #32]
   38502:	f7ff b9fb 	b.w	378fc <k_sched_time_slice_set>
   38506:	bf00      	nop
   38508:	2001a500 	.word	0x2001a500

0003850c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   3850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3850e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   38512:	b153      	cbz	r3, 3852a <z_impl_k_yield+0x1e>
   38514:	4938      	ldr	r1, [pc, #224]	; (385f8 <z_impl_k_yield+0xec>)
   38516:	4839      	ldr	r0, [pc, #228]	; (385fc <z_impl_k_yield+0xf0>)
   38518:	f240 5232 	movw	r2, #1330	; 0x532
   3851c:	f004 fb9d 	bl	3cc5a <assert_print>
   38520:	f240 5132 	movw	r1, #1330	; 0x532
   38524:	4834      	ldr	r0, [pc, #208]	; (385f8 <z_impl_k_yield+0xec>)
   38526:	f004 fb91 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   3852a:	f04f 0320 	mov.w	r3, #32
   3852e:	f3ef 8611 	mrs	r6, BASEPRI
   38532:	f383 8812 	msr	BASEPRI_MAX, r3
   38536:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3853a:	4831      	ldr	r0, [pc, #196]	; (38600 <z_impl_k_yield+0xf4>)
   3853c:	f7fe f8dc 	bl	366f8 <z_spin_lock_valid>
   38540:	b940      	cbnz	r0, 38554 <z_impl_k_yield+0x48>
   38542:	4930      	ldr	r1, [pc, #192]	; (38604 <z_impl_k_yield+0xf8>)
   38544:	482d      	ldr	r0, [pc, #180]	; (385fc <z_impl_k_yield+0xf0>)
   38546:	228e      	movs	r2, #142	; 0x8e
   38548:	f004 fb87 	bl	3cc5a <assert_print>
   3854c:	218e      	movs	r1, #142	; 0x8e
   3854e:	482d      	ldr	r0, [pc, #180]	; (38604 <z_impl_k_yield+0xf8>)
   38550:	f004 fb7c 	bl	3cc4c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   38554:	4d2c      	ldr	r5, [pc, #176]	; (38608 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   38556:	482a      	ldr	r0, [pc, #168]	; (38600 <z_impl_k_yield+0xf4>)
   38558:	f7fe f8ec 	bl	36734 <z_spin_lock_set_owner>
   3855c:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
   3855e:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38562:	7b4b      	ldrb	r3, [r1, #13]
   38564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   38568:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   3856a:	f7ff fadb 	bl	37b24 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   3856e:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   38570:	7b63      	ldrb	r3, [r4, #13]
   38572:	f063 037f 	orn	r3, r3, #127	; 0x7f
   38576:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38578:	4b24      	ldr	r3, [pc, #144]	; (3860c <z_impl_k_yield+0x100>)
   3857a:	429c      	cmp	r4, r3
   3857c:	d108      	bne.n	38590 <z_impl_k_yield+0x84>
   3857e:	491e      	ldr	r1, [pc, #120]	; (385f8 <z_impl_k_yield+0xec>)
   38580:	481e      	ldr	r0, [pc, #120]	; (385fc <z_impl_k_yield+0xf0>)
   38582:	22ba      	movs	r2, #186	; 0xba
   38584:	f004 fb69 	bl	3cc5a <assert_print>
   38588:	21ba      	movs	r1, #186	; 0xba
   3858a:	481b      	ldr	r0, [pc, #108]	; (385f8 <z_impl_k_yield+0xec>)
   3858c:	f004 fb5e 	bl	3cc4c <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   38590:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38594:	481e      	ldr	r0, [pc, #120]	; (38610 <z_impl_k_yield+0x104>)
   38596:	4283      	cmp	r3, r0
   38598:	d028      	beq.n	385ec <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3859a:	b33b      	cbz	r3, 385ec <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
   3859c:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   385a0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   385a4:	4297      	cmp	r7, r2
   385a6:	d01c      	beq.n	385e2 <z_impl_k_yield+0xd6>
		return b2 - b1;
   385a8:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   385aa:	2a00      	cmp	r2, #0
   385ac:	dd19      	ble.n	385e2 <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
   385ae:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   385b0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   385b4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   385b6:	605c      	str	r4, [r3, #4]
	update_cache(1);
   385b8:	2001      	movs	r0, #1
   385ba:	f7ff fb29 	bl	37c10 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   385be:	4810      	ldr	r0, [pc, #64]	; (38600 <z_impl_k_yield+0xf4>)
   385c0:	f7fe f8a8 	bl	36714 <z_spin_unlock_valid>
   385c4:	b940      	cbnz	r0, 385d8 <z_impl_k_yield+0xcc>
   385c6:	490f      	ldr	r1, [pc, #60]	; (38604 <z_impl_k_yield+0xf8>)
   385c8:	480c      	ldr	r0, [pc, #48]	; (385fc <z_impl_k_yield+0xf0>)
   385ca:	22d0      	movs	r2, #208	; 0xd0
   385cc:	f004 fb45 	bl	3cc5a <assert_print>
   385d0:	21d0      	movs	r1, #208	; 0xd0
   385d2:	480c      	ldr	r0, [pc, #48]	; (38604 <z_impl_k_yield+0xf8>)
   385d4:	f004 fb3a 	bl	3cc4c <assert_post_action>
   385d8:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   385da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   385de:	f7ea bbdd 	b.w	22d9c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   385e2:	428b      	cmp	r3, r1
   385e4:	d002      	beq.n	385ec <z_impl_k_yield+0xe0>
   385e6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   385e8:	2b00      	cmp	r3, #0
   385ea:	d1d9      	bne.n	385a0 <z_impl_k_yield+0x94>
	node->prev = tail;
   385ec:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   385f0:	600c      	str	r4, [r1, #0]
	list->tail = node;
   385f2:	626c      	str	r4, [r5, #36]	; 0x24
}
   385f4:	e7e0      	b.n	385b8 <z_impl_k_yield+0xac>
   385f6:	bf00      	nop
   385f8:	0004bdc4 	.word	0x0004bdc4
   385fc:	00044263 	.word	0x00044263
   38600:	2001a544 	.word	0x2001a544
   38604:	0004429d 	.word	0x0004429d
   38608:	2001a500 	.word	0x2001a500
   3860c:	20018e00 	.word	0x20018e00
   38610:	2001a520 	.word	0x2001a520

00038614 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   38614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38618:	4605      	mov	r5, r0
   3861a:	460e      	mov	r6, r1
   3861c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   38620:	b153      	cbz	r3, 38638 <z_tick_sleep+0x24>
   38622:	493a      	ldr	r1, [pc, #232]	; (3870c <z_tick_sleep+0xf8>)
   38624:	483a      	ldr	r0, [pc, #232]	; (38710 <z_tick_sleep+0xfc>)
   38626:	f240 524e 	movw	r2, #1358	; 0x54e
   3862a:	f004 fb16 	bl	3cc5a <assert_print>
   3862e:	f240 514e 	movw	r1, #1358	; 0x54e
   38632:	4836      	ldr	r0, [pc, #216]	; (3870c <z_tick_sleep+0xf8>)
   38634:	f004 fb0a 	bl	3cc4c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   38638:	ea55 0306 	orrs.w	r3, r5, r6
   3863c:	d103      	bne.n	38646 <z_tick_sleep+0x32>
	z_impl_k_yield();
   3863e:	f7ff ff65 	bl	3850c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   38642:	2000      	movs	r0, #0
   38644:	e05f      	b.n	38706 <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
   38646:	f06f 0401 	mvn.w	r4, #1
   3864a:	f04f 33ff 	mov.w	r3, #4294967295
   3864e:	1b64      	subs	r4, r4, r5
   38650:	eb63 0306 	sbc.w	r3, r3, r6
   38654:	2c01      	cmp	r4, #1
   38656:	f173 0300 	sbcs.w	r3, r3, #0
   3865a:	da02      	bge.n	38662 <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   3865c:	f008 fe3d 	bl	412da <sys_clock_tick_get_32>
   38660:	1944      	adds	r4, r0, r5
   38662:	f04f 0320 	mov.w	r3, #32
   38666:	f3ef 8811 	mrs	r8, BASEPRI
   3866a:	f383 8812 	msr	BASEPRI_MAX, r3
   3866e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38672:	4828      	ldr	r0, [pc, #160]	; (38714 <z_tick_sleep+0x100>)
   38674:	f7fe f840 	bl	366f8 <z_spin_lock_valid>
   38678:	b940      	cbnz	r0, 3868c <z_tick_sleep+0x78>
   3867a:	4927      	ldr	r1, [pc, #156]	; (38718 <z_tick_sleep+0x104>)
   3867c:	4824      	ldr	r0, [pc, #144]	; (38710 <z_tick_sleep+0xfc>)
   3867e:	228e      	movs	r2, #142	; 0x8e
   38680:	f004 faeb 	bl	3cc5a <assert_print>
   38684:	218e      	movs	r1, #142	; 0x8e
   38686:	4824      	ldr	r0, [pc, #144]	; (38718 <z_tick_sleep+0x104>)
   38688:	f004 fae0 	bl	3cc4c <assert_post_action>
	pending_current = _current;
   3868c:	4f23      	ldr	r7, [pc, #140]	; (3871c <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   3868e:	4821      	ldr	r0, [pc, #132]	; (38714 <z_tick_sleep+0x100>)
   38690:	f7fe f850 	bl	36734 <z_spin_lock_set_owner>
   38694:	68b8      	ldr	r0, [r7, #8]
   38696:	4b22      	ldr	r3, [pc, #136]	; (38720 <z_tick_sleep+0x10c>)
   38698:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   3869a:	f7ff fced 	bl	38078 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   3869e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   386a0:	462a      	mov	r2, r5
   386a2:	4633      	mov	r3, r6
   386a4:	3018      	adds	r0, #24
   386a6:	491f      	ldr	r1, [pc, #124]	; (38724 <z_tick_sleep+0x110>)
   386a8:	f000 f9ec 	bl	38a84 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   386ac:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   386ae:	4819      	ldr	r0, [pc, #100]	; (38714 <z_tick_sleep+0x100>)
   386b0:	7b53      	ldrb	r3, [r2, #13]
   386b2:	f043 0310 	orr.w	r3, r3, #16
   386b6:	7353      	strb	r3, [r2, #13]
   386b8:	f7fe f82c 	bl	36714 <z_spin_unlock_valid>
   386bc:	b940      	cbnz	r0, 386d0 <z_tick_sleep+0xbc>
   386be:	4916      	ldr	r1, [pc, #88]	; (38718 <z_tick_sleep+0x104>)
   386c0:	4813      	ldr	r0, [pc, #76]	; (38710 <z_tick_sleep+0xfc>)
   386c2:	22d0      	movs	r2, #208	; 0xd0
   386c4:	f004 fac9 	bl	3cc5a <assert_print>
   386c8:	21d0      	movs	r1, #208	; 0xd0
   386ca:	4813      	ldr	r0, [pc, #76]	; (38718 <z_tick_sleep+0x104>)
   386cc:	f004 fabe 	bl	3cc4c <assert_post_action>
   386d0:	4640      	mov	r0, r8
   386d2:	f7ea fb63 	bl	22d9c <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   386d6:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   386d8:	7b5b      	ldrb	r3, [r3, #13]
   386da:	06db      	lsls	r3, r3, #27
   386dc:	d50a      	bpl.n	386f4 <z_tick_sleep+0xe0>
   386de:	490b      	ldr	r1, [pc, #44]	; (3870c <z_tick_sleep+0xf8>)
   386e0:	480b      	ldr	r0, [pc, #44]	; (38710 <z_tick_sleep+0xfc>)
   386e2:	f240 526f 	movw	r2, #1391	; 0x56f
   386e6:	f004 fab8 	bl	3cc5a <assert_print>
   386ea:	f240 516f 	movw	r1, #1391	; 0x56f
   386ee:	4807      	ldr	r0, [pc, #28]	; (3870c <z_tick_sleep+0xf8>)
   386f0:	f004 faac 	bl	3cc4c <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   386f4:	f008 fdf1 	bl	412da <sys_clock_tick_get_32>
   386f8:	1a20      	subs	r0, r4, r0
   386fa:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   386fe:	2801      	cmp	r0, #1
   38700:	f173 0300 	sbcs.w	r3, r3, #0
   38704:	db9d      	blt.n	38642 <z_tick_sleep+0x2e>
}
   38706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3870a:	bf00      	nop
   3870c:	0004bdc4 	.word	0x0004bdc4
   38710:	00044263 	.word	0x00044263
   38714:	2001a544 	.word	0x2001a544
   38718:	0004429d 	.word	0x0004429d
   3871c:	2001a500 	.word	0x2001a500
   38720:	2001a540 	.word	0x2001a540
   38724:	00037fe5 	.word	0x00037fe5

00038728 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   38728:	b538      	push	{r3, r4, r5, lr}
   3872a:	4605      	mov	r5, r0
   3872c:	460c      	mov	r4, r1
   3872e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   38732:	b153      	cbz	r3, 3874a <z_impl_k_sleep+0x22>
   38734:	4911      	ldr	r1, [pc, #68]	; (3877c <z_impl_k_sleep+0x54>)
   38736:	4812      	ldr	r0, [pc, #72]	; (38780 <z_impl_k_sleep+0x58>)
   38738:	f240 527e 	movw	r2, #1406	; 0x57e
   3873c:	f004 fa8d 	bl	3cc5a <assert_print>
   38740:	f240 517e 	movw	r1, #1406	; 0x57e
   38744:	480d      	ldr	r0, [pc, #52]	; (3877c <z_impl_k_sleep+0x54>)
   38746:	f004 fa81 	bl	3cc4c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3874a:	f1b4 3fff 	cmp.w	r4, #4294967295
   3874e:	bf08      	it	eq
   38750:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   38754:	d106      	bne.n	38764 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   38756:	4b0b      	ldr	r3, [pc, #44]	; (38784 <z_impl_k_sleep+0x5c>)
   38758:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   3875a:	f7ff fdd9 	bl	38310 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   3875e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   38762:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   38764:	4628      	mov	r0, r5
   38766:	4621      	mov	r1, r4
   38768:	f7ff ff54 	bl	38614 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   3876c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   38770:	fb80 0303 	smull	r0, r3, r0, r3
   38774:	0bc0      	lsrs	r0, r0, #15
   38776:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   3877a:	e7f2      	b.n	38762 <z_impl_k_sleep+0x3a>
   3877c:	0004bdc4 	.word	0x0004bdc4
   38780:	00044263 	.word	0x00044263
   38784:	2001a500 	.word	0x2001a500

00038788 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   38788:	4b01      	ldr	r3, [pc, #4]	; (38790 <z_impl_z_current_get+0x8>)
   3878a:	6898      	ldr	r0, [r3, #8]
   3878c:	4770      	bx	lr
   3878e:	bf00      	nop
   38790:	2001a500 	.word	0x2001a500

00038794 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   38794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38798:	4604      	mov	r4, r0
   3879a:	f04f 0320 	mov.w	r3, #32
   3879e:	f3ef 8611 	mrs	r6, BASEPRI
   387a2:	f383 8812 	msr	BASEPRI_MAX, r3
   387a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   387aa:	483e      	ldr	r0, [pc, #248]	; (388a4 <z_thread_abort+0x110>)
   387ac:	f7fd ffa4 	bl	366f8 <z_spin_lock_valid>
   387b0:	b940      	cbnz	r0, 387c4 <z_thread_abort+0x30>
   387b2:	493d      	ldr	r1, [pc, #244]	; (388a8 <z_thread_abort+0x114>)
   387b4:	483d      	ldr	r0, [pc, #244]	; (388ac <z_thread_abort+0x118>)
   387b6:	228e      	movs	r2, #142	; 0x8e
   387b8:	f004 fa4f 	bl	3cc5a <assert_print>
   387bc:	218e      	movs	r1, #142	; 0x8e
   387be:	483a      	ldr	r0, [pc, #232]	; (388a8 <z_thread_abort+0x114>)
   387c0:	f004 fa44 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   387c4:	4837      	ldr	r0, [pc, #220]	; (388a4 <z_thread_abort+0x110>)
   387c6:	f7fd ffb5 	bl	36734 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   387ca:	7b63      	ldrb	r3, [r4, #13]
   387cc:	071a      	lsls	r2, r3, #28
   387ce:	d512      	bpl.n	387f6 <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   387d0:	4834      	ldr	r0, [pc, #208]	; (388a4 <z_thread_abort+0x110>)
   387d2:	f7fd ff9f 	bl	36714 <z_spin_unlock_valid>
   387d6:	b940      	cbnz	r0, 387ea <z_thread_abort+0x56>
   387d8:	4933      	ldr	r1, [pc, #204]	; (388a8 <z_thread_abort+0x114>)
   387da:	4834      	ldr	r0, [pc, #208]	; (388ac <z_thread_abort+0x118>)
   387dc:	22b9      	movs	r2, #185	; 0xb9
   387de:	f004 fa3c 	bl	3cc5a <assert_print>
   387e2:	21b9      	movs	r1, #185	; 0xb9
   387e4:	4830      	ldr	r0, [pc, #192]	; (388a8 <z_thread_abort+0x114>)
   387e6:	f004 fa31 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   387ea:	f386 8811 	msr	BASEPRI, r6
   387ee:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   387f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   387f6:	f023 0220 	bic.w	r2, r3, #32
   387fa:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   387fe:	09d2      	lsrs	r2, r2, #7
   38800:	d138      	bne.n	38874 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   38802:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   38804:	68a3      	ldr	r3, [r4, #8]
   38806:	b113      	cbz	r3, 3880e <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   38808:	4620      	mov	r0, r4
   3880a:	f7ff f9a9 	bl	37b60 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   3880e:	f104 0018 	add.w	r0, r4, #24
   38812:	f000 f9e5 	bl	38be0 <z_abort_timeout>
   38816:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   3881a:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   3881e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38820:	42bd      	cmp	r5, r7
   38822:	d000      	beq.n	38826 <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   38824:	bb85      	cbnz	r5, 38888 <z_thread_abort+0xf4>
		update_cache(1);
   38826:	2001      	movs	r0, #1
   38828:	f7ff f9f2 	bl	37c10 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   3882c:	4b20      	ldr	r3, [pc, #128]	; (388b0 <z_thread_abort+0x11c>)
   3882e:	689b      	ldr	r3, [r3, #8]
   38830:	42a3      	cmp	r3, r4
   38832:	d1cd      	bne.n	387d0 <z_thread_abort+0x3c>
   38834:	f3ef 8305 	mrs	r3, IPSR
   38838:	2b00      	cmp	r3, #0
   3883a:	d1c9      	bne.n	387d0 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3883c:	4819      	ldr	r0, [pc, #100]	; (388a4 <z_thread_abort+0x110>)
   3883e:	f7fd ff69 	bl	36714 <z_spin_unlock_valid>
   38842:	b940      	cbnz	r0, 38856 <z_thread_abort+0xc2>
   38844:	4918      	ldr	r1, [pc, #96]	; (388a8 <z_thread_abort+0x114>)
   38846:	4819      	ldr	r0, [pc, #100]	; (388ac <z_thread_abort+0x118>)
   38848:	22d0      	movs	r2, #208	; 0xd0
   3884a:	f004 fa06 	bl	3cc5a <assert_print>
   3884e:	21d0      	movs	r1, #208	; 0xd0
   38850:	4815      	ldr	r0, [pc, #84]	; (388a8 <z_thread_abort+0x114>)
   38852:	f004 f9fb 	bl	3cc4c <assert_post_action>
   38856:	4630      	mov	r0, r6
   38858:	f7ea faa0 	bl	22d9c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   3885c:	f240 62ac 	movw	r2, #1708	; 0x6ac
   38860:	4914      	ldr	r1, [pc, #80]	; (388b4 <z_thread_abort+0x120>)
   38862:	4812      	ldr	r0, [pc, #72]	; (388ac <z_thread_abort+0x118>)
   38864:	f004 f9f9 	bl	3cc5a <assert_print>
   38868:	f240 61ac 	movw	r1, #1708	; 0x6ac
   3886c:	4811      	ldr	r0, [pc, #68]	; (388b4 <z_thread_abort+0x120>)
   3886e:	f004 f9ed 	bl	3cc4c <assert_post_action>
   38872:	e7ad      	b.n	387d0 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38874:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   38878:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   3887c:	4621      	mov	r1, r4
   3887e:	480e      	ldr	r0, [pc, #56]	; (388b8 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38880:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   38882:	f7ff f94f 	bl	37b24 <z_priq_dumb_remove>
}
   38886:	e7bd      	b.n	38804 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   38888:	4628      	mov	r0, r5
   3888a:	f7ff f969 	bl	37b60 <unpend_thread_no_timeout>
   3888e:	f105 0018 	add.w	r0, r5, #24
   38892:	f000 f9a5 	bl	38be0 <z_abort_timeout>
		ready_thread(thread);
   38896:	4628      	mov	r0, r5
   38898:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
   3889c:	f7ff fa9e 	bl	37ddc <ready_thread>
   388a0:	e7bd      	b.n	3881e <z_thread_abort+0x8a>
   388a2:	bf00      	nop
   388a4:	2001a544 	.word	0x2001a544
   388a8:	0004429d 	.word	0x0004429d
   388ac:	00044263 	.word	0x00044263
   388b0:	2001a500 	.word	0x2001a500
   388b4:	0004bdc4 	.word	0x0004bdc4
   388b8:	2001a520 	.word	0x2001a520

000388bc <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   388bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   388be:	4604      	mov	r4, r0
   388c0:	460e      	mov	r6, r1
   388c2:	4615      	mov	r5, r2
	__asm__ volatile(
   388c4:	f04f 0320 	mov.w	r3, #32
   388c8:	f3ef 8711 	mrs	r7, BASEPRI
   388cc:	f383 8812 	msr	BASEPRI_MAX, r3
   388d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   388d4:	481a      	ldr	r0, [pc, #104]	; (38940 <z_sched_wake+0x84>)
   388d6:	f7fd ff0f 	bl	366f8 <z_spin_lock_valid>
   388da:	b940      	cbnz	r0, 388ee <z_sched_wake+0x32>
   388dc:	4919      	ldr	r1, [pc, #100]	; (38944 <z_sched_wake+0x88>)
   388de:	481a      	ldr	r0, [pc, #104]	; (38948 <z_sched_wake+0x8c>)
   388e0:	228e      	movs	r2, #142	; 0x8e
   388e2:	f004 f9ba 	bl	3cc5a <assert_print>
   388e6:	218e      	movs	r1, #142	; 0x8e
   388e8:	4816      	ldr	r0, [pc, #88]	; (38944 <z_sched_wake+0x88>)
   388ea:	f004 f9af 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   388ee:	4814      	ldr	r0, [pc, #80]	; (38940 <z_sched_wake+0x84>)
   388f0:	f7fd ff20 	bl	36734 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   388f4:	4620      	mov	r0, r4
   388f6:	f008 fcda 	bl	412ae <z_priq_dumb_best>

		if (thread != NULL) {
   388fa:	4604      	mov	r4, r0
   388fc:	b160      	cbz	r0, 38918 <z_sched_wake+0x5c>
   388fe:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
	thread->base.swap_data = data;
   38902:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   38904:	f7ff f92c 	bl	37b60 <unpend_thread_no_timeout>
   38908:	f104 0018 	add.w	r0, r4, #24
   3890c:	f000 f968 	bl	38be0 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   38910:	4620      	mov	r0, r4
   38912:	f7ff fa63 	bl	37ddc <ready_thread>
			ret = true;
   38916:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38918:	4809      	ldr	r0, [pc, #36]	; (38940 <z_sched_wake+0x84>)
   3891a:	f7fd fefb 	bl	36714 <z_spin_unlock_valid>
   3891e:	b940      	cbnz	r0, 38932 <z_sched_wake+0x76>
   38920:	4908      	ldr	r1, [pc, #32]	; (38944 <z_sched_wake+0x88>)
   38922:	4809      	ldr	r0, [pc, #36]	; (38948 <z_sched_wake+0x8c>)
   38924:	22b9      	movs	r2, #185	; 0xb9
   38926:	f004 f998 	bl	3cc5a <assert_print>
   3892a:	21b9      	movs	r1, #185	; 0xb9
   3892c:	4805      	ldr	r0, [pc, #20]	; (38944 <z_sched_wake+0x88>)
   3892e:	f004 f98d 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   38932:	f387 8811 	msr	BASEPRI, r7
   38936:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   3893a:	4620      	mov	r0, r4
   3893c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3893e:	bf00      	nop
   38940:	2001a544 	.word	0x2001a544
   38944:	0004429d 	.word	0x0004429d
   38948:	00044263 	.word	0x00044263

0003894c <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   3894c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   3894e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   38952:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   38954:	e9cd 6700 	strd	r6, r7, [sp]
   38958:	f7ff fc32 	bl	381c0 <z_pend_curr>

	if (data != NULL) {
   3895c:	b11c      	cbz	r4, 38966 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   3895e:	4b03      	ldr	r3, [pc, #12]	; (3896c <z_sched_wait+0x20>)
   38960:	689b      	ldr	r3, [r3, #8]
   38962:	695b      	ldr	r3, [r3, #20]
   38964:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   38966:	b002      	add	sp, #8
   38968:	bdd0      	pop	{r4, r6, r7, pc}
   3896a:	bf00      	nop
   3896c:	2001a500 	.word	0x2001a500

00038970 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   38970:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   38972:	4806      	ldr	r0, [pc, #24]	; (3898c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   38974:	4a06      	ldr	r2, [pc, #24]	; (38990 <z_data_copy+0x20>)
   38976:	4907      	ldr	r1, [pc, #28]	; (38994 <z_data_copy+0x24>)
   38978:	1a12      	subs	r2, r2, r0
   3897a:	f008 fbc7 	bl	4110c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   3897e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   38982:	4a05      	ldr	r2, [pc, #20]	; (38998 <z_data_copy+0x28>)
   38984:	4905      	ldr	r1, [pc, #20]	; (3899c <z_data_copy+0x2c>)
   38986:	4806      	ldr	r0, [pc, #24]	; (389a0 <z_data_copy+0x30>)
   38988:	f008 bbc0 	b.w	4110c <z_early_memcpy>
   3898c:	20014500 	.word	0x20014500
   38990:	2001514c 	.word	0x2001514c
   38994:	0004c24c 	.word	0x0004c24c
   38998:	00000000 	.word	0x00000000
   3899c:	0004c234 	.word	0x0004c234
   389a0:	20014500 	.word	0x20014500

000389a4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   389a4:	4b03      	ldr	r3, [pc, #12]	; (389b4 <elapsed+0x10>)
   389a6:	681b      	ldr	r3, [r3, #0]
   389a8:	b90b      	cbnz	r3, 389ae <elapsed+0xa>
   389aa:	f7ec be6d 	b.w	25688 <sys_clock_elapsed>
}
   389ae:	2000      	movs	r0, #0
   389b0:	4770      	bx	lr
   389b2:	bf00      	nop
   389b4:	2001a550 	.word	0x2001a550

000389b8 <next_timeout>:
	return list->head == list;
   389b8:	4b10      	ldr	r3, [pc, #64]	; (389fc <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   389ba:	b510      	push	{r4, lr}
   389bc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   389be:	429c      	cmp	r4, r3
   389c0:	bf08      	it	eq
   389c2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   389c4:	f7ff ffee 	bl	389a4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   389c8:	b1a4      	cbz	r4, 389f4 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   389ca:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   389ce:	1a1b      	subs	r3, r3, r0
   389d0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   389d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   389d8:	f170 0200 	sbcs.w	r2, r0, #0
   389dc:	da0a      	bge.n	389f4 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   389de:	2800      	cmp	r0, #0
   389e0:	bfac      	ite	ge
   389e2:	4618      	movge	r0, r3
   389e4:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   389e6:	4b06      	ldr	r3, [pc, #24]	; (38a00 <next_timeout+0x48>)
   389e8:	691b      	ldr	r3, [r3, #16]
   389ea:	b113      	cbz	r3, 389f2 <next_timeout+0x3a>
   389ec:	4298      	cmp	r0, r3
   389ee:	bfa8      	it	ge
   389f0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   389f2:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   389f4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   389f8:	e7f5      	b.n	389e6 <next_timeout+0x2e>
   389fa:	bf00      	nop
   389fc:	20014a64 	.word	0x20014a64
   38a00:	2001a500 	.word	0x2001a500

00038a04 <remove_timeout>:
{
   38a04:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   38a06:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   38a08:	b168      	cbz	r0, 38a26 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   38a0a:	4a0a      	ldr	r2, [pc, #40]	; (38a34 <remove_timeout+0x30>)
   38a0c:	6852      	ldr	r2, [r2, #4]
   38a0e:	4290      	cmp	r0, r2
   38a10:	d009      	beq.n	38a26 <remove_timeout+0x22>
	if (next(t) != NULL) {
   38a12:	b143      	cbz	r3, 38a26 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   38a14:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   38a18:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   38a1c:	1912      	adds	r2, r2, r4
   38a1e:	eb41 0105 	adc.w	r1, r1, r5
   38a22:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   38a26:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   38a28:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   38a2a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   38a2c:	2300      	movs	r3, #0
	node->prev = NULL;
   38a2e:	e9c0 3300 	strd	r3, r3, [r0]
}
   38a32:	bd30      	pop	{r4, r5, pc}
   38a34:	20014a64 	.word	0x20014a64

00038a38 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   38a38:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   38a3a:	6804      	ldr	r4, [r0, #0]
   38a3c:	b1e4      	cbz	r4, 38a78 <timeout_rem+0x40>
	return list->head == list;
   38a3e:	4a10      	ldr	r2, [pc, #64]	; (38a80 <timeout_rem+0x48>)
   38a40:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38a42:	4293      	cmp	r3, r2
   38a44:	d015      	beq.n	38a72 <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
   38a46:	2400      	movs	r4, #0
   38a48:	4625      	mov	r5, r4
   38a4a:	6851      	ldr	r1, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   38a4c:	b933      	cbnz	r3, 38a5c <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   38a4e:	f7ff ffa9 	bl	389a4 <elapsed>
   38a52:	4601      	mov	r1, r0
   38a54:	1a20      	subs	r0, r4, r0
   38a56:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
   38a5a:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   38a5c:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   38a60:	18a4      	adds	r4, r4, r2
   38a62:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   38a66:	4283      	cmp	r3, r0
   38a68:	d0f1      	beq.n	38a4e <timeout_rem+0x16>
   38a6a:	428b      	cmp	r3, r1
   38a6c:	d0ef      	beq.n	38a4e <timeout_rem+0x16>
   38a6e:	681b      	ldr	r3, [r3, #0]
   38a70:	e7ec      	b.n	38a4c <timeout_rem+0x14>
   38a72:	2400      	movs	r4, #0
   38a74:	4625      	mov	r5, r4
   38a76:	e7ea      	b.n	38a4e <timeout_rem+0x16>
		return 0;
   38a78:	4620      	mov	r0, r4
   38a7a:	4621      	mov	r1, r4
   38a7c:	e7ed      	b.n	38a5a <timeout_rem+0x22>
   38a7e:	bf00      	nop
   38a80:	20014a64 	.word	0x20014a64

00038a84 <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38a84:	f1b3 3fff 	cmp.w	r3, #4294967295
   38a88:	bf08      	it	eq
   38a8a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   38a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38a92:	4604      	mov	r4, r0
   38a94:	460e      	mov	r6, r1
   38a96:	4698      	mov	r8, r3
   38a98:	4615      	mov	r5, r2
   38a9a:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38a9c:	f000 8090 	beq.w	38bc0 <z_add_timeout+0x13c>
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   38aa0:	6803      	ldr	r3, [r0, #0]
   38aa2:	b143      	cbz	r3, 38ab6 <z_add_timeout+0x32>
   38aa4:	4947      	ldr	r1, [pc, #284]	; (38bc4 <z_add_timeout+0x140>)
   38aa6:	4848      	ldr	r0, [pc, #288]	; (38bc8 <z_add_timeout+0x144>)
   38aa8:	2263      	movs	r2, #99	; 0x63
   38aaa:	f004 f8d6 	bl	3cc5a <assert_print>
   38aae:	2163      	movs	r1, #99	; 0x63
   38ab0:	4844      	ldr	r0, [pc, #272]	; (38bc4 <z_add_timeout+0x140>)
   38ab2:	f004 f8cb 	bl	3cc4c <assert_post_action>
	to->fn = fn;
   38ab6:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   38ab8:	f04f 0320 	mov.w	r3, #32
   38abc:	f3ef 8611 	mrs	r6, BASEPRI
   38ac0:	f383 8812 	msr	BASEPRI_MAX, r3
   38ac4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38ac8:	4840      	ldr	r0, [pc, #256]	; (38bcc <z_add_timeout+0x148>)
   38aca:	f7fd fe15 	bl	366f8 <z_spin_lock_valid>
   38ace:	b940      	cbnz	r0, 38ae2 <z_add_timeout+0x5e>
   38ad0:	493f      	ldr	r1, [pc, #252]	; (38bd0 <z_add_timeout+0x14c>)
   38ad2:	483d      	ldr	r0, [pc, #244]	; (38bc8 <z_add_timeout+0x144>)
   38ad4:	228e      	movs	r2, #142	; 0x8e
   38ad6:	f004 f8c0 	bl	3cc5a <assert_print>
   38ada:	218e      	movs	r1, #142	; 0x8e
   38adc:	483c      	ldr	r0, [pc, #240]	; (38bd0 <z_add_timeout+0x14c>)
   38ade:	f004 f8b5 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   38ae2:	483a      	ldr	r0, [pc, #232]	; (38bcc <z_add_timeout+0x148>)
   38ae4:	f7fd fe26 	bl	36734 <z_spin_lock_set_owner>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   38ae8:	f06f 0201 	mvn.w	r2, #1
   38aec:	f04f 30ff 	mov.w	r0, #4294967295
   38af0:	1b53      	subs	r3, r2, r5
   38af2:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   38af6:	2b00      	cmp	r3, #0
   38af8:	db1b      	blt.n	38b32 <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   38afa:	4b36      	ldr	r3, [pc, #216]	; (38bd4 <z_add_timeout+0x150>)
   38afc:	e9d3 1300 	ldrd	r1, r3, [r3]
   38b00:	1a52      	subs	r2, r2, r1
   38b02:	eb60 0303 	sbc.w	r3, r0, r3
   38b06:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
   38b08:	eb63 0707 	sbc.w	r7, r3, r7
   38b0c:	2d01      	cmp	r5, #1
   38b0e:	f177 0300 	sbcs.w	r3, r7, #0
   38b12:	bfbc      	itt	lt
   38b14:	2501      	movlt	r5, #1
   38b16:	2700      	movlt	r7, #0
   38b18:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
   38b1c:	4a2e      	ldr	r2, [pc, #184]	; (38bd8 <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
   38b1e:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38b22:	4293      	cmp	r3, r2
   38b24:	d118      	bne.n	38b58 <z_add_timeout+0xd4>
	node->prev = tail;
   38b26:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   38b2a:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   38b2e:	6054      	str	r4, [r2, #4]
}
   38b30:	e026      	b.n	38b80 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   38b32:	f7ff ff37 	bl	389a4 <elapsed>
   38b36:	3501      	adds	r5, #1
   38b38:	f148 0800 	adc.w	r8, r8, #0
   38b3c:	182d      	adds	r5, r5, r0
   38b3e:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
   38b42:	e9c4 5004 	strd	r5, r0, [r4, #16]
   38b46:	e7e9      	b.n	38b1c <z_add_timeout+0x98>
			to->dticks -= t->dticks;
   38b48:	1a09      	subs	r1, r1, r0
   38b4a:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   38b4e:	459c      	cmp	ip, r3
   38b50:	e9c4 1504 	strd	r1, r5, [r4, #16]
   38b54:	d0e7      	beq.n	38b26 <z_add_timeout+0xa2>
   38b56:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   38b58:	2b00      	cmp	r3, #0
   38b5a:	d0e4      	beq.n	38b26 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   38b5c:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   38b60:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   38b64:	4281      	cmp	r1, r0
   38b66:	eb75 0e07 	sbcs.w	lr, r5, r7
   38b6a:	daed      	bge.n	38b48 <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
   38b6c:	1a41      	subs	r1, r0, r1
   38b6e:	eb67 0505 	sbc.w	r5, r7, r5
   38b72:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   38b76:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   38b78:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   38b7c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   38b7e:	605c      	str	r4, [r3, #4]
	return list->head == list;
   38b80:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38b82:	4293      	cmp	r3, r2
   38b84:	d00b      	beq.n	38b9e <z_add_timeout+0x11a>
		if (to == first()) {
   38b86:	429c      	cmp	r4, r3
   38b88:	d109      	bne.n	38b9e <z_add_timeout+0x11a>
			int32_t next_time = next_timeout();
   38b8a:	f7ff ff15 	bl	389b8 <next_timeout>
			if (next_time == 0 ||
   38b8e:	b118      	cbz	r0, 38b98 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   38b90:	4b12      	ldr	r3, [pc, #72]	; (38bdc <z_add_timeout+0x158>)
			if (next_time == 0 ||
   38b92:	691b      	ldr	r3, [r3, #16]
   38b94:	4283      	cmp	r3, r0
   38b96:	d002      	beq.n	38b9e <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   38b98:	2100      	movs	r1, #0
   38b9a:	f7ec fd45 	bl	25628 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38b9e:	480b      	ldr	r0, [pc, #44]	; (38bcc <z_add_timeout+0x148>)
   38ba0:	f7fd fdb8 	bl	36714 <z_spin_unlock_valid>
   38ba4:	b940      	cbnz	r0, 38bb8 <z_add_timeout+0x134>
   38ba6:	490a      	ldr	r1, [pc, #40]	; (38bd0 <z_add_timeout+0x14c>)
   38ba8:	4807      	ldr	r0, [pc, #28]	; (38bc8 <z_add_timeout+0x144>)
   38baa:	22b9      	movs	r2, #185	; 0xb9
   38bac:	f004 f855 	bl	3cc5a <assert_print>
   38bb0:	21b9      	movs	r1, #185	; 0xb9
   38bb2:	4807      	ldr	r0, [pc, #28]	; (38bd0 <z_add_timeout+0x14c>)
   38bb4:	f004 f84a 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   38bb8:	f386 8811 	msr	BASEPRI, r6
   38bbc:	f3bf 8f6f 	isb	sy
}
   38bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38bc4:	0004bde6 	.word	0x0004bde6
   38bc8:	00044263 	.word	0x00044263
   38bcc:	2001a554 	.word	0x2001a554
   38bd0:	0004429d 	.word	0x0004429d
   38bd4:	20018fa0 	.word	0x20018fa0
   38bd8:	20014a64 	.word	0x20014a64
   38bdc:	2001a500 	.word	0x2001a500

00038be0 <z_abort_timeout>:
{
   38be0:	b538      	push	{r3, r4, r5, lr}
   38be2:	4604      	mov	r4, r0
	__asm__ volatile(
   38be4:	f04f 0320 	mov.w	r3, #32
   38be8:	f3ef 8511 	mrs	r5, BASEPRI
   38bec:	f383 8812 	msr	BASEPRI_MAX, r3
   38bf0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38bf4:	4815      	ldr	r0, [pc, #84]	; (38c4c <z_abort_timeout+0x6c>)
   38bf6:	f7fd fd7f 	bl	366f8 <z_spin_lock_valid>
   38bfa:	b940      	cbnz	r0, 38c0e <z_abort_timeout+0x2e>
   38bfc:	4914      	ldr	r1, [pc, #80]	; (38c50 <z_abort_timeout+0x70>)
   38bfe:	4815      	ldr	r0, [pc, #84]	; (38c54 <z_abort_timeout+0x74>)
   38c00:	228e      	movs	r2, #142	; 0x8e
   38c02:	f004 f82a 	bl	3cc5a <assert_print>
   38c06:	218e      	movs	r1, #142	; 0x8e
   38c08:	4811      	ldr	r0, [pc, #68]	; (38c50 <z_abort_timeout+0x70>)
   38c0a:	f004 f81f 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   38c0e:	480f      	ldr	r0, [pc, #60]	; (38c4c <z_abort_timeout+0x6c>)
   38c10:	f7fd fd90 	bl	36734 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   38c14:	6823      	ldr	r3, [r4, #0]
   38c16:	b1b3      	cbz	r3, 38c46 <z_abort_timeout+0x66>
			remove_timeout(to);
   38c18:	4620      	mov	r0, r4
   38c1a:	f7ff fef3 	bl	38a04 <remove_timeout>
			ret = 0;
   38c1e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38c20:	480a      	ldr	r0, [pc, #40]	; (38c4c <z_abort_timeout+0x6c>)
   38c22:	f7fd fd77 	bl	36714 <z_spin_unlock_valid>
   38c26:	b940      	cbnz	r0, 38c3a <z_abort_timeout+0x5a>
   38c28:	4909      	ldr	r1, [pc, #36]	; (38c50 <z_abort_timeout+0x70>)
   38c2a:	480a      	ldr	r0, [pc, #40]	; (38c54 <z_abort_timeout+0x74>)
   38c2c:	22b9      	movs	r2, #185	; 0xb9
   38c2e:	f004 f814 	bl	3cc5a <assert_print>
   38c32:	21b9      	movs	r1, #185	; 0xb9
   38c34:	4806      	ldr	r0, [pc, #24]	; (38c50 <z_abort_timeout+0x70>)
   38c36:	f004 f809 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   38c3a:	f385 8811 	msr	BASEPRI, r5
   38c3e:	f3bf 8f6f 	isb	sy
}
   38c42:	4620      	mov	r0, r4
   38c44:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   38c46:	f06f 0415 	mvn.w	r4, #21
   38c4a:	e7e9      	b.n	38c20 <z_abort_timeout+0x40>
   38c4c:	2001a554 	.word	0x2001a554
   38c50:	0004429d 	.word	0x0004429d
   38c54:	00044263 	.word	0x00044263

00038c58 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
   38c58:	b570      	push	{r4, r5, r6, lr}
   38c5a:	4604      	mov	r4, r0
	__asm__ volatile(
   38c5c:	f04f 0320 	mov.w	r3, #32
   38c60:	f3ef 8611 	mrs	r6, BASEPRI
   38c64:	f383 8812 	msr	BASEPRI_MAX, r3
   38c68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38c6c:	4814      	ldr	r0, [pc, #80]	; (38cc0 <z_timeout_remaining+0x68>)
   38c6e:	f7fd fd43 	bl	366f8 <z_spin_lock_valid>
   38c72:	b940      	cbnz	r0, 38c86 <z_timeout_remaining+0x2e>
   38c74:	4913      	ldr	r1, [pc, #76]	; (38cc4 <z_timeout_remaining+0x6c>)
   38c76:	4814      	ldr	r0, [pc, #80]	; (38cc8 <z_timeout_remaining+0x70>)
   38c78:	228e      	movs	r2, #142	; 0x8e
   38c7a:	f003 ffee 	bl	3cc5a <assert_print>
   38c7e:	218e      	movs	r1, #142	; 0x8e
   38c80:	4810      	ldr	r0, [pc, #64]	; (38cc4 <z_timeout_remaining+0x6c>)
   38c82:	f003 ffe3 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   38c86:	480e      	ldr	r0, [pc, #56]	; (38cc0 <z_timeout_remaining+0x68>)
   38c88:	f7fd fd54 	bl	36734 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   38c8c:	4620      	mov	r0, r4
   38c8e:	f7ff fed3 	bl	38a38 <timeout_rem>
   38c92:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38c94:	480a      	ldr	r0, [pc, #40]	; (38cc0 <z_timeout_remaining+0x68>)
   38c96:	460c      	mov	r4, r1
   38c98:	f7fd fd3c 	bl	36714 <z_spin_unlock_valid>
   38c9c:	b940      	cbnz	r0, 38cb0 <z_timeout_remaining+0x58>
   38c9e:	4909      	ldr	r1, [pc, #36]	; (38cc4 <z_timeout_remaining+0x6c>)
   38ca0:	4809      	ldr	r0, [pc, #36]	; (38cc8 <z_timeout_remaining+0x70>)
   38ca2:	22b9      	movs	r2, #185	; 0xb9
   38ca4:	f003 ffd9 	bl	3cc5a <assert_print>
   38ca8:	21b9      	movs	r1, #185	; 0xb9
   38caa:	4806      	ldr	r0, [pc, #24]	; (38cc4 <z_timeout_remaining+0x6c>)
   38cac:	f003 ffce 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   38cb0:	f386 8811 	msr	BASEPRI, r6
   38cb4:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   38cb8:	4628      	mov	r0, r5
   38cba:	4621      	mov	r1, r4
   38cbc:	bd70      	pop	{r4, r5, r6, pc}
   38cbe:	bf00      	nop
   38cc0:	2001a554 	.word	0x2001a554
   38cc4:	0004429d 	.word	0x0004429d
   38cc8:	00044263 	.word	0x00044263

00038ccc <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   38ccc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   38cce:	f04f 0320 	mov.w	r3, #32
   38cd2:	f3ef 8511 	mrs	r5, BASEPRI
   38cd6:	f383 8812 	msr	BASEPRI_MAX, r3
   38cda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38cde:	4813      	ldr	r0, [pc, #76]	; (38d2c <z_get_next_timeout_expiry+0x60>)
   38ce0:	f7fd fd0a 	bl	366f8 <z_spin_lock_valid>
   38ce4:	b940      	cbnz	r0, 38cf8 <z_get_next_timeout_expiry+0x2c>
   38ce6:	4912      	ldr	r1, [pc, #72]	; (38d30 <z_get_next_timeout_expiry+0x64>)
   38ce8:	4812      	ldr	r0, [pc, #72]	; (38d34 <z_get_next_timeout_expiry+0x68>)
   38cea:	228e      	movs	r2, #142	; 0x8e
   38cec:	f003 ffb5 	bl	3cc5a <assert_print>
   38cf0:	218e      	movs	r1, #142	; 0x8e
   38cf2:	480f      	ldr	r0, [pc, #60]	; (38d30 <z_get_next_timeout_expiry+0x64>)
   38cf4:	f003 ffaa 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   38cf8:	480c      	ldr	r0, [pc, #48]	; (38d2c <z_get_next_timeout_expiry+0x60>)
   38cfa:	f7fd fd1b 	bl	36734 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   38cfe:	f7ff fe5b 	bl	389b8 <next_timeout>
   38d02:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38d04:	4809      	ldr	r0, [pc, #36]	; (38d2c <z_get_next_timeout_expiry+0x60>)
   38d06:	f7fd fd05 	bl	36714 <z_spin_unlock_valid>
   38d0a:	b940      	cbnz	r0, 38d1e <z_get_next_timeout_expiry+0x52>
   38d0c:	4908      	ldr	r1, [pc, #32]	; (38d30 <z_get_next_timeout_expiry+0x64>)
   38d0e:	4809      	ldr	r0, [pc, #36]	; (38d34 <z_get_next_timeout_expiry+0x68>)
   38d10:	22b9      	movs	r2, #185	; 0xb9
   38d12:	f003 ffa2 	bl	3cc5a <assert_print>
   38d16:	21b9      	movs	r1, #185	; 0xb9
   38d18:	4805      	ldr	r0, [pc, #20]	; (38d30 <z_get_next_timeout_expiry+0x64>)
   38d1a:	f003 ff97 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   38d1e:	f385 8811 	msr	BASEPRI, r5
   38d22:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   38d26:	4620      	mov	r0, r4
   38d28:	bd38      	pop	{r3, r4, r5, pc}
   38d2a:	bf00      	nop
   38d2c:	2001a554 	.word	0x2001a554
   38d30:	0004429d 	.word	0x0004429d
   38d34:	00044263 	.word	0x00044263

00038d38 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   38d38:	b570      	push	{r4, r5, r6, lr}
   38d3a:	4604      	mov	r4, r0
   38d3c:	460d      	mov	r5, r1
	__asm__ volatile(
   38d3e:	f04f 0320 	mov.w	r3, #32
   38d42:	f3ef 8611 	mrs	r6, BASEPRI
   38d46:	f383 8812 	msr	BASEPRI_MAX, r3
   38d4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38d4e:	4816      	ldr	r0, [pc, #88]	; (38da8 <z_set_timeout_expiry+0x70>)
   38d50:	f7fd fcd2 	bl	366f8 <z_spin_lock_valid>
   38d54:	b940      	cbnz	r0, 38d68 <z_set_timeout_expiry+0x30>
   38d56:	4915      	ldr	r1, [pc, #84]	; (38dac <z_set_timeout_expiry+0x74>)
   38d58:	4815      	ldr	r0, [pc, #84]	; (38db0 <z_set_timeout_expiry+0x78>)
   38d5a:	228e      	movs	r2, #142	; 0x8e
   38d5c:	f003 ff7d 	bl	3cc5a <assert_print>
   38d60:	218e      	movs	r1, #142	; 0x8e
   38d62:	4812      	ldr	r0, [pc, #72]	; (38dac <z_set_timeout_expiry+0x74>)
   38d64:	f003 ff72 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   38d68:	480f      	ldr	r0, [pc, #60]	; (38da8 <z_set_timeout_expiry+0x70>)
   38d6a:	f7fd fce3 	bl	36734 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   38d6e:	f7ff fe23 	bl	389b8 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   38d72:	2801      	cmp	r0, #1
   38d74:	dd05      	ble.n	38d82 <z_set_timeout_expiry+0x4a>
   38d76:	42a0      	cmp	r0, r4
   38d78:	db03      	blt.n	38d82 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   38d7a:	4629      	mov	r1, r5
   38d7c:	4620      	mov	r0, r4
   38d7e:	f7ec fc53 	bl	25628 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38d82:	4809      	ldr	r0, [pc, #36]	; (38da8 <z_set_timeout_expiry+0x70>)
   38d84:	f7fd fcc6 	bl	36714 <z_spin_unlock_valid>
   38d88:	b940      	cbnz	r0, 38d9c <z_set_timeout_expiry+0x64>
   38d8a:	4908      	ldr	r1, [pc, #32]	; (38dac <z_set_timeout_expiry+0x74>)
   38d8c:	4808      	ldr	r0, [pc, #32]	; (38db0 <z_set_timeout_expiry+0x78>)
   38d8e:	22b9      	movs	r2, #185	; 0xb9
   38d90:	f003 ff63 	bl	3cc5a <assert_print>
   38d94:	21b9      	movs	r1, #185	; 0xb9
   38d96:	4805      	ldr	r0, [pc, #20]	; (38dac <z_set_timeout_expiry+0x74>)
   38d98:	f003 ff58 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   38d9c:	f386 8811 	msr	BASEPRI, r6
   38da0:	f3bf 8f6f 	isb	sy
		}
	}
}
   38da4:	bd70      	pop	{r4, r5, r6, pc}
   38da6:	bf00      	nop
   38da8:	2001a554 	.word	0x2001a554
   38dac:	0004429d 	.word	0x0004429d
   38db0:	00044263 	.word	0x00044263

00038db4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   38db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38db8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   38dba:	f7fe ffa9 	bl	37d10 <z_time_slice>
	__asm__ volatile(
   38dbe:	f04f 0320 	mov.w	r3, #32
   38dc2:	f3ef 8511 	mrs	r5, BASEPRI
   38dc6:	f383 8812 	msr	BASEPRI_MAX, r3
   38dca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38dce:	4842      	ldr	r0, [pc, #264]	; (38ed8 <sys_clock_announce+0x124>)
   38dd0:	f7fd fc92 	bl	366f8 <z_spin_lock_valid>
   38dd4:	b940      	cbnz	r0, 38de8 <sys_clock_announce+0x34>
   38dd6:	4941      	ldr	r1, [pc, #260]	; (38edc <sys_clock_announce+0x128>)
   38dd8:	4841      	ldr	r0, [pc, #260]	; (38ee0 <sys_clock_announce+0x12c>)
   38dda:	228e      	movs	r2, #142	; 0x8e
   38ddc:	f003 ff3d 	bl	3cc5a <assert_print>
   38de0:	218e      	movs	r1, #142	; 0x8e
   38de2:	483e      	ldr	r0, [pc, #248]	; (38edc <sys_clock_announce+0x128>)
   38de4:	f003 ff32 	bl	3cc4c <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   38de8:	4f3e      	ldr	r7, [pc, #248]	; (38ee4 <sys_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   38dea:	483b      	ldr	r0, [pc, #236]	; (38ed8 <sys_clock_announce+0x124>)
	return list->head == list;
   38dec:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 38eec <sys_clock_announce+0x138>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   38df0:	4e3d      	ldr	r6, [pc, #244]	; (38ee8 <sys_clock_announce+0x134>)
   38df2:	f7fd fc9f 	bl	36734 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   38df6:	603c      	str	r4, [r7, #0]
   38df8:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   38dfc:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38dfe:	4544      	cmp	r4, r8
   38e00:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   38e04:	e9d6 1e00 	ldrd	r1, lr, [r6]
   38e08:	d00b      	beq.n	38e22 <sys_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   38e0a:	b154      	cbz	r4, 38e22 <sys_clock_announce+0x6e>
   38e0c:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   38e10:	429a      	cmp	r2, r3
   38e12:	eb70 090c 	sbcs.w	r9, r0, ip
   38e16:	da23      	bge.n	38e60 <sys_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   38e18:	1a9b      	subs	r3, r3, r2
   38e1a:	eb6c 0c00 	sbc.w	ip, ip, r0
   38e1e:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   38e22:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   38e24:	1852      	adds	r2, r2, r1
   38e26:	eb4e 0000 	adc.w	r0, lr, r0
   38e2a:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   38e2e:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   38e30:	f7ff fdc2 	bl	389b8 <next_timeout>
   38e34:	4621      	mov	r1, r4
   38e36:	f7ec fbf7 	bl	25628 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38e3a:	4827      	ldr	r0, [pc, #156]	; (38ed8 <sys_clock_announce+0x124>)
   38e3c:	f7fd fc6a 	bl	36714 <z_spin_unlock_valid>
   38e40:	b940      	cbnz	r0, 38e54 <sys_clock_announce+0xa0>
   38e42:	4926      	ldr	r1, [pc, #152]	; (38edc <sys_clock_announce+0x128>)
   38e44:	4826      	ldr	r0, [pc, #152]	; (38ee0 <sys_clock_announce+0x12c>)
   38e46:	22b9      	movs	r2, #185	; 0xb9
   38e48:	f003 ff07 	bl	3cc5a <assert_print>
   38e4c:	21b9      	movs	r1, #185	; 0xb9
   38e4e:	4823      	ldr	r0, [pc, #140]	; (38edc <sys_clock_announce+0x128>)
   38e50:	f003 fefc 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   38e54:	f385 8811 	msr	BASEPRI, r5
   38e58:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   38e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   38e60:	1859      	adds	r1, r3, r1
   38e62:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   38e66:	1ad3      	subs	r3, r2, r3
   38e68:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   38e6a:	2200      	movs	r2, #0
   38e6c:	2300      	movs	r3, #0
		curr_tick += dt;
   38e6e:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   38e72:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   38e76:	4620      	mov	r0, r4
   38e78:	f7ff fdc4 	bl	38a04 <remove_timeout>
   38e7c:	4816      	ldr	r0, [pc, #88]	; (38ed8 <sys_clock_announce+0x124>)
   38e7e:	f7fd fc49 	bl	36714 <z_spin_unlock_valid>
   38e82:	b940      	cbnz	r0, 38e96 <sys_clock_announce+0xe2>
   38e84:	4915      	ldr	r1, [pc, #84]	; (38edc <sys_clock_announce+0x128>)
   38e86:	4816      	ldr	r0, [pc, #88]	; (38ee0 <sys_clock_announce+0x12c>)
   38e88:	22b9      	movs	r2, #185	; 0xb9
   38e8a:	f003 fee6 	bl	3cc5a <assert_print>
   38e8e:	21b9      	movs	r1, #185	; 0xb9
   38e90:	4812      	ldr	r0, [pc, #72]	; (38edc <sys_clock_announce+0x128>)
   38e92:	f003 fedb 	bl	3cc4c <assert_post_action>
   38e96:	f385 8811 	msr	BASEPRI, r5
   38e9a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   38e9e:	4620      	mov	r0, r4
   38ea0:	68a3      	ldr	r3, [r4, #8]
   38ea2:	4798      	blx	r3
	__asm__ volatile(
   38ea4:	f04f 0320 	mov.w	r3, #32
   38ea8:	f3ef 8511 	mrs	r5, BASEPRI
   38eac:	f383 8812 	msr	BASEPRI_MAX, r3
   38eb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38eb4:	4808      	ldr	r0, [pc, #32]	; (38ed8 <sys_clock_announce+0x124>)
   38eb6:	f7fd fc1f 	bl	366f8 <z_spin_lock_valid>
   38eba:	b940      	cbnz	r0, 38ece <sys_clock_announce+0x11a>
   38ebc:	4907      	ldr	r1, [pc, #28]	; (38edc <sys_clock_announce+0x128>)
   38ebe:	4808      	ldr	r0, [pc, #32]	; (38ee0 <sys_clock_announce+0x12c>)
   38ec0:	228e      	movs	r2, #142	; 0x8e
   38ec2:	f003 feca 	bl	3cc5a <assert_print>
   38ec6:	218e      	movs	r1, #142	; 0x8e
   38ec8:	4804      	ldr	r0, [pc, #16]	; (38edc <sys_clock_announce+0x128>)
   38eca:	f003 febf 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   38ece:	4802      	ldr	r0, [pc, #8]	; (38ed8 <sys_clock_announce+0x124>)
   38ed0:	f7fd fc30 	bl	36734 <z_spin_lock_set_owner>
	return k;
   38ed4:	e790      	b.n	38df8 <sys_clock_announce+0x44>
   38ed6:	bf00      	nop
   38ed8:	2001a554 	.word	0x2001a554
   38edc:	0004429d 	.word	0x0004429d
   38ee0:	00044263 	.word	0x00044263
   38ee4:	2001a550 	.word	0x2001a550
   38ee8:	20018fa0 	.word	0x20018fa0
   38eec:	20014a64 	.word	0x20014a64

00038ef0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   38ef0:	b570      	push	{r4, r5, r6, lr}
   38ef2:	f04f 0320 	mov.w	r3, #32
   38ef6:	f3ef 8611 	mrs	r6, BASEPRI
   38efa:	f383 8812 	msr	BASEPRI_MAX, r3
   38efe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38f02:	4816      	ldr	r0, [pc, #88]	; (38f5c <sys_clock_tick_get+0x6c>)
   38f04:	f7fd fbf8 	bl	366f8 <z_spin_lock_valid>
   38f08:	b940      	cbnz	r0, 38f1c <sys_clock_tick_get+0x2c>
   38f0a:	4915      	ldr	r1, [pc, #84]	; (38f60 <sys_clock_tick_get+0x70>)
   38f0c:	4815      	ldr	r0, [pc, #84]	; (38f64 <sys_clock_tick_get+0x74>)
   38f0e:	228e      	movs	r2, #142	; 0x8e
   38f10:	f003 fea3 	bl	3cc5a <assert_print>
   38f14:	218e      	movs	r1, #142	; 0x8e
   38f16:	4812      	ldr	r0, [pc, #72]	; (38f60 <sys_clock_tick_get+0x70>)
   38f18:	f003 fe98 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   38f1c:	480f      	ldr	r0, [pc, #60]	; (38f5c <sys_clock_tick_get+0x6c>)
   38f1e:	f7fd fc09 	bl	36734 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   38f22:	f7ec fbb1 	bl	25688 <sys_clock_elapsed>
   38f26:	4b10      	ldr	r3, [pc, #64]	; (38f68 <sys_clock_tick_get+0x78>)
   38f28:	e9d3 4500 	ldrd	r4, r5, [r3]
   38f2c:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38f2e:	480b      	ldr	r0, [pc, #44]	; (38f5c <sys_clock_tick_get+0x6c>)
   38f30:	f145 0500 	adc.w	r5, r5, #0
   38f34:	f7fd fbee 	bl	36714 <z_spin_unlock_valid>
   38f38:	b940      	cbnz	r0, 38f4c <sys_clock_tick_get+0x5c>
   38f3a:	4909      	ldr	r1, [pc, #36]	; (38f60 <sys_clock_tick_get+0x70>)
   38f3c:	4809      	ldr	r0, [pc, #36]	; (38f64 <sys_clock_tick_get+0x74>)
   38f3e:	22b9      	movs	r2, #185	; 0xb9
   38f40:	f003 fe8b 	bl	3cc5a <assert_print>
   38f44:	21b9      	movs	r1, #185	; 0xb9
   38f46:	4806      	ldr	r0, [pc, #24]	; (38f60 <sys_clock_tick_get+0x70>)
   38f48:	f003 fe80 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   38f4c:	f386 8811 	msr	BASEPRI, r6
   38f50:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   38f54:	4620      	mov	r0, r4
   38f56:	4629      	mov	r1, r5
   38f58:	bd70      	pop	{r4, r5, r6, pc}
   38f5a:	bf00      	nop
   38f5c:	2001a554 	.word	0x2001a554
   38f60:	0004429d 	.word	0x0004429d
   38f64:	00044263 	.word	0x00044263
   38f68:	20018fa0 	.word	0x20018fa0

00038f6c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   38f6c:	b570      	push	{r4, r5, r6, lr}
   38f6e:	4604      	mov	r4, r0
	__asm__ volatile(
   38f70:	f04f 0320 	mov.w	r3, #32
   38f74:	f3ef 8511 	mrs	r5, BASEPRI
   38f78:	f383 8812 	msr	BASEPRI_MAX, r3
   38f7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38f80:	4841      	ldr	r0, [pc, #260]	; (39088 <z_timer_expiration_handler+0x11c>)
   38f82:	f7fd fbb9 	bl	366f8 <z_spin_lock_valid>
   38f86:	b940      	cbnz	r0, 38f9a <z_timer_expiration_handler+0x2e>
   38f88:	4940      	ldr	r1, [pc, #256]	; (3908c <z_timer_expiration_handler+0x120>)
   38f8a:	4841      	ldr	r0, [pc, #260]	; (39090 <z_timer_expiration_handler+0x124>)
   38f8c:	228e      	movs	r2, #142	; 0x8e
   38f8e:	f003 fe64 	bl	3cc5a <assert_print>
   38f92:	218e      	movs	r1, #142	; 0x8e
   38f94:	483d      	ldr	r0, [pc, #244]	; (3908c <z_timer_expiration_handler+0x120>)
   38f96:	f003 fe59 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   38f9a:	483b      	ldr	r0, [pc, #236]	; (39088 <z_timer_expiration_handler+0x11c>)
   38f9c:	f7fd fbca 	bl	36734 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   38fa0:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   38fa4:	3301      	adds	r3, #1
   38fa6:	f142 0200 	adc.w	r2, r2, #0
   38faa:	2b02      	cmp	r3, #2
   38fac:	f172 0300 	sbcs.w	r3, r2, #0
   38fb0:	d305      	bcc.n	38fbe <z_timer_expiration_handler+0x52>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   38fb2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   38fb6:	4620      	mov	r0, r4
   38fb8:	4936      	ldr	r1, [pc, #216]	; (39094 <z_timer_expiration_handler+0x128>)
   38fba:	f7ff fd63 	bl	38a84 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   38fbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   38fc0:	3301      	adds	r3, #1
   38fc2:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   38fc4:	6a23      	ldr	r3, [r4, #32]
   38fc6:	b35b      	cbz	r3, 39020 <z_timer_expiration_handler+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38fc8:	482f      	ldr	r0, [pc, #188]	; (39088 <z_timer_expiration_handler+0x11c>)
   38fca:	f7fd fba3 	bl	36714 <z_spin_unlock_valid>
   38fce:	b940      	cbnz	r0, 38fe2 <z_timer_expiration_handler+0x76>
   38fd0:	492e      	ldr	r1, [pc, #184]	; (3908c <z_timer_expiration_handler+0x120>)
   38fd2:	482f      	ldr	r0, [pc, #188]	; (39090 <z_timer_expiration_handler+0x124>)
   38fd4:	22b9      	movs	r2, #185	; 0xb9
   38fd6:	f003 fe40 	bl	3cc5a <assert_print>
   38fda:	21b9      	movs	r1, #185	; 0xb9
   38fdc:	482b      	ldr	r0, [pc, #172]	; (3908c <z_timer_expiration_handler+0x120>)
   38fde:	f003 fe35 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   38fe2:	f385 8811 	msr	BASEPRI, r5
   38fe6:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   38fea:	4620      	mov	r0, r4
   38fec:	6a23      	ldr	r3, [r4, #32]
   38fee:	4798      	blx	r3
	__asm__ volatile(
   38ff0:	f04f 0320 	mov.w	r3, #32
   38ff4:	f3ef 8511 	mrs	r5, BASEPRI
   38ff8:	f383 8812 	msr	BASEPRI_MAX, r3
   38ffc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39000:	4821      	ldr	r0, [pc, #132]	; (39088 <z_timer_expiration_handler+0x11c>)
   39002:	f7fd fb79 	bl	366f8 <z_spin_lock_valid>
   39006:	b940      	cbnz	r0, 3901a <z_timer_expiration_handler+0xae>
   39008:	4920      	ldr	r1, [pc, #128]	; (3908c <z_timer_expiration_handler+0x120>)
   3900a:	4821      	ldr	r0, [pc, #132]	; (39090 <z_timer_expiration_handler+0x124>)
   3900c:	228e      	movs	r2, #142	; 0x8e
   3900e:	f003 fe24 	bl	3cc5a <assert_print>
   39012:	218e      	movs	r1, #142	; 0x8e
   39014:	481d      	ldr	r0, [pc, #116]	; (3908c <z_timer_expiration_handler+0x120>)
   39016:	f003 fe19 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   3901a:	481b      	ldr	r0, [pc, #108]	; (39088 <z_timer_expiration_handler+0x11c>)
   3901c:	f7fd fb8a 	bl	36734 <z_spin_lock_set_owner>
	return list->head == list;
   39020:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39024:	42a6      	cmp	r6, r4
   39026:	d000      	beq.n	3902a <z_timer_expiration_handler+0xbe>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   39028:	b98e      	cbnz	r6, 3904e <z_timer_expiration_handler+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3902a:	4817      	ldr	r0, [pc, #92]	; (39088 <z_timer_expiration_handler+0x11c>)
   3902c:	f7fd fb72 	bl	36714 <z_spin_unlock_valid>
   39030:	b940      	cbnz	r0, 39044 <z_timer_expiration_handler+0xd8>
   39032:	4916      	ldr	r1, [pc, #88]	; (3908c <z_timer_expiration_handler+0x120>)
   39034:	4816      	ldr	r0, [pc, #88]	; (39090 <z_timer_expiration_handler+0x124>)
   39036:	22b9      	movs	r2, #185	; 0xb9
   39038:	f003 fe0f 	bl	3cc5a <assert_print>
   3903c:	21b9      	movs	r1, #185	; 0xb9
   3903e:	4813      	ldr	r0, [pc, #76]	; (3908c <z_timer_expiration_handler+0x120>)
   39040:	f003 fe04 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   39044:	f385 8811 	msr	BASEPRI, r5
   39048:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   3904c:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   3904e:	4630      	mov	r0, r6
   39050:	f7fe fca8 	bl	379a4 <z_unpend_thread_no_timeout>
   39054:	2300      	movs	r3, #0
   39056:	480c      	ldr	r0, [pc, #48]	; (39088 <z_timer_expiration_handler+0x11c>)
   39058:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
   3905c:	f7fd fb5a 	bl	36714 <z_spin_unlock_valid>
   39060:	b940      	cbnz	r0, 39074 <z_timer_expiration_handler+0x108>
   39062:	490a      	ldr	r1, [pc, #40]	; (3908c <z_timer_expiration_handler+0x120>)
   39064:	480a      	ldr	r0, [pc, #40]	; (39090 <z_timer_expiration_handler+0x124>)
   39066:	22b9      	movs	r2, #185	; 0xb9
   39068:	f003 fdf7 	bl	3cc5a <assert_print>
   3906c:	21b9      	movs	r1, #185	; 0xb9
   3906e:	4807      	ldr	r0, [pc, #28]	; (3908c <z_timer_expiration_handler+0x120>)
   39070:	f003 fdec 	bl	3cc4c <assert_post_action>
   39074:	f385 8811 	msr	BASEPRI, r5
   39078:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   3907c:	4630      	mov	r0, r6
}
   3907e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   39082:	f7fe bef5 	b.w	37e70 <z_ready_thread>
   39086:	bf00      	nop
   39088:	2001a558 	.word	0x2001a558
   3908c:	0004429d 	.word	0x0004429d
   39090:	00044263 	.word	0x00044263
   39094:	00038f6d 	.word	0x00038f6d

00039098 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   39098:	f1b3 3fff 	cmp.w	r3, #4294967295
   3909c:	bf08      	it	eq
   3909e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   390a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   390a6:	4605      	mov	r5, r0
   390a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   390ac:	4690      	mov	r8, r2
   390ae:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   390b0:	d040      	beq.n	39134 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   390b2:	f1b1 3fff 	cmp.w	r1, #4294967295
   390b6:	bf08      	it	eq
   390b8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   390bc:	4604      	mov	r4, r0
   390be:	460e      	mov	r6, r1
   390c0:	d016      	beq.n	390f0 <z_impl_k_timer_start+0x58>
   390c2:	ea51 0c00 	orrs.w	ip, r1, r0
   390c6:	d013      	beq.n	390f0 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   390c8:	f06f 0c01 	mvn.w	ip, #1
   390cc:	ebbc 0c00 	subs.w	ip, ip, r0
   390d0:	f04f 3cff 	mov.w	ip, #4294967295
   390d4:	eb6c 0c01 	sbc.w	ip, ip, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   390d8:	f1bc 0f00 	cmp.w	ip, #0
   390dc:	da08      	bge.n	390f0 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   390de:	2802      	cmp	r0, #2
   390e0:	f171 0100 	sbcs.w	r1, r1, #0
   390e4:	bfbc      	itt	lt
   390e6:	2402      	movlt	r4, #2
   390e8:	2600      	movlt	r6, #0
   390ea:	3c01      	subs	r4, #1
   390ec:	f146 36ff 	adc.w	r6, r6, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   390f0:	f06f 0101 	mvn.w	r1, #1
   390f4:	1a89      	subs	r1, r1, r2
   390f6:	f04f 31ff 	mov.w	r1, #4294967295
   390fa:	eb61 0103 	sbc.w	r1, r1, r3
   390fe:	2900      	cmp	r1, #0
   39100:	da09      	bge.n	39116 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   39102:	2a01      	cmp	r2, #1
   39104:	f173 0100 	sbcs.w	r1, r3, #0
   39108:	bfbc      	itt	lt
   3910a:	2201      	movlt	r2, #1
   3910c:	2300      	movlt	r3, #0
   3910e:	f112 38ff 	adds.w	r8, r2, #4294967295
   39112:	f143 37ff 	adc.w	r7, r3, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   39116:	4628      	mov	r0, r5
   39118:	f7ff fd62 	bl	38be0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   3911c:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   3911e:	4642      	mov	r2, r8
	timer->status = 0U;
   39120:	632b      	str	r3, [r5, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   39122:	4628      	mov	r0, r5
   39124:	463b      	mov	r3, r7
	timer->period = period;
   39126:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28
		     duration);
}
   3912a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   3912e:	4902      	ldr	r1, [pc, #8]	; (39138 <z_impl_k_timer_start+0xa0>)
   39130:	f7ff bca8 	b.w	38a84 <z_add_timeout>
}
   39134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39138:	00038f6d 	.word	0x00038f6d

0003913c <z_impl_k_timer_status_sync>:
}
#include <syscalls/k_timer_status_get_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_sync(struct k_timer *timer)
{
   3913c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3913e:	4604      	mov	r4, r0
   39140:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   39144:	b143      	cbz	r3, 39158 <z_impl_k_timer_status_sync+0x1c>
   39146:	4930      	ldr	r1, [pc, #192]	; (39208 <z_impl_k_timer_status_sync+0xcc>)
   39148:	4830      	ldr	r0, [pc, #192]	; (3920c <z_impl_k_timer_status_sync+0xd0>)
   3914a:	22c6      	movs	r2, #198	; 0xc6
   3914c:	f003 fd85 	bl	3cc5a <assert_print>
   39150:	21c6      	movs	r1, #198	; 0xc6
   39152:	482d      	ldr	r0, [pc, #180]	; (39208 <z_impl_k_timer_status_sync+0xcc>)
   39154:	f003 fd7a 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   39158:	f04f 0320 	mov.w	r3, #32
   3915c:	f3ef 8711 	mrs	r7, BASEPRI
   39160:	f383 8812 	msr	BASEPRI_MAX, r3
   39164:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39168:	4829      	ldr	r0, [pc, #164]	; (39210 <z_impl_k_timer_status_sync+0xd4>)
	k.key = arch_irq_lock();
   3916a:	463d      	mov	r5, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3916c:	f7fd fac4 	bl	366f8 <z_spin_lock_valid>
   39170:	b940      	cbnz	r0, 39184 <z_impl_k_timer_status_sync+0x48>
   39172:	4928      	ldr	r1, [pc, #160]	; (39214 <z_impl_k_timer_status_sync+0xd8>)
   39174:	4825      	ldr	r0, [pc, #148]	; (3920c <z_impl_k_timer_status_sync+0xd0>)
   39176:	228e      	movs	r2, #142	; 0x8e
   39178:	f003 fd6f 	bl	3cc5a <assert_print>
   3917c:	218e      	movs	r1, #142	; 0x8e
   3917e:	4825      	ldr	r0, [pc, #148]	; (39214 <z_impl_k_timer_status_sync+0xd8>)
   39180:	f003 fd64 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   39184:	4822      	ldr	r0, [pc, #136]	; (39210 <z_impl_k_timer_status_sync+0xd4>)
   39186:	f7fd fad5 	bl	36734 <z_spin_lock_set_owner>

		return result;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;
   3918a:	6b26      	ldr	r6, [r4, #48]	; 0x30

	if (result == 0U) {
   3918c:	bb36      	cbnz	r6, 391dc <z_impl_k_timer_status_sync+0xa0>
		if (!z_is_inactive_timeout(&timer->timeout)) {
   3918e:	6823      	ldr	r3, [r4, #0]
   39190:	b323      	cbz	r3, 391dc <z_impl_k_timer_status_sync+0xa0>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_timer, status_sync, timer, K_FOREVER);

			/* wait for timer to expire or stop */
			(void)z_pend_curr(&lock, key, &timer->wait_q, K_FOREVER);
   39192:	f04f 33ff 	mov.w	r3, #4294967295
   39196:	f04f 32ff 	mov.w	r2, #4294967295
   3919a:	4639      	mov	r1, r7
   3919c:	e9cd 2300 	strd	r2, r3, [sp]
   391a0:	481b      	ldr	r0, [pc, #108]	; (39210 <z_impl_k_timer_status_sync+0xd4>)
   391a2:	f104 0218 	add.w	r2, r4, #24
   391a6:	f7ff f80b 	bl	381c0 <z_pend_curr>
   391aa:	f04f 0320 	mov.w	r3, #32
   391ae:	f3ef 8511 	mrs	r5, BASEPRI
   391b2:	f383 8812 	msr	BASEPRI_MAX, r3
   391b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   391ba:	4815      	ldr	r0, [pc, #84]	; (39210 <z_impl_k_timer_status_sync+0xd4>)
   391bc:	f7fd fa9c 	bl	366f8 <z_spin_lock_valid>
   391c0:	b940      	cbnz	r0, 391d4 <z_impl_k_timer_status_sync+0x98>
   391c2:	4914      	ldr	r1, [pc, #80]	; (39214 <z_impl_k_timer_status_sync+0xd8>)
   391c4:	4811      	ldr	r0, [pc, #68]	; (3920c <z_impl_k_timer_status_sync+0xd0>)
   391c6:	228e      	movs	r2, #142	; 0x8e
   391c8:	f003 fd47 	bl	3cc5a <assert_print>
   391cc:	218e      	movs	r1, #142	; 0x8e
   391ce:	4811      	ldr	r0, [pc, #68]	; (39214 <z_impl_k_timer_status_sync+0xd8>)
   391d0:	f003 fd3c 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   391d4:	480e      	ldr	r0, [pc, #56]	; (39210 <z_impl_k_timer_status_sync+0xd4>)
   391d6:	f7fd faad 	bl	36734 <z_spin_lock_set_owner>

			/* get updated timer status */
			key = k_spin_lock(&lock);
			result = timer->status;
   391da:	6b26      	ldr	r6, [r4, #48]	; 0x30
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0U;
   391dc:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   391de:	480c      	ldr	r0, [pc, #48]	; (39210 <z_impl_k_timer_status_sync+0xd4>)
   391e0:	6323      	str	r3, [r4, #48]	; 0x30
   391e2:	f7fd fa97 	bl	36714 <z_spin_unlock_valid>
   391e6:	b940      	cbnz	r0, 391fa <z_impl_k_timer_status_sync+0xbe>
   391e8:	490a      	ldr	r1, [pc, #40]	; (39214 <z_impl_k_timer_status_sync+0xd8>)
   391ea:	4808      	ldr	r0, [pc, #32]	; (3920c <z_impl_k_timer_status_sync+0xd0>)
   391ec:	22b9      	movs	r2, #185	; 0xb9
   391ee:	f003 fd34 	bl	3cc5a <assert_print>
   391f2:	21b9      	movs	r1, #185	; 0xb9
   391f4:	4807      	ldr	r0, [pc, #28]	; (39214 <z_impl_k_timer_status_sync+0xd8>)
   391f6:	f003 fd29 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   391fa:	f385 8811 	msr	BASEPRI, r5
   391fe:	f3bf 8f6f 	isb	sy
	 * @note	New tracing hook
	 */
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_timer, status_sync, timer, result);

	return result;
}
   39202:	4630      	mov	r0, r6
   39204:	b003      	add	sp, #12
   39206:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39208:	0004be0a 	.word	0x0004be0a
   3920c:	00044263 	.word	0x00044263
   39210:	2001a558 	.word	0x2001a558
   39214:	0004429d 	.word	0x0004429d

00039218 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   39218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   3921c:	2600      	movs	r6, #0
{
   3921e:	4614      	mov	r4, r2
   39220:	4681      	mov	r9, r0
	int events_registered = 0;
   39222:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39224:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 393f4 <register_events+0x1dc>
   39228:	4f6f      	ldr	r7, [pc, #444]	; (393e8 <register_events+0x1d0>)
   3922a:	4d70      	ldr	r5, [pc, #448]	; (393ec <register_events+0x1d4>)
{
   3922c:	9100      	str	r1, [sp, #0]
   3922e:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   39230:	9b00      	ldr	r3, [sp, #0]
   39232:	429e      	cmp	r6, r3
   39234:	db03      	blt.n	3923e <register_events+0x26>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   39236:	4640      	mov	r0, r8
   39238:	b003      	add	sp, #12
   3923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   3923e:	f04f 0220 	mov.w	r2, #32
   39242:	f3ef 8b11 	mrs	fp, BASEPRI
   39246:	f382 8812 	msr	BASEPRI_MAX, r2
   3924a:	f3bf 8f6f 	isb	sy
   3924e:	4650      	mov	r0, sl
   39250:	f7fd fa52 	bl	366f8 <z_spin_lock_valid>
   39254:	b940      	cbnz	r0, 39268 <register_events+0x50>
   39256:	4639      	mov	r1, r7
   39258:	4628      	mov	r0, r5
   3925a:	228e      	movs	r2, #142	; 0x8e
   3925c:	f003 fcfd 	bl	3cc5a <assert_print>
   39260:	218e      	movs	r1, #142	; 0x8e
   39262:	4638      	mov	r0, r7
   39264:	f003 fcf2 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   39268:	4650      	mov	r0, sl
   3926a:	f7fd fa63 	bl	36734 <z_spin_lock_set_owner>
	switch (event->type) {
   3926e:	f899 200d 	ldrb.w	r2, [r9, #13]
   39272:	f002 021f 	and.w	r2, r2, #31
   39276:	2a08      	cmp	r2, #8
   39278:	d853      	bhi.n	39322 <register_events+0x10a>
   3927a:	e8df f002 	tbb	[pc, r2]
   3927e:	4431      	.short	0x4431
   39280:	522d5205 	.word	0x522d5205
   39284:	5252      	.short	0x5252
   39286:	4b          	.byte	0x4b
   39287:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   39288:	f8d9 2010 	ldr.w	r2, [r9, #16]
   3928c:	6892      	ldr	r2, [r2, #8]
   3928e:	b33a      	cbz	r2, 392e0 <register_events+0xc8>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   39290:	2202      	movs	r2, #2
	event->poller = NULL;
   39292:	2000      	movs	r0, #0
	event->state |= state;
   39294:	f8d9 100c 	ldr.w	r1, [r9, #12]
	event->poller = NULL;
   39298:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   3929c:	f3c1 3c45 	ubfx	ip, r1, #13, #6
   392a0:	ea42 020c 	orr.w	r2, r2, ip
   392a4:	f362 3152 	bfi	r1, r2, #13, #6
   392a8:	f8c9 100c 	str.w	r1, [r9, #12]
			poller->is_polling = false;
   392ac:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   392ae:	4650      	mov	r0, sl
   392b0:	f7fd fa30 	bl	36714 <z_spin_unlock_valid>
   392b4:	b940      	cbnz	r0, 392c8 <register_events+0xb0>
   392b6:	4639      	mov	r1, r7
   392b8:	4628      	mov	r0, r5
   392ba:	22b9      	movs	r2, #185	; 0xb9
   392bc:	f003 fccd 	bl	3cc5a <assert_print>
   392c0:	21b9      	movs	r1, #185	; 0xb9
   392c2:	4638      	mov	r0, r7
   392c4:	f003 fcc2 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   392c8:	f38b 8811 	msr	BASEPRI, fp
   392cc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   392d0:	3601      	adds	r6, #1
   392d2:	f109 0914 	add.w	r9, r9, #20
   392d6:	e7ab      	b.n	39230 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   392d8:	f8d9 2010 	ldr.w	r2, [r9, #16]
   392dc:	6812      	ldr	r2, [r2, #0]
   392de:	bb52      	cbnz	r2, 39336 <register_events+0x11e>
		} else if (!just_check && poller->is_polling) {
   392e0:	9b01      	ldr	r3, [sp, #4]
   392e2:	2b00      	cmp	r3, #0
   392e4:	d1e3      	bne.n	392ae <register_events+0x96>
   392e6:	7822      	ldrb	r2, [r4, #0]
   392e8:	2a00      	cmp	r2, #0
   392ea:	d0e0      	beq.n	392ae <register_events+0x96>
	switch (event->type) {
   392ec:	f899 200d 	ldrb.w	r2, [r9, #13]
   392f0:	f002 021f 	and.w	r2, r2, #31
   392f4:	2a08      	cmp	r2, #8
   392f6:	d86d      	bhi.n	393d4 <register_events+0x1bc>
   392f8:	e8df f002 	tbb	[pc, r2]
   392fc:	6c1f4932 	.word	0x6c1f4932
   39300:	6c6c6c37 	.word	0x6c6c6c37
   39304:	5a          	.byte	0x5a
   39305:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   39306:	f8d9 2010 	ldr.w	r2, [r9, #16]
   3930a:	6892      	ldr	r2, [r2, #8]
   3930c:	2a00      	cmp	r2, #0
   3930e:	d0e7      	beq.n	392e0 <register_events+0xc8>
			*state = K_POLL_STATE_SIGNALED;
   39310:	2201      	movs	r2, #1
   39312:	e7be      	b.n	39292 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   39314:	f8d9 2010 	ldr.w	r2, [r9, #16]
   39318:	6a52      	ldr	r2, [r2, #36]	; 0x24
   3931a:	2a00      	cmp	r2, #0
   3931c:	d0e0      	beq.n	392e0 <register_events+0xc8>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   3931e:	2210      	movs	r2, #16
   39320:	e7b7      	b.n	39292 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   39322:	4628      	mov	r0, r5
   39324:	225c      	movs	r2, #92	; 0x5c
   39326:	4932      	ldr	r1, [pc, #200]	; (393f0 <register_events+0x1d8>)
   39328:	f003 fc97 	bl	3cc5a <assert_print>
   3932c:	215c      	movs	r1, #92	; 0x5c
   3932e:	4830      	ldr	r0, [pc, #192]	; (393f0 <register_events+0x1d8>)
   39330:	f003 fc8c 	bl	3cc4c <assert_post_action>
		break;
   39334:	e7d4      	b.n	392e0 <register_events+0xc8>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   39336:	2204      	movs	r2, #4
   39338:	e7ab      	b.n	39292 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3933a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   3933e:	b942      	cbnz	r2, 39352 <register_events+0x13a>
   39340:	4628      	mov	r0, r5
   39342:	492b      	ldr	r1, [pc, #172]	; (393f0 <register_events+0x1d8>)
   39344:	2286      	movs	r2, #134	; 0x86
   39346:	f003 fc88 	bl	3cc5a <assert_print>
   3934a:	2186      	movs	r1, #134	; 0x86
   3934c:	4828      	ldr	r0, [pc, #160]	; (393f0 <register_events+0x1d8>)
   3934e:	f003 fc7d 	bl	3cc4c <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   39352:	4622      	mov	r2, r4
   39354:	4649      	mov	r1, r9
   39356:	f8d9 0010 	ldr.w	r0, [r9, #16]
   3935a:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   3935c:	f007 fff5 	bl	4134a <add_event>
	event->poller = poller;
   39360:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   39364:	f108 0801 	add.w	r8, r8, #1
   39368:	e7a1      	b.n	392ae <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3936a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   3936e:	b942      	cbnz	r2, 39382 <register_events+0x16a>
   39370:	4628      	mov	r0, r5
   39372:	491f      	ldr	r1, [pc, #124]	; (393f0 <register_events+0x1d8>)
   39374:	228a      	movs	r2, #138	; 0x8a
   39376:	f003 fc70 	bl	3cc5a <assert_print>
   3937a:	218a      	movs	r1, #138	; 0x8a
   3937c:	481c      	ldr	r0, [pc, #112]	; (393f0 <register_events+0x1d8>)
   3937e:	f003 fc65 	bl	3cc4c <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   39382:	f8d9 0010 	ldr.w	r0, [r9, #16]
   39386:	4622      	mov	r2, r4
   39388:	4649      	mov	r1, r9
   3938a:	3014      	adds	r0, #20
   3938c:	e7e6      	b.n	3935c <register_events+0x144>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3938e:	f8d9 2010 	ldr.w	r2, [r9, #16]
   39392:	b942      	cbnz	r2, 393a6 <register_events+0x18e>
   39394:	4628      	mov	r0, r5
   39396:	4916      	ldr	r1, [pc, #88]	; (393f0 <register_events+0x1d8>)
   39398:	228e      	movs	r2, #142	; 0x8e
   3939a:	f003 fc5e 	bl	3cc5a <assert_print>
   3939e:	218e      	movs	r1, #142	; 0x8e
   393a0:	4813      	ldr	r0, [pc, #76]	; (393f0 <register_events+0x1d8>)
   393a2:	f003 fc53 	bl	3cc4c <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   393a6:	4622      	mov	r2, r4
   393a8:	4649      	mov	r1, r9
   393aa:	f8d9 0010 	ldr.w	r0, [r9, #16]
   393ae:	e7d5      	b.n	3935c <register_events+0x144>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   393b0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   393b4:	b942      	cbnz	r2, 393c8 <register_events+0x1b0>
   393b6:	4628      	mov	r0, r5
   393b8:	490d      	ldr	r1, [pc, #52]	; (393f0 <register_events+0x1d8>)
   393ba:	2292      	movs	r2, #146	; 0x92
   393bc:	f003 fc4d 	bl	3cc5a <assert_print>
   393c0:	2192      	movs	r1, #146	; 0x92
   393c2:	480b      	ldr	r0, [pc, #44]	; (393f0 <register_events+0x1d8>)
   393c4:	f003 fc42 	bl	3cc4c <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   393c8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   393cc:	4622      	mov	r2, r4
   393ce:	4649      	mov	r1, r9
   393d0:	3028      	adds	r0, #40	; 0x28
   393d2:	e7c3      	b.n	3935c <register_events+0x144>
		__ASSERT(false, "invalid event type\n");
   393d4:	4628      	mov	r0, r5
   393d6:	2299      	movs	r2, #153	; 0x99
   393d8:	4905      	ldr	r1, [pc, #20]	; (393f0 <register_events+0x1d8>)
   393da:	f003 fc3e 	bl	3cc5a <assert_print>
   393de:	2199      	movs	r1, #153	; 0x99
   393e0:	4803      	ldr	r0, [pc, #12]	; (393f0 <register_events+0x1d8>)
   393e2:	f003 fc33 	bl	3cc4c <assert_post_action>
		break;
   393e6:	e7bb      	b.n	39360 <register_events+0x148>
   393e8:	0004429d 	.word	0x0004429d
   393ec:	00044263 	.word	0x00044263
   393f0:	0004be2c 	.word	0x0004be2c
   393f4:	2001a55c 	.word	0x2001a55c

000393f8 <clear_event_registrations>:
{
   393f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   393fc:	2414      	movs	r4, #20
   393fe:	4690      	mov	r8, r2
	while (num_events--) {
   39400:	460f      	mov	r7, r1
   39402:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   39406:	4d43      	ldr	r5, [pc, #268]	; (39514 <clear_event_registrations+0x11c>)
   39408:	4e43      	ldr	r6, [pc, #268]	; (39518 <clear_event_registrations+0x120>)
   3940a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 39520 <clear_event_registrations+0x128>
	while (num_events--) {
   3940e:	b90f      	cbnz	r7, 39414 <clear_event_registrations+0x1c>
}
   39410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   39414:	2300      	movs	r3, #0
   39416:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   3941a:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3941e:	f1a4 0a14 	sub.w	sl, r4, #20
   39422:	f003 031f 	and.w	r3, r3, #31
   39426:	2b08      	cmp	r3, #8
   39428:	d83e      	bhi.n	394a8 <clear_event_registrations+0xb0>
   3942a:	e8df f003 	tbb	[pc, r3]
   3942e:	2746      	.short	0x2746
   39430:	3d1c3d05 	.word	0x3d1c3d05
   39434:	3d3d      	.short	0x3d3d
   39436:	32          	.byte	0x32
   39437:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   39438:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3943c:	b943      	cbnz	r3, 39450 <clear_event_registrations+0x58>
   3943e:	4629      	mov	r1, r5
   39440:	22a9      	movs	r2, #169	; 0xa9
   39442:	4630      	mov	r0, r6
   39444:	f003 fc09 	bl	3cc5a <assert_print>
   39448:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   3944a:	4628      	mov	r0, r5
   3944c:	f003 fbfe 	bl	3cc4c <assert_post_action>
	return node->next != NULL;
   39450:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   39454:	b38b      	cbz	r3, 394ba <clear_event_registrations+0xc2>
	sys_dnode_t *const prev = node->prev;
   39456:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   3945a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3945c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3945e:	2300      	movs	r3, #0
	node->prev = NULL;
   39460:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   39464:	e029      	b.n	394ba <clear_event_registrations+0xc2>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   39466:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3946a:	2b00      	cmp	r3, #0
   3946c:	d1f0      	bne.n	39450 <clear_event_registrations+0x58>
   3946e:	4629      	mov	r1, r5
   39470:	22ad      	movs	r2, #173	; 0xad
   39472:	4630      	mov	r0, r6
   39474:	f003 fbf1 	bl	3cc5a <assert_print>
   39478:	21ad      	movs	r1, #173	; 0xad
   3947a:	e7e6      	b.n	3944a <clear_event_registrations+0x52>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3947c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   39480:	2b00      	cmp	r3, #0
   39482:	d1e5      	bne.n	39450 <clear_event_registrations+0x58>
   39484:	4629      	mov	r1, r5
   39486:	22b1      	movs	r2, #177	; 0xb1
   39488:	4630      	mov	r0, r6
   3948a:	f003 fbe6 	bl	3cc5a <assert_print>
   3948e:	21b1      	movs	r1, #177	; 0xb1
   39490:	e7db      	b.n	3944a <clear_event_registrations+0x52>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   39492:	f854 3c04 	ldr.w	r3, [r4, #-4]
   39496:	2b00      	cmp	r3, #0
   39498:	d1da      	bne.n	39450 <clear_event_registrations+0x58>
   3949a:	4629      	mov	r1, r5
   3949c:	22b5      	movs	r2, #181	; 0xb5
   3949e:	4630      	mov	r0, r6
   394a0:	f003 fbdb 	bl	3cc5a <assert_print>
   394a4:	21b5      	movs	r1, #181	; 0xb5
   394a6:	e7d0      	b.n	3944a <clear_event_registrations+0x52>
		__ASSERT(false, "invalid event type\n");
   394a8:	4629      	mov	r1, r5
   394aa:	4630      	mov	r0, r6
   394ac:	22bc      	movs	r2, #188	; 0xbc
   394ae:	f003 fbd4 	bl	3cc5a <assert_print>
   394b2:	21bc      	movs	r1, #188	; 0xbc
   394b4:	4628      	mov	r0, r5
   394b6:	f003 fbc9 	bl	3cc4c <assert_post_action>
   394ba:	4648      	mov	r0, r9
   394bc:	f7fd f92a 	bl	36714 <z_spin_unlock_valid>
   394c0:	b940      	cbnz	r0, 394d4 <clear_event_registrations+0xdc>
   394c2:	4630      	mov	r0, r6
   394c4:	4915      	ldr	r1, [pc, #84]	; (3951c <clear_event_registrations+0x124>)
   394c6:	22b9      	movs	r2, #185	; 0xb9
   394c8:	f003 fbc7 	bl	3cc5a <assert_print>
   394cc:	21b9      	movs	r1, #185	; 0xb9
   394ce:	4813      	ldr	r0, [pc, #76]	; (3951c <clear_event_registrations+0x124>)
   394d0:	f003 fbbc 	bl	3cc4c <assert_post_action>
   394d4:	f388 8811 	msr	BASEPRI, r8
   394d8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   394dc:	f04f 0320 	mov.w	r3, #32
   394e0:	f3ef 8811 	mrs	r8, BASEPRI
   394e4:	f383 8812 	msr	BASEPRI_MAX, r3
   394e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   394ec:	4648      	mov	r0, r9
   394ee:	f7fd f903 	bl	366f8 <z_spin_lock_valid>
   394f2:	b940      	cbnz	r0, 39506 <clear_event_registrations+0x10e>
   394f4:	4630      	mov	r0, r6
   394f6:	4909      	ldr	r1, [pc, #36]	; (3951c <clear_event_registrations+0x124>)
   394f8:	228e      	movs	r2, #142	; 0x8e
   394fa:	f003 fbae 	bl	3cc5a <assert_print>
   394fe:	218e      	movs	r1, #142	; 0x8e
   39500:	4806      	ldr	r0, [pc, #24]	; (3951c <clear_event_registrations+0x124>)
   39502:	f003 fba3 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   39506:	4648      	mov	r0, r9
   39508:	f7fd f914 	bl	36734 <z_spin_lock_set_owner>
	return k;
   3950c:	4654      	mov	r4, sl
   3950e:	3f01      	subs	r7, #1
   39510:	e77d      	b.n	3940e <clear_event_registrations+0x16>
   39512:	bf00      	nop
   39514:	0004be2c 	.word	0x0004be2c
   39518:	00044263 	.word	0x00044263
   3951c:	0004429d 	.word	0x0004429d
   39520:	2001a55c 	.word	0x2001a55c

00039524 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   39524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   39528:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   3952a:	4b63      	ldr	r3, [pc, #396]	; (396b8 <z_impl_k_poll+0x194>)
{
   3952c:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   3952e:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   39530:	2301      	movs	r3, #1
{
   39532:	4688      	mov	r8, r1
   39534:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   39536:	f107 0960 	add.w	r9, r7, #96	; 0x60
	poller->is_polling = true;
   3953a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   3953e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
   39542:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   39546:	b153      	cbz	r3, 3955e <z_impl_k_poll+0x3a>
   39548:	495c      	ldr	r1, [pc, #368]	; (396bc <z_impl_k_poll+0x198>)
   3954a:	485d      	ldr	r0, [pc, #372]	; (396c0 <z_impl_k_poll+0x19c>)
   3954c:	f44f 728d 	mov.w	r2, #282	; 0x11a
   39550:	f003 fb83 	bl	3cc5a <assert_print>
   39554:	f44f 718d 	mov.w	r1, #282	; 0x11a
   39558:	4858      	ldr	r0, [pc, #352]	; (396bc <z_impl_k_poll+0x198>)
   3955a:	f003 fb77 	bl	3cc4c <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   3955e:	b954      	cbnz	r4, 39576 <z_impl_k_poll+0x52>
   39560:	4956      	ldr	r1, [pc, #344]	; (396bc <z_impl_k_poll+0x198>)
   39562:	4857      	ldr	r0, [pc, #348]	; (396c0 <z_impl_k_poll+0x19c>)
   39564:	f240 121b 	movw	r2, #283	; 0x11b
   39568:	f003 fb77 	bl	3cc5a <assert_print>
   3956c:	f240 111b 	movw	r1, #283	; 0x11b
   39570:	4852      	ldr	r0, [pc, #328]	; (396bc <z_impl_k_poll+0x198>)
   39572:	f003 fb6b 	bl	3cc4c <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   39576:	f1b8 0f00 	cmp.w	r8, #0
   3957a:	da0a      	bge.n	39592 <z_impl_k_poll+0x6e>
   3957c:	494f      	ldr	r1, [pc, #316]	; (396bc <z_impl_k_poll+0x198>)
   3957e:	4850      	ldr	r0, [pc, #320]	; (396c0 <z_impl_k_poll+0x19c>)
   39580:	f44f 728e 	mov.w	r2, #284	; 0x11c
   39584:	f003 fb69 	bl	3cc5a <assert_print>
   39588:	f44f 718e 	mov.w	r1, #284	; 0x11c
   3958c:	484b      	ldr	r0, [pc, #300]	; (396bc <z_impl_k_poll+0x198>)
   3958e:	f003 fb5d 	bl	3cc4c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   39592:	ea56 0305 	orrs.w	r3, r6, r5
   39596:	bf0c      	ite	eq
   39598:	2301      	moveq	r3, #1
   3959a:	2300      	movne	r3, #0
   3959c:	4641      	mov	r1, r8
   3959e:	464a      	mov	r2, r9
   395a0:	4620      	mov	r0, r4
   395a2:	f7ff fe39 	bl	39218 <register_events>
   395a6:	4680      	mov	r8, r0
   395a8:	f04f 0320 	mov.w	r3, #32
   395ac:	f3ef 8911 	mrs	r9, BASEPRI
   395b0:	f383 8812 	msr	BASEPRI_MAX, r3
   395b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   395b8:	4842      	ldr	r0, [pc, #264]	; (396c4 <z_impl_k_poll+0x1a0>)
   395ba:	f7fd f89d 	bl	366f8 <z_spin_lock_valid>
   395be:	b940      	cbnz	r0, 395d2 <z_impl_k_poll+0xae>
   395c0:	4941      	ldr	r1, [pc, #260]	; (396c8 <z_impl_k_poll+0x1a4>)
   395c2:	483f      	ldr	r0, [pc, #252]	; (396c0 <z_impl_k_poll+0x19c>)
   395c4:	228e      	movs	r2, #142	; 0x8e
   395c6:	f003 fb48 	bl	3cc5a <assert_print>
   395ca:	218e      	movs	r1, #142	; 0x8e
   395cc:	483e      	ldr	r0, [pc, #248]	; (396c8 <z_impl_k_poll+0x1a4>)
   395ce:	f003 fb3d 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   395d2:	483c      	ldr	r0, [pc, #240]	; (396c4 <z_impl_k_poll+0x1a0>)
   395d4:	f7fd f8ae 	bl	36734 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   395d8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   395dc:	b9d3      	cbnz	r3, 39614 <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   395de:	4620      	mov	r0, r4
   395e0:	464a      	mov	r2, r9
   395e2:	4641      	mov	r1, r8
   395e4:	f7ff ff08 	bl	393f8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   395e8:	4836      	ldr	r0, [pc, #216]	; (396c4 <z_impl_k_poll+0x1a0>)
   395ea:	f7fd f893 	bl	36714 <z_spin_unlock_valid>
   395ee:	b940      	cbnz	r0, 39602 <z_impl_k_poll+0xde>
   395f0:	4935      	ldr	r1, [pc, #212]	; (396c8 <z_impl_k_poll+0x1a4>)
   395f2:	4833      	ldr	r0, [pc, #204]	; (396c0 <z_impl_k_poll+0x19c>)
   395f4:	22b9      	movs	r2, #185	; 0xb9
   395f6:	f003 fb30 	bl	3cc5a <assert_print>
   395fa:	21b9      	movs	r1, #185	; 0xb9
   395fc:	4832      	ldr	r0, [pc, #200]	; (396c8 <z_impl_k_poll+0x1a4>)
   395fe:	f003 fb25 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   39602:	f389 8811 	msr	BASEPRI, r9
   39606:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
   3960a:	2500      	movs	r5, #0
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   3960c:	4628      	mov	r0, r5
   3960e:	b003      	add	sp, #12
   39610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   39614:	2300      	movs	r3, #0
   39616:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3961a:	ea56 0305 	orrs.w	r3, r6, r5
   3961e:	d113      	bne.n	39648 <z_impl_k_poll+0x124>
   39620:	4828      	ldr	r0, [pc, #160]	; (396c4 <z_impl_k_poll+0x1a0>)
   39622:	f7fd f877 	bl	36714 <z_spin_unlock_valid>
   39626:	b940      	cbnz	r0, 3963a <z_impl_k_poll+0x116>
   39628:	4927      	ldr	r1, [pc, #156]	; (396c8 <z_impl_k_poll+0x1a4>)
   3962a:	4825      	ldr	r0, [pc, #148]	; (396c0 <z_impl_k_poll+0x19c>)
   3962c:	22b9      	movs	r2, #185	; 0xb9
   3962e:	f003 fb14 	bl	3cc5a <assert_print>
   39632:	21b9      	movs	r1, #185	; 0xb9
   39634:	4824      	ldr	r0, [pc, #144]	; (396c8 <z_impl_k_poll+0x1a4>)
   39636:	f003 fb09 	bl	3cc4c <assert_post_action>
   3963a:	f389 8811 	msr	BASEPRI, r9
   3963e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   39642:	f06f 050a 	mvn.w	r5, #10
   39646:	e7e1      	b.n	3960c <z_impl_k_poll+0xe8>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   39648:	e9cd 6500 	strd	r6, r5, [sp]
   3964c:	4649      	mov	r1, r9
   3964e:	4a1f      	ldr	r2, [pc, #124]	; (396cc <z_impl_k_poll+0x1a8>)
   39650:	481c      	ldr	r0, [pc, #112]	; (396c4 <z_impl_k_poll+0x1a0>)
   39652:	f7fe fdb5 	bl	381c0 <z_pend_curr>
   39656:	4605      	mov	r5, r0
	__asm__ volatile(
   39658:	f04f 0320 	mov.w	r3, #32
   3965c:	f3ef 8611 	mrs	r6, BASEPRI
   39660:	f383 8812 	msr	BASEPRI_MAX, r3
   39664:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39668:	4816      	ldr	r0, [pc, #88]	; (396c4 <z_impl_k_poll+0x1a0>)
   3966a:	f7fd f845 	bl	366f8 <z_spin_lock_valid>
   3966e:	b940      	cbnz	r0, 39682 <z_impl_k_poll+0x15e>
   39670:	4915      	ldr	r1, [pc, #84]	; (396c8 <z_impl_k_poll+0x1a4>)
   39672:	4813      	ldr	r0, [pc, #76]	; (396c0 <z_impl_k_poll+0x19c>)
   39674:	228e      	movs	r2, #142	; 0x8e
   39676:	f003 faf0 	bl	3cc5a <assert_print>
   3967a:	218e      	movs	r1, #142	; 0x8e
   3967c:	4812      	ldr	r0, [pc, #72]	; (396c8 <z_impl_k_poll+0x1a4>)
   3967e:	f003 fae5 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   39682:	4810      	ldr	r0, [pc, #64]	; (396c4 <z_impl_k_poll+0x1a0>)
   39684:	f7fd f856 	bl	36734 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   39688:	4620      	mov	r0, r4
   3968a:	4632      	mov	r2, r6
   3968c:	4641      	mov	r1, r8
   3968e:	f7ff feb3 	bl	393f8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39692:	480c      	ldr	r0, [pc, #48]	; (396c4 <z_impl_k_poll+0x1a0>)
   39694:	f7fd f83e 	bl	36714 <z_spin_unlock_valid>
   39698:	b940      	cbnz	r0, 396ac <z_impl_k_poll+0x188>
   3969a:	490b      	ldr	r1, [pc, #44]	; (396c8 <z_impl_k_poll+0x1a4>)
   3969c:	4808      	ldr	r0, [pc, #32]	; (396c0 <z_impl_k_poll+0x19c>)
   3969e:	22b9      	movs	r2, #185	; 0xb9
   396a0:	f003 fadb 	bl	3cc5a <assert_print>
   396a4:	21b9      	movs	r1, #185	; 0xb9
   396a6:	4808      	ldr	r0, [pc, #32]	; (396c8 <z_impl_k_poll+0x1a4>)
   396a8:	f003 fad0 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   396ac:	f386 8811 	msr	BASEPRI, r6
   396b0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   396b4:	e7aa      	b.n	3960c <z_impl_k_poll+0xe8>
   396b6:	bf00      	nop
   396b8:	2001a500 	.word	0x2001a500
   396bc:	0004be2c 	.word	0x0004be2c
   396c0:	00044263 	.word	0x00044263
   396c4:	2001a55c 	.word	0x2001a55c
   396c8:	0004429d 	.word	0x0004429d
   396cc:	20014a6c 	.word	0x20014a6c

000396d0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   396d0:	b570      	push	{r4, r5, r6, lr}
   396d2:	4604      	mov	r4, r0
   396d4:	460d      	mov	r5, r1
	__asm__ volatile(
   396d6:	f04f 0320 	mov.w	r3, #32
   396da:	f3ef 8611 	mrs	r6, BASEPRI
   396de:	f383 8812 	msr	BASEPRI_MAX, r3
   396e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   396e6:	481c      	ldr	r0, [pc, #112]	; (39758 <z_impl_k_poll_signal_raise+0x88>)
   396e8:	f7fd f806 	bl	366f8 <z_spin_lock_valid>
   396ec:	b940      	cbnz	r0, 39700 <z_impl_k_poll_signal_raise+0x30>
   396ee:	491b      	ldr	r1, [pc, #108]	; (3975c <z_impl_k_poll_signal_raise+0x8c>)
   396f0:	481b      	ldr	r0, [pc, #108]	; (39760 <z_impl_k_poll_signal_raise+0x90>)
   396f2:	228e      	movs	r2, #142	; 0x8e
   396f4:	f003 fab1 	bl	3cc5a <assert_print>
   396f8:	218e      	movs	r1, #142	; 0x8e
   396fa:	4818      	ldr	r0, [pc, #96]	; (3975c <z_impl_k_poll_signal_raise+0x8c>)
   396fc:	f003 faa6 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   39700:	4815      	ldr	r0, [pc, #84]	; (39758 <z_impl_k_poll_signal_raise+0x88>)
   39702:	f7fd f817 	bl	36734 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   39706:	2101      	movs	r1, #1
	return list->head == list;
   39708:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   3970a:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   3970c:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   3970e:	60a1      	str	r1, [r4, #8]
   39710:	d112      	bne.n	39738 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39712:	4811      	ldr	r0, [pc, #68]	; (39758 <z_impl_k_poll_signal_raise+0x88>)
   39714:	f7fc fffe 	bl	36714 <z_spin_unlock_valid>
   39718:	b940      	cbnz	r0, 3972c <z_impl_k_poll_signal_raise+0x5c>
   3971a:	4910      	ldr	r1, [pc, #64]	; (3975c <z_impl_k_poll_signal_raise+0x8c>)
   3971c:	4810      	ldr	r0, [pc, #64]	; (39760 <z_impl_k_poll_signal_raise+0x90>)
   3971e:	22b9      	movs	r2, #185	; 0xb9
   39720:	f003 fa9b 	bl	3cc5a <assert_print>
   39724:	21b9      	movs	r1, #185	; 0xb9
   39726:	480d      	ldr	r0, [pc, #52]	; (3975c <z_impl_k_poll_signal_raise+0x8c>)
   39728:	f003 fa90 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   3972c:	f386 8811 	msr	BASEPRI, r6
   39730:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   39734:	2400      	movs	r4, #0
   39736:	e00d      	b.n	39754 <z_impl_k_poll_signal_raise+0x84>
	sys_dnode_t *const next = node->next;
   39738:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   3973c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3973e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   39740:	2300      	movs	r3, #0
	node->prev = NULL;
   39742:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   39746:	f007 fe2f 	bl	413a8 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   3974a:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   3974c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   3974e:	4802      	ldr	r0, [pc, #8]	; (39758 <z_impl_k_poll_signal_raise+0x88>)
   39750:	f7fe f95e 	bl	37a10 <z_reschedule>
	return rc;
}
   39754:	4620      	mov	r0, r4
   39756:	bd70      	pop	{r4, r5, r6, pc}
   39758:	2001a55c 	.word	0x2001a55c
   3975c:	0004429d 	.word	0x0004429d
   39760:	00044263 	.word	0x00044263

00039764 <k_event_post_internal>:
	return match != 0;
}

static void k_event_post_internal(struct k_event *event, uint32_t events,
				  bool accumulate)
{
   39764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39768:	4605      	mov	r5, r0
   3976a:	460e      	mov	r6, r1
   3976c:	4614      	mov	r4, r2
	k_spinlock_key_t  key;
	struct k_thread  *thread;
	unsigned int      wait_condition;
	struct k_thread  *head = NULL;

	key = k_spin_lock(&event->lock);
   3976e:	f100 070c 	add.w	r7, r0, #12
	__asm__ volatile(
   39772:	f04f 0320 	mov.w	r3, #32
   39776:	f3ef 8811 	mrs	r8, BASEPRI
   3977a:	f383 8812 	msr	BASEPRI_MAX, r3
   3977e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39782:	4638      	mov	r0, r7
   39784:	f7fc ffb8 	bl	366f8 <z_spin_lock_valid>
   39788:	b940      	cbnz	r0, 3979c <k_event_post_internal+0x38>
   3978a:	4920      	ldr	r1, [pc, #128]	; (3980c <k_event_post_internal+0xa8>)
   3978c:	4820      	ldr	r0, [pc, #128]	; (39810 <k_event_post_internal+0xac>)
   3978e:	228e      	movs	r2, #142	; 0x8e
   39790:	f003 fa63 	bl	3cc5a <assert_print>
   39794:	218e      	movs	r1, #142	; 0x8e
   39796:	481d      	ldr	r0, [pc, #116]	; (3980c <k_event_post_internal+0xa8>)
   39798:	f003 fa58 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   3979c:	4638      	mov	r0, r7
   3979e:	f7fc ffc9 	bl	36734 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, post, event, events,
					accumulate);

	if (accumulate) {
   397a2:	b10c      	cbz	r4, 397a8 <k_event_post_internal+0x44>
		events |= event->events;
   397a4:	68ab      	ldr	r3, [r5, #8]
   397a6:	431e      	orrs	r6, r3
	return list->head == list;
   397a8:	682b      	ldr	r3, [r5, #0]
	 * 1. Create a linked list of threads to unpend.
	 * 2. Unpend each of the threads in the linked list
	 * 3. Ready each of the threads in the linked list
	 */

	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   397aa:	2400      	movs	r4, #0
   397ac:	429d      	cmp	r5, r3
   397ae:	bf08      	it	eq
   397b0:	2300      	moveq	r3, #0
	event->events = events;
   397b2:	60ae      	str	r6, [r5, #8]
	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   397b4:	b1fb      	cbz	r3, 397f6 <k_event_post_internal+0x92>
		wait_condition = thread->event_options & K_EVENT_WAIT_MASK;
   397b6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c

		if (are_wait_conditions_met(thread->events, events,
   397b8:	6e98      	ldr	r0, [r3, #104]	; 0x68
	if (wait_condition == K_EVENT_WAIT_ALL) {
   397ba:	07c9      	lsls	r1, r1, #31
	uint32_t  match = current & desired;
   397bc:	ea00 0206 	and.w	r2, r0, r6
	if (wait_condition == K_EVENT_WAIT_ALL) {
   397c0:	d51f      	bpl.n	39802 <k_event_post_internal+0x9e>
		return match == desired;
   397c2:	1a81      	subs	r1, r0, r2
   397c4:	424a      	negs	r2, r1
   397c6:	414a      	adcs	r2, r1
		if (are_wait_conditions_met(thread->events, events,
   397c8:	b10a      	cbz	r2, 397ce <k_event_post_internal+0x6a>
			/*
			 * The wait conditions have been satisfied. Add this
			 * thread to the list of threads to unpend.
			 */

			thread->next_event_link = head;
   397ca:	665c      	str	r4, [r3, #100]	; 0x64
   397cc:	461c      	mov	r4, r3
	return (node == list->tail) ? NULL : node->next;
   397ce:	686a      	ldr	r2, [r5, #4]
   397d0:	4293      	cmp	r3, r2
   397d2:	d002      	beq.n	397da <k_event_post_internal+0x76>
   397d4:	681b      	ldr	r3, [r3, #0]
	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   397d6:	2b00      	cmp	r3, #0
   397d8:	d1ed      	bne.n	397b6 <k_event_post_internal+0x52>
		}


	}

	if (head != NULL) {
   397da:	b164      	cbz	r4, 397f6 <k_event_post_internal+0x92>
   397dc:	2500      	movs	r5, #0
		thread = head;
		do {
			z_unpend_thread(thread);
   397de:	4620      	mov	r0, r4
   397e0:	f7fe f9dc 	bl	37b9c <z_unpend_thread>
			arch_thread_return_value_set(thread, 0);
			thread->events = events;
			z_ready_thread(thread);
   397e4:	4620      	mov	r0, r4
   397e6:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
			thread->events = events;
   397ea:	66a6      	str	r6, [r4, #104]	; 0x68
			z_ready_thread(thread);
   397ec:	f7fe fb40 	bl	37e70 <z_ready_thread>
			thread = thread->next_event_link;
   397f0:	6e64      	ldr	r4, [r4, #100]	; 0x64
		} while (thread != NULL);
   397f2:	2c00      	cmp	r4, #0
   397f4:	d1f3      	bne.n	397de <k_event_post_internal+0x7a>
	}

	z_reschedule(&event->lock, key);
   397f6:	4641      	mov	r1, r8
   397f8:	4638      	mov	r0, r7

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, post, event, events,
				       accumulate);
}
   397fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_reschedule(&event->lock, key);
   397fe:	f7fe b907 	b.w	37a10 <z_reschedule>
	return match != 0;
   39802:	3a00      	subs	r2, #0
   39804:	bf18      	it	ne
   39806:	2201      	movne	r2, #1
   39808:	e7de      	b.n	397c8 <k_event_post_internal+0x64>
   3980a:	bf00      	nop
   3980c:	0004429d 	.word	0x0004429d
   39810:	00044263 	.word	0x00044263

00039814 <k_event_wait_internal>:
#include <syscalls/k_event_set_mrsh.c>
#endif

static uint32_t k_event_wait_internal(struct k_event *event, uint32_t events,
				      unsigned int options, k_timeout_t timeout)
{
   39814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39818:	b085      	sub	sp, #20
   3981a:	e9dd b30e 	ldrd	fp, r3, [sp, #56]	; 0x38
   3981e:	4605      	mov	r5, r0
   39820:	460c      	mov	r4, r1
   39822:	4690      	mov	r8, r2
   39824:	9302      	str	r3, [sp, #8]
   39826:	f3ef 8305 	mrs	r3, IPSR
	uint32_t  rv = 0;
	unsigned int  wait_condition;
	struct k_thread  *thread;

	__ASSERT(((arch_is_in_isr() == false) ||
   3982a:	b163      	cbz	r3, 39846 <k_event_wait_internal+0x32>
   3982c:	9b02      	ldr	r3, [sp, #8]
   3982e:	ea5b 0303 	orrs.w	r3, fp, r3
   39832:	d008      	beq.n	39846 <k_event_wait_internal+0x32>
   39834:	493a      	ldr	r1, [pc, #232]	; (39920 <k_event_wait_internal+0x10c>)
   39836:	483b      	ldr	r0, [pc, #236]	; (39924 <k_event_wait_internal+0x110>)
   39838:	22ba      	movs	r2, #186	; 0xba
   3983a:	f003 fa0e 	bl	3cc5a <assert_print>
   3983e:	21ba      	movs	r1, #186	; 0xba
   39840:	4837      	ldr	r0, [pc, #220]	; (39920 <k_event_wait_internal+0x10c>)
   39842:	f003 fa03 	bl	3cc4c <assert_post_action>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, wait, event, events,
					options, timeout);

	if (events == 0) {
   39846:	2c00      	cmp	r4, #0
   39848:	d03d      	beq.n	398c6 <k_event_wait_internal+0xb2>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, wait, event, events, 0);
		return 0;
	}

	wait_condition = options & K_EVENT_WAIT_MASK;
   3984a:	f008 0301 	and.w	r3, r8, #1
   3984e:	9303      	str	r3, [sp, #12]
	return z_impl_z_current_get();
   39850:	f7fe ff9a 	bl	38788 <z_impl_z_current_get>
	thread = z_current_get();

	k_spinlock_key_t  key = k_spin_lock(&event->lock);
   39854:	f105 0a0c 	add.w	sl, r5, #12
   39858:	4607      	mov	r7, r0
   3985a:	f04f 0220 	mov.w	r2, #32
   3985e:	f3ef 8911 	mrs	r9, BASEPRI
   39862:	f382 8812 	msr	BASEPRI_MAX, r2
   39866:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3986a:	4650      	mov	r0, sl
   3986c:	f7fc ff44 	bl	366f8 <z_spin_lock_valid>
   39870:	b940      	cbnz	r0, 39884 <k_event_wait_internal+0x70>
   39872:	492d      	ldr	r1, [pc, #180]	; (39928 <k_event_wait_internal+0x114>)
   39874:	482b      	ldr	r0, [pc, #172]	; (39924 <k_event_wait_internal+0x110>)
   39876:	228e      	movs	r2, #142	; 0x8e
   39878:	f003 f9ef 	bl	3cc5a <assert_print>
   3987c:	218e      	movs	r1, #142	; 0x8e
   3987e:	482a      	ldr	r0, [pc, #168]	; (39928 <k_event_wait_internal+0x114>)
   39880:	f003 f9e4 	bl	3cc4c <assert_post_action>
	z_spin_lock_set_owner(l);
   39884:	4650      	mov	r0, sl
   39886:	f7fc ff55 	bl	36734 <z_spin_lock_set_owner>

	if (options & K_EVENT_WAIT_RESET) {
   3988a:	f018 0f02 	tst.w	r8, #2
		event->events = 0;
   3988e:	bf1c      	itt	ne
   39890:	2200      	movne	r2, #0
   39892:	60aa      	strne	r2, [r5, #8]
	}

	/* Test if the wait conditions have already been met. */

	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   39894:	68ae      	ldr	r6, [r5, #8]
	if (wait_condition == K_EVENT_WAIT_ALL) {
   39896:	9b03      	ldr	r3, [sp, #12]
	uint32_t  match = current & desired;
   39898:	ea06 0204 	and.w	r2, r6, r4
	if (wait_condition == K_EVENT_WAIT_ALL) {
   3989c:	b1bb      	cbz	r3, 398ce <k_event_wait_internal+0xba>
	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   3989e:	4294      	cmp	r4, r2
   398a0:	d117      	bne.n	398d2 <k_event_wait_internal+0xbe>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   398a2:	4650      	mov	r0, sl
   398a4:	f7fc ff36 	bl	36714 <z_spin_unlock_valid>
   398a8:	b940      	cbnz	r0, 398bc <k_event_wait_internal+0xa8>
   398aa:	491f      	ldr	r1, [pc, #124]	; (39928 <k_event_wait_internal+0x114>)
   398ac:	481d      	ldr	r0, [pc, #116]	; (39924 <k_event_wait_internal+0x110>)
   398ae:	22b9      	movs	r2, #185	; 0xb9
   398b0:	f003 f9d3 	bl	3cc5a <assert_print>
   398b4:	21b9      	movs	r1, #185	; 0xb9
   398b6:	481c      	ldr	r0, [pc, #112]	; (39928 <k_event_wait_internal+0x114>)
   398b8:	f003 f9c8 	bl	3cc4c <assert_post_action>
	__asm__ volatile(
   398bc:	f389 8811 	msr	BASEPRI, r9
   398c0:	f3bf 8f6f 	isb	sy

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, wait, event,
				       events, rv & events);

	return rv & events;
   398c4:	4034      	ands	r4, r6
}
   398c6:	4620      	mov	r0, r4
   398c8:	b005      	add	sp, #20
   398ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   398ce:	2a00      	cmp	r2, #0
   398d0:	d1e7      	bne.n	398a2 <k_event_wait_internal+0x8e>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   398d2:	9b02      	ldr	r3, [sp, #8]
   398d4:	ea5b 0303 	orrs.w	r3, fp, r3
   398d8:	d112      	bne.n	39900 <k_event_wait_internal+0xec>
   398da:	4650      	mov	r0, sl
   398dc:	f7fc ff1a 	bl	36714 <z_spin_unlock_valid>
   398e0:	b940      	cbnz	r0, 398f4 <k_event_wait_internal+0xe0>
   398e2:	4911      	ldr	r1, [pc, #68]	; (39928 <k_event_wait_internal+0x114>)
   398e4:	480f      	ldr	r0, [pc, #60]	; (39924 <k_event_wait_internal+0x110>)
   398e6:	22b9      	movs	r2, #185	; 0xb9
   398e8:	f003 f9b7 	bl	3cc5a <assert_print>
   398ec:	21b9      	movs	r1, #185	; 0xb9
   398ee:	480e      	ldr	r0, [pc, #56]	; (39928 <k_event_wait_internal+0x114>)
   398f0:	f003 f9ac 	bl	3cc4c <assert_post_action>
   398f4:	f389 8811 	msr	BASEPRI, r9
   398f8:	f3bf 8f6f 	isb	sy
	uint32_t  rv = 0;
   398fc:	2600      	movs	r6, #0
   398fe:	e7e1      	b.n	398c4 <k_event_wait_internal+0xb0>
	if (z_pend_curr(&event->lock, key, &event->wait_q, timeout) == 0) {
   39900:	9b02      	ldr	r3, [sp, #8]
	thread->event_options = options;
   39902:	e9c7 481a 	strd	r4, r8, [r7, #104]	; 0x68
	if (z_pend_curr(&event->lock, key, &event->wait_q, timeout) == 0) {
   39906:	462a      	mov	r2, r5
   39908:	4649      	mov	r1, r9
   3990a:	4650      	mov	r0, sl
   3990c:	f8cd b000 	str.w	fp, [sp]
   39910:	9301      	str	r3, [sp, #4]
   39912:	f7fe fc55 	bl	381c0 <z_pend_curr>
   39916:	2800      	cmp	r0, #0
   39918:	d1f0      	bne.n	398fc <k_event_wait_internal+0xe8>
		rv = thread->events;
   3991a:	6ebe      	ldr	r6, [r7, #104]	; 0x68
   3991c:	e7d2      	b.n	398c4 <k_event_wait_internal+0xb0>
   3991e:	bf00      	nop
   39920:	0004be4d 	.word	0x0004be4d
   39924:	00044263 	.word	0x00044263
   39928:	0004429d 	.word	0x0004429d

0003992c <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   3992c:	3204      	adds	r2, #4
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   3992e:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   39932:	4606      	mov	r6, r0
   39934:	460d      	mov	r5, r1
   39936:	d20a      	bcs.n	3994e <z_heap_aligned_alloc+0x22>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   39938:	f04f 0800 	mov.w	r8, #0
   3993c:	f04f 0900 	mov.w	r9, #0
   39940:	f041 0104 	orr.w	r1, r1, #4
   39944:	e9cd 8900 	strd	r8, r9, [sp]
   39948:	f7fc fcc0 	bl	362cc <k_heap_aligned_alloc>
	if (mem == NULL) {
   3994c:	b920      	cbnz	r0, 39958 <z_heap_aligned_alloc+0x2c>
		return NULL;
   3994e:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   39950:	4620      	mov	r0, r4
   39952:	b002      	add	sp, #8
   39954:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   39958:	4604      	mov	r4, r0
   3995a:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   3995e:	2d00      	cmp	r5, #0
   39960:	d0f6      	beq.n	39950 <z_heap_aligned_alloc+0x24>
   39962:	3d01      	subs	r5, #1
   39964:	422c      	tst	r4, r5
   39966:	d0f3      	beq.n	39950 <z_heap_aligned_alloc+0x24>
   39968:	2225      	movs	r2, #37	; 0x25
   3996a:	4904      	ldr	r1, [pc, #16]	; (3997c <z_heap_aligned_alloc+0x50>)
   3996c:	4804      	ldr	r0, [pc, #16]	; (39980 <z_heap_aligned_alloc+0x54>)
   3996e:	f003 f974 	bl	3cc5a <assert_print>
   39972:	2125      	movs	r1, #37	; 0x25
   39974:	4801      	ldr	r0, [pc, #4]	; (3997c <z_heap_aligned_alloc+0x50>)
   39976:	f003 f969 	bl	3cc4c <assert_post_action>
   3997a:	e7e9      	b.n	39950 <z_heap_aligned_alloc+0x24>
   3997c:	0004be70 	.word	0x0004be70
   39980:	00044263 	.word	0x00044263

00039984 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   39984:	2803      	cmp	r0, #3
{
   39986:	b538      	push	{r3, r4, r5, lr}
   39988:	4604      	mov	r4, r0
   3998a:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   3998c:	d901      	bls.n	39992 <k_aligned_alloc+0xe>
   3998e:	0783      	lsls	r3, r0, #30
   39990:	d008      	beq.n	399a4 <k_aligned_alloc+0x20>
   39992:	490e      	ldr	r1, [pc, #56]	; (399cc <k_aligned_alloc+0x48>)
   39994:	480e      	ldr	r0, [pc, #56]	; (399d0 <k_aligned_alloc+0x4c>)
   39996:	2242      	movs	r2, #66	; 0x42
   39998:	f003 f95f 	bl	3cc5a <assert_print>
   3999c:	2142      	movs	r1, #66	; 0x42
   3999e:	480b      	ldr	r0, [pc, #44]	; (399cc <k_aligned_alloc+0x48>)
   399a0:	f003 f954 	bl	3cc4c <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   399a4:	1e63      	subs	r3, r4, #1
   399a6:	4223      	tst	r3, r4
   399a8:	d008      	beq.n	399bc <k_aligned_alloc+0x38>
   399aa:	4908      	ldr	r1, [pc, #32]	; (399cc <k_aligned_alloc+0x48>)
   399ac:	4808      	ldr	r0, [pc, #32]	; (399d0 <k_aligned_alloc+0x4c>)
   399ae:	2246      	movs	r2, #70	; 0x46
   399b0:	f003 f953 	bl	3cc5a <assert_print>
   399b4:	2146      	movs	r1, #70	; 0x46
   399b6:	4805      	ldr	r0, [pc, #20]	; (399cc <k_aligned_alloc+0x48>)
   399b8:	f003 f948 	bl	3cc4c <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   399bc:	462a      	mov	r2, r5
   399be:	4621      	mov	r1, r4

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   399c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   399c4:	4803      	ldr	r0, [pc, #12]	; (399d4 <k_aligned_alloc+0x50>)
   399c6:	f7ff bfb1 	b.w	3992c <z_heap_aligned_alloc>
   399ca:	bf00      	nop
   399cc:	0004be70 	.word	0x0004be70
   399d0:	00044263 	.word	0x00044263
   399d4:	20014e68 	.word	0x20014e68

000399d8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   399d8:	4b01      	ldr	r3, [pc, #4]	; (399e0 <k_thread_system_pool_assign+0x8>)
   399da:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
   399de:	4770      	bx	lr
   399e0:	20014e68 	.word	0x20014e68

000399e4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   399e4:	b513      	push	{r0, r1, r4, lr}
   399e6:	4604      	mov	r4, r0
   399e8:	9101      	str	r1, [sp, #4]
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   399ea:	f007 fba4 	bl	41136 <k_is_in_isr>
   399ee:	9a01      	ldr	r2, [sp, #4]
   399f0:	b958      	cbnz	r0, 39a0a <z_thread_aligned_alloc+0x26>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   399f2:	4b08      	ldr	r3, [pc, #32]	; (39a14 <z_thread_aligned_alloc+0x30>)
   399f4:	689b      	ldr	r3, [r3, #8]
   399f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap != NULL) {
   399fa:	b143      	cbz	r3, 39a0e <z_thread_aligned_alloc+0x2a>
		ret = z_heap_aligned_alloc(heap, align, size);
   399fc:	4621      	mov	r1, r4
   399fe:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   39a00:	b002      	add	sp, #8
   39a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   39a06:	f7ff bf91 	b.w	3992c <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   39a0a:	4b03      	ldr	r3, [pc, #12]	; (39a18 <z_thread_aligned_alloc+0x34>)
   39a0c:	e7f6      	b.n	399fc <z_thread_aligned_alloc+0x18>
}
   39a0e:	b002      	add	sp, #8
   39a10:	bd10      	pop	{r4, pc}
   39a12:	bf00      	nop
   39a14:	2001a500 	.word	0x2001a500
   39a18:	20014e68 	.word	0x20014e68

00039a1c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   39a1c:	4a02      	ldr	r2, [pc, #8]	; (39a28 <boot_banner+0xc>)
   39a1e:	4903      	ldr	r1, [pc, #12]	; (39a2c <boot_banner+0x10>)
   39a20:	4803      	ldr	r0, [pc, #12]	; (39a30 <boot_banner+0x14>)
   39a22:	f002 bf37 	b.w	3c894 <printk>
   39a26:	bf00      	nop
   39a28:	000453f3 	.word	0x000453f3
   39a2c:	0004be94 	.word	0x0004be94
   39a30:	0004bea1 	.word	0x0004bea1

00039a34 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   39a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   39a36:	2400      	movs	r4, #0
   39a38:	4b08      	ldr	r3, [pc, #32]	; (39a5c <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   39a3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   39a3e:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   39a40:	ab02      	add	r3, sp, #8
   39a42:	9300      	str	r3, [sp, #0]
   39a44:	4906      	ldr	r1, [pc, #24]	; (39a60 <k_sys_work_q_init+0x2c>)
   39a46:	f04f 33ff 	mov.w	r3, #4294967295
   39a4a:	4806      	ldr	r0, [pc, #24]	; (39a64 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   39a4c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   39a50:	f7fd fd92 	bl	37578 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   39a54:	4620      	mov	r0, r4
   39a56:	b004      	add	sp, #16
   39a58:	bd10      	pop	{r4, pc}
   39a5a:	bf00      	nop
   39a5c:	0004bec8 	.word	0x0004bec8
   39a60:	20028340 	.word	0x20028340
   39a64:	20018fa8 	.word	0x20018fa8

00039a68 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   39a68:	b530      	push	{r4, r5, lr}
   39a6a:	b095      	sub	sp, #84	; 0x54
   39a6c:	4605      	mov	r5, r0
   39a6e:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   39a70:	2230      	movs	r2, #48	; 0x30
   39a72:	2100      	movs	r1, #0
   39a74:	a808      	add	r0, sp, #32
   39a76:	f007 fdc4 	bl	41602 <memset>
   39a7a:	233f      	movs	r3, #63	; 0x3f
   39a7c:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   39a7e:	ab07      	add	r3, sp, #28
   39a80:	9303      	str	r3, [sp, #12]
   39a82:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   39a84:	9406      	str	r4, [sp, #24]
   39a86:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   39a8a:	b154      	cbz	r4, 39aa2 <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   39a8c:	2301      	movs	r3, #1
   39a8e:	aa05      	add	r2, sp, #20
   39a90:	9200      	str	r2, [sp, #0]
   39a92:	2100      	movs	r1, #0
   39a94:	4804      	ldr	r0, [pc, #16]	; (39aa8 <psa_generate_random+0x40>)
   39a96:	9301      	str	r3, [sp, #4]
   39a98:	aa03      	add	r2, sp, #12
   39a9a:	f000 f815 	bl	39ac8 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   39a9e:	b015      	add	sp, #84	; 0x54
   39aa0:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   39aa2:	4620      	mov	r0, r4
   39aa4:	e7fb      	b.n	39a9e <psa_generate_random+0x36>
   39aa6:	bf00      	nop
   39aa8:	40000100 	.word	0x40000100

00039aac <psa_connect>:
                                0);
}

psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   39aac:	2300      	movs	r3, #0
{
   39aae:	b507      	push	{r0, r1, r2, lr}
   39ab0:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   39ab2:	9300      	str	r3, [sp, #0]
   39ab4:	4601      	mov	r1, r0
   39ab6:	4803      	ldr	r0, [pc, #12]	; (39ac4 <psa_connect+0x18>)
   39ab8:	f7f7 fe10 	bl	316dc <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   39abc:	b003      	add	sp, #12
   39abe:	f85d fb04 	ldr.w	pc, [sp], #4
   39ac2:	bf00      	nop
   39ac4:	00017c19 	.word	0x00017c19

00039ac8 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   39ac8:	b470      	push	{r4, r5, r6}
   39aca:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
    if ((type > INT16_MAX) ||
   39ace:	f501 4600 	add.w	r6, r1, #32768	; 0x8000
   39ad2:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
   39ad6:	d20d      	bcs.n	39af4 <psa_call+0x2c>
        (type < INT16_MIN) ||
   39ad8:	2bff      	cmp	r3, #255	; 0xff
   39ada:	d80b      	bhi.n	39af4 <psa_call+0x2c>
        (in_len > UINT8_MAX) ||
   39adc:	2cff      	cmp	r4, #255	; 0xff
   39ade:	d809      	bhi.n	39af4 <psa_call+0x2c>
        (out_len > UINT8_MAX)) {
        return PSA_ERROR_PROGRAMMER_ERROR;
    }

    return tfm_ns_interface_dispatch(
   39ae0:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   39ae4:	4613      	mov	r3, r2
   39ae6:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   39aea:	4601      	mov	r1, r0
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   39aec:	bc70      	pop	{r4, r5, r6}
    return tfm_ns_interface_dispatch(
   39aee:	4803      	ldr	r0, [pc, #12]	; (39afc <psa_call+0x34>)
   39af0:	f7f7 bdf4 	b.w	316dc <tfm_ns_interface_dispatch>
}
   39af4:	f06f 0080 	mvn.w	r0, #128	; 0x80
   39af8:	bc70      	pop	{r4, r5, r6}
   39afa:	4770      	bx	lr
   39afc:	00017c21 	.word	0x00017c21

00039b00 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   39b00:	2300      	movs	r3, #0
{
   39b02:	b507      	push	{r0, r1, r2, lr}
   39b04:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   39b06:	461a      	mov	r2, r3
   39b08:	9300      	str	r3, [sp, #0]
   39b0a:	4803      	ldr	r0, [pc, #12]	; (39b18 <psa_close+0x18>)
   39b0c:	f7f7 fde6 	bl	316dc <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   39b10:	b003      	add	sp, #12
   39b12:	f85d fb04 	ldr.w	pc, [sp], #4
   39b16:	bf00      	nop
   39b18:	00017c11 	.word	0x00017c11

00039b1c <__assert_func>:
   39b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   39b1e:	4614      	mov	r4, r2
   39b20:	461a      	mov	r2, r3
   39b22:	4b09      	ldr	r3, [pc, #36]	; (39b48 <__assert_func+0x2c>)
   39b24:	4605      	mov	r5, r0
   39b26:	681b      	ldr	r3, [r3, #0]
   39b28:	68d8      	ldr	r0, [r3, #12]
   39b2a:	b14c      	cbz	r4, 39b40 <__assert_func+0x24>
   39b2c:	4b07      	ldr	r3, [pc, #28]	; (39b4c <__assert_func+0x30>)
   39b2e:	9100      	str	r1, [sp, #0]
   39b30:	4907      	ldr	r1, [pc, #28]	; (39b50 <__assert_func+0x34>)
   39b32:	e9cd 3401 	strd	r3, r4, [sp, #4]
   39b36:	462b      	mov	r3, r5
   39b38:	f000 f80e 	bl	39b58 <fiprintf>
   39b3c:	f007 ffe1 	bl	41b02 <abort>
   39b40:	4b04      	ldr	r3, [pc, #16]	; (39b54 <__assert_func+0x38>)
   39b42:	461c      	mov	r4, r3
   39b44:	e7f3      	b.n	39b2e <__assert_func+0x12>
   39b46:	bf00      	nop
   39b48:	20014a74 	.word	0x20014a74
   39b4c:	0004bed1 	.word	0x0004bed1
   39b50:	0004bede 	.word	0x0004bede
   39b54:	000453f3 	.word	0x000453f3

00039b58 <fiprintf>:
   39b58:	b40e      	push	{r1, r2, r3}
   39b5a:	b503      	push	{r0, r1, lr}
   39b5c:	ab03      	add	r3, sp, #12
   39b5e:	4601      	mov	r1, r0
   39b60:	4805      	ldr	r0, [pc, #20]	; (39b78 <fiprintf+0x20>)
   39b62:	f853 2b04 	ldr.w	r2, [r3], #4
   39b66:	6800      	ldr	r0, [r0, #0]
   39b68:	9301      	str	r3, [sp, #4]
   39b6a:	f000 f969 	bl	39e40 <_vfiprintf_r>
   39b6e:	b002      	add	sp, #8
   39b70:	f85d eb04 	ldr.w	lr, [sp], #4
   39b74:	b003      	add	sp, #12
   39b76:	4770      	bx	lr
   39b78:	20014a74 	.word	0x20014a74

00039b7c <gmtime_r>:
   39b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39b80:	e9d0 6700 	ldrd	r6, r7, [r0]
   39b84:	460c      	mov	r4, r1
   39b86:	4a4f      	ldr	r2, [pc, #316]	; (39cc4 <gmtime_r+0x148>)
   39b88:	2300      	movs	r3, #0
   39b8a:	4630      	mov	r0, r6
   39b8c:	4639      	mov	r1, r7
   39b8e:	f04f 0805 	mov.w	r8, #5
   39b92:	f7e3 f959 	bl	1ce48 <__aeabi_ldivmod>
   39b96:	4639      	mov	r1, r7
   39b98:	4605      	mov	r5, r0
   39b9a:	4a4a      	ldr	r2, [pc, #296]	; (39cc4 <gmtime_r+0x148>)
   39b9c:	4630      	mov	r0, r6
   39b9e:	2300      	movs	r3, #0
   39ba0:	f7e3 f952 	bl	1ce48 <__aeabi_ldivmod>
   39ba4:	2a00      	cmp	r2, #0
   39ba6:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   39baa:	4d47      	ldr	r5, [pc, #284]	; (39cc8 <gmtime_r+0x14c>)
   39bac:	bfb8      	it	lt
   39bae:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   39bb2:	f240 1c6d 	movw	ip, #365	; 0x16d
   39bb6:	bfae      	itee	ge
   39bb8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
   39bbc:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
   39bc0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   39bc4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   39bc8:	2764      	movs	r7, #100	; 0x64
   39bca:	fbb2 f1f0 	udiv	r1, r2, r0
   39bce:	fb00 2211 	mls	r2, r0, r1, r2
   39bd2:	203c      	movs	r0, #60	; 0x3c
   39bd4:	60a1      	str	r1, [r4, #8]
   39bd6:	fbb2 f1f0 	udiv	r1, r2, r0
   39bda:	fb00 2211 	mls	r2, r0, r1, r2
   39bde:	483b      	ldr	r0, [pc, #236]	; (39ccc <gmtime_r+0x150>)
   39be0:	6061      	str	r1, [r4, #4]
   39be2:	2107      	movs	r1, #7
   39be4:	6022      	str	r2, [r4, #0]
   39be6:	1cda      	adds	r2, r3, #3
   39be8:	fb92 f1f1 	sdiv	r1, r2, r1
   39bec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   39bf0:	1a52      	subs	r2, r2, r1
   39bf2:	bf48      	it	mi
   39bf4:	3207      	addmi	r2, #7
   39bf6:	2b00      	cmp	r3, #0
   39bf8:	61a2      	str	r2, [r4, #24]
   39bfa:	bfbb      	ittet	lt
   39bfc:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
   39c00:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
   39c04:	fb93 f5f5 	sdivge	r5, r3, r5
   39c08:	fb92 f5f5 	sdivlt	r5, r2, r5
   39c0c:	f648 62ac 	movw	r2, #36524	; 0x8eac
   39c10:	fb00 3005 	mla	r0, r0, r5, r3
   39c14:	f240 53b4 	movw	r3, #1460	; 0x5b4
   39c18:	fbb0 f2f2 	udiv	r2, r0, r2
   39c1c:	fbb0 f1f3 	udiv	r1, r0, r3
   39c20:	4402      	add	r2, r0
   39c22:	1a52      	subs	r2, r2, r1
   39c24:	492a      	ldr	r1, [pc, #168]	; (39cd0 <gmtime_r+0x154>)
   39c26:	fbb0 f1f1 	udiv	r1, r0, r1
   39c2a:	1a52      	subs	r2, r2, r1
   39c2c:	fbb2 f1fc 	udiv	r1, r2, ip
   39c30:	fbb2 f3f3 	udiv	r3, r2, r3
   39c34:	fbb1 f6f7 	udiv	r6, r1, r7
   39c38:	1af3      	subs	r3, r6, r3
   39c3a:	2299      	movs	r2, #153	; 0x99
   39c3c:	4403      	add	r3, r0
   39c3e:	fb0c 3311 	mls	r3, ip, r1, r3
   39c42:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   39c46:	f103 0c01 	add.w	ip, r3, #1
   39c4a:	f10e 0e02 	add.w	lr, lr, #2
   39c4e:	fbbe f0f2 	udiv	r0, lr, r2
   39c52:	4342      	muls	r2, r0
   39c54:	3202      	adds	r2, #2
   39c56:	fbb2 f2f8 	udiv	r2, r2, r8
   39c5a:	ebac 0c02 	sub.w	ip, ip, r2
   39c5e:	f240 52f9 	movw	r2, #1529	; 0x5f9
   39c62:	4596      	cmp	lr, r2
   39c64:	bf94      	ite	ls
   39c66:	2202      	movls	r2, #2
   39c68:	f06f 0209 	mvnhi.w	r2, #9
   39c6c:	4410      	add	r0, r2
   39c6e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   39c72:	fb02 1505 	mla	r5, r2, r5, r1
   39c76:	2801      	cmp	r0, #1
   39c78:	bf98      	it	ls
   39c7a:	3501      	addls	r5, #1
   39c7c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   39c80:	d30d      	bcc.n	39c9e <gmtime_r+0x122>
   39c82:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   39c86:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   39c8a:	61e3      	str	r3, [r4, #28]
   39c8c:	2300      	movs	r3, #0
   39c8e:	f8c4 c00c 	str.w	ip, [r4, #12]
   39c92:	e9c4 0504 	strd	r0, r5, [r4, #16]
   39c96:	6223      	str	r3, [r4, #32]
   39c98:	4620      	mov	r0, r4
   39c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39c9e:	078a      	lsls	r2, r1, #30
   39ca0:	d102      	bne.n	39ca8 <gmtime_r+0x12c>
   39ca2:	fb07 1616 	mls	r6, r7, r6, r1
   39ca6:	b95e      	cbnz	r6, 39cc0 <gmtime_r+0x144>
   39ca8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   39cac:	fbb1 f6f2 	udiv	r6, r1, r2
   39cb0:	fb02 1216 	mls	r2, r2, r6, r1
   39cb4:	fab2 f282 	clz	r2, r2
   39cb8:	0952      	lsrs	r2, r2, #5
   39cba:	333b      	adds	r3, #59	; 0x3b
   39cbc:	4413      	add	r3, r2
   39cbe:	e7e2      	b.n	39c86 <gmtime_r+0x10a>
   39cc0:	2201      	movs	r2, #1
   39cc2:	e7fa      	b.n	39cba <gmtime_r+0x13e>
   39cc4:	00015180 	.word	0x00015180
   39cc8:	00023ab1 	.word	0x00023ab1
   39ccc:	fffdc54f 	.word	0xfffdc54f
   39cd0:	00023ab0 	.word	0x00023ab0

00039cd4 <malloc>:
   39cd4:	4b02      	ldr	r3, [pc, #8]	; (39ce0 <malloc+0xc>)
   39cd6:	4601      	mov	r1, r0
   39cd8:	6818      	ldr	r0, [r3, #0]
   39cda:	f000 b857 	b.w	39d8c <_malloc_r>
   39cde:	bf00      	nop
   39ce0:	20014a74 	.word	0x20014a74

00039ce4 <free>:
   39ce4:	4b02      	ldr	r3, [pc, #8]	; (39cf0 <free+0xc>)
   39ce6:	4601      	mov	r1, r0
   39ce8:	6818      	ldr	r0, [r3, #0]
   39cea:	f000 b803 	b.w	39cf4 <_free_r>
   39cee:	bf00      	nop
   39cf0:	20014a74 	.word	0x20014a74

00039cf4 <_free_r>:
   39cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   39cf6:	2900      	cmp	r1, #0
   39cf8:	d043      	beq.n	39d82 <_free_r+0x8e>
   39cfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
   39cfe:	1f0c      	subs	r4, r1, #4
   39d00:	9001      	str	r0, [sp, #4]
   39d02:	2b00      	cmp	r3, #0
   39d04:	bfb8      	it	lt
   39d06:	18e4      	addlt	r4, r4, r3
   39d08:	f001 fcc6 	bl	3b698 <__malloc_lock>
   39d0c:	4a1e      	ldr	r2, [pc, #120]	; (39d88 <_free_r+0x94>)
   39d0e:	9801      	ldr	r0, [sp, #4]
   39d10:	6813      	ldr	r3, [r2, #0]
   39d12:	b933      	cbnz	r3, 39d22 <_free_r+0x2e>
   39d14:	6063      	str	r3, [r4, #4]
   39d16:	6014      	str	r4, [r2, #0]
   39d18:	b003      	add	sp, #12
   39d1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   39d1e:	f001 bcc1 	b.w	3b6a4 <__malloc_unlock>
   39d22:	42a3      	cmp	r3, r4
   39d24:	d908      	bls.n	39d38 <_free_r+0x44>
   39d26:	6825      	ldr	r5, [r4, #0]
   39d28:	1961      	adds	r1, r4, r5
   39d2a:	428b      	cmp	r3, r1
   39d2c:	bf01      	itttt	eq
   39d2e:	6819      	ldreq	r1, [r3, #0]
   39d30:	685b      	ldreq	r3, [r3, #4]
   39d32:	1949      	addeq	r1, r1, r5
   39d34:	6021      	streq	r1, [r4, #0]
   39d36:	e7ed      	b.n	39d14 <_free_r+0x20>
   39d38:	461a      	mov	r2, r3
   39d3a:	685b      	ldr	r3, [r3, #4]
   39d3c:	b10b      	cbz	r3, 39d42 <_free_r+0x4e>
   39d3e:	42a3      	cmp	r3, r4
   39d40:	d9fa      	bls.n	39d38 <_free_r+0x44>
   39d42:	6811      	ldr	r1, [r2, #0]
   39d44:	1855      	adds	r5, r2, r1
   39d46:	42a5      	cmp	r5, r4
   39d48:	d10b      	bne.n	39d62 <_free_r+0x6e>
   39d4a:	6824      	ldr	r4, [r4, #0]
   39d4c:	4421      	add	r1, r4
   39d4e:	1854      	adds	r4, r2, r1
   39d50:	6011      	str	r1, [r2, #0]
   39d52:	42a3      	cmp	r3, r4
   39d54:	d1e0      	bne.n	39d18 <_free_r+0x24>
   39d56:	681c      	ldr	r4, [r3, #0]
   39d58:	685b      	ldr	r3, [r3, #4]
   39d5a:	4421      	add	r1, r4
   39d5c:	6053      	str	r3, [r2, #4]
   39d5e:	6011      	str	r1, [r2, #0]
   39d60:	e7da      	b.n	39d18 <_free_r+0x24>
   39d62:	d902      	bls.n	39d6a <_free_r+0x76>
   39d64:	230c      	movs	r3, #12
   39d66:	6003      	str	r3, [r0, #0]
   39d68:	e7d6      	b.n	39d18 <_free_r+0x24>
   39d6a:	6825      	ldr	r5, [r4, #0]
   39d6c:	1961      	adds	r1, r4, r5
   39d6e:	428b      	cmp	r3, r1
   39d70:	bf02      	ittt	eq
   39d72:	6819      	ldreq	r1, [r3, #0]
   39d74:	685b      	ldreq	r3, [r3, #4]
   39d76:	1949      	addeq	r1, r1, r5
   39d78:	6063      	str	r3, [r4, #4]
   39d7a:	bf08      	it	eq
   39d7c:	6021      	streq	r1, [r4, #0]
   39d7e:	6054      	str	r4, [r2, #4]
   39d80:	e7ca      	b.n	39d18 <_free_r+0x24>
   39d82:	b003      	add	sp, #12
   39d84:	bd30      	pop	{r4, r5, pc}
   39d86:	bf00      	nop
   39d88:	2001a560 	.word	0x2001a560

00039d8c <_malloc_r>:
   39d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39d8e:	1ccd      	adds	r5, r1, #3
   39d90:	4606      	mov	r6, r0
   39d92:	f025 0503 	bic.w	r5, r5, #3
   39d96:	3508      	adds	r5, #8
   39d98:	2d0c      	cmp	r5, #12
   39d9a:	bf38      	it	cc
   39d9c:	250c      	movcc	r5, #12
   39d9e:	2d00      	cmp	r5, #0
   39da0:	db01      	blt.n	39da6 <_malloc_r+0x1a>
   39da2:	42a9      	cmp	r1, r5
   39da4:	d903      	bls.n	39dae <_malloc_r+0x22>
   39da6:	230c      	movs	r3, #12
   39da8:	6033      	str	r3, [r6, #0]
   39daa:	2000      	movs	r0, #0
   39dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39dae:	f001 fc73 	bl	3b698 <__malloc_lock>
   39db2:	4921      	ldr	r1, [pc, #132]	; (39e38 <_malloc_r+0xac>)
   39db4:	680a      	ldr	r2, [r1, #0]
   39db6:	4614      	mov	r4, r2
   39db8:	b99c      	cbnz	r4, 39de2 <_malloc_r+0x56>
   39dba:	4f20      	ldr	r7, [pc, #128]	; (39e3c <_malloc_r+0xb0>)
   39dbc:	683b      	ldr	r3, [r7, #0]
   39dbe:	b923      	cbnz	r3, 39dca <_malloc_r+0x3e>
   39dc0:	4621      	mov	r1, r4
   39dc2:	4630      	mov	r0, r6
   39dc4:	f000 fcea 	bl	3a79c <_sbrk_r>
   39dc8:	6038      	str	r0, [r7, #0]
   39dca:	4629      	mov	r1, r5
   39dcc:	4630      	mov	r0, r6
   39dce:	f000 fce5 	bl	3a79c <_sbrk_r>
   39dd2:	1c43      	adds	r3, r0, #1
   39dd4:	d123      	bne.n	39e1e <_malloc_r+0x92>
   39dd6:	230c      	movs	r3, #12
   39dd8:	4630      	mov	r0, r6
   39dda:	6033      	str	r3, [r6, #0]
   39ddc:	f001 fc62 	bl	3b6a4 <__malloc_unlock>
   39de0:	e7e3      	b.n	39daa <_malloc_r+0x1e>
   39de2:	6823      	ldr	r3, [r4, #0]
   39de4:	1b5b      	subs	r3, r3, r5
   39de6:	d417      	bmi.n	39e18 <_malloc_r+0x8c>
   39de8:	2b0b      	cmp	r3, #11
   39dea:	d903      	bls.n	39df4 <_malloc_r+0x68>
   39dec:	6023      	str	r3, [r4, #0]
   39dee:	441c      	add	r4, r3
   39df0:	6025      	str	r5, [r4, #0]
   39df2:	e004      	b.n	39dfe <_malloc_r+0x72>
   39df4:	6863      	ldr	r3, [r4, #4]
   39df6:	42a2      	cmp	r2, r4
   39df8:	bf0c      	ite	eq
   39dfa:	600b      	streq	r3, [r1, #0]
   39dfc:	6053      	strne	r3, [r2, #4]
   39dfe:	4630      	mov	r0, r6
   39e00:	f001 fc50 	bl	3b6a4 <__malloc_unlock>
   39e04:	f104 000b 	add.w	r0, r4, #11
   39e08:	1d23      	adds	r3, r4, #4
   39e0a:	f020 0007 	bic.w	r0, r0, #7
   39e0e:	1ac2      	subs	r2, r0, r3
   39e10:	d0cc      	beq.n	39dac <_malloc_r+0x20>
   39e12:	1a1b      	subs	r3, r3, r0
   39e14:	50a3      	str	r3, [r4, r2]
   39e16:	e7c9      	b.n	39dac <_malloc_r+0x20>
   39e18:	4622      	mov	r2, r4
   39e1a:	6864      	ldr	r4, [r4, #4]
   39e1c:	e7cc      	b.n	39db8 <_malloc_r+0x2c>
   39e1e:	1cc4      	adds	r4, r0, #3
   39e20:	f024 0403 	bic.w	r4, r4, #3
   39e24:	42a0      	cmp	r0, r4
   39e26:	d0e3      	beq.n	39df0 <_malloc_r+0x64>
   39e28:	1a21      	subs	r1, r4, r0
   39e2a:	4630      	mov	r0, r6
   39e2c:	f000 fcb6 	bl	3a79c <_sbrk_r>
   39e30:	3001      	adds	r0, #1
   39e32:	d1dd      	bne.n	39df0 <_malloc_r+0x64>
   39e34:	e7cf      	b.n	39dd6 <_malloc_r+0x4a>
   39e36:	bf00      	nop
   39e38:	2001a560 	.word	0x2001a560
   39e3c:	2001a564 	.word	0x2001a564

00039e40 <_vfiprintf_r>:
   39e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39e44:	460d      	mov	r5, r1
   39e46:	b09d      	sub	sp, #116	; 0x74
   39e48:	4614      	mov	r4, r2
   39e4a:	4698      	mov	r8, r3
   39e4c:	4606      	mov	r6, r0
   39e4e:	b118      	cbz	r0, 39e58 <_vfiprintf_r+0x18>
   39e50:	6983      	ldr	r3, [r0, #24]
   39e52:	b90b      	cbnz	r3, 39e58 <_vfiprintf_r+0x18>
   39e54:	f001 f906 	bl	3b064 <__sinit>
   39e58:	4b89      	ldr	r3, [pc, #548]	; (3a080 <_vfiprintf_r+0x240>)
   39e5a:	429d      	cmp	r5, r3
   39e5c:	d11b      	bne.n	39e96 <_vfiprintf_r+0x56>
   39e5e:	6875      	ldr	r5, [r6, #4]
   39e60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   39e62:	07d9      	lsls	r1, r3, #31
   39e64:	d405      	bmi.n	39e72 <_vfiprintf_r+0x32>
   39e66:	89ab      	ldrh	r3, [r5, #12]
   39e68:	059a      	lsls	r2, r3, #22
   39e6a:	d402      	bmi.n	39e72 <_vfiprintf_r+0x32>
   39e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   39e6e:	f7e9 fdfd 	bl	23a6c <__retarget_lock_acquire_recursive>
   39e72:	89ab      	ldrh	r3, [r5, #12]
   39e74:	071b      	lsls	r3, r3, #28
   39e76:	d501      	bpl.n	39e7c <_vfiprintf_r+0x3c>
   39e78:	692b      	ldr	r3, [r5, #16]
   39e7a:	b9eb      	cbnz	r3, 39eb8 <_vfiprintf_r+0x78>
   39e7c:	4629      	mov	r1, r5
   39e7e:	4630      	mov	r0, r6
   39e80:	f000 ff70 	bl	3ad64 <__swsetup_r>
   39e84:	b1c0      	cbz	r0, 39eb8 <_vfiprintf_r+0x78>
   39e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   39e88:	07dc      	lsls	r4, r3, #31
   39e8a:	d50e      	bpl.n	39eaa <_vfiprintf_r+0x6a>
   39e8c:	f04f 30ff 	mov.w	r0, #4294967295
   39e90:	b01d      	add	sp, #116	; 0x74
   39e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39e96:	4b7b      	ldr	r3, [pc, #492]	; (3a084 <_vfiprintf_r+0x244>)
   39e98:	429d      	cmp	r5, r3
   39e9a:	d101      	bne.n	39ea0 <_vfiprintf_r+0x60>
   39e9c:	68b5      	ldr	r5, [r6, #8]
   39e9e:	e7df      	b.n	39e60 <_vfiprintf_r+0x20>
   39ea0:	4b79      	ldr	r3, [pc, #484]	; (3a088 <_vfiprintf_r+0x248>)
   39ea2:	429d      	cmp	r5, r3
   39ea4:	bf08      	it	eq
   39ea6:	68f5      	ldreq	r5, [r6, #12]
   39ea8:	e7da      	b.n	39e60 <_vfiprintf_r+0x20>
   39eaa:	89ab      	ldrh	r3, [r5, #12]
   39eac:	0598      	lsls	r0, r3, #22
   39eae:	d4ed      	bmi.n	39e8c <_vfiprintf_r+0x4c>
   39eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   39eb2:	f7e9 fdf7 	bl	23aa4 <__retarget_lock_release_recursive>
   39eb6:	e7e9      	b.n	39e8c <_vfiprintf_r+0x4c>
   39eb8:	2300      	movs	r3, #0
   39eba:	f8cd 800c 	str.w	r8, [sp, #12]
   39ebe:	f04f 0901 	mov.w	r9, #1
   39ec2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 3a08c <_vfiprintf_r+0x24c>
   39ec6:	9309      	str	r3, [sp, #36]	; 0x24
   39ec8:	2320      	movs	r3, #32
   39eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   39ece:	2330      	movs	r3, #48	; 0x30
   39ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   39ed4:	4623      	mov	r3, r4
   39ed6:	469a      	mov	sl, r3
   39ed8:	f813 2b01 	ldrb.w	r2, [r3], #1
   39edc:	b10a      	cbz	r2, 39ee2 <_vfiprintf_r+0xa2>
   39ede:	2a25      	cmp	r2, #37	; 0x25
   39ee0:	d1f9      	bne.n	39ed6 <_vfiprintf_r+0x96>
   39ee2:	ebba 0b04 	subs.w	fp, sl, r4
   39ee6:	d00b      	beq.n	39f00 <_vfiprintf_r+0xc0>
   39ee8:	465b      	mov	r3, fp
   39eea:	4622      	mov	r2, r4
   39eec:	4629      	mov	r1, r5
   39eee:	4630      	mov	r0, r6
   39ef0:	f007 fbb5 	bl	4165e <__sfputs_r>
   39ef4:	3001      	adds	r0, #1
   39ef6:	f000 80aa 	beq.w	3a04e <_vfiprintf_r+0x20e>
   39efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   39efc:	445a      	add	r2, fp
   39efe:	9209      	str	r2, [sp, #36]	; 0x24
   39f00:	f89a 3000 	ldrb.w	r3, [sl]
   39f04:	2b00      	cmp	r3, #0
   39f06:	f000 80a2 	beq.w	3a04e <_vfiprintf_r+0x20e>
   39f0a:	2300      	movs	r3, #0
   39f0c:	f04f 32ff 	mov.w	r2, #4294967295
   39f10:	f10a 0a01 	add.w	sl, sl, #1
   39f14:	9304      	str	r3, [sp, #16]
   39f16:	9307      	str	r3, [sp, #28]
   39f18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   39f1c:	931a      	str	r3, [sp, #104]	; 0x68
   39f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   39f22:	4654      	mov	r4, sl
   39f24:	2205      	movs	r2, #5
   39f26:	4859      	ldr	r0, [pc, #356]	; (3a08c <_vfiprintf_r+0x24c>)
   39f28:	f814 1b01 	ldrb.w	r1, [r4], #1
   39f2c:	f007 fb2b 	bl	41586 <memchr>
   39f30:	9a04      	ldr	r2, [sp, #16]
   39f32:	b9d8      	cbnz	r0, 39f6c <_vfiprintf_r+0x12c>
   39f34:	06d1      	lsls	r1, r2, #27
   39f36:	bf44      	itt	mi
   39f38:	2320      	movmi	r3, #32
   39f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   39f3e:	0713      	lsls	r3, r2, #28
   39f40:	bf44      	itt	mi
   39f42:	232b      	movmi	r3, #43	; 0x2b
   39f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   39f48:	f89a 3000 	ldrb.w	r3, [sl]
   39f4c:	2b2a      	cmp	r3, #42	; 0x2a
   39f4e:	d015      	beq.n	39f7c <_vfiprintf_r+0x13c>
   39f50:	9a07      	ldr	r2, [sp, #28]
   39f52:	4654      	mov	r4, sl
   39f54:	2000      	movs	r0, #0
   39f56:	f04f 0c0a 	mov.w	ip, #10
   39f5a:	4621      	mov	r1, r4
   39f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
   39f60:	3b30      	subs	r3, #48	; 0x30
   39f62:	2b09      	cmp	r3, #9
   39f64:	d94e      	bls.n	3a004 <_vfiprintf_r+0x1c4>
   39f66:	b1b0      	cbz	r0, 39f96 <_vfiprintf_r+0x156>
   39f68:	9207      	str	r2, [sp, #28]
   39f6a:	e014      	b.n	39f96 <_vfiprintf_r+0x156>
   39f6c:	eba0 0308 	sub.w	r3, r0, r8
   39f70:	46a2      	mov	sl, r4
   39f72:	fa09 f303 	lsl.w	r3, r9, r3
   39f76:	4313      	orrs	r3, r2
   39f78:	9304      	str	r3, [sp, #16]
   39f7a:	e7d2      	b.n	39f22 <_vfiprintf_r+0xe2>
   39f7c:	9b03      	ldr	r3, [sp, #12]
   39f7e:	1d19      	adds	r1, r3, #4
   39f80:	681b      	ldr	r3, [r3, #0]
   39f82:	2b00      	cmp	r3, #0
   39f84:	9103      	str	r1, [sp, #12]
   39f86:	bfbb      	ittet	lt
   39f88:	425b      	neglt	r3, r3
   39f8a:	f042 0202 	orrlt.w	r2, r2, #2
   39f8e:	9307      	strge	r3, [sp, #28]
   39f90:	9307      	strlt	r3, [sp, #28]
   39f92:	bfb8      	it	lt
   39f94:	9204      	strlt	r2, [sp, #16]
   39f96:	7823      	ldrb	r3, [r4, #0]
   39f98:	2b2e      	cmp	r3, #46	; 0x2e
   39f9a:	d10c      	bne.n	39fb6 <_vfiprintf_r+0x176>
   39f9c:	7863      	ldrb	r3, [r4, #1]
   39f9e:	2b2a      	cmp	r3, #42	; 0x2a
   39fa0:	d135      	bne.n	3a00e <_vfiprintf_r+0x1ce>
   39fa2:	9b03      	ldr	r3, [sp, #12]
   39fa4:	3402      	adds	r4, #2
   39fa6:	1d1a      	adds	r2, r3, #4
   39fa8:	681b      	ldr	r3, [r3, #0]
   39faa:	2b00      	cmp	r3, #0
   39fac:	9203      	str	r2, [sp, #12]
   39fae:	bfb8      	it	lt
   39fb0:	f04f 33ff 	movlt.w	r3, #4294967295
   39fb4:	9305      	str	r3, [sp, #20]
   39fb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 3a09c <_vfiprintf_r+0x25c>
   39fba:	2203      	movs	r2, #3
   39fbc:	7821      	ldrb	r1, [r4, #0]
   39fbe:	4650      	mov	r0, sl
   39fc0:	f007 fae1 	bl	41586 <memchr>
   39fc4:	b140      	cbz	r0, 39fd8 <_vfiprintf_r+0x198>
   39fc6:	2340      	movs	r3, #64	; 0x40
   39fc8:	eba0 000a 	sub.w	r0, r0, sl
   39fcc:	3401      	adds	r4, #1
   39fce:	fa03 f000 	lsl.w	r0, r3, r0
   39fd2:	9b04      	ldr	r3, [sp, #16]
   39fd4:	4303      	orrs	r3, r0
   39fd6:	9304      	str	r3, [sp, #16]
   39fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
   39fdc:	2206      	movs	r2, #6
   39fde:	482c      	ldr	r0, [pc, #176]	; (3a090 <_vfiprintf_r+0x250>)
   39fe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   39fe4:	f007 facf 	bl	41586 <memchr>
   39fe8:	2800      	cmp	r0, #0
   39fea:	d03f      	beq.n	3a06c <_vfiprintf_r+0x22c>
   39fec:	4b29      	ldr	r3, [pc, #164]	; (3a094 <_vfiprintf_r+0x254>)
   39fee:	bb1b      	cbnz	r3, 3a038 <_vfiprintf_r+0x1f8>
   39ff0:	9b03      	ldr	r3, [sp, #12]
   39ff2:	3307      	adds	r3, #7
   39ff4:	f023 0307 	bic.w	r3, r3, #7
   39ff8:	3308      	adds	r3, #8
   39ffa:	9303      	str	r3, [sp, #12]
   39ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   39ffe:	443b      	add	r3, r7
   3a000:	9309      	str	r3, [sp, #36]	; 0x24
   3a002:	e767      	b.n	39ed4 <_vfiprintf_r+0x94>
   3a004:	fb0c 3202 	mla	r2, ip, r2, r3
   3a008:	460c      	mov	r4, r1
   3a00a:	2001      	movs	r0, #1
   3a00c:	e7a5      	b.n	39f5a <_vfiprintf_r+0x11a>
   3a00e:	2300      	movs	r3, #0
   3a010:	3401      	adds	r4, #1
   3a012:	f04f 0c0a 	mov.w	ip, #10
   3a016:	4619      	mov	r1, r3
   3a018:	9305      	str	r3, [sp, #20]
   3a01a:	4620      	mov	r0, r4
   3a01c:	f810 2b01 	ldrb.w	r2, [r0], #1
   3a020:	3a30      	subs	r2, #48	; 0x30
   3a022:	2a09      	cmp	r2, #9
   3a024:	d903      	bls.n	3a02e <_vfiprintf_r+0x1ee>
   3a026:	2b00      	cmp	r3, #0
   3a028:	d0c5      	beq.n	39fb6 <_vfiprintf_r+0x176>
   3a02a:	9105      	str	r1, [sp, #20]
   3a02c:	e7c3      	b.n	39fb6 <_vfiprintf_r+0x176>
   3a02e:	fb0c 2101 	mla	r1, ip, r1, r2
   3a032:	4604      	mov	r4, r0
   3a034:	2301      	movs	r3, #1
   3a036:	e7f0      	b.n	3a01a <_vfiprintf_r+0x1da>
   3a038:	ab03      	add	r3, sp, #12
   3a03a:	462a      	mov	r2, r5
   3a03c:	a904      	add	r1, sp, #16
   3a03e:	4630      	mov	r0, r6
   3a040:	9300      	str	r3, [sp, #0]
   3a042:	4b15      	ldr	r3, [pc, #84]	; (3a098 <_vfiprintf_r+0x258>)
   3a044:	f000 f82c 	bl	3a0a0 <_printf_float>
   3a048:	4607      	mov	r7, r0
   3a04a:	1c78      	adds	r0, r7, #1
   3a04c:	d1d6      	bne.n	39ffc <_vfiprintf_r+0x1bc>
   3a04e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3a050:	07d9      	lsls	r1, r3, #31
   3a052:	d405      	bmi.n	3a060 <_vfiprintf_r+0x220>
   3a054:	89ab      	ldrh	r3, [r5, #12]
   3a056:	059a      	lsls	r2, r3, #22
   3a058:	d402      	bmi.n	3a060 <_vfiprintf_r+0x220>
   3a05a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3a05c:	f7e9 fd22 	bl	23aa4 <__retarget_lock_release_recursive>
   3a060:	89ab      	ldrh	r3, [r5, #12]
   3a062:	065b      	lsls	r3, r3, #25
   3a064:	f53f af12 	bmi.w	39e8c <_vfiprintf_r+0x4c>
   3a068:	9809      	ldr	r0, [sp, #36]	; 0x24
   3a06a:	e711      	b.n	39e90 <_vfiprintf_r+0x50>
   3a06c:	ab03      	add	r3, sp, #12
   3a06e:	462a      	mov	r2, r5
   3a070:	a904      	add	r1, sp, #16
   3a072:	4630      	mov	r0, r6
   3a074:	9300      	str	r3, [sp, #0]
   3a076:	4b08      	ldr	r3, [pc, #32]	; (3a098 <_vfiprintf_r+0x258>)
   3a078:	f000 fa4a 	bl	3a510 <_printf_i>
   3a07c:	e7e4      	b.n	3a048 <_vfiprintf_r+0x208>
   3a07e:	bf00      	nop
   3a080:	0004361c 	.word	0x0004361c
   3a084:	0004363c 	.word	0x0004363c
   3a088:	000435fc 	.word	0x000435fc
   3a08c:	0004c00e 	.word	0x0004c00e
   3a090:	0004c018 	.word	0x0004c018
   3a094:	0003a0a1 	.word	0x0003a0a1
   3a098:	0004165f 	.word	0x0004165f
   3a09c:	0004c014 	.word	0x0004c014

0003a0a0 <_printf_float>:
   3a0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a0a4:	ed2d 8b02 	vpush	{d8}
   3a0a8:	b091      	sub	sp, #68	; 0x44
   3a0aa:	460c      	mov	r4, r1
   3a0ac:	4616      	mov	r6, r2
   3a0ae:	461f      	mov	r7, r3
   3a0b0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
   3a0b4:	4605      	mov	r5, r0
   3a0b6:	f001 fa99 	bl	3b5ec <_localeconv_r>
   3a0ba:	f8d0 a000 	ldr.w	sl, [r0]
   3a0be:	4650      	mov	r0, sl
   3a0c0:	f7e3 f8bf 	bl	1d242 <strlen>
   3a0c4:	2300      	movs	r3, #0
   3a0c6:	f894 b018 	ldrb.w	fp, [r4, #24]
   3a0ca:	ee08 0a10 	vmov	s16, r0
   3a0ce:	930e      	str	r3, [sp, #56]	; 0x38
   3a0d0:	6823      	ldr	r3, [r4, #0]
   3a0d2:	9309      	str	r3, [sp, #36]	; 0x24
   3a0d4:	f8d8 3000 	ldr.w	r3, [r8]
   3a0d8:	3307      	adds	r3, #7
   3a0da:	f023 0307 	bic.w	r3, r3, #7
   3a0de:	f103 0208 	add.w	r2, r3, #8
   3a0e2:	f8c8 2000 	str.w	r2, [r8]
   3a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   3a0ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   3a0ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   3a0f2:	f04f 32ff 	mov.w	r2, #4294967295
   3a0f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   3a0fa:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   3a0fe:	930b      	str	r3, [sp, #44]	; 0x2c
   3a100:	4b9f      	ldr	r3, [pc, #636]	; (3a380 <_printf_float+0x2e0>)
   3a102:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   3a106:	f7e2 fdf1 	bl	1ccec <__aeabi_dcmpun>
   3a10a:	bb88      	cbnz	r0, 3a170 <_printf_float+0xd0>
   3a10c:	f04f 32ff 	mov.w	r2, #4294967295
   3a110:	4b9b      	ldr	r3, [pc, #620]	; (3a380 <_printf_float+0x2e0>)
   3a112:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   3a116:	f7e2 fdcb 	bl	1ccb0 <__aeabi_dcmple>
   3a11a:	bb48      	cbnz	r0, 3a170 <_printf_float+0xd0>
   3a11c:	2200      	movs	r2, #0
   3a11e:	2300      	movs	r3, #0
   3a120:	4640      	mov	r0, r8
   3a122:	4649      	mov	r1, r9
   3a124:	f7e2 fdba 	bl	1cc9c <__aeabi_dcmplt>
   3a128:	b110      	cbz	r0, 3a130 <_printf_float+0x90>
   3a12a:	232d      	movs	r3, #45	; 0x2d
   3a12c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a130:	4b94      	ldr	r3, [pc, #592]	; (3a384 <_printf_float+0x2e4>)
   3a132:	4895      	ldr	r0, [pc, #596]	; (3a388 <_printf_float+0x2e8>)
   3a134:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   3a138:	bf94      	ite	ls
   3a13a:	4698      	movls	r8, r3
   3a13c:	4680      	movhi	r8, r0
   3a13e:	2303      	movs	r3, #3
   3a140:	f04f 0900 	mov.w	r9, #0
   3a144:	6123      	str	r3, [r4, #16]
   3a146:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a148:	f023 0304 	bic.w	r3, r3, #4
   3a14c:	6023      	str	r3, [r4, #0]
   3a14e:	4633      	mov	r3, r6
   3a150:	aa0f      	add	r2, sp, #60	; 0x3c
   3a152:	4621      	mov	r1, r4
   3a154:	4628      	mov	r0, r5
   3a156:	9700      	str	r7, [sp, #0]
   3a158:	f007 fb33 	bl	417c2 <_printf_common>
   3a15c:	3001      	adds	r0, #1
   3a15e:	f040 8092 	bne.w	3a286 <_printf_float+0x1e6>
   3a162:	f04f 30ff 	mov.w	r0, #4294967295
   3a166:	b011      	add	sp, #68	; 0x44
   3a168:	ecbd 8b02 	vpop	{d8}
   3a16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a170:	4642      	mov	r2, r8
   3a172:	464b      	mov	r3, r9
   3a174:	4640      	mov	r0, r8
   3a176:	4649      	mov	r1, r9
   3a178:	f7e2 fdb8 	bl	1ccec <__aeabi_dcmpun>
   3a17c:	b140      	cbz	r0, 3a190 <_printf_float+0xf0>
   3a17e:	464b      	mov	r3, r9
   3a180:	4882      	ldr	r0, [pc, #520]	; (3a38c <_printf_float+0x2ec>)
   3a182:	2b00      	cmp	r3, #0
   3a184:	bfbc      	itt	lt
   3a186:	232d      	movlt	r3, #45	; 0x2d
   3a188:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   3a18c:	4b80      	ldr	r3, [pc, #512]	; (3a390 <_printf_float+0x2f0>)
   3a18e:	e7d1      	b.n	3a134 <_printf_float+0x94>
   3a190:	6863      	ldr	r3, [r4, #4]
   3a192:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
   3a196:	1c5a      	adds	r2, r3, #1
   3a198:	d143      	bne.n	3a222 <_printf_float+0x182>
   3a19a:	2306      	movs	r3, #6
   3a19c:	6063      	str	r3, [r4, #4]
   3a19e:	2200      	movs	r2, #0
   3a1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a1a2:	4628      	mov	r0, r5
   3a1a4:	910a      	str	r1, [sp, #40]	; 0x28
   3a1a6:	9206      	str	r2, [sp, #24]
   3a1a8:	aa0e      	add	r2, sp, #56	; 0x38
   3a1aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   3a1ae:	e9cd b204 	strd	fp, r2, [sp, #16]
   3a1b2:	aa0d      	add	r2, sp, #52	; 0x34
   3a1b4:	6023      	str	r3, [r4, #0]
   3a1b6:	9203      	str	r2, [sp, #12]
   3a1b8:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   3a1bc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   3a1c0:	6863      	ldr	r3, [r4, #4]
   3a1c2:	4642      	mov	r2, r8
   3a1c4:	9300      	str	r3, [sp, #0]
   3a1c6:	464b      	mov	r3, r9
   3a1c8:	f007 fa5b 	bl	41682 <__cvt>
   3a1cc:	990a      	ldr	r1, [sp, #40]	; 0x28
   3a1ce:	4680      	mov	r8, r0
   3a1d0:	2947      	cmp	r1, #71	; 0x47
   3a1d2:	990d      	ldr	r1, [sp, #52]	; 0x34
   3a1d4:	d108      	bne.n	3a1e8 <_printf_float+0x148>
   3a1d6:	1cc8      	adds	r0, r1, #3
   3a1d8:	db02      	blt.n	3a1e0 <_printf_float+0x140>
   3a1da:	6863      	ldr	r3, [r4, #4]
   3a1dc:	4299      	cmp	r1, r3
   3a1de:	dd40      	ble.n	3a262 <_printf_float+0x1c2>
   3a1e0:	f1ab 0b02 	sub.w	fp, fp, #2
   3a1e4:	fa5f fb8b 	uxtb.w	fp, fp
   3a1e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3a1ec:	d81f      	bhi.n	3a22e <_printf_float+0x18e>
   3a1ee:	3901      	subs	r1, #1
   3a1f0:	465a      	mov	r2, fp
   3a1f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   3a1f6:	910d      	str	r1, [sp, #52]	; 0x34
   3a1f8:	f007 faa5 	bl	41746 <__exponent>
   3a1fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a1fe:	4681      	mov	r9, r0
   3a200:	1813      	adds	r3, r2, r0
   3a202:	2a01      	cmp	r2, #1
   3a204:	6123      	str	r3, [r4, #16]
   3a206:	dc02      	bgt.n	3a20e <_printf_float+0x16e>
   3a208:	6822      	ldr	r2, [r4, #0]
   3a20a:	07d2      	lsls	r2, r2, #31
   3a20c:	d501      	bpl.n	3a212 <_printf_float+0x172>
   3a20e:	3301      	adds	r3, #1
   3a210:	6123      	str	r3, [r4, #16]
   3a212:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3a216:	2b00      	cmp	r3, #0
   3a218:	d099      	beq.n	3a14e <_printf_float+0xae>
   3a21a:	232d      	movs	r3, #45	; 0x2d
   3a21c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a220:	e795      	b.n	3a14e <_printf_float+0xae>
   3a222:	2947      	cmp	r1, #71	; 0x47
   3a224:	d1bb      	bne.n	3a19e <_printf_float+0xfe>
   3a226:	2b00      	cmp	r3, #0
   3a228:	d1b9      	bne.n	3a19e <_printf_float+0xfe>
   3a22a:	2301      	movs	r3, #1
   3a22c:	e7b6      	b.n	3a19c <_printf_float+0xfc>
   3a22e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   3a232:	d118      	bne.n	3a266 <_printf_float+0x1c6>
   3a234:	2900      	cmp	r1, #0
   3a236:	6863      	ldr	r3, [r4, #4]
   3a238:	dd0b      	ble.n	3a252 <_printf_float+0x1b2>
   3a23a:	6121      	str	r1, [r4, #16]
   3a23c:	b913      	cbnz	r3, 3a244 <_printf_float+0x1a4>
   3a23e:	6822      	ldr	r2, [r4, #0]
   3a240:	07d0      	lsls	r0, r2, #31
   3a242:	d502      	bpl.n	3a24a <_printf_float+0x1aa>
   3a244:	3301      	adds	r3, #1
   3a246:	440b      	add	r3, r1
   3a248:	6123      	str	r3, [r4, #16]
   3a24a:	f04f 0900 	mov.w	r9, #0
   3a24e:	65a1      	str	r1, [r4, #88]	; 0x58
   3a250:	e7df      	b.n	3a212 <_printf_float+0x172>
   3a252:	b913      	cbnz	r3, 3a25a <_printf_float+0x1ba>
   3a254:	6822      	ldr	r2, [r4, #0]
   3a256:	07d2      	lsls	r2, r2, #31
   3a258:	d501      	bpl.n	3a25e <_printf_float+0x1be>
   3a25a:	3302      	adds	r3, #2
   3a25c:	e7f4      	b.n	3a248 <_printf_float+0x1a8>
   3a25e:	2301      	movs	r3, #1
   3a260:	e7f2      	b.n	3a248 <_printf_float+0x1a8>
   3a262:	f04f 0b67 	mov.w	fp, #103	; 0x67
   3a266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a268:	4299      	cmp	r1, r3
   3a26a:	db05      	blt.n	3a278 <_printf_float+0x1d8>
   3a26c:	6823      	ldr	r3, [r4, #0]
   3a26e:	6121      	str	r1, [r4, #16]
   3a270:	07d8      	lsls	r0, r3, #31
   3a272:	d5ea      	bpl.n	3a24a <_printf_float+0x1aa>
   3a274:	1c4b      	adds	r3, r1, #1
   3a276:	e7e7      	b.n	3a248 <_printf_float+0x1a8>
   3a278:	2900      	cmp	r1, #0
   3a27a:	bfd4      	ite	le
   3a27c:	f1c1 0202 	rsble	r2, r1, #2
   3a280:	2201      	movgt	r2, #1
   3a282:	4413      	add	r3, r2
   3a284:	e7e0      	b.n	3a248 <_printf_float+0x1a8>
   3a286:	6823      	ldr	r3, [r4, #0]
   3a288:	055a      	lsls	r2, r3, #21
   3a28a:	d407      	bmi.n	3a29c <_printf_float+0x1fc>
   3a28c:	6923      	ldr	r3, [r4, #16]
   3a28e:	4642      	mov	r2, r8
   3a290:	4631      	mov	r1, r6
   3a292:	4628      	mov	r0, r5
   3a294:	47b8      	blx	r7
   3a296:	3001      	adds	r0, #1
   3a298:	d12c      	bne.n	3a2f4 <_printf_float+0x254>
   3a29a:	e762      	b.n	3a162 <_printf_float+0xc2>
   3a29c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3a2a0:	f240 80e0 	bls.w	3a464 <_printf_float+0x3c4>
   3a2a4:	2200      	movs	r2, #0
   3a2a6:	2300      	movs	r3, #0
   3a2a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3a2ac:	f7e2 fcec 	bl	1cc88 <__aeabi_dcmpeq>
   3a2b0:	2800      	cmp	r0, #0
   3a2b2:	d034      	beq.n	3a31e <_printf_float+0x27e>
   3a2b4:	2301      	movs	r3, #1
   3a2b6:	4a37      	ldr	r2, [pc, #220]	; (3a394 <_printf_float+0x2f4>)
   3a2b8:	4631      	mov	r1, r6
   3a2ba:	4628      	mov	r0, r5
   3a2bc:	47b8      	blx	r7
   3a2be:	3001      	adds	r0, #1
   3a2c0:	f43f af4f 	beq.w	3a162 <_printf_float+0xc2>
   3a2c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a2c8:	429a      	cmp	r2, r3
   3a2ca:	db02      	blt.n	3a2d2 <_printf_float+0x232>
   3a2cc:	6823      	ldr	r3, [r4, #0]
   3a2ce:	07d8      	lsls	r0, r3, #31
   3a2d0:	d510      	bpl.n	3a2f4 <_printf_float+0x254>
   3a2d2:	ee18 3a10 	vmov	r3, s16
   3a2d6:	4652      	mov	r2, sl
   3a2d8:	4631      	mov	r1, r6
   3a2da:	4628      	mov	r0, r5
   3a2dc:	47b8      	blx	r7
   3a2de:	3001      	adds	r0, #1
   3a2e0:	f43f af3f 	beq.w	3a162 <_printf_float+0xc2>
   3a2e4:	f04f 0800 	mov.w	r8, #0
   3a2e8:	f104 091a 	add.w	r9, r4, #26
   3a2ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a2ee:	3b01      	subs	r3, #1
   3a2f0:	4543      	cmp	r3, r8
   3a2f2:	dc09      	bgt.n	3a308 <_printf_float+0x268>
   3a2f4:	6823      	ldr	r3, [r4, #0]
   3a2f6:	079b      	lsls	r3, r3, #30
   3a2f8:	f100 8105 	bmi.w	3a506 <_printf_float+0x466>
   3a2fc:	68e0      	ldr	r0, [r4, #12]
   3a2fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3a300:	4298      	cmp	r0, r3
   3a302:	bfb8      	it	lt
   3a304:	4618      	movlt	r0, r3
   3a306:	e72e      	b.n	3a166 <_printf_float+0xc6>
   3a308:	2301      	movs	r3, #1
   3a30a:	464a      	mov	r2, r9
   3a30c:	4631      	mov	r1, r6
   3a30e:	4628      	mov	r0, r5
   3a310:	47b8      	blx	r7
   3a312:	3001      	adds	r0, #1
   3a314:	f43f af25 	beq.w	3a162 <_printf_float+0xc2>
   3a318:	f108 0801 	add.w	r8, r8, #1
   3a31c:	e7e6      	b.n	3a2ec <_printf_float+0x24c>
   3a31e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3a320:	2b00      	cmp	r3, #0
   3a322:	dc39      	bgt.n	3a398 <_printf_float+0x2f8>
   3a324:	2301      	movs	r3, #1
   3a326:	4a1b      	ldr	r2, [pc, #108]	; (3a394 <_printf_float+0x2f4>)
   3a328:	4631      	mov	r1, r6
   3a32a:	4628      	mov	r0, r5
   3a32c:	47b8      	blx	r7
   3a32e:	3001      	adds	r0, #1
   3a330:	f43f af17 	beq.w	3a162 <_printf_float+0xc2>
   3a334:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a338:	4313      	orrs	r3, r2
   3a33a:	d102      	bne.n	3a342 <_printf_float+0x2a2>
   3a33c:	6823      	ldr	r3, [r4, #0]
   3a33e:	07d9      	lsls	r1, r3, #31
   3a340:	d5d8      	bpl.n	3a2f4 <_printf_float+0x254>
   3a342:	ee18 3a10 	vmov	r3, s16
   3a346:	4652      	mov	r2, sl
   3a348:	4631      	mov	r1, r6
   3a34a:	4628      	mov	r0, r5
   3a34c:	47b8      	blx	r7
   3a34e:	3001      	adds	r0, #1
   3a350:	f43f af07 	beq.w	3a162 <_printf_float+0xc2>
   3a354:	f04f 0900 	mov.w	r9, #0
   3a358:	f104 0a1a 	add.w	sl, r4, #26
   3a35c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3a35e:	425b      	negs	r3, r3
   3a360:	454b      	cmp	r3, r9
   3a362:	dc01      	bgt.n	3a368 <_printf_float+0x2c8>
   3a364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a366:	e792      	b.n	3a28e <_printf_float+0x1ee>
   3a368:	2301      	movs	r3, #1
   3a36a:	4652      	mov	r2, sl
   3a36c:	4631      	mov	r1, r6
   3a36e:	4628      	mov	r0, r5
   3a370:	47b8      	blx	r7
   3a372:	3001      	adds	r0, #1
   3a374:	f43f aef5 	beq.w	3a162 <_printf_float+0xc2>
   3a378:	f109 0901 	add.w	r9, r9, #1
   3a37c:	e7ee      	b.n	3a35c <_printf_float+0x2bc>
   3a37e:	bf00      	nop
   3a380:	7fefffff 	.word	0x7fefffff
   3a384:	0004c01f 	.word	0x0004c01f
   3a388:	0004c023 	.word	0x0004c023
   3a38c:	0004c02b 	.word	0x0004c02b
   3a390:	0004c027 	.word	0x0004c027
   3a394:	00045cbc 	.word	0x00045cbc
   3a398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a39a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3a39c:	429a      	cmp	r2, r3
   3a39e:	bfa8      	it	ge
   3a3a0:	461a      	movge	r2, r3
   3a3a2:	2a00      	cmp	r2, #0
   3a3a4:	4691      	mov	r9, r2
   3a3a6:	dc37      	bgt.n	3a418 <_printf_float+0x378>
   3a3a8:	f04f 0b00 	mov.w	fp, #0
   3a3ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3a3b0:	f104 021a 	add.w	r2, r4, #26
   3a3b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3a3b6:	9309      	str	r3, [sp, #36]	; 0x24
   3a3b8:	eba3 0309 	sub.w	r3, r3, r9
   3a3bc:	455b      	cmp	r3, fp
   3a3be:	dc33      	bgt.n	3a428 <_printf_float+0x388>
   3a3c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a3c4:	429a      	cmp	r2, r3
   3a3c6:	db3b      	blt.n	3a440 <_printf_float+0x3a0>
   3a3c8:	6823      	ldr	r3, [r4, #0]
   3a3ca:	07da      	lsls	r2, r3, #31
   3a3cc:	d438      	bmi.n	3a440 <_printf_float+0x3a0>
   3a3ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a3d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3a3d2:	990d      	ldr	r1, [sp, #52]	; 0x34
   3a3d4:	1a9a      	subs	r2, r3, r2
   3a3d6:	eba3 0901 	sub.w	r9, r3, r1
   3a3da:	4591      	cmp	r9, r2
   3a3dc:	bfa8      	it	ge
   3a3de:	4691      	movge	r9, r2
   3a3e0:	f1b9 0f00 	cmp.w	r9, #0
   3a3e4:	dc35      	bgt.n	3a452 <_printf_float+0x3b2>
   3a3e6:	f04f 0800 	mov.w	r8, #0
   3a3ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3a3ee:	f104 0a1a 	add.w	sl, r4, #26
   3a3f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a3f6:	1a9b      	subs	r3, r3, r2
   3a3f8:	eba3 0309 	sub.w	r3, r3, r9
   3a3fc:	4543      	cmp	r3, r8
   3a3fe:	f77f af79 	ble.w	3a2f4 <_printf_float+0x254>
   3a402:	2301      	movs	r3, #1
   3a404:	4652      	mov	r2, sl
   3a406:	4631      	mov	r1, r6
   3a408:	4628      	mov	r0, r5
   3a40a:	47b8      	blx	r7
   3a40c:	3001      	adds	r0, #1
   3a40e:	f43f aea8 	beq.w	3a162 <_printf_float+0xc2>
   3a412:	f108 0801 	add.w	r8, r8, #1
   3a416:	e7ec      	b.n	3a3f2 <_printf_float+0x352>
   3a418:	4613      	mov	r3, r2
   3a41a:	4631      	mov	r1, r6
   3a41c:	4642      	mov	r2, r8
   3a41e:	4628      	mov	r0, r5
   3a420:	47b8      	blx	r7
   3a422:	3001      	adds	r0, #1
   3a424:	d1c0      	bne.n	3a3a8 <_printf_float+0x308>
   3a426:	e69c      	b.n	3a162 <_printf_float+0xc2>
   3a428:	2301      	movs	r3, #1
   3a42a:	4631      	mov	r1, r6
   3a42c:	4628      	mov	r0, r5
   3a42e:	9209      	str	r2, [sp, #36]	; 0x24
   3a430:	47b8      	blx	r7
   3a432:	3001      	adds	r0, #1
   3a434:	f43f ae95 	beq.w	3a162 <_printf_float+0xc2>
   3a438:	f10b 0b01 	add.w	fp, fp, #1
   3a43c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3a43e:	e7b9      	b.n	3a3b4 <_printf_float+0x314>
   3a440:	ee18 3a10 	vmov	r3, s16
   3a444:	4652      	mov	r2, sl
   3a446:	4631      	mov	r1, r6
   3a448:	4628      	mov	r0, r5
   3a44a:	47b8      	blx	r7
   3a44c:	3001      	adds	r0, #1
   3a44e:	d1be      	bne.n	3a3ce <_printf_float+0x32e>
   3a450:	e687      	b.n	3a162 <_printf_float+0xc2>
   3a452:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3a454:	464b      	mov	r3, r9
   3a456:	4631      	mov	r1, r6
   3a458:	4628      	mov	r0, r5
   3a45a:	4442      	add	r2, r8
   3a45c:	47b8      	blx	r7
   3a45e:	3001      	adds	r0, #1
   3a460:	d1c1      	bne.n	3a3e6 <_printf_float+0x346>
   3a462:	e67e      	b.n	3a162 <_printf_float+0xc2>
   3a464:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a466:	2a01      	cmp	r2, #1
   3a468:	dc01      	bgt.n	3a46e <_printf_float+0x3ce>
   3a46a:	07db      	lsls	r3, r3, #31
   3a46c:	d538      	bpl.n	3a4e0 <_printf_float+0x440>
   3a46e:	2301      	movs	r3, #1
   3a470:	4642      	mov	r2, r8
   3a472:	4631      	mov	r1, r6
   3a474:	4628      	mov	r0, r5
   3a476:	47b8      	blx	r7
   3a478:	3001      	adds	r0, #1
   3a47a:	f43f ae72 	beq.w	3a162 <_printf_float+0xc2>
   3a47e:	ee18 3a10 	vmov	r3, s16
   3a482:	4652      	mov	r2, sl
   3a484:	4631      	mov	r1, r6
   3a486:	4628      	mov	r0, r5
   3a488:	47b8      	blx	r7
   3a48a:	3001      	adds	r0, #1
   3a48c:	f43f ae69 	beq.w	3a162 <_printf_float+0xc2>
   3a490:	2200      	movs	r2, #0
   3a492:	2300      	movs	r3, #0
   3a494:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3a498:	f7e2 fbf6 	bl	1cc88 <__aeabi_dcmpeq>
   3a49c:	b9d8      	cbnz	r0, 3a4d6 <_printf_float+0x436>
   3a49e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a4a0:	f108 0201 	add.w	r2, r8, #1
   3a4a4:	3b01      	subs	r3, #1
   3a4a6:	4631      	mov	r1, r6
   3a4a8:	4628      	mov	r0, r5
   3a4aa:	47b8      	blx	r7
   3a4ac:	3001      	adds	r0, #1
   3a4ae:	d10e      	bne.n	3a4ce <_printf_float+0x42e>
   3a4b0:	e657      	b.n	3a162 <_printf_float+0xc2>
   3a4b2:	2301      	movs	r3, #1
   3a4b4:	4652      	mov	r2, sl
   3a4b6:	4631      	mov	r1, r6
   3a4b8:	4628      	mov	r0, r5
   3a4ba:	47b8      	blx	r7
   3a4bc:	3001      	adds	r0, #1
   3a4be:	f43f ae50 	beq.w	3a162 <_printf_float+0xc2>
   3a4c2:	f108 0801 	add.w	r8, r8, #1
   3a4c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a4c8:	3b01      	subs	r3, #1
   3a4ca:	4543      	cmp	r3, r8
   3a4cc:	dcf1      	bgt.n	3a4b2 <_printf_float+0x412>
   3a4ce:	464b      	mov	r3, r9
   3a4d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
   3a4d4:	e6dc      	b.n	3a290 <_printf_float+0x1f0>
   3a4d6:	f04f 0800 	mov.w	r8, #0
   3a4da:	f104 0a1a 	add.w	sl, r4, #26
   3a4de:	e7f2      	b.n	3a4c6 <_printf_float+0x426>
   3a4e0:	2301      	movs	r3, #1
   3a4e2:	4642      	mov	r2, r8
   3a4e4:	e7df      	b.n	3a4a6 <_printf_float+0x406>
   3a4e6:	2301      	movs	r3, #1
   3a4e8:	464a      	mov	r2, r9
   3a4ea:	4631      	mov	r1, r6
   3a4ec:	4628      	mov	r0, r5
   3a4ee:	47b8      	blx	r7
   3a4f0:	3001      	adds	r0, #1
   3a4f2:	f43f ae36 	beq.w	3a162 <_printf_float+0xc2>
   3a4f6:	f108 0801 	add.w	r8, r8, #1
   3a4fa:	68e3      	ldr	r3, [r4, #12]
   3a4fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
   3a4fe:	1a5b      	subs	r3, r3, r1
   3a500:	4543      	cmp	r3, r8
   3a502:	dcf0      	bgt.n	3a4e6 <_printf_float+0x446>
   3a504:	e6fa      	b.n	3a2fc <_printf_float+0x25c>
   3a506:	f04f 0800 	mov.w	r8, #0
   3a50a:	f104 0919 	add.w	r9, r4, #25
   3a50e:	e7f4      	b.n	3a4fa <_printf_float+0x45a>

0003a510 <_printf_i>:
   3a510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   3a514:	7e0f      	ldrb	r7, [r1, #24]
   3a516:	4691      	mov	r9, r2
   3a518:	4680      	mov	r8, r0
   3a51a:	460c      	mov	r4, r1
   3a51c:	2f78      	cmp	r7, #120	; 0x78
   3a51e:	469a      	mov	sl, r3
   3a520:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   3a522:	f101 0243 	add.w	r2, r1, #67	; 0x43
   3a526:	d807      	bhi.n	3a538 <_printf_i+0x28>
   3a528:	2f62      	cmp	r7, #98	; 0x62
   3a52a:	d80a      	bhi.n	3a542 <_printf_i+0x32>
   3a52c:	2f00      	cmp	r7, #0
   3a52e:	f000 80d8 	beq.w	3a6e2 <_printf_i+0x1d2>
   3a532:	2f58      	cmp	r7, #88	; 0x58
   3a534:	f000 80a3 	beq.w	3a67e <_printf_i+0x16e>
   3a538:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3a53c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   3a540:	e03a      	b.n	3a5b8 <_printf_i+0xa8>
   3a542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   3a546:	2b15      	cmp	r3, #21
   3a548:	d8f6      	bhi.n	3a538 <_printf_i+0x28>
   3a54a:	a101      	add	r1, pc, #4	; (adr r1, 3a550 <_printf_i+0x40>)
   3a54c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   3a550:	0003a5a9 	.word	0x0003a5a9
   3a554:	0003a5bd 	.word	0x0003a5bd
   3a558:	0003a539 	.word	0x0003a539
   3a55c:	0003a539 	.word	0x0003a539
   3a560:	0003a539 	.word	0x0003a539
   3a564:	0003a539 	.word	0x0003a539
   3a568:	0003a5bd 	.word	0x0003a5bd
   3a56c:	0003a539 	.word	0x0003a539
   3a570:	0003a539 	.word	0x0003a539
   3a574:	0003a539 	.word	0x0003a539
   3a578:	0003a539 	.word	0x0003a539
   3a57c:	0003a6c9 	.word	0x0003a6c9
   3a580:	0003a5ed 	.word	0x0003a5ed
   3a584:	0003a6ab 	.word	0x0003a6ab
   3a588:	0003a539 	.word	0x0003a539
   3a58c:	0003a539 	.word	0x0003a539
   3a590:	0003a6eb 	.word	0x0003a6eb
   3a594:	0003a539 	.word	0x0003a539
   3a598:	0003a5ed 	.word	0x0003a5ed
   3a59c:	0003a539 	.word	0x0003a539
   3a5a0:	0003a539 	.word	0x0003a539
   3a5a4:	0003a6b3 	.word	0x0003a6b3
   3a5a8:	682b      	ldr	r3, [r5, #0]
   3a5aa:	1d1a      	adds	r2, r3, #4
   3a5ac:	681b      	ldr	r3, [r3, #0]
   3a5ae:	602a      	str	r2, [r5, #0]
   3a5b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3a5b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3a5b8:	2301      	movs	r3, #1
   3a5ba:	e0a3      	b.n	3a704 <_printf_i+0x1f4>
   3a5bc:	6820      	ldr	r0, [r4, #0]
   3a5be:	6829      	ldr	r1, [r5, #0]
   3a5c0:	0606      	lsls	r6, r0, #24
   3a5c2:	f101 0304 	add.w	r3, r1, #4
   3a5c6:	d50a      	bpl.n	3a5de <_printf_i+0xce>
   3a5c8:	680e      	ldr	r6, [r1, #0]
   3a5ca:	602b      	str	r3, [r5, #0]
   3a5cc:	2e00      	cmp	r6, #0
   3a5ce:	da03      	bge.n	3a5d8 <_printf_i+0xc8>
   3a5d0:	232d      	movs	r3, #45	; 0x2d
   3a5d2:	4276      	negs	r6, r6
   3a5d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a5d8:	485e      	ldr	r0, [pc, #376]	; (3a754 <_printf_i+0x244>)
   3a5da:	230a      	movs	r3, #10
   3a5dc:	e019      	b.n	3a612 <_printf_i+0x102>
   3a5de:	680e      	ldr	r6, [r1, #0]
   3a5e0:	f010 0f40 	tst.w	r0, #64	; 0x40
   3a5e4:	602b      	str	r3, [r5, #0]
   3a5e6:	bf18      	it	ne
   3a5e8:	b236      	sxthne	r6, r6
   3a5ea:	e7ef      	b.n	3a5cc <_printf_i+0xbc>
   3a5ec:	682b      	ldr	r3, [r5, #0]
   3a5ee:	6820      	ldr	r0, [r4, #0]
   3a5f0:	1d19      	adds	r1, r3, #4
   3a5f2:	6029      	str	r1, [r5, #0]
   3a5f4:	0601      	lsls	r1, r0, #24
   3a5f6:	d501      	bpl.n	3a5fc <_printf_i+0xec>
   3a5f8:	681e      	ldr	r6, [r3, #0]
   3a5fa:	e002      	b.n	3a602 <_printf_i+0xf2>
   3a5fc:	0646      	lsls	r6, r0, #25
   3a5fe:	d5fb      	bpl.n	3a5f8 <_printf_i+0xe8>
   3a600:	881e      	ldrh	r6, [r3, #0]
   3a602:	2f6f      	cmp	r7, #111	; 0x6f
   3a604:	4853      	ldr	r0, [pc, #332]	; (3a754 <_printf_i+0x244>)
   3a606:	bf0c      	ite	eq
   3a608:	2308      	moveq	r3, #8
   3a60a:	230a      	movne	r3, #10
   3a60c:	2100      	movs	r1, #0
   3a60e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   3a612:	6865      	ldr	r5, [r4, #4]
   3a614:	2d00      	cmp	r5, #0
   3a616:	60a5      	str	r5, [r4, #8]
   3a618:	bfa2      	ittt	ge
   3a61a:	6821      	ldrge	r1, [r4, #0]
   3a61c:	f021 0104 	bicge.w	r1, r1, #4
   3a620:	6021      	strge	r1, [r4, #0]
   3a622:	b90e      	cbnz	r6, 3a628 <_printf_i+0x118>
   3a624:	2d00      	cmp	r5, #0
   3a626:	d04d      	beq.n	3a6c4 <_printf_i+0x1b4>
   3a628:	4615      	mov	r5, r2
   3a62a:	fbb6 f1f3 	udiv	r1, r6, r3
   3a62e:	fb03 6711 	mls	r7, r3, r1, r6
   3a632:	5dc7      	ldrb	r7, [r0, r7]
   3a634:	f805 7d01 	strb.w	r7, [r5, #-1]!
   3a638:	4637      	mov	r7, r6
   3a63a:	460e      	mov	r6, r1
   3a63c:	42bb      	cmp	r3, r7
   3a63e:	d9f4      	bls.n	3a62a <_printf_i+0x11a>
   3a640:	2b08      	cmp	r3, #8
   3a642:	d10b      	bne.n	3a65c <_printf_i+0x14c>
   3a644:	6823      	ldr	r3, [r4, #0]
   3a646:	07de      	lsls	r6, r3, #31
   3a648:	d508      	bpl.n	3a65c <_printf_i+0x14c>
   3a64a:	6923      	ldr	r3, [r4, #16]
   3a64c:	6861      	ldr	r1, [r4, #4]
   3a64e:	4299      	cmp	r1, r3
   3a650:	bfde      	ittt	le
   3a652:	2330      	movle	r3, #48	; 0x30
   3a654:	f805 3c01 	strble.w	r3, [r5, #-1]
   3a658:	f105 35ff 	addle.w	r5, r5, #4294967295
   3a65c:	1b52      	subs	r2, r2, r5
   3a65e:	6122      	str	r2, [r4, #16]
   3a660:	464b      	mov	r3, r9
   3a662:	aa03      	add	r2, sp, #12
   3a664:	4621      	mov	r1, r4
   3a666:	4640      	mov	r0, r8
   3a668:	f8cd a000 	str.w	sl, [sp]
   3a66c:	f007 f8a9 	bl	417c2 <_printf_common>
   3a670:	3001      	adds	r0, #1
   3a672:	d14c      	bne.n	3a70e <_printf_i+0x1fe>
   3a674:	f04f 30ff 	mov.w	r0, #4294967295
   3a678:	b004      	add	sp, #16
   3a67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a67e:	4835      	ldr	r0, [pc, #212]	; (3a754 <_printf_i+0x244>)
   3a680:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   3a684:	6829      	ldr	r1, [r5, #0]
   3a686:	6823      	ldr	r3, [r4, #0]
   3a688:	f851 6b04 	ldr.w	r6, [r1], #4
   3a68c:	6029      	str	r1, [r5, #0]
   3a68e:	061d      	lsls	r5, r3, #24
   3a690:	d514      	bpl.n	3a6bc <_printf_i+0x1ac>
   3a692:	07df      	lsls	r7, r3, #31
   3a694:	bf44      	itt	mi
   3a696:	f043 0320 	orrmi.w	r3, r3, #32
   3a69a:	6023      	strmi	r3, [r4, #0]
   3a69c:	b91e      	cbnz	r6, 3a6a6 <_printf_i+0x196>
   3a69e:	6823      	ldr	r3, [r4, #0]
   3a6a0:	f023 0320 	bic.w	r3, r3, #32
   3a6a4:	6023      	str	r3, [r4, #0]
   3a6a6:	2310      	movs	r3, #16
   3a6a8:	e7b0      	b.n	3a60c <_printf_i+0xfc>
   3a6aa:	6823      	ldr	r3, [r4, #0]
   3a6ac:	f043 0320 	orr.w	r3, r3, #32
   3a6b0:	6023      	str	r3, [r4, #0]
   3a6b2:	2378      	movs	r3, #120	; 0x78
   3a6b4:	4828      	ldr	r0, [pc, #160]	; (3a758 <_printf_i+0x248>)
   3a6b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   3a6ba:	e7e3      	b.n	3a684 <_printf_i+0x174>
   3a6bc:	0659      	lsls	r1, r3, #25
   3a6be:	bf48      	it	mi
   3a6c0:	b2b6      	uxthmi	r6, r6
   3a6c2:	e7e6      	b.n	3a692 <_printf_i+0x182>
   3a6c4:	4615      	mov	r5, r2
   3a6c6:	e7bb      	b.n	3a640 <_printf_i+0x130>
   3a6c8:	682b      	ldr	r3, [r5, #0]
   3a6ca:	6826      	ldr	r6, [r4, #0]
   3a6cc:	1d18      	adds	r0, r3, #4
   3a6ce:	6961      	ldr	r1, [r4, #20]
   3a6d0:	6028      	str	r0, [r5, #0]
   3a6d2:	0635      	lsls	r5, r6, #24
   3a6d4:	681b      	ldr	r3, [r3, #0]
   3a6d6:	d501      	bpl.n	3a6dc <_printf_i+0x1cc>
   3a6d8:	6019      	str	r1, [r3, #0]
   3a6da:	e002      	b.n	3a6e2 <_printf_i+0x1d2>
   3a6dc:	0670      	lsls	r0, r6, #25
   3a6de:	d5fb      	bpl.n	3a6d8 <_printf_i+0x1c8>
   3a6e0:	8019      	strh	r1, [r3, #0]
   3a6e2:	2300      	movs	r3, #0
   3a6e4:	4615      	mov	r5, r2
   3a6e6:	6123      	str	r3, [r4, #16]
   3a6e8:	e7ba      	b.n	3a660 <_printf_i+0x150>
   3a6ea:	682b      	ldr	r3, [r5, #0]
   3a6ec:	2100      	movs	r1, #0
   3a6ee:	1d1a      	adds	r2, r3, #4
   3a6f0:	602a      	str	r2, [r5, #0]
   3a6f2:	681d      	ldr	r5, [r3, #0]
   3a6f4:	6862      	ldr	r2, [r4, #4]
   3a6f6:	4628      	mov	r0, r5
   3a6f8:	f006 ff45 	bl	41586 <memchr>
   3a6fc:	b108      	cbz	r0, 3a702 <_printf_i+0x1f2>
   3a6fe:	1b40      	subs	r0, r0, r5
   3a700:	6060      	str	r0, [r4, #4]
   3a702:	6863      	ldr	r3, [r4, #4]
   3a704:	6123      	str	r3, [r4, #16]
   3a706:	2300      	movs	r3, #0
   3a708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a70c:	e7a8      	b.n	3a660 <_printf_i+0x150>
   3a70e:	6923      	ldr	r3, [r4, #16]
   3a710:	462a      	mov	r2, r5
   3a712:	4649      	mov	r1, r9
   3a714:	4640      	mov	r0, r8
   3a716:	47d0      	blx	sl
   3a718:	3001      	adds	r0, #1
   3a71a:	d0ab      	beq.n	3a674 <_printf_i+0x164>
   3a71c:	6823      	ldr	r3, [r4, #0]
   3a71e:	079b      	lsls	r3, r3, #30
   3a720:	d413      	bmi.n	3a74a <_printf_i+0x23a>
   3a722:	68e0      	ldr	r0, [r4, #12]
   3a724:	9b03      	ldr	r3, [sp, #12]
   3a726:	4298      	cmp	r0, r3
   3a728:	bfb8      	it	lt
   3a72a:	4618      	movlt	r0, r3
   3a72c:	e7a4      	b.n	3a678 <_printf_i+0x168>
   3a72e:	2301      	movs	r3, #1
   3a730:	4632      	mov	r2, r6
   3a732:	4649      	mov	r1, r9
   3a734:	4640      	mov	r0, r8
   3a736:	47d0      	blx	sl
   3a738:	3001      	adds	r0, #1
   3a73a:	d09b      	beq.n	3a674 <_printf_i+0x164>
   3a73c:	3501      	adds	r5, #1
   3a73e:	68e3      	ldr	r3, [r4, #12]
   3a740:	9903      	ldr	r1, [sp, #12]
   3a742:	1a5b      	subs	r3, r3, r1
   3a744:	42ab      	cmp	r3, r5
   3a746:	dcf2      	bgt.n	3a72e <_printf_i+0x21e>
   3a748:	e7eb      	b.n	3a722 <_printf_i+0x212>
   3a74a:	2500      	movs	r5, #0
   3a74c:	f104 0619 	add.w	r6, r4, #25
   3a750:	e7f5      	b.n	3a73e <_printf_i+0x22e>
   3a752:	bf00      	nop
   3a754:	0004c02f 	.word	0x0004c02f
   3a758:	0004c040 	.word	0x0004c040

0003a75c <iprintf>:
   3a75c:	b40f      	push	{r0, r1, r2, r3}
   3a75e:	4b0a      	ldr	r3, [pc, #40]	; (3a788 <iprintf+0x2c>)
   3a760:	b513      	push	{r0, r1, r4, lr}
   3a762:	681c      	ldr	r4, [r3, #0]
   3a764:	b124      	cbz	r4, 3a770 <iprintf+0x14>
   3a766:	69a3      	ldr	r3, [r4, #24]
   3a768:	b913      	cbnz	r3, 3a770 <iprintf+0x14>
   3a76a:	4620      	mov	r0, r4
   3a76c:	f000 fc7a 	bl	3b064 <__sinit>
   3a770:	ab05      	add	r3, sp, #20
   3a772:	9a04      	ldr	r2, [sp, #16]
   3a774:	68a1      	ldr	r1, [r4, #8]
   3a776:	4620      	mov	r0, r4
   3a778:	9301      	str	r3, [sp, #4]
   3a77a:	f7ff fb61 	bl	39e40 <_vfiprintf_r>
   3a77e:	b002      	add	sp, #8
   3a780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3a784:	b004      	add	sp, #16
   3a786:	4770      	bx	lr
   3a788:	20014a74 	.word	0x20014a74

0003a78c <realloc>:
   3a78c:	4b02      	ldr	r3, [pc, #8]	; (3a798 <realloc+0xc>)
   3a78e:	460a      	mov	r2, r1
   3a790:	4601      	mov	r1, r0
   3a792:	6818      	ldr	r0, [r3, #0]
   3a794:	f007 bcd6 	b.w	42144 <_realloc_r>
   3a798:	20014a74 	.word	0x20014a74

0003a79c <_sbrk_r>:
   3a79c:	b538      	push	{r3, r4, r5, lr}
   3a79e:	2300      	movs	r3, #0
   3a7a0:	4d05      	ldr	r5, [pc, #20]	; (3a7b8 <_sbrk_r+0x1c>)
   3a7a2:	4604      	mov	r4, r0
   3a7a4:	4608      	mov	r0, r1
   3a7a6:	602b      	str	r3, [r5, #0]
   3a7a8:	f7e9 f924 	bl	239f4 <_sbrk>
   3a7ac:	1c43      	adds	r3, r0, #1
   3a7ae:	d102      	bne.n	3a7b6 <_sbrk_r+0x1a>
   3a7b0:	682b      	ldr	r3, [r5, #0]
   3a7b2:	b103      	cbz	r3, 3a7b6 <_sbrk_r+0x1a>
   3a7b4:	6023      	str	r3, [r4, #0]
   3a7b6:	bd38      	pop	{r3, r4, r5, pc}
   3a7b8:	2001a568 	.word	0x2001a568

0003a7bc <sniprintf>:
   3a7bc:	b40c      	push	{r2, r3}
   3a7be:	4b18      	ldr	r3, [pc, #96]	; (3a820 <sniprintf+0x64>)
   3a7c0:	b530      	push	{r4, r5, lr}
   3a7c2:	1e0c      	subs	r4, r1, #0
   3a7c4:	b09d      	sub	sp, #116	; 0x74
   3a7c6:	681d      	ldr	r5, [r3, #0]
   3a7c8:	da08      	bge.n	3a7dc <sniprintf+0x20>
   3a7ca:	238b      	movs	r3, #139	; 0x8b
   3a7cc:	f04f 30ff 	mov.w	r0, #4294967295
   3a7d0:	602b      	str	r3, [r5, #0]
   3a7d2:	b01d      	add	sp, #116	; 0x74
   3a7d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3a7d8:	b002      	add	sp, #8
   3a7da:	4770      	bx	lr
   3a7dc:	f44f 7302 	mov.w	r3, #520	; 0x208
   3a7e0:	9002      	str	r0, [sp, #8]
   3a7e2:	9006      	str	r0, [sp, #24]
   3a7e4:	a902      	add	r1, sp, #8
   3a7e6:	f8ad 3014 	strh.w	r3, [sp, #20]
   3a7ea:	bf14      	ite	ne
   3a7ec:	f104 33ff 	addne.w	r3, r4, #4294967295
   3a7f0:	4623      	moveq	r3, r4
   3a7f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3a7f4:	4628      	mov	r0, r5
   3a7f6:	9304      	str	r3, [sp, #16]
   3a7f8:	9307      	str	r3, [sp, #28]
   3a7fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3a7fe:	f8ad 3016 	strh.w	r3, [sp, #22]
   3a802:	ab21      	add	r3, sp, #132	; 0x84
   3a804:	9301      	str	r3, [sp, #4]
   3a806:	f001 fb2f 	bl	3be68 <_svfiprintf_r>
   3a80a:	1c43      	adds	r3, r0, #1
   3a80c:	bfbc      	itt	lt
   3a80e:	238b      	movlt	r3, #139	; 0x8b
   3a810:	602b      	strlt	r3, [r5, #0]
   3a812:	2c00      	cmp	r4, #0
   3a814:	d0dd      	beq.n	3a7d2 <sniprintf+0x16>
   3a816:	9b02      	ldr	r3, [sp, #8]
   3a818:	2200      	movs	r2, #0
   3a81a:	701a      	strb	r2, [r3, #0]
   3a81c:	e7d9      	b.n	3a7d2 <sniprintf+0x16>
   3a81e:	bf00      	nop
   3a820:	20014a74 	.word	0x20014a74

0003a824 <siscanf>:
   3a824:	b40e      	push	{r1, r2, r3}
   3a826:	b510      	push	{r4, lr}
   3a828:	b09f      	sub	sp, #124	; 0x7c
   3a82a:	f44f 7101 	mov.w	r1, #516	; 0x204
   3a82e:	ac21      	add	r4, sp, #132	; 0x84
   3a830:	f8ad 101c 	strh.w	r1, [sp, #28]
   3a834:	9004      	str	r0, [sp, #16]
   3a836:	f854 2b04 	ldr.w	r2, [r4], #4
   3a83a:	9008      	str	r0, [sp, #32]
   3a83c:	9201      	str	r2, [sp, #4]
   3a83e:	f7e2 fd00 	bl	1d242 <strlen>
   3a842:	4b0c      	ldr	r3, [pc, #48]	; (3a874 <siscanf+0x50>)
   3a844:	a904      	add	r1, sp, #16
   3a846:	9005      	str	r0, [sp, #20]
   3a848:	930d      	str	r3, [sp, #52]	; 0x34
   3a84a:	2300      	movs	r3, #0
   3a84c:	9009      	str	r0, [sp, #36]	; 0x24
   3a84e:	9311      	str	r3, [sp, #68]	; 0x44
   3a850:	9316      	str	r3, [sp, #88]	; 0x58
   3a852:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3a856:	4808      	ldr	r0, [pc, #32]	; (3a878 <siscanf+0x54>)
   3a858:	f8ad 301e 	strh.w	r3, [sp, #30]
   3a85c:	4623      	mov	r3, r4
   3a85e:	9a01      	ldr	r2, [sp, #4]
   3a860:	6800      	ldr	r0, [r0, #0]
   3a862:	9403      	str	r4, [sp, #12]
   3a864:	f001 fc00 	bl	3c068 <__ssvfiscanf_r>
   3a868:	b01f      	add	sp, #124	; 0x7c
   3a86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3a86e:	b003      	add	sp, #12
   3a870:	4770      	bx	lr
   3a872:	bf00      	nop
   3a874:	000418f9 	.word	0x000418f9
   3a878:	20014a74 	.word	0x20014a74

0003a87c <strtod>:
   3a87c:	460a      	mov	r2, r1
   3a87e:	4601      	mov	r1, r0
   3a880:	4802      	ldr	r0, [pc, #8]	; (3a88c <strtod+0x10>)
   3a882:	4b03      	ldr	r3, [pc, #12]	; (3a890 <strtod+0x14>)
   3a884:	6800      	ldr	r0, [r0, #0]
   3a886:	f7e3 bfc7 	b.w	1e818 <_strtod_l>
   3a88a:	bf00      	nop
   3a88c:	20014a74 	.word	0x20014a74
   3a890:	20014ad8 	.word	0x20014ad8

0003a894 <_strtol_l.constprop.0>:
   3a894:	2b01      	cmp	r3, #1
   3a896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a89a:	d001      	beq.n	3a8a0 <_strtol_l.constprop.0+0xc>
   3a89c:	2b24      	cmp	r3, #36	; 0x24
   3a89e:	d906      	bls.n	3a8ae <_strtol_l.constprop.0+0x1a>
   3a8a0:	f003 f854 	bl	3d94c <__errno>
   3a8a4:	2316      	movs	r3, #22
   3a8a6:	6003      	str	r3, [r0, #0]
   3a8a8:	2000      	movs	r0, #0
   3a8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a8ae:	460d      	mov	r5, r1
   3a8b0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 3a994 <_strtol_l.constprop.0+0x100>
   3a8b4:	462e      	mov	r6, r5
   3a8b6:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a8ba:	f814 700c 	ldrb.w	r7, [r4, ip]
   3a8be:	f017 0708 	ands.w	r7, r7, #8
   3a8c2:	d1f7      	bne.n	3a8b4 <_strtol_l.constprop.0+0x20>
   3a8c4:	2c2d      	cmp	r4, #45	; 0x2d
   3a8c6:	d132      	bne.n	3a92e <_strtol_l.constprop.0+0x9a>
   3a8c8:	782c      	ldrb	r4, [r5, #0]
   3a8ca:	2701      	movs	r7, #1
   3a8cc:	1cb5      	adds	r5, r6, #2
   3a8ce:	2b00      	cmp	r3, #0
   3a8d0:	d05b      	beq.n	3a98a <_strtol_l.constprop.0+0xf6>
   3a8d2:	2b10      	cmp	r3, #16
   3a8d4:	d109      	bne.n	3a8ea <_strtol_l.constprop.0+0x56>
   3a8d6:	2c30      	cmp	r4, #48	; 0x30
   3a8d8:	d107      	bne.n	3a8ea <_strtol_l.constprop.0+0x56>
   3a8da:	782c      	ldrb	r4, [r5, #0]
   3a8dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   3a8e0:	2c58      	cmp	r4, #88	; 0x58
   3a8e2:	d14d      	bne.n	3a980 <_strtol_l.constprop.0+0xec>
   3a8e4:	786c      	ldrb	r4, [r5, #1]
   3a8e6:	2310      	movs	r3, #16
   3a8e8:	3502      	adds	r5, #2
   3a8ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   3a8ee:	f04f 0c00 	mov.w	ip, #0
   3a8f2:	f108 38ff 	add.w	r8, r8, #4294967295
   3a8f6:	4666      	mov	r6, ip
   3a8f8:	fbb8 f9f3 	udiv	r9, r8, r3
   3a8fc:	fb03 8a19 	mls	sl, r3, r9, r8
   3a900:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   3a904:	f1be 0f09 	cmp.w	lr, #9
   3a908:	d816      	bhi.n	3a938 <_strtol_l.constprop.0+0xa4>
   3a90a:	4674      	mov	r4, lr
   3a90c:	42a3      	cmp	r3, r4
   3a90e:	dd24      	ble.n	3a95a <_strtol_l.constprop.0+0xc6>
   3a910:	f1bc 0f00 	cmp.w	ip, #0
   3a914:	db1e      	blt.n	3a954 <_strtol_l.constprop.0+0xc0>
   3a916:	45b1      	cmp	r9, r6
   3a918:	d31c      	bcc.n	3a954 <_strtol_l.constprop.0+0xc0>
   3a91a:	d101      	bne.n	3a920 <_strtol_l.constprop.0+0x8c>
   3a91c:	45a2      	cmp	sl, r4
   3a91e:	db19      	blt.n	3a954 <_strtol_l.constprop.0+0xc0>
   3a920:	fb06 4603 	mla	r6, r6, r3, r4
   3a924:	f04f 0c01 	mov.w	ip, #1
   3a928:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a92c:	e7e8      	b.n	3a900 <_strtol_l.constprop.0+0x6c>
   3a92e:	2c2b      	cmp	r4, #43	; 0x2b
   3a930:	bf04      	itt	eq
   3a932:	782c      	ldrbeq	r4, [r5, #0]
   3a934:	1cb5      	addeq	r5, r6, #2
   3a936:	e7ca      	b.n	3a8ce <_strtol_l.constprop.0+0x3a>
   3a938:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   3a93c:	f1be 0f19 	cmp.w	lr, #25
   3a940:	d801      	bhi.n	3a946 <_strtol_l.constprop.0+0xb2>
   3a942:	3c37      	subs	r4, #55	; 0x37
   3a944:	e7e2      	b.n	3a90c <_strtol_l.constprop.0+0x78>
   3a946:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   3a94a:	f1be 0f19 	cmp.w	lr, #25
   3a94e:	d804      	bhi.n	3a95a <_strtol_l.constprop.0+0xc6>
   3a950:	3c57      	subs	r4, #87	; 0x57
   3a952:	e7db      	b.n	3a90c <_strtol_l.constprop.0+0x78>
   3a954:	f04f 3cff 	mov.w	ip, #4294967295
   3a958:	e7e6      	b.n	3a928 <_strtol_l.constprop.0+0x94>
   3a95a:	f1bc 0f00 	cmp.w	ip, #0
   3a95e:	da05      	bge.n	3a96c <_strtol_l.constprop.0+0xd8>
   3a960:	2322      	movs	r3, #34	; 0x22
   3a962:	4646      	mov	r6, r8
   3a964:	6003      	str	r3, [r0, #0]
   3a966:	b942      	cbnz	r2, 3a97a <_strtol_l.constprop.0+0xe6>
   3a968:	4630      	mov	r0, r6
   3a96a:	e79e      	b.n	3a8aa <_strtol_l.constprop.0+0x16>
   3a96c:	b107      	cbz	r7, 3a970 <_strtol_l.constprop.0+0xdc>
   3a96e:	4276      	negs	r6, r6
   3a970:	2a00      	cmp	r2, #0
   3a972:	d0f9      	beq.n	3a968 <_strtol_l.constprop.0+0xd4>
   3a974:	f1bc 0f00 	cmp.w	ip, #0
   3a978:	d000      	beq.n	3a97c <_strtol_l.constprop.0+0xe8>
   3a97a:	1e69      	subs	r1, r5, #1
   3a97c:	6011      	str	r1, [r2, #0]
   3a97e:	e7f3      	b.n	3a968 <_strtol_l.constprop.0+0xd4>
   3a980:	2430      	movs	r4, #48	; 0x30
   3a982:	2b00      	cmp	r3, #0
   3a984:	d1b1      	bne.n	3a8ea <_strtol_l.constprop.0+0x56>
   3a986:	2308      	movs	r3, #8
   3a988:	e7af      	b.n	3a8ea <_strtol_l.constprop.0+0x56>
   3a98a:	2c30      	cmp	r4, #48	; 0x30
   3a98c:	d0a5      	beq.n	3a8da <_strtol_l.constprop.0+0x46>
   3a98e:	230a      	movs	r3, #10
   3a990:	e7ab      	b.n	3a8ea <_strtol_l.constprop.0+0x56>
   3a992:	bf00      	nop
   3a994:	0004bf0e 	.word	0x0004bf0e

0003a998 <strtol>:
   3a998:	4613      	mov	r3, r2
   3a99a:	460a      	mov	r2, r1
   3a99c:	4601      	mov	r1, r0
   3a99e:	4802      	ldr	r0, [pc, #8]	; (3a9a8 <strtol+0x10>)
   3a9a0:	6800      	ldr	r0, [r0, #0]
   3a9a2:	f7ff bf77 	b.w	3a894 <_strtol_l.constprop.0>
   3a9a6:	bf00      	nop
   3a9a8:	20014a74 	.word	0x20014a74

0003a9ac <_strtoll_l.constprop.0>:
   3a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a9b0:	b085      	sub	sp, #20
   3a9b2:	4688      	mov	r8, r1
   3a9b4:	461e      	mov	r6, r3
   3a9b6:	460d      	mov	r5, r1
   3a9b8:	9201      	str	r2, [sp, #4]
   3a9ba:	4a46      	ldr	r2, [pc, #280]	; (3aad4 <_strtoll_l.constprop.0+0x128>)
   3a9bc:	9003      	str	r0, [sp, #12]
   3a9be:	462b      	mov	r3, r5
   3a9c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a9c4:	5ca7      	ldrb	r7, [r4, r2]
   3a9c6:	f017 0708 	ands.w	r7, r7, #8
   3a9ca:	d1f8      	bne.n	3a9be <_strtoll_l.constprop.0+0x12>
   3a9cc:	2c2d      	cmp	r4, #45	; 0x2d
   3a9ce:	d148      	bne.n	3aa62 <_strtoll_l.constprop.0+0xb6>
   3a9d0:	782c      	ldrb	r4, [r5, #0]
   3a9d2:	2701      	movs	r7, #1
   3a9d4:	1c9d      	adds	r5, r3, #2
   3a9d6:	2e00      	cmp	r6, #0
   3a9d8:	d078      	beq.n	3aacc <_strtoll_l.constprop.0+0x120>
   3a9da:	2e10      	cmp	r6, #16
   3a9dc:	d109      	bne.n	3a9f2 <_strtoll_l.constprop.0+0x46>
   3a9de:	2c30      	cmp	r4, #48	; 0x30
   3a9e0:	d107      	bne.n	3a9f2 <_strtoll_l.constprop.0+0x46>
   3a9e2:	782b      	ldrb	r3, [r5, #0]
   3a9e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   3a9e8:	2b58      	cmp	r3, #88	; 0x58
   3a9ea:	d16a      	bne.n	3aac2 <_strtoll_l.constprop.0+0x116>
   3a9ec:	786c      	ldrb	r4, [r5, #1]
   3a9ee:	2610      	movs	r6, #16
   3a9f0:	3502      	adds	r5, #2
   3a9f2:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   3a9f6:	f107 3bff 	add.w	fp, r7, #4294967295
   3a9fa:	ea4f 79e6 	mov.w	r9, r6, asr #31
   3a9fe:	4632      	mov	r2, r6
   3aa00:	f10a 3aff 	add.w	sl, sl, #4294967295
   3aa04:	4658      	mov	r0, fp
   3aa06:	464b      	mov	r3, r9
   3aa08:	4651      	mov	r1, sl
   3aa0a:	f7e2 fa6d 	bl	1cee8 <__aeabi_uldivmod>
   3aa0e:	2300      	movs	r3, #0
   3aa10:	468c      	mov	ip, r1
   3aa12:	9202      	str	r2, [sp, #8]
   3aa14:	4619      	mov	r1, r3
   3aa16:	4602      	mov	r2, r0
   3aa18:	4618      	mov	r0, r3
   3aa1a:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   3aa1e:	f1be 0f09 	cmp.w	lr, #9
   3aa22:	d823      	bhi.n	3aa6c <_strtoll_l.constprop.0+0xc0>
   3aa24:	4674      	mov	r4, lr
   3aa26:	42a6      	cmp	r6, r4
   3aa28:	dd31      	ble.n	3aa8e <_strtoll_l.constprop.0+0xe2>
   3aa2a:	f1b3 3fff 	cmp.w	r3, #4294967295
   3aa2e:	d015      	beq.n	3aa5c <_strtoll_l.constprop.0+0xb0>
   3aa30:	4282      	cmp	r2, r0
   3aa32:	eb7c 0301 	sbcs.w	r3, ip, r1
   3aa36:	d327      	bcc.n	3aa88 <_strtoll_l.constprop.0+0xdc>
   3aa38:	458c      	cmp	ip, r1
   3aa3a:	bf08      	it	eq
   3aa3c:	4282      	cmpeq	r2, r0
   3aa3e:	d102      	bne.n	3aa46 <_strtoll_l.constprop.0+0x9a>
   3aa40:	9b02      	ldr	r3, [sp, #8]
   3aa42:	42a3      	cmp	r3, r4
   3aa44:	db20      	blt.n	3aa88 <_strtoll_l.constprop.0+0xdc>
   3aa46:	4371      	muls	r1, r6
   3aa48:	fb00 1109 	mla	r1, r0, r9, r1
   3aa4c:	fba6 0300 	umull	r0, r3, r6, r0
   3aa50:	4419      	add	r1, r3
   3aa52:	1820      	adds	r0, r4, r0
   3aa54:	f04f 0301 	mov.w	r3, #1
   3aa58:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   3aa5c:	f815 4b01 	ldrb.w	r4, [r5], #1
   3aa60:	e7db      	b.n	3aa1a <_strtoll_l.constprop.0+0x6e>
   3aa62:	2c2b      	cmp	r4, #43	; 0x2b
   3aa64:	bf04      	itt	eq
   3aa66:	782c      	ldrbeq	r4, [r5, #0]
   3aa68:	1c9d      	addeq	r5, r3, #2
   3aa6a:	e7b4      	b.n	3a9d6 <_strtoll_l.constprop.0+0x2a>
   3aa6c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   3aa70:	f1be 0f19 	cmp.w	lr, #25
   3aa74:	d801      	bhi.n	3aa7a <_strtoll_l.constprop.0+0xce>
   3aa76:	3c37      	subs	r4, #55	; 0x37
   3aa78:	e7d5      	b.n	3aa26 <_strtoll_l.constprop.0+0x7a>
   3aa7a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   3aa7e:	f1be 0f19 	cmp.w	lr, #25
   3aa82:	d804      	bhi.n	3aa8e <_strtoll_l.constprop.0+0xe2>
   3aa84:	3c57      	subs	r4, #87	; 0x57
   3aa86:	e7ce      	b.n	3aa26 <_strtoll_l.constprop.0+0x7a>
   3aa88:	f04f 33ff 	mov.w	r3, #4294967295
   3aa8c:	e7e6      	b.n	3aa5c <_strtoll_l.constprop.0+0xb0>
   3aa8e:	1c5a      	adds	r2, r3, #1
   3aa90:	d109      	bne.n	3aaa6 <_strtoll_l.constprop.0+0xfa>
   3aa92:	2322      	movs	r3, #34	; 0x22
   3aa94:	9a03      	ldr	r2, [sp, #12]
   3aa96:	4658      	mov	r0, fp
   3aa98:	4651      	mov	r1, sl
   3aa9a:	6013      	str	r3, [r2, #0]
   3aa9c:	9b01      	ldr	r3, [sp, #4]
   3aa9e:	b953      	cbnz	r3, 3aab6 <_strtoll_l.constprop.0+0x10a>
   3aaa0:	b005      	add	sp, #20
   3aaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3aaa6:	b117      	cbz	r7, 3aaae <_strtoll_l.constprop.0+0x102>
   3aaa8:	4240      	negs	r0, r0
   3aaaa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   3aaae:	9a01      	ldr	r2, [sp, #4]
   3aab0:	2a00      	cmp	r2, #0
   3aab2:	d0f5      	beq.n	3aaa0 <_strtoll_l.constprop.0+0xf4>
   3aab4:	b10b      	cbz	r3, 3aaba <_strtoll_l.constprop.0+0x10e>
   3aab6:	f105 38ff 	add.w	r8, r5, #4294967295
   3aaba:	9b01      	ldr	r3, [sp, #4]
   3aabc:	f8c3 8000 	str.w	r8, [r3]
   3aac0:	e7ee      	b.n	3aaa0 <_strtoll_l.constprop.0+0xf4>
   3aac2:	2430      	movs	r4, #48	; 0x30
   3aac4:	2e00      	cmp	r6, #0
   3aac6:	d194      	bne.n	3a9f2 <_strtoll_l.constprop.0+0x46>
   3aac8:	2608      	movs	r6, #8
   3aaca:	e792      	b.n	3a9f2 <_strtoll_l.constprop.0+0x46>
   3aacc:	2c30      	cmp	r4, #48	; 0x30
   3aace:	d088      	beq.n	3a9e2 <_strtoll_l.constprop.0+0x36>
   3aad0:	260a      	movs	r6, #10
   3aad2:	e78e      	b.n	3a9f2 <_strtoll_l.constprop.0+0x46>
   3aad4:	0004bf0e 	.word	0x0004bf0e

0003aad8 <strtoll>:
   3aad8:	4613      	mov	r3, r2
   3aada:	460a      	mov	r2, r1
   3aadc:	4601      	mov	r1, r0
   3aade:	4802      	ldr	r0, [pc, #8]	; (3aae8 <strtoll+0x10>)
   3aae0:	6800      	ldr	r0, [r0, #0]
   3aae2:	f7ff bf63 	b.w	3a9ac <_strtoll_l.constprop.0>
   3aae6:	bf00      	nop
   3aae8:	20014a74 	.word	0x20014a74

0003aaec <_strtoul_l.constprop.0>:
   3aaec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3aaf0:	4686      	mov	lr, r0
   3aaf2:	460d      	mov	r5, r1
   3aaf4:	4f35      	ldr	r7, [pc, #212]	; (3abcc <_strtoul_l.constprop.0+0xe0>)
   3aaf6:	4628      	mov	r0, r5
   3aaf8:	f815 4b01 	ldrb.w	r4, [r5], #1
   3aafc:	5de6      	ldrb	r6, [r4, r7]
   3aafe:	f016 0608 	ands.w	r6, r6, #8
   3ab02:	d1f8      	bne.n	3aaf6 <_strtoul_l.constprop.0+0xa>
   3ab04:	2c2d      	cmp	r4, #45	; 0x2d
   3ab06:	d12f      	bne.n	3ab68 <_strtoul_l.constprop.0+0x7c>
   3ab08:	782c      	ldrb	r4, [r5, #0]
   3ab0a:	2601      	movs	r6, #1
   3ab0c:	1c85      	adds	r5, r0, #2
   3ab0e:	2b00      	cmp	r3, #0
   3ab10:	d057      	beq.n	3abc2 <_strtoul_l.constprop.0+0xd6>
   3ab12:	2b10      	cmp	r3, #16
   3ab14:	d109      	bne.n	3ab2a <_strtoul_l.constprop.0+0x3e>
   3ab16:	2c30      	cmp	r4, #48	; 0x30
   3ab18:	d107      	bne.n	3ab2a <_strtoul_l.constprop.0+0x3e>
   3ab1a:	7828      	ldrb	r0, [r5, #0]
   3ab1c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3ab20:	2858      	cmp	r0, #88	; 0x58
   3ab22:	d149      	bne.n	3abb8 <_strtoul_l.constprop.0+0xcc>
   3ab24:	786c      	ldrb	r4, [r5, #1]
   3ab26:	2310      	movs	r3, #16
   3ab28:	3502      	adds	r5, #2
   3ab2a:	f04f 38ff 	mov.w	r8, #4294967295
   3ab2e:	2700      	movs	r7, #0
   3ab30:	fbb8 f8f3 	udiv	r8, r8, r3
   3ab34:	fb03 f908 	mul.w	r9, r3, r8
   3ab38:	4638      	mov	r0, r7
   3ab3a:	ea6f 0909 	mvn.w	r9, r9
   3ab3e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   3ab42:	f1bc 0f09 	cmp.w	ip, #9
   3ab46:	d814      	bhi.n	3ab72 <_strtoul_l.constprop.0+0x86>
   3ab48:	4664      	mov	r4, ip
   3ab4a:	42a3      	cmp	r3, r4
   3ab4c:	dd22      	ble.n	3ab94 <_strtoul_l.constprop.0+0xa8>
   3ab4e:	2f00      	cmp	r7, #0
   3ab50:	db1d      	blt.n	3ab8e <_strtoul_l.constprop.0+0xa2>
   3ab52:	4580      	cmp	r8, r0
   3ab54:	d31b      	bcc.n	3ab8e <_strtoul_l.constprop.0+0xa2>
   3ab56:	d101      	bne.n	3ab5c <_strtoul_l.constprop.0+0x70>
   3ab58:	45a1      	cmp	r9, r4
   3ab5a:	db18      	blt.n	3ab8e <_strtoul_l.constprop.0+0xa2>
   3ab5c:	fb00 4003 	mla	r0, r0, r3, r4
   3ab60:	2701      	movs	r7, #1
   3ab62:	f815 4b01 	ldrb.w	r4, [r5], #1
   3ab66:	e7ea      	b.n	3ab3e <_strtoul_l.constprop.0+0x52>
   3ab68:	2c2b      	cmp	r4, #43	; 0x2b
   3ab6a:	bf04      	itt	eq
   3ab6c:	782c      	ldrbeq	r4, [r5, #0]
   3ab6e:	1c85      	addeq	r5, r0, #2
   3ab70:	e7cd      	b.n	3ab0e <_strtoul_l.constprop.0+0x22>
   3ab72:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   3ab76:	f1bc 0f19 	cmp.w	ip, #25
   3ab7a:	d801      	bhi.n	3ab80 <_strtoul_l.constprop.0+0x94>
   3ab7c:	3c37      	subs	r4, #55	; 0x37
   3ab7e:	e7e4      	b.n	3ab4a <_strtoul_l.constprop.0+0x5e>
   3ab80:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   3ab84:	f1bc 0f19 	cmp.w	ip, #25
   3ab88:	d804      	bhi.n	3ab94 <_strtoul_l.constprop.0+0xa8>
   3ab8a:	3c57      	subs	r4, #87	; 0x57
   3ab8c:	e7dd      	b.n	3ab4a <_strtoul_l.constprop.0+0x5e>
   3ab8e:	f04f 37ff 	mov.w	r7, #4294967295
   3ab92:	e7e6      	b.n	3ab62 <_strtoul_l.constprop.0+0x76>
   3ab94:	2f00      	cmp	r7, #0
   3ab96:	da07      	bge.n	3aba8 <_strtoul_l.constprop.0+0xbc>
   3ab98:	2322      	movs	r3, #34	; 0x22
   3ab9a:	f04f 30ff 	mov.w	r0, #4294967295
   3ab9e:	f8ce 3000 	str.w	r3, [lr]
   3aba2:	b932      	cbnz	r2, 3abb2 <_strtoul_l.constprop.0+0xc6>
   3aba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3aba8:	b106      	cbz	r6, 3abac <_strtoul_l.constprop.0+0xc0>
   3abaa:	4240      	negs	r0, r0
   3abac:	2a00      	cmp	r2, #0
   3abae:	d0f9      	beq.n	3aba4 <_strtoul_l.constprop.0+0xb8>
   3abb0:	b107      	cbz	r7, 3abb4 <_strtoul_l.constprop.0+0xc8>
   3abb2:	1e69      	subs	r1, r5, #1
   3abb4:	6011      	str	r1, [r2, #0]
   3abb6:	e7f5      	b.n	3aba4 <_strtoul_l.constprop.0+0xb8>
   3abb8:	2430      	movs	r4, #48	; 0x30
   3abba:	2b00      	cmp	r3, #0
   3abbc:	d1b5      	bne.n	3ab2a <_strtoul_l.constprop.0+0x3e>
   3abbe:	2308      	movs	r3, #8
   3abc0:	e7b3      	b.n	3ab2a <_strtoul_l.constprop.0+0x3e>
   3abc2:	2c30      	cmp	r4, #48	; 0x30
   3abc4:	d0a9      	beq.n	3ab1a <_strtoul_l.constprop.0+0x2e>
   3abc6:	230a      	movs	r3, #10
   3abc8:	e7af      	b.n	3ab2a <_strtoul_l.constprop.0+0x3e>
   3abca:	bf00      	nop
   3abcc:	0004bf0e 	.word	0x0004bf0e

0003abd0 <strtoul>:
   3abd0:	4613      	mov	r3, r2
   3abd2:	460a      	mov	r2, r1
   3abd4:	4601      	mov	r1, r0
   3abd6:	4802      	ldr	r0, [pc, #8]	; (3abe0 <strtoul+0x10>)
   3abd8:	6800      	ldr	r0, [r0, #0]
   3abda:	f7ff bf87 	b.w	3aaec <_strtoul_l.constprop.0>
   3abde:	bf00      	nop
   3abe0:	20014a74 	.word	0x20014a74

0003abe4 <vsniprintf>:
   3abe4:	b507      	push	{r0, r1, r2, lr}
   3abe6:	9300      	str	r3, [sp, #0]
   3abe8:	4613      	mov	r3, r2
   3abea:	460a      	mov	r2, r1
   3abec:	4601      	mov	r1, r0
   3abee:	4803      	ldr	r0, [pc, #12]	; (3abfc <vsniprintf+0x18>)
   3abf0:	6800      	ldr	r0, [r0, #0]
   3abf2:	f006 ff5b 	bl	41aac <_vsniprintf_r>
   3abf6:	b003      	add	sp, #12
   3abf8:	f85d fb04 	ldr.w	pc, [sp], #4
   3abfc:	20014a74 	.word	0x20014a74

0003ac00 <_vsiprintf_r>:
   3ac00:	b500      	push	{lr}
   3ac02:	b09b      	sub	sp, #108	; 0x6c
   3ac04:	9100      	str	r1, [sp, #0]
   3ac06:	9104      	str	r1, [sp, #16]
   3ac08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3ac0c:	9105      	str	r1, [sp, #20]
   3ac0e:	9102      	str	r1, [sp, #8]
   3ac10:	4905      	ldr	r1, [pc, #20]	; (3ac28 <_vsiprintf_r+0x28>)
   3ac12:	9103      	str	r1, [sp, #12]
   3ac14:	4669      	mov	r1, sp
   3ac16:	f001 f927 	bl	3be68 <_svfiprintf_r>
   3ac1a:	9b00      	ldr	r3, [sp, #0]
   3ac1c:	2200      	movs	r2, #0
   3ac1e:	701a      	strb	r2, [r3, #0]
   3ac20:	b01b      	add	sp, #108	; 0x6c
   3ac22:	f85d fb04 	ldr.w	pc, [sp], #4
   3ac26:	bf00      	nop
   3ac28:	ffff0208 	.word	0xffff0208

0003ac2c <vsiprintf>:
   3ac2c:	4613      	mov	r3, r2
   3ac2e:	460a      	mov	r2, r1
   3ac30:	4601      	mov	r1, r0
   3ac32:	4802      	ldr	r0, [pc, #8]	; (3ac3c <vsiprintf+0x10>)
   3ac34:	6800      	ldr	r0, [r0, #0]
   3ac36:	f7ff bfe3 	b.w	3ac00 <_vsiprintf_r>
   3ac3a:	bf00      	nop
   3ac3c:	20014a74 	.word	0x20014a74

0003ac40 <_vsiscanf_r>:
   3ac40:	b510      	push	{r4, lr}
   3ac42:	4604      	mov	r4, r0
   3ac44:	b09c      	sub	sp, #112	; 0x70
   3ac46:	f44f 7001 	mov.w	r0, #516	; 0x204
   3ac4a:	9102      	str	r1, [sp, #8]
   3ac4c:	f8ad 0014 	strh.w	r0, [sp, #20]
   3ac50:	4608      	mov	r0, r1
   3ac52:	9106      	str	r1, [sp, #24]
   3ac54:	e9cd 3200 	strd	r3, r2, [sp]
   3ac58:	f7e2 faf3 	bl	1d242 <strlen>
   3ac5c:	4909      	ldr	r1, [pc, #36]	; (3ac84 <_vsiscanf_r+0x44>)
   3ac5e:	9003      	str	r0, [sp, #12]
   3ac60:	910b      	str	r1, [sp, #44]	; 0x2c
   3ac62:	2100      	movs	r1, #0
   3ac64:	9007      	str	r0, [sp, #28]
   3ac66:	4620      	mov	r0, r4
   3ac68:	910f      	str	r1, [sp, #60]	; 0x3c
   3ac6a:	9114      	str	r1, [sp, #80]	; 0x50
   3ac6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3ac70:	e9dd 3200 	ldrd	r3, r2, [sp]
   3ac74:	f8ad 1016 	strh.w	r1, [sp, #22]
   3ac78:	a902      	add	r1, sp, #8
   3ac7a:	f001 f9f5 	bl	3c068 <__ssvfiscanf_r>
   3ac7e:	b01c      	add	sp, #112	; 0x70
   3ac80:	bd10      	pop	{r4, pc}
   3ac82:	bf00      	nop
   3ac84:	000418f9 	.word	0x000418f9

0003ac88 <vsiscanf>:
   3ac88:	4613      	mov	r3, r2
   3ac8a:	460a      	mov	r2, r1
   3ac8c:	4601      	mov	r1, r0
   3ac8e:	4802      	ldr	r0, [pc, #8]	; (3ac98 <vsiscanf+0x10>)
   3ac90:	6800      	ldr	r0, [r0, #0]
   3ac92:	f7ff bfd5 	b.w	3ac40 <_vsiscanf_r>
   3ac96:	bf00      	nop
   3ac98:	20014a74 	.word	0x20014a74

0003ac9c <__swbuf_r>:
   3ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ac9e:	460e      	mov	r6, r1
   3aca0:	4614      	mov	r4, r2
   3aca2:	4605      	mov	r5, r0
   3aca4:	b118      	cbz	r0, 3acae <__swbuf_r+0x12>
   3aca6:	6983      	ldr	r3, [r0, #24]
   3aca8:	b90b      	cbnz	r3, 3acae <__swbuf_r+0x12>
   3acaa:	f000 f9db 	bl	3b064 <__sinit>
   3acae:	4b21      	ldr	r3, [pc, #132]	; (3ad34 <__swbuf_r+0x98>)
   3acb0:	429c      	cmp	r4, r3
   3acb2:	d12b      	bne.n	3ad0c <__swbuf_r+0x70>
   3acb4:	686c      	ldr	r4, [r5, #4]
   3acb6:	69a3      	ldr	r3, [r4, #24]
   3acb8:	60a3      	str	r3, [r4, #8]
   3acba:	89a3      	ldrh	r3, [r4, #12]
   3acbc:	071a      	lsls	r2, r3, #28
   3acbe:	d52f      	bpl.n	3ad20 <__swbuf_r+0x84>
   3acc0:	6923      	ldr	r3, [r4, #16]
   3acc2:	b36b      	cbz	r3, 3ad20 <__swbuf_r+0x84>
   3acc4:	6923      	ldr	r3, [r4, #16]
   3acc6:	b2f6      	uxtb	r6, r6
   3acc8:	6820      	ldr	r0, [r4, #0]
   3acca:	4637      	mov	r7, r6
   3accc:	1ac0      	subs	r0, r0, r3
   3acce:	6963      	ldr	r3, [r4, #20]
   3acd0:	4283      	cmp	r3, r0
   3acd2:	dc04      	bgt.n	3acde <__swbuf_r+0x42>
   3acd4:	4621      	mov	r1, r4
   3acd6:	4628      	mov	r0, r5
   3acd8:	f000 f946 	bl	3af68 <_fflush_r>
   3acdc:	bb30      	cbnz	r0, 3ad2c <__swbuf_r+0x90>
   3acde:	68a3      	ldr	r3, [r4, #8]
   3ace0:	3001      	adds	r0, #1
   3ace2:	3b01      	subs	r3, #1
   3ace4:	60a3      	str	r3, [r4, #8]
   3ace6:	6823      	ldr	r3, [r4, #0]
   3ace8:	1c5a      	adds	r2, r3, #1
   3acea:	6022      	str	r2, [r4, #0]
   3acec:	701e      	strb	r6, [r3, #0]
   3acee:	6963      	ldr	r3, [r4, #20]
   3acf0:	4283      	cmp	r3, r0
   3acf2:	d004      	beq.n	3acfe <__swbuf_r+0x62>
   3acf4:	89a3      	ldrh	r3, [r4, #12]
   3acf6:	07db      	lsls	r3, r3, #31
   3acf8:	d506      	bpl.n	3ad08 <__swbuf_r+0x6c>
   3acfa:	2e0a      	cmp	r6, #10
   3acfc:	d104      	bne.n	3ad08 <__swbuf_r+0x6c>
   3acfe:	4621      	mov	r1, r4
   3ad00:	4628      	mov	r0, r5
   3ad02:	f000 f931 	bl	3af68 <_fflush_r>
   3ad06:	b988      	cbnz	r0, 3ad2c <__swbuf_r+0x90>
   3ad08:	4638      	mov	r0, r7
   3ad0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3ad0c:	4b0a      	ldr	r3, [pc, #40]	; (3ad38 <__swbuf_r+0x9c>)
   3ad0e:	429c      	cmp	r4, r3
   3ad10:	d101      	bne.n	3ad16 <__swbuf_r+0x7a>
   3ad12:	68ac      	ldr	r4, [r5, #8]
   3ad14:	e7cf      	b.n	3acb6 <__swbuf_r+0x1a>
   3ad16:	4b09      	ldr	r3, [pc, #36]	; (3ad3c <__swbuf_r+0xa0>)
   3ad18:	429c      	cmp	r4, r3
   3ad1a:	bf08      	it	eq
   3ad1c:	68ec      	ldreq	r4, [r5, #12]
   3ad1e:	e7ca      	b.n	3acb6 <__swbuf_r+0x1a>
   3ad20:	4621      	mov	r1, r4
   3ad22:	4628      	mov	r0, r5
   3ad24:	f000 f81e 	bl	3ad64 <__swsetup_r>
   3ad28:	2800      	cmp	r0, #0
   3ad2a:	d0cb      	beq.n	3acc4 <__swbuf_r+0x28>
   3ad2c:	f04f 37ff 	mov.w	r7, #4294967295
   3ad30:	e7ea      	b.n	3ad08 <__swbuf_r+0x6c>
   3ad32:	bf00      	nop
   3ad34:	0004361c 	.word	0x0004361c
   3ad38:	0004363c 	.word	0x0004363c
   3ad3c:	000435fc 	.word	0x000435fc

0003ad40 <_write_r>:
   3ad40:	b538      	push	{r3, r4, r5, lr}
   3ad42:	4604      	mov	r4, r0
   3ad44:	4d06      	ldr	r5, [pc, #24]	; (3ad60 <_write_r+0x20>)
   3ad46:	4608      	mov	r0, r1
   3ad48:	4611      	mov	r1, r2
   3ad4a:	2200      	movs	r2, #0
   3ad4c:	602a      	str	r2, [r5, #0]
   3ad4e:	461a      	mov	r2, r3
   3ad50:	f002 fde5 	bl	3d91e <_write>
   3ad54:	1c43      	adds	r3, r0, #1
   3ad56:	d102      	bne.n	3ad5e <_write_r+0x1e>
   3ad58:	682b      	ldr	r3, [r5, #0]
   3ad5a:	b103      	cbz	r3, 3ad5e <_write_r+0x1e>
   3ad5c:	6023      	str	r3, [r4, #0]
   3ad5e:	bd38      	pop	{r3, r4, r5, pc}
   3ad60:	2001a568 	.word	0x2001a568

0003ad64 <__swsetup_r>:
   3ad64:	4b32      	ldr	r3, [pc, #200]	; (3ae30 <__swsetup_r+0xcc>)
   3ad66:	b570      	push	{r4, r5, r6, lr}
   3ad68:	681d      	ldr	r5, [r3, #0]
   3ad6a:	4606      	mov	r6, r0
   3ad6c:	460c      	mov	r4, r1
   3ad6e:	b125      	cbz	r5, 3ad7a <__swsetup_r+0x16>
   3ad70:	69ab      	ldr	r3, [r5, #24]
   3ad72:	b913      	cbnz	r3, 3ad7a <__swsetup_r+0x16>
   3ad74:	4628      	mov	r0, r5
   3ad76:	f000 f975 	bl	3b064 <__sinit>
   3ad7a:	4b2e      	ldr	r3, [pc, #184]	; (3ae34 <__swsetup_r+0xd0>)
   3ad7c:	429c      	cmp	r4, r3
   3ad7e:	d10f      	bne.n	3ada0 <__swsetup_r+0x3c>
   3ad80:	686c      	ldr	r4, [r5, #4]
   3ad82:	89a3      	ldrh	r3, [r4, #12]
   3ad84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3ad88:	0719      	lsls	r1, r3, #28
   3ad8a:	d42c      	bmi.n	3ade6 <__swsetup_r+0x82>
   3ad8c:	06dd      	lsls	r5, r3, #27
   3ad8e:	d411      	bmi.n	3adb4 <__swsetup_r+0x50>
   3ad90:	2309      	movs	r3, #9
   3ad92:	6033      	str	r3, [r6, #0]
   3ad94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   3ad98:	f04f 30ff 	mov.w	r0, #4294967295
   3ad9c:	81a3      	strh	r3, [r4, #12]
   3ad9e:	e03e      	b.n	3ae1e <__swsetup_r+0xba>
   3ada0:	4b25      	ldr	r3, [pc, #148]	; (3ae38 <__swsetup_r+0xd4>)
   3ada2:	429c      	cmp	r4, r3
   3ada4:	d101      	bne.n	3adaa <__swsetup_r+0x46>
   3ada6:	68ac      	ldr	r4, [r5, #8]
   3ada8:	e7eb      	b.n	3ad82 <__swsetup_r+0x1e>
   3adaa:	4b24      	ldr	r3, [pc, #144]	; (3ae3c <__swsetup_r+0xd8>)
   3adac:	429c      	cmp	r4, r3
   3adae:	bf08      	it	eq
   3adb0:	68ec      	ldreq	r4, [r5, #12]
   3adb2:	e7e6      	b.n	3ad82 <__swsetup_r+0x1e>
   3adb4:	0758      	lsls	r0, r3, #29
   3adb6:	d512      	bpl.n	3adde <__swsetup_r+0x7a>
   3adb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3adba:	b141      	cbz	r1, 3adce <__swsetup_r+0x6a>
   3adbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3adc0:	4299      	cmp	r1, r3
   3adc2:	d002      	beq.n	3adca <__swsetup_r+0x66>
   3adc4:	4630      	mov	r0, r6
   3adc6:	f7fe ff95 	bl	39cf4 <_free_r>
   3adca:	2300      	movs	r3, #0
   3adcc:	6363      	str	r3, [r4, #52]	; 0x34
   3adce:	89a3      	ldrh	r3, [r4, #12]
   3add0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   3add4:	81a3      	strh	r3, [r4, #12]
   3add6:	2300      	movs	r3, #0
   3add8:	6063      	str	r3, [r4, #4]
   3adda:	6923      	ldr	r3, [r4, #16]
   3addc:	6023      	str	r3, [r4, #0]
   3adde:	89a3      	ldrh	r3, [r4, #12]
   3ade0:	f043 0308 	orr.w	r3, r3, #8
   3ade4:	81a3      	strh	r3, [r4, #12]
   3ade6:	6923      	ldr	r3, [r4, #16]
   3ade8:	b94b      	cbnz	r3, 3adfe <__swsetup_r+0x9a>
   3adea:	89a3      	ldrh	r3, [r4, #12]
   3adec:	f403 7320 	and.w	r3, r3, #640	; 0x280
   3adf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3adf4:	d003      	beq.n	3adfe <__swsetup_r+0x9a>
   3adf6:	4621      	mov	r1, r4
   3adf8:	4630      	mov	r0, r6
   3adfa:	f000 fc0d 	bl	3b618 <__smakebuf_r>
   3adfe:	89a0      	ldrh	r0, [r4, #12]
   3ae00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3ae04:	f010 0301 	ands.w	r3, r0, #1
   3ae08:	d00a      	beq.n	3ae20 <__swsetup_r+0xbc>
   3ae0a:	2300      	movs	r3, #0
   3ae0c:	60a3      	str	r3, [r4, #8]
   3ae0e:	6963      	ldr	r3, [r4, #20]
   3ae10:	425b      	negs	r3, r3
   3ae12:	61a3      	str	r3, [r4, #24]
   3ae14:	6923      	ldr	r3, [r4, #16]
   3ae16:	b943      	cbnz	r3, 3ae2a <__swsetup_r+0xc6>
   3ae18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   3ae1c:	d1ba      	bne.n	3ad94 <__swsetup_r+0x30>
   3ae1e:	bd70      	pop	{r4, r5, r6, pc}
   3ae20:	0781      	lsls	r1, r0, #30
   3ae22:	bf58      	it	pl
   3ae24:	6963      	ldrpl	r3, [r4, #20]
   3ae26:	60a3      	str	r3, [r4, #8]
   3ae28:	e7f4      	b.n	3ae14 <__swsetup_r+0xb0>
   3ae2a:	2000      	movs	r0, #0
   3ae2c:	e7f7      	b.n	3ae1e <__swsetup_r+0xba>
   3ae2e:	bf00      	nop
   3ae30:	20014a74 	.word	0x20014a74
   3ae34:	0004361c 	.word	0x0004361c
   3ae38:	0004363c 	.word	0x0004363c
   3ae3c:	000435fc 	.word	0x000435fc

0003ae40 <_close_r>:
   3ae40:	b538      	push	{r3, r4, r5, lr}
   3ae42:	2300      	movs	r3, #0
   3ae44:	4d05      	ldr	r5, [pc, #20]	; (3ae5c <_close_r+0x1c>)
   3ae46:	4604      	mov	r4, r0
   3ae48:	4608      	mov	r0, r1
   3ae4a:	602b      	str	r3, [r5, #0]
   3ae4c:	f002 fd6b 	bl	3d926 <_close>
   3ae50:	1c43      	adds	r3, r0, #1
   3ae52:	d102      	bne.n	3ae5a <_close_r+0x1a>
   3ae54:	682b      	ldr	r3, [r5, #0]
   3ae56:	b103      	cbz	r3, 3ae5a <_close_r+0x1a>
   3ae58:	6023      	str	r3, [r4, #0]
   3ae5a:	bd38      	pop	{r3, r4, r5, pc}
   3ae5c:	2001a568 	.word	0x2001a568

0003ae60 <__sflush_r>:
   3ae60:	898a      	ldrh	r2, [r1, #12]
   3ae62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ae66:	4605      	mov	r5, r0
   3ae68:	0710      	lsls	r0, r2, #28
   3ae6a:	460c      	mov	r4, r1
   3ae6c:	d458      	bmi.n	3af20 <__sflush_r+0xc0>
   3ae6e:	684b      	ldr	r3, [r1, #4]
   3ae70:	2b00      	cmp	r3, #0
   3ae72:	dc05      	bgt.n	3ae80 <__sflush_r+0x20>
   3ae74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3ae76:	2b00      	cmp	r3, #0
   3ae78:	dc02      	bgt.n	3ae80 <__sflush_r+0x20>
   3ae7a:	2000      	movs	r0, #0
   3ae7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ae80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3ae82:	2e00      	cmp	r6, #0
   3ae84:	d0f9      	beq.n	3ae7a <__sflush_r+0x1a>
   3ae86:	2300      	movs	r3, #0
   3ae88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3ae8c:	682f      	ldr	r7, [r5, #0]
   3ae8e:	602b      	str	r3, [r5, #0]
   3ae90:	d032      	beq.n	3aef8 <__sflush_r+0x98>
   3ae92:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3ae94:	89a3      	ldrh	r3, [r4, #12]
   3ae96:	075a      	lsls	r2, r3, #29
   3ae98:	d505      	bpl.n	3aea6 <__sflush_r+0x46>
   3ae9a:	6863      	ldr	r3, [r4, #4]
   3ae9c:	1ac0      	subs	r0, r0, r3
   3ae9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3aea0:	b10b      	cbz	r3, 3aea6 <__sflush_r+0x46>
   3aea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3aea4:	1ac0      	subs	r0, r0, r3
   3aea6:	2300      	movs	r3, #0
   3aea8:	4602      	mov	r2, r0
   3aeaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3aeac:	4628      	mov	r0, r5
   3aeae:	6a21      	ldr	r1, [r4, #32]
   3aeb0:	47b0      	blx	r6
   3aeb2:	1c43      	adds	r3, r0, #1
   3aeb4:	89a3      	ldrh	r3, [r4, #12]
   3aeb6:	d106      	bne.n	3aec6 <__sflush_r+0x66>
   3aeb8:	6829      	ldr	r1, [r5, #0]
   3aeba:	291d      	cmp	r1, #29
   3aebc:	d82c      	bhi.n	3af18 <__sflush_r+0xb8>
   3aebe:	4a29      	ldr	r2, [pc, #164]	; (3af64 <__sflush_r+0x104>)
   3aec0:	40ca      	lsrs	r2, r1
   3aec2:	07d6      	lsls	r6, r2, #31
   3aec4:	d528      	bpl.n	3af18 <__sflush_r+0xb8>
   3aec6:	2200      	movs	r2, #0
   3aec8:	04d9      	lsls	r1, r3, #19
   3aeca:	6062      	str	r2, [r4, #4]
   3aecc:	6922      	ldr	r2, [r4, #16]
   3aece:	6022      	str	r2, [r4, #0]
   3aed0:	d504      	bpl.n	3aedc <__sflush_r+0x7c>
   3aed2:	1c42      	adds	r2, r0, #1
   3aed4:	d101      	bne.n	3aeda <__sflush_r+0x7a>
   3aed6:	682b      	ldr	r3, [r5, #0]
   3aed8:	b903      	cbnz	r3, 3aedc <__sflush_r+0x7c>
   3aeda:	6560      	str	r0, [r4, #84]	; 0x54
   3aedc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3aede:	602f      	str	r7, [r5, #0]
   3aee0:	2900      	cmp	r1, #0
   3aee2:	d0ca      	beq.n	3ae7a <__sflush_r+0x1a>
   3aee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3aee8:	4299      	cmp	r1, r3
   3aeea:	d002      	beq.n	3aef2 <__sflush_r+0x92>
   3aeec:	4628      	mov	r0, r5
   3aeee:	f7fe ff01 	bl	39cf4 <_free_r>
   3aef2:	2000      	movs	r0, #0
   3aef4:	6360      	str	r0, [r4, #52]	; 0x34
   3aef6:	e7c1      	b.n	3ae7c <__sflush_r+0x1c>
   3aef8:	6a21      	ldr	r1, [r4, #32]
   3aefa:	2301      	movs	r3, #1
   3aefc:	4628      	mov	r0, r5
   3aefe:	47b0      	blx	r6
   3af00:	1c41      	adds	r1, r0, #1
   3af02:	d1c7      	bne.n	3ae94 <__sflush_r+0x34>
   3af04:	682b      	ldr	r3, [r5, #0]
   3af06:	2b00      	cmp	r3, #0
   3af08:	d0c4      	beq.n	3ae94 <__sflush_r+0x34>
   3af0a:	2b1d      	cmp	r3, #29
   3af0c:	d001      	beq.n	3af12 <__sflush_r+0xb2>
   3af0e:	2b16      	cmp	r3, #22
   3af10:	d101      	bne.n	3af16 <__sflush_r+0xb6>
   3af12:	602f      	str	r7, [r5, #0]
   3af14:	e7b1      	b.n	3ae7a <__sflush_r+0x1a>
   3af16:	89a3      	ldrh	r3, [r4, #12]
   3af18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3af1c:	81a3      	strh	r3, [r4, #12]
   3af1e:	e7ad      	b.n	3ae7c <__sflush_r+0x1c>
   3af20:	690f      	ldr	r7, [r1, #16]
   3af22:	2f00      	cmp	r7, #0
   3af24:	d0a9      	beq.n	3ae7a <__sflush_r+0x1a>
   3af26:	0793      	lsls	r3, r2, #30
   3af28:	680e      	ldr	r6, [r1, #0]
   3af2a:	600f      	str	r7, [r1, #0]
   3af2c:	bf0c      	ite	eq
   3af2e:	694b      	ldreq	r3, [r1, #20]
   3af30:	2300      	movne	r3, #0
   3af32:	eba6 0807 	sub.w	r8, r6, r7
   3af36:	608b      	str	r3, [r1, #8]
   3af38:	f1b8 0f00 	cmp.w	r8, #0
   3af3c:	dd9d      	ble.n	3ae7a <__sflush_r+0x1a>
   3af3e:	4643      	mov	r3, r8
   3af40:	463a      	mov	r2, r7
   3af42:	6a21      	ldr	r1, [r4, #32]
   3af44:	4628      	mov	r0, r5
   3af46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3af48:	47b0      	blx	r6
   3af4a:	2800      	cmp	r0, #0
   3af4c:	dc06      	bgt.n	3af5c <__sflush_r+0xfc>
   3af4e:	89a3      	ldrh	r3, [r4, #12]
   3af50:	f04f 30ff 	mov.w	r0, #4294967295
   3af54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3af58:	81a3      	strh	r3, [r4, #12]
   3af5a:	e78f      	b.n	3ae7c <__sflush_r+0x1c>
   3af5c:	4407      	add	r7, r0
   3af5e:	eba8 0800 	sub.w	r8, r8, r0
   3af62:	e7e9      	b.n	3af38 <__sflush_r+0xd8>
   3af64:	20400001 	.word	0x20400001

0003af68 <_fflush_r>:
   3af68:	b538      	push	{r3, r4, r5, lr}
   3af6a:	690b      	ldr	r3, [r1, #16]
   3af6c:	4605      	mov	r5, r0
   3af6e:	460c      	mov	r4, r1
   3af70:	b913      	cbnz	r3, 3af78 <_fflush_r+0x10>
   3af72:	2500      	movs	r5, #0
   3af74:	4628      	mov	r0, r5
   3af76:	bd38      	pop	{r3, r4, r5, pc}
   3af78:	b118      	cbz	r0, 3af82 <_fflush_r+0x1a>
   3af7a:	6983      	ldr	r3, [r0, #24]
   3af7c:	b90b      	cbnz	r3, 3af82 <_fflush_r+0x1a>
   3af7e:	f000 f871 	bl	3b064 <__sinit>
   3af82:	4b14      	ldr	r3, [pc, #80]	; (3afd4 <_fflush_r+0x6c>)
   3af84:	429c      	cmp	r4, r3
   3af86:	d11b      	bne.n	3afc0 <_fflush_r+0x58>
   3af88:	686c      	ldr	r4, [r5, #4]
   3af8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3af8e:	2b00      	cmp	r3, #0
   3af90:	d0ef      	beq.n	3af72 <_fflush_r+0xa>
   3af92:	6e62      	ldr	r2, [r4, #100]	; 0x64
   3af94:	07d0      	lsls	r0, r2, #31
   3af96:	d404      	bmi.n	3afa2 <_fflush_r+0x3a>
   3af98:	0599      	lsls	r1, r3, #22
   3af9a:	d402      	bmi.n	3afa2 <_fflush_r+0x3a>
   3af9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3af9e:	f7e8 fd65 	bl	23a6c <__retarget_lock_acquire_recursive>
   3afa2:	4628      	mov	r0, r5
   3afa4:	4621      	mov	r1, r4
   3afa6:	f7ff ff5b 	bl	3ae60 <__sflush_r>
   3afaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3afac:	4605      	mov	r5, r0
   3afae:	07da      	lsls	r2, r3, #31
   3afb0:	d4e0      	bmi.n	3af74 <_fflush_r+0xc>
   3afb2:	89a3      	ldrh	r3, [r4, #12]
   3afb4:	059b      	lsls	r3, r3, #22
   3afb6:	d4dd      	bmi.n	3af74 <_fflush_r+0xc>
   3afb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3afba:	f7e8 fd73 	bl	23aa4 <__retarget_lock_release_recursive>
   3afbe:	e7d9      	b.n	3af74 <_fflush_r+0xc>
   3afc0:	4b05      	ldr	r3, [pc, #20]	; (3afd8 <_fflush_r+0x70>)
   3afc2:	429c      	cmp	r4, r3
   3afc4:	d101      	bne.n	3afca <_fflush_r+0x62>
   3afc6:	68ac      	ldr	r4, [r5, #8]
   3afc8:	e7df      	b.n	3af8a <_fflush_r+0x22>
   3afca:	4b04      	ldr	r3, [pc, #16]	; (3afdc <_fflush_r+0x74>)
   3afcc:	429c      	cmp	r4, r3
   3afce:	bf08      	it	eq
   3afd0:	68ec      	ldreq	r4, [r5, #12]
   3afd2:	e7da      	b.n	3af8a <_fflush_r+0x22>
   3afd4:	0004361c 	.word	0x0004361c
   3afd8:	0004363c 	.word	0x0004363c
   3afdc:	000435fc 	.word	0x000435fc

0003afe0 <std>:
   3afe0:	2300      	movs	r3, #0
   3afe2:	b510      	push	{r4, lr}
   3afe4:	4604      	mov	r4, r0
   3afe6:	6083      	str	r3, [r0, #8]
   3afe8:	8181      	strh	r1, [r0, #12]
   3afea:	4619      	mov	r1, r3
   3afec:	6643      	str	r3, [r0, #100]	; 0x64
   3afee:	81c2      	strh	r2, [r0, #14]
   3aff0:	2208      	movs	r2, #8
   3aff2:	6183      	str	r3, [r0, #24]
   3aff4:	e9c0 3300 	strd	r3, r3, [r0]
   3aff8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   3affc:	305c      	adds	r0, #92	; 0x5c
   3affe:	f006 fb00 	bl	41602 <memset>
   3b002:	4b05      	ldr	r3, [pc, #20]	; (3b018 <std+0x38>)
   3b004:	6224      	str	r4, [r4, #32]
   3b006:	6263      	str	r3, [r4, #36]	; 0x24
   3b008:	4b04      	ldr	r3, [pc, #16]	; (3b01c <std+0x3c>)
   3b00a:	62a3      	str	r3, [r4, #40]	; 0x28
   3b00c:	4b04      	ldr	r3, [pc, #16]	; (3b020 <std+0x40>)
   3b00e:	62e3      	str	r3, [r4, #44]	; 0x2c
   3b010:	4b04      	ldr	r3, [pc, #16]	; (3b024 <std+0x44>)
   3b012:	6323      	str	r3, [r4, #48]	; 0x30
   3b014:	bd10      	pop	{r4, pc}
   3b016:	bf00      	nop
   3b018:	000418d7 	.word	0x000418d7
   3b01c:	000418fd 	.word	0x000418fd
   3b020:	00041935 	.word	0x00041935
   3b024:	00041959 	.word	0x00041959

0003b028 <_cleanup_r>:
   3b028:	4901      	ldr	r1, [pc, #4]	; (3b030 <_cleanup_r+0x8>)
   3b02a:	f006 be16 	b.w	41c5a <_fwalk_reent>
   3b02e:	bf00      	nop
   3b030:	0003af69 	.word	0x0003af69

0003b034 <__sfp_lock_acquire>:
   3b034:	4801      	ldr	r0, [pc, #4]	; (3b03c <__sfp_lock_acquire+0x8>)
   3b036:	f7e8 bd19 	b.w	23a6c <__retarget_lock_acquire_recursive>
   3b03a:	bf00      	nop
   3b03c:	20014edc 	.word	0x20014edc

0003b040 <__sfp_lock_release>:
   3b040:	4801      	ldr	r0, [pc, #4]	; (3b048 <__sfp_lock_release+0x8>)
   3b042:	f7e8 bd2f 	b.w	23aa4 <__retarget_lock_release_recursive>
   3b046:	bf00      	nop
   3b048:	20014edc 	.word	0x20014edc

0003b04c <__sinit_lock_acquire>:
   3b04c:	4801      	ldr	r0, [pc, #4]	; (3b054 <__sinit_lock_acquire+0x8>)
   3b04e:	f7e8 bd0d 	b.w	23a6c <__retarget_lock_acquire_recursive>
   3b052:	bf00      	nop
   3b054:	20014ef0 	.word	0x20014ef0

0003b058 <__sinit_lock_release>:
   3b058:	4801      	ldr	r0, [pc, #4]	; (3b060 <__sinit_lock_release+0x8>)
   3b05a:	f7e8 bd23 	b.w	23aa4 <__retarget_lock_release_recursive>
   3b05e:	bf00      	nop
   3b060:	20014ef0 	.word	0x20014ef0

0003b064 <__sinit>:
   3b064:	b510      	push	{r4, lr}
   3b066:	4604      	mov	r4, r0
   3b068:	f7ff fff0 	bl	3b04c <__sinit_lock_acquire>
   3b06c:	69a3      	ldr	r3, [r4, #24]
   3b06e:	b11b      	cbz	r3, 3b078 <__sinit+0x14>
   3b070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3b074:	f7ff bff0 	b.w	3b058 <__sinit_lock_release>
   3b078:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   3b07c:	6523      	str	r3, [r4, #80]	; 0x50
   3b07e:	4620      	mov	r0, r4
   3b080:	4b12      	ldr	r3, [pc, #72]	; (3b0cc <__sinit+0x68>)
   3b082:	4a13      	ldr	r2, [pc, #76]	; (3b0d0 <__sinit+0x6c>)
   3b084:	681b      	ldr	r3, [r3, #0]
   3b086:	62a2      	str	r2, [r4, #40]	; 0x28
   3b088:	42a3      	cmp	r3, r4
   3b08a:	bf04      	itt	eq
   3b08c:	2301      	moveq	r3, #1
   3b08e:	61a3      	streq	r3, [r4, #24]
   3b090:	f000 f820 	bl	3b0d4 <__sfp>
   3b094:	6060      	str	r0, [r4, #4]
   3b096:	4620      	mov	r0, r4
   3b098:	f000 f81c 	bl	3b0d4 <__sfp>
   3b09c:	60a0      	str	r0, [r4, #8]
   3b09e:	4620      	mov	r0, r4
   3b0a0:	f000 f818 	bl	3b0d4 <__sfp>
   3b0a4:	2200      	movs	r2, #0
   3b0a6:	2104      	movs	r1, #4
   3b0a8:	60e0      	str	r0, [r4, #12]
   3b0aa:	6860      	ldr	r0, [r4, #4]
   3b0ac:	f7ff ff98 	bl	3afe0 <std>
   3b0b0:	2201      	movs	r2, #1
   3b0b2:	2109      	movs	r1, #9
   3b0b4:	68a0      	ldr	r0, [r4, #8]
   3b0b6:	f7ff ff93 	bl	3afe0 <std>
   3b0ba:	2202      	movs	r2, #2
   3b0bc:	2112      	movs	r1, #18
   3b0be:	68e0      	ldr	r0, [r4, #12]
   3b0c0:	f7ff ff8e 	bl	3afe0 <std>
   3b0c4:	2301      	movs	r3, #1
   3b0c6:	61a3      	str	r3, [r4, #24]
   3b0c8:	e7d2      	b.n	3b070 <__sinit+0xc>
   3b0ca:	bf00      	nop
   3b0cc:	000435d0 	.word	0x000435d0
   3b0d0:	0003b029 	.word	0x0003b029

0003b0d4 <__sfp>:
   3b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b0d6:	4607      	mov	r7, r0
   3b0d8:	f7ff ffac 	bl	3b034 <__sfp_lock_acquire>
   3b0dc:	4b1e      	ldr	r3, [pc, #120]	; (3b158 <__sfp+0x84>)
   3b0de:	681e      	ldr	r6, [r3, #0]
   3b0e0:	69b3      	ldr	r3, [r6, #24]
   3b0e2:	b913      	cbnz	r3, 3b0ea <__sfp+0x16>
   3b0e4:	4630      	mov	r0, r6
   3b0e6:	f7ff ffbd 	bl	3b064 <__sinit>
   3b0ea:	3648      	adds	r6, #72	; 0x48
   3b0ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   3b0f0:	3b01      	subs	r3, #1
   3b0f2:	d503      	bpl.n	3b0fc <__sfp+0x28>
   3b0f4:	6833      	ldr	r3, [r6, #0]
   3b0f6:	b30b      	cbz	r3, 3b13c <__sfp+0x68>
   3b0f8:	6836      	ldr	r6, [r6, #0]
   3b0fa:	e7f7      	b.n	3b0ec <__sfp+0x18>
   3b0fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   3b100:	b9d5      	cbnz	r5, 3b138 <__sfp+0x64>
   3b102:	4b16      	ldr	r3, [pc, #88]	; (3b15c <__sfp+0x88>)
   3b104:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3b108:	6665      	str	r5, [r4, #100]	; 0x64
   3b10a:	60e3      	str	r3, [r4, #12]
   3b10c:	f7e8 fc86 	bl	23a1c <__retarget_lock_init_recursive>
   3b110:	f7ff ff96 	bl	3b040 <__sfp_lock_release>
   3b114:	2208      	movs	r2, #8
   3b116:	4629      	mov	r1, r5
   3b118:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   3b11c:	6025      	str	r5, [r4, #0]
   3b11e:	61a5      	str	r5, [r4, #24]
   3b120:	e9c4 5501 	strd	r5, r5, [r4, #4]
   3b124:	e9c4 5504 	strd	r5, r5, [r4, #16]
   3b128:	f006 fa6b 	bl	41602 <memset>
   3b12c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   3b130:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   3b134:	4620      	mov	r0, r4
   3b136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b138:	3468      	adds	r4, #104	; 0x68
   3b13a:	e7d9      	b.n	3b0f0 <__sfp+0x1c>
   3b13c:	2104      	movs	r1, #4
   3b13e:	4638      	mov	r0, r7
   3b140:	f006 fd75 	bl	41c2e <__sfmoreglue>
   3b144:	4604      	mov	r4, r0
   3b146:	6030      	str	r0, [r6, #0]
   3b148:	2800      	cmp	r0, #0
   3b14a:	d1d5      	bne.n	3b0f8 <__sfp+0x24>
   3b14c:	f7ff ff78 	bl	3b040 <__sfp_lock_release>
   3b150:	230c      	movs	r3, #12
   3b152:	603b      	str	r3, [r7, #0]
   3b154:	e7ee      	b.n	3b134 <__sfp+0x60>
   3b156:	bf00      	nop
   3b158:	000435d0 	.word	0x000435d0
   3b15c:	ffff0001 	.word	0xffff0001

0003b160 <__gethex>:
   3b160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b164:	ed2d 8b02 	vpush	{d8}
   3b168:	b089      	sub	sp, #36	; 0x24
   3b16a:	ee08 0a10 	vmov	s16, r0
   3b16e:	468b      	mov	fp, r1
   3b170:	4690      	mov	r8, r2
   3b172:	9304      	str	r3, [sp, #16]
   3b174:	4bb2      	ldr	r3, [pc, #712]	; (3b440 <__gethex+0x2e0>)
   3b176:	681b      	ldr	r3, [r3, #0]
   3b178:	4618      	mov	r0, r3
   3b17a:	9301      	str	r3, [sp, #4]
   3b17c:	f7e2 f861 	bl	1d242 <strlen>
   3b180:	9b01      	ldr	r3, [sp, #4]
   3b182:	f8db 2000 	ldr.w	r2, [fp]
   3b186:	4682      	mov	sl, r0
   3b188:	4403      	add	r3, r0
   3b18a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   3b18e:	9305      	str	r3, [sp, #20]
   3b190:	1c93      	adds	r3, r2, #2
   3b192:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   3b196:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   3b19a:	32fe      	adds	r2, #254	; 0xfe
   3b19c:	18d1      	adds	r1, r2, r3
   3b19e:	461f      	mov	r7, r3
   3b1a0:	f813 0b01 	ldrb.w	r0, [r3], #1
   3b1a4:	9100      	str	r1, [sp, #0]
   3b1a6:	2830      	cmp	r0, #48	; 0x30
   3b1a8:	d0f8      	beq.n	3b19c <__gethex+0x3c>
   3b1aa:	f006 fdc6 	bl	41d3a <__hexdig_fun>
   3b1ae:	4604      	mov	r4, r0
   3b1b0:	2800      	cmp	r0, #0
   3b1b2:	d139      	bne.n	3b228 <__gethex+0xc8>
   3b1b4:	4652      	mov	r2, sl
   3b1b6:	9901      	ldr	r1, [sp, #4]
   3b1b8:	4638      	mov	r0, r7
   3b1ba:	f006 fbf5 	bl	419a8 <strncmp>
   3b1be:	4605      	mov	r5, r0
   3b1c0:	2800      	cmp	r0, #0
   3b1c2:	d167      	bne.n	3b294 <__gethex+0x134>
   3b1c4:	f817 000a 	ldrb.w	r0, [r7, sl]
   3b1c8:	eb07 060a 	add.w	r6, r7, sl
   3b1cc:	f006 fdb5 	bl	41d3a <__hexdig_fun>
   3b1d0:	2800      	cmp	r0, #0
   3b1d2:	d061      	beq.n	3b298 <__gethex+0x138>
   3b1d4:	4633      	mov	r3, r6
   3b1d6:	7818      	ldrb	r0, [r3, #0]
   3b1d8:	461f      	mov	r7, r3
   3b1da:	3301      	adds	r3, #1
   3b1dc:	2830      	cmp	r0, #48	; 0x30
   3b1de:	d0fa      	beq.n	3b1d6 <__gethex+0x76>
   3b1e0:	f006 fdab 	bl	41d3a <__hexdig_fun>
   3b1e4:	fab0 f480 	clz	r4, r0
   3b1e8:	2301      	movs	r3, #1
   3b1ea:	4635      	mov	r5, r6
   3b1ec:	0964      	lsrs	r4, r4, #5
   3b1ee:	9300      	str	r3, [sp, #0]
   3b1f0:	463a      	mov	r2, r7
   3b1f2:	4616      	mov	r6, r2
   3b1f4:	3201      	adds	r2, #1
   3b1f6:	7830      	ldrb	r0, [r6, #0]
   3b1f8:	f006 fd9f 	bl	41d3a <__hexdig_fun>
   3b1fc:	2800      	cmp	r0, #0
   3b1fe:	d1f8      	bne.n	3b1f2 <__gethex+0x92>
   3b200:	4652      	mov	r2, sl
   3b202:	9901      	ldr	r1, [sp, #4]
   3b204:	4630      	mov	r0, r6
   3b206:	f006 fbcf 	bl	419a8 <strncmp>
   3b20a:	b980      	cbnz	r0, 3b22e <__gethex+0xce>
   3b20c:	b94d      	cbnz	r5, 3b222 <__gethex+0xc2>
   3b20e:	eb06 050a 	add.w	r5, r6, sl
   3b212:	462a      	mov	r2, r5
   3b214:	4616      	mov	r6, r2
   3b216:	3201      	adds	r2, #1
   3b218:	7830      	ldrb	r0, [r6, #0]
   3b21a:	f006 fd8e 	bl	41d3a <__hexdig_fun>
   3b21e:	2800      	cmp	r0, #0
   3b220:	d1f8      	bne.n	3b214 <__gethex+0xb4>
   3b222:	1bad      	subs	r5, r5, r6
   3b224:	00ad      	lsls	r5, r5, #2
   3b226:	e004      	b.n	3b232 <__gethex+0xd2>
   3b228:	2400      	movs	r4, #0
   3b22a:	4625      	mov	r5, r4
   3b22c:	e7e0      	b.n	3b1f0 <__gethex+0x90>
   3b22e:	2d00      	cmp	r5, #0
   3b230:	d1f7      	bne.n	3b222 <__gethex+0xc2>
   3b232:	7833      	ldrb	r3, [r6, #0]
   3b234:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   3b238:	2b50      	cmp	r3, #80	; 0x50
   3b23a:	d13b      	bne.n	3b2b4 <__gethex+0x154>
   3b23c:	7873      	ldrb	r3, [r6, #1]
   3b23e:	2b2b      	cmp	r3, #43	; 0x2b
   3b240:	d02c      	beq.n	3b29c <__gethex+0x13c>
   3b242:	2b2d      	cmp	r3, #45	; 0x2d
   3b244:	d02e      	beq.n	3b2a4 <__gethex+0x144>
   3b246:	1c71      	adds	r1, r6, #1
   3b248:	f04f 0900 	mov.w	r9, #0
   3b24c:	7808      	ldrb	r0, [r1, #0]
   3b24e:	f006 fd74 	bl	41d3a <__hexdig_fun>
   3b252:	1e43      	subs	r3, r0, #1
   3b254:	b2db      	uxtb	r3, r3
   3b256:	2b18      	cmp	r3, #24
   3b258:	d82c      	bhi.n	3b2b4 <__gethex+0x154>
   3b25a:	f1a0 0210 	sub.w	r2, r0, #16
   3b25e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   3b262:	f006 fd6a 	bl	41d3a <__hexdig_fun>
   3b266:	1e43      	subs	r3, r0, #1
   3b268:	b2db      	uxtb	r3, r3
   3b26a:	2b18      	cmp	r3, #24
   3b26c:	d91d      	bls.n	3b2aa <__gethex+0x14a>
   3b26e:	f1b9 0f00 	cmp.w	r9, #0
   3b272:	d000      	beq.n	3b276 <__gethex+0x116>
   3b274:	4252      	negs	r2, r2
   3b276:	4415      	add	r5, r2
   3b278:	f8cb 1000 	str.w	r1, [fp]
   3b27c:	b1e4      	cbz	r4, 3b2b8 <__gethex+0x158>
   3b27e:	9b00      	ldr	r3, [sp, #0]
   3b280:	2b00      	cmp	r3, #0
   3b282:	bf14      	ite	ne
   3b284:	2700      	movne	r7, #0
   3b286:	2706      	moveq	r7, #6
   3b288:	4638      	mov	r0, r7
   3b28a:	b009      	add	sp, #36	; 0x24
   3b28c:	ecbd 8b02 	vpop	{d8}
   3b290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b294:	463e      	mov	r6, r7
   3b296:	4625      	mov	r5, r4
   3b298:	2401      	movs	r4, #1
   3b29a:	e7ca      	b.n	3b232 <__gethex+0xd2>
   3b29c:	f04f 0900 	mov.w	r9, #0
   3b2a0:	1cb1      	adds	r1, r6, #2
   3b2a2:	e7d3      	b.n	3b24c <__gethex+0xec>
   3b2a4:	f04f 0901 	mov.w	r9, #1
   3b2a8:	e7fa      	b.n	3b2a0 <__gethex+0x140>
   3b2aa:	230a      	movs	r3, #10
   3b2ac:	fb03 0202 	mla	r2, r3, r2, r0
   3b2b0:	3a10      	subs	r2, #16
   3b2b2:	e7d4      	b.n	3b25e <__gethex+0xfe>
   3b2b4:	4631      	mov	r1, r6
   3b2b6:	e7df      	b.n	3b278 <__gethex+0x118>
   3b2b8:	1bf3      	subs	r3, r6, r7
   3b2ba:	4621      	mov	r1, r4
   3b2bc:	3b01      	subs	r3, #1
   3b2be:	2b07      	cmp	r3, #7
   3b2c0:	dc0b      	bgt.n	3b2da <__gethex+0x17a>
   3b2c2:	ee18 0a10 	vmov	r0, s16
   3b2c6:	f000 f9f3 	bl	3b6b0 <_Balloc>
   3b2ca:	4604      	mov	r4, r0
   3b2cc:	b940      	cbnz	r0, 3b2e0 <__gethex+0x180>
   3b2ce:	4b5d      	ldr	r3, [pc, #372]	; (3b444 <__gethex+0x2e4>)
   3b2d0:	4602      	mov	r2, r0
   3b2d2:	21de      	movs	r1, #222	; 0xde
   3b2d4:	485c      	ldr	r0, [pc, #368]	; (3b448 <__gethex+0x2e8>)
   3b2d6:	f7fe fc21 	bl	39b1c <__assert_func>
   3b2da:	3101      	adds	r1, #1
   3b2dc:	105b      	asrs	r3, r3, #1
   3b2de:	e7ee      	b.n	3b2be <__gethex+0x15e>
   3b2e0:	f100 0914 	add.w	r9, r0, #20
   3b2e4:	f04f 0b00 	mov.w	fp, #0
   3b2e8:	f1ca 0301 	rsb	r3, sl, #1
   3b2ec:	f8cd 9008 	str.w	r9, [sp, #8]
   3b2f0:	f8cd b000 	str.w	fp, [sp]
   3b2f4:	9306      	str	r3, [sp, #24]
   3b2f6:	42b7      	cmp	r7, r6
   3b2f8:	d340      	bcc.n	3b37c <__gethex+0x21c>
   3b2fa:	9802      	ldr	r0, [sp, #8]
   3b2fc:	9b00      	ldr	r3, [sp, #0]
   3b2fe:	f840 3b04 	str.w	r3, [r0], #4
   3b302:	eba0 0009 	sub.w	r0, r0, r9
   3b306:	1080      	asrs	r0, r0, #2
   3b308:	0146      	lsls	r6, r0, #5
   3b30a:	6120      	str	r0, [r4, #16]
   3b30c:	4618      	mov	r0, r3
   3b30e:	f006 fe3c 	bl	41f8a <__hi0bits>
   3b312:	1a30      	subs	r0, r6, r0
   3b314:	f8d8 6000 	ldr.w	r6, [r8]
   3b318:	42b0      	cmp	r0, r6
   3b31a:	dd63      	ble.n	3b3e4 <__gethex+0x284>
   3b31c:	1b87      	subs	r7, r0, r6
   3b31e:	4620      	mov	r0, r4
   3b320:	4639      	mov	r1, r7
   3b322:	f006 feee 	bl	42102 <__any_on>
   3b326:	4682      	mov	sl, r0
   3b328:	b1a8      	cbz	r0, 3b356 <__gethex+0x1f6>
   3b32a:	1e7b      	subs	r3, r7, #1
   3b32c:	f04f 0a01 	mov.w	sl, #1
   3b330:	1159      	asrs	r1, r3, #5
   3b332:	f003 021f 	and.w	r2, r3, #31
   3b336:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   3b33a:	fa0a f202 	lsl.w	r2, sl, r2
   3b33e:	420a      	tst	r2, r1
   3b340:	d009      	beq.n	3b356 <__gethex+0x1f6>
   3b342:	4553      	cmp	r3, sl
   3b344:	dd05      	ble.n	3b352 <__gethex+0x1f2>
   3b346:	1eb9      	subs	r1, r7, #2
   3b348:	4620      	mov	r0, r4
   3b34a:	f006 feda 	bl	42102 <__any_on>
   3b34e:	2800      	cmp	r0, #0
   3b350:	d145      	bne.n	3b3de <__gethex+0x27e>
   3b352:	f04f 0a02 	mov.w	sl, #2
   3b356:	443d      	add	r5, r7
   3b358:	4639      	mov	r1, r7
   3b35a:	4620      	mov	r0, r4
   3b35c:	f006 fc9c 	bl	41c98 <rshift>
   3b360:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3b364:	42ab      	cmp	r3, r5
   3b366:	da4c      	bge.n	3b402 <__gethex+0x2a2>
   3b368:	4621      	mov	r1, r4
   3b36a:	ee18 0a10 	vmov	r0, s16
   3b36e:	f000 f9df 	bl	3b730 <_Bfree>
   3b372:	2300      	movs	r3, #0
   3b374:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3b376:	27a3      	movs	r7, #163	; 0xa3
   3b378:	6013      	str	r3, [r2, #0]
   3b37a:	e785      	b.n	3b288 <__gethex+0x128>
   3b37c:	1e73      	subs	r3, r6, #1
   3b37e:	9a05      	ldr	r2, [sp, #20]
   3b380:	9303      	str	r3, [sp, #12]
   3b382:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   3b386:	4293      	cmp	r3, r2
   3b388:	d019      	beq.n	3b3be <__gethex+0x25e>
   3b38a:	f1bb 0f20 	cmp.w	fp, #32
   3b38e:	d107      	bne.n	3b3a0 <__gethex+0x240>
   3b390:	9b02      	ldr	r3, [sp, #8]
   3b392:	9a00      	ldr	r2, [sp, #0]
   3b394:	f843 2b04 	str.w	r2, [r3], #4
   3b398:	9302      	str	r3, [sp, #8]
   3b39a:	2300      	movs	r3, #0
   3b39c:	469b      	mov	fp, r3
   3b39e:	9300      	str	r3, [sp, #0]
   3b3a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   3b3a4:	f006 fcc9 	bl	41d3a <__hexdig_fun>
   3b3a8:	f000 000f 	and.w	r0, r0, #15
   3b3ac:	9b00      	ldr	r3, [sp, #0]
   3b3ae:	fa00 f00b 	lsl.w	r0, r0, fp
   3b3b2:	f10b 0b04 	add.w	fp, fp, #4
   3b3b6:	4303      	orrs	r3, r0
   3b3b8:	9300      	str	r3, [sp, #0]
   3b3ba:	9b03      	ldr	r3, [sp, #12]
   3b3bc:	e00d      	b.n	3b3da <__gethex+0x27a>
   3b3be:	9b03      	ldr	r3, [sp, #12]
   3b3c0:	9a06      	ldr	r2, [sp, #24]
   3b3c2:	4413      	add	r3, r2
   3b3c4:	42bb      	cmp	r3, r7
   3b3c6:	d3e0      	bcc.n	3b38a <__gethex+0x22a>
   3b3c8:	4618      	mov	r0, r3
   3b3ca:	4652      	mov	r2, sl
   3b3cc:	9901      	ldr	r1, [sp, #4]
   3b3ce:	9307      	str	r3, [sp, #28]
   3b3d0:	f006 faea 	bl	419a8 <strncmp>
   3b3d4:	9b07      	ldr	r3, [sp, #28]
   3b3d6:	2800      	cmp	r0, #0
   3b3d8:	d1d7      	bne.n	3b38a <__gethex+0x22a>
   3b3da:	461e      	mov	r6, r3
   3b3dc:	e78b      	b.n	3b2f6 <__gethex+0x196>
   3b3de:	f04f 0a03 	mov.w	sl, #3
   3b3e2:	e7b8      	b.n	3b356 <__gethex+0x1f6>
   3b3e4:	da0a      	bge.n	3b3fc <__gethex+0x29c>
   3b3e6:	1a37      	subs	r7, r6, r0
   3b3e8:	4621      	mov	r1, r4
   3b3ea:	ee18 0a10 	vmov	r0, s16
   3b3ee:	463a      	mov	r2, r7
   3b3f0:	1bed      	subs	r5, r5, r7
   3b3f2:	f000 fb69 	bl	3bac8 <__lshift>
   3b3f6:	4604      	mov	r4, r0
   3b3f8:	f100 0914 	add.w	r9, r0, #20
   3b3fc:	f04f 0a00 	mov.w	sl, #0
   3b400:	e7ae      	b.n	3b360 <__gethex+0x200>
   3b402:	f8d8 0004 	ldr.w	r0, [r8, #4]
   3b406:	42a8      	cmp	r0, r5
   3b408:	dd72      	ble.n	3b4f0 <__gethex+0x390>
   3b40a:	1b45      	subs	r5, r0, r5
   3b40c:	42ae      	cmp	r6, r5
   3b40e:	dc35      	bgt.n	3b47c <__gethex+0x31c>
   3b410:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3b414:	2b02      	cmp	r3, #2
   3b416:	d029      	beq.n	3b46c <__gethex+0x30c>
   3b418:	2b03      	cmp	r3, #3
   3b41a:	d02b      	beq.n	3b474 <__gethex+0x314>
   3b41c:	2b01      	cmp	r3, #1
   3b41e:	d11b      	bne.n	3b458 <__gethex+0x2f8>
   3b420:	42ae      	cmp	r6, r5
   3b422:	d119      	bne.n	3b458 <__gethex+0x2f8>
   3b424:	2e01      	cmp	r6, #1
   3b426:	d111      	bne.n	3b44c <__gethex+0x2ec>
   3b428:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3b42c:	2762      	movs	r7, #98	; 0x62
   3b42e:	9a04      	ldr	r2, [sp, #16]
   3b430:	6013      	str	r3, [r2, #0]
   3b432:	2301      	movs	r3, #1
   3b434:	6123      	str	r3, [r4, #16]
   3b436:	f8c9 3000 	str.w	r3, [r9]
   3b43a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3b43c:	601c      	str	r4, [r3, #0]
   3b43e:	e723      	b.n	3b288 <__gethex+0x128>
   3b440:	0004365c 	.word	0x0004365c
   3b444:	0004c0e9 	.word	0x0004c0e9
   3b448:	0004c0fa 	.word	0x0004c0fa
   3b44c:	1e71      	subs	r1, r6, #1
   3b44e:	4620      	mov	r0, r4
   3b450:	f006 fe57 	bl	42102 <__any_on>
   3b454:	2800      	cmp	r0, #0
   3b456:	d1e7      	bne.n	3b428 <__gethex+0x2c8>
   3b458:	4621      	mov	r1, r4
   3b45a:	ee18 0a10 	vmov	r0, s16
   3b45e:	f000 f967 	bl	3b730 <_Bfree>
   3b462:	2300      	movs	r3, #0
   3b464:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3b466:	2750      	movs	r7, #80	; 0x50
   3b468:	6013      	str	r3, [r2, #0]
   3b46a:	e70d      	b.n	3b288 <__gethex+0x128>
   3b46c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b46e:	2b00      	cmp	r3, #0
   3b470:	d1f2      	bne.n	3b458 <__gethex+0x2f8>
   3b472:	e7d9      	b.n	3b428 <__gethex+0x2c8>
   3b474:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b476:	2b00      	cmp	r3, #0
   3b478:	d1d6      	bne.n	3b428 <__gethex+0x2c8>
   3b47a:	e7ed      	b.n	3b458 <__gethex+0x2f8>
   3b47c:	1e6f      	subs	r7, r5, #1
   3b47e:	f1ba 0f00 	cmp.w	sl, #0
   3b482:	d132      	bne.n	3b4ea <__gethex+0x38a>
   3b484:	b127      	cbz	r7, 3b490 <__gethex+0x330>
   3b486:	4639      	mov	r1, r7
   3b488:	4620      	mov	r0, r4
   3b48a:	f006 fe3a 	bl	42102 <__any_on>
   3b48e:	4682      	mov	sl, r0
   3b490:	117b      	asrs	r3, r7, #5
   3b492:	2101      	movs	r1, #1
   3b494:	f007 071f 	and.w	r7, r7, #31
   3b498:	4620      	mov	r0, r4
   3b49a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   3b49e:	1b76      	subs	r6, r6, r5
   3b4a0:	fa01 f707 	lsl.w	r7, r1, r7
   3b4a4:	4629      	mov	r1, r5
   3b4a6:	421f      	tst	r7, r3
   3b4a8:	f04f 0702 	mov.w	r7, #2
   3b4ac:	bf18      	it	ne
   3b4ae:	f04a 0a02 	orrne.w	sl, sl, #2
   3b4b2:	f006 fbf1 	bl	41c98 <rshift>
   3b4b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   3b4ba:	f1ba 0f00 	cmp.w	sl, #0
   3b4be:	d048      	beq.n	3b552 <__gethex+0x3f2>
   3b4c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3b4c4:	2b02      	cmp	r3, #2
   3b4c6:	d015      	beq.n	3b4f4 <__gethex+0x394>
   3b4c8:	2b03      	cmp	r3, #3
   3b4ca:	d017      	beq.n	3b4fc <__gethex+0x39c>
   3b4cc:	2b01      	cmp	r3, #1
   3b4ce:	d109      	bne.n	3b4e4 <__gethex+0x384>
   3b4d0:	f01a 0f02 	tst.w	sl, #2
   3b4d4:	d006      	beq.n	3b4e4 <__gethex+0x384>
   3b4d6:	f8d9 0000 	ldr.w	r0, [r9]
   3b4da:	ea4a 0a00 	orr.w	sl, sl, r0
   3b4de:	f01a 0f01 	tst.w	sl, #1
   3b4e2:	d10e      	bne.n	3b502 <__gethex+0x3a2>
   3b4e4:	f047 0710 	orr.w	r7, r7, #16
   3b4e8:	e033      	b.n	3b552 <__gethex+0x3f2>
   3b4ea:	f04f 0a01 	mov.w	sl, #1
   3b4ee:	e7cf      	b.n	3b490 <__gethex+0x330>
   3b4f0:	2701      	movs	r7, #1
   3b4f2:	e7e2      	b.n	3b4ba <__gethex+0x35a>
   3b4f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b4f6:	f1c3 0301 	rsb	r3, r3, #1
   3b4fa:	9315      	str	r3, [sp, #84]	; 0x54
   3b4fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b4fe:	2b00      	cmp	r3, #0
   3b500:	d0f0      	beq.n	3b4e4 <__gethex+0x384>
   3b502:	f8d4 b010 	ldr.w	fp, [r4, #16]
   3b506:	f104 0314 	add.w	r3, r4, #20
   3b50a:	f04f 0c00 	mov.w	ip, #0
   3b50e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   3b512:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   3b516:	4618      	mov	r0, r3
   3b518:	f853 2b04 	ldr.w	r2, [r3], #4
   3b51c:	f1b2 3fff 	cmp.w	r2, #4294967295
   3b520:	d01c      	beq.n	3b55c <__gethex+0x3fc>
   3b522:	3201      	adds	r2, #1
   3b524:	6002      	str	r2, [r0, #0]
   3b526:	2f02      	cmp	r7, #2
   3b528:	f104 0314 	add.w	r3, r4, #20
   3b52c:	d13f      	bne.n	3b5ae <__gethex+0x44e>
   3b52e:	f8d8 2000 	ldr.w	r2, [r8]
   3b532:	3a01      	subs	r2, #1
   3b534:	42b2      	cmp	r2, r6
   3b536:	d10a      	bne.n	3b54e <__gethex+0x3ee>
   3b538:	1171      	asrs	r1, r6, #5
   3b53a:	2201      	movs	r2, #1
   3b53c:	f006 061f 	and.w	r6, r6, #31
   3b540:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   3b544:	fa02 f606 	lsl.w	r6, r2, r6
   3b548:	421e      	tst	r6, r3
   3b54a:	bf18      	it	ne
   3b54c:	4617      	movne	r7, r2
   3b54e:	f047 0720 	orr.w	r7, r7, #32
   3b552:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3b554:	601c      	str	r4, [r3, #0]
   3b556:	9b04      	ldr	r3, [sp, #16]
   3b558:	601d      	str	r5, [r3, #0]
   3b55a:	e695      	b.n	3b288 <__gethex+0x128>
   3b55c:	4299      	cmp	r1, r3
   3b55e:	f843 cc04 	str.w	ip, [r3, #-4]
   3b562:	d8d8      	bhi.n	3b516 <__gethex+0x3b6>
   3b564:	68a3      	ldr	r3, [r4, #8]
   3b566:	459b      	cmp	fp, r3
   3b568:	db19      	blt.n	3b59e <__gethex+0x43e>
   3b56a:	6861      	ldr	r1, [r4, #4]
   3b56c:	ee18 0a10 	vmov	r0, s16
   3b570:	3101      	adds	r1, #1
   3b572:	f000 f89d 	bl	3b6b0 <_Balloc>
   3b576:	4681      	mov	r9, r0
   3b578:	b918      	cbnz	r0, 3b582 <__gethex+0x422>
   3b57a:	4b1b      	ldr	r3, [pc, #108]	; (3b5e8 <__gethex+0x488>)
   3b57c:	4602      	mov	r2, r0
   3b57e:	2184      	movs	r1, #132	; 0x84
   3b580:	e6a8      	b.n	3b2d4 <__gethex+0x174>
   3b582:	6922      	ldr	r2, [r4, #16]
   3b584:	f104 010c 	add.w	r1, r4, #12
   3b588:	300c      	adds	r0, #12
   3b58a:	3202      	adds	r2, #2
   3b58c:	0092      	lsls	r2, r2, #2
   3b58e:	f006 f818 	bl	415c2 <memcpy>
   3b592:	4621      	mov	r1, r4
   3b594:	464c      	mov	r4, r9
   3b596:	ee18 0a10 	vmov	r0, s16
   3b59a:	f000 f8c9 	bl	3b730 <_Bfree>
   3b59e:	6923      	ldr	r3, [r4, #16]
   3b5a0:	1c5a      	adds	r2, r3, #1
   3b5a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   3b5a6:	6122      	str	r2, [r4, #16]
   3b5a8:	2201      	movs	r2, #1
   3b5aa:	615a      	str	r2, [r3, #20]
   3b5ac:	e7bb      	b.n	3b526 <__gethex+0x3c6>
   3b5ae:	6922      	ldr	r2, [r4, #16]
   3b5b0:	455a      	cmp	r2, fp
   3b5b2:	dd0b      	ble.n	3b5cc <__gethex+0x46c>
   3b5b4:	2101      	movs	r1, #1
   3b5b6:	4620      	mov	r0, r4
   3b5b8:	f006 fb6e 	bl	41c98 <rshift>
   3b5bc:	3501      	adds	r5, #1
   3b5be:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3b5c2:	42ab      	cmp	r3, r5
   3b5c4:	f6ff aed0 	blt.w	3b368 <__gethex+0x208>
   3b5c8:	2701      	movs	r7, #1
   3b5ca:	e7c0      	b.n	3b54e <__gethex+0x3ee>
   3b5cc:	f016 061f 	ands.w	r6, r6, #31
   3b5d0:	d0fa      	beq.n	3b5c8 <__gethex+0x468>
   3b5d2:	4453      	add	r3, sl
   3b5d4:	f1c6 0620 	rsb	r6, r6, #32
   3b5d8:	f853 0c04 	ldr.w	r0, [r3, #-4]
   3b5dc:	f006 fcd5 	bl	41f8a <__hi0bits>
   3b5e0:	42b0      	cmp	r0, r6
   3b5e2:	dbe7      	blt.n	3b5b4 <__gethex+0x454>
   3b5e4:	e7f0      	b.n	3b5c8 <__gethex+0x468>
   3b5e6:	bf00      	nop
   3b5e8:	0004c0e9 	.word	0x0004c0e9

0003b5ec <_localeconv_r>:
   3b5ec:	4800      	ldr	r0, [pc, #0]	; (3b5f0 <_localeconv_r+0x4>)
   3b5ee:	4770      	bx	lr
   3b5f0:	20014bc8 	.word	0x20014bc8

0003b5f4 <_lseek_r>:
   3b5f4:	b538      	push	{r3, r4, r5, lr}
   3b5f6:	4604      	mov	r4, r0
   3b5f8:	4d06      	ldr	r5, [pc, #24]	; (3b614 <_lseek_r+0x20>)
   3b5fa:	4608      	mov	r0, r1
   3b5fc:	4611      	mov	r1, r2
   3b5fe:	2200      	movs	r2, #0
   3b600:	602a      	str	r2, [r5, #0]
   3b602:	461a      	mov	r2, r3
   3b604:	f002 f992 	bl	3d92c <_lseek>
   3b608:	1c43      	adds	r3, r0, #1
   3b60a:	d102      	bne.n	3b612 <_lseek_r+0x1e>
   3b60c:	682b      	ldr	r3, [r5, #0]
   3b60e:	b103      	cbz	r3, 3b612 <_lseek_r+0x1e>
   3b610:	6023      	str	r3, [r4, #0]
   3b612:	bd38      	pop	{r3, r4, r5, pc}
   3b614:	2001a568 	.word	0x2001a568

0003b618 <__smakebuf_r>:
   3b618:	898b      	ldrh	r3, [r1, #12]
   3b61a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3b61c:	079d      	lsls	r5, r3, #30
   3b61e:	4606      	mov	r6, r0
   3b620:	460c      	mov	r4, r1
   3b622:	d507      	bpl.n	3b634 <__smakebuf_r+0x1c>
   3b624:	f104 0347 	add.w	r3, r4, #71	; 0x47
   3b628:	6023      	str	r3, [r4, #0]
   3b62a:	6123      	str	r3, [r4, #16]
   3b62c:	2301      	movs	r3, #1
   3b62e:	6163      	str	r3, [r4, #20]
   3b630:	b002      	add	sp, #8
   3b632:	bd70      	pop	{r4, r5, r6, pc}
   3b634:	ab01      	add	r3, sp, #4
   3b636:	466a      	mov	r2, sp
   3b638:	f006 fc56 	bl	41ee8 <__swhatbuf_r>
   3b63c:	9900      	ldr	r1, [sp, #0]
   3b63e:	4605      	mov	r5, r0
   3b640:	4630      	mov	r0, r6
   3b642:	f7fe fba3 	bl	39d8c <_malloc_r>
   3b646:	b948      	cbnz	r0, 3b65c <__smakebuf_r+0x44>
   3b648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3b64c:	059a      	lsls	r2, r3, #22
   3b64e:	d4ef      	bmi.n	3b630 <__smakebuf_r+0x18>
   3b650:	f023 0303 	bic.w	r3, r3, #3
   3b654:	f043 0302 	orr.w	r3, r3, #2
   3b658:	81a3      	strh	r3, [r4, #12]
   3b65a:	e7e3      	b.n	3b624 <__smakebuf_r+0xc>
   3b65c:	4b0d      	ldr	r3, [pc, #52]	; (3b694 <__smakebuf_r+0x7c>)
   3b65e:	62b3      	str	r3, [r6, #40]	; 0x28
   3b660:	89a3      	ldrh	r3, [r4, #12]
   3b662:	6020      	str	r0, [r4, #0]
   3b664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3b668:	6120      	str	r0, [r4, #16]
   3b66a:	81a3      	strh	r3, [r4, #12]
   3b66c:	9b00      	ldr	r3, [sp, #0]
   3b66e:	6163      	str	r3, [r4, #20]
   3b670:	9b01      	ldr	r3, [sp, #4]
   3b672:	b15b      	cbz	r3, 3b68c <__smakebuf_r+0x74>
   3b674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3b678:	4630      	mov	r0, r6
   3b67a:	f001 f807 	bl	3c68c <_isatty_r>
   3b67e:	b128      	cbz	r0, 3b68c <__smakebuf_r+0x74>
   3b680:	89a3      	ldrh	r3, [r4, #12]
   3b682:	f023 0303 	bic.w	r3, r3, #3
   3b686:	f043 0301 	orr.w	r3, r3, #1
   3b68a:	81a3      	strh	r3, [r4, #12]
   3b68c:	89a0      	ldrh	r0, [r4, #12]
   3b68e:	4305      	orrs	r5, r0
   3b690:	81a5      	strh	r5, [r4, #12]
   3b692:	e7cd      	b.n	3b630 <__smakebuf_r+0x18>
   3b694:	0003b029 	.word	0x0003b029

0003b698 <__malloc_lock>:
   3b698:	4801      	ldr	r0, [pc, #4]	; (3b6a0 <__malloc_lock+0x8>)
   3b69a:	f7e8 b9e7 	b.w	23a6c <__retarget_lock_acquire_recursive>
   3b69e:	bf00      	nop
   3b6a0:	20014ec8 	.word	0x20014ec8

0003b6a4 <__malloc_unlock>:
   3b6a4:	4801      	ldr	r0, [pc, #4]	; (3b6ac <__malloc_unlock+0x8>)
   3b6a6:	f7e8 b9fd 	b.w	23aa4 <__retarget_lock_release_recursive>
   3b6aa:	bf00      	nop
   3b6ac:	20014ec8 	.word	0x20014ec8

0003b6b0 <_Balloc>:
   3b6b0:	b570      	push	{r4, r5, r6, lr}
   3b6b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3b6b4:	4604      	mov	r4, r0
   3b6b6:	460d      	mov	r5, r1
   3b6b8:	b976      	cbnz	r6, 3b6d8 <_Balloc+0x28>
   3b6ba:	2010      	movs	r0, #16
   3b6bc:	f7fe fb0a 	bl	39cd4 <malloc>
   3b6c0:	4602      	mov	r2, r0
   3b6c2:	6260      	str	r0, [r4, #36]	; 0x24
   3b6c4:	b920      	cbnz	r0, 3b6d0 <_Balloc+0x20>
   3b6c6:	4b18      	ldr	r3, [pc, #96]	; (3b728 <_Balloc+0x78>)
   3b6c8:	2166      	movs	r1, #102	; 0x66
   3b6ca:	4818      	ldr	r0, [pc, #96]	; (3b72c <_Balloc+0x7c>)
   3b6cc:	f7fe fa26 	bl	39b1c <__assert_func>
   3b6d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3b6d4:	6006      	str	r6, [r0, #0]
   3b6d6:	60c6      	str	r6, [r0, #12]
   3b6d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   3b6da:	68f3      	ldr	r3, [r6, #12]
   3b6dc:	b183      	cbz	r3, 3b700 <_Balloc+0x50>
   3b6de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b6e0:	68db      	ldr	r3, [r3, #12]
   3b6e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   3b6e6:	b9b8      	cbnz	r0, 3b718 <_Balloc+0x68>
   3b6e8:	2101      	movs	r1, #1
   3b6ea:	4620      	mov	r0, r4
   3b6ec:	fa01 f605 	lsl.w	r6, r1, r5
   3b6f0:	1d72      	adds	r2, r6, #5
   3b6f2:	0092      	lsls	r2, r2, #2
   3b6f4:	f005 ff8d 	bl	41612 <_calloc_r>
   3b6f8:	b160      	cbz	r0, 3b714 <_Balloc+0x64>
   3b6fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
   3b6fe:	e00e      	b.n	3b71e <_Balloc+0x6e>
   3b700:	2221      	movs	r2, #33	; 0x21
   3b702:	2104      	movs	r1, #4
   3b704:	4620      	mov	r0, r4
   3b706:	f005 ff84 	bl	41612 <_calloc_r>
   3b70a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b70c:	60f0      	str	r0, [r6, #12]
   3b70e:	68db      	ldr	r3, [r3, #12]
   3b710:	2b00      	cmp	r3, #0
   3b712:	d1e4      	bne.n	3b6de <_Balloc+0x2e>
   3b714:	2000      	movs	r0, #0
   3b716:	bd70      	pop	{r4, r5, r6, pc}
   3b718:	6802      	ldr	r2, [r0, #0]
   3b71a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   3b71e:	2300      	movs	r3, #0
   3b720:	e9c0 3303 	strd	r3, r3, [r0, #12]
   3b724:	e7f7      	b.n	3b716 <_Balloc+0x66>
   3b726:	bf00      	nop
   3b728:	0004c05e 	.word	0x0004c05e
   3b72c:	0004c180 	.word	0x0004c180

0003b730 <_Bfree>:
   3b730:	b570      	push	{r4, r5, r6, lr}
   3b732:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3b734:	4605      	mov	r5, r0
   3b736:	460c      	mov	r4, r1
   3b738:	b976      	cbnz	r6, 3b758 <_Bfree+0x28>
   3b73a:	2010      	movs	r0, #16
   3b73c:	f7fe faca 	bl	39cd4 <malloc>
   3b740:	4602      	mov	r2, r0
   3b742:	6268      	str	r0, [r5, #36]	; 0x24
   3b744:	b920      	cbnz	r0, 3b750 <_Bfree+0x20>
   3b746:	4b09      	ldr	r3, [pc, #36]	; (3b76c <_Bfree+0x3c>)
   3b748:	218a      	movs	r1, #138	; 0x8a
   3b74a:	4809      	ldr	r0, [pc, #36]	; (3b770 <_Bfree+0x40>)
   3b74c:	f7fe f9e6 	bl	39b1c <__assert_func>
   3b750:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3b754:	6006      	str	r6, [r0, #0]
   3b756:	60c6      	str	r6, [r0, #12]
   3b758:	b13c      	cbz	r4, 3b76a <_Bfree+0x3a>
   3b75a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3b75c:	6862      	ldr	r2, [r4, #4]
   3b75e:	68db      	ldr	r3, [r3, #12]
   3b760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   3b764:	6021      	str	r1, [r4, #0]
   3b766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   3b76a:	bd70      	pop	{r4, r5, r6, pc}
   3b76c:	0004c05e 	.word	0x0004c05e
   3b770:	0004c180 	.word	0x0004c180

0003b774 <__multadd>:
   3b774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b778:	f101 0c14 	add.w	ip, r1, #20
   3b77c:	4607      	mov	r7, r0
   3b77e:	460c      	mov	r4, r1
   3b780:	461e      	mov	r6, r3
   3b782:	690d      	ldr	r5, [r1, #16]
   3b784:	2000      	movs	r0, #0
   3b786:	f8dc 3000 	ldr.w	r3, [ip]
   3b78a:	3001      	adds	r0, #1
   3b78c:	b299      	uxth	r1, r3
   3b78e:	4285      	cmp	r5, r0
   3b790:	fb02 6101 	mla	r1, r2, r1, r6
   3b794:	ea4f 4613 	mov.w	r6, r3, lsr #16
   3b798:	ea4f 4311 	mov.w	r3, r1, lsr #16
   3b79c:	b289      	uxth	r1, r1
   3b79e:	fb02 3306 	mla	r3, r2, r6, r3
   3b7a2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   3b7a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
   3b7aa:	f84c 1b04 	str.w	r1, [ip], #4
   3b7ae:	dcea      	bgt.n	3b786 <__multadd+0x12>
   3b7b0:	b30e      	cbz	r6, 3b7f6 <__multadd+0x82>
   3b7b2:	68a3      	ldr	r3, [r4, #8]
   3b7b4:	42ab      	cmp	r3, r5
   3b7b6:	dc19      	bgt.n	3b7ec <__multadd+0x78>
   3b7b8:	6861      	ldr	r1, [r4, #4]
   3b7ba:	4638      	mov	r0, r7
   3b7bc:	3101      	adds	r1, #1
   3b7be:	f7ff ff77 	bl	3b6b0 <_Balloc>
   3b7c2:	4680      	mov	r8, r0
   3b7c4:	b928      	cbnz	r0, 3b7d2 <__multadd+0x5e>
   3b7c6:	4602      	mov	r2, r0
   3b7c8:	4b0c      	ldr	r3, [pc, #48]	; (3b7fc <__multadd+0x88>)
   3b7ca:	21b5      	movs	r1, #181	; 0xb5
   3b7cc:	480c      	ldr	r0, [pc, #48]	; (3b800 <__multadd+0x8c>)
   3b7ce:	f7fe f9a5 	bl	39b1c <__assert_func>
   3b7d2:	6922      	ldr	r2, [r4, #16]
   3b7d4:	f104 010c 	add.w	r1, r4, #12
   3b7d8:	300c      	adds	r0, #12
   3b7da:	3202      	adds	r2, #2
   3b7dc:	0092      	lsls	r2, r2, #2
   3b7de:	f005 fef0 	bl	415c2 <memcpy>
   3b7e2:	4621      	mov	r1, r4
   3b7e4:	4644      	mov	r4, r8
   3b7e6:	4638      	mov	r0, r7
   3b7e8:	f7ff ffa2 	bl	3b730 <_Bfree>
   3b7ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   3b7f0:	3501      	adds	r5, #1
   3b7f2:	615e      	str	r6, [r3, #20]
   3b7f4:	6125      	str	r5, [r4, #16]
   3b7f6:	4620      	mov	r0, r4
   3b7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b7fc:	0004c0e9 	.word	0x0004c0e9
   3b800:	0004c180 	.word	0x0004c180

0003b804 <__s2b>:
   3b804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3b808:	4615      	mov	r5, r2
   3b80a:	461f      	mov	r7, r3
   3b80c:	2209      	movs	r2, #9
   3b80e:	3308      	adds	r3, #8
   3b810:	460c      	mov	r4, r1
   3b812:	4606      	mov	r6, r0
   3b814:	2100      	movs	r1, #0
   3b816:	fb93 f3f2 	sdiv	r3, r3, r2
   3b81a:	2201      	movs	r2, #1
   3b81c:	429a      	cmp	r2, r3
   3b81e:	db09      	blt.n	3b834 <__s2b+0x30>
   3b820:	4630      	mov	r0, r6
   3b822:	f7ff ff45 	bl	3b6b0 <_Balloc>
   3b826:	b940      	cbnz	r0, 3b83a <__s2b+0x36>
   3b828:	4602      	mov	r2, r0
   3b82a:	4b19      	ldr	r3, [pc, #100]	; (3b890 <__s2b+0x8c>)
   3b82c:	21ce      	movs	r1, #206	; 0xce
   3b82e:	4819      	ldr	r0, [pc, #100]	; (3b894 <__s2b+0x90>)
   3b830:	f7fe f974 	bl	39b1c <__assert_func>
   3b834:	0052      	lsls	r2, r2, #1
   3b836:	3101      	adds	r1, #1
   3b838:	e7f0      	b.n	3b81c <__s2b+0x18>
   3b83a:	9b08      	ldr	r3, [sp, #32]
   3b83c:	2d09      	cmp	r5, #9
   3b83e:	6143      	str	r3, [r0, #20]
   3b840:	f04f 0301 	mov.w	r3, #1
   3b844:	6103      	str	r3, [r0, #16]
   3b846:	dd16      	ble.n	3b876 <__s2b+0x72>
   3b848:	f104 0909 	add.w	r9, r4, #9
   3b84c:	442c      	add	r4, r5
   3b84e:	46c8      	mov	r8, r9
   3b850:	f818 3b01 	ldrb.w	r3, [r8], #1
   3b854:	4601      	mov	r1, r0
   3b856:	220a      	movs	r2, #10
   3b858:	4630      	mov	r0, r6
   3b85a:	3b30      	subs	r3, #48	; 0x30
   3b85c:	f7ff ff8a 	bl	3b774 <__multadd>
   3b860:	45a0      	cmp	r8, r4
   3b862:	d1f5      	bne.n	3b850 <__s2b+0x4c>
   3b864:	f1a5 0408 	sub.w	r4, r5, #8
   3b868:	444c      	add	r4, r9
   3b86a:	1b2d      	subs	r5, r5, r4
   3b86c:	1963      	adds	r3, r4, r5
   3b86e:	42bb      	cmp	r3, r7
   3b870:	db04      	blt.n	3b87c <__s2b+0x78>
   3b872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3b876:	340a      	adds	r4, #10
   3b878:	2509      	movs	r5, #9
   3b87a:	e7f6      	b.n	3b86a <__s2b+0x66>
   3b87c:	f814 3b01 	ldrb.w	r3, [r4], #1
   3b880:	4601      	mov	r1, r0
   3b882:	220a      	movs	r2, #10
   3b884:	4630      	mov	r0, r6
   3b886:	3b30      	subs	r3, #48	; 0x30
   3b888:	f7ff ff74 	bl	3b774 <__multadd>
   3b88c:	e7ee      	b.n	3b86c <__s2b+0x68>
   3b88e:	bf00      	nop
   3b890:	0004c0e9 	.word	0x0004c0e9
   3b894:	0004c180 	.word	0x0004c180

0003b898 <__i2b>:
   3b898:	b510      	push	{r4, lr}
   3b89a:	460c      	mov	r4, r1
   3b89c:	2101      	movs	r1, #1
   3b89e:	f7ff ff07 	bl	3b6b0 <_Balloc>
   3b8a2:	4602      	mov	r2, r0
   3b8a4:	b928      	cbnz	r0, 3b8b2 <__i2b+0x1a>
   3b8a6:	4b05      	ldr	r3, [pc, #20]	; (3b8bc <__i2b+0x24>)
   3b8a8:	f44f 71a0 	mov.w	r1, #320	; 0x140
   3b8ac:	4804      	ldr	r0, [pc, #16]	; (3b8c0 <__i2b+0x28>)
   3b8ae:	f7fe f935 	bl	39b1c <__assert_func>
   3b8b2:	2301      	movs	r3, #1
   3b8b4:	6144      	str	r4, [r0, #20]
   3b8b6:	6103      	str	r3, [r0, #16]
   3b8b8:	bd10      	pop	{r4, pc}
   3b8ba:	bf00      	nop
   3b8bc:	0004c0e9 	.word	0x0004c0e9
   3b8c0:	0004c180 	.word	0x0004c180

0003b8c4 <__multiply>:
   3b8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b8c8:	4691      	mov	r9, r2
   3b8ca:	690a      	ldr	r2, [r1, #16]
   3b8cc:	460c      	mov	r4, r1
   3b8ce:	b085      	sub	sp, #20
   3b8d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   3b8d4:	429a      	cmp	r2, r3
   3b8d6:	bfbe      	ittt	lt
   3b8d8:	460b      	movlt	r3, r1
   3b8da:	464c      	movlt	r4, r9
   3b8dc:	4699      	movlt	r9, r3
   3b8de:	6927      	ldr	r7, [r4, #16]
   3b8e0:	68a3      	ldr	r3, [r4, #8]
   3b8e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
   3b8e6:	6861      	ldr	r1, [r4, #4]
   3b8e8:	eb07 060a 	add.w	r6, r7, sl
   3b8ec:	42b3      	cmp	r3, r6
   3b8ee:	bfb8      	it	lt
   3b8f0:	3101      	addlt	r1, #1
   3b8f2:	f7ff fedd 	bl	3b6b0 <_Balloc>
   3b8f6:	b930      	cbnz	r0, 3b906 <__multiply+0x42>
   3b8f8:	4602      	mov	r2, r0
   3b8fa:	4b44      	ldr	r3, [pc, #272]	; (3ba0c <__multiply+0x148>)
   3b8fc:	f240 115d 	movw	r1, #349	; 0x15d
   3b900:	4843      	ldr	r0, [pc, #268]	; (3ba10 <__multiply+0x14c>)
   3b902:	f7fe f90b 	bl	39b1c <__assert_func>
   3b906:	f100 0514 	add.w	r5, r0, #20
   3b90a:	2200      	movs	r2, #0
   3b90c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   3b910:	462b      	mov	r3, r5
   3b912:	4543      	cmp	r3, r8
   3b914:	d321      	bcc.n	3b95a <__multiply+0x96>
   3b916:	f104 0314 	add.w	r3, r4, #20
   3b91a:	f104 0115 	add.w	r1, r4, #21
   3b91e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   3b922:	f109 0314 	add.w	r3, r9, #20
   3b926:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   3b92a:	9202      	str	r2, [sp, #8]
   3b92c:	1b3a      	subs	r2, r7, r4
   3b92e:	3a15      	subs	r2, #21
   3b930:	f022 0203 	bic.w	r2, r2, #3
   3b934:	3204      	adds	r2, #4
   3b936:	428f      	cmp	r7, r1
   3b938:	bf38      	it	cc
   3b93a:	2204      	movcc	r2, #4
   3b93c:	9201      	str	r2, [sp, #4]
   3b93e:	9a02      	ldr	r2, [sp, #8]
   3b940:	9303      	str	r3, [sp, #12]
   3b942:	429a      	cmp	r2, r3
   3b944:	d80c      	bhi.n	3b960 <__multiply+0x9c>
   3b946:	2e00      	cmp	r6, #0
   3b948:	dd03      	ble.n	3b952 <__multiply+0x8e>
   3b94a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   3b94e:	2b00      	cmp	r3, #0
   3b950:	d05a      	beq.n	3ba08 <__multiply+0x144>
   3b952:	6106      	str	r6, [r0, #16]
   3b954:	b005      	add	sp, #20
   3b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b95a:	f843 2b04 	str.w	r2, [r3], #4
   3b95e:	e7d8      	b.n	3b912 <__multiply+0x4e>
   3b960:	f8b3 a000 	ldrh.w	sl, [r3]
   3b964:	f1ba 0f00 	cmp.w	sl, #0
   3b968:	d024      	beq.n	3b9b4 <__multiply+0xf0>
   3b96a:	f104 0e14 	add.w	lr, r4, #20
   3b96e:	46a9      	mov	r9, r5
   3b970:	f04f 0c00 	mov.w	ip, #0
   3b974:	f85e 2b04 	ldr.w	r2, [lr], #4
   3b978:	f8d9 1000 	ldr.w	r1, [r9]
   3b97c:	fa1f fb82 	uxth.w	fp, r2
   3b980:	4577      	cmp	r7, lr
   3b982:	b289      	uxth	r1, r1
   3b984:	fb0a 110b 	mla	r1, sl, fp, r1
   3b988:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   3b98c:	f8d9 2000 	ldr.w	r2, [r9]
   3b990:	4461      	add	r1, ip
   3b992:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   3b996:	fb0a c20b 	mla	r2, sl, fp, ip
   3b99a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   3b99e:	b289      	uxth	r1, r1
   3b9a0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   3b9a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   3b9a8:	f849 1b04 	str.w	r1, [r9], #4
   3b9ac:	d8e2      	bhi.n	3b974 <__multiply+0xb0>
   3b9ae:	9a01      	ldr	r2, [sp, #4]
   3b9b0:	f845 c002 	str.w	ip, [r5, r2]
   3b9b4:	9a03      	ldr	r2, [sp, #12]
   3b9b6:	3304      	adds	r3, #4
   3b9b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   3b9bc:	f1b9 0f00 	cmp.w	r9, #0
   3b9c0:	d020      	beq.n	3ba04 <__multiply+0x140>
   3b9c2:	6829      	ldr	r1, [r5, #0]
   3b9c4:	f104 0c14 	add.w	ip, r4, #20
   3b9c8:	46ae      	mov	lr, r5
   3b9ca:	f04f 0a00 	mov.w	sl, #0
   3b9ce:	f8bc b000 	ldrh.w	fp, [ip]
   3b9d2:	b289      	uxth	r1, r1
   3b9d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   3b9d8:	fb09 220b 	mla	r2, r9, fp, r2
   3b9dc:	4492      	add	sl, r2
   3b9de:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   3b9e2:	f84e 1b04 	str.w	r1, [lr], #4
   3b9e6:	f85c 2b04 	ldr.w	r2, [ip], #4
   3b9ea:	f8be 1000 	ldrh.w	r1, [lr]
   3b9ee:	0c12      	lsrs	r2, r2, #16
   3b9f0:	4567      	cmp	r7, ip
   3b9f2:	fb09 1102 	mla	r1, r9, r2, r1
   3b9f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   3b9fa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   3b9fe:	d8e6      	bhi.n	3b9ce <__multiply+0x10a>
   3ba00:	9a01      	ldr	r2, [sp, #4]
   3ba02:	50a9      	str	r1, [r5, r2]
   3ba04:	3504      	adds	r5, #4
   3ba06:	e79a      	b.n	3b93e <__multiply+0x7a>
   3ba08:	3e01      	subs	r6, #1
   3ba0a:	e79c      	b.n	3b946 <__multiply+0x82>
   3ba0c:	0004c0e9 	.word	0x0004c0e9
   3ba10:	0004c180 	.word	0x0004c180

0003ba14 <__pow5mult>:
   3ba14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ba18:	4615      	mov	r5, r2
   3ba1a:	f012 0203 	ands.w	r2, r2, #3
   3ba1e:	4606      	mov	r6, r0
   3ba20:	460f      	mov	r7, r1
   3ba22:	d007      	beq.n	3ba34 <__pow5mult+0x20>
   3ba24:	3a01      	subs	r2, #1
   3ba26:	4c25      	ldr	r4, [pc, #148]	; (3babc <__pow5mult+0xa8>)
   3ba28:	2300      	movs	r3, #0
   3ba2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   3ba2e:	f7ff fea1 	bl	3b774 <__multadd>
   3ba32:	4607      	mov	r7, r0
   3ba34:	10ad      	asrs	r5, r5, #2
   3ba36:	d03d      	beq.n	3bab4 <__pow5mult+0xa0>
   3ba38:	6a74      	ldr	r4, [r6, #36]	; 0x24
   3ba3a:	b97c      	cbnz	r4, 3ba5c <__pow5mult+0x48>
   3ba3c:	2010      	movs	r0, #16
   3ba3e:	f7fe f949 	bl	39cd4 <malloc>
   3ba42:	4602      	mov	r2, r0
   3ba44:	6270      	str	r0, [r6, #36]	; 0x24
   3ba46:	b928      	cbnz	r0, 3ba54 <__pow5mult+0x40>
   3ba48:	4b1d      	ldr	r3, [pc, #116]	; (3bac0 <__pow5mult+0xac>)
   3ba4a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   3ba4e:	481d      	ldr	r0, [pc, #116]	; (3bac4 <__pow5mult+0xb0>)
   3ba50:	f7fe f864 	bl	39b1c <__assert_func>
   3ba54:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3ba58:	6004      	str	r4, [r0, #0]
   3ba5a:	60c4      	str	r4, [r0, #12]
   3ba5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   3ba60:	f8d8 4008 	ldr.w	r4, [r8, #8]
   3ba64:	b94c      	cbnz	r4, 3ba7a <__pow5mult+0x66>
   3ba66:	f240 2171 	movw	r1, #625	; 0x271
   3ba6a:	4630      	mov	r0, r6
   3ba6c:	f7ff ff14 	bl	3b898 <__i2b>
   3ba70:	2300      	movs	r3, #0
   3ba72:	4604      	mov	r4, r0
   3ba74:	f8c8 0008 	str.w	r0, [r8, #8]
   3ba78:	6003      	str	r3, [r0, #0]
   3ba7a:	f04f 0900 	mov.w	r9, #0
   3ba7e:	07eb      	lsls	r3, r5, #31
   3ba80:	d50a      	bpl.n	3ba98 <__pow5mult+0x84>
   3ba82:	4639      	mov	r1, r7
   3ba84:	4622      	mov	r2, r4
   3ba86:	4630      	mov	r0, r6
   3ba88:	f7ff ff1c 	bl	3b8c4 <__multiply>
   3ba8c:	4680      	mov	r8, r0
   3ba8e:	4639      	mov	r1, r7
   3ba90:	4630      	mov	r0, r6
   3ba92:	4647      	mov	r7, r8
   3ba94:	f7ff fe4c 	bl	3b730 <_Bfree>
   3ba98:	106d      	asrs	r5, r5, #1
   3ba9a:	d00b      	beq.n	3bab4 <__pow5mult+0xa0>
   3ba9c:	6820      	ldr	r0, [r4, #0]
   3ba9e:	b938      	cbnz	r0, 3bab0 <__pow5mult+0x9c>
   3baa0:	4622      	mov	r2, r4
   3baa2:	4621      	mov	r1, r4
   3baa4:	4630      	mov	r0, r6
   3baa6:	f7ff ff0d 	bl	3b8c4 <__multiply>
   3baaa:	6020      	str	r0, [r4, #0]
   3baac:	f8c0 9000 	str.w	r9, [r0]
   3bab0:	4604      	mov	r4, r0
   3bab2:	e7e4      	b.n	3ba7e <__pow5mult+0x6a>
   3bab4:	4638      	mov	r0, r7
   3bab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3baba:	bf00      	nop
   3babc:	00043668 	.word	0x00043668
   3bac0:	0004c05e 	.word	0x0004c05e
   3bac4:	0004c180 	.word	0x0004c180

0003bac8 <__lshift>:
   3bac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3bacc:	460c      	mov	r4, r1
   3bace:	4607      	mov	r7, r0
   3bad0:	4691      	mov	r9, r2
   3bad2:	ea4f 1a62 	mov.w	sl, r2, asr #5
   3bad6:	6923      	ldr	r3, [r4, #16]
   3bad8:	6849      	ldr	r1, [r1, #4]
   3bada:	eb03 1862 	add.w	r8, r3, r2, asr #5
   3bade:	68a3      	ldr	r3, [r4, #8]
   3bae0:	f108 0601 	add.w	r6, r8, #1
   3bae4:	42b3      	cmp	r3, r6
   3bae6:	db0b      	blt.n	3bb00 <__lshift+0x38>
   3bae8:	4638      	mov	r0, r7
   3baea:	f7ff fde1 	bl	3b6b0 <_Balloc>
   3baee:	4605      	mov	r5, r0
   3baf0:	b948      	cbnz	r0, 3bb06 <__lshift+0x3e>
   3baf2:	4602      	mov	r2, r0
   3baf4:	4b2a      	ldr	r3, [pc, #168]	; (3bba0 <__lshift+0xd8>)
   3baf6:	f240 11d9 	movw	r1, #473	; 0x1d9
   3bafa:	482a      	ldr	r0, [pc, #168]	; (3bba4 <__lshift+0xdc>)
   3bafc:	f7fe f80e 	bl	39b1c <__assert_func>
   3bb00:	3101      	adds	r1, #1
   3bb02:	005b      	lsls	r3, r3, #1
   3bb04:	e7ee      	b.n	3bae4 <__lshift+0x1c>
   3bb06:	2300      	movs	r3, #0
   3bb08:	f100 0114 	add.w	r1, r0, #20
   3bb0c:	f100 0210 	add.w	r2, r0, #16
   3bb10:	4618      	mov	r0, r3
   3bb12:	4553      	cmp	r3, sl
   3bb14:	db37      	blt.n	3bb86 <__lshift+0xbe>
   3bb16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   3bb1a:	f104 0314 	add.w	r3, r4, #20
   3bb1e:	6920      	ldr	r0, [r4, #16]
   3bb20:	f019 091f 	ands.w	r9, r9, #31
   3bb24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   3bb28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   3bb2c:	d02f      	beq.n	3bb8e <__lshift+0xc6>
   3bb2e:	f1c9 0e20 	rsb	lr, r9, #32
   3bb32:	468a      	mov	sl, r1
   3bb34:	f04f 0c00 	mov.w	ip, #0
   3bb38:	681a      	ldr	r2, [r3, #0]
   3bb3a:	fa02 f209 	lsl.w	r2, r2, r9
   3bb3e:	ea42 020c 	orr.w	r2, r2, ip
   3bb42:	f84a 2b04 	str.w	r2, [sl], #4
   3bb46:	f853 2b04 	ldr.w	r2, [r3], #4
   3bb4a:	4298      	cmp	r0, r3
   3bb4c:	fa22 fc0e 	lsr.w	ip, r2, lr
   3bb50:	d8f2      	bhi.n	3bb38 <__lshift+0x70>
   3bb52:	1b03      	subs	r3, r0, r4
   3bb54:	f104 0215 	add.w	r2, r4, #21
   3bb58:	3b15      	subs	r3, #21
   3bb5a:	f023 0303 	bic.w	r3, r3, #3
   3bb5e:	3304      	adds	r3, #4
   3bb60:	4290      	cmp	r0, r2
   3bb62:	bf38      	it	cc
   3bb64:	2304      	movcc	r3, #4
   3bb66:	f841 c003 	str.w	ip, [r1, r3]
   3bb6a:	f1bc 0f00 	cmp.w	ip, #0
   3bb6e:	d001      	beq.n	3bb74 <__lshift+0xac>
   3bb70:	f108 0602 	add.w	r6, r8, #2
   3bb74:	3e01      	subs	r6, #1
   3bb76:	4638      	mov	r0, r7
   3bb78:	4621      	mov	r1, r4
   3bb7a:	612e      	str	r6, [r5, #16]
   3bb7c:	f7ff fdd8 	bl	3b730 <_Bfree>
   3bb80:	4628      	mov	r0, r5
   3bb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3bb86:	3301      	adds	r3, #1
   3bb88:	f842 0f04 	str.w	r0, [r2, #4]!
   3bb8c:	e7c1      	b.n	3bb12 <__lshift+0x4a>
   3bb8e:	3904      	subs	r1, #4
   3bb90:	f853 2b04 	ldr.w	r2, [r3], #4
   3bb94:	4298      	cmp	r0, r3
   3bb96:	f841 2f04 	str.w	r2, [r1, #4]!
   3bb9a:	d8f9      	bhi.n	3bb90 <__lshift+0xc8>
   3bb9c:	e7ea      	b.n	3bb74 <__lshift+0xac>
   3bb9e:	bf00      	nop
   3bba0:	0004c0e9 	.word	0x0004c0e9
   3bba4:	0004c180 	.word	0x0004c180

0003bba8 <__mdiff>:
   3bba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bbac:	460c      	mov	r4, r1
   3bbae:	4606      	mov	r6, r0
   3bbb0:	4611      	mov	r1, r2
   3bbb2:	4692      	mov	sl, r2
   3bbb4:	4620      	mov	r0, r4
   3bbb6:	f006 fa37 	bl	42028 <__mcmp>
   3bbba:	1e05      	subs	r5, r0, #0
   3bbbc:	d110      	bne.n	3bbe0 <__mdiff+0x38>
   3bbbe:	4629      	mov	r1, r5
   3bbc0:	4630      	mov	r0, r6
   3bbc2:	f7ff fd75 	bl	3b6b0 <_Balloc>
   3bbc6:	b930      	cbnz	r0, 3bbd6 <__mdiff+0x2e>
   3bbc8:	4b3d      	ldr	r3, [pc, #244]	; (3bcc0 <__mdiff+0x118>)
   3bbca:	4602      	mov	r2, r0
   3bbcc:	f240 2132 	movw	r1, #562	; 0x232
   3bbd0:	483c      	ldr	r0, [pc, #240]	; (3bcc4 <__mdiff+0x11c>)
   3bbd2:	f7fd ffa3 	bl	39b1c <__assert_func>
   3bbd6:	2301      	movs	r3, #1
   3bbd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
   3bbdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bbe0:	bfa4      	itt	ge
   3bbe2:	4653      	movge	r3, sl
   3bbe4:	46a2      	movge	sl, r4
   3bbe6:	4630      	mov	r0, r6
   3bbe8:	bfa8      	it	ge
   3bbea:	2500      	movge	r5, #0
   3bbec:	f8da 1004 	ldr.w	r1, [sl, #4]
   3bbf0:	bfac      	ite	ge
   3bbf2:	461c      	movge	r4, r3
   3bbf4:	2501      	movlt	r5, #1
   3bbf6:	f7ff fd5b 	bl	3b6b0 <_Balloc>
   3bbfa:	b920      	cbnz	r0, 3bc06 <__mdiff+0x5e>
   3bbfc:	4b30      	ldr	r3, [pc, #192]	; (3bcc0 <__mdiff+0x118>)
   3bbfe:	4602      	mov	r2, r0
   3bc00:	f44f 7110 	mov.w	r1, #576	; 0x240
   3bc04:	e7e4      	b.n	3bbd0 <__mdiff+0x28>
   3bc06:	f8da 7010 	ldr.w	r7, [sl, #16]
   3bc0a:	f104 0914 	add.w	r9, r4, #20
   3bc0e:	6926      	ldr	r6, [r4, #16]
   3bc10:	f100 0814 	add.w	r8, r0, #20
   3bc14:	60c5      	str	r5, [r0, #12]
   3bc16:	f10a 0514 	add.w	r5, sl, #20
   3bc1a:	f10a 0210 	add.w	r2, sl, #16
   3bc1e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   3bc22:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   3bc26:	46c2      	mov	sl, r8
   3bc28:	f04f 0c00 	mov.w	ip, #0
   3bc2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
   3bc30:	f859 3b04 	ldr.w	r3, [r9], #4
   3bc34:	fa1f f18b 	uxth.w	r1, fp
   3bc38:	454e      	cmp	r6, r9
   3bc3a:	448c      	add	ip, r1
   3bc3c:	b299      	uxth	r1, r3
   3bc3e:	ea4f 4313 	mov.w	r3, r3, lsr #16
   3bc42:	ebac 0101 	sub.w	r1, ip, r1
   3bc46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   3bc4a:	eb03 4321 	add.w	r3, r3, r1, asr #16
   3bc4e:	b289      	uxth	r1, r1
   3bc50:	ea4f 4c23 	mov.w	ip, r3, asr #16
   3bc54:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   3bc58:	f84a 3b04 	str.w	r3, [sl], #4
   3bc5c:	d8e6      	bhi.n	3bc2c <__mdiff+0x84>
   3bc5e:	1b33      	subs	r3, r6, r4
   3bc60:	3415      	adds	r4, #21
   3bc62:	3b15      	subs	r3, #21
   3bc64:	f023 0303 	bic.w	r3, r3, #3
   3bc68:	3304      	adds	r3, #4
   3bc6a:	42a6      	cmp	r6, r4
   3bc6c:	bf38      	it	cc
   3bc6e:	2304      	movcc	r3, #4
   3bc70:	441d      	add	r5, r3
   3bc72:	4443      	add	r3, r8
   3bc74:	462c      	mov	r4, r5
   3bc76:	461e      	mov	r6, r3
   3bc78:	4574      	cmp	r4, lr
   3bc7a:	d30e      	bcc.n	3bc9a <__mdiff+0xf2>
   3bc7c:	f10e 0203 	add.w	r2, lr, #3
   3bc80:	1b52      	subs	r2, r2, r5
   3bc82:	3d03      	subs	r5, #3
   3bc84:	f022 0203 	bic.w	r2, r2, #3
   3bc88:	45ae      	cmp	lr, r5
   3bc8a:	bf38      	it	cc
   3bc8c:	2200      	movcc	r2, #0
   3bc8e:	441a      	add	r2, r3
   3bc90:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   3bc94:	b18b      	cbz	r3, 3bcba <__mdiff+0x112>
   3bc96:	6107      	str	r7, [r0, #16]
   3bc98:	e7a0      	b.n	3bbdc <__mdiff+0x34>
   3bc9a:	f854 8b04 	ldr.w	r8, [r4], #4
   3bc9e:	fa1f f288 	uxth.w	r2, r8
   3bca2:	4462      	add	r2, ip
   3bca4:	1411      	asrs	r1, r2, #16
   3bca6:	b292      	uxth	r2, r2
   3bca8:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   3bcac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   3bcb0:	ea4f 4c21 	mov.w	ip, r1, asr #16
   3bcb4:	f846 2b04 	str.w	r2, [r6], #4
   3bcb8:	e7de      	b.n	3bc78 <__mdiff+0xd0>
   3bcba:	3f01      	subs	r7, #1
   3bcbc:	e7e8      	b.n	3bc90 <__mdiff+0xe8>
   3bcbe:	bf00      	nop
   3bcc0:	0004c0e9 	.word	0x0004c0e9
   3bcc4:	0004c180 	.word	0x0004c180

0003bcc8 <__ulp>:
   3bcc8:	4b10      	ldr	r3, [pc, #64]	; (3bd0c <__ulp+0x44>)
   3bcca:	400b      	ands	r3, r1
   3bccc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   3bcd0:	2b00      	cmp	r3, #0
   3bcd2:	dd02      	ble.n	3bcda <__ulp+0x12>
   3bcd4:	2000      	movs	r0, #0
   3bcd6:	4619      	mov	r1, r3
   3bcd8:	4770      	bx	lr
   3bcda:	425b      	negs	r3, r3
   3bcdc:	2000      	movs	r0, #0
   3bcde:	2100      	movs	r1, #0
   3bce0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   3bce4:	ea4f 5223 	mov.w	r2, r3, asr #20
   3bce8:	da04      	bge.n	3bcf4 <__ulp+0x2c>
   3bcea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   3bcee:	fa43 f102 	asr.w	r1, r3, r2
   3bcf2:	4770      	bx	lr
   3bcf4:	f1a2 0314 	sub.w	r3, r2, #20
   3bcf8:	2b1e      	cmp	r3, #30
   3bcfa:	bfd6      	itet	le
   3bcfc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   3bd00:	2301      	movgt	r3, #1
   3bd02:	fa22 f303 	lsrle.w	r3, r2, r3
   3bd06:	4618      	mov	r0, r3
   3bd08:	4770      	bx	lr
   3bd0a:	bf00      	nop
   3bd0c:	7ff00000 	.word	0x7ff00000

0003bd10 <__b2d>:
   3bd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bd14:	6906      	ldr	r6, [r0, #16]
   3bd16:	f100 0814 	add.w	r8, r0, #20
   3bd1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
   3bd1e:	f856 2c04 	ldr.w	r2, [r6, #-4]
   3bd22:	1f37      	subs	r7, r6, #4
   3bd24:	4610      	mov	r0, r2
   3bd26:	f006 f930 	bl	41f8a <__hi0bits>
   3bd2a:	f1c0 0320 	rsb	r3, r0, #32
   3bd2e:	280a      	cmp	r0, #10
   3bd30:	f8df c07c 	ldr.w	ip, [pc, #124]	; 3bdb0 <__b2d+0xa0>
   3bd34:	600b      	str	r3, [r1, #0]
   3bd36:	dc16      	bgt.n	3bd66 <__b2d+0x56>
   3bd38:	f1c0 0e0b 	rsb	lr, r0, #11
   3bd3c:	45b8      	cmp	r8, r7
   3bd3e:	fa22 f30e 	lsr.w	r3, r2, lr
   3bd42:	bf34      	ite	cc
   3bd44:	f856 1c08 	ldrcc.w	r1, [r6, #-8]
   3bd48:	2100      	movcs	r1, #0
   3bd4a:	ea43 050c 	orr.w	r5, r3, ip
   3bd4e:	f100 0315 	add.w	r3, r0, #21
   3bd52:	fa21 f10e 	lsr.w	r1, r1, lr
   3bd56:	fa02 f303 	lsl.w	r3, r2, r3
   3bd5a:	ea43 0401 	orr.w	r4, r3, r1
   3bd5e:	4620      	mov	r0, r4
   3bd60:	4629      	mov	r1, r5
   3bd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3bd66:	45b8      	cmp	r8, r7
   3bd68:	bf3a      	itte	cc
   3bd6a:	f1a6 0708 	subcc.w	r7, r6, #8
   3bd6e:	f856 1c08 	ldrcc.w	r1, [r6, #-8]
   3bd72:	2100      	movcs	r1, #0
   3bd74:	f1b0 030b 	subs.w	r3, r0, #11
   3bd78:	d016      	beq.n	3bda8 <__b2d+0x98>
   3bd7a:	f1c3 0620 	rsb	r6, r3, #32
   3bd7e:	fa02 f003 	lsl.w	r0, r2, r3
   3bd82:	4547      	cmp	r7, r8
   3bd84:	fa21 f206 	lsr.w	r2, r1, r6
   3bd88:	ea40 0002 	orr.w	r0, r0, r2
   3bd8c:	bf8c      	ite	hi
   3bd8e:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
   3bd92:	2200      	movls	r2, #0
   3bd94:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
   3bd98:	fa01 f003 	lsl.w	r0, r1, r3
   3bd9c:	40f2      	lsrs	r2, r6
   3bd9e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   3bda2:	ea40 0402 	orr.w	r4, r0, r2
   3bda6:	e7da      	b.n	3bd5e <__b2d+0x4e>
   3bda8:	ea42 050c 	orr.w	r5, r2, ip
   3bdac:	460c      	mov	r4, r1
   3bdae:	e7d6      	b.n	3bd5e <__b2d+0x4e>
   3bdb0:	3ff00000 	.word	0x3ff00000

0003bdb4 <__d2b>:
   3bdb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3bdb8:	2101      	movs	r1, #1
   3bdba:	4690      	mov	r8, r2
   3bdbc:	4699      	mov	r9, r3
   3bdbe:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
   3bdc2:	f7ff fc75 	bl	3b6b0 <_Balloc>
   3bdc6:	4604      	mov	r4, r0
   3bdc8:	b930      	cbnz	r0, 3bdd8 <__d2b+0x24>
   3bdca:	4602      	mov	r2, r0
   3bdcc:	4b24      	ldr	r3, [pc, #144]	; (3be60 <__d2b+0xac>)
   3bdce:	f240 310a 	movw	r1, #778	; 0x30a
   3bdd2:	4824      	ldr	r0, [pc, #144]	; (3be64 <__d2b+0xb0>)
   3bdd4:	f7fd fea2 	bl	39b1c <__assert_func>
   3bdd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
   3bddc:	f3c9 0313 	ubfx	r3, r9, #0, #20
   3bde0:	bb2d      	cbnz	r5, 3be2e <__d2b+0x7a>
   3bde2:	f1b8 0200 	subs.w	r2, r8, #0
   3bde6:	9301      	str	r3, [sp, #4]
   3bde8:	d026      	beq.n	3be38 <__d2b+0x84>
   3bdea:	4668      	mov	r0, sp
   3bdec:	9200      	str	r2, [sp, #0]
   3bdee:	f006 f8ec 	bl	41fca <__lo0bits>
   3bdf2:	9900      	ldr	r1, [sp, #0]
   3bdf4:	b1f0      	cbz	r0, 3be34 <__d2b+0x80>
   3bdf6:	9a01      	ldr	r2, [sp, #4]
   3bdf8:	f1c0 0320 	rsb	r3, r0, #32
   3bdfc:	fa02 f303 	lsl.w	r3, r2, r3
   3be00:	40c2      	lsrs	r2, r0
   3be02:	430b      	orrs	r3, r1
   3be04:	9201      	str	r2, [sp, #4]
   3be06:	6163      	str	r3, [r4, #20]
   3be08:	9b01      	ldr	r3, [sp, #4]
   3be0a:	2b00      	cmp	r3, #0
   3be0c:	61a3      	str	r3, [r4, #24]
   3be0e:	bf14      	ite	ne
   3be10:	2202      	movne	r2, #2
   3be12:	2201      	moveq	r2, #1
   3be14:	6122      	str	r2, [r4, #16]
   3be16:	b1c5      	cbz	r5, 3be4a <__d2b+0x96>
   3be18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   3be1c:	4405      	add	r5, r0
   3be1e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   3be22:	603d      	str	r5, [r7, #0]
   3be24:	6030      	str	r0, [r6, #0]
   3be26:	4620      	mov	r0, r4
   3be28:	b003      	add	sp, #12
   3be2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3be2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3be32:	e7d6      	b.n	3bde2 <__d2b+0x2e>
   3be34:	6161      	str	r1, [r4, #20]
   3be36:	e7e7      	b.n	3be08 <__d2b+0x54>
   3be38:	a801      	add	r0, sp, #4
   3be3a:	f006 f8c6 	bl	41fca <__lo0bits>
   3be3e:	9b01      	ldr	r3, [sp, #4]
   3be40:	2201      	movs	r2, #1
   3be42:	3020      	adds	r0, #32
   3be44:	6163      	str	r3, [r4, #20]
   3be46:	6122      	str	r2, [r4, #16]
   3be48:	e7e5      	b.n	3be16 <__d2b+0x62>
   3be4a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   3be4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   3be52:	6038      	str	r0, [r7, #0]
   3be54:	6918      	ldr	r0, [r3, #16]
   3be56:	f006 f898 	bl	41f8a <__hi0bits>
   3be5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   3be5e:	e7e1      	b.n	3be24 <__d2b+0x70>
   3be60:	0004c0e9 	.word	0x0004c0e9
   3be64:	0004c180 	.word	0x0004c180

0003be68 <_svfiprintf_r>:
   3be68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3be6c:	4698      	mov	r8, r3
   3be6e:	898b      	ldrh	r3, [r1, #12]
   3be70:	b09d      	sub	sp, #116	; 0x74
   3be72:	4607      	mov	r7, r0
   3be74:	061b      	lsls	r3, r3, #24
   3be76:	460d      	mov	r5, r1
   3be78:	4614      	mov	r4, r2
   3be7a:	d50e      	bpl.n	3be9a <_svfiprintf_r+0x32>
   3be7c:	690b      	ldr	r3, [r1, #16]
   3be7e:	b963      	cbnz	r3, 3be9a <_svfiprintf_r+0x32>
   3be80:	2140      	movs	r1, #64	; 0x40
   3be82:	f7fd ff83 	bl	39d8c <_malloc_r>
   3be86:	6028      	str	r0, [r5, #0]
   3be88:	6128      	str	r0, [r5, #16]
   3be8a:	b920      	cbnz	r0, 3be96 <_svfiprintf_r+0x2e>
   3be8c:	230c      	movs	r3, #12
   3be8e:	603b      	str	r3, [r7, #0]
   3be90:	f04f 30ff 	mov.w	r0, #4294967295
   3be94:	e0d1      	b.n	3c03a <_svfiprintf_r+0x1d2>
   3be96:	2340      	movs	r3, #64	; 0x40
   3be98:	616b      	str	r3, [r5, #20]
   3be9a:	2300      	movs	r3, #0
   3be9c:	f8cd 800c 	str.w	r8, [sp, #12]
   3bea0:	f04f 0901 	mov.w	r9, #1
   3bea4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 3c054 <_svfiprintf_r+0x1ec>
   3bea8:	9309      	str	r3, [sp, #36]	; 0x24
   3beaa:	2320      	movs	r3, #32
   3beac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3beb0:	2330      	movs	r3, #48	; 0x30
   3beb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3beb6:	4623      	mov	r3, r4
   3beb8:	469a      	mov	sl, r3
   3beba:	f813 2b01 	ldrb.w	r2, [r3], #1
   3bebe:	b10a      	cbz	r2, 3bec4 <_svfiprintf_r+0x5c>
   3bec0:	2a25      	cmp	r2, #37	; 0x25
   3bec2:	d1f9      	bne.n	3beb8 <_svfiprintf_r+0x50>
   3bec4:	ebba 0b04 	subs.w	fp, sl, r4
   3bec8:	d00b      	beq.n	3bee2 <_svfiprintf_r+0x7a>
   3beca:	465b      	mov	r3, fp
   3becc:	4622      	mov	r2, r4
   3bece:	4629      	mov	r1, r5
   3bed0:	4638      	mov	r0, r7
   3bed2:	f006 f95d 	bl	42190 <__ssputs_r>
   3bed6:	3001      	adds	r0, #1
   3bed8:	f000 80aa 	beq.w	3c030 <_svfiprintf_r+0x1c8>
   3bedc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3bede:	445a      	add	r2, fp
   3bee0:	9209      	str	r2, [sp, #36]	; 0x24
   3bee2:	f89a 3000 	ldrb.w	r3, [sl]
   3bee6:	2b00      	cmp	r3, #0
   3bee8:	f000 80a2 	beq.w	3c030 <_svfiprintf_r+0x1c8>
   3beec:	2300      	movs	r3, #0
   3beee:	f04f 32ff 	mov.w	r2, #4294967295
   3bef2:	f10a 0a01 	add.w	sl, sl, #1
   3bef6:	9304      	str	r3, [sp, #16]
   3bef8:	9307      	str	r3, [sp, #28]
   3befa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3befe:	931a      	str	r3, [sp, #104]	; 0x68
   3bf00:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3bf04:	4654      	mov	r4, sl
   3bf06:	2205      	movs	r2, #5
   3bf08:	4852      	ldr	r0, [pc, #328]	; (3c054 <_svfiprintf_r+0x1ec>)
   3bf0a:	f814 1b01 	ldrb.w	r1, [r4], #1
   3bf0e:	f005 fb3a 	bl	41586 <memchr>
   3bf12:	9a04      	ldr	r2, [sp, #16]
   3bf14:	b9d8      	cbnz	r0, 3bf4e <_svfiprintf_r+0xe6>
   3bf16:	06d0      	lsls	r0, r2, #27
   3bf18:	bf44      	itt	mi
   3bf1a:	2320      	movmi	r3, #32
   3bf1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3bf20:	0711      	lsls	r1, r2, #28
   3bf22:	bf44      	itt	mi
   3bf24:	232b      	movmi	r3, #43	; 0x2b
   3bf26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3bf2a:	f89a 3000 	ldrb.w	r3, [sl]
   3bf2e:	2b2a      	cmp	r3, #42	; 0x2a
   3bf30:	d015      	beq.n	3bf5e <_svfiprintf_r+0xf6>
   3bf32:	9a07      	ldr	r2, [sp, #28]
   3bf34:	4654      	mov	r4, sl
   3bf36:	2000      	movs	r0, #0
   3bf38:	f04f 0c0a 	mov.w	ip, #10
   3bf3c:	4621      	mov	r1, r4
   3bf3e:	f811 3b01 	ldrb.w	r3, [r1], #1
   3bf42:	3b30      	subs	r3, #48	; 0x30
   3bf44:	2b09      	cmp	r3, #9
   3bf46:	d94e      	bls.n	3bfe6 <_svfiprintf_r+0x17e>
   3bf48:	b1b0      	cbz	r0, 3bf78 <_svfiprintf_r+0x110>
   3bf4a:	9207      	str	r2, [sp, #28]
   3bf4c:	e014      	b.n	3bf78 <_svfiprintf_r+0x110>
   3bf4e:	eba0 0308 	sub.w	r3, r0, r8
   3bf52:	46a2      	mov	sl, r4
   3bf54:	fa09 f303 	lsl.w	r3, r9, r3
   3bf58:	4313      	orrs	r3, r2
   3bf5a:	9304      	str	r3, [sp, #16]
   3bf5c:	e7d2      	b.n	3bf04 <_svfiprintf_r+0x9c>
   3bf5e:	9b03      	ldr	r3, [sp, #12]
   3bf60:	1d19      	adds	r1, r3, #4
   3bf62:	681b      	ldr	r3, [r3, #0]
   3bf64:	2b00      	cmp	r3, #0
   3bf66:	9103      	str	r1, [sp, #12]
   3bf68:	bfbb      	ittet	lt
   3bf6a:	425b      	neglt	r3, r3
   3bf6c:	f042 0202 	orrlt.w	r2, r2, #2
   3bf70:	9307      	strge	r3, [sp, #28]
   3bf72:	9307      	strlt	r3, [sp, #28]
   3bf74:	bfb8      	it	lt
   3bf76:	9204      	strlt	r2, [sp, #16]
   3bf78:	7823      	ldrb	r3, [r4, #0]
   3bf7a:	2b2e      	cmp	r3, #46	; 0x2e
   3bf7c:	d10c      	bne.n	3bf98 <_svfiprintf_r+0x130>
   3bf7e:	7863      	ldrb	r3, [r4, #1]
   3bf80:	2b2a      	cmp	r3, #42	; 0x2a
   3bf82:	d135      	bne.n	3bff0 <_svfiprintf_r+0x188>
   3bf84:	9b03      	ldr	r3, [sp, #12]
   3bf86:	3402      	adds	r4, #2
   3bf88:	1d1a      	adds	r2, r3, #4
   3bf8a:	681b      	ldr	r3, [r3, #0]
   3bf8c:	2b00      	cmp	r3, #0
   3bf8e:	9203      	str	r2, [sp, #12]
   3bf90:	bfb8      	it	lt
   3bf92:	f04f 33ff 	movlt.w	r3, #4294967295
   3bf96:	9305      	str	r3, [sp, #20]
   3bf98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3c064 <_svfiprintf_r+0x1fc>
   3bf9c:	2203      	movs	r2, #3
   3bf9e:	7821      	ldrb	r1, [r4, #0]
   3bfa0:	4650      	mov	r0, sl
   3bfa2:	f005 faf0 	bl	41586 <memchr>
   3bfa6:	b140      	cbz	r0, 3bfba <_svfiprintf_r+0x152>
   3bfa8:	2340      	movs	r3, #64	; 0x40
   3bfaa:	eba0 000a 	sub.w	r0, r0, sl
   3bfae:	3401      	adds	r4, #1
   3bfb0:	fa03 f000 	lsl.w	r0, r3, r0
   3bfb4:	9b04      	ldr	r3, [sp, #16]
   3bfb6:	4303      	orrs	r3, r0
   3bfb8:	9304      	str	r3, [sp, #16]
   3bfba:	f814 1b01 	ldrb.w	r1, [r4], #1
   3bfbe:	2206      	movs	r2, #6
   3bfc0:	4825      	ldr	r0, [pc, #148]	; (3c058 <_svfiprintf_r+0x1f0>)
   3bfc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3bfc6:	f005 fade 	bl	41586 <memchr>
   3bfca:	2800      	cmp	r0, #0
   3bfcc:	d038      	beq.n	3c040 <_svfiprintf_r+0x1d8>
   3bfce:	4b23      	ldr	r3, [pc, #140]	; (3c05c <_svfiprintf_r+0x1f4>)
   3bfd0:	bb1b      	cbnz	r3, 3c01a <_svfiprintf_r+0x1b2>
   3bfd2:	9b03      	ldr	r3, [sp, #12]
   3bfd4:	3307      	adds	r3, #7
   3bfd6:	f023 0307 	bic.w	r3, r3, #7
   3bfda:	3308      	adds	r3, #8
   3bfdc:	9303      	str	r3, [sp, #12]
   3bfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3bfe0:	4433      	add	r3, r6
   3bfe2:	9309      	str	r3, [sp, #36]	; 0x24
   3bfe4:	e767      	b.n	3beb6 <_svfiprintf_r+0x4e>
   3bfe6:	fb0c 3202 	mla	r2, ip, r2, r3
   3bfea:	460c      	mov	r4, r1
   3bfec:	2001      	movs	r0, #1
   3bfee:	e7a5      	b.n	3bf3c <_svfiprintf_r+0xd4>
   3bff0:	2300      	movs	r3, #0
   3bff2:	3401      	adds	r4, #1
   3bff4:	f04f 0c0a 	mov.w	ip, #10
   3bff8:	4619      	mov	r1, r3
   3bffa:	9305      	str	r3, [sp, #20]
   3bffc:	4620      	mov	r0, r4
   3bffe:	f810 2b01 	ldrb.w	r2, [r0], #1
   3c002:	3a30      	subs	r2, #48	; 0x30
   3c004:	2a09      	cmp	r2, #9
   3c006:	d903      	bls.n	3c010 <_svfiprintf_r+0x1a8>
   3c008:	2b00      	cmp	r3, #0
   3c00a:	d0c5      	beq.n	3bf98 <_svfiprintf_r+0x130>
   3c00c:	9105      	str	r1, [sp, #20]
   3c00e:	e7c3      	b.n	3bf98 <_svfiprintf_r+0x130>
   3c010:	fb0c 2101 	mla	r1, ip, r1, r2
   3c014:	4604      	mov	r4, r0
   3c016:	2301      	movs	r3, #1
   3c018:	e7f0      	b.n	3bffc <_svfiprintf_r+0x194>
   3c01a:	ab03      	add	r3, sp, #12
   3c01c:	462a      	mov	r2, r5
   3c01e:	a904      	add	r1, sp, #16
   3c020:	4638      	mov	r0, r7
   3c022:	9300      	str	r3, [sp, #0]
   3c024:	4b0e      	ldr	r3, [pc, #56]	; (3c060 <_svfiprintf_r+0x1f8>)
   3c026:	f7fe f83b 	bl	3a0a0 <_printf_float>
   3c02a:	1c42      	adds	r2, r0, #1
   3c02c:	4606      	mov	r6, r0
   3c02e:	d1d6      	bne.n	3bfde <_svfiprintf_r+0x176>
   3c030:	89ab      	ldrh	r3, [r5, #12]
   3c032:	065b      	lsls	r3, r3, #25
   3c034:	f53f af2c 	bmi.w	3be90 <_svfiprintf_r+0x28>
   3c038:	9809      	ldr	r0, [sp, #36]	; 0x24
   3c03a:	b01d      	add	sp, #116	; 0x74
   3c03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c040:	ab03      	add	r3, sp, #12
   3c042:	462a      	mov	r2, r5
   3c044:	a904      	add	r1, sp, #16
   3c046:	4638      	mov	r0, r7
   3c048:	9300      	str	r3, [sp, #0]
   3c04a:	4b05      	ldr	r3, [pc, #20]	; (3c060 <_svfiprintf_r+0x1f8>)
   3c04c:	f7fe fa60 	bl	3a510 <_printf_i>
   3c050:	e7eb      	b.n	3c02a <_svfiprintf_r+0x1c2>
   3c052:	bf00      	nop
   3c054:	0004c00e 	.word	0x0004c00e
   3c058:	0004c018 	.word	0x0004c018
   3c05c:	0003a0a1 	.word	0x0003a0a1
   3c060:	00042191 	.word	0x00042191
   3c064:	0004c014 	.word	0x0004c014

0003c068 <__ssvfiscanf_r>:
   3c068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3c06c:	460c      	mov	r4, r1
   3c06e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   3c072:	2100      	movs	r1, #0
   3c074:	4606      	mov	r6, r0
   3c076:	f10d 0804 	add.w	r8, sp, #4
   3c07a:	4fa8      	ldr	r7, [pc, #672]	; (3c31c <__ssvfiscanf_r+0x2b4>)
   3c07c:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 3c328 <__ssvfiscanf_r+0x2c0>
   3c080:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   3c084:	9300      	str	r3, [sp, #0]
   3c086:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   3c08a:	49a5      	ldr	r1, [pc, #660]	; (3c320 <__ssvfiscanf_r+0x2b8>)
   3c08c:	91a0      	str	r1, [sp, #640]	; 0x280
   3c08e:	49a5      	ldr	r1, [pc, #660]	; (3c324 <__ssvfiscanf_r+0x2bc>)
   3c090:	91a1      	str	r1, [sp, #644]	; 0x284
   3c092:	7813      	ldrb	r3, [r2, #0]
   3c094:	2b00      	cmp	r3, #0
   3c096:	f000 815e 	beq.w	3c356 <__ssvfiscanf_r+0x2ee>
   3c09a:	5dd9      	ldrb	r1, [r3, r7]
   3c09c:	1c55      	adds	r5, r2, #1
   3c09e:	f011 0108 	ands.w	r1, r1, #8
   3c0a2:	d019      	beq.n	3c0d8 <__ssvfiscanf_r+0x70>
   3c0a4:	6863      	ldr	r3, [r4, #4]
   3c0a6:	2b00      	cmp	r3, #0
   3c0a8:	dd0f      	ble.n	3c0ca <__ssvfiscanf_r+0x62>
   3c0aa:	6823      	ldr	r3, [r4, #0]
   3c0ac:	781a      	ldrb	r2, [r3, #0]
   3c0ae:	5cba      	ldrb	r2, [r7, r2]
   3c0b0:	0712      	lsls	r2, r2, #28
   3c0b2:	d401      	bmi.n	3c0b8 <__ssvfiscanf_r+0x50>
   3c0b4:	462a      	mov	r2, r5
   3c0b6:	e7ec      	b.n	3c092 <__ssvfiscanf_r+0x2a>
   3c0b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3c0ba:	3301      	adds	r3, #1
   3c0bc:	3201      	adds	r2, #1
   3c0be:	6023      	str	r3, [r4, #0]
   3c0c0:	9245      	str	r2, [sp, #276]	; 0x114
   3c0c2:	6862      	ldr	r2, [r4, #4]
   3c0c4:	3a01      	subs	r2, #1
   3c0c6:	6062      	str	r2, [r4, #4]
   3c0c8:	e7ec      	b.n	3c0a4 <__ssvfiscanf_r+0x3c>
   3c0ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c0cc:	4621      	mov	r1, r4
   3c0ce:	4630      	mov	r0, r6
   3c0d0:	4798      	blx	r3
   3c0d2:	2800      	cmp	r0, #0
   3c0d4:	d0e9      	beq.n	3c0aa <__ssvfiscanf_r+0x42>
   3c0d6:	e7ed      	b.n	3c0b4 <__ssvfiscanf_r+0x4c>
   3c0d8:	2b25      	cmp	r3, #37	; 0x25
   3c0da:	d012      	beq.n	3c102 <__ssvfiscanf_r+0x9a>
   3c0dc:	469a      	mov	sl, r3
   3c0de:	6863      	ldr	r3, [r4, #4]
   3c0e0:	2b00      	cmp	r3, #0
   3c0e2:	f340 8094 	ble.w	3c20e <__ssvfiscanf_r+0x1a6>
   3c0e6:	6822      	ldr	r2, [r4, #0]
   3c0e8:	7813      	ldrb	r3, [r2, #0]
   3c0ea:	4553      	cmp	r3, sl
   3c0ec:	f040 8133 	bne.w	3c356 <__ssvfiscanf_r+0x2ee>
   3c0f0:	6863      	ldr	r3, [r4, #4]
   3c0f2:	3201      	adds	r2, #1
   3c0f4:	3b01      	subs	r3, #1
   3c0f6:	6022      	str	r2, [r4, #0]
   3c0f8:	6063      	str	r3, [r4, #4]
   3c0fa:	9b45      	ldr	r3, [sp, #276]	; 0x114
   3c0fc:	3301      	adds	r3, #1
   3c0fe:	9345      	str	r3, [sp, #276]	; 0x114
   3c100:	e7d8      	b.n	3c0b4 <__ssvfiscanf_r+0x4c>
   3c102:	9141      	str	r1, [sp, #260]	; 0x104
   3c104:	9143      	str	r1, [sp, #268]	; 0x10c
   3c106:	7853      	ldrb	r3, [r2, #1]
   3c108:	2b2a      	cmp	r3, #42	; 0x2a
   3c10a:	bf04      	itt	eq
   3c10c:	2310      	moveq	r3, #16
   3c10e:	1c95      	addeq	r5, r2, #2
   3c110:	f04f 020a 	mov.w	r2, #10
   3c114:	bf08      	it	eq
   3c116:	9341      	streq	r3, [sp, #260]	; 0x104
   3c118:	46aa      	mov	sl, r5
   3c11a:	f81a 1b01 	ldrb.w	r1, [sl], #1
   3c11e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3c122:	2b09      	cmp	r3, #9
   3c124:	d91d      	bls.n	3c162 <__ssvfiscanf_r+0xfa>
   3c126:	2203      	movs	r2, #3
   3c128:	487f      	ldr	r0, [pc, #508]	; (3c328 <__ssvfiscanf_r+0x2c0>)
   3c12a:	f005 fa2c 	bl	41586 <memchr>
   3c12e:	b140      	cbz	r0, 3c142 <__ssvfiscanf_r+0xda>
   3c130:	2301      	movs	r3, #1
   3c132:	eba0 0009 	sub.w	r0, r0, r9
   3c136:	4655      	mov	r5, sl
   3c138:	fa03 f000 	lsl.w	r0, r3, r0
   3c13c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c13e:	4318      	orrs	r0, r3
   3c140:	9041      	str	r0, [sp, #260]	; 0x104
   3c142:	f815 3b01 	ldrb.w	r3, [r5], #1
   3c146:	2b78      	cmp	r3, #120	; 0x78
   3c148:	d806      	bhi.n	3c158 <__ssvfiscanf_r+0xf0>
   3c14a:	2b57      	cmp	r3, #87	; 0x57
   3c14c:	d810      	bhi.n	3c170 <__ssvfiscanf_r+0x108>
   3c14e:	2b25      	cmp	r3, #37	; 0x25
   3c150:	d0c4      	beq.n	3c0dc <__ssvfiscanf_r+0x74>
   3c152:	d857      	bhi.n	3c204 <__ssvfiscanf_r+0x19c>
   3c154:	2b00      	cmp	r3, #0
   3c156:	d065      	beq.n	3c224 <__ssvfiscanf_r+0x1bc>
   3c158:	2303      	movs	r3, #3
   3c15a:	9347      	str	r3, [sp, #284]	; 0x11c
   3c15c:	230a      	movs	r3, #10
   3c15e:	9342      	str	r3, [sp, #264]	; 0x108
   3c160:	e072      	b.n	3c248 <__ssvfiscanf_r+0x1e0>
   3c162:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   3c164:	4655      	mov	r5, sl
   3c166:	fb02 1103 	mla	r1, r2, r3, r1
   3c16a:	3930      	subs	r1, #48	; 0x30
   3c16c:	9143      	str	r1, [sp, #268]	; 0x10c
   3c16e:	e7d3      	b.n	3c118 <__ssvfiscanf_r+0xb0>
   3c170:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   3c174:	2a20      	cmp	r2, #32
   3c176:	d8ef      	bhi.n	3c158 <__ssvfiscanf_r+0xf0>
   3c178:	a101      	add	r1, pc, #4	; (adr r1, 3c180 <__ssvfiscanf_r+0x118>)
   3c17a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   3c17e:	bf00      	nop
   3c180:	0003c233 	.word	0x0003c233
   3c184:	0003c159 	.word	0x0003c159
   3c188:	0003c159 	.word	0x0003c159
   3c18c:	0003c291 	.word	0x0003c291
   3c190:	0003c159 	.word	0x0003c159
   3c194:	0003c159 	.word	0x0003c159
   3c198:	0003c159 	.word	0x0003c159
   3c19c:	0003c159 	.word	0x0003c159
   3c1a0:	0003c159 	.word	0x0003c159
   3c1a4:	0003c159 	.word	0x0003c159
   3c1a8:	0003c159 	.word	0x0003c159
   3c1ac:	0003c2a7 	.word	0x0003c2a7
   3c1b0:	0003c27d 	.word	0x0003c27d
   3c1b4:	0003c20b 	.word	0x0003c20b
   3c1b8:	0003c20b 	.word	0x0003c20b
   3c1bc:	0003c20b 	.word	0x0003c20b
   3c1c0:	0003c159 	.word	0x0003c159
   3c1c4:	0003c281 	.word	0x0003c281
   3c1c8:	0003c159 	.word	0x0003c159
   3c1cc:	0003c159 	.word	0x0003c159
   3c1d0:	0003c159 	.word	0x0003c159
   3c1d4:	0003c159 	.word	0x0003c159
   3c1d8:	0003c2b7 	.word	0x0003c2b7
   3c1dc:	0003c289 	.word	0x0003c289
   3c1e0:	0003c22b 	.word	0x0003c22b
   3c1e4:	0003c159 	.word	0x0003c159
   3c1e8:	0003c159 	.word	0x0003c159
   3c1ec:	0003c2b3 	.word	0x0003c2b3
   3c1f0:	0003c159 	.word	0x0003c159
   3c1f4:	0003c27d 	.word	0x0003c27d
   3c1f8:	0003c159 	.word	0x0003c159
   3c1fc:	0003c159 	.word	0x0003c159
   3c200:	0003c233 	.word	0x0003c233
   3c204:	3b45      	subs	r3, #69	; 0x45
   3c206:	2b02      	cmp	r3, #2
   3c208:	d8a6      	bhi.n	3c158 <__ssvfiscanf_r+0xf0>
   3c20a:	2305      	movs	r3, #5
   3c20c:	e01b      	b.n	3c246 <__ssvfiscanf_r+0x1de>
   3c20e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c210:	4621      	mov	r1, r4
   3c212:	4630      	mov	r0, r6
   3c214:	4798      	blx	r3
   3c216:	2800      	cmp	r0, #0
   3c218:	f43f af65 	beq.w	3c0e6 <__ssvfiscanf_r+0x7e>
   3c21c:	9844      	ldr	r0, [sp, #272]	; 0x110
   3c21e:	2800      	cmp	r0, #0
   3c220:	f040 808f 	bne.w	3c342 <__ssvfiscanf_r+0x2da>
   3c224:	f04f 30ff 	mov.w	r0, #4294967295
   3c228:	e091      	b.n	3c34e <__ssvfiscanf_r+0x2e6>
   3c22a:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3c22c:	f042 0220 	orr.w	r2, r2, #32
   3c230:	9241      	str	r2, [sp, #260]	; 0x104
   3c232:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3c234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3c238:	9241      	str	r2, [sp, #260]	; 0x104
   3c23a:	2210      	movs	r2, #16
   3c23c:	2b6f      	cmp	r3, #111	; 0x6f
   3c23e:	9242      	str	r2, [sp, #264]	; 0x108
   3c240:	bf34      	ite	cc
   3c242:	2303      	movcc	r3, #3
   3c244:	2304      	movcs	r3, #4
   3c246:	9347      	str	r3, [sp, #284]	; 0x11c
   3c248:	6863      	ldr	r3, [r4, #4]
   3c24a:	2b00      	cmp	r3, #0
   3c24c:	dd43      	ble.n	3c2d6 <__ssvfiscanf_r+0x26e>
   3c24e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c250:	0659      	lsls	r1, r3, #25
   3c252:	d404      	bmi.n	3c25e <__ssvfiscanf_r+0x1f6>
   3c254:	6823      	ldr	r3, [r4, #0]
   3c256:	781a      	ldrb	r2, [r3, #0]
   3c258:	5cba      	ldrb	r2, [r7, r2]
   3c25a:	0712      	lsls	r2, r2, #28
   3c25c:	d442      	bmi.n	3c2e4 <__ssvfiscanf_r+0x27c>
   3c25e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   3c260:	2b02      	cmp	r3, #2
   3c262:	dc51      	bgt.n	3c308 <__ssvfiscanf_r+0x2a0>
   3c264:	466b      	mov	r3, sp
   3c266:	4622      	mov	r2, r4
   3c268:	a941      	add	r1, sp, #260	; 0x104
   3c26a:	4630      	mov	r0, r6
   3c26c:	f000 f878 	bl	3c360 <_scanf_chars>
   3c270:	2801      	cmp	r0, #1
   3c272:	d070      	beq.n	3c356 <__ssvfiscanf_r+0x2ee>
   3c274:	2802      	cmp	r0, #2
   3c276:	f47f af1d 	bne.w	3c0b4 <__ssvfiscanf_r+0x4c>
   3c27a:	e7cf      	b.n	3c21c <__ssvfiscanf_r+0x1b4>
   3c27c:	220a      	movs	r2, #10
   3c27e:	e7dd      	b.n	3c23c <__ssvfiscanf_r+0x1d4>
   3c280:	2300      	movs	r3, #0
   3c282:	9342      	str	r3, [sp, #264]	; 0x108
   3c284:	2303      	movs	r3, #3
   3c286:	e7de      	b.n	3c246 <__ssvfiscanf_r+0x1de>
   3c288:	2308      	movs	r3, #8
   3c28a:	9342      	str	r3, [sp, #264]	; 0x108
   3c28c:	2304      	movs	r3, #4
   3c28e:	e7da      	b.n	3c246 <__ssvfiscanf_r+0x1de>
   3c290:	4629      	mov	r1, r5
   3c292:	4640      	mov	r0, r8
   3c294:	f006 f831 	bl	422fa <__sccl>
   3c298:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c29a:	4605      	mov	r5, r0
   3c29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3c2a0:	9341      	str	r3, [sp, #260]	; 0x104
   3c2a2:	2301      	movs	r3, #1
   3c2a4:	e7cf      	b.n	3c246 <__ssvfiscanf_r+0x1de>
   3c2a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c2a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3c2ac:	9341      	str	r3, [sp, #260]	; 0x104
   3c2ae:	2300      	movs	r3, #0
   3c2b0:	e7c9      	b.n	3c246 <__ssvfiscanf_r+0x1de>
   3c2b2:	2302      	movs	r3, #2
   3c2b4:	e7c7      	b.n	3c246 <__ssvfiscanf_r+0x1de>
   3c2b6:	9841      	ldr	r0, [sp, #260]	; 0x104
   3c2b8:	06c3      	lsls	r3, r0, #27
   3c2ba:	f53f aefb 	bmi.w	3c0b4 <__ssvfiscanf_r+0x4c>
   3c2be:	9b00      	ldr	r3, [sp, #0]
   3c2c0:	f010 0f01 	tst.w	r0, #1
   3c2c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3c2c6:	f103 0104 	add.w	r1, r3, #4
   3c2ca:	9100      	str	r1, [sp, #0]
   3c2cc:	681b      	ldr	r3, [r3, #0]
   3c2ce:	bf14      	ite	ne
   3c2d0:	801a      	strhne	r2, [r3, #0]
   3c2d2:	601a      	streq	r2, [r3, #0]
   3c2d4:	e6ee      	b.n	3c0b4 <__ssvfiscanf_r+0x4c>
   3c2d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c2d8:	4621      	mov	r1, r4
   3c2da:	4630      	mov	r0, r6
   3c2dc:	4798      	blx	r3
   3c2de:	2800      	cmp	r0, #0
   3c2e0:	d0b5      	beq.n	3c24e <__ssvfiscanf_r+0x1e6>
   3c2e2:	e79b      	b.n	3c21c <__ssvfiscanf_r+0x1b4>
   3c2e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3c2e6:	3201      	adds	r2, #1
   3c2e8:	9245      	str	r2, [sp, #276]	; 0x114
   3c2ea:	6862      	ldr	r2, [r4, #4]
   3c2ec:	3a01      	subs	r2, #1
   3c2ee:	2a00      	cmp	r2, #0
   3c2f0:	6062      	str	r2, [r4, #4]
   3c2f2:	dd02      	ble.n	3c2fa <__ssvfiscanf_r+0x292>
   3c2f4:	3301      	adds	r3, #1
   3c2f6:	6023      	str	r3, [r4, #0]
   3c2f8:	e7ac      	b.n	3c254 <__ssvfiscanf_r+0x1ec>
   3c2fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c2fc:	4621      	mov	r1, r4
   3c2fe:	4630      	mov	r0, r6
   3c300:	4798      	blx	r3
   3c302:	2800      	cmp	r0, #0
   3c304:	d0a6      	beq.n	3c254 <__ssvfiscanf_r+0x1ec>
   3c306:	e789      	b.n	3c21c <__ssvfiscanf_r+0x1b4>
   3c308:	2b04      	cmp	r3, #4
   3c30a:	dc0f      	bgt.n	3c32c <__ssvfiscanf_r+0x2c4>
   3c30c:	466b      	mov	r3, sp
   3c30e:	4622      	mov	r2, r4
   3c310:	a941      	add	r1, sp, #260	; 0x104
   3c312:	4630      	mov	r0, r6
   3c314:	f000 f87e 	bl	3c414 <_scanf_i>
   3c318:	e7aa      	b.n	3c270 <__ssvfiscanf_r+0x208>
   3c31a:	bf00      	nop
   3c31c:	0004bf0e 	.word	0x0004bf0e
   3c320:	00042247 	.word	0x00042247
   3c324:	000422c1 	.word	0x000422c1
   3c328:	0004c014 	.word	0x0004c014
   3c32c:	4b0b      	ldr	r3, [pc, #44]	; (3c35c <__ssvfiscanf_r+0x2f4>)
   3c32e:	2b00      	cmp	r3, #0
   3c330:	f43f aec0 	beq.w	3c0b4 <__ssvfiscanf_r+0x4c>
   3c334:	466b      	mov	r3, sp
   3c336:	4622      	mov	r2, r4
   3c338:	a941      	add	r1, sp, #260	; 0x104
   3c33a:	4630      	mov	r0, r6
   3c33c:	e000      	b.n	3c340 <__ssvfiscanf_r+0x2d8>
   3c33e:	bf00      	nop
   3c340:	e796      	b.n	3c270 <__ssvfiscanf_r+0x208>
   3c342:	89a3      	ldrh	r3, [r4, #12]
   3c344:	f013 0f40 	tst.w	r3, #64	; 0x40
   3c348:	bf18      	it	ne
   3c34a:	f04f 30ff 	movne.w	r0, #4294967295
   3c34e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   3c352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3c356:	9844      	ldr	r0, [sp, #272]	; 0x110
   3c358:	e7f9      	b.n	3c34e <__ssvfiscanf_r+0x2e6>
   3c35a:	bf00      	nop
   3c35c:	00000000 	.word	0x00000000

0003c360 <_scanf_chars>:
   3c360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c364:	4615      	mov	r5, r2
   3c366:	688a      	ldr	r2, [r1, #8]
   3c368:	4680      	mov	r8, r0
   3c36a:	460c      	mov	r4, r1
   3c36c:	b932      	cbnz	r2, 3c37c <_scanf_chars+0x1c>
   3c36e:	698a      	ldr	r2, [r1, #24]
   3c370:	2a00      	cmp	r2, #0
   3c372:	bf0c      	ite	eq
   3c374:	2201      	moveq	r2, #1
   3c376:	f04f 32ff 	movne.w	r2, #4294967295
   3c37a:	608a      	str	r2, [r1, #8]
   3c37c:	6822      	ldr	r2, [r4, #0]
   3c37e:	2700      	movs	r7, #0
   3c380:	f8df 908c 	ldr.w	r9, [pc, #140]	; 3c410 <_scanf_chars+0xb0>
   3c384:	06d1      	lsls	r1, r2, #27
   3c386:	bf5f      	itttt	pl
   3c388:	681a      	ldrpl	r2, [r3, #0]
   3c38a:	1d11      	addpl	r1, r2, #4
   3c38c:	6019      	strpl	r1, [r3, #0]
   3c38e:	6816      	ldrpl	r6, [r2, #0]
   3c390:	69a0      	ldr	r0, [r4, #24]
   3c392:	b188      	cbz	r0, 3c3b8 <_scanf_chars+0x58>
   3c394:	2801      	cmp	r0, #1
   3c396:	d107      	bne.n	3c3a8 <_scanf_chars+0x48>
   3c398:	682a      	ldr	r2, [r5, #0]
   3c39a:	7811      	ldrb	r1, [r2, #0]
   3c39c:	6962      	ldr	r2, [r4, #20]
   3c39e:	5c52      	ldrb	r2, [r2, r1]
   3c3a0:	b952      	cbnz	r2, 3c3b8 <_scanf_chars+0x58>
   3c3a2:	2f00      	cmp	r7, #0
   3c3a4:	d031      	beq.n	3c40a <_scanf_chars+0xaa>
   3c3a6:	e022      	b.n	3c3ee <_scanf_chars+0x8e>
   3c3a8:	2802      	cmp	r0, #2
   3c3aa:	d120      	bne.n	3c3ee <_scanf_chars+0x8e>
   3c3ac:	682b      	ldr	r3, [r5, #0]
   3c3ae:	781b      	ldrb	r3, [r3, #0]
   3c3b0:	f813 3009 	ldrb.w	r3, [r3, r9]
   3c3b4:	071b      	lsls	r3, r3, #28
   3c3b6:	d41a      	bmi.n	3c3ee <_scanf_chars+0x8e>
   3c3b8:	6823      	ldr	r3, [r4, #0]
   3c3ba:	3701      	adds	r7, #1
   3c3bc:	06da      	lsls	r2, r3, #27
   3c3be:	bf5e      	ittt	pl
   3c3c0:	682b      	ldrpl	r3, [r5, #0]
   3c3c2:	781b      	ldrbpl	r3, [r3, #0]
   3c3c4:	f806 3b01 	strbpl.w	r3, [r6], #1
   3c3c8:	682a      	ldr	r2, [r5, #0]
   3c3ca:	686b      	ldr	r3, [r5, #4]
   3c3cc:	3201      	adds	r2, #1
   3c3ce:	3b01      	subs	r3, #1
   3c3d0:	602a      	str	r2, [r5, #0]
   3c3d2:	68a2      	ldr	r2, [r4, #8]
   3c3d4:	606b      	str	r3, [r5, #4]
   3c3d6:	3a01      	subs	r2, #1
   3c3d8:	60a2      	str	r2, [r4, #8]
   3c3da:	b142      	cbz	r2, 3c3ee <_scanf_chars+0x8e>
   3c3dc:	2b00      	cmp	r3, #0
   3c3de:	dcd7      	bgt.n	3c390 <_scanf_chars+0x30>
   3c3e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3c3e4:	4629      	mov	r1, r5
   3c3e6:	4640      	mov	r0, r8
   3c3e8:	4798      	blx	r3
   3c3ea:	2800      	cmp	r0, #0
   3c3ec:	d0d0      	beq.n	3c390 <_scanf_chars+0x30>
   3c3ee:	6823      	ldr	r3, [r4, #0]
   3c3f0:	f013 0310 	ands.w	r3, r3, #16
   3c3f4:	d105      	bne.n	3c402 <_scanf_chars+0xa2>
   3c3f6:	68e2      	ldr	r2, [r4, #12]
   3c3f8:	3201      	adds	r2, #1
   3c3fa:	60e2      	str	r2, [r4, #12]
   3c3fc:	69a2      	ldr	r2, [r4, #24]
   3c3fe:	b102      	cbz	r2, 3c402 <_scanf_chars+0xa2>
   3c400:	7033      	strb	r3, [r6, #0]
   3c402:	6923      	ldr	r3, [r4, #16]
   3c404:	2000      	movs	r0, #0
   3c406:	443b      	add	r3, r7
   3c408:	6123      	str	r3, [r4, #16]
   3c40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3c40e:	bf00      	nop
   3c410:	0004bf0e 	.word	0x0004bf0e

0003c414 <_scanf_i>:
   3c414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c418:	4698      	mov	r8, r3
   3c41a:	b087      	sub	sp, #28
   3c41c:	4b75      	ldr	r3, [pc, #468]	; (3c5f4 <_scanf_i+0x1e0>)
   3c41e:	460c      	mov	r4, r1
   3c420:	4682      	mov	sl, r0
   3c422:	4616      	mov	r6, r2
   3c424:	4627      	mov	r7, r4
   3c426:	f04f 0b00 	mov.w	fp, #0
   3c42a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   3c42e:	ab03      	add	r3, sp, #12
   3c430:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   3c434:	4b70      	ldr	r3, [pc, #448]	; (3c5f8 <_scanf_i+0x1e4>)
   3c436:	69a1      	ldr	r1, [r4, #24]
   3c438:	4a70      	ldr	r2, [pc, #448]	; (3c5fc <_scanf_i+0x1e8>)
   3c43a:	2903      	cmp	r1, #3
   3c43c:	bf18      	it	ne
   3c43e:	461a      	movne	r2, r3
   3c440:	68a3      	ldr	r3, [r4, #8]
   3c442:	9201      	str	r2, [sp, #4]
   3c444:	1e5a      	subs	r2, r3, #1
   3c446:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   3c44a:	bf89      	itett	hi
   3c44c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   3c450:	f04f 0900 	movls.w	r9, #0
   3c454:	eb03 0905 	addhi.w	r9, r3, r5
   3c458:	f240 135d 	movwhi	r3, #349	; 0x15d
   3c45c:	bf88      	it	hi
   3c45e:	60a3      	strhi	r3, [r4, #8]
   3c460:	f857 3b1c 	ldr.w	r3, [r7], #28
   3c464:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   3c468:	463d      	mov	r5, r7
   3c46a:	6023      	str	r3, [r4, #0]
   3c46c:	6831      	ldr	r1, [r6, #0]
   3c46e:	ab03      	add	r3, sp, #12
   3c470:	2202      	movs	r2, #2
   3c472:	7809      	ldrb	r1, [r1, #0]
   3c474:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   3c478:	f005 f885 	bl	41586 <memchr>
   3c47c:	b328      	cbz	r0, 3c4ca <_scanf_i+0xb6>
   3c47e:	f1bb 0f01 	cmp.w	fp, #1
   3c482:	d159      	bne.n	3c538 <_scanf_i+0x124>
   3c484:	6862      	ldr	r2, [r4, #4]
   3c486:	b92a      	cbnz	r2, 3c494 <_scanf_i+0x80>
   3c488:	6822      	ldr	r2, [r4, #0]
   3c48a:	2308      	movs	r3, #8
   3c48c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3c490:	6063      	str	r3, [r4, #4]
   3c492:	6022      	str	r2, [r4, #0]
   3c494:	6822      	ldr	r2, [r4, #0]
   3c496:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   3c49a:	6022      	str	r2, [r4, #0]
   3c49c:	68a2      	ldr	r2, [r4, #8]
   3c49e:	1e51      	subs	r1, r2, #1
   3c4a0:	60a1      	str	r1, [r4, #8]
   3c4a2:	b192      	cbz	r2, 3c4ca <_scanf_i+0xb6>
   3c4a4:	6832      	ldr	r2, [r6, #0]
   3c4a6:	1c51      	adds	r1, r2, #1
   3c4a8:	6031      	str	r1, [r6, #0]
   3c4aa:	7812      	ldrb	r2, [r2, #0]
   3c4ac:	f805 2b01 	strb.w	r2, [r5], #1
   3c4b0:	6872      	ldr	r2, [r6, #4]
   3c4b2:	3a01      	subs	r2, #1
   3c4b4:	2a00      	cmp	r2, #0
   3c4b6:	6072      	str	r2, [r6, #4]
   3c4b8:	dc07      	bgt.n	3c4ca <_scanf_i+0xb6>
   3c4ba:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   3c4be:	4631      	mov	r1, r6
   3c4c0:	4650      	mov	r0, sl
   3c4c2:	4790      	blx	r2
   3c4c4:	2800      	cmp	r0, #0
   3c4c6:	f040 8085 	bne.w	3c5d4 <_scanf_i+0x1c0>
   3c4ca:	f10b 0b01 	add.w	fp, fp, #1
   3c4ce:	f1bb 0f03 	cmp.w	fp, #3
   3c4d2:	d1cb      	bne.n	3c46c <_scanf_i+0x58>
   3c4d4:	6863      	ldr	r3, [r4, #4]
   3c4d6:	b90b      	cbnz	r3, 3c4dc <_scanf_i+0xc8>
   3c4d8:	230a      	movs	r3, #10
   3c4da:	6063      	str	r3, [r4, #4]
   3c4dc:	6863      	ldr	r3, [r4, #4]
   3c4de:	f04f 0b00 	mov.w	fp, #0
   3c4e2:	4947      	ldr	r1, [pc, #284]	; (3c600 <_scanf_i+0x1ec>)
   3c4e4:	6960      	ldr	r0, [r4, #20]
   3c4e6:	1ac9      	subs	r1, r1, r3
   3c4e8:	f005 ff07 	bl	422fa <__sccl>
   3c4ec:	68a3      	ldr	r3, [r4, #8]
   3c4ee:	6822      	ldr	r2, [r4, #0]
   3c4f0:	2b00      	cmp	r3, #0
   3c4f2:	d03d      	beq.n	3c570 <_scanf_i+0x15c>
   3c4f4:	6831      	ldr	r1, [r6, #0]
   3c4f6:	6960      	ldr	r0, [r4, #20]
   3c4f8:	f891 c000 	ldrb.w	ip, [r1]
   3c4fc:	f810 000c 	ldrb.w	r0, [r0, ip]
   3c500:	2800      	cmp	r0, #0
   3c502:	d035      	beq.n	3c570 <_scanf_i+0x15c>
   3c504:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   3c508:	d124      	bne.n	3c554 <_scanf_i+0x140>
   3c50a:	0510      	lsls	r0, r2, #20
   3c50c:	d522      	bpl.n	3c554 <_scanf_i+0x140>
   3c50e:	f10b 0b01 	add.w	fp, fp, #1
   3c512:	f1b9 0f00 	cmp.w	r9, #0
   3c516:	d003      	beq.n	3c520 <_scanf_i+0x10c>
   3c518:	3301      	adds	r3, #1
   3c51a:	f109 39ff 	add.w	r9, r9, #4294967295
   3c51e:	60a3      	str	r3, [r4, #8]
   3c520:	6873      	ldr	r3, [r6, #4]
   3c522:	3b01      	subs	r3, #1
   3c524:	2b00      	cmp	r3, #0
   3c526:	6073      	str	r3, [r6, #4]
   3c528:	dd1b      	ble.n	3c562 <_scanf_i+0x14e>
   3c52a:	6833      	ldr	r3, [r6, #0]
   3c52c:	3301      	adds	r3, #1
   3c52e:	6033      	str	r3, [r6, #0]
   3c530:	68a3      	ldr	r3, [r4, #8]
   3c532:	3b01      	subs	r3, #1
   3c534:	60a3      	str	r3, [r4, #8]
   3c536:	e7d9      	b.n	3c4ec <_scanf_i+0xd8>
   3c538:	f1bb 0f02 	cmp.w	fp, #2
   3c53c:	d1ae      	bne.n	3c49c <_scanf_i+0x88>
   3c53e:	6822      	ldr	r2, [r4, #0]
   3c540:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   3c544:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   3c548:	d1bf      	bne.n	3c4ca <_scanf_i+0xb6>
   3c54a:	2310      	movs	r3, #16
   3c54c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   3c550:	6063      	str	r3, [r4, #4]
   3c552:	e7a2      	b.n	3c49a <_scanf_i+0x86>
   3c554:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   3c558:	6022      	str	r2, [r4, #0]
   3c55a:	780b      	ldrb	r3, [r1, #0]
   3c55c:	f805 3b01 	strb.w	r3, [r5], #1
   3c560:	e7de      	b.n	3c520 <_scanf_i+0x10c>
   3c562:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3c566:	4631      	mov	r1, r6
   3c568:	4650      	mov	r0, sl
   3c56a:	4798      	blx	r3
   3c56c:	2800      	cmp	r0, #0
   3c56e:	d0df      	beq.n	3c530 <_scanf_i+0x11c>
   3c570:	6823      	ldr	r3, [r4, #0]
   3c572:	05db      	lsls	r3, r3, #23
   3c574:	d50d      	bpl.n	3c592 <_scanf_i+0x17e>
   3c576:	42bd      	cmp	r5, r7
   3c578:	d909      	bls.n	3c58e <_scanf_i+0x17a>
   3c57a:	f105 39ff 	add.w	r9, r5, #4294967295
   3c57e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   3c582:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   3c586:	4632      	mov	r2, r6
   3c588:	464d      	mov	r5, r9
   3c58a:	4650      	mov	r0, sl
   3c58c:	4798      	blx	r3
   3c58e:	42bd      	cmp	r5, r7
   3c590:	d02d      	beq.n	3c5ee <_scanf_i+0x1da>
   3c592:	6822      	ldr	r2, [r4, #0]
   3c594:	f012 0210 	ands.w	r2, r2, #16
   3c598:	d113      	bne.n	3c5c2 <_scanf_i+0x1ae>
   3c59a:	4639      	mov	r1, r7
   3c59c:	702a      	strb	r2, [r5, #0]
   3c59e:	4650      	mov	r0, sl
   3c5a0:	6863      	ldr	r3, [r4, #4]
   3c5a2:	9e01      	ldr	r6, [sp, #4]
   3c5a4:	47b0      	blx	r6
   3c5a6:	6821      	ldr	r1, [r4, #0]
   3c5a8:	f8d8 3000 	ldr.w	r3, [r8]
   3c5ac:	f011 0f20 	tst.w	r1, #32
   3c5b0:	d013      	beq.n	3c5da <_scanf_i+0x1c6>
   3c5b2:	1d1a      	adds	r2, r3, #4
   3c5b4:	f8c8 2000 	str.w	r2, [r8]
   3c5b8:	681b      	ldr	r3, [r3, #0]
   3c5ba:	6018      	str	r0, [r3, #0]
   3c5bc:	68e3      	ldr	r3, [r4, #12]
   3c5be:	3301      	adds	r3, #1
   3c5c0:	60e3      	str	r3, [r4, #12]
   3c5c2:	1bed      	subs	r5, r5, r7
   3c5c4:	2000      	movs	r0, #0
   3c5c6:	44ab      	add	fp, r5
   3c5c8:	6925      	ldr	r5, [r4, #16]
   3c5ca:	445d      	add	r5, fp
   3c5cc:	6125      	str	r5, [r4, #16]
   3c5ce:	b007      	add	sp, #28
   3c5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c5d4:	f04f 0b00 	mov.w	fp, #0
   3c5d8:	e7ca      	b.n	3c570 <_scanf_i+0x15c>
   3c5da:	1d1a      	adds	r2, r3, #4
   3c5dc:	f011 0f01 	tst.w	r1, #1
   3c5e0:	f8c8 2000 	str.w	r2, [r8]
   3c5e4:	681b      	ldr	r3, [r3, #0]
   3c5e6:	bf14      	ite	ne
   3c5e8:	8018      	strhne	r0, [r3, #0]
   3c5ea:	6018      	streq	r0, [r3, #0]
   3c5ec:	e7e6      	b.n	3c5bc <_scanf_i+0x1a8>
   3c5ee:	2001      	movs	r0, #1
   3c5f0:	e7ed      	b.n	3c5ce <_scanf_i+0x1ba>
   3c5f2:	bf00      	nop
   3c5f4:	00042a24 	.word	0x00042a24
   3c5f8:	00041aa9 	.word	0x00041aa9
   3c5fc:	00041aa5 	.word	0x00041aa5
   3c600:	0004c20e 	.word	0x0004c20e

0003c604 <_read_r>:
   3c604:	b538      	push	{r3, r4, r5, lr}
   3c606:	4604      	mov	r4, r0
   3c608:	4d06      	ldr	r5, [pc, #24]	; (3c624 <_read_r+0x20>)
   3c60a:	4608      	mov	r0, r1
   3c60c:	4611      	mov	r1, r2
   3c60e:	2200      	movs	r2, #0
   3c610:	602a      	str	r2, [r5, #0]
   3c612:	461a      	mov	r2, r3
   3c614:	f001 f97f 	bl	3d916 <_read>
   3c618:	1c43      	adds	r3, r0, #1
   3c61a:	d102      	bne.n	3c622 <_read_r+0x1e>
   3c61c:	682b      	ldr	r3, [r5, #0]
   3c61e:	b103      	cbz	r3, 3c622 <_read_r+0x1e>
   3c620:	6023      	str	r3, [r4, #0]
   3c622:	bd38      	pop	{r3, r4, r5, pc}
   3c624:	2001a568 	.word	0x2001a568

0003c628 <nan>:
   3c628:	2000      	movs	r0, #0
   3c62a:	4901      	ldr	r1, [pc, #4]	; (3c630 <nan+0x8>)
   3c62c:	4770      	bx	lr
   3c62e:	bf00      	nop
   3c630:	7ff80000 	.word	0x7ff80000

0003c634 <raise>:
   3c634:	4b02      	ldr	r3, [pc, #8]	; (3c640 <raise+0xc>)
   3c636:	4601      	mov	r1, r0
   3c638:	6818      	ldr	r0, [r3, #0]
   3c63a:	f005 be96 	b.w	4236a <_raise_r>
   3c63e:	bf00      	nop
   3c640:	20014a74 	.word	0x20014a74

0003c644 <_kill_r>:
   3c644:	b538      	push	{r3, r4, r5, lr}
   3c646:	2300      	movs	r3, #0
   3c648:	4d06      	ldr	r5, [pc, #24]	; (3c664 <_kill_r+0x20>)
   3c64a:	4604      	mov	r4, r0
   3c64c:	4608      	mov	r0, r1
   3c64e:	4611      	mov	r1, r2
   3c650:	602b      	str	r3, [r5, #0]
   3c652:	f001 f972 	bl	3d93a <_kill>
   3c656:	1c43      	adds	r3, r0, #1
   3c658:	d102      	bne.n	3c660 <_kill_r+0x1c>
   3c65a:	682b      	ldr	r3, [r5, #0]
   3c65c:	b103      	cbz	r3, 3c660 <_kill_r+0x1c>
   3c65e:	6023      	str	r3, [r4, #0]
   3c660:	bd38      	pop	{r3, r4, r5, pc}
   3c662:	bf00      	nop
   3c664:	2001a568 	.word	0x2001a568

0003c668 <_fstat_r>:
   3c668:	b538      	push	{r3, r4, r5, lr}
   3c66a:	2300      	movs	r3, #0
   3c66c:	4d06      	ldr	r5, [pc, #24]	; (3c688 <_fstat_r+0x20>)
   3c66e:	4604      	mov	r4, r0
   3c670:	4608      	mov	r0, r1
   3c672:	4611      	mov	r1, r2
   3c674:	602b      	str	r3, [r5, #0]
   3c676:	f001 f964 	bl	3d942 <_fstat>
   3c67a:	1c43      	adds	r3, r0, #1
   3c67c:	d102      	bne.n	3c684 <_fstat_r+0x1c>
   3c67e:	682b      	ldr	r3, [r5, #0]
   3c680:	b103      	cbz	r3, 3c684 <_fstat_r+0x1c>
   3c682:	6023      	str	r3, [r4, #0]
   3c684:	bd38      	pop	{r3, r4, r5, pc}
   3c686:	bf00      	nop
   3c688:	2001a568 	.word	0x2001a568

0003c68c <_isatty_r>:
   3c68c:	b538      	push	{r3, r4, r5, lr}
   3c68e:	2300      	movs	r3, #0
   3c690:	4d05      	ldr	r5, [pc, #20]	; (3c6a8 <_isatty_r+0x1c>)
   3c692:	4604      	mov	r4, r0
   3c694:	4608      	mov	r0, r1
   3c696:	602b      	str	r3, [r5, #0]
   3c698:	f001 f94a 	bl	3d930 <_isatty>
   3c69c:	1c43      	adds	r3, r0, #1
   3c69e:	d102      	bne.n	3c6a6 <_isatty_r+0x1a>
   3c6a0:	682b      	ldr	r3, [r5, #0]
   3c6a2:	b103      	cbz	r3, 3c6a6 <_isatty_r+0x1a>
   3c6a4:	6023      	str	r3, [r4, #0]
   3c6a6:	bd38      	pop	{r3, r4, r5, pc}
   3c6a8:	2001a568 	.word	0x2001a568

0003c6ac <app_thread_fn>:
{
   3c6ac:	b508      	push	{r3, lr}
	(void)await_connection(K_FOREVER);
   3c6ae:	f04f 30ff 	mov.w	r0, #4294967295
   3c6b2:	f04f 31ff 	mov.w	r1, #4294967295
   3c6b6:	f7e3 feb9 	bl	2042c <await_connection>
}
   3c6ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	main_application();
   3c6be:	f7e3 bde7 	b.w	20290 <main_application>

0003c6c2 <msg_thread_fn>:
{
   3c6c2:	b508      	push	{r3, lr}
		(void)consume_device_message();
   3c6c4:	f7e3 ff94 	bl	205f0 <consume_device_message>
	while (true) {
   3c6c8:	e7fc      	b.n	3c6c4 <msg_thread_fn+0x2>

0003c6ca <conn_thread_fn>:
	manage_connection();
   3c6ca:	f7e4 b803 	b.w	206d4 <manage_connection>

0003c6ce <pm_read>:
#include <drivers/i2c.h>

#include "particulate_matter.h"

bool pm_read(const struct device *dev_i2c, pm_data *data)
{
   3c6ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret;
    uint8_t pm_buffer[32] = {0};
   3c6d0:	221c      	movs	r2, #28
   3c6d2:	2500      	movs	r5, #0
{
   3c6d4:	b08f      	sub	sp, #60	; 0x3c
   3c6d6:	4606      	mov	r6, r0
   3c6d8:	460c      	mov	r4, r1
    uint8_t pm_buffer[32] = {0};
   3c6da:	eb0d 0002 	add.w	r0, sp, r2
   3c6de:	4629      	mov	r1, r5
   3c6e0:	9506      	str	r5, [sp, #24]
   3c6e2:	f004 ff8e 	bl	41602 <memset>
	msg[0].buf = (uint8_t *)write_buf;
	msg[0].len = num_write;
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
   3c6e6:	2320      	movs	r3, #32
   3c6e8:	9304      	str	r3, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3c6ea:	2307      	movs	r3, #7
	msg[0].len = num_write;
   3c6ec:	e9cd 5500 	strd	r5, r5, [sp]
	msg[0].flags = I2C_MSG_WRITE;
   3c6f0:	f88d 5008 	strb.w	r5, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   3c6f4:	ad06      	add	r5, sp, #24
   3c6f6:	9503      	str	r5, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   3c6f8:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   3c6fc:	68b3      	ldr	r3, [r6, #8]
   3c6fe:	2202      	movs	r2, #2
   3c700:	689f      	ldr	r7, [r3, #8]
   3c702:	4669      	mov	r1, sp
   3c704:	2312      	movs	r3, #18
   3c706:	4630      	mov	r0, r6
   3c708:	47b8      	blx	r7


    ret = i2c_write_read(dev_i2c, PM_ADDR, PM_SC1, 0, &pm_buffer, 32);
    if (ret != 0)
   3c70a:	2800      	cmp	r0, #0
   3c70c:	d138      	bne.n	3c780 <pm_read+0xb2>
        // printf("Failed to write/read I2C device address (err %i)\n", ret);
        return true;
    }

    // Check that start byte is correct!
    if (pm_buffer[0] != 0x42)
   3c70e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   3c712:	2b42      	cmp	r3, #66	; 0x42
   3c714:	d134      	bne.n	3c780 <pm_read+0xb2>
   3c716:	462b      	mov	r3, r5
   3c718:	466a      	mov	r2, sp
   3c71a:	2101      	movs	r1, #1

    uint16_t buffer_u16[12];
    for (uint8_t i = 0; i < 12; i++)
    {
        buffer_u16[i] = pm_buffer[2 + i * 2 + 1];
        buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
   3c71c:	789d      	ldrb	r5, [r3, #2]
        buffer_u16[i] = pm_buffer[2 + i * 2 + 1];
   3c71e:	78d8      	ldrb	r0, [r3, #3]
    for (uint8_t i = 0; i < 12; i++)
   3c720:	3101      	adds	r1, #1
        buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
   3c722:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    for (uint8_t i = 0; i < 12; i++)
   3c726:	290d      	cmp	r1, #13
        buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
   3c728:	f822 0b02 	strh.w	r0, [r2], #2
    for (uint8_t i = 0; i < 12; i++)
   3c72c:	f103 0302 	add.w	r3, r3, #2
   3c730:	d1f4      	bne.n	3c71c <pm_read+0x4e>
    data->particles_10um =  buffer_u16[8];
    data->particles_25um =  buffer_u16[9];
    data->particles_50um =  buffer_u16[10];
    data->particles_100um =  buffer_u16[11];

    return false;
   3c732:	2000      	movs	r0, #0
    data->pm10_standard = buffer_u16[0];
   3c734:	f8bd 3000 	ldrh.w	r3, [sp]
   3c738:	8023      	strh	r3, [r4, #0]
    data->pm25_standard = buffer_u16[1];
   3c73a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   3c73e:	8063      	strh	r3, [r4, #2]
    data->pm100_standard = buffer_u16[2];
   3c740:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   3c744:	80a3      	strh	r3, [r4, #4]
    data->pm10_env = buffer_u16[3];
   3c746:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   3c74a:	80e3      	strh	r3, [r4, #6]
    data->pm25_env = buffer_u16[4];
   3c74c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   3c750:	8123      	strh	r3, [r4, #8]
    data->pm100_env = buffer_u16[5];
   3c752:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   3c756:	8163      	strh	r3, [r4, #10]
    data->particles_03um = buffer_u16[6]; 
   3c758:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   3c75c:	81a3      	strh	r3, [r4, #12]
    data->particles_05um =  buffer_u16[7];
   3c75e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   3c762:	81e3      	strh	r3, [r4, #14]
    data->particles_10um =  buffer_u16[8];
   3c764:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   3c768:	8223      	strh	r3, [r4, #16]
    data->particles_25um =  buffer_u16[9];
   3c76a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   3c76e:	8263      	strh	r3, [r4, #18]
    data->particles_50um =  buffer_u16[10];
   3c770:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   3c774:	82a3      	strh	r3, [r4, #20]
    data->particles_100um =  buffer_u16[11];
   3c776:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   3c77a:	82e3      	strh	r3, [r4, #22]
}
   3c77c:	b00f      	add	sp, #60	; 0x3c
   3c77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return true;
   3c780:	2001      	movs	r0, #1
   3c782:	e7fb      	b.n	3c77c <pm_read+0xae>

0003c784 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   3c784:	b40c      	push	{r2, r3}
   3c786:	4603      	mov	r3, r0
   3c788:	b507      	push	{r0, r1, r2, lr}
{
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   3c78a:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   3c78c:	aa05      	add	r2, sp, #20
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   3c78e:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
   3c790:	f240 1105 	movw	r1, #261	; 0x105
	va_start(args, request);
   3c794:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   3c796:	4798      	blx	r3
	va_end(args);

	return res;
}
   3c798:	b003      	add	sp, #12
   3c79a:	f85d eb04 	ldr.w	lr, [sp], #4
   3c79e:	b002      	add	sp, #8
   3c7a0:	4770      	bx	lr

0003c7a2 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   3c7a2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   3c7a6:	b2db      	uxtb	r3, r3
   3c7a8:	2b09      	cmp	r3, #9
   3c7aa:	d802      	bhi.n	3c7b2 <char2hex+0x10>
		*x = c - '0';
   3c7ac:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   3c7ae:	2000      	movs	r0, #0
   3c7b0:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   3c7b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   3c7b6:	2b05      	cmp	r3, #5
   3c7b8:	d802      	bhi.n	3c7c0 <char2hex+0x1e>
		*x = c - 'a' + 10;
   3c7ba:	3857      	subs	r0, #87	; 0x57
   3c7bc:	7008      	strb	r0, [r1, #0]
   3c7be:	e7f6      	b.n	3c7ae <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   3c7c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   3c7c4:	2b05      	cmp	r3, #5
   3c7c6:	d801      	bhi.n	3c7cc <char2hex+0x2a>
		*x = c - 'A' + 10;
   3c7c8:	3837      	subs	r0, #55	; 0x37
   3c7ca:	e7f7      	b.n	3c7bc <char2hex+0x1a>
		return -EINVAL;
   3c7cc:	f06f 0015 	mvn.w	r0, #21
}
   3c7d0:	4770      	bx	lr

0003c7d2 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   3c7d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3c7d4:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   3c7d6:	f001 0001 	and.w	r0, r1, #1
   3c7da:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   3c7de:	429d      	cmp	r5, r3
   3c7e0:	ea4f 0651 	mov.w	r6, r1, lsr #1
   3c7e4:	d903      	bls.n	3c7ee <hex2bin+0x1c>
		return 0;
   3c7e6:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   3c7e8:	4628      	mov	r0, r5
   3c7ea:	b003      	add	sp, #12
   3c7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   3c7ee:	b158      	cbz	r0, 3c808 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   3c7f0:	7820      	ldrb	r0, [r4, #0]
   3c7f2:	f10d 0107 	add.w	r1, sp, #7
   3c7f6:	f7ff ffd4 	bl	3c7a2 <char2hex>
   3c7fa:	2800      	cmp	r0, #0
   3c7fc:	dbf3      	blt.n	3c7e6 <hex2bin+0x14>
		buf[0] = dec;
   3c7fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   3c802:	3401      	adds	r4, #1
		buf[0] = dec;
   3c804:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   3c808:	3401      	adds	r4, #1
   3c80a:	4416      	add	r6, r2
   3c80c:	42b2      	cmp	r2, r6
   3c80e:	d0eb      	beq.n	3c7e8 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   3c810:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   3c814:	f10d 0107 	add.w	r1, sp, #7
   3c818:	f7ff ffc3 	bl	3c7a2 <char2hex>
   3c81c:	2800      	cmp	r0, #0
   3c81e:	dbe2      	blt.n	3c7e6 <hex2bin+0x14>
		buf[i] = dec << 4;
   3c820:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3c824:	011b      	lsls	r3, r3, #4
   3c826:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   3c828:	f814 0b02 	ldrb.w	r0, [r4], #2
   3c82c:	f7ff ffb9 	bl	3c7a2 <char2hex>
   3c830:	2800      	cmp	r0, #0
   3c832:	dbd8      	blt.n	3c7e6 <hex2bin+0x14>
		buf[i] += dec;
   3c834:	7813      	ldrb	r3, [r2, #0]
   3c836:	f89d 1007 	ldrb.w	r1, [sp, #7]
   3c83a:	440b      	add	r3, r1
   3c83c:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   3c840:	e7e4      	b.n	3c80c <hex2bin+0x3a>

0003c842 <sys_notify_validate>:
	if (notify == NULL) {
   3c842:	b140      	cbz	r0, 3c856 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   3c844:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   3c846:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   3c84a:	2b02      	cmp	r3, #2
   3c84c:	d006      	beq.n	3c85c <sys_notify_validate+0x1a>
   3c84e:	2b03      	cmp	r3, #3
   3c850:	d004      	beq.n	3c85c <sys_notify_validate+0x1a>
   3c852:	2b01      	cmp	r3, #1
   3c854:	d005      	beq.n	3c862 <sys_notify_validate+0x20>
		return -EINVAL;
   3c856:	f06f 0015 	mvn.w	r0, #21
}
   3c85a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   3c85c:	6803      	ldr	r3, [r0, #0]
   3c85e:	2b00      	cmp	r3, #0
   3c860:	d0f9      	beq.n	3c856 <sys_notify_validate+0x14>
		notify->result = 0;
   3c862:	2300      	movs	r3, #0
   3c864:	6083      	str	r3, [r0, #8]
   3c866:	4618      	mov	r0, r3
   3c868:	4770      	bx	lr

0003c86a <arch_printk_char_out>:
}
   3c86a:	2000      	movs	r0, #0
   3c86c:	4770      	bx	lr

0003c86e <str_out>:
{
   3c86e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   3c870:	688a      	ldr	r2, [r1, #8]
   3c872:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   3c874:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   3c876:	b114      	cbz	r4, 3c87e <str_out+0x10>
   3c878:	684b      	ldr	r3, [r1, #4]
   3c87a:	4293      	cmp	r3, r2
   3c87c:	dc01      	bgt.n	3c882 <str_out+0x14>
		ctx->count++;
   3c87e:	608d      	str	r5, [r1, #8]
}
   3c880:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   3c882:	3b01      	subs	r3, #1
   3c884:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   3c886:	bf08      	it	eq
   3c888:	2200      	moveq	r2, #0
   3c88a:	608d      	str	r5, [r1, #8]
   3c88c:	bf0c      	ite	eq
   3c88e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   3c890:	54a0      	strbne	r0, [r4, r2]
   3c892:	e7f5      	b.n	3c880 <str_out+0x12>

0003c894 <printk>:
{
   3c894:	b40f      	push	{r0, r1, r2, r3}
   3c896:	b507      	push	{r0, r1, r2, lr}
   3c898:	a904      	add	r1, sp, #16
   3c89a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3c89e:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   3c8a0:	f7e4 fa20 	bl	20ce4 <vprintk>
}
   3c8a4:	b003      	add	sp, #12
   3c8a6:	f85d eb04 	ldr.w	lr, [sp], #4
   3c8aa:	b004      	add	sp, #16
   3c8ac:	4770      	bx	lr

0003c8ae <snprintk>:
{
   3c8ae:	b40c      	push	{r2, r3}
   3c8b0:	b507      	push	{r0, r1, r2, lr}
   3c8b2:	ab04      	add	r3, sp, #16
   3c8b4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   3c8b8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   3c8ba:	f7e4 fa21 	bl	20d00 <vsnprintk>
}
   3c8be:	b003      	add	sp, #12
   3c8c0:	f85d eb04 	ldr.w	lr, [sp], #4
   3c8c4:	b002      	add	sp, #8
   3c8c6:	4770      	bx	lr

0003c8c8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   3c8c8:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   3c8ca:	f013 0307 	ands.w	r3, r3, #7
   3c8ce:	d105      	bne.n	3c8dc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   3c8d0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   3c8d2:	2b00      	cmp	r3, #0
   3c8d4:	bf0c      	ite	eq
   3c8d6:	2000      	moveq	r0, #0
   3c8d8:	2003      	movne	r0, #3
   3c8da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   3c8dc:	2b02      	cmp	r3, #2
   3c8de:	d105      	bne.n	3c8ec <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   3c8e0:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   3c8e2:	2b00      	cmp	r3, #0
   3c8e4:	bf14      	ite	ne
   3c8e6:	2000      	movne	r0, #0
   3c8e8:	2004      	moveq	r0, #4
   3c8ea:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   3c8ec:	2b01      	cmp	r3, #1
   3c8ee:	d105      	bne.n	3c8fc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   3c8f0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   3c8f2:	2b00      	cmp	r3, #0
   3c8f4:	bf0c      	ite	eq
   3c8f6:	2000      	moveq	r0, #0
   3c8f8:	2005      	movne	r0, #5
   3c8fa:	4770      	bx	lr
	int evt = EVT_NOP;
   3c8fc:	2000      	movs	r0, #0
}
   3c8fe:	4770      	bx	lr

0003c900 <notify_one>:
{
   3c900:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3c902:	460d      	mov	r5, r1
   3c904:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3c906:	4619      	mov	r1, r3
   3c908:	1d28      	adds	r0, r5, #4
{
   3c90a:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3c90c:	9300      	str	r3, [sp, #0]
   3c90e:	f7e4 f9af 	bl	20c70 <sys_notify_finalize>
	if (cb) {
   3c912:	4604      	mov	r4, r0
   3c914:	b140      	cbz	r0, 3c928 <notify_one+0x28>
		cb(mgr, cli, state, res);
   3c916:	e9dd 3200 	ldrd	r3, r2, [sp]
   3c91a:	4629      	mov	r1, r5
   3c91c:	4630      	mov	r0, r6
   3c91e:	46a4      	mov	ip, r4
}
   3c920:	b002      	add	sp, #8
   3c922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   3c926:	4760      	bx	ip
}
   3c928:	b002      	add	sp, #8
   3c92a:	bd70      	pop	{r4, r5, r6, pc}

0003c92c <validate_args>:
{
   3c92c:	b510      	push	{r4, lr}
   3c92e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   3c930:	b140      	cbz	r0, 3c944 <validate_args+0x18>
   3c932:	b139      	cbz	r1, 3c944 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   3c934:	1d08      	adds	r0, r1, #4
   3c936:	f7ff ff84 	bl	3c842 <sys_notify_validate>
	if ((rv == 0)
   3c93a:	b928      	cbnz	r0, 3c948 <validate_args+0x1c>
	    && ((cli->notify.flags
   3c93c:	68a3      	ldr	r3, [r4, #8]
   3c93e:	f033 0303 	bics.w	r3, r3, #3
   3c942:	d001      	beq.n	3c948 <validate_args+0x1c>
		rv = -EINVAL;
   3c944:	f06f 0015 	mvn.w	r0, #21
}
   3c948:	bd10      	pop	{r4, pc}

0003c94a <onoff_manager_init>:
{
   3c94a:	b538      	push	{r3, r4, r5, lr}
   3c94c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   3c94e:	4605      	mov	r5, r0
   3c950:	b158      	cbz	r0, 3c96a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   3c952:	b151      	cbz	r1, 3c96a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   3c954:	680b      	ldr	r3, [r1, #0]
   3c956:	b143      	cbz	r3, 3c96a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   3c958:	684b      	ldr	r3, [r1, #4]
   3c95a:	b133      	cbz	r3, 3c96a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3c95c:	2220      	movs	r2, #32
   3c95e:	2100      	movs	r1, #0
   3c960:	f004 fe4f 	bl	41602 <memset>
	return 0;
   3c964:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3c966:	612c      	str	r4, [r5, #16]
}
   3c968:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3c96a:	f06f 0015 	mvn.w	r0, #21
   3c96e:	e7fb      	b.n	3c968 <onoff_manager_init+0x1e>

0003c970 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   3c970:	4604      	mov	r4, r0
   3c972:	b508      	push	{r3, lr}
   3c974:	4608      	mov	r0, r1
   3c976:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   3c978:	461a      	mov	r2, r3
   3c97a:	47a0      	blx	r4
   3c97c:	f7fb ff04 	bl	38788 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   3c980:	f7e6 fdc8 	bl	23514 <z_impl_k_thread_abort>

0003c984 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   3c984:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   3c988:	8848      	ldrh	r0, [r1, #2]
}
   3c98a:	0840      	lsrs	r0, r0, #1
   3c98c:	4770      	bx	lr

0003c98e <free_list_add>:
{
   3c98e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c990:	460c      	mov	r4, r1
   3c992:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   3c994:	f7ff fff6 	bl	3c984 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   3c998:	fab0 f080 	clz	r0, r0
   3c99c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   3c9a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   3c9a4:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   3c9a8:	00e2      	lsls	r2, r4, #3
		((uint16_t *)cmem)[f] = val;
   3c9aa:	1d17      	adds	r7, r2, #4
   3c9ac:	b2a5      	uxth	r5, r4
   3c9ae:	3206      	adds	r2, #6
   3c9b0:	b956      	cbnz	r6, 3c9c8 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   3c9b2:	2101      	movs	r1, #1
   3c9b4:	fa01 f000 	lsl.w	r0, r1, r0
   3c9b8:	68d9      	ldr	r1, [r3, #12]
   3c9ba:	4301      	orrs	r1, r0
   3c9bc:	60d9      	str	r1, [r3, #12]
		b->next = c;
   3c9be:	f8cc 4010 	str.w	r4, [ip, #16]
   3c9c2:	53dd      	strh	r5, [r3, r7]
   3c9c4:	529d      	strh	r5, [r3, r2]
}
   3c9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   3c9c8:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   3c9ca:	3104      	adds	r1, #4
   3c9cc:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   3c9ce:	53d8      	strh	r0, [r3, r7]
   3c9d0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   3c9d4:	529e      	strh	r6, [r3, r2]
   3c9d6:	80c5      	strh	r5, [r0, #6]
   3c9d8:	525d      	strh	r5, [r3, r1]
   3c9da:	e7f4      	b.n	3c9c6 <free_list_add+0x38>

0003c9dc <free_list_remove_bidx>:
{
   3c9dc:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   3c9de:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   3c9e2:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   3c9e4:	4299      	cmp	r1, r3
   3c9e6:	f102 0104 	add.w	r1, r2, #4
   3c9ea:	d10a      	bne.n	3ca02 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   3c9ec:	2301      	movs	r3, #1
   3c9ee:	fa03 f202 	lsl.w	r2, r3, r2
   3c9f2:	68c3      	ldr	r3, [r0, #12]
   3c9f4:	ea23 0302 	bic.w	r3, r3, r2
   3c9f8:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   3c9fa:	2300      	movs	r3, #0
   3c9fc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   3ca00:	bd10      	pop	{r4, pc}
   3ca02:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   3ca04:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   3ca08:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   3ca0c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   3ca10:	80cb      	strh	r3, [r1, #6]
   3ca12:	8082      	strh	r2, [r0, #4]
}
   3ca14:	e7f4      	b.n	3ca00 <free_list_remove_bidx+0x24>

0003ca16 <free_list_remove>:
{
   3ca16:	b510      	push	{r4, lr}
   3ca18:	4603      	mov	r3, r0
   3ca1a:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   3ca1c:	f7ff ffb2 	bl	3c984 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   3ca20:	fab0 f080 	clz	r0, r0
		free_list_remove_bidx(h, c, bidx);
   3ca24:	4621      	mov	r1, r4
}
   3ca26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   3ca2a:	f1c0 021f 	rsb	r2, r0, #31
   3ca2e:	4618      	mov	r0, r3
   3ca30:	f7ff bfd4 	b.w	3c9dc <free_list_remove_bidx>

0003ca34 <alloc_chunk>:
{
   3ca34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ca38:	fab1 f581 	clz	r5, r1
   3ca3c:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   3ca40:	eb00 0789 	add.w	r7, r0, r9, lsl #2
   3ca44:	693a      	ldr	r2, [r7, #16]
{
   3ca46:	4603      	mov	r3, r0
   3ca48:	460e      	mov	r6, r1
	if (b->next) {
   3ca4a:	b1ca      	cbz	r2, 3ca80 <alloc_chunk+0x4c>
   3ca4c:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   3ca50:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   3ca52:	4618      	mov	r0, r3
   3ca54:	4621      	mov	r1, r4
   3ca56:	f7ff ff95 	bl	3c984 <chunk_size>
   3ca5a:	42b0      	cmp	r0, r6
   3ca5c:	d307      	bcc.n	3ca6e <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   3ca5e:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   3ca60:	4621      	mov	r1, r4
   3ca62:	4618      	mov	r0, r3
   3ca64:	f7ff ffba 	bl	3c9dc <free_list_remove_bidx>
}
   3ca68:	4620      	mov	r0, r4
   3ca6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   3ca6e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   3ca72:	88e1      	ldrh	r1, [r4, #6]
		} while (--i && b->next != first);
   3ca74:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   3ca78:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   3ca7a:	d001      	beq.n	3ca80 <alloc_chunk+0x4c>
   3ca7c:	428a      	cmp	r2, r1
   3ca7e:	d1e7      	bne.n	3ca50 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   3ca80:	f04f 34ff 	mov.w	r4, #4294967295
   3ca84:	68d9      	ldr	r1, [r3, #12]
   3ca86:	f1c5 0520 	rsb	r5, r5, #32
   3ca8a:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   3ca8c:	400c      	ands	r4, r1
   3ca8e:	d0eb      	beq.n	3ca68 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   3ca90:	fa94 f2a4 	rbit	r2, r4
   3ca94:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   3ca98:	1d11      	adds	r1, r2, #4
   3ca9a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   3ca9e:	e7df      	b.n	3ca60 <alloc_chunk+0x2c>

0003caa0 <merge_chunks>:
{
   3caa0:	b538      	push	{r3, r4, r5, lr}
   3caa2:	4603      	mov	r3, r0
   3caa4:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   3caa6:	f7ff ff6d 	bl	3c984 <chunk_size>
   3caaa:	4611      	mov	r1, r2
   3caac:	4604      	mov	r4, r0
   3caae:	4618      	mov	r0, r3
   3cab0:	f7ff ff68 	bl	3c984 <chunk_size>
   3cab4:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3cab6:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   3cab8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   3cabc:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   3cabe:	4618      	mov	r0, r3
   3cac0:	4611      	mov	r1, r2
   3cac2:	f7ff ff5f 	bl	3c984 <chunk_size>
	void *cmem = &buf[c];
   3cac6:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   3cac8:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   3cacc:	bd38      	pop	{r3, r4, r5, pc}

0003cace <split_chunks>:
{
   3cace:	b538      	push	{r3, r4, r5, lr}
   3cad0:	460c      	mov	r4, r1
   3cad2:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   3cad4:	f7ff ff56 	bl	3c984 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   3cad8:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   3cada:	1b11      	subs	r1, r2, r4
	chunksz_t rsz = sz0 - lsz;
   3cadc:	4405      	add	r5, r0
   3cade:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3cae2:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   3cae4:	8060      	strh	r0, [r4, #2]
   3cae6:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3caea:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   3caec:	8044      	strh	r4, [r0, #2]
   3caee:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   3caf2:	4618      	mov	r0, r3
   3caf4:	4611      	mov	r1, r2
   3caf6:	f7ff ff45 	bl	3c984 <chunk_size>
	void *cmem = &buf[c];
   3cafa:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   3cafc:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   3cb00:	bd38      	pop	{r3, r4, r5, pc}

0003cb02 <free_chunk>:
{
   3cb02:	b538      	push	{r3, r4, r5, lr}
   3cb04:	4605      	mov	r5, r0
   3cb06:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   3cb08:	f7ff ff3c 	bl	3c984 <chunk_size>
   3cb0c:	1821      	adds	r1, r4, r0
		return ((uint16_t *)cmem)[f];
   3cb0e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3cb12:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   3cb14:	07da      	lsls	r2, r3, #31
   3cb16:	d40b      	bmi.n	3cb30 <free_chunk+0x2e>
		free_list_remove(h, right_chunk(h, c));
   3cb18:	4628      	mov	r0, r5
   3cb1a:	f7ff ff7c 	bl	3ca16 <free_list_remove>
	return c + chunk_size(h, c);
   3cb1e:	4621      	mov	r1, r4
   3cb20:	4628      	mov	r0, r5
   3cb22:	f7ff ff2f 	bl	3c984 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   3cb26:	4621      	mov	r1, r4
   3cb28:	1822      	adds	r2, r4, r0
   3cb2a:	4628      	mov	r0, r5
   3cb2c:	f7ff ffb8 	bl	3caa0 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   3cb30:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   3cb34:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   3cb36:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3cb3a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   3cb3c:	07db      	lsls	r3, r3, #31
   3cb3e:	d40c      	bmi.n	3cb5a <free_chunk+0x58>
		free_list_remove(h, left_chunk(h, c));
   3cb40:	4628      	mov	r0, r5
   3cb42:	f7ff ff68 	bl	3ca16 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   3cb46:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   3cb4a:	4622      	mov	r2, r4
   3cb4c:	1a61      	subs	r1, r4, r1
   3cb4e:	4628      	mov	r0, r5
   3cb50:	f7ff ffa6 	bl	3caa0 <merge_chunks>
   3cb54:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   3cb58:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   3cb5a:	4621      	mov	r1, r4
   3cb5c:	4628      	mov	r0, r5
}
   3cb5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   3cb62:	f7ff bf14 	b.w	3c98e <free_list_add>

0003cb66 <sys_heap_alloc>:
{
   3cb66:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   3cb68:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   3cb6a:	b909      	cbnz	r1, 3cb70 <sys_heap_alloc+0xa>
		return NULL;
   3cb6c:	2000      	movs	r0, #0
}
   3cb6e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   3cb70:	68ab      	ldr	r3, [r5, #8]
   3cb72:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   3cb76:	d9f9      	bls.n	3cb6c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   3cb78:	310b      	adds	r1, #11
   3cb7a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   3cb7c:	4621      	mov	r1, r4
   3cb7e:	4628      	mov	r0, r5
   3cb80:	f7ff ff58 	bl	3ca34 <alloc_chunk>
	if (c == 0U) {
   3cb84:	4606      	mov	r6, r0
   3cb86:	2800      	cmp	r0, #0
   3cb88:	d0f0      	beq.n	3cb6c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   3cb8a:	4601      	mov	r1, r0
   3cb8c:	4628      	mov	r0, r5
   3cb8e:	f7ff fef9 	bl	3c984 <chunk_size>
   3cb92:	42a0      	cmp	r0, r4
   3cb94:	d909      	bls.n	3cbaa <sys_heap_alloc+0x44>
		split_chunks(h, c, c + chunk_sz);
   3cb96:	4434      	add	r4, r6
   3cb98:	4631      	mov	r1, r6
   3cb9a:	4628      	mov	r0, r5
   3cb9c:	4622      	mov	r2, r4
   3cb9e:	f7ff ff96 	bl	3cace <split_chunks>
		free_list_add(h, c + chunk_sz);
   3cba2:	4621      	mov	r1, r4
   3cba4:	4628      	mov	r0, r5
   3cba6:	f7ff fef2 	bl	3c98e <free_list_add>
	void *cmem = &buf[c];
   3cbaa:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   3cbae:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   3cbb0:	8853      	ldrh	r3, [r2, #2]
   3cbb2:	3004      	adds	r0, #4
   3cbb4:	f043 0301 	orr.w	r3, r3, #1
   3cbb8:	8053      	strh	r3, [r2, #2]
	return mem;
   3cbba:	e7d8      	b.n	3cb6e <sys_heap_alloc+0x8>

0003cbbc <_ldiv5>:
	uint32_t v_lo = *v;
   3cbbc:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   3cbc0:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   3cbc2:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   3cbc6:	fba2 2403 	umull	r2, r4, r2, r3
   3cbca:	18d5      	adds	r5, r2, r3
   3cbcc:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   3cbd0:	fba1 1303 	umull	r1, r3, r1, r3
   3cbd4:	1852      	adds	r2, r2, r1
   3cbd6:	eb44 0403 	adc.w	r4, r4, r3
   3cbda:	1952      	adds	r2, r2, r5
   3cbdc:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   3cbe0:	1889      	adds	r1, r1, r2
   3cbe2:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   3cbe6:	e9c0 1300 	strd	r1, r3, [r0]
}
   3cbea:	bd30      	pop	{r4, r5, pc}

0003cbec <_get_digit>:
	if (*digit_count > 0) {
   3cbec:	680b      	ldr	r3, [r1, #0]
{
   3cbee:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   3cbf0:	2b00      	cmp	r3, #0
   3cbf2:	dd10      	ble.n	3cc16 <_get_digit+0x2a>
		*fr *= 10U;
   3cbf4:	220a      	movs	r2, #10
		--*digit_count;
   3cbf6:	3b01      	subs	r3, #1
   3cbf8:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   3cbfa:	6803      	ldr	r3, [r0, #0]
   3cbfc:	6844      	ldr	r4, [r0, #4]
   3cbfe:	fba3 1302 	umull	r1, r3, r3, r2
   3cc02:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
   3cc06:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
   3cc08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   3cc0c:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   3cc10:	3230      	adds	r2, #48	; 0x30
}
   3cc12:	4610      	mov	r0, r2
   3cc14:	bd10      	pop	{r4, pc}
		rval = '0';
   3cc16:	2230      	movs	r2, #48	; 0x30
   3cc18:	e7fb      	b.n	3cc12 <_get_digit+0x26>

0003cc1a <outs>:
{
   3cc1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3cc1e:	4680      	mov	r8, r0
   3cc20:	4689      	mov	r9, r1
   3cc22:	4616      	mov	r6, r2
   3cc24:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3cc26:	4615      	mov	r5, r2
   3cc28:	42bd      	cmp	r5, r7
   3cc2a:	eba5 0406 	sub.w	r4, r5, r6
   3cc2e:	d305      	bcc.n	3cc3c <outs+0x22>
   3cc30:	b10f      	cbz	r7, 3cc36 <outs+0x1c>
	return (int)count;
   3cc32:	4620      	mov	r0, r4
   3cc34:	e008      	b.n	3cc48 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3cc36:	782b      	ldrb	r3, [r5, #0]
   3cc38:	2b00      	cmp	r3, #0
   3cc3a:	d0fa      	beq.n	3cc32 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   3cc3c:	4649      	mov	r1, r9
   3cc3e:	f815 0b01 	ldrb.w	r0, [r5], #1
   3cc42:	47c0      	blx	r8
		if (rc < 0) {
   3cc44:	2800      	cmp	r0, #0
   3cc46:	daef      	bge.n	3cc28 <outs+0xe>
}
   3cc48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003cc4c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   3cc4c:	4040      	eors	r0, r0
   3cc4e:	f380 8811 	msr	BASEPRI, r0
   3cc52:	f04f 0004 	mov.w	r0, #4
   3cc56:	df02      	svc	2
}
   3cc58:	4770      	bx	lr

0003cc5a <assert_print>:

void assert_print(const char *fmt, ...)
{
   3cc5a:	b40f      	push	{r0, r1, r2, r3}
   3cc5c:	b507      	push	{r0, r1, r2, lr}
   3cc5e:	a904      	add	r1, sp, #16
   3cc60:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   3cc64:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   3cc66:	f7e4 f83d 	bl	20ce4 <vprintk>

	va_end(ap);
}
   3cc6a:	b003      	add	sp, #12
   3cc6c:	f85d eb04 	ldr.w	lr, [sp], #4
   3cc70:	b004      	add	sp, #16
   3cc72:	4770      	bx	lr

0003cc74 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   3cc74:	4770      	bx	lr

0003cc76 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   3cc76:	2806      	cmp	r0, #6
   3cc78:	d108      	bne.n	3cc8c <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   3cc7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   3cc7e:	2201      	movs	r2, #1
   3cc80:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   3cc84:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   3cc88:	bf20      	wfe
    while (true)
   3cc8a:	e7fd      	b.n	3cc88 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   3cc8c:	4770      	bx	lr

0003cc8e <pm_state_exit_post_ops>:
   3cc8e:	2300      	movs	r3, #0
   3cc90:	f383 8811 	msr	BASEPRI, r3
   3cc94:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   3cc98:	4770      	bx	lr

0003cc9a <soc_secure_mem_read>:
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
#endif /* defined(GPIO_PIN_CNF_MCUSEL_Msk) */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   3cc9a:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   3cc9c:	ab01      	add	r3, sp, #4
   3cc9e:	f004 fc1f 	bl	414e0 <tfm_platform_mem_read>

	switch (status) {
   3cca2:	2802      	cmp	r0, #2
   3cca4:	d00a      	beq.n	3ccbc <soc_secure_mem_read+0x22>
   3cca6:	2803      	cmp	r0, #3
   3cca8:	d00b      	beq.n	3ccc2 <soc_secure_mem_read+0x28>
   3ccaa:	b968      	cbnz	r0, 3ccc8 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   3ccac:	9801      	ldr	r0, [sp, #4]
   3ccae:	3800      	subs	r0, #0
   3ccb0:	bf18      	it	ne
   3ccb2:	2001      	movne	r0, #1
   3ccb4:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   3ccb6:	b003      	add	sp, #12
   3ccb8:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   3ccbc:	f06f 0015 	mvn.w	r0, #21
   3ccc0:	e7f9      	b.n	3ccb6 <soc_secure_mem_read+0x1c>
	switch (status) {
   3ccc2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3ccc6:	e7f6      	b.n	3ccb6 <soc_secure_mem_read+0x1c>
		return -EPERM;
   3ccc8:	f04f 30ff 	mov.w	r0, #4294967295
   3cccc:	e7f3      	b.n	3ccb6 <soc_secure_mem_read+0x1c>

0003ccce <z_log_minimal_printk>:
{
   3ccce:	b40f      	push	{r0, r1, r2, r3}
   3ccd0:	b507      	push	{r0, r1, r2, lr}
   3ccd2:	a904      	add	r1, sp, #16
   3ccd4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3ccd8:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   3ccda:	f7e4 f803 	bl	20ce4 <vprintk>
}
   3ccde:	b003      	add	sp, #12
   3cce0:	f85d eb04 	ldr.w	lr, [sp], #4
   3cce4:	b004      	add	sp, #16
   3cce6:	4770      	bx	lr

0003cce8 <fcb_len_in_flash.isra.0>:
int fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len);
int fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
	if (fcb->f_align <= 1U) {
   3cce8:	2801      	cmp	r0, #1
		return len;
	}
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3ccea:	bf89      	itett	hi
   3ccec:	f100 33ff 	addhi.w	r3, r0, #4294967295
		return len;
   3ccf0:	4608      	movls	r0, r1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3ccf2:	18c9      	addhi	r1, r1, r3
   3ccf4:	4240      	neghi	r0, r0
   3ccf6:	bf88      	it	hi
   3ccf8:	4008      	andhi	r0, r1
}
   3ccfa:	4770      	bx	lr

0003ccfc <fcb_append_to_scratch>:
{
   3ccfc:	b538      	push	{r3, r4, r5, lr}
   3ccfe:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   3cd00:	6a41      	ldr	r1, [r0, #36]	; 0x24
   3cd02:	f000 fa44 	bl	3d18e <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   3cd06:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   3cd08:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   3cd0a:	4298      	cmp	r0, r3
   3cd0c:	d00f      	beq.n	3cd2e <fcb_append_to_scratch+0x32>
	if (!sector) {
   3cd0e:	b170      	cbz	r0, 3cd2e <fcb_append_to_scratch+0x32>
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3cd10:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   3cd12:	4601      	mov	r1, r0
   3cd14:	3201      	adds	r2, #1
   3cd16:	4620      	mov	r0, r4
   3cd18:	b292      	uxth	r2, r2
   3cd1a:	f000 f8c7 	bl	3ceac <fcb_sector_hdr_init>
	if (rc) {
   3cd1e:	b928      	cbnz	r0, 3cd2c <fcb_append_to_scratch+0x30>
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3cd20:	2308      	movs	r3, #8
   3cd22:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   3cd24:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   3cd26:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   3cd28:	3301      	adds	r3, #1
   3cd2a:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   3cd2c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSPC;
   3cd2e:	f06f 001b 	mvn.w	r0, #27
   3cd32:	e7fb      	b.n	3cd2c <fcb_append_to_scratch+0x30>

0003cd34 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   3cd34:	b5f0      	push	{r4, r5, r6, r7, lr}
   3cd36:	b083      	sub	sp, #12
   3cd38:	4604      	mov	r4, r0
   3cd3a:	460d      	mov	r5, r1
	int rc;
	uint8_t crc8[fcb->f_align];
   3cd3c:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
{
   3cd40:	af02      	add	r7, sp, #8
	uint8_t crc8[fcb->f_align];
   3cd42:	1dd3      	adds	r3, r2, #7
   3cd44:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   3cd48:	ebad 0d03 	sub.w	sp, sp, r3
   3cd4c:	ae02      	add	r6, sp, #8
__ssp_bos_icheck3(memset, void *, int)
   3cd4e:	21ff      	movs	r1, #255	; 0xff
   3cd50:	4630      	mov	r0, r6
   3cd52:	f004 fc56 	bl	41602 <memset>
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   3cd56:	4632      	mov	r2, r6
   3cd58:	4629      	mov	r1, r5
   3cd5a:	4620      	mov	r0, r4
   3cd5c:	f000 f96d 	bl	3d03a <fcb_elem_crc8>
	if (rc) {
   3cd60:	b988      	cbnz	r0, 3cd86 <fcb_append_finish+0x52>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3cd62:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
   3cd66:	89a9      	ldrh	r1, [r5, #12]
   3cd68:	4610      	mov	r0, r2
   3cd6a:	f7ff ffbd 	bl	3cce8 <fcb_len_in_flash.isra.0>
   3cd6e:	68a9      	ldr	r1, [r5, #8]

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   3cd70:	9200      	str	r2, [sp, #0]
   3cd72:	4633      	mov	r3, r6
   3cd74:	1842      	adds	r2, r0, r1
   3cd76:	4620      	mov	r0, r4
   3cd78:	6829      	ldr	r1, [r5, #0]
   3cd7a:	f000 f823 	bl	3cdc4 <fcb_flash_write>
	if (rc) {
		return -EIO;
   3cd7e:	2800      	cmp	r0, #0
   3cd80:	bf18      	it	ne
   3cd82:	f06f 0004 	mvnne.w	r0, #4
	}
	return 0;
}
   3cd86:	3704      	adds	r7, #4
   3cd88:	46bd      	mov	sp, r7
   3cd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003cd8c <fcb_get_align>:
uint8_t
fcb_get_align(const struct fcb *fcb)
{
	uint8_t align;

	if (fcb->fap == NULL) {
   3cd8c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   3cd8e:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   3cd90:	b110      	cbz	r0, 3cd98 <fcb_get_align+0xc>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   3cd92:	f000 fc5a 	bl	3d64a <flash_area_align>
   3cd96:	b2c0      	uxtb	r0, r0

	return align;
}
   3cd98:	bd08      	pop	{r3, pc}

0003cd9a <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   3cd9a:	b570      	push	{r4, r5, r6, lr}
   3cd9c:	4614      	mov	r4, r2
   3cd9e:	461a      	mov	r2, r3
   3cda0:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   3cda2:	684d      	ldr	r5, [r1, #4]
   3cda4:	18e6      	adds	r6, r4, r3
   3cda6:	42ae      	cmp	r6, r5
   3cda8:	d809      	bhi.n	3cdbe <fcb_flash_read+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   3cdaa:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3cdac:	b120      	cbz	r0, 3cdb8 <fcb_flash_read+0x1e>
		return -EIO;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   3cdae:	6809      	ldr	r1, [r1, #0]
   3cdb0:	4421      	add	r1, r4
   3cdb2:	f000 fbfb 	bl	3d5ac <flash_area_read>

	if (rc != 0) {
   3cdb6:	b108      	cbz	r0, 3cdbc <fcb_flash_read+0x22>
		return -EIO;
   3cdb8:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3cdbc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3cdbe:	f06f 0015 	mvn.w	r0, #21
   3cdc2:	e7fb      	b.n	3cdbc <fcb_flash_read+0x22>

0003cdc4 <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   3cdc4:	b570      	push	{r4, r5, r6, lr}
   3cdc6:	4614      	mov	r4, r2
   3cdc8:	461a      	mov	r2, r3
   3cdca:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   3cdcc:	684d      	ldr	r5, [r1, #4]
   3cdce:	18e6      	adds	r6, r4, r3
   3cdd0:	42ae      	cmp	r6, r5
   3cdd2:	d809      	bhi.n	3cde8 <fcb_flash_write+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   3cdd4:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3cdd6:	b120      	cbz	r0, 3cde2 <fcb_flash_write+0x1e>
		return -EIO;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   3cdd8:	6809      	ldr	r1, [r1, #0]
   3cdda:	4421      	add	r1, r4
   3cddc:	f000 fc02 	bl	3d5e4 <flash_area_write>

	if (rc != 0) {
   3cde0:	b108      	cbz	r0, 3cde6 <fcb_flash_write+0x22>
		return -EIO;
   3cde2:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3cde6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3cde8:	f06f 0015 	mvn.w	r0, #21
   3cdec:	e7fb      	b.n	3cde6 <fcb_flash_write+0x22>

0003cdee <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   3cdee:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   3cdf0:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   3cdf2:	b120      	cbz	r0, 3cdfe <fcb_erase_sector+0x10>
		return -EIO;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   3cdf4:	e9d1 1200 	ldrd	r1, r2, [r1]
   3cdf8:	f000 fc10 	bl	3d61c <flash_area_erase>

	if (rc != 0) {
   3cdfc:	b108      	cbz	r0, 3ce02 <fcb_erase_sector+0x14>
		return -EIO;
   3cdfe:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3ce02:	bd08      	pop	{r3, pc}

0003ce04 <fcb_free_sector_cnt>:
	return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   3ce04:	b538      	push	{r3, r4, r5, lr}
   3ce06:	4604      	mov	r4, r0
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3ce08:	2500      	movs	r5, #0
	fa = fcb->f_active.fe_sector;
   3ce0a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3ce0c:	7963      	ldrb	r3, [r4, #5]
   3ce0e:	42ab      	cmp	r3, r5
   3ce10:	dc01      	bgt.n	3ce16 <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   3ce12:	4628      	mov	r0, r5
   3ce14:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   3ce16:	4620      	mov	r0, r4
   3ce18:	f000 f9b9 	bl	3d18e <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   3ce1c:	6a23      	ldr	r3, [r4, #32]
		fa = fcb_getnext_sector(fcb, fa);
   3ce1e:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   3ce20:	4283      	cmp	r3, r0
   3ce22:	d0f6      	beq.n	3ce12 <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3ce24:	3501      	adds	r5, #1
   3ce26:	e7f1      	b.n	3ce0c <fcb_free_sector_cnt+0x8>

0003ce28 <fcb_put_len>:
 * and if there is any data at all or both bytes are equal to erase value.
 */
int
fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len)
{
	if (len < 0x80) {
   3ce28:	2a7f      	cmp	r2, #127	; 0x7f
{
   3ce2a:	b510      	push	{r4, lr}
	if (len < 0x80) {
   3ce2c:	d806      	bhi.n	3ce3c <fcb_put_len+0x14>
		buf[0] = len ^ ~fcb->f_erase_value;
   3ce2e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 1;
   3ce32:	2001      	movs	r0, #1
		buf[0] = len ^ ~fcb->f_erase_value;
   3ce34:	405a      	eors	r2, r3
   3ce36:	43d2      	mvns	r2, r2
   3ce38:	700a      	strb	r2, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
		return 2;
	} else {
		return -EINVAL;
	}
}
   3ce3a:	bd10      	pop	{r4, pc}
	} else if (len < FCB_MAX_LEN) {
   3ce3c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   3ce40:	429a      	cmp	r2, r3
   3ce42:	d80e      	bhi.n	3ce62 <fcb_put_len+0x3a>
		buf[0] = (len | 0x80) ^ ~fcb->f_erase_value;
   3ce44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   3ce48:	f062 047f 	orn	r4, r2, #127	; 0x7f
   3ce4c:	4063      	eors	r3, r4
   3ce4e:	43db      	mvns	r3, r3
   3ce50:	700b      	strb	r3, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   3ce52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 2;
   3ce56:	2002      	movs	r0, #2
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   3ce58:	ea83 12d2 	eor.w	r2, r3, r2, lsr #7
   3ce5c:	43d2      	mvns	r2, r2
   3ce5e:	704a      	strb	r2, [r1, #1]
		return 2;
   3ce60:	e7eb      	b.n	3ce3a <fcb_put_len+0x12>
		return -EINVAL;
   3ce62:	f06f 0015 	mvn.w	r0, #21
   3ce66:	e7e8      	b.n	3ce3a <fcb_put_len+0x12>

0003ce68 <fcb_get_len>:

int
fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len)
{
   3ce68:	b530      	push	{r4, r5, lr}
	int rc;

	if ((buf[0] ^ ~fcb->f_erase_value) & 0x80) {
   3ce6a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   3ce6e:	780d      	ldrb	r5, [r1, #0]
   3ce70:	ea83 0405 	eor.w	r4, r3, r5
   3ce74:	f014 0f80 	tst.w	r4, #128	; 0x80
   3ce78:	4620      	mov	r0, r4
   3ce7a:	d10f      	bne.n	3ce9c <fcb_get_len+0x34>
		if ((buf[0] == fcb->f_erase_value) &&
   3ce7c:	42ab      	cmp	r3, r5
		    (buf[1] == fcb->f_erase_value)) {
   3ce7e:	7849      	ldrb	r1, [r1, #1]
		if ((buf[0] == fcb->f_erase_value) &&
   3ce80:	d101      	bne.n	3ce86 <fcb_get_len+0x1e>
   3ce82:	428b      	cmp	r3, r1
   3ce84:	d00f      	beq.n	3cea6 <fcb_get_len+0x3e>
			return -ENOTSUP;
		}
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3ce86:	43c0      	mvns	r0, r0
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   3ce88:	404b      	eors	r3, r1
   3ce8a:	01db      	lsls	r3, r3, #7
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3ce8c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   3ce90:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3ce94:	4303      	orrs	r3, r0
		rc = 2;
   3ce96:	2002      	movs	r0, #2
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3ce98:	8013      	strh	r3, [r2, #0]
	} else {
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
		rc = 1;
	}
	return rc;
}
   3ce9a:	bd30      	pop	{r4, r5, pc}
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   3ce9c:	43e3      	mvns	r3, r4
   3ce9e:	b2db      	uxtb	r3, r3
		rc = 1;
   3cea0:	2001      	movs	r0, #1
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   3cea2:	8013      	strh	r3, [r2, #0]
		rc = 1;
   3cea4:	e7f9      	b.n	3ce9a <fcb_get_len+0x32>
			return -ENOTSUP;
   3cea6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3ceaa:	e7f6      	b.n	3ce9a <fcb_get_len+0x32>

0003ceac <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, uint16_t id)
{
   3ceac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const uint8_t ev = fcb->f_erase_value;
   3ceae:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
	return (fcb->f_magic ^ ~MK32(ev));
   3ceb2:	6806      	ldr	r6, [r0, #0]
   3ceb4:	0423      	lsls	r3, r4, #16
   3ceb6:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   3ceba:	4323      	orrs	r3, r4
   3cebc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   3cec0:	4073      	eors	r3, r6
   3cec2:	43db      	mvns	r3, r3
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb_flash_magic(fcb);
   3cec4:	9302      	str	r3, [sp, #8]
	fda.fd_ver = fcb->f_version;
   3cec6:	7903      	ldrb	r3, [r0, #4]
	fda._pad = fcb->f_erase_value;
	fda.fd_id = id;
   3cec8:	f8ad 200e 	strh.w	r2, [sp, #14]
	fda.fd_ver = fcb->f_version;
   3cecc:	f88d 300c 	strb.w	r3, [sp, #12]

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   3ced0:	2308      	movs	r3, #8
   3ced2:	2200      	movs	r2, #0
   3ced4:	9300      	str	r3, [sp, #0]
   3ced6:	446b      	add	r3, sp
	fda._pad = fcb->f_erase_value;
   3ced8:	f88d 400d 	strb.w	r4, [sp, #13]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   3cedc:	f7ff ff72 	bl	3cdc4 <fcb_flash_write>
	if (rc != 0) {
		return -EIO;
   3cee0:	2800      	cmp	r0, #0
	}
	return 0;
}
   3cee2:	bf18      	it	ne
   3cee4:	f06f 0004 	mvnne.w	r0, #4
   3cee8:	b004      	add	sp, #16
   3ceea:	bd70      	pop	{r4, r5, r6, pc}

0003ceec <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   3ceec:	b530      	push	{r4, r5, lr}
   3ceee:	4605      	mov	r5, r0
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   3cef0:	4614      	mov	r4, r2
{
   3cef2:	b085      	sub	sp, #20
	if (!fdap) {
   3cef4:	b902      	cbnz	r2, 3cef8 <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   3cef6:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   3cef8:	2308      	movs	r3, #8
   3cefa:	2200      	movs	r2, #0
   3cefc:	9300      	str	r3, [sp, #0]
   3cefe:	4628      	mov	r0, r5
   3cf00:	4623      	mov	r3, r4
   3cf02:	f7ff ff4a 	bl	3cd9a <fcb_flash_read>
	if (rc) {
   3cf06:	b9a0      	cbnz	r0, 3cf32 <fcb_sector_hdr_read+0x46>
		return -EIO;
	}
	if (fdap->fd_magic == MK32(fcb->f_erase_value)) {
   3cf08:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
   3cf0c:	6821      	ldr	r1, [r4, #0]
   3cf0e:	0413      	lsls	r3, r2, #16
   3cf10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   3cf14:	4313      	orrs	r3, r2
   3cf16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3cf1a:	4299      	cmp	r1, r3
   3cf1c:	d007      	beq.n	3cf2e <fcb_sector_hdr_read+0x42>
   3cf1e:	682a      	ldr	r2, [r5, #0]
   3cf20:	4053      	eors	r3, r2
   3cf22:	43db      	mvns	r3, r3
		return 0;
	}
	if (fdap->fd_magic != fcb_flash_magic(fcb)) {
		return -ENOMSG;
   3cf24:	4299      	cmp	r1, r3
   3cf26:	bf0c      	ite	eq
   3cf28:	2001      	moveq	r0, #1
   3cf2a:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	}
	return 1;
}
   3cf2e:	b005      	add	sp, #20
   3cf30:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   3cf32:	f06f 0004 	mvn.w	r0, #4
   3cf36:	e7fa      	b.n	3cf2e <fcb_sector_hdr_read+0x42>

0003cf38 <fcb_init>:
{
   3cf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3cf3c:	688b      	ldr	r3, [r1, #8]
{
   3cf3e:	460c      	mov	r4, r1
   3cf40:	b085      	sub	sp, #20
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3cf42:	b92b      	cbnz	r3, 3cf50 <fcb_init+0x18>
		return -EINVAL;
   3cf44:	f06f 0515 	mvn.w	r5, #21
}
   3cf48:	4628      	mov	r0, r5
   3cf4a:	b005      	add	sp, #20
   3cf4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3cf50:	794b      	ldrb	r3, [r1, #5]
   3cf52:	798a      	ldrb	r2, [r1, #6]
   3cf54:	1a9b      	subs	r3, r3, r2
   3cf56:	2b00      	cmp	r3, #0
   3cf58:	ddf4      	ble.n	3cf44 <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   3cf5a:	3138      	adds	r1, #56	; 0x38
   3cf5c:	b2c0      	uxtb	r0, r0
   3cf5e:	f7e4 ff05 	bl	21d6c <flash_area_open>
	if (rc != 0) {
   3cf62:	4606      	mov	r6, r0
   3cf64:	2800      	cmp	r0, #0
   3cf66:	d1ed      	bne.n	3cf44 <fcb_init+0xc>
	dev = device_get_binding(fcb->fap->fa_dev_name);
   3cf68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3cf6a:	68d8      	ldr	r0, [r3, #12]
   3cf6c:	f7f9 f83a 	bl	35fe4 <z_impl_device_get_binding>
	return api->get_parameters(dev);
   3cf70:	6883      	ldr	r3, [r0, #8]
   3cf72:	68db      	ldr	r3, [r3, #12]
   3cf74:	4798      	blx	r3
	fcb->f_erase_value = fparam->erase_value;
   3cf76:	7903      	ldrb	r3, [r0, #4]
	align = fcb_get_align(fcb);
   3cf78:	4620      	mov	r0, r4
	fcb->f_erase_value = fparam->erase_value;
   3cf7a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	align = fcb_get_align(fcb);
   3cf7e:	f7ff ff05 	bl	3cd8c <fcb_get_align>
	if (align == 0U) {
   3cf82:	4681      	mov	r9, r0
   3cf84:	2800      	cmp	r0, #0
   3cf86:	d0dd      	beq.n	3cf44 <fcb_init+0xc>
	int oldest = -1, newest = -1;
   3cf88:	f04f 3bff 	mov.w	fp, #4294967295
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   3cf8c:	46b2      	mov	sl, r6
   3cf8e:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   3cf90:	46d8      	mov	r8, fp
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3cf92:	7963      	ldrb	r3, [r4, #5]
   3cf94:	42b3      	cmp	r3, r6
   3cf96:	dc24      	bgt.n	3cfe2 <fcb_init+0xaa>
	if (oldest < 0) {
   3cf98:	f1b8 3fff 	cmp.w	r8, #4294967295
   3cf9c:	d149      	bne.n	3d032 <fcb_init+0xfa>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   3cf9e:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   3cfa0:	2200      	movs	r2, #0
   3cfa2:	4639      	mov	r1, r7
   3cfa4:	4620      	mov	r0, r4
   3cfa6:	f7ff ff81 	bl	3ceac <fcb_sector_hdr_init>
		if (rc) {
   3cfaa:	4605      	mov	r5, r0
   3cfac:	2800      	cmp	r0, #0
   3cfae:	d1cb      	bne.n	3cf48 <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   3cfb0:	46ba      	mov	sl, r7
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3cfb2:	2308      	movs	r3, #8
	fcb->f_active.fe_sector = newest_sector;
   3cfb4:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_align = align;
   3cfb8:	f884 9036 	strb.w	r9, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3cfbc:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   3cfbe:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   3cfc0:	f104 0624 	add.w	r6, r4, #36	; 0x24
   3cfc4:	4631      	mov	r1, r6
   3cfc6:	4620      	mov	r0, r4
   3cfc8:	f000 f8be 	bl	3d148 <fcb_getnext_in_sector>
		if (rc == -ENOTSUP) {
   3cfcc:	f110 0f86 	cmn.w	r0, #134	; 0x86
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   3cfd0:	4605      	mov	r5, r0
		if (rc == -ENOTSUP) {
   3cfd2:	d030      	beq.n	3d036 <fcb_init+0xfe>
		if (rc != 0) {
   3cfd4:	2800      	cmp	r0, #0
   3cfd6:	d0f5      	beq.n	3cfc4 <fcb_init+0x8c>
	return z_impl_k_mutex_init(mutex);
   3cfd8:	f104 000c 	add.w	r0, r4, #12
   3cfdc:	f004 f8c7 	bl	4116e <z_impl_k_mutex_init>
   3cfe0:	e7b2      	b.n	3cf48 <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   3cfe2:	68a1      	ldr	r1, [r4, #8]
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   3cfe4:	4620      	mov	r0, r4
		sector = &fcb->f_sectors[i];
   3cfe6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   3cfea:	aa02      	add	r2, sp, #8
   3cfec:	9101      	str	r1, [sp, #4]
   3cfee:	f7ff ff7d 	bl	3ceec <fcb_sector_hdr_read>
		if (rc < 0) {
   3cff2:	1e05      	subs	r5, r0, #0
   3cff4:	dba8      	blt.n	3cf48 <fcb_init+0x10>
		if (rc == 0) {
   3cff6:	d009      	beq.n	3d00c <fcb_init+0xd4>
		if (oldest < 0) {
   3cff8:	f1b8 3fff 	cmp.w	r8, #4294967295
			oldest = newest = fda.fd_id;
   3cffc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		if (oldest < 0) {
   3d000:	9901      	ldr	r1, [sp, #4]
   3d002:	d105      	bne.n	3d010 <fcb_init+0xd8>
			oldest = newest = fda.fd_id;
   3d004:	4698      	mov	r8, r3
			oldest_sector = newest_sector = sector;
   3d006:	468a      	mov	sl, r1
   3d008:	460f      	mov	r7, r1
			oldest = newest = fda.fd_id;
   3d00a:	469b      	mov	fp, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3d00c:	3601      	adds	r6, #1
   3d00e:	e7c0      	b.n	3cf92 <fcb_init+0x5a>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   3d010:	b21d      	sxth	r5, r3
   3d012:	fa0f f08b 	sxth.w	r0, fp
   3d016:	1a28      	subs	r0, r5, r0
   3d018:	2800      	cmp	r0, #0
   3d01a:	dd02      	ble.n	3d022 <fcb_init+0xea>
			newest = fda.fd_id;
   3d01c:	469b      	mov	fp, r3
			newest_sector = sector;
   3d01e:	468a      	mov	sl, r1
   3d020:	e7f4      	b.n	3d00c <fcb_init+0xd4>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   3d022:	fa0f f288 	sxth.w	r2, r8
   3d026:	1b52      	subs	r2, r2, r5
			oldest = fda.fd_id;
   3d028:	2a00      	cmp	r2, #0
   3d02a:	bfc4      	itt	gt
   3d02c:	4698      	movgt	r8, r3
   3d02e:	460f      	movgt	r7, r1
   3d030:	e7ec      	b.n	3d00c <fcb_init+0xd4>
   3d032:	465d      	mov	r5, fp
   3d034:	e7bd      	b.n	3cfb2 <fcb_init+0x7a>
			rc = 0;
   3d036:	2500      	movs	r5, #0
   3d038:	e7ce      	b.n	3cfd8 <fcb_init+0xa0>

0003d03a <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   3d03a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d03e:	460c      	mov	r4, r1
   3d040:	4617      	mov	r7, r2
	uint16_t len;
	uint32_t off;
	uint32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   3d042:	e9d1 1200 	ldrd	r1, r2, [r1]
   3d046:	684b      	ldr	r3, [r1, #4]
   3d048:	1c95      	adds	r5, r2, #2
   3d04a:	429d      	cmp	r5, r3
{
   3d04c:	4606      	mov	r6, r0
   3d04e:	b08c      	sub	sp, #48	; 0x30
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   3d050:	d84c      	bhi.n	3d0ec <fcb_elem_crc8+0xb2>
		return -ENOTSUP;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   3d052:	2302      	movs	r3, #2
   3d054:	9300      	str	r3, [sp, #0]
   3d056:	ab04      	add	r3, sp, #16
   3d058:	f7ff fe9f 	bl	3cd9a <fcb_flash_read>
	if (rc) {
   3d05c:	b120      	cbz	r0, 3d068 <fcb_elem_crc8+0x2e>
		return -EIO;
   3d05e:	f06f 0004 	mvn.w	r0, #4
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   3d062:	b00c      	add	sp, #48	; 0x30
   3d064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(fcb, tmp_str, &len);
   3d068:	4630      	mov	r0, r6
   3d06a:	f10d 020e 	add.w	r2, sp, #14
   3d06e:	a904      	add	r1, sp, #16
   3d070:	f7ff fefa 	bl	3ce68 <fcb_get_len>
	if (cnt < 0) {
   3d074:	2800      	cmp	r0, #0
   3d076:	dbf4      	blt.n	3d062 <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   3d078:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
	if (fcb->f_align <= 1U) {
   3d07c:	b283      	uxth	r3, r0
   3d07e:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d080:	bf84      	itt	hi
   3d082:	f102 35ff 	addhi.w	r5, r2, #4294967295
   3d086:	195b      	addhi	r3, r3, r5
   3d088:	6861      	ldr	r1, [r4, #4]
   3d08a:	bf84      	itt	hi
   3d08c:	4252      	neghi	r2, r2
   3d08e:	4013      	andhi	r3, r2
   3d090:	440b      	add	r3, r1
   3d092:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   3d094:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   3d098:	4602      	mov	r2, r0
	loc->fe_data_len = len;
   3d09a:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   3d09c:	20ff      	movs	r0, #255	; 0xff
   3d09e:	a904      	add	r1, sp, #16
   3d0a0:	f7e3 fd18 	bl	20ad4 <crc8_ccitt>
   3d0a4:	4605      	mov	r5, r0
	off = loc->fe_data_off;
   3d0a6:	f8d4 8008 	ldr.w	r8, [r4, #8]
	end = loc->fe_data_off + len;
   3d0aa:	f8bd a00e 	ldrh.w	sl, [sp, #14]
   3d0ae:	44c2      	add	sl, r8
	for (; off < end; off += blk_sz) {
   3d0b0:	45d0      	cmp	r8, sl
   3d0b2:	d302      	bcc.n	3d0ba <fcb_elem_crc8+0x80>
	return 0;
   3d0b4:	2000      	movs	r0, #0
	*c8p = crc8;
   3d0b6:	703d      	strb	r5, [r7, #0]
	return 0;
   3d0b8:	e7d3      	b.n	3d062 <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   3d0ba:	ebaa 0908 	sub.w	r9, sl, r8
   3d0be:	f1b9 0f20 	cmp.w	r9, #32
   3d0c2:	bf28      	it	cs
   3d0c4:	f04f 0920 	movcs.w	r9, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   3d0c8:	4642      	mov	r2, r8
   3d0ca:	4630      	mov	r0, r6
   3d0cc:	6821      	ldr	r1, [r4, #0]
   3d0ce:	f8cd 9000 	str.w	r9, [sp]
   3d0d2:	ab04      	add	r3, sp, #16
   3d0d4:	f7ff fe61 	bl	3cd9a <fcb_flash_read>
		if (rc) {
   3d0d8:	2800      	cmp	r0, #0
   3d0da:	d1c0      	bne.n	3d05e <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   3d0dc:	4628      	mov	r0, r5
   3d0de:	464a      	mov	r2, r9
   3d0e0:	a904      	add	r1, sp, #16
   3d0e2:	f7e3 fcf7 	bl	20ad4 <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   3d0e6:	44c8      	add	r8, r9
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   3d0e8:	4605      	mov	r5, r0
	for (; off < end; off += blk_sz) {
   3d0ea:	e7e1      	b.n	3d0b0 <fcb_elem_crc8+0x76>
		return -ENOTSUP;
   3d0ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d0f0:	e7b7      	b.n	3d062 <fcb_elem_crc8+0x28>

0003d0f2 <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   3d0f2:	b530      	push	{r4, r5, lr}
   3d0f4:	b085      	sub	sp, #20
	int rc;
	uint8_t crc8;
	uint8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   3d0f6:	f10d 020e 	add.w	r2, sp, #14
{
   3d0fa:	4605      	mov	r5, r0
   3d0fc:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   3d0fe:	f7ff ff9c 	bl	3d03a <fcb_elem_crc8>
	if (rc) {
   3d102:	b9e0      	cbnz	r0, 3d13e <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3d104:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   3d108:	89a2      	ldrh	r2, [r4, #12]
	if (fcb->f_align <= 1U) {
   3d10a:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d10c:	bf81      	itttt	hi
   3d10e:	f102 32ff 	addhi.w	r2, r2, #4294967295
   3d112:	18d2      	addhi	r2, r2, r3
   3d114:	425b      	neghi	r3, r3
   3d116:	401a      	andhi	r2, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   3d118:	2301      	movs	r3, #1
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3d11a:	68a1      	ldr	r1, [r4, #8]
	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   3d11c:	9300      	str	r3, [sp, #0]
   3d11e:	440a      	add	r2, r1
   3d120:	4628      	mov	r0, r5
   3d122:	6821      	ldr	r1, [r4, #0]
   3d124:	f10d 030f 	add.w	r3, sp, #15
   3d128:	f7ff fe37 	bl	3cd9a <fcb_flash_read>
	if (rc) {
   3d12c:	b948      	cbnz	r0, 3d142 <fcb_elem_info+0x50>
		return -EIO;
	}

	if (fl_crc8 != crc8) {
   3d12e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   3d132:	f89d 300e 	ldrb.w	r3, [sp, #14]
		return -EBADMSG;
   3d136:	429a      	cmp	r2, r3
   3d138:	bf18      	it	ne
   3d13a:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}
	return 0;
}
   3d13e:	b005      	add	sp, #20
   3d140:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   3d142:	f06f 0004 	mvn.w	r0, #4
   3d146:	e7fa      	b.n	3d13e <fcb_elem_info+0x4c>

0003d148 <fcb_getnext_in_sector>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   3d148:	b538      	push	{r3, r4, r5, lr}
   3d14a:	4604      	mov	r4, r0
   3d14c:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   3d14e:	f7ff ffd0 	bl	3d0f2 <fcb_elem_info>
	if (rc == 0 || rc == -EBADMSG) {
   3d152:	b110      	cbz	r0, 3d15a <fcb_getnext_in_sector+0x12>
   3d154:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3d158:	d118      	bne.n	3d18c <fcb_getnext_in_sector+0x44>
		do {
			loc->fe_elem_off = loc->fe_data_off +
   3d15a:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   3d15e:	89ab      	ldrh	r3, [r5, #12]
	if (fcb->f_align <= 1U) {
   3d160:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d162:	bf88      	it	hi
   3d164:	f103 33ff 	addhi.w	r3, r3, #4294967295
			loc->fe_elem_off = loc->fe_data_off +
   3d168:	68aa      	ldr	r2, [r5, #8]
   3d16a:	bf82      	ittt	hi
   3d16c:	185b      	addhi	r3, r3, r1
   3d16e:	4248      	neghi	r0, r1
   3d170:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1U) {
   3d172:	2901      	cmp	r1, #1
   3d174:	4413      	add	r3, r2
		return len;
   3d176:	bf92      	itee	ls
   3d178:	2201      	movls	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d17a:	424a      	neghi	r2, r1
   3d17c:	400a      	andhi	r2, r1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   3d17e:	4413      	add	r3, r2
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   3d180:	4629      	mov	r1, r5
   3d182:	4620      	mov	r0, r4
			loc->fe_elem_off = loc->fe_data_off +
   3d184:	606b      	str	r3, [r5, #4]
			rc = fcb_elem_info(fcb, loc);
   3d186:	f7ff ffb4 	bl	3d0f2 <fcb_elem_info>
			if (rc != -EBADMSG) {
   3d18a:	e7e3      	b.n	3d154 <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == -EBADMSG);
	}
	return rc;
}
   3d18c:	bd38      	pop	{r3, r4, r5, pc}

0003d18e <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   3d18e:	6882      	ldr	r2, [r0, #8]
   3d190:	7943      	ldrb	r3, [r0, #5]
	sector++;
   3d192:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   3d194:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   3d198:	4299      	cmp	r1, r3
   3d19a:	bf34      	ite	cc
   3d19c:	4608      	movcc	r0, r1
   3d19e:	4610      	movcs	r0, r2
   3d1a0:	4770      	bx	lr

0003d1a2 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   3d1a2:	680b      	ldr	r3, [r1, #0]
{
   3d1a4:	b570      	push	{r4, r5, r6, lr}
   3d1a6:	4605      	mov	r5, r0
   3d1a8:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   3d1aa:	b90b      	cbnz	r3, 3d1b0 <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   3d1ac:	6a03      	ldr	r3, [r0, #32]
   3d1ae:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0U) {
   3d1b0:	6863      	ldr	r3, [r4, #4]
   3d1b2:	b95b      	cbnz	r3, 3d1cc <fcb_getnext_nolock+0x2a>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d1b4:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   3d1b6:	4621      	mov	r1, r4
   3d1b8:	4628      	mov	r0, r5
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d1ba:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   3d1bc:	f7ff ff99 	bl	3d0f2 <fcb_elem_info>
		switch (rc) {
   3d1c0:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3d1c4:	d021      	beq.n	3d20a <fcb_getnext_nolock+0x68>
   3d1c6:	b950      	cbnz	r0, 3d1de <fcb_getnext_nolock+0x3c>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   3d1c8:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   3d1ca:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   3d1cc:	4621      	mov	r1, r4
   3d1ce:	4628      	mov	r0, r5
   3d1d0:	f7ff ffba 	bl	3d148 <fcb_getnext_in_sector>
		if (rc == 0) {
   3d1d4:	2800      	cmp	r0, #0
   3d1d6:	d0f7      	beq.n	3d1c8 <fcb_getnext_nolock+0x26>
		if (rc == -ENOTSUP) {
   3d1d8:	f110 0f86 	cmn.w	r0, #134	; 0x86
   3d1dc:	d113      	bne.n	3d206 <fcb_getnext_nolock+0x64>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d1de:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   3d1e0:	6821      	ldr	r1, [r4, #0]
   3d1e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3d1e4:	4299      	cmp	r1, r3
   3d1e6:	d019      	beq.n	3d21c <fcb_getnext_nolock+0x7a>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   3d1e8:	4628      	mov	r0, r5
   3d1ea:	f7ff ffd0 	bl	3d18e <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   3d1ee:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d1f0:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   3d1f4:	4628      	mov	r0, r5
   3d1f6:	f7ff ff7c 	bl	3d0f2 <fcb_elem_info>
			switch (rc) {
   3d1fa:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3d1fe:	d004      	beq.n	3d20a <fcb_getnext_nolock+0x68>
   3d200:	2800      	cmp	r0, #0
   3d202:	d0e1      	beq.n	3d1c8 <fcb_getnext_nolock+0x26>
   3d204:	e7ec      	b.n	3d1e0 <fcb_getnext_nolock+0x3e>
	while (rc == -EBADMSG) {
   3d206:	304d      	adds	r0, #77	; 0x4d
   3d208:	d1de      	bne.n	3d1c8 <fcb_getnext_nolock+0x26>
		rc = fcb_getnext_in_sector(fcb, loc);
   3d20a:	4621      	mov	r1, r4
   3d20c:	4628      	mov	r0, r5
   3d20e:	f7ff ff9b 	bl	3d148 <fcb_getnext_in_sector>
		if (rc == 0) {
   3d212:	2800      	cmp	r0, #0
   3d214:	d0d8      	beq.n	3d1c8 <fcb_getnext_nolock+0x26>
		if (rc != -EBADMSG) {
   3d216:	304d      	adds	r0, #77	; 0x4d
   3d218:	d0f7      	beq.n	3d20a <fcb_getnext_nolock+0x68>
next_sector:
   3d21a:	e7e0      	b.n	3d1de <fcb_getnext_nolock+0x3c>
				return -ENOTSUP;
   3d21c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d220:	e7d3      	b.n	3d1ca <fcb_getnext_nolock+0x28>

0003d222 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   3d222:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3d224:	4604      	mov	r4, r0
   3d226:	9101      	str	r1, [sp, #4]
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   3d228:	f100 050c 	add.w	r5, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   3d22c:	f04f 32ff 	mov.w	r2, #4294967295
   3d230:	f04f 33ff 	mov.w	r3, #4294967295
   3d234:	4628      	mov	r0, r5
   3d236:	f7f9 fbd9 	bl	369ec <z_impl_k_mutex_lock>
	if (rc) {
   3d23a:	b950      	cbnz	r0, 3d252 <fcb_getnext+0x30>
		return -EINVAL;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   3d23c:	4620      	mov	r0, r4
   3d23e:	9901      	ldr	r1, [sp, #4]
   3d240:	f7ff ffaf 	bl	3d1a2 <fcb_getnext_nolock>
   3d244:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   3d246:	4628      	mov	r0, r5
   3d248:	f7f9 fca2 	bl	36b90 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   3d24c:	4620      	mov	r0, r4
   3d24e:	b003      	add	sp, #12
   3d250:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   3d252:	f06f 0415 	mvn.w	r4, #21
   3d256:	e7f9      	b.n	3d24c <fcb_getnext+0x2a>

0003d258 <fcb_rotate>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   3d258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d25a:	4604      	mov	r4, r0
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   3d25c:	f100 070c 	add.w	r7, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   3d260:	f04f 32ff 	mov.w	r2, #4294967295
   3d264:	f04f 33ff 	mov.w	r3, #4294967295
   3d268:	4638      	mov	r0, r7
   3d26a:	f7f9 fbbf 	bl	369ec <z_impl_k_mutex_lock>
	if (rc) {
   3d26e:	bb48      	cbnz	r0, 3d2c4 <fcb_rotate+0x6c>
		return -EINVAL;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   3d270:	4620      	mov	r0, r4
   3d272:	6a21      	ldr	r1, [r4, #32]
   3d274:	f7ff fdbb 	bl	3cdee <fcb_erase_sector>
	if (rc) {
   3d278:	bb08      	cbnz	r0, 3d2be <fcb_rotate+0x66>
		rc = -EIO;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   3d27a:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   3d27e:	4299      	cmp	r1, r3
   3d280:	d112      	bne.n	3d2a8 <fcb_rotate+0x50>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d282:	4620      	mov	r0, r4
   3d284:	f7ff ff83 	bl	3d18e <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3d288:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   3d28a:	4601      	mov	r1, r0
   3d28c:	3201      	adds	r2, #1
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d28e:	4606      	mov	r6, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3d290:	b292      	uxth	r2, r2
   3d292:	4620      	mov	r0, r4
   3d294:	f7ff fe0a 	bl	3ceac <fcb_sector_hdr_init>
		if (rc) {
   3d298:	4605      	mov	r5, r0
   3d29a:	b958      	cbnz	r0, 3d2b4 <fcb_rotate+0x5c>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3d29c:	2308      	movs	r3, #8
   3d29e:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   3d2a0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   3d2a2:	6266      	str	r6, [r4, #36]	; 0x24
		fcb->f_active_id++;
   3d2a4:	3301      	adds	r3, #1
   3d2a6:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d2a8:	4620      	mov	r0, r4
   3d2aa:	6a21      	ldr	r1, [r4, #32]
   3d2ac:	f7ff ff6f 	bl	3d18e <fcb_getnext_sector>
   3d2b0:	2500      	movs	r5, #0
   3d2b2:	6220      	str	r0, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   3d2b4:	4638      	mov	r0, r7
   3d2b6:	f7f9 fc6b 	bl	36b90 <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   3d2ba:	4628      	mov	r0, r5
   3d2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = -EIO;
   3d2be:	f06f 0504 	mvn.w	r5, #4
   3d2c2:	e7f7      	b.n	3d2b4 <fcb_rotate+0x5c>
		return -EINVAL;
   3d2c4:	f06f 0515 	mvn.w	r5, #21
   3d2c8:	e7f7      	b.n	3d2ba <fcb_rotate+0x62>

0003d2ca <sntp_init>:
{
   3d2ca:	b570      	push	{r4, r5, r6, lr}
   3d2cc:	460d      	mov	r5, r1
   3d2ce:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   3d2d0:	4604      	mov	r4, r0
   3d2d2:	b330      	cbz	r0, 3d322 <sntp_init+0x58>
   3d2d4:	b329      	cbz	r1, 3d322 <sntp_init+0x58>
   3d2d6:	2214      	movs	r2, #20
   3d2d8:	2100      	movs	r1, #0
   3d2da:	f004 f992 	bl	41602 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   3d2de:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3d2e0:	2211      	movs	r2, #17
   3d2e2:	2102      	movs	r1, #2
   3d2e4:	f7e4 fb70 	bl	219c8 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   3d2e8:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   3d2ea:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   3d2ec:	da04      	bge.n	3d2f8 <sntp_init+0x2e>
		return -errno;
   3d2ee:	f000 fb2d 	bl	3d94c <__errno>
   3d2f2:	6800      	ldr	r0, [r0, #0]
   3d2f4:	4240      	negs	r0, r0
}
   3d2f6:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   3d2f8:	4632      	mov	r2, r6
   3d2fa:	4629      	mov	r1, r5
   3d2fc:	f000 f854 	bl	3d3a8 <z_impl_zsock_connect>
	if (ret < 0) {
   3d300:	2800      	cmp	r0, #0
   3d302:	68e0      	ldr	r0, [r4, #12]
   3d304:	da02      	bge.n	3d30c <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   3d306:	f000 f82b 	bl	3d360 <z_impl_zsock_close>
   3d30a:	e7f0      	b.n	3d2ee <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d30c:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   3d30e:	68a3      	ldr	r3, [r4, #8]
   3d310:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d314:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   3d318:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d31a:	8091      	strh	r1, [r2, #4]
	return 0;
   3d31c:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   3d31e:	60a3      	str	r3, [r4, #8]
	return 0;
   3d320:	e7e9      	b.n	3d2f6 <sntp_init+0x2c>
		return -EFAULT;
   3d322:	f06f 000d 	mvn.w	r0, #13
   3d326:	e7e6      	b.n	3d2f6 <sntp_init+0x2c>

0003d328 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   3d328:	b110      	cbz	r0, 3d330 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   3d32a:	68c0      	ldr	r0, [r0, #12]
   3d32c:	f000 b818 	b.w	3d360 <z_impl_zsock_close>
	}
}
   3d330:	4770      	bx	lr

0003d332 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   3d332:	f7e4 bcc1 	b.w	21cb8 <socket_offload_getaddrinfo>

0003d336 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   3d336:	f7e4 bcf3 	b.w	21d20 <socket_offload_freeaddrinfo>

0003d33a <z_fdtable_call_ioctl>:
{
   3d33a:	b40c      	push	{r2, r3}
   3d33c:	4603      	mov	r3, r0
   3d33e:	b507      	push	{r0, r1, r2, lr}
   3d340:	aa04      	add	r2, sp, #16
   3d342:	4608      	mov	r0, r1
   3d344:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   3d348:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   3d34a:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   3d34c:	4798      	blx	r3
}
   3d34e:	b003      	add	sp, #12
   3d350:	f85d eb04 	ldr.w	lr, [sp], #4
   3d354:	b002      	add	sp, #8
   3d356:	4770      	bx	lr

0003d358 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   3d358:	f7f9 bb48 	b.w	369ec <z_impl_k_mutex_lock>

0003d35c <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   3d35c:	f7f9 bc18 	b.w	36b90 <z_impl_k_mutex_unlock>

0003d360 <z_impl_zsock_close>:
{
   3d360:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   3d362:	4669      	mov	r1, sp
   3d364:	aa01      	add	r2, sp, #4
{
   3d366:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   3d368:	f7e3 fbfa 	bl	20b60 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   3d36c:	4604      	mov	r4, r0
   3d36e:	b940      	cbnz	r0, 3d382 <z_impl_zsock_close+0x22>
		errno = EBADF;
   3d370:	f000 faec 	bl	3d94c <__errno>
   3d374:	2309      	movs	r3, #9
		return -1;
   3d376:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   3d37a:	6003      	str	r3, [r0, #0]
}
   3d37c:	4620      	mov	r0, r4
   3d37e:	b003      	add	sp, #12
   3d380:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   3d382:	f04f 32ff 	mov.w	r2, #4294967295
   3d386:	9801      	ldr	r0, [sp, #4]
   3d388:	f04f 33ff 	mov.w	r3, #4294967295
   3d38c:	f7ff ffe4 	bl	3d358 <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
   3d390:	9b00      	ldr	r3, [sp, #0]
   3d392:	4620      	mov	r0, r4
   3d394:	689b      	ldr	r3, [r3, #8]
   3d396:	4798      	blx	r3
   3d398:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   3d39a:	9801      	ldr	r0, [sp, #4]
   3d39c:	f7ff ffde 	bl	3d35c <k_mutex_unlock.isra.0>
	z_free_fd(sock);
   3d3a0:	4628      	mov	r0, r5
   3d3a2:	f7e3 fc47 	bl	20c34 <z_free_fd>
	return ret;
   3d3a6:	e7e9      	b.n	3d37c <z_impl_zsock_close+0x1c>

0003d3a8 <z_impl_zsock_connect>:
{
   3d3a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d3aa:	460d      	mov	r5, r1
   3d3ac:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d3ae:	4669      	mov	r1, sp
   3d3b0:	aa01      	add	r2, sp, #4
   3d3b2:	f7e3 fbd5 	bl	20b60 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   3d3b6:	4604      	mov	r4, r0
   3d3b8:	b110      	cbz	r0, 3d3c0 <z_impl_zsock_connect+0x18>
   3d3ba:	9b00      	ldr	r3, [sp, #0]
   3d3bc:	699b      	ldr	r3, [r3, #24]
   3d3be:	b943      	cbnz	r3, 3d3d2 <z_impl_zsock_connect+0x2a>
   3d3c0:	f000 fac4 	bl	3d94c <__errno>
   3d3c4:	2309      	movs	r3, #9
   3d3c6:	f04f 34ff 	mov.w	r4, #4294967295
   3d3ca:	6003      	str	r3, [r0, #0]
}
   3d3cc:	4620      	mov	r0, r4
   3d3ce:	b002      	add	sp, #8
   3d3d0:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   3d3d2:	9801      	ldr	r0, [sp, #4]
   3d3d4:	f04f 32ff 	mov.w	r2, #4294967295
   3d3d8:	f04f 33ff 	mov.w	r3, #4294967295
   3d3dc:	f7ff ffbc 	bl	3d358 <k_mutex_lock.constprop.0.isra.0>
   3d3e0:	9b00      	ldr	r3, [sp, #0]
   3d3e2:	4632      	mov	r2, r6
   3d3e4:	4629      	mov	r1, r5
   3d3e6:	4620      	mov	r0, r4
   3d3e8:	699b      	ldr	r3, [r3, #24]
   3d3ea:	4798      	blx	r3
   3d3ec:	4604      	mov	r4, r0
   3d3ee:	9801      	ldr	r0, [sp, #4]
   3d3f0:	f7ff ffb4 	bl	3d35c <k_mutex_unlock.isra.0>
   3d3f4:	e7ea      	b.n	3d3cc <z_impl_zsock_connect+0x24>

0003d3f6 <z_impl_zsock_sendto>:
{
   3d3f6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3d3fa:	460d      	mov	r5, r1
   3d3fc:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d3fe:	a902      	add	r1, sp, #8
   3d400:	aa03      	add	r2, sp, #12
{
   3d402:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3d404:	f7e3 fbac 	bl	20b60 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   3d408:	4604      	mov	r4, r0
   3d40a:	b110      	cbz	r0, 3d412 <z_impl_zsock_sendto+0x1c>
   3d40c:	9b02      	ldr	r3, [sp, #8]
   3d40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3d410:	b94b      	cbnz	r3, 3d426 <z_impl_zsock_sendto+0x30>
   3d412:	f000 fa9b 	bl	3d94c <__errno>
   3d416:	2309      	movs	r3, #9
   3d418:	f04f 34ff 	mov.w	r4, #4294967295
   3d41c:	6003      	str	r3, [r0, #0]
}
   3d41e:	4620      	mov	r0, r4
   3d420:	b004      	add	sp, #16
   3d422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   3d426:	9803      	ldr	r0, [sp, #12]
   3d428:	f04f 32ff 	mov.w	r2, #4294967295
   3d42c:	f04f 33ff 	mov.w	r3, #4294967295
   3d430:	f7ff ff92 	bl	3d358 <k_mutex_lock.constprop.0.isra.0>
   3d434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3d436:	4632      	mov	r2, r6
   3d438:	9301      	str	r3, [sp, #4]
   3d43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d43c:	4629      	mov	r1, r5
   3d43e:	9300      	str	r3, [sp, #0]
   3d440:	9b02      	ldr	r3, [sp, #8]
   3d442:	4620      	mov	r0, r4
   3d444:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   3d448:	463b      	mov	r3, r7
   3d44a:	47c0      	blx	r8
   3d44c:	4604      	mov	r4, r0
   3d44e:	9803      	ldr	r0, [sp, #12]
   3d450:	f7ff ff84 	bl	3d35c <k_mutex_unlock.isra.0>
   3d454:	e7e3      	b.n	3d41e <z_impl_zsock_sendto+0x28>

0003d456 <z_impl_zsock_sendmsg>:
{
   3d456:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d458:	460d      	mov	r5, r1
   3d45a:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d45c:	4669      	mov	r1, sp
   3d45e:	aa01      	add	r2, sp, #4
   3d460:	f7e3 fb7e 	bl	20b60 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   3d464:	4604      	mov	r4, r0
   3d466:	b110      	cbz	r0, 3d46e <z_impl_zsock_sendmsg+0x18>
   3d468:	9b00      	ldr	r3, [sp, #0]
   3d46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   3d46c:	b943      	cbnz	r3, 3d480 <z_impl_zsock_sendmsg+0x2a>
   3d46e:	f000 fa6d 	bl	3d94c <__errno>
   3d472:	2309      	movs	r3, #9
   3d474:	f04f 34ff 	mov.w	r4, #4294967295
   3d478:	6003      	str	r3, [r0, #0]
}
   3d47a:	4620      	mov	r0, r4
   3d47c:	b002      	add	sp, #8
   3d47e:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   3d480:	9801      	ldr	r0, [sp, #4]
   3d482:	f04f 32ff 	mov.w	r2, #4294967295
   3d486:	f04f 33ff 	mov.w	r3, #4294967295
   3d48a:	f7ff ff65 	bl	3d358 <k_mutex_lock.constprop.0.isra.0>
   3d48e:	9b00      	ldr	r3, [sp, #0]
   3d490:	4632      	mov	r2, r6
   3d492:	4629      	mov	r1, r5
   3d494:	4620      	mov	r0, r4
   3d496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   3d498:	4798      	blx	r3
   3d49a:	4604      	mov	r4, r0
   3d49c:	9801      	ldr	r0, [sp, #4]
   3d49e:	f7ff ff5d 	bl	3d35c <k_mutex_unlock.isra.0>
   3d4a2:	e7ea      	b.n	3d47a <z_impl_zsock_sendmsg+0x24>

0003d4a4 <z_impl_zsock_recvfrom>:
{
   3d4a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3d4a8:	460d      	mov	r5, r1
   3d4aa:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d4ac:	a902      	add	r1, sp, #8
   3d4ae:	aa03      	add	r2, sp, #12
{
   3d4b0:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3d4b2:	f7e3 fb55 	bl	20b60 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   3d4b6:	4604      	mov	r4, r0
   3d4b8:	b110      	cbz	r0, 3d4c0 <z_impl_zsock_recvfrom+0x1c>
   3d4ba:	9b02      	ldr	r3, [sp, #8]
   3d4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3d4be:	b94b      	cbnz	r3, 3d4d4 <z_impl_zsock_recvfrom+0x30>
   3d4c0:	f000 fa44 	bl	3d94c <__errno>
   3d4c4:	2309      	movs	r3, #9
   3d4c6:	f04f 34ff 	mov.w	r4, #4294967295
   3d4ca:	6003      	str	r3, [r0, #0]
}
   3d4cc:	4620      	mov	r0, r4
   3d4ce:	b004      	add	sp, #16
   3d4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   3d4d4:	9803      	ldr	r0, [sp, #12]
   3d4d6:	f04f 32ff 	mov.w	r2, #4294967295
   3d4da:	f04f 33ff 	mov.w	r3, #4294967295
   3d4de:	f7ff ff3b 	bl	3d358 <k_mutex_lock.constprop.0.isra.0>
   3d4e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3d4e4:	4632      	mov	r2, r6
   3d4e6:	9301      	str	r3, [sp, #4]
   3d4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d4ea:	4629      	mov	r1, r5
   3d4ec:	9300      	str	r3, [sp, #0]
   3d4ee:	9b02      	ldr	r3, [sp, #8]
   3d4f0:	4620      	mov	r0, r4
   3d4f2:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   3d4f6:	463b      	mov	r3, r7
   3d4f8:	47c0      	blx	r8
   3d4fa:	4604      	mov	r4, r0
   3d4fc:	9803      	ldr	r0, [sp, #12]
   3d4fe:	f7ff ff2d 	bl	3d35c <k_mutex_unlock.isra.0>
   3d502:	e7e3      	b.n	3d4cc <z_impl_zsock_recvfrom+0x28>

0003d504 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   3d504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   3d508:	1e14      	subs	r4, r2, #0
{
   3d50a:	4605      	mov	r5, r0
   3d50c:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   3d50e:	db13      	blt.n	3d538 <z_impl_zsock_poll+0x34>
   3d510:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   3d514:	f240 30e7 	movw	r0, #999	; 0x3e7
   3d518:	2100      	movs	r1, #0
   3d51a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3d51e:	2300      	movs	r3, #0
   3d520:	fbc4 0107 	smlal	r0, r1, r4, r7
   3d524:	f7df fce0 	bl	1cee8 <__aeabi_uldivmod>
   3d528:	4602      	mov	r2, r0
   3d52a:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   3d52c:	4631      	mov	r1, r6
   3d52e:	4628      	mov	r0, r5
}
   3d530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   3d534:	f7e4 ba8e 	b.w	21a54 <zsock_poll_internal>
		timeout = K_FOREVER;
   3d538:	f04f 32ff 	mov.w	r2, #4294967295
   3d53c:	4613      	mov	r3, r2
   3d53e:	e7f5      	b.n	3d52c <z_impl_zsock_poll+0x28>

0003d540 <z_impl_zsock_inet_pton>:
}
#include <syscalls/zsock_poll_mrsh.c>
#endif

int z_impl_zsock_inet_pton(sa_family_t family, const char *src, void *dst)
{
   3d540:	b508      	push	{r3, lr}
	return z_impl_net_addr_pton(family, src, dst);
   3d542:	f000 fa6c 	bl	3da1e <z_impl_net_addr_pton>
	if (net_addr_pton(family, src, dst) == 0) {
		return 1;
	} else {
		return 0;
	}
}
   3d546:	fab0 f080 	clz	r0, r0
   3d54a:	0940      	lsrs	r0, r0, #5
   3d54c:	bd08      	pop	{r3, pc}

0003d54e <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   3d54e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3d552:	460d      	mov	r5, r1
   3d554:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d556:	a902      	add	r1, sp, #8
   3d558:	aa03      	add	r2, sp, #12
{
   3d55a:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3d55c:	f7e3 fb00 	bl	20b60 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   3d560:	4604      	mov	r4, r0
   3d562:	b110      	cbz	r0, 3d56a <z_impl_zsock_setsockopt+0x1c>
   3d564:	9b02      	ldr	r3, [sp, #8]
   3d566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   3d568:	b94b      	cbnz	r3, 3d57e <z_impl_zsock_setsockopt+0x30>
   3d56a:	f000 f9ef 	bl	3d94c <__errno>
   3d56e:	2309      	movs	r3, #9
   3d570:	f04f 34ff 	mov.w	r4, #4294967295
   3d574:	6003      	str	r3, [r0, #0]
}
   3d576:	4620      	mov	r0, r4
   3d578:	b004      	add	sp, #16
   3d57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   3d57e:	9803      	ldr	r0, [sp, #12]
   3d580:	f04f 32ff 	mov.w	r2, #4294967295
   3d584:	f04f 33ff 	mov.w	r3, #4294967295
   3d588:	f7ff fee6 	bl	3d358 <k_mutex_lock.constprop.0.isra.0>
   3d58c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d58e:	4632      	mov	r2, r6
   3d590:	9300      	str	r3, [sp, #0]
   3d592:	9b02      	ldr	r3, [sp, #8]
   3d594:	4629      	mov	r1, r5
   3d596:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   3d59a:	4620      	mov	r0, r4
   3d59c:	463b      	mov	r3, r7
   3d59e:	47c0      	blx	r8
   3d5a0:	4604      	mov	r4, r0
   3d5a2:	9803      	ldr	r0, [sp, #12]
   3d5a4:	f7ff feda 	bl	3d35c <k_mutex_unlock.isra.0>
   3d5a8:	e7e5      	b.n	3d576 <z_impl_zsock_setsockopt+0x28>

0003d5aa <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   3d5aa:	4770      	bx	lr

0003d5ac <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   3d5ac:	b573      	push	{r0, r1, r4, r5, r6, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   3d5ae:	1e0c      	subs	r4, r1, #0
   3d5b0:	4605      	mov	r5, r0
   3d5b2:	461e      	mov	r6, r3
   3d5b4:	9201      	str	r2, [sp, #4]
   3d5b6:	db11      	blt.n	3d5dc <flash_area_read+0x30>
   3d5b8:	6881      	ldr	r1, [r0, #8]
   3d5ba:	18e3      	adds	r3, r4, r3
   3d5bc:	428b      	cmp	r3, r1
   3d5be:	d80d      	bhi.n	3d5dc <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   3d5c0:	68c0      	ldr	r0, [r0, #12]
   3d5c2:	f7f8 fd0f 	bl	35fe4 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   3d5c6:	6869      	ldr	r1, [r5, #4]
   3d5c8:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   3d5ca:	6883      	ldr	r3, [r0, #8]
   3d5cc:	9a01      	ldr	r2, [sp, #4]
   3d5ce:	681c      	ldr	r4, [r3, #0]
   3d5d0:	4633      	mov	r3, r6
   3d5d2:	46a4      	mov	ip, r4
}
   3d5d4:	b002      	add	sp, #8
   3d5d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d5da:	4760      	bx	ip
   3d5dc:	f06f 0015 	mvn.w	r0, #21
   3d5e0:	b002      	add	sp, #8
   3d5e2:	bd70      	pop	{r4, r5, r6, pc}

0003d5e4 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   3d5e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d5e6:	1e0c      	subs	r4, r1, #0
   3d5e8:	4605      	mov	r5, r0
   3d5ea:	461e      	mov	r6, r3
   3d5ec:	9201      	str	r2, [sp, #4]
   3d5ee:	db11      	blt.n	3d614 <flash_area_write+0x30>
   3d5f0:	6881      	ldr	r1, [r0, #8]
   3d5f2:	18e3      	adds	r3, r4, r3
   3d5f4:	428b      	cmp	r3, r1
   3d5f6:	d80d      	bhi.n	3d614 <flash_area_write+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3d5f8:	68c0      	ldr	r0, [r0, #12]
   3d5fa:	f7f8 fcf3 	bl	35fe4 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   3d5fe:	6869      	ldr	r1, [r5, #4]
   3d600:	4421      	add	r1, r4
	rc = api->write(dev, offset, data, len);
   3d602:	6883      	ldr	r3, [r0, #8]
   3d604:	9a01      	ldr	r2, [sp, #4]
   3d606:	685c      	ldr	r4, [r3, #4]
   3d608:	4633      	mov	r3, r6
   3d60a:	46a4      	mov	ip, r4

	return rc;
}
   3d60c:	b002      	add	sp, #8
   3d60e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d612:	4760      	bx	ip
   3d614:	f06f 0015 	mvn.w	r0, #21
   3d618:	b002      	add	sp, #8
   3d61a:	bd70      	pop	{r4, r5, r6, pc}

0003d61c <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   3d61c:	b570      	push	{r4, r5, r6, lr}
   3d61e:	1e0c      	subs	r4, r1, #0
   3d620:	4605      	mov	r5, r0
   3d622:	4616      	mov	r6, r2
   3d624:	db0e      	blt.n	3d644 <flash_area_erase+0x28>
   3d626:	18a3      	adds	r3, r4, r2
   3d628:	6882      	ldr	r2, [r0, #8]
   3d62a:	4293      	cmp	r3, r2
   3d62c:	d80a      	bhi.n	3d644 <flash_area_erase+0x28>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3d62e:	68c0      	ldr	r0, [r0, #12]
   3d630:	f7f8 fcd8 	bl	35fe4 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   3d634:	6869      	ldr	r1, [r5, #4]
   3d636:	4421      	add	r1, r4
	rc = api->erase(dev, offset, size);
   3d638:	6883      	ldr	r3, [r0, #8]
   3d63a:	4632      	mov	r2, r6

	return rc;
}
   3d63c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d640:	689b      	ldr	r3, [r3, #8]
   3d642:	4718      	bx	r3
   3d644:	f06f 0015 	mvn.w	r0, #21
   3d648:	bd70      	pop	{r4, r5, r6, pc}

0003d64a <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   3d64a:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   3d64c:	68c0      	ldr	r0, [r0, #12]
   3d64e:	f7f8 fcc9 	bl	35fe4 <z_impl_device_get_binding>
	return api->get_parameters(dev)->write_block_size;
   3d652:	6883      	ldr	r3, [r0, #8]
   3d654:	68db      	ldr	r3, [r3, #12]
   3d656:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   3d658:	6800      	ldr	r0, [r0, #0]
   3d65a:	bd08      	pop	{r3, pc}

0003d65c <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   3d65c:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   3d65e:	68c0      	ldr	r0, [r0, #12]
   3d660:	f7f8 fcc0 	bl	35fe4 <z_impl_device_get_binding>
	return api->get_parameters(dev);
   3d664:	6883      	ldr	r3, [r0, #8]
   3d666:	68db      	ldr	r3, [r3, #12]
   3d668:	4798      	blx	r3

	return param->erase_value;
}
   3d66a:	7900      	ldrb	r0, [r0, #4]
   3d66c:	bd08      	pop	{r3, pc}

0003d66e <get_sectors_cb>:
{
   3d66e:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   3d670:	6802      	ldr	r2, [r0, #0]
   3d672:	684c      	ldr	r4, [r1, #4]
   3d674:	42a2      	cmp	r2, r4
   3d676:	d316      	bcc.n	3d6a6 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   3d678:	688b      	ldr	r3, [r1, #8]
   3d67a:	4423      	add	r3, r4
   3d67c:	429a      	cmp	r2, r3
   3d67e:	d206      	bcs.n	3d68e <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   3d680:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   3d684:	42ab      	cmp	r3, r5
   3d686:	d304      	bcc.n	3d692 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   3d688:	f06f 030b 	mvn.w	r3, #11
   3d68c:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   3d68e:	2000      	movs	r0, #0
   3d690:	e00a      	b.n	3d6a8 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3d692:	68cd      	ldr	r5, [r1, #12]
   3d694:	1b12      	subs	r2, r2, r4
   3d696:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   3d69a:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3d69c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   3d6a0:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   3d6a2:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   3d6a4:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   3d6a6:	2001      	movs	r0, #1
}
   3d6a8:	bd70      	pop	{r4, r5, r6, pc}

0003d6aa <flash_get_write_block_size>:

extern size_t z_impl_flash_get_write_block_size(const struct device * dev);

__pinned_func
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   3d6aa:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   3d6ac:	6883      	ldr	r3, [r0, #8]
   3d6ae:	68db      	ldr	r3, [r3, #12]
   3d6b0:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   3d6b2:	6800      	ldr	r0, [r0, #0]
   3d6b4:	bd08      	pop	{r3, pc}

0003d6b6 <stream_flash_buffered_write>:
{
   3d6b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d6ba:	4689      	mov	r9, r1
   3d6bc:	4616      	mov	r6, r2
   3d6be:	4698      	mov	r8, r3
	if (!ctx) {
   3d6c0:	4604      	mov	r4, r0
   3d6c2:	b398      	cbz	r0, 3d72c <stream_flash_buffered_write+0x76>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   3d6c4:	6882      	ldr	r2, [r0, #8]
   3d6c6:	6903      	ldr	r3, [r0, #16]
   3d6c8:	4413      	add	r3, r2
   3d6ca:	6982      	ldr	r2, [r0, #24]
   3d6cc:	4433      	add	r3, r6
   3d6ce:	4293      	cmp	r3, r2
   3d6d0:	d830      	bhi.n	3d734 <stream_flash_buffered_write+0x7e>
	int processed = 0;
   3d6d2:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3d6d4:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
	while ((len - processed) >=
   3d6d8:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3d6dc:	1a3f      	subs	r7, r7, r0
	while ((len - processed) >=
   3d6de:	45ba      	cmp	sl, r7
   3d6e0:	d215      	bcs.n	3d70e <stream_flash_buffered_write+0x58>
	if (processed < len) {
   3d6e2:	42b5      	cmp	r5, r6
   3d6e4:	d209      	bcs.n	3d6fa <stream_flash_buffered_write+0x44>
		memcpy(ctx->buf + ctx->buf_bytes,
   3d6e6:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3d6e8:	4652      	mov	r2, sl
   3d6ea:	4418      	add	r0, r3
   3d6ec:	eb09 0105 	add.w	r1, r9, r5
   3d6f0:	f003 ff67 	bl	415c2 <memcpy>
		ctx->buf_bytes += len - processed;
   3d6f4:	68a3      	ldr	r3, [r4, #8]
   3d6f6:	4453      	add	r3, sl
   3d6f8:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   3d6fa:	f1b8 0f00 	cmp.w	r8, #0
   3d6fe:	d01c      	beq.n	3d73a <stream_flash_buffered_write+0x84>
   3d700:	68a0      	ldr	r0, [r4, #8]
   3d702:	b1a8      	cbz	r0, 3d730 <stream_flash_buffered_write+0x7a>
		rc = flash_sync(ctx);
   3d704:	4620      	mov	r0, r4
}
   3d706:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = flash_sync(ctx);
   3d70a:	f7e4 bbbd 	b.w	21e88 <flash_sync>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   3d70e:	6823      	ldr	r3, [r4, #0]
   3d710:	463a      	mov	r2, r7
   3d712:	4418      	add	r0, r3
   3d714:	eb09 0105 	add.w	r1, r9, r5
   3d718:	f003 ff53 	bl	415c2 <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   3d71c:	6863      	ldr	r3, [r4, #4]
		rc = flash_sync(ctx);
   3d71e:	4620      	mov	r0, r4
		ctx->buf_bytes = ctx->buf_len;
   3d720:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   3d722:	f7e4 fbb1 	bl	21e88 <flash_sync>
		if (rc != 0) {
   3d726:	b918      	cbnz	r0, 3d730 <stream_flash_buffered_write+0x7a>
		processed += buf_empty_bytes;
   3d728:	443d      	add	r5, r7
   3d72a:	e7d3      	b.n	3d6d4 <stream_flash_buffered_write+0x1e>
		return -EFAULT;
   3d72c:	f06f 000d 	mvn.w	r0, #13
}
   3d730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   3d734:	f06f 000b 	mvn.w	r0, #11
   3d738:	e7fa      	b.n	3d730 <stream_flash_buffered_write+0x7a>
   3d73a:	4640      	mov	r0, r8
   3d73c:	e7f8      	b.n	3d730 <stream_flash_buffered_write+0x7a>

0003d73e <stream_flash_bytes_written>:
}
   3d73e:	6900      	ldr	r0, [r0, #16]
   3d740:	4770      	bx	lr

0003d742 <settings_name_steq>:
{
   3d742:	b530      	push	{r4, r5, lr}
	if (next) {
   3d744:	b10a      	cbz	r2, 3d74a <settings_name_steq+0x8>
		*next = NULL;
   3d746:	2300      	movs	r3, #0
   3d748:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   3d74a:	b190      	cbz	r0, 3d772 <settings_name_steq+0x30>
   3d74c:	b151      	cbz	r1, 3d764 <settings_name_steq+0x22>
   3d74e:	3901      	subs	r1, #1
	while ((*key != '\0') && (*key == *name) &&
   3d750:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   3d754:	4604      	mov	r4, r0
   3d756:	f810 3b01 	ldrb.w	r3, [r0], #1
   3d75a:	b15d      	cbz	r5, 3d774 <settings_name_steq+0x32>
   3d75c:	429d      	cmp	r5, r3
   3d75e:	d101      	bne.n	3d764 <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   3d760:	2d3d      	cmp	r5, #61	; 0x3d
   3d762:	d1f5      	bne.n	3d750 <settings_name_steq+0xe>
	return 0;
   3d764:	2000      	movs	r0, #0
   3d766:	e004      	b.n	3d772 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   3d768:	2b3d      	cmp	r3, #61	; 0x3d
   3d76a:	d008      	beq.n	3d77e <settings_name_steq+0x3c>
   3d76c:	fab3 f083 	clz	r0, r3
   3d770:	0940      	lsrs	r0, r0, #5
}
   3d772:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   3d774:	2b2f      	cmp	r3, #47	; 0x2f
   3d776:	d1f7      	bne.n	3d768 <settings_name_steq+0x26>
		if (next) {
   3d778:	b10a      	cbz	r2, 3d77e <settings_name_steq+0x3c>
			*next = name + 1;
   3d77a:	3401      	adds	r4, #1
   3d77c:	6014      	str	r4, [r2, #0]
		return 1;
   3d77e:	2001      	movs	r0, #1
   3d780:	e7f7      	b.n	3d772 <settings_name_steq+0x30>

0003d782 <settings_line_len_calc>:
{
   3d782:	b510      	push	{r4, lr}
   3d784:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   3d786:	f7df fd5c 	bl	1d242 <strlen>
   3d78a:	3401      	adds	r4, #1
}
   3d78c:	4420      	add	r0, r4
   3d78e:	bd10      	pop	{r4, pc}

0003d790 <settings_line_raw_read>:
{
   3d790:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   3d792:	9c04      	ldr	r4, [sp, #16]
   3d794:	9401      	str	r4, [sp, #4]
   3d796:	2400      	movs	r4, #0
   3d798:	9400      	str	r4, [sp, #0]
   3d79a:	f7e4 fd97 	bl	222cc <settings_line_raw_read_until>
}
   3d79e:	b002      	add	sp, #8
   3d7a0:	bd10      	pop	{r4, pc}

0003d7a2 <settings_line_read_cb>:
{
   3d7a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3d7a4:	6803      	ldr	r3, [r0, #0]
   3d7a6:	9300      	str	r3, [sp, #0]
   3d7a8:	6840      	ldr	r0, [r0, #4]
   3d7aa:	ab03      	add	r3, sp, #12
   3d7ac:	f7ff fff0 	bl	3d790 <settings_line_raw_read>
	if (rc == 0) {
   3d7b0:	b918      	cbnz	r0, 3d7ba <settings_line_read_cb+0x18>
		return len_read;
   3d7b2:	9803      	ldr	r0, [sp, #12]
}
   3d7b4:	b005      	add	sp, #20
   3d7b6:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   3d7ba:	f04f 30ff 	mov.w	r0, #4294967295
   3d7be:	e7f9      	b.n	3d7b4 <settings_line_read_cb+0x12>

0003d7c0 <settings_line_name_read>:
{
   3d7c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char const until_char = '=';
   3d7c2:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   3d7c4:	9301      	str	r3, [sp, #4]
   3d7c6:	f10d 030f 	add.w	r3, sp, #15
   3d7ca:	9300      	str	r3, [sp, #0]
   3d7cc:	4613      	mov	r3, r2
   3d7ce:	460a      	mov	r2, r1
   3d7d0:	4601      	mov	r1, r0
   3d7d2:	2000      	movs	r0, #0
	char const until_char = '=';
   3d7d4:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   3d7d8:	f7e4 fd78 	bl	222cc <settings_line_raw_read_until>
}
   3d7dc:	b004      	add	sp, #16
   3d7de:	bd10      	pop	{r4, pc}

0003d7e0 <settings_line_dup_check_cb>:
{
   3d7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d7e4:	460f      	mov	r7, r1
   3d7e6:	b088      	sub	sp, #32
	if (strcmp(name, cdca->name)) {
   3d7e8:	6819      	ldr	r1, [r3, #0]
{
   3d7ea:	4690      	mov	r8, r2
   3d7ec:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   3d7ee:	f7df fd1e 	bl	1d22e <strcmp>
   3d7f2:	4606      	mov	r6, r0
   3d7f4:	b940      	cbnz	r0, 3d808 <settings_line_dup_check_cb+0x28>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   3d7f6:	4639      	mov	r1, r7
   3d7f8:	4640      	mov	r0, r8
   3d7fa:	f7e4 fe29 	bl	22450 <settings_line_val_get_len>
	if (len_read != cdca->val_len) {
   3d7fe:	68a3      	ldr	r3, [r4, #8]
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   3d800:	4605      	mov	r5, r0
	if (len_read != cdca->val_len) {
   3d802:	4283      	cmp	r3, r0
   3d804:	d004      	beq.n	3d810 <settings_line_dup_check_cb+0x30>
		cdca->is_dup = 0;
   3d806:	60e6      	str	r6, [r4, #12]
}
   3d808:	2000      	movs	r0, #0
   3d80a:	b008      	add	sp, #32
   3d80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (len_read == 0) {
   3d810:	b913      	cbnz	r3, 3d818 <settings_line_dup_check_cb+0x38>
			cdca->is_dup = 1;
   3d812:	2301      	movs	r3, #1
			cdca->is_dup = 0;
   3d814:	60e3      	str	r3, [r4, #12]
   3d816:	e7f7      	b.n	3d808 <settings_line_dup_check_cb+0x28>
		if (!settings_line_cmp(cdca->val, cdca->val_len,
   3d818:	f8d4 a004 	ldr.w	sl, [r4, #4]
		len_read = exp_len = MIN(sizeof(buf), rem);
   3d81c:	2d10      	cmp	r5, #16
   3d81e:	46a9      	mov	r9, r5
   3d820:	bf28      	it	cs
   3d822:	f04f 0910 	movcs.w	r9, #16
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3d826:	9700      	str	r7, [sp, #0]
   3d828:	464a      	mov	r2, r9
   3d82a:	ab03      	add	r3, sp, #12
   3d82c:	a904      	add	r1, sp, #16
   3d82e:	eb08 0006 	add.w	r0, r8, r6
		len_read = exp_len = MIN(sizeof(buf), rem);
   3d832:	f8cd 900c 	str.w	r9, [sp, #12]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3d836:	f7ff ffab 	bl	3d790 <settings_line_raw_read>
		if (rc) {
   3d83a:	b970      	cbnz	r0, 3d85a <settings_line_dup_check_cb+0x7a>
		if (len_read != exp_len) {
   3d83c:	9b03      	ldr	r3, [sp, #12]
   3d83e:	4599      	cmp	r9, r3
   3d840:	d10b      	bne.n	3d85a <settings_line_dup_check_cb+0x7a>
		rc = memcmp(val, buf, len_read);
   3d842:	464a      	mov	r2, r9
   3d844:	4650      	mov	r0, sl
   3d846:	a904      	add	r1, sp, #16
   3d848:	f003 feab 	bl	415a2 <memcmp>
		if (rc) {
   3d84c:	b928      	cbnz	r0, 3d85a <settings_line_dup_check_cb+0x7a>
		val += len_read;
   3d84e:	9b03      	ldr	r3, [sp, #12]
	for (rem = val_len; rem > 0; rem -= len_read) {
   3d850:	1aed      	subs	r5, r5, r3
		val += len_read;
   3d852:	449a      	add	sl, r3
		off += len_read;
   3d854:	441e      	add	r6, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   3d856:	d1e1      	bne.n	3d81c <settings_line_dup_check_cb+0x3c>
   3d858:	e7db      	b.n	3d812 <settings_line_dup_check_cb+0x32>
			cdca->is_dup = 0;
   3d85a:	2300      	movs	r3, #0
   3d85c:	e7da      	b.n	3d814 <settings_line_dup_check_cb+0x34>

0003d85e <get_len_cb>:
}
   3d85e:	8980      	ldrh	r0, [r0, #12]
   3d860:	4770      	bx	lr

0003d862 <write_handler>:
{
   3d862:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   3d864:	6804      	ldr	r4, [r0, #0]
   3d866:	6885      	ldr	r5, [r0, #8]
   3d868:	6824      	ldr	r4, [r4, #0]
   3d86a:	4429      	add	r1, r5
	return flash_area_write(entry_ctx->fap,
   3d86c:	4421      	add	r1, r4
   3d86e:	6900      	ldr	r0, [r0, #16]
}
   3d870:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   3d872:	f7ff beb7 	b.w	3d5e4 <flash_area_write>

0003d876 <read_handler>:
{
   3d876:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   3d878:	8984      	ldrh	r4, [r0, #12]
   3d87a:	428c      	cmp	r4, r1
   3d87c:	dd0f      	ble.n	3d89e <read_handler+0x28>
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   3d87e:	681d      	ldr	r5, [r3, #0]
   3d880:	440d      	add	r5, r1
   3d882:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   3d884:	bf84      	itt	hi
   3d886:	1a64      	subhi	r4, r4, r1
   3d888:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   3d88a:	6804      	ldr	r4, [r0, #0]
   3d88c:	6885      	ldr	r5, [r0, #8]
   3d88e:	6824      	ldr	r4, [r4, #0]
   3d890:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   3d892:	4421      	add	r1, r4
   3d894:	681b      	ldr	r3, [r3, #0]
   3d896:	6900      	ldr	r0, [r0, #16]
}
   3d898:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   3d89a:	f7ff be87 	b.w	3d5ac <flash_area_read>
		*len = 0;
   3d89e:	2000      	movs	r0, #0
}
   3d8a0:	bc30      	pop	{r4, r5}
		*len = 0;
   3d8a2:	6018      	str	r0, [r3, #0]
}
   3d8a4:	4770      	bx	lr

0003d8a6 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3d8a6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   3d8a8:	6800      	ldr	r0, [r0, #0]
   3d8aa:	f7e5 b979 	b.w	22ba0 <z_arm_fatal_error>

0003d8ae <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   3d8ae:	2100      	movs	r1, #0
   3d8b0:	2001      	movs	r0, #1
   3d8b2:	f7e5 b975 	b.w	22ba0 <z_arm_fatal_error>

0003d8b6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   3d8b6:	b508      	push	{r3, lr}
	handler();
   3d8b8:	f7e5 fa3e 	bl	22d38 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   3d8bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   3d8c0:	f7e5 bb46 	b.w	22f50 <z_arm_exc_exit>

0003d8c4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   3d8c4:	6f43      	ldr	r3, [r0, #116]	; 0x74
   3d8c6:	f383 880b 	msr	PSPLIM, r3
}
   3d8ca:	4770      	bx	lr

0003d8cc <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
#if defined(CONFIG_FPU_SHARING)
	if (buffer->ctx_saved) {
   3d8cc:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   3d8d0:	b18b      	cbz	r3, 3d8f6 <z_arm_restore_fp_context+0x2a>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   3d8d2:	f3ef 8314 	mrs	r3, CONTROL
		/* Set FPCA first so it is set even if an interrupt happens
		 * during restoration.
		 */
		__set_CONTROL(__get_CONTROL() | CONTROL_FPCA_Msk);
   3d8d6:	f043 0304 	orr.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   3d8da:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   3d8de:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
   3d8e2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   3d8e6:	eee1 3a10 	vmsr	fpscr, r3

		/* Restore FP state. */
		__set_FPSCR(buffer->fpscr);

		__asm__ volatile(
   3d8ea:	f100 0340 	add.w	r3, r0, #64	; 0x40
   3d8ee:	ec90 0a10 	vldmia	r0, {s0-s15}
   3d8f2:	ec93 8a10 	vldmia	r3, {s16-s31}
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   3d8f6:	4770      	bx	lr

0003d8f8 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3d8f8:	e840 f000 	tt	r0, r0
   3d8fc:	b2c3      	uxtb	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   3d8fe:	f410 3f80 	tst.w	r0, #65536	; 0x10000
	}

	return -EINVAL;
}
   3d902:	bf14      	ite	ne
   3d904:	4618      	movne	r0, r3
   3d906:	f06f 0015 	mvneq.w	r0, #21
   3d90a:	4770      	bx	lr

0003d90c <_stdout_hook_default>:
}
   3d90c:	f04f 30ff 	mov.w	r0, #4294967295
   3d910:	4770      	bx	lr

0003d912 <_stdin_hook_default>:
}
   3d912:	2000      	movs	r0, #0
   3d914:	4770      	bx	lr

0003d916 <_read>:
{
   3d916:	4608      	mov	r0, r1
   3d918:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   3d91a:	f7e6 b837 	b.w	2398c <z_impl_zephyr_read_stdin>

0003d91e <_write>:
{
   3d91e:	4608      	mov	r0, r1
   3d920:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   3d922:	f7e6 b847 	b.w	239b4 <z_impl_zephyr_write_stdout>

0003d926 <_close>:
   3d926:	f04f 30ff 	mov.w	r0, #4294967295
   3d92a:	4770      	bx	lr

0003d92c <_lseek>:
}
   3d92c:	2000      	movs	r0, #0
   3d92e:	4770      	bx	lr

0003d930 <_isatty>:
}
   3d930:	2802      	cmp	r0, #2
   3d932:	bfcc      	ite	gt
   3d934:	2000      	movgt	r0, #0
   3d936:	2001      	movle	r0, #1
   3d938:	4770      	bx	lr

0003d93a <_kill>:
}
   3d93a:	2000      	movs	r0, #0
   3d93c:	4770      	bx	lr

0003d93e <_getpid>:
}
   3d93e:	2000      	movs	r0, #0
   3d940:	4770      	bx	lr

0003d942 <_fstat>:
	st->st_mode = S_IFCHR;
   3d942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   3d946:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   3d948:	604b      	str	r3, [r1, #4]
}
   3d94a:	4770      	bx	lr

0003d94c <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   3d94c:	f7f8 bb74 	b.w	36038 <z_impl_z_errno>

0003d950 <boot_request_upgrade_multi>:
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}

int boot_request_upgrade_multi(int image_index, int permanent)
{
   3d950:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_pending_multi(image_index, permanent);
   3d952:	f7f3 fe7b 	bl	3164c <boot_set_pending_multi>
	if (rc) {
		return -EFAULT;
   3d956:	2800      	cmp	r0, #0
	}
	return 0;
}
   3d958:	bf18      	it	ne
   3d95a:	f06f 000d 	mvnne.w	r0, #13
   3d95e:	bd08      	pop	{r3, pc}

0003d960 <boot_is_img_confirmed>:

bool boot_is_img_confirmed(void)
{
   3d960:	b507      	push	{r0, r1, r2, lr}
	const struct flash_area *fa;
	int rc;
	uint8_t flag_val;

	rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fa);
   3d962:	2003      	movs	r0, #3
   3d964:	a901      	add	r1, sp, #4
   3d966:	f7e4 fa01 	bl	21d6c <flash_area_open>
	if (rc) {
   3d96a:	b118      	cbz	r0, 3d974 <boot_is_img_confirmed+0x14>
		return false;
   3d96c:	2000      	movs	r0, #0
	if (rc) {
		return false;
	}

	return flag_val == BOOT_FLAG_SET;
}
   3d96e:	b003      	add	sp, #12
   3d970:	f85d fb04 	ldr.w	pc, [sp], #4
	rc = boot_read_image_ok(fa, &flag_val);
   3d974:	9801      	ldr	r0, [sp, #4]
   3d976:	f10d 0103 	add.w	r1, sp, #3
   3d97a:	f002 f8cf 	bl	3fb1c <boot_read_image_ok>
	if (rc) {
   3d97e:	2800      	cmp	r0, #0
   3d980:	d1f4      	bne.n	3d96c <boot_is_img_confirmed+0xc>
	return flag_val == BOOT_FLAG_SET;
   3d982:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3d986:	1e43      	subs	r3, r0, #1
   3d988:	4258      	negs	r0, r3
   3d98a:	4158      	adcs	r0, r3
   3d98c:	e7ef      	b.n	3d96e <boot_is_img_confirmed+0xe>

0003d98e <boot_write_img_confirmed>:

int boot_write_img_confirmed(void)
{
   3d98e:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_confirmed();
   3d990:	f002 f8f0 	bl	3fb74 <boot_set_confirmed>
	if (rc) {
		return -EIO;
   3d994:	2800      	cmp	r0, #0
	}

	return 0;
}
   3d996:	bf18      	it	ne
   3d998:	f06f 0004 	mvnne.w	r0, #4
   3d99c:	bd08      	pop	{r3, pc}

0003d99e <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   3d99e:	b508      	push	{r3, lr}
	net_if_init();
   3d9a0:	f7e6 f996 	bl	23cd0 <net_if_init>
	net_if_post_init();
   3d9a4:	f7e6 f9c6 	bl	23d34 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   3d9a8:	2000      	movs	r0, #0
   3d9aa:	bd08      	pop	{r3, pc}

0003d9ac <net_if_l2>:
	if (!iface || !iface->if_dev) {
   3d9ac:	b110      	cbz	r0, 3d9b4 <net_if_l2+0x8>
   3d9ae:	6800      	ldr	r0, [r0, #0]
   3d9b0:	b100      	cbz	r0, 3d9b4 <net_if_l2+0x8>
	return iface->if_dev->l2;
   3d9b2:	6840      	ldr	r0, [r0, #4]
}
   3d9b4:	4770      	bx	lr

0003d9b6 <net_if_flag_is_set>:
	if (iface == NULL) {
   3d9b6:	b138      	cbz	r0, 3d9c8 <net_if_flag_is_set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3d9b8:	6803      	ldr	r3, [r0, #0]
   3d9ba:	330c      	adds	r3, #12
   3d9bc:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3d9c0:	fa43 f001 	asr.w	r0, r3, r1
   3d9c4:	f000 0001 	and.w	r0, r0, #1
}
   3d9c8:	4770      	bx	lr

0003d9ca <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   3d9ca:	b510      	push	{r4, lr}
   3d9cc:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   3d9ce:	f7ff ffed 	bl	3d9ac <net_if_l2>
   3d9d2:	b128      	cbz	r0, 3d9e0 <l2_flags_get.isra.0+0x16>
   3d9d4:	68c2      	ldr	r2, [r0, #12]
   3d9d6:	b11a      	cbz	r2, 3d9e0 <l2_flags_get.isra.0+0x16>
}
   3d9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   3d9dc:	4618      	mov	r0, r3
   3d9de:	4710      	bx	r2
}
   3d9e0:	bd10      	pop	{r4, pc}

0003d9e2 <net_byte_to_hex>:
{
   3d9e2:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   3d9e4:	090c      	lsrs	r4, r1, #4
		if (i == 0 && !pad && !val) {
   3d9e6:	b1b3      	cbz	r3, 3da16 <net_byte_to_hex+0x34>
		if (val < 10) {
   3d9e8:	2c09      	cmp	r4, #9
			*ptr++ = (char) (val - 10 + base);
   3d9ea:	bf86      	itte	hi
   3d9ec:	f1a2 050a 	subhi.w	r5, r2, #10
   3d9f0:	1964      	addhi	r4, r4, r5
			*ptr++ = (char) (val + '0');
   3d9f2:	3430      	addls	r4, #48	; 0x30
			*ptr++ = (char) (val - 10 + base);
   3d9f4:	1c43      	adds	r3, r0, #1
			*ptr++ = (char) (val + '0');
   3d9f6:	7004      	strb	r4, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   3d9f8:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   3d9fc:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   3d9fe:	bf84      	itt	hi
   3da00:	3a0a      	subhi	r2, #10
   3da02:	1889      	addhi	r1, r1, r2
	*ptr = '\0';
   3da04:	f04f 0200 	mov.w	r2, #0
			*ptr++ = (char) (val - 10 + base);
   3da08:	bf8c      	ite	hi
   3da0a:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   3da0c:	3130      	addls	r1, #48	; 0x30
   3da0e:	7019      	strb	r1, [r3, #0]
	*ptr = '\0';
   3da10:	705a      	strb	r2, [r3, #1]
			*ptr++ = (char) (val - 10 + base);
   3da12:	1c58      	adds	r0, r3, #1
}
   3da14:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   3da16:	2c00      	cmp	r4, #0
   3da18:	d1e6      	bne.n	3d9e8 <net_byte_to_hex+0x6>
   3da1a:	4603      	mov	r3, r0
   3da1c:	e7ec      	b.n	3d9f8 <net_byte_to_hex+0x16>

0003da1e <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   3da1e:	2801      	cmp	r0, #1
{
   3da20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3da24:	460c      	mov	r4, r1
   3da26:	4616      	mov	r6, r2
	if (family == AF_INET) {
   3da28:	d126      	bne.n	3da78 <z_impl_net_addr_pton+0x5a>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   3da2a:	4608      	mov	r0, r1
   3da2c:	f7df fc09 	bl	1d242 <strlen>
		for (i = 0; i < len; i++) {
   3da30:	4623      	mov	r3, r4
   3da32:	4420      	add	r0, r4
   3da34:	4298      	cmp	r0, r3
   3da36:	d112      	bne.n	3da5e <z_impl_net_addr_pton+0x40>
__ssp_bos_icheck3(memset, void *, int)
   3da38:	4635      	mov	r5, r6
   3da3a:	2300      	movs	r3, #0
   3da3c:	3603      	adds	r6, #3
   3da3e:	f845 3901 	str.w	r3, [r5], #-1
		(void)memset(addr, 0, sizeof(struct in_addr));

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   3da42:	4620      	mov	r0, r4
   3da44:	220a      	movs	r2, #10
   3da46:	a901      	add	r1, sp, #4
   3da48:	f7fc ffa6 	bl	3a998 <strtol>

			src = ++endptr;
   3da4c:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   3da4e:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   3da52:	42ae      	cmp	r6, r5
			src = ++endptr;
   3da54:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   3da58:	d1f3      	bne.n	3da42 <z_impl_net_addr_pton+0x24>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   3da5a:	2000      	movs	r0, #0
   3da5c:	e009      	b.n	3da72 <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   3da5e:	f813 2b01 	ldrb.w	r2, [r3], #1
   3da62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   3da66:	2909      	cmp	r1, #9
   3da68:	d9e4      	bls.n	3da34 <z_impl_net_addr_pton+0x16>
   3da6a:	2a2e      	cmp	r2, #46	; 0x2e
   3da6c:	d0e2      	beq.n	3da34 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   3da6e:	f06f 0015 	mvn.w	r0, #21
}
   3da72:	b003      	add	sp, #12
   3da74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   3da78:	2802      	cmp	r0, #2
   3da7a:	d1f8      	bne.n	3da6e <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   3da7c:	212e      	movs	r1, #46	; 0x2e
   3da7e:	4620      	mov	r0, r4
   3da80:	f003 ff7d 	bl	4197e <strchr>
		if (*src == ':') {
   3da84:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   3da86:	2800      	cmp	r0, #0
   3da88:	bf14      	ite	ne
   3da8a:	2706      	movne	r7, #6
   3da8c:	2708      	moveq	r7, #8
		if (*src == ':') {
   3da8e:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   3da90:	bf08      	it	eq
   3da92:	3401      	addeq	r4, #1
		len = strlen(src);
   3da94:	4620      	mov	r0, r4
   3da96:	f7df fbd4 	bl	1d242 <strlen>
		for (i = 0; i < len; i++) {
   3da9a:	2300      	movs	r3, #0
   3da9c:	4283      	cmp	r3, r0
   3da9e:	db1f      	blt.n	3dae0 <z_impl_net_addr_pton+0xc2>
		for (i = 0; i < expected_groups; i++) {
   3daa0:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   3daa2:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   3daa4:	7823      	ldrb	r3, [r4, #0]
   3daa6:	2b00      	cmp	r3, #0
   3daa8:	d0e1      	beq.n	3da6e <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
   3daaa:	2b3a      	cmp	r3, #58	; 0x3a
   3daac:	d02f      	beq.n	3db0e <z_impl_net_addr_pton+0xf0>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   3daae:	2210      	movs	r2, #16
   3dab0:	2100      	movs	r1, #0
   3dab2:	4620      	mov	r0, r4
   3dab4:	f7fc ff70 	bl	3a998 <strtol>
   3dab8:	2210      	movs	r2, #16
   3daba:	4681      	mov	r9, r0
   3dabc:	2100      	movs	r1, #0
   3dabe:	4620      	mov	r0, r4
   3dac0:	f7fc ff6a 	bl	3a998 <strtol>
   3dac4:	f3c9 2907 	ubfx	r9, r9, #8, #8
   3dac8:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
   3dacc:	f826 9015 	strh.w	r9, [r6, r5, lsl #1]
				src = strchr(src, ':');
   3dad0:	213a      	movs	r1, #58	; 0x3a
   3dad2:	4620      	mov	r0, r4
   3dad4:	f003 ff53 	bl	4197e <strchr>
				if (src) {
   3dad8:	4604      	mov	r4, r0
   3dada:	b178      	cbz	r0, 3dafc <z_impl_net_addr_pton+0xde>
			src++;
   3dadc:	3401      	adds	r4, #1
   3dade:	e010      	b.n	3db02 <z_impl_net_addr_pton+0xe4>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   3dae0:	5ce2      	ldrb	r2, [r4, r3]
   3dae2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   3dae6:	290a      	cmp	r1, #10
   3dae8:	d906      	bls.n	3daf8 <z_impl_net_addr_pton+0xda>
   3daea:	f022 0120 	bic.w	r1, r2, #32
   3daee:	3941      	subs	r1, #65	; 0x41
   3daf0:	2905      	cmp	r1, #5
   3daf2:	d901      	bls.n	3daf8 <z_impl_net_addr_pton+0xda>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   3daf4:	2a2e      	cmp	r2, #46	; 0x2e
   3daf6:	d1ba      	bne.n	3da6e <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
   3daf8:	3301      	adds	r3, #1
   3dafa:	e7cf      	b.n	3da9c <z_impl_net_addr_pton+0x7e>
					if (i < expected_groups - 1) {
   3dafc:	1e7b      	subs	r3, r7, #1
   3dafe:	42ab      	cmp	r3, r5
   3db00:	dcb5      	bgt.n	3da6e <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
   3db02:	3501      	adds	r5, #1
   3db04:	42af      	cmp	r7, r5
   3db06:	dd16      	ble.n	3db36 <z_impl_net_addr_pton+0x118>
			if (!src || *src == '\0') {
   3db08:	2c00      	cmp	r4, #0
   3db0a:	d1cb      	bne.n	3daa4 <z_impl_net_addr_pton+0x86>
   3db0c:	e7af      	b.n	3da6e <z_impl_net_addr_pton+0x50>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   3db0e:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   3db12:	f806 8015 	strb.w	r8, [r6, r5, lsl #1]
   3db16:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   3db1a:	3501      	adds	r5, #1
   3db1c:	42af      	cmp	r7, r5
   3db1e:	dcf6      	bgt.n	3db0e <z_impl_net_addr_pton+0xf0>
			tmp = strrchr(src, ':');
   3db20:	213a      	movs	r1, #58	; 0x3a
   3db22:	4620      	mov	r0, r4
   3db24:	f003 ff73 	bl	41a0e <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   3db28:	4284      	cmp	r4, r0
   3db2a:	d11f      	bne.n	3db6c <z_impl_net_addr_pton+0x14e>
   3db2c:	2f06      	cmp	r7, #6
   3db2e:	d001      	beq.n	3db34 <z_impl_net_addr_pton+0x116>
   3db30:	7863      	ldrb	r3, [r4, #1]
   3db32:	b9fb      	cbnz	r3, 3db74 <z_impl_net_addr_pton+0x156>
				src++;
   3db34:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   3db36:	2f06      	cmp	r7, #6
   3db38:	d18f      	bne.n	3da5a <z_impl_net_addr_pton+0x3c>
			for (i = 0; i < 4; i++) {
   3db3a:	2500      	movs	r5, #0
   3db3c:	360c      	adds	r6, #12
				if (!src || !*src) {
   3db3e:	2c00      	cmp	r4, #0
   3db40:	d095      	beq.n	3da6e <z_impl_net_addr_pton+0x50>
   3db42:	7823      	ldrb	r3, [r4, #0]
   3db44:	2b00      	cmp	r3, #0
   3db46:	d092      	beq.n	3da6e <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   3db48:	220a      	movs	r2, #10
   3db4a:	2100      	movs	r1, #0
   3db4c:	4620      	mov	r0, r4
   3db4e:	f7fc ff23 	bl	3a998 <strtol>
				src = strchr(src, '.');
   3db52:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   3db54:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   3db58:	4620      	mov	r0, r4
   3db5a:	f003 ff10 	bl	4197e <strchr>
				if (src) {
   3db5e:	4604      	mov	r4, r0
   3db60:	b1b0      	cbz	r0, 3db90 <z_impl_net_addr_pton+0x172>
					src++;
   3db62:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   3db64:	3501      	adds	r5, #1
   3db66:	2d04      	cmp	r5, #4
   3db68:	d1e9      	bne.n	3db3e <z_impl_net_addr_pton+0x120>
   3db6a:	e776      	b.n	3da5a <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
   3db6c:	2f06      	cmp	r7, #6
				tmp--;
   3db6e:	bf08      	it	eq
   3db70:	f100 30ff 	addeq.w	r0, r0, #4294967295
			i = expected_groups - 1;
   3db74:	1e7d      	subs	r5, r7, #1
   3db76:	3001      	adds	r0, #1
				if (*tmp == ':') {
   3db78:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   3db7c:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   3db7e:	bf08      	it	eq
   3db80:	f105 35ff 	addeq.w	r5, r5, #4294967295
				if (i < 0) {
   3db84:	2d00      	cmp	r5, #0
   3db86:	f6ff af72 	blt.w	3da6e <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
   3db8a:	4284      	cmp	r4, r0
   3db8c:	d1f4      	bne.n	3db78 <z_impl_net_addr_pton+0x15a>
   3db8e:	e7a5      	b.n	3dadc <z_impl_net_addr_pton+0xbe>
					if (i < 3) {
   3db90:	2d03      	cmp	r5, #3
   3db92:	f47f af6c 	bne.w	3da6e <z_impl_net_addr_pton+0x50>
   3db96:	e7e5      	b.n	3db64 <z_impl_net_addr_pton+0x146>

0003db98 <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	NET_DBG(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3db98:	e9d0 2300 	ldrd	r2, r3, [r0]
   3db9c:	1a9b      	subs	r3, r3, r2
   3db9e:	2b01      	cmp	r3, #1
{
   3dba0:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3dba2:	d90c      	bls.n	3dbbe <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   3dba4:	4614      	mov	r4, r2
   3dba6:	1c53      	adds	r3, r2, #1
   3dba8:	6003      	str	r3, [r0, #0]
   3dbaa:	f814 3b02 	ldrb.w	r3, [r4], #2
   3dbae:	021b      	lsls	r3, r3, #8
   3dbb0:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   3dbb2:	6004      	str	r4, [r0, #0]

	NET_DBG("<< val:%04x", *val);

	return 0;
   3dbb4:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   3dbb6:	7852      	ldrb	r2, [r2, #1]
   3dbb8:	4313      	orrs	r3, r2
   3dbba:	800b      	strh	r3, [r1, #0]
}
   3dbbc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3dbbe:	f06f 0015 	mvn.w	r0, #21
   3dbc2:	e7fb      	b.n	3dbbc <unpack_uint16+0x24>

0003dbc4 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   3dbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3dbc6:	e9d0 3400 	ldrd	r3, r4, [r0]
   3dbca:	429c      	cmp	r4, r3
   3dbcc:	d01f      	beq.n	3dc0e <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   3dbce:	1c5c      	adds	r4, r3, #1
   3dbd0:	6004      	str	r4, [r0, #0]
   3dbd2:	781b      	ldrb	r3, [r3, #0]
   3dbd4:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   3dbd6:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   3dbd8:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   3dbda:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   3dbdc:	6804      	ldr	r4, [r0, #0]
   3dbde:	42bc      	cmp	r4, r7
   3dbe0:	d218      	bcs.n	3dc14 <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3dbe2:	4625      	mov	r5, r4
   3dbe4:	f815 3b01 	ldrb.w	r3, [r5], #1
   3dbe8:	6816      	ldr	r6, [r2, #0]
   3dbea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   3dbee:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3dbf0:	4433      	add	r3, r6
   3dbf2:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   3dbf4:	6005      	str	r5, [r0, #0]
   3dbf6:	f994 4000 	ldrsb.w	r4, [r4]
   3dbfa:	2c00      	cmp	r4, #0
   3dbfc:	db04      	blt.n	3dc08 <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   3dbfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   3dc02:	d204      	bcs.n	3dc0e <fixed_header_decode+0x4a>
	return 0;
   3dc04:	2000      	movs	r0, #0
   3dc06:	e004      	b.n	3dc12 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   3dc08:	3107      	adds	r1, #7
   3dc0a:	291c      	cmp	r1, #28
   3dc0c:	d1e6      	bne.n	3dbdc <fixed_header_decode+0x18>
		return -EINVAL;
   3dc0e:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   3dc12:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   3dc14:	f06f 000a 	mvn.w	r0, #10
   3dc18:	e7fb      	b.n	3dc12 <fixed_header_decode+0x4e>

0003dc1a <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   3dc1a:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3dc1c:	e9d1 3500 	ldrd	r3, r5, [r1]
   3dc20:	429d      	cmp	r5, r3
   3dc22:	d102      	bne.n	3dc2a <connect_ack_decode+0x10>
		return -EINVAL;
   3dc24:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   3dc28:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   3dc2a:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3dc2c:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   3dc2e:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3dc30:	d0f8      	beq.n	3dc24 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   3dc32:	461d      	mov	r5, r3
   3dc34:	f815 4b02 	ldrb.w	r4, [r5], #2
   3dc38:	600d      	str	r5, [r1, #0]
   3dc3a:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3dc3c:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
	return 0;
   3dc40:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3dc42:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   3dc44:	bf04      	itt	eq
   3dc46:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   3dc4a:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   3dc4c:	7051      	strb	r1, [r2, #1]
	return 0;
   3dc4e:	e7eb      	b.n	3dc28 <connect_ack_decode+0xe>

0003dc50 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   3dc50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3dc54:	461c      	mov	r4, r3
   3dc56:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3dc58:	7da2      	ldrb	r2, [r4, #22]
   3dc5a:	0043      	lsls	r3, r0, #1
   3dc5c:	f022 0203 	bic.w	r2, r2, #3
   3dc60:	f003 0302 	and.w	r3, r3, #2
   3dc64:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   3dc66:	f3c0 0041 	ubfx	r0, r0, #1, #2
   3dc6a:	7220      	strb	r0, [r4, #8]
{
   3dc6c:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   3dc6e:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3dc70:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   3dc72:	f10d 0106 	add.w	r1, sp, #6
   3dc76:	f7ff ff8f 	bl	3db98 <unpack_uint16>
	if (err_code != 0) {
   3dc7a:	4606      	mov	r6, r0
   3dc7c:	b9c0      	cbnz	r0, 3dcb0 <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   3dc7e:	683b      	ldr	r3, [r7, #0]
   3dc80:	687a      	ldr	r2, [r7, #4]
   3dc82:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   3dc86:	1ad2      	subs	r2, r2, r3
   3dc88:	42aa      	cmp	r2, r5
   3dc8a:	da02      	bge.n	3dc92 <publish_decode+0x42>

	if (var_length < var_header_length) {
		NET_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   3dc8c:	f06f 0615 	mvn.w	r6, #21
   3dc90:	e00e      	b.n	3dcb0 <publish_decode+0x60>
	str->size = utf8_strlen;
   3dc92:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   3dc94:	b185      	cbz	r5, 3dcb8 <publish_decode+0x68>
		str->utf8 = buf->cur;
   3dc96:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   3dc98:	442b      	add	r3, r5
   3dc9a:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3dc9c:	7a23      	ldrb	r3, [r4, #8]
   3dc9e:	b96b      	cbnz	r3, 3dcbc <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   3dca0:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   3dca2:	45a8      	cmp	r8, r5
   3dca4:	d3f2      	bcc.n	3dc8c <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   3dca6:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   3dca8:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   3dcac:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   3dcae:	6125      	str	r5, [r4, #16]

	return 0;
}
   3dcb0:	4630      	mov	r0, r6
   3dcb2:	b002      	add	sp, #8
   3dcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   3dcb8:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   3dcba:	e7ef      	b.n	3dc9c <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   3dcbc:	4638      	mov	r0, r7
   3dcbe:	f104 0114 	add.w	r1, r4, #20
   3dcc2:	f7ff ff69 	bl	3db98 <unpack_uint16>
		if (err_code != 0) {
   3dcc6:	b908      	cbnz	r0, 3dccc <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   3dcc8:	3504      	adds	r5, #4
   3dcca:	e7ea      	b.n	3dca2 <publish_decode+0x52>
   3dccc:	4606      	mov	r6, r0
   3dcce:	e7ef      	b.n	3dcb0 <publish_decode+0x60>

0003dcd0 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3dcd0:	f7ff bf62 	b.w	3db98 <unpack_uint16>

0003dcd4 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3dcd4:	f7ff bf60 	b.w	3db98 <unpack_uint16>

0003dcd8 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3dcd8:	f7ff bf5e 	b.w	3db98 <unpack_uint16>

0003dcdc <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3dcdc:	f7ff bf5c 	b.w	3db98 <unpack_uint16>

0003dce0 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   3dce0:	b538      	push	{r3, r4, r5, lr}
   3dce2:	4605      	mov	r5, r0
   3dce4:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   3dce6:	f7ff ff57 	bl	3db98 <unpack_uint16>
	if (err_code != 0) {
   3dcea:	b930      	cbnz	r0, 3dcfa <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   3dcec:	e9d5 2300 	ldrd	r2, r3, [r5]
   3dcf0:	1a99      	subs	r1, r3, r2
	str->len = length;
   3dcf2:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   3dcf4:	b111      	cbz	r1, 3dcfc <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   3dcf6:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   3dcf8:	602b      	str	r3, [r5, #0]
}
   3dcfa:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   3dcfc:	6060      	str	r0, [r4, #4]
   3dcfe:	e7fc      	b.n	3dcfa <subscribe_ack_decode+0x1a>

0003dd00 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3dd00:	f7ff bf4a 	b.w	3db98 <unpack_uint16>

0003dd04 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3dd04:	e9d1 3200 	ldrd	r3, r2, [r1]
   3dd08:	1ad2      	subs	r2, r2, r3
   3dd0a:	2a01      	cmp	r2, #1
   3dd0c:	d909      	bls.n	3dd22 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   3dd0e:	1c5a      	adds	r2, r3, #1
   3dd10:	600a      	str	r2, [r1, #0]
   3dd12:	0a02      	lsrs	r2, r0, #8
   3dd14:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   3dd16:	680b      	ldr	r3, [r1, #0]
   3dd18:	1c5a      	adds	r2, r3, #1
   3dd1a:	600a      	str	r2, [r1, #0]
   3dd1c:	7018      	strb	r0, [r3, #0]
	return 0;
   3dd1e:	2000      	movs	r0, #0
   3dd20:	4770      	bx	lr
		return -ENOMEM;
   3dd22:	f06f 000b 	mvn.w	r0, #11
}
   3dd26:	4770      	bx	lr

0003dd28 <pack_utf8_str>:
{
   3dd28:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3dd2a:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   3dd2e:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3dd30:	6840      	ldr	r0, [r0, #4]
   3dd32:	1a9b      	subs	r3, r3, r2
   3dd34:	1c82      	adds	r2, r0, #2
   3dd36:	4293      	cmp	r3, r2
{
   3dd38:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3dd3a:	d30d      	bcc.n	3dd58 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   3dd3c:	b280      	uxth	r0, r0
   3dd3e:	f7ff ffe1 	bl	3dd04 <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3dd42:	e9d5 1200 	ldrd	r1, r2, [r5]
   3dd46:	6820      	ldr	r0, [r4, #0]
   3dd48:	f003 fc3b 	bl	415c2 <memcpy>
	return 0;
   3dd4c:	2000      	movs	r0, #0
	buf->cur += str->size;
   3dd4e:	6823      	ldr	r3, [r4, #0]
   3dd50:	686a      	ldr	r2, [r5, #4]
   3dd52:	4413      	add	r3, r2
   3dd54:	6023      	str	r3, [r4, #0]
}
   3dd56:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3dd58:	f06f 000b 	mvn.w	r0, #11
   3dd5c:	e7fb      	b.n	3dd56 <pack_utf8_str+0x2e>

0003dd5e <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   3dd5e:	6813      	ldr	r3, [r2, #0]
{
   3dd60:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   3dd62:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   3dd64:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   3dd68:	d227      	bcs.n	3ddba <mqtt_encode_fixed_header+0x5c>
   3dd6a:	4625      	mov	r5, r4
   3dd6c:	2600      	movs	r6, #0
	} while (length > 0);
   3dd6e:	09ed      	lsrs	r5, r5, #7
   3dd70:	b2f3      	uxtb	r3, r6
   3dd72:	f106 0601 	add.w	r6, r6, #1
   3dd76:	d1fa      	bne.n	3dd6e <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   3dd78:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3dd7a:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   3dd7c:	b2db      	uxtb	r3, r3
   3dd7e:	425d      	negs	r5, r3
   3dd80:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3dd82:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   3dd84:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   3dd86:	bf1e      	ittt	ne
   3dd88:	3301      	addne	r3, #1
   3dd8a:	6013      	strne	r3, [r2, #0]
   3dd8c:	5548      	strbne	r0, [r1, r5]
	return 0;
   3dd8e:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   3dd90:	6813      	ldr	r3, [r2, #0]
   3dd92:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   3dd96:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   3dd98:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   3dd9a:	bf1f      	itttt	ne
   3dd9c:	6811      	ldrne	r1, [r2, #0]
   3dd9e:	780b      	ldrbne	r3, [r1, #0]
   3dda0:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   3dda4:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   3dda6:	6813      	ldr	r3, [r2, #0]
   3dda8:	3301      	adds	r3, #1
   3ddaa:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   3ddac:	2800      	cmp	r0, #0
   3ddae:	d1ef      	bne.n	3dd90 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   3ddb0:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   3ddb2:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   3ddb4:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   3ddb6:	6053      	str	r3, [r2, #4]
}
   3ddb8:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   3ddba:	f06f 0079 	mvn.w	r0, #121	; 0x79
   3ddbe:	e7fb      	b.n	3ddb8 <mqtt_encode_fixed_header+0x5a>

0003ddc0 <mqtt_message_id_only_enc>:
{
   3ddc0:	b570      	push	{r4, r5, r6, lr}
   3ddc2:	4606      	mov	r6, r0
   3ddc4:	4614      	mov	r4, r2
	if (message_id == 0U) {
   3ddc6:	4608      	mov	r0, r1
   3ddc8:	b169      	cbz	r1, 3dde6 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3ddca:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3ddcc:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3ddce:	3505      	adds	r5, #5
   3ddd0:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3ddd2:	f7ff ff97 	bl	3dd04 <pack_uint16>
	if (err_code != 0) {
   3ddd6:	b940      	cbnz	r0, 3ddea <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3ddd8:	4622      	mov	r2, r4
   3ddda:	4629      	mov	r1, r5
   3dddc:	4630      	mov	r0, r6
}
   3ddde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dde2:	f7ff bfbc 	b.w	3dd5e <mqtt_encode_fixed_header>
		return -EINVAL;
   3dde6:	f06f 0015 	mvn.w	r0, #21
}
   3ddea:	bd70      	pop	{r4, r5, r6, pc}

0003ddec <publish_encode>:
{
   3ddec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3ddf0:	7d87      	ldrb	r7, [r0, #22]
   3ddf2:	7a04      	ldrb	r4, [r0, #8]
   3ddf4:	f007 0801 	and.w	r8, r7, #1
{
   3ddf8:	4605      	mov	r5, r0
   3ddfa:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3ddfc:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   3de00:	b10c      	cbz	r4, 3de06 <publish_encode+0x1a>
   3de02:	8a83      	ldrh	r3, [r0, #20]
   3de04:	b383      	cbz	r3, 3de68 <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3de06:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3de0a:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3de0c:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3de0e:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3de10:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3de14:	f7ff ff88 	bl	3dd28 <pack_utf8_str>
	if (err_code != 0) {
   3de18:	b9b0      	cbnz	r0, 3de48 <publish_encode+0x5c>
	if (param->message.topic.qos) {
   3de1a:	7a2b      	ldrb	r3, [r5, #8]
   3de1c:	b9b3      	cbnz	r3, 3de4c <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3de1e:	0060      	lsls	r0, r4, #1
   3de20:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   3de24:	692a      	ldr	r2, [r5, #16]
   3de26:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3de2a:	4338      	orrs	r0, r7
   3de2c:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   3de30:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3de32:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3de36:	464a      	mov	r2, r9
   3de38:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   3de3a:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3de3e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3de42:	f7ff ff8c 	bl	3dd5e <mqtt_encode_fixed_header>
	if (err_code != 0) {
   3de46:	b140      	cbz	r0, 3de5a <publish_encode+0x6e>
}
   3de48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   3de4c:	4649      	mov	r1, r9
   3de4e:	8aa8      	ldrh	r0, [r5, #20]
   3de50:	f7ff ff58 	bl	3dd04 <pack_uint16>
		if (err_code != 0) {
   3de54:	2800      	cmp	r0, #0
   3de56:	d0e2      	beq.n	3de1e <publish_encode+0x32>
   3de58:	e7f6      	b.n	3de48 <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   3de5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3de5e:	692a      	ldr	r2, [r5, #16]
   3de60:	1a9b      	subs	r3, r3, r2
   3de62:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   3de66:	e7ef      	b.n	3de48 <publish_encode+0x5c>
		return -EINVAL;
   3de68:	f06f 0015 	mvn.w	r0, #21
   3de6c:	e7ec      	b.n	3de48 <publish_encode+0x5c>

0003de6e <publish_ack_encode>:
{
   3de6e:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   3de70:	8801      	ldrh	r1, [r0, #0]
   3de72:	2040      	movs	r0, #64	; 0x40
   3de74:	f7ff bfa4 	b.w	3ddc0 <mqtt_message_id_only_enc>

0003de78 <subscribe_encode>:
{
   3de78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3de7c:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   3de7e:	88c0      	ldrh	r0, [r0, #6]
{
   3de80:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   3de82:	b330      	cbz	r0, 3ded2 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3de84:	680f      	ldr	r7, [r1, #0]
   3de86:	3705      	adds	r7, #5
   3de88:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3de8a:	f7ff ff3b 	bl	3dd04 <pack_uint16>
	if (err_code != 0) {
   3de8e:	4604      	mov	r4, r0
   3de90:	bb08      	cbnz	r0, 3ded6 <subscribe_encode+0x5e>
   3de92:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3de96:	88b3      	ldrh	r3, [r6, #4]
   3de98:	42a3      	cmp	r3, r4
   3de9a:	dc06      	bgt.n	3deaa <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3de9c:	462a      	mov	r2, r5
   3de9e:	4639      	mov	r1, r7
}
   3dea0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dea4:	2082      	movs	r0, #130	; 0x82
   3dea6:	f7ff bf5a 	b.w	3dd5e <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3deaa:	fb08 f904 	mul.w	r9, r8, r4
   3deae:	6830      	ldr	r0, [r6, #0]
   3deb0:	4629      	mov	r1, r5
   3deb2:	4448      	add	r0, r9
   3deb4:	f7ff ff38 	bl	3dd28 <pack_utf8_str>
		if (err_code != 0) {
   3deb8:	b980      	cbnz	r0, 3dedc <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   3deba:	6833      	ldr	r3, [r6, #0]
   3debc:	444b      	add	r3, r9
   3debe:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3dec0:	e9d5 3100 	ldrd	r3, r1, [r5]
   3dec4:	4299      	cmp	r1, r3
   3dec6:	d00b      	beq.n	3dee0 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   3dec8:	1c59      	adds	r1, r3, #1
   3deca:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   3decc:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   3dece:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   3ded0:	e7e1      	b.n	3de96 <subscribe_encode+0x1e>
		return -EINVAL;
   3ded2:	f06f 0415 	mvn.w	r4, #21
}
   3ded6:	4620      	mov	r0, r4
   3ded8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3dedc:	4604      	mov	r4, r0
   3dede:	e7fa      	b.n	3ded6 <subscribe_encode+0x5e>
		return -ENOMEM;
   3dee0:	f06f 040b 	mvn.w	r4, #11
   3dee4:	e7f7      	b.n	3ded6 <subscribe_encode+0x5e>

0003dee6 <unsubscribe_encode>:
{
   3dee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3deea:	680f      	ldr	r7, [r1, #0]
{
   3deec:	4606      	mov	r6, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3deee:	3705      	adds	r7, #5
	err_code = pack_uint16(param->message_id, buf);
   3def0:	88c0      	ldrh	r0, [r0, #6]
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3def2:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3def4:	f7ff ff06 	bl	3dd04 <pack_uint16>
{
   3def8:	460d      	mov	r5, r1
	if (err_code != 0) {
   3defa:	4604      	mov	r4, r0
   3defc:	b9a8      	cbnz	r0, 3df2a <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3defe:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3df02:	88b3      	ldrh	r3, [r6, #4]
   3df04:	42a3      	cmp	r3, r4
   3df06:	dc06      	bgt.n	3df16 <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3df08:	462a      	mov	r2, r5
   3df0a:	4639      	mov	r1, r7
}
   3df0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3df10:	20a2      	movs	r0, #162	; 0xa2
   3df12:	f7ff bf24 	b.w	3dd5e <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3df16:	6830      	ldr	r0, [r6, #0]
   3df18:	4629      	mov	r1, r5
   3df1a:	fb08 0004 	mla	r0, r8, r4, r0
   3df1e:	f7ff ff03 	bl	3dd28 <pack_utf8_str>
		if (err_code != 0) {
   3df22:	b908      	cbnz	r0, 3df28 <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   3df24:	3401      	adds	r4, #1
   3df26:	e7ec      	b.n	3df02 <unsubscribe_encode+0x1c>
   3df28:	4604      	mov	r4, r0
}
   3df2a:	4620      	mov	r0, r4
   3df2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003df30 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   3df30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3df32:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   3df34:	e9d1 3100 	ldrd	r3, r1, [r1]
   3df38:	1acb      	subs	r3, r1, r3
   3df3a:	4293      	cmp	r3, r2
{
   3df3c:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   3df3e:	d301      	bcc.n	3df44 <mqtt_read_message_chunk+0x14>
		return 0;
   3df40:	2000      	movs	r0, #0
		NET_ERR("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   3df42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   3df44:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   3df46:	190f      	adds	r7, r1, r4
   3df48:	e9d0 231c 	ldrd	r2, r3, [r0, #112]	; 0x70
   3df4c:	4413      	add	r3, r2
   3df4e:	429f      	cmp	r7, r3
   3df50:	d813      	bhi.n	3df7a <mqtt_read_message_chunk+0x4a>
   3df52:	4297      	cmp	r7, r2
   3df54:	d311      	bcc.n	3df7a <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   3df56:	2300      	movs	r3, #0
   3df58:	4622      	mov	r2, r4
   3df5a:	f7e6 f8b7 	bl	240cc <mqtt_transport_read>
	if (len < 0) {
   3df5e:	2800      	cmp	r0, #0
   3df60:	dbef      	blt.n	3df42 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   3df62:	d00d      	beq.n	3df80 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   3df64:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   3df66:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   3df68:	4403      	add	r3, r0
   3df6a:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   3df6c:	686b      	ldr	r3, [r5, #4]
   3df6e:	4403      	add	r3, r0
   3df70:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   3df72:	d2e5      	bcs.n	3df40 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   3df74:	f06f 000a 	mvn.w	r0, #10
   3df78:	e7e3      	b.n	3df42 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   3df7a:	f06f 000b 	mvn.w	r0, #11
   3df7e:	e7e0      	b.n	3df42 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   3df80:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3df84:	e7dd      	b.n	3df42 <mqtt_read_message_chunk+0x12>

0003df86 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   3df86:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   3df88:	6f03      	ldr	r3, [r0, #112]	; 0x70
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3df8a:	69c2      	ldr	r2, [r0, #28]
{
   3df8c:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   3df8e:	9302      	str	r3, [sp, #8]
{
   3df90:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3df92:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   3df94:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3df96:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   3df98:	4628      	mov	r0, r5
   3df9a:	a902      	add	r1, sp, #8
   3df9c:	f7ff ffc8 	bl	3df30 <mqtt_read_message_chunk>
		if (err_code < 0) {
   3dfa0:	1e04      	subs	r4, r0, #0
   3dfa2:	db2d      	blt.n	3e000 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   3dfa4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3dfa6:	aa01      	add	r2, sp, #4
   3dfa8:	f10d 0103 	add.w	r1, sp, #3
   3dfac:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   3dfae:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3dfb0:	f7ff fe08 	bl	3dbc4 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   3dfb4:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3dfb8:	4604      	mov	r4, r0
		chunk_size = 1U;
   3dfba:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   3dfbe:	d0eb      	beq.n	3df98 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   3dfc0:	2800      	cmp	r0, #0
   3dfc2:	db21      	blt.n	3e008 <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   3dfc4:	f89d 6003 	ldrb.w	r6, [sp, #3]
   3dfc8:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   3dfcc:	2b30      	cmp	r3, #48	; 0x30
   3dfce:	d11e      	bne.n	3e00e <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   3dfd0:	2202      	movs	r2, #2
   3dfd2:	4628      	mov	r0, r5
   3dfd4:	a902      	add	r1, sp, #8
   3dfd6:	f7ff ffab 	bl	3df30 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3dfda:	1e04      	subs	r4, r0, #0
   3dfdc:	db10      	blt.n	3e000 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   3dfde:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3dfe0:	f016 0f06 	tst.w	r6, #6
   3dfe4:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   3dfe6:	4628      	mov	r0, r5
   3dfe8:	ba52      	rev16	r2, r2
   3dfea:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   3dfec:	bf0c      	ite	eq
   3dfee:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   3dff0:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   3dff2:	a902      	add	r1, sp, #8
   3dff4:	f7ff ff9c 	bl	3df30 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3dff8:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   3dffc:	2c00      	cmp	r4, #0
   3dffe:	da0d      	bge.n	3e01c <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   3e000:	f114 0f0b 	cmn.w	r4, #11
   3e004:	d100      	bne.n	3e008 <mqtt_handle_rx+0x82>
   3e006:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   3e008:	4620      	mov	r0, r4
   3e00a:	b00c      	add	sp, #48	; 0x30
   3e00c:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3e00e:	4628      	mov	r0, r5
   3e010:	9a01      	ldr	r2, [sp, #4]
   3e012:	a902      	add	r1, sp, #8
   3e014:	f7ff ff8c 	bl	3df30 <mqtt_read_message_chunk>
   3e018:	4604      	mov	r4, r0
   3e01a:	e7ef      	b.n	3dffc <mqtt_handle_rx+0x76>
	evt.result = 0;
   3e01c:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   3e01e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3e022:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   3e024:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   3e028:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   3e02a:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   3e02c:	d066      	beq.n	3e0fc <mqtt_handle_rx+0x176>
   3e02e:	d813      	bhi.n	3e058 <mqtt_handle_rx+0xd2>
   3e030:	2b40      	cmp	r3, #64	; 0x40
   3e032:	d059      	beq.n	3e0e8 <mqtt_handle_rx+0x162>
   3e034:	d806      	bhi.n	3e044 <mqtt_handle_rx+0xbe>
   3e036:	2b20      	cmp	r3, #32
   3e038:	d02f      	beq.n	3e09a <mqtt_handle_rx+0x114>
   3e03a:	2b30      	cmp	r3, #48	; 0x30
   3e03c:	d048      	beq.n	3e0d0 <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   3e03e:	2400      	movs	r4, #0
   3e040:	61ec      	str	r4, [r5, #28]
	return 0;
   3e042:	e7e1      	b.n	3e008 <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   3e044:	2b50      	cmp	r3, #80	; 0x50
   3e046:	d1fa      	bne.n	3e03e <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   3e048:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3e04a:	a905      	add	r1, sp, #20
   3e04c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   3e04e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3e052:	f7ff fe3f 	bl	3dcd4 <publish_receive_decode>
   3e056:	e04e      	b.n	3e0f6 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   3e058:	2bb0      	cmp	r3, #176	; 0xb0
   3e05a:	d05f      	beq.n	3e11c <mqtt_handle_rx+0x196>
   3e05c:	d80b      	bhi.n	3e076 <mqtt_handle_rx+0xf0>
   3e05e:	2b70      	cmp	r3, #112	; 0x70
   3e060:	d054      	beq.n	3e10c <mqtt_handle_rx+0x186>
   3e062:	2b90      	cmp	r3, #144	; 0x90
   3e064:	d1eb      	bne.n	3e03e <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   3e066:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3e068:	a905      	add	r1, sp, #20
   3e06a:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   3e06c:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3e070:	f7ff fe36 	bl	3dce0 <subscribe_ack_decode>
   3e074:	e03f      	b.n	3e0f6 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   3e076:	2bd0      	cmp	r3, #208	; 0xd0
   3e078:	d1e1      	bne.n	3e03e <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   3e07a:	f995 3083 	ldrsb.w	r3, [r5, #131]	; 0x83
	int err_code = 0;
   3e07e:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   3e080:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   3e082:	bfc8      	it	gt
   3e084:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   3e088:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   3e08c:	bfc8      	it	gt
   3e08e:	b252      	sxtbgt	r2, r2
   3e090:	f885 2083 	strb.w	r2, [r5, #131]	; 0x83
		evt.type = MQTT_EVT_PINGRESP;
   3e094:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   3e098:	e010      	b.n	3e0bc <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   3e09a:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   3e09e:	4628      	mov	r0, r5
   3e0a0:	aa05      	add	r2, sp, #20
   3e0a2:	a902      	add	r1, sp, #8
   3e0a4:	f7ff fdb9 	bl	3dc1a <connect_ack_decode>
		if (err_code == 0) {
   3e0a8:	4604      	mov	r4, r0
   3e0aa:	bb28      	cbnz	r0, 3e0f8 <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   3e0ac:	f89d 2015 	ldrb.w	r2, [sp, #21]
   3e0b0:	b95a      	cbnz	r2, 3e0ca <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   3e0b2:	69ab      	ldr	r3, [r5, #24]
   3e0b4:	f043 0304 	orr.w	r3, r3, #4
   3e0b8:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   3e0ba:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   3e0bc:	4628      	mov	r0, r5
   3e0be:	a904      	add	r1, sp, #16
   3e0c0:	f000 f8f1 	bl	3e2a6 <event_notify>
	if (err_code < 0) {
   3e0c4:	2c00      	cmp	r4, #0
   3e0c6:	daba      	bge.n	3e03e <mqtt_handle_rx+0xb8>
   3e0c8:	e79e      	b.n	3e008 <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   3e0ca:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   3e0ce:	e7f4      	b.n	3e0ba <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   3e0d0:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   3e0d2:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   3e0d4:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   3e0d8:	ab05      	add	r3, sp, #20
   3e0da:	f7ff fdb9 	bl	3dc50 <publish_decode>
		client->internal.remaining_payload =
   3e0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   3e0e0:	4604      	mov	r4, r0
		evt.result = err_code;
   3e0e2:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   3e0e4:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   3e0e6:	e7e9      	b.n	3e0bc <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   3e0e8:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3e0ea:	a905      	add	r1, sp, #20
   3e0ec:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   3e0ee:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3e0f2:	f7ff fded 	bl	3dcd0 <publish_ack_decode>
   3e0f6:	4604      	mov	r4, r0
		evt.result = err_code;
   3e0f8:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   3e0fa:	e7df      	b.n	3e0bc <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   3e0fc:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3e0fe:	a905      	add	r1, sp, #20
   3e100:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   3e102:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3e106:	f7ff fde7 	bl	3dcd8 <publish_release_decode>
   3e10a:	e7f4      	b.n	3e0f6 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   3e10c:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3e10e:	a905      	add	r1, sp, #20
   3e110:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   3e112:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3e116:	f7ff fde1 	bl	3dcdc <publish_complete_decode>
   3e11a:	e7ec      	b.n	3e0f6 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   3e11c:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3e11e:	a905      	add	r1, sp, #20
   3e120:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   3e124:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3e128:	f7ff fdea 	bl	3dd00 <unsubscribe_ack_decode>
   3e12c:	e7e3      	b.n	3e0f6 <mqtt_handle_rx+0x170>

0003e12e <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   3e12e:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   3e130:	6d85      	ldr	r5, [r0, #88]	; 0x58
{
   3e132:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   3e134:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3e136:	2206      	movs	r2, #6
   3e138:	2101      	movs	r1, #1
   3e13a:	f7e3 fc45 	bl	219c8 <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   3e13e:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   3e140:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   3e142:	da04      	bge.n	3e14e <mqtt_client_tcp_connect+0x20>
	NET_DBG("Connect completed");
	return 0;

error:
	(void)zsock_close(client->transport.tcp.sock);
	return -errno;
   3e144:	f7ff fc02 	bl	3d94c <__errno>
   3e148:	6800      	ldr	r0, [r0, #0]
   3e14a:	4240      	negs	r0, r0
}
   3e14c:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   3e14e:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   3e150:	6da1      	ldr	r1, [r4, #88]	; 0x58
		peer_addr_size = sizeof(struct sockaddr_in);
   3e152:	2b01      	cmp	r3, #1
   3e154:	bf14      	ite	ne
   3e156:	2218      	movne	r2, #24
   3e158:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   3e15a:	f7ff f925 	bl	3d3a8 <z_impl_zsock_connect>
	if (ret < 0) {
   3e15e:	2800      	cmp	r0, #0
   3e160:	da03      	bge.n	3e16a <mqtt_client_tcp_connect+0x3c>
	(void)zsock_close(client->transport.tcp.sock);
   3e162:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3e164:	f7ff f8fc 	bl	3d360 <z_impl_zsock_close>
   3e168:	e7ec      	b.n	3e144 <mqtt_client_tcp_connect+0x16>
	return 0;
   3e16a:	2000      	movs	r0, #0
   3e16c:	e7ee      	b.n	3e14c <mqtt_client_tcp_connect+0x1e>

0003e16e <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3e16e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   3e172:	2400      	movs	r4, #0
{
   3e174:	4606      	mov	r6, r0
   3e176:	460f      	mov	r7, r1
   3e178:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3e17a:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3e17c:	42ac      	cmp	r4, r5
   3e17e:	d301      	bcc.n	3e184 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3e180:	2000      	movs	r0, #0
   3e182:	e00d      	b.n	3e1a0 <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   3e184:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3e186:	2300      	movs	r3, #0
   3e188:	e9cd 8800 	strd	r8, r8, [sp]
   3e18c:	1b2a      	subs	r2, r5, r4
   3e18e:	1939      	adds	r1, r7, r4
   3e190:	f7ff f931 	bl	3d3f6 <z_impl_zsock_sendto>
		if (ret < 0) {
   3e194:	1e03      	subs	r3, r0, #0
   3e196:	da06      	bge.n	3e1a6 <mqtt_client_tcp_write+0x38>
			return -errno;
   3e198:	f7ff fbd8 	bl	3d94c <__errno>
   3e19c:	6800      	ldr	r0, [r0, #0]
   3e19e:	4240      	negs	r0, r0
}
   3e1a0:	b002      	add	sp, #8
   3e1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3e1a6:	441c      	add	r4, r3
   3e1a8:	e7e8      	b.n	3e17c <mqtt_client_tcp_write+0xe>

0003e1aa <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   3e1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   3e1ae:	2500      	movs	r5, #0
{
   3e1b0:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   3e1b2:	462b      	mov	r3, r5
{
   3e1b4:	460c      	mov	r4, r1
   3e1b6:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   3e1b8:	428b      	cmp	r3, r1
   3e1ba:	d110      	bne.n	3e1de <mqtt_client_tcp_write_msg+0x34>
	size_t offset = 0;
   3e1bc:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   3e1be:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   3e1c0:	42ae      	cmp	r6, r5
   3e1c2:	d216      	bcs.n	3e1f2 <mqtt_client_tcp_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   3e1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   3e1c6:	2200      	movs	r2, #0
   3e1c8:	4621      	mov	r1, r4
   3e1ca:	f7ff f944 	bl	3d456 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   3e1ce:	1e03      	subs	r3, r0, #0
   3e1d0:	da0c      	bge.n	3e1ec <mqtt_client_tcp_write_msg+0x42>
			return -errno;
   3e1d2:	f7ff fbbb 	bl	3d94c <__errno>
   3e1d6:	6800      	ldr	r0, [r0, #0]
   3e1d8:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   3e1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   3e1de:	68a2      	ldr	r2, [r4, #8]
   3e1e0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   3e1e4:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   3e1e6:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   3e1e8:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   3e1ea:	e7e5      	b.n	3e1b8 <mqtt_client_tcp_write_msg+0xe>
		offset += ret;
   3e1ec:	441e      	add	r6, r3
		if (offset >= total_len) {
   3e1ee:	42b5      	cmp	r5, r6
   3e1f0:	d801      	bhi.n	3e1f6 <mqtt_client_tcp_write_msg+0x4c>
	return 0;
   3e1f2:	2000      	movs	r0, #0
   3e1f4:	e7f1      	b.n	3e1da <mqtt_client_tcp_write_msg+0x30>
		for (i = 0; i < message->msg_iovlen; i++) {
   3e1f6:	2000      	movs	r0, #0
   3e1f8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   3e1fc:	4560      	cmp	r0, ip
   3e1fe:	d0df      	beq.n	3e1c0 <mqtt_client_tcp_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   3e200:	68a2      	ldr	r2, [r4, #8]
   3e202:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   3e206:	6851      	ldr	r1, [r2, #4]
   3e208:	4299      	cmp	r1, r3
   3e20a:	d905      	bls.n	3e218 <mqtt_client_tcp_write_msg+0x6e>
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3e20c:	6810      	ldr	r0, [r2, #0]
				message->msg_iov[i].iov_len -= ret;
   3e20e:	1ac9      	subs	r1, r1, r3
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3e210:	4418      	add	r0, r3
				message->msg_iov[i].iov_len -= ret;
   3e212:	6051      	str	r1, [r2, #4]
				message->msg_iov[i].iov_base =
   3e214:	6010      	str	r0, [r2, #0]
				break;
   3e216:	e7d3      	b.n	3e1c0 <mqtt_client_tcp_write_msg+0x16>
			ret -= message->msg_iov[i].iov_len;
   3e218:	1a5b      	subs	r3, r3, r1
			message->msg_iov[i].iov_len = 0;
   3e21a:	f8c2 8004 	str.w	r8, [r2, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   3e21e:	3001      	adds	r0, #1
   3e220:	e7ec      	b.n	3e1fc <mqtt_client_tcp_write_msg+0x52>

0003e222 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   3e222:	b513      	push	{r0, r1, r4, lr}
   3e224:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= ZSOCK_MSG_DONTWAIT;
   3e226:	42a3      	cmp	r3, r4
   3e228:	bf14      	ite	ne
   3e22a:	4623      	movne	r3, r4
   3e22c:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   3e22e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3e230:	e9cd 4400 	strd	r4, r4, [sp]
   3e234:	f7ff f936 	bl	3d4a4 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3e238:	2800      	cmp	r0, #0
   3e23a:	da03      	bge.n	3e244 <mqtt_client_tcp_read+0x22>
		return -errno;
   3e23c:	f7ff fb86 	bl	3d94c <__errno>
   3e240:	6800      	ldr	r0, [r0, #0]
   3e242:	4240      	negs	r0, r0
	}

	return ret;
}
   3e244:	b002      	add	sp, #8
   3e246:	bd10      	pop	{r4, pc}

0003e248 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   3e248:	b508      	push	{r3, lr}
	int ret;

	NET_INFO("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   3e24a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3e24c:	f7ff f888 	bl	3d360 <z_impl_zsock_close>
	if (ret < 0) {
   3e250:	2800      	cmp	r0, #0
   3e252:	da04      	bge.n	3e25e <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   3e254:	f7ff fb7a 	bl	3d94c <__errno>
   3e258:	6800      	ldr	r0, [r0, #0]
   3e25a:	4240      	negs	r0, r0
	}

	return 0;
}
   3e25c:	bd08      	pop	{r3, pc}
	return 0;
   3e25e:	2000      	movs	r0, #0
   3e260:	e7fc      	b.n	3e25c <mqtt_client_tcp_disconnect+0x14>

0003e262 <k_uptime_get_32>:
{
   3e262:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   3e264:	f003 f83d 	bl	412e2 <z_impl_k_uptime_ticks>
   3e268:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3e26c:	fba0 3002 	umull	r3, r0, r0, r2
   3e270:	fb02 0101 	mla	r1, r2, r1, r0
   3e274:	0bd8      	lsrs	r0, r3, #15
}
   3e276:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   3e27a:	bd08      	pop	{r3, pc}

0003e27c <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   3e27c:	b538      	push	{r3, r4, r5, lr}
   3e27e:	4604      	mov	r4, r0
   3e280:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   3e282:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
   3e284:	2100      	movs	r1, #0
   3e286:	6f80      	ldr	r0, [r0, #120]	; 0x78
   3e288:	f003 f9bb 	bl	41602 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   3e28c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
	buf->end = client->tx_buf + client->tx_buf_size;
   3e28e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	buf->cur = client->tx_buf;
   3e290:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   3e292:	4413      	add	r3, r2
   3e294:	606b      	str	r3, [r5, #4]
}
   3e296:	bd38      	pop	{r3, r4, r5, pc}

0003e298 <verify_tx_state.isra.0>:
}

static int verify_tx_state(const struct mqtt_client *client)
{
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
		return -ENOTCONN;
   3e298:	f010 0f04 	tst.w	r0, #4
	}

	return 0;
}
   3e29c:	bf0c      	ite	eq
   3e29e:	f06f 007f 	mvneq.w	r0, #127	; 0x7f
   3e2a2:	2000      	movne	r0, #0
   3e2a4:	4770      	bx	lr

0003e2a6 <event_notify>:
{
   3e2a6:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   3e2a8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
   3e2aa:	4604      	mov	r4, r0
   3e2ac:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   3e2ae:	b15b      	cbz	r3, 3e2c8 <event_notify+0x22>
		mqtt_mutex_unlock(client);
   3e2b0:	f7e5 ff24 	bl	240fc <mqtt_mutex_unlock>
		client->evt_cb(client, evt);
   3e2b4:	4620      	mov	r0, r4
   3e2b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   3e2b8:	9901      	ldr	r1, [sp, #4]
   3e2ba:	4798      	blx	r3
		mqtt_mutex_lock(client);
   3e2bc:	4620      	mov	r0, r4
}
   3e2be:	b002      	add	sp, #8
   3e2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   3e2c4:	f7e5 bf2e 	b.w	24124 <mqtt_mutex_lock>
}
   3e2c8:	b002      	add	sp, #8
   3e2ca:	bd10      	pop	{r4, pc}

0003e2cc <client_disconnect.constprop.0>:
static void client_disconnect(struct mqtt_client *client, int result,
   3e2cc:	b530      	push	{r4, r5, lr}
   3e2ce:	b089      	sub	sp, #36	; 0x24
   3e2d0:	4604      	mov	r4, r0
   3e2d2:	460d      	mov	r5, r1
	err_code = mqtt_transport_disconnect(client);
   3e2d4:	f7e5 ff08 	bl	240e8 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   3e2d8:	2100      	movs	r1, #0
		struct mqtt_evt evt = {
   3e2da:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   3e2dc:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   3e2e0:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   3e2e4:	4668      	mov	r0, sp
   3e2e6:	f003 f98c 	bl	41602 <memset>
   3e2ea:	2301      	movs	r3, #1
		event_notify(client, &evt);
   3e2ec:	4669      	mov	r1, sp
   3e2ee:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   3e2f0:	f88d 3000 	strb.w	r3, [sp]
   3e2f4:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   3e2f6:	f7ff ffd6 	bl	3e2a6 <event_notify>
}
   3e2fa:	b009      	add	sp, #36	; 0x24
   3e2fc:	bd30      	pop	{r4, r5, pc}

0003e2fe <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   3e2fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3e300:	4617      	mov	r7, r2
   3e302:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   3e304:	4605      	mov	r5, r0
{
   3e306:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   3e308:	b320      	cbz	r0, 3e354 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   3e30a:	f7e5 ff0b 	bl	24124 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   3e30e:	6a2c      	ldr	r4, [r5, #32]
   3e310:	b1b4      	cbz	r4, 3e340 <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   3e312:	42bc      	cmp	r4, r7
   3e314:	4622      	mov	r2, r4
   3e316:	4633      	mov	r3, r6
   3e318:	bf28      	it	cs
   3e31a:	463a      	movcs	r2, r7
   3e31c:	4628      	mov	r0, r5
   3e31e:	9901      	ldr	r1, [sp, #4]
   3e320:	f7e5 fed4 	bl	240cc <mqtt_transport_read>
   3e324:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   3e326:	b916      	cbnz	r6, 3e32e <read_publish_payload+0x30>
   3e328:	f110 0f0b 	cmn.w	r0, #11
   3e32c:	d008      	beq.n	3e340 <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   3e32e:	2c00      	cmp	r4, #0
   3e330:	dc0c      	bgt.n	3e34c <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   3e332:	bf08      	it	eq
   3e334:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   3e338:	4628      	mov	r0, r5
   3e33a:	4621      	mov	r1, r4
   3e33c:	f7ff ffc6 	bl	3e2cc <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   3e340:	4628      	mov	r0, r5
   3e342:	f7e5 fedb 	bl	240fc <mqtt_mutex_unlock>

	return ret;
}
   3e346:	4620      	mov	r0, r4
   3e348:	b003      	add	sp, #12
   3e34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   3e34c:	6a2b      	ldr	r3, [r5, #32]
   3e34e:	1b1b      	subs	r3, r3, r4
   3e350:	622b      	str	r3, [r5, #32]
   3e352:	e7f5      	b.n	3e340 <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   3e354:	f06f 0415 	mvn.w	r4, #21
   3e358:	e7f5      	b.n	3e346 <read_publish_payload+0x48>

0003e35a <client_write>:
{
   3e35a:	b538      	push	{r3, r4, r5, lr}
   3e35c:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   3e35e:	f7e5 fe9b 	bl	24098 <mqtt_transport_write>
	if (err_code < 0) {
   3e362:	1e04      	subs	r4, r0, #0
   3e364:	da05      	bge.n	3e372 <client_write+0x18>
		client_disconnect(client, err_code, true);
   3e366:	4621      	mov	r1, r4
   3e368:	4628      	mov	r0, r5
   3e36a:	f7ff ffaf 	bl	3e2cc <client_disconnect.constprop.0>
}
   3e36e:	4620      	mov	r0, r4
   3e370:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @retval Current wall clock or sys tick value in milliseconds.
 */
static inline uint32_t mqtt_sys_tick_in_ms_get(void)
{
	return k_uptime_get_32();
   3e372:	f7ff ff76 	bl	3e262 <k_uptime_get_32>
	return 0;
   3e376:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   3e378:	6168      	str	r0, [r5, #20]
	return 0;
   3e37a:	e7f8      	b.n	3e36e <client_write+0x14>

0003e37c <mqtt_client_init>:
{
   3e37c:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   3e37e:	4604      	mov	r4, r0
   3e380:	b190      	cbz	r0, 3e3a8 <mqtt_client_init+0x2c>
   3e382:	2288      	movs	r2, #136	; 0x88
   3e384:	2100      	movs	r1, #0
   3e386:	f003 f93c 	bl	41602 <memset>
	return z_impl_k_mutex_init(mutex);
   3e38a:	4620      	mov	r0, r4
   3e38c:	f002 feef 	bl	4116e <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   3e390:	2304      	movs	r3, #4
   3e392:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
	client->clean_session = MQTT_CLEAN_SESSION;
   3e396:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   3e39a:	f36f 0341 	bfc	r3, #1, #1
   3e39e:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
	client->keepalive = MQTT_KEEPALIVE;
   3e3a2:	2378      	movs	r3, #120	; 0x78
   3e3a4:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
}
   3e3a8:	bd10      	pop	{r4, pc}

0003e3aa <mqtt_connect>:
{
   3e3aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e3ac:	4605      	mov	r5, r0
   3e3ae:	2800      	cmp	r0, #0
   3e3b0:	d03a      	beq.n	3e428 <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   3e3b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
   3e3b4:	b3c3      	cbz	r3, 3e428 <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   3e3b6:	f7e5 feb5 	bl	24124 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   3e3ba:	6fab      	ldr	r3, [r5, #120]	; 0x78
   3e3bc:	b38b      	cbz	r3, 3e422 <mqtt_connect+0x78>
   3e3be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   3e3c0:	b37b      	cbz	r3, 3e422 <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   3e3c2:	4628      	mov	r0, r5
   3e3c4:	f7e5 fe5e 	bl	24084 <mqtt_transport_connect>
	if (err_code < 0) {
   3e3c8:	1e04      	subs	r4, r0, #0
   3e3ca:	db24      	blt.n	3e416 <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   3e3cc:	4669      	mov	r1, sp
   3e3ce:	4628      	mov	r0, r5
   3e3d0:	f7ff ff54 	bl	3e27c <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e3d4:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   3e3d6:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e3d8:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   3e3dc:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e3de:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   3e3e0:	f7e5 fdac 	bl	23f3c <connect_request_encode>
	if (err_code < 0) {
   3e3e4:	1e04      	subs	r4, r0, #0
   3e3e6:	db13      	blt.n	3e410 <mqtt_connect+0x66>
	err_code = mqtt_transport_write(client, packet.cur,
   3e3e8:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e3ec:	4628      	mov	r0, r5
   3e3ee:	1a52      	subs	r2, r2, r1
   3e3f0:	f7e5 fe52 	bl	24098 <mqtt_transport_write>
	if (err_code < 0) {
   3e3f4:	1e04      	subs	r4, r0, #0
   3e3f6:	db0b      	blt.n	3e410 <mqtt_connect+0x66>
   3e3f8:	f7ff ff33 	bl	3e262 <k_uptime_get_32>
	client->unacked_ping = 0;
   3e3fc:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   3e3fe:	6168      	str	r0, [r5, #20]
	client->unacked_ping = 0;
   3e400:	f885 4083 	strb.w	r4, [r5, #131]	; 0x83
	mqtt_mutex_unlock(client);
   3e404:	4628      	mov	r0, r5
   3e406:	f7e5 fe79 	bl	240fc <mqtt_mutex_unlock>
}
   3e40a:	4620      	mov	r0, r4
   3e40c:	b003      	add	sp, #12
   3e40e:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   3e410:	4628      	mov	r0, r5
   3e412:	f7e5 fe69 	bl	240e8 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   3e416:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3e418:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   3e41c:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   3e420:	e7f0      	b.n	3e404 <mqtt_connect+0x5a>
		err_code = -ENOMEM;
   3e422:	f06f 040b 	mvn.w	r4, #11
   3e426:	e7f6      	b.n	3e416 <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   3e428:	f06f 0415 	mvn.w	r4, #21
   3e42c:	e7ed      	b.n	3e40a <mqtt_connect+0x60>

0003e42e <mqtt_publish>:
{
   3e42e:	b570      	push	{r4, r5, r6, lr}
   3e430:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e432:	4605      	mov	r5, r0
{
   3e434:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   3e436:	2800      	cmp	r0, #0
   3e438:	d03a      	beq.n	3e4b0 <mqtt_publish+0x82>
	NULL_PARAM_CHECK(param);
   3e43a:	2900      	cmp	r1, #0
   3e43c:	d038      	beq.n	3e4b0 <mqtt_publish+0x82>
	mqtt_mutex_lock(client);
   3e43e:	f7e5 fe71 	bl	24124 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e442:	4628      	mov	r0, r5
   3e444:	a901      	add	r1, sp, #4
   3e446:	f7ff ff19 	bl	3e27c <tx_buf_init>
	err_code = verify_tx_state(client);
   3e44a:	69a8      	ldr	r0, [r5, #24]
   3e44c:	f7ff ff24 	bl	3e298 <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e450:	1e04      	subs	r4, r0, #0
   3e452:	db22      	blt.n	3e49a <mqtt_publish+0x6c>
	err_code = publish_encode(param, &packet);
   3e454:	4630      	mov	r0, r6
   3e456:	a901      	add	r1, sp, #4
   3e458:	f7ff fcc8 	bl	3ddec <publish_encode>
	if (err_code < 0) {
   3e45c:	1e04      	subs	r4, r0, #0
   3e45e:	db1c      	blt.n	3e49a <mqtt_publish+0x6c>
	io_vector[0].iov_base = packet.cur;
   3e460:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   3e462:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   3e464:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   3e466:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   3e468:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   3e46a:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   3e46c:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   3e46e:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   3e470:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   3e472:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   3e474:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   3e478:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   3e47a:	f003 f8c2 	bl	41602 <memset>
	msg.msg_iov = io_vector;
   3e47e:	ab03      	add	r3, sp, #12
   3e480:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   3e482:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   3e484:	4628      	mov	r0, r5
   3e486:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   3e488:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   3e48a:	f7e5 fe11 	bl	240b0 <mqtt_transport_write_msg>
	if (err_code < 0) {
   3e48e:	1e04      	subs	r4, r0, #0
   3e490:	da09      	bge.n	3e4a6 <mqtt_publish+0x78>
		client_disconnect(client, err_code, true);
   3e492:	4621      	mov	r1, r4
   3e494:	4628      	mov	r0, r5
   3e496:	f7ff ff19 	bl	3e2cc <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3e49a:	4628      	mov	r0, r5
   3e49c:	f7e5 fe2e 	bl	240fc <mqtt_mutex_unlock>
}
   3e4a0:	4620      	mov	r0, r4
   3e4a2:	b00e      	add	sp, #56	; 0x38
   3e4a4:	bd70      	pop	{r4, r5, r6, pc}
   3e4a6:	f7ff fedc 	bl	3e262 <k_uptime_get_32>
	return 0;
   3e4aa:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   3e4ac:	6168      	str	r0, [r5, #20]
	return 0;
   3e4ae:	e7f4      	b.n	3e49a <mqtt_publish+0x6c>
	NULL_PARAM_CHECK(client);
   3e4b0:	f06f 0415 	mvn.w	r4, #21
   3e4b4:	e7f4      	b.n	3e4a0 <mqtt_publish+0x72>

0003e4b6 <mqtt_publish_qos1_ack>:
{
   3e4b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3e4b8:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e4ba:	4605      	mov	r5, r0
   3e4bc:	b1f0      	cbz	r0, 3e4fc <mqtt_publish_qos1_ack+0x46>
	NULL_PARAM_CHECK(param);
   3e4be:	b1e9      	cbz	r1, 3e4fc <mqtt_publish_qos1_ack+0x46>
	mqtt_mutex_lock(client);
   3e4c0:	f7e5 fe30 	bl	24124 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e4c4:	4628      	mov	r0, r5
   3e4c6:	4669      	mov	r1, sp
   3e4c8:	f7ff fed8 	bl	3e27c <tx_buf_init>
	err_code = verify_tx_state(client);
   3e4cc:	69a8      	ldr	r0, [r5, #24]
   3e4ce:	f7ff fee3 	bl	3e298 <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e4d2:	1e04      	subs	r4, r0, #0
   3e4d4:	db0c      	blt.n	3e4f0 <mqtt_publish_qos1_ack+0x3a>
	err_code = publish_ack_encode(param, &packet);
   3e4d6:	4669      	mov	r1, sp
   3e4d8:	4630      	mov	r0, r6
   3e4da:	f7ff fcc8 	bl	3de6e <publish_ack_encode>
	if (err_code < 0) {
   3e4de:	1e04      	subs	r4, r0, #0
   3e4e0:	db06      	blt.n	3e4f0 <mqtt_publish_qos1_ack+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e4e2:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e4e6:	4628      	mov	r0, r5
   3e4e8:	1a52      	subs	r2, r2, r1
   3e4ea:	f7ff ff36 	bl	3e35a <client_write>
   3e4ee:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3e4f0:	4628      	mov	r0, r5
   3e4f2:	f7e5 fe03 	bl	240fc <mqtt_mutex_unlock>
}
   3e4f6:	4620      	mov	r0, r4
   3e4f8:	b002      	add	sp, #8
   3e4fa:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   3e4fc:	f06f 0415 	mvn.w	r4, #21
   3e500:	e7f9      	b.n	3e4f6 <mqtt_publish_qos1_ack+0x40>

0003e502 <mqtt_disconnect>:
{
   3e502:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e504:	4605      	mov	r5, r0
   3e506:	b308      	cbz	r0, 3e54c <mqtt_disconnect+0x4a>
	mqtt_mutex_lock(client);
   3e508:	f7e5 fe0c 	bl	24124 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e50c:	4628      	mov	r0, r5
   3e50e:	4669      	mov	r1, sp
   3e510:	f7ff feb4 	bl	3e27c <tx_buf_init>
	err_code = verify_tx_state(client);
   3e514:	69a8      	ldr	r0, [r5, #24]
   3e516:	f7ff febf 	bl	3e298 <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e51a:	1e04      	subs	r4, r0, #0
   3e51c:	db10      	blt.n	3e540 <mqtt_disconnect+0x3e>
	err_code = disconnect_encode(&packet);
   3e51e:	4668      	mov	r0, sp
   3e520:	f7e5 fd8c 	bl	2403c <disconnect_encode>
	if (err_code < 0) {
   3e524:	1e04      	subs	r4, r0, #0
   3e526:	db0b      	blt.n	3e540 <mqtt_disconnect+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e528:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e52c:	4628      	mov	r0, r5
   3e52e:	1a52      	subs	r2, r2, r1
   3e530:	f7ff ff13 	bl	3e35a <client_write>
	if (err_code < 0) {
   3e534:	1e04      	subs	r4, r0, #0
   3e536:	db03      	blt.n	3e540 <mqtt_disconnect+0x3e>
	client_disconnect(client, 0, true);
   3e538:	2100      	movs	r1, #0
   3e53a:	4628      	mov	r0, r5
   3e53c:	f7ff fec6 	bl	3e2cc <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3e540:	4628      	mov	r0, r5
   3e542:	f7e5 fddb 	bl	240fc <mqtt_mutex_unlock>
}
   3e546:	4620      	mov	r0, r4
   3e548:	b003      	add	sp, #12
   3e54a:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   3e54c:	f06f 0415 	mvn.w	r4, #21
   3e550:	e7f9      	b.n	3e546 <mqtt_disconnect+0x44>

0003e552 <mqtt_subscribe>:
{
   3e552:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3e554:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e556:	4605      	mov	r5, r0
   3e558:	b1f0      	cbz	r0, 3e598 <mqtt_subscribe+0x46>
	NULL_PARAM_CHECK(param);
   3e55a:	b1e9      	cbz	r1, 3e598 <mqtt_subscribe+0x46>
	mqtt_mutex_lock(client);
   3e55c:	f7e5 fde2 	bl	24124 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e560:	4628      	mov	r0, r5
   3e562:	4669      	mov	r1, sp
   3e564:	f7ff fe8a 	bl	3e27c <tx_buf_init>
	err_code = verify_tx_state(client);
   3e568:	69a8      	ldr	r0, [r5, #24]
   3e56a:	f7ff fe95 	bl	3e298 <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e56e:	1e04      	subs	r4, r0, #0
   3e570:	db0c      	blt.n	3e58c <mqtt_subscribe+0x3a>
	err_code = subscribe_encode(param, &packet);
   3e572:	4669      	mov	r1, sp
   3e574:	4630      	mov	r0, r6
   3e576:	f7ff fc7f 	bl	3de78 <subscribe_encode>
	if (err_code < 0) {
   3e57a:	1e04      	subs	r4, r0, #0
   3e57c:	db06      	blt.n	3e58c <mqtt_subscribe+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e57e:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e582:	4628      	mov	r0, r5
   3e584:	1a52      	subs	r2, r2, r1
   3e586:	f7ff fee8 	bl	3e35a <client_write>
   3e58a:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3e58c:	4628      	mov	r0, r5
   3e58e:	f7e5 fdb5 	bl	240fc <mqtt_mutex_unlock>
}
   3e592:	4620      	mov	r0, r4
   3e594:	b002      	add	sp, #8
   3e596:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   3e598:	f06f 0415 	mvn.w	r4, #21
   3e59c:	e7f9      	b.n	3e592 <mqtt_subscribe+0x40>

0003e59e <mqtt_unsubscribe>:
{
   3e59e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3e5a0:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e5a2:	4605      	mov	r5, r0
   3e5a4:	b1f0      	cbz	r0, 3e5e4 <mqtt_unsubscribe+0x46>
	NULL_PARAM_CHECK(param);
   3e5a6:	b1e9      	cbz	r1, 3e5e4 <mqtt_unsubscribe+0x46>
	mqtt_mutex_lock(client);
   3e5a8:	f7e5 fdbc 	bl	24124 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e5ac:	4628      	mov	r0, r5
   3e5ae:	4669      	mov	r1, sp
   3e5b0:	f7ff fe64 	bl	3e27c <tx_buf_init>
	err_code = verify_tx_state(client);
   3e5b4:	69a8      	ldr	r0, [r5, #24]
   3e5b6:	f7ff fe6f 	bl	3e298 <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e5ba:	1e04      	subs	r4, r0, #0
   3e5bc:	db0c      	blt.n	3e5d8 <mqtt_unsubscribe+0x3a>
	err_code = unsubscribe_encode(param, &packet);
   3e5be:	4669      	mov	r1, sp
   3e5c0:	4630      	mov	r0, r6
   3e5c2:	f7ff fc90 	bl	3dee6 <unsubscribe_encode>
	if (err_code < 0) {
   3e5c6:	1e04      	subs	r4, r0, #0
   3e5c8:	db06      	blt.n	3e5d8 <mqtt_unsubscribe+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e5ca:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e5ce:	4628      	mov	r0, r5
   3e5d0:	1a52      	subs	r2, r2, r1
   3e5d2:	f7ff fec2 	bl	3e35a <client_write>
   3e5d6:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3e5d8:	4628      	mov	r0, r5
   3e5da:	f7e5 fd8f 	bl	240fc <mqtt_mutex_unlock>
}
   3e5de:	4620      	mov	r0, r4
   3e5e0:	b002      	add	sp, #8
   3e5e2:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   3e5e4:	f06f 0415 	mvn.w	r4, #21
   3e5e8:	e7f9      	b.n	3e5de <mqtt_unsubscribe+0x40>

0003e5ea <mqtt_ping>:
{
   3e5ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e5ec:	4605      	mov	r5, r0
   3e5ee:	b318      	cbz	r0, 3e638 <mqtt_ping+0x4e>
	mqtt_mutex_lock(client);
   3e5f0:	f7e5 fd98 	bl	24124 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e5f4:	4628      	mov	r0, r5
   3e5f6:	4669      	mov	r1, sp
   3e5f8:	f7ff fe40 	bl	3e27c <tx_buf_init>
	err_code = verify_tx_state(client);
   3e5fc:	69a8      	ldr	r0, [r5, #24]
   3e5fe:	f7ff fe4b 	bl	3e298 <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e602:	1e04      	subs	r4, r0, #0
   3e604:	db12      	blt.n	3e62c <mqtt_ping+0x42>
	err_code = ping_request_encode(&packet);
   3e606:	4668      	mov	r0, sp
   3e608:	f7e5 fd2a 	bl	24060 <ping_request_encode>
	if (err_code < 0) {
   3e60c:	1e04      	subs	r4, r0, #0
   3e60e:	db0d      	blt.n	3e62c <mqtt_ping+0x42>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e610:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e614:	4628      	mov	r0, r5
   3e616:	1a52      	subs	r2, r2, r1
   3e618:	f7ff fe9f 	bl	3e35a <client_write>
   3e61c:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   3e61e:	f995 3083 	ldrsb.w	r3, [r5, #131]	; 0x83
   3e622:	2b7f      	cmp	r3, #127	; 0x7f
		client->unacked_ping++;
   3e624:	bf1c      	itt	ne
   3e626:	3301      	addne	r3, #1
   3e628:	f885 3083 	strbne.w	r3, [r5, #131]	; 0x83
	mqtt_mutex_unlock(client);
   3e62c:	4628      	mov	r0, r5
   3e62e:	f7e5 fd65 	bl	240fc <mqtt_mutex_unlock>
}
   3e632:	4620      	mov	r0, r4
   3e634:	b003      	add	sp, #12
   3e636:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   3e638:	f06f 0415 	mvn.w	r4, #21
   3e63c:	e7f9      	b.n	3e632 <mqtt_ping+0x48>

0003e63e <mqtt_live>:
{
   3e63e:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   3e640:	4606      	mov	r6, r0
   3e642:	b300      	cbz	r0, 3e686 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   3e644:	f7e5 fd6e 	bl	24124 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   3e648:	6974      	ldr	r4, [r6, #20]
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   3e64a:	f7ff fe0a 	bl	3e262 <k_uptime_get_32>
   3e64e:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   3e650:	f8b6 4080 	ldrh.w	r4, [r6, #128]	; 0x80

	if (diff < 0) {
		return 0;
   3e654:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3e658:	b19c      	cbz	r4, 3e682 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   3e65a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3e65e:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   3e660:	4284      	cmp	r4, r0
   3e662:	d80d      	bhi.n	3e680 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   3e664:	4630      	mov	r0, r6
   3e666:	f7ff ffc0 	bl	3e5ea <mqtt_ping>
		ping_sent = true;
   3e66a:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   3e66c:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   3e66e:	4630      	mov	r0, r6
   3e670:	f7e5 fd44 	bl	240fc <mqtt_mutex_unlock>
		return -EAGAIN;
   3e674:	2c00      	cmp	r4, #0
   3e676:	bf08      	it	eq
   3e678:	f06f 050a 	mvneq.w	r5, #10
}
   3e67c:	4628      	mov	r0, r5
   3e67e:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   3e680:	2400      	movs	r4, #0
	int err_code = 0;
   3e682:	4625      	mov	r5, r4
   3e684:	e7f3      	b.n	3e66e <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   3e686:	f06f 0515 	mvn.w	r5, #21
   3e68a:	e7f7      	b.n	3e67c <mqtt_live+0x3e>

0003e68c <mqtt_keepalive_time_left>:
{
   3e68c:	b538      	push	{r3, r4, r5, lr}
   3e68e:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   3e690:	6945      	ldr	r5, [r0, #20]
	int32_t diff = k_uptime_get_32() - last_activity;
   3e692:	f7ff fde6 	bl	3e262 <k_uptime_get_32>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   3e696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3e69a:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
   3e69e:	1b42      	subs	r2, r0, r5
   3e6a0:	434b      	muls	r3, r1
		return 0;
   3e6a2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   3e6a6:	b119      	cbz	r1, 3e6b0 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   3e6a8:	4293      	cmp	r3, r2
   3e6aa:	d904      	bls.n	3e6b6 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   3e6ac:	1a98      	subs	r0, r3, r2
}
   3e6ae:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   3e6b0:	f04f 30ff 	mov.w	r0, #4294967295
   3e6b4:	e7fb      	b.n	3e6ae <mqtt_keepalive_time_left+0x22>
		return 0;
   3e6b6:	2000      	movs	r0, #0
   3e6b8:	e7f9      	b.n	3e6ae <mqtt_keepalive_time_left+0x22>

0003e6ba <mqtt_input>:
{
   3e6ba:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e6bc:	4605      	mov	r5, r0
   3e6be:	b1d0      	cbz	r0, 3e6f6 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   3e6c0:	f7e5 fd30 	bl	24124 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   3e6c4:	69ab      	ldr	r3, [r5, #24]
   3e6c6:	079b      	lsls	r3, r3, #30
   3e6c8:	d50f      	bpl.n	3e6ea <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   3e6ca:	6a2b      	ldr	r3, [r5, #32]
   3e6cc:	b983      	cbnz	r3, 3e6f0 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   3e6ce:	4628      	mov	r0, r5
   3e6d0:	f7ff fc59 	bl	3df86 <mqtt_handle_rx>
	if (err_code < 0) {
   3e6d4:	1e04      	subs	r4, r0, #0
   3e6d6:	da03      	bge.n	3e6e0 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   3e6d8:	4621      	mov	r1, r4
   3e6da:	4628      	mov	r0, r5
   3e6dc:	f7ff fdf6 	bl	3e2cc <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3e6e0:	4628      	mov	r0, r5
   3e6e2:	f7e5 fd0b 	bl	240fc <mqtt_mutex_unlock>
}
   3e6e6:	4620      	mov	r0, r4
   3e6e8:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -ENOTCONN;
   3e6ea:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3e6ee:	e7f7      	b.n	3e6e0 <mqtt_input+0x26>
		return -EBUSY;
   3e6f0:	f06f 040f 	mvn.w	r4, #15
   3e6f4:	e7f4      	b.n	3e6e0 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   3e6f6:	f06f 0415 	mvn.w	r4, #21
   3e6fa:	e7f4      	b.n	3e6e6 <mqtt_input+0x2c>

0003e6fc <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   3e6fc:	2301      	movs	r3, #1
   3e6fe:	f7ff bdfe 	b.w	3e2fe <read_publish_payload>

0003e702 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   3e702:	b570      	push	{r4, r5, r6, lr}
   3e704:	4606      	mov	r6, r0
   3e706:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   3e708:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   3e70a:	42ac      	cmp	r4, r5
   3e70c:	d301      	bcc.n	3e712 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   3e70e:	2000      	movs	r0, #0
}
   3e710:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   3e712:	4621      	mov	r1, r4
   3e714:	4630      	mov	r0, r6
   3e716:	1b2a      	subs	r2, r5, r4
   3e718:	f7ff fff0 	bl	3e6fc <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   3e71c:	2800      	cmp	r0, #0
   3e71e:	dbf7      	blt.n	3e710 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   3e720:	d001      	beq.n	3e726 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   3e722:	4404      	add	r4, r0
   3e724:	e7f1      	b.n	3e70a <mqtt_readall_publish_payload+0x8>
			return -EIO;
   3e726:	f06f 0004 	mvn.w	r0, #4
   3e72a:	e7f1      	b.n	3e710 <mqtt_readall_publish_payload+0xe>

0003e72c <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3e72c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   3e730:	2400      	movs	r4, #0
{
   3e732:	4606      	mov	r6, r0
   3e734:	460f      	mov	r7, r1
   3e736:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3e738:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3e73a:	42ac      	cmp	r4, r5
   3e73c:	d301      	bcc.n	3e742 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3e73e:	2000      	movs	r0, #0
   3e740:	e00d      	b.n	3e75e <mqtt_client_tls_write+0x32>
		ret = zsock_send(client->transport.tls.sock, data + offset,
   3e742:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3e744:	2300      	movs	r3, #0
   3e746:	e9cd 8800 	strd	r8, r8, [sp]
   3e74a:	1b2a      	subs	r2, r5, r4
   3e74c:	1939      	adds	r1, r7, r4
   3e74e:	f7fe fe52 	bl	3d3f6 <z_impl_zsock_sendto>
		if (ret < 0) {
   3e752:	1e03      	subs	r3, r0, #0
   3e754:	da06      	bge.n	3e764 <mqtt_client_tls_write+0x38>
			return -errno;
   3e756:	f7ff f8f9 	bl	3d94c <__errno>
   3e75a:	6800      	ldr	r0, [r0, #0]
   3e75c:	4240      	negs	r0, r0
}
   3e75e:	b002      	add	sp, #8
   3e760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3e764:	441c      	add	r4, r3
   3e766:	e7e8      	b.n	3e73a <mqtt_client_tls_write+0xe>

0003e768 <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   3e768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   3e76c:	2500      	movs	r5, #0
{
   3e76e:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   3e770:	462b      	mov	r3, r5
{
   3e772:	460c      	mov	r4, r1
   3e774:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   3e776:	428b      	cmp	r3, r1
   3e778:	d110      	bne.n	3e79c <mqtt_client_tls_write_msg+0x34>
	size_t offset = 0;
   3e77a:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   3e77c:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   3e77e:	42ae      	cmp	r6, r5
   3e780:	d216      	bcs.n	3e7b0 <mqtt_client_tls_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tls.sock, message, 0);
   3e782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   3e784:	2200      	movs	r2, #0
   3e786:	4621      	mov	r1, r4
   3e788:	f7fe fe65 	bl	3d456 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   3e78c:	1e03      	subs	r3, r0, #0
   3e78e:	da0c      	bge.n	3e7aa <mqtt_client_tls_write_msg+0x42>
			return -errno;
   3e790:	f7ff f8dc 	bl	3d94c <__errno>
   3e794:	6800      	ldr	r0, [r0, #0]
   3e796:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   3e798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   3e79c:	68a2      	ldr	r2, [r4, #8]
   3e79e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   3e7a2:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   3e7a4:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   3e7a6:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   3e7a8:	e7e5      	b.n	3e776 <mqtt_client_tls_write_msg+0xe>
		offset += ret;
   3e7aa:	441e      	add	r6, r3
		if (offset >= total_len) {
   3e7ac:	42b5      	cmp	r5, r6
   3e7ae:	d801      	bhi.n	3e7b4 <mqtt_client_tls_write_msg+0x4c>
	return 0;
   3e7b0:	2000      	movs	r0, #0
   3e7b2:	e7f1      	b.n	3e798 <mqtt_client_tls_write_msg+0x30>
		for (i = 0; i < message->msg_iovlen; i++) {
   3e7b4:	2000      	movs	r0, #0
   3e7b6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   3e7ba:	4560      	cmp	r0, ip
   3e7bc:	d0df      	beq.n	3e77e <mqtt_client_tls_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   3e7be:	68a2      	ldr	r2, [r4, #8]
   3e7c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   3e7c4:	6851      	ldr	r1, [r2, #4]
   3e7c6:	4299      	cmp	r1, r3
   3e7c8:	d905      	bls.n	3e7d6 <mqtt_client_tls_write_msg+0x6e>
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3e7ca:	6810      	ldr	r0, [r2, #0]
				message->msg_iov[i].iov_len -= ret;
   3e7cc:	1ac9      	subs	r1, r1, r3
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3e7ce:	4418      	add	r0, r3
				message->msg_iov[i].iov_len -= ret;
   3e7d0:	6051      	str	r1, [r2, #4]
				message->msg_iov[i].iov_base =
   3e7d2:	6010      	str	r0, [r2, #0]
				break;
   3e7d4:	e7d3      	b.n	3e77e <mqtt_client_tls_write_msg+0x16>
			ret -= message->msg_iov[i].iov_len;
   3e7d6:	1a5b      	subs	r3, r3, r1
			message->msg_iov[i].iov_len = 0;
   3e7d8:	f8c2 8004 	str.w	r8, [r2, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   3e7dc:	3001      	adds	r0, #1
   3e7de:	e7ec      	b.n	3e7ba <mqtt_client_tls_write_msg+0x52>

0003e7e0 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   3e7e0:	b513      	push	{r0, r1, r4, lr}
   3e7e2:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= ZSOCK_MSG_DONTWAIT;
   3e7e4:	42a3      	cmp	r3, r4
   3e7e6:	bf14      	ite	ne
   3e7e8:	4623      	movne	r3, r4
   3e7ea:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tls.sock, data, buflen, flags);
   3e7ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3e7ee:	e9cd 4400 	strd	r4, r4, [sp]
   3e7f2:	f7fe fe57 	bl	3d4a4 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3e7f6:	2800      	cmp	r0, #0
   3e7f8:	da03      	bge.n	3e802 <mqtt_client_tls_read+0x22>
		return -errno;
   3e7fa:	f7ff f8a7 	bl	3d94c <__errno>
   3e7fe:	6800      	ldr	r0, [r0, #0]
   3e800:	4240      	negs	r0, r0
	}

	return ret;
}
   3e802:	b002      	add	sp, #8
   3e804:	bd10      	pop	{r4, pc}

0003e806 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   3e806:	b508      	push	{r3, lr}
	int ret;

	NET_INFO("Closing socket %d", client->transport.tls.sock);
	ret = zsock_close(client->transport.tls.sock);
   3e808:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3e80a:	f7fe fda9 	bl	3d360 <z_impl_zsock_close>
	if (ret < 0) {
   3e80e:	2800      	cmp	r0, #0
   3e810:	da04      	bge.n	3e81c <mqtt_client_tls_disconnect+0x16>
		return -errno;
   3e812:	f7ff f89b 	bl	3d94c <__errno>
   3e816:	6800      	ldr	r0, [r0, #0]
   3e818:	4240      	negs	r0, r0
	}

	return 0;
}
   3e81a:	bd08      	pop	{r3, pc}
	return 0;
   3e81c:	2000      	movs	r0, #0
   3e81e:	e7fc      	b.n	3e81a <mqtt_client_tls_disconnect+0x14>

0003e820 <set_on_state>:
	__asm__ volatile(
   3e820:	f04f 0320 	mov.w	r3, #32
   3e824:	f3ef 8211 	mrs	r2, BASEPRI
   3e828:	f383 8812 	msr	BASEPRI_MAX, r3
   3e82c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   3e830:	6803      	ldr	r3, [r0, #0]
   3e832:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3e836:	f043 0302 	orr.w	r3, r3, #2
   3e83a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   3e83c:	f382 8811 	msr	BASEPRI, r2
   3e840:	f3bf 8f6f 	isb	sy
}
   3e844:	4770      	bx	lr

0003e846 <async_start>:
{
   3e846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e848:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   3e84a:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   3e84c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   3e84e:	f04f 0520 	mov.w	r5, #32
   3e852:	f3ef 8c11 	mrs	ip, BASEPRI
   3e856:	f385 8812 	msr	BASEPRI_MAX, r5
   3e85a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3e85e:	260c      	movs	r6, #12
   3e860:	fb06 4601 	mla	r6, r6, r1, r4
   3e864:	6cb5      	ldr	r5, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3e866:	f005 0e07 	and.w	lr, r5, #7
   3e86a:	f1be 0f01 	cmp.w	lr, #1
   3e86e:	d110      	bne.n	3e892 <async_start+0x4c>
	int err = 0;
   3e870:	2500      	movs	r5, #0
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   3e872:	64b7      	str	r7, [r6, #72]	; 0x48
	__asm__ volatile(
   3e874:	f38c 8811 	msr	BASEPRI, ip
   3e878:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   3e87c:	b93d      	cbnz	r5, 3e88e <async_start+0x48>
	subdata->cb = cb;
   3e87e:	260c      	movs	r6, #12
   3e880:	4371      	muls	r1, r6
   3e882:	440c      	add	r4, r1
	subdata->user_data = user_data;
   3e884:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   3e888:	6843      	ldr	r3, [r0, #4]
   3e88a:	585b      	ldr	r3, [r3, r1]
   3e88c:	4798      	blx	r3
}
   3e88e:	4628      	mov	r0, r5
   3e890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   3e892:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
		err = -EALREADY;
   3e896:	42af      	cmp	r7, r5
   3e898:	bf14      	ite	ne
   3e89a:	f04f 35ff 	movne.w	r5, #4294967295
   3e89e:	f06f 0577 	mvneq.w	r5, #119	; 0x77
   3e8a2:	e7e7      	b.n	3e874 <async_start+0x2e>

0003e8a4 <api_start>:
{
   3e8a4:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   3e8a6:	2480      	movs	r4, #128	; 0x80
   3e8a8:	9400      	str	r4, [sp, #0]
   3e8aa:	f7ff ffcc 	bl	3e846 <async_start>
}
   3e8ae:	b002      	add	sp, #8
   3e8b0:	bd10      	pop	{r4, pc}

0003e8b2 <onoff_started_callback>:
	return &data->mgr[type];
   3e8b2:	6900      	ldr	r0, [r0, #16]
   3e8b4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   3e8b6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3e8ba:	2100      	movs	r1, #0
   3e8bc:	4710      	bx	r2

0003e8be <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   3e8be:	2000      	movs	r0, #0
   3e8c0:	f7f3 bdca 	b.w	32458 <nrfx_clock_start>

0003e8c4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3e8c4:	2000      	movs	r0, #0
   3e8c6:	f7f3 be29 	b.w	3251c <nrfx_clock_stop>

0003e8ca <api_stop>:
	return stop(dev, subsys, CTX_API);
   3e8ca:	2280      	movs	r2, #128	; 0x80
   3e8cc:	f7e5 bd02 	b.w	242d4 <stop>

0003e8d0 <blocking_start_callback>:
{
   3e8d0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   3e8d2:	f7f8 badd 	b.w	36e90 <z_impl_k_sem_give>

0003e8d6 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e8d6:	6843      	ldr	r3, [r0, #4]
}
   3e8d8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e8da:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3e8dc:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   3e8de:	600b      	str	r3, [r1, #0]
}
   3e8e0:	4770      	bx	lr

0003e8e2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e8e2:	6843      	ldr	r3, [r0, #4]
   3e8e4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   3e8e6:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   3e8e8:	4042      	eors	r2, r0
   3e8ea:	400a      	ands	r2, r1
   3e8ec:	4042      	eors	r2, r0
    p_reg->OUT = value;
   3e8ee:	605a      	str	r2, [r3, #4]
}
   3e8f0:	2000      	movs	r0, #0
   3e8f2:	4770      	bx	lr

0003e8f4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e8f4:	6843      	ldr	r3, [r0, #4]
}
   3e8f6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e8f8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   3e8fa:	6099      	str	r1, [r3, #8]
}
   3e8fc:	4770      	bx	lr

0003e8fe <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e8fe:	6843      	ldr	r3, [r0, #4]
}
   3e900:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e902:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   3e904:	60d9      	str	r1, [r3, #12]
}
   3e906:	4770      	bx	lr

0003e908 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e908:	6843      	ldr	r3, [r0, #4]
}
   3e90a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e90c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3e90e:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   3e910:	4059      	eors	r1, r3
    p_reg->OUT = value;
   3e912:	6051      	str	r1, [r2, #4]
}
   3e914:	4770      	bx	lr

0003e916 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   3e916:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3e918:	4604      	mov	r4, r0
   3e91a:	2200      	movs	r2, #0
   3e91c:	2101      	movs	r1, #1
   3e91e:	200a      	movs	r0, #10
   3e920:	f7e4 f9d6 	bl	22cd0 <z_arm_irq_priority_set>
   3e924:	6863      	ldr	r3, [r4, #4]
	ret = pinctrl_lookup_state(config, id, &state);
   3e926:	2100      	movs	r1, #0
   3e928:	68dd      	ldr	r5, [r3, #12]
   3e92a:	aa01      	add	r2, sp, #4
   3e92c:	4628      	mov	r0, r5
   3e92e:	f000 fa05 	bl	3ed3c <pinctrl_lookup_state>
	if (ret < 0) {
   3e932:	2800      	cmp	r0, #0
   3e934:	db0d      	blt.n	3e952 <twim_2_init+0x3c>
	return pinctrl_apply_state_direct(config, state);
   3e936:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   3e938:	682a      	ldr	r2, [r5, #0]
   3e93a:	7919      	ldrb	r1, [r3, #4]
   3e93c:	6818      	ldr	r0, [r3, #0]
   3e93e:	f000 fa53 	bl	3ede8 <pinctrl_configure_pins>
   3e942:	2800      	cmp	r0, #0
   3e944:	db05      	blt.n	3e952 <twim_2_init+0x3c>
   3e946:	4620      	mov	r0, r4
   3e948:	b003      	add	sp, #12
   3e94a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3e94e:	f7e6 b883 	b.w	24a58 <init_twim>
   3e952:	b003      	add	sp, #12
   3e954:	bd30      	pop	{r4, r5, pc}

0003e956 <is_regular_addr_valid>:
{
   3e956:	b538      	push	{r3, r4, r5, lr}
   3e958:	4605      	mov	r5, r0
   3e95a:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   3e95c:	f001 fb89 	bl	40072 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   3e960:	2d00      	cmp	r5, #0
   3e962:	db07      	blt.n	3e974 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   3e964:	42a8      	cmp	r0, r5
   3e966:	d905      	bls.n	3e974 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   3e968:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   3e96a:	4284      	cmp	r4, r0
   3e96c:	bf8c      	ite	hi
   3e96e:	2000      	movhi	r0, #0
   3e970:	2001      	movls	r0, #1
}
   3e972:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   3e974:	2000      	movs	r0, #0
   3e976:	e7fc      	b.n	3e972 <is_regular_addr_valid+0x1c>

0003e978 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   3e978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3e97c:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   3e97e:	f04f 0800 	mov.w	r8, #0
	const struct flash_driver_api *api = dev->api;
   3e982:	6883      	ldr	r3, [r0, #8]
{
   3e984:	460d      	mov	r5, r1
   3e986:	4616      	mov	r6, r2
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   3e988:	4669      	mov	r1, sp
   3e98a:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   3e98c:	f8c4 8000 	str.w	r8, [r4]
	info->index = 0U;
   3e990:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   3e994:	aa01      	add	r2, sp, #4
   3e996:	4798      	blx	r3

	while (layout_size--) {
   3e998:	e9dd 7c00 	ldrd	r7, ip, [sp]
   3e99c:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   3e99e:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   3e9a2:	4560      	cmp	r0, ip
   3e9a4:	d104      	bne.n	3e9b0 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   3e9a6:	f06f 0015 	mvn.w	r0, #21
}
   3e9aa:	b003      	add	sp, #12
   3e9ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   3e9b0:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   3e9b4:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   3e9b6:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   3e9b8:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   3e9bc:	b97d      	cbnz	r5, 3e9de <flash_get_page_info+0x66>
			index_jmp = index - info->index;
   3e9be:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   3e9c0:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
		if (index_jmp < layout->pages_count) {
   3e9c4:	3001      	adds	r0, #1
		index_jmp = MIN(index_jmp, layout->pages_count);
   3e9c6:	4543      	cmp	r3, r8
   3e9c8:	bf28      	it	cs
   3e9ca:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   3e9cc:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   3e9d0:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   3e9d2:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   3e9d4:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   3e9d6:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   3e9d8:	d9e3      	bls.n	3e9a2 <flash_get_page_info+0x2a>
			return 0;
   3e9da:	2000      	movs	r0, #0
   3e9dc:	e7e5      	b.n	3e9aa <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   3e9de:	1aab      	subs	r3, r5, r2
   3e9e0:	fbb3 f3f9 	udiv	r3, r3, r9
   3e9e4:	e7ec      	b.n	3e9c0 <flash_get_page_info+0x48>

0003e9e6 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   3e9e6:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   3e9e8:	2200      	movs	r2, #0
   3e9ea:	f7ff bfc5 	b.w	3e978 <flash_get_page_info>

0003e9ee <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   3e9ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   3e9f2:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   3e9f4:	6883      	ldr	r3, [r0, #8]
{
   3e9f6:	b086      	sub	sp, #24
   3e9f8:	4688      	mov	r8, r1
   3e9fa:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   3e9fc:	691b      	ldr	r3, [r3, #16]
   3e9fe:	aa02      	add	r2, sp, #8
   3ea00:	a901      	add	r1, sp, #4
   3ea02:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   3ea04:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   3ea06:	4625      	mov	r5, r4
   3ea08:	9b02      	ldr	r3, [sp, #8]
   3ea0a:	42ab      	cmp	r3, r5
   3ea0c:	d802      	bhi.n	3ea14 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   3ea0e:	b006      	add	sp, #24
   3ea10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   3ea14:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   3ea16:	9f01      	ldr	r7, [sp, #4]
   3ea18:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   3ea1c:	687b      	ldr	r3, [r7, #4]
   3ea1e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3ea20:	683a      	ldr	r2, [r7, #0]
   3ea22:	eb0a 0306 	add.w	r3, sl, r6
   3ea26:	42b2      	cmp	r2, r6
   3ea28:	d802      	bhi.n	3ea30 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   3ea2a:	469a      	mov	sl, r3
   3ea2c:	3501      	adds	r5, #1
   3ea2e:	e7eb      	b.n	3ea08 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   3ea30:	4649      	mov	r1, r9
   3ea32:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   3ea34:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   3ea36:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   3ea38:	47c0      	blx	r8
   3ea3a:	2800      	cmp	r0, #0
   3ea3c:	d0e7      	beq.n	3ea0e <flash_page_foreach+0x20>
			off += page_info.size;
   3ea3e:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3ea40:	3601      	adds	r6, #1
			off += page_info.size;
   3ea42:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   3ea44:	e7ec      	b.n	3ea20 <flash_page_foreach+0x32>

0003ea46 <uarte_nrfx_config_get>:
{
   3ea46:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   3ea48:	6902      	ldr	r2, [r0, #16]
   3ea4a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   3ea4e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3ea52:	2000      	movs	r0, #0
   3ea54:	4770      	bx	lr

0003ea56 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   3ea56:	6843      	ldr	r3, [r0, #4]
   3ea58:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3ea5a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3ea5e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3ea62:	4770      	bx	lr

0003ea64 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   3ea64:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   3ea66:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   3ea68:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ea6a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3ea6e:	b148      	cbz	r0, 3ea84 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ea70:	2000      	movs	r0, #0
	*c = data->rx_data;
   3ea72:	7d52      	ldrb	r2, [r2, #21]
   3ea74:	700a      	strb	r2, [r1, #0]
   3ea76:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3ea7a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ea7e:	2201      	movs	r2, #1
   3ea80:	601a      	str	r2, [r3, #0]
	return 0;
   3ea82:	4770      	bx	lr
		return -1;
   3ea84:	f04f 30ff 	mov.w	r0, #4294967295
}
   3ea88:	4770      	bx	lr

0003ea8a <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3ea8a:	2a00      	cmp	r2, #0
   3ea8c:	dd0f      	ble.n	3eaae <uarte_nrfx_fifo_read+0x24>
	return config->uarte_regs;
   3ea8e:	6843      	ldr	r3, [r0, #4]
   3ea90:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ea92:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3ea96:	b153      	cbz	r3, 3eaae <uarte_nrfx_fifo_read+0x24>
	const struct uarte_nrfx_data *data = dev->data;
   3ea98:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ea9a:	2000      	movs	r0, #0
   3ea9c:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   3eaa0:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3eaa4:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   3eaa6:	7d5b      	ldrb	r3, [r3, #21]
   3eaa8:	700b      	strb	r3, [r1, #0]
   3eaaa:	6010      	str	r0, [r2, #0]
}
   3eaac:	4770      	bx	lr
	int num_rx = 0;
   3eaae:	2000      	movs	r0, #0
   3eab0:	4770      	bx	lr

0003eab2 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   3eab2:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   3eab4:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   3eab6:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   3eab8:	f04f 0020 	mov.w	r0, #32
   3eabc:	f3ef 8311 	mrs	r3, BASEPRI
   3eac0:	f380 8812 	msr	BASEPRI_MAX, r0
   3eac4:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   3eac8:	2000      	movs	r0, #0
   3eaca:	68c9      	ldr	r1, [r1, #12]
   3eacc:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   3eace:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   3ead2:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   3ead6:	f383 8811 	msr	BASEPRI, r3
   3eada:	f3bf 8f6f 	isb	sy
}
   3eade:	4770      	bx	lr

0003eae0 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   3eae0:	2201      	movs	r2, #1
   3eae2:	6903      	ldr	r3, [r0, #16]
   3eae4:	68db      	ldr	r3, [r3, #12]
   3eae6:	739a      	strb	r2, [r3, #14]
}
   3eae8:	4770      	bx	lr

0003eaea <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   3eaea:	6903      	ldr	r3, [r0, #16]
   3eaec:	68db      	ldr	r3, [r3, #12]
   3eaee:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3eaf0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   3eaf4:	b962      	cbnz	r2, 3eb10 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   3eaf6:	6842      	ldr	r2, [r0, #4]
   3eaf8:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3eafa:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   3eafe:	b140      	cbz	r0, 3eb12 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   3eb00:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   3eb04:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   3eb08:	d003      	beq.n	3eb12 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3eb0a:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   3eb0c:	6119      	str	r1, [r3, #16]
   3eb0e:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3eb10:	2000      	movs	r0, #0
}
   3eb12:	4770      	bx	lr

0003eb14 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   3eb14:	6843      	ldr	r3, [r0, #4]
   3eb16:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3eb18:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   3eb1c:	3800      	subs	r0, #0
   3eb1e:	bf18      	it	ne
   3eb20:	2001      	movne	r0, #1
   3eb22:	4770      	bx	lr

0003eb24 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   3eb24:	2210      	movs	r2, #16
	return config->uarte_regs;
   3eb26:	6843      	ldr	r3, [r0, #4]
   3eb28:	681b      	ldr	r3, [r3, #0]
   3eb2a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3eb2e:	4770      	bx	lr

0003eb30 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   3eb30:	2210      	movs	r2, #16
	return config->uarte_regs;
   3eb32:	6843      	ldr	r3, [r0, #4]
   3eb34:	681b      	ldr	r3, [r3, #0]
   3eb36:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3eb3a:	4770      	bx	lr

0003eb3c <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   3eb3c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3eb40:	6843      	ldr	r3, [r0, #4]
   3eb42:	681b      	ldr	r3, [r3, #0]
   3eb44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3eb48:	4770      	bx	lr

0003eb4a <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   3eb4a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3eb4e:	6843      	ldr	r3, [r0, #4]
   3eb50:	681b      	ldr	r3, [r3, #0]
   3eb52:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3eb56:	4770      	bx	lr

0003eb58 <uarte_nrfx_irq_update>:
}
   3eb58:	2001      	movs	r0, #1
   3eb5a:	4770      	bx	lr

0003eb5c <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   3eb5c:	6903      	ldr	r3, [r0, #16]
   3eb5e:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   3eb60:	e9c3 1200 	strd	r1, r2, [r3]
}
   3eb64:	4770      	bx	lr

0003eb66 <uarte_nrfx_irq_is_pending>:
{
   3eb66:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   3eb68:	6843      	ldr	r3, [r0, #4]
{
   3eb6a:	4604      	mov	r4, r0
	return config->uarte_regs;
   3eb6c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   3eb6e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   3eb72:	025b      	lsls	r3, r3, #9
   3eb74:	d405      	bmi.n	3eb82 <uarte_nrfx_irq_is_pending+0x1c>
   3eb76:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   3eb7a:	f010 0010 	ands.w	r0, r0, #16
   3eb7e:	d106      	bne.n	3eb8e <uarte_nrfx_irq_is_pending+0x28>
}
   3eb80:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   3eb82:	f7ff ffb2 	bl	3eaea <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   3eb86:	2800      	cmp	r0, #0
   3eb88:	d0f5      	beq.n	3eb76 <uarte_nrfx_irq_is_pending+0x10>
		||
   3eb8a:	2001      	movs	r0, #1
   3eb8c:	e7f8      	b.n	3eb80 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   3eb8e:	4620      	mov	r0, r4
   3eb90:	f7ff ffc0 	bl	3eb14 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   3eb94:	3800      	subs	r0, #0
   3eb96:	bf18      	it	ne
   3eb98:	2001      	movne	r0, #1
   3eb9a:	e7f1      	b.n	3eb80 <uarte_nrfx_irq_is_pending+0x1a>

0003eb9c <tx_start.isra.0>:
	return config->uarte_regs;
   3eb9c:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3eb9e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3eba2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3eba6:	2200      	movs	r2, #0
   3eba8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   3ebac:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3ebb0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   3ebb4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3ebb8:	6842      	ldr	r2, [r0, #4]
   3ebba:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3ebbc:	bf41      	itttt	mi
   3ebbe:	2208      	movmi	r2, #8
   3ebc0:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   3ebc4:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   3ebc8:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ebcc:	2201      	movs	r2, #1
   3ebce:	609a      	str	r2, [r3, #8]
}
   3ebd0:	4770      	bx	lr

0003ebd2 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   3ebd2:	6802      	ldr	r2, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ebd4:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3ebd8:	b943      	cbnz	r3, 3ebec <is_tx_ready.isra.0+0x1a>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   3ebda:	6841      	ldr	r1, [r0, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3ebdc:	0789      	lsls	r1, r1, #30
   3ebde:	d407      	bmi.n	3ebf0 <is_tx_ready.isra.0+0x1e>
   3ebe0:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   3ebe4:	3800      	subs	r0, #0
   3ebe6:	bf18      	it	ne
   3ebe8:	2001      	movne	r0, #1
   3ebea:	4770      	bx	lr
   3ebec:	2001      	movs	r0, #1
   3ebee:	4770      	bx	lr
   3ebf0:	4618      	mov	r0, r3
}
   3ebf2:	4770      	bx	lr

0003ebf4 <uarte_nrfx_fifo_fill>:
{
   3ebf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   3ebf6:	6906      	ldr	r6, [r0, #16]
{
   3ebf8:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   3ebfa:	68f3      	ldr	r3, [r6, #12]
   3ebfc:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3ebfe:	3310      	adds	r3, #16
   3ec00:	4294      	cmp	r4, r2
   3ec02:	bfa8      	it	ge
   3ec04:	4614      	movge	r4, r2
   3ec06:	2201      	movs	r2, #1
   3ec08:	e8d3 0fef 	ldaex	r0, [r3]
   3ec0c:	2800      	cmp	r0, #0
   3ec0e:	d103      	bne.n	3ec18 <uarte_nrfx_fifo_fill+0x24>
   3ec10:	e8c3 2fe7 	stlex	r7, r2, [r3]
   3ec14:	2f00      	cmp	r7, #0
   3ec16:	d1f7      	bne.n	3ec08 <uarte_nrfx_fifo_fill+0x14>
   3ec18:	bf0c      	ite	eq
   3ec1a:	4613      	moveq	r3, r2
   3ec1c:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   3ec1e:	d01d      	beq.n	3ec5c <uarte_nrfx_fifo_fill+0x68>
		return 0;
   3ec20:	461c      	mov	r4, r3
}
   3ec22:	4620      	mov	r0, r4
   3ec24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   3ec26:	68f2      	ldr	r2, [r6, #12]
   3ec28:	5cc8      	ldrb	r0, [r1, r3]
   3ec2a:	6892      	ldr	r2, [r2, #8]
   3ec2c:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   3ec2e:	3301      	adds	r3, #1
   3ec30:	42a3      	cmp	r3, r4
   3ec32:	dbf8      	blt.n	3ec26 <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
   3ec34:	f04f 0320 	mov.w	r3, #32
   3ec38:	f3ef 8711 	mrs	r7, BASEPRI
   3ec3c:	f383 8812 	msr	BASEPRI_MAX, r3
   3ec40:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   3ec44:	6868      	ldr	r0, [r5, #4]
   3ec46:	f7ff ffc4 	bl	3ebd2 <is_tx_ready.isra.0>
   3ec4a:	68f3      	ldr	r3, [r6, #12]
   3ec4c:	b940      	cbnz	r0, 3ec60 <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
   3ec4e:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   3ec50:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   3ec52:	f387 8811 	msr	BASEPRI, r7
   3ec56:	f3bf 8f6f 	isb	sy
	return len;
   3ec5a:	e7e2      	b.n	3ec22 <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
   3ec5c:	2300      	movs	r3, #0
   3ec5e:	e7e7      	b.n	3ec30 <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
   3ec60:	4622      	mov	r2, r4
   3ec62:	6899      	ldr	r1, [r3, #8]
   3ec64:	6868      	ldr	r0, [r5, #4]
   3ec66:	f7ff ff99 	bl	3eb9c <tx_start.isra.0>
   3ec6a:	e7f2      	b.n	3ec52 <uarte_nrfx_fifo_fill+0x5e>

0003ec6c <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   3ec6c:	6842      	ldr	r2, [r0, #4]
{
   3ec6e:	b410      	push	{r4}
	return config->uarte_regs;
   3ec70:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   3ec72:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   3ec76:	05c9      	lsls	r1, r1, #23
   3ec78:	d518      	bpl.n	3ecac <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ec7a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3ec7e:	b1a9      	cbz	r1, 3ecac <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   3ec80:	f04f 0420 	mov.w	r4, #32
   3ec84:	f3ef 8111 	mrs	r1, BASEPRI
   3ec88:	f384 8812 	msr	BASEPRI_MAX, r4
   3ec8c:	f3bf 8f6f 	isb	sy
   3ec90:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3ec94:	b134      	cbz	r4, 3eca4 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ec96:	2400      	movs	r4, #0
   3ec98:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   3ec9c:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3eca0:	2401      	movs	r4, #1
   3eca2:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   3eca4:	f381 8811 	msr	BASEPRI, r1
   3eca8:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3ecac:	6852      	ldr	r2, [r2, #4]
   3ecae:	06d2      	lsls	r2, r2, #27
   3ecb0:	d51a      	bpl.n	3ece8 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   3ecb2:	f04f 0220 	mov.w	r2, #32
   3ecb6:	f3ef 8111 	mrs	r1, BASEPRI
   3ecba:	f382 8812 	msr	BASEPRI_MAX, r2
   3ecbe:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ecc2:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3ecc6:	b112      	cbz	r2, 3ecce <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3ecc8:	2200      	movs	r2, #0
   3ecca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   3ecce:	6902      	ldr	r2, [r0, #16]
   3ecd0:	68d2      	ldr	r2, [r2, #12]
   3ecd2:	b10a      	cbz	r2, 3ecd8 <uarte_nrfx_isr_int+0x6c>
   3ecd4:	6912      	ldr	r2, [r2, #16]
   3ecd6:	b91a      	cbnz	r2, 3ece0 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   3ecd8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   3ecdc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   3ece0:	f381 8811 	msr	BASEPRI, r1
   3ece4:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   3ece8:	6902      	ldr	r2, [r0, #16]
   3ecea:	68d2      	ldr	r2, [r2, #12]
   3ecec:	b15a      	cbz	r2, 3ed06 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ecee:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3ecf2:	b159      	cbz	r1, 3ed0c <uarte_nrfx_isr_int+0xa0>
		data->int_driven->fifo_fill_lock = 0;
   3ecf4:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   3ecf6:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   3ecf8:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   3ecfa:	b13c      	cbz	r4, 3ed0c <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   3ecfc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   3ed00:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   3ed04:	7391      	strb	r1, [r2, #14]
}
   3ed06:	f85d 4b04 	ldr.w	r4, [sp], #4
   3ed0a:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ed0c:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3ed10:	b121      	cbz	r1, 3ed1c <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ed12:	2100      	movs	r1, #0
   3ed14:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   3ed18:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   3ed1c:	6813      	ldr	r3, [r2, #0]
   3ed1e:	2b00      	cmp	r3, #0
   3ed20:	d0f1      	beq.n	3ed06 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3ed22:	6851      	ldr	r1, [r2, #4]
}
   3ed24:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3ed28:	4718      	bx	r3

0003ed2a <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   3ed2a:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   3ed2c:	f002 fc1e 	bl	4156c <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   3ed30:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   3ed32:	bf18      	it	ne
   3ed34:	f06f 0015 	mvnne.w	r0, #21
   3ed38:	bd08      	pop	{r3, pc}

0003ed3a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   3ed3a:	4770      	bx	lr

0003ed3c <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   3ed3c:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   3ed3e:	6843      	ldr	r3, [r0, #4]
   3ed40:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   3ed42:	7a03      	ldrb	r3, [r0, #8]
   3ed44:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   3ed48:	3b01      	subs	r3, #1
   3ed4a:	00db      	lsls	r3, r3, #3
   3ed4c:	6845      	ldr	r5, [r0, #4]
   3ed4e:	6814      	ldr	r4, [r2, #0]
   3ed50:	441d      	add	r5, r3
   3ed52:	42ac      	cmp	r4, r5
   3ed54:	d902      	bls.n	3ed5c <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   3ed56:	f06f 0001 	mvn.w	r0, #1
}
   3ed5a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   3ed5c:	7965      	ldrb	r5, [r4, #5]
   3ed5e:	428d      	cmp	r5, r1
   3ed60:	d002      	beq.n	3ed68 <pinctrl_lookup_state+0x2c>
		(*state)++;
   3ed62:	3408      	adds	r4, #8
   3ed64:	6014      	str	r4, [r2, #0]
   3ed66:	e7f1      	b.n	3ed4c <pinctrl_lookup_state+0x10>
			return 0;
   3ed68:	2000      	movs	r0, #0
   3ed6a:	e7f6      	b.n	3ed5a <pinctrl_lookup_state+0x1e>

0003ed6c <nrf_gpio_pin_clear>:
{
   3ed6c:	b507      	push	{r0, r1, r2, lr}
   3ed6e:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3ed70:	a801      	add	r0, sp, #4
   3ed72:	f7e6 fc93 	bl	2569c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3ed76:	2301      	movs	r3, #1
   3ed78:	9a01      	ldr	r2, [sp, #4]
   3ed7a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   3ed7c:	60c3      	str	r3, [r0, #12]
}
   3ed7e:	b003      	add	sp, #12
   3ed80:	f85d fb04 	ldr.w	pc, [sp], #4

0003ed84 <nrf_gpio_pin_set>:
{
   3ed84:	b507      	push	{r0, r1, r2, lr}
   3ed86:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3ed88:	a801      	add	r0, sp, #4
   3ed8a:	f7e6 fc87 	bl	2569c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3ed8e:	2301      	movs	r3, #1
   3ed90:	9a01      	ldr	r2, [sp, #4]
   3ed92:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   3ed94:	6083      	str	r3, [r0, #8]
}
   3ed96:	b003      	add	sp, #12
   3ed98:	f85d fb04 	ldr.w	pc, [sp], #4

0003ed9c <nrf_gpio_pin_write>:
    if (value == 0)
   3ed9c:	b909      	cbnz	r1, 3eda2 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   3ed9e:	f7ff bfe5 	b.w	3ed6c <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   3eda2:	f7ff bfef 	b.w	3ed84 <nrf_gpio_pin_set>

0003eda6 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
   3eda6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   3eda8:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
{
   3edac:	4604      	mov	r4, r0
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3edae:	2b00      	cmp	r3, #0
   3edb0:	bf0c      	ite	eq
   3edb2:	460e      	moveq	r6, r1
   3edb4:	2600      	movne	r6, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   3edb6:	f000 033f 	and.w	r3, r0, #63	; 0x3f
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3edba:	bf0c      	ite	eq
   3edbc:	4615      	moveq	r5, r2
   3edbe:	2501      	movne	r5, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3edc0:	a801      	add	r0, sp, #4
   3edc2:	9301      	str	r3, [sp, #4]
   3edc4:	f7e6 fc6a 	bl	2569c <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3edc8:	f3c4 1181 	ubfx	r1, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   3edcc:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
    reg->PIN_CNF[pin_number] = cnf;
   3edd0:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3edd2:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
   3edd6:	ea44 0106 	orr.w	r1, r4, r6
   3edda:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   3edde:	3380      	adds	r3, #128	; 0x80
   3ede0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
   3ede4:	b002      	add	sp, #8
   3ede6:	bd70      	pop	{r4, r5, r6, pc}

0003ede8 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   3ede8:	b570      	push	{r4, r5, r6, lr}
   3edea:	4615      	mov	r5, r2
   3edec:	4604      	mov	r4, r0
   3edee:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3edf2:	42a6      	cmp	r6, r4
   3edf4:	d101      	bne.n	3edfa <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   3edf6:	2000      	movs	r0, #0
}
   3edf8:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   3edfa:	6823      	ldr	r3, [r4, #0]
   3edfc:	0c1a      	lsrs	r2, r3, #16
   3edfe:	2a19      	cmp	r2, #25
   3ee00:	d869      	bhi.n	3eed6 <pinctrl_configure_pins+0xee>
   3ee02:	e8df f002 	tbb	[pc, r2]
   3ee06:	180d      	.short	0x180d
   3ee08:	34243e1f 	.word	0x34243e1f
   3ee0c:	6868683e 	.word	0x6868683e
   3ee10:	68484368 	.word	0x68484368
   3ee14:	68686868 	.word	0x68686868
   3ee18:	68686868 	.word	0x68686868
   3ee1c:	635e594d 	.word	0x635e594d
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   3ee20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ee24:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   3ee28:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
   3ee2a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3ee2e:	f7ff ffa9 	bl	3ed84 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ee32:	2201      	movs	r2, #1
   3ee34:	e004      	b.n	3ee40 <pinctrl_configure_pins+0x58>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   3ee36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ee3a:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3ee3e:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ee40:	4611      	mov	r1, r2
   3ee42:	e00f      	b.n	3ee64 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   3ee44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ee48:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   3ee4c:	e7ec      	b.n	3ee28 <pinctrl_configure_pins+0x40>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   3ee4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ee52:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   3ee56:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   3ee58:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3ee5c:	f7ff ff86 	bl	3ed6c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ee60:	2200      	movs	r2, #0
   3ee62:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ee64:	6820      	ldr	r0, [r4, #0]
   3ee66:	f7ff ff9e 	bl	3eda6 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3ee6a:	3404      	adds	r4, #4
   3ee6c:	e7c1      	b.n	3edf2 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   3ee6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ee72:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   3ee76:	6820      	ldr	r0, [r4, #0]
   3ee78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3ee7c:	f7ff ff76 	bl	3ed6c <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ee80:	e7d7      	b.n	3ee32 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   3ee82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ee86:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3ee8a:	e7d8      	b.n	3ee3e <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   3ee8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ee90:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3ee94:	e7d3      	b.n	3ee3e <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   3ee96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ee9a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   3ee9e:	e7ce      	b.n	3ee3e <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   3eea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3eea4:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   3eea8:	6820      	ldr	r0, [r4, #0]
   3eeaa:	f3c0 3140 	ubfx	r1, r0, #13, #1
   3eeae:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3eeb2:	f7ff ff73 	bl	3ed9c <nrf_gpio_pin_write>
   3eeb6:	e7bc      	b.n	3ee32 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   3eeb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3eebc:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   3eec0:	e7f2      	b.n	3eea8 <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   3eec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3eec6:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   3eeca:	e7ed      	b.n	3eea8 <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   3eecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3eed0:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   3eed4:	e7e8      	b.n	3eea8 <pinctrl_configure_pins+0xc0>
		switch (NRF_GET_FUN(pins[i])) {
   3eed6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3eeda:	e78d      	b.n	3edf8 <pinctrl_configure_pins+0x10>

0003eedc <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   3eedc:	f002 ba03 	b.w	412e6 <z_impl_k_busy_wait>

0003eee0 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   3eee0:	f002 b929 	b.w	41136 <k_is_in_isr>

0003eee4 <nrf_modem_os_sem_count_get>:
}
   3eee4:	6880      	ldr	r0, [r0, #8]
   3eee6:	4770      	bx	lr

0003eee8 <rpc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   3eee8:	4668      	mov	r0, sp
   3eeea:	f020 0107 	bic.w	r1, r0, #7
   3eeee:	468d      	mov	sp, r1
   3eef0:	b501      	push	{r0, lr}
	nrf_modem_application_irq_handler();
   3eef2:	f7f5 f87d 	bl	33ff0 <nrf_modem_application_irq_handler>
	nrf_modem_os_event_notify();
   3eef6:	f7e6 fe25 	bl	25b44 <nrf_modem_os_event_notify>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3eefa:	f7e3 ff0f 	bl	22d1c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3eefe:	f7e4 f827 	bl	22f50 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   3ef02:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3ef06:	4685      	mov	sp, r0
   3ef08:	4770      	bx	lr

0003ef0a <read_task_create>:
{
   3ef0a:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(APPLICATION_IRQ, APPLICATION_IRQ_PRIORITY,
   3ef0c:	201c      	movs	r0, #28
   3ef0e:	2200      	movs	r2, #0
   3ef10:	2106      	movs	r1, #6
   3ef12:	f7e3 fedd 	bl	22cd0 <z_arm_irq_priority_set>
}
   3ef16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(APPLICATION_IRQ);
   3ef1a:	201c      	movs	r0, #28
   3ef1c:	f7e3 bea6 	b.w	22c6c <arch_irq_enable>

0003ef20 <nrf_modem_os_trace_put>:
	}
#endif /* CONFIG_NRF_MODEM_LIB_TRACE_THREAD_PROCESSING */

#endif /* CONFIG_NRF_MODEM_LIB_TRACE_ENABLED */
	return 0;
}
   3ef20:	2000      	movs	r0, #0
   3ef22:	4770      	bx	lr

0003ef24 <z_to_nrf_flags>:
{
   3ef24:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   3ef26:	f000 0040 	and.w	r0, r0, #64	; 0x40
	if (z_flags & MSG_PEEK) {
   3ef2a:	079a      	lsls	r2, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   3ef2c:	bf48      	it	mi
   3ef2e:	f040 0002 	orrmi.w	r0, r0, #2
	if (z_flags & MSG_WAITALL) {
   3ef32:	05db      	lsls	r3, r3, #23
		nrf_flags |= NRF_MSG_WAITALL;
   3ef34:	bf48      	it	mi
   3ef36:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
}
   3ef3a:	4770      	bx	lr

0003ef3c <nrf_to_z_protocol>:
	switch (proto) {
   3ef3c:	2811      	cmp	r0, #17
   3ef3e:	d005      	beq.n	3ef4c <nrf_to_z_protocol+0x10>
   3ef40:	dc05      	bgt.n	3ef4e <nrf_to_z_protocol+0x12>
   3ef42:	b118      	cbz	r0, 3ef4c <nrf_to_z_protocol+0x10>
		return -EPROTONOSUPPORT;
   3ef44:	2806      	cmp	r0, #6
   3ef46:	bf18      	it	ne
   3ef48:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
}
   3ef4c:	4770      	bx	lr
	switch (proto) {
   3ef4e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   3ef52:	d0fb      	beq.n	3ef4c <nrf_to_z_protocol+0x10>
   3ef54:	f240 1311 	movw	r3, #273	; 0x111
		return -EPROTONOSUPPORT;
   3ef58:	4298      	cmp	r0, r3
   3ef5a:	e7f4      	b.n	3ef46 <nrf_to_z_protocol+0xa>

0003ef5c <nrf91_socket_offload_getsockopt>:
{
   3ef5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ef60:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   3ef62:	2300      	movs	r3, #0
{
   3ef64:	b086      	sub	sp, #24
   3ef66:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   3ef6a:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3ef6e:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   3ef72:	2901      	cmp	r1, #1
{
   3ef74:	460e      	mov	r6, r1
   3ef76:	4615      	mov	r5, r2
	int sd = OBJ_TO_SD(obj);
   3ef78:	6807      	ldr	r7, [r0, #0]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3ef7a:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   3ef7c:	d002      	beq.n	3ef84 <nrf91_socket_offload_getsockopt+0x28>
   3ef7e:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3ef82:	d13a      	bne.n	3effa <nrf91_socket_offload_getsockopt+0x9e>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3ef84:	4629      	mov	r1, r5
   3ef86:	4630      	mov	r0, r6
   3ef88:	aa02      	add	r2, sp, #8
   3ef8a:	f7e6 fe33 	bl	25bf4 <z_to_nrf_optname>
   3ef8e:	2800      	cmp	r0, #0
   3ef90:	db33      	blt.n	3effa <nrf91_socket_offload_getsockopt+0x9e>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3ef92:	2e01      	cmp	r6, #1
   3ef94:	d123      	bne.n	3efde <nrf91_socket_offload_getsockopt+0x82>
   3ef96:	f1a5 0314 	sub.w	r3, r5, #20
   3ef9a:	2b01      	cmp	r3, #1
   3ef9c:	d81f      	bhi.n	3efde <nrf91_socket_offload_getsockopt+0x82>
		nrf_optlen = sizeof(struct nrf_timeval);
   3ef9e:	2308      	movs	r3, #8
   3efa0:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   3efa2:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3efa4:	aa03      	add	r2, sp, #12
   3efa6:	4638      	mov	r0, r7
   3efa8:	9200      	str	r2, [sp, #0]
   3efaa:	4631      	mov	r1, r6
   3efac:	9a02      	ldr	r2, [sp, #8]
   3efae:	f001 fe15 	bl	40bdc <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   3efb2:	4607      	mov	r7, r0
   3efb4:	b978      	cbnz	r0, 3efd6 <nrf91_socket_offload_getsockopt+0x7a>
   3efb6:	b174      	cbz	r4, 3efd6 <nrf91_socket_offload_getsockopt+0x7a>
		*optlen = nrf_optlen;
   3efb8:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   3efba:	2e01      	cmp	r6, #1
		*optlen = nrf_optlen;
   3efbc:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   3efc0:	d109      	bne.n	3efd6 <nrf91_socket_offload_getsockopt+0x7a>
			if (optname == SO_ERROR) {
   3efc2:	2d04      	cmp	r5, #4
   3efc4:	d10d      	bne.n	3efe2 <nrf91_socket_offload_getsockopt+0x86>
				if (*(int *)optval != 0) {
   3efc6:	6820      	ldr	r0, [r4, #0]
   3efc8:	b128      	cbz	r0, 3efd6 <nrf91_socket_offload_getsockopt+0x7a>
					nrf_modem_os_errno_set(*(int *)optval);
   3efca:	f7e6 fcf5 	bl	259b8 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   3efce:	f7fe fcbd 	bl	3d94c <__errno>
   3efd2:	6803      	ldr	r3, [r0, #0]
   3efd4:	6023      	str	r3, [r4, #0]
}
   3efd6:	4638      	mov	r0, r7
   3efd8:	b006      	add	sp, #24
   3efda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3efde:	4623      	mov	r3, r4
   3efe0:	e7e0      	b.n	3efa4 <nrf91_socket_offload_getsockopt+0x48>
			} else if ((optname == SO_RCVTIMEO) ||
   3efe2:	3d14      	subs	r5, #20
   3efe4:	2d01      	cmp	r5, #1
   3efe6:	d8f6      	bhi.n	3efd6 <nrf91_socket_offload_getsockopt+0x7a>
					nrf_timeo.tv_sec;
   3efe8:	9b04      	ldr	r3, [sp, #16]
   3efea:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   3efee:	9b05      	ldr	r3, [sp, #20]
   3eff0:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   3eff2:	2310      	movs	r3, #16
   3eff4:	f8c8 3000 	str.w	r3, [r8]
   3eff8:	e7ed      	b.n	3efd6 <nrf91_socket_offload_getsockopt+0x7a>
	errno = ENOPROTOOPT;
   3effa:	f7fe fca7 	bl	3d94c <__errno>
   3effe:	236d      	movs	r3, #109	; 0x6d
	return retval;
   3f000:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   3f004:	6003      	str	r3, [r0, #0]
	return retval;
   3f006:	e7e6      	b.n	3efd6 <nrf91_socket_offload_getsockopt+0x7a>

0003f008 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   3f008:	6800      	ldr	r0, [r0, #0]
   3f00a:	f001 bc2a 	b.w	40862 <nrf_listen>

0003f00e <nrf91_socket_offload_freeaddrinfo>:
{
   3f00e:	b538      	push	{r3, r4, r5, lr}
   3f010:	4604      	mov	r4, r0
	while (next != NULL) {
   3f012:	b904      	cbnz	r4, 3f016 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   3f014:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   3f016:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   3f018:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   3f01a:	f002 fa41 	bl	414a0 <k_free>
		k_free(this);
   3f01e:	4620      	mov	r0, r4
   3f020:	f002 fa3e 	bl	414a0 <k_free>
		next = next->ai_next;
   3f024:	462c      	mov	r4, r5
   3f026:	e7f4      	b.n	3f012 <nrf91_socket_offload_freeaddrinfo+0x4>

0003f028 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   3f028:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   3f02a:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   3f02c:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3f02e:	4603      	mov	r3, r0
{
   3f030:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3f032:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3f036:	f101 0420 	add.w	r4, r1, #32
   3f03a:	f101 0210 	add.w	r2, r1, #16
   3f03e:	f852 5b04 	ldr.w	r5, [r2], #4
   3f042:	42a2      	cmp	r2, r4
   3f044:	f843 5b04 	str.w	r5, [r3], #4
   3f048:	d1f9      	bne.n	3f03e <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   3f04a:	6a0b      	ldr	r3, [r1, #32]
   3f04c:	7503      	strb	r3, [r0, #20]
}
   3f04e:	bd30      	pop	{r4, r5, pc}

0003f050 <z_to_nrf_ipv6>:
{
   3f050:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3f052:	2124      	movs	r1, #36	; 0x24
   3f054:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   3f056:	8841      	ldrh	r1, [r0, #2]
{
   3f058:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   3f05a:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3f05c:	2102      	movs	r1, #2
{
   3f05e:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   3f060:	6059      	str	r1, [r3, #4]
   3f062:	1d04      	adds	r4, r0, #4
   3f064:	f103 0610 	add.w	r6, r3, #16
   3f068:	f100 0714 	add.w	r7, r0, #20
   3f06c:	4635      	mov	r5, r6
   3f06e:	6820      	ldr	r0, [r4, #0]
   3f070:	6861      	ldr	r1, [r4, #4]
   3f072:	3408      	adds	r4, #8
   3f074:	c503      	stmia	r5!, {r0, r1}
   3f076:	42bc      	cmp	r4, r7
   3f078:	462e      	mov	r6, r5
   3f07a:	d1f7      	bne.n	3f06c <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   3f07c:	7d12      	ldrb	r2, [r2, #20]
   3f07e:	621a      	str	r2, [r3, #32]
}
   3f080:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003f082 <nrf91_socket_offload_sendto>:
{
   3f082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f086:	b08e      	sub	sp, #56	; 0x38
   3f088:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3f08a:	460f      	mov	r7, r1
   3f08c:	461d      	mov	r5, r3
	int sd = OBJ_TO_SD(obj);
   3f08e:	6806      	ldr	r6, [r0, #0]
	if (to == NULL) {
   3f090:	b964      	cbnz	r4, 3f0ac <nrf91_socket_offload_sendto+0x2a>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3f092:	4618      	mov	r0, r3
   3f094:	9203      	str	r2, [sp, #12]
   3f096:	f7ff ff45 	bl	3ef24 <z_to_nrf_flags>
   3f09a:	4603      	mov	r3, r0
   3f09c:	4630      	mov	r0, r6
   3f09e:	9a03      	ldr	r2, [sp, #12]
   3f0a0:	9415      	str	r4, [sp, #84]	; 0x54
}
   3f0a2:	b00e      	add	sp, #56	; 0x38
   3f0a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3f0a8:	f7f5 bcce 	b.w	34a48 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   3f0ac:	8823      	ldrh	r3, [r4, #0]
   3f0ae:	9203      	str	r2, [sp, #12]
   3f0b0:	2b01      	cmp	r3, #1
   3f0b2:	d116      	bne.n	3f0e2 <nrf91_socket_offload_sendto+0x60>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f0b4:	2710      	movs	r7, #16
	nrf_out->sin_port = ptr->sin_port;
   3f0b6:	8860      	ldrh	r0, [r4, #2]
	nrf_out->sin_family = NRF_AF_INET;
   3f0b8:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f0ba:	6863      	ldr	r3, [r4, #4]
	nrf_out->sin_port = ptr->sin_port;
   3f0bc:	f8ad 001c 	strh.w	r0, [sp, #28]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3f0c0:	4628      	mov	r0, r5
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f0c2:	9308      	str	r3, [sp, #32]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f0c4:	f88d 7014 	strb.w	r7, [sp, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3f0c8:	f7ff ff2c 	bl	3ef24 <z_to_nrf_flags>
   3f0cc:	9a03      	ldr	r2, [sp, #12]
   3f0ce:	4603      	mov	r3, r0
   3f0d0:	a805      	add	r0, sp, #20
   3f0d2:	9701      	str	r7, [sp, #4]
   3f0d4:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3f0d6:	4630      	mov	r0, r6
   3f0d8:	f7f5 fcb6 	bl	34a48 <nrf_sendto>
}
   3f0dc:	b00e      	add	sp, #56	; 0x38
   3f0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   3f0e2:	2b02      	cmp	r3, #2
   3f0e4:	d10f      	bne.n	3f106 <nrf91_socket_offload_sendto+0x84>
		z_to_nrf_ipv6(to, &ipv6);
   3f0e6:	f10d 0814 	add.w	r8, sp, #20
   3f0ea:	4641      	mov	r1, r8
   3f0ec:	4620      	mov	r0, r4
   3f0ee:	f7ff ffaf 	bl	3f050 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3f0f2:	4628      	mov	r0, r5
   3f0f4:	f7ff ff16 	bl	3ef24 <z_to_nrf_flags>
   3f0f8:	2124      	movs	r1, #36	; 0x24
   3f0fa:	4603      	mov	r3, r0
   3f0fc:	e9cd 8100 	strd	r8, r1, [sp]
   3f100:	9a03      	ldr	r2, [sp, #12]
   3f102:	4639      	mov	r1, r7
   3f104:	e7e7      	b.n	3f0d6 <nrf91_socket_offload_sendto+0x54>
	errno = ENOTSUP;
   3f106:	f7fe fc21 	bl	3d94c <__errno>
   3f10a:	2386      	movs	r3, #134	; 0x86
   3f10c:	6003      	str	r3, [r0, #0]
	return retval;
   3f10e:	f04f 30ff 	mov.w	r0, #4294967295
   3f112:	e7e3      	b.n	3f0dc <nrf91_socket_offload_sendto+0x5a>

0003f114 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3f114:	2300      	movs	r3, #0
{
   3f116:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3f118:	e9cd 3300 	strd	r3, r3, [sp]
   3f11c:	f7ff ffb1 	bl	3f082 <nrf91_socket_offload_sendto>
}
   3f120:	b003      	add	sp, #12
   3f122:	f85d fb04 	ldr.w	pc, [sp], #4

0003f126 <nrf91_socket_offload_connect>:
{
   3f126:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   3f128:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   3f12a:	8808      	ldrh	r0, [r1, #0]
{
   3f12c:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3f12e:	2801      	cmp	r0, #1
{
   3f130:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3f132:	d10e      	bne.n	3f152 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f134:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3f136:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f138:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f13a:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   3f13e:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3f142:	9002      	str	r0, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f144:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   3f146:	4620      	mov	r0, r4
   3f148:	a901      	add	r1, sp, #4
   3f14a:	f7f5 fbdb 	bl	34904 <nrf_connect>
}
   3f14e:	b00a      	add	sp, #40	; 0x28
   3f150:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3f152:	2802      	cmp	r0, #2
   3f154:	d105      	bne.n	3f162 <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   3f156:	4618      	mov	r0, r3
   3f158:	a901      	add	r1, sp, #4
   3f15a:	f7ff ff79 	bl	3f050 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   3f15e:	2224      	movs	r2, #36	; 0x24
   3f160:	e7f1      	b.n	3f146 <nrf91_socket_offload_connect+0x20>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   3f162:	4620      	mov	r0, r4
   3f164:	f7f5 fbce 	bl	34904 <nrf_connect>
		if (retval < 0) {
   3f168:	2800      	cmp	r0, #0
   3f16a:	daf0      	bge.n	3f14e <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   3f16c:	f7fe fbee 	bl	3d94c <__errno>
   3f170:	2386      	movs	r3, #134	; 0x86
   3f172:	6003      	str	r3, [r0, #0]
	return retval;
   3f174:	f04f 30ff 	mov.w	r0, #4294967295
   3f178:	e7e9      	b.n	3f14e <nrf91_socket_offload_connect+0x28>

0003f17a <nrf91_socket_offload_bind>:
{
   3f17a:	b510      	push	{r4, lr}
   3f17c:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3f17e:	8809      	ldrh	r1, [r1, #0]
	int sd = OBJ_TO_SD(obj);
   3f180:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   3f182:	2901      	cmp	r1, #1
{
   3f184:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3f186:	d10e      	bne.n	3f1a6 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f188:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3f18a:	8858      	ldrh	r0, [r3, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f18c:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f18e:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   3f192:	f8ad 000c 	strh.w	r0, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3f196:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f198:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3f19a:	4620      	mov	r0, r4
   3f19c:	a901      	add	r1, sp, #4
   3f19e:	f001 fb16 	bl	407ce <nrf_bind>
}
   3f1a2:	b00a      	add	sp, #40	; 0x28
   3f1a4:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3f1a6:	2902      	cmp	r1, #2
   3f1a8:	d105      	bne.n	3f1b6 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   3f1aa:	4618      	mov	r0, r3
   3f1ac:	a901      	add	r1, sp, #4
   3f1ae:	f7ff ff4f 	bl	3f050 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3f1b2:	2224      	movs	r2, #36	; 0x24
   3f1b4:	e7f1      	b.n	3f19a <nrf91_socket_offload_bind+0x20>
	errno = ENOTSUP;
   3f1b6:	f7fe fbc9 	bl	3d94c <__errno>
   3f1ba:	2386      	movs	r3, #134	; 0x86
   3f1bc:	6003      	str	r3, [r0, #0]
	return retval;
   3f1be:	f04f 30ff 	mov.w	r0, #4294967295
   3f1c2:	e7ee      	b.n	3f1a2 <nrf91_socket_offload_bind+0x28>

0003f1c4 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   3f1c4:	f7f7 bc12 	b.w	369ec <z_impl_k_mutex_lock>

0003f1c8 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   3f1c8:	f7f7 bce2 	b.w	36b90 <z_impl_k_mutex_unlock>

0003f1cc <nrf91_socket_offload_recvfrom>:
{
   3f1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f1d0:	4606      	mov	r6, r0
	if (ctx->lock) {
   3f1d2:	6840      	ldr	r0, [r0, #4]
{
   3f1d4:	b08f      	sub	sp, #60	; 0x3c
   3f1d6:	460c      	mov	r4, r1
   3f1d8:	e9dd 5918 	ldrd	r5, r9, [sp, #96]	; 0x60
   3f1dc:	4617      	mov	r7, r2
   3f1de:	4698      	mov	r8, r3
	if (ctx->lock) {
   3f1e0:	b108      	cbz	r0, 3f1e6 <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   3f1e2:	f7ff fff1 	bl	3f1c8 <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f1e6:	4640      	mov	r0, r8
   3f1e8:	f7ff fe9c 	bl	3ef24 <z_to_nrf_flags>
   3f1ec:	f8d6 a000 	ldr.w	sl, [r6]
   3f1f0:	4603      	mov	r3, r0
	if (from == NULL) {
   3f1f2:	b99d      	cbnz	r5, 3f21c <nrf91_socket_offload_recvfrom+0x50>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f1f4:	4621      	mov	r1, r4
   3f1f6:	463a      	mov	r2, r7
   3f1f8:	4650      	mov	r0, sl
   3f1fa:	e9cd 5500 	strd	r5, r5, [sp]
   3f1fe:	f001 fbfe 	bl	409fe <nrf_recvfrom>
   3f202:	4604      	mov	r4, r0
	if (ctx->lock) {
   3f204:	6870      	ldr	r0, [r6, #4]
   3f206:	b128      	cbz	r0, 3f214 <nrf91_socket_offload_recvfrom+0x48>
		k_mutex_lock(ctx->lock, K_FOREVER);
   3f208:	f04f 32ff 	mov.w	r2, #4294967295
   3f20c:	f04f 33ff 	mov.w	r3, #4294967295
   3f210:	f7ff ffd8 	bl	3f1c4 <k_mutex_lock.constprop.0.isra.0>
}
   3f214:	4620      	mov	r0, r4
   3f216:	b00f      	add	sp, #60	; 0x3c
   3f218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   3f21c:	f04f 0b24 	mov.w	fp, #36	; 0x24
   3f220:	f10d 0814 	add.w	r8, sp, #20
   3f224:	465a      	mov	r2, fp
   3f226:	2100      	movs	r1, #0
   3f228:	9003      	str	r0, [sp, #12]
   3f22a:	4640      	mov	r0, r8
   3f22c:	f002 f9e9 	bl	41602 <memset>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f230:	aa04      	add	r2, sp, #16
   3f232:	4621      	mov	r1, r4
   3f234:	e9cd 8200 	strd	r8, r2, [sp]
   3f238:	4650      	mov	r0, sl
   3f23a:	463a      	mov	r2, r7
   3f23c:	9b03      	ldr	r3, [sp, #12]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3f23e:	f8cd b010 	str.w	fp, [sp, #16]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f242:	f001 fbdc 	bl	409fe <nrf_recvfrom>
		if (retval < 0) {
   3f246:	1e04      	subs	r4, r0, #0
   3f248:	dbdc      	blt.n	3f204 <nrf91_socket_offload_recvfrom+0x38>
		if (cliaddr->sa_family == NRF_AF_INET) {
   3f24a:	9b06      	ldr	r3, [sp, #24]
   3f24c:	2b01      	cmp	r3, #1
   3f24e:	d109      	bne.n	3f264 <nrf91_socket_offload_recvfrom+0x98>
	ptr->sin_family = AF_INET;
   3f250:	802b      	strh	r3, [r5, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3f252:	9b08      	ldr	r3, [sp, #32]
	ptr->sin_port = nrf_in->sin_port;
   3f254:	f8bd 201c 	ldrh.w	r2, [sp, #28]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3f258:	606b      	str	r3, [r5, #4]
			*fromlen = sizeof(struct sockaddr_in);
   3f25a:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   3f25c:	806a      	strh	r2, [r5, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   3f25e:	f8c9 3000 	str.w	r3, [r9]
   3f262:	e7cf      	b.n	3f204 <nrf91_socket_offload_recvfrom+0x38>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   3f264:	2b02      	cmp	r3, #2
   3f266:	d1cd      	bne.n	3f204 <nrf91_socket_offload_recvfrom+0x38>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   3f268:	4641      	mov	r1, r8
   3f26a:	4628      	mov	r0, r5
   3f26c:	f7ff fedc 	bl	3f028 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3f270:	2318      	movs	r3, #24
   3f272:	e7f4      	b.n	3f25e <nrf91_socket_offload_recvfrom+0x92>

0003f274 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3f274:	2300      	movs	r3, #0
{
   3f276:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3f278:	e9cd 3300 	strd	r3, r3, [sp]
   3f27c:	f7ff ffa6 	bl	3f1cc <nrf91_socket_offload_recvfrom>
}
   3f280:	b003      	add	sp, #12
   3f282:	f85d fb04 	ldr.w	pc, [sp], #4

0003f286 <nrf91_socket_offload_close>:
{
   3f286:	b538      	push	{r3, r4, r5, lr}
   3f288:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   3f28a:	6800      	ldr	r0, [r0, #0]
   3f28c:	f001 fa6e 	bl	4076c <nrf_close>
	if (retval == 0) {
   3f290:	4604      	mov	r4, r0
   3f292:	b910      	cbnz	r0, 3f29a <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   3f294:	4628      	mov	r0, r5
   3f296:	f7e6 ffc9 	bl	2622c <release_ctx>
}
   3f29a:	4620      	mov	r0, r4
   3f29c:	bd38      	pop	{r3, r4, r5, pc}

0003f29e <nrf91_socket_offload_setsockopt>:
{
   3f29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   3f2a2:	2901      	cmp	r1, #1
{
   3f2a4:	b086      	sub	sp, #24
   3f2a6:	460c      	mov	r4, r1
   3f2a8:	4615      	mov	r5, r2
   3f2aa:	461e      	mov	r6, r3
   3f2ac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   3f2ae:	f8d0 8000 	ldr.w	r8, [r0]
	switch (z_in_level) {
   3f2b2:	d002      	beq.n	3f2ba <nrf91_socket_offload_setsockopt+0x1c>
   3f2b4:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3f2b8:	d122      	bne.n	3f300 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3f2ba:	4629      	mov	r1, r5
   3f2bc:	4620      	mov	r0, r4
   3f2be:	aa03      	add	r2, sp, #12
   3f2c0:	f7e6 fc98 	bl	25bf4 <z_to_nrf_optname>
   3f2c4:	2800      	cmp	r0, #0
   3f2c6:	db1b      	blt.n	3f300 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3f2c8:	2c01      	cmp	r4, #1
   3f2ca:	d112      	bne.n	3f2f2 <nrf91_socket_offload_setsockopt+0x54>
   3f2cc:	3d14      	subs	r5, #20
   3f2ce:	2d01      	cmp	r5, #1
   3f2d0:	d805      	bhi.n	3f2de <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(struct nrf_timeval);
   3f2d2:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3f2d4:	6833      	ldr	r3, [r6, #0]
   3f2d6:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3f2d8:	68b3      	ldr	r3, [r6, #8]
		nrf_optval = &nrf_timeo;
   3f2da:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3f2dc:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3f2de:	4633      	mov	r3, r6
   3f2e0:	4621      	mov	r1, r4
   3f2e2:	4640      	mov	r0, r8
   3f2e4:	9a03      	ldr	r2, [sp, #12]
   3f2e6:	9700      	str	r7, [sp, #0]
   3f2e8:	f7f5 fcb2 	bl	34c50 <nrf_setsockopt>
}
   3f2ec:	b006      	add	sp, #24
   3f2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3f2f2:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   3f2f6:	d1f2      	bne.n	3f2de <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   3f2f8:	2d0a      	cmp	r5, #10
   3f2fa:	bf08      	it	eq
   3f2fc:	2704      	moveq	r7, #4
   3f2fe:	e7ee      	b.n	3f2de <nrf91_socket_offload_setsockopt+0x40>
	errno = ENOPROTOOPT;
   3f300:	f7fe fb24 	bl	3d94c <__errno>
   3f304:	236d      	movs	r3, #109	; 0x6d
   3f306:	6003      	str	r3, [r0, #0]
	return retval;
   3f308:	f04f 30ff 	mov.w	r0, #4294967295
   3f30c:	e7ee      	b.n	3f2ec <nrf91_socket_offload_setsockopt+0x4e>

0003f30e <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable != NULL) {
   3f30e:	6883      	ldr	r3, [r0, #8]
   3f310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3f312:	b103      	cbz	r3, 3f316 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   3f314:	4718      	bx	r3
}
   3f316:	4770      	bx	lr

0003f318 <response_handler>:
	write_uart_string(response);
   3f318:	f7e7 b928 	b.w	2656c <write_uart_string>

0003f31c <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   3f31c:	280d      	cmp	r0, #13
   3f31e:	d004      	beq.n	3f32a <is_lfcr+0xe>
   3f320:	f1a0 030a 	sub.w	r3, r0, #10
   3f324:	4258      	negs	r0, r3
   3f326:	4158      	adcs	r0, r3
   3f328:	4770      	bx	lr
		return true;
   3f32a:	2001      	movs	r0, #1
}
   3f32c:	4770      	bx	lr

0003f32e <skip_command_prefix>:
{
   3f32e:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   3f330:	6801      	ldr	r1, [r0, #0]
{
   3f332:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   3f334:	1c8b      	adds	r3, r1, #2
   3f336:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   3f338:	788c      	ldrb	r4, [r1, #2]
   3f33a:	4620      	mov	r0, r4
   3f33c:	f7ff ffee 	bl	3f31c <is_lfcr>
   3f340:	b910      	cbnz	r0, 3f348 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3f342:	b10c      	cbz	r4, 3f348 <skip_command_prefix+0x1a>
	(*cmd)++;
   3f344:	3103      	adds	r1, #3
   3f346:	6011      	str	r1, [r2, #0]
}
   3f348:	bd10      	pop	{r4, pc}

0003f34a <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   3f34a:	6813      	ldr	r3, [r2, #0]
   3f34c:	f7e7 bc7a 	b.w	26c44 <at_parser_max_params_from_str>

0003f350 <at_params_list_init>:
{
   3f350:	b538      	push	{r3, r4, r5, lr}
   3f352:	460d      	mov	r5, r1
	if (list == NULL) {
   3f354:	4604      	mov	r4, r0
   3f356:	b140      	cbz	r0, 3f36a <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   3f358:	2110      	movs	r1, #16
   3f35a:	4628      	mov	r0, r5
   3f35c:	f002 f8ab 	bl	414b6 <k_calloc>
   3f360:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   3f362:	b128      	cbz	r0, 3f370 <at_params_list_init+0x20>
	return 0;
   3f364:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   3f366:	6025      	str	r5, [r4, #0]
}
   3f368:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3f36a:	f06f 0015 	mvn.w	r0, #21
   3f36e:	e7fb      	b.n	3f368 <at_params_list_init+0x18>
		return -ENOMEM;
   3f370:	f06f 000b 	mvn.w	r0, #11
   3f374:	e7f8      	b.n	3f368 <at_params_list_init+0x18>

0003f376 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   3f376:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3f378:	4604      	mov	r4, r0
   3f37a:	b148      	cbz	r0, 3f390 <at_params_list_free+0x1a>
   3f37c:	6843      	ldr	r3, [r0, #4]
   3f37e:	b13b      	cbz	r3, 3f390 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   3f380:	2500      	movs	r5, #0
	at_params_list_clear(list);
   3f382:	f7e7 fd5d 	bl	26e40 <at_params_list_clear>
	k_free(list->params);
   3f386:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   3f388:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   3f38a:	f002 f889 	bl	414a0 <k_free>
	list->params = NULL;
   3f38e:	6065      	str	r5, [r4, #4]
}
   3f390:	bd38      	pop	{r3, r4, r5, pc}

0003f392 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   3f392:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   3f394:	b910      	cbnz	r0, 3f39c <at_params_empty_put+0xa>
		return -EINVAL;
   3f396:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   3f39a:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   3f39c:	6843      	ldr	r3, [r0, #4]
   3f39e:	2b00      	cmp	r3, #0
   3f3a0:	d0f9      	beq.n	3f396 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   3f3a2:	f7e7 fcfb 	bl	26d9c <at_params_get>
	if (param == NULL) {
   3f3a6:	4604      	mov	r4, r0
   3f3a8:	2800      	cmp	r0, #0
   3f3aa:	d0f4      	beq.n	3f396 <at_params_empty_put+0x4>
	at_param_clear(param);
   3f3ac:	f7e7 fd2c 	bl	26e08 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   3f3b0:	2304      	movs	r3, #4
	param->value.int_val = 0;
   3f3b2:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   3f3b4:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   3f3b6:	2300      	movs	r3, #0
	return 0;
   3f3b8:	2000      	movs	r0, #0
	param->value.int_val = 0;
   3f3ba:	e9c4 2302 	strd	r2, r3, [r4, #8]
	return 0;
   3f3be:	e7ec      	b.n	3f39a <at_params_empty_put+0x8>

0003f3c0 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   3f3c0:	b570      	push	{r4, r5, r6, lr}
   3f3c2:	4616      	mov	r6, r2
   3f3c4:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   3f3c6:	b910      	cbnz	r0, 3f3ce <at_params_int_put+0xe>
		return -EINVAL;
   3f3c8:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   3f3cc:	bd70      	pop	{r4, r5, r6, pc}
	if (list == NULL || list->params == NULL) {
   3f3ce:	6843      	ldr	r3, [r0, #4]
   3f3d0:	2b00      	cmp	r3, #0
   3f3d2:	d0f9      	beq.n	3f3c8 <at_params_int_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3f3d4:	f7e7 fce2 	bl	26d9c <at_params_get>
	if (param == NULL) {
   3f3d8:	4604      	mov	r4, r0
   3f3da:	2800      	cmp	r0, #0
   3f3dc:	d0f4      	beq.n	3f3c8 <at_params_int_put+0x8>
	at_param_clear(param);
   3f3de:	f7e7 fd13 	bl	26e08 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   3f3e2:	2301      	movs	r3, #1
	return 0;
   3f3e4:	2000      	movs	r0, #0
	param->value.int_val = value;
   3f3e6:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   3f3ea:	7023      	strb	r3, [r4, #0]
	return 0;
   3f3ec:	e7ee      	b.n	3f3cc <at_params_int_put+0xc>

0003f3ee <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   3f3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f3f0:	4617      	mov	r7, r2
   3f3f2:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   3f3f4:	b910      	cbnz	r0, 3f3fc <at_params_string_put+0xe>
		return -EINVAL;
   3f3f6:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   3f3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   3f3fc:	6843      	ldr	r3, [r0, #4]
   3f3fe:	2b00      	cmp	r3, #0
   3f400:	d0f9      	beq.n	3f3f6 <at_params_string_put+0x8>
   3f402:	2a00      	cmp	r2, #0
   3f404:	d0f7      	beq.n	3f3f6 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3f406:	f7e7 fcc9 	bl	26d9c <at_params_get>
	if (param == NULL) {
   3f40a:	4604      	mov	r4, r0
   3f40c:	2800      	cmp	r0, #0
   3f40e:	d0f2      	beq.n	3f3f6 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   3f410:	1c68      	adds	r0, r5, #1
   3f412:	f002 f84c 	bl	414ae <k_malloc>
	if (param_value == NULL) {
   3f416:	4606      	mov	r6, r0
   3f418:	b160      	cbz	r0, 3f434 <at_params_string_put+0x46>
   3f41a:	462a      	mov	r2, r5
   3f41c:	4639      	mov	r1, r7
   3f41e:	f002 f8d0 	bl	415c2 <memcpy>
	at_param_clear(param);
   3f422:	4620      	mov	r0, r4
   3f424:	f7e7 fcf0 	bl	26e08 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   3f428:	2302      	movs	r3, #2
	return 0;
   3f42a:	2000      	movs	r0, #0
	param->size = str_len;
   3f42c:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   3f42e:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   3f430:	60a6      	str	r6, [r4, #8]
	return 0;
   3f432:	e7e2      	b.n	3f3fa <at_params_string_put+0xc>
		return -ENOMEM;
   3f434:	f06f 000b 	mvn.w	r0, #11
   3f438:	e7df      	b.n	3f3fa <at_params_string_put+0xc>

0003f43a <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   3f43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f43c:	4617      	mov	r7, r2
   3f43e:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   3f440:	b910      	cbnz	r0, 3f448 <at_params_array_put+0xe>
		return -EINVAL;
   3f442:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   3f446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   3f448:	6843      	ldr	r3, [r0, #4]
   3f44a:	2b00      	cmp	r3, #0
   3f44c:	d0f9      	beq.n	3f442 <at_params_array_put+0x8>
   3f44e:	2a00      	cmp	r2, #0
   3f450:	d0f7      	beq.n	3f442 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3f452:	f7e7 fca3 	bl	26d9c <at_params_get>
	if (param == NULL) {
   3f456:	4604      	mov	r4, r0
   3f458:	2800      	cmp	r0, #0
   3f45a:	d0f2      	beq.n	3f442 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   3f45c:	4628      	mov	r0, r5
   3f45e:	f002 f826 	bl	414ae <k_malloc>
	if (param_value == NULL) {
   3f462:	4606      	mov	r6, r0
   3f464:	b160      	cbz	r0, 3f480 <at_params_array_put+0x46>
   3f466:	462a      	mov	r2, r5
   3f468:	4639      	mov	r1, r7
   3f46a:	f002 f8aa 	bl	415c2 <memcpy>
	at_param_clear(param);
   3f46e:	4620      	mov	r0, r4
   3f470:	f7e7 fcca 	bl	26e08 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   3f474:	2303      	movs	r3, #3
	return 0;
   3f476:	2000      	movs	r0, #0
	param->size = array_len;
   3f478:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   3f47a:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   3f47c:	60a6      	str	r6, [r4, #8]
	return 0;
   3f47e:	e7e2      	b.n	3f446 <at_params_array_put+0xc>
		return -ENOMEM;
   3f480:	f06f 000b 	mvn.w	r0, #11
   3f484:	e7df      	b.n	3f446 <at_params_array_put+0xc>

0003f486 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   3f486:	b510      	push	{r4, lr}
   3f488:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3f48a:	b910      	cbnz	r0, 3f492 <at_params_short_get+0xc>
		return -EINVAL;
   3f48c:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
}
   3f490:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3f492:	6843      	ldr	r3, [r0, #4]
   3f494:	2b00      	cmp	r3, #0
   3f496:	d0f9      	beq.n	3f48c <at_params_short_get+0x6>
   3f498:	2a00      	cmp	r2, #0
   3f49a:	d0f7      	beq.n	3f48c <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3f49c:	f7e7 fc7e 	bl	26d9c <at_params_get>
	if (param == NULL) {
   3f4a0:	2800      	cmp	r0, #0
   3f4a2:	d0f3      	beq.n	3f48c <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3f4a4:	7803      	ldrb	r3, [r0, #0]
   3f4a6:	2b01      	cmp	r3, #1
   3f4a8:	d1f0      	bne.n	3f48c <at_params_short_get+0x6>
	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   3f4aa:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   3f4ae:	f513 4100 	adds.w	r1, r3, #32768	; 0x8000
   3f4b2:	f142 0200 	adc.w	r2, r2, #0
   3f4b6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   3f4ba:	f172 0200 	sbcs.w	r2, r2, #0
   3f4be:	d2e5      	bcs.n	3f48c <at_params_short_get+0x6>
	return 0;
   3f4c0:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   3f4c2:	8023      	strh	r3, [r4, #0]
	return 0;
   3f4c4:	e7e4      	b.n	3f490 <at_params_short_get+0xa>

0003f4c6 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   3f4c6:	b510      	push	{r4, lr}
   3f4c8:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3f4ca:	b910      	cbnz	r0, 3f4d2 <at_params_unsigned_short_get+0xc>
		return -EINVAL;
   3f4cc:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   3f4d0:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3f4d2:	6843      	ldr	r3, [r0, #4]
   3f4d4:	2b00      	cmp	r3, #0
   3f4d6:	d0f9      	beq.n	3f4cc <at_params_unsigned_short_get+0x6>
   3f4d8:	2a00      	cmp	r2, #0
   3f4da:	d0f7      	beq.n	3f4cc <at_params_unsigned_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3f4dc:	f7e7 fc5e 	bl	26d9c <at_params_get>
	if (param == NULL) {
   3f4e0:	2800      	cmp	r0, #0
   3f4e2:	d0f3      	beq.n	3f4cc <at_params_unsigned_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3f4e4:	7803      	ldrb	r3, [r0, #0]
   3f4e6:	2b01      	cmp	r3, #1
   3f4e8:	d1f0      	bne.n	3f4cc <at_params_unsigned_short_get+0x6>
	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   3f4ea:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   3f4ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   3f4f2:	f172 0200 	sbcs.w	r2, r2, #0
   3f4f6:	d2e9      	bcs.n	3f4cc <at_params_unsigned_short_get+0x6>
	return 0;
   3f4f8:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   3f4fa:	8023      	strh	r3, [r4, #0]
	return 0;
   3f4fc:	e7e8      	b.n	3f4d0 <at_params_unsigned_short_get+0xa>

0003f4fe <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   3f4fe:	b510      	push	{r4, lr}
   3f500:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3f502:	b910      	cbnz	r0, 3f50a <at_params_int_get+0xc>
		return -EINVAL;
   3f504:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
}
   3f508:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3f50a:	6843      	ldr	r3, [r0, #4]
   3f50c:	2b00      	cmp	r3, #0
   3f50e:	d0f9      	beq.n	3f504 <at_params_int_get+0x6>
   3f510:	2a00      	cmp	r2, #0
   3f512:	d0f7      	beq.n	3f504 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3f514:	f7e7 fc42 	bl	26d9c <at_params_get>
	if (param == NULL) {
   3f518:	2800      	cmp	r0, #0
   3f51a:	d0f3      	beq.n	3f504 <at_params_int_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3f51c:	7803      	ldrb	r3, [r0, #0]
   3f51e:	2b01      	cmp	r3, #1
   3f520:	d1f0      	bne.n	3f504 <at_params_int_get+0x6>
	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   3f522:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   3f526:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   3f52a:	f142 0200 	adc.w	r2, r2, #0
   3f52e:	2a00      	cmp	r2, #0
   3f530:	d1e8      	bne.n	3f504 <at_params_int_get+0x6>
	return 0;
   3f532:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   3f534:	6023      	str	r3, [r4, #0]
	return 0;
   3f536:	e7e7      	b.n	3f508 <at_params_int_get+0xa>

0003f538 <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   3f538:	b510      	push	{r4, lr}
   3f53a:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3f53c:	b910      	cbnz	r0, 3f544 <at_params_int64_get+0xc>
		return -EINVAL;
   3f53e:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   3f542:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3f544:	6843      	ldr	r3, [r0, #4]
   3f546:	2b00      	cmp	r3, #0
   3f548:	d0f9      	beq.n	3f53e <at_params_int64_get+0x6>
   3f54a:	2a00      	cmp	r2, #0
   3f54c:	d0f7      	beq.n	3f53e <at_params_int64_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3f54e:	f7e7 fc25 	bl	26d9c <at_params_get>
	if (param == NULL) {
   3f552:	2800      	cmp	r0, #0
   3f554:	d0f3      	beq.n	3f53e <at_params_int64_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3f556:	7803      	ldrb	r3, [r0, #0]
   3f558:	2b01      	cmp	r3, #1
   3f55a:	d1f0      	bne.n	3f53e <at_params_int64_get+0x6>
	*value = param->value.int_val;
   3f55c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
	return 0;
   3f560:	2000      	movs	r0, #0
	*value = param->value.int_val;
   3f562:	e9c4 2300 	strd	r2, r3, [r4]
	return 0;
   3f566:	e7ec      	b.n	3f542 <at_params_int64_get+0xa>

0003f568 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   3f568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f56a:	4617      	mov	r7, r2
   3f56c:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   3f56e:	b910      	cbnz	r0, 3f576 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   3f570:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   3f574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   3f576:	6843      	ldr	r3, [r0, #4]
   3f578:	2b00      	cmp	r3, #0
   3f57a:	d0f9      	beq.n	3f570 <at_params_string_get+0x8>
   3f57c:	2a00      	cmp	r2, #0
   3f57e:	d0f7      	beq.n	3f570 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   3f580:	2c00      	cmp	r4, #0
   3f582:	d0f5      	beq.n	3f570 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   3f584:	f7e7 fc0a 	bl	26d9c <at_params_get>
	if (param == NULL) {
   3f588:	4606      	mov	r6, r0
   3f58a:	2800      	cmp	r0, #0
   3f58c:	d0f0      	beq.n	3f570 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   3f58e:	7803      	ldrb	r3, [r0, #0]
   3f590:	2b02      	cmp	r3, #2
   3f592:	d1ed      	bne.n	3f570 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   3f594:	f7e7 fc1c 	bl	26dd0 <at_param_size>
	if (*len < param_len) {
   3f598:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   3f59a:	4605      	mov	r5, r0
	if (*len < param_len) {
   3f59c:	4283      	cmp	r3, r0
   3f59e:	d307      	bcc.n	3f5b0 <at_params_string_get+0x48>
   3f5a0:	4602      	mov	r2, r0
   3f5a2:	68b1      	ldr	r1, [r6, #8]
   3f5a4:	4638      	mov	r0, r7
   3f5a6:	f002 f80c 	bl	415c2 <memcpy>
	return 0;
   3f5aa:	2000      	movs	r0, #0
	*len = param_len;
   3f5ac:	6025      	str	r5, [r4, #0]
	return 0;
   3f5ae:	e7e1      	b.n	3f574 <at_params_string_get+0xc>
		return -ENOMEM;
   3f5b0:	f06f 000b 	mvn.w	r0, #11
   3f5b4:	e7de      	b.n	3f574 <at_params_string_get+0xc>

0003f5b6 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   3f5b6:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3f5b8:	4605      	mov	r5, r0
   3f5ba:	b180      	cbz	r0, 3f5de <at_params_valid_count_get+0x28>
   3f5bc:	6843      	ldr	r3, [r0, #4]
   3f5be:	b173      	cbz	r3, 3f5de <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   3f5c0:	2100      	movs	r1, #0
   3f5c2:	f7e7 fbeb 	bl	26d9c <at_params_get>
	size_t valid_i = 0;
   3f5c6:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   3f5c8:	b108      	cbz	r0, 3f5ce <at_params_valid_count_get+0x18>
   3f5ca:	7803      	ldrb	r3, [r0, #0]
   3f5cc:	b90b      	cbnz	r3, 3f5d2 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   3f5ce:	4620      	mov	r0, r4
   3f5d0:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   3f5d2:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   3f5d4:	4621      	mov	r1, r4
   3f5d6:	4628      	mov	r0, r5
   3f5d8:	f7e7 fbe0 	bl	26d9c <at_params_get>
   3f5dc:	e7f4      	b.n	3f5c8 <at_params_valid_count_get+0x12>
		return -EINVAL;
   3f5de:	f06f 0415 	mvn.w	r4, #21
   3f5e2:	e7f4      	b.n	3f5ce <at_params_valid_count_get+0x18>

0003f5e4 <lte_lc_init_and_connect_async>:
{
   3f5e4:	b510      	push	{r4, lr}
   3f5e6:	4604      	mov	r4, r0
	err = init_and_config();
   3f5e8:	f7e8 f810 	bl	2760c <init_and_config>
	if (err) {
   3f5ec:	b920      	cbnz	r0, 3f5f8 <lte_lc_init_and_connect_async+0x14>
	return lte_lc_connect_async(handler);
   3f5ee:	4620      	mov	r0, r4
}
   3f5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return lte_lc_connect_async(handler);
   3f5f4:	f7e8 b964 	b.w	278c0 <lte_lc_connect_async>
}
   3f5f8:	f06f 000d 	mvn.w	r0, #13
   3f5fc:	bd10      	pop	{r4, pc}

0003f5fe <string_to_int>:
{
   3f5fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3f600:	460c      	mov	r4, r1
   3f602:	4605      	mov	r5, r0
   3f604:	4616      	mov	r6, r2
	errno = 0;
   3f606:	f7fe f9a1 	bl	3d94c <__errno>
   3f60a:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   3f60c:	4622      	mov	r2, r4
	errno = 0;
   3f60e:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   3f610:	a901      	add	r1, sp, #4
   3f612:	4628      	mov	r0, r5
   3f614:	f7fb f9c0 	bl	3a998 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3f618:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   3f61a:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3f61c:	42ab      	cmp	r3, r5
   3f61e:	d103      	bne.n	3f628 <string_to_int+0x2a>
		return -ENODATA;
   3f620:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   3f624:	b002      	add	sp, #8
   3f626:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3f628:	781b      	ldrb	r3, [r3, #0]
   3f62a:	2b00      	cmp	r3, #0
   3f62c:	d1f8      	bne.n	3f620 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   3f62e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   3f632:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3f634:	3303      	adds	r3, #3
   3f636:	d802      	bhi.n	3f63e <string_to_int+0x40>
	return 0;
   3f638:	2000      	movs	r0, #0
	*output = temp;
   3f63a:	6034      	str	r4, [r6, #0]
	return 0;
   3f63c:	e7f2      	b.n	3f624 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   3f63e:	f7fe f985 	bl	3d94c <__errno>
   3f642:	6803      	ldr	r3, [r0, #0]
   3f644:	2b22      	cmp	r3, #34	; 0x22
   3f646:	d1f7      	bne.n	3f638 <string_to_int+0x3a>
   3f648:	e7ea      	b.n	3f620 <string_to_int+0x22>

0003f64a <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   3f64a:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   3f64c:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   3f64e:	b087      	sub	sp, #28
   3f650:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   3f652:	ab01      	add	r3, sp, #4
   3f654:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   3f656:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   3f658:	f7ff ff86 	bl	3f568 <at_params_string_get>
	if (err) {
   3f65c:	b968      	cbnz	r0, 3f67a <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   3f65e:	9b01      	ldr	r3, [sp, #4]
   3f660:	aa06      	add	r2, sp, #24
   3f662:	4413      	add	r3, r2
   3f664:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   3f668:	4622      	mov	r2, r4
   3f66a:	4629      	mov	r1, r5
   3f66c:	a802      	add	r0, sp, #8
   3f66e:	f7ff ffc6 	bl	3f5fe <string_to_int>
		return -ENODATA;
   3f672:	2800      	cmp	r0, #0
   3f674:	bf18      	it	ne
   3f676:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   3f67a:	b007      	add	sp, #28
   3f67c:	bd30      	pop	{r4, r5, pc}

0003f67e <on_modem_init>:
	if (err) {
		LOG_ERR("Failed to unlock PLMN, err %d", err);
		return;
	}
#endif
}
   3f67e:	4770      	bx	lr

0003f680 <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   3f680:	f7e8 b934 	b.w	278ec <lte_lc_deinit>

0003f684 <json_add_str>:
{
   3f684:	b513      	push	{r0, r1, r4, lr}
	if (parent == NULL || str == NULL || item == NULL) {
   3f686:	4604      	mov	r4, r0
{
   3f688:	9101      	str	r1, [sp, #4]
	if (parent == NULL || str == NULL || item == NULL) {
   3f68a:	b160      	cbz	r0, 3f6a6 <json_add_str+0x22>
   3f68c:	b15a      	cbz	r2, 3f6a6 <json_add_str+0x22>
	json_str = cJSON_CreateString(item);
   3f68e:	4610      	mov	r0, r2
   3f690:	f7f2 fd8e 	bl	321b0 <cJSON_CreateString>
	if (json_str == NULL) {
   3f694:	4602      	mov	r2, r0
   3f696:	b148      	cbz	r0, 3f6ac <json_add_str+0x28>
	cJSON_AddItemToObject(parent, str, item);
   3f698:	4620      	mov	r0, r4
   3f69a:	9901      	ldr	r1, [sp, #4]
   3f69c:	f000 fb55 	bl	3fd4a <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   3f6a0:	2000      	movs	r0, #0
}
   3f6a2:	b002      	add	sp, #8
   3f6a4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3f6a6:	f06f 0015 	mvn.w	r0, #21
   3f6aa:	e7fa      	b.n	3f6a2 <json_add_str+0x1e>
		return -ENOMEM;
   3f6ac:	f06f 000b 	mvn.w	r0, #11
   3f6b0:	e7f7      	b.n	3f6a2 <json_add_str+0x1e>

0003f6b2 <json_add_data>:
{
   3f6b2:	b570      	push	{r4, r5, r6, lr}
   3f6b4:	4604      	mov	r4, r0
	if (param == NULL || json_obj == NULL) {
   3f6b6:	460e      	mov	r6, r1
{
   3f6b8:	b09c      	sub	sp, #112	; 0x70
	if (param == NULL || json_obj == NULL) {
   3f6ba:	b921      	cbnz	r1, 3f6c6 <json_add_data+0x14>
		return -EINVAL;
   3f6bc:	f06f 0415 	mvn.w	r4, #21
}
   3f6c0:	4620      	mov	r0, r4
   3f6c2:	b01c      	add	sp, #112	; 0x70
   3f6c4:	bd70      	pop	{r4, r5, r6, pc}
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   3f6c6:	2264      	movs	r2, #100	; 0x64
   3f6c8:	2100      	movs	r1, #0
   3f6ca:	a803      	add	r0, sp, #12
   3f6cc:	f001 ff99 	bl	41602 <memset>
	ret = modem_info_name_get(param->type,
   3f6d0:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3f6d4:	a903      	add	r1, sp, #12
   3f6d6:	f7e8 fe0f 	bl	282f8 <modem_info_name_get>
	if (ret < 0) {
   3f6da:	1e05      	subs	r5, r0, #0
   3f6dc:	dbee      	blt.n	3f6bc <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   3f6de:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3f6e2:	f7e8 fdff 	bl	282e4 <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   3f6e6:	2802      	cmp	r0, #2
   3f6e8:	d114      	bne.n	3f714 <json_add_data+0x62>
   3f6ea:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   3f6ee:	2b03      	cmp	r3, #3
   3f6f0:	d010      	beq.n	3f714 <json_add_data+0x62>
		total_len += strlen(param->value_string);
   3f6f2:	1ca2      	adds	r2, r4, #2
   3f6f4:	4610      	mov	r0, r2
   3f6f6:	9201      	str	r2, [sp, #4]
   3f6f8:	f7dd fda3 	bl	1d242 <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   3f6fc:	9a01      	ldr	r2, [sp, #4]
		total_len += strlen(param->value_string);
   3f6fe:	4604      	mov	r4, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   3f700:	a903      	add	r1, sp, #12
   3f702:	4630      	mov	r0, r6
   3f704:	f7ff ffbe 	bl	3f684 <json_add_str>
   3f708:	4428      	add	r0, r5
	if (ret < 0) {
   3f70a:	ea34 0420 	bics.w	r4, r4, r0, asr #32
   3f70e:	bf28      	it	cs
   3f710:	4604      	movcs	r4, r0
   3f712:	e7d5      	b.n	3f6c0 <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   3f714:	8820      	ldrh	r0, [r4, #0]
   3f716:	f7dc ffd5 	bl	1c6c4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   3f71a:	f7de ffc9 	bl	1e6b0 <cJSON_CreateNumber>
	if (json_num == NULL) {
   3f71e:	4602      	mov	r2, r0
   3f720:	b138      	cbz	r0, 3f732 <json_add_data+0x80>
	cJSON_AddItemToObject(parent, str, item);
   3f722:	4630      	mov	r0, r6
   3f724:	a903      	add	r1, sp, #12
   3f726:	f000 fb10 	bl	3fd4a <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   3f72a:	2000      	movs	r0, #0
		total_len += sizeof(uint16_t);
   3f72c:	2402      	movs	r4, #2
		ret += json_add_num(json_obj, data_name, param->value);
   3f72e:	4428      	add	r0, r5
   3f730:	e7eb      	b.n	3f70a <json_add_data+0x58>
		return -ENOMEM;
   3f732:	f06f 000b 	mvn.w	r0, #11
   3f736:	e7f9      	b.n	3f72c <json_add_data+0x7a>

0003f738 <sim_data_add>:
{
   3f738:	b570      	push	{r4, r5, r6, lr}
   3f73a:	4606      	mov	r6, r0
	if (sim == NULL || json_obj == NULL) {
   3f73c:	460d      	mov	r5, r1
   3f73e:	b179      	cbz	r1, 3f760 <sim_data_add+0x28>
	total_len = json_add_data(&sim->uicc, json_obj);
   3f740:	f7ff ffb7 	bl	3f6b2 <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   3f744:	4629      	mov	r1, r5
	total_len = json_add_data(&sim->uicc, json_obj);
   3f746:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   3f748:	f106 0070 	add.w	r0, r6, #112	; 0x70
   3f74c:	f7ff ffb1 	bl	3f6b2 <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   3f750:	4629      	mov	r1, r5
	total_len += json_add_data(&sim->iccid, json_obj);
   3f752:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   3f754:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   3f758:	f7ff ffab 	bl	3f6b2 <json_add_data>
   3f75c:	4420      	add	r0, r4
}
   3f75e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3f760:	f06f 0015 	mvn.w	r0, #21
   3f764:	e7fb      	b.n	3f75e <sim_data_add+0x26>

0003f766 <date_time_init>:

	return 0;
}

static int date_time_init(const struct device *unused)
{
   3f766:	b508      	push	{r3, lr}
	date_time_core_init();
   3f768:	f7e9 faec 	bl	28d44 <date_time_core_init>

	return 0;
}
   3f76c:	2000      	movs	r0, #0
   3f76e:	bd08      	pop	{r3, pc}

0003f770 <date_time_is_valid>:
	return date_time_core_is_valid();
   3f770:	f7e9 bb1e 	b.w	28db0 <date_time_core_is_valid>

0003f774 <date_time_register_handler>:
	date_time_core_register_handler(evt_handler);
   3f774:	f7e9 bb16 	b.w	28da4 <date_time_core_register_handler>

0003f778 <location_service_get_certificate>:
	if (service == MULTICELL_SERVICE_NRF_CLOUD) {
   3f778:	2801      	cmp	r0, #1
   3f77a:	d101      	bne.n	3f780 <location_service_get_certificate+0x8>
		return location_service_get_certificate_nrf_cloud();
   3f77c:	f7e9 be12 	b.w	293a4 <location_service_get_certificate_nrf_cloud>
}
   3f780:	2000      	movs	r0, #0
   3f782:	4770      	bx	lr

0003f784 <location_core_config_log>:
}
   3f784:	4770      	bx	lr

0003f786 <method_gnss_agps_required>:
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST) {
   3f786:	6882      	ldr	r2, [r0, #8]
   3f788:	f002 0301 	and.w	r3, r2, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST) {
   3f78c:	0791      	lsls	r1, r2, #30
		type_count++;
   3f78e:	bf48      	it	mi
   3f790:	3301      	addmi	r3, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_NEQUICK_REQUEST) {
   3f792:	0751      	lsls	r1, r2, #29
		type_count++;
   3f794:	bf48      	it	mi
   3f796:	3301      	addmi	r3, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   3f798:	0711      	lsls	r1, r2, #28
		type_count++;
   3f79a:	bf48      	it	mi
   3f79c:	3301      	addmi	r3, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   3f79e:	06d1      	lsls	r1, r2, #27
		type_count++;
   3f7a0:	bf48      	it	mi
   3f7a2:	3301      	addmi	r3, #1
	if (request->data_flags &  NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST) {
   3f7a4:	f002 0220 	and.w	r2, r2, #32
   3f7a8:	4313      	orrs	r3, r2
}
   3f7aa:	bf14      	ite	ne
   3f7ac:	2001      	movne	r0, #1
   3f7ae:	2000      	moveq	r0, #0
   3f7b0:	4770      	bx	lr

0003f7b2 <json_add_num_cs>:
{
   3f7b2:	b508      	push	{r3, lr}
	if (!parent || !str) {
   3f7b4:	b138      	cbz	r0, 3f7c6 <json_add_num_cs+0x14>
	return cJSON_AddNumberToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   3f7b6:	f000 fb10 	bl	3fdda <cJSON_AddNumberToObjectCS>
   3f7ba:	2800      	cmp	r0, #0
   3f7bc:	bf14      	ite	ne
   3f7be:	2000      	movne	r0, #0
   3f7c0:	f06f 000b 	mvneq.w	r0, #11
}
   3f7c4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3f7c6:	f06f 0015 	mvn.w	r0, #21
   3f7ca:	e7fb      	b.n	3f7c4 <json_add_num_cs+0x12>

0003f7cc <json_add_obj_cs>:
{
   3f7cc:	b510      	push	{r4, lr}
	if (!parent || !str || !item) {
   3f7ce:	b148      	cbz	r0, 3f7e4 <json_add_obj_cs+0x18>
   3f7d0:	b141      	cbz	r1, 3f7e4 <json_add_obj_cs+0x18>
   3f7d2:	b13a      	cbz	r2, 3f7e4 <json_add_obj_cs+0x18>
	return cJSON_AddItemToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   3f7d4:	f000 fabc 	bl	3fd50 <cJSON_AddItemToObjectCS>
   3f7d8:	2800      	cmp	r0, #0
   3f7da:	bf14      	ite	ne
   3f7dc:	2000      	movne	r0, #0
   3f7de:	f06f 000b 	mvneq.w	r0, #11
}
   3f7e2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3f7e4:	f06f 0015 	mvn.w	r0, #21
   3f7e8:	e7fb      	b.n	3f7e2 <json_add_obj_cs+0x16>

0003f7ea <json_add_str_cs>:
{
   3f7ea:	b508      	push	{r3, lr}
	if (!parent || !str || !item) {
   3f7ec:	b140      	cbz	r0, 3f800 <json_add_str_cs+0x16>
   3f7ee:	b13a      	cbz	r2, 3f800 <json_add_str_cs+0x16>
	return cJSON_AddStringToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   3f7f0:	f000 fb1f 	bl	3fe32 <cJSON_AddStringToObjectCS>
   3f7f4:	2800      	cmp	r0, #0
   3f7f6:	bf14      	ite	ne
   3f7f8:	2000      	movne	r0, #0
   3f7fa:	f06f 000b 	mvneq.w	r0, #11
}
   3f7fe:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3f800:	f06f 0015 	mvn.w	r0, #21
   3f804:	e7fb      	b.n	3f7fe <json_add_str_cs+0x14>

0003f806 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3f806:	b108      	cbz	r0, 3f80c <json_object_decode+0x6>
   3f808:	f000 ba93 	b.w	3fd32 <cJSON_GetObjectItem>
}
   3f80c:	4770      	bx	lr

0003f80e <json_add_null_cs>:
{
   3f80e:	b508      	push	{r3, lr}
	if (!parent || !str) {
   3f810:	b138      	cbz	r0, 3f822 <json_add_null_cs+0x14>
	return cJSON_AddNullToObjectCS(parent, str) ? 0 : -ENOMEM;
   3f812:	f000 facd 	bl	3fdb0 <cJSON_AddNullToObjectCS>
   3f816:	2800      	cmp	r0, #0
   3f818:	bf14      	ite	ne
   3f81a:	2000      	movne	r0, #0
   3f81c:	f06f 000b 	mvneq.w	r0, #11
}
   3f820:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3f822:	f06f 0015 	mvn.w	r0, #21
   3f826:	e7fb      	b.n	3f820 <json_add_null_cs+0x12>

0003f828 <json_strdup>:
{
   3f828:	b538      	push	{r3, r4, r5, lr}
	char *src = cJSON_GetStringValue(string_obj);
   3f82a:	f000 fb96 	bl	3ff5a <cJSON_GetStringValue>
	if (!src) {
   3f82e:	4605      	mov	r5, r0
   3f830:	b160      	cbz	r0, 3f84c <json_strdup+0x24>
	dest = nrf_cloud_calloc(strlen(src) + 1, 1);
   3f832:	f7dd fd06 	bl	1d242 <strlen>
   3f836:	2101      	movs	r1, #1
   3f838:	4408      	add	r0, r1
   3f83a:	f001 fe3c 	bl	414b6 <k_calloc>
	if (dest) {
   3f83e:	4604      	mov	r4, r0
   3f840:	b110      	cbz	r0, 3f848 <json_strdup+0x20>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   3f842:	4629      	mov	r1, r5
   3f844:	f002 f8a8 	bl	41998 <strcpy>
}
   3f848:	4620      	mov	r0, r4
   3f84a:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   3f84c:	4604      	mov	r4, r0
   3f84e:	e7fb      	b.n	3f848 <json_strdup+0x20>

0003f850 <json_decode_and_alloc>:
{
   3f850:	b538      	push	{r3, r4, r5, lr}
   3f852:	4605      	mov	r5, r0
	if (!data || !cJSON_IsString(obj)) {
   3f854:	460c      	mov	r4, r1
   3f856:	b911      	cbnz	r1, 3f85e <json_decode_and_alloc+0xe>
		return -EINVAL;
   3f858:	f06f 0015 	mvn.w	r0, #21
}
   3f85c:	bd38      	pop	{r3, r4, r5, pc}
	if (!data || !cJSON_IsString(obj)) {
   3f85e:	f000 fb75 	bl	3ff4c <cJSON_IsString>
   3f862:	2800      	cmp	r0, #0
   3f864:	d0f8      	beq.n	3f858 <json_decode_and_alloc+0x8>
	data->ptr = json_strdup(obj);
   3f866:	4628      	mov	r0, r5
   3f868:	f7ff ffde 	bl	3f828 <json_strdup>
   3f86c:	6060      	str	r0, [r4, #4]
	if (data->ptr == NULL) {
   3f86e:	b120      	cbz	r0, 3f87a <json_decode_and_alloc+0x2a>
	data->len = strlen(data->ptr);
   3f870:	f7dd fce7 	bl	1d242 <strlen>
   3f874:	6020      	str	r0, [r4, #0]
	return 0;
   3f876:	2000      	movs	r0, #0
   3f878:	e7f0      	b.n	3f85c <json_decode_and_alloc+0xc>
		return -ENOMEM;
   3f87a:	f06f 000b 	mvn.w	r0, #11
   3f87e:	e7ed      	b.n	3f85c <json_decode_and_alloc+0xc>

0003f880 <nrf_cloud_device_status_free>:
{
   3f880:	b510      	push	{r4, lr}
	if (status && status->ptr) {
   3f882:	4604      	mov	r4, r0
   3f884:	b130      	cbz	r0, 3f894 <nrf_cloud_device_status_free+0x14>
   3f886:	6840      	ldr	r0, [r0, #4]
   3f888:	b120      	cbz	r0, 3f894 <nrf_cloud_device_status_free+0x14>
		cJSON_free((void *)status->ptr);
   3f88a:	f7f2 fccf 	bl	3222c <cJSON_free>
		status->ptr = NULL;
   3f88e:	2300      	movs	r3, #0
		status->len = 0;
   3f890:	e9c4 3300 	strd	r3, r3, [r4]
}
   3f894:	bd10      	pop	{r4, pc}

0003f896 <nrf_cloud_configured_client_id_length_get>:
}
   3f896:	2013      	movs	r0, #19
   3f898:	4770      	bx	lr

0003f89a <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3f89a:	e8d0 3fef 	ldaex	r3, [r0]
   3f89e:	e8c0 1fe2 	stlex	r2, r1, [r0]
   3f8a2:	2a00      	cmp	r2, #0
   3f8a4:	d1f9      	bne.n	3f89a <atomic_set.isra.0>
}
   3f8a6:	4770      	bx	lr

0003f8a8 <cc_disconnection_handler>:
}
   3f8a8:	2000      	movs	r0, #0
   3f8aa:	4770      	bx	lr

0003f8ac <disconnection_handler>:
{
   3f8ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct nrf_cloud_evt evt = {
   3f8ae:	2218      	movs	r2, #24
   3f8b0:	2100      	movs	r1, #0
   3f8b2:	4668      	mov	r0, sp
   3f8b4:	f001 fea5 	bl	41602 <memset>
   3f8b8:	2309      	movs	r3, #9
   3f8ba:	f88d 3000 	strb.w	r3, [sp]
   3f8be:	2301      	movs	r3, #1
   3f8c0:	9301      	str	r3, [sp, #4]
	if (nfsm_get_disconnect_requested()) {
   3f8c2:	f7eb ff19 	bl	2b6f8 <nfsm_get_disconnect_requested>
   3f8c6:	b108      	cbz	r0, 3f8cc <disconnection_handler+0x20>
		evt.status = NRF_CLOUD_DISCONNECT_USER_REQUEST;
   3f8c8:	2300      	movs	r3, #0
   3f8ca:	9301      	str	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   3f8cc:	4669      	mov	r1, sp
   3f8ce:	2001      	movs	r0, #1
   3f8d0:	f7eb fed6 	bl	2b680 <nfsm_set_current_state_and_notify>
}
   3f8d4:	2000      	movs	r0, #0
   3f8d6:	b007      	add	sp, #28
   3f8d8:	f85d fb04 	ldr.w	pc, [sp], #4

0003f8dc <dc_connection_handler>:
{
   3f8dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (nct_evt->status == 0) {
   3f8de:	6801      	ldr	r1, [r0, #0]
   3f8e0:	b951      	cbnz	r1, 3f8f8 <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   3f8e2:	2218      	movs	r2, #24
   3f8e4:	4668      	mov	r0, sp
   3f8e6:	f001 fe8c 	bl	41602 <memset>
   3f8ea:	2305      	movs	r3, #5
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3f8ec:	4669      	mov	r1, sp
   3f8ee:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   3f8f0:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3f8f4:	f7eb fec4 	bl	2b680 <nfsm_set_current_state_and_notify>
}
   3f8f8:	2000      	movs	r0, #0
   3f8fa:	b007      	add	sp, #28
   3f8fc:	f85d fb04 	ldr.w	pc, [sp], #4

0003f900 <cc_tx_ack_in_state_requested_handler>:
{
   3f900:	b508      	push	{r3, lr}
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   3f902:	8883      	ldrh	r3, [r0, #4]
   3f904:	2bc8      	cmp	r3, #200	; 0xc8
   3f906:	d103      	bne.n	3f910 <cc_tx_ack_in_state_requested_handler+0x10>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   3f908:	2100      	movs	r1, #0
   3f90a:	2005      	movs	r0, #5
   3f90c:	f7eb feb8 	bl	2b680 <nfsm_set_current_state_and_notify>
}
   3f910:	2000      	movs	r0, #0
   3f912:	bd08      	pop	{r3, pc}

0003f914 <dc_disconnection_handler>:
   3f914:	2000      	movs	r0, #0
   3f916:	4770      	bx	lr

0003f918 <dc_tx_ack_handler>:
   3f918:	2000      	movs	r0, #0
   3f91a:	4770      	bx	lr

0003f91c <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   3f91c:	2101      	movs	r1, #1
   3f91e:	f7ec bc53 	b.w	2c1c8 <dc_send>

0003f922 <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   3f922:	2100      	movs	r1, #0
   3f924:	f7ec bc50 	b.w	2c1c8 <dc_send>

0003f928 <npgps_get_time>:
	return npgps_get_shifted_time(gps_sec, gps_day, gps_time_of_day, 0);
   3f928:	2300      	movs	r3, #0
   3f92a:	f7ef b9a3 	b.w	2ec74 <npgps_get_shifted_time>

0003f92e <nrf_cloud_cell_pos_request>:
{
   3f92e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3f930:	4604      	mov	r4, r0
   3f932:	460d      	mov	r5, r1
   3f934:	4616      	mov	r6, r2
	if (nfsm_get_current_state() != STATE_DC_CONNECTED) {
   3f936:	f7eb fe9d 	bl	2b674 <nfsm_get_current_state>
   3f93a:	2809      	cmp	r0, #9
   3f93c:	d116      	bne.n	3f96c <nrf_cloud_cell_pos_request+0x3e>
	cJSON *cell_pos_req_obj = NULL;
   3f93e:	2300      	movs	r3, #0
	err = nrf_cloud_cell_pos_request_json_get(cells_inf, request_loc, &cell_pos_req_obj);
   3f940:	4620      	mov	r0, r4
   3f942:	4629      	mov	r1, r5
   3f944:	aa01      	add	r2, sp, #4
	cJSON *cell_pos_req_obj = NULL;
   3f946:	9301      	str	r3, [sp, #4]
	err = nrf_cloud_cell_pos_request_json_get(cells_inf, request_loc, &cell_pos_req_obj);
   3f948:	f7ef fb94 	bl	2f074 <nrf_cloud_cell_pos_request_json_get>
	if (!err) {
   3f94c:	4604      	mov	r4, r0
   3f94e:	b938      	cbnz	r0, 3f960 <nrf_cloud_cell_pos_request+0x32>
		if (request_loc) {
   3f950:	b115      	cbz	r5, 3f958 <nrf_cloud_cell_pos_request+0x2a>
			nfsm_set_cell_pos_response_cb(cb);
   3f952:	4630      	mov	r0, r6
   3f954:	f7ec fa6c 	bl	2be30 <nfsm_set_cell_pos_response_cb>
		err = json_send_to_cloud(cell_pos_req_obj);
   3f958:	9801      	ldr	r0, [sp, #4]
   3f95a:	f7eb f88b 	bl	2aa74 <json_send_to_cloud>
   3f95e:	4604      	mov	r4, r0
	cJSON_Delete(cell_pos_req_obj);
   3f960:	9801      	ldr	r0, [sp, #4]
   3f962:	f7f2 fb87 	bl	32074 <cJSON_Delete>
}
   3f966:	4620      	mov	r0, r4
   3f968:	b002      	add	sp, #8
   3f96a:	bd70      	pop	{r4, r5, r6, pc}
		return -EACCES;
   3f96c:	f06f 040c 	mvn.w	r4, #12
   3f970:	e7f9      	b.n	3f966 <nrf_cloud_cell_pos_request+0x38>

0003f972 <reset_topic>:
{
   3f972:	b510      	push	{r4, lr}
   3f974:	4604      	mov	r4, r0
	if (topic->utf8) {
   3f976:	6800      	ldr	r0, [r0, #0]
   3f978:	b118      	cbz	r0, 3f982 <reset_topic+0x10>
		nrf_cloud_free((void *)topic->utf8);
   3f97a:	f001 fd91 	bl	414a0 <k_free>
		topic->utf8 = NULL;
   3f97e:	2300      	movs	r3, #0
   3f980:	6023      	str	r3, [r4, #0]
	topic->size = 0;
   3f982:	2300      	movs	r3, #0
   3f984:	6063      	str	r3, [r4, #4]
}
   3f986:	bd10      	pop	{r4, pc}

0003f988 <get_number_from_array>:
{
   3f988:	b538      	push	{r3, r4, r5, lr}
   3f98a:	4614      	mov	r4, r2
	cJSON *item = cJSON_GetArrayItem(array, index);
   3f98c:	f000 f9cb 	bl	3fd26 <cJSON_GetArrayItem>
   3f990:	4605      	mov	r5, r0
	if (!cJSON_IsNumber(item)) {
   3f992:	f000 fad4 	bl	3ff3e <cJSON_IsNumber>
   3f996:	b118      	cbz	r0, 3f9a0 <get_number_from_array+0x18>
	return 0;
   3f998:	2000      	movs	r0, #0
	*number_out = item->valueint;
   3f99a:	696b      	ldr	r3, [r5, #20]
   3f99c:	6023      	str	r3, [r4, #0]
}
   3f99e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3f9a0:	f06f 0015 	mvn.w	r0, #21
   3f9a4:	e7fb      	b.n	3f99e <get_number_from_array+0x16>

0003f9a6 <error_evt_send>:
{
   3f9a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   3f9a8:	2300      	movs	r3, #0
   3f9aa:	9301      	str	r3, [sp, #4]
   3f9ac:	9303      	str	r3, [sp, #12]
   3f9ae:	2301      	movs	r3, #1
		.error = -error
   3f9b0:	4249      	negs	r1, r1
	return dl->callback(&evt);
   3f9b2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
	const struct download_client_evt evt = {
   3f9b6:	f88d 3004 	strb.w	r3, [sp, #4]
   3f9ba:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   3f9bc:	f8d0 3a50 	ldr.w	r3, [r0, #2640]	; 0xa50
   3f9c0:	a801      	add	r0, sp, #4
   3f9c2:	4798      	blx	r3
}
   3f9c4:	b005      	add	sp, #20
   3f9c6:	f85d fb04 	ldr.w	pc, [sp], #4

0003f9ca <request_send>:
	switch (dl->proto) {
   3f9ca:	f8d0 393c 	ldr.w	r3, [r0, #2364]	; 0x93c
   3f9ce:	2b06      	cmp	r3, #6
   3f9d0:	d002      	beq.n	3f9d8 <request_send+0xe>
   3f9d2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   3f9d6:	d101      	bne.n	3f9dc <request_send+0x12>
		return http_get_request_send(dl);
   3f9d8:	f7f0 bef2 	b.w	307c0 <http_get_request_send>
}
   3f9dc:	2000      	movs	r0, #0
   3f9de:	4770      	bx	lr

0003f9e0 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   3f9e0:	b128      	cbz	r0, 3f9ee <download_client_file_size_get+0xe>
   3f9e2:	b121      	cbz	r1, 3f9ee <download_client_file_size_get+0xe>
		return -EINVAL;
	}

	*size = client->file_size;
   3f9e4:	f8d0 391c 	ldr.w	r3, [r0, #2332]	; 0x91c

	return 0;
   3f9e8:	2000      	movs	r0, #0
	*size = client->file_size;
   3f9ea:	600b      	str	r3, [r1, #0]
	return 0;
   3f9ec:	4770      	bx	lr
		return -EINVAL;
   3f9ee:	f06f 0015 	mvn.w	r0, #21
}
   3f9f2:	4770      	bx	lr

0003f9f4 <swallow>:
{
   3f9f4:	b570      	push	{r4, r5, r6, lr}
   3f9f6:	4605      	mov	r5, r0
	p = strstr(*str, swallow);
   3f9f8:	6800      	ldr	r0, [r0, #0]
{
   3f9fa:	460e      	mov	r6, r1
	p = strstr(*str, swallow);
   3f9fc:	f002 f81b 	bl	41a36 <strstr>
	if (!p) {
   3fa00:	4604      	mov	r4, r0
   3fa02:	b130      	cbz	r0, 3fa12 <swallow+0x1e>
	*str = p + strlen(swallow);
   3fa04:	4630      	mov	r0, r6
   3fa06:	f7dd fc1c 	bl	1d242 <strlen>
   3fa0a:	4404      	add	r4, r0
	return 0;
   3fa0c:	2000      	movs	r0, #0
	*str = p + strlen(swallow);
   3fa0e:	602c      	str	r4, [r5, #0]
}
   3fa10:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   3fa12:	2001      	movs	r0, #1
   3fa14:	e7fc      	b.n	3fa10 <swallow+0x1c>

0003fa16 <fota_download_s0_active_get>:
}
   3fa16:	f06f 0001 	mvn.w	r0, #1
   3fa1a:	4770      	bx	lr

0003fa1c <dfu_target_mcuboot_schedule_update>:

int dfu_target_mcuboot_schedule_update(int img_num)
{
	int err = 0;

	if (img_num == -1) {
   3fa1c:	3001      	adds	r0, #1
   3fa1e:	2801      	cmp	r0, #1
   3fa20:	d801      	bhi.n	3fa26 <dfu_target_mcuboot_schedule_update+0xa>
		for (int i = 0; i < TARGET_IMAGE_COUNT && !err; i++) {
			err = dfu_target_mcuboot_schedule_one_img(i);
   3fa22:	f7f1 bc51 	b.w	312c8 <dfu_target_mcuboot_schedule_one_img.constprop.0>
	} else {
		err = -ENOENT;
	}

	return err;
}
   3fa26:	f06f 0001 	mvn.w	r0, #1
   3fa2a:	4770      	bx	lr

0003fa2c <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
   3fa2c:	b538      	push	{r3, r4, r5, lr}
   3fa2e:	460c      	mov	r4, r1
   3fa30:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
   3fa32:	f7fd fe13 	bl	3d65c <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   3fa36:	4621      	mov	r1, r4
   3fa38:	4425      	add	r5, r4
   3fa3a:	42a9      	cmp	r1, r5
   3fa3c:	d101      	bne.n	3fa42 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
   3fa3e:	2001      	movs	r0, #1
}
   3fa40:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
   3fa42:	f811 3b01 	ldrb.w	r3, [r1], #1
   3fa46:	4298      	cmp	r0, r3
   3fa48:	d0f7      	beq.n	3fa3a <bootutil_buffer_is_erased.part.0+0xe>
            return false;
   3fa4a:	2000      	movs	r0, #0
   3fa4c:	e7f8      	b.n	3fa40 <bootutil_buffer_is_erased.part.0+0x14>

0003fa4e <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3fa4e:	6880      	ldr	r0, [r0, #8]
   3fa50:	3818      	subs	r0, #24
   3fa52:	f020 0007 	bic.w	r0, r0, #7
}
   3fa56:	3810      	subs	r0, #16
   3fa58:	4770      	bx	lr

0003fa5a <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
   3fa5a:	b111      	cbz	r1, 3fa62 <bootutil_buffer_is_erased+0x8>
   3fa5c:	b10a      	cbz	r2, 3fa62 <bootutil_buffer_is_erased+0x8>
   3fa5e:	f7ff bfe5 	b.w	3fa2c <bootutil_buffer_is_erased.part.0>
}
   3fa62:	2000      	movs	r0, #0
   3fa64:	4770      	bx	lr

0003fa66 <boot_read_flag>:
{
   3fa66:	b538      	push	{r3, r4, r5, lr}
   3fa68:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3fa6a:	2301      	movs	r3, #1
{
   3fa6c:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3fa6e:	4622      	mov	r2, r4
{
   3fa70:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3fa72:	f7fd fd9b 	bl	3d5ac <flash_area_read>
    if (rc < 0) {
   3fa76:	2800      	cmp	r0, #0
   3fa78:	db10      	blt.n	3fa9c <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   3fa7a:	2201      	movs	r2, #1
   3fa7c:	4621      	mov	r1, r4
   3fa7e:	4628      	mov	r0, r5
   3fa80:	f7ff ffeb 	bl	3fa5a <bootutil_buffer_is_erased>
   3fa84:	b118      	cbz	r0, 3fa8e <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   3fa86:	2303      	movs	r3, #3
    return 0;
   3fa88:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
   3fa8a:	7023      	strb	r3, [r4, #0]
}
   3fa8c:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
   3fa8e:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
   3fa90:	2b01      	cmp	r3, #1
   3fa92:	bf0c      	ite	eq
   3fa94:	2301      	moveq	r3, #1
   3fa96:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
   3fa98:	7023      	strb	r3, [r4, #0]
   3fa9a:	e7f7      	b.n	3fa8c <boot_read_flag+0x26>
        return BOOT_EFLASH;
   3fa9c:	2001      	movs	r0, #1
   3fa9e:	e7f5      	b.n	3fa8c <boot_read_flag+0x26>

0003faa0 <boot_write_trailer>:
{
   3faa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3faa4:	461d      	mov	r5, r3
   3faa6:	4606      	mov	r6, r0
   3faa8:	460f      	mov	r7, r1
   3faaa:	4690      	mov	r8, r2
    align = flash_area_align(fap);
   3faac:	f7fd fdcd 	bl	3d64a <flash_area_align>
    align = ALIGN_UP(inlen, align);
   3fab0:	1e6c      	subs	r4, r5, #1
   3fab2:	4404      	add	r4, r0
   3fab4:	4243      	negs	r3, r0
   3fab6:	401c      	ands	r4, r3
    if (align > BOOT_MAX_ALIGN) {
   3fab8:	2c08      	cmp	r4, #8
   3faba:	d81b      	bhi.n	3faf4 <boot_write_trailer+0x54>
    erased_val = flash_area_erased_val(fap);
   3fabc:	4630      	mov	r0, r6
   3fabe:	f7fd fdcd 	bl	3d65c <flash_area_erased_val>
   3fac2:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   3fac4:	2308      	movs	r3, #8
   3fac6:	462a      	mov	r2, r5
   3fac8:	4641      	mov	r1, r8
   3faca:	4668      	mov	r0, sp
   3facc:	f001 fd86 	bl	415dc <__memcpy_chk>
__ssp_bos_icheck3(memset, void *, int)
   3fad0:	4649      	mov	r1, r9
   3fad2:	1b62      	subs	r2, r4, r5
   3fad4:	eb0d 0005 	add.w	r0, sp, r5
   3fad8:	f001 fd93 	bl	41602 <memset>
    rc = flash_area_write(fap, off, buf, align);
   3fadc:	4623      	mov	r3, r4
   3fade:	466a      	mov	r2, sp
   3fae0:	4639      	mov	r1, r7
   3fae2:	4630      	mov	r0, r6
   3fae4:	f7fd fd7e 	bl	3d5e4 <flash_area_write>
    if (rc != 0) {
   3fae8:	3800      	subs	r0, #0
   3faea:	bf18      	it	ne
   3faec:	2001      	movne	r0, #1
}
   3faee:	b003      	add	sp, #12
   3faf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   3faf4:	f04f 30ff 	mov.w	r0, #4294967295
   3faf8:	e7f9      	b.n	3faee <boot_write_trailer+0x4e>

0003fafa <boot_write_trailer_flag>:
{
   3fafa:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
   3fafc:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
   3fafe:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   3fb02:	aa01      	add	r2, sp, #4
   3fb04:	f7ff ffcc 	bl	3faa0 <boot_write_trailer>
}
   3fb08:	b003      	add	sp, #12
   3fb0a:	f85d fb04 	ldr.w	pc, [sp], #4

0003fb0e <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3fb0e:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   3fb10:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3fb12:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   3fb14:	f021 0107 	bic.w	r1, r1, #7
   3fb18:	f7ff bfef 	b.w	3fafa <boot_write_trailer_flag>

0003fb1c <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3fb1c:	6882      	ldr	r2, [r0, #8]
   3fb1e:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   3fb20:	f022 0207 	bic.w	r2, r2, #7
   3fb24:	f7ff bf9f 	b.w	3fa66 <boot_read_flag>

0003fb28 <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   3fb28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap = NULL;
   3fb2a:	2300      	movs	r3, #0
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   3fb2c:	2003      	movs	r0, #3
   3fb2e:	a901      	add	r1, sp, #4
    const struct flash_area *fap = NULL;
   3fb30:	9301      	str	r3, [sp, #4]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   3fb32:	f7e2 f91b 	bl	21d6c <flash_area_open>
    if (rc != 0) {
   3fb36:	b9d8      	cbnz	r0, 3fb70 <boot_set_confirmed_multi+0x48>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_primary_slot);
   3fb38:	9801      	ldr	r0, [sp, #4]
   3fb3a:	a902      	add	r1, sp, #8
   3fb3c:	f7f1 fd0c 	bl	31558 <boot_read_swap_state>
    if (rc != 0) {
   3fb40:	4604      	mov	r4, r0
   3fb42:	b968      	cbnz	r0, 3fb60 <boot_set_confirmed_multi+0x38>
        goto done;
    }

    switch (state_primary_slot.magic) {
   3fb44:	f89d 3008 	ldrb.w	r3, [sp, #8]
   3fb48:	2b02      	cmp	r3, #2
   3fb4a:	d00f      	beq.n	3fb6c <boot_set_confirmed_multi+0x44>
   3fb4c:	2b03      	cmp	r3, #3
   3fb4e:	d007      	beq.n	3fb60 <boot_set_confirmed_multi+0x38>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   3fb50:	f89d 300b 	ldrb.w	r3, [sp, #11]
   3fb54:	2b03      	cmp	r3, #3
   3fb56:	d103      	bne.n	3fb60 <boot_set_confirmed_multi+0x38>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   3fb58:	9801      	ldr	r0, [sp, #4]
   3fb5a:	f7ff ffd8 	bl	3fb0e <boot_write_image_ok>
   3fb5e:	4604      	mov	r4, r0

done:
    flash_area_close(fap);
   3fb60:	9801      	ldr	r0, [sp, #4]
   3fb62:	f7fd fd22 	bl	3d5aa <flash_area_close>
    return rc;
}
   3fb66:	4620      	mov	r0, r4
   3fb68:	b004      	add	sp, #16
   3fb6a:	bd10      	pop	{r4, pc}
    switch (state_primary_slot.magic) {
   3fb6c:	2404      	movs	r4, #4
   3fb6e:	e7f7      	b.n	3fb60 <boot_set_confirmed_multi+0x38>
        return BOOT_EFLASH;
   3fb70:	2401      	movs	r4, #1
   3fb72:	e7f8      	b.n	3fb66 <boot_set_confirmed_multi+0x3e>

0003fb74 <boot_set_confirmed>:
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
    return boot_set_confirmed_multi(0);
   3fb74:	2000      	movs	r0, #0
   3fb76:	f7ff bfd7 	b.w	3fb28 <boot_set_confirmed_multi>

0003fb7a <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   3fb7a:	2000      	movs	r0, #0
   3fb7c:	4770      	bx	lr

0003fb7e <parse_hex4>:
    for (i = 0; i < 4; i++)
   3fb7e:	2200      	movs	r2, #0
{
   3fb80:	b510      	push	{r4, lr}
   3fb82:	4604      	mov	r4, r0
    unsigned int h = 0;
   3fb84:	4610      	mov	r0, r2
        if ((input[i] >= '0') && (input[i] <= '9'))
   3fb86:	5ca1      	ldrb	r1, [r4, r2]
   3fb88:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3fb8c:	2b09      	cmp	r3, #9
   3fb8e:	d80b      	bhi.n	3fba8 <parse_hex4+0x2a>
            h += (unsigned int) input[i] - '0';
   3fb90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        if (i < 3)
   3fb94:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   3fb96:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
   3fb9a:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   3fb9e:	bf18      	it	ne
   3fba0:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
   3fba2:	2a04      	cmp	r2, #4
   3fba4:	d1ef      	bne.n	3fb86 <parse_hex4+0x8>
}
   3fba6:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   3fba8:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   3fbac:	2b05      	cmp	r3, #5
   3fbae:	d802      	bhi.n	3fbb6 <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
   3fbb0:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
   3fbb4:	e7ee      	b.n	3fb94 <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   3fbb6:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   3fbba:	2b05      	cmp	r3, #5
   3fbbc:	d802      	bhi.n	3fbc4 <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
   3fbbe:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
   3fbc2:	e7e7      	b.n	3fb94 <parse_hex4+0x16>
            return 0;
   3fbc4:	2000      	movs	r0, #0
   3fbc6:	e7ee      	b.n	3fba6 <parse_hex4+0x28>

0003fbc8 <buffer_skip_whitespace>:
{
   3fbc8:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   3fbca:	b128      	cbz	r0, 3fbd8 <buffer_skip_whitespace+0x10>
   3fbcc:	6801      	ldr	r1, [r0, #0]
   3fbce:	b189      	cbz	r1, 3fbf4 <buffer_skip_whitespace+0x2c>
    if (cannot_access_at_index(buffer, 0))
   3fbd0:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
   3fbd4:	429a      	cmp	r2, r3
   3fbd6:	d302      	bcc.n	3fbde <buffer_skip_whitespace+0x16>
}
   3fbd8:	bd10      	pop	{r4, pc}
       buffer->offset++;
   3fbda:	3201      	adds	r2, #1
   3fbdc:	6082      	str	r2, [r0, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   3fbde:	6882      	ldr	r2, [r0, #8]
   3fbe0:	4293      	cmp	r3, r2
   3fbe2:	d903      	bls.n	3fbec <buffer_skip_whitespace+0x24>
   3fbe4:	5c8c      	ldrb	r4, [r1, r2]
   3fbe6:	2c20      	cmp	r4, #32
   3fbe8:	d9f7      	bls.n	3fbda <buffer_skip_whitespace+0x12>
   3fbea:	e7f5      	b.n	3fbd8 <buffer_skip_whitespace+0x10>
    if (buffer->offset == buffer->length)
   3fbec:	d1f4      	bne.n	3fbd8 <buffer_skip_whitespace+0x10>
        buffer->offset--;
   3fbee:	3b01      	subs	r3, #1
   3fbf0:	6083      	str	r3, [r0, #8]
   3fbf2:	e7f1      	b.n	3fbd8 <buffer_skip_whitespace+0x10>
        return NULL;
   3fbf4:	4608      	mov	r0, r1
   3fbf6:	e7ef      	b.n	3fbd8 <buffer_skip_whitespace+0x10>

0003fbf8 <get_array_item>:
    if (array == NULL)
   3fbf8:	b110      	cbz	r0, 3fc00 <get_array_item+0x8>
    current_child = array->child;
   3fbfa:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   3fbfc:	b100      	cbz	r0, 3fc00 <get_array_item+0x8>
   3fbfe:	b901      	cbnz	r1, 3fc02 <get_array_item+0xa>
}
   3fc00:	4770      	bx	lr
        current_child = current_child->next;
   3fc02:	6800      	ldr	r0, [r0, #0]
        index--;
   3fc04:	3901      	subs	r1, #1
        current_child = current_child->next;
   3fc06:	e7f9      	b.n	3fbfc <get_array_item+0x4>

0003fc08 <update_offset>:
{
   3fc08:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   3fc0a:	4604      	mov	r4, r0
   3fc0c:	b140      	cbz	r0, 3fc20 <update_offset+0x18>
   3fc0e:	6803      	ldr	r3, [r0, #0]
   3fc10:	b133      	cbz	r3, 3fc20 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   3fc12:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   3fc14:	4418      	add	r0, r3
   3fc16:	f7dd fb14 	bl	1d242 <strlen>
   3fc1a:	68a3      	ldr	r3, [r4, #8]
   3fc1c:	4418      	add	r0, r3
   3fc1e:	60a0      	str	r0, [r4, #8]
}
   3fc20:	bd10      	pop	{r4, pc}

0003fc22 <add_item_to_array>:
    if ((item == NULL) || (array == NULL) || (array == item))
   3fc22:	b181      	cbz	r1, 3fc46 <add_item_to_array+0x24>
   3fc24:	b138      	cbz	r0, 3fc36 <add_item_to_array+0x14>
   3fc26:	4281      	cmp	r1, r0
   3fc28:	d00d      	beq.n	3fc46 <add_item_to_array+0x24>
    child = array->child;
   3fc2a:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   3fc2c:	b923      	cbnz	r3, 3fc38 <add_item_to_array+0x16>
        array->child = item;
   3fc2e:	6081      	str	r1, [r0, #8]
        item->next = NULL;
   3fc30:	e9c1 3100 	strd	r3, r1, [r1]
   3fc34:	2001      	movs	r0, #1
}
   3fc36:	4770      	bx	lr
        if (child->prev)
   3fc38:	685a      	ldr	r2, [r3, #4]
   3fc3a:	2a00      	cmp	r2, #0
   3fc3c:	d0fa      	beq.n	3fc34 <add_item_to_array+0x12>
    prev->next = item;
   3fc3e:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   3fc40:	604a      	str	r2, [r1, #4]
            array->child->prev = item;
   3fc42:	6059      	str	r1, [r3, #4]
   3fc44:	e7f6      	b.n	3fc34 <add_item_to_array+0x12>
        return false;
   3fc46:	2000      	movs	r0, #0
   3fc48:	4770      	bx	lr

0003fc4a <ensure>:
{
   3fc4a:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   3fc4c:	4604      	mov	r4, r0
   3fc4e:	b1b8      	cbz	r0, 3fc80 <ensure+0x36>
   3fc50:	6805      	ldr	r5, [r0, #0]
   3fc52:	b165      	cbz	r5, 3fc6e <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   3fc54:	6842      	ldr	r2, [r0, #4]
   3fc56:	b112      	cbz	r2, 3fc5e <ensure+0x14>
   3fc58:	6883      	ldr	r3, [r0, #8]
   3fc5a:	429a      	cmp	r2, r3
   3fc5c:	d910      	bls.n	3fc80 <ensure+0x36>
    if (needed > INT_MAX)
   3fc5e:	2900      	cmp	r1, #0
   3fc60:	db0e      	blt.n	3fc80 <ensure+0x36>
    needed += p->offset + 1;
   3fc62:	68a0      	ldr	r0, [r4, #8]
   3fc64:	4401      	add	r1, r0
   3fc66:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   3fc68:	429a      	cmp	r2, r3
   3fc6a:	d302      	bcc.n	3fc72 <ensure+0x28>
        return p->buffer + p->offset;
   3fc6c:	4405      	add	r5, r0
}
   3fc6e:	4628      	mov	r0, r5
   3fc70:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   3fc72:	6922      	ldr	r2, [r4, #16]
   3fc74:	b922      	cbnz	r2, 3fc80 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   3fc76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   3fc7a:	d303      	bcc.n	3fc84 <ensure+0x3a>
        if (needed <= INT_MAX)
   3fc7c:	2b00      	cmp	r3, #0
   3fc7e:	da0f      	bge.n	3fca0 <ensure+0x56>
        return NULL;
   3fc80:	2500      	movs	r5, #0
   3fc82:	e7f4      	b.n	3fc6e <ensure+0x24>
        newsize = needed + 1;
   3fc84:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   3fc86:	6a23      	ldr	r3, [r4, #32]
   3fc88:	b16b      	cbz	r3, 3fca6 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   3fc8a:	4628      	mov	r0, r5
   3fc8c:	4631      	mov	r1, r6
   3fc8e:	4798      	blx	r3
        if (newbuffer == NULL)
   3fc90:	4605      	mov	r5, r0
   3fc92:	b9b0      	cbnz	r0, 3fcc2 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   3fc94:	69e3      	ldr	r3, [r4, #28]
   3fc96:	6820      	ldr	r0, [r4, #0]
   3fc98:	4798      	blx	r3
            p->buffer = NULL;
   3fc9a:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   3fc9e:	e7e6      	b.n	3fc6e <ensure+0x24>
            newsize = INT_MAX;
   3fca0:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   3fca4:	e7ef      	b.n	3fc86 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   3fca6:	4630      	mov	r0, r6
   3fca8:	69a3      	ldr	r3, [r4, #24]
   3fcaa:	4798      	blx	r3
        if (!newbuffer)
   3fcac:	4605      	mov	r5, r0
   3fcae:	2800      	cmp	r0, #0
   3fcb0:	d0f0      	beq.n	3fc94 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   3fcb2:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3fcb4:	6821      	ldr	r1, [r4, #0]
   3fcb6:	3201      	adds	r2, #1
   3fcb8:	f001 fc83 	bl	415c2 <memcpy>
        p->hooks.deallocate(p->buffer);
   3fcbc:	69e3      	ldr	r3, [r4, #28]
   3fcbe:	6820      	ldr	r0, [r4, #0]
   3fcc0:	4798      	blx	r3
    return newbuffer + p->offset;
   3fcc2:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   3fcc4:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   3fcc8:	441d      	add	r5, r3
   3fcca:	e7d0      	b.n	3fc6e <ensure+0x24>

0003fccc <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   3fccc:	4603      	mov	r3, r0
   3fcce:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   3fcd0:	2028      	movs	r0, #40	; 0x28
   3fcd2:	4798      	blx	r3
    if (node)
   3fcd4:	4604      	mov	r4, r0
   3fcd6:	b118      	cbz	r0, 3fce0 <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   3fcd8:	2228      	movs	r2, #40	; 0x28
   3fcda:	2100      	movs	r1, #0
   3fcdc:	f001 fc91 	bl	41602 <memset>
}
   3fce0:	4620      	mov	r0, r4
   3fce2:	bd10      	pop	{r4, pc}

0003fce4 <cJSON_ParseWithOpts>:
{
   3fce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fce6:	460d      	mov	r5, r1
    if (NULL == value)
   3fce8:	4604      	mov	r4, r0
{
   3fcea:	9201      	str	r2, [sp, #4]
    if (NULL == value)
   3fcec:	b150      	cbz	r0, 3fd04 <cJSON_ParseWithOpts+0x20>
    buffer_length = strlen(value) + sizeof("");
   3fcee:	f7dd faa8 	bl	1d242 <strlen>
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   3fcf2:	462a      	mov	r2, r5
   3fcf4:	1c41      	adds	r1, r0, #1
   3fcf6:	4620      	mov	r0, r4
   3fcf8:	9b01      	ldr	r3, [sp, #4]
}
   3fcfa:	b003      	add	sp, #12
   3fcfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   3fd00:	f7f2 b9dc 	b.w	320bc <cJSON_ParseWithLengthOpts>
}
   3fd04:	b003      	add	sp, #12
   3fd06:	bd30      	pop	{r4, r5, pc}

0003fd08 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   3fd08:	2200      	movs	r2, #0
   3fd0a:	4611      	mov	r1, r2
   3fd0c:	f7ff bfea 	b.w	3fce4 <cJSON_ParseWithOpts>

0003fd10 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   3fd10:	2100      	movs	r1, #0
   3fd12:	f7f2 b93f 	b.w	31f94 <print.constprop.0>

0003fd16 <cJSON_GetArraySize>:
    if (array == NULL)
   3fd16:	b110      	cbz	r0, 3fd1e <cJSON_GetArraySize+0x8>
    child = array->child;
   3fd18:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   3fd1a:	2000      	movs	r0, #0
    while(child != NULL)
   3fd1c:	b903      	cbnz	r3, 3fd20 <cJSON_GetArraySize+0xa>
}
   3fd1e:	4770      	bx	lr
        child = child->next;
   3fd20:	681b      	ldr	r3, [r3, #0]
        size++;
   3fd22:	3001      	adds	r0, #1
        child = child->next;
   3fd24:	e7fa      	b.n	3fd1c <cJSON_GetArraySize+0x6>

0003fd26 <cJSON_GetArrayItem>:
    if (index < 0)
   3fd26:	2900      	cmp	r1, #0
   3fd28:	db01      	blt.n	3fd2e <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   3fd2a:	f7ff bf65 	b.w	3fbf8 <get_array_item>
}
   3fd2e:	2000      	movs	r0, #0
   3fd30:	4770      	bx	lr

0003fd32 <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   3fd32:	2200      	movs	r2, #0
   3fd34:	f7f1 be32 	b.w	3199c <get_object_item>

0003fd38 <cJSON_HasObjectItem>:
{
   3fd38:	b508      	push	{r3, lr}
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
   3fd3a:	f7ff fffa 	bl	3fd32 <cJSON_GetObjectItem>
}
   3fd3e:	3800      	subs	r0, #0
   3fd40:	bf18      	it	ne
   3fd42:	2001      	movne	r0, #1
   3fd44:	bd08      	pop	{r3, pc}

0003fd46 <cJSON_AddItemToArray>:
    return add_item_to_array(array, item);
   3fd46:	f7ff bf6c 	b.w	3fc22 <add_item_to_array>

0003fd4a <cJSON_AddItemToObject>:
    return add_item_to_object(object, string, item, &global_hooks, false);
   3fd4a:	2300      	movs	r3, #0
   3fd4c:	f7f1 bf24 	b.w	31b98 <add_item_to_object.constprop.0>

0003fd50 <cJSON_AddItemToObjectCS>:
    return add_item_to_object(object, string, item, &global_hooks, true);
   3fd50:	2301      	movs	r3, #1
   3fd52:	f7f1 bf21 	b.w	31b98 <add_item_to_object.constprop.0>

0003fd56 <cJSON_DetachItemViaPointer>:
{
   3fd56:	b510      	push	{r4, lr}
    if ((parent == NULL) || (item == NULL))
   3fd58:	b190      	cbz	r0, 3fd80 <cJSON_DetachItemViaPointer+0x2a>
   3fd5a:	b179      	cbz	r1, 3fd7c <cJSON_DetachItemViaPointer+0x26>
    if (item != parent->child)
   3fd5c:	6883      	ldr	r3, [r0, #8]
   3fd5e:	428b      	cmp	r3, r1
        item->prev->next = item->next;
   3fd60:	bf1c      	itt	ne
   3fd62:	e9d1 4200 	ldrdne	r4, r2, [r1]
   3fd66:	6014      	strne	r4, [r2, #0]
    if (item->next != NULL)
   3fd68:	680a      	ldr	r2, [r1, #0]
   3fd6a:	b15a      	cbz	r2, 3fd84 <cJSON_DetachItemViaPointer+0x2e>
        item->next->prev = item->prev;
   3fd6c:	684c      	ldr	r4, [r1, #4]
    if (item == parent->child)
   3fd6e:	428b      	cmp	r3, r1
        item->next->prev = item->prev;
   3fd70:	6054      	str	r4, [r2, #4]
    if (item == parent->child)
   3fd72:	d100      	bne.n	3fd76 <cJSON_DetachItemViaPointer+0x20>
        parent->child = item->next;
   3fd74:	6082      	str	r2, [r0, #8]
    item->prev = NULL;
   3fd76:	2300      	movs	r3, #0
    item->next = NULL;
   3fd78:	e9c1 3300 	strd	r3, r3, [r1]
}
   3fd7c:	4608      	mov	r0, r1
   3fd7e:	bd10      	pop	{r4, pc}
        return NULL;
   3fd80:	4601      	mov	r1, r0
   3fd82:	e7fb      	b.n	3fd7c <cJSON_DetachItemViaPointer+0x26>
    if (item == parent->child)
   3fd84:	428b      	cmp	r3, r1
   3fd86:	d0f5      	beq.n	3fd74 <cJSON_DetachItemViaPointer+0x1e>
        parent->child->prev = item->prev;
   3fd88:	684a      	ldr	r2, [r1, #4]
   3fd8a:	605a      	str	r2, [r3, #4]
   3fd8c:	e7f3      	b.n	3fd76 <cJSON_DetachItemViaPointer+0x20>

0003fd8e <cJSON_DetachItemFromObject>:
{
   3fd8e:	b510      	push	{r4, lr}
   3fd90:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   3fd92:	f7ff ffce 	bl	3fd32 <cJSON_GetObjectItem>
   3fd96:	4601      	mov	r1, r0
    return cJSON_DetachItemViaPointer(object, to_detach);
   3fd98:	4620      	mov	r0, r4
}
   3fd9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   3fd9e:	f7ff bfda 	b.w	3fd56 <cJSON_DetachItemViaPointer>

0003fda2 <cJSON_DeleteItemFromObject>:
{
   3fda2:	b508      	push	{r3, lr}
    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   3fda4:	f7ff fff3 	bl	3fd8e <cJSON_DetachItemFromObject>
}
   3fda8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   3fdac:	f7f2 b962 	b.w	32074 <cJSON_Delete>

0003fdb0 <cJSON_AddNullToObjectCS>:
{
   3fdb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fdb2:	4605      	mov	r5, r0
   3fdb4:	9101      	str	r1, [sp, #4]
    cJSON *null = cJSON_CreateNull();
   3fdb6:	f7f2 f9ef 	bl	32198 <cJSON_CreateNull>
    if (add_item_to_object(object, name, null, &global_hooks, true))
   3fdba:	2301      	movs	r3, #1
   3fdbc:	4602      	mov	r2, r0
    cJSON *null = cJSON_CreateNull();
   3fdbe:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, null, &global_hooks, true))
   3fdc0:	9901      	ldr	r1, [sp, #4]
   3fdc2:	4628      	mov	r0, r5
   3fdc4:	f7f1 fee8 	bl	31b98 <add_item_to_object.constprop.0>
   3fdc8:	4605      	mov	r5, r0
   3fdca:	b918      	cbnz	r0, 3fdd4 <cJSON_AddNullToObjectCS+0x24>
    cJSON_Delete(null);
   3fdcc:	4620      	mov	r0, r4
   3fdce:	f7f2 f951 	bl	32074 <cJSON_Delete>
    return NULL;
   3fdd2:	462c      	mov	r4, r5
}
   3fdd4:	4620      	mov	r0, r4
   3fdd6:	b003      	add	sp, #12
   3fdd8:	bd30      	pop	{r4, r5, pc}

0003fdda <cJSON_AddNumberToObjectCS>:
{
   3fdda:	b570      	push	{r4, r5, r6, lr}
   3fddc:	4605      	mov	r5, r0
   3fdde:	460e      	mov	r6, r1
    cJSON *number_item = cJSON_CreateNumber(number);
   3fde0:	4610      	mov	r0, r2
   3fde2:	4619      	mov	r1, r3
   3fde4:	f7de fc64 	bl	1e6b0 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   3fde8:	2301      	movs	r3, #1
   3fdea:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   3fdec:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   3fdee:	4631      	mov	r1, r6
   3fdf0:	4628      	mov	r0, r5
   3fdf2:	f7f1 fed1 	bl	31b98 <add_item_to_object.constprop.0>
   3fdf6:	4605      	mov	r5, r0
   3fdf8:	b918      	cbnz	r0, 3fe02 <cJSON_AddNumberToObjectCS+0x28>
    cJSON_Delete(number_item);
   3fdfa:	4620      	mov	r0, r4
   3fdfc:	f7f2 f93a 	bl	32074 <cJSON_Delete>
    return NULL;
   3fe00:	462c      	mov	r4, r5
}
   3fe02:	4620      	mov	r0, r4
   3fe04:	bd70      	pop	{r4, r5, r6, pc}

0003fe06 <cJSON_AddNumberToObject>:
{
   3fe06:	b570      	push	{r4, r5, r6, lr}
   3fe08:	4605      	mov	r5, r0
   3fe0a:	460e      	mov	r6, r1
    cJSON *number_item = cJSON_CreateNumber(number);
   3fe0c:	4610      	mov	r0, r2
   3fe0e:	4619      	mov	r1, r3
   3fe10:	f7de fc4e 	bl	1e6b0 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   3fe14:	2300      	movs	r3, #0
   3fe16:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   3fe18:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   3fe1a:	4631      	mov	r1, r6
   3fe1c:	4628      	mov	r0, r5
   3fe1e:	f7f1 febb 	bl	31b98 <add_item_to_object.constprop.0>
   3fe22:	4605      	mov	r5, r0
   3fe24:	b918      	cbnz	r0, 3fe2e <cJSON_AddNumberToObject+0x28>
    cJSON_Delete(number_item);
   3fe26:	4620      	mov	r0, r4
   3fe28:	f7f2 f924 	bl	32074 <cJSON_Delete>
    return NULL;
   3fe2c:	462c      	mov	r4, r5
}
   3fe2e:	4620      	mov	r0, r4
   3fe30:	bd70      	pop	{r4, r5, r6, pc}

0003fe32 <cJSON_AddStringToObjectCS>:
{
   3fe32:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fe34:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   3fe36:	4610      	mov	r0, r2
{
   3fe38:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   3fe3a:	f7f2 f9b9 	bl	321b0 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, true))
   3fe3e:	2301      	movs	r3, #1
   3fe40:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   3fe42:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, true))
   3fe44:	9901      	ldr	r1, [sp, #4]
   3fe46:	4628      	mov	r0, r5
   3fe48:	f7f1 fea6 	bl	31b98 <add_item_to_object.constprop.0>
   3fe4c:	4605      	mov	r5, r0
   3fe4e:	b918      	cbnz	r0, 3fe58 <cJSON_AddStringToObjectCS+0x26>
    cJSON_Delete(string_item);
   3fe50:	4620      	mov	r0, r4
   3fe52:	f7f2 f90f 	bl	32074 <cJSON_Delete>
    return NULL;
   3fe56:	462c      	mov	r4, r5
}
   3fe58:	4620      	mov	r0, r4
   3fe5a:	b003      	add	sp, #12
   3fe5c:	bd30      	pop	{r4, r5, pc}

0003fe5e <cJSON_AddStringToObject>:
{
   3fe5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fe60:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   3fe62:	4610      	mov	r0, r2
{
   3fe64:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   3fe66:	f7f2 f9a3 	bl	321b0 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   3fe6a:	2300      	movs	r3, #0
   3fe6c:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   3fe6e:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   3fe70:	9901      	ldr	r1, [sp, #4]
   3fe72:	4628      	mov	r0, r5
   3fe74:	f7f1 fe90 	bl	31b98 <add_item_to_object.constprop.0>
   3fe78:	4605      	mov	r5, r0
   3fe7a:	b918      	cbnz	r0, 3fe84 <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
   3fe7c:	4620      	mov	r0, r4
   3fe7e:	f7f2 f8f9 	bl	32074 <cJSON_Delete>
    return NULL;
   3fe82:	462c      	mov	r4, r5
}
   3fe84:	4620      	mov	r0, r4
   3fe86:	b003      	add	sp, #12
   3fe88:	bd30      	pop	{r4, r5, pc}

0003fe8a <cJSON_AddArrayToObjectCS>:
{
   3fe8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fe8c:	4605      	mov	r5, r0
   3fe8e:	9101      	str	r1, [sp, #4]
    cJSON *array = cJSON_CreateArray();
   3fe90:	f7f2 f9a6 	bl	321e0 <cJSON_CreateArray>
    if (add_item_to_object(object, name, array, &global_hooks, true))
   3fe94:	2301      	movs	r3, #1
   3fe96:	4602      	mov	r2, r0
    cJSON *array = cJSON_CreateArray();
   3fe98:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, array, &global_hooks, true))
   3fe9a:	9901      	ldr	r1, [sp, #4]
   3fe9c:	4628      	mov	r0, r5
   3fe9e:	f7f1 fe7b 	bl	31b98 <add_item_to_object.constprop.0>
   3fea2:	4605      	mov	r5, r0
   3fea4:	b918      	cbnz	r0, 3feae <cJSON_AddArrayToObjectCS+0x24>
    cJSON_Delete(array);
   3fea6:	4620      	mov	r0, r4
   3fea8:	f7f2 f8e4 	bl	32074 <cJSON_Delete>
    return NULL;
   3feac:	462c      	mov	r4, r5
}
   3feae:	4620      	mov	r0, r4
   3feb0:	b003      	add	sp, #12
   3feb2:	bd30      	pop	{r4, r5, pc}

0003feb4 <cJSON_AddArrayToObject>:
{
   3feb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3feb6:	4605      	mov	r5, r0
   3feb8:	9101      	str	r1, [sp, #4]
    cJSON *array = cJSON_CreateArray();
   3feba:	f7f2 f991 	bl	321e0 <cJSON_CreateArray>
    if (add_item_to_object(object, name, array, &global_hooks, false))
   3febe:	2300      	movs	r3, #0
   3fec0:	4602      	mov	r2, r0
    cJSON *array = cJSON_CreateArray();
   3fec2:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, array, &global_hooks, false))
   3fec4:	9901      	ldr	r1, [sp, #4]
   3fec6:	4628      	mov	r0, r5
   3fec8:	f7f1 fe66 	bl	31b98 <add_item_to_object.constprop.0>
   3fecc:	4605      	mov	r5, r0
   3fece:	b918      	cbnz	r0, 3fed8 <cJSON_AddArrayToObject+0x24>
    cJSON_Delete(array);
   3fed0:	4620      	mov	r0, r4
   3fed2:	f7f2 f8cf 	bl	32074 <cJSON_Delete>
    return NULL;
   3fed6:	462c      	mov	r4, r5
}
   3fed8:	4620      	mov	r0, r4
   3feda:	b003      	add	sp, #12
   3fedc:	bd30      	pop	{r4, r5, pc}

0003fede <cJSON_AddObjectToObjectCS>:
{
   3fede:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fee0:	4605      	mov	r5, r0
   3fee2:	9101      	str	r1, [sp, #4]
    cJSON *object_item = cJSON_CreateObject();
   3fee4:	f7f2 f988 	bl	321f8 <cJSON_CreateObject>
    if (add_item_to_object(object, name, object_item, &global_hooks, true))
   3fee8:	2301      	movs	r3, #1
   3feea:	4602      	mov	r2, r0
    cJSON *object_item = cJSON_CreateObject();
   3feec:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, object_item, &global_hooks, true))
   3feee:	9901      	ldr	r1, [sp, #4]
   3fef0:	4628      	mov	r0, r5
   3fef2:	f7f1 fe51 	bl	31b98 <add_item_to_object.constprop.0>
   3fef6:	4605      	mov	r5, r0
   3fef8:	b918      	cbnz	r0, 3ff02 <cJSON_AddObjectToObjectCS+0x24>
    cJSON_Delete(object_item);
   3fefa:	4620      	mov	r0, r4
   3fefc:	f7f2 f8ba 	bl	32074 <cJSON_Delete>
    return NULL;
   3ff00:	462c      	mov	r4, r5
}
   3ff02:	4620      	mov	r0, r4
   3ff04:	b003      	add	sp, #12
   3ff06:	bd30      	pop	{r4, r5, pc}

0003ff08 <cJSON_AddObjectToObject>:
{
   3ff08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3ff0a:	4605      	mov	r5, r0
   3ff0c:	9101      	str	r1, [sp, #4]
    cJSON *object_item = cJSON_CreateObject();
   3ff0e:	f7f2 f973 	bl	321f8 <cJSON_CreateObject>
    if (add_item_to_object(object, name, object_item, &global_hooks, false))
   3ff12:	2300      	movs	r3, #0
   3ff14:	4602      	mov	r2, r0
    cJSON *object_item = cJSON_CreateObject();
   3ff16:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, object_item, &global_hooks, false))
   3ff18:	9901      	ldr	r1, [sp, #4]
   3ff1a:	4628      	mov	r0, r5
   3ff1c:	f7f1 fe3c 	bl	31b98 <add_item_to_object.constprop.0>
   3ff20:	4605      	mov	r5, r0
   3ff22:	b918      	cbnz	r0, 3ff2c <cJSON_AddObjectToObject+0x24>
    cJSON_Delete(object_item);
   3ff24:	4620      	mov	r0, r4
   3ff26:	f7f2 f8a5 	bl	32074 <cJSON_Delete>
    return NULL;
   3ff2a:	462c      	mov	r4, r5
}
   3ff2c:	4620      	mov	r0, r4
   3ff2e:	b003      	add	sp, #12
   3ff30:	bd30      	pop	{r4, r5, pc}

0003ff32 <cJSON_IsNull>:
    if (item == NULL)
   3ff32:	b118      	cbz	r0, 3ff3c <cJSON_IsNull+0xa>
    return (item->type & 0xFF) == cJSON_NULL;
   3ff34:	7b00      	ldrb	r0, [r0, #12]
   3ff36:	1f03      	subs	r3, r0, #4
   3ff38:	4258      	negs	r0, r3
   3ff3a:	4158      	adcs	r0, r3
}
   3ff3c:	4770      	bx	lr

0003ff3e <cJSON_IsNumber>:
    if (item == NULL)
   3ff3e:	b120      	cbz	r0, 3ff4a <cJSON_IsNumber+0xc>
    return (item->type & 0xFF) == cJSON_Number;
   3ff40:	7b00      	ldrb	r0, [r0, #12]
   3ff42:	f1a0 0308 	sub.w	r3, r0, #8
   3ff46:	4258      	negs	r0, r3
   3ff48:	4158      	adcs	r0, r3
}
   3ff4a:	4770      	bx	lr

0003ff4c <cJSON_IsString>:
    if (item == NULL)
   3ff4c:	b120      	cbz	r0, 3ff58 <cJSON_IsString+0xc>
    return (item->type & 0xFF) == cJSON_String;
   3ff4e:	7b00      	ldrb	r0, [r0, #12]
   3ff50:	f1a0 0310 	sub.w	r3, r0, #16
   3ff54:	4258      	negs	r0, r3
   3ff56:	4158      	adcs	r0, r3
}
   3ff58:	4770      	bx	lr

0003ff5a <cJSON_GetStringValue>:
{
   3ff5a:	b508      	push	{r3, lr}
   3ff5c:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) 
   3ff5e:	f7ff fff5 	bl	3ff4c <cJSON_IsString>
   3ff62:	b100      	cbz	r0, 3ff66 <cJSON_GetStringValue+0xc>
    return item->valuestring;
   3ff64:	6910      	ldr	r0, [r2, #16]
}
   3ff66:	bd08      	pop	{r3, pc}

0003ff68 <cJSON_IsArray>:
    if (item == NULL)
   3ff68:	b120      	cbz	r0, 3ff74 <cJSON_IsArray+0xc>
    return (item->type & 0xFF) == cJSON_Array;
   3ff6a:	7b00      	ldrb	r0, [r0, #12]
   3ff6c:	f1a0 0320 	sub.w	r3, r0, #32
   3ff70:	4258      	negs	r0, r3
   3ff72:	4158      	adcs	r0, r3
}
   3ff74:	4770      	bx	lr

0003ff76 <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   3ff76:	f001 ba9a 	b.w	414ae <k_malloc>

0003ff7a <free_fn_hook>:
   3ff7a:	f001 ba91 	b.w	414a0 <k_free>

0003ff7e <cJSON_FreeString>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   3ff7e:	f001 ba8f 	b.w	414a0 <k_free>

0003ff82 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   3ff82:	4700      	bx	r0

0003ff84 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   3ff84:	f001 b9af 	b.w	412e6 <z_impl_k_busy_wait>

0003ff88 <nrf_gpio_pin_present_check>:
    switch (port)
   3ff88:	0943      	lsrs	r3, r0, #5
   3ff8a:	bf0c      	ite	eq
   3ff8c:	f04f 33ff 	moveq.w	r3, #4294967295
   3ff90:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   3ff92:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3ff96:	fa23 f000 	lsr.w	r0, r3, r0
}
   3ff9a:	f000 0001 	and.w	r0, r0, #1
   3ff9e:	4770      	bx	lr

0003ffa0 <pin_is_task_output>:
{
   3ffa0:	b508      	push	{r3, lr}
   3ffa2:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3ffa4:	f7f2 fb26 	bl	325f4 <pin_is_output>
   3ffa8:	b110      	cbz	r0, 3ffb0 <pin_is_task_output+0x10>
   3ffaa:	4610      	mov	r0, r2
   3ffac:	f7f2 fb0c 	bl	325c8 <pin_in_use_by_te>
}
   3ffb0:	f000 0001 	and.w	r0, r0, #1
   3ffb4:	bd08      	pop	{r3, pc}

0003ffb6 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   3ffb6:	0080      	lsls	r0, r0, #2
}
   3ffb8:	f500 7080 	add.w	r0, r0, #256	; 0x100
   3ffbc:	4770      	bx	lr

0003ffbe <nrf_gpio_reconfigure>:
{
   3ffbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3ffc2:	4690      	mov	r8, r2
   3ffc4:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   3ffc8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3ffca:	a801      	add	r0, sp, #4
{
   3ffcc:	460e      	mov	r6, r1
   3ffce:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3ffd0:	f7f2 fb94 	bl	326fc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3ffd4:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3ffd6:	f1b8 0f00 	cmp.w	r8, #0
   3ffda:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   3ffde:	bf14      	ite	ne
   3ffe0:	2302      	movne	r3, #2
   3ffe2:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3ffe4:	2e00      	cmp	r6, #0
   3ffe6:	bf18      	it	ne
   3ffe8:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3ffec:	2d00      	cmp	r5, #0
   3ffee:	bf14      	ite	ne
   3fff0:	210c      	movne	r1, #12
   3fff2:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3fff4:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3fff6:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3fffa:	bf14      	ite	ne
   3fffc:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   40000:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   40002:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   40004:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   40008:	bf14      	ite	ne
   4000a:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   4000e:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   40010:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   40014:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   40016:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   4001a:	b106      	cbz	r6, 4001e <CONFIG_PM_SRAM_SIZE+0x1e>
   4001c:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   4001e:	f1b8 0f00 	cmp.w	r8, #0
   40022:	d003      	beq.n	4002c <CONFIG_PM_SRAM_SIZE+0x2c>
   40024:	f898 8000 	ldrb.w	r8, [r8]
   40028:	ea4f 0848 	mov.w	r8, r8, lsl #1
   4002c:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   4002e:	b10d      	cbz	r5, 40034 <CONFIG_PM_SRAM_SIZE+0x34>
   40030:	782d      	ldrb	r5, [r5, #0]
   40032:	00ad      	lsls	r5, r5, #2
   40034:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   40038:	b10c      	cbz	r4, 4003e <CONFIG_PM_SRAM_SIZE+0x3e>
   4003a:	7822      	ldrb	r2, [r4, #0]
   4003c:	0214      	lsls	r4, r2, #8
   4003e:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   40040:	b10f      	cbz	r7, 40046 <CONFIG_PM_SRAM_SIZE+0x46>
   40042:	783f      	ldrb	r7, [r7, #0]
   40044:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   40046:	432c      	orrs	r4, r5
   40048:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   4004a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   4004e:	b002      	add	sp, #8
   40050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00040054 <nrf_gpio_cfg_sense_set>:
{
   40054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   40056:	f10d 030f 	add.w	r3, sp, #15
   4005a:	9301      	str	r3, [sp, #4]
   4005c:	2300      	movs	r3, #0
{
   4005e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   40062:	461a      	mov	r2, r3
   40064:	4619      	mov	r1, r3
   40066:	9300      	str	r3, [sp, #0]
   40068:	f7ff ffa9 	bl	3ffbe <nrf_gpio_reconfigure>
}
   4006c:	b005      	add	sp, #20
   4006e:	f85d fb04 	ldr.w	pc, [sp], #4

00040072 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   40072:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   40076:	4770      	bx	lr

00040078 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   40078:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   4007c:	4770      	bx	lr

0004007e <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   4007e:	f44f 7080 	mov.w	r0, #256	; 0x100
   40082:	4770      	bx	lr

00040084 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   40084:	7b0b      	ldrb	r3, [r1, #12]
   40086:	2b03      	cmp	r3, #3
   40088:	d82a      	bhi.n	400e0 <xfer_completeness_check+0x5c>
   4008a:	e8df f003 	tbb	[pc, r3]
   4008e:	2622      	.short	0x2622
   40090:	021a      	.short	0x021a
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   40092:	688b      	ldr	r3, [r1, #8]
   40094:	035a      	lsls	r2, r3, #13
   40096:	d504      	bpl.n	400a2 <xfer_completeness_check+0x1e>
    return p_reg->TXD.AMOUNT;
   40098:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
   4009c:	690a      	ldr	r2, [r1, #16]
   4009e:	429a      	cmp	r2, r3
   400a0:	d107      	bne.n	400b2 <xfer_completeness_check+0x2e>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   400a2:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   400a4:	035b      	lsls	r3, r3, #13
   400a6:	d41b      	bmi.n	400e0 <xfer_completeness_check+0x5c>
   400a8:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   400ac:	694a      	ldr	r2, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   400ae:	429a      	cmp	r2, r3
   400b0:	d016      	beq.n	400e0 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   400b2:	2300      	movs	r3, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   400b4:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   400b6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   400ba:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
}
   400be:	4618      	mov	r0, r3
   400c0:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   400c2:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   400c6:	690a      	ldr	r2, [r1, #16]
   400c8:	429a      	cmp	r2, r3
   400ca:	d1f2      	bne.n	400b2 <xfer_completeness_check+0x2e>
    return p_reg->RXD.AMOUNT;
   400cc:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   400d0:	e7ec      	b.n	400ac <xfer_completeness_check+0x28>
    return p_reg->TXD.AMOUNT;
   400d2:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   400d6:	690a      	ldr	r2, [r1, #16]
   400d8:	e7e9      	b.n	400ae <xfer_completeness_check+0x2a>
    return p_reg->RXD.AMOUNT;
   400da:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   400de:	e7fa      	b.n	400d6 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   400e0:	2001      	movs	r0, #1
}
   400e2:	4770      	bx	lr

000400e4 <nrf_gpio_pin_set>:
{
   400e4:	b507      	push	{r0, r1, r2, lr}
   400e6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   400e8:	a801      	add	r0, sp, #4
   400ea:	f7f3 fbb9 	bl	33860 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   400ee:	2301      	movs	r3, #1
   400f0:	9a01      	ldr	r2, [sp, #4]
   400f2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   400f4:	6083      	str	r3, [r0, #8]
}
   400f6:	b003      	add	sp, #12
   400f8:	f85d fb04 	ldr.w	pc, [sp], #4

000400fc <rpc_handle_ctrl_message>:
   400fc:	2902      	cmp	r1, #2
   400fe:	b510      	push	{r4, lr}
   40100:	4604      	mov	r4, r0
   40102:	d005      	beq.n	40110 <rpc_handle_ctrl_message+0x14>
   40104:	2904      	cmp	r1, #4
   40106:	d001      	beq.n	4010c <rpc_handle_ctrl_message+0x10>
   40108:	2901      	cmp	r1, #1
   4010a:	d107      	bne.n	4011c <rpc_handle_ctrl_message+0x20>
   4010c:	2000      	movs	r0, #0
   4010e:	bd10      	pop	{r4, pc}
   40110:	6880      	ldr	r0, [r0, #8]
   40112:	2800      	cmp	r0, #0
   40114:	d0fa      	beq.n	4010c <rpc_handle_ctrl_message+0x10>
   40116:	f000 f833 	bl	40180 <rpc_transport_local_data_free>
   4011a:	e7f7      	b.n	4010c <rpc_handle_ctrl_message+0x10>
   4011c:	6880      	ldr	r0, [r0, #8]
   4011e:	b108      	cbz	r0, 40124 <rpc_handle_ctrl_message+0x28>
   40120:	f000 f82e 	bl	40180 <rpc_transport_local_data_free>
   40124:	4620      	mov	r0, r4
   40126:	f000 f827 	bl	40178 <rpc_transport_msg_free>
   4012a:	e7ef      	b.n	4010c <rpc_handle_ctrl_message+0x10>

0004012c <rpc_message_send>:
   4012c:	6843      	ldr	r3, [r0, #4]
   4012e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   40132:	f043 0302 	orr.w	r3, r3, #2
   40136:	6043      	str	r3, [r0, #4]
   40138:	f000 b826 	b.w	40188 <rpc_transport_data_msg_send>

0004013c <rpc_message_alloc>:
   4013c:	b570      	push	{r4, r5, r6, lr}
   4013e:	4606      	mov	r6, r0
   40140:	b130      	cbz	r0, 40150 <rpc_message_alloc+0x14>
   40142:	f000 f81b 	bl	4017c <rpc_transport_data_alloc>
   40146:	4605      	mov	r5, r0
   40148:	b918      	cbnz	r0, 40152 <rpc_message_alloc+0x16>
   4014a:	2400      	movs	r4, #0
   4014c:	4620      	mov	r0, r4
   4014e:	bd70      	pop	{r4, r5, r6, pc}
   40150:	4605      	mov	r5, r0
   40152:	f000 f80f 	bl	40174 <rpc_transport_data_msg_alloc>
   40156:	4604      	mov	r4, r0
   40158:	b110      	cbz	r0, 40160 <rpc_message_alloc+0x24>
   4015a:	60c6      	str	r6, [r0, #12]
   4015c:	6085      	str	r5, [r0, #8]
   4015e:	e7f5      	b.n	4014c <rpc_message_alloc+0x10>
   40160:	2d00      	cmp	r5, #0
   40162:	d0f2      	beq.n	4014a <rpc_message_alloc+0xe>
   40164:	4628      	mov	r0, r5
   40166:	f000 f80b 	bl	40180 <rpc_transport_local_data_free>
   4016a:	e7ef      	b.n	4014c <rpc_message_alloc+0x10>

0004016c <rpc_message_free>:
   4016c:	f000 b804 	b.w	40178 <rpc_transport_msg_free>

00040170 <rpc_message_data_free>:
   40170:	f000 b808 	b.w	40184 <rpc_transport_peer_data_free>

00040174 <rpc_transport_data_msg_alloc>:
   40174:	f7f3 befe 	b.w	33f74 <rpc_transport_ipc_data_msg_alloc>

00040178 <rpc_transport_msg_free>:
   40178:	f7f3 bf4e 	b.w	34018 <rpc_transport_ipc_msg_free>

0004017c <rpc_transport_data_alloc>:
   4017c:	f7f3 bf2e 	b.w	33fdc <rpc_transport_ipc_data_alloc>

00040180 <rpc_transport_local_data_free>:
   40180:	f000 b808 	b.w	40194 <rpc_transport_ipc_local_data_free>

00040184 <rpc_transport_peer_data_free>:
   40184:	f7f3 bf6e 	b.w	34064 <rpc_transport_ipc_peer_data_free>

00040188 <rpc_transport_data_msg_send>:
   40188:	f7f3 beb8 	b.w	33efc <rpc_transport_ipc_data_msg_send>

0004018c <rpc_transport_rx_data_suspend>:
   4018c:	f000 b809 	b.w	401a2 <rpc_transport_ipc_rx_data_suspend>

00040190 <rpc_transport_rx_data_resume>:
   40190:	f000 b80a 	b.w	401a8 <rpc_transport_ipc_rx_data_resume>

00040194 <rpc_transport_ipc_local_data_free>:
   40194:	b508      	push	{r3, lr}
   40196:	f7e5 fd0f 	bl	25bb8 <nrf_modem_os_shm_tx_free>
   4019a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   4019e:	f7e5 bcb1 	b.w	25b04 <nrf_modem_os_application_irq_set>

000401a2 <rpc_transport_ipc_rx_data_suspend>:
   401a2:	2004      	movs	r0, #4
   401a4:	f7f2 be92 	b.w	32ecc <nrfx_ipc_receive_event_disable>

000401a8 <rpc_transport_ipc_rx_data_resume>:
   401a8:	2004      	movs	r0, #4
   401aa:	f7f2 be71 	b.w	32e90 <nrfx_ipc_receive_event_enable>

000401ae <rpc_client_request_alloc>:
   401ae:	b508      	push	{r3, lr}
   401b0:	f7ff ffc4 	bl	4013c <rpc_message_alloc>
   401b4:	b100      	cbz	r0, 401b8 <rpc_client_request_alloc+0xa>
   401b6:	3008      	adds	r0, #8
   401b8:	bd08      	pop	{r3, pc}

000401ba <rpc_client_request_send>:
   401ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   401be:	4610      	mov	r0, r2
   401c0:	f840 1d08 	str.w	r1, [r0, #-8]!
   401c4:	f7ff bfb2 	b.w	4012c <rpc_message_send>

000401c8 <rpc_client_message_free>:
   401c8:	3808      	subs	r0, #8
   401ca:	f7ff bfcf 	b.w	4016c <rpc_message_free>

000401ce <rpc_client_data_free>:
   401ce:	f7ff bfcf 	b.w	40170 <rpc_message_data_free>

000401d2 <rpc_gnss_serialize_utc>:
   401d2:	b1c0      	cbz	r0, 40206 <rpc_gnss_serialize_utc+0x34>
   401d4:	b1b9      	cbz	r1, 40206 <rpc_gnss_serialize_utc+0x34>
   401d6:	2301      	movs	r3, #1
   401d8:	700b      	strb	r3, [r1, #0]
   401da:	2300      	movs	r3, #0
   401dc:	704b      	strb	r3, [r1, #1]
   401de:	6843      	ldr	r3, [r0, #4]
   401e0:	f8c1 3006 	str.w	r3, [r1, #6]
   401e4:	6803      	ldr	r3, [r0, #0]
   401e6:	f8c1 3002 	str.w	r3, [r1, #2]
   401ea:	7a83      	ldrb	r3, [r0, #10]
   401ec:	730b      	strb	r3, [r1, #12]
   401ee:	7b43      	ldrb	r3, [r0, #13]
   401f0:	73cb      	strb	r3, [r1, #15]
   401f2:	7b03      	ldrb	r3, [r0, #12]
   401f4:	738b      	strb	r3, [r1, #14]
   401f6:	7a03      	ldrb	r3, [r0, #8]
   401f8:	728b      	strb	r3, [r1, #10]
   401fa:	7ac3      	ldrb	r3, [r0, #11]
   401fc:	734b      	strb	r3, [r1, #13]
   401fe:	7a43      	ldrb	r3, [r0, #9]
   40200:	2010      	movs	r0, #16
   40202:	72cb      	strb	r3, [r1, #11]
   40204:	4770      	bx	lr
   40206:	f04f 30ff 	mov.w	r0, #4294967295
   4020a:	4770      	bx	lr

0004020c <rpc_gnss_serialize_ephe>:
   4020c:	2800      	cmp	r0, #0
   4020e:	d044      	beq.n	4029a <rpc_gnss_serialize_ephe+0x8e>
   40210:	2900      	cmp	r1, #0
   40212:	d042      	beq.n	4029a <rpc_gnss_serialize_ephe+0x8e>
   40214:	2302      	movs	r3, #2
   40216:	700b      	strb	r3, [r1, #0]
   40218:	2300      	movs	r3, #0
   4021a:	704b      	strb	r3, [r1, #1]
   4021c:	68c3      	ldr	r3, [r0, #12]
   4021e:	f8c1 300b 	str.w	r3, [r1, #11]
   40222:	8903      	ldrh	r3, [r0, #8]
   40224:	f8a1 3009 	strh.w	r3, [r1, #9]
   40228:	7983      	ldrb	r3, [r0, #6]
   4022a:	720b      	strb	r3, [r1, #8]
   4022c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   40230:	878b      	strh	r3, [r1, #60]	; 0x3c
   40232:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   40234:	86cb      	strh	r3, [r1, #54]	; 0x36
   40236:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   4023a:	874b      	strh	r3, [r1, #58]	; 0x3a
   4023c:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   4023e:	868b      	strh	r3, [r1, #52]	; 0x34
   40240:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   40244:	87cb      	strh	r3, [r1, #62]	; 0x3e
   40246:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   4024a:	870b      	strh	r3, [r1, #56]	; 0x38
   4024c:	8b83      	ldrh	r3, [r0, #28]
   4024e:	830b      	strh	r3, [r1, #24]
   40250:	6a83      	ldr	r3, [r0, #40]	; 0x28
   40252:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   40256:	7c83      	ldrb	r3, [r0, #18]
   40258:	744b      	strb	r3, [r1, #17]
   4025a:	7843      	ldrb	r3, [r0, #1]
   4025c:	70cb      	strb	r3, [r1, #3]
   4025e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   40260:	62cb      	str	r3, [r1, #44]	; 0x2c
   40262:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   40264:	84cb      	strh	r3, [r1, #38]	; 0x26
   40266:	8843      	ldrh	r3, [r0, #2]
   40268:	808b      	strh	r3, [r1, #4]
   4026a:	6a03      	ldr	r3, [r0, #32]
   4026c:	f8c1 301a 	str.w	r3, [r1, #26]
   40270:	6b83      	ldr	r3, [r0, #56]	; 0x38
   40272:	630b      	str	r3, [r1, #48]	; 0x30
   40274:	6a43      	ldr	r3, [r0, #36]	; 0x24
   40276:	f8c1 301e 	str.w	r3, [r1, #30]
   4027a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   4027c:	628b      	str	r3, [r1, #40]	; 0x28
   4027e:	7803      	ldrb	r3, [r0, #0]
   40280:	708b      	strb	r3, [r1, #2]
   40282:	7c03      	ldrb	r3, [r0, #16]
   40284:	73cb      	strb	r3, [r1, #15]
   40286:	8883      	ldrh	r3, [r0, #4]
   40288:	80cb      	strh	r3, [r1, #6]
   4028a:	8a83      	ldrh	r3, [r0, #20]
   4028c:	824b      	strh	r3, [r1, #18]
   4028e:	7c43      	ldrb	r3, [r0, #17]
   40290:	740b      	strb	r3, [r1, #16]
   40292:	6983      	ldr	r3, [r0, #24]
   40294:	2040      	movs	r0, #64	; 0x40
   40296:	614b      	str	r3, [r1, #20]
   40298:	4770      	bx	lr
   4029a:	f04f 30ff 	mov.w	r0, #4294967295
   4029e:	4770      	bx	lr

000402a0 <rpc_gnss_serialize_alm>:
   402a0:	b340      	cbz	r0, 402f4 <rpc_gnss_serialize_alm+0x54>
   402a2:	b339      	cbz	r1, 402f4 <rpc_gnss_serialize_alm+0x54>
   402a4:	2303      	movs	r3, #3
   402a6:	700b      	strb	r3, [r1, #0]
   402a8:	2300      	movs	r3, #0
   402aa:	704b      	strb	r3, [r1, #1]
   402ac:	8b83      	ldrh	r3, [r0, #28]
   402ae:	f8a1 301d 	strh.w	r3, [r1, #29]
   402b2:	8bc3      	ldrh	r3, [r0, #30]
   402b4:	f8a1 301f 	strh.w	r3, [r1, #31]
   402b8:	88c3      	ldrh	r3, [r0, #6]
   402ba:	810b      	strh	r3, [r1, #8]
   402bc:	8883      	ldrh	r3, [r0, #4]
   402be:	80cb      	strh	r3, [r1, #6]
   402c0:	78c3      	ldrb	r3, [r0, #3]
   402c2:	714b      	strb	r3, [r1, #5]
   402c4:	6983      	ldr	r3, [r0, #24]
   402c6:	f8c1 3019 	str.w	r3, [r1, #25]
   402ca:	6903      	ldr	r3, [r0, #16]
   402cc:	f8c1 3011 	str.w	r3, [r1, #17]
   402d0:	8903      	ldrh	r3, [r0, #8]
   402d2:	814b      	strh	r3, [r1, #10]
   402d4:	68c3      	ldr	r3, [r0, #12]
   402d6:	f8c1 300d 	str.w	r3, [r1, #13]
   402da:	7a83      	ldrb	r3, [r0, #10]
   402dc:	730b      	strb	r3, [r1, #12]
   402de:	7803      	ldrb	r3, [r0, #0]
   402e0:	708b      	strb	r3, [r1, #2]
   402e2:	7883      	ldrb	r3, [r0, #2]
   402e4:	710b      	strb	r3, [r1, #4]
   402e6:	6943      	ldr	r3, [r0, #20]
   402e8:	f8c1 3015 	str.w	r3, [r1, #21]
   402ec:	7843      	ldrb	r3, [r0, #1]
   402ee:	2021      	movs	r0, #33	; 0x21
   402f0:	70cb      	strb	r3, [r1, #3]
   402f2:	4770      	bx	lr
   402f4:	f04f 30ff 	mov.w	r0, #4294967295
   402f8:	4770      	bx	lr

000402fa <rpc_gnss_serialize_klob>:
   402fa:	b1b0      	cbz	r0, 4032a <rpc_gnss_serialize_klob+0x30>
   402fc:	b1a9      	cbz	r1, 4032a <rpc_gnss_serialize_klob+0x30>
   402fe:	2304      	movs	r3, #4
   40300:	700b      	strb	r3, [r1, #0]
   40302:	2300      	movs	r3, #0
   40304:	704b      	strb	r3, [r1, #1]
   40306:	7803      	ldrb	r3, [r0, #0]
   40308:	708b      	strb	r3, [r1, #2]
   4030a:	7843      	ldrb	r3, [r0, #1]
   4030c:	70cb      	strb	r3, [r1, #3]
   4030e:	7883      	ldrb	r3, [r0, #2]
   40310:	710b      	strb	r3, [r1, #4]
   40312:	78c3      	ldrb	r3, [r0, #3]
   40314:	714b      	strb	r3, [r1, #5]
   40316:	7903      	ldrb	r3, [r0, #4]
   40318:	718b      	strb	r3, [r1, #6]
   4031a:	7943      	ldrb	r3, [r0, #5]
   4031c:	71cb      	strb	r3, [r1, #7]
   4031e:	7983      	ldrb	r3, [r0, #6]
   40320:	720b      	strb	r3, [r1, #8]
   40322:	79c3      	ldrb	r3, [r0, #7]
   40324:	200a      	movs	r0, #10
   40326:	724b      	strb	r3, [r1, #9]
   40328:	4770      	bx	lr
   4032a:	f04f 30ff 	mov.w	r0, #4294967295
   4032e:	4770      	bx	lr

00040330 <rpc_gnss_serialize_nequick>:
   40330:	b180      	cbz	r0, 40354 <rpc_gnss_serialize_nequick+0x24>
   40332:	b179      	cbz	r1, 40354 <rpc_gnss_serialize_nequick+0x24>
   40334:	2305      	movs	r3, #5
   40336:	700b      	strb	r3, [r1, #0]
   40338:	2300      	movs	r3, #0
   4033a:	704b      	strb	r3, [r1, #1]
   4033c:	8803      	ldrh	r3, [r0, #0]
   4033e:	804b      	strh	r3, [r1, #2]
   40340:	8843      	ldrh	r3, [r0, #2]
   40342:	808b      	strh	r3, [r1, #4]
   40344:	8883      	ldrh	r3, [r0, #4]
   40346:	80cb      	strh	r3, [r1, #6]
   40348:	7983      	ldrb	r3, [r0, #6]
   4034a:	720b      	strb	r3, [r1, #8]
   4034c:	79c3      	ldrb	r3, [r0, #7]
   4034e:	200a      	movs	r0, #10
   40350:	724b      	strb	r3, [r1, #9]
   40352:	4770      	bx	lr
   40354:	f04f 30ff 	mov.w	r0, #4294967295
   40358:	4770      	bx	lr

0004035a <rpc_gnss_serialize_time_and_sv_tow>:
   4035a:	b570      	push	{r4, r5, r6, lr}
   4035c:	b1e8      	cbz	r0, 4039a <rpc_gnss_serialize_time_and_sv_tow+0x40>
   4035e:	b1e1      	cbz	r1, 4039a <rpc_gnss_serialize_time_and_sv_tow+0x40>
   40360:	2206      	movs	r2, #6
   40362:	2300      	movs	r3, #0
   40364:	700a      	strb	r2, [r1, #0]
   40366:	8802      	ldrh	r2, [r0, #0]
   40368:	704b      	strb	r3, [r1, #1]
   4036a:	804a      	strh	r2, [r1, #2]
   4036c:	68c2      	ldr	r2, [r0, #12]
   4036e:	f101 0410 	add.w	r4, r1, #16
   40372:	f8c1 200a 	str.w	r2, [r1, #10]
   40376:	8902      	ldrh	r2, [r0, #8]
   40378:	810a      	strh	r2, [r1, #8]
   4037a:	6842      	ldr	r2, [r0, #4]
   4037c:	604a      	str	r2, [r1, #4]
   4037e:	8a06      	ldrh	r6, [r0, #16]
   40380:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   40384:	188d      	adds	r5, r1, r2
   40386:	81ee      	strh	r6, [r5, #14]
   40388:	7c85      	ldrb	r5, [r0, #18]
   4038a:	3301      	adds	r3, #1
   4038c:	2b20      	cmp	r3, #32
   4038e:	54a5      	strb	r5, [r4, r2]
   40390:	f100 0004 	add.w	r0, r0, #4
   40394:	d1f3      	bne.n	4037e <rpc_gnss_serialize_time_and_sv_tow+0x24>
   40396:	206e      	movs	r0, #110	; 0x6e
   40398:	bd70      	pop	{r4, r5, r6, pc}
   4039a:	f04f 30ff 	mov.w	r0, #4294967295
   4039e:	e7fb      	b.n	40398 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

000403a0 <rpc_gnss_serialize_location>:
   403a0:	b1c0      	cbz	r0, 403d4 <rpc_gnss_serialize_location+0x34>
   403a2:	b1b9      	cbz	r1, 403d4 <rpc_gnss_serialize_location+0x34>
   403a4:	2307      	movs	r3, #7
   403a6:	700b      	strb	r3, [r1, #0]
   403a8:	2300      	movs	r3, #0
   403aa:	704b      	strb	r3, [r1, #1]
   403ac:	8903      	ldrh	r3, [r0, #8]
   403ae:	814b      	strh	r3, [r1, #10]
   403b0:	7b83      	ldrb	r3, [r0, #14]
   403b2:	740b      	strb	r3, [r1, #16]
   403b4:	6803      	ldr	r3, [r0, #0]
   403b6:	f8c1 3002 	str.w	r3, [r1, #2]
   403ba:	6843      	ldr	r3, [r0, #4]
   403bc:	f8c1 3006 	str.w	r3, [r1, #6]
   403c0:	7b03      	ldrb	r3, [r0, #12]
   403c2:	738b      	strb	r3, [r1, #14]
   403c4:	7b43      	ldrb	r3, [r0, #13]
   403c6:	73cb      	strb	r3, [r1, #15]
   403c8:	7a83      	ldrb	r3, [r0, #10]
   403ca:	730b      	strb	r3, [r1, #12]
   403cc:	7ac3      	ldrb	r3, [r0, #11]
   403ce:	2011      	movs	r0, #17
   403d0:	734b      	strb	r3, [r1, #13]
   403d2:	4770      	bx	lr
   403d4:	f04f 30ff 	mov.w	r0, #4294967295
   403d8:	4770      	bx	lr

000403da <rpc_gnss_serialize_integrity>:
   403da:	b148      	cbz	r0, 403f0 <rpc_gnss_serialize_integrity+0x16>
   403dc:	b141      	cbz	r1, 403f0 <rpc_gnss_serialize_integrity+0x16>
   403de:	2308      	movs	r3, #8
   403e0:	700b      	strb	r3, [r1, #0]
   403e2:	2300      	movs	r3, #0
   403e4:	704b      	strb	r3, [r1, #1]
   403e6:	6803      	ldr	r3, [r0, #0]
   403e8:	2006      	movs	r0, #6
   403ea:	f8c1 3002 	str.w	r3, [r1, #2]
   403ee:	4770      	bx	lr
   403f0:	f04f 30ff 	mov.w	r0, #4294967295
   403f4:	4770      	bx	lr

000403f6 <sock_has_pkt>:
   403f6:	6840      	ldr	r0, [r0, #4]
   403f8:	3800      	subs	r0, #0
   403fa:	bf18      	it	ne
   403fc:	2001      	movne	r0, #1
   403fe:	4770      	bx	lr

00040400 <sock_pkt_append>:
   40400:	2300      	movs	r3, #0
   40402:	600b      	str	r3, [r1, #0]
   40404:	6883      	ldr	r3, [r0, #8]
   40406:	b913      	cbnz	r3, 4040e <sock_pkt_append+0xe>
   40408:	e9c0 1101 	strd	r1, r1, [r0, #4]
   4040c:	4770      	bx	lr
   4040e:	6019      	str	r1, [r3, #0]
   40410:	6081      	str	r1, [r0, #8]
   40412:	4770      	bx	lr

00040414 <sock_pkt_remove>:
   40414:	b538      	push	{r3, r4, r5, lr}
   40416:	4605      	mov	r5, r0
   40418:	460c      	mov	r4, r1
   4041a:	2010      	movs	r0, #16
   4041c:	f7f2 fd56 	bl	32ecc <nrfx_ipc_receive_event_disable>
   40420:	68aa      	ldr	r2, [r5, #8]
   40422:	6823      	ldr	r3, [r4, #0]
   40424:	4294      	cmp	r4, r2
   40426:	606b      	str	r3, [r5, #4]
   40428:	bf08      	it	eq
   4042a:	60ab      	streq	r3, [r5, #8]
   4042c:	2300      	movs	r3, #0
   4042e:	4620      	mov	r0, r4
   40430:	6023      	str	r3, [r4, #0]
   40432:	f000 f90a 	bl	4064a <pkt_free>
   40436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   4043a:	2010      	movs	r0, #16
   4043c:	f7f2 bd28 	b.w	32e90 <nrfx_ipc_receive_event_enable>

00040440 <sock_pkt_peek_head>:
   40440:	6840      	ldr	r0, [r0, #4]
   40442:	4770      	bx	lr

00040444 <sock_is_stream>:
   40444:	6900      	ldr	r0, [r0, #16]
   40446:	1e43      	subs	r3, r0, #1
   40448:	4258      	negs	r0, r3
   4044a:	4158      	adcs	r0, r3
   4044c:	4770      	bx	lr

0004044e <sock_is_datagram>:
   4044e:	6900      	ldr	r0, [r0, #16]
   40450:	1e83      	subs	r3, r0, #2
   40452:	4258      	negs	r0, r3
   40454:	4158      	adcs	r0, r3
   40456:	4770      	bx	lr

00040458 <sock_is_raw>:
   40458:	6900      	ldr	r0, [r0, #16]
   4045a:	1ec3      	subs	r3, r0, #3
   4045c:	4258      	negs	r0, r3
   4045e:	4158      	adcs	r0, r3
   40460:	4770      	bx	lr

00040462 <sock_proto_is_secure>:
   40462:	6940      	ldr	r0, [r0, #20]
   40464:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   40468:	d005      	beq.n	40476 <sock_proto_is_secure+0x14>
   4046a:	f240 1311 	movw	r3, #273	; 0x111
   4046e:	1ac3      	subs	r3, r0, r3
   40470:	4258      	negs	r0, r3
   40472:	4158      	adcs	r0, r3
   40474:	4770      	bx	lr
   40476:	2001      	movs	r0, #1
   40478:	4770      	bx	lr

0004047a <sock_is_connecting>:
   4047a:	7f00      	ldrb	r0, [r0, #28]
   4047c:	f3c0 0080 	ubfx	r0, r0, #2, #1
   40480:	4770      	bx	lr

00040482 <sock_is_connected>:
   40482:	7f00      	ldrb	r0, [r0, #28]
   40484:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   40488:	4770      	bx	lr

0004048a <sock_is_secured>:
   4048a:	7f00      	ldrb	r0, [r0, #28]
   4048c:	f3c0 1000 	ubfx	r0, r0, #4, #1
   40490:	4770      	bx	lr

00040492 <sock_is_nonblock>:
   40492:	6b40      	ldr	r0, [r0, #52]	; 0x34
   40494:	f000 0001 	and.w	r0, r0, #1
   40498:	4770      	bx	lr

0004049a <sock_is_local_closed>:
   4049a:	7f00      	ldrb	r0, [r0, #28]
   4049c:	f000 0001 	and.w	r0, r0, #1
   404a0:	4770      	bx	lr

000404a2 <sock_is_closed>:
   404a2:	7f00      	ldrb	r0, [r0, #28]
   404a4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   404a8:	4770      	bx	lr

000404aa <sock_has_error>:
   404aa:	6983      	ldr	r3, [r0, #24]
   404ac:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   404b0:	bf14      	ite	ne
   404b2:	2001      	movne	r0, #1
   404b4:	2000      	moveq	r0, #0
   404b6:	4770      	bx	lr

000404b8 <sock_has_flow_control>:
   404b8:	7f00      	ldrb	r0, [r0, #28]
   404ba:	f3c0 1080 	ubfx	r0, r0, #6, #1
   404be:	4770      	bx	lr

000404c0 <sock_needs_attach>:
   404c0:	b508      	push	{r3, lr}
   404c2:	4602      	mov	r2, r0
   404c4:	f7ff ffcd 	bl	40462 <sock_proto_is_secure>
   404c8:	b128      	cbz	r0, 404d6 <sock_needs_attach+0x16>
   404ca:	7f10      	ldrb	r0, [r2, #28]
   404cc:	f3c0 1000 	ubfx	r0, r0, #4, #1
   404d0:	f080 0001 	eor.w	r0, r0, #1
   404d4:	b2c0      	uxtb	r0, r0
   404d6:	bd08      	pop	{r3, pc}

000404d8 <sock_can_read>:
   404d8:	6840      	ldr	r0, [r0, #4]
   404da:	3800      	subs	r0, #0
   404dc:	bf18      	it	ne
   404de:	2001      	movne	r0, #1
   404e0:	4770      	bx	lr

000404e2 <sock_can_accept>:
   404e2:	7f00      	ldrb	r0, [r0, #28]
   404e4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   404e8:	4770      	bx	lr

000404ea <sock_can_send>:
   404ea:	b508      	push	{r3, lr}
   404ec:	6903      	ldr	r3, [r0, #16]
   404ee:	4601      	mov	r1, r0
   404f0:	2b01      	cmp	r3, #1
   404f2:	bf0a      	itet	eq
   404f4:	7f02      	ldrbeq	r2, [r0, #28]
   404f6:	2201      	movne	r2, #1
   404f8:	f3c2 02c0 	ubfxeq	r2, r2, #3, #1
   404fc:	f7ff ffb1 	bl	40462 <sock_proto_is_secure>
   40500:	b180      	cbz	r0, 40524 <sock_can_send+0x3a>
   40502:	7f08      	ldrb	r0, [r1, #28]
   40504:	f3c0 1000 	ubfx	r0, r0, #4, #1
   40508:	b142      	cbz	r2, 4051c <sock_can_send+0x32>
   4050a:	b148      	cbz	r0, 40520 <sock_can_send+0x36>
   4050c:	7f0a      	ldrb	r2, [r1, #28]
   4050e:	0793      	lsls	r3, r2, #30
   40510:	d406      	bmi.n	40520 <sock_can_send+0x36>
   40512:	f3c2 1280 	ubfx	r2, r2, #6, #1
   40516:	f082 0201 	eor.w	r2, r2, #1
   4051a:	b2d2      	uxtb	r2, r2
   4051c:	4610      	mov	r0, r2
   4051e:	bd08      	pop	{r3, pc}
   40520:	2200      	movs	r2, #0
   40522:	e7fb      	b.n	4051c <sock_can_send+0x32>
   40524:	2a00      	cmp	r2, #0
   40526:	d1f1      	bne.n	4050c <sock_can_send+0x22>
   40528:	e7f8      	b.n	4051c <sock_can_send+0x32>

0004052a <sock_rcvtimeo_ms_get>:
   4052a:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   4052e:	ea53 0102 	orrs.w	r1, r3, r2
   40532:	d009      	beq.n	40548 <sock_rcvtimeo_ms_get+0x1e>
   40534:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   40538:	fbb3 f0f1 	udiv	r0, r3, r1
   4053c:	fb01 0002 	mla	r0, r1, r2, r0
   40540:	2801      	cmp	r0, #1
   40542:	bfb8      	it	lt
   40544:	2001      	movlt	r0, #1
   40546:	4770      	bx	lr
   40548:	f04f 30ff 	mov.w	r0, #4294967295
   4054c:	4770      	bx	lr

0004054e <sock_sndtimeo_ms_get>:
   4054e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   40552:	ea53 0102 	orrs.w	r1, r3, r2
   40556:	d009      	beq.n	4056c <sock_sndtimeo_ms_get+0x1e>
   40558:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   4055c:	fbb3 f0f1 	udiv	r0, r3, r1
   40560:	fb01 0002 	mla	r0, r1, r2, r0
   40564:	2801      	cmp	r0, #1
   40566:	bfb8      	it	lt
   40568:	2001      	movlt	r0, #1
   4056a:	4770      	bx	lr
   4056c:	f04f 30ff 	mov.w	r0, #4294967295
   40570:	4770      	bx	lr

00040572 <sock_family_is_valid>:
   40572:	1e43      	subs	r3, r0, #1
   40574:	2b01      	cmp	r3, #1
   40576:	d903      	bls.n	40580 <sock_family_is_valid+0xe>
   40578:	1f43      	subs	r3, r0, #5
   4057a:	4258      	negs	r0, r3
   4057c:	4158      	adcs	r0, r3
   4057e:	4770      	bx	lr
   40580:	2001      	movs	r0, #1
   40582:	4770      	bx	lr

00040584 <sock_type_is_valid>:
   40584:	3801      	subs	r0, #1
   40586:	2802      	cmp	r0, #2
   40588:	bf8c      	ite	hi
   4058a:	2000      	movhi	r0, #0
   4058c:	2001      	movls	r0, #1
   4058e:	4770      	bx	lr

00040590 <sock_proto_is_valid>:
   40590:	b150      	cbz	r0, 405a8 <sock_proto_is_valid+0x18>
   40592:	2806      	cmp	r0, #6
   40594:	d008      	beq.n	405a8 <sock_proto_is_valid+0x18>
   40596:	f420 7380 	bic.w	r3, r0, #256	; 0x100
   4059a:	2b11      	cmp	r3, #17
   4059c:	d004      	beq.n	405a8 <sock_proto_is_valid+0x18>
   4059e:	f5a0 7381 	sub.w	r3, r0, #258	; 0x102
   405a2:	4258      	negs	r0, r3
   405a4:	4158      	adcs	r0, r3
   405a6:	4770      	bx	lr
   405a8:	2001      	movs	r0, #1
   405aa:	4770      	bx	lr

000405ac <sock_proto_supports_type>:
   405ac:	2903      	cmp	r1, #3
   405ae:	d015      	beq.n	405dc <sock_proto_supports_type+0x30>
   405b0:	2811      	cmp	r0, #17
   405b2:	d00c      	beq.n	405ce <sock_proto_supports_type+0x22>
   405b4:	dc04      	bgt.n	405c0 <sock_proto_supports_type+0x14>
   405b6:	b188      	cbz	r0, 405dc <sock_proto_supports_type+0x30>
   405b8:	2806      	cmp	r0, #6
   405ba:	d00a      	beq.n	405d2 <sock_proto_supports_type+0x26>
   405bc:	2000      	movs	r0, #0
   405be:	4770      	bx	lr
   405c0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   405c4:	d005      	beq.n	405d2 <sock_proto_supports_type+0x26>
   405c6:	f240 1311 	movw	r3, #273	; 0x111
   405ca:	4298      	cmp	r0, r3
   405cc:	d1f6      	bne.n	405bc <sock_proto_supports_type+0x10>
   405ce:	2902      	cmp	r1, #2
   405d0:	e000      	b.n	405d4 <sock_proto_supports_type+0x28>
   405d2:	2901      	cmp	r1, #1
   405d4:	bf14      	ite	ne
   405d6:	2000      	movne	r0, #0
   405d8:	2001      	moveq	r0, #1
   405da:	4770      	bx	lr
   405dc:	2001      	movs	r0, #1
   405de:	4770      	bx	lr

000405e0 <sock_sockaddr_len_is_valid>:
   405e0:	6843      	ldr	r3, [r0, #4]
   405e2:	2b01      	cmp	r3, #1
   405e4:	d003      	beq.n	405ee <sock_sockaddr_len_is_valid+0xe>
   405e6:	2b02      	cmp	r3, #2
   405e8:	d009      	beq.n	405fe <sock_sockaddr_len_is_valid+0x1e>
   405ea:	2000      	movs	r0, #0
   405ec:	4770      	bx	lr
   405ee:	7803      	ldrb	r3, [r0, #0]
   405f0:	2b10      	cmp	r3, #16
   405f2:	d1fa      	bne.n	405ea <sock_sockaddr_len_is_valid+0xa>
   405f4:	2910      	cmp	r1, #16
   405f6:	bf14      	ite	ne
   405f8:	2000      	movne	r0, #0
   405fa:	2001      	moveq	r0, #1
   405fc:	4770      	bx	lr
   405fe:	7803      	ldrb	r3, [r0, #0]
   40600:	2b24      	cmp	r3, #36	; 0x24
   40602:	d1f2      	bne.n	405ea <sock_sockaddr_len_is_valid+0xa>
   40604:	2924      	cmp	r1, #36	; 0x24
   40606:	e7f6      	b.n	405f6 <sock_sockaddr_len_is_valid+0x16>

00040608 <sock_sockaddr_fam_is_valid>:
   40608:	68c3      	ldr	r3, [r0, #12]
   4060a:	2b01      	cmp	r3, #1
   4060c:	d003      	beq.n	40616 <sock_sockaddr_fam_is_valid+0xe>
   4060e:	2b02      	cmp	r3, #2
   40610:	d007      	beq.n	40622 <sock_sockaddr_fam_is_valid+0x1a>
   40612:	2001      	movs	r0, #1
   40614:	4770      	bx	lr
   40616:	6848      	ldr	r0, [r1, #4]
   40618:	2801      	cmp	r0, #1
   4061a:	bf14      	ite	ne
   4061c:	2000      	movne	r0, #0
   4061e:	2001      	moveq	r0, #1
   40620:	4770      	bx	lr
   40622:	6848      	ldr	r0, [r1, #4]
   40624:	2802      	cmp	r0, #2
   40626:	e7f8      	b.n	4061a <sock_sockaddr_fam_is_valid+0x12>

00040628 <pkt_has_next>:
   40628:	b100      	cbz	r0, 4062c <pkt_has_next+0x4>
   4062a:	6800      	ldr	r0, [r0, #0]
   4062c:	3800      	subs	r0, #0
   4062e:	bf18      	it	ne
   40630:	2001      	movne	r0, #1
   40632:	4770      	bx	lr

00040634 <pkt_peek_next>:
   40634:	b100      	cbz	r0, 40638 <pkt_peek_next+0x4>
   40636:	6800      	ldr	r0, [r0, #0]
   40638:	4770      	bx	lr

0004063a <pkt_bytes_get>:
   4063a:	8943      	ldrh	r3, [r0, #10]
   4063c:	6840      	ldr	r0, [r0, #4]
   4063e:	4418      	add	r0, r3
   40640:	4770      	bx	lr

00040642 <pkt_bytes_left>:
   40642:	8902      	ldrh	r2, [r0, #8]
   40644:	8940      	ldrh	r0, [r0, #10]
   40646:	1a10      	subs	r0, r2, r0
   40648:	4770      	bx	lr

0004064a <pkt_free>:
   4064a:	b510      	push	{r4, lr}
   4064c:	4604      	mov	r4, r0
   4064e:	6840      	ldr	r0, [r0, #4]
   40650:	f7ff fdbd 	bl	401ce <rpc_client_data_free>
   40654:	68e0      	ldr	r0, [r4, #12]
   40656:	b108      	cbz	r0, 4065c <pkt_free+0x12>
   40658:	f7e5 fa92 	bl	25b80 <nrf_modem_os_free>
   4065c:	4620      	mov	r0, r4
   4065e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   40662:	f7e5 ba8d 	b.w	25b80 <nrf_modem_os_free>

00040666 <pkt_flush>:
   40666:	b510      	push	{r4, lr}
   40668:	4604      	mov	r4, r0
   4066a:	6820      	ldr	r0, [r4, #0]
   4066c:	b900      	cbnz	r0, 40670 <pkt_flush+0xa>
   4066e:	bd10      	pop	{r4, pc}
   40670:	6862      	ldr	r2, [r4, #4]
   40672:	6803      	ldr	r3, [r0, #0]
   40674:	4290      	cmp	r0, r2
   40676:	6023      	str	r3, [r4, #0]
   40678:	bf08      	it	eq
   4067a:	6063      	streq	r3, [r4, #4]
   4067c:	f7ff ffe5 	bl	4064a <pkt_free>
   40680:	e7f3      	b.n	4066a <pkt_flush+0x4>

00040682 <on_conf_dnssrv_res>:
   40682:	f000 bce6 	b.w	41052 <res_forward>

00040686 <nrf_freeaddrinfo>:
   40686:	b510      	push	{r4, lr}
   40688:	4604      	mov	r4, r0
   4068a:	b160      	cbz	r0, 406a6 <nrf_freeaddrinfo+0x20>
   4068c:	6940      	ldr	r0, [r0, #20]
   4068e:	b108      	cbz	r0, 40694 <nrf_freeaddrinfo+0xe>
   40690:	f7e5 fa76 	bl	25b80 <nrf_modem_os_free>
   40694:	69a0      	ldr	r0, [r4, #24]
   40696:	b108      	cbz	r0, 4069c <nrf_freeaddrinfo+0x16>
   40698:	f7e5 fa72 	bl	25b80 <nrf_modem_os_free>
   4069c:	4620      	mov	r0, r4
   4069e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   406a2:	f7e5 ba6d 	b.w	25b80 <nrf_modem_os_free>
   406a6:	bd10      	pop	{r4, pc}

000406a8 <nrf_socket>:
   406a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   406ac:	4681      	mov	r9, r0
   406ae:	4688      	mov	r8, r1
   406b0:	4617      	mov	r7, r2
   406b2:	f7ff ff5e 	bl	40572 <sock_family_is_valid>
   406b6:	b938      	cbnz	r0, 406c8 <nrf_socket+0x20>
   406b8:	206a      	movs	r0, #106	; 0x6a
   406ba:	f7e5 f97d 	bl	259b8 <nrf_modem_os_errno_set>
   406be:	f04f 30ff 	mov.w	r0, #4294967295
   406c2:	b003      	add	sp, #12
   406c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   406c8:	4638      	mov	r0, r7
   406ca:	f7ff ff61 	bl	40590 <sock_proto_is_valid>
   406ce:	b908      	cbnz	r0, 406d4 <nrf_socket+0x2c>
   406d0:	207b      	movs	r0, #123	; 0x7b
   406d2:	e7f2      	b.n	406ba <nrf_socket+0x12>
   406d4:	4640      	mov	r0, r8
   406d6:	f7ff ff55 	bl	40584 <sock_type_is_valid>
   406da:	b908      	cbnz	r0, 406e0 <nrf_socket+0x38>
   406dc:	206b      	movs	r0, #107	; 0x6b
   406de:	e7ec      	b.n	406ba <nrf_socket+0x12>
   406e0:	4641      	mov	r1, r8
   406e2:	4638      	mov	r0, r7
   406e4:	f7ff ff62 	bl	405ac <sock_proto_supports_type>
   406e8:	2800      	cmp	r0, #0
   406ea:	d0f7      	beq.n	406dc <nrf_socket+0x34>
   406ec:	f7f3 fdc0 	bl	34270 <sock_open>
   406f0:	4606      	mov	r6, r0
   406f2:	b908      	cbnz	r0, 406f8 <nrf_socket+0x50>
   406f4:	2017      	movs	r0, #23
   406f6:	e7e0      	b.n	406ba <nrf_socket+0x12>
   406f8:	2000      	movs	r0, #0
   406fa:	f7ff fd58 	bl	401ae <rpc_client_request_alloc>
   406fe:	4604      	mov	r4, r0
   40700:	b920      	cbnz	r0, 4070c <nrf_socket+0x64>
   40702:	6830      	ldr	r0, [r6, #0]
   40704:	f7f3 fdea 	bl	342dc <_sock_close>
   40708:	2069      	movs	r0, #105	; 0x69
   4070a:	e7d6      	b.n	406ba <nrf_socket+0x12>
   4070c:	2300      	movs	r3, #0
   4070e:	220c      	movs	r2, #12
   40710:	f04f 35ff 	mov.w	r5, #4294967295
   40714:	7202      	strb	r2, [r0, #8]
   40716:	7243      	strb	r3, [r0, #9]
   40718:	7283      	strb	r3, [r0, #10]
   4071a:	72c3      	strb	r3, [r0, #11]
   4071c:	7405      	strb	r5, [r0, #16]
   4071e:	7445      	strb	r5, [r0, #17]
   40720:	7485      	strb	r5, [r0, #18]
   40722:	74c5      	strb	r5, [r0, #19]
   40724:	4648      	mov	r0, r9
   40726:	f000 fc37 	bl	40f98 <nrf_af_to_rpc_af>
   4072a:	6160      	str	r0, [r4, #20]
   4072c:	4640      	mov	r0, r8
   4072e:	f000 fc36 	bl	40f9e <nrf_type_to_rpc_type>
   40732:	4601      	mov	r1, r0
   40734:	61a0      	str	r0, [r4, #24]
   40736:	4638      	mov	r0, r7
   40738:	f000 fc32 	bl	40fa0 <nrf_proto_to_rpc_proto>
   4073c:	4621      	mov	r1, r4
   4073e:	61e0      	str	r0, [r4, #28]
   40740:	aa01      	add	r2, sp, #4
   40742:	f247 0001 	movw	r0, #28673	; 0x7001
   40746:	f7f4 fc23 	bl	34f90 <req_forward>
   4074a:	4604      	mov	r4, r0
   4074c:	b120      	cbz	r0, 40758 <nrf_socket+0xb0>
   4074e:	4628      	mov	r0, r5
   40750:	f7f3 fdc4 	bl	342dc <_sock_close>
   40754:	4620      	mov	r0, r4
   40756:	e7b0      	b.n	406ba <nrf_socket+0x12>
   40758:	9801      	ldr	r0, [sp, #4]
   4075a:	6983      	ldr	r3, [r0, #24]
   4075c:	e9c6 9803 	strd	r9, r8, [r6, #12]
   40760:	6033      	str	r3, [r6, #0]
   40762:	6177      	str	r7, [r6, #20]
   40764:	f7ff fd30 	bl	401c8 <rpc_client_message_free>
   40768:	6830      	ldr	r0, [r6, #0]
   4076a:	e7aa      	b.n	406c2 <nrf_socket+0x1a>

0004076c <nrf_close>:
   4076c:	b570      	push	{r4, r5, r6, lr}
   4076e:	4606      	mov	r6, r0
   40770:	f7f3 fda2 	bl	342b8 <sock_find>
   40774:	4605      	mov	r5, r0
   40776:	b930      	cbnz	r0, 40786 <nrf_close+0x1a>
   40778:	2009      	movs	r0, #9
   4077a:	f7e5 f91d 	bl	259b8 <nrf_modem_os_errno_set>
   4077e:	f04f 34ff 	mov.w	r4, #4294967295
   40782:	4620      	mov	r0, r4
   40784:	bd70      	pop	{r4, r5, r6, pc}
   40786:	f7f5 fbfd 	bl	35f84 <nrf_modem_state_is_initialized>
   4078a:	4604      	mov	r4, r0
   4078c:	2800      	cmp	r0, #0
   4078e:	d0f8      	beq.n	40782 <nrf_close+0x16>
   40790:	2000      	movs	r0, #0
   40792:	f7ff fd0c 	bl	401ae <rpc_client_request_alloc>
   40796:	4601      	mov	r1, r0
   40798:	b908      	cbnz	r0, 4079e <nrf_close+0x32>
   4079a:	2069      	movs	r0, #105	; 0x69
   4079c:	e7ed      	b.n	4077a <nrf_close+0xe>
   4079e:	7f2b      	ldrb	r3, [r5, #28]
   407a0:	2200      	movs	r2, #0
   407a2:	f043 0301 	orr.w	r3, r3, #1
   407a6:	772b      	strb	r3, [r5, #28]
   407a8:	6106      	str	r6, [r0, #16]
   407aa:	f247 0009 	movw	r0, #28681	; 0x7009
   407ae:	f7f4 fbef 	bl	34f90 <req_forward>
   407b2:	4604      	mov	r4, r0
   407b4:	b128      	cbz	r0, 407c2 <nrf_close+0x56>
   407b6:	2816      	cmp	r0, #22
   407b8:	d007      	beq.n	407ca <nrf_close+0x5e>
   407ba:	f7e5 f8fd 	bl	259b8 <nrf_modem_os_errno_set>
   407be:	f04f 34ff 	mov.w	r4, #4294967295
   407c2:	4630      	mov	r0, r6
   407c4:	f7f3 fd8a 	bl	342dc <_sock_close>
   407c8:	e7db      	b.n	40782 <nrf_close+0x16>
   407ca:	2400      	movs	r4, #0
   407cc:	e7f9      	b.n	407c2 <nrf_close+0x56>

000407ce <nrf_bind>:
   407ce:	b538      	push	{r3, r4, r5, lr}
   407d0:	4605      	mov	r5, r0
   407d2:	460c      	mov	r4, r1
   407d4:	f7f3 fd70 	bl	342b8 <sock_find>
   407d8:	b928      	cbnz	r0, 407e6 <nrf_bind+0x18>
   407da:	2009      	movs	r0, #9
   407dc:	f7e5 f8ec 	bl	259b8 <nrf_modem_os_errno_set>
   407e0:	f04f 33ff 	mov.w	r3, #4294967295
   407e4:	e023      	b.n	4082e <nrf_bind+0x60>
   407e6:	b90c      	cbnz	r4, 407ec <nrf_bind+0x1e>
   407e8:	200e      	movs	r0, #14
   407ea:	e7f7      	b.n	407dc <nrf_bind+0xe>
   407ec:	4621      	mov	r1, r4
   407ee:	f7ff ff0b 	bl	40608 <sock_sockaddr_fam_is_valid>
   407f2:	b908      	cbnz	r0, 407f8 <nrf_bind+0x2a>
   407f4:	206a      	movs	r0, #106	; 0x6a
   407f6:	e7f1      	b.n	407dc <nrf_bind+0xe>
   407f8:	2000      	movs	r0, #0
   407fa:	f7ff fcd8 	bl	401ae <rpc_client_request_alloc>
   407fe:	4601      	mov	r1, r0
   40800:	b908      	cbnz	r0, 40806 <nrf_bind+0x38>
   40802:	2069      	movs	r0, #105	; 0x69
   40804:	e7ea      	b.n	407dc <nrf_bind+0xe>
   40806:	2214      	movs	r2, #20
   40808:	2300      	movs	r3, #0
   4080a:	7202      	strb	r2, [r0, #8]
   4080c:	6862      	ldr	r2, [r4, #4]
   4080e:	6105      	str	r5, [r0, #16]
   40810:	2a01      	cmp	r2, #1
   40812:	7243      	strb	r3, [r0, #9]
   40814:	7283      	strb	r3, [r0, #10]
   40816:	72c3      	strb	r3, [r0, #11]
   40818:	d00b      	beq.n	40832 <nrf_bind+0x64>
   4081a:	2a02      	cmp	r2, #2
   4081c:	d011      	beq.n	40842 <nrf_bind+0x74>
   4081e:	2200      	movs	r2, #0
   40820:	f247 0005 	movw	r0, #28677	; 0x7005
   40824:	f7f4 fbb4 	bl	34f90 <req_forward>
   40828:	4603      	mov	r3, r0
   4082a:	2800      	cmp	r0, #0
   4082c:	d1d6      	bne.n	407dc <nrf_bind+0xe>
   4082e:	4618      	mov	r0, r3
   40830:	bd38      	pop	{r3, r4, r5, pc}
   40832:	8922      	ldrh	r2, [r4, #8]
   40834:	75c3      	strb	r3, [r0, #23]
   40836:	8282      	strh	r2, [r0, #20]
   40838:	2204      	movs	r2, #4
   4083a:	7582      	strb	r2, [r0, #22]
   4083c:	68e3      	ldr	r3, [r4, #12]
   4083e:	6183      	str	r3, [r0, #24]
   40840:	e7ed      	b.n	4081e <nrf_bind+0x50>
   40842:	8922      	ldrh	r2, [r4, #8]
   40844:	75c3      	strb	r3, [r0, #23]
   40846:	8282      	strh	r2, [r0, #20]
   40848:	2210      	movs	r2, #16
   4084a:	18a3      	adds	r3, r4, r2
   4084c:	7582      	strb	r2, [r0, #22]
   4084e:	3420      	adds	r4, #32
   40850:	f100 0218 	add.w	r2, r0, #24
   40854:	f853 0b04 	ldr.w	r0, [r3], #4
   40858:	42a3      	cmp	r3, r4
   4085a:	f842 0b04 	str.w	r0, [r2], #4
   4085e:	d1f9      	bne.n	40854 <nrf_bind+0x86>
   40860:	e7dd      	b.n	4081e <nrf_bind+0x50>

00040862 <nrf_listen>:
   40862:	b570      	push	{r4, r5, r6, lr}
   40864:	4606      	mov	r6, r0
   40866:	460c      	mov	r4, r1
   40868:	f7f3 fd26 	bl	342b8 <sock_find>
   4086c:	4605      	mov	r5, r0
   4086e:	b918      	cbnz	r0, 40878 <nrf_listen+0x16>
   40870:	2009      	movs	r0, #9
   40872:	f7e5 f8a1 	bl	259b8 <nrf_modem_os_errno_set>
   40876:	e016      	b.n	408a6 <nrf_listen+0x44>
   40878:	f7ff fde4 	bl	40444 <sock_is_stream>
   4087c:	b908      	cbnz	r0, 40882 <nrf_listen+0x20>
   4087e:	205f      	movs	r0, #95	; 0x5f
   40880:	e7f7      	b.n	40872 <nrf_listen+0x10>
   40882:	4628      	mov	r0, r5
   40884:	f7ff fe1c 	bl	404c0 <sock_needs_attach>
   40888:	b930      	cbnz	r0, 40898 <nrf_listen+0x36>
   4088a:	2000      	movs	r0, #0
   4088c:	f7ff fc8f 	bl	401ae <rpc_client_request_alloc>
   40890:	4601      	mov	r1, r0
   40892:	b958      	cbnz	r0, 408ac <nrf_listen+0x4a>
   40894:	2069      	movs	r0, #105	; 0x69
   40896:	e7ec      	b.n	40872 <nrf_listen+0x10>
   40898:	f04f 31ff 	mov.w	r1, #4294967295
   4089c:	4628      	mov	r0, r5
   4089e:	f7f4 faf3 	bl	34e88 <tls_attach>
   408a2:	2800      	cmp	r0, #0
   408a4:	d0f1      	beq.n	4088a <nrf_listen+0x28>
   408a6:	f04f 33ff 	mov.w	r3, #4294967295
   408aa:	e010      	b.n	408ce <nrf_listen+0x6c>
   408ac:	2200      	movs	r2, #0
   408ae:	2304      	movs	r3, #4
   408b0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   408b4:	7203      	strb	r3, [r0, #8]
   408b6:	6106      	str	r6, [r0, #16]
   408b8:	7242      	strb	r2, [r0, #9]
   408ba:	7282      	strb	r2, [r0, #10]
   408bc:	72c2      	strb	r2, [r0, #11]
   408be:	6144      	str	r4, [r0, #20]
   408c0:	f247 0008 	movw	r0, #28680	; 0x7008
   408c4:	f7f4 fb64 	bl	34f90 <req_forward>
   408c8:	4603      	mov	r3, r0
   408ca:	2800      	cmp	r0, #0
   408cc:	d1d1      	bne.n	40872 <nrf_listen+0x10>
   408ce:	4618      	mov	r0, r3
   408d0:	bd70      	pop	{r4, r5, r6, pc}

000408d2 <nrf_accept>:
   408d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   408d6:	b08b      	sub	sp, #44	; 0x2c
   408d8:	4605      	mov	r5, r0
   408da:	4689      	mov	r9, r1
   408dc:	4617      	mov	r7, r2
   408de:	f7f3 fceb 	bl	342b8 <sock_find>
   408e2:	4606      	mov	r6, r0
   408e4:	b938      	cbnz	r0, 408f6 <nrf_accept+0x24>
   408e6:	2009      	movs	r0, #9
   408e8:	f7e5 f866 	bl	259b8 <nrf_modem_os_errno_set>
   408ec:	f04f 30ff 	mov.w	r0, #4294967295
   408f0:	b00b      	add	sp, #44	; 0x2c
   408f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   408f6:	f7ff fda5 	bl	40444 <sock_is_stream>
   408fa:	b908      	cbnz	r0, 40900 <nrf_accept+0x2e>
   408fc:	205f      	movs	r0, #95	; 0x5f
   408fe:	e7f3      	b.n	408e8 <nrf_accept+0x16>
   40900:	4630      	mov	r0, r6
   40902:	f7ff fdc6 	bl	40492 <sock_is_nonblock>
   40906:	b128      	cbz	r0, 40914 <nrf_accept+0x42>
   40908:	4630      	mov	r0, r6
   4090a:	f7ff fdea 	bl	404e2 <sock_can_accept>
   4090e:	b908      	cbnz	r0, 40914 <nrf_accept+0x42>
   40910:	200b      	movs	r0, #11
   40912:	e7e9      	b.n	408e8 <nrf_accept+0x16>
   40914:	f7f3 fcac 	bl	34270 <sock_open>
   40918:	4604      	mov	r4, r0
   4091a:	b908      	cbnz	r0, 40920 <nrf_accept+0x4e>
   4091c:	2017      	movs	r0, #23
   4091e:	e7e3      	b.n	408e8 <nrf_accept+0x16>
   40920:	7f33      	ldrb	r3, [r6, #28]
   40922:	2000      	movs	r0, #0
   40924:	f36f 1345 	bfc	r3, #5, #1
   40928:	7733      	strb	r3, [r6, #28]
   4092a:	f7ff fc40 	bl	401ae <rpc_client_request_alloc>
   4092e:	4601      	mov	r1, r0
   40930:	b920      	cbnz	r0, 4093c <nrf_accept+0x6a>
   40932:	6820      	ldr	r0, [r4, #0]
   40934:	f7f3 fcd2 	bl	342dc <_sock_close>
   40938:	2069      	movs	r0, #105	; 0x69
   4093a:	e7d5      	b.n	408e8 <nrf_accept+0x16>
   4093c:	6105      	str	r5, [r0, #16]
   4093e:	466a      	mov	r2, sp
   40940:	f247 000c 	movw	r0, #28684	; 0x700c
   40944:	f7f4 fb24 	bl	34f90 <req_forward>
   40948:	4680      	mov	r8, r0
   4094a:	b120      	cbz	r0, 40956 <nrf_accept+0x84>
   4094c:	6820      	ldr	r0, [r4, #0]
   4094e:	f7f3 fcc5 	bl	342dc <_sock_close>
   40952:	4640      	mov	r0, r8
   40954:	e7c8      	b.n	408e8 <nrf_accept+0x16>
   40956:	9d00      	ldr	r5, [sp, #0]
   40958:	69ab      	ldr	r3, [r5, #24]
   4095a:	6023      	str	r3, [r4, #0]
   4095c:	6933      	ldr	r3, [r6, #16]
   4095e:	6123      	str	r3, [r4, #16]
   40960:	6973      	ldr	r3, [r6, #20]
   40962:	6163      	str	r3, [r4, #20]
   40964:	7f23      	ldrb	r3, [r4, #28]
   40966:	f043 0308 	orr.w	r3, r3, #8
   4096a:	7723      	strb	r3, [r4, #28]
   4096c:	f1b9 0f00 	cmp.w	r9, #0
   40970:	d005      	beq.n	4097e <nrf_accept+0xac>
   40972:	b127      	cbz	r7, 4097e <nrf_accept+0xac>
   40974:	8beb      	ldrh	r3, [r5, #30]
   40976:	2b04      	cmp	r3, #4
   40978:	d006      	beq.n	40988 <nrf_accept+0xb6>
   4097a:	2b10      	cmp	r3, #16
   4097c:	d01a      	beq.n	409b4 <nrf_accept+0xe2>
   4097e:	4628      	mov	r0, r5
   40980:	f7ff fc22 	bl	401c8 <rpc_client_message_free>
   40984:	6820      	ldr	r0, [r4, #0]
   40986:	e7b3      	b.n	408f0 <nrf_accept+0x1e>
   40988:	2610      	movs	r6, #16
   4098a:	2301      	movs	r3, #1
   4098c:	9001      	str	r0, [sp, #4]
   4098e:	9003      	str	r0, [sp, #12]
   40990:	f88d 6004 	strb.w	r6, [sp, #4]
   40994:	9302      	str	r3, [sp, #8]
   40996:	7f6a      	ldrb	r2, [r5, #29]
   40998:	7f2b      	ldrb	r3, [r5, #28]
   4099a:	4648      	mov	r0, r9
   4099c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   409a0:	f8ad 300c 	strh.w	r3, [sp, #12]
   409a4:	6a2b      	ldr	r3, [r5, #32]
   409a6:	683a      	ldr	r2, [r7, #0]
   409a8:	a901      	add	r1, sp, #4
   409aa:	9304      	str	r3, [sp, #16]
   409ac:	f000 fe09 	bl	415c2 <memcpy>
   409b0:	603e      	str	r6, [r7, #0]
   409b2:	e7e4      	b.n	4097e <nrf_accept+0xac>
   409b4:	2624      	movs	r6, #36	; 0x24
   409b6:	4601      	mov	r1, r0
   409b8:	4632      	mov	r2, r6
   409ba:	a801      	add	r0, sp, #4
   409bc:	f000 fe21 	bl	41602 <memset>
   409c0:	2302      	movs	r3, #2
   409c2:	f88d 6004 	strb.w	r6, [sp, #4]
   409c6:	9302      	str	r3, [sp, #8]
   409c8:	7f2b      	ldrb	r3, [r5, #28]
   409ca:	7f6a      	ldrb	r2, [r5, #29]
   409cc:	ae05      	add	r6, sp, #20
   409ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   409d2:	f8ad 300c 	strh.w	r3, [sp, #12]
   409d6:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   409da:	f105 0320 	add.w	r3, r5, #32
   409de:	4632      	mov	r2, r6
   409e0:	6818      	ldr	r0, [r3, #0]
   409e2:	6859      	ldr	r1, [r3, #4]
   409e4:	3308      	adds	r3, #8
   409e6:	c203      	stmia	r2!, {r0, r1}
   409e8:	4563      	cmp	r3, ip
   409ea:	4616      	mov	r6, r2
   409ec:	d1f7      	bne.n	409de <nrf_accept+0x10c>
   409ee:	4648      	mov	r0, r9
   409f0:	683a      	ldr	r2, [r7, #0]
   409f2:	a901      	add	r1, sp, #4
   409f4:	f000 fde5 	bl	415c2 <memcpy>
   409f8:	2324      	movs	r3, #36	; 0x24
   409fa:	603b      	str	r3, [r7, #0]
   409fc:	e7bf      	b.n	4097e <nrf_accept+0xac>

000409fe <nrf_recvfrom>:
   409fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40a02:	b085      	sub	sp, #20
   40a04:	4617      	mov	r7, r2
   40a06:	e9dd a80e 	ldrd	sl, r8, [sp, #56]	; 0x38
   40a0a:	461e      	mov	r6, r3
   40a0c:	9101      	str	r1, [sp, #4]
   40a0e:	f403 7b80 	and.w	fp, r3, #256	; 0x100
   40a12:	f7f3 fc51 	bl	342b8 <sock_find>
   40a16:	4604      	mov	r4, r0
   40a18:	b940      	cbnz	r0, 40a2c <nrf_recvfrom+0x2e>
   40a1a:	2009      	movs	r0, #9
   40a1c:	f7e4 ffcc 	bl	259b8 <nrf_modem_os_errno_set>
   40a20:	f04f 35ff 	mov.w	r5, #4294967295
   40a24:	4628      	mov	r0, r5
   40a26:	b005      	add	sp, #20
   40a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40a2c:	f436 75a1 	bics.w	r5, r6, #322	; 0x142
   40a30:	d001      	beq.n	40a36 <nrf_recvfrom+0x38>
   40a32:	205f      	movs	r0, #95	; 0x5f
   40a34:	e7f2      	b.n	40a1c <nrf_recvfrom+0x1e>
   40a36:	f1ba 0f00 	cmp.w	sl, #0
   40a3a:	d004      	beq.n	40a46 <nrf_recvfrom+0x48>
   40a3c:	f1b8 0f00 	cmp.w	r8, #0
   40a40:	d104      	bne.n	40a4c <nrf_recvfrom+0x4e>
   40a42:	200e      	movs	r0, #14
   40a44:	e7ea      	b.n	40a1c <nrf_recvfrom+0x1e>
   40a46:	f1b8 0f00 	cmp.w	r8, #0
   40a4a:	d1fa      	bne.n	40a42 <nrf_recvfrom+0x44>
   40a4c:	4620      	mov	r0, r4
   40a4e:	f7ff fcf9 	bl	40444 <sock_is_stream>
   40a52:	b128      	cbz	r0, 40a60 <nrf_recvfrom+0x62>
   40a54:	4620      	mov	r0, r4
   40a56:	f7ff fd14 	bl	40482 <sock_is_connected>
   40a5a:	b908      	cbnz	r0, 40a60 <nrf_recvfrom+0x62>
   40a5c:	2080      	movs	r0, #128	; 0x80
   40a5e:	e7dd      	b.n	40a1c <nrf_recvfrom+0x1e>
   40a60:	f1bb 0f00 	cmp.w	fp, #0
   40a64:	d149      	bne.n	40afa <nrf_recvfrom+0xfc>
   40a66:	4620      	mov	r0, r4
   40a68:	f7ff fd13 	bl	40492 <sock_is_nonblock>
   40a6c:	2800      	cmp	r0, #0
   40a6e:	d147      	bne.n	40b00 <nrf_recvfrom+0x102>
   40a70:	f3c6 1980 	ubfx	r9, r6, #6, #1
   40a74:	4620      	mov	r0, r4
   40a76:	f7ff fd58 	bl	4052a <sock_rcvtimeo_ms_get>
   40a7a:	9003      	str	r0, [sp, #12]
   40a7c:	4620      	mov	r0, r4
   40a7e:	f7ff fcba 	bl	403f6 <sock_has_pkt>
   40a82:	2800      	cmp	r0, #0
   40a84:	d03f      	beq.n	40b06 <nrf_recvfrom+0x108>
   40a86:	4620      	mov	r0, r4
   40a88:	f7ff fcda 	bl	40440 <sock_pkt_peek_head>
   40a8c:	4681      	mov	r9, r0
   40a8e:	f1ba 0f00 	cmp.w	sl, #0
   40a92:	d00d      	beq.n	40ab0 <nrf_recvfrom+0xb2>
   40a94:	68c1      	ldr	r1, [r0, #12]
   40a96:	2900      	cmp	r1, #0
   40a98:	d059      	beq.n	40b4e <nrf_recvfrom+0x150>
   40a9a:	780a      	ldrb	r2, [r1, #0]
   40a9c:	f8d8 3000 	ldr.w	r3, [r8]
   40aa0:	4650      	mov	r0, sl
   40aa2:	429a      	cmp	r2, r3
   40aa4:	bf28      	it	cs
   40aa6:	461a      	movcs	r2, r3
   40aa8:	f8c8 2000 	str.w	r2, [r8]
   40aac:	f000 fd89 	bl	415c2 <memcpy>
   40ab0:	f006 0802 	and.w	r8, r6, #2
   40ab4:	4648      	mov	r0, r9
   40ab6:	f7ff fdc4 	bl	40642 <pkt_bytes_left>
   40aba:	42b8      	cmp	r0, r7
   40abc:	d84a      	bhi.n	40b54 <nrf_recvfrom+0x156>
   40abe:	4648      	mov	r0, r9
   40ac0:	f7ff fdbf 	bl	40642 <pkt_bytes_left>
   40ac4:	4606      	mov	r6, r0
   40ac6:	2e00      	cmp	r6, #0
   40ac8:	d0ac      	beq.n	40a24 <nrf_recvfrom+0x26>
   40aca:	9b01      	ldr	r3, [sp, #4]
   40acc:	4648      	mov	r0, r9
   40ace:	eb03 0a05 	add.w	sl, r3, r5
   40ad2:	f7ff fdb2 	bl	4063a <pkt_bytes_get>
   40ad6:	4632      	mov	r2, r6
   40ad8:	4601      	mov	r1, r0
   40ada:	4650      	mov	r0, sl
   40adc:	f000 fd71 	bl	415c2 <memcpy>
   40ae0:	4620      	mov	r0, r4
   40ae2:	4435      	add	r5, r6
   40ae4:	f7ff fcb3 	bl	4044e <sock_is_datagram>
   40ae8:	b3b0      	cbz	r0, 40b58 <nrf_recvfrom+0x15a>
   40aea:	f1b8 0f00 	cmp.w	r8, #0
   40aee:	d199      	bne.n	40a24 <nrf_recvfrom+0x26>
   40af0:	4649      	mov	r1, r9
   40af2:	4620      	mov	r0, r4
   40af4:	f7ff fc8e 	bl	40414 <sock_pkt_remove>
   40af8:	e794      	b.n	40a24 <nrf_recvfrom+0x26>
   40afa:	f04f 0900 	mov.w	r9, #0
   40afe:	e7b9      	b.n	40a74 <nrf_recvfrom+0x76>
   40b00:	f04f 0901 	mov.w	r9, #1
   40b04:	e7b6      	b.n	40a74 <nrf_recvfrom+0x76>
   40b06:	4620      	mov	r0, r4
   40b08:	f7ff fccb 	bl	404a2 <sock_is_closed>
   40b0c:	b188      	cbz	r0, 40b32 <nrf_recvfrom+0x134>
   40b0e:	4620      	mov	r0, r4
   40b10:	f7ff fccb 	bl	404aa <sock_has_error>
   40b14:	b108      	cbz	r0, 40b1a <nrf_recvfrom+0x11c>
   40b16:	69a0      	ldr	r0, [r4, #24]
   40b18:	e780      	b.n	40a1c <nrf_recvfrom+0x1e>
   40b1a:	4620      	mov	r0, r4
   40b1c:	f7ff fc92 	bl	40444 <sock_is_stream>
   40b20:	2800      	cmp	r0, #0
   40b22:	f47f af7f 	bne.w	40a24 <nrf_recvfrom+0x26>
   40b26:	4620      	mov	r0, r4
   40b28:	f7ff fc91 	bl	4044e <sock_is_datagram>
   40b2c:	2800      	cmp	r0, #0
   40b2e:	f47f af74 	bne.w	40a1a <nrf_recvfrom+0x1c>
   40b32:	f1b9 0f00 	cmp.w	r9, #0
   40b36:	d001      	beq.n	40b3c <nrf_recvfrom+0x13e>
   40b38:	200b      	movs	r0, #11
   40b3a:	e76f      	b.n	40a1c <nrf_recvfrom+0x1e>
   40b3c:	4648      	mov	r0, r9
   40b3e:	a903      	add	r1, sp, #12
   40b40:	f7e4 fe78 	bl	25834 <nrf_modem_os_timedwait>
   40b44:	2800      	cmp	r0, #0
   40b46:	d099      	beq.n	40a7c <nrf_recvfrom+0x7e>
   40b48:	f000 fd15 	bl	41576 <abs>
   40b4c:	e766      	b.n	40a1c <nrf_recvfrom+0x1e>
   40b4e:	f8c8 1000 	str.w	r1, [r8]
   40b52:	e7ad      	b.n	40ab0 <nrf_recvfrom+0xb2>
   40b54:	463e      	mov	r6, r7
   40b56:	e7b6      	b.n	40ac6 <nrf_recvfrom+0xc8>
   40b58:	4620      	mov	r0, r4
   40b5a:	f7ff fc7d 	bl	40458 <sock_is_raw>
   40b5e:	2800      	cmp	r0, #0
   40b60:	d1c3      	bne.n	40aea <nrf_recvfrom+0xec>
   40b62:	f1b8 0f00 	cmp.w	r8, #0
   40b66:	d10c      	bne.n	40b82 <nrf_recvfrom+0x184>
   40b68:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   40b6c:	4648      	mov	r0, r9
   40b6e:	4433      	add	r3, r6
   40b70:	f8a9 300a 	strh.w	r3, [r9, #10]
   40b74:	f7ff fd65 	bl	40642 <pkt_bytes_left>
   40b78:	b918      	cbnz	r0, 40b82 <nrf_recvfrom+0x184>
   40b7a:	4649      	mov	r1, r9
   40b7c:	4620      	mov	r0, r4
   40b7e:	f7ff fc49 	bl	40414 <sock_pkt_remove>
   40b82:	42b7      	cmp	r7, r6
   40b84:	f43f af4e 	beq.w	40a24 <nrf_recvfrom+0x26>
   40b88:	f1bb 0f00 	cmp.w	fp, #0
   40b8c:	d022      	beq.n	40bd4 <nrf_recvfrom+0x1d6>
   40b8e:	f1b8 0f00 	cmp.w	r8, #0
   40b92:	d016      	beq.n	40bc2 <nrf_recvfrom+0x1c4>
   40b94:	4648      	mov	r0, r9
   40b96:	f7ff fd47 	bl	40628 <pkt_has_next>
   40b9a:	b140      	cbz	r0, 40bae <nrf_recvfrom+0x1b0>
   40b9c:	4648      	mov	r0, r9
   40b9e:	f7ff fd49 	bl	40634 <pkt_peek_next>
   40ba2:	4681      	mov	r9, r0
   40ba4:	2800      	cmp	r0, #0
   40ba6:	f43f af3d 	beq.w	40a24 <nrf_recvfrom+0x26>
   40baa:	1bbf      	subs	r7, r7, r6
   40bac:	e782      	b.n	40ab4 <nrf_recvfrom+0xb6>
   40bae:	2000      	movs	r0, #0
   40bb0:	a903      	add	r1, sp, #12
   40bb2:	f7e4 fe3f 	bl	25834 <nrf_modem_os_timedwait>
   40bb6:	2800      	cmp	r0, #0
   40bb8:	d0e6      	beq.n	40b88 <nrf_recvfrom+0x18a>
   40bba:	2d00      	cmp	r5, #0
   40bbc:	f47f af32 	bne.w	40a24 <nrf_recvfrom+0x26>
   40bc0:	e7c2      	b.n	40b48 <nrf_recvfrom+0x14a>
   40bc2:	4620      	mov	r0, r4
   40bc4:	f7ff fc17 	bl	403f6 <sock_has_pkt>
   40bc8:	2800      	cmp	r0, #0
   40bca:	d0f0      	beq.n	40bae <nrf_recvfrom+0x1b0>
   40bcc:	4620      	mov	r0, r4
   40bce:	f7ff fc37 	bl	40440 <sock_pkt_peek_head>
   40bd2:	e7e6      	b.n	40ba2 <nrf_recvfrom+0x1a4>
   40bd4:	f1b8 0f00 	cmp.w	r8, #0
   40bd8:	d1e0      	bne.n	40b9c <nrf_recvfrom+0x19e>
   40bda:	e7f7      	b.n	40bcc <nrf_recvfrom+0x1ce>

00040bdc <nrf_getsockopt>:
   40bdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   40be0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   40be2:	4681      	mov	r9, r0
   40be4:	4688      	mov	r8, r1
   40be6:	4614      	mov	r4, r2
   40be8:	461f      	mov	r7, r3
   40bea:	f7f3 fb65 	bl	342b8 <sock_find>
   40bee:	4606      	mov	r6, r0
   40bf0:	b928      	cbnz	r0, 40bfe <nrf_getsockopt+0x22>
   40bf2:	2009      	movs	r0, #9
   40bf4:	f7e4 fee0 	bl	259b8 <nrf_modem_os_errno_set>
   40bf8:	f04f 34ff 	mov.w	r4, #4294967295
   40bfc:	e05a      	b.n	40cb4 <nrf_getsockopt+0xd8>
   40bfe:	b107      	cbz	r7, 40c02 <nrf_getsockopt+0x26>
   40c00:	b90d      	cbnz	r5, 40c06 <nrf_getsockopt+0x2a>
   40c02:	200e      	movs	r0, #14
   40c04:	e7f6      	b.n	40bf4 <nrf_getsockopt+0x18>
   40c06:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   40c0a:	d134      	bne.n	40c76 <nrf_getsockopt+0x9a>
   40c0c:	1e63      	subs	r3, r4, #1
   40c0e:	2b04      	cmp	r3, #4
   40c10:	d831      	bhi.n	40c76 <nrf_getsockopt+0x9a>
   40c12:	e8df f003 	tbb	[pc, r3]
   40c16:	1403      	.short	0x1403
   40c18:	0f0a      	.short	0x0f0a
   40c1a:	22          	.byte	0x22
   40c1b:	00          	.byte	0x00
   40c1c:	2304      	movs	r3, #4
   40c1e:	602b      	str	r3, [r5, #0]
   40c20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   40c24:	603b      	str	r3, [r7, #0]
   40c26:	2400      	movs	r4, #0
   40c28:	e044      	b.n	40cb4 <nrf_getsockopt+0xd8>
   40c2a:	2304      	movs	r3, #4
   40c2c:	602b      	str	r3, [r5, #0]
   40c2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   40c32:	e7f7      	b.n	40c24 <nrf_getsockopt+0x48>
   40c34:	2304      	movs	r3, #4
   40c36:	602b      	str	r3, [r5, #0]
   40c38:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   40c3c:	e7f2      	b.n	40c24 <nrf_getsockopt+0x48>
   40c3e:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   40c42:	682b      	ldr	r3, [r5, #0]
   40c44:	0092      	lsls	r2, r2, #2
   40c46:	429a      	cmp	r2, r3
   40c48:	bf28      	it	cs
   40c4a:	461a      	movcs	r2, r3
   40c4c:	f100 0140 	add.w	r1, r0, #64	; 0x40
   40c50:	602a      	str	r2, [r5, #0]
   40c52:	4638      	mov	r0, r7
   40c54:	f000 fcb5 	bl	415c2 <memcpy>
   40c58:	e7e5      	b.n	40c26 <nrf_getsockopt+0x4a>
   40c5a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   40c5c:	f7dc faf1 	bl	1d242 <strlen>
   40c60:	682a      	ldr	r2, [r5, #0]
   40c62:	3001      	adds	r0, #1
   40c64:	4290      	cmp	r0, r2
   40c66:	d203      	bcs.n	40c70 <nrf_getsockopt+0x94>
   40c68:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   40c6a:	f7dc faea 	bl	1d242 <strlen>
   40c6e:	1c42      	adds	r2, r0, #1
   40c70:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   40c72:	602a      	str	r2, [r5, #0]
   40c74:	e7ed      	b.n	40c52 <nrf_getsockopt+0x76>
   40c76:	2c14      	cmp	r4, #20
   40c78:	d020      	beq.n	40cbc <nrf_getsockopt+0xe0>
   40c7a:	dc0b      	bgt.n	40c94 <nrf_getsockopt+0xb8>
   40c7c:	2c04      	cmp	r4, #4
   40c7e:	d014      	beq.n	40caa <nrf_getsockopt+0xce>
   40c80:	1fa3      	subs	r3, r4, #6
   40c82:	2b02      	cmp	r3, #2
   40c84:	d80c      	bhi.n	40ca0 <nrf_getsockopt+0xc4>
   40c86:	6828      	ldr	r0, [r5, #0]
   40c88:	f7ff fa91 	bl	401ae <rpc_client_request_alloc>
   40c8c:	4606      	mov	r6, r0
   40c8e:	bb28      	cbnz	r0, 40cdc <nrf_getsockopt+0x100>
   40c90:	2069      	movs	r0, #105	; 0x69
   40c92:	e7af      	b.n	40bf4 <nrf_getsockopt+0x18>
   40c94:	2c15      	cmp	r4, #21
   40c96:	d019      	beq.n	40ccc <nrf_getsockopt+0xf0>
   40c98:	2c20      	cmp	r4, #32
   40c9a:	dc03      	bgt.n	40ca4 <nrf_getsockopt+0xc8>
   40c9c:	2c1d      	cmp	r4, #29
   40c9e:	dcf2      	bgt.n	40c86 <nrf_getsockopt+0xaa>
   40ca0:	206d      	movs	r0, #109	; 0x6d
   40ca2:	e7a7      	b.n	40bf4 <nrf_getsockopt+0x18>
   40ca4:	2c37      	cmp	r4, #55	; 0x37
   40ca6:	d0ee      	beq.n	40c86 <nrf_getsockopt+0xaa>
   40ca8:	e7fa      	b.n	40ca0 <nrf_getsockopt+0xc4>
   40caa:	602c      	str	r4, [r5, #0]
   40cac:	2400      	movs	r4, #0
   40cae:	69b3      	ldr	r3, [r6, #24]
   40cb0:	61b4      	str	r4, [r6, #24]
   40cb2:	603b      	str	r3, [r7, #0]
   40cb4:	4620      	mov	r0, r4
   40cb6:	b003      	add	sp, #12
   40cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   40cbc:	682a      	ldr	r2, [r5, #0]
   40cbe:	f106 0120 	add.w	r1, r6, #32
   40cc2:	2a08      	cmp	r2, #8
   40cc4:	bf28      	it	cs
   40cc6:	2208      	movcs	r2, #8
   40cc8:	602a      	str	r2, [r5, #0]
   40cca:	e7c2      	b.n	40c52 <nrf_getsockopt+0x76>
   40ccc:	682a      	ldr	r2, [r5, #0]
   40cce:	f106 0128 	add.w	r1, r6, #40	; 0x28
   40cd2:	2a08      	cmp	r2, #8
   40cd4:	bf28      	it	cs
   40cd6:	2208      	movcs	r2, #8
   40cd8:	602a      	str	r2, [r5, #0]
   40cda:	e7ba      	b.n	40c52 <nrf_getsockopt+0x76>
   40cdc:	2300      	movs	r3, #0
   40cde:	2208      	movs	r2, #8
   40ce0:	7243      	strb	r3, [r0, #9]
   40ce2:	7202      	strb	r2, [r0, #8]
   40ce4:	7283      	strb	r3, [r0, #10]
   40ce6:	72c3      	strb	r3, [r0, #11]
   40ce8:	f8c0 9010 	str.w	r9, [r0, #16]
   40cec:	4640      	mov	r0, r8
   40cee:	f000 f977 	bl	40fe0 <nrf_sol_to_rpc_sol>
   40cf2:	6170      	str	r0, [r6, #20]
   40cf4:	4620      	mov	r0, r4
   40cf6:	f7f4 f933 	bl	34f60 <nrf_so_to_rpc_so>
   40cfa:	4631      	mov	r1, r6
   40cfc:	61b0      	str	r0, [r6, #24]
   40cfe:	aa01      	add	r2, sp, #4
   40d00:	f247 0004 	movw	r0, #28676	; 0x7004
   40d04:	f8d6 9000 	ldr.w	r9, [r6]
   40d08:	f7f4 f942 	bl	34f90 <req_forward>
   40d0c:	4604      	mov	r4, r0
   40d0e:	2800      	cmp	r0, #0
   40d10:	f47f af70 	bne.w	40bf4 <nrf_getsockopt+0x18>
   40d14:	f8dd 8004 	ldr.w	r8, [sp, #4]
   40d18:	682b      	ldr	r3, [r5, #0]
   40d1a:	f8d8 1000 	ldr.w	r1, [r8]
   40d1e:	b181      	cbz	r1, 40d42 <nrf_getsockopt+0x166>
   40d20:	f8d8 2004 	ldr.w	r2, [r8, #4]
   40d24:	4638      	mov	r0, r7
   40d26:	429a      	cmp	r2, r3
   40d28:	bf28      	it	cs
   40d2a:	461a      	movcs	r2, r3
   40d2c:	602a      	str	r2, [r5, #0]
   40d2e:	f000 fc48 	bl	415c2 <memcpy>
   40d32:	f8d8 0000 	ldr.w	r0, [r8]
   40d36:	f7ff fa4a 	bl	401ce <rpc_client_data_free>
   40d3a:	9801      	ldr	r0, [sp, #4]
   40d3c:	f7ff fa44 	bl	401c8 <rpc_client_message_free>
   40d40:	e7b8      	b.n	40cb4 <nrf_getsockopt+0xd8>
   40d42:	6872      	ldr	r2, [r6, #4]
   40d44:	4649      	mov	r1, r9
   40d46:	429a      	cmp	r2, r3
   40d48:	bf28      	it	cs
   40d4a:	461a      	movcs	r2, r3
   40d4c:	4638      	mov	r0, r7
   40d4e:	602a      	str	r2, [r5, #0]
   40d50:	f000 fc37 	bl	415c2 <memcpy>
   40d54:	4648      	mov	r0, r9
   40d56:	f7ff fa13 	bl	40180 <rpc_transport_local_data_free>
   40d5a:	e7ee      	b.n	40d3a <nrf_getsockopt+0x15e>

00040d5c <tls_setopt_role>:
   40d5c:	b508      	push	{r3, lr}
   40d5e:	4603      	mov	r3, r0
   40d60:	b109      	cbz	r1, 40d66 <tls_setopt_role+0xa>
   40d62:	2a04      	cmp	r2, #4
   40d64:	d005      	beq.n	40d72 <tls_setopt_role+0x16>
   40d66:	2016      	movs	r0, #22
   40d68:	f7e4 fe26 	bl	259b8 <nrf_modem_os_errno_set>
   40d6c:	f04f 30ff 	mov.w	r0, #4294967295
   40d70:	e00a      	b.n	40d88 <tls_setopt_role+0x2c>
   40d72:	7808      	ldrb	r0, [r1, #0]
   40d74:	b128      	cbz	r0, 40d82 <tls_setopt_role+0x26>
   40d76:	2801      	cmp	r0, #1
   40d78:	d1f5      	bne.n	40d66 <tls_setopt_role+0xa>
   40d7a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
   40d7e:	2000      	movs	r0, #0
   40d80:	e002      	b.n	40d88 <tls_setopt_role+0x2c>
   40d82:	2202      	movs	r2, #2
   40d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   40d88:	bd08      	pop	{r3, pc}

00040d8a <tls_setopt_taglist>:
   40d8a:	b510      	push	{r4, lr}
   40d8c:	f012 0403 	ands.w	r4, r2, #3
   40d90:	d100      	bne.n	40d94 <tls_setopt_taglist+0xa>
   40d92:	b92a      	cbnz	r2, 40da0 <tls_setopt_taglist+0x16>
   40d94:	2016      	movs	r0, #22
   40d96:	f7e4 fe0f 	bl	259b8 <nrf_modem_os_errno_set>
   40d9a:	f04f 30ff 	mov.w	r0, #4294967295
   40d9e:	bd10      	pop	{r4, pc}
   40da0:	0893      	lsrs	r3, r2, #2
   40da2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
   40da6:	3040      	adds	r0, #64	; 0x40
   40da8:	f000 fc0b 	bl	415c2 <memcpy>
   40dac:	4620      	mov	r0, r4
   40dae:	e7f6      	b.n	40d9e <tls_setopt_taglist+0x14>

00040db0 <tls_setopt_sess_cache>:
   40db0:	b508      	push	{r3, lr}
   40db2:	b109      	cbz	r1, 40db8 <tls_setopt_sess_cache+0x8>
   40db4:	2a04      	cmp	r2, #4
   40db6:	d005      	beq.n	40dc4 <tls_setopt_sess_cache+0x14>
   40db8:	2016      	movs	r0, #22
   40dba:	f7e4 fdfd 	bl	259b8 <nrf_modem_os_errno_set>
   40dbe:	f04f 30ff 	mov.w	r0, #4294967295
   40dc2:	bd08      	pop	{r3, pc}
   40dc4:	780b      	ldrb	r3, [r1, #0]
   40dc6:	3b00      	subs	r3, #0
   40dc8:	bf18      	it	ne
   40dca:	2301      	movne	r3, #1
   40dcc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   40dd0:	2000      	movs	r0, #0
   40dd2:	e7f6      	b.n	40dc2 <tls_setopt_sess_cache+0x12>

00040dd4 <tls_setopt_peer_verify>:
   40dd4:	b508      	push	{r3, lr}
   40dd6:	b109      	cbz	r1, 40ddc <tls_setopt_peer_verify+0x8>
   40dd8:	2a04      	cmp	r2, #4
   40dda:	d005      	beq.n	40de8 <tls_setopt_peer_verify+0x14>
   40ddc:	2016      	movs	r0, #22
   40dde:	f7e4 fdeb 	bl	259b8 <nrf_modem_os_errno_set>
   40de2:	f04f 30ff 	mov.w	r0, #4294967295
   40de6:	bd08      	pop	{r3, pc}
   40de8:	680b      	ldr	r3, [r1, #0]
   40dea:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   40dee:	2000      	movs	r0, #0
   40df0:	e7f9      	b.n	40de6 <tls_setopt_peer_verify+0x12>

00040df2 <tls_setopt_hostname>:
   40df2:	b570      	push	{r4, r5, r6, lr}
   40df4:	4605      	mov	r5, r0
   40df6:	4614      	mov	r4, r2
   40df8:	460e      	mov	r6, r1
   40dfa:	b931      	cbnz	r1, 40e0a <tls_setopt_hostname+0x18>
   40dfc:	b13a      	cbz	r2, 40e0e <tls_setopt_hostname+0x1c>
   40dfe:	2016      	movs	r0, #22
   40e00:	f7e4 fdda 	bl	259b8 <nrf_modem_os_errno_set>
   40e04:	f04f 30ff 	mov.w	r0, #4294967295
   40e08:	bd70      	pop	{r4, r5, r6, pc}
   40e0a:	2a00      	cmp	r2, #0
   40e0c:	d0f7      	beq.n	40dfe <tls_setopt_hostname+0xc>
   40e0e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   40e10:	b108      	cbz	r0, 40e16 <tls_setopt_hostname+0x24>
   40e12:	f7e4 feb5 	bl	25b80 <nrf_modem_os_free>
   40e16:	b174      	cbz	r4, 40e36 <tls_setopt_hostname+0x44>
   40e18:	1c60      	adds	r0, r4, #1
   40e1a:	f7e4 fea9 	bl	25b70 <nrf_modem_os_alloc>
   40e1e:	63a8      	str	r0, [r5, #56]	; 0x38
   40e20:	b908      	cbnz	r0, 40e26 <tls_setopt_hostname+0x34>
   40e22:	2069      	movs	r0, #105	; 0x69
   40e24:	e7ec      	b.n	40e00 <tls_setopt_hostname+0xe>
   40e26:	4622      	mov	r2, r4
   40e28:	4631      	mov	r1, r6
   40e2a:	f000 fbca 	bl	415c2 <memcpy>
   40e2e:	2000      	movs	r0, #0
   40e30:	6bab      	ldr	r3, [r5, #56]	; 0x38
   40e32:	5518      	strb	r0, [r3, r4]
   40e34:	e7e8      	b.n	40e08 <tls_setopt_hostname+0x16>
   40e36:	4620      	mov	r0, r4
   40e38:	e7e6      	b.n	40e08 <tls_setopt_hostname+0x16>

00040e3a <nrf_poll>:
   40e3a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   40e3e:	4688      	mov	r8, r1
   40e40:	4607      	mov	r7, r0
   40e42:	9201      	str	r2, [sp, #4]
   40e44:	b930      	cbnz	r0, 40e54 <nrf_poll+0x1a>
   40e46:	b149      	cbz	r1, 40e5c <nrf_poll+0x22>
   40e48:	200e      	movs	r0, #14
   40e4a:	f7e4 fdb5 	bl	259b8 <nrf_modem_os_errno_set>
   40e4e:	f04f 35ff 	mov.w	r5, #4294967295
   40e52:	e014      	b.n	40e7e <nrf_poll+0x44>
   40e54:	2908      	cmp	r1, #8
   40e56:	d901      	bls.n	40e5c <nrf_poll+0x22>
   40e58:	2016      	movs	r0, #22
   40e5a:	e7f6      	b.n	40e4a <nrf_poll+0x10>
   40e5c:	f04f 0900 	mov.w	r9, #0
   40e60:	f04f 0a00 	mov.w	sl, #0
   40e64:	463c      	mov	r4, r7
   40e66:	4655      	mov	r5, sl
   40e68:	45c2      	cmp	sl, r8
   40e6a:	d10c      	bne.n	40e86 <nrf_poll+0x4c>
   40e6c:	b93d      	cbnz	r5, 40e7e <nrf_poll+0x44>
   40e6e:	4628      	mov	r0, r5
   40e70:	a901      	add	r1, sp, #4
   40e72:	f7e4 fcdf 	bl	25834 <nrf_modem_os_timedwait>
   40e76:	2800      	cmp	r0, #0
   40e78:	d0f2      	beq.n	40e60 <nrf_poll+0x26>
   40e7a:	306e      	adds	r0, #110	; 0x6e
   40e7c:	d06f      	beq.n	40f5e <nrf_poll+0x124>
   40e7e:	4628      	mov	r0, r5
   40e80:	b002      	add	sp, #8
   40e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40e86:	6820      	ldr	r0, [r4, #0]
   40e88:	f8a4 9006 	strh.w	r9, [r4, #6]
   40e8c:	2800      	cmp	r0, #0
   40e8e:	db4e      	blt.n	40f2e <nrf_poll+0xf4>
   40e90:	f7f3 fa12 	bl	342b8 <sock_find>
   40e94:	4606      	mov	r6, r0
   40e96:	b928      	cbnz	r0, 40ea4 <nrf_poll+0x6a>
   40e98:	88e3      	ldrh	r3, [r4, #6]
   40e9a:	f043 0320 	orr.w	r3, r3, #32
   40e9e:	80e3      	strh	r3, [r4, #6]
   40ea0:	3501      	adds	r5, #1
   40ea2:	e044      	b.n	40f2e <nrf_poll+0xf4>
   40ea4:	f7ff faf9 	bl	4049a <sock_is_local_closed>
   40ea8:	2800      	cmp	r0, #0
   40eaa:	d1f5      	bne.n	40e98 <nrf_poll+0x5e>
   40eac:	4630      	mov	r0, r6
   40eae:	f7ff fafc 	bl	404aa <sock_has_error>
   40eb2:	b348      	cbz	r0, 40f08 <nrf_poll+0xce>
   40eb4:	88e3      	ldrh	r3, [r4, #6]
   40eb6:	f043 0308 	orr.w	r3, r3, #8
   40eba:	80e3      	strh	r3, [r4, #6]
   40ebc:	88a3      	ldrh	r3, [r4, #4]
   40ebe:	07da      	lsls	r2, r3, #31
   40ec0:	d517      	bpl.n	40ef2 <nrf_poll+0xb8>
   40ec2:	4630      	mov	r0, r6
   40ec4:	f7ff fb08 	bl	404d8 <sock_can_read>
   40ec8:	b338      	cbz	r0, 40f1a <nrf_poll+0xe0>
   40eca:	88e3      	ldrh	r3, [r4, #6]
   40ecc:	f043 0301 	orr.w	r3, r3, #1
   40ed0:	80e3      	strh	r3, [r4, #6]
   40ed2:	4630      	mov	r0, r6
   40ed4:	f7ff fab6 	bl	40444 <sock_is_stream>
   40ed8:	b158      	cbz	r0, 40ef2 <nrf_poll+0xb8>
   40eda:	4630      	mov	r0, r6
   40edc:	f7ff fae1 	bl	404a2 <sock_is_closed>
   40ee0:	b138      	cbz	r0, 40ef2 <nrf_poll+0xb8>
   40ee2:	4630      	mov	r0, r6
   40ee4:	f7ff fae1 	bl	404aa <sock_has_error>
   40ee8:	b918      	cbnz	r0, 40ef2 <nrf_poll+0xb8>
   40eea:	88e3      	ldrh	r3, [r4, #6]
   40eec:	f043 0301 	orr.w	r3, r3, #1
   40ef0:	80e3      	strh	r3, [r4, #6]
   40ef2:	88a3      	ldrh	r3, [r4, #4]
   40ef4:	075b      	lsls	r3, r3, #29
   40ef6:	d516      	bpl.n	40f26 <nrf_poll+0xec>
   40ef8:	4630      	mov	r0, r6
   40efa:	f7ff faf6 	bl	404ea <sock_can_send>
   40efe:	b190      	cbz	r0, 40f26 <nrf_poll+0xec>
   40f00:	88e3      	ldrh	r3, [r4, #6]
   40f02:	f043 0304 	orr.w	r3, r3, #4
   40f06:	e7ca      	b.n	40e9e <nrf_poll+0x64>
   40f08:	4630      	mov	r0, r6
   40f0a:	f7ff faca 	bl	404a2 <sock_is_closed>
   40f0e:	2800      	cmp	r0, #0
   40f10:	d0d4      	beq.n	40ebc <nrf_poll+0x82>
   40f12:	88e3      	ldrh	r3, [r4, #6]
   40f14:	f043 0310 	orr.w	r3, r3, #16
   40f18:	e7cf      	b.n	40eba <nrf_poll+0x80>
   40f1a:	4630      	mov	r0, r6
   40f1c:	f7ff fae1 	bl	404e2 <sock_can_accept>
   40f20:	2800      	cmp	r0, #0
   40f22:	d1d2      	bne.n	40eca <nrf_poll+0x90>
   40f24:	e7d5      	b.n	40ed2 <nrf_poll+0x98>
   40f26:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   40f2a:	2b00      	cmp	r3, #0
   40f2c:	d1b8      	bne.n	40ea0 <nrf_poll+0x66>
   40f2e:	f10a 0a01 	add.w	sl, sl, #1
   40f32:	3408      	adds	r4, #8
   40f34:	e798      	b.n	40e68 <nrf_poll+0x2e>
   40f36:	f857 0034 	ldr.w	r0, [r7, r4, lsl #3]
   40f3a:	2800      	cmp	r0, #0
   40f3c:	db08      	blt.n	40f50 <nrf_poll+0x116>
   40f3e:	88fb      	ldrh	r3, [r7, #6]
   40f40:	3501      	adds	r5, #1
   40f42:	f043 0308 	orr.w	r3, r3, #8
   40f46:	80fb      	strh	r3, [r7, #6]
   40f48:	f7f3 f9b6 	bl	342b8 <sock_find>
   40f4c:	b100      	cbz	r0, 40f50 <nrf_poll+0x116>
   40f4e:	6186      	str	r6, [r0, #24]
   40f50:	3401      	adds	r4, #1
   40f52:	4544      	cmp	r4, r8
   40f54:	d1ef      	bne.n	40f36 <nrf_poll+0xfc>
   40f56:	2d00      	cmp	r5, #0
   40f58:	d191      	bne.n	40e7e <nrf_poll+0x44>
   40f5a:	2004      	movs	r0, #4
   40f5c:	e775      	b.n	40e4a <nrf_poll+0x10>
   40f5e:	462c      	mov	r4, r5
   40f60:	266e      	movs	r6, #110	; 0x6e
   40f62:	e7f6      	b.n	40f52 <nrf_poll+0x118>

00040f64 <nrf_fcntl>:
   40f64:	b538      	push	{r3, r4, r5, lr}
   40f66:	460d      	mov	r5, r1
   40f68:	4614      	mov	r4, r2
   40f6a:	f7f3 f9a5 	bl	342b8 <sock_find>
   40f6e:	4603      	mov	r3, r0
   40f70:	b928      	cbnz	r0, 40f7e <nrf_fcntl+0x1a>
   40f72:	2009      	movs	r0, #9
   40f74:	f7e4 fd20 	bl	259b8 <nrf_modem_os_errno_set>
   40f78:	f04f 30ff 	mov.w	r0, #4294967295
   40f7c:	e006      	b.n	40f8c <nrf_fcntl+0x28>
   40f7e:	2d03      	cmp	r5, #3
   40f80:	d003      	beq.n	40f8a <nrf_fcntl+0x26>
   40f82:	2d04      	cmp	r5, #4
   40f84:	d003      	beq.n	40f8e <nrf_fcntl+0x2a>
   40f86:	2016      	movs	r0, #22
   40f88:	e7f4      	b.n	40f74 <nrf_fcntl+0x10>
   40f8a:	6b40      	ldr	r0, [r0, #52]	; 0x34
   40f8c:	bd38      	pop	{r3, r4, r5, pc}
   40f8e:	f034 0001 	bics.w	r0, r4, #1
   40f92:	d1f8      	bne.n	40f86 <nrf_fcntl+0x22>
   40f94:	635c      	str	r4, [r3, #52]	; 0x34
   40f96:	e7f9      	b.n	40f8c <nrf_fcntl+0x28>

00040f98 <nrf_af_to_rpc_af>:
   40f98:	4770      	bx	lr

00040f9a <rpc_af_to_nrf_af>:
   40f9a:	f7ff bffd 	b.w	40f98 <nrf_af_to_rpc_af>

00040f9e <nrf_type_to_rpc_type>:
   40f9e:	4770      	bx	lr

00040fa0 <nrf_proto_to_rpc_proto>:
   40fa0:	2829      	cmp	r0, #41	; 0x29
   40fa2:	d015      	beq.n	40fd0 <nrf_proto_to_rpc_proto+0x30>
   40fa4:	dc05      	bgt.n	40fb2 <nrf_proto_to_rpc_proto+0x12>
   40fa6:	2806      	cmp	r0, #6
   40fa8:	d014      	beq.n	40fd4 <nrf_proto_to_rpc_proto+0x34>
   40faa:	2811      	cmp	r0, #17
   40fac:	d014      	beq.n	40fd8 <nrf_proto_to_rpc_proto+0x38>
   40fae:	b148      	cbz	r0, 40fc4 <nrf_proto_to_rpc_proto+0x24>
   40fb0:	4770      	bx	lr
   40fb2:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   40fb6:	d00d      	beq.n	40fd4 <nrf_proto_to_rpc_proto+0x34>
   40fb8:	f240 1311 	movw	r3, #273	; 0x111
   40fbc:	4298      	cmp	r0, r3
   40fbe:	d00b      	beq.n	40fd8 <nrf_proto_to_rpc_proto+0x38>
   40fc0:	28ff      	cmp	r0, #255	; 0xff
   40fc2:	d10c      	bne.n	40fde <nrf_proto_to_rpc_proto+0x3e>
   40fc4:	2901      	cmp	r1, #1
   40fc6:	d009      	beq.n	40fdc <nrf_proto_to_rpc_proto+0x3c>
   40fc8:	2902      	cmp	r1, #2
   40fca:	bf08      	it	eq
   40fcc:	2002      	moveq	r0, #2
   40fce:	4770      	bx	lr
   40fd0:	2006      	movs	r0, #6
   40fd2:	4770      	bx	lr
   40fd4:	2001      	movs	r0, #1
   40fd6:	4770      	bx	lr
   40fd8:	2002      	movs	r0, #2
   40fda:	4770      	bx	lr
   40fdc:	4608      	mov	r0, r1
   40fde:	4770      	bx	lr

00040fe0 <nrf_sol_to_rpc_sol>:
   40fe0:	2829      	cmp	r0, #41	; 0x29
   40fe2:	d013      	beq.n	4100c <nrf_sol_to_rpc_sol+0x2c>
   40fe4:	dc09      	bgt.n	40ffa <nrf_sol_to_rpc_sol+0x1a>
   40fe6:	2801      	cmp	r0, #1
   40fe8:	d012      	beq.n	41010 <nrf_sol_to_rpc_sol+0x30>
   40fea:	2806      	cmp	r0, #6
   40fec:	d012      	beq.n	41014 <nrf_sol_to_rpc_sol+0x34>
   40fee:	2800      	cmp	r0, #0
   40ff0:	bf14      	ite	ne
   40ff2:	f04f 30ff 	movne.w	r0, #4294967295
   40ff6:	2004      	moveq	r0, #4
   40ff8:	4770      	bx	lr
   40ffa:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   40ffe:	d00b      	beq.n	41018 <nrf_sol_to_rpc_sol+0x38>
   41000:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   41004:	bf18      	it	ne
   41006:	f04f 30ff 	movne.w	r0, #4294967295
   4100a:	4770      	bx	lr
   4100c:	2006      	movs	r0, #6
   4100e:	4770      	bx	lr
   41010:	2008      	movs	r0, #8
   41012:	4770      	bx	lr
   41014:	2001      	movs	r0, #1
   41016:	4770      	bx	lr
   41018:	f44f 7080 	mov.w	r0, #256	; 0x100
   4101c:	4770      	bx	lr

0004101e <rpc_error_to_nrf_gai_errno>:
   4101e:	b508      	push	{r3, lr}
   41020:	1f03      	subs	r3, r0, #4
   41022:	2b09      	cmp	r3, #9
   41024:	d80f      	bhi.n	41046 <rpc_error_to_nrf_gai_errno+0x28>
   41026:	e8df f003 	tbb	[pc, r3]
   4102a:	0508      	.short	0x0508
   4102c:	0e0e0e11 	.word	0x0e0e0e11
   41030:	110e0e0e 	.word	0x110e0e0e
   41034:	f44f 708a 	mov.w	r0, #276	; 0x114
   41038:	bd08      	pop	{r3, pc}
   4103a:	2073      	movs	r0, #115	; 0x73
   4103c:	f7e4 fcbc 	bl	259b8 <nrf_modem_os_errno_set>
   41040:	f240 1015 	movw	r0, #277	; 0x115
   41044:	e7f8      	b.n	41038 <rpc_error_to_nrf_gai_errno+0x1a>
   41046:	f7f3 ff97 	bl	34f78 <rpc_error_to_nrf_errno>
   4104a:	e7f7      	b.n	4103c <rpc_error_to_nrf_gai_errno+0x1e>
   4104c:	f240 1011 	movw	r0, #273	; 0x111
   41050:	e7f2      	b.n	41038 <rpc_error_to_nrf_gai_errno+0x1a>

00041052 <res_forward>:
   41052:	4603      	mov	r3, r0
   41054:	68c0      	ldr	r0, [r0, #12]
   41056:	b108      	cbz	r0, 4105c <res_forward+0xa>
   41058:	6003      	str	r3, [r0, #0]
   4105a:	2001      	movs	r0, #1
   4105c:	4770      	bx	lr

0004105e <nrf_modem_gnss_agps_write>:
   4105e:	b530      	push	{r4, r5, lr}
   41060:	4615      	mov	r5, r2
   41062:	4604      	mov	r4, r0
   41064:	b09f      	sub	sp, #124	; 0x7c
   41066:	2800      	cmp	r0, #0
   41068:	d03e      	beq.n	410e8 <nrf_modem_gnss_agps_write+0x8a>
   4106a:	2900      	cmp	r1, #0
   4106c:	d03c      	beq.n	410e8 <nrf_modem_gnss_agps_write+0x8a>
   4106e:	2272      	movs	r2, #114	; 0x72
   41070:	2100      	movs	r1, #0
   41072:	a801      	add	r0, sp, #4
   41074:	f000 fac5 	bl	41602 <memset>
   41078:	1e6a      	subs	r2, r5, #1
   4107a:	2a07      	cmp	r2, #7
   4107c:	d834      	bhi.n	410e8 <nrf_modem_gnss_agps_write+0x8a>
   4107e:	e8df f002 	tbb	[pc, r2]
   41082:	1004      	.short	0x1004
   41084:	241f1a15 	.word	0x241f1a15
   41088:	2e29      	.short	0x2e29
   4108a:	4620      	mov	r0, r4
   4108c:	a902      	add	r1, sp, #8
   4108e:	f7ff f8a0 	bl	401d2 <rpc_gnss_serialize_utc>
   41092:	2272      	movs	r2, #114	; 0x72
   41094:	f241 0005 	movw	r0, #4101	; 0x1005
   41098:	a901      	add	r1, sp, #4
   4109a:	f7f4 facb 	bl	35634 <send_message>
   4109e:	b01f      	add	sp, #124	; 0x7c
   410a0:	bd30      	pop	{r4, r5, pc}
   410a2:	4620      	mov	r0, r4
   410a4:	a902      	add	r1, sp, #8
   410a6:	f7ff f8b1 	bl	4020c <rpc_gnss_serialize_ephe>
   410aa:	e7f2      	b.n	41092 <nrf_modem_gnss_agps_write+0x34>
   410ac:	4620      	mov	r0, r4
   410ae:	a902      	add	r1, sp, #8
   410b0:	f7ff f8f6 	bl	402a0 <rpc_gnss_serialize_alm>
   410b4:	e7ed      	b.n	41092 <nrf_modem_gnss_agps_write+0x34>
   410b6:	4620      	mov	r0, r4
   410b8:	a902      	add	r1, sp, #8
   410ba:	f7ff f91e 	bl	402fa <rpc_gnss_serialize_klob>
   410be:	e7e8      	b.n	41092 <nrf_modem_gnss_agps_write+0x34>
   410c0:	4620      	mov	r0, r4
   410c2:	a902      	add	r1, sp, #8
   410c4:	f7ff f934 	bl	40330 <rpc_gnss_serialize_nequick>
   410c8:	e7e3      	b.n	41092 <nrf_modem_gnss_agps_write+0x34>
   410ca:	4620      	mov	r0, r4
   410cc:	a902      	add	r1, sp, #8
   410ce:	f7ff f944 	bl	4035a <rpc_gnss_serialize_time_and_sv_tow>
   410d2:	e7de      	b.n	41092 <nrf_modem_gnss_agps_write+0x34>
   410d4:	4620      	mov	r0, r4
   410d6:	a902      	add	r1, sp, #8
   410d8:	f7ff f962 	bl	403a0 <rpc_gnss_serialize_location>
   410dc:	e7d9      	b.n	41092 <nrf_modem_gnss_agps_write+0x34>
   410de:	4620      	mov	r0, r4
   410e0:	a902      	add	r1, sp, #8
   410e2:	f7ff f97a 	bl	403da <rpc_gnss_serialize_integrity>
   410e6:	e7d4      	b.n	41092 <nrf_modem_gnss_agps_write+0x34>
   410e8:	f06f 0015 	mvn.w	r0, #21
   410ec:	e7d7      	b.n	4109e <nrf_modem_gnss_agps_write+0x40>

000410ee <nrf_modem_is_initialized>:
   410ee:	f7f4 bf49 	b.w	35f84 <nrf_modem_state_is_initialized>

000410f2 <z_device_state_init>:
}
   410f2:	4770      	bx	lr

000410f4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   410f4:	b138      	cbz	r0, 41106 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   410f6:	68c3      	ldr	r3, [r0, #12]
   410f8:	8818      	ldrh	r0, [r3, #0]
   410fa:	f3c0 0008 	ubfx	r0, r0, #0, #9
   410fe:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   41102:	4258      	negs	r0, r3
   41104:	4158      	adcs	r0, r3
}
   41106:	4770      	bx	lr

00041108 <z_early_memset>:
   41108:	f000 ba7b 	b.w	41602 <memset>

0004110c <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4110c:	f000 ba59 	b.w	415c2 <memcpy>

00041110 <k_heap_init>:
{
   41110:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   41112:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   41116:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   4111a:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   4111e:	f7e0 b9b1 	b.w	21484 <sys_heap_init>

00041122 <k_heap_alloc>:
{
   41122:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   41124:	e9cd 2300 	strd	r2, r3, [sp]
   41128:	460a      	mov	r2, r1
   4112a:	2104      	movs	r1, #4
   4112c:	f7f5 f8ce 	bl	362cc <k_heap_aligned_alloc>
}
   41130:	b003      	add	sp, #12
   41132:	f85d fb04 	ldr.w	pc, [sp], #4

00041136 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   41136:	f3ef 8005 	mrs	r0, IPSR
}
   4113a:	3800      	subs	r0, #0
   4113c:	bf18      	it	ne
   4113e:	2001      	movne	r0, #1
   41140:	4770      	bx	lr

00041142 <z_impl_k_thread_name_set>:
}
   41142:	f06f 0057 	mvn.w	r0, #87	; 0x57
   41146:	4770      	bx	lr

00041148 <k_thread_name_get>:
}
   41148:	2000      	movs	r0, #0
   4114a:	4770      	bx	lr

0004114c <z_impl_k_thread_start>:
	z_sched_start(thread);
   4114c:	f7f6 bec6 	b.w	37edc <z_sched_start>

00041150 <z_pm_save_idle_exit>:
{
   41150:	b508      	push	{r3, lr}
	pm_system_resume();
   41152:	f7e1 fbfb 	bl	2294c <pm_system_resume>
}
   41156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   4115a:	f7fd bdee 	b.w	3ed3a <sys_clock_idle_exit>

0004115e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   4115e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   41162:	428b      	cmp	r3, r1
   41164:	d001      	beq.n	4116a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   41166:	f7f7 b851 	b.w	3820c <z_set_prio>
}
   4116a:	2000      	movs	r0, #0
   4116c:	4770      	bx	lr

0004116e <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   4116e:	2300      	movs	r3, #0
   41170:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   41174:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   41178:	4618      	mov	r0, r3
   4117a:	4770      	bx	lr

0004117c <z_queue_node_peek>:
{
   4117c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   4117e:	4604      	mov	r4, r0
   41180:	b130      	cbz	r0, 41190 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   41182:	6802      	ldr	r2, [r0, #0]
   41184:	0793      	lsls	r3, r2, #30
   41186:	d003      	beq.n	41190 <z_queue_node_peek+0x14>
		ret = anode->data;
   41188:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   4118a:	b109      	cbz	r1, 41190 <z_queue_node_peek+0x14>
			k_free(anode);
   4118c:	f000 f988 	bl	414a0 <k_free>
}
   41190:	4620      	mov	r0, r4
   41192:	bd10      	pop	{r4, pc}

00041194 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   41194:	2301      	movs	r3, #1
{
   41196:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   41198:	9300      	str	r3, [sp, #0]
   4119a:	2300      	movs	r3, #0
{
   4119c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   4119e:	4619      	mov	r1, r3
   411a0:	f7f5 fd90 	bl	36cc4 <queue_insert>
}
   411a4:	b003      	add	sp, #12
   411a6:	f85d fb04 	ldr.w	pc, [sp], #4

000411aa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   411aa:	b15a      	cbz	r2, 411c4 <z_impl_k_sem_init+0x1a>
   411ac:	428a      	cmp	r2, r1
   411ae:	d309      	bcc.n	411c4 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   411b0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   411b4:	e9c0 1202 	strd	r1, r2, [r0, #8]
   411b8:	e9c0 0000 	strd	r0, r0, [r0]
   411bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   411c0:	2000      	movs	r0, #0
   411c2:	4770      	bx	lr
		return -EINVAL;
   411c4:	f06f 0015 	mvn.w	r0, #21
}
   411c8:	4770      	bx	lr

000411ca <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   411ca:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   411cc:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   411ce:	408b      	lsls	r3, r1
   411d0:	ea22 0303 	bic.w	r3, r2, r3
   411d4:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   411d6:	fa22 f001 	lsr.w	r0, r2, r1
}
   411da:	f000 0001 	and.w	r0, r0, #1
   411de:	4770      	bx	lr

000411e0 <unschedule_locked>:
{
   411e0:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   411e2:	2103      	movs	r1, #3
{
   411e4:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   411e6:	300c      	adds	r0, #12
   411e8:	f7ff ffef 	bl	411ca <flag_test_and_clear>
   411ec:	4604      	mov	r4, r0
   411ee:	b118      	cbz	r0, 411f8 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   411f0:	f105 0010 	add.w	r0, r5, #16
   411f4:	f7f7 fcf4 	bl	38be0 <z_abort_timeout>
}
   411f8:	4620      	mov	r0, r4
   411fa:	bd38      	pop	{r3, r4, r5, pc}

000411fc <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   411fc:	b120      	cbz	r0, 41208 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   411fe:	2200      	movs	r2, #0
   41200:	30d8      	adds	r0, #216	; 0xd8
   41202:	4611      	mov	r1, r2
   41204:	f7f7 bb5a 	b.w	388bc <z_sched_wake>
}
   41208:	4770      	bx	lr

0004120a <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   4120a:	68c3      	ldr	r3, [r0, #12]
{
   4120c:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   4120e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   41212:	079b      	lsls	r3, r3, #30
{
   41214:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41216:	d416      	bmi.n	41246 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   41218:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   4121a:	2102      	movs	r1, #2
   4121c:	300c      	adds	r0, #12
   4121e:	f7ff ffd4 	bl	411ca <flag_test_and_clear>
   41222:	b180      	cbz	r0, 41246 <cancel_async_locked+0x3c>
	return list->head;
   41224:	f8d6 20d0 	ldr.w	r2, [r6, #208]	; 0xd0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   41228:	b16a      	cbz	r2, 41246 <cancel_async_locked+0x3c>
   4122a:	4294      	cmp	r4, r2
   4122c:	d11b      	bne.n	41266 <cancel_async_locked+0x5c>
	return node->next;
   4122e:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   41230:	f8d6 10d4 	ldr.w	r1, [r6, #212]	; 0xd4
Z_GENLIST_REMOVE(slist, snode)
   41234:	b98d      	cbnz	r5, 4125a <cancel_async_locked+0x50>
   41236:	428c      	cmp	r4, r1
	list->head = node;
   41238:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
Z_GENLIST_REMOVE(slist, snode)
   4123c:	d101      	bne.n	41242 <cancel_async_locked+0x38>
	list->tail = node;
   4123e:	f8c6 20d4 	str.w	r2, [r6, #212]	; 0xd4
	parent->next = child;
   41242:	2300      	movs	r3, #0
   41244:	6023      	str	r3, [r4, #0]
	return *flagp;
   41246:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   41248:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   4124c:	bf1e      	ittt	ne
   4124e:	f043 0302 	orrne.w	r3, r3, #2
   41252:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   41254:	f003 000f 	andne.w	r0, r3, #15
}
   41258:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   4125a:	428c      	cmp	r4, r1
	parent->next = child;
   4125c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   4125e:	bf08      	it	eq
   41260:	f8c6 50d4 	streq.w	r5, [r6, #212]	; 0xd4
}
   41264:	e7ed      	b.n	41242 <cancel_async_locked+0x38>
	return node->next;
   41266:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   41268:	6812      	ldr	r2, [r2, #0]
   4126a:	e7dd      	b.n	41228 <cancel_async_locked+0x1e>

0004126c <k_work_delayable_busy_get>:
   4126c:	f7f6 b8a0 	b.w	373b0 <k_work_busy_get>

00041270 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   41270:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   41274:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   41278:	4283      	cmp	r3, r0
		return b2 - b1;
   4127a:	bf14      	ite	ne
   4127c:	1ac0      	subne	r0, r0, r3
	return 0;
   4127e:	2000      	moveq	r0, #0
}
   41280:	4770      	bx	lr

00041282 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   41282:	4603      	mov	r3, r0
   41284:	b920      	cbnz	r0, 41290 <z_reschedule_irqlock+0xe>
   41286:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   4128a:	b90a      	cbnz	r2, 41290 <z_reschedule_irqlock+0xe>
   4128c:	f7e1 bd86 	b.w	22d9c <arch_swap>
   41290:	f383 8811 	msr	BASEPRI, r3
   41294:	f3bf 8f6f 	isb	sy
}
   41298:	4770      	bx	lr

0004129a <z_reschedule_unlocked>:
	__asm__ volatile(
   4129a:	f04f 0320 	mov.w	r3, #32
   4129e:	f3ef 8011 	mrs	r0, BASEPRI
   412a2:	f383 8812 	msr	BASEPRI_MAX, r3
   412a6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   412aa:	f7ff bfea 	b.w	41282 <z_reschedule_irqlock>

000412ae <z_priq_dumb_best>:
	return list->head == list;
   412ae:	6803      	ldr	r3, [r0, #0]
}
   412b0:	4298      	cmp	r0, r3
   412b2:	bf14      	ite	ne
   412b4:	4618      	movne	r0, r3
   412b6:	2000      	moveq	r0, #0
   412b8:	4770      	bx	lr

000412ba <z_unpend_all>:
{
   412ba:	b538      	push	{r3, r4, r5, lr}
   412bc:	4605      	mov	r5, r0
	int need_sched = 0;
   412be:	2000      	movs	r0, #0
   412c0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   412c2:	42a5      	cmp	r5, r4
   412c4:	d000      	beq.n	412c8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   412c6:	b904      	cbnz	r4, 412ca <z_unpend_all+0x10>
}
   412c8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   412ca:	4620      	mov	r0, r4
   412cc:	f7f6 fc66 	bl	37b9c <z_unpend_thread>
		z_ready_thread(thread);
   412d0:	4620      	mov	r0, r4
   412d2:	f7f6 fdcd 	bl	37e70 <z_ready_thread>
		need_sched = 1;
   412d6:	2001      	movs	r0, #1
   412d8:	e7f2      	b.n	412c0 <z_unpend_all+0x6>

000412da <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   412da:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   412dc:	f7f7 fe08 	bl	38ef0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   412e0:	bd08      	pop	{r3, pc}

000412e2 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   412e2:	f7f7 be05 	b.w	38ef0 <sys_clock_tick_get>

000412e6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   412e6:	b108      	cbz	r0, 412ec <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   412e8:	f7e0 b9d0 	b.w	2168c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   412ec:	4770      	bx	lr

000412ee <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   412ee:	f1b1 3fff 	cmp.w	r1, #4294967295
   412f2:	bf08      	it	eq
   412f4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   412f8:	b538      	push	{r3, r4, r5, lr}
   412fa:	4605      	mov	r5, r0
   412fc:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   412fe:	d020      	beq.n	41342 <sys_clock_timeout_end_calc+0x54>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   41300:	ea51 0300 	orrs.w	r3, r1, r0
   41304:	d103      	bne.n	4130e <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   41306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   4130a:	f7f7 bdf1 	b.w	38ef0 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   4130e:	f06f 0301 	mvn.w	r3, #1
   41312:	f04f 31ff 	mov.w	r1, #4294967295
   41316:	1a1b      	subs	r3, r3, r0
   41318:	eb61 0204 	sbc.w	r2, r1, r4
   4131c:	2a00      	cmp	r2, #0
   4131e:	db02      	blt.n	41326 <sys_clock_timeout_end_calc+0x38>
			return Z_TICK_ABS(dt);
   41320:	4618      	mov	r0, r3
   41322:	4611      	mov	r1, r2
}
   41324:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   41326:	f7f7 fde3 	bl	38ef0 <sys_clock_tick_get>
   4132a:	2d01      	cmp	r5, #1
   4132c:	4622      	mov	r2, r4
   4132e:	f174 0400 	sbcs.w	r4, r4, #0
   41332:	462b      	mov	r3, r5
   41334:	bfbc      	itt	lt
   41336:	2301      	movlt	r3, #1
   41338:	2200      	movlt	r2, #0
   4133a:	1818      	adds	r0, r3, r0
   4133c:	eb41 0102 	adc.w	r1, r1, r2
   41340:	e7f0      	b.n	41324 <sys_clock_timeout_end_calc+0x36>
		return UINT64_MAX;
   41342:	f04f 30ff 	mov.w	r0, #4294967295
   41346:	4601      	mov	r1, r0
   41348:	e7ec      	b.n	41324 <sys_clock_timeout_end_calc+0x36>

0004134a <add_event>:
{
   4134a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4134c:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   4134e:	e9d0 1300 	ldrd	r1, r3, [r0]
   41352:	4288      	cmp	r0, r1
   41354:	4604      	mov	r4, r0
   41356:	d00d      	beq.n	41374 <add_event+0x2a>
	if ((pending == NULL) ||
   41358:	b163      	cbz	r3, 41374 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   4135a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   4135c:	b100      	cbz	r0, 41360 <add_event+0x16>
   4135e:	3860      	subs	r0, #96	; 0x60
   41360:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   41364:	4639      	mov	r1, r7
   41366:	f7ff ff83 	bl	41270 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   4136a:	2800      	cmp	r0, #0
   4136c:	dc02      	bgt.n	41374 <add_event+0x2a>
	return list->head == list;
   4136e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41370:	42b4      	cmp	r4, r6
   41372:	d109      	bne.n	41388 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   41374:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   41376:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   4137a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   4137c:	6065      	str	r5, [r4, #4]
}
   4137e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   41380:	6863      	ldr	r3, [r4, #4]
   41382:	42b3      	cmp	r3, r6
   41384:	d0f6      	beq.n	41374 <add_event+0x2a>
   41386:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   41388:	2e00      	cmp	r6, #0
   4138a:	d0f3      	beq.n	41374 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   4138c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   4138e:	b101      	cbz	r1, 41392 <add_event+0x48>
   41390:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   41392:	4638      	mov	r0, r7
   41394:	f7ff ff6c 	bl	41270 <z_sched_prio_cmp>
   41398:	2800      	cmp	r0, #0
   4139a:	ddf1      	ble.n	41380 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   4139c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   4139e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   413a2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   413a4:	6075      	str	r5, [r6, #4]
			return;
   413a6:	e7ea      	b.n	4137e <add_event+0x34>

000413a8 <signal_poll_event>:
{
   413a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   413ac:	6884      	ldr	r4, [r0, #8]
{
   413ae:	4605      	mov	r5, r0
   413b0:	460e      	mov	r6, r1
	if (poller != NULL) {
   413b2:	b144      	cbz	r4, 413c6 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   413b4:	7863      	ldrb	r3, [r4, #1]
   413b6:	2b01      	cmp	r3, #1
   413b8:	d137      	bne.n	4142a <signal_poll_event+0x82>
	if (!z_is_thread_pending(thread)) {
   413ba:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   413be:	f013 0302 	ands.w	r3, r3, #2
   413c2:	d10a      	bne.n	413da <signal_poll_event+0x32>
		poller->is_polling = false;
   413c4:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   413c6:	2000      	movs	r0, #0
	event->state |= state;
   413c8:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   413ca:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   413cc:	f3c3 3145 	ubfx	r1, r3, #13, #6
   413d0:	430e      	orrs	r6, r1
   413d2:	f366 3352 	bfi	r3, r6, #13, #6
   413d6:	60eb      	str	r3, [r5, #12]
	return retcode;
   413d8:	e00b      	b.n	413f2 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   413da:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   413de:	f1b3 3fff 	cmp.w	r3, #4294967295
   413e2:	bf08      	it	eq
   413e4:	f112 0f02 	cmneq.w	r2, #2
   413e8:	d106      	bne.n	413f8 <signal_poll_event+0x50>
		poller->is_polling = false;
   413ea:	2300      	movs	r3, #0
		return -EAGAIN;
   413ec:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   413f0:	7023      	strb	r3, [r4, #0]
}
   413f2:	b002      	add	sp, #8
   413f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   413f8:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
	z_unpend_thread(thread);
   413fc:	9001      	str	r0, [sp, #4]
   413fe:	f7f6 fbcd 	bl	37b9c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   41402:	2e08      	cmp	r6, #8
   41404:	bf0c      	ite	eq
   41406:	f06f 0303 	mvneq.w	r3, #3
   4140a:	2300      	movne	r3, #0
   4140c:	62a3      	str	r3, [r4, #40]	; 0x28
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   4140e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   41412:	06db      	lsls	r3, r3, #27
   41414:	d103      	bne.n	4141e <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   41416:	f854 7c48 	ldr.w	r7, [r4, #-72]
   4141a:	9801      	ldr	r0, [sp, #4]
   4141c:	b10f      	cbz	r7, 41422 <signal_poll_event+0x7a>
		poller->is_polling = false;
   4141e:	2300      	movs	r3, #0
   41420:	e7d0      	b.n	413c4 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   41422:	f7f6 fd25 	bl	37e70 <z_ready_thread>
		poller->is_polling = false;
   41426:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   41428:	e7cd      	b.n	413c6 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   4142a:	2b02      	cmp	r3, #2
   4142c:	d1f7      	bne.n	4141e <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   4142e:	7823      	ldrb	r3, [r4, #0]
   41430:	2b00      	cmp	r3, #0
   41432:	d0c8      	beq.n	413c6 <signal_poll_event+0x1e>
   41434:	f854 7c04 	ldr.w	r7, [r4, #-4]
   41438:	2f00      	cmp	r7, #0
   4143a:	d0f4      	beq.n	41426 <signal_poll_event+0x7e>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   4143c:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   41440:	f1a4 0114 	sub.w	r1, r4, #20
   41444:	f104 0014 	add.w	r0, r4, #20
   41448:	9101      	str	r1, [sp, #4]
   4144a:	f7f7 fbc9 	bl	38be0 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   4144e:	4638      	mov	r0, r7
   41450:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   41452:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   41456:	f7f5 ffe1 	bl	3741c <k_work_submit_to_queue>
		poller->is_polling = false;
   4145a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   4145e:	e7b2      	b.n	413c6 <signal_poll_event+0x1e>

00041460 <z_handle_obj_poll_events>:
{
   41460:	4603      	mov	r3, r0
	return list->head == list;
   41462:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   41464:	4283      	cmp	r3, r0
   41466:	d008      	beq.n	4147a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   41468:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   4146c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   4146e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   41470:	2300      	movs	r3, #0
	node->prev = NULL;
   41472:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   41476:	f7ff bf97 	b.w	413a8 <signal_poll_event>
}
   4147a:	4770      	bx	lr

0004147c <z_impl_k_event_post>:
	k_event_post_internal(event, events, true);
   4147c:	2201      	movs	r2, #1
   4147e:	f7f8 b971 	b.w	39764 <k_event_post_internal>

00041482 <z_impl_k_event_set>:
	k_event_post_internal(event, events, false);
   41482:	2200      	movs	r2, #0
   41484:	f7f8 b96e 	b.w	39764 <k_event_post_internal>

00041488 <z_impl_k_event_wait>:
 * Wait for any of the specified events
 */
uint32_t z_impl_k_event_wait(struct k_event *event, uint32_t events,
			     bool reset, k_timeout_t timeout)
{
	uint32_t options = reset ? K_EVENT_WAIT_RESET : 0;
   41488:	2a00      	cmp	r2, #0

	return k_event_wait_internal(event, events, options, timeout);
   4148a:	bf14      	ite	ne
   4148c:	2202      	movne	r2, #2
   4148e:	2200      	moveq	r2, #0
   41490:	f7f8 b9c0 	b.w	39814 <k_event_wait_internal>

00041494 <z_impl_k_event_wait_all>:
 */
uint32_t z_impl_k_event_wait_all(struct k_event *event, uint32_t events,
				 bool reset, k_timeout_t timeout)
{
	uint32_t options = reset ? (K_EVENT_WAIT_RESET | K_EVENT_WAIT_ALL)
				 : K_EVENT_WAIT_ALL;
   41494:	2a00      	cmp	r2, #0

	return k_event_wait_internal(event, events, options, timeout);
   41496:	bf14      	ite	ne
   41498:	2203      	movne	r2, #3
   4149a:	2201      	moveq	r2, #1
   4149c:	f7f8 b9ba 	b.w	39814 <k_event_wait_internal>

000414a0 <k_free>:
	if (ptr != NULL) {
   414a0:	b120      	cbz	r0, 414ac <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   414a2:	1f01      	subs	r1, r0, #4
   414a4:	f850 0c04 	ldr.w	r0, [r0, #-4]
   414a8:	f7f4 bf98 	b.w	363dc <k_heap_free>
}
   414ac:	4770      	bx	lr

000414ae <k_malloc>:
{
   414ae:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   414b0:	2004      	movs	r0, #4
   414b2:	f7f8 ba67 	b.w	39984 <k_aligned_alloc>

000414b6 <k_calloc>:
{
   414b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   414b8:	fba0 2401 	umull	r2, r4, r0, r1
   414bc:	b94c      	cbnz	r4, 414d2 <k_calloc+0x1c>
	ret = k_malloc(bounds);
   414be:	4610      	mov	r0, r2
   414c0:	9201      	str	r2, [sp, #4]
   414c2:	f7ff fff4 	bl	414ae <k_malloc>
	if (ret != NULL) {
   414c6:	9a01      	ldr	r2, [sp, #4]
   414c8:	4605      	mov	r5, r0
   414ca:	b920      	cbnz	r0, 414d6 <k_calloc+0x20>
}
   414cc:	4628      	mov	r0, r5
   414ce:	b003      	add	sp, #12
   414d0:	bd30      	pop	{r4, r5, pc}
		return NULL;
   414d2:	2500      	movs	r5, #0
   414d4:	e7fa      	b.n	414cc <k_calloc+0x16>
__ssp_bos_icheck3(memset, void *, int)
   414d6:	4621      	mov	r1, r4
   414d8:	f000 f893 	bl	41602 <memset>
   414dc:	e7f6      	b.n	414cc <k_calloc+0x16>

000414de <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   414de:	4770      	bx	lr

000414e0 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   414e0:	b510      	push	{r4, lr}
   414e2:	b088      	sub	sp, #32
   414e4:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   414e6:	ab05      	add	r3, sp, #20
   414e8:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   414ea:	230c      	movs	r3, #12
   414ec:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   414ee:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   414f0:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   414f4:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   414f8:	eb0d 0103 	add.w	r1, sp, r3
   414fc:	aa03      	add	r2, sp, #12
   414fe:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   41500:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   41504:	f000 f804 	bl	41510 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   41508:	9b00      	ldr	r3, [sp, #0]
   4150a:	6023      	str	r3, [r4, #0]

	return ret;
}
   4150c:	b008      	add	sp, #32
   4150e:	bd10      	pop	{r4, pc}

00041510 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   41510:	2300      	movs	r3, #0
{
   41512:	b570      	push	{r4, r5, r6, lr}
   41514:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   41516:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   4151a:	ab03      	add	r3, sp, #12
   4151c:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   4151e:	2304      	movs	r3, #4
{
   41520:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   41522:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   41524:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   41526:	b169      	cbz	r1, 41544 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   41528:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   4152a:	680b      	ldr	r3, [r1, #0]
   4152c:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   4152e:	684b      	ldr	r3, [r1, #4]
   41530:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   41532:	2101      	movs	r1, #1
   41534:	2041      	movs	r0, #65	; 0x41
   41536:	f7f8 fab9 	bl	39aac <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   4153a:	1e05      	subs	r5, r0, #0
   4153c:	dc04      	bgt.n	41548 <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   4153e:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   41540:	b008      	add	sp, #32
   41542:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   41544:	2601      	movs	r6, #1
   41546:	e7f4      	b.n	41532 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   41548:	1e23      	subs	r3, r4, #0
   4154a:	bf18      	it	ne
   4154c:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   4154e:	2100      	movs	r1, #0
   41550:	e9cd 4300 	strd	r4, r3, [sp]
   41554:	aa04      	add	r2, sp, #16
   41556:	4633      	mov	r3, r6
   41558:	f7f8 fab6 	bl	39ac8 <psa_call>
   4155c:	4604      	mov	r4, r0
    psa_close(handle);
   4155e:	4628      	mov	r0, r5
   41560:	f7f8 face 	bl	39b00 <psa_close>
    if (status < PSA_SUCCESS) {
   41564:	2c00      	cmp	r4, #0
   41566:	dbea      	blt.n	4153e <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   41568:	4620      	mov	r0, r4
   4156a:	e7e9      	b.n	41540 <tfm_platform_ioctl+0x30>

0004156c <psa_crypto_init>:
}
   4156c:	2000      	movs	r0, #0
   4156e:	4770      	bx	lr

00041570 <fabs>:
   41570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   41574:	4770      	bx	lr

00041576 <abs>:
   41576:	2800      	cmp	r0, #0
   41578:	bfb8      	it	lt
   4157a:	4240      	neglt	r0, r0
   4157c:	4770      	bx	lr

0004157e <atoi>:
   4157e:	220a      	movs	r2, #10
   41580:	2100      	movs	r1, #0
   41582:	f7f9 ba09 	b.w	3a998 <strtol>

00041586 <memchr>:
   41586:	b2c9      	uxtb	r1, r1
   41588:	4402      	add	r2, r0
   4158a:	b510      	push	{r4, lr}
   4158c:	4290      	cmp	r0, r2
   4158e:	4603      	mov	r3, r0
   41590:	d101      	bne.n	41596 <memchr+0x10>
   41592:	2300      	movs	r3, #0
   41594:	e003      	b.n	4159e <memchr+0x18>
   41596:	781c      	ldrb	r4, [r3, #0]
   41598:	3001      	adds	r0, #1
   4159a:	428c      	cmp	r4, r1
   4159c:	d1f6      	bne.n	4158c <memchr+0x6>
   4159e:	4618      	mov	r0, r3
   415a0:	bd10      	pop	{r4, pc}

000415a2 <memcmp>:
   415a2:	3901      	subs	r1, #1
   415a4:	4402      	add	r2, r0
   415a6:	b510      	push	{r4, lr}
   415a8:	4290      	cmp	r0, r2
   415aa:	d101      	bne.n	415b0 <memcmp+0xe>
   415ac:	2000      	movs	r0, #0
   415ae:	e005      	b.n	415bc <memcmp+0x1a>
   415b0:	7803      	ldrb	r3, [r0, #0]
   415b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   415b6:	42a3      	cmp	r3, r4
   415b8:	d001      	beq.n	415be <memcmp+0x1c>
   415ba:	1b18      	subs	r0, r3, r4
   415bc:	bd10      	pop	{r4, pc}
   415be:	3001      	adds	r0, #1
   415c0:	e7f2      	b.n	415a8 <memcmp+0x6>

000415c2 <memcpy>:
   415c2:	440a      	add	r2, r1
   415c4:	1e43      	subs	r3, r0, #1
   415c6:	4291      	cmp	r1, r2
   415c8:	d100      	bne.n	415cc <memcpy+0xa>
   415ca:	4770      	bx	lr
   415cc:	b510      	push	{r4, lr}
   415ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   415d2:	4291      	cmp	r1, r2
   415d4:	f803 4f01 	strb.w	r4, [r3, #1]!
   415d8:	d1f9      	bne.n	415ce <memcpy+0xc>
   415da:	bd10      	pop	{r4, pc}

000415dc <__memcpy_chk>:
   415dc:	429a      	cmp	r2, r3
   415de:	b508      	push	{r3, lr}
   415e0:	d901      	bls.n	415e6 <__memcpy_chk+0xa>
   415e2:	f7e2 fa77 	bl	23ad4 <__chk_fail>
   415e6:	4281      	cmp	r1, r0
   415e8:	d804      	bhi.n	415f4 <__memcpy_chk+0x18>
   415ea:	188b      	adds	r3, r1, r2
   415ec:	4298      	cmp	r0, r3
   415ee:	d3f8      	bcc.n	415e2 <__memcpy_chk+0x6>
   415f0:	4281      	cmp	r1, r0
   415f2:	d102      	bne.n	415fa <__memcpy_chk+0x1e>
   415f4:	1883      	adds	r3, r0, r2
   415f6:	4299      	cmp	r1, r3
   415f8:	d3f3      	bcc.n	415e2 <__memcpy_chk+0x6>
   415fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   415fe:	f7ff bfe0 	b.w	415c2 <memcpy>

00041602 <memset>:
   41602:	4402      	add	r2, r0
   41604:	4603      	mov	r3, r0
   41606:	4293      	cmp	r3, r2
   41608:	d100      	bne.n	4160c <memset+0xa>
   4160a:	4770      	bx	lr
   4160c:	f803 1b01 	strb.w	r1, [r3], #1
   41610:	e7f9      	b.n	41606 <memset+0x4>

00041612 <_calloc_r>:
   41612:	434a      	muls	r2, r1
   41614:	b513      	push	{r0, r1, r4, lr}
   41616:	4611      	mov	r1, r2
   41618:	9201      	str	r2, [sp, #4]
   4161a:	f7f8 fbb7 	bl	39d8c <_malloc_r>
   4161e:	4604      	mov	r4, r0
   41620:	b118      	cbz	r0, 4162a <_calloc_r+0x18>
   41622:	9a01      	ldr	r2, [sp, #4]
   41624:	2100      	movs	r1, #0
   41626:	f7ff ffec 	bl	41602 <memset>
   4162a:	4620      	mov	r0, r4
   4162c:	b002      	add	sp, #8
   4162e:	bd10      	pop	{r4, pc}

00041630 <__sfputc_r>:
   41630:	6893      	ldr	r3, [r2, #8]
   41632:	3b01      	subs	r3, #1
   41634:	2b00      	cmp	r3, #0
   41636:	6093      	str	r3, [r2, #8]
   41638:	b410      	push	{r4}
   4163a:	da08      	bge.n	4164e <__sfputc_r+0x1e>
   4163c:	6994      	ldr	r4, [r2, #24]
   4163e:	42a3      	cmp	r3, r4
   41640:	db01      	blt.n	41646 <__sfputc_r+0x16>
   41642:	290a      	cmp	r1, #10
   41644:	d103      	bne.n	4164e <__sfputc_r+0x1e>
   41646:	f85d 4b04 	ldr.w	r4, [sp], #4
   4164a:	f7f9 bb27 	b.w	3ac9c <__swbuf_r>
   4164e:	6813      	ldr	r3, [r2, #0]
   41650:	1c58      	adds	r0, r3, #1
   41652:	6010      	str	r0, [r2, #0]
   41654:	4608      	mov	r0, r1
   41656:	7019      	strb	r1, [r3, #0]
   41658:	f85d 4b04 	ldr.w	r4, [sp], #4
   4165c:	4770      	bx	lr

0004165e <__sfputs_r>:
   4165e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41660:	4606      	mov	r6, r0
   41662:	460f      	mov	r7, r1
   41664:	4614      	mov	r4, r2
   41666:	18d5      	adds	r5, r2, r3
   41668:	42ac      	cmp	r4, r5
   4166a:	d101      	bne.n	41670 <__sfputs_r+0x12>
   4166c:	2000      	movs	r0, #0
   4166e:	e007      	b.n	41680 <__sfputs_r+0x22>
   41670:	463a      	mov	r2, r7
   41672:	f814 1b01 	ldrb.w	r1, [r4], #1
   41676:	4630      	mov	r0, r6
   41678:	f7ff ffda 	bl	41630 <__sfputc_r>
   4167c:	1c43      	adds	r3, r0, #1
   4167e:	d1f3      	bne.n	41668 <__sfputs_r+0xa>
   41680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00041682 <__cvt>:
   41682:	2b00      	cmp	r3, #0
   41684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41688:	461d      	mov	r5, r3
   4168a:	b088      	sub	sp, #32
   4168c:	bfb4      	ite	lt
   4168e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   41692:	2300      	movge	r3, #0
   41694:	4614      	mov	r4, r2
   41696:	bfbc      	itt	lt
   41698:	4614      	movlt	r4, r2
   4169a:	461d      	movlt	r5, r3
   4169c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   4169e:	bfb8      	it	lt
   416a0:	232d      	movlt	r3, #45	; 0x2d
   416a2:	9e10      	ldr	r6, [sp, #64]	; 0x40
   416a4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   416a8:	7013      	strb	r3, [r2, #0]
   416aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   416ac:	f023 0820 	bic.w	r8, r3, #32
   416b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   416b4:	d005      	beq.n	416c2 <__cvt+0x40>
   416b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   416ba:	d100      	bne.n	416be <__cvt+0x3c>
   416bc:	3601      	adds	r6, #1
   416be:	2302      	movs	r3, #2
   416c0:	e000      	b.n	416c4 <__cvt+0x42>
   416c2:	2303      	movs	r3, #3
   416c4:	aa07      	add	r2, sp, #28
   416c6:	9204      	str	r2, [sp, #16]
   416c8:	aa06      	add	r2, sp, #24
   416ca:	e9cd 3600 	strd	r3, r6, [sp]
   416ce:	e9cd a202 	strd	sl, r2, [sp, #8]
   416d2:	462b      	mov	r3, r5
   416d4:	4622      	mov	r2, r4
   416d6:	f7dd fe9b 	bl	1f410 <_dtoa_r>
   416da:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   416de:	4607      	mov	r7, r0
   416e0:	d102      	bne.n	416e8 <__cvt+0x66>
   416e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   416e4:	07db      	lsls	r3, r3, #31
   416e6:	d522      	bpl.n	4172e <__cvt+0xac>
   416e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   416ec:	eb07 0906 	add.w	r9, r7, r6
   416f0:	d110      	bne.n	41714 <__cvt+0x92>
   416f2:	783b      	ldrb	r3, [r7, #0]
   416f4:	2b30      	cmp	r3, #48	; 0x30
   416f6:	d10a      	bne.n	4170e <__cvt+0x8c>
   416f8:	2200      	movs	r2, #0
   416fa:	2300      	movs	r3, #0
   416fc:	4620      	mov	r0, r4
   416fe:	4629      	mov	r1, r5
   41700:	f7db fac2 	bl	1cc88 <__aeabi_dcmpeq>
   41704:	b918      	cbnz	r0, 4170e <__cvt+0x8c>
   41706:	f1c6 0601 	rsb	r6, r6, #1
   4170a:	f8ca 6000 	str.w	r6, [sl]
   4170e:	f8da 3000 	ldr.w	r3, [sl]
   41712:	4499      	add	r9, r3
   41714:	2200      	movs	r2, #0
   41716:	2300      	movs	r3, #0
   41718:	4620      	mov	r0, r4
   4171a:	4629      	mov	r1, r5
   4171c:	f7db fab4 	bl	1cc88 <__aeabi_dcmpeq>
   41720:	b108      	cbz	r0, 41726 <__cvt+0xa4>
   41722:	f8cd 901c 	str.w	r9, [sp, #28]
   41726:	2230      	movs	r2, #48	; 0x30
   41728:	9b07      	ldr	r3, [sp, #28]
   4172a:	454b      	cmp	r3, r9
   4172c:	d307      	bcc.n	4173e <__cvt+0xbc>
   4172e:	9b07      	ldr	r3, [sp, #28]
   41730:	4638      	mov	r0, r7
   41732:	9a15      	ldr	r2, [sp, #84]	; 0x54
   41734:	1bdb      	subs	r3, r3, r7
   41736:	6013      	str	r3, [r2, #0]
   41738:	b008      	add	sp, #32
   4173a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4173e:	1c59      	adds	r1, r3, #1
   41740:	9107      	str	r1, [sp, #28]
   41742:	701a      	strb	r2, [r3, #0]
   41744:	e7f0      	b.n	41728 <__cvt+0xa6>

00041746 <__exponent>:
   41746:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   41748:	2900      	cmp	r1, #0
   4174a:	4603      	mov	r3, r0
   4174c:	bfb8      	it	lt
   4174e:	4249      	neglt	r1, r1
   41750:	f803 2b02 	strb.w	r2, [r3], #2
   41754:	bfb4      	ite	lt
   41756:	222d      	movlt	r2, #45	; 0x2d
   41758:	222b      	movge	r2, #43	; 0x2b
   4175a:	2909      	cmp	r1, #9
   4175c:	7042      	strb	r2, [r0, #1]
   4175e:	dd2a      	ble.n	417b6 <__exponent+0x70>
   41760:	f10d 0407 	add.w	r4, sp, #7
   41764:	270a      	movs	r7, #10
   41766:	46a4      	mov	ip, r4
   41768:	460a      	mov	r2, r1
   4176a:	46a6      	mov	lr, r4
   4176c:	3c01      	subs	r4, #1
   4176e:	2a63      	cmp	r2, #99	; 0x63
   41770:	fb91 f6f7 	sdiv	r6, r1, r7
   41774:	fb07 1516 	mls	r5, r7, r6, r1
   41778:	4631      	mov	r1, r6
   4177a:	f105 0530 	add.w	r5, r5, #48	; 0x30
   4177e:	f80e 5c01 	strb.w	r5, [lr, #-1]
   41782:	dcf1      	bgt.n	41768 <__exponent+0x22>
   41784:	3130      	adds	r1, #48	; 0x30
   41786:	f1ae 0502 	sub.w	r5, lr, #2
   4178a:	f804 1c01 	strb.w	r1, [r4, #-1]
   4178e:	1c44      	adds	r4, r0, #1
   41790:	4629      	mov	r1, r5
   41792:	4561      	cmp	r1, ip
   41794:	d30a      	bcc.n	417ac <__exponent+0x66>
   41796:	f10d 0209 	add.w	r2, sp, #9
   4179a:	eba2 020e 	sub.w	r2, r2, lr
   4179e:	4565      	cmp	r5, ip
   417a0:	bf88      	it	hi
   417a2:	2200      	movhi	r2, #0
   417a4:	4413      	add	r3, r2
   417a6:	1a18      	subs	r0, r3, r0
   417a8:	b003      	add	sp, #12
   417aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   417ac:	f811 2b01 	ldrb.w	r2, [r1], #1
   417b0:	f804 2f01 	strb.w	r2, [r4, #1]!
   417b4:	e7ed      	b.n	41792 <__exponent+0x4c>
   417b6:	2330      	movs	r3, #48	; 0x30
   417b8:	3130      	adds	r1, #48	; 0x30
   417ba:	7083      	strb	r3, [r0, #2]
   417bc:	1d03      	adds	r3, r0, #4
   417be:	70c1      	strb	r1, [r0, #3]
   417c0:	e7f1      	b.n	417a6 <__exponent+0x60>

000417c2 <_printf_common>:
   417c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   417c6:	4616      	mov	r6, r2
   417c8:	4699      	mov	r9, r3
   417ca:	688a      	ldr	r2, [r1, #8]
   417cc:	4607      	mov	r7, r0
   417ce:	690b      	ldr	r3, [r1, #16]
   417d0:	460c      	mov	r4, r1
   417d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
   417d6:	4293      	cmp	r3, r2
   417d8:	bfb8      	it	lt
   417da:	4613      	movlt	r3, r2
   417dc:	6033      	str	r3, [r6, #0]
   417de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   417e2:	b10a      	cbz	r2, 417e8 <_printf_common+0x26>
   417e4:	3301      	adds	r3, #1
   417e6:	6033      	str	r3, [r6, #0]
   417e8:	6823      	ldr	r3, [r4, #0]
   417ea:	0699      	lsls	r1, r3, #26
   417ec:	bf42      	ittt	mi
   417ee:	6833      	ldrmi	r3, [r6, #0]
   417f0:	3302      	addmi	r3, #2
   417f2:	6033      	strmi	r3, [r6, #0]
   417f4:	6825      	ldr	r5, [r4, #0]
   417f6:	f015 0506 	ands.w	r5, r5, #6
   417fa:	d106      	bne.n	4180a <_printf_common+0x48>
   417fc:	f104 0a19 	add.w	sl, r4, #25
   41800:	68e3      	ldr	r3, [r4, #12]
   41802:	6832      	ldr	r2, [r6, #0]
   41804:	1a9b      	subs	r3, r3, r2
   41806:	42ab      	cmp	r3, r5
   41808:	dc29      	bgt.n	4185e <_printf_common+0x9c>
   4180a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   4180e:	1e13      	subs	r3, r2, #0
   41810:	6822      	ldr	r2, [r4, #0]
   41812:	bf18      	it	ne
   41814:	2301      	movne	r3, #1
   41816:	0692      	lsls	r2, r2, #26
   41818:	d42e      	bmi.n	41878 <_printf_common+0xb6>
   4181a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   4181e:	4649      	mov	r1, r9
   41820:	4638      	mov	r0, r7
   41822:	47c0      	blx	r8
   41824:	3001      	adds	r0, #1
   41826:	d021      	beq.n	4186c <_printf_common+0xaa>
   41828:	6823      	ldr	r3, [r4, #0]
   4182a:	341a      	adds	r4, #26
   4182c:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   41830:	f003 0306 	and.w	r3, r3, #6
   41834:	6832      	ldr	r2, [r6, #0]
   41836:	2600      	movs	r6, #0
   41838:	2b04      	cmp	r3, #4
   4183a:	f854 3c12 	ldr.w	r3, [r4, #-18]
   4183e:	bf08      	it	eq
   41840:	1aad      	subeq	r5, r5, r2
   41842:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   41846:	bf14      	ite	ne
   41848:	2500      	movne	r5, #0
   4184a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   4184e:	4293      	cmp	r3, r2
   41850:	bfc4      	itt	gt
   41852:	1a9b      	subgt	r3, r3, r2
   41854:	18ed      	addgt	r5, r5, r3
   41856:	42b5      	cmp	r5, r6
   41858:	d11a      	bne.n	41890 <_printf_common+0xce>
   4185a:	2000      	movs	r0, #0
   4185c:	e008      	b.n	41870 <_printf_common+0xae>
   4185e:	2301      	movs	r3, #1
   41860:	4652      	mov	r2, sl
   41862:	4649      	mov	r1, r9
   41864:	4638      	mov	r0, r7
   41866:	47c0      	blx	r8
   41868:	3001      	adds	r0, #1
   4186a:	d103      	bne.n	41874 <_printf_common+0xb2>
   4186c:	f04f 30ff 	mov.w	r0, #4294967295
   41870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41874:	3501      	adds	r5, #1
   41876:	e7c3      	b.n	41800 <_printf_common+0x3e>
   41878:	18e1      	adds	r1, r4, r3
   4187a:	1c5a      	adds	r2, r3, #1
   4187c:	2030      	movs	r0, #48	; 0x30
   4187e:	3302      	adds	r3, #2
   41880:	4422      	add	r2, r4
   41882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   41886:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   4188a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   4188e:	e7c4      	b.n	4181a <_printf_common+0x58>
   41890:	2301      	movs	r3, #1
   41892:	4622      	mov	r2, r4
   41894:	4649      	mov	r1, r9
   41896:	4638      	mov	r0, r7
   41898:	47c0      	blx	r8
   4189a:	3001      	adds	r0, #1
   4189c:	d0e6      	beq.n	4186c <_printf_common+0xaa>
   4189e:	3601      	adds	r6, #1
   418a0:	e7d9      	b.n	41856 <_printf_common+0x94>

000418a2 <__sprintf_chk>:
   418a2:	b408      	push	{r3}
   418a4:	b517      	push	{r0, r1, r2, r4, lr}
   418a6:	ab05      	add	r3, sp, #20
   418a8:	1e14      	subs	r4, r2, #0
   418aa:	f853 1b04 	ldr.w	r1, [r3], #4
   418ae:	9301      	str	r3, [sp, #4]
   418b0:	da07      	bge.n	418c2 <__sprintf_chk+0x20>
   418b2:	461a      	mov	r2, r3
   418b4:	f7f9 f9ba 	bl	3ac2c <vsiprintf>
   418b8:	b003      	add	sp, #12
   418ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   418be:	b001      	add	sp, #4
   418c0:	4770      	bx	lr
   418c2:	460a      	mov	r2, r1
   418c4:	4621      	mov	r1, r4
   418c6:	f7f9 f98d 	bl	3abe4 <vsniprintf>
   418ca:	2800      	cmp	r0, #0
   418cc:	dbf4      	blt.n	418b8 <__sprintf_chk+0x16>
   418ce:	42a0      	cmp	r0, r4
   418d0:	d3f2      	bcc.n	418b8 <__sprintf_chk+0x16>
   418d2:	f7e2 f8ff 	bl	23ad4 <__chk_fail>

000418d6 <__sread>:
   418d6:	b510      	push	{r4, lr}
   418d8:	460c      	mov	r4, r1
   418da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   418de:	f7fa fe91 	bl	3c604 <_read_r>
   418e2:	2800      	cmp	r0, #0
   418e4:	bfab      	itete	ge
   418e6:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   418e8:	89a3      	ldrhlt	r3, [r4, #12]
   418ea:	181b      	addge	r3, r3, r0
   418ec:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   418f0:	bfac      	ite	ge
   418f2:	6563      	strge	r3, [r4, #84]	; 0x54
   418f4:	81a3      	strhlt	r3, [r4, #12]
   418f6:	bd10      	pop	{r4, pc}

000418f8 <__seofread>:
   418f8:	2000      	movs	r0, #0
   418fa:	4770      	bx	lr

000418fc <__swrite>:
   418fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41900:	461f      	mov	r7, r3
   41902:	898b      	ldrh	r3, [r1, #12]
   41904:	4605      	mov	r5, r0
   41906:	460c      	mov	r4, r1
   41908:	05db      	lsls	r3, r3, #23
   4190a:	4616      	mov	r6, r2
   4190c:	d505      	bpl.n	4191a <__swrite+0x1e>
   4190e:	2302      	movs	r3, #2
   41910:	2200      	movs	r2, #0
   41912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41916:	f7f9 fe6d 	bl	3b5f4 <_lseek_r>
   4191a:	89a3      	ldrh	r3, [r4, #12]
   4191c:	4632      	mov	r2, r6
   4191e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   41922:	4628      	mov	r0, r5
   41924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   41928:	81a3      	strh	r3, [r4, #12]
   4192a:	463b      	mov	r3, r7
   4192c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   41930:	f7f9 ba06 	b.w	3ad40 <_write_r>

00041934 <__sseek>:
   41934:	b510      	push	{r4, lr}
   41936:	460c      	mov	r4, r1
   41938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4193c:	f7f9 fe5a 	bl	3b5f4 <_lseek_r>
   41940:	1c43      	adds	r3, r0, #1
   41942:	89a3      	ldrh	r3, [r4, #12]
   41944:	bf15      	itete	ne
   41946:	6560      	strne	r0, [r4, #84]	; 0x54
   41948:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   4194c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   41950:	81a3      	strheq	r3, [r4, #12]
   41952:	bf18      	it	ne
   41954:	81a3      	strhne	r3, [r4, #12]
   41956:	bd10      	pop	{r4, pc}

00041958 <__sclose>:
   41958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4195c:	f7f9 ba70 	b.w	3ae40 <_close_r>

00041960 <strcat>:
   41960:	4602      	mov	r2, r0
   41962:	b510      	push	{r4, lr}
   41964:	7814      	ldrb	r4, [r2, #0]
   41966:	4613      	mov	r3, r2
   41968:	3201      	adds	r2, #1
   4196a:	2c00      	cmp	r4, #0
   4196c:	d1fa      	bne.n	41964 <strcat+0x4>
   4196e:	3b01      	subs	r3, #1
   41970:	f811 2b01 	ldrb.w	r2, [r1], #1
   41974:	f803 2f01 	strb.w	r2, [r3, #1]!
   41978:	2a00      	cmp	r2, #0
   4197a:	d1f9      	bne.n	41970 <strcat+0x10>
   4197c:	bd10      	pop	{r4, pc}

0004197e <strchr>:
   4197e:	b2c9      	uxtb	r1, r1
   41980:	4603      	mov	r3, r0
   41982:	f810 2b01 	ldrb.w	r2, [r0], #1
   41986:	b11a      	cbz	r2, 41990 <strchr+0x12>
   41988:	428a      	cmp	r2, r1
   4198a:	d1f9      	bne.n	41980 <strchr+0x2>
   4198c:	4618      	mov	r0, r3
   4198e:	4770      	bx	lr
   41990:	2900      	cmp	r1, #0
   41992:	bf18      	it	ne
   41994:	2300      	movne	r3, #0
   41996:	e7f9      	b.n	4198c <strchr+0xe>

00041998 <strcpy>:
   41998:	4603      	mov	r3, r0
   4199a:	f811 2b01 	ldrb.w	r2, [r1], #1
   4199e:	f803 2b01 	strb.w	r2, [r3], #1
   419a2:	2a00      	cmp	r2, #0
   419a4:	d1f9      	bne.n	4199a <strcpy+0x2>
   419a6:	4770      	bx	lr

000419a8 <strncmp>:
   419a8:	b510      	push	{r4, lr}
   419aa:	b17a      	cbz	r2, 419cc <strncmp+0x24>
   419ac:	4603      	mov	r3, r0
   419ae:	3901      	subs	r1, #1
   419b0:	1884      	adds	r4, r0, r2
   419b2:	f813 0b01 	ldrb.w	r0, [r3], #1
   419b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   419ba:	4290      	cmp	r0, r2
   419bc:	d101      	bne.n	419c2 <strncmp+0x1a>
   419be:	42a3      	cmp	r3, r4
   419c0:	d101      	bne.n	419c6 <strncmp+0x1e>
   419c2:	1a80      	subs	r0, r0, r2
   419c4:	bd10      	pop	{r4, pc}
   419c6:	2800      	cmp	r0, #0
   419c8:	d1f3      	bne.n	419b2 <strncmp+0xa>
   419ca:	e7fa      	b.n	419c2 <strncmp+0x1a>
   419cc:	4610      	mov	r0, r2
   419ce:	e7f9      	b.n	419c4 <strncmp+0x1c>

000419d0 <strncpy>:
   419d0:	3901      	subs	r1, #1
   419d2:	4603      	mov	r3, r0
   419d4:	b510      	push	{r4, lr}
   419d6:	b132      	cbz	r2, 419e6 <strncpy+0x16>
   419d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   419dc:	3a01      	subs	r2, #1
   419de:	f803 4b01 	strb.w	r4, [r3], #1
   419e2:	2c00      	cmp	r4, #0
   419e4:	d1f7      	bne.n	419d6 <strncpy+0x6>
   419e6:	441a      	add	r2, r3
   419e8:	2100      	movs	r1, #0
   419ea:	4293      	cmp	r3, r2
   419ec:	d100      	bne.n	419f0 <strncpy+0x20>
   419ee:	bd10      	pop	{r4, pc}
   419f0:	f803 1b01 	strb.w	r1, [r3], #1
   419f4:	e7f9      	b.n	419ea <strncpy+0x1a>

000419f6 <strnlen>:
   419f6:	4602      	mov	r2, r0
   419f8:	4401      	add	r1, r0
   419fa:	b510      	push	{r4, lr}
   419fc:	428a      	cmp	r2, r1
   419fe:	4613      	mov	r3, r2
   41a00:	d003      	beq.n	41a0a <strnlen+0x14>
   41a02:	781c      	ldrb	r4, [r3, #0]
   41a04:	3201      	adds	r2, #1
   41a06:	2c00      	cmp	r4, #0
   41a08:	d1f8      	bne.n	419fc <strnlen+0x6>
   41a0a:	1a18      	subs	r0, r3, r0
   41a0c:	bd10      	pop	{r4, pc}

00041a0e <strrchr>:
   41a0e:	b538      	push	{r3, r4, r5, lr}
   41a10:	4603      	mov	r3, r0
   41a12:	460c      	mov	r4, r1
   41a14:	b969      	cbnz	r1, 41a32 <strrchr+0x24>
   41a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   41a1a:	f7ff bfb0 	b.w	4197e <strchr>
   41a1e:	1c43      	adds	r3, r0, #1
   41a20:	4605      	mov	r5, r0
   41a22:	4621      	mov	r1, r4
   41a24:	4618      	mov	r0, r3
   41a26:	f7ff ffaa 	bl	4197e <strchr>
   41a2a:	2800      	cmp	r0, #0
   41a2c:	d1f7      	bne.n	41a1e <strrchr+0x10>
   41a2e:	4628      	mov	r0, r5
   41a30:	bd38      	pop	{r3, r4, r5, pc}
   41a32:	2500      	movs	r5, #0
   41a34:	e7f5      	b.n	41a22 <strrchr+0x14>

00041a36 <strstr>:
   41a36:	780a      	ldrb	r2, [r1, #0]
   41a38:	b570      	push	{r4, r5, r6, lr}
   41a3a:	b96a      	cbnz	r2, 41a58 <strstr+0x22>
   41a3c:	bd70      	pop	{r4, r5, r6, pc}
   41a3e:	429a      	cmp	r2, r3
   41a40:	d109      	bne.n	41a56 <strstr+0x20>
   41a42:	460c      	mov	r4, r1
   41a44:	4605      	mov	r5, r0
   41a46:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   41a4a:	2b00      	cmp	r3, #0
   41a4c:	d0f6      	beq.n	41a3c <strstr+0x6>
   41a4e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   41a52:	429e      	cmp	r6, r3
   41a54:	d0f7      	beq.n	41a46 <strstr+0x10>
   41a56:	3001      	adds	r0, #1
   41a58:	7803      	ldrb	r3, [r0, #0]
   41a5a:	2b00      	cmp	r3, #0
   41a5c:	d1ef      	bne.n	41a3e <strstr+0x8>
   41a5e:	4618      	mov	r0, r3
   41a60:	e7ec      	b.n	41a3c <strstr+0x6>

00041a62 <sulp>:
   41a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41a66:	4690      	mov	r8, r2
   41a68:	460f      	mov	r7, r1
   41a6a:	f7fa f92d 	bl	3bcc8 <__ulp>
   41a6e:	4604      	mov	r4, r0
   41a70:	460d      	mov	r5, r1
   41a72:	f1b8 0f00 	cmp.w	r8, #0
   41a76:	d011      	beq.n	41a9c <sulp+0x3a>
   41a78:	f3c7 530a 	ubfx	r3, r7, #20, #11
   41a7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   41a80:	2b00      	cmp	r3, #0
   41a82:	dd0b      	ble.n	41a9c <sulp+0x3a>
   41a84:	051b      	lsls	r3, r3, #20
   41a86:	2400      	movs	r4, #0
   41a88:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   41a8c:	4622      	mov	r2, r4
   41a8e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   41a92:	462b      	mov	r3, r5
   41a94:	f7da fe90 	bl	1c7b8 <__aeabi_dmul>
   41a98:	4604      	mov	r4, r0
   41a9a:	460d      	mov	r5, r1
   41a9c:	4620      	mov	r0, r4
   41a9e:	4629      	mov	r1, r5
   41aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00041aa4 <_strtol_r>:
   41aa4:	f7f8 bef6 	b.w	3a894 <_strtol_l.constprop.0>

00041aa8 <_strtoul_r>:
   41aa8:	f7f9 b820 	b.w	3aaec <_strtoul_l.constprop.0>

00041aac <_vsniprintf_r>:
   41aac:	b530      	push	{r4, r5, lr}
   41aae:	4614      	mov	r4, r2
   41ab0:	b09b      	sub	sp, #108	; 0x6c
   41ab2:	4605      	mov	r5, r0
   41ab4:	461a      	mov	r2, r3
   41ab6:	2c00      	cmp	r4, #0
   41ab8:	da05      	bge.n	41ac6 <_vsniprintf_r+0x1a>
   41aba:	238b      	movs	r3, #139	; 0x8b
   41abc:	6003      	str	r3, [r0, #0]
   41abe:	f04f 30ff 	mov.w	r0, #4294967295
   41ac2:	b01b      	add	sp, #108	; 0x6c
   41ac4:	bd30      	pop	{r4, r5, pc}
   41ac6:	f44f 7302 	mov.w	r3, #520	; 0x208
   41aca:	9100      	str	r1, [sp, #0]
   41acc:	9104      	str	r1, [sp, #16]
   41ace:	4669      	mov	r1, sp
   41ad0:	f8ad 300c 	strh.w	r3, [sp, #12]
   41ad4:	bf14      	ite	ne
   41ad6:	f104 33ff 	addne.w	r3, r4, #4294967295
   41ada:	4623      	moveq	r3, r4
   41adc:	9302      	str	r3, [sp, #8]
   41ade:	9305      	str	r3, [sp, #20]
   41ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   41ae4:	f8ad 300e 	strh.w	r3, [sp, #14]
   41ae8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   41aea:	f7fa f9bd 	bl	3be68 <_svfiprintf_r>
   41aee:	1c43      	adds	r3, r0, #1
   41af0:	bfbc      	itt	lt
   41af2:	238b      	movlt	r3, #139	; 0x8b
   41af4:	602b      	strlt	r3, [r5, #0]
   41af6:	2c00      	cmp	r4, #0
   41af8:	d0e3      	beq.n	41ac2 <_vsniprintf_r+0x16>
   41afa:	9b00      	ldr	r3, [sp, #0]
   41afc:	2200      	movs	r2, #0
   41afe:	701a      	strb	r2, [r3, #0]
   41b00:	e7df      	b.n	41ac2 <_vsniprintf_r+0x16>

00041b02 <abort>:
   41b02:	2006      	movs	r0, #6
   41b04:	b508      	push	{r3, lr}
   41b06:	f7fa fd95 	bl	3c634 <raise>
   41b0a:	2001      	movs	r0, #1
   41b0c:	f7e1 ff6a 	bl	239e4 <_exit>

00041b10 <quorem>:
   41b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41b14:	6903      	ldr	r3, [r0, #16]
   41b16:	4607      	mov	r7, r0
   41b18:	690c      	ldr	r4, [r1, #16]
   41b1a:	42a3      	cmp	r3, r4
   41b1c:	f2c0 8085 	blt.w	41c2a <quorem+0x11a>
   41b20:	3c01      	subs	r4, #1
   41b22:	f100 0514 	add.w	r5, r0, #20
   41b26:	f101 0814 	add.w	r8, r1, #20
   41b2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   41b2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   41b32:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   41b36:	9301      	str	r3, [sp, #4]
   41b38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   41b3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   41b40:	3301      	adds	r3, #1
   41b42:	429a      	cmp	r2, r3
   41b44:	fbb2 f6f3 	udiv	r6, r2, r3
   41b48:	d333      	bcc.n	41bb2 <quorem+0xa2>
   41b4a:	f04f 0e00 	mov.w	lr, #0
   41b4e:	4640      	mov	r0, r8
   41b50:	46ac      	mov	ip, r5
   41b52:	46f2      	mov	sl, lr
   41b54:	f850 2b04 	ldr.w	r2, [r0], #4
   41b58:	b293      	uxth	r3, r2
   41b5a:	4581      	cmp	r9, r0
   41b5c:	ea4f 4212 	mov.w	r2, r2, lsr #16
   41b60:	fb06 e303 	mla	r3, r6, r3, lr
   41b64:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   41b68:	b29b      	uxth	r3, r3
   41b6a:	fb06 e202 	mla	r2, r6, r2, lr
   41b6e:	ebaa 0303 	sub.w	r3, sl, r3
   41b72:	f8dc a000 	ldr.w	sl, [ip]
   41b76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   41b7a:	fa1f fa8a 	uxth.w	sl, sl
   41b7e:	4453      	add	r3, sl
   41b80:	fa1f fa82 	uxth.w	sl, r2
   41b84:	f8dc 2000 	ldr.w	r2, [ip]
   41b88:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   41b8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   41b90:	b29b      	uxth	r3, r3
   41b92:	ea4f 4a22 	mov.w	sl, r2, asr #16
   41b96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   41b9a:	f84c 3b04 	str.w	r3, [ip], #4
   41b9e:	d2d9      	bcs.n	41b54 <quorem+0x44>
   41ba0:	f855 300b 	ldr.w	r3, [r5, fp]
   41ba4:	b92b      	cbnz	r3, 41bb2 <quorem+0xa2>
   41ba6:	9b01      	ldr	r3, [sp, #4]
   41ba8:	3b04      	subs	r3, #4
   41baa:	429d      	cmp	r5, r3
   41bac:	461a      	mov	r2, r3
   41bae:	d330      	bcc.n	41c12 <quorem+0x102>
   41bb0:	613c      	str	r4, [r7, #16]
   41bb2:	4638      	mov	r0, r7
   41bb4:	f000 fa38 	bl	42028 <__mcmp>
   41bb8:	2800      	cmp	r0, #0
   41bba:	db26      	blt.n	41c0a <quorem+0xfa>
   41bbc:	3601      	adds	r6, #1
   41bbe:	4628      	mov	r0, r5
   41bc0:	f04f 0c00 	mov.w	ip, #0
   41bc4:	f858 1b04 	ldr.w	r1, [r8], #4
   41bc8:	f8d0 e000 	ldr.w	lr, [r0]
   41bcc:	b28b      	uxth	r3, r1
   41bce:	45c1      	cmp	r9, r8
   41bd0:	fa1f f28e 	uxth.w	r2, lr
   41bd4:	ebac 0303 	sub.w	r3, ip, r3
   41bd8:	4413      	add	r3, r2
   41bda:	ea4f 4211 	mov.w	r2, r1, lsr #16
   41bde:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   41be2:	eb02 4223 	add.w	r2, r2, r3, asr #16
   41be6:	b29b      	uxth	r3, r3
   41be8:	ea4f 4c22 	mov.w	ip, r2, asr #16
   41bec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   41bf0:	f840 3b04 	str.w	r3, [r0], #4
   41bf4:	d2e6      	bcs.n	41bc4 <quorem+0xb4>
   41bf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   41bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   41bfe:	b922      	cbnz	r2, 41c0a <quorem+0xfa>
   41c00:	3b04      	subs	r3, #4
   41c02:	429d      	cmp	r5, r3
   41c04:	461a      	mov	r2, r3
   41c06:	d30a      	bcc.n	41c1e <quorem+0x10e>
   41c08:	613c      	str	r4, [r7, #16]
   41c0a:	4630      	mov	r0, r6
   41c0c:	b003      	add	sp, #12
   41c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41c12:	6812      	ldr	r2, [r2, #0]
   41c14:	3b04      	subs	r3, #4
   41c16:	2a00      	cmp	r2, #0
   41c18:	d1ca      	bne.n	41bb0 <quorem+0xa0>
   41c1a:	3c01      	subs	r4, #1
   41c1c:	e7c5      	b.n	41baa <quorem+0x9a>
   41c1e:	6812      	ldr	r2, [r2, #0]
   41c20:	3b04      	subs	r3, #4
   41c22:	2a00      	cmp	r2, #0
   41c24:	d1f0      	bne.n	41c08 <quorem+0xf8>
   41c26:	3c01      	subs	r4, #1
   41c28:	e7eb      	b.n	41c02 <quorem+0xf2>
   41c2a:	2000      	movs	r0, #0
   41c2c:	e7ee      	b.n	41c0c <quorem+0xfc>

00041c2e <__sfmoreglue>:
   41c2e:	b570      	push	{r4, r5, r6, lr}
   41c30:	2268      	movs	r2, #104	; 0x68
   41c32:	1e4d      	subs	r5, r1, #1
   41c34:	460e      	mov	r6, r1
   41c36:	4355      	muls	r5, r2
   41c38:	f105 0174 	add.w	r1, r5, #116	; 0x74
   41c3c:	f7f8 f8a6 	bl	39d8c <_malloc_r>
   41c40:	4604      	mov	r4, r0
   41c42:	b140      	cbz	r0, 41c56 <__sfmoreglue+0x28>
   41c44:	2100      	movs	r1, #0
   41c46:	f105 0268 	add.w	r2, r5, #104	; 0x68
   41c4a:	e9c0 1600 	strd	r1, r6, [r0]
   41c4e:	300c      	adds	r0, #12
   41c50:	60a0      	str	r0, [r4, #8]
   41c52:	f7ff fcd6 	bl	41602 <memset>
   41c56:	4620      	mov	r0, r4
   41c58:	bd70      	pop	{r4, r5, r6, pc}

00041c5a <_fwalk_reent>:
   41c5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   41c5e:	4606      	mov	r6, r0
   41c60:	4688      	mov	r8, r1
   41c62:	f100 0448 	add.w	r4, r0, #72	; 0x48
   41c66:	2700      	movs	r7, #0
   41c68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   41c6c:	f1b9 0901 	subs.w	r9, r9, #1
   41c70:	d505      	bpl.n	41c7e <_fwalk_reent+0x24>
   41c72:	6824      	ldr	r4, [r4, #0]
   41c74:	2c00      	cmp	r4, #0
   41c76:	d1f7      	bne.n	41c68 <_fwalk_reent+0xe>
   41c78:	4638      	mov	r0, r7
   41c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   41c7e:	89ab      	ldrh	r3, [r5, #12]
   41c80:	2b01      	cmp	r3, #1
   41c82:	d907      	bls.n	41c94 <_fwalk_reent+0x3a>
   41c84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   41c88:	3301      	adds	r3, #1
   41c8a:	d003      	beq.n	41c94 <_fwalk_reent+0x3a>
   41c8c:	4629      	mov	r1, r5
   41c8e:	4630      	mov	r0, r6
   41c90:	47c0      	blx	r8
   41c92:	4307      	orrs	r7, r0
   41c94:	3568      	adds	r5, #104	; 0x68
   41c96:	e7e9      	b.n	41c6c <_fwalk_reent+0x12>

00041c98 <rshift>:
   41c98:	6903      	ldr	r3, [r0, #16]
   41c9a:	114a      	asrs	r2, r1, #5
   41c9c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   41ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   41ca4:	f100 0414 	add.w	r4, r0, #20
   41ca8:	dd45      	ble.n	41d36 <rshift+0x9e>
   41caa:	f011 011f 	ands.w	r1, r1, #31
   41cae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   41cb2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   41cb6:	d10c      	bne.n	41cd2 <rshift+0x3a>
   41cb8:	f100 0710 	add.w	r7, r0, #16
   41cbc:	4629      	mov	r1, r5
   41cbe:	42b1      	cmp	r1, r6
   41cc0:	d334      	bcc.n	41d2c <rshift+0x94>
   41cc2:	1a9b      	subs	r3, r3, r2
   41cc4:	1eea      	subs	r2, r5, #3
   41cc6:	009b      	lsls	r3, r3, #2
   41cc8:	4296      	cmp	r6, r2
   41cca:	bf38      	it	cc
   41ccc:	2300      	movcc	r3, #0
   41cce:	4423      	add	r3, r4
   41cd0:	e015      	b.n	41cfe <rshift+0x66>
   41cd2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   41cd6:	f1c1 0820 	rsb	r8, r1, #32
   41cda:	f105 0e04 	add.w	lr, r5, #4
   41cde:	46a1      	mov	r9, r4
   41ce0:	40cf      	lsrs	r7, r1
   41ce2:	4576      	cmp	r6, lr
   41ce4:	46f4      	mov	ip, lr
   41ce6:	d815      	bhi.n	41d14 <rshift+0x7c>
   41ce8:	1a9a      	subs	r2, r3, r2
   41cea:	3501      	adds	r5, #1
   41cec:	0092      	lsls	r2, r2, #2
   41cee:	3a04      	subs	r2, #4
   41cf0:	42ae      	cmp	r6, r5
   41cf2:	bf38      	it	cc
   41cf4:	2200      	movcc	r2, #0
   41cf6:	18a3      	adds	r3, r4, r2
   41cf8:	50a7      	str	r7, [r4, r2]
   41cfa:	b107      	cbz	r7, 41cfe <rshift+0x66>
   41cfc:	3304      	adds	r3, #4
   41cfe:	1b1a      	subs	r2, r3, r4
   41d00:	42a3      	cmp	r3, r4
   41d02:	ea4f 02a2 	mov.w	r2, r2, asr #2
   41d06:	bf08      	it	eq
   41d08:	2300      	moveq	r3, #0
   41d0a:	6102      	str	r2, [r0, #16]
   41d0c:	bf08      	it	eq
   41d0e:	6143      	streq	r3, [r0, #20]
   41d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   41d14:	f8dc c000 	ldr.w	ip, [ip]
   41d18:	fa0c fc08 	lsl.w	ip, ip, r8
   41d1c:	ea4c 0707 	orr.w	r7, ip, r7
   41d20:	f849 7b04 	str.w	r7, [r9], #4
   41d24:	f85e 7b04 	ldr.w	r7, [lr], #4
   41d28:	40cf      	lsrs	r7, r1
   41d2a:	e7da      	b.n	41ce2 <rshift+0x4a>
   41d2c:	f851 cb04 	ldr.w	ip, [r1], #4
   41d30:	f847 cf04 	str.w	ip, [r7, #4]!
   41d34:	e7c3      	b.n	41cbe <rshift+0x26>
   41d36:	4623      	mov	r3, r4
   41d38:	e7e1      	b.n	41cfe <rshift+0x66>

00041d3a <__hexdig_fun>:
   41d3a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   41d3e:	2b09      	cmp	r3, #9
   41d40:	d802      	bhi.n	41d48 <__hexdig_fun+0xe>
   41d42:	3820      	subs	r0, #32
   41d44:	b2c0      	uxtb	r0, r0
   41d46:	4770      	bx	lr
   41d48:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   41d4c:	2b05      	cmp	r3, #5
   41d4e:	d801      	bhi.n	41d54 <__hexdig_fun+0x1a>
   41d50:	3847      	subs	r0, #71	; 0x47
   41d52:	e7f7      	b.n	41d44 <__hexdig_fun+0xa>
   41d54:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   41d58:	2b05      	cmp	r3, #5
   41d5a:	d801      	bhi.n	41d60 <__hexdig_fun+0x26>
   41d5c:	3827      	subs	r0, #39	; 0x27
   41d5e:	e7f1      	b.n	41d44 <__hexdig_fun+0xa>
   41d60:	2000      	movs	r0, #0
   41d62:	4770      	bx	lr

00041d64 <L_shift>:
   41d64:	f1c2 0208 	rsb	r2, r2, #8
   41d68:	0092      	lsls	r2, r2, #2
   41d6a:	b570      	push	{r4, r5, r6, lr}
   41d6c:	f1c2 0620 	rsb	r6, r2, #32
   41d70:	6843      	ldr	r3, [r0, #4]
   41d72:	6804      	ldr	r4, [r0, #0]
   41d74:	fa03 f506 	lsl.w	r5, r3, r6
   41d78:	40d3      	lsrs	r3, r2
   41d7a:	432c      	orrs	r4, r5
   41d7c:	6004      	str	r4, [r0, #0]
   41d7e:	f840 3f04 	str.w	r3, [r0, #4]!
   41d82:	4288      	cmp	r0, r1
   41d84:	d3f4      	bcc.n	41d70 <L_shift+0xc>
   41d86:	bd70      	pop	{r4, r5, r6, pc}

00041d88 <__match>:
   41d88:	6803      	ldr	r3, [r0, #0]
   41d8a:	3301      	adds	r3, #1
   41d8c:	b530      	push	{r4, r5, lr}
   41d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
   41d92:	b914      	cbnz	r4, 41d9a <__match+0x12>
   41d94:	6003      	str	r3, [r0, #0]
   41d96:	2001      	movs	r0, #1
   41d98:	bd30      	pop	{r4, r5, pc}
   41d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
   41d9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   41da2:	2d19      	cmp	r5, #25
   41da4:	bf98      	it	ls
   41da6:	3220      	addls	r2, #32
   41da8:	42a2      	cmp	r2, r4
   41daa:	d0f0      	beq.n	41d8e <__match+0x6>
   41dac:	2000      	movs	r0, #0
   41dae:	e7f3      	b.n	41d98 <__match+0x10>

00041db0 <__hexnan>:
   41db0:	680b      	ldr	r3, [r1, #0]
   41db2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41db6:	115e      	asrs	r6, r3, #5
   41db8:	f013 031f 	ands.w	r3, r3, #31
   41dbc:	f04f 0500 	mov.w	r5, #0
   41dc0:	b087      	sub	sp, #28
   41dc2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   41dc6:	4690      	mov	r8, r2
   41dc8:	4682      	mov	sl, r0
   41dca:	6802      	ldr	r2, [r0, #0]
   41dcc:	bf18      	it	ne
   41dce:	3604      	addne	r6, #4
   41dd0:	46ab      	mov	fp, r5
   41dd2:	9301      	str	r3, [sp, #4]
   41dd4:	1f37      	subs	r7, r6, #4
   41dd6:	f846 5c04 	str.w	r5, [r6, #-4]
   41dda:	9502      	str	r5, [sp, #8]
   41ddc:	46b9      	mov	r9, r7
   41dde:	463c      	mov	r4, r7
   41de0:	1c53      	adds	r3, r2, #1
   41de2:	7851      	ldrb	r1, [r2, #1]
   41de4:	9303      	str	r3, [sp, #12]
   41de6:	b341      	cbz	r1, 41e3a <__hexnan+0x8a>
   41de8:	4608      	mov	r0, r1
   41dea:	9205      	str	r2, [sp, #20]
   41dec:	9104      	str	r1, [sp, #16]
   41dee:	f7ff ffa4 	bl	41d3a <__hexdig_fun>
   41df2:	2800      	cmp	r0, #0
   41df4:	d14f      	bne.n	41e96 <__hexnan+0xe6>
   41df6:	9904      	ldr	r1, [sp, #16]
   41df8:	9a05      	ldr	r2, [sp, #20]
   41dfa:	2920      	cmp	r1, #32
   41dfc:	d818      	bhi.n	41e30 <__hexnan+0x80>
   41dfe:	9b02      	ldr	r3, [sp, #8]
   41e00:	459b      	cmp	fp, r3
   41e02:	dd13      	ble.n	41e2c <__hexnan+0x7c>
   41e04:	454c      	cmp	r4, r9
   41e06:	d206      	bcs.n	41e16 <__hexnan+0x66>
   41e08:	2d07      	cmp	r5, #7
   41e0a:	dc04      	bgt.n	41e16 <__hexnan+0x66>
   41e0c:	462a      	mov	r2, r5
   41e0e:	4649      	mov	r1, r9
   41e10:	4620      	mov	r0, r4
   41e12:	f7ff ffa7 	bl	41d64 <L_shift>
   41e16:	4544      	cmp	r4, r8
   41e18:	d94f      	bls.n	41eba <__hexnan+0x10a>
   41e1a:	2300      	movs	r3, #0
   41e1c:	f1a4 0904 	sub.w	r9, r4, #4
   41e20:	f8cd b008 	str.w	fp, [sp, #8]
   41e24:	f844 3c04 	str.w	r3, [r4, #-4]
   41e28:	461d      	mov	r5, r3
   41e2a:	464c      	mov	r4, r9
   41e2c:	9a03      	ldr	r2, [sp, #12]
   41e2e:	e7d7      	b.n	41de0 <__hexnan+0x30>
   41e30:	2929      	cmp	r1, #41	; 0x29
   41e32:	d155      	bne.n	41ee0 <__hexnan+0x130>
   41e34:	3202      	adds	r2, #2
   41e36:	f8ca 2000 	str.w	r2, [sl]
   41e3a:	f1bb 0f00 	cmp.w	fp, #0
   41e3e:	d04f      	beq.n	41ee0 <__hexnan+0x130>
   41e40:	454c      	cmp	r4, r9
   41e42:	d206      	bcs.n	41e52 <__hexnan+0xa2>
   41e44:	2d07      	cmp	r5, #7
   41e46:	dc04      	bgt.n	41e52 <__hexnan+0xa2>
   41e48:	462a      	mov	r2, r5
   41e4a:	4649      	mov	r1, r9
   41e4c:	4620      	mov	r0, r4
   41e4e:	f7ff ff89 	bl	41d64 <L_shift>
   41e52:	4544      	cmp	r4, r8
   41e54:	d933      	bls.n	41ebe <__hexnan+0x10e>
   41e56:	f1a8 0204 	sub.w	r2, r8, #4
   41e5a:	4623      	mov	r3, r4
   41e5c:	f853 1b04 	ldr.w	r1, [r3], #4
   41e60:	429f      	cmp	r7, r3
   41e62:	f842 1f04 	str.w	r1, [r2, #4]!
   41e66:	d2f9      	bcs.n	41e5c <__hexnan+0xac>
   41e68:	1b3b      	subs	r3, r7, r4
   41e6a:	3e03      	subs	r6, #3
   41e6c:	3401      	adds	r4, #1
   41e6e:	2200      	movs	r2, #0
   41e70:	f023 0303 	bic.w	r3, r3, #3
   41e74:	3304      	adds	r3, #4
   41e76:	42b4      	cmp	r4, r6
   41e78:	bf88      	it	hi
   41e7a:	2304      	movhi	r3, #4
   41e7c:	4443      	add	r3, r8
   41e7e:	f843 2b04 	str.w	r2, [r3], #4
   41e82:	429f      	cmp	r7, r3
   41e84:	d2fb      	bcs.n	41e7e <__hexnan+0xce>
   41e86:	683b      	ldr	r3, [r7, #0]
   41e88:	b91b      	cbnz	r3, 41e92 <__hexnan+0xe2>
   41e8a:	4547      	cmp	r7, r8
   41e8c:	d126      	bne.n	41edc <__hexnan+0x12c>
   41e8e:	2301      	movs	r3, #1
   41e90:	603b      	str	r3, [r7, #0]
   41e92:	2005      	movs	r0, #5
   41e94:	e025      	b.n	41ee2 <__hexnan+0x132>
   41e96:	3501      	adds	r5, #1
   41e98:	f10b 0b01 	add.w	fp, fp, #1
   41e9c:	2d08      	cmp	r5, #8
   41e9e:	dd05      	ble.n	41eac <__hexnan+0xfc>
   41ea0:	4544      	cmp	r4, r8
   41ea2:	d9c3      	bls.n	41e2c <__hexnan+0x7c>
   41ea4:	2300      	movs	r3, #0
   41ea6:	3c04      	subs	r4, #4
   41ea8:	2501      	movs	r5, #1
   41eaa:	6023      	str	r3, [r4, #0]
   41eac:	6822      	ldr	r2, [r4, #0]
   41eae:	f000 000f 	and.w	r0, r0, #15
   41eb2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   41eb6:	6022      	str	r2, [r4, #0]
   41eb8:	e7b8      	b.n	41e2c <__hexnan+0x7c>
   41eba:	2508      	movs	r5, #8
   41ebc:	e7b6      	b.n	41e2c <__hexnan+0x7c>
   41ebe:	9b01      	ldr	r3, [sp, #4]
   41ec0:	2b00      	cmp	r3, #0
   41ec2:	d0e0      	beq.n	41e86 <__hexnan+0xd6>
   41ec4:	f04f 32ff 	mov.w	r2, #4294967295
   41ec8:	f1c3 0320 	rsb	r3, r3, #32
   41ecc:	fa22 f303 	lsr.w	r3, r2, r3
   41ed0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   41ed4:	401a      	ands	r2, r3
   41ed6:	f846 2c04 	str.w	r2, [r6, #-4]
   41eda:	e7d4      	b.n	41e86 <__hexnan+0xd6>
   41edc:	3f04      	subs	r7, #4
   41ede:	e7d2      	b.n	41e86 <__hexnan+0xd6>
   41ee0:	2004      	movs	r0, #4
   41ee2:	b007      	add	sp, #28
   41ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00041ee8 <__swhatbuf_r>:
   41ee8:	b570      	push	{r4, r5, r6, lr}
   41eea:	460e      	mov	r6, r1
   41eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41ef0:	b096      	sub	sp, #88	; 0x58
   41ef2:	4614      	mov	r4, r2
   41ef4:	2900      	cmp	r1, #0
   41ef6:	461d      	mov	r5, r3
   41ef8:	da08      	bge.n	41f0c <__swhatbuf_r+0x24>
   41efa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   41efe:	2200      	movs	r2, #0
   41f00:	602a      	str	r2, [r5, #0]
   41f02:	061a      	lsls	r2, r3, #24
   41f04:	d410      	bmi.n	41f28 <__swhatbuf_r+0x40>
   41f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
   41f0a:	e00e      	b.n	41f2a <__swhatbuf_r+0x42>
   41f0c:	466a      	mov	r2, sp
   41f0e:	f7fa fbab 	bl	3c668 <_fstat_r>
   41f12:	2800      	cmp	r0, #0
   41f14:	dbf1      	blt.n	41efa <__swhatbuf_r+0x12>
   41f16:	9a01      	ldr	r2, [sp, #4]
   41f18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   41f1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   41f20:	425a      	negs	r2, r3
   41f22:	415a      	adcs	r2, r3
   41f24:	602a      	str	r2, [r5, #0]
   41f26:	e7ee      	b.n	41f06 <__swhatbuf_r+0x1e>
   41f28:	2340      	movs	r3, #64	; 0x40
   41f2a:	2000      	movs	r0, #0
   41f2c:	6023      	str	r3, [r4, #0]
   41f2e:	b016      	add	sp, #88	; 0x58
   41f30:	bd70      	pop	{r4, r5, r6, pc}

00041f32 <__ascii_mbtowc>:
   41f32:	b082      	sub	sp, #8
   41f34:	b901      	cbnz	r1, 41f38 <__ascii_mbtowc+0x6>
   41f36:	a901      	add	r1, sp, #4
   41f38:	b142      	cbz	r2, 41f4c <__ascii_mbtowc+0x1a>
   41f3a:	b14b      	cbz	r3, 41f50 <__ascii_mbtowc+0x1e>
   41f3c:	7813      	ldrb	r3, [r2, #0]
   41f3e:	600b      	str	r3, [r1, #0]
   41f40:	7812      	ldrb	r2, [r2, #0]
   41f42:	1e10      	subs	r0, r2, #0
   41f44:	bf18      	it	ne
   41f46:	2001      	movne	r0, #1
   41f48:	b002      	add	sp, #8
   41f4a:	4770      	bx	lr
   41f4c:	4610      	mov	r0, r2
   41f4e:	e7fb      	b.n	41f48 <__ascii_mbtowc+0x16>
   41f50:	f06f 0001 	mvn.w	r0, #1
   41f54:	e7f8      	b.n	41f48 <__ascii_mbtowc+0x16>

00041f56 <memmove>:
   41f56:	4288      	cmp	r0, r1
   41f58:	b510      	push	{r4, lr}
   41f5a:	eb01 0402 	add.w	r4, r1, r2
   41f5e:	d902      	bls.n	41f66 <memmove+0x10>
   41f60:	4284      	cmp	r4, r0
   41f62:	4623      	mov	r3, r4
   41f64:	d807      	bhi.n	41f76 <memmove+0x20>
   41f66:	1e43      	subs	r3, r0, #1
   41f68:	42a1      	cmp	r1, r4
   41f6a:	d008      	beq.n	41f7e <memmove+0x28>
   41f6c:	f811 2b01 	ldrb.w	r2, [r1], #1
   41f70:	f803 2f01 	strb.w	r2, [r3, #1]!
   41f74:	e7f8      	b.n	41f68 <memmove+0x12>
   41f76:	4402      	add	r2, r0
   41f78:	4601      	mov	r1, r0
   41f7a:	428a      	cmp	r2, r1
   41f7c:	d100      	bne.n	41f80 <memmove+0x2a>
   41f7e:	bd10      	pop	{r4, pc}
   41f80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   41f84:	f802 4d01 	strb.w	r4, [r2, #-1]!
   41f88:	e7f7      	b.n	41f7a <memmove+0x24>

00041f8a <__hi0bits>:
   41f8a:	0c03      	lsrs	r3, r0, #16
   41f8c:	041b      	lsls	r3, r3, #16
   41f8e:	b9d3      	cbnz	r3, 41fc6 <__hi0bits+0x3c>
   41f90:	0400      	lsls	r0, r0, #16
   41f92:	2310      	movs	r3, #16
   41f94:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   41f98:	bf04      	itt	eq
   41f9a:	0200      	lsleq	r0, r0, #8
   41f9c:	3308      	addeq	r3, #8
   41f9e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   41fa2:	bf04      	itt	eq
   41fa4:	0100      	lsleq	r0, r0, #4
   41fa6:	3304      	addeq	r3, #4
   41fa8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   41fac:	bf04      	itt	eq
   41fae:	0080      	lsleq	r0, r0, #2
   41fb0:	3302      	addeq	r3, #2
   41fb2:	2800      	cmp	r0, #0
   41fb4:	db05      	blt.n	41fc2 <__hi0bits+0x38>
   41fb6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   41fba:	f103 0301 	add.w	r3, r3, #1
   41fbe:	bf08      	it	eq
   41fc0:	2320      	moveq	r3, #32
   41fc2:	4618      	mov	r0, r3
   41fc4:	4770      	bx	lr
   41fc6:	2300      	movs	r3, #0
   41fc8:	e7e4      	b.n	41f94 <__hi0bits+0xa>

00041fca <__lo0bits>:
   41fca:	6803      	ldr	r3, [r0, #0]
   41fcc:	4601      	mov	r1, r0
   41fce:	f013 0207 	ands.w	r2, r3, #7
   41fd2:	d00b      	beq.n	41fec <__lo0bits+0x22>
   41fd4:	07da      	lsls	r2, r3, #31
   41fd6:	d423      	bmi.n	42020 <__lo0bits+0x56>
   41fd8:	0798      	lsls	r0, r3, #30
   41fda:	bf47      	ittee	mi
   41fdc:	085b      	lsrmi	r3, r3, #1
   41fde:	2001      	movmi	r0, #1
   41fe0:	089b      	lsrpl	r3, r3, #2
   41fe2:	2002      	movpl	r0, #2
   41fe4:	bf4c      	ite	mi
   41fe6:	600b      	strmi	r3, [r1, #0]
   41fe8:	600b      	strpl	r3, [r1, #0]
   41fea:	4770      	bx	lr
   41fec:	b298      	uxth	r0, r3
   41fee:	b9a8      	cbnz	r0, 4201c <__lo0bits+0x52>
   41ff0:	0c1b      	lsrs	r3, r3, #16
   41ff2:	2010      	movs	r0, #16
   41ff4:	b2da      	uxtb	r2, r3
   41ff6:	b90a      	cbnz	r2, 41ffc <__lo0bits+0x32>
   41ff8:	3008      	adds	r0, #8
   41ffa:	0a1b      	lsrs	r3, r3, #8
   41ffc:	071a      	lsls	r2, r3, #28
   41ffe:	bf04      	itt	eq
   42000:	091b      	lsreq	r3, r3, #4
   42002:	3004      	addeq	r0, #4
   42004:	079a      	lsls	r2, r3, #30
   42006:	bf04      	itt	eq
   42008:	089b      	lsreq	r3, r3, #2
   4200a:	3002      	addeq	r0, #2
   4200c:	07da      	lsls	r2, r3, #31
   4200e:	d403      	bmi.n	42018 <__lo0bits+0x4e>
   42010:	085b      	lsrs	r3, r3, #1
   42012:	f100 0001 	add.w	r0, r0, #1
   42016:	d005      	beq.n	42024 <__lo0bits+0x5a>
   42018:	600b      	str	r3, [r1, #0]
   4201a:	4770      	bx	lr
   4201c:	4610      	mov	r0, r2
   4201e:	e7e9      	b.n	41ff4 <__lo0bits+0x2a>
   42020:	2000      	movs	r0, #0
   42022:	4770      	bx	lr
   42024:	2020      	movs	r0, #32
   42026:	4770      	bx	lr

00042028 <__mcmp>:
   42028:	6902      	ldr	r2, [r0, #16]
   4202a:	b530      	push	{r4, r5, lr}
   4202c:	690c      	ldr	r4, [r1, #16]
   4202e:	1b12      	subs	r2, r2, r4
   42030:	d10e      	bne.n	42050 <__mcmp+0x28>
   42032:	f100 0314 	add.w	r3, r0, #20
   42036:	3114      	adds	r1, #20
   42038:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   4203c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   42040:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   42044:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   42048:	42a5      	cmp	r5, r4
   4204a:	d003      	beq.n	42054 <__mcmp+0x2c>
   4204c:	d305      	bcc.n	4205a <__mcmp+0x32>
   4204e:	2201      	movs	r2, #1
   42050:	4610      	mov	r0, r2
   42052:	bd30      	pop	{r4, r5, pc}
   42054:	4283      	cmp	r3, r0
   42056:	d3f3      	bcc.n	42040 <__mcmp+0x18>
   42058:	e7fa      	b.n	42050 <__mcmp+0x28>
   4205a:	f04f 32ff 	mov.w	r2, #4294967295
   4205e:	e7f7      	b.n	42050 <__mcmp+0x28>

00042060 <__ratio>:
   42060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42064:	4688      	mov	r8, r1
   42066:	4681      	mov	r9, r0
   42068:	4669      	mov	r1, sp
   4206a:	f7f9 fe51 	bl	3bd10 <__b2d>
   4206e:	460f      	mov	r7, r1
   42070:	4604      	mov	r4, r0
   42072:	460d      	mov	r5, r1
   42074:	4640      	mov	r0, r8
   42076:	a901      	add	r1, sp, #4
   42078:	f7f9 fe4a 	bl	3bd10 <__b2d>
   4207c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   42080:	f8d8 2010 	ldr.w	r2, [r8, #16]
   42084:	468b      	mov	fp, r1
   42086:	eba3 0c02 	sub.w	ip, r3, r2
   4208a:	e9dd 3200 	ldrd	r3, r2, [sp]
   4208e:	1a9b      	subs	r3, r3, r2
   42090:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   42094:	2b00      	cmp	r3, #0
   42096:	bfdb      	ittet	le
   42098:	460a      	movle	r2, r1
   4209a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   4209e:	462a      	movgt	r2, r5
   420a0:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   420a4:	bfc8      	it	gt
   420a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   420aa:	4602      	mov	r2, r0
   420ac:	465b      	mov	r3, fp
   420ae:	4620      	mov	r0, r4
   420b0:	4639      	mov	r1, r7
   420b2:	f7da fcab 	bl	1ca0c <__aeabi_ddiv>
   420b6:	b003      	add	sp, #12
   420b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000420bc <__copybits>:
   420bc:	3901      	subs	r1, #1
   420be:	f102 0314 	add.w	r3, r2, #20
   420c2:	1149      	asrs	r1, r1, #5
   420c4:	b570      	push	{r4, r5, r6, lr}
   420c6:	3101      	adds	r1, #1
   420c8:	6914      	ldr	r4, [r2, #16]
   420ca:	1f05      	subs	r5, r0, #4
   420cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   420d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   420d4:	42a3      	cmp	r3, r4
   420d6:	d30c      	bcc.n	420f2 <__copybits+0x36>
   420d8:	1aa3      	subs	r3, r4, r2
   420da:	3211      	adds	r2, #17
   420dc:	3b11      	subs	r3, #17
   420de:	f023 0303 	bic.w	r3, r3, #3
   420e2:	42a2      	cmp	r2, r4
   420e4:	bf88      	it	hi
   420e6:	2300      	movhi	r3, #0
   420e8:	4418      	add	r0, r3
   420ea:	2300      	movs	r3, #0
   420ec:	4288      	cmp	r0, r1
   420ee:	d305      	bcc.n	420fc <__copybits+0x40>
   420f0:	bd70      	pop	{r4, r5, r6, pc}
   420f2:	f853 6b04 	ldr.w	r6, [r3], #4
   420f6:	f845 6f04 	str.w	r6, [r5, #4]!
   420fa:	e7eb      	b.n	420d4 <__copybits+0x18>
   420fc:	f840 3b04 	str.w	r3, [r0], #4
   42100:	e7f4      	b.n	420ec <__copybits+0x30>

00042102 <__any_on>:
   42102:	f100 0214 	add.w	r2, r0, #20
   42106:	114b      	asrs	r3, r1, #5
   42108:	6900      	ldr	r0, [r0, #16]
   4210a:	4298      	cmp	r0, r3
   4210c:	b510      	push	{r4, lr}
   4210e:	db11      	blt.n	42134 <__any_on+0x32>
   42110:	dd0a      	ble.n	42128 <__any_on+0x26>
   42112:	f011 011f 	ands.w	r1, r1, #31
   42116:	d007      	beq.n	42128 <__any_on+0x26>
   42118:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   4211c:	fa24 f001 	lsr.w	r0, r4, r1
   42120:	fa00 f101 	lsl.w	r1, r0, r1
   42124:	428c      	cmp	r4, r1
   42126:	d10b      	bne.n	42140 <__any_on+0x3e>
   42128:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   4212c:	4293      	cmp	r3, r2
   4212e:	d803      	bhi.n	42138 <__any_on+0x36>
   42130:	2000      	movs	r0, #0
   42132:	bd10      	pop	{r4, pc}
   42134:	4603      	mov	r3, r0
   42136:	e7f7      	b.n	42128 <__any_on+0x26>
   42138:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   4213c:	2900      	cmp	r1, #0
   4213e:	d0f5      	beq.n	4212c <__any_on+0x2a>
   42140:	2001      	movs	r0, #1
   42142:	e7f6      	b.n	42132 <__any_on+0x30>

00042144 <_realloc_r>:
   42144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   42146:	4607      	mov	r7, r0
   42148:	4614      	mov	r4, r2
   4214a:	460e      	mov	r6, r1
   4214c:	b921      	cbnz	r1, 42158 <_realloc_r+0x14>
   4214e:	4611      	mov	r1, r2
   42150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   42154:	f7f7 be1a 	b.w	39d8c <_malloc_r>
   42158:	b922      	cbnz	r2, 42164 <_realloc_r+0x20>
   4215a:	4625      	mov	r5, r4
   4215c:	f7f7 fdca 	bl	39cf4 <_free_r>
   42160:	4628      	mov	r0, r5
   42162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   42164:	f000 f96f 	bl	42446 <_malloc_usable_size_r>
   42168:	42a0      	cmp	r0, r4
   4216a:	d20f      	bcs.n	4218c <_realloc_r+0x48>
   4216c:	4621      	mov	r1, r4
   4216e:	4638      	mov	r0, r7
   42170:	f7f7 fe0c 	bl	39d8c <_malloc_r>
   42174:	4605      	mov	r5, r0
   42176:	2800      	cmp	r0, #0
   42178:	d0f2      	beq.n	42160 <_realloc_r+0x1c>
   4217a:	4631      	mov	r1, r6
   4217c:	4622      	mov	r2, r4
   4217e:	f7ff fa20 	bl	415c2 <memcpy>
   42182:	4631      	mov	r1, r6
   42184:	4638      	mov	r0, r7
   42186:	f7f7 fdb5 	bl	39cf4 <_free_r>
   4218a:	e7e9      	b.n	42160 <_realloc_r+0x1c>
   4218c:	4635      	mov	r5, r6
   4218e:	e7e7      	b.n	42160 <_realloc_r+0x1c>

00042190 <__ssputs_r>:
   42190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   42194:	688e      	ldr	r6, [r1, #8]
   42196:	4682      	mov	sl, r0
   42198:	460c      	mov	r4, r1
   4219a:	4690      	mov	r8, r2
   4219c:	429e      	cmp	r6, r3
   4219e:	461f      	mov	r7, r3
   421a0:	d838      	bhi.n	42214 <__ssputs_r+0x84>
   421a2:	898a      	ldrh	r2, [r1, #12]
   421a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
   421a8:	d032      	beq.n	42210 <__ssputs_r+0x80>
   421aa:	6825      	ldr	r5, [r4, #0]
   421ac:	3301      	adds	r3, #1
   421ae:	6909      	ldr	r1, [r1, #16]
   421b0:	eba5 0901 	sub.w	r9, r5, r1
   421b4:	6965      	ldr	r5, [r4, #20]
   421b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   421ba:	444b      	add	r3, r9
   421bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   421c0:	106d      	asrs	r5, r5, #1
   421c2:	429d      	cmp	r5, r3
   421c4:	bf38      	it	cc
   421c6:	461d      	movcc	r5, r3
   421c8:	0553      	lsls	r3, r2, #21
   421ca:	d531      	bpl.n	42230 <__ssputs_r+0xa0>
   421cc:	4629      	mov	r1, r5
   421ce:	f7f7 fddd 	bl	39d8c <_malloc_r>
   421d2:	4606      	mov	r6, r0
   421d4:	b950      	cbnz	r0, 421ec <__ssputs_r+0x5c>
   421d6:	230c      	movs	r3, #12
   421d8:	f04f 30ff 	mov.w	r0, #4294967295
   421dc:	f8ca 3000 	str.w	r3, [sl]
   421e0:	89a3      	ldrh	r3, [r4, #12]
   421e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   421e6:	81a3      	strh	r3, [r4, #12]
   421e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   421ec:	464a      	mov	r2, r9
   421ee:	6921      	ldr	r1, [r4, #16]
   421f0:	f7ff f9e7 	bl	415c2 <memcpy>
   421f4:	89a3      	ldrh	r3, [r4, #12]
   421f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   421fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   421fe:	81a3      	strh	r3, [r4, #12]
   42200:	6126      	str	r6, [r4, #16]
   42202:	444e      	add	r6, r9
   42204:	6165      	str	r5, [r4, #20]
   42206:	eba5 0509 	sub.w	r5, r5, r9
   4220a:	6026      	str	r6, [r4, #0]
   4220c:	463e      	mov	r6, r7
   4220e:	60a5      	str	r5, [r4, #8]
   42210:	42be      	cmp	r6, r7
   42212:	d900      	bls.n	42216 <__ssputs_r+0x86>
   42214:	463e      	mov	r6, r7
   42216:	4632      	mov	r2, r6
   42218:	4641      	mov	r1, r8
   4221a:	6820      	ldr	r0, [r4, #0]
   4221c:	f7ff fe9b 	bl	41f56 <memmove>
   42220:	68a3      	ldr	r3, [r4, #8]
   42222:	2000      	movs	r0, #0
   42224:	1b9b      	subs	r3, r3, r6
   42226:	60a3      	str	r3, [r4, #8]
   42228:	6823      	ldr	r3, [r4, #0]
   4222a:	4433      	add	r3, r6
   4222c:	6023      	str	r3, [r4, #0]
   4222e:	e7db      	b.n	421e8 <__ssputs_r+0x58>
   42230:	462a      	mov	r2, r5
   42232:	f7ff ff87 	bl	42144 <_realloc_r>
   42236:	4606      	mov	r6, r0
   42238:	2800      	cmp	r0, #0
   4223a:	d1e1      	bne.n	42200 <__ssputs_r+0x70>
   4223c:	6921      	ldr	r1, [r4, #16]
   4223e:	4650      	mov	r0, sl
   42240:	f7f7 fd58 	bl	39cf4 <_free_r>
   42244:	e7c7      	b.n	421d6 <__ssputs_r+0x46>

00042246 <_sungetc_r>:
   42246:	b538      	push	{r3, r4, r5, lr}
   42248:	1c4b      	adds	r3, r1, #1
   4224a:	4614      	mov	r4, r2
   4224c:	d103      	bne.n	42256 <_sungetc_r+0x10>
   4224e:	f04f 35ff 	mov.w	r5, #4294967295
   42252:	4628      	mov	r0, r5
   42254:	bd38      	pop	{r3, r4, r5, pc}
   42256:	8993      	ldrh	r3, [r2, #12]
   42258:	b2cd      	uxtb	r5, r1
   4225a:	f023 0320 	bic.w	r3, r3, #32
   4225e:	8193      	strh	r3, [r2, #12]
   42260:	6b63      	ldr	r3, [r4, #52]	; 0x34
   42262:	6852      	ldr	r2, [r2, #4]
   42264:	b18b      	cbz	r3, 4228a <_sungetc_r+0x44>
   42266:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   42268:	4293      	cmp	r3, r2
   4226a:	dd08      	ble.n	4227e <_sungetc_r+0x38>
   4226c:	6823      	ldr	r3, [r4, #0]
   4226e:	1e5a      	subs	r2, r3, #1
   42270:	6022      	str	r2, [r4, #0]
   42272:	f803 5c01 	strb.w	r5, [r3, #-1]
   42276:	6863      	ldr	r3, [r4, #4]
   42278:	3301      	adds	r3, #1
   4227a:	6063      	str	r3, [r4, #4]
   4227c:	e7e9      	b.n	42252 <_sungetc_r+0xc>
   4227e:	4621      	mov	r1, r4
   42280:	f000 f89d 	bl	423be <__submore>
   42284:	2800      	cmp	r0, #0
   42286:	d0f1      	beq.n	4226c <_sungetc_r+0x26>
   42288:	e7e1      	b.n	4224e <_sungetc_r+0x8>
   4228a:	6921      	ldr	r1, [r4, #16]
   4228c:	6823      	ldr	r3, [r4, #0]
   4228e:	b151      	cbz	r1, 422a6 <_sungetc_r+0x60>
   42290:	4299      	cmp	r1, r3
   42292:	d208      	bcs.n	422a6 <_sungetc_r+0x60>
   42294:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   42298:	42a9      	cmp	r1, r5
   4229a:	d104      	bne.n	422a6 <_sungetc_r+0x60>
   4229c:	3b01      	subs	r3, #1
   4229e:	3201      	adds	r2, #1
   422a0:	6023      	str	r3, [r4, #0]
   422a2:	6062      	str	r2, [r4, #4]
   422a4:	e7d5      	b.n	42252 <_sungetc_r+0xc>
   422a6:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   422aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
   422ae:	6363      	str	r3, [r4, #52]	; 0x34
   422b0:	2303      	movs	r3, #3
   422b2:	63a3      	str	r3, [r4, #56]	; 0x38
   422b4:	4623      	mov	r3, r4
   422b6:	f803 5f46 	strb.w	r5, [r3, #70]!
   422ba:	6023      	str	r3, [r4, #0]
   422bc:	2301      	movs	r3, #1
   422be:	e7dc      	b.n	4227a <_sungetc_r+0x34>

000422c0 <__ssrefill_r>:
   422c0:	b510      	push	{r4, lr}
   422c2:	460c      	mov	r4, r1
   422c4:	6b49      	ldr	r1, [r1, #52]	; 0x34
   422c6:	b169      	cbz	r1, 422e4 <__ssrefill_r+0x24>
   422c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   422cc:	4299      	cmp	r1, r3
   422ce:	d001      	beq.n	422d4 <__ssrefill_r+0x14>
   422d0:	f7f7 fd10 	bl	39cf4 <_free_r>
   422d4:	2000      	movs	r0, #0
   422d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   422d8:	6360      	str	r0, [r4, #52]	; 0x34
   422da:	6063      	str	r3, [r4, #4]
   422dc:	b113      	cbz	r3, 422e4 <__ssrefill_r+0x24>
   422de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   422e0:	6023      	str	r3, [r4, #0]
   422e2:	bd10      	pop	{r4, pc}
   422e4:	6923      	ldr	r3, [r4, #16]
   422e6:	f04f 30ff 	mov.w	r0, #4294967295
   422ea:	6023      	str	r3, [r4, #0]
   422ec:	2300      	movs	r3, #0
   422ee:	6063      	str	r3, [r4, #4]
   422f0:	89a3      	ldrh	r3, [r4, #12]
   422f2:	f043 0320 	orr.w	r3, r3, #32
   422f6:	81a3      	strh	r3, [r4, #12]
   422f8:	e7f3      	b.n	422e2 <__ssrefill_r+0x22>

000422fa <__sccl>:
   422fa:	b570      	push	{r4, r5, r6, lr}
   422fc:	780b      	ldrb	r3, [r1, #0]
   422fe:	4604      	mov	r4, r0
   42300:	2b5e      	cmp	r3, #94	; 0x5e
   42302:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   42306:	bf13      	iteet	ne
   42308:	1c48      	addne	r0, r1, #1
   4230a:	1c88      	addeq	r0, r1, #2
   4230c:	784b      	ldrbeq	r3, [r1, #1]
   4230e:	2200      	movne	r2, #0
   42310:	bf08      	it	eq
   42312:	2201      	moveq	r2, #1
   42314:	1e61      	subs	r1, r4, #1
   42316:	f801 2f01 	strb.w	r2, [r1, #1]!
   4231a:	42a9      	cmp	r1, r5
   4231c:	d1fb      	bne.n	42316 <__sccl+0x1c>
   4231e:	b90b      	cbnz	r3, 42324 <__sccl+0x2a>
   42320:	3801      	subs	r0, #1
   42322:	bd70      	pop	{r4, r5, r6, pc}
   42324:	f082 0201 	eor.w	r2, r2, #1
   42328:	4605      	mov	r5, r0
   4232a:	54e2      	strb	r2, [r4, r3]
   4232c:	4628      	mov	r0, r5
   4232e:	f810 1b01 	ldrb.w	r1, [r0], #1
   42332:	292d      	cmp	r1, #45	; 0x2d
   42334:	d006      	beq.n	42344 <__sccl+0x4a>
   42336:	295d      	cmp	r1, #93	; 0x5d
   42338:	d0f3      	beq.n	42322 <__sccl+0x28>
   4233a:	b909      	cbnz	r1, 42340 <__sccl+0x46>
   4233c:	4628      	mov	r0, r5
   4233e:	e7f0      	b.n	42322 <__sccl+0x28>
   42340:	460b      	mov	r3, r1
   42342:	e7f1      	b.n	42328 <__sccl+0x2e>
   42344:	786e      	ldrb	r6, [r5, #1]
   42346:	2e5d      	cmp	r6, #93	; 0x5d
   42348:	d0fa      	beq.n	42340 <__sccl+0x46>
   4234a:	42b3      	cmp	r3, r6
   4234c:	dcf8      	bgt.n	42340 <__sccl+0x46>
   4234e:	3502      	adds	r5, #2
   42350:	4619      	mov	r1, r3
   42352:	3101      	adds	r1, #1
   42354:	428e      	cmp	r6, r1
   42356:	5462      	strb	r2, [r4, r1]
   42358:	dcfb      	bgt.n	42352 <__sccl+0x58>
   4235a:	1af1      	subs	r1, r6, r3
   4235c:	1c58      	adds	r0, r3, #1
   4235e:	3901      	subs	r1, #1
   42360:	42b3      	cmp	r3, r6
   42362:	bfa8      	it	ge
   42364:	2100      	movge	r1, #0
   42366:	1843      	adds	r3, r0, r1
   42368:	e7e0      	b.n	4232c <__sccl+0x32>

0004236a <_raise_r>:
   4236a:	291f      	cmp	r1, #31
   4236c:	b538      	push	{r3, r4, r5, lr}
   4236e:	4604      	mov	r4, r0
   42370:	460d      	mov	r5, r1
   42372:	d904      	bls.n	4237e <_raise_r+0x14>
   42374:	2316      	movs	r3, #22
   42376:	6003      	str	r3, [r0, #0]
   42378:	f04f 30ff 	mov.w	r0, #4294967295
   4237c:	bd38      	pop	{r3, r4, r5, pc}
   4237e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   42380:	b112      	cbz	r2, 42388 <_raise_r+0x1e>
   42382:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   42386:	b94b      	cbnz	r3, 4239c <_raise_r+0x32>
   42388:	4620      	mov	r0, r4
   4238a:	f000 f816 	bl	423ba <_getpid_r>
   4238e:	462a      	mov	r2, r5
   42390:	4601      	mov	r1, r0
   42392:	4620      	mov	r0, r4
   42394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   42398:	f7fa b954 	b.w	3c644 <_kill_r>
   4239c:	2b01      	cmp	r3, #1
   4239e:	d00a      	beq.n	423b6 <_raise_r+0x4c>
   423a0:	1c59      	adds	r1, r3, #1
   423a2:	d103      	bne.n	423ac <_raise_r+0x42>
   423a4:	2316      	movs	r3, #22
   423a6:	6003      	str	r3, [r0, #0]
   423a8:	2001      	movs	r0, #1
   423aa:	e7e7      	b.n	4237c <_raise_r+0x12>
   423ac:	2400      	movs	r4, #0
   423ae:	4628      	mov	r0, r5
   423b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   423b4:	4798      	blx	r3
   423b6:	2000      	movs	r0, #0
   423b8:	e7e0      	b.n	4237c <_raise_r+0x12>

000423ba <_getpid_r>:
   423ba:	f7fb bac0 	b.w	3d93e <_getpid>

000423be <__submore>:
   423be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   423c2:	460c      	mov	r4, r1
   423c4:	6b49      	ldr	r1, [r1, #52]	; 0x34
   423c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   423ca:	4299      	cmp	r1, r3
   423cc:	d11a      	bne.n	42404 <__submore+0x46>
   423ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
   423d2:	f7f7 fcdb 	bl	39d8c <_malloc_r>
   423d6:	b918      	cbnz	r0, 423e0 <__submore+0x22>
   423d8:	f04f 30ff 	mov.w	r0, #4294967295
   423dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   423e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   423e4:	6360      	str	r0, [r4, #52]	; 0x34
   423e6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   423ea:	63a3      	str	r3, [r4, #56]	; 0x38
   423ec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   423f0:	7083      	strb	r3, [r0, #2]
   423f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   423f6:	7043      	strb	r3, [r0, #1]
   423f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   423fc:	7003      	strb	r3, [r0, #0]
   423fe:	6020      	str	r0, [r4, #0]
   42400:	2000      	movs	r0, #0
   42402:	e7eb      	b.n	423dc <__submore+0x1e>
   42404:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   42406:	0077      	lsls	r7, r6, #1
   42408:	463a      	mov	r2, r7
   4240a:	f7ff fe9b 	bl	42144 <_realloc_r>
   4240e:	4605      	mov	r5, r0
   42410:	2800      	cmp	r0, #0
   42412:	d0e1      	beq.n	423d8 <__submore+0x1a>
   42414:	eb00 0806 	add.w	r8, r0, r6
   42418:	4601      	mov	r1, r0
   4241a:	4632      	mov	r2, r6
   4241c:	4640      	mov	r0, r8
   4241e:	f7ff f8d0 	bl	415c2 <memcpy>
   42422:	f8c4 8000 	str.w	r8, [r4]
   42426:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   4242a:	e7e9      	b.n	42400 <__submore+0x42>

0004242c <__ascii_wctomb>:
   4242c:	b149      	cbz	r1, 42442 <__ascii_wctomb+0x16>
   4242e:	2aff      	cmp	r2, #255	; 0xff
   42430:	bf8d      	iteet	hi
   42432:	238a      	movhi	r3, #138	; 0x8a
   42434:	2001      	movls	r0, #1
   42436:	700a      	strbls	r2, [r1, #0]
   42438:	6003      	strhi	r3, [r0, #0]
   4243a:	bf88      	it	hi
   4243c:	f04f 30ff 	movhi.w	r0, #4294967295
   42440:	4770      	bx	lr
   42442:	4608      	mov	r0, r1
   42444:	4770      	bx	lr

00042446 <_malloc_usable_size_r>:
   42446:	f851 3c04 	ldr.w	r3, [r1, #-4]
   4244a:	1f18      	subs	r0, r3, #4
   4244c:	2b00      	cmp	r3, #0
   4244e:	bfbc      	itt	lt
   42450:	580b      	ldrlt	r3, [r1, r0]
   42452:	18c0      	addlt	r0, r0, r3
   42454:	4770      	bx	lr
	...

00042458 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   42458:	f7ef befc 	b.w	32254 <SystemInit>
