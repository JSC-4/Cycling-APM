
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_table>:
   1c200:	00 1a 02 20 0d 33 02 00 e9 d6 03 00 91 32 02 00     ... .3.......2..
   1c210:	91 32 02 00 91 32 02 00 91 32 02 00 91 32 02 00     .2...2...2...2..
	...
   1c22c:	55 2d 02 00 91 32 02 00 00 00 00 00 bd 2c 02 00     U-...2.......,..
   1c23c:	91 32 02 00                                         .2..

0001c240 <_irq_vector_table>:
   1c240:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c250:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c260:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c270:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c280:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c290:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c2a0:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c2b0:	1b ed 03 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .....-...-...-..
   1c2c0:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c2d0:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c2e0:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c2f0:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c300:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c310:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c320:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c330:	f9 2d 02 00 f9 2d 02 00 f9 2d 02 00 f9 2d 02 00     .-...-...-...-..
   1c340:	f9 2d 02 00                                         .-..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
   1c410:	d0 0a 03 00 01 00 00 00 00 c2 01 00 00 c2 01 00     ................
   1c420:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	3c01      	subs	r4, #1
   1c57c:	bf28      	it	cs
   1c57e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1c582:	d2e9      	bcs.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_dmul>:
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c7be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c7c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c7c6:	bf1d      	ittte	ne
   1c7c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c7cc:	ea94 0f0c 	teqne	r4, ip
   1c7d0:	ea95 0f0c 	teqne	r5, ip
   1c7d4:	f000 f8de 	bleq	1c994 <__aeabi_dmul+0x1dc>
   1c7d8:	442c      	add	r4, r5
   1c7da:	ea81 0603 	eor.w	r6, r1, r3
   1c7de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c7e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c7e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c7ea:	bf18      	it	ne
   1c7ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c7f8:	d038      	beq.n	1c86c <__aeabi_dmul+0xb4>
   1c7fa:	fba0 ce02 	umull	ip, lr, r0, r2
   1c7fe:	f04f 0500 	mov.w	r5, #0
   1c802:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c80a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c80e:	f04f 0600 	mov.w	r6, #0
   1c812:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c816:	f09c 0f00 	teq	ip, #0
   1c81a:	bf18      	it	ne
   1c81c:	f04e 0e01 	orrne.w	lr, lr, #1
   1c820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c82c:	d204      	bcs.n	1c838 <__aeabi_dmul+0x80>
   1c82e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c832:	416d      	adcs	r5, r5
   1c834:	eb46 0606 	adc.w	r6, r6, r6
   1c838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c83c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c84c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c850:	bf88      	it	hi
   1c852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c856:	d81e      	bhi.n	1c896 <__aeabi_dmul+0xde>
   1c858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c85c:	bf08      	it	eq
   1c85e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c862:	f150 0000 	adcs.w	r0, r0, #0
   1c866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c86a:	bd70      	pop	{r4, r5, r6, pc}
   1c86c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c870:	ea46 0101 	orr.w	r1, r6, r1
   1c874:	ea40 0002 	orr.w	r0, r0, r2
   1c878:	ea81 0103 	eor.w	r1, r1, r3
   1c87c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c880:	bfc2      	ittt	gt
   1c882:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c88a:	bd70      	popgt	{r4, r5, r6, pc}
   1c88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c890:	f04f 0e00 	mov.w	lr, #0
   1c894:	3c01      	subs	r4, #1
   1c896:	f300 80ab 	bgt.w	1c9f0 <__aeabi_dmul+0x238>
   1c89a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c89e:	bfde      	ittt	le
   1c8a0:	2000      	movle	r0, #0
   1c8a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c8a6:	bd70      	pople	{r4, r5, r6, pc}
   1c8a8:	f1c4 0400 	rsb	r4, r4, #0
   1c8ac:	3c20      	subs	r4, #32
   1c8ae:	da35      	bge.n	1c91c <__aeabi_dmul+0x164>
   1c8b0:	340c      	adds	r4, #12
   1c8b2:	dc1b      	bgt.n	1c8ec <__aeabi_dmul+0x134>
   1c8b4:	f104 0414 	add.w	r4, r4, #20
   1c8b8:	f1c4 0520 	rsb	r5, r4, #32
   1c8bc:	fa00 f305 	lsl.w	r3, r0, r5
   1c8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1c8c4:	fa01 f205 	lsl.w	r2, r1, r5
   1c8c8:	ea40 0002 	orr.w	r0, r0, r2
   1c8cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c8d8:	fa21 f604 	lsr.w	r6, r1, r4
   1c8dc:	eb42 0106 	adc.w	r1, r2, r6
   1c8e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c8e4:	bf08      	it	eq
   1c8e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c8ea:	bd70      	pop	{r4, r5, r6, pc}
   1c8ec:	f1c4 040c 	rsb	r4, r4, #12
   1c8f0:	f1c4 0520 	rsb	r5, r4, #32
   1c8f4:	fa00 f304 	lsl.w	r3, r0, r4
   1c8f8:	fa20 f005 	lsr.w	r0, r0, r5
   1c8fc:	fa01 f204 	lsl.w	r2, r1, r4
   1c900:	ea40 0002 	orr.w	r0, r0, r2
   1c904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c90c:	f141 0100 	adc.w	r1, r1, #0
   1c910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c914:	bf08      	it	eq
   1c916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c91a:	bd70      	pop	{r4, r5, r6, pc}
   1c91c:	f1c4 0520 	rsb	r5, r4, #32
   1c920:	fa00 f205 	lsl.w	r2, r0, r5
   1c924:	ea4e 0e02 	orr.w	lr, lr, r2
   1c928:	fa20 f304 	lsr.w	r3, r0, r4
   1c92c:	fa01 f205 	lsl.w	r2, r1, r5
   1c930:	ea43 0302 	orr.w	r3, r3, r2
   1c934:	fa21 f004 	lsr.w	r0, r1, r4
   1c938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c93c:	fa21 f204 	lsr.w	r2, r1, r4
   1c940:	ea20 0002 	bic.w	r0, r0, r2
   1c944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c94c:	bf08      	it	eq
   1c94e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c952:	bd70      	pop	{r4, r5, r6, pc}
   1c954:	f094 0f00 	teq	r4, #0
   1c958:	d10f      	bne.n	1c97a <__aeabi_dmul+0x1c2>
   1c95a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c95e:	0040      	lsls	r0, r0, #1
   1c960:	eb41 0101 	adc.w	r1, r1, r1
   1c964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c968:	bf08      	it	eq
   1c96a:	3c01      	subeq	r4, #1
   1c96c:	d0f7      	beq.n	1c95e <__aeabi_dmul+0x1a6>
   1c96e:	ea41 0106 	orr.w	r1, r1, r6
   1c972:	f095 0f00 	teq	r5, #0
   1c976:	bf18      	it	ne
   1c978:	4770      	bxne	lr
   1c97a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c97e:	0052      	lsls	r2, r2, #1
   1c980:	eb43 0303 	adc.w	r3, r3, r3
   1c984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c988:	bf08      	it	eq
   1c98a:	3d01      	subeq	r5, #1
   1c98c:	d0f7      	beq.n	1c97e <__aeabi_dmul+0x1c6>
   1c98e:	ea43 0306 	orr.w	r3, r3, r6
   1c992:	4770      	bx	lr
   1c994:	ea94 0f0c 	teq	r4, ip
   1c998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c99c:	bf18      	it	ne
   1c99e:	ea95 0f0c 	teqne	r5, ip
   1c9a2:	d00c      	beq.n	1c9be <__aeabi_dmul+0x206>
   1c9a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9a8:	bf18      	it	ne
   1c9aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9ae:	d1d1      	bne.n	1c954 <__aeabi_dmul+0x19c>
   1c9b0:	ea81 0103 	eor.w	r1, r1, r3
   1c9b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9b8:	f04f 0000 	mov.w	r0, #0
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9c2:	bf06      	itte	eq
   1c9c4:	4610      	moveq	r0, r2
   1c9c6:	4619      	moveq	r1, r3
   1c9c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9cc:	d019      	beq.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ce:	ea94 0f0c 	teq	r4, ip
   1c9d2:	d102      	bne.n	1c9da <__aeabi_dmul+0x222>
   1c9d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c9d8:	d113      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9da:	ea95 0f0c 	teq	r5, ip
   1c9de:	d105      	bne.n	1c9ec <__aeabi_dmul+0x234>
   1c9e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c9e4:	bf1c      	itt	ne
   1c9e6:	4610      	movne	r0, r2
   1c9e8:	4619      	movne	r1, r3
   1c9ea:	d10a      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ec:	ea81 0103 	eor.w	r1, r1, r3
   1c9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c9f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c9fc:	f04f 0000 	mov.w	r0, #0
   1ca00:	bd70      	pop	{r4, r5, r6, pc}
   1ca02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ca06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ca0a:	bd70      	pop	{r4, r5, r6, pc}

0001ca0c <__aeabi_ddiv>:
   1ca0c:	b570      	push	{r4, r5, r6, lr}
   1ca0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ca12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ca16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ca1a:	bf1d      	ittte	ne
   1ca1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ca20:	ea94 0f0c 	teqne	r4, ip
   1ca24:	ea95 0f0c 	teqne	r5, ip
   1ca28:	f000 f8a7 	bleq	1cb7a <__aeabi_ddiv+0x16e>
   1ca2c:	eba4 0405 	sub.w	r4, r4, r5
   1ca30:	ea81 0e03 	eor.w	lr, r1, r3
   1ca34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ca3c:	f000 8088 	beq.w	1cb50 <__aeabi_ddiv+0x144>
   1ca40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ca44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ca4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ca50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ca54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ca58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ca5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ca60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ca64:	429d      	cmp	r5, r3
   1ca66:	bf08      	it	eq
   1ca68:	4296      	cmpeq	r6, r2
   1ca6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ca6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ca72:	d202      	bcs.n	1ca7a <__aeabi_ddiv+0x6e>
   1ca74:	085b      	lsrs	r3, r3, #1
   1ca76:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca7a:	1ab6      	subs	r6, r6, r2
   1ca7c:	eb65 0503 	sbc.w	r5, r5, r3
   1ca80:	085b      	lsrs	r3, r3, #1
   1ca82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ca8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ca8e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ca92:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ca96:	bf22      	ittt	cs
   1ca98:	1ab6      	subcs	r6, r6, r2
   1ca9a:	4675      	movcs	r5, lr
   1ca9c:	ea40 000c 	orrcs.w	r0, r0, ip
   1caa0:	085b      	lsrs	r3, r3, #1
   1caa2:	ea4f 0232 	mov.w	r2, r2, rrx
   1caa6:	ebb6 0e02 	subs.w	lr, r6, r2
   1caaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   1caae:	bf22      	ittt	cs
   1cab0:	1ab6      	subcs	r6, r6, r2
   1cab2:	4675      	movcs	r5, lr
   1cab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cab8:	085b      	lsrs	r3, r3, #1
   1caba:	ea4f 0232 	mov.w	r2, r2, rrx
   1cabe:	ebb6 0e02 	subs.w	lr, r6, r2
   1cac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cac6:	bf22      	ittt	cs
   1cac8:	1ab6      	subcs	r6, r6, r2
   1caca:	4675      	movcs	r5, lr
   1cacc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cad0:	085b      	lsrs	r3, r3, #1
   1cad2:	ea4f 0232 	mov.w	r2, r2, rrx
   1cad6:	ebb6 0e02 	subs.w	lr, r6, r2
   1cada:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cade:	bf22      	ittt	cs
   1cae0:	1ab6      	subcs	r6, r6, r2
   1cae2:	4675      	movcs	r5, lr
   1cae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cae8:	ea55 0e06 	orrs.w	lr, r5, r6
   1caec:	d018      	beq.n	1cb20 <__aeabi_ddiv+0x114>
   1caee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1caf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1caf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cafa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cafe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cb02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cb06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cb0a:	d1c0      	bne.n	1ca8e <__aeabi_ddiv+0x82>
   1cb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb10:	d10b      	bne.n	1cb2a <__aeabi_ddiv+0x11e>
   1cb12:	ea41 0100 	orr.w	r1, r1, r0
   1cb16:	f04f 0000 	mov.w	r0, #0
   1cb1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1cb1e:	e7b6      	b.n	1ca8e <__aeabi_ddiv+0x82>
   1cb20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb24:	bf04      	itt	eq
   1cb26:	4301      	orreq	r1, r0
   1cb28:	2000      	moveq	r0, #0
   1cb2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb2e:	bf88      	it	hi
   1cb30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb34:	f63f aeaf 	bhi.w	1c896 <__aeabi_dmul+0xde>
   1cb38:	ebb5 0c03 	subs.w	ip, r5, r3
   1cb3c:	bf04      	itt	eq
   1cb3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   1cb42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1cb46:	f150 0000 	adcs.w	r0, r0, #0
   1cb4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1cb54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1cb58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1cb5c:	bfc2      	ittt	gt
   1cb5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb66:	bd70      	popgt	{r4, r5, r6, pc}
   1cb68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb6c:	f04f 0e00 	mov.w	lr, #0
   1cb70:	3c01      	subs	r4, #1
   1cb72:	e690      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb74:	ea45 0e06 	orr.w	lr, r5, r6
   1cb78:	e68d      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cb7e:	ea94 0f0c 	teq	r4, ip
   1cb82:	bf08      	it	eq
   1cb84:	ea95 0f0c 	teqeq	r5, ip
   1cb88:	f43f af3b 	beq.w	1ca02 <__aeabi_dmul+0x24a>
   1cb8c:	ea94 0f0c 	teq	r4, ip
   1cb90:	d10a      	bne.n	1cba8 <__aeabi_ddiv+0x19c>
   1cb92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1cb96:	f47f af34 	bne.w	1ca02 <__aeabi_dmul+0x24a>
   1cb9a:	ea95 0f0c 	teq	r5, ip
   1cb9e:	f47f af25 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cba2:	4610      	mov	r0, r2
   1cba4:	4619      	mov	r1, r3
   1cba6:	e72c      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cba8:	ea95 0f0c 	teq	r5, ip
   1cbac:	d106      	bne.n	1cbbc <__aeabi_ddiv+0x1b0>
   1cbae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cbb2:	f43f aefd 	beq.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbb6:	4610      	mov	r0, r2
   1cbb8:	4619      	mov	r1, r3
   1cbba:	e722      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cbbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cbc0:	bf18      	it	ne
   1cbc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cbc6:	f47f aec5 	bne.w	1c954 <__aeabi_dmul+0x19c>
   1cbca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cbce:	f47f af0d 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cbd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cbd6:	f47f aeeb 	bne.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbda:	e712      	b.n	1ca02 <__aeabi_dmul+0x24a>

0001cbdc <__gedf2>:
   1cbdc:	f04f 3cff 	mov.w	ip, #4294967295
   1cbe0:	e006      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbe2:	bf00      	nop

0001cbe4 <__ledf2>:
   1cbe4:	f04f 0c01 	mov.w	ip, #1
   1cbe8:	e002      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbea:	bf00      	nop

0001cbec <__cmpdf2>:
   1cbec:	f04f 0c01 	mov.w	ip, #1
   1cbf0:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cbfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc00:	bf18      	it	ne
   1cc02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cc06:	d01b      	beq.n	1cc40 <__cmpdf2+0x54>
   1cc08:	b001      	add	sp, #4
   1cc0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cc0e:	bf0c      	ite	eq
   1cc10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cc14:	ea91 0f03 	teqne	r1, r3
   1cc18:	bf02      	ittt	eq
   1cc1a:	ea90 0f02 	teqeq	r0, r2
   1cc1e:	2000      	moveq	r0, #0
   1cc20:	4770      	bxeq	lr
   1cc22:	f110 0f00 	cmn.w	r0, #0
   1cc26:	ea91 0f03 	teq	r1, r3
   1cc2a:	bf58      	it	pl
   1cc2c:	4299      	cmppl	r1, r3
   1cc2e:	bf08      	it	eq
   1cc30:	4290      	cmpeq	r0, r2
   1cc32:	bf2c      	ite	cs
   1cc34:	17d8      	asrcs	r0, r3, #31
   1cc36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cc3a:	f040 0001 	orr.w	r0, r0, #1
   1cc3e:	4770      	bx	lr
   1cc40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc48:	d102      	bne.n	1cc50 <__cmpdf2+0x64>
   1cc4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cc4e:	d107      	bne.n	1cc60 <__cmpdf2+0x74>
   1cc50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc58:	d1d6      	bne.n	1cc08 <__cmpdf2+0x1c>
   1cc5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cc5e:	d0d3      	beq.n	1cc08 <__cmpdf2+0x1c>
   1cc60:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cc64:	4770      	bx	lr
   1cc66:	bf00      	nop

0001cc68 <__aeabi_cdrcmple>:
   1cc68:	4684      	mov	ip, r0
   1cc6a:	4610      	mov	r0, r2
   1cc6c:	4662      	mov	r2, ip
   1cc6e:	468c      	mov	ip, r1
   1cc70:	4619      	mov	r1, r3
   1cc72:	4663      	mov	r3, ip
   1cc74:	e000      	b.n	1cc78 <__aeabi_cdcmpeq>
   1cc76:	bf00      	nop

0001cc78 <__aeabi_cdcmpeq>:
   1cc78:	b501      	push	{r0, lr}
   1cc7a:	f7ff ffb7 	bl	1cbec <__cmpdf2>
   1cc7e:	2800      	cmp	r0, #0
   1cc80:	bf48      	it	mi
   1cc82:	f110 0f00 	cmnmi.w	r0, #0
   1cc86:	bd01      	pop	{r0, pc}

0001cc88 <__aeabi_dcmpeq>:
   1cc88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cc8c:	f7ff fff4 	bl	1cc78 <__aeabi_cdcmpeq>
   1cc90:	bf0c      	ite	eq
   1cc92:	2001      	moveq	r0, #1
   1cc94:	2000      	movne	r0, #0
   1cc96:	f85d fb08 	ldr.w	pc, [sp], #8
   1cc9a:	bf00      	nop

0001cc9c <__aeabi_dcmplt>:
   1cc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cca0:	f7ff ffea 	bl	1cc78 <__aeabi_cdcmpeq>
   1cca4:	bf34      	ite	cc
   1cca6:	2001      	movcc	r0, #1
   1cca8:	2000      	movcs	r0, #0
   1ccaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccae:	bf00      	nop

0001ccb0 <__aeabi_dcmple>:
   1ccb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccb4:	f7ff ffe0 	bl	1cc78 <__aeabi_cdcmpeq>
   1ccb8:	bf94      	ite	ls
   1ccba:	2001      	movls	r0, #1
   1ccbc:	2000      	movhi	r0, #0
   1ccbe:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccc2:	bf00      	nop

0001ccc4 <__aeabi_dcmpge>:
   1ccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccc8:	f7ff ffce 	bl	1cc68 <__aeabi_cdrcmple>
   1cccc:	bf94      	ite	ls
   1ccce:	2001      	movls	r0, #1
   1ccd0:	2000      	movhi	r0, #0
   1ccd2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccd6:	bf00      	nop

0001ccd8 <__aeabi_dcmpgt>:
   1ccd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccdc:	f7ff ffc4 	bl	1cc68 <__aeabi_cdrcmple>
   1cce0:	bf34      	ite	cc
   1cce2:	2001      	movcc	r0, #1
   1cce4:	2000      	movcs	r0, #0
   1cce6:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccea:	bf00      	nop

0001ccec <__aeabi_dcmpun>:
   1ccec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1ccf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1ccf4:	d102      	bne.n	1ccfc <__aeabi_dcmpun+0x10>
   1ccf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1ccfa:	d10a      	bne.n	1cd12 <__aeabi_dcmpun+0x26>
   1ccfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cd00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cd04:	d102      	bne.n	1cd0c <__aeabi_dcmpun+0x20>
   1cd06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cd0a:	d102      	bne.n	1cd12 <__aeabi_dcmpun+0x26>
   1cd0c:	f04f 0000 	mov.w	r0, #0
   1cd10:	4770      	bx	lr
   1cd12:	f04f 0001 	mov.w	r0, #1
   1cd16:	4770      	bx	lr

0001cd18 <__aeabi_d2iz>:
   1cd18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cd1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd20:	d215      	bcs.n	1cd4e <__aeabi_d2iz+0x36>
   1cd22:	d511      	bpl.n	1cd48 <__aeabi_d2iz+0x30>
   1cd24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd2c:	d912      	bls.n	1cd54 <__aeabi_d2iz+0x3c>
   1cd2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd3e:	fa23 f002 	lsr.w	r0, r3, r2
   1cd42:	bf18      	it	ne
   1cd44:	4240      	negne	r0, r0
   1cd46:	4770      	bx	lr
   1cd48:	f04f 0000 	mov.w	r0, #0
   1cd4c:	4770      	bx	lr
   1cd4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd52:	d105      	bne.n	1cd60 <__aeabi_d2iz+0x48>
   1cd54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cd58:	bf08      	it	eq
   1cd5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cd5e:	4770      	bx	lr
   1cd60:	f04f 0000 	mov.w	r0, #0
   1cd64:	4770      	bx	lr
   1cd66:	bf00      	nop

0001cd68 <__aeabi_d2uiz>:
   1cd68:	004a      	lsls	r2, r1, #1
   1cd6a:	d211      	bcs.n	1cd90 <__aeabi_d2uiz+0x28>
   1cd6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd70:	d211      	bcs.n	1cd96 <__aeabi_d2uiz+0x2e>
   1cd72:	d50d      	bpl.n	1cd90 <__aeabi_d2uiz+0x28>
   1cd74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd7c:	d40e      	bmi.n	1cd9c <__aeabi_d2uiz+0x34>
   1cd7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd8a:	fa23 f002 	lsr.w	r0, r3, r2
   1cd8e:	4770      	bx	lr
   1cd90:	f04f 0000 	mov.w	r0, #0
   1cd94:	4770      	bx	lr
   1cd96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd9a:	d102      	bne.n	1cda2 <__aeabi_d2uiz+0x3a>
   1cd9c:	f04f 30ff 	mov.w	r0, #4294967295
   1cda0:	4770      	bx	lr
   1cda2:	f04f 0000 	mov.w	r0, #0
   1cda6:	4770      	bx	lr

0001cda8 <__aeabi_d2f>:
   1cda8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cdac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1cdb0:	bf24      	itt	cs
   1cdb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1cdb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1cdba:	d90d      	bls.n	1cdd8 <__aeabi_d2f+0x30>
   1cdbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cdc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1cdc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1cdc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1cdcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1cdd0:	bf08      	it	eq
   1cdd2:	f020 0001 	biceq.w	r0, r0, #1
   1cdd6:	4770      	bx	lr
   1cdd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1cddc:	d121      	bne.n	1ce22 <__aeabi_d2f+0x7a>
   1cdde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1cde2:	bfbc      	itt	lt
   1cde4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1cde8:	4770      	bxlt	lr
   1cdea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cdee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1cdf2:	f1c2 0218 	rsb	r2, r2, #24
   1cdf6:	f1c2 0c20 	rsb	ip, r2, #32
   1cdfa:	fa10 f30c 	lsls.w	r3, r0, ip
   1cdfe:	fa20 f002 	lsr.w	r0, r0, r2
   1ce02:	bf18      	it	ne
   1ce04:	f040 0001 	orrne.w	r0, r0, #1
   1ce08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1ce0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1ce10:	fa03 fc0c 	lsl.w	ip, r3, ip
   1ce14:	ea40 000c 	orr.w	r0, r0, ip
   1ce18:	fa23 f302 	lsr.w	r3, r3, r2
   1ce1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1ce20:	e7cc      	b.n	1cdbc <__aeabi_d2f+0x14>
   1ce22:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1ce26:	d107      	bne.n	1ce38 <__aeabi_d2f+0x90>
   1ce28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1ce2c:	bf1e      	ittt	ne
   1ce2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1ce32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1ce36:	4770      	bxne	lr
   1ce38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1ce3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ce40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ce44:	4770      	bx	lr
   1ce46:	bf00      	nop

0001ce48 <__aeabi_ldivmod>:
   1ce48:	b97b      	cbnz	r3, 1ce6a <__aeabi_ldivmod+0x22>
   1ce4a:	b972      	cbnz	r2, 1ce6a <__aeabi_ldivmod+0x22>
   1ce4c:	2900      	cmp	r1, #0
   1ce4e:	bfbe      	ittt	lt
   1ce50:	2000      	movlt	r0, #0
   1ce52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1ce56:	e006      	blt.n	1ce66 <__aeabi_ldivmod+0x1e>
   1ce58:	bf08      	it	eq
   1ce5a:	2800      	cmpeq	r0, #0
   1ce5c:	bf1c      	itt	ne
   1ce5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1ce62:	f04f 30ff 	movne.w	r0, #4294967295
   1ce66:	f000 b875 	b.w	1cf54 <__aeabi_idiv0>
   1ce6a:	f1ad 0c08 	sub.w	ip, sp, #8
   1ce6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ce72:	2900      	cmp	r1, #0
   1ce74:	db09      	blt.n	1ce8a <__aeabi_ldivmod+0x42>
   1ce76:	2b00      	cmp	r3, #0
   1ce78:	db1a      	blt.n	1ceb0 <__aeabi_ldivmod+0x68>
   1ce7a:	f000 f884 	bl	1cf86 <__udivmoddi4>
   1ce7e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce86:	b004      	add	sp, #16
   1ce88:	4770      	bx	lr
   1ce8a:	4240      	negs	r0, r0
   1ce8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce90:	2b00      	cmp	r3, #0
   1ce92:	db1b      	blt.n	1cecc <__aeabi_ldivmod+0x84>
   1ce94:	f000 f877 	bl	1cf86 <__udivmoddi4>
   1ce98:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cea0:	b004      	add	sp, #16
   1cea2:	4240      	negs	r0, r0
   1cea4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cea8:	4252      	negs	r2, r2
   1ceaa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ceae:	4770      	bx	lr
   1ceb0:	4252      	negs	r2, r2
   1ceb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ceb6:	f000 f866 	bl	1cf86 <__udivmoddi4>
   1ceba:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cebe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cec2:	b004      	add	sp, #16
   1cec4:	4240      	negs	r0, r0
   1cec6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ceca:	4770      	bx	lr
   1cecc:	4252      	negs	r2, r2
   1cece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ced2:	f000 f858 	bl	1cf86 <__udivmoddi4>
   1ced6:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ceda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cede:	b004      	add	sp, #16
   1cee0:	4252      	negs	r2, r2
   1cee2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cee6:	4770      	bx	lr

0001cee8 <__aeabi_uldivmod>:
   1cee8:	b953      	cbnz	r3, 1cf00 <__aeabi_uldivmod+0x18>
   1ceea:	b94a      	cbnz	r2, 1cf00 <__aeabi_uldivmod+0x18>
   1ceec:	2900      	cmp	r1, #0
   1ceee:	bf08      	it	eq
   1cef0:	2800      	cmpeq	r0, #0
   1cef2:	bf1c      	itt	ne
   1cef4:	f04f 31ff 	movne.w	r1, #4294967295
   1cef8:	f04f 30ff 	movne.w	r0, #4294967295
   1cefc:	f000 b82a 	b.w	1cf54 <__aeabi_idiv0>
   1cf00:	f1ad 0c08 	sub.w	ip, sp, #8
   1cf04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cf08:	f000 f83d 	bl	1cf86 <__udivmoddi4>
   1cf0c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cf10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cf14:	b004      	add	sp, #16
   1cf16:	4770      	bx	lr

0001cf18 <__aeabi_d2ulz>:
   1cf18:	b5d0      	push	{r4, r6, r7, lr}
   1cf1a:	2200      	movs	r2, #0
   1cf1c:	4b0b      	ldr	r3, [pc, #44]	; (1cf4c <__aeabi_d2ulz+0x34>)
   1cf1e:	4606      	mov	r6, r0
   1cf20:	460f      	mov	r7, r1
   1cf22:	f7ff fc49 	bl	1c7b8 <__aeabi_dmul>
   1cf26:	f7ff ff1f 	bl	1cd68 <__aeabi_d2uiz>
   1cf2a:	4604      	mov	r4, r0
   1cf2c:	f7ff fbca 	bl	1c6c4 <__aeabi_ui2d>
   1cf30:	2200      	movs	r2, #0
   1cf32:	4b07      	ldr	r3, [pc, #28]	; (1cf50 <__aeabi_d2ulz+0x38>)
   1cf34:	f7ff fc40 	bl	1c7b8 <__aeabi_dmul>
   1cf38:	4602      	mov	r2, r0
   1cf3a:	460b      	mov	r3, r1
   1cf3c:	4630      	mov	r0, r6
   1cf3e:	4639      	mov	r1, r7
   1cf40:	f7ff fa82 	bl	1c448 <__aeabi_dsub>
   1cf44:	f7ff ff10 	bl	1cd68 <__aeabi_d2uiz>
   1cf48:	4621      	mov	r1, r4
   1cf4a:	bdd0      	pop	{r4, r6, r7, pc}
   1cf4c:	3df00000 	.word	0x3df00000
   1cf50:	41f00000 	.word	0x41f00000

0001cf54 <__aeabi_idiv0>:
   1cf54:	4770      	bx	lr
   1cf56:	bf00      	nop

0001cf58 <__aeabi_d2lz>:
   1cf58:	b538      	push	{r3, r4, r5, lr}
   1cf5a:	2200      	movs	r2, #0
   1cf5c:	2300      	movs	r3, #0
   1cf5e:	4604      	mov	r4, r0
   1cf60:	460d      	mov	r5, r1
   1cf62:	f7ff fe9b 	bl	1cc9c <__aeabi_dcmplt>
   1cf66:	b928      	cbnz	r0, 1cf74 <__aeabi_d2lz+0x1c>
   1cf68:	4620      	mov	r0, r4
   1cf6a:	4629      	mov	r1, r5
   1cf6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cf70:	f7ff bfd2 	b.w	1cf18 <__aeabi_d2ulz>
   1cf74:	4620      	mov	r0, r4
   1cf76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1cf7a:	f7ff ffcd 	bl	1cf18 <__aeabi_d2ulz>
   1cf7e:	4240      	negs	r0, r0
   1cf80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cf84:	bd38      	pop	{r3, r4, r5, pc}

0001cf86 <__udivmoddi4>:
   1cf86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1cf8c:	4688      	mov	r8, r1
   1cf8e:	468e      	mov	lr, r1
   1cf90:	4615      	mov	r5, r2
   1cf92:	4604      	mov	r4, r0
   1cf94:	4619      	mov	r1, r3
   1cf96:	2b00      	cmp	r3, #0
   1cf98:	f040 80c6 	bne.w	1d128 <__udivmoddi4+0x1a2>
   1cf9c:	4542      	cmp	r2, r8
   1cf9e:	fab2 f782 	clz	r7, r2
   1cfa2:	d946      	bls.n	1d032 <__udivmoddi4+0xac>
   1cfa4:	b14f      	cbz	r7, 1cfba <__udivmoddi4+0x34>
   1cfa6:	f1c7 0c20 	rsb	ip, r7, #32
   1cfaa:	fa08 f307 	lsl.w	r3, r8, r7
   1cfae:	40bd      	lsls	r5, r7
   1cfb0:	40bc      	lsls	r4, r7
   1cfb2:	fa20 fc0c 	lsr.w	ip, r0, ip
   1cfb6:	ea4c 0e03 	orr.w	lr, ip, r3
   1cfba:	ea4f 4815 	mov.w	r8, r5, lsr #16
   1cfbe:	fa1f fc85 	uxth.w	ip, r5
   1cfc2:	0c22      	lsrs	r2, r4, #16
   1cfc4:	fbbe f9f8 	udiv	r9, lr, r8
   1cfc8:	fb08 e319 	mls	r3, r8, r9, lr
   1cfcc:	fb09 fa0c 	mul.w	sl, r9, ip
   1cfd0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   1cfd4:	459a      	cmp	sl, r3
   1cfd6:	d928      	bls.n	1d02a <__udivmoddi4+0xa4>
   1cfd8:	18eb      	adds	r3, r5, r3
   1cfda:	f109 30ff 	add.w	r0, r9, #4294967295
   1cfde:	d204      	bcs.n	1cfea <__udivmoddi4+0x64>
   1cfe0:	459a      	cmp	sl, r3
   1cfe2:	d902      	bls.n	1cfea <__udivmoddi4+0x64>
   1cfe4:	f1a9 0002 	sub.w	r0, r9, #2
   1cfe8:	442b      	add	r3, r5
   1cfea:	eba3 030a 	sub.w	r3, r3, sl
   1cfee:	b2a4      	uxth	r4, r4
   1cff0:	fbb3 f2f8 	udiv	r2, r3, r8
   1cff4:	fb08 3312 	mls	r3, r8, r2, r3
   1cff8:	fb02 fc0c 	mul.w	ip, r2, ip
   1cffc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1d000:	45a4      	cmp	ip, r4
   1d002:	d914      	bls.n	1d02e <__udivmoddi4+0xa8>
   1d004:	192c      	adds	r4, r5, r4
   1d006:	f102 33ff 	add.w	r3, r2, #4294967295
   1d00a:	d203      	bcs.n	1d014 <__udivmoddi4+0x8e>
   1d00c:	45a4      	cmp	ip, r4
   1d00e:	d901      	bls.n	1d014 <__udivmoddi4+0x8e>
   1d010:	1e93      	subs	r3, r2, #2
   1d012:	442c      	add	r4, r5
   1d014:	eba4 040c 	sub.w	r4, r4, ip
   1d018:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1d01c:	b11e      	cbz	r6, 1d026 <__udivmoddi4+0xa0>
   1d01e:	40fc      	lsrs	r4, r7
   1d020:	2300      	movs	r3, #0
   1d022:	6034      	str	r4, [r6, #0]
   1d024:	6073      	str	r3, [r6, #4]
   1d026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d02a:	4648      	mov	r0, r9
   1d02c:	e7dd      	b.n	1cfea <__udivmoddi4+0x64>
   1d02e:	4613      	mov	r3, r2
   1d030:	e7f0      	b.n	1d014 <__udivmoddi4+0x8e>
   1d032:	b902      	cbnz	r2, 1d036 <__udivmoddi4+0xb0>
   1d034:	deff      	udf	#255	; 0xff
   1d036:	bb8f      	cbnz	r7, 1d09c <__udivmoddi4+0x116>
   1d038:	eba8 0302 	sub.w	r3, r8, r2
   1d03c:	2101      	movs	r1, #1
   1d03e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d042:	b2aa      	uxth	r2, r5
   1d044:	0c20      	lsrs	r0, r4, #16
   1d046:	fbb3 fcfe 	udiv	ip, r3, lr
   1d04a:	fb0e 331c 	mls	r3, lr, ip, r3
   1d04e:	fb0c f802 	mul.w	r8, ip, r2
   1d052:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   1d056:	4598      	cmp	r8, r3
   1d058:	d962      	bls.n	1d120 <__udivmoddi4+0x19a>
   1d05a:	18eb      	adds	r3, r5, r3
   1d05c:	f10c 30ff 	add.w	r0, ip, #4294967295
   1d060:	d204      	bcs.n	1d06c <__udivmoddi4+0xe6>
   1d062:	4598      	cmp	r8, r3
   1d064:	d902      	bls.n	1d06c <__udivmoddi4+0xe6>
   1d066:	f1ac 0002 	sub.w	r0, ip, #2
   1d06a:	442b      	add	r3, r5
   1d06c:	eba3 0308 	sub.w	r3, r3, r8
   1d070:	b2a4      	uxth	r4, r4
   1d072:	fbb3 fcfe 	udiv	ip, r3, lr
   1d076:	fb0e 331c 	mls	r3, lr, ip, r3
   1d07a:	fb0c f202 	mul.w	r2, ip, r2
   1d07e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1d082:	42a2      	cmp	r2, r4
   1d084:	d94e      	bls.n	1d124 <__udivmoddi4+0x19e>
   1d086:	192c      	adds	r4, r5, r4
   1d088:	f10c 33ff 	add.w	r3, ip, #4294967295
   1d08c:	d204      	bcs.n	1d098 <__udivmoddi4+0x112>
   1d08e:	42a2      	cmp	r2, r4
   1d090:	d902      	bls.n	1d098 <__udivmoddi4+0x112>
   1d092:	f1ac 0302 	sub.w	r3, ip, #2
   1d096:	442c      	add	r4, r5
   1d098:	1aa4      	subs	r4, r4, r2
   1d09a:	e7bd      	b.n	1d018 <__udivmoddi4+0x92>
   1d09c:	f1c7 0c20 	rsb	ip, r7, #32
   1d0a0:	40bd      	lsls	r5, r7
   1d0a2:	fa08 f307 	lsl.w	r3, r8, r7
   1d0a6:	40bc      	lsls	r4, r7
   1d0a8:	fa28 f90c 	lsr.w	r9, r8, ip
   1d0ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d0b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1d0b4:	ea4c 0203 	orr.w	r2, ip, r3
   1d0b8:	b2ab      	uxth	r3, r5
   1d0ba:	fbb9 fcfe 	udiv	ip, r9, lr
   1d0be:	0c11      	lsrs	r1, r2, #16
   1d0c0:	fb0e 901c 	mls	r0, lr, ip, r9
   1d0c4:	fb0c f803 	mul.w	r8, ip, r3
   1d0c8:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   1d0cc:	4580      	cmp	r8, r0
   1d0ce:	d923      	bls.n	1d118 <__udivmoddi4+0x192>
   1d0d0:	1828      	adds	r0, r5, r0
   1d0d2:	f10c 31ff 	add.w	r1, ip, #4294967295
   1d0d6:	d204      	bcs.n	1d0e2 <__udivmoddi4+0x15c>
   1d0d8:	4580      	cmp	r8, r0
   1d0da:	d902      	bls.n	1d0e2 <__udivmoddi4+0x15c>
   1d0dc:	f1ac 0102 	sub.w	r1, ip, #2
   1d0e0:	4428      	add	r0, r5
   1d0e2:	eba0 0008 	sub.w	r0, r0, r8
   1d0e6:	b292      	uxth	r2, r2
   1d0e8:	fbb0 fcfe 	udiv	ip, r0, lr
   1d0ec:	fb0e 001c 	mls	r0, lr, ip, r0
   1d0f0:	fb0c f803 	mul.w	r8, ip, r3
   1d0f4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   1d0f8:	4598      	cmp	r8, r3
   1d0fa:	d90f      	bls.n	1d11c <__udivmoddi4+0x196>
   1d0fc:	18eb      	adds	r3, r5, r3
   1d0fe:	f10c 32ff 	add.w	r2, ip, #4294967295
   1d102:	d204      	bcs.n	1d10e <__udivmoddi4+0x188>
   1d104:	4598      	cmp	r8, r3
   1d106:	d902      	bls.n	1d10e <__udivmoddi4+0x188>
   1d108:	f1ac 0202 	sub.w	r2, ip, #2
   1d10c:	442b      	add	r3, r5
   1d10e:	eba3 0308 	sub.w	r3, r3, r8
   1d112:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1d116:	e792      	b.n	1d03e <__udivmoddi4+0xb8>
   1d118:	4661      	mov	r1, ip
   1d11a:	e7e2      	b.n	1d0e2 <__udivmoddi4+0x15c>
   1d11c:	4662      	mov	r2, ip
   1d11e:	e7f6      	b.n	1d10e <__udivmoddi4+0x188>
   1d120:	4660      	mov	r0, ip
   1d122:	e7a3      	b.n	1d06c <__udivmoddi4+0xe6>
   1d124:	4663      	mov	r3, ip
   1d126:	e7b7      	b.n	1d098 <__udivmoddi4+0x112>
   1d128:	4543      	cmp	r3, r8
   1d12a:	d905      	bls.n	1d138 <__udivmoddi4+0x1b2>
   1d12c:	b10e      	cbz	r6, 1d132 <__udivmoddi4+0x1ac>
   1d12e:	e9c6 0800 	strd	r0, r8, [r6]
   1d132:	2100      	movs	r1, #0
   1d134:	4608      	mov	r0, r1
   1d136:	e776      	b.n	1d026 <__udivmoddi4+0xa0>
   1d138:	fab3 fc83 	clz	ip, r3
   1d13c:	f1bc 0f00 	cmp.w	ip, #0
   1d140:	d110      	bne.n	1d164 <__udivmoddi4+0x1de>
   1d142:	4543      	cmp	r3, r8
   1d144:	d301      	bcc.n	1d14a <__udivmoddi4+0x1c4>
   1d146:	4282      	cmp	r2, r0
   1d148:	d80a      	bhi.n	1d160 <__udivmoddi4+0x1da>
   1d14a:	1a84      	subs	r4, r0, r2
   1d14c:	eb68 0303 	sbc.w	r3, r8, r3
   1d150:	2001      	movs	r0, #1
   1d152:	469e      	mov	lr, r3
   1d154:	2e00      	cmp	r6, #0
   1d156:	d068      	beq.n	1d22a <__udivmoddi4+0x2a4>
   1d158:	e9c6 4e00 	strd	r4, lr, [r6]
   1d15c:	2100      	movs	r1, #0
   1d15e:	e762      	b.n	1d026 <__udivmoddi4+0xa0>
   1d160:	4660      	mov	r0, ip
   1d162:	e7f7      	b.n	1d154 <__udivmoddi4+0x1ce>
   1d164:	f1cc 0e20 	rsb	lr, ip, #32
   1d168:	fa03 f30c 	lsl.w	r3, r3, ip
   1d16c:	fa02 f50c 	lsl.w	r5, r2, ip
   1d170:	fa00 f70c 	lsl.w	r7, r0, ip
   1d174:	fa22 f40e 	lsr.w	r4, r2, lr
   1d178:	fa28 fb0e 	lsr.w	fp, r8, lr
   1d17c:	fa20 f10e 	lsr.w	r1, r0, lr
   1d180:	431c      	orrs	r4, r3
   1d182:	fa08 f30c 	lsl.w	r3, r8, ip
   1d186:	ea4f 4914 	mov.w	r9, r4, lsr #16
   1d18a:	4319      	orrs	r1, r3
   1d18c:	b2a3      	uxth	r3, r4
   1d18e:	0c0a      	lsrs	r2, r1, #16
   1d190:	fbbb f8f9 	udiv	r8, fp, r9
   1d194:	fb09 bb18 	mls	fp, r9, r8, fp
   1d198:	fb08 fa03 	mul.w	sl, r8, r3
   1d19c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   1d1a0:	4592      	cmp	sl, r2
   1d1a2:	d93e      	bls.n	1d222 <__udivmoddi4+0x29c>
   1d1a4:	18a2      	adds	r2, r4, r2
   1d1a6:	f108 30ff 	add.w	r0, r8, #4294967295
   1d1aa:	d204      	bcs.n	1d1b6 <__udivmoddi4+0x230>
   1d1ac:	4592      	cmp	sl, r2
   1d1ae:	d902      	bls.n	1d1b6 <__udivmoddi4+0x230>
   1d1b0:	f1a8 0002 	sub.w	r0, r8, #2
   1d1b4:	4422      	add	r2, r4
   1d1b6:	eba2 020a 	sub.w	r2, r2, sl
   1d1ba:	b289      	uxth	r1, r1
   1d1bc:	fbb2 f8f9 	udiv	r8, r2, r9
   1d1c0:	fb09 2218 	mls	r2, r9, r8, r2
   1d1c4:	fb08 f303 	mul.w	r3, r8, r3
   1d1c8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   1d1cc:	4293      	cmp	r3, r2
   1d1ce:	d92a      	bls.n	1d226 <__udivmoddi4+0x2a0>
   1d1d0:	18a2      	adds	r2, r4, r2
   1d1d2:	f108 31ff 	add.w	r1, r8, #4294967295
   1d1d6:	d204      	bcs.n	1d1e2 <__udivmoddi4+0x25c>
   1d1d8:	4293      	cmp	r3, r2
   1d1da:	d902      	bls.n	1d1e2 <__udivmoddi4+0x25c>
   1d1dc:	f1a8 0102 	sub.w	r1, r8, #2
   1d1e0:	4422      	add	r2, r4
   1d1e2:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   1d1e6:	1ad2      	subs	r2, r2, r3
   1d1e8:	fba0 9805 	umull	r9, r8, r0, r5
   1d1ec:	4542      	cmp	r2, r8
   1d1ee:	464b      	mov	r3, r9
   1d1f0:	4641      	mov	r1, r8
   1d1f2:	d302      	bcc.n	1d1fa <__udivmoddi4+0x274>
   1d1f4:	d106      	bne.n	1d204 <__udivmoddi4+0x27e>
   1d1f6:	454f      	cmp	r7, r9
   1d1f8:	d204      	bcs.n	1d204 <__udivmoddi4+0x27e>
   1d1fa:	3801      	subs	r0, #1
   1d1fc:	ebb9 0305 	subs.w	r3, r9, r5
   1d200:	eb68 0104 	sbc.w	r1, r8, r4
   1d204:	b18e      	cbz	r6, 1d22a <__udivmoddi4+0x2a4>
   1d206:	1afc      	subs	r4, r7, r3
   1d208:	eb62 0701 	sbc.w	r7, r2, r1
   1d20c:	fa07 fe0e 	lsl.w	lr, r7, lr
   1d210:	fa24 f30c 	lsr.w	r3, r4, ip
   1d214:	fa27 f70c 	lsr.w	r7, r7, ip
   1d218:	ea4e 0303 	orr.w	r3, lr, r3
   1d21c:	e9c6 3700 	strd	r3, r7, [r6]
   1d220:	e79c      	b.n	1d15c <__udivmoddi4+0x1d6>
   1d222:	4640      	mov	r0, r8
   1d224:	e7c7      	b.n	1d1b6 <__udivmoddi4+0x230>
   1d226:	4641      	mov	r1, r8
   1d228:	e7db      	b.n	1d1e2 <__udivmoddi4+0x25c>
   1d22a:	4631      	mov	r1, r6
   1d22c:	e6fb      	b.n	1d026 <__udivmoddi4+0xa0>

0001d22e <strcmp>:
   1d22e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d232:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d236:	2a01      	cmp	r2, #1
   1d238:	bf28      	it	cs
   1d23a:	429a      	cmpcs	r2, r3
   1d23c:	d0f7      	beq.n	1d22e <strcmp>
   1d23e:	1ad0      	subs	r0, r2, r3
   1d240:	4770      	bx	lr

0001d242 <strlen>:
   1d242:	4603      	mov	r3, r0
   1d244:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d248:	2a00      	cmp	r2, #0
   1d24a:	d1fb      	bne.n	1d244 <strlen+0x2>
   1d24c:	1a18      	subs	r0, r3, r0
   1d24e:	3801      	subs	r0, #1
   1d250:	4770      	bx	lr
   1d252:	0000      	movs	r0, r0
   1d254:	0000      	movs	r0, r0
	...

0001d258 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d25c:	ed2d 8b02 	vpush	{d8}
   1d260:	4681      	mov	r9, r0
   1d262:	468a      	mov	sl, r1
   1d264:	4615      	mov	r5, r2
   1d266:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1d268:	2600      	movs	r6, #0
	uint64_t round = BIT64(59); /* 0.5 */
   1d26a:	ed9f 8ba9 	vldr	d8, [pc, #676]	; 1d510 <cbvprintf+0x2b8>
{
   1d26e:	b09b      	sub	sp, #108	; 0x6c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1d270:	7828      	ldrb	r0, [r5, #0]
   1d272:	b910      	cbnz	r0, 1d27a <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1d274:	4630      	mov	r0, r6
   1d276:	f000 bdc9 	b.w	1de0c <cbvprintf+0xbb4>
			OUTC(*fp++);
   1d27a:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
   1d27c:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   1d27e:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
   1d280:	d006      	beq.n	1d290 <cbvprintf+0x38>
			OUTC(*fp++);
   1d282:	4651      	mov	r1, sl
			OUTC('%');
   1d284:	47c8      	blx	r9
   1d286:	2800      	cmp	r0, #0
   1d288:	f2c0 85c0 	blt.w	1de0c <cbvprintf+0xbb4>
   1d28c:	3601      	adds	r6, #1
		if (bps == NULL) {
   1d28e:	e22e      	b.n	1d6ee <cbvprintf+0x496>
		} state = {
   1d290:	2218      	movs	r2, #24
   1d292:	2100      	movs	r1, #0
   1d294:	a80c      	add	r0, sp, #48	; 0x30
   1d296:	f024 f8cd 	bl	41434 <memset>
	if (*sp == '%') {
   1d29a:	786b      	ldrb	r3, [r5, #1]
   1d29c:	2b25      	cmp	r3, #37	; 0x25
   1d29e:	d059      	beq.n	1d354 <cbvprintf+0xfc>
   1d2a0:	1c6a      	adds	r2, r5, #1
   1d2a2:	4617      	mov	r7, r2
		switch (*sp) {
   1d2a4:	f812 3b01 	ldrb.w	r3, [r2], #1
   1d2a8:	2b2b      	cmp	r3, #43	; 0x2b
   1d2aa:	f000 808b 	beq.w	1d3c4 <cbvprintf+0x16c>
   1d2ae:	d879      	bhi.n	1d3a4 <cbvprintf+0x14c>
   1d2b0:	2b20      	cmp	r3, #32
   1d2b2:	f000 808c 	beq.w	1d3ce <cbvprintf+0x176>
   1d2b6:	2b23      	cmp	r3, #35	; 0x23
   1d2b8:	f000 808e 	beq.w	1d3d8 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
   1d2bc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d2c0:	f003 0244 	and.w	r2, r3, #68	; 0x44
   1d2c4:	2a44      	cmp	r2, #68	; 0x44
   1d2c6:	d103      	bne.n	1d2d0 <cbvprintf+0x78>
		conv->flag_zero = false;
   1d2c8:	f36f 1386 	bfc	r3, #6, #1
   1d2cc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   1d2d0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d2d4:	970a      	str	r7, [sp, #40]	; 0x28
   1d2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d2da:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   1d2de:	783b      	ldrb	r3, [r7, #0]
   1d2e0:	2b2a      	cmp	r3, #42	; 0x2a
   1d2e2:	d17e      	bne.n	1d3e2 <cbvprintf+0x18a>
		conv->width_star = true;
   1d2e4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d2e8:	f043 0301 	orr.w	r3, r3, #1
   1d2ec:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   1d2f0:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
   1d2f2:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
   1d2f4:	781a      	ldrb	r2, [r3, #0]
   1d2f6:	2a2e      	cmp	r2, #46	; 0x2e
   1d2f8:	bf0c      	ite	eq
   1d2fa:	2101      	moveq	r1, #1
   1d2fc:	2100      	movne	r1, #0
   1d2fe:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1d302:	f361 0241 	bfi	r2, r1, #1, #1
   1d306:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   1d30a:	d10b      	bne.n	1d324 <cbvprintf+0xcc>
	++sp;
   1d30c:	1c5a      	adds	r2, r3, #1
   1d30e:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
   1d310:	785a      	ldrb	r2, [r3, #1]
   1d312:	2a2a      	cmp	r2, #42	; 0x2a
   1d314:	d17b      	bne.n	1d40e <cbvprintf+0x1b6>
		conv->prec_star = true;
   1d316:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   1d31a:	3302      	adds	r3, #2
		conv->prec_star = true;
   1d31c:	f042 0204 	orr.w	r2, r2, #4
   1d320:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	switch (*sp) {
   1d324:	4619      	mov	r1, r3
   1d326:	f811 0b01 	ldrb.w	r0, [r1], #1
   1d32a:	286c      	cmp	r0, #108	; 0x6c
   1d32c:	f000 80cf 	beq.w	1d4ce <cbvprintf+0x276>
   1d330:	d87d      	bhi.n	1d42e <cbvprintf+0x1d6>
   1d332:	2868      	cmp	r0, #104	; 0x68
   1d334:	f000 8084 	beq.w	1d440 <cbvprintf+0x1e8>
   1d338:	286a      	cmp	r0, #106	; 0x6a
   1d33a:	f000 80d2 	beq.w	1d4e2 <cbvprintf+0x28a>
   1d33e:	284c      	cmp	r0, #76	; 0x4c
   1d340:	f000 80d6 	beq.w	1d4f0 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
   1d344:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		break;
   1d348:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
   1d34a:	f36f 02c6 	bfc	r2, #3, #4
   1d34e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   1d352:	e080      	b.n	1d456 <cbvprintf+0x1fe>
		conv->specifier = *sp++;
   1d354:	1caa      	adds	r2, r5, #2
   1d356:	9202      	str	r2, [sp, #8]
   1d358:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   1d35c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d360:	07df      	lsls	r7, r3, #31
   1d362:	f140 8178 	bpl.w	1d656 <cbvprintf+0x3fe>
			width = va_arg(ap, int);
   1d366:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
   1d36a:	f1bb 0f00 	cmp.w	fp, #0
   1d36e:	da07      	bge.n	1d380 <cbvprintf+0x128>
				conv->flag_dash = true;
   1d370:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				width = -width;
   1d374:	f1cb 0b00 	rsb	fp, fp, #0
				conv->flag_dash = true;
   1d378:	f042 0204 	orr.w	r2, r2, #4
   1d37c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		if (conv->prec_star) {
   1d380:	0758      	lsls	r0, r3, #29
   1d382:	f140 8171 	bpl.w	1d668 <cbvprintf+0x410>
			int arg = va_arg(ap, int);
   1d386:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   1d38a:	f1b8 0f00 	cmp.w	r8, #0
   1d38e:	f280 8170 	bge.w	1d672 <cbvprintf+0x41a>
				conv->prec_present = false;
   1d392:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d396:	f36f 0341 	bfc	r3, #1, #1
   1d39a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   1d39e:	f04f 38ff 	mov.w	r8, #4294967295
   1d3a2:	e166      	b.n	1d672 <cbvprintf+0x41a>
		switch (*sp) {
   1d3a4:	2b2d      	cmp	r3, #45	; 0x2d
   1d3a6:	d006      	beq.n	1d3b6 <cbvprintf+0x15e>
   1d3a8:	2b30      	cmp	r3, #48	; 0x30
   1d3aa:	d187      	bne.n	1d2bc <cbvprintf+0x64>
			conv->flag_zero = true;
   1d3ac:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d3b4:	e003      	b.n	1d3be <cbvprintf+0x166>
			conv->flag_dash = true;
   1d3b6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d3ba:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   1d3be:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   1d3c2:	e76e      	b.n	1d2a2 <cbvprintf+0x4a>
			conv->flag_plus = true;
   1d3c4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d3c8:	f043 0308 	orr.w	r3, r3, #8
   1d3cc:	e7f7      	b.n	1d3be <cbvprintf+0x166>
			conv->flag_space = true;
   1d3ce:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d3d2:	f043 0310 	orr.w	r3, r3, #16
   1d3d6:	e7f2      	b.n	1d3be <cbvprintf+0x166>
			conv->flag_hash = true;
   1d3d8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d3dc:	f043 0320 	orr.w	r3, r3, #32
   1d3e0:	e7ed      	b.n	1d3be <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
   1d3e2:	a80a      	add	r0, sp, #40	; 0x28
   1d3e4:	f004 f83c 	bl	21460 <extract_decimal>
	if (sp != wp) {
   1d3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d3ea:	42bb      	cmp	r3, r7
   1d3ec:	d081      	beq.n	1d2f2 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
   1d3ee:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
		conv->width_value = width;
   1d3f2:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   1d3f4:	f3c7 0140 	ubfx	r1, r7, #1, #1
   1d3f8:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
   1d3fc:	0052      	lsls	r2, r2, #1
   1d3fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1d402:	f007 017d 	and.w	r1, r7, #125	; 0x7d
   1d406:	430a      	orrs	r2, r1
   1d408:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   1d40c:	e771      	b.n	1d2f2 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
   1d40e:	a80a      	add	r0, sp, #40	; 0x28
   1d410:	f004 f826 	bl	21460 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1d414:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   1d418:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   1d41a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1d41e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   1d422:	f360 0341 	bfi	r3, r0, #1, #1
   1d426:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   1d42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d42c:	e77a      	b.n	1d324 <cbvprintf+0xcc>
	switch (*sp) {
   1d42e:	2874      	cmp	r0, #116	; 0x74
   1d430:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1d434:	d059      	beq.n	1d4ea <cbvprintf+0x292>
   1d436:	287a      	cmp	r0, #122	; 0x7a
   1d438:	d184      	bne.n	1d344 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
   1d43a:	4613      	mov	r3, r2
   1d43c:	2206      	movs	r2, #6
   1d43e:	e041      	b.n	1d4c4 <cbvprintf+0x26c>
		if (*++sp == 'h') {
   1d440:	785a      	ldrb	r2, [r3, #1]
   1d442:	2a68      	cmp	r2, #104	; 0x68
   1d444:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1d448:	d13a      	bne.n	1d4c0 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
   1d44a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1d44c:	f361 02c6 	bfi	r2, r1, #3, #4
   1d450:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   1d454:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   1d456:	460b      	mov	r3, r1
   1d458:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   1d45c:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   1d45e:	9302      	str	r3, [sp, #8]
   1d460:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   1d464:	f200 80cd 	bhi.w	1d602 <cbvprintf+0x3aa>
   1d468:	2a57      	cmp	r2, #87	; 0x57
   1d46a:	d855      	bhi.n	1d518 <cbvprintf+0x2c0>
   1d46c:	2a41      	cmp	r2, #65	; 0x41
   1d46e:	d004      	beq.n	1d47a <cbvprintf+0x222>
   1d470:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   1d474:	2b02      	cmp	r3, #2
   1d476:	f200 80c4 	bhi.w	1d602 <cbvprintf+0x3aa>
		conv->specifier_cat = SPECIFIER_FP;
   1d47a:	2104      	movs	r1, #4
   1d47c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d480:	f361 0302 	bfi	r3, r1, #0, #3
   1d484:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
   1d488:	f002 03df 	and.w	r3, r2, #223	; 0xdf
   1d48c:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
   1d490:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
			|| (conv->specifier == 'A');
   1d494:	f1d8 0300 	rsbs	r3, r8, #0
   1d498:	eb43 0308 	adc.w	r3, r3, r8
		conv->specifier_a = (conv->specifier == 'a')
   1d49c:	f363 12c7 	bfi	r2, r3, #7, #1
   1d4a0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		if (conv->specifier_a
   1d4a4:	b2d3      	uxtb	r3, r2
   1d4a6:	0612      	lsls	r2, r2, #24
   1d4a8:	f100 80d3 	bmi.w	1d652 <cbvprintf+0x3fa>
		if (conv->length_mod == LENGTH_L) {
   1d4ac:	f003 0278 	and.w	r2, r3, #120	; 0x78
   1d4b0:	2a18      	cmp	r2, #24
   1d4b2:	f040 80a3 	bne.w	1d5fc <cbvprintf+0x3a4>
			conv->length_mod = LENGTH_NONE;
   1d4b6:	f36f 03c6 	bfc	r3, #3, #4
   1d4ba:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   1d4be:	e08a      	b.n	1d5d6 <cbvprintf+0x37e>
			conv->length_mod = LENGTH_H;
   1d4c0:	4613      	mov	r3, r2
   1d4c2:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   1d4c4:	f362 03c6 	bfi	r3, r2, #3, #4
   1d4c8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   1d4cc:	e7c3      	b.n	1d456 <cbvprintf+0x1fe>
		if (*++sp == 'l') {
   1d4ce:	785a      	ldrb	r2, [r3, #1]
   1d4d0:	2a6c      	cmp	r2, #108	; 0x6c
   1d4d2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1d4d6:	d101      	bne.n	1d4dc <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
   1d4d8:	2104      	movs	r1, #4
   1d4da:	e7b7      	b.n	1d44c <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
   1d4dc:	4613      	mov	r3, r2
   1d4de:	2203      	movs	r2, #3
   1d4e0:	e7f0      	b.n	1d4c4 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
   1d4e2:	2205      	movs	r2, #5
   1d4e4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d4e8:	e7ec      	b.n	1d4c4 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
   1d4ea:	4613      	mov	r3, r2
   1d4ec:	2207      	movs	r2, #7
   1d4ee:	e7e9      	b.n	1d4c4 <cbvprintf+0x26c>
		conv->unsupported = true;
   1d4f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1d4f4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1d4f8:	f023 0302 	bic.w	r3, r3, #2
   1d4fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1d500:	f043 0302 	orr.w	r3, r3, #2
   1d504:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   1d508:	e7a5      	b.n	1d456 <cbvprintf+0x1fe>
   1d50a:	bf00      	nop
   1d50c:	f3af 8000 	nop.w
   1d510:	00000000 	.word	0x00000000
   1d514:	08000000 	.word	0x08000000
	switch (conv->specifier) {
   1d518:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   1d51c:	2b20      	cmp	r3, #32
   1d51e:	d870      	bhi.n	1d602 <cbvprintf+0x3aa>
   1d520:	a101      	add	r1, pc, #4	; (adr r1, 1d528 <cbvprintf+0x2d0>)
   1d522:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1d526:	bf00      	nop
   1d528:	0001d5db 	.word	0x0001d5db
   1d52c:	0001d603 	.word	0x0001d603
   1d530:	0001d603 	.word	0x0001d603
   1d534:	0001d603 	.word	0x0001d603
   1d538:	0001d603 	.word	0x0001d603
   1d53c:	0001d603 	.word	0x0001d603
   1d540:	0001d603 	.word	0x0001d603
   1d544:	0001d603 	.word	0x0001d603
   1d548:	0001d603 	.word	0x0001d603
   1d54c:	0001d47b 	.word	0x0001d47b
   1d550:	0001d603 	.word	0x0001d603
   1d554:	0001d5db 	.word	0x0001d5db
   1d558:	0001d5ad 	.word	0x0001d5ad
   1d55c:	0001d47b 	.word	0x0001d47b
   1d560:	0001d47b 	.word	0x0001d47b
   1d564:	0001d47b 	.word	0x0001d47b
   1d568:	0001d603 	.word	0x0001d603
   1d56c:	0001d5ad 	.word	0x0001d5ad
   1d570:	0001d603 	.word	0x0001d603
   1d574:	0001d603 	.word	0x0001d603
   1d578:	0001d603 	.word	0x0001d603
   1d57c:	0001d603 	.word	0x0001d603
   1d580:	0001d611 	.word	0x0001d611
   1d584:	0001d5db 	.word	0x0001d5db
   1d588:	0001d635 	.word	0x0001d635
   1d58c:	0001d603 	.word	0x0001d603
   1d590:	0001d603 	.word	0x0001d603
   1d594:	0001d635 	.word	0x0001d635
   1d598:	0001d603 	.word	0x0001d603
   1d59c:	0001d5db 	.word	0x0001d5db
   1d5a0:	0001d603 	.word	0x0001d603
   1d5a4:	0001d603 	.word	0x0001d603
   1d5a8:	0001d5db 	.word	0x0001d5db
		conv->specifier_cat = SPECIFIER_SINT;
   1d5ac:	2101      	movs	r1, #1
   1d5ae:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		conv->specifier_cat = SPECIFIER_UINT;
   1d5b2:	f361 0302 	bfi	r3, r1, #0, #3
   1d5b6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d5ba:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d5be:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1d5c2:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   1d5c4:	bf02      	ittt	eq
   1d5c6:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   1d5ca:	f041 0101 	orreq.w	r1, r1, #1
   1d5ce:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   1d5d2:	2a63      	cmp	r2, #99	; 0x63
   1d5d4:	d005      	beq.n	1d5e2 <cbvprintf+0x38a>
	bool unsupported = false;
   1d5d6:	2300      	movs	r3, #0
   1d5d8:	e006      	b.n	1d5e8 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_UINT;
   1d5da:	2102      	movs	r1, #2
   1d5dc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d5e0:	e7e7      	b.n	1d5b2 <cbvprintf+0x35a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1d5e2:	3b00      	subs	r3, #0
   1d5e4:	bf18      	it	ne
   1d5e6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1d5e8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1d5ec:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1d5f0:	430b      	orrs	r3, r1
   1d5f2:	f363 0241 	bfi	r2, r3, #1, #1
   1d5f6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   1d5fa:	e6af      	b.n	1d35c <cbvprintf+0x104>
		} else if ((conv->length_mod != LENGTH_NONE)
   1d5fc:	f013 0f38 	tst.w	r3, #56	; 0x38
   1d600:	d0e9      	beq.n	1d5d6 <cbvprintf+0x37e>
			conv->invalid = true;
   1d602:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d606:	f043 0301 	orr.w	r3, r3, #1
   1d60a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   1d60e:	e7e2      	b.n	1d5d6 <cbvprintf+0x37e>
		conv->specifier_cat = SPECIFIER_PTR;
   1d610:	2203      	movs	r2, #3
   1d612:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d616:	f362 0302 	bfi	r3, r2, #0, #3
   1d61a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d61e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d622:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1d626:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
   1d62a:	f1dc 0300 	rsbs	r3, ip, #0
   1d62e:	eb43 030c 	adc.w	r3, r3, ip
   1d632:	e7d9      	b.n	1d5e8 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_PTR;
   1d634:	2203      	movs	r2, #3
   1d636:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d63a:	f362 0302 	bfi	r3, r2, #0, #3
   1d63e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   1d642:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d646:	f013 0f78 	tst.w	r3, #120	; 0x78
   1d64a:	bf14      	ite	ne
   1d64c:	2301      	movne	r3, #1
   1d64e:	2300      	moveq	r3, #0
   1d650:	e7ca      	b.n	1d5e8 <cbvprintf+0x390>
			unsupported = true;
   1d652:	2301      	movs	r3, #1
   1d654:	e7c8      	b.n	1d5e8 <cbvprintf+0x390>
		} else if (conv->width_present) {
   1d656:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   1d65a:	2a00      	cmp	r2, #0
		int width = -1;
   1d65c:	bfac      	ite	ge
   1d65e:	f04f 3bff 	movge.w	fp, #4294967295
			width = conv->width_value;
   1d662:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
   1d666:	e68b      	b.n	1d380 <cbvprintf+0x128>
		} else if (conv->prec_present) {
   1d668:	0799      	lsls	r1, r3, #30
   1d66a:	f57f ae98 	bpl.w	1d39e <cbvprintf+0x146>
			precision = conv->prec_value;
   1d66e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
   1d672:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1d674:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
   1d678:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d67c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   1d680:	f003 0207 	and.w	r2, r3, #7
   1d684:	2a04      	cmp	r2, #4
   1d686:	d109      	bne.n	1d69c <cbvprintf+0x444>
		    && !conv->prec_present) {
   1d688:	078a      	lsls	r2, r1, #30
   1d68a:	d407      	bmi.n	1d69c <cbvprintf+0x444>
			if (conv->specifier_a) {
   1d68c:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
   1d690:	2a00      	cmp	r2, #0
   1d692:	bfb4      	ite	lt
   1d694:	f04f 080d 	movlt.w	r8, #13
   1d698:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
   1d69c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1d6a0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1d6a2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1d6a6:	d137      	bne.n	1d718 <cbvprintf+0x4c0>
			switch (length_mod) {
   1d6a8:	1ecb      	subs	r3, r1, #3
   1d6aa:	2b04      	cmp	r3, #4
   1d6ac:	d821      	bhi.n	1d6f2 <cbvprintf+0x49a>
   1d6ae:	e8df f003 	tbb	[pc, r3]
   1d6b2:	0903      	.short	0x0903
   1d6b4:	2009      	.short	0x2009
   1d6b6:	20          	.byte	0x20
   1d6b7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1d6b8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   1d6bc:	17da      	asrs	r2, r3, #31
   1d6be:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
   1d6c2:	e006      	b.n	1d6d2 <cbvprintf+0x47a>
					(sint_value_type)va_arg(ap, intmax_t);
   1d6c4:	3407      	adds	r4, #7
   1d6c6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1d6ca:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1d6ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   1d6d2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   1d6d6:	07bb      	lsls	r3, r7, #30
   1d6d8:	d056      	beq.n	1d788 <cbvprintf+0x530>
			OUTS(sp, fp);
   1d6da:	462a      	mov	r2, r5
   1d6dc:	4651      	mov	r1, sl
   1d6de:	4648      	mov	r0, r9
   1d6e0:	9b02      	ldr	r3, [sp, #8]
   1d6e2:	f01f f9b3 	bl	3ca4c <outs>
   1d6e6:	2800      	cmp	r0, #0
   1d6e8:	f2c0 8390 	blt.w	1de0c <cbvprintf+0xbb4>
   1d6ec:	4406      	add	r6, r0
			while (pad_len-- > 0) {
   1d6ee:	9d02      	ldr	r5, [sp, #8]
   1d6f0:	e5be      	b.n	1d270 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1d6f2:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1d6f6:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1d6f8:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1d6fc:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   1d700:	d105      	bne.n	1d70e <cbvprintf+0x4b6>
				value->uint = (unsigned char)value->uint;
   1d702:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   1d706:	930c      	str	r3, [sp, #48]	; 0x30
   1d708:	2300      	movs	r3, #0
   1d70a:	930d      	str	r3, [sp, #52]	; 0x34
   1d70c:	e7e1      	b.n	1d6d2 <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
   1d70e:	2902      	cmp	r1, #2
   1d710:	d1df      	bne.n	1d6d2 <cbvprintf+0x47a>
				value->sint = (short)value->sint;
   1d712:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   1d716:	e7d1      	b.n	1d6bc <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1d718:	2b02      	cmp	r3, #2
   1d71a:	d123      	bne.n	1d764 <cbvprintf+0x50c>
			switch (length_mod) {
   1d71c:	1ecb      	subs	r3, r1, #3
   1d71e:	2b04      	cmp	r3, #4
   1d720:	d813      	bhi.n	1d74a <cbvprintf+0x4f2>
   1d722:	e8df f003 	tbb	[pc, r3]
   1d726:	0a03      	.short	0x0a03
   1d728:	120a      	.short	0x120a
   1d72a:	12          	.byte	0x12
   1d72b:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   1d72c:	2200      	movs	r2, #0
					value->uint = (wchar_t)va_arg(ap,
   1d72e:	6820      	ldr	r0, [r4, #0]
				value->sint = va_arg(ap, int);
   1d730:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   1d732:	900c      	str	r0, [sp, #48]	; 0x30
   1d734:	920d      	str	r2, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   1d736:	461c      	mov	r4, r3
   1d738:	e7cb      	b.n	1d6d2 <cbvprintf+0x47a>
					(uint_value_type)va_arg(ap,
   1d73a:	1de3      	adds	r3, r4, #7
   1d73c:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
   1d740:	ecb3 7b02 	vldmia	r3!, {d7}
   1d744:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
				break;
   1d748:	e7f5      	b.n	1d736 <cbvprintf+0x4de>
					(uint_value_type)va_arg(ap, size_t);
   1d74a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1d74e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   1d750:	930c      	str	r3, [sp, #48]	; 0x30
   1d752:	f04f 0300 	mov.w	r3, #0
   1d756:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   1d758:	d0d3      	beq.n	1d702 <cbvprintf+0x4aa>
			} else if (length_mod == LENGTH_H) {
   1d75a:	2902      	cmp	r1, #2
   1d75c:	d1b9      	bne.n	1d6d2 <cbvprintf+0x47a>
				value->uint = (unsigned short)value->uint;
   1d75e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1d762:	e7d0      	b.n	1d706 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_FP) {
   1d764:	2b04      	cmp	r3, #4
   1d766:	d109      	bne.n	1d77c <cbvprintf+0x524>
					(sint_value_type)va_arg(ap, long long);
   1d768:	1de3      	adds	r3, r4, #7
   1d76a:	f023 0307 	bic.w	r3, r3, #7
   1d76e:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   1d772:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d776:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1d77a:	e7aa      	b.n	1d6d2 <cbvprintf+0x47a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1d77c:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1d77e:	bf04      	itt	eq
   1d780:	f854 3b04 	ldreq.w	r3, [r4], #4
   1d784:	930c      	streq	r3, [sp, #48]	; 0x30
   1d786:	e7a4      	b.n	1d6d2 <cbvprintf+0x47a>
		switch (conv->specifier) {
   1d788:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   1d78c:	2a78      	cmp	r2, #120	; 0x78
   1d78e:	d8ae      	bhi.n	1d6ee <cbvprintf+0x496>
   1d790:	2a57      	cmp	r2, #87	; 0x57
   1d792:	f200 808c 	bhi.w	1d8ae <cbvprintf+0x656>
   1d796:	2a25      	cmp	r2, #37	; 0x25
   1d798:	f000 80d4 	beq.w	1d944 <cbvprintf+0x6ec>
   1d79c:	2a24      	cmp	r2, #36	; 0x24
   1d79e:	d9a6      	bls.n	1d6ee <cbvprintf+0x496>
   1d7a0:	2a41      	cmp	r2, #65	; 0x41
   1d7a2:	d003      	beq.n	1d7ac <cbvprintf+0x554>
   1d7a4:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   1d7a8:	2b02      	cmp	r3, #2
   1d7aa:	d8a0      	bhi.n	1d6ee <cbvprintf+0x496>
	} u = {
   1d7ac:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
   1d7b0:	2b00      	cmp	r3, #0
   1d7b2:	f2c0 81b6 	blt.w	1db22 <cbvprintf+0x8ca>
	} else if (conv->flag_plus) {
   1d7b6:	0738      	lsls	r0, r7, #28
   1d7b8:	f100 81b5 	bmi.w	1db26 <cbvprintf+0x8ce>
		*sign = ' ';
   1d7bc:	f017 0710 	ands.w	r7, r7, #16
   1d7c0:	bf18      	it	ne
   1d7c2:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   1d7c4:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   1d7c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1d7cc:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
   1d7d0:	2d00      	cmp	r5, #0
   1d7d2:	f040 81aa 	bne.w	1db2a <cbvprintf+0x8d2>
   1d7d6:	ea51 0003 	orrs.w	r0, r1, r3
   1d7da:	bf14      	ite	ne
   1d7dc:	2001      	movne	r0, #1
   1d7de:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
   1d7e0:	02db      	lsls	r3, r3, #11
   1d7e2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
   1d7e6:	02c9      	lsls	r1, r1, #11
		c = 'f';
   1d7e8:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
   1d7ea:	ea45 0e01 	orr.w	lr, r5, r1
   1d7ee:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
   1d7f2:	bf08      	it	eq
   1d7f4:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
   1d7f6:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   1d7fa:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
   1d7fe:	f000 8202 	beq.w	1dc06 <cbvprintf+0x9ae>
		if (is_subnormal) {
   1d802:	2800      	cmp	r0, #0
   1d804:	f040 81ca 	bne.w	1db9c <cbvprintf+0x944>
		fract |= BIT_63;
   1d808:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1d80c:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   1d810:	f04f 0e05 	mov.w	lr, #5
		fract |= BIT_63;
   1d814:	4663      	mov	r3, ip
   1d816:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   1d81a:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
   1d81e:	9109      	str	r1, [sp, #36]	; 0x24
	while (expo < -2) {
   1d820:	f115 0f02 	cmn.w	r5, #2
   1d824:	f2c0 81c1 	blt.w	1dbaa <cbvprintf+0x952>
   1d828:	f1bc 0f00 	cmp.w	ip, #0
   1d82c:	d001      	beq.n	1d832 <cbvprintf+0x5da>
   1d82e:	e9cd 0108 	strd	r0, r1, [sp, #32]
		fract += 2;
   1d832:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	while (expo > 0) {
   1d836:	2d00      	cmp	r5, #0
   1d838:	f300 81cc 	bgt.w	1dbd4 <cbvprintf+0x97c>
	fract >>= (4 - expo);
   1d83c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d83e:	9908      	ldr	r1, [sp, #32]
   1d840:	f1c5 0c04 	rsb	ip, r5, #4
   1d844:	351c      	adds	r5, #28
   1d846:	fa00 f505 	lsl.w	r5, r0, r5
   1d84a:	f1ac 0e20 	sub.w	lr, ip, #32
   1d84e:	fa21 f10c 	lsr.w	r1, r1, ip
   1d852:	fa20 fe0e 	lsr.w	lr, r0, lr
   1d856:	4329      	orrs	r1, r5
   1d858:	ea41 010e 	orr.w	r1, r1, lr
   1d85c:	fa20 f00c 	lsr.w	r0, r0, ip
   1d860:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
   1d864:	f002 01df 	and.w	r1, r2, #223	; 0xdf
   1d868:	2947      	cmp	r1, #71	; 0x47
   1d86a:	f040 81d3 	bne.w	1dc14 <cbvprintf+0x9bc>
		if (decexp < (-4 + 1) || decexp > precision) {
   1d86e:	1cdd      	adds	r5, r3, #3
   1d870:	db02      	blt.n	1d878 <cbvprintf+0x620>
   1d872:	4598      	cmp	r8, r3
   1d874:	f280 81ca 	bge.w	1dc0c <cbvprintf+0x9b4>
			c += 'e' - 'g';  /* e or E */
   1d878:	3a02      	subs	r2, #2
			if (precision > 0) {
   1d87a:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
   1d87e:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
   1d880:	dd01      	ble.n	1d886 <cbvprintf+0x62e>
				precision--;
   1d882:	f108 38ff 	add.w	r8, r8, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
   1d886:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1d88a:	0688      	lsls	r0, r1, #26
   1d88c:	f100 81c2 	bmi.w	1dc14 <cbvprintf+0x9bc>
   1d890:	f1b8 0f00 	cmp.w	r8, #0
   1d894:	bfd4      	ite	le
   1d896:	2100      	movle	r1, #0
   1d898:	2101      	movgt	r1, #1
	if (c == 'f') {
   1d89a:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
   1d89c:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
   1d89e:	f040 81bb 	bne.w	1dc18 <cbvprintf+0x9c0>
		if (decimals < 0) {
   1d8a2:	eb13 0108 	adds.w	r1, r3, r8
   1d8a6:	f140 81b9 	bpl.w	1dc1c <cbvprintf+0x9c4>
			decimals = 0;
   1d8aa:	2100      	movs	r1, #0
   1d8ac:	e1b9      	b.n	1dc22 <cbvprintf+0x9ca>
		switch (conv->specifier) {
   1d8ae:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   1d8b2:	2b20      	cmp	r3, #32
   1d8b4:	f63f af1b 	bhi.w	1d6ee <cbvprintf+0x496>
   1d8b8:	a001      	add	r0, pc, #4	; (adr r0, 1d8c0 <cbvprintf+0x668>)
   1d8ba:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1d8be:	bf00      	nop
   1d8c0:	0001dac5 	.word	0x0001dac5
   1d8c4:	0001d6ef 	.word	0x0001d6ef
   1d8c8:	0001d6ef 	.word	0x0001d6ef
   1d8cc:	0001d6ef 	.word	0x0001d6ef
   1d8d0:	0001d6ef 	.word	0x0001d6ef
   1d8d4:	0001d6ef 	.word	0x0001d6ef
   1d8d8:	0001d6ef 	.word	0x0001d6ef
   1d8dc:	0001d6ef 	.word	0x0001d6ef
   1d8e0:	0001d6ef 	.word	0x0001d6ef
   1d8e4:	0001d7ad 	.word	0x0001d7ad
   1d8e8:	0001d6ef 	.word	0x0001d6ef
   1d8ec:	0001d971 	.word	0x0001d971
   1d8f0:	0001da65 	.word	0x0001da65
   1d8f4:	0001d7ad 	.word	0x0001d7ad
   1d8f8:	0001d7ad 	.word	0x0001d7ad
   1d8fc:	0001d7ad 	.word	0x0001d7ad
   1d900:	0001d6ef 	.word	0x0001d6ef
   1d904:	0001da65 	.word	0x0001da65
   1d908:	0001d6ef 	.word	0x0001d6ef
   1d90c:	0001d6ef 	.word	0x0001d6ef
   1d910:	0001d6ef 	.word	0x0001d6ef
   1d914:	0001d6ef 	.word	0x0001d6ef
   1d918:	0001dafb 	.word	0x0001dafb
   1d91c:	0001dac5 	.word	0x0001dac5
   1d920:	0001dac9 	.word	0x0001dac9
   1d924:	0001d6ef 	.word	0x0001d6ef
   1d928:	0001d6ef 	.word	0x0001d6ef
   1d92c:	0001d94b 	.word	0x0001d94b
   1d930:	0001d6ef 	.word	0x0001d6ef
   1d934:	0001dac5 	.word	0x0001dac5
   1d938:	0001d6ef 	.word	0x0001d6ef
   1d93c:	0001d6ef 	.word	0x0001d6ef
   1d940:	0001dac5 	.word	0x0001dac5
			OUTC('%');
   1d944:	4651      	mov	r1, sl
   1d946:	4610      	mov	r0, r2
   1d948:	e49c      	b.n	1d284 <cbvprintf+0x2c>
			if (precision >= 0) {
   1d94a:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   1d94e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
   1d950:	db09      	blt.n	1d966 <cbvprintf+0x70e>
				len = strnlen(bps, precision);
   1d952:	4641      	mov	r1, r8
   1d954:	4610      	mov	r0, r2
   1d956:	9203      	str	r2, [sp, #12]
   1d958:	f023 ff66 	bl	41828 <strnlen>
		char sign = 0;
   1d95c:	2700      	movs	r7, #0
				len = strlen(bps);
   1d95e:	9a03      	ldr	r2, [sp, #12]
			bpe = bps + len;
   1d960:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
   1d962:	b962      	cbnz	r2, 1d97e <cbvprintf+0x726>
   1d964:	e6c3      	b.n	1d6ee <cbvprintf+0x496>
				len = strlen(bps);
   1d966:	4610      	mov	r0, r2
   1d968:	9203      	str	r2, [sp, #12]
   1d96a:	f7ff fc6a 	bl	1d242 <strlen>
   1d96e:	e7f5      	b.n	1d95c <cbvprintf+0x704>
		char sign = 0;
   1d970:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1d972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			bpe = buf + 1;
   1d974:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1d978:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				bps = encode_float(value->dbl, conv, precision,
   1d97c:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
   1d97e:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
   1d980:	b107      	cbz	r7, 1d984 <cbvprintf+0x72c>
			nj_len += 1U;
   1d982:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1d984:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   1d988:	06c1      	lsls	r1, r0, #27
   1d98a:	f140 8233 	bpl.w	1ddf4 <cbvprintf+0xb9c>
			nj_len += 2U;
   1d98e:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
   1d990:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
   1d992:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
   1d994:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   1d996:	bf44      	itt	mi
   1d998:	9910      	ldrmi	r1, [sp, #64]	; 0x40
   1d99a:	185b      	addmi	r3, r3, r1
		if (width > 0) {
   1d99c:	f1bb 0f00 	cmp.w	fp, #0
   1d9a0:	dd23      	ble.n	1d9ea <cbvprintf+0x792>
			width -= (int)nj_len;
   1d9a2:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
   1d9a6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d9aa:	0759      	lsls	r1, r3, #29
   1d9ac:	f3c3 0880 	ubfx	r8, r3, #2, #1
   1d9b0:	d41b      	bmi.n	1d9ea <cbvprintf+0x792>
				if (conv->flag_zero) {
   1d9b2:	0658      	lsls	r0, r3, #25
   1d9b4:	f140 8234 	bpl.w	1de20 <cbvprintf+0xbc8>
					if (sign != 0) {
   1d9b8:	2f00      	cmp	r7, #0
   1d9ba:	f000 8234 	beq.w	1de26 <cbvprintf+0xbce>
						OUTC(sign);
   1d9be:	4651      	mov	r1, sl
   1d9c0:	4638      	mov	r0, r7
   1d9c2:	9203      	str	r2, [sp, #12]
   1d9c4:	47c8      	blx	r9
   1d9c6:	2800      	cmp	r0, #0
   1d9c8:	f2c0 8220 	blt.w	1de0c <cbvprintf+0xbb4>
						sign = 0;
   1d9cc:	4647      	mov	r7, r8
					pad = '0';
   1d9ce:	f04f 0830 	mov.w	r8, #48	; 0x30
   1d9d2:	9a03      	ldr	r2, [sp, #12]
						OUTC(sign);
   1d9d4:	3601      	adds	r6, #1
						sign = 0;
   1d9d6:	445e      	add	r6, fp
   1d9d8:	465b      	mov	r3, fp
				while (width-- > 0) {
   1d9da:	2b00      	cmp	r3, #0
   1d9dc:	eba6 000b 	sub.w	r0, r6, fp
   1d9e0:	f10b 3bff 	add.w	fp, fp, #4294967295
   1d9e4:	f300 820a 	bgt.w	1ddfc <cbvprintf+0xba4>
   1d9e8:	4606      	mov	r6, r0
		if (sign != 0) {
   1d9ea:	b147      	cbz	r7, 1d9fe <cbvprintf+0x7a6>
			OUTC(sign);
   1d9ec:	4651      	mov	r1, sl
   1d9ee:	4638      	mov	r0, r7
   1d9f0:	9203      	str	r2, [sp, #12]
   1d9f2:	47c8      	blx	r9
   1d9f4:	2800      	cmp	r0, #0
   1d9f6:	f2c0 8209 	blt.w	1de0c <cbvprintf+0xbb4>
   1d9fa:	9a03      	ldr	r2, [sp, #12]
   1d9fc:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   1d9fe:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1da02:	0659      	lsls	r1, r3, #25
   1da04:	f140 8263 	bpl.w	1dece <cbvprintf+0xc76>
			if (conv->specifier_a) {
   1da08:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
   1da0c:	1ab6      	subs	r6, r6, r2
   1da0e:	2b00      	cmp	r3, #0
   1da10:	f280 8218 	bge.w	1de44 <cbvprintf+0xbec>
   1da14:	4617      	mov	r7, r2
   1da16:	46b8      	mov	r8, r7
   1da18:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
   1da1a:	f817 0b01 	ldrb.w	r0, [r7], #1
   1da1e:	2870      	cmp	r0, #112	; 0x70
   1da20:	f040 8204 	bne.w	1de2c <cbvprintf+0xbd4>
			while (pad_len-- > 0) {
   1da24:	461e      	mov	r6, r3
   1da26:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1da28:	441f      	add	r7, r3
   1da2a:	1bbb      	subs	r3, r7, r6
   1da2c:	2b00      	cmp	r3, #0
   1da2e:	f300 8247 	bgt.w	1dec0 <cbvprintf+0xc68>
			OUTS(cp, bpe);
   1da32:	462b      	mov	r3, r5
   1da34:	4642      	mov	r2, r8
			OUTS(bps, bpe);
   1da36:	4651      	mov	r1, sl
   1da38:	4648      	mov	r0, r9
   1da3a:	f01f f807 	bl	3ca4c <outs>
   1da3e:	2800      	cmp	r0, #0
   1da40:	f2c0 81e4 	blt.w	1de0c <cbvprintf+0xbb4>
   1da44:	4430      	add	r0, r6
			while (pad_len-- > 0) {
   1da46:	4606      	mov	r6, r0
   1da48:	4483      	add	fp, r0
		while (width > 0) {
   1da4a:	ebab 0306 	sub.w	r3, fp, r6
   1da4e:	2b00      	cmp	r3, #0
   1da50:	f77f ae4d 	ble.w	1d6ee <cbvprintf+0x496>
			OUTC(' ');
   1da54:	4651      	mov	r1, sl
   1da56:	2020      	movs	r0, #32
   1da58:	47c8      	blx	r9
   1da5a:	2800      	cmp	r0, #0
   1da5c:	f2c0 81d6 	blt.w	1de0c <cbvprintf+0xbb4>
   1da60:	3601      	adds	r6, #1
			--width;
   1da62:	e7f2      	b.n	1da4a <cbvprintf+0x7f2>
			if (conv->flag_plus) {
   1da64:	073d      	lsls	r5, r7, #28
   1da66:	d42b      	bmi.n	1dac0 <cbvprintf+0x868>
				sign = ' ';
   1da68:	f017 0710 	ands.w	r7, r7, #16
   1da6c:	bf18      	it	ne
   1da6e:	2720      	movne	r7, #32
			sint = value->sint;
   1da70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   1da74:	2b00      	cmp	r3, #0
   1da76:	da05      	bge.n	1da84 <cbvprintf+0x82c>
				sign = '-';
   1da78:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1da7a:	4252      	negs	r2, r2
   1da7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1da80:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			bps = encode_uint(value->uint, conv, buf, bpe);
   1da84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1da88:	f10d 0365 	add.w	r3, sp, #101	; 0x65
   1da8c:	9300      	str	r3, [sp, #0]
   1da8e:	aa0e      	add	r2, sp, #56	; 0x38
   1da90:	ab13      	add	r3, sp, #76	; 0x4c
   1da92:	f003 fcfb 	bl	2148c <encode_uint>
   1da96:	4602      	mov	r2, r0
			if (precision >= 0) {
   1da98:	f1b8 0f00 	cmp.w	r8, #0
   1da9c:	f10d 0565 	add.w	r5, sp, #101	; 0x65
   1daa0:	f6ff af5f 	blt.w	1d962 <cbvprintf+0x70a>
				conv->flag_zero = false;
   1daa4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   1daa8:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
   1daaa:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   1daae:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   1dab0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   1dab4:	f67f af55 	bls.w	1d962 <cbvprintf+0x70a>
					conv->pad0_value = precision - (int)len;
   1dab8:	eba8 0303 	sub.w	r3, r8, r3
   1dabc:	930f      	str	r3, [sp, #60]	; 0x3c
   1dabe:	e750      	b.n	1d962 <cbvprintf+0x70a>
				sign = '+';
   1dac0:	272b      	movs	r7, #43	; 0x2b
   1dac2:	e7d5      	b.n	1da70 <cbvprintf+0x818>
		switch (conv->specifier) {
   1dac4:	2700      	movs	r7, #0
   1dac6:	e7dd      	b.n	1da84 <cbvprintf+0x82c>
			if (value->ptr != NULL) {
   1dac8:	980c      	ldr	r0, [sp, #48]	; 0x30
   1daca:	2800      	cmp	r0, #0
   1dacc:	f000 818e 	beq.w	1ddec <cbvprintf+0xb94>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1dad0:	f10d 0365 	add.w	r3, sp, #101	; 0x65
   1dad4:	9300      	str	r3, [sp, #0]
   1dad6:	aa0e      	add	r2, sp, #56	; 0x38
   1dad8:	ab13      	add	r3, sp, #76	; 0x4c
   1dada:	2100      	movs	r1, #0
   1dadc:	f003 fcd6 	bl	2148c <encode_uint>
				conv->altform_0c = true;
   1dae0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1dae4:	4602      	mov	r2, r0
				conv->altform_0c = true;
   1dae6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1daea:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1daee:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1daf2:	2700      	movs	r7, #0
				conv->altform_0c = true;
   1daf4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
   1daf8:	e7ce      	b.n	1da98 <cbvprintf+0x840>
				store_count(conv, value->ptr, count);
   1dafa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   1dafc:	2907      	cmp	r1, #7
   1dafe:	f63f adf6 	bhi.w	1d6ee <cbvprintf+0x496>
   1db02:	e8df f001 	tbb	[pc, r1]
   1db06:	040c      	.short	0x040c
   1db08:	08080c06 	.word	0x08080c06
   1db0c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   1db0e:	701e      	strb	r6, [r3, #0]
		break;
   1db10:	e5ed      	b.n	1d6ee <cbvprintf+0x496>
		*(short *)dp = (short)count;
   1db12:	801e      	strh	r6, [r3, #0]
		break;
   1db14:	e5eb      	b.n	1d6ee <cbvprintf+0x496>
		*(intmax_t *)dp = (intmax_t)count;
   1db16:	17f2      	asrs	r2, r6, #31
   1db18:	e9c3 6200 	strd	r6, r2, [r3]
		break;
   1db1c:	e5e7      	b.n	1d6ee <cbvprintf+0x496>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1db1e:	601e      	str	r6, [r3, #0]
		break;
   1db20:	e5e5      	b.n	1d6ee <cbvprintf+0x496>
		*sign = '-';
   1db22:	272d      	movs	r7, #45	; 0x2d
   1db24:	e64e      	b.n	1d7c4 <cbvprintf+0x56c>
		*sign = '+';
   1db26:	272b      	movs	r7, #43	; 0x2b
   1db28:	e64c      	b.n	1d7c4 <cbvprintf+0x56c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   1db2a:	f240 70ff 	movw	r0, #2047	; 0x7ff
   1db2e:	4285      	cmp	r5, r0
   1db30:	d131      	bne.n	1db96 <cbvprintf+0x93e>
			if (isupper((int)c)) {
   1db32:	48b9      	ldr	r0, [pc, #740]	; (1de18 <cbvprintf+0xbc0>)
   1db34:	3201      	adds	r2, #1
   1db36:	b2d2      	uxtb	r2, r2
   1db38:	5c12      	ldrb	r2, [r2, r0]
		if (fract == 0) {
   1db3a:	430b      	orrs	r3, r1
   1db3c:	f002 0203 	and.w	r2, r2, #3
   1db40:	d11b      	bne.n	1db7a <cbvprintf+0x922>
			if (isupper((int)c)) {
   1db42:	2a01      	cmp	r2, #1
   1db44:	d111      	bne.n	1db6a <cbvprintf+0x912>
				*buf++ = 'I';
   1db46:	2349      	movs	r3, #73	; 0x49
   1db48:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
   1db4c:	234e      	movs	r3, #78	; 0x4e
   1db4e:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
   1db52:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
   1db54:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
   1db58:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
   1db5c:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		conv->flag_zero = false;
   1db60:	f36f 1386 	bfc	r3, #6, #1
   1db64:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		return bps;
   1db68:	e708      	b.n	1d97c <cbvprintf+0x724>
				*buf++ = 'i';
   1db6a:	2369      	movs	r3, #105	; 0x69
   1db6c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
   1db70:	236e      	movs	r3, #110	; 0x6e
   1db72:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
   1db76:	2366      	movs	r3, #102	; 0x66
   1db78:	e7ec      	b.n	1db54 <cbvprintf+0x8fc>
			if (isupper((int)c)) {
   1db7a:	2a01      	cmp	r2, #1
				*buf++ = 'N';
   1db7c:	bf07      	ittee	eq
   1db7e:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
   1db80:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
   1db82:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
   1db84:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
   1db86:	bf0c      	ite	eq
   1db88:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
   1db8c:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
   1db90:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
   1db94:	e7de      	b.n	1db54 <cbvprintf+0x8fc>
	bool is_subnormal = (expo == 0) && (fract != 0);
   1db96:	2000      	movs	r0, #0
   1db98:	e622      	b.n	1d7e0 <cbvprintf+0x588>
				expo--;
   1db9a:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   1db9c:	1849      	adds	r1, r1, r1
   1db9e:	415b      	adcs	r3, r3
   1dba0:	2b00      	cmp	r3, #0
   1dba2:	dafa      	bge.n	1db9a <cbvprintf+0x942>
   1dba4:	e9cd 1308 	strd	r1, r3, [sp, #32]
   1dba8:	e62e      	b.n	1d808 <cbvprintf+0x5b0>
			fract >>= 1;
   1dbaa:	0840      	lsrs	r0, r0, #1
   1dbac:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   1dbb0:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   1dbb2:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
   1dbb6:	46ac      	mov	ip, r5
			expo++;
   1dbb8:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   1dbbc:	d2f5      	bcs.n	1dbaa <cbvprintf+0x952>
		fract *= 5U;
   1dbbe:	fb0e f501 	mul.w	r5, lr, r1
   1dbc2:	fba0 010e 	umull	r0, r1, r0, lr
		decexp--;
   1dbc6:	3b01      	subs	r3, #1
		fract *= 5U;
   1dbc8:	4429      	add	r1, r5
		expo++;
   1dbca:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
   1dbce:	f04f 0c01 	mov.w	ip, #1
   1dbd2:	e625      	b.n	1d820 <cbvprintf+0x5c8>
		fract += 2;
   1dbd4:	3002      	adds	r0, #2
   1dbd6:	f141 0100 	adc.w	r1, r1, #0
   1dbda:	e9cd 0108 	strd	r0, r1, [sp, #32]
		_ldiv5(&fract);
   1dbde:	a808      	add	r0, sp, #32
   1dbe0:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1dbe4:	f01e ff03 	bl	3c9ee <_ldiv5>
		expo--;
   1dbe8:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		decexp++;
   1dbec:	9b04      	ldr	r3, [sp, #16]
   1dbee:	9a03      	ldr	r2, [sp, #12]
		expo--;
   1dbf0:	3d01      	subs	r5, #1
		decexp++;
   1dbf2:	3301      	adds	r3, #1
			fract <<= 1;
   1dbf4:	1849      	adds	r1, r1, r1
   1dbf6:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
   1dbf8:	2800      	cmp	r0, #0
			expo--;
   1dbfa:	f105 35ff 	add.w	r5, r5, #4294967295
		} while (!(fract & BIT_63));
   1dbfe:	daf9      	bge.n	1dbf4 <cbvprintf+0x99c>
   1dc00:	e9cd 1008 	strd	r1, r0, [sp, #32]
   1dc04:	e615      	b.n	1d832 <cbvprintf+0x5da>
   1dc06:	2300      	movs	r3, #0
   1dc08:	461d      	mov	r5, r3
   1dc0a:	e617      	b.n	1d83c <cbvprintf+0x5e4>
			c = 'f';
   1dc0c:	2266      	movs	r2, #102	; 0x66
			precision -= decexp;
   1dc0e:	eba8 0803 	sub.w	r8, r8, r3
   1dc12:	e638      	b.n	1d886 <cbvprintf+0x62e>
	bool prune_zero = false;
   1dc14:	2100      	movs	r1, #0
   1dc16:	e640      	b.n	1d89a <cbvprintf+0x642>
		decimals = precision + 1;
   1dc18:	f108 0101 	add.w	r1, r8, #1
	if (decimals > 16) {
   1dc1c:	2910      	cmp	r1, #16
   1dc1e:	bfa8      	it	ge
   1dc20:	2110      	movge	r1, #16
   1dc22:	2010      	movs	r0, #16
	uint64_t round = BIT64(59); /* 0.5 */
   1dc24:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
   1dc28:	460d      	mov	r5, r1
   1dc2a:	9007      	str	r0, [sp, #28]
	*v >>= 1;
   1dc2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
	while (decimals--) {
   1dc30:	b9a5      	cbnz	r5, 1dc5c <cbvprintf+0xa04>
	fract += round;
   1dc32:	9d08      	ldr	r5, [sp, #32]
   1dc34:	1940      	adds	r0, r0, r5
   1dc36:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1dc38:	eb41 0105 	adc.w	r1, r1, r5
	if (fract >= BIT64(60)) {
   1dc3c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   1dc40:	d21b      	bcs.n	1dc7a <cbvprintf+0xa22>
	fract += round;
   1dc42:	e9cd 0108 	strd	r0, r1, [sp, #32]
	if (c == 'f') {
   1dc46:	2a66      	cmp	r2, #102	; 0x66
   1dc48:	f040 8098 	bne.w	1dd7c <cbvprintf+0xb24>
		if (decexp > 0) {
   1dc4c:	2b00      	cmp	r3, #0
   1dc4e:	dc23      	bgt.n	1dc98 <cbvprintf+0xa40>
			*buf++ = '0';
   1dc50:	2130      	movs	r1, #48	; 0x30
   1dc52:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
   1dc56:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
   1dc5a:	e02f      	b.n	1dcbc <cbvprintf+0xa64>
	*v >>= 1;
   1dc5c:	0840      	lsrs	r0, r0, #1
   1dc5e:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   1dc62:	0849      	lsrs	r1, r1, #1
   1dc64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	_ldiv5(v);
   1dc68:	a80a      	add	r0, sp, #40	; 0x28
   1dc6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1dc6e:	3d01      	subs	r5, #1
   1dc70:	f01e febd 	bl	3c9ee <_ldiv5>
   1dc74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
   1dc78:	e7d8      	b.n	1dc2c <cbvprintf+0x9d4>
	*v >>= 1;
   1dc7a:	0840      	lsrs	r0, r0, #1
   1dc7c:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   1dc80:	0849      	lsrs	r1, r1, #1
   1dc82:	e9cd 0108 	strd	r0, r1, [sp, #32]
	_ldiv5(v);
   1dc86:	a808      	add	r0, sp, #32
   1dc88:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1dc8c:	f01e feaf 	bl	3c9ee <_ldiv5>
		decexp++;
   1dc90:	9b05      	ldr	r3, [sp, #20]
   1dc92:	9a04      	ldr	r2, [sp, #16]
   1dc94:	3301      	adds	r3, #1
   1dc96:	e7d6      	b.n	1dc46 <cbvprintf+0x9ee>
	char *buf = bps;
   1dc98:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
   1dc9a:	9907      	ldr	r1, [sp, #28]
   1dc9c:	2900      	cmp	r1, #0
   1dc9e:	dd0b      	ble.n	1dcb8 <cbvprintf+0xa60>
				*buf++ = _get_digit(&fract, &digit_count);
   1dca0:	a907      	add	r1, sp, #28
   1dca2:	a808      	add	r0, sp, #32
   1dca4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1dca8:	f01e feb9 	bl	3ca1e <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   1dcac:	9b05      	ldr	r3, [sp, #20]
   1dcae:	9a04      	ldr	r2, [sp, #16]
   1dcb0:	3b01      	subs	r3, #1
				*buf++ = _get_digit(&fract, &digit_count);
   1dcb2:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
   1dcb6:	d1f0      	bne.n	1dc9a <cbvprintf+0xa42>
			conv->pad0_value = decexp;
   1dcb8:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
   1dcba:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
   1dcbc:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1dcc0:	0689      	lsls	r1, r1, #26
   1dcc2:	d402      	bmi.n	1dcca <cbvprintf+0xa72>
   1dcc4:	f1b8 0f00 	cmp.w	r8, #0
   1dcc8:	dd1d      	ble.n	1dd06 <cbvprintf+0xaae>
			*buf++ = '.';
   1dcca:	212e      	movs	r1, #46	; 0x2e
   1dccc:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
   1dcd0:	b19b      	cbz	r3, 1dcfa <cbvprintf+0xaa2>
   1dcd2:	f1b8 0f00 	cmp.w	r8, #0
   1dcd6:	dd16      	ble.n	1dd06 <cbvprintf+0xaae>
			conv->pad0_value = -decexp;
   1dcd8:	4259      	negs	r1, r3
   1dcda:	4541      	cmp	r1, r8
   1dcdc:	bfa8      	it	ge
   1dcde:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
   1dce0:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
   1dce2:	910f      	str	r1, [sp, #60]	; 0x3c
			precision -= conv->pad0_value;
   1dce4:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   1dce8:	bfd4      	ite	le
   1dcea:	2100      	movle	r1, #0
   1dcec:	2101      	movgt	r1, #1
   1dcee:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   1dcf2:	f361 1045 	bfi	r0, r1, #5, #1
   1dcf6:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
   1dcfa:	f1b8 0f00 	cmp.w	r8, #0
   1dcfe:	dd02      	ble.n	1dd06 <cbvprintf+0xaae>
   1dd00:	9907      	ldr	r1, [sp, #28]
   1dd02:	2900      	cmp	r1, #0
   1dd04:	dc55      	bgt.n	1ddb2 <cbvprintf+0xb5a>
	if (prune_zero) {
   1dd06:	9903      	ldr	r1, [sp, #12]
   1dd08:	2900      	cmp	r1, #0
   1dd0a:	d162      	bne.n	1ddd2 <cbvprintf+0xb7a>
	conv->pad0_pre_exp = precision;
   1dd0c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
   1dd10:	f002 01df 	and.w	r1, r2, #223	; 0xdf
   1dd14:	2945      	cmp	r1, #69	; 0x45
   1dd16:	d120      	bne.n	1dd5a <cbvprintf+0xb02>
		*buf++ = c;
   1dd18:	4629      	mov	r1, r5
		if (decexp < 0) {
   1dd1a:	2b00      	cmp	r3, #0
		*buf++ = c;
   1dd1c:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
   1dd20:	bfb6      	itet	lt
   1dd22:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   1dd24:	222b      	movge	r2, #43	; 0x2b
			decexp = -decexp;
   1dd26:	425b      	neglt	r3, r3
		if (decexp >= 100) {
   1dd28:	2b63      	cmp	r3, #99	; 0x63
   1dd2a:	706a      	strb	r2, [r5, #1]
   1dd2c:	dd09      	ble.n	1dd42 <cbvprintf+0xaea>
			*buf++ = (decexp / 100) + '0';
   1dd2e:	2064      	movs	r0, #100	; 0x64
   1dd30:	fbb3 f2f0 	udiv	r2, r3, r0
			decexp %= 100;
   1dd34:	fb00 3312 	mls	r3, r0, r2, r3
			*buf++ = (decexp / 100) + '0';
   1dd38:	f102 0c30 	add.w	ip, r2, #48	; 0x30
   1dd3c:	1ce9      	adds	r1, r5, #3
   1dd3e:	f885 c002 	strb.w	ip, [r5, #2]
		*buf++ = (decexp / 10) + '0';
   1dd42:	200a      	movs	r0, #10
   1dd44:	fbb3 f2f0 	udiv	r2, r3, r0
   1dd48:	460d      	mov	r5, r1
		*buf++ = (decexp % 10) + '0';
   1dd4a:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
   1dd4e:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   1dd52:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   1dd54:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
   1dd58:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
   1dd5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dd5c:	2b00      	cmp	r3, #0
   1dd5e:	dc43      	bgt.n	1dde8 <cbvprintf+0xb90>
   1dd60:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1dd62:	2b00      	cmp	r3, #0
   1dd64:	bfd4      	ite	le
   1dd66:	2300      	movle	r3, #0
   1dd68:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   1dd6a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1dd6e:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   1dd72:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   1dd74:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
   1dd78:	702b      	strb	r3, [r5, #0]
	return bps;
   1dd7a:	e5ff      	b.n	1d97c <cbvprintf+0x724>
		*buf = _get_digit(&fract, &digit_count);
   1dd7c:	a907      	add	r1, sp, #28
   1dd7e:	a808      	add	r0, sp, #32
   1dd80:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1dd84:	f01e fe4b 	bl	3ca1e <_get_digit>
		if (*buf++ != '0') {
   1dd88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
   1dd8c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		if (*buf++ != '0') {
   1dd90:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   1dd92:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
			decexp--;
   1dd96:	bf18      	it	ne
   1dd98:	f103 33ff 	addne.w	r3, r3, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   1dd9c:	0688      	lsls	r0, r1, #26
   1dd9e:	d402      	bmi.n	1dda6 <cbvprintf+0xb4e>
   1dda0:	f1b8 0f00 	cmp.w	r8, #0
   1dda4:	dd12      	ble.n	1ddcc <cbvprintf+0xb74>
			*buf++ = '.';
   1dda6:	212e      	movs	r1, #46	; 0x2e
   1dda8:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
   1ddac:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
   1ddb0:	e7a3      	b.n	1dcfa <cbvprintf+0xaa2>
		*buf++ = _get_digit(&fract, &digit_count);
   1ddb2:	a907      	add	r1, sp, #28
   1ddb4:	a808      	add	r0, sp, #32
   1ddb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1ddba:	f01e fe30 	bl	3ca1e <_get_digit>
   1ddbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ddc2:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
   1ddc6:	f108 38ff 	add.w	r8, r8, #4294967295
   1ddca:	e796      	b.n	1dcfa <cbvprintf+0xaa2>
		if (*buf++ != '0') {
   1ddcc:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
   1ddd0:	e799      	b.n	1dd06 <cbvprintf+0xaae>
		conv->pad0_pre_exp = 0;
   1ddd2:	2100      	movs	r1, #0
   1ddd4:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
   1ddd6:	4628      	mov	r0, r5
   1ddd8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1dddc:	2930      	cmp	r1, #48	; 0x30
   1ddde:	d0fa      	beq.n	1ddd6 <cbvprintf+0xb7e>
		if (*buf != '.') {
   1dde0:	292e      	cmp	r1, #46	; 0x2e
   1dde2:	bf18      	it	ne
   1dde4:	4605      	movne	r5, r0
   1dde6:	e793      	b.n	1dd10 <cbvprintf+0xab8>
		|| (conv->pad0_pre_exp > 0);
   1dde8:	2301      	movs	r3, #1
   1ddea:	e7be      	b.n	1dd6a <cbvprintf+0xb12>
			bpe = bps + 5;
   1ddec:	4d0b      	ldr	r5, [pc, #44]	; (1de1c <cbvprintf+0xbc4>)
		char sign = 0;
   1ddee:	4607      	mov	r7, r0
			bps = "(nil)";
   1ddf0:	1f6a      	subs	r2, r5, #5
   1ddf2:	e5c4      	b.n	1d97e <cbvprintf+0x726>
		} else if (conv->altform_0) {
   1ddf4:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
   1ddf6:	bf48      	it	mi
   1ddf8:	3301      	addmi	r3, #1
   1ddfa:	e5c9      	b.n	1d990 <cbvprintf+0x738>
					OUTC(pad);
   1ddfc:	4651      	mov	r1, sl
   1ddfe:	4640      	mov	r0, r8
   1de00:	9203      	str	r2, [sp, #12]
   1de02:	47c8      	blx	r9
   1de04:	2800      	cmp	r0, #0
   1de06:	9a03      	ldr	r2, [sp, #12]
   1de08:	f6bf ade6 	bge.w	1d9d8 <cbvprintf+0x780>
#undef OUTS
#undef OUTC
}
   1de0c:	b01b      	add	sp, #108	; 0x6c
   1de0e:	ecbd 8b02 	vpop	{d8}
   1de12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de16:	bf00      	nop
   1de18:	0004bd42 	.word	0x0004bd42
   1de1c:	0004412b 	.word	0x0004412b
				char pad = ' ';
   1de20:	f04f 0820 	mov.w	r8, #32
   1de24:	e5d7      	b.n	1d9d6 <cbvprintf+0x77e>
					pad = '0';
   1de26:	f04f 0830 	mov.w	r8, #48	; 0x30
   1de2a:	e5d4      	b.n	1d9d6 <cbvprintf+0x77e>
					OUTC(*cp++);
   1de2c:	4651      	mov	r1, sl
   1de2e:	47c8      	blx	r9
   1de30:	2800      	cmp	r0, #0
   1de32:	f6bf adf0 	bge.w	1da16 <cbvprintf+0x7be>
   1de36:	e7e9      	b.n	1de0c <cbvprintf+0xbb4>
					OUTC(*cp++);
   1de38:	4651      	mov	r1, sl
   1de3a:	9203      	str	r2, [sp, #12]
   1de3c:	47c8      	blx	r9
   1de3e:	2800      	cmp	r0, #0
   1de40:	9a03      	ldr	r2, [sp, #12]
   1de42:	dbe3      	blt.n	1de0c <cbvprintf+0xbb4>
				while (isdigit((int)*cp)) {
   1de44:	7810      	ldrb	r0, [r2, #0]
   1de46:	4b37      	ldr	r3, [pc, #220]	; (1df24 <cbvprintf+0xccc>)
   1de48:	4617      	mov	r7, r2
   1de4a:	5cc3      	ldrb	r3, [r0, r3]
   1de4c:	eb06 0802 	add.w	r8, r6, r2
   1de50:	075b      	lsls	r3, r3, #29
   1de52:	f102 0201 	add.w	r2, r2, #1
   1de56:	d4ef      	bmi.n	1de38 <cbvprintf+0xbe0>
				if (!conv->pad_postdp) {
   1de58:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
   1de5c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
   1de5e:	0699      	lsls	r1, r3, #26
   1de60:	d407      	bmi.n	1de72 <cbvprintf+0xc1a>
   1de62:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
   1de64:	2e00      	cmp	r6, #0
   1de66:	eba8 0206 	sub.w	r2, r8, r6
   1de6a:	f106 36ff 	add.w	r6, r6, #4294967295
   1de6e:	dc0f      	bgt.n	1de90 <cbvprintf+0xc38>
   1de70:	4690      	mov	r8, r2
				if (*cp == '.') {
   1de72:	7838      	ldrb	r0, [r7, #0]
   1de74:	282e      	cmp	r0, #46	; 0x2e
   1de76:	d108      	bne.n	1de8a <cbvprintf+0xc32>
					OUTC(*cp++);
   1de78:	4651      	mov	r1, sl
   1de7a:	47c8      	blx	r9
						OUTC('0');
   1de7c:	2800      	cmp	r0, #0
   1de7e:	dbc5      	blt.n	1de0c <cbvprintf+0xbb4>
					while (pad_len-- > 0) {
   1de80:	2e00      	cmp	r6, #0
						OUTC('0');
   1de82:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
   1de86:	dc09      	bgt.n	1de9c <cbvprintf+0xc44>
					OUTC(*cp++);
   1de88:	3701      	adds	r7, #1
   1de8a:	eba8 0607 	sub.w	r6, r8, r7
   1de8e:	e00e      	b.n	1deae <cbvprintf+0xc56>
						OUTC('0');
   1de90:	4651      	mov	r1, sl
   1de92:	2030      	movs	r0, #48	; 0x30
   1de94:	47c8      	blx	r9
   1de96:	2800      	cmp	r0, #0
   1de98:	dae4      	bge.n	1de64 <cbvprintf+0xc0c>
   1de9a:	e7b7      	b.n	1de0c <cbvprintf+0xbb4>
						OUTC('0');
   1de9c:	4651      	mov	r1, sl
   1de9e:	2030      	movs	r0, #48	; 0x30
   1dea0:	47c8      	blx	r9
   1dea2:	3e01      	subs	r6, #1
   1dea4:	e7ea      	b.n	1de7c <cbvprintf+0xc24>
					OUTC(*cp++);
   1dea6:	4651      	mov	r1, sl
   1dea8:	47c8      	blx	r9
   1deaa:	2800      	cmp	r0, #0
   1deac:	dbae      	blt.n	1de0c <cbvprintf+0xbb4>
   1deae:	46b8      	mov	r8, r7
				while (isdigit((int)*cp)) {
   1deb0:	4a1c      	ldr	r2, [pc, #112]	; (1df24 <cbvprintf+0xccc>)
   1deb2:	19f3      	adds	r3, r6, r7
   1deb4:	f817 0b01 	ldrb.w	r0, [r7], #1
   1deb8:	5c12      	ldrb	r2, [r2, r0]
   1deba:	0752      	lsls	r2, r2, #29
   1debc:	d4f3      	bmi.n	1dea6 <cbvprintf+0xc4e>
   1debe:	e5b1      	b.n	1da24 <cbvprintf+0x7cc>
				OUTC('0');
   1dec0:	4651      	mov	r1, sl
   1dec2:	2030      	movs	r0, #48	; 0x30
   1dec4:	47c8      	blx	r9
   1dec6:	2800      	cmp	r0, #0
   1dec8:	dba0      	blt.n	1de0c <cbvprintf+0xbb4>
   1deca:	3601      	adds	r6, #1
   1decc:	e5ad      	b.n	1da2a <cbvprintf+0x7d2>
			if (conv->altform_0c | conv->altform_0) {
   1dece:	06d8      	lsls	r0, r3, #27
   1ded0:	d401      	bmi.n	1ded6 <cbvprintf+0xc7e>
   1ded2:	0719      	lsls	r1, r3, #28
   1ded4:	d507      	bpl.n	1dee6 <cbvprintf+0xc8e>
				OUTC('0');
   1ded6:	4651      	mov	r1, sl
   1ded8:	2030      	movs	r0, #48	; 0x30
   1deda:	9203      	str	r2, [sp, #12]
   1dedc:	47c8      	blx	r9
   1dede:	2800      	cmp	r0, #0
   1dee0:	db94      	blt.n	1de0c <cbvprintf+0xbb4>
   1dee2:	9a03      	ldr	r2, [sp, #12]
   1dee4:	3601      	adds	r6, #1
			if (conv->altform_0c) {
   1dee6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1deea:	06db      	lsls	r3, r3, #27
   1deec:	d508      	bpl.n	1df00 <cbvprintf+0xca8>
				OUTC(conv->specifier);
   1deee:	4651      	mov	r1, sl
   1def0:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   1def4:	9203      	str	r2, [sp, #12]
   1def6:	47c8      	blx	r9
   1def8:	2800      	cmp	r0, #0
   1defa:	db87      	blt.n	1de0c <cbvprintf+0xbb4>
   1defc:	9a03      	ldr	r2, [sp, #12]
   1defe:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
   1df00:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1df02:	4437      	add	r7, r6
   1df04:	1bbb      	subs	r3, r7, r6
   1df06:	2b00      	cmp	r3, #0
   1df08:	dc01      	bgt.n	1df0e <cbvprintf+0xcb6>
			OUTS(bps, bpe);
   1df0a:	462b      	mov	r3, r5
   1df0c:	e593      	b.n	1da36 <cbvprintf+0x7de>
				OUTC('0');
   1df0e:	4651      	mov	r1, sl
   1df10:	2030      	movs	r0, #48	; 0x30
   1df12:	9203      	str	r2, [sp, #12]
   1df14:	47c8      	blx	r9
   1df16:	2800      	cmp	r0, #0
   1df18:	f6ff af78 	blt.w	1de0c <cbvprintf+0xbb4>
   1df1c:	9a03      	ldr	r2, [sp, #12]
   1df1e:	3601      	adds	r6, #1
   1df20:	e7f0      	b.n	1df04 <cbvprintf+0xcac>
   1df22:	bf00      	nop
   1df24:	0004bd43 	.word	0x0004bd43

0001df28 <clock_settime>:
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;
	k_spinlock_key_t key;

	if (clock_id != CLOCK_REALTIME) {
   1df28:	2801      	cmp	r0, #1
{
   1df2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1df2c:	460e      	mov	r6, r1
	if (clock_id != CLOCK_REALTIME) {
   1df2e:	d006      	beq.n	1df3e <clock_settime+0x16>
		errno = EINVAL;
   1df30:	f01f fc25 	bl	3d77e <__errno>
   1df34:	2316      	movs	r3, #22
   1df36:	6003      	str	r3, [r0, #0]
		return -1;
   1df38:	f04f 30ff 	mov.w	r0, #4294967295
	key = k_spin_lock(&rt_clock_base_lock);
	rt_clock_base = base;
	k_spin_unlock(&rt_clock_base_lock, key);

	return 0;
}
   1df3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   1df3e:	f023 f8e9 	bl	41114 <z_impl_k_uptime_ticks>
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
   1df42:	4a33      	ldr	r2, [pc, #204]	; (1e010 <clock_settime+0xe8>)
   1df44:	6833      	ldr	r3, [r6, #0]
   1df46:	6874      	ldr	r4, [r6, #4]
   1df48:	fba3 3502 	umull	r3, r5, r3, r2
   1df4c:	68b6      	ldr	r6, [r6, #8]
   1df4e:	fb02 5504 	mla	r5, r2, r4, r5
   1df52:	199c      	adds	r4, r3, r6
			return ((t * to_hz + off) / from_hz);
		} else {
			/* Slower algorithm but input is first divided before being multiplied
			 * which prevents overflow of intermediate value.
			 */
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
   1df54:	ea4f 33d0 	mov.w	r3, r0, lsr #15
   1df58:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1df5c:	eb45 75e6 	adc.w	r5, r5, r6, asr #31
   1df60:	fba3 3602 	umull	r3, r6, r3, r2
   1df64:	0bc9      	lsrs	r1, r1, #15
   1df66:	f3c0 000e 	ubfx	r0, r0, #0, #15
   1df6a:	fb02 6101 	mla	r1, r2, r1, r6
   1df6e:	fba0 0202 	umull	r0, r2, r0, r2
		- elapsed_nsecs;
   1df72:	1ae4      	subs	r4, r4, r3
   1df74:	ea4f 33d0 	mov.w	r3, r0, lsr #15
   1df78:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   1df7c:	eb65 0501 	sbc.w	r5, r5, r1
   1df80:	1ae4      	subs	r4, r4, r3
   1df82:	f165 0500 	sbc.w	r5, r5, #0
	base.tv_sec = delta / NSEC_PER_SEC;
   1df86:	4620      	mov	r0, r4
   1df88:	a31f      	add	r3, pc, #124	; (adr r3, 1e008 <clock_settime+0xe0>)
   1df8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df8e:	4629      	mov	r1, r5
   1df90:	f7fe ff5a 	bl	1ce48 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
   1df94:	a31c      	add	r3, pc, #112	; (adr r3, 1e008 <clock_settime+0xe0>)
   1df96:	e9d3 2300 	ldrd	r2, r3, [r3]
	base.tv_sec = delta / NSEC_PER_SEC;
   1df9a:	4607      	mov	r7, r0
   1df9c:	460e      	mov	r6, r1
	base.tv_nsec = delta % NSEC_PER_SEC;
   1df9e:	4620      	mov	r0, r4
   1dfa0:	4629      	mov	r1, r5
   1dfa2:	f7fe ff51 	bl	1ce48 <__aeabi_ldivmod>
   1dfa6:	4614      	mov	r4, r2
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1dfa8:	f04f 0320 	mov.w	r3, #32
   1dfac:	f3ef 8511 	mrs	r5, BASEPRI
   1dfb0:	f383 8812 	msr	BASEPRI_MAX, r3
   1dfb4:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1dfb8:	4816      	ldr	r0, [pc, #88]	; (1e014 <clock_settime+0xec>)
   1dfba:	f018 fb11 	bl	365e0 <z_spin_lock_valid>
   1dfbe:	b940      	cbnz	r0, 1dfd2 <clock_settime+0xaa>
   1dfc0:	4915      	ldr	r1, [pc, #84]	; (1e018 <clock_settime+0xf0>)
   1dfc2:	4816      	ldr	r0, [pc, #88]	; (1e01c <clock_settime+0xf4>)
   1dfc4:	228e      	movs	r2, #142	; 0x8e
   1dfc6:	f01e fd61 	bl	3ca8c <assert_print>
   1dfca:	218e      	movs	r1, #142	; 0x8e
   1dfcc:	4812      	ldr	r0, [pc, #72]	; (1e018 <clock_settime+0xf0>)
   1dfce:	f01e fd56 	bl	3ca7e <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   1dfd2:	4810      	ldr	r0, [pc, #64]	; (1e014 <clock_settime+0xec>)
   1dfd4:	f018 fb22 	bl	3661c <z_spin_lock_set_owner>
	rt_clock_base = base;
   1dfd8:	4b11      	ldr	r3, [pc, #68]	; (1e020 <clock_settime+0xf8>)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dfda:	480e      	ldr	r0, [pc, #56]	; (1e014 <clock_settime+0xec>)
   1dfdc:	e9c3 7600 	strd	r7, r6, [r3]
   1dfe0:	609c      	str	r4, [r3, #8]
   1dfe2:	f018 fb0b 	bl	365fc <z_spin_unlock_valid>
   1dfe6:	b940      	cbnz	r0, 1dffa <clock_settime+0xd2>
   1dfe8:	490b      	ldr	r1, [pc, #44]	; (1e018 <clock_settime+0xf0>)
   1dfea:	480c      	ldr	r0, [pc, #48]	; (1e01c <clock_settime+0xf4>)
   1dfec:	22b9      	movs	r2, #185	; 0xb9
   1dfee:	f01e fd4d 	bl	3ca8c <assert_print>
   1dff2:	21b9      	movs	r1, #185	; 0xb9
   1dff4:	4808      	ldr	r0, [pc, #32]	; (1e018 <clock_settime+0xf0>)
   1dff6:	f01e fd42 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1dffa:	f385 8811 	msr	BASEPRI, r5
   1dffe:	f3bf 8f6f 	isb	sy
	return 0;
   1e002:	2000      	movs	r0, #0
   1e004:	e79a      	b.n	1df3c <clock_settime+0x14>
   1e006:	bf00      	nop
   1e008:	3b9aca00 	.word	0x3b9aca00
   1e00c:	00000000 	.word	0x00000000
   1e010:	3b9aca00 	.word	0x3b9aca00
   1e014:	200191e4 	.word	0x200191e4
   1e018:	000440d8 	.word	0x000440d8
   1e01c:	0004409e 	.word	0x0004409e
   1e020:	200153c0 	.word	0x200153c0
   1e024:	00000000 	.word	0x00000000

0001e028 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
   1e028:	b570      	push	{r4, r5, r6, lr}
   1e02a:	ed2d 8b02 	vpush	{d8}
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   1e02e:	2300      	movs	r3, #0
{
   1e030:	b086      	sub	sp, #24
	struct at_param_list resp_list = {0};
   1e032:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1e036:	2304      	movs	r3, #4
{
   1e038:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   1e03a:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
   1e03c:	9301      	str	r3, [sp, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   1e03e:	2800      	cmp	r0, #0
   1e040:	f000 80a4 	beq.w	1e18c <parse_edrx+0x164>
   1e044:	2900      	cmp	r1, #0
   1e046:	f000 80a1 	beq.w	1e18c <parse_edrx+0x164>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   1e04a:	2106      	movs	r1, #6
   1e04c:	a804      	add	r0, sp, #16
   1e04e:	f021 f898 	bl	3f182 <at_params_list_init>
	if (err) {
   1e052:	4604      	mov	r4, r0
   1e054:	b148      	cbz	r0, 1e06a <parse_edrx+0x42>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1e056:	4602      	mov	r2, r0
   1e058:	2145      	movs	r1, #69	; 0x45
   1e05a:	4851      	ldr	r0, [pc, #324]	; (1e1a0 <parse_edrx+0x178>)
   1e05c:	f01e fd50 	bl	3cb00 <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1e060:	4620      	mov	r0, r4
   1e062:	b006      	add	sp, #24
   1e064:	ecbd 8b02 	vpop	{d8}
   1e068:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response,
   1e06a:	4601      	mov	r1, r0
   1e06c:	aa04      	add	r2, sp, #16
   1e06e:	4630      	mov	r0, r6
   1e070:	f021 f884 	bl	3f17c <at_parser_params_from_str>
	if (err) {
   1e074:	4604      	mov	r4, r0
   1e076:	b140      	cbz	r0, 1e08a <parse_edrx+0x62>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   1e078:	2145      	movs	r1, #69	; 0x45
   1e07a:	4602      	mov	r2, r0
   1e07c:	4849      	ldr	r0, [pc, #292]	; (1e1a4 <parse_edrx+0x17c>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1e07e:	f01e fd3f 	bl	3cb00 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   1e082:	a804      	add	r0, sp, #16
   1e084:	f021 f890 	bl	3f1a8 <at_params_list_free>
	return err;
   1e088:	e7ea      	b.n	1e060 <parse_edrx+0x38>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1e08a:	2103      	movs	r1, #3
   1e08c:	ab01      	add	r3, sp, #4
   1e08e:	aa02      	add	r2, sp, #8
   1e090:	a804      	add	r0, sp, #16
   1e092:	f021 f982 	bl	3f39a <at_params_string_get>
	if (err) {
   1e096:	4604      	mov	r4, r0
   1e098:	b118      	cbz	r0, 1e0a2 <parse_edrx+0x7a>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1e09a:	4602      	mov	r2, r0
   1e09c:	2145      	movs	r1, #69	; 0x45
   1e09e:	4842      	ldr	r0, [pc, #264]	; (1e1a8 <parse_edrx+0x180>)
   1e0a0:	e7ed      	b.n	1e07e <parse_edrx+0x56>
	tmp_buf[len] = '\0';
   1e0a2:	9b01      	ldr	r3, [sp, #4]
   1e0a4:	aa06      	add	r2, sp, #24
   1e0a6:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1e0a8:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   1e0aa:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   1e0ae:	2202      	movs	r2, #2
   1e0b0:	a802      	add	r0, sp, #8
   1e0b2:	f01c fd01 	bl	3aab8 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1e0b6:	466a      	mov	r2, sp
   1e0b8:	2101      	movs	r1, #1
	idx = strtoul(tmp_buf, NULL, 2);
   1e0ba:	b2c6      	uxtb	r6, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1e0bc:	a804      	add	r0, sp, #16
   1e0be:	f021 f937 	bl	3f330 <at_params_int_get>
	if (err) {
   1e0c2:	4604      	mov	r4, r0
   1e0c4:	b118      	cbz	r0, 1e0ce <parse_edrx+0xa6>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   1e0c6:	4602      	mov	r2, r0
   1e0c8:	2145      	movs	r1, #69	; 0x45
   1e0ca:	4838      	ldr	r0, [pc, #224]	; (1e1ac <parse_edrx+0x184>)
   1e0cc:	e7d7      	b.n	1e07e <parse_edrx+0x56>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e0ce:	9b00      	ldr	r3, [sp, #0]
   1e0d0:	2b04      	cmp	r3, #4
   1e0d2:	d016      	beq.n	1e102 <parse_edrx+0xda>
   1e0d4:	2b05      	cmp	r3, #5
   1e0d6:	d007      	beq.n	1e0e8 <parse_edrx+0xc0>
   1e0d8:	7028      	strb	r0, [r5, #0]
		LOG_WRN("Active LTE mode could not be determined");
   1e0da:	2157      	movs	r1, #87	; 0x57
   1e0dc:	4834      	ldr	r0, [pc, #208]	; (1e1b0 <parse_edrx+0x188>)
   1e0de:	f01e fd0f 	bl	3cb00 <z_log_minimal_printk>
		return -ENOTCONN;
   1e0e2:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   1e0e6:	e7cc      	b.n	1e082 <parse_edrx+0x5a>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e0e8:	2309      	movs	r3, #9
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e0ea:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e0ec:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e0ee:	d92a      	bls.n	1e146 <parse_edrx+0x11e>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1e0f0:	f06f 0215 	mvn.w	r2, #21
   1e0f4:	2145      	movs	r1, #69	; 0x45
   1e0f6:	482f      	ldr	r0, [pc, #188]	; (1e1b4 <parse_edrx+0x18c>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1e0f8:	f01e fd02 	bl	3cb00 <z_log_minimal_printk>
		err = -EINVAL;
   1e0fc:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   1e100:	e7bf      	b.n	1e082 <parse_edrx+0x5a>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e102:	2307      	movs	r3, #7
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e104:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e106:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e108:	d8f2      	bhi.n	1e0f0 <parse_edrx+0xc8>
		*ptw_multiplier = 1.28;
   1e10a:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 1e1b8 <parse_edrx+0x190>
		multiplier = edrx_lookup_ltem[idx];
   1e10e:	4b2b      	ldr	r3, [pc, #172]	; (1e1bc <parse_edrx+0x194>)
   1e110:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e114:	b1e8      	cbz	r0, 1e152 <parse_edrx+0x12a>
   1e116:	f7fe fae5 	bl	1c6e4 <__aeabi_i2d>
   1e11a:	a31f      	add	r3, pc, #124	; (adr r3, 1e198 <parse_edrx+0x170>)
   1e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e120:	f7fe fb4a 	bl	1c7b8 <__aeabi_dmul>
   1e124:	f7fe fe40 	bl	1cda8 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   1e128:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e12a:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e12c:	eb0d 0301 	add.w	r3, sp, r1
   1e130:	aa02      	add	r2, sp, #8
   1e132:	a804      	add	r0, sp, #16
	len = sizeof(tmp_buf) - 1;
   1e134:	9101      	str	r1, [sp, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e136:	f021 f930 	bl	3f39a <at_params_string_get>
	if (err) {
   1e13a:	4604      	mov	r4, r0
   1e13c:	b158      	cbz	r0, 1e156 <parse_edrx+0x12e>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   1e13e:	4602      	mov	r2, r0
   1e140:	2145      	movs	r1, #69	; 0x45
   1e142:	481f      	ldr	r0, [pc, #124]	; (1e1c0 <parse_edrx+0x198>)
   1e144:	e79b      	b.n	1e07e <parse_edrx+0x56>
		multiplier = edrx_lookup_nbiot[idx];
   1e146:	4b1f      	ldr	r3, [pc, #124]	; (1e1c4 <parse_edrx+0x19c>)
		*ptw_multiplier = 2.56;
   1e148:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 1e1c8 <parse_edrx+0x1a0>
		multiplier = edrx_lookup_nbiot[idx];
   1e14c:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		break;
   1e150:	e7e0      	b.n	1e114 <parse_edrx+0xec>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e152:	481e      	ldr	r0, [pc, #120]	; (1e1cc <parse_edrx+0x1a4>)
   1e154:	e7e8      	b.n	1e128 <parse_edrx+0x100>
	tmp_buf[len] = '\0';
   1e156:	9b01      	ldr	r3, [sp, #4]
   1e158:	aa06      	add	r2, sp, #24
   1e15a:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1e15c:	4601      	mov	r1, r0
   1e15e:	2202      	movs	r2, #2
	tmp_buf[len] = '\0';
   1e160:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   1e164:	a802      	add	r0, sp, #8
   1e166:	f01c fca7 	bl	3aab8 <strtoul>
   1e16a:	b2c2      	uxtb	r2, r0
	if (idx > 15) {
   1e16c:	2a0f      	cmp	r2, #15
   1e16e:	d902      	bls.n	1e176 <parse_edrx+0x14e>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1e170:	2145      	movs	r1, #69	; 0x45
   1e172:	4817      	ldr	r0, [pc, #92]	; (1e1d0 <parse_edrx+0x1a8>)
   1e174:	e7c0      	b.n	1e0f8 <parse_edrx+0xd0>
	idx += 1;
   1e176:	3201      	adds	r2, #1
	cfg->ptw = idx * ptw_multiplier;
   1e178:	b2d2      	uxtb	r2, r2
   1e17a:	ee07 2a90 	vmov	s15, r2
   1e17e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1e182:	ee67 7a88 	vmul.f32	s15, s15, s16
   1e186:	edc5 7a02 	vstr	s15, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   1e18a:	e77a      	b.n	1e082 <parse_edrx+0x5a>
		return -EINVAL;
   1e18c:	f06f 0415 	mvn.w	r4, #21
   1e190:	e766      	b.n	1e060 <parse_edrx+0x38>
   1e192:	bf00      	nop
   1e194:	f3af 8000 	nop.w
   1e198:	47ae147b 	.word	0x47ae147b
   1e19c:	40247ae1 	.word	0x40247ae1
   1e1a0:	00045b52 	.word	0x00045b52
   1e1a4:	00045b80 	.word	0x00045b80
   1e1a8:	00045bb1 	.word	0x00045bb1
   1e1ac:	00045be2 	.word	0x00045be2
   1e1b0:	00045c09 	.word	0x00045c09
   1e1b4:	00045c36 	.word	0x00045c36
   1e1b8:	3fa3d70a 	.word	0x3fa3d70a
   1e1bc:	000434a4 	.word	0x000434a4
   1e1c0:	00045c5f 	.word	0x00045c5f
   1e1c4:	000434c4 	.word	0x000434c4
   1e1c8:	4023d70a 	.word	0x4023d70a
   1e1cc:	40a3d70a 	.word	0x40a3d70a
   1e1d0:	00045c8f 	.word	0x00045c8f
   1e1d4:	00000000 	.word	0x00000000

0001e1d8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1e1d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e1dc:	4606      	mov	r6, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e1de:	460c      	mov	r4, r1
{
   1e1e0:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e1e2:	b909      	cbnz	r1, 1e1e8 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1e1e4:	2000      	movs	r0, #0
   1e1e6:	e024      	b.n	1e232 <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e1e8:	6808      	ldr	r0, [r1, #0]
   1e1ea:	2800      	cmp	r0, #0
   1e1ec:	d0fa      	beq.n	1e1e4 <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1e1ee:	688b      	ldr	r3, [r1, #8]
   1e1f0:	6862      	ldr	r2, [r4, #4]
   1e1f2:	1d19      	adds	r1, r3, #4
   1e1f4:	4291      	cmp	r1, r2
   1e1f6:	d80b      	bhi.n	1e210 <parse_value+0x38>
   1e1f8:	2204      	movs	r2, #4
   1e1fa:	4995      	ldr	r1, [pc, #596]	; (1e450 <parse_value+0x278>)
   1e1fc:	4418      	add	r0, r3
   1e1fe:	f023 faec 	bl	417da <strncmp>
   1e202:	b928      	cbnz	r0, 1e210 <parse_value+0x38>
        item->type = cJSON_NULL;
   1e204:	2304      	movs	r3, #4
   1e206:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 4;
   1e208:	68a3      	ldr	r3, [r4, #8]
   1e20a:	3304      	adds	r3, #4
    input_buffer->offset++;
   1e20c:	60a3      	str	r3, [r4, #8]
   1e20e:	e087      	b.n	1e320 <parse_value+0x148>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1e210:	68a3      	ldr	r3, [r4, #8]
   1e212:	6862      	ldr	r2, [r4, #4]
   1e214:	1d59      	adds	r1, r3, #5
   1e216:	4291      	cmp	r1, r2
   1e218:	d80e      	bhi.n	1e238 <parse_value+0x60>
   1e21a:	6820      	ldr	r0, [r4, #0]
   1e21c:	2205      	movs	r2, #5
   1e21e:	498d      	ldr	r1, [pc, #564]	; (1e454 <parse_value+0x27c>)
   1e220:	4418      	add	r0, r3
   1e222:	f023 fada 	bl	417da <strncmp>
   1e226:	b938      	cbnz	r0, 1e238 <parse_value+0x60>
        item->type = cJSON_False;
   1e228:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1e22a:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_False;
   1e22c:	60f0      	str	r0, [r6, #12]
        input_buffer->offset += 5;
   1e22e:	3205      	adds	r2, #5
        input_buffer->offset += 4;
   1e230:	60a2      	str	r2, [r4, #8]
}
   1e232:	b013      	add	sp, #76	; 0x4c
   1e234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1e238:	68a3      	ldr	r3, [r4, #8]
   1e23a:	6862      	ldr	r2, [r4, #4]
   1e23c:	1d19      	adds	r1, r3, #4
   1e23e:	4291      	cmp	r1, r2
   1e240:	d80d      	bhi.n	1e25e <parse_value+0x86>
   1e242:	6820      	ldr	r0, [r4, #0]
   1e244:	2204      	movs	r2, #4
   1e246:	4984      	ldr	r1, [pc, #528]	; (1e458 <parse_value+0x280>)
   1e248:	4418      	add	r0, r3
   1e24a:	f023 fac6 	bl	417da <strncmp>
   1e24e:	b930      	cbnz	r0, 1e25e <parse_value+0x86>
        item->type = cJSON_True;
   1e250:	2302      	movs	r3, #2
        item->valueint = 1;
   1e252:	2001      	movs	r0, #1
        input_buffer->offset += 4;
   1e254:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_True;
   1e256:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
   1e258:	6170      	str	r0, [r6, #20]
        input_buffer->offset += 4;
   1e25a:	3204      	adds	r2, #4
   1e25c:	e7e8      	b.n	1e230 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1e25e:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
   1e262:	4283      	cmp	r3, r0
   1e264:	d2be      	bcs.n	1e1e4 <parse_value+0xc>
   1e266:	6821      	ldr	r1, [r4, #0]
   1e268:	5cca      	ldrb	r2, [r1, r3]
   1e26a:	18cf      	adds	r7, r1, r3
   1e26c:	2a22      	cmp	r2, #34	; 0x22
   1e26e:	d106      	bne.n	1e27e <parse_value+0xa6>
        return parse_string(item, input_buffer);
   1e270:	4621      	mov	r1, r4
   1e272:	4630      	mov	r0, r6
}
   1e274:	b013      	add	sp, #76	; 0x4c
   1e276:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return parse_string(item, input_buffer);
   1e27a:	f013 b9d5 	b.w	31628 <parse_string>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1e27e:	2a2d      	cmp	r2, #45	; 0x2d
   1e280:	d003      	beq.n	1e28a <parse_value+0xb2>
   1e282:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
   1e286:	2d09      	cmp	r5, #9
   1e288:	d85f      	bhi.n	1e34a <parse_value+0x172>
    unsigned char *after_end = NULL;
   1e28a:	2200      	movs	r2, #0
   1e28c:	9201      	str	r2, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e28e:	2900      	cmp	r1, #0
   1e290:	d0a8      	beq.n	1e1e4 <parse_value+0xc>
   1e292:	a902      	add	r1, sp, #8
   1e294:	460d      	mov	r5, r1
                number_c_string[i] = decimal_point;
   1e296:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
   1e29a:	1ac3      	subs	r3, r0, r3
        switch (buffer_at_offset(input_buffer)[i])
   1e29c:	f817 0b01 	ldrb.w	r0, [r7], #1
   1e2a0:	2839      	cmp	r0, #57	; 0x39
   1e2a2:	d810      	bhi.n	1e2c6 <parse_value+0xee>
   1e2a4:	282a      	cmp	r0, #42	; 0x2a
   1e2a6:	d91b      	bls.n	1e2e0 <parse_value+0x108>
   1e2a8:	f1a0 0c2b 	sub.w	ip, r0, #43	; 0x2b
   1e2ac:	f1bc 0f0e 	cmp.w	ip, #14
   1e2b0:	d816      	bhi.n	1e2e0 <parse_value+0x108>
   1e2b2:	e8df f00c 	tbb	[pc, ip]
   1e2b6:	150d      	.short	0x150d
   1e2b8:	0d15370d 	.word	0x0d15370d
   1e2bc:	0d0d0d0d 	.word	0x0d0d0d0d
   1e2c0:	0d0d0d0d 	.word	0x0d0d0d0d
   1e2c4:	0d          	.byte	0x0d
   1e2c5:	00          	.byte	0x00
   1e2c6:	f000 0cdf 	and.w	ip, r0, #223	; 0xdf
   1e2ca:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
   1e2ce:	d107      	bne.n	1e2e0 <parse_value+0x108>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
   1e2d0:	7008      	strb	r0, [r1, #0]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1e2d2:	3201      	adds	r2, #1
   1e2d4:	2a3f      	cmp	r2, #63	; 0x3f
   1e2d6:	f101 0101 	add.w	r1, r1, #1
   1e2da:	d001      	beq.n	1e2e0 <parse_value+0x108>
   1e2dc:	429a      	cmp	r2, r3
   1e2de:	d1dd      	bne.n	1e29c <parse_value+0xc4>
    number_c_string[i] = '\0';
   1e2e0:	ab12      	add	r3, sp, #72	; 0x48
   1e2e2:	441a      	add	r2, r3
   1e2e4:	2300      	movs	r3, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e2e6:	4628      	mov	r0, r5
    number_c_string[i] = '\0';
   1e2e8:	f802 3c40 	strb.w	r3, [r2, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e2ec:	a901      	add	r1, sp, #4
   1e2ee:	f01c fa39 	bl	3a764 <strtod>
    if (number_c_string == after_end)
   1e2f2:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e2f4:	4680      	mov	r8, r0
    if (number_c_string == after_end)
   1e2f6:	42af      	cmp	r7, r5
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e2f8:	4689      	mov	r9, r1
    if (number_c_string == after_end)
   1e2fa:	f43f af73 	beq.w	1e1e4 <parse_value+0xc>
    if (number >= INT_MAX)
   1e2fe:	a352      	add	r3, pc, #328	; (adr r3, 1e448 <parse_value+0x270>)
   1e300:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1e304:	e9c6 8906 	strd	r8, r9, [r6, #24]
    if (number >= INT_MAX)
   1e308:	f7fe fcdc 	bl	1ccc4 <__aeabi_dcmpge>
   1e30c:	b168      	cbz	r0, 1e32a <parse_value+0x152>
        item->valueint = INT_MAX;
   1e30e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1e312:	6173      	str	r3, [r6, #20]
    item->type = cJSON_Number;
   1e314:	2308      	movs	r3, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1e316:	1b7d      	subs	r5, r7, r5
   1e318:	68a7      	ldr	r7, [r4, #8]
    item->type = cJSON_Number;
   1e31a:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1e31c:	443d      	add	r5, r7
   1e31e:	60a5      	str	r5, [r4, #8]
    return true;
   1e320:	2001      	movs	r0, #1
   1e322:	e786      	b.n	1e232 <parse_value+0x5a>
                number_c_string[i] = decimal_point;
   1e324:	f881 e000 	strb.w	lr, [r1]
                break;
   1e328:	e7d3      	b.n	1e2d2 <parse_value+0xfa>
    else if (number <= (double)INT_MIN)
   1e32a:	2200      	movs	r2, #0
   1e32c:	4640      	mov	r0, r8
   1e32e:	4649      	mov	r1, r9
   1e330:	4b4a      	ldr	r3, [pc, #296]	; (1e45c <parse_value+0x284>)
   1e332:	f7fe fcbd 	bl	1ccb0 <__aeabi_dcmple>
   1e336:	b110      	cbz	r0, 1e33e <parse_value+0x166>
        item->valueint = INT_MIN;
   1e338:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1e33c:	e7e9      	b.n	1e312 <parse_value+0x13a>
        item->valueint = (int)number;
   1e33e:	4640      	mov	r0, r8
   1e340:	4649      	mov	r1, r9
   1e342:	f7fe fce9 	bl	1cd18 <__aeabi_d2iz>
   1e346:	6170      	str	r0, [r6, #20]
   1e348:	e7e4      	b.n	1e314 <parse_value+0x13c>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1e34a:	2a5b      	cmp	r2, #91	; 0x5b
   1e34c:	d153      	bne.n	1e3f6 <parse_value+0x21e>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1e34e:	68e2      	ldr	r2, [r4, #12]
   1e350:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1e354:	f4bf af46 	bcs.w	1e1e4 <parse_value+0xc>
    input_buffer->depth++;
   1e358:	3201      	adds	r2, #1
   1e35a:	60e2      	str	r2, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1e35c:	5cca      	ldrb	r2, [r1, r3]
   1e35e:	2a5b      	cmp	r2, #91	; 0x5b
   1e360:	f47f af40 	bne.w	1e1e4 <parse_value+0xc>
    input_buffer->offset++;
   1e364:	3301      	adds	r3, #1
   1e366:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1e368:	4620      	mov	r0, r4
   1e36a:	f021 fb46 	bl	3f9fa <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1e36e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e372:	4293      	cmp	r3, r2
   1e374:	d263      	bcs.n	1e43e <parse_value+0x266>
   1e376:	6822      	ldr	r2, [r4, #0]
   1e378:	5cd2      	ldrb	r2, [r2, r3]
   1e37a:	2a5d      	cmp	r2, #93	; 0x5d
   1e37c:	d10c      	bne.n	1e398 <parse_value+0x1c0>
    cJSON *current_item = NULL;
   1e37e:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
   1e380:	462f      	mov	r7, r5
    input_buffer->depth--;
   1e382:	68e3      	ldr	r3, [r4, #12]
   1e384:	3b01      	subs	r3, #1
   1e386:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
   1e388:	b107      	cbz	r7, 1e38c <parse_value+0x1b4>
        head->prev = current_item;
   1e38a:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Array;
   1e38c:	2320      	movs	r3, #32
    item->child = head;
   1e38e:	e9c6 7302 	strd	r7, r3, [r6, #8]
    input_buffer->offset++;
   1e392:	68a3      	ldr	r3, [r4, #8]
   1e394:	3301      	adds	r3, #1
   1e396:	e739      	b.n	1e20c <parse_value+0x34>
    cJSON *current_item = NULL;
   1e398:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
   1e39a:	462f      	mov	r7, r5
    input_buffer->offset--;
   1e39c:	3b01      	subs	r3, #1
   1e39e:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1e3a0:	6920      	ldr	r0, [r4, #16]
   1e3a2:	f021 fbac 	bl	3fafe <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1e3a6:	46a8      	mov	r8, r5
   1e3a8:	4605      	mov	r5, r0
   1e3aa:	2800      	cmp	r0, #0
   1e3ac:	f000 809d 	beq.w	1e4ea <parse_value+0x312>
        if (head == NULL)
   1e3b0:	b1ff      	cbz	r7, 1e3f2 <parse_value+0x21a>
            current_item->next = new_item;
   1e3b2:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1e3b6:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1e3ba:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e3bc:	4620      	mov	r0, r4
        input_buffer->offset++;
   1e3be:	3301      	adds	r3, #1
   1e3c0:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e3c2:	f021 fb1a 	bl	3f9fa <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1e3c6:	4621      	mov	r1, r4
   1e3c8:	4628      	mov	r0, r5
   1e3ca:	f7ff ff05 	bl	1e1d8 <parse_value>
   1e3ce:	2800      	cmp	r0, #0
   1e3d0:	f000 808e 	beq.w	1e4f0 <parse_value+0x318>
        buffer_skip_whitespace(input_buffer);
   1e3d4:	4620      	mov	r0, r4
   1e3d6:	f021 fb10 	bl	3f9fa <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1e3da:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e3de:	4293      	cmp	r3, r2
   1e3e0:	f080 8086 	bcs.w	1e4f0 <parse_value+0x318>
   1e3e4:	6822      	ldr	r2, [r4, #0]
   1e3e6:	5cd3      	ldrb	r3, [r2, r3]
   1e3e8:	2b2c      	cmp	r3, #44	; 0x2c
   1e3ea:	d0d9      	beq.n	1e3a0 <parse_value+0x1c8>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1e3ec:	2b5d      	cmp	r3, #93	; 0x5d
   1e3ee:	d17f      	bne.n	1e4f0 <parse_value+0x318>
   1e3f0:	e7c7      	b.n	1e382 <parse_value+0x1aa>
   1e3f2:	4607      	mov	r7, r0
   1e3f4:	e7e1      	b.n	1e3ba <parse_value+0x1e2>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1e3f6:	2a7b      	cmp	r2, #123	; 0x7b
   1e3f8:	f47f aef4 	bne.w	1e1e4 <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1e3fc:	68e2      	ldr	r2, [r4, #12]
   1e3fe:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1e402:	f4bf aeef 	bcs.w	1e1e4 <parse_value+0xc>
    input_buffer->depth++;
   1e406:	3201      	adds	r2, #1
   1e408:	60e2      	str	r2, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1e40a:	5cca      	ldrb	r2, [r1, r3]
   1e40c:	2a7b      	cmp	r2, #123	; 0x7b
   1e40e:	f47f aee9 	bne.w	1e1e4 <parse_value+0xc>
    input_buffer->offset++;
   1e412:	3301      	adds	r3, #1
   1e414:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1e416:	4620      	mov	r0, r4
   1e418:	f021 faef 	bl	3f9fa <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1e41c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e420:	4293      	cmp	r3, r2
   1e422:	d20c      	bcs.n	1e43e <parse_value+0x266>
   1e424:	6822      	ldr	r2, [r4, #0]
   1e426:	5cd2      	ldrb	r2, [r2, r3]
   1e428:	2a7d      	cmp	r2, #125	; 0x7d
   1e42a:	d119      	bne.n	1e460 <parse_value+0x288>
    cJSON *current_item = NULL;
   1e42c:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
   1e42e:	462f      	mov	r7, r5
    input_buffer->depth--;
   1e430:	68e3      	ldr	r3, [r4, #12]
   1e432:	3b01      	subs	r3, #1
   1e434:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
   1e436:	b107      	cbz	r7, 1e43a <parse_value+0x262>
        head->prev = current_item;
   1e438:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Object;
   1e43a:	2340      	movs	r3, #64	; 0x40
   1e43c:	e7a7      	b.n	1e38e <parse_value+0x1b6>
        input_buffer->offset--;
   1e43e:	3b01      	subs	r3, #1
   1e440:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1e442:	e6cf      	b.n	1e1e4 <parse_value+0xc>
   1e444:	f3af 8000 	nop.w
   1e448:	ffc00000 	.word	0xffc00000
   1e44c:	41dfffff 	.word	0x41dfffff
   1e450:	0004b7f6 	.word	0x0004b7f6
   1e454:	0004b80d 	.word	0x0004b80d
   1e458:	0004b813 	.word	0x0004b813
   1e45c:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
   1e460:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
   1e462:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
   1e464:	46a8      	mov	r8, r5
    input_buffer->offset--;
   1e466:	3b01      	subs	r3, #1
   1e468:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1e46a:	6920      	ldr	r0, [r4, #16]
   1e46c:	f021 fb47 	bl	3fafe <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1e470:	46a9      	mov	r9, r5
   1e472:	4605      	mov	r5, r0
   1e474:	2800      	cmp	r0, #0
   1e476:	d038      	beq.n	1e4ea <parse_value+0x312>
        if (head == NULL)
   1e478:	b3af      	cbz	r7, 1e4e6 <parse_value+0x30e>
            current_item->next = new_item;
   1e47a:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
   1e47e:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
   1e482:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e484:	4620      	mov	r0, r4
        input_buffer->offset++;
   1e486:	3301      	adds	r3, #1
   1e488:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e48a:	f021 fab6 	bl	3f9fa <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1e48e:	4621      	mov	r1, r4
   1e490:	4628      	mov	r0, r5
   1e492:	f013 f8c9 	bl	31628 <parse_string>
   1e496:	b358      	cbz	r0, 1e4f0 <parse_value+0x318>
        buffer_skip_whitespace(input_buffer);
   1e498:	4620      	mov	r0, r4
   1e49a:	f021 faae 	bl	3f9fa <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1e49e:	692b      	ldr	r3, [r5, #16]
        current_item->valuestring = NULL;
   1e4a0:	f8c5 8010 	str.w	r8, [r5, #16]
        current_item->string = current_item->valuestring;
   1e4a4:	622b      	str	r3, [r5, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1e4a6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e4aa:	4293      	cmp	r3, r2
   1e4ac:	d220      	bcs.n	1e4f0 <parse_value+0x318>
   1e4ae:	6822      	ldr	r2, [r4, #0]
   1e4b0:	5cd2      	ldrb	r2, [r2, r3]
   1e4b2:	2a3a      	cmp	r2, #58	; 0x3a
   1e4b4:	d11c      	bne.n	1e4f0 <parse_value+0x318>
        input_buffer->offset++;
   1e4b6:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
   1e4b8:	4620      	mov	r0, r4
        input_buffer->offset++;
   1e4ba:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e4bc:	f021 fa9d 	bl	3f9fa <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1e4c0:	4621      	mov	r1, r4
   1e4c2:	4628      	mov	r0, r5
   1e4c4:	f7ff fe88 	bl	1e1d8 <parse_value>
   1e4c8:	b190      	cbz	r0, 1e4f0 <parse_value+0x318>
        buffer_skip_whitespace(input_buffer);
   1e4ca:	4620      	mov	r0, r4
   1e4cc:	f021 fa95 	bl	3f9fa <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1e4d0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e4d4:	4293      	cmp	r3, r2
   1e4d6:	d20b      	bcs.n	1e4f0 <parse_value+0x318>
   1e4d8:	6822      	ldr	r2, [r4, #0]
   1e4da:	5cd3      	ldrb	r3, [r2, r3]
   1e4dc:	2b2c      	cmp	r3, #44	; 0x2c
   1e4de:	d0c4      	beq.n	1e46a <parse_value+0x292>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1e4e0:	2b7d      	cmp	r3, #125	; 0x7d
   1e4e2:	d105      	bne.n	1e4f0 <parse_value+0x318>
   1e4e4:	e7a4      	b.n	1e430 <parse_value+0x258>
   1e4e6:	4607      	mov	r7, r0
   1e4e8:	e7cb      	b.n	1e482 <parse_value+0x2aa>
    if (head != NULL)
   1e4ea:	2f00      	cmp	r7, #0
   1e4ec:	f43f ae7a 	beq.w	1e1e4 <parse_value+0xc>
        cJSON_Delete(head);
   1e4f0:	4638      	mov	r0, r7
   1e4f2:	f013 fd33 	bl	31f5c <cJSON_Delete>
   1e4f6:	e675      	b.n	1e1e4 <parse_value+0xc>

0001e4f8 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e4f8:	4b17      	ldr	r3, [pc, #92]	; (1e558 <cJSON_CreateNumber+0x60>)
{
   1e4fa:	b5d0      	push	{r4, r6, r7, lr}
   1e4fc:	4606      	mov	r6, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e4fe:	6818      	ldr	r0, [r3, #0]
{
   1e500:	460f      	mov	r7, r1
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e502:	f021 fafc 	bl	3fafe <cJSON_New_Item.isra.0>
    if(item)
   1e506:	4604      	mov	r4, r0
   1e508:	b170      	cbz	r0, 1e528 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1e50a:	2308      	movs	r3, #8
        item->valuedouble = num;
   1e50c:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1e510:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1e512:	4639      	mov	r1, r7
   1e514:	a30e      	add	r3, pc, #56	; (adr r3, 1e550 <cJSON_CreateNumber+0x58>)
   1e516:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e51a:	4630      	mov	r0, r6
   1e51c:	f7fe fbd2 	bl	1ccc4 <__aeabi_dcmpge>
   1e520:	b120      	cbz	r0, 1e52c <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1e522:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1e526:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1e528:	4620      	mov	r0, r4
   1e52a:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1e52c:	2200      	movs	r2, #0
   1e52e:	4630      	mov	r0, r6
   1e530:	4639      	mov	r1, r7
   1e532:	4b0a      	ldr	r3, [pc, #40]	; (1e55c <cJSON_CreateNumber+0x64>)
   1e534:	f7fe fbbc 	bl	1ccb0 <__aeabi_dcmple>
   1e538:	b110      	cbz	r0, 1e540 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1e53a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1e53e:	e7f2      	b.n	1e526 <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1e540:	4630      	mov	r0, r6
   1e542:	4639      	mov	r1, r7
   1e544:	f7fe fbe8 	bl	1cd18 <__aeabi_d2iz>
   1e548:	6160      	str	r0, [r4, #20]
    return item;
   1e54a:	e7ed      	b.n	1e528 <cJSON_CreateNumber+0x30>
   1e54c:	f3af 8000 	nop.w
   1e550:	ffc00000 	.word	0xffc00000
   1e554:	41dfffff 	.word	0x41dfffff
   1e558:	200146f0 	.word	0x200146f0
   1e55c:	c1e00000 	.word	0xc1e00000

0001e560 <floor>:
   1e560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e564:	f3c1 570a 	ubfx	r7, r1, #20, #11
   1e568:	4602      	mov	r2, r0
   1e56a:	460b      	mov	r3, r1
   1e56c:	460c      	mov	r4, r1
   1e56e:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
   1e572:	4605      	mov	r5, r0
   1e574:	4680      	mov	r8, r0
   1e576:	2e13      	cmp	r6, #19
   1e578:	dc34      	bgt.n	1e5e4 <floor+0x84>
   1e57a:	2e00      	cmp	r6, #0
   1e57c:	da14      	bge.n	1e5a8 <floor+0x48>
   1e57e:	a334      	add	r3, pc, #208	; (adr r3, 1e650 <floor+0xf0>)
   1e580:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e584:	f7fd ff62 	bl	1c44c <__adddf3>
   1e588:	2200      	movs	r2, #0
   1e58a:	2300      	movs	r3, #0
   1e58c:	f7fe fba4 	bl	1ccd8 <__aeabi_dcmpgt>
   1e590:	b138      	cbz	r0, 1e5a2 <floor+0x42>
   1e592:	2c00      	cmp	r4, #0
   1e594:	da58      	bge.n	1e648 <floor+0xe8>
   1e596:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1e59a:	431d      	orrs	r5, r3
   1e59c:	d001      	beq.n	1e5a2 <floor+0x42>
   1e59e:	2500      	movs	r5, #0
   1e5a0:	4c2d      	ldr	r4, [pc, #180]	; (1e658 <floor+0xf8>)
   1e5a2:	4623      	mov	r3, r4
   1e5a4:	462a      	mov	r2, r5
   1e5a6:	e026      	b.n	1e5f6 <floor+0x96>
   1e5a8:	4f2c      	ldr	r7, [pc, #176]	; (1e65c <floor+0xfc>)
   1e5aa:	4137      	asrs	r7, r6
   1e5ac:	ea01 0c07 	and.w	ip, r1, r7
   1e5b0:	ea5c 0c00 	orrs.w	ip, ip, r0
   1e5b4:	d01f      	beq.n	1e5f6 <floor+0x96>
   1e5b6:	a326      	add	r3, pc, #152	; (adr r3, 1e650 <floor+0xf0>)
   1e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e5bc:	f7fd ff46 	bl	1c44c <__adddf3>
   1e5c0:	2200      	movs	r2, #0
   1e5c2:	2300      	movs	r3, #0
   1e5c4:	f7fe fb88 	bl	1ccd8 <__aeabi_dcmpgt>
   1e5c8:	2800      	cmp	r0, #0
   1e5ca:	d0ea      	beq.n	1e5a2 <floor+0x42>
   1e5cc:	2c00      	cmp	r4, #0
   1e5ce:	f04f 0500 	mov.w	r5, #0
   1e5d2:	bfbe      	ittt	lt
   1e5d4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
   1e5d8:	fa43 f606 	asrlt.w	r6, r3, r6
   1e5dc:	19a4      	addlt	r4, r4, r6
   1e5de:	ea24 0407 	bic.w	r4, r4, r7
   1e5e2:	e7de      	b.n	1e5a2 <floor+0x42>
   1e5e4:	2e33      	cmp	r6, #51	; 0x33
   1e5e6:	dd0a      	ble.n	1e5fe <floor+0x9e>
   1e5e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1e5ec:	d103      	bne.n	1e5f6 <floor+0x96>
   1e5ee:	f7fd ff2d 	bl	1c44c <__adddf3>
   1e5f2:	4602      	mov	r2, r0
   1e5f4:	460b      	mov	r3, r1
   1e5f6:	4610      	mov	r0, r2
   1e5f8:	4619      	mov	r1, r3
   1e5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e5fe:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
   1e602:	f04f 3cff 	mov.w	ip, #4294967295
   1e606:	fa2c f707 	lsr.w	r7, ip, r7
   1e60a:	4207      	tst	r7, r0
   1e60c:	d0f3      	beq.n	1e5f6 <floor+0x96>
   1e60e:	a310      	add	r3, pc, #64	; (adr r3, 1e650 <floor+0xf0>)
   1e610:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e614:	f7fd ff1a 	bl	1c44c <__adddf3>
   1e618:	2200      	movs	r2, #0
   1e61a:	2300      	movs	r3, #0
   1e61c:	f7fe fb5c 	bl	1ccd8 <__aeabi_dcmpgt>
   1e620:	2800      	cmp	r0, #0
   1e622:	d0be      	beq.n	1e5a2 <floor+0x42>
   1e624:	2c00      	cmp	r4, #0
   1e626:	da02      	bge.n	1e62e <floor+0xce>
   1e628:	2e14      	cmp	r6, #20
   1e62a:	d103      	bne.n	1e634 <floor+0xd4>
   1e62c:	3401      	adds	r4, #1
   1e62e:	ea25 0507 	bic.w	r5, r5, r7
   1e632:	e7b6      	b.n	1e5a2 <floor+0x42>
   1e634:	2301      	movs	r3, #1
   1e636:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   1e63a:	fa03 f606 	lsl.w	r6, r3, r6
   1e63e:	4435      	add	r5, r6
   1e640:	4545      	cmp	r5, r8
   1e642:	bf38      	it	cc
   1e644:	18e4      	addcc	r4, r4, r3
   1e646:	e7f2      	b.n	1e62e <floor+0xce>
   1e648:	2500      	movs	r5, #0
   1e64a:	462c      	mov	r4, r5
   1e64c:	e7a9      	b.n	1e5a2 <floor+0x42>
   1e64e:	bf00      	nop
   1e650:	8800759c 	.word	0x8800759c
   1e654:	7e37e43c 	.word	0x7e37e43c
   1e658:	bff00000 	.word	0xbff00000
   1e65c:	000fffff 	.word	0x000fffff

0001e660 <_strtod_l>:
   1e660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e664:	461f      	mov	r7, r3
   1e666:	2300      	movs	r3, #0
   1e668:	4604      	mov	r4, r0
   1e66a:	4688      	mov	r8, r1
   1e66c:	f04f 0a00 	mov.w	sl, #0
   1e670:	f04f 0b00 	mov.w	fp, #0
   1e674:	ed2d 8b04 	vpush	{d8-d9}
   1e678:	b09d      	sub	sp, #116	; 0x74
   1e67a:	9318      	str	r3, [sp, #96]	; 0x60
   1e67c:	4b9e      	ldr	r3, [pc, #632]	; (1e8f8 <_strtod_l+0x298>)
   1e67e:	9213      	str	r2, [sp, #76]	; 0x4c
   1e680:	681b      	ldr	r3, [r3, #0]
   1e682:	4618      	mov	r0, r3
   1e684:	9305      	str	r3, [sp, #20]
   1e686:	f7fe fddc 	bl	1d242 <strlen>
   1e68a:	4605      	mov	r5, r0
   1e68c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   1e690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e692:	781a      	ldrb	r2, [r3, #0]
   1e694:	2a2b      	cmp	r2, #43	; 0x2b
   1e696:	d04c      	beq.n	1e732 <_strtod_l+0xd2>
   1e698:	d839      	bhi.n	1e70e <_strtod_l+0xae>
   1e69a:	2a0d      	cmp	r2, #13
   1e69c:	d832      	bhi.n	1e704 <_strtod_l+0xa4>
   1e69e:	2a08      	cmp	r2, #8
   1e6a0:	d832      	bhi.n	1e708 <_strtod_l+0xa8>
   1e6a2:	2a00      	cmp	r2, #0
   1e6a4:	d03c      	beq.n	1e720 <_strtod_l+0xc0>
   1e6a6:	2300      	movs	r3, #0
   1e6a8:	930a      	str	r3, [sp, #40]	; 0x28
   1e6aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1e6ac:	7833      	ldrb	r3, [r6, #0]
   1e6ae:	2b30      	cmp	r3, #48	; 0x30
   1e6b0:	f040 80ae 	bne.w	1e810 <_strtod_l+0x1b0>
   1e6b4:	7873      	ldrb	r3, [r6, #1]
   1e6b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e6ba:	2b58      	cmp	r3, #88	; 0x58
   1e6bc:	d166      	bne.n	1e78c <_strtod_l+0x12c>
   1e6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e6c0:	a917      	add	r1, sp, #92	; 0x5c
   1e6c2:	9702      	str	r7, [sp, #8]
   1e6c4:	4620      	mov	r0, r4
   1e6c6:	9301      	str	r3, [sp, #4]
   1e6c8:	ab18      	add	r3, sp, #96	; 0x60
   1e6ca:	4a8c      	ldr	r2, [pc, #560]	; (1e8fc <_strtod_l+0x29c>)
   1e6cc:	9300      	str	r3, [sp, #0]
   1e6ce:	ab19      	add	r3, sp, #100	; 0x64
   1e6d0:	f01c fcba 	bl	3b048 <__gethex>
   1e6d4:	f010 0707 	ands.w	r7, r0, #7
   1e6d8:	4605      	mov	r5, r0
   1e6da:	d005      	beq.n	1e6e8 <_strtod_l+0x88>
   1e6dc:	2f06      	cmp	r7, #6
   1e6de:	d12a      	bne.n	1e736 <_strtod_l+0xd6>
   1e6e0:	3601      	adds	r6, #1
   1e6e2:	2300      	movs	r3, #0
   1e6e4:	9617      	str	r6, [sp, #92]	; 0x5c
   1e6e6:	930a      	str	r3, [sp, #40]	; 0x28
   1e6e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1e6ea:	2b00      	cmp	r3, #0
   1e6ec:	f040 8584 	bne.w	1f1f8 <_strtod_l+0xb98>
   1e6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e6f2:	b1db      	cbz	r3, 1e72c <_strtod_l+0xcc>
   1e6f4:	4650      	mov	r0, sl
   1e6f6:	f10b 4100 	add.w	r1, fp, #2147483648	; 0x80000000
   1e6fa:	b01d      	add	sp, #116	; 0x74
   1e6fc:	ecbd 8b04 	vpop	{d8-d9}
   1e700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e704:	2a20      	cmp	r2, #32
   1e706:	d1ce      	bne.n	1e6a6 <_strtod_l+0x46>
   1e708:	3301      	adds	r3, #1
   1e70a:	9317      	str	r3, [sp, #92]	; 0x5c
   1e70c:	e7c0      	b.n	1e690 <_strtod_l+0x30>
   1e70e:	2a2d      	cmp	r2, #45	; 0x2d
   1e710:	d1c9      	bne.n	1e6a6 <_strtod_l+0x46>
   1e712:	2201      	movs	r2, #1
   1e714:	920a      	str	r2, [sp, #40]	; 0x28
   1e716:	1c5a      	adds	r2, r3, #1
   1e718:	9217      	str	r2, [sp, #92]	; 0x5c
   1e71a:	785b      	ldrb	r3, [r3, #1]
   1e71c:	2b00      	cmp	r3, #0
   1e71e:	d1c4      	bne.n	1e6aa <_strtod_l+0x4a>
   1e720:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1e722:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   1e726:	2b00      	cmp	r3, #0
   1e728:	f040 8564 	bne.w	1f1f4 <_strtod_l+0xb94>
   1e72c:	4650      	mov	r0, sl
   1e72e:	4659      	mov	r1, fp
   1e730:	e7e3      	b.n	1e6fa <_strtod_l+0x9a>
   1e732:	2200      	movs	r2, #0
   1e734:	e7ee      	b.n	1e714 <_strtod_l+0xb4>
   1e736:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1e738:	b13a      	cbz	r2, 1e74a <_strtod_l+0xea>
   1e73a:	2135      	movs	r1, #53	; 0x35
   1e73c:	a81a      	add	r0, sp, #104	; 0x68
   1e73e:	f023 fbd6 	bl	41eee <__copybits>
   1e742:	9918      	ldr	r1, [sp, #96]	; 0x60
   1e744:	4620      	mov	r0, r4
   1e746:	f01c ff67 	bl	3b618 <_Bfree>
   1e74a:	3f01      	subs	r7, #1
   1e74c:	2f04      	cmp	r7, #4
   1e74e:	d806      	bhi.n	1e75e <_strtod_l+0xfe>
   1e750:	e8df f007 	tbb	[pc, r7]
   1e754:	1714030a 	.word	0x1714030a
   1e758:	0a          	.byte	0x0a
   1e759:	00          	.byte	0x00
   1e75a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   1e75e:	0728      	lsls	r0, r5, #28
   1e760:	d5c2      	bpl.n	1e6e8 <_strtod_l+0x88>
   1e762:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1e766:	e7bf      	b.n	1e6e8 <_strtod_l+0x88>
   1e768:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   1e76c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1e76e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1e772:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1e776:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1e77a:	e7f0      	b.n	1e75e <_strtod_l+0xfe>
   1e77c:	f8df b180 	ldr.w	fp, [pc, #384]	; 1e900 <_strtod_l+0x2a0>
   1e780:	e7ed      	b.n	1e75e <_strtod_l+0xfe>
   1e782:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1e786:	f04f 3aff 	mov.w	sl, #4294967295
   1e78a:	e7e8      	b.n	1e75e <_strtod_l+0xfe>
   1e78c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e78e:	1c5a      	adds	r2, r3, #1
   1e790:	9217      	str	r2, [sp, #92]	; 0x5c
   1e792:	785b      	ldrb	r3, [r3, #1]
   1e794:	2b30      	cmp	r3, #48	; 0x30
   1e796:	d0f9      	beq.n	1e78c <_strtod_l+0x12c>
   1e798:	2b00      	cmp	r3, #0
   1e79a:	d0a5      	beq.n	1e6e8 <_strtod_l+0x88>
   1e79c:	2301      	movs	r3, #1
   1e79e:	f04f 0900 	mov.w	r9, #0
   1e7a2:	9304      	str	r3, [sp, #16]
   1e7a4:	220a      	movs	r2, #10
   1e7a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e7a8:	464f      	mov	r7, r9
   1e7aa:	f8cd 901c 	str.w	r9, [sp, #28]
   1e7ae:	9308      	str	r3, [sp, #32]
   1e7b0:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1e7b2:	7806      	ldrb	r6, [r0, #0]
   1e7b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1e7b8:	b2d9      	uxtb	r1, r3
   1e7ba:	2909      	cmp	r1, #9
   1e7bc:	d92a      	bls.n	1e814 <_strtod_l+0x1b4>
   1e7be:	462a      	mov	r2, r5
   1e7c0:	9905      	ldr	r1, [sp, #20]
   1e7c2:	f023 f80a 	bl	417da <strncmp>
   1e7c6:	b3a0      	cbz	r0, 1e832 <_strtod_l+0x1d2>
   1e7c8:	2000      	movs	r0, #0
   1e7ca:	4632      	mov	r2, r6
   1e7cc:	463d      	mov	r5, r7
   1e7ce:	4603      	mov	r3, r0
   1e7d0:	9005      	str	r0, [sp, #20]
   1e7d2:	2a65      	cmp	r2, #101	; 0x65
   1e7d4:	d001      	beq.n	1e7da <_strtod_l+0x17a>
   1e7d6:	2a45      	cmp	r2, #69	; 0x45
   1e7d8:	d118      	bne.n	1e80c <_strtod_l+0x1ac>
   1e7da:	b91d      	cbnz	r5, 1e7e4 <_strtod_l+0x184>
   1e7dc:	9a04      	ldr	r2, [sp, #16]
   1e7de:	4302      	orrs	r2, r0
   1e7e0:	d09e      	beq.n	1e720 <_strtod_l+0xc0>
   1e7e2:	2500      	movs	r5, #0
   1e7e4:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   1e7e8:	f108 0201 	add.w	r2, r8, #1
   1e7ec:	9217      	str	r2, [sp, #92]	; 0x5c
   1e7ee:	f898 2001 	ldrb.w	r2, [r8, #1]
   1e7f2:	2a2b      	cmp	r2, #43	; 0x2b
   1e7f4:	d075      	beq.n	1e8e2 <_strtod_l+0x282>
   1e7f6:	2a2d      	cmp	r2, #45	; 0x2d
   1e7f8:	d07b      	beq.n	1e8f2 <_strtod_l+0x292>
   1e7fa:	f04f 0c00 	mov.w	ip, #0
   1e7fe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1e802:	2909      	cmp	r1, #9
   1e804:	f240 8082 	bls.w	1e90c <_strtod_l+0x2ac>
   1e808:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   1e80c:	2600      	movs	r6, #0
   1e80e:	e09d      	b.n	1e94c <_strtod_l+0x2ec>
   1e810:	2300      	movs	r3, #0
   1e812:	e7c4      	b.n	1e79e <_strtod_l+0x13e>
   1e814:	2f08      	cmp	r7, #8
   1e816:	f100 0001 	add.w	r0, r0, #1
   1e81a:	f107 0701 	add.w	r7, r7, #1
   1e81e:	bfd4      	ite	le
   1e820:	9907      	ldrle	r1, [sp, #28]
   1e822:	fb02 3909 	mlagt	r9, r2, r9, r3
   1e826:	9017      	str	r0, [sp, #92]	; 0x5c
   1e828:	bfdc      	itt	le
   1e82a:	fb02 3301 	mlale	r3, r2, r1, r3
   1e82e:	9307      	strle	r3, [sp, #28]
   1e830:	e7be      	b.n	1e7b0 <_strtod_l+0x150>
   1e832:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e834:	195a      	adds	r2, r3, r5
   1e836:	9217      	str	r2, [sp, #92]	; 0x5c
   1e838:	5d5a      	ldrb	r2, [r3, r5]
   1e83a:	2f00      	cmp	r7, #0
   1e83c:	d036      	beq.n	1e8ac <_strtod_l+0x24c>
   1e83e:	463d      	mov	r5, r7
   1e840:	9005      	str	r0, [sp, #20]
   1e842:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   1e846:	2b09      	cmp	r3, #9
   1e848:	d912      	bls.n	1e870 <_strtod_l+0x210>
   1e84a:	2301      	movs	r3, #1
   1e84c:	e7c1      	b.n	1e7d2 <_strtod_l+0x172>
   1e84e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e850:	3001      	adds	r0, #1
   1e852:	1c5a      	adds	r2, r3, #1
   1e854:	9217      	str	r2, [sp, #92]	; 0x5c
   1e856:	785a      	ldrb	r2, [r3, #1]
   1e858:	2a30      	cmp	r2, #48	; 0x30
   1e85a:	d0f8      	beq.n	1e84e <_strtod_l+0x1ee>
   1e85c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   1e860:	2b08      	cmp	r3, #8
   1e862:	f200 84ce 	bhi.w	1f202 <_strtod_l+0xba2>
   1e866:	9005      	str	r0, [sp, #20]
   1e868:	2000      	movs	r0, #0
   1e86a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e86c:	4605      	mov	r5, r0
   1e86e:	9308      	str	r3, [sp, #32]
   1e870:	3a30      	subs	r2, #48	; 0x30
   1e872:	f100 0301 	add.w	r3, r0, #1
   1e876:	d013      	beq.n	1e8a0 <_strtod_l+0x240>
   1e878:	9905      	ldr	r1, [sp, #20]
   1e87a:	eb00 0e05 	add.w	lr, r0, r5
   1e87e:	4419      	add	r1, r3
   1e880:	462b      	mov	r3, r5
   1e882:	9105      	str	r1, [sp, #20]
   1e884:	210a      	movs	r1, #10
   1e886:	4573      	cmp	r3, lr
   1e888:	d112      	bne.n	1e8b0 <_strtod_l+0x250>
   1e88a:	182b      	adds	r3, r5, r0
   1e88c:	3501      	adds	r5, #1
   1e88e:	2b08      	cmp	r3, #8
   1e890:	4405      	add	r5, r0
   1e892:	dc1c      	bgt.n	1e8ce <_strtod_l+0x26e>
   1e894:	9907      	ldr	r1, [sp, #28]
   1e896:	230a      	movs	r3, #10
   1e898:	fb03 2301 	mla	r3, r3, r1, r2
   1e89c:	9307      	str	r3, [sp, #28]
   1e89e:	2300      	movs	r3, #0
   1e8a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1e8a2:	4618      	mov	r0, r3
   1e8a4:	1c51      	adds	r1, r2, #1
   1e8a6:	9117      	str	r1, [sp, #92]	; 0x5c
   1e8a8:	7852      	ldrb	r2, [r2, #1]
   1e8aa:	e7ca      	b.n	1e842 <_strtod_l+0x1e2>
   1e8ac:	4638      	mov	r0, r7
   1e8ae:	e7d3      	b.n	1e858 <_strtod_l+0x1f8>
   1e8b0:	2b08      	cmp	r3, #8
   1e8b2:	dc04      	bgt.n	1e8be <_strtod_l+0x25e>
   1e8b4:	9e07      	ldr	r6, [sp, #28]
   1e8b6:	434e      	muls	r6, r1
   1e8b8:	9607      	str	r6, [sp, #28]
   1e8ba:	3301      	adds	r3, #1
   1e8bc:	e7e3      	b.n	1e886 <_strtod_l+0x226>
   1e8be:	f103 0c01 	add.w	ip, r3, #1
   1e8c2:	f1bc 0f10 	cmp.w	ip, #16
   1e8c6:	bfd8      	it	le
   1e8c8:	fb01 f909 	mulle.w	r9, r1, r9
   1e8cc:	e7f5      	b.n	1e8ba <_strtod_l+0x25a>
   1e8ce:	2d10      	cmp	r5, #16
   1e8d0:	bfdc      	itt	le
   1e8d2:	230a      	movle	r3, #10
   1e8d4:	fb03 2909 	mlale	r9, r3, r9, r2
   1e8d8:	e7e1      	b.n	1e89e <_strtod_l+0x23e>
   1e8da:	2300      	movs	r3, #0
   1e8dc:	9305      	str	r3, [sp, #20]
   1e8de:	2301      	movs	r3, #1
   1e8e0:	e77c      	b.n	1e7dc <_strtod_l+0x17c>
   1e8e2:	f04f 0c00 	mov.w	ip, #0
   1e8e6:	f108 0202 	add.w	r2, r8, #2
   1e8ea:	9217      	str	r2, [sp, #92]	; 0x5c
   1e8ec:	f898 2002 	ldrb.w	r2, [r8, #2]
   1e8f0:	e785      	b.n	1e7fe <_strtod_l+0x19e>
   1e8f2:	f04f 0c01 	mov.w	ip, #1
   1e8f6:	e7f6      	b.n	1e8e6 <_strtod_l+0x286>
   1e8f8:	0004348c 	.word	0x0004348c
   1e8fc:	00043404 	.word	0x00043404
   1e900:	7ff00000 	.word	0x7ff00000
   1e904:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1e906:	1c51      	adds	r1, r2, #1
   1e908:	9117      	str	r1, [sp, #92]	; 0x5c
   1e90a:	7852      	ldrb	r2, [r2, #1]
   1e90c:	2a30      	cmp	r2, #48	; 0x30
   1e90e:	d0f9      	beq.n	1e904 <_strtod_l+0x2a4>
   1e910:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   1e914:	2908      	cmp	r1, #8
   1e916:	f63f af79 	bhi.w	1e80c <_strtod_l+0x1ac>
   1e91a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   1e91e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1e920:	9206      	str	r2, [sp, #24]
   1e922:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1e924:	1c51      	adds	r1, r2, #1
   1e926:	9117      	str	r1, [sp, #92]	; 0x5c
   1e928:	7852      	ldrb	r2, [r2, #1]
   1e92a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   1e92e:	2e09      	cmp	r6, #9
   1e930:	d937      	bls.n	1e9a2 <_strtod_l+0x342>
   1e932:	9e06      	ldr	r6, [sp, #24]
   1e934:	1b89      	subs	r1, r1, r6
   1e936:	f644 661f 	movw	r6, #19999	; 0x4e1f
   1e93a:	2908      	cmp	r1, #8
   1e93c:	dc02      	bgt.n	1e944 <_strtod_l+0x2e4>
   1e93e:	4576      	cmp	r6, lr
   1e940:	bfa8      	it	ge
   1e942:	4676      	movge	r6, lr
   1e944:	f1bc 0f00 	cmp.w	ip, #0
   1e948:	d000      	beq.n	1e94c <_strtod_l+0x2ec>
   1e94a:	4276      	negs	r6, r6
   1e94c:	2d00      	cmp	r5, #0
   1e94e:	d14d      	bne.n	1e9ec <_strtod_l+0x38c>
   1e950:	9904      	ldr	r1, [sp, #16]
   1e952:	4301      	orrs	r1, r0
   1e954:	f47f aec8 	bne.w	1e6e8 <_strtod_l+0x88>
   1e958:	2b00      	cmp	r3, #0
   1e95a:	f47f aee1 	bne.w	1e720 <_strtod_l+0xc0>
   1e95e:	2a69      	cmp	r2, #105	; 0x69
   1e960:	d027      	beq.n	1e9b2 <_strtod_l+0x352>
   1e962:	dc24      	bgt.n	1e9ae <_strtod_l+0x34e>
   1e964:	2a49      	cmp	r2, #73	; 0x49
   1e966:	d024      	beq.n	1e9b2 <_strtod_l+0x352>
   1e968:	2a4e      	cmp	r2, #78	; 0x4e
   1e96a:	f47f aed9 	bne.w	1e720 <_strtod_l+0xc0>
   1e96e:	499f      	ldr	r1, [pc, #636]	; (1ebec <_strtod_l+0x58c>)
   1e970:	a817      	add	r0, sp, #92	; 0x5c
   1e972:	f023 f922 	bl	41bba <__match>
   1e976:	2800      	cmp	r0, #0
   1e978:	f43f aed2 	beq.w	1e720 <_strtod_l+0xc0>
   1e97c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e97e:	781b      	ldrb	r3, [r3, #0]
   1e980:	2b28      	cmp	r3, #40	; 0x28
   1e982:	d12d      	bne.n	1e9e0 <_strtod_l+0x380>
   1e984:	aa1a      	add	r2, sp, #104	; 0x68
   1e986:	499a      	ldr	r1, [pc, #616]	; (1ebf0 <_strtod_l+0x590>)
   1e988:	a817      	add	r0, sp, #92	; 0x5c
   1e98a:	f023 f92a 	bl	41be2 <__hexnan>
   1e98e:	2805      	cmp	r0, #5
   1e990:	d126      	bne.n	1e9e0 <_strtod_l+0x380>
   1e992:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1e994:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   1e998:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1e99c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1e9a0:	e6a2      	b.n	1e6e8 <_strtod_l+0x88>
   1e9a2:	210a      	movs	r1, #10
   1e9a4:	fb01 2e0e 	mla	lr, r1, lr, r2
   1e9a8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   1e9ac:	e7b9      	b.n	1e922 <_strtod_l+0x2c2>
   1e9ae:	2a6e      	cmp	r2, #110	; 0x6e
   1e9b0:	e7db      	b.n	1e96a <_strtod_l+0x30a>
   1e9b2:	4990      	ldr	r1, [pc, #576]	; (1ebf4 <_strtod_l+0x594>)
   1e9b4:	a817      	add	r0, sp, #92	; 0x5c
   1e9b6:	f023 f900 	bl	41bba <__match>
   1e9ba:	2800      	cmp	r0, #0
   1e9bc:	f43f aeb0 	beq.w	1e720 <_strtod_l+0xc0>
   1e9c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e9c2:	a817      	add	r0, sp, #92	; 0x5c
   1e9c4:	498c      	ldr	r1, [pc, #560]	; (1ebf8 <_strtod_l+0x598>)
   1e9c6:	3b01      	subs	r3, #1
   1e9c8:	9317      	str	r3, [sp, #92]	; 0x5c
   1e9ca:	f023 f8f6 	bl	41bba <__match>
   1e9ce:	b910      	cbnz	r0, 1e9d6 <_strtod_l+0x376>
   1e9d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e9d2:	3301      	adds	r3, #1
   1e9d4:	9317      	str	r3, [sp, #92]	; 0x5c
   1e9d6:	f8df b230 	ldr.w	fp, [pc, #560]	; 1ec08 <_strtod_l+0x5a8>
   1e9da:	f04f 0a00 	mov.w	sl, #0
   1e9de:	e683      	b.n	1e6e8 <_strtod_l+0x88>
   1e9e0:	4886      	ldr	r0, [pc, #536]	; (1ebfc <_strtod_l+0x59c>)
   1e9e2:	f01d fd95 	bl	3c510 <nan>
   1e9e6:	4682      	mov	sl, r0
   1e9e8:	468b      	mov	fp, r1
   1e9ea:	e67d      	b.n	1e6e8 <_strtod_l+0x88>
   1e9ec:	9b05      	ldr	r3, [sp, #20]
   1e9ee:	2f00      	cmp	r7, #0
   1e9f0:	bf08      	it	eq
   1e9f2:	462f      	moveq	r7, r5
   1e9f4:	2d10      	cmp	r5, #16
   1e9f6:	9807      	ldr	r0, [sp, #28]
   1e9f8:	eba6 0303 	sub.w	r3, r6, r3
   1e9fc:	46a8      	mov	r8, r5
   1e9fe:	bfa8      	it	ge
   1ea00:	f04f 0810 	movge.w	r8, #16
   1ea04:	9306      	str	r3, [sp, #24]
   1ea06:	f7fd fe5d 	bl	1c6c4 <__aeabi_ui2d>
   1ea0a:	2d09      	cmp	r5, #9
   1ea0c:	4682      	mov	sl, r0
   1ea0e:	468b      	mov	fp, r1
   1ea10:	dd13      	ble.n	1ea3a <_strtod_l+0x3da>
   1ea12:	4b7b      	ldr	r3, [pc, #492]	; (1ec00 <_strtod_l+0x5a0>)
   1ea14:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   1ea18:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1ea1c:	f7fd fecc 	bl	1c7b8 <__aeabi_dmul>
   1ea20:	4682      	mov	sl, r0
   1ea22:	468b      	mov	fp, r1
   1ea24:	4648      	mov	r0, r9
   1ea26:	f7fd fe4d 	bl	1c6c4 <__aeabi_ui2d>
   1ea2a:	4602      	mov	r2, r0
   1ea2c:	460b      	mov	r3, r1
   1ea2e:	4650      	mov	r0, sl
   1ea30:	4659      	mov	r1, fp
   1ea32:	f7fd fd0b 	bl	1c44c <__adddf3>
   1ea36:	4682      	mov	sl, r0
   1ea38:	468b      	mov	fp, r1
   1ea3a:	2d0f      	cmp	r5, #15
   1ea3c:	dc36      	bgt.n	1eaac <_strtod_l+0x44c>
   1ea3e:	9b06      	ldr	r3, [sp, #24]
   1ea40:	2b00      	cmp	r3, #0
   1ea42:	f43f ae51 	beq.w	1e6e8 <_strtod_l+0x88>
   1ea46:	dd22      	ble.n	1ea8e <_strtod_l+0x42e>
   1ea48:	2b16      	cmp	r3, #22
   1ea4a:	dc09      	bgt.n	1ea60 <_strtod_l+0x400>
   1ea4c:	496c      	ldr	r1, [pc, #432]	; (1ec00 <_strtod_l+0x5a0>)
   1ea4e:	4652      	mov	r2, sl
   1ea50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1ea54:	465b      	mov	r3, fp
   1ea56:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ea5a:	f7fd fead 	bl	1c7b8 <__aeabi_dmul>
   1ea5e:	e7c2      	b.n	1e9e6 <_strtod_l+0x386>
   1ea60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   1ea64:	9a06      	ldr	r2, [sp, #24]
   1ea66:	4293      	cmp	r3, r2
   1ea68:	db20      	blt.n	1eaac <_strtod_l+0x44c>
   1ea6a:	f1c5 050f 	rsb	r5, r5, #15
   1ea6e:	4c64      	ldr	r4, [pc, #400]	; (1ec00 <_strtod_l+0x5a0>)
   1ea70:	4652      	mov	r2, sl
   1ea72:	465b      	mov	r3, fp
   1ea74:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   1ea78:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ea7c:	f7fd fe9c 	bl	1c7b8 <__aeabi_dmul>
   1ea80:	9b06      	ldr	r3, [sp, #24]
   1ea82:	1b5d      	subs	r5, r3, r5
   1ea84:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1ea88:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ea8c:	e7e5      	b.n	1ea5a <_strtod_l+0x3fa>
   1ea8e:	9b06      	ldr	r3, [sp, #24]
   1ea90:	3316      	adds	r3, #22
   1ea92:	db0b      	blt.n	1eaac <_strtod_l+0x44c>
   1ea94:	9b05      	ldr	r3, [sp, #20]
   1ea96:	4650      	mov	r0, sl
   1ea98:	4659      	mov	r1, fp
   1ea9a:	1b9e      	subs	r6, r3, r6
   1ea9c:	4b58      	ldr	r3, [pc, #352]	; (1ec00 <_strtod_l+0x5a0>)
   1ea9e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   1eaa2:	e9d6 2300 	ldrd	r2, r3, [r6]
   1eaa6:	f7fd ffb1 	bl	1ca0c <__aeabi_ddiv>
   1eaaa:	e79c      	b.n	1e9e6 <_strtod_l+0x386>
   1eaac:	eba5 0308 	sub.w	r3, r5, r8
   1eab0:	9a06      	ldr	r2, [sp, #24]
   1eab2:	eb03 0802 	add.w	r8, r3, r2
   1eab6:	f1b8 0f00 	cmp.w	r8, #0
   1eaba:	dd74      	ble.n	1eba6 <_strtod_l+0x546>
   1eabc:	f018 030f 	ands.w	r3, r8, #15
   1eac0:	d00a      	beq.n	1ead8 <_strtod_l+0x478>
   1eac2:	494f      	ldr	r1, [pc, #316]	; (1ec00 <_strtod_l+0x5a0>)
   1eac4:	4652      	mov	r2, sl
   1eac6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1eaca:	465b      	mov	r3, fp
   1eacc:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ead0:	f7fd fe72 	bl	1c7b8 <__aeabi_dmul>
   1ead4:	4682      	mov	sl, r0
   1ead6:	468b      	mov	fp, r1
   1ead8:	f038 080f 	bics.w	r8, r8, #15
   1eadc:	d04f      	beq.n	1eb7e <_strtod_l+0x51e>
   1eade:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   1eae2:	dd22      	ble.n	1eb2a <_strtod_l+0x4ca>
   1eae4:	2500      	movs	r5, #0
   1eae6:	46a9      	mov	r9, r5
   1eae8:	9507      	str	r5, [sp, #28]
   1eaea:	9505      	str	r5, [sp, #20]
   1eaec:	2322      	movs	r3, #34	; 0x22
   1eaee:	f8df b118 	ldr.w	fp, [pc, #280]	; 1ec08 <_strtod_l+0x5a8>
   1eaf2:	f04f 0a00 	mov.w	sl, #0
   1eaf6:	6023      	str	r3, [r4, #0]
   1eaf8:	9b07      	ldr	r3, [sp, #28]
   1eafa:	2b00      	cmp	r3, #0
   1eafc:	f43f adf4 	beq.w	1e6e8 <_strtod_l+0x88>
   1eb00:	9918      	ldr	r1, [sp, #96]	; 0x60
   1eb02:	4620      	mov	r0, r4
   1eb04:	f01c fd88 	bl	3b618 <_Bfree>
   1eb08:	9905      	ldr	r1, [sp, #20]
   1eb0a:	4620      	mov	r0, r4
   1eb0c:	f01c fd84 	bl	3b618 <_Bfree>
   1eb10:	4649      	mov	r1, r9
   1eb12:	4620      	mov	r0, r4
   1eb14:	f01c fd80 	bl	3b618 <_Bfree>
   1eb18:	9907      	ldr	r1, [sp, #28]
   1eb1a:	4620      	mov	r0, r4
   1eb1c:	f01c fd7c 	bl	3b618 <_Bfree>
   1eb20:	4629      	mov	r1, r5
   1eb22:	4620      	mov	r0, r4
   1eb24:	f01c fd78 	bl	3b618 <_Bfree>
   1eb28:	e5de      	b.n	1e6e8 <_strtod_l+0x88>
   1eb2a:	4b36      	ldr	r3, [pc, #216]	; (1ec04 <_strtod_l+0x5a4>)
   1eb2c:	ea4f 1828 	mov.w	r8, r8, asr #4
   1eb30:	4650      	mov	r0, sl
   1eb32:	4659      	mov	r1, fp
   1eb34:	9304      	str	r3, [sp, #16]
   1eb36:	2300      	movs	r3, #0
   1eb38:	4699      	mov	r9, r3
   1eb3a:	f1b8 0f01 	cmp.w	r8, #1
   1eb3e:	dc21      	bgt.n	1eb84 <_strtod_l+0x524>
   1eb40:	b10b      	cbz	r3, 1eb46 <_strtod_l+0x4e6>
   1eb42:	4682      	mov	sl, r0
   1eb44:	468b      	mov	fp, r1
   1eb46:	4b2f      	ldr	r3, [pc, #188]	; (1ec04 <_strtod_l+0x5a4>)
   1eb48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1eb4c:	4652      	mov	r2, sl
   1eb4e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   1eb52:	465b      	mov	r3, fp
   1eb54:	e9d9 0100 	ldrd	r0, r1, [r9]
   1eb58:	f7fd fe2e 	bl	1c7b8 <__aeabi_dmul>
   1eb5c:	4b2a      	ldr	r3, [pc, #168]	; (1ec08 <_strtod_l+0x5a8>)
   1eb5e:	460a      	mov	r2, r1
   1eb60:	4682      	mov	sl, r0
   1eb62:	400b      	ands	r3, r1
   1eb64:	4929      	ldr	r1, [pc, #164]	; (1ec0c <_strtod_l+0x5ac>)
   1eb66:	428b      	cmp	r3, r1
   1eb68:	d8bc      	bhi.n	1eae4 <_strtod_l+0x484>
   1eb6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1eb6e:	428b      	cmp	r3, r1
   1eb70:	bf86      	itte	hi
   1eb72:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 1ec10 <_strtod_l+0x5b0>
   1eb76:	f04f 3aff 	movhi.w	sl, #4294967295
   1eb7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1eb7e:	2300      	movs	r3, #0
   1eb80:	9304      	str	r3, [sp, #16]
   1eb82:	e084      	b.n	1ec8e <_strtod_l+0x62e>
   1eb84:	f018 0f01 	tst.w	r8, #1
   1eb88:	d005      	beq.n	1eb96 <_strtod_l+0x536>
   1eb8a:	9b04      	ldr	r3, [sp, #16]
   1eb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eb90:	f7fd fe12 	bl	1c7b8 <__aeabi_dmul>
   1eb94:	2301      	movs	r3, #1
   1eb96:	9a04      	ldr	r2, [sp, #16]
   1eb98:	f109 0901 	add.w	r9, r9, #1
   1eb9c:	ea4f 0868 	mov.w	r8, r8, asr #1
   1eba0:	3208      	adds	r2, #8
   1eba2:	9204      	str	r2, [sp, #16]
   1eba4:	e7c9      	b.n	1eb3a <_strtod_l+0x4da>
   1eba6:	d0ea      	beq.n	1eb7e <_strtod_l+0x51e>
   1eba8:	f1c8 0800 	rsb	r8, r8, #0
   1ebac:	f018 020f 	ands.w	r2, r8, #15
   1ebb0:	d00a      	beq.n	1ebc8 <_strtod_l+0x568>
   1ebb2:	4b13      	ldr	r3, [pc, #76]	; (1ec00 <_strtod_l+0x5a0>)
   1ebb4:	4650      	mov	r0, sl
   1ebb6:	4659      	mov	r1, fp
   1ebb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ebbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ebc0:	f7fd ff24 	bl	1ca0c <__aeabi_ddiv>
   1ebc4:	4682      	mov	sl, r0
   1ebc6:	468b      	mov	fp, r1
   1ebc8:	ea5f 1828 	movs.w	r8, r8, asr #4
   1ebcc:	d0d7      	beq.n	1eb7e <_strtod_l+0x51e>
   1ebce:	f1b8 0f1f 	cmp.w	r8, #31
   1ebd2:	dd1f      	ble.n	1ec14 <_strtod_l+0x5b4>
   1ebd4:	2500      	movs	r5, #0
   1ebd6:	46a9      	mov	r9, r5
   1ebd8:	9507      	str	r5, [sp, #28]
   1ebda:	9505      	str	r5, [sp, #20]
   1ebdc:	2322      	movs	r3, #34	; 0x22
   1ebde:	f04f 0a00 	mov.w	sl, #0
   1ebe2:	f04f 0b00 	mov.w	fp, #0
   1ebe6:	6023      	str	r3, [r4, #0]
   1ebe8:	e786      	b.n	1eaf8 <_strtod_l+0x498>
   1ebea:	bf00      	nop
   1ebec:	0004be61 	.word	0x0004be61
   1ebf0:	00043418 	.word	0x00043418
   1ebf4:	0004be59 	.word	0x0004be59
   1ebf8:	0004be89 	.word	0x0004be89
   1ebfc:	00045228 	.word	0x00045228
   1ec00:	000428c8 	.word	0x000428c8
   1ec04:	000428a0 	.word	0x000428a0
   1ec08:	7ff00000 	.word	0x7ff00000
   1ec0c:	7ca00000 	.word	0x7ca00000
   1ec10:	7fefffff 	.word	0x7fefffff
   1ec14:	f018 0310 	ands.w	r3, r8, #16
   1ec18:	4650      	mov	r0, sl
   1ec1a:	4659      	mov	r1, fp
   1ec1c:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 1efc8 <_strtod_l+0x968>
   1ec20:	bf18      	it	ne
   1ec22:	236a      	movne	r3, #106	; 0x6a
   1ec24:	9304      	str	r3, [sp, #16]
   1ec26:	2300      	movs	r3, #0
   1ec28:	f018 0f01 	tst.w	r8, #1
   1ec2c:	d004      	beq.n	1ec38 <_strtod_l+0x5d8>
   1ec2e:	e9d9 2300 	ldrd	r2, r3, [r9]
   1ec32:	f7fd fdc1 	bl	1c7b8 <__aeabi_dmul>
   1ec36:	2301      	movs	r3, #1
   1ec38:	ea5f 0868 	movs.w	r8, r8, asr #1
   1ec3c:	f109 0908 	add.w	r9, r9, #8
   1ec40:	d1f2      	bne.n	1ec28 <_strtod_l+0x5c8>
   1ec42:	b10b      	cbz	r3, 1ec48 <_strtod_l+0x5e8>
   1ec44:	4682      	mov	sl, r0
   1ec46:	468b      	mov	fp, r1
   1ec48:	9b04      	ldr	r3, [sp, #16]
   1ec4a:	b1c3      	cbz	r3, 1ec7e <_strtod_l+0x61e>
   1ec4c:	f3cb 520a 	ubfx	r2, fp, #20, #11
   1ec50:	4659      	mov	r1, fp
   1ec52:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1ec56:	2b00      	cmp	r3, #0
   1ec58:	dd11      	ble.n	1ec7e <_strtod_l+0x61e>
   1ec5a:	2b1f      	cmp	r3, #31
   1ec5c:	f340 8120 	ble.w	1eea0 <_strtod_l+0x840>
   1ec60:	2b34      	cmp	r3, #52	; 0x34
   1ec62:	f04f 0a00 	mov.w	sl, #0
   1ec66:	bfdb      	ittet	le
   1ec68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   1ec6c:	f04f 33ff 	movle.w	r3, #4294967295
   1ec70:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1ec74:	fa03 f202 	lslle.w	r2, r3, r2
   1ec78:	bfd8      	it	le
   1ec7a:	ea02 0b01 	andle.w	fp, r2, r1
   1ec7e:	2200      	movs	r2, #0
   1ec80:	2300      	movs	r3, #0
   1ec82:	4650      	mov	r0, sl
   1ec84:	4659      	mov	r1, fp
   1ec86:	f7fd ffff 	bl	1cc88 <__aeabi_dcmpeq>
   1ec8a:	2800      	cmp	r0, #0
   1ec8c:	d1a2      	bne.n	1ebd4 <_strtod_l+0x574>
   1ec8e:	9b07      	ldr	r3, [sp, #28]
   1ec90:	463a      	mov	r2, r7
   1ec92:	9908      	ldr	r1, [sp, #32]
   1ec94:	4620      	mov	r0, r4
   1ec96:	9300      	str	r3, [sp, #0]
   1ec98:	462b      	mov	r3, r5
   1ec9a:	f01c fd27 	bl	3b6ec <__s2b>
   1ec9e:	9007      	str	r0, [sp, #28]
   1eca0:	2800      	cmp	r0, #0
   1eca2:	f43f af1f 	beq.w	1eae4 <_strtod_l+0x484>
   1eca6:	9b05      	ldr	r3, [sp, #20]
   1eca8:	2500      	movs	r5, #0
   1ecaa:	1b9e      	subs	r6, r3, r6
   1ecac:	9b06      	ldr	r3, [sp, #24]
   1ecae:	46a9      	mov	r9, r5
   1ecb0:	2b00      	cmp	r3, #0
   1ecb2:	bfb4      	ite	lt
   1ecb4:	4633      	movlt	r3, r6
   1ecb6:	2300      	movge	r3, #0
   1ecb8:	930c      	str	r3, [sp, #48]	; 0x30
   1ecba:	9b06      	ldr	r3, [sp, #24]
   1ecbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ecc0:	9312      	str	r3, [sp, #72]	; 0x48
   1ecc2:	9b07      	ldr	r3, [sp, #28]
   1ecc4:	4620      	mov	r0, r4
   1ecc6:	6859      	ldr	r1, [r3, #4]
   1ecc8:	f01c fc66 	bl	3b598 <_Balloc>
   1eccc:	9005      	str	r0, [sp, #20]
   1ecce:	2800      	cmp	r0, #0
   1ecd0:	f43f af0c 	beq.w	1eaec <_strtod_l+0x48c>
   1ecd4:	9b07      	ldr	r3, [sp, #28]
   1ecd6:	300c      	adds	r0, #12
   1ecd8:	691a      	ldr	r2, [r3, #16]
   1ecda:	f103 010c 	add.w	r1, r3, #12
   1ecde:	3202      	adds	r2, #2
   1ece0:	0092      	lsls	r2, r2, #2
   1ece2:	f022 fb87 	bl	413f4 <memcpy>
   1ece6:	ab1a      	add	r3, sp, #104	; 0x68
   1ece8:	4652      	mov	r2, sl
   1ecea:	4620      	mov	r0, r4
   1ecec:	9301      	str	r3, [sp, #4]
   1ecee:	ab19      	add	r3, sp, #100	; 0x64
   1ecf0:	9300      	str	r3, [sp, #0]
   1ecf2:	465b      	mov	r3, fp
   1ecf4:	f01c ffd2 	bl	3bc9c <__d2b>
   1ecf8:	9018      	str	r0, [sp, #96]	; 0x60
   1ecfa:	ec4b ab18 	vmov	d8, sl, fp
   1ecfe:	2800      	cmp	r0, #0
   1ed00:	f43f aef4 	beq.w	1eaec <_strtod_l+0x48c>
   1ed04:	2101      	movs	r1, #1
   1ed06:	4620      	mov	r0, r4
   1ed08:	f01c fd3a 	bl	3b780 <__i2b>
   1ed0c:	4681      	mov	r9, r0
   1ed0e:	2800      	cmp	r0, #0
   1ed10:	f43f aeec 	beq.w	1eaec <_strtod_l+0x48c>
   1ed14:	9e19      	ldr	r6, [sp, #100]	; 0x64
   1ed16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1ed18:	2e00      	cmp	r6, #0
   1ed1a:	bfa9      	itett	ge
   1ed1c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
   1ed1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   1ed20:	eb06 0803 	addge.w	r8, r6, r3
   1ed24:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   1ed26:	bfb8      	it	lt
   1ed28:	1b9f      	sublt	r7, r3, r6
   1ed2a:	9b04      	ldr	r3, [sp, #16]
   1ed2c:	bfb8      	it	lt
   1ed2e:	f8dd 8030 	ldrlt.w	r8, [sp, #48]	; 0x30
   1ed32:	1af6      	subs	r6, r6, r3
   1ed34:	4b9f      	ldr	r3, [pc, #636]	; (1efb4 <_strtod_l+0x954>)
   1ed36:	4416      	add	r6, r2
   1ed38:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1ed3c:	3e01      	subs	r6, #1
   1ed3e:	429e      	cmp	r6, r3
   1ed40:	f280 80c1 	bge.w	1eec6 <_strtod_l+0x866>
   1ed44:	1b9b      	subs	r3, r3, r6
   1ed46:	2101      	movs	r1, #1
   1ed48:	2b1f      	cmp	r3, #31
   1ed4a:	eba2 0203 	sub.w	r2, r2, r3
   1ed4e:	f300 80ae 	bgt.w	1eeae <_strtod_l+0x84e>
   1ed52:	fa01 f303 	lsl.w	r3, r1, r3
   1ed56:	930d      	str	r3, [sp, #52]	; 0x34
   1ed58:	2300      	movs	r3, #0
   1ed5a:	9308      	str	r3, [sp, #32]
   1ed5c:	eb08 0602 	add.w	r6, r8, r2
   1ed60:	9b04      	ldr	r3, [sp, #16]
   1ed62:	4417      	add	r7, r2
   1ed64:	45b0      	cmp	r8, r6
   1ed66:	441f      	add	r7, r3
   1ed68:	4643      	mov	r3, r8
   1ed6a:	bfa8      	it	ge
   1ed6c:	4633      	movge	r3, r6
   1ed6e:	42bb      	cmp	r3, r7
   1ed70:	bfa8      	it	ge
   1ed72:	463b      	movge	r3, r7
   1ed74:	2b00      	cmp	r3, #0
   1ed76:	bfc2      	ittt	gt
   1ed78:	1af6      	subgt	r6, r6, r3
   1ed7a:	1aff      	subgt	r7, r7, r3
   1ed7c:	eba8 0803 	subgt.w	r8, r8, r3
   1ed80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ed82:	2b00      	cmp	r3, #0
   1ed84:	dd17      	ble.n	1edb6 <_strtod_l+0x756>
   1ed86:	4649      	mov	r1, r9
   1ed88:	461a      	mov	r2, r3
   1ed8a:	4620      	mov	r0, r4
   1ed8c:	f01c fdb6 	bl	3b8fc <__pow5mult>
   1ed90:	4681      	mov	r9, r0
   1ed92:	2800      	cmp	r0, #0
   1ed94:	f43f aeaa 	beq.w	1eaec <_strtod_l+0x48c>
   1ed98:	4601      	mov	r1, r0
   1ed9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1ed9c:	4620      	mov	r0, r4
   1ed9e:	f01c fd05 	bl	3b7ac <__multiply>
   1eda2:	900b      	str	r0, [sp, #44]	; 0x2c
   1eda4:	2800      	cmp	r0, #0
   1eda6:	f43f aea1 	beq.w	1eaec <_strtod_l+0x48c>
   1edaa:	9918      	ldr	r1, [sp, #96]	; 0x60
   1edac:	4620      	mov	r0, r4
   1edae:	f01c fc33 	bl	3b618 <_Bfree>
   1edb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1edb4:	9318      	str	r3, [sp, #96]	; 0x60
   1edb6:	2e00      	cmp	r6, #0
   1edb8:	f300 808a 	bgt.w	1eed0 <_strtod_l+0x870>
   1edbc:	9b06      	ldr	r3, [sp, #24]
   1edbe:	2b00      	cmp	r3, #0
   1edc0:	dd08      	ble.n	1edd4 <_strtod_l+0x774>
   1edc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1edc4:	4620      	mov	r0, r4
   1edc6:	9905      	ldr	r1, [sp, #20]
   1edc8:	f01c fd98 	bl	3b8fc <__pow5mult>
   1edcc:	9005      	str	r0, [sp, #20]
   1edce:	2800      	cmp	r0, #0
   1edd0:	f43f ae8c 	beq.w	1eaec <_strtod_l+0x48c>
   1edd4:	2f00      	cmp	r7, #0
   1edd6:	dd08      	ble.n	1edea <_strtod_l+0x78a>
   1edd8:	463a      	mov	r2, r7
   1edda:	9905      	ldr	r1, [sp, #20]
   1eddc:	4620      	mov	r0, r4
   1edde:	f01c fde7 	bl	3b9b0 <__lshift>
   1ede2:	9005      	str	r0, [sp, #20]
   1ede4:	2800      	cmp	r0, #0
   1ede6:	f43f ae81 	beq.w	1eaec <_strtod_l+0x48c>
   1edea:	f1b8 0f00 	cmp.w	r8, #0
   1edee:	dd08      	ble.n	1ee02 <_strtod_l+0x7a2>
   1edf0:	4649      	mov	r1, r9
   1edf2:	4642      	mov	r2, r8
   1edf4:	4620      	mov	r0, r4
   1edf6:	f01c fddb 	bl	3b9b0 <__lshift>
   1edfa:	4681      	mov	r9, r0
   1edfc:	2800      	cmp	r0, #0
   1edfe:	f43f ae75 	beq.w	1eaec <_strtod_l+0x48c>
   1ee02:	9a05      	ldr	r2, [sp, #20]
   1ee04:	4620      	mov	r0, r4
   1ee06:	9918      	ldr	r1, [sp, #96]	; 0x60
   1ee08:	f01c fe42 	bl	3ba90 <__mdiff>
   1ee0c:	4605      	mov	r5, r0
   1ee0e:	2800      	cmp	r0, #0
   1ee10:	f43f ae6c 	beq.w	1eaec <_strtod_l+0x48c>
   1ee14:	68c3      	ldr	r3, [r0, #12]
   1ee16:	4649      	mov	r1, r9
   1ee18:	930b      	str	r3, [sp, #44]	; 0x2c
   1ee1a:	2300      	movs	r3, #0
   1ee1c:	60c3      	str	r3, [r0, #12]
   1ee1e:	f023 f81c 	bl	41e5a <__mcmp>
   1ee22:	2800      	cmp	r0, #0
   1ee24:	da5e      	bge.n	1eee4 <_strtod_l+0x884>
   1ee26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ee28:	ea53 030a 	orrs.w	r3, r3, sl
   1ee2c:	f040 8082 	bne.w	1ef34 <_strtod_l+0x8d4>
   1ee30:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1ee34:	2b00      	cmp	r3, #0
   1ee36:	d17d      	bne.n	1ef34 <_strtod_l+0x8d4>
   1ee38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1ee3c:	0d1b      	lsrs	r3, r3, #20
   1ee3e:	051b      	lsls	r3, r3, #20
   1ee40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1ee44:	d976      	bls.n	1ef34 <_strtod_l+0x8d4>
   1ee46:	696b      	ldr	r3, [r5, #20]
   1ee48:	b913      	cbnz	r3, 1ee50 <_strtod_l+0x7f0>
   1ee4a:	692b      	ldr	r3, [r5, #16]
   1ee4c:	2b01      	cmp	r3, #1
   1ee4e:	dd71      	ble.n	1ef34 <_strtod_l+0x8d4>
   1ee50:	4629      	mov	r1, r5
   1ee52:	2201      	movs	r2, #1
   1ee54:	4620      	mov	r0, r4
   1ee56:	f01c fdab 	bl	3b9b0 <__lshift>
   1ee5a:	4649      	mov	r1, r9
   1ee5c:	4605      	mov	r5, r0
   1ee5e:	f022 fffc 	bl	41e5a <__mcmp>
   1ee62:	2800      	cmp	r0, #0
   1ee64:	dd66      	ble.n	1ef34 <_strtod_l+0x8d4>
   1ee66:	9904      	ldr	r1, [sp, #16]
   1ee68:	465b      	mov	r3, fp
   1ee6a:	4a53      	ldr	r2, [pc, #332]	; (1efb8 <_strtod_l+0x958>)
   1ee6c:	2900      	cmp	r1, #0
   1ee6e:	f000 8082 	beq.w	1ef76 <_strtod_l+0x916>
   1ee72:	ea02 010b 	and.w	r1, r2, fp
   1ee76:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1ee7a:	dc7c      	bgt.n	1ef76 <_strtod_l+0x916>
   1ee7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1ee80:	f77f aeac 	ble.w	1ebdc <_strtod_l+0x57c>
   1ee84:	4b4d      	ldr	r3, [pc, #308]	; (1efbc <_strtod_l+0x95c>)
   1ee86:	4650      	mov	r0, sl
   1ee88:	4659      	mov	r1, fp
   1ee8a:	2200      	movs	r2, #0
   1ee8c:	f7fd fc94 	bl	1c7b8 <__aeabi_dmul>
   1ee90:	460b      	mov	r3, r1
   1ee92:	4682      	mov	sl, r0
   1ee94:	468b      	mov	fp, r1
   1ee96:	4303      	orrs	r3, r0
   1ee98:	bf04      	itt	eq
   1ee9a:	2322      	moveq	r3, #34	; 0x22
   1ee9c:	6023      	streq	r3, [r4, #0]
   1ee9e:	e62f      	b.n	1eb00 <_strtod_l+0x4a0>
   1eea0:	f04f 32ff 	mov.w	r2, #4294967295
   1eea4:	fa02 f303 	lsl.w	r3, r2, r3
   1eea8:	ea03 0a0a 	and.w	sl, r3, sl
   1eeac:	e6e7      	b.n	1ec7e <_strtod_l+0x61e>
   1eeae:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
   1eeb2:	910d      	str	r1, [sp, #52]	; 0x34
   1eeb4:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
   1eeb8:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
   1eebc:	36e2      	adds	r6, #226	; 0xe2
   1eebe:	fa01 f306 	lsl.w	r3, r1, r6
   1eec2:	9308      	str	r3, [sp, #32]
   1eec4:	e74a      	b.n	1ed5c <_strtod_l+0x6fc>
   1eec6:	2300      	movs	r3, #0
   1eec8:	9308      	str	r3, [sp, #32]
   1eeca:	2301      	movs	r3, #1
   1eecc:	930d      	str	r3, [sp, #52]	; 0x34
   1eece:	e745      	b.n	1ed5c <_strtod_l+0x6fc>
   1eed0:	4632      	mov	r2, r6
   1eed2:	9918      	ldr	r1, [sp, #96]	; 0x60
   1eed4:	4620      	mov	r0, r4
   1eed6:	f01c fd6b 	bl	3b9b0 <__lshift>
   1eeda:	9018      	str	r0, [sp, #96]	; 0x60
   1eedc:	2800      	cmp	r0, #0
   1eede:	f47f af6d 	bne.w	1edbc <_strtod_l+0x75c>
   1eee2:	e603      	b.n	1eaec <_strtod_l+0x48c>
   1eee4:	46d8      	mov	r8, fp
   1eee6:	d171      	bne.n	1efcc <_strtod_l+0x96c>
   1eee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1eeea:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1eeee:	b352      	cbz	r2, 1ef46 <_strtod_l+0x8e6>
   1eef0:	4a33      	ldr	r2, [pc, #204]	; (1efc0 <_strtod_l+0x960>)
   1eef2:	4293      	cmp	r3, r2
   1eef4:	d12a      	bne.n	1ef4c <_strtod_l+0x8ec>
   1eef6:	9b04      	ldr	r3, [sp, #16]
   1eef8:	4651      	mov	r1, sl
   1eefa:	b1fb      	cbz	r3, 1ef3c <_strtod_l+0x8dc>
   1eefc:	4b2e      	ldr	r3, [pc, #184]	; (1efb8 <_strtod_l+0x958>)
   1eefe:	f04f 32ff 	mov.w	r2, #4294967295
   1ef02:	ea0b 0303 	and.w	r3, fp, r3
   1ef06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1ef0a:	d81a      	bhi.n	1ef42 <_strtod_l+0x8e2>
   1ef0c:	0d1b      	lsrs	r3, r3, #20
   1ef0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1ef12:	fa02 f303 	lsl.w	r3, r2, r3
   1ef16:	4299      	cmp	r1, r3
   1ef18:	d118      	bne.n	1ef4c <_strtod_l+0x8ec>
   1ef1a:	4b2a      	ldr	r3, [pc, #168]	; (1efc4 <_strtod_l+0x964>)
   1ef1c:	4598      	cmp	r8, r3
   1ef1e:	d102      	bne.n	1ef26 <_strtod_l+0x8c6>
   1ef20:	3101      	adds	r1, #1
   1ef22:	f43f ade3 	beq.w	1eaec <_strtod_l+0x48c>
   1ef26:	4b24      	ldr	r3, [pc, #144]	; (1efb8 <_strtod_l+0x958>)
   1ef28:	f04f 0a00 	mov.w	sl, #0
   1ef2c:	ea08 0303 	and.w	r3, r8, r3
   1ef30:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1ef34:	9b04      	ldr	r3, [sp, #16]
   1ef36:	2b00      	cmp	r3, #0
   1ef38:	d1a4      	bne.n	1ee84 <_strtod_l+0x824>
   1ef3a:	e5e1      	b.n	1eb00 <_strtod_l+0x4a0>
   1ef3c:	f04f 33ff 	mov.w	r3, #4294967295
   1ef40:	e7e9      	b.n	1ef16 <_strtod_l+0x8b6>
   1ef42:	4613      	mov	r3, r2
   1ef44:	e7e7      	b.n	1ef16 <_strtod_l+0x8b6>
   1ef46:	ea53 030a 	orrs.w	r3, r3, sl
   1ef4a:	d08c      	beq.n	1ee66 <_strtod_l+0x806>
   1ef4c:	9b08      	ldr	r3, [sp, #32]
   1ef4e:	b1e3      	cbz	r3, 1ef8a <_strtod_l+0x92a>
   1ef50:	ea13 0f08 	tst.w	r3, r8
   1ef54:	d0ee      	beq.n	1ef34 <_strtod_l+0x8d4>
   1ef56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ef58:	4650      	mov	r0, sl
   1ef5a:	9a04      	ldr	r2, [sp, #16]
   1ef5c:	4659      	mov	r1, fp
   1ef5e:	b1c3      	cbz	r3, 1ef92 <_strtod_l+0x932>
   1ef60:	f022 fc98 	bl	41894 <sulp>
   1ef64:	4602      	mov	r2, r0
   1ef66:	460b      	mov	r3, r1
   1ef68:	ec51 0b18 	vmov	r0, r1, d8
   1ef6c:	f7fd fa6e 	bl	1c44c <__adddf3>
   1ef70:	4682      	mov	sl, r0
   1ef72:	468b      	mov	fp, r1
   1ef74:	e7de      	b.n	1ef34 <_strtod_l+0x8d4>
   1ef76:	4013      	ands	r3, r2
   1ef78:	f04f 3aff 	mov.w	sl, #4294967295
   1ef7c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1ef80:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1ef84:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1ef88:	e7d4      	b.n	1ef34 <_strtod_l+0x8d4>
   1ef8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ef8c:	ea13 0f0a 	tst.w	r3, sl
   1ef90:	e7e0      	b.n	1ef54 <_strtod_l+0x8f4>
   1ef92:	f022 fc7f 	bl	41894 <sulp>
   1ef96:	4602      	mov	r2, r0
   1ef98:	460b      	mov	r3, r1
   1ef9a:	ec51 0b18 	vmov	r0, r1, d8
   1ef9e:	f7fd fa53 	bl	1c448 <__aeabi_dsub>
   1efa2:	2200      	movs	r2, #0
   1efa4:	2300      	movs	r3, #0
   1efa6:	4682      	mov	sl, r0
   1efa8:	468b      	mov	fp, r1
   1efaa:	f7fd fe6d 	bl	1cc88 <__aeabi_dcmpeq>
   1efae:	2800      	cmp	r0, #0
   1efb0:	d0c0      	beq.n	1ef34 <_strtod_l+0x8d4>
   1efb2:	e613      	b.n	1ebdc <_strtod_l+0x57c>
   1efb4:	fffffc02 	.word	0xfffffc02
   1efb8:	7ff00000 	.word	0x7ff00000
   1efbc:	39500000 	.word	0x39500000
   1efc0:	000fffff 	.word	0x000fffff
   1efc4:	7fefffff 	.word	0x7fefffff
   1efc8:	00042878 	.word	0x00042878
   1efcc:	4649      	mov	r1, r9
   1efce:	4628      	mov	r0, r5
   1efd0:	f022 ff5f 	bl	41e92 <__ratio>
   1efd4:	2200      	movs	r2, #0
   1efd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1efda:	4606      	mov	r6, r0
   1efdc:	460f      	mov	r7, r1
   1efde:	f7fd fe67 	bl	1ccb0 <__aeabi_dcmple>
   1efe2:	2800      	cmp	r0, #0
   1efe4:	d079      	beq.n	1f0da <_strtod_l+0xa7a>
   1efe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1efe8:	2b00      	cmp	r3, #0
   1efea:	d04b      	beq.n	1f084 <_strtod_l+0xa24>
   1efec:	2200      	movs	r2, #0
   1efee:	4b92      	ldr	r3, [pc, #584]	; (1f238 <_strtod_l+0xbd8>)
   1eff0:	2600      	movs	r6, #0
   1eff2:	4f91      	ldr	r7, [pc, #580]	; (1f238 <_strtod_l+0xbd8>)
   1eff4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1eff8:	4b90      	ldr	r3, [pc, #576]	; (1f23c <_strtod_l+0xbdc>)
   1effa:	ea08 0303 	and.w	r3, r8, r3
   1effe:	930d      	str	r3, [sp, #52]	; 0x34
   1f000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f002:	4b8f      	ldr	r3, [pc, #572]	; (1f240 <_strtod_l+0xbe0>)
   1f004:	429a      	cmp	r2, r3
   1f006:	f040 80b0 	bne.w	1f16a <_strtod_l+0xb0a>
   1f00a:	f1a8 7b54 	sub.w	fp, r8, #55574528	; 0x3500000
   1f00e:	4650      	mov	r0, sl
   1f010:	ed9d 7b08 	vldr	d7, [sp, #32]
   1f014:	4659      	mov	r1, fp
   1f016:	eeb0 9a47 	vmov.f32	s18, s14
   1f01a:	eef0 9a67 	vmov.f32	s19, s15
   1f01e:	f01c fdc7 	bl	3bbb0 <__ulp>
   1f022:	4602      	mov	r2, r0
   1f024:	460b      	mov	r3, r1
   1f026:	ec51 0b19 	vmov	r0, r1, d9
   1f02a:	f7fd fbc5 	bl	1c7b8 <__aeabi_dmul>
   1f02e:	4652      	mov	r2, sl
   1f030:	465b      	mov	r3, fp
   1f032:	f7fd fa0b 	bl	1c44c <__adddf3>
   1f036:	460b      	mov	r3, r1
   1f038:	4980      	ldr	r1, [pc, #512]	; (1f23c <_strtod_l+0xbdc>)
   1f03a:	4682      	mov	sl, r0
   1f03c:	4a81      	ldr	r2, [pc, #516]	; (1f244 <_strtod_l+0xbe4>)
   1f03e:	4019      	ands	r1, r3
   1f040:	4291      	cmp	r1, r2
   1f042:	d95e      	bls.n	1f102 <_strtod_l+0xaa2>
   1f044:	ee18 3a90 	vmov	r3, s17
   1f048:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   1f04c:	4293      	cmp	r3, r2
   1f04e:	d104      	bne.n	1f05a <_strtod_l+0x9fa>
   1f050:	ee18 3a10 	vmov	r3, s16
   1f054:	3301      	adds	r3, #1
   1f056:	f43f ad49 	beq.w	1eaec <_strtod_l+0x48c>
   1f05a:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 1f250 <_strtod_l+0xbf0>
   1f05e:	f04f 3aff 	mov.w	sl, #4294967295
   1f062:	9918      	ldr	r1, [sp, #96]	; 0x60
   1f064:	4620      	mov	r0, r4
   1f066:	f01c fad7 	bl	3b618 <_Bfree>
   1f06a:	9905      	ldr	r1, [sp, #20]
   1f06c:	4620      	mov	r0, r4
   1f06e:	f01c fad3 	bl	3b618 <_Bfree>
   1f072:	4649      	mov	r1, r9
   1f074:	4620      	mov	r0, r4
   1f076:	f01c facf 	bl	3b618 <_Bfree>
   1f07a:	4629      	mov	r1, r5
   1f07c:	4620      	mov	r0, r4
   1f07e:	f01c facb 	bl	3b618 <_Bfree>
   1f082:	e61e      	b.n	1ecc2 <_strtod_l+0x662>
   1f084:	f1ba 0f00 	cmp.w	sl, #0
   1f088:	d11a      	bne.n	1f0c0 <_strtod_l+0xa60>
   1f08a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f08e:	b9f3      	cbnz	r3, 1f0ce <_strtod_l+0xa6e>
   1f090:	2200      	movs	r2, #0
   1f092:	4b69      	ldr	r3, [pc, #420]	; (1f238 <_strtod_l+0xbd8>)
   1f094:	4630      	mov	r0, r6
   1f096:	4639      	mov	r1, r7
   1f098:	f7fd fe00 	bl	1cc9c <__aeabi_dcmplt>
   1f09c:	b9d0      	cbnz	r0, 1f0d4 <_strtod_l+0xa74>
   1f09e:	4630      	mov	r0, r6
   1f0a0:	4639      	mov	r1, r7
   1f0a2:	2200      	movs	r2, #0
   1f0a4:	4b68      	ldr	r3, [pc, #416]	; (1f248 <_strtod_l+0xbe8>)
   1f0a6:	f7fd fb87 	bl	1c7b8 <__aeabi_dmul>
   1f0aa:	4606      	mov	r6, r0
   1f0ac:	460f      	mov	r7, r1
   1f0ae:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1f0b2:	9614      	str	r6, [sp, #80]	; 0x50
   1f0b4:	9315      	str	r3, [sp, #84]	; 0x54
   1f0b6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1f0ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1f0be:	e79b      	b.n	1eff8 <_strtod_l+0x998>
   1f0c0:	f1ba 0f01 	cmp.w	sl, #1
   1f0c4:	d103      	bne.n	1f0ce <_strtod_l+0xa6e>
   1f0c6:	f1bb 0f00 	cmp.w	fp, #0
   1f0ca:	f43f ad87 	beq.w	1ebdc <_strtod_l+0x57c>
   1f0ce:	2200      	movs	r2, #0
   1f0d0:	4b5e      	ldr	r3, [pc, #376]	; (1f24c <_strtod_l+0xbec>)
   1f0d2:	e78d      	b.n	1eff0 <_strtod_l+0x990>
   1f0d4:	2600      	movs	r6, #0
   1f0d6:	4f5c      	ldr	r7, [pc, #368]	; (1f248 <_strtod_l+0xbe8>)
   1f0d8:	e7e9      	b.n	1f0ae <_strtod_l+0xa4e>
   1f0da:	4b5b      	ldr	r3, [pc, #364]	; (1f248 <_strtod_l+0xbe8>)
   1f0dc:	4630      	mov	r0, r6
   1f0de:	4639      	mov	r1, r7
   1f0e0:	2200      	movs	r2, #0
   1f0e2:	f7fd fb69 	bl	1c7b8 <__aeabi_dmul>
   1f0e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f0e8:	4606      	mov	r6, r0
   1f0ea:	460f      	mov	r7, r1
   1f0ec:	b933      	cbnz	r3, 1f0fc <_strtod_l+0xa9c>
   1f0ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f0f2:	900e      	str	r0, [sp, #56]	; 0x38
   1f0f4:	930f      	str	r3, [sp, #60]	; 0x3c
   1f0f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1f0fa:	e7de      	b.n	1f0ba <_strtod_l+0xa5a>
   1f0fc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   1f100:	e7f9      	b.n	1f0f6 <_strtod_l+0xa96>
   1f102:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   1f106:	9b04      	ldr	r3, [sp, #16]
   1f108:	2b00      	cmp	r3, #0
   1f10a:	d1aa      	bne.n	1f062 <_strtod_l+0xa02>
   1f10c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1f110:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f112:	0d1b      	lsrs	r3, r3, #20
   1f114:	051b      	lsls	r3, r3, #20
   1f116:	429a      	cmp	r2, r3
   1f118:	d1a3      	bne.n	1f062 <_strtod_l+0xa02>
   1f11a:	4630      	mov	r0, r6
   1f11c:	4639      	mov	r1, r7
   1f11e:	f7fd ff1b 	bl	1cf58 <__aeabi_d2lz>
   1f122:	f7fd fb1b 	bl	1c75c <__aeabi_l2d>
   1f126:	4602      	mov	r2, r0
   1f128:	460b      	mov	r3, r1
   1f12a:	4630      	mov	r0, r6
   1f12c:	4639      	mov	r1, r7
   1f12e:	f7fd f98b 	bl	1c448 <__aeabi_dsub>
   1f132:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f136:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f138:	4606      	mov	r6, r0
   1f13a:	ea43 030a 	orr.w	r3, r3, sl
   1f13e:	460f      	mov	r7, r1
   1f140:	4313      	orrs	r3, r2
   1f142:	d051      	beq.n	1f1e8 <_strtod_l+0xb88>
   1f144:	a334      	add	r3, pc, #208	; (adr r3, 1f218 <_strtod_l+0xbb8>)
   1f146:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f14a:	f7fd fda7 	bl	1cc9c <__aeabi_dcmplt>
   1f14e:	2800      	cmp	r0, #0
   1f150:	f47f acd6 	bne.w	1eb00 <_strtod_l+0x4a0>
   1f154:	4630      	mov	r0, r6
   1f156:	4639      	mov	r1, r7
   1f158:	a331      	add	r3, pc, #196	; (adr r3, 1f220 <_strtod_l+0xbc0>)
   1f15a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f15e:	f7fd fdbb 	bl	1ccd8 <__aeabi_dcmpgt>
   1f162:	2800      	cmp	r0, #0
   1f164:	f43f af7d 	beq.w	1f062 <_strtod_l+0xa02>
   1f168:	e4ca      	b.n	1eb00 <_strtod_l+0x4a0>
   1f16a:	9b04      	ldr	r3, [sp, #16]
   1f16c:	b333      	cbz	r3, 1f1bc <_strtod_l+0xb5c>
   1f16e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f170:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1f174:	d822      	bhi.n	1f1bc <_strtod_l+0xb5c>
   1f176:	4630      	mov	r0, r6
   1f178:	4639      	mov	r1, r7
   1f17a:	a32b      	add	r3, pc, #172	; (adr r3, 1f228 <_strtod_l+0xbc8>)
   1f17c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f180:	f7fd fd96 	bl	1ccb0 <__aeabi_dcmple>
   1f184:	b1a0      	cbz	r0, 1f1b0 <_strtod_l+0xb50>
   1f186:	4639      	mov	r1, r7
   1f188:	4630      	mov	r0, r6
   1f18a:	f7fd fded 	bl	1cd68 <__aeabi_d2uiz>
   1f18e:	2801      	cmp	r0, #1
   1f190:	bf38      	it	cc
   1f192:	2001      	movcc	r0, #1
   1f194:	f7fd fa96 	bl	1c6c4 <__aeabi_ui2d>
   1f198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f19a:	4606      	mov	r6, r0
   1f19c:	460f      	mov	r7, r1
   1f19e:	bb03      	cbnz	r3, 1f1e2 <_strtod_l+0xb82>
   1f1a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f1a4:	9010      	str	r0, [sp, #64]	; 0x40
   1f1a6:	9311      	str	r3, [sp, #68]	; 0x44
   1f1a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1f1ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1f1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f1b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f1b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   1f1b8:	1a9b      	subs	r3, r3, r2
   1f1ba:	9309      	str	r3, [sp, #36]	; 0x24
   1f1bc:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
   1f1c0:	ec51 0b18 	vmov	r0, r1, d8
   1f1c4:	f01c fcf4 	bl	3bbb0 <__ulp>
   1f1c8:	4602      	mov	r2, r0
   1f1ca:	460b      	mov	r3, r1
   1f1cc:	4650      	mov	r0, sl
   1f1ce:	4659      	mov	r1, fp
   1f1d0:	f7fd faf2 	bl	1c7b8 <__aeabi_dmul>
   1f1d4:	ec53 2b18 	vmov	r2, r3, d8
   1f1d8:	f7fd f938 	bl	1c44c <__adddf3>
   1f1dc:	4682      	mov	sl, r0
   1f1de:	468b      	mov	fp, r1
   1f1e0:	e791      	b.n	1f106 <_strtod_l+0xaa6>
   1f1e2:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   1f1e6:	e7df      	b.n	1f1a8 <_strtod_l+0xb48>
   1f1e8:	a311      	add	r3, pc, #68	; (adr r3, 1f230 <_strtod_l+0xbd0>)
   1f1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f1ee:	f7fd fd55 	bl	1cc9c <__aeabi_dcmplt>
   1f1f2:	e7b6      	b.n	1f162 <_strtod_l+0xb02>
   1f1f4:	2300      	movs	r3, #0
   1f1f6:	930a      	str	r3, [sp, #40]	; 0x28
   1f1f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1f1fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1f1fc:	6013      	str	r3, [r2, #0]
   1f1fe:	f7ff ba77 	b.w	1e6f0 <_strtod_l+0x90>
   1f202:	2a65      	cmp	r2, #101	; 0x65
   1f204:	f43f ab69 	beq.w	1e8da <_strtod_l+0x27a>
   1f208:	2a45      	cmp	r2, #69	; 0x45
   1f20a:	f43f ab66 	beq.w	1e8da <_strtod_l+0x27a>
   1f20e:	2301      	movs	r3, #1
   1f210:	f7ff bb9e 	b.w	1e950 <_strtod_l+0x2f0>
   1f214:	f3af 8000 	nop.w
   1f218:	94a03595 	.word	0x94a03595
   1f21c:	3fdfffff 	.word	0x3fdfffff
   1f220:	35afe535 	.word	0x35afe535
   1f224:	3fe00000 	.word	0x3fe00000
   1f228:	ffc00000 	.word	0xffc00000
   1f22c:	41dfffff 	.word	0x41dfffff
   1f230:	94a03595 	.word	0x94a03595
   1f234:	3fcfffff 	.word	0x3fcfffff
   1f238:	3ff00000 	.word	0x3ff00000
   1f23c:	7ff00000 	.word	0x7ff00000
   1f240:	7fe00000 	.word	0x7fe00000
   1f244:	7c9fffff 	.word	0x7c9fffff
   1f248:	3fe00000 	.word	0x3fe00000
   1f24c:	bff00000 	.word	0xbff00000
   1f250:	7fefffff 	.word	0x7fefffff
   1f254:	00000000 	.word	0x00000000

0001f258 <_dtoa_r>:
   1f258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f25c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1f25e:	4604      	mov	r4, r0
   1f260:	4616      	mov	r6, r2
   1f262:	461f      	mov	r7, r3
   1f264:	4692      	mov	sl, r2
   1f266:	469b      	mov	fp, r3
   1f268:	ed2d 8b04 	vpush	{d8-d9}
   1f26c:	b093      	sub	sp, #76	; 0x4c
   1f26e:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
   1f272:	b975      	cbnz	r5, 1f292 <_dtoa_r+0x3a>
   1f274:	2010      	movs	r0, #16
   1f276:	f01a fca1 	bl	39bbc <malloc>
   1f27a:	4602      	mov	r2, r0
   1f27c:	6260      	str	r0, [r4, #36]	; 0x24
   1f27e:	b920      	cbnz	r0, 1f28a <_dtoa_r+0x32>
   1f280:	4ba7      	ldr	r3, [pc, #668]	; (1f520 <_dtoa_r+0x2c8>)
   1f282:	21ea      	movs	r1, #234	; 0xea
   1f284:	48a7      	ldr	r0, [pc, #668]	; (1f524 <_dtoa_r+0x2cc>)
   1f286:	f01a fbbd 	bl	39a04 <__assert_func>
   1f28a:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1f28e:	6005      	str	r5, [r0, #0]
   1f290:	60c5      	str	r5, [r0, #12]
   1f292:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f294:	6819      	ldr	r1, [r3, #0]
   1f296:	b151      	cbz	r1, 1f2ae <_dtoa_r+0x56>
   1f298:	685a      	ldr	r2, [r3, #4]
   1f29a:	2301      	movs	r3, #1
   1f29c:	4620      	mov	r0, r4
   1f29e:	4093      	lsls	r3, r2
   1f2a0:	604a      	str	r2, [r1, #4]
   1f2a2:	608b      	str	r3, [r1, #8]
   1f2a4:	f01c f9b8 	bl	3b618 <_Bfree>
   1f2a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f2aa:	2200      	movs	r2, #0
   1f2ac:	601a      	str	r2, [r3, #0]
   1f2ae:	1e3b      	subs	r3, r7, #0
   1f2b0:	bfad      	iteet	ge
   1f2b2:	2300      	movge	r3, #0
   1f2b4:	2201      	movlt	r2, #1
   1f2b6:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
   1f2ba:	f8c8 3000 	strge.w	r3, [r8]
   1f2be:	4b9a      	ldr	r3, [pc, #616]	; (1f528 <_dtoa_r+0x2d0>)
   1f2c0:	bfb8      	it	lt
   1f2c2:	f8c8 2000 	strlt.w	r2, [r8]
   1f2c6:	ea33 030b 	bics.w	r3, r3, fp
   1f2ca:	d11b      	bne.n	1f304 <_dtoa_r+0xac>
   1f2cc:	f242 730f 	movw	r3, #9999	; 0x270f
   1f2d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1f2d2:	6013      	str	r3, [r2, #0]
   1f2d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f2d8:	4333      	orrs	r3, r6
   1f2da:	f000 858f 	beq.w	1fdfc <_dtoa_r+0xba4>
   1f2de:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f2e0:	b963      	cbnz	r3, 1f2fc <_dtoa_r+0xa4>
   1f2e2:	4b92      	ldr	r3, [pc, #584]	; (1f52c <_dtoa_r+0x2d4>)
   1f2e4:	e022      	b.n	1f32c <_dtoa_r+0xd4>
   1f2e6:	4b92      	ldr	r3, [pc, #584]	; (1f530 <_dtoa_r+0x2d8>)
   1f2e8:	9304      	str	r3, [sp, #16]
   1f2ea:	3308      	adds	r3, #8
   1f2ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f2ee:	6013      	str	r3, [r2, #0]
   1f2f0:	9804      	ldr	r0, [sp, #16]
   1f2f2:	b013      	add	sp, #76	; 0x4c
   1f2f4:	ecbd 8b04 	vpop	{d8-d9}
   1f2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2fc:	4b8b      	ldr	r3, [pc, #556]	; (1f52c <_dtoa_r+0x2d4>)
   1f2fe:	9304      	str	r3, [sp, #16]
   1f300:	3303      	adds	r3, #3
   1f302:	e7f3      	b.n	1f2ec <_dtoa_r+0x94>
   1f304:	2200      	movs	r2, #0
   1f306:	2300      	movs	r3, #0
   1f308:	4650      	mov	r0, sl
   1f30a:	4659      	mov	r1, fp
   1f30c:	f7fd fcbc 	bl	1cc88 <__aeabi_dcmpeq>
   1f310:	4680      	mov	r8, r0
   1f312:	ec4b ab19 	vmov	d9, sl, fp
   1f316:	b158      	cbz	r0, 1f330 <_dtoa_r+0xd8>
   1f318:	2301      	movs	r3, #1
   1f31a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1f31c:	6013      	str	r3, [r2, #0]
   1f31e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f320:	2b00      	cmp	r3, #0
   1f322:	f000 8568 	beq.w	1fdf6 <_dtoa_r+0xb9e>
   1f326:	4883      	ldr	r0, [pc, #524]	; (1f534 <_dtoa_r+0x2dc>)
   1f328:	6018      	str	r0, [r3, #0]
   1f32a:	1e43      	subs	r3, r0, #1
   1f32c:	9304      	str	r3, [sp, #16]
   1f32e:	e7df      	b.n	1f2f0 <_dtoa_r+0x98>
   1f330:	ab10      	add	r3, sp, #64	; 0x40
   1f332:	f3cb 550a 	ubfx	r5, fp, #20, #11
   1f336:	4652      	mov	r2, sl
   1f338:	4620      	mov	r0, r4
   1f33a:	9301      	str	r3, [sp, #4]
   1f33c:	ab11      	add	r3, sp, #68	; 0x44
   1f33e:	9300      	str	r3, [sp, #0]
   1f340:	465b      	mov	r3, fp
   1f342:	f01c fcab 	bl	3bc9c <__d2b>
   1f346:	ee08 0a10 	vmov	s16, r0
   1f34a:	2d00      	cmp	r5, #0
   1f34c:	f000 8082 	beq.w	1f454 <_dtoa_r+0x1fc>
   1f350:	ee19 3a90 	vmov	r3, s19
   1f354:	4656      	mov	r6, sl
   1f356:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1f35a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   1f35e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1f362:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   1f366:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   1f36a:	2200      	movs	r2, #0
   1f36c:	4b72      	ldr	r3, [pc, #456]	; (1f538 <_dtoa_r+0x2e0>)
   1f36e:	4630      	mov	r0, r6
   1f370:	4639      	mov	r1, r7
   1f372:	f7fd f869 	bl	1c448 <__aeabi_dsub>
   1f376:	a364      	add	r3, pc, #400	; (adr r3, 1f508 <_dtoa_r+0x2b0>)
   1f378:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f37c:	f7fd fa1c 	bl	1c7b8 <__aeabi_dmul>
   1f380:	a363      	add	r3, pc, #396	; (adr r3, 1f510 <_dtoa_r+0x2b8>)
   1f382:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f386:	f7fd f861 	bl	1c44c <__adddf3>
   1f38a:	4606      	mov	r6, r0
   1f38c:	460f      	mov	r7, r1
   1f38e:	4628      	mov	r0, r5
   1f390:	f7fd f9a8 	bl	1c6e4 <__aeabi_i2d>
   1f394:	a360      	add	r3, pc, #384	; (adr r3, 1f518 <_dtoa_r+0x2c0>)
   1f396:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f39a:	f7fd fa0d 	bl	1c7b8 <__aeabi_dmul>
   1f39e:	4602      	mov	r2, r0
   1f3a0:	460b      	mov	r3, r1
   1f3a2:	4630      	mov	r0, r6
   1f3a4:	4639      	mov	r1, r7
   1f3a6:	f7fd f851 	bl	1c44c <__adddf3>
   1f3aa:	4606      	mov	r6, r0
   1f3ac:	460f      	mov	r7, r1
   1f3ae:	f7fd fcb3 	bl	1cd18 <__aeabi_d2iz>
   1f3b2:	2200      	movs	r2, #0
   1f3b4:	9003      	str	r0, [sp, #12]
   1f3b6:	2300      	movs	r3, #0
   1f3b8:	4630      	mov	r0, r6
   1f3ba:	4639      	mov	r1, r7
   1f3bc:	f7fd fc6e 	bl	1cc9c <__aeabi_dcmplt>
   1f3c0:	b150      	cbz	r0, 1f3d8 <_dtoa_r+0x180>
   1f3c2:	9803      	ldr	r0, [sp, #12]
   1f3c4:	f7fd f98e 	bl	1c6e4 <__aeabi_i2d>
   1f3c8:	4632      	mov	r2, r6
   1f3ca:	463b      	mov	r3, r7
   1f3cc:	f7fd fc5c 	bl	1cc88 <__aeabi_dcmpeq>
   1f3d0:	b910      	cbnz	r0, 1f3d8 <_dtoa_r+0x180>
   1f3d2:	9b03      	ldr	r3, [sp, #12]
   1f3d4:	3b01      	subs	r3, #1
   1f3d6:	9303      	str	r3, [sp, #12]
   1f3d8:	9b03      	ldr	r3, [sp, #12]
   1f3da:	2b16      	cmp	r3, #22
   1f3dc:	d859      	bhi.n	1f492 <_dtoa_r+0x23a>
   1f3de:	9a03      	ldr	r2, [sp, #12]
   1f3e0:	4b56      	ldr	r3, [pc, #344]	; (1f53c <_dtoa_r+0x2e4>)
   1f3e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f3e6:	ec51 0b19 	vmov	r0, r1, d9
   1f3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f3ee:	f7fd fc55 	bl	1cc9c <__aeabi_dcmplt>
   1f3f2:	2800      	cmp	r0, #0
   1f3f4:	d04f      	beq.n	1f496 <_dtoa_r+0x23e>
   1f3f6:	9b03      	ldr	r3, [sp, #12]
   1f3f8:	3b01      	subs	r3, #1
   1f3fa:	9303      	str	r3, [sp, #12]
   1f3fc:	2300      	movs	r3, #0
   1f3fe:	930c      	str	r3, [sp, #48]	; 0x30
   1f400:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f402:	1b5d      	subs	r5, r3, r5
   1f404:	1e6b      	subs	r3, r5, #1
   1f406:	9308      	str	r3, [sp, #32]
   1f408:	bf49      	itett	mi
   1f40a:	f1c5 0301 	rsbmi	r3, r5, #1
   1f40e:	2300      	movpl	r3, #0
   1f410:	9307      	strmi	r3, [sp, #28]
   1f412:	2300      	movmi	r3, #0
   1f414:	bf54      	ite	pl
   1f416:	9307      	strpl	r3, [sp, #28]
   1f418:	9308      	strmi	r3, [sp, #32]
   1f41a:	9b03      	ldr	r3, [sp, #12]
   1f41c:	2b00      	cmp	r3, #0
   1f41e:	db3c      	blt.n	1f49a <_dtoa_r+0x242>
   1f420:	9b08      	ldr	r3, [sp, #32]
   1f422:	9a03      	ldr	r2, [sp, #12]
   1f424:	4413      	add	r3, r2
   1f426:	920b      	str	r2, [sp, #44]	; 0x2c
   1f428:	9308      	str	r3, [sp, #32]
   1f42a:	2300      	movs	r3, #0
   1f42c:	9309      	str	r3, [sp, #36]	; 0x24
   1f42e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1f430:	2b09      	cmp	r3, #9
   1f432:	f200 8087 	bhi.w	1f544 <_dtoa_r+0x2ec>
   1f436:	2b05      	cmp	r3, #5
   1f438:	bfc5      	ittet	gt
   1f43a:	3b04      	subgt	r3, #4
   1f43c:	2500      	movgt	r5, #0
   1f43e:	2501      	movle	r5, #1
   1f440:	9320      	strgt	r3, [sp, #128]	; 0x80
   1f442:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1f444:	3b02      	subs	r3, #2
   1f446:	2b03      	cmp	r3, #3
   1f448:	f200 8087 	bhi.w	1f55a <_dtoa_r+0x302>
   1f44c:	e8df f003 	tbb	[pc, r3]
   1f450:	5a393b2e 	.word	0x5a393b2e
   1f454:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
   1f458:	441d      	add	r5, r3
   1f45a:	f205 4332 	addw	r3, r5, #1074	; 0x432
   1f45e:	2b20      	cmp	r3, #32
   1f460:	bfc6      	itte	gt
   1f462:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   1f466:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
   1f46a:	f1c3 0320 	rsble	r3, r3, #32
   1f46e:	f105 35ff 	add.w	r5, r5, #4294967295
   1f472:	bfc5      	ittet	gt
   1f474:	fa0b f303 	lslgt.w	r3, fp, r3
   1f478:	fa26 f000 	lsrgt.w	r0, r6, r0
   1f47c:	fa06 f003 	lslle.w	r0, r6, r3
   1f480:	4318      	orrgt	r0, r3
   1f482:	f7fd f91f 	bl	1c6c4 <__aeabi_ui2d>
   1f486:	2301      	movs	r3, #1
   1f488:	4606      	mov	r6, r0
   1f48a:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   1f48e:	930e      	str	r3, [sp, #56]	; 0x38
   1f490:	e76b      	b.n	1f36a <_dtoa_r+0x112>
   1f492:	2301      	movs	r3, #1
   1f494:	e7b3      	b.n	1f3fe <_dtoa_r+0x1a6>
   1f496:	900c      	str	r0, [sp, #48]	; 0x30
   1f498:	e7b2      	b.n	1f400 <_dtoa_r+0x1a8>
   1f49a:	9b07      	ldr	r3, [sp, #28]
   1f49c:	9a03      	ldr	r2, [sp, #12]
   1f49e:	1a9b      	subs	r3, r3, r2
   1f4a0:	9307      	str	r3, [sp, #28]
   1f4a2:	4253      	negs	r3, r2
   1f4a4:	9309      	str	r3, [sp, #36]	; 0x24
   1f4a6:	2300      	movs	r3, #0
   1f4a8:	930b      	str	r3, [sp, #44]	; 0x2c
   1f4aa:	e7c0      	b.n	1f42e <_dtoa_r+0x1d6>
   1f4ac:	2300      	movs	r3, #0
   1f4ae:	930a      	str	r3, [sp, #40]	; 0x28
   1f4b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f4b2:	2b00      	cmp	r3, #0
   1f4b4:	dc54      	bgt.n	1f560 <_dtoa_r+0x308>
   1f4b6:	2301      	movs	r3, #1
   1f4b8:	461a      	mov	r2, r3
   1f4ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1f4be:	9221      	str	r2, [sp, #132]	; 0x84
   1f4c0:	e00c      	b.n	1f4dc <_dtoa_r+0x284>
   1f4c2:	2301      	movs	r3, #1
   1f4c4:	e7f3      	b.n	1f4ae <_dtoa_r+0x256>
   1f4c6:	2300      	movs	r3, #0
   1f4c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1f4ca:	930a      	str	r3, [sp, #40]	; 0x28
   1f4cc:	9b03      	ldr	r3, [sp, #12]
   1f4ce:	4413      	add	r3, r2
   1f4d0:	9305      	str	r3, [sp, #20]
   1f4d2:	3301      	adds	r3, #1
   1f4d4:	2b01      	cmp	r3, #1
   1f4d6:	9306      	str	r3, [sp, #24]
   1f4d8:	bfb8      	it	lt
   1f4da:	2301      	movlt	r3, #1
   1f4dc:	2200      	movs	r2, #0
   1f4de:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1f4e0:	6042      	str	r2, [r0, #4]
   1f4e2:	2204      	movs	r2, #4
   1f4e4:	f102 0614 	add.w	r6, r2, #20
   1f4e8:	6841      	ldr	r1, [r0, #4]
   1f4ea:	429e      	cmp	r6, r3
   1f4ec:	d93c      	bls.n	1f568 <_dtoa_r+0x310>
   1f4ee:	4620      	mov	r0, r4
   1f4f0:	f01c f852 	bl	3b598 <_Balloc>
   1f4f4:	9004      	str	r0, [sp, #16]
   1f4f6:	2800      	cmp	r0, #0
   1f4f8:	d13a      	bne.n	1f570 <_dtoa_r+0x318>
   1f4fa:	4b11      	ldr	r3, [pc, #68]	; (1f540 <_dtoa_r+0x2e8>)
   1f4fc:	4602      	mov	r2, r0
   1f4fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   1f502:	e6bf      	b.n	1f284 <_dtoa_r+0x2c>
   1f504:	2301      	movs	r3, #1
   1f506:	e7df      	b.n	1f4c8 <_dtoa_r+0x270>
   1f508:	636f4361 	.word	0x636f4361
   1f50c:	3fd287a7 	.word	0x3fd287a7
   1f510:	8b60c8b3 	.word	0x8b60c8b3
   1f514:	3fc68a28 	.word	0x3fc68a28
   1f518:	509f79fb 	.word	0x509f79fb
   1f51c:	3fd34413 	.word	0x3fd34413
   1f520:	0004be93 	.word	0x0004be93
   1f524:	0004beaa 	.word	0x0004beaa
   1f528:	7ff00000 	.word	0x7ff00000
   1f52c:	0004be8f 	.word	0x0004be8f
   1f530:	0004be86 	.word	0x0004be86
   1f534:	00045af2 	.word	0x00045af2
   1f538:	3ff80000 	.word	0x3ff80000
   1f53c:	000428c8 	.word	0x000428c8
   1f540:	0004bf1e 	.word	0x0004bf1e
   1f544:	2501      	movs	r5, #1
   1f546:	2300      	movs	r3, #0
   1f548:	950a      	str	r5, [sp, #40]	; 0x28
   1f54a:	9320      	str	r3, [sp, #128]	; 0x80
   1f54c:	f04f 33ff 	mov.w	r3, #4294967295
   1f550:	2200      	movs	r2, #0
   1f552:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1f556:	2312      	movs	r3, #18
   1f558:	e7b1      	b.n	1f4be <_dtoa_r+0x266>
   1f55a:	2301      	movs	r3, #1
   1f55c:	930a      	str	r3, [sp, #40]	; 0x28
   1f55e:	e7f5      	b.n	1f54c <_dtoa_r+0x2f4>
   1f560:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f562:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1f566:	e7b9      	b.n	1f4dc <_dtoa_r+0x284>
   1f568:	3101      	adds	r1, #1
   1f56a:	0052      	lsls	r2, r2, #1
   1f56c:	6041      	str	r1, [r0, #4]
   1f56e:	e7b9      	b.n	1f4e4 <_dtoa_r+0x28c>
   1f570:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f572:	9a04      	ldr	r2, [sp, #16]
   1f574:	601a      	str	r2, [r3, #0]
   1f576:	9b06      	ldr	r3, [sp, #24]
   1f578:	2b0e      	cmp	r3, #14
   1f57a:	f200 809d 	bhi.w	1f6b8 <_dtoa_r+0x460>
   1f57e:	2d00      	cmp	r5, #0
   1f580:	f000 809a 	beq.w	1f6b8 <_dtoa_r+0x460>
   1f584:	9b03      	ldr	r3, [sp, #12]
   1f586:	2b00      	cmp	r3, #0
   1f588:	dd32      	ble.n	1f5f0 <_dtoa_r+0x398>
   1f58a:	f003 030f 	and.w	r3, r3, #15
   1f58e:	4ab6      	ldr	r2, [pc, #728]	; (1f868 <_dtoa_r+0x610>)
   1f590:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f594:	e9d3 8900 	ldrd	r8, r9, [r3]
   1f598:	9b03      	ldr	r3, [sp, #12]
   1f59a:	05d8      	lsls	r0, r3, #23
   1f59c:	ea4f 1723 	mov.w	r7, r3, asr #4
   1f5a0:	d516      	bpl.n	1f5d0 <_dtoa_r+0x378>
   1f5a2:	4bb2      	ldr	r3, [pc, #712]	; (1f86c <_dtoa_r+0x614>)
   1f5a4:	f007 070f 	and.w	r7, r7, #15
   1f5a8:	2503      	movs	r5, #3
   1f5aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1f5ae:	ec51 0b19 	vmov	r0, r1, d9
   1f5b2:	f7fd fa2b 	bl	1ca0c <__aeabi_ddiv>
   1f5b6:	4682      	mov	sl, r0
   1f5b8:	468b      	mov	fp, r1
   1f5ba:	4eac      	ldr	r6, [pc, #688]	; (1f86c <_dtoa_r+0x614>)
   1f5bc:	b957      	cbnz	r7, 1f5d4 <_dtoa_r+0x37c>
   1f5be:	4642      	mov	r2, r8
   1f5c0:	464b      	mov	r3, r9
   1f5c2:	4650      	mov	r0, sl
   1f5c4:	4659      	mov	r1, fp
   1f5c6:	f7fd fa21 	bl	1ca0c <__aeabi_ddiv>
   1f5ca:	4682      	mov	sl, r0
   1f5cc:	468b      	mov	fp, r1
   1f5ce:	e028      	b.n	1f622 <_dtoa_r+0x3ca>
   1f5d0:	2502      	movs	r5, #2
   1f5d2:	e7f2      	b.n	1f5ba <_dtoa_r+0x362>
   1f5d4:	07f9      	lsls	r1, r7, #31
   1f5d6:	d508      	bpl.n	1f5ea <_dtoa_r+0x392>
   1f5d8:	4640      	mov	r0, r8
   1f5da:	4649      	mov	r1, r9
   1f5dc:	3501      	adds	r5, #1
   1f5de:	e9d6 2300 	ldrd	r2, r3, [r6]
   1f5e2:	f7fd f8e9 	bl	1c7b8 <__aeabi_dmul>
   1f5e6:	4680      	mov	r8, r0
   1f5e8:	4689      	mov	r9, r1
   1f5ea:	107f      	asrs	r7, r7, #1
   1f5ec:	3608      	adds	r6, #8
   1f5ee:	e7e5      	b.n	1f5bc <_dtoa_r+0x364>
   1f5f0:	f000 809b 	beq.w	1f72a <_dtoa_r+0x4d2>
   1f5f4:	9b03      	ldr	r3, [sp, #12]
   1f5f6:	2502      	movs	r5, #2
   1f5f8:	4f9c      	ldr	r7, [pc, #624]	; (1f86c <_dtoa_r+0x614>)
   1f5fa:	425e      	negs	r6, r3
   1f5fc:	4b9a      	ldr	r3, [pc, #616]	; (1f868 <_dtoa_r+0x610>)
   1f5fe:	f006 020f 	and.w	r2, r6, #15
   1f602:	1136      	asrs	r6, r6, #4
   1f604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f608:	ec51 0b19 	vmov	r0, r1, d9
   1f60c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f610:	f7fd f8d2 	bl	1c7b8 <__aeabi_dmul>
   1f614:	2300      	movs	r3, #0
   1f616:	4682      	mov	sl, r0
   1f618:	468b      	mov	fp, r1
   1f61a:	2e00      	cmp	r6, #0
   1f61c:	d17a      	bne.n	1f714 <_dtoa_r+0x4bc>
   1f61e:	2b00      	cmp	r3, #0
   1f620:	d1d3      	bne.n	1f5ca <_dtoa_r+0x372>
   1f622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f624:	2b00      	cmp	r3, #0
   1f626:	f000 8082 	beq.w	1f72e <_dtoa_r+0x4d6>
   1f62a:	2200      	movs	r2, #0
   1f62c:	4b90      	ldr	r3, [pc, #576]	; (1f870 <_dtoa_r+0x618>)
   1f62e:	4650      	mov	r0, sl
   1f630:	4659      	mov	r1, fp
   1f632:	f7fd fb33 	bl	1cc9c <__aeabi_dcmplt>
   1f636:	2800      	cmp	r0, #0
   1f638:	d079      	beq.n	1f72e <_dtoa_r+0x4d6>
   1f63a:	9b06      	ldr	r3, [sp, #24]
   1f63c:	2b00      	cmp	r3, #0
   1f63e:	d076      	beq.n	1f72e <_dtoa_r+0x4d6>
   1f640:	9b05      	ldr	r3, [sp, #20]
   1f642:	2b00      	cmp	r3, #0
   1f644:	dd36      	ble.n	1f6b4 <_dtoa_r+0x45c>
   1f646:	9b03      	ldr	r3, [sp, #12]
   1f648:	4650      	mov	r0, sl
   1f64a:	4659      	mov	r1, fp
   1f64c:	2200      	movs	r2, #0
   1f64e:	1e5f      	subs	r7, r3, #1
   1f650:	4b88      	ldr	r3, [pc, #544]	; (1f874 <_dtoa_r+0x61c>)
   1f652:	f7fd f8b1 	bl	1c7b8 <__aeabi_dmul>
   1f656:	3501      	adds	r5, #1
   1f658:	4682      	mov	sl, r0
   1f65a:	468b      	mov	fp, r1
   1f65c:	9e05      	ldr	r6, [sp, #20]
   1f65e:	4628      	mov	r0, r5
   1f660:	46d0      	mov	r8, sl
   1f662:	f7fd f83f 	bl	1c6e4 <__aeabi_i2d>
   1f666:	4652      	mov	r2, sl
   1f668:	465b      	mov	r3, fp
   1f66a:	46d9      	mov	r9, fp
   1f66c:	f7fd f8a4 	bl	1c7b8 <__aeabi_dmul>
   1f670:	2200      	movs	r2, #0
   1f672:	4b81      	ldr	r3, [pc, #516]	; (1f878 <_dtoa_r+0x620>)
   1f674:	f7fc feea 	bl	1c44c <__adddf3>
   1f678:	4682      	mov	sl, r0
   1f67a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   1f67e:	2e00      	cmp	r6, #0
   1f680:	d158      	bne.n	1f734 <_dtoa_r+0x4dc>
   1f682:	2200      	movs	r2, #0
   1f684:	4b7d      	ldr	r3, [pc, #500]	; (1f87c <_dtoa_r+0x624>)
   1f686:	4640      	mov	r0, r8
   1f688:	4649      	mov	r1, r9
   1f68a:	f7fc fedd 	bl	1c448 <__aeabi_dsub>
   1f68e:	4652      	mov	r2, sl
   1f690:	465b      	mov	r3, fp
   1f692:	4680      	mov	r8, r0
   1f694:	4689      	mov	r9, r1
   1f696:	f7fd fb1f 	bl	1ccd8 <__aeabi_dcmpgt>
   1f69a:	2800      	cmp	r0, #0
   1f69c:	f040 8293 	bne.w	1fbc6 <_dtoa_r+0x96e>
   1f6a0:	4652      	mov	r2, sl
   1f6a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1f6a6:	4640      	mov	r0, r8
   1f6a8:	4649      	mov	r1, r9
   1f6aa:	f7fd faf7 	bl	1cc9c <__aeabi_dcmplt>
   1f6ae:	2800      	cmp	r0, #0
   1f6b0:	f040 8287 	bne.w	1fbc2 <_dtoa_r+0x96a>
   1f6b4:	ec5b ab19 	vmov	sl, fp, d9
   1f6b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1f6ba:	2b00      	cmp	r3, #0
   1f6bc:	f2c0 8148 	blt.w	1f950 <_dtoa_r+0x6f8>
   1f6c0:	9a03      	ldr	r2, [sp, #12]
   1f6c2:	2a0e      	cmp	r2, #14
   1f6c4:	f300 8144 	bgt.w	1f950 <_dtoa_r+0x6f8>
   1f6c8:	4b67      	ldr	r3, [pc, #412]	; (1f868 <_dtoa_r+0x610>)
   1f6ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f6ce:	e9d3 8900 	ldrd	r8, r9, [r3]
   1f6d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f6d4:	2b00      	cmp	r3, #0
   1f6d6:	f280 80d5 	bge.w	1f884 <_dtoa_r+0x62c>
   1f6da:	9b06      	ldr	r3, [sp, #24]
   1f6dc:	2b00      	cmp	r3, #0
   1f6de:	f300 80d1 	bgt.w	1f884 <_dtoa_r+0x62c>
   1f6e2:	f040 826d 	bne.w	1fbc0 <_dtoa_r+0x968>
   1f6e6:	2200      	movs	r2, #0
   1f6e8:	4b64      	ldr	r3, [pc, #400]	; (1f87c <_dtoa_r+0x624>)
   1f6ea:	4640      	mov	r0, r8
   1f6ec:	4649      	mov	r1, r9
   1f6ee:	f7fd f863 	bl	1c7b8 <__aeabi_dmul>
   1f6f2:	4652      	mov	r2, sl
   1f6f4:	465b      	mov	r3, fp
   1f6f6:	f7fd fae5 	bl	1ccc4 <__aeabi_dcmpge>
   1f6fa:	9e06      	ldr	r6, [sp, #24]
   1f6fc:	4637      	mov	r7, r6
   1f6fe:	2800      	cmp	r0, #0
   1f700:	f040 8243 	bne.w	1fb8a <_dtoa_r+0x932>
   1f704:	2331      	movs	r3, #49	; 0x31
   1f706:	9d04      	ldr	r5, [sp, #16]
   1f708:	f805 3b01 	strb.w	r3, [r5], #1
   1f70c:	9b03      	ldr	r3, [sp, #12]
   1f70e:	3301      	adds	r3, #1
   1f710:	9303      	str	r3, [sp, #12]
   1f712:	e23e      	b.n	1fb92 <_dtoa_r+0x93a>
   1f714:	07f2      	lsls	r2, r6, #31
   1f716:	d505      	bpl.n	1f724 <_dtoa_r+0x4cc>
   1f718:	3501      	adds	r5, #1
   1f71a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f71e:	f7fd f84b 	bl	1c7b8 <__aeabi_dmul>
   1f722:	2301      	movs	r3, #1
   1f724:	1076      	asrs	r6, r6, #1
   1f726:	3708      	adds	r7, #8
   1f728:	e777      	b.n	1f61a <_dtoa_r+0x3c2>
   1f72a:	2502      	movs	r5, #2
   1f72c:	e779      	b.n	1f622 <_dtoa_r+0x3ca>
   1f72e:	9f03      	ldr	r7, [sp, #12]
   1f730:	9e06      	ldr	r6, [sp, #24]
   1f732:	e794      	b.n	1f65e <_dtoa_r+0x406>
   1f734:	9904      	ldr	r1, [sp, #16]
   1f736:	4b4c      	ldr	r3, [pc, #304]	; (1f868 <_dtoa_r+0x610>)
   1f738:	4431      	add	r1, r6
   1f73a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1f73e:	910d      	str	r1, [sp, #52]	; 0x34
   1f740:	990a      	ldr	r1, [sp, #40]	; 0x28
   1f742:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1f746:	2900      	cmp	r1, #0
   1f748:	d043      	beq.n	1f7d2 <_dtoa_r+0x57a>
   1f74a:	2000      	movs	r0, #0
   1f74c:	494c      	ldr	r1, [pc, #304]	; (1f880 <_dtoa_r+0x628>)
   1f74e:	f7fd f95d 	bl	1ca0c <__aeabi_ddiv>
   1f752:	4652      	mov	r2, sl
   1f754:	465b      	mov	r3, fp
   1f756:	f7fc fe77 	bl	1c448 <__aeabi_dsub>
   1f75a:	9d04      	ldr	r5, [sp, #16]
   1f75c:	4682      	mov	sl, r0
   1f75e:	468b      	mov	fp, r1
   1f760:	4649      	mov	r1, r9
   1f762:	4640      	mov	r0, r8
   1f764:	f7fd fad8 	bl	1cd18 <__aeabi_d2iz>
   1f768:	4606      	mov	r6, r0
   1f76a:	f7fc ffbb 	bl	1c6e4 <__aeabi_i2d>
   1f76e:	4602      	mov	r2, r0
   1f770:	3630      	adds	r6, #48	; 0x30
   1f772:	460b      	mov	r3, r1
   1f774:	4640      	mov	r0, r8
   1f776:	4649      	mov	r1, r9
   1f778:	f7fc fe66 	bl	1c448 <__aeabi_dsub>
   1f77c:	4652      	mov	r2, sl
   1f77e:	465b      	mov	r3, fp
   1f780:	f805 6b01 	strb.w	r6, [r5], #1
   1f784:	4680      	mov	r8, r0
   1f786:	4689      	mov	r9, r1
   1f788:	f7fd fa88 	bl	1cc9c <__aeabi_dcmplt>
   1f78c:	2800      	cmp	r0, #0
   1f78e:	d163      	bne.n	1f858 <_dtoa_r+0x600>
   1f790:	4642      	mov	r2, r8
   1f792:	464b      	mov	r3, r9
   1f794:	2000      	movs	r0, #0
   1f796:	4936      	ldr	r1, [pc, #216]	; (1f870 <_dtoa_r+0x618>)
   1f798:	f7fc fe56 	bl	1c448 <__aeabi_dsub>
   1f79c:	4652      	mov	r2, sl
   1f79e:	465b      	mov	r3, fp
   1f7a0:	f7fd fa7c 	bl	1cc9c <__aeabi_dcmplt>
   1f7a4:	2800      	cmp	r0, #0
   1f7a6:	f040 80b5 	bne.w	1f914 <_dtoa_r+0x6bc>
   1f7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f7ac:	429d      	cmp	r5, r3
   1f7ae:	d081      	beq.n	1f6b4 <_dtoa_r+0x45c>
   1f7b0:	2200      	movs	r2, #0
   1f7b2:	4b30      	ldr	r3, [pc, #192]	; (1f874 <_dtoa_r+0x61c>)
   1f7b4:	4650      	mov	r0, sl
   1f7b6:	4659      	mov	r1, fp
   1f7b8:	f7fc fffe 	bl	1c7b8 <__aeabi_dmul>
   1f7bc:	2200      	movs	r2, #0
   1f7be:	4682      	mov	sl, r0
   1f7c0:	468b      	mov	fp, r1
   1f7c2:	4640      	mov	r0, r8
   1f7c4:	4649      	mov	r1, r9
   1f7c6:	4b2b      	ldr	r3, [pc, #172]	; (1f874 <_dtoa_r+0x61c>)
   1f7c8:	f7fc fff6 	bl	1c7b8 <__aeabi_dmul>
   1f7cc:	4680      	mov	r8, r0
   1f7ce:	4689      	mov	r9, r1
   1f7d0:	e7c6      	b.n	1f760 <_dtoa_r+0x508>
   1f7d2:	4650      	mov	r0, sl
   1f7d4:	4659      	mov	r1, fp
   1f7d6:	f7fc ffef 	bl	1c7b8 <__aeabi_dmul>
   1f7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f7dc:	4682      	mov	sl, r0
   1f7de:	468b      	mov	fp, r1
   1f7e0:	9d04      	ldr	r5, [sp, #16]
   1f7e2:	930f      	str	r3, [sp, #60]	; 0x3c
   1f7e4:	4649      	mov	r1, r9
   1f7e6:	4640      	mov	r0, r8
   1f7e8:	f7fd fa96 	bl	1cd18 <__aeabi_d2iz>
   1f7ec:	4606      	mov	r6, r0
   1f7ee:	f7fc ff79 	bl	1c6e4 <__aeabi_i2d>
   1f7f2:	4602      	mov	r2, r0
   1f7f4:	460b      	mov	r3, r1
   1f7f6:	4640      	mov	r0, r8
   1f7f8:	4649      	mov	r1, r9
   1f7fa:	3630      	adds	r6, #48	; 0x30
   1f7fc:	f7fc fe24 	bl	1c448 <__aeabi_dsub>
   1f800:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f802:	f805 6b01 	strb.w	r6, [r5], #1
   1f806:	4680      	mov	r8, r0
   1f808:	429d      	cmp	r5, r3
   1f80a:	4689      	mov	r9, r1
   1f80c:	f04f 0200 	mov.w	r2, #0
   1f810:	d124      	bne.n	1f85c <_dtoa_r+0x604>
   1f812:	4b1b      	ldr	r3, [pc, #108]	; (1f880 <_dtoa_r+0x628>)
   1f814:	4650      	mov	r0, sl
   1f816:	4659      	mov	r1, fp
   1f818:	f7fc fe18 	bl	1c44c <__adddf3>
   1f81c:	4602      	mov	r2, r0
   1f81e:	460b      	mov	r3, r1
   1f820:	4640      	mov	r0, r8
   1f822:	4649      	mov	r1, r9
   1f824:	f7fd fa58 	bl	1ccd8 <__aeabi_dcmpgt>
   1f828:	2800      	cmp	r0, #0
   1f82a:	d173      	bne.n	1f914 <_dtoa_r+0x6bc>
   1f82c:	4652      	mov	r2, sl
   1f82e:	465b      	mov	r3, fp
   1f830:	2000      	movs	r0, #0
   1f832:	4913      	ldr	r1, [pc, #76]	; (1f880 <_dtoa_r+0x628>)
   1f834:	f7fc fe08 	bl	1c448 <__aeabi_dsub>
   1f838:	4602      	mov	r2, r0
   1f83a:	460b      	mov	r3, r1
   1f83c:	4640      	mov	r0, r8
   1f83e:	4649      	mov	r1, r9
   1f840:	f7fd fa2c 	bl	1cc9c <__aeabi_dcmplt>
   1f844:	2800      	cmp	r0, #0
   1f846:	f43f af35 	beq.w	1f6b4 <_dtoa_r+0x45c>
   1f84a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1f84c:	1e6b      	subs	r3, r5, #1
   1f84e:	930f      	str	r3, [sp, #60]	; 0x3c
   1f850:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1f854:	2b30      	cmp	r3, #48	; 0x30
   1f856:	d0f8      	beq.n	1f84a <_dtoa_r+0x5f2>
   1f858:	9703      	str	r7, [sp, #12]
   1f85a:	e049      	b.n	1f8f0 <_dtoa_r+0x698>
   1f85c:	4b05      	ldr	r3, [pc, #20]	; (1f874 <_dtoa_r+0x61c>)
   1f85e:	f7fc ffab 	bl	1c7b8 <__aeabi_dmul>
   1f862:	4680      	mov	r8, r0
   1f864:	4689      	mov	r9, r1
   1f866:	e7bd      	b.n	1f7e4 <_dtoa_r+0x58c>
   1f868:	000428c8 	.word	0x000428c8
   1f86c:	000428a0 	.word	0x000428a0
   1f870:	3ff00000 	.word	0x3ff00000
   1f874:	40240000 	.word	0x40240000
   1f878:	401c0000 	.word	0x401c0000
   1f87c:	40140000 	.word	0x40140000
   1f880:	3fe00000 	.word	0x3fe00000
   1f884:	4656      	mov	r6, sl
   1f886:	465f      	mov	r7, fp
   1f888:	9d04      	ldr	r5, [sp, #16]
   1f88a:	4642      	mov	r2, r8
   1f88c:	464b      	mov	r3, r9
   1f88e:	4630      	mov	r0, r6
   1f890:	4639      	mov	r1, r7
   1f892:	f7fd f8bb 	bl	1ca0c <__aeabi_ddiv>
   1f896:	f7fd fa3f 	bl	1cd18 <__aeabi_d2iz>
   1f89a:	4682      	mov	sl, r0
   1f89c:	f7fc ff22 	bl	1c6e4 <__aeabi_i2d>
   1f8a0:	4642      	mov	r2, r8
   1f8a2:	464b      	mov	r3, r9
   1f8a4:	f7fc ff88 	bl	1c7b8 <__aeabi_dmul>
   1f8a8:	4602      	mov	r2, r0
   1f8aa:	4630      	mov	r0, r6
   1f8ac:	f10a 0630 	add.w	r6, sl, #48	; 0x30
   1f8b0:	460b      	mov	r3, r1
   1f8b2:	4639      	mov	r1, r7
   1f8b4:	f7fc fdc8 	bl	1c448 <__aeabi_dsub>
   1f8b8:	f805 6b01 	strb.w	r6, [r5], #1
   1f8bc:	9e04      	ldr	r6, [sp, #16]
   1f8be:	4602      	mov	r2, r0
   1f8c0:	9f06      	ldr	r7, [sp, #24]
   1f8c2:	460b      	mov	r3, r1
   1f8c4:	1bae      	subs	r6, r5, r6
   1f8c6:	42b7      	cmp	r7, r6
   1f8c8:	d135      	bne.n	1f936 <_dtoa_r+0x6de>
   1f8ca:	f7fc fdbf 	bl	1c44c <__adddf3>
   1f8ce:	4642      	mov	r2, r8
   1f8d0:	464b      	mov	r3, r9
   1f8d2:	4606      	mov	r6, r0
   1f8d4:	460f      	mov	r7, r1
   1f8d6:	f7fd f9ff 	bl	1ccd8 <__aeabi_dcmpgt>
   1f8da:	b9d0      	cbnz	r0, 1f912 <_dtoa_r+0x6ba>
   1f8dc:	4642      	mov	r2, r8
   1f8de:	464b      	mov	r3, r9
   1f8e0:	4630      	mov	r0, r6
   1f8e2:	4639      	mov	r1, r7
   1f8e4:	f7fd f9d0 	bl	1cc88 <__aeabi_dcmpeq>
   1f8e8:	b110      	cbz	r0, 1f8f0 <_dtoa_r+0x698>
   1f8ea:	f01a 0f01 	tst.w	sl, #1
   1f8ee:	d110      	bne.n	1f912 <_dtoa_r+0x6ba>
   1f8f0:	4620      	mov	r0, r4
   1f8f2:	ee18 1a10 	vmov	r1, s16
   1f8f6:	f01b fe8f 	bl	3b618 <_Bfree>
   1f8fa:	2300      	movs	r3, #0
   1f8fc:	9803      	ldr	r0, [sp, #12]
   1f8fe:	702b      	strb	r3, [r5, #0]
   1f900:	3001      	adds	r0, #1
   1f902:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1f904:	6018      	str	r0, [r3, #0]
   1f906:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f908:	2b00      	cmp	r3, #0
   1f90a:	f43f acf1 	beq.w	1f2f0 <_dtoa_r+0x98>
   1f90e:	601d      	str	r5, [r3, #0]
   1f910:	e4ee      	b.n	1f2f0 <_dtoa_r+0x98>
   1f912:	9f03      	ldr	r7, [sp, #12]
   1f914:	462b      	mov	r3, r5
   1f916:	461d      	mov	r5, r3
   1f918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1f91c:	2a39      	cmp	r2, #57	; 0x39
   1f91e:	d106      	bne.n	1f92e <_dtoa_r+0x6d6>
   1f920:	9a04      	ldr	r2, [sp, #16]
   1f922:	429a      	cmp	r2, r3
   1f924:	d1f7      	bne.n	1f916 <_dtoa_r+0x6be>
   1f926:	2230      	movs	r2, #48	; 0x30
   1f928:	9904      	ldr	r1, [sp, #16]
   1f92a:	3701      	adds	r7, #1
   1f92c:	700a      	strb	r2, [r1, #0]
   1f92e:	781a      	ldrb	r2, [r3, #0]
   1f930:	3201      	adds	r2, #1
   1f932:	701a      	strb	r2, [r3, #0]
   1f934:	e790      	b.n	1f858 <_dtoa_r+0x600>
   1f936:	2200      	movs	r2, #0
   1f938:	4ba4      	ldr	r3, [pc, #656]	; (1fbcc <_dtoa_r+0x974>)
   1f93a:	f7fc ff3d 	bl	1c7b8 <__aeabi_dmul>
   1f93e:	2200      	movs	r2, #0
   1f940:	2300      	movs	r3, #0
   1f942:	4606      	mov	r6, r0
   1f944:	460f      	mov	r7, r1
   1f946:	f7fd f99f 	bl	1cc88 <__aeabi_dcmpeq>
   1f94a:	2800      	cmp	r0, #0
   1f94c:	d09d      	beq.n	1f88a <_dtoa_r+0x632>
   1f94e:	e7cf      	b.n	1f8f0 <_dtoa_r+0x698>
   1f950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f952:	2a00      	cmp	r2, #0
   1f954:	f000 80d5 	beq.w	1fb02 <_dtoa_r+0x8aa>
   1f958:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1f95a:	2a01      	cmp	r2, #1
   1f95c:	f300 80b9 	bgt.w	1fad2 <_dtoa_r+0x87a>
   1f960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1f962:	2a00      	cmp	r2, #0
   1f964:	f000 80b1 	beq.w	1faca <_dtoa_r+0x872>
   1f968:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1f96c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1f96e:	9d07      	ldr	r5, [sp, #28]
   1f970:	9a07      	ldr	r2, [sp, #28]
   1f972:	2101      	movs	r1, #1
   1f974:	4620      	mov	r0, r4
   1f976:	441a      	add	r2, r3
   1f978:	9207      	str	r2, [sp, #28]
   1f97a:	9a08      	ldr	r2, [sp, #32]
   1f97c:	441a      	add	r2, r3
   1f97e:	9208      	str	r2, [sp, #32]
   1f980:	f01b fefe 	bl	3b780 <__i2b>
   1f984:	4607      	mov	r7, r0
   1f986:	2d00      	cmp	r5, #0
   1f988:	dd0c      	ble.n	1f9a4 <_dtoa_r+0x74c>
   1f98a:	9b08      	ldr	r3, [sp, #32]
   1f98c:	2b00      	cmp	r3, #0
   1f98e:	dd09      	ble.n	1f9a4 <_dtoa_r+0x74c>
   1f990:	42ab      	cmp	r3, r5
   1f992:	9a07      	ldr	r2, [sp, #28]
   1f994:	bfa8      	it	ge
   1f996:	462b      	movge	r3, r5
   1f998:	1ad2      	subs	r2, r2, r3
   1f99a:	1aed      	subs	r5, r5, r3
   1f99c:	9207      	str	r2, [sp, #28]
   1f99e:	9a08      	ldr	r2, [sp, #32]
   1f9a0:	1ad3      	subs	r3, r2, r3
   1f9a2:	9308      	str	r3, [sp, #32]
   1f9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f9a6:	b31b      	cbz	r3, 1f9f0 <_dtoa_r+0x798>
   1f9a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f9aa:	2b00      	cmp	r3, #0
   1f9ac:	f000 80ad 	beq.w	1fb0a <_dtoa_r+0x8b2>
   1f9b0:	2e00      	cmp	r6, #0
   1f9b2:	dd13      	ble.n	1f9dc <_dtoa_r+0x784>
   1f9b4:	4639      	mov	r1, r7
   1f9b6:	4632      	mov	r2, r6
   1f9b8:	4620      	mov	r0, r4
   1f9ba:	f01b ff9f 	bl	3b8fc <__pow5mult>
   1f9be:	ee18 2a10 	vmov	r2, s16
   1f9c2:	4601      	mov	r1, r0
   1f9c4:	4607      	mov	r7, r0
   1f9c6:	4620      	mov	r0, r4
   1f9c8:	f01b fef0 	bl	3b7ac <__multiply>
   1f9cc:	4680      	mov	r8, r0
   1f9ce:	ee18 1a10 	vmov	r1, s16
   1f9d2:	4620      	mov	r0, r4
   1f9d4:	ee08 8a10 	vmov	s16, r8
   1f9d8:	f01b fe1e 	bl	3b618 <_Bfree>
   1f9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f9de:	1b9a      	subs	r2, r3, r6
   1f9e0:	d006      	beq.n	1f9f0 <_dtoa_r+0x798>
   1f9e2:	ee18 1a10 	vmov	r1, s16
   1f9e6:	4620      	mov	r0, r4
   1f9e8:	f01b ff88 	bl	3b8fc <__pow5mult>
   1f9ec:	ee08 0a10 	vmov	s16, r0
   1f9f0:	2101      	movs	r1, #1
   1f9f2:	4620      	mov	r0, r4
   1f9f4:	f01b fec4 	bl	3b780 <__i2b>
   1f9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f9fa:	4606      	mov	r6, r0
   1f9fc:	2b00      	cmp	r3, #0
   1f9fe:	f340 8086 	ble.w	1fb0e <_dtoa_r+0x8b6>
   1fa02:	461a      	mov	r2, r3
   1fa04:	4601      	mov	r1, r0
   1fa06:	4620      	mov	r0, r4
   1fa08:	f01b ff78 	bl	3b8fc <__pow5mult>
   1fa0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fa0e:	4606      	mov	r6, r0
   1fa10:	2b01      	cmp	r3, #1
   1fa12:	dd7f      	ble.n	1fb14 <_dtoa_r+0x8bc>
   1fa14:	f04f 0800 	mov.w	r8, #0
   1fa18:	6933      	ldr	r3, [r6, #16]
   1fa1a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1fa1e:	6918      	ldr	r0, [r3, #16]
   1fa20:	f022 f9cc 	bl	41dbc <__hi0bits>
   1fa24:	f1c0 0020 	rsb	r0, r0, #32
   1fa28:	9b08      	ldr	r3, [sp, #32]
   1fa2a:	4418      	add	r0, r3
   1fa2c:	f010 001f 	ands.w	r0, r0, #31
   1fa30:	f000 8091 	beq.w	1fb56 <_dtoa_r+0x8fe>
   1fa34:	f1c0 0320 	rsb	r3, r0, #32
   1fa38:	2b04      	cmp	r3, #4
   1fa3a:	f340 8089 	ble.w	1fb50 <_dtoa_r+0x8f8>
   1fa3e:	f1c0 001c 	rsb	r0, r0, #28
   1fa42:	9b07      	ldr	r3, [sp, #28]
   1fa44:	4405      	add	r5, r0
   1fa46:	4403      	add	r3, r0
   1fa48:	9307      	str	r3, [sp, #28]
   1fa4a:	9b08      	ldr	r3, [sp, #32]
   1fa4c:	4403      	add	r3, r0
   1fa4e:	9308      	str	r3, [sp, #32]
   1fa50:	9b07      	ldr	r3, [sp, #28]
   1fa52:	2b00      	cmp	r3, #0
   1fa54:	dd07      	ble.n	1fa66 <_dtoa_r+0x80e>
   1fa56:	ee18 1a10 	vmov	r1, s16
   1fa5a:	461a      	mov	r2, r3
   1fa5c:	4620      	mov	r0, r4
   1fa5e:	f01b ffa7 	bl	3b9b0 <__lshift>
   1fa62:	ee08 0a10 	vmov	s16, r0
   1fa66:	9b08      	ldr	r3, [sp, #32]
   1fa68:	2b00      	cmp	r3, #0
   1fa6a:	dd05      	ble.n	1fa78 <_dtoa_r+0x820>
   1fa6c:	4631      	mov	r1, r6
   1fa6e:	461a      	mov	r2, r3
   1fa70:	4620      	mov	r0, r4
   1fa72:	f01b ff9d 	bl	3b9b0 <__lshift>
   1fa76:	4606      	mov	r6, r0
   1fa78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fa7a:	2b00      	cmp	r3, #0
   1fa7c:	d06d      	beq.n	1fb5a <_dtoa_r+0x902>
   1fa7e:	4631      	mov	r1, r6
   1fa80:	ee18 0a10 	vmov	r0, s16
   1fa84:	f022 f9e9 	bl	41e5a <__mcmp>
   1fa88:	2800      	cmp	r0, #0
   1fa8a:	da66      	bge.n	1fb5a <_dtoa_r+0x902>
   1fa8c:	9b03      	ldr	r3, [sp, #12]
   1fa8e:	ee18 1a10 	vmov	r1, s16
   1fa92:	220a      	movs	r2, #10
   1fa94:	4620      	mov	r0, r4
   1fa96:	3b01      	subs	r3, #1
   1fa98:	9303      	str	r3, [sp, #12]
   1fa9a:	2300      	movs	r3, #0
   1fa9c:	f01b fdde 	bl	3b65c <__multadd>
   1faa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1faa2:	ee08 0a10 	vmov	s16, r0
   1faa6:	2b00      	cmp	r3, #0
   1faa8:	f000 81af 	beq.w	1fe0a <_dtoa_r+0xbb2>
   1faac:	2300      	movs	r3, #0
   1faae:	4639      	mov	r1, r7
   1fab0:	220a      	movs	r2, #10
   1fab2:	4620      	mov	r0, r4
   1fab4:	f01b fdd2 	bl	3b65c <__multadd>
   1fab8:	9b05      	ldr	r3, [sp, #20]
   1faba:	4607      	mov	r7, r0
   1fabc:	2b00      	cmp	r3, #0
   1fabe:	f300 808d 	bgt.w	1fbdc <_dtoa_r+0x984>
   1fac2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fac4:	2b02      	cmp	r3, #2
   1fac6:	dc50      	bgt.n	1fb6a <_dtoa_r+0x912>
   1fac8:	e088      	b.n	1fbdc <_dtoa_r+0x984>
   1faca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1facc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1fad0:	e74c      	b.n	1f96c <_dtoa_r+0x714>
   1fad2:	9b06      	ldr	r3, [sp, #24]
   1fad4:	1e5e      	subs	r6, r3, #1
   1fad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fad8:	42b3      	cmp	r3, r6
   1fada:	bfb7      	itett	lt
   1fadc:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   1fade:	1b9e      	subge	r6, r3, r6
   1fae0:	9609      	strlt	r6, [sp, #36]	; 0x24
   1fae2:	1af2      	sublt	r2, r6, r3
   1fae4:	bfbf      	itttt	lt
   1fae6:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
   1fae8:	2600      	movlt	r6, #0
   1faea:	189b      	addlt	r3, r3, r2
   1faec:	930b      	strlt	r3, [sp, #44]	; 0x2c
   1faee:	9b06      	ldr	r3, [sp, #24]
   1faf0:	2b00      	cmp	r3, #0
   1faf2:	bfb7      	itett	lt
   1faf4:	e9dd 2306 	ldrdlt	r2, r3, [sp, #24]
   1faf8:	e9dd 3506 	ldrdge	r3, r5, [sp, #24]
   1fafc:	1a9d      	sublt	r5, r3, r2
   1fafe:	2300      	movlt	r3, #0
   1fb00:	e736      	b.n	1f970 <_dtoa_r+0x718>
   1fb02:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1fb04:	9d07      	ldr	r5, [sp, #28]
   1fb06:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1fb08:	e73d      	b.n	1f986 <_dtoa_r+0x72e>
   1fb0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fb0c:	e769      	b.n	1f9e2 <_dtoa_r+0x78a>
   1fb0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fb10:	2b01      	cmp	r3, #1
   1fb12:	dc18      	bgt.n	1fb46 <_dtoa_r+0x8ee>
   1fb14:	f1ba 0f00 	cmp.w	sl, #0
   1fb18:	d115      	bne.n	1fb46 <_dtoa_r+0x8ee>
   1fb1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1fb1e:	b993      	cbnz	r3, 1fb46 <_dtoa_r+0x8ee>
   1fb20:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1fb24:	0d1b      	lsrs	r3, r3, #20
   1fb26:	051b      	lsls	r3, r3, #20
   1fb28:	b183      	cbz	r3, 1fb4c <_dtoa_r+0x8f4>
   1fb2a:	9b07      	ldr	r3, [sp, #28]
   1fb2c:	f04f 0801 	mov.w	r8, #1
   1fb30:	3301      	adds	r3, #1
   1fb32:	9307      	str	r3, [sp, #28]
   1fb34:	9b08      	ldr	r3, [sp, #32]
   1fb36:	3301      	adds	r3, #1
   1fb38:	9308      	str	r3, [sp, #32]
   1fb3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fb3c:	2b00      	cmp	r3, #0
   1fb3e:	f47f af6b 	bne.w	1fa18 <_dtoa_r+0x7c0>
   1fb42:	2001      	movs	r0, #1
   1fb44:	e770      	b.n	1fa28 <_dtoa_r+0x7d0>
   1fb46:	f04f 0800 	mov.w	r8, #0
   1fb4a:	e7f6      	b.n	1fb3a <_dtoa_r+0x8e2>
   1fb4c:	4698      	mov	r8, r3
   1fb4e:	e7f4      	b.n	1fb3a <_dtoa_r+0x8e2>
   1fb50:	f43f af7e 	beq.w	1fa50 <_dtoa_r+0x7f8>
   1fb54:	4618      	mov	r0, r3
   1fb56:	301c      	adds	r0, #28
   1fb58:	e773      	b.n	1fa42 <_dtoa_r+0x7ea>
   1fb5a:	9b06      	ldr	r3, [sp, #24]
   1fb5c:	2b00      	cmp	r3, #0
   1fb5e:	dc37      	bgt.n	1fbd0 <_dtoa_r+0x978>
   1fb60:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fb62:	2b02      	cmp	r3, #2
   1fb64:	dd34      	ble.n	1fbd0 <_dtoa_r+0x978>
   1fb66:	9b06      	ldr	r3, [sp, #24]
   1fb68:	9305      	str	r3, [sp, #20]
   1fb6a:	9b05      	ldr	r3, [sp, #20]
   1fb6c:	b96b      	cbnz	r3, 1fb8a <_dtoa_r+0x932>
   1fb6e:	4631      	mov	r1, r6
   1fb70:	2205      	movs	r2, #5
   1fb72:	4620      	mov	r0, r4
   1fb74:	f01b fd72 	bl	3b65c <__multadd>
   1fb78:	4601      	mov	r1, r0
   1fb7a:	4606      	mov	r6, r0
   1fb7c:	ee18 0a10 	vmov	r0, s16
   1fb80:	f022 f96b 	bl	41e5a <__mcmp>
   1fb84:	2800      	cmp	r0, #0
   1fb86:	f73f adbd 	bgt.w	1f704 <_dtoa_r+0x4ac>
   1fb8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fb8c:	9d04      	ldr	r5, [sp, #16]
   1fb8e:	43db      	mvns	r3, r3
   1fb90:	9303      	str	r3, [sp, #12]
   1fb92:	f04f 0800 	mov.w	r8, #0
   1fb96:	4631      	mov	r1, r6
   1fb98:	4620      	mov	r0, r4
   1fb9a:	f01b fd3d 	bl	3b618 <_Bfree>
   1fb9e:	2f00      	cmp	r7, #0
   1fba0:	f43f aea6 	beq.w	1f8f0 <_dtoa_r+0x698>
   1fba4:	f1b8 0f00 	cmp.w	r8, #0
   1fba8:	d005      	beq.n	1fbb6 <_dtoa_r+0x95e>
   1fbaa:	45b8      	cmp	r8, r7
   1fbac:	d003      	beq.n	1fbb6 <_dtoa_r+0x95e>
   1fbae:	4641      	mov	r1, r8
   1fbb0:	4620      	mov	r0, r4
   1fbb2:	f01b fd31 	bl	3b618 <_Bfree>
   1fbb6:	4639      	mov	r1, r7
   1fbb8:	4620      	mov	r0, r4
   1fbba:	f01b fd2d 	bl	3b618 <_Bfree>
   1fbbe:	e697      	b.n	1f8f0 <_dtoa_r+0x698>
   1fbc0:	2600      	movs	r6, #0
   1fbc2:	4637      	mov	r7, r6
   1fbc4:	e7e1      	b.n	1fb8a <_dtoa_r+0x932>
   1fbc6:	9703      	str	r7, [sp, #12]
   1fbc8:	4637      	mov	r7, r6
   1fbca:	e59b      	b.n	1f704 <_dtoa_r+0x4ac>
   1fbcc:	40240000 	.word	0x40240000
   1fbd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fbd2:	2b00      	cmp	r3, #0
   1fbd4:	f000 80ca 	beq.w	1fd6c <_dtoa_r+0xb14>
   1fbd8:	9b06      	ldr	r3, [sp, #24]
   1fbda:	9305      	str	r3, [sp, #20]
   1fbdc:	2d00      	cmp	r5, #0
   1fbde:	dd05      	ble.n	1fbec <_dtoa_r+0x994>
   1fbe0:	4639      	mov	r1, r7
   1fbe2:	462a      	mov	r2, r5
   1fbe4:	4620      	mov	r0, r4
   1fbe6:	f01b fee3 	bl	3b9b0 <__lshift>
   1fbea:	4607      	mov	r7, r0
   1fbec:	f1b8 0f00 	cmp.w	r8, #0
   1fbf0:	d05b      	beq.n	1fcaa <_dtoa_r+0xa52>
   1fbf2:	6879      	ldr	r1, [r7, #4]
   1fbf4:	4620      	mov	r0, r4
   1fbf6:	f01b fccf 	bl	3b598 <_Balloc>
   1fbfa:	4605      	mov	r5, r0
   1fbfc:	b928      	cbnz	r0, 1fc0a <_dtoa_r+0x9b2>
   1fbfe:	4b87      	ldr	r3, [pc, #540]	; (1fe1c <_dtoa_r+0xbc4>)
   1fc00:	4602      	mov	r2, r0
   1fc02:	f240 21ea 	movw	r1, #746	; 0x2ea
   1fc06:	f7ff bb3d 	b.w	1f284 <_dtoa_r+0x2c>
   1fc0a:	693a      	ldr	r2, [r7, #16]
   1fc0c:	f107 010c 	add.w	r1, r7, #12
   1fc10:	300c      	adds	r0, #12
   1fc12:	3202      	adds	r2, #2
   1fc14:	0092      	lsls	r2, r2, #2
   1fc16:	f021 fbed 	bl	413f4 <memcpy>
   1fc1a:	2201      	movs	r2, #1
   1fc1c:	4629      	mov	r1, r5
   1fc1e:	4620      	mov	r0, r4
   1fc20:	f01b fec6 	bl	3b9b0 <__lshift>
   1fc24:	9b04      	ldr	r3, [sp, #16]
   1fc26:	46b8      	mov	r8, r7
   1fc28:	4607      	mov	r7, r0
   1fc2a:	f103 0901 	add.w	r9, r3, #1
   1fc2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fc32:	4413      	add	r3, r2
   1fc34:	9308      	str	r3, [sp, #32]
   1fc36:	f00a 0301 	and.w	r3, sl, #1
   1fc3a:	9307      	str	r3, [sp, #28]
   1fc3c:	4631      	mov	r1, r6
   1fc3e:	ee18 0a10 	vmov	r0, s16
   1fc42:	f021 fe7e 	bl	41942 <quorem>
   1fc46:	4641      	mov	r1, r8
   1fc48:	9005      	str	r0, [sp, #20]
   1fc4a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   1fc4e:	ee18 0a10 	vmov	r0, s16
   1fc52:	f109 3bff 	add.w	fp, r9, #4294967295
   1fc56:	f022 f900 	bl	41e5a <__mcmp>
   1fc5a:	463a      	mov	r2, r7
   1fc5c:	9006      	str	r0, [sp, #24]
   1fc5e:	4631      	mov	r1, r6
   1fc60:	4620      	mov	r0, r4
   1fc62:	f01b ff15 	bl	3ba90 <__mdiff>
   1fc66:	68c2      	ldr	r2, [r0, #12]
   1fc68:	4605      	mov	r5, r0
   1fc6a:	bb02      	cbnz	r2, 1fcae <_dtoa_r+0xa56>
   1fc6c:	4601      	mov	r1, r0
   1fc6e:	ee18 0a10 	vmov	r0, s16
   1fc72:	f022 f8f2 	bl	41e5a <__mcmp>
   1fc76:	4602      	mov	r2, r0
   1fc78:	4629      	mov	r1, r5
   1fc7a:	4620      	mov	r0, r4
   1fc7c:	9209      	str	r2, [sp, #36]	; 0x24
   1fc7e:	f01b fccb 	bl	3b618 <_Bfree>
   1fc82:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fc84:	464d      	mov	r5, r9
   1fc86:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fc88:	ea43 0102 	orr.w	r1, r3, r2
   1fc8c:	9b07      	ldr	r3, [sp, #28]
   1fc8e:	430b      	orrs	r3, r1
   1fc90:	d10f      	bne.n	1fcb2 <_dtoa_r+0xa5a>
   1fc92:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1fc96:	d02a      	beq.n	1fcee <_dtoa_r+0xa96>
   1fc98:	9b06      	ldr	r3, [sp, #24]
   1fc9a:	2b00      	cmp	r3, #0
   1fc9c:	dd02      	ble.n	1fca4 <_dtoa_r+0xa4c>
   1fc9e:	9b05      	ldr	r3, [sp, #20]
   1fca0:	f103 0a31 	add.w	sl, r3, #49	; 0x31
   1fca4:	f88b a000 	strb.w	sl, [fp]
   1fca8:	e775      	b.n	1fb96 <_dtoa_r+0x93e>
   1fcaa:	4638      	mov	r0, r7
   1fcac:	e7ba      	b.n	1fc24 <_dtoa_r+0x9cc>
   1fcae:	2201      	movs	r2, #1
   1fcb0:	e7e2      	b.n	1fc78 <_dtoa_r+0xa20>
   1fcb2:	9b06      	ldr	r3, [sp, #24]
   1fcb4:	2b00      	cmp	r3, #0
   1fcb6:	db04      	blt.n	1fcc2 <_dtoa_r+0xa6a>
   1fcb8:	9920      	ldr	r1, [sp, #128]	; 0x80
   1fcba:	430b      	orrs	r3, r1
   1fcbc:	9907      	ldr	r1, [sp, #28]
   1fcbe:	430b      	orrs	r3, r1
   1fcc0:	d122      	bne.n	1fd08 <_dtoa_r+0xab0>
   1fcc2:	2a00      	cmp	r2, #0
   1fcc4:	ddee      	ble.n	1fca4 <_dtoa_r+0xa4c>
   1fcc6:	ee18 1a10 	vmov	r1, s16
   1fcca:	2201      	movs	r2, #1
   1fccc:	4620      	mov	r0, r4
   1fcce:	f01b fe6f 	bl	3b9b0 <__lshift>
   1fcd2:	4631      	mov	r1, r6
   1fcd4:	ee08 0a10 	vmov	s16, r0
   1fcd8:	f022 f8bf 	bl	41e5a <__mcmp>
   1fcdc:	2800      	cmp	r0, #0
   1fcde:	dc03      	bgt.n	1fce8 <_dtoa_r+0xa90>
   1fce0:	d1e0      	bne.n	1fca4 <_dtoa_r+0xa4c>
   1fce2:	f01a 0f01 	tst.w	sl, #1
   1fce6:	d0dd      	beq.n	1fca4 <_dtoa_r+0xa4c>
   1fce8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1fcec:	d1d7      	bne.n	1fc9e <_dtoa_r+0xa46>
   1fcee:	2339      	movs	r3, #57	; 0x39
   1fcf0:	f88b 3000 	strb.w	r3, [fp]
   1fcf4:	462b      	mov	r3, r5
   1fcf6:	461d      	mov	r5, r3
   1fcf8:	3b01      	subs	r3, #1
   1fcfa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1fcfe:	2a39      	cmp	r2, #57	; 0x39
   1fd00:	d070      	beq.n	1fde4 <_dtoa_r+0xb8c>
   1fd02:	3201      	adds	r2, #1
   1fd04:	701a      	strb	r2, [r3, #0]
   1fd06:	e746      	b.n	1fb96 <_dtoa_r+0x93e>
   1fd08:	2a00      	cmp	r2, #0
   1fd0a:	dd07      	ble.n	1fd1c <_dtoa_r+0xac4>
   1fd0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1fd10:	d0ed      	beq.n	1fcee <_dtoa_r+0xa96>
   1fd12:	f10a 0301 	add.w	r3, sl, #1
   1fd16:	f88b 3000 	strb.w	r3, [fp]
   1fd1a:	e73c      	b.n	1fb96 <_dtoa_r+0x93e>
   1fd1c:	9b08      	ldr	r3, [sp, #32]
   1fd1e:	f809 ac01 	strb.w	sl, [r9, #-1]
   1fd22:	4599      	cmp	r9, r3
   1fd24:	d046      	beq.n	1fdb4 <_dtoa_r+0xb5c>
   1fd26:	ee18 1a10 	vmov	r1, s16
   1fd2a:	2300      	movs	r3, #0
   1fd2c:	220a      	movs	r2, #10
   1fd2e:	4620      	mov	r0, r4
   1fd30:	f01b fc94 	bl	3b65c <__multadd>
   1fd34:	45b8      	cmp	r8, r7
   1fd36:	ee08 0a10 	vmov	s16, r0
   1fd3a:	f04f 0300 	mov.w	r3, #0
   1fd3e:	f04f 020a 	mov.w	r2, #10
   1fd42:	4641      	mov	r1, r8
   1fd44:	4620      	mov	r0, r4
   1fd46:	d106      	bne.n	1fd56 <_dtoa_r+0xafe>
   1fd48:	f01b fc88 	bl	3b65c <__multadd>
   1fd4c:	4680      	mov	r8, r0
   1fd4e:	4607      	mov	r7, r0
   1fd50:	f109 0901 	add.w	r9, r9, #1
   1fd54:	e772      	b.n	1fc3c <_dtoa_r+0x9e4>
   1fd56:	f01b fc81 	bl	3b65c <__multadd>
   1fd5a:	4639      	mov	r1, r7
   1fd5c:	4680      	mov	r8, r0
   1fd5e:	2300      	movs	r3, #0
   1fd60:	220a      	movs	r2, #10
   1fd62:	4620      	mov	r0, r4
   1fd64:	f01b fc7a 	bl	3b65c <__multadd>
   1fd68:	4607      	mov	r7, r0
   1fd6a:	e7f1      	b.n	1fd50 <_dtoa_r+0xaf8>
   1fd6c:	9b06      	ldr	r3, [sp, #24]
   1fd6e:	9305      	str	r3, [sp, #20]
   1fd70:	9d04      	ldr	r5, [sp, #16]
   1fd72:	4631      	mov	r1, r6
   1fd74:	ee18 0a10 	vmov	r0, s16
   1fd78:	f021 fde3 	bl	41942 <quorem>
   1fd7c:	9b04      	ldr	r3, [sp, #16]
   1fd7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   1fd82:	f805 ab01 	strb.w	sl, [r5], #1
   1fd86:	1aea      	subs	r2, r5, r3
   1fd88:	9b05      	ldr	r3, [sp, #20]
   1fd8a:	4293      	cmp	r3, r2
   1fd8c:	dd09      	ble.n	1fda2 <_dtoa_r+0xb4a>
   1fd8e:	ee18 1a10 	vmov	r1, s16
   1fd92:	2300      	movs	r3, #0
   1fd94:	220a      	movs	r2, #10
   1fd96:	4620      	mov	r0, r4
   1fd98:	f01b fc60 	bl	3b65c <__multadd>
   1fd9c:	ee08 0a10 	vmov	s16, r0
   1fda0:	e7e7      	b.n	1fd72 <_dtoa_r+0xb1a>
   1fda2:	9b05      	ldr	r3, [sp, #20]
   1fda4:	f04f 0800 	mov.w	r8, #0
   1fda8:	2b00      	cmp	r3, #0
   1fdaa:	bfcc      	ite	gt
   1fdac:	461d      	movgt	r5, r3
   1fdae:	2501      	movle	r5, #1
   1fdb0:	9b04      	ldr	r3, [sp, #16]
   1fdb2:	441d      	add	r5, r3
   1fdb4:	ee18 1a10 	vmov	r1, s16
   1fdb8:	2201      	movs	r2, #1
   1fdba:	4620      	mov	r0, r4
   1fdbc:	f01b fdf8 	bl	3b9b0 <__lshift>
   1fdc0:	4631      	mov	r1, r6
   1fdc2:	ee08 0a10 	vmov	s16, r0
   1fdc6:	f022 f848 	bl	41e5a <__mcmp>
   1fdca:	2800      	cmp	r0, #0
   1fdcc:	dc92      	bgt.n	1fcf4 <_dtoa_r+0xa9c>
   1fdce:	d102      	bne.n	1fdd6 <_dtoa_r+0xb7e>
   1fdd0:	f01a 0f01 	tst.w	sl, #1
   1fdd4:	d18e      	bne.n	1fcf4 <_dtoa_r+0xa9c>
   1fdd6:	462b      	mov	r3, r5
   1fdd8:	461d      	mov	r5, r3
   1fdda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1fdde:	2a30      	cmp	r2, #48	; 0x30
   1fde0:	d0fa      	beq.n	1fdd8 <_dtoa_r+0xb80>
   1fde2:	e6d8      	b.n	1fb96 <_dtoa_r+0x93e>
   1fde4:	9a04      	ldr	r2, [sp, #16]
   1fde6:	429a      	cmp	r2, r3
   1fde8:	d185      	bne.n	1fcf6 <_dtoa_r+0xa9e>
   1fdea:	9b03      	ldr	r3, [sp, #12]
   1fdec:	3301      	adds	r3, #1
   1fdee:	9303      	str	r3, [sp, #12]
   1fdf0:	2331      	movs	r3, #49	; 0x31
   1fdf2:	7013      	strb	r3, [r2, #0]
   1fdf4:	e6cf      	b.n	1fb96 <_dtoa_r+0x93e>
   1fdf6:	4b0a      	ldr	r3, [pc, #40]	; (1fe20 <_dtoa_r+0xbc8>)
   1fdf8:	f7ff ba98 	b.w	1f32c <_dtoa_r+0xd4>
   1fdfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fdfe:	2b00      	cmp	r3, #0
   1fe00:	f47f aa71 	bne.w	1f2e6 <_dtoa_r+0x8e>
   1fe04:	4b07      	ldr	r3, [pc, #28]	; (1fe24 <_dtoa_r+0xbcc>)
   1fe06:	f7ff ba91 	b.w	1f32c <_dtoa_r+0xd4>
   1fe0a:	9b05      	ldr	r3, [sp, #20]
   1fe0c:	2b00      	cmp	r3, #0
   1fe0e:	dcaf      	bgt.n	1fd70 <_dtoa_r+0xb18>
   1fe10:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fe12:	2b02      	cmp	r3, #2
   1fe14:	f73f aea9 	bgt.w	1fb6a <_dtoa_r+0x912>
   1fe18:	e7aa      	b.n	1fd70 <_dtoa_r+0xb18>
   1fe1a:	bf00      	nop
   1fe1c:	0004bf1e 	.word	0x0004bf1e
   1fe20:	00045af1 	.word	0x00045af1
   1fe24:	0004be86 	.word	0x0004be86

0001fe28 <main>:
		NULL, NULL, NULL, -1, 0, 0);


void main(void)
{
	LOG_INF("nRF Cloud MQTT multi-service sample has started.");
   1fe28:	2149      	movs	r1, #73	; 0x49
   1fe2a:	4801      	ldr	r0, [pc, #4]	; (1fe30 <main+0x8>)
   1fe2c:	f01c be68 	b.w	3cb00 <z_log_minimal_printk>
   1fe30:	000434f4 	.word	0x000434f4

0001fe34 <create_timestamped_data_message_object>:
 *
 * @param appid
 * @return cJSON* - the timestamped data device message object if successful, NULL otherwise.
 */
static cJSON *create_timestamped_data_message_object(const char *const appid)
{
   1fe34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fe36:	4605      	mov	r5, r0
	cJSON *msg_obj = NULL;
	int64_t timestamp;

	if (date_time_now(&timestamp))
   1fe38:	4668      	mov	r0, sp
   1fe3a:	f008 fe93 	bl	28b64 <date_time_now>
   1fe3e:	b130      	cbz	r0, 1fe4e <create_timestamped_data_message_object+0x1a>
	{
		LOG_ERR("Failed to create timestamp for data message "
   1fe40:	462a      	mov	r2, r5
   1fe42:	2145      	movs	r1, #69	; 0x45
   1fe44:	4818      	ldr	r0, [pc, #96]	; (1fea8 <create_timestamped_data_message_object+0x74>)
   1fe46:	f01c fe5b 	bl	3cb00 <z_log_minimal_printk>
	{
		LOG_ERR("Failed to populate timestamped data message object "
				"with appid %s",
				log_strdup(appid));
		cJSON_Delete(msg_obj);
		return NULL;
   1fe4a:	2400      	movs	r4, #0
   1fe4c:	e008      	b.n	1fe60 <create_timestamped_data_message_object+0x2c>
	msg_obj = cJSON_CreateObject();
   1fe4e:	f012 f947 	bl	320e0 <cJSON_CreateObject>
		LOG_ERR("Failed to create container object for timestamped data message "
   1fe52:	462a      	mov	r2, r5
	if (msg_obj == NULL)
   1fe54:	4604      	mov	r4, r0
   1fe56:	b930      	cbnz	r0, 1fe66 <create_timestamped_data_message_object+0x32>
		LOG_ERR("Failed to create container object for timestamped data message "
   1fe58:	2145      	movs	r1, #69	; 0x45
   1fe5a:	4814      	ldr	r0, [pc, #80]	; (1feac <create_timestamped_data_message_object+0x78>)
   1fe5c:	f01c fe50 	bl	3cb00 <z_log_minimal_printk>
	}

	return msg_obj;
}
   1fe60:	4620      	mov	r0, r4
   1fe62:	b003      	add	sp, #12
   1fe64:	bd30      	pop	{r4, r5, pc}
	if ((cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_APPID_KEY, appid) == NULL) ||
   1fe66:	4912      	ldr	r1, [pc, #72]	; (1feb0 <create_timestamped_data_message_object+0x7c>)
   1fe68:	f01f ff12 	bl	3fc90 <cJSON_AddStringToObject>
   1fe6c:	b940      	cbnz	r0, 1fe80 <create_timestamped_data_message_object+0x4c>
		LOG_ERR("Failed to populate timestamped data message object "
   1fe6e:	462a      	mov	r2, r5
   1fe70:	2145      	movs	r1, #69	; 0x45
   1fe72:	4810      	ldr	r0, [pc, #64]	; (1feb4 <create_timestamped_data_message_object+0x80>)
   1fe74:	f01c fe44 	bl	3cb00 <z_log_minimal_printk>
		cJSON_Delete(msg_obj);
   1fe78:	4620      	mov	r0, r4
   1fe7a:	f012 f86f 	bl	31f5c <cJSON_Delete>
   1fe7e:	e7e4      	b.n	1fe4a <create_timestamped_data_message_object+0x16>
		(cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   1fe80:	4620      	mov	r0, r4
   1fe82:	4a0d      	ldr	r2, [pc, #52]	; (1feb8 <create_timestamped_data_message_object+0x84>)
   1fe84:	490d      	ldr	r1, [pc, #52]	; (1febc <create_timestamped_data_message_object+0x88>)
   1fe86:	f01f ff03 	bl	3fc90 <cJSON_AddStringToObject>
	if ((cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_APPID_KEY, appid) == NULL) ||
   1fe8a:	2800      	cmp	r0, #0
   1fe8c:	d0ef      	beq.n	1fe6e <create_timestamped_data_message_object+0x3a>
		(cJSON_AddNumberToObject(msg_obj, NRF_CLOUD_MSG_TIMESTAMP_KEY,
   1fe8e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fe92:	f7fc fc63 	bl	1c75c <__aeabi_l2d>
   1fe96:	4602      	mov	r2, r0
   1fe98:	460b      	mov	r3, r1
   1fe9a:	4620      	mov	r0, r4
   1fe9c:	4908      	ldr	r1, [pc, #32]	; (1fec0 <create_timestamped_data_message_object+0x8c>)
   1fe9e:	f01f fecb 	bl	3fc38 <cJSON_AddNumberToObject>
								 NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA) == NULL) ||
   1fea2:	2800      	cmp	r0, #0
   1fea4:	d1dc      	bne.n	1fe60 <create_timestamped_data_message_object+0x2c>
   1fea6:	e7e2      	b.n	1fe6e <create_timestamped_data_message_object+0x3a>
   1fea8:	00043551 	.word	0x00043551
   1feac:	00043590 	.word	0x00043590
   1feb0:	000435e2 	.word	0x000435e2
   1feb4:	000435e8 	.word	0x000435e8
   1feb8:	0004362e 	.word	0x0004362e
   1febc:	00043633 	.word	0x00043633
   1fec0:	0004363f 	.word	0x0004363f

0001fec4 <on_location_update>:
 *
 * @param location_data - The received location update.
 *
 */
static void on_location_update(const struct location_data location_data)
{
   1fec4:	b084      	sub	sp, #16
   1fec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1feca:	ed2d 8b02 	vpush	{d8}
   1fece:	b099      	sub	sp, #100	; 0x64
   1fed0:	ac24      	add	r4, sp, #144	; 0x90
   1fed2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1fed6:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
   1feda:	f89d 8090 	ldrb.w	r8, [sp, #144]	; 0x90
	LOG_INF("Location Updated: %.06f N %.06f W, accuracy: %.01f m, Method: %s",
   1fede:	982a      	ldr	r0, [sp, #168]	; 0xa8
   1fee0:	f7fc fc12 	bl	1c708 <__aeabi_f2d>
   1fee4:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
   1fee8:	f1b8 0f01 	cmp.w	r8, #1
   1feec:	f000 80ab 	beq.w	20046 <on_location_update+0x182>
   1fef0:	f1b8 0f02 	cmp.w	r8, #2
   1fef4:	f000 80a9 	beq.w	2004a <on_location_update+0x186>
   1fef8:	4b59      	ldr	r3, [pc, #356]	; (20060 <on_location_update+0x19c>)
   1fefa:	4a5a      	ldr	r2, [pc, #360]	; (20064 <on_location_update+0x1a0>)
   1fefc:	f1b8 0f03 	cmp.w	r8, #3
   1ff00:	bf18      	it	ne
   1ff02:	4613      	movne	r3, r2
   1ff04:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ff08:	9304      	str	r3, [sp, #16]
   1ff0a:	4632      	mov	r2, r6
   1ff0c:	463b      	mov	r3, r7
   1ff0e:	2149      	movs	r1, #73	; 0x49
   1ff10:	e9cd 4500 	strd	r4, r5, [sp]
   1ff14:	4854      	ldr	r0, [pc, #336]	; (20068 <on_location_update+0x1a4>)
   1ff16:	f01c fdf3 	bl	3cb00 <z_log_minimal_printk>
			location_data.method == LOCATION_METHOD_CELLULAR ? "Cellular" : location_data.method == LOCATION_METHOD_GNSS ? "GNSS"
																		: location_data.method == LOCATION_METHOD_WIFI	 ? "WIFI"
																														 : "Invalid");

	/* If the position update was derived using GNSS, send it onward to nRF Cloud. */
	if (location_data.method == LOCATION_METHOD_GNSS)
   1ff1a:	f1b8 0f02 	cmp.w	r8, #2
   1ff1e:	f040 808b 	bne.w	20038 <on_location_update+0x174>
	{
		LOG_INF("GNSS Position Update! Sending to nRF Cloud...");
   1ff22:	2149      	movs	r1, #73	; 0x49
   1ff24:	4851      	ldr	r0, [pc, #324]	; (2006c <on_location_update+0x1a8>)
   1ff26:	f01c fdeb 	bl	3cb00 <z_log_minimal_printk>
		/* Synthesize an NMEA message from the provided lat/long/timestamp.
		 * This is necessary, because the nRF Cloud MQTT API only supports NMEA messages.
		 */

		char nmea_buf[50];
		int lat_deg = floor(fabs(location_data.latitude));
   1ff2a:	4630      	mov	r0, r6
   1ff2c:	4639      	mov	r1, r7
   1ff2e:	f021 fa38 	bl	413a2 <fabs>
   1ff32:	f7fe fb15 	bl	1e560 <floor>
   1ff36:	f7fc feef 	bl	1cd18 <__aeabi_d2iz>
		int lon_deg = floor(fabs(location_data.longitude));
   1ff3a:	4629      	mov	r1, r5
		int lat_deg = floor(fabs(location_data.latitude));
   1ff3c:	4682      	mov	sl, r0
		int lon_deg = floor(fabs(location_data.longitude));
   1ff3e:	4620      	mov	r0, r4
   1ff40:	f021 fa2f 	bl	413a2 <fabs>
   1ff44:	f7fe fb0c 	bl	1e560 <floor>
   1ff48:	f7fc fee6 	bl	1cd18 <__aeabi_d2iz>
		double lat_min = (fabs(location_data.latitude) - lat_deg) * 60;
   1ff4c:	4639      	mov	r1, r7
		int lon_deg = floor(fabs(location_data.longitude));
   1ff4e:	4683      	mov	fp, r0
		double lat_min = (fabs(location_data.latitude) - lat_deg) * 60;
   1ff50:	4630      	mov	r0, r6
   1ff52:	f021 fa26 	bl	413a2 <fabs>
   1ff56:	4680      	mov	r8, r0
   1ff58:	4650      	mov	r0, sl
   1ff5a:	4689      	mov	r9, r1
   1ff5c:	f7fc fbc2 	bl	1c6e4 <__aeabi_i2d>
   1ff60:	4602      	mov	r2, r0
   1ff62:	460b      	mov	r3, r1
   1ff64:	4640      	mov	r0, r8
   1ff66:	4649      	mov	r1, r9
   1ff68:	f7fc fa6e 	bl	1c448 <__aeabi_dsub>
   1ff6c:	2200      	movs	r2, #0
   1ff6e:	4b40      	ldr	r3, [pc, #256]	; (20070 <on_location_update+0x1ac>)
   1ff70:	f7fc fc22 	bl	1c7b8 <__aeabi_dmul>
   1ff74:	ec41 0b18 	vmov	d8, r0, r1
		double lon_min = (fabs(location_data.longitude) - lon_deg) * 60;
   1ff78:	4620      	mov	r0, r4
   1ff7a:	4629      	mov	r1, r5
   1ff7c:	f021 fa11 	bl	413a2 <fabs>
   1ff80:	4680      	mov	r8, r0
   1ff82:	4658      	mov	r0, fp
   1ff84:	4689      	mov	r9, r1
   1ff86:	f7fc fbad 	bl	1c6e4 <__aeabi_i2d>
   1ff8a:	4602      	mov	r2, r0
   1ff8c:	460b      	mov	r3, r1
   1ff8e:	4640      	mov	r0, r8
   1ff90:	4649      	mov	r1, r9
   1ff92:	f7fc fa59 	bl	1c448 <__aeabi_dsub>
   1ff96:	2200      	movs	r2, #0
   1ff98:	4b35      	ldr	r3, [pc, #212]	; (20070 <on_location_update+0x1ac>)
   1ff9a:	f7fc fc0d 	bl	1c7b8 <__aeabi_dmul>

		/* Not actually a valid NMEA,
		 * but close enough that nRF Cloud can't tell the difference.
		 */
		snprintf(nmea_buf, sizeof(nmea_buf), "$GPGGA,,%02d%08.5f,%c,%02d%08.5f,%c,,,,,,,,,",
   1ff9e:	2200      	movs	r2, #0
		double lon_min = (fabs(location_data.longitude) - lon_deg) * 60;
   1ffa0:	4680      	mov	r8, r0
   1ffa2:	4689      	mov	r9, r1
		snprintf(nmea_buf, sizeof(nmea_buf), "$GPGGA,,%02d%08.5f,%c,%02d%08.5f,%c,,,,,,,,,",
   1ffa4:	4630      	mov	r0, r6
   1ffa6:	2300      	movs	r3, #0
   1ffa8:	4639      	mov	r1, r7
   1ffaa:	f7fc fe95 	bl	1ccd8 <__aeabi_dcmpgt>
   1ffae:	2300      	movs	r3, #0
   1ffb0:	2800      	cmp	r0, #0
   1ffb2:	4629      	mov	r1, r5
   1ffb4:	f04f 0200 	mov.w	r2, #0
   1ffb8:	4620      	mov	r0, r4
   1ffba:	bf14      	ite	ne
   1ffbc:	264e      	movne	r6, #78	; 0x4e
   1ffbe:	2653      	moveq	r6, #83	; 0x53
   1ffc0:	f7fc fe8a 	bl	1ccd8 <__aeabi_dcmpgt>
   1ffc4:	2800      	cmp	r0, #0
   1ffc6:	bf14      	ite	ne
   1ffc8:	2345      	movne	r3, #69	; 0x45
   1ffca:	2357      	moveq	r3, #87	; 0x57
   1ffcc:	4a29      	ldr	r2, [pc, #164]	; (20074 <on_location_update+0x1b0>)
   1ffce:	2132      	movs	r1, #50	; 0x32
   1ffd0:	9306      	str	r3, [sp, #24]
   1ffd2:	ed8d 8b00 	vstr	d8, [sp]
   1ffd6:	4653      	mov	r3, sl
   1ffd8:	e9cd 8904 	strd	r8, r9, [sp, #16]
   1ffdc:	e9cd 6b02 	strd	r6, fp, [sp, #8]
   1ffe0:	a80b      	add	r0, sp, #44	; 0x2c
   1ffe2:	f01a fb5f 	bl	3a6a4 <sniprintf>
				 lat_deg, lat_min, location_data.latitude > 0 ? 'N' : 'S',
				 lon_deg, lon_min, location_data.longitude > 0 ? 'E' : 'W');

		int payload_length = strlen(nmea_buf);
   1ffe6:	a80b      	add	r0, sp, #44	; 0x2c
   1ffe8:	f7fd f92b 	bl	1d242 <strlen>

		snprintf(nmea_buf + payload_length, sizeof(nmea_buf) - payload_length, "*%02X\n",
   1ffec:	ab0b      	add	r3, sp, #44	; 0x2c
   1ffee:	f1c0 0132 	rsb	r1, r0, #50	; 0x32
   1fff2:	181d      	adds	r5, r3, r0
	int len = strlen(datastring);
   1fff4:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
		snprintf(nmea_buf + payload_length, sizeof(nmea_buf) - payload_length, "*%02X\n",
   1fff8:	9109      	str	r1, [sp, #36]	; 0x24
	int len = strlen(datastring);
   1fffa:	f7fd f922 	bl	1d242 <strlen>
	for (int i = 0; i < len; i++)
   1fffe:	2200      	movs	r2, #0
	uint8_t checksum = 0;
   20000:	4613      	mov	r3, r2
	for (int i = 0; i < len; i++)
   20002:	9909      	ldr	r1, [sp, #36]	; 0x24
   20004:	ac0b      	add	r4, sp, #44	; 0x2c
   20006:	4290      	cmp	r0, r2
   20008:	f104 0401 	add.w	r4, r4, #1
   2000c:	dc1f      	bgt.n	2004e <on_location_update+0x18a>
		snprintf(nmea_buf + payload_length, sizeof(nmea_buf) - payload_length, "*%02X\n",
   2000e:	4a1a      	ldr	r2, [pc, #104]	; (20078 <on_location_update+0x1b4>)
   20010:	4628      	mov	r0, r5
   20012:	f01a fb47 	bl	3a6a4 <sniprintf>
	cJSON *msg_obj = create_timestamped_data_message_object(NRF_CLOUD_JSON_APPID_VAL_GPS);
   20016:	4819      	ldr	r0, [pc, #100]	; (2007c <on_location_update+0x1b8>)
   20018:	f7ff ff0c 	bl	1fe34 <create_timestamped_data_message_object>
	if (!msg_obj)
   2001c:	4604      	mov	r4, r0
   2001e:	b158      	cbz	r0, 20038 <on_location_update+0x174>
	if (cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_DATA_KEY, nmea) == NULL)
   20020:	4917      	ldr	r1, [pc, #92]	; (20080 <on_location_update+0x1bc>)
   20022:	aa0b      	add	r2, sp, #44	; 0x2c
   20024:	f01f fe34 	bl	3fc90 <cJSON_AddStringToObject>
   20028:	b9a8      	cbnz	r0, 20056 <on_location_update+0x192>
		LOG_ERR("Failed to append NMEA data to GNSS message object");
   2002a:	2145      	movs	r1, #69	; 0x45
   2002c:	4815      	ldr	r0, [pc, #84]	; (20084 <on_location_update+0x1c0>)
   2002e:	f01c fd67 	bl	3cb00 <z_log_minimal_printk>
		cJSON_Delete(msg_obj);
   20032:	4620      	mov	r0, r4
   20034:	f011 ff92 	bl	31f5c <cJSON_Delete>
		LOG_DBG("NMEA: %s", log_strdup(nmea_buf));

		/* Send the NMEA string. */
		send_gnss_nmea(nmea_buf);
	}
}
   20038:	b019      	add	sp, #100	; 0x64
   2003a:	ecbd 8b02 	vpop	{d8}
   2003e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20042:	b004      	add	sp, #16
   20044:	4770      	bx	lr
	LOG_INF("Location Updated: %.06f N %.06f W, accuracy: %.01f m, Method: %s",
   20046:	4b10      	ldr	r3, [pc, #64]	; (20088 <on_location_update+0x1c4>)
   20048:	e75c      	b.n	1ff04 <on_location_update+0x40>
   2004a:	4b10      	ldr	r3, [pc, #64]	; (2008c <on_location_update+0x1c8>)
   2004c:	e75a      	b.n	1ff04 <on_location_update+0x40>
		checksum ^= datastring[i];
   2004e:	7826      	ldrb	r6, [r4, #0]
	for (int i = 0; i < len; i++)
   20050:	3201      	adds	r2, #1
		checksum ^= datastring[i];
   20052:	4073      	eors	r3, r6
	for (int i = 0; i < len; i++)
   20054:	e7d7      	b.n	20006 <on_location_update+0x142>
	ret = send_device_message_cJSON(msg_obj);
   20056:	4620      	mov	r0, r4
   20058:	f000 fa34 	bl	204c4 <send_device_message_cJSON>
   2005c:	e7e9      	b.n	20032 <on_location_update+0x16e>
   2005e:	bf00      	nop
   20060:	00043650 	.word	0x00043650
   20064:	00043655 	.word	0x00043655
   20068:	0004365d 	.word	0x0004365d
   2006c:	000436a3 	.word	0x000436a3
   20070:	404e0000 	.word	0x404e0000
   20074:	000436d6 	.word	0x000436d6
   20078:	00043703 	.word	0x00043703
   2007c:	00048a2d 	.word	0x00048a2d
   20080:	0004370a 	.word	0x0004370a
   20084:	0004370f 	.word	0x0004370f
   20088:	00043642 	.word	0x00043642
   2008c:	0004364b 	.word	0x0004364b

00020090 <send_sensor_sample.isra.0>:
static int send_sensor_sample(const char *const sensor, double value)
   20090:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20092:	4605      	mov	r5, r0
   20094:	e9cd 2300 	strd	r2, r3, [sp]
	cJSON *msg_obj = create_timestamped_data_message_object(sensor);
   20098:	f7ff fecc 	bl	1fe34 <create_timestamped_data_message_object>
	if (msg_obj == NULL)
   2009c:	4604      	mov	r4, r0
   2009e:	b1a0      	cbz	r0, 200ca <send_sensor_sample.isra.0+0x3a>
	if (cJSON_AddNumberToObject(msg_obj, NRF_CLOUD_JSON_DATA_KEY, value) == NULL)
   200a0:	e9dd 2300 	ldrd	r2, r3, [sp]
   200a4:	490a      	ldr	r1, [pc, #40]	; (200d0 <send_sensor_sample.isra.0+0x40>)
   200a6:	f01f fdc7 	bl	3fc38 <cJSON_AddNumberToObject>
   200aa:	b950      	cbnz	r0, 200c2 <send_sensor_sample.isra.0+0x32>
		LOG_ERR("Failed to append value to %s sample container object ",
   200ac:	462a      	mov	r2, r5
   200ae:	2145      	movs	r1, #69	; 0x45
   200b0:	4808      	ldr	r0, [pc, #32]	; (200d4 <send_sensor_sample.isra.0+0x44>)
   200b2:	f01c fd25 	bl	3cb00 <z_log_minimal_printk>
		cJSON_Delete(msg_obj);
   200b6:	4620      	mov	r0, r4
}
   200b8:	b003      	add	sp, #12
   200ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		cJSON_Delete(msg_obj);
   200be:	f011 bf4d 	b.w	31f5c <cJSON_Delete>
	ret = send_device_message_cJSON(msg_obj);
   200c2:	4620      	mov	r0, r4
   200c4:	f000 f9fe 	bl	204c4 <send_device_message_cJSON>
   200c8:	e7f5      	b.n	200b6 <send_sensor_sample.isra.0+0x26>
}
   200ca:	b003      	add	sp, #12
   200cc:	bd30      	pop	{r4, r5, pc}
   200ce:	bf00      	nop
   200d0:	0004370a 	.word	0x0004370a
   200d4:	00043746 	.word	0x00043746

000200d8 <main_application>:

void main_application(void)
{
   200d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Wait for the date and time to become known.
	 * This is needed both for location services and for sensor sample timestamping.
	 */
	LOG_INF("Waiting for modem to determine current date and time");
   200da:	2149      	movs	r1, #73	; 0x49
   200dc:	4828      	ldr	r0, [pc, #160]	; (20180 <main_application+0xa8>)
{
   200de:	b08b      	sub	sp, #44	; 0x2c
	LOG_INF("Waiting for modem to determine current date and time");
   200e0:	f01c fd0e 	bl	3cb00 <z_log_minimal_printk>
	if (!await_date_time_known(K_SECONDS(CONFIG_DATE_TIME_ESTABLISHMENT_TIMEOUT_SECONDS)))
   200e4:	f44f 0016 	mov.w	r0, #9830400	; 0x960000
   200e8:	2100      	movs	r1, #0
   200ea:	f000 f8a7 	bl	2023c <await_date_time_known>
   200ee:	2800      	cmp	r0, #0
   200f0:	d142      	bne.n	20178 <main_application+0xa0>
	{
		LOG_WRN("Failed to determine valid date time. Proceeding anyways");
   200f2:	2157      	movs	r1, #87	; 0x57
   200f4:	4823      	ldr	r0, [pc, #140]	; (20184 <main_application+0xac>)
	}
	else
	{
		LOG_INF("Current date and time determined");
   200f6:	f01c fd03 	bl	3cb00 <z_log_minimal_printk>
	}

	/* Begin tracking location at the configured interval. */
	(void)start_location_tracking(on_location_update,
   200fa:	213c      	movs	r1, #60	; 0x3c
   200fc:	4822      	ldr	r0, [pc, #136]	; (20188 <main_application+0xb0>)
   200fe:	f000 fb3f 	bl	20780 <start_location_tracking>
								  CONFIG_LOCATION_TRACKING_SAMPLE_INTERVAL_SECONDS);

	int counter = 0;
   20102:	f04f 36ff 	mov.w	r6, #4294967295
   20106:	f04f 37ff 	mov.w	r7, #4294967295
	z_impl_k_timer_start(timer, duration, period);
   2010a:	4c20      	ldr	r4, [pc, #128]	; (2018c <main_application+0xb4>)

		pm_data data;

		if (pm_read(&data) == 0)
		{
			(void)send_sensor_sample("pm2.5", data.pm25_env);
   2010c:	4d20      	ldr	r5, [pc, #128]	; (20190 <main_application+0xb8>)
   2010e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   20112:	4620      	mov	r0, r4
   20114:	2300      	movs	r3, #0
   20116:	e9cd 6700 	strd	r6, r7, [sp]
   2011a:	f018 ff31 	bl	38f80 <z_impl_k_timer_start>
		if (pm_read(&data) == 0)
   2011e:	a804      	add	r0, sp, #16
   20120:	f000 fb70 	bl	20804 <pm_read>
   20124:	b940      	cbnz	r0, 20138 <main_application+0x60>
			(void)send_sensor_sample("pm2.5", data.pm25_env);
   20126:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   2012a:	f7fc facb 	bl	1c6c4 <__aeabi_ui2d>
   2012e:	4602      	mov	r2, r0
   20130:	460b      	mov	r3, r1
   20132:	4628      	mov	r0, r5
   20134:	f7ff ffac 	bl	20090 <send_sensor_sample.isra.0>
		}

		sht40_data sht40_values;

		if (sht40_read(&sht40_values) == 0)
   20138:	a803      	add	r0, sp, #12
   2013a:	f000 fbc1 	bl	208c0 <sht40_read>
   2013e:	b9b8      	cbnz	r0, 20170 <main_application+0x98>
		{
			LOG_INF("Temperature is %d degrees C", sht40_values.temperature);
   20140:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   20144:	2149      	movs	r1, #73	; 0x49
   20146:	4813      	ldr	r0, [pc, #76]	; (20194 <main_application+0xbc>)
   20148:	f01c fcda 	bl	3cb00 <z_log_minimal_printk>
			(void)send_sensor_sample("Temp", sht40_values.temperature);
   2014c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   20150:	f7fc fab8 	bl	1c6c4 <__aeabi_ui2d>
   20154:	4602      	mov	r2, r0
   20156:	460b      	mov	r3, r1
   20158:	480f      	ldr	r0, [pc, #60]	; (20198 <main_application+0xc0>)
   2015a:	f7ff ff99 	bl	20090 <send_sensor_sample.isra.0>
			(void)send_sensor_sample("Humidity", sht40_values.humidity);
   2015e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   20162:	f7fc faaf 	bl	1c6c4 <__aeabi_ui2d>
   20166:	4602      	mov	r2, r0
   20168:	460b      	mov	r3, r1
   2016a:	480c      	ldr	r0, [pc, #48]	; (2019c <main_application+0xc4>)
   2016c:	f7ff ff90 	bl	20090 <send_sensor_sample.isra.0>
	return z_impl_k_timer_status_sync(timer);
   20170:	4620      	mov	r0, r4
   20172:	f018 ff57 	bl	39024 <z_impl_k_timer_status_sync>
	{
   20176:	e7ca      	b.n	2010e <main_application+0x36>
		LOG_INF("Current date and time determined");
   20178:	2149      	movs	r1, #73	; 0x49
   2017a:	4809      	ldr	r0, [pc, #36]	; (201a0 <main_application+0xc8>)
   2017c:	e7bb      	b.n	200f6 <main_application+0x1e>
   2017e:	bf00      	nop
   20180:	00043781 	.word	0x00043781
   20184:	000437bb 	.word	0x000437bb
   20188:	0001fec5 	.word	0x0001fec5
   2018c:	20014e30 	.word	0x20014e30
   20190:	0004381e 	.word	0x0004381e
   20194:	00043824 	.word	0x00043824
   20198:	00043845 	.word	0x00043845
   2019c:	0004384a 	.word	0x0004384a
   201a0:	000437f8 	.word	0x000437f8

000201a4 <reset_cloud>:
static void reset_cloud(void)
{
	int err;

	/* Wait for a few seconds to help residual events settle. */
	LOG_INF("Resetting nRF Cloud transport");
   201a4:	2149      	movs	r1, #73	; 0x49
{
   201a6:	b508      	push	{r3, lr}
	LOG_INF("Resetting nRF Cloud transport");
   201a8:	4810      	ldr	r0, [pc, #64]	; (201ec <reset_cloud+0x48>)
   201aa:	f01c fca9 	bl	3cb00 <z_log_minimal_printk>
	return z_impl_k_sleep(timeout);
   201ae:	2100      	movs	r1, #0
   201b0:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
   201b4:	f018 fa2c 	bl	38610 <z_impl_k_sleep>
	k_sleep(K_SECONDS(20));

	/* Disconnect from nRF Cloud and uninit the cloud library. */
	err = nrf_cloud_uninit();
   201b8:	f00b fa4e 	bl	2b658 <nrf_cloud_uninit>

	/* nrf_cloud_uninit returns -EBUSY if reset is blocked by a FOTA job. */
	if (err == -EBUSY) {
   201bc:	f110 0f10 	cmn.w	r0, #16
	err = nrf_cloud_uninit();
   201c0:	4602      	mov	r2, r0
	if (err == -EBUSY) {
   201c2:	d104      	bne.n	201ce <reset_cloud+0x2a>
		LOG_ERR("Could not reset nRF Cloud transport due to ongoing FOTA job. "
   201c4:	2145      	movs	r1, #69	; 0x45
   201c6:	480a      	ldr	r0, [pc, #40]	; (201f0 <reset_cloud+0x4c>)
			"Continuing without resetting");
	} else if (err) {
		LOG_ERR("Could not reset nRF Cloud transport, error %d. "
			"Continuing without resetting", err);
	} else {
		LOG_INF("nRF Cloud transport has been reset");
   201c8:	f01c fc9a 	bl	3cb00 <z_log_minimal_printk>
   201cc:	e004      	b.n	201d8 <reset_cloud+0x34>
	} else if (err) {
   201ce:	b148      	cbz	r0, 201e4 <reset_cloud+0x40>
		LOG_ERR("Could not reset nRF Cloud transport, error %d. "
   201d0:	2145      	movs	r1, #69	; 0x45
   201d2:	4808      	ldr	r0, [pc, #32]	; (201f4 <reset_cloud+0x50>)
   201d4:	f01c fc94 	bl	3cb00 <z_log_minimal_printk>
	}

	/* Clear cloud connection event state (reset to initial state). */
	clear_cloud_connection_events();
}
   201d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_EVENT_SET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_event_set(event, events);
   201dc:	2100      	movs	r1, #0
   201de:	4806      	ldr	r0, [pc, #24]	; (201f8 <reset_cloud+0x54>)
   201e0:	f021 b868 	b.w	412b4 <z_impl_k_event_set>
		LOG_INF("nRF Cloud transport has been reset");
   201e4:	2149      	movs	r1, #73	; 0x49
   201e6:	4805      	ldr	r0, [pc, #20]	; (201fc <reset_cloud+0x58>)
   201e8:	e7ee      	b.n	201c8 <reset_cloud+0x24>
   201ea:	bf00      	nop
   201ec:	0004385f 	.word	0x0004385f
   201f0:	00043882 	.word	0x00043882
   201f4:	000438e1 	.word	0x000438e1
   201f8:	200150f0 	.word	0x200150f0
   201fc:	00043932 	.word	0x00043932

00020200 <date_time_evt_handler>:
{
   20200:	b508      	push	{r3, lr}
	if (date_time_is_valid()) {
   20202:	f01f f9ce 	bl	3f5a2 <date_time_is_valid>
   20206:	b128      	cbz	r0, 20214 <date_time_evt_handler+0x14>
}
   20208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_event_post(event, events);
   2020c:	2102      	movs	r1, #2
   2020e:	4802      	ldr	r0, [pc, #8]	; (20218 <date_time_evt_handler+0x18>)
   20210:	f021 b84d 	b.w	412ae <z_impl_k_event_post>
   20214:	bd08      	pop	{r3, pc}
   20216:	bf00      	nop
   20218:	200150f0 	.word	0x200150f0

0002021c <await_lte_connection>:
{
   2021c:	b507      	push	{r0, r1, r2, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm3 = { .val = timeout };
		return (uint32_t) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.split.lo, parm3.split.hi, K_SYSCALL_K_EVENT_WAIT_ALL);
	}
#endif
	compiler_barrier();
	return z_impl_k_event_wait_all(event, events, reset, timeout);
   2021e:	2200      	movs	r2, #0
   20220:	e9cd 0100 	strd	r0, r1, [sp]
   20224:	2102      	movs	r1, #2
   20226:	4804      	ldr	r0, [pc, #16]	; (20238 <await_lte_connection+0x1c>)
   20228:	f021 f84d 	bl	412c6 <z_impl_k_event_wait_all>
}
   2022c:	3800      	subs	r0, #0
   2022e:	bf18      	it	ne
   20230:	2001      	movne	r0, #1
   20232:	b003      	add	sp, #12
   20234:	f85d fb04 	ldr.w	pc, [sp], #4
   20238:	20015100 	.word	0x20015100

0002023c <await_date_time_known>:
{
   2023c:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_event_wait(event, events, reset, timeout);
   2023e:	2200      	movs	r2, #0
   20240:	e9cd 0100 	strd	r0, r1, [sp]
   20244:	2102      	movs	r1, #2
   20246:	4804      	ldr	r0, [pc, #16]	; (20258 <await_date_time_known+0x1c>)
   20248:	f021 f837 	bl	412ba <z_impl_k_event_wait>
}
   2024c:	3800      	subs	r0, #0
   2024e:	bf18      	it	ne
   20250:	2001      	movne	r0, #1
   20252:	b003      	add	sp, #12
   20254:	f85d fb04 	ldr.w	pc, [sp], #4
   20258:	200150f0 	.word	0x200150f0

0002025c <await_connection>:
{
   2025c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2025e:	4605      	mov	r5, r0
   20260:	460c      	mov	r4, r1
	return await_lte_connection(timeout) && await_cloud_ready(timeout, false);
   20262:	f7ff ffdb 	bl	2021c <await_lte_connection>
   20266:	b148      	cbz	r0, 2027c <await_connection+0x20>
   20268:	2200      	movs	r2, #0
   2026a:	2104      	movs	r1, #4
   2026c:	e9cd 5400 	strd	r5, r4, [sp]
   20270:	4803      	ldr	r0, [pc, #12]	; (20280 <await_connection+0x24>)
   20272:	f021 f822 	bl	412ba <z_impl_k_event_wait>
   20276:	1f03      	subs	r3, r0, #4
   20278:	4258      	negs	r0, r3
   2027a:	4158      	adcs	r0, r3
}
   2027c:	b003      	add	sp, #12
   2027e:	bd30      	pop	{r4, r5, pc}
   20280:	200150f0 	.word	0x200150f0

00020284 <cloud_is_connected>:
{
   20284:	b507      	push	{r0, r1, r2, lr}
   20286:	2200      	movs	r2, #0
   20288:	2300      	movs	r3, #0
   2028a:	2102      	movs	r1, #2
   2028c:	e9cd 2300 	strd	r2, r3, [sp]
   20290:	4804      	ldr	r0, [pc, #16]	; (202a4 <cloud_is_connected+0x20>)
   20292:	f021 f812 	bl	412ba <z_impl_k_event_wait>
}
   20296:	3800      	subs	r0, #0
   20298:	bf18      	it	ne
   2029a:	2001      	movne	r0, #1
   2029c:	b003      	add	sp, #12
   2029e:	f85d fb04 	ldr.w	pc, [sp], #4
   202a2:	bf00      	nop
   202a4:	200150f0 	.word	0x200150f0

000202a8 <disconnect_cloud>:
	z_impl_k_event_post(event, events);
   202a8:	2110      	movs	r1, #16
   202aa:	4801      	ldr	r0, [pc, #4]	; (202b0 <disconnect_cloud+0x8>)
   202ac:	f020 bfff 	b.w	412ae <z_impl_k_event_post>
   202b0:	200150f0 	.word	0x200150f0

000202b4 <cloud_event_handler>:
{
   202b4:	b507      	push	{r0, r1, r2, lr}
	switch (nrf_cloud_evt->type) {
   202b6:	7803      	ldrb	r3, [r0, #0]
   202b8:	3b01      	subs	r3, #1
   202ba:	2b0a      	cmp	r3, #10
   202bc:	d834      	bhi.n	20328 <cloud_event_handler+0x74>
   202be:	e8df f003 	tbb	[pc, r3]
   202c2:	3306      	.short	0x3306
   202c4:	2725130d 	.word	0x2725130d
   202c8:	33203333 	.word	0x33203333
   202cc:	2e          	.byte	0x2e
   202cd:	00          	.byte	0x00
   202ce:	2102      	movs	r1, #2
   202d0:	4817      	ldr	r0, [pc, #92]	; (20330 <cloud_event_handler+0x7c>)
}
   202d2:	b003      	add	sp, #12
   202d4:	f85d eb04 	ldr.w	lr, [sp], #4
   202d8:	f020 bfe9 	b.w	412ae <z_impl_k_event_post>
		LOG_INF("Please add this device to your cloud account in the nRF Cloud portal.");
   202dc:	2149      	movs	r1, #73	; 0x49
   202de:	4815      	ldr	r0, [pc, #84]	; (20334 <cloud_event_handler+0x80>)
   202e0:	f01c fc0e 	bl	3cb00 <z_log_minimal_printk>
   202e4:	2108      	movs	r1, #8
   202e6:	e7f3      	b.n	202d0 <cloud_event_handler+0x1c>
	return z_impl_k_event_wait(event, events, reset, timeout);
   202e8:	2200      	movs	r2, #0
   202ea:	2300      	movs	r3, #0
   202ec:	2108      	movs	r1, #8
   202ee:	e9cd 2300 	strd	r2, r3, [sp]
   202f2:	480f      	ldr	r0, [pc, #60]	; (20330 <cloud_event_handler+0x7c>)
   202f4:	f020 ffe1 	bl	412ba <z_impl_k_event_wait>
		if (cloud_has_requested_association()) {
   202f8:	b1b0      	cbz	r0, 20328 <cloud_event_handler+0x74>
			LOG_INF("Device successfully associated with cloud!");
   202fa:	2149      	movs	r1, #73	; 0x49
   202fc:	480e      	ldr	r0, [pc, #56]	; (20338 <cloud_event_handler+0x84>)
   202fe:	f01c fbff 	bl	3cb00 <z_log_minimal_printk>
}
   20302:	b003      	add	sp, #12
   20304:	f85d eb04 	ldr.w	lr, [sp], #4
		disconnect_cloud();
   20308:	f7ff bfce 	b.w	202a8 <disconnect_cloud>
	z_impl_k_event_post(event, events);
   2030c:	2104      	movs	r1, #4
   2030e:	e7df      	b.n	202d0 <cloud_event_handler+0x1c>
		location_assistance_data_handler(nrf_cloud_evt->data.ptr, nrf_cloud_evt->data.len);
   20310:	e9d0 1002 	ldrd	r1, r0, [r0, #8]
}
   20314:	b003      	add	sp, #12
   20316:	f85d eb04 	ldr.w	lr, [sp], #4
		location_assistance_data_handler(nrf_cloud_evt->data.ptr, nrf_cloud_evt->data.len);
   2031a:	f000 ba0d 	b.w	20738 <location_assistance_data_handler>
}
   2031e:	b003      	add	sp, #12
   20320:	f85d eb04 	ldr.w	lr, [sp], #4
		on_fota_downloaded();
   20324:	f000 b9bc 	b.w	206a0 <on_fota_downloaded>
}
   20328:	b003      	add	sp, #12
   2032a:	f85d fb04 	ldr.w	pc, [sp], #4
   2032e:	bf00      	nop
   20330:	200150f0 	.word	0x200150f0
   20334:	0004395a 	.word	0x0004395a
   20338:	000439a5 	.word	0x000439a5

0002033c <await_cloud_disconnection>:
{
   2033c:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_event_wait(event, events, reset, timeout);
   2033e:	2200      	movs	r2, #0
   20340:	e9cd 0100 	strd	r0, r1, [sp]
   20344:	2110      	movs	r1, #16
   20346:	4804      	ldr	r0, [pc, #16]	; (20358 <await_cloud_disconnection+0x1c>)
   20348:	f020 ffb7 	bl	412ba <z_impl_k_event_wait>
}
   2034c:	3800      	subs	r0, #0
   2034e:	bf18      	it	ne
   20350:	2001      	movne	r0, #1
   20352:	b003      	add	sp, #12
   20354:	f85d fb04 	ldr.w	pc, [sp], #4
   20358:	200150f0 	.word	0x200150f0

0002035c <cloud_is_disconnecting>:
{
   2035c:	b507      	push	{r0, r1, r2, lr}
   2035e:	2200      	movs	r2, #0
   20360:	2300      	movs	r3, #0
   20362:	2110      	movs	r1, #16
   20364:	e9cd 2300 	strd	r2, r3, [sp]
   20368:	4804      	ldr	r0, [pc, #16]	; (2037c <cloud_is_disconnecting+0x20>)
   2036a:	f020 ffa6 	bl	412ba <z_impl_k_event_wait>
}
   2036e:	3800      	subs	r0, #0
   20370:	bf18      	it	ne
   20372:	2001      	movne	r0, #1
   20374:	b003      	add	sp, #12
   20376:	f85d fb04 	ldr.w	pc, [sp], #4
   2037a:	bf00      	nop
   2037c:	200150f0 	.word	0x200150f0

00020380 <lte_event_handler>:
{
   20380:	b508      	push	{r3, lr}
	switch (evt->type) {
   20382:	7801      	ldrb	r1, [r0, #0]
   20384:	b9d9      	cbnz	r1, 203be <lte_event_handler+0x3e>
		if ((evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   20386:	7a03      	ldrb	r3, [r0, #8]
   20388:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2038c:	2b01      	cmp	r3, #1
   2038e:	d010      	beq.n	203b2 <lte_event_handler+0x32>
	z_impl_k_event_set(event, events);
   20390:	480b      	ldr	r0, [pc, #44]	; (203c0 <lte_event_handler+0x40>)
   20392:	f020 ff8f 	bl	412b4 <z_impl_k_event_set>
			if (cloud_is_connected() && !cloud_is_disconnecting()) {
   20396:	f7ff ff75 	bl	20284 <cloud_is_connected>
   2039a:	b180      	cbz	r0, 203be <lte_event_handler+0x3e>
   2039c:	f7ff ffde 	bl	2035c <cloud_is_disconnecting>
   203a0:	b968      	cbnz	r0, 203be <lte_event_handler+0x3e>
				LOG_INF("LTE connection lost. Disconnecting from nRF Cloud too...");
   203a2:	2149      	movs	r1, #73	; 0x49
   203a4:	4807      	ldr	r0, [pc, #28]	; (203c4 <lte_event_handler+0x44>)
   203a6:	f01c fbab 	bl	3cb00 <z_log_minimal_printk>
}
   203aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				disconnect_cloud();
   203ae:	f7ff bf7b 	b.w	202a8 <disconnect_cloud>
	z_impl_k_event_post(event, events);
   203b2:	2102      	movs	r1, #2
}
   203b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   203b8:	4801      	ldr	r0, [pc, #4]	; (203c0 <lte_event_handler+0x40>)
   203ba:	f020 bf78 	b.w	412ae <z_impl_k_event_post>
   203be:	bd08      	pop	{r3, pc}
   203c0:	20015100 	.word	0x20015100
   203c4:	000439d5 	.word	0x000439d5

000203c8 <send_device_message>:
{
   203c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   203ca:	9001      	str	r0, [sp, #4]
	char *msg_buf = k_malloc(strlen(msg) + 1);
   203cc:	f7fc ff39 	bl	1d242 <strlen>
   203d0:	3001      	adds	r0, #1
   203d2:	f020 ff85 	bl	412e0 <k_malloc>
	if (!msg_buf) {
   203d6:	9901      	ldr	r1, [sp, #4]
	char *msg_buf = k_malloc(strlen(msg) + 1);
   203d8:	9003      	str	r0, [sp, #12]
	if (!msg_buf) {
   203da:	b940      	cbnz	r0, 203ee <send_device_message+0x26>
		LOG_ERR("Could not alloc memory for new device message");
   203dc:	2145      	movs	r1, #69	; 0x45
   203de:	480d      	ldr	r0, [pc, #52]	; (20414 <send_device_message+0x4c>)
   203e0:	f01c fb8e 	bl	3cb00 <z_log_minimal_printk>
		return -ENOMEM;
   203e4:	f06f 000b 	mvn.w	r0, #11
}
   203e8:	b005      	add	sp, #20
   203ea:	f85d fb04 	ldr.w	pc, [sp], #4
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   203ee:	f021 f9ec 	bl	417ca <strcpy>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   203f2:	2200      	movs	r2, #0
   203f4:	2300      	movs	r3, #0
   203f6:	4808      	ldr	r0, [pc, #32]	; (20418 <send_device_message+0x50>)
   203f8:	a903      	add	r1, sp, #12
   203fa:	f016 f945 	bl	36688 <z_impl_k_msgq_put>
	if (k_msgq_put(&device_message_queue, &msg_buf, K_NO_WAIT)) {
   203fe:	2800      	cmp	r0, #0
   20400:	d0f2      	beq.n	203e8 <send_device_message+0x20>
		LOG_ERR("Device message rejected, outgoing message queue is full");
   20402:	2145      	movs	r1, #69	; 0x45
   20404:	4805      	ldr	r0, [pc, #20]	; (2041c <send_device_message+0x54>)
   20406:	f01c fb7b 	bl	3cb00 <z_log_minimal_printk>
		k_free(msg_buf);
   2040a:	9803      	ldr	r0, [sp, #12]
   2040c:	f020 ff61 	bl	412d2 <k_free>
   20410:	e7e8      	b.n	203e4 <send_device_message+0x1c>
   20412:	bf00      	nop
   20414:	00043a13 	.word	0x00043a13
   20418:	20014fcc 	.word	0x20014fcc
   2041c:	00043a46 	.word	0x00043a46

00020420 <consume_device_message>:
{
   20420:	b530      	push	{r4, r5, lr}
   20422:	b087      	sub	sp, #28
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   20424:	f04f 32ff 	mov.w	r2, #4294967295
   20428:	f04f 33ff 	mov.w	r3, #4294967295
   2042c:	4821      	ldr	r0, [pc, #132]	; (204b4 <consume_device_message+0x94>)
   2042e:	a901      	add	r1, sp, #4
   20430:	f016 f9ba 	bl	367a8 <z_impl_k_msgq_get>
	if (ret) {
   20434:	4604      	mov	r4, r0
   20436:	b140      	cbz	r0, 2044a <consume_device_message+0x2a>
		LOG_ERR("Failed to retrieve item from outgoing message queue, error: %d", ret);
   20438:	4602      	mov	r2, r0
   2043a:	2145      	movs	r1, #69	; 0x45
   2043c:	481e      	ldr	r0, [pc, #120]	; (204b8 <consume_device_message+0x98>)
   2043e:	f01c fb5f 	bl	3cb00 <z_log_minimal_printk>
		return -ret;
   20442:	4264      	negs	r4, r4
}
   20444:	4620      	mov	r0, r4
   20446:	b007      	add	sp, #28
   20448:	bd30      	pop	{r4, r5, pc}
	(void)await_connection(K_FOREVER);
   2044a:	f04f 31ff 	mov.w	r1, #4294967295
   2044e:	f04f 30ff 	mov.w	r0, #4294967295
   20452:	f7ff ff03 	bl	2025c <await_connection>
	struct nrf_cloud_tx_data mqtt_msg = {
   20456:	4621      	mov	r1, r4
   20458:	2210      	movs	r2, #16
   2045a:	a802      	add	r0, sp, #8
   2045c:	f020 ffea 	bl	41434 <memset>
		.data.len = strlen(msg),
   20460:	9801      	ldr	r0, [sp, #4]
   20462:	f7fc feee 	bl	1d242 <strlen>
	struct nrf_cloud_tx_data mqtt_msg = {
   20466:	9b01      	ldr	r3, [sp, #4]
   20468:	9002      	str	r0, [sp, #8]
   2046a:	9303      	str	r3, [sp, #12]
   2046c:	f44f 7381 	mov.w	r3, #258	; 0x102
	ret = nrf_cloud_send(&mqtt_msg);
   20470:	a802      	add	r0, sp, #8
	struct nrf_cloud_tx_data mqtt_msg = {
   20472:	f8ad 3010 	strh.w	r3, [sp, #16]
	ret = nrf_cloud_send(&mqtt_msg);
   20476:	f00b fa19 	bl	2b8ac <nrf_cloud_send>
	if (ret) {
   2047a:	4d10      	ldr	r5, [pc, #64]	; (204bc <consume_device_message+0x9c>)
   2047c:	4604      	mov	r4, r0
   2047e:	b1b8      	cbz	r0, 204b0 <consume_device_message+0x90>
		LOG_ERR("Transmission of enqueued device message failed, nrf_cloud_send "
   20480:	4602      	mov	r2, r0
   20482:	2145      	movs	r1, #69	; 0x45
   20484:	480e      	ldr	r0, [pc, #56]	; (204c0 <consume_device_message+0xa0>)
   20486:	f01c fb3b 	bl	3cb00 <z_log_minimal_printk>
		send_device_message(msg);
   2048a:	9801      	ldr	r0, [sp, #4]
   2048c:	f7ff ff9c 	bl	203c8 <send_device_message>
		send_failure_count += 1;
   20490:	682b      	ldr	r3, [r5, #0]
   20492:	3301      	adds	r3, #1
		if (send_failure_count > CONFIG_MAX_CONSECUTIVE_SEND_FAILURES) {
   20494:	2b05      	cmp	r3, #5
		send_failure_count += 1;
   20496:	602b      	str	r3, [r5, #0]
		if (send_failure_count > CONFIG_MAX_CONSECUTIVE_SEND_FAILURES) {
   20498:	dd06      	ble.n	204a8 <consume_device_message+0x88>
			disconnect_cloud();
   2049a:	f7ff ff05 	bl	202a8 <disconnect_cloud>
	return z_impl_k_sleep(timeout);
   2049e:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   204a2:	2100      	movs	r1, #0
   204a4:	f018 f8b4 	bl	38610 <z_impl_k_sleep>
	k_free(msg);
   204a8:	9801      	ldr	r0, [sp, #4]
   204aa:	f020 ff12 	bl	412d2 <k_free>
	return ret;
   204ae:	e7c9      	b.n	20444 <consume_device_message+0x24>
		send_failure_count = 0;
   204b0:	6028      	str	r0, [r5, #0]
   204b2:	e7f9      	b.n	204a8 <consume_device_message+0x88>
   204b4:	20014fcc 	.word	0x20014fcc
   204b8:	00043a83 	.word	0x00043a83
   204bc:	20019098 	.word	0x20019098
   204c0:	00043ac7 	.word	0x00043ac7

000204c4 <send_device_message_cJSON>:
{
   204c4:	b538      	push	{r3, r4, r5, lr}
	if (!msg_obj) {
   204c6:	b938      	cbnz	r0, 204d8 <send_device_message_cJSON+0x14>
		LOG_ERR("Cannot send NULL device message object");
   204c8:	2145      	movs	r1, #69	; 0x45
   204ca:	480c      	ldr	r0, [pc, #48]	; (204fc <send_device_message_cJSON+0x38>)
   204cc:	f01c fb18 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   204d0:	f06f 0415 	mvn.w	r4, #21
}
   204d4:	4620      	mov	r0, r4
   204d6:	bd38      	pop	{r3, r4, r5, pc}
	msg = cJSON_PrintUnformatted(msg_obj);
   204d8:	f01f fb33 	bl	3fb42 <cJSON_PrintUnformatted>
	if (msg == NULL) {
   204dc:	4605      	mov	r5, r0
   204de:	b930      	cbnz	r0, 204ee <send_device_message_cJSON+0x2a>
		LOG_ERR("Failed to convert cJSON device message object to string");
   204e0:	2145      	movs	r1, #69	; 0x45
   204e2:	4807      	ldr	r0, [pc, #28]	; (20500 <send_device_message_cJSON+0x3c>)
   204e4:	f01c fb0c 	bl	3cb00 <z_log_minimal_printk>
		return -ENOMEM;
   204e8:	f06f 040b 	mvn.w	r4, #11
   204ec:	e7f2      	b.n	204d4 <send_device_message_cJSON+0x10>
	ret = send_device_message(msg);
   204ee:	f7ff ff6b 	bl	203c8 <send_device_message>
   204f2:	4604      	mov	r4, r0
	k_free(msg);
   204f4:	4628      	mov	r0, r5
   204f6:	f020 feec 	bl	412d2 <k_free>
	return ret;
   204fa:	e7eb      	b.n	204d4 <send_device_message_cJSON+0x10>
   204fc:	00043b52 	.word	0x00043b52
   20500:	00043b7e 	.word	0x00043b7e

00020504 <manage_connection>:

	return 0;
}

void manage_connection(void)
{
   20504:	b5f0      	push	{r4, r5, r6, r7, lr}
	 *
	 * (Once we request connection, the modem will automatically try to reconnect whenever
	 *  connection is lost).
	 */

	LOG_INF("Connecting to LTE network. This may take several minutes...");
   20506:	2149      	movs	r1, #73	; 0x49
{
   20508:	b089      	sub	sp, #36	; 0x24
	LOG_INF("Connecting to LTE network. This may take several minutes...");
   2050a:	4850      	ldr	r0, [pc, #320]	; (2064c <manage_connection+0x148>)
   2050c:	f01c faf8 	bl	3cb00 <z_log_minimal_printk>
	LOG_INF("Setting up LTE");
   20510:	2149      	movs	r1, #73	; 0x49
   20512:	484f      	ldr	r0, [pc, #316]	; (20650 <manage_connection+0x14c>)
   20514:	f01c faf4 	bl	3cb00 <z_log_minimal_printk>
	date_time_register_handler(date_time_evt_handler);
   20518:	484e      	ldr	r0, [pc, #312]	; (20654 <manage_connection+0x150>)
   2051a:	f01f f844 	bl	3f5a6 <date_time_register_handler>
	err = lte_lc_modem_events_enable();
   2051e:	f007 f98b 	bl	27838 <lte_lc_modem_events_enable>
	if (err) {
   20522:	4602      	mov	r2, r0
   20524:	b150      	cbz	r0, 2053c <manage_connection+0x38>
		LOG_ERR("lte_lc_modem_events_enable failed, error: %d", err);
   20526:	2145      	movs	r1, #69	; 0x45
   20528:	484b      	ldr	r0, [pc, #300]	; (20658 <manage_connection+0x154>)
		LOG_ERR("Modem could not be configured, error: %d", err);
   2052a:	f01c fae9 	bl	3cb00 <z_log_minimal_printk>
	if (setup_lte()) {
		LOG_ERR("LTE initialization failed. Continuing anyway. This may fail.");
   2052e:	2145      	movs	r1, #69	; 0x45
   20530:	484a      	ldr	r0, [pc, #296]	; (2065c <manage_connection+0x158>)
   20532:	f01c fae5 	bl	3cb00 <z_log_minimal_printk>
	}

	while (true) {
		/* Wait for LTE to become connected (or re-connected if connection was lost). */
		LOG_INF("Waiting for connection to LTE network...");
   20536:	4d4a      	ldr	r5, [pc, #296]	; (20660 <manage_connection+0x15c>)

		(void)await_lte_connection(K_FOREVER);
		LOG_INF("Connected to LTE network");
   20538:	4c4a      	ldr	r4, [pc, #296]	; (20664 <manage_connection+0x160>)
   2053a:	e040      	b.n	205be <manage_connection+0xba>
	LOG_INF("Starting connection to LTE network...");
   2053c:	2149      	movs	r1, #73	; 0x49
   2053e:	484a      	ldr	r0, [pc, #296]	; (20668 <manage_connection+0x164>)
   20540:	f01c fade 	bl	3cb00 <z_log_minimal_printk>
	err = lte_lc_init_and_connect_async(lte_event_handler);
   20544:	4849      	ldr	r0, [pc, #292]	; (2066c <manage_connection+0x168>)
   20546:	f01e ff66 	bl	3f416 <lte_lc_init_and_connect_async>
	if (err) {
   2054a:	4602      	mov	r2, r0
   2054c:	2800      	cmp	r0, #0
   2054e:	d0f2      	beq.n	20536 <manage_connection+0x32>
		LOG_ERR("Modem could not be configured, error: %d", err);
   20550:	2145      	movs	r1, #69	; 0x45
   20552:	4847      	ldr	r0, [pc, #284]	; (20670 <manage_connection+0x16c>)
   20554:	e7e9      	b.n	2052a <manage_connection+0x26>
		LOG_ERR("Cloud lib could not be initialized, error: %d", err);
   20556:	2145      	movs	r1, #69	; 0x45
   20558:	4846      	ldr	r0, [pc, #280]	; (20674 <manage_connection+0x170>)
   2055a:	f01c fad1 	bl	3cb00 <z_log_minimal_printk>
			/* and then wait patiently for a connection problem. */
			(void)await_cloud_disconnection(K_FOREVER);

			LOG_INF("Disconnected from nRF Cloud");
		} else {
			LOG_INF("Failed to connect to nRF Cloud");
   2055e:	2149      	movs	r1, #73	; 0x49
   20560:	4845      	ldr	r0, [pc, #276]	; (20678 <manage_connection+0x174>)
   20562:	e023      	b.n	205ac <manage_connection+0xa8>
	LOG_INF("Connected to nRF Cloud");
   20564:	4845      	ldr	r0, [pc, #276]	; (2067c <manage_connection+0x178>)
   20566:	f01c facb 	bl	3cb00 <z_log_minimal_printk>
	struct nrf_cloud_svc_info_fota fota_info = {
   2056a:	2306      	movs	r3, #6
   2056c:	f88d 3008 	strb.w	r3, [sp, #8]
	struct nrf_cloud_svc_info_ui ui_info = {
   20570:	2303      	movs	r3, #3
   20572:	f88d 300c 	strb.w	r3, [sp, #12]
   20576:	2300      	movs	r3, #0
	struct nrf_cloud_svc_info service_info = {
   20578:	aa02      	add	r2, sp, #8
   2057a:	9204      	str	r2, [sp, #16]
   2057c:	aa03      	add	r2, sp, #12
	struct nrf_cloud_device_status device_status = {
   2057e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	struct nrf_cloud_svc_info_ui ui_info = {
   20582:	f88d 300d 	strb.w	r3, [sp, #13]
	err = nrf_cloud_shadow_device_status_update(&device_status);
   20586:	a806      	add	r0, sp, #24
	struct nrf_cloud_device_status device_status = {
   20588:	ab04      	add	r3, sp, #16
   2058a:	9307      	str	r3, [sp, #28]
	err = nrf_cloud_shadow_device_status_update(&device_status);
   2058c:	f00b fa08 	bl	2b9a0 <nrf_cloud_shadow_device_status_update>
	if (err) {
   20590:	4602      	mov	r2, r0
   20592:	b118      	cbz	r0, 2059c <manage_connection+0x98>
		LOG_ERR("Failed to update device shadow, error: %d", err);
   20594:	2145      	movs	r1, #69	; 0x45
   20596:	483a      	ldr	r0, [pc, #232]	; (20680 <manage_connection+0x17c>)
   20598:	f01c fab2 	bl	3cb00 <z_log_minimal_printk>
			(void)await_cloud_disconnection(K_FOREVER);
   2059c:	f04f 31ff 	mov.w	r1, #4294967295
   205a0:	f04f 30ff 	mov.w	r0, #4294967295
   205a4:	f7ff feca 	bl	2033c <await_cloud_disconnection>
			LOG_INF("Disconnected from nRF Cloud");
   205a8:	2149      	movs	r1, #73	; 0x49
   205aa:	4836      	ldr	r0, [pc, #216]	; (20684 <manage_connection+0x180>)
			LOG_INF("Failed to connect to nRF Cloud");
   205ac:	f01c faa8 	bl	3cb00 <z_log_minimal_printk>
		}

		/* Reset cloud connection state before trying again. */
		reset_cloud();
   205b0:	f7ff fdf8 	bl	201a4 <reset_cloud>
   205b4:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   205b8:	2100      	movs	r1, #0
   205ba:	f018 f829 	bl	38610 <z_impl_k_sleep>
		LOG_INF("Waiting for connection to LTE network...");
   205be:	2149      	movs	r1, #73	; 0x49
   205c0:	4628      	mov	r0, r5
   205c2:	f01c fa9d 	bl	3cb00 <z_log_minimal_printk>
		(void)await_lte_connection(K_FOREVER);
   205c6:	f04f 31ff 	mov.w	r1, #4294967295
   205ca:	f04f 30ff 	mov.w	r0, #4294967295
   205ce:	f7ff fe25 	bl	2021c <await_lte_connection>
		LOG_INF("Connected to LTE network");
   205d2:	2149      	movs	r1, #73	; 0x49
   205d4:	4620      	mov	r0, r4
   205d6:	f01c fa93 	bl	3cb00 <z_log_minimal_printk>
	LOG_INF("Connecting to nRF Cloud");
   205da:	2149      	movs	r1, #73	; 0x49
   205dc:	482a      	ldr	r0, [pc, #168]	; (20688 <manage_connection+0x184>)
   205de:	f01c fa8f 	bl	3cb00 <z_log_minimal_printk>
	struct nrf_cloud_init_param params = {
   205e2:	2300      	movs	r3, #0
   205e4:	9307      	str	r3, [sp, #28]
   205e6:	4b29      	ldr	r3, [pc, #164]	; (2068c <manage_connection+0x188>)
	err = nrf_cloud_init(&params);
   205e8:	a806      	add	r0, sp, #24
	struct nrf_cloud_init_param params = {
   205ea:	9306      	str	r3, [sp, #24]
	err = nrf_cloud_init(&params);
   205ec:	f00b f802 	bl	2b5f4 <nrf_cloud_init>
	if (err) {
   205f0:	4602      	mov	r2, r0
   205f2:	2800      	cmp	r0, #0
   205f4:	d1af      	bne.n	20556 <manage_connection+0x52>
		LOG_INF("Next connection retry in %d seconds",
   205f6:	4e26      	ldr	r6, [pc, #152]	; (20690 <manage_connection+0x18c>)
			LOG_ERR("cloud_connect, error: %d", err);
   205f8:	4f26      	ldr	r7, [pc, #152]	; (20694 <manage_connection+0x190>)
		LOG_INF("Next connection retry in %d seconds",
   205fa:	221e      	movs	r2, #30
   205fc:	2149      	movs	r1, #73	; 0x49
   205fe:	4630      	mov	r0, r6
   20600:	f01c fa7e 	bl	3cb00 <z_log_minimal_printk>
		err = nrf_cloud_connect(NULL);
   20604:	2000      	movs	r0, #0
   20606:	f00b f87d 	bl	2b704 <nrf_cloud_connect>
		if (err) {
   2060a:	4602      	mov	r2, r0
   2060c:	b118      	cbz	r0, 20616 <manage_connection+0x112>
			LOG_ERR("cloud_connect, error: %d", err);
   2060e:	2145      	movs	r1, #69	; 0x45
   20610:	4638      	mov	r0, r7
   20612:	f01c fa75 	bl	3cb00 <z_log_minimal_printk>
		if (await_cloud_connected(
   20616:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2061a:	2100      	movs	r1, #0
   2061c:	f7ff fe0e 	bl	2023c <await_date_time_known>
   20620:	2800      	cmp	r0, #0
   20622:	d0ea      	beq.n	205fa <manage_connection+0xf6>
	return z_impl_k_event_wait(event, events, reset, timeout);
   20624:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   20628:	2300      	movs	r3, #0
   2062a:	2114      	movs	r1, #20
   2062c:	e9cd 2300 	strd	r2, r3, [sp]
   20630:	4819      	ldr	r0, [pc, #100]	; (20698 <manage_connection+0x194>)
   20632:	2200      	movs	r2, #0
   20634:	f020 fe41 	bl	412ba <z_impl_k_event_wait>
	if (!await_cloud_ready(K_SECONDS(CONFIG_CLOUD_READY_TIMEOUT_SECONDS), true)) {
   20638:	2804      	cmp	r0, #4
		LOG_INF("nRF Cloud failed to become ready. Resetting connection.");
   2063a:	f04f 0149 	mov.w	r1, #73	; 0x49
	if (!await_cloud_ready(K_SECONDS(CONFIG_CLOUD_READY_TIMEOUT_SECONDS), true)) {
   2063e:	d091      	beq.n	20564 <manage_connection+0x60>
		LOG_INF("nRF Cloud failed to become ready. Resetting connection.");
   20640:	4816      	ldr	r0, [pc, #88]	; (2069c <manage_connection+0x198>)
   20642:	f01c fa5d 	bl	3cb00 <z_log_minimal_printk>
		reset_cloud();
   20646:	f7ff fdad 	bl	201a4 <reset_cloud>
		return -ETIMEDOUT;
   2064a:	e788      	b.n	2055e <manage_connection+0x5a>
   2064c:	00043bbb 	.word	0x00043bbb
   20650:	00043bfc 	.word	0x00043bfc
   20654:	00020201 	.word	0x00020201
   20658:	00043c10 	.word	0x00043c10
   2065c:	00043e4b 	.word	0x00043e4b
   20660:	00043c9b 	.word	0x00043c9b
   20664:	00043cc9 	.word	0x00043cc9
   20668:	00043c42 	.word	0x00043c42
   2066c:	00020381 	.word	0x00020381
   20670:	00043c6d 	.word	0x00043c6d
   20674:	00043d04 	.word	0x00043d04
   20678:	00043e27 	.word	0x00043e27
   2067c:	00043dbb 	.word	0x00043dbb
   20680:	00043dd7 	.word	0x00043dd7
   20684:	00043e06 	.word	0x00043e06
   20688:	00043ce7 	.word	0x00043ce7
   2068c:	000202b5 	.word	0x000202b5
   20690:	00043d37 	.word	0x00043d37
   20694:	00043d60 	.word	0x00043d60
   20698:	200150f0 	.word	0x200150f0
   2069c:	00043d7e 	.word	0x00043d7e

000206a0 <on_fota_downloaded>:

/* Called from nRF Cloud event handler in connection.c */
void on_fota_downloaded(void)
{
	/* Reboot on successful FOTA download. (Thus, enabling the new firmware!) */
	LOG_WRN("Rebooting...");
   206a0:	4803      	ldr	r0, [pc, #12]	; (206b0 <on_fota_downloaded+0x10>)
   206a2:	2157      	movs	r1, #87	; 0x57
{
   206a4:	b508      	push	{r3, lr}
	LOG_WRN("Rebooting...");
   206a6:	f01c fa2b 	bl	3cb00 <z_log_minimal_printk>
	LOG_PANIC();
	sys_reboot(SYS_REBOOT_COLD);
   206aa:	2001      	movs	r0, #1
   206ac:	f000 ff3a 	bl	21524 <sys_reboot>
   206b0:	00043ea4 	.word	0x00043ea4

000206b4 <location_event_handler>:
		}
	}
}

static void location_event_handler(const struct location_event_data *event_data)
{
   206b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (event_data->id) {
   206b6:	7803      	ldrb	r3, [r0, #0]
{
   206b8:	4604      	mov	r4, r0
	switch (event_data->id) {
   206ba:	2b01      	cmp	r3, #1
{
   206bc:	b087      	sub	sp, #28
	switch (event_data->id) {
   206be:	d10f      	bne.n	206e0 <location_event_handler+0x2c>
	case LOCATION_EVT_LOCATION:
		LOG_DBG("Location Event: Got location");
		if (location_update_handler) {
   206c0:	4b08      	ldr	r3, [pc, #32]	; (206e4 <location_event_handler+0x30>)
   206c2:	681f      	ldr	r7, [r3, #0]
   206c4:	b167      	cbz	r7, 206e0 <location_event_handler+0x2c>
			/* Pass received location data along to our handler. */
			location_update_handler(event_data->location);
   206c6:	466d      	mov	r5, sp
   206c8:	f100 0618 	add.w	r6, r0, #24
   206cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   206ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   206d0:	e896 0003 	ldmia.w	r6, {r0, r1}
   206d4:	e885 0003 	stmia.w	r5, {r0, r1}
   206d8:	f104 0008 	add.w	r0, r4, #8
   206dc:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   206de:	47b8      	blx	r7

	default:
		LOG_DBG("Location Event: Unknown event");
		break;
	}
}
   206e0:	b007      	add	sp, #28
   206e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   206e4:	2001909c 	.word	0x2001909c

000206e8 <gnss_antenna_configure>:
{
   206e8:	b508      	push	{r3, lr}
	if (ret != 0) {
   206ea:	b9c8      	cbnz	r0, 20720 <gnss_antenna_configure+0x38>
	if (strlen(CONFIG_GNSS_AT_MAGPIO) > 0) {
   206ec:	480d      	ldr	r0, [pc, #52]	; (20724 <gnss_antenna_configure+0x3c>)
   206ee:	f7fc fda8 	bl	1d242 <strlen>
   206f2:	b138      	cbz	r0, 20704 <gnss_antenna_configure+0x1c>
		err = nrf_modem_at_printf("%s", CONFIG_GNSS_AT_MAGPIO);
   206f4:	490b      	ldr	r1, [pc, #44]	; (20724 <gnss_antenna_configure+0x3c>)
   206f6:	480c      	ldr	r0, [pc, #48]	; (20728 <gnss_antenna_configure+0x40>)
   206f8:	f014 fc96 	bl	35028 <nrf_modem_at_printf>
		if (err) {
   206fc:	b110      	cbz	r0, 20704 <gnss_antenna_configure+0x1c>
			printk("Failed to set MAGPIO configuration\n");
   206fe:	480b      	ldr	r0, [pc, #44]	; (2072c <gnss_antenna_configure+0x44>)
   20700:	f01b ffe1 	bl	3c6c6 <printk>
	if (strlen(CONFIG_GNSS_AT_COEX0) > 0) {
   20704:	480a      	ldr	r0, [pc, #40]	; (20730 <gnss_antenna_configure+0x48>)
   20706:	f7fc fd9c 	bl	1d242 <strlen>
   2070a:	b148      	cbz	r0, 20720 <gnss_antenna_configure+0x38>
		err = nrf_modem_at_printf("%s", CONFIG_GNSS_AT_COEX0);
   2070c:	4908      	ldr	r1, [pc, #32]	; (20730 <gnss_antenna_configure+0x48>)
   2070e:	4806      	ldr	r0, [pc, #24]	; (20728 <gnss_antenna_configure+0x40>)
   20710:	f014 fc8a 	bl	35028 <nrf_modem_at_printf>
		if (err) {
   20714:	b120      	cbz	r0, 20720 <gnss_antenna_configure+0x38>
}
   20716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			printk("Failed to set COEX0 configuration\n");
   2071a:	4806      	ldr	r0, [pc, #24]	; (20734 <gnss_antenna_configure+0x4c>)
   2071c:	f01b bfd3 	b.w	3c6c6 <printk>
}
   20720:	bd08      	pop	{r3, pc}
   20722:	bf00      	nop
   20724:	00043ec3 	.word	0x00043ec3
   20728:	0004a310 	.word	0x0004a310
   2072c:	00047ad3 	.word	0x00047ad3
   20730:	00043ee2 	.word	0x00043ee2
   20734:	00047afb 	.word	0x00047afb

00020738 <location_assistance_data_handler>:
{
   20738:	b538      	push	{r3, r4, r5, lr}
   2073a:	4604      	mov	r4, r0
   2073c:	460d      	mov	r5, r1
		err = nrf_cloud_agps_process(buf, len);
   2073e:	f00c fa17 	bl	2cb70 <nrf_cloud_agps_process>
		if (err) {
   20742:	4602      	mov	r2, r0
   20744:	b1b0      	cbz	r0, 20774 <location_assistance_data_handler+0x3c>
			if (err != -EBADMSG) {
   20746:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   2074a:	d003      	beq.n	20754 <location_assistance_data_handler+0x1c>
				LOG_WRN("Unable to process A-GPS data, error: %d", err);
   2074c:	2157      	movs	r1, #87	; 0x57
   2074e:	480a      	ldr	r0, [pc, #40]	; (20778 <location_assistance_data_handler+0x40>)
   20750:	f01c f9d6 	bl	3cb00 <z_log_minimal_printk>
		err = nrf_cloud_pgps_process(buf, len);
   20754:	4629      	mov	r1, r5
   20756:	4620      	mov	r0, r4
   20758:	f00d fe86 	bl	2e468 <nrf_cloud_pgps_process>
		if (err) {
   2075c:	4602      	mov	r2, r0
   2075e:	b148      	cbz	r0, 20774 <location_assistance_data_handler+0x3c>
			if (err != -EBADMSG && err != -EFTYPE) {
   20760:	f020 0302 	bic.w	r3, r0, #2
   20764:	334f      	adds	r3, #79	; 0x4f
   20766:	d005      	beq.n	20774 <location_assistance_data_handler+0x3c>
}
   20768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				LOG_WRN("Unable to process P-GPS data, error: %d", err);
   2076c:	2157      	movs	r1, #87	; 0x57
   2076e:	4803      	ldr	r0, [pc, #12]	; (2077c <location_assistance_data_handler+0x44>)
   20770:	f01c b9c6 	b.w	3cb00 <z_log_minimal_printk>
}
   20774:	bd38      	pop	{r3, r4, r5, pc}
   20776:	bf00      	nop
   20778:	00043efa 	.word	0x00043efa
   2077c:	00043f27 	.word	0x00043f27

00020780 <start_location_tracking>:

int start_location_tracking(location_update_cb_t handler_cb, int interval)
{
   20780:	b530      	push	{r4, r5, lr}
   20782:	b08b      	sub	sp, #44	; 0x2c
   20784:	4604      	mov	r4, r0
   20786:	460d      	mov	r5, r1
	int err;

	if (!date_time_is_valid()) {
   20788:	f01e ff0b 	bl	3f5a2 <date_time_is_valid>
   2078c:	b918      	cbnz	r0, 20796 <start_location_tracking+0x16>
		LOG_WRN("Date and time unknown. Location Services results may suffer");
   2078e:	2157      	movs	r1, #87	; 0x57
   20790:	4816      	ldr	r0, [pc, #88]	; (207ec <start_location_tracking+0x6c>)
   20792:	f01c f9b5 	bl	3cb00 <z_log_minimal_printk>
	}

	/* Update the location update handler. */
	location_update_handler = handler_cb;
   20796:	4b16      	ldr	r3, [pc, #88]	; (207f0 <start_location_tracking+0x70>)

	/* Initialize the Location Services Library. */
	err = location_init(location_event_handler);
   20798:	4816      	ldr	r0, [pc, #88]	; (207f4 <start_location_tracking+0x74>)
	location_update_handler = handler_cb;
   2079a:	601c      	str	r4, [r3, #0]
	err = location_init(location_event_handler);
   2079c:	f008 fdbe 	bl	2931c <location_init>
	if (err) {
   207a0:	4604      	mov	r4, r0
   207a2:	b138      	cbz	r0, 207b4 <start_location_tracking+0x34>
		LOG_ERR("Initializing the Location library failed, error: %d", err);
   207a4:	2145      	movs	r1, #69	; 0x45
   207a6:	4602      	mov	r2, r0
   207a8:	4813      	ldr	r0, [pc, #76]	; (207f8 <start_location_tracking+0x78>)
	 * This will cause the configured location_event_handler to start being called with
	 * location data.
	 */
	err = location_request(&config);
	if (err) {
		LOG_ERR("Requesting location failed, error: %d\n", err);
   207aa:	f01c f9a9 	bl	3cb00 <z_log_minimal_printk>
		return err;
	}
	return 0;
}
   207ae:	4620      	mov	r0, r4
   207b0:	b00b      	add	sp, #44	; 0x2c
   207b2:	bd30      	pop	{r4, r5, pc}
		enum location_method methods[] = {LOCATION_METHOD_GNSS, LOCATION_METHOD_CELLULAR};
   207b4:	4b11      	ldr	r3, [pc, #68]	; (207fc <start_location_tracking+0x7c>)
		location_config_defaults_set(&config, ARRAY_SIZE(methods), methods);
   207b6:	2102      	movs	r1, #2
		enum location_method methods[] = {LOCATION_METHOD_GNSS, LOCATION_METHOD_CELLULAR};
   207b8:	881b      	ldrh	r3, [r3, #0]
		location_config_defaults_set(&config, ARRAY_SIZE(methods), methods);
   207ba:	aa01      	add	r2, sp, #4
   207bc:	a802      	add	r0, sp, #8
		enum location_method methods[] = {LOCATION_METHOD_GNSS, LOCATION_METHOD_CELLULAR};
   207be:	f8ad 3004 	strh.w	r3, [sp, #4]
		location_config_defaults_set(&config, ARRAY_SIZE(methods), methods);
   207c2:	f008 fdbb 	bl	2933c <location_config_defaults_set>
		config.methods[0].gnss.timeout = CONFIG_GNSS_FIX_TIMEOUT_SECONDS;
   207c6:	2328      	movs	r3, #40	; 0x28
   207c8:	f8ad 300c 	strh.w	r3, [sp, #12]
		config.methods[0].gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   207cc:	2301      	movs	r3, #1
	err = location_request(&config);
   207ce:	a802      	add	r0, sp, #8
	config.interval = interval;
   207d0:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
		config.methods[0].gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   207d4:	f88d 300e 	strb.w	r3, [sp, #14]
	err = location_request(&config);
   207d8:	f008 fde4 	bl	293a4 <location_request>
	if (err) {
   207dc:	4604      	mov	r4, r0
   207de:	2800      	cmp	r0, #0
   207e0:	d0e5      	beq.n	207ae <start_location_tracking+0x2e>
		LOG_ERR("Requesting location failed, error: %d\n", err);
   207e2:	4602      	mov	r2, r0
   207e4:	2145      	movs	r1, #69	; 0x45
   207e6:	4806      	ldr	r0, [pc, #24]	; (20800 <start_location_tracking+0x80>)
   207e8:	e7df      	b.n	207aa <start_location_tracking+0x2a>
   207ea:	bf00      	nop
   207ec:	00043f54 	.word	0x00043f54
   207f0:	2001909c 	.word	0x2001909c
   207f4:	000206b5 	.word	0x000206b5
   207f8:	00043f95 	.word	0x00043f95
   207fc:	00042860 	.word	0x00042860
   20800:	00043fce 	.word	0x00043fce

00020804 <pm_read>:
#else "i2c2 devicetree node is disabled"
#define I2C2 ""
#endif

bool pm_read(pm_data *data)
{
   20804:	b570      	push	{r4, r5, r6, lr}
    int ret;
    uint8_t pm_buffer[32] = {0};
   20806:	221c      	movs	r2, #28
   20808:	2500      	movs	r5, #0
{
   2080a:	b08e      	sub	sp, #56	; 0x38
   2080c:	4604      	mov	r4, r0
    uint8_t pm_buffer[32] = {0};
   2080e:	4629      	mov	r1, r5
   20810:	eb0d 0002 	add.w	r0, sp, r2
   20814:	9506      	str	r5, [sp, #24]
   20816:	f020 fe0d 	bl	41434 <memset>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   2081a:	4828      	ldr	r0, [pc, #160]	; (208bc <pm_read+0xb8>)
   2081c:	f015 fb56 	bl	35ecc <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
	msg[0].len = num_write;
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
   20820:	2220      	movs	r2, #32
   20822:	9204      	str	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   20824:	2207      	movs	r2, #7
	msg[0].len = num_write;
   20826:	e9cd 5500 	strd	r5, r5, [sp]
	msg[0].flags = I2C_MSG_WRITE;
   2082a:	f88d 5008 	strb.w	r5, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   2082e:	ad06      	add	r5, sp, #24
   20830:	9503      	str	r5, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   20832:	f88d 2014 	strb.w	r2, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   20836:	6883      	ldr	r3, [r0, #8]
   20838:	2202      	movs	r2, #2
   2083a:	689e      	ldr	r6, [r3, #8]
   2083c:	4669      	mov	r1, sp
   2083e:	2312      	movs	r3, #18
   20840:	47b0      	blx	r6

    const struct device *dev_i2c_pm = device_get_binding(I2C2);

    ret = i2c_write_read(dev_i2c_pm, PM_ADDR, PM_SC1, 0, &pm_buffer, 32);
    if (ret != 0)
   20842:	2800      	cmp	r0, #0
   20844:	d138      	bne.n	208b8 <pm_read+0xb4>
        // printf("Failed to write/read I2C device address (err %i)\n", ret);
        return true;
    }

    // Check that start byte is correct!
    if (pm_buffer[0] != 0x42)
   20846:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2084a:	2b42      	cmp	r3, #66	; 0x42
   2084c:	d134      	bne.n	208b8 <pm_read+0xb4>
   2084e:	462b      	mov	r3, r5
   20850:	466a      	mov	r2, sp
   20852:	2101      	movs	r1, #1

    uint16_t buffer_u16[12];
    for (uint8_t i = 0; i < 12; i++)
    {
        buffer_u16[i] = pm_buffer[2 + i * 2 + 1];
        buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
   20854:	789d      	ldrb	r5, [r3, #2]
        buffer_u16[i] = pm_buffer[2 + i * 2 + 1];
   20856:	78d8      	ldrb	r0, [r3, #3]
    for (uint8_t i = 0; i < 12; i++)
   20858:	3101      	adds	r1, #1
        buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
   2085a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    for (uint8_t i = 0; i < 12; i++)
   2085e:	290d      	cmp	r1, #13
        buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
   20860:	f822 0b02 	strh.w	r0, [r2], #2
    for (uint8_t i = 0; i < 12; i++)
   20864:	f103 0302 	add.w	r3, r3, #2
   20868:	d1f4      	bne.n	20854 <pm_read+0x50>
    data->particles_10um =  buffer_u16[8];
    data->particles_25um =  buffer_u16[9];
    data->particles_50um =  buffer_u16[10];
    data->particles_100um =  buffer_u16[11];

    return false;
   2086a:	2000      	movs	r0, #0
    data->pm10_standard = buffer_u16[0];
   2086c:	f8bd 3000 	ldrh.w	r3, [sp]
   20870:	8023      	strh	r3, [r4, #0]
    data->pm25_standard = buffer_u16[1];
   20872:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   20876:	8063      	strh	r3, [r4, #2]
    data->pm100_standard = buffer_u16[2];
   20878:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2087c:	80a3      	strh	r3, [r4, #4]
    data->pm10_env = buffer_u16[3];
   2087e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   20882:	80e3      	strh	r3, [r4, #6]
    data->pm25_env = buffer_u16[4];
   20884:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   20888:	8123      	strh	r3, [r4, #8]
    data->pm100_env = buffer_u16[5];
   2088a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2088e:	8163      	strh	r3, [r4, #10]
    data->particles_03um = buffer_u16[6]; 
   20890:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   20894:	81a3      	strh	r3, [r4, #12]
    data->particles_05um =  buffer_u16[7];
   20896:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2089a:	81e3      	strh	r3, [r4, #14]
    data->particles_10um =  buffer_u16[8];
   2089c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   208a0:	8223      	strh	r3, [r4, #16]
    data->particles_25um =  buffer_u16[9];
   208a2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   208a6:	8263      	strh	r3, [r4, #18]
    data->particles_50um =  buffer_u16[10];
   208a8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   208ac:	82a3      	strh	r3, [r4, #20]
    data->particles_100um =  buffer_u16[11];
   208ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   208b2:	82e3      	strh	r3, [r4, #22]
}
   208b4:	b00e      	add	sp, #56	; 0x38
   208b6:	bd70      	pop	{r4, r5, r6, pc}
        return true;
   208b8:	2001      	movs	r0, #1
   208ba:	e7fb      	b.n	208b4 <pm_read+0xb0>
   208bc:	0004400c 	.word	0x0004400c

000208c0 <sht40_read>:
#endif

bool sht40_read(sht40_data *data)
{
    int ret;
    uint8_t sht40_buffer[6] = {0};
   208c0:	2300      	movs	r3, #0
{
   208c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   208c4:	b087      	sub	sp, #28
    uint8_t sht40_buffer[6] = {0};
   208c6:	9301      	str	r3, [sp, #4]
   208c8:	f8ad 3008 	strh.w	r3, [sp, #8]
	float t_ticks, rh_ticks = 0;
    uint8_t test[1] = {0xFD};
   208cc:	23fd      	movs	r3, #253	; 0xfd
{
   208ce:	4604      	mov	r4, r0
    uint8_t test[1] = {0xFD};
   208d0:	f88d 3000 	strb.w	r3, [sp]
   208d4:	4832      	ldr	r0, [pc, #200]	; (209a0 <sht40_read+0xe0>)
   208d6:	f015 faf9 	bl	35ecc <z_impl_device_get_binding>
	msg.len = num_bytes;
   208da:	2501      	movs	r5, #1
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   208dc:	2302      	movs	r3, #2
   208de:	4606      	mov	r6, r0
	msg.buf = (uint8_t *)buf;
   208e0:	f8cd d00c 	str.w	sp, [sp, #12]
	msg.len = num_bytes;
   208e4:	9504      	str	r5, [sp, #16]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   208e6:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   208ea:	6883      	ldr	r3, [r0, #8]
   208ec:	a903      	add	r1, sp, #12
   208ee:	689f      	ldr	r7, [r3, #8]
   208f0:	462a      	mov	r2, r5
   208f2:	2344      	movs	r3, #68	; 0x44
   208f4:	47b8      	blx	r7

    const struct device *dev_i2c_th = device_get_binding(I2C2);

    ret = i2c_write(dev_i2c_th, test, 1, SHT40_ADDR);
    if (ret != 0)
   208f6:	4601      	mov	r1, r0
   208f8:	b128      	cbz	r0, 20906 <sht40_read+0x46>
    {
    	printf("Failed to write I2C device address (err %i)\n", ret);
   208fa:	482a      	ldr	r0, [pc, #168]	; (209a4 <sht40_read+0xe4>)
    k_msleep(10);

    ret = i2c_read(dev_i2c_th, sht40_buffer, 6, SHT40_ADDR);
    if (ret != 0)
    {
    	printf("Failed to read I2C device address (err %i)\n", ret);
   208fc:	f019 fea2 	bl	3a644 <iprintf>
    	return true;
   20900:	4628      	mov	r0, r5

    data->temperature = -45 + 175 * t_ticks / 65535;
    data->humidity = -6 + 125 * rh_ticks / 65535;

    return false;
}
   20902:	b007      	add	sp, #28
   20904:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sleep(timeout);
   20906:	2100      	movs	r1, #0
   20908:	f44f 70a4 	mov.w	r0, #328	; 0x148
   2090c:	f017 fe80 	bl	38610 <z_impl_k_sleep>
	msg.buf = buf;
   20910:	ab01      	add	r3, sp, #4
   20912:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   20914:	2306      	movs	r3, #6
   20916:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   20918:	2303      	movs	r3, #3
   2091a:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2091e:	68b3      	ldr	r3, [r6, #8]
   20920:	a903      	add	r1, sp, #12
   20922:	689f      	ldr	r7, [r3, #8]
   20924:	462a      	mov	r2, r5
   20926:	2344      	movs	r3, #68	; 0x44
   20928:	4630      	mov	r0, r6
   2092a:	47b8      	blx	r7
    if (ret != 0)
   2092c:	4601      	mov	r1, r0
   2092e:	b108      	cbz	r0, 20934 <sht40_read+0x74>
    	printf("Failed to read I2C device address (err %i)\n", ret);
   20930:	481d      	ldr	r0, [pc, #116]	; (209a8 <sht40_read+0xe8>)
   20932:	e7e3      	b.n	208fc <sht40_read+0x3c>
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
   20934:	f89d 2007 	ldrb.w	r2, [sp, #7]
   20938:	f89d 3008 	ldrb.w	r3, [sp, #8]
    data->temperature = -45 + 175 * t_ticks / 65535;
   2093c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 209ac <sht40_read+0xec>
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
   20940:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   20944:	ee07 3a90 	vmov	s15, r3
    t_ticks = (uint16_t)sht40_buffer[0] * 256 + (uint16_t)sht40_buffer[1];
   20948:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2094c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    data->temperature = -45 + 175 * t_ticks / 65535;
   20950:	ed9f 6a17 	vldr	s12, [pc, #92]	; 209b0 <sht40_read+0xf0>
    t_ticks = (uint16_t)sht40_buffer[0] * 256 + (uint16_t)sht40_buffer[1];
   20954:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   20958:	ee07 3a10 	vmov	s14, r3
   2095c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    data->temperature = -45 + 175 * t_ticks / 65535;
   20960:	ee27 7a26 	vmul.f32	s14, s14, s13
   20964:	eec7 6a06 	vdiv.f32	s13, s14, s12
   20968:	ed9f 7a12 	vldr	s14, [pc, #72]	; 209b4 <sht40_read+0xf4>
   2096c:	ee36 7ac7 	vsub.f32	s14, s13, s14
   20970:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
   20974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    data->temperature = -45 + 175 * t_ticks / 65535;
   20978:	ee17 3a10 	vmov	r3, s14
    data->humidity = -6 + 125 * rh_ticks / 65535;
   2097c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 209b8 <sht40_read+0xf8>
   20980:	ee67 7a87 	vmul.f32	s15, s15, s14
   20984:	ee87 7a86 	vdiv.f32	s14, s15, s12
   20988:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   2098c:	ee77 7a67 	vsub.f32	s15, s14, s15
   20990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    data->temperature = -45 + 175 * t_ticks / 65535;
   20994:	8023      	strh	r3, [r4, #0]
    data->humidity = -6 + 125 * rh_ticks / 65535;
   20996:	ee17 3a90 	vmov	r3, s15
   2099a:	8063      	strh	r3, [r4, #2]
    return false;
   2099c:	e7b1      	b.n	20902 <sht40_read+0x42>
   2099e:	bf00      	nop
   209a0:	0004400c 	.word	0x0004400c
   209a4:	00044012 	.word	0x00044012
   209a8:	0004403f 	.word	0x0004403f
   209ac:	432f0000 	.word	0x432f0000
   209b0:	477fff00 	.word	0x477fff00
   209b4:	42340000 	.word	0x42340000
   209b8:	42fa0000 	.word	0x42fa0000

000209bc <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   209bc:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   209be:	4c0a      	ldr	r4, [pc, #40]	; (209e8 <crc8_ccitt+0x2c>)
   209c0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   209c2:	4291      	cmp	r1, r2
   209c4:	d100      	bne.n	209c8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   209c6:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   209c8:	f811 3b01 	ldrb.w	r3, [r1], #1
   209cc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   209ce:	0903      	lsrs	r3, r0, #4
   209d0:	5ce3      	ldrb	r3, [r4, r3]
   209d2:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   209d6:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   209d8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   209dc:	5ce0      	ldrb	r0, [r4, r3]
   209de:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   209e2:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   209e4:	e7ed      	b.n	209c2 <crc8_ccitt+0x6>
   209e6:	bf00      	nop
   209e8:	0004406b 	.word	0x0004406b

000209ec <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   209ec:	2803      	cmp	r0, #3
{
   209ee:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   209f0:	d906      	bls.n	20a00 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   209f2:	f01c fec4 	bl	3d77e <__errno>
   209f6:	2309      	movs	r3, #9
   209f8:	6003      	str	r3, [r0, #0]
   209fa:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   209fe:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20a00:	4b04      	ldr	r3, [pc, #16]	; (20a14 <_check_fd+0x28>)
   20a02:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   20a06:	3008      	adds	r0, #8
   20a08:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   20a0c:	2b00      	cmp	r3, #0
   20a0e:	d0f0      	beq.n	209f2 <_check_fd+0x6>
	return 0;
   20a10:	2000      	movs	r0, #0
   20a12:	e7f4      	b.n	209fe <_check_fd+0x12>
   20a14:	200190a0 	.word	0x200190a0

00020a18 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   20a18:	b570      	push	{r4, r5, r6, lr}
   20a1a:	4604      	mov	r4, r0
   20a1c:	460d      	mov	r5, r1
   20a1e:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   20a20:	f7ff ffe4 	bl	209ec <_check_fd>
   20a24:	2800      	cmp	r0, #0
   20a26:	db09      	blt.n	20a3c <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   20a28:	4b06      	ldr	r3, [pc, #24]	; (20a44 <z_get_fd_obj+0x2c>)
   20a2a:	0160      	lsls	r0, r4, #5
   20a2c:	b145      	cbz	r5, 20a40 <z_get_fd_obj+0x28>
   20a2e:	181a      	adds	r2, r3, r0
   20a30:	6852      	ldr	r2, [r2, #4]
   20a32:	42aa      	cmp	r2, r5
   20a34:	d004      	beq.n	20a40 <z_get_fd_obj+0x28>
		errno = err;
   20a36:	f01c fea2 	bl	3d77e <__errno>
   20a3a:	6006      	str	r6, [r0, #0]
		return NULL;
   20a3c:	2000      	movs	r0, #0
   20a3e:	e000      	b.n	20a42 <z_get_fd_obj+0x2a>
		return NULL;
	}

	return entry->obj;
   20a40:	5818      	ldr	r0, [r3, r0]
}
   20a42:	bd70      	pop	{r4, r5, r6, pc}
   20a44:	200190a0 	.word	0x200190a0

00020a48 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   20a48:	b570      	push	{r4, r5, r6, lr}
   20a4a:	4604      	mov	r4, r0
   20a4c:	460e      	mov	r6, r1
   20a4e:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   20a50:	f7ff ffcc 	bl	209ec <_check_fd>
   20a54:	2800      	cmp	r0, #0
   20a56:	db0c      	blt.n	20a72 <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   20a58:	4b07      	ldr	r3, [pc, #28]	; (20a78 <z_get_fd_obj_and_vtable+0x30>)
   20a5a:	0161      	lsls	r1, r4, #5
   20a5c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   20a60:	6862      	ldr	r2, [r4, #4]
   20a62:	6032      	str	r2, [r6, #0]

	if (lock) {
   20a64:	b11d      	cbz	r5, 20a6e <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   20a66:	f101 020c 	add.w	r2, r1, #12
   20a6a:	441a      	add	r2, r3
   20a6c:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   20a6e:	5858      	ldr	r0, [r3, r1]
}
   20a70:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   20a72:	2000      	movs	r0, #0
   20a74:	e7fc      	b.n	20a70 <z_get_fd_obj_and_vtable+0x28>
   20a76:	bf00      	nop
   20a78:	200190a0 	.word	0x200190a0

00020a7c <z_reserve_fd>:

int z_reserve_fd(void)
{
   20a7c:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   20a7e:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   20a80:	f04f 32ff 	mov.w	r2, #4294967295
   20a84:	f04f 33ff 	mov.w	r3, #4294967295
   20a88:	4814      	ldr	r0, [pc, #80]	; (20adc <z_reserve_fd+0x60>)
   20a8a:	f015 ff23 	bl	368d4 <z_impl_k_mutex_lock>
   20a8e:	4a14      	ldr	r2, [pc, #80]	; (20ae0 <z_reserve_fd+0x64>)
		if (!atomic_get(&fdtable[fd].refcount)) {
   20a90:	0163      	lsls	r3, r4, #5
   20a92:	e8d2 1faf 	lda	r1, [r2]
   20a96:	b179      	cbz	r1, 20ab8 <z_reserve_fd+0x3c>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   20a98:	3401      	adds	r4, #1
   20a9a:	2c04      	cmp	r4, #4
   20a9c:	f102 0220 	add.w	r2, r2, #32
   20aa0:	d1f6      	bne.n	20a90 <z_reserve_fd+0x14>
	errno = ENFILE;
   20aa2:	f01c fe6c 	bl	3d77e <__errno>
   20aa6:	2317      	movs	r3, #23
	return -1;
   20aa8:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   20aac:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   20aae:	480b      	ldr	r0, [pc, #44]	; (20adc <z_reserve_fd+0x60>)
   20ab0:	f015 ffe2 	bl	36a78 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   20ab4:	4620      	mov	r0, r4
   20ab6:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20ab8:	e8d2 0fef 	ldaex	r0, [r2]
   20abc:	3001      	adds	r0, #1
   20abe:	e8c2 0fec 	stlex	ip, r0, [r2]
   20ac2:	f1bc 0f00 	cmp.w	ip, #0
   20ac6:	d1f7      	bne.n	20ab8 <z_reserve_fd+0x3c>
		fdtable[fd].obj = NULL;
   20ac8:	4806      	ldr	r0, [pc, #24]	; (20ae4 <z_reserve_fd+0x68>)
   20aca:	18c2      	adds	r2, r0, r3
   20acc:	50c1      	str	r1, [r0, r3]
		fdtable[fd].vtable = NULL;
   20ace:	6051      	str	r1, [r2, #4]
		k_mutex_init(&fdtable[fd].lock);
   20ad0:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   20ad2:	4418      	add	r0, r3
   20ad4:	f020 fa64 	bl	40fa0 <z_impl_k_mutex_init>
   20ad8:	e7e9      	b.n	20aae <z_reserve_fd+0x32>
   20ada:	bf00      	nop
   20adc:	20014f18 	.word	0x20014f18
   20ae0:	200190a8 	.word	0x200190a8
   20ae4:	200190a0 	.word	0x200190a0

00020ae8 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   20ae8:	b410      	push	{r4}
   20aea:	4604      	mov	r4, r0
   20aec:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   20aee:	4b0a      	ldr	r3, [pc, #40]	; (20b18 <z_finalize_fd+0x30>)
   20af0:	0162      	lsls	r2, r4, #5
   20af2:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   20af6:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   20af8:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   20afa:	b148      	cbz	r0, 20b10 <z_finalize_fd+0x28>
   20afc:	68c4      	ldr	r4, [r0, #12]
   20afe:	b13c      	cbz	r4, 20b10 <z_finalize_fd+0x28>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   20b00:	320c      	adds	r2, #12
   20b02:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   20b04:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   20b08:	f240 1205 	movw	r2, #261	; 0x105
   20b0c:	f01b bd53 	b.w	3c5b6 <z_fdtable_call_ioctl.constprop.0>
}
   20b10:	f85d 4b04 	ldr.w	r4, [sp], #4
   20b14:	4770      	bx	lr
   20b16:	bf00      	nop
   20b18:	200190a0 	.word	0x200190a0

00020b1c <z_free_fd>:

void z_free_fd(int fd)
{
   20b1c:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   20b1e:	490d      	ldr	r1, [pc, #52]	; (20b54 <z_free_fd+0x38>)
   20b20:	0140      	lsls	r0, r0, #5
   20b22:	f100 0308 	add.w	r3, r0, #8
   20b26:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20b28:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   20b2c:	b182      	cbz	r2, 20b50 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   20b2e:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20b30:	e8d3 5fef 	ldaex	r5, [r3]
   20b34:	4295      	cmp	r5, r2
   20b36:	d104      	bne.n	20b42 <z_free_fd+0x26>
   20b38:	e8c3 4fec 	stlex	ip, r4, [r3]
   20b3c:	f1bc 0f00 	cmp.w	ip, #0
   20b40:	d1f6      	bne.n	20b30 <z_free_fd+0x14>
   20b42:	d1f1      	bne.n	20b28 <z_free_fd+0xc>
	if (old_rc != 1) {
   20b44:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   20b46:	bf01      	itttt	eq
   20b48:	2300      	moveq	r3, #0
   20b4a:	180a      	addeq	r2, r1, r0
   20b4c:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   20b4e:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   20b50:	bd30      	pop	{r4, r5, pc}
   20b52:	bf00      	nop
   20b54:	200190a0 	.word	0x200190a0

00020b58 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   20b58:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   20b5a:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   20b5c:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   20b60:	2b02      	cmp	r3, #2
{
   20b62:	4604      	mov	r4, r0
   20b64:	460e      	mov	r6, r1
	notify->result = res;
   20b66:	6081      	str	r1, [r0, #8]
	switch (method) {
   20b68:	d010      	beq.n	20b8c <sys_notify_finalize+0x34>
   20b6a:	2b03      	cmp	r3, #3
   20b6c:	d004      	beq.n	20b78 <sys_notify_finalize+0x20>
   20b6e:	2b01      	cmp	r3, #1
   20b70:	d10f      	bne.n	20b92 <sys_notify_finalize+0x3a>
   20b72:	2500      	movs	r5, #0
   20b74:	4628      	mov	r0, r5
   20b76:	e001      	b.n	20b7c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   20b78:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   20b7a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   20b7c:	2300      	movs	r3, #0
   20b7e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   20b80:	b110      	cbz	r0, 20b88 <sys_notify_finalize+0x30>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   20b82:	4631      	mov	r1, r6
   20b84:	f018 fd18 	bl	395b8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   20b88:	4628      	mov	r0, r5
   20b8a:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = NULL;
   20b8c:	2500      	movs	r5, #0
		sig = notify->method.signal;
   20b8e:	6800      	ldr	r0, [r0, #0]
		break;
   20b90:	e7f4      	b.n	20b7c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   20b92:	2245      	movs	r2, #69	; 0x45
   20b94:	4904      	ldr	r1, [pc, #16]	; (20ba8 <sys_notify_finalize+0x50>)
   20b96:	4805      	ldr	r0, [pc, #20]	; (20bac <sys_notify_finalize+0x54>)
   20b98:	f01b ff78 	bl	3ca8c <assert_print>
   20b9c:	2145      	movs	r1, #69	; 0x45
   20b9e:	4802      	ldr	r0, [pc, #8]	; (20ba8 <sys_notify_finalize+0x50>)
   20ba0:	f01b ff6d 	bl	3ca7e <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   20ba4:	2500      	movs	r5, #0
   20ba6:	e7e8      	b.n	20b7a <sys_notify_finalize+0x22>
   20ba8:	0004407b 	.word	0x0004407b
   20bac:	0004409e 	.word	0x0004409e

00020bb0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   20bb0:	680b      	ldr	r3, [r1, #0]
   20bb2:	3301      	adds	r3, #1
   20bb4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   20bb6:	4b01      	ldr	r3, [pc, #4]	; (20bbc <char_out+0xc>)
   20bb8:	681b      	ldr	r3, [r3, #0]
   20bba:	4718      	bx	r3
   20bbc:	200145c8 	.word	0x200145c8

00020bc0 <__printk_hook_install>:
	_char_out = fn;
   20bc0:	4b01      	ldr	r3, [pc, #4]	; (20bc8 <__printk_hook_install+0x8>)
   20bc2:	6018      	str	r0, [r3, #0]
}
   20bc4:	4770      	bx	lr
   20bc6:	bf00      	nop
   20bc8:	200145c8 	.word	0x200145c8

00020bcc <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   20bcc:	b507      	push	{r0, r1, r2, lr}
   20bce:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   20bd0:	2100      	movs	r1, #0
{
   20bd2:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   20bd4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   20bd6:	4803      	ldr	r0, [pc, #12]	; (20be4 <vprintk+0x18>)
   20bd8:	a901      	add	r1, sp, #4
   20bda:	f7fc fb3d 	bl	1d258 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   20bde:	b003      	add	sp, #12
   20be0:	f85d fb04 	ldr.w	pc, [sp], #4
   20be4:	00020bb1 	.word	0x00020bb1

00020be8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   20be8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   20bea:	2500      	movs	r5, #0
{
   20bec:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   20bee:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   20bf2:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   20bf4:	a901      	add	r1, sp, #4
   20bf6:	4805      	ldr	r0, [pc, #20]	; (20c0c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   20bf8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   20bfa:	f7fc fb2d 	bl	1d258 <cbvprintf>

	if (ctx.count < ctx.max) {
   20bfe:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   20c02:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   20c04:	bfb8      	it	lt
   20c06:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   20c08:	b005      	add	sp, #20
   20c0a:	bd30      	pop	{r4, r5, pc}
   20c0c:	0003c6a1 	.word	0x0003c6a1

00020c10 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   20c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c14:	ed2d 8b02 	vpush	{d8}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20c18:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   20c1c:	b083      	sub	sp, #12
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   20c1e:	f019 0f08 	tst.w	r9, #8
{
   20c22:	4604      	mov	r4, r0
   20c24:	9201      	str	r2, [sp, #4]
	if (processing) {
   20c26:	d01f      	beq.n	20c68 <process_event+0x58>
		if (evt == EVT_COMPLETE) {
   20c28:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   20c2a:	bf0c      	ite	eq
   20c2c:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   20c30:	f049 0920 	orrne.w	r9, r9, #32
   20c34:	f8a0 901c 	strh.w	r9, [r0, #28]
   20c38:	f104 0014 	add.w	r0, r4, #20
   20c3c:	f015 fcde 	bl	365fc <z_spin_unlock_valid>
   20c40:	b940      	cbnz	r0, 20c54 <process_event+0x44>
   20c42:	499b      	ldr	r1, [pc, #620]	; (20eb0 <process_event+0x2a0>)
   20c44:	489b      	ldr	r0, [pc, #620]	; (20eb4 <process_event+0x2a4>)
   20c46:	22b9      	movs	r2, #185	; 0xb9
   20c48:	f01b ff20 	bl	3ca8c <assert_print>
   20c4c:	21b9      	movs	r1, #185	; 0xb9
   20c4e:	4898      	ldr	r0, [pc, #608]	; (20eb0 <process_event+0x2a0>)
   20c50:	f01b ff15 	bl	3ca7e <assert_post_action>
   20c54:	9b01      	ldr	r3, [sp, #4]
   20c56:	f383 8811 	msr	BASEPRI, r3
   20c5a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   20c5e:	b003      	add	sp, #12
   20c60:	ecbd 8b02 	vpop	{d8}
   20c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   20c68:	4f93      	ldr	r7, [pc, #588]	; (20eb8 <process_event+0x2a8>)
   20c6a:	f8df 8248 	ldr.w	r8, [pc, #584]	; 20eb4 <process_event+0x2a4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c6e:	f8df a240 	ldr.w	sl, [pc, #576]	; 20eb0 <process_event+0x2a0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20c72:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   20c76:	2902      	cmp	r1, #2
   20c78:	d106      	bne.n	20c88 <process_event+0x78>
			evt = process_recheck(mgr);
   20c7a:	4620      	mov	r0, r4
   20c7c:	f01b fd3d 	bl	3c6fa <process_recheck>
		if (evt == EVT_NOP) {
   20c80:	2800      	cmp	r0, #0
   20c82:	d0d9      	beq.n	20c38 <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   20c84:	2801      	cmp	r0, #1
   20c86:	d167      	bne.n	20d58 <process_event+0x148>
			res = mgr->last_res;
   20c88:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20c8c:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   20c8e:	f1bb 0f00 	cmp.w	fp, #0
   20c92:	da1c      	bge.n	20cce <process_event+0xbe>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   20c94:	2600      	movs	r6, #0
		*clients = mgr->clients;
   20c96:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20c98:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   20c9c:	e9c4 6600 	strd	r6, r6, [r4]
   20ca0:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   20ca4:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   20ca6:	9600      	str	r6, [sp, #0]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   20ca8:	8ba3      	ldrh	r3, [r4, #28]
   20caa:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   20cae:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   20cb0:	ee08 2a10 	vmov	s16, r2
				   && !sys_slist_is_empty(&mgr->monitors);
   20cb4:	d003      	beq.n	20cbe <process_event+0xae>
		if (do_monitors
   20cb6:	68a2      	ldr	r2, [r4, #8]
   20cb8:	2a00      	cmp	r2, #0
   20cba:	f040 80ff 	bne.w	20ebc <process_event+0x2ac>
		    || !sys_slist_is_empty(&clients)
   20cbe:	b91d      	cbnz	r5, 20cc8 <process_event+0xb8>
		    || (transit != NULL)) {
   20cc0:	9a00      	ldr	r2, [sp, #0]
   20cc2:	2a00      	cmp	r2, #0
   20cc4:	f000 813f 	beq.w	20f46 <process_event+0x336>
   20cc8:	f04f 0900 	mov.w	r9, #0
   20ccc:	e0f8      	b.n	20ec0 <process_event+0x2b0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20cce:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   20cd2:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   20cd4:	2901      	cmp	r1, #1
   20cd6:	d821      	bhi.n	20d1c <process_event+0x10c>
	list->head = NULL;
   20cd8:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20cda:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   20cde:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   20ce0:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20ce2:	b29b      	uxth	r3, r3
	list->tail = NULL;
   20ce4:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   20ce8:	d10a      	bne.n	20d00 <process_event+0xf0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   20cea:	b13d      	cbz	r5, 20cfc <process_event+0xec>
   20cec:	4629      	mov	r1, r5
   20cee:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   20cf0:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
   20cf2:	3201      	adds	r2, #1
   20cf4:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   20cf6:	2900      	cmp	r1, #0
   20cf8:	d1fa      	bne.n	20cf0 <process_event+0xe0>
   20cfa:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20cfc:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   20d00:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   20d02:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   20d04:	f01b fcf9 	bl	3c6fa <process_recheck>
   20d08:	2800      	cmp	r0, #0
   20d0a:	f000 80cc 	beq.w	20ea6 <process_event+0x296>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   20d0e:	8ba3      	ldrh	r3, [r4, #28]
   20d10:	f043 0320 	orr.w	r3, r3, #32
   20d14:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   20d16:	2300      	movs	r3, #0
   20d18:	9300      	str	r3, [sp, #0]
   20d1a:	e7c5      	b.n	20ca8 <process_event+0x98>
	} else if (state == ONOFF_STATE_TO_OFF) {
   20d1c:	2a04      	cmp	r2, #4
   20d1e:	d10f      	bne.n	20d40 <process_event+0x130>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20d20:	f023 0307 	bic.w	r3, r3, #7
   20d24:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   20d26:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   20d28:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   20d2a:	f01b fce6 	bl	3c6fa <process_recheck>
   20d2e:	2800      	cmp	r0, #0
   20d30:	f000 80bb 	beq.w	20eaa <process_event+0x29a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   20d34:	f042 0220 	orr.w	r2, r2, #32
   20d38:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   20d3a:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   20d3c:	9500      	str	r5, [sp, #0]
   20d3e:	e7b3      	b.n	20ca8 <process_event+0x98>
		__ASSERT_NO_MSG(false);
   20d40:	4639      	mov	r1, r7
   20d42:	4640      	mov	r0, r8
   20d44:	f240 121b 	movw	r2, #283	; 0x11b
   20d48:	f01b fea0 	bl	3ca8c <assert_print>
   20d4c:	f240 111b 	movw	r1, #283	; 0x11b
   20d50:	4638      	mov	r0, r7
   20d52:	f01b fe94 	bl	3ca7e <assert_post_action>
   20d56:	e7f0      	b.n	20d3a <process_event+0x12a>
		} else if (evt == EVT_START) {
   20d58:	2803      	cmp	r0, #3
   20d5a:	d132      	bne.n	20dc2 <process_event+0x1b2>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   20d5c:	f1b9 0f00 	cmp.w	r9, #0
   20d60:	d00a      	beq.n	20d78 <process_event+0x168>
   20d62:	4639      	mov	r1, r7
   20d64:	4640      	mov	r0, r8
   20d66:	f44f 72ab 	mov.w	r2, #342	; 0x156
   20d6a:	f01b fe8f 	bl	3ca8c <assert_print>
   20d6e:	f44f 71ab 	mov.w	r1, #342	; 0x156
   20d72:	4638      	mov	r0, r7
   20d74:	f01b fe83 	bl	3ca7e <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   20d78:	6823      	ldr	r3, [r4, #0]
   20d7a:	b953      	cbnz	r3, 20d92 <process_event+0x182>
   20d7c:	4639      	mov	r1, r7
   20d7e:	4640      	mov	r0, r8
   20d80:	f240 1257 	movw	r2, #343	; 0x157
   20d84:	f01b fe82 	bl	3ca8c <assert_print>
   20d88:	f240 1157 	movw	r1, #343	; 0x157
   20d8c:	4638      	mov	r0, r7
   20d8e:	f01b fe76 	bl	3ca7e <assert_post_action>
			transit = mgr->transitions->start;
   20d92:	6923      	ldr	r3, [r4, #16]
   20d94:	681b      	ldr	r3, [r3, #0]
   20d96:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   20d98:	b953      	cbnz	r3, 20db0 <process_event+0x1a0>
   20d9a:	4639      	mov	r1, r7
   20d9c:	4640      	mov	r0, r8
   20d9e:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   20da2:	f01b fe73 	bl	3ca8c <assert_print>
   20da6:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   20daa:	4638      	mov	r0, r7
   20dac:	f01b fe67 	bl	3ca7e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20db0:	8ba3      	ldrh	r3, [r4, #28]
   20db2:	f023 0307 	bic.w	r3, r3, #7
   20db6:	f043 0306 	orr.w	r3, r3, #6
}
   20dba:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   20dbc:	83a3      	strh	r3, [r4, #28]
		res = 0;
   20dbe:	46ab      	mov	fp, r5
}
   20dc0:	e772      	b.n	20ca8 <process_event+0x98>
		} else if (evt == EVT_STOP) {
   20dc2:	2804      	cmp	r0, #4
   20dc4:	d12f      	bne.n	20e26 <process_event+0x216>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   20dc6:	f1b9 0f02 	cmp.w	r9, #2
   20dca:	d00a      	beq.n	20de2 <process_event+0x1d2>
   20dcc:	4639      	mov	r1, r7
   20dce:	4640      	mov	r0, r8
   20dd0:	f240 125d 	movw	r2, #349	; 0x15d
   20dd4:	f01b fe5a 	bl	3ca8c <assert_print>
   20dd8:	f240 115d 	movw	r1, #349	; 0x15d
   20ddc:	4638      	mov	r0, r7
   20dde:	f01b fe4e 	bl	3ca7e <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   20de2:	8be3      	ldrh	r3, [r4, #30]
   20de4:	b153      	cbz	r3, 20dfc <process_event+0x1ec>
   20de6:	4639      	mov	r1, r7
   20de8:	4640      	mov	r0, r8
   20dea:	f44f 72af 	mov.w	r2, #350	; 0x15e
   20dee:	f01b fe4d 	bl	3ca8c <assert_print>
   20df2:	f44f 71af 	mov.w	r1, #350	; 0x15e
   20df6:	4638      	mov	r0, r7
   20df8:	f01b fe41 	bl	3ca7e <assert_post_action>
			transit = mgr->transitions->stop;
   20dfc:	6923      	ldr	r3, [r4, #16]
   20dfe:	685b      	ldr	r3, [r3, #4]
   20e00:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   20e02:	b953      	cbnz	r3, 20e1a <process_event+0x20a>
   20e04:	4639      	mov	r1, r7
   20e06:	4640      	mov	r0, r8
   20e08:	f240 1261 	movw	r2, #353	; 0x161
   20e0c:	f01b fe3e 	bl	3ca8c <assert_print>
   20e10:	f240 1161 	movw	r1, #353	; 0x161
   20e14:	4638      	mov	r0, r7
   20e16:	f01b fe32 	bl	3ca7e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20e1a:	8ba3      	ldrh	r3, [r4, #28]
   20e1c:	f023 0307 	bic.w	r3, r3, #7
   20e20:	f043 0304 	orr.w	r3, r3, #4
   20e24:	e7c9      	b.n	20dba <process_event+0x1aa>
		} else if (evt == EVT_RESET) {
   20e26:	2805      	cmp	r0, #5
   20e28:	d12f      	bne.n	20e8a <process_event+0x27a>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   20e2a:	f1b9 0f01 	cmp.w	r9, #1
   20e2e:	d00a      	beq.n	20e46 <process_event+0x236>
   20e30:	4639      	mov	r1, r7
   20e32:	4640      	mov	r0, r8
   20e34:	f44f 72b2 	mov.w	r2, #356	; 0x164
   20e38:	f01b fe28 	bl	3ca8c <assert_print>
   20e3c:	f44f 71b2 	mov.w	r1, #356	; 0x164
   20e40:	4638      	mov	r0, r7
   20e42:	f01b fe1c 	bl	3ca7e <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   20e46:	6823      	ldr	r3, [r4, #0]
   20e48:	b953      	cbnz	r3, 20e60 <process_event+0x250>
   20e4a:	4639      	mov	r1, r7
   20e4c:	4640      	mov	r0, r8
   20e4e:	f240 1265 	movw	r2, #357	; 0x165
   20e52:	f01b fe1b 	bl	3ca8c <assert_print>
   20e56:	f240 1165 	movw	r1, #357	; 0x165
   20e5a:	4638      	mov	r0, r7
   20e5c:	f01b fe0f 	bl	3ca7e <assert_post_action>
			transit = mgr->transitions->reset;
   20e60:	6923      	ldr	r3, [r4, #16]
   20e62:	689b      	ldr	r3, [r3, #8]
   20e64:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   20e66:	b953      	cbnz	r3, 20e7e <process_event+0x26e>
   20e68:	4639      	mov	r1, r7
   20e6a:	4640      	mov	r0, r8
   20e6c:	f44f 72b4 	mov.w	r2, #360	; 0x168
   20e70:	f01b fe0c 	bl	3ca8c <assert_print>
   20e74:	f44f 71b4 	mov.w	r1, #360	; 0x168
   20e78:	4638      	mov	r0, r7
   20e7a:	f01b fe00 	bl	3ca7e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20e7e:	8ba3      	ldrh	r3, [r4, #28]
   20e80:	f023 0307 	bic.w	r3, r3, #7
   20e84:	f043 0305 	orr.w	r3, r3, #5
   20e88:	e797      	b.n	20dba <process_event+0x1aa>
			__ASSERT_NO_MSG(false);
   20e8a:	2500      	movs	r5, #0
   20e8c:	f240 126b 	movw	r2, #363	; 0x16b
   20e90:	4639      	mov	r1, r7
   20e92:	4640      	mov	r0, r8
   20e94:	f01b fdfa 	bl	3ca8c <assert_print>
   20e98:	f240 116b 	movw	r1, #363	; 0x16b
   20e9c:	4638      	mov	r0, r7
   20e9e:	f01b fdee 	bl	3ca7e <assert_post_action>
		onoff_transition_fn transit = NULL;
   20ea2:	9500      	str	r5, [sp, #0]
   20ea4:	e78b      	b.n	20dbe <process_event+0x1ae>
   20ea6:	9000      	str	r0, [sp, #0]
   20ea8:	e6fe      	b.n	20ca8 <process_event+0x98>
   20eaa:	4605      	mov	r5, r0
   20eac:	e746      	b.n	20d3c <process_event+0x12c>
   20eae:	bf00      	nop
   20eb0:	000440d8 	.word	0x000440d8
   20eb4:	0004409e 	.word	0x0004409e
   20eb8:	000440b6 	.word	0x000440b6
				   && !sys_slist_is_empty(&mgr->monitors);
   20ebc:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   20ec0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   20ec4:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   20ec6:	f104 0314 	add.w	r3, r4, #20
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20eca:	4618      	mov	r0, r3
   20ecc:	ee08 3a90 	vmov	s17, r3
   20ed0:	f015 fb94 	bl	365fc <z_spin_unlock_valid>
   20ed4:	b940      	cbnz	r0, 20ee8 <process_event+0x2d8>
   20ed6:	4651      	mov	r1, sl
   20ed8:	4640      	mov	r0, r8
   20eda:	22b9      	movs	r2, #185	; 0xb9
   20edc:	f01b fdd6 	bl	3ca8c <assert_print>
   20ee0:	21b9      	movs	r1, #185	; 0xb9
   20ee2:	4650      	mov	r0, sl
   20ee4:	f01b fdcb 	bl	3ca7e <assert_post_action>
   20ee8:	9b01      	ldr	r3, [sp, #4]
   20eea:	f383 8811 	msr	BASEPRI, r3
   20eee:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   20ef2:	f1b9 0f00 	cmp.w	r9, #0
   20ef6:	d135      	bne.n	20f64 <process_event+0x354>
	while (!sys_slist_is_empty(list)) {
   20ef8:	2d00      	cmp	r5, #0
   20efa:	d146      	bne.n	20f8a <process_event+0x37a>
			if (transit != NULL) {
   20efc:	9b00      	ldr	r3, [sp, #0]
   20efe:	b113      	cbz	r3, 20f06 <process_event+0x2f6>
				transit(mgr, transition_complete);
   20f00:	4620      	mov	r0, r4
   20f02:	492a      	ldr	r1, [pc, #168]	; (20fac <process_event+0x39c>)
   20f04:	4798      	blx	r3
	__asm__ volatile(
   20f06:	f04f 0320 	mov.w	r3, #32
   20f0a:	f3ef 8b11 	mrs	fp, BASEPRI
   20f0e:	f383 8812 	msr	BASEPRI_MAX, r3
   20f12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f16:	ee18 0a90 	vmov	r0, s17
	k.key = arch_irq_lock();
   20f1a:	f8cd b004 	str.w	fp, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f1e:	f015 fb5f 	bl	365e0 <z_spin_lock_valid>
   20f22:	b940      	cbnz	r0, 20f36 <process_event+0x326>
   20f24:	4651      	mov	r1, sl
   20f26:	4640      	mov	r0, r8
   20f28:	228e      	movs	r2, #142	; 0x8e
   20f2a:	f01b fdaf 	bl	3ca8c <assert_print>
   20f2e:	218e      	movs	r1, #142	; 0x8e
   20f30:	4650      	mov	r0, sl
   20f32:	f01b fda4 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   20f36:	ee18 0a90 	vmov	r0, s17
   20f3a:	f015 fb6f 	bl	3661c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   20f3e:	8ba3      	ldrh	r3, [r4, #28]
   20f40:	f023 0308 	bic.w	r3, r3, #8
   20f44:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   20f46:	8ba3      	ldrh	r3, [r4, #28]
   20f48:	06da      	lsls	r2, r3, #27
   20f4a:	d527      	bpl.n	20f9c <process_event+0x38c>
			evt = EVT_COMPLETE;
   20f4c:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   20f4e:	f023 0310 	bic.w	r3, r3, #16
   20f52:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   20f54:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   20f58:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   20f5c:	2900      	cmp	r1, #0
   20f5e:	f47f ae8a 	bne.w	20c76 <process_event+0x66>
out:
   20f62:	e669      	b.n	20c38 <process_event+0x28>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   20f64:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   20f66:	2900      	cmp	r1, #0
   20f68:	d0c6      	beq.n	20ef8 <process_event+0x2e8>
	return node->next;
   20f6a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   20f6e:	684b      	ldr	r3, [r1, #4]
   20f70:	ee18 2a10 	vmov	r2, s16
   20f74:	461e      	mov	r6, r3
   20f76:	4620      	mov	r0, r4
   20f78:	465b      	mov	r3, fp
   20f7a:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   20f7c:	f1b9 0f00 	cmp.w	r9, #0
   20f80:	d0ba      	beq.n	20ef8 <process_event+0x2e8>
   20f82:	4649      	mov	r1, r9
   20f84:	f8d9 9000 	ldr.w	r9, [r9]
   20f88:	e7f1      	b.n	20f6e <process_event+0x35e>
   20f8a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   20f8c:	465b      	mov	r3, fp
   20f8e:	ee18 2a10 	vmov	r2, s16
   20f92:	4620      	mov	r0, r4
   20f94:	682d      	ldr	r5, [r5, #0]
   20f96:	f01b fbcc 	bl	3c732 <notify_one>
   20f9a:	e7ad      	b.n	20ef8 <process_event+0x2e8>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   20f9c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   20fa0:	bf1e      	ittt	ne
   20fa2:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   20fa6:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   20fa8:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   20faa:	e7d3      	b.n	20f54 <process_event+0x344>
   20fac:	00020fb1 	.word	0x00020fb1

00020fb0 <transition_complete>:
{
   20fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20fb2:	4604      	mov	r4, r0
   20fb4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   20fb6:	f100 0614 	add.w	r6, r0, #20
   20fba:	f04f 0320 	mov.w	r3, #32
   20fbe:	f3ef 8711 	mrs	r7, BASEPRI
   20fc2:	f383 8812 	msr	BASEPRI_MAX, r3
   20fc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20fca:	4630      	mov	r0, r6
   20fcc:	f015 fb08 	bl	365e0 <z_spin_lock_valid>
   20fd0:	b940      	cbnz	r0, 20fe4 <transition_complete+0x34>
   20fd2:	490a      	ldr	r1, [pc, #40]	; (20ffc <transition_complete+0x4c>)
   20fd4:	480a      	ldr	r0, [pc, #40]	; (21000 <transition_complete+0x50>)
   20fd6:	228e      	movs	r2, #142	; 0x8e
   20fd8:	f01b fd58 	bl	3ca8c <assert_print>
   20fdc:	218e      	movs	r1, #142	; 0x8e
   20fde:	4807      	ldr	r0, [pc, #28]	; (20ffc <transition_complete+0x4c>)
   20fe0:	f01b fd4d 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   20fe4:	4630      	mov	r0, r6
   20fe6:	f015 fb19 	bl	3661c <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   20fea:	463a      	mov	r2, r7
   20fec:	4620      	mov	r0, r4
	mgr->last_res = res;
   20fee:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   20ff0:	2101      	movs	r1, #1
}
   20ff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   20ff6:	f7ff be0b 	b.w	20c10 <process_event>
   20ffa:	bf00      	nop
   20ffc:	000440d8 	.word	0x000440d8
   21000:	0004409e 	.word	0x0004409e

00021004 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   21004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21008:	4604      	mov	r4, r0
   2100a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2100c:	f01b fba7 	bl	3c75e <validate_args>

	if (rv < 0) {
   21010:	1e05      	subs	r5, r0, #0
   21012:	db54      	blt.n	210be <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   21014:	f104 0914 	add.w	r9, r4, #20
   21018:	f04f 0320 	mov.w	r3, #32
   2101c:	f3ef 8a11 	mrs	sl, BASEPRI
   21020:	f383 8812 	msr	BASEPRI_MAX, r3
   21024:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21028:	4648      	mov	r0, r9
   2102a:	f015 fad9 	bl	365e0 <z_spin_lock_valid>
   2102e:	b940      	cbnz	r0, 21042 <onoff_request+0x3e>
   21030:	4933      	ldr	r1, [pc, #204]	; (21100 <onoff_request+0xfc>)
   21032:	4834      	ldr	r0, [pc, #208]	; (21104 <onoff_request+0x100>)
   21034:	228e      	movs	r2, #142	; 0x8e
   21036:	f01b fd29 	bl	3ca8c <assert_print>
   2103a:	218e      	movs	r1, #142	; 0x8e
   2103c:	4830      	ldr	r0, [pc, #192]	; (21100 <onoff_request+0xfc>)
   2103e:	f01b fd1e 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   21042:	4648      	mov	r0, r9
   21044:	f015 faea 	bl	3661c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   21048:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2104c:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2104e:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   21050:	428b      	cmp	r3, r1
   21052:	f002 0607 	and.w	r6, r2, #7
   21056:	d04a      	beq.n	210ee <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   21058:	2e02      	cmp	r6, #2
   2105a:	d11f      	bne.n	2109c <onoff_request+0x98>
	rv = state;
   2105c:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   2105e:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   21062:	3301      	adds	r3, #1
   21064:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21066:	4648      	mov	r0, r9
   21068:	f015 fac8 	bl	365fc <z_spin_unlock_valid>
   2106c:	b940      	cbnz	r0, 21080 <onoff_request+0x7c>
   2106e:	4924      	ldr	r1, [pc, #144]	; (21100 <onoff_request+0xfc>)
   21070:	4824      	ldr	r0, [pc, #144]	; (21104 <onoff_request+0x100>)
   21072:	22b9      	movs	r2, #185	; 0xb9
   21074:	f01b fd0a 	bl	3ca8c <assert_print>
   21078:	21b9      	movs	r1, #185	; 0xb9
   2107a:	4821      	ldr	r0, [pc, #132]	; (21100 <onoff_request+0xfc>)
   2107c:	f01b fcff 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   21080:	f38a 8811 	msr	BASEPRI, sl
   21084:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   21088:	f1b8 0f00 	cmp.w	r8, #0
   2108c:	d017      	beq.n	210be <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   2108e:	2300      	movs	r3, #0
   21090:	4632      	mov	r2, r6
   21092:	4639      	mov	r1, r7
   21094:	4620      	mov	r0, r4
   21096:	f01b fb4c 	bl	3c732 <notify_one>
   2109a:	e010      	b.n	210be <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   2109c:	0793      	lsls	r3, r2, #30
   2109e:	d001      	beq.n	210a4 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   210a0:	2e06      	cmp	r6, #6
   210a2:	d10f      	bne.n	210c4 <onoff_request+0xc0>
	parent->next = child;
   210a4:	2300      	movs	r3, #0
   210a6:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   210a8:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   210aa:	b9eb      	cbnz	r3, 210e8 <onoff_request+0xe4>
	list->head = node;
   210ac:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   210b0:	4635      	mov	r5, r6
   210b2:	b9f6      	cbnz	r6, 210f2 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   210b4:	4652      	mov	r2, sl
   210b6:	2102      	movs	r1, #2
   210b8:	4620      	mov	r0, r4
   210ba:	f7ff fda9 	bl	20c10 <process_event>
		}
	}

	return rv;
}
   210be:	4628      	mov	r0, r5
   210c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   210c4:	2e05      	cmp	r6, #5
   210c6:	d017      	beq.n	210f8 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   210c8:	2e01      	cmp	r6, #1
   210ca:	d00a      	beq.n	210e2 <onoff_request+0xde>
   210cc:	490e      	ldr	r1, [pc, #56]	; (21108 <onoff_request+0x104>)
   210ce:	480d      	ldr	r0, [pc, #52]	; (21104 <onoff_request+0x100>)
   210d0:	f240 12c9 	movw	r2, #457	; 0x1c9
   210d4:	f01b fcda 	bl	3ca8c <assert_print>
   210d8:	f240 11c9 	movw	r1, #457	; 0x1c9
   210dc:	480a      	ldr	r0, [pc, #40]	; (21108 <onoff_request+0x104>)
   210de:	f01b fcce 	bl	3ca7e <assert_post_action>
		rv = -EIO;
   210e2:	f06f 0504 	mvn.w	r5, #4
   210e6:	e004      	b.n	210f2 <onoff_request+0xee>
	parent->next = child;
   210e8:	601f      	str	r7, [r3, #0]
	list->tail = node;
   210ea:	6067      	str	r7, [r4, #4]
}
   210ec:	e7e0      	b.n	210b0 <onoff_request+0xac>
		rv = -EAGAIN;
   210ee:	f06f 050a 	mvn.w	r5, #10
   210f2:	f04f 0800 	mov.w	r8, #0
   210f6:	e7b6      	b.n	21066 <onoff_request+0x62>
		rv = -ENOTSUP;
   210f8:	f06f 0585 	mvn.w	r5, #133	; 0x85
   210fc:	e7f9      	b.n	210f2 <onoff_request+0xee>
   210fe:	bf00      	nop
   21100:	000440d8 	.word	0x000440d8
   21104:	0004409e 	.word	0x0004409e
   21108:	000440b6 	.word	0x000440b6

0002110c <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   2110c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
	unsigned int d = tm->tm_mday - 1;
   21110:	68c3      	ldr	r3, [r0, #12]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   21112:	6944      	ldr	r4, [r0, #20]
	unsigned int d = tm->tm_mday - 1;
   21114:	1e5f      	subs	r7, r3, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   21116:	f240 736c 	movw	r3, #1900	; 0x76c
	unsigned int m = tm->tm_mon + 1;
   2111a:	6905      	ldr	r5, [r0, #16]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   2111c:	17e1      	asrs	r1, r4, #31
	unsigned int m = tm->tm_mon + 1;
   2111e:	3501      	adds	r5, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   21120:	18e4      	adds	r4, r4, r3
   21122:	f141 0100 	adc.w	r1, r1, #0
	y -= m <= 2;
   21126:	2d02      	cmp	r5, #2
   21128:	bf8c      	ite	hi
   2112a:	2300      	movhi	r3, #0
   2112c:	2301      	movls	r3, #1
   2112e:	1ae4      	subs	r4, r4, r3
   21130:	f161 0100 	sbc.w	r1, r1, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   21134:	2900      	cmp	r1, #0
{
   21136:	4680      	mov	r8, r0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   21138:	da55      	bge.n	211e6 <timeutil_timegm64+0xda>
   2113a:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   2113e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   21142:	2300      	movs	r3, #0
   21144:	1820      	adds	r0, r4, r0
   21146:	f161 0100 	sbc.w	r1, r1, #0
   2114a:	f7fb fe7d 	bl	1ce48 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   2114e:	4b28      	ldr	r3, [pc, #160]	; (211f0 <timeutil_timegm64+0xe4>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   21150:	4602      	mov	r2, r0
	unsigned int yoe = y - era * 400;
   21152:	fb03 4400 	mla	r4, r3, r0, r4
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   21156:	e9d8 9000 	ldrd	r9, r0, [r8]
   2115a:	233c      	movs	r3, #60	; 0x3c
   2115c:	f8d8 8008 	ldr.w	r8, [r8, #8]
   21160:	17c6      	asrs	r6, r0, #31
   21162:	fbc8 0603 	smlal	r0, r6, r8, r3
   21166:	46b4      	mov	ip, r6
   21168:	fba0 0603 	umull	r0, r6, r0, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2116c:	2d02      	cmp	r5, #2
   2116e:	bf8c      	ite	hi
   21170:	f06f 0e02 	mvnhi.w	lr, #2
   21174:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   21178:	fb03 660c 	mla	r6, r3, ip, r6
   2117c:	eb10 0c09 	adds.w	ip, r0, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   21180:	f240 106d 	movw	r0, #365	; 0x16d
   21184:	ea4f 0394 	mov.w	r3, r4, lsr #2
   21188:	fb00 3304 	mla	r3, r0, r4, r3
   2118c:	f04f 0064 	mov.w	r0, #100	; 0x64
   21190:	fbb4 f4f0 	udiv	r4, r4, r0
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   21194:	eb05 000e 	add.w	r0, r5, lr
   21198:	f04f 0599 	mov.w	r5, #153	; 0x99
   2119c:	fb05 f000 	mul.w	r0, r5, r0
   211a0:	f04f 0505 	mov.w	r5, #5
   211a4:	f100 0002 	add.w	r0, r0, #2
   211a8:	fbb0 f0f5 	udiv	r0, r0, r5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   211ac:	443b      	add	r3, r7
   211ae:	eba3 0304 	sub.w	r3, r3, r4
	return era * 146097 + (time_t)doe - 719468;
   211b2:	4c10      	ldr	r4, [pc, #64]	; (211f4 <timeutil_timegm64+0xe8>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   211b4:	4403      	add	r3, r0
	return era * 146097 + (time_t)doe - 719468;
   211b6:	fba2 0204 	umull	r0, r2, r2, r4
   211ba:	fb04 2101 	mla	r1, r4, r1, r2
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   211be:	eb46 76e9 	adc.w	r6, r6, r9, asr #31
	return era * 146097 + (time_t)doe - 719468;
   211c2:	181b      	adds	r3, r3, r0
   211c4:	480c      	ldr	r0, [pc, #48]	; (211f8 <timeutil_timegm64+0xec>)
	time += 86400LL * ndays;
   211c6:	4a0d      	ldr	r2, [pc, #52]	; (211fc <timeutil_timegm64+0xf0>)
	return era * 146097 + (time_t)doe - 719468;
   211c8:	f141 0100 	adc.w	r1, r1, #0
   211cc:	181b      	adds	r3, r3, r0
	time += 86400LL * ndays;
   211ce:	fba3 0302 	umull	r0, r3, r3, r2
	return era * 146097 + (time_t)doe - 719468;
   211d2:	f161 0100 	sbc.w	r1, r1, #0
	time += 86400LL * ndays;
   211d6:	fb02 3101 	mla	r1, r2, r1, r3
   211da:	eb10 000c 	adds.w	r0, r0, ip

	return time;
}
   211de:	eb41 0106 	adc.w	r1, r1, r6
   211e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   211e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   211ea:	2300      	movs	r3, #0
   211ec:	4620      	mov	r0, r4
   211ee:	e7ac      	b.n	2114a <timeutil_timegm64+0x3e>
   211f0:	fffffe70 	.word	0xfffffe70
   211f4:	00023ab1 	.word	0x00023ab1
   211f8:	fff50594 	.word	0xfff50594
   211fc:	00015180 	.word	0x00015180

00021200 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   21200:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   21202:	b379      	cbz	r1, 21264 <sys_heap_free+0x64>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   21204:	6805      	ldr	r5, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21206:	1f0c      	subs	r4, r1, #4
   21208:	1b64      	subs	r4, r4, r5
   2120a:	08e6      	lsrs	r6, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   2120c:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   21210:	442c      	add	r4, r5
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   21212:	8863      	ldrh	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   21214:	07db      	lsls	r3, r3, #31
   21216:	d408      	bmi.n	2122a <sys_heap_free+0x2a>
   21218:	4913      	ldr	r1, [pc, #76]	; (21268 <sys_heap_free+0x68>)
   2121a:	4814      	ldr	r0, [pc, #80]	; (2126c <sys_heap_free+0x6c>)
   2121c:	22ac      	movs	r2, #172	; 0xac
   2121e:	f01b fc35 	bl	3ca8c <assert_print>
   21222:	21ac      	movs	r1, #172	; 0xac
   21224:	4810      	ldr	r0, [pc, #64]	; (21268 <sys_heap_free+0x68>)
   21226:	f01b fc2a 	bl	3ca7e <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   2122a:	4631      	mov	r1, r6
   2122c:	4628      	mov	r0, r5
   2122e:	f01b fac2 	bl	3c7b6 <chunk_size>
   21232:	4430      	add	r0, r6
		return ((uint16_t *)cmem)[f];
   21234:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   21238:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   2123a:	4286      	cmp	r6, r0
   2123c:	d008      	beq.n	21250 <sys_heap_free+0x50>
   2123e:	490a      	ldr	r1, [pc, #40]	; (21268 <sys_heap_free+0x68>)
   21240:	480a      	ldr	r0, [pc, #40]	; (2126c <sys_heap_free+0x6c>)
   21242:	22b4      	movs	r2, #180	; 0xb4
   21244:	f01b fc22 	bl	3ca8c <assert_print>
   21248:	21b4      	movs	r1, #180	; 0xb4
   2124a:	4807      	ldr	r0, [pc, #28]	; (21268 <sys_heap_free+0x68>)
   2124c:	f01b fc17 	bl	3ca7e <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21250:	8863      	ldrh	r3, [r4, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   21252:	4631      	mov	r1, r6
   21254:	f023 0301 	bic.w	r3, r3, #1
   21258:	4628      	mov	r0, r5
   2125a:	8063      	strh	r3, [r4, #2]
}
   2125c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   21260:	f01b bb68 	b.w	3c934 <free_chunk>
}
   21264:	bd70      	pop	{r4, r5, r6, pc}
   21266:	bf00      	nop
   21268:	00044105 	.word	0x00044105
   2126c:	0004409e 	.word	0x0004409e

00021270 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   21270:	424b      	negs	r3, r1
{
   21272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   21276:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   2127a:	ea31 0303 	bics.w	r3, r1, r3
{
   2127e:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   21280:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   21282:	d01b      	beq.n	212bc <sys_heap_aligned_alloc+0x4c>
		return false;
   21284:	2f04      	cmp	r7, #4
   21286:	463d      	mov	r5, r7
   21288:	bf28      	it	cs
   2128a:	2504      	movcs	r5, #4
   2128c:	46b9      	mov	r9, r7
		align -= rew;
   2128e:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   21290:	f107 3aff 	add.w	sl, r7, #4294967295
   21294:	ea1a 0f07 	tst.w	sl, r7
   21298:	d00a      	beq.n	212b0 <sys_heap_aligned_alloc+0x40>
   2129a:	4932      	ldr	r1, [pc, #200]	; (21364 <sys_heap_aligned_alloc+0xf4>)
   2129c:	4832      	ldr	r0, [pc, #200]	; (21368 <sys_heap_aligned_alloc+0xf8>)
   2129e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   212a2:	f01b fbf3 	bl	3ca8c <assert_print>
   212a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
   212aa:	482e      	ldr	r0, [pc, #184]	; (21364 <sys_heap_aligned_alloc+0xf4>)
   212ac:	f01b fbe7 	bl	3ca7e <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   212b0:	b97c      	cbnz	r4, 212d2 <sys_heap_aligned_alloc+0x62>
		return NULL;
   212b2:	f04f 0900 	mov.w	r9, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   212b6:	4648      	mov	r0, r9
   212b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   212bc:	2904      	cmp	r1, #4
   212be:	d804      	bhi.n	212ca <sys_heap_aligned_alloc+0x5a>
}
   212c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   212c4:	4611      	mov	r1, r2
   212c6:	f01b bb67 	b.w	3c998 <sys_heap_alloc>
		rew = 0;
   212ca:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   212ce:	2504      	movs	r5, #4
   212d0:	e7de      	b.n	21290 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   212d2:	68b3      	ldr	r3, [r6, #8]
   212d4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   212d8:	d9eb      	bls.n	212b2 <sys_heap_aligned_alloc+0x42>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   212da:	f104 010b 	add.w	r1, r4, #11
   212de:	4439      	add	r1, r7
   212e0:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   212e2:	4630      	mov	r0, r6
   212e4:	08c9      	lsrs	r1, r1, #3
   212e6:	f01b fabe 	bl	3c866 <alloc_chunk>
	if (c0 == 0) {
   212ea:	4680      	mov	r8, r0
   212ec:	2800      	cmp	r0, #0
   212ee:	d0e0      	beq.n	212b2 <sys_heap_aligned_alloc+0x42>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   212f0:	f109 0504 	add.w	r5, r9, #4
   212f4:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   212f8:	4435      	add	r5, r6
   212fa:	4455      	add	r5, sl
   212fc:	427f      	negs	r7, r7
   212fe:	402f      	ands	r7, r5
   21300:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21304:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21306:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2130a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2130c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2130e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   21312:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   21314:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21318:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2131c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   21320:	d208      	bcs.n	21334 <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c0, c);
   21322:	4601      	mov	r1, r0
   21324:	463a      	mov	r2, r7
   21326:	4630      	mov	r0, r6
   21328:	f01b faea 	bl	3c900 <split_chunks>
		free_list_add(h, c0);
   2132c:	4641      	mov	r1, r8
   2132e:	4630      	mov	r0, r6
   21330:	f01b fa46 	bl	3c7c0 <free_list_add>
	return c + chunk_size(h, c);
   21334:	4639      	mov	r1, r7
   21336:	4630      	mov	r0, r6
   21338:	f01b fa3d 	bl	3c7b6 <chunk_size>
   2133c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2133e:	4284      	cmp	r4, r0
   21340:	d208      	bcs.n	21354 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
   21342:	4639      	mov	r1, r7
   21344:	4630      	mov	r0, r6
   21346:	4622      	mov	r2, r4
   21348:	f01b fada 	bl	3c900 <split_chunks>
		free_list_add(h, c_end);
   2134c:	4621      	mov	r1, r4
   2134e:	4630      	mov	r0, r6
   21350:	f01b fa36 	bl	3c7c0 <free_list_add>
	void *cmem = &buf[c];
   21354:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21358:	8873      	ldrh	r3, [r6, #2]
   2135a:	f043 0301 	orr.w	r3, r3, #1
   2135e:	8073      	strh	r3, [r6, #2]
   21360:	e7a9      	b.n	212b6 <sys_heap_aligned_alloc+0x46>
   21362:	bf00      	nop
   21364:	00044105 	.word	0x00044105
   21368:	0004409e 	.word	0x0004409e

0002136c <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   2136c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   21370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21374:	4680      	mov	r8, r0
   21376:	460c      	mov	r4, r1
   21378:	4616      	mov	r6, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   2137a:	d35f      	bcc.n	2143c <sys_heap_init+0xd0>
   2137c:	4936      	ldr	r1, [pc, #216]	; (21458 <sys_heap_init+0xec>)
   2137e:	f240 12e3 	movw	r2, #483	; 0x1e3
   21382:	4836      	ldr	r0, [pc, #216]	; (2145c <sys_heap_init+0xf0>)
   21384:	f01b fb82 	bl	3ca8c <assert_print>
   21388:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   2138c:	4832      	ldr	r0, [pc, #200]	; (21458 <sys_heap_init+0xec>)
   2138e:	f01b fb76 	bl	3ca7e <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   21392:	3e04      	subs	r6, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21394:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21396:	4426      	add	r6, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21398:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2139c:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   213a0:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   213a2:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   213a4:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   213a8:	d80a      	bhi.n	213c0 <sys_heap_init+0x54>
   213aa:	492b      	ldr	r1, [pc, #172]	; (21458 <sys_heap_init+0xec>)
   213ac:	482b      	ldr	r0, [pc, #172]	; (2145c <sys_heap_init+0xf0>)
   213ae:	f240 12f3 	movw	r2, #499	; 0x1f3
   213b2:	f01b fb6b 	bl	3ca8c <assert_print>
   213b6:	f240 11f3 	movw	r1, #499	; 0x1f3
   213ba:	4827      	ldr	r0, [pc, #156]	; (21458 <sys_heap_init+0xec>)
   213bc:	f01b fb5f 	bl	3ca7e <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   213c0:	fab7 f487 	clz	r4, r7

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   213c4:	2300      	movs	r3, #0
	heap->heap = h;
   213c6:	f8c8 5000 	str.w	r5, [r8]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   213ca:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   213ce:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
   213d2:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   213d4:	3407      	adds	r4, #7
   213d6:	08e4      	lsrs	r4, r4, #3
	h->avail_buckets = 0;
   213d8:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   213da:	1c63      	adds	r3, r4, #1
   213dc:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   213de:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   213e0:	d90a      	bls.n	213f8 <sys_heap_init+0x8c>
   213e2:	491d      	ldr	r1, [pc, #116]	; (21458 <sys_heap_init+0xec>)
   213e4:	481d      	ldr	r0, [pc, #116]	; (2145c <sys_heap_init+0xf0>)
   213e6:	f44f 7201 	mov.w	r2, #516	; 0x204
   213ea:	f01b fb4f 	bl	3ca8c <assert_print>
   213ee:	f44f 7101 	mov.w	r1, #516	; 0x204
   213f2:	4819      	ldr	r0, [pc, #100]	; (21458 <sys_heap_init+0xec>)
   213f4:	f01b fb43 	bl	3ca7e <assert_post_action>
   213f8:	2200      	movs	r2, #0
   213fa:	f105 0310 	add.w	r3, r5, #16
   213fe:	eb03 0888 	add.w	r8, r3, r8, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
   21402:	4598      	cmp	r8, r3
   21404:	d125      	bne.n	21452 <sys_heap_init+0xe6>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21406:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21408:	f043 0301 	orr.w	r3, r3, #1
   2140c:	806b      	strh	r3, [r5, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2140e:	1b3b      	subs	r3, r7, r4
		((uint16_t *)cmem)[f] = val;
   21410:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21414:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
   21416:	802a      	strh	r2, [r5, #0]
   21418:	8048      	strh	r0, [r1, #2]
   2141a:	19a9      	adds	r1, r5, r6
   2141c:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
   21420:	804a      	strh	r2, [r1, #2]
   21422:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
   21424:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21428:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   2142a:	4621      	mov	r1, r4
   2142c:	f042 0201 	orr.w	r2, r2, #1
   21430:	4628      	mov	r0, r5
}
   21432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21436:	805a      	strh	r2, [r3, #2]
	free_list_add(h, chunk0_size);
   21438:	f01b b9c2 	b.w	3c7c0 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   2143c:	2a04      	cmp	r2, #4
   2143e:	d8a8      	bhi.n	21392 <sys_heap_init+0x26>
   21440:	4905      	ldr	r1, [pc, #20]	; (21458 <sys_heap_init+0xec>)
   21442:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   21446:	4805      	ldr	r0, [pc, #20]	; (2145c <sys_heap_init+0xf0>)
   21448:	f01b fb20 	bl	3ca8c <assert_print>
   2144c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   21450:	e79c      	b.n	2138c <sys_heap_init+0x20>
		h->buckets[i].next = 0;
   21452:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
   21456:	e7d4      	b.n	21402 <sys_heap_init+0x96>
   21458:	00044105 	.word	0x00044105
   2145c:	0004409e 	.word	0x0004409e

00021460 <extract_decimal>:
{
   21460:	b5f0      	push	{r4, r5, r6, r7, lr}
   21462:	4602      	mov	r2, r0
   21464:	6801      	ldr	r1, [r0, #0]
		val = 10U * val + *sp++ - '0';
   21466:	270a      	movs	r7, #10
	size_t val = 0;
   21468:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   2146a:	4e07      	ldr	r6, [pc, #28]	; (21488 <extract_decimal+0x28>)
   2146c:	460c      	mov	r4, r1
   2146e:	7823      	ldrb	r3, [r4, #0]
   21470:	3101      	adds	r1, #1
   21472:	5d9d      	ldrb	r5, [r3, r6]
   21474:	076d      	lsls	r5, r5, #29
   21476:	d401      	bmi.n	2147c <extract_decimal+0x1c>
	*str = sp;
   21478:	6014      	str	r4, [r2, #0]
}
   2147a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   2147c:	fb07 3300 	mla	r3, r7, r0, r3
   21480:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   21484:	e7f2      	b.n	2146c <extract_decimal+0xc>
   21486:	bf00      	nop
   21488:	0004bd43 	.word	0x0004bd43

0002148c <encode_uint>:
{
   2148c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21490:	4615      	mov	r5, r2
   21492:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   21494:	78d3      	ldrb	r3, [r2, #3]
   21496:	4a22      	ldr	r2, [pc, #136]	; (21520 <encode_uint+0x94>)
	switch (specifier) {
   21498:	2b6f      	cmp	r3, #111	; 0x6f
   2149a:	f813 b002 	ldrb.w	fp, [r3, r2]
{
   2149e:	4680      	mov	r8, r0
   214a0:	460f      	mov	r7, r1
   214a2:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   214a6:	d029      	beq.n	214fc <encode_uint+0x70>
   214a8:	d824      	bhi.n	214f4 <encode_uint+0x68>
		return 16;
   214aa:	2b58      	cmp	r3, #88	; 0x58
   214ac:	bf14      	ite	ne
   214ae:	260a      	movne	r6, #10
   214b0:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   214b2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   214b6:	4632      	mov	r2, r6
   214b8:	2300      	movs	r3, #0
   214ba:	4640      	mov	r0, r8
   214bc:	4639      	mov	r1, r7
   214be:	f7fb fd13 	bl	1cee8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   214c2:	2a09      	cmp	r2, #9
   214c4:	b2d4      	uxtb	r4, r2
   214c6:	d81e      	bhi.n	21506 <encode_uint+0x7a>
   214c8:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   214ca:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   214cc:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   214ce:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   214d2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   214d6:	d301      	bcc.n	214dc <encode_uint+0x50>
   214d8:	45d1      	cmp	r9, sl
   214da:	d811      	bhi.n	21500 <encode_uint+0x74>
	if (conv->flag_hash) {
   214dc:	782b      	ldrb	r3, [r5, #0]
   214de:	069b      	lsls	r3, r3, #26
   214e0:	d505      	bpl.n	214ee <encode_uint+0x62>
		if (radix == 8) {
   214e2:	2e08      	cmp	r6, #8
   214e4:	d115      	bne.n	21512 <encode_uint+0x86>
			conv->altform_0 = true;
   214e6:	78ab      	ldrb	r3, [r5, #2]
   214e8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   214ec:	70ab      	strb	r3, [r5, #2]
}
   214ee:	4648      	mov	r0, r9
   214f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   214f4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   214f8:	2b70      	cmp	r3, #112	; 0x70
   214fa:	e7d7      	b.n	214ac <encode_uint+0x20>
	switch (specifier) {
   214fc:	2608      	movs	r6, #8
   214fe:	e7d8      	b.n	214b2 <encode_uint+0x26>
		value /= radix;
   21500:	4680      	mov	r8, r0
   21502:	460f      	mov	r7, r1
   21504:	e7d7      	b.n	214b6 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21506:	f1bb 0f01 	cmp.w	fp, #1
   2150a:	bf0c      	ite	eq
   2150c:	3437      	addeq	r4, #55	; 0x37
   2150e:	3457      	addne	r4, #87	; 0x57
   21510:	e7db      	b.n	214ca <encode_uint+0x3e>
		} else if (radix == 16) {
   21512:	2e10      	cmp	r6, #16
   21514:	d1eb      	bne.n	214ee <encode_uint+0x62>
			conv->altform_0c = true;
   21516:	78ab      	ldrb	r3, [r5, #2]
   21518:	f043 0310 	orr.w	r3, r3, #16
   2151c:	e7e6      	b.n	214ec <encode_uint+0x60>
   2151e:	bf00      	nop
   21520:	0004bd43 	.word	0x0004bd43

00021524 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   21524:	b508      	push	{r3, lr}
	__asm__ volatile(
   21526:	f04f 0220 	mov.w	r2, #32
   2152a:	f3ef 8311 	mrs	r3, BASEPRI
   2152e:	f382 8812 	msr	BASEPRI_MAX, r2
   21532:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   21536:	f001 ff19 	bl	2336c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   2153a:	4803      	ldr	r0, [pc, #12]	; (21548 <sys_reboot+0x24>)
   2153c:	f01b f8c3 	bl	3c6c6 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   21540:	f001 fa8a 	bl	22a58 <arch_cpu_idle>
   21544:	e7fc      	b.n	21540 <sys_reboot+0x1c>
   21546:	bf00      	nop
   21548:	0004412c 	.word	0x0004412c

0002154c <nordicsemi_nrf91_init>:
   2154c:	f04f 0220 	mov.w	r2, #32
   21550:	f3ef 8311 	mrs	r3, BASEPRI
   21554:	f382 8812 	msr	BASEPRI_MAX, r2
   21558:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2155c:	2101      	movs	r1, #1
   2155e:	4a04      	ldr	r2, [pc, #16]	; (21570 <nordicsemi_nrf91_init+0x24>)
   21560:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   21564:	f383 8811 	msr	BASEPRI, r3
   21568:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2156c:	2000      	movs	r0, #0
   2156e:	4770      	bx	lr
   21570:	40039000 	.word	0x40039000

00021574 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   21574:	b120      	cbz	r0, 21580 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   21576:	4b03      	ldr	r3, [pc, #12]	; (21584 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   21578:	0180      	lsls	r0, r0, #6
   2157a:	f043 0301 	orr.w	r3, r3, #1
   2157e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   21580:	4770      	bx	lr
   21582:	bf00      	nop
   21584:	00042870 	.word	0x00042870

00021588 <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   21588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2158c:	4607      	mov	r7, r0
   2158e:	4688      	mov	r8, r1
   21590:	4616      	mov	r6, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   21592:	4614      	mov	r4, r2
   21594:	eb08 0506 	add.w	r5, r8, r6
   21598:	1b2d      	subs	r5, r5, r4
   2159a:	b90c      	cbnz	r4, 215a0 <z_log_minimal_hexdump_print+0x18>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   2159c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   215a0:	1e7b      	subs	r3, r7, #1
   215a2:	2b03      	cmp	r3, #3
   215a4:	bf96      	itet	ls
   215a6:	4a21      	ldrls	r2, [pc, #132]	; (2162c <z_log_minimal_hexdump_print+0xa4>)
   215a8:	213f      	movhi	r1, #63	; 0x3f
   215aa:	5cd1      	ldrbls	r1, [r2, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
   215ac:	4820      	ldr	r0, [pc, #128]	; (21630 <z_log_minimal_hexdump_print+0xa8>)
   215ae:	f01b f88a 	bl	3c6c6 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   215b2:	f04f 0900 	mov.w	r9, #0
			printk("   ");
   215b6:	f8df a088 	ldr.w	sl, [pc, #136]	; 21640 <z_log_minimal_hexdump_print+0xb8>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   215ba:	f8df b088 	ldr.w	fp, [pc, #136]	; 21644 <z_log_minimal_hexdump_print+0xbc>
		if (i < length) {
   215be:	454c      	cmp	r4, r9
   215c0:	d92b      	bls.n	2161a <z_log_minimal_hexdump_print+0x92>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   215c2:	4658      	mov	r0, fp
   215c4:	f815 1009 	ldrb.w	r1, [r5, r9]
   215c8:	f01b f87d 	bl	3c6c6 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   215cc:	f109 0901 	add.w	r9, r9, #1
   215d0:	f1b9 0f08 	cmp.w	r9, #8
   215d4:	d1f3      	bne.n	215be <z_log_minimal_hexdump_print+0x36>
	printk("|");
   215d6:	4817      	ldr	r0, [pc, #92]	; (21634 <z_log_minimal_hexdump_print+0xac>)
   215d8:	f01b f875 	bl	3c6c6 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   215dc:	f04f 0900 	mov.w	r9, #0
			printk(" ");
   215e0:	f8df a064 	ldr.w	sl, [pc, #100]	; 21648 <z_log_minimal_hexdump_print+0xc0>
			printk("%c", isprint((int)c) != 0 ? c : '.');
   215e4:	f8df b064 	ldr.w	fp, [pc, #100]	; 2164c <z_log_minimal_hexdump_print+0xc4>
		if (i < length) {
   215e8:	454c      	cmp	r4, r9
   215ea:	d91a      	bls.n	21622 <z_log_minimal_hexdump_print+0x9a>
			unsigned char c = data[i];
   215ec:	f815 1009 	ldrb.w	r1, [r5, r9]
			printk("%c", isprint((int)c) != 0 ? c : '.');
   215f0:	4b11      	ldr	r3, [pc, #68]	; (21638 <z_log_minimal_hexdump_print+0xb0>)
   215f2:	4658      	mov	r0, fp
   215f4:	5cca      	ldrb	r2, [r1, r3]
   215f6:	f012 0f97 	tst.w	r2, #151	; 0x97
   215fa:	bf08      	it	eq
   215fc:	212e      	moveq	r1, #46	; 0x2e
   215fe:	f01b f862 	bl	3c6c6 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   21602:	f109 0901 	add.w	r9, r9, #1
   21606:	f1b9 0f08 	cmp.w	r9, #8
   2160a:	d1ed      	bne.n	215e8 <z_log_minimal_hexdump_print+0x60>
	printk("\n");
   2160c:	480b      	ldr	r0, [pc, #44]	; (2163c <z_log_minimal_hexdump_print+0xb4>)
   2160e:	f01b f85a 	bl	3c6c6 <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   21612:	2c07      	cmp	r4, #7
   21614:	d9c2      	bls.n	2159c <z_log_minimal_hexdump_print+0x14>
		size -= HEXDUMP_BYTES_IN_LINE;
   21616:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   21618:	e7bc      	b.n	21594 <z_log_minimal_hexdump_print+0xc>
			printk("   ");
   2161a:	4650      	mov	r0, sl
   2161c:	f01b f853 	bl	3c6c6 <printk>
   21620:	e7d4      	b.n	215cc <z_log_minimal_hexdump_print+0x44>
			printk(" ");
   21622:	4650      	mov	r0, sl
   21624:	f01b f84f 	bl	3c6c6 <printk>
   21628:	e7eb      	b.n	21602 <z_log_minimal_hexdump_print+0x7a>
   2162a:	bf00      	nop
   2162c:	0004416a 	.word	0x0004416a
   21630:	00044159 	.word	0x00044159
   21634:	00044168 	.word	0x00044168
   21638:	0004bd43 	.word	0x0004bd43
   2163c:	00045227 	.word	0x00045227
   21640:	00044164 	.word	0x00044164
   21644:	0004415e 	.word	0x0004415e
   21648:	00044166 	.word	0x00044166
   2164c:	000457a4 	.word	0x000457a4

00021650 <fcb_append>:
	return 0;
}

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   21650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21654:	b085      	sub	sp, #20
   21656:	460e      	mov	r6, r1
   21658:	4691      	mov	r9, r2
	struct fcb_entry *active;
	int cnt;
	int rc;
	uint8_t tmp_str[8];

	cnt = fcb_put_len(fcb, tmp_str, len);
   2165a:	460a      	mov	r2, r1
   2165c:	a902      	add	r1, sp, #8
{
   2165e:	4604      	mov	r4, r0
	cnt = fcb_put_len(fcb, tmp_str, len);
   21660:	f01b fafb 	bl	3cc5a <fcb_put_len>
	if (cnt < 0) {
   21664:	1e05      	subs	r5, r0, #0
   21666:	db73      	blt.n	21750 <fcb_append+0x100>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   21668:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
   2166c:	b2a9      	uxth	r1, r5
   2166e:	4610      	mov	r0, r2
   21670:	f01b fa53 	bl	3cb1a <fcb_len_in_flash.isra.0>
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   21674:	4631      	mov	r1, r6
	cnt = fcb_len_in_flash(fcb, cnt);
   21676:	4607      	mov	r7, r0
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   21678:	4610      	mov	r0, r2
   2167a:	f01b fa4e 	bl	3cb1a <fcb_len_in_flash.isra.0>
   2167e:	2101      	movs	r1, #1
   21680:	4606      	mov	r6, r0
   21682:	4610      	mov	r0, r2
   21684:	f01b fa49 	bl	3cb1a <fcb_len_in_flash.isra.0>

	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   21688:	2f08      	cmp	r7, #8
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   2168a:	4430      	add	r0, r6
   2168c:	b286      	uxth	r6, r0
	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   2168e:	d908      	bls.n	216a2 <fcb_append+0x52>
   21690:	4937      	ldr	r1, [pc, #220]	; (21770 <fcb_append+0x120>)
   21692:	4838      	ldr	r0, [pc, #224]	; (21774 <fcb_append+0x124>)
   21694:	224b      	movs	r2, #75	; 0x4b
   21696:	f01b f9f9 	bl	3ca8c <assert_print>
   2169a:	214b      	movs	r1, #75	; 0x4b
   2169c:	4834      	ldr	r0, [pc, #208]	; (21770 <fcb_append+0x120>)
   2169e:	f01b f9ee 	bl	3ca7e <assert_post_action>

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   216a2:	f104 0a0c 	add.w	sl, r4, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   216a6:	f04f 32ff 	mov.w	r2, #4294967295
   216aa:	f04f 33ff 	mov.w	r3, #4294967295
   216ae:	4650      	mov	r0, sl
   216b0:	f015 f910 	bl	368d4 <z_impl_k_mutex_lock>
	if (rc) {
   216b4:	4605      	mov	r5, r0
   216b6:	2800      	cmp	r0, #0
   216b8:	d156      	bne.n	21768 <fcb_append+0x118>
		return -EINVAL;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   216ba:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   216be:	684a      	ldr	r2, [r1, #4]
   216c0:	443b      	add	r3, r7
   216c2:	4433      	add	r3, r6
   216c4:	4293      	cmp	r3, r2
   216c6:	d92b      	bls.n	21720 <fcb_append+0xd0>
	prev = NULL;
   216c8:	4680      	mov	r8, r0
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   216ca:	f894 b006 	ldrb.w	fp, [r4, #6]
		cur = fcb_getnext_sector(fcb, cur);
   216ce:	4620      	mov	r0, r4
   216d0:	f01b fc76 	bl	3cfc0 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   216d4:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   216d6:	f1b8 0f00 	cmp.w	r8, #0
   216da:	bf08      	it	eq
   216dc:	4680      	moveq	r8, r0
		if (cur == fcb->f_oldest) {
   216de:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   216e0:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   216e2:	d03b      	beq.n	2175c <fcb_append+0x10c>
	} while (i++ < cnt);
   216e4:	45ab      	cmp	fp, r5
   216e6:	f105 0301 	add.w	r3, r5, #1
   216ea:	dc35      	bgt.n	21758 <fcb_append+0x108>
		if (!sector || (sector->fs_size <
   216ec:	f1b8 0f00 	cmp.w	r8, #0
   216f0:	d034      	beq.n	2175c <fcb_append+0x10c>
   216f2:	f8d8 2004 	ldr.w	r2, [r8, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   216f6:	f107 0308 	add.w	r3, r7, #8
   216fa:	4433      	add	r3, r6
		if (!sector || (sector->fs_size <
   216fc:	429a      	cmp	r2, r3
   216fe:	d32d      	bcc.n	2175c <fcb_append+0x10c>
			rc = -ENOSPC;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   21700:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   21702:	4641      	mov	r1, r8
   21704:	3201      	adds	r2, #1
   21706:	4620      	mov	r0, r4
   21708:	b292      	uxth	r2, r2
   2170a:	f01b fae8 	bl	3ccde <fcb_sector_hdr_init>
		if (rc) {
   2170e:	4605      	mov	r5, r0
   21710:	b9d8      	cbnz	r0, 2174a <fcb_append+0xfa>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   21712:	2308      	movs	r3, #8
   21714:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   21716:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   21718:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		fcb->f_active_id++;
   2171c:	3301      	adds	r3, #1
   2171e:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   21720:	4620      	mov	r0, r4
   21722:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   21726:	9700      	str	r7, [sp, #0]
   21728:	ab02      	add	r3, sp, #8
   2172a:	f01b fa64 	bl	3cbf6 <fcb_flash_write>
	if (rc) {
   2172e:	4605      	mov	r5, r0
   21730:	b9b8      	cbnz	r0, 21762 <fcb_append+0x112>
		rc = -EIO;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   21732:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21734:	f8c9 3000 	str.w	r3, [r9]
	append_loc->fe_elem_off = active->fe_elem_off;
   21738:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2173a:	f8c9 3004 	str.w	r3, [r9, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   2173e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   21740:	4407      	add	r7, r0
   21742:	f8c9 7008 	str.w	r7, [r9, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   21746:	4437      	add	r7, r6
   21748:	62a7      	str	r7, [r4, #40]	; 0x28
	return z_impl_k_mutex_unlock(mutex);
   2174a:	4650      	mov	r0, sl
   2174c:	f015 f994 	bl	36a78 <z_impl_k_mutex_unlock>

	return 0;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   21750:	4628      	mov	r0, r5
   21752:	b005      	add	sp, #20
   21754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   21758:	461d      	mov	r5, r3
   2175a:	e7b8      	b.n	216ce <fcb_append+0x7e>
			rc = -ENOSPC;
   2175c:	f06f 051b 	mvn.w	r5, #27
   21760:	e7f3      	b.n	2174a <fcb_append+0xfa>
		rc = -EIO;
   21762:	f06f 0504 	mvn.w	r5, #4
   21766:	e7f0      	b.n	2174a <fcb_append+0xfa>
		return -EINVAL;
   21768:	f06f 0515 	mvn.w	r5, #21
   2176c:	e7f0      	b.n	21750 <fcb_append+0x100>
   2176e:	bf00      	nop
   21770:	0004416e 	.word	0x0004416e
   21774:	0004409e 	.word	0x0004409e

00021778 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   21778:	b5f0      	push	{r4, r5, r6, r7, lr}
   2177a:	4605      	mov	r5, r0
   2177c:	b09b      	sub	sp, #108	; 0x6c
   2177e:	460f      	mov	r7, r1
   21780:	4614      	mov	r4, r2
	struct sntp_pkt tx_pkt = { 0 };
   21782:	2100      	movs	r1, #0
   21784:	2230      	movs	r2, #48	; 0x30
   21786:	a802      	add	r0, sp, #8
   21788:	f01f fe54 	bl	41434 <memset>
	int ret = 0;

	if (!ctx || !time) {
   2178c:	2d00      	cmp	r5, #0
   2178e:	f000 8085 	beq.w	2189c <sntp_query+0x124>
   21792:	2c00      	cmp	r4, #0
   21794:	f000 8082 	beq.w	2189c <sntp_query+0x124>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   21798:	231b      	movs	r3, #27
   2179a:	f88d 3008 	strb.w	r3, [sp, #8]
	return z_impl_k_uptime_ticks();
   2179e:	f01f fcb9 	bl	41114 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   217a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   217a6:	2600      	movs	r6, #0
   217a8:	fba0 0302 	umull	r0, r3, r0, r2
   217ac:	fb02 3101 	mla	r1, r2, r1, r3
   217b0:	0bc0      	lsrs	r0, r0, #15
	return time / MSEC_PER_SEC;
   217b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   217b6:	2300      	movs	r3, #0
   217b8:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   217bc:	4631      	mov	r1, r6
   217be:	f7fb fb93 	bl	1cee8 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   217c2:	4a38      	ldr	r2, [pc, #224]	; (218a4 <sntp_query+0x12c>)
   217c4:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   217c6:	0a13      	lsrs	r3, r2, #8
   217c8:	0211      	lsls	r1, r2, #8
   217ca:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   217ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   217d2:	430b      	orrs	r3, r1
   217d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   217d8:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   217dc:	68e8      	ldr	r0, [r5, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   217de:	612a      	str	r2, [r5, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   217e0:	930c      	str	r3, [sp, #48]	; 0x30
		union { uintptr_t x; socklen_t val; } parm5 = { .val = addrlen };
		return (ssize_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, parm5.x, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   217e2:	2230      	movs	r2, #48	; 0x30
   217e4:	4633      	mov	r3, r6
   217e6:	e9cd 6600 	strd	r6, r6, [sp]
   217ea:	a902      	add	r1, sp, #8
   217ec:	f01b fd1c 	bl	3d228 <z_impl_zsock_sendto>
	if (ret < 0) {
   217f0:	2800      	cmp	r0, #0
   217f2:	db0f      	blt.n	21814 <sntp_query+0x9c>
	struct sntp_pkt buf = { 0 };
   217f4:	4631      	mov	r1, r6
   217f6:	2230      	movs	r2, #48	; 0x30
   217f8:	a80e      	add	r0, sp, #56	; 0x38
   217fa:	f01f fe1b 	bl	41434 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   217fe:	68a9      	ldr	r1, [r5, #8]
		union { uintptr_t x; int val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   21800:	463a      	mov	r2, r7
   21802:	4628      	mov	r0, r5
   21804:	f01b fd97 	bl	3d336 <z_impl_zsock_poll>
	if (status < 0) {
   21808:	42b0      	cmp	r0, r6
   2180a:	da05      	bge.n	21818 <sntp_query+0xa0>
		return -errno;
   2180c:	f01b ffb7 	bl	3d77e <__errno>
   21810:	6800      	ldr	r0, [r0, #0]
   21812:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   21814:	b01b      	add	sp, #108	; 0x6c
   21816:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status == 0) {
   21818:	d037      	beq.n	2188a <sntp_query+0x112>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   2181a:	68e8      	ldr	r0, [r5, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2181c:	2230      	movs	r2, #48	; 0x30
   2181e:	4633      	mov	r3, r6
   21820:	e9cd 6600 	strd	r6, r6, [sp]
   21824:	a90e      	add	r1, sp, #56	; 0x38
   21826:	f01b fd56 	bl	3d2d6 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   2182a:	2800      	cmp	r0, #0
   2182c:	dbee      	blt.n	2180c <sntp_query+0x94>
	if (rcvd != sizeof(struct sntp_pkt)) {
   2182e:	2830      	cmp	r0, #48	; 0x30
   21830:	d12e      	bne.n	21890 <sntp_query+0x118>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   21832:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21834:	692a      	ldr	r2, [r5, #16]
   21836:	ba1b      	rev	r3, r3
   21838:	429a      	cmp	r2, r3
   2183a:	d002      	beq.n	21842 <sntp_query+0xca>
		return -EINVAL;
   2183c:	f06f 0015 	mvn.w	r0, #21
   21840:	e7e8      	b.n	21814 <sntp_query+0x9c>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   21842:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   21846:	f003 0307 	and.w	r3, r3, #7
   2184a:	2b04      	cmp	r3, #4
   2184c:	d1f6      	bne.n	2183c <sntp_query+0xc4>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   2184e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   21852:	b303      	cbz	r3, 21896 <sntp_query+0x11e>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   21854:	9b18      	ldr	r3, [sp, #96]	; 0x60
   21856:	9a19      	ldr	r2, [sp, #100]	; 0x64
   21858:	ba1b      	rev	r3, r3
   2185a:	ba12      	rev	r2, r2
   2185c:	ea53 0102 	orrs.w	r1, r3, r2
   21860:	d0ec      	beq.n	2183c <sntp_query+0xc4>
	if (ts & 0x80000000) {
   21862:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   21864:	60a2      	str	r2, [r4, #8]
	if (ts & 0x80000000) {
   21866:	da0a      	bge.n	2187e <sntp_query+0x106>
		if (ts >= OFFSET_1970_JAN_1) {
   21868:	4a0f      	ldr	r2, [pc, #60]	; (218a8 <sntp_query+0x130>)
   2186a:	4293      	cmp	r3, r2
   2186c:	d9e6      	bls.n	2183c <sntp_query+0xc4>
			time->seconds = ts - OFFSET_1970_JAN_1;
   2186e:	2000      	movs	r0, #0
   21870:	4a0e      	ldr	r2, [pc, #56]	; (218ac <sntp_query+0x134>)
   21872:	189b      	adds	r3, r3, r2
   21874:	f140 32ff 	adc.w	r2, r0, #4294967295
   21878:	e9c4 3200 	strd	r3, r2, [r4]
   2187c:	e7ca      	b.n	21814 <sntp_query+0x9c>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   2187e:	2000      	movs	r0, #0
   21880:	4a0a      	ldr	r2, [pc, #40]	; (218ac <sntp_query+0x134>)
   21882:	441a      	add	r2, r3
   21884:	e9c4 2000 	strd	r2, r0, [r4]
   21888:	e7c4      	b.n	21814 <sntp_query+0x9c>
		return -ETIMEDOUT;
   2188a:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2188e:	e7c1      	b.n	21814 <sntp_query+0x9c>
		return -EMSGSIZE;
   21890:	f06f 0079 	mvn.w	r0, #121	; 0x79
   21894:	e7be      	b.n	21814 <sntp_query+0x9c>
		return -EBUSY;
   21896:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   2189a:	e7bb      	b.n	21814 <sntp_query+0x9c>
		return -EFAULT;
   2189c:	f06f 000d 	mvn.w	r0, #13
   218a0:	e7b8      	b.n	21814 <sntp_query+0x9c>
   218a2:	bf00      	nop
   218a4:	83aa7e80 	.word	0x83aa7e80
   218a8:	83aa7e7f 	.word	0x83aa7e7f
   218ac:	7c558180 	.word	0x7c558180

000218b0 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   218b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   218b4:	4605      	mov	r5, r0
   218b6:	460e      	mov	r6, r1
   218b8:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   218ba:	4c1c      	ldr	r4, [pc, #112]	; (2192c <z_impl_zsock_socket+0x7c>)
   218bc:	f8df 9074 	ldr.w	r9, [pc, #116]	; 21934 <z_impl_zsock_socket+0x84>
   218c0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 21938 <z_impl_zsock_socket+0x88>
   218c4:	454c      	cmp	r4, r9
   218c6:	d908      	bls.n	218da <z_impl_zsock_socket+0x2a>
   218c8:	4641      	mov	r1, r8
   218ca:	4819      	ldr	r0, [pc, #100]	; (21930 <z_impl_zsock_socket+0x80>)
   218cc:	22d6      	movs	r2, #214	; 0xd6
   218ce:	f01b f8dd 	bl	3ca8c <assert_print>
   218d2:	21d6      	movs	r1, #214	; 0xd6
   218d4:	4640      	mov	r0, r8
   218d6:	f01b f8d2 	bl	3ca7e <assert_post_action>
   218da:	454c      	cmp	r4, r9
   218dc:	d307      	bcc.n	218ee <z_impl_zsock_socket+0x3e>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   218de:	f01b ff4e 	bl	3d77e <__errno>
   218e2:	236a      	movs	r3, #106	; 0x6a
   218e4:	6003      	str	r3, [r0, #0]
	return -1;
}
   218e6:	f04f 30ff 	mov.w	r0, #4294967295
   218ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   218ee:	6823      	ldr	r3, [r4, #0]
   218f0:	42ab      	cmp	r3, r5
   218f2:	d000      	beq.n	218f6 <z_impl_zsock_socket+0x46>
   218f4:	b9bb      	cbnz	r3, 21926 <z_impl_zsock_socket+0x76>
		NET_ASSERT(sock_family->is_supported);
   218f6:	6863      	ldr	r3, [r4, #4]
   218f8:	b943      	cbnz	r3, 2190c <z_impl_zsock_socket+0x5c>
   218fa:	4641      	mov	r1, r8
   218fc:	480c      	ldr	r0, [pc, #48]	; (21930 <z_impl_zsock_socket+0x80>)
   218fe:	22dc      	movs	r2, #220	; 0xdc
   21900:	f01b f8c4 	bl	3ca8c <assert_print>
   21904:	21dc      	movs	r1, #220	; 0xdc
   21906:	4640      	mov	r0, r8
   21908:	f01b f8b9 	bl	3ca7e <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   2190c:	463a      	mov	r2, r7
   2190e:	4631      	mov	r1, r6
   21910:	4628      	mov	r0, r5
   21912:	6863      	ldr	r3, [r4, #4]
   21914:	4798      	blx	r3
   21916:	b130      	cbz	r0, 21926 <z_impl_zsock_socket+0x76>
		return sock_family->handler(family, type, proto);
   21918:	463a      	mov	r2, r7
   2191a:	4631      	mov	r1, r6
   2191c:	4628      	mov	r0, r5
   2191e:	68a3      	ldr	r3, [r4, #8]
}
   21920:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   21924:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   21926:	340c      	adds	r4, #12
   21928:	e7cc      	b.n	218c4 <z_impl_zsock_socket+0x14>
   2192a:	bf00      	nop
   2192c:	000425f4 	.word	0x000425f4
   21930:	0004409e 	.word	0x0004409e
   21934:	00042600 	.word	0x00042600
   21938:	000441d0 	.word	0x000441d0

0002193c <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   2193c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21940:	4606      	mov	r6, r0
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
   21942:	f04f 0800 	mov.w	r8, #0
{
   21946:	b09b      	sub	sp, #108	; 0x6c
   21948:	9104      	str	r1, [sp, #16]
   2194a:	4610      	mov	r0, r2
   2194c:	4619      	mov	r1, r3
   2194e:	461d      	mov	r5, r3
   21950:	4614      	mov	r4, r2

	end = sys_clock_timeout_end_calc(timeout);
   21952:	f01f fbe5 	bl	41120 <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   21956:	46b1      	mov	r9, r6
	const struct fd_op_vtable *offl_vtable = NULL;
   21958:	46c2      	mov	sl, r8
	bool offload = false;
   2195a:	4647      	mov	r7, r8
	pev = poll_events;
   2195c:	ab0b      	add	r3, sp, #44	; 0x2c
   2195e:	9308      	str	r3, [sp, #32]
	end = sys_clock_timeout_end_calc(timeout);
   21960:	e9cd 0105 	strd	r0, r1, [sp, #20]
	for (pfd = fds, i = nfds; i--; pfd++) {
   21964:	9b04      	ldr	r3, [sp, #16]
   21966:	9303      	str	r3, [sp, #12]
   21968:	9b03      	ldr	r3, [sp, #12]
   2196a:	bb03      	cbnz	r3, 219ae <zsock_poll_internal+0x72>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   2196c:	2f00      	cmp	r7, #0
   2196e:	d060      	beq.n	21a32 <zsock_poll_internal+0xf6>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21970:	f1b5 3fff 	cmp.w	r5, #4294967295
   21974:	bf08      	it	eq
   21976:	f1b4 3fff 	cmpeq.w	r4, #4294967295
			return (uint32_t)((t * to_hz + off) / from_hz);
   2197a:	bf16      	itet	ne
   2197c:	f44f 707a 	movne.w	r0, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
   21980:	f04f 34ff 	moveq.w	r4, #4294967295
   21984:	fba4 4000 	umullne	r4, r0, r4, r0
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   21988:	9b04      	ldr	r3, [sp, #16]
   2198a:	bf1c      	itt	ne
   2198c:	0be4      	lsrne	r4, r4, #15
   2198e:	ea44 4440 	orrne.w	r4, r4, r0, lsl #17
   21992:	9300      	str	r3, [sp, #0]
   21994:	f44f 7282 	mov.w	r2, #260	; 0x104
   21998:	4633      	mov	r3, r6
   2199a:	4641      	mov	r1, r8
   2199c:	4650      	mov	r0, sl
   2199e:	9401      	str	r4, [sp, #4]
   219a0:	f01b fbe4 	bl	3d16c <z_fdtable_call_ioctl>
   219a4:	4607      	mov	r7, r0
			}
		}
	} while (retry);

	return ret;
}
   219a6:	4638      	mov	r0, r7
   219a8:	b01b      	add	sp, #108	; 0x6c
   219aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
   219ae:	f8d9 0000 	ldr.w	r0, [r9]
   219b2:	2800      	cmp	r0, #0
   219b4:	db37      	blt.n	21a26 <zsock_poll_internal+0xea>
	ctx = z_get_fd_obj_and_vtable(sock,
   219b6:	aa0a      	add	r2, sp, #40	; 0x28
   219b8:	a909      	add	r1, sp, #36	; 0x24
   219ba:	f7ff f845 	bl	20a48 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   219be:	9007      	str	r0, [sp, #28]
   219c0:	b388      	cbz	r0, 21a26 <zsock_poll_internal+0xea>
		(void)k_mutex_lock(lock, K_FOREVER);
   219c2:	f04f 32ff 	mov.w	r2, #4294967295
   219c6:	f04f 33ff 	mov.w	r3, #4294967295
   219ca:	980a      	ldr	r0, [sp, #40]	; 0x28
   219cc:	f01b fbdd 	bl	3d18a <k_mutex_lock.constprop.0.isra.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   219d0:	ab1a      	add	r3, sp, #104	; 0x68
   219d2:	9301      	str	r3, [sp, #4]
   219d4:	ab08      	add	r3, sp, #32
   219d6:	9300      	str	r3, [sp, #0]
   219d8:	f44f 7281 	mov.w	r2, #258	; 0x102
   219dc:	464b      	mov	r3, r9
   219de:	9907      	ldr	r1, [sp, #28]
   219e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   219e2:	f01b fbc3 	bl	3d16c <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   219e6:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   219ea:	4683      	mov	fp, r0
		if (result == -EALREADY) {
   219ec:	d00d      	beq.n	21a0a <zsock_poll_internal+0xce>
		} else if (result == -EXDEV) {
   219ee:	f110 0f12 	cmn.w	r0, #18
   219f2:	9907      	ldr	r1, [sp, #28]
   219f4:	d10c      	bne.n	21a10 <zsock_poll_internal+0xd4>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   219f6:	f1ba 0f00 	cmp.w	sl, #0
   219fa:	d102      	bne.n	21a02 <zsock_poll_internal+0xc6>
				offl_vtable = vtable;
   219fc:	4688      	mov	r8, r1
   219fe:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
			result = 0;
   21a02:	f04f 0b00 	mov.w	fp, #0
			offload = true;
   21a06:	2701      	movs	r7, #1
   21a08:	e002      	b.n	21a10 <zsock_poll_internal+0xd4>
			timeout = K_NO_WAIT;
   21a0a:	2400      	movs	r4, #0
   21a0c:	4625      	mov	r5, r4
			result = 0;
   21a0e:	46a3      	mov	fp, r4
		k_mutex_unlock(lock);
   21a10:	980a      	ldr	r0, [sp, #40]	; 0x28
   21a12:	f01b fbbc 	bl	3d18e <k_mutex_unlock.isra.0>
		if (result < 0) {
   21a16:	f1bb 0f00 	cmp.w	fp, #0
   21a1a:	da04      	bge.n	21a26 <zsock_poll_internal+0xea>
				errno = -result;
   21a1c:	f01b feaf 	bl	3d77e <__errno>
   21a20:	f1cb 0300 	rsb	r3, fp, #0
   21a24:	e036      	b.n	21a94 <zsock_poll_internal+0x158>
	for (pfd = fds, i = nfds; i--; pfd++) {
   21a26:	9b03      	ldr	r3, [sp, #12]
   21a28:	f109 0908 	add.w	r9, r9, #8
   21a2c:	3b01      	subs	r3, #1
   21a2e:	9303      	str	r3, [sp, #12]
   21a30:	e79a      	b.n	21968 <zsock_poll_internal+0x2c>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   21a32:	ea54 0305 	orrs.w	r3, r4, r5
   21a36:	d010      	beq.n	21a5a <zsock_poll_internal+0x11e>
   21a38:	f1b5 3fff 	cmp.w	r5, #4294967295
   21a3c:	bf08      	it	eq
   21a3e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   21a42:	d00a      	beq.n	21a5a <zsock_poll_internal+0x11e>
		int64_t remaining = end - sys_clock_tick_get();
   21a44:	f017 f9c8 	bl	38dd8 <sys_clock_tick_get>
   21a48:	9b05      	ldr	r3, [sp, #20]
   21a4a:	1a1c      	subs	r4, r3, r0
   21a4c:	9b06      	ldr	r3, [sp, #24]
   21a4e:	eb63 0501 	sbc.w	r5, r3, r1
   21a52:	2d00      	cmp	r5, #0
   21a54:	bfbc      	itt	lt
   21a56:	463c      	movlt	r4, r7
   21a58:	4625      	movlt	r5, r4
		ret = k_poll(poll_events, pev - poll_events, timeout);
   21a5a:	9908      	ldr	r1, [sp, #32]
   21a5c:	af0b      	add	r7, sp, #44	; 0x2c
   21a5e:	4b3f      	ldr	r3, [pc, #252]	; (21b5c <zsock_poll_internal+0x220>)
   21a60:	1bc9      	subs	r1, r1, r7
   21a62:	1089      	asrs	r1, r1, #2
   21a64:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   21a66:	462b      	mov	r3, r5
   21a68:	4622      	mov	r2, r4
   21a6a:	4638      	mov	r0, r7
   21a6c:	f017 fcce 	bl	3940c <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   21a70:	f100 030b 	add.w	r3, r0, #11
   21a74:	2b0b      	cmp	r3, #11
   21a76:	4681      	mov	r9, r0
   21a78:	d808      	bhi.n	21a8c <zsock_poll_internal+0x150>
   21a7a:	f640 0881 	movw	r8, #2177	; 0x881
   21a7e:	fa28 f803 	lsr.w	r8, r8, r3
   21a82:	ea6f 0808 	mvn.w	r8, r8
   21a86:	f018 0801 	ands.w	r8, r8, #1
   21a8a:	d007      	beq.n	21a9c <zsock_poll_internal+0x160>
			errno = -ret;
   21a8c:	f01b fe77 	bl	3d77e <__errno>
   21a90:	f1c9 0300 	rsb	r3, r9, #0
			return -1;
   21a94:	f04f 37ff 	mov.w	r7, #4294967295
			errno = -ret;
   21a98:	6003      	str	r3, [r0, #0]
			return -1;
   21a9a:	e784      	b.n	219a6 <zsock_poll_internal+0x6a>
		pev = poll_events;
   21a9c:	9708      	str	r7, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   21a9e:	46b1      	mov	r9, r6
		ret = 0;
   21aa0:	4647      	mov	r7, r8
		for (pfd = fds, i = nfds; i--; pfd++) {
   21aa2:	f8dd a010 	ldr.w	sl, [sp, #16]
   21aa6:	f1ba 0f00 	cmp.w	sl, #0
   21aaa:	d11c      	bne.n	21ae6 <zsock_poll_internal+0x1aa>
		if (retry) {
   21aac:	f1b8 0f00 	cmp.w	r8, #0
   21ab0:	f43f af79 	beq.w	219a6 <zsock_poll_internal+0x6a>
			if (ret > 0) {
   21ab4:	2f00      	cmp	r7, #0
   21ab6:	f47f af76 	bne.w	219a6 <zsock_poll_internal+0x6a>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21aba:	ea54 0305 	orrs.w	r3, r4, r5
   21abe:	f43f af72 	beq.w	219a6 <zsock_poll_internal+0x6a>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21ac2:	f1b5 3fff 	cmp.w	r5, #4294967295
   21ac6:	bf08      	it	eq
   21ac8:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   21acc:	d0c5      	beq.n	21a5a <zsock_poll_internal+0x11e>
				int64_t remaining = end - sys_clock_tick_get();
   21ace:	f017 f983 	bl	38dd8 <sys_clock_tick_get>
   21ad2:	9b05      	ldr	r3, [sp, #20]
   21ad4:	1a1c      	subs	r4, r3, r0
   21ad6:	9b06      	ldr	r3, [sp, #24]
   21ad8:	eb63 0501 	sbc.w	r5, r3, r1
				if (remaining <= 0) {
   21adc:	2c01      	cmp	r4, #1
   21ade:	f175 0300 	sbcs.w	r3, r5, #0
   21ae2:	daba      	bge.n	21a5a <zsock_poll_internal+0x11e>
   21ae4:	e75f      	b.n	219a6 <zsock_poll_internal+0x6a>
			pfd->revents = 0;
   21ae6:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   21aea:	f8d9 0000 	ldr.w	r0, [r9]
			pfd->revents = 0;
   21aee:	f8a9 3006 	strh.w	r3, [r9, #6]
			if (pfd->fd < 0) {
   21af2:	2800      	cmp	r0, #0
   21af4:	db29      	blt.n	21b4a <zsock_poll_internal+0x20e>
	ctx = z_get_fd_obj_and_vtable(sock,
   21af6:	aa0a      	add	r2, sp, #40	; 0x28
   21af8:	a909      	add	r1, sp, #36	; 0x24
   21afa:	f7fe ffa5 	bl	20a48 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   21afe:	4683      	mov	fp, r0
   21b00:	b920      	cbnz	r0, 21b0c <zsock_poll_internal+0x1d0>
				pfd->revents = ZSOCK_POLLNVAL;
   21b02:	2320      	movs	r3, #32
   21b04:	f8a9 3006 	strh.w	r3, [r9, #6]
				ret++;
   21b08:	3701      	adds	r7, #1
   21b0a:	e01e      	b.n	21b4a <zsock_poll_internal+0x20e>
			(void)k_mutex_lock(lock, K_FOREVER);
   21b0c:	f04f 32ff 	mov.w	r2, #4294967295
   21b10:	f04f 33ff 	mov.w	r3, #4294967295
   21b14:	980a      	ldr	r0, [sp, #40]	; 0x28
   21b16:	f01b fb38 	bl	3d18a <k_mutex_lock.constprop.0.isra.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   21b1a:	ab08      	add	r3, sp, #32
   21b1c:	4659      	mov	r1, fp
   21b1e:	f240 1203 	movw	r2, #259	; 0x103
   21b22:	9300      	str	r3, [sp, #0]
   21b24:	9809      	ldr	r0, [sp, #36]	; 0x24
   21b26:	464b      	mov	r3, r9
   21b28:	f01b fb20 	bl	3d16c <z_fdtable_call_ioctl>
   21b2c:	4683      	mov	fp, r0
			k_mutex_unlock(lock);
   21b2e:	980a      	ldr	r0, [sp, #40]	; 0x28
   21b30:	f01b fb2d 	bl	3d18e <k_mutex_unlock.isra.0>
			if (result == -EAGAIN) {
   21b34:	f11b 0f0b 	cmn.w	fp, #11
   21b38:	d00c      	beq.n	21b54 <zsock_poll_internal+0x218>
			} else if (result != 0) {
   21b3a:	f1bb 0f00 	cmp.w	fp, #0
   21b3e:	f47f af6d 	bne.w	21a1c <zsock_poll_internal+0xe0>
			if (pfd->revents != 0) {
   21b42:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   21b46:	2b00      	cmp	r3, #0
   21b48:	d1de      	bne.n	21b08 <zsock_poll_internal+0x1cc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   21b4a:	f109 0908 	add.w	r9, r9, #8
   21b4e:	f10a 3aff 	add.w	sl, sl, #4294967295
   21b52:	e7a8      	b.n	21aa6 <zsock_poll_internal+0x16a>
				retry = true;
   21b54:	f04f 0801 	mov.w	r8, #1
   21b58:	e7f7      	b.n	21b4a <zsock_poll_internal+0x20e>
   21b5a:	bf00      	nop
   21b5c:	cccccccd 	.word	0xcccccccd

00021b60 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   21b60:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   21b62:	4604      	mov	r4, r0
   21b64:	b940      	cbnz	r0, 21b78 <socket_offload_dns_register+0x18>
   21b66:	490b      	ldr	r1, [pc, #44]	; (21b94 <socket_offload_dns_register+0x34>)
   21b68:	480b      	ldr	r0, [pc, #44]	; (21b98 <socket_offload_dns_register+0x38>)
   21b6a:	2213      	movs	r2, #19
   21b6c:	f01a ff8e 	bl	3ca8c <assert_print>
   21b70:	2113      	movs	r1, #19
   21b72:	4808      	ldr	r0, [pc, #32]	; (21b94 <socket_offload_dns_register+0x34>)
   21b74:	f01a ff83 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   21b78:	4d08      	ldr	r5, [pc, #32]	; (21b9c <socket_offload_dns_register+0x3c>)
   21b7a:	682b      	ldr	r3, [r5, #0]
   21b7c:	b143      	cbz	r3, 21b90 <socket_offload_dns_register+0x30>
   21b7e:	4905      	ldr	r1, [pc, #20]	; (21b94 <socket_offload_dns_register+0x34>)
   21b80:	4805      	ldr	r0, [pc, #20]	; (21b98 <socket_offload_dns_register+0x38>)
   21b82:	2214      	movs	r2, #20
   21b84:	f01a ff82 	bl	3ca8c <assert_print>
   21b88:	2114      	movs	r1, #20
   21b8a:	4802      	ldr	r0, [pc, #8]	; (21b94 <socket_offload_dns_register+0x34>)
   21b8c:	f01a ff77 	bl	3ca7e <assert_post_action>

	dns_offload = ops;
   21b90:	602c      	str	r4, [r5, #0]
}
   21b92:	bd38      	pop	{r3, r4, r5, pc}
   21b94:	00044204 	.word	0x00044204
   21b98:	0004409e 	.word	0x0004409e
   21b9c:	20019120 	.word	0x20019120

00021ba0 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   21ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   21ba4:	f8df 805c 	ldr.w	r8, [pc, #92]	; 21c04 <socket_offload_getaddrinfo+0x64>
{
   21ba8:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dns_offload);
   21baa:	f8d8 3000 	ldr.w	r3, [r8]
{
   21bae:	4604      	mov	r4, r0
   21bb0:	460d      	mov	r5, r1
   21bb2:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dns_offload);
   21bb4:	b943      	cbnz	r3, 21bc8 <socket_offload_getaddrinfo+0x28>
   21bb6:	4911      	ldr	r1, [pc, #68]	; (21bfc <socket_offload_getaddrinfo+0x5c>)
   21bb8:	4811      	ldr	r0, [pc, #68]	; (21c00 <socket_offload_getaddrinfo+0x60>)
   21bba:	221d      	movs	r2, #29
   21bbc:	f01a ff66 	bl	3ca8c <assert_print>
   21bc0:	211d      	movs	r1, #29
   21bc2:	480e      	ldr	r0, [pc, #56]	; (21bfc <socket_offload_getaddrinfo+0x5c>)
   21bc4:	f01a ff5b 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   21bc8:	f8d8 3000 	ldr.w	r3, [r8]
   21bcc:	681b      	ldr	r3, [r3, #0]
   21bce:	b943      	cbnz	r3, 21be2 <socket_offload_getaddrinfo+0x42>
   21bd0:	490a      	ldr	r1, [pc, #40]	; (21bfc <socket_offload_getaddrinfo+0x5c>)
   21bd2:	480b      	ldr	r0, [pc, #44]	; (21c00 <socket_offload_getaddrinfo+0x60>)
   21bd4:	221e      	movs	r2, #30
   21bd6:	f01a ff59 	bl	3ca8c <assert_print>
   21bda:	211e      	movs	r1, #30
   21bdc:	4807      	ldr	r0, [pc, #28]	; (21bfc <socket_offload_getaddrinfo+0x5c>)
   21bde:	f01a ff4e 	bl	3ca7e <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   21be2:	f8d8 3000 	ldr.w	r3, [r8]
   21be6:	4632      	mov	r2, r6
   21be8:	f8d3 e000 	ldr.w	lr, [r3]
   21bec:	4629      	mov	r1, r5
   21bee:	463b      	mov	r3, r7
   21bf0:	4620      	mov	r0, r4
   21bf2:	46f4      	mov	ip, lr
}
   21bf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   21bf8:	4760      	bx	ip
   21bfa:	bf00      	nop
   21bfc:	00044204 	.word	0x00044204
   21c00:	0004409e 	.word	0x0004409e
   21c04:	20019120 	.word	0x20019120

00021c08 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   21c08:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   21c0a:	4d0f      	ldr	r5, [pc, #60]	; (21c48 <socket_offload_freeaddrinfo+0x40>)
{
   21c0c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(dns_offload);
   21c0e:	682b      	ldr	r3, [r5, #0]
   21c10:	b943      	cbnz	r3, 21c24 <socket_offload_freeaddrinfo+0x1c>
   21c12:	490e      	ldr	r1, [pc, #56]	; (21c4c <socket_offload_freeaddrinfo+0x44>)
   21c14:	480e      	ldr	r0, [pc, #56]	; (21c50 <socket_offload_freeaddrinfo+0x48>)
   21c16:	2225      	movs	r2, #37	; 0x25
   21c18:	f01a ff38 	bl	3ca8c <assert_print>
   21c1c:	2125      	movs	r1, #37	; 0x25
   21c1e:	480b      	ldr	r0, [pc, #44]	; (21c4c <socket_offload_freeaddrinfo+0x44>)
   21c20:	f01a ff2d 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   21c24:	682b      	ldr	r3, [r5, #0]
   21c26:	685b      	ldr	r3, [r3, #4]
   21c28:	b943      	cbnz	r3, 21c3c <socket_offload_freeaddrinfo+0x34>
   21c2a:	4908      	ldr	r1, [pc, #32]	; (21c4c <socket_offload_freeaddrinfo+0x44>)
   21c2c:	4808      	ldr	r0, [pc, #32]	; (21c50 <socket_offload_freeaddrinfo+0x48>)
   21c2e:	2226      	movs	r2, #38	; 0x26
   21c30:	f01a ff2c 	bl	3ca8c <assert_print>
   21c34:	2126      	movs	r1, #38	; 0x26
   21c36:	4805      	ldr	r0, [pc, #20]	; (21c4c <socket_offload_freeaddrinfo+0x44>)
   21c38:	f01a ff21 	bl	3ca7e <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   21c3c:	682b      	ldr	r3, [r5, #0]
   21c3e:	4620      	mov	r0, r4
}
   21c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   21c44:	685b      	ldr	r3, [r3, #4]
   21c46:	4718      	bx	r3
   21c48:	20019120 	.word	0x20019120
   21c4c:	00044204 	.word	0x00044204
   21c50:	0004409e 	.word	0x0004409e

00021c54 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   21c54:	4b0c      	ldr	r3, [pc, #48]	; (21c88 <flash_area_open+0x34>)
{
   21c56:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   21c58:	681b      	ldr	r3, [r3, #0]
   21c5a:	b173      	cbz	r3, 21c7a <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   21c5c:	4a0b      	ldr	r2, [pc, #44]	; (21c8c <flash_area_open+0x38>)
   21c5e:	6815      	ldr	r5, [r2, #0]
   21c60:	2200      	movs	r2, #0
   21c62:	42aa      	cmp	r2, r5
   21c64:	db02      	blt.n	21c6c <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   21c66:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   21c6a:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   21c6c:	461c      	mov	r4, r3
   21c6e:	f813 6b10 	ldrb.w	r6, [r3], #16
   21c72:	4286      	cmp	r6, r0
   21c74:	d004      	beq.n	21c80 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   21c76:	3201      	adds	r2, #1
   21c78:	e7f3      	b.n	21c62 <flash_area_open+0xe>
		return -EACCES;
   21c7a:	f06f 000c 	mvn.w	r0, #12
   21c7e:	e7f4      	b.n	21c6a <flash_area_open+0x16>
	return 0;
   21c80:	2000      	movs	r0, #0
	*fap = area;
   21c82:	600c      	str	r4, [r1, #0]
	return 0;
   21c84:	e7f1      	b.n	21c6a <flash_area_open+0x16>
   21c86:	bf00      	nop
   21c88:	20014618 	.word	0x20014618
   21c8c:	00042a90 	.word	0x00042a90

00021c90 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   21c90:	b570      	push	{r4, r5, r6, lr}
   21c92:	b088      	sub	sp, #32
   21c94:	4605      	mov	r5, r0
   21c96:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   21c98:	b2c0      	uxtb	r0, r0
   21c9a:	4669      	mov	r1, sp
{
   21c9c:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   21c9e:	f7ff ffd9 	bl	21c54 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   21ca2:	2800      	cmp	r0, #0
   21ca4:	db1f      	blt.n	21ce6 <flash_area_get_sectors+0x56>
   21ca6:	9b00      	ldr	r3, [sp, #0]
   21ca8:	b1eb      	cbz	r3, 21ce6 <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   21caa:	685a      	ldr	r2, [r3, #4]
	cb_data->ret_len = *cnt;
   21cac:	6821      	ldr	r1, [r4, #0]
	cb_data->area_off = fa->fa_off;
   21cae:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   21cb0:	689a      	ldr	r2, [r3, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
   21cb2:	68d8      	ldr	r0, [r3, #12]
	cb_data->ret = ret;
   21cb4:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   21cb8:	2200      	movs	r2, #0
	cb_data->area_idx = idx;
   21cba:	9501      	str	r5, [sp, #4]
	cb_data->status = 0;
   21cbc:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   21cc0:	9205      	str	r2, [sp, #20]
   21cc2:	f014 f903 	bl	35ecc <z_impl_device_get_binding>
   21cc6:	4605      	mov	r5, r0
	flash_area_close(fa);
   21cc8:	9800      	ldr	r0, [sp, #0]
   21cca:	f01b fb87 	bl	3d3dc <flash_area_close>
	if (flash_dev == NULL) {
   21cce:	b16d      	cbz	r5, 21cec <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   21cd0:	4628      	mov	r0, r5
   21cd2:	4908      	ldr	r1, [pc, #32]	; (21cf4 <flash_area_get_sectors+0x64>)
   21cd4:	aa01      	add	r2, sp, #4
   21cd6:	f01c fda3 	bl	3e820 <flash_page_foreach>
	if (cb_data->status == 0) {
   21cda:	9807      	ldr	r0, [sp, #28]
   21cdc:	b908      	cbnz	r0, 21ce2 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   21cde:	9b05      	ldr	r3, [sp, #20]
   21ce0:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   21ce2:	b008      	add	sp, #32
   21ce4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   21ce6:	f06f 0015 	mvn.w	r0, #21
   21cea:	e7fa      	b.n	21ce2 <flash_area_get_sectors+0x52>
		return -ENODEV;
   21cec:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   21cf0:	e7f7      	b.n	21ce2 <flash_area_get_sectors+0x52>
   21cf2:	bf00      	nop
   21cf4:	0003d4a1 	.word	0x0003d4a1

00021cf8 <find_flash_total_size>:
static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
   21cf8:	6842      	ldr	r2, [r0, #4]
   21cfa:	680b      	ldr	r3, [r1, #0]
{
   21cfc:	b510      	push	{r4, lr}
	if (ctx->buf_len > info->size) {
   21cfe:	4293      	cmp	r3, r2
{
   21d00:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
   21d02:	d906      	bls.n	21d12 <find_flash_total_size+0x1a>
		LOG_ERR("Buffer size is bigger than page");
   21d04:	4805      	ldr	r0, [pc, #20]	; (21d1c <find_flash_total_size+0x24>)
   21d06:	2145      	movs	r1, #69	; 0x45
   21d08:	f01a fefa 	bl	3cb00 <z_log_minimal_printk>
		ctx->total_size = 0;
   21d0c:	2000      	movs	r0, #0
   21d0e:	6060      	str	r0, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
   21d10:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
   21d12:	684b      	ldr	r3, [r1, #4]
	return true;
   21d14:	2001      	movs	r0, #1
	ctx->total_size += info->size;
   21d16:	4413      	add	r3, r2
   21d18:	604b      	str	r3, [r1, #4]
	return true;
   21d1a:	e7f9      	b.n	21d10 <find_flash_total_size+0x18>
   21d1c:	0004423f 	.word	0x0004423f

00021d20 <stream_flash_erase_page>:
{
   21d20:	b530      	push	{r4, r5, lr}
   21d22:	4605      	mov	r5, r0
   21d24:	b085      	sub	sp, #20
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   21d26:	68c0      	ldr	r0, [r0, #12]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   21d28:	aa01      	add	r2, sp, #4
   21d2a:	f01c fd75 	bl	3e818 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   21d2e:	4604      	mov	r4, r0
   21d30:	b138      	cbz	r0, 21d42 <stream_flash_erase_page+0x22>
		LOG_ERR("Error %d while getting page info", rc);
   21d32:	2145      	movs	r1, #69	; 0x45
   21d34:	4602      	mov	r2, r0
   21d36:	480c      	ldr	r0, [pc, #48]	; (21d68 <stream_flash_erase_page+0x48>)
		LOG_ERR("Error %d while erasing page", rc);
   21d38:	f01a fee2 	bl	3cb00 <z_log_minimal_printk>
}
   21d3c:	4620      	mov	r0, r4
   21d3e:	b005      	add	sp, #20
   21d40:	bd30      	pop	{r4, r5, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   21d42:	9901      	ldr	r1, [sp, #4]
   21d44:	6a2b      	ldr	r3, [r5, #32]
   21d46:	428b      	cmp	r3, r1
   21d48:	d0f8      	beq.n	21d3c <stream_flash_erase_page+0x1c>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   21d4a:	68e8      	ldr	r0, [r5, #12]
   21d4c:	9a02      	ldr	r2, [sp, #8]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
   21d4e:	6883      	ldr	r3, [r0, #8]
   21d50:	689b      	ldr	r3, [r3, #8]
   21d52:	4798      	blx	r3
	if (rc != 0) {
   21d54:	4604      	mov	r4, r0
   21d56:	b118      	cbz	r0, 21d60 <stream_flash_erase_page+0x40>
		LOG_ERR("Error %d while erasing page", rc);
   21d58:	4602      	mov	r2, r0
   21d5a:	2145      	movs	r1, #69	; 0x45
   21d5c:	4803      	ldr	r0, [pc, #12]	; (21d6c <stream_flash_erase_page+0x4c>)
   21d5e:	e7eb      	b.n	21d38 <stream_flash_erase_page+0x18>
		ctx->last_erased_page_start_offset = page.start_offset;
   21d60:	9b01      	ldr	r3, [sp, #4]
   21d62:	622b      	str	r3, [r5, #32]
   21d64:	e7ea      	b.n	21d3c <stream_flash_erase_page+0x1c>
   21d66:	bf00      	nop
   21d68:	00044264 	.word	0x00044264
   21d6c:	0004428a 	.word	0x0004428a

00021d70 <flash_sync>:
{
   21d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ctx->buf_bytes == 0) {
   21d72:	6885      	ldr	r5, [r0, #8]
{
   21d74:	4604      	mov	r4, r0
	if (ctx->buf_bytes == 0) {
   21d76:	b175      	cbz	r5, 21d96 <flash_sync+0x26>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   21d78:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
					     write_addr + ctx->buf_bytes - 1);
   21d7c:	3d01      	subs	r5, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
   21d7e:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
   21d80:	19a9      	adds	r1, r5, r6
   21d82:	f7ff ffcd 	bl	21d20 <stream_flash_erase_page>
		if (rc < 0) {
   21d86:	1e05      	subs	r5, r0, #0
   21d88:	da07      	bge.n	21d9a <flash_sync+0x2a>
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   21d8a:	4633      	mov	r3, r6
   21d8c:	462a      	mov	r2, r5
   21d8e:	2145      	movs	r1, #69	; 0x45
   21d90:	482c      	ldr	r0, [pc, #176]	; (21e44 <flash_sync+0xd4>)
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   21d92:	f01a feb5 	bl	3cb00 <z_log_minimal_printk>
}
   21d96:	4628      	mov	r0, r5
   21d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fill_length = flash_get_write_block_size(ctx->fdev);
   21d9a:	68e0      	ldr	r0, [r4, #12]
   21d9c:	f01b fb9e 	bl	3d4dc <flash_get_write_block_size>
	if (ctx->buf_bytes % fill_length) {
   21da0:	68a5      	ldr	r5, [r4, #8]
   21da2:	fbb5 f3f0 	udiv	r3, r5, r0
   21da6:	fb00 5513 	mls	r5, r0, r3, r5
   21daa:	b15d      	cbz	r5, 21dc4 <flash_sync+0x54>
		fill_length -= ctx->buf_bytes % fill_length;
   21dac:	1b45      	subs	r5, r0, r5
		filler = flash_get_parameters(ctx->fdev)->erase_value;
   21dae:	68e0      	ldr	r0, [r4, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   21db0:	6883      	ldr	r3, [r0, #8]
   21db2:	68db      	ldr	r3, [r3, #12]
   21db4:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   21db6:	6827      	ldr	r7, [r4, #0]
   21db8:	68a3      	ldr	r3, [r4, #8]
__ssp_bos_icheck3(memset, void *, int)
   21dba:	7901      	ldrb	r1, [r0, #4]
   21dbc:	462a      	mov	r2, r5
   21dbe:	18f8      	adds	r0, r7, r3
   21dc0:	f01f fb38 	bl	41434 <memset>
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   21dc4:	68a3      	ldr	r3, [r4, #8]
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
   21dc6:	68e0      	ldr	r0, [r4, #12]
   21dc8:	6822      	ldr	r2, [r4, #0]
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   21dca:	442b      	add	r3, r5
	rc = api->write(dev, offset, data, len);
   21dcc:	6881      	ldr	r1, [r0, #8]
   21dce:	684d      	ldr	r5, [r1, #4]
   21dd0:	4631      	mov	r1, r6
   21dd2:	47a8      	blx	r5
	if (rc != 0) {
   21dd4:	4605      	mov	r5, r0
   21dd6:	b120      	cbz	r0, 21de2 <flash_sync+0x72>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   21dd8:	4602      	mov	r2, r0
   21dda:	4633      	mov	r3, r6
   21ddc:	2145      	movs	r1, #69	; 0x45
   21dde:	481a      	ldr	r0, [pc, #104]	; (21e48 <flash_sync+0xd8>)
   21de0:	e7d7      	b.n	21d92 <flash_sync+0x22>
	if (ctx->callback) {
   21de2:	69e3      	ldr	r3, [r4, #28]
   21de4:	b9e3      	cbnz	r3, 21e20 <flash_sync+0xb0>
	ctx->bytes_written += ctx->buf_bytes;
   21de6:	6923      	ldr	r3, [r4, #16]
   21de8:	68a2      	ldr	r2, [r4, #8]
   21dea:	4413      	add	r3, r2
   21dec:	6123      	str	r3, [r4, #16]
	ctx->buf_bytes = 0U;
   21dee:	2300      	movs	r3, #0
   21df0:	60a3      	str	r3, [r4, #8]
	return rc;
   21df2:	e7d0      	b.n	21d96 <flash_sync+0x26>
			ctx->buf[i] = ~ctx->buf[i];
   21df4:	5c53      	ldrb	r3, [r2, r1]
   21df6:	43db      	mvns	r3, r3
   21df8:	5453      	strb	r3, [r2, r1]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   21dfa:	3101      	adds	r1, #1
   21dfc:	68a3      	ldr	r3, [r4, #8]
			ctx->buf[i] = ~ctx->buf[i];
   21dfe:	6822      	ldr	r2, [r4, #0]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   21e00:	4299      	cmp	r1, r3
   21e02:	d3f7      	bcc.n	21df4 <flash_sync+0x84>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   21e04:	68e0      	ldr	r0, [r4, #12]
	return api->read(dev, offset, data, len);
   21e06:	6881      	ldr	r1, [r0, #8]
   21e08:	680f      	ldr	r7, [r1, #0]
   21e0a:	4631      	mov	r1, r6
   21e0c:	47b8      	blx	r7
		if (rc != 0) {
   21e0e:	4607      	mov	r7, r0
   21e10:	b140      	cbz	r0, 21e24 <flash_sync+0xb4>
			LOG_ERR("flash read failed: %d", rc);
   21e12:	4602      	mov	r2, r0
   21e14:	2145      	movs	r1, #69	; 0x45
   21e16:	480d      	ldr	r0, [pc, #52]	; (21e4c <flash_sync+0xdc>)
   21e18:	f01a fe72 	bl	3cb00 <z_log_minimal_printk>
			return rc;
   21e1c:	463d      	mov	r5, r7
   21e1e:	e7ba      	b.n	21d96 <flash_sync+0x26>
		for (int i = 0; i < ctx->buf_bytes; i++) {
   21e20:	4601      	mov	r1, r0
   21e22:	e7eb      	b.n	21dfc <flash_sync+0x8c>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   21e24:	4632      	mov	r2, r6
   21e26:	69e3      	ldr	r3, [r4, #28]
   21e28:	68a1      	ldr	r1, [r4, #8]
   21e2a:	6820      	ldr	r0, [r4, #0]
   21e2c:	4798      	blx	r3
		if (rc != 0) {
   21e2e:	4606      	mov	r6, r0
   21e30:	2800      	cmp	r0, #0
   21e32:	d0d8      	beq.n	21de6 <flash_sync+0x76>
			LOG_ERR("callback failed: %d", rc);
   21e34:	4602      	mov	r2, r0
   21e36:	2145      	movs	r1, #69	; 0x45
   21e38:	4805      	ldr	r0, [pc, #20]	; (21e50 <flash_sync+0xe0>)
   21e3a:	f01a fe61 	bl	3cb00 <z_log_minimal_printk>
			return rc;
   21e3e:	4635      	mov	r5, r6
   21e40:	e7a9      	b.n	21d96 <flash_sync+0x26>
   21e42:	bf00      	nop
   21e44:	000442ab 	.word	0x000442ab
   21e48:	000442de 	.word	0x000442de
   21e4c:	00044307 	.word	0x00044307
   21e50:	00044322 	.word	0x00044322

00021e54 <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   21e54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21e58:	460d      	mov	r5, r1
   21e5a:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   21e5e:	4691      	mov	r9, r2
   21e60:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   21e62:	4604      	mov	r4, r0
   21e64:	b920      	cbnz	r0, 21e70 <stream_flash_init+0x1c>
	}

	if ((offset + size) > inspect_flash_ctx.total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
		return -EFAULT;
   21e66:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
   21e6a:	b003      	add	sp, #12
   21e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
   21e70:	2900      	cmp	r1, #0
   21e72:	d0f8      	beq.n	21e66 <stream_flash_init+0x12>
   21e74:	2a00      	cmp	r2, #0
   21e76:	d0f6      	beq.n	21e66 <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
   21e78:	9300      	str	r3, [sp, #0]
   21e7a:	2300      	movs	r3, #0
	if (buf_len % flash_get_write_block_size(fdev)) {
   21e7c:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
   21e7e:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
   21e80:	f01b fb2c 	bl	3d4dc <flash_get_write_block_size>
   21e84:	fbb7 f3f0 	udiv	r3, r7, r0
   21e88:	fb03 7010 	mls	r0, r3, r0, r7
   21e8c:	b120      	cbz	r0, 21e98 <stream_flash_init+0x44>
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   21e8e:	2145      	movs	r1, #69	; 0x45
   21e90:	4817      	ldr	r0, [pc, #92]	; (21ef0 <stream_flash_init+0x9c>)
		LOG_ERR("Incorrect parameter");
   21e92:	f01a fe35 	bl	3cb00 <z_log_minimal_printk>
   21e96:	e7e6      	b.n	21e66 <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   21e98:	466a      	mov	r2, sp
   21e9a:	4628      	mov	r0, r5
   21e9c:	4915      	ldr	r1, [pc, #84]	; (21ef4 <stream_flash_init+0xa0>)
   21e9e:	f01c fcbf 	bl	3e820 <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
   21ea2:	9b01      	ldr	r3, [sp, #4]
   21ea4:	2b00      	cmp	r3, #0
   21ea6:	d0de      	beq.n	21e66 <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
   21ea8:	eb06 0208 	add.w	r2, r6, r8
   21eac:	4293      	cmp	r3, r2
   21eae:	d202      	bcs.n	21eb6 <stream_flash_init+0x62>
		LOG_ERR("Incorrect parameter");
   21eb0:	2145      	movs	r1, #69	; 0x45
   21eb2:	4811      	ldr	r0, [pc, #68]	; (21ef8 <stream_flash_init+0xa4>)
   21eb4:	e7ed      	b.n	21e92 <stream_flash_init+0x3e>
	    offset % flash_get_write_block_size(fdev)) {
   21eb6:	4628      	mov	r0, r5
   21eb8:	f01b fb10 	bl	3d4dc <flash_get_write_block_size>
   21ebc:	fbb8 f3f0 	udiv	r3, r8, r0
   21ec0:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
   21ec4:	2800      	cmp	r0, #0
   21ec6:	d1f3      	bne.n	21eb0 <stream_flash_init+0x5c>
	ctx->buf_len = buf_len;
   21ec8:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
   21ecc:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
   21ece:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   21ed0:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   21ed2:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   21ed6:	b916      	cbnz	r6, 21ede <stream_flash_init+0x8a>
   21ed8:	9e01      	ldr	r6, [sp, #4]
   21eda:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
   21ede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return 0;
   21ee0:	2000      	movs	r0, #0
	ctx->callback = cb;
   21ee2:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
   21ee4:	f04f 33ff 	mov.w	r3, #4294967295
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   21ee8:	61a6      	str	r6, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
   21eea:	6223      	str	r3, [r4, #32]
	return 0;
   21eec:	e7bd      	b.n	21e6a <stream_flash_init+0x16>
   21eee:	bf00      	nop
   21ef0:	0004433b 	.word	0x0004433b
   21ef4:	00021cf9 	.word	0x00021cf9
   21ef8:	00044377 	.word	0x00044377

00021efc <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   21efc:	4b10      	ldr	r3, [pc, #64]	; (21f40 <settings_save_one+0x44>)
{
   21efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   21f02:	681c      	ldr	r4, [r3, #0]
{
   21f04:	4605      	mov	r5, r0
   21f06:	460e      	mov	r6, r1
   21f08:	4617      	mov	r7, r2
	if (!cs) {
   21f0a:	b1ac      	cbz	r4, 21f38 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   21f0c:	f04f 32ff 	mov.w	r2, #4294967295
   21f10:	f04f 33ff 	mov.w	r3, #4294967295
   21f14:	480b      	ldr	r0, [pc, #44]	; (21f44 <settings_save_one+0x48>)
   21f16:	f014 fcdd 	bl	368d4 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   21f1a:	6863      	ldr	r3, [r4, #4]
   21f1c:	4632      	mov	r2, r6
   21f1e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   21f22:	4629      	mov	r1, r5
   21f24:	463b      	mov	r3, r7
   21f26:	4620      	mov	r0, r4
   21f28:	47c0      	blx	r8
   21f2a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   21f2c:	4805      	ldr	r0, [pc, #20]	; (21f44 <settings_save_one+0x48>)
   21f2e:	f014 fda3 	bl	36a78 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   21f32:	4620      	mov	r0, r4
   21f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   21f38:	f06f 0401 	mvn.w	r4, #1
   21f3c:	e7f9      	b.n	21f32 <settings_save_one+0x36>
   21f3e:	bf00      	nop
   21f40:	2001912c 	.word	0x2001912c
   21f44:	20014f90 	.word	0x20014f90

00021f48 <settings_src_register>:
	parent->next = child;
   21f48:	2300      	movs	r3, #0
   21f4a:	6003      	str	r3, [r0, #0]
	return list->tail;
   21f4c:	4b04      	ldr	r3, [pc, #16]	; (21f60 <settings_src_register+0x18>)
   21f4e:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   21f50:	b912      	cbnz	r2, 21f58 <settings_src_register+0x10>
	list->head = node;
   21f52:	e9c3 0000 	strd	r0, r0, [r3]
}
   21f56:	4770      	bx	lr
	parent->next = child;
   21f58:	6010      	str	r0, [r2, #0]
	list->tail = node;
   21f5a:	6058      	str	r0, [r3, #4]
}
   21f5c:	4770      	bx	lr
   21f5e:	bf00      	nop
   21f60:	20019124 	.word	0x20019124

00021f64 <settings_dst_register>:
	settings_save_dst = cs;
   21f64:	4b01      	ldr	r3, [pc, #4]	; (21f6c <settings_dst_register+0x8>)
   21f66:	6018      	str	r0, [r3, #0]
}
   21f68:	4770      	bx	lr
   21f6a:	bf00      	nop
   21f6c:	2001912c 	.word	0x2001912c

00021f70 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   21f70:	2300      	movs	r3, #0
{
   21f72:	b530      	push	{r4, r5, lr}
   21f74:	b085      	sub	sp, #20
   21f76:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   21f78:	e9cd 3302 	strd	r3, r3, [sp, #8]
   21f7c:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   21f7e:	f04f 33ff 	mov.w	r3, #4294967295
   21f82:	f04f 32ff 	mov.w	r2, #4294967295
   21f86:	480b      	ldr	r0, [pc, #44]	; (21fb4 <settings_load_subtree+0x44>)
   21f88:	f014 fca4 	bl	368d4 <z_impl_k_mutex_lock>
	return list->head;
   21f8c:	4b0a      	ldr	r3, [pc, #40]	; (21fb8 <settings_load_subtree+0x48>)
   21f8e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   21f90:	b134      	cbz	r4, 21fa0 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   21f92:	6863      	ldr	r3, [r4, #4]
   21f94:	4620      	mov	r0, r4
   21f96:	681b      	ldr	r3, [r3, #0]
   21f98:	a901      	add	r1, sp, #4
   21f9a:	4798      	blx	r3
	return node->next;
   21f9c:	6824      	ldr	r4, [r4, #0]
   21f9e:	e7f7      	b.n	21f90 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   21fa0:	4628      	mov	r0, r5
   21fa2:	f000 f8ad 	bl	22100 <settings_commit_subtree>
   21fa6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   21fa8:	4802      	ldr	r0, [pc, #8]	; (21fb4 <settings_load_subtree+0x44>)
   21faa:	f014 fd65 	bl	36a78 <z_impl_k_mutex_unlock>
}
   21fae:	4620      	mov	r0, r4
   21fb0:	b005      	add	sp, #20
   21fb2:	bd30      	pop	{r4, r5, pc}
   21fb4:	20014f90 	.word	0x20014f90
   21fb8:	20019124 	.word	0x20019124

00021fbc <settings_store_init>:
	list->head = NULL;
   21fbc:	2200      	movs	r2, #0
   21fbe:	4b02      	ldr	r3, [pc, #8]	; (21fc8 <settings_store_init+0xc>)
	list->tail = NULL;
   21fc0:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   21fc4:	4770      	bx	lr
   21fc6:	bf00      	nop
   21fc8:	20019124 	.word	0x20019124

00021fcc <settings_init>:
	list->head = NULL;
   21fcc:	2200      	movs	r2, #0
   21fce:	4b02      	ldr	r3, [pc, #8]	; (21fd8 <settings_init+0xc>)
	list->tail = NULL;
   21fd0:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   21fd4:	f7ff bff2 	b.w	21fbc <settings_store_init>
   21fd8:	20019130 	.word	0x20019130

00021fdc <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   21fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21fe0:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   21fe2:	460e      	mov	r6, r1
   21fe4:	b109      	cbz	r1, 21fea <settings_parse_and_lookup+0xe>
		*next = NULL;
   21fe6:	2300      	movs	r3, #0
   21fe8:	600b      	str	r3, [r1, #0]
   21fea:	2500      	movs	r5, #0
   21fec:	4c22      	ldr	r4, [pc, #136]	; (22078 <settings_parse_and_lookup+0x9c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   21fee:	f8df 8094 	ldr.w	r8, [pc, #148]	; 22084 <settings_parse_and_lookup+0xa8>
   21ff2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 22088 <settings_parse_and_lookup+0xac>
   21ff6:	4544      	cmp	r4, r8
   21ff8:	d908      	bls.n	2200c <settings_parse_and_lookup+0x30>
   21ffa:	4649      	mov	r1, r9
   21ffc:	481f      	ldr	r0, [pc, #124]	; (2207c <settings_parse_and_lookup+0xa0>)
   21ffe:	2294      	movs	r2, #148	; 0x94
   22000:	f01a fd44 	bl	3ca8c <assert_print>
   22004:	2194      	movs	r1, #148	; 0x94
   22006:	4648      	mov	r0, r9
   22008:	f01a fd39 	bl	3ca7e <assert_post_action>
   2200c:	4544      	cmp	r4, r8
   2200e:	d310      	bcc.n	22032 <settings_parse_and_lookup+0x56>
	return list->head;
   22010:	4b1b      	ldr	r3, [pc, #108]	; (22080 <settings_parse_and_lookup+0xa4>)
   22012:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   22014:	b35c      	cbz	r4, 2206e <settings_parse_and_lookup+0x92>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   22016:	4638      	mov	r0, r7
   22018:	aa01      	add	r2, sp, #4
   2201a:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2201e:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   22020:	f01b faa8 	bl	3d574 <settings_name_steq>
   22024:	b308      	cbz	r0, 2206a <settings_parse_and_lookup+0x8e>
			continue;
		}
		if (!bestmatch) {
   22026:	b9cd      	cbnz	r5, 2205c <settings_parse_and_lookup+0x80>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   22028:	b10e      	cbz	r6, 2202e <settings_parse_and_lookup+0x52>
				*next = tmpnext;
   2202a:	9b01      	ldr	r3, [sp, #4]
   2202c:	6033      	str	r3, [r6, #0]
   2202e:	4625      	mov	r5, r4
   22030:	e01b      	b.n	2206a <settings_parse_and_lookup+0x8e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   22032:	4638      	mov	r0, r7
   22034:	6821      	ldr	r1, [r4, #0]
   22036:	aa01      	add	r2, sp, #4
   22038:	f01b fa9c 	bl	3d574 <settings_name_steq>
   2203c:	b160      	cbz	r0, 22058 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   2203e:	b925      	cbnz	r5, 2204a <settings_parse_and_lookup+0x6e>
			if (next) {
   22040:	b10e      	cbz	r6, 22046 <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   22042:	9b01      	ldr	r3, [sp, #4]
   22044:	6033      	str	r3, [r6, #0]
   22046:	4625      	mov	r5, r4
   22048:	e006      	b.n	22058 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2204a:	2200      	movs	r2, #0
   2204c:	6829      	ldr	r1, [r5, #0]
   2204e:	6820      	ldr	r0, [r4, #0]
   22050:	f01b fa90 	bl	3d574 <settings_name_steq>
   22054:	2800      	cmp	r0, #0
   22056:	d1f3      	bne.n	22040 <settings_parse_and_lookup+0x64>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   22058:	3414      	adds	r4, #20
   2205a:	e7cc      	b.n	21ff6 <settings_parse_and_lookup+0x1a>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2205c:	2200      	movs	r2, #0
   2205e:	6829      	ldr	r1, [r5, #0]
   22060:	6820      	ldr	r0, [r4, #0]
   22062:	f01b fa87 	bl	3d574 <settings_name_steq>
   22066:	2800      	cmp	r0, #0
   22068:	d1de      	bne.n	22028 <settings_parse_and_lookup+0x4c>
	return node->next;
   2206a:	6964      	ldr	r4, [r4, #20]
   2206c:	e7d2      	b.n	22014 <settings_parse_and_lookup+0x38>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   2206e:	4628      	mov	r0, r5
   22070:	b003      	add	sp, #12
   22072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22076:	bf00      	nop
   22078:	00042600 	.word	0x00042600
   2207c:	0004409e 	.word	0x0004409e
   22080:	20019130 	.word	0x20019130
   22084:	0004263c 	.word	0x0004263c
   22088:	0004439d 	.word	0x0004439d

0002208c <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   2208c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22090:	b086      	sub	sp, #24
   22092:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   22094:	4604      	mov	r4, r0
   22096:	460d      	mov	r5, r1
   22098:	4616      	mov	r6, r2
	int rc;
	const char *name_key = name;
   2209a:	9005      	str	r0, [sp, #20]

	if (load_arg && load_arg->subtree &&
   2209c:	b1bf      	cbz	r7, 220ce <settings_call_set_handler+0x42>
   2209e:	6839      	ldr	r1, [r7, #0]
   220a0:	b181      	cbz	r1, 220c4 <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   220a2:	aa05      	add	r2, sp, #20
   220a4:	9303      	str	r3, [sp, #12]
   220a6:	f01b fa65 	bl	3d574 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   220aa:	9b03      	ldr	r3, [sp, #12]
   220ac:	b950      	cbnz	r0, 220c4 <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   220ae:	2000      	movs	r0, #0
   220b0:	e005      	b.n	220be <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   220b2:	68ba      	ldr	r2, [r7, #8]
   220b4:	4629      	mov	r1, r5
   220b6:	9200      	str	r2, [sp, #0]
   220b8:	9805      	ldr	r0, [sp, #20]
   220ba:	4632      	mov	r2, r6
   220bc:	47c0      	blx	r8
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   220be:	b006      	add	sp, #24
   220c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (load_arg && load_arg->cb) {
   220c4:	f8d7 8004 	ldr.w	r8, [r7, #4]
   220c8:	f1b8 0f00 	cmp.w	r8, #0
   220cc:	d1f1      	bne.n	220b2 <settings_call_set_handler+0x26>
		ch = settings_parse_and_lookup(name, &name_key);
   220ce:	4620      	mov	r0, r4
   220d0:	a905      	add	r1, sp, #20
   220d2:	9303      	str	r3, [sp, #12]
   220d4:	f7ff ff82 	bl	21fdc <settings_parse_and_lookup>
		if (!ch) {
   220d8:	2800      	cmp	r0, #0
   220da:	d0e8      	beq.n	220ae <settings_call_set_handler+0x22>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   220dc:	6887      	ldr	r7, [r0, #8]
   220de:	9b03      	ldr	r3, [sp, #12]
   220e0:	4632      	mov	r2, r6
   220e2:	4629      	mov	r1, r5
   220e4:	9805      	ldr	r0, [sp, #20]
   220e6:	47b8      	blx	r7
		if (rc != 0) {
   220e8:	4603      	mov	r3, r0
   220ea:	2800      	cmp	r0, #0
   220ec:	d0df      	beq.n	220ae <settings_call_set_handler+0x22>
			LOG_ERR("set-value failure. key: %s error(%d)",
   220ee:	4622      	mov	r2, r4
   220f0:	2145      	movs	r1, #69	; 0x45
   220f2:	4802      	ldr	r0, [pc, #8]	; (220fc <settings_call_set_handler+0x70>)
   220f4:	f01a fd04 	bl	3cb00 <z_log_minimal_printk>
   220f8:	e7d9      	b.n	220ae <settings_call_set_handler+0x22>
   220fa:	bf00      	nop
   220fc:	000443cf 	.word	0x000443cf

00022100 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   22100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22104:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
   22106:	2500      	movs	r5, #0

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   22108:	4c1d      	ldr	r4, [pc, #116]	; (22180 <settings_commit_subtree+0x80>)
   2210a:	4f1e      	ldr	r7, [pc, #120]	; (22184 <settings_commit_subtree+0x84>)
   2210c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 22190 <settings_commit_subtree+0x90>
   22110:	42bc      	cmp	r4, r7
   22112:	d908      	bls.n	22126 <settings_commit_subtree+0x26>
   22114:	4641      	mov	r1, r8
   22116:	481c      	ldr	r0, [pc, #112]	; (22188 <settings_commit_subtree+0x88>)
   22118:	22f4      	movs	r2, #244	; 0xf4
   2211a:	f01a fcb7 	bl	3ca8c <assert_print>
   2211e:	21f4      	movs	r1, #244	; 0xf4
   22120:	4640      	mov	r0, r8
   22122:	f01a fcac 	bl	3ca7e <assert_post_action>
   22126:	42bc      	cmp	r4, r7
   22128:	d308      	bcc.n	2213c <settings_commit_subtree+0x3c>
	return list->head;
   2212a:	4b18      	ldr	r3, [pc, #96]	; (2218c <settings_commit_subtree+0x8c>)
   2212c:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2212e:	b324      	cbz	r4, 2217a <settings_commit_subtree+0x7a>
   22130:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   22132:	b9ae      	cbnz	r6, 22160 <settings_commit_subtree+0x60>
			continue;
		}
		if (ch->h_commit) {
   22134:	68e3      	ldr	r3, [r4, #12]
   22136:	b9db      	cbnz	r3, 22170 <settings_commit_subtree+0x70>
	return node->next;
   22138:	6964      	ldr	r4, [r4, #20]
   2213a:	e7f8      	b.n	2212e <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2213c:	b91e      	cbnz	r6, 22146 <settings_commit_subtree+0x46>
		if (ch->h_commit) {
   2213e:	68e3      	ldr	r3, [r4, #12]
   22140:	b94b      	cbnz	r3, 22156 <settings_commit_subtree+0x56>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   22142:	3414      	adds	r4, #20
   22144:	e7e4      	b.n	22110 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   22146:	2200      	movs	r2, #0
   22148:	4631      	mov	r1, r6
   2214a:	6820      	ldr	r0, [r4, #0]
   2214c:	f01b fa12 	bl	3d574 <settings_name_steq>
   22150:	2800      	cmp	r0, #0
   22152:	d1f4      	bne.n	2213e <settings_commit_subtree+0x3e>
   22154:	e7f5      	b.n	22142 <settings_commit_subtree+0x42>
			rc2 = ch->h_commit();
   22156:	4798      	blx	r3
				rc = rc2;
   22158:	2d00      	cmp	r5, #0
   2215a:	bf08      	it	eq
   2215c:	4605      	moveq	r5, r0
   2215e:	e7f0      	b.n	22142 <settings_commit_subtree+0x42>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   22160:	2200      	movs	r2, #0
   22162:	4631      	mov	r1, r6
   22164:	6820      	ldr	r0, [r4, #0]
   22166:	f01b fa05 	bl	3d574 <settings_name_steq>
   2216a:	2800      	cmp	r0, #0
   2216c:	d1e2      	bne.n	22134 <settings_commit_subtree+0x34>
   2216e:	e7e3      	b.n	22138 <settings_commit_subtree+0x38>
			rc2 = ch->h_commit();
   22170:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   22172:	2d00      	cmp	r5, #0
   22174:	bf08      	it	eq
   22176:	4605      	moveq	r5, r0
   22178:	e7de      	b.n	22138 <settings_commit_subtree+0x38>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   2217a:	4628      	mov	r0, r5
   2217c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22180:	00042600 	.word	0x00042600
   22184:	0004263c 	.word	0x0004263c
   22188:	0004409e 	.word	0x0004409e
   2218c:	20019130 	.word	0x20019130
   22190:	0004439d 	.word	0x0004439d

00022194 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   22194:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   22196:	4c06      	ldr	r4, [pc, #24]	; (221b0 <settings_subsys_init+0x1c>)
   22198:	7823      	ldrb	r3, [r4, #0]
   2219a:	b93b      	cbnz	r3, 221ac <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   2219c:	f7ff ff16 	bl	21fcc <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   221a0:	f000 fa94 	bl	226cc <settings_backend_init>

	if (!err) {
   221a4:	b908      	cbnz	r0, 221aa <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   221a6:	2301      	movs	r3, #1
   221a8:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   221aa:	bd10      	pop	{r4, pc}
		return 0;
   221ac:	2000      	movs	r0, #0
   221ae:	e7fc      	b.n	221aa <settings_subsys_init+0x16>
   221b0:	2001a5a2 	.word	0x2001a5a2

000221b4 <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
   221b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	uint8_t rbs = settings_io_cb.rwbs;
   221b8:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2226c <settings_line_raw_read_until+0xb8>
{
   221bc:	b08b      	sub	sp, #44	; 0x2c
   221be:	9302      	str	r3, [sp, #8]
	uint8_t rbs = settings_io_cb.rwbs;
   221c0:	f89a 300c 	ldrb.w	r3, [sl, #12]
{
   221c4:	4606      	mov	r6, r0
   221c6:	4688      	mov	r8, r1
	off_t off;
	int rc = -EINVAL;

	if (len_req == 0) {
   221c8:	4615      	mov	r5, r2
	uint8_t rbs = settings_io_cb.rwbs;
   221ca:	9301      	str	r3, [sp, #4]
	if (len_req == 0) {
   221cc:	2a00      	cmp	r2, #0
   221ce:	d046      	beq.n	2225e <settings_line_raw_read_until+0xaa>
   221d0:	4617      	mov	r7, r2
	rem_size = len_req;

	while (rem_size) {
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
   221d2:	2310      	movs	r3, #16
   221d4:	9305      	str	r3, [sp, #20]
		off = seek / rbs * rbs;
   221d6:	9b01      	ldr	r3, [sp, #4]
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   221d8:	f8da 4000 	ldr.w	r4, [sl]
		off = seek / rbs * rbs;
   221dc:	fb96 fbf3 	sdiv	fp, r6, r3
   221e0:	fb03 fb0b 	mul.w	fp, r3, fp
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   221e4:	9815      	ldr	r0, [sp, #84]	; 0x54
   221e6:	4659      	mov	r1, fp
   221e8:	ab05      	add	r3, sp, #20
   221ea:	aa06      	add	r2, sp, #24
   221ec:	47a0      	blx	r4
		if (rc) {
   221ee:	4604      	mov	r4, r0
   221f0:	2800      	cmp	r0, #0
   221f2:	d137      	bne.n	22264 <settings_line_raw_read_until+0xb0>
			return -EIO;
		}

		off = seek - off;
		len = read_size - off;
   221f4:	9a05      	ldr	r2, [sp, #20]
   221f6:	eba6 0b0b 	sub.w	fp, r6, fp
   221fa:	eba2 020b 	sub.w	r2, r2, fp
		len = MIN(rem_size, len);
   221fe:	42ba      	cmp	r2, r7
   22200:	bf28      	it	cs
   22202:	463a      	movcs	r2, r7

		if (until_char != NULL) {
			char *pend;
			pend = memchr(&temp_buf[off], *until_char, len);
   22204:	ab06      	add	r3, sp, #24
   22206:	449b      	add	fp, r3
		if (until_char != NULL) {
   22208:	9b14      	ldr	r3, [sp, #80]	; 0x50
		len = MIN(rem_size, len);
   2220a:	4691      	mov	r9, r2
		if (until_char != NULL) {
   2220c:	b31b      	cbz	r3, 22256 <settings_line_raw_read_until+0xa2>
			pend = memchr(&temp_buf[off], *until_char, len);
   2220e:	4658      	mov	r0, fp
   22210:	7819      	ldrb	r1, [r3, #0]
   22212:	f01f f8d1 	bl	413b8 <memchr>
			if (pend != NULL) {
   22216:	b300      	cbz	r0, 2225a <settings_line_raw_read_until+0xa6>
				len = pend - &temp_buf[off];
				rc = 1; /* will cause loop expiration */
   22218:	2301      	movs	r3, #1
				len = pend - &temp_buf[off];
   2221a:	eba0 090b 	sub.w	r9, r0, fp
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2221e:	4659      	mov	r1, fp
   22220:	464a      	mov	r2, r9
   22222:	4640      	mov	r0, r8
   22224:	9303      	str	r3, [sp, #12]
   22226:	f01f f8e5 	bl	413f4 <memcpy>

		memcpy(out, &temp_buf[off], len);

		rem_size -= len;

		if (exp_size > read_size || rc) {
   2222a:	9905      	ldr	r1, [sp, #20]
   2222c:	9b03      	ldr	r3, [sp, #12]
   2222e:	290f      	cmp	r1, #15
		rem_size -= len;
   22230:	eba7 0709 	sub.w	r7, r7, r9
		if (exp_size > read_size || rc) {
   22234:	d904      	bls.n	22240 <settings_line_raw_read_until+0x8c>
   22236:	b91b      	cbnz	r3, 22240 <settings_line_raw_read_until+0x8c>
			break;
		}

		out += len;
   22238:	44c8      	add	r8, r9
		seek += len;
   2223a:	444e      	add	r6, r9
	while (rem_size) {
   2223c:	2f00      	cmp	r7, #0
   2223e:	d1c8      	bne.n	221d2 <settings_line_raw_read_until+0x1e>
	}

	*len_read = len_req - rem_size;
   22240:	9a02      	ldr	r2, [sp, #8]
   22242:	1bed      	subs	r5, r5, r7
   22244:	6015      	str	r5, [r2, #0]

	if (until_char != NULL) {
   22246:	9a14      	ldr	r2, [sp, #80]	; 0x50
   22248:	b10a      	cbz	r2, 2224e <settings_line_raw_read_until+0x9a>
		return (rc) ? 0 : 1;
   2224a:	f083 0401 	eor.w	r4, r3, #1
	}

	return 0;
}
   2224e:	4620      	mov	r0, r4
   22250:	b00b      	add	sp, #44	; 0x2c
   22252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   22256:	9b14      	ldr	r3, [sp, #80]	; 0x50
   22258:	e7e1      	b.n	2221e <settings_line_raw_read_until+0x6a>
   2225a:	4623      	mov	r3, r4
   2225c:	e7df      	b.n	2221e <settings_line_raw_read_until+0x6a>
		return -EINVAL;
   2225e:	f06f 0415 	mvn.w	r4, #21
   22262:	e7f4      	b.n	2224e <settings_line_raw_read_until+0x9a>
			return -EIO;
   22264:	f06f 0404 	mvn.w	r4, #4
   22268:	e7f1      	b.n	2224e <settings_line_raw_read_until+0x9a>
   2226a:	bf00      	nop
   2226c:	20019138 	.word	0x20019138

00022270 <settings_line_write>:
{
   22270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t wbs = settings_io_cb.rwbs;
   22274:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 22334 <settings_line_write+0xc4>
{
   22278:	b087      	sub	sp, #28
	uint8_t wbs = settings_io_cb.rwbs;
   2227a:	f899 800c 	ldrb.w	r8, [r9, #12]
{
   2227e:	4682      	mov	sl, r0
   22280:	468b      	mov	fp, r1
   22282:	4617      	mov	r7, r2
   22284:	9301      	str	r3, [sp, #4]
	rem = strlen(name);
   22286:	f7fa ffdc 	bl	1d242 <strlen>
	w_size = rem - rem % wbs;
   2228a:	fbb0 f4f8 	udiv	r4, r0, r8
   2228e:	fb08 0414 	mls	r4, r8, r4, r0
   22292:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
   22294:	462b      	mov	r3, r5
   22296:	f8d9 6004 	ldr.w	r6, [r9, #4]
   2229a:	4652      	mov	r2, sl
   2229c:	9901      	ldr	r1, [sp, #4]
   2229e:	9810      	ldr	r0, [sp, #64]	; 0x40
   222a0:	47b0      	blx	r6
	w_loc += w_size;
   222a2:	9b01      	ldr	r3, [sp, #4]
   222a4:	442b      	add	r3, r5
   222a6:	461e      	mov	r6, r3
	if (rem) {
   222a8:	b134      	cbz	r4, 222b8 <settings_line_write+0x48>
		memcpy(w_buf, name, rem);
   222aa:	2310      	movs	r3, #16
   222ac:	4622      	mov	r2, r4
   222ae:	eb0a 0105 	add.w	r1, sl, r5
   222b2:	a802      	add	r0, sp, #8
   222b4:	f01f f8ab 	bl	4140e <__memcpy_chk>
	w_buf[rem] = '=';
   222b8:	223d      	movs	r2, #61	; 0x3d
   222ba:	ab06      	add	r3, sp, #24
   222bc:	4423      	add	r3, r4
   222be:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
   222c2:	f104 0a01 	add.w	sl, r4, #1
		while (w_size < sizeof(w_buf)) {
   222c6:	f1ba 0f0f 	cmp.w	sl, #15
   222ca:	d90b      	bls.n	222e4 <settings_line_write+0x74>
   222cc:	2400      	movs	r4, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
   222ce:	4653      	mov	r3, sl
   222d0:	4631      	mov	r1, r6
   222d2:	f8d9 5004 	ldr.w	r5, [r9, #4]
   222d6:	9810      	ldr	r0, [sp, #64]	; 0x40
   222d8:	aa02      	add	r2, sp, #8
   222da:	47a8      	blx	r5
		if (rc) {
   222dc:	bb20      	cbnz	r0, 22328 <settings_line_write+0xb8>
		if (done) {
   222de:	bb2c      	cbnz	r4, 2232c <settings_line_write+0xbc>
		w_loc += w_size;
   222e0:	4456      	add	r6, sl
		w_size = 0;
   222e2:	46a2      	mov	sl, r4
			if (rem) {
   222e4:	b17f      	cbz	r7, 22306 <settings_line_write+0x96>
				add = MIN(rem, sizeof(w_buf) - w_size);
   222e6:	f1ca 0410 	rsb	r4, sl, #16
   222ea:	42bc      	cmp	r4, r7
   222ec:	bf28      	it	cs
   222ee:	463c      	movcs	r4, r7
   222f0:	ab02      	add	r3, sp, #8
   222f2:	4659      	mov	r1, fp
   222f4:	eb03 000a 	add.w	r0, r3, sl
   222f8:	4622      	mov	r2, r4
   222fa:	f01f f87b 	bl	413f4 <memcpy>
				value += add;
   222fe:	44a3      	add	fp, r4
				rem -= add;
   22300:	1b3f      	subs	r7, r7, r4
				w_size += add;
   22302:	44a2      	add	sl, r4
   22304:	e7df      	b.n	222c6 <settings_line_write+0x56>
				add = (w_size) % wbs;
   22306:	fbba f4f8 	udiv	r4, sl, r8
   2230a:	fb08 a414 	mls	r4, r8, r4, sl
				if (add) {
   2230e:	b14c      	cbz	r4, 22324 <settings_line_write+0xb4>
					add = wbs - add;
   22310:	eba8 0404 	sub.w	r4, r8, r4
__ssp_bos_icheck3(memset, void *, int)
   22314:	ab02      	add	r3, sp, #8
   22316:	eb03 000a 	add.w	r0, r3, sl
   2231a:	4622      	mov	r2, r4
   2231c:	4639      	mov	r1, r7
   2231e:	f01f f889 	bl	41434 <memset>
					w_size += add;
   22322:	44a2      	add	sl, r4
				done = true;
   22324:	2401      	movs	r4, #1
   22326:	e7d2      	b.n	222ce <settings_line_write+0x5e>
			return -EIO;
   22328:	f06f 0004 	mvn.w	r0, #4
}
   2232c:	b007      	add	sp, #28
   2232e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22332:	bf00      	nop
   22334:	20019138 	.word	0x20019138

00022338 <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
   22338:	4b03      	ldr	r3, [pc, #12]	; (22348 <settings_line_val_get_len+0x10>)
{
   2233a:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   2233c:	689b      	ldr	r3, [r3, #8]
{
   2233e:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   22340:	4608      	mov	r0, r1
   22342:	4798      	blx	r3

	return len - val_off;
}
   22344:	1b00      	subs	r0, r0, r4
   22346:	bd10      	pop	{r4, pc}
   22348:	20019138 	.word	0x20019138

0002234c <settings_line_entry_copy>:
}


int settings_line_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			     off_t src_off, size_t len)
{
   2234c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22350:	4680      	mov	r8, r0
   22352:	468a      	mov	sl, r1
   22354:	4691      	mov	r9, r2
   22356:	461d      	mov	r5, r3
	int rc = -EINVAL;
   22358:	f06f 0015 	mvn.w	r0, #21
{
   2235c:	b086      	sub	sp, #24
   2235e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   22360:	4f13      	ldr	r7, [pc, #76]	; (223b0 <settings_line_entry_copy+0x64>)
	while (len) {
   22362:	b916      	cbnz	r6, 2236a <settings_line_entry_copy+0x1e>
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
   22364:	b006      	add	sp, #24
   22366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
   2236a:	2e10      	cmp	r6, #16
   2236c:	4633      	mov	r3, r6
   2236e:	bf28      	it	cs
   22370:	2310      	movcs	r3, #16
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   22372:	4629      	mov	r1, r5
		chunk_size = MIN(len, sizeof(buf));
   22374:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   22376:	4648      	mov	r0, r9
   22378:	683c      	ldr	r4, [r7, #0]
   2237a:	ab01      	add	r3, sp, #4
   2237c:	aa02      	add	r2, sp, #8
   2237e:	47a0      	blx	r4
		if (rc) {
   22380:	2800      	cmp	r0, #0
   22382:	d1ef      	bne.n	22364 <settings_line_entry_copy+0x18>
		size_t write_size = chunk_size;
   22384:	9b01      	ldr	r3, [sp, #4]
		if (chunk_size % settings_io_cb.rwbs) {
   22386:	7b39      	ldrb	r1, [r7, #12]
   22388:	fbb3 f2f1 	udiv	r2, r3, r1
   2238c:	fb01 3212 	mls	r2, r1, r2, r3
   22390:	b10a      	cbz	r2, 22396 <settings_line_entry_copy+0x4a>
			write_size += settings_io_cb.rwbs -
   22392:	440b      	add	r3, r1
   22394:	1a9b      	subs	r3, r3, r2
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, write_size);
   22396:	4651      	mov	r1, sl
   22398:	4640      	mov	r0, r8
   2239a:	687c      	ldr	r4, [r7, #4]
   2239c:	aa02      	add	r2, sp, #8
   2239e:	47a0      	blx	r4
		if (rc) {
   223a0:	2800      	cmp	r0, #0
   223a2:	d1df      	bne.n	22364 <settings_line_entry_copy+0x18>
		src_off += chunk_size;
   223a4:	9b01      	ldr	r3, [sp, #4]
   223a6:	441d      	add	r5, r3
		dst_off += chunk_size;
   223a8:	449a      	add	sl, r3
		len -= chunk_size;
   223aa:	1af6      	subs	r6, r6, r3
   223ac:	e7d9      	b.n	22362 <settings_line_entry_copy+0x16>
   223ae:	bf00      	nop
   223b0:	20019138 	.word	0x20019138

000223b4 <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  uint8_t io_rwbs)
{
   223b4:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
   223b6:	4c03      	ldr	r4, [pc, #12]	; (223c4 <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
   223b8:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
   223bc:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
   223be:	7323      	strb	r3, [r4, #12]
}
   223c0:	bd10      	pop	{r4, pc}
   223c2:	bf00      	nop
   223c4:	20019138 	.word	0x20019138

000223c8 <settings_line_load_cb>:
	return -1;
}

int settings_line_load_cb(const char *name, void *val_read_cb_ctx, off_t off,
			  void *cb_arg)
{
   223c8:	b530      	push	{r4, r5, lr}
   223ca:	4604      	mov	r4, r0
   223cc:	b085      	sub	sp, #20
   223ce:	4610      	mov	r0, r2
   223d0:	461d      	mov	r5, r3
	size_t len;
	struct settings_line_read_value_cb_ctx value_ctx;
	struct settings_load_arg *arg = cb_arg;
	value_ctx.read_cb_ctx = val_read_cb_ctx;
	value_ctx.off = off;
   223d2:	e9cd 1202 	strd	r1, r2, [sp, #8]
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   223d6:	f7ff ffaf 	bl	22338 <settings_line_val_get_len>

	return settings_call_set_handler(name, len, settings_line_read_cb,
   223da:	4a04      	ldr	r2, [pc, #16]	; (223ec <settings_line_load_cb+0x24>)
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   223dc:	4601      	mov	r1, r0
	return settings_call_set_handler(name, len, settings_line_read_cb,
   223de:	9500      	str	r5, [sp, #0]
   223e0:	4620      	mov	r0, r4
   223e2:	ab02      	add	r3, sp, #8
   223e4:	f7ff fe52 	bl	2208c <settings_call_set_handler>
					 &value_ctx, arg);
}
   223e8:	b005      	add	sp, #20
   223ea:	bd30      	pop	{r4, r5, pc}
   223ec:	0003d5d5 	.word	0x0003d5d5

000223f0 <settings_fcb_load_priv>:

static int settings_fcb_load_priv(struct settings_store *cs,
				  line_load_cb cb,
				  void *cb_arg,
				  bool filter_duplicates)
{
   223f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223f4:	4606      	mov	r6, r0
   223f6:	b0b3      	sub	sp, #204	; 0xcc
   223f8:	460f      	mov	r7, r1
   223fa:	4690      	mov	r8, r2
	struct settings_fcb *cf = (struct settings_fcb *)cs;
	struct fcb_entry_ctx entry_ctx = {
   223fc:	2100      	movs	r1, #0
   223fe:	2210      	movs	r2, #16
   22400:	a802      	add	r0, sp, #8
{
   22402:	4699      	mov	r9, r3
	struct fcb_entry_ctx entry_ctx = {
   22404:	f01f f816 	bl	41434 <memset>
   22408:	6c33      	ldr	r3, [r6, #64]	; 0x40
			LOG_ERR("failed to load line");
   2240a:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 224b4 <settings_fcb_load_priv+0xc4>
	struct fcb_entry_ctx entry_ctx = {
   2240e:	9306      	str	r3, [sp, #24]
		{.fe_sector = NULL, .fe_elem_off = 0},
		.fap = cf->cf_fcb.fap
	};
	int rc;

	while ((rc = fcb_getnext(&cf->cf_fcb, &entry_ctx.loc)) == 0) {
   22410:	f106 0a08 	add.w	sl, r6, #8
   22414:	4650      	mov	r0, sl
   22416:	a902      	add	r1, sp, #8
   22418:	f01a fe1c 	bl	3d054 <fcb_getnext>
   2241c:	b118      	cbz	r0, 22426 <settings_fcb_load_priv+0x36>
	}
	if (rc == -ENOTSUP) {
		rc = 0;
	}
	return 0;
}
   2241e:	2000      	movs	r0, #0
   22420:	b033      	add	sp, #204	; 0xcc
   22422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_line_name_read(name, sizeof(name), &name_len,
   22426:	466a      	mov	r2, sp
   22428:	214a      	movs	r1, #74	; 0x4a
   2242a:	ab02      	add	r3, sp, #8
   2242c:	a80c      	add	r0, sp, #48	; 0x30
   2242e:	f01b f8e0 	bl	3d5f2 <settings_line_name_read>
		if (rc) {
   22432:	b128      	cbz	r0, 22440 <settings_fcb_load_priv+0x50>
			LOG_ERR("Failed to load line name: %d", rc);
   22434:	4602      	mov	r2, r0
   22436:	2145      	movs	r1, #69	; 0x45
   22438:	481d      	ldr	r0, [pc, #116]	; (224b0 <settings_fcb_load_priv+0xc0>)
   2243a:	f01a fb61 	bl	3cb00 <z_log_minimal_printk>
			continue;
   2243e:	e7e7      	b.n	22410 <settings_fcb_load_priv+0x20>
		name[name_len] = '\0';
   22440:	9b00      	ldr	r3, [sp, #0]
   22442:	aa32      	add	r2, sp, #200	; 0xc8
   22444:	441a      	add	r2, r3
   22446:	f802 0c98 	strb.w	r0, [r2, #-152]
		if (filter_duplicates &&
   2244a:	f1b9 0f00 	cmp.w	r9, #0
   2244e:	d00f      	beq.n	22470 <settings_fcb_load_priv+0x80>
	if (off >= entry_ctx->loc.fe_data_len) {
   22450:	f8bd 2014 	ldrh.w	r2, [sp, #20]
		    (!read_entry_len(&entry_ctx, name_len+1) ||
   22454:	3301      	adds	r3, #1
	if (off >= entry_ctx->loc.fe_data_len) {
   22456:	429a      	cmp	r2, r3
   22458:	ddda      	ble.n	22410 <settings_fcb_load_priv+0x20>
	struct fcb_entry_ctx entry2_ctx = *entry_ctx;
   2245a:	ac07      	add	r4, sp, #28
   2245c:	ad02      	add	r5, sp, #8
   2245e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   22460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   22462:	682b      	ldr	r3, [r5, #0]
   22464:	6023      	str	r3, [r4, #0]
	while (fcb_getnext(&cf->cf_fcb, &entry2_ctx.loc) == 0) {
   22466:	4650      	mov	r0, sl
   22468:	a907      	add	r1, sp, #28
   2246a:	f01a fdf3 	bl	3d054 <fcb_getnext>
   2246e:	b130      	cbz	r0, 2247e <settings_fcb_load_priv+0x8e>
			cb(name, &entry_ctx, name_len + 1, cb_arg);
   22470:	9a00      	ldr	r2, [sp, #0]
   22472:	4643      	mov	r3, r8
   22474:	3201      	adds	r2, #1
   22476:	a902      	add	r1, sp, #8
   22478:	a80c      	add	r0, sp, #48	; 0x30
   2247a:	47b8      	blx	r7
   2247c:	e7c8      	b.n	22410 <settings_fcb_load_priv+0x20>
		if (settings_line_name_read(name2, sizeof(name2), &name2_len,
   2247e:	214a      	movs	r1, #74	; 0x4a
   22480:	ab07      	add	r3, sp, #28
   22482:	aa01      	add	r2, sp, #4
   22484:	a81f      	add	r0, sp, #124	; 0x7c
   22486:	f01b f8b4 	bl	3d5f2 <settings_line_name_read>
   2248a:	b120      	cbz	r0, 22496 <settings_fcb_load_priv+0xa6>
			LOG_ERR("failed to load line");
   2248c:	2145      	movs	r1, #69	; 0x45
   2248e:	4658      	mov	r0, fp
   22490:	f01a fb36 	bl	3cb00 <z_log_minimal_printk>
			continue;
   22494:	e7e7      	b.n	22466 <settings_fcb_load_priv+0x76>
		name2[name2_len] = '\0';
   22496:	9b01      	ldr	r3, [sp, #4]
   22498:	aa32      	add	r2, sp, #200	; 0xc8
   2249a:	4413      	add	r3, r2
   2249c:	f803 0c4c 	strb.w	r0, [r3, #-76]
		if (!strcmp(name, name2)) {
   224a0:	a91f      	add	r1, sp, #124	; 0x7c
   224a2:	a80c      	add	r0, sp, #48	; 0x30
   224a4:	f7fa fec3 	bl	1d22e <strcmp>
   224a8:	2800      	cmp	r0, #0
   224aa:	d1dc      	bne.n	22466 <settings_fcb_load_priv+0x76>
   224ac:	e7b0      	b.n	22410 <settings_fcb_load_priv+0x20>
   224ae:	bf00      	nop
   224b0:	00044402 	.word	0x00044402
   224b4:	00044424 	.word	0x00044424

000224b8 <settings_fcb_load>:

static int settings_fcb_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   224b8:	460a      	mov	r2, r1
	return settings_fcb_load_priv(
   224ba:	2301      	movs	r3, #1
   224bc:	4901      	ldr	r1, [pc, #4]	; (224c4 <settings_fcb_load+0xc>)
   224be:	f7ff bf97 	b.w	223f0 <settings_fcb_load_priv>
   224c2:	bf00      	nop
   224c4:	000223c9 	.word	0x000223c9

000224c8 <settings_fcb_save>:
	return rc;
}

static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
   224c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224cc:	4605      	mov	r5, r0
   224ce:	460f      	mov	r7, r1
   224d0:	4691      	mov	r9, r2
	struct settings_line_dup_check_arg cdca;

	if (val_len > 0 && value == NULL) {
   224d2:	4698      	mov	r8, r3
{
   224d4:	b0bf      	sub	sp, #252	; 0xfc
	if (val_len > 0 && value == NULL) {
   224d6:	b103      	cbz	r3, 224da <settings_fcb_save+0x12>
   224d8:	b17a      	cbz	r2, 224fa <settings_fcb_save+0x32>
	/*
	 * Check if we're writing the same value again.
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
   224da:	2400      	movs	r4, #0
	cdca.val_len = val_len;
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   224dc:	4628      	mov	r0, r5
   224de:	4623      	mov	r3, r4
   224e0:	495b      	ldr	r1, [pc, #364]	; (22650 <settings_fcb_save+0x188>)
   224e2:	aa05      	add	r2, sp, #20
	cdca.val = (char *)value;
   224e4:	e9cd 7905 	strd	r7, r9, [sp, #20]
	cdca.val_len = val_len;
   224e8:	e9cd 8407 	strd	r8, r4, [sp, #28]
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   224ec:	f7ff ff80 	bl	223f0 <settings_fcb_load_priv>
	if (cdca.is_dup == 1) {
   224f0:	9b08      	ldr	r3, [sp, #32]
   224f2:	2b01      	cmp	r3, #1
   224f4:	f000 80a7 	beq.w	22646 <settings_fcb_save+0x17e>
	if (!name) {
   224f8:	b917      	cbnz	r7, 22500 <settings_fcb_save+0x38>
		return -EINVAL;
   224fa:	f06f 0415 	mvn.w	r4, #21
   224fe:	e0a2      	b.n	22646 <settings_fcb_save+0x17e>
	len = settings_line_len_calc(name, val_len);
   22500:	4641      	mov	r1, r8
   22502:	4638      	mov	r0, r7
   22504:	f01b f856 	bl	3d5b4 <settings_line_len_calc>
   22508:	4683      	mov	fp, r0
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   2250a:	7b6b      	ldrb	r3, [r5, #13]
   2250c:	429c      	cmp	r4, r3
   2250e:	daf4      	bge.n	224fa <settings_fcb_save+0x32>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   22510:	f105 0608 	add.w	r6, r5, #8
   22514:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
   22518:	4652      	mov	r2, sl
   2251a:	4630      	mov	r0, r6
   2251c:	fa1f f18b 	uxth.w	r1, fp
   22520:	f7ff f896 	bl	21650 <fcb_append>
		if (rc != -ENOSPC) {
   22524:	f110 0f1c 	cmn.w	r0, #28
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   22528:	4603      	mov	r3, r0
		if (rc != -ENOSPC) {
   2252a:	d176      	bne.n	2261a <settings_fcb_save+0x152>
		if (i < (cf->cf_fcb.f_sector_cnt - 1)) {
   2252c:	7b6b      	ldrb	r3, [r5, #13]
   2252e:	3b01      	subs	r3, #1
   22530:	42a3      	cmp	r3, r4
   22532:	dd1b      	ble.n	2256c <settings_fcb_save+0xa4>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
   22534:	4630      	mov	r0, r6
   22536:	f01a fafa 	bl	3cb2e <fcb_append_to_scratch>
	if (rc) {
   2253a:	4682      	mov	sl, r0
   2253c:	b9b0      	cbnz	r0, 2256c <settings_fcb_save+0xa4>
	rbs = flash_area_align(cf->cf_fcb.fap);
   2253e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   22540:	f01a ff9c 	bl	3d47c <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
   22544:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	loc1.loc.fe_elem_off = 0U;
   22546:	e9cd aa0e 	strd	sl, sl, [sp, #56]	; 0x38
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   2254a:	f8df a10c 	ldr.w	sl, [pc, #268]	; 22658 <settings_fcb_save+0x190>
	loc1.fap = cf->cf_fcb.fap;
   2254e:	9312      	str	r3, [sp, #72]	; 0x48
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
   22550:	4630      	mov	r0, r6
   22552:	a90e      	add	r1, sp, #56	; 0x38
   22554:	f01a fd7e 	bl	3d054 <fcb_getnext>
   22558:	b150      	cbz	r0, 22570 <settings_fcb_save+0xa8>
	rc = fcb_rotate(&cf->cf_fcb);
   2255a:	4630      	mov	r0, r6
   2255c:	f01a fd95 	bl	3d08a <fcb_rotate>
	if (rc != 0) {
   22560:	4602      	mov	r2, r0
   22562:	b118      	cbz	r0, 2256c <settings_fcb_save+0xa4>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
   22564:	2145      	movs	r1, #69	; 0x45
   22566:	483b      	ldr	r0, [pc, #236]	; (22654 <settings_fcb_save+0x18c>)
   22568:	f01a faca 	bl	3cb00 <z_log_minimal_printk>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   2256c:	3401      	adds	r4, #1
   2256e:	e7cc      	b.n	2250a <settings_fcb_save+0x42>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
   22570:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22572:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22574:	429a      	cmp	r2, r3
   22576:	d1f0      	bne.n	2255a <settings_fcb_save+0x92>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
   22578:	2149      	movs	r1, #73	; 0x49
   2257a:	ab0e      	add	r3, sp, #56	; 0x38
   2257c:	aa03      	add	r2, sp, #12
   2257e:	a818      	add	r0, sp, #96	; 0x60
   22580:	f01b f837 	bl	3d5f2 <settings_line_name_read>
		if (rc) {
   22584:	2800      	cmp	r0, #0
   22586:	d1e3      	bne.n	22550 <settings_fcb_save+0x88>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
   22588:	9b03      	ldr	r3, [sp, #12]
   2258a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
   2258e:	3301      	adds	r3, #1
   22590:	4293      	cmp	r3, r2
   22592:	d0dd      	beq.n	22550 <settings_fcb_save+0x88>
		loc2 = loc1;
   22594:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   22598:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   2259c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   225a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   225a4:	f8de 3000 	ldr.w	r3, [lr]
   225a8:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
   225ac:	4630      	mov	r0, r6
   225ae:	a913      	add	r1, sp, #76	; 0x4c
   225b0:	f01a fd50 	bl	3d054 <fcb_getnext>
   225b4:	b1f0      	cbz	r0, 225f4 <settings_fcb_save+0x12c>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
   225b6:	4630      	mov	r0, r6
   225b8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   225bc:	aa13      	add	r2, sp, #76	; 0x4c
   225be:	f7ff f847 	bl	21650 <fcb_append>
		if (rc) {
   225c2:	2800      	cmp	r0, #0
   225c4:	d1c4      	bne.n	22550 <settings_fcb_save+0x88>
		rc = settings_line_entry_copy(&loc2, 0, &loc1, 0,
   225c6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   225ca:	4601      	mov	r1, r0
   225cc:	9300      	str	r3, [sp, #0]
   225ce:	aa0e      	add	r2, sp, #56	; 0x38
   225d0:	4603      	mov	r3, r0
   225d2:	a813      	add	r0, sp, #76	; 0x4c
   225d4:	f7ff feba 	bl	2234c <settings_line_entry_copy>
		if (rc) {
   225d8:	2800      	cmp	r0, #0
   225da:	d1b9      	bne.n	22550 <settings_fcb_save+0x88>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
   225dc:	4630      	mov	r0, r6
   225de:	a913      	add	r1, sp, #76	; 0x4c
   225e0:	f01a fac1 	bl	3cb66 <fcb_append_finish>
		if (rc != 0) {
   225e4:	4602      	mov	r2, r0
   225e6:	2800      	cmp	r0, #0
   225e8:	d0b2      	beq.n	22550 <settings_fcb_save+0x88>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   225ea:	2145      	movs	r1, #69	; 0x45
   225ec:	4650      	mov	r0, sl
   225ee:	f01a fa87 	bl	3cb00 <z_log_minimal_printk>
   225f2:	e7ad      	b.n	22550 <settings_fcb_save+0x88>
			rc = settings_line_name_read(name2, sizeof(name2),
   225f4:	2149      	movs	r1, #73	; 0x49
   225f6:	ab13      	add	r3, sp, #76	; 0x4c
   225f8:	aa04      	add	r2, sp, #16
   225fa:	a82b      	add	r0, sp, #172	; 0xac
   225fc:	f01a fff9 	bl	3d5f2 <settings_line_name_read>
			if (rc) {
   22600:	2800      	cmp	r0, #0
   22602:	d1d3      	bne.n	225ac <settings_fcb_save+0xe4>
			if ((val1_off == val2_off) &&
   22604:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   22608:	429a      	cmp	r2, r3
   2260a:	d1cf      	bne.n	225ac <settings_fcb_save+0xe4>
			    !memcmp(name1, name2, val1_off)) {
   2260c:	a92b      	add	r1, sp, #172	; 0xac
   2260e:	a818      	add	r0, sp, #96	; 0x60
   22610:	f01e fee0 	bl	413d4 <memcmp>
			if ((val1_off == val2_off) &&
   22614:	2800      	cmp	r0, #0
   22616:	d1c9      	bne.n	225ac <settings_fcb_save+0xe4>
   22618:	e79a      	b.n	22550 <settings_fcb_save+0x88>
	if (rc) {
   2261a:	2800      	cmp	r0, #0
   2261c:	f47f af6d 	bne.w	224fa <settings_fcb_save+0x32>
	loc.fap = cf->cf_fcb.fap;
   22620:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   22622:	4649      	mov	r1, r9
	loc.fap = cf->cf_fcb.fap;
   22624:	920d      	str	r2, [sp, #52]	; 0x34
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   22626:	4638      	mov	r0, r7
   22628:	4642      	mov	r2, r8
   2262a:	f8cd a000 	str.w	sl, [sp]
   2262e:	f7ff fe1f 	bl	22270 <settings_line_write>
	if (rc != -EIO) {
   22632:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   22634:	4604      	mov	r4, r0
	if (rc != -EIO) {
   22636:	d006      	beq.n	22646 <settings_fcb_save+0x17e>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
   22638:	4651      	mov	r1, sl
   2263a:	4630      	mov	r0, r6
   2263c:	f01a fa93 	bl	3cb66 <fcb_append_finish>
			rc = i;
   22640:	2c00      	cmp	r4, #0
   22642:	bf08      	it	eq
   22644:	4604      	moveq	r4, r0
		return 0;
	}
	return settings_fcb_save_priv(cs, name, (char *)value, val_len);
}
   22646:	4620      	mov	r0, r4
   22648:	b03f      	add	sp, #252	; 0xfc
   2264a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2264e:	bf00      	nop
   22650:	0003d613 	.word	0x0003d613
   22654:	00044463 	.word	0x00044463
   22658:	0004443d 	.word	0x0004443d

0002265c <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   2265c:	2301      	movs	r3, #1
{
   2265e:	b570      	push	{r4, r5, r6, lr}
   22660:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   22662:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
   22664:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(SETTINGS_PARTITION, &cf->cf_fcb);
   22666:	f100 0608 	add.w	r6, r0, #8
   2266a:	4631      	mov	r1, r6
   2266c:	200c      	movs	r0, #12
   2266e:	f01a fb7c 	bl	3cd6a <fcb_init>
		if (rc) {
   22672:	4605      	mov	r5, r0
   22674:	b9b0      	cbnz	r0, 226a4 <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   22676:	4630      	mov	r0, r6
   22678:	f01a fadd 	bl	3cc36 <fcb_free_sector_cnt>
   2267c:	2800      	cmp	r0, #0
   2267e:	dc0a      	bgt.n	22696 <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
   22680:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
   22682:	6c20      	ldr	r0, [r4, #64]	; 0x40
   22684:	e9d3 1200 	ldrd	r1, r2, [r3]
   22688:	f01a fee1 	bl	3d44e <flash_area_erase>
			if (rc) {
   2268c:	2800      	cmp	r0, #0
   2268e:	d0ec      	beq.n	2266a <settings_fcb_src+0xe>
				return -EIO;
   22690:	f06f 0504 	mvn.w	r5, #4
   22694:	e004      	b.n	226a0 <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   22696:	4b05      	ldr	r3, [pc, #20]	; (226ac <settings_fcb_src+0x50>)
	settings_src_register(&cf->cf_store);
   22698:	4620      	mov	r0, r4
	cf->cf_store.cs_itf = &settings_fcb_itf;
   2269a:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
   2269c:	f7ff fc54 	bl	21f48 <settings_src_register>
}
   226a0:	4628      	mov	r0, r5
   226a2:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   226a4:	f06f 0515 	mvn.w	r5, #21
   226a8:	e7fa      	b.n	226a0 <settings_fcb_src+0x44>
   226aa:	bf00      	nop
   226ac:	00042990 	.word	0x00042990

000226b0 <settings_mount_fcb_backend>:
{
	uint8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
   226b0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   226b4:	4a02      	ldr	r2, [pc, #8]	; (226c0 <settings_mount_fcb_backend+0x10>)
   226b6:	4903      	ldr	r1, [pc, #12]	; (226c4 <settings_mount_fcb_backend+0x14>)
   226b8:	4803      	ldr	r0, [pc, #12]	; (226c8 <settings_mount_fcb_backend+0x18>)
   226ba:	f7ff be7b 	b.w	223b4 <settings_line_io_init>
   226be:	bf00      	nop
   226c0:	0003d691 	.word	0x0003d691
   226c4:	0003d695 	.word	0x0003d695
   226c8:	0003d6a9 	.word	0x0003d6a9

000226cc <settings_backend_init>:
		settings_fcb_area[CONFIG_SETTINGS_FCB_NUM_AREAS + 1];
	static struct settings_fcb config_init_settings_fcb = {
		.cf_fcb.f_magic = CONFIG_SETTINGS_FCB_MAGIC,
		.cf_fcb.f_sectors = settings_fcb_area,
	};
	uint32_t cnt = sizeof(settings_fcb_area) /
   226cc:	2309      	movs	r3, #9
{
   226ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
		    sizeof(settings_fcb_area[0]);
	int rc;
	const struct flash_area *fap;

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &cnt,
   226d0:	200c      	movs	r0, #12
   226d2:	4669      	mov	r1, sp
   226d4:	4a21      	ldr	r2, [pc, #132]	; (2275c <settings_backend_init+0x90>)
	uint32_t cnt = sizeof(settings_fcb_area) /
   226d6:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &cnt,
   226d8:	f7ff fada 	bl	21c90 <flash_area_get_sectors>
				    settings_fcb_area);
	if (rc == -ENODEV) {
   226dc:	f110 0f13 	cmn.w	r0, #19
   226e0:	d03a      	beq.n	22758 <settings_backend_init+0x8c>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   226e2:	b138      	cbz	r0, 226f4 <settings_backend_init+0x28>
   226e4:	300c      	adds	r0, #12
   226e6:	d005      	beq.n	226f4 <settings_backend_init+0x28>
		k_panic();
   226e8:	4040      	eors	r0, r0
   226ea:	f380 8811 	msr	BASEPRI, r0
   226ee:	f04f 0004 	mov.w	r0, #4
   226f2:	df02      	svc	2
	}

	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   226f4:	4c1a      	ldr	r4, [pc, #104]	; (22760 <settings_backend_init+0x94>)
   226f6:	9b00      	ldr	r3, [sp, #0]

	rc = settings_fcb_src(&config_init_settings_fcb);
   226f8:	4620      	mov	r0, r4
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   226fa:	7363      	strb	r3, [r4, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
   226fc:	f7ff ffae 	bl	2265c <settings_fcb_src>

	if (rc != 0) {
   22700:	b308      	cbz	r0, 22746 <settings_backend_init+0x7a>
		rc = flash_area_open(SETTINGS_PARTITION, &fap);
   22702:	a901      	add	r1, sp, #4
   22704:	200c      	movs	r0, #12
   22706:	f7ff faa5 	bl	21c54 <flash_area_open>

		if (rc == 0) {
   2270a:	4601      	mov	r1, r0
   2270c:	b160      	cbz	r0, 22728 <settings_backend_init+0x5c>
			rc = flash_area_erase(fap, 0, fap->fa_size);
			flash_area_close(fap);
		}

		if (rc != 0) {
			k_panic();
   2270e:	4040      	eors	r0, r0
   22710:	f380 8811 	msr	BASEPRI, r0
   22714:	f04f 0004 	mov.w	r0, #4
   22718:	df02      	svc	2
			rc = settings_fcb_src(&config_init_settings_fcb);
		}
	}

	if (rc != 0) {
		k_panic();
   2271a:	4040      	eors	r0, r0
   2271c:	f380 8811 	msr	BASEPRI, r0
   22720:	f04f 0004 	mov.w	r0, #4
   22724:	df02      	svc	2
   22726:	e00e      	b.n	22746 <settings_backend_init+0x7a>
			rc = flash_area_erase(fap, 0, fap->fa_size);
   22728:	9801      	ldr	r0, [sp, #4]
   2272a:	6882      	ldr	r2, [r0, #8]
   2272c:	f01a fe8f 	bl	3d44e <flash_area_erase>
   22730:	4605      	mov	r5, r0
			flash_area_close(fap);
   22732:	9801      	ldr	r0, [sp, #4]
   22734:	f01a fe52 	bl	3d3dc <flash_area_close>
		if (rc != 0) {
   22738:	2d00      	cmp	r5, #0
   2273a:	d1e8      	bne.n	2270e <settings_backend_init+0x42>
			rc = settings_fcb_src(&config_init_settings_fcb);
   2273c:	4620      	mov	r0, r4
   2273e:	f7ff ff8d 	bl	2265c <settings_fcb_src>
	if (rc != 0) {
   22742:	2800      	cmp	r0, #0
   22744:	d1e9      	bne.n	2271a <settings_backend_init+0x4e>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   22746:	4b07      	ldr	r3, [pc, #28]	; (22764 <settings_backend_init+0x98>)
	settings_dst_register(&cf->cf_store);
   22748:	4805      	ldr	r0, [pc, #20]	; (22760 <settings_backend_init+0x94>)
	cf->cf_store.cs_itf = &settings_fcb_itf;
   2274a:	6063      	str	r3, [r4, #4]
	settings_dst_register(&cf->cf_store);
   2274c:	f7ff fc0a 	bl	21f64 <settings_dst_register>

	if (rc != 0) {
		k_panic();
	}

	settings_mount_fcb_backend(&config_init_settings_fcb);
   22750:	4803      	ldr	r0, [pc, #12]	; (22760 <settings_backend_init+0x94>)
   22752:	f7ff ffad 	bl	226b0 <settings_mount_fcb_backend>

	return rc;
   22756:	2000      	movs	r0, #0
}
   22758:	b003      	add	sp, #12
   2275a:	bd30      	pop	{r4, r5, pc}
   2275c:	20019148 	.word	0x20019148
   22760:	200145cc 	.word	0x200145cc
   22764:	00042990 	.word	0x00042990

00022768 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   22768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2276c:	4605      	mov	r5, r0
	__asm__ volatile(
   2276e:	f04f 0320 	mov.w	r3, #32
   22772:	f3ef 8611 	mrs	r6, BASEPRI
   22776:	f383 8812 	msr	BASEPRI_MAX, r3
   2277a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2277e:	481d      	ldr	r0, [pc, #116]	; (227f4 <pm_state_notify+0x8c>)
   22780:	f013 ff2e 	bl	365e0 <z_spin_lock_valid>
   22784:	b940      	cbnz	r0, 22798 <pm_state_notify+0x30>
   22786:	491c      	ldr	r1, [pc, #112]	; (227f8 <pm_state_notify+0x90>)
   22788:	481c      	ldr	r0, [pc, #112]	; (227fc <pm_state_notify+0x94>)
   2278a:	228e      	movs	r2, #142	; 0x8e
   2278c:	f01a f97e 	bl	3ca8c <assert_print>
   22790:	218e      	movs	r1, #142	; 0x8e
   22792:	4819      	ldr	r0, [pc, #100]	; (227f8 <pm_state_notify+0x90>)
   22794:	f01a f973 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   22798:	4816      	ldr	r0, [pc, #88]	; (227f4 <pm_state_notify+0x8c>)
   2279a:	f013 ff3f 	bl	3661c <z_spin_lock_set_owner>
	return list->head;
   2279e:	4b18      	ldr	r3, [pc, #96]	; (22800 <pm_state_notify+0x98>)
   227a0:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   227a2:	b19c      	cbz	r4, 227cc <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   227a4:	f04f 090c 	mov.w	r9, #12
   227a8:	4f16      	ldr	r7, [pc, #88]	; (22804 <pm_state_notify+0x9c>)
   227aa:	f8df 805c 	ldr.w	r8, [pc, #92]	; 22808 <pm_state_notify+0xa0>
			callback = notifier->state_exit;
   227ae:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   227b2:	2d00      	cmp	r5, #0
   227b4:	bf08      	it	eq
   227b6:	4613      	moveq	r3, r2
		if (callback) {
   227b8:	b12b      	cbz	r3, 227c6 <pm_state_notify+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   227ba:	f898 2014 	ldrb.w	r2, [r8, #20]
   227be:	fb09 f202 	mul.w	r2, r9, r2
   227c2:	5cb8      	ldrb	r0, [r7, r2]
   227c4:	4798      	blx	r3
	return node->next;
   227c6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   227c8:	2c00      	cmp	r4, #0
   227ca:	d1f0      	bne.n	227ae <pm_state_notify+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227cc:	4809      	ldr	r0, [pc, #36]	; (227f4 <pm_state_notify+0x8c>)
   227ce:	f013 ff15 	bl	365fc <z_spin_unlock_valid>
   227d2:	b940      	cbnz	r0, 227e6 <pm_state_notify+0x7e>
   227d4:	4908      	ldr	r1, [pc, #32]	; (227f8 <pm_state_notify+0x90>)
   227d6:	4809      	ldr	r0, [pc, #36]	; (227fc <pm_state_notify+0x94>)
   227d8:	22b9      	movs	r2, #185	; 0xb9
   227da:	f01a f957 	bl	3ca8c <assert_print>
   227de:	21b9      	movs	r1, #185	; 0xb9
   227e0:	4805      	ldr	r0, [pc, #20]	; (227f8 <pm_state_notify+0x90>)
   227e2:	f01a f94c 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   227e6:	f386 8811 	msr	BASEPRI, r6
   227ea:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   227ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   227f2:	bf00      	nop
   227f4:	20019190 	.word	0x20019190
   227f8:	000440d8 	.word	0x000440d8
   227fc:	0004409e 	.word	0x0004409e
   22800:	20019194 	.word	0x20019194
   22804:	2001919c 	.word	0x2001919c
   22808:	2001a500 	.word	0x2001a500

0002280c <atomic_clear_bit.constprop.0>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   2280c:	2301      	movs	r3, #1

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2280e:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   22810:	f000 001f 	and.w	r0, r0, #31
   22814:	fa03 f000 	lsl.w	r0, r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22818:	43c0      	mvns	r0, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2281a:	4b05      	ldr	r3, [pc, #20]	; (22830 <atomic_clear_bit.constprop.0+0x24>)
   2281c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   22820:	e8d3 2fef 	ldaex	r2, [r3]
   22824:	4002      	ands	r2, r0
   22826:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2282a:	2900      	cmp	r1, #0
   2282c:	d1f8      	bne.n	22820 <atomic_clear_bit.constprop.0+0x14>
}
   2282e:	4770      	bx	lr
   22830:	200191a8 	.word	0x200191a8

00022834 <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   22834:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   22836:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
   22838:	4b17      	ldr	r3, [pc, #92]	; (22898 <pm_system_resume+0x64>)
   2283a:	7d1c      	ldrb	r4, [r3, #20]
   2283c:	f004 031f 	and.w	r3, r4, #31
   22840:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22842:	43d0      	mvns	r0, r2
   22844:	4b15      	ldr	r3, [pc, #84]	; (2289c <pm_system_resume+0x68>)
   22846:	0961      	lsrs	r1, r4, #5
   22848:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   2284c:	e8d3 1fef 	ldaex	r1, [r3]
   22850:	ea01 0500 	and.w	r5, r1, r0
   22854:	e8c3 5fec 	stlex	ip, r5, [r3]
   22858:	f1bc 0f00 	cmp.w	ip, #0
   2285c:	d1f6      	bne.n	2284c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   2285e:	4211      	tst	r1, r2
   22860:	d013      	beq.n	2288a <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
   22862:	4b0f      	ldr	r3, [pc, #60]	; (228a0 <pm_system_resume+0x6c>)
   22864:	4d0f      	ldr	r5, [pc, #60]	; (228a4 <pm_system_resume+0x70>)
   22866:	b18b      	cbz	r3, 2288c <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
   22868:	230c      	movs	r3, #12
   2286a:	4363      	muls	r3, r4
   2286c:	18ea      	adds	r2, r5, r3
   2286e:	7851      	ldrb	r1, [r2, #1]
   22870:	5ce8      	ldrb	r0, [r5, r3]
   22872:	f01a f925 	bl	3cac0 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   22876:	2000      	movs	r0, #0
   22878:	f7ff ff76 	bl	22768 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   2287c:	230c      	movs	r3, #12
   2287e:	435c      	muls	r4, r3
   22880:	2300      	movs	r3, #0
   22882:	192a      	adds	r2, r5, r4
   22884:	512b      	str	r3, [r5, r4]
   22886:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   2288a:	bd38      	pop	{r3, r4, r5, pc}
   2288c:	f383 8811 	msr	BASEPRI, r3
   22890:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   22894:	e7ef      	b.n	22876 <pm_system_resume+0x42>
   22896:	bf00      	nop
   22898:	2001a500 	.word	0x2001a500
   2289c:	200191ac 	.word	0x200191ac
   228a0:	0003cac1 	.word	0x0003cac1
   228a4:	2001919c 	.word	0x2001919c

000228a8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   228a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   228ac:	4b2f      	ldr	r3, [pc, #188]	; (2296c <pm_system_suspend+0xc4>)
{
   228ae:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
   228b0:	7d1c      	ldrb	r4, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   228b2:	ea4f 1854 	mov.w	r8, r4, lsr #5
   228b6:	ea4f 0888 	mov.w	r8, r8, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   228ba:	4b2d      	ldr	r3, [pc, #180]	; (22970 <pm_system_suspend+0xc8>)
   228bc:	4443      	add	r3, r8
   228be:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   228c2:	f004 091f 	and.w	r9, r4, #31
   228c6:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   228ca:	f013 0f01 	tst.w	r3, #1
   228ce:	4e29      	ldr	r6, [pc, #164]	; (22974 <pm_system_suspend+0xcc>)
   228d0:	d10a      	bne.n	228e8 <pm_system_suspend+0x40>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   228d2:	4601      	mov	r1, r0
   228d4:	4620      	mov	r0, r4
   228d6:	f000 f863 	bl	229a0 <pm_policy_next_state>
		if (info != NULL) {
   228da:	b128      	cbz	r0, 228e8 <pm_system_suspend+0x40>
			z_cpus_pm_state[id] = *info;
   228dc:	c807      	ldmia	r0, {r0, r1, r2}
   228de:	230c      	movs	r3, #12
   228e0:	fb03 6304 	mla	r3, r3, r4, r6
   228e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   228e8:	230c      	movs	r3, #12
   228ea:	4363      	muls	r3, r4
   228ec:	5cf5      	ldrb	r5, [r6, r3]
   228ee:	18f2      	adds	r2, r6, r3
   228f0:	b92d      	cbnz	r5, 228fe <pm_system_suspend+0x56>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   228f2:	4620      	mov	r0, r4
   228f4:	f7ff ff8a 	bl	2280c <atomic_clear_bit.constprop.0>
		ret = false;
   228f8:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   228fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   228fe:	1c7b      	adds	r3, r7, #1
   22900:	d00f      	beq.n	22922 <pm_system_suspend+0x7a>
   22902:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   22906:	2100      	movs	r1, #0
   22908:	f8d2 c008 	ldr.w	ip, [r2, #8]
   2290c:	481a      	ldr	r0, [pc, #104]	; (22978 <pm_system_suspend+0xd0>)
   2290e:	2300      	movs	r3, #0
   22910:	fbec 0105 	umlal	r0, r1, ip, r5
   22914:	4a19      	ldr	r2, [pc, #100]	; (2297c <pm_system_suspend+0xd4>)
   22916:	f7fa fae7 	bl	1cee8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   2291a:	2101      	movs	r1, #1
   2291c:	1a38      	subs	r0, r7, r0
   2291e:	f016 f97f 	bl	38c20 <z_set_timeout_expiry>
	k_sched_lock();
   22922:	f015 f81f 	bl	37964 <k_sched_lock>
	pm_state_notify(true);
   22926:	2001      	movs	r0, #1
   22928:	f7ff ff1e 	bl	22768 <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   2292c:	2301      	movs	r3, #1
   2292e:	fa03 f909 	lsl.w	r9, r3, r9
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22932:	4b13      	ldr	r3, [pc, #76]	; (22980 <pm_system_suspend+0xd8>)
   22934:	4498      	add	r8, r3
   22936:	e8d8 3fef 	ldaex	r3, [r8]
   2293a:	ea43 0309 	orr.w	r3, r3, r9
   2293e:	e8c8 3fe2 	stlex	r2, r3, [r8]
   22942:	2a00      	cmp	r2, #0
   22944:	d1f7      	bne.n	22936 <pm_system_suspend+0x8e>
	if (pm_state_set != NULL) {
   22946:	4b0f      	ldr	r3, [pc, #60]	; (22984 <pm_system_suspend+0xdc>)
   22948:	b133      	cbz	r3, 22958 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
   2294a:	230c      	movs	r3, #12
   2294c:	4363      	muls	r3, r4
   2294e:	18f2      	adds	r2, r6, r3
   22950:	7851      	ldrb	r1, [r2, #1]
   22952:	5cf0      	ldrb	r0, [r6, r3]
   22954:	f01a f8a8 	bl	3caa8 <pm_state_set>
	pm_system_resume();
   22958:	f7ff ff6c 	bl	22834 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   2295c:	4620      	mov	r0, r4
   2295e:	f7ff ff55 	bl	2280c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   22962:	f015 fca1 	bl	382a8 <k_sched_unlock>
	bool ret = true;
   22966:	2001      	movs	r0, #1
   22968:	e7c7      	b.n	228fa <pm_system_suspend+0x52>
   2296a:	bf00      	nop
   2296c:	2001a500 	.word	0x2001a500
   22970:	200191a8 	.word	0x200191a8
   22974:	2001919c 	.word	0x2001919c
   22978:	000f423f 	.word	0x000f423f
   2297c:	000f4240 	.word	0x000f4240
   22980:	200191ac 	.word	0x200191ac
   22984:	0003caa9 	.word	0x0003caa9

00022988 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22988:	4b04      	ldr	r3, [pc, #16]	; (2299c <pm_policy_state_lock_is_active+0x14>)
   2298a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2298e:	e8d0 0faf 	lda	r0, [r0]
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
   22992:	3800      	subs	r0, #0
   22994:	bf18      	it	ne
   22996:	2001      	movne	r0, #1
   22998:	4770      	bx	lr
   2299a:	bf00      	nop
   2299c:	200191b0 	.word	0x200191b0

000229a0 <pm_policy_next_state>:
{
   229a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229a4:	b085      	sub	sp, #20
   229a6:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   229a8:	a903      	add	r1, sp, #12
   229aa:	f000 f847 	bl	22a3c <pm_state_cpu_get_all>
   229ae:	f04f 0b00 	mov.w	fp, #0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   229b2:	3801      	subs	r0, #1
   229b4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 22a34 <pm_policy_next_state+0x94>
   229b8:	f8df a07c 	ldr.w	sl, [pc, #124]	; 22a38 <pm_policy_next_state+0x98>
   229bc:	b204      	sxth	r4, r0
   229be:	1c63      	adds	r3, r4, #1
   229c0:	d104      	bne.n	229cc <pm_policy_next_state+0x2c>
	return NULL;
   229c2:	2600      	movs	r6, #0
}
   229c4:	4630      	mov	r0, r6
   229c6:	b005      	add	sp, #20
   229c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   229cc:	9a03      	ldr	r2, [sp, #12]
   229ce:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		if (pm_policy_state_lock_is_active(state->state)) {
   229d2:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
		const struct pm_state_info *state = &cpu_states[i];
   229d6:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
   229da:	f7ff ffd5 	bl	22988 <pm_policy_state_lock_is_active>
   229de:	4605      	mov	r5, r0
   229e0:	bb10      	cbnz	r0, 22a28 <pm_policy_next_state+0x88>
   229e2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   229e6:	46c4      	mov	ip, r8
   229e8:	4629      	mov	r1, r5
   229ea:	6870      	ldr	r0, [r6, #4]
   229ec:	4652      	mov	r2, sl
   229ee:	fbe0 c109 	umlal	ip, r1, r0, r9
   229f2:	465b      	mov	r3, fp
   229f4:	4660      	mov	r0, ip
   229f6:	f7fa fa77 	bl	1cee8 <__aeabi_uldivmod>
   229fa:	46c4      	mov	ip, r8
   229fc:	4629      	mov	r1, r5
   229fe:	9001      	str	r0, [sp, #4]
   22a00:	68b0      	ldr	r0, [r6, #8]
   22a02:	465b      	mov	r3, fp
   22a04:	fbe0 c109 	umlal	ip, r1, r0, r9
   22a08:	4652      	mov	r2, sl
   22a0a:	4660      	mov	r0, ip
   22a0c:	f7fa fa6c 	bl	1cee8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   22a10:	4b07      	ldr	r3, [pc, #28]	; (22a30 <pm_policy_next_state+0x90>)
   22a12:	681b      	ldr	r3, [r3, #0]
   22a14:	1c59      	adds	r1, r3, #1
   22a16:	d001      	beq.n	22a1c <pm_policy_next_state+0x7c>
   22a18:	4283      	cmp	r3, r0
   22a1a:	d905      	bls.n	22a28 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
   22a1c:	1c7a      	adds	r2, r7, #1
   22a1e:	d0d1      	beq.n	229c4 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   22a20:	9b01      	ldr	r3, [sp, #4]
   22a22:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   22a24:	42b8      	cmp	r0, r7
   22a26:	d9cd      	bls.n	229c4 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   22a28:	3c01      	subs	r4, #1
   22a2a:	b224      	sxth	r4, r4
   22a2c:	e7c7      	b.n	229be <pm_policy_next_state+0x1e>
   22a2e:	bf00      	nop
   22a30:	20014614 	.word	0x20014614
   22a34:	000f423f 	.word	0x000f423f
   22a38:	000f4240 	.word	0x000f4240

00022a3c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   22a3c:	b908      	cbnz	r0, 22a42 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   22a3e:	4b02      	ldr	r3, [pc, #8]	; (22a48 <pm_state_cpu_get_all+0xc>)
   22a40:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   22a42:	2000      	movs	r0, #0
   22a44:	4770      	bx	lr
   22a46:	bf00      	nop
   22a48:	000429a0 	.word	0x000429a0

00022a4c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   22a4c:	4901      	ldr	r1, [pc, #4]	; (22a54 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   22a4e:	2210      	movs	r2, #16
	str	r2, [r1]
   22a50:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   22a52:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   22a54:	e000ed10 	.word	0xe000ed10

00022a58 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   22a58:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   22a5a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   22a5c:	f380 8811 	msr	BASEPRI, r0
	isb
   22a60:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   22a64:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   22a68:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   22a6a:	b662      	cpsie	i
	isb
   22a6c:	f3bf 8f6f 	isb	sy

	bx	lr
   22a70:	4770      	bx	lr
   22a72:	bf00      	nop

00022a74 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   22a74:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   22a76:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   22a78:	f381 8811 	msr	BASEPRI, r1

	wfe
   22a7c:	bf20      	wfe

	msr	BASEPRI, r0
   22a7e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   22a82:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   22a84:	4770      	bx	lr
   22a86:	bf00      	nop

00022a88 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a8c:	4607      	mov	r7, r0

	if (esf != NULL) {
   22a8e:	460c      	mov	r4, r1
{
   22a90:	b086      	sub	sp, #24
	if (esf != NULL) {
   22a92:	2900      	cmp	r1, #0
   22a94:	d04a      	beq.n	22b2c <z_arm_fatal_error+0xa4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   22a96:	688b      	ldr	r3, [r1, #8]
   22a98:	4828      	ldr	r0, [pc, #160]	; (22b3c <z_arm_fatal_error+0xb4>)
   22a9a:	9300      	str	r3, [sp, #0]
   22a9c:	e9d1 2300 	ldrd	r2, r3, [r1]
   22aa0:	2145      	movs	r1, #69	; 0x45
   22aa2:	f01a f82d 	bl	3cb00 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   22aa6:	6963      	ldr	r3, [r4, #20]
   22aa8:	2145      	movs	r1, #69	; 0x45
   22aaa:	9300      	str	r3, [sp, #0]
   22aac:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   22ab0:	4823      	ldr	r0, [pc, #140]	; (22b40 <z_arm_fatal_error+0xb8>)
   22ab2:	f01a f825 	bl	3cb00 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   22ab6:	2145      	movs	r1, #69	; 0x45
   22ab8:	69e2      	ldr	r2, [r4, #28]
   22aba:	4822      	ldr	r0, [pc, #136]	; (22b44 <z_arm_fatal_error+0xbc>)
   22abc:	f01a f820 	bl	3cb00 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   22ac0:	4626      	mov	r6, r4
   22ac2:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   22ac4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 22b50 <z_arm_fatal_error+0xc8>
   22ac8:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
   22acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22ad0:	ed96 7a08 	vldr	s14, [r6, #32]
   22ad4:	edcd 7a05 	vstr	s15, [sp, #20]
   22ad8:	1ceb      	adds	r3, r5, #3
   22ada:	9304      	str	r3, [sp, #16]
   22adc:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
   22ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22ae4:	edcd 7a03 	vstr	s15, [sp, #12]
   22ae8:	1cab      	adds	r3, r5, #2
   22aea:	9302      	str	r3, [sp, #8]
   22aec:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
   22af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22af4:	edcd 7a01 	vstr	s15, [sp, #4]
   22af8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   22afc:	1c6b      	adds	r3, r5, #1
   22afe:	462a      	mov	r2, r5
   22b00:	9300      	str	r3, [sp, #0]
   22b02:	2145      	movs	r1, #69	; 0x45
   22b04:	ee17 3a90 	vmov	r3, s15
   22b08:	4640      	mov	r0, r8
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   22b0a:	3504      	adds	r5, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   22b0c:	f019 fff8 	bl	3cb00 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   22b10:	2d10      	cmp	r5, #16
   22b12:	f106 0610 	add.w	r6, r6, #16
   22b16:	d1d7      	bne.n	22ac8 <z_arm_fatal_error+0x40>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   22b18:	2145      	movs	r1, #69	; 0x45
   22b1a:	6e22      	ldr	r2, [r4, #96]	; 0x60
   22b1c:	480a      	ldr	r0, [pc, #40]	; (22b48 <z_arm_fatal_error+0xc0>)
   22b1e:	f019 ffef 	bl	3cb00 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   22b22:	2145      	movs	r1, #69	; 0x45
   22b24:	69a2      	ldr	r2, [r4, #24]
   22b26:	4809      	ldr	r0, [pc, #36]	; (22b4c <z_arm_fatal_error+0xc4>)
   22b28:	f019 ffea 	bl	3cb00 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   22b2c:	4621      	mov	r1, r4
   22b2e:	4638      	mov	r0, r7
}
   22b30:	b006      	add	sp, #24
   22b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_fatal_error(reason, esf);
   22b36:	f013 b9f9 	b.w	35f2c <z_fatal_error>
   22b3a:	bf00      	nop
   22b3c:	00044498 	.word	0x00044498
   22b40:	000444cc 	.word	0x000444cc
   22b44:	00044500 	.word	0x00044500
   22b48:	0004455c 	.word	0x0004455c
   22b4c:	00044570 	.word	0x00044570
   22b50:	00044514 	.word	0x00044514

00022b54 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   22b54:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   22b56:	2b00      	cmp	r3, #0
   22b58:	db08      	blt.n	22b6c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22b5a:	2201      	movs	r2, #1
   22b5c:	f000 001f 	and.w	r0, r0, #31
   22b60:	fa02 f000 	lsl.w	r0, r2, r0
   22b64:	4a02      	ldr	r2, [pc, #8]	; (22b70 <arch_irq_enable+0x1c>)
   22b66:	095b      	lsrs	r3, r3, #5
   22b68:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   22b6c:	4770      	bx	lr
   22b6e:	bf00      	nop
   22b70:	e000e100 	.word	0xe000e100

00022b74 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   22b74:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   22b76:	2b00      	cmp	r3, #0
   22b78:	db0d      	blt.n	22b96 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22b7a:	2201      	movs	r2, #1
   22b7c:	f000 001f 	and.w	r0, r0, #31
   22b80:	fa02 f000 	lsl.w	r0, r2, r0
   22b84:	095b      	lsrs	r3, r3, #5
   22b86:	4a04      	ldr	r2, [pc, #16]	; (22b98 <arch_irq_disable+0x24>)
   22b88:	3320      	adds	r3, #32
   22b8a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   22b8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22b92:	f3bf 8f6f 	isb	sy
}
   22b96:	4770      	bx	lr
   22b98:	e000e100 	.word	0xe000e100

00022b9c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   22b9c:	4b05      	ldr	r3, [pc, #20]	; (22bb4 <arch_irq_is_enabled+0x18>)
   22b9e:	0942      	lsrs	r2, r0, #5
   22ba0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   22ba4:	2301      	movs	r3, #1
   22ba6:	f000 001f 	and.w	r0, r0, #31
   22baa:	fa03 f000 	lsl.w	r0, r3, r0
}
   22bae:	4010      	ands	r0, r2
   22bb0:	4770      	bx	lr
   22bb2:	bf00      	nop
   22bb4:	e000e100 	.word	0xe000e100

00022bb8 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   22bb8:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   22bba:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   22bbc:	2c07      	cmp	r4, #7
{
   22bbe:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   22bc0:	d908      	bls.n	22bd4 <z_arm_irq_priority_set+0x1c>
   22bc2:	490d      	ldr	r1, [pc, #52]	; (22bf8 <z_arm_irq_priority_set+0x40>)
   22bc4:	480d      	ldr	r0, [pc, #52]	; (22bfc <z_arm_irq_priority_set+0x44>)
   22bc6:	2257      	movs	r2, #87	; 0x57
   22bc8:	f019 ff60 	bl	3ca8c <assert_print>
   22bcc:	2157      	movs	r1, #87	; 0x57
   22bce:	480a      	ldr	r0, [pc, #40]	; (22bf8 <z_arm_irq_priority_set+0x40>)
   22bd0:	f019 ff55 	bl	3ca7e <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   22bd4:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   22bd6:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22bd8:	bfac      	ite	ge
   22bda:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22bde:	4b08      	ldrlt	r3, [pc, #32]	; (22c00 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22be0:	ea4f 1444 	mov.w	r4, r4, lsl #5
   22be4:	b2e4      	uxtb	r4, r4
   22be6:	bfab      	itete	ge
   22be8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22bec:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22bf0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22bf4:	555c      	strblt	r4, [r3, r5]
}
   22bf6:	bd38      	pop	{r3, r4, r5, pc}
   22bf8:	000445a3 	.word	0x000445a3
   22bfc:	0004409e 	.word	0x0004409e
   22c00:	e000ed14 	.word	0xe000ed14

00022c04 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   22c04:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   22c06:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   22c08:	4b04      	ldr	r3, [pc, #16]	; (22c1c <_arch_isr_direct_pm+0x18>)
   22c0a:	699a      	ldr	r2, [r3, #24]
   22c0c:	b11a      	cbz	r2, 22c16 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   22c0e:	2200      	movs	r2, #0
   22c10:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   22c12:	f01e f9b6 	bl	40f82 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   22c16:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   22c18:	bd08      	pop	{r3, pc}
   22c1a:	bf00      	nop
   22c1c:	2001a500 	.word	0x2001a500

00022c20 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   22c20:	bf30      	wfi
    b z_SysNmiOnReset
   22c22:	f7ff bffd 	b.w	22c20 <z_SysNmiOnReset>
   22c26:	bf00      	nop

00022c28 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   22c28:	4a14      	ldr	r2, [pc, #80]	; (22c7c <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   22c2a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   22c2c:	4b14      	ldr	r3, [pc, #80]	; (22c80 <z_arm_prep_c+0x58>)
   22c2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   22c32:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   22c34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22c38:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   22c3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   22c40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   22c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   22c48:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   22c4c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   22c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   22c54:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   22c58:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   22c5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22c60:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   22c64:	2300      	movs	r3, #0
   22c66:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   22c6a:	f013 f9d5 	bl	36018 <z_bss_zero>
	z_data_copy();
   22c6e:	f015 fdf3 	bl	38858 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   22c72:	f000 fb3f 	bl	232f4 <z_arm_interrupt_init>
	z_cstart();
   22c76:	f013 fa0f 	bl	36098 <z_cstart>
   22c7a:	bf00      	nop
   22c7c:	0001c200 	.word	0x0001c200
   22c80:	e000ed00 	.word	0xe000ed00

00022c84 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   22c84:	4a0a      	ldr	r2, [pc, #40]	; (22cb0 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   22c86:	490b      	ldr	r1, [pc, #44]	; (22cb4 <arch_swap+0x30>)
	_current->arch.basepri = key;
   22c88:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   22c8a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   22c8c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
   22c90:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   22c94:	4908      	ldr	r1, [pc, #32]	; (22cb8 <arch_swap+0x34>)
   22c96:	684b      	ldr	r3, [r1, #4]
   22c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   22c9c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   22c9e:	2300      	movs	r3, #0
   22ca0:	f383 8811 	msr	BASEPRI, r3
   22ca4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   22ca8:	6893      	ldr	r3, [r2, #8]
}
   22caa:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   22cae:	4770      	bx	lr
   22cb0:	2001a500 	.word	0x2001a500
   22cb4:	000433e8 	.word	0x000433e8
   22cb8:	e000ed00 	.word	0xe000ed00

00022cbc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   22cbc:	4923      	ldr	r1, [pc, #140]	; (22d4c <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   22cbe:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   22cc0:	f882 e0cd 	strb.w	lr, [r2, #205]	; 0xcd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   22cc4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   22cc8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   22cca:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   22cce:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   22cd2:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   22cd6:	d103      	bne.n	22ce0 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   22cd8:	f102 008c 	add.w	r0, r2, #140	; 0x8c
    vstmia r0, {s16-s31}
   22cdc:	ec80 8a10 	vstmia	r0, {s16-s31}

00022ce0 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   22ce0:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   22ce2:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   22ce6:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   22cea:	4f19      	ldr	r7, [pc, #100]	; (22d50 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   22cec:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   22cf0:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   22cf2:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   22cf4:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   22cf6:	f992 e0cd 	ldrsb.w	lr, [r2, #205]	; 0xcd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   22cfa:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
   22cfe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   22d00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   22d04:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   22d08:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   22d0c:	d003      	beq.n	22d16 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   22d0e:	2300      	movs	r3, #0
    vmsr fpscr, r3
   22d10:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   22d14:	e003      	b.n	22d1e <in_fp_endif>

00022d16 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   22d16:	f102 008c 	add.w	r0, r2, #140	; 0x8c
    vldmia r0, {s16-s31}
   22d1a:	ec90 8a10 	vldmia	r0, {s16-s31}

00022d1e <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   22d1e:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   22d22:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   22d26:	f383 8814 	msr	CONTROL, r3
    isb
   22d2a:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   22d2e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   22d32:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   22d36:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   22d3a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   22d3e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   22d40:	f01a fcd9 	bl	3d6f6 <configure_builtin_stack_guard>
    pop {r2, lr}
   22d44:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   22d48:	4770      	bx	lr
   22d4a:	0000      	.short	0x0000
    ldr r1, =_kernel
   22d4c:	2001a500 	.word	0x2001a500
    ldr v4, =_SCS_ICSR
   22d50:	e000ed04 	.word	0xe000ed04

00022d54 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   22d54:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   22d58:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   22d5a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   22d5e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   22d62:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   22d64:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   22d68:	2902      	cmp	r1, #2
    beq _oops
   22d6a:	d0ff      	beq.n	22d6c <_oops>

00022d6c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   22d6c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   22d6e:	f01a fcb3 	bl	3d6d8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   22d72:	bd01      	pop	{r0, pc}

00022d74 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   22d74:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   22d78:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   22d7a:	490d      	ldr	r1, [pc, #52]	; (22db0 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   22d7c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   22d80:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   22d82:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   22d86:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   22d8a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   22d8c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   22d90:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   22d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   22d98:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   22d9c:	2300      	movs	r3, #0
   22d9e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   22da2:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   22da6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   22da8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   22daa:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   22dae:	4770      	bx	lr
   22db0:	0003c7a3 	.word	0x0003c7a3

00022db4 <arch_switch_to_main_thread>:
   22db4:	2300      	movs	r3, #0
   22db6:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   22dba:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   22dbe:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   22dc2:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   22dc6:	f3bf 8f6f 	isb	sy
   22dca:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   22dce:	4b09      	ldr	r3, [pc, #36]	; (22df4 <arch_switch_to_main_thread+0x40>)
   22dd0:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   22dd2:	6f43      	ldr	r3, [r0, #116]	; 0x74
   22dd4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   22dd8:	4610      	mov	r0, r2
   22dda:	f381 8809 	msr	PSP, r1
   22dde:	2100      	movs	r1, #0
   22de0:	b663      	cpsie	if
   22de2:	f381 8811 	msr	BASEPRI, r1
   22de6:	f3bf 8f6f 	isb	sy
   22dea:	2200      	movs	r2, #0
   22dec:	2300      	movs	r3, #0
   22dee:	f019 fcd8 	bl	3c7a2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   22df2:	bf00      	nop
   22df4:	2001a500 	.word	0x2001a500

00022df8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   22df8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   22dfa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   22dfc:	4a0b      	ldr	r2, [pc, #44]	; (22e2c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   22dfe:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   22e00:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   22e02:	bf1e      	ittt	ne
	movne	r1, #0
   22e04:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   22e06:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   22e08:	f01e f8bb 	blne	40f82 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   22e0c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   22e0e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   22e12:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   22e16:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   22e1a:	4905      	ldr	r1, [pc, #20]	; (22e30 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   22e1c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   22e1e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   22e20:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   22e22:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   22e26:	4903      	ldr	r1, [pc, #12]	; (22e34 <_isr_wrapper+0x3c>)
	bx r1
   22e28:	4708      	bx	r1
   22e2a:	0000      	.short	0x0000
	ldr r2, =_kernel
   22e2c:	2001a500 	.word	0x2001a500
	ldr r1, =_sw_isr_table
   22e30:	000423ec 	.word	0x000423ec
	ldr r1, =z_arm_int_exit
   22e34:	00022e39 	.word	0x00022e39

00022e38 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   22e38:	4b04      	ldr	r3, [pc, #16]	; (22e4c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   22e3a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   22e3c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   22e3e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   22e40:	d003      	beq.n	22e4a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   22e42:	4903      	ldr	r1, [pc, #12]	; (22e50 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   22e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   22e48:	600a      	str	r2, [r1, #0]

00022e4a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   22e4a:	4770      	bx	lr
	ldr r3, =_kernel
   22e4c:	2001a500 	.word	0x2001a500
	ldr r1, =_SCS_ICSR
   22e50:	e000ed04 	.word	0xe000ed04

00022e54 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   22e54:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   22e56:	4c21      	ldr	r4, [pc, #132]	; (22edc <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   22e58:	2145      	movs	r1, #69	; 0x45
   22e5a:	4821      	ldr	r0, [pc, #132]	; (22ee0 <usage_fault.constprop.0+0x8c>)
   22e5c:	f019 fe50 	bl	3cb00 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   22e60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22e62:	019d      	lsls	r5, r3, #6
   22e64:	d503      	bpl.n	22e6e <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   22e66:	2145      	movs	r1, #69	; 0x45
   22e68:	481e      	ldr	r0, [pc, #120]	; (22ee4 <usage_fault.constprop.0+0x90>)
   22e6a:	f019 fe49 	bl	3cb00 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   22e6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22e70:	01dc      	lsls	r4, r3, #7
   22e72:	d503      	bpl.n	22e7c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   22e74:	2145      	movs	r1, #69	; 0x45
   22e76:	481c      	ldr	r0, [pc, #112]	; (22ee8 <usage_fault.constprop.0+0x94>)
   22e78:	f019 fe42 	bl	3cb00 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   22e7c:	4d17      	ldr	r5, [pc, #92]	; (22edc <usage_fault.constprop.0+0x88>)
   22e7e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   22e80:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   22e84:	d004      	beq.n	22e90 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   22e86:	2145      	movs	r1, #69	; 0x45
   22e88:	4818      	ldr	r0, [pc, #96]	; (22eec <usage_fault.constprop.0+0x98>)
   22e8a:	f019 fe39 	bl	3cb00 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   22e8e:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   22e90:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22e92:	0318      	lsls	r0, r3, #12
   22e94:	d503      	bpl.n	22e9e <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   22e96:	2145      	movs	r1, #69	; 0x45
   22e98:	4815      	ldr	r0, [pc, #84]	; (22ef0 <usage_fault.constprop.0+0x9c>)
   22e9a:	f019 fe31 	bl	3cb00 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   22e9e:	4d0f      	ldr	r5, [pc, #60]	; (22edc <usage_fault.constprop.0+0x88>)
   22ea0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22ea2:	0359      	lsls	r1, r3, #13
   22ea4:	d503      	bpl.n	22eae <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   22ea6:	2145      	movs	r1, #69	; 0x45
   22ea8:	4812      	ldr	r0, [pc, #72]	; (22ef4 <usage_fault.constprop.0+0xa0>)
   22eaa:	f019 fe29 	bl	3cb00 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   22eae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22eb0:	039a      	lsls	r2, r3, #14
   22eb2:	d503      	bpl.n	22ebc <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   22eb4:	2145      	movs	r1, #69	; 0x45
   22eb6:	4810      	ldr	r0, [pc, #64]	; (22ef8 <usage_fault.constprop.0+0xa4>)
   22eb8:	f019 fe22 	bl	3cb00 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   22ebc:	4d07      	ldr	r5, [pc, #28]	; (22edc <usage_fault.constprop.0+0x88>)
   22ebe:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22ec0:	03db      	lsls	r3, r3, #15
   22ec2:	d503      	bpl.n	22ecc <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   22ec4:	2145      	movs	r1, #69	; 0x45
   22ec6:	480d      	ldr	r0, [pc, #52]	; (22efc <usage_fault.constprop.0+0xa8>)
   22ec8:	f019 fe1a 	bl	3cb00 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   22ecc:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   22ece:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   22ed0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   22ed4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   22ed8:	62ab      	str	r3, [r5, #40]	; 0x28
}
   22eda:	bd38      	pop	{r3, r4, r5, pc}
   22edc:	e000ed00 	.word	0xe000ed00
   22ee0:	000445d9 	.word	0x000445d9
   22ee4:	000445f6 	.word	0x000445f6
   22ee8:	0004460e 	.word	0x0004460e
   22eec:	0004462d 	.word	0x0004462d
   22ef0:	0004465c 	.word	0x0004465c
   22ef4:	0004467f 	.word	0x0004467f
   22ef8:	000446a9 	.word	0x000446a9
   22efc:	000446c8 	.word	0x000446c8

00022f00 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   22f00:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   22f02:	4c23      	ldr	r4, [pc, #140]	; (22f90 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   22f04:	4606      	mov	r6, r0
   22f06:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   22f08:	4822      	ldr	r0, [pc, #136]	; (22f94 <bus_fault.constprop.0+0x94>)
   22f0a:	2145      	movs	r1, #69	; 0x45
   22f0c:	f019 fdf8 	bl	3cb00 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   22f10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f12:	04d9      	lsls	r1, r3, #19
   22f14:	d503      	bpl.n	22f1e <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   22f16:	2145      	movs	r1, #69	; 0x45
   22f18:	481f      	ldr	r0, [pc, #124]	; (22f98 <bus_fault.constprop.0+0x98>)
   22f1a:	f019 fdf1 	bl	3cb00 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   22f1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f20:	051a      	lsls	r2, r3, #20
   22f22:	d503      	bpl.n	22f2c <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   22f24:	2145      	movs	r1, #69	; 0x45
   22f26:	481d      	ldr	r0, [pc, #116]	; (22f9c <bus_fault.constprop.0+0x9c>)
   22f28:	f019 fdea 	bl	3cb00 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   22f2c:	4c18      	ldr	r4, [pc, #96]	; (22f90 <bus_fault.constprop.0+0x90>)
   22f2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f30:	059b      	lsls	r3, r3, #22
   22f32:	d510      	bpl.n	22f56 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   22f34:	481a      	ldr	r0, [pc, #104]	; (22fa0 <bus_fault.constprop.0+0xa0>)
   22f36:	2145      	movs	r1, #69	; 0x45
   22f38:	f019 fde2 	bl	3cb00 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   22f3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   22f3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f40:	0418      	lsls	r0, r3, #16
   22f42:	d508      	bpl.n	22f56 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   22f44:	2145      	movs	r1, #69	; 0x45
   22f46:	4817      	ldr	r0, [pc, #92]	; (22fa4 <bus_fault.constprop.0+0xa4>)
   22f48:	f019 fdda 	bl	3cb00 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   22f4c:	b11e      	cbz	r6, 22f56 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   22f4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   22f54:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   22f56:	4c0e      	ldr	r4, [pc, #56]	; (22f90 <bus_fault.constprop.0+0x90>)
   22f58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f5a:	0559      	lsls	r1, r3, #21
   22f5c:	d503      	bpl.n	22f66 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   22f5e:	2145      	movs	r1, #69	; 0x45
   22f60:	4811      	ldr	r0, [pc, #68]	; (22fa8 <bus_fault.constprop.0+0xa8>)
   22f62:	f019 fdcd 	bl	3cb00 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   22f66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f68:	05da      	lsls	r2, r3, #23
   22f6a:	d50b      	bpl.n	22f84 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   22f6c:	2145      	movs	r1, #69	; 0x45
   22f6e:	480f      	ldr	r0, [pc, #60]	; (22fac <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   22f70:	f019 fdc6 	bl	3cb00 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
   22f74:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   22f76:	4a06      	ldr	r2, [pc, #24]	; (22f90 <bus_fault.constprop.0+0x90>)
   22f78:	6a93      	ldr	r3, [r2, #40]	; 0x28
   22f7a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   22f7e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   22f80:	7028      	strb	r0, [r5, #0]
}
   22f82:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   22f84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f86:	049b      	lsls	r3, r3, #18
   22f88:	d5f4      	bpl.n	22f74 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   22f8a:	2145      	movs	r1, #69	; 0x45
   22f8c:	4808      	ldr	r0, [pc, #32]	; (22fb0 <bus_fault.constprop.0+0xb0>)
   22f8e:	e7ef      	b.n	22f70 <bus_fault.constprop.0+0x70>
   22f90:	e000ed00 	.word	0xe000ed00
   22f94:	000446f8 	.word	0x000446f8
   22f98:	00044713 	.word	0x00044713
   22f9c:	00044729 	.word	0x00044729
   22fa0:	00044741 	.word	0x00044741
   22fa4:	0004475f 	.word	0x0004475f
   22fa8:	00044779 	.word	0x00044779
   22fac:	00044799 	.word	0x00044799
   22fb0:	000447b6 	.word	0x000447b6

00022fb4 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   22fb4:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   22fb6:	4c2e      	ldr	r4, [pc, #184]	; (23070 <mem_manage_fault.constprop.0+0xbc>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   22fb8:	4606      	mov	r6, r0
   22fba:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   22fbc:	482d      	ldr	r0, [pc, #180]	; (23074 <mem_manage_fault.constprop.0+0xc0>)
   22fbe:	2145      	movs	r1, #69	; 0x45
   22fc0:	f019 fd9e 	bl	3cb00 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   22fc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22fc6:	06db      	lsls	r3, r3, #27
   22fc8:	d503      	bpl.n	22fd2 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   22fca:	2145      	movs	r1, #69	; 0x45
   22fcc:	482a      	ldr	r0, [pc, #168]	; (23078 <mem_manage_fault.constprop.0+0xc4>)
   22fce:	f019 fd97 	bl	3cb00 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   22fd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22fd4:	071c      	lsls	r4, r3, #28
   22fd6:	d503      	bpl.n	22fe0 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   22fd8:	2145      	movs	r1, #69	; 0x45
   22fda:	4828      	ldr	r0, [pc, #160]	; (2307c <mem_manage_fault.constprop.0+0xc8>)
   22fdc:	f019 fd90 	bl	3cb00 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   22fe0:	4c23      	ldr	r4, [pc, #140]	; (23070 <mem_manage_fault.constprop.0+0xbc>)
   22fe2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22fe4:	0798      	lsls	r0, r3, #30
   22fe6:	d510      	bpl.n	2300a <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
   22fe8:	2145      	movs	r1, #69	; 0x45
   22fea:	4825      	ldr	r0, [pc, #148]	; (23080 <mem_manage_fault.constprop.0+0xcc>)
   22fec:	f019 fd88 	bl	3cb00 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   22ff0:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   22ff2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22ff4:	0619      	lsls	r1, r3, #24
   22ff6:	d508      	bpl.n	2300a <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   22ff8:	2145      	movs	r1, #69	; 0x45
   22ffa:	4822      	ldr	r0, [pc, #136]	; (23084 <mem_manage_fault.constprop.0+0xd0>)
   22ffc:	f019 fd80 	bl	3cb00 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   23000:	b11e      	cbz	r6, 2300a <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   23002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   23008:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   2300a:	4c19      	ldr	r4, [pc, #100]	; (23070 <mem_manage_fault.constprop.0+0xbc>)
   2300c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2300e:	07db      	lsls	r3, r3, #31
   23010:	d503      	bpl.n	2301a <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
   23012:	2145      	movs	r1, #69	; 0x45
   23014:	481c      	ldr	r0, [pc, #112]	; (23088 <mem_manage_fault.constprop.0+0xd4>)
   23016:	f019 fd73 	bl	3cb00 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2301a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2301c:	069e      	lsls	r6, r3, #26
   2301e:	d503      	bpl.n	23028 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
   23020:	2145      	movs	r1, #69	; 0x45
   23022:	481a      	ldr	r0, [pc, #104]	; (2308c <mem_manage_fault.constprop.0+0xd8>)
   23024:	f019 fd6c 	bl	3cb00 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   23028:	4b11      	ldr	r3, [pc, #68]	; (23070 <mem_manage_fault.constprop.0+0xbc>)
   2302a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2302c:	06d4      	lsls	r4, r2, #27
   2302e:	d402      	bmi.n	23036 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   23030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   23032:	0790      	lsls	r0, r2, #30
   23034:	d50d      	bpl.n	23052 <mem_manage_fault.constprop.0+0x9e>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   23036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23038:	06d9      	lsls	r1, r3, #27
   2303a:	d50a      	bpl.n	23052 <mem_manage_fault.constprop.0+0x9e>
   2303c:	4914      	ldr	r1, [pc, #80]	; (23090 <mem_manage_fault.constprop.0+0xdc>)
   2303e:	4815      	ldr	r0, [pc, #84]	; (23094 <mem_manage_fault.constprop.0+0xe0>)
   23040:	f240 124f 	movw	r2, #335	; 0x14f
   23044:	f019 fd22 	bl	3ca8c <assert_print>
   23048:	f240 114f 	movw	r1, #335	; 0x14f
   2304c:	4810      	ldr	r0, [pc, #64]	; (23090 <mem_manage_fault.constprop.0+0xdc>)
   2304e:	f019 fd16 	bl	3ca7e <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
   23052:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   23054:	4b06      	ldr	r3, [pc, #24]	; (23070 <mem_manage_fault.constprop.0+0xbc>)
   23056:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   23058:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   2305a:	bf42      	ittt	mi
   2305c:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   2305e:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   23062:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   23064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   23066:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   2306a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2306c:	7028      	strb	r0, [r5, #0]
}
   2306e:	bd70      	pop	{r4, r5, r6, pc}
   23070:	e000ed00 	.word	0xe000ed00
   23074:	000447ea 	.word	0x000447ea
   23078:	00044805 	.word	0x00044805
   2307c:	00044729 	.word	0x00044729
   23080:	0004483d 	.word	0x0004483d
   23084:	0004485a 	.word	0x0004485a
   23088:	00044875 	.word	0x00044875
   2308c:	000447b6 	.word	0x000447b6
   23090:	00044899 	.word	0x00044899
   23094:	0004409e 	.word	0x0004409e

00023098 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   23098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2309c:	4b69      	ldr	r3, [pc, #420]	; (23244 <z_arm_fault+0x1ac>)
{
   2309e:	4607      	mov	r7, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   230a0:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
   230a4:	460d      	mov	r5, r1
   230a6:	4614      	mov	r4, r2
   230a8:	2600      	movs	r6, #0
   230aa:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   230ac:	f3c9 0808 	ubfx	r8, r9, #0, #9
   230b0:	f386 8811 	msr	BASEPRI, r6
   230b4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   230b8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   230bc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   230c0:	d111      	bne.n	230e6 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   230c2:	07d0      	lsls	r0, r2, #31
   230c4:	d40f      	bmi.n	230e6 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   230c6:	0651      	lsls	r1, r2, #25
   230c8:	d404      	bmi.n	230d4 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   230ca:	0722      	lsls	r2, r4, #28
   230cc:	d409      	bmi.n	230e2 <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)msp;
   230ce:	463d      	mov	r5, r7
			*nested_exc = true;
   230d0:	2601      	movs	r6, #1
   230d2:	e007      	b.n	230e4 <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   230d4:	2145      	movs	r1, #69	; 0x45
   230d6:	485c      	ldr	r0, [pc, #368]	; (23248 <z_arm_fault+0x1b0>)
   230d8:	f019 fd12 	bl	3cb00 <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   230dc:	f014 0404 	ands.w	r4, r4, #4
   230e0:	d01c      	beq.n	2311c <z_arm_fault+0x84>
	*nested_exc = false;
   230e2:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   230e4:	b95d      	cbnz	r5, 230fe <z_arm_fault+0x66>
   230e6:	f240 32fb 	movw	r2, #1019	; 0x3fb
   230ea:	4958      	ldr	r1, [pc, #352]	; (2324c <z_arm_fault+0x1b4>)
   230ec:	4858      	ldr	r0, [pc, #352]	; (23250 <z_arm_fault+0x1b8>)
   230ee:	f019 fccd 	bl	3ca8c <assert_print>
   230f2:	f240 31fb 	movw	r1, #1019	; 0x3fb
   230f6:	4855      	ldr	r0, [pc, #340]	; (2324c <z_arm_fault+0x1b4>)
   230f8:	f019 fcc1 	bl	3ca7e <assert_post_action>
   230fc:	2500      	movs	r5, #0
	*recoverable = false;
   230fe:	2400      	movs	r4, #0
	switch (fault) {
   23100:	f1a8 0303 	sub.w	r3, r8, #3
	*recoverable = false;
   23104:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   23108:	2b09      	cmp	r3, #9
   2310a:	f200 8089 	bhi.w	23220 <z_arm_fault+0x188>
   2310e:	e8df f003 	tbb	[pc, r3]
   23112:	7c07      	.short	0x7c07
   23114:	87876480 	.word	0x87876480
   23118:	84878787 	.word	0x84878787
			ptr_esf = (z_arch_esf_t *)msp;
   2311c:	463d      	mov	r5, r7
	if (!alternative_state_exc) {
   2311e:	e7e0      	b.n	230e2 <z_arm_fault+0x4a>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   23120:	4f48      	ldr	r7, [pc, #288]	; (23244 <z_arm_fault+0x1ac>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   23122:	2145      	movs	r1, #69	; 0x45
   23124:	484b      	ldr	r0, [pc, #300]	; (23254 <z_arm_fault+0x1bc>)
   23126:	f019 fceb 	bl	3cb00 <z_log_minimal_printk>
	*recoverable = false;
   2312a:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2312e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   23130:	f014 0402 	ands.w	r4, r4, #2
   23134:	d005      	beq.n	23142 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   23136:	2145      	movs	r1, #69	; 0x45
   23138:	4847      	ldr	r0, [pc, #284]	; (23258 <z_arm_fault+0x1c0>)
	PR_FAULT_INFO(
   2313a:	f019 fce1 	bl	3cb00 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2313e:	2400      	movs	r4, #0
}
   23140:	e006      	b.n	23150 <z_arm_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   23142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23144:	2b00      	cmp	r3, #0
   23146:	da1d      	bge.n	23184 <z_arm_fault+0xec>
		PR_EXC("  Debug event");
   23148:	2145      	movs	r1, #69	; 0x45
   2314a:	4844      	ldr	r0, [pc, #272]	; (2325c <z_arm_fault+0x1c4>)
   2314c:	f019 fcd8 	bl	3cb00 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   23150:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23154:	b99b      	cbnz	r3, 2317e <z_arm_fault+0xe6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   23156:	2268      	movs	r2, #104	; 0x68
   23158:	4629      	mov	r1, r5
   2315a:	a802      	add	r0, sp, #8
   2315c:	f01e f94a 	bl	413f4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   23160:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23162:	2e00      	cmp	r6, #0
   23164:	d069      	beq.n	2323a <z_arm_fault+0x1a2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   23166:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2316a:	b922      	cbnz	r2, 23176 <z_arm_fault+0xde>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   2316c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   23170:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   23174:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   23176:	4620      	mov	r0, r4
   23178:	a902      	add	r1, sp, #8
   2317a:	f7ff fc85 	bl	22a88 <z_arm_fatal_error>
}
   2317e:	b01d      	add	sp, #116	; 0x74
   23180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   23184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23186:	005b      	lsls	r3, r3, #1
   23188:	d536      	bpl.n	231f8 <z_arm_fault+0x160>
		PR_EXC("  Fault escalation (see below)");
   2318a:	2145      	movs	r1, #69	; 0x45
   2318c:	4834      	ldr	r0, [pc, #208]	; (23260 <z_arm_fault+0x1c8>)
   2318e:	f019 fcb7 	bl	3cb00 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
   23192:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   23194:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   23198:	f64d 7302 	movw	r3, #57090	; 0xdf02
   2319c:	429a      	cmp	r2, r3
   2319e:	d106      	bne.n	231ae <z_arm_fault+0x116>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   231a0:	2145      	movs	r1, #69	; 0x45
   231a2:	682a      	ldr	r2, [r5, #0]
   231a4:	482f      	ldr	r0, [pc, #188]	; (23264 <z_arm_fault+0x1cc>)
   231a6:	f019 fcab 	bl	3cb00 <z_log_minimal_printk>
			reason = esf->basic.r0;
   231aa:	682c      	ldr	r4, [r5, #0]
   231ac:	e7d0      	b.n	23150 <z_arm_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
   231ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   231b2:	b133      	cbz	r3, 231c2 <z_arm_fault+0x12a>
			reason = mem_manage_fault(esf, 1, recoverable);
   231b4:	2001      	movs	r0, #1
   231b6:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   231ba:	f7ff fefb 	bl	22fb4 <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
   231be:	4604      	mov	r4, r0
		break;
   231c0:	e7c6      	b.n	23150 <z_arm_fault+0xb8>
		} else if (SCB_BFSR != 0) {
   231c2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   231c6:	b12b      	cbz	r3, 231d4 <z_arm_fault+0x13c>
			reason = bus_fault(esf, 1, recoverable);
   231c8:	2001      	movs	r0, #1
   231ca:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   231ce:	f7ff fe97 	bl	22f00 <bus_fault.constprop.0>
   231d2:	e7f4      	b.n	231be <z_arm_fault+0x126>
		} else if (SCB_UFSR != 0) {
   231d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   231d6:	b29b      	uxth	r3, r3
   231d8:	b113      	cbz	r3, 231e0 <z_arm_fault+0x148>
		reason = usage_fault(esf);
   231da:	f7ff fe3b 	bl	22e54 <usage_fault.constprop.0>
   231de:	e7ee      	b.n	231be <z_arm_fault+0x126>
			__ASSERT(0,
   231e0:	491a      	ldr	r1, [pc, #104]	; (2324c <z_arm_fault+0x1b4>)
   231e2:	f240 22cd 	movw	r2, #717	; 0x2cd
   231e6:	481a      	ldr	r0, [pc, #104]	; (23250 <z_arm_fault+0x1b8>)
   231e8:	f019 fc50 	bl	3ca8c <assert_print>
   231ec:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
   231f0:	4816      	ldr	r0, [pc, #88]	; (2324c <z_arm_fault+0x1b4>)
   231f2:	f019 fc44 	bl	3ca7e <assert_post_action>
   231f6:	e7ab      	b.n	23150 <z_arm_fault+0xb8>
   231f8:	4914      	ldr	r1, [pc, #80]	; (2324c <z_arm_fault+0x1b4>)
   231fa:	f240 22d1 	movw	r2, #721	; 0x2d1
   231fe:	4814      	ldr	r0, [pc, #80]	; (23250 <z_arm_fault+0x1b8>)
   23200:	f019 fc44 	bl	3ca8c <assert_print>
   23204:	f240 21d1 	movw	r1, #721	; 0x2d1
   23208:	e7f2      	b.n	231f0 <z_arm_fault+0x158>
		reason = mem_manage_fault(esf, 0, recoverable);
   2320a:	2000      	movs	r0, #0
   2320c:	f10d 0107 	add.w	r1, sp, #7
   23210:	e7d3      	b.n	231ba <z_arm_fault+0x122>
		reason = bus_fault(esf, 0, recoverable);
   23212:	2000      	movs	r0, #0
   23214:	f10d 0107 	add.w	r1, sp, #7
   23218:	e7d9      	b.n	231ce <z_arm_fault+0x136>
	PR_FAULT_INFO(
   2321a:	2145      	movs	r1, #69	; 0x45
   2321c:	4812      	ldr	r0, [pc, #72]	; (23268 <z_arm_fault+0x1d0>)
   2321e:	e78c      	b.n	2313a <z_arm_fault+0xa2>
	PR_FAULT_INFO("***** %s %d) *****",
   23220:	4912      	ldr	r1, [pc, #72]	; (2326c <z_arm_fault+0x1d4>)
   23222:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
   23226:	4a12      	ldr	r2, [pc, #72]	; (23270 <z_arm_fault+0x1d8>)
   23228:	4812      	ldr	r0, [pc, #72]	; (23274 <z_arm_fault+0x1dc>)
   2322a:	bf08      	it	eq
   2322c:	460a      	moveq	r2, r1
   2322e:	f1a8 0310 	sub.w	r3, r8, #16
   23232:	2145      	movs	r1, #69	; 0x45
   23234:	f019 fc64 	bl	3cb00 <z_log_minimal_printk>
   23238:	e781      	b.n	2313e <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2323a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2323e:	f023 0301 	bic.w	r3, r3, #1
   23242:	e797      	b.n	23174 <z_arm_fault+0xdc>
   23244:	e000ed00 	.word	0xe000ed00
   23248:	00044901 	.word	0x00044901
   2324c:	00044899 	.word	0x00044899
   23250:	0004409e 	.word	0x0004409e
   23254:	00044929 	.word	0x00044929
   23258:	00044945 	.word	0x00044945
   2325c:	0004496b 	.word	0x0004496b
   23260:	0004497e 	.word	0x0004497e
   23264:	000449a2 	.word	0x000449a2
   23268:	000449c3 	.word	0x000449c3
   2326c:	000448d3 	.word	0x000448d3
   23270:	000448e8 	.word	0x000448e8
   23274:	000449ec 	.word	0x000449ec

00023278 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   23278:	4b04      	ldr	r3, [pc, #16]	; (2328c <z_arm_fault_init+0x14>)
   2327a:	695a      	ldr	r2, [r3, #20]
   2327c:	f042 0210 	orr.w	r2, r2, #16
   23280:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   23282:	695a      	ldr	r2, [r3, #20]
   23284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   23288:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   2328a:	4770      	bx	lr
   2328c:	e000ed00 	.word	0xe000ed00

00023290 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   23290:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   23294:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   23298:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   2329a:	4672      	mov	r2, lr
	bl z_arm_fault
   2329c:	f7ff fefc 	bl	23098 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   232a0:	bd01      	pop	{r0, pc}
   232a2:	bf00      	nop

000232a4 <z_arm_save_fp_context>:
 * @file @brief Helper functions for saving and restoring the FP context.
 *
 */

void z_arm_save_fp_context(struct fpu_ctx_full *buffer)
{
   232a4:	b510      	push	{r4, lr}
#if defined(CONFIG_FPU_SHARING)
	__ASSERT_NO_MSG(buffer != NULL);
   232a6:	4604      	mov	r4, r0
   232a8:	b940      	cbnz	r0, 232bc <z_arm_save_fp_context+0x18>
   232aa:	4910      	ldr	r1, [pc, #64]	; (232ec <z_arm_save_fp_context+0x48>)
   232ac:	4810      	ldr	r0, [pc, #64]	; (232f0 <z_arm_save_fp_context+0x4c>)
   232ae:	2214      	movs	r2, #20
   232b0:	f019 fbec 	bl	3ca8c <assert_print>
   232b4:	2114      	movs	r1, #20
   232b6:	480d      	ldr	r0, [pc, #52]	; (232ec <z_arm_save_fp_context+0x48>)
   232b8:	f019 fbe1 	bl	3ca7e <assert_post_action>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   232bc:	f3ef 8314 	mrs	r3, CONTROL

	uint32_t CONTROL = __get_CONTROL();

	if (CONTROL & CONTROL_FPCA_Msk) {
   232c0:	075a      	lsls	r2, r3, #29
   232c2:	d512      	bpl.n	232ea <z_arm_save_fp_context+0x46>
		/* Store caller-saved and callee-saved FP registers. */
		__asm__ volatile(
   232c4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   232c8:	ec84 0a10 	vstmia	r4, {s0-s15}
   232cc:	ec82 8a10 	vstmia	r2, {s16-s31}
  return __builtin_arm_get_fpscr();
   232d0:	eef1 2a10 	vmrs	r2, fpscr
			"vstmia %0, {s0-s15}\n"
			"vstmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);

		buffer->fpscr = __get_FPSCR();
   232d4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		buffer->ctx_saved = true;
   232d8:	2201      	movs	r2, #1

		/* Disable FPCA so no stacking of FP registers happens in TFM. */
		__set_CONTROL(CONTROL & ~CONTROL_FPCA_Msk);
   232da:	f023 0304 	bic.w	r3, r3, #4
		buffer->ctx_saved = true;
   232de:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   232e2:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   232e6:	f3bf 8f6f 	isb	sy
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   232ea:	bd10      	pop	{r4, pc}
   232ec:	00044a04 	.word	0x00044a04
   232f0:	0004409e 	.word	0x0004409e

000232f4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   232f4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   232f6:	2120      	movs	r1, #32
   232f8:	4803      	ldr	r0, [pc, #12]	; (23308 <z_arm_interrupt_init+0x14>)
   232fa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   232fc:	3301      	adds	r3, #1
   232fe:	2b41      	cmp	r3, #65	; 0x41
   23300:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   23304:	d1f9      	bne.n	232fa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   23306:	4770      	bx	lr
   23308:	e000e100 	.word	0xe000e100

0002330c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   2330c:	2000      	movs	r0, #0
    msr CONTROL, r0
   2330e:	f380 8814 	msr	CONTROL, r0
    isb
   23312:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   23316:	2000      	movs	r0, #0
    msr MSPLIM, r0
   23318:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   2331c:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   23320:	f01e ffb2 	bl	42288 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   23324:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   23326:	490e      	ldr	r1, [pc, #56]	; (23360 <__start+0x54>)
    str r0, [r1]
   23328:	6008      	str	r0, [r1, #0]
    dsb
   2332a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   2332e:	480d      	ldr	r0, [pc, #52]	; (23364 <__start+0x58>)
    msr msp, r0
   23330:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   23334:	f000 f83e 	bl	233b4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   23338:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2333a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2333e:	480a      	ldr	r0, [pc, #40]	; (23368 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   23340:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   23344:	1840      	adds	r0, r0, r1
    msr PSP, r0
   23346:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2334a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2334e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   23350:	4308      	orrs	r0, r1
    msr CONTROL, r0
   23352:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   23356:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2335a:	f7ff fc65 	bl	22c28 <z_arm_prep_c>
   2335e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   23360:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   23364:	20021a00 	.word	0x20021a00
    ldr r0, =z_interrupt_stacks
   23368:	20021b40 	.word	0x20021b40

0002336c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   2336c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   23370:	4905      	ldr	r1, [pc, #20]	; (23388 <sys_arch_reboot+0x1c>)
   23372:	4b06      	ldr	r3, [pc, #24]	; (2338c <sys_arch_reboot+0x20>)
   23374:	68ca      	ldr	r2, [r1, #12]
   23376:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2337a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2337c:	60cb      	str	r3, [r1, #12]
   2337e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   23382:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   23384:	e7fd      	b.n	23382 <sys_arch_reboot+0x16>
   23386:	bf00      	nop
   23388:	e000ed00 	.word	0xe000ed00
   2338c:	05fa0004 	.word	0x05fa0004

00023390 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   23390:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   23392:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   23394:	4906      	ldr	r1, [pc, #24]	; (233b0 <z_arm_clear_arm_mpu_config+0x20>)
   23396:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   2339a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   2339e:	4293      	cmp	r3, r2
   233a0:	d100      	bne.n	233a4 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   233a2:	4770      	bx	lr
  mpu->RNR = rnr;
   233a4:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   233a8:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   233ac:	3301      	adds	r3, #1
   233ae:	e7f6      	b.n	2339e <z_arm_clear_arm_mpu_config+0xe>
   233b0:	e000ed00 	.word	0xe000ed00

000233b4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   233b4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   233b6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   233b8:	2400      	movs	r4, #0
   233ba:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   233be:	f7ff ffe7 	bl	23390 <z_arm_clear_arm_mpu_config>
   233c2:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   233c4:	f04f 30ff 	mov.w	r0, #4294967295
   233c8:	4a0b      	ldr	r2, [pc, #44]	; (233f8 <z_arm_init_arch_hw_at_boot+0x44>)
   233ca:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   233ce:	3301      	adds	r3, #1
   233d0:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   233d2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   233d6:	d1f8      	bne.n	233ca <z_arm_init_arch_hw_at_boot+0x16>
   233d8:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   233da:	f04f 30ff 	mov.w	r0, #4294967295
   233de:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   233e2:	3301      	adds	r3, #1
   233e4:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   233e6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   233ea:	d1f8      	bne.n	233de <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
   233ec:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   233ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   233f2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   233f6:	bd10      	pop	{r4, pc}
   233f8:	e000e100 	.word	0xe000e100

000233fc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   233fc:	4b08      	ldr	r3, [pc, #32]	; (23420 <z_impl_k_thread_abort+0x24>)
   233fe:	689b      	ldr	r3, [r3, #8]
   23400:	4283      	cmp	r3, r0
   23402:	d10b      	bne.n	2341c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23404:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   23408:	b143      	cbz	r3, 2341c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2340a:	4b06      	ldr	r3, [pc, #24]	; (23424 <z_impl_k_thread_abort+0x28>)
   2340c:	685a      	ldr	r2, [r3, #4]
   2340e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   23412:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   23414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   23416:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   2341a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   2341c:	f015 b92e 	b.w	3867c <z_thread_abort>
   23420:	2001a500 	.word	0x2001a500
   23424:	e000ed00 	.word	0xe000ed00

00023428 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   23428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2342a:	4c09      	ldr	r4, [pc, #36]	; (23450 <z_arm_configure_static_mpu_regions+0x28>)
   2342c:	4a09      	ldr	r2, [pc, #36]	; (23454 <z_arm_configure_static_mpu_regions+0x2c>)
   2342e:	4623      	mov	r3, r4
   23430:	2101      	movs	r1, #1
   23432:	4809      	ldr	r0, [pc, #36]	; (23458 <z_arm_configure_static_mpu_regions+0x30>)
   23434:	f000 f92c 	bl	23690 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   23438:	2300      	movs	r3, #0
   2343a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   2343c:	4b07      	ldr	r3, [pc, #28]	; (2345c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2343e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   23440:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   23442:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   23444:	9301      	str	r3, [sp, #4]
   23446:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   23448:	f000 f93e 	bl	236c8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   2344c:	b004      	add	sp, #16
   2344e:	bd10      	pop	{r4, pc}
   23450:	20040000 	.word	0x20040000
   23454:	20014500 	.word	0x20014500
   23458:	00042a94 	.word	0x00042a94
   2345c:	20015150 	.word	0x20015150

00023460 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   23460:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   23462:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   23464:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   23466:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   2346a:	f004 031f 	and.w	r3, r4, #31
   2346e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   23470:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   23472:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   23474:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   23478:	4905      	ldr	r1, [pc, #20]	; (23490 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   2347a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   2347e:	f043 0301 	orr.w	r3, r3, #1
   23482:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
   23486:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
   2348a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   2348e:	bd10      	pop	{r4, pc}
   23490:	e000ed00 	.word	0xe000ed00

00023494 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
   23494:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   23496:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   23498:	680c      	ldr	r4, [r1, #0]
{
   2349a:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
   2349c:	890a      	ldrh	r2, [r1, #8]
   2349e:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   234a0:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   234a2:	3b01      	subs	r3, #1
   234a4:	f024 041f 	bic.w	r4, r4, #31
   234a8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   234aa:	f002 021f 	and.w	r2, r2, #31
   234ae:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   234b2:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   234b6:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   234b8:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   234ba:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   234be:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
   234c0:	d909      	bls.n	234d6 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   234c2:	4602      	mov	r2, r0
   234c4:	2145      	movs	r1, #69	; 0x45
   234c6:	4806      	ldr	r0, [pc, #24]	; (234e0 <mpu_configure_region+0x4c>)
   234c8:	f019 fb1a 	bl	3cb00 <z_log_minimal_printk>
   234cc:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
   234d0:	4620      	mov	r0, r4
   234d2:	b005      	add	sp, #20
   234d4:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   234d6:	4669      	mov	r1, sp
   234d8:	f7ff ffc2 	bl	23460 <region_init>
	return region_allocate_and_init(index,
   234dc:	e7f8      	b.n	234d0 <mpu_configure_region+0x3c>
   234de:	bf00      	nop
   234e0:	00044a40 	.word	0x00044a40

000234e4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   234e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234e8:	4689      	mov	r9, r1
   234ea:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   234ec:	4606      	mov	r6, r0
   234ee:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   234f2:	4d58      	ldr	r5, [pc, #352]	; (23654 <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   234f4:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   234f6:	45c8      	cmp	r8, r9
   234f8:	da27      	bge.n	2354a <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
   234fa:	f8d6 a004 	ldr.w	sl, [r6, #4]
   234fe:	f1ba 0f00 	cmp.w	sl, #0
   23502:	d044      	beq.n	2358e <mpu_configure_regions_and_partition.constprop.0+0xaa>
		&&
   23504:	f1ba 0f1f 	cmp.w	sl, #31
   23508:	d918      	bls.n	2353c <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
   2350a:	f01a 0f1f 	tst.w	sl, #31
   2350e:	d115      	bne.n	2353c <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
   23510:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   23514:	f01b 0f1f 	tst.w	fp, #31
   23518:	d110      	bne.n	2353c <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   2351a:	4658      	mov	r0, fp
   2351c:	f01a f905 	bl	3d72a <arm_cmse_mpu_region_get>
   23520:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   23522:	eb0a 000b 	add.w	r0, sl, fp
   23526:	3801      	subs	r0, #1
   23528:	f01a f8ff 	bl	3d72a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   2352c:	4287      	cmp	r7, r0
   2352e:	d010      	beq.n	23552 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
   23530:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   23534:	463a      	mov	r2, r7
   23536:	2145      	movs	r1, #69	; 0x45
   23538:	4847      	ldr	r0, [pc, #284]	; (23658 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   2353a:	e002      	b.n	23542 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   2353c:	4642      	mov	r2, r8
   2353e:	2145      	movs	r1, #69	; 0x45
   23540:	4846      	ldr	r0, [pc, #280]	; (2365c <mpu_configure_regions_and_partition.constprop.0+0x178>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   23542:	f019 fadd 	bl	3cb00 <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   23546:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   2354a:	4620      	mov	r0, r4
   2354c:	b005      	add	sp, #20
   2354e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   23552:	f117 0f16 	cmn.w	r7, #22
   23556:	d0ed      	beq.n	23534 <mpu_configure_regions_and_partition.constprop.0+0x50>
   23558:	42bc      	cmp	r4, r7
   2355a:	ddeb      	ble.n	23534 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   2355c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   23560:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
   23564:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   23568:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   2356c:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   23570:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   23574:	e9d6 3200 	ldrd	r3, r2, [r6]
   23578:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   2357a:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   2357c:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   23580:	d11d      	bne.n	235be <mpu_configure_regions_and_partition.constprop.0+0xda>
   23582:	45d3      	cmp	fp, sl
   23584:	d107      	bne.n	23596 <mpu_configure_regions_and_partition.constprop.0+0xb2>
			mpu_configure_region(u_reg_index, &regions[i]);
   23586:	4631      	mov	r1, r6
   23588:	b2f8      	uxtb	r0, r7
   2358a:	f7ff ff83 	bl	23494 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   2358e:	f108 0801 	add.w	r8, r8, #1
   23592:	360c      	adds	r6, #12
   23594:	e7af      	b.n	234f6 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   23596:	4631      	mov	r1, r6
	MPU->RNR = index;
   23598:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2359c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
   235a0:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   235a4:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   235a8:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   235aa:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   235ae:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   235b0:	f7ff ff70 	bl	23494 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   235b4:	f110 0f16 	cmn.w	r0, #22
   235b8:	d0c5      	beq.n	23546 <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
   235ba:	1c44      	adds	r4, r0, #1
   235bc:	e7e7      	b.n	2358e <mpu_configure_regions_and_partition.constprop.0+0xaa>
				regions[i].start - 1);
   235be:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
   235c0:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   235c2:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
   235c4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   235c8:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   235cc:	d108      	bne.n	235e0 <mpu_configure_regions_and_partition.constprop.0+0xfc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   235ce:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   235d2:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   235d4:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   235d8:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   235da:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   235de:	e7e7      	b.n	235b0 <mpu_configure_regions_and_partition.constprop.0+0xcc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   235e0:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
   235e4:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   235e8:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   235ea:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   235ee:	4631      	mov	r1, r6
   235f0:	f7ff ff50 	bl	23494 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   235f4:	f110 0f16 	cmn.w	r0, #22
   235f8:	d0a5      	beq.n	23546 <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
   235fa:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   235fe:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
   23602:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   23606:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   2360a:	f362 0304 	bfi	r3, r2, #0, #5
   2360e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   23612:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   23616:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2361a:	085b      	lsrs	r3, r3, #1
   2361c:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
   23620:	e9d6 3100 	ldrd	r3, r1, [r6]
   23624:	440b      	add	r3, r1
   23626:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   23628:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   2362c:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   2362e:	445b      	add	r3, fp
   23630:	eba3 030a 	sub.w	r3, r3, sl
   23634:	b2c0      	uxtb	r0, r0
   23636:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   2363a:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   2363c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
   23640:	9303      	str	r3, [sp, #12]
   23642:	d903      	bls.n	2364c <mpu_configure_regions_and_partition.constprop.0+0x168>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   23644:	4602      	mov	r2, r0
   23646:	2145      	movs	r1, #69	; 0x45
   23648:	4805      	ldr	r0, [pc, #20]	; (23660 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   2364a:	e77a      	b.n	23542 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
   2364c:	4669      	mov	r1, sp
   2364e:	f7ff ff07 	bl	23460 <region_init>
   23652:	e7b2      	b.n	235ba <mpu_configure_regions_and_partition.constprop.0+0xd6>
   23654:	e000ed00 	.word	0xe000ed00
   23658:	00044a93 	.word	0x00044a93
   2365c:	00044a6b 	.word	0x00044a6b
   23660:	00044a40 	.word	0x00044a40

00023664 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   23664:	2205      	movs	r2, #5
   23666:	4b04      	ldr	r3, [pc, #16]	; (23678 <arm_core_mpu_enable+0x14>)
   23668:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   2366c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   23670:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   23674:	4770      	bx	lr
   23676:	bf00      	nop
   23678:	e000ed00 	.word	0xe000ed00

0002367c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   2367c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   23680:	2200      	movs	r2, #0
   23682:	4b02      	ldr	r3, [pc, #8]	; (2368c <arm_core_mpu_disable+0x10>)
   23684:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   23688:	4770      	bx	lr
   2368a:	bf00      	nop
   2368c:	e000ed00 	.word	0xe000ed00

00023690 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   23690:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   23692:	4c0a      	ldr	r4, [pc, #40]	; (236bc <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   23694:	7822      	ldrb	r2, [r4, #0]
   23696:	f7ff ff25 	bl	234e4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2369a:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   2369c:	3016      	adds	r0, #22
   2369e:	d10c      	bne.n	236ba <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   236a0:	4907      	ldr	r1, [pc, #28]	; (236c0 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   236a2:	4808      	ldr	r0, [pc, #32]	; (236c4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   236a4:	f240 1211 	movw	r2, #273	; 0x111
   236a8:	f019 f9f0 	bl	3ca8c <assert_print>
			regions_num);
	}
}
   236ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   236b0:	f240 1111 	movw	r1, #273	; 0x111
   236b4:	4802      	ldr	r0, [pc, #8]	; (236c0 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   236b6:	f019 b9e2 	b.w	3ca7e <assert_post_action>
}
   236ba:	bd10      	pop	{r4, pc}
   236bc:	2001a5a3 	.word	0x2001a5a3
   236c0:	00044abb 	.word	0x00044abb
   236c4:	0004409e 	.word	0x0004409e

000236c8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   236c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236cc:	4d30      	ldr	r5, [pc, #192]	; (23790 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   236ce:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   236d0:	4606      	mov	r6, r0
   236d2:	f04f 0800 	mov.w	r8, #0
   236d6:	46ab      	mov	fp, r5
	MPU->RNR = index;
   236d8:	4f2e      	ldr	r7, [pc, #184]	; (23794 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   236da:	45d0      	cmp	r8, sl
   236dc:	db02      	blt.n	236e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   236de:	b003      	add	sp, #12
   236e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   236e4:	f8d6 9004 	ldr.w	r9, [r6, #4]
   236e8:	f1b9 0f00 	cmp.w	r9, #0
   236ec:	d04a      	beq.n	23784 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   236ee:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   236f0:	4608      	mov	r0, r1
   236f2:	9101      	str	r1, [sp, #4]
   236f4:	f01a f819 	bl	3d72a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   236f8:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   236fa:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   236fc:	eb09 0001 	add.w	r0, r9, r1
   23700:	3801      	subs	r0, #1
   23702:	f01a f812 	bl	3d72a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   23706:	4284      	cmp	r4, r0
   23708:	f04f 0214 	mov.w	r2, #20
   2370c:	4b22      	ldr	r3, [pc, #136]	; (23798 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   2370e:	d013      	beq.n	23738 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
   23710:	f06f 0315 	mvn.w	r3, #21
   23714:	fb02 f808 	mul.w	r8, r2, r8
   23718:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   2371c:	f240 1221 	movw	r2, #289	; 0x121
   23720:	491e      	ldr	r1, [pc, #120]	; (2379c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   23722:	481f      	ldr	r0, [pc, #124]	; (237a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   23724:	f019 f9b2 	bl	3ca8c <assert_print>
   23728:	f240 1121 	movw	r1, #289	; 0x121
   2372c:	481b      	ldr	r0, [pc, #108]	; (2379c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
   2372e:	b003      	add	sp, #12
   23730:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   23734:	f019 b9a3 	b.w	3ca7e <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   23738:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   2373c:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   2373e:	d0ed      	beq.n	2371c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   23740:	7819      	ldrb	r1, [r3, #0]
   23742:	42a1      	cmp	r1, r4
   23744:	ddea      	ble.n	2371c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   23746:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   2374a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
   2374e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   23752:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
   23756:	f100 0108 	add.w	r1, r0, #8
   2375a:	7b00      	ldrb	r0, [r0, #12]
   2375c:	f364 0004 	bfi	r0, r4, #0, #5
   23760:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   23762:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   23766:	790c      	ldrb	r4, [r1, #4]
   23768:	0840      	lsrs	r0, r0, #1
   2376a:	f360 1447 	bfi	r4, r0, #5, #3
   2376e:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   23770:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   23774:	f021 011f 	bic.w	r1, r1, #31
   23778:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   2377a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
   2377e:	f021 011f 	bic.w	r1, r1, #31
   23782:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   23784:	f108 0801 	add.w	r8, r8, #1
   23788:	3514      	adds	r5, #20
   2378a:	360c      	adds	r6, #12
   2378c:	e7a5      	b.n	236da <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   2378e:	bf00      	nop
   23790:	200191cc 	.word	0x200191cc
   23794:	e000ed00 	.word	0xe000ed00
   23798:	2001a5a3 	.word	0x2001a5a3
   2379c:	00044abb 	.word	0x00044abb
   237a0:	0004409e 	.word	0x0004409e

000237a4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   237a4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   237a6:	4d1d      	ldr	r5, [pc, #116]	; (2381c <z_arm_mpu_init+0x78>)
   237a8:	682c      	ldr	r4, [r5, #0]
   237aa:	2c10      	cmp	r4, #16
   237ac:	d90d      	bls.n	237ca <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   237ae:	f44f 72a4 	mov.w	r2, #328	; 0x148
   237b2:	491b      	ldr	r1, [pc, #108]	; (23820 <z_arm_mpu_init+0x7c>)
   237b4:	481b      	ldr	r0, [pc, #108]	; (23824 <z_arm_mpu_init+0x80>)
   237b6:	f019 f969 	bl	3ca8c <assert_print>
   237ba:	4819      	ldr	r0, [pc, #100]	; (23820 <z_arm_mpu_init+0x7c>)
   237bc:	f44f 71a4 	mov.w	r1, #328	; 0x148
   237c0:	f019 f95d 	bl	3ca7e <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   237c4:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   237c8:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   237ca:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   237cc:	f7ff ff56 	bl	2367c <arm_core_mpu_disable>
	MPU->MAIR0 =
   237d0:	4b15      	ldr	r3, [pc, #84]	; (23828 <z_arm_mpu_init+0x84>)
   237d2:	4a16      	ldr	r2, [pc, #88]	; (2382c <z_arm_mpu_init+0x88>)
   237d4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   237d8:	4284      	cmp	r4, r0
   237da:	d117      	bne.n	2380c <z_arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
   237dc:	4b14      	ldr	r3, [pc, #80]	; (23830 <z_arm_mpu_init+0x8c>)
   237de:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   237e0:	f7ff ff40 	bl	23664 <arm_core_mpu_enable>
	__ASSERT(
   237e4:	4b10      	ldr	r3, [pc, #64]	; (23828 <z_arm_mpu_init+0x84>)
   237e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   237ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
   237ee:	2b10      	cmp	r3, #16
   237f0:	d00a      	beq.n	23808 <z_arm_mpu_init+0x64>
   237f2:	490b      	ldr	r1, [pc, #44]	; (23820 <z_arm_mpu_init+0x7c>)
   237f4:	480b      	ldr	r0, [pc, #44]	; (23824 <z_arm_mpu_init+0x80>)
   237f6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   237fa:	f019 f947 	bl	3ca8c <assert_print>
   237fe:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   23802:	4807      	ldr	r0, [pc, #28]	; (23820 <z_arm_mpu_init+0x7c>)
   23804:	f019 f93b 	bl	3ca7e <assert_post_action>
	return 0;
   23808:	2000      	movs	r0, #0
   2380a:	e7dd      	b.n	237c8 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   2380c:	6869      	ldr	r1, [r5, #4]
   2380e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   23812:	f7ff fe25 	bl	23460 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   23816:	3001      	adds	r0, #1
   23818:	e7de      	b.n	237d8 <z_arm_mpu_init+0x34>
   2381a:	bf00      	nop
   2381c:	00042aa0 	.word	0x00042aa0
   23820:	00044abb 	.word	0x00044abb
   23824:	0004409e 	.word	0x0004409e
   23828:	e000ed00 	.word	0xe000ed00
   2382c:	0044ffaa 	.word	0x0044ffaa
   23830:	2001a5a3 	.word	0x2001a5a3

00023834 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   23834:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   23836:	4b09      	ldr	r3, [pc, #36]	; (2385c <malloc_prepare+0x28>)
   23838:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   2383c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   23844:	d208      	bcs.n	23858 <malloc_prepare+0x24>
   23846:	4906      	ldr	r1, [pc, #24]	; (23860 <malloc_prepare+0x2c>)
   23848:	4806      	ldr	r0, [pc, #24]	; (23864 <malloc_prepare+0x30>)
   2384a:	2281      	movs	r2, #129	; 0x81
   2384c:	f019 f91e 	bl	3ca8c <assert_print>
   23850:	2181      	movs	r1, #129	; 0x81
   23852:	4803      	ldr	r0, [pc, #12]	; (23860 <malloc_prepare+0x2c>)
   23854:	f019 f913 	bl	3ca7e <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   23858:	2000      	movs	r0, #0
   2385a:	bd08      	pop	{r3, pc}
   2385c:	20028c40 	.word	0x20028c40
   23860:	00044af2 	.word	0x00044af2
   23864:	0004409e 	.word	0x0004409e

00023868 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   23868:	4b01      	ldr	r3, [pc, #4]	; (23870 <__stdout_hook_install+0x8>)
   2386a:	6018      	str	r0, [r3, #0]
}
   2386c:	4770      	bx	lr
   2386e:	bf00      	nop
   23870:	20014620 	.word	0x20014620

00023874 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   23874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23876:	4606      	mov	r6, r0
   23878:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   2387a:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   2387c:	4f06      	ldr	r7, [pc, #24]	; (23898 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   2387e:	42ac      	cmp	r4, r5
   23880:	da08      	bge.n	23894 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   23882:	683b      	ldr	r3, [r7, #0]
   23884:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   23886:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   23888:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   2388a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   2388e:	d001      	beq.n	23894 <z_impl_zephyr_read_stdin+0x20>
   23890:	280d      	cmp	r0, #13
   23892:	d1f4      	bne.n	2387e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   23894:	4620      	mov	r0, r4
   23896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23898:	2001461c 	.word	0x2001461c

0002389c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   2389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2389e:	460d      	mov	r5, r1
   238a0:	4f09      	ldr	r7, [pc, #36]	; (238c8 <z_impl_zephyr_write_stdout+0x2c>)
   238a2:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   238a4:	f1c0 0401 	rsb	r4, r0, #1
   238a8:	19a3      	adds	r3, r4, r6
   238aa:	429d      	cmp	r5, r3
   238ac:	dc01      	bgt.n	238b2 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   238ae:	4628      	mov	r0, r5
   238b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   238b2:	7873      	ldrb	r3, [r6, #1]
   238b4:	2b0a      	cmp	r3, #10
   238b6:	d102      	bne.n	238be <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   238b8:	200d      	movs	r0, #13
   238ba:	683b      	ldr	r3, [r7, #0]
   238bc:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   238be:	683b      	ldr	r3, [r7, #0]
   238c0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   238c4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   238c6:	e7ef      	b.n	238a8 <z_impl_zephyr_write_stdout+0xc>
   238c8:	20014620 	.word	0x20014620

000238cc <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   238cc:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   238ce:	2105      	movs	r1, #5
   238d0:	4801      	ldr	r0, [pc, #4]	; (238d8 <_exit+0xc>)
   238d2:	f7ff ffe3 	bl	2389c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   238d6:	e7fe      	b.n	238d6 <_exit+0xa>
   238d8:	00044b22 	.word	0x00044b22

000238dc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   238dc:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   238de:	4c07      	ldr	r4, [pc, #28]	; (238fc <_sbrk+0x20>)
   238e0:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   238e2:	18c2      	adds	r2, r0, r3
   238e4:	4806      	ldr	r0, [pc, #24]	; (23900 <_sbrk+0x24>)
   238e6:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   238ea:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   238ee:	428a      	cmp	r2, r1

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   238f0:	bf2e      	itee	cs
   238f2:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   238f6:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   238f8:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
   238fa:	bd10      	pop	{r4, pc}
   238fc:	200191e0 	.word	0x200191e0
   23900:	20028c40 	.word	0x20028c40

00023904 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   23904:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   23906:	4604      	mov	r4, r0
   23908:	b950      	cbnz	r0, 23920 <__retarget_lock_init_recursive+0x1c>
   2390a:	4910      	ldr	r1, [pc, #64]	; (2394c <__retarget_lock_init_recursive+0x48>)
   2390c:	4810      	ldr	r0, [pc, #64]	; (23950 <__retarget_lock_init_recursive+0x4c>)
   2390e:	f240 1277 	movw	r2, #375	; 0x177
   23912:	f019 f8bb 	bl	3ca8c <assert_print>
   23916:	f240 1177 	movw	r1, #375	; 0x177
   2391a:	480c      	ldr	r0, [pc, #48]	; (2394c <__retarget_lock_init_recursive+0x48>)
   2391c:	f019 f8af 	bl	3ca7e <assert_post_action>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   23920:	2014      	movs	r0, #20
   23922:	f016 f94b 	bl	39bbc <malloc>
   23926:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   23928:	b950      	cbnz	r0, 23940 <__retarget_lock_init_recursive+0x3c>
   2392a:	4908      	ldr	r1, [pc, #32]	; (2394c <__retarget_lock_init_recursive+0x48>)
   2392c:	4808      	ldr	r0, [pc, #32]	; (23950 <__retarget_lock_init_recursive+0x4c>)
   2392e:	f240 127f 	movw	r2, #383	; 0x17f
   23932:	f019 f8ab 	bl	3ca8c <assert_print>
   23936:	f240 117f 	movw	r1, #383	; 0x17f
   2393a:	4804      	ldr	r0, [pc, #16]	; (2394c <__retarget_lock_init_recursive+0x48>)
   2393c:	f019 f89f 	bl	3ca7e <assert_post_action>

	k_mutex_init((struct k_mutex *)*lock);
   23940:	6820      	ldr	r0, [r4, #0]
}
   23942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   23946:	f01d bb2b 	b.w	40fa0 <z_impl_k_mutex_init>
   2394a:	bf00      	nop
   2394c:	00044af2 	.word	0x00044af2
   23950:	0004409e 	.word	0x0004409e

00023954 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   23954:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   23956:	4604      	mov	r4, r0
   23958:	b950      	cbnz	r0, 23970 <__retarget_lock_acquire_recursive+0x1c>
   2395a:	490a      	ldr	r1, [pc, #40]	; (23984 <__retarget_lock_acquire_recursive+0x30>)
   2395c:	480a      	ldr	r0, [pc, #40]	; (23988 <__retarget_lock_acquire_recursive+0x34>)
   2395e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   23962:	f019 f893 	bl	3ca8c <assert_print>
   23966:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   2396a:	4806      	ldr	r0, [pc, #24]	; (23984 <__retarget_lock_acquire_recursive+0x30>)
   2396c:	f019 f887 	bl	3ca7e <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   23970:	f04f 32ff 	mov.w	r2, #4294967295
   23974:	4620      	mov	r0, r4
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   23976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2397a:	f04f 33ff 	mov.w	r3, #4294967295
   2397e:	f012 bfa9 	b.w	368d4 <z_impl_k_mutex_lock>
   23982:	bf00      	nop
   23984:	00044af2 	.word	0x00044af2
   23988:	0004409e 	.word	0x0004409e

0002398c <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   2398c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   2398e:	4604      	mov	r4, r0
   23990:	b950      	cbnz	r0, 239a8 <__retarget_lock_release_recursive+0x1c>
   23992:	4908      	ldr	r1, [pc, #32]	; (239b4 <__retarget_lock_release_recursive+0x28>)
   23994:	4808      	ldr	r0, [pc, #32]	; (239b8 <__retarget_lock_release_recursive+0x2c>)
   23996:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   2399a:	f019 f877 	bl	3ca8c <assert_print>
   2399e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   239a2:	4804      	ldr	r0, [pc, #16]	; (239b4 <__retarget_lock_release_recursive+0x28>)
   239a4:	f019 f86b 	bl	3ca7e <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
   239a8:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
   239aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   239ae:	f013 b863 	b.w	36a78 <z_impl_k_mutex_unlock>
   239b2:	bf00      	nop
   239b4:	00044af2 	.word	0x00044af2
   239b8:	0004409e 	.word	0x0004409e

000239bc <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   239bc:	b508      	push	{r3, lr}
   239be:	211d      	movs	r1, #29
   239c0:	4804      	ldr	r0, [pc, #16]	; (239d4 <__chk_fail+0x18>)
   239c2:	f7ff ff6b 	bl	2389c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   239c6:	4040      	eors	r0, r0
   239c8:	f380 8811 	msr	BASEPRI, r0
   239cc:	f04f 0003 	mov.w	r0, #3
   239d0:	df02      	svc	2
	CODE_UNREACHABLE;
   239d2:	bf00      	nop
   239d4:	00044b28 	.word	0x00044b28

000239d8 <z_impl_clock_gettime>:
	switch (clock_id) {
   239d8:	2801      	cmp	r0, #1
{
   239da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   239de:	460f      	mov	r7, r1
	switch (clock_id) {
   239e0:	d009      	beq.n	239f6 <z_impl_clock_gettime+0x1e>
   239e2:	2804      	cmp	r0, #4
   239e4:	d06b      	beq.n	23abe <z_impl_clock_gettime+0xe6>
		errno = EINVAL;
   239e6:	f019 feca 	bl	3d77e <__errno>
   239ea:	2316      	movs	r3, #22
   239ec:	6003      	str	r3, [r0, #0]
		return -1;
   239ee:	f04f 30ff 	mov.w	r0, #4294967295
}
   239f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   239f6:	f04f 0320 	mov.w	r3, #32
   239fa:	f3ef 8411 	mrs	r4, BASEPRI
   239fe:	f383 8812 	msr	BASEPRI_MAX, r3
   23a02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a06:	4830      	ldr	r0, [pc, #192]	; (23ac8 <z_impl_clock_gettime+0xf0>)
   23a08:	f012 fdea 	bl	365e0 <z_spin_lock_valid>
   23a0c:	b940      	cbnz	r0, 23a20 <z_impl_clock_gettime+0x48>
   23a0e:	492f      	ldr	r1, [pc, #188]	; (23acc <z_impl_clock_gettime+0xf4>)
   23a10:	482f      	ldr	r0, [pc, #188]	; (23ad0 <z_impl_clock_gettime+0xf8>)
   23a12:	228e      	movs	r2, #142	; 0x8e
   23a14:	f019 f83a 	bl	3ca8c <assert_print>
   23a18:	218e      	movs	r1, #142	; 0x8e
   23a1a:	482c      	ldr	r0, [pc, #176]	; (23acc <z_impl_clock_gettime+0xf4>)
   23a1c:	f019 f82f 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   23a20:	4829      	ldr	r0, [pc, #164]	; (23ac8 <z_impl_clock_gettime+0xf0>)
   23a22:	f012 fdfb 	bl	3661c <z_spin_lock_set_owner>
		base = rt_clock_base;
   23a26:	4b2b      	ldr	r3, [pc, #172]	; (23ad4 <z_impl_clock_gettime+0xfc>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23a28:	4827      	ldr	r0, [pc, #156]	; (23ac8 <z_impl_clock_gettime+0xf0>)
   23a2a:	689d      	ldr	r5, [r3, #8]
   23a2c:	e9d3 6800 	ldrd	r6, r8, [r3]
   23a30:	f012 fde4 	bl	365fc <z_spin_unlock_valid>
   23a34:	b940      	cbnz	r0, 23a48 <z_impl_clock_gettime+0x70>
   23a36:	4925      	ldr	r1, [pc, #148]	; (23acc <z_impl_clock_gettime+0xf4>)
   23a38:	4825      	ldr	r0, [pc, #148]	; (23ad0 <z_impl_clock_gettime+0xf8>)
   23a3a:	22b9      	movs	r2, #185	; 0xb9
   23a3c:	f019 f826 	bl	3ca8c <assert_print>
   23a40:	21b9      	movs	r1, #185	; 0xb9
   23a42:	4822      	ldr	r0, [pc, #136]	; (23acc <z_impl_clock_gettime+0xf4>)
   23a44:	f019 f81b 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   23a48:	f384 8811 	msr	BASEPRI, r4
   23a4c:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
   23a50:	f01d fb60 	bl	41114 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   23a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	uint64_t ticks = k_uptime_ticks();
   23a58:	4604      	mov	r4, r0
   23a5a:	fba0 0302 	umull	r0, r3, r0, r2
   23a5e:	fb02 3101 	mla	r1, r2, r1, r3
   23a62:	0bc0      	lsrs	r0, r0, #15
	uint64_t elapsed_secs = k_ticks_to_ms_floor64(ticks) / MSEC_PER_SEC;
   23a64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23a68:	2300      	movs	r3, #0
   23a6a:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   23a6e:	0bc9      	lsrs	r1, r1, #15
   23a70:	f7f9 fa3a 	bl	1cee8 <__aeabi_uldivmod>
   23a74:	f04f 7cfa 	mov.w	ip, #32768000	; 0x1f40000
	ts->tv_sec += base.tv_sec;
   23a78:	1986      	adds	r6, r0, r6
   23a7a:	fba0 0e0c 	umull	r0, lr, r0, ip
   23a7e:	eb48 0801 	adc.w	r8, r8, r1
   23a82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23a86:	2300      	movs	r3, #0
   23a88:	fb0c e101 	mla	r1, ip, r1, lr
   23a8c:	e9c7 6800 	strd	r6, r8, [r7]
   23a90:	f7f9 fa2a 	bl	1cee8 <__aeabi_uldivmod>
			return (uint32_t)((t * to_hz + off) / from_hz);
   23a94:	4910      	ldr	r1, [pc, #64]	; (23ad8 <z_impl_clock_gettime+0x100>)
	uint64_t nremainder = ticks - k_ms_to_ticks_floor64(MSEC_PER_SEC * elapsed_secs);
   23a96:	1a20      	subs	r0, r4, r0
   23a98:	fba0 3001 	umull	r3, r0, r0, r1
   23a9c:	0bdb      	lsrs	r3, r3, #15
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   23a9e:	4a0f      	ldr	r2, [pc, #60]	; (23adc <z_impl_clock_gettime+0x104>)
   23aa0:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	ts->tv_nsec += base.tv_nsec;
   23aa4:	442b      	add	r3, r5
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   23aa6:	4293      	cmp	r3, r2
	ts->tv_nsec += base.tv_nsec;
   23aa8:	60bb      	str	r3, [r7, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   23aaa:	d906      	bls.n	23aba <z_impl_clock_gettime+0xe2>
		ts->tv_sec++;
   23aac:	3601      	adds	r6, #1
   23aae:	f148 0200 	adc.w	r2, r8, #0
   23ab2:	e9c7 6200 	strd	r6, r2, [r7]
		ts->tv_nsec -= NSEC_PER_SEC;
   23ab6:	1a5b      	subs	r3, r3, r1
   23ab8:	60bb      	str	r3, [r7, #8]
	return 0;
   23aba:	2000      	movs	r0, #0
   23abc:	e799      	b.n	239f2 <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
   23abe:	2500      	movs	r5, #0
   23ac0:	462e      	mov	r6, r5
   23ac2:	46a8      	mov	r8, r5
   23ac4:	e7c4      	b.n	23a50 <z_impl_clock_gettime+0x78>
   23ac6:	bf00      	nop
   23ac8:	200191e4 	.word	0x200191e4
   23acc:	000440d8 	.word	0x000440d8
   23ad0:	0004409e 	.word	0x0004409e
   23ad4:	200153c0 	.word	0x200153c0
   23ad8:	3b9aca00 	.word	0x3b9aca00
   23adc:	3b9ac9ff 	.word	0x3b9ac9ff

00023ae0 <net_if_flag_set.constprop.0>:
 * @brief Set a value in network interface flags
 *
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
   23ae0:	b510      	push	{r4, lr}
				   enum net_if_flag value)
{
	NET_ASSERT(iface);
   23ae2:	4604      	mov	r4, r0
   23ae4:	b950      	cbnz	r0, 23afc <net_if_flag_set.constprop.0+0x1c>
   23ae6:	490b      	ldr	r1, [pc, #44]	; (23b14 <net_if_flag_set.constprop.0+0x34>)
   23ae8:	480b      	ldr	r0, [pc, #44]	; (23b18 <net_if_flag_set.constprop.0+0x38>)
   23aea:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   23aee:	f018 ffcd 	bl	3ca8c <assert_print>
   23af2:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   23af6:	4807      	ldr	r0, [pc, #28]	; (23b14 <net_if_flag_set.constprop.0+0x34>)
   23af8:	f018 ffc1 	bl	3ca7e <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23afc:	6823      	ldr	r3, [r4, #0]
   23afe:	330c      	adds	r3, #12
   23b00:	e8d3 2fef 	ldaex	r2, [r3]
   23b04:	f042 0201 	orr.w	r2, r2, #1
   23b08:	e8c3 2fe1 	stlex	r1, r2, [r3]
   23b0c:	2900      	cmp	r1, #0
   23b0e:	d1f7      	bne.n	23b00 <net_if_flag_set.constprop.0+0x20>

	atomic_set_bit(iface->if_dev->flags, value);
}
   23b10:	bd10      	pop	{r4, pc}
   23b12:	bf00      	nop
   23b14:	00044b5d 	.word	0x00044b5d
   23b18:	0004409e 	.word	0x0004409e

00023b1c <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   23b1c:	4602      	mov	r2, r0
   23b1e:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   23b20:	4801      	ldr	r0, [pc, #4]	; (23b28 <k_mutex_lock.constprop.0.isra.0+0xc>)
   23b22:	f012 bed7 	b.w	368d4 <z_impl_k_mutex_lock>
   23b26:	bf00      	nop
   23b28:	20014f54 	.word	0x20014f54

00023b2c <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   23b2c:	4801      	ldr	r0, [pc, #4]	; (23b34 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   23b2e:	f012 bfa3 	b.w	36a78 <z_impl_k_mutex_unlock>
   23b32:	bf00      	nop
   23b34:	20014f54 	.word	0x20014f54

00023b38 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   23b38:	b538      	push	{r3, r4, r5, lr}
   23b3a:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);
   23b3c:	f04f 31ff 	mov.w	r1, #4294967295
   23b40:	f04f 30ff 	mov.w	r0, #4294967295
   23b44:	f7ff ffea 	bl	23b1c <k_mutex_lock.constprop.0.isra.0>

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   23b48:	2100      	movs	r1, #0
   23b4a:	4628      	mov	r0, r5
   23b4c:	f019 fe4c 	bl	3d7e8 <net_if_flag_is_set>
   23b50:	4604      	mov	r4, r0
   23b52:	bb48      	cbnz	r0, 23ba8 <net_if_up+0x70>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   23b54:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   23b56:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   23b58:	7e9b      	ldrb	r3, [r3, #26]
   23b5a:	b12b      	cbz	r3, 23b68 <net_if_up+0x30>
		net_if_flag_set(iface, NET_IF_UP);
   23b5c:	f7ff ffc0 	bl	23ae0 <net_if_flag_set.constprop.0>

notify:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

out:
	k_mutex_unlock(&lock);
   23b60:	f7ff ffe4 	bl	23b2c <k_mutex_unlock.constprop.0.isra.0>

	return status;
}
   23b64:	4620      	mov	r0, r4
   23b66:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   23b68:	f019 fe39 	bl	3d7de <net_if_l2>
   23b6c:	4604      	mov	r4, r0
   23b6e:	b130      	cbz	r0, 23b7e <net_if_up+0x46>
   23b70:	6884      	ldr	r4, [r0, #8]
   23b72:	b124      	cbz	r4, 23b7e <net_if_up+0x46>
	status = net_if_l2(iface)->enable(iface, true);
   23b74:	2101      	movs	r1, #1
   23b76:	4628      	mov	r0, r5
   23b78:	47a0      	blx	r4
	if (status < 0) {
   23b7a:	1e04      	subs	r4, r0, #0
   23b7c:	dbf0      	blt.n	23b60 <net_if_up+0x28>
		NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   23b7e:	682b      	ldr	r3, [r5, #0]
   23b80:	691b      	ldr	r3, [r3, #16]
   23b82:	b953      	cbnz	r3, 23b9a <net_if_up+0x62>
   23b84:	490a      	ldr	r1, [pc, #40]	; (23bb0 <net_if_up+0x78>)
   23b86:	480b      	ldr	r0, [pc, #44]	; (23bb4 <net_if_up+0x7c>)
   23b88:	f640 72d5 	movw	r2, #4053	; 0xfd5
   23b8c:	f018 ff7e 	bl	3ca8c <assert_print>
   23b90:	f640 71d5 	movw	r1, #4053	; 0xfd5
   23b94:	4806      	ldr	r0, [pc, #24]	; (23bb0 <net_if_up+0x78>)
   23b96:	f018 ff72 	bl	3ca7e <assert_post_action>
	net_if_flag_set(iface, NET_IF_UP);
   23b9a:	4628      	mov	r0, r5
   23b9c:	f7ff ffa0 	bl	23ae0 <net_if_flag_set.constprop.0>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   23ba0:	4628      	mov	r0, r5
   23ba2:	f019 fe2b 	bl	3d7fc <l2_flags_get.isra.0>
notify:
   23ba6:	e7db      	b.n	23b60 <net_if_up+0x28>
		status = -EALREADY;
   23ba8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   23bac:	e7d8      	b.n	23b60 <net_if_up+0x28>
   23bae:	bf00      	nop
   23bb0:	00044b8c 	.word	0x00044b8c
   23bb4:	0004409e 	.word	0x0004409e

00023bb8 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   23bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   23bba:	f04f 30ff 	mov.w	r0, #4294967295
   23bbe:	f04f 31ff 	mov.w	r1, #4294967295
   23bc2:	f7ff ffab 	bl	23b1c <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   23bc6:	4c11      	ldr	r4, [pc, #68]	; (23c0c <net_if_init+0x54>)
   23bc8:	4d11      	ldr	r5, [pc, #68]	; (23c10 <net_if_init+0x58>)
   23bca:	4f12      	ldr	r7, [pc, #72]	; (23c14 <net_if_init+0x5c>)
   23bcc:	42ac      	cmp	r4, r5
   23bce:	4626      	mov	r6, r4
   23bd0:	d90a      	bls.n	23be8 <net_if_init+0x30>
   23bd2:	4639      	mov	r1, r7
   23bd4:	4810      	ldr	r0, [pc, #64]	; (23c18 <net_if_init+0x60>)
   23bd6:	f241 02f0 	movw	r2, #4336	; 0x10f0
   23bda:	f018 ff57 	bl	3ca8c <assert_print>
   23bde:	f241 01f0 	movw	r1, #4336	; 0x10f0
   23be2:	4638      	mov	r0, r7
   23be4:	f018 ff4b 	bl	3ca7e <assert_post_action>
   23be8:	42ac      	cmp	r4, r5
   23bea:	d303      	bcc.n	23bf4 <net_if_init+0x3c>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   23bec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   23bf0:	f7ff bf9c 	b.w	23b2c <k_mutex_unlock.constprop.0.isra.0>
	return iface->if_dev->dev;
   23bf4:	6833      	ldr	r3, [r6, #0]
   23bf6:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   23bf8:	681b      	ldr	r3, [r3, #0]
   23bfa:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   23bfc:	2b00      	cmp	r3, #0
   23bfe:	d0e5      	beq.n	23bcc <net_if_init+0x14>
   23c00:	681b      	ldr	r3, [r3, #0]
   23c02:	2b00      	cmp	r3, #0
   23c04:	d0e2      	beq.n	23bcc <net_if_init+0x14>
	api->init(iface);
   23c06:	4630      	mov	r0, r6
   23c08:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   23c0a:	e7df      	b.n	23bcc <net_if_init+0x14>
   23c0c:	2001512c 	.word	0x2001512c
   23c10:	20015130 	.word	0x20015130
   23c14:	00044b8c 	.word	0x00044b8c
   23c18:	0004409e 	.word	0x0004409e

00023c1c <net_if_post_init>:

void net_if_post_init(void)
{
   23c1c:	b570      	push	{r4, r5, r6, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   23c1e:	4c0e      	ldr	r4, [pc, #56]	; (23c58 <net_if_post_init+0x3c>)
   23c20:	4d0e      	ldr	r5, [pc, #56]	; (23c5c <net_if_post_init+0x40>)
   23c22:	4e0f      	ldr	r6, [pc, #60]	; (23c60 <net_if_post_init+0x44>)
   23c24:	42ac      	cmp	r4, r5
   23c26:	d90a      	bls.n	23c3e <net_if_post_init+0x22>
   23c28:	4631      	mov	r1, r6
   23c2a:	480e      	ldr	r0, [pc, #56]	; (23c64 <net_if_post_init+0x48>)
   23c2c:	f241 1222 	movw	r2, #4386	; 0x1122
   23c30:	f018 ff2c 	bl	3ca8c <assert_print>
   23c34:	f241 1122 	movw	r1, #4386	; 0x1122
   23c38:	4630      	mov	r0, r6
   23c3a:	f018 ff20 	bl	3ca7e <assert_post_action>
   23c3e:	42ac      	cmp	r4, r5
   23c40:	d300      	bcc.n	23c44 <net_if_post_init+0x28>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   23c42:	bd70      	pop	{r4, r5, r6, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   23c44:	2103      	movs	r1, #3
   23c46:	4620      	mov	r0, r4
   23c48:	f019 fdce 	bl	3d7e8 <net_if_flag_is_set>
   23c4c:	b910      	cbnz	r0, 23c54 <net_if_post_init+0x38>
			net_if_up(iface);
   23c4e:	4620      	mov	r0, r4
   23c50:	f7ff ff72 	bl	23b38 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   23c54:	3404      	adds	r4, #4
   23c56:	e7e5      	b.n	23c24 <net_if_post_init+0x8>
   23c58:	2001512c 	.word	0x2001512c
   23c5c:	20015130 	.word	0x20015130
   23c60:	00044b8c 	.word	0x00044b8c
   23c64:	0004409e 	.word	0x0004409e

00023c68 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   23c68:	2300      	movs	r3, #0
{
   23c6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   23c6e:	2802      	cmp	r0, #2
{
   23c70:	b089      	sub	sp, #36	; 0x24
   23c72:	4607      	mov	r7, r0
   23c74:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   23c76:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   23c7a:	9103      	str	r1, [sp, #12]
	if (family == AF_INET6) {
   23c7c:	d13e      	bne.n	23cfc <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   23c7e:	a806      	add	r0, sp, #24
   23c80:	9105      	str	r1, [sp, #20]
   23c82:	4601      	mov	r1, r0
{
   23c84:	461a      	mov	r2, r3
   23c86:	e006      	b.n	23c96 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   23c88:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   23c8a:	3201      	adds	r2, #1
				zeros[i]++;
   23c8c:	3401      	adds	r4, #1
   23c8e:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   23c90:	b2d4      	uxtb	r4, r2
   23c92:	2c07      	cmp	r4, #7
   23c94:	d804      	bhi.n	23ca0 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   23c96:	9c03      	ldr	r4, [sp, #12]
   23c98:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   23c9c:	2c00      	cmp	r4, #0
   23c9e:	d0f3      	beq.n	23c88 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   23ca0:	3301      	adds	r3, #1
   23ca2:	2b08      	cmp	r3, #8
   23ca4:	f101 0101 	add.w	r1, r1, #1
   23ca8:	d1ec      	bne.n	23c84 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   23caa:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   23cae:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   23cb2:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   23cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
   23cb8:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   23cba:	bf88      	it	hi
   23cbc:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   23cc0:	f103 0301 	add.w	r3, r3, #1
   23cc4:	b2db      	uxtb	r3, r3
				pos = i;
   23cc6:	bf88      	it	hi
   23cc8:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   23cca:	2b08      	cmp	r3, #8
   23ccc:	d1f2      	bne.n	23cb4 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   23cce:	469b      	mov	fp, r3
   23cd0:	f1b9 0f01 	cmp.w	r9, #1
   23cd4:	f04f 033a 	mov.w	r3, #58	; 0x3a
   23cd8:	bf08      	it	eq
   23cda:	f04f 38ff 	moveq.w	r8, #4294967295
   23cde:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   23ce0:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   23ce2:	4634      	mov	r4, r6
   23ce4:	460d      	mov	r5, r1
   23ce6:	455d      	cmp	r5, fp
   23ce8:	db17      	blt.n	23d1a <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   23cea:	42b4      	cmp	r4, r6
   23cec:	d008      	beq.n	23d00 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   23cee:	2300      	movs	r3, #0
   23cf0:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   23cf2:	bf0c      	ite	eq
   23cf4:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   23cf8:	7023      	strbne	r3, [r4, #0]
   23cfa:	e002      	b.n	23d02 <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   23cfc:	2801      	cmp	r0, #1
   23cfe:	d004      	beq.n	23d0a <z_impl_net_addr_ntop+0xa2>
		return NULL;
   23d00:	2600      	movs	r6, #0
	}

	return dst;
}
   23d02:	4630      	mov	r0, r6
   23d04:	b009      	add	sp, #36	; 0x24
   23d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   23d0a:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   23d0c:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   23d10:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   23d14:	4681      	mov	r9, r0
		delim = '.';
   23d16:	9302      	str	r3, [sp, #8]
   23d18:	e7e2      	b.n	23ce0 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   23d1a:	f1bb 0f04 	cmp.w	fp, #4
   23d1e:	d135      	bne.n	23d8c <z_impl_net_addr_ntop+0x124>
			value = (uint32_t)addr->s4_addr[i];
   23d20:	9b03      	ldr	r3, [sp, #12]
   23d22:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   23d24:	b94a      	cbnz	r2, 23d3a <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   23d26:	2330      	movs	r3, #48	; 0x30
   23d28:	4620      	mov	r0, r4
   23d2a:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   23d2e:	9b02      	ldr	r3, [sp, #8]
   23d30:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   23d32:	3501      	adds	r5, #1
   23d34:	4604      	mov	r4, r0
   23d36:	b2ed      	uxtb	r5, r5
   23d38:	e7d5      	b.n	23ce6 <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   23d3a:	4623      	mov	r3, r4
   23d3c:	2009      	movs	r0, #9
   23d3e:	f04f 0a00 	mov.w	sl, #0
   23d42:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 23e20 <z_impl_net_addr_ntop+0x1b8>
   23d46:	9201      	str	r2, [sp, #4]
		temp = value / divisor;
   23d48:	9a01      	ldr	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   23d4a:	4582      	cmp	sl, r0
		temp = value / divisor;
   23d4c:	fbb2 fefc 	udiv	lr, r2, ip
		value = value % divisor;
   23d50:	9204      	str	r2, [sp, #16]
   23d52:	fb0c 221e 	mls	r2, ip, lr, r2
   23d56:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   23d58:	dc02      	bgt.n	23d60 <z_impl_net_addr_ntop+0xf8>
   23d5a:	9a04      	ldr	r2, [sp, #16]
   23d5c:	4562      	cmp	r2, ip
   23d5e:	d304      	bcc.n	23d6a <z_impl_net_addr_ntop+0x102>
			*buf++ = (char) (temp + '0');
   23d60:	4682      	mov	sl, r0
   23d62:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   23d66:	f803 eb01 	strb.w	lr, [r3], #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   23d6a:	220a      	movs	r2, #10
   23d6c:	3801      	subs	r0, #1
   23d6e:	fbbc fcf2 	udiv	ip, ip, r2
   23d72:	1c42      	adds	r2, r0, #1
   23d74:	d1e8      	bne.n	23d48 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   23d76:	f04f 0200 	mov.w	r2, #0
   23d7a:	701a      	strb	r2, [r3, #0]
	return buf - start;
   23d7c:	1b1b      	subs	r3, r3, r4
			ptr += l;
   23d7e:	b2da      	uxtb	r2, r3
   23d80:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   23d84:	1c58      	adds	r0, r3, #1
   23d86:	9b02      	ldr	r3, [sp, #8]
   23d88:	54a3      	strb	r3, [r4, r2]
			continue;
   23d8a:	e7d2      	b.n	23d32 <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   23d8c:	45a8      	cmp	r8, r5
   23d8e:	d110      	bne.n	23db2 <z_impl_net_addr_ntop+0x14a>
			if (needcolon || i == 0U) {
   23d90:	b911      	cbnz	r1, 23d98 <z_impl_net_addr_ntop+0x130>
   23d92:	f1b8 0f00 	cmp.w	r8, #0
   23d96:	d102      	bne.n	23d9e <z_impl_net_addr_ntop+0x136>
				*ptr++ = ':';
   23d98:	233a      	movs	r3, #58	; 0x3a
   23d9a:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   23d9e:	233a      	movs	r3, #58	; 0x3a
   23da0:	4620      	mov	r0, r4
   23da2:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   23da6:	f109 33ff 	add.w	r3, r9, #4294967295
   23daa:	441d      	add	r5, r3
			needcolon = false;
   23dac:	2100      	movs	r1, #0
			i += longest - 1U;
   23dae:	b2ed      	uxtb	r5, r5
			continue;
   23db0:	e7bf      	b.n	23d32 <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   23db2:	b111      	cbz	r1, 23dba <z_impl_net_addr_ntop+0x152>
			*ptr++ = ':';
   23db4:	233a      	movs	r3, #58	; 0x3a
   23db6:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   23dba:	9b05      	ldr	r3, [sp, #20]
   23dbc:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
   23dc0:	ba52      	rev16	r2, r2
		if (bh) {
   23dc2:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
		bh = value >> 8;
   23dc6:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   23dca:	fa5f fa82 	uxtb.w	sl, r2
		if (bh) {
   23dce:	d015      	beq.n	23dfc <z_impl_net_addr_ntop+0x194>
			if (bh > 0x0f) {
   23dd0:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   23dd2:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   23dd4:	d90b      	bls.n	23dee <z_impl_net_addr_ntop+0x186>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   23dd6:	2300      	movs	r3, #0
   23dd8:	2261      	movs	r2, #97	; 0x61
   23dda:	4620      	mov	r0, r4
   23ddc:	f019 fd1a 	bl	3d814 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   23de0:	2301      	movs	r3, #1
   23de2:	2261      	movs	r2, #97	; 0x61
   23de4:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   23de6:	f019 fd15 	bl	3d814 <net_byte_to_hex>
		needcolon = true;
   23dea:	2101      	movs	r1, #1
   23dec:	e7a1      	b.n	23d32 <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   23dee:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   23df0:	bf94      	ite	ls
   23df2:	3130      	addls	r1, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   23df4:	3157      	addhi	r1, #87	; 0x57
					*ptr++ = (char)(bh + '0');
   23df6:	1c60      	adds	r0, r4, #1
					*ptr++ = (char) (bh - 10 + 'a');
   23df8:	7021      	strb	r1, [r4, #0]
   23dfa:	e7f1      	b.n	23de0 <z_impl_net_addr_ntop+0x178>
		} else if (bl > 0x0f) {
   23dfc:	f1ba 0f0f 	cmp.w	sl, #15
   23e00:	d903      	bls.n	23e0a <z_impl_net_addr_ntop+0x1a2>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   23e02:	2261      	movs	r2, #97	; 0x61
   23e04:	4651      	mov	r1, sl
   23e06:	4620      	mov	r0, r4
   23e08:	e7ed      	b.n	23de6 <z_impl_net_addr_ntop+0x17e>
			if (bl < 10) {
   23e0a:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   23e0e:	bf94      	ite	ls
   23e10:	f10a 0a30 	addls.w	sl, sl, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   23e14:	f10a 0a57 	addhi.w	sl, sl, #87	; 0x57
					*ptr++ = (char)(bh + '0');
   23e18:	1c60      	adds	r0, r4, #1
				*ptr++ = (char) (bl - 10 + 'a');
   23e1a:	f884 a000 	strb.w	sl, [r4]
   23e1e:	e7e4      	b.n	23dea <z_impl_net_addr_ntop+0x182>
   23e20:	3b9aca00 	.word	0x3b9aca00

00023e24 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   23e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   23e28:	680f      	ldr	r7, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   23e2a:	f890 5084 	ldrb.w	r5, [r0, #132]	; 0x84
	start = buf->cur;

	NET_HEXDUMP_DBG(mqtt_proto_desc->utf8, mqtt_proto_desc->size,
			 "Encoding Protocol Description.");

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   23e2e:	4b3b      	ldr	r3, [pc, #236]	; (23f1c <connect_request_encode+0xf8>)
   23e30:	4a3b      	ldr	r2, [pc, #236]	; (23f20 <connect_request_encode+0xfc>)
{
   23e32:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   23e34:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   23e38:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   23e3a:	2804      	cmp	r0, #4
   23e3c:	bf0c      	ite	eq
   23e3e:	4610      	moveq	r0, r2
   23e40:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   23e42:	600f      	str	r7, [r1, #0]
{
   23e44:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   23e46:	f019 fe88 	bl	3db5a <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   23e4a:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   23e4e:	4603      	mov	r3, r0
   23e50:	b938      	cbnz	r0, 23e62 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   23e52:	e9d4 2000 	ldrd	r2, r0, [r4]
   23e56:	4290      	cmp	r0, r2
		return err_code;
	}

	NET_DBG("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   23e58:	f896 1082 	ldrb.w	r1, [r6, #130]	; 0x82
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   23e5c:	d104      	bne.n	23e68 <connect_request_encode+0x44>
		return -ENOMEM;
   23e5e:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   23e62:	4618      	mov	r0, r3
   23e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   23e68:	1c50      	adds	r0, r2, #1
   23e6a:	6020      	str	r0, [r4, #0]
   23e6c:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   23e6e:	e9d4 8200 	ldrd	r8, r2, [r4]
   23e72:	4590      	cmp	r8, r2
   23e74:	d0f3      	beq.n	23e5e <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   23e76:	f108 0201 	add.w	r2, r8, #1
   23e7a:	6022      	str	r2, [r4, #0]
   23e7c:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   23e80:	4621      	mov	r1, r4
   23e82:	f8b6 0080 	ldrh.w	r0, [r6, #128]	; 0x80
   23e86:	f019 fe56 	bl	3db36 <pack_uint16>
	if (err_code != 0) {
   23e8a:	4603      	mov	r3, r0
   23e8c:	2800      	cmp	r0, #0
   23e8e:	d1e8      	bne.n	23e62 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   23e90:	f106 0050 	add.w	r0, r6, #80	; 0x50
   23e94:	f019 fe61 	bl	3db5a <pack_utf8_str>
	if (err_code != 0) {
   23e98:	4603      	mov	r3, r0
   23e9a:	2800      	cmp	r0, #0
   23e9c:	d1e1      	bne.n	23e62 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   23e9e:	6e70      	ldr	r0, [r6, #100]	; 0x64
	uint8_t connect_flags = client->clean_session << 1;
   23ea0:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   23ea2:	b1d8      	cbz	r0, 23edc <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   23ea4:	f896 3084 	ldrb.w	r3, [r6, #132]	; 0x84
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   23ea8:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   23eac:	f003 0301 	and.w	r3, r3, #1
   23eb0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   23eb4:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   23eb6:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   23eb8:	00db      	lsls	r3, r3, #3
   23eba:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   23ebe:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   23ec0:	f019 fe4b 	bl	3db5a <pack_utf8_str>
		if (err_code != 0) {
   23ec4:	4603      	mov	r3, r0
   23ec6:	2800      	cmp	r0, #0
   23ec8:	d1cb      	bne.n	23e62 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   23eca:	6eb3      	ldr	r3, [r6, #104]	; 0x68
			err_code = pack_utf8_str(client->will_message, buf);
   23ecc:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   23ece:	b313      	cbz	r3, 23f16 <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   23ed0:	4618      	mov	r0, r3
   23ed2:	f019 fe42 	bl	3db5a <pack_utf8_str>
			if (err_code != 0) {
   23ed6:	4603      	mov	r3, r0
   23ed8:	2800      	cmp	r0, #0
   23eda:	d1c2      	bne.n	23e62 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   23edc:	6df0      	ldr	r0, [r6, #92]	; 0x5c
   23ede:	b138      	cbz	r0, 23ef0 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   23ee0:	4621      	mov	r1, r4
   23ee2:	f019 fe3a 	bl	3db5a <pack_utf8_str>
		if (err_code != 0) {
   23ee6:	4603      	mov	r3, r0
   23ee8:	2800      	cmp	r0, #0
   23eea:	d1ba      	bne.n	23e62 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   23eec:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   23ef0:	6e30      	ldr	r0, [r6, #96]	; 0x60
   23ef2:	b138      	cbz	r0, 23f04 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   23ef4:	4621      	mov	r1, r4
   23ef6:	f019 fe30 	bl	3db5a <pack_utf8_str>
		if (err_code != 0) {
   23efa:	4603      	mov	r3, r0
   23efc:	2800      	cmp	r0, #0
   23efe:	d1b0      	bne.n	23e62 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   23f00:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   23f04:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   23f08:	4622      	mov	r2, r4
   23f0a:	4639      	mov	r1, r7
}
   23f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   23f10:	2010      	movs	r0, #16
   23f12:	f019 be3d 	b.w	3db90 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   23f16:	f019 fe0e 	bl	3db36 <pack_uint16>
   23f1a:	e7dc      	b.n	23ed6 <connect_request_encode+0xb2>
   23f1c:	00042ac8 	.word	0x00042ac8
   23f20:	00042ad0 	.word	0x00042ad0

00023f24 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   23f24:	e9d0 2300 	ldrd	r2, r3, [r0]
   23f28:	1a9b      	subs	r3, r3, r2
   23f2a:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23f2c:	bf81      	itttt	hi
   23f2e:	4b05      	ldrhi	r3, [pc, #20]	; (23f44 <disconnect_encode+0x20>)
   23f30:	881b      	ldrhhi	r3, [r3, #0]
   23f32:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   23f34:	6803      	ldrhi	r3, [r0, #0]
   23f36:	bf83      	ittte	hi
   23f38:	3302      	addhi	r3, #2
   23f3a:	6043      	strhi	r3, [r0, #4]

	return 0;
   23f3c:	2000      	movhi	r0, #0
		return -ENOMEM;
   23f3e:	f06f 000b 	mvnls.w	r0, #11
}
   23f42:	4770      	bx	lr
   23f44:	00044bb6 	.word	0x00044bb6

00023f48 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   23f48:	e9d0 2300 	ldrd	r2, r3, [r0]
   23f4c:	1a9b      	subs	r3, r3, r2
   23f4e:	2b01      	cmp	r3, #1
   23f50:	bf81      	itttt	hi
   23f52:	4b05      	ldrhi	r3, [pc, #20]	; (23f68 <ping_request_encode+0x20>)
   23f54:	881b      	ldrhhi	r3, [r3, #0]
   23f56:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   23f58:	6803      	ldrhi	r3, [r0, #0]
   23f5a:	bf83      	ittte	hi
   23f5c:	3302      	addhi	r3, #2
   23f5e:	6043      	strhi	r3, [r0, #4]

	return 0;
   23f60:	2000      	movhi	r0, #0
		return -ENOMEM;
   23f62:	f06f 000b 	mvnls.w	r0, #11
}
   23f66:	4770      	bx	lr
   23f68:	00044bb8 	.word	0x00044bb8

00023f6c <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_CUSTOM_TRANSPORT */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   23f6c:	2214      	movs	r2, #20
   23f6e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   23f72:	4353      	muls	r3, r2
   23f74:	4a01      	ldr	r2, [pc, #4]	; (23f7c <mqtt_transport_connect+0x10>)
   23f76:	58d3      	ldr	r3, [r2, r3]
   23f78:	4718      	bx	r3
   23f7a:	bf00      	nop
   23f7c:	00042ad8 	.word	0x00042ad8

00023f80 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   23f80:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   23f82:	2514      	movs	r5, #20
   23f84:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   23f88:	4b02      	ldr	r3, [pc, #8]	; (23f94 <mqtt_transport_write+0x14>)
   23f8a:	fb05 3304 	mla	r3, r5, r4, r3
							  datalen);
}
   23f8e:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   23f90:	685b      	ldr	r3, [r3, #4]
   23f92:	4718      	bx	r3
   23f94:	00042ad8 	.word	0x00042ad8

00023f98 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   23f98:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   23f9a:	2414      	movs	r4, #20
   23f9c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   23fa0:	4b03      	ldr	r3, [pc, #12]	; (23fb0 <mqtt_transport_write_msg+0x18>)
   23fa2:	fb04 3302 	mla	r3, r4, r2, r3
}
   23fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   23faa:	689b      	ldr	r3, [r3, #8]
   23fac:	4718      	bx	r3
   23fae:	bf00      	nop
   23fb0:	00042ad8 	.word	0x00042ad8

00023fb4 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   23fb4:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   23fb6:	2614      	movs	r6, #20
   23fb8:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   23fbc:	4c03      	ldr	r4, [pc, #12]	; (23fcc <mqtt_transport_read+0x18>)
   23fbe:	fb06 4405 	mla	r4, r6, r5, r4
   23fc2:	68e4      	ldr	r4, [r4, #12]
   23fc4:	46a4      	mov	ip, r4
							 shall_block);
}
   23fc6:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   23fc8:	4760      	bx	ip
   23fca:	bf00      	nop
   23fcc:	00042ad8 	.word	0x00042ad8

00023fd0 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   23fd0:	2114      	movs	r1, #20
   23fd2:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   23fd6:	4b02      	ldr	r3, [pc, #8]	; (23fe0 <mqtt_transport_disconnect+0x10>)
   23fd8:	fb01 3302 	mla	r3, r1, r2, r3
   23fdc:	691b      	ldr	r3, [r3, #16]
   23fde:	4718      	bx	r3
   23fe0:	00042ad8 	.word	0x00042ad8

00023fe4 <mqtt_mutex_unlock>:
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   23fe4:	b508      	push	{r3, lr}
   23fe6:	f012 fd47 	bl	36a78 <z_impl_k_mutex_unlock>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   23fea:	b150      	cbz	r0, 24002 <mqtt_mutex_unlock+0x1e>
   23fec:	4905      	ldr	r1, [pc, #20]	; (24004 <mqtt_mutex_unlock+0x20>)
   23fee:	4806      	ldr	r0, [pc, #24]	; (24008 <mqtt_mutex_unlock+0x24>)
   23ff0:	223d      	movs	r2, #61	; 0x3d
   23ff2:	f018 fd4b 	bl	3ca8c <assert_print>
	(void)ret;
}
   23ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   23ffa:	213d      	movs	r1, #61	; 0x3d
   23ffc:	4801      	ldr	r0, [pc, #4]	; (24004 <mqtt_mutex_unlock+0x20>)
   23ffe:	f018 bd3e 	b.w	3ca7e <assert_post_action>
}
   24002:	bd08      	pop	{r3, pc}
   24004:	00044bc6 	.word	0x00044bc6
   24008:	0004409e 	.word	0x0004409e

0002400c <mqtt_mutex_lock>:
{
   2400c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2400e:	f04f 32ff 	mov.w	r2, #4294967295
   24012:	f04f 33ff 	mov.w	r3, #4294967295
   24016:	f012 fc5d 	bl	368d4 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   2401a:	b150      	cbz	r0, 24032 <mqtt_mutex_lock+0x26>
   2401c:	4905      	ldr	r1, [pc, #20]	; (24034 <mqtt_mutex_lock+0x28>)
   2401e:	4806      	ldr	r0, [pc, #24]	; (24038 <mqtt_mutex_lock+0x2c>)
   24020:	2233      	movs	r2, #51	; 0x33
   24022:	f018 fd33 	bl	3ca8c <assert_print>
}
   24026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   2402a:	2133      	movs	r1, #51	; 0x33
   2402c:	4801      	ldr	r0, [pc, #4]	; (24034 <mqtt_mutex_lock+0x28>)
   2402e:	f018 bd26 	b.w	3ca7e <assert_post_action>
}
   24032:	bd08      	pop	{r3, pc}
   24034:	00044bc6 	.word	0x00044bc6
   24038:	0004409e 	.word	0x0004409e

0002403c <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   2403c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct sockaddr *broker = client->broker;
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int type = SOCK_STREAM;
	int ret;

	if (tls_config->set_native_tls) {
   2403e:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
	const struct sockaddr *broker = client->broker;
   24042:	6d85      	ldr	r5, [r0, #88]	; 0x58
		type |= SOCK_NATIVE_TLS;
   24044:	2b00      	cmp	r3, #0
{
   24046:	4604      	mov	r4, r0
		type |= SOCK_NATIVE_TLS;
   24048:	493f      	ldr	r1, [pc, #252]	; (24148 <mqtt_client_tls_connect+0x10c>)
	}

	client->transport.tls.sock = zsock_socket(broker->sa_family,
   2404a:	8828      	ldrh	r0, [r5, #0]
		type |= SOCK_NATIVE_TLS;
   2404c:	bf08      	it	eq
   2404e:	2101      	moveq	r1, #1
	return z_impl_zsock_socket(family, type, proto);
   24050:	f44f 7281 	mov.w	r2, #258	; 0x102
   24054:	f7fd fc2c 	bl	218b0 <z_impl_zsock_socket>
						  type, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   24058:	2800      	cmp	r0, #0
	client->transport.tls.sock = zsock_socket(broker->sa_family,
   2405a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   2405c:	da05      	bge.n	2406a <mqtt_client_tls_connect+0x2e>
	NET_DBG("Connect completed");
	return 0;

error:
	(void) zsock_close(client->transport.tls.sock);
	return -errno;
   2405e:	f019 fb8e 	bl	3d77e <__errno>
   24062:	6800      	ldr	r0, [r0, #0]
   24064:	4240      	negs	r0, r0
}
   24066:	b004      	add	sp, #16
   24068:	bd70      	pop	{r4, r5, r6, pc}
		union { uintptr_t x; socklen_t val; } parm4 = { .val = optlen };
		return (int) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2406a:	2304      	movs	r3, #4
   2406c:	2205      	movs	r2, #5
   2406e:	9300      	str	r3, [sp, #0]
   24070:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24074:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   24078:	f019 f982 	bl	3d380 <z_impl_zsock_setsockopt>
	if (ret < 0) {
   2407c:	2800      	cmp	r0, #0
   2407e:	da03      	bge.n	24088 <mqtt_client_tls_connect+0x4c>
	(void) zsock_close(client->transport.tls.sock);
   24080:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   24082:	f019 f886 	bl	3d192 <z_impl_zsock_close>
   24086:	e7ea      	b.n	2405e <mqtt_client_tls_connect+0x22>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   24088:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2408a:	2b00      	cmp	r3, #0
   2408c:	d12f      	bne.n	240ee <mqtt_client_tls_connect+0xb2>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   2408e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   24090:	2b00      	cmp	r3, #0
   24092:	d13a      	bne.n	2410a <mqtt_client_tls_connect+0xce>
	if (tls_config->hostname) {
   24094:	6c63      	ldr	r3, [r4, #68]	; 0x44
   24096:	2b00      	cmp	r3, #0
   24098:	d145      	bne.n	24126 <mqtt_client_tls_connect+0xea>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   2409a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2409c:	2b01      	cmp	r3, #1
   2409e:	d10b      	bne.n	240b8 <mqtt_client_tls_connect+0x7c>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   240a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   240a2:	2304      	movs	r3, #4
   240a4:	220a      	movs	r2, #10
   240a6:	9300      	str	r3, [sp, #0]
   240a8:	f44f 718d 	mov.w	r1, #282	; 0x11a
   240ac:	f104 0340 	add.w	r3, r4, #64	; 0x40
   240b0:	f019 f966 	bl	3d380 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   240b4:	2800      	cmp	r0, #0
   240b6:	dbe3      	blt.n	24080 <mqtt_client_tls_connect+0x44>
	if (tls_config->cert_nocopy != TLS_CERT_NOCOPY_NONE) {
   240b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   240ba:	b15b      	cbz	r3, 240d4 <mqtt_client_tls_connect+0x98>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   240bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   240be:	2304      	movs	r3, #4
   240c0:	220a      	movs	r2, #10
   240c2:	9300      	str	r3, [sp, #0]
   240c4:	f44f 718d 	mov.w	r1, #282	; 0x11a
   240c8:	f104 0348 	add.w	r3, r4, #72	; 0x48
   240cc:	f019 f958 	bl	3d380 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   240d0:	2800      	cmp	r0, #0
   240d2:	dbd5      	blt.n	24080 <mqtt_client_tls_connect+0x44>
	if (broker->sa_family == AF_INET) {
   240d4:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   240d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   240d8:	2b01      	cmp	r3, #1
   240da:	bf0c      	ite	eq
   240dc:	2208      	moveq	r2, #8
   240de:	2218      	movne	r2, #24
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   240e0:	6da1      	ldr	r1, [r4, #88]	; 0x58
	return z_impl_zsock_connect(sock, addr, addrlen);
   240e2:	f019 f87a 	bl	3d1da <z_impl_zsock_connect>
	if (ret < 0) {
   240e6:	2800      	cmp	r0, #0
   240e8:	dbca      	blt.n	24080 <mqtt_client_tls_connect+0x44>
	return 0;
   240ea:	2000      	movs	r0, #0
   240ec:	e7bb      	b.n	24066 <mqtt_client_tls_connect+0x2a>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   240ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
   240f0:	2a00      	cmp	r2, #0
   240f2:	d0cc      	beq.n	2408e <mqtt_client_tls_connect+0x52>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   240f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   240f6:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   240f8:	9200      	str	r2, [sp, #0]
   240fa:	f44f 718d 	mov.w	r1, #282	; 0x11a
   240fe:	2203      	movs	r2, #3
   24100:	f019 f93e 	bl	3d380 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   24104:	2800      	cmp	r0, #0
   24106:	dac2      	bge.n	2408e <mqtt_client_tls_connect+0x52>
   24108:	e7ba      	b.n	24080 <mqtt_client_tls_connect+0x44>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   2410a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2410c:	2a00      	cmp	r2, #0
   2410e:	d0c1      	beq.n	24094 <mqtt_client_tls_connect+0x58>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   24110:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   24112:	0092      	lsls	r2, r2, #2
   24114:	9200      	str	r2, [sp, #0]
   24116:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2411a:	2201      	movs	r2, #1
   2411c:	f019 f930 	bl	3d380 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   24120:	2800      	cmp	r0, #0
   24122:	dab7      	bge.n	24094 <mqtt_client_tls_connect+0x58>
   24124:	e7ac      	b.n	24080 <mqtt_client_tls_connect+0x44>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   24126:	4618      	mov	r0, r3
   24128:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   2412a:	9303      	str	r3, [sp, #12]
   2412c:	f7f9 f889 	bl	1d242 <strlen>
   24130:	2202      	movs	r2, #2
   24132:	9000      	str	r0, [sp, #0]
   24134:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24138:	4630      	mov	r0, r6
   2413a:	9b03      	ldr	r3, [sp, #12]
   2413c:	f019 f920 	bl	3d380 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   24140:	2800      	cmp	r0, #0
   24142:	daaa      	bge.n	2409a <mqtt_client_tls_connect+0x5e>
   24144:	e79c      	b.n	24080 <mqtt_client_tls_connect+0x44>
   24146:	bf00      	nop
   24148:	40000001 	.word	0x40000001

0002414c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2414c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2414e:	2340      	movs	r3, #64	; 0x40
{
   24150:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   24152:	490a      	ldr	r1, [pc, #40]	; (2417c <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   24154:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   24156:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   24158:	1149      	asrs	r1, r1, #5
{
   2415a:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2415c:	4623      	mov	r3, r4
   2415e:	4a08      	ldr	r2, [pc, #32]	; (24180 <onoff_start+0x34>)
   24160:	4808      	ldr	r0, [pc, #32]	; (24184 <onoff_start+0x38>)
   24162:	f01a fa89 	bl	3e678 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   24166:	1e01      	subs	r1, r0, #0
   24168:	da05      	bge.n	24176 <onoff_start+0x2a>
		notify(mgr, err);
   2416a:	4628      	mov	r0, r5
   2416c:	4623      	mov	r3, r4
	}
}
   2416e:	b003      	add	sp, #12
   24170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   24174:	4718      	bx	r3
}
   24176:	b003      	add	sp, #12
   24178:	bd30      	pop	{r4, r5, pc}
   2417a:	bf00      	nop
   2417c:	200191f8 	.word	0x200191f8
   24180:	0003e6e5 	.word	0x0003e6e5
   24184:	00042344 	.word	0x00042344

00024188 <get_status>:
{
   24188:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2418a:	b2cc      	uxtb	r4, r1
   2418c:	2c01      	cmp	r4, #1
{
   2418e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   24190:	d908      	bls.n	241a4 <get_status+0x1c>
   24192:	4908      	ldr	r1, [pc, #32]	; (241b4 <get_status+0x2c>)
   24194:	4808      	ldr	r0, [pc, #32]	; (241b8 <get_status+0x30>)
   24196:	2279      	movs	r2, #121	; 0x79
   24198:	f018 fc78 	bl	3ca8c <assert_print>
   2419c:	2179      	movs	r1, #121	; 0x79
   2419e:	4805      	ldr	r0, [pc, #20]	; (241b4 <get_status+0x2c>)
   241a0:	f018 fc6d 	bl	3ca7e <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   241a4:	230c      	movs	r3, #12
   241a6:	6929      	ldr	r1, [r5, #16]
   241a8:	fb04 1403 	mla	r4, r4, r3, r1
   241ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   241ae:	f000 0007 	and.w	r0, r0, #7
   241b2:	bd38      	pop	{r3, r4, r5, pc}
   241b4:	00044bf7 	.word	0x00044bf7
   241b8:	0004409e 	.word	0x0004409e

000241bc <stop>:
{
   241bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   241be:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   241c0:	2c01      	cmp	r4, #1
{
   241c2:	4605      	mov	r5, r0
   241c4:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
   241c6:	6906      	ldr	r6, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   241c8:	d90a      	bls.n	241e0 <stop+0x24>
   241ca:	4918      	ldr	r1, [pc, #96]	; (2422c <stop+0x70>)
   241cc:	4818      	ldr	r0, [pc, #96]	; (24230 <stop+0x74>)
   241ce:	f240 124d 	movw	r2, #333	; 0x14d
   241d2:	f018 fc5b 	bl	3ca8c <assert_print>
   241d6:	f240 114d 	movw	r1, #333	; 0x14d
   241da:	4814      	ldr	r0, [pc, #80]	; (2422c <stop+0x70>)
   241dc:	f018 fc4f 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   241e0:	f04f 0320 	mov.w	r3, #32
   241e4:	f3ef 8111 	mrs	r1, BASEPRI
   241e8:	f383 8812 	msr	BASEPRI_MAX, r3
   241ec:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   241f0:	220c      	movs	r2, #12
   241f2:	fb02 6304 	mla	r3, r2, r4, r6
   241f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   241f8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   241fc:	d001      	beq.n	24202 <stop+0x46>
   241fe:	429f      	cmp	r7, r3
   24200:	d111      	bne.n	24226 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   24202:	2301      	movs	r3, #1
	int err = 0;
   24204:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   24206:	fb02 6604 	mla	r6, r2, r4, r6
   2420a:	64b3      	str	r3, [r6, #72]	; 0x48
	__asm__ volatile(
   2420c:	f381 8811 	msr	BASEPRI, r1
   24210:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   24214:	b930      	cbnz	r0, 24224 <stop+0x68>
	get_sub_config(dev, type)->stop();
   24216:	230c      	movs	r3, #12
   24218:	6869      	ldr	r1, [r5, #4]
   2421a:	fb03 1404 	mla	r4, r3, r4, r1
   2421e:	6863      	ldr	r3, [r4, #4]
   24220:	4798      	blx	r3
	return 0;
   24222:	2000      	movs	r0, #0
}
   24224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   24226:	f04f 30ff 	mov.w	r0, #4294967295
   2422a:	e7ef      	b.n	2420c <stop+0x50>
   2422c:	00044bf7 	.word	0x00044bf7
   24230:	0004409e 	.word	0x0004409e

00024234 <onoff_stop>:
{
   24234:	b570      	push	{r4, r5, r6, lr}
   24236:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   24238:	4906      	ldr	r1, [pc, #24]	; (24254 <onoff_stop+0x20>)
{
   2423a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   2423c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2423e:	1149      	asrs	r1, r1, #5
   24240:	2240      	movs	r2, #64	; 0x40
   24242:	4805      	ldr	r0, [pc, #20]	; (24258 <onoff_stop+0x24>)
   24244:	f7ff ffba 	bl	241bc <stop>
	notify(mgr, res);
   24248:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2424a:	4601      	mov	r1, r0
	notify(mgr, res);
   2424c:	4620      	mov	r0, r4
}
   2424e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   24252:	4718      	bx	r3
   24254:	200191f8 	.word	0x200191f8
   24258:	00042344 	.word	0x00042344

0002425c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   2425c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2425e:	2200      	movs	r2, #0
   24260:	2101      	movs	r1, #1
{
   24262:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   24264:	2005      	movs	r0, #5
   24266:	f7fe fca7 	bl	22bb8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   2426a:	480f      	ldr	r0, [pc, #60]	; (242a8 <clk_init+0x4c>)
   2426c:	f00e f822 	bl	322b4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   24270:	4b0e      	ldr	r3, [pc, #56]	; (242ac <clk_init+0x50>)
   24272:	4298      	cmp	r0, r3
   24274:	d115      	bne.n	242a2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   24276:	f00e f83f 	bl	322f8 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   2427a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   2427c:	490c      	ldr	r1, [pc, #48]	; (242b0 <clk_init+0x54>)
   2427e:	4630      	mov	r0, r6
   24280:	f018 fa7c 	bl	3c77c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   24284:	2800      	cmp	r0, #0
   24286:	db0b      	blt.n	242a0 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   24288:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
   2428a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   2428c:	4908      	ldr	r1, [pc, #32]	; (242b0 <clk_init+0x54>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2428e:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
   24290:	f104 0020 	add.w	r0, r4, #32
   24294:	f018 fa72 	bl	3c77c <onoff_manager_init>
		if (err < 0) {
   24298:	2800      	cmp	r0, #0
   2429a:	db01      	blt.n	242a0 <clk_init+0x44>
	}

	return 0;
   2429c:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2429e:	6565      	str	r5, [r4, #84]	; 0x54
}
   242a0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   242a2:	f06f 0004 	mvn.w	r0, #4
   242a6:	e7fb      	b.n	242a0 <clk_init+0x44>
   242a8:	000242f1 	.word	0x000242f1
   242ac:	0bad0000 	.word	0x0bad0000
   242b0:	00042b30 	.word	0x00042b30

000242b4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   242b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   242b6:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   242b8:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   242ba:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   242bc:	434b      	muls	r3, r1
   242be:	480a      	ldr	r0, [pc, #40]	; (242e8 <clkstarted_handle.constprop.0+0x34>)
   242c0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   242c2:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   242c4:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   242c8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   242ca:	6426      	str	r6, [r4, #64]	; 0x40
	void *user_data = sub_data->user_data;
   242cc:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   242ce:	f01a f9c0 	bl	3e652 <set_on_state>
	if (callback) {
   242d2:	b135      	cbz	r5, 242e2 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   242d4:	462b      	mov	r3, r5
   242d6:	9a01      	ldr	r2, [sp, #4]
   242d8:	4804      	ldr	r0, [pc, #16]	; (242ec <clkstarted_handle.constprop.0+0x38>)
}
   242da:	b002      	add	sp, #8
   242dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   242e0:	4718      	bx	r3
}
   242e2:	b002      	add	sp, #8
   242e4:	bd70      	pop	{r4, r5, r6, pc}
   242e6:	bf00      	nop
   242e8:	200191f8 	.word	0x200191f8
   242ec:	00042344 	.word	0x00042344

000242f0 <clock_event_handler>:
	switch (event) {
   242f0:	2801      	cmp	r0, #1
{
   242f2:	b508      	push	{r3, lr}
	switch (event) {
   242f4:	d006      	beq.n	24304 <clock_event_handler+0x14>
   242f6:	2803      	cmp	r0, #3
   242f8:	d008      	beq.n	2430c <clock_event_handler+0x1c>
   242fa:	b9a0      	cbnz	r0, 24326 <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   242fc:	4b0f      	ldr	r3, [pc, #60]	; (2433c <clock_event_handler+0x4c>)
   242fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   24300:	075b      	lsls	r3, r3, #29
   24302:	d119      	bne.n	24338 <clock_event_handler+0x48>
}
   24304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   24308:	f7ff bfd4 	b.w	242b4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   2430c:	490c      	ldr	r1, [pc, #48]	; (24340 <clock_event_handler+0x50>)
   2430e:	f240 225e 	movw	r2, #606	; 0x25e
   24312:	480c      	ldr	r0, [pc, #48]	; (24344 <clock_event_handler+0x54>)
   24314:	f018 fbba 	bl	3ca8c <assert_print>
   24318:	f240 215e 	movw	r1, #606	; 0x25e
}
   2431c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   24320:	4807      	ldr	r0, [pc, #28]	; (24340 <clock_event_handler+0x50>)
   24322:	f018 bbac 	b.w	3ca7e <assert_post_action>
   24326:	4906      	ldr	r1, [pc, #24]	; (24340 <clock_event_handler+0x50>)
   24328:	f240 2262 	movw	r2, #610	; 0x262
   2432c:	4805      	ldr	r0, [pc, #20]	; (24344 <clock_event_handler+0x54>)
   2432e:	f018 fbad 	bl	3ca8c <assert_print>
   24332:	f240 2162 	movw	r1, #610	; 0x262
   24336:	e7f1      	b.n	2431c <clock_event_handler+0x2c>
}
   24338:	bd08      	pop	{r3, pc}
   2433a:	bf00      	nop
   2433c:	200191f8 	.word	0x200191f8
   24340:	00044bf7 	.word	0x00044bf7
   24344:	0004409e 	.word	0x0004409e

00024348 <generic_hfclk_start>:
{
   24348:	b508      	push	{r3, lr}
	__asm__ volatile(
   2434a:	f04f 0320 	mov.w	r3, #32
   2434e:	f3ef 8111 	mrs	r1, BASEPRI
   24352:	f383 8812 	msr	BASEPRI_MAX, r3
   24356:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2435a:	4a11      	ldr	r2, [pc, #68]	; (243a0 <generic_hfclk_start+0x58>)
   2435c:	6813      	ldr	r3, [r2, #0]
   2435e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   24362:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   24366:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   24368:	d00b      	beq.n	24382 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2436a:	4a0e      	ldr	r2, [pc, #56]	; (243a4 <generic_hfclk_start+0x5c>)
   2436c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   24370:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   24374:	f013 0301 	ands.w	r3, r3, #1
   24378:	d003      	beq.n	24382 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   2437a:	480b      	ldr	r0, [pc, #44]	; (243a8 <generic_hfclk_start+0x60>)
   2437c:	f01a f969 	bl	3e652 <set_on_state>
			already_started = true;
   24380:	2301      	movs	r3, #1
	__asm__ volatile(
   24382:	f381 8811 	msr	BASEPRI, r1
   24386:	f3bf 8f6f 	isb	sy
	if (already_started) {
   2438a:	b123      	cbz	r3, 24396 <generic_hfclk_start+0x4e>
}
   2438c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   24390:	2000      	movs	r0, #0
   24392:	f7ff bf8f 	b.w	242b4 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   24396:	2001      	movs	r0, #1
}
   24398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2439c:	f00d bfd0 	b.w	32340 <nrfx_clock_start>
   243a0:	20019250 	.word	0x20019250
   243a4:	40005000 	.word	0x40005000
   243a8:	20019240 	.word	0x20019240

000243ac <api_blocking_start>:
{
   243ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   243ae:	2200      	movs	r2, #0
   243b0:	2301      	movs	r3, #1
   243b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   243b6:	ab04      	add	r3, sp, #16
   243b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   243bc:	4a09      	ldr	r2, [pc, #36]	; (243e4 <api_blocking_start+0x38>)
   243be:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   243c0:	f8cd d000 	str.w	sp, [sp]
   243c4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   243c8:	f01a f985 	bl	3e6d6 <api_start>
	if (err < 0) {
   243cc:	2800      	cmp	r0, #0
   243ce:	db05      	blt.n	243dc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   243d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   243d4:	2300      	movs	r3, #0
   243d6:	4668      	mov	r0, sp
   243d8:	f012 fd0a 	bl	36df0 <z_impl_k_sem_take>
}
   243dc:	b007      	add	sp, #28
   243de:	f85d fb04 	ldr.w	pc, [sp], #4
   243e2:	bf00      	nop
   243e4:	0003e703 	.word	0x0003e703

000243e8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   243e8:	4b07      	ldr	r3, [pc, #28]	; (24408 <generic_hfclk_stop+0x20>)
   243ea:	e8d3 2fef 	ldaex	r2, [r3]
   243ee:	f022 0102 	bic.w	r1, r2, #2
   243f2:	e8c3 1fe0 	stlex	r0, r1, [r3]
   243f6:	2800      	cmp	r0, #0
   243f8:	d1f7      	bne.n	243ea <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   243fa:	07d3      	lsls	r3, r2, #31
   243fc:	d402      	bmi.n	24404 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   243fe:	2001      	movs	r0, #1
   24400:	f00e b800 	b.w	32404 <nrfx_clock_stop>
}
   24404:	4770      	bx	lr
   24406:	bf00      	nop
   24408:	20019250 	.word	0x20019250

0002440c <z_nrf_clock_control_lf_on>:
{
   2440c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   24410:	2201      	movs	r2, #1
   24412:	4606      	mov	r6, r0
   24414:	4942      	ldr	r1, [pc, #264]	; (24520 <z_nrf_clock_control_lf_on+0x114>)
   24416:	e8d1 3fef 	ldaex	r3, [r1]
   2441a:	e8c1 2fe0 	stlex	r0, r2, [r1]
   2441e:	2800      	cmp	r0, #0
   24420:	d1f9      	bne.n	24416 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   24422:	b99b      	cbnz	r3, 2444c <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   24424:	493f      	ldr	r1, [pc, #252]	; (24524 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
   24426:	4840      	ldr	r0, [pc, #256]	; (24528 <z_nrf_clock_control_lf_on+0x11c>)
   24428:	604b      	str	r3, [r1, #4]
   2442a:	60cb      	str	r3, [r1, #12]
   2442c:	608a      	str	r2, [r1, #8]
   2442e:	f7fc fde9 	bl	21004 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   24432:	2800      	cmp	r0, #0
   24434:	da0a      	bge.n	2444c <z_nrf_clock_control_lf_on+0x40>
   24436:	493d      	ldr	r1, [pc, #244]	; (2452c <z_nrf_clock_control_lf_on+0x120>)
   24438:	483d      	ldr	r0, [pc, #244]	; (24530 <z_nrf_clock_control_lf_on+0x124>)
   2443a:	f44f 7208 	mov.w	r2, #544	; 0x220
   2443e:	f018 fb25 	bl	3ca8c <assert_print>
   24442:	f44f 7108 	mov.w	r1, #544	; 0x220
   24446:	4839      	ldr	r0, [pc, #228]	; (2452c <z_nrf_clock_control_lf_on+0x120>)
   24448:	f018 fb19 	bl	3ca7e <assert_post_action>
	switch (start_mode) {
   2444c:	b386      	cbz	r6, 244b0 <z_nrf_clock_control_lf_on+0xa4>
   2444e:	1e73      	subs	r3, r6, #1
   24450:	2b01      	cmp	r3, #1
   24452:	d852      	bhi.n	244fa <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   24454:	2e01      	cmp	r6, #1
   24456:	d106      	bne.n	24466 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   24458:	4b36      	ldr	r3, [pc, #216]	; (24534 <z_nrf_clock_control_lf_on+0x128>)
   2445a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   2445e:	f003 0303 	and.w	r3, r3, #3
   24462:	2b02      	cmp	r3, #2
   24464:	d024      	beq.n	244b0 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   24466:	f01c fd7f 	bl	40f68 <k_is_in_isr>
   2446a:	4604      	mov	r4, r0
   2446c:	b918      	cbnz	r0, 24476 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
   2446e:	4b32      	ldr	r3, [pc, #200]	; (24538 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
   24470:	781b      	ldrb	r3, [r3, #0]
   24472:	2b00      	cmp	r3, #0
   24474:	d14e      	bne.n	24514 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
   24476:	f04f 0320 	mov.w	r3, #32
   2447a:	f3ef 8711 	mrs	r7, BASEPRI
   2447e:	f383 8812 	msr	BASEPRI_MAX, r3
   24482:	f3bf 8f6f 	isb	sy
   24486:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   24488:	4d2a      	ldr	r5, [pc, #168]	; (24534 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2448a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 2453c <z_nrf_clock_control_lf_on+0x130>
   2448e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   24492:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   24496:	03d2      	lsls	r2, r2, #15
   24498:	d50c      	bpl.n	244b4 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   2449a:	f003 0303 	and.w	r3, r3, #3
   2449e:	2b02      	cmp	r3, #2
   244a0:	d001      	beq.n	244a6 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   244a2:	2e01      	cmp	r6, #1
   244a4:	d106      	bne.n	244b4 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
   244a6:	b324      	cbz	r4, 244f2 <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
   244a8:	f387 8811 	msr	BASEPRI, r7
   244ac:	f3bf 8f6f 	isb	sy
}
   244b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   244b4:	b1c4      	cbz	r4, 244e8 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   244b6:	4638      	mov	r0, r7
   244b8:	f7fe fadc 	bl	22a74 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   244bc:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   244c0:	b2db      	uxtb	r3, r3
   244c2:	2b01      	cmp	r3, #1
   244c4:	d1e3      	bne.n	2448e <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   244c6:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   244ca:	2a00      	cmp	r2, #0
   244cc:	d0df      	beq.n	2448e <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   244ce:	2200      	movs	r2, #0
   244d0:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   244d4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   244d8:	2202      	movs	r2, #2
   244da:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   244de:	2220      	movs	r2, #32
   244e0:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   244e4:	60ab      	str	r3, [r5, #8]
}
   244e6:	e7d2      	b.n	2448e <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
   244e8:	2100      	movs	r1, #0
   244ea:	2021      	movs	r0, #33	; 0x21
   244ec:	f014 f890 	bl	38610 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   244f0:	e7e4      	b.n	244bc <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
   244f2:	2302      	movs	r3, #2
   244f4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   244f8:	e7da      	b.n	244b0 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
   244fa:	490c      	ldr	r1, [pc, #48]	; (2452c <z_nrf_clock_control_lf_on+0x120>)
   244fc:	480c      	ldr	r0, [pc, #48]	; (24530 <z_nrf_clock_control_lf_on+0x124>)
   244fe:	f240 2232 	movw	r2, #562	; 0x232
   24502:	f018 fac3 	bl	3ca8c <assert_print>
}
   24506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
   2450a:	f240 2132 	movw	r1, #562	; 0x232
   2450e:	4807      	ldr	r0, [pc, #28]	; (2452c <z_nrf_clock_control_lf_on+0x120>)
   24510:	f018 bab5 	b.w	3ca7e <assert_post_action>
    p_reg->INTENCLR = mask;
   24514:	2202      	movs	r2, #2
   24516:	4b07      	ldr	r3, [pc, #28]	; (24534 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
   24518:	4607      	mov	r7, r0
   2451a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2451e:	e7b3      	b.n	24488 <z_nrf_clock_control_lf_on+0x7c>
   24520:	20019254 	.word	0x20019254
   24524:	200191e8 	.word	0x200191e8
   24528:	20019218 	.word	0x20019218
   2452c:	00044bf7 	.word	0x00044bf7
   24530:	0004409e 	.word	0x0004409e
   24534:	40005000 	.word	0x40005000
   24538:	2001d3cc 	.word	0x2001d3cc
   2453c:	e000e100 	.word	0xe000e100

00024540 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   24540:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   24542:	4808      	ldr	r0, [pc, #32]	; (24564 <uart_console_init+0x24>)
   24544:	4b08      	ldr	r3, [pc, #32]	; (24568 <uart_console_init+0x28>)
   24546:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   24548:	f01c fced 	bl	40f26 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   2454c:	b138      	cbz	r0, 2455e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   2454e:	4807      	ldr	r0, [pc, #28]	; (2456c <uart_console_init+0x2c>)
   24550:	f7ff f98a 	bl	23868 <__stdout_hook_install>
	__printk_hook_install(console_out);
   24554:	4805      	ldr	r0, [pc, #20]	; (2456c <uart_console_init+0x2c>)
   24556:	f7fc fb33 	bl	20bc0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   2455a:	2000      	movs	r0, #0
}
   2455c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2455e:	f06f 0012 	mvn.w	r0, #18
   24562:	e7fb      	b.n	2455c <uart_console_init+0x1c>
   24564:	0004238c 	.word	0x0004238c
   24568:	20019258 	.word	0x20019258
   2456c:	00024571 	.word	0x00024571

00024570 <console_out>:
	if ('\n' == c) {
   24570:	280a      	cmp	r0, #10
{
   24572:	b538      	push	{r3, r4, r5, lr}
   24574:	4604      	mov	r4, r0
   24576:	4d07      	ldr	r5, [pc, #28]	; (24594 <console_out+0x24>)
	if ('\n' == c) {
   24578:	d104      	bne.n	24584 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   2457a:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   2457c:	6883      	ldr	r3, [r0, #8]
   2457e:	210d      	movs	r1, #13
   24580:	685b      	ldr	r3, [r3, #4]
   24582:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   24584:	6828      	ldr	r0, [r5, #0]
   24586:	6883      	ldr	r3, [r0, #8]
   24588:	b2e1      	uxtb	r1, r4
   2458a:	685b      	ldr	r3, [r3, #4]
   2458c:	4798      	blx	r3
}
   2458e:	4620      	mov	r0, r4
   24590:	bd38      	pop	{r3, r4, r5, pc}
   24592:	bf00      	nop
   24594:	20019258 	.word	0x20019258

00024598 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   24598:	b570      	push	{r4, r5, r6, lr}
   2459a:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   2459c:	460c      	mov	r4, r1
	return port->data;
   2459e:	6905      	ldr	r5, [r0, #16]
   245a0:	b941      	cbnz	r1, 245b4 <gpio_nrfx_manage_callback+0x1c>
   245a2:	491e      	ldr	r1, [pc, #120]	; (2461c <gpio_nrfx_manage_callback+0x84>)
   245a4:	481e      	ldr	r0, [pc, #120]	; (24620 <gpio_nrfx_manage_callback+0x88>)
   245a6:	2224      	movs	r2, #36	; 0x24
   245a8:	f018 fa70 	bl	3ca8c <assert_print>
   245ac:	2124      	movs	r1, #36	; 0x24
   245ae:	481b      	ldr	r0, [pc, #108]	; (2461c <gpio_nrfx_manage_callback+0x84>)
   245b0:	f018 fa65 	bl	3ca7e <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   245b4:	6863      	ldr	r3, [r4, #4]
   245b6:	b943      	cbnz	r3, 245ca <gpio_nrfx_manage_callback+0x32>
   245b8:	4918      	ldr	r1, [pc, #96]	; (2461c <gpio_nrfx_manage_callback+0x84>)
   245ba:	4819      	ldr	r0, [pc, #100]	; (24620 <gpio_nrfx_manage_callback+0x88>)
   245bc:	2225      	movs	r2, #37	; 0x25
   245be:	f018 fa65 	bl	3ca8c <assert_print>
   245c2:	2125      	movs	r1, #37	; 0x25
   245c4:	4815      	ldr	r0, [pc, #84]	; (2461c <gpio_nrfx_manage_callback+0x84>)
   245c6:	f018 fa5a 	bl	3ca7e <assert_post_action>
	return list->head;
   245ca:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   245cc:	b15b      	cbz	r3, 245e6 <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   245ce:	2200      	movs	r2, #0
   245d0:	429c      	cmp	r4, r3
   245d2:	d112      	bne.n	245fa <gpio_nrfx_manage_callback+0x62>
	return node->next;
   245d4:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   245d6:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   245d8:	b952      	cbnz	r2, 245f0 <gpio_nrfx_manage_callback+0x58>
   245da:	42a1      	cmp	r1, r4
	list->head = node;
   245dc:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   245de:	d100      	bne.n	245e2 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   245e0:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   245e2:	2300      	movs	r3, #0
   245e4:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   245e6:	b96e      	cbnz	r6, 24604 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   245e8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   245ea:	bd70      	pop	{r4, r5, r6, pc}
   245ec:	460b      	mov	r3, r1
   245ee:	e7ef      	b.n	245d0 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   245f0:	42a1      	cmp	r1, r4
	parent->next = child;
   245f2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   245f4:	bf08      	it	eq
   245f6:	60aa      	streq	r2, [r5, #8]
}
   245f8:	e7f3      	b.n	245e2 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   245fa:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   245fc:	461a      	mov	r2, r3
   245fe:	2900      	cmp	r1, #0
   24600:	d1f4      	bne.n	245ec <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   24602:	b13e      	cbz	r6, 24614 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   24604:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   24606:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   24608:	6023      	str	r3, [r4, #0]
	list->head = node;
   2460a:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2460c:	2800      	cmp	r0, #0
   2460e:	d1eb      	bne.n	245e8 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   24610:	60ac      	str	r4, [r5, #8]
}
   24612:	e7ea      	b.n	245ea <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   24614:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24618:	e7e7      	b.n	245ea <gpio_nrfx_manage_callback+0x52>
   2461a:	bf00      	nop
   2461c:	00044c54 	.word	0x00044c54
   24620:	0004409e 	.word	0x0004409e

00024624 <gpio_nrfx_pin_interrupt_configure>:
{
   24624:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
   24626:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   24628:	f001 041f 	and.w	r4, r1, #31
   2462c:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   2462e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   24632:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   24636:	f04f 0500 	mov.w	r5, #0
   2463a:	d104      	bne.n	24646 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   2463c:	4620      	mov	r0, r4
   2463e:	f00e f9f7 	bl	32a30 <nrfx_gpiote_trigger_disable>
	return 0;
   24642:	2000      	movs	r0, #0
   24644:	e04b      	b.n	246de <gpio_nrfx_pin_interrupt_configure+0xba>
	if (mode == GPIO_INT_MODE_LEVEL) {
   24646:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2464a:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   2464e:	d148      	bne.n	246e2 <gpio_nrfx_pin_interrupt_configure+0xbe>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   24650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   24654:	bf0c      	ite	eq
   24656:	2304      	moveq	r3, #4
   24658:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   2465a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   2465e:	6883      	ldr	r3, [r0, #8]
   24660:	fa23 f101 	lsr.w	r1, r3, r1
   24664:	07c9      	lsls	r1, r1, #31
   24666:	d448      	bmi.n	246fa <gpio_nrfx_pin_interrupt_configure+0xd6>
   24668:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   2466c:	d145      	bne.n	246fa <gpio_nrfx_pin_interrupt_configure+0xd6>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   2466e:	0966      	lsrs	r6, r4, #5
   24670:	bf0c      	ite	eq
   24672:	f04f 33ff 	moveq.w	r3, #4294967295
   24676:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   24678:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   2467c:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2467e:	07da      	lsls	r2, r3, #31
   24680:	d40a      	bmi.n	24698 <gpio_nrfx_pin_interrupt_configure+0x74>
   24682:	4926      	ldr	r1, [pc, #152]	; (2471c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   24684:	4826      	ldr	r0, [pc, #152]	; (24720 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   24686:	f240 2229 	movw	r2, #553	; 0x229
   2468a:	f018 f9ff 	bl	3ca8c <assert_print>
   2468e:	f240 2129 	movw	r1, #553	; 0x229
   24692:	4822      	ldr	r0, [pc, #136]	; (2471c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   24694:	f018 f9f3 	bl	3ca7e <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24698:	b156      	cbz	r6, 246b0 <gpio_nrfx_pin_interrupt_configure+0x8c>
            NRFX_ASSERT(0);
   2469a:	4920      	ldr	r1, [pc, #128]	; (2471c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   2469c:	4820      	ldr	r0, [pc, #128]	; (24720 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   2469e:	f240 222e 	movw	r2, #558	; 0x22e
   246a2:	f018 f9f3 	bl	3ca8c <assert_print>
   246a6:	f240 212e 	movw	r1, #558	; 0x22e
   246aa:	481c      	ldr	r0, [pc, #112]	; (2471c <gpio_nrfx_pin_interrupt_configure+0xf8>)
   246ac:	f018 f9e7 	bl	3ca7e <assert_post_action>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   246b0:	4b1c      	ldr	r3, [pc, #112]	; (24724 <gpio_nrfx_pin_interrupt_configure+0x100>)
   246b2:	3580      	adds	r5, #128	; 0x80
   246b4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   246b8:	07db      	lsls	r3, r3, #31
   246ba:	d41e      	bmi.n	246fa <gpio_nrfx_pin_interrupt_configure+0xd6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   246bc:	f10d 0507 	add.w	r5, sp, #7
   246c0:	4629      	mov	r1, r5
   246c2:	4620      	mov	r0, r4
   246c4:	f00e f8e2 	bl	3288c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   246c8:	4b17      	ldr	r3, [pc, #92]	; (24728 <gpio_nrfx_pin_interrupt_configure+0x104>)
   246ca:	4298      	cmp	r0, r3
   246cc:	d114      	bne.n	246f8 <gpio_nrfx_pin_interrupt_configure+0xd4>
			err = nrfx_gpiote_channel_alloc(&ch);
   246ce:	4628      	mov	r0, r5
   246d0:	f00e f93c 	bl	3294c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   246d4:	4b15      	ldr	r3, [pc, #84]	; (2472c <gpio_nrfx_pin_interrupt_configure+0x108>)
   246d6:	4298      	cmp	r0, r3
   246d8:	d00e      	beq.n	246f8 <gpio_nrfx_pin_interrupt_configure+0xd4>
				return -ENOMEM;
   246da:	f06f 000b 	mvn.w	r0, #11
}
   246de:	b004      	add	sp, #16
   246e0:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   246e2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   246e6:	d005      	beq.n	246f4 <gpio_nrfx_pin_interrupt_configure+0xd0>
   246e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   246ec:	bf0c      	ite	eq
   246ee:	2302      	moveq	r3, #2
   246f0:	2301      	movne	r3, #1
   246f2:	e7b2      	b.n	2465a <gpio_nrfx_pin_interrupt_configure+0x36>
   246f4:	2303      	movs	r3, #3
   246f6:	e7b0      	b.n	2465a <gpio_nrfx_pin_interrupt_configure+0x36>
		trigger_config.p_in_channel = &ch;
   246f8:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   246fa:	2300      	movs	r3, #0
   246fc:	4620      	mov	r0, r4
   246fe:	4619      	mov	r1, r3
   24700:	aa02      	add	r2, sp, #8
   24702:	f00d ff99 	bl	32638 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   24706:	4b09      	ldr	r3, [pc, #36]	; (2472c <gpio_nrfx_pin_interrupt_configure+0x108>)
   24708:	4298      	cmp	r0, r3
   2470a:	d104      	bne.n	24716 <gpio_nrfx_pin_interrupt_configure+0xf2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   2470c:	2101      	movs	r1, #1
   2470e:	4620      	mov	r0, r4
   24710:	f00e f922 	bl	32958 <nrfx_gpiote_trigger_enable>
   24714:	e795      	b.n	24642 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   24716:	f06f 0004 	mvn.w	r0, #4
   2471a:	e7e0      	b.n	246de <gpio_nrfx_pin_interrupt_configure+0xba>
   2471c:	00044c81 	.word	0x00044c81
   24720:	0004409e 	.word	0x0004409e
   24724:	40842500 	.word	0x40842500
   24728:	0bad0004 	.word	0x0bad0004
   2472c:	0bad0000 	.word	0x0bad0000

00024730 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   24730:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   24732:	f00e f8fb 	bl	3292c <nrfx_gpiote_is_init>
   24736:	4604      	mov	r4, r0
   24738:	b968      	cbnz	r0, 24756 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   2473a:	f00e f8cf 	bl	328dc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   2473e:	4b08      	ldr	r3, [pc, #32]	; (24760 <gpio_nrfx_init+0x30>)
   24740:	4298      	cmp	r0, r3
   24742:	d10a      	bne.n	2475a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   24744:	4621      	mov	r1, r4
   24746:	4807      	ldr	r0, [pc, #28]	; (24764 <gpio_nrfx_init+0x34>)
   24748:	f00e f89a 	bl	32880 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2474c:	4622      	mov	r2, r4
   2474e:	2105      	movs	r1, #5
   24750:	2031      	movs	r0, #49	; 0x31
   24752:	f7fe fa31 	bl	22bb8 <z_arm_irq_priority_set>
		return 0;
   24756:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   24758:	bd10      	pop	{r4, pc}
		return -EIO;
   2475a:	f06f 0004 	mvn.w	r0, #4
   2475e:	e7fb      	b.n	24758 <gpio_nrfx_init+0x28>
   24760:	0bad0000 	.word	0x0bad0000
   24764:	00024769 	.word	0x00024769

00024768 <nrfx_gpio_handler>:
{
   24768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2476c:	0943      	lsrs	r3, r0, #5
   2476e:	d122      	bne.n	247b6 <nrfx_gpio_handler+0x4e>
	return list->head;
   24770:	4b12      	ldr	r3, [pc, #72]	; (247bc <nrfx_gpio_handler+0x54>)
   24772:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   24774:	b1fc      	cbz	r4, 247b6 <nrfx_gpio_handler+0x4e>
	gpio_fire_callbacks(list, port, BIT(pin));
   24776:	2601      	movs	r6, #1
	return node->next;
   24778:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2477a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 247c4 <nrfx_gpio_handler+0x5c>
			__ASSERT(cb->handler, "No callback handler!");
   2477e:	4f10      	ldr	r7, [pc, #64]	; (247c0 <nrfx_gpio_handler+0x58>)
   24780:	f8df 9044 	ldr.w	r9, [pc, #68]	; 247c8 <nrfx_gpio_handler+0x60>
   24784:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
   24786:	68a3      	ldr	r3, [r4, #8]
   24788:	421e      	tst	r6, r3
   2478a:	d010      	beq.n	247ae <nrfx_gpio_handler+0x46>
			__ASSERT(cb->handler, "No callback handler!");
   2478c:	6863      	ldr	r3, [r4, #4]
   2478e:	b943      	cbnz	r3, 247a2 <nrfx_gpio_handler+0x3a>
   24790:	4639      	mov	r1, r7
   24792:	4648      	mov	r0, r9
   24794:	2245      	movs	r2, #69	; 0x45
   24796:	f018 f979 	bl	3ca8c <assert_print>
   2479a:	2145      	movs	r1, #69	; 0x45
   2479c:	4638      	mov	r0, r7
   2479e:	f018 f96e 	bl	3ca7e <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   247a2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   247a6:	4621      	mov	r1, r4
   247a8:	4640      	mov	r0, r8
   247aa:	4032      	ands	r2, r6
   247ac:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   247ae:	b115      	cbz	r5, 247b6 <nrfx_gpio_handler+0x4e>
   247b0:	462c      	mov	r4, r5
   247b2:	682d      	ldr	r5, [r5, #0]
   247b4:	e7e7      	b.n	24786 <nrfx_gpio_handler+0x1e>
}
   247b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   247ba:	bf00      	nop
   247bc:	2001925c 	.word	0x2001925c
   247c0:	00044c54 	.word	0x00044c54
   247c4:	0004235c 	.word	0x0004235c
   247c8:	0004409e 	.word	0x0004409e

000247cc <gpio_nrfx_pin_configure>:
{
   247cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   247d0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   247d2:	f001 051f 	and.w	r5, r1, #31
   247d6:	7b3b      	ldrb	r3, [r7, #12]
{
   247d8:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
   247da:	4614      	mov	r4, r2
{
   247dc:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   247de:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   247e2:	b9ca      	cbnz	r2, 24818 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   247e4:	a902      	add	r1, sp, #8
   247e6:	4628      	mov	r0, r5
   247e8:	f00e f850 	bl	3288c <nrfx_gpiote_channel_get>
   247ec:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   247ee:	4628      	mov	r0, r5
   247f0:	f00e f948 	bl	32a84 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   247f4:	4b49      	ldr	r3, [pc, #292]	; (2491c <gpio_nrfx_pin_configure+0x150>)
   247f6:	4298      	cmp	r0, r3
   247f8:	d004      	beq.n	24804 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   247fa:	f06f 0004 	mvn.w	r0, #4
}
   247fe:	b005      	add	sp, #20
   24800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   24804:	4284      	cmp	r4, r0
   24806:	d105      	bne.n	24814 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   24808:	f89d 0008 	ldrb.w	r0, [sp, #8]
   2480c:	f00e f898 	bl	32940 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   24810:	42a0      	cmp	r0, r4
   24812:	d1f2      	bne.n	247fa <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   24814:	2000      	movs	r0, #0
   24816:	e7f2      	b.n	247fe <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   24818:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   2481c:	f10d 0103 	add.w	r1, sp, #3
   24820:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   24822:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   24826:	f00e f831 	bl	3288c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2482a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   2482c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2482e:	4649      	mov	r1, r9
   24830:	4628      	mov	r0, r5
   24832:	aa02      	add	r2, sp, #8
   24834:	f00d ff00 	bl	32638 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   24838:	4b38      	ldr	r3, [pc, #224]	; (2491c <gpio_nrfx_pin_configure+0x150>)
   2483a:	4298      	cmp	r0, r3
   2483c:	d002      	beq.n	24844 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   2483e:	f06f 0015 	mvn.w	r0, #21
   24842:	e7dc      	b.n	247fe <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   24844:	4580      	cmp	r8, r0
   24846:	d103      	bne.n	24850 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   24848:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2484c:	f00e f878 	bl	32940 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   24850:	03a3      	lsls	r3, r4, #14
   24852:	d54f      	bpl.n	248f4 <gpio_nrfx_pin_configure+0x128>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   24854:	f240 6306 	movw	r3, #1542	; 0x606
   24858:	f240 2206 	movw	r2, #518	; 0x206
   2485c:	4023      	ands	r3, r4
   2485e:	4293      	cmp	r3, r2
   24860:	d03a      	beq.n	248d8 <gpio_nrfx_pin_configure+0x10c>
   24862:	d80c      	bhi.n	2487e <gpio_nrfx_pin_configure+0xb2>
   24864:	2b06      	cmp	r3, #6
   24866:	d015      	beq.n	24894 <gpio_nrfx_pin_configure+0xc8>
   24868:	d804      	bhi.n	24874 <gpio_nrfx_pin_configure+0xa8>
   2486a:	b19b      	cbz	r3, 24894 <gpio_nrfx_pin_configure+0xc8>
   2486c:	2b02      	cmp	r3, #2
   2486e:	d1e6      	bne.n	2483e <gpio_nrfx_pin_configure+0x72>
   24870:	2304      	movs	r3, #4
   24872:	e00f      	b.n	24894 <gpio_nrfx_pin_configure+0xc8>
   24874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   24878:	d1e1      	bne.n	2483e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   2487a:	2301      	movs	r3, #1
   2487c:	e00a      	b.n	24894 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   2487e:	f240 4202 	movw	r2, #1026	; 0x402
   24882:	4293      	cmp	r3, r2
   24884:	d02a      	beq.n	248dc <gpio_nrfx_pin_configure+0x110>
   24886:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   2488a:	d029      	beq.n	248e0 <gpio_nrfx_pin_configure+0x114>
   2488c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24890:	d1d5      	bne.n	2483e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   24892:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   24894:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   24898:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   2489c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   248a0:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   248a2:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   248a6:	bf4c      	ite	mi
   248a8:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
   248aa:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   248ae:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   248b0:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   248b4:	d516      	bpl.n	248e4 <gpio_nrfx_pin_configure+0x118>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   248b6:	2101      	movs	r1, #1
   248b8:	687b      	ldr	r3, [r7, #4]
   248ba:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   248be:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   248c0:	2200      	movs	r2, #0
   248c2:	4628      	mov	r0, r5
   248c4:	a901      	add	r1, sp, #4
   248c6:	f00d ff63 	bl	32790 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   248ca:	4b14      	ldr	r3, [pc, #80]	; (2491c <gpio_nrfx_pin_configure+0x150>)
   248cc:	4298      	cmp	r0, r3
   248ce:	bf14      	ite	ne
   248d0:	f06f 0015 	mvnne.w	r0, #21
   248d4:	2000      	moveq	r0, #0
   248d6:	e792      	b.n	247fe <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   248d8:	2307      	movs	r3, #7
   248da:	e7db      	b.n	24894 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   248dc:	2305      	movs	r3, #5
   248de:	e7d9      	b.n	24894 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   248e0:	2303      	movs	r3, #3
   248e2:	e7d7      	b.n	24894 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   248e4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   248e6:	bf41      	itttt	mi
   248e8:	2101      	movmi	r1, #1
   248ea:	687b      	ldrmi	r3, [r7, #4]
   248ec:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   248f0:	60de      	strmi	r6, [r3, #12]
}
   248f2:	e7e5      	b.n	248c0 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
   248f4:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   248f6:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   248fa:	bf4c      	ite	mi
   248fc:	2403      	movmi	r4, #3
   248fe:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   24902:	461a      	mov	r2, r3
   24904:	4628      	mov	r0, r5
   24906:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   24908:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2490c:	f00d fe94 	bl	32638 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   24910:	4b02      	ldr	r3, [pc, #8]	; (2491c <gpio_nrfx_pin_configure+0x150>)
   24912:	4298      	cmp	r0, r3
   24914:	f43f af7e 	beq.w	24814 <gpio_nrfx_pin_configure+0x48>
   24918:	e791      	b.n	2483e <gpio_nrfx_pin_configure+0x72>
   2491a:	bf00      	nop
   2491c:	0bad0000 	.word	0x0bad0000

00024920 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   24920:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   24922:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   24924:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
   24928:	f00e ff40 	bl	337ac <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   2492c:	4b03      	ldr	r3, [pc, #12]	; (2493c <i2c_nrfx_twim_recover_bus+0x1c>)
   2492e:	4298      	cmp	r0, r3
}
   24930:	bf14      	ite	ne
   24932:	f06f 000f 	mvnne.w	r0, #15
   24936:	2000      	moveq	r0, #0
   24938:	bd08      	pop	{r3, pc}
   2493a:	bf00      	nop
   2493c:	0bad0000 	.word	0x0bad0000

00024940 <init_twim>:
{
   24940:	b538      	push	{r3, r4, r5, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   24942:	6905      	ldr	r5, [r0, #16]
{
   24944:	4604      	mov	r4, r0
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
   24946:	462b      	mov	r3, r5
   24948:	4a0a      	ldr	r2, [pc, #40]	; (24974 <init_twim+0x34>)
   2494a:	6840      	ldr	r0, [r0, #4]
   2494c:	f105 0130 	add.w	r1, r5, #48	; 0x30
   24950:	f00e fb24 	bl	32f9c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   24954:	4b08      	ldr	r3, [pc, #32]	; (24978 <init_twim+0x38>)
   24956:	4298      	cmp	r0, r3
   24958:	d007      	beq.n	2496a <init_twim+0x2a>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   2495a:	4808      	ldr	r0, [pc, #32]	; (2497c <init_twim+0x3c>)
   2495c:	2145      	movs	r1, #69	; 0x45
   2495e:	6822      	ldr	r2, [r4, #0]
   24960:	f018 f8ce 	bl	3cb00 <z_log_minimal_printk>
   24964:	f06f 0004 	mvn.w	r0, #4
}
   24968:	bd38      	pop	{r3, r4, r5, pc}
	dev_data->twim_initialized = true;
   2496a:	2301      	movs	r3, #1
	return 0;
   2496c:	2000      	movs	r0, #0
	dev_data->twim_initialized = true;
   2496e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
	return 0;
   24972:	e7f9      	b.n	24968 <init_twim+0x28>
   24974:	000249dd 	.word	0x000249dd
   24978:	0bad0000 	.word	0x0bad0000
   2497c:	00044cbf 	.word	0x00044cbf

00024980 <i2c_nrfx_twim_configure>:
{
   24980:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   24982:	07cb      	lsls	r3, r1, #31
{
   24984:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
   24986:	d409      	bmi.n	2499c <i2c_nrfx_twim_configure+0x1c>
	switch (I2C_SPEED_GET(i2c_config)) {
   24988:	f3c1 0142 	ubfx	r1, r1, #1, #3
   2498c:	2901      	cmp	r1, #1
   2498e:	d008      	beq.n	249a2 <i2c_nrfx_twim_configure+0x22>
   24990:	2902      	cmp	r1, #2
   24992:	d01b      	beq.n	249cc <i2c_nrfx_twim_configure+0x4c>
		LOG_ERR("unsupported speed");
   24994:	2145      	movs	r1, #69	; 0x45
   24996:	4810      	ldr	r0, [pc, #64]	; (249d8 <i2c_nrfx_twim_configure+0x58>)
   24998:	f018 f8b2 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   2499c:	f06f 0015 	mvn.w	r0, #21
}
   249a0:	bd38      	pop	{r3, r4, r5, pc}
		frequency = NRF_TWIM_FREQ_100K;
   249a2:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   249a6:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
   249a8:	6baa      	ldr	r2, [r5, #56]	; 0x38
   249aa:	4293      	cmp	r3, r2
   249ac:	d011      	beq.n	249d2 <i2c_nrfx_twim_configure+0x52>
		dev_data->twim_config.frequency = frequency;
   249ae:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dev_data->twim_initialized) {
   249b0:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   249b4:	b12b      	cbz	r3, 249c2 <i2c_nrfx_twim_configure+0x42>
		nrfx_twim_uninit(&dev_config->twim);
   249b6:	6860      	ldr	r0, [r4, #4]
   249b8:	f00e fbbc 	bl	33134 <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
   249bc:	2300      	movs	r3, #0
   249be:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		return init_twim(dev);
   249c2:	4620      	mov	r0, r4
}
   249c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
   249c8:	f7ff bfba 	b.w	24940 <init_twim>
	switch (I2C_SPEED_GET(i2c_config)) {
   249cc:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
   249d0:	e7e9      	b.n	249a6 <i2c_nrfx_twim_configure+0x26>
	return 0;
   249d2:	2000      	movs	r0, #0
   249d4:	e7e4      	b.n	249a0 <i2c_nrfx_twim_configure+0x20>
   249d6:	bf00      	nop
   249d8:	00044ce4 	.word	0x00044ce4

000249dc <event_handler>:
	switch (p_event->type) {
   249dc:	7803      	ldrb	r3, [r0, #0]
   249de:	2b01      	cmp	r3, #1
   249e0:	d008      	beq.n	249f4 <event_handler+0x18>
   249e2:	2b02      	cmp	r3, #2
   249e4:	d008      	beq.n	249f8 <event_handler+0x1c>
   249e6:	b94b      	cbnz	r3, 249fc <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   249e8:	4b05      	ldr	r3, [pc, #20]	; (24a00 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   249ea:	644b      	str	r3, [r1, #68]	; 0x44
	z_impl_k_sem_give(sem);
   249ec:	f101 0018 	add.w	r0, r1, #24
   249f0:	f012 b9c2 	b.w	36d78 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   249f4:	4b03      	ldr	r3, [pc, #12]	; (24a04 <event_handler+0x28>)
   249f6:	e7f8      	b.n	249ea <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   249f8:	4b03      	ldr	r3, [pc, #12]	; (24a08 <event_handler+0x2c>)
   249fa:	e7f6      	b.n	249ea <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   249fc:	4b03      	ldr	r3, [pc, #12]	; (24a0c <event_handler+0x30>)
   249fe:	e7f4      	b.n	249ea <event_handler+0xe>
   24a00:	0bad0000 	.word	0x0bad0000
   24a04:	0bae0001 	.word	0x0bae0001
   24a08:	0bae0002 	.word	0x0bae0002
   24a0c:	0bad0001 	.word	0x0bad0001

00024a10 <i2c_nrfx_twim_transfer>:
{
   24a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a14:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   24a16:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   24a1a:	b08d      	sub	sp, #52	; 0x34
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   24a1c:	6906      	ldr	r6, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   24a1e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
{
   24a22:	9205      	str	r2, [sp, #20]
   24a24:	4607      	mov	r7, r0
   24a26:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   24a28:	2214      	movs	r2, #20
   24a2a:	2100      	movs	r1, #0
   24a2c:	a807      	add	r0, sp, #28
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   24a2e:	9304      	str	r3, [sp, #16]
	uint8_t *msg_buf = dev_data->msg_buf;
   24a30:	f8d6 a048 	ldr.w	sl, [r6, #72]	; 0x48
	nrfx_twim_xfer_desc_t cur_xfer = {
   24a34:	f01c fcfe 	bl	41434 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   24a38:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	nrfx_twim_xfer_desc_t cur_xfer = {
   24a3c:	f88d 501d 	strb.w	r5, [sp, #29]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   24a40:	b1c3      	cbz	r3, 24a74 <i2c_nrfx_twim_transfer+0x64>
	return z_impl_k_sem_take(sem, timeout);
   24a42:	f04f 32ff 	mov.w	r2, #4294967295
   24a46:	f04f 33ff 	mov.w	r3, #4294967295
   24a4a:	4630      	mov	r0, r6
   24a4c:	f012 f9d0 	bl	36df0 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   24a50:	f106 0b18 	add.w	fp, r6, #24
	for (size_t i = 0; i < num_msgs; i++) {
   24a54:	f04f 0900 	mov.w	r9, #0
   24a58:	2200      	movs	r2, #0
   24a5a:	2300      	movs	r3, #0
   24a5c:	4658      	mov	r0, fp
   24a5e:	f012 f9c7 	bl	36df0 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   24a62:	4640      	mov	r0, r8
   24a64:	f00e fb0a 	bl	3307c <nrfx_twim_enable>
	uint16_t msg_buf_used = 0;
   24a68:	464d      	mov	r5, r9
	for (size_t i = 0; i < num_msgs; i++) {
   24a6a:	9b05      	ldr	r3, [sp, #20]
   24a6c:	4599      	cmp	r9, r3
   24a6e:	d309      	bcc.n	24a84 <i2c_nrfx_twim_transfer+0x74>
   24a70:	2400      	movs	r4, #0
   24a72:	e02e      	b.n	24ad2 <i2c_nrfx_twim_transfer+0xc2>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   24a74:	4638      	mov	r0, r7
   24a76:	f7ff ff63 	bl	24940 <init_twim>
   24a7a:	2800      	cmp	r0, #0
   24a7c:	dae1      	bge.n	24a42 <i2c_nrfx_twim_transfer+0x32>
		return -EIO;
   24a7e:	f06f 0404 	mvn.w	r4, #4
   24a82:	e02c      	b.n	24ade <i2c_nrfx_twim_transfer+0xce>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   24a84:	7a21      	ldrb	r1, [r4, #8]
   24a86:	070b      	lsls	r3, r1, #28
   24a88:	f100 80b7 	bmi.w	24bfa <i2c_nrfx_twim_transfer+0x1ea>
				&& ((msgs[i].flags & I2C_MSG_READ)
   24a8c:	9a05      	ldr	r2, [sp, #20]
		bool concat_next = ((i + 1) < num_msgs)
   24a8e:	f109 0301 	add.w	r3, r9, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   24a92:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
   24a94:	9302      	str	r3, [sp, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
   24a96:	d20a      	bcs.n	24aae <i2c_nrfx_twim_transfer+0x9e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   24a98:	0788      	lsls	r0, r1, #30
   24a9a:	d408      	bmi.n	24aae <i2c_nrfx_twim_transfer+0x9e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   24a9c:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   24a9e:	ea81 0203 	eor.w	r2, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   24aa2:	f002 0201 	and.w	r2, r2, #1
   24aa6:	f003 0304 	and.w	r3, r3, #4
   24aaa:	4313      	orrs	r3, r2
   24aac:	d01b      	beq.n	24ae6 <i2c_nrfx_twim_transfer+0xd6>
		if (concat_next || (msg_buf_used != 0)) {
   24aae:	b375      	cbz	r5, 24b0e <i2c_nrfx_twim_transfer+0xfe>
				&& ((msgs[i].flags & I2C_MSG_READ)
   24ab0:	2300      	movs	r3, #0
   24ab2:	9303      	str	r3, [sp, #12]
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   24ab4:	6863      	ldr	r3, [r4, #4]
   24ab6:	9804      	ldr	r0, [sp, #16]
   24ab8:	18ea      	adds	r2, r5, r3
   24aba:	4282      	cmp	r2, r0
   24abc:	d915      	bls.n	24aea <i2c_nrfx_twim_transfer+0xda>
				LOG_ERR("Need to use concatenation buffer and "
   24abe:	683a      	ldr	r2, [r7, #0]
   24ac0:	9000      	str	r0, [sp, #0]
   24ac2:	9201      	str	r2, [sp, #4]
   24ac4:	2145      	movs	r1, #69	; 0x45
   24ac6:	462a      	mov	r2, r5
   24ac8:	484d      	ldr	r0, [pc, #308]	; (24c00 <i2c_nrfx_twim_transfer+0x1f0>)
   24aca:	f018 f819 	bl	3cb00 <z_log_minimal_printk>
				ret = -ENOSPC;
   24ace:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&dev_config->twim);
   24ad2:	4640      	mov	r0, r8
   24ad4:	f00e fafa 	bl	330cc <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   24ad8:	4630      	mov	r0, r6
   24ada:	f012 f94d 	bl	36d78 <z_impl_k_sem_give>
}
   24ade:	4620      	mov	r0, r4
   24ae0:	b00d      	add	sp, #52	; 0x34
   24ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((msgs[i].flags & I2C_MSG_READ)
   24ae6:	2301      	movs	r3, #1
   24ae8:	e7e3      	b.n	24ab2 <i2c_nrfx_twim_transfer+0xa2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   24aea:	07c9      	lsls	r1, r1, #31
   24aec:	d405      	bmi.n	24afa <i2c_nrfx_twim_transfer+0xea>
   24aee:	461a      	mov	r2, r3
   24af0:	6821      	ldr	r1, [r4, #0]
   24af2:	eb0a 0005 	add.w	r0, sl, r5
   24af6:	f01c fc7d 	bl	413f4 <memcpy>
			msg_buf_used += msgs[i].len;
   24afa:	6863      	ldr	r3, [r4, #4]
   24afc:	441d      	add	r5, r3
		if (concat_next) {
   24afe:	9b03      	ldr	r3, [sp, #12]
			msg_buf_used += msgs[i].len;
   24b00:	b2ad      	uxth	r5, r5
		if (concat_next) {
   24b02:	2b00      	cmp	r3, #0
   24b04:	d03a      	beq.n	24b7c <i2c_nrfx_twim_transfer+0x16c>
		bool concat_next = ((i + 1) < num_msgs)
   24b06:	f8dd 9008 	ldr.w	r9, [sp, #8]
   24b0a:	340c      	adds	r4, #12
   24b0c:	e7ad      	b.n	24a6a <i2c_nrfx_twim_transfer+0x5a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   24b0e:	07ca      	lsls	r2, r1, #31
   24b10:	d51d      	bpl.n	24b4e <i2c_nrfx_twim_transfer+0x13e>
			cur_xfer.p_primary_buf = msgs[i].buf;
   24b12:	2500      	movs	r5, #0
   24b14:	6823      	ldr	r3, [r4, #0]
   24b16:	930a      	str	r3, [sp, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
   24b18:	6863      	ldr	r3, [r4, #4]
   24b1a:	9308      	str	r3, [sp, #32]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   24b1c:	7a23      	ldrb	r3, [r4, #8]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   24b1e:	4640      	mov	r0, r8
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   24b20:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   24b24:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   24b28:	f88d 201c 	strb.w	r2, [sp, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   24b2c:	a907      	add	r1, sp, #28
   24b2e:	bf0c      	ite	eq
   24b30:	2220      	moveq	r2, #32
   24b32:	2200      	movne	r2, #0
   24b34:	f00e fb4e 	bl	331d4 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   24b38:	4b32      	ldr	r3, [pc, #200]	; (24c04 <i2c_nrfx_twim_transfer+0x1f4>)
   24b3a:	4298      	cmp	r0, r3
   24b3c:	d024      	beq.n	24b88 <i2c_nrfx_twim_transfer+0x178>
			if (res == NRFX_ERROR_BUSY) {
   24b3e:	330b      	adds	r3, #11
				ret = -EIO;
   24b40:	4298      	cmp	r0, r3
   24b42:	bf0c      	ite	eq
   24b44:	f06f 040f 	mvneq.w	r4, #15
   24b48:	f06f 0404 	mvnne.w	r4, #4
   24b4c:	e7c1      	b.n	24ad2 <i2c_nrfx_twim_transfer+0xc2>
			   !nrfx_is_in_ram(msgs[i].buf)) {
   24b4e:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   24b50:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   24b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   24b58:	d0db      	beq.n	24b12 <i2c_nrfx_twim_transfer+0x102>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   24b5a:	6862      	ldr	r2, [r4, #4]
   24b5c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   24b60:	4293      	cmp	r3, r2
   24b62:	d207      	bcs.n	24b74 <i2c_nrfx_twim_transfer+0x164>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   24b64:	2145      	movs	r1, #69	; 0x45
   24b66:	683b      	ldr	r3, [r7, #0]
   24b68:	4827      	ldr	r0, [pc, #156]	; (24c08 <i2c_nrfx_twim_transfer+0x1f8>)
   24b6a:	f017 ffc9 	bl	3cb00 <z_log_minimal_printk>
				ret = -EINVAL;
   24b6e:	f06f 0415 	mvn.w	r4, #21
				break;
   24b72:	e7ae      	b.n	24ad2 <i2c_nrfx_twim_transfer+0xc2>
   24b74:	4650      	mov	r0, sl
   24b76:	f01c fc3d 	bl	413f4 <memcpy>
			msg_buf_used = msgs[i].len;
   24b7a:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   24b7c:	2d00      	cmp	r5, #0
   24b7e:	d0c8      	beq.n	24b12 <i2c_nrfx_twim_transfer+0x102>
			cur_xfer.p_primary_buf = msg_buf;
   24b80:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
   24b84:	9508      	str	r5, [sp, #32]
   24b86:	e7c9      	b.n	24b1c <i2c_nrfx_twim_transfer+0x10c>
	return z_impl_k_sem_take(sem, timeout);
   24b88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   24b8c:	2300      	movs	r3, #0
   24b8e:	4658      	mov	r0, fp
   24b90:	f012 f92e 	bl	36df0 <z_impl_k_sem_take>
		if (ret != 0) {
   24b94:	b170      	cbz	r0, 24bb4 <i2c_nrfx_twim_transfer+0x1a4>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   24b96:	2145      	movs	r1, #69	; 0x45
   24b98:	464a      	mov	r2, r9
   24b9a:	481c      	ldr	r0, [pc, #112]	; (24c0c <i2c_nrfx_twim_transfer+0x1fc>)
   24b9c:	f017 ffb0 	bl	3cb00 <z_log_minimal_printk>
			nrfx_twim_disable(&dev_config->twim);
   24ba0:	4640      	mov	r0, r8
   24ba2:	f00e fa93 	bl	330cc <nrfx_twim_disable>
   24ba6:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
   24baa:	f00e fdff 	bl	337ac <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   24bae:	f06f 0404 	mvn.w	r4, #4
			break;
   24bb2:	e78e      	b.n	24ad2 <i2c_nrfx_twim_transfer+0xc2>
		res = dev_data->res;
   24bb4:	6c72      	ldr	r2, [r6, #68]	; 0x44
		if (res != NRFX_SUCCESS) {
   24bb6:	4b13      	ldr	r3, [pc, #76]	; (24c04 <i2c_nrfx_twim_transfer+0x1f4>)
   24bb8:	429a      	cmp	r2, r3
   24bba:	d005      	beq.n	24bc8 <i2c_nrfx_twim_transfer+0x1b8>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   24bbc:	464b      	mov	r3, r9
   24bbe:	2145      	movs	r1, #69	; 0x45
   24bc0:	4813      	ldr	r0, [pc, #76]	; (24c10 <i2c_nrfx_twim_transfer+0x200>)
   24bc2:	f017 ff9d 	bl	3cb00 <z_log_minimal_printk>
   24bc6:	e7f2      	b.n	24bae <i2c_nrfx_twim_transfer+0x19e>
		if ((msgs[i].flags & I2C_MSG_READ)
   24bc8:	7a23      	ldrb	r3, [r4, #8]
   24bca:	07db      	lsls	r3, r3, #31
   24bcc:	d401      	bmi.n	24bd2 <i2c_nrfx_twim_transfer+0x1c2>
		msg_buf_used = 0;
   24bce:	2500      	movs	r5, #0
   24bd0:	e799      	b.n	24b06 <i2c_nrfx_twim_transfer+0xf6>
		    && cur_xfer.p_primary_buf == msg_buf) {
   24bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24bd4:	459a      	cmp	sl, r3
   24bd6:	d1fa      	bne.n	24bce <i2c_nrfx_twim_transfer+0x1be>
   24bd8:	46a1      	mov	r9, r4
   24bda:	e007      	b.n	24bec <i2c_nrfx_twim_transfer+0x1dc>
				msg_buf_used -= msgs[j].len;
   24bdc:	1aa9      	subs	r1, r5, r2
   24bde:	b28d      	uxth	r5, r1
   24be0:	f8d9 000c 	ldr.w	r0, [r9, #12]
   24be4:	fa1a f181 	uxtah	r1, sl, r1
   24be8:	f01c fc04 	bl	413f4 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   24bec:	f8d9 2004 	ldr.w	r2, [r9, #4]
   24bf0:	f1a9 090c 	sub.w	r9, r9, #12
   24bf4:	4295      	cmp	r5, r2
   24bf6:	d2f1      	bcs.n	24bdc <i2c_nrfx_twim_transfer+0x1cc>
   24bf8:	e7e9      	b.n	24bce <i2c_nrfx_twim_transfer+0x1be>
			ret = -ENOTSUP;
   24bfa:	f06f 0485 	mvn.w	r4, #133	; 0x85
   24bfe:	e768      	b.n	24ad2 <i2c_nrfx_twim_transfer+0xc2>
   24c00:	00044cfb 	.word	0x00044cfb
   24c04:	0bad0000 	.word	0x0bad0000
   24c08:	00044d90 	.word	0x00044d90
   24c0c:	00044dfb 	.word	0x00044dfb
   24c10:	00044e2a 	.word	0x00044e2a

00024c14 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   24c14:	4b02      	ldr	r3, [pc, #8]	; (24c20 <flash_nrf_pages_layout+0xc>)
   24c16:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   24c18:	2301      	movs	r3, #1
   24c1a:	6013      	str	r3, [r2, #0]
}
   24c1c:	4770      	bx	lr
   24c1e:	bf00      	nop
   24c20:	20019268 	.word	0x20019268

00024c24 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   24c24:	4800      	ldr	r0, [pc, #0]	; (24c28 <flash_nrf_get_parameters+0x4>)
   24c26:	4770      	bx	lr
   24c28:	00042bc8 	.word	0x00042bc8

00024c2c <flash_nrf_read>:
{
   24c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24c2e:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   24c30:	4619      	mov	r1, r3
   24c32:	4620      	mov	r0, r4
{
   24c34:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
   24c36:	9301      	str	r3, [sp, #4]
   24c38:	f019 fda6 	bl	3e788 <is_regular_addr_valid>
   24c3c:	9a01      	ldr	r2, [sp, #4]
   24c3e:	b948      	cbnz	r0, 24c54 <flash_nrf_read+0x28>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24c40:	4613      	mov	r3, r2
   24c42:	480d      	ldr	r0, [pc, #52]	; (24c78 <flash_nrf_read+0x4c>)
   24c44:	4622      	mov	r2, r4
   24c46:	2145      	movs	r1, #69	; 0x45
   24c48:	f017 ff5a 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   24c4c:	f06f 0015 	mvn.w	r0, #21
}
   24c50:	b003      	add	sp, #12
   24c52:	bd30      	pop	{r4, r5, pc}
	if (!len) {
   24c54:	b16a      	cbz	r2, 24c72 <flash_nrf_read+0x46>
	if (addr < PM_APP_ADDRESS) {
   24c56:	f5b4 3fe1 	cmp.w	r4, #115200	; 0x1c200
		return soc_secure_mem_read(data, (void *)addr, len);
   24c5a:	4621      	mov	r1, r4
   24c5c:	4628      	mov	r0, r5
	if (addr < PM_APP_ADDRESS) {
   24c5e:	da04      	bge.n	24c6a <flash_nrf_read+0x3e>
}
   24c60:	b003      	add	sp, #12
   24c62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   24c66:	f017 bf31 	b.w	3cacc <soc_secure_mem_read>
   24c6a:	f01c fbc3 	bl	413f4 <memcpy>
	return 0;
   24c6e:	2000      	movs	r0, #0
   24c70:	e7ee      	b.n	24c50 <flash_nrf_read+0x24>
		return 0;
   24c72:	4610      	mov	r0, r2
   24c74:	e7ec      	b.n	24c50 <flash_nrf_read+0x24>
   24c76:	bf00      	nop
   24c78:	00044e62 	.word	0x00044e62

00024c7c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   24c7c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   24c7e:	2201      	movs	r2, #1
   24c80:	4806      	ldr	r0, [pc, #24]	; (24c9c <nrf_flash_init+0x20>)
   24c82:	4611      	mov	r1, r2
   24c84:	f01c f9aa 	bl	40fdc <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   24c88:	f01b f912 	bl	3feb0 <nrfx_nvmc_flash_page_count_get>
   24c8c:	4c04      	ldr	r4, [pc, #16]	; (24ca0 <nrf_flash_init+0x24>)
   24c8e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   24c90:	f01b f90b 	bl	3feaa <nrfx_nvmc_flash_page_size_get>
   24c94:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   24c96:	2000      	movs	r0, #0
   24c98:	bd10      	pop	{r4, pc}
   24c9a:	bf00      	nop
   24c9c:	20019270 	.word	0x20019270
   24ca0:	20019268 	.word	0x20019268

00024ca4 <flash_nrf_erase>:
{
   24ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24ca6:	460e      	mov	r6, r1
   24ca8:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24caa:	f01b f8fe 	bl	3feaa <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   24cae:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24cb0:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   24cb2:	4630      	mov	r0, r6
   24cb4:	f019 fd68 	bl	3e788 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   24cb8:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   24cba:	b348      	cbz	r0, 24d10 <flash_nrf_erase+0x6c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   24cbc:	fbb6 f3f5 	udiv	r3, r6, r5
   24cc0:	fb05 6313 	mls	r3, r5, r3, r6
   24cc4:	b923      	cbnz	r3, 24cd0 <flash_nrf_erase+0x2c>
   24cc6:	fbb4 f3f5 	udiv	r3, r4, r5
   24cca:	fb05 4013 	mls	r0, r5, r3, r4
   24cce:	b140      	cbz	r0, 24ce2 <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   24cd0:	4623      	mov	r3, r4
   24cd2:	4632      	mov	r2, r6
   24cd4:	2145      	movs	r1, #69	; 0x45
   24cd6:	4811      	ldr	r0, [pc, #68]	; (24d1c <flash_nrf_erase+0x78>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24cd8:	f017 ff12 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   24cdc:	f06f 0015 	mvn.w	r0, #21
   24ce0:	e015      	b.n	24d0e <flash_nrf_erase+0x6a>
		if (!n_pages) {
   24ce2:	42a5      	cmp	r5, r4
   24ce4:	d813      	bhi.n	24d0e <flash_nrf_erase+0x6a>
	return z_impl_k_sem_take(sem, timeout);
   24ce6:	f04f 32ff 	mov.w	r2, #4294967295
   24cea:	f04f 33ff 	mov.w	r3, #4294967295
   24cee:	480c      	ldr	r0, [pc, #48]	; (24d20 <flash_nrf_erase+0x7c>)
   24cf0:	f012 f87e 	bl	36df0 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24cf4:	f01b f8d9 	bl	3feaa <nrfx_nvmc_flash_page_size_get>
   24cf8:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   24cfa:	4638      	mov	r0, r7
   24cfc:	f00e f8bc 	bl	32e78 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   24d00:	1b64      	subs	r4, r4, r5
   24d02:	442f      	add	r7, r5
   24d04:	d1f9      	bne.n	24cfa <flash_nrf_erase+0x56>
	z_impl_k_sem_give(sem);
   24d06:	4806      	ldr	r0, [pc, #24]	; (24d20 <flash_nrf_erase+0x7c>)
   24d08:	f012 f836 	bl	36d78 <z_impl_k_sem_give>
	return ret;
   24d0c:	4620      	mov	r0, r4
}
   24d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24d10:	4623      	mov	r3, r4
   24d12:	4632      	mov	r2, r6
   24d14:	2145      	movs	r1, #69	; 0x45
   24d16:	4803      	ldr	r0, [pc, #12]	; (24d24 <flash_nrf_erase+0x80>)
   24d18:	e7de      	b.n	24cd8 <flash_nrf_erase+0x34>
   24d1a:	bf00      	nop
   24d1c:	00044e84 	.word	0x00044e84
   24d20:	20019270 	.word	0x20019270
   24d24:	00044e62 	.word	0x00044e62

00024d28 <flash_nrf_write>:
{
   24d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24d2a:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   24d2c:	4619      	mov	r1, r3
   24d2e:	4630      	mov	r0, r6
{
   24d30:	4617      	mov	r7, r2
   24d32:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   24d34:	f019 fd28 	bl	3e788 <is_regular_addr_valid>
   24d38:	b940      	cbnz	r0, 24d4c <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24d3a:	4623      	mov	r3, r4
   24d3c:	4632      	mov	r2, r6
   24d3e:	2145      	movs	r1, #69	; 0x45
   24d40:	4817      	ldr	r0, [pc, #92]	; (24da0 <flash_nrf_write+0x78>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   24d42:	f017 fedd 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   24d46:	f06f 0015 	mvn.w	r0, #21
}
   24d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   24d4c:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   24d50:	f015 0503 	ands.w	r5, r5, #3
   24d54:	d004      	beq.n	24d60 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   24d56:	4623      	mov	r3, r4
   24d58:	4632      	mov	r2, r6
   24d5a:	2145      	movs	r1, #69	; 0x45
   24d5c:	4811      	ldr	r0, [pc, #68]	; (24da4 <flash_nrf_write+0x7c>)
   24d5e:	e7f0      	b.n	24d42 <flash_nrf_write+0x1a>
	if (!len) {
   24d60:	b1dc      	cbz	r4, 24d9a <flash_nrf_write+0x72>
	return z_impl_k_sem_take(sem, timeout);
   24d62:	f04f 32ff 	mov.w	r2, #4294967295
   24d66:	f04f 33ff 	mov.w	r3, #4294967295
   24d6a:	480f      	ldr	r0, [pc, #60]	; (24da8 <flash_nrf_write+0x80>)
   24d6c:	f012 f840 	bl	36df0 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   24d70:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   24d74:	42ac      	cmp	r4, r5
   24d76:	eb05 0006 	add.w	r0, r5, r6
   24d7a:	d109      	bne.n	24d90 <flash_nrf_write+0x68>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   24d7c:	4a0b      	ldr	r2, [pc, #44]	; (24dac <flash_nrf_write+0x84>)
   24d7e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   24d82:	07db      	lsls	r3, r3, #31
   24d84:	d5fb      	bpl.n	24d7e <flash_nrf_write+0x56>
	z_impl_k_sem_give(sem);
   24d86:	4808      	ldr	r0, [pc, #32]	; (24da8 <flash_nrf_write+0x80>)
   24d88:	f011 fff6 	bl	36d78 <z_impl_k_sem_give>
	return ret;
   24d8c:	2000      	movs	r0, #0
}
   24d8e:	e7dc      	b.n	24d4a <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   24d90:	5979      	ldr	r1, [r7, r5]
   24d92:	f00e f8a1 	bl	32ed8 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   24d96:	3504      	adds	r5, #4
}
   24d98:	e7ec      	b.n	24d74 <flash_nrf_write+0x4c>
		return 0;
   24d9a:	4620      	mov	r0, r4
   24d9c:	e7d5      	b.n	24d4a <flash_nrf_write+0x22>
   24d9e:	bf00      	nop
   24da0:	00044e62 	.word	0x00044e62
   24da4:	00044ea8 	.word	0x00044ea8
   24da8:	20019270 	.word	0x20019270
   24dac:	40039000 	.word	0x40039000

00024db0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   24db0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   24db2:	794b      	ldrb	r3, [r1, #5]
   24db4:	2b01      	cmp	r3, #1
   24db6:	d026      	beq.n	24e06 <uarte_nrfx_configure+0x56>
   24db8:	2b03      	cmp	r3, #3
   24dba:	d121      	bne.n	24e00 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   24dbc:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   24dbe:	798b      	ldrb	r3, [r1, #6]
   24dc0:	2b03      	cmp	r3, #3
   24dc2:	d11d      	bne.n	24e00 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   24dc4:	79cc      	ldrb	r4, [r1, #7]
   24dc6:	b10c      	cbz	r4, 24dcc <uarte_nrfx_configure+0x1c>
   24dc8:	2c01      	cmp	r4, #1
   24dca:	d119      	bne.n	24e00 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   24dcc:	790a      	ldrb	r2, [r1, #4]
   24dce:	b112      	cbz	r2, 24dd6 <uarte_nrfx_configure+0x26>
   24dd0:	2a02      	cmp	r2, #2
   24dd2:	d115      	bne.n	24e00 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   24dd4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   24dd6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   24dd8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   24dda:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   24dde:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   24de0:	d065      	beq.n	24eae <uarte_nrfx_configure+0xfe>
   24de2:	d82d      	bhi.n	24e40 <uarte_nrfx_configure+0x90>
   24de4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   24de8:	d064      	beq.n	24eb4 <uarte_nrfx_configure+0x104>
   24dea:	d816      	bhi.n	24e1a <uarte_nrfx_configure+0x6a>
   24dec:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   24df0:	d062      	beq.n	24eb8 <uarte_nrfx_configure+0x108>
   24df2:	d80a      	bhi.n	24e0a <uarte_nrfx_configure+0x5a>
   24df4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   24df8:	d061      	beq.n	24ebe <uarte_nrfx_configure+0x10e>
   24dfa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   24dfe:	d061      	beq.n	24ec4 <uarte_nrfx_configure+0x114>
   24e00:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24e04:	e052      	b.n	24eac <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   24e06:	2600      	movs	r6, #0
   24e08:	e7d9      	b.n	24dbe <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   24e0a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   24e0e:	d05c      	beq.n	24eca <uarte_nrfx_configure+0x11a>
   24e10:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   24e14:	d1f4      	bne.n	24e00 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   24e16:	4b37      	ldr	r3, [pc, #220]	; (24ef4 <uarte_nrfx_configure+0x144>)
   24e18:	e03c      	b.n	24e94 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24e1a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   24e1e:	d057      	beq.n	24ed0 <uarte_nrfx_configure+0x120>
   24e20:	d807      	bhi.n	24e32 <uarte_nrfx_configure+0x82>
   24e22:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   24e26:	d055      	beq.n	24ed4 <uarte_nrfx_configure+0x124>
   24e28:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   24e2c:	d1e8      	bne.n	24e00 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   24e2e:	4b32      	ldr	r3, [pc, #200]	; (24ef8 <uarte_nrfx_configure+0x148>)
   24e30:	e030      	b.n	24e94 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24e32:	f647 2712 	movw	r7, #31250	; 0x7a12
   24e36:	42bb      	cmp	r3, r7
   24e38:	d1e2      	bne.n	24e00 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   24e3a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   24e3e:	e029      	b.n	24e94 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24e40:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   24e44:	d048      	beq.n	24ed8 <uarte_nrfx_configure+0x128>
   24e46:	d813      	bhi.n	24e70 <uarte_nrfx_configure+0xc0>
   24e48:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   24e4c:	d047      	beq.n	24ede <uarte_nrfx_configure+0x12e>
   24e4e:	d809      	bhi.n	24e64 <uarte_nrfx_configure+0xb4>
   24e50:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   24e54:	42bb      	cmp	r3, r7
   24e56:	d044      	beq.n	24ee2 <uarte_nrfx_configure+0x132>
   24e58:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   24e5c:	d1d0      	bne.n	24e00 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   24e5e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   24e62:	e017      	b.n	24e94 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24e64:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   24e68:	d1ca      	bne.n	24e00 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   24e6a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   24e6e:	e011      	b.n	24e94 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24e70:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   24e74:	d038      	beq.n	24ee8 <uarte_nrfx_configure+0x138>
   24e76:	d808      	bhi.n	24e8a <uarte_nrfx_configure+0xda>
   24e78:	4f20      	ldr	r7, [pc, #128]	; (24efc <uarte_nrfx_configure+0x14c>)
   24e7a:	42bb      	cmp	r3, r7
   24e7c:	d037      	beq.n	24eee <uarte_nrfx_configure+0x13e>
   24e7e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   24e82:	d1bd      	bne.n	24e00 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   24e84:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   24e88:	e004      	b.n	24e94 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24e8a:	4f1d      	ldr	r7, [pc, #116]	; (24f00 <uarte_nrfx_configure+0x150>)
   24e8c:	42bb      	cmp	r3, r7
   24e8e:	d1b7      	bne.n	24e00 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   24e90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   24e94:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
   24e96:	4334      	orrs	r4, r6
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   24e98:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   24e9c:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   24e9e:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   24ea0:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   24ea4:	c903      	ldmia	r1, {r0, r1}
   24ea6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   24eaa:	2000      	movs	r0, #0
}
   24eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   24eae:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   24eb2:	e7ef      	b.n	24e94 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   24eb4:	4b13      	ldr	r3, [pc, #76]	; (24f04 <uarte_nrfx_configure+0x154>)
   24eb6:	e7ed      	b.n	24e94 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   24eb8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   24ebc:	e7ea      	b.n	24e94 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   24ebe:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   24ec2:	e7e7      	b.n	24e94 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24ec4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   24ec8:	e7e4      	b.n	24e94 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   24eca:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   24ece:	e7e1      	b.n	24e94 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   24ed0:	4b0d      	ldr	r3, [pc, #52]	; (24f08 <uarte_nrfx_configure+0x158>)
   24ed2:	e7df      	b.n	24e94 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   24ed4:	4b0d      	ldr	r3, [pc, #52]	; (24f0c <uarte_nrfx_configure+0x15c>)
   24ed6:	e7dd      	b.n	24e94 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   24ed8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   24edc:	e7da      	b.n	24e94 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   24ede:	4b0c      	ldr	r3, [pc, #48]	; (24f10 <uarte_nrfx_configure+0x160>)
   24ee0:	e7d8      	b.n	24e94 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   24ee2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   24ee6:	e7d5      	b.n	24e94 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   24ee8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   24eec:	e7d2      	b.n	24e94 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   24eee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   24ef2:	e7cf      	b.n	24e94 <uarte_nrfx_configure+0xe4>
   24ef4:	0013b000 	.word	0x0013b000
   24ef8:	004ea000 	.word	0x004ea000
   24efc:	0003d090 	.word	0x0003d090
   24f00:	000f4240 	.word	0x000f4240
   24f04:	00275000 	.word	0x00275000
   24f08:	0075c000 	.word	0x0075c000
   24f0c:	003af000 	.word	0x003af000
   24f10:	013a9000 	.word	0x013a9000

00024f14 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   24f14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24f18:	4607      	mov	r7, r0
   24f1a:	2200      	movs	r2, #0
   24f1c:	2101      	movs	r1, #1
   24f1e:	2008      	movs	r0, #8
   24f20:	f7fd fe4a 	bl	22bb8 <z_arm_irq_priority_set>
   24f24:	2008      	movs	r0, #8
   24f26:	f7fd fe15 	bl	22b54 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   24f2a:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   24f2c:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   24f30:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   24f32:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   24f36:	f8d8 900c 	ldr.w	r9, [r8, #12]
   24f3a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   24f3e:	4648      	mov	r0, r9
	data->dev = dev;
   24f40:	6037      	str	r7, [r6, #0]
   24f42:	aa01      	add	r2, sp, #4
   24f44:	f019 fe13 	bl	3eb6e <pinctrl_lookup_state>
	if (ret < 0) {
   24f48:	1e05      	subs	r5, r0, #0
   24f4a:	db1f      	blt.n	24f8c <uarte_0_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   24f4c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   24f4e:	f8d9 2000 	ldr.w	r2, [r9]
   24f52:	7919      	ldrb	r1, [r3, #4]
   24f54:	6818      	ldr	r0, [r3, #0]
   24f56:	f019 fe60 	bl	3ec1a <pinctrl_configure_pins>
	if (err < 0) {
   24f5a:	1e05      	subs	r5, r0, #0
   24f5c:	db16      	blt.n	24f8c <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   24f5e:	4638      	mov	r0, r7
   24f60:	1d31      	adds	r1, r6, #4
   24f62:	f7ff ff25 	bl	24db0 <uarte_nrfx_configure>
	if (err) {
   24f66:	4605      	mov	r5, r0
   24f68:	b980      	cbnz	r0, 24f8c <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   24f6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   24f6e:	0799      	lsls	r1, r3, #30
   24f70:	d52b      	bpl.n	24fca <uarte_0_init+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   24f72:	f106 0016 	add.w	r0, r6, #22
   24f76:	f00d fa95 	bl	324a4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   24f7a:	4b29      	ldr	r3, [pc, #164]	; (25020 <uarte_0_init+0x10c>)
   24f7c:	4298      	cmp	r0, r3
   24f7e:	d009      	beq.n	24f94 <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   24f80:	2145      	movs	r1, #69	; 0x45
   24f82:	4828      	ldr	r0, [pc, #160]	; (25024 <uarte_0_init+0x110>)
   24f84:	f017 fdbc 	bl	3cb00 <z_log_minimal_printk>
		return -EIO;
   24f88:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   24f8c:	4628      	mov	r0, r5
   24f8e:	b003      	add	sp, #12
   24f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   24f94:	7db7      	ldrb	r7, [r6, #22]
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   24f96:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   24f9a:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
   24f9e:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   24fa2:	d10a      	bne.n	24fba <uarte_0_init+0xa6>
   24fa4:	4920      	ldr	r1, [pc, #128]	; (25028 <uarte_0_init+0x114>)
   24fa6:	4821      	ldr	r0, [pc, #132]	; (2502c <uarte_0_init+0x118>)
   24fa8:	f240 224e 	movw	r2, #590	; 0x24e
   24fac:	f017 fd6e 	bl	3ca8c <assert_print>
   24fb0:	f240 214e 	movw	r1, #590	; 0x24e
   24fb4:	481c      	ldr	r0, [pc, #112]	; (25028 <uarte_0_init+0x114>)
   24fb6:	f017 fd62 	bl	3ca7e <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   24fba:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   24fbc:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
   24fc0:	7db2      	ldrb	r2, [r6, #22]
   24fc2:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   24fc4:	4a1a      	ldr	r2, [pc, #104]	; (25030 <uarte_0_init+0x11c>)
   24fc6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   24fca:	2308      	movs	r3, #8
   24fcc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   24fd0:	f898 3008 	ldrb.w	r3, [r8, #8]
   24fd4:	b95b      	cbnz	r3, 24fee <uarte_0_init+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24fd6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   24fda:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   24fde:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   24fe2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   24fe6:	2301      	movs	r3, #1
   24fe8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24fec:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   24fee:	f8d8 3004 	ldr.w	r3, [r8, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   24ff2:	3614      	adds	r6, #20
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   24ff4:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   24ff6:	bf5c      	itt	pl
   24ff8:	f44f 7280 	movpl.w	r2, #256	; 0x100
   24ffc:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   25000:	06db      	lsls	r3, r3, #27
   25002:	bf44      	itt	mi
   25004:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   25008:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   2500c:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2500e:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   25012:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25016:	2301      	movs	r3, #1
   25018:	60a3      	str	r3, [r4, #8]
   2501a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   2501c:	e7b6      	b.n	24f8c <uarte_0_init+0x78>
   2501e:	bf00      	nop
   25020:	0bad0000 	.word	0x0bad0000
   25024:	00044ed5 	.word	0x00044ed5
   25028:	00044ef9 	.word	0x00044ef9
   2502c:	0004409e 	.word	0x0004409e
   25030:	40017000 	.word	0x40017000

00025034 <uarte_nrfx_poll_out>:
{
   25034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25036:	4605      	mov	r5, r0
   25038:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
   2503a:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2503c:	f01b ff94 	bl	40f68 <k_is_in_isr>
   25040:	b910      	cbnz	r0, 25048 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   25042:	4b20      	ldr	r3, [pc, #128]	; (250c4 <uarte_nrfx_poll_out+0x90>)
	if (isr_mode) {
   25044:	781b      	ldrb	r3, [r3, #0]
   25046:	b983      	cbnz	r3, 2506a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   25048:	f04f 0320 	mov.w	r3, #32
   2504c:	f3ef 8411 	mrs	r4, BASEPRI
   25050:	f383 8812 	msr	BASEPRI_MAX, r3
   25054:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   25058:	6868      	ldr	r0, [r5, #4]
   2505a:	f019 fcd3 	bl	3ea04 <is_tx_ready.isra.0>
   2505e:	bb28      	cbnz	r0, 250ac <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   25060:	f384 8811 	msr	BASEPRI, r4
   25064:	f3bf 8f6f 	isb	sy
}
   25068:	e7ee      	b.n	25048 <uarte_nrfx_poll_out+0x14>
{
   2506a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2506c:	6868      	ldr	r0, [r5, #4]
   2506e:	f019 fcc9 	bl	3ea04 <is_tx_ready.isra.0>
   25072:	b970      	cbnz	r0, 25092 <uarte_nrfx_poll_out+0x5e>
   25074:	2001      	movs	r0, #1
   25076:	f01a fe9e 	bl	3fdb6 <nrfx_busy_wait>
   2507a:	3c01      	subs	r4, #1
   2507c:	d1f6      	bne.n	2506c <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   2507e:	2100      	movs	r1, #0
   25080:	2021      	movs	r0, #33	; 0x21
   25082:	f013 fac5 	bl	38610 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   25086:	e7f0      	b.n	2506a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   25088:	f384 8811 	msr	BASEPRI, r4
   2508c:	f3bf 8f6f 	isb	sy
}
   25090:	e7f5      	b.n	2507e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   25092:	f04f 0320 	mov.w	r3, #32
   25096:	f3ef 8411 	mrs	r4, BASEPRI
   2509a:	f383 8812 	msr	BASEPRI_MAX, r3
   2509e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   250a2:	6868      	ldr	r0, [r5, #4]
   250a4:	f019 fcae 	bl	3ea04 <is_tx_ready.isra.0>
   250a8:	2800      	cmp	r0, #0
   250aa:	d0ed      	beq.n	25088 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
   250ac:	4631      	mov	r1, r6
   250ae:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   250b2:	2201      	movs	r2, #1
   250b4:	6868      	ldr	r0, [r5, #4]
   250b6:	f019 fc8a 	bl	3e9ce <tx_start.isra.0>
	__asm__ volatile(
   250ba:	f384 8811 	msr	BASEPRI, r4
   250be:	f3bf 8f6f 	isb	sy
}
   250c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   250c4:	2001d3cc 	.word	0x2001d3cc

000250c8 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   250c8:	b538      	push	{r3, r4, r5, lr}
   250ca:	460c      	mov	r4, r1
   250cc:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(dev != NULL);
   250ce:	b940      	cbnz	r0, 250e2 <entropy_cc3xx_rng_get_entropy+0x1a>
   250d0:	490d      	ldr	r1, [pc, #52]	; (25108 <entropy_cc3xx_rng_get_entropy+0x40>)
   250d2:	480e      	ldr	r0, [pc, #56]	; (2510c <entropy_cc3xx_rng_get_entropy+0x44>)
   250d4:	2220      	movs	r2, #32
   250d6:	f017 fcd9 	bl	3ca8c <assert_print>
   250da:	2120      	movs	r1, #32
   250dc:	480a      	ldr	r0, [pc, #40]	; (25108 <entropy_cc3xx_rng_get_entropy+0x40>)
   250de:	f017 fcce 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   250e2:	b944      	cbnz	r4, 250f6 <entropy_cc3xx_rng_get_entropy+0x2e>
   250e4:	4908      	ldr	r1, [pc, #32]	; (25108 <entropy_cc3xx_rng_get_entropy+0x40>)
   250e6:	4809      	ldr	r0, [pc, #36]	; (2510c <entropy_cc3xx_rng_get_entropy+0x44>)
   250e8:	2221      	movs	r2, #33	; 0x21
   250ea:	f017 fccf 	bl	3ca8c <assert_print>
   250ee:	2121      	movs	r1, #33	; 0x21
   250f0:	4805      	ldr	r0, [pc, #20]	; (25108 <entropy_cc3xx_rng_get_entropy+0x40>)
   250f2:	f017 fcc4 	bl	3ca7e <assert_post_action>
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   250f6:	4629      	mov	r1, r5
   250f8:	4620      	mov	r0, r4
   250fa:	f014 fc29 	bl	39950 <psa_generate_random>
	int err = EINVAL;
   250fe:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   25100:	bf18      	it	ne
   25102:	2016      	movne	r0, #22
   25104:	bd38      	pop	{r3, r4, r5, pc}
   25106:	bf00      	nop
   25108:	00044f48 	.word	0x00044f48
   2510c:	0004409e 	.word	0x0004409e

00025110 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   25110:	2301      	movs	r3, #1
   25112:	4083      	lsls	r3, r0
{
   25114:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   25116:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25118:	4a0c      	ldr	r2, [pc, #48]	; (2514c <compare_int_lock+0x3c>)
   2511a:	e8d2 1fef 	ldaex	r1, [r2]
   2511e:	ea01 0c04 	and.w	ip, r1, r4
   25122:	e8c2 cfee 	stlex	lr, ip, [r2]
   25126:	f1be 0f00 	cmp.w	lr, #0
   2512a:	d1f6      	bne.n	2511a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2512c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25130:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   25134:	4a06      	ldr	r2, [pc, #24]	; (25150 <compare_int_lock+0x40>)
   25136:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   2513a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2513e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   25142:	420b      	tst	r3, r1
}
   25144:	bf14      	ite	ne
   25146:	2001      	movne	r0, #1
   25148:	2000      	moveq	r0, #0
   2514a:	bd10      	pop	{r4, pc}
   2514c:	2001928c 	.word	0x2001928c
   25150:	40015000 	.word	0x40015000

00025154 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   25154:	4919      	ldr	r1, [pc, #100]	; (251bc <sys_clock_timeout_handler+0x68>)
{
   25156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25158:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   2515a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2515e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   25160:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   25164:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   25168:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   2516a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   2516e:	d222      	bcs.n	251b6 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   25170:	4b13      	ldr	r3, [pc, #76]	; (251c0 <sys_clock_timeout_handler+0x6c>)
   25172:	681b      	ldr	r3, [r3, #0]
   25174:	0a1a      	lsrs	r2, r3, #8
   25176:	061b      	lsls	r3, r3, #24
   25178:	195e      	adds	r6, r3, r5
   2517a:	4b12      	ldr	r3, [pc, #72]	; (251c4 <sys_clock_timeout_handler+0x70>)
   2517c:	f142 0700 	adc.w	r7, r2, #0
   25180:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   25184:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   25186:	f013 fd89 	bl	38c9c <sys_clock_announce>
    return p_reg->CC[ch];
   2518a:	00a3      	lsls	r3, r4, #2
   2518c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25190:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   25194:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   25198:	42aa      	cmp	r2, r5
   2519a:	d10b      	bne.n	251b4 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   2519c:	b91e      	cbnz	r6, 251a6 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   2519e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   251a2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   251a6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   251aa:	4b07      	ldr	r3, [pc, #28]	; (251c8 <sys_clock_timeout_handler+0x74>)
   251ac:	fa00 f404 	lsl.w	r4, r0, r4
   251b0:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   251b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   251b6:	2600      	movs	r6, #0
   251b8:	e7e5      	b.n	25186 <sys_clock_timeout_handler+0x32>
   251ba:	bf00      	nop
   251bc:	200153e8 	.word	0x200153e8
   251c0:	20019290 	.word	0x20019290
   251c4:	200153d0 	.word	0x200153d0
   251c8:	40015000 	.word	0x40015000

000251cc <compare_int_unlock>:
	if (key) {
   251cc:	b1e1      	cbz	r1, 25208 <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
   251ce:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   251d0:	4a0e      	ldr	r2, [pc, #56]	; (2520c <compare_int_unlock+0x40>)
   251d2:	4083      	lsls	r3, r0
   251d4:	e8d2 1fef 	ldaex	r1, [r2]
   251d8:	4319      	orrs	r1, r3
   251da:	e8c2 1fec 	stlex	ip, r1, [r2]
   251de:	f1bc 0f00 	cmp.w	ip, #0
   251e2:	d1f7      	bne.n	251d4 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   251e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   251e8:	4a09      	ldr	r2, [pc, #36]	; (25210 <compare_int_unlock+0x44>)
   251ea:	4083      	lsls	r3, r0
   251ec:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   251f0:	4b08      	ldr	r3, [pc, #32]	; (25214 <compare_int_unlock+0x48>)
   251f2:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   251f6:	fa23 f000 	lsr.w	r0, r3, r0
   251fa:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   251fc:	bf42      	ittt	mi
   251fe:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   25202:	4b05      	ldrmi	r3, [pc, #20]	; (25218 <compare_int_unlock+0x4c>)
   25204:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   25208:	4770      	bx	lr
   2520a:	bf00      	nop
   2520c:	2001928c 	.word	0x2001928c
   25210:	40015000 	.word	0x40015000
   25214:	20019288 	.word	0x20019288
   25218:	e000e100 	.word	0xe000e100

0002521c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   2521c:	4b0d      	ldr	r3, [pc, #52]	; (25254 <z_nrf_rtc_timer_read+0x38>)
   2521e:	6818      	ldr	r0, [r3, #0]
   25220:	0a01      	lsrs	r1, r0, #8
   25222:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   25224:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   25228:	4b0b      	ldr	r3, [pc, #44]	; (25258 <z_nrf_rtc_timer_read+0x3c>)
   2522a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   2522e:	1818      	adds	r0, r3, r0
   25230:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   25234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   25238:	d20a      	bcs.n	25250 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   2523a:	4b08      	ldr	r3, [pc, #32]	; (2525c <z_nrf_rtc_timer_read+0x40>)
   2523c:	e9d3 2300 	ldrd	r2, r3, [r3]
   25240:	4290      	cmp	r0, r2
   25242:	eb71 0303 	sbcs.w	r3, r1, r3
   25246:	d203      	bcs.n	25250 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   25248:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   2524c:	f141 0100 	adc.w	r1, r1, #0
}
   25250:	4770      	bx	lr
   25252:	bf00      	nop
   25254:	20019290 	.word	0x20019290
   25258:	40015000 	.word	0x40015000
   2525c:	200153d0 	.word	0x200153d0

00025260 <compare_set>:
{
   25260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25264:	ed2d 8b02 	vpush	{d8}
   25268:	b085      	sub	sp, #20
   2526a:	4616      	mov	r6, r2
   2526c:	4698      	mov	r8, r3
   2526e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   25270:	f7ff ff4e 	bl	25110 <compare_int_lock>
   25274:	ee08 0a10 	vmov	s16, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   25278:	f7ff ffd0 	bl	2521c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2527c:	42b0      	cmp	r0, r6
   2527e:	eb71 0308 	sbcs.w	r3, r1, r8
   25282:	d279      	bcs.n	25378 <compare_set+0x118>
		if (target_time - curr_time > COUNTER_SPAN) {
   25284:	4b44      	ldr	r3, [pc, #272]	; (25398 <compare_set+0x138>)
   25286:	1a30      	subs	r0, r6, r0
   25288:	eb68 0101 	sbc.w	r1, r8, r1
   2528c:	4298      	cmp	r0, r3
   2528e:	f171 0300 	sbcs.w	r3, r1, #0
   25292:	d27e      	bcs.n	25392 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   25294:	4b41      	ldr	r3, [pc, #260]	; (2539c <compare_set+0x13c>)
   25296:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   2529a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   2529e:	45d8      	cmp	r8, fp
   252a0:	bf08      	it	eq
   252a2:	4556      	cmpeq	r6, sl
   252a4:	d050      	beq.n	25348 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   252a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   252aa:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   252ae:	4614      	mov	r4, r2
   252b0:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   252b4:	f105 0750 	add.w	r7, r5, #80	; 0x50
   252b8:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   252bc:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   252be:	40ab      	lsls	r3, r5
   252c0:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   252c4:	b2bf      	uxth	r7, r7
   252c6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   252ca:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   252cc:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   252d0:	4b33      	ldr	r3, [pc, #204]	; (253a0 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   252d2:	f507 37a8 	add.w	r7, r7, #86016	; 0x15000
     return p_reg->COUNTER;
   252d6:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   252da:	1a40      	subs	r0, r0, r1
   252dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   252e0:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   252e4:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   252e6:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   252ea:	d107      	bne.n	252fc <compare_set+0x9c>
   252ec:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   252f0:	2013      	movs	r0, #19
   252f2:	f01b ff11 	bl	41118 <z_impl_k_busy_wait>
   252f6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   252fa:	4b29      	ldr	r3, [pc, #164]	; (253a0 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   252fc:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   25300:	eba4 000c 	sub.w	r0, r4, ip
   25304:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   25308:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2530c:	bf88      	it	hi
   2530e:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25310:	2000      	movs	r0, #0
   25312:	6038      	str	r0, [r7, #0]
   25314:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   25316:	9801      	ldr	r0, [sp, #4]
   25318:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2531c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   25320:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   25324:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   25328:	4281      	cmp	r1, r0
   2532a:	d006      	beq.n	2533a <compare_set+0xda>
	return (a - b) & COUNTER_MAX;
   2532c:	1a20      	subs	r0, r4, r0
   2532e:	3802      	subs	r0, #2
   25330:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   25334:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25338:	d81c      	bhi.n	25374 <compare_set+0x114>
	return (a - b) & COUNTER_MAX;
   2533a:	1aa4      	subs	r4, r4, r2
   2533c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   25340:	eb14 0a06 	adds.w	sl, r4, r6
   25344:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
   25348:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   2534a:	4914      	ldr	r1, [pc, #80]	; (2539c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   2534c:	9810      	ldr	r0, [sp, #64]	; 0x40
	cc_data[chan].target_time = target_time;
   2534e:	012b      	lsls	r3, r5, #4
   25350:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
   25354:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   25356:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
   2535a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2535c:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   2535e:	4628      	mov	r0, r5
   25360:	ee18 1a10 	vmov	r1, s16
   25364:	f7ff ff32 	bl	251cc <compare_int_unlock>
}
   25368:	4620      	mov	r0, r4
   2536a:	b005      	add	sp, #20
   2536c:	ecbd 8b02 	vpop	{d8}
   25370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25374:	4620      	mov	r0, r4
   25376:	e7ae      	b.n	252d6 <compare_set+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
   25378:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2537a:	4a0a      	ldr	r2, [pc, #40]	; (253a4 <compare_set+0x144>)
   2537c:	40ab      	lsls	r3, r5
   2537e:	e8d2 1fef 	ldaex	r1, [r2]
   25382:	4319      	orrs	r1, r3
   25384:	e8c2 1fe0 	stlex	r0, r1, [r2]
   25388:	2800      	cmp	r0, #0
   2538a:	d1f8      	bne.n	2537e <compare_set+0x11e>
   2538c:	46b2      	mov	sl, r6
   2538e:	46c3      	mov	fp, r8
   25390:	e7da      	b.n	25348 <compare_set+0xe8>
			return -EINVAL;
   25392:	f06f 0415 	mvn.w	r4, #21
   25396:	e7e2      	b.n	2535e <compare_set+0xfe>
   25398:	01000001 	.word	0x01000001
   2539c:	200153d8 	.word	0x200153d8
   253a0:	40015000 	.word	0x40015000
   253a4:	20019288 	.word	0x20019288

000253a8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   253a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   253aa:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   253ac:	f04f 30ff 	mov.w	r0, #4294967295
   253b0:	f04f 31ff 	mov.w	r1, #4294967295
   253b4:	4d16      	ldr	r5, [pc, #88]	; (25410 <sys_clock_driver_init+0x68>)
   253b6:	4b17      	ldr	r3, [pc, #92]	; (25414 <sys_clock_driver_init+0x6c>)
   253b8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   253bc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   253c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   253c4:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   253c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   253ca:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   253ce:	4b12      	ldr	r3, [pc, #72]	; (25418 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   253d0:	2101      	movs	r1, #1
   253d2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   253d6:	2015      	movs	r0, #21
   253d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   253dc:	4622      	mov	r2, r4
   253de:	f7fd fbeb 	bl	22bb8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   253e2:	2015      	movs	r0, #21
   253e4:	f7fd fbb6 	bl	22b54 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   253e8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   253ea:	4a0c      	ldr	r2, [pc, #48]	; (2541c <sys_clock_driver_init+0x74>)
   253ec:	60ab      	str	r3, [r5, #8]
   253ee:	602b      	str	r3, [r5, #0]
   253f0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   253f2:	4b0b      	ldr	r3, [pc, #44]	; (25420 <sys_clock_driver_init+0x78>)
   253f4:	4a0b      	ldr	r2, [pc, #44]	; (25424 <sys_clock_driver_init+0x7c>)
   253f6:	9300      	str	r3, [sp, #0]
   253f8:	4620      	mov	r0, r4
   253fa:	2300      	movs	r3, #0
   253fc:	9401      	str	r4, [sp, #4]
   253fe:	f7ff ff2f 	bl	25260 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   25402:	4630      	mov	r0, r6
   25404:	f7ff f802 	bl	2440c <z_nrf_clock_control_lf_on>

	return 0;
}
   25408:	4620      	mov	r0, r4
   2540a:	b002      	add	sp, #8
   2540c:	bd70      	pop	{r4, r5, r6, pc}
   2540e:	bf00      	nop
   25410:	40015000 	.word	0x40015000
   25414:	200153d8 	.word	0x200153d8
   25418:	e000e100 	.word	0xe000e100
   2541c:	2001928c 	.word	0x2001928c
   25420:	00025155 	.word	0x00025155
   25424:	007fffff 	.word	0x007fffff

00025428 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   25428:	4b35      	ldr	r3, [pc, #212]	; (25500 <rtc_nrf_isr+0xd8>)
{
   2542a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2542e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   25432:	0791      	lsls	r1, r2, #30
   25434:	d50b      	bpl.n	2544e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25436:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2543a:	b142      	cbz	r2, 2544e <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2543c:	2200      	movs	r2, #0
   2543e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   25442:	4a30      	ldr	r2, [pc, #192]	; (25504 <rtc_nrf_isr+0xdc>)
   25444:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   25448:	6813      	ldr	r3, [r2, #0]
   2544a:	3301      	adds	r3, #1
   2544c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   2544e:	f04f 0320 	mov.w	r3, #32
   25452:	f3ef 8111 	mrs	r1, BASEPRI
   25456:	f383 8812 	msr	BASEPRI_MAX, r3
   2545a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   2545e:	4b28      	ldr	r3, [pc, #160]	; (25500 <rtc_nrf_isr+0xd8>)
   25460:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   25464:	03d2      	lsls	r2, r2, #15
   25466:	d50d      	bpl.n	25484 <rtc_nrf_isr+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25468:	4a27      	ldr	r2, [pc, #156]	; (25508 <rtc_nrf_isr+0xe0>)
   2546a:	e8d2 0fef 	ldaex	r0, [r2]
   2546e:	f020 0401 	bic.w	r4, r0, #1
   25472:	e8c2 4fe5 	stlex	r5, r4, [r2]
   25476:	2d00      	cmp	r5, #0
   25478:	d1f7      	bne.n	2546a <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   2547a:	2800      	cmp	r0, #0
   2547c:	d136      	bne.n	254ec <rtc_nrf_isr+0xc4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2547e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
   25482:	bb9a      	cbnz	r2, 254ec <rtc_nrf_isr+0xc4>
{
   25484:	2300      	movs	r3, #0
	__asm__ volatile(
   25486:	f381 8811 	msr	BASEPRI, r1
   2548a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   2548e:	b353      	cbz	r3, 254e6 <rtc_nrf_isr+0xbe>
		curr_time = z_nrf_rtc_timer_read();
   25490:	f7ff fec4 	bl	2521c <z_nrf_rtc_timer_read>
	__asm__ volatile(
   25494:	f04f 0320 	mov.w	r3, #32
   25498:	f3ef 8711 	mrs	r7, BASEPRI
   2549c:	f383 8812 	msr	BASEPRI_MAX, r3
   254a0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   254a4:	4b19      	ldr	r3, [pc, #100]	; (2550c <rtc_nrf_isr+0xe4>)
   254a6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
   254aa:	42a0      	cmp	r0, r4
   254ac:	eb71 0205 	sbcs.w	r2, r1, r5
   254b0:	f04f 0200 	mov.w	r2, #0
   254b4:	d321      	bcc.n	254fa <rtc_nrf_isr+0xd2>
			user_context = cc_data[chan].user_context;
   254b6:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   254ba:	f04f 38ff 	mov.w	r8, #4294967295
   254be:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   254c2:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   254c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   254c8:	e9c3 8902 	strd	r8, r9, [r3, #8]
   254cc:	4b0c      	ldr	r3, [pc, #48]	; (25500 <rtc_nrf_isr+0xd8>)
   254ce:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
   254d2:	f387 8811 	msr	BASEPRI, r7
   254d6:	f3bf 8f6f 	isb	sy
		if (handler) {
   254da:	b121      	cbz	r1, 254e6 <rtc_nrf_isr+0xbe>
			handler(chan, expire_time, user_context);
   254dc:	4622      	mov	r2, r4
   254de:	462b      	mov	r3, r5
   254e0:	2000      	movs	r0, #0
   254e2:	9600      	str	r6, [sp, #0]
   254e4:	4788      	blx	r1
}
   254e6:	b003      	add	sp, #12
   254e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   254ec:	2200      	movs	r2, #0
   254ee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
   254f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   254f6:	2301      	movs	r3, #1
}
   254f8:	e7c5      	b.n	25486 <rtc_nrf_isr+0x5e>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   254fa:	4611      	mov	r1, r2
   254fc:	e7e9      	b.n	254d2 <rtc_nrf_isr+0xaa>
   254fe:	bf00      	nop
   25500:	40015000 	.word	0x40015000
   25504:	20019290 	.word	0x20019290
   25508:	20019288 	.word	0x20019288
   2550c:	200153d8 	.word	0x200153d8

00025510 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   25510:	1c43      	adds	r3, r0, #1
{
   25512:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   25514:	d020      	beq.n	25558 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   25516:	2801      	cmp	r0, #1
   25518:	dd20      	ble.n	2555c <sys_clock_set_timeout+0x4c>
   2551a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2551e:	da1f      	bge.n	25560 <sys_clock_set_timeout+0x50>
   25520:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   25522:	f7ff fe7b 	bl	2521c <z_nrf_rtc_timer_read>
   25526:	4b0f      	ldr	r3, [pc, #60]	; (25564 <sys_clock_set_timeout+0x54>)
   25528:	e9d3 1300 	ldrd	r1, r3, [r3]
   2552c:	1a40      	subs	r0, r0, r1
		ticks = 0;
   2552e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25532:	bf28      	it	cs
   25534:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   25536:	3001      	adds	r0, #1
   25538:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   2553a:	480b      	ldr	r0, [pc, #44]	; (25568 <sys_clock_set_timeout+0x58>)
   2553c:	4282      	cmp	r2, r0
   2553e:	bf28      	it	cs
   25540:	4602      	movcs	r2, r0
   25542:	2000      	movs	r0, #0
   25544:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   25546:	4909      	ldr	r1, [pc, #36]	; (2556c <sys_clock_set_timeout+0x5c>)
   25548:	9001      	str	r0, [sp, #4]
   2554a:	9100      	str	r1, [sp, #0]
   2554c:	f143 0300 	adc.w	r3, r3, #0
   25550:	f7ff fe86 	bl	25260 <compare_set>
}
   25554:	b002      	add	sp, #8
   25556:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   25558:	4803      	ldr	r0, [pc, #12]	; (25568 <sys_clock_set_timeout+0x58>)
   2555a:	e7e1      	b.n	25520 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2555c:	2400      	movs	r4, #0
   2555e:	e7e0      	b.n	25522 <sys_clock_set_timeout+0x12>
   25560:	4c01      	ldr	r4, [pc, #4]	; (25568 <sys_clock_set_timeout+0x58>)
   25562:	e7de      	b.n	25522 <sys_clock_set_timeout+0x12>
   25564:	200153e8 	.word	0x200153e8
   25568:	007fffff 	.word	0x007fffff
   2556c:	00025155 	.word	0x00025155

00025570 <sys_clock_elapsed>:
{
   25570:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   25572:	f7ff fe53 	bl	2521c <z_nrf_rtc_timer_read>
   25576:	4b02      	ldr	r3, [pc, #8]	; (25580 <sys_clock_elapsed+0x10>)
   25578:	681b      	ldr	r3, [r3, #0]
}
   2557a:	1ac0      	subs	r0, r0, r3
   2557c:	bd08      	pop	{r3, pc}
   2557e:	bf00      	nop
   25580:	200153e8 	.word	0x200153e8

00025584 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25584:	6803      	ldr	r3, [r0, #0]
{
   25586:	b510      	push	{r4, lr}
    switch (port)
   25588:	095a      	lsrs	r2, r3, #5
   2558a:	bf0c      	ite	eq
   2558c:	f04f 32ff 	moveq.w	r2, #4294967295
   25590:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   25592:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   25596:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2559a:	07db      	lsls	r3, r3, #31
{
   2559c:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2559e:	d40a      	bmi.n	255b6 <nrf_gpio_pin_port_decode+0x32>
   255a0:	490e      	ldr	r1, [pc, #56]	; (255dc <nrf_gpio_pin_port_decode+0x58>)
   255a2:	480f      	ldr	r0, [pc, #60]	; (255e0 <nrf_gpio_pin_port_decode+0x5c>)
   255a4:	f240 2229 	movw	r2, #553	; 0x229
   255a8:	f017 fa70 	bl	3ca8c <assert_print>
   255ac:	f240 2129 	movw	r1, #553	; 0x229
   255b0:	480a      	ldr	r0, [pc, #40]	; (255dc <nrf_gpio_pin_port_decode+0x58>)
   255b2:	f017 fa64 	bl	3ca7e <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   255b6:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   255b8:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   255bc:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   255be:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   255c0:	d00a      	beq.n	255d8 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   255c2:	4906      	ldr	r1, [pc, #24]	; (255dc <nrf_gpio_pin_port_decode+0x58>)
   255c4:	4806      	ldr	r0, [pc, #24]	; (255e0 <nrf_gpio_pin_port_decode+0x5c>)
   255c6:	f240 222e 	movw	r2, #558	; 0x22e
   255ca:	f017 fa5f 	bl	3ca8c <assert_print>
   255ce:	f240 212e 	movw	r1, #558	; 0x22e
   255d2:	4802      	ldr	r0, [pc, #8]	; (255dc <nrf_gpio_pin_port_decode+0x58>)
   255d4:	f017 fa53 	bl	3ca7e <assert_post_action>
}
   255d8:	4802      	ldr	r0, [pc, #8]	; (255e4 <nrf_gpio_pin_port_decode+0x60>)
   255da:	bd10      	pop	{r4, pc}
   255dc:	00044c81 	.word	0x00044c81
   255e0:	0004409e 	.word	0x0004409e
   255e4:	40842500 	.word	0x40842500

000255e8 <nrf_modem_fault_handler>:
 */

#if defined CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault_info)
{
	LOG_ERR("Modem error: 0x%x, PC: 0x%x", fault_info->reason, fault_info->program_counter);
   255e8:	e9d0 2300 	ldrd	r2, r3, [r0]
   255ec:	2145      	movs	r1, #69	; 0x45
   255ee:	4801      	ldr	r0, [pc, #4]	; (255f4 <nrf_modem_fault_handler+0xc>)
   255f0:	f017 ba86 	b.w	3cb00 <z_log_minimal_printk>
   255f4:	00044f86 	.word	0x00044f86

000255f8 <_nrf_modem_lib_init>:
{
   255f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!first_time_init) {
   255fa:	4d21      	ldr	r5, [pc, #132]	; (25680 <_nrf_modem_lib_init+0x88>)
   255fc:	4c21      	ldr	r4, [pc, #132]	; (25684 <_nrf_modem_lib_init+0x8c>)
   255fe:	782b      	ldrb	r3, [r5, #0]
   25600:	b933      	cbnz	r3, 25610 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   25602:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   25606:	4820      	ldr	r0, [pc, #128]	; (25688 <_nrf_modem_lib_init+0x90>)
   25608:	f01b fcca 	bl	40fa0 <z_impl_k_mutex_init>
		first_time_init = true;
   2560c:	2301      	movs	r3, #1
   2560e:	702b      	strb	r3, [r5, #0]
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   25610:	2200      	movs	r2, #0
   25612:	202a      	movs	r0, #42	; 0x2a
   25614:	4611      	mov	r1, r2
   25616:	f7fd facf 	bl	22bb8 <z_arm_irq_priority_set>
	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   2561a:	2100      	movs	r1, #0
   2561c:	481b      	ldr	r0, [pc, #108]	; (2568c <_nrf_modem_lib_init+0x94>)
   2561e:	f010 fbb7 	bl	35d90 <nrf_modem_init>
   25622:	4f1b      	ldr	r7, [pc, #108]	; (25690 <_nrf_modem_lib_init+0x98>)
   25624:	6038      	str	r0, [r7, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   25626:	f04f 32ff 	mov.w	r2, #4294967295
   2562a:	f04f 33ff 	mov.w	r3, #4294967295
   2562e:	4816      	ldr	r0, [pc, #88]	; (25688 <_nrf_modem_lib_init+0x90>)
   25630:	f011 f950 	bl	368d4 <z_impl_k_mutex_lock>
	return list->head;
   25634:	6820      	ldr	r0, [r4, #0]
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   25636:	b1d8      	cbz	r0, 25670 <_nrf_modem_lib_init+0x78>
	return node->next;
   25638:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   2563a:	3004      	adds	r0, #4
   2563c:	f011 fb9c 	bl	36d78 <z_impl_k_sem_give>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   25640:	b1b4      	cbz	r4, 25670 <_nrf_modem_lib_init+0x78>
   25642:	4620      	mov	r0, r4
   25644:	6824      	ldr	r4, [r4, #0]
   25646:	e7f8      	b.n	2563a <_nrf_modem_lib_init+0x42>
		e->callback(init_ret, e->context);
   25648:	e9d4 3100 	ldrd	r3, r1, [r4]
   2564c:	6838      	ldr	r0, [r7, #0]
   2564e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   25650:	3408      	adds	r4, #8
   25652:	42b4      	cmp	r4, r6
   25654:	d908      	bls.n	25668 <_nrf_modem_lib_init+0x70>
   25656:	4629      	mov	r1, r5
   25658:	480e      	ldr	r0, [pc, #56]	; (25694 <_nrf_modem_lib_init+0x9c>)
   2565a:	229b      	movs	r2, #155	; 0x9b
   2565c:	f017 fa16 	bl	3ca8c <assert_print>
   25660:	219b      	movs	r1, #155	; 0x9b
   25662:	4628      	mov	r0, r5
   25664:	f017 fa0b 	bl	3ca7e <assert_post_action>
   25668:	42b4      	cmp	r4, r6
   2566a:	d3ed      	bcc.n	25648 <_nrf_modem_lib_init+0x50>
}
   2566c:	2000      	movs	r0, #0
   2566e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_mutex_unlock(mutex);
   25670:	4805      	ldr	r0, [pc, #20]	; (25688 <_nrf_modem_lib_init+0x90>)
   25672:	f011 fa01 	bl	36a78 <z_impl_k_mutex_unlock>
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   25676:	4c08      	ldr	r4, [pc, #32]	; (25698 <_nrf_modem_lib_init+0xa0>)
   25678:	4e08      	ldr	r6, [pc, #32]	; (2569c <_nrf_modem_lib_init+0xa4>)
   2567a:	4d09      	ldr	r5, [pc, #36]	; (256a0 <_nrf_modem_lib_init+0xa8>)
   2567c:	e7e9      	b.n	25652 <_nrf_modem_lib_init+0x5a>
   2567e:	bf00      	nop
   25680:	2001a5d4 	.word	0x2001a5d4
   25684:	20019298 	.word	0x20019298
   25688:	200192a0 	.word	0x200192a0
   2568c:	00042c58 	.word	0x00042c58
   25690:	20019294 	.word	0x20019294
   25694:	0004409e 	.word	0x0004409e
   25698:	0004c048 	.word	0x0004c048
   2569c:	0004c060 	.word	0x0004c060
   256a0:	00044fa7 	.word	0x00044fa7

000256a4 <nrf_modem_lib_get_init_ret>:
}
   256a4:	4b01      	ldr	r3, [pc, #4]	; (256ac <nrf_modem_lib_get_init_ret+0x8>)
   256a6:	6818      	ldr	r0, [r3, #0]
   256a8:	4770      	bx	lr
   256aa:	bf00      	nop
   256ac:	20019294 	.word	0x20019294

000256b0 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   256b0:	4b10      	ldr	r3, [pc, #64]	; (256f4 <thread_monitor_entry_get+0x44>)
{
   256b2:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   256b4:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   256b6:	4b10      	ldr	r3, [pc, #64]	; (256f8 <thread_monitor_entry_get+0x48>)
{
   256b8:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   256ba:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   256bc:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   256be:	4618      	mov	r0, r3
   256c0:	461f      	mov	r7, r3
		if (entry->id == id) {
   256c2:	6804      	ldr	r4, [r0, #0]
   256c4:	428c      	cmp	r4, r1
   256c6:	d011      	beq.n	256ec <thread_monitor_entry_get+0x3c>
		} else if (entry->id == 0) {
   256c8:	b18c      	cbz	r4, 256ee <thread_monitor_entry_get+0x3e>
		entry_age = rpc_event_cnt - entry->cnt;
   256ca:	6844      	ldr	r4, [r0, #4]
   256cc:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   256ce:	42b4      	cmp	r4, r6
   256d0:	bfc8      	it	gt
   256d2:	4603      	movgt	r3, r0
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   256d4:	f100 0008 	add.w	r0, r0, #8
		if (entry_age > oldest_entry_age) {
   256d8:	bfc8      	it	gt
   256da:	4626      	movgt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   256dc:	42b8      	cmp	r0, r7
   256de:	d301      	bcc.n	256e4 <thread_monitor_entry_get+0x34>
   256e0:	3d01      	subs	r5, #1
   256e2:	d1ee      	bne.n	256c2 <thread_monitor_entry_get+0x12>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   256e4:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   256e6:	3a01      	subs	r2, #1
	new_entry->id = id;
   256e8:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   256ea:	605a      	str	r2, [r3, #4]
}
   256ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   256ee:	4603      	mov	r3, r0
   256f0:	e7f8      	b.n	256e4 <thread_monitor_entry_get+0x34>
   256f2:	bf00      	nop
   256f4:	20019318 	.word	0x20019318
   256f8:	20019340 	.word	0x20019340

000256fc <on_init>:
	list->head = NULL;
   256fc:	2000      	movs	r0, #0
   256fe:	4b05      	ldr	r3, [pc, #20]	; (25714 <on_init+0x18>)
	list->tail = NULL;
   25700:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25704:	4b04      	ldr	r3, [pc, #16]	; (25718 <on_init+0x1c>)
   25706:	e8d3 2fef 	ldaex	r2, [r3]
   2570a:	e8c3 0fe1 	stlex	r1, r0, [r3]
   2570e:	2900      	cmp	r1, #0
   25710:	d1f9      	bne.n	25706 <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   25712:	4770      	bx	lr
   25714:	20019338 	.word	0x20019338
   25718:	20019318 	.word	0x20019318

0002571c <nrf_modem_os_timedwait>:
{
   2571c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25720:	b088      	sub	sp, #32
   25722:	460c      	mov	r4, r1
	if (!nrf_modem_is_initialized()) {
   25724:	f01b fbfc 	bl	40f20 <nrf_modem_is_initialized>
   25728:	4681      	mov	r9, r0
   2572a:	b920      	cbnz	r0, 25736 <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   2572c:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   25730:	b008      	add	sp, #32
   25732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   25736:	f01b fced 	bl	41114 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   2573a:	6823      	ldr	r3, [r4, #0]
   2573c:	4605      	mov	r5, r0
   2573e:	2b00      	cmp	r3, #0
   25740:	460f      	mov	r7, r1
   25742:	d104      	bne.n	2574e <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   25744:	f012 fe56 	bl	383f4 <z_impl_k_yield>
		return -NRF_EAGAIN;
   25748:	f06f 000a 	mvn.w	r0, #10
   2574c:	e7f0      	b.n	25730 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   2574e:	bfbc      	itt	lt
   25750:	f04f 33ff 	movlt.w	r3, #4294967295
   25754:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   25756:	2201      	movs	r2, #1
   25758:	2100      	movs	r1, #0
   2575a:	a802      	add	r0, sp, #8
   2575c:	f01b fc3e 	bl	40fdc <z_impl_k_sem_init>
   25760:	ae01      	add	r6, sp, #4
	__asm__ volatile(
   25762:	f04f 0320 	mov.w	r3, #32
   25766:	f3ef 8a11 	mrs	sl, BASEPRI
   2576a:	f383 8812 	msr	BASEPRI_MAX, r3
   2576e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   25772:	f012 ff7d 	bl	38670 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   25776:	f7ff ff9b 	bl	256b0 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   2577a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 2589c <nrf_modem_os_timedwait+0x180>
   2577e:	6843      	ldr	r3, [r0, #4]
   25780:	f8d8 2000 	ldr.w	r2, [r8]
   25784:	4293      	cmp	r3, r2
   25786:	f04f 0300 	mov.w	r3, #0
   2578a:	d107      	bne.n	2579c <nrf_modem_os_timedwait+0x80>
	parent->next = child;
   2578c:	9301      	str	r3, [sp, #4]
	return list->tail;
   2578e:	4b42      	ldr	r3, [pc, #264]	; (25898 <nrf_modem_os_timedwait+0x17c>)
   25790:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   25792:	2a00      	cmp	r2, #0
   25794:	d170      	bne.n	25878 <nrf_modem_os_timedwait+0x15c>
	list->head = node;
   25796:	e9c3 6600 	strd	r6, r6, [r3]
}
   2579a:	e001      	b.n	257a0 <nrf_modem_os_timedwait+0x84>
	bool allow_to_sleep = false;
   2579c:	4699      	mov	r9, r3
	entry->cnt = rpc_event_cnt;
   2579e:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   257a0:	f38a 8811 	msr	BASEPRI, sl
   257a4:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   257a8:	f1b9 0f00 	cmp.w	r9, #0
   257ac:	d062      	beq.n	25874 <nrf_modem_os_timedwait+0x158>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   257ae:	6823      	ldr	r3, [r4, #0]
   257b0:	1c5a      	adds	r2, r3, #1
   257b2:	d064      	beq.n	2587e <nrf_modem_os_timedwait+0x162>
			return ((t * to_hz + off) / from_hz);
   257b4:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   257b8:	f240 30e7 	movw	r0, #999	; 0x3e7
   257bc:	2100      	movs	r1, #0
   257be:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   257c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   257c6:	2300      	movs	r3, #0
   257c8:	fbcc 010e 	smlal	r0, r1, ip, lr
   257cc:	f7f7 fb8c 	bl	1cee8 <__aeabi_uldivmod>
   257d0:	4602      	mov	r2, r0
   257d2:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   257d4:	a802      	add	r0, sp, #8
   257d6:	f011 fb0b 	bl	36df0 <z_impl_k_sem_take>
	__asm__ volatile(
   257da:	f04f 0320 	mov.w	r3, #32
   257de:	f3ef 8911 	mrs	r9, BASEPRI
   257e2:	f383 8812 	msr	BASEPRI_MAX, r3
   257e6:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   257ea:	2100      	movs	r1, #0
	return list->head;
   257ec:	4a2a      	ldr	r2, [pc, #168]	; (25898 <nrf_modem_os_timedwait+0x17c>)
   257ee:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   257f0:	b15b      	cbz	r3, 2580a <nrf_modem_os_timedwait+0xee>
   257f2:	42b3      	cmp	r3, r6
   257f4:	d14c      	bne.n	25890 <nrf_modem_os_timedwait+0x174>
	return node->next;
   257f6:	9801      	ldr	r0, [sp, #4]
	return list->tail;
   257f8:	6856      	ldr	r6, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
   257fa:	2900      	cmp	r1, #0
   257fc:	d143      	bne.n	25886 <nrf_modem_os_timedwait+0x16a>
   257fe:	429e      	cmp	r6, r3
	list->head = node;
   25800:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25802:	d100      	bne.n	25806 <nrf_modem_os_timedwait+0xea>
	list->tail = node;
   25804:	6050      	str	r0, [r2, #4]
	parent->next = child;
   25806:	2300      	movs	r3, #0
   25808:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   2580a:	f012 ff31 	bl	38670 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   2580e:	f7ff ff4f 	bl	256b0 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   25812:	f8d8 3000 	ldr.w	r3, [r8]
   25816:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   25818:	f389 8811 	msr	BASEPRI, r9
   2581c:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   25820:	f01b fb7e 	bl	40f20 <nrf_modem_is_initialized>
   25824:	2800      	cmp	r0, #0
   25826:	d081      	beq.n	2572c <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   25828:	6826      	ldr	r6, [r4, #0]
   2582a:	1c73      	adds	r3, r6, #1
   2582c:	d022      	beq.n	25874 <nrf_modem_os_timedwait+0x158>
	return z_impl_k_uptime_ticks();
   2582e:	f01b fc71 	bl	41114 <z_impl_k_uptime_ticks>
   25832:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   25836:	fba0 300e 	umull	r3, r0, r0, lr
   2583a:	fba5 250e 	umull	r2, r5, r5, lr
   2583e:	fb0e 0101 	mla	r1, lr, r1, r0
   25842:	fb0e 5707 	mla	r7, lr, r7, r5
   25846:	0bdb      	lsrs	r3, r3, #15
   25848:	0bd2      	lsrs	r2, r2, #15
   2584a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   2584e:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
	delta = uptime - *reftime;
   25852:	1a9b      	subs	r3, r3, r2
   25854:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   25858:	eb61 31d7 	sbc.w	r1, r1, r7, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   2585c:	ea4f 7ce6 	mov.w	ip, r6, asr #31
   25860:	1af3      	subs	r3, r6, r3
   25862:	eb6c 0101 	sbc.w	r1, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   25866:	2900      	cmp	r1, #0
   25868:	bfb8      	it	lt
   2586a:	2300      	movlt	r3, #0
   2586c:	6023      	str	r3, [r4, #0]
	if (*timeout == 0) {
   2586e:	2b00      	cmp	r3, #0
   25870:	f43f af6a 	beq.w	25748 <nrf_modem_os_timedwait+0x2c>
	return 0;
   25874:	2000      	movs	r0, #0
   25876:	e75b      	b.n	25730 <nrf_modem_os_timedwait+0x14>
   25878:	6016      	str	r6, [r2, #0]
	list->tail = node;
   2587a:	605e      	str	r6, [r3, #4]
}
   2587c:	e790      	b.n	257a0 <nrf_modem_os_timedwait+0x84>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   2587e:	f04f 32ff 	mov.w	r2, #4294967295
   25882:	4613      	mov	r3, r2
   25884:	e7a6      	b.n	257d4 <nrf_modem_os_timedwait+0xb8>
Z_GENLIST_REMOVE(slist, snode)
   25886:	429e      	cmp	r6, r3
	parent->next = child;
   25888:	6008      	str	r0, [r1, #0]
	list->tail = node;
   2588a:	bf08      	it	eq
   2588c:	6051      	streq	r1, [r2, #4]
}
   2588e:	e7ba      	b.n	25806 <nrf_modem_os_timedwait+0xea>
	return node->next;
   25890:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25892:	681b      	ldr	r3, [r3, #0]
   25894:	e7ac      	b.n	257f0 <nrf_modem_os_timedwait+0xd4>
   25896:	bf00      	nop
   25898:	20019338 	.word	0x20019338
   2589c:	20019318 	.word	0x20019318

000258a0 <nrf_modem_os_errno_set>:
{
   258a0:	b510      	push	{r4, lr}
	__ASSERT(err_code > 0, "Tried to set negative error code, %d", err_code);
   258a2:	1e04      	subs	r4, r0, #0
   258a4:	dc08      	bgt.n	258b8 <nrf_modem_os_errno_set+0x18>
   258a6:	4906      	ldr	r1, [pc, #24]	; (258c0 <nrf_modem_os_errno_set+0x20>)
   258a8:	4806      	ldr	r0, [pc, #24]	; (258c4 <nrf_modem_os_errno_set+0x24>)
   258aa:	22f1      	movs	r2, #241	; 0xf1
   258ac:	f017 f8ee 	bl	3ca8c <assert_print>
   258b0:	21f1      	movs	r1, #241	; 0xf1
   258b2:	4803      	ldr	r0, [pc, #12]	; (258c0 <nrf_modem_os_errno_set+0x20>)
   258b4:	f017 f8e3 	bl	3ca7e <assert_post_action>
	errno = err_code;
   258b8:	f017 ff61 	bl	3d77e <__errno>
   258bc:	6004      	str	r4, [r0, #0]
}
   258be:	bd10      	pop	{r4, pc}
   258c0:	00044fd9 	.word	0x00044fd9
   258c4:	0004409e 	.word	0x0004409e

000258c8 <nrf_modem_os_sem_init>:
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   258c8:	6803      	ldr	r3, [r0, #0]
{
   258ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   258ce:	4604      	mov	r4, r0
   258d0:	460e      	mov	r6, r1
   258d2:	4617      	mov	r7, r2
   258d4:	4d14      	ldr	r5, [pc, #80]	; (25928 <nrf_modem_os_sem_init+0x60>)
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   258d6:	b12b      	cbz	r3, 258e4 <nrf_modem_os_sem_init+0x1c>
   258d8:	42ab      	cmp	r3, r5
   258da:	d303      	bcc.n	258e4 <nrf_modem_os_sem_init+0x1c>
   258dc:	f105 0260 	add.w	r2, r5, #96	; 0x60
   258e0:	4293      	cmp	r3, r2
   258e2:	d31a      	bcc.n	2591a <nrf_modem_os_sem_init+0x52>
	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
   258e4:	f8df 804c 	ldr.w	r8, [pc, #76]	; 25934 <nrf_modem_os_sem_init+0x6c>
   258e8:	f898 3000 	ldrb.w	r3, [r8]
   258ec:	2b03      	cmp	r3, #3
   258ee:	d90a      	bls.n	25906 <nrf_modem_os_sem_init+0x3e>
   258f0:	490e      	ldr	r1, [pc, #56]	; (2592c <nrf_modem_os_sem_init+0x64>)
   258f2:	480f      	ldr	r0, [pc, #60]	; (25930 <nrf_modem_os_sem_init+0x68>)
   258f4:	f240 1205 	movw	r2, #261	; 0x105
   258f8:	f017 f8c8 	bl	3ca8c <assert_print>
   258fc:	f240 1105 	movw	r1, #261	; 0x105
   25900:	480a      	ldr	r0, [pc, #40]	; (2592c <nrf_modem_os_sem_init+0x64>)
   25902:	f017 f8bc 	bl	3ca7e <assert_post_action>
	*sem = &nrf_modem_os_sems[used++];
   25906:	f898 3000 	ldrb.w	r3, [r8]
   2590a:	1c5a      	adds	r2, r3, #1
   2590c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25910:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   25914:	f888 2000 	strb.w	r2, [r8]
   25918:	6025      	str	r5, [r4, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   2591a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2591c:	463a      	mov	r2, r7
   2591e:	4631      	mov	r1, r6
}
   25920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25924:	f01b bb5a 	b.w	40fdc <z_impl_k_sem_init>
   25928:	200192b8 	.word	0x200192b8
   2592c:	00044fd9 	.word	0x00044fd9
   25930:	0004409e 	.word	0x0004409e
   25934:	2001a5d5 	.word	0x2001a5d5

00025938 <nrf_modem_os_sem_give>:
{
   25938:	b510      	push	{r4, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   2593a:	4604      	mov	r4, r0
   2593c:	b128      	cbz	r0, 2594a <nrf_modem_os_sem_give+0x12>
   2593e:	4b0b      	ldr	r3, [pc, #44]	; (2596c <nrf_modem_os_sem_give+0x34>)
   25940:	4298      	cmp	r0, r3
   25942:	d302      	bcc.n	2594a <nrf_modem_os_sem_give+0x12>
   25944:	3360      	adds	r3, #96	; 0x60
   25946:	4298      	cmp	r0, r3
   25948:	d30a      	bcc.n	25960 <nrf_modem_os_sem_give+0x28>
   2594a:	4909      	ldr	r1, [pc, #36]	; (25970 <nrf_modem_os_sem_give+0x38>)
   2594c:	4809      	ldr	r0, [pc, #36]	; (25974 <nrf_modem_os_sem_give+0x3c>)
   2594e:	f44f 7288 	mov.w	r2, #272	; 0x110
   25952:	f017 f89b 	bl	3ca8c <assert_print>
   25956:	f44f 7188 	mov.w	r1, #272	; 0x110
   2595a:	4805      	ldr	r0, [pc, #20]	; (25970 <nrf_modem_os_sem_give+0x38>)
   2595c:	f017 f88f 	bl	3ca7e <assert_post_action>
	z_impl_k_sem_give(sem);
   25960:	4620      	mov	r0, r4
}
   25962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25966:	f011 ba07 	b.w	36d78 <z_impl_k_sem_give>
   2596a:	bf00      	nop
   2596c:	200192b8 	.word	0x200192b8
   25970:	00044fd9 	.word	0x00044fd9
   25974:	0004409e 	.word	0x0004409e

00025978 <nrf_modem_os_sem_take>:
{
   25978:	b570      	push	{r4, r5, r6, lr}
   2597a:	460c      	mov	r4, r1
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   2597c:	4605      	mov	r5, r0
   2597e:	b128      	cbz	r0, 2598c <nrf_modem_os_sem_take+0x14>
   25980:	4b17      	ldr	r3, [pc, #92]	; (259e0 <nrf_modem_os_sem_take+0x68>)
   25982:	4298      	cmp	r0, r3
   25984:	d302      	bcc.n	2598c <nrf_modem_os_sem_take+0x14>
   25986:	3360      	adds	r3, #96	; 0x60
   25988:	4298      	cmp	r0, r3
   2598a:	d30a      	bcc.n	259a2 <nrf_modem_os_sem_take+0x2a>
   2598c:	4915      	ldr	r1, [pc, #84]	; (259e4 <nrf_modem_os_sem_take+0x6c>)
   2598e:	4816      	ldr	r0, [pc, #88]	; (259e8 <nrf_modem_os_sem_take+0x70>)
   25990:	f44f 728d 	mov.w	r2, #282	; 0x11a
   25994:	f017 f87a 	bl	3ca8c <assert_print>
   25998:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2599c:	4811      	ldr	r0, [pc, #68]	; (259e4 <nrf_modem_os_sem_take+0x6c>)
   2599e:	f017 f86e 	bl	3ca7e <assert_post_action>
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   259a2:	1c63      	adds	r3, r4, #1
   259a4:	d017      	beq.n	259d6 <nrf_modem_os_sem_take+0x5e>
   259a6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   259aa:	f240 30e7 	movw	r0, #999	; 0x3e7
   259ae:	2100      	movs	r1, #0
   259b0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   259b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   259b8:	2300      	movs	r3, #0
   259ba:	fbc4 0106 	smlal	r0, r1, r4, r6
   259be:	f7f7 fa93 	bl	1cee8 <__aeabi_uldivmod>
   259c2:	4602      	mov	r2, r0
   259c4:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   259c6:	4628      	mov	r0, r5
   259c8:	f011 fa12 	bl	36df0 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   259cc:	2800      	cmp	r0, #0
}
   259ce:	bf18      	it	ne
   259d0:	f06f 000a 	mvnne.w	r0, #10
   259d4:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   259d6:	f04f 32ff 	mov.w	r2, #4294967295
   259da:	4613      	mov	r3, r2
   259dc:	e7f3      	b.n	259c6 <nrf_modem_os_sem_take+0x4e>
   259de:	bf00      	nop
   259e0:	200192b8 	.word	0x200192b8
   259e4:	00044fd9 	.word	0x00044fd9
   259e8:	0004409e 	.word	0x0004409e

000259ec <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   259ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   259f0:	4b01      	ldr	r3, [pc, #4]	; (259f8 <nrf_modem_os_application_irq_set+0xc>)
   259f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   259f6:	4770      	bx	lr
   259f8:	e000e100 	.word	0xe000e100

000259fc <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   259fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   25a00:	4b01      	ldr	r3, [pc, #4]	; (25a08 <nrf_modem_os_application_irq_clear+0xc>)
   25a02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   25a06:	4770      	bx	lr
   25a08:	e000e100 	.word	0xe000e100

00025a0c <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25a0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   25a10:	4b01      	ldr	r3, [pc, #4]	; (25a18 <nrf_modem_os_trace_irq_set+0xc>)
   25a12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   25a16:	4770      	bx	lr
   25a18:	e000e100 	.word	0xe000e100

00025a1c <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25a1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   25a20:	4b01      	ldr	r3, [pc, #4]	; (25a28 <nrf_modem_os_trace_irq_clear+0xc>)
   25a22:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   25a26:	4770      	bx	lr
   25a28:	e000e100 	.word	0xe000e100

00025a2c <nrf_modem_os_event_notify>:
{
   25a2c:	b510      	push	{r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   25a2e:	4b08      	ldr	r3, [pc, #32]	; (25a50 <nrf_modem_os_event_notify+0x24>)
   25a30:	e8d3 2fef 	ldaex	r2, [r3]
   25a34:	3201      	adds	r2, #1
   25a36:	e8c3 2fe1 	stlex	r1, r2, [r3]
   25a3a:	2900      	cmp	r1, #0
   25a3c:	d1f8      	bne.n	25a30 <nrf_modem_os_event_notify+0x4>
	return list->head;
   25a3e:	4b05      	ldr	r3, [pc, #20]	; (25a54 <nrf_modem_os_event_notify+0x28>)
   25a40:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   25a42:	b124      	cbz	r4, 25a4e <nrf_modem_os_event_notify+0x22>
	z_impl_k_sem_give(sem);
   25a44:	1d20      	adds	r0, r4, #4
   25a46:	f011 f997 	bl	36d78 <z_impl_k_sem_give>
	return node->next;
   25a4a:	6824      	ldr	r4, [r4, #0]
   25a4c:	e7f9      	b.n	25a42 <nrf_modem_os_event_notify+0x16>
}
   25a4e:	bd10      	pop	{r4, pc}
   25a50:	20019318 	.word	0x20019318
   25a54:	20019338 	.word	0x20019338

00025a58 <nrf_modem_os_alloc>:
{
   25a58:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   25a5a:	2200      	movs	r2, #0
   25a5c:	2300      	movs	r3, #0
   25a5e:	4801      	ldr	r0, [pc, #4]	; (25a64 <nrf_modem_os_alloc+0xc>)
   25a60:	f01b ba78 	b.w	40f54 <k_heap_alloc>
   25a64:	20014e98 	.word	0x20014e98

00025a68 <nrf_modem_os_free>:
{
   25a68:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   25a6a:	4801      	ldr	r0, [pc, #4]	; (25a70 <nrf_modem_os_free+0x8>)
   25a6c:	f010 bc2a 	b.w	362c4 <k_heap_free>
   25a70:	20014e98 	.word	0x20014e98

00025a74 <nrf_modem_os_trace_alloc>:
{
   25a74:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&trace_heap, bytes, K_NO_WAIT);
   25a76:	2200      	movs	r2, #0
   25a78:	2300      	movs	r3, #0
   25a7a:	4801      	ldr	r0, [pc, #4]	; (25a80 <nrf_modem_os_trace_alloc+0xc>)
   25a7c:	f01b ba6a 	b.w	40f54 <k_heap_alloc>
   25a80:	20014eb0 	.word	0x20014eb0

00025a84 <nrf_modem_os_trace_free>:
{
   25a84:	4601      	mov	r1, r0
	k_heap_free(&trace_heap, mem);
   25a86:	4801      	ldr	r0, [pc, #4]	; (25a8c <nrf_modem_os_trace_free+0x8>)
   25a88:	f010 bc1c 	b.w	362c4 <k_heap_free>
   25a8c:	20014eb0 	.word	0x20014eb0

00025a90 <nrf_modem_os_shm_tx_alloc>:
{
   25a90:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   25a92:	2200      	movs	r2, #0
   25a94:	2300      	movs	r3, #0
   25a96:	4801      	ldr	r0, [pc, #4]	; (25a9c <nrf_modem_os_shm_tx_alloc+0xc>)
   25a98:	f01b ba5c 	b.w	40f54 <k_heap_alloc>
   25a9c:	20019320 	.word	0x20019320

00025aa0 <nrf_modem_os_shm_tx_free>:
{
   25aa0:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   25aa2:	4801      	ldr	r0, [pc, #4]	; (25aa8 <nrf_modem_os_shm_tx_free+0x8>)
   25aa4:	f010 bc0e 	b.w	362c4 <k_heap_free>
   25aa8:	20019320 	.word	0x20019320

00025aac <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   25aac:	b508      	push	{r3, lr}
	read_task_create();
   25aae:	f019 f945 	bl	3ed3c <read_task_create>
		LOG_ERR("nrf_modem_lib_trace_init failed with error %d.", err);
	}

#endif

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   25ab2:	2300      	movs	r3, #0
   25ab4:	4a05      	ldr	r2, [pc, #20]	; (25acc <nrf_modem_os_init+0x20>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   25ab6:	4906      	ldr	r1, [pc, #24]	; (25ad0 <nrf_modem_os_init+0x24>)
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   25ab8:	6013      	str	r3, [r2, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   25aba:	4a06      	ldr	r2, [pc, #24]	; (25ad4 <nrf_modem_os_init+0x28>)
	k_heap_init(&shmem_heap,
   25abc:	4806      	ldr	r0, [pc, #24]	; (25ad8 <nrf_modem_os_init+0x2c>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   25abe:	6013      	str	r3, [r2, #0]
#ifdef CONFIG_NRF_MODEM_LIB_TRACE_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&trace_heap_task.work, diag_task);
	k_work_reschedule(&trace_heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_TRACE_HEAP_DUMP_PERIOD_MS));
#endif
}
   25ac0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&shmem_heap,
   25ac4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   25ac8:	f01b ba3b 	b.w	40f42 <k_heap_init>
   25acc:	200192b4 	.word	0x200192b4
   25ad0:	200104e8 	.word	0x200104e8
   25ad4:	2001931c 	.word	0x2001931c
   25ad8:	20019320 	.word	0x20019320

00025adc <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   25adc:	2801      	cmp	r0, #1
   25ade:	d021      	beq.n	25b24 <z_to_nrf_optname+0x48>
   25ae0:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   25ae4:	d126      	bne.n	25b34 <z_to_nrf_optname+0x58>
	case SOL_TLS:
		switch (z_in_optname) {
   25ae6:	3901      	subs	r1, #1
   25ae8:	290b      	cmp	r1, #11
   25aea:	d823      	bhi.n	25b34 <z_to_nrf_optname+0x58>
   25aec:	e8df f001 	tbb	[pc, r1]
   25af0:	0e0c0a06 	.word	0x0e0c0a06
   25af4:	22221210 	.word	0x22221210
   25af8:	18161422 	.word	0x18161422
		case TLS_SEC_TAG_LIST:
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   25afc:	2302      	movs	r3, #2
			break;
		case TLS_HOSTNAME:
			*nrf_out_optname = NRF_SO_SEC_HOSTNAME;
   25afe:	6013      	str	r3, [r2, #0]
	int retval = 0;
   25b00:	2000      	movs	r0, #0
			break;
   25b02:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_HOSTNAME;
   25b04:	2305      	movs	r3, #5
   25b06:	e7fa      	b.n	25afe <z_to_nrf_optname+0x22>
		case TLS_CIPHERSUITE_LIST:
			*nrf_out_optname = NRF_SO_SEC_CIPHERSUITE_LIST;
   25b08:	2306      	movs	r3, #6
   25b0a:	e7f8      	b.n	25afe <z_to_nrf_optname+0x22>
			break;
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_SEC_CIPHER_IN_USE;
   25b0c:	2307      	movs	r3, #7
   25b0e:	e7f6      	b.n	25afe <z_to_nrf_optname+0x22>
			break;
		case TLS_PEER_VERIFY:
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   25b10:	2304      	movs	r3, #4
   25b12:	e7f4      	b.n	25afe <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_ROLE:
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   25b14:	2301      	movs	r3, #1
   25b16:	e7f2      	b.n	25afe <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   25b18:	2303      	movs	r3, #3
   25b1a:	e7f0      	b.n	25afe <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE_PURGE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   25b1c:	2309      	movs	r3, #9
   25b1e:	e7ee      	b.n	25afe <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_HANDSHAKE_TIMEO:
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   25b20:	2308      	movs	r3, #8
   25b22:	e7ec      	b.n	25afe <z_to_nrf_optname+0x22>
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   25b24:	2937      	cmp	r1, #55	; 0x37
   25b26:	dc05      	bgt.n	25b34 <z_to_nrf_optname+0x58>
   25b28:	2913      	cmp	r1, #19
   25b2a:	dc06      	bgt.n	25b3a <z_to_nrf_optname+0x5e>
   25b2c:	2902      	cmp	r1, #2
   25b2e:	d059      	beq.n	25be4 <z_to_nrf_optname+0x108>
   25b30:	2904      	cmp	r1, #4
   25b32:	d0ed      	beq.n	25b10 <z_to_nrf_optname+0x34>
   25b34:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   25b38:	4770      	bx	lr
   25b3a:	3914      	subs	r1, #20
   25b3c:	2923      	cmp	r1, #35	; 0x23
   25b3e:	d8f9      	bhi.n	25b34 <z_to_nrf_optname+0x58>
   25b40:	a301      	add	r3, pc, #4	; (adr r3, 25b48 <z_to_nrf_optname+0x6c>)
   25b42:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   25b46:	bf00      	nop
   25b48:	00025bd9 	.word	0x00025bd9
   25b4c:	00025bdd 	.word	0x00025bdd
   25b50:	00025b35 	.word	0x00025b35
   25b54:	00025b35 	.word	0x00025b35
   25b58:	00025b35 	.word	0x00025b35
   25b5c:	00025be1 	.word	0x00025be1
   25b60:	00025b35 	.word	0x00025b35
   25b64:	00025b35 	.word	0x00025b35
   25b68:	00025b35 	.word	0x00025b35
   25b6c:	00025b35 	.word	0x00025b35
   25b70:	00025be9 	.word	0x00025be9
   25b74:	00025bed 	.word	0x00025bed
   25b78:	00025bf1 	.word	0x00025bf1
   25b7c:	00025b35 	.word	0x00025b35
   25b80:	00025b35 	.word	0x00025b35
   25b84:	00025b35 	.word	0x00025b35
   25b88:	00025b35 	.word	0x00025b35
   25b8c:	00025b35 	.word	0x00025b35
   25b90:	00025b35 	.word	0x00025b35
   25b94:	00025b35 	.word	0x00025b35
   25b98:	00025b35 	.word	0x00025b35
   25b9c:	00025b35 	.word	0x00025b35
   25ba0:	00025b35 	.word	0x00025b35
   25ba4:	00025b35 	.word	0x00025b35
   25ba8:	00025b35 	.word	0x00025b35
   25bac:	00025b35 	.word	0x00025b35
   25bb0:	00025b35 	.word	0x00025b35
   25bb4:	00025b35 	.word	0x00025b35
   25bb8:	00025b35 	.word	0x00025b35
   25bbc:	00025b35 	.word	0x00025b35
   25bc0:	00025bf9 	.word	0x00025bf9
   25bc4:	00025bfd 	.word	0x00025bfd
   25bc8:	00025c01 	.word	0x00025c01
   25bcc:	00025c05 	.word	0x00025c05
   25bd0:	00025c09 	.word	0x00025c09
   25bd4:	00025bf5 	.word	0x00025bf5
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   25bd8:	2314      	movs	r3, #20
   25bda:	e790      	b.n	25afe <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   25bdc:	2315      	movs	r3, #21
   25bde:	e78e      	b.n	25afe <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   25be0:	2319      	movs	r3, #25
   25be2:	e78c      	b.n	25afe <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   25be4:	6011      	str	r1, [r2, #0]
			break;
   25be6:	e78b      	b.n	25b00 <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   25be8:	231e      	movs	r3, #30
   25bea:	e788      	b.n	25afe <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   25bec:	231f      	movs	r3, #31
   25bee:	e786      	b.n	25afe <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   25bf0:	2320      	movs	r3, #32
   25bf2:	e784      	b.n	25afe <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   25bf4:	2337      	movs	r3, #55	; 0x37
   25bf6:	e782      	b.n	25afe <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_LAST;
   25bf8:	2333      	movs	r3, #51	; 0x33
   25bfa:	e780      	b.n	25afe <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   25bfc:	2332      	movs	r3, #50	; 0x32
   25bfe:	e77e      	b.n	25afe <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   25c00:	2334      	movs	r3, #52	; 0x34
   25c02:	e77c      	b.n	25afe <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   25c04:	2335      	movs	r3, #53	; 0x35
   25c06:	e77a      	b.n	25afe <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   25c08:	2336      	movs	r3, #54	; 0x36
   25c0a:	e778      	b.n	25afe <z_to_nrf_optname+0x22>

00025c0c <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   25c0c:	f04f 32ff 	mov.w	r2, #4294967295
   25c10:	4b05      	ldr	r3, [pc, #20]	; (25c28 <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   25c12:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   25c14:	601a      	str	r2, [r3, #0]
   25c16:	609a      	str	r2, [r3, #8]
   25c18:	611a      	str	r2, [r3, #16]
   25c1a:	619a      	str	r2, [r3, #24]
   25c1c:	621a      	str	r2, [r3, #32]
   25c1e:	629a      	str	r2, [r3, #40]	; 0x28
   25c20:	631a      	str	r2, [r3, #48]	; 0x30
   25c22:	639a      	str	r2, [r3, #56]	; 0x38
}
   25c24:	4770      	bx	lr
   25c26:	bf00      	nop
   25c28:	20019394 	.word	0x20019394

00025c2c <nrf91_socket_offload_ioctl>:
{
   25c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   25c30:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
{
   25c34:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   25c36:	2b03      	cmp	r3, #3
   25c38:	d878      	bhi.n	25d2c <nrf91_socket_offload_ioctl+0x100>
   25c3a:	e8df f003 	tbb	[pc, r3]
   25c3e:	0294      	.short	0x0294
   25c40:	7308      	.short	0x7308
   25c42:	f06f 045e 	mvn.w	r4, #94	; 0x5e
}
   25c46:	4620      	mov	r0, r4
   25c48:	b011      	add	sp, #68	; 0x44
   25c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   25c4e:	f04f 0a00 	mov.w	sl, #0
		nfds = va_arg(args, int);
   25c52:	e9d2 9800 	ldrd	r9, r8, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   25c56:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   25c58:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   25c5c:	4668      	mov	r0, sp
   25c5e:	2240      	movs	r2, #64	; 0x40
   25c60:	f01b fbe8 	bl	41434 <memset>
	for (int i = 0; i < nfds; i++) {
   25c64:	466e      	mov	r6, sp
   25c66:	464d      	mov	r5, r9
   25c68:	464f      	mov	r7, r9
	int retval = 0;
   25c6a:	4654      	mov	r4, sl
		tmp[i].events = 0;
   25c6c:	4653      	mov	r3, sl
			obj = z_get_fd_obj(fds[i].fd,
   25c6e:	493f      	ldr	r1, [pc, #252]	; (25d6c <nrf91_socket_offload_ioctl+0x140>)
	for (int i = 0; i < nfds; i++) {
   25c70:	45d0      	cmp	r8, sl
   25c72:	dc0a      	bgt.n	25c8a <nrf91_socket_offload_ioctl+0x5e>
	if (retval > 0) {
   25c74:	2c00      	cmp	r4, #0
   25c76:	d1e6      	bne.n	25c46 <nrf91_socket_offload_ioctl+0x1a>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   25c78:	465a      	mov	r2, fp
   25c7a:	4641      	mov	r1, r8
   25c7c:	4668      	mov	r0, sp
   25c7e:	f01a fff5 	bl	40c6c <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   25c82:	45a0      	cmp	r8, r4
   25c84:	dc26      	bgt.n	25cd4 <nrf91_socket_offload_ioctl+0xa8>
	return retval;
   25c86:	4604      	mov	r4, r0
		return nrf91_socket_offload_poll(fds, nfds, timeout);
   25c88:	e7dd      	b.n	25c46 <nrf91_socket_offload_ioctl+0x1a>
		if (fds[i].fd < 0) {
   25c8a:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   25c8c:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   25c8e:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   25c90:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   25c92:	da05      	bge.n	25ca0 <nrf91_socket_offload_ioctl+0x74>
			tmp[i].fd = fds[i].fd;
   25c94:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   25c96:	f10a 0a01 	add.w	sl, sl, #1
   25c9a:	3608      	adds	r6, #8
   25c9c:	3708      	adds	r7, #8
   25c9e:	e7e7      	b.n	25c70 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   25ca0:	2286      	movs	r2, #134	; 0x86
   25ca2:	f7fa feb9 	bl	20a18 <z_get_fd_obj>
			if (obj != NULL) {
   25ca6:	2300      	movs	r3, #0
   25ca8:	4930      	ldr	r1, [pc, #192]	; (25d6c <nrf91_socket_offload_ioctl+0x140>)
   25caa:	b178      	cbz	r0, 25ccc <nrf91_socket_offload_ioctl+0xa0>
				tmp[i].fd = OBJ_TO_SD(obj);
   25cac:	6802      	ldr	r2, [r0, #0]
   25cae:	6032      	str	r2, [r6, #0]
		if (fds[i].events & POLLIN) {
   25cb0:	88b8      	ldrh	r0, [r7, #4]
   25cb2:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   25cb4:	bf42      	ittt	mi
   25cb6:	88b2      	ldrhmi	r2, [r6, #4]
   25cb8:	f042 0201 	orrmi.w	r2, r2, #1
   25cbc:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   25cbe:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   25cc0:	bf42      	ittt	mi
   25cc2:	88b2      	ldrhmi	r2, [r6, #4]
   25cc4:	f042 0204 	orrmi.w	r2, r2, #4
   25cc8:	80b2      	strhmi	r2, [r6, #4]
   25cca:	e7e4      	b.n	25c96 <nrf91_socket_offload_ioctl+0x6a>
				fds[i].revents = POLLNVAL;
   25ccc:	2220      	movs	r2, #32
				retval++;
   25cce:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   25cd0:	80fa      	strh	r2, [r7, #6]
				retval++;
   25cd2:	e7ed      	b.n	25cb0 <nrf91_socket_offload_ioctl+0x84>
		if (fds[i].fd < 0) {
   25cd4:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
   25cd8:	2b00      	cmp	r3, #0
   25cda:	db20      	blt.n	25d1e <nrf91_socket_offload_ioctl+0xf2>
		if (tmp[i].revents & NRF_POLLIN) {
   25cdc:	eb0d 03c4 	add.w	r3, sp, r4, lsl #3
   25ce0:	88db      	ldrh	r3, [r3, #6]
   25ce2:	07df      	lsls	r7, r3, #31
			fds[i].revents |= POLLIN;
   25ce4:	bf42      	ittt	mi
   25ce6:	88ea      	ldrhmi	r2, [r5, #6]
   25ce8:	f042 0201 	orrmi.w	r2, r2, #1
   25cec:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   25cee:	075e      	lsls	r6, r3, #29
			fds[i].revents |= POLLOUT;
   25cf0:	bf42      	ittt	mi
   25cf2:	88ea      	ldrhmi	r2, [r5, #6]
   25cf4:	f042 0204 	orrmi.w	r2, r2, #4
   25cf8:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   25cfa:	0719      	lsls	r1, r3, #28
			fds[i].revents |= POLLERR;
   25cfc:	bf42      	ittt	mi
   25cfe:	88ea      	ldrhmi	r2, [r5, #6]
   25d00:	f042 0208 	orrmi.w	r2, r2, #8
   25d04:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   25d06:	069a      	lsls	r2, r3, #26
			fds[i].revents |= POLLNVAL;
   25d08:	bf42      	ittt	mi
   25d0a:	88ea      	ldrhmi	r2, [r5, #6]
   25d0c:	f042 0220 	orrmi.w	r2, r2, #32
   25d10:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   25d12:	06db      	lsls	r3, r3, #27
			fds[i].revents |= POLLHUP;
   25d14:	bf42      	ittt	mi
   25d16:	88eb      	ldrhmi	r3, [r5, #6]
   25d18:	f043 0310 	orrmi.w	r3, r3, #16
   25d1c:	80eb      	strhmi	r3, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   25d1e:	3401      	adds	r4, #1
   25d20:	3508      	adds	r5, #8
   25d22:	e7ae      	b.n	25c82 <nrf91_socket_offload_ioctl+0x56>
		ctx->lock = va_arg(args, struct k_mutex *);
   25d24:	6813      	ldr	r3, [r2, #0]
		return 0;
   25d26:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   25d28:	6043      	str	r3, [r0, #4]
		return 0;
   25d2a:	e78c      	b.n	25c46 <nrf91_socket_offload_ioctl+0x1a>
	switch (cmd) {
   25d2c:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   25d2e:	6800      	ldr	r0, [r0, #0]
	switch (cmd) {
   25d30:	d00b      	beq.n	25d4a <nrf91_socket_offload_ioctl+0x11e>
   25d32:	2904      	cmp	r1, #4
   25d34:	d110      	bne.n	25d58 <nrf91_socket_offload_ioctl+0x12c>
		flags = va_arg(args, int);
   25d36:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   25d38:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   25d3c:	d10c      	bne.n	25d58 <nrf91_socket_offload_ioctl+0x12c>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   25d3e:	1392      	asrs	r2, r2, #14
}
   25d40:	b011      	add	sp, #68	; 0x44
   25d42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   25d46:	f01b b826 	b.w	40d96 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   25d4a:	2200      	movs	r2, #0
   25d4c:	f01b f823 	bl	40d96 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   25d50:	0380      	lsls	r0, r0, #14
   25d52:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   25d56:	e776      	b.n	25c46 <nrf91_socket_offload_ioctl+0x1a>
	errno = EINVAL;
   25d58:	f017 fd11 	bl	3d77e <__errno>
   25d5c:	2316      	movs	r3, #22
	return retval;
   25d5e:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   25d62:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   25d64:	e76f      	b.n	25c46 <nrf91_socket_offload_ioctl+0x1a>
		return -EXDEV;
   25d66:	f06f 0411 	mvn.w	r4, #17
   25d6a:	e76c      	b.n	25c46 <nrf91_socket_offload_ioctl+0x1a>
   25d6c:	00042c88 	.word	0x00042c88

00025d70 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   25d70:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   25d72:	4b03      	ldr	r3, [pc, #12]	; (25d80 <nrf91_socket_iface_init+0x10>)
   25d74:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   25d76:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   25d78:	4802      	ldr	r0, [pc, #8]	; (25d84 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   25d7a:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   25d7c:	f7fb bef0 	b.w	21b60 <socket_offload_dns_register>
   25d80:	20019390 	.word	0x20019390
   25d84:	00042c80 	.word	0x00042c80

00025d88 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   25d88:	4b0c      	ldr	r3, [pc, #48]	; (25dbc <nrf91_socket_is_supported+0x34>)
   25d8a:	781b      	ldrb	r3, [r3, #0]
   25d8c:	b98b      	cbnz	r3, 25db2 <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   25d8e:	4b0c      	ldr	r3, [pc, #48]	; (25dc0 <nrf91_socket_is_supported+0x38>)
   25d90:	781b      	ldrb	r3, [r3, #0]
   25d92:	b183      	cbz	r3, 25db6 <nrf91_socket_is_supported+0x2e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   25d94:	f5a2 7380 	sub.w	r3, r2, #256	; 0x100
   25d98:	2b02      	cmp	r3, #2
   25d9a:	d908      	bls.n	25dae <nrf91_socket_is_supported+0x26>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   25d9c:	f5a2 7088 	sub.w	r0, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   25da0:	2801      	cmp	r0, #1
   25da2:	bf8c      	ite	hi
   25da4:	2000      	movhi	r0, #0
   25da6:	2001      	movls	r0, #1
	if (tls_offload_disabled && proto_is_secure(proto)) {
   25da8:	f080 0001 	eor.w	r0, r0, #1
   25dac:	4770      	bx	lr
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   25dae:	2001      	movs	r0, #1
   25db0:	e7fa      	b.n	25da8 <nrf91_socket_is_supported+0x20>
		return false;
   25db2:	2000      	movs	r0, #0
   25db4:	4770      	bx	lr
	return true;
   25db6:	2001      	movs	r0, #1
}
   25db8:	4770      	bx	lr
   25dba:	bf00      	nop
   25dbc:	2001a656 	.word	0x2001a656
   25dc0:	2001a657 	.word	0x2001a657

00025dc4 <nrf91_socket_offload_getaddrinfo>:
{
   25dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25dc8:	4614      	mov	r4, r2
   25dca:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   25dcc:	2100      	movs	r1, #0
{
   25dce:	b08b      	sub	sp, #44	; 0x2c
   25dd0:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   25dd2:	2220      	movs	r2, #32
   25dd4:	a802      	add	r0, sp, #8
{
   25dd6:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   25dd8:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   25dda:	f01b fb2b 	bl	41434 <memset>
	if (hints != NULL) {
   25dde:	b1fc      	cbz	r4, 25e20 <nrf91_socket_offload_getaddrinfo+0x5c>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   25de0:	6862      	ldr	r2, [r4, #4]
		nrf_flags |= NRF_AI_NUMERICSERV;
   25de2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   25de6:	04d2      	lsls	r2, r2, #19
		nrf_flags |= NRF_AI_PDNSERV;
   25de8:	bf48      	it	mi
   25dea:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   25dee:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   25df0:	68e3      	ldr	r3, [r4, #12]
   25df2:	9304      	str	r3, [sp, #16]
	family = z_to_nrf_family(z_in->ai_family);
   25df4:	8923      	ldrh	r3, [r4, #8]
	switch (z_family) {
   25df6:	2b03      	cmp	r3, #3
   25df8:	f200 80d5 	bhi.w	25fa6 <nrf91_socket_offload_getaddrinfo+0x1e2>
   25dfc:	4a6d      	ldr	r2, [pc, #436]	; (25fb4 <nrf91_socket_offload_getaddrinfo+0x1f0>)
   25dfe:	56d3      	ldrsb	r3, [r2, r3]
	if (family == -EAFNOSUPPORT) {
   25e00:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   25e04:	f000 80cf 	beq.w	25fa6 <nrf91_socket_offload_getaddrinfo+0x1e2>
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   25e08:	6920      	ldr	r0, [r4, #16]
	nrf_out->ai_family = family;
   25e0a:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   25e0c:	f018 ffaf 	bl	3ed6e <nrf_to_z_protocol>
   25e10:	9005      	str	r0, [sp, #20]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   25e12:	307b      	adds	r0, #123	; 0x7b
   25e14:	f000 80ca 	beq.w	25fac <nrf91_socket_offload_getaddrinfo+0x1e8>
	if (z_in->ai_canonname != NULL) {
   25e18:	69e3      	ldr	r3, [r4, #28]
   25e1a:	b103      	cbz	r3, 25e1e <nrf91_socket_offload_getaddrinfo+0x5a>
		nrf_out->ai_canonname = z_in->ai_canonname;
   25e1c:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   25e1e:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   25e20:	f04f 32ff 	mov.w	r2, #4294967295
   25e24:	f04f 33ff 	mov.w	r3, #4294967295
   25e28:	4863      	ldr	r0, [pc, #396]	; (25fb8 <nrf91_socket_offload_getaddrinfo+0x1f4>)
   25e2a:	f019 f8e4 	bl	3eff6 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   25e2e:	4622      	mov	r2, r4
   25e30:	4631      	mov	r1, r6
   25e32:	4628      	mov	r0, r5
   25e34:	ab01      	add	r3, sp, #4
   25e36:	f00e fa0d 	bl	34254 <nrf_getaddrinfo>
	if (retval != 0) {
   25e3a:	4604      	mov	r4, r0
   25e3c:	2800      	cmp	r0, #0
   25e3e:	d043      	beq.n	25ec8 <nrf91_socket_offload_getaddrinfo+0x104>
	switch (nrf_gai_err) {
   25e40:	f46f 7380 	mvn.w	r3, #256	; 0x100
   25e44:	441c      	add	r4, r3
   25e46:	2c14      	cmp	r4, #20
   25e48:	d830      	bhi.n	25eac <nrf91_socket_offload_getaddrinfo+0xe8>
   25e4a:	e8df f004 	tbb	[pc, r4]
   25e4e:	0ba9      	.short	0x0ba9
   25e50:	2f2f143a 	.word	0x2f2f143a
   25e54:	2f2f2f2f 	.word	0x2f2f2f2f
   25e58:	172f2f2f 	.word	0x172f2f2f
   25e5c:	23201d1a 	.word	0x23201d1a
   25e60:	2926      	.short	0x2926
   25e62:	2c          	.byte	0x2c
   25e63:	00          	.byte	0x00
   25e64:	f06f 0402 	mvn.w	r4, #2
	k_mutex_unlock(&getaddrinfo_lock);
   25e68:	4853      	ldr	r0, [pc, #332]	; (25fb8 <nrf91_socket_offload_getaddrinfo+0x1f4>)
   25e6a:	f019 f8c6 	bl	3effa <k_mutex_unlock.isra.0>
}
   25e6e:	4620      	mov	r0, r4
   25e70:	b00b      	add	sp, #44	; 0x2c
   25e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return DNS_EAI_FAIL;
   25e76:	f06f 0403 	mvn.w	r4, #3
   25e7a:	e7f5      	b.n	25e68 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_FAMILY;
   25e7c:	f06f 0405 	mvn.w	r4, #5
   25e80:	e7f2      	b.n	25e68 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_MEMORY;
   25e82:	f06f 0409 	mvn.w	r4, #9
   25e86:	e7ef      	b.n	25e68 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_NODATA;
   25e88:	f06f 0404 	mvn.w	r4, #4
   25e8c:	e7ec      	b.n	25e68 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_NONAME;
   25e8e:	f06f 0401 	mvn.w	r4, #1
   25e92:	e7e9      	b.n	25e68 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SERVICE;
   25e94:	f06f 0407 	mvn.w	r4, #7
   25e98:	e7e6      	b.n	25e68 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SOCKTYPE;
   25e9a:	f06f 0406 	mvn.w	r4, #6
   25e9e:	e7e3      	b.n	25e68 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_INPROGRESS;
   25ea0:	f06f 0463 	mvn.w	r4, #99	; 0x63
   25ea4:	e7e0      	b.n	25e68 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SYSTEM;
   25ea6:	f06f 040a 	mvn.w	r4, #10
   25eaa:	e7dd      	b.n	25e68 <nrf91_socket_offload_getaddrinfo+0xa4>
		__ASSERT(false, "Untranslated nrf_getaddrinfo() return value %d", nrf_gai_err);
   25eac:	4943      	ldr	r1, [pc, #268]	; (25fbc <nrf91_socket_offload_getaddrinfo+0x1f8>)
   25eae:	4844      	ldr	r0, [pc, #272]	; (25fc0 <nrf91_socket_offload_getaddrinfo+0x1fc>)
   25eb0:	f240 12a5 	movw	r2, #421	; 0x1a5
   25eb4:	f016 fdea 	bl	3ca8c <assert_print>
   25eb8:	f240 11a5 	movw	r1, #421	; 0x1a5
   25ebc:	483f      	ldr	r0, [pc, #252]	; (25fbc <nrf91_socket_offload_getaddrinfo+0x1f8>)
   25ebe:	f016 fdde 	bl	3ca7e <assert_post_action>
		return -1;
   25ec2:	f04f 34ff 	mov.w	r4, #4294967295
   25ec6:	e7cf      	b.n	25e68 <nrf91_socket_offload_getaddrinfo+0xa4>
	struct zsock_addrinfo *latest_z_res = NULL;
   25ec8:	4681      	mov	r9, r0
	z_out->ai_next = NULL;
   25eca:	4680      	mov	r8, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   25ecc:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   25ece:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 25fc4 <nrf91_socket_offload_getaddrinfo+0x200>
   25ed2:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   25ed4:	b91e      	cbnz	r6, 25ede <nrf91_socket_offload_getaddrinfo+0x11a>
	nrf_freeaddrinfo(nrf_res);
   25ed6:	9801      	ldr	r0, [sp, #4]
   25ed8:	f01a faee 	bl	404b8 <nrf_freeaddrinfo>
   25edc:	e7c4      	b.n	25e68 <nrf91_socket_offload_getaddrinfo+0xa4>
					k_malloc(sizeof(struct zsock_addrinfo));
   25ede:	2050      	movs	r0, #80	; 0x50
   25ee0:	f01b f9fe 	bl	412e0 <k_malloc>
		if (next_z_res == NULL) {
   25ee4:	4605      	mov	r5, r0
   25ee6:	2800      	cmp	r0, #0
   25ee8:	d049      	beq.n	25f7e <nrf91_socket_offload_getaddrinfo+0x1ba>
	family = nrf_to_z_family(nrf_in->ai_family);
   25eea:	f8d6 b004 	ldr.w	fp, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   25eee:	68b3      	ldr	r3, [r6, #8]
   25ef0:	f1bb 0f05 	cmp.w	fp, #5
	z_out->ai_next = NULL;
   25ef4:	f8c0 8000 	str.w	r8, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   25ef8:	f8c0 801c 	str.w	r8, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   25efc:	f8c0 8004 	str.w	r8, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   25f00:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   25f02:	d83f      	bhi.n	25f84 <nrf91_socket_offload_getaddrinfo+0x1c0>
   25f04:	f91a 300b 	ldrsb.w	r3, [sl, fp]
	if (family == -EAFNOSUPPORT) {
   25f08:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   25f0c:	d03a      	beq.n	25f84 <nrf91_socket_offload_getaddrinfo+0x1c0>
	z_out->ai_family = family;
   25f0e:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   25f10:	68f0      	ldr	r0, [r6, #12]
   25f12:	f018 ff2c 	bl	3ed6e <nrf_to_z_protocol>
   25f16:	6128      	str	r0, [r5, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   25f18:	307b      	adds	r0, #123	; 0x7b
   25f1a:	d107      	bne.n	25f2c <nrf91_socket_offload_getaddrinfo+0x168>
		z_out->ai_addr = NULL;
   25f1c:	f8c5 8018 	str.w	r8, [r5, #24]
			k_free(next_z_res);
   25f20:	4628      	mov	r0, r5
   25f22:	f01b f9d6 	bl	412d2 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   25f26:	f06f 0406 	mvn.w	r4, #6
   25f2a:	e030      	b.n	25f8e <nrf91_socket_offload_getaddrinfo+0x1ca>
	if (nrf_in->ai_family == NRF_AF_INET) {
   25f2c:	f1bb 0f01 	cmp.w	fp, #1
   25f30:	d114      	bne.n	25f5c <nrf91_socket_offload_getaddrinfo+0x198>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   25f32:	2008      	movs	r0, #8
   25f34:	f01b f9d4 	bl	412e0 <k_malloc>
   25f38:	61a8      	str	r0, [r5, #24]
		if (z_out->ai_addr == NULL) {
   25f3a:	b1e8      	cbz	r0, 25f78 <nrf91_socket_offload_getaddrinfo+0x1b4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   25f3c:	2308      	movs	r3, #8
   25f3e:	616b      	str	r3, [r5, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   25f40:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   25f42:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25f44:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   25f46:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   25f48:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25f4c:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   25f4e:	f1b9 0f00 	cmp.w	r9, #0
   25f52:	d122      	bne.n	25f9a <nrf91_socket_offload_getaddrinfo+0x1d6>
			*res = next_z_res;
   25f54:	603d      	str	r5, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   25f56:	46a9      	mov	r9, r5
   25f58:	69f6      	ldr	r6, [r6, #28]
   25f5a:	e7bb      	b.n	25ed4 <nrf91_socket_offload_getaddrinfo+0x110>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   25f5c:	f1bb 0f02 	cmp.w	fp, #2
   25f60:	d1de      	bne.n	25f20 <nrf91_socket_offload_getaddrinfo+0x15c>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   25f62:	2018      	movs	r0, #24
   25f64:	f01b f9bc 	bl	412e0 <k_malloc>
   25f68:	61a8      	str	r0, [r5, #24]
		if (z_out->ai_addr == NULL) {
   25f6a:	b128      	cbz	r0, 25f78 <nrf91_socket_offload_getaddrinfo+0x1b4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   25f6c:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   25f6e:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   25f70:	616b      	str	r3, [r5, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   25f72:	f018 ff72 	bl	3ee5a <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   25f76:	e7ea      	b.n	25f4e <nrf91_socket_offload_getaddrinfo+0x18a>
			k_free(next_z_res);
   25f78:	4628      	mov	r0, r5
   25f7a:	f01b f9aa 	bl	412d2 <k_free>
			retval = DNS_EAI_MEMORY;
   25f7e:	f06f 0409 	mvn.w	r4, #9
   25f82:	e004      	b.n	25f8e <nrf91_socket_offload_getaddrinfo+0x1ca>
			k_free(next_z_res);
   25f84:	4628      	mov	r0, r5
   25f86:	f01b f9a4 	bl	412d2 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   25f8a:	f06f 0408 	mvn.w	r4, #8
		nrf91_socket_offload_freeaddrinfo(*res);
   25f8e:	6838      	ldr	r0, [r7, #0]
   25f90:	f018 ff56 	bl	3ee40 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   25f94:	2300      	movs	r3, #0
   25f96:	603b      	str	r3, [r7, #0]
   25f98:	e79d      	b.n	25ed6 <nrf91_socket_offload_getaddrinfo+0x112>
			latest_z_res->ai_next = next_z_res;
   25f9a:	f8c9 5000 	str.w	r5, [r9]
   25f9e:	e7da      	b.n	25f56 <nrf91_socket_offload_getaddrinfo+0x192>
		return DNS_EAI_ADDRFAMILY;
   25fa0:	f06f 0408 	mvn.w	r4, #8
   25fa4:	e760      	b.n	25e68 <nrf91_socket_offload_getaddrinfo+0xa4>
			return DNS_EAI_ADDRFAMILY;
   25fa6:	f06f 0408 	mvn.w	r4, #8
   25faa:	e760      	b.n	25e6e <nrf91_socket_offload_getaddrinfo+0xaa>
			return DNS_EAI_SOCKTYPE;
   25fac:	f06f 0406 	mvn.w	r4, #6
   25fb0:	e75d      	b.n	25e6e <nrf91_socket_offload_getaddrinfo+0xaa>
   25fb2:	bf00      	nop
   25fb4:	00045053 	.word	0x00045053
   25fb8:	20014f2c 	.word	0x20014f2c
   25fbc:	00045014 	.word	0x00045014
   25fc0:	0004409e 	.word	0x0004409e
   25fc4:	00045057 	.word	0x00045057

00025fc8 <nrf91_socket_offload_sendmsg>:
{
   25fc8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   25fcc:	4680      	mov	r8, r0
   25fce:	4691      	mov	r9, r2
	if (msg == NULL) {
   25fd0:	460c      	mov	r4, r1
   25fd2:	b1f9      	cbz	r1, 26014 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   25fd4:	2300      	movs	r3, #0
	ssize_t len = 0;
   25fd6:	461a      	mov	r2, r3
   25fd8:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   25fda:	4298      	cmp	r0, r3
   25fdc:	d124      	bne.n	26028 <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   25fde:	2a80      	cmp	r2, #128	; 0x80
   25fe0:	d86d      	bhi.n	260be <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   25fe2:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   25fe4:	f04f 32ff 	mov.w	r2, #4294967295
   25fe8:	f04f 33ff 	mov.w	r3, #4294967295
   25fec:	4836      	ldr	r0, [pc, #216]	; (260c8 <nrf91_socket_offload_sendmsg+0x100>)
   25fee:	f019 f802 	bl	3eff6 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   25ff2:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   25ff4:	4e35      	ldr	r6, [pc, #212]	; (260cc <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   25ff6:	68e3      	ldr	r3, [r4, #12]
   25ff8:	429d      	cmp	r5, r3
   25ffa:	d31c      	bcc.n	26036 <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   25ffc:	2600      	movs	r6, #0
		ret = 0;
   25ffe:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   26000:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 260cc <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   26004:	42b7      	cmp	r7, r6
   26006:	dd01      	ble.n	2600c <nrf91_socket_offload_sendmsg+0x44>
   26008:	2d00      	cmp	r5, #0
   2600a:	da25      	bge.n	26058 <nrf91_socket_offload_sendmsg+0x90>
		k_mutex_unlock(&sendmsg_lock);
   2600c:	482e      	ldr	r0, [pc, #184]	; (260c8 <nrf91_socket_offload_sendmsg+0x100>)
   2600e:	f018 fff4 	bl	3effa <k_mutex_unlock.isra.0>
		return ret;
   26012:	e005      	b.n	26020 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   26014:	f017 fbb3 	bl	3d77e <__errno>
   26018:	2316      	movs	r3, #22
		return -1;
   2601a:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   2601e:	6003      	str	r3, [r0, #0]
}
   26020:	4628      	mov	r0, r5
   26022:	b002      	add	sp, #8
   26024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   26028:	68a1      	ldr	r1, [r4, #8]
   2602a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2602e:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   26030:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   26032:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   26034:	e7d1      	b.n	25fda <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   26036:	68a1      	ldr	r1, [r4, #8]
   26038:	19f0      	adds	r0, r6, r7
   2603a:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   2603e:	685a      	ldr	r2, [r3, #4]
   26040:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   26044:	f01b f9d6 	bl	413f4 <memcpy>
			len += msg->msg_iov[i].iov_len;
   26048:	68a3      	ldr	r3, [r4, #8]
   2604a:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   2604e:	4453      	add	r3, sl
   26050:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   26052:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   26054:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   26056:	e7ce      	b.n	25ff6 <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   26058:	6863      	ldr	r3, [r4, #4]
   2605a:	1bba      	subs	r2, r7, r6
   2605c:	9301      	str	r3, [sp, #4]
   2605e:	6823      	ldr	r3, [r4, #0]
   26060:	eb0a 0106 	add.w	r1, sl, r6
   26064:	9300      	str	r3, [sp, #0]
   26066:	4640      	mov	r0, r8
   26068:	464b      	mov	r3, r9
   2606a:	f018 ff23 	bl	3eeb4 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   2606e:	1e05      	subs	r5, r0, #0
				offset += ret;
   26070:	bfc8      	it	gt
   26072:	1976      	addgt	r6, r6, r5
   26074:	e7c6      	b.n	26004 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   26076:	68a3      	ldr	r3, [r4, #8]
   26078:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   2607c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   26080:	685b      	ldr	r3, [r3, #4]
   26082:	b133      	cbz	r3, 26092 <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   26084:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   26086:	68a3      	ldr	r3, [r4, #8]
   26088:	eb03 020a 	add.w	r2, r3, sl
   2608c:	6852      	ldr	r2, [r2, #4]
   2608e:	4297      	cmp	r7, r2
   26090:	d304      	bcc.n	2609c <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   26092:	3601      	adds	r6, #1
   26094:	68e3      	ldr	r3, [r4, #12]
   26096:	42b3      	cmp	r3, r6
   26098:	d8ed      	bhi.n	26076 <nrf91_socket_offload_sendmsg+0xae>
   2609a:	e7c1      	b.n	26020 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   2609c:	f853 100a 	ldr.w	r1, [r3, sl]
   260a0:	6863      	ldr	r3, [r4, #4]
   260a2:	4439      	add	r1, r7
   260a4:	9301      	str	r3, [sp, #4]
   260a6:	6823      	ldr	r3, [r4, #0]
   260a8:	4640      	mov	r0, r8
   260aa:	9300      	str	r3, [sp, #0]
   260ac:	1bd2      	subs	r2, r2, r7
   260ae:	464b      	mov	r3, r9
   260b0:	f018 ff00 	bl	3eeb4 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   260b4:	1e01      	subs	r1, r0, #0
   260b6:	db05      	blt.n	260c4 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   260b8:	440f      	add	r7, r1
			len += ret;
   260ba:	440d      	add	r5, r1
   260bc:	e7e3      	b.n	26086 <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   260be:	2600      	movs	r6, #0
	len = 0;
   260c0:	4635      	mov	r5, r6
   260c2:	e7e7      	b.n	26094 <nrf91_socket_offload_sendmsg+0xcc>
   260c4:	460d      	mov	r5, r1
   260c6:	e7ab      	b.n	26020 <nrf91_socket_offload_sendmsg+0x58>
   260c8:	20014f7c 	.word	0x20014f7c
   260cc:	2001a5d6 	.word	0x2001a5d6

000260d0 <allocate_ctx>:
{
   260d0:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   260d2:	f04f 32ff 	mov.w	r2, #4294967295
   260d6:	f04f 33ff 	mov.w	r3, #4294967295
{
   260da:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   260dc:	480b      	ldr	r0, [pc, #44]	; (2610c <allocate_ctx+0x3c>)
   260de:	f018 ff8a 	bl	3eff6 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   260e2:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   260e4:	4a0a      	ldr	r2, [pc, #40]	; (26110 <allocate_ctx+0x40>)
   260e6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   260ea:	3101      	adds	r1, #1
   260ec:	d108      	bne.n	26100 <allocate_ctx+0x30>
			ctx = &offload_ctx[i];
   260ee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   260f2:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   260f6:	4805      	ldr	r0, [pc, #20]	; (2610c <allocate_ctx+0x3c>)
   260f8:	f018 ff7f 	bl	3effa <k_mutex_unlock.isra.0>
}
   260fc:	4628      	mov	r0, r5
   260fe:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   26100:	3301      	adds	r3, #1
   26102:	2b08      	cmp	r3, #8
   26104:	d1ef      	bne.n	260e6 <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   26106:	2500      	movs	r5, #0
   26108:	e7f5      	b.n	260f6 <allocate_ctx+0x26>
   2610a:	bf00      	nop
   2610c:	20014f04 	.word	0x20014f04
   26110:	20019394 	.word	0x20019394

00026114 <release_ctx>:
{
   26114:	b510      	push	{r4, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   26116:	f04f 32ff 	mov.w	r2, #4294967295
{
   2611a:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   2611c:	f04f 33ff 	mov.w	r3, #4294967295
   26120:	4806      	ldr	r0, [pc, #24]	; (2613c <release_ctx+0x28>)
   26122:	f018 ff68 	bl	3eff6 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   26126:	f04f 32ff 	mov.w	r2, #4294967295
   2612a:	2300      	movs	r3, #0
	k_mutex_unlock(&ctx_lock);
   2612c:	4803      	ldr	r0, [pc, #12]	; (2613c <release_ctx+0x28>)
	ctx->lock = NULL;
   2612e:	e9c4 2300 	strd	r2, r3, [r4]
}
   26132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&ctx_lock);
   26136:	f018 bf60 	b.w	3effa <k_mutex_unlock.isra.0>
   2613a:	bf00      	nop
   2613c:	20014f04 	.word	0x20014f04

00026140 <nrf91_socket_offload_accept>:
{
   26140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26144:	b08b      	sub	sp, #44	; 0x2c
   26146:	4607      	mov	r7, r0
   26148:	460c      	mov	r4, r1
   2614a:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   2614c:	f7fa fc96 	bl	20a7c <z_reserve_fd>
   26150:	4606      	mov	r6, r0
	if (fd < 0) {
   26152:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   26154:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   26156:	db23      	blt.n	261a0 <nrf91_socket_offload_accept+0x60>
	if ((addr != NULL) && (addrlen != NULL)) {
   26158:	b32c      	cbz	r4, 261a6 <nrf91_socket_offload_accept+0x66>
   2615a:	b33d      	cbz	r5, 261ac <nrf91_socket_offload_accept+0x6c>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   2615c:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   2615e:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   26160:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   26162:	bf0c      	ite	eq
   26164:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   26166:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   26168:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   2616a:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   2616c:	4639      	mov	r1, r7
   2616e:	f01a fac9 	bl	40704 <nrf_accept>
	if (new_sd < 0) {
   26172:	f1b0 0900 	subs.w	r9, r0, #0
   26176:	db3b      	blt.n	261f0 <nrf91_socket_offload_accept+0xb0>
	ctx = allocate_ctx(new_sd);
   26178:	f7ff ffaa 	bl	260d0 <allocate_ctx>
	if (ctx == NULL) {
   2617c:	4680      	mov	r8, r0
   2617e:	b9c0      	cbnz	r0, 261b2 <nrf91_socket_offload_accept+0x72>
		errno = ENOMEM;
   26180:	f017 fafd 	bl	3d77e <__errno>
   26184:	230c      	movs	r3, #12
   26186:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   26188:	4648      	mov	r0, r9
   2618a:	f01a fa08 	bl	4059e <nrf_close>
	if (ctx != NULL) {
   2618e:	f1b8 0f00 	cmp.w	r8, #0
   26192:	d002      	beq.n	2619a <nrf91_socket_offload_accept+0x5a>
		release_ctx(ctx);
   26194:	4640      	mov	r0, r8
   26196:	f7ff ffbd 	bl	26114 <release_ctx>
	z_free_fd(fd);
   2619a:	4630      	mov	r0, r6
   2619c:	f7fa fcbe 	bl	20b1c <z_free_fd>
		return -1;
   261a0:	f04f 36ff 	mov.w	r6, #4294967295
   261a4:	e017      	b.n	261d6 <nrf91_socket_offload_accept+0x96>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   261a6:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   261a8:	4627      	mov	r7, r4
   261aa:	e7df      	b.n	2616c <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   261ac:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   261ae:	462f      	mov	r7, r5
   261b0:	e7dc      	b.n	2616c <nrf91_socket_offload_accept+0x2c>
	if ((addr != NULL) && (addrlen != NULL)) {
   261b2:	b15c      	cbz	r4, 261cc <nrf91_socket_offload_accept+0x8c>
   261b4:	b155      	cbz	r5, 261cc <nrf91_socket_offload_accept+0x8c>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   261b6:	687b      	ldr	r3, [r7, #4]
   261b8:	2b01      	cmp	r3, #1
   261ba:	d110      	bne.n	261de <nrf91_socket_offload_accept+0x9e>
			*addrlen = sizeof(struct sockaddr_in);
   261bc:	2208      	movs	r2, #8
   261be:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   261c0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   261c4:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   261c6:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   261c8:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   261ca:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   261cc:	4641      	mov	r1, r8
   261ce:	4630      	mov	r0, r6
   261d0:	4a0a      	ldr	r2, [pc, #40]	; (261fc <nrf91_socket_offload_accept+0xbc>)
   261d2:	f7fa fc89 	bl	20ae8 <z_finalize_fd>
}
   261d6:	4630      	mov	r0, r6
   261d8:	b00b      	add	sp, #44	; 0x2c
   261da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   261de:	2b02      	cmp	r3, #2
   261e0:	d1d2      	bne.n	26188 <nrf91_socket_offload_accept+0x48>
			*addrlen = sizeof(struct sockaddr_in6);
   261e2:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   261e4:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   261e6:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   261e8:	a901      	add	r1, sp, #4
   261ea:	f018 fe36 	bl	3ee5a <nrf_to_z_ipv6>
   261ee:	e7ed      	b.n	261cc <nrf91_socket_offload_accept+0x8c>
	if (new_sd != -1) {
   261f0:	f1b9 3fff 	cmp.w	r9, #4294967295
   261f4:	d0d1      	beq.n	2619a <nrf91_socket_offload_accept+0x5a>
	struct nrf_sock_ctx *ctx = NULL;
   261f6:	f04f 0800 	mov.w	r8, #0
   261fa:	e7c5      	b.n	26188 <nrf91_socket_offload_accept+0x48>
   261fc:	00042c88 	.word	0x00042c88

00026200 <nrf91_socket_create>:
{
   26200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (type & SOCK_NATIVE) {
   26202:	1e0e      	subs	r6, r1, #0
{
   26204:	4605      	mov	r5, r0
   26206:	9201      	str	r2, [sp, #4]
	if (type & SOCK_NATIVE) {
   26208:	da12      	bge.n	26230 <nrf91_socket_create+0x30>
	k_sched_lock();
   2620a:	f011 fbab 	bl	37964 <k_sched_lock>
	*offload_lock = true;
   2620e:	4f28      	ldr	r7, [pc, #160]	; (262b0 <nrf91_socket_create+0xb0>)
   26210:	2301      	movs	r3, #1
   26212:	703b      	strb	r3, [r7, #0]
	return z_impl_zsock_socket(family, type, proto);
   26214:	4628      	mov	r0, r5
   26216:	9a01      	ldr	r2, [sp, #4]
   26218:	f026 4140 	bic.w	r1, r6, #3221225472	; 0xc0000000
   2621c:	f7fb fb48 	bl	218b0 <z_impl_zsock_socket>
	*offload_lock = false;
   26220:	2300      	movs	r3, #0
   26222:	703b      	strb	r3, [r7, #0]
   26224:	4604      	mov	r4, r0
	k_sched_unlock();
   26226:	f012 f83f 	bl	382a8 <k_sched_unlock>
}
   2622a:	4620      	mov	r0, r4
   2622c:	b003      	add	sp, #12
   2622e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   26230:	0073      	lsls	r3, r6, #1
   26232:	d503      	bpl.n	2623c <nrf91_socket_create+0x3c>
	k_sched_lock();
   26234:	f011 fb96 	bl	37964 <k_sched_lock>
	*offload_lock = true;
   26238:	4f1e      	ldr	r7, [pc, #120]	; (262b4 <nrf91_socket_create+0xb4>)
   2623a:	e7e9      	b.n	26210 <nrf91_socket_create+0x10>
	fd = z_reserve_fd();
   2623c:	f7fa fc1e 	bl	20a7c <z_reserve_fd>
	if (fd < 0) {
   26240:	1e04      	subs	r4, r0, #0
   26242:	db0f      	blt.n	26264 <nrf91_socket_create+0x64>
	family = z_to_nrf_family(family);
   26244:	b2ad      	uxth	r5, r5
	switch (z_family) {
   26246:	2d03      	cmp	r5, #3
   26248:	d805      	bhi.n	26256 <nrf91_socket_create+0x56>
   2624a:	4b1b      	ldr	r3, [pc, #108]	; (262b8 <nrf91_socket_create+0xb8>)
	if (family == -EAFNOSUPPORT) {
   2624c:	9a01      	ldr	r2, [sp, #4]
   2624e:	575d      	ldrsb	r5, [r3, r5]
   26250:	f115 0f6a 	cmn.w	r5, #106	; 0x6a
   26254:	d109      	bne.n	2626a <nrf91_socket_create+0x6a>
		errno = EAFNOSUPPORT;
   26256:	f017 fa92 	bl	3d77e <__errno>
   2625a:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   2625c:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   2625e:	4620      	mov	r0, r4
   26260:	f7fa fc5c 	bl	20b1c <z_free_fd>
		return -1;
   26264:	f04f 34ff 	mov.w	r4, #4294967295
   26268:	e7df      	b.n	2622a <nrf91_socket_create+0x2a>
	proto = z_to_nrf_protocol(proto);
   2626a:	4610      	mov	r0, r2
   2626c:	f018 fd7f 	bl	3ed6e <nrf_to_z_protocol>
	if (proto == -EPROTONOSUPPORT) {
   26270:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   26274:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   26276:	d103      	bne.n	26280 <nrf91_socket_create+0x80>
		errno = EPROTONOSUPPORT;
   26278:	f017 fa81 	bl	3d77e <__errno>
   2627c:	237b      	movs	r3, #123	; 0x7b
   2627e:	e7ed      	b.n	2625c <nrf91_socket_create+0x5c>
	retval = nrf_socket(family, type, proto);
   26280:	4628      	mov	r0, r5
   26282:	4631      	mov	r1, r6
   26284:	f01a f929 	bl	404da <nrf_socket>
	if (sd < 0) {
   26288:	1e05      	subs	r5, r0, #0
   2628a:	dbe8      	blt.n	2625e <nrf91_socket_create+0x5e>
	ctx = allocate_ctx(sd);
   2628c:	f7ff ff20 	bl	260d0 <allocate_ctx>
	if (ctx == NULL) {
   26290:	4601      	mov	r1, r0
   26292:	b938      	cbnz	r0, 262a4 <nrf91_socket_create+0xa4>
		errno = ENOMEM;
   26294:	f017 fa73 	bl	3d77e <__errno>
   26298:	230c      	movs	r3, #12
   2629a:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   2629c:	4628      	mov	r0, r5
   2629e:	f01a f97e 	bl	4059e <nrf_close>
   262a2:	e7dc      	b.n	2625e <nrf91_socket_create+0x5e>
	z_finalize_fd(fd, ctx,
   262a4:	4620      	mov	r0, r4
   262a6:	4a05      	ldr	r2, [pc, #20]	; (262bc <nrf91_socket_create+0xbc>)
   262a8:	f7fa fc1e 	bl	20ae8 <z_finalize_fd>
	return fd;
   262ac:	e7bd      	b.n	2622a <nrf91_socket_create+0x2a>
   262ae:	bf00      	nop
   262b0:	2001a656 	.word	0x2001a656
   262b4:	2001a657 	.word	0x2001a657
   262b8:	00045053 	.word	0x00045053
   262bc:	00042c88 	.word	0x00042c88

000262c0 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   262c0:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   262c2:	4805      	ldr	r0, [pc, #20]	; (262d8 <at_monitor_sys_init+0x18>)
   262c4:	f00e feaa 	bl	3501c <nrf_modem_at_notif_handler_set>
	if (err) {
   262c8:	4602      	mov	r2, r0
   262ca:	b118      	cbz	r0, 262d4 <at_monitor_sys_init+0x14>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   262cc:	2145      	movs	r1, #69	; 0x45
   262ce:	4803      	ldr	r0, [pc, #12]	; (262dc <at_monitor_sys_init+0x1c>)
   262d0:	f016 fc16 	bl	3cb00 <z_log_minimal_printk>
	}

	return 0;
}
   262d4:	2000      	movs	r0, #0
   262d6:	bd08      	pop	{r3, pc}
   262d8:	000262e1 	.word	0x000262e1
   262dc:	0004505d 	.word	0x0004505d

000262e0 <at_monitor_dispatch>:
{
   262e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(notif != NULL);
   262e2:	4604      	mov	r4, r0
   262e4:	b940      	cbnz	r0, 262f8 <at_monitor_dispatch+0x18>
   262e6:	4931      	ldr	r1, [pc, #196]	; (263ac <at_monitor_dispatch+0xcc>)
   262e8:	4831      	ldr	r0, [pc, #196]	; (263b0 <at_monitor_dispatch+0xd0>)
   262ea:	2224      	movs	r2, #36	; 0x24
   262ec:	f016 fbce 	bl	3ca8c <assert_print>
   262f0:	2124      	movs	r1, #36	; 0x24
   262f2:	482e      	ldr	r0, [pc, #184]	; (263ac <at_monitor_dispatch+0xcc>)
   262f4:	f016 fbc3 	bl	3ca7e <assert_post_action>
{
   262f8:	4d2e      	ldr	r5, [pc, #184]	; (263b4 <at_monitor_dispatch+0xd4>)
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   262fa:	4e2f      	ldr	r6, [pc, #188]	; (263b8 <at_monitor_dispatch+0xd8>)
   262fc:	4f2b      	ldr	r7, [pc, #172]	; (263ac <at_monitor_dispatch+0xcc>)
   262fe:	42b5      	cmp	r5, r6
   26300:	d908      	bls.n	26314 <at_monitor_dispatch+0x34>
   26302:	4639      	mov	r1, r7
   26304:	482a      	ldr	r0, [pc, #168]	; (263b0 <at_monitor_dispatch+0xd0>)
   26306:	222a      	movs	r2, #42	; 0x2a
   26308:	f016 fbc0 	bl	3ca8c <assert_print>
   2630c:	212a      	movs	r1, #42	; 0x2a
   2630e:	4638      	mov	r0, r7
   26310:	f016 fbb5 	bl	3ca7e <assert_post_action>
   26314:	42b5      	cmp	r5, r6
   26316:	d310      	bcc.n	2633a <at_monitor_dispatch+0x5a>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   26318:	4d28      	ldr	r5, [pc, #160]	; (263bc <at_monitor_dispatch+0xdc>)
   2631a:	4e29      	ldr	r6, [pc, #164]	; (263c0 <at_monitor_dispatch+0xe0>)
   2631c:	4f23      	ldr	r7, [pc, #140]	; (263ac <at_monitor_dispatch+0xcc>)
   2631e:	42b5      	cmp	r5, r6
   26320:	d908      	bls.n	26334 <at_monitor_dispatch+0x54>
   26322:	4639      	mov	r1, r7
   26324:	4822      	ldr	r0, [pc, #136]	; (263b0 <at_monitor_dispatch+0xd0>)
   26326:	2232      	movs	r2, #50	; 0x32
   26328:	f016 fbb0 	bl	3ca8c <assert_print>
   2632c:	2132      	movs	r1, #50	; 0x32
   2632e:	4638      	mov	r0, r7
   26330:	f016 fba5 	bl	3ca7e <assert_post_action>
   26334:	42b5      	cmp	r5, r6
   26336:	d30f      	bcc.n	26358 <at_monitor_dispatch+0x78>
}
   26338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   2633a:	7a2b      	ldrb	r3, [r5, #8]
   2633c:	b923      	cbnz	r3, 26348 <at_monitor_dispatch+0x68>
   2633e:	6829      	ldr	r1, [r5, #0]
   26340:	b921      	cbnz	r1, 2634c <at_monitor_dispatch+0x6c>
			e->handler(notif);
   26342:	4620      	mov	r0, r4
   26344:	686b      	ldr	r3, [r5, #4]
   26346:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   26348:	350c      	adds	r5, #12
   2634a:	e7d8      	b.n	262fe <at_monitor_dispatch+0x1e>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   2634c:	4620      	mov	r0, r4
   2634e:	f01b fa8b 	bl	41868 <strstr>
   26352:	2800      	cmp	r0, #0
   26354:	d1f5      	bne.n	26342 <at_monitor_dispatch+0x62>
   26356:	e7f7      	b.n	26348 <at_monitor_dispatch+0x68>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   26358:	7a2b      	ldrb	r3, [r5, #8]
   2635a:	b9c3      	cbnz	r3, 2638e <at_monitor_dispatch+0xae>
   2635c:	6829      	ldr	r1, [r5, #0]
   2635e:	b989      	cbnz	r1, 26384 <at_monitor_dispatch+0xa4>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   26360:	4620      	mov	r0, r4
   26362:	f7f6 ff6e 	bl	1d242 <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   26366:	2200      	movs	r2, #0
   26368:	1d41      	adds	r1, r0, #5
   2636a:	2300      	movs	r3, #0
   2636c:	4815      	ldr	r0, [pc, #84]	; (263c4 <at_monitor_dispatch+0xe4>)
   2636e:	f01a fdf1 	bl	40f54 <k_heap_alloc>
	if (!at_notif) {
   26372:	4605      	mov	r5, r0
   26374:	b968      	cbnz	r0, 26392 <at_monitor_dispatch+0xb2>
		LOG_WRN("No heap space for incoming notification: %s",
   26376:	4622      	mov	r2, r4
}
   26378:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_WRN("No heap space for incoming notification: %s",
   2637c:	2157      	movs	r1, #87	; 0x57
   2637e:	4812      	ldr	r0, [pc, #72]	; (263c8 <at_monitor_dispatch+0xe8>)
   26380:	f016 bbbe 	b.w	3cb00 <z_log_minimal_printk>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   26384:	4620      	mov	r0, r4
   26386:	f01b fa6f 	bl	41868 <strstr>
   2638a:	2800      	cmp	r0, #0
   2638c:	d1e8      	bne.n	26360 <at_monitor_dispatch+0x80>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   2638e:	350c      	adds	r5, #12
   26390:	e7c5      	b.n	2631e <at_monitor_dispatch+0x3e>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   26392:	4621      	mov	r1, r4
   26394:	3004      	adds	r0, #4
   26396:	f01b fa18 	bl	417ca <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   2639a:	4629      	mov	r1, r5
   2639c:	480b      	ldr	r0, [pc, #44]	; (263cc <at_monitor_dispatch+0xec>)
   2639e:	f01a fe12 	bl	40fc6 <k_queue_append>
}
   263a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_submit(&at_monitor_work);
   263a6:	480a      	ldr	r0, [pc, #40]	; (263d0 <at_monitor_dispatch+0xf0>)
   263a8:	f011 b800 	b.w	373ac <k_work_submit>
   263ac:	0004508f 	.word	0x0004508f
   263b0:	0004409e 	.word	0x0004409e
   263b4:	20014cec 	.word	0x20014cec
   263b8:	20014cec 	.word	0x20014cec
   263bc:	20014c74 	.word	0x20014c74
   263c0:	20014cec 	.word	0x20014cec
   263c4:	20014e80 	.word	0x20014e80
   263c8:	000450bb 	.word	0x000450bb
   263cc:	20015110 	.word	0x20015110
   263d0:	200146a0 	.word	0x200146a0

000263d4 <at_monitor_task>:
{
   263d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   263d8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 2644c <at_monitor_task+0x78>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   263dc:	4f17      	ldr	r7, [pc, #92]	; (2643c <at_monitor_task+0x68>)
   263de:	2200      	movs	r2, #0
   263e0:	2300      	movs	r3, #0
   263e2:	4648      	mov	r0, r9
   263e4:	f010 fc6c 	bl	36cc0 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   263e8:	4605      	mov	r5, r0
   263ea:	bb10      	cbnz	r0, 26432 <at_monitor_task+0x5e>
}
   263ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!e->paused &&
   263f0:	7a23      	ldrb	r3, [r4, #8]
   263f2:	b92b      	cbnz	r3, 26400 <at_monitor_task+0x2c>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   263f4:	6821      	ldr	r1, [r4, #0]
   263f6:	1d2e      	adds	r6, r5, #4
			if (!e->paused &&
   263f8:	b9a9      	cbnz	r1, 26426 <at_monitor_task+0x52>
				e->handler(at_notif->data);
   263fa:	4630      	mov	r0, r6
   263fc:	6863      	ldr	r3, [r4, #4]
   263fe:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   26400:	340c      	adds	r4, #12
   26402:	42bc      	cmp	r4, r7
   26404:	d908      	bls.n	26418 <at_monitor_task+0x44>
   26406:	4641      	mov	r1, r8
   26408:	480d      	ldr	r0, [pc, #52]	; (26440 <at_monitor_task+0x6c>)
   2640a:	2253      	movs	r2, #83	; 0x53
   2640c:	f016 fb3e 	bl	3ca8c <assert_print>
   26410:	2153      	movs	r1, #83	; 0x53
   26412:	4640      	mov	r0, r8
   26414:	f016 fb33 	bl	3ca7e <assert_post_action>
   26418:	42bc      	cmp	r4, r7
   2641a:	d3e9      	bcc.n	263f0 <at_monitor_task+0x1c>
		k_heap_free(&at_monitor_heap, at_notif);
   2641c:	4629      	mov	r1, r5
   2641e:	4809      	ldr	r0, [pc, #36]	; (26444 <at_monitor_task+0x70>)
   26420:	f00f ff50 	bl	362c4 <k_heap_free>
   26424:	e7db      	b.n	263de <at_monitor_task+0xa>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   26426:	4630      	mov	r0, r6
   26428:	f01b fa1e 	bl	41868 <strstr>
   2642c:	2800      	cmp	r0, #0
   2642e:	d1e4      	bne.n	263fa <at_monitor_task+0x26>
   26430:	e7e6      	b.n	26400 <at_monitor_task+0x2c>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   26432:	4c05      	ldr	r4, [pc, #20]	; (26448 <at_monitor_task+0x74>)
   26434:	f8df 8018 	ldr.w	r8, [pc, #24]	; 26450 <at_monitor_task+0x7c>
   26438:	e7e3      	b.n	26402 <at_monitor_task+0x2e>
   2643a:	bf00      	nop
   2643c:	20014cec 	.word	0x20014cec
   26440:	0004409e 	.word	0x0004409e
   26444:	20014e80 	.word	0x20014e80
   26448:	20014c74 	.word	0x20014c74
   2644c:	20015110 	.word	0x20015110
   26450:	0004508f 	.word	0x0004508f

00026454 <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
   26454:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   26456:	4d05      	ldr	r5, [pc, #20]	; (2646c <write_uart_string+0x18>)
   26458:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   2645a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   2645e:	b901      	cbnz	r1, 26462 <write_uart_string+0xe>
	}
}
   26460:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   26462:	6828      	ldr	r0, [r5, #0]
   26464:	6883      	ldr	r3, [r0, #8]
   26466:	685b      	ldr	r3, [r3, #4]
   26468:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   2646a:	e7f6      	b.n	2645a <write_uart_string+0x6>
   2646c:	200193e8 	.word	0x200193e8

00026470 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   26470:	b508      	push	{r3, lr}
	ARG_UNUSED(work);

    /* Sending through string format rather than raw buffer in case
     * the buffer contains characters that need to be escaped
     */
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   26472:	4b0c      	ldr	r3, [pc, #48]	; (264a4 <cmd_send+0x34>)
   26474:	4a0c      	ldr	r2, [pc, #48]	; (264a8 <cmd_send+0x38>)
   26476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2647a:	4618      	mov	r0, r3
   2647c:	f00e fdfa 	bl	35074 <nrf_modem_at_cmd>
	if (err < 0) {
   26480:	1e02      	subs	r2, r0, #0
   26482:	da03      	bge.n	2648c <cmd_send+0x1c>
		LOG_ERR("Error while processing AT command: %d", err);
   26484:	2145      	movs	r1, #69	; 0x45
   26486:	4809      	ldr	r0, [pc, #36]	; (264ac <cmd_send+0x3c>)
   26488:	f016 fb3a 	bl	3cb00 <z_log_minimal_printk>
	}

	write_uart_string(at_buf);
   2648c:	4805      	ldr	r0, [pc, #20]	; (264a4 <cmd_send+0x34>)
   2648e:	f7ff ffe1 	bl	26454 <write_uart_string>

	at_buf_busy = false;
   26492:	2200      	movs	r2, #0
   26494:	4b06      	ldr	r3, [pc, #24]	; (264b0 <cmd_send+0x40>)
   26496:	701a      	strb	r2, [r3, #0]
	uart_irq_rx_enable(uart_dev);
   26498:	4b06      	ldr	r3, [pc, #24]	; (264b4 <cmd_send+0x44>)
   2649a:	6818      	ldr	r0, [r3, #0]
}
   2649c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   264a0:	f018 be4e 	b.w	3f140 <z_impl_uart_irq_rx_enable>
   264a4:	2001a658 	.word	0x2001a658
   264a8:	0004a310 	.word	0x0004a310
   264ac:	000450f7 	.word	0x000450f7
   264b0:	2001b658 	.word	0x2001b658
   264b4:	200193e8 	.word	0x200193e8

000264b8 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   264b8:	2201      	movs	r2, #1
{
   264ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		term_mode = mode;
   264be:	4b3a      	ldr	r3, [pc, #232]	; (265a8 <at_host_init+0xf0>)
{
   264c0:	b085      	sub	sp, #20
		term_mode = mode;
   264c2:	701a      	strb	r2, [r3, #0]
   264c4:	4839      	ldr	r0, [pc, #228]	; (265ac <at_host_init+0xf4>)
   264c6:	f00f fd01 	bl	35ecc <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   264ca:	4e39      	ldr	r6, [pc, #228]	; (265b0 <at_host_init+0xf8>)
   264cc:	6030      	str	r0, [r6, #0]
	if (uart_dev == NULL) {
   264ce:	b980      	cbnz	r0, 264f2 <at_host_init+0x3a>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   264d0:	4a36      	ldr	r2, [pc, #216]	; (265ac <at_host_init+0xf4>)
   264d2:	2145      	movs	r1, #69	; 0x45
   264d4:	4837      	ldr	r0, [pc, #220]	; (265b4 <at_host_init+0xfc>)
   264d6:	f016 fb13 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   264da:	f06f 0215 	mvn.w	r2, #21
	}

	/* Initialize the UART module */
	err = at_uart_init(uart_dev_name);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
   264de:	2145      	movs	r1, #69	; 0x45
   264e0:	4835      	ldr	r0, [pc, #212]	; (265b8 <at_host_init+0x100>)
   264e2:	f016 fb0d 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   264e6:	f06f 050d 	mvn.w	r5, #13
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   264ea:	4628      	mov	r0, r5
   264ec:	b005      	add	sp, #20
   264ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   264f2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	return z_impl_k_uptime_ticks();
   264f6:	f01a fe0d 	bl	41114 <z_impl_k_uptime_ticks>
   264fa:	46b8      	mov	r8, r7
   264fc:	fba0 0307 	umull	r0, r3, r0, r7
   26500:	fb07 3101 	mla	r1, r7, r1, r3
   26504:	0bc0      	lsrs	r0, r0, #15
			LOG_INF("UART check failed: %d. "
   26506:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 265d4 <at_host_init+0x11c>
   2650a:	ea40 4441 	orr.w	r4, r0, r1, lsl #17
		err = uart_err_check(uart_dev);
   2650e:	6830      	ldr	r0, [r6, #0]
	if (api->err_check == NULL) {
   26510:	6883      	ldr	r3, [r0, #8]
   26512:	689b      	ldr	r3, [r3, #8]
   26514:	b1bb      	cbz	r3, 26546 <at_host_init+0x8e>
	return api->err_check(dev);
   26516:	4798      	blx	r3
		if (err) {
   26518:	4605      	mov	r5, r0
   2651a:	b360      	cbz	r0, 26576 <at_host_init+0xbe>
   2651c:	f01a fdfa 	bl	41114 <z_impl_k_uptime_ticks>
   26520:	fba0 3008 	umull	r3, r0, r0, r8
   26524:	fb07 0001 	mla	r0, r7, r1, r0
   26528:	0bdb      	lsrs	r3, r3, #15
   2652a:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
			if (k_uptime_get_32() - start_time >
   2652e:	1b1b      	subs	r3, r3, r4
   26530:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
				LOG_ERR("UART check failed: %d. "
   26534:	462a      	mov	r2, r5
			if (k_uptime_get_32() - start_time >
   26536:	d909      	bls.n	2654c <at_host_init+0x94>
				LOG_ERR("UART check failed: %d. "
   26538:	2145      	movs	r1, #69	; 0x45
   2653a:	4820      	ldr	r0, [pc, #128]	; (265bc <at_host_init+0x104>)
   2653c:	f016 fae0 	bl	3cb00 <z_log_minimal_printk>
				return -EIO;
   26540:	f06f 0204 	mvn.w	r2, #4
   26544:	e7cb      	b.n	264de <at_host_init+0x26>
		return -ENOSYS;
   26546:	f06f 0557 	mvn.w	r5, #87	; 0x57
   2654a:	e7e7      	b.n	2651c <at_host_init+0x64>
			LOG_INF("UART check failed: %d. "
   2654c:	2149      	movs	r1, #73	; 0x49
   2654e:	4648      	mov	r0, r9
   26550:	f016 fad6 	bl	3cb00 <z_log_minimal_printk>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   26554:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->fifo_read == NULL) {
   26556:	6883      	ldr	r3, [r0, #8]
   26558:	699b      	ldr	r3, [r3, #24]
   2655a:	b903      	cbnz	r3, 2655e <at_host_init+0xa6>
   2655c:	e7fe      	b.n	2655c <at_host_init+0xa4>
		return -ENOSYS;
	}

	return api->fifo_read(dev, rx_data, size);
   2655e:	2201      	movs	r2, #1
   26560:	f10d 010f 	add.w	r1, sp, #15
   26564:	4798      	blx	r3
   26566:	2800      	cmp	r0, #0
   26568:	d1f4      	bne.n	26554 <at_host_init+0x9c>
	return z_impl_k_sleep(timeout);
   2656a:	2100      	movs	r1, #0
   2656c:	f44f 70a4 	mov.w	r0, #328	; 0x148
   26570:	f012 f84e 	bl	38610 <z_impl_k_sleep>
	} while (err);
   26574:	e7cb      	b.n	2650e <at_host_init+0x56>
	uart_irq_callback_set(uart_dev, isr);
   26576:	6830      	ldr	r0, [r6, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   26578:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   2657a:	b123      	cbz	r3, 26586 <at_host_init+0xce>
   2657c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2657e:	b113      	cbz	r3, 26586 <at_host_init+0xce>
		api->irq_callback_set(dev, cb, user_data);
   26580:	462a      	mov	r2, r5
   26582:	490f      	ldr	r1, [pc, #60]	; (265c0 <at_host_init+0x108>)
   26584:	4798      	blx	r3
	k_work_init(&cmd_send_work, cmd_send);
   26586:	490f      	ldr	r1, [pc, #60]	; (265c4 <at_host_init+0x10c>)
   26588:	480f      	ldr	r0, [pc, #60]	; (265c8 <at_host_init+0x110>)
   2658a:	f010 fe63 	bl	37254 <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
   2658e:	2300      	movs	r3, #0
   26590:	f44f 6280 	mov.w	r2, #1024	; 0x400
   26594:	9300      	str	r3, [sp, #0]
   26596:	490d      	ldr	r1, [pc, #52]	; (265cc <at_host_init+0x114>)
   26598:	230a      	movs	r3, #10
   2659a:	480d      	ldr	r0, [pc, #52]	; (265d0 <at_host_init+0x118>)
   2659c:	f010 ff60 	bl	37460 <k_work_queue_start>
	uart_irq_rx_enable(uart_dev);
   265a0:	6830      	ldr	r0, [r6, #0]
   265a2:	f018 fdcd 	bl	3f140 <z_impl_uart_irq_rx_enable>
}
   265a6:	e7a0      	b.n	264ea <at_host_init+0x32>
   265a8:	2001b65a 	.word	0x2001b65a
   265ac:	00044f31 	.word	0x00044f31
   265b0:	200193e8 	.word	0x200193e8
   265b4:	00045122 	.word	0x00045122
   265b8:	000451ac 	.word	0x000451ac
   265bc:	00045137 	.word	0x00045137
   265c0:	000265d9 	.word	0x000265d9
   265c4:	00026471 	.word	0x00026471
   265c8:	200193d8 	.word	0x200193d8
   265cc:	2001f100 	.word	0x2001f100
   265d0:	200153f0 	.word	0x200153f0
   265d4:	00045172 	.word	0x00045172

000265d8 <isr>:
{
   265d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   265da:	4604      	mov	r4, r0
	if (api->irq_update == NULL) {
   265dc:	6883      	ldr	r3, [r0, #8]
   265de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   265e0:	b103      	cbz	r3, 265e4 <isr+0xc>
	return api->irq_update(dev);
   265e2:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   265e4:	68a3      	ldr	r3, [r4, #8]
   265e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   265e8:	b9c3      	cbnz	r3, 2661c <isr+0x44>
	while ((!at_buf_busy) &&
   265ea:	4e3a      	ldr	r6, [pc, #232]	; (266d4 <isr+0xfc>)
		if (at_cmd_len > 0) {
   265ec:	4d3a      	ldr	r5, [pc, #232]	; (266d8 <isr+0x100>)
	while ((!at_buf_busy) &&
   265ee:	7833      	ldrb	r3, [r6, #0]
   265f0:	b9c3      	cbnz	r3, 26624 <isr+0x4c>
	if (api->fifo_read == NULL) {
   265f2:	68a3      	ldr	r3, [r4, #8]
   265f4:	699b      	ldr	r3, [r3, #24]
   265f6:	b12b      	cbz	r3, 26604 <isr+0x2c>
	return api->fifo_read(dev, rx_data, size);
   265f8:	2201      	movs	r2, #1
   265fa:	4620      	mov	r0, r4
   265fc:	f10d 0107 	add.w	r1, sp, #7
   26600:	4798      	blx	r3
   26602:	b178      	cbz	r0, 26624 <isr+0x4c>
		uart_rx_handler(character);
   26604:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   26608:	2a08      	cmp	r2, #8
   2660a:	d001      	beq.n	26610 <isr+0x38>
   2660c:	2a7f      	cmp	r2, #127	; 0x7f
   2660e:	d10b      	bne.n	26628 <isr+0x50>
		if (at_cmd_len > 0) {
   26610:	682b      	ldr	r3, [r5, #0]
   26612:	2b00      	cmp	r3, #0
   26614:	d0eb      	beq.n	265ee <isr+0x16>
			at_cmd_len--;
   26616:	3b01      	subs	r3, #1
   26618:	602b      	str	r3, [r5, #0]
   2661a:	e7e8      	b.n	265ee <isr+0x16>
	return api->irq_rx_ready(dev);
   2661c:	4620      	mov	r0, r4
   2661e:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   26620:	2800      	cmp	r0, #0
   26622:	d1e2      	bne.n	265ea <isr+0x12>
}
   26624:	b003      	add	sp, #12
   26626:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!inside_quotes) {
   26628:	492c      	ldr	r1, [pc, #176]	; (266dc <isr+0x104>)
   2662a:	780b      	ldrb	r3, [r1, #0]
   2662c:	b983      	cbnz	r3, 26650 <isr+0x78>
		switch (character) {
   2662e:	2a0a      	cmp	r2, #10
   26630:	d018      	beq.n	26664 <isr+0x8c>
   26632:	2a0d      	cmp	r2, #13
   26634:	d008      	beq.n	26648 <isr+0x70>
   26636:	b95a      	cbnz	r2, 26650 <isr+0x78>
			if (term_mode == MODE_NULL_TERM) {
   26638:	4b29      	ldr	r3, [pc, #164]	; (266e0 <isr+0x108>)
   2663a:	781b      	ldrb	r3, [r3, #0]
   2663c:	b363      	cbz	r3, 26698 <isr+0xc0>
			LOG_WRN("Ignored null; would terminate string early.");
   2663e:	2157      	movs	r1, #87	; 0x57
   26640:	4828      	ldr	r0, [pc, #160]	; (266e4 <isr+0x10c>)
   26642:	f016 fa5d 	bl	3cb00 <z_log_minimal_printk>
			return;
   26646:	e7d2      	b.n	265ee <isr+0x16>
			if (term_mode == MODE_CR) {
   26648:	4825      	ldr	r0, [pc, #148]	; (266e0 <isr+0x108>)
   2664a:	7800      	ldrb	r0, [r0, #0]
   2664c:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   2664e:	d023      	beq.n	26698 <isr+0xc0>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   26650:	682f      	ldr	r7, [r5, #0]
   26652:	1c78      	adds	r0, r7, #1
   26654:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   26658:	d313      	bcc.n	26682 <isr+0xaa>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   2665a:	2145      	movs	r1, #69	; 0x45
   2665c:	4822      	ldr	r0, [pc, #136]	; (266e8 <isr+0x110>)
   2665e:	f016 fa4f 	bl	3cb00 <z_log_minimal_printk>
		return;
   26662:	e7c4      	b.n	265ee <isr+0x16>
			if (term_mode == MODE_LF) {
   26664:	481e      	ldr	r0, [pc, #120]	; (266e0 <isr+0x108>)
   26666:	7800      	ldrb	r0, [r0, #0]
   26668:	2802      	cmp	r0, #2
   2666a:	d015      	beq.n	26698 <isr+0xc0>
			if (term_mode == MODE_CR_LF &&
   2666c:	2803      	cmp	r0, #3
   2666e:	d1ef      	bne.n	26650 <isr+0x78>
		if (at_cmd_len > 0) {
   26670:	682f      	ldr	r7, [r5, #0]
			if (term_mode == MODE_CR_LF &&
   26672:	2f00      	cmp	r7, #0
   26674:	d0ec      	beq.n	26650 <isr+0x78>
			    at_buf[at_cmd_len - 1] == '\r') {
   26676:	481d      	ldr	r0, [pc, #116]	; (266ec <isr+0x114>)
   26678:	4438      	add	r0, r7
			    at_cmd_len > 0 &&
   2667a:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   2667e:	280d      	cmp	r0, #13
   26680:	e7e5      	b.n	2664e <isr+0x76>
	at_buf[at_cmd_len] = character;
   26682:	f8df c068 	ldr.w	ip, [pc, #104]	; 266ec <isr+0x114>
	if (character == '"') {
   26686:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   26688:	f80c 2007 	strb.w	r2, [ip, r7]
	at_cmd_len++;
   2668c:	6028      	str	r0, [r5, #0]
	if (character == '"') {
   2668e:	d1ae      	bne.n	265ee <isr+0x16>
	if (!inside_quotes) {
   26690:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   26694:	700b      	strb	r3, [r1, #0]
   26696:	e7aa      	b.n	265ee <isr+0x16>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   26698:	2200      	movs	r2, #0
   2669a:	4b14      	ldr	r3, [pc, #80]	; (266ec <isr+0x114>)
	inside_quotes = false;
   2669c:	700a      	strb	r2, [r1, #0]
   2669e:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   266a0:	6828      	ldr	r0, [r5, #0]
	at_cmd_len = 0;
   266a2:	602a      	str	r2, [r5, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   266a4:	541a      	strb	r2, [r3, r0]
		if (*c > ' ') {
   266a6:	f813 2b01 	ldrb.w	r2, [r3], #1
   266aa:	2a20      	cmp	r2, #32
   266ac:	d802      	bhi.n	266b4 <isr+0xdc>
		} else if (*c == '\0') {
   266ae:	2a00      	cmp	r2, #0
   266b0:	d1f9      	bne.n	266a6 <isr+0xce>
   266b2:	e79c      	b.n	265ee <isr+0x16>
	if (at_buf[0]) {
   266b4:	780b      	ldrb	r3, [r1, #0]
   266b6:	2b00      	cmp	r3, #0
   266b8:	d099      	beq.n	265ee <isr+0x16>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   266ba:	4b0d      	ldr	r3, [pc, #52]	; (266f0 <isr+0x118>)
   266bc:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable != NULL) {
   266be:	6883      	ldr	r3, [r0, #8]
   266c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   266c2:	b103      	cbz	r3, 266c6 <isr+0xee>
		api->irq_rx_disable(dev);
   266c4:	4798      	blx	r3
		at_buf_busy = true;
   266c6:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   266c8:	490a      	ldr	r1, [pc, #40]	; (266f4 <isr+0x11c>)
   266ca:	480b      	ldr	r0, [pc, #44]	; (266f8 <isr+0x120>)
		at_buf_busy = true;
   266cc:	7033      	strb	r3, [r6, #0]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   266ce:	f010 fe19 	bl	37304 <k_work_submit_to_queue>
   266d2:	e78c      	b.n	265ee <isr+0x16>
   266d4:	2001b658 	.word	0x2001b658
   266d8:	200193d4 	.word	0x200193d4
   266dc:	2001b659 	.word	0x2001b659
   266e0:	2001b65a 	.word	0x2001b65a
   266e4:	000451d3 	.word	0x000451d3
   266e8:	00045204 	.word	0x00045204
   266ec:	2001a658 	.word	0x2001a658
   266f0:	200193e8 	.word	0x200193e8
   266f4:	200193d8 	.word	0x200193d8
   266f8:	200153f0 	.word	0x200153f0

000266fc <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   266fc:	4b06      	ldr	r3, [pc, #24]	; (26718 <is_valid_notification_char+0x1c>)
   266fe:	5cc3      	ldrb	r3, [r0, r3]
   26700:	f003 0303 	and.w	r3, r3, #3
   26704:	2b02      	cmp	r3, #2
   26706:	bf08      	it	eq
   26708:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   2670a:	3841      	subs	r0, #65	; 0x41
   2670c:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   2670e:	2819      	cmp	r0, #25
   26710:	bf8c      	ite	hi
   26712:	2000      	movhi	r0, #0
   26714:	2001      	movls	r0, #1
   26716:	4770      	bx	lr
   26718:	0004bd43 	.word	0x0004bd43

0002671c <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   2671c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2671e:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   26720:	2400      	movs	r4, #0
   26722:	4e0a      	ldr	r6, [pc, #40]	; (2674c <is_result+0x30>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   26724:	f856 1b04 	ldr.w	r1, [r6], #4
   26728:	4608      	mov	r0, r1
   2672a:	9101      	str	r1, [sp, #4]
   2672c:	f7f6 fd89 	bl	1d242 <strlen>
   26730:	9901      	ldr	r1, [sp, #4]
   26732:	4602      	mov	r2, r0
   26734:	4628      	mov	r0, r5
   26736:	f01b f850 	bl	417da <strncmp>
		if (!diff) {
   2673a:	b128      	cbz	r0, 26748 <is_result+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   2673c:	3401      	adds	r4, #1
   2673e:	2c04      	cmp	r4, #4
   26740:	d1f0      	bne.n	26724 <is_result+0x8>
			return true;
		}
	}

	return false;
   26742:	2000      	movs	r0, #0
}
   26744:	b002      	add	sp, #8
   26746:	bd70      	pop	{r4, r5, r6, pc}
			return true;
   26748:	2001      	movs	r0, #1
   2674a:	e7fb      	b.n	26744 <is_result+0x28>
   2674c:	00042cc8 	.word	0x00042cc8

00026750 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   26750:	b510      	push	{r4, lr}
   26752:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   26754:	f7f6 fd75 	bl	1d242 <strlen>
   26758:	2801      	cmp	r0, #1
   2675a:	d921      	bls.n	267a0 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   2675c:	7823      	ldrb	r3, [r4, #0]
   2675e:	4912      	ldr	r1, [pc, #72]	; (267a8 <is_command+0x58>)
   26760:	5c5a      	ldrb	r2, [r3, r1]
   26762:	f002 0203 	and.w	r2, r2, #3
   26766:	2a02      	cmp	r2, #2
   26768:	bf08      	it	eq
   2676a:	3b20      	subeq	r3, #32
   2676c:	2b41      	cmp	r3, #65	; 0x41
   2676e:	d117      	bne.n	267a0 <is_command+0x50>
   26770:	7863      	ldrb	r3, [r4, #1]
   26772:	5cca      	ldrb	r2, [r1, r3]
   26774:	f002 0203 	and.w	r2, r2, #3
   26778:	2a02      	cmp	r2, #2
   2677a:	bf08      	it	eq
   2677c:	3b20      	subeq	r3, #32
   2677e:	2b54      	cmp	r3, #84	; 0x54
   26780:	d10e      	bne.n	267a0 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26782:	78a2      	ldrb	r2, [r4, #2]
   26784:	2a25      	cmp	r2, #37	; 0x25
   26786:	d00d      	beq.n	267a4 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   26788:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   2678c:	2b23      	cmp	r3, #35	; 0x23
   2678e:	d009      	beq.n	267a4 <is_command+0x54>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   26790:	4610      	mov	r0, r2
   26792:	f018 fcdc 	bl	3f14e <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   26796:	b910      	cbnz	r0, 2679e <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26798:	fab2 f082 	clz	r0, r2
   2679c:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   2679e:	bd10      	pop	{r4, pc}
		return false;
   267a0:	2000      	movs	r0, #0
   267a2:	e7fc      	b.n	2679e <is_command+0x4e>
		return true;
   267a4:	2001      	movs	r0, #1
   267a6:	e7fa      	b.n	2679e <is_command+0x4e>
   267a8:	0004bd43 	.word	0x0004bd43

000267ac <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   267ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   267b0:	6805      	ldr	r5, [r0, #0]
{
   267b2:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   267b4:	9500      	str	r5, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   267b6:	782b      	ldrb	r3, [r5, #0]
{
   267b8:	4680      	mov	r8, r0
   267ba:	460f      	mov	r7, r1
   267bc:	4616      	mov	r6, r2
   267be:	2b00      	cmp	r3, #0
   267c0:	f000 80ca 	beq.w	26958 <at_parse_process_element+0x1ac>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   267c4:	4b66      	ldr	r3, [pc, #408]	; (26960 <at_parse_process_element+0x1b4>)
   267c6:	781c      	ldrb	r4, [r3, #0]
   267c8:	2c06      	cmp	r4, #6
   267ca:	d110      	bne.n	267ee <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   267cc:	1c6b      	adds	r3, r5, #1
   267ce:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   267d0:	9a00      	ldr	r2, [sp, #0]
   267d2:	7810      	ldrb	r0, [r2, #0]
   267d4:	f7ff ff92 	bl	266fc <is_valid_notification_char>
   267d8:	b930      	cbnz	r0, 267e8 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   267da:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   267dc:	462a      	mov	r2, r5
   267de:	4639      	mov	r1, r7
   267e0:	4630      	mov	r0, r6
   267e2:	f018 fd1d 	bl	3f220 <at_params_string_put>
   267e6:	e01c      	b.n	26822 <at_parse_process_element+0x76>
			tmpstr++;
   267e8:	3201      	adds	r2, #1
   267ea:	9200      	str	r2, [sp, #0]
   267ec:	e7f0      	b.n	267d0 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   267ee:	2c07      	cmp	r4, #7
   267f0:	d125      	bne.n	2683e <at_parse_process_element+0x92>
		skip_command_prefix(&tmpstr);
   267f2:	4668      	mov	r0, sp
   267f4:	f018 fcb4 	bl	3f160 <skip_command_prefix>
	if (isalpha((int)chr) || isdigit((int)chr)) {
   267f8:	4a5a      	ldr	r2, [pc, #360]	; (26964 <at_parse_process_element+0x1b8>)
		while (is_valid_command_char(*tmpstr)) {
   267fa:	9b00      	ldr	r3, [sp, #0]
   267fc:	7819      	ldrb	r1, [r3, #0]
   267fe:	5c89      	ldrb	r1, [r1, r2]
   26800:	0749      	lsls	r1, r1, #29
   26802:	d115      	bne.n	26830 <at_parse_process_element+0x84>
		at_params_string_put(list, index, start_ptr,
   26804:	462a      	mov	r2, r5
   26806:	1b5b      	subs	r3, r3, r5
   26808:	4639      	mov	r1, r7
   2680a:	4630      	mov	r0, r6
   2680c:	f018 fd08 	bl	3f220 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   26810:	9b00      	ldr	r3, [sp, #0]
   26812:	781a      	ldrb	r2, [r3, #0]
   26814:	2a3d      	cmp	r2, #61	; 0x3d
   26816:	d10e      	bne.n	26836 <at_parse_process_element+0x8a>
   26818:	785a      	ldrb	r2, [r3, #1]
   2681a:	2a3f      	cmp	r2, #63	; 0x3f
   2681c:	d101      	bne.n	26822 <at_parse_process_element+0x76>
			tmpstr += 2;
   2681e:	3302      	adds	r3, #2
			tmpstr++;
   26820:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   26822:	2000      	movs	r0, #0
	*str = tmpstr;
   26824:	9b00      	ldr	r3, [sp, #0]
   26826:	f8c8 3000 	str.w	r3, [r8]
}
   2682a:	b023      	add	sp, #140	; 0x8c
   2682c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   26830:	3301      	adds	r3, #1
   26832:	9300      	str	r3, [sp, #0]
   26834:	e7e1      	b.n	267fa <at_parse_process_element+0x4e>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   26836:	2a3f      	cmp	r2, #63	; 0x3f
   26838:	d1f3      	bne.n	26822 <at_parse_process_element+0x76>
			tmpstr++;
   2683a:	3301      	adds	r3, #1
   2683c:	e7f0      	b.n	26820 <at_parse_process_element+0x74>
	} else if (state == OPTIONAL) {
   2683e:	2c08      	cmp	r4, #8
   26840:	d103      	bne.n	2684a <at_parse_process_element+0x9e>
		at_params_empty_put(list, index);
   26842:	4610      	mov	r0, r2
   26844:	f018 fcbe 	bl	3f1c4 <at_params_empty_put>
   26848:	e7eb      	b.n	26822 <at_parse_process_element+0x76>
	} else if (state == STRING) {
   2684a:	2c02      	cmp	r4, #2
   2684c:	d111      	bne.n	26872 <at_parse_process_element+0xc6>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   2684e:	9a00      	ldr	r2, [sp, #0]
   26850:	7811      	ldrb	r1, [r2, #0]
   26852:	4608      	mov	r0, r1
   26854:	f018 fc7b 	bl	3f14e <is_lfcr>
   26858:	b918      	cbnz	r0, 26862 <at_parse_process_element+0xb6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2685a:	b111      	cbz	r1, 26862 <at_parse_process_element+0xb6>
			tmpstr++;
   2685c:	3201      	adds	r2, #1
   2685e:	9200      	str	r2, [sp, #0]
   26860:	e7f5      	b.n	2684e <at_parse_process_element+0xa2>
		at_params_string_put(list, index, start_ptr,
   26862:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   26864:	462a      	mov	r2, r5
   26866:	4639      	mov	r1, r7
   26868:	4630      	mov	r0, r6
   2686a:	f018 fcd9 	bl	3f220 <at_params_string_put>
		tmpstr++;
   2686e:	9b00      	ldr	r3, [sp, #0]
   26870:	e7e3      	b.n	2683a <at_parse_process_element+0x8e>
	} else if (state == QUOTED_STRING) {
   26872:	2c03      	cmp	r4, #3
   26874:	d109      	bne.n	2688a <at_parse_process_element+0xde>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   26876:	9b00      	ldr	r3, [sp, #0]
   26878:	781a      	ldrb	r2, [r3, #0]
	if (chr == '"') {
   2687a:	2a22      	cmp	r2, #34	; 0x22
   2687c:	d003      	beq.n	26886 <at_parse_process_element+0xda>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2687e:	b112      	cbz	r2, 26886 <at_parse_process_element+0xda>
			tmpstr++;
   26880:	3301      	adds	r3, #1
   26882:	9300      	str	r3, [sp, #0]
   26884:	e7f7      	b.n	26876 <at_parse_process_element+0xca>
		at_params_string_put(list, index, start_ptr,
   26886:	1b5b      	subs	r3, r3, r5
   26888:	e7ec      	b.n	26864 <at_parse_process_element+0xb8>
	} else if (state == ARRAY) {
   2688a:	2c01      	cmp	r4, #1
   2688c:	d13c      	bne.n	26908 <at_parse_process_element+0x15c>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2688e:	4628      	mov	r0, r5
   26890:	220a      	movs	r2, #10
   26892:	a901      	add	r1, sp, #4
   26894:	f014 f910 	bl	3aab8 <strtoul>
		tmpstr = next;
   26898:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2689a:	4d33      	ldr	r5, [pc, #204]	; (26968 <at_parse_process_element+0x1bc>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2689c:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   2689e:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   268a0:	9800      	ldr	r0, [sp, #0]
   268a2:	7803      	ldrb	r3, [r0, #0]
	if (chr == ')') {
   268a4:	2b29      	cmp	r3, #41	; 0x29
   268a6:	d01f      	beq.n	268e8 <at_parse_process_element+0x13c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   268a8:	b1f3      	cbz	r3, 268e8 <at_parse_process_element+0x13c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   268aa:	3b2c      	subs	r3, #44	; 0x2c
   268ac:	b2db      	uxtb	r3, r3
   268ae:	3001      	adds	r0, #1
   268b0:	2b11      	cmp	r3, #17
				tmparray[i++] =
   268b2:	9000      	str	r0, [sp, #0]
   268b4:	d826      	bhi.n	26904 <at_parse_process_element+0x158>
   268b6:	fa25 f303 	lsr.w	r3, r5, r3
   268ba:	07db      	lsls	r3, r3, #31
   268bc:	d522      	bpl.n	26904 <at_parse_process_element+0x158>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   268be:	220a      	movs	r2, #10
   268c0:	a901      	add	r1, sp, #4
   268c2:	f014 f8f9 	bl	3aab8 <strtoul>
				tmparray[i++] =
   268c6:	ab22      	add	r3, sp, #136	; 0x88
   268c8:	f104 0901 	add.w	r9, r4, #1
   268cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   268d0:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   268d4:	9800      	ldr	r0, [sp, #0]
   268d6:	f7f6 fcb4 	bl	1d242 <strlen>
   268da:	4604      	mov	r4, r0
   268dc:	9801      	ldr	r0, [sp, #4]
   268de:	f7f6 fcb0 	bl	1d242 <strlen>
   268e2:	4284      	cmp	r4, r0
   268e4:	d107      	bne.n	268f6 <at_parse_process_element+0x14a>
				tmparray[i++] =
   268e6:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   268e8:	4639      	mov	r1, r7
   268ea:	4630      	mov	r0, r6
   268ec:	00a3      	lsls	r3, r4, #2
   268ee:	aa02      	add	r2, sp, #8
   268f0:	f018 fcbc 	bl	3f26c <at_params_array_put>
		tmpstr++;
   268f4:	e7bb      	b.n	2686e <at_parse_process_element+0xc2>
					tmpstr = next;
   268f6:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   268f8:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   268fc:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   268fe:	d0f2      	beq.n	268e6 <at_parse_process_element+0x13a>
				tmpstr++;
   26900:	464c      	mov	r4, r9
   26902:	e7cd      	b.n	268a0 <at_parse_process_element+0xf4>
   26904:	46a1      	mov	r9, r4
   26906:	e7fb      	b.n	26900 <at_parse_process_element+0x154>
	} else if (state == NUMBER) {
   26908:	2c04      	cmp	r4, #4
   2690a:	d10d      	bne.n	26928 <at_parse_process_element+0x17c>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   2690c:	220a      	movs	r2, #10
   2690e:	4628      	mov	r0, r5
   26910:	a902      	add	r1, sp, #8
   26912:	f014 f855 	bl	3a9c0 <strtoll>
   26916:	460b      	mov	r3, r1
		tmpstr = next;
   26918:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   2691a:	4602      	mov	r2, r0
		tmpstr = next;
   2691c:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   2691e:	4630      	mov	r0, r6
   26920:	4639      	mov	r1, r7
   26922:	f018 fc66 	bl	3f1f2 <at_params_int_put>
   26926:	e77c      	b.n	26822 <at_parse_process_element+0x76>
	} else if (state == SMS_PDU) {
   26928:	2c05      	cmp	r4, #5
   2692a:	d10b      	bne.n	26944 <at_parse_process_element+0x198>
		while (isxdigit((int)*tmpstr)) {
   2692c:	490d      	ldr	r1, [pc, #52]	; (26964 <at_parse_process_element+0x1b8>)
   2692e:	9b00      	ldr	r3, [sp, #0]
   26930:	781a      	ldrb	r2, [r3, #0]
   26932:	5c52      	ldrb	r2, [r2, r1]
   26934:	f012 0f44 	tst.w	r2, #68	; 0x44
   26938:	d101      	bne.n	2693e <at_parse_process_element+0x192>
		at_params_string_put(list, index, start_ptr,
   2693a:	1b5b      	subs	r3, r3, r5
   2693c:	e74e      	b.n	267dc <at_parse_process_element+0x30>
			tmpstr++;
   2693e:	3301      	adds	r3, #1
   26940:	9300      	str	r3, [sp, #0]
   26942:	e7f4      	b.n	2692e <at_parse_process_element+0x182>
	} else if (state == CLAC) {
   26944:	2c09      	cmp	r4, #9
   26946:	f47f af6c 	bne.w	26822 <at_parse_process_element+0x76>
		while (!is_terminated(*tmpstr)) {
   2694a:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2694c:	781a      	ldrb	r2, [r3, #0]
   2694e:	2a00      	cmp	r2, #0
   26950:	d0f3      	beq.n	2693a <at_parse_process_element+0x18e>
			tmpstr++;
   26952:	3301      	adds	r3, #1
   26954:	9300      	str	r3, [sp, #0]
   26956:	e7f8      	b.n	2694a <at_parse_process_element+0x19e>
		return -1;
   26958:	f04f 30ff 	mov.w	r0, #4294967295
   2695c:	e765      	b.n	2682a <at_parse_process_element+0x7e>
   2695e:	bf00      	nop
   26960:	2001b65c 	.word	0x2001b65c
   26964:	0004bd43 	.word	0x0004bd43
   26968:	00024001 	.word	0x00024001

0002696c <at_parse_detect_type>:
{
   2696c:	b570      	push	{r4, r5, r6, lr}
   2696e:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   26970:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   26972:	4e64      	ldr	r6, [pc, #400]	; (26b04 <at_parse_detect_type+0x198>)
   26974:	2900      	cmp	r1, #0
   26976:	d137      	bne.n	269e8 <at_parse_detect_type+0x7c>
   26978:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2697a:	2b2b      	cmp	r3, #43	; 0x2b
   2697c:	d001      	beq.n	26982 <at_parse_detect_type+0x16>
   2697e:	2b25      	cmp	r3, #37	; 0x25
   26980:	d132      	bne.n	269e8 <at_parse_detect_type+0x7c>
	state = new_state;
   26982:	2206      	movs	r2, #6
   26984:	4b60      	ldr	r3, [pc, #384]	; (26b08 <at_parse_detect_type+0x19c>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   26986:	4620      	mov	r0, r4
	state = new_state;
   26988:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   2698a:	4960      	ldr	r1, [pc, #384]	; (26b0c <at_parse_detect_type+0x1a0>)
   2698c:	2205      	movs	r2, #5
   2698e:	f01a ff24 	bl	417da <strncmp>
   26992:	b920      	cbnz	r0, 2699e <at_parse_detect_type+0x32>
			retval = true;
   26994:	2001      	movs	r0, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   26996:	7030      	strb	r0, [r6, #0]
	return 0;
   26998:	2000      	movs	r0, #0
	*str = tmpstr;
   2699a:	602c      	str	r4, [r5, #0]
	return 0;
   2699c:	e064      	b.n	26a68 <at_parse_detect_type+0xfc>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   2699e:	2205      	movs	r2, #5
   269a0:	4620      	mov	r0, r4
   269a2:	495b      	ldr	r1, [pc, #364]	; (26b10 <at_parse_detect_type+0x1a4>)
   269a4:	f01a ff19 	bl	417da <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   269a8:	2800      	cmp	r0, #0
   269aa:	d0f3      	beq.n	26994 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   269ac:	220b      	movs	r2, #11
   269ae:	4620      	mov	r0, r4
   269b0:	4958      	ldr	r1, [pc, #352]	; (26b14 <at_parse_detect_type+0x1a8>)
   269b2:	f01a ff12 	bl	417da <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   269b6:	2800      	cmp	r0, #0
   269b8:	d0ec      	beq.n	26994 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   269ba:	220a      	movs	r2, #10
   269bc:	4620      	mov	r0, r4
   269be:	4956      	ldr	r1, [pc, #344]	; (26b18 <at_parse_detect_type+0x1ac>)
   269c0:	f01a ff0b 	bl	417da <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   269c4:	2800      	cmp	r0, #0
   269c6:	d0e5      	beq.n	26994 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   269c8:	220b      	movs	r2, #11
   269ca:	4620      	mov	r0, r4
   269cc:	4953      	ldr	r1, [pc, #332]	; (26b1c <at_parse_detect_type+0x1b0>)
   269ce:	f01a ff04 	bl	417da <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   269d2:	2800      	cmp	r0, #0
   269d4:	d0de      	beq.n	26994 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   269d6:	2207      	movs	r2, #7
   269d8:	4620      	mov	r0, r4
   269da:	4951      	ldr	r1, [pc, #324]	; (26b20 <at_parse_detect_type+0x1b4>)
   269dc:	f01a fefd 	bl	417da <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   269e0:	fab0 f080 	clz	r0, r0
   269e4:	0940      	lsrs	r0, r0, #5
   269e6:	e7d6      	b.n	26996 <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   269e8:	7833      	ldrb	r3, [r6, #0]
   269ea:	b113      	cbz	r3, 269f2 <at_parse_detect_type+0x86>
	state = new_state;
   269ec:	4b46      	ldr	r3, [pc, #280]	; (26b08 <at_parse_detect_type+0x19c>)
   269ee:	2202      	movs	r2, #2
   269f0:	e043      	b.n	26a7a <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_clac(tmpstr)) {
   269f2:	2900      	cmp	r1, #0
   269f4:	dd39      	ble.n	26a6a <at_parse_detect_type+0xfe>
   269f6:	4622      	mov	r2, r4
   269f8:	4616      	mov	r6, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   269fa:	f812 0b01 	ldrb.w	r0, [r2], #1
   269fe:	f018 fba6 	bl	3f14e <is_lfcr>
   26a02:	2800      	cmp	r0, #0
   26a04:	d1f8      	bne.n	269f8 <at_parse_detect_type+0x8c>
		str++;
	}

	if (strlen(str) < 4) {
   26a06:	4630      	mov	r0, r6
   26a08:	f7f6 fc1b 	bl	1d242 <strlen>
   26a0c:	2803      	cmp	r0, #3
   26a0e:	d970      	bls.n	26af2 <at_parse_detect_type+0x186>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   26a10:	7833      	ldrb	r3, [r6, #0]
   26a12:	4a44      	ldr	r2, [pc, #272]	; (26b24 <at_parse_detect_type+0x1b8>)
   26a14:	5c99      	ldrb	r1, [r3, r2]
   26a16:	f001 0103 	and.w	r1, r1, #3
   26a1a:	2902      	cmp	r1, #2
   26a1c:	bf08      	it	eq
   26a1e:	3b20      	subeq	r3, #32
   26a20:	2b41      	cmp	r3, #65	; 0x41
   26a22:	d166      	bne.n	26af2 <at_parse_detect_type+0x186>
   26a24:	7873      	ldrb	r3, [r6, #1]
   26a26:	5cd1      	ldrb	r1, [r2, r3]
   26a28:	f001 0103 	and.w	r1, r1, #3
   26a2c:	2902      	cmp	r1, #2
   26a2e:	bf08      	it	eq
   26a30:	3b20      	subeq	r3, #32
   26a32:	2b54      	cmp	r3, #84	; 0x54
   26a34:	d15d      	bne.n	26af2 <at_parse_detect_type+0x186>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   26a36:	78b3      	ldrb	r3, [r6, #2]
   26a38:	5cd1      	ldrb	r1, [r2, r3]
   26a3a:	f001 0103 	and.w	r1, r1, #3
   26a3e:	2902      	cmp	r1, #2
   26a40:	bf08      	it	eq
   26a42:	3b20      	subeq	r3, #32
   26a44:	2b2b      	cmp	r3, #43	; 0x2b
   26a46:	d00a      	beq.n	26a5e <at_parse_detect_type+0xf2>
   26a48:	2b25      	cmp	r3, #37	; 0x25
   26a4a:	d152      	bne.n	26af2 <at_parse_detect_type+0x186>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   26a4c:	78f3      	ldrb	r3, [r6, #3]
   26a4e:	5cd2      	ldrb	r2, [r2, r3]
   26a50:	f002 0203 	and.w	r2, r2, #3
   26a54:	2a02      	cmp	r2, #2
   26a56:	bf08      	it	eq
   26a58:	3b20      	subeq	r3, #32
   26a5a:	2b58      	cmp	r3, #88	; 0x58
   26a5c:	d049      	beq.n	26af2 <at_parse_detect_type+0x186>
	state = new_state;
   26a5e:	2209      	movs	r2, #9
		return -2;
   26a60:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   26a64:	4b28      	ldr	r3, [pc, #160]	; (26b08 <at_parse_detect_type+0x19c>)
   26a66:	701a      	strb	r2, [r3, #0]
}
   26a68:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   26a6a:	d108      	bne.n	26a7e <at_parse_detect_type+0x112>
   26a6c:	4620      	mov	r0, r4
   26a6e:	f7ff fe6f 	bl	26750 <is_command>
   26a72:	4b25      	ldr	r3, [pc, #148]	; (26b08 <at_parse_detect_type+0x19c>)
   26a74:	2800      	cmp	r0, #0
   26a76:	d0ba      	beq.n	269ee <at_parse_detect_type+0x82>
	state = new_state;
   26a78:	2207      	movs	r2, #7
   26a7a:	701a      	strb	r2, [r3, #0]
}
   26a7c:	e78c      	b.n	26998 <at_parse_detect_type+0x2c>
	} else if (is_number(*tmpstr)) {
   26a7e:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   26a80:	4b28      	ldr	r3, [pc, #160]	; (26b24 <at_parse_detect_type+0x1b8>)
   26a82:	5cd3      	ldrb	r3, [r2, r3]
   26a84:	0759      	lsls	r1, r3, #29
   26a86:	d403      	bmi.n	26a90 <at_parse_detect_type+0x124>
   26a88:	2a2d      	cmp	r2, #45	; 0x2d
   26a8a:	d001      	beq.n	26a90 <at_parse_detect_type+0x124>
   26a8c:	2a2b      	cmp	r2, #43	; 0x2b
   26a8e:	d102      	bne.n	26a96 <at_parse_detect_type+0x12a>
	state = new_state;
   26a90:	2204      	movs	r2, #4
   26a92:	4b1d      	ldr	r3, [pc, #116]	; (26b08 <at_parse_detect_type+0x19c>)
   26a94:	e7f1      	b.n	26a7a <at_parse_detect_type+0x10e>
	if (chr == '"') {
   26a96:	2a22      	cmp	r2, #34	; 0x22
   26a98:	d006      	beq.n	26aa8 <at_parse_detect_type+0x13c>
	if (chr == '(') {
   26a9a:	2a28      	cmp	r2, #40	; 0x28
   26a9c:	d109      	bne.n	26ab2 <at_parse_detect_type+0x146>
   26a9e:	2201      	movs	r2, #1
   26aa0:	4b19      	ldr	r3, [pc, #100]	; (26b08 <at_parse_detect_type+0x19c>)
		tmpstr++;
   26aa2:	4414      	add	r4, r2
	state = new_state;
   26aa4:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   26aa6:	e777      	b.n	26998 <at_parse_detect_type+0x2c>
	state = new_state;
   26aa8:	2203      	movs	r2, #3
   26aaa:	4b17      	ldr	r3, [pc, #92]	; (26b08 <at_parse_detect_type+0x19c>)
		tmpstr++;
   26aac:	3401      	adds	r4, #1
	state = new_state;
   26aae:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   26ab0:	e772      	b.n	26998 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   26ab2:	4610      	mov	r0, r2
   26ab4:	f018 fb4b 	bl	3f14e <is_lfcr>
   26ab8:	b178      	cbz	r0, 26ada <at_parse_detect_type+0x16e>
   26aba:	4913      	ldr	r1, [pc, #76]	; (26b08 <at_parse_detect_type+0x19c>)
   26abc:	780b      	ldrb	r3, [r1, #0]
   26abe:	2b04      	cmp	r3, #4
   26ac0:	d108      	bne.n	26ad4 <at_parse_detect_type+0x168>
		while (is_lfcr(*tmpstr)) {
   26ac2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   26ac6:	f018 fb42 	bl	3f14e <is_lfcr>
   26aca:	2800      	cmp	r0, #0
   26acc:	d1f9      	bne.n	26ac2 <at_parse_detect_type+0x156>
	state = new_state;
   26ace:	2305      	movs	r3, #5
   26ad0:	700b      	strb	r3, [r1, #0]
}
   26ad2:	e761      	b.n	26998 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   26ad4:	2b08      	cmp	r3, #8
   26ad6:	f43f af5f 	beq.w	26998 <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26ada:	3a2c      	subs	r2, #44	; 0x2c
   26adc:	b2d2      	uxtb	r2, r2
   26ade:	2a11      	cmp	r2, #17
   26ae0:	d80c      	bhi.n	26afc <at_parse_detect_type+0x190>
   26ae2:	4b11      	ldr	r3, [pc, #68]	; (26b28 <at_parse_detect_type+0x1bc>)
   26ae4:	fa23 f202 	lsr.w	r2, r3, r2
   26ae8:	07d3      	lsls	r3, r2, #31
   26aea:	d507      	bpl.n	26afc <at_parse_detect_type+0x190>
	state = new_state;
   26aec:	2208      	movs	r2, #8
   26aee:	4b06      	ldr	r3, [pc, #24]	; (26b08 <at_parse_detect_type+0x19c>)
   26af0:	e7c3      	b.n	26a7a <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   26af2:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26af4:	2b2b      	cmp	r3, #43	; 0x2b
   26af6:	d001      	beq.n	26afc <at_parse_detect_type+0x190>
   26af8:	2b25      	cmp	r3, #37	; 0x25
   26afa:	d1c0      	bne.n	26a7e <at_parse_detect_type+0x112>
		return -1;
   26afc:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   26b00:	602c      	str	r4, [r5, #0]
		return -1;
   26b02:	e7b1      	b.n	26a68 <at_parse_detect_type+0xfc>
   26b04:	2001b65b 	.word	0x2001b65b
   26b08:	2001b65c 	.word	0x2001b65c
   26b0c:	00045231 	.word	0x00045231
   26b10:	00045237 	.word	0x00045237
   26b14:	0004523d 	.word	0x0004523d
   26b18:	00045249 	.word	0x00045249
   26b1c:	00045254 	.word	0x00045254
   26b20:	00045260 	.word	0x00045260
   26b24:	0004bd43 	.word	0x0004bd43
   26b28:	00024001 	.word	0x00024001

00026b2c <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   26b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b30:	4689      	mov	r9, r1
   26b32:	4616      	mov	r6, r2
   26b34:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   26b36:	4680      	mov	r8, r0
{
   26b38:	b085      	sub	sp, #20
	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   26b3a:	2800      	cmp	r0, #0
   26b3c:	f000 8097 	beq.w	26c6e <at_parser_max_params_from_str+0x142>
   26b40:	2a00      	cmp	r2, #0
   26b42:	f000 8094 	beq.w	26c6e <at_parser_max_params_from_str+0x142>
   26b46:	6853      	ldr	r3, [r2, #4]
   26b48:	2b00      	cmp	r3, #0
   26b4a:	f000 8090 	beq.w	26c6e <at_parser_max_params_from_str+0x142>
	state = IDLE;
   26b4e:	2500      	movs	r5, #0
	int index = 0;
   26b50:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   26b52:	4610      	mov	r0, r2
   26b54:	f000 f8e8 	bl	26d28 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   26b58:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   26b5a:	f8cd 800c 	str.w	r8, [sp, #12]
	max_params_count = MIN(max_params_count, list->param_count);
   26b5e:	429f      	cmp	r7, r3
   26b60:	bf28      	it	cs
   26b62:	461f      	movcs	r7, r3
	state = IDLE;
   26b64:	4b43      	ldr	r3, [pc, #268]	; (26c74 <at_parser_max_params_from_str+0x148>)
   26b66:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   26b68:	4b43      	ldr	r3, [pc, #268]	; (26c78 <at_parser_max_params_from_str+0x14c>)
   26b6a:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   26b6c:	9b03      	ldr	r3, [sp, #12]
   26b6e:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26b70:	2a00      	cmp	r2, #0
   26b72:	d055      	beq.n	26c20 <at_parser_max_params_from_str+0xf4>
   26b74:	42a7      	cmp	r7, r4
   26b76:	d953      	bls.n	26c20 <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
   26b78:	4940      	ldr	r1, [pc, #256]	; (26c7c <at_parser_max_params_from_str+0x150>)
		ret = at_parse_detect_type(&str, index);
   26b7a:	a803      	add	r0, sp, #12
		if (isspace((int)*str)) {
   26b7c:	5c52      	ldrb	r2, [r2, r1]
   26b7e:	0711      	lsls	r1, r2, #28
			str++;
   26b80:	bf48      	it	mi
   26b82:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   26b84:	4621      	mov	r1, r4
			str++;
   26b86:	bf48      	it	mi
   26b88:	9303      	strmi	r3, [sp, #12]
		ret = at_parse_detect_type(&str, index);
   26b8a:	f7ff feef 	bl	2696c <at_parse_detect_type>
		if (ret == -1) {
   26b8e:	1c42      	adds	r2, r0, #1
   26b90:	d046      	beq.n	26c20 <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
   26b92:	3002      	adds	r0, #2
			index = 0;
   26b94:	bf08      	it	eq
   26b96:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   26b98:	4632      	mov	r2, r6
   26b9a:	4621      	mov	r1, r4
   26b9c:	a803      	add	r0, sp, #12
			str = *at_params_str;
   26b9e:	bf08      	it	eq
   26ba0:	f8cd 800c 	streq.w	r8, [sp, #12]
		if (at_parse_process_element(&str, index, list) == -1) {
   26ba4:	f7ff fe02 	bl	267ac <at_parse_process_element>
   26ba8:	3001      	adds	r0, #1
   26baa:	d039      	beq.n	26c20 <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
   26bac:	9a03      	ldr	r2, [sp, #12]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26bae:	7813      	ldrb	r3, [r2, #0]
   26bb0:	3b2c      	subs	r3, #44	; 0x2c
   26bb2:	b2db      	uxtb	r3, r3
   26bb4:	2b11      	cmp	r3, #17
   26bb6:	d81b      	bhi.n	26bf0 <at_parser_max_params_from_str+0xc4>
   26bb8:	4931      	ldr	r1, [pc, #196]	; (26c80 <at_parser_max_params_from_str+0x154>)
   26bba:	fa21 f303 	lsr.w	r3, r1, r3
   26bbe:	07db      	lsls	r3, r3, #31
   26bc0:	d516      	bpl.n	26bf0 <at_parser_max_params_from_str+0xc4>
			if (is_lfcr(*(str + 1))) {
   26bc2:	7850      	ldrb	r0, [r2, #1]
   26bc4:	f018 fac3 	bl	3f14e <is_lfcr>
   26bc8:	b178      	cbz	r0, 26bea <at_parser_max_params_from_str+0xbe>
				index++;
   26bca:	3401      	adds	r4, #1
				if (index == max_params) {
   26bcc:	42bc      	cmp	r4, r7
   26bce:	d046      	beq.n	26c5e <at_parser_max_params_from_str+0x132>
				if (at_parse_detect_type(&str, index) == -1) {
   26bd0:	4621      	mov	r1, r4
   26bd2:	a803      	add	r0, sp, #12
   26bd4:	f7ff feca 	bl	2696c <at_parse_detect_type>
   26bd8:	3001      	adds	r0, #1
   26bda:	d021      	beq.n	26c20 <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
   26bdc:	4632      	mov	r2, r6
   26bde:	4621      	mov	r1, r4
   26be0:	a803      	add	r0, sp, #12
   26be2:	f7ff fde3 	bl	267ac <at_parse_process_element>
   26be6:	3001      	adds	r0, #1
   26be8:	d01a      	beq.n	26c20 <at_parser_max_params_from_str+0xf4>
			str++;
   26bea:	9b03      	ldr	r3, [sp, #12]
   26bec:	3301      	adds	r3, #1
   26bee:	9303      	str	r3, [sp, #12]
		if (is_lfcr(*str)) {
   26bf0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   26bf4:	f89b 0000 	ldrb.w	r0, [fp]
   26bf8:	f018 faa9 	bl	3f14e <is_lfcr>
   26bfc:	b350      	cbz	r0, 26c54 <at_parser_max_params_from_str+0x128>
   26bfe:	f10b 0101 	add.w	r1, fp, #1
			while (is_lfcr(str[++i])) {
   26c02:	9101      	str	r1, [sp, #4]
   26c04:	eba1 0a0b 	sub.w	sl, r1, fp
   26c08:	f811 2b01 	ldrb.w	r2, [r1], #1
   26c0c:	4610      	mov	r0, r2
   26c0e:	f018 fa9e 	bl	3f14e <is_lfcr>
   26c12:	9b01      	ldr	r3, [sp, #4]
   26c14:	2800      	cmp	r0, #0
   26c16:	d1f4      	bne.n	26c02 <at_parser_max_params_from_str+0xd6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26c18:	b99a      	cbnz	r2, 26c42 <at_parser_max_params_from_str+0x116>
				str += i;
   26c1a:	9b03      	ldr	r3, [sp, #12]
   26c1c:	4453      	add	r3, sl
   26c1e:	9303      	str	r3, [sp, #12]
	*at_params_str = str;
   26c20:	9c03      	ldr	r4, [sp, #12]
	if (oversized) {
   26c22:	b9f5      	cbnz	r5, 26c62 <at_parser_max_params_from_str+0x136>
   26c24:	7823      	ldrb	r3, [r4, #0]
   26c26:	b11b      	cbz	r3, 26c30 <at_parser_max_params_from_str+0x104>
	if (!is_terminated(*str) && !is_result(str)) {
   26c28:	4620      	mov	r0, r4
   26c2a:	f7ff fd77 	bl	2671c <is_result>
   26c2e:	b1d8      	cbz	r0, 26c68 <at_parser_max_params_from_str+0x13c>
	return 0;
   26c30:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   26c32:	f1b9 0f00 	cmp.w	r9, #0
   26c36:	d001      	beq.n	26c3c <at_parser_max_params_from_str+0x110>
		*next_param_str = (char *)at_params_str;
   26c38:	f8c9 4000 	str.w	r4, [r9]
	}

	return err;
}
   26c3c:	b005      	add	sp, #20
   26c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26c42:	2a2b      	cmp	r2, #43	; 0x2b
   26c44:	d0e9      	beq.n	26c1a <at_parser_max_params_from_str+0xee>
   26c46:	2a25      	cmp	r2, #37	; 0x25
   26c48:	d0e7      	beq.n	26c1a <at_parser_max_params_from_str+0xee>
			    is_result(str + i)) {
   26c4a:	4618      	mov	r0, r3
   26c4c:	f7ff fd66 	bl	2671c <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   26c50:	2800      	cmp	r0, #0
   26c52:	d1e2      	bne.n	26c1a <at_parser_max_params_from_str+0xee>
		index++;
   26c54:	3401      	adds	r4, #1
			oversized = true;
   26c56:	42bc      	cmp	r4, r7
   26c58:	bf08      	it	eq
   26c5a:	2501      	moveq	r5, #1
   26c5c:	e786      	b.n	26b6c <at_parser_max_params_from_str+0x40>
					oversized = true;
   26c5e:	4605      	mov	r5, r0
   26c60:	e7de      	b.n	26c20 <at_parser_max_params_from_str+0xf4>
		return -E2BIG;
   26c62:	f06f 0006 	mvn.w	r0, #6
   26c66:	e7e4      	b.n	26c32 <at_parser_max_params_from_str+0x106>
		return -EAGAIN;
   26c68:	f06f 000a 	mvn.w	r0, #10
   26c6c:	e7e1      	b.n	26c32 <at_parser_max_params_from_str+0x106>
		return -EINVAL;
   26c6e:	f06f 0015 	mvn.w	r0, #21
   26c72:	e7e3      	b.n	26c3c <at_parser_max_params_from_str+0x110>
   26c74:	2001b65c 	.word	0x2001b65c
   26c78:	2001b65b 	.word	0x2001b65b
   26c7c:	0004bd43 	.word	0x0004bd43
   26c80:	00024001 	.word	0x00024001

00026c84 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   26c84:	b538      	push	{r3, r4, r5, lr}
   26c86:	460d      	mov	r5, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   26c88:	4604      	mov	r4, r0
   26c8a:	b940      	cbnz	r0, 26c9e <at_params_get+0x1a>
   26c8c:	4908      	ldr	r1, [pc, #32]	; (26cb0 <at_params_get+0x2c>)
   26c8e:	4809      	ldr	r0, [pc, #36]	; (26cb4 <at_params_get+0x30>)
   26c90:	222b      	movs	r2, #43	; 0x2b
   26c92:	f015 fefb 	bl	3ca8c <assert_print>
   26c96:	212b      	movs	r1, #43	; 0x2b
   26c98:	4805      	ldr	r0, [pc, #20]	; (26cb0 <at_params_get+0x2c>)
   26c9a:	f015 fef0 	bl	3ca7e <assert_post_action>

	if (index >= list->param_count) {
   26c9e:	6823      	ldr	r3, [r4, #0]
   26ca0:	42ab      	cmp	r3, r5
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   26ca2:	bf8a      	itet	hi
   26ca4:	6860      	ldrhi	r0, [r4, #4]
		return NULL;
   26ca6:	2000      	movls	r0, #0
	return &param[index];
   26ca8:	eb00 1005 	addhi.w	r0, r0, r5, lsl #4
}
   26cac:	bd38      	pop	{r3, r4, r5, pc}
   26cae:	bf00      	nop
   26cb0:	0004528b 	.word	0x0004528b
   26cb4:	0004409e 	.word	0x0004409e

00026cb8 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   26cb8:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26cba:	4604      	mov	r4, r0
   26cbc:	b940      	cbnz	r0, 26cd0 <at_param_size+0x18>
   26cbe:	490a      	ldr	r1, [pc, #40]	; (26ce8 <at_param_size+0x30>)
   26cc0:	480a      	ldr	r0, [pc, #40]	; (26cec <at_param_size+0x34>)
   26cc2:	2239      	movs	r2, #57	; 0x39
   26cc4:	f015 fee2 	bl	3ca8c <assert_print>
   26cc8:	2139      	movs	r1, #57	; 0x39
   26cca:	4807      	ldr	r0, [pc, #28]	; (26ce8 <at_param_size+0x30>)
   26ccc:	f015 fed7 	bl	3ca7e <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   26cd0:	7823      	ldrb	r3, [r4, #0]
   26cd2:	2b01      	cmp	r3, #1
   26cd4:	d004      	beq.n	26ce0 <at_param_size+0x28>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   26cd6:	3b02      	subs	r3, #2
   26cd8:	2b01      	cmp	r3, #1
   26cda:	d803      	bhi.n	26ce4 <at_param_size+0x2c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   26cdc:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   26cde:	bd10      	pop	{r4, pc}
		return sizeof(uint64_t);
   26ce0:	2008      	movs	r0, #8
   26ce2:	e7fc      	b.n	26cde <at_param_size+0x26>
	return 0;
   26ce4:	2000      	movs	r0, #0
   26ce6:	e7fa      	b.n	26cde <at_param_size+0x26>
   26ce8:	0004528b 	.word	0x0004528b
   26cec:	0004409e 	.word	0x0004409e

00026cf0 <at_param_clear>:
{
   26cf0:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26cf2:	4604      	mov	r4, r0
   26cf4:	b940      	cbnz	r0, 26d08 <at_param_clear+0x18>
   26cf6:	490a      	ldr	r1, [pc, #40]	; (26d20 <at_param_clear+0x30>)
   26cf8:	480a      	ldr	r0, [pc, #40]	; (26d24 <at_param_clear+0x34>)
   26cfa:	221d      	movs	r2, #29
   26cfc:	f015 fec6 	bl	3ca8c <assert_print>
   26d00:	211d      	movs	r1, #29
   26d02:	4807      	ldr	r0, [pc, #28]	; (26d20 <at_param_clear+0x30>)
   26d04:	f015 febb 	bl	3ca7e <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   26d08:	7823      	ldrb	r3, [r4, #0]
   26d0a:	3b02      	subs	r3, #2
   26d0c:	2b01      	cmp	r3, #1
   26d0e:	d802      	bhi.n	26d16 <at_param_clear+0x26>
		k_free(param->value.str_val);
   26d10:	68a0      	ldr	r0, [r4, #8]
   26d12:	f01a fade 	bl	412d2 <k_free>
	param->value.int_val = 0;
   26d16:	2200      	movs	r2, #0
   26d18:	2300      	movs	r3, #0
   26d1a:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   26d1e:	bd10      	pop	{r4, pc}
   26d20:	0004528b 	.word	0x0004528b
   26d24:	0004409e 	.word	0x0004409e

00026d28 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   26d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (list == NULL || list->params == NULL) {
   26d2c:	4604      	mov	r4, r0
   26d2e:	b140      	cbz	r0, 26d42 <at_params_list_clear+0x1a>
   26d30:	6843      	ldr	r3, [r0, #4]
   26d32:	b133      	cbz	r3, 26d42 <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   26d34:	2600      	movs	r6, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26d36:	4f0f      	ldr	r7, [pc, #60]	; (26d74 <at_params_list_clear+0x4c>)
   26d38:	f8df 803c 	ldr.w	r8, [pc, #60]	; 26d78 <at_params_list_clear+0x50>
	for (size_t i = 0; i < list->param_count; ++i) {
   26d3c:	6823      	ldr	r3, [r4, #0]
   26d3e:	429e      	cmp	r6, r3
   26d40:	d301      	bcc.n	26d46 <at_params_list_clear+0x1e>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   26d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		at_param_clear(&params[i]);
   26d46:	6865      	ldr	r5, [r4, #4]
   26d48:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   26d4c:	4628      	mov	r0, r5
   26d4e:	f7ff ffcf 	bl	26cf0 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26d52:	b945      	cbnz	r5, 26d66 <at_params_list_clear+0x3e>
   26d54:	4639      	mov	r1, r7
   26d56:	4640      	mov	r0, r8
   26d58:	2214      	movs	r2, #20
   26d5a:	f015 fe97 	bl	3ca8c <assert_print>
   26d5e:	2114      	movs	r1, #20
   26d60:	4638      	mov	r0, r7
   26d62:	f015 fe8c 	bl	3ca7e <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   26d66:	2210      	movs	r2, #16
   26d68:	2100      	movs	r1, #0
   26d6a:	4628      	mov	r0, r5
   26d6c:	f01a fb62 	bl	41434 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   26d70:	3601      	adds	r6, #1
   26d72:	e7e3      	b.n	26d3c <at_params_list_clear+0x14>
   26d74:	0004528b 	.word	0x0004528b
   26d78:	0004409e 	.word	0x0004409e

00026d7c <at_handler_cscon>:
		event_handler_list_dispatch(&evt);
	}
}

static void at_handler_cscon(const char *response)
{
   26d7c:	b510      	push	{r4, lr}
   26d7e:	4604      	mov	r4, r0
   26d80:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   26d82:	2240      	movs	r2, #64	; 0x40
   26d84:	2100      	movs	r1, #0
   26d86:	4668      	mov	r0, sp
   26d88:	f01a fb54 	bl	41434 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26d8c:	b954      	cbnz	r4, 26da4 <at_handler_cscon+0x28>
   26d8e:	490f      	ldr	r1, [pc, #60]	; (26dcc <at_handler_cscon+0x50>)
   26d90:	480f      	ldr	r0, [pc, #60]	; (26dd0 <at_handler_cscon+0x54>)
   26d92:	f240 120b 	movw	r2, #267	; 0x10b
   26d96:	f015 fe79 	bl	3ca8c <assert_print>
   26d9a:	f240 110b 	movw	r1, #267	; 0x10b
   26d9e:	480b      	ldr	r0, [pc, #44]	; (26dcc <at_handler_cscon+0x50>)
   26da0:	f015 fe6d 	bl	3ca7e <assert_post_action>

	LOG_DBG("+CSCON notification");

	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   26da4:	2201      	movs	r2, #1
   26da6:	4620      	mov	r0, r4
   26da8:	a902      	add	r1, sp, #8
   26daa:	f000 fe6f 	bl	27a8c <parse_rrc_mode>
	if (err) {
   26dae:	4602      	mov	r2, r0
   26db0:	b128      	cbz	r0, 26dbe <at_handler_cscon+0x42>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   26db2:	2145      	movs	r1, #69	; 0x45
   26db4:	4807      	ldr	r0, [pc, #28]	; (26dd4 <at_handler_cscon+0x58>)
   26db6:	f015 fea3 	bl	3cb00 <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_RRC_UPDATE;

	event_handler_list_dispatch(&evt);
}
   26dba:	b010      	add	sp, #64	; 0x40
   26dbc:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   26dbe:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   26dc0:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   26dc2:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   26dc6:	f000 fd95 	bl	278f4 <event_handler_list_dispatch>
   26dca:	e7f6      	b.n	26dba <at_handler_cscon+0x3e>
   26dcc:	000452b9 	.word	0x000452b9
   26dd0:	0004409e 	.word	0x0004409e
   26dd4:	000452e7 	.word	0x000452e7

00026dd8 <at_handler_cedrxp>:

static void at_handler_cedrxp(const char *response)
{
   26dd8:	b510      	push	{r4, lr}
   26dda:	4604      	mov	r4, r0
   26ddc:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   26dde:	2240      	movs	r2, #64	; 0x40
   26de0:	2100      	movs	r1, #0
   26de2:	4668      	mov	r0, sp
   26de4:	f01a fb26 	bl	41434 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26de8:	b954      	cbnz	r4, 26e00 <at_handler_cedrxp+0x28>
   26dea:	490f      	ldr	r1, [pc, #60]	; (26e28 <at_handler_cedrxp+0x50>)
   26dec:	480f      	ldr	r0, [pc, #60]	; (26e2c <at_handler_cedrxp+0x54>)
   26dee:	f240 1225 	movw	r2, #293	; 0x125
   26df2:	f015 fe4b 	bl	3ca8c <assert_print>
   26df6:	f240 1125 	movw	r1, #293	; 0x125
   26dfa:	480b      	ldr	r0, [pc, #44]	; (26e28 <at_handler_cedrxp+0x50>)
   26dfc:	f015 fe3f 	bl	3ca7e <assert_post_action>

	LOG_DBG("+CEDRXP notification");

	err = parse_edrx(response, &evt.edrx_cfg);
   26e00:	4620      	mov	r0, r4
   26e02:	a902      	add	r1, sp, #8
   26e04:	f7f7 f910 	bl	1e028 <parse_edrx>
	if (err) {
   26e08:	4602      	mov	r2, r0
   26e0a:	b128      	cbz	r0, 26e18 <at_handler_cedrxp+0x40>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   26e0c:	2145      	movs	r1, #69	; 0x45
   26e0e:	4808      	ldr	r0, [pc, #32]	; (26e30 <at_handler_cedrxp+0x58>)
   26e10:	f015 fe76 	bl	3cb00 <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_EDRX_UPDATE;

	event_handler_list_dispatch(&evt);
}
   26e14:	b010      	add	sp, #64	; 0x40
   26e16:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   26e18:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   26e1a:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   26e1c:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   26e20:	f000 fd68 	bl	278f4 <event_handler_list_dispatch>
   26e24:	e7f6      	b.n	26e14 <at_handler_cedrxp+0x3c>
   26e26:	bf00      	nop
   26e28:	000452b9 	.word	0x000452b9
   26e2c:	0004409e 	.word	0x0004409e
   26e30:	00045313 	.word	0x00045313

00026e34 <at_handler_xt3412>:

static void at_handler_xt3412(const char *response)
{
   26e34:	b510      	push	{r4, lr}
   26e36:	4604      	mov	r4, r0
   26e38:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   26e3a:	2240      	movs	r2, #64	; 0x40
   26e3c:	2100      	movs	r1, #0
   26e3e:	4668      	mov	r0, sp
   26e40:	f01a faf8 	bl	41434 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26e44:	b954      	cbnz	r4, 26e5c <at_handler_xt3412+0x28>
   26e46:	4912      	ldr	r1, [pc, #72]	; (26e90 <at_handler_xt3412+0x5c>)
   26e48:	4812      	ldr	r0, [pc, #72]	; (26e94 <at_handler_xt3412+0x60>)
   26e4a:	f240 1239 	movw	r2, #313	; 0x139
   26e4e:	f015 fe1d 	bl	3ca8c <assert_print>
   26e52:	f240 1139 	movw	r1, #313	; 0x139
   26e56:	480e      	ldr	r0, [pc, #56]	; (26e90 <at_handler_xt3412+0x5c>)
   26e58:	f015 fe11 	bl	3ca7e <assert_post_action>

	LOG_DBG("%%XT3412 notification");

	err = parse_xt3412(response, &evt.time);
   26e5c:	4620      	mov	r0, r4
   26e5e:	a902      	add	r1, sp, #8
   26e60:	f000 ff30 	bl	27cc4 <parse_xt3412>
	if (err) {
   26e64:	4602      	mov	r2, r0
   26e66:	b128      	cbz	r0, 26e74 <at_handler_xt3412+0x40>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   26e68:	2145      	movs	r1, #69	; 0x45
   26e6a:	480b      	ldr	r0, [pc, #44]	; (26e98 <at_handler_xt3412+0x64>)
   26e6c:	f015 fe48 	bl	3cb00 <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;

	event_handler_list_dispatch(&evt);
}
   26e70:	b010      	add	sp, #64	; 0x40
   26e72:	bd10      	pop	{r4, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   26e74:	9b02      	ldr	r3, [sp, #8]
   26e76:	9a03      	ldr	r2, [sp, #12]
   26e78:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   26e7c:	3b08      	subs	r3, #8
   26e7e:	4313      	orrs	r3, r2
   26e80:	d1f6      	bne.n	26e70 <at_handler_xt3412+0x3c>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   26e82:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   26e84:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   26e86:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   26e8a:	f000 fd33 	bl	278f4 <event_handler_list_dispatch>
   26e8e:	e7ef      	b.n	26e70 <at_handler_xt3412+0x3c>
   26e90:	000452b9 	.word	0x000452b9
   26e94:	0004409e 	.word	0x0004409e
   26e98:	00045334 	.word	0x00045334

00026e9c <at_handler_ncellmeas>:

static void at_handler_ncellmeas(const char *response)
{
   26e9c:	b530      	push	{r4, r5, lr}
   26e9e:	4605      	mov	r5, r0
   26ea0:	b091      	sub	sp, #68	; 0x44
	int err;
	struct lte_lc_evt evt = {0};
   26ea2:	2240      	movs	r2, #64	; 0x40
   26ea4:	2100      	movs	r1, #0
   26ea6:	4668      	mov	r0, sp
   26ea8:	f01a fac4 	bl	41434 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26eac:	b955      	cbnz	r5, 26ec4 <at_handler_ncellmeas+0x28>
   26eae:	4921      	ldr	r1, [pc, #132]	; (26f34 <at_handler_ncellmeas+0x98>)
   26eb0:	4821      	ldr	r0, [pc, #132]	; (26f38 <at_handler_ncellmeas+0x9c>)
   26eb2:	f44f 72aa 	mov.w	r2, #340	; 0x154
   26eb6:	f015 fde9 	bl	3ca8c <assert_print>
   26eba:	f44f 71aa 	mov.w	r1, #340	; 0x154
   26ebe:	481d      	ldr	r0, [pc, #116]	; (26f34 <at_handler_ncellmeas+0x98>)
   26ec0:	f015 fddd 	bl	3ca7e <assert_post_action>

	int ncell_count = neighborcell_count_get(response);
   26ec4:	4628      	mov	r0, r5
   26ec6:	f000 ff4b 	bl	27d60 <neighborcell_count_get>
   26eca:	4604      	mov	r4, r0
	struct lte_lc_ncell *neighbor_cells = NULL;

	LOG_DBG("%%NCELLMEAS notification");
	LOG_DBG("Neighbor cell count: %d", ncell_count);

	if (event_handler_list_is_empty()) {
   26ecc:	f000 fcda 	bl	27884 <event_handler_list_is_empty>
   26ed0:	b950      	cbnz	r0, 26ee8 <at_handler_ncellmeas+0x4c>
		 * to receive the parsed data.
		 */
		return;
	}

	if (ncell_count != 0) {
   26ed2:	b15c      	cbz	r4, 26eec <at_handler_ncellmeas+0x50>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   26ed4:	4620      	mov	r0, r4
   26ed6:	2110      	movs	r1, #16
   26ed8:	f01a fa06 	bl	412e8 <k_calloc>
		if (neighbor_cells == NULL) {
   26edc:	4604      	mov	r4, r0
   26ede:	b928      	cbnz	r0, 26eec <at_handler_ncellmeas+0x50>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   26ee0:	2145      	movs	r1, #69	; 0x45
   26ee2:	4816      	ldr	r0, [pc, #88]	; (26f3c <at_handler_ncellmeas+0xa0>)
   26ee4:	f015 fe0c 	bl	3cb00 <z_log_minimal_printk>
	}

	if (neighbor_cells) {
		k_free(neighbor_cells);
	}
}
   26ee8:	b011      	add	sp, #68	; 0x44
   26eea:	bd30      	pop	{r4, r5, pc}
	err = parse_ncellmeas(response, &evt.cells_info);
   26eec:	4628      	mov	r0, r5
   26eee:	a902      	add	r1, sp, #8
	evt.cells_info.neighbor_cells = neighbor_cells;
   26ef0:	940f      	str	r4, [sp, #60]	; 0x3c
	err = parse_ncellmeas(response, &evt.cells_info);
   26ef2:	f000 ff51 	bl	27d98 <parse_ncellmeas>
	switch (err) {
   26ef6:	1dc3      	adds	r3, r0, #7
	err = parse_ncellmeas(response, &evt.cells_info);
   26ef8:	4602      	mov	r2, r0
	switch (err) {
   26efa:	d006      	beq.n	26f0a <at_handler_ncellmeas+0x6e>
   26efc:	2801      	cmp	r0, #1
   26efe:	d90d      	bls.n	26f1c <at_handler_ncellmeas+0x80>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   26f00:	2145      	movs	r1, #69	; 0x45
   26f02:	480f      	ldr	r0, [pc, #60]	; (26f40 <at_handler_ncellmeas+0xa4>)
   26f04:	f015 fdfc 	bl	3cb00 <z_log_minimal_printk>
   26f08:	e00e      	b.n	26f28 <at_handler_ncellmeas+0x8c>
		LOG_WRN("Not all neighbor cells could be parsed");
   26f0a:	2157      	movs	r1, #87	; 0x57
   26f0c:	480d      	ldr	r0, [pc, #52]	; (26f44 <at_handler_ncellmeas+0xa8>)
   26f0e:	f015 fdf7 	bl	3cb00 <z_log_minimal_printk>
		LOG_WRN("More cells than the configured max count of %d were found",
   26f12:	220a      	movs	r2, #10
   26f14:	2157      	movs	r1, #87	; 0x57
   26f16:	480c      	ldr	r0, [pc, #48]	; (26f48 <at_handler_ncellmeas+0xac>)
   26f18:	f015 fdf2 	bl	3cb00 <z_log_minimal_printk>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   26f1c:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   26f1e:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   26f20:	f88d 3000 	strb.w	r3, [sp]
		event_handler_list_dispatch(&evt);
   26f24:	f000 fce6 	bl	278f4 <event_handler_list_dispatch>
	if (neighbor_cells) {
   26f28:	2c00      	cmp	r4, #0
   26f2a:	d0dd      	beq.n	26ee8 <at_handler_ncellmeas+0x4c>
		k_free(neighbor_cells);
   26f2c:	4620      	mov	r0, r4
   26f2e:	f01a f9d0 	bl	412d2 <k_free>
   26f32:	e7d9      	b.n	26ee8 <at_handler_ncellmeas+0x4c>
   26f34:	000452b9 	.word	0x000452b9
   26f38:	0004409e 	.word	0x0004409e
   26f3c:	0004536d 	.word	0x0004536d
   26f40:	0004540a 	.word	0x0004540a
   26f44:	0004539f 	.word	0x0004539f
   26f48:	000453cb 	.word	0x000453cb

00026f4c <at_handler_xmodemsleep>:

static void at_handler_xmodemsleep(const char *response)
{
   26f4c:	b510      	push	{r4, lr}
   26f4e:	4604      	mov	r4, r0
   26f50:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   26f52:	2240      	movs	r2, #64	; 0x40
   26f54:	2100      	movs	r1, #0
   26f56:	4668      	mov	r0, sp
   26f58:	f01a fa6c 	bl	41434 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26f5c:	b954      	cbnz	r4, 26f74 <at_handler_xmodemsleep+0x28>
   26f5e:	4919      	ldr	r1, [pc, #100]	; (26fc4 <at_handler_xmodemsleep+0x78>)
   26f60:	4819      	ldr	r0, [pc, #100]	; (26fc8 <at_handler_xmodemsleep+0x7c>)
   26f62:	f240 1289 	movw	r2, #393	; 0x189
   26f66:	f015 fd91 	bl	3ca8c <assert_print>
   26f6a:	f240 1189 	movw	r1, #393	; 0x189
   26f6e:	4815      	ldr	r0, [pc, #84]	; (26fc4 <at_handler_xmodemsleep+0x78>)
   26f70:	f015 fd85 	bl	3ca7e <assert_post_action>

	LOG_DBG("%%XMODEMSLEEP notification");

	err = parse_xmodemsleep(response, &evt.modem_sleep);
   26f74:	4620      	mov	r0, r4
   26f76:	a902      	add	r1, sp, #8
   26f78:	f001 f858 	bl	2802c <parse_xmodemsleep>
	if (err) {
   26f7c:	4602      	mov	r2, r0
   26f7e:	b128      	cbz	r0, 26f8c <at_handler_xmodemsleep+0x40>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   26f80:	2145      	movs	r1, #69	; 0x45
   26f82:	4812      	ldr	r0, [pc, #72]	; (26fcc <at_handler_xmodemsleep+0x80>)
   26f84:	f015 fdbc 	bl	3cb00 <z_log_minimal_printk>

		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
	}

	event_handler_list_dispatch(&evt);
}
   26f88:	b010      	add	sp, #64	; 0x40
   26f8a:	bd10      	pop	{r4, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   26f8c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   26f90:	1e5a      	subs	r2, r3, #1
   26f92:	2a01      	cmp	r2, #1
   26f94:	d901      	bls.n	26f9a <at_handler_xmodemsleep+0x4e>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   26f96:	2b04      	cmp	r3, #4
   26f98:	d1f6      	bne.n	26f88 <at_handler_xmodemsleep+0x3c>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   26f9a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   26f9e:	f5a1 539c 	sub.w	r3, r1, #4992	; 0x1380
   26fa2:	3b08      	subs	r3, #8
   26fa4:	4313      	orrs	r3, r2
   26fa6:	d106      	bne.n	26fb6 <at_handler_xmodemsleep+0x6a>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   26fa8:	2308      	movs	r3, #8
	event_handler_list_dispatch(&evt);
   26faa:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   26fac:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   26fb0:	f000 fca0 	bl	278f4 <event_handler_list_dispatch>
   26fb4:	e7e8      	b.n	26f88 <at_handler_xmodemsleep+0x3c>
	} else if (evt.modem_sleep.time == 0) {
   26fb6:	ea51 0302 	orrs.w	r3, r1, r2
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   26fba:	bf0c      	ite	eq
   26fbc:	2309      	moveq	r3, #9
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   26fbe:	230a      	movne	r3, #10
   26fc0:	e7f3      	b.n	26faa <at_handler_xmodemsleep+0x5e>
   26fc2:	bf00      	nop
   26fc4:	000452b9 	.word	0x000452b9
   26fc8:	0004409e 	.word	0x0004409e
   26fcc:	00045439 	.word	0x00045439

00026fd0 <at_handler_mdmev>:

static void at_handler_mdmev(const char *response)
{
   26fd0:	b510      	push	{r4, lr}
   26fd2:	4604      	mov	r4, r0
   26fd4:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   26fd6:	2240      	movs	r2, #64	; 0x40
   26fd8:	2100      	movs	r1, #0
   26fda:	4668      	mov	r0, sp
   26fdc:	f01a fa2a 	bl	41434 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26fe0:	b954      	cbnz	r4, 26ff8 <at_handler_mdmev+0x28>
   26fe2:	490f      	ldr	r1, [pc, #60]	; (27020 <at_handler_mdmev+0x50>)
   26fe4:	480f      	ldr	r0, [pc, #60]	; (27024 <at_handler_mdmev+0x54>)
   26fe6:	f240 12b1 	movw	r2, #433	; 0x1b1
   26fea:	f015 fd4f 	bl	3ca8c <assert_print>
   26fee:	f240 11b1 	movw	r1, #433	; 0x1b1
   26ff2:	480b      	ldr	r0, [pc, #44]	; (27020 <at_handler_mdmev+0x50>)
   26ff4:	f015 fd43 	bl	3ca7e <assert_post_action>

	LOG_DBG("%%MDMEV notification");

	err = parse_mdmev(response, &evt.modem_evt);
   26ff8:	4620      	mov	r0, r4
   26ffa:	a902      	add	r1, sp, #8
   26ffc:	f001 f872 	bl	280e4 <parse_mdmev>
	if (err) {
   27000:	4602      	mov	r2, r0
   27002:	b128      	cbz	r0, 27010 <at_handler_mdmev+0x40>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   27004:	2145      	movs	r1, #69	; 0x45
   27006:	4808      	ldr	r0, [pc, #32]	; (27028 <at_handler_mdmev+0x58>)
   27008:	f015 fd7a 	bl	3cb00 <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_MODEM_EVENT;

	event_handler_list_dispatch(&evt);
}
   2700c:	b010      	add	sp, #64	; 0x40
   2700e:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   27010:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   27012:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   27014:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   27018:	f000 fc6c 	bl	278f4 <event_handler_list_dispatch>
   2701c:	e7f6      	b.n	2700c <at_handler_mdmev+0x3c>
   2701e:	bf00      	nop
   27020:	000452b9 	.word	0x000452b9
   27024:	0004409e 	.word	0x0004409e
   27028:	0004547a 	.word	0x0004547a

0002702c <enable_notifications>:

static int enable_notifications(void)
{
   2702c:	b510      	push	{r4, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   2702e:	4818      	ldr	r0, [pc, #96]	; (27090 <enable_notifications+0x64>)
{
   27030:	b08e      	sub	sp, #56	; 0x38
	err = nrf_modem_at_printf(AT_CEREG_5);
   27032:	f00d fff9 	bl	35028 <nrf_modem_at_printf>
	if (err) {
   27036:	4602      	mov	r2, r0
   27038:	b138      	cbz	r0, 2704a <enable_notifications+0x1e>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   2703a:	4816      	ldr	r0, [pc, #88]	; (27094 <enable_notifications+0x68>)
   2703c:	2145      	movs	r1, #69	; 0x45
   2703e:	f015 fd5f 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   27042:	f06f 000d 	mvn.w	r0, #13
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
		}
	}

	return 0;
}
   27046:	b00e      	add	sp, #56	; 0x38
   27048:	bd10      	pop	{r4, pc}
	err = nrf_modem_at_printf(cscon);
   2704a:	4813      	ldr	r0, [pc, #76]	; (27098 <enable_notifications+0x6c>)
   2704c:	f00d ffec 	bl	35028 <nrf_modem_at_printf>
	if (err) {
   27050:	2800      	cmp	r0, #0
   27052:	d0f8      	beq.n	27046 <enable_notifications+0x1a>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   27054:	4602      	mov	r2, r0
   27056:	2157      	movs	r1, #87	; 0x57
   27058:	4810      	ldr	r0, [pc, #64]	; (2709c <enable_notifications+0x70>)
   2705a:	f015 fd51 	bl	3cb00 <z_log_minimal_printk>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   2705e:	2157      	movs	r1, #87	; 0x57
   27060:	480f      	ldr	r0, [pc, #60]	; (270a0 <enable_notifications+0x74>)
   27062:	f015 fd4d 	bl	3cb00 <z_log_minimal_printk>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   27066:	2132      	movs	r1, #50	; 0x32
   27068:	4a0e      	ldr	r2, [pc, #56]	; (270a4 <enable_notifications+0x78>)
   2706a:	a801      	add	r0, sp, #4
   2706c:	f00e f802 	bl	35074 <nrf_modem_at_cmd>
		if (err == 0) {
   27070:	4604      	mov	r4, r0
   27072:	b950      	cbnz	r0, 2708a <enable_notifications+0x5e>
			char *end = strstr(buf, "\r\nOK");
   27074:	490c      	ldr	r1, [pc, #48]	; (270a8 <enable_notifications+0x7c>)
   27076:	a801      	add	r0, sp, #4
   27078:	f01a fbf6 	bl	41868 <strstr>
			if (end) {
   2707c:	b100      	cbz	r0, 27080 <enable_notifications+0x54>
				*end = '\0';
   2707e:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
   27080:	2157      	movs	r1, #87	; 0x57
   27082:	480a      	ldr	r0, [pc, #40]	; (270ac <enable_notifications+0x80>)
   27084:	aa01      	add	r2, sp, #4
   27086:	f015 fd3b 	bl	3cb00 <z_log_minimal_printk>
	return 0;
   2708a:	2000      	movs	r0, #0
   2708c:	e7db      	b.n	27046 <enable_notifications+0x1a>
   2708e:	bf00      	nop
   27090:	000454af 	.word	0x000454af
   27094:	000454ba 	.word	0x000454ba
   27098:	00045b24 	.word	0x00045b24
   2709c:	000454f5 	.word	0x000454f5
   270a0:	00045532 	.word	0x00045532
   270a4:	00045568 	.word	0x00045568
   270a8:	00045570 	.word	0x00045570
   270ac:	00045575 	.word	0x00045575

000270b0 <lte_lc_register_handler>:
	return err ? -EFAULT : 0;
}

void lte_lc_register_handler(lte_lc_evt_handler_t handler)
{
	if (handler == NULL) {
   270b0:	b918      	cbnz	r0, 270ba <lte_lc_register_handler+0xa>
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
   270b2:	2149      	movs	r1, #73	; 0x49
   270b4:	4802      	ldr	r0, [pc, #8]	; (270c0 <lte_lc_register_handler+0x10>)
   270b6:	f015 bd23 	b.w	3cb00 <z_log_minimal_printk>
			"The handler can be deregistered using lte_lc_deregister_handler()");
		return;
	}

	event_handler_list_append_handler(handler);
   270ba:	f000 bbeb 	b.w	27894 <event_handler_list_append_handler>
   270be:	bf00      	nop
   270c0:	0004559d 	.word	0x0004559d

000270c4 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   270c4:	2300      	movs	r3, #0
{
   270c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   270c8:	b08d      	sub	sp, #52	; 0x34
   270ca:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   270cc:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   270ce:	e9cd 3303 	strd	r3, r3, [sp, #12]
	char tau_ext_str[9] = {0};
   270d2:	e9cd 3306 	strd	r3, r3, [sp, #24]
	char tau_legacy_str[9] = {0};
   270d6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	char active_time_str[9] = {0};
   270da:	f88d 3014 	strb.w	r3, [sp, #20]
	char tau_ext_str[9] = {0};
   270de:	f88d 3020 	strb.w	r3, [sp, #32]
	char tau_legacy_str[9] = {0};
   270e2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if ((tau == NULL) || (active_time == NULL)) {
   270e6:	2800      	cmp	r0, #0
   270e8:	d054      	beq.n	27194 <lte_lc_psm_get+0xd0>
   270ea:	2900      	cmp	r1, #0
   270ec:	d052      	beq.n	27194 <lte_lc_psm_get+0xd0>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   270ee:	4c2b      	ldr	r4, [pc, #172]	; (2719c <lte_lc_psm_get+0xd8>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   270f0:	4a2b      	ldr	r2, [pc, #172]	; (271a0 <lte_lc_psm_get+0xdc>)
   270f2:	21a0      	movs	r1, #160	; 0xa0
   270f4:	4620      	mov	r0, r4
	response[0] = '\0';
   270f6:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   270f8:	f00d ffbc 	bl	35074 <nrf_modem_at_cmd>
	if (err < 0) {
   270fc:	1e02      	subs	r2, r0, #0
   270fe:	da08      	bge.n	27112 <lte_lc_psm_get+0x4e>
		LOG_ERR("AT command failed, error: %d", err);
   27100:	2145      	movs	r1, #69	; 0x45
   27102:	4828      	ldr	r0, [pc, #160]	; (271a4 <lte_lc_psm_get+0xe0>)
   27104:	f015 fcfc 	bl	3cb00 <z_log_minimal_printk>
	for (int i = 0; i < 12; i++) {
		if (comma_ptr) {
			comma_ptr = strchr(comma_ptr + 1, ch);
		} else {
			LOG_ERR("AT command parsing failed");
			return -EFAULT;
   27108:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec\n", *tau, *active_time);

	return 0;
}
   2710c:	4620      	mov	r0, r4
   2710e:	b00d      	add	sp, #52	; 0x34
   27110:	bdf0      	pop	{r4, r5, r6, r7, pc}
	comma_ptr = strchr(response, ch);
   27112:	4620      	mov	r0, r4
   27114:	212c      	movs	r1, #44	; 0x2c
   27116:	f01a fb4b 	bl	417b0 <strchr>
   2711a:	270c      	movs	r7, #12
   2711c:	4604      	mov	r4, r0
		if (comma_ptr) {
   2711e:	b37c      	cbz	r4, 27180 <lte_lc_psm_get+0xbc>
			comma_ptr = strchr(comma_ptr + 1, ch);
   27120:	1c60      	adds	r0, r4, #1
   27122:	212c      	movs	r1, #44	; 0x2c
   27124:	f01a fb44 	bl	417b0 <strchr>
	for (int i = 0; i < 12; i++) {
   27128:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   2712a:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   2712c:	d1f7      	bne.n	2711e <lte_lc_psm_get+0x5a>
	if (comma_ptr) {
   2712e:	b338      	cbz	r0, 27180 <lte_lc_psm_get+0xbc>
		strncpy(active_time_str, comma_ptr + 2, 8);
   27130:	1c81      	adds	r1, r0, #2
   27132:	2208      	movs	r2, #8
   27134:	a803      	add	r0, sp, #12
   27136:	f01a fb64 	bl	41802 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   2713a:	1c60      	adds	r0, r4, #1
   2713c:	212c      	movs	r1, #44	; 0x2c
   2713e:	f01a fb37 	bl	417b0 <strchr>
	if (comma_ptr) {
   27142:	4604      	mov	r4, r0
   27144:	b1e0      	cbz	r0, 27180 <lte_lc_psm_get+0xbc>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   27146:	1c81      	adds	r1, r0, #2
   27148:	2208      	movs	r2, #8
   2714a:	a806      	add	r0, sp, #24
   2714c:	f01a fb59 	bl	41802 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   27150:	212c      	movs	r1, #44	; 0x2c
   27152:	1c60      	adds	r0, r4, #1
   27154:	f01a fb2c 	bl	417b0 <strchr>
	if (comma_ptr) {
   27158:	b120      	cbz	r0, 27164 <lte_lc_psm_get+0xa0>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   2715a:	1c81      	adds	r1, r0, #2
   2715c:	2208      	movs	r2, #8
   2715e:	a809      	add	r0, sp, #36	; 0x24
   27160:	f01a fb4f 	bl	41802 <strncpy>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   27164:	ab01      	add	r3, sp, #4
   27166:	aa09      	add	r2, sp, #36	; 0x24
   27168:	a906      	add	r1, sp, #24
   2716a:	a803      	add	r0, sp, #12
   2716c:	f000 fc00 	bl	27970 <parse_psm>
	if (err) {
   27170:	4604      	mov	r4, r0
   27172:	b150      	cbz	r0, 2718a <lte_lc_psm_get+0xc6>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   27174:	4602      	mov	r2, r0
   27176:	2145      	movs	r1, #69	; 0x45
   27178:	480b      	ldr	r0, [pc, #44]	; (271a8 <lte_lc_psm_get+0xe4>)
   2717a:	f015 fcc1 	bl	3cb00 <z_log_minimal_printk>
		return err;
   2717e:	e7c5      	b.n	2710c <lte_lc_psm_get+0x48>
			LOG_ERR("AT command parsing failed");
   27180:	2145      	movs	r1, #69	; 0x45
   27182:	480a      	ldr	r0, [pc, #40]	; (271ac <lte_lc_psm_get+0xe8>)
   27184:	f015 fcbc 	bl	3cb00 <z_log_minimal_printk>
   27188:	e7be      	b.n	27108 <lte_lc_psm_get+0x44>
	*tau = psm_cfg.tau;
   2718a:	9b01      	ldr	r3, [sp, #4]
   2718c:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   2718e:	9b02      	ldr	r3, [sp, #8]
   27190:	602b      	str	r3, [r5, #0]
	return 0;
   27192:	e7bb      	b.n	2710c <lte_lc_psm_get+0x48>
		return -EINVAL;
   27194:	f06f 0415 	mvn.w	r4, #21
   27198:	e7b8      	b.n	2710c <lte_lc_psm_get+0x48>
   2719a:	bf00      	nop
   2719c:	2001b662 	.word	0x2001b662
   271a0:	00045614 	.word	0x00045614
   271a4:	00045621 	.word	0x00045621
   271a8:	00045662 	.word	0x00045662
   271ac:	00045643 	.word	0x00045643

000271b0 <at_handler_cereg>:
{
   271b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   271b2:	4604      	mov	r4, r0
   271b4:	b0a3      	sub	sp, #140	; 0x8c
	struct lte_lc_evt evt = {0};
   271b6:	2240      	movs	r2, #64	; 0x40
   271b8:	2100      	movs	r1, #0
   271ba:	a812      	add	r0, sp, #72	; 0x48
   271bc:	f01a f93a 	bl	41434 <memset>
	__ASSERT_NO_MSG(response != NULL);
   271c0:	b944      	cbnz	r4, 271d4 <at_handler_cereg+0x24>
   271c2:	494e      	ldr	r1, [pc, #312]	; (272fc <at_handler_cereg+0x14c>)
   271c4:	484e      	ldr	r0, [pc, #312]	; (27300 <at_handler_cereg+0x150>)
   271c6:	2292      	movs	r2, #146	; 0x92
   271c8:	f015 fc60 	bl	3ca8c <assert_print>
   271cc:	2192      	movs	r1, #146	; 0x92
   271ce:	484b      	ldr	r0, [pc, #300]	; (272fc <at_handler_cereg+0x14c>)
   271d0:	f015 fc55 	bl	3ca7e <assert_post_action>
	enum lte_lc_nw_reg_status reg_status = 0;
   271d4:	2500      	movs	r5, #0
	struct lte_lc_cell cell = {0};
   271d6:	2230      	movs	r2, #48	; 0x30
   271d8:	4629      	mov	r1, r5
   271da:	a806      	add	r0, sp, #24
	enum lte_lc_nw_reg_status reg_status = 0;
   271dc:	f88d 500e 	strb.w	r5, [sp, #14]
	struct lte_lc_psm_cfg psm_cfg = {0};
   271e0:	af04      	add	r7, sp, #16
	struct lte_lc_cell cell = {0};
   271e2:	f01a f927 	bl	41434 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   271e6:	f10d 030f 	add.w	r3, sp, #15
	struct lte_lc_psm_cfg psm_cfg = {0};
   271ea:	607d      	str	r5, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   271ec:	f10d 020e 	add.w	r2, sp, #14
   271f0:	9300      	str	r3, [sp, #0]
   271f2:	2101      	movs	r1, #1
   271f4:	4620      	mov	r0, r4
   271f6:	ab06      	add	r3, sp, #24
	struct lte_lc_psm_cfg psm_cfg = {0};
   271f8:	9504      	str	r5, [sp, #16]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   271fa:	f000 fc8f 	bl	27b1c <parse_cereg>
	if (err) {
   271fe:	4602      	mov	r2, r0
   27200:	b130      	cbz	r0, 27210 <at_handler_cereg+0x60>
		LOG_ERR("Failed to parse notification (error %d): %s",
   27202:	4623      	mov	r3, r4
   27204:	2145      	movs	r1, #69	; 0x45
   27206:	483f      	ldr	r0, [pc, #252]	; (27304 <at_handler_cereg+0x154>)
   27208:	f015 fc7a 	bl	3cb00 <z_log_minimal_printk>
}
   2720c:	b023      	add	sp, #140	; 0x8c
   2720e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   27210:	f89d 300e 	ldrb.w	r3, [sp, #14]
   27214:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   27218:	2b01      	cmp	r3, #1
   2721a:	d105      	bne.n	27228 <at_handler_cereg+0x78>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   2721c:	9b08      	ldr	r3, [sp, #32]
   2721e:	3301      	adds	r3, #1
   27220:	d053      	beq.n	272ca <at_handler_cereg+0x11a>
	z_impl_k_sem_give(sem);
   27222:	4839      	ldr	r0, [pc, #228]	; (27308 <at_handler_cereg+0x158>)
   27224:	f00f fda8 	bl	36d78 <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
   27228:	f000 fb2c 	bl	27884 <event_handler_list_is_empty>
   2722c:	2800      	cmp	r0, #0
   2722e:	d1ed      	bne.n	2720c <at_handler_cereg+0x5c>
	if (reg_status != prev_reg_status) {
   27230:	4a36      	ldr	r2, [pc, #216]	; (2730c <at_handler_cereg+0x15c>)
   27232:	f89d 300e 	ldrb.w	r3, [sp, #14]
   27236:	7811      	ldrb	r1, [r2, #0]
   27238:	4299      	cmp	r1, r3
   2723a:	d007      	beq.n	2724c <at_handler_cereg+0x9c>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   2723c:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   27240:	a812      	add	r0, sp, #72	; 0x48
		prev_reg_status = reg_status;
   27242:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   27244:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   27248:	f000 fb54 	bl	278f4 <event_handler_list_dispatch>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   2724c:	2230      	movs	r2, #48	; 0x30
   2724e:	4930      	ldr	r1, [pc, #192]	; (27310 <at_handler_cereg+0x160>)
   27250:	a806      	add	r0, sp, #24
   27252:	f01a f8bf 	bl	413d4 <memcmp>
   27256:	b1c8      	cbz	r0, 2728c <at_handler_cereg+0xdc>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   27258:	2304      	movs	r3, #4
   2725a:	4d2d      	ldr	r5, [pc, #180]	; (27310 <at_handler_cereg+0x160>)
   2725c:	ac06      	add	r4, sp, #24
   2725e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   27262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   27264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   27266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   27268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2726a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2726e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   27272:	ae14      	add	r6, sp, #80	; 0x50
   27274:	ad06      	add	r5, sp, #24
   27276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27278:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2727a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2727c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2727e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   27282:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   27286:	a812      	add	r0, sp, #72	; 0x48
   27288:	f000 fb34 	bl	278f4 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   2728c:	4a21      	ldr	r2, [pc, #132]	; (27314 <at_handler_cereg+0x164>)
   2728e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   27292:	7811      	ldrb	r1, [r2, #0]
   27294:	4299      	cmp	r1, r3
   27296:	d008      	beq.n	272aa <at_handler_cereg+0xfa>
		prev_lte_mode = lte_mode;
   27298:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   2729a:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   2729c:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   2729e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		evt.lte_mode = lte_mode;
   272a2:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   272a6:	f000 fb25 	bl	278f4 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   272aa:	f89d 400e 	ldrb.w	r4, [sp, #14]
   272ae:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   272b2:	2c01      	cmp	r4, #1
   272b4:	d1aa      	bne.n	2720c <at_handler_cereg+0x5c>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   272b6:	4638      	mov	r0, r7
   272b8:	a905      	add	r1, sp, #20
   272ba:	f7ff ff03 	bl	270c4 <lte_lc_psm_get>
	if (err) {
   272be:	b140      	cbz	r0, 272d2 <at_handler_cereg+0x122>
		LOG_ERR("Failed to get PSM information");
   272c0:	2145      	movs	r1, #69	; 0x45
   272c2:	4815      	ldr	r0, [pc, #84]	; (27318 <at_handler_cereg+0x168>)
   272c4:	f015 fc1c 	bl	3cb00 <z_log_minimal_printk>
		return;
   272c8:	e7a0      	b.n	2720c <at_handler_cereg+0x5c>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   272ca:	2304      	movs	r3, #4
   272cc:	f88d 300e 	strb.w	r3, [sp, #14]
   272d0:	e7aa      	b.n	27228 <at_handler_cereg+0x78>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   272d2:	4d12      	ldr	r5, [pc, #72]	; (2731c <at_handler_cereg+0x16c>)
   272d4:	2208      	movs	r2, #8
   272d6:	4629      	mov	r1, r5
   272d8:	4638      	mov	r0, r7
   272da:	f01a f87b 	bl	413d4 <memcmp>
   272de:	2800      	cmp	r0, #0
   272e0:	d094      	beq.n	2720c <at_handler_cereg+0x5c>
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   272e2:	e897 0003 	ldmia.w	r7, {r0, r1}
   272e6:	ab14      	add	r3, sp, #80	; 0x50
   272e8:	e885 0003 	stmia.w	r5, {r0, r1}
   272ec:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   272f0:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   272f2:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   272f6:	f000 fafd 	bl	278f4 <event_handler_list_dispatch>
   272fa:	e787      	b.n	2720c <at_handler_cereg+0x5c>
   272fc:	000452b9 	.word	0x000452b9
   27300:	0004409e 	.word	0x0004409e
   27304:	00045694 	.word	0x00045694
   27308:	200193f0 	.word	0x200193f0
   2730c:	2001b661 	.word	0x2001b661
   27310:	200154e0 	.word	0x200154e0
   27314:	2001b660 	.word	0x2001b660
   27318:	000456c5 	.word	0x000456c5
   2731c:	20019408 	.word	0x20019408

00027320 <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   27320:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   27322:	2400      	movs	r4, #0

	if (status == NULL) {
   27324:	4605      	mov	r5, r0
	uint32_t cell_id = 0;
   27326:	9401      	str	r4, [sp, #4]
	if (status == NULL) {
   27328:	b1a8      	cbz	r0, 27356 <lte_lc_nw_reg_status_get+0x36>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   2732a:	f10d 0202 	add.w	r2, sp, #2
   2732e:	490b      	ldr	r1, [pc, #44]	; (2735c <lte_lc_nw_reg_status_get+0x3c>)
   27330:	480b      	ldr	r0, [pc, #44]	; (27360 <lte_lc_nw_reg_status_get+0x40>)
   27332:	ab01      	add	r3, sp, #4
   27334:	f00d ff0a 	bl	3514c <nrf_modem_at_scanf>
		"%u,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   27338:	1e02      	subs	r2, r0, #0
   2733a:	dc07      	bgt.n	2734c <lte_lc_nw_reg_status_get+0x2c>
		LOG_ERR("Could not get registration status, error: %d", err);
   2733c:	4809      	ldr	r0, [pc, #36]	; (27364 <lte_lc_nw_reg_status_get+0x44>)
   2733e:	2145      	movs	r1, #69	; 0x45
   27340:	f015 fbde 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   27344:	f06f 000d 	mvn.w	r0, #13
	}

	*status = status_tmp;

	return 0;
}
   27348:	b003      	add	sp, #12
   2734a:	bd30      	pop	{r4, r5, pc}
	*status = status_tmp;
   2734c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	return 0;
   27350:	4620      	mov	r0, r4
	*status = status_tmp;
   27352:	702b      	strb	r3, [r5, #0]
	return 0;
   27354:	e7f8      	b.n	27348 <lte_lc_nw_reg_status_get+0x28>
		return -EINVAL;
   27356:	f06f 0015 	mvn.w	r0, #21
   2735a:	e7f5      	b.n	27348 <lte_lc_nw_reg_status_get+0x28>
   2735c:	000456e8 	.word	0x000456e8
   27360:	00045704 	.word	0x00045704
   27364:	0004570e 	.word	0x0004570e

00027368 <lte_lc_system_mode_set>:
int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
	int err;

	switch (mode) {
   27368:	2807      	cmp	r0, #7
{
   2736a:	b538      	push	{r3, r4, r5, lr}
   2736c:	4605      	mov	r5, r0
   2736e:	460c      	mov	r4, r1
	switch (mode) {
   27370:	d907      	bls.n	27382 <lte_lc_system_mode_set+0x1a>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   27372:	2145      	movs	r1, #69	; 0x45
   27374:	4602      	mov	r2, r0
   27376:	4813      	ldr	r0, [pc, #76]	; (273c4 <lte_lc_system_mode_set+0x5c>)
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   27378:	f015 fbc2 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   2737c:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   27380:	bd38      	pop	{r3, r4, r5, pc}
	switch (preference) {
   27382:	2904      	cmp	r1, #4
   27384:	d903      	bls.n	2738e <lte_lc_system_mode_set+0x26>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   27386:	460a      	mov	r2, r1
   27388:	480f      	ldr	r0, [pc, #60]	; (273c8 <lte_lc_system_mode_set+0x60>)
   2738a:	2145      	movs	r1, #69	; 0x45
   2738c:	e7f4      	b.n	27378 <lte_lc_system_mode_set+0x10>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   2738e:	4b0f      	ldr	r3, [pc, #60]	; (273cc <lte_lc_system_mode_set+0x64>)
   27390:	5c5a      	ldrb	r2, [r3, r1]
   27392:	4b0f      	ldr	r3, [pc, #60]	; (273d0 <lte_lc_system_mode_set+0x68>)
   27394:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   27398:	480e      	ldr	r0, [pc, #56]	; (273d4 <lte_lc_system_mode_set+0x6c>)
   2739a:	f00d fe45 	bl	35028 <nrf_modem_at_printf>
	if (err) {
   2739e:	b138      	cbz	r0, 273b0 <lte_lc_system_mode_set+0x48>
		LOG_ERR("Could not send AT command, error: %d", err);
   273a0:	4602      	mov	r2, r0
   273a2:	2145      	movs	r1, #69	; 0x45
   273a4:	480c      	ldr	r0, [pc, #48]	; (273d8 <lte_lc_system_mode_set+0x70>)
   273a6:	f015 fbab 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   273aa:	f06f 000d 	mvn.w	r0, #13
   273ae:	e7e7      	b.n	27380 <lte_lc_system_mode_set+0x18>
	sys_mode_current = mode;
   273b0:	4b0a      	ldr	r3, [pc, #40]	; (273dc <lte_lc_system_mode_set+0x74>)
   273b2:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   273b4:	4b0a      	ldr	r3, [pc, #40]	; (273e0 <lte_lc_system_mode_set+0x78>)
   273b6:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   273b8:	4b0a      	ldr	r3, [pc, #40]	; (273e4 <lte_lc_system_mode_set+0x7c>)
   273ba:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   273bc:	4b0a      	ldr	r3, [pc, #40]	; (273e8 <lte_lc_system_mode_set+0x80>)
   273be:	701c      	strb	r4, [r3, #0]
	return 0;
   273c0:	e7de      	b.n	27380 <lte_lc_system_mode_set+0x18>
   273c2:	bf00      	nop
   273c4:	00045740 	.word	0x00045740
   273c8:	00045767 	.word	0x00045767
   273cc:	00045b2f 	.word	0x00045b2f
   273d0:	00042cd8 	.word	0x00042cd8
   273d4:	00045791 	.word	0x00045791
   273d8:	000457a7 	.word	0x000457a7
   273dc:	2001b702 	.word	0x2001b702
   273e0:	20014c44 	.word	0x20014c44
   273e4:	2001b65e 	.word	0x2001b65e
   273e8:	2001b65f 	.word	0x2001b65f

000273ec <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   273ec:	b530      	push	{r4, r5, lr}
   273ee:	460c      	mov	r4, r1
	int err, mode_bitmask = 0;
	int ltem_mode, nbiot_mode, gps_mode, mode_preference;

	if (mode == NULL) {
   273f0:	4605      	mov	r5, r0
{
   273f2:	b087      	sub	sp, #28
	if (mode == NULL) {
   273f4:	2800      	cmp	r0, #0
   273f6:	d06b      	beq.n	274d0 <lte_lc_system_mode_get+0xe4>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   273f8:	ab05      	add	r3, sp, #20
   273fa:	9301      	str	r3, [sp, #4]
   273fc:	ab04      	add	r3, sp, #16
   273fe:	9300      	str	r3, [sp, #0]
   27400:	aa02      	add	r2, sp, #8
   27402:	4935      	ldr	r1, [pc, #212]	; (274d8 <lte_lc_system_mode_get+0xec>)
   27404:	4835      	ldr	r0, [pc, #212]	; (274dc <lte_lc_system_mode_get+0xf0>)
   27406:	ab03      	add	r3, sp, #12
   27408:	f00d fea0 	bl	3514c <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   2740c:	2804      	cmp	r0, #4
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   2740e:	4602      	mov	r2, r0
	if (err != 4) {
   27410:	d004      	beq.n	2741c <lte_lc_system_mode_get+0x30>
		LOG_ERR("Failed to get system mode, error: %d", err);
   27412:	2145      	movs	r1, #69	; 0x45
   27414:	4832      	ldr	r0, [pc, #200]	; (274e0 <lte_lc_system_mode_get+0xf4>)
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   27416:	f015 fb73 	bl	3cb00 <z_log_minimal_printk>
			return -EFAULT;
   2741a:	e039      	b.n	27490 <lte_lc_system_mode_get+0xa4>
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   2741c:	9b02      	ldr	r3, [sp, #8]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   2741e:	9a03      	ldr	r2, [sp, #12]
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   27420:	2b00      	cmp	r3, #0
   27422:	bf14      	ite	ne
   27424:	2302      	movne	r3, #2
   27426:	2300      	moveq	r3, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   27428:	2a00      	cmp	r2, #0
   2742a:	bf14      	ite	ne
   2742c:	2204      	movne	r2, #4
   2742e:	2200      	moveq	r2, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   27430:	4313      	orrs	r3, r2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   27432:	9a04      	ldr	r2, [sp, #16]
   27434:	2a00      	cmp	r2, #0
   27436:	bf14      	ite	ne
   27438:	2208      	movne	r2, #8
   2743a:	2200      	moveq	r2, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   2743c:	4313      	orrs	r3, r2
	switch (mode_bitmask) {
   2743e:	2b0e      	cmp	r3, #14
   27440:	d822      	bhi.n	27488 <lte_lc_system_mode_get+0x9c>
   27442:	e8df f003 	tbb	[pc, r3]
   27446:	2108      	.short	0x2108
   27448:	21152113 	.word	0x21152113
   2744c:	2117211d 	.word	0x2117211d
   27450:	211b2119 	.word	0x211b2119
   27454:	1f          	.byte	0x1f
   27455:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   27456:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   27458:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   2745a:	b1fc      	cbz	r4, 2749c <lte_lc_system_mode_get+0xb0>
		switch (mode_preference) {
   2745c:	9a05      	ldr	r2, [sp, #20]
   2745e:	2a04      	cmp	r2, #4
   27460:	d833      	bhi.n	274ca <lte_lc_system_mode_get+0xde>
   27462:	e8df f002 	tbb	[pc, r2]
   27466:	2a19      	.short	0x2a19
   27468:	2e2c      	.short	0x2e2c
   2746a:	30          	.byte	0x30
   2746b:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   2746c:	2301      	movs	r3, #1
   2746e:	e7f3      	b.n	27458 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   27470:	2302      	movs	r3, #2
   27472:	e7f1      	b.n	27458 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   27474:	2303      	movs	r3, #3
   27476:	e7ef      	b.n	27458 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   27478:	2304      	movs	r3, #4
   2747a:	e7ed      	b.n	27458 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2747c:	2305      	movs	r3, #5
   2747e:	e7eb      	b.n	27458 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   27480:	2306      	movs	r3, #6
   27482:	e7e9      	b.n	27458 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   27484:	2307      	movs	r3, #7
   27486:	e7e7      	b.n	27458 <lte_lc_system_mode_get+0x6c>
		LOG_ERR("Invalid system mode, assuming parsing error");
   27488:	2145      	movs	r1, #69	; 0x45
   2748a:	4816      	ldr	r0, [pc, #88]	; (274e4 <lte_lc_system_mode_get+0xf8>)
   2748c:	f015 fb38 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   27490:	f06f 000d 	mvn.w	r0, #13
			mode_pref_current, *preference);
		mode_pref_current = *preference;
	}

	return 0;
}
   27494:	b007      	add	sp, #28
   27496:	bd30      	pop	{r4, r5, pc}
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   27498:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   2749a:	7023      	strb	r3, [r4, #0]
	if (sys_mode_current != *mode) {
   2749c:	4b12      	ldr	r3, [pc, #72]	; (274e8 <lte_lc_system_mode_get+0xfc>)
   2749e:	782a      	ldrb	r2, [r5, #0]
   274a0:	7819      	ldrb	r1, [r3, #0]
   274a2:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   274a4:	bf18      	it	ne
   274a6:	701a      	strbne	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   274a8:	b12c      	cbz	r4, 274b6 <lte_lc_system_mode_get+0xca>
   274aa:	4b10      	ldr	r3, [pc, #64]	; (274ec <lte_lc_system_mode_get+0x100>)
   274ac:	7822      	ldrb	r2, [r4, #0]
   274ae:	7819      	ldrb	r1, [r3, #0]
   274b0:	4291      	cmp	r1, r2
   274b2:	d000      	beq.n	274b6 <lte_lc_system_mode_get+0xca>
		mode_pref_current = *preference;
   274b4:	701a      	strb	r2, [r3, #0]
	return 0;
   274b6:	2000      	movs	r0, #0
   274b8:	e7ec      	b.n	27494 <lte_lc_system_mode_get+0xa8>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   274ba:	2301      	movs	r3, #1
   274bc:	e7ed      	b.n	2749a <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   274be:	2302      	movs	r3, #2
   274c0:	e7eb      	b.n	2749a <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   274c2:	2303      	movs	r3, #3
   274c4:	e7e9      	b.n	2749a <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   274c6:	2304      	movs	r3, #4
   274c8:	e7e7      	b.n	2749a <lte_lc_system_mode_get+0xae>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   274ca:	2145      	movs	r1, #69	; 0x45
   274cc:	4808      	ldr	r0, [pc, #32]	; (274f0 <lte_lc_system_mode_get+0x104>)
   274ce:	e7a2      	b.n	27416 <lte_lc_system_mode_get+0x2a>
		return -EINVAL;
   274d0:	f06f 0015 	mvn.w	r0, #21
   274d4:	e7de      	b.n	27494 <lte_lc_system_mode_get+0xa8>
   274d6:	bf00      	nop
   274d8:	000457d1 	.word	0x000457d1
   274dc:	000457ec 	.word	0x000457ec
   274e0:	000457fc 	.word	0x000457fc
   274e4:	00045826 	.word	0x00045826
   274e8:	2001b702 	.word	0x2001b702
   274ec:	2001b65e 	.word	0x2001b65e
   274f0:	00045857 	.word	0x00045857

000274f4 <init_and_config>:
{
   274f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (is_initialized) {
   274f6:	4d1b      	ldr	r5, [pc, #108]	; (27564 <init_and_config+0x70>)
   274f8:	7829      	ldrb	r1, [r5, #0]
   274fa:	bb81      	cbnz	r1, 2755e <init_and_config+0x6a>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   274fc:	4e1a      	ldr	r6, [pc, #104]	; (27568 <init_and_config+0x74>)
   274fe:	4f1b      	ldr	r7, [pc, #108]	; (2756c <init_and_config+0x78>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   27500:	2201      	movs	r2, #1
   27502:	481b      	ldr	r0, [pc, #108]	; (27570 <init_and_config+0x7c>)
   27504:	f019 fd6a 	bl	40fdc <z_impl_k_sem_init>
   27508:	4631      	mov	r1, r6
   2750a:	4638      	mov	r0, r7
   2750c:	f7ff ff6e 	bl	273ec <lte_lc_system_mode_get>
	if (err) {
   27510:	4604      	mov	r4, r0
   27512:	b130      	cbz	r0, 27522 <init_and_config+0x2e>
		LOG_ERR("Could not get current system mode, error: %d", err);
   27514:	2145      	movs	r1, #69	; 0x45
   27516:	4602      	mov	r2, r0
   27518:	4816      	ldr	r0, [pc, #88]	; (27574 <init_and_config+0x80>)
			LOG_ERR("Could not set system mode, error: %d", err);
   2751a:	f015 faf1 	bl	3cb00 <z_log_minimal_printk>
}
   2751e:	4620      	mov	r0, r4
   27520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sys_mode_current != sys_mode_target) ||
   27522:	4b15      	ldr	r3, [pc, #84]	; (27578 <init_and_config+0x84>)
   27524:	7818      	ldrb	r0, [r3, #0]
	    (mode_pref_current != mode_pref_target)) {
   27526:	4b15      	ldr	r3, [pc, #84]	; (2757c <init_and_config+0x88>)
   27528:	7819      	ldrb	r1, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   2752a:	783b      	ldrb	r3, [r7, #0]
   2752c:	4283      	cmp	r3, r0
   2752e:	d102      	bne.n	27536 <init_and_config+0x42>
   27530:	7833      	ldrb	r3, [r6, #0]
   27532:	428b      	cmp	r3, r1
   27534:	d007      	beq.n	27546 <init_and_config+0x52>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   27536:	f7ff ff17 	bl	27368 <lte_lc_system_mode_set>
		if (err) {
   2753a:	4604      	mov	r4, r0
   2753c:	b118      	cbz	r0, 27546 <init_and_config+0x52>
			LOG_ERR("Could not set system mode, error: %d", err);
   2753e:	4602      	mov	r2, r0
   27540:	2145      	movs	r1, #69	; 0x45
   27542:	480f      	ldr	r0, [pc, #60]	; (27580 <init_and_config+0x8c>)
   27544:	e7e9      	b.n	2751a <init_and_config+0x26>
	err = enable_notifications();
   27546:	f7ff fd71 	bl	2702c <enable_notifications>
	if (err) {
   2754a:	4604      	mov	r4, r0
   2754c:	b120      	cbz	r0, 27558 <init_and_config+0x64>
		LOG_ERR("Failed to enable notifications");
   2754e:	2145      	movs	r1, #69	; 0x45
   27550:	480c      	ldr	r0, [pc, #48]	; (27584 <init_and_config+0x90>)
   27552:	f015 fad5 	bl	3cb00 <z_log_minimal_printk>
		return err;
   27556:	e7e2      	b.n	2751e <init_and_config+0x2a>
	is_initialized = true;
   27558:	2301      	movs	r3, #1
   2755a:	702b      	strb	r3, [r5, #0]
	return 0;
   2755c:	e7df      	b.n	2751e <init_and_config+0x2a>
		return 0;
   2755e:	2400      	movs	r4, #0
   27560:	e7dd      	b.n	2751e <init_and_config+0x2a>
   27562:	bf00      	nop
   27564:	2001b65d 	.word	0x2001b65d
   27568:	2001b65e 	.word	0x2001b65e
   2756c:	2001b702 	.word	0x2001b702
   27570:	200193f0 	.word	0x200193f0
   27574:	0004587b 	.word	0x0004587b
   27578:	20014c44 	.word	0x20014c44
   2757c:	2001b65f 	.word	0x2001b65f
   27580:	000458ad 	.word	0x000458ad
   27584:	000458d7 	.word	0x000458d7

00027588 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   27588:	b513      	push	{r0, r1, r4, lr}
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   2758a:	4604      	mov	r4, r0
   2758c:	b1a8      	cbz	r0, 275ba <lte_lc_func_mode_get+0x32>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   2758e:	f10d 0206 	add.w	r2, sp, #6
   27592:	490b      	ldr	r1, [pc, #44]	; (275c0 <lte_lc_func_mode_get+0x38>)
   27594:	480b      	ldr	r0, [pc, #44]	; (275c4 <lte_lc_func_mode_get+0x3c>)
   27596:	f00d fdd9 	bl	3514c <nrf_modem_at_scanf>
	if (err != 1) {
   2759a:	2801      	cmp	r0, #1
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   2759c:	4602      	mov	r2, r0
	if (err != 1) {
   2759e:	d007      	beq.n	275b0 <lte_lc_func_mode_get+0x28>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   275a0:	4809      	ldr	r0, [pc, #36]	; (275c8 <lte_lc_func_mode_get+0x40>)
   275a2:	2145      	movs	r1, #69	; 0x45
   275a4:	f015 faac 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   275a8:	f06f 000d 	mvn.w	r0, #13
	}

	*mode = mode_tmp;

	return 0;
}
   275ac:	b002      	add	sp, #8
   275ae:	bd10      	pop	{r4, pc}
	*mode = mode_tmp;
   275b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return 0;
   275b4:	2000      	movs	r0, #0
	*mode = mode_tmp;
   275b6:	7023      	strb	r3, [r4, #0]
	return 0;
   275b8:	e7f8      	b.n	275ac <lte_lc_func_mode_get+0x24>
		return -EINVAL;
   275ba:	f06f 0015 	mvn.w	r0, #21
   275be:	e7f5      	b.n	275ac <lte_lc_func_mode_get+0x24>
   275c0:	000458fb 	.word	0x000458fb
   275c4:	00045906 	.word	0x00045906
   275c8:	0004590f 	.word	0x0004590f

000275cc <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
	int err;

	switch (mode) {
   275cc:	2804      	cmp	r0, #4
{
   275ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   275d2:	4604      	mov	r4, r0
	switch (mode) {
   275d4:	d819      	bhi.n	2760a <lte_lc_func_mode_set+0x3e>
   275d6:	2804      	cmp	r0, #4
   275d8:	d81c      	bhi.n	27614 <lte_lc_func_mode_set+0x48>
   275da:	e8df f000 	tbb	[pc, r0]
   275de:	0b25      	.short	0x0b25
   275e0:	1b25      	.short	0x1b25
   275e2:	25          	.byte	0x25
   275e3:	00          	.byte	0x00
   275e4:	2201      	movs	r2, #1
   275e6:	fa02 f303 	lsl.w	r3, r2, r3
   275ea:	4a1f      	ldr	r2, [pc, #124]	; (27668 <lte_lc_func_mode_set+0x9c>)
   275ec:	4213      	tst	r3, r2
   275ee:	d11b      	bne.n	27628 <lte_lc_func_mode_set+0x5c>
   275f0:	079b      	lsls	r3, r3, #30
   275f2:	d50f      	bpl.n	27614 <lte_lc_func_mode_set+0x48>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   275f4:	f7ff fd1a 	bl	2702c <enable_notifications>
		if (err) {
   275f8:	4602      	mov	r2, r0
   275fa:	b1a8      	cbz	r0, 27628 <lte_lc_func_mode_set+0x5c>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   275fc:	2145      	movs	r1, #69	; 0x45
   275fe:	481b      	ldr	r0, [pc, #108]	; (2766c <lte_lc_func_mode_set+0xa0>)
   27600:	f015 fa7e 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
	}

	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
	if (err) {
		return -EFAULT;
   27604:	f06f 050d 	mvn.w	r5, #13
   27608:	e00b      	b.n	27622 <lte_lc_func_mode_set+0x56>
	switch (mode) {
   2760a:	f1a0 0314 	sub.w	r3, r0, #20
   2760e:	b2db      	uxtb	r3, r3
   27610:	2b18      	cmp	r3, #24
   27612:	d9e7      	bls.n	275e4 <lte_lc_func_mode_set+0x18>
		LOG_ERR("Invalid functional mode: %d", mode);
   27614:	4622      	mov	r2, r4
   27616:	2145      	movs	r1, #69	; 0x45
   27618:	4815      	ldr	r0, [pc, #84]	; (27670 <lte_lc_func_mode_set+0xa4>)
   2761a:	f015 fa71 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   2761e:	f06f 0515 	mvn.w	r5, #21
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   27622:	4628      	mov	r0, r5
   27624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   27628:	4621      	mov	r1, r4
   2762a:	4812      	ldr	r0, [pc, #72]	; (27674 <lte_lc_func_mode_set+0xa8>)
   2762c:	f00d fcfc 	bl	35028 <nrf_modem_at_printf>
	if (err) {
   27630:	4605      	mov	r5, r0
   27632:	2800      	cmp	r0, #0
   27634:	d1e6      	bne.n	27604 <lte_lc_func_mode_set+0x38>
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   27636:	4e10      	ldr	r6, [pc, #64]	; (27678 <lte_lc_func_mode_set+0xac>)
   27638:	4f10      	ldr	r7, [pc, #64]	; (2767c <lte_lc_func_mode_set+0xb0>)
   2763a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 27684 <lte_lc_func_mode_set+0xb8>
   2763e:	42be      	cmp	r6, r7
   27640:	d90a      	bls.n	27658 <lte_lc_func_mode_set+0x8c>
   27642:	4641      	mov	r1, r8
   27644:	480e      	ldr	r0, [pc, #56]	; (27680 <lte_lc_func_mode_set+0xb4>)
   27646:	f240 5229 	movw	r2, #1321	; 0x529
   2764a:	f015 fa1f 	bl	3ca8c <assert_print>
   2764e:	f240 5129 	movw	r1, #1321	; 0x529
   27652:	4640      	mov	r0, r8
   27654:	f015 fa13 	bl	3ca7e <assert_post_action>
   27658:	42be      	cmp	r6, r7
   2765a:	d2e2      	bcs.n	27622 <lte_lc_func_mode_set+0x56>
		e->callback(mode, e->context);
   2765c:	e9d6 3100 	ldrd	r3, r1, [r6]
   27660:	4620      	mov	r0, r4
   27662:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   27664:	3608      	adds	r6, #8
   27666:	e7ea      	b.n	2763e <lte_lc_func_mode_set+0x72>
   27668:	01300c01 	.word	0x01300c01
   2766c:	0004594f 	.word	0x0004594f
   27670:	0004597e 	.word	0x0004597e
   27674:	0004599f 	.word	0x0004599f
   27678:	0004c048 	.word	0x0004c048
   2767c:	0004c048 	.word	0x0004c048
   27680:	0004409e 	.word	0x0004409e
   27684:	000452b9 	.word	0x000452b9

00027688 <connect_lte>:
	if (!is_initialized) {
   27688:	4b3e      	ldr	r3, [pc, #248]	; (27784 <connect_lte+0xfc>)
{
   2768a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!is_initialized) {
   2768e:	781b      	ldrb	r3, [r3, #0]
{
   27690:	4605      	mov	r5, r0
	if (!is_initialized) {
   27692:	b943      	cbnz	r3, 276a6 <connect_lte+0x1e>
		LOG_ERR("The LTE link controller is not initialized");
   27694:	483c      	ldr	r0, [pc, #240]	; (27788 <connect_lte+0x100>)
   27696:	2145      	movs	r1, #69	; 0x45
   27698:	f015 fa32 	bl	3cb00 <z_log_minimal_printk>
		return -EPERM;
   2769c:	f04f 30ff 	mov.w	r0, #4294967295
}
   276a0:	b002      	add	sp, #8
   276a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   276a6:	2601      	movs	r6, #1
   276a8:	4c38      	ldr	r4, [pc, #224]	; (2778c <connect_lte+0x104>)
   276aa:	e8d4 3fef 	ldaex	r3, [r4]
   276ae:	e8c4 6fe2 	stlex	r2, r6, [r4]
   276b2:	2a00      	cmp	r2, #0
   276b4:	d1f9      	bne.n	276aa <connect_lte+0x22>
	if (atomic_set(&in_progress, 1)) {
   276b6:	2b00      	cmp	r3, #0
   276b8:	d160      	bne.n	2777c <connect_lte+0xf4>
	err = lte_lc_nw_reg_status_get(&reg_status);
   276ba:	f10d 0007 	add.w	r0, sp, #7
   276be:	f7ff fe2f 	bl	27320 <lte_lc_nw_reg_status_get>
	if (err) {
   276c2:	b130      	cbz	r0, 276d2 <connect_lte+0x4a>
		LOG_ERR("Failed to get current registration status");
   276c4:	4832      	ldr	r0, [pc, #200]	; (27790 <connect_lte+0x108>)
   276c6:	2145      	movs	r1, #69	; 0x45
   276c8:	f015 fa1a 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   276cc:	f06f 000d 	mvn.w	r0, #13
   276d0:	e7e6      	b.n	276a0 <connect_lte+0x18>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   276d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   276d6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   276da:	2b01      	cmp	r3, #1
   276dc:	d0e0      	beq.n	276a0 <connect_lte+0x18>
	if (blocking) {
   276de:	b125      	cbz	r5, 276ea <connect_lte+0x62>
   276e0:	4601      	mov	r1, r0
   276e2:	4632      	mov	r2, r6
   276e4:	482b      	ldr	r0, [pc, #172]	; (27794 <connect_lte+0x10c>)
   276e6:	f019 fc79 	bl	40fdc <z_impl_k_sem_init>
{
   276ea:	2702      	movs	r7, #2
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   276ec:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 277a4 <connect_lte+0x11c>
   276f0:	4e29      	ldr	r6, [pc, #164]	; (27798 <connect_lte+0x110>)
		err = lte_lc_func_mode_get(&current_func_mode);
   276f2:	f10d 0006 	add.w	r0, sp, #6
   276f6:	f7ff ff47 	bl	27588 <lte_lc_func_mode_get>
		if (err) {
   276fa:	b9b8      	cbnz	r0, 2772c <connect_lte+0xa4>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   276fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   27700:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   27704:	d00b      	beq.n	2771e <connect_lte+0x96>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   27706:	2001      	movs	r0, #1
   27708:	f7ff ff60 	bl	275cc <lte_lc_func_mode_set>
		if (err || !blocking) {
   2770c:	b188      	cbz	r0, 27732 <connect_lte+0xaa>
   2770e:	2300      	movs	r3, #0
   27710:	e8d4 2fef 	ldaex	r2, [r4]
   27714:	e8c4 3fe1 	stlex	r1, r3, [r4]
   27718:	2900      	cmp	r1, #0
   2771a:	d0c1      	beq.n	276a0 <connect_lte+0x18>
   2771c:	e7f8      	b.n	27710 <connect_lte+0x88>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   2771e:	f898 1000 	ldrb.w	r1, [r8]
   27722:	7830      	ldrb	r0, [r6, #0]
   27724:	f7ff fe20 	bl	27368 <lte_lc_system_mode_set>
			if (err) {
   27728:	2800      	cmp	r0, #0
   2772a:	d0ec      	beq.n	27706 <connect_lte+0x7e>
			err = -EFAULT;
   2772c:	f06f 000d 	mvn.w	r0, #13
   27730:	e7ed      	b.n	2770e <connect_lte+0x86>
		if (err || !blocking) {
   27732:	2d00      	cmp	r5, #0
   27734:	d0eb      	beq.n	2770e <connect_lte+0x86>
	return z_impl_k_sem_take(sem, timeout);
   27736:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   2773a:	2300      	movs	r3, #0
   2773c:	4815      	ldr	r0, [pc, #84]	; (27794 <connect_lte+0x10c>)
   2773e:	f00f fb57 	bl	36df0 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   27742:	f110 0f0b 	cmn.w	r0, #11
   27746:	d1e2      	bne.n	2770e <connect_lte+0x86>
			LOG_INF("Network connection attempt timed out");
   27748:	2149      	movs	r1, #73	; 0x49
   2774a:	4814      	ldr	r0, [pc, #80]	; (2779c <connect_lte+0x114>)
   2774c:	f015 f9d8 	bl	3cb00 <z_log_minimal_printk>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   27750:	2f01      	cmp	r7, #1
   27752:	d010      	beq.n	27776 <connect_lte+0xee>
				if (sys_mode_target == sys_mode_preferred) {
   27754:	7833      	ldrb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   27756:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_preferred;
   27758:	2b04      	cmp	r3, #4
   2775a:	bf0c      	ite	eq
   2775c:	2305      	moveq	r3, #5
   2775e:	2304      	movne	r3, #4
   27760:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   27762:	f7ff ff33 	bl	275cc <lte_lc_func_mode_set>
				if (err) {
   27766:	2800      	cmp	r0, #0
   27768:	d1e0      	bne.n	2772c <connect_lte+0xa4>
				LOG_INF("Using fallback network mode");
   2776a:	2149      	movs	r1, #73	; 0x49
   2776c:	480c      	ldr	r0, [pc, #48]	; (277a0 <connect_lte+0x118>)
   2776e:	f015 f9c7 	bl	3cb00 <z_log_minimal_printk>
   27772:	2701      	movs	r7, #1
   27774:	e7bd      	b.n	276f2 <connect_lte+0x6a>
				err = -ETIMEDOUT;
   27776:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2777a:	e7c8      	b.n	2770e <connect_lte+0x86>
		return -EINPROGRESS;
   2777c:	f06f 0076 	mvn.w	r0, #118	; 0x76
   27780:	e78e      	b.n	276a0 <connect_lte+0x18>
   27782:	bf00      	nop
   27784:	2001b65d 	.word	0x2001b65d
   27788:	000459aa 	.word	0x000459aa
   2778c:	200193ec 	.word	0x200193ec
   27790:	000459da 	.word	0x000459da
   27794:	200193f0 	.word	0x200193f0
   27798:	20014c44 	.word	0x20014c44
   2779c:	00045a09 	.word	0x00045a09
   277a0:	00045a33 	.word	0x00045a33
   277a4:	2001b65e 	.word	0x2001b65e

000277a8 <lte_lc_connect_async>:
{
   277a8:	b508      	push	{r3, lr}
	if (handler) {
   277aa:	b130      	cbz	r0, 277ba <lte_lc_connect_async+0x12>
		event_handler_list_append_handler(handler);
   277ac:	f000 f872 	bl	27894 <event_handler_list_append_handler>
}
   277b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(false);
   277b4:	2000      	movs	r0, #0
   277b6:	f7ff bf67 	b.w	27688 <connect_lte>
	} else if (event_handler_list_is_empty()) {
   277ba:	f000 f863 	bl	27884 <event_handler_list_is_empty>
   277be:	2800      	cmp	r0, #0
   277c0:	d0f6      	beq.n	277b0 <lte_lc_connect_async+0x8>
		LOG_ERR("No handler registered");
   277c2:	2145      	movs	r1, #69	; 0x45
   277c4:	4802      	ldr	r0, [pc, #8]	; (277d0 <lte_lc_connect_async+0x28>)
   277c6:	f015 f99b 	bl	3cb00 <z_log_minimal_printk>
}
   277ca:	f06f 0015 	mvn.w	r0, #21
   277ce:	bd08      	pop	{r3, pc}
   277d0:	00045a54 	.word	0x00045a54

000277d4 <lte_lc_deinit>:
{
   277d4:	b508      	push	{r3, lr}
	if (is_initialized) {
   277d6:	4b06      	ldr	r3, [pc, #24]	; (277f0 <lte_lc_deinit+0x1c>)
   277d8:	781a      	ldrb	r2, [r3, #0]
   277da:	b122      	cbz	r2, 277e6 <lte_lc_deinit+0x12>
		is_initialized = false;
   277dc:	2000      	movs	r0, #0
   277de:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   277e0:	f7ff fef4 	bl	275cc <lte_lc_func_mode_set>
   277e4:	b908      	cbnz	r0, 277ea <lte_lc_deinit+0x16>
   277e6:	2000      	movs	r0, #0
}
   277e8:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   277ea:	f06f 000d 	mvn.w	r0, #13
   277ee:	e7fb      	b.n	277e8 <lte_lc_deinit+0x14>
   277f0:	2001b65d 	.word	0x2001b65d

000277f4 <lte_lc_neighbor_cell_measurement>:
	 * the type of search.
	 * If the type is LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT, we therefore use the AT
	 * command without parameters to avoid error messages for older firmware version.
	 */

	if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_LIGHT) {
   277f4:	2801      	cmp	r0, #1
{
   277f6:	b508      	push	{r3, lr}
	if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_LIGHT) {
   277f8:	d107      	bne.n	2780a <lte_lc_neighbor_cell_measurement+0x16>
		err = nrf_modem_at_printf("AT%%NCELLMEAS=1");
   277fa:	4806      	ldr	r0, [pc, #24]	; (27814 <lte_lc_neighbor_cell_measurement+0x20>)
	} else if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
		err = nrf_modem_at_printf("AT%%NCELLMEAS=2");
	} else {
		/* Defaulting to use LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT */
		err = nrf_modem_at_printf("AT%%NCELLMEAS");
   277fc:	f00d fc14 	bl	35028 <nrf_modem_at_printf>
	}

	return err ? -EFAULT : 0;
   27800:	2800      	cmp	r0, #0
}
   27802:	bf18      	it	ne
   27804:	f06f 000d 	mvnne.w	r0, #13
   27808:	bd08      	pop	{r3, pc}
	} else if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   2780a:	2802      	cmp	r0, #2
		err = nrf_modem_at_printf("AT%%NCELLMEAS=2");
   2780c:	bf0c      	ite	eq
   2780e:	4802      	ldreq	r0, [pc, #8]	; (27818 <lte_lc_neighbor_cell_measurement+0x24>)
		err = nrf_modem_at_printf("AT%%NCELLMEAS");
   27810:	4802      	ldrne	r0, [pc, #8]	; (2781c <lte_lc_neighbor_cell_measurement+0x28>)
   27812:	e7f3      	b.n	277fc <lte_lc_neighbor_cell_measurement+0x8>
   27814:	00045a6f 	.word	0x00045a6f
   27818:	00045a7f 	.word	0x00045a7f
   2781c:	00045a8f 	.word	0x00045a8f

00027820 <lte_lc_neighbor_cell_measurement_cancel>:

int lte_lc_neighbor_cell_measurement_cancel(void)
{
   27820:	b508      	push	{r3, lr}
	return nrf_modem_at_printf(AT_NCELLMEAS_STOP) ? -EFAULT : 0;
   27822:	4804      	ldr	r0, [pc, #16]	; (27834 <lte_lc_neighbor_cell_measurement_cancel+0x14>)
   27824:	f00d fc00 	bl	35028 <nrf_modem_at_printf>
   27828:	2800      	cmp	r0, #0
}
   2782a:	bf18      	it	ne
   2782c:	f06f 000d 	mvnne.w	r0, #13
   27830:	bd08      	pop	{r3, pc}
   27832:	bf00      	nop
   27834:	00045a9d 	.word	0x00045a9d

00027838 <lte_lc_modem_events_enable>:

	return 0;
}

int lte_lc_modem_events_enable(void)
{
   27838:	b508      	push	{r3, lr}
	return nrf_modem_at_printf(AT_MDMEV_ENABLE) ? -EFAULT : 0;
   2783a:	4804      	ldr	r0, [pc, #16]	; (2784c <lte_lc_modem_events_enable+0x14>)
   2783c:	f00d fbf4 	bl	35028 <nrf_modem_at_printf>
   27840:	2800      	cmp	r0, #0
}
   27842:	bf18      	it	ne
   27844:	f06f 000d 	mvnne.w	r0, #13
   27848:	bd08      	pop	{r3, pc}
   2784a:	bf00      	nop
   2784c:	00045aaf 	.word	0x00045aaf

00027850 <event_handler_list_find_node>:
	return list->head;
   27850:	4b08      	ldr	r3, [pc, #32]	; (27874 <event_handler_list_find_node+0x24>)
{
   27852:	4602      	mov	r2, r0
   27854:	6818      	ldr	r0, [r3, #0]
   27856:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   27858:	b120      	cbz	r0, 27864 <event_handler_list_find_node+0x14>
   2785a:	2400      	movs	r4, #0
		if (curr->handler == handler) {
   2785c:	6843      	ldr	r3, [r0, #4]
   2785e:	428b      	cmp	r3, r1
   27860:	d101      	bne.n	27866 <event_handler_list_find_node+0x16>
			*prev_out = prev;
   27862:	6014      	str	r4, [r2, #0]
}
   27864:	bd10      	pop	{r4, pc}
	return node->next;
   27866:	6803      	ldr	r3, [r0, #0]
   27868:	4604      	mov	r4, r0
   2786a:	4618      	mov	r0, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   2786c:	2b00      	cmp	r3, #0
   2786e:	d1f5      	bne.n	2785c <event_handler_list_find_node+0xc>
   27870:	e7f8      	b.n	27864 <event_handler_list_find_node+0x14>
   27872:	bf00      	nop
   27874:	20019410 	.word	0x20019410

00027878 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   27878:	4801      	ldr	r0, [pc, #4]	; (27880 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   2787a:	f00f b8fd 	b.w	36a78 <z_impl_k_mutex_unlock>
   2787e:	bf00      	nop
   27880:	20014f40 	.word	0x20014f40

00027884 <event_handler_list_is_empty>:
	return list->head;
   27884:	4b02      	ldr	r3, [pc, #8]	; (27890 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   27886:	6818      	ldr	r0, [r3, #0]
}
   27888:	fab0 f080 	clz	r0, r0
   2788c:	0940      	lsrs	r0, r0, #5
   2788e:	4770      	bx	lr
   27890:	20019410 	.word	0x20019410

00027894 <event_handler_list_append_handler>:
{
   27894:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27896:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   27898:	f04f 32ff 	mov.w	r2, #4294967295
   2789c:	f04f 33ff 	mov.w	r3, #4294967295
   278a0:	4812      	ldr	r0, [pc, #72]	; (278ec <event_handler_list_append_handler+0x58>)
   278a2:	f00f f817 	bl	368d4 <z_impl_k_mutex_lock>
	if (event_handler_list_find_node(&to_ins, handler) != NULL) {
   278a6:	4629      	mov	r1, r5
   278a8:	a801      	add	r0, sp, #4
   278aa:	f7ff ffd1 	bl	27850 <event_handler_list_find_node>
   278ae:	4604      	mov	r4, r0
   278b0:	b120      	cbz	r0, 278bc <event_handler_list_append_handler+0x28>
		k_mutex_unlock(&list_mtx);
   278b2:	f7ff ffe1 	bl	27878 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   278b6:	2000      	movs	r0, #0
}
   278b8:	b003      	add	sp, #12
   278ba:	bd30      	pop	{r4, r5, pc}
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   278bc:	2008      	movs	r0, #8
   278be:	f019 fd0f 	bl	412e0 <k_malloc>
   278c2:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   278c4:	b920      	cbnz	r0, 278d0 <event_handler_list_append_handler+0x3c>
		k_mutex_unlock(&list_mtx);
   278c6:	f7ff ffd7 	bl	27878 <k_mutex_unlock.constprop.0.isra.0>
		return -ENOBUFS;
   278ca:	f06f 0068 	mvn.w	r0, #104	; 0x68
   278ce:	e7f3      	b.n	278b8 <event_handler_list_append_handler+0x24>
	return list->tail;
   278d0:	4a07      	ldr	r2, [pc, #28]	; (278f0 <event_handler_list_append_handler+0x5c>)
   278d2:	6004      	str	r4, [r0, #0]
   278d4:	6044      	str	r4, [r0, #4]
	to_ins->handler = handler;
   278d6:	9b01      	ldr	r3, [sp, #4]
   278d8:	6851      	ldr	r1, [r2, #4]
	parent->next = child;
   278da:	e9c3 4500 	strd	r4, r5, [r3]
Z_GENLIST_APPEND(slist, snode)
   278de:	b911      	cbnz	r1, 278e6 <event_handler_list_append_handler+0x52>
	list->head = node;
   278e0:	e9c2 3300 	strd	r3, r3, [r2]
}
   278e4:	e7e5      	b.n	278b2 <event_handler_list_append_handler+0x1e>
	parent->next = child;
   278e6:	600b      	str	r3, [r1, #0]
	list->tail = node;
   278e8:	6053      	str	r3, [r2, #4]
}
   278ea:	e7e2      	b.n	278b2 <event_handler_list_append_handler+0x1e>
   278ec:	20014f40 	.word	0x20014f40
   278f0:	20019410 	.word	0x20019410

000278f4 <event_handler_list_dispatch>:
{
   278f4:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   278f6:	4c0d      	ldr	r4, [pc, #52]	; (2792c <event_handler_list_dispatch+0x38>)
   278f8:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   278fa:	6823      	ldr	r3, [r4, #0]
   278fc:	b1ab      	cbz	r3, 2792a <event_handler_list_dispatch+0x36>
   278fe:	f04f 33ff 	mov.w	r3, #4294967295
   27902:	f04f 32ff 	mov.w	r2, #4294967295
   27906:	480a      	ldr	r0, [pc, #40]	; (27930 <event_handler_list_dispatch+0x3c>)
   27908:	f00e ffe4 	bl	368d4 <z_impl_k_mutex_lock>
   2790c:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2790e:	b91b      	cbnz	r3, 27918 <event_handler_list_dispatch+0x24>
}
   27910:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   27914:	f7ff bfb0 	b.w	27878 <k_mutex_unlock.constprop.0.isra.0>
	return node->next;
   27918:	681c      	ldr	r4, [r3, #0]
		curr->handler(evt);
   2791a:	4628      	mov	r0, r5
   2791c:	685b      	ldr	r3, [r3, #4]
   2791e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27920:	2c00      	cmp	r4, #0
   27922:	d0f5      	beq.n	27910 <event_handler_list_dispatch+0x1c>
   27924:	4623      	mov	r3, r4
   27926:	6824      	ldr	r4, [r4, #0]
   27928:	e7f7      	b.n	2791a <event_handler_list_dispatch+0x26>
}
   2792a:	bd38      	pop	{r3, r4, r5, pc}
   2792c:	20019410 	.word	0x20019410
   27930:	20014f40 	.word	0x20014f40

00027934 <response_is_valid>:
{
   27934:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27936:	460d      	mov	r5, r1
	if ((response == NULL) || (check == NULL)) {
   27938:	4604      	mov	r4, r0
   2793a:	b100      	cbz	r0, 2793e <response_is_valid+0xa>
   2793c:	b92a      	cbnz	r2, 2794a <response_is_valid+0x16>
		LOG_ERR("Invalid pointer provided");
   2793e:	2145      	movs	r1, #69	; 0x45
   27940:	480a      	ldr	r0, [pc, #40]	; (2796c <response_is_valid+0x38>)
   27942:	f015 f8dd 	bl	3cb00 <z_log_minimal_printk>
		return false;
   27946:	2000      	movs	r0, #0
   27948:	e00d      	b.n	27966 <response_is_valid+0x32>
	if ((response_len < strlen(check)) ||
   2794a:	4610      	mov	r0, r2
   2794c:	9201      	str	r2, [sp, #4]
   2794e:	f7f5 fc78 	bl	1d242 <strlen>
   27952:	4285      	cmp	r5, r0
   27954:	d3f7      	bcc.n	27946 <response_is_valid+0x12>
	    (memcmp(response, check, response_len) != 0)) {
   27956:	462a      	mov	r2, r5
   27958:	4620      	mov	r0, r4
   2795a:	9901      	ldr	r1, [sp, #4]
   2795c:	f019 fd3a 	bl	413d4 <memcmp>
	if ((response_len < strlen(check)) ||
   27960:	fab0 f080 	clz	r0, r0
   27964:	0940      	lsrs	r0, r0, #5
}
   27966:	b003      	add	sp, #12
   27968:	bd30      	pop	{r4, r5, pc}
   2796a:	bf00      	nop
   2796c:	00045b34 	.word	0x00045b34

00027970 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   27970:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   27974:	f04f 0800 	mov.w	r8, #0
{
   27978:	4607      	mov	r7, r0
   2797a:	460e      	mov	r6, r1
   2797c:	4614      	mov	r4, r2
   2797e:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   27980:	f8cd 8004 	str.w	r8, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   27984:	f7f5 fc5d 	bl	1d242 <strlen>
   27988:	2808      	cmp	r0, #8
   2798a:	d004      	beq.n	27996 <parse_psm+0x26>
	memcpy(unit_str, active_time_str, unit_str_len);

	lut_idx = strtoul(unit_str, NULL, 2);
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
		LOG_ERR("Unable to parse active time string");
		return -EINVAL;
   2798c:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   27990:	b003      	add	sp, #12
   27992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   27996:	4630      	mov	r0, r6
   27998:	f7f5 fc53 	bl	1d242 <strlen>
   2799c:	2808      	cmp	r0, #8
   2799e:	d1f5      	bne.n	2798c <parse_psm+0x1c>
	memcpy(unit_str, tau_ext_str, unit_str_len);
   279a0:	8832      	ldrh	r2, [r6, #0]
   279a2:	78b3      	ldrb	r3, [r6, #2]
   279a4:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   279a8:	4641      	mov	r1, r8
   279aa:	2202      	movs	r2, #2
   279ac:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   279ae:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   279b2:	f013 f881 	bl	3aab8 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   279b6:	2807      	cmp	r0, #7
   279b8:	d904      	bls.n	279c4 <parse_psm+0x54>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   279ba:	2145      	movs	r1, #69	; 0x45
   279bc:	482d      	ldr	r0, [pc, #180]	; (27a74 <parse_psm+0x104>)
		LOG_ERR("Unable to parse active time string");
   279be:	f015 f89f 	bl	3cb00 <z_log_minimal_printk>
   279c2:	e7e3      	b.n	2798c <parse_psm+0x1c>
	timer_unit = t3412_ext_lookup[lut_idx];
   279c4:	4b2c      	ldr	r3, [pc, #176]	; (27a78 <parse_psm+0x108>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   279c6:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   279c8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   279cc:	4641      	mov	r1, r8
   279ce:	1cf0      	adds	r0, r6, #3
   279d0:	f013 f872 	bl	3aab8 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   279d4:	f1b9 0f00 	cmp.w	r9, #0
   279d8:	d118      	bne.n	27a0c <parse_psm+0x9c>
   279da:	f04f 33ff 	mov.w	r3, #4294967295
   279de:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   279e0:	b1cc      	cbz	r4, 27a16 <parse_psm+0xa6>
   279e2:	4620      	mov	r0, r4
   279e4:	f7f5 fc2d 	bl	1d242 <strlen>
   279e8:	2808      	cmp	r0, #8
   279ea:	d114      	bne.n	27a16 <parse_psm+0xa6>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   279ec:	8822      	ldrh	r2, [r4, #0]
   279ee:	78a3      	ldrb	r3, [r4, #2]
   279f0:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   279f4:	2100      	movs	r1, #0
   279f6:	2202      	movs	r2, #2
   279f8:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   279fa:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   279fe:	f013 f85b 	bl	3aab8 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   27a02:	2807      	cmp	r0, #7
   27a04:	d917      	bls.n	27a36 <parse_psm+0xc6>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   27a06:	2145      	movs	r1, #69	; 0x45
   27a08:	481c      	ldr	r0, [pc, #112]	; (27a7c <parse_psm+0x10c>)
   27a0a:	e7d8      	b.n	279be <parse_psm+0x4e>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   27a0c:	fb09 f000 	mul.w	r0, r9, r0
   27a10:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   27a12:	3001      	adds	r0, #1
   27a14:	d0e4      	beq.n	279e0 <parse_psm+0x70>
	memcpy(unit_str, active_time_str, unit_str_len);
   27a16:	883a      	ldrh	r2, [r7, #0]
   27a18:	78bb      	ldrb	r3, [r7, #2]
   27a1a:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   27a1e:	2100      	movs	r1, #0
   27a20:	2202      	movs	r2, #2
   27a22:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   27a24:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   27a28:	f013 f846 	bl	3aab8 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   27a2c:	2807      	cmp	r0, #7
   27a2e:	d911      	bls.n	27a54 <parse_psm+0xe4>
		LOG_ERR("Unable to parse active time string");
   27a30:	2145      	movs	r1, #69	; 0x45
   27a32:	4813      	ldr	r0, [pc, #76]	; (27a80 <parse_psm+0x110>)
   27a34:	e7c3      	b.n	279be <parse_psm+0x4e>
		timer_unit = t3412_lookup[lut_idx];
   27a36:	4b13      	ldr	r3, [pc, #76]	; (27a84 <parse_psm+0x114>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   27a38:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   27a3a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   27a3e:	2100      	movs	r1, #0
   27a40:	1ce0      	adds	r0, r4, #3
   27a42:	f013 f839 	bl	3aab8 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   27a46:	b116      	cbz	r6, 27a4e <parse_psm+0xde>
   27a48:	4346      	muls	r6, r0
   27a4a:	602e      	str	r6, [r5, #0]
   27a4c:	e7e3      	b.n	27a16 <parse_psm+0xa6>
   27a4e:	f04f 36ff 	mov.w	r6, #4294967295
   27a52:	e7fa      	b.n	27a4a <parse_psm+0xda>
	timer_unit = t3324_lookup[lut_idx];
   27a54:	4b0c      	ldr	r3, [pc, #48]	; (27a88 <parse_psm+0x118>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   27a56:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   27a58:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   27a5c:	2100      	movs	r1, #0
   27a5e:	1cf8      	adds	r0, r7, #3
   27a60:	f013 f82a 	bl	3aab8 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   27a64:	b11c      	cbz	r4, 27a6e <parse_psm+0xfe>
   27a66:	4344      	muls	r4, r0
	return 0;
   27a68:	2000      	movs	r0, #0
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   27a6a:	606c      	str	r4, [r5, #4]
	return 0;
   27a6c:	e790      	b.n	27990 <parse_psm+0x20>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   27a6e:	f04f 34ff 	mov.w	r4, #4294967295
   27a72:	e7f9      	b.n	27a68 <parse_psm+0xf8>
   27a74:	00045cb1 	.word	0x00045cb1
   27a78:	00042d2c 	.word	0x00042d2c
   27a7c:	00045ceb 	.word	0x00045ceb
   27a80:	00045d1c 	.word	0x00045d1c
   27a84:	00042d0c 	.word	0x00042d0c
   27a88:	00042d0c 	.word	0x00042d0c

00027a8c <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   27a8c:	2300      	movs	r3, #0
{
   27a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   27a90:	b085      	sub	sp, #20
   27a92:	4607      	mov	r7, r0
   27a94:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   27a96:	a802      	add	r0, sp, #8
   27a98:	2104      	movs	r1, #4
{
   27a9a:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   27a9c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   27aa0:	f017 fb6f 	bl	3f182 <at_params_list_init>
	if (err) {
   27aa4:	4604      	mov	r4, r0
   27aa6:	b138      	cbz	r0, 27ab8 <parse_rrc_mode+0x2c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27aa8:	4602      	mov	r2, r0
   27aaa:	2145      	movs	r1, #69	; 0x45
   27aac:	4817      	ldr	r0, [pc, #92]	; (27b0c <parse_rrc_mode+0x80>)
   27aae:	f015 f827 	bl	3cb00 <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   27ab2:	4620      	mov	r0, r4
   27ab4:	b005      	add	sp, #20
   27ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   27ab8:	4601      	mov	r1, r0
   27aba:	aa02      	add	r2, sp, #8
   27abc:	4638      	mov	r0, r7
   27abe:	f017 fb5d 	bl	3f17c <at_parser_params_from_str>
	if (err) {
   27ac2:	4604      	mov	r4, r0
   27ac4:	b140      	cbz	r0, 27ad8 <parse_rrc_mode+0x4c>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   27ac6:	2145      	movs	r1, #69	; 0x45
   27ac8:	4602      	mov	r2, r0
   27aca:	4811      	ldr	r0, [pc, #68]	; (27b10 <parse_rrc_mode+0x84>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   27acc:	f015 f818 	bl	3cb00 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   27ad0:	a802      	add	r0, sp, #8
   27ad2:	f017 fb69 	bl	3f1a8 <at_params_list_free>
	return err;
   27ad6:	e7ec      	b.n	27ab2 <parse_rrc_mode+0x26>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   27ad8:	4631      	mov	r1, r6
   27ada:	aa01      	add	r2, sp, #4
   27adc:	a802      	add	r0, sp, #8
   27ade:	f017 fc27 	bl	3f330 <at_params_int_get>
	if (err) {
   27ae2:	4604      	mov	r4, r0
   27ae4:	b118      	cbz	r0, 27aee <parse_rrc_mode+0x62>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   27ae6:	4602      	mov	r2, r0
   27ae8:	2145      	movs	r1, #69	; 0x45
   27aea:	480a      	ldr	r0, [pc, #40]	; (27b14 <parse_rrc_mode+0x88>)
   27aec:	e7ee      	b.n	27acc <parse_rrc_mode+0x40>
	if (temp_mode == 0) {
   27aee:	9a01      	ldr	r2, [sp, #4]
   27af0:	b90a      	cbnz	r2, 27af6 <parse_rrc_mode+0x6a>
		*mode = LTE_LC_RRC_MODE_IDLE;
   27af2:	7028      	strb	r0, [r5, #0]
   27af4:	e7ec      	b.n	27ad0 <parse_rrc_mode+0x44>
	} else if (temp_mode == 1) {
   27af6:	2a01      	cmp	r2, #1
   27af8:	d101      	bne.n	27afe <parse_rrc_mode+0x72>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   27afa:	702a      	strb	r2, [r5, #0]
   27afc:	e7e8      	b.n	27ad0 <parse_rrc_mode+0x44>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   27afe:	2145      	movs	r1, #69	; 0x45
   27b00:	4805      	ldr	r0, [pc, #20]	; (27b18 <parse_rrc_mode+0x8c>)
   27b02:	f014 fffd 	bl	3cb00 <z_log_minimal_printk>
		err = -EINVAL;
   27b06:	f06f 0415 	mvn.w	r4, #21
   27b0a:	e7e1      	b.n	27ad0 <parse_rrc_mode+0x44>
   27b0c:	00045b52 	.word	0x00045b52
   27b10:	00045d44 	.word	0x00045d44
   27b14:	00045d74 	.word	0x00045d74
   27b18:	00045da2 	.word	0x00045da2

00027b1c <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   27b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27b20:	461e      	mov	r6, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   27b22:	2300      	movs	r3, #0
{
   27b24:	b08b      	sub	sp, #44	; 0x2c
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   27b26:	9303      	str	r3, [sp, #12]
   27b28:	f8ad 3010 	strh.w	r3, [sp, #16]
   27b2c:	f88d 3012 	strb.w	r3, [sp, #18]
{
   27b30:	4691      	mov	r9, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   27b32:	2309      	movs	r3, #9
   27b34:	2207      	movs	r2, #7
{
   27b36:	4605      	mov	r5, r0
   27b38:	460f      	mov	r7, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   27b3a:	a805      	add	r0, sp, #20
   27b3c:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   27b3e:	e9cd 2300 	strd	r2, r3, [sp]
{
   27b42:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   27b46:	f017 fb1c 	bl	3f182 <at_params_list_init>
	if (err) {
   27b4a:	4604      	mov	r4, r0
   27b4c:	b140      	cbz	r0, 27b60 <parse_cereg+0x44>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27b4e:	4602      	mov	r2, r0
   27b50:	2145      	movs	r1, #69	; 0x45
   27b52:	4854      	ldr	r0, [pc, #336]	; (27ca4 <parse_cereg+0x188>)
   27b54:	f014 ffd4 	bl	3cb00 <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   27b58:	4620      	mov	r0, r4
   27b5a:	b00b      	add	sp, #44	; 0x2c
   27b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   27b60:	4601      	mov	r1, r0
   27b62:	aa05      	add	r2, sp, #20
   27b64:	4628      	mov	r0, r5
   27b66:	f017 fb09 	bl	3f17c <at_parser_params_from_str>
	if (err) {
   27b6a:	4604      	mov	r4, r0
   27b6c:	b140      	cbz	r0, 27b80 <parse_cereg+0x64>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   27b6e:	2145      	movs	r1, #69	; 0x45
   27b70:	4602      	mov	r2, r0
   27b72:	484d      	ldr	r0, [pc, #308]	; (27ca8 <parse_cereg+0x18c>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   27b74:	f014 ffc4 	bl	3cb00 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   27b78:	a805      	add	r0, sp, #20
   27b7a:	f017 fb15 	bl	3f1a8 <at_params_list_free>
	return err;
   27b7e:	e7eb      	b.n	27b58 <parse_cereg+0x3c>
	err = at_params_string_get(&resp_list,
   27b80:	4601      	mov	r1, r0
   27b82:	466b      	mov	r3, sp
   27b84:	aa03      	add	r2, sp, #12
   27b86:	a805      	add	r0, sp, #20
   27b88:	f017 fc07 	bl	3f39a <at_params_string_get>
	if (err) {
   27b8c:	4604      	mov	r4, r0
   27b8e:	b118      	cbz	r0, 27b98 <parse_cereg+0x7c>
		LOG_ERR("Could not get response prefix, error: %d", err);
   27b90:	4602      	mov	r2, r0
   27b92:	2145      	movs	r1, #69	; 0x45
   27b94:	4845      	ldr	r0, [pc, #276]	; (27cac <parse_cereg+0x190>)
   27b96:	e7ed      	b.n	27b74 <parse_cereg+0x58>
	if (!response_is_valid(response_prefix, response_prefix_len,
   27b98:	4a45      	ldr	r2, [pc, #276]	; (27cb0 <parse_cereg+0x194>)
   27b9a:	9900      	ldr	r1, [sp, #0]
   27b9c:	a803      	add	r0, sp, #12
   27b9e:	f7ff fec9 	bl	27934 <response_is_valid>
   27ba2:	2800      	cmp	r0, #0
   27ba4:	d0e8      	beq.n	27b78 <parse_cereg+0x5c>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   27ba6:	2f00      	cmp	r7, #0
	err = at_params_int_get(list, reg_status_index, &reg_status);
   27ba8:	bf14      	ite	ne
   27baa:	2101      	movne	r1, #1
   27bac:	2102      	moveq	r1, #2
   27bae:	aa07      	add	r2, sp, #28
   27bb0:	a805      	add	r0, sp, #20
   27bb2:	f017 fbbd 	bl	3f330 <at_params_int_get>
	if (err) {
   27bb6:	1e05      	subs	r5, r0, #0
   27bb8:	d132      	bne.n	27c20 <parse_cereg+0x104>
	switch (reg_status) {
   27bba:	9d07      	ldr	r5, [sp, #28]
   27bbc:	2d08      	cmp	r5, #8
   27bbe:	d012      	beq.n	27be6 <parse_cereg+0xca>
   27bc0:	dc0f      	bgt.n	27be2 <parse_cereg+0xc6>
   27bc2:	2d05      	cmp	r5, #5
   27bc4:	d90f      	bls.n	27be6 <parse_cereg+0xca>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   27bc6:	462a      	mov	r2, r5
   27bc8:	2145      	movs	r1, #69	; 0x45
   27bca:	483a      	ldr	r0, [pc, #232]	; (27cb4 <parse_cereg+0x198>)
   27bcc:	f014 ff98 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   27bd0:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   27bd4:	462a      	mov	r2, r5
   27bd6:	2145      	movs	r1, #69	; 0x45
   27bd8:	4837      	ldr	r0, [pc, #220]	; (27cb8 <parse_cereg+0x19c>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   27bda:	f014 ff91 	bl	3cb00 <z_log_minimal_printk>
			goto clean_exit;
   27bde:	462c      	mov	r4, r5
   27be0:	e7ca      	b.n	27b78 <parse_cereg+0x5c>
	switch (reg_status) {
   27be2:	2d5a      	cmp	r5, #90	; 0x5a
   27be4:	d1ef      	bne.n	27bc6 <parse_cereg+0xaa>
	if (reg_status) {
   27be6:	f1b9 0f00 	cmp.w	r9, #0
   27bea:	d001      	beq.n	27bf0 <parse_cereg+0xd4>
		*reg_status = status;
   27bec:	f889 5000 	strb.w	r5, [r9]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   27bf0:	2e00      	cmp	r6, #0
   27bf2:	d03e      	beq.n	27c72 <parse_cereg+0x156>
   27bf4:	2d5a      	cmp	r5, #90	; 0x5a
   27bf6:	d050      	beq.n	27c9a <parse_cereg+0x17e>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   27bf8:	a805      	add	r0, sp, #20
   27bfa:	f017 fbf5 	bl	3f3e8 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   27bfe:	2803      	cmp	r0, #3
   27c00:	d94b      	bls.n	27c9a <parse_cereg+0x17e>
		err = at_params_string_get(
   27c02:	2f00      	cmp	r7, #0
   27c04:	bf14      	ite	ne
   27c06:	2102      	movne	r1, #2
   27c08:	2103      	moveq	r1, #3
   27c0a:	ab01      	add	r3, sp, #4
   27c0c:	aa07      	add	r2, sp, #28
   27c0e:	a805      	add	r0, sp, #20
   27c10:	f017 fbc3 	bl	3f39a <at_params_string_get>
		if (err) {
   27c14:	4605      	mov	r5, r0
   27c16:	b128      	cbz	r0, 27c24 <parse_cereg+0x108>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   27c18:	4602      	mov	r2, r0
   27c1a:	2145      	movs	r1, #69	; 0x45
   27c1c:	4827      	ldr	r0, [pc, #156]	; (27cbc <parse_cereg+0x1a0>)
   27c1e:	e7dc      	b.n	27bda <parse_cereg+0xbe>
	if (status < 0) {
   27c20:	dae1      	bge.n	27be6 <parse_cereg+0xca>
   27c22:	e7d7      	b.n	27bd4 <parse_cereg+0xb8>
		str_buf[len] = '\0';
   27c24:	9b01      	ldr	r3, [sp, #4]
   27c26:	aa0a      	add	r2, sp, #40	; 0x28
   27c28:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   27c2a:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   27c2c:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   27c30:	2210      	movs	r2, #16
   27c32:	a807      	add	r0, sp, #28
   27c34:	f012 ff40 	bl	3aab8 <strtoul>
		len = sizeof(str_buf) - 1;
   27c38:	2309      	movs	r3, #9
		err = at_params_string_get(&resp_list,
   27c3a:	2f00      	cmp	r7, #0
		cell->tac = strtoul(str_buf, NULL, 16);
   27c3c:	60f0      	str	r0, [r6, #12]
		len = sizeof(str_buf) - 1;
   27c3e:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   27c40:	bf14      	ite	ne
   27c42:	2103      	movne	r1, #3
   27c44:	2104      	moveq	r1, #4
   27c46:	ab01      	add	r3, sp, #4
   27c48:	aa07      	add	r2, sp, #28
   27c4a:	a805      	add	r0, sp, #20
   27c4c:	f017 fba5 	bl	3f39a <at_params_string_get>
		if (err) {
   27c50:	4605      	mov	r5, r0
   27c52:	b118      	cbz	r0, 27c5c <parse_cereg+0x140>
			LOG_ERR("Could not get cell ID, error: %d", err);
   27c54:	4602      	mov	r2, r0
   27c56:	2145      	movs	r1, #69	; 0x45
   27c58:	4819      	ldr	r0, [pc, #100]	; (27cc0 <parse_cereg+0x1a4>)
   27c5a:	e7be      	b.n	27bda <parse_cereg+0xbe>
		str_buf[len] = '\0';
   27c5c:	9b01      	ldr	r3, [sp, #4]
   27c5e:	aa0a      	add	r2, sp, #40	; 0x28
   27c60:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   27c62:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   27c64:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   27c68:	2210      	movs	r2, #16
   27c6a:	a807      	add	r0, sp, #28
   27c6c:	f012 ff24 	bl	3aab8 <strtoul>
   27c70:	60b0      	str	r0, [r6, #8]
	if (lte_mode) {
   27c72:	f1b8 0f00 	cmp.w	r8, #0
   27c76:	f43f af7f 	beq.w	27b78 <parse_cereg+0x5c>
		err = at_params_int_get(&resp_list,
   27c7a:	2f00      	cmp	r7, #0
   27c7c:	bf14      	ite	ne
   27c7e:	2104      	movne	r1, #4
   27c80:	2105      	moveq	r1, #5
   27c82:	aa02      	add	r2, sp, #8
   27c84:	a805      	add	r0, sp, #20
   27c86:	f017 fb53 	bl	3f330 <at_params_int_get>
		if (err) {
   27c8a:	b920      	cbnz	r0, 27c96 <parse_cereg+0x17a>
			*lte_mode = mode;
   27c8c:	f89d 3008 	ldrb.w	r3, [sp, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   27c90:	f888 3000 	strb.w	r3, [r8]
   27c94:	e770      	b.n	27b78 <parse_cereg+0x5c>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   27c96:	2300      	movs	r3, #0
   27c98:	e7fa      	b.n	27c90 <parse_cereg+0x174>
		cell->tac = UINT32_MAX;
   27c9a:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27c9e:	e9c6 3302 	strd	r3, r3, [r6, #8]
   27ca2:	e7e6      	b.n	27c72 <parse_cereg+0x156>
   27ca4:	00045b52 	.word	0x00045b52
   27ca8:	00045dc3 	.word	0x00045dc3
   27cac:	00045df5 	.word	0x00045df5
   27cb0:	00045ae6 	.word	0x00045ae6
   27cb4:	00045e23 	.word	0x00045e23
   27cb8:	0004570e 	.word	0x0004570e
   27cbc:	00045e50 	.word	0x00045e50
   27cc0:	00045e81 	.word	0x00045e81

00027cc4 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   27cc4:	2300      	movs	r3, #0
{
   27cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27cc8:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   27cca:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   27ccc:	e9cd 3300 	strd	r3, r3, [sp]
	if (time == NULL || at_response == NULL) {
   27cd0:	b3c9      	cbz	r1, 27d46 <parse_xt3412+0x82>
   27cd2:	b3c0      	cbz	r0, 27d46 <parse_xt3412+0x82>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   27cd4:	2104      	movs	r1, #4
   27cd6:	4668      	mov	r0, sp
   27cd8:	f017 fa53 	bl	3f182 <at_params_list_init>
	if (err) {
   27cdc:	4604      	mov	r4, r0
   27cde:	b138      	cbz	r0, 27cf0 <parse_xt3412+0x2c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27ce0:	4602      	mov	r2, r0
   27ce2:	2145      	movs	r1, #69	; 0x45
   27ce4:	4819      	ldr	r0, [pc, #100]	; (27d4c <parse_xt3412+0x88>)
   27ce6:	f014 ff0b 	bl	3cb00 <z_log_minimal_printk>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   27cea:	4620      	mov	r0, r4
   27cec:	b002      	add	sp, #8
   27cee:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   27cf0:	4601      	mov	r1, r0
   27cf2:	466a      	mov	r2, sp
   27cf4:	4630      	mov	r0, r6
   27cf6:	f017 fa41 	bl	3f17c <at_parser_params_from_str>
	if (err) {
   27cfa:	4604      	mov	r4, r0
   27cfc:	b140      	cbz	r0, 27d10 <parse_xt3412+0x4c>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   27cfe:	2145      	movs	r1, #69	; 0x45
   27d00:	4602      	mov	r2, r0
   27d02:	4813      	ldr	r0, [pc, #76]	; (27d50 <parse_xt3412+0x8c>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   27d04:	f014 fefc 	bl	3cb00 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   27d08:	4668      	mov	r0, sp
   27d0a:	f017 fa4d 	bl	3f1a8 <at_params_list_free>
	return err;
   27d0e:	e7ec      	b.n	27cea <parse_xt3412+0x26>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   27d10:	462a      	mov	r2, r5
   27d12:	2102      	movs	r1, #2
   27d14:	4668      	mov	r0, sp
   27d16:	f017 fb28 	bl	3f36a <at_params_int64_get>
	if (err) {
   27d1a:	4604      	mov	r4, r0
   27d1c:	b118      	cbz	r0, 27d26 <parse_xt3412+0x62>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   27d1e:	4602      	mov	r2, r0
   27d20:	2145      	movs	r1, #69	; 0x45
   27d22:	480c      	ldr	r0, [pc, #48]	; (27d54 <parse_xt3412+0x90>)
   27d24:	e7ee      	b.n	27d04 <parse_xt3412+0x40>
	if ((*time > T3412_MAX) || *time < 0) {
   27d26:	490c      	ldr	r1, [pc, #48]	; (27d58 <parse_xt3412+0x94>)
   27d28:	e9d5 2300 	ldrd	r2, r3, [r5]
   27d2c:	4291      	cmp	r1, r2
   27d2e:	f04f 0208 	mov.w	r2, #8
   27d32:	eb72 0303 	sbcs.w	r3, r2, r3
   27d36:	d2e7      	bcs.n	27d08 <parse_xt3412+0x44>
		LOG_WRN("Parsed time parameter not within valid range");
   27d38:	2157      	movs	r1, #87	; 0x57
   27d3a:	4808      	ldr	r0, [pc, #32]	; (27d5c <parse_xt3412+0x98>)
   27d3c:	f014 fee0 	bl	3cb00 <z_log_minimal_printk>
		err = -EINVAL;
   27d40:	f06f 0415 	mvn.w	r4, #21
   27d44:	e7e0      	b.n	27d08 <parse_xt3412+0x44>
		return -EINVAL;
   27d46:	f06f 0415 	mvn.w	r4, #21
   27d4a:	e7ce      	b.n	27cea <parse_xt3412+0x26>
   27d4c:	00045b52 	.word	0x00045b52
   27d50:	00045ea7 	.word	0x00045ea7
   27d54:	00045ed9 	.word	0x00045ed9
   27d58:	5099e000 	.word	0x5099e000
   27d5c:	00045f0b 	.word	0x00045f0b

00027d60 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   27d60:	b510      	push	{r4, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   27d62:	4604      	mov	r4, r0
   27d64:	b928      	cbnz	r0, 27d72 <neighborcell_count_get+0x12>
		LOG_ERR("at_response is NULL, can't get cell count");
   27d66:	480b      	ldr	r0, [pc, #44]	; (27d94 <neighborcell_count_get+0x34>)
   27d68:	2145      	movs	r1, #69	; 0x45
   27d6a:	f014 fec9 	bl	3cb00 <z_log_minimal_printk>
   27d6e:	4620      	mov	r0, r4
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   27d70:	bd10      	pop	{r4, pc}
	uint32_t count = 0;
   27d72:	2400      	movs	r4, #0
   27d74:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   27d76:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   27d7a:	282c      	cmp	r0, #44	; 0x2c
   27d7c:	d101      	bne.n	27d82 <neighborcell_count_get+0x22>
			count++;
   27d7e:	3401      	adds	r4, #1
	} while (*(str++) != '\0');
   27d80:	e7f9      	b.n	27d76 <neighborcell_count_get+0x16>
   27d82:	2800      	cmp	r0, #0
   27d84:	d1f7      	bne.n	27d76 <neighborcell_count_get+0x16>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   27d86:	2c0a      	cmp	r4, #10
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   27d88:	bf82      	ittt	hi
   27d8a:	2005      	movhi	r0, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   27d8c:	3c09      	subhi	r4, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   27d8e:	fbb4 f0f0 	udivhi	r0, r4, r0
	return ncell_count;
   27d92:	e7ed      	b.n	27d70 <neighborcell_count_get+0x10>
   27d94:	00045f3d 	.word	0x00045f3d

00027d98 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   27d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   27d9c:	230b      	movs	r3, #11
{
   27d9e:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   27da0:	2100      	movs	r1, #0
{
   27da2:	4606      	mov	r6, r0
   27da4:	b08d      	sub	sp, #52	; 0x34
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   27da6:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   27daa:	9304      	str	r3, [sp, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   27dac:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   27db0:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   27db2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   27db6:	2b2c      	cmp	r3, #44	; 0x2c
   27db8:	d101      	bne.n	27dbe <parse_ncellmeas+0x26>
			count++;
   27dba:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   27dbc:	e7f9      	b.n	27db2 <parse_ncellmeas+0x1a>
   27dbe:	2b00      	cmp	r3, #0
   27dc0:	d1f7      	bne.n	27db2 <parse_ncellmeas+0x1a>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   27dc2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27dc6:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   27dca:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27dcc:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   27dce:	a807      	add	r0, sp, #28
   27dd0:	f017 f9d7 	bl	3f182 <at_params_list_init>
	if (err) {
   27dd4:	4604      	mov	r4, r0
   27dd6:	b140      	cbz	r0, 27dea <parse_ncellmeas+0x52>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27dd8:	4602      	mov	r2, r0
   27dda:	2145      	movs	r1, #69	; 0x45
   27ddc:	488f      	ldr	r0, [pc, #572]	; (2801c <parse_ncellmeas+0x284>)
   27dde:	f014 fe8f 	bl	3cb00 <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   27de2:	4620      	mov	r0, r4
   27de4:	b00d      	add	sp, #52	; 0x34
   27de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   27dea:	4601      	mov	r1, r0
   27dec:	aa07      	add	r2, sp, #28
   27dee:	4630      	mov	r0, r6
   27df0:	f017 f9c4 	bl	3f17c <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   27df4:	4604      	mov	r4, r0
   27df6:	b150      	cbz	r0, 27e0e <parse_ncellmeas+0x76>
   27df8:	1dc3      	adds	r3, r0, #7
   27dfa:	d015      	beq.n	27e28 <parse_ncellmeas+0x90>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   27dfc:	2145      	movs	r1, #69	; 0x45
   27dfe:	4602      	mov	r2, r0
   27e00:	4887      	ldr	r0, [pc, #540]	; (28020 <parse_ncellmeas+0x288>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   27e02:	f014 fe7d 	bl	3cb00 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   27e06:	a807      	add	r0, sp, #28
   27e08:	f017 f9ce 	bl	3f1a8 <at_params_list_free>
	return err;
   27e0c:	e7e9      	b.n	27de2 <parse_ncellmeas+0x4a>
	bool incomplete = false;
   27e0e:	4607      	mov	r7, r0
	err = at_params_string_get(&resp_list,
   27e10:	2100      	movs	r1, #0
   27e12:	ab04      	add	r3, sp, #16
   27e14:	aa09      	add	r2, sp, #36	; 0x24
   27e16:	a807      	add	r0, sp, #28
   27e18:	f017 fabf 	bl	3f39a <at_params_string_get>
	if (err) {
   27e1c:	4604      	mov	r4, r0
   27e1e:	b128      	cbz	r0, 27e2c <parse_ncellmeas+0x94>
		LOG_ERR("Could not get response prefix, error: %d", err);
   27e20:	4602      	mov	r2, r0
   27e22:	2145      	movs	r1, #69	; 0x45
   27e24:	487f      	ldr	r0, [pc, #508]	; (28024 <parse_ncellmeas+0x28c>)
   27e26:	e7ec      	b.n	27e02 <parse_ncellmeas+0x6a>
		incomplete = true;
   27e28:	2701      	movs	r7, #1
   27e2a:	e7f1      	b.n	27e10 <parse_ncellmeas+0x78>
	if (!response_is_valid(response_prefix, response_prefix_len,
   27e2c:	4a7e      	ldr	r2, [pc, #504]	; (28028 <parse_ncellmeas+0x290>)
   27e2e:	9904      	ldr	r1, [sp, #16]
   27e30:	a809      	add	r0, sp, #36	; 0x24
   27e32:	f7ff fd7f 	bl	27934 <response_is_valid>
   27e36:	2800      	cmp	r0, #0
   27e38:	d0e5      	beq.n	27e06 <parse_ncellmeas+0x6e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   27e3a:	2101      	movs	r1, #1
   27e3c:	aa01      	add	r2, sp, #4
   27e3e:	a807      	add	r0, sp, #28
   27e40:	f017 fa76 	bl	3f330 <at_params_int_get>
	if (err) {
   27e44:	4604      	mov	r4, r0
   27e46:	2800      	cmp	r0, #0
   27e48:	d1dd      	bne.n	27e06 <parse_ncellmeas+0x6e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   27e4a:	9b01      	ldr	r3, [sp, #4]
   27e4c:	2b00      	cmp	r3, #0
   27e4e:	f040 80e2 	bne.w	28016 <parse_ncellmeas+0x27e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   27e52:	2102      	movs	r1, #2
   27e54:	aa02      	add	r2, sp, #8
   27e56:	a807      	add	r0, sp, #28
   27e58:	f017 fb10 	bl	3f47c <string_param_to_int.constprop.0>
	if (err) {
   27e5c:	4604      	mov	r4, r0
   27e5e:	2800      	cmp	r0, #0
   27e60:	d1d1      	bne.n	27e06 <parse_ncellmeas+0x6e>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   27e62:	9b02      	ldr	r3, [sp, #8]
	len = sizeof(tmp_str);
   27e64:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   27e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27e6c:	bfa4      	itt	ge
   27e6e:	f04f 33ff 	movge.w	r3, #4294967295
   27e72:	9302      	strge	r3, [sp, #8]
	cells->current_cell.id = tmp;
   27e74:	9b02      	ldr	r3, [sp, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   27e76:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   27e78:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   27e7a:	aa05      	add	r2, sp, #20
   27e7c:	ab03      	add	r3, sp, #12
   27e7e:	a807      	add	r0, sp, #28
	len = sizeof(tmp_str);
   27e80:	f8cd 800c 	str.w	r8, [sp, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   27e84:	f017 fa89 	bl	3f39a <at_params_string_get>
	if (err) {
   27e88:	4604      	mov	r4, r0
   27e8a:	2800      	cmp	r0, #0
   27e8c:	d1bb      	bne.n	27e06 <parse_ncellmeas+0x6e>
	tmp_str[len] = '\0';
   27e8e:	9b03      	ldr	r3, [sp, #12]
   27e90:	aa0c      	add	r2, sp, #48	; 0x30
   27e92:	4413      	add	r3, r2
   27e94:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   27e98:	210a      	movs	r1, #10
   27e9a:	1d2a      	adds	r2, r5, #4
   27e9c:	f10d 0017 	add.w	r0, sp, #23
   27ea0:	f017 fac6 	bl	3f430 <string_to_int>
	if (err) {
   27ea4:	4604      	mov	r4, r0
   27ea6:	2800      	cmp	r0, #0
   27ea8:	d1ad      	bne.n	27e06 <parse_ncellmeas+0x6e>
	tmp_str[3] = '\0';
   27eaa:	f88d 0017 	strb.w	r0, [sp, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   27eae:	462a      	mov	r2, r5
   27eb0:	210a      	movs	r1, #10
   27eb2:	a805      	add	r0, sp, #20
   27eb4:	f017 fabc 	bl	3f430 <string_to_int>
	if (err) {
   27eb8:	4604      	mov	r4, r0
   27eba:	2800      	cmp	r0, #0
   27ebc:	d1a3      	bne.n	27e06 <parse_ncellmeas+0x6e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   27ebe:	2104      	movs	r1, #4
   27ec0:	aa02      	add	r2, sp, #8
   27ec2:	a807      	add	r0, sp, #28
   27ec4:	f017 fada 	bl	3f47c <string_param_to_int.constprop.0>
	if (err) {
   27ec8:	4604      	mov	r4, r0
   27eca:	2800      	cmp	r0, #0
   27ecc:	d19b      	bne.n	27e06 <parse_ncellmeas+0x6e>
	cells->current_cell.tac = tmp;
   27ece:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   27ed0:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   27ed2:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   27ed4:	aa02      	add	r2, sp, #8
   27ed6:	a807      	add	r0, sp, #28
   27ed8:	f017 fa2a 	bl	3f330 <at_params_int_get>
	if (err) {
   27edc:	4604      	mov	r4, r0
   27ede:	2800      	cmp	r0, #0
   27ee0:	d191      	bne.n	27e06 <parse_ncellmeas+0x6e>
	cells->current_cell.timing_advance = tmp;
   27ee2:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   27ee4:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   27ee6:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   27ee8:	f105 0210 	add.w	r2, r5, #16
   27eec:	a807      	add	r0, sp, #28
   27eee:	f017 fa1f 	bl	3f330 <at_params_int_get>
	if (err) {
   27ef2:	4604      	mov	r4, r0
   27ef4:	2800      	cmp	r0, #0
   27ef6:	d186      	bne.n	27e06 <parse_ncellmeas+0x6e>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   27ef8:	4641      	mov	r1, r8
   27efa:	f105 0228 	add.w	r2, r5, #40	; 0x28
   27efe:	a807      	add	r0, sp, #28
   27f00:	f017 f9da 	bl	3f2b8 <at_params_short_get>
	if (err) {
   27f04:	4604      	mov	r4, r0
   27f06:	2800      	cmp	r0, #0
   27f08:	f47f af7d 	bne.w	27e06 <parse_ncellmeas+0x6e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   27f0c:	2108      	movs	r1, #8
   27f0e:	aa02      	add	r2, sp, #8
   27f10:	a807      	add	r0, sp, #28
   27f12:	f017 fa0d 	bl	3f330 <at_params_int_get>
	if (err) {
   27f16:	4604      	mov	r4, r0
   27f18:	2800      	cmp	r0, #0
   27f1a:	f47f af74 	bne.w	27e06 <parse_ncellmeas+0x6e>
	cells->current_cell.rsrp = tmp;
   27f1e:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   27f20:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   27f22:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   27f24:	aa02      	add	r2, sp, #8
   27f26:	a807      	add	r0, sp, #28
   27f28:	f017 fa02 	bl	3f330 <at_params_int_get>
	if (err) {
   27f2c:	4604      	mov	r4, r0
   27f2e:	2800      	cmp	r0, #0
   27f30:	f47f af69 	bne.w	27e06 <parse_ncellmeas+0x6e>
	cells->current_cell.rsrq = tmp;
   27f34:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   27f36:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   27f38:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   27f3a:	f105 0220 	add.w	r2, r5, #32
   27f3e:	a807      	add	r0, sp, #28
   27f40:	f017 fa13 	bl	3f36a <at_params_int64_get>
	if (err) {
   27f44:	4604      	mov	r4, r0
   27f46:	2800      	cmp	r0, #0
   27f48:	f47f af5d 	bne.w	27e06 <parse_ncellmeas+0x6e>
	cells->ncells_count = neighborcell_count_get(at_response);
   27f4c:	4630      	mov	r0, r6
   27f4e:	f7ff ff07 	bl	27d60 <neighborcell_count_get>
   27f52:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   27f56:	b2c6      	uxtb	r6, r0
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   27f58:	a807      	add	r0, sp, #28
   27f5a:	f017 fa45 	bl	3f3e8 <at_params_valid_count_get>
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   27f5e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   27f62:	360b      	adds	r6, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   27f64:	4286      	cmp	r6, r0
   27f66:	d208      	bcs.n	27f7a <parse_ncellmeas+0x1e2>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   27f68:	4631      	mov	r1, r6
   27f6a:	f105 0218 	add.w	r2, r5, #24
   27f6e:	a807      	add	r0, sp, #28
   27f70:	f017 f9fb 	bl	3f36a <at_params_int64_get>
		if (err) {
   27f74:	b128      	cbz	r0, 27f82 <parse_ncellmeas+0x1ea>
   27f76:	4604      	mov	r4, r0
   27f78:	e745      	b.n	27e06 <parse_ncellmeas+0x6e>
		cells->current_cell.timing_advance_meas_time = 0;
   27f7a:	2200      	movs	r2, #0
   27f7c:	2300      	movs	r3, #0
   27f7e:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   27f82:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   27f86:	2b00      	cmp	r3, #0
   27f88:	f43f af3d 	beq.w	27e06 <parse_ncellmeas+0x6e>
   27f8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27f8e:	2b00      	cmp	r3, #0
   27f90:	f43f af39 	beq.w	27e06 <parse_ncellmeas+0x6e>
   27f94:	260f      	movs	r6, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   27f96:	f04f 0800 	mov.w	r8, #0
   27f9a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   27f9e:	4598      	cmp	r8, r3
   27fa0:	d304      	bcc.n	27fac <parse_ncellmeas+0x214>
		err = -E2BIG;
   27fa2:	2f00      	cmp	r7, #0
   27fa4:	bf18      	it	ne
   27fa6:	f06f 0406 	mvnne.w	r4, #6
   27faa:	e72c      	b.n	27e06 <parse_ncellmeas+0x6e>
					&cells->neighbor_cells[i].earfcn);
   27fac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   27fae:	1f31      	subs	r1, r6, #4
   27fb0:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   27fb4:	a807      	add	r0, sp, #28
   27fb6:	ea4f 1908 	mov.w	r9, r8, lsl #4
   27fba:	f017 f9b9 	bl	3f330 <at_params_int_get>
		if (err) {
   27fbe:	2800      	cmp	r0, #0
   27fc0:	d1d9      	bne.n	27f76 <parse_ncellmeas+0x1de>
					  &cells->neighbor_cells[i].phys_cell_id);
   27fc2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   27fc4:	1ef1      	subs	r1, r6, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   27fc6:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   27fc8:	3208      	adds	r2, #8
   27fca:	a807      	add	r0, sp, #28
   27fcc:	f017 f974 	bl	3f2b8 <at_params_short_get>
		if (err) {
   27fd0:	2800      	cmp	r0, #0
   27fd2:	d1d0      	bne.n	27f76 <parse_ncellmeas+0x1de>
		err = at_params_int_get(&resp_list,
   27fd4:	aa02      	add	r2, sp, #8
   27fd6:	1eb1      	subs	r1, r6, #2
   27fd8:	a807      	add	r0, sp, #28
   27fda:	f017 f9a9 	bl	3f330 <at_params_int_get>
		if (err) {
   27fde:	2800      	cmp	r0, #0
   27fe0:	d1c9      	bne.n	27f76 <parse_ncellmeas+0x1de>
		cells->neighbor_cells[i].rsrp = tmp;
   27fe2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27fe4:	9a02      	ldr	r2, [sp, #8]
   27fe6:	444b      	add	r3, r9
   27fe8:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   27fea:	1e71      	subs	r1, r6, #1
   27fec:	aa02      	add	r2, sp, #8
   27fee:	a807      	add	r0, sp, #28
   27ff0:	f017 f99e 	bl	3f330 <at_params_int_get>
		if (err) {
   27ff4:	2800      	cmp	r0, #0
   27ff6:	d1be      	bne.n	27f76 <parse_ncellmeas+0x1de>
		cells->neighbor_cells[i].rsrq = tmp;
   27ff8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   27ffa:	9b02      	ldr	r3, [sp, #8]
   27ffc:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   27ffe:	4631      	mov	r1, r6
		cells->neighbor_cells[i].rsrq = tmp;
   28000:	8193      	strh	r3, [r2, #12]
		err = at_params_int_get(&resp_list,
   28002:	a807      	add	r0, sp, #28
   28004:	3204      	adds	r2, #4
   28006:	f017 f993 	bl	3f330 <at_params_int_get>
		if (err) {
   2800a:	3605      	adds	r6, #5
   2800c:	2800      	cmp	r0, #0
   2800e:	d1b2      	bne.n	27f76 <parse_ncellmeas+0x1de>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   28010:	f108 0801 	add.w	r8, r8, #1
   28014:	e7c1      	b.n	27f9a <parse_ncellmeas+0x202>
		err = 1;
   28016:	2401      	movs	r4, #1
   28018:	e6f5      	b.n	27e06 <parse_ncellmeas+0x6e>
   2801a:	bf00      	nop
   2801c:	00045b52 	.word	0x00045b52
   28020:	00045f6c 	.word	0x00045f6c
   28024:	00045df5 	.word	0x00045df5
   28028:	00045a92 	.word	0x00045a92

0002802c <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   2802c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;
	struct at_param_list resp_list = {0};
   2802e:	2300      	movs	r3, #0
{
   28030:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   28032:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   28034:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   28038:	2900      	cmp	r1, #0
   2803a:	d047      	beq.n	280cc <parse_xmodemsleep+0xa0>
   2803c:	2800      	cmp	r0, #0
   2803e:	d045      	beq.n	280cc <parse_xmodemsleep+0xa0>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   28040:	2104      	movs	r1, #4
   28042:	a802      	add	r0, sp, #8
   28044:	f017 f89d 	bl	3f182 <at_params_list_init>
	if (err) {
   28048:	4604      	mov	r4, r0
   2804a:	b138      	cbz	r0, 2805c <parse_xmodemsleep+0x30>
		LOG_ERR("Could not init AT params list, error: %d", err);
   2804c:	4602      	mov	r2, r0
   2804e:	2145      	movs	r1, #69	; 0x45
   28050:	4820      	ldr	r0, [pc, #128]	; (280d4 <parse_xmodemsleep+0xa8>)
   28052:	f014 fd55 	bl	3cb00 <z_log_minimal_printk>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   28056:	4620      	mov	r0, r4
   28058:	b004      	add	sp, #16
   2805a:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   2805c:	4601      	mov	r1, r0
   2805e:	aa02      	add	r2, sp, #8
   28060:	4630      	mov	r0, r6
   28062:	f017 f88b 	bl	3f17c <at_parser_params_from_str>
	if (err) {
   28066:	4604      	mov	r4, r0
   28068:	b128      	cbz	r0, 28076 <parse_xmodemsleep+0x4a>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   2806a:	2145      	movs	r1, #69	; 0x45
   2806c:	4602      	mov	r2, r0
   2806e:	481a      	ldr	r0, [pc, #104]	; (280d8 <parse_xmodemsleep+0xac>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   28070:	f014 fd46 	bl	3cb00 <z_log_minimal_printk>
		goto clean_exit;
   28074:	e019      	b.n	280aa <parse_xmodemsleep+0x7e>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   28076:	2101      	movs	r1, #1
   28078:	f10d 0206 	add.w	r2, sp, #6
   2807c:	a802      	add	r0, sp, #8
   2807e:	f017 f93b 	bl	3f2f8 <at_params_unsigned_short_get>
	if (err) {
   28082:	4604      	mov	r4, r0
   28084:	b118      	cbz	r0, 2808e <parse_xmodemsleep+0x62>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   28086:	4602      	mov	r2, r0
   28088:	2145      	movs	r1, #69	; 0x45
   2808a:	4814      	ldr	r0, [pc, #80]	; (280dc <parse_xmodemsleep+0xb0>)
   2808c:	e7f0      	b.n	28070 <parse_xmodemsleep+0x44>
	modem_sleep->type = type;
   2808e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   28092:	a802      	add	r0, sp, #8
	modem_sleep->type = type;
   28094:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   28096:	f017 f9a7 	bl	3f3e8 <at_params_valid_count_get>
   2809a:	2802      	cmp	r0, #2
   2809c:	d809      	bhi.n	280b2 <parse_xmodemsleep+0x86>
		modem_sleep->time = -1;
   2809e:	f04f 32ff 	mov.w	r2, #4294967295
   280a2:	f04f 33ff 	mov.w	r3, #4294967295
   280a6:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   280aa:	a802      	add	r0, sp, #8
   280ac:	f017 f87c 	bl	3f1a8 <at_params_list_free>
	return err;
   280b0:	e7d1      	b.n	28056 <parse_xmodemsleep+0x2a>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   280b2:	2102      	movs	r1, #2
   280b4:	f105 0208 	add.w	r2, r5, #8
   280b8:	a802      	add	r0, sp, #8
   280ba:	f017 f956 	bl	3f36a <at_params_int64_get>
	if (err) {
   280be:	4604      	mov	r4, r0
   280c0:	2800      	cmp	r0, #0
   280c2:	d0f2      	beq.n	280aa <parse_xmodemsleep+0x7e>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   280c4:	4602      	mov	r2, r0
   280c6:	2145      	movs	r1, #69	; 0x45
   280c8:	4805      	ldr	r0, [pc, #20]	; (280e0 <parse_xmodemsleep+0xb4>)
   280ca:	e7d1      	b.n	28070 <parse_xmodemsleep+0x44>
		return -EINVAL;
   280cc:	f06f 0415 	mvn.w	r4, #21
   280d0:	e7c1      	b.n	28056 <parse_xmodemsleep+0x2a>
   280d2:	bf00      	nop
   280d4:	00045b52 	.word	0x00045b52
   280d8:	00045fa3 	.word	0x00045fa3
   280dc:	00045fda 	.word	0x00045fda
   280e0:	00046008 	.word	0x00046008

000280e4 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   280e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   280e6:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   280e8:	4604      	mov	r4, r0
   280ea:	b1e8      	cbz	r0, 28128 <parse_mdmev+0x44>
   280ec:	b1e1      	cbz	r1, 28128 <parse_mdmev+0x44>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   280ee:	2108      	movs	r1, #8
   280f0:	4a0f      	ldr	r2, [pc, #60]	; (28130 <parse_mdmev+0x4c>)
   280f2:	f7ff fc1f 	bl	27934 <response_is_valid>
   280f6:	b930      	cbnz	r0, 28106 <parse_mdmev+0x22>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   280f8:	480e      	ldr	r0, [pc, #56]	; (28134 <parse_mdmev+0x50>)
   280fa:	2145      	movs	r1, #69	; 0x45
   280fc:	f014 fd00 	bl	3cb00 <z_log_minimal_printk>
		return -EIO;
   28100:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", log_strdup(at_response));

	return -ENODATA;
}
   28104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   28106:	2500      	movs	r5, #0
   28108:	4f0b      	ldr	r7, [pc, #44]	; (28138 <parse_mdmev+0x54>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   2810a:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   2810c:	4621      	mov	r1, r4
   2810e:	f857 0b04 	ldr.w	r0, [r7], #4
   28112:	f7f5 f88c 	bl	1d22e <strcmp>
   28116:	b908      	cbnz	r0, 2811c <parse_mdmev+0x38>
			*modem_evt = i;
   28118:	7035      	strb	r5, [r6, #0]
			return 0;
   2811a:	e7f3      	b.n	28104 <parse_mdmev+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   2811c:	3501      	adds	r5, #1
   2811e:	2d05      	cmp	r5, #5
   28120:	d1f4      	bne.n	2810c <parse_mdmev+0x28>
	return -ENODATA;
   28122:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   28126:	e7ed      	b.n	28104 <parse_mdmev+0x20>
		return -EINVAL;
   28128:	f06f 0015 	mvn.w	r0, #21
   2812c:	e7ea      	b.n	28104 <parse_mdmev+0x20>
   2812e:	bf00      	nop
   28130:	00046042 	.word	0x00046042
   28134:	0004604b 	.word	0x0004604b
   28138:	00042cf8 	.word	0x00042cf8

0002813c <modem_info_parse>:
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
			    const char *buf)
{
   2813c:	b510      	push	{r4, lr}
   2813e:	4604      	mov	r4, r0
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   28140:	4a09      	ldr	r2, [pc, #36]	; (28168 <modem_info_parse+0x2c>)
{
   28142:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   28144:	7a63      	ldrb	r3, [r4, #9]
   28146:	2100      	movs	r1, #0
   28148:	f7fe fcf0 	bl	26b2c <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   2814c:	f110 0f0b 	cmn.w	r0, #11
   28150:	d000      	beq.n	28154 <modem_info_parse+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   28152:	b940      	cbnz	r0, 28166 <modem_info_parse+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   28154:	4804      	ldr	r0, [pc, #16]	; (28168 <modem_info_parse+0x2c>)
   28156:	f017 f947 	bl	3f3e8 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   2815a:	7a63      	ldrb	r3, [r4, #9]
		return -EAGAIN;
   2815c:	4298      	cmp	r0, r3
   2815e:	bf94      	ite	ls
   28160:	2000      	movls	r0, #0
   28162:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   28166:	bd10      	pop	{r4, pc}
   28168:	20019418 	.word	0x20019418

0002816c <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(const char *notif)
{
   2816c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2816e:	4604      	mov	r4, r0
	int err;
	uint16_t param_value;

	const struct modem_info_data rsrp_notify_data = {
   28170:	4a11      	ldr	r2, [pc, #68]	; (281b8 <modem_info_rsrp_subscribe_handler+0x4c>)
   28172:	ab01      	add	r3, sp, #4
   28174:	ca07      	ldmia	r2, {r0, r1, r2}
   28176:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_INT,
	};

	err = modem_info_parse(&rsrp_notify_data, notif);
   2817a:	4621      	mov	r1, r4
   2817c:	4618      	mov	r0, r3
   2817e:	f7ff ffdd 	bl	2813c <modem_info_parse>
	if (err != 0) {
   28182:	4602      	mov	r2, r0
   28184:	b128      	cbz	r0, 28192 <modem_info_rsrp_subscribe_handler+0x26>
		LOG_ERR("modem_info_parse failed to parse "
   28186:	2145      	movs	r1, #69	; 0x45
   28188:	480c      	ldr	r0, [pc, #48]	; (281bc <modem_info_rsrp_subscribe_handler+0x50>)

	err = at_params_unsigned_short_get(&m_param_list,
					   rsrp_notify_data.param_index,
					   &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2818a:	f014 fcb9 	bl	3cb00 <z_log_minimal_printk>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   2818e:	b004      	add	sp, #16
   28190:	bd10      	pop	{r4, pc}
	err = at_params_unsigned_short_get(&m_param_list,
   28192:	f10d 0202 	add.w	r2, sp, #2
   28196:	f89d 100c 	ldrb.w	r1, [sp, #12]
   2819a:	4809      	ldr	r0, [pc, #36]	; (281c0 <modem_info_rsrp_subscribe_handler+0x54>)
   2819c:	f017 f8ac 	bl	3f2f8 <at_params_unsigned_short_get>
	if (err != 0) {
   281a0:	4602      	mov	r2, r0
   281a2:	b110      	cbz	r0, 281aa <modem_info_rsrp_subscribe_handler+0x3e>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   281a4:	2145      	movs	r1, #69	; 0x45
   281a6:	4807      	ldr	r0, [pc, #28]	; (281c4 <modem_info_rsrp_subscribe_handler+0x58>)
   281a8:	e7ef      	b.n	2818a <modem_info_rsrp_subscribe_handler+0x1e>
	modem_info_rsrp_cb(param_value);
   281aa:	4b07      	ldr	r3, [pc, #28]	; (281c8 <modem_info_rsrp_subscribe_handler+0x5c>)
   281ac:	f89d 0002 	ldrb.w	r0, [sp, #2]
   281b0:	681b      	ldr	r3, [r3, #0]
   281b2:	4798      	blx	r3
   281b4:	e7eb      	b.n	2818e <modem_info_rsrp_subscribe_handler+0x22>
   281b6:	bf00      	nop
   281b8:	00042800 	.word	0x00042800
   281bc:	00046224 	.word	0x00046224
   281c0:	20019418 	.word	0x20019418
   281c4:	00046260 	.word	0x00046260
   281c8:	20019420 	.word	0x20019420

000281cc <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   281cc:	2815      	cmp	r0, #21
	return modem_data[info_type]->data_type;
   281ce:	bf9d      	ittte	ls
   281d0:	4b02      	ldrls	r3, [pc, #8]	; (281dc <modem_info_type_get+0x10>)
   281d2:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   281d6:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   281d8:	20ea      	movhi	r0, #234	; 0xea
}
   281da:	4770      	bx	lr
   281dc:	00042e18 	.word	0x00042e18

000281e0 <modem_info_name_get>:
{
   281e0:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   281e2:	460d      	mov	r5, r1
   281e4:	b919      	cbnz	r1, 281ee <modem_info_name_get+0xe>
		return -EINVAL;
   281e6:	f06f 0415 	mvn.w	r4, #21
}
   281ea:	4620      	mov	r0, r4
   281ec:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   281ee:	4b07      	ldr	r3, [pc, #28]	; (2820c <modem_info_name_get+0x2c>)
   281f0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   281f4:	6870      	ldr	r0, [r6, #4]
   281f6:	f7f5 f824 	bl	1d242 <strlen>
	if (len <= 0) {
   281fa:	1e04      	subs	r4, r0, #0
   281fc:	ddf3      	ble.n	281e6 <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   281fe:	4622      	mov	r2, r4
   28200:	4628      	mov	r0, r5
   28202:	6871      	ldr	r1, [r6, #4]
   28204:	f019 f8f6 	bl	413f4 <memcpy>
   28208:	e7ef      	b.n	281ea <modem_info_name_get+0xa>
   2820a:	bf00      	nop
   2820c:	00042e18 	.word	0x00042e18

00028210 <modem_info_short_get>:
{
   28210:	b530      	push	{r4, r5, lr}
   28212:	460d      	mov	r5, r1
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   28214:	2100      	movs	r1, #0
{
   28216:	b0a1      	sub	sp, #132	; 0x84
   28218:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2821a:	227c      	movs	r2, #124	; 0x7c
   2821c:	a801      	add	r0, sp, #4
   2821e:	9100      	str	r1, [sp, #0]
   28220:	f019 f908 	bl	41434 <memset>
	if (buf == NULL) {
   28224:	b1d5      	cbz	r5, 2825c <modem_info_short_get+0x4c>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   28226:	4b10      	ldr	r3, [pc, #64]	; (28268 <modem_info_short_get+0x58>)
   28228:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   2822c:	7aa3      	ldrb	r3, [r4, #10]
   2822e:	2b02      	cmp	r3, #2
   28230:	d014      	beq.n	2825c <modem_info_short_get+0x4c>
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   28232:	2180      	movs	r1, #128	; 0x80
   28234:	4668      	mov	r0, sp
   28236:	6822      	ldr	r2, [r4, #0]
   28238:	f00c ff1c 	bl	35074 <nrf_modem_at_cmd>
	if (err != 0) {
   2823c:	b988      	cbnz	r0, 28262 <modem_info_short_get+0x52>
	err = modem_info_parse(modem_data[info], recv_buf);
   2823e:	4669      	mov	r1, sp
   28240:	4620      	mov	r0, r4
   28242:	f7ff ff7b 	bl	2813c <modem_info_parse>
	if (err) {
   28246:	b938      	cbnz	r0, 28258 <modem_info_short_get+0x48>
	err = at_params_unsigned_short_get(&m_param_list,
   28248:	462a      	mov	r2, r5
   2824a:	7a21      	ldrb	r1, [r4, #8]
   2824c:	4807      	ldr	r0, [pc, #28]	; (2826c <modem_info_short_get+0x5c>)
   2824e:	f017 f853 	bl	3f2f8 <at_params_unsigned_short_get>
	return sizeof(uint16_t);
   28252:	2800      	cmp	r0, #0
   28254:	bf08      	it	eq
   28256:	2002      	moveq	r0, #2
}
   28258:	b021      	add	sp, #132	; 0x84
   2825a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2825c:	f06f 0015 	mvn.w	r0, #21
   28260:	e7fa      	b.n	28258 <modem_info_short_get+0x48>
		return -EIO;
   28262:	f06f 0004 	mvn.w	r0, #4
   28266:	e7f7      	b.n	28258 <modem_info_short_get+0x48>
   28268:	00042e18 	.word	0x00042e18
   2826c:	20019418 	.word	0x20019418

00028270 <modem_info_string_get>:
{
   28270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   28274:	2700      	movs	r7, #0
{
   28276:	460d      	mov	r5, r1
   28278:	b0b5      	sub	sp, #212	; 0xd4
   2827a:	4604      	mov	r4, r0
   2827c:	4616      	mov	r6, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2827e:	4639      	mov	r1, r7
   28280:	227c      	movs	r2, #124	; 0x7c
   28282:	a815      	add	r0, sp, #84	; 0x54
   28284:	9714      	str	r7, [sp, #80]	; 0x50
   28286:	f019 f8d5 	bl	41434 <memset>
	size_t len = 0;
   2828a:	9702      	str	r7, [sp, #8]
	if ((buf == NULL) || (buf_size == 0)) {
   2828c:	2d00      	cmp	r5, #0
   2828e:	f000 8118 	beq.w	284c2 <modem_info_string_get+0x252>
   28292:	2e00      	cmp	r6, #0
   28294:	f000 8115 	beq.w	284c2 <modem_info_string_get+0x252>
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   28298:	4b8e      	ldr	r3, [pc, #568]	; (284d4 <modem_info_string_get+0x264>)
	buf[0] = '\0';
   2829a:	702f      	strb	r7, [r5, #0]
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   2829c:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
   282a0:	2180      	movs	r1, #128	; 0x80
   282a2:	683a      	ldr	r2, [r7, #0]
   282a4:	a814      	add	r0, sp, #80	; 0x50
   282a6:	f00c fee5 	bl	35074 <nrf_modem_at_cmd>
	if (err != 0) {
   282aa:	4680      	mov	r8, r0
   282ac:	2800      	cmp	r0, #0
   282ae:	f040 810b 	bne.w	284c8 <modem_info_string_get+0x258>
	if (info == MODEM_INFO_SUP_BAND) {
   282b2:	2c02      	cmp	r4, #2
   282b4:	d123      	bne.n	282fe <modem_info_string_get+0x8e>
		char *str_begin = strchr(recv_buf, '(');
   282b6:	2128      	movs	r1, #40	; 0x28
   282b8:	a814      	add	r0, sp, #80	; 0x50
   282ba:	f019 fa79 	bl	417b0 <strchr>
   282be:	4607      	mov	r7, r0
		str_end = strchr(recv_buf, ')');
   282c0:	2129      	movs	r1, #41	; 0x29
   282c2:	a814      	add	r0, sp, #80	; 0x50
   282c4:	f019 fa74 	bl	417b0 <strchr>
		if (!str_begin || !str_end) {
   282c8:	2f00      	cmp	r7, #0
   282ca:	f000 8100 	beq.w	284ce <modem_info_string_get+0x25e>
   282ce:	2800      	cmp	r0, #0
   282d0:	f000 80fd 	beq.w	284ce <modem_info_string_get+0x25e>
		*(str_end + 1) = 0;
   282d4:	f880 8001 	strb.w	r8, [r0, #1]
		len = strlen(str_begin);
   282d8:	4638      	mov	r0, r7
   282da:	f7f4 ffb2 	bl	1d242 <strlen>
		if (len >= buf_size) {
   282de:	42b0      	cmp	r0, r6
		len = strlen(str_begin);
   282e0:	4604      	mov	r4, r0
   282e2:	9002      	str	r0, [sp, #8]
		if (len >= buf_size) {
   282e4:	d302      	bcc.n	282ec <modem_info_string_get+0x7c>
		return -EMSGSIZE;
   282e6:	f06f 0979 	mvn.w	r9, #121	; 0x79
   282ea:	e004      	b.n	282f6 <modem_info_string_get+0x86>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   282ec:	4639      	mov	r1, r7
   282ee:	4628      	mov	r0, r5
   282f0:	f019 fa6b 	bl	417ca <strcpy>
		return len;
   282f4:	46a1      	mov	r9, r4
}
   282f6:	4648      	mov	r0, r9
   282f8:	b035      	add	sp, #212	; 0xd4
   282fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = modem_info_parse(modem_data[info], recv_buf);
   282fe:	4638      	mov	r0, r7
   28300:	a914      	add	r1, sp, #80	; 0x50
   28302:	f7ff ff1b 	bl	2813c <modem_info_parse>
	if (err) {
   28306:	4681      	mov	r9, r0
   28308:	b128      	cbz	r0, 28316 <modem_info_string_get+0xa6>
		LOG_ERR("Unable to parse data: %d", err);
   2830a:	464a      	mov	r2, r9
   2830c:	2145      	movs	r1, #69	; 0x45
   2830e:	4872      	ldr	r0, [pc, #456]	; (284d8 <modem_info_string_get+0x268>)
			LOG_ERR("Unable to obtain short: %d", err);
   28310:	f014 fbf6 	bl	3cb00 <z_log_minimal_printk>
			return err;
   28314:	e7ef      	b.n	282f6 <modem_info_string_get+0x86>
	if (info == MODEM_INFO_IP_ADDRESS) {
   28316:	2c09      	cmp	r4, #9
   28318:	d17e      	bne.n	28418 <modem_info_string_get+0x1a8>
	size_t len = 0;
   2831a:	9003      	str	r0, [sp, #12]
	p = strstr(in_buf, "OK\r\n");
   2831c:	496f      	ldr	r1, [pc, #444]	; (284dc <modem_info_string_get+0x26c>)
   2831e:	a814      	add	r0, sp, #80	; 0x50
   28320:	f019 faa2 	bl	41868 <strstr>
	if (!p) {
   28324:	2800      	cmp	r0, #0
   28326:	f000 80cc 	beq.w	284c2 <modem_info_string_get+0x252>
	while ((str_end = strstr(str_end, AT_CMD_RSP_DELIM)) != NULL) {
   2832a:	4f6d      	ldr	r7, [pc, #436]	; (284e0 <modem_info_string_get+0x270>)
	*p = '\0';
   2832c:	f880 9000 	strb.w	r9, [r0]
	char *str_end = in_buf;
   28330:	a814      	add	r0, sp, #80	; 0x50
	while ((str_end = strstr(str_end, AT_CMD_RSP_DELIM)) != NULL) {
   28332:	4639      	mov	r1, r7
   28334:	f019 fa98 	bl	41868 <strstr>
   28338:	4604      	mov	r4, r0
   2833a:	2800      	cmp	r0, #0
   2833c:	d13a      	bne.n	283b4 <modem_info_string_get+0x144>
	if (total_ip_count == 0) {
   2833e:	f1b9 0f00 	cmp.w	r9, #0
   28342:	d0d8      	beq.n	282f6 <modem_info_string_get+0x86>
	first_address = true;
   28344:	f04f 0801 	mov.w	r8, #1
	err = at_params_string_get(&m_param_list,
   28348:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 284f8 <modem_info_string_get+0x288>
   2834c:	f109 37ff 	add.w	r7, r9, #4294967295
	str_end = strstr(&in_buf[line_start_idx], AT_CMD_RSP_DELIM);
   28350:	ab14      	add	r3, sp, #80	; 0x50
   28352:	eb03 0904 	add.w	r9, r3, r4
   28356:	4648      	mov	r0, r9
   28358:	4961      	ldr	r1, [pc, #388]	; (284e0 <modem_info_string_get+0x270>)
   2835a:	f019 fa85 	bl	41868 <strstr>
	if (str_end == NULL) {
   2835e:	2800      	cmp	r0, #0
   28360:	f000 80b5 	beq.w	284ce <modem_info_string_get+0x25e>
	in_buf[++line_len + line_start_idx] = '\0';
   28364:	2100      	movs	r1, #0
	line_len = str_end - &in_buf[line_start_idx];
   28366:	eba0 0009 	sub.w	r0, r0, r9
	in_buf[++line_len + line_start_idx] = '\0';
   2836a:	3401      	adds	r4, #1
   2836c:	4404      	add	r4, r0
   2836e:	ab34      	add	r3, sp, #208	; 0xd0
   28370:	191a      	adds	r2, r3, r4
   28372:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[MODEM_INFO_IP_ADDRESS], &in_buf[line_start_idx]);
   28376:	485b      	ldr	r0, [pc, #364]	; (284e4 <modem_info_string_get+0x274>)
   28378:	4649      	mov	r1, r9
   2837a:	f7ff fedf 	bl	2813c <modem_info_parse>
	if (err) {
   2837e:	4681      	mov	r9, r0
   28380:	2800      	cmp	r0, #0
   28382:	d1c2      	bne.n	2830a <modem_info_string_get+0x9a>
	len = sizeof(ip_buf);
   28384:	2340      	movs	r3, #64	; 0x40
	err = at_params_string_get(&m_param_list,
   28386:	f10d 0a10 	add.w	sl, sp, #16
	len = sizeof(ip_buf);
   2838a:	9303      	str	r3, [sp, #12]
	err = at_params_string_get(&m_param_list,
   2838c:	4652      	mov	r2, sl
   2838e:	2104      	movs	r1, #4
   28390:	4658      	mov	r0, fp
   28392:	ab03      	add	r3, sp, #12
   28394:	f017 f801 	bl	3f39a <at_params_string_get>
	if (err != 0) {
   28398:	4681      	mov	r9, r0
   2839a:	2800      	cmp	r0, #0
   2839c:	d1ab      	bne.n	282f6 <modem_info_string_get+0x86>
	} else if (len >= sizeof(ip_buf)) {
   2839e:	9903      	ldr	r1, [sp, #12]
   283a0:	293f      	cmp	r1, #63	; 0x3f
   283a2:	d8a0      	bhi.n	282e6 <modem_info_string_get+0x76>
	if (len == 0) {
   283a4:	b951      	cbnz	r1, 283bc <modem_info_string_get+0x14c>
		line_start_idx += line_len + 1;
   283a6:	3401      	adds	r4, #1
		if (--current_ip_idx) {
   283a8:	bba7      	cbnz	r7, 28414 <modem_info_string_get+0x1a4>
	return strlen(out_buf);
   283aa:	4628      	mov	r0, r5
   283ac:	f7f4 ff49 	bl	1d242 <strlen>
   283b0:	4681      	mov	r9, r0
   283b2:	e7a0      	b.n	282f6 <modem_info_string_get+0x86>
		str_end++;
   283b4:	1c60      	adds	r0, r4, #1
		total_ip_count++;
   283b6:	f109 0901 	add.w	r9, r9, #1
   283ba:	e7ba      	b.n	28332 <modem_info_string_get+0xc2>
	ip_buf[len] = '\0';
   283bc:	ab34      	add	r3, sp, #208	; 0xd0
   283be:	4419      	add	r1, r3
   283c0:	f801 0cc0 	strb.w	r0, [r1, #-192]
	ip_v6_str = strstr(ip_buf, " ");
   283c4:	4650      	mov	r0, sl
   283c6:	4948      	ldr	r1, [pc, #288]	; (284e8 <modem_info_string_get+0x278>)
   283c8:	f019 fa4e 	bl	41868 <strstr>
	if (ip_v6_str) {
   283cc:	b128      	cbz	r0, 283da <modem_info_string_get+0x16a>
		*ip_v6_str = '\0';
   283ce:	f880 9000 	strb.w	r9, [r0]
		len = strlen(ip_buf);
   283d2:	4650      	mov	r0, sl
   283d4:	f7f4 ff35 	bl	1d242 <strlen>
   283d8:	9003      	str	r0, [sp, #12]
	out_buf_len = strlen(out_buf);
   283da:	4628      	mov	r0, r5
   283dc:	f7f4 ff31 	bl	1d242 <strlen>
	err = snprintk(out_buf + out_buf_len,
   283e0:	4a42      	ldr	r2, [pc, #264]	; (284ec <modem_info_string_get+0x27c>)
   283e2:	4b43      	ldr	r3, [pc, #268]	; (284f0 <modem_info_string_get+0x280>)
   283e4:	eba6 0900 	sub.w	r9, r6, r0
   283e8:	f1b8 0f00 	cmp.w	r8, #0
   283ec:	bf18      	it	ne
   283ee:	4613      	movne	r3, r2
   283f0:	4649      	mov	r1, r9
   283f2:	4a40      	ldr	r2, [pc, #256]	; (284f4 <modem_info_string_get+0x284>)
   283f4:	f8cd a000 	str.w	sl, [sp]
   283f8:	4428      	add	r0, r5
   283fa:	f014 f971 	bl	3c6e0 <snprintk>
	if ((err <= 0) || (err > (out_buf_size - out_buf_len))) {
   283fe:	2800      	cmp	r0, #0
   28400:	f77f af71 	ble.w	282e6 <modem_info_string_get+0x76>
   28404:	4581      	cmp	r9, r0
   28406:	f4ff af6e 	bcc.w	282e6 <modem_info_string_get+0x76>
	if (--current_ip_idx) {
   2840a:	2f00      	cmp	r7, #0
   2840c:	d0cd      	beq.n	283aa <modem_info_string_get+0x13a>
	first_address = false;
   2840e:	f04f 0800 	mov.w	r8, #0
		line_start_idx  += line_len + 1;
   28412:	3401      	adds	r4, #1
		goto parse_line;
   28414:	3f01      	subs	r7, #1
   28416:	e79b      	b.n	28350 <modem_info_string_get+0xe0>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_INT) {
   28418:	7abb      	ldrb	r3, [r7, #10]
   2841a:	2b01      	cmp	r3, #1
   2841c:	d133      	bne.n	28486 <modem_info_string_get+0x216>
		err = at_params_unsigned_short_get(&m_param_list,
   2841e:	7a39      	ldrb	r1, [r7, #8]
   28420:	4835      	ldr	r0, [pc, #212]	; (284f8 <modem_info_string_get+0x288>)
   28422:	aa04      	add	r2, sp, #16
   28424:	f016 ff68 	bl	3f2f8 <at_params_unsigned_short_get>
		if (err) {
   28428:	4681      	mov	r9, r0
   2842a:	b118      	cbz	r0, 28434 <modem_info_string_get+0x1c4>
			LOG_ERR("Unable to obtain short: %d", err);
   2842c:	4602      	mov	r2, r0
   2842e:	2145      	movs	r1, #69	; 0x45
   28430:	4832      	ldr	r0, [pc, #200]	; (284fc <modem_info_string_get+0x28c>)
   28432:	e76d      	b.n	28310 <modem_info_string_get+0xa0>
		len = snprintf(buf, buf_size, "%d", param_value);
   28434:	4631      	mov	r1, r6
   28436:	4628      	mov	r0, r5
   28438:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2843c:	4a30      	ldr	r2, [pc, #192]	; (28500 <modem_info_string_get+0x290>)
   2843e:	f012 f931 	bl	3a6a4 <sniprintf>
   28442:	9002      	str	r0, [sp, #8]
		if ((len <= 0) || (len > buf_size)) {
   28444:	2800      	cmp	r0, #0
   28446:	f43f af4e 	beq.w	282e6 <modem_info_string_get+0x76>
   2844a:	4286      	cmp	r6, r0
   2844c:	f4ff af4b 	bcc.w	282e6 <modem_info_string_get+0x76>
	if (info == MODEM_INFO_ICCID) {
   28450:	2c0e      	cmp	r4, #14
   28452:	d111      	bne.n	28478 <modem_info_string_get+0x208>
   28454:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   28456:	4628      	mov	r0, r5
   28458:	f7f4 fef3 	bl	1d242 <strlen>
   2845c:	1ca3      	adds	r3, r4, #2
   2845e:	1b64      	subs	r4, r4, r5
   28460:	42a0      	cmp	r0, r4
   28462:	d824      	bhi.n	284ae <modem_info_string_get+0x23e>
		if ((len == ICCID_LEN) &&
   28464:	9b02      	ldr	r3, [sp, #8]
   28466:	2b14      	cmp	r3, #20
   28468:	d106      	bne.n	28478 <modem_info_string_get+0x208>
   2846a:	7ceb      	ldrb	r3, [r5, #19]
   2846c:	2b46      	cmp	r3, #70	; 0x46
			buf[len - 1] = '\0';
   2846e:	bf01      	itttt	eq
   28470:	2300      	moveq	r3, #0
   28472:	74eb      	strbeq	r3, [r5, #19]
			--len;
   28474:	2313      	moveq	r3, #19
   28476:	9302      	streq	r3, [sp, #8]
	return len <= 0 ? -ENOTSUP : len;
   28478:	9802      	ldr	r0, [sp, #8]
   2847a:	2800      	cmp	r0, #0
   2847c:	bf14      	ite	ne
   2847e:	4681      	movne	r9, r0
   28480:	f06f 0985 	mvneq.w	r9, #133	; 0x85
   28484:	e737      	b.n	282f6 <modem_info_string_get+0x86>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   28486:	2b02      	cmp	r3, #2
   28488:	d1e2      	bne.n	28450 <modem_info_string_get+0x1e0>
		err = at_params_string_get(&m_param_list,
   2848a:	462a      	mov	r2, r5
   2848c:	7a39      	ldrb	r1, [r7, #8]
   2848e:	481a      	ldr	r0, [pc, #104]	; (284f8 <modem_info_string_get+0x288>)
   28490:	ab02      	add	r3, sp, #8
		len = buf_size - out_buf_len;
   28492:	9602      	str	r6, [sp, #8]
		err = at_params_string_get(&m_param_list,
   28494:	f016 ff81 	bl	3f39a <at_params_string_get>
		if (err != 0) {
   28498:	4681      	mov	r9, r0
   2849a:	2800      	cmp	r0, #0
   2849c:	f47f af2b 	bne.w	282f6 <modem_info_string_get+0x86>
		} else if (len >= buf_size) {
   284a0:	9b02      	ldr	r3, [sp, #8]
   284a2:	429e      	cmp	r6, r3
   284a4:	f67f af1f 	bls.w	282e6 <modem_info_string_get+0x76>
		buf[accumulated_len] = '\0';
   284a8:	2200      	movs	r2, #0
   284aa:	54ea      	strb	r2, [r5, r3]
   284ac:	e7d0      	b.n	28450 <modem_info_string_get+0x1e0>
		current_char = buf[i];
   284ae:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   284b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   284b6:	461c      	mov	r4, r3
		buf[i] = next_char;
   284b8:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   284bc:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   284c0:	e7c9      	b.n	28456 <modem_info_string_get+0x1e6>
		return -EINVAL;
   284c2:	f06f 0915 	mvn.w	r9, #21
   284c6:	e716      	b.n	282f6 <modem_info_string_get+0x86>
		return -EIO;
   284c8:	f06f 0904 	mvn.w	r9, #4
   284cc:	e713      	b.n	282f6 <modem_info_string_get+0x86>
			return -EFAULT;
   284ce:	f06f 090d 	mvn.w	r9, #13
   284d2:	e710      	b.n	282f6 <modem_info_string_get+0x86>
   284d4:	00042e18 	.word	0x00042e18
   284d8:	00046288 	.word	0x00046288
   284dc:	00045268 	.word	0x00045268
   284e0:	0004add3 	.word	0x0004add3
   284e4:	00042ddc 	.word	0x00042ddc
   284e8:	00044166 	.word	0x00044166
   284ec:	00045228 	.word	0x00045228
   284f0:	00046285 	.word	0x00046285
   284f4:	0004a30e 	.word	0x0004a30e
   284f8:	20019418 	.word	0x20019418
   284fc:	000462a6 	.word	0x000462a6
   28500:	0004648c 	.word	0x0004648c

00028504 <modem_info_init>:

int modem_info_init(void)
{
	int err = 0;

	if (m_param_list.params == NULL) {
   28504:	4803      	ldr	r0, [pc, #12]	; (28514 <modem_info_init+0x10>)
   28506:	6843      	ldr	r3, [r0, #4]
   28508:	b913      	cbnz	r3, 28510 <modem_info_init+0xc>
		/* Init at_cmd_parser storage module */
		err = at_params_list_init(&m_param_list,
   2850a:	210a      	movs	r1, #10
   2850c:	f016 be39 	b.w	3f182 <at_params_list_init>
					  CONFIG_MODEM_INFO_MAX_AT_PARAMS_RSP);
	}

	return err;
}
   28510:	2000      	movs	r0, #0
   28512:	4770      	bx	lr
   28514:	20019418 	.word	0x20019418

00028518 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   28518:	b538      	push	{r3, r4, r5, lr}
   2851a:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   2851c:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   28520:	f7ff fe54 	bl	281cc <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   28524:	2802      	cmp	r0, #2
   28526:	d112      	bne.n	2854e <modem_data_get+0x36>
		ret = modem_info_string_get(param->type,
   28528:	2264      	movs	r2, #100	; 0x64
   2852a:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2852e:	1ca9      	adds	r1, r5, #2
   28530:	f7ff fe9e 	bl	28270 <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   28534:	1e04      	subs	r4, r0, #0
   28536:	db02      	blt.n	2853e <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   28538:	2400      	movs	r4, #0
}
   2853a:	4620      	mov	r0, r4
   2853c:	bd38      	pop	{r3, r4, r5, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   2853e:	4623      	mov	r3, r4
   28540:	2145      	movs	r1, #69	; 0x45
   28542:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   28546:	4809      	ldr	r0, [pc, #36]	; (2856c <modem_data_get+0x54>)
   28548:	f014 fada 	bl	3cb00 <z_log_minimal_printk>
			return ret;
   2854c:	e7f5      	b.n	2853a <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_INT) {
   2854e:	2801      	cmp	r0, #1
   28550:	d1f2      	bne.n	28538 <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   28552:	4629      	mov	r1, r5
   28554:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   28558:	f7ff fe5a 	bl	28210 <modem_info_short_get>
		if (ret < 0) {
   2855c:	1e04      	subs	r4, r0, #0
   2855e:	daeb      	bge.n	28538 <modem_data_get+0x20>
			LOG_ERR("Link data not obtained: %d", ret);
   28560:	4622      	mov	r2, r4
   28562:	2145      	movs	r1, #69	; 0x45
   28564:	4802      	ldr	r0, [pc, #8]	; (28570 <modem_data_get+0x58>)
   28566:	f014 facb 	bl	3cb00 <z_log_minimal_printk>
			return ret;
   2856a:	e7e6      	b.n	2853a <modem_data_get+0x22>
   2856c:	000462c6 	.word	0x000462c6
   28570:	000462e9 	.word	0x000462e9

00028574 <modem_info_params_init>:
	if (modem == NULL) {
   28574:	2800      	cmp	r0, #0
   28576:	d049      	beq.n	2860c <modem_info_params_init+0x98>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   28578:	2301      	movs	r3, #1
   2857a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   2857e:	2302      	movs	r3, #2
   28580:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   28584:	2303      	movs	r3, #3
   28586:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   2858a:	2305      	movs	r3, #5
   2858c:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   28590:	2306      	movs	r3, #6
   28592:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   28596:	2307      	movs	r3, #7
   28598:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   2859c:	2308      	movs	r3, #8
   2859e:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   285a2:	2309      	movs	r3, #9
   285a4:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   285a8:	2304      	movs	r3, #4
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   285aa:	220a      	movs	r2, #10
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   285ac:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   285b0:	230f      	movs	r3, #15
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   285b2:	f880 2714 	strb.w	r2, [r0, #1812]	; 0x714
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   285b6:	220e      	movs	r2, #14
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   285b8:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   285bc:	2310      	movs	r3, #16
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   285be:	f880 2784 	strb.w	r2, [r0, #1924]	; 0x784
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   285c2:	2212      	movs	r2, #18
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   285c4:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   285c8:	2311      	movs	r3, #17
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   285ca:	f880 27f4 	strb.w	r2, [r0, #2036]	; 0x7f4
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   285ce:	220d      	movs	r2, #13
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   285d0:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   285d4:	2314      	movs	r3, #20
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   285d6:	f880 2864 	strb.w	r2, [r0, #2148]	; 0x864
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   285da:	220b      	movs	r2, #11
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   285dc:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   285e0:	2315      	movs	r3, #21
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   285e2:	f880 28d4 	strb.w	r2, [r0, #2260]	; 0x8d4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   285e6:	2213      	movs	r2, #19
	modem->network.apn.type			= MODEM_INFO_APN;
   285e8:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c
	modem->network.rsrp.type		= MODEM_INFO_RSRP;
   285ec:	2300      	movs	r3, #0
	modem->device.imei.type			= MODEM_INFO_IMEI;
   285ee:	f880 2944 	strb.w	r2, [r0, #2372]	; 0x944
	modem->device.board			= CONFIG_BOARD;
   285f2:	4a08      	ldr	r2, [pc, #32]	; (28614 <modem_info_params_init+0xa0>)
	modem->network.rsrp.type		= MODEM_INFO_RSRP;
   285f4:	f880 368c 	strb.w	r3, [r0, #1676]	; 0x68c
	modem->device.board			= CONFIG_BOARD;
   285f8:	f8c0 2948 	str.w	r2, [r0, #2376]	; 0x948
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   285fc:	4a06      	ldr	r2, [pc, #24]	; (28618 <modem_info_params_init+0xa4>)
   285fe:	f8c0 294c 	str.w	r2, [r0, #2380]	; 0x94c
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   28602:	4a06      	ldr	r2, [pc, #24]	; (2861c <modem_info_params_init+0xa8>)
   28604:	f8c0 2950 	str.w	r2, [r0, #2384]	; 0x950
	return 0;
   28608:	4618      	mov	r0, r3
   2860a:	4770      	bx	lr
		return -EINVAL;
   2860c:	f06f 0015 	mvn.w	r0, #21
}
   28610:	4770      	bx	lr
   28612:	bf00      	nop
   28614:	00046309 	.word	0x00046309
   28618:	0004631b 	.word	0x0004631b
   2861c:	00046322 	.word	0x00046322

00028620 <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   28620:	b570      	push	{r4, r5, r6, lr}
	int ret;

	if (modem == NULL) {
   28622:	4604      	mov	r4, r0
   28624:	2800      	cmp	r0, #0
   28626:	f000 80a1 	beq.w	2876c <modem_info_params_get+0x14c>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   2862a:	f7ff ff75 	bl	28518 <modem_data_get>
   2862e:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   28630:	f104 0070 	add.w	r0, r4, #112	; 0x70
   28634:	f7ff ff70 	bl	28518 <modem_data_get>
   28638:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   2863a:	f504 7044 	add.w	r0, r4, #784	; 0x310
   2863e:	f7ff ff6b 	bl	28518 <modem_data_get>
   28642:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   28644:	f504 7060 	add.w	r0, r4, #896	; 0x380
   28648:	f7ff ff66 	bl	28518 <modem_data_get>
   2864c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   2864e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   28652:	f7ff ff61 	bl	28518 <modem_data_get>
   28656:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   28658:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   2865c:	f7ff ff5c 	bl	28518 <modem_data_get>
   28660:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   28662:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   28666:	f7ff ff57 	bl	28518 <modem_data_get>
   2866a:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   2866c:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   28670:	f7ff ff52 	bl	28518 <modem_data_get>
   28674:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   28676:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   2867a:	f7ff ff4d 	bl	28518 <modem_data_get>
   2867e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   28680:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   28684:	f7ff ff48 	bl	28518 <modem_data_get>
   28688:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.apn);
   2868a:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
   2868e:	f7ff ff43 	bl	28518 <modem_data_get>
   28692:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
   28694:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   28698:	f7ff ff3e 	bl	28518 <modem_data_get>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2869c:	f8b4 3152 	ldrh.w	r3, [r4, #338]	; 0x152
   286a0:	4405      	add	r5, r0
   286a2:	f8a4 31c2 	strh.w	r3, [r4, #450]	; 0x1c2
   286a6:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   286aa:	220a      	movs	r2, #10
   286ac:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
   286b0:	f8b4 3155 	ldrh.w	r3, [r4, #341]	; 0x155
   286b4:	2100      	movs	r1, #0
   286b6:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
   286ba:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
	memcpy(mcc->value_string, current_operator->value_string, 3);
   286be:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   286c2:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   286c6:	f012 f8db 	bl	3a880 <strtol>
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   286ca:	f204 2632 	addw	r6, r4, #562	; 0x232
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   286ce:	220a      	movs	r2, #10
   286d0:	2100      	movs	r1, #0
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   286d2:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   286d6:	4630      	mov	r0, r6
   286d8:	f012 f8d2 	bl	3a880 <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   286dc:	2210      	movs	r2, #16
   286de:	2100      	movs	r1, #0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   286e0:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   286e4:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   286e8:	f012 f8ca 	bl	3a880 <strtol>
   286ec:	f7f3 fffa 	bl	1c6e4 <__aeabi_i2d>
   286f0:	f504 66d2 	add.w	r6, r4, #1680	; 0x690
   286f4:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   286f8:	2100      	movs	r1, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   286fa:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   286fc:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   28700:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   28704:	f012 f8bc 	bl	3a880 <strtol>
   28708:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   2870c:	b13d      	cbz	r5, 2871e <modem_info_params_get+0xfe>
			LOG_ERR("Network data not obtained: %d", ret);
   2870e:	462a      	mov	r2, r5
   28710:	2145      	movs	r1, #69	; 0x45
   28712:	4818      	ldr	r0, [pc, #96]	; (28774 <modem_info_params_get+0x154>)
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   28714:	f014 f9f4 	bl	3cb00 <z_log_minimal_printk>
			return -EAGAIN;
   28718:	f06f 000a 	mvn.w	r0, #10
		}
	}

	return 0;
}
   2871c:	bd70      	pop	{r4, r5, r6, pc}
		ret = modem_data_get(&modem->sim.uicc);
   2871e:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   28722:	f7ff fef9 	bl	28518 <modem_data_get>
   28726:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   28728:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   2872c:	f7ff fef4 	bl	28518 <modem_data_get>
   28730:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   28732:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   28736:	f7ff feef 	bl	28518 <modem_data_get>
		if (ret) {
   2873a:	182a      	adds	r2, r5, r0
   2873c:	d002      	beq.n	28744 <modem_info_params_get+0x124>
			LOG_ERR("Sim data not obtained: %d", ret);
   2873e:	2145      	movs	r1, #69	; 0x45
   28740:	480d      	ldr	r0, [pc, #52]	; (28778 <modem_info_params_get+0x158>)
   28742:	e7e7      	b.n	28714 <modem_info_params_get+0xf4>
		ret = modem_data_get(&modem->device.modem_fw);
   28744:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   28748:	f7ff fee6 	bl	28518 <modem_data_get>
   2874c:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   2874e:	f604 0068 	addw	r0, r4, #2152	; 0x868
   28752:	f7ff fee1 	bl	28518 <modem_data_get>
   28756:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   28758:	f604 00d8 	addw	r0, r4, #2264	; 0x8d8
   2875c:	f7ff fedc 	bl	28518 <modem_data_get>
		if (ret) {
   28760:	1940      	adds	r0, r0, r5
   28762:	d0db      	beq.n	2871c <modem_info_params_get+0xfc>
			LOG_ERR("Device data not obtained: %d", ret);
   28764:	4602      	mov	r2, r0
   28766:	2145      	movs	r1, #69	; 0x45
   28768:	4804      	ldr	r0, [pc, #16]	; (2877c <modem_info_params_get+0x15c>)
   2876a:	e7d3      	b.n	28714 <modem_info_params_get+0xf4>
		return -EINVAL;
   2876c:	f06f 0015 	mvn.w	r0, #21
   28770:	e7d4      	b.n	2871c <modem_info_params_get+0xfc>
   28772:	bf00      	nop
   28774:	0004632f 	.word	0x0004632f
   28778:	00046352 	.word	0x00046352
   2877c:	00046371 	.word	0x00046371

00028780 <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   28780:	e92d 4230 	stmdb	sp!, {r4, r5, r9, lr}
   28784:	4681      	mov	r9, r0
	int total_len;

	if (device == NULL || json_obj == NULL) {
   28786:	460c      	mov	r4, r1
   28788:	b329      	cbz	r1, 287d6 <device_data_add+0x56>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   2878a:	f016 feab 	bl	3f4e4 <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   2878e:	4621      	mov	r1, r4
	total_len = json_add_data(&device->modem_fw, json_obj);
   28790:	4605      	mov	r5, r0
	total_len += json_add_data(&device->battery, json_obj);
   28792:	f109 0070 	add.w	r0, r9, #112	; 0x70
   28796:	f016 fea5 	bl	3f4e4 <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   2879a:	4621      	mov	r1, r4
	total_len += json_add_data(&device->battery, json_obj);
   2879c:	4405      	add	r5, r0
	total_len += json_add_data(&device->imei, json_obj);
   2879e:	f109 00e0 	add.w	r0, r9, #224	; 0xe0
   287a2:	f016 fe9f 	bl	3f4e4 <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   287a6:	f8d9 2150 	ldr.w	r2, [r9, #336]	; 0x150
   287aa:	490c      	ldr	r1, [pc, #48]	; (287dc <device_data_add+0x5c>)
	total_len += json_add_data(&device->imei, json_obj);
   287ac:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "board", device->board);
   287ae:	4620      	mov	r0, r4
   287b0:	f016 fe81 	bl	3f4b6 <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   287b4:	f8d9 2154 	ldr.w	r2, [r9, #340]	; 0x154
   287b8:	4909      	ldr	r1, [pc, #36]	; (287e0 <device_data_add+0x60>)
	total_len += json_add_str(json_obj, "board", device->board);
   287ba:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   287bc:	4620      	mov	r0, r4
   287be:	f016 fe7a 	bl	3f4b6 <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   287c2:	f8d9 2158 	ldr.w	r2, [r9, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   287c6:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   287c8:	4906      	ldr	r1, [pc, #24]	; (287e4 <device_data_add+0x64>)
   287ca:	4620      	mov	r0, r4
   287cc:	f016 fe73 	bl	3f4b6 <json_add_str>
   287d0:	4428      	add	r0, r5

	return total_len;
}
   287d2:	e8bd 8230 	ldmia.w	sp!, {r4, r5, r9, pc}
		return -EINVAL;
   287d6:	f06f 0015 	mvn.w	r0, #21
   287da:	e7fa      	b.n	287d2 <device_data_add+0x52>
   287dc:	000463a5 	.word	0x000463a5
   287e0:	000463ab 	.word	0x000463ab
   287e4:	000463b6 	.word	0x000463b6

000287e8 <network_data_add>:
{
   287e8:	b5d0      	push	{r4, r6, r7, lr}
   287ea:	460e      	mov	r6, r1
	if (network == NULL || json_obj == NULL) {
   287ec:	4604      	mov	r4, r0
{
   287ee:	b09a      	sub	sp, #104	; 0x68
	if (network == NULL || json_obj == NULL) {
   287f0:	2800      	cmp	r0, #0
   287f2:	d06b      	beq.n	288cc <network_data_add+0xe4>
   287f4:	2900      	cmp	r1, #0
   287f6:	d069      	beq.n	288cc <network_data_add+0xe4>
	total_len = json_add_data(&network->current_band, json_obj);
   287f8:	f016 fe74 	bl	3f4e4 <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   287fc:	4631      	mov	r1, r6
	total_len = json_add_data(&network->current_band, json_obj);
   287fe:	4607      	mov	r7, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   28800:	f104 0070 	add.w	r0, r4, #112	; 0x70
   28804:	f016 fe6e 	bl	3f4e4 <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   28808:	4631      	mov	r1, r6
	total_len += json_add_data(&network->sup_band, json_obj);
   2880a:	4407      	add	r7, r0
	total_len += json_add_data(&network->area_code, json_obj);
   2880c:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   28810:	f016 fe68 	bl	3f4e4 <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   28814:	4631      	mov	r1, r6
	total_len += json_add_data(&network->area_code, json_obj);
   28816:	4407      	add	r7, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   28818:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   2881c:	f016 fe62 	bl	3f4e4 <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   28820:	4631      	mov	r1, r6
	total_len += json_add_data(&network->current_operator, json_obj);
   28822:	4407      	add	r7, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   28824:	f504 7044 	add.w	r0, r4, #784	; 0x310
   28828:	f016 fe5c 	bl	3f4e4 <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   2882c:	4631      	mov	r1, r6
	total_len += json_add_data(&network->ip_address, json_obj);
   2882e:	4407      	add	r7, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   28830:	f504 7060 	add.w	r0, r4, #896	; 0x380
   28834:	f016 fe56 	bl	3f4e4 <json_add_data>
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   28838:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   2883a:	4407      	add	r7, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   2883c:	f894 030c 	ldrb.w	r0, [r4, #780]	; 0x30c
   28840:	f7ff fcce 	bl	281e0 <modem_info_name_get>
	if (len > 0) {
   28844:	2800      	cmp	r0, #0
   28846:	dd11      	ble.n	2886c <network_data_add+0x84>
		data_name[len] = '\0';
   28848:	ab1a      	add	r3, sp, #104	; 0x68
   2884a:	4418      	add	r0, r3
   2884c:	2300      	movs	r3, #0
   2884e:	f800 3c64 	strb.w	r3, [r0, #-100]
		ret = json_add_num(json_obj, data_name, network->cellid_dec);
   28852:	f504 63d2 	add.w	r3, r4, #1680	; 0x690
	json_num = cJSON_CreateNumber(num);
   28856:	e9d3 0100 	ldrd	r0, r1, [r3]
   2885a:	f7f5 fe4d 	bl	1e4f8 <cJSON_CreateNumber>
	if (json_num == NULL) {
   2885e:	4602      	mov	r2, r0
   28860:	b120      	cbz	r0, 2886c <network_data_add+0x84>
	cJSON_AddItemToObject(parent, str, item);
   28862:	4630      	mov	r0, r6
   28864:	a901      	add	r1, sp, #4
   28866:	f017 f989 	bl	3fb7c <cJSON_AddItemToObject>
			total_len += sizeof(double);
   2886a:	3708      	adds	r7, #8
	network->network_mode[0] = '\0';
   2886c:	2300      	movs	r3, #0
   2886e:	f884 3698 	strb.w	r3, [r4, #1688]	; 0x698
	if (network->lte_mode.value == 1) {
   28872:	f8b4 33f0 	ldrh.w	r3, [r4, #1008]	; 0x3f0
		strcat(network->network_mode, lte_string);
   28876:	f504 62d3 	add.w	r2, r4, #1688	; 0x698
	if (network->lte_mode.value == 1) {
   2887a:	2b01      	cmp	r3, #1
   2887c:	d11b      	bne.n	288b6 <network_data_add+0xce>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   2887e:	4610      	mov	r0, r2
   28880:	4914      	ldr	r1, [pc, #80]	; (288d4 <network_data_add+0xec>)
   28882:	f018 ff86 	bl	41792 <strcat>
   28886:	4602      	mov	r2, r0
		total_len += sizeof(lte_string);
   28888:	3706      	adds	r7, #6
	if (network->gps_mode.value == 1) {
   2888a:	f8b4 34d0 	ldrh.w	r3, [r4, #1232]	; 0x4d0
   2888e:	2b01      	cmp	r3, #1
   28890:	d105      	bne.n	2889e <network_data_add+0xb6>
   28892:	4610      	mov	r0, r2
   28894:	4910      	ldr	r1, [pc, #64]	; (288d8 <network_data_add+0xf0>)
   28896:	f018 ff7c 	bl	41792 <strcat>
   2889a:	4602      	mov	r2, r0
		total_len += sizeof(gps_string);
   2889c:	3705      	adds	r7, #5
	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   2889e:	4630      	mov	r0, r6
   288a0:	490e      	ldr	r1, [pc, #56]	; (288dc <network_data_add+0xf4>)
   288a2:	f016 fe08 	bl	3f4b6 <json_add_str>
	if (ret) {
   288a6:	b118      	cbz	r0, 288b0 <network_data_add+0xc8>
		LOG_ERR("Unable to add the network mode");
   288a8:	2145      	movs	r1, #69	; 0x45
   288aa:	480d      	ldr	r0, [pc, #52]	; (288e0 <network_data_add+0xf8>)
   288ac:	f014 f928 	bl	3cb00 <z_log_minimal_printk>
}
   288b0:	4638      	mov	r0, r7
   288b2:	b01a      	add	sp, #104	; 0x68
   288b4:	bdd0      	pop	{r4, r6, r7, pc}
	} else if (network->nbiot_mode.value == 1) {
   288b6:	f8b4 3460 	ldrh.w	r3, [r4, #1120]	; 0x460
   288ba:	2b01      	cmp	r3, #1
   288bc:	d1e5      	bne.n	2888a <network_data_add+0xa2>
   288be:	4610      	mov	r0, r2
   288c0:	4908      	ldr	r1, [pc, #32]	; (288e4 <network_data_add+0xfc>)
   288c2:	f018 ff66 	bl	41792 <strcat>
		total_len += sizeof(nbiot_string);
   288c6:	3707      	adds	r7, #7
   288c8:	4602      	mov	r2, r0
   288ca:	e7de      	b.n	2888a <network_data_add+0xa2>
		return -EINVAL;
   288cc:	f06f 0715 	mvn.w	r7, #21
   288d0:	e7ee      	b.n	288b0 <network_data_add+0xc8>
   288d2:	bf00      	nop
   288d4:	00046422 	.word	0x00046422
   288d8:	0004641d 	.word	0x0004641d
   288dc:	000463be 	.word	0x000463be
   288e0:	000463ca 	.word	0x000463ca
   288e4:	00046428 	.word	0x00046428

000288e8 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   288e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   288ec:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   288ee:	460d      	mov	r5, r1
   288f0:	2900      	cmp	r1, #0
   288f2:	d04f      	beq.n	28994 <modem_info_json_object_encode+0xac>
   288f4:	2800      	cmp	r0, #0
   288f6:	d04d      	beq.n	28994 <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   288f8:	4608      	mov	r0, r1
   288fa:	f017 f925 	bl	3fb48 <cJSON_GetArraySize>
   288fe:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   28900:	f009 fbee 	bl	320e0 <cJSON_CreateObject>
   28904:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   28906:	f009 fbeb 	bl	320e0 <cJSON_CreateObject>
   2890a:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   2890c:	f009 fbe8 	bl	320e0 <cJSON_CreateObject>
   28910:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   28912:	f1b8 0f00 	cmp.w	r8, #0
   28916:	d03a      	beq.n	2898e <modem_info_json_object_encode+0xa6>
   28918:	b3cf      	cbz	r7, 2898e <modem_info_json_object_encode+0xa6>
   2891a:	b3c0      	cbz	r0, 2898e <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   2891c:	4641      	mov	r1, r8
   2891e:	4648      	mov	r0, r9
   28920:	f7ff ff62 	bl	287e8 <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   28924:	2800      	cmp	r0, #0
   28926:	dd06      	ble.n	28936 <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   28928:	4642      	mov	r2, r8
   2892a:	4628      	mov	r0, r5
   2892c:	491b      	ldr	r1, [pc, #108]	; (2899c <modem_info_json_object_encode+0xb4>)
   2892e:	f017 f925 	bl	3fb7c <cJSON_AddItemToObject>

		json_add_obj(root_obj, MODEM_INFO_JSON_KEY_NET_INF, network_obj);
		network_obj = NULL;
   28932:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   28936:	4639      	mov	r1, r7
   28938:	f509 60d5 	add.w	r0, r9, #1704	; 0x6a8
   2893c:	f016 fe15 	bl	3f56a <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   28940:	2800      	cmp	r0, #0
   28942:	dd05      	ble.n	28950 <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   28944:	463a      	mov	r2, r7
   28946:	4628      	mov	r0, r5
   28948:	4915      	ldr	r1, [pc, #84]	; (289a0 <modem_info_json_object_encode+0xb8>)
   2894a:	f017 f917 	bl	3fb7c <cJSON_AddItemToObject>

		json_add_obj(root_obj, MODEM_INFO_JSON_KEY_SIM_INF, sim_obj);
		sim_obj = NULL;
   2894e:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   28950:	4631      	mov	r1, r6
   28952:	f509 60ff 	add.w	r0, r9, #2040	; 0x7f8
   28956:	f7ff ff13 	bl	28780 <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   2895a:	2800      	cmp	r0, #0
   2895c:	dd05      	ble.n	2896a <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   2895e:	4632      	mov	r2, r6
   28960:	4628      	mov	r0, r5
   28962:	4910      	ldr	r1, [pc, #64]	; (289a4 <modem_info_json_object_encode+0xbc>)
   28964:	f017 f90a 	bl	3fb7c <cJSON_AddItemToObject>

		json_add_obj(root_obj, MODEM_INFO_JSON_KEY_DEV_INF, device_obj);
		device_obj = NULL;
   28968:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   2896a:	4640      	mov	r0, r8
   2896c:	f009 faf6 	bl	31f5c <cJSON_Delete>
	cJSON_Delete(sim_obj);
   28970:	4638      	mov	r0, r7
   28972:	f009 faf3 	bl	31f5c <cJSON_Delete>
	cJSON_Delete(device_obj);
   28976:	4630      	mov	r0, r6
   28978:	f009 faf0 	bl	31f5c <cJSON_Delete>

	if (obj_count >= 0) {
   2897c:	2c00      	cmp	r4, #0
   2897e:	db03      	blt.n	28988 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   28980:	4628      	mov	r0, r5
   28982:	f017 f8e1 	bl	3fb48 <cJSON_GetArraySize>
   28986:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   28988:	4620      	mov	r0, r4
   2898a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   2898e:	f06f 040b 	mvn.w	r4, #11
   28992:	e7ea      	b.n	2896a <modem_info_json_object_encode+0x82>
		return -EINVAL;
   28994:	f06f 0415 	mvn.w	r4, #21
   28998:	e7f6      	b.n	28988 <modem_info_json_object_encode+0xa0>
   2899a:	bf00      	nop
   2899c:	000463ee 	.word	0x000463ee
   289a0:	000463fa 	.word	0x000463fa
   289a4:	00046402 	.word	0x00046402

000289a8 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   289a8:	4803      	ldr	r0, [pc, #12]	; (289b8 <k_sys_fatal_error_handler+0x10>)
   289aa:	2145      	movs	r1, #69	; 0x45
{
   289ac:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   289ae:	f014 f8a7 	bl	3cb00 <z_log_minimal_printk>
		sys_arch_reboot(0);
   289b2:	2000      	movs	r0, #0
   289b4:	f7fa fcda 	bl	2336c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   289b8:	0004642f 	.word	0x0004642f

000289bc <translate_error>:
{
	cmee_control(DISABLE);
}

static int translate_error(int err)
{
   289bc:	b508      	push	{r3, lr}
	/* In case of CME error translate the error value to
	 * an errno value.
	 */
	switch (err) {
   289be:	f46f 7300 	mvn.w	r3, #512	; 0x200
   289c2:	4418      	add	r0, r3
   289c4:	2805      	cmp	r0, #5
   289c6:	d80d      	bhi.n	289e4 <translate_error+0x28>
   289c8:	e8df f000 	tbb	[pc, r0]
   289cc:	0c060317 	.word	0x0c060317
   289d0:	090c      	.short	0x090c
   289d2:	f04f 30ff 	mov.w	r0, #4294967295
		__ASSERT(false, "Untranslated CME error %d!", err);
		return 0xBAADBAAD;
	}

	return err;
}
   289d6:	bd08      	pop	{r3, pc}
		return -ENOMEM;
   289d8:	f06f 000b 	mvn.w	r0, #11
   289dc:	e7fb      	b.n	289d6 <translate_error+0x1a>
		return -EACCES;
   289de:	f06f 000c 	mvn.w	r0, #12
   289e2:	e7f8      	b.n	289d6 <translate_error+0x1a>
		__ASSERT(false, "Untranslated CME error %d!", err);
   289e4:	224c      	movs	r2, #76	; 0x4c
   289e6:	4906      	ldr	r1, [pc, #24]	; (28a00 <translate_error+0x44>)
   289e8:	4806      	ldr	r0, [pc, #24]	; (28a04 <translate_error+0x48>)
   289ea:	f014 f84f 	bl	3ca8c <assert_print>
   289ee:	4804      	ldr	r0, [pc, #16]	; (28a00 <translate_error+0x44>)
   289f0:	214c      	movs	r1, #76	; 0x4c
   289f2:	f014 f844 	bl	3ca7e <assert_post_action>
   289f6:	4804      	ldr	r0, [pc, #16]	; (28a08 <translate_error+0x4c>)
   289f8:	e7ed      	b.n	289d6 <translate_error+0x1a>
		return -ENOENT;
   289fa:	f06f 0001 	mvn.w	r0, #1
   289fe:	e7ea      	b.n	289d6 <translate_error+0x1a>
   28a00:	00046451 	.word	0x00046451
   28a04:	0004409e 	.word	0x0004409e
   28a08:	baadbaad 	.word	0xbaadbaad

00028a0c <cmee_enable>:
{
   28a0c:	b513      	push	{r0, r1, r4, lr}
   28a0e:	4604      	mov	r4, r0
	err = nrf_modem_at_scanf("AT+CMEE?", "+CMEE: %d", &active);
   28a10:	aa01      	add	r2, sp, #4
   28a12:	490d      	ldr	r1, [pc, #52]	; (28a48 <cmee_enable+0x3c>)
   28a14:	480d      	ldr	r0, [pc, #52]	; (28a4c <cmee_enable+0x40>)
   28a16:	f00c fb99 	bl	3514c <nrf_modem_at_scanf>
	if (err < 0) {
   28a1a:	1e02      	subs	r2, r0, #0
   28a1c:	da0c      	bge.n	28a38 <cmee_enable+0x2c>
		LOG_WRN("Failed to retrieve CMEE status, err %d", err);
   28a1e:	2157      	movs	r1, #87	; 0x57
   28a20:	480b      	ldr	r0, [pc, #44]	; (28a50 <cmee_enable+0x44>)
   28a22:	f014 f86d 	bl	3cb00 <z_log_minimal_printk>
		*was_enabled = false;
   28a26:	2300      	movs	r3, #0
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   28a28:	2101      	movs	r1, #1
   28a2a:	480a      	ldr	r0, [pc, #40]	; (28a54 <cmee_enable+0x48>)
		*was_enabled = false;
   28a2c:	7023      	strb	r3, [r4, #0]
}
   28a2e:	b002      	add	sp, #8
   28a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   28a34:	f00c baf8 	b.w	35028 <nrf_modem_at_printf>
	return active ? true : false;
   28a38:	9b01      	ldr	r3, [sp, #4]
	if (!cmee_is_active()) {
   28a3a:	2b00      	cmp	r3, #0
   28a3c:	d0f3      	beq.n	28a26 <cmee_enable+0x1a>
		*was_enabled = true;
   28a3e:	2301      	movs	r3, #1
   28a40:	7023      	strb	r3, [r4, #0]
}
   28a42:	b002      	add	sp, #8
   28a44:	bd10      	pop	{r4, pc}
   28a46:	bf00      	nop
   28a48:	00046485 	.word	0x00046485
   28a4c:	0004648f 	.word	0x0004648f
   28a50:	00046498 	.word	0x00046498
   28a54:	000464c4 	.word	0x000464c4

00028a58 <cmee_disable>:
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   28a58:	2100      	movs	r1, #0
   28a5a:	4801      	ldr	r0, [pc, #4]	; (28a60 <cmee_disable+0x8>)
   28a5c:	f00c bae4 	b.w	35028 <nrf_modem_at_printf>
   28a60:	000464c4 	.word	0x000464c4

00028a64 <modem_key_mgmt_write>:
}

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgmt_cred_type cred_type,
			 const void *buf, size_t len)
{
   28a64:	b5f0      	push	{r4, r5, r6, r7, lr}
   28a66:	4606      	mov	r6, r0
   28a68:	460f      	mov	r7, r1
   28a6a:	461c      	mov	r4, r3
	int err;
	bool cmee_was_enabled;

	if (buf == NULL || len == 0) {
   28a6c:	4615      	mov	r5, r2
{
   28a6e:	b085      	sub	sp, #20
	if (buf == NULL || len == 0) {
   28a70:	b1d2      	cbz	r2, 28aa8 <modem_key_mgmt_write+0x44>
   28a72:	b1cb      	cbz	r3, 28aa8 <modem_key_mgmt_write+0x44>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_enabled);
   28a74:	f10d 000f 	add.w	r0, sp, #15
   28a78:	f7ff ffc8 	bl	28a0c <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=0,%d,%d,\"%.*s\"",
   28a7c:	4623      	mov	r3, r4
   28a7e:	463a      	mov	r2, r7
   28a80:	4631      	mov	r1, r6
   28a82:	480b      	ldr	r0, [pc, #44]	; (28ab0 <modem_key_mgmt_write+0x4c>)
   28a84:	9500      	str	r5, [sp, #0]
   28a86:	f00c facf 	bl	35028 <nrf_modem_at_printf>
				  sec_tag, cred_type, len, (const char *)buf);

	if (!cmee_was_enabled) {
   28a8a:	f89d 300f 	ldrb.w	r3, [sp, #15]
	err = nrf_modem_at_printf("AT%%CMNG=0,%d,%d,\"%.*s\"",
   28a8e:	4604      	mov	r4, r0
	if (!cmee_was_enabled) {
   28a90:	b90b      	cbnz	r3, 28a96 <modem_key_mgmt_write+0x32>
		cmee_disable();
   28a92:	f7ff ffe1 	bl	28a58 <cmee_disable>
	}

	if (err) {
   28a96:	b124      	cbz	r4, 28aa2 <modem_key_mgmt_write+0x3e>
		return translate_error(nrf_modem_at_err(err));
   28a98:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   28a9c:	f7ff ff8e 	bl	289bc <translate_error>
   28aa0:	4604      	mov	r4, r0
	}

	return 0;
}
   28aa2:	4620      	mov	r0, r4
   28aa4:	b005      	add	sp, #20
   28aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   28aa8:	f06f 0415 	mvn.w	r4, #21
   28aac:	e7f9      	b.n	28aa2 <modem_key_mgmt_write+0x3e>
   28aae:	bf00      	nop
   28ab0:	000464cf 	.word	0x000464cf

00028ab4 <modem_key_mgmt_delete>:
	return 0;
}

int modem_key_mgmt_delete(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type)
{
   28ab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   28ab6:	4604      	mov	r4, r0
	int err;
	bool cmee_was_enabled;

	cmee_enable(&cmee_was_enabled);
   28ab8:	f10d 000f 	add.w	r0, sp, #15
{
   28abc:	9101      	str	r1, [sp, #4]
	cmee_enable(&cmee_was_enabled);
   28abe:	f7ff ffa5 	bl	28a0c <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=3,%d,%d", sec_tag, cred_type);
   28ac2:	4621      	mov	r1, r4
   28ac4:	9a01      	ldr	r2, [sp, #4]
   28ac6:	4809      	ldr	r0, [pc, #36]	; (28aec <modem_key_mgmt_delete+0x38>)
   28ac8:	f00c faae 	bl	35028 <nrf_modem_at_printf>

	if (!cmee_was_enabled) {
   28acc:	f89d 300f 	ldrb.w	r3, [sp, #15]
	err = nrf_modem_at_printf("AT%%CMNG=3,%d,%d", sec_tag, cred_type);
   28ad0:	4604      	mov	r4, r0
	if (!cmee_was_enabled) {
   28ad2:	b90b      	cbnz	r3, 28ad8 <modem_key_mgmt_delete+0x24>
		cmee_disable();
   28ad4:	f7ff ffc0 	bl	28a58 <cmee_disable>
	}

	if (err) {
   28ad8:	b124      	cbz	r4, 28ae4 <modem_key_mgmt_delete+0x30>
		return translate_error(nrf_modem_at_err(err));
   28ada:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   28ade:	f7ff ff6d 	bl	289bc <translate_error>
   28ae2:	4604      	mov	r4, r0
	}

	return 0;
}
   28ae4:	4620      	mov	r0, r4
   28ae6:	b004      	add	sp, #16
   28ae8:	bd10      	pop	{r4, pc}
   28aea:	bf00      	nop
   28aec:	000464e7 	.word	0x000464e7

00028af0 <modem_key_mgmt_exists>:

int modem_key_mgmt_exists(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type,
			  bool *exists)
{
   28af0:	b570      	push	{r4, r5, r6, lr}
   28af2:	b086      	sub	sp, #24
   28af4:	460c      	mov	r4, r1
	int err;
	bool cmee_was_active;

	if (exists == NULL) {
   28af6:	4615      	mov	r5, r2
{
   28af8:	9003      	str	r0, [sp, #12]
	if (exists == NULL) {
   28afa:	b34a      	cbz	r2, 28b50 <modem_key_mgmt_exists+0x60>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_active);
   28afc:	f10d 0017 	add.w	r0, sp, #23
   28b00:	f7ff ff84 	bl	28a0c <cmee_enable>

	scratch_buf[0] = '\0';
   28b04:	2200      	movs	r2, #0
   28b06:	4814      	ldr	r0, [pc, #80]	; (28b58 <modem_key_mgmt_exists+0x68>)
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   28b08:	9b03      	ldr	r3, [sp, #12]
	scratch_buf[0] = '\0';
   28b0a:	7002      	strb	r2, [r0, #0]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   28b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   28b10:	9400      	str	r4, [sp, #0]
   28b12:	4a12      	ldr	r2, [pc, #72]	; (28b5c <modem_key_mgmt_exists+0x6c>)
   28b14:	f00c faae 	bl	35074 <nrf_modem_at_cmd>
			       "AT%%CMNG=1,%d,%d", sec_tag, cred_type);

	if (!cmee_was_active) {
   28b18:	f89d 3017 	ldrb.w	r3, [sp, #23]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   28b1c:	4604      	mov	r4, r0
	if (!cmee_was_active) {
   28b1e:	b90b      	cbnz	r3, 28b24 <modem_key_mgmt_exists+0x34>
		cmee_disable();
   28b20:	f7ff ff9a 	bl	28a58 <cmee_disable>
	}

	if (err) {
   28b24:	b13c      	cbz	r4, 28b36 <modem_key_mgmt_exists+0x46>
		return translate_error(nrf_modem_at_err(err));
   28b26:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   28b2a:	f7ff ff47 	bl	289bc <translate_error>
   28b2e:	4604      	mov	r4, r0
	} else {
		*exists = false;
	}

	return 0;
}
   28b30:	4620      	mov	r0, r4
   28b32:	b006      	add	sp, #24
   28b34:	bd70      	pop	{r4, r5, r6, pc}
	if (strlen(scratch_buf) > strlen("OK\r\n")) {
   28b36:	4808      	ldr	r0, [pc, #32]	; (28b58 <modem_key_mgmt_exists+0x68>)
   28b38:	f7f4 fb83 	bl	1d242 <strlen>
   28b3c:	4606      	mov	r6, r0
   28b3e:	4808      	ldr	r0, [pc, #32]	; (28b60 <modem_key_mgmt_exists+0x70>)
   28b40:	f7f4 fb7f 	bl	1d242 <strlen>
   28b44:	4286      	cmp	r6, r0
		*exists = true;
   28b46:	bf8a      	itet	hi
   28b48:	2301      	movhi	r3, #1
		*exists = false;
   28b4a:	702c      	strbls	r4, [r5, #0]
		*exists = true;
   28b4c:	702b      	strbhi	r3, [r5, #0]
		*exists = false;
   28b4e:	e7ef      	b.n	28b30 <modem_key_mgmt_exists+0x40>
		return -EINVAL;
   28b50:	f06f 0415 	mvn.w	r4, #21
   28b54:	e7ec      	b.n	28b30 <modem_key_mgmt_exists+0x40>
   28b56:	bf00      	nop
   28b58:	2001b703 	.word	0x2001b703
   28b5c:	000464f8 	.word	0x000464f8
   28b60:	00045268 	.word	0x00045268

00028b64 <date_time_now>:

	return 0;
}

int date_time_now(int64_t *unix_time_ms)
{
   28b64:	b510      	push	{r4, lr}
	int err;

	if (unix_time_ms == NULL) {
   28b66:	4604      	mov	r4, r0
   28b68:	b930      	cbnz	r0, 28b78 <date_time_now+0x14>
		LOG_ERR("The passed in pointer cannot be NULL");
   28b6a:	480b      	ldr	r0, [pc, #44]	; (28b98 <date_time_now+0x34>)
   28b6c:	2145      	movs	r1, #69	; 0x45
   28b6e:	f013 ffc7 	bl	3cb00 <z_log_minimal_printk>
   28b72:	f06f 0015 	mvn.w	r0, #21
	}

	err = date_time_core_now(unix_time_ms);

	return err;
}
   28b76:	bd10      	pop	{r4, pc}

bool date_time_is_valid(void)
{
	return date_time_core_is_valid();
   28b78:	f000 f88e 	bl	28c98 <date_time_core_is_valid>
	if (!date_time_is_valid()) {
   28b7c:	b930      	cbnz	r0, 28b8c <date_time_now+0x28>
		LOG_WRN("Valid time not currently available");
   28b7e:	4807      	ldr	r0, [pc, #28]	; (28b9c <date_time_now+0x38>)
   28b80:	2157      	movs	r1, #87	; 0x57
   28b82:	f013 ffbd 	bl	3cb00 <z_log_minimal_printk>
		return -ENODATA;
   28b86:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   28b8a:	e7f4      	b.n	28b76 <date_time_now+0x12>
	err = date_time_core_now(unix_time_ms);
   28b8c:	4620      	mov	r0, r4
}
   28b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = date_time_core_now(unix_time_ms);
   28b92:	f000 b851 	b.w	28c38 <date_time_core_now>
   28b96:	bf00      	nop
   28b98:	00046518 	.word	0x00046518
   28b9c:	00046675 	.word	0x00046675

00028ba0 <date_time_core_notify_event>:
static void date_time_core_notify_event(enum date_time_evt_type time_source)
{
	static struct date_time_evt evt;

	/* Update time source to the event if not requesting previous time source */
	if (time_source != DATE_TIME_EVT_TYPE_PREVIOUS) {
   28ba0:	28ff      	cmp	r0, #255	; 0xff
		evt.type = time_source;
   28ba2:	bf1c      	itt	ne
   28ba4:	4b03      	ldrne	r3, [pc, #12]	; (28bb4 <date_time_core_notify_event+0x14>)
   28ba6:	7018      	strbne	r0, [r3, #0]
	}

	if (app_evt_handler != NULL) {
   28ba8:	4b03      	ldr	r3, [pc, #12]	; (28bb8 <date_time_core_notify_event+0x18>)
   28baa:	681b      	ldr	r3, [r3, #0]
   28bac:	b10b      	cbz	r3, 28bb2 <date_time_core_notify_event+0x12>
		app_evt_handler(&evt);
   28bae:	4801      	ldr	r0, [pc, #4]	; (28bb4 <date_time_core_notify_event+0x14>)
   28bb0:	4718      	bx	r3
	}
}
   28bb2:	4770      	bx	lr
   28bb4:	2001c703 	.word	0x2001c703
   28bb8:	20019424 	.word	0x20019424

00028bbc <date_time_lte_ind_handler>:
{
	k_sem_give(&time_fetch_sem);
}

void date_time_lte_ind_handler(const struct lte_lc_evt *const evt)
{
   28bbc:	b510      	push	{r4, lr}
#if defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL)
	switch (evt->type) {
   28bbe:	7803      	ldrb	r3, [r0, #0]
   28bc0:	b9c3      	cbnz	r3, 28bf4 <date_time_lte_ind_handler+0x38>
	case LTE_LC_EVT_NW_REG_STATUS:

		switch (evt->nw_reg_status) {
   28bc2:	7a03      	ldrb	r3, [r0, #8]
   28bc4:	3b01      	subs	r3, #1
   28bc6:	2b07      	cmp	r3, #7
   28bc8:	d814      	bhi.n	28bf4 <date_time_lte_ind_handler+0x38>
   28bca:	e8df f003 	tbb	[pc, r3]
   28bce:	0f04      	.short	0x0f04
   28bd0:	13041313 	.word	0x13041313
   28bd4:	0413      	.short	0x0413
		case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
		case LTE_LC_NW_REG_REGISTERED_HOME:
		case LTE_LC_NW_REG_REGISTERED_ROAMING:
			if (!date_time_is_valid()) {
   28bd6:	f016 fce4 	bl	3f5a2 <date_time_is_valid>
   28bda:	b958      	cbnz	r0, 28bf4 <date_time_lte_ind_handler+0x38>
		break;
	default:
		break;
	}
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL) */
}
   28bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				k_work_reschedule(&time_work, K_SECONDS(1));
   28be0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   28be4:	2300      	movs	r3, #0
   28be6:	4804      	ldr	r0, [pc, #16]	; (28bf8 <date_time_lte_ind_handler+0x3c>)
   28be8:	f00e bd9a 	b.w	37720 <k_work_reschedule>
}
   28bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			date_time_modem_xtime_subscribe();
   28bf0:	f000 ba80 	b.w	290f4 <date_time_modem_xtime_subscribe>
}
   28bf4:	bd10      	pop	{r4, pc}
   28bf6:	bf00      	nop
   28bf8:	20014500 	.word	0x20014500

00028bfc <date_time_core_schedule_update>:
{
   28bfc:	b510      	push	{r4, lr}
		if (check_pending && k_work_delayable_is_pending(&time_work)) {
   28bfe:	b118      	cbz	r0, 28c08 <date_time_core_schedule_update+0xc>
	return k_work_delayable_busy_get(dwork) != 0;
   28c00:	4806      	ldr	r0, [pc, #24]	; (28c1c <date_time_core_schedule_update+0x20>)
   28c02:	f018 fa4c 	bl	4109e <k_work_delayable_busy_get>
   28c06:	b938      	cbnz	r0, 28c18 <date_time_core_schedule_update+0x1c>
}
   28c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   28c0c:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
   28c10:	2300      	movs	r3, #0
   28c12:	4802      	ldr	r0, [pc, #8]	; (28c1c <date_time_core_schedule_update+0x20>)
   28c14:	f00e bd84 	b.w	37720 <k_work_reschedule>
}
   28c18:	bd10      	pop	{r4, pc}
   28c1a:	bf00      	nop
   28c1c:	20014500 	.word	0x20014500

00028c20 <date_time_handler>:
	z_impl_k_sem_give(sem);
   28c20:	4801      	ldr	r0, [pc, #4]	; (28c28 <date_time_handler+0x8>)
   28c22:	f00e b8a9 	b.w	36d78 <z_impl_k_sem_give>
   28c26:	bf00      	nop
   28c28:	200150c0 	.word	0x200150c0

00028c2c <date_time_core_init>:

void date_time_core_init(void)
{
	if (IS_ENABLED(CONFIG_DATE_TIME_AUTO_UPDATE) && IS_ENABLED(CONFIG_LTE_LINK_CONTROL)) {
		lte_lc_register_handler(date_time_lte_ind_handler);
   28c2c:	4801      	ldr	r0, [pc, #4]	; (28c34 <date_time_core_init+0x8>)
   28c2e:	f7fe ba3f 	b.w	270b0 <lte_lc_register_handler>
   28c32:	bf00      	nop
   28c34:	00028bbd 	.word	0x00028bbd

00028c38 <date_time_core_now>:
		date_time_core_schedule_update(false);
	}
}

int date_time_core_now(int64_t *unix_time_ms)
{
   28c38:	b530      	push	{r4, r5, lr}
   28c3a:	4604      	mov	r4, r0
   28c3c:	b085      	sub	sp, #20
		union { uintptr_t x; struct timespec * val; } parm1 = { .val = ts };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
   28c3e:	2001      	movs	r0, #1
   28c40:	4669      	mov	r1, sp
   28c42:	f7fa fec9 	bl	239d8 <z_impl_clock_gettime>
	int err;
	struct timespec tp;

	err = clock_gettime(CLOCK_REALTIME, &tp);
	if (err) {
   28c46:	b150      	cbz	r0, 28c5e <date_time_core_now+0x26>
		LOG_WRN("clock_gettime failed, errno %d", errno);
   28c48:	f014 fd99 	bl	3d77e <__errno>
   28c4c:	2157      	movs	r1, #87	; 0x57
   28c4e:	6802      	ldr	r2, [r0, #0]
   28c50:	480c      	ldr	r0, [pc, #48]	; (28c84 <date_time_core_now+0x4c>)
   28c52:	f013 ff55 	bl	3cb00 <z_log_minimal_printk>
		return -ENODATA;
   28c56:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;

	return 0;
}
   28c5a:	b005      	add	sp, #20
   28c5c:	bd30      	pop	{r4, r5, pc}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;
   28c5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   28c62:	9b00      	ldr	r3, [sp, #0]
   28c64:	9d01      	ldr	r5, [sp, #4]
   28c66:	fba3 3201 	umull	r3, r2, r3, r1
   28c6a:	fb01 2205 	mla	r2, r1, r5, r2
   28c6e:	9902      	ldr	r1, [sp, #8]
   28c70:	4d05      	ldr	r5, [pc, #20]	; (28c88 <date_time_core_now+0x50>)
   28c72:	fb91 f1f5 	sdiv	r1, r1, r5
   28c76:	185b      	adds	r3, r3, r1
   28c78:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   28c7c:	e9c4 3200 	strd	r3, r2, [r4]
	return 0;
   28c80:	e7eb      	b.n	28c5a <date_time_core_now+0x22>
   28c82:	bf00      	nop
   28c84:	000466a7 	.word	0x000466a7
   28c88:	000f4240 	.word	0x000f4240

00028c8c <date_time_core_register_handler>:
	return 0;
}

void date_time_core_register_handler(date_time_evt_handler_t evt_handler)
{
	if (evt_handler == NULL) {
   28c8c:	4b01      	ldr	r3, [pc, #4]	; (28c94 <date_time_core_register_handler+0x8>)
   28c8e:	6018      	str	r0, [r3, #0]
	}

	LOG_DBG("Registering handler %p", evt_handler);

	app_evt_handler = evt_handler;
}
   28c90:	4770      	bx	lr
   28c92:	bf00      	nop
   28c94:	20019424 	.word	0x20019424

00028c98 <date_time_core_is_valid>:

bool date_time_core_is_valid(void)
{
	return (date_time_last_update_uptime != 0);
   28c98:	4b03      	ldr	r3, [pc, #12]	; (28ca8 <date_time_core_is_valid+0x10>)
   28c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   28c9e:	4313      	orrs	r3, r2
}
   28ca0:	bf14      	ite	ne
   28ca2:	2001      	movne	r0, #1
   28ca4:	2000      	moveq	r0, #0
   28ca6:	4770      	bx	lr
   28ca8:	200155e0 	.word	0x200155e0

00028cac <date_time_core_current_check>:
{
	date_time_last_update_uptime = 0;
}

int date_time_core_current_check(void)
{
   28cac:	b510      	push	{r4, lr}
	if (date_time_last_update_uptime == 0) {
   28cae:	4c10      	ldr	r4, [pc, #64]	; (28cf0 <date_time_core_current_check+0x44>)
   28cb0:	e9d4 2300 	ldrd	r2, r3, [r4]
   28cb4:	4313      	orrs	r3, r2
   28cb6:	d016      	beq.n	28ce6 <date_time_core_current_check+0x3a>
	return z_impl_k_uptime_ticks();
   28cb8:	f018 fa2c 	bl	41114 <z_impl_k_uptime_ticks>
   28cbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28cc0:	fba0 0302 	umull	r0, r3, r0, r2
   28cc4:	fb02 3101 	mla	r1, r2, r1, r3
		LOG_DBG("Date time never set");
		return -ENODATA;
	}

	if ((k_uptime_get() - date_time_last_update_uptime) >=
   28cc8:	e9d4 3200 	ldrd	r3, r2, [r4]
   28ccc:	0bc0      	lsrs	r0, r0, #15
   28cce:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   28cd2:	1ac0      	subs	r0, r0, r3
   28cd4:	4b07      	ldr	r3, [pc, #28]	; (28cf4 <date_time_core_current_check+0x48>)
   28cd6:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   28cda:	eb61 0102 	sbc.w	r1, r1, r2
   28cde:	4298      	cmp	r0, r3
   28ce0:	f171 0300 	sbcs.w	r3, r1, #0
   28ce4:	db02      	blt.n	28cec <date_time_core_current_check+0x40>
	    CONFIG_DATE_TIME_TOO_OLD_SECONDS * MSEC_PER_SEC) {
		LOG_DBG("Current date time too old");
		return -ENODATA;
   28ce6:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}

	return 0;
}
   28cea:	bd10      	pop	{r4, pc}
	return 0;
   28cec:	2000      	movs	r0, #0
   28cee:	e7fc      	b.n	28cea <date_time_core_current_check+0x3e>
   28cf0:	200155e0 	.word	0x200155e0
   28cf4:	0036ee80 	.word	0x0036ee80

00028cf8 <date_time_core_store>:

void date_time_core_store(int64_t curr_time_ms, enum date_time_evt_type time_source)
{
   28cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   28cfa:	b08f      	sub	sp, #60	; 0x3c
   28cfc:	4606      	mov	r6, r0
   28cfe:	460d      	mov	r5, r1
   28d00:	4617      	mov	r7, r2
	struct timespec tp = { 0 };
   28d02:	2100      	movs	r1, #0
   28d04:	2210      	movs	r2, #16
   28d06:	4668      	mov	r0, sp
   28d08:	f018 fb94 	bl	41434 <memset>
	struct tm ltm = { 0 };
   28d0c:	2224      	movs	r2, #36	; 0x24
   28d0e:	2100      	movs	r1, #0
   28d10:	a805      	add	r0, sp, #20
   28d12:	f018 fb8f 	bl	41434 <memset>
   28d16:	f018 f9fd 	bl	41114 <z_impl_k_uptime_ticks>
   28d1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28d1e:	fba0 3002 	umull	r3, r0, r0, r2
   28d22:	fb02 0401 	mla	r4, r2, r1, r0
	int ret;

	date_time_last_update_uptime = k_uptime_get();
   28d26:	f8df c074 	ldr.w	ip, [pc, #116]	; 28d9c <date_time_core_store+0xa4>
   28d2a:	0bdb      	lsrs	r3, r3, #15
   28d2c:	ea43 4344 	orr.w	r3, r3, r4, lsl #17

	date_time_core_schedule_update(false);
   28d30:	2000      	movs	r0, #0
   28d32:	0be4      	lsrs	r4, r4, #15
	date_time_last_update_uptime = k_uptime_get();
   28d34:	e9cc 3400 	strd	r3, r4, [ip]
	date_time_core_schedule_update(false);
   28d38:	f7ff ff60 	bl	28bfc <date_time_core_schedule_update>

	tp.tv_sec = curr_time_ms / 1000;
   28d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28d40:	2300      	movs	r3, #0
   28d42:	4630      	mov	r0, r6
   28d44:	4629      	mov	r1, r5
   28d46:	f7f4 f87f 	bl	1ce48 <__aeabi_ldivmod>
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   28d4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	tp.tv_sec = curr_time_ms / 1000;
   28d4e:	e9cd 0100 	strd	r0, r1, [sp]
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   28d52:	2300      	movs	r3, #0
   28d54:	4630      	mov	r0, r6
   28d56:	4629      	mov	r1, r5
   28d58:	f7f4 f876 	bl	1ce48 <__aeabi_ldivmod>
   28d5c:	4b0d      	ldr	r3, [pc, #52]	; (28d94 <date_time_core_store+0x9c>)

	ret = clock_settime(CLOCK_REALTIME, &tp);
   28d5e:	4669      	mov	r1, sp
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   28d60:	435a      	muls	r2, r3
	ret = clock_settime(CLOCK_REALTIME, &tp);
   28d62:	2001      	movs	r0, #1
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   28d64:	9202      	str	r2, [sp, #8]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   28d66:	f7f5 f8df 	bl	1df28 <clock_settime>
	if (ret != 0) {
   28d6a:	4602      	mov	r2, r0
   28d6c:	b140      	cbz	r0, 28d80 <date_time_core_store+0x88>
		LOG_ERR("Could not set system time, %d", ret);
   28d6e:	480a      	ldr	r0, [pc, #40]	; (28d98 <date_time_core_store+0xa0>)
   28d70:	2145      	movs	r1, #69	; 0x45
   28d72:	f013 fec5 	bl	3cb00 <z_log_minimal_printk>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   28d76:	2003      	movs	r0, #3

#if defined(CONFIG_DATE_TIME_MODEM)
	date_time_modem_store(&ltm);
#endif

	date_time_core_notify_event(time_source);
   28d78:	f7ff ff12 	bl	28ba0 <date_time_core_notify_event>
}
   28d7c:	b00f      	add	sp, #60	; 0x3c
   28d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	gmtime_r(&tp.tv_sec, &ltm);
   28d80:	a905      	add	r1, sp, #20
   28d82:	4668      	mov	r0, sp
   28d84:	f010 fe6e 	bl	39a64 <gmtime_r>
	date_time_modem_store(&ltm);
   28d88:	a805      	add	r0, sp, #20
   28d8a:	f000 f989 	bl	290a0 <date_time_modem_store>
	date_time_core_notify_event(time_source);
   28d8e:	4638      	mov	r0, r7
   28d90:	e7f2      	b.n	28d78 <date_time_core_store+0x80>
   28d92:	bf00      	nop
   28d94:	000f4240 	.word	0x000f4240
   28d98:	000466cb 	.word	0x000466cb
   28d9c:	200155e0 	.word	0x200155e0

00028da0 <date_time_update_thread>:
{
   28da0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		int64_t date_time_ms_modem = 0;
   28da2:	2400      	movs	r4, #0
   28da4:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   28da6:	4e16      	ldr	r6, [pc, #88]	; (28e00 <date_time_update_thread+0x60>)
   28da8:	f04f 32ff 	mov.w	r2, #4294967295
   28dac:	f04f 33ff 	mov.w	r3, #4294967295
   28db0:	4630      	mov	r0, r6
   28db2:	f00e f81d 	bl	36df0 <z_impl_k_sem_take>
		err = date_time_core_current_check();
   28db6:	f7ff ff79 	bl	28cac <date_time_core_current_check>
		if (err == 0) {
   28dba:	b930      	cbnz	r0, 28dca <date_time_update_thread+0x2a>
			date_time_core_schedule_update(true);
   28dbc:	2001      	movs	r0, #1
   28dbe:	f7ff ff1d 	bl	28bfc <date_time_core_schedule_update>
			date_time_core_notify_event(DATE_TIME_EVT_TYPE_PREVIOUS);
   28dc2:	20ff      	movs	r0, #255	; 0xff
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   28dc4:	f7ff feec 	bl	28ba0 <date_time_core_notify_event>
   28dc8:	e7ee      	b.n	28da8 <date_time_update_thread+0x8>
		err = date_time_modem_get(&date_time_ms_modem);
   28dca:	4668      	mov	r0, sp
		int64_t date_time_ms_modem = 0;
   28dcc:	e9cd 4500 	strd	r4, r5, [sp]
		err = date_time_modem_get(&date_time_ms_modem);
   28dd0:	f000 f92c 	bl	2902c <date_time_modem_get>
		if (err == 0) {
   28dd4:	4602      	mov	r2, r0
   28dd6:	b920      	cbnz	r0, 28de2 <date_time_update_thread+0x42>
			date_time_core_store(date_time_ms_modem, DATE_TIME_OBTAINED_MODEM);
   28dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   28ddc:	f7ff ff8c 	bl	28cf8 <date_time_core_store>
			continue;
   28de0:	e7e2      	b.n	28da8 <date_time_update_thread+0x8>
		err = date_time_ntp_get(&date_time_ms_ntp);
   28de2:	a802      	add	r0, sp, #8
		int64_t date_time_ms_ntp = 0;
   28de4:	e9cd 4502 	strd	r4, r5, [sp, #8]
		err = date_time_ntp_get(&date_time_ms_ntp);
   28de8:	f000 f80c 	bl	28e04 <date_time_ntp_get>
		if (err == 0) {
   28dec:	b918      	cbnz	r0, 28df6 <date_time_update_thread+0x56>
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   28dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   28df2:	2201      	movs	r2, #1
   28df4:	e7f2      	b.n	28ddc <date_time_update_thread+0x3c>
		date_time_core_schedule_update(true);
   28df6:	2001      	movs	r0, #1
   28df8:	f7ff ff00 	bl	28bfc <date_time_core_schedule_update>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   28dfc:	2003      	movs	r0, #3
   28dfe:	e7e1      	b.n	28dc4 <date_time_update_thread+0x24>
   28e00:	200150c0 	.word	0x200150c0

00028e04 <date_time_ntp_get>:
	return false;
}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

int date_time_ntp_get(int64_t *date_time_ms)
{
   28e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28e08:	b09a      	sub	sp, #104	; 0x68
   28e0a:	4606      	mov	r6, r0
	err = lte_lc_nw_reg_status_get(&reg_status);
   28e0c:	a806      	add	r0, sp, #24
   28e0e:	f7fe fa87 	bl	27320 <lte_lc_nw_reg_status_get>
	if (err) {
   28e12:	4605      	mov	r5, r0
   28e14:	b138      	cbz	r0, 28e26 <date_time_ntp_get+0x22>
		LOG_WRN("Failed getting LTE network registration status, error: %d", err);
   28e16:	4602      	mov	r2, r0
   28e18:	2157      	movs	r1, #87	; 0x57
   28e1a:	4832      	ldr	r0, [pc, #200]	; (28ee4 <date_time_ntp_get+0xe0>)
   28e1c:	f013 fe70 	bl	3cb00 <z_log_minimal_printk>
		return 0;
	}

	LOG_WRN("Did not get time from any NTP server");

	return -ENODATA;
   28e20:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   28e24:	e04d      	b.n	28ec2 <date_time_ntp_get+0xbe>
	if (reg_status == LTE_LC_NW_REG_REGISTERED_EMERGENCY ||
   28e26:	f89d 3018 	ldrb.w	r3, [sp, #24]
   28e2a:	2b08      	cmp	r3, #8
   28e2c:	d003      	beq.n	28e36 <date_time_ntp_get+0x32>
   28e2e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28e32:	2b01      	cmp	r3, #1
   28e34:	d1f4      	bne.n	28e20 <date_time_ntp_get+0x1c>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   28e36:	4f2c      	ldr	r7, [pc, #176]	; (28ee8 <date_time_ntp_get+0xe4>)

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   28e38:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 28efc <date_time_ntp_get+0xf8>
	err = sntp_query(&sntp_ctx, timeout, time);
   28e3c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 28ef8 <date_time_ntp_get+0xf4>
		LOG_WRN("sntp_query, error: %d", err);
   28e40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 28f00 <date_time_ntp_get+0xfc>
	struct addrinfo hints = {
   28e44:	2250      	movs	r2, #80	; 0x50
   28e46:	2100      	movs	r1, #0
   28e48:	a806      	add	r0, sp, #24
		err =  sntp_time_request(servers[i],
   28e4a:	f857 4b04 	ldr.w	r4, [r7], #4
	struct addrinfo hints = {
   28e4e:	f018 faf1 	bl	41434 <memset>
   28e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
   28e56:	aa06      	add	r2, sp, #24
   28e58:	9307      	str	r3, [sp, #28]
   28e5a:	4641      	mov	r1, r8
   28e5c:	466b      	mov	r3, sp
   28e5e:	4620      	mov	r0, r4
   28e60:	f014 f980 	bl	3d164 <zsock_getaddrinfo>
	if (err) {
   28e64:	4602      	mov	r2, r0
   28e66:	b160      	cbz	r0, 28e82 <date_time_ntp_get+0x7e>
		LOG_WRN("getaddrinfo, error: %d", err);
   28e68:	2157      	movs	r1, #87	; 0x57
   28e6a:	4820      	ldr	r0, [pc, #128]	; (28eec <date_time_ntp_get+0xe8>)
   28e6c:	f013 fe48 	bl	3cb00 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   28e70:	2d01      	cmp	r5, #1
   28e72:	d104      	bne.n	28e7e <date_time_ntp_get+0x7a>
	LOG_WRN("Did not get time from any NTP server");
   28e74:	2157      	movs	r1, #87	; 0x57
   28e76:	481e      	ldr	r0, [pc, #120]	; (28ef0 <date_time_ntp_get+0xec>)
   28e78:	f013 fe42 	bl	3cb00 <z_log_minimal_printk>
   28e7c:	e7d0      	b.n	28e20 <date_time_ntp_get+0x1c>
   28e7e:	2501      	movs	r5, #1
   28e80:	e7e0      	b.n	28e44 <date_time_ntp_get+0x40>
	err = sntp_init(&sntp_ctx, addrinfo->ai_addr, addrinfo->ai_addrlen);
   28e82:	9b00      	ldr	r3, [sp, #0]
   28e84:	a801      	add	r0, sp, #4
   28e86:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   28e8a:	f014 f937 	bl	3d0fc <sntp_init>
	if (err) {
   28e8e:	4604      	mov	r4, r0
   28e90:	b1d8      	cbz	r0, 28eca <date_time_ntp_get+0xc6>
		LOG_WRN("sntp_init, error: %d", err);
   28e92:	2157      	movs	r1, #87	; 0x57
   28e94:	4602      	mov	r2, r0
   28e96:	4817      	ldr	r0, [pc, #92]	; (28ef4 <date_time_ntp_get+0xf0>)
		LOG_WRN("sntp_query, error: %d", err);
   28e98:	f013 fe32 	bl	3cb00 <z_log_minimal_printk>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   28e9c:	9800      	ldr	r0, [sp, #0]
   28e9e:	f014 f963 	bl	3d168 <zsock_freeaddrinfo>
	sntp_close(&sntp_ctx);
   28ea2:	a801      	add	r0, sp, #4
   28ea4:	f014 f959 	bl	3d15a <sntp_close>
		if (err) {
   28ea8:	2c00      	cmp	r4, #0
   28eaa:	d1e1      	bne.n	28e70 <date_time_ntp_get+0x6c>
		*date_time_ms = (int64_t)sntp_time.seconds * 1000;
   28eac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   28eb0:	4811      	ldr	r0, [pc, #68]	; (28ef8 <date_time_ntp_get+0xf4>)
   28eb2:	6803      	ldr	r3, [r0, #0]
   28eb4:	6845      	ldr	r5, [r0, #4]
   28eb6:	fba3 3201 	umull	r3, r2, r3, r1
   28eba:	fb01 2205 	mla	r2, r1, r5, r2
   28ebe:	e9c6 3200 	strd	r3, r2, [r6]
}
   28ec2:	4620      	mov	r0, r4
   28ec4:	b01a      	add	sp, #104	; 0x68
   28ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = sntp_query(&sntp_ctx, timeout, time);
   28eca:	464a      	mov	r2, r9
   28ecc:	f241 3188 	movw	r1, #5000	; 0x1388
   28ed0:	a801      	add	r0, sp, #4
   28ed2:	f7f8 fc51 	bl	21778 <sntp_query>
	if (err) {
   28ed6:	4604      	mov	r4, r0
   28ed8:	2800      	cmp	r0, #0
   28eda:	d0df      	beq.n	28e9c <date_time_ntp_get+0x98>
		LOG_WRN("sntp_query, error: %d", err);
   28edc:	4602      	mov	r2, r0
   28ede:	2157      	movs	r1, #87	; 0x57
   28ee0:	4650      	mov	r0, sl
   28ee2:	e7d9      	b.n	28e98 <date_time_ntp_get+0x94>
   28ee4:	000466fa 	.word	0x000466fa
   28ee8:	00042eac 	.word	0x00042eac
   28eec:	0004673d 	.word	0x0004673d
   28ef0:	0004678e 	.word	0x0004678e
   28ef4:	00046759 	.word	0x00046759
   28ef8:	200155e8 	.word	0x200155e8
   28efc:	00046739 	.word	0x00046739
   28f00:	00046773 	.word	0x00046773

00028f04 <date_time_at_xtime_handler>:
	/* 4 MSBs represent decimal that should be added as is. */
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
}

static void date_time_at_xtime_handler(const char *notif)
{
   28f04:	b530      	push	{r4, r5, lr}
	uint8_t time_buf[6];
	size_t time_buf_len;
	char *time_str_start;
	int err;

	if (notif == NULL) {
   28f06:	4604      	mov	r4, r0
{
   28f08:	b08d      	sub	sp, #52	; 0x34
	if (notif == NULL) {
   28f0a:	2800      	cmp	r0, #0
   28f0c:	f000 8082 	beq.w	29014 <date_time_at_xtime_handler+0x110>
		return;
	}
	modem_valid_network_time = true;
   28f10:	2201      	movs	r2, #1
   28f12:	4b41      	ldr	r3, [pc, #260]	; (29018 <date_time_at_xtime_handler+0x114>)
   28f14:	701a      	strb	r2, [r3, #0]

	/* Check if current time is valid */
	err = date_time_core_current_check();
   28f16:	f7ff fec9 	bl	28cac <date_time_core_current_check>
	if (err == 0) {
   28f1a:	2800      	cmp	r0, #0
   28f1c:	d07a      	beq.n	29014 <date_time_at_xtime_handler+0x110>
	 *                 and received from network.
	 * Examples of modem time response:
	 * %XTIME: "08","81109251714208","01"
	 * %XTIME: ,"81109251714208",
	 */
	time_str_start = strchr(notif, ',');
   28f1e:	212c      	movs	r1, #44	; 0x2c
   28f20:	4620      	mov	r0, r4
   28f22:	f018 fc45 	bl	417b0 <strchr>
	if (time_str_start == NULL) {
   28f26:	4605      	mov	r5, r0
   28f28:	b938      	cbnz	r0, 28f3a <date_time_at_xtime_handler+0x36>
		LOG_ERR("%%XTIME notification doesn't contain ',': %s", notif);
   28f2a:	4622      	mov	r2, r4
   28f2c:	2145      	movs	r1, #69	; 0x45
   28f2e:	483b      	ldr	r0, [pc, #236]	; (2901c <date_time_at_xtime_handler+0x118>)
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;

	LOG_DBG("Time obtained from cellular network (XTIME notification)");

	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
}
   28f30:	b00d      	add	sp, #52	; 0x34
   28f32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   28f36:	f013 bde3 	b.w	3cb00 <z_log_minimal_printk>
	if (strlen(time_str_start) < 17) {
   28f3a:	f7f4 f982 	bl	1d242 <strlen>
   28f3e:	2810      	cmp	r0, #16
   28f40:	d803      	bhi.n	28f4a <date_time_at_xtime_handler+0x46>
		LOG_ERR("%%XTIME notification too short: %s", notif);
   28f42:	4622      	mov	r2, r4
   28f44:	2145      	movs	r1, #69	; 0x45
   28f46:	4836      	ldr	r0, [pc, #216]	; (29020 <date_time_at_xtime_handler+0x11c>)
   28f48:	e7f2      	b.n	28f30 <date_time_at_xtime_handler+0x2c>
	if (*(time_str_start + 1) != '"') {
   28f4a:	786b      	ldrb	r3, [r5, #1]
   28f4c:	2b22      	cmp	r3, #34	; 0x22
   28f4e:	d003      	beq.n	28f58 <date_time_at_xtime_handler+0x54>
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   28f50:	4622      	mov	r2, r4
   28f52:	2145      	movs	r1, #69	; 0x45
   28f54:	4833      	ldr	r0, [pc, #204]	; (29024 <date_time_at_xtime_handler+0x120>)
   28f56:	e7eb      	b.n	28f30 <date_time_at_xtime_handler+0x2c>
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   28f58:	aa01      	add	r2, sp, #4
   28f5a:	2306      	movs	r3, #6
   28f5c:	210c      	movs	r1, #12
   28f5e:	1ca8      	adds	r0, r5, #2
   28f60:	f013 fb50 	bl	3c604 <hex2bin>
	if (time_buf_len < sizeof(time_buf)) {
   28f64:	2805      	cmp	r0, #5
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   28f66:	4602      	mov	r2, r0
	if (time_buf_len < sizeof(time_buf)) {
   28f68:	d804      	bhi.n	28f74 <date_time_at_xtime_handler+0x70>
		LOG_ERR("%%XTIME notification decoding failed (ret=%d): %s", time_buf_len, notif);
   28f6a:	4623      	mov	r3, r4
   28f6c:	2145      	movs	r1, #69	; 0x45
   28f6e:	482e      	ldr	r0, [pc, #184]	; (29028 <date_time_at_xtime_handler+0x124>)
   28f70:	f013 fdc6 	bl	3cb00 <z_log_minimal_printk>
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   28f74:	f89d 1006 	ldrb.w	r1, [sp, #6]
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   28f78:	f89d 2004 	ldrb.w	r2, [sp, #4]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   28f7c:	f001 000f 	and.w	r0, r1, #15
   28f80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   28f84:	0909      	lsrs	r1, r1, #4
   28f86:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   28f8a:	b2c9      	uxtb	r1, r1
   28f8c:	9106      	str	r1, [sp, #24]
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   28f8e:	f89d 1007 	ldrb.w	r1, [sp, #7]
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   28f92:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   28f96:	f001 000f 	and.w	r0, r1, #15
   28f9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   28f9e:	0909      	lsrs	r1, r1, #4
   28fa0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   28fa4:	b2c9      	uxtb	r1, r1
   28fa6:	9105      	str	r1, [sp, #20]
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   28fa8:	f89d 1008 	ldrb.w	r1, [sp, #8]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   28fac:	f001 000f 	and.w	r0, r1, #15
   28fb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   28fb4:	0909      	lsrs	r1, r1, #4
   28fb6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   28fba:	b2c9      	uxtb	r1, r1
   28fbc:	9104      	str	r1, [sp, #16]
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   28fbe:	f89d 1009 	ldrb.w	r1, [sp, #9]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   28fc2:	f001 000f 	and.w	r0, r1, #15
   28fc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   28fca:	0909      	lsrs	r1, r1, #4
   28fcc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   28fd0:	b2c9      	uxtb	r1, r1
   28fd2:	9103      	str	r1, [sp, #12]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   28fd4:	f002 010f 	and.w	r1, r2, #15
   28fd8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   28fdc:	0912      	lsrs	r2, r2, #4
   28fde:	eb02 0241 	add.w	r2, r2, r1, lsl #1
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   28fe2:	b2d2      	uxtb	r2, r2
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   28fe4:	3264      	adds	r2, #100	; 0x64
   28fe6:	9208      	str	r2, [sp, #32]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   28fe8:	f003 020f 	and.w	r2, r3, #15
   28fec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   28ff0:	091b      	lsrs	r3, r3, #4
   28ff2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   28ff6:	b2db      	uxtb	r3, r3
	date_time.tm_mon = date_time.tm_mon - 1;
   28ff8:	3b01      	subs	r3, #1
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   28ffa:	a803      	add	r0, sp, #12
	date_time.tm_mon = date_time.tm_mon - 1;
   28ffc:	9307      	str	r3, [sp, #28]
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   28ffe:	f7f8 f885 	bl	2110c <timeutil_timegm64>
   29002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   29006:	fba0 0403 	umull	r0, r4, r0, r3
	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
   2900a:	2200      	movs	r2, #0
   2900c:	fb03 4101 	mla	r1, r3, r1, r4
   29010:	f7ff fe72 	bl	28cf8 <date_time_core_store>
}
   29014:	b00d      	add	sp, #52	; 0x34
   29016:	bd30      	pop	{r4, r5, pc}
   29018:	2001c704 	.word	0x2001c704
   2901c:	000467d3 	.word	0x000467d3
   29020:	00046805 	.word	0x00046805
   29024:	0004682d 	.word	0x0004682d
   29028:	00046869 	.word	0x00046869

0002902c <date_time_modem_get>:
{
   2902c:	b530      	push	{r4, r5, lr}
	if (!modem_valid_network_time) {
   2902e:	4b18      	ldr	r3, [pc, #96]	; (29090 <date_time_modem_get+0x64>)
{
   29030:	4604      	mov	r4, r0
	if (!modem_valid_network_time) {
   29032:	781b      	ldrb	r3, [r3, #0]
{
   29034:	b08f      	sub	sp, #60	; 0x3c
	if (!modem_valid_network_time) {
   29036:	b1a3      	cbz	r3, 29062 <date_time_modem_get+0x36>
	rc = nrf_modem_at_scanf("AT+CCLK?",
   29038:	ab06      	add	r3, sp, #24
   2903a:	9302      	str	r3, [sp, #8]
   2903c:	ab07      	add	r3, sp, #28
   2903e:	9301      	str	r3, [sp, #4]
   29040:	ad05      	add	r5, sp, #20
   29042:	ab08      	add	r3, sp, #32
   29044:	9300      	str	r3, [sp, #0]
   29046:	aa0a      	add	r2, sp, #40	; 0x28
   29048:	4912      	ldr	r1, [pc, #72]	; (29094 <date_time_modem_get+0x68>)
   2904a:	4813      	ldr	r0, [pc, #76]	; (29098 <date_time_modem_get+0x6c>)
   2904c:	9503      	str	r5, [sp, #12]
   2904e:	ab09      	add	r3, sp, #36	; 0x24
   29050:	f00c f87c 	bl	3514c <nrf_modem_at_scanf>
	if (rc != 6) {
   29054:	2806      	cmp	r0, #6
	rc = nrf_modem_at_scanf("AT+CCLK?",
   29056:	4602      	mov	r2, r0
	if (rc != 6) {
   29058:	d006      	beq.n	29068 <date_time_modem_get+0x3c>
		LOG_WRN("Did not get time from cellular network (error: %d). "
   2905a:	2157      	movs	r1, #87	; 0x57
   2905c:	480f      	ldr	r0, [pc, #60]	; (2909c <date_time_modem_get+0x70>)
   2905e:	f013 fd4f 	bl	3cb00 <z_log_minimal_printk>
		return -ENODATA;
   29062:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   29066:	e011      	b.n	2908c <date_time_modem_get+0x60>
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   29068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2906a:	4628      	mov	r0, r5
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   2906c:	3364      	adds	r3, #100	; 0x64
   2906e:	930a      	str	r3, [sp, #40]	; 0x28
	date_time.tm_mon = date_time.tm_mon - 1;
   29070:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29072:	3b01      	subs	r3, #1
   29074:	9309      	str	r3, [sp, #36]	; 0x24
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   29076:	f7f8 f849 	bl	2110c <timeutil_timegm64>
   2907a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2907e:	fba0 3002 	umull	r3, r0, r0, r2
   29082:	fb02 0001 	mla	r0, r2, r1, r0
   29086:	e9c4 3000 	strd	r3, r0, [r4]
	return 0;
   2908a:	2000      	movs	r0, #0
}
   2908c:	b00f      	add	sp, #60	; 0x3c
   2908e:	bd30      	pop	{r4, r5, pc}
   29090:	2001c704 	.word	0x2001c704
   29094:	000468a0 	.word	0x000468a0
   29098:	000460eb 	.word	0x000460eb
   2909c:	000468ba 	.word	0x000468ba

000290a0 <date_time_modem_store>:
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) */

void date_time_modem_store(struct tm *ltm)
{
   290a0:	b530      	push	{r4, r5, lr}
	int ret;

	/* Set modem time if modem has not got it from the LTE network */
	if (!modem_valid_network_time) {
   290a2:	4b11      	ldr	r3, [pc, #68]	; (290e8 <date_time_modem_store+0x48>)
{
   290a4:	b085      	sub	sp, #20
	if (!modem_valid_network_time) {
   290a6:	781b      	ldrb	r3, [r3, #0]
   290a8:	b9db      	cbnz	r3, 290e2 <date_time_modem_store+0x42>
		/* Time zone is not known and it's mandatory so setting to zero.
		 * POSIX year is relative to 1900 which doesn't affect as last two digits are taken
		 * with modulo 100.
		 * POSIX month is in range 0-11 so adding 1.
		 */
		ret = nrf_modem_at_printf("AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u+%02u\"",
   290aa:	e9d0 2104 	ldrd	r2, r1, [r0, #16]
   290ae:	2464      	movs	r4, #100	; 0x64
   290b0:	fb91 f5f4 	sdiv	r5, r1, r4
   290b4:	9303      	str	r3, [sp, #12]
   290b6:	6803      	ldr	r3, [r0, #0]
   290b8:	3201      	adds	r2, #1
   290ba:	9302      	str	r3, [sp, #8]
   290bc:	6843      	ldr	r3, [r0, #4]
   290be:	fb04 1115 	mls	r1, r4, r5, r1
   290c2:	9301      	str	r3, [sp, #4]
   290c4:	6883      	ldr	r3, [r0, #8]
   290c6:	9300      	str	r3, [sp, #0]
   290c8:	68c3      	ldr	r3, [r0, #12]
   290ca:	4808      	ldr	r0, [pc, #32]	; (290ec <date_time_modem_store+0x4c>)
   290cc:	f00b ffac 	bl	35028 <nrf_modem_at_printf>
			ltm->tm_year % 100, ltm->tm_mon + 1, ltm->tm_mday,
			ltm->tm_hour, ltm->tm_min, ltm->tm_sec, 0);
		if (ret) {
   290d0:	4602      	mov	r2, r0
   290d2:	b130      	cbz	r0, 290e2 <date_time_modem_store+0x42>
			LOG_ERR("Setting modem time failed, %d", ret);
   290d4:	2145      	movs	r1, #69	; 0x45
   290d6:	4806      	ldr	r0, [pc, #24]	; (290f0 <date_time_modem_store+0x50>)
			return;
		}

		LOG_DBG("Modem time updated");
	}
}
   290d8:	b005      	add	sp, #20
   290da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Setting modem time failed, %d", ret);
   290de:	f013 bd0f 	b.w	3cb00 <z_log_minimal_printk>
}
   290e2:	b005      	add	sp, #20
   290e4:	bd30      	pop	{r4, r5, pc}
   290e6:	bf00      	nop
   290e8:	2001c704 	.word	0x2001c704
   290ec:	0004694f 	.word	0x0004694f
   290f0:	0004697c 	.word	0x0004697c

000290f4 <date_time_modem_xtime_subscribe>:

void date_time_modem_xtime_subscribe(void)
{
   290f4:	b508      	push	{r3, lr}
	/* Subscribe to modem time notifications */
	int err = nrf_modem_at_printf("AT%%XTIME=1");
   290f6:	4806      	ldr	r0, [pc, #24]	; (29110 <date_time_modem_xtime_subscribe+0x1c>)
   290f8:	f00b ff96 	bl	35028 <nrf_modem_at_printf>

	if (err) {
   290fc:	4602      	mov	r2, r0
   290fe:	b128      	cbz	r0, 2910c <date_time_modem_xtime_subscribe+0x18>
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
	}
}
   29100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
   29104:	2145      	movs	r1, #69	; 0x45
   29106:	4803      	ldr	r0, [pc, #12]	; (29114 <date_time_modem_xtime_subscribe+0x20>)
   29108:	f013 bcfa 	b.w	3cb00 <z_log_minimal_printk>
}
   2910c:	bd08      	pop	{r3, pc}
   2910e:	bf00      	nop
   29110:	0004699f 	.word	0x0004699f
   29114:	000469ab 	.word	0x000469ab

00029118 <multicell_location_get>:


int multicell_location_get(enum multicell_service service,
			   const struct lte_lc_cells_info *cell_data,
			   struct multicell_location *location)
{
   29118:	b570      	push	{r4, r5, r6, lr}
   2911a:	4606      	mov	r6, r0
   2911c:	4615      	mov	r5, r2
	if ((cell_data == NULL) || (location == NULL)) {
   2911e:	460c      	mov	r4, r1
   29120:	b1f1      	cbz	r1, 29160 <multicell_location_get+0x48>
   29122:	b1ea      	cbz	r2, 29160 <multicell_location_get+0x48>
		return -EINVAL;
	}

	if (cell_data->current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   29124:	688b      	ldr	r3, [r1, #8]
   29126:	3301      	adds	r3, #1
   29128:	d106      	bne.n	29138 <multicell_location_get+0x20>
		LOG_WRN("Invalid cell ID, device may not be connected to a network");
   2912a:	480f      	ldr	r0, [pc, #60]	; (29168 <multicell_location_get+0x50>)
   2912c:	2157      	movs	r1, #87	; 0x57
   2912e:	f013 fce7 	bl	3cb00 <z_log_minimal_printk>
		return -ENOENT;
   29132:	f06f 0001 	mvn.w	r0, #1
			cell_data->ncells_count, CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS);
		LOG_WRN("Increase CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS to use more cells");
	}

	return location_service_get_cell_location(service, cell_data, location);
}
   29136:	bd70      	pop	{r4, r5, r6, pc}
	if (cell_data->ncells_count > CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS) {
   29138:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   2913c:	2a08      	cmp	r2, #8
   2913e:	d908      	bls.n	29152 <multicell_location_get+0x3a>
		LOG_WRN("Found %d neighbor cells, but %d cells will be used in location request",
   29140:	2157      	movs	r1, #87	; 0x57
   29142:	480a      	ldr	r0, [pc, #40]	; (2916c <multicell_location_get+0x54>)
   29144:	2308      	movs	r3, #8
   29146:	f013 fcdb 	bl	3cb00 <z_log_minimal_printk>
		LOG_WRN("Increase CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS to use more cells");
   2914a:	2157      	movs	r1, #87	; 0x57
   2914c:	4808      	ldr	r0, [pc, #32]	; (29170 <multicell_location_get+0x58>)
   2914e:	f013 fcd7 	bl	3cb00 <z_log_minimal_printk>
	return location_service_get_cell_location(service, cell_data, location);
   29152:	462a      	mov	r2, r5
   29154:	4621      	mov	r1, r4
   29156:	4630      	mov	r0, r6
}
   29158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return location_service_get_cell_location(service, cell_data, location);
   2915c:	f000 b858 	b.w	29210 <location_service_get_cell_location>
		return -EINVAL;
   29160:	f06f 0015 	mvn.w	r0, #21
   29164:	e7e7      	b.n	29136 <multicell_location_get+0x1e>
   29166:	bf00      	nop
   29168:	000469f3 	.word	0x000469f3
   2916c:	00046a32 	.word	0x00046a32
   29170:	00046a7e 	.word	0x00046a7e

00029174 <multicell_location_provision_certificate>:

	return 0;
}

int multicell_location_provision_certificate(bool overwrite)
{
   29174:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29176:	4606      	mov	r6, r0
	int ret = -ENOTSUP;

#if defined(CONFIG_MULTICELL_LOCATION_SERVICE_NRF_CLOUD)
	ret = multicell_location_provision_service_certificate(
   29178:	2001      	movs	r0, #1
   2917a:	f016 fa16 	bl	3f5aa <location_service_get_certificate>
	if (certificate == NULL) {
   2917e:	4605      	mov	r5, r0
   29180:	b940      	cbnz	r0, 29194 <multicell_location_provision_certificate+0x20>
		LOG_ERR("No certificate was provided by the location service");
   29182:	2145      	movs	r1, #69	; 0x45
   29184:	481c      	ldr	r0, [pc, #112]	; (291f8 <multicell_location_provision_certificate+0x84>)
   29186:	f013 fcbb 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   2918a:	f06f 040d 	mvn.w	r4, #13
	if (ret) {
		return ret;
	}
#endif
	return ret;
}
   2918e:	4620      	mov	r0, r4
   29190:	b002      	add	sp, #8
   29192:	bd70      	pop	{r4, r5, r6, pc}
	err = modem_key_mgmt_exists(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, &exists);
   29194:	2100      	movs	r1, #0
   29196:	4819      	ldr	r0, [pc, #100]	; (291fc <multicell_location_provision_certificate+0x88>)
   29198:	f10d 0207 	add.w	r2, sp, #7
   2919c:	f7ff fca8 	bl	28af0 <modem_key_mgmt_exists>
	if (err) {
   291a0:	4604      	mov	r4, r0
   291a2:	b128      	cbz	r0, 291b0 <multicell_location_provision_certificate+0x3c>
		LOG_ERR("Failed to check for certificates err %d", err);
   291a4:	2145      	movs	r1, #69	; 0x45
   291a6:	4602      	mov	r2, r0
   291a8:	4815      	ldr	r0, [pc, #84]	; (29200 <multicell_location_provision_certificate+0x8c>)
		LOG_ERR("Failed to provision certificate, err %d", err);
   291aa:	f013 fca9 	bl	3cb00 <z_log_minimal_printk>
		return err;
   291ae:	e7ee      	b.n	2918e <multicell_location_provision_certificate+0x1a>
	if (exists && overwrite) {
   291b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   291b4:	b15b      	cbz	r3, 291ce <multicell_location_provision_certificate+0x5a>
   291b6:	2e00      	cmp	r6, #0
   291b8:	d0e9      	beq.n	2918e <multicell_location_provision_certificate+0x1a>
		err = modem_key_mgmt_delete(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN);
   291ba:	4601      	mov	r1, r0
   291bc:	480f      	ldr	r0, [pc, #60]	; (291fc <multicell_location_provision_certificate+0x88>)
   291be:	f7ff fc79 	bl	28ab4 <modem_key_mgmt_delete>
		if (err) {
   291c2:	4602      	mov	r2, r0
   291c4:	b118      	cbz	r0, 291ce <multicell_location_provision_certificate+0x5a>
			LOG_ERR("Failed to delete existing certificate, err %d", err);
   291c6:	2145      	movs	r1, #69	; 0x45
   291c8:	480e      	ldr	r0, [pc, #56]	; (29204 <multicell_location_provision_certificate+0x90>)
   291ca:	f013 fc99 	bl	3cb00 <z_log_minimal_printk>
	LOG_INF("Provisioning certificate");
   291ce:	2149      	movs	r1, #73	; 0x49
   291d0:	480d      	ldr	r0, [pc, #52]	; (29208 <multicell_location_provision_certificate+0x94>)
   291d2:	f013 fc95 	bl	3cb00 <z_log_minimal_printk>
	err = modem_key_mgmt_write(sec_tag,
   291d6:	4628      	mov	r0, r5
   291d8:	f7f4 f833 	bl	1d242 <strlen>
   291dc:	462a      	mov	r2, r5
   291de:	4603      	mov	r3, r0
   291e0:	2100      	movs	r1, #0
   291e2:	4806      	ldr	r0, [pc, #24]	; (291fc <multicell_location_provision_certificate+0x88>)
   291e4:	f7ff fc3e 	bl	28a64 <modem_key_mgmt_write>
	if (err) {
   291e8:	4604      	mov	r4, r0
   291ea:	2800      	cmp	r0, #0
   291ec:	d0cf      	beq.n	2918e <multicell_location_provision_certificate+0x1a>
		LOG_ERR("Failed to provision certificate, err %d", err);
   291ee:	4602      	mov	r2, r0
   291f0:	2145      	movs	r1, #69	; 0x45
   291f2:	4806      	ldr	r0, [pc, #24]	; (2920c <multicell_location_provision_certificate+0x98>)
   291f4:	e7d9      	b.n	291aa <multicell_location_provision_certificate+0x36>
   291f6:	bf00      	nop
   291f8:	00046ac6 	.word	0x00046ac6
   291fc:	01010001 	.word	0x01010001
   29200:	00046aff 	.word	0x00046aff
   29204:	00046b2c 	.word	0x00046b2c
   29208:	00046b5f 	.word	0x00046b5f
   2920c:	00046b7d 	.word	0x00046b7d

00029210 <location_service_get_cell_location>:

int location_service_get_cell_location(
	enum multicell_service service,
	const struct lte_lc_cells_info *cell_data,
	struct multicell_location *const location)
{
   29210:	b410      	push	{r4}
   29212:	4604      	mov	r4, r0
#if defined(CONFIG_MULTICELL_LOCATION_SERVICE_NRF_CLOUD)
	if (service == MULTICELL_SERVICE_NRF_CLOUD || service == MULTICELL_SERVICE_ANY) {
   29214:	2c01      	cmp	r4, #1
{
   29216:	4608      	mov	r0, r1
   29218:	4613      	mov	r3, r2
	if (service == MULTICELL_SERVICE_NRF_CLOUD || service == MULTICELL_SERVICE_ANY) {
   2921a:	d806      	bhi.n	2922a <location_service_get_cell_location+0x1a>
		return location_service_get_cell_location_nrf_cloud(
   2921c:	f44f 7200 	mov.w	r2, #512	; 0x200
   29220:	4904      	ldr	r1, [pc, #16]	; (29234 <location_service_get_cell_location+0x24>)
			cell_data, recv_buf, sizeof(recv_buf), location);
	}
#endif
	/* We should never get here as at least one service must be enabled */
	return -ENOTSUP;
}
   29222:	f85d 4b04 	ldr.w	r4, [sp], #4
		return location_service_get_cell_location_nrf_cloud(
   29226:	f000 b835 	b.w	29294 <location_service_get_cell_location_nrf_cloud>
}
   2922a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2922e:	f85d 4b04 	ldr.w	r4, [sp], #4
   29232:	4770      	bx	lr
   29234:	2001c705 	.word	0x2001c705

00029238 <location_service_location_ready_cb>:
	return tls_certificate;
}

#if defined(CONFIG_NRF_CLOUD_MQTT)
static void location_service_location_ready_cb(const struct nrf_cloud_cell_pos_result *const result)
{
   29238:	b538      	push	{r3, r4, r5, lr}
	if ((result != NULL) && (result->err == NRF_CLOUD_ERROR_NONE)) {
   2923a:	4604      	mov	r4, r0
   2923c:	b1d8      	cbz	r0, 29276 <location_service_location_ready_cb+0x3e>
   2923e:	69c2      	ldr	r2, [r0, #28]
   29240:	b9aa      	cbnz	r2, 2926e <location_service_location_ready_cb+0x36>
		nrf_cloud_location.latitude = result->lat;
   29242:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   29246:	f7f3 fdaf 	bl	1cda8 <__aeabi_d2f>
   2924a:	4d0d      	ldr	r5, [pc, #52]	; (29280 <location_service_location_ready_cb+0x48>)
   2924c:	6028      	str	r0, [r5, #0]
		nrf_cloud_location.longitude = result->lon;
   2924e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   29252:	f7f3 fda9 	bl	1cda8 <__aeabi_d2f>
   29256:	6068      	str	r0, [r5, #4]
		nrf_cloud_location.accuracy = (double)result->unc;
   29258:	69a0      	ldr	r0, [r4, #24]
   2925a:	f7f3 fa33 	bl	1c6c4 <__aeabi_ui2d>
   2925e:	f7f3 fda3 	bl	1cda8 <__aeabi_d2f>
   29262:	60a8      	str	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   29264:	4807      	ldr	r0, [pc, #28]	; (29284 <location_service_location_ready_cb+0x4c>)
		/* Reset the semaphore to unblock location_service_get_cell_location_nrf_cloud()
		 * and make it return an error.
		 */
		k_sem_reset(&location_ready);
	}
}
   29266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2926a:	f00d bd85 	b.w	36d78 <z_impl_k_sem_give>
			LOG_ERR("Unable to determine location from cellular data, error: %d",
   2926e:	2145      	movs	r1, #69	; 0x45
   29270:	4805      	ldr	r0, [pc, #20]	; (29288 <location_service_location_ready_cb+0x50>)
   29272:	f013 fc45 	bl	3cb00 <z_log_minimal_printk>
}
   29276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_reset(sem);
   2927a:	4802      	ldr	r0, [pc, #8]	; (29284 <location_service_location_ready_cb+0x4c>)
   2927c:	f00d be22 	b.w	36ec4 <z_impl_k_sem_reset>
   29280:	20019428 	.word	0x20019428
   29284:	20015090 	.word	0x20015090
   29288:	00046bbd 	.word	0x00046bbd

0002928c <location_service_get_certificate_nrf_cloud>:
}
   2928c:	4800      	ldr	r0, [pc, #0]	; (29290 <location_service_get_certificate_nrf_cloud+0x4>)
   2928e:	4770      	bx	lr
   29290:	00046cfa 	.word	0x00046cfa

00029294 <location_service_get_cell_location_nrf_cloud>:
int location_service_get_cell_location_nrf_cloud(
	const struct lte_lc_cells_info *cell_data,
	char * const rcv_buf,
	const size_t rcv_buf_len,
	struct multicell_location *const location)
{
   29294:	b538      	push	{r3, r4, r5, lr}
   29296:	4604      	mov	r4, r0
   29298:	461d      	mov	r5, r3
   2929a:	4819      	ldr	r0, [pc, #100]	; (29300 <location_service_get_cell_location_nrf_cloud+0x6c>)
   2929c:	f00d fe12 	bl	36ec4 <z_impl_k_sem_reset>
	int err;

	k_sem_reset(&location_ready);

	LOG_DBG("Sending cellular positioning request (MQTT)");
	err = nrf_cloud_cell_pos_request(cell_data, true, location_service_location_ready_cb);
   292a0:	4620      	mov	r0, r4
   292a2:	2101      	movs	r1, #1
   292a4:	4a17      	ldr	r2, [pc, #92]	; (29304 <location_service_get_cell_location_nrf_cloud+0x70>)
   292a6:	f016 fa5b 	bl	3f760 <nrf_cloud_cell_pos_request>
	if (err == -EACCES) {
   292aa:	f110 0f0d 	cmn.w	r0, #13
	err = nrf_cloud_cell_pos_request(cell_data, true, location_service_location_ready_cb);
   292ae:	4604      	mov	r4, r0
	if (err == -EACCES) {
   292b0:	d105      	bne.n	292be <location_service_get_cell_location_nrf_cloud+0x2a>
		LOG_ERR("Cloud connection is not established");
   292b2:	2145      	movs	r1, #69	; 0x45
   292b4:	4814      	ldr	r0, [pc, #80]	; (29308 <location_service_get_cell_location_nrf_cloud+0x74>)
   292b6:	f013 fc23 	bl	3cb00 <z_log_minimal_printk>
	}

	*location = nrf_cloud_location;

	return err;
}
   292ba:	4620      	mov	r0, r4
   292bc:	bd38      	pop	{r3, r4, r5, pc}
	} else if (err) {
   292be:	b128      	cbz	r0, 292cc <location_service_get_cell_location_nrf_cloud+0x38>
		LOG_ERR("Failed to request cellular positioning data, error: %d", err);
   292c0:	4602      	mov	r2, r0
   292c2:	2145      	movs	r1, #69	; 0x45
   292c4:	4811      	ldr	r0, [pc, #68]	; (2930c <location_service_get_cell_location_nrf_cloud+0x78>)
   292c6:	f013 fc1b 	bl	3cb00 <z_log_minimal_printk>
		return err;
   292ca:	e7f6      	b.n	292ba <location_service_get_cell_location_nrf_cloud+0x26>
	LOG_INF("Cellular positioning request sent");
   292cc:	2149      	movs	r1, #73	; 0x49
   292ce:	4810      	ldr	r0, [pc, #64]	; (29310 <location_service_get_cell_location_nrf_cloud+0x7c>)
   292d0:	f013 fc16 	bl	3cb00 <z_log_minimal_printk>
	return z_impl_k_sem_take(sem, timeout);
   292d4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   292d8:	2300      	movs	r3, #0
   292da:	4809      	ldr	r0, [pc, #36]	; (29300 <location_service_get_cell_location_nrf_cloud+0x6c>)
   292dc:	f00d fd88 	bl	36df0 <z_impl_k_sem_take>
	if (k_sem_take(&location_ready, K_SECONDS(20)) == -EAGAIN) {
   292e0:	300b      	adds	r0, #11
   292e2:	d106      	bne.n	292f2 <location_service_get_cell_location_nrf_cloud+0x5e>
		LOG_ERR("Cellular positioning data request timed out or "
   292e4:	2145      	movs	r1, #69	; 0x45
   292e6:	480b      	ldr	r0, [pc, #44]	; (29314 <location_service_get_cell_location_nrf_cloud+0x80>)
   292e8:	f013 fc0a 	bl	3cb00 <z_log_minimal_printk>
		return -ETIMEDOUT;
   292ec:	f06f 0473 	mvn.w	r4, #115	; 0x73
   292f0:	e7e3      	b.n	292ba <location_service_get_cell_location_nrf_cloud+0x26>
	*location = nrf_cloud_location;
   292f2:	4b09      	ldr	r3, [pc, #36]	; (29318 <location_service_get_cell_location_nrf_cloud+0x84>)
   292f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   292f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	return err;
   292fc:	e7dd      	b.n	292ba <location_service_get_cell_location_nrf_cloud+0x26>
   292fe:	bf00      	nop
   29300:	20015090 	.word	0x20015090
   29304:	00029239 	.word	0x00029239
   29308:	00046bfd 	.word	0x00046bfd
   2930c:	00046c26 	.word	0x00046c26
   29310:	00046c62 	.word	0x00046c62
   29314:	00046c89 	.word	0x00046c89
   29318:	20019428 	.word	0x20019428

0002931c <location_init>:
static const char LOCATION_METHOD_GNSS_STR[] = "GNSS";
static const char LOCATION_METHOD_WIFI_STR[] = "Wi-Fi";
static const char LOCATION_METHOD_UNKNOWN_STR[] = "Unknown";

int location_init(location_event_handler_t handler)
{
   2931c:	b510      	push	{r4, lr}
	int err;

	err = location_core_event_handler_set(handler);
   2931e:	f000 f8e5 	bl	294ec <location_core_event_handler_set>
	if (err) {
   29322:	b938      	cbnz	r0, 29334 <location_init+0x18>
		return err;
	}
	if (initialized) {
   29324:	4c04      	ldr	r4, [pc, #16]	; (29338 <location_init+0x1c>)
   29326:	7823      	ldrb	r3, [r4, #0]
   29328:	b923      	cbnz	r3, 29334 <location_init+0x18>
		/* Already initialized so library is ready. We just updated the event handler. */
		return 0;
	}

	err = location_core_init();
   2932a:	f000 f8f1 	bl	29510 <location_core_init>
	if (err) {
   2932e:	b908      	cbnz	r0, 29334 <location_init+0x18>
		return err;
	}

	initialized = true;
   29330:	2301      	movs	r3, #1
   29332:	7023      	strb	r3, [r4, #0]

	LOG_DBG("Location library initialized");

	return 0;
}
   29334:	bd10      	pop	{r4, pc}
   29336:	bf00      	nop
   29338:	2001c905 	.word	0x2001c905

0002933c <location_config_defaults_set>:

void location_config_defaults_set(
	struct location_config *config,
	uint8_t methods_count,
	enum location_method *method_types)
{
   2933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2933e:	460d      	mov	r5, r1
   29340:	4616      	mov	r6, r2
	if (config == NULL) {
   29342:	4604      	mov	r4, r0
   29344:	b928      	cbnz	r0, 29352 <location_config_defaults_set+0x16>
		LOG_ERR("Configuration must not be NULL");
   29346:	2145      	movs	r1, #69	; 0x45
	config->methods_count = methods_count;
	config->mode = LOCATION_REQ_MODE_FALLBACK;
	for (int i = 0; i < methods_count; i++) {
		location_config_method_defaults_set(&config->methods[i], method_types[i]);
	}
}
   29348:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("Configuration must not be NULL");
   2934c:	4814      	ldr	r0, [pc, #80]	; (293a0 <location_config_defaults_set+0x64>)
   2934e:	f013 bbd7 	b.w	3cb00 <z_log_minimal_printk>
__ssp_bos_icheck3(memset, void *, int)
   29352:	221e      	movs	r2, #30
   29354:	2100      	movs	r1, #0
   29356:	f018 f86d 	bl	41434 <memset>
	for (int i = 0; i < methods_count; i++) {
   2935a:	2300      	movs	r3, #0
   2935c:	4620      	mov	r0, r4
	config->methods_count = methods_count;
   2935e:	7025      	strb	r5, [r4, #0]
		method->wifi.service = LOCATION_SERVICE_ANY;
   29360:	461a      	mov	r2, r3
		method->wifi.timeout = 30;
   29362:	241e      	movs	r4, #30
		method->gnss.timeout = 120;
   29364:	2778      	movs	r7, #120	; 0x78
		method->gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   29366:	f04f 0c01 	mov.w	ip, #1
		method->gnss.num_consecutive_fixes = 3;
   2936a:	f04f 0e03 	mov.w	lr, #3
	for (int i = 0; i < methods_count; i++) {
   2936e:	42ab      	cmp	r3, r5
   29370:	db00      	blt.n	29374 <location_config_defaults_set+0x38>
}
   29372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		location_config_method_defaults_set(&config->methods[i], method_types[i]);
   29374:	5cf1      	ldrb	r1, [r6, r3]
	if (method_type == LOCATION_METHOD_GNSS) {
   29376:	2902      	cmp	r1, #2
	method->method = method_type;
   29378:	7081      	strb	r1, [r0, #2]
	if (method_type == LOCATION_METHOD_GNSS) {
   2937a:	d108      	bne.n	2938e <location_config_defaults_set+0x52>
		method->gnss.timeout = 120;
   2937c:	8087      	strh	r7, [r0, #4]
		method->gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   2937e:	f880 c006 	strb.w	ip, [r0, #6]
		method->gnss.num_consecutive_fixes = 3;
   29382:	f880 e007 	strb.w	lr, [r0, #7]
		method->gnss.visibility_detection = false;
   29386:	7202      	strb	r2, [r0, #8]
	for (int i = 0; i < methods_count; i++) {
   29388:	3301      	adds	r3, #1
   2938a:	3008      	adds	r0, #8
   2938c:	e7ef      	b.n	2936e <location_config_defaults_set+0x32>
	} else if (method_type == LOCATION_METHOD_CELLULAR) {
   2938e:	2901      	cmp	r1, #1
   29390:	d102      	bne.n	29398 <location_config_defaults_set+0x5c>
		method->wifi.timeout = 30;
   29392:	8084      	strh	r4, [r0, #4]
		method->wifi.service = LOCATION_SERVICE_ANY;
   29394:	7182      	strb	r2, [r0, #6]
   29396:	e7f7      	b.n	29388 <location_config_defaults_set+0x4c>
	} else if (method_type == LOCATION_METHOD_WIFI) {
   29398:	2903      	cmp	r1, #3
   2939a:	d1f5      	bne.n	29388 <location_config_defaults_set+0x4c>
   2939c:	e7f9      	b.n	29392 <location_config_defaults_set+0x56>
   2939e:	bf00      	nop
   293a0:	00047377 	.word	0x00047377

000293a4 <location_request>:
{
   293a4:	b530      	push	{r4, r5, lr}
   293a6:	b08b      	sub	sp, #44	; 0x2c
   293a8:	4604      	mov	r4, r0
	struct location_config default_config = { 0 };
   293aa:	221e      	movs	r2, #30
   293ac:	2100      	movs	r1, #0
   293ae:	a802      	add	r0, sp, #8
   293b0:	f018 f840 	bl	41434 <memset>
	enum location_method methods[] = {
   293b4:	4b17      	ldr	r3, [pc, #92]	; (29414 <location_request+0x70>)
   293b6:	881b      	ldrh	r3, [r3, #0]
   293b8:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (!initialized) {
   293bc:	4b16      	ldr	r3, [pc, #88]	; (29418 <location_request+0x74>)
   293be:	781b      	ldrb	r3, [r3, #0]
   293c0:	b94b      	cbnz	r3, 293d6 <location_request+0x32>
		LOG_ERR("Location library not initialized when calling %s", __func__);
   293c2:	2145      	movs	r1, #69	; 0x45
   293c4:	4a15      	ldr	r2, [pc, #84]	; (2941c <location_request+0x78>)
   293c6:	4816      	ldr	r0, [pc, #88]	; (29420 <location_request+0x7c>)
   293c8:	f013 fb9a 	bl	3cb00 <z_log_minimal_printk>
		return -EPERM;
   293cc:	f04f 35ff 	mov.w	r5, #4294967295
}
   293d0:	4628      	mov	r0, r5
   293d2:	b00b      	add	sp, #44	; 0x2c
   293d4:	bd30      	pop	{r4, r5, pc}
	if (config == NULL || config->methods_count == 0) {
   293d6:	b10c      	cbz	r4, 293dc <location_request+0x38>
   293d8:	7823      	ldrb	r3, [r4, #0]
   293da:	b94b      	cbnz	r3, 293f0 <location_request+0x4c>
		location_config_defaults_set(&default_config, ARRAY_SIZE(methods), methods);
   293dc:	2102      	movs	r1, #2
   293de:	aa01      	add	r2, sp, #4
   293e0:	a802      	add	r0, sp, #8
   293e2:	f7ff ffab 	bl	2933c <location_config_defaults_set>
		if (config != NULL) {
   293e6:	b114      	cbz	r4, 293ee <location_request+0x4a>
			default_config.interval = config->interval;
   293e8:	8b63      	ldrh	r3, [r4, #26]
   293ea:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		config = &default_config;
   293ee:	ac02      	add	r4, sp, #8
	location_core_config_log(config);
   293f0:	4620      	mov	r0, r4
   293f2:	f016 f8e0 	bl	3f5b6 <location_core_config_log>
	err = location_core_validate_params(config);
   293f6:	4620      	mov	r0, r4
   293f8:	f000 f8b6 	bl	29568 <location_core_validate_params>
	if (err) {
   293fc:	4605      	mov	r5, r0
   293fe:	b120      	cbz	r0, 2940a <location_request+0x66>
		LOG_ERR("Invalid parameters given.");
   29400:	2145      	movs	r1, #69	; 0x45
   29402:	4808      	ldr	r0, [pc, #32]	; (29424 <location_request+0x80>)
   29404:	f013 fb7c 	bl	3cb00 <z_log_minimal_printk>
		return err;
   29408:	e7e2      	b.n	293d0 <location_request+0x2c>
	err = location_core_location_get(config);
   2940a:	4620      	mov	r0, r4
   2940c:	f000 f8ea 	bl	295e4 <location_core_location_get>
   29410:	4605      	mov	r5, r0
	return err;
   29412:	e7dd      	b.n	293d0 <location_request+0x2c>
   29414:	00042862 	.word	0x00042862
   29418:	2001c905 	.word	0x2001c905
   2941c:	000473ba 	.word	0x000473ba
   29420:	00047341 	.word	0x00047341
   29424:	0004739b 	.word	0x0004739b

00029428 <location_method_api_get>:
static const struct location_method_api *location_method_api_get(enum location_method method)
{
	const struct location_method_api *method_api = NULL;

	for (int i = 0; methods_supported[i] != NULL; i++) {
		if (method == methods_supported[i]->method) {
   29428:	2802      	cmp	r0, #2
   2942a:	d004      	beq.n	29436 <location_method_api_get+0xe>
	const struct location_method_api *method_api = NULL;
   2942c:	2801      	cmp	r0, #1
   2942e:	4803      	ldr	r0, [pc, #12]	; (2943c <location_method_api_get+0x14>)
   29430:	bf18      	it	ne
   29432:	2000      	movne	r0, #0
   29434:	4770      	bx	lr
	for (int i = 0; methods_supported[i] != NULL; i++) {
   29436:	4802      	ldr	r0, [pc, #8]	; (29440 <location_method_api_get+0x18>)
			break;
		}
	}

	return method_api;
}
   29438:	4770      	bx	lr
   2943a:	bf00      	nop
   2943c:	00042eb4 	.word	0x00042eb4
   29440:	00042ed0 	.word	0x00042ed0

00029444 <location_core_current_config_clear>:
	memset(&current_config, 0, sizeof(current_config));
   29444:	221e      	movs	r2, #30
   29446:	2100      	movs	r1, #0
   29448:	4801      	ldr	r0, [pc, #4]	; (29450 <location_core_current_config_clear+0xc>)
   2944a:	f017 bff3 	b.w	41434 <memset>
   2944e:	bf00      	nop
   29450:	2001a56c 	.word	0x2001a56c

00029454 <location_core_current_event_data_init>:
	memset(&current_event_data, 0, sizeof(current_event_data));
   29454:	4b04      	ldr	r3, [pc, #16]	; (29468 <location_core_current_event_data_init+0x14>)
{
   29456:	b510      	push	{r4, lr}
	memset(&current_event_data, 0, sizeof(current_event_data));
   29458:	2230      	movs	r2, #48	; 0x30
{
   2945a:	4604      	mov	r4, r0
	memset(&current_event_data, 0, sizeof(current_event_data));
   2945c:	2100      	movs	r1, #0
   2945e:	4618      	mov	r0, r3
   29460:	f017 ffe8 	bl	41434 <memset>
	current_event_data.location.method = method;
   29464:	7204      	strb	r4, [r0, #8]
}
   29466:	bd10      	pop	{r4, pc}
   29468:	200155f8 	.word	0x200155f8

0002946c <location_core_location_get_pos>:

	memcpy(&current_config, config, sizeof(struct location_config));
}

static int location_core_location_get_pos(const struct location_config *config)
{
   2946c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(config->methods_count <= CONFIG_LOCATION_METHODS_LIST_SIZE);
   2946e:	7803      	ldrb	r3, [r0, #0]
{
   29470:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(config->methods_count <= CONFIG_LOCATION_METHODS_LIST_SIZE);
   29472:	2b03      	cmp	r3, #3
   29474:	d90a      	bls.n	2948c <location_core_location_get_pos+0x20>
   29476:	4916      	ldr	r1, [pc, #88]	; (294d0 <location_core_location_get_pos+0x64>)
   29478:	4816      	ldr	r0, [pc, #88]	; (294d4 <location_core_location_get_pos+0x68>)
   2947a:	f240 1231 	movw	r2, #305	; 0x131
   2947e:	f013 fb05 	bl	3ca8c <assert_print>
   29482:	f240 1131 	movw	r1, #305	; 0x131
   29486:	4812      	ldr	r0, [pc, #72]	; (294d0 <location_core_location_get_pos+0x64>)
   29488:	f013 faf9 	bl	3ca7e <assert_post_action>
	if (config == &current_config) {
   2948c:	4d12      	ldr	r5, [pc, #72]	; (294d8 <location_core_location_get_pos+0x6c>)
   2948e:	42ac      	cmp	r4, r5
   29490:	d00d      	beq.n	294ae <location_core_location_get_pos+0x42>
	location_core_current_config_clear();
   29492:	f7ff ffd7 	bl	29444 <location_core_current_config_clear>
	memcpy(&current_config, config, sizeof(struct location_config));
   29496:	4622      	mov	r2, r4
   29498:	462b      	mov	r3, r5
   2949a:	f104 011c 	add.w	r1, r4, #28
   2949e:	f852 0b04 	ldr.w	r0, [r2], #4
   294a2:	428a      	cmp	r2, r1
   294a4:	f843 0b04 	str.w	r0, [r3], #4
   294a8:	d1f9      	bne.n	2949e <location_core_location_get_pos+0x32>
   294aa:	8812      	ldrh	r2, [r2, #0]
   294ac:	801a      	strh	r2, [r3, #0]
	int err;
	enum location_method requested_method;

	location_core_current_config_set(config);
	/* Location request starts from the first method */
	current_method_index = 0;
   294ae:	2200      	movs	r2, #0
	requested_method = config->methods[current_method_index].method;
   294b0:	f814 0f02 	ldrb.w	r0, [r4, #2]!
	current_method_index = 0;
   294b4:	4b09      	ldr	r3, [pc, #36]	; (294dc <location_core_location_get_pos+0x70>)
	LOG_DBG("Requesting location with '%s' method",
		(char *)location_method_api_get(requested_method)->method_string);
	location_core_current_event_data_init(requested_method);
   294b6:	9001      	str	r0, [sp, #4]
	current_method_index = 0;
   294b8:	601a      	str	r2, [r3, #0]
	location_core_current_event_data_init(requested_method);
   294ba:	f7ff ffcb 	bl	29454 <location_core_current_event_data_init>
	err = location_method_api_get(requested_method)->location_get(
   294be:	9801      	ldr	r0, [sp, #4]
   294c0:	f7ff ffb2 	bl	29428 <location_method_api_get>
   294c4:	6943      	ldr	r3, [r0, #20]
   294c6:	4620      	mov	r0, r4
		&config->methods[current_method_index]);

	return err;
}
   294c8:	b003      	add	sp, #12
   294ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = location_method_api_get(requested_method)->location_get(
   294ce:	4718      	bx	r3
   294d0:	000473cb 	.word	0x000473cb
   294d4:	0004409e 	.word	0x0004409e
   294d8:	2001a56c 	.word	0x2001a56c
   294dc:	20019434 	.word	0x20019434

000294e0 <location_core_periodic_work_fn>:
}

static void location_core_periodic_work_fn(struct k_work *work)
{
	ARG_UNUSED(work);
	location_core_location_get_pos(&current_config);
   294e0:	4801      	ldr	r0, [pc, #4]	; (294e8 <location_core_periodic_work_fn+0x8>)
   294e2:	f7ff bfc3 	b.w	2946c <location_core_location_get_pos>
   294e6:	bf00      	nop
   294e8:	2001a56c 	.word	0x2001a56c

000294ec <location_core_event_handler_set>:
{
   294ec:	b508      	push	{r3, lr}
	if (handler == NULL) {
   294ee:	b930      	cbnz	r0, 294fe <location_core_event_handler_set+0x12>
		LOG_ERR("No event handler given");
   294f0:	4805      	ldr	r0, [pc, #20]	; (29508 <location_core_event_handler_set+0x1c>)
   294f2:	2145      	movs	r1, #69	; 0x45
   294f4:	f013 fb04 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   294f8:	f06f 0015 	mvn.w	r0, #21
}
   294fc:	bd08      	pop	{r3, pc}
	event_handler = handler;
   294fe:	4b03      	ldr	r3, [pc, #12]	; (2950c <location_core_event_handler_set+0x20>)
   29500:	6018      	str	r0, [r3, #0]
	return 0;
   29502:	2000      	movs	r0, #0
   29504:	e7fa      	b.n	294fc <location_core_event_handler_set+0x10>
   29506:	bf00      	nop
   29508:	000473f8 	.word	0x000473f8
   2950c:	20019438 	.word	0x20019438

00029510 <location_core_init>:
{
   29510:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_work_queue_config cfg = {
   29512:	2300      	movs	r3, #0
   29514:	9303      	str	r3, [sp, #12]
   29516:	4b0f      	ldr	r3, [pc, #60]	; (29554 <location_core_init+0x44>)
	k_work_queue_start(
   29518:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	struct k_work_queue_config cfg = {
   2951c:	9302      	str	r3, [sp, #8]
	k_work_queue_start(
   2951e:	ab02      	add	r3, sp, #8
   29520:	9300      	str	r3, [sp, #0]
   29522:	490d      	ldr	r1, [pc, #52]	; (29558 <location_core_init+0x48>)
   29524:	2305      	movs	r3, #5
   29526:	480d      	ldr	r0, [pc, #52]	; (2955c <location_core_init+0x4c>)
   29528:	f00d ff9a 	bl	37460 <k_work_queue_start>
	for (int i = 0; methods_supported[i] != NULL; i++) {
   2952c:	4e0c      	ldr	r6, [pc, #48]	; (29560 <location_core_init+0x50>)
   2952e:	f856 5b04 	ldr.w	r5, [r6], #4
   29532:	b90d      	cbnz	r5, 29538 <location_core_init+0x28>
	return 0;
   29534:	462c      	mov	r4, r5
   29536:	e009      	b.n	2954c <location_core_init+0x3c>
		err = methods_supported[i]->init();
   29538:	68eb      	ldr	r3, [r5, #12]
   2953a:	4798      	blx	r3
		if (err) {
   2953c:	4604      	mov	r4, r0
   2953e:	2800      	cmp	r0, #0
   29540:	d0f5      	beq.n	2952e <location_core_init+0x1e>
			LOG_ERR("Failed to initialize '%s' method",
   29542:	2145      	movs	r1, #69	; 0x45
   29544:	4807      	ldr	r0, [pc, #28]	; (29564 <location_core_init+0x54>)
   29546:	1c6a      	adds	r2, r5, #1
   29548:	f013 fada 	bl	3cb00 <z_log_minimal_printk>
}
   2954c:	4620      	mov	r0, r4
   2954e:	b004      	add	sp, #16
   29550:	bd70      	pop	{r4, r5, r6, pc}
   29552:	bf00      	nop
   29554:	00047414 	.word	0x00047414
   29558:	2001fa00 	.word	0x2001fa00
   2955c:	20015628 	.word	0x20015628
   29560:	00042eec 	.word	0x00042eec
   29564:	00047427 	.word	0x00047427

00029568 <location_core_validate_params>:
{
   29568:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(config != NULL);
   2956a:	4604      	mov	r4, r0
   2956c:	b940      	cbnz	r0, 29580 <location_core_validate_params+0x18>
   2956e:	4918      	ldr	r1, [pc, #96]	; (295d0 <location_core_validate_params+0x68>)
   29570:	4818      	ldr	r0, [pc, #96]	; (295d4 <location_core_validate_params+0x6c>)
   29572:	22ea      	movs	r2, #234	; 0xea
   29574:	f013 fa8a 	bl	3ca8c <assert_print>
   29578:	21ea      	movs	r1, #234	; 0xea
   2957a:	4815      	ldr	r0, [pc, #84]	; (295d0 <location_core_validate_params+0x68>)
   2957c:	f013 fa7f 	bl	3ca7e <assert_post_action>
	if (config->methods_count > CONFIG_LOCATION_METHODS_LIST_SIZE) {
   29580:	7823      	ldrb	r3, [r4, #0]
   29582:	2b03      	cmp	r3, #3
   29584:	d907      	bls.n	29596 <location_core_validate_params+0x2e>
		LOG_ERR("Maximum number of methods (%d) exceeded: %d",
   29586:	2203      	movs	r2, #3
   29588:	2145      	movs	r1, #69	; 0x45
   2958a:	4813      	ldr	r0, [pc, #76]	; (295d8 <location_core_validate_params+0x70>)
   2958c:	f013 fab8 	bl	3cb00 <z_log_minimal_printk>
			return -EINVAL;
   29590:	f06f 0015 	mvn.w	r0, #21
}
   29594:	bd10      	pop	{r4, pc}
	if ((config->interval > 0) && (config->interval < 10)) {
   29596:	8b62      	ldrh	r2, [r4, #26]
   29598:	3a01      	subs	r2, #1
   2959a:	b292      	uxth	r2, r2
   2959c:	2a08      	cmp	r2, #8
   2959e:	d814      	bhi.n	295ca <location_core_validate_params+0x62>
		LOG_ERR("Interval for periodic location updates must be longer than 10 seconds");
   295a0:	2145      	movs	r1, #69	; 0x45
   295a2:	480e      	ldr	r0, [pc, #56]	; (295dc <location_core_validate_params+0x74>)
   295a4:	f013 faac 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   295a8:	e7f2      	b.n	29590 <location_core_validate_params+0x28>
		method_api = location_method_api_get(config->methods[i].method);
   295aa:	f814 2031 	ldrb.w	r2, [r4, r1, lsl #3]
   295ae:	4610      	mov	r0, r2
   295b0:	f7ff ff3a 	bl	29428 <location_method_api_get>
		if (method_api == NULL) {
   295b4:	b920      	cbnz	r0, 295c0 <location_core_validate_params+0x58>
			LOG_ERR("Location method (%d) not supported", config->methods[i].method);
   295b6:	2145      	movs	r1, #69	; 0x45
   295b8:	4809      	ldr	r0, [pc, #36]	; (295e0 <location_core_validate_params+0x78>)
   295ba:	f013 faa1 	bl	3cb00 <z_log_minimal_printk>
   295be:	e7e7      	b.n	29590 <location_core_validate_params+0x28>
	for (int i = 0; i < config->methods_count; i++) {
   295c0:	3101      	adds	r1, #1
   295c2:	4299      	cmp	r1, r3
   295c4:	dbf1      	blt.n	295aa <location_core_validate_params+0x42>
	return 0;
   295c6:	2000      	movs	r0, #0
   295c8:	e7e4      	b.n	29594 <location_core_validate_params+0x2c>
	for (int i = 0; i < config->methods_count; i++) {
   295ca:	2100      	movs	r1, #0
		method_api = location_method_api_get(config->methods[i].method);
   295cc:	3402      	adds	r4, #2
   295ce:	e7f8      	b.n	295c2 <location_core_validate_params+0x5a>
   295d0:	000473cb 	.word	0x000473cb
   295d4:	0004409e 	.word	0x0004409e
   295d8:	0004744d 	.word	0x0004744d
   295dc:	0004747e 	.word	0x0004747e
   295e0:	000474c9 	.word	0x000474c9

000295e4 <location_core_location_get>:
{
   295e4:	b510      	push	{r4, lr}
   295e6:	4604      	mov	r4, r0
   295e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   295ec:	2300      	movs	r3, #0
   295ee:	4808      	ldr	r0, [pc, #32]	; (29610 <location_core_location_get+0x2c>)
   295f0:	f00d fbfe 	bl	36df0 <z_impl_k_sem_take>
	if (err) {
   295f4:	b920      	cbnz	r0, 29600 <location_core_location_get+0x1c>
	return location_core_location_get_pos(config);
   295f6:	4620      	mov	r0, r4
}
   295f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return location_core_location_get_pos(config);
   295fc:	f7ff bf36 	b.w	2946c <location_core_location_get_pos>
		LOG_ERR("Location request already ongoing");
   29600:	2145      	movs	r1, #69	; 0x45
   29602:	4804      	ldr	r0, [pc, #16]	; (29614 <location_core_location_get+0x30>)
   29604:	f013 fa7c 	bl	3cb00 <z_log_minimal_printk>
}
   29608:	f06f 000f 	mvn.w	r0, #15
   2960c:	bd10      	pop	{r4, pc}
   2960e:	bf00      	nop
   29610:	20015078 	.word	0x20015078
   29614:	000474f1 	.word	0x000474f1

00029618 <location_core_event_cb>:
{
   29618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2961c:	4604      	mov	r4, r0
   2961e:	b08c      	sub	sp, #48	; 0x30
	k_work_cancel_delayable(&location_timeout_work);
   29620:	485c      	ldr	r0, [pc, #368]	; (29794 <location_core_event_cb+0x17c>)
   29622:	f00e f883 	bl	3772c <k_work_cancel_delayable>
	if (location != NULL) {
   29626:	4f5c      	ldr	r7, [pc, #368]	; (29798 <location_core_event_cb+0x180>)
   29628:	4e5c      	ldr	r6, [pc, #368]	; (2979c <location_core_event_cb+0x184>)
   2962a:	2c00      	cmp	r4, #0
   2962c:	d07a      	beq.n	29724 <location_core_event_cb+0x10c>
		current_event_data.id = LOCATION_EVT_LOCATION;
   2962e:	463d      	mov	r5, r7
   29630:	2301      	movs	r3, #1
   29632:	f805 3b08 	strb.w	r3, [r5], #8
		current_event_data.location = *location;
   29636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   29638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2963a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2963c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
		sprintf(latitude_str, "%.06f", current_event_data.location.latitude);
   2963e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
		current_event_data.location = *location;
   29642:	e894 0003 	ldmia.w	r4, {r0, r1}
   29646:	e885 0003 	stmia.w	r5, {r0, r1}
		sprintf(latitude_str, "%.06f", current_event_data.location.latitude);
   2964a:	e9cd 2300 	strd	r2, r3, [sp]
   2964e:	220c      	movs	r2, #12
   29650:	2100      	movs	r1, #0
   29652:	4b53      	ldr	r3, [pc, #332]	; (297a0 <location_core_event_cb+0x188>)
   29654:	eb0d 0002 	add.w	r0, sp, r2
   29658:	f018 f83c 	bl	416d4 <__sprintf_chk>
		sprintf(longitude_str, "%.06f", current_event_data.location.longitude);
   2965c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   29660:	2100      	movs	r1, #0
   29662:	e9cd 2300 	strd	r2, r3, [sp]
   29666:	a806      	add	r0, sp, #24
   29668:	220c      	movs	r2, #12
   2966a:	4b4d      	ldr	r3, [pc, #308]	; (297a0 <location_core_event_cb+0x188>)
   2966c:	f018 f832 	bl	416d4 <__sprintf_chk>
		sprintf(accuracy_str, "%.01f", current_event_data.location.accuracy);
   29670:	6a38      	ldr	r0, [r7, #32]
   29672:	f7f3 f849 	bl	1c708 <__aeabi_f2d>
   29676:	4b4b      	ldr	r3, [pc, #300]	; (297a4 <location_core_event_cb+0x18c>)
   29678:	e9cd 0100 	strd	r0, r1, [sp]
   2967c:	220c      	movs	r2, #12
   2967e:	2100      	movs	r1, #0
   29680:	a809      	add	r0, sp, #36	; 0x24
   29682:	f018 f827 	bl	416d4 <__sprintf_chk>
		if (current_config.mode == LOCATION_REQ_MODE_ALL) {
   29686:	7f33      	ldrb	r3, [r6, #28]
   29688:	2b01      	cmp	r3, #1
   2968a:	d12e      	bne.n	296ea <location_core_event_cb+0xd2>
			current_method_index++;
   2968c:	4c46      	ldr	r4, [pc, #280]	; (297a8 <location_core_event_cb+0x190>)
			if (current_method_index < current_config.methods_count) {
   2968e:	7832      	ldrb	r2, [r6, #0]
			current_method_index++;
   29690:	6823      	ldr	r3, [r4, #0]
			previous_method = current_event_data.location.method;
   29692:	7a38      	ldrb	r0, [r7, #8]
			current_method_index++;
   29694:	3301      	adds	r3, #1
			if (current_method_index < current_config.methods_count) {
   29696:	4293      	cmp	r3, r2
			current_method_index++;
   29698:	6023      	str	r3, [r4, #0]
			if (current_method_index < current_config.methods_count) {
   2969a:	da20      	bge.n	296de <location_core_event_cb+0xc6>
				LOG_INF("LOCATION_REQ_MODE_ALL: acquired location using '%s', "
   2969c:	f7ff fec4 	bl	29428 <location_method_api_get>
				requested_method =
   296a0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   296a4:	f893 8002 	ldrb.w	r8, [r3, #2]
				LOG_INF("LOCATION_REQ_MODE_ALL: acquired location using '%s', "
   296a8:	4602      	mov	r2, r0
   296aa:	4640      	mov	r0, r8
   296ac:	f7ff febc 	bl	29428 <location_method_api_get>
   296b0:	4605      	mov	r5, r0
   296b2:	2149      	movs	r1, #73	; 0x49
   296b4:	1c43      	adds	r3, r0, #1
   296b6:	3201      	adds	r2, #1
   296b8:	483c      	ldr	r0, [pc, #240]	; (297ac <location_core_event_cb+0x194>)
   296ba:	f013 fa21 	bl	3cb00 <z_log_minimal_printk>
				event_handler(&current_event_data);
   296be:	4b3c      	ldr	r3, [pc, #240]	; (297b0 <location_core_event_cb+0x198>)
   296c0:	4638      	mov	r0, r7
   296c2:	681b      	ldr	r3, [r3, #0]
   296c4:	4798      	blx	r3
				location_core_current_event_data_init(requested_method);
   296c6:	4640      	mov	r0, r8
   296c8:	f7ff fec4 	bl	29454 <location_core_current_event_data_init>
					&current_config.methods[current_method_index]);
   296cc:	6820      	ldr	r0, [r4, #0]
				err = location_method_api_get(requested_method)->location_get(
   296ce:	696b      	ldr	r3, [r5, #20]
					&current_config.methods[current_method_index]);
   296d0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
				err = location_method_api_get(requested_method)->location_get(
   296d4:	3002      	adds	r0, #2
   296d6:	4798      	blx	r3
}
   296d8:	b00c      	add	sp, #48	; 0x30
   296da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_INF("LOCATION_REQ_MODE_ALL: all methods done");
   296de:	2149      	movs	r1, #73	; 0x49
   296e0:	4834      	ldr	r0, [pc, #208]	; (297b4 <location_core_event_cb+0x19c>)
   296e2:	f013 fa0d 	bl	3cb00 <z_log_minimal_printk>
			current_method_index = 0;
   296e6:	2300      	movs	r3, #0
   296e8:	6023      	str	r3, [r4, #0]
	event_handler(&current_event_data);
   296ea:	4b31      	ldr	r3, [pc, #196]	; (297b0 <location_core_event_cb+0x198>)
   296ec:	482a      	ldr	r0, [pc, #168]	; (29798 <location_core_event_cb+0x180>)
   296ee:	681b      	ldr	r3, [r3, #0]
   296f0:	4798      	blx	r3
	if (current_config.interval > 0) {
   296f2:	8b74      	ldrh	r4, [r6, #26]
   296f4:	2c00      	cmp	r4, #0
   296f6:	d046      	beq.n	29786 <location_core_event_cb+0x16e>
			K_SECONDS(current_config.interval));
   296f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   296fc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   29700:	f240 30e7 	movw	r0, #999	; 0x3e7
   29704:	2100      	movs	r1, #0
   29706:	435c      	muls	r4, r3
   29708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2970c:	2300      	movs	r3, #0
   2970e:	fbe4 0105 	umlal	r0, r1, r4, r5
   29712:	f7f3 fbe9 	bl	1cee8 <__aeabi_uldivmod>
   29716:	4602      	mov	r2, r0
   29718:	460b      	mov	r3, r1
		k_work_schedule_for_queue(
   2971a:	4827      	ldr	r0, [pc, #156]	; (297b8 <location_core_event_cb+0x1a0>)
   2971c:	4927      	ldr	r1, [pc, #156]	; (297bc <location_core_event_cb+0x1a4>)
   2971e:	f00d ff33 	bl	37588 <k_work_schedule_for_queue>
   29722:	e7d9      	b.n	296d8 <location_core_event_cb+0xc0>
		current_method_index++;
   29724:	4d20      	ldr	r5, [pc, #128]	; (297a8 <location_core_event_cb+0x190>)
		if (current_method_index < current_config.methods_count) {
   29726:	7832      	ldrb	r2, [r6, #0]
		current_method_index++;
   29728:	682b      	ldr	r3, [r5, #0]
		previous_method = current_event_data.location.method;
   2972a:	7a38      	ldrb	r0, [r7, #8]
		current_method_index++;
   2972c:	3301      	adds	r3, #1
		if (current_method_index < current_config.methods_count) {
   2972e:	4293      	cmp	r3, r2
		current_method_index++;
   29730:	602b      	str	r3, [r5, #0]
		if (current_method_index < current_config.methods_count) {
   29732:	da23      	bge.n	2977c <location_core_event_cb+0x164>
			LOG_WRN("Failed to acquire location using '%s', "
   29734:	f7ff fe78 	bl	29428 <location_method_api_get>
			requested_method = current_config.methods[current_method_index].method;
   29738:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   2973c:	f893 8002 	ldrb.w	r8, [r3, #2]
			LOG_WRN("Failed to acquire location using '%s', "
   29740:	4602      	mov	r2, r0
   29742:	4640      	mov	r0, r8
   29744:	f7ff fe70 	bl	29428 <location_method_api_get>
   29748:	2157      	movs	r1, #87	; 0x57
   2974a:	1c43      	adds	r3, r0, #1
   2974c:	4604      	mov	r4, r0
   2974e:	3201      	adds	r2, #1
   29750:	481b      	ldr	r0, [pc, #108]	; (297c0 <location_core_event_cb+0x1a8>)
   29752:	f013 f9d5 	bl	3cb00 <z_log_minimal_printk>
			if (current_config.mode == LOCATION_REQ_MODE_ALL) {
   29756:	7f33      	ldrb	r3, [r6, #28]
   29758:	2b01      	cmp	r3, #1
   2975a:	d103      	bne.n	29764 <location_core_event_cb+0x14c>
				event_handler(&current_event_data);
   2975c:	4b14      	ldr	r3, [pc, #80]	; (297b0 <location_core_event_cb+0x198>)
   2975e:	4638      	mov	r0, r7
   29760:	681b      	ldr	r3, [r3, #0]
   29762:	4798      	blx	r3
			location_core_current_event_data_init(requested_method);
   29764:	4640      	mov	r0, r8
   29766:	f7ff fe75 	bl	29454 <location_core_current_event_data_init>
				&current_config.methods[current_method_index]);
   2976a:	6828      	ldr	r0, [r5, #0]
			err = location_method_api_get(requested_method)->location_get(
   2976c:	6963      	ldr	r3, [r4, #20]
				&current_config.methods[current_method_index]);
   2976e:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
			err = location_method_api_get(requested_method)->location_get(
   29772:	3002      	adds	r0, #2
}
   29774:	b00c      	add	sp, #48	; 0x30
   29776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			err = location_method_api_get(requested_method)->location_get(
   2977a:	4718      	bx	r3
		LOG_ERR("Location acquisition failed and fallbacks are also done");
   2977c:	2145      	movs	r1, #69	; 0x45
   2977e:	4811      	ldr	r0, [pc, #68]	; (297c4 <location_core_event_cb+0x1ac>)
   29780:	f013 f9be 	bl	3cb00 <z_log_minimal_printk>
   29784:	e7b1      	b.n	296ea <location_core_event_cb+0xd2>
		location_core_current_config_clear();
   29786:	f7ff fe5d 	bl	29444 <location_core_current_config_clear>
	z_impl_k_sem_give(sem);
   2978a:	480f      	ldr	r0, [pc, #60]	; (297c8 <location_core_event_cb+0x1b0>)
   2978c:	f00d faf4 	bl	36d78 <z_impl_k_sem_give>
}
   29790:	e7a2      	b.n	296d8 <location_core_event_cb+0xc0>
   29792:	bf00      	nop
   29794:	20014560 	.word	0x20014560
   29798:	200155f8 	.word	0x200155f8
   2979c:	2001a56c 	.word	0x2001a56c
   297a0:	00047517 	.word	0x00047517
   297a4:	0004751d 	.word	0x0004751d
   297a8:	20019434 	.word	0x20019434
   297ac:	00047523 	.word	0x00047523
   297b0:	20019438 	.word	0x20019438
   297b4:	00047573 	.word	0x00047573
   297b8:	20015628 	.word	0x20015628
   297bc:	20014530 	.word	0x20014530
   297c0:	000475a0 	.word	0x000475a0
   297c4:	000475e2 	.word	0x000475e2
   297c8:	20015078 	.word	0x20015078

000297cc <location_core_event_cb_error>:
	current_event_data.id = LOCATION_EVT_ERROR;
   297cc:	2203      	movs	r2, #3
   297ce:	4b02      	ldr	r3, [pc, #8]	; (297d8 <location_core_event_cb_error+0xc>)
	location_core_event_cb(NULL);
   297d0:	2000      	movs	r0, #0
	current_event_data.id = LOCATION_EVT_ERROR;
   297d2:	701a      	strb	r2, [r3, #0]
	location_core_event_cb(NULL);
   297d4:	f7ff bf20 	b.w	29618 <location_core_event_cb>
   297d8:	200155f8 	.word	0x200155f8

000297dc <location_core_event_cb_timeout>:
	current_event_data.id = LOCATION_EVT_TIMEOUT;
   297dc:	2202      	movs	r2, #2
   297de:	4b02      	ldr	r3, [pc, #8]	; (297e8 <location_core_event_cb_timeout+0xc>)
	location_core_event_cb(NULL);
   297e0:	2000      	movs	r0, #0
	current_event_data.id = LOCATION_EVT_TIMEOUT;
   297e2:	701a      	strb	r2, [r3, #0]
	location_core_event_cb(NULL);
   297e4:	f7ff bf18 	b.w	29618 <location_core_event_cb>
   297e8:	200155f8 	.word	0x200155f8

000297ec <location_core_timeout_work_fn>:
}

static void location_core_timeout_work_fn(struct k_work *work)
{
   297ec:	b510      	push	{r4, lr}
	enum location_method current_method =
		current_config.methods[current_method_index].method;
   297ee:	4b09      	ldr	r3, [pc, #36]	; (29814 <location_core_timeout_work_fn+0x28>)

	ARG_UNUSED(work);

	LOG_WRN("Timeout occurred");
   297f0:	2157      	movs	r1, #87	; 0x57
	enum location_method current_method =
   297f2:	681a      	ldr	r2, [r3, #0]
   297f4:	4b08      	ldr	r3, [pc, #32]	; (29818 <location_core_timeout_work_fn+0x2c>)
	LOG_WRN("Timeout occurred");
   297f6:	4809      	ldr	r0, [pc, #36]	; (2981c <location_core_timeout_work_fn+0x30>)
	enum location_method current_method =
   297f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   297fc:	789c      	ldrb	r4, [r3, #2]
	LOG_WRN("Timeout occurred");
   297fe:	f013 f97f 	bl	3cb00 <z_log_minimal_printk>

	location_method_api_get(current_method)->cancel();
   29802:	4620      	mov	r0, r4
   29804:	f7ff fe10 	bl	29428 <location_method_api_get>
   29808:	6983      	ldr	r3, [r0, #24]
   2980a:	4798      	blx	r3
	location_core_event_cb_timeout();
}
   2980c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	location_core_event_cb_timeout();
   29810:	f7ff bfe4 	b.w	297dc <location_core_event_cb_timeout>
   29814:	20019434 	.word	0x20019434
   29818:	2001a56c 	.word	0x2001a56c
   2981c:	0004761f 	.word	0x0004761f

00029820 <location_core_work_queue_get>:
}
   29820:	4800      	ldr	r0, [pc, #0]	; (29824 <location_core_work_queue_get+0x4>)
   29822:	4770      	bx	lr
   29824:	20015628 	.word	0x20015628

00029828 <location_core_timer_start>:

void location_core_timer_start(uint16_t timeout)
{
   29828:	b570      	push	{r4, r5, r6, lr}
	if (timeout > 0) {
   2982a:	b1a8      	cbz	r0, 29858 <location_core_timer_start+0x30>
		 * their operation, blocking waiting of semaphores will block the timeout from
		 * expiring and canceling methods.
		 */
		k_work_schedule(
			&location_timeout_work,
			K_SECONDS(timeout));
   2982c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   29830:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   29834:	4344      	muls	r4, r0
   29836:	2100      	movs	r1, #0
   29838:	f240 30e7 	movw	r0, #999	; 0x3e7
   2983c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29840:	2300      	movs	r3, #0
   29842:	fbe4 0105 	umlal	r0, r1, r4, r5
   29846:	f7f3 fb4f 	bl	1cee8 <__aeabi_uldivmod>
	}
}
   2984a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2984e:	4602      	mov	r2, r0
   29850:	460b      	mov	r3, r1
		k_work_schedule(
   29852:	4802      	ldr	r0, [pc, #8]	; (2985c <location_core_timer_start+0x34>)
   29854:	f00d befc 	b.w	37650 <k_work_schedule>
}
   29858:	bd70      	pop	{r4, r5, r6, pc}
   2985a:	bf00      	nop
   2985c:	20014560 	.word	0x20014560

00029860 <location_utils_modem_params_read>:
	}
	return is_active;
}

int location_utils_modem_params_read(struct location_utils_modem_params_info *modem_params)
{
   29860:	b530      	push	{r4, r5, lr}
	/* Parsed strings include double quotes */
	char plmn_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29862:	2400      	movs	r4, #0
{
   29864:	4605      	mov	r5, r0
   29866:	b093      	sub	sp, #76	; 0x4c
	char plmn_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29868:	220d      	movs	r2, #13
   2986a:	4621      	mov	r1, r4
   2986c:	a804      	add	r0, sp, #16
   2986e:	9403      	str	r4, [sp, #12]
   29870:	f017 fde0 	bl	41434 <memset>
	char tac_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29874:	220d      	movs	r2, #13
   29876:	4621      	mov	r1, r4
   29878:	a809      	add	r0, sp, #36	; 0x24
   2987a:	9408      	str	r4, [sp, #32]
   2987c:	f017 fdda 	bl	41434 <memset>
	char cell_id_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29880:	220d      	movs	r2, #13
   29882:	4621      	mov	r1, r4
   29884:	a80e      	add	r0, sp, #56	; 0x38
   29886:	940d      	str	r4, [sp, #52]	; 0x34
   29888:	f017 fdd4 	bl	41434 <memset>
	int err = 0;

	__ASSERT_NO_MSG(modem_params != NULL);
   2988c:	b945      	cbnz	r5, 298a0 <location_utils_modem_params_read+0x40>
   2988e:	491f      	ldr	r1, [pc, #124]	; (2990c <location_utils_modem_params_read+0xac>)
   29890:	481f      	ldr	r0, [pc, #124]	; (29910 <location_utils_modem_params_read+0xb0>)
   29892:	223f      	movs	r2, #63	; 0x3f
   29894:	f013 f8fa 	bl	3ca8c <assert_print>
   29898:	213f      	movs	r1, #63	; 0x3f
   2989a:	481c      	ldr	r0, [pc, #112]	; (2990c <location_utils_modem_params_read+0xac>)
   2989c:	f013 f8ef 	bl	3ca7e <assert_post_action>

	err = nrf_modem_at_scanf(
   298a0:	f105 0310 	add.w	r3, r5, #16
   298a4:	9301      	str	r3, [sp, #4]
   298a6:	ab0d      	add	r3, sp, #52	; 0x34
   298a8:	9300      	str	r3, [sp, #0]
   298aa:	491a      	ldr	r1, [pc, #104]	; (29914 <location_utils_modem_params_read+0xb4>)
   298ac:	481a      	ldr	r0, [pc, #104]	; (29918 <location_utils_modem_params_read+0xb8>)
   298ae:	ab08      	add	r3, sp, #32
   298b0:	aa03      	add	r2, sp, #12
   298b2:	f00b fc4b 	bl	3514c <nrf_modem_at_scanf>
		",%*d"                                /* <band>: ignored */
		",%"L(MODEM_PARAM_STR_MAX_LEN)"[^,]"  /* <cell_id> */
		",%d",                                /* <phys_cell_id> */
		plmn_str, tac_str, cell_id_str, &modem_params->phys_cell_id);

	if (err <= 2) {
   298b6:	2802      	cmp	r0, #2
	err = nrf_modem_at_scanf(
   298b8:	4604      	mov	r4, r0
	if (err <= 2) {
   298ba:	dc07      	bgt.n	298cc <location_utils_modem_params_read+0x6c>
		LOG_ERR("Cannot get modem parameters, err %d", err);
   298bc:	4602      	mov	r2, r0
   298be:	2145      	movs	r1, #69	; 0x45
   298c0:	4816      	ldr	r0, [pc, #88]	; (2991c <location_utils_modem_params_read+0xbc>)
   298c2:	f013 f91d 	bl	3cb00 <z_log_minimal_printk>
			modem_params->mcc, modem_params->mnc, modem_params->tac,
			log_strdup(tac_str), modem_params->cell_id, log_strdup(cell_id_str),
			modem_params->phys_cell_id);
	}
	return err;
}
   298c6:	4620      	mov	r0, r4
   298c8:	b013      	add	sp, #76	; 0x4c
   298ca:	bd30      	pop	{r4, r5, pc}
		modem_params->mnc = strtol(&plmn_str[4], NULL, 10);
   298cc:	220a      	movs	r2, #10
   298ce:	2100      	movs	r1, #0
   298d0:	a804      	add	r0, sp, #16
   298d2:	f010 ffd5 	bl	3a880 <strtol>
		plmn_str[4] = '\0';
   298d6:	2400      	movs	r4, #0
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   298d8:	220a      	movs	r2, #10
   298da:	4621      	mov	r1, r4
		modem_params->mnc = strtol(&plmn_str[4], NULL, 10);
   298dc:	6068      	str	r0, [r5, #4]
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   298de:	f10d 000d 	add.w	r0, sp, #13
		plmn_str[4] = '\0';
   298e2:	f88d 4010 	strb.w	r4, [sp, #16]
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   298e6:	f010 ffcb 	bl	3a880 <strtol>
		modem_params->tac = strtol(tac_str + 1, NULL, 16);
   298ea:	2210      	movs	r2, #16
   298ec:	4621      	mov	r1, r4
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   298ee:	6028      	str	r0, [r5, #0]
		modem_params->tac = strtol(tac_str + 1, NULL, 16);
   298f0:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   298f4:	f010 ffc4 	bl	3a880 <strtol>
		modem_params->cell_id = strtol(cell_id_str + 1, NULL, 16);
   298f8:	2210      	movs	r2, #16
		modem_params->tac = strtol(tac_str + 1, NULL, 16);
   298fa:	60e8      	str	r0, [r5, #12]
		modem_params->cell_id = strtol(cell_id_str + 1, NULL, 16);
   298fc:	4621      	mov	r1, r4
   298fe:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   29902:	f010 ffbd 	bl	3a880 <strtol>
   29906:	60a8      	str	r0, [r5, #8]
	return err;
   29908:	e7dd      	b.n	298c6 <location_utils_modem_params_read+0x66>
   2990a:	bf00      	nop
   2990c:	00047635 	.word	0x00047635
   29910:	0004409e 	.word	0x0004409e
   29914:	00047663 	.word	0x00047663
   29918:	000476a4 	.word	0x000476a4
   2991c:	000476b0 	.word	0x000476b0

00029920 <location_utils_systime_to_location_datetime>:

	return jwt_buf;
}

void location_utils_systime_to_location_datetime(struct location_datetime *datetime)
{
   29920:	b510      	push	{r4, lr}
   29922:	4604      	mov	r4, r0
   29924:	b08e      	sub	sp, #56	; 0x38
	struct timespec tp;
	struct tm ltm = { 0 };
   29926:	2224      	movs	r2, #36	; 0x24
   29928:	2100      	movs	r1, #0
   2992a:	a805      	add	r0, sp, #20
   2992c:	f017 fd82 	bl	41434 <memset>

	__ASSERT_NO_MSG(datetime != NULL);
   29930:	b944      	cbnz	r4, 29944 <location_utils_systime_to_location_datetime+0x24>
   29932:	4914      	ldr	r1, [pc, #80]	; (29984 <location_utils_systime_to_location_datetime+0x64>)
   29934:	4814      	ldr	r0, [pc, #80]	; (29988 <location_utils_systime_to_location_datetime+0x68>)
   29936:	227f      	movs	r2, #127	; 0x7f
   29938:	f013 f8a8 	bl	3ca8c <assert_print>
   2993c:	217f      	movs	r1, #127	; 0x7f
   2993e:	4811      	ldr	r0, [pc, #68]	; (29984 <location_utils_systime_to_location_datetime+0x64>)
   29940:	f013 f89d 	bl	3ca7e <assert_post_action>
   29944:	2001      	movs	r0, #1
   29946:	4669      	mov	r1, sp
   29948:	f7fa f846 	bl	239d8 <z_impl_clock_gettime>

	clock_gettime(CLOCK_REALTIME, &tp);
	gmtime_r(&tp.tv_sec, &ltm);
   2994c:	4668      	mov	r0, sp
   2994e:	a905      	add	r1, sp, #20
   29950:	f010 f888 	bl	39a64 <gmtime_r>

	/* System time should have been set when date_time lib is in use */
	if (IS_ENABLED(CONFIG_DATE_TIME)) {
		datetime->valid = true;
   29954:	2301      	movs	r3, #1
   29956:	7023      	strb	r3, [r4, #0]
	} else {
		datetime->valid = false;
	}

	/* Relative to 1900, as per POSIX */
	datetime->year = 1900 + ltm.tm_year;
   29958:	9b0a      	ldr	r3, [sp, #40]	; 0x28

	datetime->day = ltm.tm_mday;
	datetime->hour = ltm.tm_hour;
	datetime->minute = ltm.tm_min;
	datetime->second = ltm.tm_sec;
	datetime->ms = tp.tv_nsec / 1000000;
   2995a:	4a0c      	ldr	r2, [pc, #48]	; (2998c <location_utils_systime_to_location_datetime+0x6c>)
	datetime->year = 1900 + ltm.tm_year;
   2995c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   29960:	8063      	strh	r3, [r4, #2]
	datetime->month = ltm.tm_mon + 1;
   29962:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29964:	3301      	adds	r3, #1
   29966:	7123      	strb	r3, [r4, #4]
	datetime->day = ltm.tm_mday;
   29968:	9b08      	ldr	r3, [sp, #32]
   2996a:	7163      	strb	r3, [r4, #5]
	datetime->hour = ltm.tm_hour;
   2996c:	9b07      	ldr	r3, [sp, #28]
   2996e:	71a3      	strb	r3, [r4, #6]
	datetime->minute = ltm.tm_min;
   29970:	9b06      	ldr	r3, [sp, #24]
   29972:	71e3      	strb	r3, [r4, #7]
	datetime->second = ltm.tm_sec;
   29974:	9b05      	ldr	r3, [sp, #20]
   29976:	7223      	strb	r3, [r4, #8]
	datetime->ms = tp.tv_nsec / 1000000;
   29978:	9b02      	ldr	r3, [sp, #8]
   2997a:	fb93 f3f2 	sdiv	r3, r3, r2
   2997e:	8163      	strh	r3, [r4, #10]
}
   29980:	b00e      	add	sp, #56	; 0x38
   29982:	bd10      	pop	{r4, pc}
   29984:	00047635 	.word	0x00047635
   29988:	0004409e 	.word	0x0004409e
   2998c:	000f4240 	.word	0x000f4240

00029990 <method_gnss_notify_pgps>:
#endif
	}
}

static void method_gnss_notify_pgps(struct k_work *work)
{
   29990:	b508      	push	{r3, lr}
	ARG_UNUSED(work);
	int err = nrf_cloud_pgps_notify_prediction();
   29992:	f004 f93b 	bl	2dc0c <nrf_cloud_pgps_notify_prediction>

	if (err) {
   29996:	4602      	mov	r2, r0
   29998:	b128      	cbz	r0, 299a6 <method_gnss_notify_pgps+0x16>
		LOG_ERR("Error requesting notification of prediction availability: %d", err);
	}
}
   2999a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Error requesting notification of prediction availability: %d", err);
   2999e:	2145      	movs	r1, #69	; 0x45
   299a0:	4801      	ldr	r0, [pc, #4]	; (299a8 <method_gnss_notify_pgps+0x18>)
   299a2:	f013 b8ad 	b.w	3cb00 <z_log_minimal_printk>
}
   299a6:	bd08      	pop	{r3, pc}
   299a8:	000476d9 	.word	0x000476d9

000299ac <method_gnss_manage_pgps>:
{
   299ac:	b508      	push	{r3, lr}
	err = nrf_cloud_pgps_inject(prediction, &pgps_agps_request);
   299ae:	4b0b      	ldr	r3, [pc, #44]	; (299dc <method_gnss_manage_pgps+0x30>)
   299b0:	490b      	ldr	r1, [pc, #44]	; (299e0 <method_gnss_manage_pgps+0x34>)
   299b2:	6818      	ldr	r0, [r3, #0]
   299b4:	f004 fc52 	bl	2e25c <nrf_cloud_pgps_inject>
	if (err) {
   299b8:	4602      	mov	r2, r0
   299ba:	b118      	cbz	r0, 299c4 <method_gnss_manage_pgps+0x18>
		LOG_ERR("Unable to send prediction to modem: %d", err);
   299bc:	2145      	movs	r1, #69	; 0x45
   299be:	4809      	ldr	r0, [pc, #36]	; (299e4 <method_gnss_manage_pgps+0x38>)
   299c0:	f013 f89e 	bl	3cb00 <z_log_minimal_printk>
	err = nrf_cloud_pgps_preemptive_updates();
   299c4:	f004 fb92 	bl	2e0ec <nrf_cloud_pgps_preemptive_updates>
	if (err) {
   299c8:	4602      	mov	r2, r0
   299ca:	b128      	cbz	r0, 299d8 <method_gnss_manage_pgps+0x2c>
}
   299cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Error requesting updates: %d", err);
   299d0:	2145      	movs	r1, #69	; 0x45
   299d2:	4805      	ldr	r0, [pc, #20]	; (299e8 <method_gnss_manage_pgps+0x3c>)
   299d4:	f013 b894 	b.w	3cb00 <z_log_minimal_printk>
}
   299d8:	bd08      	pop	{r3, pc}
   299da:	bf00      	nop
   299dc:	200194b8 	.word	0x200194b8
   299e0:	200194ac 	.word	0x200194ac
   299e4:	0004771b 	.word	0x0004771b
   299e8:	00047747 	.word	0x00047747

000299ec <method_gnss_agps_request_work_fn>:
}

#if defined(CONFIG_NRF_CLOUD_AGPS) && !defined(CONFIG_LOCATION_METHOD_GNSS_AGPS_EXTERNAL)
#if defined(CONFIG_NRF_CLOUD_MQTT)
static void method_gnss_agps_request_work_fn(struct k_work *item)
{
   299ec:	b508      	push	{r3, lr}
	int err = nrf_cloud_agps_request(&agps_request);
   299ee:	4806      	ldr	r0, [pc, #24]	; (29a08 <method_gnss_agps_request_work_fn+0x1c>)
   299f0:	f002 ffea 	bl	2c9c8 <nrf_cloud_agps_request>

	if (err) {
   299f4:	4602      	mov	r2, r0
   299f6:	b128      	cbz	r0, 29a04 <method_gnss_agps_request_work_fn+0x18>
		LOG_ERR("nRF Cloud A-GPS request failed, error: %d", err);
		return;
	}

	LOG_DBG("A-GPS data requested");
}
   299f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("nRF Cloud A-GPS request failed, error: %d", err);
   299fc:	2145      	movs	r1, #69	; 0x45
   299fe:	4803      	ldr	r0, [pc, #12]	; (29a0c <method_gnss_agps_request_work_fn+0x20>)
   29a00:	f013 b87e 	b.w	3cb00 <z_log_minimal_printk>
}
   29a04:	bd08      	pop	{r3, pc}
   29a06:	bf00      	nop
   29a08:	2001943c 	.word	0x2001943c
   29a0c:	00047769 	.word	0x00047769

00029a10 <method_gnss_pgps_handler>:
{
   29a10:	b508      	push	{r3, lr}
	if ((event->type == PGPS_EVT_AVAILABLE) ||
   29a12:	7803      	ldrb	r3, [r0, #0]
   29a14:	2b03      	cmp	r3, #3
   29a16:	d003      	beq.n	29a20 <method_gnss_pgps_handler+0x10>
   29a18:	2b04      	cmp	r3, #4
   29a1a:	d10b      	bne.n	29a34 <method_gnss_pgps_handler+0x24>
	    ((event->type == PGPS_EVT_READY) && (event->prediction != NULL))) {
   29a1c:	6843      	ldr	r3, [r0, #4]
   29a1e:	b17b      	cbz	r3, 29a40 <method_gnss_pgps_handler+0x30>
		prediction = event->prediction;
   29a20:	6842      	ldr	r2, [r0, #4]
   29a22:	4b08      	ldr	r3, [pc, #32]	; (29a44 <method_gnss_pgps_handler+0x34>)
   29a24:	601a      	str	r2, [r3, #0]
		k_work_submit_to_queue(location_core_work_queue_get(),
   29a26:	f7ff fefb 	bl	29820 <location_core_work_queue_get>
   29a2a:	4907      	ldr	r1, [pc, #28]	; (29a48 <method_gnss_pgps_handler+0x38>)
}
   29a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit_to_queue(location_core_work_queue_get(),
   29a30:	f00d bc68 	b.w	37304 <k_work_submit_to_queue>
	} else if (event->type == PGPS_EVT_REQUEST) {
   29a34:	2b05      	cmp	r3, #5
   29a36:	d103      	bne.n	29a40 <method_gnss_pgps_handler+0x30>
		k_work_submit_to_queue(location_core_work_queue_get(),
   29a38:	f7ff fef2 	bl	29820 <location_core_work_queue_get>
   29a3c:	4903      	ldr	r1, [pc, #12]	; (29a4c <method_gnss_pgps_handler+0x3c>)
   29a3e:	e7f5      	b.n	29a2c <method_gnss_pgps_handler+0x1c>
}
   29a40:	bd08      	pop	{r3, pc}
   29a42:	bf00      	nop
   29a44:	200194b8 	.word	0x200194b8
   29a48:	2001945c 	.word	0x2001945c
   29a4c:	2001947c 	.word	0x2001947c

00029a50 <method_gnss_positioning_work_fn>:
	location_core_event_cb_pgps_request(&pgps_request);
}
#endif

static void method_gnss_positioning_work_fn(struct k_work *work)
{
   29a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
	lte_lc_system_mode_get(&mode, NULL);
   29a52:	2100      	movs	r1, #0
   29a54:	f10d 0007 	add.w	r0, sp, #7
   29a58:	f7fd fcc8 	bl	273ec <lte_lc_system_mode_get>
	if (mode == LTE_LC_SYSTEM_MODE_GPS) {
   29a5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29a60:	2b03      	cmp	r3, #3
   29a62:	d00f      	beq.n	29a84 <method_gnss_positioning_work_fn+0x34>
	return z_impl_k_sem_take(sem, timeout);
   29a64:	f44f 0216 	mov.w	r2, #9830400	; 0x960000
   29a68:	2300      	movs	r3, #0
   29a6a:	4821      	ldr	r0, [pc, #132]	; (29af0 <method_gnss_positioning_work_fn+0xa0>)
   29a6c:	f00d f9c0 	bl	36df0 <z_impl_k_sem_take>
	if (k_sem_take(&entered_rrc_idle, K_MINUTES(SLEEP_WAIT_BACKSTOP)) == -EAGAIN) {
   29a70:	300b      	adds	r0, #11
   29a72:	d124      	bne.n	29abe <method_gnss_positioning_work_fn+0x6e>
		if (!running) { /* Location request was cancelled */
   29a74:	4b1f      	ldr	r3, [pc, #124]	; (29af4 <method_gnss_positioning_work_fn+0xa4>)
   29a76:	781b      	ldrb	r3, [r3, #0]
   29a78:	b1fb      	cbz	r3, 29aba <method_gnss_positioning_work_fn+0x6a>
		LOG_WRN("RRC connection was not released in %d minutes. Starting GNSS anyway.",
   29a7a:	2205      	movs	r2, #5
   29a7c:	2157      	movs	r1, #87	; 0x57
   29a7e:	481e      	ldr	r0, [pc, #120]	; (29af8 <method_gnss_positioning_work_fn+0xa8>)
   29a80:	f013 f83e 	bl	3cb00 <z_log_minimal_printk>
		/* Location request was cancelled while waiting for RRC idle or PSM. Do nothing. */
		return;
	}

	/* Configure GNSS to continuous tracking mode */
	err = nrf_modem_gnss_fix_interval_set(1);
   29a84:	2001      	movs	r0, #1
   29a86:	f00c f8ab 	bl	35be0 <nrf_modem_gnss_fix_interval_set>
   29a8a:	4604      	mov	r4, r0

#if defined(CONFIG_NRF_CLOUD_AGPS_ELEVATION_MASK)
	err |= nrf_modem_gnss_elevation_threshold_set(CONFIG_NRF_CLOUD_AGPS_ELEVATION_MASK);
#endif
	/* By default we take the first fix. */
	fixes_remaining = 1;
   29a8c:	2001      	movs	r0, #1

	uint8_t use_case = NRF_MODEM_GNSS_USE_CASE_MULTIPLE_HOT_START;

	switch (gnss_config.accuracy) {
   29a8e:	4d1b      	ldr	r5, [pc, #108]	; (29afc <method_gnss_positioning_work_fn+0xac>)
	fixes_remaining = 1;
   29a90:	4b1b      	ldr	r3, [pc, #108]	; (29b00 <method_gnss_positioning_work_fn+0xb0>)
	switch (gnss_config.accuracy) {
   29a92:	78aa      	ldrb	r2, [r5, #2]
	fixes_remaining = 1;
   29a94:	6018      	str	r0, [r3, #0]
	switch (gnss_config.accuracy) {
   29a96:	b1b2      	cbz	r2, 29ac6 <method_gnss_positioning_work_fn+0x76>
   29a98:	2a02      	cmp	r2, #2
   29a9a:	d101      	bne.n	29aa0 <method_gnss_positioning_work_fn+0x50>
	case LOCATION_ACCURACY_NORMAL:
		break;

	case LOCATION_ACCURACY_HIGH:
		/* In high accuracy mode, use the configured fix count. */
		fixes_remaining = gnss_config.num_consecutive_fixes;
   29a9c:	78ea      	ldrb	r2, [r5, #3]
   29a9e:	601a      	str	r2, [r3, #0]
		break;
	}

	err |= nrf_modem_gnss_use_case_set(use_case);
   29aa0:	f00c f880 	bl	35ba4 <nrf_modem_gnss_use_case_set>

	if (err) {
   29aa4:	4304      	orrs	r4, r0
   29aa6:	d010      	beq.n	29aca <method_gnss_positioning_work_fn+0x7a>
		LOG_ERR("Failed to configure GNSS");
   29aa8:	2145      	movs	r1, #69	; 0x45
   29aaa:	4816      	ldr	r0, [pc, #88]	; (29b04 <method_gnss_positioning_work_fn+0xb4>)
   29aac:	f013 f828 	bl	3cb00 <z_log_minimal_printk>
		location_core_event_cb_error();
   29ab0:	f7ff fe8c 	bl	297cc <location_core_event_cb_error>
		running = false;
   29ab4:	2200      	movs	r2, #0
   29ab6:	4b0f      	ldr	r3, [pc, #60]	; (29af4 <method_gnss_positioning_work_fn+0xa4>)
   29ab8:	701a      	strb	r2, [r3, #0]
		running = false;
		return;
	}

	location_core_timer_start(gnss_config.timeout);
}
   29aba:	b003      	add	sp, #12
   29abc:	bd30      	pop	{r4, r5, pc}
	z_impl_k_sem_give(sem);
   29abe:	480c      	ldr	r0, [pc, #48]	; (29af0 <method_gnss_positioning_work_fn+0xa0>)
   29ac0:	f00d f95a 	bl	36d78 <z_impl_k_sem_give>
   29ac4:	e7de      	b.n	29a84 <method_gnss_positioning_work_fn+0x34>
	switch (gnss_config.accuracy) {
   29ac6:	2003      	movs	r0, #3
   29ac8:	e7ea      	b.n	29aa0 <method_gnss_positioning_work_fn+0x50>
	err = nrf_modem_gnss_start();
   29aca:	f00b fffb 	bl	35ac4 <nrf_modem_gnss_start>
	if (err) {
   29ace:	b140      	cbz	r0, 29ae2 <method_gnss_positioning_work_fn+0x92>
		LOG_ERR("Failed to start GNSS");
   29ad0:	2145      	movs	r1, #69	; 0x45
   29ad2:	480d      	ldr	r0, [pc, #52]	; (29b08 <method_gnss_positioning_work_fn+0xb8>)
   29ad4:	f013 f814 	bl	3cb00 <z_log_minimal_printk>
		location_core_event_cb_error();
   29ad8:	f7ff fe78 	bl	297cc <location_core_event_cb_error>
		running = false;
   29adc:	4b05      	ldr	r3, [pc, #20]	; (29af4 <method_gnss_positioning_work_fn+0xa4>)
   29ade:	701c      	strb	r4, [r3, #0]
		return;
   29ae0:	e7eb      	b.n	29aba <method_gnss_positioning_work_fn+0x6a>
	location_core_timer_start(gnss_config.timeout);
   29ae2:	8828      	ldrh	r0, [r5, #0]
}
   29ae4:	b003      	add	sp, #12
   29ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	location_core_timer_start(gnss_config.timeout);
   29aea:	f7ff be9d 	b.w	29828 <location_core_timer_start>
   29aee:	bf00      	nop
   29af0:	20015060 	.word	0x20015060
   29af4:	2001c907 	.word	0x2001c907
   29af8:	00047798 	.word	0x00047798
   29afc:	2001a58a 	.word	0x2001a58a
   29b00:	20019448 	.word	0x20019448
   29b04:	000477e2 	.word	0x000477e2
   29b08:	00047800 	.word	0x00047800

00029b0c <method_gnss_lte_ind_handler>:
	switch (evt->type) {
   29b0c:	7803      	ldrb	r3, [r0, #0]
   29b0e:	3b01      	subs	r3, #1
   29b10:	2b09      	cmp	r3, #9
   29b12:	d821      	bhi.n	29b58 <method_gnss_lte_ind_handler+0x4c>
   29b14:	e8df f003 	tbb	[pc, r3]
   29b18:	2018200e 	.word	0x2018200e
   29b1c:	20202020 	.word	0x20202020
   29b20:	050b      	.short	0x050b
		if (evt->modem_sleep.type == LTE_LC_MODEM_SLEEP_PSM) {
   29b22:	7a03      	ldrb	r3, [r0, #8]
   29b24:	2b01      	cmp	r3, #1
   29b26:	d117      	bne.n	29b58 <method_gnss_lte_ind_handler+0x4c>
   29b28:	480c      	ldr	r0, [pc, #48]	; (29b5c <method_gnss_lte_ind_handler+0x50>)
   29b2a:	f00d b925 	b.w	36d78 <z_impl_k_sem_give>
	z_impl_k_sem_reset(sem);
   29b2e:	480b      	ldr	r0, [pc, #44]	; (29b5c <method_gnss_lte_ind_handler+0x50>)
   29b30:	f00d b9c8 	b.w	36ec4 <z_impl_k_sem_reset>
		if (evt->psm_cfg.active_time == -1) {
   29b34:	68c3      	ldr	r3, [r0, #12]
   29b36:	1c5a      	adds	r2, r3, #1
   29b38:	d0f6      	beq.n	29b28 <method_gnss_lte_ind_handler+0x1c>
		} else if (evt->psm_cfg.active_time > 0) {
   29b3a:	2b00      	cmp	r3, #0
   29b3c:	dd0c      	ble.n	29b58 <method_gnss_lte_ind_handler+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   29b3e:	2200      	movs	r2, #0
   29b40:	2300      	movs	r3, #0
   29b42:	4806      	ldr	r0, [pc, #24]	; (29b5c <method_gnss_lte_ind_handler+0x50>)
   29b44:	f00d b954 	b.w	36df0 <z_impl_k_sem_take>
		if (evt->rrc_mode == LTE_LC_RRC_MODE_CONNECTED) {
   29b48:	7a03      	ldrb	r3, [r0, #8]
   29b4a:	2b01      	cmp	r3, #1
   29b4c:	d101      	bne.n	29b52 <method_gnss_lte_ind_handler+0x46>
	z_impl_k_sem_reset(sem);
   29b4e:	4804      	ldr	r0, [pc, #16]	; (29b60 <method_gnss_lte_ind_handler+0x54>)
   29b50:	e7ee      	b.n	29b30 <method_gnss_lte_ind_handler+0x24>
		} else if (evt->rrc_mode == LTE_LC_RRC_MODE_IDLE) {
   29b52:	b90b      	cbnz	r3, 29b58 <method_gnss_lte_ind_handler+0x4c>
	z_impl_k_sem_give(sem);
   29b54:	4802      	ldr	r0, [pc, #8]	; (29b60 <method_gnss_lte_ind_handler+0x54>)
   29b56:	e7e8      	b.n	29b2a <method_gnss_lte_ind_handler+0x1e>
}
   29b58:	4770      	bx	lr
   29b5a:	bf00      	nop
   29b5c:	20015048 	.word	0x20015048
   29b60:	20015060 	.word	0x20015060

00029b64 <method_gnss_event_handler>:
	switch (event) {
   29b64:	2801      	cmp	r0, #1
{
   29b66:	b510      	push	{r4, lr}
	switch (event) {
   29b68:	d002      	beq.n	29b70 <method_gnss_event_handler+0xc>
   29b6a:	2804      	cmp	r0, #4
   29b6c:	d007      	beq.n	29b7e <method_gnss_event_handler+0x1a>
}
   29b6e:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(location_core_work_queue_get(), &method_gnss_pvt_work);
   29b70:	f7ff fe56 	bl	29820 <location_core_work_queue_get>
   29b74:	4911      	ldr	r1, [pc, #68]	; (29bbc <method_gnss_event_handler+0x58>)
}
   29b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_submit_to_queue(
   29b7a:	f00d bbc3 	b.w	37304 <k_work_submit_to_queue>
	int err = nrf_modem_gnss_read(&agps_request,
   29b7e:	4c10      	ldr	r4, [pc, #64]	; (29bc0 <method_gnss_event_handler+0x5c>)
   29b80:	2203      	movs	r2, #3
   29b82:	210c      	movs	r1, #12
   29b84:	4620      	mov	r0, r4
   29b86:	f00b fe0d 	bl	357a4 <nrf_modem_gnss_read>
	if (err) {
   29b8a:	4602      	mov	r2, r0
   29b8c:	b128      	cbz	r0, 29b9a <method_gnss_event_handler+0x36>
}
   29b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_WRN("Reading A-GPS req data from GNSS failed, error: %d", err);
   29b92:	2157      	movs	r1, #87	; 0x57
   29b94:	480b      	ldr	r0, [pc, #44]	; (29bc4 <method_gnss_event_handler+0x60>)
   29b96:	f012 bfb3 	b.w	3cb00 <z_log_minimal_printk>
		pgps_agps_request.sv_mask_ephe = agps_request.sv_mask_ephe;
   29b9a:	6821      	ldr	r1, [r4, #0]
   29b9c:	4b0a      	ldr	r3, [pc, #40]	; (29bc8 <method_gnss_event_handler+0x64>)
		agps_request.sv_mask_alm = 0;
   29b9e:	e9c4 0000 	strd	r0, r0, [r4]
	if (method_gnss_agps_required(&agps_request)) {
   29ba2:	4620      	mov	r0, r4
		pgps_agps_request.sv_mask_ephe = agps_request.sv_mask_ephe;
   29ba4:	6019      	str	r1, [r3, #0]
	if (method_gnss_agps_required(&agps_request)) {
   29ba6:	f015 fd07 	bl	3f5b8 <method_gnss_agps_required>
   29baa:	b118      	cbz	r0, 29bb4 <method_gnss_event_handler+0x50>
		k_work_submit_to_queue(
   29bac:	f7ff fe38 	bl	29820 <location_core_work_queue_get>
   29bb0:	4906      	ldr	r1, [pc, #24]	; (29bcc <method_gnss_event_handler+0x68>)
   29bb2:	e7e0      	b.n	29b76 <method_gnss_event_handler+0x12>
		k_work_submit_to_queue(
   29bb4:	f7ff fe34 	bl	29820 <location_core_work_queue_get>
   29bb8:	4905      	ldr	r1, [pc, #20]	; (29bd0 <method_gnss_event_handler+0x6c>)
   29bba:	e7dc      	b.n	29b76 <method_gnss_event_handler+0x12>
   29bbc:	2001948c 	.word	0x2001948c
   29bc0:	2001943c 	.word	0x2001943c
   29bc4:	0004781a 	.word	0x0004781a
   29bc8:	200194ac 	.word	0x200194ac
   29bcc:	2001944c 	.word	0x2001944c
   29bd0:	2001946c 	.word	0x2001946c

00029bd4 <method_gnss_cancel>:
{
   29bd4:	b510      	push	{r4, lr}
	int err = nrf_modem_gnss_stop();
   29bd6:	f00b ffcb 	bl	35b70 <nrf_modem_gnss_stop>
	if ((err != 0) && (err != -NRF_EPERM)) {
   29bda:	1c43      	adds	r3, r0, #1
   29bdc:	2b01      	cmp	r3, #1
	int err = nrf_modem_gnss_stop();
   29bde:	4604      	mov	r4, r0
	if ((err != 0) && (err != -NRF_EPERM)) {
   29be0:	d903      	bls.n	29bea <method_gnss_cancel+0x16>
		LOG_ERR("Failed to stop GNSS");
   29be2:	2145      	movs	r1, #69	; 0x45
   29be4:	480a      	ldr	r0, [pc, #40]	; (29c10 <method_gnss_cancel+0x3c>)
   29be6:	f012 ff8b 	bl	3cb00 <z_log_minimal_printk>
	running = false;
   29bea:	2200      	movs	r2, #0
   29bec:	4b09      	ldr	r3, [pc, #36]	; (29c14 <method_gnss_cancel+0x40>)
	(void)k_work_cancel(&method_gnss_start_work);
   29bee:	480a      	ldr	r0, [pc, #40]	; (29c18 <method_gnss_cancel+0x44>)
	running = false;
   29bf0:	701a      	strb	r2, [r3, #0]
	(void)k_work_cancel(&method_gnss_start_work);
   29bf2:	f00d fbe1 	bl	373b8 <k_work_cancel>
	return sem->count;
   29bf6:	4809      	ldr	r0, [pc, #36]	; (29c1c <method_gnss_cancel+0x48>)
	if (!sleeping) {
   29bf8:	6883      	ldr	r3, [r0, #8]
   29bfa:	b90b      	cbnz	r3, 29c00 <method_gnss_cancel+0x2c>
	z_impl_k_sem_reset(sem);
   29bfc:	f00d f962 	bl	36ec4 <z_impl_k_sem_reset>
   29c00:	4807      	ldr	r0, [pc, #28]	; (29c20 <method_gnss_cancel+0x4c>)
	if (!rrc_idling) {
   29c02:	6883      	ldr	r3, [r0, #8]
   29c04:	b90b      	cbnz	r3, 29c0a <method_gnss_cancel+0x36>
   29c06:	f00d f95d 	bl	36ec4 <z_impl_k_sem_reset>
}
   29c0a:	4620      	mov	r0, r4
   29c0c:	bd10      	pop	{r4, pc}
   29c0e:	bf00      	nop
   29c10:	00047852 	.word	0x00047852
   29c14:	2001c907 	.word	0x2001c907
   29c18:	2001949c 	.word	0x2001949c
   29c1c:	20015048 	.word	0x20015048
   29c20:	20015060 	.word	0x20015060

00029c24 <method_gnss_pvt_work_fn>:
{
   29c24:	b510      	push	{r4, lr}
	if (!running) {
   29c26:	4b2e      	ldr	r3, [pc, #184]	; (29ce0 <method_gnss_pvt_work_fn+0xbc>)
{
   29c28:	b0ba      	sub	sp, #232	; 0xe8
	if (!running) {
   29c2a:	781b      	ldrb	r3, [r3, #0]
   29c2c:	b14b      	cbz	r3, 29c42 <method_gnss_pvt_work_fn+0x1e>
	if (nrf_modem_gnss_read(&pvt_data, sizeof(pvt_data), NRF_MODEM_GNSS_DATA_PVT) != 0) {
   29c2e:	2201      	movs	r2, #1
   29c30:	21e8      	movs	r1, #232	; 0xe8
   29c32:	4668      	mov	r0, sp
   29c34:	f00b fdb6 	bl	357a4 <nrf_modem_gnss_read>
   29c38:	b128      	cbz	r0, 29c46 <method_gnss_pvt_work_fn+0x22>
		LOG_ERR("Failed to read PVT data from GNSS");
   29c3a:	2145      	movs	r1, #69	; 0x45
   29c3c:	4829      	ldr	r0, [pc, #164]	; (29ce4 <method_gnss_pvt_work_fn+0xc0>)
   29c3e:	f012 ff5f 	bl	3cb00 <z_log_minimal_printk>
}
   29c42:	b03a      	add	sp, #232	; 0xe8
   29c44:	bd10      	pop	{r4, pc}
	if (pvt_data.flags & NRF_MODEM_GNSS_PVT_FLAG_FIX_VALID) {
   29c46:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   29c4a:	f013 0301 	ands.w	r3, r3, #1
   29c4e:	d02a      	beq.n	29ca6 <method_gnss_pvt_work_fn+0x82>
		location_result.latitude = pvt_data.latitude;
   29c50:	e9dd 0100 	ldrd	r0, r1, [sp]
		fixes_remaining--;
   29c54:	4a24      	ldr	r2, [pc, #144]	; (29ce8 <method_gnss_pvt_work_fn+0xc4>)
		location_result.method = LOCATION_METHOD_GNSS;
   29c56:	4c25      	ldr	r4, [pc, #148]	; (29cec <method_gnss_pvt_work_fn+0xc8>)
		fixes_remaining--;
   29c58:	6813      	ldr	r3, [r2, #0]
		location_result.latitude = pvt_data.latitude;
   29c5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
		location_result.longitude = pvt_data.longitude;
   29c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		fixes_remaining--;
   29c62:	3b01      	subs	r3, #1
   29c64:	6013      	str	r3, [r2, #0]
		location_result.method = LOCATION_METHOD_GNSS;
   29c66:	2202      	movs	r2, #2
   29c68:	7022      	strb	r2, [r4, #0]
		location_result.accuracy = pvt_data.accuracy;
   29c6a:	9a05      	ldr	r2, [sp, #20]
		location_result.longitude = pvt_data.longitude;
   29c6c:	e9c4 0104 	strd	r0, r1, [r4, #16]
		location_result.accuracy = pvt_data.accuracy;
   29c70:	61a2      	str	r2, [r4, #24]
		location_result.datetime.valid = true;
   29c72:	2201      	movs	r2, #1
		location_result.datetime.year = pvt_data.datetime.year;
   29c74:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
		location_result.datetime.valid = true;
   29c78:	7722      	strb	r2, [r4, #28]
		location_result.datetime.year = pvt_data.datetime.year;
   29c7a:	83e1      	strh	r1, [r4, #30]
		location_result.datetime.second = pvt_data.datetime.seconds;
   29c7c:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		location_result.datetime.month = pvt_data.datetime.month;
   29c80:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
		location_result.datetime.second = pvt_data.datetime.seconds;
   29c84:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
		location_result.datetime.month = pvt_data.datetime.month;
   29c88:	8421      	strh	r1, [r4, #32]
		location_result.datetime.ms = pvt_data.datetime.ms;
   29c8a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
		location_result.datetime.hour = pvt_data.datetime.hour;
   29c8e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
		if (fixes_remaining <= 0) {
   29c92:	2b00      	cmp	r3, #0
		location_result.datetime.hour = pvt_data.datetime.hour;
   29c94:	8461      	strh	r1, [r4, #34]	; 0x22
		location_result.datetime.ms = pvt_data.datetime.ms;
   29c96:	84e2      	strh	r2, [r4, #38]	; 0x26
		if (fixes_remaining <= 0) {
   29c98:	dcd3      	bgt.n	29c42 <method_gnss_pvt_work_fn+0x1e>
			method_gnss_cancel();
   29c9a:	f7ff ff9b 	bl	29bd4 <method_gnss_cancel>
			location_core_event_cb(&location_result);
   29c9e:	4620      	mov	r0, r4
   29ca0:	f7ff fcba 	bl	29618 <location_core_event_cb>
   29ca4:	e7cd      	b.n	29c42 <method_gnss_pvt_work_fn+0x1e>
	} else if (gnss_config.visibility_detection) {
   29ca6:	4a12      	ldr	r2, [pc, #72]	; (29cf0 <method_gnss_pvt_work_fn+0xcc>)
   29ca8:	7912      	ldrb	r2, [r2, #4]
   29caa:	2a00      	cmp	r2, #0
   29cac:	d0c9      	beq.n	29c42 <method_gnss_pvt_work_fn+0x1e>
		if (pvt_data.execution_time >= VISIBILITY_DETECTION_EXEC_TIME &&
   29cae:	9a39      	ldr	r2, [sp, #228]	; 0xe4
   29cb0:	f6a2 32b8 	subw	r2, r2, #3000	; 0xbb8
   29cb4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   29cb8:	d2c3      	bcs.n	29c42 <method_gnss_pvt_work_fn+0x1e>
   29cba:	466a      	mov	r2, sp
		if (pvt_data->sv[i].sv == 0) {
   29cbc:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
   29cc0:	b131      	cbz	r1, 29cd0 <method_gnss_pvt_work_fn+0xac>
		tracked++;
   29cc2:	3301      	adds	r3, #1
   29cc4:	b2db      	uxtb	r3, r3
	for (uint32_t i = 0; i < NRF_MODEM_GNSS_MAX_SATELLITES; i++) {
   29cc6:	2b0c      	cmp	r3, #12
   29cc8:	f102 020c 	add.w	r2, r2, #12
   29ccc:	d1f6      	bne.n	29cbc <method_gnss_pvt_work_fn+0x98>
   29cce:	e7b8      	b.n	29c42 <method_gnss_pvt_work_fn+0x1e>
		    pvt_data.execution_time < (VISIBILITY_DETECTION_EXEC_TIME + MSEC_PER_SEC) &&
   29cd0:	2b02      	cmp	r3, #2
   29cd2:	d8b6      	bhi.n	29c42 <method_gnss_pvt_work_fn+0x1e>
			method_gnss_cancel();
   29cd4:	f7ff ff7e 	bl	29bd4 <method_gnss_cancel>
			location_core_event_cb_error();
   29cd8:	f7ff fd78 	bl	297cc <location_core_event_cb_error>
   29cdc:	e7b1      	b.n	29c42 <method_gnss_pvt_work_fn+0x1e>
   29cde:	bf00      	nop
   29ce0:	2001c907 	.word	0x2001c907
   29ce4:	0004786b 	.word	0x0004786b
   29ce8:	20019448 	.word	0x20019448
   29cec:	20015718 	.word	0x20015718
   29cf0:	2001a58a 	.word	0x2001a58a

00029cf4 <method_gnss_location_get>:

int method_gnss_location_get(const struct location_method_config *config)
{
   29cf4:	b530      	push	{r4, r5, lr}
	int err;

	gnss_config = config->gnss;
   29cf6:	f8d0 2002 	ldr.w	r2, [r0, #2]
   29cfa:	4b19      	ldr	r3, [pc, #100]	; (29d60 <method_gnss_location_get+0x6c>)
{
   29cfc:	b085      	sub	sp, #20
	gnss_config = config->gnss;
   29cfe:	601a      	str	r2, [r3, #0]
   29d00:	88c2      	ldrh	r2, [r0, #6]

	/* GNSS event handler is already set once in method_gnss_init(). If no other thread is
	 * using GNSS, setting it again is not needed.
	 */
	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   29d02:	4818      	ldr	r0, [pc, #96]	; (29d64 <method_gnss_location_get+0x70>)
	gnss_config = config->gnss;
   29d04:	809a      	strh	r2, [r3, #4]
	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   29d06:	f00b ff89 	bl	35c1c <nrf_modem_gnss_event_handler_set>
	if (err) {
   29d0a:	4604      	mov	r4, r0
   29d0c:	b138      	cbz	r0, 29d1e <method_gnss_location_get+0x2a>
		LOG_ERR("Failed to set GNSS event handler, error %d", err);
   29d0e:	4602      	mov	r2, r0
   29d10:	2145      	movs	r1, #69	; 0x45
   29d12:	4815      	ldr	r0, [pc, #84]	; (29d68 <method_gnss_location_get+0x74>)
   29d14:	f012 fef4 	bl	3cb00 <z_log_minimal_printk>
	k_work_submit_to_queue(location_core_work_queue_get(), &method_gnss_start_work);

	running = true;

	return 0;
}
   29d18:	4620      	mov	r0, r4
   29d1a:	b005      	add	sp, #20
   29d1c:	bd30      	pop	{r4, r5, pc}
	if (!initialized) {
   29d1e:	4d13      	ldr	r5, [pc, #76]	; (29d6c <method_gnss_location_get+0x78>)
   29d20:	782b      	ldrb	r3, [r5, #0]
   29d22:	b963      	cbnz	r3, 29d3e <method_gnss_location_get+0x4a>
		struct nrf_cloud_pgps_init_param param = {
   29d24:	4b12      	ldr	r3, [pc, #72]	; (29d70 <method_gnss_location_get+0x7c>)
   29d26:	9003      	str	r0, [sp, #12]
   29d28:	e9cd 3001 	strd	r3, r0, [sp, #4]
		err = nrf_cloud_pgps_init(&param);
   29d2c:	a801      	add	r0, sp, #4
   29d2e:	f004 fc39 	bl	2e5a4 <nrf_cloud_pgps_init>
		if (err) {
   29d32:	4602      	mov	r2, r0
   29d34:	b180      	cbz	r0, 29d58 <method_gnss_location_get+0x64>
			LOG_ERR("Error from PGPS init: %d", err);
   29d36:	2145      	movs	r1, #69	; 0x45
   29d38:	480e      	ldr	r0, [pc, #56]	; (29d74 <method_gnss_location_get+0x80>)
   29d3a:	f012 fee1 	bl	3cb00 <z_log_minimal_printk>
	nrf_modem_gnss_start();
   29d3e:	f00b fec1 	bl	35ac4 <nrf_modem_gnss_start>
	nrf_modem_gnss_stop();
   29d42:	f00b ff15 	bl	35b70 <nrf_modem_gnss_stop>
	k_work_submit_to_queue(location_core_work_queue_get(), &method_gnss_start_work);
   29d46:	f7ff fd6b 	bl	29820 <location_core_work_queue_get>
   29d4a:	490b      	ldr	r1, [pc, #44]	; (29d78 <method_gnss_location_get+0x84>)
   29d4c:	f00d fada 	bl	37304 <k_work_submit_to_queue>
	running = true;
   29d50:	2201      	movs	r2, #1
   29d52:	4b0a      	ldr	r3, [pc, #40]	; (29d7c <method_gnss_location_get+0x88>)
   29d54:	701a      	strb	r2, [r3, #0]
	return 0;
   29d56:	e7df      	b.n	29d18 <method_gnss_location_get+0x24>
			initialized = true;
   29d58:	2301      	movs	r3, #1
   29d5a:	702b      	strb	r3, [r5, #0]
   29d5c:	e7ef      	b.n	29d3e <method_gnss_location_get+0x4a>
   29d5e:	bf00      	nop
   29d60:	2001a58a 	.word	0x2001a58a
   29d64:	00029b65 	.word	0x00029b65
   29d68:	00047892 	.word	0x00047892
   29d6c:	2001c906 	.word	0x2001c906
   29d70:	00029a11 	.word	0x00029a11
   29d74:	000478c2 	.word	0x000478c2
   29d78:	2001949c 	.word	0x2001949c
   29d7c:	2001c907 	.word	0x2001c907

00029d80 <method_gnss_init>:

int method_gnss_init(void)
{
	int err;
	running = false;
   29d80:	2200      	movs	r2, #0
   29d82:	4b13      	ldr	r3, [pc, #76]	; (29dd0 <method_gnss_init+0x50>)
{
   29d84:	b510      	push	{r4, lr}

	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   29d86:	4813      	ldr	r0, [pc, #76]	; (29dd4 <method_gnss_init+0x54>)
	running = false;
   29d88:	701a      	strb	r2, [r3, #0]
	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   29d8a:	f00b ff47 	bl	35c1c <nrf_modem_gnss_event_handler_set>
	if (err) {
   29d8e:	4604      	mov	r4, r0
   29d90:	b130      	cbz	r0, 29da0 <method_gnss_init+0x20>
		LOG_ERR("Failed to set GNSS event handler, error %d", err);
   29d92:	4602      	mov	r2, r0
   29d94:	2145      	movs	r1, #69	; 0x45
   29d96:	4810      	ldr	r0, [pc, #64]	; (29dd8 <method_gnss_init+0x58>)
   29d98:	f012 feb2 	bl	3cb00 <z_log_minimal_printk>
	/* Subscribe to sleep notification to monitor when modem enters power saving mode */
	method_gnss_modem_sleep_notif_subscribe(MIN_SLEEP_DURATION_FOR_STARTING_GNSS);
#endif
	lte_lc_register_handler(method_gnss_lte_ind_handler);
	return 0;
}
   29d9c:	4620      	mov	r0, r4
   29d9e:	bd10      	pop	{r4, pc}
	k_work_init(&method_gnss_pvt_work, method_gnss_pvt_work_fn);
   29da0:	490e      	ldr	r1, [pc, #56]	; (29ddc <method_gnss_init+0x5c>)
   29da2:	480f      	ldr	r0, [pc, #60]	; (29de0 <method_gnss_init+0x60>)
   29da4:	f00d fa56 	bl	37254 <k_work_init>
	k_work_init(&method_gnss_start_work, method_gnss_positioning_work_fn);
   29da8:	490e      	ldr	r1, [pc, #56]	; (29de4 <method_gnss_init+0x64>)
   29daa:	480f      	ldr	r0, [pc, #60]	; (29de8 <method_gnss_init+0x68>)
   29dac:	f00d fa52 	bl	37254 <k_work_init>
	k_work_init(&method_gnss_agps_request_work, method_gnss_agps_request_work_fn);
   29db0:	490e      	ldr	r1, [pc, #56]	; (29dec <method_gnss_init+0x6c>)
   29db2:	480f      	ldr	r0, [pc, #60]	; (29df0 <method_gnss_init+0x70>)
   29db4:	f00d fa4e 	bl	37254 <k_work_init>
	k_work_init(&method_gnss_manage_pgps_work, method_gnss_manage_pgps);
   29db8:	490e      	ldr	r1, [pc, #56]	; (29df4 <method_gnss_init+0x74>)
   29dba:	480f      	ldr	r0, [pc, #60]	; (29df8 <method_gnss_init+0x78>)
   29dbc:	f00d fa4a 	bl	37254 <k_work_init>
	k_work_init(&method_gnss_notify_pgps_work, method_gnss_notify_pgps);
   29dc0:	490e      	ldr	r1, [pc, #56]	; (29dfc <method_gnss_init+0x7c>)
   29dc2:	480f      	ldr	r0, [pc, #60]	; (29e00 <method_gnss_init+0x80>)
   29dc4:	f00d fa46 	bl	37254 <k_work_init>
	lte_lc_register_handler(method_gnss_lte_ind_handler);
   29dc8:	480e      	ldr	r0, [pc, #56]	; (29e04 <method_gnss_init+0x84>)
   29dca:	f7fd f971 	bl	270b0 <lte_lc_register_handler>
	return 0;
   29dce:	e7e5      	b.n	29d9c <method_gnss_init+0x1c>
   29dd0:	2001c907 	.word	0x2001c907
   29dd4:	00029b65 	.word	0x00029b65
   29dd8:	00047892 	.word	0x00047892
   29ddc:	00029c25 	.word	0x00029c25
   29de0:	2001948c 	.word	0x2001948c
   29de4:	00029a51 	.word	0x00029a51
   29de8:	2001949c 	.word	0x2001949c
   29dec:	000299ed 	.word	0x000299ed
   29df0:	2001944c 	.word	0x2001944c
   29df4:	000299ad 	.word	0x000299ad
   29df8:	2001945c 	.word	0x2001945c
   29dfc:	00029991 	.word	0x00029991
   29e00:	2001946c 	.word	0x2001946c
   29e04:	00029b0d 	.word	0x00029b0d

00029e08 <method_cellular_positioning_work_fn>:
	}
	return 0;
}

static void method_cellular_positioning_work_fn(struct k_work *work)
{
   29e08:	b570      	push	{r4, r5, r6, lr}
   29e0a:	4604      	mov	r4, r0
   29e0c:	b090      	sub	sp, #64	; 0x40
	struct multicell_location location;
	struct location_data location_result = { 0 };
   29e0e:	2228      	movs	r2, #40	; 0x28
   29e10:	2100      	movs	r1, #0
   29e12:	a806      	add	r0, sp, #24
   29e14:	f017 fb0e 	bl	41434 <memset>
	int ret;
	struct method_cellular_positioning_work_args *work_data =
		CONTAINER_OF(work, struct method_cellular_positioning_work_args, work_item);
	const struct location_cellular_config cellular_config = work_data->cellular_config;

	location_core_timer_start(cellular_config.timeout);
   29e18:	8a20      	ldrh	r0, [r4, #16]
	const struct location_cellular_config cellular_config = work_data->cellular_config;
   29e1a:	7ca6      	ldrb	r6, [r4, #18]
	location_core_timer_start(cellular_config.timeout);
   29e1c:	f7ff fd04 	bl	29828 <location_core_timer_start>
	struct location_utils_modem_params_info modem_params = { 0 };
   29e20:	2214      	movs	r2, #20
   29e22:	2100      	movs	r1, #0
   29e24:	a801      	add	r0, sp, #4
   29e26:	f017 fb05 	bl	41434 <memset>
	err = lte_lc_neighbor_cell_measurement(LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT);
   29e2a:	2000      	movs	r0, #0
   29e2c:	f7fd fce2 	bl	277f4 <lte_lc_neighbor_cell_measurement>
	if (err) {
   29e30:	4d34      	ldr	r5, [pc, #208]	; (29f04 <method_cellular_positioning_work_fn+0xfc>)
   29e32:	4602      	mov	r2, r0
   29e34:	b358      	cbz	r0, 29e8e <method_cellular_positioning_work_fn+0x86>
		LOG_WRN("Failed to initiate neighbor cell measurements: %d, "
   29e36:	2157      	movs	r1, #87	; 0x57
   29e38:	4833      	ldr	r0, [pc, #204]	; (29f08 <method_cellular_positioning_work_fn+0x100>)
   29e3a:	f012 fe61 	bl	3cb00 <z_log_minimal_printk>
		err = location_utils_modem_params_read(&modem_params);
   29e3e:	a801      	add	r0, sp, #4
   29e40:	f7ff fd0e 	bl	29860 <location_utils_modem_params_read>
		if (err < 0) {
   29e44:	2800      	cmp	r0, #0
   29e46:	da0d      	bge.n	29e64 <method_cellular_positioning_work_fn+0x5c>
			LOG_ERR("Could not obtain modem parameters");
   29e48:	2145      	movs	r1, #69	; 0x45
   29e4a:	4830      	ldr	r0, [pc, #192]	; (29f0c <method_cellular_positioning_work_fn+0x104>)
   29e4c:	f012 fe58 	bl	3cb00 <z_log_minimal_printk>

	LOG_DBG("Triggering neighbor cell measurements");
	ret = method_cellular_ncellmeas_start();
	if (ret) {
		LOG_WRN("Cannot start neighbor cell measurements");
   29e50:	2157      	movs	r1, #87	; 0x57
   29e52:	482f      	ldr	r0, [pc, #188]	; (29f10 <method_cellular_positioning_work_fn+0x108>)
	if (!running) {
		return;
	}

	if (cell_data.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
		LOG_WRN("Current cell ID not valid");
   29e54:	f012 fe54 	bl	3cb00 <z_log_minimal_printk>
		location_core_event_cb_error();
   29e58:	f7ff fcb8 	bl	297cc <location_core_event_cb_error>
		running = false;
   29e5c:	2300      	movs	r3, #0
   29e5e:	702b      	strb	r3, [r5, #0]
		if (running) {
			running = false;
			location_core_event_cb(&location_result);
		}
	}
}
   29e60:	b010      	add	sp, #64	; 0x40
   29e62:	bd70      	pop	{r4, r5, r6, pc}
		memset(&cell_data, 0, sizeof(struct lte_lc_cells_info));
   29e64:	4c2b      	ldr	r4, [pc, #172]	; (29f14 <method_cellular_positioning_work_fn+0x10c>)
   29e66:	2228      	movs	r2, #40	; 0x28
   29e68:	2100      	movs	r1, #0
   29e6a:	f104 0010 	add.w	r0, r4, #16
   29e6e:	f017 fae1 	bl	41434 <memset>
		cell_data.current_cell.mcc = modem_params.mcc;
   29e72:	9b01      	ldr	r3, [sp, #4]
   29e74:	6023      	str	r3, [r4, #0]
		cell_data.current_cell.mnc = modem_params.mnc;
   29e76:	9b02      	ldr	r3, [sp, #8]
   29e78:	6063      	str	r3, [r4, #4]
		cell_data.current_cell.tac = modem_params.tac;
   29e7a:	9b04      	ldr	r3, [sp, #16]
   29e7c:	60e3      	str	r3, [r4, #12]
		cell_data.current_cell.id = modem_params.cell_id;
   29e7e:	9b03      	ldr	r3, [sp, #12]
   29e80:	60a3      	str	r3, [r4, #8]
		cell_data.current_cell.phys_cell_id = modem_params.phys_cell_id;
   29e82:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   29e86:	8523      	strh	r3, [r4, #40]	; 0x28
	z_impl_k_sem_give(sem);
   29e88:	4823      	ldr	r0, [pc, #140]	; (29f18 <method_cellular_positioning_work_fn+0x110>)
   29e8a:	f00c ff75 	bl	36d78 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   29e8e:	f04f 33ff 	mov.w	r3, #4294967295
   29e92:	f04f 32ff 	mov.w	r2, #4294967295
   29e96:	4820      	ldr	r0, [pc, #128]	; (29f18 <method_cellular_positioning_work_fn+0x110>)
   29e98:	f00c ffaa 	bl	36df0 <z_impl_k_sem_take>
	if (!running) {
   29e9c:	782b      	ldrb	r3, [r5, #0]
   29e9e:	2b00      	cmp	r3, #0
   29ea0:	d0de      	beq.n	29e60 <method_cellular_positioning_work_fn+0x58>
	if (cell_data.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   29ea2:	4c1c      	ldr	r4, [pc, #112]	; (29f14 <method_cellular_positioning_work_fn+0x10c>)
   29ea4:	68a3      	ldr	r3, [r4, #8]
   29ea6:	3301      	adds	r3, #1
   29ea8:	d102      	bne.n	29eb0 <method_cellular_positioning_work_fn+0xa8>
		LOG_WRN("Current cell ID not valid");
   29eaa:	2157      	movs	r1, #87	; 0x57
   29eac:	481b      	ldr	r0, [pc, #108]	; (29f1c <method_cellular_positioning_work_fn+0x114>)
   29eae:	e7d1      	b.n	29e54 <method_cellular_positioning_work_fn+0x4c>
	location_utils_systime_to_location_datetime(&location_result.datetime);
   29eb0:	a80d      	add	r0, sp, #52	; 0x34
   29eb2:	f7ff fd35 	bl	29920 <location_utils_systime_to_location_datetime>
	ret = multicell_location_get(cellular_config.service, &cell_data, &location);
   29eb6:	4621      	mov	r1, r4
   29eb8:	4630      	mov	r0, r6
   29eba:	aa01      	add	r2, sp, #4
   29ebc:	f7ff f92c 	bl	29118 <multicell_location_get>
	if (ret) {
   29ec0:	4604      	mov	r4, r0
   29ec2:	b138      	cbz	r0, 29ed4 <method_cellular_positioning_work_fn+0xcc>
		LOG_ERR("Failed to acquire location from multicell_location lib, error: %d", ret);
   29ec4:	4602      	mov	r2, r0
   29ec6:	2145      	movs	r1, #69	; 0x45
   29ec8:	4815      	ldr	r0, [pc, #84]	; (29f20 <method_cellular_positioning_work_fn+0x118>)
   29eca:	f012 fe19 	bl	3cb00 <z_log_minimal_printk>
		location_core_event_cb_error();
   29ece:	f7ff fc7d 	bl	297cc <location_core_event_cb_error>
   29ed2:	e7c5      	b.n	29e60 <method_cellular_positioning_work_fn+0x58>
		location_result.method = LOCATION_METHOD_CELLULAR;
   29ed4:	2301      	movs	r3, #1
		location_result.latitude = location.latitude;
   29ed6:	9801      	ldr	r0, [sp, #4]
		location_result.method = LOCATION_METHOD_CELLULAR;
   29ed8:	f88d 3018 	strb.w	r3, [sp, #24]
		location_result.latitude = location.latitude;
   29edc:	f7f2 fc14 	bl	1c708 <__aeabi_f2d>
   29ee0:	e9cd 0108 	strd	r0, r1, [sp, #32]
		location_result.longitude = location.longitude;
   29ee4:	9802      	ldr	r0, [sp, #8]
   29ee6:	f7f2 fc0f 	bl	1c708 <__aeabi_f2d>
		location_result.accuracy = location.accuracy;
   29eea:	9b03      	ldr	r3, [sp, #12]
		location_result.longitude = location.longitude;
   29eec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		location_result.accuracy = location.accuracy;
   29ef0:	930c      	str	r3, [sp, #48]	; 0x30
		if (running) {
   29ef2:	782b      	ldrb	r3, [r5, #0]
   29ef4:	2b00      	cmp	r3, #0
   29ef6:	d0b3      	beq.n	29e60 <method_cellular_positioning_work_fn+0x58>
			location_core_event_cb(&location_result);
   29ef8:	a806      	add	r0, sp, #24
			running = false;
   29efa:	702c      	strb	r4, [r5, #0]
			location_core_event_cb(&location_result);
   29efc:	f7ff fb8c 	bl	29618 <location_core_event_cb>
   29f00:	e7ae      	b.n	29e60 <method_cellular_positioning_work_fn+0x58>
   29f02:	bf00      	nop
   29f04:	2001c908 	.word	0x2001c908
   29f08:	000478e0 	.word	0x000478e0
   29f0c:	0004793f 	.word	0x0004793f
   29f10:	00047966 	.word	0x00047966
   29f14:	20014590 	.word	0x20014590
   29f18:	20015018 	.word	0x20015018
   29f1c:	00047993 	.word	0x00047993
   29f20:	000479b2 	.word	0x000479b2

00029f24 <method_cellular_lte_ind_handler>:
{
   29f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (evt->type) {
   29f26:	7803      	ldrb	r3, [r0, #0]
{
   29f28:	4604      	mov	r4, r0
	switch (evt->type) {
   29f2a:	2b07      	cmp	r3, #7
   29f2c:	d127      	bne.n	29f7e <method_cellular_lte_ind_handler+0x5a>
		memcpy(&cell_data.current_cell,
   29f2e:	4a14      	ldr	r2, [pc, #80]	; (29f80 <method_cellular_lte_ind_handler+0x5c>)
   29f30:	f100 0308 	add.w	r3, r0, #8
   29f34:	4616      	mov	r6, r2
   29f36:	f100 0738 	add.w	r7, r0, #56	; 0x38
   29f3a:	4615      	mov	r5, r2
   29f3c:	6818      	ldr	r0, [r3, #0]
   29f3e:	6859      	ldr	r1, [r3, #4]
   29f40:	3308      	adds	r3, #8
   29f42:	c503      	stmia	r5!, {r0, r1}
   29f44:	42bb      	cmp	r3, r7
   29f46:	462a      	mov	r2, r5
   29f48:	d1f7      	bne.n	29f3a <method_cellular_lte_ind_handler+0x16>
		if (evt->cells_info.ncells_count > 0 && evt->cells_info.neighbor_cells) {
   29f4a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   29f4e:	b172      	cbz	r2, 29f6e <method_cellular_lte_ind_handler+0x4a>
   29f50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   29f52:	b161      	cbz	r1, 29f6e <method_cellular_lte_ind_handler+0x4a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29f54:	6b70      	ldr	r0, [r6, #52]	; 0x34
   29f56:	0112      	lsls	r2, r2, #4
   29f58:	f017 fa4c 	bl	413f4 <memcpy>
			cell_data.ncells_count = evt->cells_info.ncells_count;
   29f5c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   29f60:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	z_impl_k_sem_give(sem);
   29f64:	4807      	ldr	r0, [pc, #28]	; (29f84 <method_cellular_lte_ind_handler+0x60>)
}
   29f66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   29f6a:	f00c bf05 	b.w	36d78 <z_impl_k_sem_give>
			cell_data.ncells_count = 0;
   29f6e:	2300      	movs	r3, #0
			LOG_INF("No neighbor cell information from modem.");
   29f70:	2149      	movs	r1, #73	; 0x49
   29f72:	4805      	ldr	r0, [pc, #20]	; (29f88 <method_cellular_lte_ind_handler+0x64>)
			cell_data.ncells_count = 0;
   29f74:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
			LOG_INF("No neighbor cell information from modem.");
   29f78:	f012 fdc2 	bl	3cb00 <z_log_minimal_printk>
   29f7c:	e7f2      	b.n	29f64 <method_cellular_lte_ind_handler+0x40>
}
   29f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29f80:	20014590 	.word	0x20014590
   29f84:	20015018 	.word	0x20015018
   29f88:	000479f9 	.word	0x000479f9

00029f8c <method_cellular_location_get>:

int method_cellular_location_get(const struct location_method_config *config)
{
   29f8c:	b510      	push	{r4, lr}
	/* Note: LTE status not checked, let it fail in NCELLMEAS if no connection */

	method_cellular_positioning_work.cellular_config = config->cellular;
   29f8e:	f8d0 0002 	ldr.w	r0, [r0, #2]
   29f92:	4c06      	ldr	r4, [pc, #24]	; (29fac <method_cellular_location_get+0x20>)
   29f94:	6120      	str	r0, [r4, #16]
	k_work_submit_to_queue(location_core_work_queue_get(),
   29f96:	f7ff fc43 	bl	29820 <location_core_work_queue_get>
   29f9a:	4621      	mov	r1, r4
   29f9c:	f00d f9b2 	bl	37304 <k_work_submit_to_queue>
			       &method_cellular_positioning_work.work_item);

	running = true;
   29fa0:	2201      	movs	r2, #1
   29fa2:	4b03      	ldr	r3, [pc, #12]	; (29fb0 <method_cellular_location_get+0x24>)

	return 0;
}
   29fa4:	2000      	movs	r0, #0
	running = true;
   29fa6:	701a      	strb	r2, [r3, #0]
}
   29fa8:	bd10      	pop	{r4, pc}
   29faa:	bf00      	nop
   29fac:	200194bc 	.word	0x200194bc
   29fb0:	2001c908 	.word	0x2001c908

00029fb4 <method_cellular_cancel>:

int method_cellular_cancel(void)
{
   29fb4:	b538      	push	{r3, r4, r5, lr}
	if (running) {
   29fb6:	4d09      	ldr	r5, [pc, #36]	; (29fdc <method_cellular_cancel+0x28>)
   29fb8:	782b      	ldrb	r3, [r5, #0]
   29fba:	b15b      	cbz	r3, 29fd4 <method_cellular_cancel+0x20>
		(void)lte_lc_neighbor_cell_measurement_cancel();
		(void)k_work_cancel(&method_cellular_positioning_work.work_item);
		running = false;
   29fbc:	2400      	movs	r4, #0
		(void)lte_lc_neighbor_cell_measurement_cancel();
   29fbe:	f7fd fc2f 	bl	27820 <lte_lc_neighbor_cell_measurement_cancel>
		(void)k_work_cancel(&method_cellular_positioning_work.work_item);
   29fc2:	4807      	ldr	r0, [pc, #28]	; (29fe0 <method_cellular_cancel+0x2c>)
   29fc4:	f00d f9f8 	bl	373b8 <k_work_cancel>
		running = false;
   29fc8:	702c      	strb	r4, [r5, #0]
	z_impl_k_sem_reset(sem);
   29fca:	4806      	ldr	r0, [pc, #24]	; (29fe4 <method_cellular_cancel+0x30>)
   29fcc:	f00c ff7a 	bl	36ec4 <z_impl_k_sem_reset>
		k_sem_reset(&cellmeas_data_ready);
	} else {
		return -EPERM;
	}

	return 0;
   29fd0:	4620      	mov	r0, r4
}
   29fd2:	bd38      	pop	{r3, r4, r5, pc}
		return -EPERM;
   29fd4:	f04f 30ff 	mov.w	r0, #4294967295
   29fd8:	e7fb      	b.n	29fd2 <method_cellular_cancel+0x1e>
   29fda:	bf00      	nop
   29fdc:	2001c908 	.word	0x2001c908
   29fe0:	200194bc 	.word	0x200194bc
   29fe4:	20015018 	.word	0x20015018

00029fe8 <method_cellular_init>:

int method_cellular_init(void)
{
   29fe8:	b510      	push	{r4, lr}
	int ret;

	running = false;
   29fea:	2400      	movs	r4, #0
   29fec:	4b0d      	ldr	r3, [pc, #52]	; (2a024 <method_cellular_init+0x3c>)

	k_work_init(&method_cellular_positioning_work.work_item,
   29fee:	490e      	ldr	r1, [pc, #56]	; (2a028 <method_cellular_init+0x40>)
   29ff0:	480e      	ldr	r0, [pc, #56]	; (2a02c <method_cellular_init+0x44>)
	running = false;
   29ff2:	701c      	strb	r4, [r3, #0]
	k_work_init(&method_cellular_positioning_work.work_item,
   29ff4:	f00d f92e 	bl	37254 <k_work_init>
		    method_cellular_positioning_work_fn);
	lte_lc_register_handler(method_cellular_lte_ind_handler);
   29ff8:	480d      	ldr	r0, [pc, #52]	; (2a030 <method_cellular_init+0x48>)
   29ffa:	f7fd f859 	bl	270b0 <lte_lc_register_handler>

	ret = multicell_location_provision_certificate(false);
   29ffe:	4620      	mov	r0, r4
   2a000:	f7ff f8b8 	bl	29174 <multicell_location_provision_certificate>
	if (ret) {
   2a004:	4604      	mov	r4, r0
   2a006:	b158      	cbz	r0, 2a020 <method_cellular_init+0x38>
		LOG_ERR("Certificate provisioning failed, ret %d", ret);
   2a008:	4602      	mov	r2, r0
   2a00a:	2145      	movs	r1, #69	; 0x45
   2a00c:	4809      	ldr	r0, [pc, #36]	; (2a034 <method_cellular_init+0x4c>)
   2a00e:	f012 fd77 	bl	3cb00 <z_log_minimal_printk>
		if (ret == -EACCES) {
   2a012:	f114 0f0d 	cmn.w	r4, #13
   2a016:	d103      	bne.n	2a020 <method_cellular_init+0x38>
			LOG_WRN("err: -EACCESS, that might indicate that modem is in state where "
   2a018:	2157      	movs	r1, #87	; 0x57
   2a01a:	4807      	ldr	r0, [pc, #28]	; (2a038 <method_cellular_init+0x50>)
   2a01c:	f012 fd70 	bl	3cb00 <z_log_minimal_printk>
		}
		return ret;
	}

	return 0;
}
   2a020:	4620      	mov	r0, r4
   2a022:	bd10      	pop	{r4, pc}
   2a024:	2001c908 	.word	0x2001c908
   2a028:	00029e09 	.word	0x00029e09
   2a02c:	200194bc 	.word	0x200194bc
   2a030:	00029f25 	.word	0x00029f25
   2a034:	00047a27 	.word	0x00047a27
   2a038:	00047a54 	.word	0x00047a54

0002a03c <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
   2a03c:	b508      	push	{r3, lr}
	if (ret != 0) {
   2a03e:	b9d8      	cbnz	r0, 2a078 <on_modem_lib_init+0x3c>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   2a040:	480e      	ldr	r0, [pc, #56]	; (2a07c <on_modem_lib_init+0x40>)
   2a042:	f7f3 f8fe 	bl	1d242 <strlen>
   2a046:	b140      	cbz	r0, 2a05a <on_modem_lib_init+0x1e>
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		if (nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO) != 0) {
   2a048:	490c      	ldr	r1, [pc, #48]	; (2a07c <on_modem_lib_init+0x40>)
   2a04a:	480d      	ldr	r0, [pc, #52]	; (2a080 <on_modem_lib_init+0x44>)
   2a04c:	f00a ffec 	bl	35028 <nrf_modem_at_printf>
   2a050:	b118      	cbz	r0, 2a05a <on_modem_lib_init+0x1e>
			LOG_ERR("Failed to set MAGPIO configuration");
   2a052:	2145      	movs	r1, #69	; 0x45
   2a054:	480b      	ldr	r0, [pc, #44]	; (2a084 <on_modem_lib_init+0x48>)
   2a056:	f012 fd53 	bl	3cb00 <z_log_minimal_printk>
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
   2a05a:	480b      	ldr	r0, [pc, #44]	; (2a088 <on_modem_lib_init+0x4c>)
   2a05c:	f7f3 f8f1 	bl	1d242 <strlen>
   2a060:	b150      	cbz	r0, 2a078 <on_modem_lib_init+0x3c>
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		if (nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0) != 0) {
   2a062:	4909      	ldr	r1, [pc, #36]	; (2a088 <on_modem_lib_init+0x4c>)
   2a064:	4806      	ldr	r0, [pc, #24]	; (2a080 <on_modem_lib_init+0x44>)
   2a066:	f00a ffdf 	bl	35028 <nrf_modem_at_printf>
   2a06a:	b128      	cbz	r0, 2a078 <on_modem_lib_init+0x3c>
			LOG_ERR("Failed to set COEX0 configuration");
		}
	}
}
   2a06c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			LOG_ERR("Failed to set COEX0 configuration");
   2a070:	2145      	movs	r1, #69	; 0x45
   2a072:	4806      	ldr	r0, [pc, #24]	; (2a08c <on_modem_lib_init+0x50>)
   2a074:	f012 bd44 	b.w	3cb00 <z_log_minimal_printk>
}
   2a078:	bd08      	pop	{r3, pc}
   2a07a:	bf00      	nop
   2a07c:	00043ec3 	.word	0x00043ec3
   2a080:	0004a310 	.word	0x0004a310
   2a084:	00047acf 	.word	0x00047acf
   2a088:	00043ee2 	.word	0x00043ee2
   2a08c:	00047af7 	.word	0x00047af7

0002a090 <json_item_string_exists>:
	return err;
}

static bool json_item_string_exists(const cJSON *const obj, const char *const key,
				    const char *const val)
{
   2a090:	b570      	push	{r4, r5, r6, lr}
   2a092:	460e      	mov	r6, r1
   2a094:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(obj != NULL);
   2a096:	4604      	mov	r4, r0
   2a098:	b950      	cbnz	r0, 2a0b0 <json_item_string_exists+0x20>
   2a09a:	4911      	ldr	r1, [pc, #68]	; (2a0e0 <json_item_string_exists+0x50>)
   2a09c:	4811      	ldr	r0, [pc, #68]	; (2a0e4 <json_item_string_exists+0x54>)
   2a09e:	f240 52a3 	movw	r2, #1443	; 0x5a3
   2a0a2:	f012 fcf3 	bl	3ca8c <assert_print>
   2a0a6:	f240 51a3 	movw	r1, #1443	; 0x5a3
   2a0aa:	480d      	ldr	r0, [pc, #52]	; (2a0e0 <json_item_string_exists+0x50>)
   2a0ac:	f012 fce7 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(key != NULL);

	char *str_val;
	cJSON *item = cJSON_GetObjectItem(obj, key);
   2a0b0:	4631      	mov	r1, r6
   2a0b2:	4620      	mov	r0, r4
   2a0b4:	f015 fd56 	bl	3fb64 <cJSON_GetObjectItem>

	if (!item) {
   2a0b8:	b148      	cbz	r0, 2a0ce <json_item_string_exists+0x3e>
		return false;
	}

	if (!val) {
   2a0ba:	b92d      	cbnz	r5, 2a0c8 <json_item_string_exists+0x38>
		return cJSON_IsNull(item);
   2a0bc:	f015 fe52 	bl	3fd64 <cJSON_IsNull>
   2a0c0:	3800      	subs	r0, #0
   2a0c2:	bf18      	it	ne
   2a0c4:	2001      	movne	r0, #1
	if (!str_val) {
		return false;
	}

	return (strcmp(str_val, val) == 0);
}
   2a0c6:	bd70      	pop	{r4, r5, r6, pc}
	str_val = cJSON_GetStringValue(item);
   2a0c8:	f015 fe60 	bl	3fd8c <cJSON_GetStringValue>
	if (!str_val) {
   2a0cc:	b908      	cbnz	r0, 2a0d2 <json_item_string_exists+0x42>
		return false;
   2a0ce:	2000      	movs	r0, #0
   2a0d0:	e7f9      	b.n	2a0c6 <json_item_string_exists+0x36>
	return (strcmp(str_val, val) == 0);
   2a0d2:	4629      	mov	r1, r5
   2a0d4:	f7f3 f8ab 	bl	1d22e <strcmp>
   2a0d8:	fab0 f080 	clz	r0, r0
   2a0dc:	0940      	lsrs	r0, r0, #5
   2a0de:	e7f2      	b.n	2a0c6 <json_item_string_exists+0x36>
   2a0e0:	00047b2c 	.word	0x00047b2c
   2a0e4:	0004409e 	.word	0x0004409e

0002a0e8 <nrf_cloud_decode_desired_obj>:
{
   2a0e8:	b538      	push	{r3, r4, r5, lr}
   2a0ea:	460c      	mov	r4, r1
	if ((root_obj != NULL) && (desired_obj != NULL)) {
   2a0ec:	4605      	mov	r5, r0
   2a0ee:	b140      	cbz	r0, 2a102 <nrf_cloud_decode_desired_obj+0x1a>
		state_obj = json_object_decode(root_obj, JSON_KEY_STATE);
   2a0f0:	4904      	ldr	r1, [pc, #16]	; (2a104 <nrf_cloud_decode_desired_obj+0x1c>)
   2a0f2:	f015 faa1 	bl	3f638 <json_object_decode>
		if (state_obj == NULL) {
   2a0f6:	b918      	cbnz	r0, 2a100 <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, JSON_KEY_DES);
   2a0f8:	4628      	mov	r0, r5
   2a0fa:	4903      	ldr	r1, [pc, #12]	; (2a108 <nrf_cloud_decode_desired_obj+0x20>)
   2a0fc:	f015 fa9c 	bl	3f638 <json_object_decode>
			*desired_obj = state_obj;
   2a100:	6020      	str	r0, [r4, #0]
}
   2a102:	bd38      	pop	{r3, r4, r5, pc}
   2a104:	00047b6b 	.word	0x00047b6b
   2a108:	00047b71 	.word	0x00047b71

0002a10c <encode_info_item_cs>:
{
   2a10c:	b570      	push	{r4, r5, r6, lr}
   2a10e:	4605      	mov	r5, r0
	switch (inf) {
   2a110:	2d01      	cmp	r5, #1
{
   2a112:	460c      	mov	r4, r1
   2a114:	4610      	mov	r0, r2
   2a116:	461e      	mov	r6, r3
	switch (inf) {
   2a118:	d003      	beq.n	2a122 <encode_info_item_cs+0x16>
   2a11a:	2d02      	cmp	r5, #2
   2a11c:	d01f      	beq.n	2a15e <encode_info_item_cs+0x52>
	return 0;
   2a11e:	2000      	movs	r0, #0
   2a120:	e00a      	b.n	2a138 <encode_info_item_cs+0x2c>
		move_obj = cJSON_DetachItemFromObject(inf_obj, inf_name);
   2a122:	f015 fd4d 	bl	3fbc0 <cJSON_DetachItemFromObject>
		if (!move_obj) {
   2a126:	4605      	mov	r5, r0
   2a128:	b938      	cbnz	r0, 2a13a <encode_info_item_cs+0x2e>
			LOG_ERR("Info item \"%s\" not found", log_strdup(inf_name));
   2a12a:	4811      	ldr	r0, [pc, #68]	; (2a170 <encode_info_item_cs+0x64>)
   2a12c:	4622      	mov	r2, r4
   2a12e:	2145      	movs	r1, #69	; 0x45
   2a130:	f012 fce6 	bl	3cb00 <z_log_minimal_printk>
			return -ENOMSG;
   2a134:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   2a138:	bd70      	pop	{r4, r5, r6, pc}
		if (json_add_obj_cs(root_obj, inf_name, move_obj)) {
   2a13a:	4602      	mov	r2, r0
   2a13c:	4621      	mov	r1, r4
   2a13e:	4630      	mov	r0, r6
   2a140:	f015 fa5d 	bl	3f5fe <json_add_obj_cs>
   2a144:	2800      	cmp	r0, #0
   2a146:	d0ea      	beq.n	2a11e <encode_info_item_cs+0x12>
			cJSON_Delete(move_obj);
   2a148:	4628      	mov	r0, r5
   2a14a:	f007 ff07 	bl	31f5c <cJSON_Delete>
			LOG_ERR("Failed to add info item \"%s\"", log_strdup(inf_name));
   2a14e:	4622      	mov	r2, r4
   2a150:	2145      	movs	r1, #69	; 0x45
   2a152:	4808      	ldr	r0, [pc, #32]	; (2a174 <encode_info_item_cs+0x68>)
			LOG_ERR("Failed to create NULL item for \"%s\"", log_strdup(inf_name));
   2a154:	f012 fcd4 	bl	3cb00 <z_log_minimal_printk>
			return -ENOMEM;
   2a158:	f06f 000b 	mvn.w	r0, #11
   2a15c:	e7ec      	b.n	2a138 <encode_info_item_cs+0x2c>
		if (json_add_null_cs(root_obj, inf_name)) {
   2a15e:	4618      	mov	r0, r3
   2a160:	f015 fa6e 	bl	3f640 <json_add_null_cs>
   2a164:	2800      	cmp	r0, #0
   2a166:	d0da      	beq.n	2a11e <encode_info_item_cs+0x12>
			LOG_ERR("Failed to create NULL item for \"%s\"", log_strdup(inf_name));
   2a168:	4622      	mov	r2, r4
   2a16a:	2145      	movs	r1, #69	; 0x45
   2a16c:	4802      	ldr	r0, [pc, #8]	; (2a178 <encode_info_item_cs+0x6c>)
   2a16e:	e7f1      	b.n	2a154 <encode_info_item_cs+0x48>
   2a170:	00047b79 	.word	0x00047b79
   2a174:	00047b97 	.word	0x00047b97
   2a178:	00047bb9 	.word	0x00047bb9

0002a17c <get_error_code_value>:
{
   2a17c:	b538      	push	{r3, r4, r5, lr}
   2a17e:	460d      	mov	r5, r1
	err_obj = cJSON_GetObjectItem(obj, NRF_CLOUD_JSON_ERR_KEY);
   2a180:	490c      	ldr	r1, [pc, #48]	; (2a1b4 <get_error_code_value+0x38>)
   2a182:	f015 fcef 	bl	3fb64 <cJSON_GetObjectItem>
	if (!err_obj) {
   2a186:	4604      	mov	r4, r0
   2a188:	b188      	cbz	r0, 2a1ae <get_error_code_value+0x32>
	if (!cJSON_IsNumber(err_obj)) {
   2a18a:	f015 fdf1 	bl	3fd70 <cJSON_IsNumber>
   2a18e:	b930      	cbnz	r0, 2a19e <get_error_code_value+0x22>
		LOG_WRN("Invalid JSON data type for error value");
   2a190:	4809      	ldr	r0, [pc, #36]	; (2a1b8 <get_error_code_value+0x3c>)
   2a192:	2157      	movs	r1, #87	; 0x57
   2a194:	f012 fcb4 	bl	3cb00 <z_log_minimal_printk>
   2a198:	f06f 004c 	mvn.w	r0, #76	; 0x4c
}
   2a19c:	bd38      	pop	{r3, r4, r5, pc}
	*err = (enum nrf_cloud_error)cJSON_GetNumberValue(err_obj);
   2a19e:	4620      	mov	r0, r4
   2a1a0:	f007 ffaa 	bl	320f8 <cJSON_GetNumberValue>
   2a1a4:	f7f2 fdb8 	bl	1cd18 <__aeabi_d2iz>
   2a1a8:	6028      	str	r0, [r5, #0]
	return 0;
   2a1aa:	2000      	movs	r0, #0
   2a1ac:	e7f6      	b.n	2a19c <get_error_code_value+0x20>
		return -ENOMSG;
   2a1ae:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2a1b2:	e7f3      	b.n	2a19c <get_error_code_value+0x20>
   2a1b4:	00047be2 	.word	0x00047be2
   2a1b8:	00047be6 	.word	0x00047be6

0002a1bc <nrf_cloud_codec_init>:
{
   2a1bc:	b510      	push	{r4, lr}
	if (!initialized) {
   2a1be:	4c04      	ldr	r4, [pc, #16]	; (2a1d0 <nrf_cloud_codec_init+0x14>)
   2a1c0:	7823      	ldrb	r3, [r4, #0]
   2a1c2:	b91b      	cbnz	r3, 2a1cc <nrf_cloud_codec_init+0x10>
		cJSON_Init();
   2a1c4:	f007 ffac 	bl	32120 <cJSON_Init>
		initialized = true;
   2a1c8:	2301      	movs	r3, #1
   2a1ca:	7023      	strb	r3, [r4, #0]
}
   2a1cc:	2000      	movs	r0, #0
   2a1ce:	bd10      	pop	{r4, pc}
   2a1d0:	2001c909 	.word	0x2001c909

0002a1d4 <json_create_req_obj>:
{
   2a1d4:	b570      	push	{r4, r5, r6, lr}
   2a1d6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(app_id != NULL);
   2a1d8:	4606      	mov	r6, r0
   2a1da:	b940      	cbnz	r0, 2a1ee <json_create_req_obj+0x1a>
   2a1dc:	4915      	ldr	r1, [pc, #84]	; (2a234 <json_create_req_obj+0x60>)
   2a1de:	4816      	ldr	r0, [pc, #88]	; (2a238 <json_create_req_obj+0x64>)
   2a1e0:	2266      	movs	r2, #102	; 0x66
   2a1e2:	f012 fc53 	bl	3ca8c <assert_print>
   2a1e6:	2166      	movs	r1, #102	; 0x66
   2a1e8:	4812      	ldr	r0, [pc, #72]	; (2a234 <json_create_req_obj+0x60>)
   2a1ea:	f012 fc48 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(msg_type != NULL);
   2a1ee:	b945      	cbnz	r5, 2a202 <json_create_req_obj+0x2e>
   2a1f0:	4910      	ldr	r1, [pc, #64]	; (2a234 <json_create_req_obj+0x60>)
   2a1f2:	4811      	ldr	r0, [pc, #68]	; (2a238 <json_create_req_obj+0x64>)
   2a1f4:	2267      	movs	r2, #103	; 0x67
   2a1f6:	f012 fc49 	bl	3ca8c <assert_print>
   2a1fa:	2167      	movs	r1, #103	; 0x67
   2a1fc:	480d      	ldr	r0, [pc, #52]	; (2a234 <json_create_req_obj+0x60>)
   2a1fe:	f012 fc3e 	bl	3ca7e <assert_post_action>
	nrf_cloud_codec_init();
   2a202:	f7ff ffdb 	bl	2a1bc <nrf_cloud_codec_init>
	cJSON *req_obj = cJSON_CreateObject();
   2a206:	f007 ff6b 	bl	320e0 <cJSON_CreateObject>
	if (!cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_APPID_KEY, app_id) ||
   2a20a:	4632      	mov	r2, r6
   2a20c:	490b      	ldr	r1, [pc, #44]	; (2a23c <json_create_req_obj+0x68>)
	cJSON *req_obj = cJSON_CreateObject();
   2a20e:	4604      	mov	r4, r0
	if (!cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_APPID_KEY, app_id) ||
   2a210:	f015 fd3e 	bl	3fc90 <cJSON_AddStringToObject>
   2a214:	b928      	cbnz	r0, 2a222 <json_create_req_obj+0x4e>
		cJSON_Delete(req_obj);
   2a216:	4620      	mov	r0, r4
   2a218:	f007 fea0 	bl	31f5c <cJSON_Delete>
		req_obj = NULL;
   2a21c:	2400      	movs	r4, #0
}
   2a21e:	4620      	mov	r0, r4
   2a220:	bd70      	pop	{r4, r5, r6, pc}
	    !cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
   2a222:	462a      	mov	r2, r5
   2a224:	4620      	mov	r0, r4
   2a226:	4906      	ldr	r1, [pc, #24]	; (2a240 <json_create_req_obj+0x6c>)
   2a228:	f015 fd32 	bl	3fc90 <cJSON_AddStringToObject>
	if (!cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_APPID_KEY, app_id) ||
   2a22c:	2800      	cmp	r0, #0
   2a22e:	d1f6      	bne.n	2a21e <json_create_req_obj+0x4a>
   2a230:	e7f1      	b.n	2a216 <json_create_req_obj+0x42>
   2a232:	bf00      	nop
   2a234:	00047b2c 	.word	0x00047b2c
   2a238:	0004409e 	.word	0x0004409e
   2a23c:	000435e2 	.word	0x000435e2
   2a240:	00043633 	.word	0x00043633

0002a244 <nrf_cloud_json_add_modem_info>:
{
   2a244:	b530      	push	{r4, r5, lr}
	__ASSERT_NO_MSG(data_obj != NULL);
   2a246:	4605      	mov	r5, r0
{
   2a248:	f6ad 1d5c 	subw	sp, sp, #2396	; 0x95c
	__ASSERT_NO_MSG(data_obj != NULL);
   2a24c:	b940      	cbnz	r0, 2a260 <nrf_cloud_json_add_modem_info+0x1c>
   2a24e:	493f      	ldr	r1, [pc, #252]	; (2a34c <nrf_cloud_json_add_modem_info+0x108>)
   2a250:	483f      	ldr	r0, [pc, #252]	; (2a350 <nrf_cloud_json_add_modem_info+0x10c>)
   2a252:	22bc      	movs	r2, #188	; 0xbc
   2a254:	f012 fc1a 	bl	3ca8c <assert_print>
   2a258:	21bc      	movs	r1, #188	; 0xbc
   2a25a:	483c      	ldr	r0, [pc, #240]	; (2a34c <nrf_cloud_json_add_modem_info+0x108>)
   2a25c:	f012 fc0f 	bl	3ca7e <assert_post_action>
	struct modem_param_info modem_info = {0};
   2a260:	f640 1258 	movw	r2, #2392	; 0x958
   2a264:	2100      	movs	r1, #0
   2a266:	4668      	mov	r0, sp
   2a268:	f017 f8e4 	bl	41434 <memset>
	int err = modem_info_init();
   2a26c:	f7fe f94a 	bl	28504 <modem_info_init>
	if (err) {
   2a270:	4604      	mov	r4, r0
   2a272:	b140      	cbz	r0, 2a286 <nrf_cloud_json_add_modem_info+0x42>
		LOG_ERR("Could not initialize modem info module, error: %d",
   2a274:	2145      	movs	r1, #69	; 0x45
   2a276:	4602      	mov	r2, r0
   2a278:	4836      	ldr	r0, [pc, #216]	; (2a354 <nrf_cloud_json_add_modem_info+0x110>)
		LOG_ERR("Could not initialize modem info parameters, error: %d",
   2a27a:	f012 fc41 	bl	3cb00 <z_log_minimal_printk>
}
   2a27e:	4620      	mov	r0, r4
   2a280:	f60d 1d5c 	addw	sp, sp, #2396	; 0x95c
   2a284:	bd30      	pop	{r4, r5, pc}
	err = modem_info_params_init(modem_info);
   2a286:	4668      	mov	r0, sp
   2a288:	f7fe f974 	bl	28574 <modem_info_params_init>
	if (err) {
   2a28c:	4604      	mov	r4, r0
   2a28e:	b118      	cbz	r0, 2a298 <nrf_cloud_json_add_modem_info+0x54>
		LOG_ERR("Could not initialize modem info parameters, error: %d",
   2a290:	4602      	mov	r2, r0
   2a292:	2145      	movs	r1, #69	; 0x45
   2a294:	4830      	ldr	r0, [pc, #192]	; (2a358 <nrf_cloud_json_add_modem_info+0x114>)
   2a296:	e7f0      	b.n	2a27a <nrf_cloud_json_add_modem_info+0x36>
	err = modem_info_params_get(modem_info);
   2a298:	4668      	mov	r0, sp
   2a29a:	f7fe f9c1 	bl	28620 <modem_info_params_get>
	if (err) {
   2a29e:	4604      	mov	r4, r0
   2a2a0:	2800      	cmp	r0, #0
   2a2a2:	d14f      	bne.n	2a344 <nrf_cloud_json_add_modem_info+0x100>
	__ASSERT_NO_MSG(data_obj != NULL);
   2a2a4:	b945      	cbnz	r5, 2a2b8 <nrf_cloud_json_add_modem_info+0x74>
   2a2a6:	4929      	ldr	r1, [pc, #164]	; (2a34c <nrf_cloud_json_add_modem_info+0x108>)
   2a2a8:	4829      	ldr	r0, [pc, #164]	; (2a350 <nrf_cloud_json_add_modem_info+0x10c>)
   2a2aa:	22a7      	movs	r2, #167	; 0xa7
   2a2ac:	f012 fbee 	bl	3ca8c <assert_print>
   2a2b0:	21a7      	movs	r1, #167	; 0xa7
   2a2b2:	4826      	ldr	r0, [pc, #152]	; (2a34c <nrf_cloud_json_add_modem_info+0x108>)
   2a2b4:	f012 fbe3 	bl	3ca7e <assert_post_action>
	if (json_add_num_cs(data_obj, NRF_CLOUD_JSON_MCC_KEY,
   2a2b8:	f8bd 01c0 	ldrh.w	r0, [sp, #448]	; 0x1c0
   2a2bc:	f7f2 fa02 	bl	1c6c4 <__aeabi_ui2d>
   2a2c0:	4602      	mov	r2, r0
   2a2c2:	460b      	mov	r3, r1
   2a2c4:	4628      	mov	r0, r5
   2a2c6:	4925      	ldr	r1, [pc, #148]	; (2a35c <nrf_cloud_json_add_modem_info+0x118>)
   2a2c8:	f015 f98c 	bl	3f5e4 <json_add_num_cs>
   2a2cc:	2800      	cmp	r0, #0
   2a2ce:	d136      	bne.n	2a33e <nrf_cloud_json_add_modem_info+0xfa>
	    json_add_num_cs(data_obj, NRF_CLOUD_JSON_MNC_KEY,
   2a2d0:	f8bd 0230 	ldrh.w	r0, [sp, #560]	; 0x230
   2a2d4:	f7f2 f9f6 	bl	1c6c4 <__aeabi_ui2d>
   2a2d8:	4602      	mov	r2, r0
   2a2da:	460b      	mov	r3, r1
   2a2dc:	4628      	mov	r0, r5
   2a2de:	4920      	ldr	r1, [pc, #128]	; (2a360 <nrf_cloud_json_add_modem_info+0x11c>)
   2a2e0:	f015 f980 	bl	3f5e4 <json_add_num_cs>
		modem_info->network.mcc.value) ||
   2a2e4:	bb58      	cbnz	r0, 2a33e <nrf_cloud_json_add_modem_info+0xfa>
	    json_add_num_cs(data_obj, NRF_CLOUD_JSON_AREA_CODE_KEY,
   2a2e6:	f8bd 00e0 	ldrh.w	r0, [sp, #224]	; 0xe0
   2a2ea:	f7f2 f9eb 	bl	1c6c4 <__aeabi_ui2d>
   2a2ee:	4602      	mov	r2, r0
   2a2f0:	460b      	mov	r3, r1
   2a2f2:	4628      	mov	r0, r5
   2a2f4:	491b      	ldr	r1, [pc, #108]	; (2a364 <nrf_cloud_json_add_modem_info+0x120>)
   2a2f6:	f015 f975 	bl	3f5e4 <json_add_num_cs>
		modem_info->network.mnc.value) ||
   2a2fa:	bb00      	cbnz	r0, 2a33e <nrf_cloud_json_add_modem_info+0xfa>
		(uint32_t)modem_info->network.cellid_dec) ||
   2a2fc:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
   2a300:	e9d3 0100 	ldrd	r0, r1, [r3]
   2a304:	f7f2 fd30 	bl	1cd68 <__aeabi_d2uiz>
	    json_add_num_cs(data_obj, NRF_CLOUD_JSON_CELL_ID_KEY,
   2a308:	f7f2 f9dc 	bl	1c6c4 <__aeabi_ui2d>
   2a30c:	4602      	mov	r2, r0
   2a30e:	460b      	mov	r3, r1
   2a310:	4628      	mov	r0, r5
   2a312:	4915      	ldr	r1, [pc, #84]	; (2a368 <nrf_cloud_json_add_modem_info+0x124>)
   2a314:	f015 f966 	bl	3f5e4 <json_add_num_cs>
		modem_info->network.area_code.value) ||
   2a318:	b988      	cbnz	r0, 2a33e <nrf_cloud_json_add_modem_info+0xfa>
		RSRP_ADJ(modem_info->network.rsrp.value))) {
   2a31a:	f8bd 3620 	ldrh.w	r3, [sp, #1568]	; 0x620
   2a31e:	2b00      	cmp	r3, #0
   2a320:	bf0c      	ite	eq
   2a322:	208c      	moveq	r0, #140	; 0x8c
   2a324:	208d      	movne	r0, #141	; 0x8d
	    json_add_num_cs(data_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRP,
   2a326:	1a18      	subs	r0, r3, r0
   2a328:	f7f2 f9dc 	bl	1c6e4 <__aeabi_i2d>
   2a32c:	4602      	mov	r2, r0
   2a32e:	460b      	mov	r3, r1
   2a330:	4628      	mov	r0, r5
   2a332:	490e      	ldr	r1, [pc, #56]	; (2a36c <nrf_cloud_json_add_modem_info+0x128>)
   2a334:	f015 f956 	bl	3f5e4 <json_add_num_cs>
		(uint32_t)modem_info->network.cellid_dec) ||
   2a338:	4604      	mov	r4, r0
   2a33a:	2800      	cmp	r0, #0
   2a33c:	d09f      	beq.n	2a27e <nrf_cloud_json_add_modem_info+0x3a>
		return -ENOMEM;
   2a33e:	f06f 040b 	mvn.w	r4, #11
   2a342:	e79c      	b.n	2a27e <nrf_cloud_json_add_modem_info+0x3a>
		LOG_ERR("Could not obtain cell information, error: %d",
   2a344:	4602      	mov	r2, r0
   2a346:	2145      	movs	r1, #69	; 0x45
   2a348:	4809      	ldr	r0, [pc, #36]	; (2a370 <nrf_cloud_json_add_modem_info+0x12c>)
   2a34a:	e796      	b.n	2a27a <nrf_cloud_json_add_modem_info+0x36>
   2a34c:	00047b2c 	.word	0x00047b2c
   2a350:	0004409e 	.word	0x0004409e
   2a354:	00047c12 	.word	0x00047c12
   2a358:	00047c49 	.word	0x00047c49
   2a35c:	000461c9 	.word	0x000461c9
   2a360:	000461d0 	.word	0x000461d0
   2a364:	00047cb6 	.word	0x00047cb6
   2a368:	00047cba 	.word	0x00047cba
   2a36c:	000460d0 	.word	0x000460d0
   2a370:	00047c84 	.word	0x00047c84

0002a374 <nrf_cloud_decode_requested_state>:
{
   2a374:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a376:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   2a378:	460e      	mov	r6, r1
   2a37a:	b951      	cbnz	r1, 2a392 <nrf_cloud_decode_requested_state+0x1e>
   2a37c:	4946      	ldr	r1, [pc, #280]	; (2a498 <nrf_cloud_decode_requested_state+0x124>)
   2a37e:	4847      	ldr	r0, [pc, #284]	; (2a49c <nrf_cloud_decode_requested_state+0x128>)
   2a380:	f44f 72bc 	mov.w	r2, #376	; 0x178
   2a384:	f012 fb82 	bl	3ca8c <assert_print>
   2a388:	f44f 71bc 	mov.w	r1, #376	; 0x178
   2a38c:	4842      	ldr	r0, [pc, #264]	; (2a498 <nrf_cloud_decode_requested_state+0x124>)
   2a38e:	f012 fb76 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2a392:	b954      	cbnz	r4, 2a3aa <nrf_cloud_decode_requested_state+0x36>
   2a394:	4940      	ldr	r1, [pc, #256]	; (2a498 <nrf_cloud_decode_requested_state+0x124>)
   2a396:	4841      	ldr	r0, [pc, #260]	; (2a49c <nrf_cloud_decode_requested_state+0x128>)
   2a398:	f240 1279 	movw	r2, #377	; 0x179
   2a39c:	f012 fb76 	bl	3ca8c <assert_print>
   2a3a0:	f240 1179 	movw	r1, #377	; 0x179
   2a3a4:	483c      	ldr	r0, [pc, #240]	; (2a498 <nrf_cloud_decode_requested_state+0x124>)
   2a3a6:	f012 fb6a 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2a3aa:	6863      	ldr	r3, [r4, #4]
   2a3ac:	b953      	cbnz	r3, 2a3c4 <nrf_cloud_decode_requested_state+0x50>
   2a3ae:	493a      	ldr	r1, [pc, #232]	; (2a498 <nrf_cloud_decode_requested_state+0x124>)
   2a3b0:	483a      	ldr	r0, [pc, #232]	; (2a49c <nrf_cloud_decode_requested_state+0x128>)
   2a3b2:	f44f 72bd 	mov.w	r2, #378	; 0x17a
   2a3b6:	f012 fb69 	bl	3ca8c <assert_print>
   2a3ba:	f44f 71bd 	mov.w	r1, #378	; 0x17a
   2a3be:	4836      	ldr	r0, [pc, #216]	; (2a498 <nrf_cloud_decode_requested_state+0x124>)
   2a3c0:	f012 fb5d 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2a3c4:	6823      	ldr	r3, [r4, #0]
   2a3c6:	b953      	cbnz	r3, 2a3de <nrf_cloud_decode_requested_state+0x6a>
   2a3c8:	4933      	ldr	r1, [pc, #204]	; (2a498 <nrf_cloud_decode_requested_state+0x124>)
   2a3ca:	4834      	ldr	r0, [pc, #208]	; (2a49c <nrf_cloud_decode_requested_state+0x128>)
   2a3cc:	f240 127b 	movw	r2, #379	; 0x17b
   2a3d0:	f012 fb5c 	bl	3ca8c <assert_print>
   2a3d4:	f240 117b 	movw	r1, #379	; 0x17b
   2a3d8:	482f      	ldr	r0, [pc, #188]	; (2a498 <nrf_cloud_decode_requested_state+0x124>)
   2a3da:	f012 fb50 	bl	3ca7e <assert_post_action>
	root_obj = cJSON_Parse(input->ptr);
   2a3de:	6860      	ldr	r0, [r4, #4]
   2a3e0:	f015 fbab 	bl	3fb3a <cJSON_Parse>
	if (root_obj == NULL) {
   2a3e4:	4605      	mov	r5, r0
   2a3e6:	b938      	cbnz	r0, 2a3f8 <nrf_cloud_decode_requested_state+0x84>
		LOG_ERR("cJSON_Parse failed: %s",
   2a3e8:	2145      	movs	r1, #69	; 0x45
   2a3ea:	6862      	ldr	r2, [r4, #4]
   2a3ec:	482c      	ldr	r0, [pc, #176]	; (2a4a0 <nrf_cloud_decode_requested_state+0x12c>)
   2a3ee:	f012 fb87 	bl	3cb00 <z_log_minimal_printk>
		return -ENOENT;
   2a3f2:	f06f 0401 	mvn.w	r4, #1
   2a3f6:	e010      	b.n	2a41a <nrf_cloud_decode_requested_state+0xa6>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2a3f8:	a901      	add	r1, sp, #4
   2a3fa:	f7ff fe75 	bl	2a0e8 <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, JSON_KEY_TOPIC_PRFX);
   2a3fe:	4929      	ldr	r1, [pc, #164]	; (2a4a4 <nrf_cloud_decode_requested_state+0x130>)
   2a400:	9801      	ldr	r0, [sp, #4]
   2a402:	f015 f919 	bl	3f638 <json_object_decode>
	if (topic_prefix_obj != NULL) {
   2a406:	b158      	cbz	r0, 2a420 <nrf_cloud_decode_requested_state+0xac>
		nct_set_topic_prefix(topic_prefix_obj->valuestring);
   2a408:	6900      	ldr	r0, [r0, #16]
   2a40a:	f001 fe7d 	bl	2c108 <nct_set_topic_prefix>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2a40e:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   2a410:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2a412:	7033      	strb	r3, [r6, #0]
		cJSON_Delete(root_obj);
   2a414:	f007 fda2 	bl	31f5c <cJSON_Delete>
		return 0;
   2a418:	2400      	movs	r4, #0
}
   2a41a:	4620      	mov	r0, r4
   2a41c:	b002      	add	sp, #8
   2a41e:	bd70      	pop	{r4, r5, r6, pc}
	pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   2a420:	4921      	ldr	r1, [pc, #132]	; (2a4a8 <nrf_cloud_decode_requested_state+0x134>)
   2a422:	9801      	ldr	r0, [sp, #4]
   2a424:	f015 f908 	bl	3f638 <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2a428:	4920      	ldr	r1, [pc, #128]	; (2a4ac <nrf_cloud_decode_requested_state+0x138>)
   2a42a:	f015 f905 	bl	3f638 <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   2a42e:	b110      	cbz	r0, 2a436 <nrf_cloud_decode_requested_state+0xc2>
   2a430:	68c3      	ldr	r3, [r0, #12]
   2a432:	2b10      	cmp	r3, #16
   2a434:	d014      	beq.n	2a460 <nrf_cloud_decode_requested_state+0xec>
		if (cJSON_HasObjectItem(desired_obj, JSON_KEY_CFG) == false) {
   2a436:	491e      	ldr	r1, [pc, #120]	; (2a4b0 <nrf_cloud_decode_requested_state+0x13c>)
   2a438:	9801      	ldr	r0, [sp, #4]
   2a43a:	f015 fb96 	bl	3fb6a <cJSON_HasObjectItem>
   2a43e:	b958      	cbnz	r0, 2a458 <nrf_cloud_decode_requested_state+0xe4>
			LOG_WRN("Unhandled data received from nRF Cloud.");
   2a440:	2157      	movs	r1, #87	; 0x57
   2a442:	481c      	ldr	r0, [pc, #112]	; (2a4b4 <nrf_cloud_decode_requested_state+0x140>)
   2a444:	f012 fb5c 	bl	3cb00 <z_log_minimal_printk>
			LOG_INF("Ensure device firmware is up to date.");
   2a448:	2149      	movs	r1, #73	; 0x49
   2a44a:	481b      	ldr	r0, [pc, #108]	; (2a4b8 <nrf_cloud_decode_requested_state+0x144>)
   2a44c:	f012 fb58 	bl	3cb00 <z_log_minimal_printk>
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
   2a450:	2149      	movs	r1, #73	; 0x49
   2a452:	481a      	ldr	r0, [pc, #104]	; (2a4bc <nrf_cloud_decode_requested_state+0x148>)
   2a454:	f012 fb54 	bl	3cb00 <z_log_minimal_printk>
		cJSON_Delete(root_obj);
   2a458:	4628      	mov	r0, r5
   2a45a:	f007 fd7f 	bl	31f5c <cJSON_Delete>
   2a45e:	e7c8      	b.n	2a3f2 <nrf_cloud_decode_requested_state+0x7e>
	const char *state_str = pairing_state_obj->valuestring;
   2a460:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   2a462:	4817      	ldr	r0, [pc, #92]	; (2a4c0 <nrf_cloud_decode_requested_state+0x14c>)
   2a464:	f7f2 feed 	bl	1d242 <strlen>
   2a468:	4915      	ldr	r1, [pc, #84]	; (2a4c0 <nrf_cloud_decode_requested_state+0x14c>)
   2a46a:	4602      	mov	r2, r0
   2a46c:	4620      	mov	r0, r4
   2a46e:	f017 f9b4 	bl	417da <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   2a472:	4604      	mov	r4, r0
   2a474:	b928      	cbnz	r0, 2a482 <nrf_cloud_decode_requested_state+0x10e>
		(*requested_state) = STATE_UA_PIN_WAIT;
   2a476:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   2a478:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_WAIT;
   2a47a:	7033      	strb	r3, [r6, #0]
	cJSON_Delete(root_obj);
   2a47c:	f007 fd6e 	bl	31f5c <cJSON_Delete>
	return 0;
   2a480:	e7cb      	b.n	2a41a <nrf_cloud_decode_requested_state+0xa6>
		LOG_ERR("Deprecated state. Delete device from nRF Cloud and update device with JITP certificates.");
   2a482:	2145      	movs	r1, #69	; 0x45
   2a484:	480f      	ldr	r0, [pc, #60]	; (2a4c4 <nrf_cloud_decode_requested_state+0x150>)
   2a486:	f012 fb3b 	bl	3cb00 <z_log_minimal_printk>
		cJSON_Delete(root_obj);
   2a48a:	4628      	mov	r0, r5
   2a48c:	f007 fd66 	bl	31f5c <cJSON_Delete>
		return -ENOTSUP;
   2a490:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2a494:	e7c1      	b.n	2a41a <nrf_cloud_decode_requested_state+0xa6>
   2a496:	bf00      	nop
   2a498:	00047b2c 	.word	0x00047b2c
   2a49c:	0004409e 	.word	0x0004409e
   2a4a0:	00047cc7 	.word	0x00047cc7
   2a4a4:	00047ce3 	.word	0x00047ce3
   2a4a8:	00047cfe 	.word	0x00047cfe
   2a4ac:	00047b6b 	.word	0x00047b6b
   2a4b0:	00047d06 	.word	0x00047d06
   2a4b4:	00047d0d 	.word	0x00047d0d
   2a4b8:	00047d3a 	.word	0x00047d3a
   2a4bc:	00047d65 	.word	0x00047d65
   2a4c0:	00047da5 	.word	0x00047da5
   2a4c4:	00047db4 	.word	0x00047db4

0002a4c8 <nrf_cloud_encode_config_response>:
{
   2a4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a4cc:	4604      	mov	r4, r0
   2a4ce:	4690      	mov	r8, r2
	__ASSERT_NO_MSG(output != NULL);
   2a4d0:	460e      	mov	r6, r1
   2a4d2:	b951      	cbnz	r1, 2a4ea <nrf_cloud_encode_config_response+0x22>
   2a4d4:	4943      	ldr	r1, [pc, #268]	; (2a5e4 <nrf_cloud_encode_config_response+0x11c>)
   2a4d6:	4844      	ldr	r0, [pc, #272]	; (2a5e8 <nrf_cloud_encode_config_response+0x120>)
   2a4d8:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   2a4dc:	f012 fad6 	bl	3ca8c <assert_print>
   2a4e0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   2a4e4:	483f      	ldr	r0, [pc, #252]	; (2a5e4 <nrf_cloud_encode_config_response+0x11c>)
   2a4e6:	f012 faca 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2a4ea:	2c00      	cmp	r4, #0
   2a4ec:	d14e      	bne.n	2a58c <nrf_cloud_encode_config_response+0xc4>
   2a4ee:	493d      	ldr	r1, [pc, #244]	; (2a5e4 <nrf_cloud_encode_config_response+0x11c>)
   2a4f0:	483d      	ldr	r0, [pc, #244]	; (2a5e8 <nrf_cloud_encode_config_response+0x120>)
   2a4f2:	f240 12c9 	movw	r2, #457	; 0x1c9
   2a4f6:	f012 fac9 	bl	3ca8c <assert_print>
   2a4fa:	f240 11c9 	movw	r1, #457	; 0x1c9
   2a4fe:	4839      	ldr	r0, [pc, #228]	; (2a5e4 <nrf_cloud_encode_config_response+0x11c>)
   2a500:	f012 fabd 	bl	3ca7e <assert_post_action>
		return -ESRCH; /* invalid input or no JSON parsed */
   2a504:	f06f 0402 	mvn.w	r4, #2
   2a508:	e068      	b.n	2a5dc <nrf_cloud_encode_config_response+0x114>
	root_obj = cJSON_CreateObject();
   2a50a:	f007 fde9 	bl	320e0 <cJSON_CreateObject>
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   2a50e:	4937      	ldr	r1, [pc, #220]	; (2a5ec <nrf_cloud_encode_config_response+0x124>)
	root_obj = cJSON_CreateObject();
   2a510:	4680      	mov	r8, r0
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   2a512:	f015 fbfd 	bl	3fd10 <cJSON_AddObjectToObjectCS>
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2a516:	4936      	ldr	r1, [pc, #216]	; (2a5f0 <nrf_cloud_encode_config_response+0x128>)
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   2a518:	4681      	mov	r9, r0
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2a51a:	4640      	mov	r0, r8
   2a51c:	f015 fbf8 	bl	3fd10 <cJSON_AddObjectToObjectCS>
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   2a520:	4934      	ldr	r1, [pc, #208]	; (2a5f4 <nrf_cloud_encode_config_response+0x12c>)
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2a522:	4604      	mov	r4, r0
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   2a524:	4648      	mov	r0, r9
   2a526:	f015 f88b 	bl	3f640 <json_add_null_cs>
   2a52a:	b148      	cbz	r0, 2a540 <nrf_cloud_encode_config_response+0x78>
		cJSON_Delete(root_obj);
   2a52c:	4640      	mov	r0, r8
   2a52e:	f007 fd15 	bl	31f5c <cJSON_Delete>
		cJSON_Delete(config_obj);
   2a532:	4638      	mov	r0, r7
   2a534:	f007 fd12 	bl	31f5c <cJSON_Delete>
		cJSON_Delete(state_obj);
   2a538:	4628      	mov	r0, r5
		cJSON_Delete(root_obj);
   2a53a:	f007 fd0f 	bl	31f5c <cJSON_Delete>
	if (buffer == NULL) {
   2a53e:	e01a      	b.n	2a576 <nrf_cloud_encode_config_response+0xae>
	    json_add_obj_cs(reported_obj, JSON_KEY_CFG, config_obj)) {
   2a540:	4620      	mov	r0, r4
   2a542:	463a      	mov	r2, r7
   2a544:	492b      	ldr	r1, [pc, #172]	; (2a5f4 <nrf_cloud_encode_config_response+0x12c>)
   2a546:	f015 f85a 	bl	3f5fe <json_add_obj_cs>
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   2a54a:	4604      	mov	r4, r0
   2a54c:	2800      	cmp	r0, #0
   2a54e:	d1ed      	bne.n	2a52c <nrf_cloud_encode_config_response+0x64>
	cJSON_Delete(state_obj);
   2a550:	4628      	mov	r0, r5
   2a552:	f007 fd03 	bl	31f5c <cJSON_Delete>
	state_obj = cJSON_CreateObject();
   2a556:	f007 fdc3 	bl	320e0 <cJSON_CreateObject>
	if (state_obj) {
   2a55a:	4607      	mov	r7, r0
   2a55c:	b170      	cbz	r0, 2a57c <nrf_cloud_encode_config_response+0xb4>
		(void)json_add_obj_cs(state_obj, JSON_KEY_STATE, root_obj);
   2a55e:	4642      	mov	r2, r8
   2a560:	4925      	ldr	r1, [pc, #148]	; (2a5f8 <nrf_cloud_encode_config_response+0x130>)
   2a562:	f015 f84c 	bl	3f5fe <json_add_obj_cs>
		buffer = cJSON_PrintUnformatted(state_obj);
   2a566:	4638      	mov	r0, r7
   2a568:	f015 faeb 	bl	3fb42 <cJSON_PrintUnformatted>
   2a56c:	4605      	mov	r5, r0
		cJSON_Delete(state_obj);
   2a56e:	4638      	mov	r0, r7
   2a570:	f007 fcf4 	bl	31f5c <cJSON_Delete>
	if (buffer == NULL) {
   2a574:	b925      	cbnz	r5, 2a580 <nrf_cloud_encode_config_response+0xb8>
		return -ENOMEM;
   2a576:	f06f 040b 	mvn.w	r4, #11
   2a57a:	e02f      	b.n	2a5dc <nrf_cloud_encode_config_response+0x114>
		cJSON_Delete(root_obj);
   2a57c:	4640      	mov	r0, r8
   2a57e:	e7dc      	b.n	2a53a <nrf_cloud_encode_config_response+0x72>
	output->len = strlen(buffer);
   2a580:	4628      	mov	r0, r5
	output->ptr = buffer;
   2a582:	6075      	str	r5, [r6, #4]
	output->len = strlen(buffer);
   2a584:	f7f2 fe5d 	bl	1d242 <strlen>
   2a588:	6030      	str	r0, [r6, #0]
	return 0;
   2a58a:	e027      	b.n	2a5dc <nrf_cloud_encode_config_response+0x114>
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   2a58c:	6860      	ldr	r0, [r4, #4]
   2a58e:	f015 fad4 	bl	3fb3a <cJSON_Parse>
	if (input_obj == NULL) {
   2a592:	4604      	mov	r4, r0
   2a594:	2800      	cmp	r0, #0
   2a596:	d0b5      	beq.n	2a504 <nrf_cloud_encode_config_response+0x3c>
	state_obj = cJSON_DetachItemFromObject(input_obj, JSON_KEY_STATE);
   2a598:	4917      	ldr	r1, [pc, #92]	; (2a5f8 <nrf_cloud_encode_config_response+0x130>)
   2a59a:	f015 fb11 	bl	3fbc0 <cJSON_DetachItemFromObject>
	config_obj = cJSON_DetachItemFromObject(
   2a59e:	1e05      	subs	r5, r0, #0
   2a5a0:	bf14      	ite	ne
   2a5a2:	4628      	movne	r0, r5
   2a5a4:	4620      	moveq	r0, r4
   2a5a6:	4913      	ldr	r1, [pc, #76]	; (2a5f4 <nrf_cloud_encode_config_response+0x12c>)
   2a5a8:	f015 fb0a 	bl	3fbc0 <cJSON_DetachItemFromObject>
   2a5ac:	4607      	mov	r7, r0
	cJSON_Delete(input_obj);
   2a5ae:	4620      	mov	r0, r4
   2a5b0:	f007 fcd4 	bl	31f5c <cJSON_Delete>
	if (has_config) {
   2a5b4:	f1b8 0f00 	cmp.w	r8, #0
   2a5b8:	d004      	beq.n	2a5c4 <nrf_cloud_encode_config_response+0xfc>
		*has_config = (config_obj != NULL);
   2a5ba:	1e3b      	subs	r3, r7, #0
   2a5bc:	bf18      	it	ne
   2a5be:	2301      	movne	r3, #1
   2a5c0:	f888 3000 	strb.w	r3, [r8]
	if ((state_obj == NULL) || (config_obj == NULL)) {
   2a5c4:	b10d      	cbz	r5, 2a5ca <nrf_cloud_encode_config_response+0x102>
   2a5c6:	2f00      	cmp	r7, #0
   2a5c8:	d19f      	bne.n	2a50a <nrf_cloud_encode_config_response+0x42>
		output->ptr = NULL;
   2a5ca:	2400      	movs	r4, #0
		cJSON_Delete(state_obj);
   2a5cc:	4628      	mov	r0, r5
   2a5ce:	f007 fcc5 	bl	31f5c <cJSON_Delete>
		cJSON_Delete(config_obj);
   2a5d2:	4638      	mov	r0, r7
   2a5d4:	f007 fcc2 	bl	31f5c <cJSON_Delete>
		output->len = 0;
   2a5d8:	e9c6 4400 	strd	r4, r4, [r6]
}
   2a5dc:	4620      	mov	r0, r4
   2a5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a5e2:	bf00      	nop
   2a5e4:	00047b2c 	.word	0x00047b2c
   2a5e8:	0004409e 	.word	0x0004409e
   2a5ec:	00047b71 	.word	0x00047b71
   2a5f0:	00047cbe 	.word	0x00047cbe
   2a5f4:	00047d06 	.word	0x00047d06
   2a5f8:	00047b6b 	.word	0x00047b6b

0002a5fc <nrf_cloud_encode_state>:
{
   2a5fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   2a600:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(output != NULL);
   2a602:	4688      	mov	r8, r1
{
   2a604:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(output != NULL);
   2a606:	b951      	cbnz	r1, 2a61e <nrf_cloud_encode_state+0x22>
   2a608:	4949      	ldr	r1, [pc, #292]	; (2a730 <nrf_cloud_encode_state+0x134>)
   2a60a:	484a      	ldr	r0, [pc, #296]	; (2a734 <nrf_cloud_encode_state+0x138>)
   2a60c:	f240 220f 	movw	r2, #527	; 0x20f
   2a610:	f012 fa3c 	bl	3ca8c <assert_print>
   2a614:	f240 210f 	movw	r1, #527	; 0x20f
   2a618:	4845      	ldr	r0, [pc, #276]	; (2a730 <nrf_cloud_encode_state+0x134>)
   2a61a:	f012 fa30 	bl	3ca7e <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   2a61e:	f007 fd5f 	bl	320e0 <cJSON_CreateObject>
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   2a622:	4945      	ldr	r1, [pc, #276]	; (2a738 <nrf_cloud_encode_state+0x13c>)
	cJSON *root_obj = cJSON_CreateObject();
   2a624:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   2a626:	f015 fb73 	bl	3fd10 <cJSON_AddObjectToObjectCS>
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, JSON_KEY_REP);
   2a62a:	4944      	ldr	r1, [pc, #272]	; (2a73c <nrf_cloud_encode_state+0x140>)
   2a62c:	f015 fb70 	bl	3fd10 <cJSON_AddObjectToObjectCS>
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   2a630:	4943      	ldr	r1, [pc, #268]	; (2a740 <nrf_cloud_encode_state+0x144>)
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, JSON_KEY_REP);
   2a632:	4683      	mov	fp, r0
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   2a634:	f015 fb6c 	bl	3fd10 <cJSON_AddObjectToObjectCS>
	cJSON *connection_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_CONN);
   2a638:	4942      	ldr	r1, [pc, #264]	; (2a744 <nrf_cloud_encode_state+0x148>)
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   2a63a:	4681      	mov	r9, r0
	cJSON *connection_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_CONN);
   2a63c:	4658      	mov	r0, fp
   2a63e:	f015 fb67 	bl	3fd10 <cJSON_AddObjectToObjectCS>
   2a642:	4682      	mov	sl, r0
	if (!pairing_obj || !connection_obj) {
   2a644:	f1b9 0f00 	cmp.w	r9, #0
   2a648:	d000      	beq.n	2a64c <nrf_cloud_encode_state+0x50>
   2a64a:	b928      	cbnz	r0, 2a658 <nrf_cloud_encode_state+0x5c>
			cJSON_Delete(root_obj);
   2a64c:	4638      	mov	r0, r7
   2a64e:	f007 fc85 	bl	31f5c <cJSON_Delete>
		return -ENOMEM;
   2a652:	f06f 000b 	mvn.w	r0, #11
   2a656:	e008      	b.n	2a66a <nrf_cloud_encode_state+0x6e>
	switch (reported_state) {
   2a658:	2c06      	cmp	r4, #6
   2a65a:	d009      	beq.n	2a670 <nrf_cloud_encode_state+0x74>
   2a65c:	2c07      	cmp	r4, #7
   2a65e:	d032      	beq.n	2a6c6 <nrf_cloud_encode_state+0xca>
		cJSON_Delete(root_obj);
   2a660:	4638      	mov	r0, r7
   2a662:	f007 fc7b 	bl	31f5c <cJSON_Delete>
		return -ENOTSUP;
   2a666:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2a66a:	b006      	add	sp, #24
   2a66c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, DUA_PIN_STR);
   2a670:	4a35      	ldr	r2, [pc, #212]	; (2a748 <nrf_cloud_encode_state+0x14c>)
   2a672:	4931      	ldr	r1, [pc, #196]	; (2a738 <nrf_cloud_encode_state+0x13c>)
   2a674:	4648      	mov	r0, r9
   2a676:	f014 ffd1 	bl	3f61c <json_add_str_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_TOPICS);
   2a67a:	4934      	ldr	r1, [pc, #208]	; (2a74c <nrf_cloud_encode_state+0x150>)
   2a67c:	4648      	mov	r0, r9
   2a67e:	f014 ffdf 	bl	3f640 <json_add_null_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2a682:	4933      	ldr	r1, [pc, #204]	; (2a750 <nrf_cloud_encode_state+0x154>)
   2a684:	4648      	mov	r0, r9
   2a686:	f014 ffdb 	bl	3f640 <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_STAGE);
   2a68a:	4932      	ldr	r1, [pc, #200]	; (2a754 <nrf_cloud_encode_state+0x158>)
   2a68c:	4658      	mov	r0, fp
   2a68e:	f014 ffd7 	bl	3f640 <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_TOPIC_PRFX);
   2a692:	4931      	ldr	r1, [pc, #196]	; (2a758 <nrf_cloud_encode_state+0x15c>)
   2a694:	4658      	mov	r0, fp
   2a696:	f014 ffd3 	bl	3f640 <json_add_null_cs>
		ret += json_add_null_cs(connection_obj, JSON_KEY_KEEPALIVE);
   2a69a:	4650      	mov	r0, sl
   2a69c:	492f      	ldr	r1, [pc, #188]	; (2a75c <nrf_cloud_encode_state+0x160>)
   2a69e:	f014 ffcf 	bl	3f640 <json_add_null_cs>
	buffer = cJSON_PrintUnformatted(root_obj);
   2a6a2:	4638      	mov	r0, r7
   2a6a4:	f015 fa4d 	bl	3fb42 <cJSON_PrintUnformatted>
   2a6a8:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   2a6aa:	4638      	mov	r0, r7
   2a6ac:	f007 fc56 	bl	31f5c <cJSON_Delete>
	if (buffer == NULL) {
   2a6b0:	2c00      	cmp	r4, #0
   2a6b2:	d0ce      	beq.n	2a652 <nrf_cloud_encode_state+0x56>
	output->len = strlen(buffer);
   2a6b4:	4620      	mov	r0, r4
	output->ptr = buffer;
   2a6b6:	f8c8 4004 	str.w	r4, [r8, #4]
	output->len = strlen(buffer);
   2a6ba:	f7f2 fdc2 	bl	1d242 <strlen>
   2a6be:	f8c8 0000 	str.w	r0, [r8]
	return 0;
   2a6c2:	2000      	movs	r0, #0
   2a6c4:	e7d1      	b.n	2a66a <nrf_cloud_encode_state+0x6e>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, NULL, &m_endp);
   2a6c6:	ab04      	add	r3, sp, #16
   2a6c8:	2200      	movs	r2, #0
   2a6ca:	4669      	mov	r1, sp
   2a6cc:	a802      	add	r0, sp, #8
   2a6ce:	f002 f879 	bl	2c7c4 <nct_dc_endpoint_get>
		ret += json_add_str_cs(reported_obj, JSON_KEY_TOPIC_PRFX, m_endp.ptr);
   2a6d2:	9a05      	ldr	r2, [sp, #20]
   2a6d4:	4920      	ldr	r1, [pc, #128]	; (2a758 <nrf_cloud_encode_state+0x15c>)
   2a6d6:	4658      	mov	r0, fp
   2a6d8:	f014 ffa0 	bl	3f61c <json_add_str_cs>
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   2a6dc:	4a20      	ldr	r2, [pc, #128]	; (2a760 <nrf_cloud_encode_state+0x164>)
		ret += json_add_str_cs(reported_obj, JSON_KEY_TOPIC_PRFX, m_endp.ptr);
   2a6de:	4604      	mov	r4, r0
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   2a6e0:	4915      	ldr	r1, [pc, #84]	; (2a738 <nrf_cloud_encode_state+0x13c>)
   2a6e2:	4648      	mov	r0, r9
   2a6e4:	f014 ff9a 	bl	3f61c <json_add_str_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2a6e8:	4919      	ldr	r1, [pc, #100]	; (2a750 <nrf_cloud_encode_state+0x154>)
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   2a6ea:	4404      	add	r4, r0
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2a6ec:	4648      	mov	r0, r9
   2a6ee:	f014 ffa7 	bl	3f640 <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   2a6f2:	491c      	ldr	r1, [pc, #112]	; (2a764 <nrf_cloud_encode_state+0x168>)
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2a6f4:	4404      	add	r4, r0
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   2a6f6:	4658      	mov	r0, fp
   2a6f8:	f014 ffa2 	bl	3f640 <json_add_null_cs>
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   2a6fc:	4b1a      	ldr	r3, [pc, #104]	; (2a768 <nrf_cloud_encode_state+0x16c>)
   2a6fe:	2200      	movs	r2, #0
   2a700:	4916      	ldr	r1, [pc, #88]	; (2a75c <nrf_cloud_encode_state+0x160>)
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   2a702:	4404      	add	r4, r0
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   2a704:	4650      	mov	r0, sl
   2a706:	f014 ff6d 	bl	3f5e4 <json_add_num_cs>
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   2a70a:	4910      	ldr	r1, [pc, #64]	; (2a74c <nrf_cloud_encode_state+0x150>)
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   2a70c:	4404      	add	r4, r0
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   2a70e:	4648      	mov	r0, r9
   2a710:	f015 fafe 	bl	3fd10 <cJSON_AddObjectToObjectCS>
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   2a714:	9a03      	ldr	r2, [sp, #12]
   2a716:	4915      	ldr	r1, [pc, #84]	; (2a76c <nrf_cloud_encode_state+0x170>)
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   2a718:	4605      	mov	r5, r0
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   2a71a:	f014 ff7f 	bl	3f61c <json_add_str_cs>
		ret += json_add_str_cs(topics_obj, JSON_KEY_CLOUD_TO_DEVICE, rx_endp.ptr);
   2a71e:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   2a720:	4404      	add	r4, r0
		ret += json_add_str_cs(topics_obj, JSON_KEY_CLOUD_TO_DEVICE, rx_endp.ptr);
   2a722:	4913      	ldr	r1, [pc, #76]	; (2a770 <nrf_cloud_encode_state+0x174>)
   2a724:	4628      	mov	r0, r5
   2a726:	f014 ff79 	bl	3f61c <json_add_str_cs>
		if (ret != 0) {
   2a72a:	42c4      	cmn	r4, r0
   2a72c:	d0b9      	beq.n	2a6a2 <nrf_cloud_encode_state+0xa6>
   2a72e:	e78d      	b.n	2a64c <nrf_cloud_encode_state+0x50>
   2a730:	00047b2c 	.word	0x00047b2c
   2a734:	0004409e 	.word	0x0004409e
   2a738:	00047b6b 	.word	0x00047b6b
   2a73c:	00047cbe 	.word	0x00047cbe
   2a740:	00047cfe 	.word	0x00047cfe
   2a744:	00043e8d 	.word	0x00043e8d
   2a748:	00047da5 	.word	0x00047da5
   2a74c:	00047e12 	.word	0x00047e12
   2a750:	00047d06 	.word	0x00047d06
   2a754:	00047e19 	.word	0x00047e19
   2a758:	00047ce3 	.word	0x00047ce3
   2a75c:	00047e1f 	.word	0x00047e1f
   2a760:	00047e29 	.word	0x00047e29
   2a764:	00047e30 	.word	0x00047e30
   2a768:	4092c000 	.word	0x4092c000
   2a76c:	00047e3e 	.word	0x00047e3e
   2a770:	00047e42 	.word	0x00047e42

0002a774 <nrf_cloud_decode_data_endpoint>:
{
   2a774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a778:	b085      	sub	sp, #20
   2a77a:	460e      	mov	r6, r1
   2a77c:	4690      	mov	r8, r2
   2a77e:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(input != NULL);
   2a780:	4604      	mov	r4, r0
{
   2a782:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(input != NULL);
   2a786:	b950      	cbnz	r0, 2a79e <nrf_cloud_decode_data_endpoint+0x2a>
   2a788:	4967      	ldr	r1, [pc, #412]	; (2a928 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a78a:	4868      	ldr	r0, [pc, #416]	; (2a92c <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a78c:	f240 2266 	movw	r2, #614	; 0x266
   2a790:	f012 f97c 	bl	3ca8c <assert_print>
   2a794:	f240 2166 	movw	r1, #614	; 0x266
   2a798:	4863      	ldr	r0, [pc, #396]	; (2a928 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a79a:	f012 f970 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2a79e:	6863      	ldr	r3, [r4, #4]
   2a7a0:	b953      	cbnz	r3, 2a7b8 <nrf_cloud_decode_data_endpoint+0x44>
   2a7a2:	4961      	ldr	r1, [pc, #388]	; (2a928 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7a4:	4861      	ldr	r0, [pc, #388]	; (2a92c <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a7a6:	f240 2267 	movw	r2, #615	; 0x267
   2a7aa:	f012 f96f 	bl	3ca8c <assert_print>
   2a7ae:	f240 2167 	movw	r1, #615	; 0x267
   2a7b2:	485d      	ldr	r0, [pc, #372]	; (2a928 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7b4:	f012 f963 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2a7b8:	6823      	ldr	r3, [r4, #0]
   2a7ba:	b953      	cbnz	r3, 2a7d2 <nrf_cloud_decode_data_endpoint+0x5e>
   2a7bc:	495a      	ldr	r1, [pc, #360]	; (2a928 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7be:	485b      	ldr	r0, [pc, #364]	; (2a92c <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a7c0:	f44f 721a 	mov.w	r2, #616	; 0x268
   2a7c4:	f012 f962 	bl	3ca8c <assert_print>
   2a7c8:	f44f 711a 	mov.w	r1, #616	; 0x268
   2a7cc:	4856      	ldr	r0, [pc, #344]	; (2a928 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7ce:	f012 f956 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   2a7d2:	b956      	cbnz	r6, 2a7ea <nrf_cloud_decode_data_endpoint+0x76>
   2a7d4:	4954      	ldr	r1, [pc, #336]	; (2a928 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7d6:	4855      	ldr	r0, [pc, #340]	; (2a92c <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a7d8:	f240 2269 	movw	r2, #617	; 0x269
   2a7dc:	f012 f956 	bl	3ca8c <assert_print>
   2a7e0:	f240 2169 	movw	r1, #617	; 0x269
   2a7e4:	4850      	ldr	r0, [pc, #320]	; (2a928 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7e6:	f012 f94a 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   2a7ea:	f1b8 0f00 	cmp.w	r8, #0
   2a7ee:	d10a      	bne.n	2a806 <nrf_cloud_decode_data_endpoint+0x92>
   2a7f0:	494d      	ldr	r1, [pc, #308]	; (2a928 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7f2:	484e      	ldr	r0, [pc, #312]	; (2a92c <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a7f4:	f240 226a 	movw	r2, #618	; 0x26a
   2a7f8:	f012 f948 	bl	3ca8c <assert_print>
   2a7fc:	f240 216a 	movw	r1, #618	; 0x26a
   2a800:	4849      	ldr	r0, [pc, #292]	; (2a928 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a802:	f012 f93c 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(bulk_endpoint != NULL);
   2a806:	b957      	cbnz	r7, 2a81e <nrf_cloud_decode_data_endpoint+0xaa>
   2a808:	4947      	ldr	r1, [pc, #284]	; (2a928 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a80a:	4848      	ldr	r0, [pc, #288]	; (2a92c <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a80c:	f240 226b 	movw	r2, #619	; 0x26b
   2a810:	f012 f93c 	bl	3ca8c <assert_print>
   2a814:	f240 216b 	movw	r1, #619	; 0x26b
   2a818:	4843      	ldr	r0, [pc, #268]	; (2a928 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a81a:	f012 f930 	bl	3ca7e <assert_post_action>
	cJSON *desired_obj = NULL;
   2a81e:	2300      	movs	r3, #0
	root_obj = cJSON_Parse(input->ptr);
   2a820:	6860      	ldr	r0, [r4, #4]
	cJSON *desired_obj = NULL;
   2a822:	9303      	str	r3, [sp, #12]
	root_obj = cJSON_Parse(input->ptr);
   2a824:	f015 f989 	bl	3fb3a <cJSON_Parse>
	if (root_obj == NULL) {
   2a828:	4605      	mov	r5, r0
   2a82a:	b318      	cbz	r0, 2a874 <nrf_cloud_decode_data_endpoint+0x100>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2a82c:	a903      	add	r1, sp, #12
   2a82e:	f7ff fc5b 	bl	2a0e8 <nrf_cloud_decode_desired_obj>
	if (m_endpoint != NULL) {
   2a832:	f1ba 0f00 	cmp.w	sl, #0
   2a836:	d020      	beq.n	2a87a <nrf_cloud_decode_data_endpoint+0x106>
		m_endpoint_obj = json_object_decode(
   2a838:	493d      	ldr	r1, [pc, #244]	; (2a930 <nrf_cloud_decode_data_endpoint+0x1bc>)
   2a83a:	9803      	ldr	r0, [sp, #12]
   2a83c:	f014 fefc 	bl	3f638 <json_object_decode>
   2a840:	4604      	mov	r4, r0
	cJSON *pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   2a842:	493c      	ldr	r1, [pc, #240]	; (2a934 <nrf_cloud_decode_data_endpoint+0x1c0>)
   2a844:	9803      	ldr	r0, [sp, #12]
   2a846:	f014 fef7 	bl	3f638 <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2a84a:	493b      	ldr	r1, [pc, #236]	; (2a938 <nrf_cloud_decode_data_endpoint+0x1c4>)
	cJSON *pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   2a84c:	4681      	mov	r9, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2a84e:	f014 fef3 	bl	3f638 <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, JSON_KEY_TOPICS);
   2a852:	493a      	ldr	r1, [pc, #232]	; (2a93c <nrf_cloud_decode_data_endpoint+0x1c8>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2a854:	4683      	mov	fp, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, JSON_KEY_TOPICS);
   2a856:	4648      	mov	r0, r9
   2a858:	f014 feee 	bl	3f638 <json_object_decode>
   2a85c:	4681      	mov	r9, r0
	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   2a85e:	f1bb 0f00 	cmp.w	fp, #0
   2a862:	d004      	beq.n	2a86e <nrf_cloud_decode_data_endpoint+0xfa>
   2a864:	b118      	cbz	r0, 2a86e <nrf_cloud_decode_data_endpoint+0xfa>
   2a866:	f8db 300c 	ldr.w	r3, [fp, #12]
   2a86a:	2b10      	cmp	r3, #16
   2a86c:	d007      	beq.n	2a87e <nrf_cloud_decode_data_endpoint+0x10a>
		cJSON_Delete(root_obj);
   2a86e:	4628      	mov	r0, r5
   2a870:	f007 fb74 	bl	31f5c <cJSON_Delete>
		return -ENOENT;
   2a874:	f06f 0401 	mvn.w	r4, #1
   2a878:	e03b      	b.n	2a8f2 <nrf_cloud_decode_data_endpoint+0x17e>
	cJSON *m_endpoint_obj = NULL;
   2a87a:	4654      	mov	r4, sl
   2a87c:	e7e1      	b.n	2a842 <nrf_cloud_decode_data_endpoint+0xce>
	return !strncmp(s1, s2, strlen(s2));
   2a87e:	4830      	ldr	r0, [pc, #192]	; (2a940 <nrf_cloud_decode_data_endpoint+0x1cc>)
	const char *state_str = pairing_state_obj->valuestring;
   2a880:	f8db b010 	ldr.w	fp, [fp, #16]
	return !strncmp(s1, s2, strlen(s2));
   2a884:	f7f2 fcdd 	bl	1d242 <strlen>
   2a888:	492d      	ldr	r1, [pc, #180]	; (2a940 <nrf_cloud_decode_data_endpoint+0x1cc>)
   2a88a:	4602      	mov	r2, r0
   2a88c:	4658      	mov	r0, fp
   2a88e:	f016 ffa4 	bl	417da <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   2a892:	2800      	cmp	r0, #0
   2a894:	d1eb      	bne.n	2a86e <nrf_cloud_decode_data_endpoint+0xfa>
	if (m_endpoint_obj != NULL) {
   2a896:	b14c      	cbz	r4, 2a8ac <nrf_cloud_decode_data_endpoint+0x138>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   2a898:	4620      	mov	r0, r4
   2a89a:	4651      	mov	r1, sl
   2a89c:	f014 fef1 	bl	3f682 <json_decode_and_alloc>
		if (err) {
   2a8a0:	4604      	mov	r4, r0
   2a8a2:	b118      	cbz	r0, 2a8ac <nrf_cloud_decode_data_endpoint+0x138>
			cJSON_Delete(root_obj);
   2a8a4:	4628      	mov	r0, r5
	cJSON_Delete(root_obj);
   2a8a6:	f007 fb59 	bl	31f5c <cJSON_Delete>
	return err;
   2a8aa:	e022      	b.n	2a8f2 <nrf_cloud_decode_data_endpoint+0x17e>
	cJSON *tx_obj = json_object_decode(topic_obj, JSON_KEY_DEVICE_TO_CLOUD);
   2a8ac:	4925      	ldr	r1, [pc, #148]	; (2a944 <nrf_cloud_decode_data_endpoint+0x1d0>)
   2a8ae:	4648      	mov	r0, r9
   2a8b0:	f014 fec2 	bl	3f638 <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   2a8b4:	4631      	mov	r1, r6
   2a8b6:	f014 fee4 	bl	3f682 <json_decode_and_alloc>
	if (err) {
   2a8ba:	4604      	mov	r4, r0
   2a8bc:	b140      	cbz	r0, 2a8d0 <nrf_cloud_decode_data_endpoint+0x15c>
		cJSON_Delete(root_obj);
   2a8be:	4628      	mov	r0, r5
   2a8c0:	f007 fb4c 	bl	31f5c <cJSON_Delete>
		LOG_ERR("could not decode topic for %s", JSON_KEY_DEVICE_TO_CLOUD);
   2a8c4:	4a1f      	ldr	r2, [pc, #124]	; (2a944 <nrf_cloud_decode_data_endpoint+0x1d0>)
		LOG_ERR("could not decode topic for %s", JSON_KEY_CLOUD_TO_DEVICE);
   2a8c6:	2145      	movs	r1, #69	; 0x45
   2a8c8:	481f      	ldr	r0, [pc, #124]	; (2a948 <nrf_cloud_decode_data_endpoint+0x1d4>)
   2a8ca:	f012 f919 	bl	3cb00 <z_log_minimal_printk>
		return err;
   2a8ce:	e010      	b.n	2a8f2 <nrf_cloud_decode_data_endpoint+0x17e>
	size_t bulk_ep_len_temp = tx_endpoint->len + sizeof(NRF_CLOUD_BULK_MSG_TOPIC);
   2a8d0:	6834      	ldr	r4, [r6, #0]
	bulk_endpoint->ptr = nrf_cloud_calloc(bulk_ep_len_temp, 1);
   2a8d2:	2101      	movs	r1, #1
	size_t bulk_ep_len_temp = tx_endpoint->len + sizeof(NRF_CLOUD_BULK_MSG_TOPIC);
   2a8d4:	3406      	adds	r4, #6
	bulk_endpoint->ptr = nrf_cloud_calloc(bulk_ep_len_temp, 1);
   2a8d6:	4620      	mov	r0, r4
   2a8d8:	f016 fd06 	bl	412e8 <k_calloc>
   2a8dc:	6078      	str	r0, [r7, #4]
	if (bulk_endpoint->ptr == NULL) {
   2a8de:	b960      	cbnz	r0, 2a8fa <nrf_cloud_decode_data_endpoint+0x186>
		cJSON_Delete(root_obj);
   2a8e0:	4628      	mov	r0, r5
   2a8e2:	f007 fb3b 	bl	31f5c <cJSON_Delete>
		LOG_ERR("Could not allocate memory for bulk topic");
   2a8e6:	2145      	movs	r1, #69	; 0x45
   2a8e8:	4818      	ldr	r0, [pc, #96]	; (2a94c <nrf_cloud_decode_data_endpoint+0x1d8>)
   2a8ea:	f012 f909 	bl	3cb00 <z_log_minimal_printk>
		return -ENOMEM;
   2a8ee:	f06f 040b 	mvn.w	r4, #11
}
   2a8f2:	4620      	mov	r0, r4
   2a8f4:	b005      	add	sp, #20
   2a8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bulk_endpoint->len = snprintk((char *)bulk_endpoint->ptr, bulk_ep_len_temp, "%s%s",
   2a8fa:	4b15      	ldr	r3, [pc, #84]	; (2a950 <nrf_cloud_decode_data_endpoint+0x1dc>)
   2a8fc:	4621      	mov	r1, r4
   2a8fe:	4a15      	ldr	r2, [pc, #84]	; (2a954 <nrf_cloud_decode_data_endpoint+0x1e0>)
   2a900:	9300      	str	r3, [sp, #0]
   2a902:	6873      	ldr	r3, [r6, #4]
   2a904:	f011 feec 	bl	3c6e0 <snprintk>
	cJSON *rx_obj = json_object_decode(topic_obj, JSON_KEY_CLOUD_TO_DEVICE);
   2a908:	4913      	ldr	r1, [pc, #76]	; (2a958 <nrf_cloud_decode_data_endpoint+0x1e4>)
	bulk_endpoint->len = snprintk((char *)bulk_endpoint->ptr, bulk_ep_len_temp, "%s%s",
   2a90a:	6038      	str	r0, [r7, #0]
	cJSON *rx_obj = json_object_decode(topic_obj, JSON_KEY_CLOUD_TO_DEVICE);
   2a90c:	4648      	mov	r0, r9
   2a90e:	f014 fe93 	bl	3f638 <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   2a912:	4641      	mov	r1, r8
   2a914:	f014 feb5 	bl	3f682 <json_decode_and_alloc>
	if (err) {
   2a918:	4604      	mov	r4, r0
		cJSON_Delete(root_obj);
   2a91a:	4628      	mov	r0, r5
	if (err) {
   2a91c:	2c00      	cmp	r4, #0
   2a91e:	d0c2      	beq.n	2a8a6 <nrf_cloud_decode_data_endpoint+0x132>
		cJSON_Delete(root_obj);
   2a920:	f007 fb1c 	bl	31f5c <cJSON_Delete>
		LOG_ERR("could not decode topic for %s", JSON_KEY_CLOUD_TO_DEVICE);
   2a924:	4a0c      	ldr	r2, [pc, #48]	; (2a958 <nrf_cloud_decode_data_endpoint+0x1e4>)
   2a926:	e7ce      	b.n	2a8c6 <nrf_cloud_decode_data_endpoint+0x152>
   2a928:	00047b2c 	.word	0x00047b2c
   2a92c:	0004409e 	.word	0x0004409e
   2a930:	00047ce3 	.word	0x00047ce3
   2a934:	00047cfe 	.word	0x00047cfe
   2a938:	00047b6b 	.word	0x00047b6b
   2a93c:	00047e12 	.word	0x00047e12
   2a940:	00047e29 	.word	0x00047e29
   2a944:	00047e3e 	.word	0x00047e3e
   2a948:	00047e46 	.word	0x00047e46
   2a94c:	00047e69 	.word	0x00047e69
   2a950:	00047e97 	.word	0x00047e97
   2a954:	0004a30e 	.word	0x0004a30e
   2a958:	00047e42 	.word	0x00047e42

0002a95c <json_send_to_cloud>:
{
   2a95c:	b530      	push	{r4, r5, lr}
	__ASSERT_NO_MSG(request != NULL);
   2a95e:	4604      	mov	r4, r0
{
   2a960:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(request != NULL);
   2a962:	b950      	cbnz	r0, 2a97a <json_send_to_cloud+0x1e>
   2a964:	491b      	ldr	r1, [pc, #108]	; (2a9d4 <json_send_to_cloud+0x78>)
   2a966:	481c      	ldr	r0, [pc, #112]	; (2a9d8 <json_send_to_cloud+0x7c>)
   2a968:	f44f 7230 	mov.w	r2, #704	; 0x2c0
   2a96c:	f012 f88e 	bl	3ca8c <assert_print>
   2a970:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   2a974:	4817      	ldr	r0, [pc, #92]	; (2a9d4 <json_send_to_cloud+0x78>)
   2a976:	f012 f882 	bl	3ca7e <assert_post_action>
	if (nfsm_get_current_state() != STATE_DC_CONNECTED) {
   2a97a:	f000 fdef 	bl	2b55c <nfsm_get_current_state>
   2a97e:	2809      	cmp	r0, #9
   2a980:	d125      	bne.n	2a9ce <json_send_to_cloud+0x72>
	msg_string = cJSON_PrintUnformatted(request);
   2a982:	4620      	mov	r0, r4
   2a984:	f015 f8dd 	bl	3fb42 <cJSON_PrintUnformatted>
	if (!msg_string) {
   2a988:	4605      	mov	r5, r0
   2a98a:	b940      	cbnz	r0, 2a99e <json_send_to_cloud+0x42>
		LOG_ERR("Could not allocate memory for request message");
   2a98c:	2145      	movs	r1, #69	; 0x45
   2a98e:	4813      	ldr	r0, [pc, #76]	; (2a9dc <json_send_to_cloud+0x80>)
   2a990:	f012 f8b6 	bl	3cb00 <z_log_minimal_printk>
		return -ENOMEM;
   2a994:	f06f 040b 	mvn.w	r4, #11
}
   2a998:	4620      	mov	r0, r4
   2a99a:	b007      	add	sp, #28
   2a99c:	bd30      	pop	{r4, r5, pc}
	struct nct_dc_data msg = {
   2a99e:	2214      	movs	r2, #20
   2a9a0:	2100      	movs	r1, #0
   2a9a2:	a801      	add	r0, sp, #4
   2a9a4:	f016 fd46 	bl	41434 <memset>
		.data.len = strlen(msg_string)
   2a9a8:	4628      	mov	r0, r5
   2a9aa:	f7f2 fc4a 	bl	1d242 <strlen>
	struct nct_dc_data msg = {
   2a9ae:	e9cd 0501 	strd	r0, r5, [sp, #4]
	err = nct_dc_send(&msg);
   2a9b2:	a801      	add	r0, sp, #4
   2a9b4:	f014 fecb 	bl	3f74e <nct_dc_send>
	if (err) {
   2a9b8:	4604      	mov	r4, r0
   2a9ba:	b120      	cbz	r0, 2a9c6 <json_send_to_cloud+0x6a>
		LOG_ERR("Failed to send request, error: %d", err);
   2a9bc:	4602      	mov	r2, r0
   2a9be:	2145      	movs	r1, #69	; 0x45
   2a9c0:	4807      	ldr	r0, [pc, #28]	; (2a9e0 <json_send_to_cloud+0x84>)
   2a9c2:	f012 f89d 	bl	3cb00 <z_log_minimal_printk>
	k_free(msg_string);
   2a9c6:	4628      	mov	r0, r5
   2a9c8:	f016 fc83 	bl	412d2 <k_free>
	return err;
   2a9cc:	e7e4      	b.n	2a998 <json_send_to_cloud+0x3c>
		return -EACCES;
   2a9ce:	f06f 040c 	mvn.w	r4, #12
   2a9d2:	e7e1      	b.n	2a998 <json_send_to_cloud+0x3c>
   2a9d4:	00047b2c 	.word	0x00047b2c
   2a9d8:	0004409e 	.word	0x0004409e
   2a9dc:	00047e9d 	.word	0x00047e9d
   2a9e0:	00047ed0 	.word	0x00047ed0

0002a9e4 <nrf_cloud_modem_info_json_encode>:
{
   2a9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a9e6:	4606      	mov	r6, r0
	if (!mod_inf_obj || !mod_inf) {
   2a9e8:	460f      	mov	r7, r1
{
   2a9ea:	f6ad 1d5c 	subw	sp, sp, #2396	; 0x95c
	if (!mod_inf_obj || !mod_inf) {
   2a9ee:	2900      	cmp	r1, #0
   2a9f0:	d057      	beq.n	2aaa2 <nrf_cloud_modem_info_json_encode+0xbe>
   2a9f2:	2800      	cmp	r0, #0
   2a9f4:	d055      	beq.n	2aaa2 <nrf_cloud_modem_info_json_encode+0xbe>
	cJSON *tmp = cJSON_CreateObject();
   2a9f6:	f007 fb73 	bl	320e0 <cJSON_CreateObject>
	if (!tmp) {
   2a9fa:	4605      	mov	r5, r0
   2a9fc:	2800      	cmp	r0, #0
   2a9fe:	d04d      	beq.n	2aa9c <nrf_cloud_modem_info_json_encode+0xb8>
	struct modem_param_info *mpi = (struct modem_param_info *)mod_inf->mpi;
   2aa00:	6870      	ldr	r0, [r6, #4]
	if (!mpi) {
   2aa02:	bb10      	cbnz	r0, 2aa4a <nrf_cloud_modem_info_json_encode+0x66>
		err = modem_info_init();
   2aa04:	f7fd fd7e 	bl	28504 <modem_info_init>
		if (err) {
   2aa08:	4604      	mov	r4, r0
   2aa0a:	b158      	cbz	r0, 2aa24 <nrf_cloud_modem_info_json_encode+0x40>
			LOG_ERR("modem_info_init() failed: %d", err);
   2aa0c:	2145      	movs	r1, #69	; 0x45
   2aa0e:	4602      	mov	r2, r0
   2aa10:	4825      	ldr	r0, [pc, #148]	; (2aaa8 <nrf_cloud_modem_info_json_encode+0xc4>)
		LOG_ERR("Failed to encode modem info: %d", err);
   2aa12:	f012 f875 	bl	3cb00 <z_log_minimal_printk>
	cJSON_Delete(tmp);
   2aa16:	4628      	mov	r0, r5
   2aa18:	f007 faa0 	bl	31f5c <cJSON_Delete>
}
   2aa1c:	4620      	mov	r0, r4
   2aa1e:	f60d 1d5c 	addw	sp, sp, #2396	; 0x95c
   2aa22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = modem_info_params_init(&fetched_mod_inf);
   2aa24:	4668      	mov	r0, sp
   2aa26:	f7fd fda5 	bl	28574 <modem_info_params_init>
		if (err) {
   2aa2a:	4604      	mov	r4, r0
   2aa2c:	b118      	cbz	r0, 2aa36 <nrf_cloud_modem_info_json_encode+0x52>
			LOG_ERR("modem_info_params_init() failed: %d", err);
   2aa2e:	4602      	mov	r2, r0
   2aa30:	2145      	movs	r1, #69	; 0x45
   2aa32:	481e      	ldr	r0, [pc, #120]	; (2aaac <nrf_cloud_modem_info_json_encode+0xc8>)
   2aa34:	e7ed      	b.n	2aa12 <nrf_cloud_modem_info_json_encode+0x2e>
		err = modem_info_params_get(&fetched_mod_inf);
   2aa36:	4668      	mov	r0, sp
   2aa38:	f7fd fdf2 	bl	28620 <modem_info_params_get>
		if (err < 0) {
   2aa3c:	1e04      	subs	r4, r0, #0
   2aa3e:	da03      	bge.n	2aa48 <nrf_cloud_modem_info_json_encode+0x64>
			LOG_ERR("modem_info_params_get() failed: %d", err);
   2aa40:	4622      	mov	r2, r4
   2aa42:	2145      	movs	r1, #69	; 0x45
   2aa44:	481a      	ldr	r0, [pc, #104]	; (2aab0 <nrf_cloud_modem_info_json_encode+0xcc>)
   2aa46:	e7e4      	b.n	2aa12 <nrf_cloud_modem_info_json_encode+0x2e>
		mpi = &fetched_mod_inf;
   2aa48:	4668      	mov	r0, sp
	err = modem_info_json_object_encode(mpi, tmp);
   2aa4a:	4629      	mov	r1, r5
   2aa4c:	f7fd ff4c 	bl	288e8 <modem_info_json_object_encode>
	if (err < 0) {
   2aa50:	1e04      	subs	r4, r0, #0
   2aa52:	da03      	bge.n	2aa5c <nrf_cloud_modem_info_json_encode+0x78>
		LOG_ERR("Failed to encode modem info: %d", err);
   2aa54:	4622      	mov	r2, r4
   2aa56:	2145      	movs	r1, #69	; 0x45
   2aa58:	4816      	ldr	r0, [pc, #88]	; (2aab4 <nrf_cloud_modem_info_json_encode+0xd0>)
   2aa5a:	e7da      	b.n	2aa12 <nrf_cloud_modem_info_json_encode+0x2e>
	if (encode_info_item_cs(mod_inf->device, MODEM_INFO_JSON_KEY_DEV_INF, tmp, mod_inf_obj) ||
   2aa5c:	463b      	mov	r3, r7
   2aa5e:	462a      	mov	r2, r5
   2aa60:	4915      	ldr	r1, [pc, #84]	; (2aab8 <nrf_cloud_modem_info_json_encode+0xd4>)
   2aa62:	7830      	ldrb	r0, [r6, #0]
   2aa64:	f7ff fb52 	bl	2a10c <encode_info_item_cs>
   2aa68:	b130      	cbz	r0, 2aa78 <nrf_cloud_modem_info_json_encode+0x94>
		LOG_ERR("Failed to encode modem info");
   2aa6a:	2145      	movs	r1, #69	; 0x45
   2aa6c:	4813      	ldr	r0, [pc, #76]	; (2aabc <nrf_cloud_modem_info_json_encode+0xd8>)
   2aa6e:	f012 f847 	bl	3cb00 <z_log_minimal_printk>
		err = -EIO;
   2aa72:	f06f 0404 	mvn.w	r4, #4
		goto cleanup;
   2aa76:	e7ce      	b.n	2aa16 <nrf_cloud_modem_info_json_encode+0x32>
	    encode_info_item_cs(mod_inf->network, MODEM_INFO_JSON_KEY_NET_INF, tmp, mod_inf_obj) ||
   2aa78:	463b      	mov	r3, r7
   2aa7a:	462a      	mov	r2, r5
   2aa7c:	4910      	ldr	r1, [pc, #64]	; (2aac0 <nrf_cloud_modem_info_json_encode+0xdc>)
   2aa7e:	7870      	ldrb	r0, [r6, #1]
   2aa80:	f7ff fb44 	bl	2a10c <encode_info_item_cs>
	if (encode_info_item_cs(mod_inf->device, MODEM_INFO_JSON_KEY_DEV_INF, tmp, mod_inf_obj) ||
   2aa84:	2800      	cmp	r0, #0
   2aa86:	d1f0      	bne.n	2aa6a <nrf_cloud_modem_info_json_encode+0x86>
	    encode_info_item_cs(mod_inf->sim, MODEM_INFO_JSON_KEY_SIM_INF, tmp, mod_inf_obj)) {
   2aa88:	463b      	mov	r3, r7
   2aa8a:	462a      	mov	r2, r5
   2aa8c:	490d      	ldr	r1, [pc, #52]	; (2aac4 <nrf_cloud_modem_info_json_encode+0xe0>)
   2aa8e:	78b0      	ldrb	r0, [r6, #2]
   2aa90:	f7ff fb3c 	bl	2a10c <encode_info_item_cs>
	    encode_info_item_cs(mod_inf->network, MODEM_INFO_JSON_KEY_NET_INF, tmp, mod_inf_obj) ||
   2aa94:	4604      	mov	r4, r0
   2aa96:	2800      	cmp	r0, #0
   2aa98:	d0bd      	beq.n	2aa16 <nrf_cloud_modem_info_json_encode+0x32>
   2aa9a:	e7e6      	b.n	2aa6a <nrf_cloud_modem_info_json_encode+0x86>
		err = -ENOMEM;
   2aa9c:	f06f 040b 	mvn.w	r4, #11
   2aaa0:	e7b9      	b.n	2aa16 <nrf_cloud_modem_info_json_encode+0x32>
		return -EINVAL;
   2aaa2:	f06f 0415 	mvn.w	r4, #21
   2aaa6:	e7b9      	b.n	2aa1c <nrf_cloud_modem_info_json_encode+0x38>
   2aaa8:	00047ef7 	.word	0x00047ef7
   2aaac:	00047f19 	.word	0x00047f19
   2aab0:	00047f42 	.word	0x00047f42
   2aab4:	00047f6a 	.word	0x00047f6a
   2aab8:	00046402 	.word	0x00046402
   2aabc:	00047f8f 	.word	0x00047f8f
   2aac0:	000463ee 	.word	0x000463ee
   2aac4:	000463fa 	.word	0x000463fa

0002aac8 <nrf_cloud_service_info_json_encode>:
{
   2aac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aacc:	460f      	mov	r7, r1
	if (!svc_inf || !svc_inf_obj) {
   2aace:	4606      	mov	r6, r0
   2aad0:	2800      	cmp	r0, #0
   2aad2:	f000 80b5 	beq.w	2ac40 <nrf_cloud_service_info_json_encode+0x178>
   2aad6:	2900      	cmp	r1, #0
   2aad8:	f000 80b2 	beq.w	2ac40 <nrf_cloud_service_info_json_encode+0x178>
	int err = nrf_cloud_encode_service_info_fota(svc_inf->fota, svc_inf_obj);
   2aadc:	f8d0 8000 	ldr.w	r8, [r0]
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA) != 0) {
   2aae0:	4959      	ldr	r1, [pc, #356]	; (2ac48 <nrf_cloud_service_info_json_encode+0x180>)
   2aae2:	4638      	mov	r0, r7
	if (fota == NULL ||
   2aae4:	f1b8 0f00 	cmp.w	r8, #0
   2aae8:	d105      	bne.n	2aaf6 <nrf_cloud_service_info_json_encode+0x2e>
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA) != 0) {
   2aaea:	f014 fda9 	bl	3f640 <json_add_null_cs>
   2aaee:	b3b0      	cbz	r0, 2ab5e <nrf_cloud_service_info_json_encode+0x96>
			return -ENOMEM;
   2aaf0:	f06f 000b 	mvn.w	r0, #11
   2aaf4:	e03c      	b.n	2ab70 <nrf_cloud_service_info_json_encode+0xa8>
		cJSON *array = cJSON_AddArrayToObjectCS(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA);
   2aaf6:	f015 f8e1 	bl	3fcbc <cJSON_AddArrayToObjectCS>
		if (!array) {
   2aafa:	4605      	mov	r5, r0
   2aafc:	2800      	cmp	r0, #0
   2aafe:	d0f7      	beq.n	2aaf0 <nrf_cloud_service_info_json_encode+0x28>
		if (fota->bootloader) {
   2ab00:	f898 4000 	ldrb.w	r4, [r8]
   2ab04:	f014 0401 	ands.w	r4, r4, #1
   2ab08:	d007      	beq.n	2ab1a <nrf_cloud_service_info_json_encode+0x52>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_BOOT));
   2ab0a:	4850      	ldr	r0, [pc, #320]	; (2ac4c <nrf_cloud_service_info_json_encode+0x184>)
   2ab0c:	f007 fac4 	bl	32098 <cJSON_CreateString>
   2ab10:	4601      	mov	r1, r0
   2ab12:	4628      	mov	r0, r5
   2ab14:	f015 f830 	bl	3fb78 <cJSON_AddItemToArray>
			++item_cnt;
   2ab18:	2401      	movs	r4, #1
		if (fota->modem) {
   2ab1a:	f898 3000 	ldrb.w	r3, [r8]
   2ab1e:	0798      	lsls	r0, r3, #30
   2ab20:	d507      	bpl.n	2ab32 <nrf_cloud_service_info_json_encode+0x6a>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_MODEM));
   2ab22:	484b      	ldr	r0, [pc, #300]	; (2ac50 <nrf_cloud_service_info_json_encode+0x188>)
   2ab24:	f007 fab8 	bl	32098 <cJSON_CreateString>
   2ab28:	4601      	mov	r1, r0
   2ab2a:	4628      	mov	r0, r5
   2ab2c:	f015 f824 	bl	3fb78 <cJSON_AddItemToArray>
			++item_cnt;
   2ab30:	3401      	adds	r4, #1
		if (fota->application) {
   2ab32:	f898 3000 	ldrb.w	r3, [r8]
   2ab36:	0759      	lsls	r1, r3, #29
   2ab38:	d507      	bpl.n	2ab4a <nrf_cloud_service_info_json_encode+0x82>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_APP));
   2ab3a:	4846      	ldr	r0, [pc, #280]	; (2ac54 <nrf_cloud_service_info_json_encode+0x18c>)
   2ab3c:	f007 faac 	bl	32098 <cJSON_CreateString>
   2ab40:	4601      	mov	r1, r0
   2ab42:	4628      	mov	r0, r5
   2ab44:	f015 f818 	bl	3fb78 <cJSON_AddItemToArray>
			++item_cnt;
   2ab48:	3401      	adds	r4, #1
		if (cJSON_GetArraySize(array) != item_cnt) {
   2ab4a:	4628      	mov	r0, r5
   2ab4c:	f014 fffc 	bl	3fb48 <cJSON_GetArraySize>
   2ab50:	42a0      	cmp	r0, r4
   2ab52:	d004      	beq.n	2ab5e <nrf_cloud_service_info_json_encode+0x96>
			cJSON_DeleteItemFromObject(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA);
   2ab54:	493c      	ldr	r1, [pc, #240]	; (2ac48 <nrf_cloud_service_info_json_encode+0x180>)
			cJSON_DeleteItemFromObject(svc_inf_obj, JSON_KEY_SRVC_INFO_UI);
   2ab56:	4638      	mov	r0, r7
   2ab58:	f015 f83c 	bl	3fbd4 <cJSON_DeleteItemFromObject>
   2ab5c:	e7c8      	b.n	2aaf0 <nrf_cloud_service_info_json_encode+0x28>
   2ab5e:	6876      	ldr	r6, [r6, #4]
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_UI) != 0) {
   2ab60:	4638      	mov	r0, r7
   2ab62:	493d      	ldr	r1, [pc, #244]	; (2ac58 <nrf_cloud_service_info_json_encode+0x190>)
	if (ui == NULL) {
   2ab64:	b936      	cbnz	r6, 2ab74 <nrf_cloud_service_info_json_encode+0xac>
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_UI) != 0) {
   2ab66:	f014 fd6b 	bl	3f640 <json_add_null_cs>
   2ab6a:	2800      	cmp	r0, #0
   2ab6c:	d1c0      	bne.n	2aaf0 <nrf_cloud_service_info_json_encode+0x28>
	return 0;
   2ab6e:	2000      	movs	r0, #0
}
   2ab70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cJSON *array = cJSON_AddArrayToObjectCS(svc_inf_obj, JSON_KEY_SRVC_INFO_UI);
   2ab74:	f015 f8a2 	bl	3fcbc <cJSON_AddArrayToObjectCS>
		if (!array) {
   2ab78:	4605      	mov	r5, r0
   2ab7a:	2800      	cmp	r0, #0
   2ab7c:	d0b8      	beq.n	2aaf0 <nrf_cloud_service_info_json_encode+0x28>
		if (ui->air_pressure) {
   2ab7e:	7834      	ldrb	r4, [r6, #0]
   2ab80:	f014 0410 	ands.w	r4, r4, #16
   2ab84:	d007      	beq.n	2ab96 <nrf_cloud_service_info_json_encode+0xce>
			cJSON_AddItemToArray(array,
   2ab86:	4835      	ldr	r0, [pc, #212]	; (2ac5c <nrf_cloud_service_info_json_encode+0x194>)
   2ab88:	f007 fa86 	bl	32098 <cJSON_CreateString>
   2ab8c:	4601      	mov	r1, r0
   2ab8e:	4628      	mov	r0, r5
   2ab90:	f014 fff2 	bl	3fb78 <cJSON_AddItemToArray>
			++item_cnt;
   2ab94:	2401      	movs	r4, #1
		if (ui->gps) {
   2ab96:	7833      	ldrb	r3, [r6, #0]
   2ab98:	079a      	lsls	r2, r3, #30
   2ab9a:	d507      	bpl.n	2abac <nrf_cloud_service_info_json_encode+0xe4>
			cJSON_AddItemToArray(array,
   2ab9c:	4830      	ldr	r0, [pc, #192]	; (2ac60 <nrf_cloud_service_info_json_encode+0x198>)
   2ab9e:	f007 fa7b 	bl	32098 <cJSON_CreateString>
   2aba2:	4601      	mov	r1, r0
   2aba4:	4628      	mov	r0, r5
   2aba6:	f014 ffe7 	bl	3fb78 <cJSON_AddItemToArray>
			++item_cnt;
   2abaa:	3401      	adds	r4, #1
		if (ui->flip) {
   2abac:	7833      	ldrb	r3, [r6, #0]
   2abae:	075b      	lsls	r3, r3, #29
   2abb0:	d507      	bpl.n	2abc2 <nrf_cloud_service_info_json_encode+0xfa>
			cJSON_AddItemToArray(array,
   2abb2:	482c      	ldr	r0, [pc, #176]	; (2ac64 <nrf_cloud_service_info_json_encode+0x19c>)
   2abb4:	f007 fa70 	bl	32098 <cJSON_CreateString>
   2abb8:	4601      	mov	r1, r0
   2abba:	4628      	mov	r0, r5
   2abbc:	f014 ffdc 	bl	3fb78 <cJSON_AddItemToArray>
			++item_cnt;
   2abc0:	3401      	adds	r4, #1
		if (ui->button) {
   2abc2:	7873      	ldrb	r3, [r6, #1]
   2abc4:	07d8      	lsls	r0, r3, #31
   2abc6:	d507      	bpl.n	2abd8 <nrf_cloud_service_info_json_encode+0x110>
			cJSON_AddItemToArray(array,
   2abc8:	4827      	ldr	r0, [pc, #156]	; (2ac68 <nrf_cloud_service_info_json_encode+0x1a0>)
   2abca:	f007 fa65 	bl	32098 <cJSON_CreateString>
   2abce:	4601      	mov	r1, r0
   2abd0:	4628      	mov	r0, r5
   2abd2:	f014 ffd1 	bl	3fb78 <cJSON_AddItemToArray>
			++item_cnt;
   2abd6:	3401      	adds	r4, #1
		if (ui->temperature) {
   2abd8:	7833      	ldrb	r3, [r6, #0]
   2abda:	07d9      	lsls	r1, r3, #31
   2abdc:	d507      	bpl.n	2abee <nrf_cloud_service_info_json_encode+0x126>
			cJSON_AddItemToArray(array,
   2abde:	4823      	ldr	r0, [pc, #140]	; (2ac6c <nrf_cloud_service_info_json_encode+0x1a4>)
   2abe0:	f007 fa5a 	bl	32098 <cJSON_CreateString>
   2abe4:	4601      	mov	r1, r0
   2abe6:	4628      	mov	r0, r5
   2abe8:	f014 ffc6 	bl	3fb78 <cJSON_AddItemToArray>
			++item_cnt;
   2abec:	3401      	adds	r4, #1
		if (ui->humidity) {
   2abee:	7833      	ldrb	r3, [r6, #0]
   2abf0:	071a      	lsls	r2, r3, #28
   2abf2:	d507      	bpl.n	2ac04 <nrf_cloud_service_info_json_encode+0x13c>
			cJSON_AddItemToArray(array,
   2abf4:	481e      	ldr	r0, [pc, #120]	; (2ac70 <nrf_cloud_service_info_json_encode+0x1a8>)
   2abf6:	f007 fa4f 	bl	32098 <cJSON_CreateString>
   2abfa:	4601      	mov	r1, r0
   2abfc:	4628      	mov	r0, r5
   2abfe:	f014 ffbb 	bl	3fb78 <cJSON_AddItemToArray>
			++item_cnt;
   2ac02:	3401      	adds	r4, #1
		if (ui->light_sensor) {
   2ac04:	f996 3000 	ldrsb.w	r3, [r6]
   2ac08:	2b00      	cmp	r3, #0
   2ac0a:	da07      	bge.n	2ac1c <nrf_cloud_service_info_json_encode+0x154>
			cJSON_AddItemToArray(array,
   2ac0c:	4819      	ldr	r0, [pc, #100]	; (2ac74 <nrf_cloud_service_info_json_encode+0x1ac>)
   2ac0e:	f007 fa43 	bl	32098 <cJSON_CreateString>
   2ac12:	4601      	mov	r1, r0
   2ac14:	4628      	mov	r0, r5
   2ac16:	f014 ffaf 	bl	3fb78 <cJSON_AddItemToArray>
			++item_cnt;
   2ac1a:	3401      	adds	r4, #1
		if (ui->rsrp) {
   2ac1c:	7833      	ldrb	r3, [r6, #0]
   2ac1e:	069b      	lsls	r3, r3, #26
   2ac20:	d507      	bpl.n	2ac32 <nrf_cloud_service_info_json_encode+0x16a>
			cJSON_AddItemToArray(array,
   2ac22:	4815      	ldr	r0, [pc, #84]	; (2ac78 <nrf_cloud_service_info_json_encode+0x1b0>)
   2ac24:	f007 fa38 	bl	32098 <cJSON_CreateString>
   2ac28:	4601      	mov	r1, r0
   2ac2a:	4628      	mov	r0, r5
   2ac2c:	f014 ffa4 	bl	3fb78 <cJSON_AddItemToArray>
			++item_cnt;
   2ac30:	3401      	adds	r4, #1
		if (cJSON_GetArraySize(array) != item_cnt) {
   2ac32:	4628      	mov	r0, r5
   2ac34:	f014 ff88 	bl	3fb48 <cJSON_GetArraySize>
   2ac38:	42a0      	cmp	r0, r4
   2ac3a:	d098      	beq.n	2ab6e <nrf_cloud_service_info_json_encode+0xa6>
			cJSON_DeleteItemFromObject(svc_inf_obj, JSON_KEY_SRVC_INFO_UI);
   2ac3c:	4906      	ldr	r1, [pc, #24]	; (2ac58 <nrf_cloud_service_info_json_encode+0x190>)
   2ac3e:	e78a      	b.n	2ab56 <nrf_cloud_service_info_json_encode+0x8e>
		return -EINVAL;
   2ac40:	f06f 0015 	mvn.w	r0, #21
   2ac44:	e794      	b.n	2ab70 <nrf_cloud_service_info_json_encode+0xa8>
   2ac46:	bf00      	nop
   2ac48:	00047fb0 	.word	0x00047fb0
   2ac4c:	00047fb8 	.word	0x00047fb8
   2ac50:	00047fbd 	.word	0x00047fbd
   2ac54:	00047fc3 	.word	0x00047fc3
   2ac58:	00047fc7 	.word	0x00047fc7
   2ac5c:	00047fca 	.word	0x00047fca
   2ac60:	00048a2d 	.word	0x00048a2d
   2ac64:	00047fd4 	.word	0x00047fd4
   2ac68:	00047fd9 	.word	0x00047fd9
   2ac6c:	00047fe0 	.word	0x00047fe0
   2ac70:	00047fe5 	.word	0x00047fe5
   2ac74:	00047feb 	.word	0x00047feb
   2ac78:	00047ff1 	.word	0x00047ff1

0002ac7c <nrf_cloud_device_status_encode>:
{
   2ac7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ac80:	460d      	mov	r5, r1
   2ac82:	4614      	mov	r4, r2
	if (!dev_status || !output) {
   2ac84:	4607      	mov	r7, r0
   2ac86:	2800      	cmp	r0, #0
   2ac88:	d03d      	beq.n	2ad06 <nrf_cloud_device_status_encode+0x8a>
   2ac8a:	2900      	cmp	r1, #0
   2ac8c:	d03b      	beq.n	2ad06 <nrf_cloud_device_status_encode+0x8a>
	cJSON *root_obj = cJSON_CreateObject();
   2ac8e:	f007 fa27 	bl	320e0 <cJSON_CreateObject>
   2ac92:	4606      	mov	r6, r0
	if (include_state) {
   2ac94:	b114      	cbz	r4, 2ac9c <nrf_cloud_device_status_encode+0x20>
		state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   2ac96:	491d      	ldr	r1, [pc, #116]	; (2ad0c <nrf_cloud_device_status_encode+0x90>)
   2ac98:	f015 f83a 	bl	3fd10 <cJSON_AddObjectToObjectCS>
		reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2ac9c:	491c      	ldr	r1, [pc, #112]	; (2ad10 <nrf_cloud_device_status_encode+0x94>)
   2ac9e:	f015 f837 	bl	3fd10 <cJSON_AddObjectToObjectCS>
	cJSON *device_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_DEVICE);
   2aca2:	491c      	ldr	r1, [pc, #112]	; (2ad14 <nrf_cloud_device_status_encode+0x98>)
   2aca4:	f015 f834 	bl	3fd10 <cJSON_AddObjectToObjectCS>
	cJSON *svc_inf_obj = cJSON_AddObjectToObjectCS(device_obj, JSON_KEY_SRVC_INFO);
   2aca8:	491b      	ldr	r1, [pc, #108]	; (2ad18 <nrf_cloud_device_status_encode+0x9c>)
	cJSON *device_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_DEVICE);
   2acaa:	4604      	mov	r4, r0
	cJSON *svc_inf_obj = cJSON_AddObjectToObjectCS(device_obj, JSON_KEY_SRVC_INFO);
   2acac:	f015 f830 	bl	3fd10 <cJSON_AddObjectToObjectCS>
	if (svc_inf_obj == NULL) {
   2acb0:	4680      	mov	r8, r0
   2acb2:	b958      	cbnz	r0, 2accc <nrf_cloud_device_status_encode+0x50>
		err = -ENOMEM;
   2acb4:	f06f 040b 	mvn.w	r4, #11
	cJSON_Delete(root_obj);
   2acb8:	4630      	mov	r0, r6
   2acba:	f007 f94f 	bl	31f5c <cJSON_Delete>
	if (err) {
   2acbe:	b114      	cbz	r4, 2acc6 <nrf_cloud_device_status_encode+0x4a>
		output->ptr = NULL;
   2acc0:	2300      	movs	r3, #0
		output->len = 0;
   2acc2:	e9c5 3300 	strd	r3, r3, [r5]
}
   2acc6:	4620      	mov	r0, r4
   2acc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (dev_status->modem) {
   2accc:	6838      	ldr	r0, [r7, #0]
   2acce:	b960      	cbnz	r0, 2acea <nrf_cloud_device_status_encode+0x6e>
	if (dev_status->svc) {
   2acd0:	6878      	ldr	r0, [r7, #4]
   2acd2:	b988      	cbnz	r0, 2acf8 <nrf_cloud_device_status_encode+0x7c>
	output->ptr = cJSON_PrintUnformatted(root_obj);
   2acd4:	4630      	mov	r0, r6
   2acd6:	f014 ff34 	bl	3fb42 <cJSON_PrintUnformatted>
   2acda:	6068      	str	r0, [r5, #4]
	if (output->ptr) {
   2acdc:	2800      	cmp	r0, #0
   2acde:	d0e9      	beq.n	2acb4 <nrf_cloud_device_status_encode+0x38>
		output->len = strlen(output->ptr);
   2ace0:	f7f2 faaf 	bl	1d242 <strlen>
   2ace4:	2400      	movs	r4, #0
   2ace6:	6028      	str	r0, [r5, #0]
   2ace8:	e7e6      	b.n	2acb8 <nrf_cloud_device_status_encode+0x3c>
		err = nrf_cloud_modem_info_json_encode(dev_status->modem, device_obj);
   2acea:	4621      	mov	r1, r4
   2acec:	f7ff fe7a 	bl	2a9e4 <nrf_cloud_modem_info_json_encode>
		if (err) {
   2acf0:	4604      	mov	r4, r0
   2acf2:	2800      	cmp	r0, #0
   2acf4:	d0ec      	beq.n	2acd0 <nrf_cloud_device_status_encode+0x54>
   2acf6:	e7df      	b.n	2acb8 <nrf_cloud_device_status_encode+0x3c>
		err = nrf_cloud_service_info_json_encode(dev_status->svc, svc_inf_obj);
   2acf8:	4641      	mov	r1, r8
   2acfa:	f7ff fee5 	bl	2aac8 <nrf_cloud_service_info_json_encode>
		if (err) {
   2acfe:	4604      	mov	r4, r0
   2ad00:	2800      	cmp	r0, #0
   2ad02:	d0e7      	beq.n	2acd4 <nrf_cloud_device_status_encode+0x58>
   2ad04:	e7d8      	b.n	2acb8 <nrf_cloud_device_status_encode+0x3c>
		return -EINVAL;
   2ad06:	f06f 0415 	mvn.w	r4, #21
   2ad0a:	e7dc      	b.n	2acc6 <nrf_cloud_device_status_encode+0x4a>
   2ad0c:	00047b6b 	.word	0x00047b6b
   2ad10:	00047cbe 	.word	0x00047cbe
   2ad14:	00047ff6 	.word	0x00047ff6
   2ad18:	00047ffd 	.word	0x00047ffd

0002ad1c <get_string_from_array>:
{
   2ad1c:	b570      	push	{r4, r5, r6, lr}
   2ad1e:	4605      	mov	r5, r0
   2ad20:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(string_out != NULL);
   2ad22:	4614      	mov	r4, r2
   2ad24:	b952      	cbnz	r2, 2ad3c <get_string_from_array+0x20>
   2ad26:	490d      	ldr	r1, [pc, #52]	; (2ad5c <get_string_from_array+0x40>)
   2ad28:	480d      	ldr	r0, [pc, #52]	; (2ad60 <get_string_from_array+0x44>)
   2ad2a:	f240 42cf 	movw	r2, #1231	; 0x4cf
   2ad2e:	f011 fead 	bl	3ca8c <assert_print>
   2ad32:	f240 41cf 	movw	r1, #1231	; 0x4cf
   2ad36:	4809      	ldr	r0, [pc, #36]	; (2ad5c <get_string_from_array+0x40>)
   2ad38:	f011 fea1 	bl	3ca7e <assert_post_action>
	cJSON *item = cJSON_GetArrayItem(array, index);
   2ad3c:	4628      	mov	r0, r5
   2ad3e:	4631      	mov	r1, r6
   2ad40:	f014 ff0a 	bl	3fb58 <cJSON_GetArrayItem>
   2ad44:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   2ad46:	f015 f81a 	bl	3fd7e <cJSON_IsString>
   2ad4a:	b118      	cbz	r0, 2ad54 <get_string_from_array+0x38>
	return 0;
   2ad4c:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   2ad4e:	692b      	ldr	r3, [r5, #16]
   2ad50:	6023      	str	r3, [r4, #0]
}
   2ad52:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2ad54:	f06f 0015 	mvn.w	r0, #21
   2ad58:	e7fb      	b.n	2ad52 <get_string_from_array+0x36>
   2ad5a:	bf00      	nop
   2ad5c:	00047b2c 	.word	0x00047b2c
   2ad60:	0004409e 	.word	0x0004409e

0002ad64 <get_string_from_obj>:
{
   2ad64:	b570      	push	{r4, r5, r6, lr}
   2ad66:	4605      	mov	r5, r0
   2ad68:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(string_out != NULL);
   2ad6a:	4614      	mov	r4, r2
   2ad6c:	b952      	cbnz	r2, 2ad84 <get_string_from_obj+0x20>
   2ad6e:	490d      	ldr	r1, [pc, #52]	; (2ada4 <get_string_from_obj+0x40>)
   2ad70:	480d      	ldr	r0, [pc, #52]	; (2ada8 <get_string_from_obj+0x44>)
   2ad72:	f240 42df 	movw	r2, #1247	; 0x4df
   2ad76:	f011 fe89 	bl	3ca8c <assert_print>
   2ad7a:	f240 41df 	movw	r1, #1247	; 0x4df
   2ad7e:	4809      	ldr	r0, [pc, #36]	; (2ada4 <get_string_from_obj+0x40>)
   2ad80:	f011 fe7d 	bl	3ca7e <assert_post_action>
	cJSON *item = cJSON_GetObjectItem(obj, key);
   2ad84:	4628      	mov	r0, r5
   2ad86:	4631      	mov	r1, r6
   2ad88:	f014 feec 	bl	3fb64 <cJSON_GetObjectItem>
   2ad8c:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   2ad8e:	f014 fff6 	bl	3fd7e <cJSON_IsString>
   2ad92:	b118      	cbz	r0, 2ad9c <get_string_from_obj+0x38>
	return 0;
   2ad94:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   2ad96:	692b      	ldr	r3, [r5, #16]
   2ad98:	6023      	str	r3, [r4, #0]
}
   2ad9a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2ad9c:	f06f 0015 	mvn.w	r0, #21
   2ada0:	e7fb      	b.n	2ad9a <get_string_from_obj+0x36>
   2ada2:	bf00      	nop
   2ada4:	00047b2c 	.word	0x00047b2c
   2ada8:	0004409e 	.word	0x0004409e

0002adac <nrf_cloud_parse_cell_pos_json>:

static int nrf_cloud_parse_cell_pos_json(const cJSON *const cell_pos_obj,
	struct nrf_cloud_cell_pos_result *const location_out)
{
   2adac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2adb0:	460c      	mov	r4, r1
	if (!cell_pos_obj || !location_out) {
   2adb2:	4605      	mov	r5, r0
   2adb4:	2800      	cmp	r0, #0
   2adb6:	d04f      	beq.n	2ae58 <nrf_cloud_parse_cell_pos_json+0xac>
   2adb8:	2900      	cmp	r1, #0
   2adba:	d04d      	beq.n	2ae58 <nrf_cloud_parse_cell_pos_json+0xac>
	}

	cJSON *lat, *lon, *unc;
	char *type;

	lat = cJSON_GetObjectItem(cell_pos_obj,
   2adbc:	4928      	ldr	r1, [pc, #160]	; (2ae60 <nrf_cloud_parse_cell_pos_json+0xb4>)
   2adbe:	f014 fed1 	bl	3fb64 <cJSON_GetObjectItem>
				  NRF_CLOUD_CELL_POS_JSON_KEY_LAT);
	lon = cJSON_GetObjectItem(cell_pos_obj,
   2adc2:	4928      	ldr	r1, [pc, #160]	; (2ae64 <nrf_cloud_parse_cell_pos_json+0xb8>)
	lat = cJSON_GetObjectItem(cell_pos_obj,
   2adc4:	4680      	mov	r8, r0
	lon = cJSON_GetObjectItem(cell_pos_obj,
   2adc6:	4628      	mov	r0, r5
   2adc8:	f014 fecc 	bl	3fb64 <cJSON_GetObjectItem>
				NRF_CLOUD_CELL_POS_JSON_KEY_LON);
	unc = cJSON_GetObjectItem(cell_pos_obj,
   2adcc:	4926      	ldr	r1, [pc, #152]	; (2ae68 <nrf_cloud_parse_cell_pos_json+0xbc>)
	lon = cJSON_GetObjectItem(cell_pos_obj,
   2adce:	4607      	mov	r7, r0
	unc = cJSON_GetObjectItem(cell_pos_obj,
   2add0:	4628      	mov	r0, r5
   2add2:	f014 fec7 	bl	3fb64 <cJSON_GetObjectItem>
   2add6:	4606      	mov	r6, r0
				NRF_CLOUD_CELL_POS_JSON_KEY_UNCERT);

	if (!cJSON_IsNumber(lat) || !cJSON_IsNumber(lon) ||
   2add8:	4640      	mov	r0, r8
   2adda:	f014 ffc9 	bl	3fd70 <cJSON_IsNumber>
   2adde:	b920      	cbnz	r0, 2adea <nrf_cloud_parse_cell_pos_json+0x3e>
	    !cJSON_IsNumber(unc)) {
		return -EBADMSG;
   2ade0:	f06f 004c 	mvn.w	r0, #76	; 0x4c
	} else {
		LOG_WRN("Cellular positioning type not found in message");
	}

	return 0;
}
   2ade4:	b002      	add	sp, #8
   2ade6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cJSON_IsNumber(lat) || !cJSON_IsNumber(lon) ||
   2adea:	4638      	mov	r0, r7
   2adec:	f014 ffc0 	bl	3fd70 <cJSON_IsNumber>
   2adf0:	2800      	cmp	r0, #0
   2adf2:	d0f5      	beq.n	2ade0 <nrf_cloud_parse_cell_pos_json+0x34>
	    !cJSON_IsNumber(unc)) {
   2adf4:	4630      	mov	r0, r6
   2adf6:	f014 ffbb 	bl	3fd70 <cJSON_IsNumber>
	if (!cJSON_IsNumber(lat) || !cJSON_IsNumber(lon) ||
   2adfa:	2800      	cmp	r0, #0
   2adfc:	d0f0      	beq.n	2ade0 <nrf_cloud_parse_cell_pos_json+0x34>
	location_out->lat = lat->valuedouble;
   2adfe:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
   2ae02:	e9c4 2302 	strd	r2, r3, [r4, #8]
	location_out->lon = lon->valuedouble;
   2ae06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   2ae0a:	e9c4 2304 	strd	r2, r3, [r4, #16]
	location_out->unc = (uint32_t)unc->valueint;
   2ae0e:	6973      	ldr	r3, [r6, #20]
	if (!get_string_from_obj(cell_pos_obj, NRF_CLOUD_JSON_FULFILL_KEY, &type)) {
   2ae10:	4628      	mov	r0, r5
	location_out->unc = (uint32_t)unc->valueint;
   2ae12:	61a3      	str	r3, [r4, #24]
	location_out->type = CELL_POS_TYPE__INVALID;
   2ae14:	2302      	movs	r3, #2
	if (!get_string_from_obj(cell_pos_obj, NRF_CLOUD_JSON_FULFILL_KEY, &type)) {
   2ae16:	4915      	ldr	r1, [pc, #84]	; (2ae6c <nrf_cloud_parse_cell_pos_json+0xc0>)
	location_out->type = CELL_POS_TYPE__INVALID;
   2ae18:	7023      	strb	r3, [r4, #0]
	if (!get_string_from_obj(cell_pos_obj, NRF_CLOUD_JSON_FULFILL_KEY, &type)) {
   2ae1a:	aa01      	add	r2, sp, #4
   2ae1c:	f7ff ffa2 	bl	2ad64 <get_string_from_obj>
   2ae20:	b9a8      	cbnz	r0, 2ae4e <nrf_cloud_parse_cell_pos_json+0xa2>
		if (!strcmp(type, NRF_CLOUD_CELL_POS_TYPE_VAL_MCELL)) {
   2ae22:	4913      	ldr	r1, [pc, #76]	; (2ae70 <nrf_cloud_parse_cell_pos_json+0xc4>)
   2ae24:	9801      	ldr	r0, [sp, #4]
   2ae26:	f7f2 fa02 	bl	1d22e <strcmp>
   2ae2a:	b910      	cbnz	r0, 2ae32 <nrf_cloud_parse_cell_pos_json+0x86>
			location_out->type = CELL_POS_TYPE_MULTI;
   2ae2c:	2301      	movs	r3, #1
   2ae2e:	7023      	strb	r3, [r4, #0]
   2ae30:	e7d8      	b.n	2ade4 <nrf_cloud_parse_cell_pos_json+0x38>
		} else if (!strcmp(type, NRF_CLOUD_CELL_POS_TYPE_VAL_SCELL)) {
   2ae32:	4910      	ldr	r1, [pc, #64]	; (2ae74 <nrf_cloud_parse_cell_pos_json+0xc8>)
   2ae34:	9801      	ldr	r0, [sp, #4]
   2ae36:	f7f2 f9fa 	bl	1d22e <strcmp>
   2ae3a:	b908      	cbnz	r0, 2ae40 <nrf_cloud_parse_cell_pos_json+0x94>
			location_out->type = CELL_POS_TYPE_SINGLE;
   2ae3c:	7020      	strb	r0, [r4, #0]
   2ae3e:	e7d1      	b.n	2ade4 <nrf_cloud_parse_cell_pos_json+0x38>
			LOG_WRN("Unhandled cellular positioning type: %s", log_strdup(type));
   2ae40:	2157      	movs	r1, #87	; 0x57
   2ae42:	9a01      	ldr	r2, [sp, #4]
   2ae44:	480c      	ldr	r0, [pc, #48]	; (2ae78 <nrf_cloud_parse_cell_pos_json+0xcc>)
   2ae46:	f011 fe5b 	bl	3cb00 <z_log_minimal_printk>
	return 0;
   2ae4a:	2000      	movs	r0, #0
   2ae4c:	e7ca      	b.n	2ade4 <nrf_cloud_parse_cell_pos_json+0x38>
		LOG_WRN("Cellular positioning type not found in message");
   2ae4e:	2157      	movs	r1, #87	; 0x57
   2ae50:	480a      	ldr	r0, [pc, #40]	; (2ae7c <nrf_cloud_parse_cell_pos_json+0xd0>)
   2ae52:	f011 fe55 	bl	3cb00 <z_log_minimal_printk>
   2ae56:	e7f8      	b.n	2ae4a <nrf_cloud_parse_cell_pos_json+0x9e>
		return -EINVAL;
   2ae58:	f06f 0015 	mvn.w	r0, #21
   2ae5c:	e7c2      	b.n	2ade4 <nrf_cloud_parse_cell_pos_json+0x38>
   2ae5e:	bf00      	nop
   2ae60:	00048053 	.word	0x00048053
   2ae64:	00048057 	.word	0x00048057
   2ae68:	0004805b 	.word	0x0004805b
   2ae6c:	00048067 	.word	0x00048067
   2ae70:	00048075 	.word	0x00048075
   2ae74:	0004807b 	.word	0x0004807b
   2ae78:	00048081 	.word	0x00048081
   2ae7c:	000480ae 	.word	0x000480ae

0002ae80 <nrf_cloud_format_single_cell_pos_req_json>:
{
   2ae80:	b570      	push	{r4, r5, r6, lr}
	cJSON *lte_array = cJSON_AddArrayToObjectCS(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2ae82:	490f      	ldr	r1, [pc, #60]	; (2aec0 <__kernel_ram_size+0x10>)
{
   2ae84:	4605      	mov	r5, r0
	cJSON *lte_array = cJSON_AddArrayToObjectCS(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2ae86:	f014 ff19 	bl	3fcbc <cJSON_AddArrayToObjectCS>
   2ae8a:	4606      	mov	r6, r0
	cJSON *lte_obj = cJSON_CreateObject();
   2ae8c:	f007 f928 	bl	320e0 <cJSON_CreateObject>
   2ae90:	4604      	mov	r4, r0
	if (!cJSON_AddItemToArray(lte_array, lte_obj)) {
   2ae92:	4601      	mov	r1, r0
   2ae94:	4630      	mov	r0, r6
   2ae96:	f014 fe6f 	bl	3fb78 <cJSON_AddItemToArray>
   2ae9a:	b948      	cbnz	r0, 2aeb0 <__kernel_ram_size>
		cJSON_Delete(lte_obj);
   2ae9c:	4620      	mov	r0, r4
   2ae9e:	f007 f85d 	bl	31f5c <cJSON_Delete>
		err = -ENOMEM;
   2aea2:	f06f 040b 	mvn.w	r4, #11
		cJSON_DeleteItemFromObject(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2aea6:	4628      	mov	r0, r5
   2aea8:	4905      	ldr	r1, [pc, #20]	; (2aec0 <__kernel_ram_size+0x10>)
   2aeaa:	f014 fe93 	bl	3fbd4 <cJSON_DeleteItemFromObject>
	return err;
   2aeae:	e005      	b.n	2aebc <__kernel_ram_size+0xc>
		err = nrf_cloud_json_add_modem_info(lte_obj);
   2aeb0:	4620      	mov	r0, r4
   2aeb2:	f7ff f9c7 	bl	2a244 <nrf_cloud_json_add_modem_info>
	if (err) {
   2aeb6:	4604      	mov	r4, r0
   2aeb8:	2800      	cmp	r0, #0
   2aeba:	d1f4      	bne.n	2aea6 <nrf_cloud_format_single_cell_pos_req_json+0x26>
}
   2aebc:	4620      	mov	r0, r4
   2aebe:	bd70      	pop	{r4, r5, r6, pc}
   2aec0:	000480e2 	.word	0x000480e2

0002aec4 <nrf_cloud_format_cell_pos_req_json>:
{
   2aec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aec8:	b085      	sub	sp, #20
   2aeca:	4690      	mov	r8, r2
	if (!inf || !inf_cnt || !req_obj_out) {
   2aecc:	4604      	mov	r4, r0
{
   2aece:	9101      	str	r1, [sp, #4]
	if (!inf || !inf_cnt || !req_obj_out) {
   2aed0:	2800      	cmp	r0, #0
   2aed2:	f000 8123 	beq.w	2b11c <nrf_cloud_format_cell_pos_req_json+0x258>
   2aed6:	2900      	cmp	r1, #0
   2aed8:	f000 8120 	beq.w	2b11c <nrf_cloud_format_cell_pos_req_json+0x258>
   2aedc:	2a00      	cmp	r2, #0
   2aede:	f000 811d 	beq.w	2b11c <nrf_cloud_format_cell_pos_req_json+0x258>
	lte_array = cJSON_AddArrayToObjectCS(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2aee2:	4610      	mov	r0, r2
   2aee4:	498f      	ldr	r1, [pc, #572]	; (2b124 <nrf_cloud_format_cell_pos_req_json+0x260>)
   2aee6:	f014 fee9 	bl	3fcbc <cJSON_AddArrayToObjectCS>
	if (!lte_array) {
   2aeea:	9000      	str	r0, [sp, #0]
   2aeec:	2800      	cmp	r0, #0
   2aeee:	f000 8090 	beq.w	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
	for (size_t i = 0; i < inf_cnt; ++i) {
   2aef2:	f04f 0a00 	mov.w	sl, #0
	cJSON *nmr_array = NULL;
   2aef6:	46d3      	mov	fp, sl
		lte_obj = cJSON_CreateObject();
   2aef8:	f007 f8f2 	bl	320e0 <cJSON_CreateObject>
		if (!lte_obj) {
   2aefc:	4605      	mov	r5, r0
   2aefe:	2800      	cmp	r0, #0
   2af00:	f000 8087 	beq.w	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
		if (!cJSON_AddItemToArray(lte_array, lte_obj)) {
   2af04:	4601      	mov	r1, r0
   2af06:	9800      	ldr	r0, [sp, #0]
   2af08:	f014 fe36 	bl	3fb78 <cJSON_AddItemToArray>
   2af0c:	b918      	cbnz	r0, 2af16 <nrf_cloud_format_cell_pos_req_json+0x52>
				cJSON_Delete(ncell_obj);
   2af0e:	4628      	mov	r0, r5
   2af10:	f007 f824 	bl	31f5c <cJSON_Delete>
				goto cleanup;
   2af14:	e07d      	b.n	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
		if (json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_ECI, cur->id) ||
   2af16:	68a0      	ldr	r0, [r4, #8]
   2af18:	f7f1 fbd4 	bl	1c6c4 <__aeabi_ui2d>
   2af1c:	4602      	mov	r2, r0
   2af1e:	460b      	mov	r3, r1
   2af20:	4628      	mov	r0, r5
   2af22:	4981      	ldr	r1, [pc, #516]	; (2b128 <nrf_cloud_format_cell_pos_req_json+0x264>)
   2af24:	f014 fb5e 	bl	3f5e4 <json_add_num_cs>
   2af28:	2800      	cmp	r0, #0
   2af2a:	d172      	bne.n	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MCC, cur->mcc) ||
   2af2c:	6820      	ldr	r0, [r4, #0]
   2af2e:	f7f1 fbd9 	bl	1c6e4 <__aeabi_i2d>
   2af32:	4602      	mov	r2, r0
   2af34:	460b      	mov	r3, r1
   2af36:	4628      	mov	r0, r5
   2af38:	497c      	ldr	r1, [pc, #496]	; (2b12c <nrf_cloud_format_cell_pos_req_json+0x268>)
   2af3a:	f014 fb53 	bl	3f5e4 <json_add_num_cs>
		if (json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_ECI, cur->id) ||
   2af3e:	2800      	cmp	r0, #0
   2af40:	d167      	bne.n	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MNC, cur->mnc) ||
   2af42:	6860      	ldr	r0, [r4, #4]
   2af44:	f7f1 fbce 	bl	1c6e4 <__aeabi_i2d>
   2af48:	4602      	mov	r2, r0
   2af4a:	460b      	mov	r3, r1
   2af4c:	4628      	mov	r0, r5
   2af4e:	4978      	ldr	r1, [pc, #480]	; (2b130 <nrf_cloud_format_cell_pos_req_json+0x26c>)
   2af50:	f014 fb48 	bl	3f5e4 <json_add_num_cs>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MCC, cur->mcc) ||
   2af54:	2800      	cmp	r0, #0
   2af56:	d15c      	bne.n	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_TAC, cur->tac)) {
   2af58:	68e0      	ldr	r0, [r4, #12]
   2af5a:	f7f1 fbb3 	bl	1c6c4 <__aeabi_ui2d>
   2af5e:	4602      	mov	r2, r0
   2af60:	460b      	mov	r3, r1
   2af62:	4628      	mov	r0, r5
   2af64:	4973      	ldr	r1, [pc, #460]	; (2b134 <nrf_cloud_format_cell_pos_req_json+0x270>)
   2af66:	f014 fb3d 	bl	3f5e4 <json_add_num_cs>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MNC, cur->mnc) ||
   2af6a:	4606      	mov	r6, r0
   2af6c:	2800      	cmp	r0, #0
   2af6e:	d150      	bne.n	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
		if ((cur->earfcn != NRF_CLOUD_CELL_POS_OMIT_EARFCN) &&
   2af70:	6920      	ldr	r0, [r4, #16]
   2af72:	1c43      	adds	r3, r0, #1
   2af74:	d143      	bne.n	2affe <nrf_cloud_format_cell_pos_req_json+0x13a>
		if ((cur->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2af76:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   2af7a:	2bff      	cmp	r3, #255	; 0xff
   2af7c:	d154      	bne.n	2b028 <nrf_cloud_format_cell_pos_req_json+0x164>
		if ((cur->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2af7e:	f9b4 002c 	ldrsh.w	r0, [r4, #44]	; 0x2c
   2af82:	28ff      	cmp	r0, #255	; 0xff
   2af84:	d010      	beq.n	2afa8 <nrf_cloud_format_cell_pos_req_json+0xe4>
				    RSRQ_ADJ(cur->rsrq))) {
   2af86:	f7f1 fbad 	bl	1c6e4 <__aeabi_i2d>
   2af8a:	2200      	movs	r2, #0
   2af8c:	4b6a      	ldr	r3, [pc, #424]	; (2b138 <nrf_cloud_format_cell_pos_req_json+0x274>)
   2af8e:	f7f1 fc13 	bl	1c7b8 <__aeabi_dmul>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRQ,
   2af92:	2200      	movs	r2, #0
   2af94:	4b69      	ldr	r3, [pc, #420]	; (2b13c <nrf_cloud_format_cell_pos_req_json+0x278>)
   2af96:	f7f1 fa57 	bl	1c448 <__aeabi_dsub>
   2af9a:	4602      	mov	r2, r0
   2af9c:	460b      	mov	r3, r1
   2af9e:	4628      	mov	r0, r5
   2afa0:	4967      	ldr	r1, [pc, #412]	; (2b140 <nrf_cloud_format_cell_pos_req_json+0x27c>)
   2afa2:	f014 fb1f 	bl	3f5e4 <json_add_num_cs>
		if ((cur->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2afa6:	bba0      	cbnz	r0, 2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
		if (cur->timing_advance != NRF_CLOUD_CELL_POS_OMIT_TIME_ADV) {
   2afa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2afac:	8aa3      	ldrh	r3, [r4, #20]
   2afae:	4293      	cmp	r3, r2
   2afb0:	d00d      	beq.n	2afce <nrf_cloud_format_cell_pos_req_json+0x10a>
			if (json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_T_ADV, t_adv)) {
   2afb2:	f245 0020 	movw	r0, #20512	; 0x5020
   2afb6:	4298      	cmp	r0, r3
   2afb8:	bf28      	it	cs
   2afba:	4618      	movcs	r0, r3
   2afbc:	f7f1 fb82 	bl	1c6c4 <__aeabi_ui2d>
   2afc0:	4602      	mov	r2, r0
   2afc2:	460b      	mov	r3, r1
   2afc4:	4628      	mov	r0, r5
   2afc6:	495f      	ldr	r1, [pc, #380]	; (2b144 <nrf_cloud_format_cell_pos_req_json+0x280>)
   2afc8:	f014 fb0c 	bl	3f5e4 <json_add_num_cs>
   2afcc:	bb08      	cbnz	r0, 2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
		if (lte->ncells_count) {
   2afce:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   2afd2:	2a00      	cmp	r2, #0
   2afd4:	d138      	bne.n	2b048 <nrf_cloud_format_cell_pos_req_json+0x184>
		for (uint8_t j = 0; nmr_array && (j < lte->ncells_count); ++j) {
   2afd6:	f04f 0900 	mov.w	r9, #0
   2afda:	fa5f f789 	uxtb.w	r7, r9
   2afde:	f1bb 0f00 	cmp.w	fp, #0
   2afe2:	d003      	beq.n	2afec <nrf_cloud_format_cell_pos_req_json+0x128>
   2afe4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2afe8:	42bb      	cmp	r3, r7
   2afea:	d83f      	bhi.n	2b06c <nrf_cloud_format_cell_pos_req_json+0x1a8>
	for (size_t i = 0; i < inf_cnt; ++i) {
   2afec:	9b01      	ldr	r3, [sp, #4]
   2afee:	f10a 0a01 	add.w	sl, sl, #1
   2aff2:	459a      	cmp	sl, r3
   2aff4:	f104 0438 	add.w	r4, r4, #56	; 0x38
   2aff8:	f47f af7e 	bne.w	2aef8 <nrf_cloud_format_cell_pos_req_json+0x34>
   2affc:	e02a      	b.n	2b054 <nrf_cloud_format_cell_pos_req_json+0x190>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_EARFCN, cur->earfcn)) {
   2affe:	f7f1 fb61 	bl	1c6c4 <__aeabi_ui2d>
   2b002:	4602      	mov	r2, r0
   2b004:	460b      	mov	r3, r1
   2b006:	4628      	mov	r0, r5
   2b008:	494f      	ldr	r1, [pc, #316]	; (2b148 <nrf_cloud_format_cell_pos_req_json+0x284>)
   2b00a:	f014 faeb 	bl	3f5e4 <json_add_num_cs>
		if ((cur->earfcn != NRF_CLOUD_CELL_POS_OMIT_EARFCN) &&
   2b00e:	2800      	cmp	r0, #0
   2b010:	d0b1      	beq.n	2af76 <nrf_cloud_format_cell_pos_req_json+0xb2>
	cJSON_DeleteItemFromObject(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2b012:	4640      	mov	r0, r8
   2b014:	4943      	ldr	r1, [pc, #268]	; (2b124 <nrf_cloud_format_cell_pos_req_json+0x260>)
   2b016:	f014 fddd 	bl	3fbd4 <cJSON_DeleteItemFromObject>
	LOG_ERR("Failed to format location request, out of memory");
   2b01a:	2145      	movs	r1, #69	; 0x45
   2b01c:	484b      	ldr	r0, [pc, #300]	; (2b14c <nrf_cloud_format_cell_pos_req_json+0x288>)
   2b01e:	f011 fd6f 	bl	3cb00 <z_log_minimal_printk>
	return -ENOMEM;
   2b022:	f06f 060b 	mvn.w	r6, #11
   2b026:	e015      	b.n	2b054 <nrf_cloud_format_cell_pos_req_json+0x190>
				    RSRP_ADJ(cur->rsrp))) {
   2b028:	2b00      	cmp	r3, #0
   2b02a:	bfd4      	ite	le
   2b02c:	208c      	movle	r0, #140	; 0x8c
   2b02e:	208d      	movgt	r0, #141	; 0x8d
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRP,
   2b030:	1a18      	subs	r0, r3, r0
   2b032:	f7f1 fb57 	bl	1c6e4 <__aeabi_i2d>
   2b036:	4602      	mov	r2, r0
   2b038:	460b      	mov	r3, r1
   2b03a:	4628      	mov	r0, r5
   2b03c:	4944      	ldr	r1, [pc, #272]	; (2b150 <nrf_cloud_format_cell_pos_req_json+0x28c>)
   2b03e:	f014 fad1 	bl	3f5e4 <json_add_num_cs>
		if ((cur->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b042:	2800      	cmp	r0, #0
   2b044:	d09b      	beq.n	2af7e <nrf_cloud_format_cell_pos_req_json+0xba>
   2b046:	e7e4      	b.n	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
			if (lte->neighbor_cells == NULL) {
   2b048:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b04a:	b93b      	cbnz	r3, 2b05c <nrf_cloud_format_cell_pos_req_json+0x198>
				LOG_WRN("Neighbor cell count is %u, but buffer is NULL",
   2b04c:	2157      	movs	r1, #87	; 0x57
   2b04e:	4841      	ldr	r0, [pc, #260]	; (2b154 <nrf_cloud_format_cell_pos_req_json+0x290>)
   2b050:	f011 fd56 	bl	3cb00 <z_log_minimal_printk>
}
   2b054:	4630      	mov	r0, r6
   2b056:	b005      	add	sp, #20
   2b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nmr_array = cJSON_AddArrayToObjectCS(lte_obj,
   2b05c:	4628      	mov	r0, r5
   2b05e:	493e      	ldr	r1, [pc, #248]	; (2b158 <nrf_cloud_format_cell_pos_req_json+0x294>)
   2b060:	f014 fe2c 	bl	3fcbc <cJSON_AddArrayToObjectCS>
			if (!nmr_array) {
   2b064:	4683      	mov	fp, r0
   2b066:	2800      	cmp	r0, #0
   2b068:	d1b5      	bne.n	2afd6 <nrf_cloud_format_cell_pos_req_json+0x112>
   2b06a:	e7d2      	b.n	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
			struct lte_lc_ncell *ncell = lte->neighbor_cells + j;
   2b06c:	013b      	lsls	r3, r7, #4
   2b06e:	9303      	str	r3, [sp, #12]
   2b070:	6b63      	ldr	r3, [r4, #52]	; 0x34
			if (ncell == NULL) {
   2b072:	eb13 1707 	adds.w	r7, r3, r7, lsl #4
			struct lte_lc_ncell *ncell = lte->neighbor_cells + j;
   2b076:	9302      	str	r3, [sp, #8]
			if (ncell == NULL) {
   2b078:	d0b8      	beq.n	2afec <nrf_cloud_format_cell_pos_req_json+0x128>
			ncell_obj = cJSON_CreateObject();
   2b07a:	f007 f831 	bl	320e0 <cJSON_CreateObject>
			if (!ncell_obj) {
   2b07e:	4605      	mov	r5, r0
   2b080:	2800      	cmp	r0, #0
   2b082:	d0c6      	beq.n	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
			if (!cJSON_AddItemToArray(nmr_array, ncell_obj)) {
   2b084:	4601      	mov	r1, r0
   2b086:	4658      	mov	r0, fp
   2b088:	f014 fd76 	bl	3fb78 <cJSON_AddItemToArray>
   2b08c:	2800      	cmp	r0, #0
   2b08e:	f43f af3e 	beq.w	2af0e <nrf_cloud_format_cell_pos_req_json+0x4a>
			if (json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_EARFCN,
   2b092:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2b096:	5898      	ldr	r0, [r3, r2]
   2b098:	f7f1 fb14 	bl	1c6c4 <__aeabi_ui2d>
   2b09c:	4602      	mov	r2, r0
   2b09e:	460b      	mov	r3, r1
   2b0a0:	4628      	mov	r0, r5
   2b0a2:	4929      	ldr	r1, [pc, #164]	; (2b148 <nrf_cloud_format_cell_pos_req_json+0x284>)
   2b0a4:	f014 fa9e 	bl	3f5e4 <json_add_num_cs>
   2b0a8:	2800      	cmp	r0, #0
   2b0aa:	d1b2      	bne.n	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
			    json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_PCI,
   2b0ac:	8938      	ldrh	r0, [r7, #8]
   2b0ae:	f7f1 fb09 	bl	1c6c4 <__aeabi_ui2d>
   2b0b2:	4602      	mov	r2, r0
   2b0b4:	460b      	mov	r3, r1
   2b0b6:	4628      	mov	r0, r5
   2b0b8:	4928      	ldr	r1, [pc, #160]	; (2b15c <nrf_cloud_format_cell_pos_req_json+0x298>)
   2b0ba:	f014 fa93 	bl	3f5e4 <json_add_num_cs>
					    ncell->earfcn) ||
   2b0be:	2800      	cmp	r0, #0
   2b0c0:	d1a7      	bne.n	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
			if ((ncell->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b0c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   2b0c6:	2bff      	cmp	r3, #255	; 0xff
   2b0c8:	d118      	bne.n	2b0fc <nrf_cloud_format_cell_pos_req_json+0x238>
			if ((ncell->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2b0ca:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
   2b0ce:	28ff      	cmp	r0, #255	; 0xff
   2b0d0:	d011      	beq.n	2b0f6 <nrf_cloud_format_cell_pos_req_json+0x232>
					    RSRQ_ADJ(ncell->rsrq))) {
   2b0d2:	f7f1 fb07 	bl	1c6e4 <__aeabi_i2d>
   2b0d6:	2200      	movs	r2, #0
   2b0d8:	4b17      	ldr	r3, [pc, #92]	; (2b138 <nrf_cloud_format_cell_pos_req_json+0x274>)
   2b0da:	f7f1 fb6d 	bl	1c7b8 <__aeabi_dmul>
			    json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRQ,
   2b0de:	2200      	movs	r2, #0
   2b0e0:	4b16      	ldr	r3, [pc, #88]	; (2b13c <nrf_cloud_format_cell_pos_req_json+0x278>)
   2b0e2:	f7f1 f9b1 	bl	1c448 <__aeabi_dsub>
   2b0e6:	4602      	mov	r2, r0
   2b0e8:	460b      	mov	r3, r1
   2b0ea:	4628      	mov	r0, r5
   2b0ec:	4914      	ldr	r1, [pc, #80]	; (2b140 <nrf_cloud_format_cell_pos_req_json+0x27c>)
   2b0ee:	f014 fa79 	bl	3f5e4 <json_add_num_cs>
			if ((ncell->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2b0f2:	2800      	cmp	r0, #0
   2b0f4:	d18d      	bne.n	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
		for (uint8_t j = 0; nmr_array && (j < lte->ncells_count); ++j) {
   2b0f6:	f109 0901 	add.w	r9, r9, #1
   2b0fa:	e76e      	b.n	2afda <nrf_cloud_format_cell_pos_req_json+0x116>
					    RSRP_ADJ(ncell->rsrp))) {
   2b0fc:	2b00      	cmp	r3, #0
   2b0fe:	bfd4      	ite	le
   2b100:	208c      	movle	r0, #140	; 0x8c
   2b102:	208d      	movgt	r0, #141	; 0x8d
			    json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRP,
   2b104:	1a18      	subs	r0, r3, r0
   2b106:	f7f1 faed 	bl	1c6e4 <__aeabi_i2d>
   2b10a:	4602      	mov	r2, r0
   2b10c:	460b      	mov	r3, r1
   2b10e:	4628      	mov	r0, r5
   2b110:	490f      	ldr	r1, [pc, #60]	; (2b150 <nrf_cloud_format_cell_pos_req_json+0x28c>)
   2b112:	f014 fa67 	bl	3f5e4 <json_add_num_cs>
			if ((ncell->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b116:	2800      	cmp	r0, #0
   2b118:	d0d7      	beq.n	2b0ca <nrf_cloud_format_cell_pos_req_json+0x206>
   2b11a:	e77a      	b.n	2b012 <nrf_cloud_format_cell_pos_req_json+0x14e>
		return -EINVAL;
   2b11c:	f06f 0615 	mvn.w	r6, #21
   2b120:	e798      	b.n	2b054 <nrf_cloud_format_cell_pos_req_json+0x190>
   2b122:	bf00      	nop
   2b124:	000480e2 	.word	0x000480e2
   2b128:	00047cba 	.word	0x00047cba
   2b12c:	000461c9 	.word	0x000461c9
   2b130:	000461d0 	.word	0x000461d0
   2b134:	00047cb6 	.word	0x00047cb6
   2b138:	3fe00000 	.word	0x3fe00000
   2b13c:	40338000 	.word	0x40338000
   2b140:	000480ed 	.word	0x000480ed
   2b144:	000480f2 	.word	0x000480f2
   2b148:	000480e6 	.word	0x000480e6
   2b14c:	00048131 	.word	0x00048131
   2b150:	000460d0 	.word	0x000460d0
   2b154:	000480f6 	.word	0x000480f6
   2b158:	00048129 	.word	0x00048129
   2b15c:	0004812d 	.word	0x0004812d

0002b160 <nrf_cloud_handle_error_message>:

int nrf_cloud_handle_error_message(const char *const buf,
				   const char *const app_id,
				   const char *const msg_type,
				   enum nrf_cloud_error * const err)
{
   2b160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b162:	460e      	mov	r6, r1
   2b164:	4617      	mov	r7, r2
   2b166:	461c      	mov	r4, r3
	if (!buf || !err) {
   2b168:	b320      	cbz	r0, 2b1b4 <nrf_cloud_handle_error_message+0x54>
   2b16a:	b31b      	cbz	r3, 2b1b4 <nrf_cloud_handle_error_message+0x54>
	}

	int ret;
	cJSON *root_obj;

	*err = NRF_CLOUD_ERROR_NONE;
   2b16c:	2300      	movs	r3, #0
   2b16e:	6023      	str	r3, [r4, #0]

	root_obj = cJSON_Parse(buf);
   2b170:	f014 fce3 	bl	3fb3a <cJSON_Parse>
	if (!root_obj) {
   2b174:	4605      	mov	r5, r0
   2b176:	b300      	cbz	r0, 2b1ba <nrf_cloud_handle_error_message+0x5a>
		LOG_DBG("No JSON found");
		return -ENODATA;
	}

	ret = get_error_code_value(root_obj, err);
   2b178:	4621      	mov	r1, r4
   2b17a:	f7fe ffff 	bl	2a17c <get_error_code_value>
	if (ret) {
   2b17e:	4604      	mov	r4, r0
   2b180:	b908      	cbnz	r0, 2b186 <nrf_cloud_handle_error_message+0x26>
		goto clean_up;
	}

	/* If provided, check for matching app id and msg type */
	if (msg_type &&
   2b182:	b92f      	cbnz	r7, 2b190 <nrf_cloud_handle_error_message+0x30>
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
		ret = -ENOENT;
		goto clean_up;
	}
	if (app_id &&
   2b184:	b976      	cbnz	r6, 2b1a4 <nrf_cloud_handle_error_message+0x44>
		ret = -ENOENT;
		goto clean_up;
	}

clean_up:
	cJSON_Delete(root_obj);
   2b186:	4628      	mov	r0, r5
   2b188:	f006 fee8 	bl	31f5c <cJSON_Delete>
	return ret;
}
   2b18c:	4620      	mov	r0, r4
   2b18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
   2b190:	463a      	mov	r2, r7
   2b192:	4628      	mov	r0, r5
   2b194:	490a      	ldr	r1, [pc, #40]	; (2b1c0 <nrf_cloud_handle_error_message+0x60>)
   2b196:	f7fe ff7b 	bl	2a090 <json_item_string_exists>
	if (msg_type &&
   2b19a:	2800      	cmp	r0, #0
   2b19c:	d1f2      	bne.n	2b184 <nrf_cloud_handle_error_message+0x24>
		ret = -ENOENT;
   2b19e:	f06f 0401 	mvn.w	r4, #1
		goto clean_up;
   2b1a2:	e7f0      	b.n	2b186 <nrf_cloud_handle_error_message+0x26>
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_APPID_KEY, app_id)) {
   2b1a4:	4632      	mov	r2, r6
   2b1a6:	4628      	mov	r0, r5
   2b1a8:	4906      	ldr	r1, [pc, #24]	; (2b1c4 <nrf_cloud_handle_error_message+0x64>)
   2b1aa:	f7fe ff71 	bl	2a090 <json_item_string_exists>
	if (app_id &&
   2b1ae:	2800      	cmp	r0, #0
   2b1b0:	d1e9      	bne.n	2b186 <nrf_cloud_handle_error_message+0x26>
   2b1b2:	e7f4      	b.n	2b19e <nrf_cloud_handle_error_message+0x3e>
		return -EINVAL;
   2b1b4:	f06f 0415 	mvn.w	r4, #21
   2b1b8:	e7e8      	b.n	2b18c <nrf_cloud_handle_error_message+0x2c>
		return -ENODATA;
   2b1ba:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2b1be:	e7e5      	b.n	2b18c <nrf_cloud_handle_error_message+0x2c>
   2b1c0:	00043633 	.word	0x00043633
   2b1c4:	000435e2 	.word	0x000435e2

0002b1c8 <nrf_cloud_parse_pgps_response>:
{
   2b1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b1ca:	460c      	mov	r4, r1
	if (!response || !result ||
   2b1cc:	4606      	mov	r6, r0
{
   2b1ce:	b085      	sub	sp, #20
	if (!response || !result ||
   2b1d0:	2800      	cmp	r0, #0
   2b1d2:	d076      	beq.n	2b2c2 <nrf_cloud_parse_pgps_response+0xfa>
   2b1d4:	2900      	cmp	r1, #0
   2b1d6:	d074      	beq.n	2b2c2 <nrf_cloud_parse_pgps_response+0xfa>
   2b1d8:	680b      	ldr	r3, [r1, #0]
   2b1da:	2b00      	cmp	r3, #0
   2b1dc:	d071      	beq.n	2b2c2 <nrf_cloud_parse_pgps_response+0xfa>
	    !result->host || !result->host_sz ||
   2b1de:	684b      	ldr	r3, [r1, #4]
   2b1e0:	2b00      	cmp	r3, #0
   2b1e2:	d06e      	beq.n	2b2c2 <nrf_cloud_parse_pgps_response+0xfa>
   2b1e4:	688b      	ldr	r3, [r1, #8]
   2b1e6:	2b00      	cmp	r3, #0
   2b1e8:	d06b      	beq.n	2b2c2 <nrf_cloud_parse_pgps_response+0xfa>
	    !result->path || !result->path_sz) {
   2b1ea:	68cb      	ldr	r3, [r1, #12]
   2b1ec:	2b00      	cmp	r3, #0
   2b1ee:	d068      	beq.n	2b2c2 <nrf_cloud_parse_pgps_response+0xfa>
	char *host_ptr = NULL;
   2b1f0:	2700      	movs	r7, #0
	char *path_ptr = NULL;
   2b1f2:	e9cd 7701 	strd	r7, r7, [sp, #4]
	cJSON *rsp_obj = cJSON_Parse(response);
   2b1f6:	f014 fca0 	bl	3fb3a <cJSON_Parse>
	if (!rsp_obj) {
   2b1fa:	4605      	mov	r5, r0
   2b1fc:	b940      	cbnz	r0, 2b210 <nrf_cloud_parse_pgps_response+0x48>
		LOG_ERR("P-GPS response does not contain valid JSON");
   2b1fe:	2145      	movs	r1, #69	; 0x45
   2b200:	4833      	ldr	r0, [pc, #204]	; (2b2d0 <nrf_cloud_parse_pgps_response+0x108>)
   2b202:	f011 fc7d 	bl	3cb00 <z_log_minimal_printk>
		err = -EBADMSG;
   2b206:	f06f 044c 	mvn.w	r4, #76	; 0x4c
}
   2b20a:	4620      	mov	r0, r4
   2b20c:	b005      	add	sp, #20
   2b20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cJSON_IsArray(rsp_obj)) {
   2b210:	f014 fdc3 	bl	3fd9a <cJSON_IsArray>
		if (get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_HOST, &host_ptr) ||
   2b214:	aa01      	add	r2, sp, #4
	if (cJSON_IsArray(rsp_obj)) {
   2b216:	b300      	cbz	r0, 2b25a <nrf_cloud_parse_pgps_response+0x92>
		if (get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_HOST, &host_ptr) ||
   2b218:	4639      	mov	r1, r7
   2b21a:	4628      	mov	r0, r5
   2b21c:	f7ff fd7e 	bl	2ad1c <get_string_from_array>
   2b220:	b130      	cbz	r0, 2b230 <nrf_cloud_parse_pgps_response+0x68>
			LOG_ERR("Invalid P-GPS array response format");
   2b222:	2145      	movs	r1, #69	; 0x45
   2b224:	482b      	ldr	r0, [pc, #172]	; (2b2d4 <nrf_cloud_parse_pgps_response+0x10c>)
			LOG_ERR("Invalid P-GPS response format");
   2b226:	f011 fc6b 	bl	3cb00 <z_log_minimal_printk>
			err = -EFTYPE;
   2b22a:	f06f 044e 	mvn.w	r4, #78	; 0x4e
		goto cleanup;
   2b22e:	e032      	b.n	2b296 <nrf_cloud_parse_pgps_response+0xce>
		    get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_PATH, &path_ptr)) {
   2b230:	2101      	movs	r1, #1
   2b232:	4628      	mov	r0, r5
   2b234:	aa02      	add	r2, sp, #8
   2b236:	f7ff fd71 	bl	2ad1c <get_string_from_array>
		if (get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_HOST, &host_ptr) ||
   2b23a:	2800      	cmp	r0, #0
   2b23c:	d1f1      	bne.n	2b222 <nrf_cloud_parse_pgps_response+0x5a>
	if (!host_ptr || !path_ptr) {
   2b23e:	9801      	ldr	r0, [sp, #4]
   2b240:	2800      	cmp	r0, #0
   2b242:	d041      	beq.n	2b2c8 <nrf_cloud_parse_pgps_response+0x100>
   2b244:	9b02      	ldr	r3, [sp, #8]
   2b246:	2b00      	cmp	r3, #0
   2b248:	d03e      	beq.n	2b2c8 <nrf_cloud_parse_pgps_response+0x100>
	if ((result->host_sz <= strlen(host_ptr)) ||
   2b24a:	6866      	ldr	r6, [r4, #4]
   2b24c:	f7f1 fff9 	bl	1d242 <strlen>
   2b250:	4286      	cmp	r6, r0
   2b252:	d824      	bhi.n	2b29e <nrf_cloud_parse_pgps_response+0xd6>
		err = -ENOBUFS;
   2b254:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2b258:	e01d      	b.n	2b296 <nrf_cloud_parse_pgps_response+0xce>
	} else if (get_string_from_obj(rsp_obj, NRF_CLOUD_PGPS_RCV_REST_HOST, &host_ptr) ||
   2b25a:	4628      	mov	r0, r5
   2b25c:	491e      	ldr	r1, [pc, #120]	; (2b2d8 <nrf_cloud_parse_pgps_response+0x110>)
   2b25e:	f7ff fd81 	bl	2ad64 <get_string_from_obj>
   2b262:	b148      	cbz	r0, 2b278 <nrf_cloud_parse_pgps_response+0xb0>
		err = nrf_cloud_handle_error_message(response, NRF_CLOUD_JSON_APPID_VAL_PGPS,
   2b264:	4630      	mov	r0, r6
   2b266:	4a1d      	ldr	r2, [pc, #116]	; (2b2dc <nrf_cloud_parse_pgps_response+0x114>)
   2b268:	491d      	ldr	r1, [pc, #116]	; (2b2e0 <nrf_cloud_parse_pgps_response+0x118>)
   2b26a:	ab03      	add	r3, sp, #12
   2b26c:	f7ff ff78 	bl	2b160 <nrf_cloud_handle_error_message>
		if (!err) {
   2b270:	b150      	cbz	r0, 2b288 <nrf_cloud_parse_pgps_response+0xc0>
			LOG_ERR("Invalid P-GPS response format");
   2b272:	2145      	movs	r1, #69	; 0x45
   2b274:	481b      	ldr	r0, [pc, #108]	; (2b2e4 <nrf_cloud_parse_pgps_response+0x11c>)
   2b276:	e7d6      	b.n	2b226 <nrf_cloud_parse_pgps_response+0x5e>
		   get_string_from_obj(rsp_obj, NRF_CLOUD_PGPS_RCV_REST_PATH, &path_ptr)) {
   2b278:	4628      	mov	r0, r5
   2b27a:	491b      	ldr	r1, [pc, #108]	; (2b2e8 <nrf_cloud_parse_pgps_response+0x120>)
   2b27c:	aa02      	add	r2, sp, #8
   2b27e:	f7ff fd71 	bl	2ad64 <get_string_from_obj>
	} else if (get_string_from_obj(rsp_obj, NRF_CLOUD_PGPS_RCV_REST_HOST, &host_ptr) ||
   2b282:	2800      	cmp	r0, #0
   2b284:	d0db      	beq.n	2b23e <nrf_cloud_parse_pgps_response+0x76>
   2b286:	e7ed      	b.n	2b264 <nrf_cloud_parse_pgps_response+0x9c>
			LOG_ERR("nRF Cloud returned P-GPS error: %d", nrf_err);
   2b288:	2145      	movs	r1, #69	; 0x45
   2b28a:	9a03      	ldr	r2, [sp, #12]
   2b28c:	4817      	ldr	r0, [pc, #92]	; (2b2ec <nrf_cloud_parse_pgps_response+0x124>)
   2b28e:	f011 fc37 	bl	3cb00 <z_log_minimal_printk>
			err = -EFAULT;
   2b292:	f06f 040d 	mvn.w	r4, #13
		cJSON_Delete(rsp_obj);
   2b296:	4628      	mov	r0, r5
   2b298:	f006 fe60 	bl	31f5c <cJSON_Delete>
   2b29c:	e7b5      	b.n	2b20a <nrf_cloud_parse_pgps_response+0x42>
	    (result->path_sz <= strlen(path_ptr))) {
   2b29e:	9802      	ldr	r0, [sp, #8]
   2b2a0:	68e6      	ldr	r6, [r4, #12]
   2b2a2:	f7f1 ffce 	bl	1d242 <strlen>
	if ((result->host_sz <= strlen(host_ptr)) ||
   2b2a6:	4286      	cmp	r6, r0
   2b2a8:	d9d4      	bls.n	2b254 <nrf_cloud_parse_pgps_response+0x8c>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2b2aa:	6862      	ldr	r2, [r4, #4]
   2b2ac:	9901      	ldr	r1, [sp, #4]
   2b2ae:	6820      	ldr	r0, [r4, #0]
   2b2b0:	f016 faa7 	bl	41802 <strncpy>
   2b2b4:	68e2      	ldr	r2, [r4, #12]
   2b2b6:	68a0      	ldr	r0, [r4, #8]
   2b2b8:	9902      	ldr	r1, [sp, #8]
   2b2ba:	f016 faa2 	bl	41802 <strncpy>
	int err = 0;
   2b2be:	2400      	movs	r4, #0
   2b2c0:	e7e9      	b.n	2b296 <nrf_cloud_parse_pgps_response+0xce>
		return -EINVAL;
   2b2c2:	f06f 0415 	mvn.w	r4, #21
   2b2c6:	e7a0      	b.n	2b20a <nrf_cloud_parse_pgps_response+0x42>
		err = -ENOSTR;
   2b2c8:	f06f 043b 	mvn.w	r4, #59	; 0x3b
   2b2cc:	e7e3      	b.n	2b296 <nrf_cloud_parse_pgps_response+0xce>
   2b2ce:	bf00      	nop
   2b2d0:	00048167 	.word	0x00048167
   2b2d4:	00048197 	.word	0x00048197
   2b2d8:	0004522c 	.word	0x0004522c
   2b2dc:	0004362e 	.word	0x0004362e
   2b2e0:	000481c0 	.word	0x000481c0
   2b2e4:	000481ed 	.word	0x000481ed
   2b2e8:	0004801b 	.word	0x0004801b
   2b2ec:	000481c5 	.word	0x000481c5

0002b2f0 <nrf_cloud_parse_cell_pos_response>:

int nrf_cloud_parse_cell_pos_response(const char *const buf,
				      struct nrf_cloud_cell_pos_result *result)
{
   2b2f0:	b570      	push	{r4, r5, r6, lr}
   2b2f2:	460d      	mov	r5, r1
	int ret = 1; /* 1: cell-based location not found */
	cJSON *cell_pos_obj;
	cJSON *data_obj;

	if ((buf == NULL) || (result == NULL)) {
   2b2f4:	2800      	cmp	r0, #0
   2b2f6:	d051      	beq.n	2b39c <nrf_cloud_parse_cell_pos_response+0xac>
   2b2f8:	2900      	cmp	r1, #0
   2b2fa:	d04f      	beq.n	2b39c <nrf_cloud_parse_cell_pos_response+0xac>
		return -EINVAL;
	}

	cell_pos_obj = cJSON_Parse(buf);
   2b2fc:	f014 fc1d 	bl	3fb3a <cJSON_Parse>
	if (!cell_pos_obj) {
   2b300:	4606      	mov	r6, r0
   2b302:	2800      	cmp	r0, #0
   2b304:	d04d      	beq.n	2b3a2 <nrf_cloud_parse_cell_pos_response+0xb2>
	}

	/* First, check to see if this is a REST payload, which is not wrapped in
	 * an nRF Cloud MQTT message
	 */
	ret = nrf_cloud_parse_cell_pos_json(cell_pos_obj, result);
   2b306:	4629      	mov	r1, r5
   2b308:	f7ff fd50 	bl	2adac <nrf_cloud_parse_cell_pos_json>
	if (ret == 0) {
   2b30c:	4604      	mov	r4, r0
   2b30e:	b140      	cbz	r0, 2b322 <nrf_cloud_parse_cell_pos_response+0x32>
		goto cleanup;
	}

	/* Clear the error flag and check for MQTT payload format */
	result->err = NRF_CLOUD_ERROR_NONE;
   2b310:	2300      	movs	r3, #0
	ret = 1;

	/* Check for nRF Cloud MQTT message; valid appId and msgType */
	if (!json_item_string_exists(cell_pos_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b312:	4630      	mov	r0, r6
   2b314:	4a24      	ldr	r2, [pc, #144]	; (2b3a8 <nrf_cloud_parse_cell_pos_response+0xb8>)
   2b316:	4925      	ldr	r1, [pc, #148]	; (2b3ac <nrf_cloud_parse_cell_pos_response+0xbc>)
	result->err = NRF_CLOUD_ERROR_NONE;
   2b318:	61eb      	str	r3, [r5, #28]
	if (!json_item_string_exists(cell_pos_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b31a:	f7fe feb9 	bl	2a090 <json_item_string_exists>
   2b31e:	b9b0      	cbnz	r0, 2b34e <nrf_cloud_parse_cell_pos_response+0x5e>
	ret = 1;
   2b320:	2401      	movs	r4, #1
		LOG_ERR("Expected data not found in cellular positioning message");
		ret = -EBADMSG;
	}

cleanup:
	cJSON_Delete(cell_pos_obj);
   2b322:	4630      	mov	r0, r6
   2b324:	f006 fe1a 	bl	31f5c <cJSON_Delete>

	if (ret < 0) {
   2b328:	2c00      	cmp	r4, #0
   2b32a:	da0e      	bge.n	2b34a <nrf_cloud_parse_cell_pos_response+0x5a>
		/* Clear data on error */
		result->lat = 0.0;
   2b32c:	2300      	movs	r3, #0
   2b32e:	2200      	movs	r2, #0
   2b330:	e9c5 2302 	strd	r2, r3, [r5, #8]
		result->lon = 0.0;
   2b334:	e9c5 2304 	strd	r2, r3, [r5, #16]
		result->unc = 0;
   2b338:	2300      	movs	r3, #0
   2b33a:	61ab      	str	r3, [r5, #24]
		result->type = CELL_POS_TYPE__INVALID;
   2b33c:	2302      	movs	r3, #2
   2b33e:	702b      	strb	r3, [r5, #0]

		/* Set to unknown error if an error code was not found */
		if (result->err == NRF_CLOUD_ERROR_NONE) {
   2b340:	69eb      	ldr	r3, [r5, #28]
   2b342:	b913      	cbnz	r3, 2b34a <nrf_cloud_parse_cell_pos_response+0x5a>
			result->err = NRF_CLOUD_ERROR_UNKNOWN;
   2b344:	f04f 33ff 	mov.w	r3, #4294967295
   2b348:	61eb      	str	r3, [r5, #28]
		}
	}

	return ret;
}
   2b34a:	4620      	mov	r0, r4
   2b34c:	bd70      	pop	{r4, r5, r6, pc}
	    !json_item_string_exists(cell_pos_obj, NRF_CLOUD_JSON_APPID_KEY,
   2b34e:	4630      	mov	r0, r6
   2b350:	4a17      	ldr	r2, [pc, #92]	; (2b3b0 <nrf_cloud_parse_cell_pos_response+0xc0>)
   2b352:	4918      	ldr	r1, [pc, #96]	; (2b3b4 <nrf_cloud_parse_cell_pos_response+0xc4>)
   2b354:	f7fe fe9c 	bl	2a090 <json_item_string_exists>
				     NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA) ||
   2b358:	2800      	cmp	r0, #0
   2b35a:	d0e1      	beq.n	2b320 <nrf_cloud_parse_cell_pos_response+0x30>
	data_obj = cJSON_GetObjectItem(cell_pos_obj, NRF_CLOUD_JSON_DATA_KEY);
   2b35c:	4630      	mov	r0, r6
   2b35e:	4916      	ldr	r1, [pc, #88]	; (2b3b8 <nrf_cloud_parse_cell_pos_response+0xc8>)
   2b360:	f014 fc00 	bl	3fb64 <cJSON_GetObjectItem>
	if (data_obj) {
   2b364:	b150      	cbz	r0, 2b37c <nrf_cloud_parse_cell_pos_response+0x8c>
		ret = nrf_cloud_parse_cell_pos_json(data_obj, result);
   2b366:	4629      	mov	r1, r5
   2b368:	f7ff fd20 	bl	2adac <nrf_cloud_parse_cell_pos_json>
		if (ret) {
   2b36c:	4604      	mov	r4, r0
   2b36e:	2800      	cmp	r0, #0
   2b370:	d0d7      	beq.n	2b322 <nrf_cloud_parse_cell_pos_response+0x32>
			LOG_ERR("Failed to parse cellular positioning data");
   2b372:	2145      	movs	r1, #69	; 0x45
   2b374:	4811      	ldr	r0, [pc, #68]	; (2b3bc <nrf_cloud_parse_cell_pos_response+0xcc>)
   2b376:	f011 fbc3 	bl	3cb00 <z_log_minimal_printk>
   2b37a:	e7d2      	b.n	2b322 <nrf_cloud_parse_cell_pos_response+0x32>
	ret = get_error_code_value(cell_pos_obj, &result->err);
   2b37c:	4630      	mov	r0, r6
   2b37e:	f105 011c 	add.w	r1, r5, #28
   2b382:	f7fe fefb 	bl	2a17c <get_error_code_value>
	if (ret) {
   2b386:	b930      	cbnz	r0, 2b396 <nrf_cloud_parse_cell_pos_response+0xa6>
		LOG_ERR("Expected data not found in cellular positioning message");
   2b388:	2145      	movs	r1, #69	; 0x45
   2b38a:	480d      	ldr	r0, [pc, #52]	; (2b3c0 <nrf_cloud_parse_cell_pos_response+0xd0>)
   2b38c:	f011 fbb8 	bl	3cb00 <z_log_minimal_printk>
		ret = -EBADMSG;
   2b390:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   2b394:	e7c5      	b.n	2b322 <nrf_cloud_parse_cell_pos_response+0x32>
		ret = -EFAULT;
   2b396:	f06f 040d 	mvn.w	r4, #13
   2b39a:	e7c2      	b.n	2b322 <nrf_cloud_parse_cell_pos_response+0x32>
		return -EINVAL;
   2b39c:	f06f 0415 	mvn.w	r4, #21
   2b3a0:	e7d3      	b.n	2b34a <nrf_cloud_parse_cell_pos_response+0x5a>
		return 1;
   2b3a2:	2401      	movs	r4, #1
   2b3a4:	e7d1      	b.n	2b34a <nrf_cloud_parse_cell_pos_response+0x5a>
   2b3a6:	bf00      	nop
   2b3a8:	0004362e 	.word	0x0004362e
   2b3ac:	00043633 	.word	0x00043633
   2b3b0:	00048210 	.word	0x00048210
   2b3b4:	000435e2 	.word	0x000435e2
   2b3b8:	0004370a 	.word	0x0004370a
   2b3bc:	00048219 	.word	0x00048219
   2b3c0:	00048248 	.word	0x00048248

0002b3c4 <nrf_cloud_detect_disconnection_request>:

	return ret;
}

bool nrf_cloud_detect_disconnection_request(const char *const buf)
{
   2b3c4:	b538      	push	{r3, r4, r5, lr}
	if (buf == NULL) {
   2b3c6:	4604      	mov	r4, r0
   2b3c8:	b910      	cbnz	r0, 2b3d0 <nrf_cloud_detect_disconnection_request+0xc>
		return false;
   2b3ca:	2400      	movs	r4, #0
		ret = false;
	}

	cJSON_Delete(discon_request_obj);
	return ret;
}
   2b3cc:	4620      	mov	r0, r4
   2b3ce:	bd38      	pop	{r3, r4, r5, pc}
	if (memchr(buf, '\0', NRF_CLOUD_JSON_MSG_MAX_LEN_DISCONNECT) == NULL) {
   2b3d0:	22c8      	movs	r2, #200	; 0xc8
   2b3d2:	2100      	movs	r1, #0
   2b3d4:	f015 fff0 	bl	413b8 <memchr>
   2b3d8:	2800      	cmp	r0, #0
   2b3da:	d0f6      	beq.n	2b3ca <nrf_cloud_detect_disconnection_request+0x6>
	if (strstr(buf, NRF_CLOUD_JSON_APPID_VAL_DEVICE) == NULL ||
   2b3dc:	4620      	mov	r0, r4
   2b3de:	490f      	ldr	r1, [pc, #60]	; (2b41c <nrf_cloud_detect_disconnection_request+0x58>)
   2b3e0:	f016 fa42 	bl	41868 <strstr>
   2b3e4:	2800      	cmp	r0, #0
   2b3e6:	d0f0      	beq.n	2b3ca <nrf_cloud_detect_disconnection_request+0x6>
	    strstr(buf, NRF_CLOUD_JSON_MSG_TYPE_VAL_DISCONNECT) == NULL) {
   2b3e8:	4620      	mov	r0, r4
   2b3ea:	490d      	ldr	r1, [pc, #52]	; (2b420 <nrf_cloud_detect_disconnection_request+0x5c>)
   2b3ec:	f016 fa3c 	bl	41868 <strstr>
	if (strstr(buf, NRF_CLOUD_JSON_APPID_VAL_DEVICE) == NULL ||
   2b3f0:	2800      	cmp	r0, #0
   2b3f2:	d0ea      	beq.n	2b3ca <nrf_cloud_detect_disconnection_request+0x6>
	cJSON *discon_request_obj = cJSON_Parse(buf);
   2b3f4:	4620      	mov	r0, r4
   2b3f6:	f014 fba0 	bl	3fb3a <cJSON_Parse>
	if (!json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b3fa:	4a09      	ldr	r2, [pc, #36]	; (2b420 <nrf_cloud_detect_disconnection_request+0x5c>)
   2b3fc:	4909      	ldr	r1, [pc, #36]	; (2b424 <nrf_cloud_detect_disconnection_request+0x60>)
	cJSON *discon_request_obj = cJSON_Parse(buf);
   2b3fe:	4605      	mov	r5, r0
	if (!json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b400:	f7fe fe46 	bl	2a090 <json_item_string_exists>
   2b404:	4604      	mov	r4, r0
   2b406:	b128      	cbz	r0, 2b414 <nrf_cloud_detect_disconnection_request+0x50>
	    !json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_APPID_KEY,
   2b408:	4628      	mov	r0, r5
   2b40a:	4a04      	ldr	r2, [pc, #16]	; (2b41c <nrf_cloud_detect_disconnection_request+0x58>)
   2b40c:	4906      	ldr	r1, [pc, #24]	; (2b428 <nrf_cloud_detect_disconnection_request+0x64>)
   2b40e:	f7fe fe3f 	bl	2a090 <json_item_string_exists>
   2b412:	4604      	mov	r4, r0
	cJSON_Delete(discon_request_obj);
   2b414:	4628      	mov	r0, r5
   2b416:	f006 fda1 	bl	31f5c <cJSON_Delete>
	return ret;
   2b41a:	e7d7      	b.n	2b3cc <nrf_cloud_detect_disconnection_request+0x8>
   2b41c:	00048285 	.word	0x00048285
   2b420:	0004828c 	.word	0x0004828c
   2b424:	00043633 	.word	0x00043633
   2b428:	000435e2 	.word	0x000435e2

0002b42c <nrf_cloud_configured_client_id_get>:
	return 0;
#endif
}

int nrf_cloud_configured_client_id_get(char * const buf, const size_t buf_sz)
{
   2b42c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b42e:	460d      	mov	r5, r1
	if (!buf || !buf_sz) {
   2b430:	4606      	mov	r6, r0
{
   2b432:	b089      	sub	sp, #36	; 0x24
	if (!buf || !buf_sz) {
   2b434:	b310      	cbz	r0, 2b47c <nrf_cloud_configured_client_id_get+0x50>
   2b436:	b309      	cbz	r1, 2b47c <nrf_cloud_configured_client_id_get+0x50>
	int print_ret;

#if defined(CONFIG_NRF_CLOUD_CLIENT_ID_SRC_IMEI)
	char imei_buf[CGSN_RESPONSE_LENGTH];

	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
   2b438:	af02      	add	r7, sp, #8
   2b43a:	2116      	movs	r1, #22
   2b43c:	4638      	mov	r0, r7
   2b43e:	4a12      	ldr	r2, [pc, #72]	; (2b488 <nrf_cloud_configured_client_id_get+0x5c>)
   2b440:	f009 fe18 	bl	35074 <nrf_modem_at_cmd>
	if (err) {
   2b444:	4604      	mov	r4, r0
   2b446:	b138      	cbz	r0, 2b458 <nrf_cloud_configured_client_id_get+0x2c>
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
   2b448:	4602      	mov	r2, r0
   2b44a:	2145      	movs	r1, #69	; 0x45
   2b44c:	480f      	ldr	r0, [pc, #60]	; (2b48c <nrf_cloud_configured_client_id_get+0x60>)
   2b44e:	f011 fb57 	bl	3cb00 <z_log_minimal_printk>
	} else if (print_ret >= buf_sz) {
		return -EMSGSIZE;
	}

	return 0;
}
   2b452:	4620      	mov	r0, r4
   2b454:	b009      	add	sp, #36	; 0x24
   2b456:	bdf0      	pop	{r4, r5, r6, r7, pc}
	print_ret = snprintk(buf, buf_sz, "%s%.*s",
   2b458:	230f      	movs	r3, #15
	imei_buf[NRF_IMEI_LEN] = 0;
   2b45a:	f88d 0017 	strb.w	r0, [sp, #23]
	print_ret = snprintk(buf, buf_sz, "%s%.*s",
   2b45e:	9300      	str	r3, [sp, #0]
   2b460:	4629      	mov	r1, r5
   2b462:	4630      	mov	r0, r6
   2b464:	4b0a      	ldr	r3, [pc, #40]	; (2b490 <nrf_cloud_configured_client_id_get+0x64>)
   2b466:	4a0b      	ldr	r2, [pc, #44]	; (2b494 <nrf_cloud_configured_client_id_get+0x68>)
   2b468:	9701      	str	r7, [sp, #4]
   2b46a:	f011 f939 	bl	3c6e0 <snprintk>
	if (print_ret <= 0) {
   2b46e:	2800      	cmp	r0, #0
   2b470:	dd07      	ble.n	2b482 <nrf_cloud_configured_client_id_get+0x56>
		return -EMSGSIZE;
   2b472:	4285      	cmp	r5, r0
   2b474:	bf98      	it	ls
   2b476:	f06f 0479 	mvnls.w	r4, #121	; 0x79
   2b47a:	e7ea      	b.n	2b452 <nrf_cloud_configured_client_id_get+0x26>
		return -EINVAL;
   2b47c:	f06f 0415 	mvn.w	r4, #21
   2b480:	e7e7      	b.n	2b452 <nrf_cloud_configured_client_id_get+0x26>
		return -EIO;
   2b482:	f06f 0404 	mvn.w	r4, #4
   2b486:	e7e4      	b.n	2b452 <nrf_cloud_configured_client_id_get+0x26>
   2b488:	000460fd 	.word	0x000460fd
   2b48c:	000482ac 	.word	0x000482ac
   2b490:	000482d2 	.word	0x000482d2
   2b494:	000482d7 	.word	0x000482d7

0002b498 <connect_error_translate>:
	return err;
}

static int connect_error_translate(const int err)
{
	switch (err) {
   2b498:	2800      	cmp	r0, #0
{
   2b49a:	b508      	push	{r3, lr}
	switch (err) {
   2b49c:	dc0e      	bgt.n	2b4bc <connect_error_translate+0x24>
   2b49e:	f110 0f0d 	cmn.w	r0, #13
   2b4a2:	da13      	bge.n	2b4cc <connect_error_translate+0x34>
   2b4a4:	f110 0f6f 	cmn.w	r0, #111	; 0x6f
   2b4a8:	d049      	beq.n	2b53e <connect_error_translate+0xa6>
   2b4aa:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   2b4ae:	da34      	bge.n	2b51a <connect_error_translate+0x82>
   2b4b0:	f110 0f77 	cmn.w	r0, #119	; 0x77
   2b4b4:	d046      	beq.n	2b544 <connect_error_translate+0xac>
   2b4b6:	f110 0f74 	cmn.w	r0, #116	; 0x74
   2b4ba:	d046      	beq.n	2b54a <connect_error_translate+0xb2>
	case -ENOMEM:
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
	case -EINPROGRESS:
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
	default:
		LOG_ERR("nRF cloud connect failed %d", err);
   2b4bc:	4602      	mov	r2, r0
   2b4be:	2145      	movs	r1, #69	; 0x45
   2b4c0:	4825      	ldr	r0, [pc, #148]	; (2b558 <connect_error_translate+0xc0>)
   2b4c2:	f011 fb1d 	bl	3cb00 <z_log_minimal_printk>
		return NRF_CLOUD_CONNECT_RES_ERR_MISC;
   2b4c6:	f06f 0004 	mvn.w	r0, #4
   2b4ca:	e025      	b.n	2b518 <connect_error_translate+0x80>
	switch (err) {
   2b4cc:	f100 030d 	add.w	r3, r0, #13
   2b4d0:	2b0d      	cmp	r3, #13
   2b4d2:	d8f3      	bhi.n	2b4bc <connect_error_translate+0x24>
   2b4d4:	a201      	add	r2, pc, #4	; (adr r2, 2b4dc <connect_error_translate+0x44>)
   2b4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2b4da:	bf00      	nop
   2b4dc:	0002b52d 	.word	0x0002b52d
   2b4e0:	0002b539 	.word	0x0002b539
   2b4e4:	0002b4bd 	.word	0x0002b4bd
   2b4e8:	0002b515 	.word	0x0002b515
   2b4ec:	0002b4bd 	.word	0x0002b4bd
   2b4f0:	0002b533 	.word	0x0002b533
   2b4f4:	0002b4bd 	.word	0x0002b4bd
   2b4f8:	0002b4bd 	.word	0x0002b4bd
   2b4fc:	0002b4bd 	.word	0x0002b4bd
   2b500:	0002b4bd 	.word	0x0002b4bd
   2b504:	0002b4bd 	.word	0x0002b4bd
   2b508:	0002b4bd 	.word	0x0002b4bd
   2b50c:	0002b4bd 	.word	0x0002b4bd
   2b510:	0002b519 	.word	0x0002b519
   2b514:	f06f 0002 	mvn.w	r0, #2
	}
}
   2b518:	bd08      	pop	{r3, pc}
	switch (err) {
   2b51a:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   2b51e:	d017      	beq.n	2b550 <connect_error_translate+0xb8>
   2b520:	f110 0f16 	cmn.w	r0, #22
   2b524:	d1ca      	bne.n	2b4bc <connect_error_translate+0x24>
		return NRF_CLOUD_CONNECT_RES_ERR_PRV_KEY;
   2b526:	f06f 0006 	mvn.w	r0, #6
   2b52a:	e7f5      	b.n	2b518 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
   2b52c:	f04f 30ff 	mov.w	r0, #4294967295
   2b530:	e7f2      	b.n	2b518 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_BACKEND;
   2b532:	f06f 0003 	mvn.w	r0, #3
   2b536:	e7ef      	b.n	2b518 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
   2b538:	f06f 0005 	mvn.w	r0, #5
   2b53c:	e7ec      	b.n	2b518 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_CERT_MISC;
   2b53e:	f06f 0008 	mvn.w	r0, #8
   2b542:	e7e9      	b.n	2b518 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   2b544:	f06f 000a 	mvn.w	r0, #10
   2b548:	e7e6      	b.n	2b518 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_TIMEOUT_NO_DATA;
   2b54a:	f06f 0009 	mvn.w	r0, #9
   2b54e:	e7e3      	b.n	2b518 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_CERT;
   2b550:	f06f 0007 	mvn.w	r0, #7
   2b554:	e7e0      	b.n	2b518 <connect_error_translate+0x80>
   2b556:	bf00      	nop
   2b558:	000482f2 	.word	0x000482f2

0002b55c <nfsm_get_current_state>:
	return current_state;
   2b55c:	4b01      	ldr	r3, [pc, #4]	; (2b564 <nfsm_get_current_state+0x8>)
   2b55e:	7818      	ldrb	r0, [r3, #0]
}
   2b560:	4770      	bx	lr
   2b562:	bf00      	nop
   2b564:	2001c90a 	.word	0x2001c90a

0002b568 <nfsm_set_current_state_and_notify>:
{
   2b568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b56a:	4606      	mov	r6, r0
	bool discon_evt = (evt != NULL) &&
   2b56c:	460c      	mov	r4, r1
   2b56e:	b341      	cbz	r1, 2b5c2 <nfsm_set_current_state_and_notify+0x5a>
   2b570:	780d      	ldrb	r5, [r1, #0]
   2b572:	f1a5 0309 	sub.w	r3, r5, #9
   2b576:	425d      	negs	r5, r3
   2b578:	415d      	adcs	r5, r3
	return z_impl_k_mutex_lock(mutex, timeout);
   2b57a:	f04f 32ff 	mov.w	r2, #4294967295
   2b57e:	f04f 33ff 	mov.w	r3, #4294967295
   2b582:	4811      	ldr	r0, [pc, #68]	; (2b5c8 <nfsm_set_current_state_and_notify+0x60>)
   2b584:	f00b f9a6 	bl	368d4 <z_impl_k_mutex_lock>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b588:	4f10      	ldr	r7, [pc, #64]	; (2b5cc <nfsm_set_current_state_and_notify+0x64>)
   2b58a:	e8d7 3faf 	lda	r3, [r7]
	if (!atomic_get(&uninit_in_progress)) {
   2b58e:	b90b      	cbnz	r3, 2b594 <nfsm_set_current_state_and_notify+0x2c>
		current_state = state;
   2b590:	4b0f      	ldr	r3, [pc, #60]	; (2b5d0 <nfsm_set_current_state_and_notify+0x68>)
   2b592:	701e      	strb	r6, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   2b594:	480c      	ldr	r0, [pc, #48]	; (2b5c8 <nfsm_set_current_state_and_notify+0x60>)
   2b596:	f00b fa6f 	bl	36a78 <z_impl_k_mutex_unlock>
	if (discon_evt) {
   2b59a:	b11d      	cbz	r5, 2b5a4 <nfsm_set_current_state_and_notify+0x3c>
		atomic_set(&transport_disconnected, 1);
   2b59c:	2101      	movs	r1, #1
   2b59e:	480d      	ldr	r0, [pc, #52]	; (2b5d4 <nfsm_set_current_state_and_notify+0x6c>)
   2b5a0:	f014 f894 	bl	3f6cc <atomic_set.isra.0>
	if ((app_event_handler != NULL) && (evt != NULL)) {
   2b5a4:	4b0c      	ldr	r3, [pc, #48]	; (2b5d8 <nfsm_set_current_state_and_notify+0x70>)
   2b5a6:	681b      	ldr	r3, [r3, #0]
   2b5a8:	b113      	cbz	r3, 2b5b0 <nfsm_set_current_state_and_notify+0x48>
   2b5aa:	b10c      	cbz	r4, 2b5b0 <nfsm_set_current_state_and_notify+0x48>
		app_event_handler(evt);
   2b5ac:	4620      	mov	r0, r4
   2b5ae:	4798      	blx	r3
	if (discon_evt && atomic_get(&uninit_in_progress)) {
   2b5b0:	b14d      	cbz	r5, 2b5c6 <nfsm_set_current_state_and_notify+0x5e>
   2b5b2:	e8d7 3faf 	lda	r3, [r7]
   2b5b6:	b133      	cbz	r3, 2b5c6 <nfsm_set_current_state_and_notify+0x5e>
}
   2b5b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   2b5bc:	4807      	ldr	r0, [pc, #28]	; (2b5dc <nfsm_set_current_state_and_notify+0x74>)
   2b5be:	f00b bbdb 	b.w	36d78 <z_impl_k_sem_give>
	bool discon_evt = (evt != NULL) &&
   2b5c2:	460d      	mov	r5, r1
   2b5c4:	e7d9      	b.n	2b57a <nfsm_set_current_state_and_notify+0x12>
}
   2b5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b5c8:	20014fa4 	.word	0x20014fa4
   2b5cc:	20019560 	.word	0x20019560
   2b5d0:	2001c90a 	.word	0x2001c90a
   2b5d4:	2001955c 	.word	0x2001955c
   2b5d8:	20019550 	.word	0x20019550
   2b5dc:	200150d8 	.word	0x200150d8

0002b5e0 <nfsm_get_disconnect_requested>:
   2b5e0:	4b03      	ldr	r3, [pc, #12]	; (2b5f0 <nfsm_get_disconnect_requested+0x10>)
   2b5e2:	e8d3 0faf 	lda	r0, [r3]
}
   2b5e6:	3800      	subs	r0, #0
   2b5e8:	bf18      	it	ne
   2b5ea:	2001      	movne	r0, #1
   2b5ec:	4770      	bx	lr
   2b5ee:	bf00      	nop
   2b5f0:	20019558 	.word	0x20019558

0002b5f4 <nrf_cloud_init>:
{
   2b5f4:	b538      	push	{r3, r4, r5, lr}
	if (current_state != STATE_IDLE ||
   2b5f6:	4b15      	ldr	r3, [pc, #84]	; (2b64c <nrf_cloud_init+0x58>)
{
   2b5f8:	4605      	mov	r5, r0
	if (current_state != STATE_IDLE ||
   2b5fa:	781b      	ldrb	r3, [r3, #0]
   2b5fc:	b11b      	cbz	r3, 2b606 <nrf_cloud_init+0x12>
		return -EACCES;
   2b5fe:	f06f 040c 	mvn.w	r4, #12
}
   2b602:	4620      	mov	r0, r4
   2b604:	bd38      	pop	{r3, r4, r5, pc}
   2b606:	4b12      	ldr	r3, [pc, #72]	; (2b650 <nrf_cloud_init+0x5c>)
   2b608:	e8d3 3faf 	lda	r3, [r3]
	if (current_state != STATE_IDLE ||
   2b60c:	2b00      	cmp	r3, #0
   2b60e:	d1f6      	bne.n	2b5fe <nrf_cloud_init+0xa>
	if (param->event_handler == NULL) {
   2b610:	6803      	ldr	r3, [r0, #0]
   2b612:	b1bb      	cbz	r3, 2b644 <nrf_cloud_init+0x50>
	err = nfsm_init();
   2b614:	f000 fb86 	bl	2bd24 <nfsm_init>
	if (err) {
   2b618:	4604      	mov	r4, r0
   2b61a:	2800      	cmp	r0, #0
   2b61c:	d1f1      	bne.n	2b602 <nrf_cloud_init+0xe>
	err = nrf_cloud_codec_init();
   2b61e:	f7fe fdcd 	bl	2a1bc <nrf_cloud_codec_init>
	if (err) {
   2b622:	4604      	mov	r4, r0
   2b624:	2800      	cmp	r0, #0
   2b626:	d1ec      	bne.n	2b602 <nrf_cloud_init+0xe>
	err = nct_init(param->client_id);
   2b628:	6868      	ldr	r0, [r5, #4]
   2b62a:	f000 fee9 	bl	2c400 <nct_init>
	if (err) {
   2b62e:	4604      	mov	r4, r0
   2b630:	2800      	cmp	r0, #0
   2b632:	d1e6      	bne.n	2b602 <nrf_cloud_init+0xe>
	app_event_handler = param->event_handler;
   2b634:	682a      	ldr	r2, [r5, #0]
   2b636:	4b07      	ldr	r3, [pc, #28]	; (2b654 <nrf_cloud_init+0x60>)
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, NULL);
   2b638:	4601      	mov	r1, r0
   2b63a:	2001      	movs	r0, #1
	app_event_handler = param->event_handler;
   2b63c:	601a      	str	r2, [r3, #0]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, NULL);
   2b63e:	f7ff ff93 	bl	2b568 <nfsm_set_current_state_and_notify>
	return 0;
   2b642:	e7de      	b.n	2b602 <nrf_cloud_init+0xe>
		return -EINVAL;
   2b644:	f06f 0415 	mvn.w	r4, #21
   2b648:	e7db      	b.n	2b602 <nrf_cloud_init+0xe>
   2b64a:	bf00      	nop
   2b64c:	2001c90a 	.word	0x2001c90a
   2b650:	20019560 	.word	0x20019560
   2b654:	20019550 	.word	0x20019550

0002b658 <nrf_cloud_uninit>:
{
   2b658:	b538      	push	{r3, r4, r5, lr}
	err = nrf_cloud_fota_uninit();
   2b65a:	f004 f8a9 	bl	2f7b0 <nrf_cloud_fota_uninit>
	if (err == -EBUSY) {
   2b65e:	f110 0f10 	cmn.w	r0, #16
	err = nrf_cloud_fota_uninit();
   2b662:	4604      	mov	r4, r0
	if (err == -EBUSY) {
   2b664:	d105      	bne.n	2b672 <nrf_cloud_uninit+0x1a>
		LOG_WRN("Cannot uninitialize while a FOTA job is active");
   2b666:	2157      	movs	r1, #87	; 0x57
   2b668:	481e      	ldr	r0, [pc, #120]	; (2b6e4 <nrf_cloud_uninit+0x8c>)
   2b66a:	f011 fa49 	bl	3cb00 <z_log_minimal_printk>
}
   2b66e:	4620      	mov	r0, r4
   2b670:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set(&uninit_in_progress, 1);
   2b672:	2101      	movs	r1, #1
   2b674:	481c      	ldr	r0, [pc, #112]	; (2b6e8 <nrf_cloud_uninit+0x90>)
   2b676:	f014 f829 	bl	3f6cc <atomic_set.isra.0>
	return z_impl_k_mutex_lock(mutex, timeout);
   2b67a:	f04f 32ff 	mov.w	r2, #4294967295
   2b67e:	f04f 33ff 	mov.w	r3, #4294967295
   2b682:	481a      	ldr	r0, [pc, #104]	; (2b6ec <nrf_cloud_uninit+0x94>)
   2b684:	f00b f926 	bl	368d4 <z_impl_k_mutex_lock>
	current_state = STATE_IDLE;
   2b688:	2200      	movs	r2, #0
	prev_state = current_state;
   2b68a:	4b19      	ldr	r3, [pc, #100]	; (2b6f0 <nrf_cloud_uninit+0x98>)
   2b68c:	781d      	ldrb	r5, [r3, #0]
	current_state = STATE_IDLE;
   2b68e:	701a      	strb	r2, [r3, #0]
	prev_state = current_state;
   2b690:	b2ed      	uxtb	r5, r5
	return z_impl_k_mutex_unlock(mutex);
   2b692:	4816      	ldr	r0, [pc, #88]	; (2b6ec <nrf_cloud_uninit+0x94>)
   2b694:	f00b f9f0 	bl	36a78 <z_impl_k_mutex_unlock>
	if (prev_state >= STATE_CONNECTED) {
   2b698:	2d01      	cmp	r5, #1
   2b69a:	d918      	bls.n	2b6ce <nrf_cloud_uninit+0x76>
		atomic_set(&disconnect_requested, 1);
   2b69c:	2101      	movs	r1, #1
   2b69e:	4815      	ldr	r0, [pc, #84]	; (2b6f4 <nrf_cloud_uninit+0x9c>)
   2b6a0:	f014 f814 	bl	3f6cc <atomic_set.isra.0>
	z_impl_k_sem_reset(sem);
   2b6a4:	4814      	ldr	r0, [pc, #80]	; (2b6f8 <nrf_cloud_uninit+0xa0>)
   2b6a6:	f00b fc0d 	bl	36ec4 <z_impl_k_sem_reset>
		(void)nct_disconnect();
   2b6aa:	f001 f915 	bl	2c8d8 <nct_disconnect>
	return z_impl_k_sem_take(sem, timeout);
   2b6ae:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2b6b2:	2300      	movs	r3, #0
   2b6b4:	4810      	ldr	r0, [pc, #64]	; (2b6f8 <nrf_cloud_uninit+0xa0>)
   2b6b6:	f00b fb9b 	bl	36df0 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   2b6ba:	f110 0f0b 	cmn.w	r0, #11
   2b6be:	4604      	mov	r4, r0
   2b6c0:	d105      	bne.n	2b6ce <nrf_cloud_uninit+0x76>
			LOG_WRN("Did not receive expected disconnect event during cloud unint");
   2b6c2:	2157      	movs	r1, #87	; 0x57
   2b6c4:	480d      	ldr	r0, [pc, #52]	; (2b6fc <nrf_cloud_uninit+0xa4>)
   2b6c6:	f011 fa1b 	bl	3cb00 <z_log_minimal_printk>
			err = -EISCONN;
   2b6ca:	f06f 047e 	mvn.w	r4, #126	; 0x7e
	app_event_handler = NULL;
   2b6ce:	2500      	movs	r5, #0
   2b6d0:	4b0b      	ldr	r3, [pc, #44]	; (2b700 <nrf_cloud_uninit+0xa8>)
   2b6d2:	601d      	str	r5, [r3, #0]
	nct_uninit();
   2b6d4:	f000 ff88 	bl	2c5e8 <nct_uninit>
	atomic_set(&uninit_in_progress, 0);
   2b6d8:	4629      	mov	r1, r5
   2b6da:	4803      	ldr	r0, [pc, #12]	; (2b6e8 <nrf_cloud_uninit+0x90>)
   2b6dc:	f013 fff6 	bl	3f6cc <atomic_set.isra.0>
	return err;
   2b6e0:	e7c5      	b.n	2b66e <nrf_cloud_uninit+0x16>
   2b6e2:	bf00      	nop
   2b6e4:	00048313 	.word	0x00048313
   2b6e8:	20019560 	.word	0x20019560
   2b6ec:	20014fa4 	.word	0x20014fa4
   2b6f0:	2001c90a 	.word	0x2001c90a
   2b6f4:	20019558 	.word	0x20019558
   2b6f8:	200150d8 	.word	0x200150d8
   2b6fc:	00048347 	.word	0x00048347
   2b700:	20019550 	.word	0x20019550

0002b704 <nrf_cloud_connect>:
	atomic_set(&disconnect_requested, 0);
	return nct_connect();
}

int nrf_cloud_connect(const struct nrf_cloud_connect_param *param)
{
   2b704:	b510      	push	{r4, lr}
	int err;

	if (current_state == STATE_IDLE) {
   2b706:	4b12      	ldr	r3, [pc, #72]	; (2b750 <nrf_cloud_connect+0x4c>)
   2b708:	781a      	ldrb	r2, [r3, #0]
   2b70a:	b1d2      	cbz	r2, 2b742 <nrf_cloud_connect+0x3e>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
	} else if (current_state != STATE_INITIALIZED) {
   2b70c:	781a      	ldrb	r2, [r3, #0]
   2b70e:	2a01      	cmp	r2, #1
   2b710:	d11a      	bne.n	2b748 <nrf_cloud_connect+0x44>
}

#if IS_ENABLED(CONFIG_NRF_CLOUD_CONNECTION_POLL_THREAD)
static int start_connection_poll()
{
	if (current_state == STATE_IDLE) {
   2b712:	781b      	ldrb	r3, [r3, #0]
   2b714:	b17b      	cbz	r3, 2b736 <nrf_cloud_connect+0x32>
   2b716:	4b0f      	ldr	r3, [pc, #60]	; (2b754 <nrf_cloud_connect+0x50>)
   2b718:	e8d3 4faf 	lda	r4, [r3]
		return -EACCES;
	}

	if (atomic_get(&connection_poll_active)) {
   2b71c:	b974      	cbnz	r4, 2b73c <nrf_cloud_connect+0x38>
		LOG_DBG("Connection poll in progress");
		return -EINPROGRESS;
	}

	atomic_set(&disconnect_requested, 0);
   2b71e:	4621      	mov	r1, r4
   2b720:	480d      	ldr	r0, [pc, #52]	; (2b758 <nrf_cloud_connect+0x54>)
   2b722:	f013 ffd3 	bl	3f6cc <atomic_set.isra.0>
	z_impl_k_sem_give(sem);
   2b726:	480d      	ldr	r0, [pc, #52]	; (2b75c <nrf_cloud_connect+0x58>)
   2b728:	f00b fb26 	bl	36d78 <z_impl_k_sem_give>
	k_sem_give(&connection_poll_sem);

	return 0;
   2b72c:	4620      	mov	r0, r4
}
   2b72e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return connect_error_translate(err);
   2b732:	f7ff beb1 	b.w	2b498 <connect_error_translate>
		return -EACCES;
   2b736:	f06f 000c 	mvn.w	r0, #12
   2b73a:	e7f8      	b.n	2b72e <nrf_cloud_connect+0x2a>
		return -EINPROGRESS;
   2b73c:	f06f 0076 	mvn.w	r0, #118	; 0x76
   2b740:	e7f5      	b.n	2b72e <nrf_cloud_connect+0x2a>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
   2b742:	f04f 30ff 	mov.w	r0, #4294967295
}
   2b746:	bd10      	pop	{r4, pc}
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   2b748:	f06f 000a 	mvn.w	r0, #10
   2b74c:	e7fb      	b.n	2b746 <nrf_cloud_connect+0x42>
   2b74e:	bf00      	nop
   2b750:	2001c90a 	.word	0x2001c90a
   2b754:	20019554 	.word	0x20019554
   2b758:	20019558 	.word	0x20019558
   2b75c:	20015030 	.word	0x20015030

0002b760 <nrf_cloud_disconnect>:
{
   2b760:	b508      	push	{r3, lr}
	if (current_state < STATE_CONNECTED) {
   2b762:	4b07      	ldr	r3, [pc, #28]	; (2b780 <nrf_cloud_disconnect+0x20>)
   2b764:	781b      	ldrb	r3, [r3, #0]
   2b766:	2b01      	cmp	r3, #1
   2b768:	d907      	bls.n	2b77a <nrf_cloud_disconnect+0x1a>
	atomic_set(&disconnect_requested, 1);
   2b76a:	2101      	movs	r1, #1
   2b76c:	4805      	ldr	r0, [pc, #20]	; (2b784 <nrf_cloud_disconnect+0x24>)
   2b76e:	f013 ffad 	bl	3f6cc <atomic_set.isra.0>
}
   2b772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_disconnect();
   2b776:	f001 b8af 	b.w	2c8d8 <nct_disconnect>
}
   2b77a:	f06f 000c 	mvn.w	r0, #12
   2b77e:	bd08      	pop	{r3, pc}
   2b780:	2001c90a 	.word	0x2001c90a
   2b784:	20019558 	.word	0x20019558

0002b788 <nrf_cloud_run>:
}

void nrf_cloud_run(void)
{
   2b788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
start:
	k_sem_take(&connection_poll_sem, K_FOREVER);
	atomic_set(&connection_poll_active, 1);

	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   2b78c:	2700      	movs	r7, #0
	return z_impl_k_sem_take(sem, timeout);
   2b78e:	4d41      	ldr	r5, [pc, #260]	; (2b894 <nrf_cloud_run+0x10c>)
	atomic_set(&connection_poll_active, 1);
   2b790:	4e41      	ldr	r6, [pc, #260]	; (2b898 <nrf_cloud_run+0x110>)
{
   2b792:	b089      	sub	sp, #36	; 0x24
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2b794:	f04f 0902 	mov.w	r9, #2
   2b798:	f04f 32ff 	mov.w	r2, #4294967295
   2b79c:	f04f 33ff 	mov.w	r3, #4294967295
   2b7a0:	4628      	mov	r0, r5
	return current_state;
   2b7a2:	f8df 8104 	ldr.w	r8, [pc, #260]	; 2b8a8 <nrf_cloud_run+0x120>
   2b7a6:	f00b fb23 	bl	36df0 <z_impl_k_sem_take>
	atomic_set(&connection_poll_active, 1);
   2b7aa:	2101      	movs	r1, #1
   2b7ac:	4630      	mov	r0, r6
   2b7ae:	f013 ff8d 	bl	3f6cc <atomic_set.isra.0>
	return current_state;
   2b7b2:	f898 0000 	ldrb.w	r0, [r8]
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2b7b6:	a902      	add	r1, sp, #8
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2b7b8:	f88d 9008 	strb.w	r9, [sp, #8]
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   2b7bc:	9703      	str	r7, [sp, #12]
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2b7be:	f7ff fed3 	bl	2b568 <nfsm_set_current_state_and_notify>
	atomic_set(&disconnect_requested, 0);
   2b7c2:	2100      	movs	r1, #0
   2b7c4:	4835      	ldr	r0, [pc, #212]	; (2b89c <nrf_cloud_run+0x114>)
   2b7c6:	f013 ff81 	bl	3f6cc <atomic_set.isra.0>
	return nct_connect();
   2b7ca:	f000 ff29 	bl	2c620 <nct_connect>

	ret = connect_to_cloud();
	ret = connect_error_translate(ret);
   2b7ce:	f7ff fe63 	bl	2b498 <connect_error_translate>

	if (ret != NRF_CLOUD_CONNECT_RES_SUCCESS) {
   2b7d2:	4604      	mov	r4, r0
   2b7d4:	b188      	cbz	r0, 2b7fa <nrf_cloud_run+0x72>
		evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
		evt.status = ret;
   2b7d6:	9003      	str	r0, [sp, #12]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2b7d8:	a902      	add	r1, sp, #8
	return current_state;
   2b7da:	f898 0000 	ldrb.w	r0, [r8]
		evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2b7de:	f88d 9008 	strb.w	r9, [sp, #8]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2b7e2:	f7ff fec1 	bl	2b568 <nfsm_set_current_state_and_notify>
		nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
		nrf_cloud_disconnect();
	}

reset:
	atomic_set(&connection_poll_active, 0);
   2b7e6:	2100      	movs	r1, #0
   2b7e8:	4630      	mov	r0, r6
   2b7ea:	f013 ff6f 	bl	3f6cc <atomic_set.isra.0>
   2b7ee:	2200      	movs	r2, #0
   2b7f0:	2300      	movs	r3, #0
   2b7f2:	4628      	mov	r0, r5
   2b7f4:	f00b fafc 	bl	36df0 <z_impl_k_sem_take>
	k_sem_take(&connection_poll_sem, K_NO_WAIT);
	goto start;
   2b7f8:	e7cc      	b.n	2b794 <nrf_cloud_run+0xc>
	fds[0].fd = nct_socket_get();
   2b7fa:	f001 f8cb 	bl	2c994 <nct_socket_get>
	fds[0].events = POLLIN;
   2b7fe:	2301      	movs	r3, #1
   2b800:	f8ad 3004 	strh.w	r3, [sp, #4]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   2b804:	2309      	movs	r3, #9
	fds[0].fd = nct_socket_get();
   2b806:	9000      	str	r0, [sp, #0]
	atomic_set(&transport_disconnected, 0);
   2b808:	4825      	ldr	r0, [pc, #148]	; (2b8a0 <nrf_cloud_run+0x118>)
   2b80a:	4621      	mov	r1, r4
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   2b80c:	f88d 3008 	strb.w	r3, [sp, #8]
   2b810:	4604      	mov	r4, r0
	atomic_set(&transport_disconnected, 0);
   2b812:	f013 ff5b 	bl	3f6cc <atomic_set.isra.0>
		ret = poll(fds, ARRAY_SIZE(fds), nct_keepalive_time_left());
   2b816:	f001 f8b7 	bl	2c988 <nct_keepalive_time_left>
   2b81a:	4602      	mov	r2, r0
	return z_impl_zsock_poll(fds, nfds, timeout);
   2b81c:	2101      	movs	r1, #1
   2b81e:	4668      	mov	r0, sp
   2b820:	f011 fd89 	bl	3d336 <z_impl_zsock_poll>
		if (ret == 0) {
   2b824:	4602      	mov	r2, r0
   2b826:	b940      	cbnz	r0, 2b83a <nrf_cloud_run+0xb2>
	return nct_process();
   2b828:	f001 f860 	bl	2c8ec <nct_process>
			if ((ret < 0) && (ret != -EAGAIN)) {
   2b82c:	2800      	cmp	r0, #0
   2b82e:	daf2      	bge.n	2b816 <nrf_cloud_run+0x8e>
   2b830:	300b      	adds	r0, #11
   2b832:	d0f0      	beq.n	2b816 <nrf_cloud_run+0x8e>
				evt.status = NRF_CLOUD_DISCONNECT_CLOSED_BY_REMOTE;
   2b834:	2301      	movs	r3, #1
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   2b836:	9303      	str	r3, [sp, #12]
			break;
   2b838:	e00d      	b.n	2b856 <nrf_cloud_run+0xce>
		if ((fds[0].revents & POLLIN) == POLLIN) {
   2b83a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2b83e:	07d8      	lsls	r0, r3, #31
   2b840:	d515      	bpl.n	2b86e <nrf_cloud_run+0xe6>
	return nct_process();
   2b842:	f001 f853 	bl	2c8ec <nct_process>
			if ((ret < 0) && (ret != -EAGAIN)) {
   2b846:	2800      	cmp	r0, #0
   2b848:	da01      	bge.n	2b84e <nrf_cloud_run+0xc6>
   2b84a:	300b      	adds	r0, #11
   2b84c:	d1f2      	bne.n	2b834 <nrf_cloud_run+0xac>
   2b84e:	e8d4 3faf 	lda	r3, [r4]
			if (atomic_get(&transport_disconnected) == 1) {
   2b852:	2b01      	cmp	r3, #1
   2b854:	d1df      	bne.n	2b816 <nrf_cloud_run+0x8e>
   2b856:	4b12      	ldr	r3, [pc, #72]	; (2b8a0 <nrf_cloud_run+0x118>)
   2b858:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&transport_disconnected) == 0) {
   2b85c:	2b00      	cmp	r3, #0
   2b85e:	d1c2      	bne.n	2b7e6 <nrf_cloud_run+0x5e>
		nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   2b860:	a902      	add	r1, sp, #8
   2b862:	2001      	movs	r0, #1
   2b864:	f7ff fe80 	bl	2b568 <nfsm_set_current_state_and_notify>
		nrf_cloud_disconnect();
   2b868:	f7ff ff7a 	bl	2b760 <nrf_cloud_disconnect>
   2b86c:	e7bb      	b.n	2b7e6 <nrf_cloud_run+0x5e>
		if (ret < 0) {
   2b86e:	2a00      	cmp	r2, #0
   2b870:	da05      	bge.n	2b87e <nrf_cloud_run+0xf6>
			LOG_ERR("poll() returned an error: %d", ret);
   2b872:	2145      	movs	r1, #69	; 0x45
   2b874:	480b      	ldr	r0, [pc, #44]	; (2b8a4 <nrf_cloud_run+0x11c>)
   2b876:	f011 f943 	bl	3cb00 <z_log_minimal_printk>
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   2b87a:	2303      	movs	r3, #3
   2b87c:	e7db      	b.n	2b836 <nrf_cloud_run+0xae>
		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   2b87e:	0699      	lsls	r1, r3, #26
   2b880:	d503      	bpl.n	2b88a <nrf_cloud_run+0x102>
			if (nfsm_get_disconnect_requested()) {
   2b882:	f7ff fead 	bl	2b5e0 <nfsm_get_disconnect_requested>
			evt.status = NRF_CLOUD_DISCONNECT_INVALID_REQUEST;
   2b886:	2302      	movs	r3, #2
   2b888:	e7d5      	b.n	2b836 <nrf_cloud_run+0xae>
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   2b88a:	06da      	lsls	r2, r3, #27
   2b88c:	d4d2      	bmi.n	2b834 <nrf_cloud_run+0xac>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   2b88e:	071b      	lsls	r3, r3, #28
   2b890:	d5c1      	bpl.n	2b816 <nrf_cloud_run+0x8e>
   2b892:	e7f2      	b.n	2b87a <nrf_cloud_run+0xf2>
   2b894:	20015030 	.word	0x20015030
   2b898:	20019554 	.word	0x20019554
   2b89c:	20019558 	.word	0x20019558
   2b8a0:	2001955c 	.word	0x2001955c
   2b8a4:	00048389 	.word	0x00048389
   2b8a8:	2001c90a 	.word	0x2001c90a

0002b8ac <nrf_cloud_send>:
{
   2b8ac:	b510      	push	{r4, lr}
   2b8ae:	b086      	sub	sp, #24
	if (!msg) {
   2b8b0:	2800      	cmp	r0, #0
   2b8b2:	d044      	beq.n	2b93e <nrf_cloud_send+0x92>
	switch (msg->topic_type) {
   2b8b4:	7a03      	ldrb	r3, [r0, #8]
   2b8b6:	2b02      	cmp	r3, #2
   2b8b8:	d01f      	beq.n	2b8fa <nrf_cloud_send+0x4e>
   2b8ba:	2b03      	cmp	r3, #3
   2b8bc:	d042      	beq.n	2b944 <nrf_cloud_send+0x98>
   2b8be:	2b01      	cmp	r3, #1
   2b8c0:	d15d      	bne.n	2b97e <nrf_cloud_send+0xd2>
		if (current_state < STATE_CC_CONNECTED) {
   2b8c2:	4a32      	ldr	r2, [pc, #200]	; (2b98c <nrf_cloud_send+0xe0>)
   2b8c4:	7812      	ldrb	r2, [r2, #0]
   2b8c6:	2a03      	cmp	r2, #3
   2b8c8:	d956      	bls.n	2b978 <nrf_cloud_send+0xcc>
		const struct nct_cc_data shadow_data = {
   2b8ca:	2200      	movs	r2, #0
   2b8cc:	9205      	str	r2, [sp, #20]
   2b8ce:	e9cd 2203 	strd	r2, r2, [sp, #12]
   2b8d2:	6802      	ldr	r2, [r0, #0]
   2b8d4:	f88d 3016 	strb.w	r3, [sp, #22]
   2b8d8:	9201      	str	r2, [sp, #4]
   2b8da:	6842      	ldr	r2, [r0, #4]
   2b8dc:	9202      	str	r2, [sp, #8]
   2b8de:	68c2      	ldr	r2, [r0, #12]
		err = nct_cc_send(&shadow_data);
   2b8e0:	a801      	add	r0, sp, #4
		const struct nct_cc_data shadow_data = {
   2b8e2:	f8ad 2014 	strh.w	r2, [sp, #20]
		err = nct_cc_send(&shadow_data);
   2b8e6:	f000 fee9 	bl	2c6bc <nct_cc_send>
		if (err) {
   2b8ea:	4604      	mov	r4, r0
   2b8ec:	b1d0      	cbz	r0, 2b924 <nrf_cloud_send+0x78>
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   2b8ee:	2145      	movs	r1, #69	; 0x45
   2b8f0:	4602      	mov	r2, r0
   2b8f2:	4827      	ldr	r0, [pc, #156]	; (2b990 <nrf_cloud_send+0xe4>)
			LOG_ERR("nct_dc_bulk_send failed, error: %d", err);
   2b8f4:	f011 f904 	bl	3cb00 <z_log_minimal_printk>
			return err;
   2b8f8:	e014      	b.n	2b924 <nrf_cloud_send+0x78>
		if (current_state != STATE_DC_CONNECTED) {
   2b8fa:	4b24      	ldr	r3, [pc, #144]	; (2b98c <nrf_cloud_send+0xe0>)
   2b8fc:	781b      	ldrb	r3, [r3, #0]
   2b8fe:	2b09      	cmp	r3, #9
   2b900:	d13a      	bne.n	2b978 <nrf_cloud_send+0xcc>
		const struct nct_dc_data buf = {
   2b902:	2300      	movs	r3, #0
   2b904:	9305      	str	r3, [sp, #20]
   2b906:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2b90a:	6803      	ldr	r3, [r0, #0]
   2b90c:	9301      	str	r3, [sp, #4]
   2b90e:	6843      	ldr	r3, [r0, #4]
   2b910:	9302      	str	r3, [sp, #8]
   2b912:	68c3      	ldr	r3, [r0, #12]
   2b914:	f8ad 3014 	strh.w	r3, [sp, #20]
		if (msg->qos == MQTT_QOS_0_AT_MOST_ONCE) {
   2b918:	7a43      	ldrb	r3, [r0, #9]
   2b91a:	b933      	cbnz	r3, 2b92a <nrf_cloud_send+0x7e>
			err = nct_dc_stream(&buf);
   2b91c:	a801      	add	r0, sp, #4
   2b91e:	f013 ff19 	bl	3f754 <nct_dc_stream>
	return 0;
   2b922:	2400      	movs	r4, #0
}
   2b924:	4620      	mov	r0, r4
   2b926:	b006      	add	sp, #24
   2b928:	bd10      	pop	{r4, pc}
		} else if (msg->qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2b92a:	2b01      	cmp	r3, #1
   2b92c:	d103      	bne.n	2b936 <nrf_cloud_send+0x8a>
			err = nct_dc_send(&buf);
   2b92e:	a801      	add	r0, sp, #4
   2b930:	f013 ff0d 	bl	3f74e <nct_dc_send>
   2b934:	e7f5      	b.n	2b922 <nrf_cloud_send+0x76>
			LOG_ERR("Unsupported QoS setting");
   2b936:	2145      	movs	r1, #69	; 0x45
   2b938:	4816      	ldr	r0, [pc, #88]	; (2b994 <nrf_cloud_send+0xe8>)
   2b93a:	f011 f8e1 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   2b93e:	f06f 0415 	mvn.w	r4, #21
   2b942:	e7ef      	b.n	2b924 <nrf_cloud_send+0x78>
		if (current_state != STATE_DC_CONNECTED) {
   2b944:	4b11      	ldr	r3, [pc, #68]	; (2b98c <nrf_cloud_send+0xe0>)
   2b946:	781b      	ldrb	r3, [r3, #0]
   2b948:	2b09      	cmp	r3, #9
   2b94a:	d115      	bne.n	2b978 <nrf_cloud_send+0xcc>
		const struct nct_dc_data buf = {
   2b94c:	2300      	movs	r3, #0
   2b94e:	9305      	str	r3, [sp, #20]
   2b950:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2b954:	6803      	ldr	r3, [r0, #0]
		err = nct_dc_bulk_send(&buf, msg->qos);
   2b956:	7a41      	ldrb	r1, [r0, #9]
		const struct nct_dc_data buf = {
   2b958:	9301      	str	r3, [sp, #4]
   2b95a:	6843      	ldr	r3, [r0, #4]
   2b95c:	9302      	str	r3, [sp, #8]
   2b95e:	68c3      	ldr	r3, [r0, #12]
		err = nct_dc_bulk_send(&buf, msg->qos);
   2b960:	a801      	add	r0, sp, #4
		const struct nct_dc_data buf = {
   2b962:	f8ad 3014 	strh.w	r3, [sp, #20]
		err = nct_dc_bulk_send(&buf, msg->qos);
   2b966:	f000 ff67 	bl	2c838 <nct_dc_bulk_send>
		if (err) {
   2b96a:	4604      	mov	r4, r0
   2b96c:	2800      	cmp	r0, #0
   2b96e:	d0d9      	beq.n	2b924 <nrf_cloud_send+0x78>
			LOG_ERR("nct_dc_bulk_send failed, error: %d", err);
   2b970:	4602      	mov	r2, r0
   2b972:	2145      	movs	r1, #69	; 0x45
   2b974:	4808      	ldr	r0, [pc, #32]	; (2b998 <nrf_cloud_send+0xec>)
   2b976:	e7bd      	b.n	2b8f4 <nrf_cloud_send+0x48>
			return -EACCES;
   2b978:	f06f 040c 	mvn.w	r4, #12
   2b97c:	e7d2      	b.n	2b924 <nrf_cloud_send+0x78>
		LOG_ERR("Unknown topic type");
   2b97e:	2145      	movs	r1, #69	; 0x45
   2b980:	4806      	ldr	r0, [pc, #24]	; (2b99c <nrf_cloud_send+0xf0>)
   2b982:	f011 f8bd 	bl	3cb00 <z_log_minimal_printk>
		return -ENODATA;
   2b986:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2b98a:	e7cb      	b.n	2b924 <nrf_cloud_send+0x78>
   2b98c:	2001c90a 	.word	0x2001c90a
   2b990:	000483ab 	.word	0x000483ab
   2b994:	000483cf 	.word	0x000483cf
   2b998:	000483ec 	.word	0x000483ec
   2b99c:	00048414 	.word	0x00048414

0002b9a0 <nrf_cloud_shadow_device_status_update>:
{
   2b9a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2b9a2:	4604      	mov	r4, r0
	struct nrf_cloud_tx_data tx_data = {
   2b9a4:	2210      	movs	r2, #16
   2b9a6:	2100      	movs	r1, #0
   2b9a8:	4668      	mov	r0, sp
   2b9aa:	f015 fd43 	bl	41434 <memset>
   2b9ae:	f240 1301 	movw	r3, #257	; 0x101
   2b9b2:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (current_state != STATE_DC_CONNECTED) {
   2b9b6:	4b0c      	ldr	r3, [pc, #48]	; (2b9e8 <nrf_cloud_shadow_device_status_update+0x48>)
   2b9b8:	781b      	ldrb	r3, [r3, #0]
   2b9ba:	2b09      	cmp	r3, #9
   2b9bc:	d110      	bne.n	2b9e0 <nrf_cloud_shadow_device_status_update+0x40>
	err = nrf_cloud_device_status_encode(dev_status, &tx_data.data, true);
   2b9be:	4620      	mov	r0, r4
   2b9c0:	2201      	movs	r2, #1
   2b9c2:	4669      	mov	r1, sp
   2b9c4:	f7ff f95a 	bl	2ac7c <nrf_cloud_device_status_encode>
	if (err) {
   2b9c8:	4604      	mov	r4, r0
   2b9ca:	b930      	cbnz	r0, 2b9da <nrf_cloud_shadow_device_status_update+0x3a>
	err = nrf_cloud_send(&tx_data);
   2b9cc:	4668      	mov	r0, sp
   2b9ce:	f7ff ff6d 	bl	2b8ac <nrf_cloud_send>
   2b9d2:	4604      	mov	r4, r0
	nrf_cloud_device_status_free(&tx_data.data);
   2b9d4:	4668      	mov	r0, sp
   2b9d6:	f013 fe6c 	bl	3f6b2 <nrf_cloud_device_status_free>
}
   2b9da:	4620      	mov	r0, r4
   2b9dc:	b004      	add	sp, #16
   2b9de:	bd10      	pop	{r4, pc}
		return -EACCES;
   2b9e0:	f06f 040c 	mvn.w	r4, #12
   2b9e4:	e7f9      	b.n	2b9da <nrf_cloud_shadow_device_status_update+0x3a>
   2b9e6:	bf00      	nop
   2b9e8:	2001c90a 	.word	0x2001c90a

0002b9ec <nct_input>:
	return nfsm_handle_incoming_event(evt, current_state);
   2b9ec:	4b01      	ldr	r3, [pc, #4]	; (2b9f4 <nct_input+0x8>)
   2b9ee:	7819      	ldrb	r1, [r3, #0]
   2b9f0:	f000 b99e 	b.w	2bd30 <nfsm_handle_incoming_event>
   2b9f4:	2001c90a 	.word	0x2001c90a

0002b9f8 <nct_apply_update>:
	app_event_handler(evt);
   2b9f8:	4b01      	ldr	r3, [pc, #4]	; (2ba00 <nct_apply_update+0x8>)
   2b9fa:	681b      	ldr	r3, [r3, #0]
   2b9fc:	4718      	bx	r3
   2b9fe:	bf00      	nop
   2ba00:	20019550 	.word	0x20019550

0002ba04 <dc_rx_data_handler>:
#endif
	return -EFTYPE;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   2ba04:	b570      	push	{r4, r5, r6, lr}
	struct nrf_cloud_evt cloud_evt = {
   2ba06:	2306      	movs	r3, #6
   2ba08:	2600      	movs	r6, #0
{
   2ba0a:	b08e      	sub	sp, #56	; 0x38
	struct nrf_cloud_evt cloud_evt = {
   2ba0c:	e9cd 6600 	strd	r6, r6, [sp]
   2ba10:	f88d 3000 	strb.w	r3, [sp]
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
   2ba14:	6843      	ldr	r3, [r0, #4]
	struct nrf_cloud_evt cloud_evt = {
   2ba16:	aa02      	add	r2, sp, #8
{
   2ba18:	4604      	mov	r4, r0
	struct nrf_cloud_evt cloud_evt = {
   2ba1a:	e893 0003 	ldmia.w	r3, {r0, r1}
   2ba1e:	e882 0003 	stmia.w	r2, {r0, r1}
   2ba22:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2ba26:	aa04      	add	r2, sp, #16
   2ba28:	e882 0003 	stmia.w	r2, {r0, r1}
		.topic = nct_evt->param.dc->topic,
	};

	bool discon_req = nrf_cloud_detect_disconnection_request(nct_evt->param.dc->data.ptr);
   2ba2c:	6858      	ldr	r0, [r3, #4]
   2ba2e:	f7ff fcc9 	bl	2b3c4 <nrf_cloud_detect_disconnection_request>

	/* All data is forwared to the app... unless a callback is registered */
	if (cell_pos_cb_send(nct_evt->param.dc->data.ptr) == 0) {
   2ba32:	6863      	ldr	r3, [r4, #4]
	if (cell_pos_cb) {
   2ba34:	4c10      	ldr	r4, [pc, #64]	; (2ba78 <dc_rx_data_handler+0x74>)
	bool discon_req = nrf_cloud_detect_disconnection_request(nct_evt->param.dc->data.ptr);
   2ba36:	4605      	mov	r5, r0
	if (cell_pos_cb_send(nct_evt->param.dc->data.ptr) == 0) {
   2ba38:	6858      	ldr	r0, [r3, #4]
	if (cell_pos_cb) {
   2ba3a:	6823      	ldr	r3, [r4, #0]
   2ba3c:	b15b      	cbz	r3, 2ba56 <dc_rx_data_handler+0x52>
		int ret = nrf_cloud_cell_pos_process(rx_buf, &res);
   2ba3e:	a906      	add	r1, sp, #24
   2ba40:	f003 fac0 	bl	2efc4 <nrf_cloud_cell_pos_process>
		if (ret <= 0) {
   2ba44:	42b0      	cmp	r0, r6
   2ba46:	dc06      	bgt.n	2ba56 <dc_rx_data_handler+0x52>
			cell_pos_cb(&res);
   2ba48:	6823      	ldr	r3, [r4, #0]
   2ba4a:	a806      	add	r0, sp, #24
   2ba4c:	4798      	blx	r3
	cell_pos_cb = cb;
   2ba4e:	6026      	str	r6, [r4, #0]
			LOG_ERR("nRF Cloud disconnection-on-delete failure, error: %d", err);
		}
	}

	return 0;
}
   2ba50:	2000      	movs	r0, #0
   2ba52:	b00e      	add	sp, #56	; 0x38
   2ba54:	bd70      	pop	{r4, r5, r6, pc}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   2ba56:	f7ff fd81 	bl	2b55c <nfsm_get_current_state>
   2ba5a:	4669      	mov	r1, sp
   2ba5c:	f7ff fd84 	bl	2b568 <nfsm_set_current_state_and_notify>
	if (discon_req) {
   2ba60:	2d00      	cmp	r5, #0
   2ba62:	d0f5      	beq.n	2ba50 <dc_rx_data_handler+0x4c>
		int err = nrf_cloud_disconnect();
   2ba64:	f7ff fe7c 	bl	2b760 <nrf_cloud_disconnect>
		if (err < 0) {
   2ba68:	1e02      	subs	r2, r0, #0
   2ba6a:	daf1      	bge.n	2ba50 <dc_rx_data_handler+0x4c>
			LOG_ERR("nRF Cloud disconnection-on-delete failure, error: %d", err);
   2ba6c:	2145      	movs	r1, #69	; 0x45
   2ba6e:	4803      	ldr	r0, [pc, #12]	; (2ba7c <dc_rx_data_handler+0x78>)
   2ba70:	f011 f846 	bl	3cb00 <z_log_minimal_printk>
   2ba74:	e7ec      	b.n	2ba50 <dc_rx_data_handler+0x4c>
   2ba76:	bf00      	nop
   2ba78:	20019564 	.word	0x20019564
   2ba7c:	0004844c 	.word	0x0004844c

0002ba80 <cc_connection_handler>:
{
   2ba80:	b510      	push	{r4, lr}
   2ba82:	4604      	mov	r4, r0
   2ba84:	b086      	sub	sp, #24
	const struct nrf_cloud_evt evt = {
   2ba86:	2100      	movs	r1, #0
   2ba88:	2218      	movs	r2, #24
   2ba8a:	4668      	mov	r0, sp
   2ba8c:	f015 fcd2 	bl	41434 <memset>
   2ba90:	23ff      	movs	r3, #255	; 0xff
	if (nct_evt->status != 0) {
   2ba92:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   2ba94:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   2ba98:	b151      	cbz	r1, 2bab0 <cc_connection_handler+0x30>
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2ba9a:	f7ff fd5f 	bl	2b55c <nfsm_get_current_state>
   2ba9e:	4669      	mov	r1, sp
   2baa0:	f7ff fd62 	bl	2b568 <nfsm_set_current_state_and_notify>
		return 0;
   2baa4:	2400      	movs	r4, #0
		(void)nct_dc_disconnect();
   2baa6:	f000 fef5 	bl	2c894 <nct_dc_disconnect>
}
   2baaa:	4620      	mov	r0, r4
   2baac:	b006      	add	sp, #24
   2baae:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   2bab0:	2004      	movs	r0, #4
   2bab2:	f7ff fd59 	bl	2b568 <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   2bab6:	4806      	ldr	r0, [pc, #24]	; (2bad0 <cc_connection_handler+0x50>)
   2bab8:	f000 fe00 	bl	2c6bc <nct_cc_send>
	if (err) {
   2babc:	4604      	mov	r4, r0
   2babe:	b120      	cbz	r0, 2baca <cc_connection_handler+0x4a>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2bac0:	4669      	mov	r1, sp
   2bac2:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2bac4:	f7ff fd50 	bl	2b568 <nfsm_set_current_state_and_notify>
	return 0;
   2bac8:	e7ef      	b.n	2baaa <cc_connection_handler+0x2a>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2baca:	4601      	mov	r1, r0
   2bacc:	2005      	movs	r0, #5
   2bace:	e7f9      	b.n	2bac4 <cc_connection_handler+0x44>
   2bad0:	00043000 	.word	0x00043000

0002bad4 <state_ua_pin_wait>:
{
   2bad4:	b510      	push	{r4, lr}
   2bad6:	b08c      	sub	sp, #48	; 0x30
	struct nct_cc_data msg = {
   2bad8:	2214      	movs	r2, #20
   2bada:	2100      	movs	r1, #0
   2badc:	a801      	add	r0, sp, #4
   2bade:	f015 fca9 	bl	41434 <memset>
   2bae2:	4b17      	ldr	r3, [pc, #92]	; (2bb40 <state_ua_pin_wait+0x6c>)
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2bae4:	2006      	movs	r0, #6
   2bae6:	a901      	add	r1, sp, #4
	struct nct_cc_data msg = {
   2bae8:	9305      	str	r3, [sp, #20]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2baea:	f7fe fd87 	bl	2a5fc <nrf_cloud_encode_state>
	if (err) {
   2baee:	4604      	mov	r4, r0
   2baf0:	b138      	cbz	r0, 2bb02 <state_ua_pin_wait+0x2e>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2baf2:	4602      	mov	r2, r0
   2baf4:	2145      	movs	r1, #69	; 0x45
   2baf6:	4813      	ldr	r0, [pc, #76]	; (2bb44 <state_ua_pin_wait+0x70>)
   2baf8:	f011 f802 	bl	3cb00 <z_log_minimal_printk>
}
   2bafc:	4620      	mov	r0, r4
   2bafe:	b00c      	add	sp, #48	; 0x30
   2bb00:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   2bb02:	a801      	add	r0, sp, #4
   2bb04:	f000 fdda 	bl	2c6bc <nct_cc_send>
	if (err) {
   2bb08:	4604      	mov	r4, r0
   2bb0a:	b140      	cbz	r0, 2bb1e <state_ua_pin_wait+0x4a>
		LOG_ERR("nct_cc_send failed %d", err);
   2bb0c:	4602      	mov	r2, r0
   2bb0e:	2145      	movs	r1, #69	; 0x45
   2bb10:	480d      	ldr	r0, [pc, #52]	; (2bb48 <state_ua_pin_wait+0x74>)
   2bb12:	f010 fff5 	bl	3cb00 <z_log_minimal_printk>
		nrf_cloud_free((void *)msg.data.ptr);
   2bb16:	9802      	ldr	r0, [sp, #8]
   2bb18:	f015 fbdb 	bl	412d2 <k_free>
		return err;
   2bb1c:	e7ee      	b.n	2bafc <state_ua_pin_wait+0x28>
	nrf_cloud_free((void *)msg.data.ptr);
   2bb1e:	9802      	ldr	r0, [sp, #8]
   2bb20:	f015 fbd7 	bl	412d2 <k_free>
	struct nrf_cloud_evt evt = {
   2bb24:	2218      	movs	r2, #24
   2bb26:	4621      	mov	r1, r4
   2bb28:	eb0d 0002 	add.w	r0, sp, r2
   2bb2c:	f015 fc82 	bl	41434 <memset>
   2bb30:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2bb32:	2006      	movs	r0, #6
   2bb34:	a906      	add	r1, sp, #24
	struct nrf_cloud_evt evt = {
   2bb36:	f88d 3018 	strb.w	r3, [sp, #24]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2bb3a:	f7ff fd15 	bl	2b568 <nfsm_set_current_state_and_notify>
	return 0;
   2bb3e:	e7dd      	b.n	2bafc <state_ua_pin_wait+0x28>
   2bb40:	0001012c 	.word	0x0001012c
   2bb44:	00048486 	.word	0x00048486
   2bb48:	000484ac 	.word	0x000484ac

0002bb4c <cc_rx_data_handler>:
{
   2bb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool config_found = false;
   2bb4e:	2400      	movs	r4, #0
{
   2bb50:	b097      	sub	sp, #92	; 0x5c
   2bb52:	4606      	mov	r6, r0
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   2bb54:	6847      	ldr	r7, [r0, #4]
	bool config_found = false;
   2bb56:	f88d 400b 	strb.w	r4, [sp, #11]
	const enum nfsm_state current_state = nfsm_get_current_state();
   2bb5a:	f7ff fcff 	bl	2b55c <nfsm_get_current_state>
	struct nct_cc_data msg = {
   2bb5e:	2214      	movs	r2, #20
   2bb60:	4621      	mov	r1, r4
	const enum nfsm_state current_state = nfsm_get_current_state();
   2bb62:	4605      	mov	r5, r0
	struct nct_cc_data msg = {
   2bb64:	a80b      	add	r0, sp, #44	; 0x2c
   2bb66:	f015 fc65 	bl	41434 <memset>
   2bb6a:	4b64      	ldr	r3, [pc, #400]	; (2bcfc <cc_rx_data_handler+0x1b0>)
	struct nrf_cloud_evt cloud_evt = {
   2bb6c:	2218      	movs	r2, #24
   2bb6e:	4621      	mov	r1, r4
   2bb70:	a810      	add	r0, sp, #64	; 0x40
	struct nct_cc_data msg = {
   2bb72:	930f      	str	r3, [sp, #60]	; 0x3c
	struct nrf_cloud_evt cloud_evt = {
   2bb74:	f015 fc5e 	bl	41434 <memset>
   2bb78:	2306      	movs	r3, #6
	if (evt->param.cc == NULL) {
   2bb7a:	6870      	ldr	r0, [r6, #4]
	struct nrf_cloud_evt cloud_evt = {
   2bb7c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (evt->param.cc == NULL) {
   2bb80:	b160      	cbz	r0, 2bb9c <cc_rx_data_handler+0x50>
	err = nrf_cloud_encode_config_response(&evt->param.cc->data, &msg.data,
   2bb82:	f10d 020b 	add.w	r2, sp, #11
   2bb86:	a90b      	add	r1, sp, #44	; 0x2c
   2bb88:	f7fe fc9e 	bl	2a4c8 <nrf_cloud_encode_config_response>
	if ((err) && (err != -ESRCH)) {
   2bb8c:	4602      	mov	r2, r0
   2bb8e:	b1b8      	cbz	r0, 2bbc0 <cc_rx_data_handler+0x74>
   2bb90:	1cc3      	adds	r3, r0, #3
   2bb92:	d015      	beq.n	2bbc0 <cc_rx_data_handler+0x74>
		LOG_ERR("nrf_cloud_encode_config_response failed %d", err);
   2bb94:	2145      	movs	r1, #69	; 0x45
   2bb96:	485a      	ldr	r0, [pc, #360]	; (2bd00 <cc_rx_data_handler+0x1b4>)
   2bb98:	f010 ffb2 	bl	3cb00 <z_log_minimal_printk>
	err = nrf_cloud_decode_requested_state(payload, &new_state);
   2bb9c:	4638      	mov	r0, r7
   2bb9e:	f10d 010a 	add.w	r1, sp, #10
   2bba2:	f7fe fbe7 	bl	2a374 <nrf_cloud_decode_requested_state>
	if (err) {
   2bba6:	4604      	mov	r4, r0
   2bba8:	b370      	cbz	r0, 2bc08 <cc_rx_data_handler+0xbc>
		if (!config_found) {
   2bbaa:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2bbae:	2b00      	cmp	r3, #0
   2bbb0:	f040 80a1 	bne.w	2bcf6 <cc_rx_data_handler+0x1aa>
			LOG_ERR("nrf_cloud_decode_requested_state Failed %d",
   2bbb4:	2145      	movs	r1, #69	; 0x45
   2bbb6:	4602      	mov	r2, r0
   2bbb8:	4852      	ldr	r0, [pc, #328]	; (2bd04 <cc_rx_data_handler+0x1b8>)
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2bbba:	f010 ffa1 	bl	3cb00 <z_log_minimal_printk>
		return err;
   2bbbe:	e055      	b.n	2bc6c <cc_rx_data_handler+0x120>
	if (*config_found == false) {
   2bbc0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2bbc4:	2b00      	cmp	r3, #0
   2bbc6:	d0e9      	beq.n	2bb9c <cc_rx_data_handler+0x50>
	if (msg.data.ptr) {
   2bbc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2bbca:	b163      	cbz	r3, 2bbe6 <cc_rx_data_handler+0x9a>
		err = nct_cc_send(&msg);
   2bbcc:	a80b      	add	r0, sp, #44	; 0x2c
   2bbce:	f000 fd75 	bl	2c6bc <nct_cc_send>
   2bbd2:	4604      	mov	r4, r0
		nrf_cloud_free((void *)msg.data.ptr);
   2bbd4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bbd6:	f015 fb7c 	bl	412d2 <k_free>
		if (err) {
   2bbda:	b124      	cbz	r4, 2bbe6 <cc_rx_data_handler+0x9a>
			LOG_ERR("nct_cc_send failed %d", err);
   2bbdc:	4622      	mov	r2, r4
   2bbde:	2145      	movs	r1, #69	; 0x45
   2bbe0:	4849      	ldr	r0, [pc, #292]	; (2bd08 <cc_rx_data_handler+0x1bc>)
   2bbe2:	f010 ff8d 	bl	3cb00 <z_log_minimal_printk>
	cloud_evt.data = evt->param.cc->data;
   2bbe6:	6873      	ldr	r3, [r6, #4]
   2bbe8:	aa12      	add	r2, sp, #72	; 0x48
   2bbea:	e893 0003 	ldmia.w	r3, {r0, r1}
   2bbee:	e882 0003 	stmia.w	r2, {r0, r1}
	cloud_evt.topic = evt->param.cc->topic;
   2bbf2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2bbf6:	ab16      	add	r3, sp, #88	; 0x58
   2bbf8:	e903 0003 	stmdb	r3, {r0, r1}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   2bbfc:	f7ff fcae 	bl	2b55c <nfsm_get_current_state>
   2bc00:	a910      	add	r1, sp, #64	; 0x40
   2bc02:	f7ff fcb1 	bl	2b568 <nfsm_set_current_state_and_notify>
	return err;
   2bc06:	e7c9      	b.n	2bb9c <cc_rx_data_handler+0x50>
	switch (current_state) {
   2bc08:	2d07      	cmp	r5, #7
   2bc0a:	d82b      	bhi.n	2bc64 <cc_rx_data_handler+0x118>
   2bc0c:	2d03      	cmp	r5, #3
   2bc0e:	d92d      	bls.n	2bc6c <cc_rx_data_handler+0x120>
		if (new_state == STATE_UA_PIN_COMPLETE) {
   2bc10:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2bc14:	2b07      	cmp	r3, #7
   2bc16:	d161      	bne.n	2bcdc <cc_rx_data_handler+0x190>
			if (!config_found) {
   2bc18:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2bc1c:	b9a2      	cbnz	r2, 2bc48 <cc_rx_data_handler+0xfc>
				struct nrf_cloud_evt cloud_evt = {
   2bc1e:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
   2bc22:	2206      	movs	r2, #6
					.data = nct_evt->param.cc->data,
   2bc24:	6873      	ldr	r3, [r6, #4]
				struct nrf_cloud_evt cloud_evt = {
   2bc26:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
   2bc2a:	aa12      	add	r2, sp, #72	; 0x48
   2bc2c:	e893 0003 	ldmia.w	r3, {r0, r1}
   2bc30:	e882 0003 	stmia.w	r2, {r0, r1}
   2bc34:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2bc38:	ab16      	add	r3, sp, #88	; 0x58
   2bc3a:	e903 0003 	stmdb	r3, {r0, r1}
				nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   2bc3e:	f7ff fc8d 	bl	2b55c <nfsm_get_current_state>
   2bc42:	a910      	add	r1, sp, #64	; 0x40
   2bc44:	f7ff fc90 	bl	2b568 <nfsm_set_current_state_and_notify>
	err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, &bulk, &endpoint);
   2bc48:	ad09      	add	r5, sp, #36	; 0x24
   2bc4a:	6870      	ldr	r0, [r6, #4]
   2bc4c:	9500      	str	r5, [sp, #0]
   2bc4e:	ab07      	add	r3, sp, #28
   2bc50:	aa03      	add	r2, sp, #12
   2bc52:	a905      	add	r1, sp, #20
   2bc54:	f7fe fd8e 	bl	2a774 <nrf_cloud_decode_data_endpoint>
	if (err) {
   2bc58:	4604      	mov	r4, r0
   2bc5a:	b150      	cbz	r0, 2bc72 <cc_rx_data_handler+0x126>
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2bc5c:	4602      	mov	r2, r0
   2bc5e:	2145      	movs	r1, #69	; 0x45
   2bc60:	482a      	ldr	r0, [pc, #168]	; (2bd0c <cc_rx_data_handler+0x1c0>)
   2bc62:	e7aa      	b.n	2bbba <cc_rx_data_handler+0x6e>
	switch (current_state) {
   2bc64:	3d08      	subs	r5, #8
   2bc66:	b2ed      	uxtb	r5, r5
   2bc68:	2d01      	cmp	r5, #1
   2bc6a:	d93d      	bls.n	2bce8 <cc_rx_data_handler+0x19c>
}
   2bc6c:	4620      	mov	r0, r4
   2bc6e:	b017      	add	sp, #92	; 0x5c
   2bc70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nct_dc_endpoint_set(&tx, &rx, &bulk, &endpoint);
   2bc72:	462b      	mov	r3, r5
   2bc74:	aa07      	add	r2, sp, #28
   2bc76:	a903      	add	r1, sp, #12
   2bc78:	a805      	add	r0, sp, #20
   2bc7a:	f000 fd69 	bl	2c750 <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   2bc7e:	4621      	mov	r1, r4
   2bc80:	2214      	movs	r2, #20
   2bc82:	a80b      	add	r0, sp, #44	; 0x2c
   2bc84:	f015 fbd6 	bl	41434 <memset>
   2bc88:	4b21      	ldr	r3, [pc, #132]	; (2bd10 <cc_rx_data_handler+0x1c4>)
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2bc8a:	2007      	movs	r0, #7
   2bc8c:	a90b      	add	r1, sp, #44	; 0x2c
	struct nct_cc_data msg = {
   2bc8e:	930f      	str	r3, [sp, #60]	; 0x3c
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2bc90:	f7fe fcb4 	bl	2a5fc <nrf_cloud_encode_state>
	if (err) {
   2bc94:	4604      	mov	r4, r0
   2bc96:	b118      	cbz	r0, 2bca0 <cc_rx_data_handler+0x154>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2bc98:	4602      	mov	r2, r0
   2bc9a:	2145      	movs	r1, #69	; 0x45
   2bc9c:	481d      	ldr	r0, [pc, #116]	; (2bd14 <cc_rx_data_handler+0x1c8>)
   2bc9e:	e78c      	b.n	2bbba <cc_rx_data_handler+0x6e>
	err = nct_cc_send(&msg);
   2bca0:	a80b      	add	r0, sp, #44	; 0x2c
   2bca2:	f000 fd0b 	bl	2c6bc <nct_cc_send>
	if (err) {
   2bca6:	4604      	mov	r4, r0
   2bca8:	b140      	cbz	r0, 2bcbc <cc_rx_data_handler+0x170>
		LOG_ERR("nct_cc_send failed %d", err);
   2bcaa:	4602      	mov	r2, r0
   2bcac:	2145      	movs	r1, #69	; 0x45
   2bcae:	4816      	ldr	r0, [pc, #88]	; (2bd08 <cc_rx_data_handler+0x1bc>)
   2bcb0:	f010 ff26 	bl	3cb00 <z_log_minimal_printk>
		nrf_cloud_free((void *)msg.data.ptr);
   2bcb4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bcb6:	f015 fb0c 	bl	412d2 <k_free>
		return err;
   2bcba:	e7d7      	b.n	2bc6c <cc_rx_data_handler+0x120>
	nrf_cloud_free((void *)msg.data.ptr);
   2bcbc:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bcbe:	f015 fb08 	bl	412d2 <k_free>
	struct nrf_cloud_evt evt = {
   2bcc2:	4621      	mov	r1, r4
   2bcc4:	2218      	movs	r2, #24
   2bcc6:	a810      	add	r0, sp, #64	; 0x40
   2bcc8:	f015 fbb4 	bl	41434 <memset>
   2bccc:	2304      	movs	r3, #4
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2bcce:	2007      	movs	r0, #7
   2bcd0:	a910      	add	r1, sp, #64	; 0x40
	struct nrf_cloud_evt evt = {
   2bcd2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2bcd6:	f7ff fc47 	bl	2b568 <nfsm_set_current_state_and_notify>
			return handle_pin_complete(nct_evt);
   2bcda:	e7c7      	b.n	2bc6c <cc_rx_data_handler+0x120>
		} else if (new_state == STATE_UA_PIN_WAIT) {
   2bcdc:	2b06      	cmp	r3, #6
   2bcde:	d1c5      	bne.n	2bc6c <cc_rx_data_handler+0x120>
			return state_ua_pin_wait();
   2bce0:	f7ff fef8 	bl	2bad4 <state_ua_pin_wait>
   2bce4:	4604      	mov	r4, r0
   2bce6:	e7c1      	b.n	2bc6c <cc_rx_data_handler+0x120>
		if (new_state == STATE_UA_PIN_WAIT) {
   2bce8:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2bcec:	2b06      	cmp	r3, #6
   2bcee:	d1bd      	bne.n	2bc6c <cc_rx_data_handler+0x120>
			(void)nct_dc_disconnect();
   2bcf0:	f000 fdd0 	bl	2c894 <nct_dc_disconnect>
   2bcf4:	e7f4      	b.n	2bce0 <cc_rx_data_handler+0x194>
		return 0;
   2bcf6:	2400      	movs	r4, #0
   2bcf8:	e7b8      	b.n	2bc6c <cc_rx_data_handler+0x120>
   2bcfa:	bf00      	nop
   2bcfc:	0001012c 	.word	0x0001012c
   2bd00:	000484c7 	.word	0x000484c7
   2bd04:	000484f7 	.word	0x000484f7
   2bd08:	000484ac 	.word	0x000484ac
   2bd0c:	00048527 	.word	0x00048527
   2bd10:	0001012d 	.word	0x0001012d
   2bd14:	00048486 	.word	0x00048486

0002bd18 <nfsm_set_cell_pos_response_cb>:
	cell_pos_cb = cb;
   2bd18:	4b01      	ldr	r3, [pc, #4]	; (2bd20 <nfsm_set_cell_pos_response_cb+0x8>)
   2bd1a:	6018      	str	r0, [r3, #0]
}
   2bd1c:	4770      	bx	lr
   2bd1e:	bf00      	nop
   2bd20:	20019564 	.word	0x20019564

0002bd24 <nfsm_init>:
	persistent_session = false;
   2bd24:	2000      	movs	r0, #0
   2bd26:	4b01      	ldr	r3, [pc, #4]	; (2bd2c <nfsm_init+0x8>)
   2bd28:	7018      	strb	r0, [r3, #0]
}
   2bd2a:	4770      	bx	lr
   2bd2c:	2001c90b 	.word	0x2001c90b

0002bd30 <nfsm_handle_incoming_event>:
{
   2bd30:	b570      	push	{r4, r5, r6, lr}
   2bd32:	460d      	mov	r5, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   2bd34:	4606      	mov	r6, r0
   2bd36:	b120      	cbz	r0, 2bd42 <nfsm_handle_incoming_event+0x12>
   2bd38:	7a03      	ldrb	r3, [r0, #8]
   2bd3a:	2b0a      	cmp	r3, #10
   2bd3c:	d801      	bhi.n	2bd42 <nfsm_handle_incoming_event+0x12>
   2bd3e:	2909      	cmp	r1, #9
   2bd40:	d90c      	bls.n	2bd5c <nfsm_handle_incoming_event+0x2c>
		__ASSERT_NO_MSG(false);
   2bd42:	2280      	movs	r2, #128	; 0x80
   2bd44:	490e      	ldr	r1, [pc, #56]	; (2bd80 <nfsm_handle_incoming_event+0x50>)
   2bd46:	480f      	ldr	r0, [pc, #60]	; (2bd84 <nfsm_handle_incoming_event+0x54>)
   2bd48:	f010 fea0 	bl	3ca8c <assert_print>
   2bd4c:	2180      	movs	r1, #128	; 0x80
   2bd4e:	480c      	ldr	r0, [pc, #48]	; (2bd80 <nfsm_handle_incoming_event+0x50>)
   2bd50:	f010 fe95 	bl	3ca7e <assert_post_action>
		return -EINVAL;
   2bd54:	f06f 0415 	mvn.w	r4, #21
}
   2bd58:	4620      	mov	r0, r4
   2bd5a:	bd70      	pop	{r4, r5, r6, pc}
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   2bd5c:	4a0a      	ldr	r2, [pc, #40]	; (2bd88 <nfsm_handle_incoming_event+0x58>)
   2bd5e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   2bd62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   2bd66:	2c00      	cmp	r4, #0
   2bd68:	d0f6      	beq.n	2bd58 <nfsm_handle_incoming_event+0x28>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   2bd6a:	47a0      	blx	r4
		if (err) {
   2bd6c:	4604      	mov	r4, r0
   2bd6e:	2800      	cmp	r0, #0
   2bd70:	d0f2      	beq.n	2bd58 <nfsm_handle_incoming_event+0x28>
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   2bd72:	462a      	mov	r2, r5
   2bd74:	2145      	movs	r1, #69	; 0x45
   2bd76:	7a33      	ldrb	r3, [r6, #8]
   2bd78:	4804      	ldr	r0, [pc, #16]	; (2bd8c <nfsm_handle_incoming_event+0x5c>)
   2bd7a:	f010 fec1 	bl	3cb00 <z_log_minimal_printk>
   2bd7e:	e7eb      	b.n	2bd58 <nfsm_handle_incoming_event+0x28>
   2bd80:	00048555 	.word	0x00048555
   2bd84:	0004409e 	.word	0x0004409e
   2bd88:	0004306c 	.word	0x0004306c
   2bd8c:	00048592 	.word	0x00048592

0002bd90 <cc_tx_ack_handler>:
{
   2bd90:	b510      	push	{r4, lr}
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   2bd92:	8883      	ldrh	r3, [r0, #4]
{
   2bd94:	4604      	mov	r4, r0
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   2bd96:	2bc8      	cmp	r3, #200	; 0xc8
{
   2bd98:	b086      	sub	sp, #24
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   2bd9a:	d105      	bne.n	2bda8 <cc_tx_ack_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   2bd9c:	2100      	movs	r1, #0
   2bd9e:	2005      	movs	r0, #5
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2bda0:	f7ff fbe2 	bl	2b568 <nfsm_set_current_state_and_notify>
	return 0;
   2bda4:	2400      	movs	r4, #0
   2bda6:	e00e      	b.n	2bdc6 <cc_tx_ack_handler+0x36>
	} else if (nct_evt->param.message_id == NCT_MSG_ID_PAIR_STATUS_REPORT) {
   2bda8:	f240 122d 	movw	r2, #301	; 0x12d
   2bdac:	4293      	cmp	r3, r2
   2bdae:	d119      	bne.n	2bde4 <cc_tx_ack_handler+0x54>
		if (!persistent_session) {
   2bdb0:	4b1c      	ldr	r3, [pc, #112]	; (2be24 <cc_tx_ack_handler+0x94>)
   2bdb2:	781b      	ldrb	r3, [r3, #0]
   2bdb4:	b953      	cbnz	r3, 2bdcc <cc_tx_ack_handler+0x3c>
			err = nct_dc_connect();
   2bdb6:	f000 fd25 	bl	2c804 <nct_dc_connect>
			if (err) {
   2bdba:	4604      	mov	r4, r0
   2bdbc:	b918      	cbnz	r0, 2bdc6 <cc_tx_ack_handler+0x36>
			nfsm_set_current_state_and_notify(STATE_DC_CONNECTING,
   2bdbe:	4601      	mov	r1, r0
   2bdc0:	2008      	movs	r0, #8
   2bdc2:	f7ff fbd1 	bl	2b568 <nfsm_set_current_state_and_notify>
}
   2bdc6:	4620      	mov	r0, r4
   2bdc8:	b006      	add	sp, #24
   2bdca:	bd10      	pop	{r4, pc}
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2bdcc:	2400      	movs	r4, #0
   2bdce:	2302      	movs	r3, #2
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   2bdd0:	2108      	movs	r1, #8
   2bdd2:	4668      	mov	r0, sp
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2bdd4:	9402      	str	r4, [sp, #8]
   2bdd6:	e9cd 4400 	strd	r4, r4, [sp]
   2bdda:	f88d 3008 	strb.w	r3, [sp, #8]
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   2bdde:	f7ff ffa7 	bl	2bd30 <nfsm_handle_incoming_event>
   2bde2:	e7f0      	b.n	2bdc6 <cc_tx_ack_handler+0x36>
	} else if (nct_evt->type == NCT_EVT_PINGRESP) {
   2bde4:	7a02      	ldrb	r2, [r0, #8]
   2bde6:	2a05      	cmp	r2, #5
   2bde8:	d10b      	bne.n	2be02 <cc_tx_ack_handler+0x72>
		struct nrf_cloud_evt evt = {
   2bdea:	2218      	movs	r2, #24
   2bdec:	2100      	movs	r1, #0
   2bdee:	4668      	mov	r0, sp
   2bdf0:	f015 fb20 	bl	41434 <memset>
   2bdf4:	2307      	movs	r3, #7
   2bdf6:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2bdfa:	f7ff fbaf 	bl	2b55c <nfsm_get_current_state>
   2bdfe:	4669      	mov	r1, sp
   2be00:	e7ce      	b.n	2bda0 <cc_tx_ack_handler+0x10>
	} else if (IS_VALID_USER_TAG(nct_evt->param.message_id)) {
   2be02:	f242 720f 	movw	r2, #9999	; 0x270f
   2be06:	4293      	cmp	r3, r2
   2be08:	d9cc      	bls.n	2bda4 <cc_tx_ack_handler+0x14>
		struct nrf_cloud_evt evt = {
   2be0a:	2218      	movs	r2, #24
   2be0c:	2100      	movs	r1, #0
   2be0e:	4668      	mov	r0, sp
   2be10:	f015 fb10 	bl	41434 <memset>
   2be14:	2308      	movs	r3, #8
   2be16:	f88d 3000 	strb.w	r3, [sp]
   2be1a:	2302      	movs	r3, #2
			.data.ptr = &nct_evt->param.message_id
   2be1c:	3404      	adds	r4, #4
		struct nrf_cloud_evt evt = {
   2be1e:	9302      	str	r3, [sp, #8]
   2be20:	9403      	str	r4, [sp, #12]
   2be22:	e7ea      	b.n	2bdfa <cc_tx_ack_handler+0x6a>
   2be24:	2001c90b 	.word	0x2001c90b

0002be28 <connection_handler>:
{
   2be28:	b570      	push	{r4, r5, r6, lr}
	if (nct_evt->status != 0) {
   2be2a:	6804      	ldr	r4, [r0, #0]
{
   2be2c:	4605      	mov	r5, r0
   2be2e:	b08a      	sub	sp, #40	; 0x28
	if (nct_evt->status != 0) {
   2be30:	b164      	cbz	r4, 2be4c <connection_handler+0x24>
		evt.type = NRF_CLOUD_EVT_ERROR;
   2be32:	23ff      	movs	r3, #255	; 0xff
		evt.status = nct_evt->status;
   2be34:	9405      	str	r4, [sp, #20]
		evt.type = NRF_CLOUD_EVT_ERROR;
   2be36:	f88d 3010 	strb.w	r3, [sp, #16]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   2be3a:	f7ff fb8f 	bl	2b55c <nfsm_get_current_state>
   2be3e:	a904      	add	r1, sp, #16
   2be40:	f7ff fb92 	bl	2b568 <nfsm_set_current_state_and_notify>
		return 0;
   2be44:	2400      	movs	r4, #0
}
   2be46:	4620      	mov	r0, r4
   2be48:	b00a      	add	sp, #40	; 0x28
   2be4a:	bd70      	pop	{r4, r5, r6, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2be4c:	2601      	movs	r6, #1
	evt.status = nct_evt->param.flag;
   2be4e:	7903      	ldrb	r3, [r0, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2be50:	a904      	add	r1, sp, #16
   2be52:	2002      	movs	r0, #2
	evt.status = nct_evt->param.flag;
   2be54:	9305      	str	r3, [sp, #20]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2be56:	f88d 6010 	strb.w	r6, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2be5a:	f7ff fb85 	bl	2b568 <nfsm_set_current_state_and_notify>
	persistent_session = nct_evt->param.flag;
   2be5e:	792b      	ldrb	r3, [r5, #4]
   2be60:	2b00      	cmp	r3, #0
   2be62:	bf14      	ite	ne
   2be64:	4632      	movne	r2, r6
   2be66:	2200      	moveq	r2, #0
   2be68:	4b0b      	ldr	r3, [pc, #44]	; (2be98 <connection_handler+0x70>)
   2be6a:	701a      	strb	r2, [r3, #0]
	if (!persistent_session) {
   2be6c:	d109      	bne.n	2be82 <connection_handler+0x5a>
		err = nct_cc_connect();
   2be6e:	f000 fc13 	bl	2c698 <nct_cc_connect>
		if (err) {
   2be72:	4604      	mov	r4, r0
   2be74:	2800      	cmp	r0, #0
   2be76:	d1e6      	bne.n	2be46 <connection_handler+0x1e>
		nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   2be78:	4601      	mov	r1, r0
   2be7a:	2003      	movs	r0, #3
   2be7c:	f7ff fb74 	bl	2b568 <nfsm_set_current_state_and_notify>
   2be80:	e7e1      	b.n	2be46 <connection_handler+0x1e>
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   2be82:	2103      	movs	r1, #3
   2be84:	a801      	add	r0, sp, #4
		struct nct_evt nevt = { .type = NCT_EVT_CC_CONNECTED,
   2be86:	9403      	str	r4, [sp, #12]
   2be88:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2be8c:	f88d 600c 	strb.w	r6, [sp, #12]
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   2be90:	f7ff ff4e 	bl	2bd30 <nfsm_handle_incoming_event>
   2be94:	e7d7      	b.n	2be46 <connection_handler+0x1e>
   2be96:	bf00      	nop
   2be98:	2001c90b 	.word	0x2001c90b

0002be9c <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   2be9c:	2200      	movs	r2, #0
   2be9e:	4b05      	ldr	r3, [pc, #20]	; (2beb4 <dc_endpoint_reset+0x18>)
	nct.dc_rx_endp.size = 0;
   2bea0:	e9c3 2233 	strd	r2, r2, [r3, #204]	; 0xcc

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   2bea4:	e9c3 2231 	strd	r2, r2, [r3, #196]	; 0xc4

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   2bea8:	e9c3 2235 	strd	r2, r2, [r3, #212]	; 0xd4

	nct.dc_bulk_endp.utf8 = NULL;
	nct.dc_bulk_endp.size = 0;
   2beac:	e9c3 2237 	strd	r2, r2, [r3, #220]	; 0xdc
}
   2beb0:	4770      	bx	lr
   2beb2:	bf00      	nop
   2beb4:	20019570 	.word	0x20019570

0002beb8 <get_message_id>:
	return nct.message_id;
}

static uint16_t get_message_id(const uint16_t requested_id)
{
	if (requested_id != NCT_MSG_ID_USE_NEXT_INCREMENT) {
   2beb8:	b968      	cbnz	r0, 2bed6 <get_message_id+0x1e>
	if (nct.message_id < NCT_MSG_ID_INCREMENT_BEGIN ||
   2beba:	4b09      	ldr	r3, [pc, #36]	; (2bee0 <get_message_id+0x28>)
   2bebc:	f8b3 00e4 	ldrh.w	r0, [r3, #228]	; 0xe4
   2bec0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   2bec4:	d308      	bcc.n	2bed8 <get_message_id+0x20>
   2bec6:	f242 720f 	movw	r2, #9999	; 0x270f
   2beca:	4290      	cmp	r0, r2
   2becc:	d004      	beq.n	2bed8 <get_message_id+0x20>
		++nct.message_id;
   2bece:	3001      	adds	r0, #1
   2bed0:	b280      	uxth	r0, r0
   2bed2:	f8a3 00e4 	strh.w	r0, [r3, #228]	; 0xe4
		return requested_id;
	}

	return get_next_message_id();
}
   2bed6:	4770      	bx	lr
		nct.message_id = NCT_MSG_ID_INCREMENT_BEGIN;
   2bed8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2bedc:	e7f9      	b.n	2bed2 <get_message_id+0x1a>
   2bede:	bf00      	nop
   2bee0:	20019570 	.word	0x20019570

0002bee4 <nct_settings_set>:
	return 0;
}

static int nct_settings_set(const char *key, size_t len_rd,
			    settings_read_cb read_cb, void *cb_arg)
{
   2bee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bee6:	460d      	mov	r5, r1
   2bee8:	4616      	mov	r6, r2
   2beea:	461f      	mov	r7, r3
	if (!key) {
   2beec:	4604      	mov	r4, r0
   2beee:	b1e8      	cbz	r0, 2bf2c <nct_settings_set+0x48>

	int read_val;

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);

	if (!strncmp(key, SETTINGS_KEY_PERSISTENT_SESSION,
   2bef0:	4810      	ldr	r0, [pc, #64]	; (2bf34 <nct_settings_set+0x50>)
   2bef2:	f7f1 f9a6 	bl	1d242 <strlen>
   2bef6:	490f      	ldr	r1, [pc, #60]	; (2bf34 <nct_settings_set+0x50>)
   2bef8:	4602      	mov	r2, r0
   2befa:	4620      	mov	r0, r4
   2befc:	f015 fc6d 	bl	417da <strncmp>
   2bf00:	4604      	mov	r4, r0
   2bf02:	b120      	cbz	r0, 2bf0e <nct_settings_set+0x2a>
#endif
			LOG_DBG("Read setting val: %d", read_val);
			return 0;
		}
	}
	return -ENOTSUP;
   2bf04:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   2bf08:	4620      	mov	r0, r4
   2bf0a:	b003      	add	sp, #12
   2bf0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		     strlen(SETTINGS_KEY_PERSISTENT_SESSION)) &&
   2bf0e:	2d04      	cmp	r5, #4
   2bf10:	d1f8      	bne.n	2bf04 <nct_settings_set+0x20>
		if (read_cb(cb_arg, (void *)&read_val, len_rd) == len_rd) {
   2bf12:	462a      	mov	r2, r5
   2bf14:	4638      	mov	r0, r7
   2bf16:	a901      	add	r1, sp, #4
   2bf18:	47b0      	blx	r6
   2bf1a:	2804      	cmp	r0, #4
   2bf1c:	d1f2      	bne.n	2bf04 <nct_settings_set+0x20>
			persistent_session = (bool)read_val;
   2bf1e:	9b01      	ldr	r3, [sp, #4]
   2bf20:	4a05      	ldr	r2, [pc, #20]	; (2bf38 <nct_settings_set+0x54>)
   2bf22:	3b00      	subs	r3, #0
   2bf24:	bf18      	it	ne
   2bf26:	2301      	movne	r3, #1
   2bf28:	7013      	strb	r3, [r2, #0]
			return 0;
   2bf2a:	e7ed      	b.n	2bf08 <nct_settings_set+0x24>
		return -EINVAL;
   2bf2c:	f06f 0415 	mvn.w	r4, #21
   2bf30:	e7ea      	b.n	2bf08 <nct_settings_set+0x24>
   2bf32:	bf00      	nop
   2bf34:	0004866b 	.word	0x0004866b
   2bf38:	2001c90d 	.word	0x2001c90d

0002bf3c <nrf_cloud_fota_cb_handler>:
}

#if defined(CONFIG_NRF_CLOUD_FOTA)
static void nrf_cloud_fota_cb_handler(const struct nrf_cloud_fota_evt
				      * const evt)
{
   2bf3c:	b530      	push	{r4, r5, lr}
	switch (evt->id) {
   2bf3e:	7804      	ldrb	r4, [r0, #0]
{
   2bf40:	4605      	mov	r5, r0
	switch (evt->id) {
   2bf42:	2c01      	cmp	r4, #1
{
   2bf44:	b089      	sub	sp, #36	; 0x24
	switch (evt->id) {
   2bf46:	d00b      	beq.n	2bf60 <nrf_cloud_fota_cb_handler+0x24>
   2bf48:	2c02      	cmp	r4, #2
   2bf4a:	d01d      	beq.n	2bf88 <nrf_cloud_fota_cb_handler+0x4c>
   2bf4c:	b9d4      	cbnz	r4, 2bf84 <nrf_cloud_fota_cb_handler+0x48>
	case NRF_CLOUD_FOTA_EVT_START: {
		LOG_DBG("NRF_CLOUD_FOTA_EVT_START");
		struct nrf_cloud_evt cloud_evt = {
   2bf4e:	2218      	movs	r2, #24
   2bf50:	4621      	mov	r1, r4
   2bf52:	a802      	add	r0, sp, #8
   2bf54:	f015 fa6e 	bl	41434 <memset>
   2bf58:	230a      	movs	r3, #10
		nct_apply_update(&cloud_evt);
		break;
	}
	case NRF_CLOUD_FOTA_EVT_ERROR: {
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
		struct nrf_cloud_evt cloud_evt = {
   2bf5a:	f88d 3008 	strb.w	r3, [sp, #8]
   2bf5e:	e00e      	b.n	2bf7e <nrf_cloud_fota_cb_handler+0x42>
		struct nrf_cloud_evt cloud_evt = {
   2bf60:	2218      	movs	r2, #24
   2bf62:	2100      	movs	r1, #0
   2bf64:	a802      	add	r0, sp, #8
   2bf66:	f015 fa65 	bl	41434 <memset>
   2bf6a:	230b      	movs	r3, #11
   2bf6c:	f88d 3008 	strb.w	r3, [sp, #8]
			fota_type = evt->type;
   2bf70:	78ab      	ldrb	r3, [r5, #2]
   2bf72:	f88d 3007 	strb.w	r3, [sp, #7]
			cloud_evt.data.ptr = &fota_type;
   2bf76:	f10d 0307 	add.w	r3, sp, #7
			cloud_evt.data.len = sizeof(fota_type);
   2bf7a:	e9cd 4304 	strd	r4, r3, [sp, #16]
			.type = NRF_CLOUD_EVT_FOTA_ERROR
		};

		nct_apply_update(&cloud_evt);
   2bf7e:	a802      	add	r0, sp, #8
   2bf80:	f7ff fd3a 	bl	2b9f8 <nct_apply_update>
	}
	default: {
		break;
	}
	}
}
   2bf84:	b009      	add	sp, #36	; 0x24
   2bf86:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
   2bf88:	2145      	movs	r1, #69	; 0x45
   2bf8a:	4805      	ldr	r0, [pc, #20]	; (2bfa0 <nrf_cloud_fota_cb_handler+0x64>)
   2bf8c:	f010 fdb8 	bl	3cb00 <z_log_minimal_printk>
		struct nrf_cloud_evt cloud_evt = {
   2bf90:	2218      	movs	r2, #24
   2bf92:	2100      	movs	r1, #0
   2bf94:	a802      	add	r0, sp, #8
   2bf96:	f015 fa4d 	bl	41434 <memset>
   2bf9a:	230c      	movs	r3, #12
   2bf9c:	e7dd      	b.n	2bf5a <nrf_cloud_fota_cb_handler+0x1e>
   2bf9e:	bf00      	nop
   2bfa0:	000485c9 	.word	0x000485c9

0002bfa4 <allocate_and_format_topic>:
{
   2bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const size_t client_sz = strlen(client_id_buf);
   2bfa6:	4f13      	ldr	r7, [pc, #76]	; (2bff4 <allocate_and_format_topic+0x50>)
{
   2bfa8:	4605      	mov	r5, r0
	const size_t client_sz = strlen(client_id_buf);
   2bfaa:	6838      	ldr	r0, [r7, #0]
{
   2bfac:	460e      	mov	r6, r1
	const size_t client_sz = strlen(client_id_buf);
   2bfae:	f7f1 f948 	bl	1d242 <strlen>
   2bfb2:	4604      	mov	r4, r0
	topic_sz = client_sz + strlen(topic_template) - 1;
   2bfb4:	4630      	mov	r0, r6
   2bfb6:	f7f1 f944 	bl	1d242 <strlen>
   2bfba:	4404      	add	r4, r0
   2bfbc:	3c01      	subs	r4, #1
	*topic_buf = nrf_cloud_calloc(topic_sz, 1);
   2bfbe:	2101      	movs	r1, #1
   2bfc0:	4620      	mov	r0, r4
   2bfc2:	f015 f991 	bl	412e8 <k_calloc>
   2bfc6:	6028      	str	r0, [r5, #0]
	if (!*topic_buf) {
   2bfc8:	b170      	cbz	r0, 2bfe8 <allocate_and_format_topic+0x44>
	ret = snprintk(*topic_buf, topic_sz,
   2bfca:	4632      	mov	r2, r6
   2bfcc:	4621      	mov	r1, r4
   2bfce:	683b      	ldr	r3, [r7, #0]
   2bfd0:	f010 fb86 	bl	3c6e0 <snprintk>
	if (ret <= 0 || ret >= topic_sz) {
   2bfd4:	2800      	cmp	r0, #0
   2bfd6:	dd01      	ble.n	2bfdc <allocate_and_format_topic+0x38>
   2bfd8:	42a0      	cmp	r0, r4
   2bfda:	d308      	bcc.n	2bfee <allocate_and_format_topic+0x4a>
		nrf_cloud_free(*topic_buf);
   2bfdc:	6828      	ldr	r0, [r5, #0]
   2bfde:	f015 f978 	bl	412d2 <k_free>
		return -EIO;
   2bfe2:	f06f 0004 	mvn.w	r0, #4
}
   2bfe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   2bfe8:	f06f 000b 	mvn.w	r0, #11
   2bfec:	e7fb      	b.n	2bfe6 <allocate_and_format_topic+0x42>
	return 0;
   2bfee:	2000      	movs	r0, #0
   2bff0:	e7f9      	b.n	2bfe6 <allocate_and_format_topic+0x42>
   2bff2:	bf00      	nop
   2bff4:	2001956c 	.word	0x2001956c

0002bff8 <nct_reset_topics>:
{
   2bff8:	b510      	push	{r4, lr}
	if (accepted_topic) {
   2bffa:	4c17      	ldr	r4, [pc, #92]	; (2c058 <nct_reset_topics+0x60>)
   2bffc:	6820      	ldr	r0, [r4, #0]
   2bffe:	b118      	cbz	r0, 2c008 <nct_reset_topics+0x10>
		nrf_cloud_free(accepted_topic);
   2c000:	f015 f967 	bl	412d2 <k_free>
		accepted_topic = NULL;
   2c004:	2300      	movs	r3, #0
   2c006:	6023      	str	r3, [r4, #0]
	if (rejected_topic) {
   2c008:	4c14      	ldr	r4, [pc, #80]	; (2c05c <nct_reset_topics+0x64>)
   2c00a:	6820      	ldr	r0, [r4, #0]
   2c00c:	b118      	cbz	r0, 2c016 <nct_reset_topics+0x1e>
		nrf_cloud_free(rejected_topic);
   2c00e:	f015 f960 	bl	412d2 <k_free>
		rejected_topic = NULL;
   2c012:	2300      	movs	r3, #0
   2c014:	6023      	str	r3, [r4, #0]
	if (update_delta_topic) {
   2c016:	4c12      	ldr	r4, [pc, #72]	; (2c060 <nct_reset_topics+0x68>)
   2c018:	6820      	ldr	r0, [r4, #0]
   2c01a:	b118      	cbz	r0, 2c024 <nct_reset_topics+0x2c>
		nrf_cloud_free(update_delta_topic);
   2c01c:	f015 f959 	bl	412d2 <k_free>
		update_delta_topic = NULL;
   2c020:	2300      	movs	r3, #0
   2c022:	6023      	str	r3, [r4, #0]
	if (update_topic) {
   2c024:	4c0f      	ldr	r4, [pc, #60]	; (2c064 <nct_reset_topics+0x6c>)
   2c026:	6820      	ldr	r0, [r4, #0]
   2c028:	b118      	cbz	r0, 2c032 <nct_reset_topics+0x3a>
		nrf_cloud_free(update_topic);
   2c02a:	f015 f952 	bl	412d2 <k_free>
		update_topic = NULL;
   2c02e:	2300      	movs	r3, #0
   2c030:	6023      	str	r3, [r4, #0]
	if (shadow_get_topic) {
   2c032:	4c0d      	ldr	r4, [pc, #52]	; (2c068 <nct_reset_topics+0x70>)
   2c034:	6820      	ldr	r0, [r4, #0]
   2c036:	b118      	cbz	r0, 2c040 <nct_reset_topics+0x48>
		nrf_cloud_free(shadow_get_topic);
   2c038:	f015 f94b 	bl	412d2 <k_free>
		shadow_get_topic = NULL;
   2c03c:	2300      	movs	r3, #0
   2c03e:	6023      	str	r3, [r4, #0]
	memset(nct_cc_rx_list, 0, sizeof(nct_cc_rx_list[0]) * CC_RX_LIST_CNT);
   2c040:	2224      	movs	r2, #36	; 0x24
   2c042:	2100      	movs	r1, #0
   2c044:	4809      	ldr	r0, [pc, #36]	; (2c06c <nct_reset_topics+0x74>)
   2c046:	f015 f9f5 	bl	41434 <memset>
}
   2c04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(nct_cc_tx_list, 0, sizeof(nct_cc_tx_list[0]) * CC_TX_LIST_CNT);
   2c04e:	2218      	movs	r2, #24
   2c050:	2100      	movs	r1, #0
   2c052:	4807      	ldr	r0, [pc, #28]	; (2c070 <nct_reset_topics+0x78>)
   2c054:	f015 b9ee 	b.w	41434 <memset>
   2c058:	20019568 	.word	0x20019568
   2c05c:	2001a0f4 	.word	0x2001a0f4
   2c060:	2001a0fc 	.word	0x2001a0fc
   2c064:	2001a100 	.word	0x2001a100
   2c068:	2001a0f8 	.word	0x2001a0f8
   2c06c:	2001a0b8 	.word	0x2001a0b8
   2c070:	2001a0dc 	.word	0x2001a0dc

0002c074 <dc_endpoint_free>:
{
   2c074:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   2c076:	4c0d      	ldr	r4, [pc, #52]	; (2c0ac <dc_endpoint_free+0x38>)
   2c078:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   2c07c:	b108      	cbz	r0, 2c082 <dc_endpoint_free+0xe>
		nrf_cloud_free((void *)nct.dc_rx_endp.utf8);
   2c07e:	f015 f928 	bl	412d2 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   2c082:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   2c086:	b108      	cbz	r0, 2c08c <dc_endpoint_free+0x18>
		nrf_cloud_free((void *)nct.dc_tx_endp.utf8);
   2c088:	f015 f923 	bl	412d2 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   2c08c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2c090:	b108      	cbz	r0, 2c096 <dc_endpoint_free+0x22>
		nrf_cloud_free((void *)nct.dc_m_endp.utf8);
   2c092:	f015 f91e 	bl	412d2 <k_free>
	if (nct.dc_bulk_endp.utf8 != NULL) {
   2c096:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   2c09a:	b108      	cbz	r0, 2c0a0 <dc_endpoint_free+0x2c>
		nrf_cloud_free((void *)nct.dc_bulk_endp.utf8);
   2c09c:	f015 f919 	bl	412d2 <k_free>
	dc_endpoint_reset();
   2c0a0:	f7ff fefc 	bl	2be9c <dc_endpoint_reset>
}
   2c0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nrf_cloud_fota_endpoint_clear();
   2c0a8:	f003 bb3e 	b.w	2f728 <nrf_cloud_fota_endpoint_clear>
   2c0ac:	20019570 	.word	0x20019570

0002c0b0 <dc_send>:
{
   2c0b0:	b530      	push	{r4, r5, lr}
   2c0b2:	460d      	mov	r5, r1
	if (dc_data == NULL) {
   2c0b4:	4604      	mov	r4, r0
{
   2c0b6:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   2c0b8:	b1f8      	cbz	r0, 2c0fa <dc_send+0x4a>
	struct mqtt_publish_param publish = {
   2c0ba:	2210      	movs	r2, #16
   2c0bc:	2100      	movs	r1, #0
   2c0be:	a802      	add	r0, sp, #8
   2c0c0:	f015 f9b8 	bl	41434 <memset>
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   2c0c4:	4b0e      	ldr	r3, [pc, #56]	; (2c100 <dc_send+0x50>)
	struct mqtt_publish_param publish = {
   2c0c6:	f88d 5008 	strb.w	r5, [sp, #8]
   2c0ca:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
   2c0ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   2c0d2:	9200      	str	r2, [sp, #0]
   2c0d4:	9301      	str	r3, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2c0d6:	6823      	ldr	r3, [r4, #0]
   2c0d8:	b11b      	cbz	r3, 2c0e2 <dc_send+0x32>
   2c0da:	6862      	ldr	r2, [r4, #4]
   2c0dc:	b10a      	cbz	r2, 2c0e2 <dc_send+0x32>
		publish.message.payload.len = dc_data->data.len;
   2c0de:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (qos != MQTT_QOS_0_AT_MOST_ONCE) {
   2c0e2:	b125      	cbz	r5, 2c0ee <dc_send+0x3e>
		publish.message_id = get_message_id(dc_data->message_id);
   2c0e4:	8a20      	ldrh	r0, [r4, #16]
   2c0e6:	f7ff fee7 	bl	2beb8 <get_message_id>
   2c0ea:	f8ad 0014 	strh.w	r0, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2c0ee:	4669      	mov	r1, sp
   2c0f0:	4804      	ldr	r0, [pc, #16]	; (2c104 <dc_send+0x54>)
   2c0f2:	f012 f8b5 	bl	3e260 <mqtt_publish>
}
   2c0f6:	b007      	add	sp, #28
   2c0f8:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c0fa:	f06f 0015 	mvn.w	r0, #21
   2c0fe:	e7fa      	b.n	2c0f6 <dc_send+0x46>
   2c100:	20019570 	.word	0x20019570
   2c104:	20019594 	.word	0x20019594

0002c108 <nct_set_topic_prefix>:
{
   2c108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *end_of_stage = strchr(topic_prefix, '/');
   2c10a:	212f      	movs	r1, #47	; 0x2f
{
   2c10c:	4604      	mov	r4, r0
	char *end_of_stage = strchr(topic_prefix, '/');
   2c10e:	f015 fb4f 	bl	417b0 <strchr>
	if (end_of_stage) {
   2c112:	4606      	mov	r6, r0
   2c114:	b348      	cbz	r0, 2c16a <nct_set_topic_prefix+0x62>
		len = end_of_stage - topic_prefix;
   2c116:	1b05      	subs	r5, r0, r4
		if (len >= sizeof(stage)) {
   2c118:	2d07      	cmp	r5, #7
   2c11a:	d906      	bls.n	2c12a <nct_set_topic_prefix+0x22>
			LOG_WRN("Truncating copy of stage string length "
   2c11c:	462a      	mov	r2, r5
   2c11e:	2308      	movs	r3, #8
   2c120:	2157      	movs	r1, #87	; 0x57
   2c122:	4812      	ldr	r0, [pc, #72]	; (2c16c <nct_set_topic_prefix+0x64>)
   2c124:	f010 fcec 	bl	3cb00 <z_log_minimal_printk>
			len = sizeof(stage) - 1;
   2c128:	2507      	movs	r5, #7
		memcpy(stage, topic_prefix, len);
   2c12a:	4f11      	ldr	r7, [pc, #68]	; (2c170 <nct_set_topic_prefix+0x68>)
   2c12c:	4621      	mov	r1, r4
   2c12e:	2308      	movs	r3, #8
   2c130:	462a      	mov	r2, r5
   2c132:	4638      	mov	r0, r7
   2c134:	f015 f96b 	bl	4140e <__memcpy_chk>
		stage[len] = '\0';
   2c138:	2300      	movs	r3, #0
		len = strlen(topic_prefix) - len - 2; /* skip both / */
   2c13a:	4620      	mov	r0, r4
		stage[len] = '\0';
   2c13c:	557b      	strb	r3, [r7, r5]
		len = strlen(topic_prefix) - len - 2; /* skip both / */
   2c13e:	f7f1 f880 	bl	1d242 <strlen>
   2c142:	1e84      	subs	r4, r0, #2
   2c144:	1b64      	subs	r4, r4, r5
		if (len >= sizeof(tenant)) {
   2c146:	2c3f      	cmp	r4, #63	; 0x3f
   2c148:	d906      	bls.n	2c158 <nct_set_topic_prefix+0x50>
			LOG_WRN("Truncating copy of tenant id string length "
   2c14a:	4622      	mov	r2, r4
   2c14c:	2340      	movs	r3, #64	; 0x40
   2c14e:	2157      	movs	r1, #87	; 0x57
   2c150:	4808      	ldr	r0, [pc, #32]	; (2c174 <nct_set_topic_prefix+0x6c>)
   2c152:	f010 fcd5 	bl	3cb00 <z_log_minimal_printk>
			len = sizeof(tenant) - 1;
   2c156:	243f      	movs	r4, #63	; 0x3f
		memcpy(tenant, end_of_stage + 1, len);
   2c158:	4d07      	ldr	r5, [pc, #28]	; (2c178 <nct_set_topic_prefix+0x70>)
   2c15a:	2340      	movs	r3, #64	; 0x40
   2c15c:	4622      	mov	r2, r4
   2c15e:	4628      	mov	r0, r5
   2c160:	1c71      	adds	r1, r6, #1
   2c162:	f015 f954 	bl	4140e <__memcpy_chk>
		tenant[len] = '\0';
   2c166:	2300      	movs	r3, #0
   2c168:	552b      	strb	r3, [r5, r4]
}
   2c16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c16c:	000485e7 	.word	0x000485e7
   2c170:	2001c90e 	.word	0x2001c90e
   2c174:	00048622 	.word	0x00048622
   2c178:	2001c916 	.word	0x2001c916

0002c17c <nct_save_session_state>:
{
   2c17c:	b507      	push	{r0, r1, r2, lr}
   2c17e:	9001      	str	r0, [sp, #4]
	persistent_session = (bool)session_valid;
   2c180:	3800      	subs	r0, #0
   2c182:	bf18      	it	ne
   2c184:	2001      	movne	r0, #1
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2c186:	2204      	movs	r2, #4
	persistent_session = (bool)session_valid;
   2c188:	4b04      	ldr	r3, [pc, #16]	; (2c19c <nct_save_session_state+0x20>)
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2c18a:	eb0d 0102 	add.w	r1, sp, r2
	persistent_session = (bool)session_valid;
   2c18e:	7018      	strb	r0, [r3, #0]
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2c190:	4803      	ldr	r0, [pc, #12]	; (2c1a0 <nct_save_session_state+0x24>)
   2c192:	f7f5 feb3 	bl	21efc <settings_save_one>
}
   2c196:	b003      	add	sp, #12
   2c198:	f85d fb04 	ldr.w	pc, [sp], #4
   2c19c:	2001c90d 	.word	0x2001c90d
   2c1a0:	00048661 	.word	0x00048661

0002c1a4 <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2c1a4:	2300      	movs	r3, #0
{
   2c1a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c1a8:	b08f      	sub	sp, #60	; 0x3c
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2c1aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2c1ae:	69cb      	ldr	r3, [r1, #28]
{
   2c1b0:	4606      	mov	r6, r0
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_NRF_CLOUD_FOTA)
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   2c1b2:	4608      	mov	r0, r1
{
   2c1b4:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2c1b6:	9301      	str	r3, [sp, #4]
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   2c1b8:	f003 fb38 	bl	2f82c <nrf_cloud_fota_mqtt_evt_handler>
	if (err == 0) {
   2c1bc:	1e02      	subs	r2, r0, #0
   2c1be:	d033      	beq.n	2c228 <nct_mqtt_evt_handler+0x84>
		return;
	} else if (err < 0) {
   2c1c0:	da04      	bge.n	2c1cc <nct_mqtt_evt_handler+0x28>
		LOG_ERR("nrf_cloud_fota_mqtt_evt_handler: Failed! %d", err);
   2c1c2:	2145      	movs	r1, #69	; 0x45
   2c1c4:	485a      	ldr	r0, [pc, #360]	; (2c330 <nct_mqtt_evt_handler+0x18c>)

	if (event_notify) {
		err = nct_input(&evt);

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
   2c1c6:	f010 fc9b 	bl	3cb00 <z_log_minimal_printk>
   2c1ca:	e02d      	b.n	2c228 <nct_mqtt_evt_handler+0x84>
	switch (_mqtt_evt->type) {
   2c1cc:	7823      	ldrb	r3, [r4, #0]
   2c1ce:	2b09      	cmp	r3, #9
   2c1d0:	d82a      	bhi.n	2c228 <nct_mqtt_evt_handler+0x84>
   2c1d2:	e8df f003 	tbb	[pc, r3]
   2c1d6:	9305      	.short	0x9305
   2c1d8:	29298a16 	.word	0x29298a16
   2c1dc:	91858029 	.word	0x91858029
		evt.param.flag = (p->session_present_flag != 0) &&
   2c1e0:	4b54      	ldr	r3, [pc, #336]	; (2c334 <nct_mqtt_evt_handler+0x190>)
   2c1e2:	7920      	ldrb	r0, [r4, #4]
   2c1e4:	781b      	ldrb	r3, [r3, #0]
   2c1e6:	2800      	cmp	r0, #0
   2c1e8:	bf14      	ite	ne
   2c1ea:	461a      	movne	r2, r3
   2c1ec:	2200      	moveq	r2, #0
   2c1ee:	f88d 2008 	strb.w	r2, [sp, #8]
		if (persistent_session && (p->session_present_flag == 0)) {
   2c1f2:	b113      	cbz	r3, 2c1fa <nct_mqtt_evt_handler+0x56>
   2c1f4:	b908      	cbnz	r0, 2c1fa <nct_mqtt_evt_handler+0x56>
			nct_save_session_state(0);
   2c1f6:	f7ff ffc1 	bl	2c17c <nct_save_session_state>
		evt.type = NCT_EVT_CONNECTED;
   2c1fa:	2300      	movs	r3, #0
		evt.type = NCT_EVT_DISCONNECTED;
   2c1fc:	f88d 300c 	strb.w	r3, [sp, #12]
	if (event_notify) {
   2c200:	e04b      	b.n	2c29a <nct_mqtt_evt_handler+0xf6>
		int err = publish_get_payload(mqtt_client,
   2c202:	6967      	ldr	r7, [r4, #20]
	if (length > (sizeof(nct.payload_buf) - 1)) {
   2c204:	f5b7 6f06 	cmp.w	r7, #2144	; 0x860
   2c208:	d910      	bls.n	2c22c <nct_mqtt_evt_handler+0x88>
		LOG_ERR("Length specified:%zd larger than payload_buf:%zd",
   2c20a:	463a      	mov	r2, r7
   2c20c:	f640 0361 	movw	r3, #2145	; 0x861
   2c210:	2145      	movs	r1, #69	; 0x45
   2c212:	4849      	ldr	r0, [pc, #292]	; (2c338 <nct_mqtt_evt_handler+0x194>)
   2c214:	f010 fc74 	bl	3cb00 <z_log_minimal_printk>
		return -EMSGSIZE;
   2c218:	f06f 0279 	mvn.w	r2, #121	; 0x79
			LOG_ERR("publish_get_payload: failed %d", err);
   2c21c:	2145      	movs	r1, #69	; 0x45
   2c21e:	4847      	ldr	r0, [pc, #284]	; (2c33c <nct_mqtt_evt_handler+0x198>)
   2c220:	f010 fc6e 	bl	3cb00 <z_log_minimal_printk>
			nrf_cloud_disconnect();
   2c224:	f7ff fa9c 	bl	2b760 <nrf_cloud_disconnect>
		}
	}
}
   2c228:	b00f      	add	sp, #60	; 0x3c
   2c22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int ret = mqtt_readall_publish_payload(client, nct.payload_buf, length);
   2c22c:	4d44      	ldr	r5, [pc, #272]	; (2c340 <nct_mqtt_evt_handler+0x19c>)
   2c22e:	463a      	mov	r2, r7
   2c230:	f205 21e6 	addw	r1, r5, #742	; 0x2e6
   2c234:	4630      	mov	r0, r6
   2c236:	f012 f97d 	bl	3e534 <mqtt_readall_publish_payload>
	nct.payload_buf[length] = 0;
   2c23a:	19ea      	adds	r2, r5, r7
   2c23c:	2500      	movs	r5, #0
   2c23e:	f882 52e6 	strb.w	r5, [r2, #742]	; 0x2e6
		if (err < 0) {
   2c242:	1e02      	subs	r2, r0, #0
   2c244:	dbea      	blt.n	2c21c <nct_mqtt_evt_handler+0x78>
   2c246:	4f3f      	ldr	r7, [pc, #252]	; (2c344 <nct_mqtt_evt_handler+0x1a0>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   2c248:	68a2      	ldr	r2, [r4, #8]
   2c24a:	687b      	ldr	r3, [r7, #4]
   2c24c:	6839      	ldr	r1, [r7, #0]
   2c24e:	429a      	cmp	r2, r3
   2c250:	bf28      	it	cs
   2c252:	461a      	movcs	r2, r3
   2c254:	6860      	ldr	r0, [r4, #4]
   2c256:	f015 fac0 	bl	417da <strncmp>
		if (strings_compare(
   2c25a:	bb38      	cbnz	r0, 2c2ac <nct_mqtt_evt_handler+0x108>
			*opcode = nct_cc_rx_opcode_map[index];
   2c25c:	4b3a      	ldr	r3, [pc, #232]	; (2c348 <nct_mqtt_evt_handler+0x1a4>)
   2c25e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   2c262:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			cc.message_id = p->message_id;
   2c266:	8b23      	ldrh	r3, [r4, #24]
   2c268:	f8ad 3020 	strh.w	r3, [sp, #32]
			cc.data.ptr = nct.payload_buf;
   2c26c:	4b37      	ldr	r3, [pc, #220]	; (2c34c <nct_mqtt_evt_handler+0x1a8>)
   2c26e:	9305      	str	r3, [sp, #20]
			cc.data.len = p->message.payload.len;
   2c270:	6963      	ldr	r3, [r4, #20]
   2c272:	9304      	str	r3, [sp, #16]
			cc.topic.len = p->message.topic.topic.size;
   2c274:	68a3      	ldr	r3, [r4, #8]
   2c276:	9306      	str	r3, [sp, #24]
			cc.topic.ptr = p->message.topic.topic.utf8;
   2c278:	6863      	ldr	r3, [r4, #4]
   2c27a:	9307      	str	r3, [sp, #28]
			evt.type = NCT_EVT_CC_RX_DATA;
   2c27c:	2303      	movs	r3, #3
   2c27e:	f88d 300c 	strb.w	r3, [sp, #12]
			evt.param.cc = &cc;
   2c282:	ab04      	add	r3, sp, #16
			evt.param.dc = &dc;
   2c284:	9302      	str	r3, [sp, #8]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2c286:	7b23      	ldrb	r3, [r4, #12]
   2c288:	2b01      	cmp	r3, #1
   2c28a:	d106      	bne.n	2c29a <nct_mqtt_evt_handler+0xf6>
			const struct mqtt_puback_param ack = {
   2c28c:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2c28e:	4669      	mov	r1, sp
   2c290:	4630      	mov	r0, r6
			const struct mqtt_puback_param ack = {
   2c292:	f8ad 3000 	strh.w	r3, [sp]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2c296:	f012 f827 	bl	3e2e8 <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   2c29a:	a801      	add	r0, sp, #4
   2c29c:	f7ff fba6 	bl	2b9ec <nct_input>
		if (err != 0) {
   2c2a0:	4602      	mov	r2, r0
   2c2a2:	2800      	cmp	r0, #0
   2c2a4:	d0c0      	beq.n	2c228 <nct_mqtt_evt_handler+0x84>
			LOG_ERR("nct_input: failed %d", err);
   2c2a6:	2145      	movs	r1, #69	; 0x45
   2c2a8:	4829      	ldr	r0, [pc, #164]	; (2c350 <nct_mqtt_evt_handler+0x1ac>)
   2c2aa:	e78c      	b.n	2c1c6 <nct_mqtt_evt_handler+0x22>
	for (uint32_t index = 0; index < list_size; index++) {
   2c2ac:	3501      	adds	r5, #1
   2c2ae:	2d03      	cmp	r5, #3
   2c2b0:	f107 070c 	add.w	r7, r7, #12
   2c2b4:	d1c8      	bne.n	2c248 <nct_mqtt_evt_handler+0xa4>
			dc.message_id = p->message_id;
   2c2b6:	8b23      	ldrh	r3, [r4, #24]
   2c2b8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			dc.data.ptr = nct.payload_buf;
   2c2bc:	4b23      	ldr	r3, [pc, #140]	; (2c34c <nct_mqtt_evt_handler+0x1a8>)
   2c2be:	930a      	str	r3, [sp, #40]	; 0x28
			dc.data.len = p->message.payload.len;
   2c2c0:	6963      	ldr	r3, [r4, #20]
   2c2c2:	9309      	str	r3, [sp, #36]	; 0x24
			dc.topic.len = p->message.topic.topic.size;
   2c2c4:	68a3      	ldr	r3, [r4, #8]
   2c2c6:	930b      	str	r3, [sp, #44]	; 0x2c
			dc.topic.ptr = p->message.topic.topic.utf8;
   2c2c8:	6863      	ldr	r3, [r4, #4]
   2c2ca:	930c      	str	r3, [sp, #48]	; 0x30
			evt.type = NCT_EVT_DC_RX_DATA;
   2c2cc:	2306      	movs	r3, #6
   2c2ce:	f88d 300c 	strb.w	r3, [sp, #12]
			evt.param.dc = &dc;
   2c2d2:	ab09      	add	r3, sp, #36	; 0x24
   2c2d4:	e7d6      	b.n	2c284 <nct_mqtt_evt_handler+0xe0>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_CC_SUB) {
   2c2d6:	88a3      	ldrh	r3, [r4, #4]
   2c2d8:	2b64      	cmp	r3, #100	; 0x64
   2c2da:	d111      	bne.n	2c300 <nct_mqtt_evt_handler+0x15c>
			evt.type = NCT_EVT_CC_CONNECTED;
   2c2dc:	2301      	movs	r3, #1
   2c2de:	e78d      	b.n	2c1fc <nct_mqtt_evt_handler+0x58>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_CC_UNSUB) {
   2c2e0:	88a3      	ldrh	r3, [r4, #4]
   2c2e2:	2b96      	cmp	r3, #150	; 0x96
   2c2e4:	d1a0      	bne.n	2c228 <nct_mqtt_evt_handler+0x84>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   2c2e6:	2308      	movs	r3, #8
   2c2e8:	e788      	b.n	2c1fc <nct_mqtt_evt_handler+0x58>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   2c2ea:	2304      	movs	r3, #4
   2c2ec:	f88d 300c 	strb.w	r3, [sp, #12]
		evt.param.message_id = _mqtt_evt->param.puback.message_id;
   2c2f0:	88a3      	ldrh	r3, [r4, #4]
   2c2f2:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (event_notify) {
   2c2f6:	e7d0      	b.n	2c29a <nct_mqtt_evt_handler+0xf6>
		evt.type = NCT_EVT_PINGRESP;
   2c2f8:	2305      	movs	r3, #5
   2c2fa:	e77f      	b.n	2c1fc <nct_mqtt_evt_handler+0x58>
		evt.type = NCT_EVT_DISCONNECTED;
   2c2fc:	230a      	movs	r3, #10
   2c2fe:	e77d      	b.n	2c1fc <nct_mqtt_evt_handler+0x58>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_DC_SUB) {
   2c300:	2b65      	cmp	r3, #101	; 0x65
   2c302:	d191      	bne.n	2c228 <nct_mqtt_evt_handler+0x84>
			evt.type = NCT_EVT_DC_CONNECTED;
   2c304:	2302      	movs	r3, #2
			err = nct_save_session_state(1);
   2c306:	2001      	movs	r0, #1
			evt.type = NCT_EVT_DC_CONNECTED;
   2c308:	f88d 300c 	strb.w	r3, [sp, #12]
			err = nct_save_session_state(1);
   2c30c:	f7ff ff36 	bl	2c17c <nct_save_session_state>
			if (err) {
   2c310:	4602      	mov	r2, r0
   2c312:	b118      	cbz	r0, 2c31c <nct_mqtt_evt_handler+0x178>
				LOG_ERR("Failed to save session state: %d",
   2c314:	2145      	movs	r1, #69	; 0x45
   2c316:	480f      	ldr	r0, [pc, #60]	; (2c354 <nct_mqtt_evt_handler+0x1b0>)
   2c318:	f010 fbf2 	bl	3cb00 <z_log_minimal_printk>
			err = nrf_cloud_fota_subscribe();
   2c31c:	f003 fa0c 	bl	2f738 <nrf_cloud_fota_subscribe>
			if (err) {
   2c320:	4602      	mov	r2, r0
   2c322:	2800      	cmp	r0, #0
   2c324:	d0b9      	beq.n	2c29a <nct_mqtt_evt_handler+0xf6>
				LOG_ERR("FOTA MQTT subscribe failed: %d", err);
   2c326:	2145      	movs	r1, #69	; 0x45
   2c328:	480b      	ldr	r0, [pc, #44]	; (2c358 <nct_mqtt_evt_handler+0x1b4>)
   2c32a:	f010 fbe9 	bl	3cb00 <z_log_minimal_printk>
	if (event_notify) {
   2c32e:	e7b4      	b.n	2c29a <nct_mqtt_evt_handler+0xf6>
   2c330:	00048672 	.word	0x00048672
   2c334:	2001c90d 	.word	0x2001c90d
   2c338:	000486a3 	.word	0x000486a3
   2c33c:	000486d9 	.word	0x000486d9
   2c340:	20019570 	.word	0x20019570
   2c344:	2001a0b8 	.word	0x2001a0b8
   2c348:	000430c0 	.word	0x000430c0
   2c34c:	20019856 	.word	0x20019856
   2c350:	00048747 	.word	0x00048747
   2c354:	000486fd 	.word	0x000486fd
   2c358:	00048723 	.word	0x00048723

0002c35c <nct_mqtt_connect>:
{
   2c35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!mqtt_client_initialized) {
   2c35e:	4e22      	ldr	r6, [pc, #136]	; (2c3e8 <nct_mqtt_connect+0x8c>)
   2c360:	7835      	ldrb	r5, [r6, #0]
   2c362:	2d00      	cmp	r5, #0
   2c364:	d13b      	bne.n	2c3de <nct_mqtt_connect+0x82>
		mqtt_client_init(&nct.client);
   2c366:	4c21      	ldr	r4, [pc, #132]	; (2c3ec <nct_mqtt_connect+0x90>)
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2c368:	2701      	movs	r7, #1
		mqtt_client_init(&nct.client);
   2c36a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   2c36e:	f011 ff1e 	bl	3e1ae <mqtt_client_init>
		nct.client.broker = (struct sockaddr *)&nct.broker;
   2c372:	f104 03ac 	add.w	r3, r4, #172	; 0xac
   2c376:	67e3      	str	r3, [r4, #124]	; 0x7c
		nct.client.evt_cb = nct_mqtt_evt_handler;
   2c378:	4b1d      	ldr	r3, [pc, #116]	; (2c3f0 <nct_mqtt_connect+0x94>)
   2c37a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   2c37e:	4b1d      	ldr	r3, [pc, #116]	; (2c3f4 <nct_mqtt_connect+0x98>)
   2c380:	6818      	ldr	r0, [r3, #0]
   2c382:	6760      	str	r0, [r4, #116]	; 0x74
		nct.client.client_id.size = strlen(client_id_buf);
   2c384:	f7f0 ff5d 	bl	1d242 <strlen>
		nct.client.protocol_version = MQTT_VERSION_3_1_1;
   2c388:	2304      	movs	r3, #4
   2c38a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
		nct.client.keepalive = CONFIG_NRF_CLOUD_MQTT_KEEPALIVE;
   2c38e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   2c392:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2c396:	4b18      	ldr	r3, [pc, #96]	; (2c3f8 <nct_mqtt_connect+0x9c>)
   2c398:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
   2c39c:	781b      	ldrb	r3, [r3, #0]
		nct.client.user_name = NULL;
   2c39e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2c3a2:	f083 0301 	eor.w	r3, r3, #1
   2c3a6:	f363 0241 	bfi	r2, r3, #1, #1
		nct.client.rx_buf = nct.rx_buf;
   2c3aa:	f104 03e6 	add.w	r3, r4, #230	; 0xe6
   2c3ae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2c3b2:	f44f 7380 	mov.w	r3, #256	; 0x100
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2c3b6:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
   2c3ba:	f104 0550 	add.w	r5, r4, #80	; 0x50
		nct.client.tx_buf = nct.tx_buf;
   2c3be:	f504 72f3 	add.w	r2, r4, #486	; 0x1e6
		nct.client.client_id.size = strlen(client_id_buf);
   2c3c2:	67a0      	str	r0, [r4, #120]	; 0x78
		nct.client.tx_buf_size = sizeof(nct.tx_buf);
   2c3c4:	e9c4 2327 	strd	r2, r3, [r4, #156]	; 0x9c
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2c3c8:	f884 7048 	strb.w	r7, [r4, #72]	; 0x48
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2c3cc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		memcpy(tls_config, &nct.tls_config,
   2c3d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2c3d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2c3d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2c3d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2c3d8:	6823      	ldr	r3, [r4, #0]
		mqtt_client_initialized = true;
   2c3da:	7037      	strb	r7, [r6, #0]
   2c3dc:	602b      	str	r3, [r5, #0]
	err = mqtt_connect(&nct.client);
   2c3de:	4807      	ldr	r0, [pc, #28]	; (2c3fc <nct_mqtt_connect+0xa0>)
}
   2c3e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	err = mqtt_connect(&nct.client);
   2c3e4:	f011 befa 	b.w	3e1dc <mqtt_connect>
   2c3e8:	2001c90c 	.word	0x2001c90c
   2c3ec:	20019570 	.word	0x20019570
   2c3f0:	0002c1a5 	.word	0x0002c1a5
   2c3f4:	2001956c 	.word	0x2001956c
   2c3f8:	2001c90d 	.word	0x2001c90d
   2c3fc:	20019594 	.word	0x20019594

0002c400 <nct_init>:

int nct_init(const char * const client_id)
{
   2c400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c404:	4605      	mov	r5, r0
	ret = settings_subsys_init();
   2c406:	f7f5 fec5 	bl	22194 <settings_subsys_init>
	if (ret) {
   2c40a:	4604      	mov	r4, r0
   2c40c:	b138      	cbz	r0, 2c41e <nct_init+0x1e>
		LOG_ERR("Settings init failed: %d", ret);
   2c40e:	2145      	movs	r1, #69	; 0x45
   2c410:	4602      	mov	r2, r0
   2c412:	485c      	ldr	r0, [pc, #368]	; (2c584 <nct_init+0x184>)
		LOG_ERR("Cannot load settings: %d", ret);
   2c414:	f010 fb74 	bl	3cb00 <z_log_minimal_printk>
	if (err) {
		return err;
	}

	return nct_provision();
}
   2c418:	4620      	mov	r0, r4
   2c41a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ret = settings_load_subtree(settings_handler_nrf_cloud.name);
   2c41e:	485a      	ldr	r0, [pc, #360]	; (2c588 <nct_init+0x188>)
   2c420:	f7f5 fda6 	bl	21f70 <settings_load_subtree>
	if (ret) {
   2c424:	4604      	mov	r4, r0
   2c426:	2800      	cmp	r0, #0
   2c428:	f000 808d 	beq.w	2c546 <nct_init+0x146>
		LOG_ERR("Cannot load settings: %d", ret);
   2c42c:	4602      	mov	r2, r0
   2c42e:	2145      	movs	r1, #69	; 0x45
   2c430:	4856      	ldr	r0, [pc, #344]	; (2c58c <nct_init+0x18c>)
   2c432:	e7ef      	b.n	2c414 <nct_init+0x14>
	if (client_id_buf) {
   2c434:	4d56      	ldr	r5, [pc, #344]	; (2c590 <nct_init+0x190>)
   2c436:	6828      	ldr	r0, [r5, #0]
   2c438:	b118      	cbz	r0, 2c442 <nct_init+0x42>
		nrf_cloud_free(client_id_buf);
   2c43a:	f014 ff4a 	bl	412d2 <k_free>
		client_id_buf = NULL;
   2c43e:	2300      	movs	r3, #0
   2c440:	602b      	str	r3, [r5, #0]
	++len;
   2c442:	3401      	adds	r4, #1
	client_id_buf = nrf_cloud_calloc(len, 1);
   2c444:	2101      	movs	r1, #1
   2c446:	4620      	mov	r0, r4
   2c448:	f014 ff4e 	bl	412e8 <k_calloc>
   2c44c:	6028      	str	r0, [r5, #0]
	if (!client_id_buf) {
   2c44e:	2800      	cmp	r0, #0
   2c450:	d076      	beq.n	2c540 <nct_init+0x140>
		ret = nrf_cloud_configured_client_id_get(client_id_buf, len);
   2c452:	4621      	mov	r1, r4
   2c454:	f7fe ffea 	bl	2b42c <nrf_cloud_configured_client_id_get>
		if (ret) {
   2c458:	4604      	mov	r4, r0
   2c45a:	b930      	cbnz	r0, 2c46a <nct_init+0x6a>
	dc_endpoint_reset();
   2c45c:	f7ff fd1e 	bl	2be9c <dc_endpoint_reset>
	if (!client_id_buf) {
   2c460:	682b      	ldr	r3, [r5, #0]
   2c462:	b933      	cbnz	r3, 2c472 <nct_init+0x72>
		return -ENODEV;
   2c464:	f06f 0412 	mvn.w	r4, #18
   2c468:	e7d6      	b.n	2c418 <nct_init+0x18>
			LOG_ERR("Could not obtain configured client ID, error: %d", ret);
   2c46a:	4602      	mov	r2, r0
   2c46c:	2145      	movs	r1, #69	; 0x45
   2c46e:	4849      	ldr	r0, [pc, #292]	; (2c594 <nct_init+0x194>)
   2c470:	e7d0      	b.n	2c414 <nct_init+0x14>
	ret = allocate_and_format_topic(&accepted_topic, NCT_ACCEPTED_TOPIC);
   2c472:	f8df b164 	ldr.w	fp, [pc, #356]	; 2c5d8 <nct_init+0x1d8>
	nct_reset_topics();
   2c476:	f7ff fdbf 	bl	2bff8 <nct_reset_topics>
	ret = allocate_and_format_topic(&accepted_topic, NCT_ACCEPTED_TOPIC);
   2c47a:	4658      	mov	r0, fp
   2c47c:	4946      	ldr	r1, [pc, #280]	; (2c598 <nct_init+0x198>)
   2c47e:	f7ff fd91 	bl	2bfa4 <allocate_and_format_topic>
	if (ret) {
   2c482:	4604      	mov	r4, r0
   2c484:	2800      	cmp	r0, #0
   2c486:	d153      	bne.n	2c530 <nct_init+0x130>
	ret = allocate_and_format_topic(&rejected_topic, NCT_REJECTED_TOPIC);
   2c488:	f8df a150 	ldr.w	sl, [pc, #336]	; 2c5dc <nct_init+0x1dc>
   2c48c:	4943      	ldr	r1, [pc, #268]	; (2c59c <nct_init+0x19c>)
   2c48e:	4650      	mov	r0, sl
   2c490:	f7ff fd88 	bl	2bfa4 <allocate_and_format_topic>
	if (ret) {
   2c494:	4604      	mov	r4, r0
   2c496:	2800      	cmp	r0, #0
   2c498:	d14a      	bne.n	2c530 <nct_init+0x130>
	ret = allocate_and_format_topic(&update_delta_topic, NCT_UPDATE_DELTA_TOPIC);
   2c49a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 2c5e0 <nct_init+0x1e0>
   2c49e:	4940      	ldr	r1, [pc, #256]	; (2c5a0 <nct_init+0x1a0>)
   2c4a0:	4648      	mov	r0, r9
   2c4a2:	f7ff fd7f 	bl	2bfa4 <allocate_and_format_topic>
	if (ret) {
   2c4a6:	4604      	mov	r4, r0
   2c4a8:	2800      	cmp	r0, #0
   2c4aa:	d141      	bne.n	2c530 <nct_init+0x130>
	ret = allocate_and_format_topic(&update_topic, NCT_UPDATE_TOPIC);
   2c4ac:	4f3d      	ldr	r7, [pc, #244]	; (2c5a4 <nct_init+0x1a4>)
   2c4ae:	493e      	ldr	r1, [pc, #248]	; (2c5a8 <nct_init+0x1a8>)
   2c4b0:	4638      	mov	r0, r7
   2c4b2:	f7ff fd77 	bl	2bfa4 <allocate_and_format_topic>
	if (ret) {
   2c4b6:	4604      	mov	r4, r0
   2c4b8:	2800      	cmp	r0, #0
   2c4ba:	d139      	bne.n	2c530 <nct_init+0x130>
	ret = allocate_and_format_topic(&shadow_get_topic, NCT_SHADOW_GET);
   2c4bc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 2c5e4 <nct_init+0x1e4>
   2c4c0:	493a      	ldr	r1, [pc, #232]	; (2c5ac <nct_init+0x1ac>)
   2c4c2:	4640      	mov	r0, r8
   2c4c4:	f7ff fd6e 	bl	2bfa4 <allocate_and_format_topic>
	if (ret) {
   2c4c8:	4604      	mov	r4, r0
   2c4ca:	2800      	cmp	r0, #0
   2c4cc:	d130      	bne.n	2c530 <nct_init+0x130>
	nct_cc_rx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c4ce:	2601      	movs	r6, #1
   2c4d0:	4d37      	ldr	r5, [pc, #220]	; (2c5b0 <nct_init+0x1b0>)
	nct_cc_rx_list[0].topic.utf8 = accepted_topic;
   2c4d2:	f8db 0000 	ldr.w	r0, [fp]
	nct_cc_rx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c4d6:	722e      	strb	r6, [r5, #8]
	nct_cc_rx_list[0].topic.utf8 = accepted_topic;
   2c4d8:	6028      	str	r0, [r5, #0]
	nct_cc_rx_list[0].topic.size = strlen(accepted_topic);
   2c4da:	f7f0 feb2 	bl	1d242 <strlen>
   2c4de:	6068      	str	r0, [r5, #4]
	nct_cc_rx_list[1].topic.utf8 = rejected_topic;
   2c4e0:	f8da 0000 	ldr.w	r0, [sl]
	nct_cc_rx_list[1].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c4e4:	752e      	strb	r6, [r5, #20]
	nct_cc_rx_list[1].topic.utf8 = rejected_topic;
   2c4e6:	60e8      	str	r0, [r5, #12]
	nct_cc_rx_list[1].topic.size = strlen(rejected_topic);
   2c4e8:	f7f0 feab 	bl	1d242 <strlen>
   2c4ec:	6128      	str	r0, [r5, #16]
	nct_cc_rx_list[2].topic.utf8 = update_delta_topic;
   2c4ee:	f8d9 0000 	ldr.w	r0, [r9]
	nct_cc_rx_list[2].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c4f2:	f885 6020 	strb.w	r6, [r5, #32]
	nct_cc_rx_list[2].topic.utf8 = update_delta_topic;
   2c4f6:	61a8      	str	r0, [r5, #24]
	nct_cc_rx_list[2].topic.size = strlen(update_delta_topic);
   2c4f8:	f7f0 fea3 	bl	1d242 <strlen>
   2c4fc:	61e8      	str	r0, [r5, #28]
	nct_cc_tx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c4fe:	4d2d      	ldr	r5, [pc, #180]	; (2c5b4 <nct_init+0x1b4>)
	nct_cc_tx_list[0].topic.utf8 = shadow_get_topic;
   2c500:	f8d8 0000 	ldr.w	r0, [r8]
	nct_cc_tx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c504:	722e      	strb	r6, [r5, #8]
	nct_cc_tx_list[0].topic.utf8 = shadow_get_topic;
   2c506:	6028      	str	r0, [r5, #0]
	nct_cc_tx_list[0].topic.size = strlen(shadow_get_topic);
   2c508:	f7f0 fe9b 	bl	1d242 <strlen>
   2c50c:	6068      	str	r0, [r5, #4]
	nct_cc_tx_list[1].topic.utf8 = update_topic;
   2c50e:	6838      	ldr	r0, [r7, #0]
	nct_cc_tx_list[1].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c510:	752e      	strb	r6, [r5, #20]
	nct_cc_tx_list[1].topic.utf8 = update_topic;
   2c512:	60e8      	str	r0, [r5, #12]
	nct_cc_tx_list[1].topic.size = strlen(update_topic);
   2c514:	f7f0 fe95 	bl	1d242 <strlen>
	nct.tls_config.peer_verify = 2;
   2c518:	2202      	movs	r2, #2
   2c51a:	4b27      	ldr	r3, [pc, #156]	; (2c5b8 <nct_init+0x1b8>)
	nct_cc_tx_list[1].topic.size = strlen(update_topic);
   2c51c:	6128      	str	r0, [r5, #16]
	nct.tls_config.cipher_count = 0;
   2c51e:	e9c3 2400 	strd	r2, r4, [r3]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2c522:	4a26      	ldr	r2, [pc, #152]	; (2c5bc <nct_init+0x1bc>)
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   2c524:	e9c3 4602 	strd	r4, r6, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2c528:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   2c52a:	4a25      	ldr	r2, [pc, #148]	; (2c5c0 <nct_init+0x1c0>)
   2c52c:	619a      	str	r2, [r3, #24]
	return nct_provision();
   2c52e:	e773      	b.n	2c418 <nct_init+0x18>
	LOG_ERR("Failed to format MQTT topics, err: %d", ret);
   2c530:	4622      	mov	r2, r4
   2c532:	2145      	movs	r1, #69	; 0x45
   2c534:	4823      	ldr	r0, [pc, #140]	; (2c5c4 <nct_init+0x1c4>)
   2c536:	f010 fae3 	bl	3cb00 <z_log_minimal_printk>
	nct_reset_topics();
   2c53a:	f7ff fd5d 	bl	2bff8 <nct_reset_topics>
	if (err) {
   2c53e:	e76b      	b.n	2c418 <nct_init+0x18>
		return -ENOMEM;
   2c540:	f06f 040b 	mvn.w	r4, #11
   2c544:	e768      	b.n	2c418 <nct_init+0x18>
	err = nrf_cloud_fota_init(nrf_cloud_fota_cb_handler);
   2c546:	4820      	ldr	r0, [pc, #128]	; (2c5c8 <nct_init+0x1c8>)
   2c548:	f003 f828 	bl	2f59c <nrf_cloud_fota_init>
	if (err < 0) {
   2c54c:	1e04      	subs	r4, r0, #0
   2c54e:	f6ff af63 	blt.w	2c418 <nct_init+0x18>
	} else if (err && persistent_session) {
   2c552:	d005      	beq.n	2c560 <nct_init+0x160>
   2c554:	4b1d      	ldr	r3, [pc, #116]	; (2c5cc <nct_init+0x1cc>)
   2c556:	781b      	ldrb	r3, [r3, #0]
   2c558:	b113      	cbz	r3, 2c560 <nct_init+0x160>
		nct_save_session_state(0);
   2c55a:	2000      	movs	r0, #0
   2c55c:	f7ff fe0e 	bl	2c17c <nct_save_session_state>
		if (client_id) {
   2c560:	b11d      	cbz	r5, 2c56a <nct_init+0x16a>
			LOG_WRN("Not configured to for runtime client ID, ignoring");
   2c562:	2157      	movs	r1, #87	; 0x57
   2c564:	481a      	ldr	r0, [pc, #104]	; (2c5d0 <nct_init+0x1d0>)
   2c566:	f010 facb 	bl	3cb00 <z_log_minimal_printk>
		len = nrf_cloud_configured_client_id_length_get();
   2c56a:	f013 f8ad 	bl	3f6c8 <nrf_cloud_configured_client_id_length_get>
	if (!len) {
   2c56e:	4604      	mov	r4, r0
   2c570:	2800      	cmp	r0, #0
   2c572:	f47f af5f 	bne.w	2c434 <nct_init+0x34>
		LOG_WRN("Could not determine size of client ID");
   2c576:	2157      	movs	r1, #87	; 0x57
   2c578:	4816      	ldr	r0, [pc, #88]	; (2c5d4 <nct_init+0x1d4>)
   2c57a:	f010 fac1 	bl	3cb00 <z_log_minimal_printk>
		return -ENOMSG;
   2c57e:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2c582:	e749      	b.n	2c418 <nct_init+0x18>
   2c584:	00048761 	.word	0x00048761
   2c588:	00046cf0 	.word	0x00046cf0
   2c58c:	0004877f 	.word	0x0004877f
   2c590:	2001956c 	.word	0x2001956c
   2c594:	000487ff 	.word	0x000487ff
   2c598:	00048835 	.word	0x00048835
   2c59c:	0004884c 	.word	0x0004884c
   2c5a0:	0004886f 	.word	0x0004886f
   2c5a4:	2001a100 	.word	0x2001a100
   2c5a8:	00048892 	.word	0x00048892
   2c5ac:	000488af 	.word	0x000488af
   2c5b0:	2001a0b8 	.word	0x2001a0b8
   2c5b4:	2001a0dc 	.word	0x2001a0dc
   2c5b8:	20019570 	.word	0x20019570
   2c5bc:	200146b0 	.word	0x200146b0
   2c5c0:	000488c9 	.word	0x000488c9
   2c5c4:	000488db 	.word	0x000488db
   2c5c8:	0002bf3d 	.word	0x0002bf3d
   2c5cc:	2001c90d 	.word	0x2001c90d
   2c5d0:	0004879d 	.word	0x0004879d
   2c5d4:	000487d4 	.word	0x000487d4
   2c5d8:	20019568 	.word	0x20019568
   2c5dc:	2001a0f4 	.word	0x2001a0f4
   2c5e0:	2001a0fc 	.word	0x2001a0fc
   2c5e4:	2001a0f8 	.word	0x2001a0f8

0002c5e8 <nct_uninit>:

void nct_uninit(void)
{
   2c5e8:	b510      	push	{r4, lr}
	LOG_DBG("Uninitializing nRF Cloud transport");
	dc_endpoint_free();
	nct_reset_topics();

	if (client_id_buf) {
   2c5ea:	4c0a      	ldr	r4, [pc, #40]	; (2c614 <nct_uninit+0x2c>)
	dc_endpoint_free();
   2c5ec:	f7ff fd42 	bl	2c074 <dc_endpoint_free>
	nct_reset_topics();
   2c5f0:	f7ff fd02 	bl	2bff8 <nct_reset_topics>
	if (client_id_buf) {
   2c5f4:	6820      	ldr	r0, [r4, #0]
   2c5f6:	b118      	cbz	r0, 2c600 <nct_uninit+0x18>
		nrf_cloud_free(client_id_buf);
   2c5f8:	f014 fe6b 	bl	412d2 <k_free>
		client_id_buf = NULL;
   2c5fc:	2300      	movs	r3, #0
   2c5fe:	6023      	str	r3, [r4, #0]
	}

	memset(&nct, 0, sizeof(nct));
   2c600:	f640 3248 	movw	r2, #2888	; 0xb48
   2c604:	2100      	movs	r1, #0
   2c606:	4804      	ldr	r0, [pc, #16]	; (2c618 <nct_uninit+0x30>)
   2c608:	f014 ff14 	bl	41434 <memset>
	mqtt_client_initialized = false;
   2c60c:	2200      	movs	r2, #0
   2c60e:	4b03      	ldr	r3, [pc, #12]	; (2c61c <nct_uninit+0x34>)
   2c610:	701a      	strb	r2, [r3, #0]
}
   2c612:	bd10      	pop	{r4, pc}
   2c614:	2001956c 	.word	0x2001956c
   2c618:	20019570 	.word	0x20019570
   2c61c:	2001c90c 	.word	0x2001c90c

0002c620 <nct_connect>:

	return err;
}
#else
int nct_connect(void)
{
   2c620:	b510      	push	{r4, lr}
   2c622:	b09a      	sub	sp, #104	; 0x68
	int err;
	struct addrinfo *result;
	struct addrinfo *addr;
	struct addrinfo hints = {
   2c624:	2250      	movs	r2, #80	; 0x50
   2c626:	2100      	movs	r1, #0
   2c628:	a806      	add	r0, sp, #24
   2c62a:	f014 ff03 	bl	41434 <memset>
   2c62e:	2301      	movs	r3, #1
	return zsock_getaddrinfo(host, service, hints, res);
   2c630:	2100      	movs	r1, #0
   2c632:	e9cd 3308 	strd	r3, r3, [sp, #32]
   2c636:	4815      	ldr	r0, [pc, #84]	; (2c68c <nct_connect+0x6c>)
   2c638:	ab01      	add	r3, sp, #4
   2c63a:	aa06      	add	r2, sp, #24
   2c63c:	f010 fd92 	bl	3d164 <zsock_getaddrinfo>
		.ai_family = NRF_CLOUD_AF_FAMILY,
		.ai_socktype = SOCK_STREAM
	};

	err = getaddrinfo(NRF_CLOUD_HOSTNAME, NULL, &hints, &result);
	if (err) {
   2c640:	bb00      	cbnz	r0, 2c684 <nct_connect+0x64>
		LOG_DBG("getaddrinfo failed %d", err);
		return -ECHILD;
	}

	addr = result;
   2c642:	9b01      	ldr	r3, [sp, #4]
	err = -ECHILD;

	/* Look for address of the broker. */
	while (addr != NULL) {
   2c644:	b913      	cbnz	r3, 2c64c <nct_connect+0x2c>
	err = -ECHILD;
   2c646:	f06f 0409 	mvn.w	r4, #9
   2c64a:	e013      	b.n	2c674 <nct_connect+0x54>
		/* IPv4 Address. */
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   2c64c:	695a      	ldr	r2, [r3, #20]
   2c64e:	2a08      	cmp	r2, #8
   2c650:	d116      	bne.n	2c680 <nct_connect+0x60>
			struct sockaddr_in *broker =
				((struct sockaddr_in *)&nct.broker);

			broker->sin_addr.s_addr =
				((struct sockaddr_in *)addr->ai_addr)
					->sin_addr.s_addr;
   2c652:	699b      	ldr	r3, [r3, #24]
			broker->sin_addr.s_addr =
   2c654:	490e      	ldr	r1, [pc, #56]	; (2c690 <nct_connect+0x70>)
					->sin_addr.s_addr;
   2c656:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   2c658:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
			broker->sin_family = AF_INET;
   2c65c:	4b0d      	ldr	r3, [pc, #52]	; (2c694 <nct_connect+0x74>)
   2c65e:	f8c1 30ac 	str.w	r3, [r1, #172]	; 0xac
		union { uintptr_t x; size_t val; } parm3 = { .val = size };
		return (char *) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   2c662:	2310      	movs	r3, #16
   2c664:	aa02      	add	r2, sp, #8
   2c666:	31b0      	adds	r1, #176	; 0xb0
   2c668:	2001      	movs	r0, #1
   2c66a:	f7f7 fafd 	bl	23c68 <z_impl_net_addr_ntop>
				 addr_str,
				 sizeof(addr_str));

			LOG_DBG("IPv4 address: %s", log_strdup(addr_str));

			err = nct_mqtt_connect();
   2c66e:	f7ff fe75 	bl	2c35c <nct_mqtt_connect>
   2c672:	4604      	mov	r4, r0
	zsock_freeaddrinfo(ai);
   2c674:	9801      	ldr	r0, [sp, #4]
   2c676:	f010 fd77 	bl	3d168 <zsock_freeaddrinfo>

	/* Free the address. */
	freeaddrinfo(result);

	return err;
}
   2c67a:	4620      	mov	r0, r4
   2c67c:	b01a      	add	sp, #104	; 0x68
   2c67e:	bd10      	pop	{r4, pc}
		addr = addr->ai_next;
   2c680:	681b      	ldr	r3, [r3, #0]
   2c682:	e7df      	b.n	2c644 <nct_connect+0x24>
		return -ECHILD;
   2c684:	f06f 0409 	mvn.w	r4, #9
   2c688:	e7f7      	b.n	2c67a <nct_connect+0x5a>
   2c68a:	bf00      	nop
   2c68c:	000488c9 	.word	0x000488c9
   2c690:	20019570 	.word	0x20019570
   2c694:	b3220001 	.word	0xb3220001

0002c698 <nct_cc_connect>:
#endif /* defined(CONFIG_NRF_CLOUD_STATIC_IPV4) */

int nct_cc_connect(void)
{
   2c698:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");

	const struct mqtt_subscription_list subscription_list = {
   2c69a:	466b      	mov	r3, sp
   2c69c:	4a05      	ldr	r2, [pc, #20]	; (2c6b4 <nct_cc_connect+0x1c>)
   2c69e:	e892 0003 	ldmia.w	r2, {r0, r1}
   2c6a2:	e883 0003 	stmia.w	r3, {r0, r1}
		.list = (struct mqtt_topic *)&nct_cc_rx_list,
		.list_count = ARRAY_SIZE(nct_cc_rx_list),
		.message_id = NCT_MSG_ID_CC_SUB
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2c6a6:	4619      	mov	r1, r3
   2c6a8:	4803      	ldr	r0, [pc, #12]	; (2c6b8 <nct_cc_connect+0x20>)
   2c6aa:	f011 fe6b 	bl	3e384 <mqtt_subscribe>
}
   2c6ae:	b003      	add	sp, #12
   2c6b0:	f85d fb04 	ldr.w	pc, [sp], #4
   2c6b4:	0004280c 	.word	0x0004280c
   2c6b8:	20019594 	.word	0x20019594

0002c6bc <nct_cc_send>:

int nct_cc_send(const struct nct_cc_data *cc_data)
{
   2c6bc:	b530      	push	{r4, r5, lr}
	if (cc_data == NULL) {
   2c6be:	4604      	mov	r4, r0
{
   2c6c0:	b087      	sub	sp, #28
	if (cc_data == NULL) {
   2c6c2:	b940      	cbnz	r0, 2c6d6 <nct_cc_send+0x1a>
		LOG_ERR("cc_data == NULL");
   2c6c4:	2145      	movs	r1, #69	; 0x45
   2c6c6:	481d      	ldr	r0, [pc, #116]	; (2c73c <nct_cc_send+0x80>)
   2c6c8:	f010 fa1a 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   2c6cc:	f06f 0415 	mvn.w	r4, #21
	if (err) {
		LOG_ERR("mqtt_publish failed %d", err);
	}

	return err;
}
   2c6d0:	4620      	mov	r0, r4
   2c6d2:	b007      	add	sp, #28
   2c6d4:	bd30      	pop	{r4, r5, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   2c6d6:	7c85      	ldrb	r5, [r0, #18]
   2c6d8:	2d01      	cmp	r5, #1
   2c6da:	d907      	bls.n	2c6ec <nct_cc_send+0x30>
		LOG_ERR("opcode = %d", cc_data->opcode);
   2c6dc:	462a      	mov	r2, r5
   2c6de:	2145      	movs	r1, #69	; 0x45
   2c6e0:	4817      	ldr	r0, [pc, #92]	; (2c740 <nct_cc_send+0x84>)
   2c6e2:	f010 fa0d 	bl	3cb00 <z_log_minimal_printk>
		return -ENOTSUP;
   2c6e6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2c6ea:	e7f1      	b.n	2c6d0 <nct_cc_send+0x14>
	struct mqtt_publish_param publish = {
   2c6ec:	2210      	movs	r2, #16
   2c6ee:	2100      	movs	r1, #0
   2c6f0:	a802      	add	r0, sp, #8
   2c6f2:	f014 fe9f 	bl	41434 <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   2c6f6:	230c      	movs	r3, #12
   2c6f8:	435d      	muls	r5, r3
   2c6fa:	4a12      	ldr	r2, [pc, #72]	; (2c744 <nct_cc_send+0x88>)
   2c6fc:	1953      	adds	r3, r2, r5
	struct mqtt_publish_param publish = {
   2c6fe:	5952      	ldr	r2, [r2, r5]
   2c700:	9200      	str	r2, [sp, #0]
   2c702:	685a      	ldr	r2, [r3, #4]
   2c704:	7a1b      	ldrb	r3, [r3, #8]
   2c706:	9201      	str	r2, [sp, #4]
   2c708:	f88d 3008 	strb.w	r3, [sp, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2c70c:	6823      	ldr	r3, [r4, #0]
   2c70e:	b11b      	cbz	r3, 2c718 <nct_cc_send+0x5c>
   2c710:	6862      	ldr	r2, [r4, #4]
   2c712:	b10a      	cbz	r2, 2c718 <nct_cc_send+0x5c>
		publish.message.payload.len = cc_data->data.len;
   2c714:	e9cd 2303 	strd	r2, r3, [sp, #12]
	publish.message_id = get_message_id(cc_data->message_id);
   2c718:	8a20      	ldrh	r0, [r4, #16]
   2c71a:	f7ff fbcd 	bl	2beb8 <get_message_id>
	int err = mqtt_publish(&nct.client, &publish);
   2c71e:	4669      	mov	r1, sp
	publish.message_id = get_message_id(cc_data->message_id);
   2c720:	f8ad 0014 	strh.w	r0, [sp, #20]
	int err = mqtt_publish(&nct.client, &publish);
   2c724:	4808      	ldr	r0, [pc, #32]	; (2c748 <nct_cc_send+0x8c>)
   2c726:	f011 fd9b 	bl	3e260 <mqtt_publish>
	if (err) {
   2c72a:	4604      	mov	r4, r0
   2c72c:	2800      	cmp	r0, #0
   2c72e:	d0cf      	beq.n	2c6d0 <nct_cc_send+0x14>
		LOG_ERR("mqtt_publish failed %d", err);
   2c730:	4602      	mov	r2, r0
   2c732:	2145      	movs	r1, #69	; 0x45
   2c734:	4805      	ldr	r0, [pc, #20]	; (2c74c <nct_cc_send+0x90>)
   2c736:	f010 f9e3 	bl	3cb00 <z_log_minimal_printk>
   2c73a:	e7c9      	b.n	2c6d0 <nct_cc_send+0x14>
   2c73c:	00048906 	.word	0x00048906
   2c740:	0004891b 	.word	0x0004891b
   2c744:	2001a0dc 	.word	0x2001a0dc
   2c748:	20019594 	.word	0x20019594
   2c74c:	0004892c 	.word	0x0004892c

0002c750 <nct_dc_endpoint_set>:

void nct_dc_endpoint_set(const struct nrf_cloud_data *tx_endp,
			 const struct nrf_cloud_data *rx_endp,
			 const struct nrf_cloud_data *bulk_endp,
			 const struct nrf_cloud_data *m_endp)
{
   2c750:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
   2c754:	4680      	mov	r8, r0
   2c756:	460f      	mov	r7, r1
   2c758:	4616      	mov	r6, r2
   2c75a:	461d      	mov	r5, r3
	LOG_DBG("nct_dc_endpoint_set");

	/* In case the endpoint was previous set, free and reset
	 * before copying new one.
	 */
	dc_endpoint_free();
   2c75c:	f7ff fc8a 	bl	2c074 <dc_endpoint_free>

	nct.dc_tx_endp.utf8 = (const uint8_t *)tx_endp->ptr;
   2c760:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2c764:	4814      	ldr	r0, [pc, #80]	; (2c7b8 <nct_dc_endpoint_set+0x68>)
   2c766:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	nct.dc_tx_endp.size = tx_endp->len;
   2c76a:	f8d8 3000 	ldr.w	r3, [r8]
   2c76e:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

	nct.dc_rx_endp.utf8 = (const uint8_t *)rx_endp->ptr;
   2c772:	687b      	ldr	r3, [r7, #4]
   2c774:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	nct.dc_rx_endp.size = rx_endp->len;
   2c778:	683b      	ldr	r3, [r7, #0]
   2c77a:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0

	nct.dc_bulk_endp.utf8 = (const uint8_t *)bulk_endp->ptr;
   2c77e:	6873      	ldr	r3, [r6, #4]
   2c780:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
	nct.dc_bulk_endp.size = bulk_endp->len;
   2c784:	6833      	ldr	r3, [r6, #0]
   2c786:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0

	if (m_endp != NULL) {
   2c78a:	b19d      	cbz	r5, 2c7b4 <nct_dc_endpoint_set+0x64>
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2c78c:	686b      	ldr	r3, [r5, #4]
		nct.dc_m_endp.size = m_endp->len;
#if defined(CONFIG_NRF_CLOUD_FOTA)
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2c78e:	f100 02d4 	add.w	r2, r0, #212	; 0xd4
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2c792:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
		nct.dc_m_endp.size = m_endp->len;
   2c796:	682b      	ldr	r3, [r5, #0]
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2c798:	3024      	adds	r0, #36	; 0x24
		nct.dc_m_endp.size = m_endp->len;
   2c79a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2c79e:	4b07      	ldr	r3, [pc, #28]	; (2c7bc <nct_dc_endpoint_set+0x6c>)
   2c7a0:	6819      	ldr	r1, [r3, #0]
   2c7a2:	f002 ffad 	bl	2f700 <nrf_cloud_fota_endpoint_set_and_report>
			client_id_buf, &nct.dc_m_endp);
		if (persistent_session) {
   2c7a6:	4b06      	ldr	r3, [pc, #24]	; (2c7c0 <nct_dc_endpoint_set+0x70>)
   2c7a8:	781b      	ldrb	r3, [r3, #0]
   2c7aa:	b11b      	cbz	r3, 2c7b4 <nct_dc_endpoint_set+0x64>
			 */
			(void)nrf_cloud_fota_update_check();
		}
#endif
	}
}
   2c7ac:	e8bd 41e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, lr}
			(void)nrf_cloud_fota_update_check();
   2c7b0:	f003 b818 	b.w	2f7e4 <nrf_cloud_fota_update_check>
}
   2c7b4:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
   2c7b8:	20019570 	.word	0x20019570
   2c7bc:	2001956c 	.word	0x2001956c
   2c7c0:	2001c90d 	.word	0x2001c90d

0002c7c4 <nct_dc_endpoint_get>:

void nct_dc_endpoint_get(struct nrf_cloud_data *const tx_endp,
			 struct nrf_cloud_data *const rx_endp,
			 struct nrf_cloud_data *const bulk_endp,
			 struct nrf_cloud_data *const m_endp)
{
   2c7c4:	b530      	push	{r4, r5, lr}
	LOG_DBG("nct_dc_endpoint_get");

	tx_endp->ptr = nct.dc_tx_endp.utf8;
   2c7c6:	4c0e      	ldr	r4, [pc, #56]	; (2c800 <nct_dc_endpoint_get+0x3c>)
   2c7c8:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
   2c7cc:	6045      	str	r5, [r0, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   2c7ce:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
   2c7d2:	6005      	str	r5, [r0, #0]

	rx_endp->ptr = nct.dc_rx_endp.utf8;
   2c7d4:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   2c7d8:	6048      	str	r0, [r1, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   2c7da:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   2c7de:	6008      	str	r0, [r1, #0]

	if (bulk_endp != NULL) {
   2c7e0:	b12a      	cbz	r2, 2c7ee <nct_dc_endpoint_get+0x2a>
		bulk_endp->ptr = nct.dc_bulk_endp.utf8;
   2c7e2:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
   2c7e6:	6051      	str	r1, [r2, #4]
		bulk_endp->len = nct.dc_bulk_endp.size;
   2c7e8:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   2c7ec:	6011      	str	r1, [r2, #0]
	}

	if (m_endp != NULL) {
   2c7ee:	b12b      	cbz	r3, 2c7fc <nct_dc_endpoint_get+0x38>
		m_endp->ptr = nct.dc_m_endp.utf8;
   2c7f0:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
   2c7f4:	605a      	str	r2, [r3, #4]
		m_endp->len = nct.dc_m_endp.size;
   2c7f6:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   2c7fa:	601a      	str	r2, [r3, #0]
	}
}
   2c7fc:	bd30      	pop	{r4, r5, pc}
   2c7fe:	bf00      	nop
   2c800:	20019570 	.word	0x20019570

0002c804 <nct_dc_connect>:

int nct_dc_connect(void)
{
   2c804:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   2c806:	480a      	ldr	r0, [pc, #40]	; (2c830 <nct_dc_connect+0x2c>)
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_MSG_ID_DC_SUB
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2c808:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   2c80a:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
	return mqtt_subscribe(&nct.client, &subscription_list);
   2c80e:	3024      	adds	r0, #36	; 0x24
	struct mqtt_topic subscribe_topic = {
   2c810:	9303      	str	r3, [sp, #12]
   2c812:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
   2c816:	9304      	str	r3, [sp, #16]
   2c818:	2301      	movs	r3, #1
   2c81a:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   2c81e:	ab03      	add	r3, sp, #12
   2c820:	9301      	str	r3, [sp, #4]
   2c822:	4b04      	ldr	r3, [pc, #16]	; (2c834 <nct_dc_connect+0x30>)
   2c824:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2c826:	f011 fdad 	bl	3e384 <mqtt_subscribe>
}
   2c82a:	b007      	add	sp, #28
   2c82c:	f85d fb04 	ldr.w	pc, [sp], #4
   2c830:	20019570 	.word	0x20019570
   2c834:	00650001 	.word	0x00650001

0002c838 <nct_dc_bulk_send>:
{
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
}

int nct_dc_bulk_send(const struct nct_dc_data *dc_data, enum mqtt_qos qos)
{
   2c838:	b530      	push	{r4, r5, lr}
   2c83a:	460d      	mov	r5, r1
	if (dc_data == NULL) {
   2c83c:	4604      	mov	r4, r0
{
   2c83e:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   2c840:	b308      	cbz	r0, 2c886 <nct_dc_bulk_send+0x4e>
	if (qos != MQTT_QOS_0_AT_MOST_ONCE && qos != MQTT_QOS_1_AT_LEAST_ONCE) {
   2c842:	2901      	cmp	r1, #1
   2c844:	d81f      	bhi.n	2c886 <nct_dc_bulk_send+0x4e>
	struct mqtt_publish_param publish = {
   2c846:	2210      	movs	r2, #16
   2c848:	2100      	movs	r1, #0
   2c84a:	a802      	add	r0, sp, #8
   2c84c:	f014 fdf2 	bl	41434 <memset>
		.message.topic.topic.utf8 = nct.dc_bulk_endp.utf8,
   2c850:	4b0e      	ldr	r3, [pc, #56]	; (2c88c <nct_dc_bulk_send+0x54>)
	struct mqtt_publish_param publish = {
   2c852:	f88d 5008 	strb.w	r5, [sp, #8]
   2c856:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
   2c85a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2c85e:	9200      	str	r2, [sp, #0]
   2c860:	9301      	str	r3, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2c862:	6823      	ldr	r3, [r4, #0]
   2c864:	b11b      	cbz	r3, 2c86e <nct_dc_bulk_send+0x36>
   2c866:	6862      	ldr	r2, [r4, #4]
   2c868:	b10a      	cbz	r2, 2c86e <nct_dc_bulk_send+0x36>
		publish.message.payload.len = dc_data->data.len;
   2c86a:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (qos != MQTT_QOS_0_AT_MOST_ONCE) {
   2c86e:	b125      	cbz	r5, 2c87a <nct_dc_bulk_send+0x42>
		publish.message_id = get_message_id(dc_data->message_id);
   2c870:	8a20      	ldrh	r0, [r4, #16]
   2c872:	f7ff fb21 	bl	2beb8 <get_message_id>
   2c876:	f8ad 0014 	strh.w	r0, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2c87a:	4669      	mov	r1, sp
   2c87c:	4804      	ldr	r0, [pc, #16]	; (2c890 <nct_dc_bulk_send+0x58>)
   2c87e:	f011 fcef 	bl	3e260 <mqtt_publish>
	return bulk_send(dc_data, qos);
}
   2c882:	b007      	add	sp, #28
   2c884:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c886:	f06f 0015 	mvn.w	r0, #21
	return bulk_send(dc_data, qos);
   2c88a:	e7fa      	b.n	2c882 <nct_dc_bulk_send+0x4a>
   2c88c:	20019570 	.word	0x20019570
   2c890:	20019594 	.word	0x20019594

0002c894 <nct_dc_disconnect>:

int nct_dc_disconnect(void)
{
   2c894:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int ret;

	LOG_DBG("nct_dc_disconnect");

	const struct mqtt_subscription_list subscription_list = {
   2c896:	466b      	mov	r3, sp
   2c898:	4a0c      	ldr	r2, [pc, #48]	; (2c8cc <nct_dc_disconnect+0x38>)
   2c89a:	e892 0003 	ldmia.w	r2, {r0, r1}
   2c89e:	e883 0003 	stmia.w	r3, {r0, r1}
		.list = (struct mqtt_topic *)&nct.dc_rx_endp,
		.list_count = 1,
		.message_id = NCT_MSG_ID_DC_UNSUB
	};

	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   2c8a2:	4619      	mov	r1, r3
   2c8a4:	480a      	ldr	r0, [pc, #40]	; (2c8d0 <nct_dc_disconnect+0x3c>)
   2c8a6:	f011 fd93 	bl	3e3d0 <mqtt_unsubscribe>
   2c8aa:	4604      	mov	r4, r0

#if defined(CONFIG_NRF_CLOUD_FOTA)
	int err = nrf_cloud_fota_unsubscribe();
   2c8ac:	f002 ff62 	bl	2f774 <nrf_cloud_fota_unsubscribe>

	if (err) {
   2c8b0:	4605      	mov	r5, r0
   2c8b2:	b138      	cbz	r0, 2c8c4 <nct_dc_disconnect+0x30>
		LOG_ERR("FOTA MQTT unsubscribe failed: %d", err);
   2c8b4:	4602      	mov	r2, r0
   2c8b6:	2145      	movs	r1, #69	; 0x45
   2c8b8:	4806      	ldr	r0, [pc, #24]	; (2c8d4 <nct_dc_disconnect+0x40>)
   2c8ba:	f010 f921 	bl	3cb00 <z_log_minimal_printk>
		if (ret == 0) {
   2c8be:	2c00      	cmp	r4, #0
   2c8c0:	bf08      	it	eq
   2c8c2:	462c      	moveq	r4, r5
		}
	}
#endif

	return ret;
}
   2c8c4:	4620      	mov	r0, r4
   2c8c6:	b003      	add	sp, #12
   2c8c8:	bd30      	pop	{r4, r5, pc}
   2c8ca:	bf00      	nop
   2c8cc:	00042814 	.word	0x00042814
   2c8d0:	20019594 	.word	0x20019594
   2c8d4:	00048948 	.word	0x00048948

0002c8d8 <nct_disconnect>:

int nct_disconnect(void)
{
   2c8d8:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");

	dc_endpoint_free();
   2c8da:	f7ff fbcb 	bl	2c074 <dc_endpoint_free>
	return mqtt_disconnect(&nct.client);
}
   2c8de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   2c8e2:	4801      	ldr	r0, [pc, #4]	; (2c8e8 <nct_disconnect+0x10>)
   2c8e4:	f011 bd26 	b.w	3e334 <mqtt_disconnect>
   2c8e8:	20019594 	.word	0x20019594

0002c8ec <nct_process>:

int nct_process(void)
{
   2c8ec:	b530      	push	{r4, r5, lr}
	int err;
	int ret;

	err = mqtt_input(&nct.client);
   2c8ee:	4d21      	ldr	r5, [pc, #132]	; (2c974 <nct_process+0x88>)
{
   2c8f0:	b085      	sub	sp, #20
	err = mqtt_input(&nct.client);
   2c8f2:	f105 0024 	add.w	r0, r5, #36	; 0x24
   2c8f6:	f011 fdf9 	bl	3e4ec <mqtt_input>
	if (err) {
   2c8fa:	4604      	mov	r4, r0
   2c8fc:	b320      	cbz	r0, 2c948 <nct_process+0x5c>
		LOG_ERR("MQTT input error: %d", err);
   2c8fe:	4602      	mov	r2, r0
   2c900:	2145      	movs	r1, #69	; 0x45
   2c902:	481d      	ldr	r0, [pc, #116]	; (2c978 <nct_process+0x8c>)
   2c904:	f010 f8fc 	bl	3cb00 <z_log_minimal_printk>
		if (err != -ENOTCONN) {
   2c908:	f114 0f80 	cmn.w	r4, #128	; 0x80
   2c90c:	d119      	bne.n	2c942 <nct_process+0x56>
		} else {
			return err;
		}
	}

	ret = nct_disconnect();
   2c90e:	f7ff ffe3 	bl	2c8d8 <nct_disconnect>
	if (ret) {
   2c912:	4602      	mov	r2, r0
   2c914:	b118      	cbz	r0, 2c91e <nct_process+0x32>
		LOG_ERR("Error disconnecting from cloud: %d", ret);
   2c916:	2145      	movs	r1, #69	; 0x45
   2c918:	4818      	ldr	r0, [pc, #96]	; (2c97c <nct_process+0x90>)
   2c91a:	f010 f8f1 	bl	3cb00 <z_log_minimal_printk>
	}

	struct nct_evt evt = { .status = err };
   2c91e:	2300      	movs	r3, #0
   2c920:	e9cd 3302 	strd	r3, r3, [sp, #8]

	evt.type = NCT_EVT_DISCONNECTED;
   2c924:	230a      	movs	r3, #10
	ret = nct_input(&evt);
   2c926:	a801      	add	r0, sp, #4
	struct nct_evt evt = { .status = err };
   2c928:	9401      	str	r4, [sp, #4]
	evt.type = NCT_EVT_DISCONNECTED;
   2c92a:	f88d 300c 	strb.w	r3, [sp, #12]
	ret = nct_input(&evt);
   2c92e:	f7ff f85d 	bl	2b9ec <nct_input>
	if (ret) {
   2c932:	4605      	mov	r5, r0
   2c934:	b128      	cbz	r0, 2c942 <nct_process+0x56>
		LOG_ERR("Error sending event to application: %d", err);
   2c936:	4622      	mov	r2, r4
   2c938:	2145      	movs	r1, #69	; 0x45
   2c93a:	4811      	ldr	r0, [pc, #68]	; (2c980 <nct_process+0x94>)
   2c93c:	f010 f8e0 	bl	3cb00 <z_log_minimal_printk>
   2c940:	462c      	mov	r4, r5
		err = ret;
	}
	return err;
}
   2c942:	4620      	mov	r0, r4
   2c944:	b005      	add	sp, #20
   2c946:	bd30      	pop	{r4, r5, pc}
	} else if (nct.client.unacked_ping) {
   2c948:	f995 30a7 	ldrsb.w	r3, [r5, #167]	; 0xa7
   2c94c:	b97b      	cbnz	r3, 2c96e <nct_process+0x82>
		err = mqtt_live(&nct.client);
   2c94e:	f105 0024 	add.w	r0, r5, #36	; 0x24
   2c952:	f011 fd8d 	bl	3e470 <mqtt_live>
		if (err && (err != -EAGAIN)) {
   2c956:	4604      	mov	r4, r0
   2c958:	2800      	cmp	r0, #0
   2c95a:	d0f2      	beq.n	2c942 <nct_process+0x56>
   2c95c:	f110 0f0b 	cmn.w	r0, #11
   2c960:	d0ef      	beq.n	2c942 <nct_process+0x56>
			LOG_ERR("MQTT ping error: %d", err);
   2c962:	4602      	mov	r2, r0
   2c964:	2145      	movs	r1, #69	; 0x45
   2c966:	4807      	ldr	r0, [pc, #28]	; (2c984 <nct_process+0x98>)
   2c968:	f010 f8ca 	bl	3cb00 <z_log_minimal_printk>
   2c96c:	e7cf      	b.n	2c90e <nct_process+0x22>
		err = -ECONNRESET;
   2c96e:	f06f 0467 	mvn.w	r4, #103	; 0x67
   2c972:	e7cc      	b.n	2c90e <nct_process+0x22>
   2c974:	20019570 	.word	0x20019570
   2c978:	0004896e 	.word	0x0004896e
   2c97c:	000489a1 	.word	0x000489a1
   2c980:	000489c9 	.word	0x000489c9
   2c984:	00048988 	.word	0x00048988

0002c988 <nct_keepalive_time_left>:

int nct_keepalive_time_left(void)
{
	return mqtt_keepalive_time_left(&nct.client);
   2c988:	4801      	ldr	r0, [pc, #4]	; (2c990 <nct_keepalive_time_left+0x8>)
   2c98a:	f011 bd98 	b.w	3e4be <mqtt_keepalive_time_left>
   2c98e:	bf00      	nop
   2c990:	20019594 	.word	0x20019594

0002c994 <nct_socket_get>:
}

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
}
   2c994:	4b01      	ldr	r3, [pc, #4]	; (2c99c <nct_socket_get+0x8>)
   2c996:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2c998:	4770      	bx	lr
   2c99a:	bf00      	nop
   2c99c:	20019570 	.word	0x20019570

0002c9a0 <send_to_modem>:
	return nrf_cloud_agps_request(&request);
}

static int send_to_modem(void *data, size_t data_len, uint16_t type)
{
	if (agps_print_enabled) {
   2c9a0:	4b08      	ldr	r3, [pc, #32]	; (2c9c4 <send_to_modem+0x24>)
{
   2c9a2:	b570      	push	{r4, r5, r6, lr}
	if (agps_print_enabled) {
   2c9a4:	781b      	ldrb	r3, [r3, #0]
{
   2c9a6:	4604      	mov	r4, r0
   2c9a8:	460e      	mov	r6, r1
   2c9aa:	4615      	mov	r5, r2
	if (agps_print_enabled) {
   2c9ac:	b11b      	cbz	r3, 2c9b6 <send_to_modem+0x16>
		agps_print(type, data);
   2c9ae:	4601      	mov	r1, r0
   2c9b0:	b2d0      	uxtb	r0, r2
   2c9b2:	f000 fb73 	bl	2d09c <agps_print>
	}

	return nrf_modem_gnss_agps_write(data, data_len, type);
   2c9b6:	462a      	mov	r2, r5
   2c9b8:	4631      	mov	r1, r6
   2c9ba:	4620      	mov	r0, r4
}
   2c9bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_modem_gnss_agps_write(data, data_len, type);
   2c9c0:	f014 ba66 	b.w	40e90 <nrf_modem_gnss_agps_write>
   2c9c4:	2001c956 	.word	0x2001c956

0002c9c8 <nrf_cloud_agps_request>:
{
   2c9c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2c9cc:	4605      	mov	r5, r0
	if (nfsm_get_current_state() != STATE_DC_CONNECTED) {
   2c9ce:	f7fe fdc5 	bl	2b55c <nfsm_get_current_state>
   2c9d2:	2809      	cmp	r0, #9
   2c9d4:	f040 80b5 	bne.w	2cb42 <nrf_cloud_agps_request+0x17a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c9d8:	2400      	movs	r4, #0
   2c9da:	4e5b      	ldr	r6, [pc, #364]	; (2cb48 <nrf_cloud_agps_request+0x180>)
   2c9dc:	e8d6 3fef 	ldaex	r3, [r6]
   2c9e0:	e8c6 4fe2 	stlex	r2, r4, [r6]
   2c9e4:	2a00      	cmp	r2, #0
   2c9e6:	d1f9      	bne.n	2c9dc <nrf_cloud_agps_request+0x14>
	return z_impl_k_mutex_lock(mutex, timeout);
   2c9e8:	f04f 32ff 	mov.w	r2, #4294967295
   2c9ec:	f04f 33ff 	mov.w	r3, #4294967295
   2c9f0:	4856      	ldr	r0, [pc, #344]	; (2cb4c <nrf_cloud_agps_request+0x184>)
   2c9f2:	f009 ff6f 	bl	368d4 <z_impl_k_mutex_lock>
	memset(&processed, 0, sizeof(processed));
   2c9f6:	4b56      	ldr	r3, [pc, #344]	; (2cb50 <nrf_cloud_agps_request+0x188>)
   2c9f8:	e9c3 4400 	strd	r4, r4, [r3]
   2c9fc:	609c      	str	r4, [r3, #8]
	return z_impl_k_mutex_unlock(mutex);
   2c9fe:	4853      	ldr	r0, [pc, #332]	; (2cb4c <nrf_cloud_agps_request+0x184>)
   2ca00:	f00a f83a 	bl	36a78 <z_impl_k_mutex_unlock>
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST) {
   2ca04:	68ab      	ldr	r3, [r5, #8]
   2ca06:	f013 0401 	ands.w	r4, r3, #1
		types[type_count++] = NRF_CLOUD_AGPS_UTC_PARAMETERS;
   2ca0a:	bf1c      	itt	ne
   2ca0c:	2201      	movne	r2, #1
   2ca0e:	f88d 2004 	strbne.w	r2, [sp, #4]
	if (ephem) {
   2ca12:	682a      	ldr	r2, [r5, #0]
   2ca14:	b12a      	cbz	r2, 2ca22 <nrf_cloud_agps_request+0x5a>
		types[type_count++] = NRF_CLOUD_AGPS_EPHEMERIDES;
   2ca16:	2102      	movs	r1, #2
   2ca18:	aa04      	add	r2, sp, #16
   2ca1a:	4422      	add	r2, r4
   2ca1c:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2ca20:	3401      	adds	r4, #1
	if (request->sv_mask_alm) {
   2ca22:	686a      	ldr	r2, [r5, #4]
   2ca24:	b12a      	cbz	r2, 2ca32 <nrf_cloud_agps_request+0x6a>
		types[type_count++] = NRF_CLOUD_AGPS_ALMANAC;
   2ca26:	2103      	movs	r1, #3
   2ca28:	aa04      	add	r2, sp, #16
   2ca2a:	4422      	add	r2, r4
   2ca2c:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2ca30:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST) {
   2ca32:	079d      	lsls	r5, r3, #30
   2ca34:	d505      	bpl.n	2ca42 <nrf_cloud_agps_request+0x7a>
		types[type_count++] = NRF_CLOUD_AGPS_KLOBUCHAR_CORRECTION;
   2ca36:	2104      	movs	r1, #4
   2ca38:	aa04      	add	r2, sp, #16
   2ca3a:	4422      	add	r2, r4
   2ca3c:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2ca40:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_NEQUICK_REQUEST) {
   2ca42:	0758      	lsls	r0, r3, #29
   2ca44:	d505      	bpl.n	2ca52 <nrf_cloud_agps_request+0x8a>
		types[type_count++] = NRF_CLOUD_AGPS_NEQUICK_CORRECTION;
   2ca46:	2105      	movs	r1, #5
   2ca48:	aa04      	add	r2, sp, #16
   2ca4a:	4422      	add	r2, r4
   2ca4c:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2ca50:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   2ca52:	0719      	lsls	r1, r3, #28
   2ca54:	d50b      	bpl.n	2ca6e <nrf_cloud_agps_request+0xa6>
		types[type_count++] = NRF_CLOUD_AGPS_GPS_TOWS;
   2ca56:	2006      	movs	r0, #6
   2ca58:	a904      	add	r1, sp, #16
   2ca5a:	4421      	add	r1, r4
   2ca5c:	1c62      	adds	r2, r4, #1
   2ca5e:	f801 0c0c 	strb.w	r0, [r1, #-12]
		types[type_count++] = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   2ca62:	a904      	add	r1, sp, #16
   2ca64:	440a      	add	r2, r1
   2ca66:	2107      	movs	r1, #7
   2ca68:	3402      	adds	r4, #2
   2ca6a:	f802 1c0c 	strb.w	r1, [r2, #-12]
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   2ca6e:	06da      	lsls	r2, r3, #27
   2ca70:	d505      	bpl.n	2ca7e <nrf_cloud_agps_request+0xb6>
		types[type_count++] = NRF_CLOUD_AGPS_LOCATION;
   2ca72:	2108      	movs	r1, #8
   2ca74:	aa04      	add	r2, sp, #16
   2ca76:	4422      	add	r2, r4
   2ca78:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2ca7c:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST) {
   2ca7e:	069b      	lsls	r3, r3, #26
   2ca80:	d51f      	bpl.n	2cac2 <nrf_cloud_agps_request+0xfa>
		types[type_count++] = NRF_CLOUD_AGPS_INTEGRITY;
   2ca82:	2209      	movs	r2, #9
   2ca84:	ab04      	add	r3, sp, #16
   2ca86:	4423      	add	r3, r4
   2ca88:	f803 2c0c 	strb.w	r2, [r3, #-12]
   2ca8c:	3401      	adds	r4, #1
	agps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_AGPS,
   2ca8e:	4931      	ldr	r1, [pc, #196]	; (2cb54 <nrf_cloud_agps_request+0x18c>)
   2ca90:	4831      	ldr	r0, [pc, #196]	; (2cb58 <nrf_cloud_agps_request+0x190>)
   2ca92:	f7fd fb9f 	bl	2a1d4 <json_create_req_obj>
	data_obj = cJSON_AddObjectToObject(agps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2ca96:	4931      	ldr	r1, [pc, #196]	; (2cb5c <nrf_cloud_agps_request+0x194>)
	agps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_AGPS,
   2ca98:	4607      	mov	r7, r0
	data_obj = cJSON_AddObjectToObject(agps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2ca9a:	f013 f94e 	bl	3fd3a <cJSON_AddObjectToObject>
   2ca9e:	4680      	mov	r8, r0
	if (!agps_req_obj || !data_obj) {
   2caa0:	2f00      	cmp	r7, #0
   2caa2:	d03d      	beq.n	2cb20 <nrf_cloud_agps_request+0x158>
   2caa4:	2800      	cmp	r0, #0
   2caa6:	d03b      	beq.n	2cb20 <nrf_cloud_agps_request+0x158>
	err = nrf_cloud_json_add_modem_info(data_obj);
   2caa8:	f7fd fbcc 	bl	2a244 <nrf_cloud_json_add_modem_info>
	if (err) {
   2caac:	4605      	mov	r5, r0
   2caae:	b198      	cbz	r0, 2cad8 <nrf_cloud_agps_request+0x110>
		LOG_ERR("Failed to add modem info to A-GPS request: %d", err);
   2cab0:	4602      	mov	r2, r0
   2cab2:	2145      	movs	r1, #69	; 0x45
   2cab4:	482a      	ldr	r0, [pc, #168]	; (2cb60 <nrf_cloud_agps_request+0x198>)
   2cab6:	f010 f823 	bl	3cb00 <z_log_minimal_printk>
	cJSON_Delete(agps_req_obj);
   2caba:	4638      	mov	r0, r7
   2cabc:	f005 fa4e 	bl	31f5c <cJSON_Delete>
	return err;
   2cac0:	e006      	b.n	2cad0 <nrf_cloud_agps_request+0x108>
	if (type_count == 0) {
   2cac2:	2c00      	cmp	r4, #0
   2cac4:	d1e3      	bne.n	2ca8e <nrf_cloud_agps_request+0xc6>
		LOG_INF("No A-GPS data types requested");
   2cac6:	2149      	movs	r1, #73	; 0x49
   2cac8:	4826      	ldr	r0, [pc, #152]	; (2cb64 <nrf_cloud_agps_request+0x19c>)
   2caca:	f010 f819 	bl	3cb00 <z_log_minimal_printk>
		return 0;
   2cace:	4625      	mov	r5, r4
}
   2cad0:	4628      	mov	r0, r5
   2cad2:	b004      	add	sp, #16
   2cad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	array = cJSON_AddArrayToObject(obj, AGPS_JSON_TYPES_KEY);
   2cad8:	4640      	mov	r0, r8
   2cada:	4923      	ldr	r1, [pc, #140]	; (2cb68 <nrf_cloud_agps_request+0x1a0>)
   2cadc:	f013 f903 	bl	3fce6 <cJSON_AddArrayToObject>
	if (!array) {
   2cae0:	4681      	mov	r9, r0
   2cae2:	b1b8      	cbz	r0, 2cb14 <nrf_cloud_agps_request+0x14c>
   2cae4:	f10d 0a04 	add.w	sl, sp, #4
		cJSON_AddItemToArray(array, cJSON_CreateNumber(types[i]));
   2cae8:	f81a 0b01 	ldrb.w	r0, [sl], #1
   2caec:	f7ef fdea 	bl	1c6c4 <__aeabi_ui2d>
   2caf0:	f7f1 fd02 	bl	1e4f8 <cJSON_CreateNumber>
	for (size_t i = 0; i < type_count; i++) {
   2caf4:	3501      	adds	r5, #1
		cJSON_AddItemToArray(array, cJSON_CreateNumber(types[i]));
   2caf6:	4601      	mov	r1, r0
   2caf8:	4648      	mov	r0, r9
   2cafa:	f013 f83d 	bl	3fb78 <cJSON_AddItemToArray>
	for (size_t i = 0; i < type_count; i++) {
   2cafe:	42a5      	cmp	r5, r4
   2cb00:	d3f2      	bcc.n	2cae8 <nrf_cloud_agps_request+0x120>
	if (cJSON_GetArraySize(array) != type_count) {
   2cb02:	4648      	mov	r0, r9
   2cb04:	f013 f820 	bl	3fb48 <cJSON_GetArraySize>
   2cb08:	42a0      	cmp	r0, r4
   2cb0a:	d00c      	beq.n	2cb26 <nrf_cloud_agps_request+0x15e>
		cJSON_DeleteItemFromObject(obj, AGPS_JSON_TYPES_KEY);
   2cb0c:	4640      	mov	r0, r8
   2cb0e:	4916      	ldr	r1, [pc, #88]	; (2cb68 <nrf_cloud_agps_request+0x1a0>)
   2cb10:	f013 f860 	bl	3fbd4 <cJSON_DeleteItemFromObject>
		LOG_ERR("Failed to add types array to A-GPS request %d", err);
   2cb14:	f06f 020b 	mvn.w	r2, #11
   2cb18:	2145      	movs	r1, #69	; 0x45
   2cb1a:	4814      	ldr	r0, [pc, #80]	; (2cb6c <nrf_cloud_agps_request+0x1a4>)
   2cb1c:	f00f fff0 	bl	3cb00 <z_log_minimal_printk>
		err = -ENOMEM;
   2cb20:	f06f 050b 	mvn.w	r5, #11
   2cb24:	e7c9      	b.n	2caba <nrf_cloud_agps_request+0xf2>
	err = json_send_to_cloud(agps_req_obj);
   2cb26:	4638      	mov	r0, r7
   2cb28:	f7fd ff18 	bl	2a95c <json_send_to_cloud>
	if (!err) {
   2cb2c:	4605      	mov	r5, r0
   2cb2e:	2800      	cmp	r0, #0
   2cb30:	d1c3      	bne.n	2caba <nrf_cloud_agps_request+0xf2>
   2cb32:	2301      	movs	r3, #1
   2cb34:	e8d6 2fef 	ldaex	r2, [r6]
   2cb38:	e8c6 3fe1 	stlex	r1, r3, [r6]
   2cb3c:	2900      	cmp	r1, #0
   2cb3e:	d0bc      	beq.n	2caba <nrf_cloud_agps_request+0xf2>
   2cb40:	e7f8      	b.n	2cb34 <nrf_cloud_agps_request+0x16c>
		return -EACCES;
   2cb42:	f06f 050c 	mvn.w	r5, #12
   2cb46:	e7c3      	b.n	2cad0 <nrf_cloud_agps_request+0x108>
   2cb48:	2001a110 	.word	0x2001a110
   2cb4c:	20014f68 	.word	0x20014f68
   2cb50:	2001a104 	.word	0x2001a104
   2cb54:	0004362e 	.word	0x0004362e
   2cb58:	00048a2c 	.word	0x00048a2c
   2cb5c:	0004370a 	.word	0x0004370a
   2cb60:	00048a31 	.word	0x00048a31
   2cb64:	00048a09 	.word	0x00048a09
   2cb68:	00048a64 	.word	0x00048a64
   2cb6c:	00048a6a 	.word	0x00048a6a

0002cb70 <nrf_cloud_agps_process>:

	return len;
}

int nrf_cloud_agps_process(const char *buf, size_t buf_len)
{
   2cb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cb74:	4607      	mov	r7, r0
   2cb76:	b0cb      	sub	sp, #300	; 0x12c
   2cb78:	9100      	str	r1, [sp, #0]
	int err;
	struct nrf_cloud_apgs_element element = {0};
	struct nrf_cloud_agps_system_time sys_time = {0};
   2cb7a:	228c      	movs	r2, #140	; 0x8c
   2cb7c:	2100      	movs	r1, #0
   2cb7e:	a803      	add	r0, sp, #12
   2cb80:	f014 fc58 	bl	41434 <memset>
	uint8_t version;
#if defined(CONFIG_NRF_CLOUD_AGPS_FILTERED)
	bool ephemerides_processed = false;
#endif

	if (!buf || (buf_len == 0)) {
   2cb84:	2f00      	cmp	r7, #0
   2cb86:	f000 8261 	beq.w	2d04c <nrf_cloud_agps_process+0x4dc>
   2cb8a:	9b00      	ldr	r3, [sp, #0]
   2cb8c:	2b00      	cmp	r3, #0
   2cb8e:	f000 825d 	beq.w	2d04c <nrf_cloud_agps_process+0x4dc>
	}

	/* Check for a potential A-GPS JSON error message from nRF Cloud */
	enum nrf_cloud_error nrf_err;

	err = nrf_cloud_handle_error_message(buf, NRF_CLOUD_JSON_APPID_VAL_AGPS,
   2cb92:	4638      	mov	r0, r7
   2cb94:	4abb      	ldr	r2, [pc, #748]	; (2ce84 <nrf_cloud_agps_process+0x314>)
   2cb96:	49bc      	ldr	r1, [pc, #752]	; (2ce88 <nrf_cloud_agps_process+0x318>)
   2cb98:	ab02      	add	r3, sp, #8
   2cb9a:	f7fe fae1 	bl	2b160 <nrf_cloud_handle_error_message>
		NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA, &nrf_err);
	if (!err) {
   2cb9e:	b950      	cbnz	r0, 2cbb6 <nrf_cloud_agps_process+0x46>
		LOG_ERR("nRF Cloud returned A-GPS error: %d", nrf_err);
   2cba0:	2145      	movs	r1, #69	; 0x45
   2cba2:	9a02      	ldr	r2, [sp, #8]
   2cba4:	48b9      	ldr	r0, [pc, #740]	; (2ce8c <nrf_cloud_agps_process+0x31c>)
   2cba6:	f00f ffab 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   2cbaa:	f06f 050d 	mvn.w	r5, #13

	LOG_DBG("A-GPS_inject_active UNLOCKED");
	k_sem_give(&agps_injection_active);

	return err;
}
   2cbae:	4628      	mov	r0, r5
   2cbb0:	b04b      	add	sp, #300	; 0x12c
   2cbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (err == -ENODATA) { /* Not a JSON message, try to parse it as A-GPS data */
   2cbb6:	303d      	adds	r0, #61	; 0x3d
   2cbb8:	f040 824b 	bne.w	2d052 <nrf_cloud_agps_process+0x4e2>
	version = buf[NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_INDEX];
   2cbbc:	783e      	ldrb	r6, [r7, #0]
	if (version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) {
   2cbbe:	2e01      	cmp	r6, #1
   2cbc0:	d007      	beq.n	2cbd2 <nrf_cloud_agps_process+0x62>
		LOG_ERR("Cannot parse schema version: %d", version);
   2cbc2:	4632      	mov	r2, r6
   2cbc4:	2145      	movs	r1, #69	; 0x45
   2cbc6:	48b2      	ldr	r0, [pc, #712]	; (2ce90 <nrf_cloud_agps_process+0x320>)
   2cbc8:	f00f ff9a 	bl	3cb00 <z_log_minimal_printk>
		return -EBADMSG;
   2cbcc:	f06f 054c 	mvn.w	r5, #76	; 0x4c
   2cbd0:	e7ed      	b.n	2cbae <nrf_cloud_agps_process+0x3e>
	return z_impl_k_sem_take(sem, timeout);
   2cbd2:	f04f 32ff 	mov.w	r2, #4294967295
   2cbd6:	f04f 33ff 	mov.w	r3, #4294967295
   2cbda:	48ae      	ldr	r0, [pc, #696]	; (2ce94 <nrf_cloud_agps_process+0x324>)
   2cbdc:	f00a f908 	bl	36df0 <z_impl_k_sem_take>
	if (err) {
   2cbe0:	4605      	mov	r5, r0
   2cbe2:	2800      	cmp	r0, #0
   2cbe4:	f000 822c 	beq.w	2d040 <nrf_cloud_agps_process+0x4d0>
		LOG_ERR("A-GPS injection already active.");
   2cbe8:	2145      	movs	r1, #69	; 0x45
   2cbea:	48ab      	ldr	r0, [pc, #684]	; (2ce98 <nrf_cloud_agps_process+0x328>)
   2cbec:	f00f ff88 	bl	3cb00 <z_log_minimal_printk>
		return err;
   2cbf0:	e7dd      	b.n	2cbae <nrf_cloud_agps_process+0x3e>
		element->type = element_type;
   2cbf2:	4aaa      	ldr	r2, [pc, #680]	; (2ce9c <nrf_cloud_agps_process+0x32c>)
		elements_left_to_process -= 1;
   2cbf4:	3b01      	subs	r3, #1
   2cbf6:	f8aa 3000 	strh.w	r3, [sl]
		element->type = element_type;
   2cbfa:	f892 8000 	ldrb.w	r8, [r2]
	size_t len = 0;
   2cbfe:	2300      	movs	r3, #0
   2cc00:	e02b      	b.n	2cc5a <nrf_cloud_agps_process+0xea>
		element->utc = (struct nrf_cloud_agps_utc *)(buf + len);
   2cc02:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_utc);
   2cc04:	330e      	adds	r3, #14
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2cc06:	f1b8 0f06 	cmp.w	r8, #6
		parsed_len += element_size;
   2cc0a:	441e      	add	r6, r3
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2cc0c:	d152      	bne.n	2ccb4 <nrf_cloud_agps_process+0x144>
			memcpy(&sys_time.sv_tow[element.tow->sv_id - 1],
   2cc0e:	7823      	ldrb	r3, [r4, #0]
   2cc10:	a84a      	add	r0, sp, #296	; 0x128
   2cc12:	6821      	ldr	r1, [r4, #0]
   2cc14:	1e5a      	subs	r2, r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2cc16:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2cc1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
   2cc1e:	6019      	str	r1, [r3, #0]
			if (element.tow->flags || element.tow->tlm) {
   2cc20:	78e3      	ldrb	r3, [r4, #3]
   2cc22:	b913      	cbnz	r3, 2cc2a <nrf_cloud_agps_process+0xba>
   2cc24:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   2cc28:	b11b      	cbz	r3, 2cc32 <nrf_cloud_agps_process+0xc2>
				sv_mask |= 1 << (element.tow->sv_id - 1);
   2cc2a:	2301      	movs	r3, #1
   2cc2c:	4093      	lsls	r3, r2
   2cc2e:	ea49 0903 	orr.w	r9, r9, r3
	while (parsed_len < buf_len) {
   2cc32:	9b00      	ldr	r3, [sp, #0]
   2cc34:	42b3      	cmp	r3, r6
   2cc36:	f240 8121 	bls.w	2ce7c <nrf_cloud_agps_process+0x30c>
	if (elements_left_to_process == 0) {
   2cc3a:	f8ba 3000 	ldrh.w	r3, [sl]
			get_next_agps_element(&element, &buf[parsed_len]);
   2cc3e:	19bc      	adds	r4, r7, r6
	if (elements_left_to_process == 0) {
   2cc40:	2b00      	cmp	r3, #0
   2cc42:	d1d6      	bne.n	2cbf2 <nrf_cloud_agps_process+0x82>
		element_type = element->type;
   2cc44:	4b95      	ldr	r3, [pc, #596]	; (2ce9c <nrf_cloud_agps_process+0x32c>)
			(enum nrf_cloud_agps_type)buf[NRF_CLOUD_AGPS_BIN_TYPE_OFFSET];
   2cc46:	f817 8006 	ldrb.w	r8, [r7, r6]
		element_type = element->type;
   2cc4a:	f883 8000 	strb.w	r8, [r3]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2cc4e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   2cc52:	3b01      	subs	r3, #1
		elements_left_to_process =
   2cc54:	f8aa 3000 	strh.w	r3, [sl]
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   2cc58:	2303      	movs	r3, #3
	switch (element->type) {
   2cc5a:	f108 32ff 	add.w	r2, r8, #4294967295
   2cc5e:	9201      	str	r2, [sp, #4]
   2cc60:	2a08      	cmp	r2, #8
   2cc62:	f200 810b 	bhi.w	2ce7c <nrf_cloud_agps_process+0x30c>
   2cc66:	a101      	add	r1, pc, #4	; (adr r1, 2cc6c <nrf_cloud_agps_process+0xfc>)
   2cc68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   2cc6c:	0002cc03 	.word	0x0002cc03
   2cc70:	0002cc91 	.word	0x0002cc91
   2cc74:	0002cc97 	.word	0x0002cc97
   2cc78:	0002cc9d 	.word	0x0002cc9d
   2cc7c:	0002ce7d 	.word	0x0002ce7d
   2cc80:	0002ccaf 	.word	0x0002ccaf
   2cc84:	0002cca3 	.word	0x0002cca3
   2cc88:	0002cca9 	.word	0x0002cca9
   2cc8c:	0002ccaf 	.word	0x0002ccaf
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2cc90:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   2cc92:	333e      	adds	r3, #62	; 0x3e
		break;
   2cc94:	e7b7      	b.n	2cc06 <nrf_cloud_agps_process+0x96>
		element->almanac = (struct nrf_cloud_agps_almanac *)(buf + len);
   2cc96:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_almanac);
   2cc98:	331f      	adds	r3, #31
		break;
   2cc9a:	e7b4      	b.n	2cc06 <nrf_cloud_agps_process+0x96>
			(struct nrf_cloud_agps_klobuchar *)(buf + len);
   2cc9c:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_klobuchar);
   2cc9e:	3308      	adds	r3, #8
		break;
   2cca0:	e7b1      	b.n	2cc06 <nrf_cloud_agps_process+0x96>
			(struct nrf_cloud_agps_system_time *)(buf + len);
   2cca2:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_system_time) -
   2cca4:	3310      	adds	r3, #16
		break;
   2cca6:	e7ae      	b.n	2cc06 <nrf_cloud_agps_process+0x96>
		element->location = (struct nrf_cloud_agps_location *)(buf + len);
   2cca8:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_location);
   2ccaa:	330f      	adds	r3, #15
		break;
   2ccac:	e7ab      	b.n	2cc06 <nrf_cloud_agps_process+0x96>
			(struct nrf_cloud_agps_integrity *)(buf + len);
   2ccae:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_integrity);
   2ccb0:	3304      	adds	r3, #4
		break;
   2ccb2:	e7a8      	b.n	2cc06 <nrf_cloud_agps_process+0x96>
		} else if (element.type == NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK) {
   2ccb4:	f1b8 0f07 	cmp.w	r8, #7
   2ccb8:	d108      	bne.n	2cccc <nrf_cloud_agps_process+0x15c>
			memcpy(&sys_time, element.time_and_tow,
   2ccba:	6820      	ldr	r0, [r4, #0]
   2ccbc:	6861      	ldr	r1, [r4, #4]
   2ccbe:	ab03      	add	r3, sp, #12
   2ccc0:	c303      	stmia	r3!, {r0, r1}
			sys_time.sv_mask = sv_mask | element.time_and_tow->sv_mask;
   2ccc2:	68a3      	ldr	r3, [r4, #8]
			element.time_and_tow = &sys_time;
   2ccc4:	ac03      	add	r4, sp, #12
			sys_time.sv_mask = sv_mask | element.time_and_tow->sv_mask;
   2ccc6:	ea43 0309 	orr.w	r3, r3, r9
   2ccca:	9305      	str	r3, [sp, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
   2cccc:	f04f 32ff 	mov.w	r2, #4294967295
   2ccd0:	f04f 33ff 	mov.w	r3, #4294967295
   2ccd4:	4658      	mov	r0, fp
   2ccd6:	f009 fdfd 	bl	368d4 <z_impl_k_mutex_lock>
   2ccda:	2300      	movs	r3, #0
   2ccdc:	4a70      	ldr	r2, [pc, #448]	; (2cea0 <nrf_cloud_agps_process+0x330>)
   2ccde:	e8d2 1fef 	ldaex	r1, [r2]
   2cce2:	e8c2 3fe0 	stlex	r0, r3, [r2]
   2cce6:	2800      	cmp	r0, #0
   2cce8:	d1f9      	bne.n	2ccde <nrf_cloud_agps_process+0x16e>
	switch (agps_data->type) {
   2ccea:	9a01      	ldr	r2, [sp, #4]
   2ccec:	2a08      	cmp	r2, #8
   2ccee:	f200 81a0 	bhi.w	2d032 <nrf_cloud_agps_process+0x4c2>
   2ccf2:	e8df f012 	tbh	[pc, r2, lsl #1]
   2ccf6:	0009      	.short	0x0009
   2ccf8:	00db002a 	.word	0x00db002a
   2ccfc:	019e011e 	.word	0x019e011e
   2cd00:	013e019e 	.word	0x013e019e
   2cd04:	01950171 	.word	0x01950171
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST;
   2cd08:	4a66      	ldr	r2, [pc, #408]	; (2cea4 <nrf_cloud_agps_process+0x334>)
   2cd0a:	6893      	ldr	r3, [r2, #8]
   2cd0c:	f043 0301 	orr.w	r3, r3, #1
   2cd10:	6093      	str	r3, [r2, #8]
	dst->a1		= src->utc->a1;
   2cd12:	6823      	ldr	r3, [r4, #0]
	dst->delta_tls	= src->utc->delta_tls;
   2cd14:	f994 000a 	ldrsb.w	r0, [r4, #10]
	dst->a1		= src->utc->a1;
   2cd18:	9326      	str	r3, [sp, #152]	; 0x98
	dst->a0		= src->utc->a0;
   2cd1a:	6863      	ldr	r3, [r4, #4]
	dst->delta_tls	= src->utc->delta_tls;
   2cd1c:	f88d 00a2 	strb.w	r0, [sp, #162]	; 0xa2
	dst->a0		= src->utc->a0;
   2cd20:	9327      	str	r3, [sp, #156]	; 0x9c
	dst->tot	= src->utc->tot;
   2cd22:	7a23      	ldrb	r3, [r4, #8]
   2cd24:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
	dst->wn_t	= src->utc->wn_t;
   2cd28:	7a63      	ldrb	r3, [r4, #9]
   2cd2a:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
	dst->wn_lsf	= src->utc->wn_lsf;
   2cd2e:	7ae3      	ldrb	r3, [r4, #11]
   2cd30:	f88d 30a3 	strb.w	r3, [sp, #163]	; 0xa3
	dst->dn		= src->utc->dn;
   2cd34:	7b23      	ldrb	r3, [r4, #12]
   2cd36:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
	dst->delta_tlsf	= src->utc->delta_tlsf;
   2cd3a:	7b63      	ldrb	r3, [r4, #13]
   2cd3c:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
		nrf_cloud_pgps_set_leap_seconds(utc.delta_tls);
   2cd40:	f001 fee0 	bl	2eb04 <nrf_cloud_pgps_set_leap_seconds>
		return send_to_modem(&utc, sizeof(utc),
   2cd44:	2201      	movs	r2, #1
		return send_to_modem(&location, sizeof(location),
   2cd46:	2110      	movs	r1, #16
   2cd48:	e088      	b.n	2ce5c <nrf_cloud_agps_process+0x2ec>
		processed.sv_mask_ephe |= (1 << (agps_data->ephemeris->sv_id - 1));
   2cd4a:	2301      	movs	r3, #1
   2cd4c:	7822      	ldrb	r2, [r4, #0]
   2cd4e:	4955      	ldr	r1, [pc, #340]	; (2cea4 <nrf_cloud_agps_process+0x334>)
   2cd50:	1e50      	subs	r0, r2, #1
   2cd52:	4083      	lsls	r3, r0
   2cd54:	6808      	ldr	r0, [r1, #0]
   2cd56:	4303      	orrs	r3, r0
   2cd58:	600b      	str	r3, [r1, #0]
		if (agps_data->ephemeris->health ==
   2cd5a:	7863      	ldrb	r3, [r4, #1]
   2cd5c:	2bff      	cmp	r3, #255	; 0xff
   2cd5e:	f000 816d 	beq.w	2d03c <nrf_cloud_agps_process+0x4cc>
	dst->sv_id	= src->ephemeris->sv_id;
   2cd62:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->health	= src->ephemeris->health;
   2cd66:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
	dst->iodc	= src->ephemeris->iodc;
   2cd6a:	78e2      	ldrb	r2, [r4, #3]
   2cd6c:	78a3      	ldrb	r3, [r4, #2]
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2cd6e:	2148      	movs	r1, #72	; 0x48
	dst->iodc	= src->ephemeris->iodc;
   2cd70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cd74:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
	dst->toc	= src->ephemeris->toc;
   2cd78:	7962      	ldrb	r2, [r4, #5]
   2cd7a:	7923      	ldrb	r3, [r4, #4]
   2cd7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cd80:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
	dst->af2	= src->ephemeris->af2;
   2cd84:	79a3      	ldrb	r3, [r4, #6]
   2cd86:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
	dst->af1	= src->ephemeris->af1;
   2cd8a:	7a22      	ldrb	r2, [r4, #8]
   2cd8c:	79e3      	ldrb	r3, [r4, #7]
   2cd8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cd92:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->af0	= src->ephemeris->af0;
   2cd96:	f8d4 3009 	ldr.w	r3, [r4, #9]
   2cd9a:	9329      	str	r3, [sp, #164]	; 0xa4
	dst->tgd	= src->ephemeris->tgd;
   2cd9c:	7b63      	ldrb	r3, [r4, #13]
   2cd9e:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
	dst->ura	= src->ephemeris->ura;
   2cda2:	7ba3      	ldrb	r3, [r4, #14]
   2cda4:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
	dst->fit_int	= src->ephemeris->fit_int;
   2cda8:	7be3      	ldrb	r3, [r4, #15]
   2cdaa:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
	dst->toe	= src->ephemeris->toe;
   2cdae:	7c62      	ldrb	r2, [r4, #17]
   2cdb0:	7c23      	ldrb	r3, [r4, #16]
   2cdb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cdb6:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
	dst->w		= src->ephemeris->w;
   2cdba:	f8d4 3012 	ldr.w	r3, [r4, #18]
   2cdbe:	932c      	str	r3, [sp, #176]	; 0xb0
	dst->delta_n	= src->ephemeris->delta_n;
   2cdc0:	7de2      	ldrb	r2, [r4, #23]
   2cdc2:	7da3      	ldrb	r3, [r4, #22]
   2cdc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cdc8:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
	dst->m0		= src->ephemeris->m0;
   2cdcc:	69a3      	ldr	r3, [r4, #24]
   2cdce:	932e      	str	r3, [sp, #184]	; 0xb8
	dst->omega_dot	= src->ephemeris->omega_dot;
   2cdd0:	69e3      	ldr	r3, [r4, #28]
   2cdd2:	932f      	str	r3, [sp, #188]	; 0xbc
	dst->e		= src->ephemeris->e;
   2cdd4:	6a23      	ldr	r3, [r4, #32]
   2cdd6:	9330      	str	r3, [sp, #192]	; 0xc0
	dst->idot	= src->ephemeris->idot;
   2cdd8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   2cddc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2cde0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cde4:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
	dst->sqrt_a	= src->ephemeris->sqrt_a;
   2cde8:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
   2cdec:	9332      	str	r3, [sp, #200]	; 0xc8
	dst->i0		= src->ephemeris->i0;
   2cdee:	f8d4 302a 	ldr.w	r3, [r4, #42]	; 0x2a
   2cdf2:	9333      	str	r3, [sp, #204]	; 0xcc
	dst->omega0	= src->ephemeris->omega0;
   2cdf4:	f8d4 302e 	ldr.w	r3, [r4, #46]	; 0x2e
   2cdf8:	9334      	str	r3, [sp, #208]	; 0xd0
	dst->crs	= src->ephemeris->crs;
   2cdfa:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   2cdfe:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   2ce02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ce06:	f8ad 30d4 	strh.w	r3, [sp, #212]	; 0xd4
	dst->cis	= src->ephemeris->cis;
   2ce0a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   2ce0e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   2ce12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ce16:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
	dst->cus	= src->ephemeris->cus;
   2ce1a:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   2ce1e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   2ce22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ce26:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
	dst->crc	= src->ephemeris->crc;
   2ce2a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   2ce2e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2ce32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ce36:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
	dst->cic	= src->ephemeris->cic;
   2ce3a:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
   2ce3e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   2ce42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ce46:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
	dst->cuc	= src->ephemeris->cuc;
   2ce4a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   2ce4e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2ce52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2ce56:	2202      	movs	r2, #2
	dst->cuc	= src->ephemeris->cuc;
   2ce58:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2ce5c:	a826      	add	r0, sp, #152	; 0x98
   2ce5e:	f7ff fd9f 	bl	2c9a0 <send_to_modem>
   2ce62:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2ce64:	4658      	mov	r0, fp
   2ce66:	f009 fe07 	bl	36a78 <z_impl_k_mutex_unlock>
		if (err) {
   2ce6a:	2c00      	cmp	r4, #0
   2ce6c:	f43f aee1 	beq.w	2cc32 <nrf_cloud_agps_process+0xc2>
			LOG_ERR("Failed to send data to modem, error: %d", err);
   2ce70:	4622      	mov	r2, r4
   2ce72:	2145      	movs	r1, #69	; 0x45
   2ce74:	480c      	ldr	r0, [pc, #48]	; (2cea8 <nrf_cloud_agps_process+0x338>)
   2ce76:	f00f fe43 	bl	3cb00 <z_log_minimal_printk>
   2ce7a:	4625      	mov	r5, r4
	z_impl_k_sem_give(sem);
   2ce7c:	4805      	ldr	r0, [pc, #20]	; (2ce94 <nrf_cloud_agps_process+0x324>)
   2ce7e:	f009 ff7b 	bl	36d78 <z_impl_k_sem_give>
}
   2ce82:	e694      	b.n	2cbae <nrf_cloud_agps_process+0x3e>
   2ce84:	0004362e 	.word	0x0004362e
   2ce88:	00048a2c 	.word	0x00048a2c
   2ce8c:	00048a9d 	.word	0x00048a9d
   2ce90:	00048ac5 	.word	0x00048ac5
   2ce94:	20015000 	.word	0x20015000
   2ce98:	00048aea 	.word	0x00048aea
   2ce9c:	2001c957 	.word	0x2001c957
   2cea0:	2001a110 	.word	0x2001a110
   2cea4:	2001a104 	.word	0x2001a104
   2cea8:	00048b2f 	.word	0x00048b2f
		processed.sv_mask_alm |= (1 << (agps_data->almanac->sv_id - 1));
   2ceac:	2301      	movs	r3, #1
   2ceae:	7822      	ldrb	r2, [r4, #0]
   2ceb0:	4969      	ldr	r1, [pc, #420]	; (2d058 <nrf_cloud_agps_process+0x4e8>)
   2ceb2:	1e50      	subs	r0, r2, #1
   2ceb4:	4083      	lsls	r3, r0
   2ceb6:	6848      	ldr	r0, [r1, #4]
	dst->sv_id	= src->almanac->sv_id;
   2ceb8:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
		processed.sv_mask_alm |= (1 << (agps_data->almanac->sv_id - 1));
   2cebc:	4303      	orrs	r3, r0
   2cebe:	604b      	str	r3, [r1, #4]
	dst->wn		= src->almanac->wn;
   2cec0:	7863      	ldrb	r3, [r4, #1]
		return send_to_modem(&almanac, sizeof(almanac),
   2cec2:	2120      	movs	r1, #32
	dst->wn		= src->almanac->wn;
   2cec4:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
	dst->toa	= src->almanac->toa;
   2cec8:	78a3      	ldrb	r3, [r4, #2]
   2ceca:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
	dst->ioda	= src->almanac->ioda;
   2cece:	78e3      	ldrb	r3, [r4, #3]
   2ced0:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
	dst->e		= src->almanac->e;
   2ced4:	7962      	ldrb	r2, [r4, #5]
   2ced6:	7923      	ldrb	r3, [r4, #4]
   2ced8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cedc:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
	dst->delta_i	= src->almanac->delta_i;
   2cee0:	79e2      	ldrb	r2, [r4, #7]
   2cee2:	79a3      	ldrb	r3, [r4, #6]
   2cee4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cee8:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
	dst->omega_dot	= src->almanac->omega_dot;
   2ceec:	7a62      	ldrb	r2, [r4, #9]
   2ceee:	7a23      	ldrb	r3, [r4, #8]
   2cef0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cef4:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->sv_health	= src->almanac->sv_health;
   2cef8:	7aa3      	ldrb	r3, [r4, #10]
   2cefa:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
	dst->sqrt_a	= src->almanac->sqrt_a;
   2cefe:	f8d4 300b 	ldr.w	r3, [r4, #11]
   2cf02:	9329      	str	r3, [sp, #164]	; 0xa4
	dst->omega0	= src->almanac->omega0;
   2cf04:	f8d4 300f 	ldr.w	r3, [r4, #15]
   2cf08:	932a      	str	r3, [sp, #168]	; 0xa8
	dst->w		= src->almanac->w;
   2cf0a:	f8d4 3013 	ldr.w	r3, [r4, #19]
   2cf0e:	932b      	str	r3, [sp, #172]	; 0xac
	dst->m0		= src->almanac->m0;
   2cf10:	f8d4 3017 	ldr.w	r3, [r4, #23]
   2cf14:	932c      	str	r3, [sp, #176]	; 0xb0
	dst->af0	= src->almanac->af0;
   2cf16:	7f22      	ldrb	r2, [r4, #28]
   2cf18:	7ee3      	ldrb	r3, [r4, #27]
   2cf1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cf1e:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
	dst->af1	= src->almanac->af1;
   2cf22:	7f63      	ldrb	r3, [r4, #29]
   2cf24:	7fa2      	ldrb	r2, [r4, #30]
   2cf26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cf2a:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
		return send_to_modem(&almanac, sizeof(almanac),
   2cf2e:	2203      	movs	r2, #3
   2cf30:	e794      	b.n	2ce5c <nrf_cloud_agps_process+0x2ec>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST;
   2cf32:	4a49      	ldr	r2, [pc, #292]	; (2d058 <nrf_cloud_agps_process+0x4e8>)
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2cf34:	2108      	movs	r1, #8
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST;
   2cf36:	6893      	ldr	r3, [r2, #8]
   2cf38:	f043 0302 	orr.w	r3, r3, #2
   2cf3c:	6093      	str	r3, [r2, #8]
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2cf3e:	7823      	ldrb	r3, [r4, #0]
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2cf40:	2204      	movs	r2, #4
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2cf42:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
	dst->alpha1	= src->ion_correction.klobuchar->alpha1;
   2cf46:	7863      	ldrb	r3, [r4, #1]
   2cf48:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
	dst->alpha2	= src->ion_correction.klobuchar->alpha2;
   2cf4c:	78a3      	ldrb	r3, [r4, #2]
   2cf4e:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
	dst->alpha3	= src->ion_correction.klobuchar->alpha3;
   2cf52:	78e3      	ldrb	r3, [r4, #3]
   2cf54:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
	dst->beta0	= src->ion_correction.klobuchar->beta0;
   2cf58:	7923      	ldrb	r3, [r4, #4]
   2cf5a:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
	dst->beta1	= src->ion_correction.klobuchar->beta1;
   2cf5e:	7963      	ldrb	r3, [r4, #5]
   2cf60:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   2cf64:	79a3      	ldrb	r3, [r4, #6]
   2cf66:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   2cf6a:	79e3      	ldrb	r3, [r4, #7]
   2cf6c:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2cf70:	e774      	b.n	2ce5c <nrf_cloud_agps_process+0x2ec>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST;
   2cf72:	4a39      	ldr	r2, [pc, #228]	; (2d058 <nrf_cloud_agps_process+0x4e8>)
   2cf74:	6893      	ldr	r3, [r2, #8]
   2cf76:	f043 0308 	orr.w	r3, r3, #8
   2cf7a:	6093      	str	r3, [r2, #8]
	dst->date_day		= src->time_and_tow->date_day;
   2cf7c:	7862      	ldrb	r2, [r4, #1]
   2cf7e:	7823      	ldrb	r3, [r4, #0]
   2cf80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cf84:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
	dst->time_full_s	= src->time_and_tow->time_full_s;
   2cf88:	f8d4 3002 	ldr.w	r3, [r4, #2]
   2cf8c:	9327      	str	r3, [sp, #156]	; 0x9c
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   2cf8e:	79a3      	ldrb	r3, [r4, #6]
   2cf90:	79e2      	ldrb	r2, [r4, #7]
   2cf92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cf96:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->sv_mask		= src->time_and_tow->sv_mask;
   2cf9a:	68a1      	ldr	r1, [r4, #8]
   2cf9c:	9129      	str	r1, [sp, #164]	; 0xa4
	if (src->time_and_tow->sv_mask == 0U) {
   2cf9e:	b931      	cbnz	r1, 2cfae <nrf_cloud_agps_process+0x43e>
		memset(dst->sv_tow, 0, sizeof(dst->sv_tow));
   2cfa0:	2280      	movs	r2, #128	; 0x80
   2cfa2:	a82a      	add	r0, sp, #168	; 0xa8
   2cfa4:	f014 fa46 	bl	41434 <memset>
		return send_to_modem(&time_and_tow, sizeof(time_and_tow),
   2cfa8:	2206      	movs	r2, #6
   2cfaa:	2190      	movs	r1, #144	; 0x90
   2cfac:	e756      	b.n	2ce5c <nrf_cloud_agps_process+0x2ec>
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2cfae:	2300      	movs	r3, #0
   2cfb0:	aa26      	add	r2, sp, #152	; 0x98
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   2cfb2:	f104 000f 	add.w	r0, r4, #15
   2cfb6:	f810 1023 	ldrb.w	r1, [r0, r3, lsl #2]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2cfba:	3204      	adds	r2, #4
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   2cfbc:	7391      	strb	r1, [r2, #14]
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2cfbe:	1c99      	adds	r1, r3, #2
   2cfc0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   2cfc4:	f891 c005 	ldrb.w	ip, [r1, #5]
   2cfc8:	7989      	ldrb	r1, [r1, #6]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2cfca:	3301      	adds	r3, #1
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2cfcc:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2cfd0:	2b20      	cmp	r3, #32
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2cfd2:	8191      	strh	r1, [r2, #12]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2cfd4:	d1ef      	bne.n	2cfb6 <nrf_cloud_agps_process+0x446>
   2cfd6:	e7e7      	b.n	2cfa8 <nrf_cloud_agps_process+0x438>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2cfd8:	4a1f      	ldr	r2, [pc, #124]	; (2d058 <nrf_cloud_agps_process+0x4e8>)
		struct nrf_modem_gnss_agps_data_location location = {0};
   2cfda:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2cfde:	6893      	ldr	r3, [r2, #8]
	dst->latitude		= src->location->latitude;
   2cfe0:	6820      	ldr	r0, [r4, #0]
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2cfe2:	f043 0310 	orr.w	r3, r3, #16
   2cfe6:	6093      	str	r3, [r2, #8]
	dst->latitude		= src->location->latitude;
   2cfe8:	9026      	str	r0, [sp, #152]	; 0x98
	dst->longitude		= src->location->longitude;
   2cfea:	6861      	ldr	r1, [r4, #4]
   2cfec:	9127      	str	r1, [sp, #156]	; 0x9c
	dst->altitude		= src->location->altitude;
   2cfee:	7a62      	ldrb	r2, [r4, #9]
   2cff0:	7a23      	ldrb	r3, [r4, #8]
   2cff2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cff6:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->unc_semimajor	= src->location->unc_semimajor;
   2cffa:	7aa3      	ldrb	r3, [r4, #10]
   2cffc:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
	dst->unc_semiminor	= src->location->unc_semiminor;
   2d000:	7ae3      	ldrb	r3, [r4, #11]
   2d002:	f88d 30a3 	strb.w	r3, [sp, #163]	; 0xa3
	dst->orientation_major	= src->location->orientation_major;
   2d006:	7b23      	ldrb	r3, [r4, #12]
   2d008:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
	dst->unc_altitude	= src->location->unc_altitude;
   2d00c:	7b63      	ldrb	r3, [r4, #13]
   2d00e:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
	dst->confidence		= src->location->confidence;
   2d012:	7ba3      	ldrb	r3, [r4, #14]
   2d014:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
		nrf_cloud_pgps_set_location_normalized(location.latitude,
   2d018:	f001 fdd6 	bl	2ebc8 <nrf_cloud_pgps_set_location_normalized>
		return send_to_modem(&location, sizeof(location),
   2d01c:	2207      	movs	r2, #7
   2d01e:	e692      	b.n	2cd46 <nrf_cloud_agps_process+0x1d6>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   2d020:	4a0d      	ldr	r2, [pc, #52]	; (2d058 <nrf_cloud_agps_process+0x4e8>)
		return send_to_modem(agps_data->integrity,
   2d022:	2104      	movs	r1, #4
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   2d024:	6893      	ldr	r3, [r2, #8]
		return send_to_modem(agps_data->integrity,
   2d026:	4620      	mov	r0, r4
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   2d028:	f043 0320 	orr.w	r3, r3, #32
   2d02c:	6093      	str	r3, [r2, #8]
		return send_to_modem(agps_data->integrity,
   2d02e:	2208      	movs	r2, #8
   2d030:	e715      	b.n	2ce5e <nrf_cloud_agps_process+0x2ee>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   2d032:	4642      	mov	r2, r8
   2d034:	2157      	movs	r1, #87	; 0x57
   2d036:	4809      	ldr	r0, [pc, #36]	; (2d05c <nrf_cloud_agps_process+0x4ec>)
   2d038:	f00f fd62 	bl	3cb00 <z_log_minimal_printk>
	return 0;
   2d03c:	2400      	movs	r4, #0
   2d03e:	e711      	b.n	2ce64 <nrf_cloud_agps_process+0x2f4>
	uint32_t sv_mask = 0;
   2d040:	4681      	mov	r9, r0
	if (elements_left_to_process == 0) {
   2d042:	f8df a01c 	ldr.w	sl, [pc, #28]	; 2d060 <nrf_cloud_agps_process+0x4f0>
	return z_impl_k_mutex_lock(mutex, timeout);
   2d046:	f8df b01c 	ldr.w	fp, [pc, #28]	; 2d064 <nrf_cloud_agps_process+0x4f4>
   2d04a:	e5f2      	b.n	2cc32 <nrf_cloud_agps_process+0xc2>
		return -EINVAL;
   2d04c:	f06f 0515 	mvn.w	r5, #21
   2d050:	e5ad      	b.n	2cbae <nrf_cloud_agps_process+0x3e>
		return -ENOMSG;
   2d052:	f06f 0522 	mvn.w	r5, #34	; 0x22
   2d056:	e5aa      	b.n	2cbae <nrf_cloud_agps_process+0x3e>
   2d058:	2001a104 	.word	0x2001a104
   2d05c:	00048b0f 	.word	0x00048b0f
   2d060:	2001a590 	.word	0x2001a590
   2d064:	20014f68 	.word	0x20014f68

0002d068 <nrf_cloud_agps_processed>:

void nrf_cloud_agps_processed(struct nrf_modem_gnss_agps_data_frame *received_elements)
{
   2d068:	b510      	push	{r4, lr}
	if (received_elements) {
   2d06a:	4604      	mov	r4, r0
   2d06c:	b188      	cbz	r0, 2d092 <nrf_cloud_agps_processed+0x2a>
   2d06e:	f04f 32ff 	mov.w	r2, #4294967295
   2d072:	f04f 33ff 	mov.w	r3, #4294967295
   2d076:	4807      	ldr	r0, [pc, #28]	; (2d094 <nrf_cloud_agps_processed+0x2c>)
   2d078:	f009 fc2c 	bl	368d4 <z_impl_k_mutex_lock>
   2d07c:	4b06      	ldr	r3, [pc, #24]	; (2d098 <nrf_cloud_agps_processed+0x30>)
   2d07e:	cb03      	ldmia	r3!, {r0, r1}
   2d080:	6020      	str	r0, [r4, #0]
   2d082:	6061      	str	r1, [r4, #4]
   2d084:	6818      	ldr	r0, [r3, #0]
   2d086:	60a0      	str	r0, [r4, #8]
	return z_impl_k_mutex_unlock(mutex);
   2d088:	4802      	ldr	r0, [pc, #8]	; (2d094 <nrf_cloud_agps_processed+0x2c>)
		k_mutex_lock(&processed_lock, K_FOREVER);
		memcpy(received_elements, &processed, sizeof(*received_elements));
		k_mutex_unlock(&processed_lock);
	}
}
   2d08a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d08e:	f009 bcf3 	b.w	36a78 <z_impl_k_mutex_unlock>
   2d092:	bd10      	pop	{r4, pc}
   2d094:	20014f68 	.word	0x20014f68
   2d098:	2001a104 	.word	0x2001a104

0002d09c <agps_print>:
}

void agps_print(uint16_t type, void *data)
{

	switch (type) {
   2d09c:	3801      	subs	r0, #1
{
   2d09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d0a2:	460c      	mov	r4, r1
	switch (type) {
   2d0a4:	2807      	cmp	r0, #7
   2d0a6:	f200 816b 	bhi.w	2d380 <agps_print+0x2e4>
   2d0aa:	e8df f010 	tbh	[pc, r0, lsl #1]
   2d0ae:	0008      	.short	0x0008
   2d0b0:	00a50030 	.word	0x00a50030
   2d0b4:	010d00e3 	.word	0x010d00e3
   2d0b8:	01400112 	.word	0x01400112
   2d0bc:	0163      	.short	0x0163
	printk("utc:\n");
   2d0be:	48b1      	ldr	r0, [pc, #708]	; (2d384 <agps_print+0x2e8>)
   2d0c0:	f00f fb01 	bl	3c6c6 <printk>
	printk("\ta1: %d\n", data->a1);
   2d0c4:	6821      	ldr	r1, [r4, #0]
   2d0c6:	48b0      	ldr	r0, [pc, #704]	; (2d388 <agps_print+0x2ec>)
   2d0c8:	f00f fafd 	bl	3c6c6 <printk>
	printk("\ta0: %d\n", data->a0);
   2d0cc:	6861      	ldr	r1, [r4, #4]
   2d0ce:	48af      	ldr	r0, [pc, #700]	; (2d38c <agps_print+0x2f0>)
   2d0d0:	f00f faf9 	bl	3c6c6 <printk>
	printk("\ttot: %d\n", data->tot);
   2d0d4:	7a21      	ldrb	r1, [r4, #8]
   2d0d6:	48ae      	ldr	r0, [pc, #696]	; (2d390 <agps_print+0x2f4>)
   2d0d8:	f00f faf5 	bl	3c6c6 <printk>
	printk("\twn_t: %d\n", data->wn_t);
   2d0dc:	7a61      	ldrb	r1, [r4, #9]
   2d0de:	48ad      	ldr	r0, [pc, #692]	; (2d394 <agps_print+0x2f8>)
   2d0e0:	f00f faf1 	bl	3c6c6 <printk>
	printk("\tdelta_tls: %d\n", data->delta_tls);
   2d0e4:	f994 100a 	ldrsb.w	r1, [r4, #10]
   2d0e8:	48ab      	ldr	r0, [pc, #684]	; (2d398 <agps_print+0x2fc>)
   2d0ea:	f00f faec 	bl	3c6c6 <printk>
	printk("\twn_lsf: %d\n", data->wn_lsf);
   2d0ee:	7ae1      	ldrb	r1, [r4, #11]
   2d0f0:	48aa      	ldr	r0, [pc, #680]	; (2d39c <agps_print+0x300>)
   2d0f2:	f00f fae8 	bl	3c6c6 <printk>
	printk("\tdn: %d\n", data->dn);
   2d0f6:	f994 100c 	ldrsb.w	r1, [r4, #12]
   2d0fa:	48a9      	ldr	r0, [pc, #676]	; (2d3a0 <agps_print+0x304>)
   2d0fc:	f00f fae3 	bl	3c6c6 <printk>
	printk("\tdelta_tlsf: %d\n", data->delta_tlsf);
   2d100:	f994 100d 	ldrsb.w	r1, [r4, #13]
   2d104:	48a7      	ldr	r0, [pc, #668]	; (2d3a4 <agps_print+0x308>)
	}
	default:
		printk("Unknown AGPS data type\n");
		break;
	}
}
   2d106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printk("\tcuc: %d\n", data->cuc);
   2d10a:	f00f badc 	b.w	3c6c6 <printk>
	printk("ephemeris:\n");
   2d10e:	48a6      	ldr	r0, [pc, #664]	; (2d3a8 <agps_print+0x30c>)
   2d110:	f00f fad9 	bl	3c6c6 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2d114:	7821      	ldrb	r1, [r4, #0]
   2d116:	48a5      	ldr	r0, [pc, #660]	; (2d3ac <agps_print+0x310>)
   2d118:	f00f fad5 	bl	3c6c6 <printk>
	printk("\thealth: %d\n", data->health);
   2d11c:	7861      	ldrb	r1, [r4, #1]
   2d11e:	48a4      	ldr	r0, [pc, #656]	; (2d3b0 <agps_print+0x314>)
   2d120:	f00f fad1 	bl	3c6c6 <printk>
	printk("\tiodc: %d\n", data->iodc);
   2d124:	8861      	ldrh	r1, [r4, #2]
   2d126:	48a3      	ldr	r0, [pc, #652]	; (2d3b4 <agps_print+0x318>)
   2d128:	f00f facd 	bl	3c6c6 <printk>
	printk("\ttoc: %d\n", data->toc);
   2d12c:	88a1      	ldrh	r1, [r4, #4]
   2d12e:	48a2      	ldr	r0, [pc, #648]	; (2d3b8 <agps_print+0x31c>)
   2d130:	f00f fac9 	bl	3c6c6 <printk>
	printk("\taf2: %d\n", data->af2);
   2d134:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2d138:	48a0      	ldr	r0, [pc, #640]	; (2d3bc <agps_print+0x320>)
   2d13a:	f00f fac4 	bl	3c6c6 <printk>
	printk("\taf1: %d\n", data->af1);
   2d13e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2d142:	489f      	ldr	r0, [pc, #636]	; (2d3c0 <agps_print+0x324>)
   2d144:	f00f fabf 	bl	3c6c6 <printk>
	printk("\taf0: %d\n", data->af0);
   2d148:	68e1      	ldr	r1, [r4, #12]
   2d14a:	489e      	ldr	r0, [pc, #632]	; (2d3c4 <agps_print+0x328>)
   2d14c:	f00f fabb 	bl	3c6c6 <printk>
	printk("\ttgd: %d\n", data->tgd);
   2d150:	f994 1010 	ldrsb.w	r1, [r4, #16]
   2d154:	489c      	ldr	r0, [pc, #624]	; (2d3c8 <agps_print+0x32c>)
   2d156:	f00f fab6 	bl	3c6c6 <printk>
	printk("\tura: %d\n", data->ura);
   2d15a:	7c61      	ldrb	r1, [r4, #17]
   2d15c:	489b      	ldr	r0, [pc, #620]	; (2d3cc <agps_print+0x330>)
   2d15e:	f00f fab2 	bl	3c6c6 <printk>
	printk("\tfit_int: %d\n", data->fit_int);
   2d162:	7ca1      	ldrb	r1, [r4, #18]
   2d164:	489a      	ldr	r0, [pc, #616]	; (2d3d0 <agps_print+0x334>)
   2d166:	f00f faae 	bl	3c6c6 <printk>
	printk("\ttoe: %d\n", data->toe);
   2d16a:	8aa1      	ldrh	r1, [r4, #20]
   2d16c:	4899      	ldr	r0, [pc, #612]	; (2d3d4 <agps_print+0x338>)
   2d16e:	f00f faaa 	bl	3c6c6 <printk>
	printk("\tw: %d\n", data->w);
   2d172:	69a1      	ldr	r1, [r4, #24]
   2d174:	4898      	ldr	r0, [pc, #608]	; (2d3d8 <agps_print+0x33c>)
   2d176:	f00f faa6 	bl	3c6c6 <printk>
	printk("\tdelta_n: %d\n", data->delta_n);
   2d17a:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2d17e:	4897      	ldr	r0, [pc, #604]	; (2d3dc <agps_print+0x340>)
   2d180:	f00f faa1 	bl	3c6c6 <printk>
	printk("\tm0: %d\n", data->m0);
   2d184:	6a21      	ldr	r1, [r4, #32]
   2d186:	4896      	ldr	r0, [pc, #600]	; (2d3e0 <agps_print+0x344>)
   2d188:	f00f fa9d 	bl	3c6c6 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2d18c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2d18e:	4895      	ldr	r0, [pc, #596]	; (2d3e4 <agps_print+0x348>)
   2d190:	f00f fa99 	bl	3c6c6 <printk>
	printk("\te: %d\n", data->e);
   2d194:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2d196:	4894      	ldr	r0, [pc, #592]	; (2d3e8 <agps_print+0x34c>)
   2d198:	f00f fa95 	bl	3c6c6 <printk>
	printk("\tidot: %d\n", data->idot);
   2d19c:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   2d1a0:	4892      	ldr	r0, [pc, #584]	; (2d3ec <agps_print+0x350>)
   2d1a2:	f00f fa90 	bl	3c6c6 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2d1a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2d1a8:	4891      	ldr	r0, [pc, #580]	; (2d3f0 <agps_print+0x354>)
   2d1aa:	f00f fa8c 	bl	3c6c6 <printk>
	printk("\ti0: %d\n", data->i0);
   2d1ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2d1b0:	4890      	ldr	r0, [pc, #576]	; (2d3f4 <agps_print+0x358>)
   2d1b2:	f00f fa88 	bl	3c6c6 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2d1b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2d1b8:	488f      	ldr	r0, [pc, #572]	; (2d3f8 <agps_print+0x35c>)
   2d1ba:	f00f fa84 	bl	3c6c6 <printk>
	printk("\tcrs: %d\n", data->crs);
   2d1be:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
   2d1c2:	488e      	ldr	r0, [pc, #568]	; (2d3fc <agps_print+0x360>)
   2d1c4:	f00f fa7f 	bl	3c6c6 <printk>
	printk("\tcis: %d\n", data->cis);
   2d1c8:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
   2d1cc:	488c      	ldr	r0, [pc, #560]	; (2d400 <agps_print+0x364>)
   2d1ce:	f00f fa7a 	bl	3c6c6 <printk>
	printk("\tcus: %d\n", data->cus);
   2d1d2:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
   2d1d6:	488b      	ldr	r0, [pc, #556]	; (2d404 <agps_print+0x368>)
   2d1d8:	f00f fa75 	bl	3c6c6 <printk>
	printk("\tcrc: %d\n", data->crc);
   2d1dc:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
   2d1e0:	4889      	ldr	r0, [pc, #548]	; (2d408 <agps_print+0x36c>)
   2d1e2:	f00f fa70 	bl	3c6c6 <printk>
	printk("\tcic: %d\n", data->cic);
   2d1e6:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
   2d1ea:	4888      	ldr	r0, [pc, #544]	; (2d40c <agps_print+0x370>)
   2d1ec:	f00f fa6b 	bl	3c6c6 <printk>
	printk("\tcuc: %d\n", data->cuc);
   2d1f0:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
   2d1f4:	4886      	ldr	r0, [pc, #536]	; (2d410 <agps_print+0x374>)
   2d1f6:	e786      	b.n	2d106 <agps_print+0x6a>
	printk("almanac\n");
   2d1f8:	4886      	ldr	r0, [pc, #536]	; (2d414 <agps_print+0x378>)
   2d1fa:	f00f fa64 	bl	3c6c6 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2d1fe:	7821      	ldrb	r1, [r4, #0]
   2d200:	486a      	ldr	r0, [pc, #424]	; (2d3ac <agps_print+0x310>)
   2d202:	f00f fa60 	bl	3c6c6 <printk>
	printk("\twn: %d\n", data->wn);
   2d206:	7861      	ldrb	r1, [r4, #1]
   2d208:	4883      	ldr	r0, [pc, #524]	; (2d418 <agps_print+0x37c>)
   2d20a:	f00f fa5c 	bl	3c6c6 <printk>
	printk("\ttoa: %d\n", data->toa);
   2d20e:	78a1      	ldrb	r1, [r4, #2]
   2d210:	4882      	ldr	r0, [pc, #520]	; (2d41c <agps_print+0x380>)
   2d212:	f00f fa58 	bl	3c6c6 <printk>
	printk("\tioda: %d\n", data->ioda);
   2d216:	78e1      	ldrb	r1, [r4, #3]
   2d218:	4881      	ldr	r0, [pc, #516]	; (2d420 <agps_print+0x384>)
   2d21a:	f00f fa54 	bl	3c6c6 <printk>
	printk("\te: %d\n", data->e);
   2d21e:	88a1      	ldrh	r1, [r4, #4]
   2d220:	4871      	ldr	r0, [pc, #452]	; (2d3e8 <agps_print+0x34c>)
   2d222:	f00f fa50 	bl	3c6c6 <printk>
	printk("\tdelta_i: %d\n", data->delta_i);
   2d226:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   2d22a:	487e      	ldr	r0, [pc, #504]	; (2d424 <agps_print+0x388>)
   2d22c:	f00f fa4b 	bl	3c6c6 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2d230:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2d234:	486b      	ldr	r0, [pc, #428]	; (2d3e4 <agps_print+0x348>)
   2d236:	f00f fa46 	bl	3c6c6 <printk>
	printk("\tsv_health: %d\n", data->sv_health);
   2d23a:	7aa1      	ldrb	r1, [r4, #10]
   2d23c:	487a      	ldr	r0, [pc, #488]	; (2d428 <agps_print+0x38c>)
   2d23e:	f00f fa42 	bl	3c6c6 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2d242:	68e1      	ldr	r1, [r4, #12]
   2d244:	486a      	ldr	r0, [pc, #424]	; (2d3f0 <agps_print+0x354>)
   2d246:	f00f fa3e 	bl	3c6c6 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2d24a:	6921      	ldr	r1, [r4, #16]
   2d24c:	486a      	ldr	r0, [pc, #424]	; (2d3f8 <agps_print+0x35c>)
   2d24e:	f00f fa3a 	bl	3c6c6 <printk>
	printk("\tw: %d\n", data->w);
   2d252:	6961      	ldr	r1, [r4, #20]
   2d254:	4860      	ldr	r0, [pc, #384]	; (2d3d8 <agps_print+0x33c>)
   2d256:	f00f fa36 	bl	3c6c6 <printk>
	printk("\tm0: %d\n", data->m0);
   2d25a:	69a1      	ldr	r1, [r4, #24]
   2d25c:	4860      	ldr	r0, [pc, #384]	; (2d3e0 <agps_print+0x344>)
   2d25e:	f00f fa32 	bl	3c6c6 <printk>
	printk("\taf0: %d\n", data->af0);
   2d262:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2d266:	4857      	ldr	r0, [pc, #348]	; (2d3c4 <agps_print+0x328>)
   2d268:	f00f fa2d 	bl	3c6c6 <printk>
	printk("\taf1: %d\n", data->af1);
   2d26c:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
   2d270:	4853      	ldr	r0, [pc, #332]	; (2d3c0 <agps_print+0x324>)
   2d272:	e748      	b.n	2d106 <agps_print+0x6a>
	printk("klobuchar\n");
   2d274:	486d      	ldr	r0, [pc, #436]	; (2d42c <agps_print+0x390>)
   2d276:	f00f fa26 	bl	3c6c6 <printk>
	printk("\talpha0: %d\n", data->alpha0);
   2d27a:	f994 1000 	ldrsb.w	r1, [r4]
   2d27e:	486c      	ldr	r0, [pc, #432]	; (2d430 <agps_print+0x394>)
   2d280:	f00f fa21 	bl	3c6c6 <printk>
	printk("\talpha1: %d\n", data->alpha1);
   2d284:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2d288:	486a      	ldr	r0, [pc, #424]	; (2d434 <agps_print+0x398>)
   2d28a:	f00f fa1c 	bl	3c6c6 <printk>
	printk("\talpha2: %d\n", data->alpha2);
   2d28e:	f994 1002 	ldrsb.w	r1, [r4, #2]
   2d292:	4869      	ldr	r0, [pc, #420]	; (2d438 <agps_print+0x39c>)
   2d294:	f00f fa17 	bl	3c6c6 <printk>
	printk("\talpha3: %d\n", data->alpha3);
   2d298:	f994 1003 	ldrsb.w	r1, [r4, #3]
   2d29c:	4867      	ldr	r0, [pc, #412]	; (2d43c <agps_print+0x3a0>)
   2d29e:	f00f fa12 	bl	3c6c6 <printk>
	printk("\tbeta0: %d\n", data->beta0);
   2d2a2:	f994 1004 	ldrsb.w	r1, [r4, #4]
   2d2a6:	4866      	ldr	r0, [pc, #408]	; (2d440 <agps_print+0x3a4>)
   2d2a8:	f00f fa0d 	bl	3c6c6 <printk>
	printk("\tbeta1: %d\n", data->beta1);
   2d2ac:	f994 1005 	ldrsb.w	r1, [r4, #5]
   2d2b0:	4864      	ldr	r0, [pc, #400]	; (2d444 <agps_print+0x3a8>)
   2d2b2:	f00f fa08 	bl	3c6c6 <printk>
	printk("\tbeta2: %d\n", data->beta2);
   2d2b6:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2d2ba:	4863      	ldr	r0, [pc, #396]	; (2d448 <agps_print+0x3ac>)
   2d2bc:	f00f fa03 	bl	3c6c6 <printk>
	printk("\tbeta3: %d\n", data->beta3);
   2d2c0:	f994 1007 	ldrsb.w	r1, [r4, #7]
   2d2c4:	4861      	ldr	r0, [pc, #388]	; (2d44c <agps_print+0x3b0>)
   2d2c6:	e71e      	b.n	2d106 <agps_print+0x6a>
		printk("nequick unhandled\n");
   2d2c8:	4861      	ldr	r0, [pc, #388]	; (2d450 <agps_print+0x3b4>)
}
   2d2ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Unknown AGPS data type\n");
   2d2ce:	f00f b9fa 	b.w	3c6c6 <printk>
	printk("clock_and_tows\n");
   2d2d2:	4860      	ldr	r0, [pc, #384]	; (2d454 <agps_print+0x3b8>)
   2d2d4:	f00f f9f7 	bl	3c6c6 <printk>
	printk("\tdate_day: %d\n", data->date_day);
   2d2d8:	8821      	ldrh	r1, [r4, #0]
   2d2da:	485f      	ldr	r0, [pc, #380]	; (2d458 <agps_print+0x3bc>)
   2d2dc:	f00f f9f3 	bl	3c6c6 <printk>
	printk("\ttime_full_s: %d\n", data->time_full_s);
   2d2e0:	6861      	ldr	r1, [r4, #4]
   2d2e2:	485e      	ldr	r0, [pc, #376]	; (2d45c <agps_print+0x3c0>)
   2d2e4:	f00f f9ef 	bl	3c6c6 <printk>
	printk("\ttime_frac_ms: %d\n", data->time_frac_ms);
   2d2e8:	8921      	ldrh	r1, [r4, #8]
   2d2ea:	485d      	ldr	r0, [pc, #372]	; (2d460 <agps_print+0x3c4>)
   2d2ec:	f00f f9eb 	bl	3c6c6 <printk>
	printk("\tsv_mask: 0x%08x\n", data->sv_mask);
   2d2f0:	68e1      	ldr	r1, [r4, #12]
   2d2f2:	485c      	ldr	r0, [pc, #368]	; (2d464 <agps_print+0x3c8>)
   2d2f4:	f00f f9e7 	bl	3c6c6 <printk>
	printk("\tsv_tow\n");
   2d2f8:	485b      	ldr	r0, [pc, #364]	; (2d468 <agps_print+0x3cc>)
   2d2fa:	f00f f9e4 	bl	3c6c6 <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   2d2fe:	2500      	movs	r5, #0
		printk("\t\tsv_tow[%d]\n", i);
   2d300:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 2d4a4 <agps_print+0x408>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2d304:	4f59      	ldr	r7, [pc, #356]	; (2d46c <agps_print+0x3d0>)
		printk("\t\t\tflags: 0x%02x\n", data->sv_tow[i].flags);
   2d306:	4e5a      	ldr	r6, [pc, #360]	; (2d470 <agps_print+0x3d4>)
		printk("\t\tsv_tow[%d]\n", i);
   2d308:	4629      	mov	r1, r5
   2d30a:	4640      	mov	r0, r8
   2d30c:	f00f f9db 	bl	3c6c6 <printk>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2d310:	8a21      	ldrh	r1, [r4, #16]
   2d312:	4638      	mov	r0, r7
   2d314:	f00f f9d7 	bl	3c6c6 <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   2d318:	3501      	adds	r5, #1
		printk("\t\t\tflags: 0x%02x\n", data->sv_tow[i].flags);
   2d31a:	7ca1      	ldrb	r1, [r4, #18]
   2d31c:	4630      	mov	r0, r6
   2d31e:	f00f f9d2 	bl	3c6c6 <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   2d322:	2d20      	cmp	r5, #32
   2d324:	f104 0404 	add.w	r4, r4, #4
   2d328:	d1ee      	bne.n	2d308 <agps_print+0x26c>
}
   2d32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("location\n");
   2d32e:	4851      	ldr	r0, [pc, #324]	; (2d474 <agps_print+0x3d8>)
   2d330:	f00f f9c9 	bl	3c6c6 <printk>
	printk("\tlatitude: %d\n", data->latitude);
   2d334:	6821      	ldr	r1, [r4, #0]
   2d336:	4850      	ldr	r0, [pc, #320]	; (2d478 <agps_print+0x3dc>)
   2d338:	f00f f9c5 	bl	3c6c6 <printk>
	printk("\tlongitude: %d\n", data->longitude);
   2d33c:	6861      	ldr	r1, [r4, #4]
   2d33e:	484f      	ldr	r0, [pc, #316]	; (2d47c <agps_print+0x3e0>)
   2d340:	f00f f9c1 	bl	3c6c6 <printk>
	printk("\taltitude: %d\n", data->altitude);
   2d344:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2d348:	484d      	ldr	r0, [pc, #308]	; (2d480 <agps_print+0x3e4>)
   2d34a:	f00f f9bc 	bl	3c6c6 <printk>
	printk("\tunc_semimajor: %d\n", data->unc_semimajor);
   2d34e:	7aa1      	ldrb	r1, [r4, #10]
   2d350:	484c      	ldr	r0, [pc, #304]	; (2d484 <agps_print+0x3e8>)
   2d352:	f00f f9b8 	bl	3c6c6 <printk>
	printk("\tunc_semiminor: %d\n", data->unc_semiminor);
   2d356:	7ae1      	ldrb	r1, [r4, #11]
   2d358:	484b      	ldr	r0, [pc, #300]	; (2d488 <agps_print+0x3ec>)
   2d35a:	f00f f9b4 	bl	3c6c6 <printk>
	printk("\torientation_major: %d\n", data->orientation_major);
   2d35e:	7b21      	ldrb	r1, [r4, #12]
   2d360:	484a      	ldr	r0, [pc, #296]	; (2d48c <agps_print+0x3f0>)
   2d362:	f00f f9b0 	bl	3c6c6 <printk>
	printk("\tunc_altitude: %d\n", data->unc_altitude);
   2d366:	7b61      	ldrb	r1, [r4, #13]
   2d368:	4849      	ldr	r0, [pc, #292]	; (2d490 <agps_print+0x3f4>)
   2d36a:	f00f f9ac 	bl	3c6c6 <printk>
	printk("\tconfidence: %d\n", data->confidence);
   2d36e:	7ba1      	ldrb	r1, [r4, #14]
   2d370:	4848      	ldr	r0, [pc, #288]	; (2d494 <agps_print+0x3f8>)
   2d372:	e6c8      	b.n	2d106 <agps_print+0x6a>
	printk("integrity\n");
   2d374:	4848      	ldr	r0, [pc, #288]	; (2d498 <agps_print+0x3fc>)
   2d376:	f00f f9a6 	bl	3c6c6 <printk>
	printk("\tintegrity_mask: %d\n", data->integrity_mask);
   2d37a:	6821      	ldr	r1, [r4, #0]
   2d37c:	4847      	ldr	r0, [pc, #284]	; (2d49c <agps_print+0x400>)
   2d37e:	e6c2      	b.n	2d106 <agps_print+0x6a>
		printk("Unknown AGPS data type\n");
   2d380:	4847      	ldr	r0, [pc, #284]	; (2d4a0 <agps_print+0x404>)
   2d382:	e7a2      	b.n	2d2ca <agps_print+0x22e>
   2d384:	00048b6b 	.word	0x00048b6b
   2d388:	00048b71 	.word	0x00048b71
   2d38c:	00048b7a 	.word	0x00048b7a
   2d390:	00048b83 	.word	0x00048b83
   2d394:	00048b8d 	.word	0x00048b8d
   2d398:	00048b98 	.word	0x00048b98
   2d39c:	00048ba8 	.word	0x00048ba8
   2d3a0:	00048bb5 	.word	0x00048bb5
   2d3a4:	00048bbe 	.word	0x00048bbe
   2d3a8:	00048bcf 	.word	0x00048bcf
   2d3ac:	00048bdb 	.word	0x00048bdb
   2d3b0:	00048be7 	.word	0x00048be7
   2d3b4:	00048bf4 	.word	0x00048bf4
   2d3b8:	00048bff 	.word	0x00048bff
   2d3bc:	00048c09 	.word	0x00048c09
   2d3c0:	00048c13 	.word	0x00048c13
   2d3c4:	00048c1d 	.word	0x00048c1d
   2d3c8:	00048c27 	.word	0x00048c27
   2d3cc:	00048c31 	.word	0x00048c31
   2d3d0:	00048c3b 	.word	0x00048c3b
   2d3d4:	00048c49 	.word	0x00048c49
   2d3d8:	00048c53 	.word	0x00048c53
   2d3dc:	00048c5b 	.word	0x00048c5b
   2d3e0:	00048c69 	.word	0x00048c69
   2d3e4:	00048c72 	.word	0x00048c72
   2d3e8:	00048c82 	.word	0x00048c82
   2d3ec:	00048c8a 	.word	0x00048c8a
   2d3f0:	00048c95 	.word	0x00048c95
   2d3f4:	00048ca2 	.word	0x00048ca2
   2d3f8:	00048cab 	.word	0x00048cab
   2d3fc:	00048cb8 	.word	0x00048cb8
   2d400:	00048cc2 	.word	0x00048cc2
   2d404:	00048ccc 	.word	0x00048ccc
   2d408:	00048cd6 	.word	0x00048cd6
   2d40c:	00048ce0 	.word	0x00048ce0
   2d410:	00048cea 	.word	0x00048cea
   2d414:	00048cf4 	.word	0x00048cf4
   2d418:	00048cfd 	.word	0x00048cfd
   2d41c:	00048d06 	.word	0x00048d06
   2d420:	00048d10 	.word	0x00048d10
   2d424:	00048d1b 	.word	0x00048d1b
   2d428:	00048d29 	.word	0x00048d29
   2d42c:	00048d39 	.word	0x00048d39
   2d430:	00048d44 	.word	0x00048d44
   2d434:	00048d51 	.word	0x00048d51
   2d438:	00048d5e 	.word	0x00048d5e
   2d43c:	00048d6b 	.word	0x00048d6b
   2d440:	00048d78 	.word	0x00048d78
   2d444:	00048d84 	.word	0x00048d84
   2d448:	00048d90 	.word	0x00048d90
   2d44c:	00048d9c 	.word	0x00048d9c
   2d450:	00048da8 	.word	0x00048da8
   2d454:	00048dbb 	.word	0x00048dbb
   2d458:	00048dcb 	.word	0x00048dcb
   2d45c:	00048dda 	.word	0x00048dda
   2d460:	00048dec 	.word	0x00048dec
   2d464:	00048dff 	.word	0x00048dff
   2d468:	00048e11 	.word	0x00048e11
   2d46c:	00048e28 	.word	0x00048e28
   2d470:	00048e34 	.word	0x00048e34
   2d474:	00046cd3 	.word	0x00046cd3
   2d478:	00048e46 	.word	0x00048e46
   2d47c:	00048e55 	.word	0x00048e55
   2d480:	00048e65 	.word	0x00048e65
   2d484:	00048e74 	.word	0x00048e74
   2d488:	00048e88 	.word	0x00048e88
   2d48c:	00048e9c 	.word	0x00048e9c
   2d490:	00048eb4 	.word	0x00048eb4
   2d494:	00048ec7 	.word	0x00048ec7
   2d498:	00048ed8 	.word	0x00048ed8
   2d49c:	00048ee3 	.word	0x00048ee3
   2d4a0:	00048ef8 	.word	0x00048ef8
   2d4a4:	00048e1a 	.word	0x00048e1a

0002d4a8 <log_pgps_header>:
		return -EINVAL;
	}
}

static void log_pgps_header(const char *msg, const struct nrf_cloud_pgps_header *header)
{
   2d4a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2d4aa:	460c      	mov	r4, r1
	LOG_INF("%sSchema version:%u, type:%u, num:%u, "
   2d4ac:	888b      	ldrh	r3, [r1, #4]
{
   2d4ae:	4602      	mov	r2, r0
	LOG_INF("%sSchema version:%u, type:%u, num:%u, "
   2d4b0:	9302      	str	r3, [sp, #8]
   2d4b2:	884b      	ldrh	r3, [r1, #2]
   2d4b4:	4809      	ldr	r0, [pc, #36]	; (2d4dc <log_pgps_header+0x34>)
   2d4b6:	9301      	str	r3, [sp, #4]
   2d4b8:	784b      	ldrb	r3, [r1, #1]
   2d4ba:	9300      	str	r3, [sp, #0]
   2d4bc:	780b      	ldrb	r3, [r1, #0]
   2d4be:	2149      	movs	r1, #73	; 0x49
   2d4c0:	f00f fb1e 	bl	3cb00 <z_log_minimal_printk>
		"count:%u", msg ? msg : "",
		header->schema_version & 0xFFU, header->array_type & 0xFFU,
		header->num_items, header->prediction_count);
	LOG_INF("  size:%u, period (minutes):%u, GPS day:%u, GPS time:%u",
   2d4c4:	68e3      	ldr	r3, [r4, #12]
   2d4c6:	2149      	movs	r1, #73	; 0x49
   2d4c8:	9301      	str	r3, [sp, #4]
   2d4ca:	8963      	ldrh	r3, [r4, #10]
   2d4cc:	88e2      	ldrh	r2, [r4, #6]
   2d4ce:	9300      	str	r3, [sp, #0]
   2d4d0:	4803      	ldr	r0, [pc, #12]	; (2d4e0 <log_pgps_header+0x38>)
   2d4d2:	8923      	ldrh	r3, [r4, #8]
   2d4d4:	f00f fb14 	bl	3cb00 <z_log_minimal_printk>
		header->prediction_size,
		header->prediction_period_min,
		header->gps_day & 0xFFFFU, header->gps_time_of_day);
}
   2d4d8:	b004      	add	sp, #16
   2d4da:	bd10      	pop	{r4, pc}
   2d4dc:	00048f10 	.word	0x00048f10
   2d4e0:	00048f44 	.word	0x00048f44

0002d4e4 <validate_pgps_header>:

static bool validate_pgps_header(const struct nrf_cloud_pgps_header *header)
{
   2d4e4:	b510      	push	{r4, lr}
   2d4e6:	4604      	mov	r4, r0
	log_pgps_header("Checking P-GPS header: ", header);
   2d4e8:	4601      	mov	r1, r0
   2d4ea:	4811      	ldr	r0, [pc, #68]	; (2d530 <validate_pgps_header+0x4c>)
   2d4ec:	f7ff ffdc 	bl	2d4a8 <log_pgps_header>
	if ((header->schema_version != NRF_CLOUD_PGPS_BIN_SCHEMA_VERSION) ||
   2d4f0:	7823      	ldrb	r3, [r4, #0]
   2d4f2:	2b01      	cmp	r3, #1
   2d4f4:	d10d      	bne.n	2d512 <validate_pgps_header+0x2e>
   2d4f6:	7863      	ldrb	r3, [r4, #1]
   2d4f8:	2b0a      	cmp	r3, #10
   2d4fa:	d115      	bne.n	2d528 <validate_pgps_header+0x44>
	    (header->array_type != NRF_CLOUD_PGPS_PREDICTION_HEADER) ||
   2d4fc:	8860      	ldrh	r0, [r4, #2]
   2d4fe:	2801      	cmp	r0, #1
   2d500:	d112      	bne.n	2d528 <validate_pgps_header+0x44>
	    (header->num_items != 1) ||
   2d502:	8923      	ldrh	r3, [r4, #8]
   2d504:	2bf0      	cmp	r3, #240	; 0xf0
   2d506:	d10f      	bne.n	2d528 <validate_pgps_header+0x44>
	    (header->prediction_period_min != PREDICTION_PERIOD) ||
	    (header->prediction_count <= 0) ||
   2d508:	88a3      	ldrh	r3, [r4, #4]
	    (header->prediction_period_min != PREDICTION_PERIOD) ||
   2d50a:	3b01      	subs	r3, #1
   2d50c:	2b29      	cmp	r3, #41	; 0x29
   2d50e:	d80b      	bhi.n	2d528 <validate_pgps_header+0x44>
			LOG_WRN("One or more fields are wrong");
		}
		return false;
	}
	return true;
}
   2d510:	bd10      	pop	{r4, pc}
		if ((((uint8_t)header->schema_version) == 0xff) &&
   2d512:	2bff      	cmp	r3, #255	; 0xff
   2d514:	d108      	bne.n	2d528 <validate_pgps_header+0x44>
   2d516:	7863      	ldrb	r3, [r4, #1]
   2d518:	2bff      	cmp	r3, #255	; 0xff
   2d51a:	d105      	bne.n	2d528 <validate_pgps_header+0x44>
			LOG_WRN("Flash is erased.");
   2d51c:	2157      	movs	r1, #87	; 0x57
   2d51e:	4805      	ldr	r0, [pc, #20]	; (2d534 <validate_pgps_header+0x50>)
			LOG_WRN("One or more fields are wrong");
   2d520:	f00f faee 	bl	3cb00 <z_log_minimal_printk>
		return false;
   2d524:	2000      	movs	r0, #0
   2d526:	e7f3      	b.n	2d510 <validate_pgps_header+0x2c>
			LOG_WRN("One or more fields are wrong");
   2d528:	2157      	movs	r1, #87	; 0x57
   2d52a:	4803      	ldr	r0, [pc, #12]	; (2d538 <validate_pgps_header+0x54>)
   2d52c:	e7f8      	b.n	2d520 <validate_pgps_header+0x3c>
   2d52e:	bf00      	nop
   2d530:	00048f81 	.word	0x00048f81
   2d534:	00048f99 	.word	0x00048f99
   2d538:	00048faf 	.word	0x00048faf

0002d53c <prediction_timer_handler>:
	}
}

static void prediction_timer_handler(struct k_timer *dummy)
{
	k_work_submit(&prediction_work);
   2d53c:	4801      	ldr	r0, [pc, #4]	; (2d544 <prediction_timer_handler+0x8>)
   2d53e:	f009 bf35 	b.w	373ac <k_work_submit>
   2d542:	bf00      	nop
   2d544:	200146b4 	.word	0x200146b4

0002d548 <cache_pgps_header>:
	return 0;
}

static void cache_pgps_header(const struct nrf_cloud_pgps_header *header)
{
	memcpy(&index.header, header, sizeof(*header));
   2d548:	4a10      	ldr	r2, [pc, #64]	; (2d58c <cache_pgps_header+0x44>)
{
   2d54a:	b570      	push	{r4, r5, r6, lr}
   2d54c:	4603      	mov	r3, r0
   2d54e:	4614      	mov	r4, r2
   2d550:	f100 0610 	add.w	r6, r0, #16
   2d554:	4615      	mov	r5, r2
   2d556:	6818      	ldr	r0, [r3, #0]
   2d558:	6859      	ldr	r1, [r3, #4]
   2d55a:	3308      	adds	r3, #8
   2d55c:	c503      	stmia	r5!, {r0, r1}
   2d55e:	42b3      	cmp	r3, r6
   2d560:	462a      	mov	r2, r5
   2d562:	d1f7      	bne.n	2d554 <cache_pgps_header+0xc>

	index.start_sec = npgps_gps_day_time_to_sec(index.header.gps_day,
   2d564:	68e1      	ldr	r1, [r4, #12]
   2d566:	8960      	ldrh	r0, [r4, #10]
   2d568:	f001 fada 	bl	2eb20 <npgps_gps_day_time_to_sec>
						    index.header.gps_time_of_day);
	index.period_sec = index.header.prediction_period_min * SEC_PER_MIN;
   2d56c:	8923      	ldrh	r3, [r4, #8]
	index.end_sec = index.start_sec +
			index.period_sec * index.header.prediction_count;
   2d56e:	88a2      	ldrh	r2, [r4, #4]
	index.period_sec = index.header.prediction_period_min * SEC_PER_MIN;
   2d570:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   2d574:	009b      	lsls	r3, r3, #2
   2d576:	b29b      	uxth	r3, r3
   2d578:	8563      	strh	r3, [r4, #42]	; 0x2a
			index.period_sec * index.header.prediction_count;
   2d57a:	4353      	muls	r3, r2
	index.start_sec = npgps_gps_day_time_to_sec(index.header.gps_day,
   2d57c:	e9c4 0104 	strd	r0, r1, [r4, #16]
	index.end_sec = index.start_sec +
   2d580:	1818      	adds	r0, r3, r0
   2d582:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   2d586:	e9c4 0106 	strd	r0, r1, [r4, #24]
}
   2d58a:	bd70      	pop	{r4, r5, r6, pc}
   2d58c:	20015810 	.word	0x20015810

0002d590 <validate_prediction.constprop.0>:
static int validate_prediction(const struct nrf_cloud_pgps_prediction *p,
   2d590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d594:	4699      	mov	r9, r3
	if ((p->schema_version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) ||
   2d596:	7cc3      	ldrb	r3, [r0, #19]
static int validate_prediction(const struct nrf_cloud_pgps_prediction *p,
   2d598:	4604      	mov	r4, r0
	if ((p->schema_version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) ||
   2d59a:	2b01      	cmp	r3, #1
static int validate_prediction(const struct nrf_cloud_pgps_prediction *p,
   2d59c:	460e      	mov	r6, r1
   2d59e:	4617      	mov	r7, r2
   2d5a0:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
	if ((p->schema_version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) ||
   2d5a4:	d106      	bne.n	2d5b4 <validate_prediction.constprop.0+0x24>
   2d5a6:	7803      	ldrb	r3, [r0, #0]
   2d5a8:	2b07      	cmp	r3, #7
   2d5aa:	d103      	bne.n	2d5b4 <validate_prediction.constprop.0+0x24>
	    (p->time_type != NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK) ||
   2d5ac:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   2d5b0:	2b01      	cmp	r3, #1
   2d5b2:	d038      	beq.n	2d626 <validate_prediction.constprop.0+0x96>
		LOG_ERR("invalid prediction header");
   2d5b4:	2145      	movs	r1, #69	; 0x45
   2d5b6:	4831      	ldr	r0, [pc, #196]	; (2d67c <validate_prediction.constprop.0+0xec>)
   2d5b8:	f00f faa2 	bl	3cb00 <z_log_minimal_printk>
		err = -EINVAL;
   2d5bc:	f06f 0515 	mvn.w	r5, #21
	int64_t gps_sec = npgps_gps_day_time_to_sec(gps_day,
   2d5c0:	4639      	mov	r1, r7
   2d5c2:	4630      	mov	r0, r6
   2d5c4:	f001 faac 	bl	2eb20 <npgps_gps_day_time_to_sec>
   2d5c8:	4680      	mov	r8, r0
   2d5ca:	468b      	mov	fp, r1
	int64_t pred_sec = npgps_gps_day_time_to_sec(p->time.date_day,
   2d5cc:	f8b4 0003 	ldrh.w	r0, [r4, #3]
   2d5d0:	f8d4 1005 	ldr.w	r1, [r4, #5]
   2d5d4:	f001 faa4 	bl	2eb20 <npgps_gps_day_time_to_sec>
   2d5d8:	4602      	mov	r2, r0
	int64_t end_sec = pred_sec + period_min * SEC_PER_MIN;
   2d5da:	468c      	mov	ip, r1
   2d5dc:	203c      	movs	r0, #60	; 0x3c
   2d5de:	4613      	mov	r3, r2
	if ((gps_sec < pred_sec) || (gps_sec > end_sec)) {
   2d5e0:	4590      	cmp	r8, r2
   2d5e2:	eb7b 0101 	sbcs.w	r1, fp, r1
	int64_t end_sec = pred_sec + period_min * SEC_PER_MIN;
   2d5e6:	fbe9 3c00 	umlal	r3, ip, r9, r0
	if ((gps_sec < pred_sec) || (gps_sec > end_sec)) {
   2d5ea:	db03      	blt.n	2d5f4 <validate_prediction.constprop.0+0x64>
   2d5ec:	4543      	cmp	r3, r8
   2d5ee:	eb7c 010b 	sbcs.w	r1, ip, fp
   2d5f2:	da07      	bge.n	2d604 <validate_prediction.constprop.0+0x74>
		LOG_ERR("prediction does not contain desired time; "
   2d5f4:	9300      	str	r3, [sp, #0]
   2d5f6:	2145      	movs	r1, #69	; 0x45
   2d5f8:	4643      	mov	r3, r8
   2d5fa:	4821      	ldr	r0, [pc, #132]	; (2d680 <validate_prediction.constprop.0+0xf0>)
   2d5fc:	f00f fa80 	bl	3cb00 <z_log_minimal_printk>
		err = -EINVAL;
   2d600:	f06f 0515 	mvn.w	r5, #21
	if ((p->ephemeris_type != NRF_CLOUD_AGPS_EPHEMERIDES) ||
   2d604:	7d22      	ldrb	r2, [r4, #20]
	    (p->ephemeris_count != NRF_CLOUD_PGPS_NUM_SV)) {
   2d606:	f8b4 3015 	ldrh.w	r3, [r4, #21]
	if ((p->ephemeris_type != NRF_CLOUD_AGPS_EPHEMERIDES) ||
   2d60a:	2a02      	cmp	r2, #2
   2d60c:	d101      	bne.n	2d612 <validate_prediction.constprop.0+0x82>
   2d60e:	2b20      	cmp	r3, #32
   2d610:	d020      	beq.n	2d654 <validate_prediction.constprop.0+0xc4>
		LOG_ERR("ephemeris header bad:%u, %u",
   2d612:	2145      	movs	r1, #69	; 0x45
   2d614:	481b      	ldr	r0, [pc, #108]	; (2d684 <validate_prediction.constprop.0+0xf4>)
   2d616:	f00f fa73 	bl	3cb00 <z_log_minimal_printk>
			err = -EINVAL;
   2d61a:	f06f 0515 	mvn.w	r5, #21
}
   2d61e:	4628      	mov	r0, r5
   2d620:	b003      	add	sp, #12
   2d622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (exact && (p->time.date_day != gps_day)) {
   2d626:	f1ba 0f00 	cmp.w	sl, #0
   2d62a:	d011      	beq.n	2d650 <validate_prediction.constprop.0+0xc0>
   2d62c:	f8b0 2003 	ldrh.w	r2, [r0, #3]
   2d630:	428a      	cmp	r2, r1
   2d632:	d005      	beq.n	2d640 <validate_prediction.constprop.0+0xb0>
		LOG_ERR("prediction day:%u, expected:%u",
   2d634:	460b      	mov	r3, r1
   2d636:	2145      	movs	r1, #69	; 0x45
   2d638:	4813      	ldr	r0, [pc, #76]	; (2d688 <validate_prediction.constprop.0+0xf8>)
		LOG_ERR("prediction time:%u, expected:%u",
   2d63a:	f00f fa61 	bl	3cb00 <z_log_minimal_printk>
   2d63e:	e7bd      	b.n	2d5bc <validate_prediction.constprop.0+0x2c>
	} else if (exact && (p->time.time_full_s != gps_time_of_day)) {
   2d640:	f8d0 2005 	ldr.w	r2, [r0, #5]
   2d644:	42ba      	cmp	r2, r7
   2d646:	d003      	beq.n	2d650 <validate_prediction.constprop.0+0xc0>
		LOG_ERR("prediction time:%u, expected:%u",
   2d648:	463b      	mov	r3, r7
   2d64a:	2145      	movs	r1, #69	; 0x45
   2d64c:	480f      	ldr	r0, [pc, #60]	; (2d68c <validate_prediction.constprop.0+0xfc>)
   2d64e:	e7f4      	b.n	2d63a <validate_prediction.constprop.0+0xaa>
	int err = 0;
   2d650:	2500      	movs	r5, #0
   2d652:	e7b5      	b.n	2d5c0 <validate_prediction.constprop.0+0x30>
	if (exact && !err) {
   2d654:	f1ba 0f00 	cmp.w	sl, #0
   2d658:	d0e1      	beq.n	2d61e <validate_prediction.constprop.0+0x8e>
   2d65a:	2d00      	cmp	r5, #0
   2d65c:	d1df      	bne.n	2d61e <validate_prediction.constprop.0+0x8e>
		expected_sentinel = npgps_gps_day_time_to_sec(gps_day,
   2d65e:	4639      	mov	r1, r7
   2d660:	4630      	mov	r0, r6
   2d662:	f001 fa5d 	bl	2eb20 <npgps_gps_day_time_to_sec>
		stored_sentinel = p->sentinel;
   2d666:	f8d4 37d7 	ldr.w	r3, [r4, #2007]	; 0x7d7
		if (expected_sentinel != stored_sentinel) {
   2d66a:	4298      	cmp	r0, r3
   2d66c:	d0d7      	beq.n	2d61e <validate_prediction.constprop.0+0x8e>
			LOG_ERR("prediction at:%p has stored_sentinel:0x%08X, "
   2d66e:	9000      	str	r0, [sp, #0]
   2d670:	4622      	mov	r2, r4
   2d672:	2145      	movs	r1, #69	; 0x45
   2d674:	4806      	ldr	r0, [pc, #24]	; (2d690 <validate_prediction.constprop.0+0x100>)
   2d676:	f00f fa43 	bl	3cb00 <z_log_minimal_printk>
   2d67a:	e7ce      	b.n	2d61a <validate_prediction.constprop.0+0x8a>
   2d67c:	00048fd1 	.word	0x00048fd1
   2d680:	00049039 	.word	0x00049039
   2d684:	00049081 	.word	0x00049081
   2d688:	00048ff0 	.word	0x00048ff0
   2d68c:	00049014 	.word	0x00049014
   2d690:	000490a2 	.word	0x000490a2

0002d694 <open_storage>:
{
   2d694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d698:	4604      	mov	r4, r0
   2d69a:	460f      	mov	r7, r1
   2d69c:	b085      	sub	sp, #20
   2d69e:	4929      	ldr	r1, [pc, #164]	; (2d744 <open_storage+0xb0>)
   2d6a0:	4608      	mov	r0, r1
   2d6a2:	f013 fc40 	bl	40f26 <z_device_is_ready>
	if (!device_is_ready(flash_dev)) {
   2d6a6:	4927      	ldr	r1, [pc, #156]	; (2d744 <open_storage+0xb0>)
   2d6a8:	b950      	cbnz	r0, 2d6c0 <open_storage+0x2c>
		LOG_ERR("Flash device not ready:'%s'", flash_dev->name);
   2d6aa:	680a      	ldr	r2, [r1, #0]
   2d6ac:	4826      	ldr	r0, [pc, #152]	; (2d748 <open_storage+0xb4>)
   2d6ae:	2145      	movs	r1, #69	; 0x45
   2d6b0:	f00f fa26 	bl	3cb00 <z_log_minimal_printk>
		return -ENODEV;
   2d6b4:	f06f 0412 	mvn.w	r4, #18
}
   2d6b8:	4620      	mov	r0, r4
   2d6ba:	b005      	add	sp, #20
   2d6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	block_offset = offset % flash_page_size;
   2d6c0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2d768 <open_storage+0xd4>
	err = stream_flash_init(&stream, flash_dev,
   2d6c4:	4a21      	ldr	r2, [pc, #132]	; (2d74c <open_storage+0xb8>)
	block_offset = offset % flash_page_size;
   2d6c6:	f8d8 3000 	ldr.w	r3, [r8]
	err = stream_flash_init(&stream, flash_dev,
   2d6ca:	6812      	ldr	r2, [r2, #0]
	block_offset = offset % flash_page_size;
   2d6cc:	fbb4 f5f3 	udiv	r5, r4, r3
   2d6d0:	fb03 4515 	mls	r5, r3, r5, r4
	err = stream_flash_init(&stream, flash_dev,
   2d6d4:	9202      	str	r2, [sp, #8]
				((uint32_t)storage) + offset,
   2d6d6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2d76c <open_storage+0xd8>
	err = stream_flash_init(&stream, flash_dev,
   2d6da:	4a1d      	ldr	r2, [pc, #116]	; (2d750 <open_storage+0xbc>)
	offset -= block_offset;
   2d6dc:	1b66      	subs	r6, r4, r5
	err = stream_flash_init(&stream, flash_dev,
   2d6de:	6810      	ldr	r0, [r2, #0]
   2d6e0:	f8d9 2000 	ldr.w	r2, [r9]
   2d6e4:	1b2c      	subs	r4, r5, r4
   2d6e6:	4432      	add	r2, r6
   2d6e8:	4404      	add	r4, r0
   2d6ea:	9200      	str	r2, [sp, #0]
   2d6ec:	4a19      	ldr	r2, [pc, #100]	; (2d754 <open_storage+0xc0>)
   2d6ee:	9401      	str	r4, [sp, #4]
   2d6f0:	6812      	ldr	r2, [r2, #0]
   2d6f2:	4819      	ldr	r0, [pc, #100]	; (2d758 <open_storage+0xc4>)
   2d6f4:	f7f4 fbae 	bl	21e54 <stream_flash_init>
	if (err) {
   2d6f8:	4604      	mov	r4, r0
   2d6fa:	b148      	cbz	r0, 2d710 <open_storage+0x7c>
		LOG_ERR("Failed to init flash stream for offset %u: %d",
   2d6fc:	4603      	mov	r3, r0
   2d6fe:	4632      	mov	r2, r6
   2d700:	2145      	movs	r1, #69	; 0x45
   2d702:	4816      	ldr	r0, [pc, #88]	; (2d75c <open_storage+0xc8>)
   2d704:	f00f f9fc 	bl	3cb00 <z_log_minimal_printk>
		state = PGPS_NONE;
   2d708:	2200      	movs	r2, #0
   2d70a:	4b15      	ldr	r3, [pc, #84]	; (2d760 <open_storage+0xcc>)
   2d70c:	701a      	strb	r2, [r3, #0]
		return err;
   2d70e:	e7d3      	b.n	2d6b8 <open_storage+0x24>
	if (preserve && (block_offset != 0) && (block_offset < flash_page_size)) {
   2d710:	2f00      	cmp	r7, #0
   2d712:	d0d1      	beq.n	2d6b8 <open_storage+0x24>
   2d714:	2d00      	cmp	r5, #0
   2d716:	d0cf      	beq.n	2d6b8 <open_storage+0x24>
   2d718:	f8d8 3000 	ldr.w	r3, [r8]
   2d71c:	42ab      	cmp	r3, r5
   2d71e:	d9cb      	bls.n	2d6b8 <open_storage+0x24>
		uint8_t *p = storage + offset;
   2d720:	f8d9 1000 	ldr.w	r1, [r9]
		err = stream_flash_buffered_write(&stream, p, block_offset, false);
   2d724:	4603      	mov	r3, r0
   2d726:	462a      	mov	r2, r5
   2d728:	480b      	ldr	r0, [pc, #44]	; (2d758 <open_storage+0xc4>)
   2d72a:	4431      	add	r1, r6
   2d72c:	f00f fedc 	bl	3d4e8 <stream_flash_buffered_write>
		if (err) {
   2d730:	4604      	mov	r4, r0
   2d732:	2800      	cmp	r0, #0
   2d734:	d0c0      	beq.n	2d6b8 <open_storage+0x24>
			LOG_ERR("Error writing back %u original bytes", block_offset);
   2d736:	462a      	mov	r2, r5
   2d738:	2145      	movs	r1, #69	; 0x45
   2d73a:	480a      	ldr	r0, [pc, #40]	; (2d764 <open_storage+0xd0>)
   2d73c:	f00f f9e0 	bl	3cb00 <z_log_minimal_printk>
   2d740:	e7ba      	b.n	2d6b8 <open_storage+0x24>
   2d742:	bf00      	nop
   2d744:	000423d4 	.word	0x000423d4
   2d748:	000490e4 	.word	0x000490e4
   2d74c:	2001a118 	.word	0x2001a118
   2d750:	2001a128 	.word	0x2001a128
   2d754:	2001a150 	.word	0x2001a150
   2d758:	2001a12c 	.word	0x2001a12c
   2d75c:	00049105 	.word	0x00049105
   2d760:	2001d2bf 	.word	0x2001d2bf
   2d764:	00049138 	.word	0x00049138
   2d768:	2001a11c 	.word	0x2001a11c
   2d76c:	2001a124 	.word	0x2001a124

0002d770 <nrf_cloud_pgps_loading>:
		(state == PGPS_REQUESTING) ||
   2d770:	4b03      	ldr	r3, [pc, #12]	; (2d780 <nrf_cloud_pgps_loading+0x10>)
   2d772:	7818      	ldrb	r0, [r3, #0]
   2d774:	3803      	subs	r0, #3
}
   2d776:	2802      	cmp	r0, #2
   2d778:	bf8c      	ite	hi
   2d77a:	2000      	movhi	r0, #0
   2d77c:	2001      	movls	r0, #1
   2d77e:	4770      	bx	lr
   2d780:	2001d2bf 	.word	0x2001d2bf

0002d784 <pgps_request>:
{
   2d784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (state == PGPS_NONE) {
   2d786:	4f3f      	ldr	r7, [pc, #252]	; (2d884 <pgps_request+0x100>)
{
   2d788:	4605      	mov	r5, r0
	if (state == PGPS_NONE) {
   2d78a:	783b      	ldrb	r3, [r7, #0]
   2d78c:	b93b      	cbnz	r3, 2d79e <pgps_request+0x1a>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2d78e:	2145      	movs	r1, #69	; 0x45
   2d790:	483d      	ldr	r0, [pc, #244]	; (2d888 <pgps_request+0x104>)
   2d792:	f00f f9b5 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   2d796:	f06f 0415 	mvn.w	r4, #21
}
   2d79a:	4620      	mov	r0, r4
   2d79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (nrf_cloud_pgps_loading()) {
   2d79e:	f7ff ffe7 	bl	2d770 <nrf_cloud_pgps_loading>
   2d7a2:	2800      	cmp	r0, #0
   2d7a4:	d16c      	bne.n	2d880 <pgps_request+0xfc>
	if (request->prediction_count < index.header.prediction_count) {
   2d7a6:	4b39      	ldr	r3, [pc, #228]	; (2d88c <pgps_request+0x108>)
   2d7a8:	882c      	ldrh	r4, [r5, #0]
   2d7aa:	8899      	ldrh	r1, [r3, #4]
   2d7ac:	b2a2      	uxth	r2, r4
   2d7ae:	428a      	cmp	r2, r1
		index.partial_request = true;
   2d7b0:	bf3e      	ittt	cc
   2d7b2:	2001      	movcc	r0, #1
		index.pnum_offset = index.header.prediction_count -
   2d7b4:	1a89      	subcc	r1, r1, r2
   2d7b6:	f883 102d 	strbcc.w	r1, [r3, #45]	; 0x2d
	ignore_packets = false;
   2d7ba:	f04f 0100 	mov.w	r1, #0
		index.partial_request = true;
   2d7be:	bf32      	itee	cc
   2d7c0:	f883 002f 	strbcc.w	r0, [r3, #47]	; 0x2f
		index.partial_request = false;
   2d7c4:	f883 002f 	strbcs.w	r0, [r3, #47]	; 0x2f
		index.pnum_offset = 0;
   2d7c8:	f883 002d 	strbcs.w	r0, [r3, #45]	; 0x2d
	index.expected_count = request->prediction_count;
   2d7cc:	84dc      	strh	r4, [r3, #38]	; 0x26
	ignore_packets = false;
   2d7ce:	4b30      	ldr	r3, [pc, #192]	; (2d890 <pgps_request+0x10c>)
	LOG_INF("Requesting %u predictions...", request->prediction_count);
   2d7d0:	4830      	ldr	r0, [pc, #192]	; (2d894 <pgps_request+0x110>)
	ignore_packets = false;
   2d7d2:	7019      	strb	r1, [r3, #0]
	LOG_INF("Requesting %u predictions...", request->prediction_count);
   2d7d4:	2149      	movs	r1, #73	; 0x49
   2d7d6:	f00f f993 	bl	3cb00 <z_log_minimal_printk>
	pgps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_PGPS,
   2d7da:	492f      	ldr	r1, [pc, #188]	; (2d898 <pgps_request+0x114>)
   2d7dc:	482f      	ldr	r0, [pc, #188]	; (2d89c <pgps_request+0x118>)
   2d7de:	f7fc fcf9 	bl	2a1d4 <json_create_req_obj>
	data_obj = cJSON_AddObjectToObject(pgps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2d7e2:	492f      	ldr	r1, [pc, #188]	; (2d8a0 <pgps_request+0x11c>)
	pgps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_PGPS,
   2d7e4:	4606      	mov	r6, r0
	data_obj = cJSON_AddObjectToObject(pgps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2d7e6:	f012 faa8 	bl	3fd3a <cJSON_AddObjectToObject>
   2d7ea:	4604      	mov	r4, r0
	if (!pgps_req_obj || !data_obj) {
   2d7ec:	b17e      	cbz	r6, 2d80e <pgps_request+0x8a>
   2d7ee:	b170      	cbz	r0, 2d80e <pgps_request+0x8a>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_PRED_COUNT,
   2d7f0:	8828      	ldrh	r0, [r5, #0]
   2d7f2:	f7ee ff67 	bl	1c6c4 <__aeabi_ui2d>
   2d7f6:	4602      	mov	r2, r0
   2d7f8:	460b      	mov	r3, r1
   2d7fa:	4620      	mov	r0, r4
   2d7fc:	4929      	ldr	r1, [pc, #164]	; (2d8a4 <pgps_request+0x120>)
   2d7fe:	f012 fa1b 	bl	3fc38 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2d802:	4602      	mov	r2, r0
   2d804:	b930      	cbnz	r0, 2d814 <pgps_request+0x90>
		LOG_ERR("Failed to add pred count to P-GPS request:%d", err);
   2d806:	2145      	movs	r1, #69	; 0x45
   2d808:	4827      	ldr	r0, [pc, #156]	; (2d8a8 <pgps_request+0x124>)
		LOG_ERR("Failed to add gps time to P-GPS request:%d", err);
   2d80a:	f00f f979 	bl	3cb00 <z_log_minimal_printk>
		err = -ENOMEM;
   2d80e:	f06f 040b 	mvn.w	r4, #11
   2d812:	e031      	b.n	2d878 <pgps_request+0xf4>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_INT_MIN,
   2d814:	8868      	ldrh	r0, [r5, #2]
   2d816:	f7ee ff55 	bl	1c6c4 <__aeabi_ui2d>
   2d81a:	4602      	mov	r2, r0
   2d81c:	460b      	mov	r3, r1
   2d81e:	4620      	mov	r0, r4
   2d820:	4922      	ldr	r1, [pc, #136]	; (2d8ac <pgps_request+0x128>)
   2d822:	f012 fa09 	bl	3fc38 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2d826:	4602      	mov	r2, r0
   2d828:	b910      	cbnz	r0, 2d830 <pgps_request+0xac>
		LOG_ERR("Failed to add pred int min to P-GPS request:%d", err);
   2d82a:	2145      	movs	r1, #69	; 0x45
   2d82c:	4820      	ldr	r0, [pc, #128]	; (2d8b0 <pgps_request+0x12c>)
   2d82e:	e7ec      	b.n	2d80a <pgps_request+0x86>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_GPS_DAY,
   2d830:	88a8      	ldrh	r0, [r5, #4]
   2d832:	f7ee ff47 	bl	1c6c4 <__aeabi_ui2d>
   2d836:	4602      	mov	r2, r0
   2d838:	460b      	mov	r3, r1
   2d83a:	4620      	mov	r0, r4
   2d83c:	491d      	ldr	r1, [pc, #116]	; (2d8b4 <pgps_request+0x130>)
   2d83e:	f012 f9fb 	bl	3fc38 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2d842:	4602      	mov	r2, r0
   2d844:	b910      	cbnz	r0, 2d84c <pgps_request+0xc8>
		LOG_ERR("Failed to add gps day to P-GPS request:%d", err);
   2d846:	2145      	movs	r1, #69	; 0x45
   2d848:	481b      	ldr	r0, [pc, #108]	; (2d8b8 <pgps_request+0x134>)
   2d84a:	e7de      	b.n	2d80a <pgps_request+0x86>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_GPS_TIME,
   2d84c:	f8d5 0006 	ldr.w	r0, [r5, #6]
   2d850:	f7ee ff38 	bl	1c6c4 <__aeabi_ui2d>
   2d854:	4602      	mov	r2, r0
   2d856:	460b      	mov	r3, r1
   2d858:	4620      	mov	r0, r4
   2d85a:	4918      	ldr	r1, [pc, #96]	; (2d8bc <pgps_request+0x138>)
   2d85c:	f012 f9ec 	bl	3fc38 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2d860:	4602      	mov	r2, r0
   2d862:	b910      	cbnz	r0, 2d86a <pgps_request+0xe6>
		LOG_ERR("Failed to add gps time to P-GPS request:%d", err);
   2d864:	2145      	movs	r1, #69	; 0x45
   2d866:	4816      	ldr	r0, [pc, #88]	; (2d8c0 <pgps_request+0x13c>)
   2d868:	e7cf      	b.n	2d80a <pgps_request+0x86>
	err = json_send_to_cloud(pgps_req_obj);
   2d86a:	4630      	mov	r0, r6
   2d86c:	f7fd f876 	bl	2a95c <json_send_to_cloud>
	if (!err) {
   2d870:	4604      	mov	r4, r0
   2d872:	b908      	cbnz	r0, 2d878 <pgps_request+0xf4>
		state = PGPS_REQUESTING;
   2d874:	2304      	movs	r3, #4
   2d876:	703b      	strb	r3, [r7, #0]
	cJSON_Delete(pgps_req_obj);
   2d878:	4630      	mov	r0, r6
   2d87a:	f004 fb6f 	bl	31f5c <cJSON_Delete>
	return err;
   2d87e:	e78c      	b.n	2d79a <pgps_request+0x16>
		return 0;
   2d880:	2400      	movs	r4, #0
   2d882:	e78a      	b.n	2d79a <pgps_request+0x16>
   2d884:	2001d2bf 	.word	0x2001d2bf
   2d888:	00049162 	.word	0x00049162
   2d88c:	20015810 	.word	0x20015810
   2d890:	2001c9d9 	.word	0x2001c9d9
   2d894:	0004918b 	.word	0x0004918b
   2d898:	0004362e 	.word	0x0004362e
   2d89c:	000481c0 	.word	0x000481c0
   2d8a0:	0004370a 	.word	0x0004370a
   2d8a4:	000491ad 	.word	0x000491ad
   2d8a8:	000491bd 	.word	0x000491bd
   2d8ac:	000491ef 	.word	0x000491ef
   2d8b0:	00049209 	.word	0x00049209
   2d8b4:	0004923d 	.word	0x0004923d
   2d8b8:	00049249 	.word	0x00049249
   2d8bc:	00049278 	.word	0x00049278
   2d8c0:	00049291 	.word	0x00049291

0002d8c4 <pgps_request_all>:
{
   2d8c4:	b510      	push	{r4, lr}
	if (state == PGPS_NONE) {
   2d8c6:	4b19      	ldr	r3, [pc, #100]	; (2d92c <pgps_request_all+0x68>)
{
   2d8c8:	b086      	sub	sp, #24
	if (state == PGPS_NONE) {
   2d8ca:	781b      	ldrb	r3, [r3, #0]
   2d8cc:	b93b      	cbnz	r3, 2d8de <pgps_request_all+0x1a>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2d8ce:	4818      	ldr	r0, [pc, #96]	; (2d930 <pgps_request_all+0x6c>)
   2d8d0:	2145      	movs	r1, #69	; 0x45
   2d8d2:	f00f f915 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   2d8d6:	f06f 0015 	mvn.w	r0, #21
}
   2d8da:	b006      	add	sp, #24
   2d8dc:	bd10      	pop	{r4, pc}
	if (nrf_cloud_pgps_loading()) {
   2d8de:	f7ff ff47 	bl	2d770 <nrf_cloud_pgps_loading>
   2d8e2:	4604      	mov	r4, r0
   2d8e4:	b9f8      	cbnz	r0, 2d926 <pgps_request_all+0x62>
	npgps_reset_block_pool();
   2d8e6:	f001 f9f9 	bl	2ecdc <npgps_reset_block_pool>
	index.stale_server_data = false;
   2d8ea:	4b12      	ldr	r3, [pc, #72]	; (2d934 <pgps_request_all+0x70>)
	err = npgps_get_time(NULL, &gps_day, &gps_time_of_day);
   2d8ec:	4620      	mov	r0, r4
   2d8ee:	aa02      	add	r2, sp, #8
   2d8f0:	f10d 0106 	add.w	r1, sp, #6
	index.stale_server_data = false;
   2d8f4:	f883 4030 	strb.w	r4, [r3, #48]	; 0x30
	err = npgps_get_time(NULL, &gps_day, &gps_time_of_day);
   2d8f8:	f011 ff2f 	bl	3f75a <npgps_get_time>
	if (err) {
   2d8fc:	b110      	cbz	r0, 2d904 <pgps_request_all+0x40>
		gps_day = 0;
   2d8fe:	f8ad 4006 	strh.w	r4, [sp, #6]
		gps_time_of_day = 0;
   2d902:	9402      	str	r4, [sp, #8]
	struct gps_pgps_request request = {
   2d904:	232a      	movs	r3, #42	; 0x2a
   2d906:	f8ad 300c 	strh.w	r3, [sp, #12]
   2d90a:	23f0      	movs	r3, #240	; 0xf0
   2d90c:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d910:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return pgps_request(&request);
   2d914:	a803      	add	r0, sp, #12
	struct gps_pgps_request request = {
   2d916:	f8ad 3010 	strh.w	r3, [sp, #16]
   2d91a:	9b02      	ldr	r3, [sp, #8]
   2d91c:	f8cd 3012 	str.w	r3, [sp, #18]
	return pgps_request(&request);
   2d920:	f7ff ff30 	bl	2d784 <pgps_request>
   2d924:	e7d9      	b.n	2d8da <pgps_request_all+0x16>
		return 0;
   2d926:	2000      	movs	r0, #0
   2d928:	e7d7      	b.n	2d8da <pgps_request_all+0x16>
   2d92a:	bf00      	nop
   2d92c:	2001d2bf 	.word	0x2001d2bf
   2d930:	00049162 	.word	0x00049162
   2d934:	20015810 	.word	0x20015810

0002d938 <nrf_cloud_pgps_find_prediction>:
{
   2d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (state == PGPS_NONE) {
   2d93c:	4a9c      	ldr	r2, [pc, #624]	; (2dbb0 <nrf_cloud_pgps_find_prediction+0x278>)
	int64_t start_sec = index.start_sec;
   2d93e:	4c9d      	ldr	r4, [pc, #628]	; (2dbb4 <nrf_cloud_pgps_find_prediction+0x27c>)
{
   2d940:	b08d      	sub	sp, #52	; 0x34
	int64_t end_sec = index.end_sec;
   2d942:	e9d4 a306 	ldrd	sl, r3, [r4, #24]
   2d946:	9307      	str	r3, [sp, #28]
	if (state == PGPS_NONE) {
   2d948:	7813      	ldrb	r3, [r2, #0]
{
   2d94a:	4605      	mov	r5, r0
	int64_t start_sec = index.start_sec;
   2d94c:	e9d4 8b04 	ldrd	r8, fp, [r4, #16]
	uint16_t start_day = index.header.gps_day;
   2d950:	8966      	ldrh	r6, [r4, #10]
	uint32_t start_time = index.header.gps_time_of_day;
   2d952:	68e7      	ldr	r7, [r4, #12]
	uint16_t period_min = index.header.prediction_period_min;
   2d954:	f8b4 9008 	ldrh.w	r9, [r4, #8]
	if (state == PGPS_NONE) {
   2d958:	b933      	cbnz	r3, 2d968 <nrf_cloud_pgps_find_prediction+0x30>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2d95a:	2145      	movs	r1, #69	; 0x45
   2d95c:	4896      	ldr	r0, [pc, #600]	; (2dbb8 <nrf_cloud_pgps_find_prediction+0x280>)
   2d95e:	f00f f8cf 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   2d962:	f06f 0415 	mvn.w	r4, #21
   2d966:	e015      	b.n	2d994 <nrf_cloud_pgps_find_prediction+0x5c>
	if (prediction == NULL) {
   2d968:	2800      	cmp	r0, #0
   2d96a:	d0fa      	beq.n	2d962 <nrf_cloud_pgps_find_prediction+0x2a>
	*prediction = NULL;
   2d96c:	2300      	movs	r3, #0
	if (index.stale_server_data) {
   2d96e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
	*prediction = NULL;
   2d972:	6003      	str	r3, [r0, #0]
	if (index.stale_server_data) {
   2d974:	b191      	cbz	r1, 2d99c <nrf_cloud_pgps_find_prediction+0x64>
		LOG_ERR("server error: expired data");
   2d976:	2145      	movs	r1, #69	; 0x45
   2d978:	4890      	ldr	r0, [pc, #576]	; (2dbbc <nrf_cloud_pgps_find_prediction+0x284>)
   2d97a:	f00f f8c1 	bl	3cb00 <z_log_minimal_printk>
		index.cur_pnum = 0xff;
   2d97e:	21ff      	movs	r1, #255	; 0xff
   2d980:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
		state = PGPS_EXPIRED;
   2d984:	2102      	movs	r1, #2
		pgps_need_assistance = false; /* make sure we request it */
   2d986:	2300      	movs	r3, #0
		state = PGPS_EXPIRED;
   2d988:	4a89      	ldr	r2, [pc, #548]	; (2dbb0 <nrf_cloud_pgps_find_prediction+0x278>)
   2d98a:	7011      	strb	r1, [r2, #0]
		pgps_need_assistance = false; /* make sure we request it */
   2d98c:	4a8c      	ldr	r2, [pc, #560]	; (2dbc0 <nrf_cloud_pgps_find_prediction+0x288>)
   2d98e:	6013      	str	r3, [r2, #0]
		return -ENODATA;
   2d990:	f06f 043c 	mvn.w	r4, #60	; 0x3c
}
   2d994:	4620      	mov	r0, r4
   2d996:	b00d      	add	sp, #52	; 0x34
   2d998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = npgps_get_shifted_time(&cur_gps_sec, &cur_gps_day,
   2d99c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   2d9a0:	aa09      	add	r2, sp, #36	; 0x24
   2d9a2:	f10d 0122 	add.w	r1, sp, #34	; 0x22
   2d9a6:	a80a      	add	r0, sp, #40	; 0x28
   2d9a8:	f001 f8d8 	bl	2eb5c <npgps_get_shifted_time>
	if (err < 0) {
   2d9ac:	2800      	cmp	r0, #0
   2d9ae:	da07      	bge.n	2d9c0 <nrf_cloud_pgps_find_prediction+0x88>
		LOG_INF("Unknown current time");
   2d9b0:	2149      	movs	r1, #73	; 0x49
   2d9b2:	4884      	ldr	r0, [pc, #528]	; (2dbc4 <nrf_cloud_pgps_find_prediction+0x28c>)
   2d9b4:	f00f f8a4 	bl	3cb00 <z_log_minimal_printk>
		cur_gps_sec = 0;
   2d9b8:	2200      	movs	r2, #0
   2d9ba:	2300      	movs	r3, #0
   2d9bc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2d9c0:	2207      	movs	r2, #7
	print_time_details("Looking for prediction for:",
   2d9c2:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
   2d9c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2d9c8:	fbb0 f2f2 	udiv	r2, r0, r2
   2d9cc:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
   2d9d0:	1ac3      	subs	r3, r0, r3
   2d9d2:	497d      	ldr	r1, [pc, #500]	; (2dbc8 <nrf_cloud_pgps_find_prediction+0x290>)
   2d9d4:	b29b      	uxth	r3, r3
   2d9d6:	fb01 4103 	mla	r1, r1, r3, r4
	LOG_INF("%s GPS sec:%u, day:%u, time of day:%u, week:%u, "
   2d9da:	ea4f 1c11 	mov.w	ip, r1, lsr #4
   2d9de:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2d9e2:	e9cd 1c04 	strd	r1, ip, [sp, #16]
   2d9e6:	e9cd 0400 	strd	r0, r4, [sp]
   2d9ea:	2149      	movs	r1, #73	; 0x49
   2d9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d9ee:	4a77      	ldr	r2, [pc, #476]	; (2dbcc <nrf_cloud_pgps_find_prediction+0x294>)
   2d9f0:	4877      	ldr	r0, [pc, #476]	; (2dbd0 <nrf_cloud_pgps_find_prediction+0x298>)
   2d9f2:	f00f f885 	bl	3cb00 <z_log_minimal_printk>
	if ((start_day == 0) && (start_time == 0)) {
   2d9f6:	b9c6      	cbnz	r6, 2da2a <nrf_cloud_pgps_find_prediction+0xf2>
   2d9f8:	b9bf      	cbnz	r7, 2da2a <nrf_cloud_pgps_find_prediction+0xf2>
		if (nrf_cloud_pgps_loading()) {
   2d9fa:	f7ff feb9 	bl	2d770 <nrf_cloud_pgps_loading>
   2d9fe:	b130      	cbz	r0, 2da0e <nrf_cloud_pgps_find_prediction+0xd6>
			LOG_WRN("Predictions not loaded yet");
   2da00:	2157      	movs	r1, #87	; 0x57
   2da02:	4874      	ldr	r0, [pc, #464]	; (2dbd4 <nrf_cloud_pgps_find_prediction+0x29c>)
   2da04:	f00f f87c 	bl	3cb00 <z_log_minimal_printk>
		return -ELOADING;
   2da08:	f46f 54fa 	mvn.w	r4, #8000	; 0x1f40
   2da0c:	e7c2      	b.n	2d994 <nrf_cloud_pgps_find_prediction+0x5c>
		index.cur_pnum = 0xff;
   2da0e:	22ff      	movs	r2, #255	; 0xff
   2da10:	4b68      	ldr	r3, [pc, #416]	; (2dbb4 <nrf_cloud_pgps_find_prediction+0x27c>)
		LOG_WRN("No data stored");
   2da12:	2157      	movs	r1, #87	; 0x57
		index.cur_pnum = 0xff;
   2da14:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		state = PGPS_EXPIRED;
   2da18:	2202      	movs	r2, #2
   2da1a:	4b65      	ldr	r3, [pc, #404]	; (2dbb0 <nrf_cloud_pgps_find_prediction+0x278>)
		LOG_WRN("No data stored");
   2da1c:	486e      	ldr	r0, [pc, #440]	; (2dbd8 <nrf_cloud_pgps_find_prediction+0x2a0>)
		state = PGPS_EXPIRED;
   2da1e:	701a      	strb	r2, [r3, #0]
		pgps_need_assistance = false; /* make sure we request it */
   2da20:	4b67      	ldr	r3, [pc, #412]	; (2dbc0 <nrf_cloud_pgps_find_prediction+0x288>)
   2da22:	601f      	str	r7, [r3, #0]
		LOG_WRN("No data stored");
   2da24:	f00f f86c 	bl	3cb00 <z_log_minimal_printk>
   2da28:	e7b2      	b.n	2d990 <nrf_cloud_pgps_find_prediction+0x58>
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2da2a:	2107      	movs	r1, #7
   2da2c:	fbb6 f1f1 	udiv	r1, r6, r1
	offset_sec = cur_gps_sec - start_sec;
   2da30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2da32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2da34:	ebb4 0408 	subs.w	r4, r4, r8
   2da38:	eb63 0b0b 	sbc.w	fp, r3, fp
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2da3c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
   2da40:	4a61      	ldr	r2, [pc, #388]	; (2dbc8 <nrf_cloud_pgps_find_prediction+0x290>)
   2da42:	1af3      	subs	r3, r6, r3
   2da44:	b29b      	uxth	r3, r3
   2da46:	fb02 7203 	mla	r2, r2, r3, r7
	LOG_INF("%s GPS sec:%u, day:%u, time of day:%u, week:%u, "
   2da4a:	0910      	lsrs	r0, r2, #4
   2da4c:	e9cd 2004 	strd	r2, r0, [sp, #16]
   2da50:	e9cd 1302 	strd	r1, r3, [sp, #8]
   2da54:	4a61      	ldr	r2, [pc, #388]	; (2dbdc <nrf_cloud_pgps_find_prediction+0x2a4>)
   2da56:	4643      	mov	r3, r8
   2da58:	2149      	movs	r1, #73	; 0x49
   2da5a:	485d      	ldr	r0, [pc, #372]	; (2dbd0 <nrf_cloud_pgps_find_prediction+0x298>)
   2da5c:	e9cd 6700 	strd	r6, r7, [sp]
   2da60:	f00f f84e 	bl	3cb00 <z_log_minimal_printk>
	LOG_INF("current offset into prediction set, sec:%d", (int32_t)offset_sec);
   2da64:	4622      	mov	r2, r4
   2da66:	2149      	movs	r1, #73	; 0x49
   2da68:	485d      	ldr	r0, [pc, #372]	; (2dbe0 <nrf_cloud_pgps_find_prediction+0x2a8>)
   2da6a:	f00f f849 	bl	3cb00 <z_log_minimal_printk>
	if (offset_sec < 0) {
   2da6e:	f1bb 0f00 	cmp.w	fp, #0
   2da72:	da05      	bge.n	2da80 <nrf_cloud_pgps_find_prediction+0x148>
		LOG_WRN("cannot find prediction; real time not known");
   2da74:	2157      	movs	r1, #87	; 0x57
   2da76:	485b      	ldr	r0, [pc, #364]	; (2dbe4 <nrf_cloud_pgps_find_prediction+0x2ac>)
   2da78:	f00f f842 	bl	3cb00 <z_log_minimal_printk>
		return -ETIMEUNKNOWN;
   2da7c:	4c5a      	ldr	r4, [pc, #360]	; (2dbe8 <nrf_cloud_pgps_find_prediction+0x2b0>)
   2da7e:	e789      	b.n	2d994 <nrf_cloud_pgps_find_prediction+0x5c>
	} else if (cur_gps_sec > end_sec) {
   2da80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2da82:	9a07      	ldr	r2, [sp, #28]
   2da84:	459a      	cmp	sl, r3
   2da86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2da88:	eb72 0303 	sbcs.w	r3, r2, r3
   2da8c:	da06      	bge.n	2da9c <nrf_cloud_pgps_find_prediction+0x164>
			LOG_WRN("data expired!");
   2da8e:	2157      	movs	r1, #87	; 0x57
   2da90:	4856      	ldr	r0, [pc, #344]	; (2dbec <nrf_cloud_pgps_find_prediction+0x2b4>)
   2da92:	f00f f835 	bl	3cb00 <z_log_minimal_printk>
			return -ETIMEDOUT;
   2da96:	f06f 0473 	mvn.w	r4, #115	; 0x73
   2da9a:	e77b      	b.n	2d994 <nrf_cloud_pgps_find_prediction+0x5c>
		pnum = offset_sec / (SEC_PER_MIN * period_min);
   2da9c:	223c      	movs	r2, #60	; 0x3c
   2da9e:	2300      	movs	r3, #0
   2daa0:	4620      	mov	r0, r4
   2daa2:	4659      	mov	r1, fp
   2daa4:	fb02 f209 	mul.w	r2, r2, r9
   2daa8:	f7ef f9ce 	bl	1ce48 <__aeabi_ldivmod>
		if (pnum >= index.header.prediction_count) {
   2daac:	4e41      	ldr	r6, [pc, #260]	; (2dbb4 <nrf_cloud_pgps_find_prediction+0x27c>)
		pnum = offset_sec / (SEC_PER_MIN * period_min);
   2daae:	4604      	mov	r4, r0
		if (pnum >= index.header.prediction_count) {
   2dab0:	88b3      	ldrh	r3, [r6, #4]
   2dab2:	4283      	cmp	r3, r0
   2dab4:	dc06      	bgt.n	2dac4 <nrf_cloud_pgps_find_prediction+0x18c>
			LOG_WRN("prediction num:%d -- too large", pnum);
   2dab6:	4602      	mov	r2, r0
   2dab8:	2157      	movs	r1, #87	; 0x57
   2daba:	484d      	ldr	r0, [pc, #308]	; (2dbf0 <nrf_cloud_pgps_find_prediction+0x2b8>)
   2dabc:	f00f f820 	bl	3cb00 <z_log_minimal_printk>
			pnum = index.header.prediction_count - 1;
   2dac0:	88b4      	ldrh	r4, [r6, #4]
   2dac2:	3c01      	subs	r4, #1
	LOG_INF("Selected prediction num:%d", pnum);
   2dac4:	484b      	ldr	r0, [pc, #300]	; (2dbf4 <nrf_cloud_pgps_find_prediction+0x2bc>)
   2dac6:	4622      	mov	r2, r4
   2dac8:	2149      	movs	r1, #73	; 0x49
   2daca:	f00f f819 	bl	3cb00 <z_log_minimal_printk>
	*prediction = index.predictions[pnum];
   2dace:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   2dad2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	index.cur_pnum = pnum;
   2dad4:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
	*prediction = index.predictions[pnum];
   2dad8:	6028      	str	r0, [r5, #0]
	if (*prediction) {
   2dada:	2800      	cmp	r0, #0
   2dadc:	d054      	beq.n	2db88 <nrf_cloud_pgps_find_prediction+0x250>
		err = validate_prediction(*prediction,
   2dade:	2300      	movs	r3, #0
   2dae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2dae2:	9300      	str	r3, [sp, #0]
   2dae4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   2dae8:	464b      	mov	r3, r9
   2daea:	f7ff fd51 	bl	2d590 <validate_prediction.constprop.0>
		if (!err) {
   2daee:	2800      	cmp	r0, #0
   2daf0:	d15b      	bne.n	2dbaa <nrf_cloud_pgps_find_prediction+0x272>
			start_expiration_timer(pnum, cur_gps_sec);
   2daf2:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
	return z_timeout_remaining(&timer->timeout);
   2daf6:	4840      	ldr	r0, [pc, #256]	; (2dbf8 <nrf_cloud_pgps_find_prediction+0x2c0>)
   2daf8:	f00b f822 	bl	38b40 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2dafc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2db00:	fba0 0302 	umull	r0, r3, r0, r2
   2db04:	0bc0      	lsrs	r0, r0, #15
	if (k_timer_remaining_get(&prediction_timer) > 0) {
   2db06:	ea50 4343 	orrs.w	r3, r0, r3, lsl #17
   2db0a:	f47f af43 	bne.w	2d994 <nrf_cloud_pgps_find_prediction+0x5c>
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2db0e:	e9d6 5104 	ldrd	r5, r1, [r6, #16]
   2db12:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
	end_sec = index.header.prediction_period_min * SEC_PER_MIN + start_sec;
   2db14:	8930      	ldrh	r0, [r6, #8]
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2db16:	4363      	muls	r3, r4
   2db18:	195d      	adds	r5, r3, r5
	end_sec = index.header.prediction_period_min * SEC_PER_MIN + start_sec;
   2db1a:	f04f 033c 	mov.w	r3, #60	; 0x3c
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2db1e:	f141 0100 	adc.w	r1, r1, #0
	end_sec = index.header.prediction_period_min * SEC_PER_MIN + start_sec;
   2db22:	fbe0 5103 	umlal	r5, r1, r0, r3
	delta = (end_sec - cur_gps_sec) + 1;
   2db26:	ebb5 0508 	subs.w	r5, r5, r8
   2db2a:	eb61 0107 	sbc.w	r1, r1, r7
   2db2e:	3501      	adds	r5, #1
   2db30:	f141 0100 	adc.w	r1, r1, #0
	if (delta > 0) {
   2db34:	2d01      	cmp	r5, #1
   2db36:	f171 0300 	sbcs.w	r3, r1, #0
   2db3a:	db21      	blt.n	2db80 <nrf_cloud_pgps_find_prediction+0x248>
		k_timer_start(&prediction_timer, K_SECONDS(delta), K_NO_WAIT);
   2db3c:	fba5 0302 	umull	r0, r3, r5, r2
   2db40:	fb02 3101 	mla	r1, r2, r1, r3
			return ((t * to_hz + off) / from_hz);
   2db44:	f240 33e7 	movw	r3, #999	; 0x3e7
   2db48:	03c9      	lsls	r1, r1, #15
   2db4a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2db4e:	03c0      	lsls	r0, r0, #15
   2db50:	18c0      	adds	r0, r0, r3
   2db52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2db56:	f04f 0300 	mov.w	r3, #0
   2db5a:	f141 0100 	adc.w	r1, r1, #0
   2db5e:	f7ef f9c3 	bl	1cee8 <__aeabi_uldivmod>
   2db62:	4602      	mov	r2, r0
   2db64:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2db66:	2100      	movs	r1, #0
   2db68:	2000      	movs	r0, #0
   2db6a:	e9cd 0100 	strd	r0, r1, [sp]
   2db6e:	4822      	ldr	r0, [pc, #136]	; (2dbf8 <nrf_cloud_pgps_find_prediction+0x2c0>)
   2db70:	f00b fa06 	bl	38f80 <z_impl_k_timer_start>
		LOG_INF("injecting next prediction in %d seconds", (int32_t)delta);
   2db74:	462a      	mov	r2, r5
   2db76:	2149      	movs	r1, #73	; 0x49
   2db78:	4820      	ldr	r0, [pc, #128]	; (2dbfc <nrf_cloud_pgps_find_prediction+0x2c4>)
		LOG_ERR("cannot start prediction expiration timer; delta = %d", (int32_t)delta);
   2db7a:	f00e ffc1 	bl	3cb00 <z_log_minimal_printk>
   2db7e:	e709      	b.n	2d994 <nrf_cloud_pgps_find_prediction+0x5c>
   2db80:	462a      	mov	r2, r5
   2db82:	2145      	movs	r1, #69	; 0x45
   2db84:	481e      	ldr	r0, [pc, #120]	; (2dc00 <nrf_cloud_pgps_find_prediction+0x2c8>)
   2db86:	e7f8      	b.n	2db7a <nrf_cloud_pgps_find_prediction+0x242>
	if (nrf_cloud_pgps_loading()) {
   2db88:	f7ff fdf2 	bl	2d770 <nrf_cloud_pgps_loading>
   2db8c:	b128      	cbz	r0, 2db9a <nrf_cloud_pgps_find_prediction+0x262>
		LOG_WRN("Prediction num:%u not loaded yet", pnum);
   2db8e:	4622      	mov	r2, r4
   2db90:	2157      	movs	r1, #87	; 0x57
   2db92:	481c      	ldr	r0, [pc, #112]	; (2dc04 <nrf_cloud_pgps_find_prediction+0x2cc>)
   2db94:	f00e ffb4 	bl	3cb00 <z_log_minimal_printk>
   2db98:	e736      	b.n	2da08 <nrf_cloud_pgps_find_prediction+0xd0>
	LOG_ERR("Prediction num:%u not available; state:%d", pnum, state);
   2db9a:	4b05      	ldr	r3, [pc, #20]	; (2dbb0 <nrf_cloud_pgps_find_prediction+0x278>)
   2db9c:	4622      	mov	r2, r4
   2db9e:	2145      	movs	r1, #69	; 0x45
   2dba0:	781b      	ldrb	r3, [r3, #0]
   2dba2:	4819      	ldr	r0, [pc, #100]	; (2dc08 <nrf_cloud_pgps_find_prediction+0x2d0>)
   2dba4:	f00e ffac 	bl	3cb00 <z_log_minimal_printk>
	return -EINVAL;
   2dba8:	e6db      	b.n	2d962 <nrf_cloud_pgps_find_prediction+0x2a>
   2dbaa:	4604      	mov	r4, r0
   2dbac:	e6f2      	b.n	2d994 <nrf_cloud_pgps_find_prediction+0x5c>
   2dbae:	bf00      	nop
   2dbb0:	2001d2bf 	.word	0x2001d2bf
   2dbb4:	20015810 	.word	0x20015810
   2dbb8:	00049162 	.word	0x00049162
   2dbbc:	000492c1 	.word	0x000492c1
   2dbc0:	2001a120 	.word	0x2001a120
   2dbc4:	000492e1 	.word	0x000492e1
   2dbc8:	00015180 	.word	0x00015180
   2dbcc:	000492fb 	.word	0x000492fb
   2dbd0:	00049317 	.word	0x00049317
   2dbd4:	00049374 	.word	0x00049374
   2dbd8:	00049394 	.word	0x00049394
   2dbdc:	000493a8 	.word	0x000493a8
   2dbe0:	000493c1 	.word	0x000493c1
   2dbe4:	000493f1 	.word	0x000493f1
   2dbe8:	ffffe0c0 	.word	0xffffe0c0
   2dbec:	00049422 	.word	0x00049422
   2dbf0:	00049435 	.word	0x00049435
   2dbf4:	00049459 	.word	0x00049459
   2dbf8:	20014df8 	.word	0x20014df8
   2dbfc:	00049479 	.word	0x00049479
   2dc00:	000494a6 	.word	0x000494a6
   2dc04:	000494e0 	.word	0x000494e0
   2dc08:	00049506 	.word	0x00049506

0002dc0c <nrf_cloud_pgps_notify_prediction>:
{
   2dc0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct nrf_cloud_pgps_event evt = {
   2dc0e:	2303      	movs	r3, #3
   2dc10:	2500      	movs	r5, #0
   2dc12:	e9cd 5502 	strd	r5, r5, [sp, #8]
   2dc16:	f88d 3008 	strb.w	r3, [sp, #8]
	if (state == PGPS_NONE) {
   2dc1a:	4b22      	ldr	r3, [pc, #136]	; (2dca4 <nrf_cloud_pgps_notify_prediction+0x98>)
   2dc1c:	781b      	ldrb	r3, [r3, #0]
   2dc1e:	b943      	cbnz	r3, 2dc32 <nrf_cloud_pgps_notify_prediction+0x26>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2dc20:	2145      	movs	r1, #69	; 0x45
   2dc22:	4821      	ldr	r0, [pc, #132]	; (2dca8 <nrf_cloud_pgps_notify_prediction+0x9c>)
   2dc24:	f00e ff6c 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   2dc28:	f06f 0415 	mvn.w	r4, #21
}
   2dc2c:	4620      	mov	r0, r4
   2dc2e:	b004      	add	sp, #16
   2dc30:	bd70      	pop	{r4, r5, r6, pc}
	LOG_INF("Searching for prediction");
   2dc32:	2149      	movs	r1, #73	; 0x49
   2dc34:	481d      	ldr	r0, [pc, #116]	; (2dcac <nrf_cloud_pgps_notify_prediction+0xa0>)
   2dc36:	f00e ff63 	bl	3cb00 <z_log_minimal_printk>
	err = nrf_cloud_pgps_find_prediction(&prediction);
   2dc3a:	a801      	add	r0, sp, #4
   2dc3c:	f7ff fe7c 	bl	2d938 <nrf_cloud_pgps_find_prediction>
	if (err == -ELOADING) {
   2dc40:	f46f 53fa 	mvn.w	r3, #8000	; 0x1f40
   2dc44:	4298      	cmp	r0, r3
	err = nrf_cloud_pgps_find_prediction(&prediction);
   2dc46:	4604      	mov	r4, r0
	if (err == -ELOADING) {
   2dc48:	d104      	bne.n	2dc54 <nrf_cloud_pgps_notify_prediction+0x48>
		pgps_need_assistance = true;
   2dc4a:	2201      	movs	r2, #1
   2dc4c:	4b18      	ldr	r3, [pc, #96]	; (2dcb0 <nrf_cloud_pgps_notify_prediction+0xa4>)
   2dc4e:	601a      	str	r2, [r3, #0]
		err = 0;
   2dc50:	462c      	mov	r4, r5
   2dc52:	e7eb      	b.n	2dc2c <nrf_cloud_pgps_notify_prediction+0x20>
	} else if (err < 0) {
   2dc54:	2800      	cmp	r0, #0
   2dc56:	da12      	bge.n	2dc7e <nrf_cloud_pgps_notify_prediction+0x72>
		if (!pgps_need_assistance) {
   2dc58:	4d15      	ldr	r5, [pc, #84]	; (2dcb0 <nrf_cloud_pgps_notify_prediction+0xa4>)
   2dc5a:	682e      	ldr	r6, [r5, #0]
   2dc5c:	b10e      	cbz	r6, 2dc62 <nrf_cloud_pgps_notify_prediction+0x56>
			err = 0;
   2dc5e:	2400      	movs	r4, #0
   2dc60:	e7e4      	b.n	2dc2c <nrf_cloud_pgps_notify_prediction+0x20>
			pgps_need_assistance = true;
   2dc62:	2301      	movs	r3, #1
   2dc64:	602b      	str	r3, [r5, #0]
			err = pgps_request_all();
   2dc66:	f7ff fe2d 	bl	2d8c4 <pgps_request_all>
			if (err) {
   2dc6a:	4604      	mov	r4, r0
   2dc6c:	2800      	cmp	r0, #0
   2dc6e:	d0dd      	beq.n	2dc2c <nrf_cloud_pgps_notify_prediction+0x20>
				LOG_ERR("Error while requesting pgps set: %d", err);
   2dc70:	4602      	mov	r2, r0
   2dc72:	2145      	movs	r1, #69	; 0x45
   2dc74:	480f      	ldr	r0, [pc, #60]	; (2dcb4 <nrf_cloud_pgps_notify_prediction+0xa8>)
   2dc76:	f00e ff43 	bl	3cb00 <z_log_minimal_printk>
				pgps_need_assistance = false; /* try again next time */
   2dc7a:	602e      	str	r6, [r5, #0]
   2dc7c:	e7d6      	b.n	2dc2c <nrf_cloud_pgps_notify_prediction+0x20>
	} else if ((err >= 0) && (err < NUM_PREDICTIONS)) {
   2dc7e:	2829      	cmp	r0, #41	; 0x29
   2dc80:	dcd4      	bgt.n	2dc2c <nrf_cloud_pgps_notify_prediction+0x20>
		LOG_INF("Found P-GPS prediction %d", pnum);
   2dc82:	4602      	mov	r2, r0
   2dc84:	2149      	movs	r1, #73	; 0x49
   2dc86:	480c      	ldr	r0, [pc, #48]	; (2dcb8 <nrf_cloud_pgps_notify_prediction+0xac>)
   2dc88:	f00e ff3a 	bl	3cb00 <z_log_minimal_printk>
		pgps_need_assistance = false;
   2dc8c:	4b08      	ldr	r3, [pc, #32]	; (2dcb0 <nrf_cloud_pgps_notify_prediction+0xa4>)
   2dc8e:	601d      	str	r5, [r3, #0]
		if (evt_handler) {
   2dc90:	4b0a      	ldr	r3, [pc, #40]	; (2dcbc <nrf_cloud_pgps_notify_prediction+0xb0>)
   2dc92:	681b      	ldr	r3, [r3, #0]
   2dc94:	2b00      	cmp	r3, #0
   2dc96:	d0e2      	beq.n	2dc5e <nrf_cloud_pgps_notify_prediction+0x52>
			evt.prediction = prediction;
   2dc98:	9a01      	ldr	r2, [sp, #4]
			evt_handler(&evt);
   2dc9a:	a802      	add	r0, sp, #8
			evt.prediction = prediction;
   2dc9c:	9203      	str	r2, [sp, #12]
			evt_handler(&evt);
   2dc9e:	4798      	blx	r3
   2dca0:	e7d6      	b.n	2dc50 <nrf_cloud_pgps_notify_prediction+0x44>
   2dca2:	bf00      	nop
   2dca4:	2001d2bf 	.word	0x2001d2bf
   2dca8:	00049162 	.word	0x00049162
   2dcac:	00049535 	.word	0x00049535
   2dcb0:	2001a120 	.word	0x2001a120
   2dcb4:	00049553 	.word	0x00049553
   2dcb8:	0004957c 	.word	0x0004957c
   2dcbc:	2001a114 	.word	0x2001a114

0002dcc0 <process_buffer>:
{
   2dcc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (index.dl_offset == 0) {
   2dcc4:	4c98      	ldr	r4, [pc, #608]	; (2df28 <process_buffer+0x268>)
{
   2dcc6:	4605      	mov	r5, r0
	if (index.dl_offset == 0) {
   2dcc8:	6a23      	ldr	r3, [r4, #32]
{
   2dcca:	468a      	mov	sl, r1
   2dccc:	b08d      	sub	sp, #52	; 0x34
	if (index.dl_offset == 0) {
   2dcce:	2b00      	cmp	r3, #0
   2dcd0:	d14e      	bne.n	2dd70 <process_buffer+0xb0>
		if (len < sizeof(*header)) {
   2dcd2:	290f      	cmp	r1, #15
   2dcd4:	d904      	bls.n	2dce0 <process_buffer+0x20>
	if (!validate_pgps_header(header)) {
   2dcd6:	f7ff fc05 	bl	2d4e4 <validate_pgps_header>
   2dcda:	b920      	cbnz	r0, 2dce6 <process_buffer+0x26>
		state = PGPS_NONE;
   2dcdc:	4b93      	ldr	r3, [pc, #588]	; (2df2c <process_buffer+0x26c>)
   2dcde:	7018      	strb	r0, [r3, #0]
			return -EINVAL; /* need full header, for now */
   2dce0:	f06f 0615 	mvn.w	r6, #21
   2dce4:	e179      	b.n	2dfda <process_buffer+0x31a>
	if (index.partial_request) {
   2dce6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   2dcea:	b163      	cbz	r3, 2dd06 <process_buffer+0x46>
		LOG_INF("Partial request; starting at prediction num:%u", index.pnum_offset);
   2dcec:	2149      	movs	r1, #73	; 0x49
   2dcee:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   2dcf2:	488f      	ldr	r0, [pc, #572]	; (2df30 <process_buffer+0x270>)
   2dcf4:	f00e ff04 	bl	3cb00 <z_log_minimal_printk>
		header->prediction_count = index.header.prediction_count;
   2dcf8:	88a3      	ldrh	r3, [r4, #4]
   2dcfa:	80ab      	strh	r3, [r5, #4]
		header->gps_day = index.header.gps_day;
   2dcfc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   2dd00:	816b      	strh	r3, [r5, #10]
		header->gps_time_of_day = index.header.gps_time_of_day;
   2dd02:	68e3      	ldr	r3, [r4, #12]
   2dd04:	60eb      	str	r3, [r5, #12]
		LOG_INF("Storing P-GPS header");
   2dd06:	2149      	movs	r1, #73	; 0x49
   2dd08:	488a      	ldr	r0, [pc, #552]	; (2df34 <process_buffer+0x274>)
   2dd0a:	f00e fef9 	bl	3cb00 <z_log_minimal_printk>
		cache_pgps_header(header);
   2dd0e:	4628      	mov	r0, r5
   2dd10:	f7ff fc1a 	bl	2d548 <cache_pgps_header>
		err = npgps_get_shifted_time(&gps_sec, NULL, NULL,
   2dd14:	2200      	movs	r2, #0
   2dd16:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   2dd1a:	4611      	mov	r1, r2
   2dd1c:	a808      	add	r0, sp, #32
   2dd1e:	f000 ff1d 	bl	2eb5c <npgps_get_shifted_time>
		if (!err) {
   2dd22:	2800      	cmp	r0, #0
   2dd24:	d172      	bne.n	2de0c <process_buffer+0x14c>
			if ((index.start_sec <= gps_sec) &&
   2dd26:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   2dd2a:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
   2dd2e:	4293      	cmp	r3, r2
   2dd30:	eb71 0000 	sbcs.w	r0, r1, r0
   2dd34:	db55      	blt.n	2dde2 <process_buffer+0x122>
			    (gps_sec <= index.end_sec)) {
   2dd36:	e9d4 2006 	ldrd	r2, r0, [r4, #24]
			if ((index.start_sec <= gps_sec) &&
   2dd3a:	429a      	cmp	r2, r3
   2dd3c:	eb70 0101 	sbcs.w	r1, r0, r1
   2dd40:	db60      	blt.n	2de04 <process_buffer+0x144>
				LOG_INF("Received data covers good timeframe");
   2dd42:	2149      	movs	r1, #73	; 0x49
   2dd44:	487c      	ldr	r0, [pc, #496]	; (2df38 <process_buffer+0x278>)
			LOG_WRN("Current time unknown; assume data's timeframe is valid");
   2dd46:	f00e fedb 	bl	3cb00 <z_log_minimal_printk>
		log_pgps_header("pgps_header: ", header);
   2dd4a:	4629      	mov	r1, r5
   2dd4c:	487b      	ldr	r0, [pc, #492]	; (2df3c <process_buffer+0x27c>)
   2dd4e:	f7ff fbab 	bl	2d4a8 <log_pgps_header>
		npgps_save_header(header);
   2dd52:	4628      	mov	r0, r5
   2dd54:	f000 feaa 	bl	2eaac <npgps_save_header>
		index.dl_offset += sizeof(*header);
   2dd58:	6a23      	ldr	r3, [r4, #32]
		len -= sizeof(*header);
   2dd5a:	f1aa 0a10 	sub.w	sl, sl, #16
		index.dl_offset += sizeof(*header);
   2dd5e:	3310      	adds	r3, #16
   2dd60:	6223      	str	r3, [r4, #32]
		index.dl_pnum = index.pnum_offset;
   2dd62:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
		buf += sizeof(*header);
   2dd66:	3510      	adds	r5, #16
		index.dl_pnum = index.pnum_offset;
   2dd68:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		index.pred_offset = 0;
   2dd6c:	2300      	movs	r3, #0
   2dd6e:	84a3      	strh	r3, [r4, #36]	; 0x24
	need = MIN((PGPS_PREDICTION_DL_SIZE - index.pred_offset), len);
   2dd70:	f240 79d6 	movw	r9, #2006	; 0x7d6
   2dd74:	8ca6      	ldrh	r6, [r4, #36]	; 0x24
	memcpy(&prediction_buf[index.pred_offset], buf, need);
   2dd76:	4f72      	ldr	r7, [pc, #456]	; (2df40 <process_buffer+0x280>)
	need = MIN((PGPS_PREDICTION_DL_SIZE - index.pred_offset), len);
   2dd78:	eba9 0806 	sub.w	r8, r9, r6
   2dd7c:	45d0      	cmp	r8, sl
   2dd7e:	bf28      	it	cs
   2dd80:	46d0      	movcs	r8, sl
   2dd82:	19b8      	adds	r0, r7, r6
   2dd84:	4642      	mov	r2, r8
   2dd86:	4629      	mov	r1, r5
   2dd88:	f013 fb34 	bl	413f4 <memcpy>
	len -= need;
   2dd8c:	ebaa 0308 	sub.w	r3, sl, r8
   2dd90:	9303      	str	r3, [sp, #12]
	index.pred_offset += need;
   2dd92:	4446      	add	r6, r8
	index.dl_offset += need;
   2dd94:	6a23      	ldr	r3, [r4, #32]
	index.pred_offset += need;
   2dd96:	b2b6      	uxth	r6, r6
	index.dl_offset += need;
   2dd98:	4443      	add	r3, r8
	if (index.pred_offset == PGPS_PREDICTION_DL_SIZE) {
   2dd9a:	454e      	cmp	r6, r9
	index.pred_offset += need;
   2dd9c:	84a6      	strh	r6, [r4, #36]	; 0x24
	index.dl_offset += need;
   2dd9e:	6223      	str	r3, [r4, #32]
	if (index.pred_offset == PGPS_PREDICTION_DL_SIZE) {
   2dda0:	d17f      	bne.n	2dea2 <process_buffer+0x1e2>
	struct agps_header *elem = (struct agps_header *)element_ptr;
	size_t parsed_len = 0;
	int64_t gps_sec;
	bool finished = false;

	gps_sec = 0;
   2dda2:	2600      	movs	r6, #0
	size_t parsed_len = 0;
   2dda4:	46b1      	mov	r9, r6
		err = consume_pgps_data(index.dl_pnum, prediction_buf,
   2dda6:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
	gps_sec = 0;
   2ddaa:	9604      	str	r6, [sp, #16]
	if (elements_left_to_process == 0) {
   2ddac:	4b65      	ldr	r3, [pc, #404]	; (2df44 <process_buffer+0x284>)
   2ddae:	881a      	ldrh	r2, [r3, #0]
   2ddb0:	bb7a      	cbnz	r2, 2de12 <process_buffer+0x152>
		element_type = element->type;
   2ddb2:	4a65      	ldr	r2, [pc, #404]	; (2df48 <process_buffer+0x288>)
		element->type = (enum nrf_cloud_agps_type)
   2ddb4:	7839      	ldrb	r1, [r7, #0]
		element_type = element->type;
   2ddb6:	7011      	strb	r1, [r2, #0]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2ddb8:	f8b7 2001 	ldrh.w	r2, [r7, #1]
   2ddbc:	3a01      	subs	r2, #1
		elements_left_to_process =
   2ddbe:	801a      	strh	r2, [r3, #0]
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   2ddc0:	2203      	movs	r2, #3
	switch (element->type) {
   2ddc2:	2902      	cmp	r1, #2
   2ddc4:	d02c      	beq.n	2de20 <process_buffer+0x160>
   2ddc6:	2907      	cmp	r1, #7
   2ddc8:	d03c      	beq.n	2de44 <process_buffer+0x184>
	while (parsed_len < buf_len) {
		bool empty;
		size_t element_size = get_next_pgps_element(&element, element_ptr);

		if (element_size == 0) {
			LOG_INF("  End of element");
   2ddca:	2149      	movs	r1, #73	; 0x49
   2ddcc:	485f      	ldr	r0, [pc, #380]	; (2df4c <process_buffer+0x28c>)
   2ddce:	f00e fe97 	bl	3cb00 <z_log_minimal_printk>
					return err;
				}
			}
		}
	} else {
		LOG_ERR("Parsing incomplete; aborting.");
   2ddd2:	2145      	movs	r1, #69	; 0x45
   2ddd4:	485e      	ldr	r0, [pc, #376]	; (2df50 <process_buffer+0x290>)
   2ddd6:	f00e fe93 	bl	3cb00 <z_log_minimal_printk>
		state = PGPS_NONE;
   2ddda:	2200      	movs	r2, #0
   2dddc:	4b53      	ldr	r3, [pc, #332]	; (2df2c <process_buffer+0x26c>)
   2ddde:	701a      	strb	r2, [r3, #0]
		if (err) {
   2dde0:	e77e      	b.n	2dce0 <process_buffer+0x20>
					LOG_ERR("Received data is not within required "
   2dde2:	2145      	movs	r1, #69	; 0x45
   2dde4:	485b      	ldr	r0, [pc, #364]	; (2df54 <process_buffer+0x294>)
   2dde6:	1ad2      	subs	r2, r2, r3
					LOG_ERR("Received data is not within required "
   2dde8:	f00e fe8a 	bl	3cb00 <z_log_minimal_printk>
				index.stale_server_data = true;
   2ddec:	2301      	movs	r3, #1
__ssp_bos_icheck3(memset, void *, int)
   2ddee:	2210      	movs	r2, #16
   2ddf0:	2100      	movs	r1, #0
   2ddf2:	4628      	mov	r0, r5
   2ddf4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   2ddf8:	f013 fb1c 	bl	41434 <memset>
				cache_pgps_header(header);
   2ddfc:	4628      	mov	r0, r5
   2ddfe:	f7ff fba3 	bl	2d548 <cache_pgps_header>
				return -EINVAL;
   2de02:	e76d      	b.n	2dce0 <process_buffer+0x20>
					LOG_ERR("Received data is not within required "
   2de04:	2145      	movs	r1, #69	; 0x45
   2de06:	4854      	ldr	r0, [pc, #336]	; (2df58 <process_buffer+0x298>)
   2de08:	1a9a      	subs	r2, r3, r2
   2de0a:	e7ed      	b.n	2dde8 <process_buffer+0x128>
			LOG_WRN("Current time unknown; assume data's timeframe is valid");
   2de0c:	2157      	movs	r1, #87	; 0x57
   2de0e:	4853      	ldr	r0, [pc, #332]	; (2df5c <process_buffer+0x29c>)
   2de10:	e799      	b.n	2dd46 <process_buffer+0x86>
		element->type = element_type;
   2de12:	4b4d      	ldr	r3, [pc, #308]	; (2df48 <process_buffer+0x288>)
		elements_left_to_process -= 1;
   2de14:	3a01      	subs	r2, #1
		element->type = element_type;
   2de16:	7819      	ldrb	r1, [r3, #0]
		elements_left_to_process -= 1;
   2de18:	4b4a      	ldr	r3, [pc, #296]	; (2df44 <process_buffer+0x284>)
   2de1a:	801a      	strh	r2, [r3, #0]
	size_t len = 0;
   2de1c:	2200      	movs	r2, #0
   2de1e:	e7d0      	b.n	2ddc2 <process_buffer+0x102>
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   2de20:	4639      	mov	r1, r7
   2de22:	f102 0b3e 	add.w	fp, r2, #62	; 0x3e
		switch (element.type) {
   2de26:	f107 003d 	add.w	r0, r7, #61	; 0x3d
			for (int i = 1; i < sizeof(struct nrf_cloud_agps_ephemeris); i++) {
   2de2a:	4288      	cmp	r0, r1
   2de2c:	d13f      	bne.n	2deae <process_buffer+0x1ee>
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2de2e:	18bb      	adds	r3, r7, r2
				LOG_INF("Marking ephemeris:%u as empty",
   2de30:	2149      	movs	r1, #73	; 0x49
   2de32:	5cba      	ldrb	r2, [r7, r2]
   2de34:	484a      	ldr	r0, [pc, #296]	; (2df60 <process_buffer+0x2a0>)
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2de36:	9305      	str	r3, [sp, #20]
				LOG_INF("Marking ephemeris:%u as empty",
   2de38:	f00e fe62 	bl	3cb00 <z_log_minimal_printk>
				element.ephemeris->health = NRF_CLOUD_PGPS_EMPTY_EPHEM_HEALTH;
   2de3c:	22ff      	movs	r2, #255	; 0xff
   2de3e:	9b05      	ldr	r3, [sp, #20]
   2de40:	705a      	strb	r2, [r3, #1]
   2de42:	e009      	b.n	2de58 <process_buffer+0x198>
			(struct nrf_cloud_agps_system_time *)(buf + len);
   2de44:	18b9      	adds	r1, r7, r2
			gps_sec = npgps_gps_day_time_to_sec(element.time_and_tow->date_day,
   2de46:	f8d1 1002 	ldr.w	r1, [r1, #2]
   2de4a:	5ab8      	ldrh	r0, [r7, r2]
		len += sizeof(struct nrf_cloud_agps_system_time) -
   2de4c:	f102 0b10 	add.w	fp, r2, #16
			gps_sec = npgps_gps_day_time_to_sec(element.time_and_tow->date_day,
   2de50:	f000 fe66 	bl	2eb20 <npgps_gps_day_time_to_sec>
   2de54:	4606      	mov	r6, r0
   2de56:	9104      	str	r1, [sp, #16]
	while (parsed_len < buf_len) {
   2de58:	f240 72d5 	movw	r2, #2005	; 0x7d5
		parsed_len += element_size;
   2de5c:	44d9      	add	r9, fp
	while (parsed_len < buf_len) {
   2de5e:	4591      	cmp	r9, r2
		element_ptr += element_size;
   2de60:	445f      	add	r7, fp
	while (parsed_len < buf_len) {
   2de62:	d9a3      	bls.n	2ddac <process_buffer+0xec>
	if (parsed_len == buf_len) {
   2de64:	f240 73d6 	movw	r3, #2006	; 0x7d6
   2de68:	4599      	cmp	r9, r3
   2de6a:	d1b2      	bne.n	2ddd2 <process_buffer+0x112>
		if (index.predictions[pnum]) {
   2de6c:	f10a 090e 	add.w	r9, sl, #14
   2de70:	eb04 0389 	add.w	r3, r4, r9, lsl #2
   2de74:	685b      	ldr	r3, [r3, #4]
   2de76:	b1fb      	cbz	r3, 2deb8 <process_buffer+0x1f8>
			LOG_WRN("Received duplicate packet; ignoring");
   2de78:	2157      	movs	r1, #87	; 0x57
   2de7a:	483a      	ldr	r0, [pc, #232]	; (2df64 <process_buffer+0x2a4>)
			LOG_ERR("Prediction did not include GPS day and time of day; ignoring");
   2de7c:	f00e fe40 	bl	3cb00 <z_log_minimal_printk>
		if (len) { /* keep extra data for next time */
   2de80:	9b03      	ldr	r3, [sp, #12]
   2de82:	b13b      	cbz	r3, 2de94 <process_buffer+0x1d4>
			memcpy(prediction_buf, buf, len);
   2de84:	f44f 6300 	mov.w	r3, #2048	; 0x800
   2de88:	9a03      	ldr	r2, [sp, #12]
   2de8a:	482d      	ldr	r0, [pc, #180]	; (2df40 <process_buffer+0x280>)
   2de8c:	eb05 0108 	add.w	r1, r5, r8
   2de90:	f013 fabd 	bl	4140e <__memcpy_chk>
		index.pred_offset = len;
   2de94:	9b03      	ldr	r3, [sp, #12]
   2de96:	84a3      	strh	r3, [r4, #36]	; 0x24
		index.dl_pnum++;
   2de98:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   2de9c:	3301      	adds	r3, #1
   2de9e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	index.dl_offset += len;
   2dea2:	6a23      	ldr	r3, [r4, #32]
   2dea4:	9a03      	ldr	r2, [sp, #12]
	return 0;
   2dea6:	2600      	movs	r6, #0
	index.dl_offset += len;
   2dea8:	4413      	add	r3, r2
   2deaa:	6223      	str	r3, [r4, #32]
	return 0;
   2deac:	e095      	b.n	2dfda <process_buffer+0x31a>
				if (element_ptr[i] != 0) {
   2deae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2deb2:	2b00      	cmp	r3, #0
   2deb4:	d0b9      	beq.n	2de2a <process_buffer+0x16a>
   2deb6:	e7cf      	b.n	2de58 <process_buffer+0x198>
		} else if (gps_sec == 0) {
   2deb8:	9b04      	ldr	r3, [sp, #16]
   2deba:	4333      	orrs	r3, r6
   2debc:	d102      	bne.n	2dec4 <process_buffer+0x204>
			LOG_ERR("Prediction did not include GPS day and time of day; ignoring");
   2debe:	2145      	movs	r1, #69	; 0x45
   2dec0:	4829      	ldr	r0, [pc, #164]	; (2df68 <process_buffer+0x2a8>)
   2dec2:	e7db      	b.n	2de7c <process_buffer+0x1bc>
			LOG_INF("Storing prediction num:%u idx:%u for gps sec:%d",
   2dec4:	4652      	mov	r2, sl
   2dec6:	2149      	movs	r1, #73	; 0x49
   2dec8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   2deca:	4828      	ldr	r0, [pc, #160]	; (2df6c <process_buffer+0x2ac>)
   2decc:	9600      	str	r6, [sp, #0]
   2dece:	f00e fe17 	bl	3cb00 <z_log_minimal_printk>
			index.loading_count++;
   2ded2:	8d27      	ldrh	r7, [r4, #40]	; 0x28
			finished = (index.loading_count == index.expected_count);
   2ded4:	f8b4 b026 	ldrh.w	fp, [r4, #38]	; 0x26
			index.loading_count++;
   2ded8:	3701      	adds	r7, #1
   2deda:	b2bf      	uxth	r7, r7
					 finished || (index.storage_extent == 1));
   2dedc:	455f      	cmp	r7, fp
			index.loading_count++;
   2dede:	8527      	strh	r7, [r4, #40]	; 0x28
					 finished || (index.storage_extent == 1));
   2dee0:	d01f      	beq.n	2df22 <process_buffer+0x262>
   2dee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2dee4:	3b01      	subs	r3, #1
   2dee6:	f1d3 0a00 	rsbs	sl, r3, #0
   2deea:	eb4a 0a03 	adc.w	sl, sl, r3
	uint8_t schema = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2deee:	2301      	movs	r3, #1
   2def0:	960a      	str	r6, [sp, #40]	; 0x28
	if (first) {
   2def2:	4e1f      	ldr	r6, [pc, #124]	; (2df70 <process_buffer+0x2b0>)
	uint8_t schema = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2def4:	f88d 301f 	strb.w	r3, [sp, #31]
	if (first) {
   2def8:	7833      	ldrb	r3, [r6, #0]
   2defa:	b133      	cbz	r3, 2df0a <process_buffer+0x24a>
		memset(pad, 0xff, PGPS_PREDICTION_PAD);
   2defc:	2225      	movs	r2, #37	; 0x25
   2defe:	21ff      	movs	r1, #255	; 0xff
   2df00:	481c      	ldr	r0, [pc, #112]	; (2df74 <process_buffer+0x2b4>)
   2df02:	f013 fa97 	bl	41434 <memset>
		first = false;
   2df06:	2300      	movs	r3, #0
   2df08:	7033      	strb	r3, [r6, #0]
	err = stream_flash_buffered_write(&stream, p, schema_offset, false);
   2df0a:	2300      	movs	r3, #0
   2df0c:	2213      	movs	r2, #19
   2df0e:	490c      	ldr	r1, [pc, #48]	; (2df40 <process_buffer+0x280>)
   2df10:	4819      	ldr	r0, [pc, #100]	; (2df78 <process_buffer+0x2b8>)
   2df12:	f00f fae9 	bl	3d4e8 <stream_flash_buffered_write>
	if (err) {
   2df16:	4603      	mov	r3, r0
   2df18:	b390      	cbz	r0, 2df80 <process_buffer+0x2c0>
		LOG_ERR("Error writing pgps prediction:%d", err);
   2df1a:	461a      	mov	r2, r3
   2df1c:	2145      	movs	r1, #69	; 0x45
   2df1e:	4817      	ldr	r0, [pc, #92]	; (2df7c <process_buffer+0x2bc>)
   2df20:	e039      	b.n	2df96 <process_buffer+0x2d6>
					 finished || (index.storage_extent == 1));
   2df22:	f04f 0a01 	mov.w	sl, #1
   2df26:	e7e2      	b.n	2deee <process_buffer+0x22e>
   2df28:	20015810 	.word	0x20015810
   2df2c:	2001d2bf 	.word	0x2001d2bf
   2df30:	0004959b 	.word	0x0004959b
   2df34:	000495cf 	.word	0x000495cf
   2df38:	000495e9 	.word	0x000495e9
   2df3c:	0004971e 	.word	0x0004971e
   2df40:	2001cabf 	.word	0x2001cabf
   2df44:	2001a592 	.word	0x2001a592
   2df48:	2001c958 	.word	0x2001c958
   2df4c:	0004972c 	.word	0x0004972c
   2df50:	000498f0 	.word	0x000498f0
   2df54:	00049612 	.word	0x00049612
   2df58:	0004967c 	.word	0x0004967c
   2df5c:	000496e2 	.word	0x000496e2
   2df60:	00049913 	.word	0x00049913
   2df64:	00049742 	.word	0x00049742
   2df68:	0004976b 	.word	0x0004976b
   2df6c:	000497ad 	.word	0x000497ad
   2df70:	20014c45 	.word	0x20014c45
   2df74:	2001c9da 	.word	0x2001c9da
   2df78:	2001a12c 	.word	0x2001a12c
   2df7c:	000497e2 	.word	0x000497e2
	err = stream_flash_buffered_write(&stream, &schema, sizeof(schema), false);
   2df80:	2201      	movs	r2, #1
   2df82:	484d      	ldr	r0, [pc, #308]	; (2e0b8 <process_buffer+0x3f8>)
   2df84:	f10d 011f 	add.w	r1, sp, #31
   2df88:	f00f faae 	bl	3d4e8 <stream_flash_buffered_write>
	if (err) {
   2df8c:	4603      	mov	r3, r0
   2df8e:	b340      	cbz	r0, 2dfe2 <process_buffer+0x322>
		LOG_ERR("Error writing schema:%d", err);
   2df90:	2145      	movs	r1, #69	; 0x45
   2df92:	4602      	mov	r2, r0
   2df94:	4849      	ldr	r0, [pc, #292]	; (2e0bc <process_buffer+0x3fc>)
		LOG_ERR("Error writing sentinel:%d", err);
   2df96:	f00e fdb3 	bl	3cb00 <z_log_minimal_printk>
			index.predictions[pnum] = npgps_block_to_pointer(index.store_block);
   2df9a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2df9c:	f000 ff5e 	bl	2ee5c <npgps_block_to_pointer>
			if (pgps_need_assistance &&
   2dfa0:	4b47      	ldr	r3, [pc, #284]	; (2e0c0 <process_buffer+0x400>)
			index.predictions[pnum] = npgps_block_to_pointer(index.store_block);
   2dfa2:	eb04 0989 	add.w	r9, r4, r9, lsl #2
			if (pgps_need_assistance &&
   2dfa6:	681b      	ldr	r3, [r3, #0]
   2dfa8:	4e46      	ldr	r6, [pc, #280]	; (2e0c4 <process_buffer+0x404>)
			index.predictions[pnum] = npgps_block_to_pointer(index.store_block);
   2dfaa:	f8c9 0004 	str.w	r0, [r9, #4]
			if (pgps_need_assistance &&
   2dfae:	2b00      	cmp	r3, #0
   2dfb0:	d039      	beq.n	2e026 <process_buffer+0x366>
   2dfb2:	455f      	cmp	r7, fp
   2dfb4:	d035      	beq.n	2e022 <process_buffer+0x362>
			    (finished || (index.loading_count > 1))) {
   2dfb6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   2dfb8:	2b01      	cmp	r3, #1
   2dfba:	d832      	bhi.n	2e022 <process_buffer+0x362>
				if (evt_handler) {
   2dfbc:	6833      	ldr	r3, [r6, #0]
   2dfbe:	2b00      	cmp	r3, #0
   2dfc0:	d146      	bne.n	2e050 <process_buffer+0x390>
			index.store_block = npgps_alloc_block();
   2dfc2:	f000 fe49 	bl	2ec58 <npgps_alloc_block>
   2dfc6:	4603      	mov	r3, r0
			if (index.store_block == NO_BLOCK) {
   2dfc8:	3301      	adds	r3, #1
			index.store_block = npgps_alloc_block();
   2dfca:	63a0      	str	r0, [r4, #56]	; 0x38
			if (index.store_block == NO_BLOCK) {
   2dfcc:	d149      	bne.n	2e062 <process_buffer+0x3a2>
				LOG_ERR("No more free blocks!");
   2dfce:	2145      	movs	r1, #69	; 0x45
   2dfd0:	483d      	ldr	r0, [pc, #244]	; (2e0c8 <process_buffer+0x408>)
   2dfd2:	f00e fd95 	bl	3cb00 <z_log_minimal_printk>
				return -ENOMEM;
   2dfd6:	f06f 060b 	mvn.w	r6, #11
}
   2dfda:	4630      	mov	r0, r6
   2dfdc:	b00d      	add	sp, #52	; 0x34
   2dfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = stream_flash_buffered_write(&stream, p, len, false);
   2dfe2:	f240 72c3 	movw	r2, #1987	; 0x7c3
   2dfe6:	4939      	ldr	r1, [pc, #228]	; (2e0cc <process_buffer+0x40c>)
   2dfe8:	4833      	ldr	r0, [pc, #204]	; (2e0b8 <process_buffer+0x3f8>)
   2dfea:	f00f fa7d 	bl	3d4e8 <stream_flash_buffered_write>
	if (err) {
   2dfee:	4603      	mov	r3, r0
   2dff0:	2800      	cmp	r0, #0
   2dff2:	d192      	bne.n	2df1a <process_buffer+0x25a>
	err = stream_flash_buffered_write(&stream, (uint8_t *)&sentinel,
   2dff4:	2204      	movs	r2, #4
   2dff6:	4830      	ldr	r0, [pc, #192]	; (2e0b8 <process_buffer+0x3f8>)
   2dff8:	a90a      	add	r1, sp, #40	; 0x28
   2dffa:	f00f fa75 	bl	3d4e8 <stream_flash_buffered_write>
	if (err) {
   2dffe:	4602      	mov	r2, r0
   2e000:	b118      	cbz	r0, 2e00a <process_buffer+0x34a>
		LOG_ERR("Error writing sentinel:%d", err);
   2e002:	2145      	movs	r1, #69	; 0x45
   2e004:	4832      	ldr	r0, [pc, #200]	; (2e0d0 <process_buffer+0x410>)
   2e006:	f00e fd7b 	bl	3cb00 <z_log_minimal_printk>
	err = stream_flash_buffered_write(&stream, pad, PGPS_PREDICTION_PAD, last);
   2e00a:	2225      	movs	r2, #37	; 0x25
   2e00c:	4653      	mov	r3, sl
   2e00e:	4931      	ldr	r1, [pc, #196]	; (2e0d4 <process_buffer+0x414>)
   2e010:	4829      	ldr	r0, [pc, #164]	; (2e0b8 <process_buffer+0x3f8>)
   2e012:	f00f fa69 	bl	3d4e8 <stream_flash_buffered_write>
	if (err) {
   2e016:	4602      	mov	r2, r0
   2e018:	2800      	cmp	r0, #0
   2e01a:	d0be      	beq.n	2df9a <process_buffer+0x2da>
		LOG_ERR("Error writing sentinel:%d", err);
   2e01c:	2145      	movs	r1, #69	; 0x45
   2e01e:	482c      	ldr	r0, [pc, #176]	; (2e0d0 <process_buffer+0x410>)
   2e020:	e7b9      	b.n	2df96 <process_buffer+0x2d6>
				nrf_cloud_pgps_notify_prediction();
   2e022:	f7ff fdf3 	bl	2dc0c <nrf_cloud_pgps_notify_prediction>
			if (!finished) {
   2e026:	455f      	cmp	r7, fp
   2e028:	d1c8      	bne.n	2dfbc <process_buffer+0x2fc>
				LOG_INF("All P-GPS data received. Done.");
   2e02a:	2149      	movs	r1, #73	; 0x49
   2e02c:	482a      	ldr	r0, [pc, #168]	; (2e0d8 <process_buffer+0x418>)
   2e02e:	f00e fd67 	bl	3cb00 <z_log_minimal_printk>
				state = PGPS_READY;
   2e032:	2206      	movs	r2, #6
   2e034:	4b29      	ldr	r3, [pc, #164]	; (2e0dc <process_buffer+0x41c>)
   2e036:	701a      	strb	r2, [r3, #0]
				if (evt_handler) {
   2e038:	6833      	ldr	r3, [r6, #0]
   2e03a:	b133      	cbz	r3, 2e04a <process_buffer+0x38a>
					struct nrf_cloud_pgps_event evt = {
   2e03c:	2204      	movs	r2, #4
   2e03e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   2e042:	2200      	movs	r2, #0
					evt_handler(&evt);
   2e044:	a80a      	add	r0, sp, #40	; 0x28
					struct nrf_cloud_pgps_event evt = {
   2e046:	920b      	str	r2, [sp, #44]	; 0x2c
					evt_handler(&evt);
   2e048:	4798      	blx	r3
				npgps_print_blocks();
   2e04a:	f000 fe79 	bl	2ed40 <npgps_print_blocks>
		if (err) {
   2e04e:	e717      	b.n	2de80 <process_buffer+0x1c0>
					struct nrf_cloud_pgps_event evt = {
   2e050:	2200      	movs	r2, #0
   2e052:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
   2e056:	2202      	movs	r2, #2
					evt_handler(&evt);
   2e058:	a80a      	add	r0, sp, #40	; 0x28
					struct nrf_cloud_pgps_event evt = {
   2e05a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
					evt_handler(&evt);
   2e05e:	4798      	blx	r3
   2e060:	e7af      	b.n	2dfc2 <process_buffer+0x302>
			index.storage_extent--;
   2e062:	6b66      	ldr	r6, [r4, #52]	; 0x34
   2e064:	3e01      	subs	r6, #1
   2e066:	6366      	str	r6, [r4, #52]	; 0x34
			if (index.storage_extent == 0) {
   2e068:	2e00      	cmp	r6, #0
   2e06a:	f47f af09 	bne.w	2de80 <process_buffer+0x1c0>
				index.storage_extent = npgps_get_block_extent(index.store_block);
   2e06e:	f000 fe1d 	bl	2ecac <npgps_get_block_extent>
				LOG_INF("Moving to new flash region:%d, len:%d",
   2e072:	2149      	movs	r1, #73	; 0x49
				index.storage_extent = npgps_get_block_extent(index.store_block);
   2e074:	4603      	mov	r3, r0
				LOG_INF("Moving to new flash region:%d, len:%d",
   2e076:	6ba2      	ldr	r2, [r4, #56]	; 0x38
				index.storage_extent = npgps_get_block_extent(index.store_block);
   2e078:	6360      	str	r0, [r4, #52]	; 0x34
				LOG_INF("Moving to new flash region:%d, len:%d",
   2e07a:	4819      	ldr	r0, [pc, #100]	; (2e0e0 <process_buffer+0x420>)
   2e07c:	f00e fd40 	bl	3cb00 <z_log_minimal_printk>
	return stream_flash_buffered_write(&stream, NULL, 0, true);
   2e080:	4632      	mov	r2, r6
   2e082:	4631      	mov	r1, r6
   2e084:	2301      	movs	r3, #1
   2e086:	480c      	ldr	r0, [pc, #48]	; (2e0b8 <process_buffer+0x3f8>)
   2e088:	f00f fa2e 	bl	3d4e8 <stream_flash_buffered_write>
				if (err) {
   2e08c:	4606      	mov	r6, r0
   2e08e:	b128      	cbz	r0, 2e09c <process_buffer+0x3dc>
					LOG_ERR("Error flushing storage:%d", err);
   2e090:	2145      	movs	r1, #69	; 0x45
   2e092:	4602      	mov	r2, r0
   2e094:	4813      	ldr	r0, [pc, #76]	; (2e0e4 <process_buffer+0x424>)
					LOG_ERR("Error opening storage again:%d", err);
   2e096:	f00e fd33 	bl	3cb00 <z_log_minimal_printk>
					return err;
   2e09a:	e79e      	b.n	2dfda <process_buffer+0x31a>
				err = open_storage(npgps_block_to_offset(index.store_block),
   2e09c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2e09e:	f000 feb7 	bl	2ee10 <npgps_block_to_offset>
   2e0a2:	4631      	mov	r1, r6
   2e0a4:	f7ff faf6 	bl	2d694 <open_storage>
				if (err) {
   2e0a8:	4606      	mov	r6, r0
   2e0aa:	2800      	cmp	r0, #0
   2e0ac:	f43f aee8 	beq.w	2de80 <process_buffer+0x1c0>
					LOG_ERR("Error opening storage again:%d", err);
   2e0b0:	4602      	mov	r2, r0
   2e0b2:	2145      	movs	r1, #69	; 0x45
   2e0b4:	480c      	ldr	r0, [pc, #48]	; (2e0e8 <process_buffer+0x428>)
   2e0b6:	e7ee      	b.n	2e096 <process_buffer+0x3d6>
   2e0b8:	2001a12c 	.word	0x2001a12c
   2e0bc:	00049808 	.word	0x00049808
   2e0c0:	2001a120 	.word	0x2001a120
   2e0c4:	2001a114 	.word	0x2001a114
   2e0c8:	00049868 	.word	0x00049868
   2e0cc:	2001cad2 	.word	0x2001cad2
   2e0d0:	00049825 	.word	0x00049825
   2e0d4:	2001c9da 	.word	0x2001c9da
   2e0d8:	00049844 	.word	0x00049844
   2e0dc:	2001d2bf 	.word	0x2001d2bf
   2e0e0:	00049882 	.word	0x00049882
   2e0e4:	000498ad 	.word	0x000498ad
   2e0e8:	000498cc 	.word	0x000498cc

0002e0ec <nrf_cloud_pgps_preemptive_updates>:
	uint16_t gps_day = 0;
   2e0ec:	2300      	movs	r3, #0
{
   2e0ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e0f2:	b089      	sub	sp, #36	; 0x24
	uint16_t gps_day = 0;
   2e0f4:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint32_t gps_time_of_day = 0;
   2e0f8:	9304      	str	r3, [sp, #16]
	if (state == PGPS_NONE) {
   2e0fa:	4b4f      	ldr	r3, [pc, #316]	; (2e238 <nrf_cloud_pgps_preemptive_updates+0x14c>)
	int current = index.cur_pnum;
   2e0fc:	4c4f      	ldr	r4, [pc, #316]	; (2e23c <nrf_cloud_pgps_preemptive_updates+0x150>)
	if (state == PGPS_NONE) {
   2e0fe:	781b      	ldrb	r3, [r3, #0]
	int current = index.cur_pnum;
   2e100:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
	uint16_t period_min = index.header.prediction_period_min;
   2e104:	8927      	ldrh	r7, [r4, #8]
	if (state == PGPS_NONE) {
   2e106:	b943      	cbnz	r3, 2e11a <nrf_cloud_pgps_preemptive_updates+0x2e>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2e108:	484d      	ldr	r0, [pc, #308]	; (2e240 <nrf_cloud_pgps_preemptive_updates+0x154>)
   2e10a:	2145      	movs	r1, #69	; 0x45
   2e10c:	f00e fcf8 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   2e110:	f06f 0015 	mvn.w	r0, #21
}
   2e114:	b009      	add	sp, #36	; 0x24
   2e116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (nrf_cloud_pgps_loading()) {
   2e11a:	f7ff fb29 	bl	2d770 <nrf_cloud_pgps_loading>
   2e11e:	4606      	mov	r6, r0
   2e120:	b108      	cbz	r0, 2e126 <nrf_cloud_pgps_preemptive_updates+0x3a>
		return 0;
   2e122:	2000      	movs	r0, #0
   2e124:	e7f6      	b.n	2e114 <nrf_cloud_pgps_preemptive_updates+0x28>
	if (current == 0xff) {
   2e126:	2dff      	cmp	r5, #255	; 0xff
   2e128:	d102      	bne.n	2e130 <nrf_cloud_pgps_preemptive_updates+0x44>
		return pgps_request_all();
   2e12a:	f7ff fbcb 	bl	2d8c4 <pgps_request_all>
   2e12e:	e7f1      	b.n	2e114 <nrf_cloud_pgps_preemptive_updates+0x28>
	if ((current + npgps_num_free()) < n) {
   2e130:	f000 fe3e 	bl	2edb0 <npgps_num_free>
   2e134:	4428      	add	r0, r5
   2e136:	2825      	cmp	r0, #37	; 0x25
   2e138:	ddf3      	ble.n	2e122 <nrf_cloud_pgps_preemptive_updates+0x36>
	if (evt_handler) {
   2e13a:	4b42      	ldr	r3, [pc, #264]	; (2e244 <nrf_cloud_pgps_preemptive_updates+0x158>)
   2e13c:	681b      	ldr	r3, [r3, #0]
   2e13e:	b133      	cbz	r3, 2e14e <nrf_cloud_pgps_preemptive_updates+0x62>
		struct nrf_cloud_pgps_event evt = {
   2e140:	2202      	movs	r2, #2
   2e142:	e9cd 6605 	strd	r6, r6, [sp, #20]
		evt_handler(&evt);
   2e146:	a805      	add	r0, sp, #20
		struct nrf_cloud_pgps_event evt = {
   2e148:	f88d 2014 	strb.w	r2, [sp, #20]
		evt_handler(&evt);
   2e14c:	4798      	blx	r3
	LOG_INF("Replacing %d oldest predictions; %d already free",
   2e14e:	f000 fe2f 	bl	2edb0 <npgps_num_free>
   2e152:	462a      	mov	r2, r5
   2e154:	4603      	mov	r3, r0
   2e156:	2149      	movs	r1, #73	; 0x49
   2e158:	483b      	ldr	r0, [pc, #236]	; (2e248 <nrf_cloud_pgps_preemptive_updates+0x15c>)
   2e15a:	f00e fcd1 	bl	3cb00 <z_log_minimal_printk>
	if (current >= n) {
   2e15e:	2d25      	cmp	r5, #37	; 0x25
   2e160:	dd2f      	ble.n	2e1c2 <nrf_cloud_pgps_preemptive_updates+0xd6>
	int last = MIN(num, index.header.prediction_count);
   2e162:	f8b4 8004 	ldrh.w	r8, [r4, #4]
   2e166:	4e39      	ldr	r6, [pc, #228]	; (2e24c <nrf_cloud_pgps_preemptive_updates+0x160>)
   2e168:	45a8      	cmp	r8, r5
   2e16a:	bfa8      	it	ge
   2e16c:	46a8      	movge	r8, r5
	LOG_INF("discarding %d", last);
   2e16e:	2149      	movs	r1, #73	; 0x49
   2e170:	4642      	mov	r2, r8
   2e172:	4837      	ldr	r0, [pc, #220]	; (2e250 <nrf_cloud_pgps_preemptive_updates+0x164>)
   2e174:	f00e fcc4 	bl	3cb00 <z_log_minimal_printk>
	for (pnum = 0; pnum < last; pnum++) {
   2e178:	46b1      	mov	r9, r6
   2e17a:	2500      	movs	r5, #0
		__ASSERT((block != -1), "unexpected ptr:%p for Prediction num:%d",
   2e17c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 2e254 <nrf_cloud_pgps_preemptive_updates+0x168>
   2e180:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 2e258 <nrf_cloud_pgps_preemptive_updates+0x16c>
	for (pnum = 0; pnum < last; pnum++) {
   2e184:	45a8      	cmp	r8, r5
   2e186:	d133      	bne.n	2e1f0 <nrf_cloud_pgps_preemptive_updates+0x104>
	for (i = last; i < index.header.prediction_count; i++) {
   2e188:	462b      	mov	r3, r5
   2e18a:	88a2      	ldrh	r2, [r4, #4]
   2e18c:	4293      	cmp	r3, r2
   2e18e:	db48      	blt.n	2e222 <nrf_cloud_pgps_preemptive_updates+0x136>
		index.predictions[pnum] = NULL;
   2e190:	2100      	movs	r1, #0
	for (pnum = index.header.prediction_count - last; pnum <
   2e192:	1b53      	subs	r3, r2, r5
   2e194:	429a      	cmp	r2, r3
   2e196:	dc4a      	bgt.n	2e22e <nrf_cloud_pgps_preemptive_updates+0x142>
	npgps_print_blocks();
   2e198:	f000 fdd2 	bl	2ed40 <npgps_print_blocks>
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e19c:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   2e1a0:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e1a2:	f10d 020e 	add.w	r2, sp, #14
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e1a6:	4368      	muls	r0, r5
   2e1a8:	18c0      	adds	r0, r0, r3
   2e1aa:	f141 0100 	adc.w	r1, r1, #0
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e1ae:	ab05      	add	r3, sp, #20
		*gps_sec = psec;
   2e1b0:	e9c4 0104 	strd	r0, r1, [r4, #16]
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e1b4:	f000 fcbe 	bl	2eb34 <npgps_gps_sec_to_day_time>
	index.header.gps_day = gps_day;
   2e1b8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2e1bc:	8163      	strh	r3, [r4, #10]
	index.header.gps_time_of_day = gps_time_of_day;
   2e1be:	9b05      	ldr	r3, [sp, #20]
   2e1c0:	60e3      	str	r3, [r4, #12]
	npgps_gps_sec_to_day_time(index.end_sec, &gps_day, &gps_time_of_day);
   2e1c2:	ab04      	add	r3, sp, #16
   2e1c4:	aa03      	add	r2, sp, #12
   2e1c6:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   2e1ca:	f000 fcb3 	bl	2eb34 <npgps_gps_sec_to_day_time>
	request.gps_day = gps_day;
   2e1ce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2e1d2:	f8ad 3018 	strh.w	r3, [sp, #24]
	request.gps_time_of_day = gps_time_of_day;
   2e1d6:	9b04      	ldr	r3, [sp, #16]
   2e1d8:	f8cd 301a 	str.w	r3, [sp, #26]
	request.prediction_count = npgps_num_free();
   2e1dc:	f000 fde8 	bl	2edb0 <npgps_num_free>
   2e1e0:	f8ad 0014 	strh.w	r0, [sp, #20]
	return pgps_request(&request);
   2e1e4:	a805      	add	r0, sp, #20
	request.prediction_period_min = period_min;
   2e1e6:	f8ad 7016 	strh.w	r7, [sp, #22]
	return pgps_request(&request);
   2e1ea:	f7ff facb 	bl	2d784 <pgps_request>
   2e1ee:	e791      	b.n	2e114 <nrf_cloud_pgps_preemptive_updates+0x28>
		block = npgps_pointer_to_block((uint8_t *)index.predictions[pnum]);
   2e1f0:	f859 0b04 	ldr.w	r0, [r9], #4
   2e1f4:	f000 fe20 	bl	2ee38 <npgps_pointer_to_block>
		__ASSERT((block != -1), "unexpected ptr:%p for Prediction num:%d",
   2e1f8:	1c42      	adds	r2, r0, #1
		block = npgps_pointer_to_block((uint8_t *)index.predictions[pnum]);
   2e1fa:	4603      	mov	r3, r0
		__ASSERT((block != -1), "unexpected ptr:%p for Prediction num:%d",
   2e1fc:	d10c      	bne.n	2e218 <nrf_cloud_pgps_preemptive_updates+0x12c>
   2e1fe:	f44f 72b1 	mov.w	r2, #354	; 0x162
   2e202:	4651      	mov	r1, sl
   2e204:	9001      	str	r0, [sp, #4]
   2e206:	4658      	mov	r0, fp
   2e208:	f00e fc40 	bl	3ca8c <assert_print>
   2e20c:	f44f 71b1 	mov.w	r1, #354	; 0x162
   2e210:	4650      	mov	r0, sl
   2e212:	f00e fc34 	bl	3ca7e <assert_post_action>
   2e216:	9b01      	ldr	r3, [sp, #4]
		npgps_free_block(block);
   2e218:	4618      	mov	r0, r3
   2e21a:	f000 fd3b 	bl	2ec94 <npgps_free_block>
	for (pnum = 0; pnum < last; pnum++) {
   2e21e:	3501      	adds	r5, #1
   2e220:	e7b0      	b.n	2e184 <nrf_cloud_pgps_preemptive_updates+0x98>
		index.predictions[pnum] = index.predictions[i];
   2e222:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
	for (i = last; i < index.header.prediction_count; i++) {
   2e226:	3301      	adds	r3, #1
		index.predictions[pnum] = index.predictions[i];
   2e228:	f846 1b04 	str.w	r1, [r6], #4
	for (i = last; i < index.header.prediction_count; i++) {
   2e22c:	e7ae      	b.n	2e18c <nrf_cloud_pgps_preemptive_updates+0xa0>
		index.predictions[pnum] = NULL;
   2e22e:	eb04 0083 	add.w	r0, r4, r3, lsl #2
   2e232:	63c1      	str	r1, [r0, #60]	; 0x3c
	      index.header.prediction_count; pnum++) {
   2e234:	3301      	adds	r3, #1
   2e236:	e7ad      	b.n	2e194 <nrf_cloud_pgps_preemptive_updates+0xa8>
   2e238:	2001d2bf 	.word	0x2001d2bf
   2e23c:	20015810 	.word	0x20015810
   2e240:	00049162 	.word	0x00049162
   2e244:	2001a114 	.word	0x2001a114
   2e248:	00049936 	.word	0x00049936
   2e24c:	2001584c 	.word	0x2001584c
   2e250:	0004996c 	.word	0x0004996c
   2e254:	0004997f 	.word	0x0004997f
   2e258:	0004409e 	.word	0x0004409e

0002e25c <nrf_cloud_pgps_inject>:
{
   2e25c:	b570      	push	{r4, r5, r6, lr}
	if (state == PGPS_NONE) {
   2e25e:	4a64      	ldr	r2, [pc, #400]	; (2e3f0 <nrf_cloud_pgps_inject+0x194>)
{
   2e260:	4606      	mov	r6, r0
	if (state == PGPS_NONE) {
   2e262:	7812      	ldrb	r2, [r2, #0]
{
   2e264:	460b      	mov	r3, r1
   2e266:	b0ae      	sub	sp, #184	; 0xb8
	if (state == PGPS_NONE) {
   2e268:	b942      	cbnz	r2, 2e27c <nrf_cloud_pgps_inject+0x20>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2e26a:	2145      	movs	r1, #69	; 0x45
   2e26c:	4861      	ldr	r0, [pc, #388]	; (2e3f4 <nrf_cloud_pgps_inject+0x198>)
   2e26e:	f00e fc47 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   2e272:	f06f 0415 	mvn.w	r4, #21
}
   2e276:	4620      	mov	r0, r4
   2e278:	b02e      	add	sp, #184	; 0xb8
   2e27a:	bd70      	pop	{r4, r5, r6, pc}
	if (request != NULL) {
   2e27c:	2900      	cmp	r1, #0
   2e27e:	f000 809c 	beq.w	2e3ba <nrf_cloud_pgps_inject+0x15e>
		memcpy(&remainder, request, sizeof(remainder));
   2e282:	6808      	ldr	r0, [r1, #0]
   2e284:	6849      	ldr	r1, [r1, #4]
   2e286:	aa04      	add	r2, sp, #16
   2e288:	c203      	stmia	r2!, {r0, r1}
   2e28a:	6898      	ldr	r0, [r3, #8]
   2e28c:	6010      	str	r0, [r2, #0]
	nrf_cloud_agps_processed(&processed);
   2e28e:	a807      	add	r0, sp, #28
   2e290:	f7fe feea 	bl	2d068 <nrf_cloud_agps_processed>
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST &&
   2e294:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2e296:	06d4      	lsls	r4, r2, #27
   2e298:	d505      	bpl.n	2e2a6 <nrf_cloud_pgps_inject+0x4a>
	    remainder.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   2e29a:	9b06      	ldr	r3, [sp, #24]
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST &&
   2e29c:	06d8      	lsls	r0, r3, #27
		remainder.data_flags &= ~NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2e29e:	bf44      	itt	mi
   2e2a0:	f023 0310 	bicmi.w	r3, r3, #16
   2e2a4:	9306      	strmi	r3, [sp, #24]
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST &&
   2e2a6:	0711      	lsls	r1, r2, #28
   2e2a8:	d505      	bpl.n	2e2b6 <nrf_cloud_pgps_inject+0x5a>
	    remainder.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   2e2aa:	9b06      	ldr	r3, [sp, #24]
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST &&
   2e2ac:	071a      	lsls	r2, r3, #28
		remainder.data_flags &= ~NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST;
   2e2ae:	bf44      	itt	mi
   2e2b0:	f023 0308 	bicmi.w	r3, r3, #8
   2e2b4:	9306      	strmi	r3, [sp, #24]
	if (remainder.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   2e2b6:	9d06      	ldr	r5, [sp, #24]
   2e2b8:	f015 0408 	ands.w	r4, r5, #8
   2e2bc:	f000 8088 	beq.w	2e3d0 <nrf_cloud_pgps_inject+0x174>
		sys_time.time.time_frac_ms = 0;
   2e2c0:	2400      	movs	r4, #0
		sys_time.type = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   2e2c2:	2207      	movs	r2, #7
		sys_time.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e2c4:	2301      	movs	r3, #1
		sys_time.type = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   2e2c6:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
		err = npgps_get_time(NULL, &day, &sec);
   2e2ca:	4620      	mov	r0, r4
   2e2cc:	aa03      	add	r2, sp, #12
   2e2ce:	f10d 010a 	add.w	r1, sp, #10
		sys_time.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e2d2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		sys_time.count = 1;
   2e2d6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		sys_time.time.time_frac_ms = 0;
   2e2da:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
		sys_time.time.sv_mask = 0;
   2e2de:	940d      	str	r4, [sp, #52]	; 0x34
		err = npgps_get_time(NULL, &day, &sec);
   2e2e0:	f011 fa3b 	bl	3f75a <npgps_get_time>
		if (!err) {
   2e2e4:	2800      	cmp	r0, #0
   2e2e6:	d16e      	bne.n	2e3c6 <nrf_cloud_pgps_inject+0x16a>
			sys_time.time.date_day = day;
   2e2e8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
			sys_time.time.time_full_s = sec;
   2e2ec:	9b03      	ldr	r3, [sp, #12]
			LOG_INF("GPS unit needs time assistance. Injecting day:%u, time:%u",
   2e2ee:	2149      	movs	r1, #73	; 0x49
   2e2f0:	4841      	ldr	r0, [pc, #260]	; (2e3f8 <nrf_cloud_pgps_inject+0x19c>)
			sys_time.time.date_day = day;
   2e2f2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
			sys_time.time.time_full_s = sec;
   2e2f6:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
			LOG_INF("GPS unit needs time assistance. Injecting day:%u, time:%u",
   2e2fa:	f00e fc01 	bl	3cb00 <z_log_minimal_printk>
			err = nrf_cloud_agps_process((const char *)&sys_time,
   2e2fe:	2110      	movs	r1, #16
   2e300:	a80a      	add	r0, sp, #40	; 0x28
   2e302:	f7fe fc35 	bl	2cb70 <nrf_cloud_agps_process>
			if (err) {
   2e306:	4604      	mov	r4, r0
   2e308:	b140      	cbz	r0, 2e31c <nrf_cloud_pgps_inject+0xc0>
				LOG_ERR("Error injecting P-GPS sys_time (%u, %u): %d",
   2e30a:	9000      	str	r0, [sp, #0]
   2e30c:	2145      	movs	r1, #69	; 0x45
   2e30e:	f8dd 302e 	ldr.w	r3, [sp, #46]	; 0x2e
   2e312:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   2e316:	4839      	ldr	r0, [pc, #228]	; (2e3fc <nrf_cloud_pgps_inject+0x1a0>)
   2e318:	f00e fbf2 	bl	3cb00 <z_log_minimal_printk>
	const struct gps_location *saved_location = npgps_get_saved_location();
   2e31c:	f000 fbd2 	bl	2eac4 <npgps_get_saved_location>
	if (remainder.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST &&
   2e320:	06eb      	lsls	r3, r5, #27
   2e322:	d55d      	bpl.n	2e3e0 <nrf_cloud_pgps_inject+0x184>
   2e324:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   2e328:	4313      	orrs	r3, r2
   2e32a:	d054      	beq.n	2e3d6 <nrf_cloud_pgps_inject+0x17a>
		location.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e32c:	2301      	movs	r3, #1
		location.type = NRF_CLOUD_AGPS_LOCATION;
   2e32e:	2208      	movs	r2, #8
		location.location.altitude = 0;
   2e330:	2100      	movs	r1, #0
		location.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e332:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		location.type = NRF_CLOUD_AGPS_LOCATION;
   2e336:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
		location.location.latitude = saved_location->latitude;
   2e33a:	6802      	ldr	r2, [r0, #0]
		location.count = 1;
   2e33c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		location.location.longitude = saved_location->longitude;
   2e340:	6843      	ldr	r3, [r0, #4]
		location.location.altitude = 0;
   2e342:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
		location.location.orientation_major = 0;
   2e346:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
		location.location.unc_altitude = 0xFF; /* tell modem it is invalid */
   2e34a:	21ff      	movs	r1, #255	; 0xff
		location.location.unc_semimajor = LOCATION_UNC_SEMIMAJOR_K;
   2e34c:	2059      	movs	r0, #89	; 0x59
		location.location.unc_altitude = 0xFF; /* tell modem it is invalid */
   2e34e:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		location.location.confidence = LOCATION_CONFIDENCE_PERCENT;
   2e352:	2144      	movs	r1, #68	; 0x44
		location.location.unc_semimajor = LOCATION_UNC_SEMIMAJOR_K;
   2e354:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
		location.location.unc_semiminor = LOCATION_UNC_SEMIMINOR_K;
   2e358:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
		location.location.confidence = LOCATION_CONFIDENCE_PERCENT;
   2e35c:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
		LOG_INF("GPS unit needs position. Injecting lat:%d, lng:%d",
   2e360:	4827      	ldr	r0, [pc, #156]	; (2e400 <nrf_cloud_pgps_inject+0x1a4>)
   2e362:	2149      	movs	r1, #73	; 0x49
		location.location.latitude = saved_location->latitude;
   2e364:	920b      	str	r2, [sp, #44]	; 0x2c
		location.location.longitude = saved_location->longitude;
   2e366:	930c      	str	r3, [sp, #48]	; 0x30
		LOG_INF("GPS unit needs position. Injecting lat:%d, lng:%d",
   2e368:	f00e fbca 	bl	3cb00 <z_log_minimal_printk>
		err = nrf_cloud_agps_process((const char *)&location, sizeof(location));
   2e36c:	2113      	movs	r1, #19
   2e36e:	a80a      	add	r0, sp, #40	; 0x28
   2e370:	f7fe fbfe 	bl	2cb70 <nrf_cloud_agps_process>
		if (err) {
   2e374:	4605      	mov	r5, r0
   2e376:	b138      	cbz	r0, 2e388 <nrf_cloud_pgps_inject+0x12c>
			LOG_ERR("Error injecting P-GPS location (%d, %d): %d",
   2e378:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
   2e37c:	9000      	str	r0, [sp, #0]
   2e37e:	2145      	movs	r1, #69	; 0x45
   2e380:	4820      	ldr	r0, [pc, #128]	; (2e404 <nrf_cloud_pgps_inject+0x1a8>)
   2e382:	f00e fbbd 	bl	3cb00 <z_log_minimal_printk>
   2e386:	462c      	mov	r4, r5
	if (remainder.sv_mask_ephe) {
   2e388:	9b04      	ldr	r3, [sp, #16]
   2e38a:	b363      	cbz	r3, 2e3e6 <nrf_cloud_pgps_inject+0x18a>
		LOG_INF("GPS unit needs ephemerides. Injecting %u.", p->ephemeris_count);
   2e38c:	2149      	movs	r1, #73	; 0x49
   2e38e:	f8b6 2015 	ldrh.w	r2, [r6, #21]
   2e392:	481d      	ldr	r0, [pc, #116]	; (2e408 <nrf_cloud_pgps_inject+0x1ac>)
   2e394:	f00e fbb4 	bl	3cb00 <z_log_minimal_printk>
		err = nrf_cloud_agps_process((const char *)&p->schema_version,
   2e398:	f240 71c4 	movw	r1, #1988	; 0x7c4
   2e39c:	f106 0013 	add.w	r0, r6, #19
   2e3a0:	f7fe fbe6 	bl	2cb70 <nrf_cloud_agps_process>
		if (err) {
   2e3a4:	4605      	mov	r5, r0
   2e3a6:	2800      	cmp	r0, #0
   2e3a8:	f43f af65 	beq.w	2e276 <nrf_cloud_pgps_inject+0x1a>
			LOG_ERR("Error injecting ephermerii:%d", err);
   2e3ac:	4602      	mov	r2, r0
   2e3ae:	2145      	movs	r1, #69	; 0x45
   2e3b0:	4816      	ldr	r0, [pc, #88]	; (2e40c <nrf_cloud_pgps_inject+0x1b0>)
   2e3b2:	f00e fba5 	bl	3cb00 <z_log_minimal_printk>
   2e3b6:	462c      	mov	r4, r5
   2e3b8:	e75d      	b.n	2e276 <nrf_cloud_pgps_inject+0x1a>
		remainder.sv_mask_ephe = 0xFFFFFFFFU;
   2e3ba:	f04f 33ff 	mov.w	r3, #4294967295
		memset(&remainder, 0, sizeof(remainder));
   2e3be:	e9cd 1105 	strd	r1, r1, [sp, #20]
		remainder.sv_mask_ephe = 0xFFFFFFFFU;
   2e3c2:	9304      	str	r3, [sp, #16]
   2e3c4:	e763      	b.n	2e28e <nrf_cloud_pgps_inject+0x32>
			LOG_WRN("Current time not known; cannot provide time assistance");
   2e3c6:	2157      	movs	r1, #87	; 0x57
   2e3c8:	4811      	ldr	r0, [pc, #68]	; (2e410 <nrf_cloud_pgps_inject+0x1b4>)
		LOG_INF("GPS unit does not need time assistance.");
   2e3ca:	f00e fb99 	bl	3cb00 <z_log_minimal_printk>
   2e3ce:	e7a5      	b.n	2e31c <nrf_cloud_pgps_inject+0xc0>
   2e3d0:	2149      	movs	r1, #73	; 0x49
   2e3d2:	4810      	ldr	r0, [pc, #64]	; (2e414 <nrf_cloud_pgps_inject+0x1b8>)
   2e3d4:	e7f9      	b.n	2e3ca <nrf_cloud_pgps_inject+0x16e>
		LOG_WRN("GPS unit needs location, but it is unknown!");
   2e3d6:	2157      	movs	r1, #87	; 0x57
   2e3d8:	480f      	ldr	r0, [pc, #60]	; (2e418 <nrf_cloud_pgps_inject+0x1bc>)
		LOG_INF("GPS unit does not need location assistance.");
   2e3da:	f00e fb91 	bl	3cb00 <z_log_minimal_printk>
   2e3de:	e7d3      	b.n	2e388 <nrf_cloud_pgps_inject+0x12c>
   2e3e0:	2149      	movs	r1, #73	; 0x49
   2e3e2:	480e      	ldr	r0, [pc, #56]	; (2e41c <nrf_cloud_pgps_inject+0x1c0>)
   2e3e4:	e7f9      	b.n	2e3da <nrf_cloud_pgps_inject+0x17e>
		LOG_INF("GPS unit does not need ephemerides.");
   2e3e6:	2149      	movs	r1, #73	; 0x49
   2e3e8:	480d      	ldr	r0, [pc, #52]	; (2e420 <nrf_cloud_pgps_inject+0x1c4>)
   2e3ea:	f00e fb89 	bl	3cb00 <z_log_minimal_printk>
   2e3ee:	e742      	b.n	2e276 <nrf_cloud_pgps_inject+0x1a>
   2e3f0:	2001d2bf 	.word	0x2001d2bf
   2e3f4:	00049162 	.word	0x00049162
   2e3f8:	000499bd 	.word	0x000499bd
   2e3fc:	000499fc 	.word	0x000499fc
   2e400:	00049a96 	.word	0x00049a96
   2e404:	00049acd 	.word	0x00049acd
   2e408:	00049b60 	.word	0x00049b60
   2e40c:	00049b8f 	.word	0x00049b8f
   2e410:	00049a2d 	.word	0x00049a2d
   2e414:	00049a69 	.word	0x00049a69
   2e418:	00049afe 	.word	0x00049afe
   2e41c:	00049b2f 	.word	0x00049b2f
   2e420:	00049bb2 	.word	0x00049bb2

0002e424 <prediction_work_handler>:
{
   2e424:	b507      	push	{r0, r1, r2, lr}
	LOG_INF("prediction is expiring; finding next");
   2e426:	2149      	movs	r1, #73	; 0x49
   2e428:	480c      	ldr	r0, [pc, #48]	; (2e45c <prediction_work_handler+0x38>)
   2e42a:	f00e fb69 	bl	3cb00 <z_log_minimal_printk>
	ret = nrf_cloud_pgps_find_prediction(&p);
   2e42e:	a801      	add	r0, sp, #4
   2e430:	f7ff fa82 	bl	2d938 <nrf_cloud_pgps_find_prediction>
	if (ret >= 0) {
   2e434:	2800      	cmp	r0, #0
   2e436:	db09      	blt.n	2e44c <prediction_work_handler+0x28>
		ret = nrf_cloud_pgps_inject(p, NULL);
   2e438:	2100      	movs	r1, #0
   2e43a:	9801      	ldr	r0, [sp, #4]
   2e43c:	f7ff ff0e 	bl	2e25c <nrf_cloud_pgps_inject>
		if (ret) {
   2e440:	4602      	mov	r2, r0
   2e442:	b130      	cbz	r0, 2e452 <prediction_work_handler+0x2e>
			LOG_ERR("Error injecting prediction:%d", ret);
   2e444:	2145      	movs	r1, #69	; 0x45
   2e446:	4806      	ldr	r0, [pc, #24]	; (2e460 <prediction_work_handler+0x3c>)
   2e448:	f00e fb5a 	bl	3cb00 <z_log_minimal_printk>
}
   2e44c:	b003      	add	sp, #12
   2e44e:	f85d fb04 	ldr.w	pc, [sp], #4
			LOG_INF("Next prediction injected successfully.");
   2e452:	2149      	movs	r1, #73	; 0x49
   2e454:	4803      	ldr	r0, [pc, #12]	; (2e464 <prediction_work_handler+0x40>)
   2e456:	f00e fb53 	bl	3cb00 <z_log_minimal_printk>
}
   2e45a:	e7f7      	b.n	2e44c <prediction_work_handler+0x28>
   2e45c:	00049bdb 	.word	0x00049bdb
   2e460:	00049c05 	.word	0x00049c05
   2e464:	00049c28 	.word	0x00049c28

0002e468 <nrf_cloud_pgps_process>:
	return 0;
}

/* handle incoming P-GPS packets */
int nrf_cloud_pgps_process(const char *buf, size_t buf_len)
{
   2e468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static char host[CONFIG_DOWNLOAD_CLIENT_MAX_HOSTNAME_SIZE];
	static char path[CONFIG_DOWNLOAD_CLIENT_MAX_FILENAME_SIZE];
	static uint8_t prev_pnum;
	uint8_t pnum;
	int err;
	struct nrf_cloud_pgps_result pgps_dl = {
   2e46c:	4b41      	ldr	r3, [pc, #260]	; (2e574 <nrf_cloud_pgps_process+0x10c>)
		.host_sz = sizeof(host),
		.path = path,
		.path_sz = sizeof(path)
	};

	if (state == PGPS_NONE) {
   2e46e:	4d42      	ldr	r5, [pc, #264]	; (2e578 <nrf_cloud_pgps_process+0x110>)
{
   2e470:	b086      	sub	sp, #24
	struct nrf_cloud_pgps_result pgps_dl = {
   2e472:	ac02      	add	r4, sp, #8
{
   2e474:	4680      	mov	r8, r0
   2e476:	460f      	mov	r7, r1
	struct nrf_cloud_pgps_result pgps_dl = {
   2e478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2e47a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (state == PGPS_NONE) {
   2e47e:	782b      	ldrb	r3, [r5, #0]
   2e480:	b943      	cbnz	r3, 2e494 <nrf_cloud_pgps_process+0x2c>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2e482:	2145      	movs	r1, #69	; 0x45
   2e484:	483d      	ldr	r0, [pc, #244]	; (2e57c <nrf_cloud_pgps_process+0x114>)
   2e486:	f00e fb3b 	bl	3cb00 <z_log_minimal_printk>
	LOG_HEXDUMP_DBG(buf, buf_len, "MQTT packet");
#endif
	if (!buf_len) {
		LOG_ERR("Zero length packet received");
		state = PGPS_NONE;
		return -EINVAL;
   2e48a:	f06f 0015 	mvn.w	r0, #21
	if (err) {
		state = PGPS_NONE;
	}

	return err;
}
   2e48e:	b006      	add	sp, #24
   2e490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!buf_len) {
   2e494:	b92f      	cbnz	r7, 2e4a2 <nrf_cloud_pgps_process+0x3a>
		LOG_ERR("Zero length packet received");
   2e496:	2145      	movs	r1, #69	; 0x45
   2e498:	4839      	ldr	r0, [pc, #228]	; (2e580 <nrf_cloud_pgps_process+0x118>)
   2e49a:	f00e fb31 	bl	3cb00 <z_log_minimal_printk>
		state = PGPS_NONE;
   2e49e:	702f      	strb	r7, [r5, #0]
   2e4a0:	e7f3      	b.n	2e48a <nrf_cloud_pgps_process+0x22>
	if (ignore_packets) {
   2e4a2:	4e38      	ldr	r6, [pc, #224]	; (2e584 <nrf_cloud_pgps_process+0x11c>)
   2e4a4:	7833      	ldrb	r3, [r6, #0]
   2e4a6:	b173      	cbz	r3, 2e4c6 <nrf_cloud_pgps_process+0x5e>
		LOG_ERR("IGNORING PACKETS");
   2e4a8:	2145      	movs	r1, #69	; 0x45
   2e4aa:	4837      	ldr	r0, [pc, #220]	; (2e588 <nrf_cloud_pgps_process+0x120>)
   2e4ac:	f00e fb28 	bl	3cb00 <z_log_minimal_printk>
		LOG_HEXDUMP_INF(buf, buf_len, "Unexpected packet");
   2e4b0:	2149      	movs	r1, #73	; 0x49
   2e4b2:	4a36      	ldr	r2, [pc, #216]	; (2e58c <nrf_cloud_pgps_process+0x124>)
   2e4b4:	4836      	ldr	r0, [pc, #216]	; (2e590 <nrf_cloud_pgps_process+0x128>)
   2e4b6:	f00e fb23 	bl	3cb00 <z_log_minimal_printk>
   2e4ba:	463a      	mov	r2, r7
   2e4bc:	4641      	mov	r1, r8
   2e4be:	2003      	movs	r0, #3
   2e4c0:	f7f3 f862 	bl	21588 <z_log_minimal_hexdump_print>
		return -EINVAL;
   2e4c4:	e7e1      	b.n	2e48a <nrf_cloud_pgps_process+0x22>
	err = nrf_cloud_parse_pgps_response(buf, &pgps_dl);
   2e4c6:	4621      	mov	r1, r4
   2e4c8:	4640      	mov	r0, r8
   2e4ca:	f7fc fe7d 	bl	2b1c8 <nrf_cloud_parse_pgps_response>
	if (err) {
   2e4ce:	2800      	cmp	r0, #0
   2e4d0:	d1dd      	bne.n	2e48e <nrf_cloud_pgps_process+0x26>
	state = PGPS_LOADING;
   2e4d2:	2305      	movs	r3, #5
	if (!index.partial_request) {
   2e4d4:	4c2f      	ldr	r4, [pc, #188]	; (2e594 <nrf_cloud_pgps_process+0x12c>)
	state = PGPS_LOADING;
   2e4d6:	702b      	strb	r3, [r5, #0]
	if (!index.partial_request) {
   2e4d8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
   2e4dc:	b9d9      	cbnz	r1, 2e516 <nrf_cloud_pgps_process+0xae>
		index.header.prediction_count = NUM_PREDICTIONS;
   2e4de:	232a      	movs	r3, #42	; 0x2a
   2e4e0:	80a3      	strh	r3, [r4, #4]
		index.header.prediction_period_min = PREDICTION_PERIOD;
   2e4e2:	23f0      	movs	r3, #240	; 0xf0
   2e4e4:	8123      	strh	r3, [r4, #8]
		index.period_sec =
   2e4e6:	f44f 5361 	mov.w	r3, #14400	; 0x3840
		memset(index.predictions, 0, sizeof(index.predictions));
   2e4ea:	22a8      	movs	r2, #168	; 0xa8
   2e4ec:	f104 003c 	add.w	r0, r4, #60	; 0x3c
		index.period_sec =
   2e4f0:	8563      	strh	r3, [r4, #42]	; 0x2a
		memset(index.predictions, 0, sizeof(index.predictions));
   2e4f2:	f012 ff9f 	bl	41434 <memset>
	index.loading_count = 0;
   2e4f6:	2700      	movs	r7, #0
   2e4f8:	8527      	strh	r7, [r4, #40]	; 0x28
	index.store_block = npgps_alloc_block();
   2e4fa:	f000 fbad 	bl	2ec58 <npgps_alloc_block>
   2e4fe:	4603      	mov	r3, r0
	if (index.store_block == NO_BLOCK) {
   2e500:	3301      	adds	r3, #1
	index.store_block = npgps_alloc_block();
   2e502:	63a0      	str	r0, [r4, #56]	; 0x38
	if (index.store_block == NO_BLOCK) {
   2e504:	d113      	bne.n	2e52e <nrf_cloud_pgps_process+0xc6>
		LOG_ERR("No free flash space!");
   2e506:	4824      	ldr	r0, [pc, #144]	; (2e598 <nrf_cloud_pgps_process+0x130>)
   2e508:	2145      	movs	r1, #69	; 0x45
   2e50a:	f00e faf9 	bl	3cb00 <z_log_minimal_printk>
		return -ENOMEM;
   2e50e:	f06f 000b 	mvn.w	r0, #11
		state = PGPS_NONE;
   2e512:	702f      	strb	r7, [r5, #0]
		return -ENOMEM;
   2e514:	e7bb      	b.n	2e48e <nrf_cloud_pgps_process+0x26>
		for (pnum = index.pnum_offset;
   2e516:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
		     pnum < index.expected_count + index.pnum_offset; pnum++) {
   2e51a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   2e51c:	441a      	add	r2, r3
		for (pnum = index.pnum_offset;
   2e51e:	4293      	cmp	r3, r2
   2e520:	dae9      	bge.n	2e4f6 <nrf_cloud_pgps_process+0x8e>
			index.predictions[pnum] = NULL;
   2e522:	eb04 0183 	add.w	r1, r4, r3, lsl #2
		     pnum < index.expected_count + index.pnum_offset; pnum++) {
   2e526:	3301      	adds	r3, #1
			index.predictions[pnum] = NULL;
   2e528:	63c8      	str	r0, [r1, #60]	; 0x3c
		     pnum < index.expected_count + index.pnum_offset; pnum++) {
   2e52a:	b2db      	uxtb	r3, r3
   2e52c:	e7f7      	b.n	2e51e <nrf_cloud_pgps_process+0xb6>
	index.storage_extent = npgps_get_block_extent(index.store_block);
   2e52e:	f000 fbbd 	bl	2ecac <npgps_get_block_extent>
	LOG_INF("opening storage at block:%d, len:%d", index.store_block,
   2e532:	2149      	movs	r1, #73	; 0x49
	index.storage_extent = npgps_get_block_extent(index.store_block);
   2e534:	4603      	mov	r3, r0
	LOG_INF("opening storage at block:%d, len:%d", index.store_block,
   2e536:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	index.storage_extent = npgps_get_block_extent(index.store_block);
   2e538:	6360      	str	r0, [r4, #52]	; 0x34
	LOG_INF("opening storage at block:%d, len:%d", index.store_block,
   2e53a:	4818      	ldr	r0, [pc, #96]	; (2e59c <nrf_cloud_pgps_process+0x134>)
   2e53c:	f00e fae0 	bl	3cb00 <z_log_minimal_printk>
	err = open_storage(npgps_block_to_offset(index.store_block),
   2e540:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2e542:	f000 fc65 	bl	2ee10 <npgps_block_to_offset>
   2e546:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
   2e54a:	f7ff f8a3 	bl	2d694 <open_storage>
	if (err) {
   2e54e:	b108      	cbz	r0, 2e554 <nrf_cloud_pgps_process+0xec>
		state = PGPS_NONE;
   2e550:	702f      	strb	r7, [r5, #0]
   2e552:	e79c      	b.n	2e48e <nrf_cloud_pgps_process+0x26>
	ignore_packets = true;
   2e554:	2301      	movs	r3, #1
   2e556:	7033      	strb	r3, [r6, #0]
	err =  npgps_download_start(pgps_dl.host, pgps_dl.path, sec_tag, 0, FRAGMENT_SIZE);
   2e558:	f240 53dc 	movw	r3, #1500	; 0x5dc
	index.dl_offset = 0;
   2e55c:	6220      	str	r0, [r4, #32]
	err =  npgps_download_start(pgps_dl.host, pgps_dl.path, sec_tag, 0, FRAGMENT_SIZE);
   2e55e:	4a10      	ldr	r2, [pc, #64]	; (2e5a0 <nrf_cloud_pgps_process+0x138>)
   2e560:	9300      	str	r3, [sp, #0]
   2e562:	9904      	ldr	r1, [sp, #16]
   2e564:	4603      	mov	r3, r0
   2e566:	9802      	ldr	r0, [sp, #8]
   2e568:	f000 fcb0 	bl	2eecc <npgps_download_start>
	if (err) {
   2e56c:	2800      	cmp	r0, #0
   2e56e:	d08e      	beq.n	2e48e <nrf_cloud_pgps_process+0x26>
   2e570:	e7ee      	b.n	2e550 <nrf_cloud_pgps_process+0xe8>
   2e572:	bf00      	nop
   2e574:	0004281c 	.word	0x0004281c
   2e578:	2001d2bf 	.word	0x2001d2bf
   2e57c:	00049162 	.word	0x00049162
   2e580:	00049c54 	.word	0x00049c54
   2e584:	2001c9d9 	.word	0x2001c9d9
   2e588:	00049c75 	.word	0x00049c75
   2e58c:	00049c8b 	.word	0x00049c8b
   2e590:	00049c9d 	.word	0x00049c9d
   2e594:	20015810 	.word	0x20015810
   2e598:	00049ca5 	.word	0x00049ca5
   2e59c:	00049cbf 	.word	0x00049cbf
   2e5a0:	01010001 	.word	0x01010001

0002e5a4 <nrf_cloud_pgps_init>:

int nrf_cloud_pgps_init(struct nrf_cloud_pgps_init_param *param)
{
	int err = 0;
	struct nrf_cloud_pgps_event evt = {
   2e5a4:	2300      	movs	r3, #0
{
   2e5a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e5aa:	b097      	sub	sp, #92	; 0x5c
	struct nrf_cloud_pgps_event evt = {
   2e5ac:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44

#if defined(CONFIG_NRF_CLOUD_PGPS_STORAGE_PARTITION)
	BUILD_ASSERT(CONFIG_NRF_CLOUD_PGPS_PARTITION_SIZE >=
		 (CONFIG_NRF_CLOUD_PGPS_NUM_PREDICTIONS * BLOCK_SIZE),
		 "P-GPS partition size is too small");
	if (param->storage_base || param->storage_size) {
   2e5b0:	6843      	ldr	r3, [r0, #4]
{
   2e5b2:	4604      	mov	r4, r0
	if (param->storage_base || param->storage_size) {
   2e5b4:	b90b      	cbnz	r3, 2e5ba <nrf_cloud_pgps_init+0x16>
   2e5b6:	6883      	ldr	r3, [r0, #8]
   2e5b8:	b11b      	cbz	r3, 2e5c2 <nrf_cloud_pgps_init+0x1e>
		LOG_WRN("Overriding P-GPS storage with P-GPS partition");
   2e5ba:	2157      	movs	r1, #87	; 0x57
   2e5bc:	48ae      	ldr	r0, [pc, #696]	; (2e878 <nrf_cloud_pgps_init+0x2d4>)
   2e5be:	f00e fa9f 	bl	3cb00 <z_log_minimal_printk>
	}
	param->storage_base = PM_PGPS_ADDRESS;
	param->storage_size = PM_PGPS_SIZE;
   2e5c2:	f44f 33a8 	mov.w	r3, #86016	; 0x15000
   2e5c6:	f44f 216b 	mov.w	r1, #962560	; 0xeb000
	__ASSERT(param->storage_base != 0u, "P-GPS flash storage must be provided");
	__ASSERT((param->storage_size >= (NUM_BLOCKS * BLOCK_SIZE)),
		 "insufficient storage provided; need at least %u bytes",
		 (NUM_BLOCKS * BLOCK_SIZE));

	evt_handler = param->event_handler;
   2e5ca:	4aac      	ldr	r2, [pc, #688]	; (2e87c <nrf_cloud_pgps_init+0x2d8>)
	param->storage_size = PM_PGPS_SIZE;
   2e5cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
	evt_handler = param->event_handler;
   2e5d0:	6823      	ldr	r3, [r4, #0]
   2e5d2:	6013      	str	r3, [r2, #0]
	if (evt_handler) {
   2e5d4:	b10b      	cbz	r3, 2e5da <nrf_cloud_pgps_init+0x36>
		evt_handler(&evt);
   2e5d6:	a811      	add	r0, sp, #68	; 0x44
   2e5d8:	4798      	blx	r3
	}

	flash_page_size = nrfx_nvmc_flash_page_size_get();
   2e5da:	f011 fc66 	bl	3feaa <nrfx_nvmc_flash_page_size_get>
	if (!flash_page_size) {
   2e5de:	4aa8      	ldr	r2, [pc, #672]	; (2e880 <nrf_cloud_pgps_init+0x2dc>)
   2e5e0:	b140      	cbz	r0, 2e5f4 <nrf_cloud_pgps_init+0x50>
	flash_page_size = nrfx_nvmc_flash_page_size_get();
   2e5e2:	6010      	str	r0, [r2, #0]
		flash_page_size = 4096;
	}

	if (nrf_cloud_pgps_loading()) {
   2e5e4:	f7ff f8c4 	bl	2d770 <nrf_cloud_pgps_loading>
   2e5e8:	b140      	cbz	r0, 2e5fc <nrf_cloud_pgps_init+0x58>
		return 0;
   2e5ea:	2400      	movs	r4, #0
		}
		err = 0;
	}

	return err;
}
   2e5ec:	4620      	mov	r0, r4
   2e5ee:	b017      	add	sp, #92	; 0x5c
   2e5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		flash_page_size = 4096;
   2e5f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   2e5f8:	6013      	str	r3, [r2, #0]
   2e5fa:	e7f3      	b.n	2e5e4 <nrf_cloud_pgps_init+0x40>
	if (!write_buf) {
   2e5fc:	4da1      	ldr	r5, [pc, #644]	; (2e884 <nrf_cloud_pgps_init+0x2e0>)
	state = PGPS_NONE;
   2e5fe:	4ea2      	ldr	r6, [pc, #648]	; (2e888 <nrf_cloud_pgps_init+0x2e4>)
	if (!write_buf) {
   2e600:	682b      	ldr	r3, [r5, #0]
	state = PGPS_NONE;
   2e602:	7030      	strb	r0, [r6, #0]
	if (!write_buf) {
   2e604:	b1db      	cbz	r3, 2e63e <nrf_cloud_pgps_init+0x9a>
	storage_size = param->storage_size;
   2e606:	4ba1      	ldr	r3, [pc, #644]	; (2e88c <nrf_cloud_pgps_init+0x2e8>)
   2e608:	68a2      	ldr	r2, [r4, #8]
	storage = (uint8_t *)param->storage_base;
   2e60a:	6860      	ldr	r0, [r4, #4]
   2e60c:	4fa0      	ldr	r7, [pc, #640]	; (2e890 <nrf_cloud_pgps_init+0x2ec>)
	memset(&index, 0, sizeof(index));
   2e60e:	4da1      	ldr	r5, [pc, #644]	; (2e894 <nrf_cloud_pgps_init+0x2f0>)
	(void)ngps_block_pool_init(param->storage_base, NUM_PREDICTIONS);
   2e610:	212a      	movs	r1, #42	; 0x2a
	storage_size = param->storage_size;
   2e612:	601a      	str	r2, [r3, #0]
	storage = (uint8_t *)param->storage_base;
   2e614:	6038      	str	r0, [r7, #0]
	(void)ngps_block_pool_init(param->storage_base, NUM_PREDICTIONS);
   2e616:	f000 fb15 	bl	2ec44 <ngps_block_pool_init>
	memset(&index, 0, sizeof(index));
   2e61a:	22e8      	movs	r2, #232	; 0xe8
   2e61c:	2100      	movs	r1, #0
   2e61e:	4628      	mov	r0, r5
   2e620:	f012 ff08 	bl	41434 <memset>
	(void)npgps_settings_init();
   2e624:	f000 fa52 	bl	2eacc <npgps_settings_init>
	err = npgps_download_init(process_buffer);
   2e628:	489b      	ldr	r0, [pc, #620]	; (2e898 <nrf_cloud_pgps_init+0x2f4>)
   2e62a:	f000 fc2f 	bl	2ee8c <npgps_download_init>
	if (err) {
   2e62e:	4604      	mov	r4, r0
   2e630:	b170      	cbz	r0, 2e650 <nrf_cloud_pgps_init+0xac>
		LOG_ERR("Error initializing download client:%d", err);
   2e632:	4602      	mov	r2, r0
   2e634:	2145      	movs	r1, #69	; 0x45
   2e636:	4899      	ldr	r0, [pc, #612]	; (2e89c <nrf_cloud_pgps_init+0x2f8>)
   2e638:	f00e fa62 	bl	3cb00 <z_log_minimal_printk>
		return err;
   2e63c:	e7d6      	b.n	2e5ec <nrf_cloud_pgps_init+0x48>
		write_buf = k_malloc(flash_page_size);
   2e63e:	6810      	ldr	r0, [r2, #0]
   2e640:	f012 fe4e 	bl	412e0 <k_malloc>
   2e644:	6028      	str	r0, [r5, #0]
		if (!write_buf) {
   2e646:	2800      	cmp	r0, #0
   2e648:	d1dd      	bne.n	2e606 <nrf_cloud_pgps_init+0x62>
			return -ENOMEM;
   2e64a:	f06f 040b 	mvn.w	r4, #11
   2e64e:	e7cd      	b.n	2e5ec <nrf_cloud_pgps_init+0x48>
	state = PGPS_INITIALIZING;
   2e650:	2301      	movs	r3, #1
	uint16_t gps_day = 0;
   2e652:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
	state = PGPS_INITIALIZING;
   2e656:	7033      	strb	r3, [r6, #0]
	uint32_t gps_time_of_day = 0;
   2e658:	900f      	str	r0, [sp, #60]	; 0x3c
	saved_header = npgps_get_saved_header();
   2e65a:	f000 fa2f 	bl	2eabc <npgps_get_saved_header>
   2e65e:	4606      	mov	r6, r0
	if (validate_pgps_header(saved_header)) {
   2e660:	f7fe ff40 	bl	2d4e4 <validate_pgps_header>
   2e664:	2800      	cmp	r0, #0
   2e666:	f000 8103 	beq.w	2e870 <nrf_cloud_pgps_init+0x2cc>
		cache_pgps_header(saved_header);
   2e66a:	4630      	mov	r0, r6
   2e66c:	f7fe ff6c 	bl	2d548 <cache_pgps_header>
		period_min = index.header.prediction_period_min;
   2e670:	892b      	ldrh	r3, [r5, #8]
		count = index.header.prediction_count;
   2e672:	88ae      	ldrh	r6, [r5, #4]
		period_min = index.header.prediction_period_min;
   2e674:	9305      	str	r3, [sp, #20]
		gps_day = index.header.gps_day;
   2e676:	896b      	ldrh	r3, [r5, #10]
		LOG_INF("Checking stored P-GPS data; count:%u, period_min:%u",
   2e678:	4632      	mov	r2, r6
		gps_day = index.header.gps_day;
   2e67a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gps_time_of_day = index.header.gps_time_of_day;
   2e67e:	68eb      	ldr	r3, [r5, #12]
		LOG_INF("Checking stored P-GPS data; count:%u, period_min:%u",
   2e680:	2149      	movs	r1, #73	; 0x49
		gps_time_of_day = index.header.gps_time_of_day;
   2e682:	930f      	str	r3, [sp, #60]	; 0x3c
		LOG_INF("Checking stored P-GPS data; count:%u, period_min:%u",
   2e684:	4886      	ldr	r0, [pc, #536]	; (2e8a0 <nrf_cloud_pgps_init+0x2fc>)
   2e686:	9b05      	ldr	r3, [sp, #20]
   2e688:	f00e fa3a 	bl	3cb00 <z_log_minimal_printk>
	uint16_t count = index.header.prediction_count;
   2e68c:	88ab      	ldrh	r3, [r5, #4]
   2e68e:	4621      	mov	r1, r4
   2e690:	9306      	str	r3, [sp, #24]
	uint16_t period_min = index.header.prediction_period_min;
   2e692:	892b      	ldrh	r3, [r5, #8]
   2e694:	9308      	str	r3, [sp, #32]
	uint16_t gps_day = index.header.gps_day;
   2e696:	896b      	ldrh	r3, [r5, #10]
   2e698:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
	uint32_t gps_time_of_day = index.header.gps_time_of_day;
   2e69c:	68eb      	ldr	r3, [r5, #12]
   2e69e:	9313      	str	r3, [sp, #76]	; 0x4c
	uint8_t *p = storage;
   2e6a0:	683b      	ldr	r3, [r7, #0]
   2e6a2:	9309      	str	r3, [sp, #36]	; 0x24
	int64_t start_gps_sec = index.start_sec;
   2e6a4:	692b      	ldr	r3, [r5, #16]
   2e6a6:	930a      	str	r3, [sp, #40]	; 0x28
   2e6a8:	696b      	ldr	r3, [r5, #20]
   2e6aa:	930b      	str	r3, [sp, #44]	; 0x2c
	for (pnum = 0; pnum < count; pnum++) {
   2e6ac:	f105 033c 	add.w	r3, r5, #60	; 0x3c
   2e6b0:	461a      	mov	r2, r3
   2e6b2:	9307      	str	r3, [sp, #28]
   2e6b4:	4623      	mov	r3, r4
   2e6b6:	9806      	ldr	r0, [sp, #24]
   2e6b8:	4283      	cmp	r3, r0
   2e6ba:	db5d      	blt.n	2e778 <nrf_cloud_pgps_init+0x1d4>
	npgps_reset_block_pool();
   2e6bc:	f000 fb0e 	bl	2ecdc <npgps_reset_block_pool>
	for (i = 0; i < count; i++) {
   2e6c0:	f04f 0900 	mov.w	r9, #0
						      header->gps_time_of_day);
   2e6c4:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 2e894 <nrf_cloud_pgps_init+0x2f0>
   2e6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e6ca:	eb03 28c9 	add.w	r8, r3, r9, lsl #11
	for (i = 0; i < count; i++) {
   2e6ce:	9b06      	ldr	r3, [sp, #24]
   2e6d0:	454b      	cmp	r3, r9
   2e6d2:	dc55      	bgt.n	2e780 <nrf_cloud_pgps_init+0x1dc>
	for (pnum = 0; pnum < count; pnum++) {
   2e6d4:	2500      	movs	r5, #0
   2e6d6:	233c      	movs	r3, #60	; 0x3c
	for (i = 0; i < count; i++) {
   2e6d8:	46a8      	mov	r8, r5
	i = -1;
   2e6da:	f04f 37ff 	mov.w	r7, #4294967295
   2e6de:	9a08      	ldr	r2, [sp, #32]
		__ASSERT(i != -1, "unexpected pointer value %p", pred);
   2e6e0:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 2e8bc <nrf_cloud_pgps_init+0x318>
   2e6e4:	4353      	muls	r3, r2
   2e6e6:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 2e8c0 <nrf_cloud_pgps_init+0x31c>
   2e6ea:	9309      	str	r3, [sp, #36]	; 0x24
	for (pnum = 0; pnum < count; pnum++) {
   2e6ec:	9b06      	ldr	r3, [sp, #24]
   2e6ee:	42ab      	cmp	r3, r5
   2e6f0:	dd1b      	ble.n	2e72a <nrf_cloud_pgps_init+0x186>
		gps_sec = start_gps_sec + pnum * period_min * SEC_PER_MIN;
   2e6f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		npgps_gps_sec_to_day_time(gps_sec, &gps_day, &gps_time_of_day);
   2e6f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
		gps_sec = start_gps_sec + pnum * period_min * SEC_PER_MIN;
   2e6f6:	eb18 0003 	adds.w	r0, r8, r3
		npgps_gps_sec_to_day_time(gps_sec, &gps_day, &gps_time_of_day);
   2e6fa:	aa10      	add	r2, sp, #64	; 0x40
   2e6fc:	ab13      	add	r3, sp, #76	; 0x4c
   2e6fe:	f141 0100 	adc.w	r1, r1, #0
   2e702:	f000 fa17 	bl	2eb34 <npgps_gps_sec_to_day_time>
		pred = index.predictions[pnum];
   2e706:	9b07      	ldr	r3, [sp, #28]
   2e708:	f853 9b04 	ldr.w	r9, [r3], #4
   2e70c:	9307      	str	r3, [sp, #28]
		if (pred == NULL) {
   2e70e:	f1b9 0f00 	cmp.w	r9, #0
   2e712:	d17e      	bne.n	2e812 <nrf_cloud_pgps_init+0x26e>
			LOG_WRN("Prediction num:%u missing", pnum);
   2e714:	462a      	mov	r2, r5
   2e716:	2157      	movs	r1, #87	; 0x57
   2e718:	4862      	ldr	r0, [pc, #392]	; (2e8a4 <nrf_cloud_pgps_init+0x300>)
   2e71a:	f00e f9f1 	bl	3cb00 <z_log_minimal_printk>
			*first_bad_day = gps_day;
   2e71e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2e722:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			*first_bad_time = gps_time_of_day;
   2e726:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2e728:	930f      	str	r3, [sp, #60]	; 0x3c
	if (i != -1) {
   2e72a:	1c7b      	adds	r3, r7, #1
   2e72c:	d002      	beq.n	2e734 <nrf_cloud_pgps_init+0x190>
		i = npgps_find_first_free(i);
   2e72e:	4638      	mov	r0, r7
   2e730:	f000 fb52 	bl	2edd8 <npgps_find_first_free>
	npgps_print_blocks();
   2e734:	f000 fb04 	bl	2ed40 <npgps_print_blocks>
		num_valid = validate_stored_predictions(&gps_day, &gps_time_of_day);
   2e738:	b2ad      	uxth	r5, r5
	struct nrf_cloud_pgps_prediction *found_prediction = NULL;
   2e73a:	2300      	movs	r3, #0
   2e73c:	9310      	str	r3, [sp, #64]	; 0x40
	if (num_valid) {
   2e73e:	b17d      	cbz	r5, 2e760 <nrf_cloud_pgps_init+0x1bc>
		LOG_INF("Checking if P-GPS data is expired...");
   2e740:	2149      	movs	r1, #73	; 0x49
   2e742:	4859      	ldr	r0, [pc, #356]	; (2e8a8 <nrf_cloud_pgps_init+0x304>)
   2e744:	f00e f9dc 	bl	3cb00 <z_log_minimal_printk>
		err = nrf_cloud_pgps_find_prediction(&found_prediction);
   2e748:	a810      	add	r0, sp, #64	; 0x40
   2e74a:	f7ff f8f5 	bl	2d938 <nrf_cloud_pgps_find_prediction>
		if (err == -ETIMEDOUT) {
   2e74e:	f110 0f74 	cmn.w	r0, #116	; 0x74
		err = nrf_cloud_pgps_find_prediction(&found_prediction);
   2e752:	4607      	mov	r7, r0
		if (err == -ETIMEDOUT) {
   2e754:	f040 80b6 	bne.w	2e8c4 <nrf_cloud_pgps_init+0x320>
			LOG_WRN("Predictions expired. Requesting predictions...");
   2e758:	2157      	movs	r1, #87	; 0x57
   2e75a:	4854      	ldr	r0, [pc, #336]	; (2e8ac <nrf_cloud_pgps_init+0x308>)
   2e75c:	f00e f9d0 	bl	3cb00 <z_log_minimal_printk>
		if (evt_handler) {
   2e760:	4b46      	ldr	r3, [pc, #280]	; (2e87c <nrf_cloud_pgps_init+0x2d8>)
   2e762:	681b      	ldr	r3, [r3, #0]
   2e764:	b123      	cbz	r3, 2e770 <nrf_cloud_pgps_init+0x1cc>
			evt.type = PGPS_EVT_UNAVAILABLE;
   2e766:	2201      	movs	r2, #1
			evt_handler(&evt);
   2e768:	a811      	add	r0, sp, #68	; 0x44
			evt.type = PGPS_EVT_UNAVAILABLE;
   2e76a:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
			evt_handler(&evt);
   2e76e:	4798      	blx	r3
		err = pgps_request_all();
   2e770:	f7ff f8a8 	bl	2d8c4 <pgps_request_all>
		err = nrf_cloud_pgps_preemptive_updates();
   2e774:	4604      	mov	r4, r0
   2e776:	e739      	b.n	2e5ec <nrf_cloud_pgps_init+0x48>
		index.predictions[pnum] = NULL;
   2e778:	f842 1b04 	str.w	r1, [r2], #4
	for (pnum = 0; pnum < count; pnum++) {
   2e77c:	3301      	adds	r3, #1
   2e77e:	e79a      	b.n	2e6b6 <nrf_cloud_pgps_init+0x112>
	int64_t start_sec = npgps_gps_day_time_to_sec(header->gps_day,
   2e780:	f8da 100c 	ldr.w	r1, [sl, #12]
   2e784:	f8ba 000a 	ldrh.w	r0, [sl, #10]
   2e788:	f000 f9ca 	bl	2eb20 <npgps_gps_day_time_to_sec>
	uint32_t period_sec = header->prediction_period_min * SEC_PER_MIN;
   2e78c:	233c      	movs	r3, #60	; 0x3c
   2e78e:	f8ba 2008 	ldrh.w	r2, [sl, #8]
	int64_t end_sec = start_sec + header->prediction_count * period_sec;
   2e792:	f8ba 7004 	ldrh.w	r7, [sl, #4]
	uint32_t period_sec = header->prediction_period_min * SEC_PER_MIN;
   2e796:	435a      	muls	r2, r3
	int64_t end_sec = start_sec + header->prediction_count * period_sec;
   2e798:	4357      	muls	r7, r2
   2e79a:	183f      	adds	r7, r7, r0
   2e79c:	f141 0300 	adc.w	r3, r1, #0
   2e7a0:	930c      	str	r3, [sp, #48]	; 0x30
   2e7a2:	920d      	str	r2, [sp, #52]	; 0x34
	int64_t start_sec = npgps_gps_day_time_to_sec(header->gps_day,
   2e7a4:	4605      	mov	r5, r0
   2e7a6:	468b      	mov	fp, r1
	int64_t pred_sec = npgps_gps_day_time_to_sec(p->time.date_day,
   2e7a8:	f8b8 0003 	ldrh.w	r0, [r8, #3]
   2e7ac:	f8d8 1005 	ldr.w	r1, [r8, #5]
   2e7b0:	f000 f9b6 	bl	2eb20 <npgps_gps_day_time_to_sec>
	if ((start_sec <= pred_sec) && (pred_sec < end_sec)) {
   2e7b4:	42a8      	cmp	r0, r5
   2e7b6:	eb71 030b 	sbcs.w	r3, r1, fp
   2e7ba:	db0d      	blt.n	2e7d8 <nrf_cloud_pgps_init+0x234>
   2e7bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2e7be:	42b8      	cmp	r0, r7
   2e7c0:	eb71 0303 	sbcs.w	r3, r1, r3
   2e7c4:	da08      	bge.n	2e7d8 <nrf_cloud_pgps_init+0x234>
		return (int)((pred_sec - start_sec) / period_sec);
   2e7c6:	1b40      	subs	r0, r0, r5
   2e7c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2e7ca:	eb61 010b 	sbc.w	r1, r1, fp
   2e7ce:	2300      	movs	r3, #0
   2e7d0:	f7ee fb3a 	bl	1ce48 <__aeabi_ldivmod>
		if (pnum < 0) {
   2e7d4:	1e02      	subs	r2, r0, #0
   2e7d6:	da0e      	bge.n	2e7f6 <nrf_cloud_pgps_init+0x252>
			LOG_ERR("prediction idx:%u, ofs:%p, out of expected time range;"
   2e7d8:	f8d8 3005 	ldr.w	r3, [r8, #5]
   2e7dc:	464a      	mov	r2, r9
   2e7de:	9301      	str	r3, [sp, #4]
   2e7e0:	f8b8 3003 	ldrh.w	r3, [r8, #3]
   2e7e4:	2145      	movs	r1, #69	; 0x45
   2e7e6:	9300      	str	r3, [sp, #0]
   2e7e8:	4831      	ldr	r0, [pc, #196]	; (2e8b0 <nrf_cloud_pgps_init+0x30c>)
   2e7ea:	4643      	mov	r3, r8
   2e7ec:	f00e f988 	bl	3cb00 <z_log_minimal_printk>
	for (i = 0; i < count; i++) {
   2e7f0:	f109 0901 	add.w	r9, r9, #1
   2e7f4:	e768      	b.n	2e6c8 <nrf_cloud_pgps_init+0x124>
		} else if (index.predictions[pnum] == NULL) {
   2e7f6:	f102 030e 	add.w	r3, r2, #14
   2e7fa:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   2e7fe:	6859      	ldr	r1, [r3, #4]
   2e800:	b911      	cbnz	r1, 2e808 <nrf_cloud_pgps_init+0x264>
			index.predictions[pnum] = pred;
   2e802:	f8c3 8004 	str.w	r8, [r3, #4]
			LOG_DBG("Prediction num:%u stored at idx:%d", pnum, i);
   2e806:	e7f3      	b.n	2e7f0 <nrf_cloud_pgps_init+0x24c>
			LOG_WRN("Prediction num:%u stored more than once!", pnum);
   2e808:	2157      	movs	r1, #87	; 0x57
   2e80a:	482a      	ldr	r0, [pc, #168]	; (2e8b4 <nrf_cloud_pgps_init+0x310>)
   2e80c:	f00e f978 	bl	3cb00 <z_log_minimal_printk>
   2e810:	e7ee      	b.n	2e7f0 <nrf_cloud_pgps_init+0x24c>
		err = validate_prediction(pred, gps_day, gps_time_of_day,
   2e812:	2301      	movs	r3, #1
   2e814:	4648      	mov	r0, r9
   2e816:	9300      	str	r3, [sp, #0]
   2e818:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2e81a:	9b08      	ldr	r3, [sp, #32]
   2e81c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   2e820:	f7fe feb6 	bl	2d590 <validate_prediction.constprop.0>
		if (err) {
   2e824:	b158      	cbz	r0, 2e83e <nrf_cloud_pgps_init+0x29a>
			LOG_ERR("Prediction num:%u, gps_day:%u, "
   2e826:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2e828:	e9cd 0901 	strd	r0, r9, [sp, #4]
   2e82c:	9300      	str	r3, [sp, #0]
   2e82e:	462a      	mov	r2, r5
   2e830:	2145      	movs	r1, #69	; 0x45
   2e832:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2e836:	4820      	ldr	r0, [pc, #128]	; (2e8b8 <nrf_cloud_pgps_init+0x314>)
   2e838:	f00e f962 	bl	3cb00 <z_log_minimal_printk>
   2e83c:	e76f      	b.n	2e71e <nrf_cloud_pgps_init+0x17a>
		i = npgps_pointer_to_block((uint8_t *)pred);
   2e83e:	4648      	mov	r0, r9
   2e840:	f000 fafa 	bl	2ee38 <npgps_pointer_to_block>
		__ASSERT(i != -1, "unexpected pointer value %p", pred);
   2e844:	1c42      	adds	r2, r0, #1
		i = npgps_pointer_to_block((uint8_t *)pred);
   2e846:	4607      	mov	r7, r0
		__ASSERT(i != -1, "unexpected pointer value %p", pred);
   2e848:	d10a      	bne.n	2e860 <nrf_cloud_pgps_init+0x2bc>
   2e84a:	4651      	mov	r1, sl
   2e84c:	4658      	mov	r0, fp
   2e84e:	f44f 7298 	mov.w	r2, #304	; 0x130
   2e852:	f00e f91b 	bl	3ca8c <assert_print>
   2e856:	f44f 7198 	mov.w	r1, #304	; 0x130
   2e85a:	4650      	mov	r0, sl
   2e85c:	f00e f90f 	bl	3ca7e <assert_post_action>
		npgps_mark_block_used(i, true);
   2e860:	2101      	movs	r1, #1
   2e862:	4638      	mov	r0, r7
   2e864:	f000 fa4c 	bl	2ed00 <npgps_mark_block_used>
	for (pnum = 0; pnum < count; pnum++) {
   2e868:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e86a:	3501      	adds	r5, #1
   2e86c:	4498      	add	r8, r3
   2e86e:	e73d      	b.n	2e6ec <nrf_cloud_pgps_init+0x148>
	uint16_t count = 0;
   2e870:	4626      	mov	r6, r4
	uint16_t num_valid = 0;
   2e872:	4625      	mov	r5, r4
	uint16_t period_min  = 0;
   2e874:	9405      	str	r4, [sp, #20]
   2e876:	e760      	b.n	2e73a <nrf_cloud_pgps_init+0x196>
   2e878:	00049ce8 	.word	0x00049ce8
   2e87c:	2001a114 	.word	0x2001a114
   2e880:	2001a11c 	.word	0x2001a11c
   2e884:	2001a150 	.word	0x2001a150
   2e888:	2001d2bf 	.word	0x2001d2bf
   2e88c:	2001a128 	.word	0x2001a128
   2e890:	2001a124 	.word	0x2001a124
   2e894:	20015810 	.word	0x20015810
   2e898:	0002dcc1 	.word	0x0002dcc1
   2e89c:	00049d1b 	.word	0x00049d1b
   2e8a0:	00049d46 	.word	0x00049d46
   2e8a4:	00049df9 	.word	0x00049df9
   2e8a8:	00049e61 	.word	0x00049e61
   2e8ac:	00049e8b 	.word	0x00049e8b
   2e8b0:	00049d7f 	.word	0x00049d7f
   2e8b4:	00049dcb 	.word	0x00049dcb
   2e8b8:	00049e18 	.word	0x00049e18
   2e8bc:	0004997f 	.word	0x0004997f
   2e8c0:	0004409e 	.word	0x0004409e
		} else if (err >= 0) {
   2e8c4:	2800      	cmp	r0, #0
   2e8c6:	db46      	blt.n	2e956 <nrf_cloud_pgps_init+0x3b2>
			LOG_INF("Found valid prediction, day:%u, time:%u",
   2e8c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2e8ca:	2149      	movs	r1, #73	; 0x49
   2e8cc:	f8d2 3005 	ldr.w	r3, [r2, #5]
   2e8d0:	4822      	ldr	r0, [pc, #136]	; (2e95c <nrf_cloud_pgps_init+0x3b8>)
   2e8d2:	f8b2 2003 	ldrh.w	r2, [r2, #3]
   2e8d6:	f00e f913 	bl	3cb00 <z_log_minimal_printk>
	} else if (num_valid < count) {
   2e8da:	42ae      	cmp	r6, r5
   2e8dc:	d920      	bls.n	2e920 <nrf_cloud_pgps_init+0x37c>
		LOG_INF("Incomplete P-GPS data; "
   2e8de:	1b76      	subs	r6, r6, r5
   2e8e0:	4632      	mov	r2, r6
   2e8e2:	2149      	movs	r1, #73	; 0x49
   2e8e4:	481e      	ldr	r0, [pc, #120]	; (2e960 <nrf_cloud_pgps_init+0x3bc>)
   2e8e6:	f00e f90b 	bl	3cb00 <z_log_minimal_printk>
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e8ea:	4b1e      	ldr	r3, [pc, #120]	; (2e964 <nrf_cloud_pgps_init+0x3c0>)
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e8ec:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e8f0:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
   2e8f2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e8f6:	ab0f      	add	r3, sp, #60	; 0x3c
   2e8f8:	fbe4 0105 	umlal	r0, r1, r4, r5
   2e8fc:	f000 f91a 	bl	2eb34 <npgps_gps_sec_to_day_time>
		request.gps_day = gps_day;
   2e900:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
		err = pgps_request(&request);
   2e904:	a813      	add	r0, sp, #76	; 0x4c
		request.gps_day = gps_day;
   2e906:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
		request.gps_time_of_day = gps_time_of_day;
   2e90a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		request.prediction_count = count - num_valid;
   2e90c:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
		request.gps_time_of_day = gps_time_of_day;
   2e910:	f8cd 3052 	str.w	r3, [sp, #82]	; 0x52
		request.prediction_period_min = period_min;
   2e914:	9b05      	ldr	r3, [sp, #20]
   2e916:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
		err = pgps_request(&request);
   2e91a:	f7fe ff33 	bl	2d784 <pgps_request>
   2e91e:	e729      	b.n	2e774 <nrf_cloud_pgps_init+0x1d0>
	} else if ((count - (pnum + 1)) < REPLACEMENT_THRESHOLD) {
   2e920:	3701      	adds	r7, #1
   2e922:	1bf6      	subs	r6, r6, r7
   2e924:	2e03      	cmp	r6, #3
   2e926:	dc02      	bgt.n	2e92e <nrf_cloud_pgps_init+0x38a>
		err = nrf_cloud_pgps_preemptive_updates();
   2e928:	f7ff fbe0 	bl	2e0ec <nrf_cloud_pgps_preemptive_updates>
   2e92c:	e722      	b.n	2e774 <nrf_cloud_pgps_init+0x1d0>
		state = PGPS_READY;
   2e92e:	2206      	movs	r2, #6
   2e930:	4b0d      	ldr	r3, [pc, #52]	; (2e968 <nrf_cloud_pgps_init+0x3c4>)
		LOG_INF("P-GPS data is up to date.");
   2e932:	2149      	movs	r1, #73	; 0x49
   2e934:	480d      	ldr	r0, [pc, #52]	; (2e96c <nrf_cloud_pgps_init+0x3c8>)
		state = PGPS_READY;
   2e936:	701a      	strb	r2, [r3, #0]
		LOG_INF("P-GPS data is up to date.");
   2e938:	f00e f8e2 	bl	3cb00 <z_log_minimal_printk>
		if (evt_handler) {
   2e93c:	4b0c      	ldr	r3, [pc, #48]	; (2e970 <nrf_cloud_pgps_init+0x3cc>)
   2e93e:	681b      	ldr	r3, [r3, #0]
   2e940:	2b00      	cmp	r3, #0
   2e942:	f43f ae52 	beq.w	2e5ea <nrf_cloud_pgps_init+0x46>
			evt.type = PGPS_EVT_READY;
   2e946:	2204      	movs	r2, #4
   2e948:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
			evt.prediction = found_prediction;
   2e94c:	9a10      	ldr	r2, [sp, #64]	; 0x40
			evt_handler(&evt);
   2e94e:	a811      	add	r0, sp, #68	; 0x44
			evt.prediction = found_prediction;
   2e950:	9212      	str	r2, [sp, #72]	; 0x48
			evt_handler(&evt);
   2e952:	4798      	blx	r3
   2e954:	e64a      	b.n	2e5ec <nrf_cloud_pgps_init+0x48>
	int pnum = -1;
   2e956:	f04f 37ff 	mov.w	r7, #4294967295
   2e95a:	e7be      	b.n	2e8da <nrf_cloud_pgps_init+0x336>
   2e95c:	00049ebf 	.word	0x00049ebf
   2e960:	00049eec 	.word	0x00049eec
   2e964:	20015810 	.word	0x20015810
   2e968:	2001d2bf 	.word	0x2001d2bf
   2e96c:	00049f2f 	.word	0x00049f2f
   2e970:	2001a114 	.word	0x2001a114

0002e974 <settings_set>:
SETTINGS_STATIC_HANDLER_DEFINE(nrf_cloud_pgps, SETTINGS_NAME, NULL, settings_set,
			       NULL, NULL);

static int settings_set(const char *key, size_t len_rd,
			settings_read_cb read_cb, void *cb_arg)
{
   2e974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e976:	460c      	mov	r4, r1
   2e978:	4616      	mov	r6, r2
   2e97a:	461f      	mov	r7, r3
	if (!key) {
   2e97c:	4605      	mov	r5, r0
   2e97e:	2800      	cmp	r0, #0
   2e980:	d039      	beq.n	2e9f6 <settings_set+0x82>
		return -EINVAL;
	}

	LOG_DBG("Settings key:%s, size:%d", log_strdup(key), len_rd);

	if (!strncmp(key, SETTINGS_KEY_PGPS_HEADER,
   2e982:	481e      	ldr	r0, [pc, #120]	; (2e9fc <settings_set+0x88>)
   2e984:	f7ee fc5d 	bl	1d242 <strlen>
   2e988:	491c      	ldr	r1, [pc, #112]	; (2e9fc <settings_set+0x88>)
   2e98a:	4602      	mov	r2, r0
   2e98c:	4628      	mov	r0, r5
   2e98e:	f012 ff24 	bl	417da <strncmp>
   2e992:	b1a0      	cbz	r0, 2e9be <settings_set+0x4a>
				saved_header.prediction_count, saved_header.prediction_period_min,
				saved_header.gps_day, saved_header.gps_time_of_day);
			return 0;
		}
	}
	if (!strncmp(key, SETTINGS_KEY_LOCATION,
   2e994:	481a      	ldr	r0, [pc, #104]	; (2ea00 <settings_set+0x8c>)
   2e996:	f7ee fc54 	bl	1d242 <strlen>
   2e99a:	4919      	ldr	r1, [pc, #100]	; (2ea00 <settings_set+0x8c>)
   2e99c:	4602      	mov	r2, r0
   2e99e:	4628      	mov	r0, r5
   2e9a0:	f012 ff1b 	bl	417da <strncmp>
   2e9a4:	b1a8      	cbz	r0, 2e9d2 <settings_set+0x5e>
				saved_location.latitude, saved_location.longitude,
				(int32_t)saved_location.gps_sec);
			return 0;
		}
	}
	if (!strncmp(key, SETTINGS_KEY_LEAP_SEC,
   2e9a6:	4817      	ldr	r0, [pc, #92]	; (2ea04 <settings_set+0x90>)
   2e9a8:	f7ee fc4b 	bl	1d242 <strlen>
   2e9ac:	4915      	ldr	r1, [pc, #84]	; (2ea04 <settings_set+0x90>)
   2e9ae:	4602      	mov	r2, r0
   2e9b0:	4628      	mov	r0, r5
   2e9b2:	f012 ff12 	bl	417da <strncmp>
   2e9b6:	b1a8      	cbz	r0, 2e9e4 <settings_set+0x70>
			LOG_DBG("Read gps to utc leap seconds offset:%d",
				gps_leap_seconds);
			return 0;
		}
	}
	return -ENOTSUP;
   2e9b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2e9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		     strlen(SETTINGS_KEY_PGPS_HEADER)) &&
   2e9be:	2c10      	cmp	r4, #16
   2e9c0:	d1e8      	bne.n	2e994 <settings_set+0x20>
		if (read_cb(cb_arg, (void *)&saved_header, len_rd) == len_rd) {
   2e9c2:	4622      	mov	r2, r4
   2e9c4:	4638      	mov	r0, r7
   2e9c6:	4910      	ldr	r1, [pc, #64]	; (2ea08 <settings_set+0x94>)
   2e9c8:	47b0      	blx	r6
   2e9ca:	2810      	cmp	r0, #16
   2e9cc:	d1e2      	bne.n	2e994 <settings_set+0x20>
			return 0;
   2e9ce:	2000      	movs	r0, #0
   2e9d0:	e7f4      	b.n	2e9bc <settings_set+0x48>
		     strlen(SETTINGS_KEY_LOCATION)) &&
   2e9d2:	2c10      	cmp	r4, #16
   2e9d4:	d1e7      	bne.n	2e9a6 <settings_set+0x32>
		if (read_cb(cb_arg, (void *)&saved_location, len_rd) == len_rd) {
   2e9d6:	4622      	mov	r2, r4
   2e9d8:	4638      	mov	r0, r7
   2e9da:	490c      	ldr	r1, [pc, #48]	; (2ea0c <settings_set+0x98>)
   2e9dc:	47b0      	blx	r6
   2e9de:	2810      	cmp	r0, #16
   2e9e0:	d1e1      	bne.n	2e9a6 <settings_set+0x32>
   2e9e2:	e7f4      	b.n	2e9ce <settings_set+0x5a>
		     strlen(SETTINGS_KEY_LEAP_SEC)) &&
   2e9e4:	2c04      	cmp	r4, #4
   2e9e6:	d1e7      	bne.n	2e9b8 <settings_set+0x44>
		if (read_cb(cb_arg, (void *)&gps_leap_seconds, len_rd) == len_rd) {
   2e9e8:	4622      	mov	r2, r4
   2e9ea:	4638      	mov	r0, r7
   2e9ec:	4908      	ldr	r1, [pc, #32]	; (2ea10 <settings_set+0x9c>)
   2e9ee:	47b0      	blx	r6
   2e9f0:	2804      	cmp	r0, #4
   2e9f2:	d0ec      	beq.n	2e9ce <settings_set+0x5a>
   2e9f4:	e7e0      	b.n	2e9b8 <settings_set+0x44>
		return -EINVAL;
   2e9f6:	f06f 0015 	mvn.w	r0, #21
   2e9fa:	e7df      	b.n	2e9bc <settings_set+0x48>
   2e9fc:	00049fe6 	.word	0x00049fe6
   2ea00:	0004a03b 	.word	0x0004a03b
   2ea04:	0004a053 	.word	0x0004a053
   2ea08:	2001d2c0 	.word	0x2001d2c0
   2ea0c:	20017350 	.word	0x20017350
   2ea10:	200146c4 	.word	0x200146c4

0002ea14 <download_client_callback>:
	LOG_DBG("pgps_active UNLOCKED");
	return err;
}

static int download_client_callback(const struct download_client_evt *event)
{
   2ea14:	b538      	push	{r3, r4, r5, lr}
	int err = 0;

	if (event == NULL) {
   2ea16:	2800      	cmp	r0, #0
   2ea18:	d037      	beq.n	2ea8a <download_client_callback+0x76>
		return -EINVAL;
	}

	switch (event->id) {
   2ea1a:	7803      	ldrb	r3, [r0, #0]
   2ea1c:	2b01      	cmp	r3, #1
   2ea1e:	d01f      	beq.n	2ea60 <download_client_callback+0x4c>
   2ea20:	2b02      	cmp	r3, #2
   2ea22:	d009      	beq.n	2ea38 <download_client_callback+0x24>
   2ea24:	bb63      	cbnz	r3, 2ea80 <download_client_callback+0x6c>
	case DOWNLOAD_CLIENT_EVT_FRAGMENT:
		err = buffer_handler((uint8_t *)event->fragment.buf,
   2ea26:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2ea2a:	4b19      	ldr	r3, [pc, #100]	; (2ea90 <download_client_callback+0x7c>)
   2ea2c:	681b      	ldr	r3, [r3, #0]
   2ea2e:	4798      	blx	r3
				     event->fragment.len);
		if (!err) {
   2ea30:	4604      	mov	r4, r0
   2ea32:	b930      	cbnz	r0, 2ea42 <download_client_callback+0x2e>
		err = ret;
	}
	k_sem_give(&pgps_active);
	LOG_DBG("pgps_active UNLOCKED");
	return err;
}
   2ea34:	4620      	mov	r0, r4
   2ea36:	bd38      	pop	{r3, r4, r5, pc}
		LOG_INF("Download client done");
   2ea38:	2149      	movs	r1, #73	; 0x49
   2ea3a:	4816      	ldr	r0, [pc, #88]	; (2ea94 <download_client_callback+0x80>)
   2ea3c:	f00e f860 	bl	3cb00 <z_log_minimal_printk>
	int err = 0;
   2ea40:	2400      	movs	r4, #0
	int ret = download_client_disconnect(&dlc);
   2ea42:	4815      	ldr	r0, [pc, #84]	; (2ea98 <download_client_callback+0x84>)
   2ea44:	f001 fbc6 	bl	301d4 <download_client_disconnect>
	if (ret) {
   2ea48:	4605      	mov	r5, r0
   2ea4a:	b128      	cbz	r0, 2ea58 <download_client_callback+0x44>
		LOG_ERR("Error disconnecting from "
   2ea4c:	4602      	mov	r2, r0
   2ea4e:	2145      	movs	r1, #69	; 0x45
   2ea50:	4812      	ldr	r0, [pc, #72]	; (2ea9c <download_client_callback+0x88>)
   2ea52:	f00e f855 	bl	3cb00 <z_log_minimal_printk>
   2ea56:	462c      	mov	r4, r5
	z_impl_k_sem_give(sem);
   2ea58:	4811      	ldr	r0, [pc, #68]	; (2eaa0 <download_client_callback+0x8c>)
   2ea5a:	f008 f98d 	bl	36d78 <z_impl_k_sem_give>
}
   2ea5e:	e7e9      	b.n	2ea34 <download_client_callback+0x20>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   2ea60:	4c10      	ldr	r4, [pc, #64]	; (2eaa4 <download_client_callback+0x90>)
   2ea62:	6822      	ldr	r2, [r4, #0]
   2ea64:	b172      	cbz	r2, 2ea84 <download_client_callback+0x70>
   2ea66:	6843      	ldr	r3, [r0, #4]
   2ea68:	f113 0f80 	cmn.w	r3, #128	; 0x80
   2ea6c:	d001      	beq.n	2ea72 <download_client_callback+0x5e>
   2ea6e:	3368      	adds	r3, #104	; 0x68
   2ea70:	d108      	bne.n	2ea84 <download_client_callback+0x70>
			LOG_WRN("Download socket error. %d retries left...",
   2ea72:	2157      	movs	r1, #87	; 0x57
   2ea74:	480c      	ldr	r0, [pc, #48]	; (2eaa8 <download_client_callback+0x94>)
   2ea76:	f00e f843 	bl	3cb00 <z_log_minimal_printk>
			socket_retries_left--;
   2ea7a:	6823      	ldr	r3, [r4, #0]
   2ea7c:	3b01      	subs	r3, #1
   2ea7e:	6023      	str	r3, [r4, #0]
	switch (event->id) {
   2ea80:	2400      	movs	r4, #0
   2ea82:	e7d7      	b.n	2ea34 <download_client_callback+0x20>
		err = -EIO;
   2ea84:	f06f 0404 	mvn.w	r4, #4
   2ea88:	e7db      	b.n	2ea42 <download_client_callback+0x2e>
		return -EINVAL;
   2ea8a:	f06f 0415 	mvn.w	r4, #21
   2ea8e:	e7d1      	b.n	2ea34 <download_client_callback+0x20>
   2ea90:	2001a158 	.word	0x2001a158
   2ea94:	00049f5d 	.word	0x00049f5d
   2ea98:	200158f8 	.word	0x200158f8
   2ea9c:	00049fa6 	.word	0x00049fa6
   2eaa0:	200150a8 	.word	0x200150a8
   2eaa4:	2001a194 	.word	0x2001a194
   2eaa8:	00049f77 	.word	0x00049f77

0002eaac <npgps_save_header>:
{
   2eaac:	4601      	mov	r1, r0
	ret = settings_save_one(SETTINGS_FULL_PGPS_HEADER, header, sizeof(*header));
   2eaae:	2210      	movs	r2, #16
   2eab0:	4801      	ldr	r0, [pc, #4]	; (2eab8 <npgps_save_header+0xc>)
   2eab2:	f7f3 ba23 	b.w	21efc <settings_save_one>
   2eab6:	bf00      	nop
   2eab8:	00049fd7 	.word	0x00049fd7

0002eabc <npgps_get_saved_header>:
}
   2eabc:	4800      	ldr	r0, [pc, #0]	; (2eac0 <npgps_get_saved_header+0x4>)
   2eabe:	4770      	bx	lr
   2eac0:	2001d2c0 	.word	0x2001d2c0

0002eac4 <npgps_get_saved_location>:
}
   2eac4:	4800      	ldr	r0, [pc, #0]	; (2eac8 <npgps_get_saved_location+0x4>)
   2eac6:	4770      	bx	lr
   2eac8:	20017350 	.word	0x20017350

0002eacc <npgps_settings_init>:
{
   2eacc:	b510      	push	{r4, lr}
	ret = settings_subsys_init();
   2eace:	f7f3 fb61 	bl	22194 <settings_subsys_init>
	if (ret) {
   2ead2:	4604      	mov	r4, r0
   2ead4:	b130      	cbz	r0, 2eae4 <npgps_settings_init+0x18>
		LOG_ERR("Settings init failed:%d", ret);
   2ead6:	2145      	movs	r1, #69	; 0x45
   2ead8:	4602      	mov	r2, r0
   2eada:	4807      	ldr	r0, [pc, #28]	; (2eaf8 <npgps_settings_init+0x2c>)
		LOG_ERR("Cannot load settings:%d", ret);
   2eadc:	f00e f810 	bl	3cb00 <z_log_minimal_printk>
}
   2eae0:	4620      	mov	r0, r4
   2eae2:	bd10      	pop	{r4, pc}
	ret = settings_load_subtree(settings_handler_nrf_cloud_pgps.name);
   2eae4:	4805      	ldr	r0, [pc, #20]	; (2eafc <npgps_settings_init+0x30>)
   2eae6:	f7f3 fa43 	bl	21f70 <settings_load_subtree>
	if (ret) {
   2eaea:	4604      	mov	r4, r0
   2eaec:	2800      	cmp	r0, #0
   2eaee:	d0f7      	beq.n	2eae0 <npgps_settings_init+0x14>
		LOG_ERR("Cannot load settings:%d", ret);
   2eaf0:	4602      	mov	r2, r0
   2eaf2:	2145      	movs	r1, #69	; 0x45
   2eaf4:	4802      	ldr	r0, [pc, #8]	; (2eb00 <npgps_settings_init+0x34>)
   2eaf6:	e7f1      	b.n	2eadc <npgps_settings_init+0x10>
   2eaf8:	00049ff2 	.word	0x00049ff2
   2eafc:	00049f4e 	.word	0x00049f4e
   2eb00:	0004a00f 	.word	0x0004a00f

0002eb04 <nrf_cloud_pgps_set_leap_seconds>:
	if (gps_leap_seconds != leap_seconds) {
   2eb04:	4904      	ldr	r1, [pc, #16]	; (2eb18 <nrf_cloud_pgps_set_leap_seconds+0x14>)
   2eb06:	680b      	ldr	r3, [r1, #0]
   2eb08:	4283      	cmp	r3, r0
   2eb0a:	d004      	beq.n	2eb16 <nrf_cloud_pgps_set_leap_seconds+0x12>
		gps_leap_seconds = leap_seconds;
   2eb0c:	6008      	str	r0, [r1, #0]
	ret = settings_save_one(SETTINGS_FULL_LEAP_SEC,
   2eb0e:	2204      	movs	r2, #4
   2eb10:	4802      	ldr	r0, [pc, #8]	; (2eb1c <nrf_cloud_pgps_set_leap_seconds+0x18>)
   2eb12:	f7f3 b9f3 	b.w	21efc <settings_save_one>
}
   2eb16:	4770      	bx	lr
   2eb18:	200146c4 	.word	0x200146c4
   2eb1c:	0004a044 	.word	0x0004a044

0002eb20 <npgps_gps_day_time_to_sec>:
	int64_t gps_sec = (int64_t)gps_day * SEC_PER_DAY + gps_time_of_day;
   2eb20:	4b03      	ldr	r3, [pc, #12]	; (2eb30 <npgps_gps_day_time_to_sec+0x10>)
   2eb22:	fba0 0303 	umull	r0, r3, r0, r3
   2eb26:	1840      	adds	r0, r0, r1
}
   2eb28:	f143 0100 	adc.w	r1, r3, #0
   2eb2c:	4770      	bx	lr
   2eb2e:	bf00      	nop
   2eb30:	00015180 	.word	0x00015180

0002eb34 <npgps_gps_sec_to_day_time>:
{
   2eb34:	b570      	push	{r4, r5, r6, lr}
   2eb36:	4616      	mov	r6, r2
   2eb38:	461d      	mov	r5, r3
	day = (uint16_t)(gps_sec / SEC_PER_DAY);
   2eb3a:	4a07      	ldr	r2, [pc, #28]	; (2eb58 <npgps_gps_sec_to_day_time+0x24>)
   2eb3c:	2300      	movs	r3, #0
{
   2eb3e:	4604      	mov	r4, r0
	day = (uint16_t)(gps_sec / SEC_PER_DAY);
   2eb40:	f7ee f982 	bl	1ce48 <__aeabi_ldivmod>
   2eb44:	b280      	uxth	r0, r0
	if (gps_day) {
   2eb46:	b106      	cbz	r6, 2eb4a <npgps_gps_sec_to_day_time+0x16>
		*gps_day = day;
   2eb48:	8030      	strh	r0, [r6, #0]
	if (gps_time_of_day) {
   2eb4a:	b11d      	cbz	r5, 2eb54 <npgps_gps_sec_to_day_time+0x20>
	time = (uint32_t)(gps_sec - (day * SEC_PER_DAY));
   2eb4c:	4b02      	ldr	r3, [pc, #8]	; (2eb58 <npgps_gps_sec_to_day_time+0x24>)
   2eb4e:	fb03 4410 	mls	r4, r3, r0, r4
		*gps_time_of_day = time;
   2eb52:	602c      	str	r4, [r5, #0]
}
   2eb54:	bd70      	pop	{r4, r5, r6, pc}
   2eb56:	bf00      	nop
   2eb58:	00015180 	.word	0x00015180

0002eb5c <npgps_get_shifted_time>:
{
   2eb5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2eb60:	4606      	mov	r6, r0
	err = date_time_now(&now);
   2eb62:	4668      	mov	r0, sp
{
   2eb64:	460f      	mov	r7, r1
   2eb66:	4690      	mov	r8, r2
   2eb68:	461c      	mov	r4, r3
	err = date_time_now(&now);
   2eb6a:	f7f9 fffb 	bl	28b64 <date_time_now>
	if (!err) {
   2eb6e:	4605      	mov	r5, r0
   2eb70:	bb08      	cbnz	r0, 2ebb6 <npgps_get_shifted_time+0x5a>
		now += shift * MSEC_PER_SEC;
   2eb72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2eb76:	4344      	muls	r4, r0
   2eb78:	9800      	ldr	r0, [sp, #0]
	utc_sec = utc / MSEC_PER_SEC;
   2eb7a:	9901      	ldr	r1, [sp, #4]
		now += shift * MSEC_PER_SEC;
   2eb7c:	1820      	adds	r0, r4, r0
	utc_sec = utc / MSEC_PER_SEC;
   2eb7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2eb82:	f04f 0300 	mov.w	r3, #0
   2eb86:	f141 0100 	adc.w	r1, r1, #0
   2eb8a:	f7ee f95d 	bl	1ce48 <__aeabi_ldivmod>
	gps_sec = (utc_sec - GPS_TO_UNIX_UTC_OFFSET_SECONDS) + gps_leap_seconds;
   2eb8e:	4b0c      	ldr	r3, [pc, #48]	; (2ebc0 <npgps_get_shifted_time+0x64>)
   2eb90:	4c0c      	ldr	r4, [pc, #48]	; (2ebc4 <npgps_get_shifted_time+0x68>)
   2eb92:	681b      	ldr	r3, [r3, #0]
   2eb94:	1904      	adds	r4, r0, r4
   2eb96:	f161 0100 	sbc.w	r1, r1, #0
   2eb9a:	18e0      	adds	r0, r4, r3
   2eb9c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
		npgps_gps_sec_to_day_time(now, gps_day, gps_time_of_day);
   2eba0:	463a      	mov	r2, r7
   2eba2:	4643      	mov	r3, r8
		now = utc_to_gps_sec(now, NULL);
   2eba4:	e9cd 0100 	strd	r0, r1, [sp]
		npgps_gps_sec_to_day_time(now, gps_day, gps_time_of_day);
   2eba8:	f7ff ffc4 	bl	2eb34 <npgps_gps_sec_to_day_time>
		if (gps_sec != NULL) {
   2ebac:	b11e      	cbz	r6, 2ebb6 <npgps_get_shifted_time+0x5a>
			*gps_sec = now;
   2ebae:	e9dd 2300 	ldrd	r2, r3, [sp]
   2ebb2:	e9c6 2300 	strd	r2, r3, [r6]
}
   2ebb6:	4628      	mov	r0, r5
   2ebb8:	b002      	add	sp, #8
   2ebba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ebbe:	bf00      	nop
   2ebc0:	200146c4 	.word	0x200146c4
   2ebc4:	ed2ac280 	.word	0xed2ac280

0002ebc8 <nrf_cloud_pgps_set_location_normalized>:
	if (npgps_get_time(&sec, NULL, NULL)) {
   2ebc8:	2200      	movs	r2, #0
{
   2ebca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ebcc:	4605      	mov	r5, r0
   2ebce:	460e      	mov	r6, r1
	if (npgps_get_time(&sec, NULL, NULL)) {
   2ebd0:	4668      	mov	r0, sp
   2ebd2:	4611      	mov	r1, r2
   2ebd4:	f010 fdc1 	bl	3f75a <npgps_get_time>
   2ebd8:	4c18      	ldr	r4, [pc, #96]	; (2ec3c <nrf_cloud_pgps_set_location_normalized+0x74>)
   2ebda:	b118      	cbz	r0, 2ebe4 <nrf_cloud_pgps_set_location_normalized+0x1c>
		sec = saved_location.gps_sec; /* could not get time; use prev */
   2ebdc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2ebe0:	e9cd 2300 	strd	r2, r3, [sp]
	if ((abs(latitude - saved_location.latitude) > SAVED_LOCATION_LAT_DELTA) ||
   2ebe4:	6820      	ldr	r0, [r4, #0]
   2ebe6:	1a28      	subs	r0, r5, r0
   2ebe8:	f012 fbde 	bl	413a8 <abs>
   2ebec:	f242 4368 	movw	r3, #9320	; 0x2468
   2ebf0:	4298      	cmp	r0, r3
   2ebf2:	dd0c      	ble.n	2ec0e <nrf_cloud_pgps_set_location_normalized+0x46>
		saved_location.gps_sec = sec;
   2ebf4:	e9dd 2300 	ldrd	r2, r3, [sp]
	ret = settings_save_one(SETTINGS_FULL_LOCATION,
   2ebf8:	4910      	ldr	r1, [pc, #64]	; (2ec3c <nrf_cloud_pgps_set_location_normalized+0x74>)
		saved_location.gps_sec = sec;
   2ebfa:	e9c4 2302 	strd	r2, r3, [r4, #8]
	ret = settings_save_one(SETTINGS_FULL_LOCATION,
   2ebfe:	4810      	ldr	r0, [pc, #64]	; (2ec40 <nrf_cloud_pgps_set_location_normalized+0x78>)
   2ec00:	2210      	movs	r2, #16
		saved_location.longitude = longitude;
   2ec02:	e9c4 5600 	strd	r5, r6, [r4]
	ret = settings_save_one(SETTINGS_FULL_LOCATION,
   2ec06:	f7f3 f979 	bl	21efc <settings_save_one>
}
   2ec0a:	b002      	add	sp, #8
   2ec0c:	bd70      	pop	{r4, r5, r6, pc}
	    (abs(longitude - saved_location.longitude) > SAVED_LOCATION_LNG_DELTA) ||
   2ec0e:	6860      	ldr	r0, [r4, #4]
   2ec10:	1a30      	subs	r0, r6, r0
   2ec12:	f012 fbc9 	bl	413a8 <abs>
	if ((abs(latitude - saved_location.latitude) > SAVED_LOCATION_LAT_DELTA) ||
   2ec16:	f241 2334 	movw	r3, #4660	; 0x1234
   2ec1a:	4298      	cmp	r0, r3
   2ec1c:	dcea      	bgt.n	2ebf4 <nrf_cloud_pgps_set_location_normalized+0x2c>
	    ((sec - saved_location.gps_sec) > SAVED_LOCATION_MIN_DELTA_SEC)) {
   2ec1e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
   2ec22:	9b00      	ldr	r3, [sp, #0]
   2ec24:	9a01      	ldr	r2, [sp, #4]
   2ec26:	1a5b      	subs	r3, r3, r1
	    (abs(longitude - saved_location.longitude) > SAVED_LOCATION_LNG_DELTA) ||
   2ec28:	f64a 01c1 	movw	r1, #43201	; 0xa8c1
	    ((sec - saved_location.gps_sec) > SAVED_LOCATION_MIN_DELTA_SEC)) {
   2ec2c:	eb62 0200 	sbc.w	r2, r2, r0
	    (abs(longitude - saved_location.longitude) > SAVED_LOCATION_LNG_DELTA) ||
   2ec30:	428b      	cmp	r3, r1
   2ec32:	f172 0300 	sbcs.w	r3, r2, #0
   2ec36:	dadd      	bge.n	2ebf4 <nrf_cloud_pgps_set_location_normalized+0x2c>
   2ec38:	e7e7      	b.n	2ec0a <nrf_cloud_pgps_set_location_normalized+0x42>
   2ec3a:	bf00      	nop
   2ec3c:	20017350 	.word	0x20017350
   2ec40:	0004a02c 	.word	0x0004a02c

0002ec44 <ngps_block_pool_init>:
	block_pool_base = (uint8_t *)base_address;
   2ec44:	4b02      	ldr	r3, [pc, #8]	; (2ec50 <ngps_block_pool_init+0xc>)
   2ec46:	6018      	str	r0, [r3, #0]
	num_blocks = num;
   2ec48:	4b02      	ldr	r3, [pc, #8]	; (2ec54 <ngps_block_pool_init+0x10>)
}
   2ec4a:	2000      	movs	r0, #0
	num_blocks = num;
   2ec4c:	6019      	str	r1, [r3, #0]
}
   2ec4e:	4770      	bx	lr
   2ec50:	2001a154 	.word	0x2001a154
   2ec54:	2001a15c 	.word	0x2001a15c

0002ec58 <npgps_alloc_block>:
	if (pool.first_free < 0) {
   2ec58:	4a0c      	ldr	r2, [pc, #48]	; (2ec8c <npgps_alloc_block+0x34>)
{
   2ec5a:	b510      	push	{r4, lr}
	if (pool.first_free < 0) {
   2ec5c:	6810      	ldr	r0, [r2, #0]
   2ec5e:	2800      	cmp	r0, #0
   2ec60:	db11      	blt.n	2ec86 <npgps_alloc_block+0x2e>
	pool.block_used[pool.first_free] = true;
   2ec62:	2101      	movs	r1, #1
   2ec64:	1813      	adds	r3, r2, r0
   2ec66:	7219      	strb	r1, [r3, #8]
	pool.first_free = (pool.first_free + 1) % num_blocks;
   2ec68:	1843      	adds	r3, r0, r1
   2ec6a:	4909      	ldr	r1, [pc, #36]	; (2ec90 <npgps_alloc_block+0x38>)
   2ec6c:	6809      	ldr	r1, [r1, #0]
   2ec6e:	fb93 f4f1 	sdiv	r4, r3, r1
   2ec72:	fb01 3314 	mls	r3, r1, r4, r3
   2ec76:	6013      	str	r3, [r2, #0]
	if (pool.block_used[pool.first_free]) {
   2ec78:	4413      	add	r3, r2
   2ec7a:	7a1b      	ldrb	r3, [r3, #8]
   2ec7c:	b113      	cbz	r3, 2ec84 <npgps_alloc_block+0x2c>
		pool.first_free = NO_BLOCK;
   2ec7e:	f04f 33ff 	mov.w	r3, #4294967295
   2ec82:	6013      	str	r3, [r2, #0]
}
   2ec84:	bd10      	pop	{r4, pc}
		return NO_BLOCK;
   2ec86:	f04f 30ff 	mov.w	r0, #4294967295
   2ec8a:	e7fb      	b.n	2ec84 <npgps_alloc_block+0x2c>
   2ec8c:	2001a160 	.word	0x2001a160
   2ec90:	2001a15c 	.word	0x2001a15c

0002ec94 <npgps_free_block>:
	if (pool.first_free < 0) {
   2ec94:	4b04      	ldr	r3, [pc, #16]	; (2eca8 <npgps_free_block+0x14>)
   2ec96:	681a      	ldr	r2, [r3, #0]
   2ec98:	2a00      	cmp	r2, #0
	pool.block_used[block] = false;
   2ec9a:	f04f 0200 	mov.w	r2, #0
		pool.first_free = block;
   2ec9e:	bfb8      	it	lt
   2eca0:	6018      	strlt	r0, [r3, #0]
	pool.block_used[block] = false;
   2eca2:	4403      	add	r3, r0
   2eca4:	721a      	strb	r2, [r3, #8]
}
   2eca6:	4770      	bx	lr
   2eca8:	2001a160 	.word	0x2001a160

0002ecac <npgps_get_block_extent>:
	for (i = 0; i < num_blocks; i++) {
   2ecac:	2200      	movs	r2, #0
   2ecae:	4b09      	ldr	r3, [pc, #36]	; (2ecd4 <npgps_get_block_extent+0x28>)
{
   2ecb0:	b510      	push	{r4, lr}
	for (i = 0; i < num_blocks; i++) {
   2ecb2:	6819      	ldr	r1, [r3, #0]
		if (pool.block_used[block]) {
   2ecb4:	4c08      	ldr	r4, [pc, #32]	; (2ecd8 <npgps_get_block_extent+0x2c>)
	for (i = 0; i < num_blocks; i++) {
   2ecb6:	4291      	cmp	r1, r2
   2ecb8:	dc01      	bgt.n	2ecbe <npgps_get_block_extent+0x12>
}
   2ecba:	4610      	mov	r0, r2
   2ecbc:	bd10      	pop	{r4, pc}
		if (pool.block_used[block]) {
   2ecbe:	1823      	adds	r3, r4, r0
   2ecc0:	7a1b      	ldrb	r3, [r3, #8]
   2ecc2:	2b00      	cmp	r3, #0
   2ecc4:	d1f9      	bne.n	2ecba <npgps_get_block_extent+0xe>
		block = (block + 1) % num_blocks;
   2ecc6:	1c43      	adds	r3, r0, #1
   2ecc8:	fb93 f0f1 	sdiv	r0, r3, r1
		len++;
   2eccc:	3201      	adds	r2, #1
		block = (block + 1) % num_blocks;
   2ecce:	fb01 3010 	mls	r0, r1, r0, r3
	for (i = 0; i < num_blocks; i++) {
   2ecd2:	e7f0      	b.n	2ecb6 <npgps_get_block_extent+0xa>
   2ecd4:	2001a15c 	.word	0x2001a15c
   2ecd8:	2001a160 	.word	0x2001a160

0002ecdc <npgps_reset_block_pool>:
	pool.first_free = 0;
   2ecdc:	2300      	movs	r3, #0
		pool.block_used[i] = false;
   2ecde:	4618      	mov	r0, r3
	for (i = 0; i < num_blocks; i++) {
   2ece0:	4905      	ldr	r1, [pc, #20]	; (2ecf8 <npgps_reset_block_pool+0x1c>)
	pool.first_free = 0;
   2ece2:	4a06      	ldr	r2, [pc, #24]	; (2ecfc <npgps_reset_block_pool+0x20>)
	for (i = 0; i < num_blocks; i++) {
   2ece4:	6809      	ldr	r1, [r1, #0]
	pool.first_free = 0;
   2ece6:	f842 3b08 	str.w	r3, [r2], #8
	for (i = 0; i < num_blocks; i++) {
   2ecea:	428b      	cmp	r3, r1
   2ecec:	db00      	blt.n	2ecf0 <npgps_reset_block_pool+0x14>
}
   2ecee:	4770      	bx	lr
		pool.block_used[i] = false;
   2ecf0:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < num_blocks; i++) {
   2ecf4:	3301      	adds	r3, #1
   2ecf6:	e7f8      	b.n	2ecea <npgps_reset_block_pool+0xe>
   2ecf8:	2001a15c 	.word	0x2001a15c
   2ecfc:	2001a160 	.word	0x2001a160

0002ed00 <npgps_mark_block_used>:
{
   2ed00:	b538      	push	{r3, r4, r5, lr}
	__ASSERT((block >= 0) && (block < num_blocks), "block %d out of range", block);
   2ed02:	1e04      	subs	r4, r0, #0
{
   2ed04:	460d      	mov	r5, r1
	__ASSERT((block >= 0) && (block < num_blocks), "block %d out of range", block);
   2ed06:	db03      	blt.n	2ed10 <npgps_mark_block_used+0x10>
   2ed08:	4b09      	ldr	r3, [pc, #36]	; (2ed30 <npgps_mark_block_used+0x30>)
   2ed0a:	681b      	ldr	r3, [r3, #0]
   2ed0c:	42a3      	cmp	r3, r4
   2ed0e:	dc0a      	bgt.n	2ed26 <npgps_mark_block_used+0x26>
   2ed10:	4908      	ldr	r1, [pc, #32]	; (2ed34 <npgps_mark_block_used+0x34>)
   2ed12:	4809      	ldr	r0, [pc, #36]	; (2ed38 <npgps_mark_block_used+0x38>)
   2ed14:	f240 1253 	movw	r2, #339	; 0x153
   2ed18:	f00d feb8 	bl	3ca8c <assert_print>
   2ed1c:	f240 1153 	movw	r1, #339	; 0x153
   2ed20:	4804      	ldr	r0, [pc, #16]	; (2ed34 <npgps_mark_block_used+0x34>)
   2ed22:	f00d feac 	bl	3ca7e <assert_post_action>
	pool.block_used[block] = used;
   2ed26:	4805      	ldr	r0, [pc, #20]	; (2ed3c <npgps_mark_block_used+0x3c>)
   2ed28:	4404      	add	r4, r0
   2ed2a:	7225      	strb	r5, [r4, #8]
}
   2ed2c:	bd38      	pop	{r3, r4, r5, pc}
   2ed2e:	bf00      	nop
   2ed30:	2001a15c 	.word	0x2001a15c
   2ed34:	0004a060 	.word	0x0004a060
   2ed38:	0004409e 	.word	0x0004409e
   2ed3c:	2001a160 	.word	0x2001a160

0002ed40 <npgps_print_blocks>:
{
   2ed40:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ed42:	b083      	sub	sp, #12
	char map[num_blocks + 1];
   2ed44:	4e16      	ldr	r6, [pc, #88]	; (2eda0 <npgps_print_blocks+0x60>)
{
   2ed46:	af02      	add	r7, sp, #8
	char map[num_blocks + 1];
   2ed48:	6832      	ldr	r2, [r6, #0]
	LOG_INF("num blocks:%u, size:%u, first_free:%d", num_blocks,
   2ed4a:	4d16      	ldr	r5, [pc, #88]	; (2eda4 <npgps_print_blocks+0x64>)
	char map[num_blocks + 1];
   2ed4c:	f102 0308 	add.w	r3, r2, #8
   2ed50:	f023 0307 	bic.w	r3, r3, #7
   2ed54:	ebad 0d03 	sub.w	sp, sp, r3
   2ed58:	466c      	mov	r4, sp
	LOG_INF("num blocks:%u, size:%u, first_free:%d", num_blocks,
   2ed5a:	f855 3b08 	ldr.w	r3, [r5], #8
   2ed5e:	2149      	movs	r1, #73	; 0x49
   2ed60:	f844 3b08 	str.w	r3, [r4], #8
   2ed64:	4810      	ldr	r0, [pc, #64]	; (2eda8 <npgps_print_blocks+0x68>)
   2ed66:	f44f 6300 	mov.w	r3, #2048	; 0x800
   2ed6a:	f00d fec9 	bl	3cb00 <z_log_minimal_printk>
	for (i = 0; i < num_blocks; i++) {
   2ed6e:	2200      	movs	r2, #0
   2ed70:	6833      	ldr	r3, [r6, #0]
   2ed72:	4293      	cmp	r3, r2
   2ed74:	dc0b      	bgt.n	2ed8e <npgps_print_blocks+0x4e>
	map[i] = '\0';
   2ed76:	2200      	movs	r2, #0
   2ed78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2ed7c:	54e2      	strb	r2, [r4, r3]
	LOG_INF("map:%s", log_strdup(map));
   2ed7e:	2149      	movs	r1, #73	; 0x49
   2ed80:	4622      	mov	r2, r4
   2ed82:	480a      	ldr	r0, [pc, #40]	; (2edac <npgps_print_blocks+0x6c>)
   2ed84:	f00d febc 	bl	3cb00 <z_log_minimal_printk>
}
   2ed88:	3704      	adds	r7, #4
   2ed8a:	46bd      	mov	sp, r7
   2ed8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		map[i] = pool.block_used[i] ? '1' : '0';
   2ed8e:	f815 1b01 	ldrb.w	r1, [r5], #1
   2ed92:	2900      	cmp	r1, #0
   2ed94:	bf14      	ite	ne
   2ed96:	2131      	movne	r1, #49	; 0x31
   2ed98:	2130      	moveq	r1, #48	; 0x30
   2ed9a:	54a1      	strb	r1, [r4, r2]
	for (i = 0; i < num_blocks; i++) {
   2ed9c:	3201      	adds	r2, #1
   2ed9e:	e7e8      	b.n	2ed72 <npgps_print_blocks+0x32>
   2eda0:	2001a15c 	.word	0x2001a15c
   2eda4:	2001a160 	.word	0x2001a160
   2eda8:	0004a0a4 	.word	0x0004a0a4
   2edac:	0004a0cf 	.word	0x0004a0cf

0002edb0 <npgps_num_free>:
	for (int i = 0; i < num_blocks; i++) {
   2edb0:	4b07      	ldr	r3, [pc, #28]	; (2edd0 <npgps_num_free+0x20>)
{
   2edb2:	b510      	push	{r4, lr}
	for (int i = 0; i < num_blocks; i++) {
   2edb4:	6819      	ldr	r1, [r3, #0]
   2edb6:	2300      	movs	r3, #0
	int num = 0;
   2edb8:	4618      	mov	r0, r3
   2edba:	4a06      	ldr	r2, [pc, #24]	; (2edd4 <npgps_num_free+0x24>)
	for (int i = 0; i < num_blocks; i++) {
   2edbc:	4299      	cmp	r1, r3
   2edbe:	dc00      	bgt.n	2edc2 <npgps_num_free+0x12>
}
   2edc0:	bd10      	pop	{r4, pc}
		if (!pool.block_used[i]) {
   2edc2:	f812 4b01 	ldrb.w	r4, [r2], #1
   2edc6:	b904      	cbnz	r4, 2edca <npgps_num_free+0x1a>
			num++;
   2edc8:	3001      	adds	r0, #1
	for (int i = 0; i < num_blocks; i++) {
   2edca:	3301      	adds	r3, #1
   2edcc:	e7f6      	b.n	2edbc <npgps_num_free+0xc>
   2edce:	bf00      	nop
   2edd0:	2001a15c 	.word	0x2001a15c
   2edd4:	2001a168 	.word	0x2001a168

0002edd8 <npgps_find_first_free>:
	pool.first_free = NO_BLOCK;
   2edd8:	f04f 32ff 	mov.w	r2, #4294967295
   2eddc:	4b0a      	ldr	r3, [pc, #40]	; (2ee08 <npgps_find_first_free+0x30>)
{
   2edde:	b510      	push	{r4, lr}
	pool.first_free = NO_BLOCK;
   2ede0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_blocks; i++) {
   2ede2:	4a0a      	ldr	r2, [pc, #40]	; (2ee0c <npgps_find_first_free+0x34>)
   2ede4:	6811      	ldr	r1, [r2, #0]
   2ede6:	2200      	movs	r2, #0
   2ede8:	4291      	cmp	r1, r2
   2edea:	dd03      	ble.n	2edf4 <npgps_find_first_free+0x1c>
		if (!pool.block_used[from_block]) {
   2edec:	181c      	adds	r4, r3, r0
   2edee:	7a24      	ldrb	r4, [r4, #8]
   2edf0:	b914      	cbnz	r4, 2edf8 <npgps_find_first_free+0x20>
			pool.first_free = from_block;
   2edf2:	6018      	str	r0, [r3, #0]
}
   2edf4:	6818      	ldr	r0, [r3, #0]
   2edf6:	bd10      	pop	{r4, pc}
		from_block = (from_block + 1) % num_blocks;
   2edf8:	3001      	adds	r0, #1
   2edfa:	fb90 f4f1 	sdiv	r4, r0, r1
	for (i = 0; i < num_blocks; i++) {
   2edfe:	3201      	adds	r2, #1
		from_block = (from_block + 1) % num_blocks;
   2ee00:	fb01 0014 	mls	r0, r1, r4, r0
	for (i = 0; i < num_blocks; i++) {
   2ee04:	e7f0      	b.n	2ede8 <npgps_find_first_free+0x10>
   2ee06:	bf00      	nop
   2ee08:	2001a160 	.word	0x2001a160
   2ee0c:	2001a15c 	.word	0x2001a15c

0002ee10 <npgps_block_to_offset>:
	if ((block < 0) || (block >= num_blocks)) {
   2ee10:	1e02      	subs	r2, r0, #0
{
   2ee12:	b508      	push	{r3, lr}
	if ((block < 0) || (block >= num_blocks)) {
   2ee14:	db03      	blt.n	2ee1e <npgps_block_to_offset+0xe>
   2ee16:	4b06      	ldr	r3, [pc, #24]	; (2ee30 <npgps_block_to_offset+0x20>)
   2ee18:	681b      	ldr	r3, [r3, #0]
   2ee1a:	4293      	cmp	r3, r2
   2ee1c:	dc05      	bgt.n	2ee2a <npgps_block_to_offset+0x1a>
		LOG_ERR("invalid block:%d", block);
   2ee1e:	4805      	ldr	r0, [pc, #20]	; (2ee34 <npgps_block_to_offset+0x24>)
   2ee20:	2145      	movs	r1, #69	; 0x45
   2ee22:	f00d fe6d 	bl	3cb00 <z_log_minimal_printk>
		return 0;
   2ee26:	2000      	movs	r0, #0
}
   2ee28:	bd08      	pop	{r3, pc}
	return block * BLOCK_SIZE;
   2ee2a:	02d0      	lsls	r0, r2, #11
   2ee2c:	e7fc      	b.n	2ee28 <npgps_block_to_offset+0x18>
   2ee2e:	bf00      	nop
   2ee30:	2001a15c 	.word	0x2001a15c
   2ee34:	0004a0db 	.word	0x0004a0db

0002ee38 <npgps_pointer_to_block>:
	int ret = (uint32_t)(p - block_pool_base) / BLOCK_SIZE;
   2ee38:	4b06      	ldr	r3, [pc, #24]	; (2ee54 <npgps_pointer_to_block+0x1c>)
	if ((ret < 0) || (ret >= num_blocks)) {
   2ee3a:	4a07      	ldr	r2, [pc, #28]	; (2ee58 <npgps_pointer_to_block+0x20>)
	int ret = (uint32_t)(p - block_pool_base) / BLOCK_SIZE;
   2ee3c:	681b      	ldr	r3, [r3, #0]
	if ((ret < 0) || (ret >= num_blocks)) {
   2ee3e:	6812      	ldr	r2, [r2, #0]
	int ret = (uint32_t)(p - block_pool_base) / BLOCK_SIZE;
   2ee40:	1ac0      	subs	r0, r0, r3
   2ee42:	0ac3      	lsrs	r3, r0, #11
		return NO_BLOCK;
   2ee44:	ebb2 2fd0 	cmp.w	r2, r0, lsr #11
}
   2ee48:	bfcc      	ite	gt
   2ee4a:	4618      	movgt	r0, r3
   2ee4c:	f04f 30ff 	movle.w	r0, #4294967295
   2ee50:	4770      	bx	lr
   2ee52:	bf00      	nop
   2ee54:	2001a154 	.word	0x2001a154
   2ee58:	2001a15c 	.word	0x2001a15c

0002ee5c <npgps_block_to_pointer>:
	if ((block < 0) || (block >= num_blocks)) {
   2ee5c:	1e02      	subs	r2, r0, #0
{
   2ee5e:	b508      	push	{r3, lr}
	if ((block < 0) || (block >= num_blocks)) {
   2ee60:	db03      	blt.n	2ee6a <npgps_block_to_pointer+0xe>
   2ee62:	4b07      	ldr	r3, [pc, #28]	; (2ee80 <npgps_block_to_pointer+0x24>)
   2ee64:	681b      	ldr	r3, [r3, #0]
   2ee66:	4293      	cmp	r3, r2
   2ee68:	dc05      	bgt.n	2ee76 <npgps_block_to_pointer+0x1a>
		LOG_ERR("invalid block:%d", block);
   2ee6a:	4806      	ldr	r0, [pc, #24]	; (2ee84 <npgps_block_to_pointer+0x28>)
   2ee6c:	2145      	movs	r1, #69	; 0x45
   2ee6e:	f00d fe47 	bl	3cb00 <z_log_minimal_printk>
		ret = NULL;
   2ee72:	2000      	movs	r0, #0
}
   2ee74:	bd08      	pop	{r3, pc}
		ret = (void *)(block_pool_base + block * BLOCK_SIZE);
   2ee76:	4b04      	ldr	r3, [pc, #16]	; (2ee88 <npgps_block_to_pointer+0x2c>)
   2ee78:	6818      	ldr	r0, [r3, #0]
   2ee7a:	eb00 20c2 	add.w	r0, r0, r2, lsl #11
	return ret;
   2ee7e:	e7f9      	b.n	2ee74 <npgps_block_to_pointer+0x18>
   2ee80:	2001a15c 	.word	0x2001a15c
   2ee84:	0004a0db 	.word	0x0004a0db
   2ee88:	2001a154 	.word	0x2001a154

0002ee8c <npgps_download_init>:
{
   2ee8c:	b510      	push	{r4, lr}
	__ASSERT(handler != NULL, "must specify handler");
   2ee8e:	4604      	mov	r4, r0
   2ee90:	b950      	cbnz	r0, 2eea8 <npgps_download_init+0x1c>
   2ee92:	4909      	ldr	r1, [pc, #36]	; (2eeb8 <npgps_download_init+0x2c>)
   2ee94:	4809      	ldr	r0, [pc, #36]	; (2eebc <npgps_download_init+0x30>)
   2ee96:	f240 12b3 	movw	r2, #435	; 0x1b3
   2ee9a:	f00d fdf7 	bl	3ca8c <assert_print>
   2ee9e:	f240 11b3 	movw	r1, #435	; 0x1b3
   2eea2:	4805      	ldr	r0, [pc, #20]	; (2eeb8 <npgps_download_init+0x2c>)
   2eea4:	f00d fdeb 	bl	3ca7e <assert_post_action>
	buffer_handler = handler;
   2eea8:	4b05      	ldr	r3, [pc, #20]	; (2eec0 <npgps_download_init+0x34>)
	return download_client_init(&dlc, download_client_callback);
   2eeaa:	4906      	ldr	r1, [pc, #24]	; (2eec4 <npgps_download_init+0x38>)
	buffer_handler = handler;
   2eeac:	601c      	str	r4, [r3, #0]
	return download_client_init(&dlc, download_client_callback);
   2eeae:	4806      	ldr	r0, [pc, #24]	; (2eec8 <npgps_download_init+0x3c>)
}
   2eeb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return download_client_init(&dlc, download_client_callback);
   2eeb4:	f000 bf7a 	b.w	2fdac <download_client_init>
   2eeb8:	0004a060 	.word	0x0004a060
   2eebc:	0004409e 	.word	0x0004409e
   2eec0:	2001a158 	.word	0x2001a158
   2eec4:	0002ea15 	.word	0x0002ea15
   2eec8:	200158f8 	.word	0x200158f8

0002eecc <npgps_download_start>:
{
   2eecc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2eed0:	460f      	mov	r7, r1
   2eed2:	4615      	mov	r5, r2
   2eed4:	4698      	mov	r8, r3
	if (host == NULL || file == NULL) {
   2eed6:	4606      	mov	r6, r0
   2eed8:	2800      	cmp	r0, #0
   2eeda:	d033      	beq.n	2ef44 <npgps_download_start+0x78>
   2eedc:	2900      	cmp	r1, #0
   2eede:	d031      	beq.n	2ef44 <npgps_download_start+0x78>
	return z_impl_k_sem_take(sem, timeout);
   2eee0:	2200      	movs	r2, #0
   2eee2:	2300      	movs	r3, #0
   2eee4:	4819      	ldr	r0, [pc, #100]	; (2ef4c <npgps_download_start+0x80>)
   2eee6:	f007 ff83 	bl	36df0 <z_impl_k_sem_take>
	if (err) {
   2eeea:	4604      	mov	r4, r0
   2eeec:	b138      	cbz	r0, 2eefe <npgps_download_start+0x32>
		LOG_ERR("PGPS download already active.");
   2eeee:	2145      	movs	r1, #69	; 0x45
   2eef0:	4817      	ldr	r0, [pc, #92]	; (2ef50 <npgps_download_start+0x84>)
   2eef2:	f00d fe05 	bl	3cb00 <z_log_minimal_printk>
}
   2eef6:	4620      	mov	r0, r4
   2eef8:	b004      	add	sp, #16
   2eefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	socket_retries_left = SOCKET_RETRIES;
   2eefe:	2202      	movs	r2, #2
	struct download_client_cfg config = {
   2ef00:	9500      	str	r5, [sp, #0]
		.set_tls_hostname = (sec_tag != -1),
   2ef02:	3501      	adds	r5, #1
   2ef04:	bf18      	it	ne
   2ef06:	2501      	movne	r5, #1
	socket_retries_left = SOCKET_RETRIES;
   2ef08:	4b12      	ldr	r3, [pc, #72]	; (2ef54 <npgps_download_start+0x88>)
	err = download_client_connect(&dlc, host, &config);
   2ef0a:	4631      	mov	r1, r6
	socket_retries_left = SOCKET_RETRIES;
   2ef0c:	601a      	str	r2, [r3, #0]
	struct download_client_cfg config = {
   2ef0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	err = download_client_connect(&dlc, host, &config);
   2ef10:	466a      	mov	r2, sp
   2ef12:	4811      	ldr	r0, [pc, #68]	; (2ef58 <npgps_download_start+0x8c>)
	struct download_client_cfg config = {
   2ef14:	f88d 8004 	strb.w	r8, [sp, #4]
   2ef18:	9302      	str	r3, [sp, #8]
		.set_tls_hostname = (sec_tag != -1),
   2ef1a:	f88d 500c 	strb.w	r5, [sp, #12]
	err = download_client_connect(&dlc, host, &config);
   2ef1e:	f000 ff75 	bl	2fe0c <download_client_connect>
	if (err != 0) {
   2ef22:	4604      	mov	r4, r0
   2ef24:	b950      	cbnz	r0, 2ef3c <npgps_download_start+0x70>
	err = download_client_start(&dlc, file, 0);
   2ef26:	4602      	mov	r2, r0
   2ef28:	4639      	mov	r1, r7
   2ef2a:	480b      	ldr	r0, [pc, #44]	; (2ef58 <npgps_download_start+0x8c>)
   2ef2c:	f001 faae 	bl	3048c <download_client_start>
	if (err != 0) {
   2ef30:	4604      	mov	r4, r0
   2ef32:	2800      	cmp	r0, #0
   2ef34:	d0df      	beq.n	2eef6 <npgps_download_start+0x2a>
		download_client_disconnect(&dlc);
   2ef36:	4808      	ldr	r0, [pc, #32]	; (2ef58 <npgps_download_start+0x8c>)
   2ef38:	f001 f94c 	bl	301d4 <download_client_disconnect>
	z_impl_k_sem_give(sem);
   2ef3c:	4803      	ldr	r0, [pc, #12]	; (2ef4c <npgps_download_start+0x80>)
   2ef3e:	f007 ff1b 	bl	36d78 <z_impl_k_sem_give>
}
   2ef42:	e7d8      	b.n	2eef6 <npgps_download_start+0x2a>
		return -EINVAL;
   2ef44:	f06f 0415 	mvn.w	r4, #21
   2ef48:	e7d5      	b.n	2eef6 <npgps_download_start+0x2a>
   2ef4a:	bf00      	nop
   2ef4c:	200150a8 	.word	0x200150a8
   2ef50:	0004a0f1 	.word	0x0004a0f1
   2ef54:	2001a194 	.word	0x2001a194
   2ef58:	200158f8 	.word	0x200158f8

0002ef5c <nrf_cloud_cell_pos_request_json_get>:
	return err;
}

int nrf_cloud_cell_pos_request_json_get(const struct lte_lc_cells_info *const cells_inf,
					const bool request_loc, cJSON **req_obj_out)
{
   2ef5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ef5e:	4604      	mov	r4, r0
   2ef60:	460f      	mov	r7, r1
	int err = 0;
	*req_obj_out = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_CELL_POS,
   2ef62:	4814      	ldr	r0, [pc, #80]	; (2efb4 <nrf_cloud_cell_pos_request_json_get+0x58>)
   2ef64:	4914      	ldr	r1, [pc, #80]	; (2efb8 <nrf_cloud_cell_pos_request_json_get+0x5c>)
{
   2ef66:	4616      	mov	r6, r2
	*req_obj_out = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_CELL_POS,
   2ef68:	f7fb f934 	bl	2a1d4 <json_create_req_obj>
						      NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA);
	cJSON *data_obj = cJSON_AddObjectToObject(*req_obj_out, NRF_CLOUD_JSON_DATA_KEY);
   2ef6c:	4913      	ldr	r1, [pc, #76]	; (2efbc <nrf_cloud_cell_pos_request_json_get+0x60>)
	*req_obj_out = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_CELL_POS,
   2ef6e:	6030      	str	r0, [r6, #0]
	cJSON *data_obj = cJSON_AddObjectToObject(*req_obj_out, NRF_CLOUD_JSON_DATA_KEY);
   2ef70:	f010 fee3 	bl	3fd3a <cJSON_AddObjectToObject>

	if (!data_obj) {
   2ef74:	4605      	mov	r5, r0
   2ef76:	b928      	cbnz	r0, 2ef84 <nrf_cloud_cell_pos_request_json_get+0x28>
		err = -ENOMEM;
   2ef78:	f06f 040b 	mvn.w	r4, #11
	}

	return 0;

cleanup:
	cJSON_Delete(*req_obj_out);
   2ef7c:	6830      	ldr	r0, [r6, #0]
   2ef7e:	f002 ffed 	bl	31f5c <cJSON_Delete>
	return err;
   2ef82:	e011      	b.n	2efa8 <nrf_cloud_cell_pos_request_json_get+0x4c>
	if (cells_inf) {
   2ef84:	b194      	cbz	r4, 2efac <nrf_cloud_cell_pos_request_json_get+0x50>
		err = nrf_cloud_format_cell_pos_req_json(cells_inf, 1, data_obj);
   2ef86:	4602      	mov	r2, r0
   2ef88:	2101      	movs	r1, #1
   2ef8a:	4620      	mov	r0, r4
   2ef8c:	f7fb ff9a 	bl	2aec4 <nrf_cloud_format_cell_pos_req_json>
		err = nrf_cloud_format_single_cell_pos_req_json(data_obj);
   2ef90:	4604      	mov	r4, r0
	if (err) {
   2ef92:	2800      	cmp	r0, #0
   2ef94:	d1f2      	bne.n	2ef7c <nrf_cloud_cell_pos_request_json_get+0x20>
	if (!request_loc &&
   2ef96:	b93f      	cbnz	r7, 2efa8 <nrf_cloud_cell_pos_request_json_get+0x4c>
	    !cJSON_AddNumberToObjectCS(data_obj, CELL_POS_JSON_CELL_LOC_KEY_DOREPLY, 0)) {
   2ef98:	2200      	movs	r2, #0
   2ef9a:	2300      	movs	r3, #0
   2ef9c:	4628      	mov	r0, r5
   2ef9e:	4908      	ldr	r1, [pc, #32]	; (2efc0 <nrf_cloud_cell_pos_request_json_get+0x64>)
   2efa0:	f010 fe34 	bl	3fc0c <cJSON_AddNumberToObjectCS>
	if (!request_loc &&
   2efa4:	2800      	cmp	r0, #0
   2efa6:	d0e7      	beq.n	2ef78 <nrf_cloud_cell_pos_request_json_get+0x1c>
}
   2efa8:	4620      	mov	r0, r4
   2efaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = nrf_cloud_format_single_cell_pos_req_json(data_obj);
   2efac:	f7fb ff68 	bl	2ae80 <nrf_cloud_format_single_cell_pos_req_json>
   2efb0:	e7ee      	b.n	2ef90 <nrf_cloud_cell_pos_request_json_get+0x34>
   2efb2:	bf00      	nop
   2efb4:	00048210 	.word	0x00048210
   2efb8:	0004362e 	.word	0x0004362e
   2efbc:	0004370a 	.word	0x0004370a
   2efc0:	0004a114 	.word	0x0004a114

0002efc4 <nrf_cloud_cell_pos_process>:

int nrf_cloud_cell_pos_process(const char *buf, struct nrf_cloud_cell_pos_result *result)
{
   2efc4:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!result) {
   2efc6:	460d      	mov	r5, r1
   2efc8:	b191      	cbz	r1, 2eff0 <nrf_cloud_cell_pos_process+0x2c>
		return -EINVAL;
	}

	err = nrf_cloud_parse_cell_pos_response(buf, result);
   2efca:	f7fc f991 	bl	2b2f0 <nrf_cloud_parse_cell_pos_response>
	if (err == -EFAULT) {
   2efce:	f110 0f0e 	cmn.w	r0, #14
	err = nrf_cloud_parse_cell_pos_response(buf, result);
   2efd2:	4604      	mov	r4, r0
	if (err == -EFAULT) {
   2efd4:	d106      	bne.n	2efe4 <nrf_cloud_cell_pos_process+0x20>
		LOG_ERR("nRF Cloud cell-based location error: %d",
   2efd6:	2145      	movs	r1, #69	; 0x45
   2efd8:	69ea      	ldr	r2, [r5, #28]
   2efda:	4807      	ldr	r0, [pc, #28]	; (2eff8 <nrf_cloud_cell_pos_process+0x34>)
			result->err);
	} else if (err < 0) {
		LOG_ERR("Error processing cell-based location: %d", err);
   2efdc:	f00d fd90 	bl	3cb00 <z_log_minimal_printk>
	}

	return err;
}
   2efe0:	4620      	mov	r0, r4
   2efe2:	bd38      	pop	{r3, r4, r5, pc}
	} else if (err < 0) {
   2efe4:	2800      	cmp	r0, #0
   2efe6:	dafb      	bge.n	2efe0 <nrf_cloud_cell_pos_process+0x1c>
		LOG_ERR("Error processing cell-based location: %d", err);
   2efe8:	4602      	mov	r2, r0
   2efea:	2145      	movs	r1, #69	; 0x45
   2efec:	4803      	ldr	r0, [pc, #12]	; (2effc <nrf_cloud_cell_pos_process+0x38>)
   2efee:	e7f5      	b.n	2efdc <nrf_cloud_cell_pos_process+0x18>
		return -EINVAL;
   2eff0:	f06f 0415 	mvn.w	r4, #21
   2eff4:	e7f4      	b.n	2efe0 <nrf_cloud_cell_pos_process+0x1c>
   2eff6:	bf00      	nop
   2eff8:	0004a11c 	.word	0x0004a11c
   2effc:	0004a149 	.word	0x0004a149

0002f000 <fota_settings_set>:
SETTINGS_STATIC_HANDLER_DEFINE(fota, NRF_CLOUD_SETTINGS_FULL_FOTA, NULL,
			       fota_settings_set, NULL, NULL);

static int fota_settings_set(const char *key, size_t len_rd,
			     settings_read_cb read_cb, void *cb_arg)
{
   2f000:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2f004:	460d      	mov	r5, r1
   2f006:	4617      	mov	r7, r2
   2f008:	4698      	mov	r8, r3
	if (!key) {
   2f00a:	4604      	mov	r4, r0
   2f00c:	2800      	cmp	r0, #0
   2f00e:	d036      	beq.n	2f07e <fota_settings_set+0x7e>
		return -EINVAL;
	}

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);

	if (strncmp(key, NRF_CLOUD_SETTINGS_FOTA_JOB, strlen(NRF_CLOUD_SETTINGS_FOTA_JOB)) != 0) {
   2f010:	481f      	ldr	r0, [pc, #124]	; (2f090 <fota_settings_set+0x90>)
   2f012:	f7ee f916 	bl	1d242 <strlen>
   2f016:	491e      	ldr	r1, [pc, #120]	; (2f090 <fota_settings_set+0x90>)
   2f018:	4602      	mov	r2, r0
   2f01a:	4620      	mov	r0, r4
   2f01c:	f012 fbdd 	bl	417da <strncmp>
   2f020:	4604      	mov	r4, r0
   2f022:	bb78      	cbnz	r0, 2f084 <fota_settings_set+0x84>
		return -ENOMSG;
	}

	if (len_rd > sizeof(saved_job)) {
   2f024:	2d28      	cmp	r5, #40	; 0x28
   2f026:	d904      	bls.n	2f032 <fota_settings_set+0x32>
		LOG_INF("FOTA settings size larger than expected");
   2f028:	2149      	movs	r1, #73	; 0x49
   2f02a:	481a      	ldr	r0, [pc, #104]	; (2f094 <fota_settings_set+0x94>)
   2f02c:	f00d fd68 	bl	3cb00 <z_log_minimal_printk>
		len_rd = sizeof(saved_job);
   2f030:	2528      	movs	r5, #40	; 0x28
	}

	ssize_t sz = read_cb(cb_arg, (void *)&saved_job, len_rd);
   2f032:	4e19      	ldr	r6, [pc, #100]	; (2f098 <fota_settings_set+0x98>)
   2f034:	462a      	mov	r2, r5
   2f036:	4631      	mov	r1, r6
   2f038:	4640      	mov	r0, r8
   2f03a:	47b8      	blx	r7

	if (sz == 0) {
   2f03c:	1e02      	subs	r2, r0, #0
   2f03e:	d024      	beq.n	2f08a <fota_settings_set+0x8a>
		LOG_DBG("FOTA settings key-value pair has been deleted");
		return -EIDRM;
	} else if (sz < 0) {
   2f040:	da09      	bge.n	2f056 <fota_settings_set+0x56>
		LOG_ERR("FOTA settings read error: %d", sz);
   2f042:	2145      	movs	r1, #69	; 0x45
   2f044:	4815      	ldr	r0, [pc, #84]	; (2f09c <fota_settings_set+0x9c>)
   2f046:	f00d fd5b 	bl	3cb00 <z_log_minimal_printk>
		return -EIO;
   2f04a:	f06f 0404 	mvn.w	r4, #4
	} else {
		LOG_INF("FOTA settings size smaller than expected, likely outdated");
	}

	return 0;
}
   2f04e:	4620      	mov	r0, r4
   2f050:	b002      	add	sp, #8
   2f052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sz == sizeof(saved_job)) {
   2f056:	2a28      	cmp	r2, #40	; 0x28
   2f058:	d10c      	bne.n	2f074 <fota_settings_set+0x74>
		LOG_INF("Saved job: %s, type: %d, validate: %d, bl: 0x%X",
   2f05a:	4632      	mov	r2, r6
   2f05c:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   2f060:	2149      	movs	r1, #73	; 0x49
   2f062:	9301      	str	r3, [sp, #4]
   2f064:	f812 3b02 	ldrb.w	r3, [r2], #2
   2f068:	480d      	ldr	r0, [pc, #52]	; (2f0a0 <fota_settings_set+0xa0>)
   2f06a:	9300      	str	r3, [sp, #0]
   2f06c:	7873      	ldrb	r3, [r6, #1]
   2f06e:	f00d fd47 	bl	3cb00 <z_log_minimal_printk>
   2f072:	e7ec      	b.n	2f04e <fota_settings_set+0x4e>
		LOG_INF("FOTA settings size smaller than expected, likely outdated");
   2f074:	2149      	movs	r1, #73	; 0x49
   2f076:	480b      	ldr	r0, [pc, #44]	; (2f0a4 <fota_settings_set+0xa4>)
   2f078:	f00d fd42 	bl	3cb00 <z_log_minimal_printk>
   2f07c:	e7e7      	b.n	2f04e <fota_settings_set+0x4e>
		return -EINVAL;
   2f07e:	f06f 0415 	mvn.w	r4, #21
   2f082:	e7e4      	b.n	2f04e <fota_settings_set+0x4e>
		return -ENOMSG;
   2f084:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2f088:	e7e1      	b.n	2f04e <fota_settings_set+0x4e>
		return -EIDRM;
   2f08a:	f06f 0423 	mvn.w	r4, #35	; 0x23
   2f08e:	e7de      	b.n	2f04e <fota_settings_set+0x4e>
   2f090:	0004a2e6 	.word	0x0004a2e6
   2f094:	0004a18a 	.word	0x0004a18a
   2f098:	20014c47 	.word	0x20014c47
   2f09c:	0004a1b7 	.word	0x0004a1b7
   2f0a0:	0004a1d9 	.word	0x0004a1d9
   2f0a4:	0004a20e 	.word	0x0004a20e

0002f0a8 <add_number_to_array>:
	}
	return item;
}

static bool add_number_to_array(cJSON *const array, const int number)
{
   2f0a8:	b538      	push	{r3, r4, r5, lr}
   2f0aa:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(array != NULL);
   2f0ac:	4605      	mov	r5, r0
   2f0ae:	b950      	cbnz	r0, 2f0c6 <add_number_to_array+0x1e>
   2f0b0:	490c      	ldr	r1, [pc, #48]	; (2f0e4 <add_number_to_array+0x3c>)
   2f0b2:	480d      	ldr	r0, [pc, #52]	; (2f0e8 <add_number_to_array+0x40>)
   2f0b4:	f240 229f 	movw	r2, #671	; 0x29f
   2f0b8:	f00d fce8 	bl	3ca8c <assert_print>
   2f0bc:	f240 219f 	movw	r1, #671	; 0x29f
   2f0c0:	4808      	ldr	r0, [pc, #32]	; (2f0e4 <add_number_to_array+0x3c>)
   2f0c2:	f00d fcdc 	bl	3ca7e <assert_post_action>

	cJSON *item = cJSON_CreateNumber(number);
   2f0c6:	4620      	mov	r0, r4
   2f0c8:	f7ed fb0c 	bl	1c6e4 <__aeabi_i2d>
   2f0cc:	f7ef fa14 	bl	1e4f8 <cJSON_CreateNumber>

	if (item) {
   2f0d0:	4604      	mov	r4, r0
   2f0d2:	b118      	cbz	r0, 2f0dc <add_number_to_array+0x34>
		cJSON_AddItemToArray(array, item);
   2f0d4:	4601      	mov	r1, r0
   2f0d6:	4628      	mov	r0, r5
   2f0d8:	f010 fd4e 	bl	3fb78 <cJSON_AddItemToArray>
	}
	return item;
}
   2f0dc:	1e20      	subs	r0, r4, #0
   2f0de:	bf18      	it	ne
   2f0e0:	2001      	movne	r0, #1
   2f0e2:	bd38      	pop	{r3, r4, r5, pc}
   2f0e4:	0004a24d 	.word	0x0004a24d
   2f0e8:	0004409e 	.word	0x0004409e

0002f0ec <add_string_to_array>:
{
   2f0ec:	b538      	push	{r3, r4, r5, lr}
   2f0ee:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(array != NULL);
   2f0f0:	4605      	mov	r5, r0
   2f0f2:	b950      	cbnz	r0, 2f10a <add_string_to_array+0x1e>
   2f0f4:	490b      	ldr	r1, [pc, #44]	; (2f124 <add_string_to_array+0x38>)
   2f0f6:	480c      	ldr	r0, [pc, #48]	; (2f128 <add_string_to_array+0x3c>)
   2f0f8:	f240 2293 	movw	r2, #659	; 0x293
   2f0fc:	f00d fcc6 	bl	3ca8c <assert_print>
   2f100:	f240 2193 	movw	r1, #659	; 0x293
   2f104:	4807      	ldr	r0, [pc, #28]	; (2f124 <add_string_to_array+0x38>)
   2f106:	f00d fcba 	bl	3ca7e <assert_post_action>
	cJSON *item = cJSON_CreateString(string);
   2f10a:	4620      	mov	r0, r4
   2f10c:	f002 ffc4 	bl	32098 <cJSON_CreateString>
	if (item) {
   2f110:	4604      	mov	r4, r0
   2f112:	b118      	cbz	r0, 2f11c <add_string_to_array+0x30>
		cJSON_AddItemToArray(array, item);
   2f114:	4601      	mov	r1, r0
   2f116:	4628      	mov	r0, r5
   2f118:	f010 fd2e 	bl	3fb78 <cJSON_AddItemToArray>
}
   2f11c:	1e20      	subs	r0, r4, #0
   2f11e:	bf18      	it	ne
   2f120:	2001      	movne	r0, #1
   2f122:	bd38      	pop	{r3, r4, r5, pc}
   2f124:	0004a24d 	.word	0x0004a24d
   2f128:	0004409e 	.word	0x0004409e

0002f12c <publish>:
		log_strdup(pub->message.topic.topic.utf8));
	LOG_DBG("Payload (%d bytes): %s",
		pub->message.payload.len,
		log_strdup(pub->message.payload.data));

	ret = mqtt_publish(client_mqtt, pub);
   2f12c:	4b07      	ldr	r3, [pc, #28]	; (2f14c <publish+0x20>)
{
   2f12e:	4601      	mov	r1, r0
   2f130:	b510      	push	{r4, lr}
	ret = mqtt_publish(client_mqtt, pub);
   2f132:	6818      	ldr	r0, [r3, #0]
   2f134:	f00f f894 	bl	3e260 <mqtt_publish>
	if (ret) {
   2f138:	4604      	mov	r4, r0
   2f13a:	b120      	cbz	r0, 2f146 <publish+0x1a>
		LOG_ERR("Publish failed: %d", ret);
   2f13c:	4602      	mov	r2, r0
   2f13e:	2145      	movs	r1, #69	; 0x45
   2f140:	4803      	ldr	r0, [pc, #12]	; (2f150 <publish+0x24>)
   2f142:	f00d fcdd 	bl	3cb00 <z_log_minimal_printk>
	}
	return ret;
}
   2f146:	4620      	mov	r0, r4
   2f148:	bd10      	pop	{r4, pc}
   2f14a:	bf00      	nop
   2f14c:	2001a198 	.word	0x2001a198
   2f150:	0004a28b 	.word	0x0004a28b

0002f154 <save_validate_status>:
{
   2f154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f156:	460f      	mov	r7, r1
   2f158:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(job_id != NULL);
   2f15a:	4605      	mov	r5, r0
   2f15c:	b950      	cbnz	r0, 2f174 <save_validate_status+0x20>
   2f15e:	491e      	ldr	r1, [pc, #120]	; (2f1d8 <save_validate_status+0x84>)
   2f160:	481e      	ldr	r0, [pc, #120]	; (2f1dc <save_validate_status+0x88>)
   2f162:	f240 2202 	movw	r2, #514	; 0x202
   2f166:	f00d fc91 	bl	3ca8c <assert_print>
   2f16a:	f240 2102 	movw	r1, #514	; 0x202
   2f16e:	481a      	ldr	r0, [pc, #104]	; (2f1d8 <save_validate_status+0x84>)
   2f170:	f00d fc85 	bl	3ca7e <assert_post_action>
	if (validate == NRF_CLOUD_FOTA_VALIDATE_DONE) {
   2f174:	2e05      	cmp	r6, #5
   2f176:	4c1a      	ldr	r4, [pc, #104]	; (2f1e0 <save_validate_status+0x8c>)
   2f178:	d117      	bne.n	2f1aa <save_validate_status+0x56>
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   2f17a:	2100      	movs	r1, #0
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f17c:	2303      	movs	r3, #3
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2f17e:	2225      	movs	r2, #37	; 0x25
   2f180:	1ca0      	adds	r0, r4, #2
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f182:	7063      	strb	r3, [r4, #1]
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   2f184:	7021      	strb	r1, [r4, #0]
		saved_job.bl_flags = NRF_CLOUD_FOTA_BL_STATUS_CLEAR;
   2f186:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2f18a:	f012 f953 	bl	41434 <memset>
	ret = settings_save_one(NRF_CLOUD_SETTINGS_FULL_FOTA_JOB, &saved_job,
   2f18e:	2228      	movs	r2, #40	; 0x28
   2f190:	4913      	ldr	r1, [pc, #76]	; (2f1e0 <save_validate_status+0x8c>)
   2f192:	4814      	ldr	r0, [pc, #80]	; (2f1e4 <save_validate_status+0x90>)
   2f194:	f7f2 feb2 	bl	21efc <settings_save_one>
	if (ret) {
   2f198:	4604      	mov	r4, r0
   2f19a:	b120      	cbz	r0, 2f1a6 <save_validate_status+0x52>
		LOG_ERR("settings_save_one failed: %d", ret);
   2f19c:	4602      	mov	r2, r0
   2f19e:	2145      	movs	r1, #69	; 0x45
   2f1a0:	4811      	ldr	r0, [pc, #68]	; (2f1e8 <save_validate_status+0x94>)
   2f1a2:	f00d fcad 	bl	3cb00 <z_log_minimal_printk>
}
   2f1a6:	4620      	mov	r0, r4
   2f1a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		saved_job.validate = validate;
   2f1aa:	4620      	mov	r0, r4
   2f1ac:	f800 6b02 	strb.w	r6, [r0], #2
		if (job_id != saved_job.id) {
   2f1b0:	4285      	cmp	r5, r0
		saved_job.type = job_type;
   2f1b2:	7067      	strb	r7, [r4, #1]
		if (job_id != saved_job.id) {
   2f1b4:	d006      	beq.n	2f1c4 <save_validate_status+0x70>
			strncpy(saved_job.id, job_id, sizeof(saved_job.id) - 1);
   2f1b6:	2224      	movs	r2, #36	; 0x24
   2f1b8:	4629      	mov	r1, r5
   2f1ba:	f012 fb22 	bl	41802 <strncpy>
			saved_job.id[sizeof(saved_job.id) - 1] = '\0';
   2f1be:	2300      	movs	r3, #0
   2f1c0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		ret = nrf_cloud_bootloader_fota_slot_set(&saved_job);
   2f1c4:	4806      	ldr	r0, [pc, #24]	; (2f1e0 <save_validate_status+0x8c>)
   2f1c6:	f000 fcab 	bl	2fb20 <nrf_cloud_bootloader_fota_slot_set>
		if (ret) {
   2f1ca:	2800      	cmp	r0, #0
   2f1cc:	d0df      	beq.n	2f18e <save_validate_status+0x3a>
			LOG_WRN("Failed to set active bootloader (B1) slot flag");
   2f1ce:	2157      	movs	r1, #87	; 0x57
   2f1d0:	4806      	ldr	r0, [pc, #24]	; (2f1ec <save_validate_status+0x98>)
   2f1d2:	f00d fc95 	bl	3cb00 <z_log_minimal_printk>
   2f1d6:	e7da      	b.n	2f18e <save_validate_status+0x3a>
   2f1d8:	0004a24d 	.word	0x0004a24d
   2f1dc:	0004409e 	.word	0x0004409e
   2f1e0:	20014c47 	.word	0x20014c47
   2f1e4:	0004a2d7 	.word	0x0004a2d7
   2f1e8:	0004a2ea 	.word	0x0004a2ea
   2f1ec:	0004a2a3 	.word	0x0004a2a3

0002f1f0 <reset_topics>:
{
   2f1f0:	b508      	push	{r3, lr}
	reset_topic(&sub_topics[SUB_TOPIC_IDX_RCV].topic);
   2f1f2:	4805      	ldr	r0, [pc, #20]	; (2f208 <reset_topics+0x18>)
   2f1f4:	f010 fad6 	bl	3f7a4 <reset_topic>
	reset_topic(&topic_updt.topic);
   2f1f8:	4804      	ldr	r0, [pc, #16]	; (2f20c <reset_topics+0x1c>)
   2f1fa:	f010 fad3 	bl	3f7a4 <reset_topic>
}
   2f1fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	reset_topic(&topic_req.topic);
   2f202:	4803      	ldr	r0, [pc, #12]	; (2f210 <reset_topics+0x20>)
   2f204:	f010 bace 	b.w	3f7a4 <reset_topic>
   2f208:	200146c8 	.word	0x200146c8
   2f20c:	200146e0 	.word	0x200146e0
   2f210:	200146d4 	.word	0x200146d4

0002f214 <build_topic>:
{
   2f214:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	size_t size = endpoint->size + strlen(client_id) +
   2f218:	684d      	ldr	r5, [r1, #4]
{
   2f21a:	4690      	mov	r8, r2
   2f21c:	460f      	mov	r7, r1
   2f21e:	461e      	mov	r6, r3
   2f220:	4681      	mov	r9, r0
	size_t size = endpoint->size + strlen(client_id) +
   2f222:	f7ee f80e 	bl	1d242 <strlen>
   2f226:	4682      	mov	sl, r0
		      strlen(topic_str) + 1;
   2f228:	4640      	mov	r0, r8
   2f22a:	f7ee f80a 	bl	1d242 <strlen>
	size_t size = endpoint->size + strlen(client_id) +
   2f22e:	1c6b      	adds	r3, r5, #1
   2f230:	eb03 050a 	add.w	r5, r3, sl
   2f234:	182c      	adds	r4, r5, r0
	buf = nrf_cloud_calloc(size, 1);
   2f236:	2101      	movs	r1, #1
   2f238:	4620      	mov	r0, r4
   2f23a:	f012 f855 	bl	412e8 <k_calloc>
	if (!buf) {
   2f23e:	4605      	mov	r5, r0
   2f240:	b938      	cbnz	r0, 2f252 <build_topic+0x3e>
		reset_topic(topic_out);
   2f242:	4630      	mov	r0, r6
   2f244:	f010 faae 	bl	3f7a4 <reset_topic>
		return ret;
   2f248:	f06f 000b 	mvn.w	r0, #11
}
   2f24c:	b002      	add	sp, #8
   2f24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ret = snprintk(buf, size, "%s%s%s",
   2f252:	4621      	mov	r1, r4
   2f254:	e9cd 9800 	strd	r9, r8, [sp]
   2f258:	683b      	ldr	r3, [r7, #0]
   2f25a:	4a08      	ldr	r2, [pc, #32]	; (2f27c <build_topic+0x68>)
   2f25c:	f00d fa40 	bl	3c6e0 <snprintk>
	if (ret <= 0 || ret >= size) {
   2f260:	2800      	cmp	r0, #0
   2f262:	dd01      	ble.n	2f268 <build_topic+0x54>
   2f264:	42a0      	cmp	r0, r4
   2f266:	d305      	bcc.n	2f274 <build_topic+0x60>
		nrf_cloud_free(buf);
   2f268:	4628      	mov	r0, r5
   2f26a:	f012 f832 	bl	412d2 <k_free>
		return ret;
   2f26e:	f06f 0006 	mvn.w	r0, #6
   2f272:	e7eb      	b.n	2f24c <build_topic+0x38>
	topic_out->size = ret;
   2f274:	e9c6 5000 	strd	r5, r0, [r6]
	return 0;
   2f278:	2000      	movs	r0, #0
   2f27a:	e7e7      	b.n	2f24c <build_topic+0x38>
   2f27c:	0004a30c 	.word	0x0004a30c

0002f280 <send_event.constprop.0>:
	struct nrf_cloud_fota_evt evt = {
   2f280:	2300      	movs	r3, #0
static void send_event(const enum nrf_cloud_fota_evt_id id,
   2f282:	b507      	push	{r0, r1, r2, lr}
	struct nrf_cloud_fota_evt evt = {
   2f284:	f8cd 3003 	str.w	r3, [sp, #3]
   2f288:	f88d 3007 	strb.w	r3, [sp, #7]
		.status = job->status,
   2f28c:	4b0b      	ldr	r3, [pc, #44]	; (2f2bc <send_event.constprop.0+0x3c>)
	switch (id) {
   2f28e:	2802      	cmp	r0, #2
	struct nrf_cloud_fota_evt evt = {
   2f290:	791a      	ldrb	r2, [r3, #4]
   2f292:	f88d 0000 	strb.w	r0, [sp]
   2f296:	f88d 2001 	strb.w	r2, [sp, #1]
   2f29a:	7a1a      	ldrb	r2, [r3, #8]
		evt.evt_data.error = job->error;
   2f29c:	bf08      	it	eq
   2f29e:	7f1b      	ldrbeq	r3, [r3, #28]
	struct nrf_cloud_fota_evt evt = {
   2f2a0:	f88d 2002 	strb.w	r2, [sp, #2]
		evt.evt_data.error = job->error;
   2f2a4:	bf08      	it	eq
   2f2a6:	f88d 3004 	strbeq.w	r3, [sp, #4]
	if (event_cb) {
   2f2aa:	4b05      	ldr	r3, [pc, #20]	; (2f2c0 <send_event.constprop.0+0x40>)
   2f2ac:	681b      	ldr	r3, [r3, #0]
   2f2ae:	b10b      	cbz	r3, 2f2b4 <send_event.constprop.0+0x34>
		event_cb(&evt);
   2f2b0:	4668      	mov	r0, sp
   2f2b2:	4798      	blx	r3
}
   2f2b4:	b003      	add	sp, #12
   2f2b6:	f85d fb04 	ldr.w	pc, [sp], #4
   2f2ba:	bf00      	nop
   2f2bc:	2001a19c 	.word	0x2001a19c
   2f2c0:	2001a1c4 	.word	0x2001a1c4

0002f2c4 <send_job_update>:
		return false;
	}
}

static int send_job_update(struct nrf_cloud_fota_job *const job)
{
   2f2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* ensure shell-invoked fota doesn't crash below */
	if ((job == NULL) || (job->info.id == NULL)) {
   2f2c8:	68c3      	ldr	r3, [r0, #12]
{
   2f2ca:	4604      	mov	r4, r0
   2f2cc:	b086      	sub	sp, #24
	if ((job == NULL) || (job->info.id == NULL)) {
   2f2ce:	2b00      	cmp	r3, #0
   2f2d0:	d065      	beq.n	2f39e <send_job_update+0xda>
		return -EINVAL;
	} else if (client_mqtt == NULL) {
   2f2d2:	4b37      	ldr	r3, [pc, #220]	; (2f3b0 <send_job_update+0xec>)
   2f2d4:	681b      	ldr	r3, [r3, #0]
   2f2d6:	2b00      	cmp	r3, #0
   2f2d8:	d064      	beq.n	2f3a4 <send_job_update+0xe0>
		return -ENXIO;
	} else if (topic_updt.topic.utf8 == NULL) {
   2f2da:	4d36      	ldr	r5, [pc, #216]	; (2f3b4 <send_job_update+0xf0>)
   2f2dc:	682b      	ldr	r3, [r5, #0]
   2f2de:	2b00      	cmp	r3, #0
   2f2e0:	d063      	beq.n	2f3aa <send_job_update+0xe6>
		return -EHOSTUNREACH;
	}

	int ret;
	struct mqtt_publish_param param = {
   2f2e2:	466e      	mov	r6, sp
   2f2e4:	2218      	movs	r2, #24
   2f2e6:	2100      	movs	r1, #0
   2f2e8:	4630      	mov	r0, r6
   2f2ea:	f012 f8a3 	bl	41434 <memset>
   2f2ee:	f44f 7397 	mov.w	r3, #302	; 0x12e
   2f2f2:	f8ad 3014 	strh.w	r3, [sp, #20]
		.message_id = NCT_MSG_ID_FOTA_REPORT,
		.dup_flag = 0,
		.retain_flag = 0,
	};
	bool result;
	cJSON *array = cJSON_CreateArray();
   2f2f6:	f002 fee7 	bl	320c8 <cJSON_CreateArray>

	if (!array) {
   2f2fa:	4680      	mov	r8, r0
   2f2fc:	b928      	cbnz	r0, 2f30a <send_job_update+0x46>
					      get_error_string(job->error));
	}

	if (!result) {
		cJSON_Delete(array);
		return -ENOMEM;
   2f2fe:	f06f 050b 	mvn.w	r5, #11
		/* If job was updated to terminal status, save job ID */
		strncpy(last_job, job->info.id, sizeof(last_job));
	}

	return ret;
}
   2f302:	4628      	mov	r0, r5
   2f304:	b006      	add	sp, #24
   2f306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = add_string_to_array(array, job->info.id) &&
   2f30a:	68e1      	ldr	r1, [r4, #12]
   2f30c:	f7ff feee 	bl	2f0ec <add_string_to_array>
   2f310:	b118      	cbz	r0, 2f31a <send_job_update+0x56>
		 add_number_to_array(array, job->status);
   2f312:	4640      	mov	r0, r8
   2f314:	7921      	ldrb	r1, [r4, #4]
   2f316:	f7ff fec7 	bl	2f0a8 <add_number_to_array>
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   2f31a:	7923      	ldrb	r3, [r4, #4]
	result = add_string_to_array(array, job->info.id) &&
   2f31c:	4607      	mov	r7, r0
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   2f31e:	2b07      	cmp	r3, #7
   2f320:	d10c      	bne.n	2f33c <send_job_update+0x78>
		result &= add_number_to_array(array, job->dl_progress);
   2f322:	4640      	mov	r0, r8
   2f324:	6a21      	ldr	r1, [r4, #32]
   2f326:	f7ff febf 	bl	2f0a8 <add_number_to_array>
		result &= add_string_to_array(array,
   2f32a:	ea00 0307 	and.w	r3, r0, r7
   2f32e:	f003 0301 	and.w	r3, r3, #1
		cJSON_Delete(array);
   2f332:	4640      	mov	r0, r8
	if (!result) {
   2f334:	b97b      	cbnz	r3, 2f356 <send_job_update+0x92>
		cJSON_Delete(array);
   2f336:	f002 fe11 	bl	31f5c <cJSON_Delete>
   2f33a:	e7e0      	b.n	2f2fe <send_job_update+0x3a>
	switch (err) {
   2f33c:	7f23      	ldrb	r3, [r4, #28]
		result &= add_string_to_array(array,
   2f33e:	4640      	mov	r0, r8
   2f340:	3b01      	subs	r3, #1
   2f342:	b2db      	uxtb	r3, r3
   2f344:	2b04      	cmp	r3, #4
   2f346:	bf96      	itet	ls
   2f348:	4a1b      	ldrls	r2, [pc, #108]	; (2f3b8 <send_job_update+0xf4>)
   2f34a:	491c      	ldrhi	r1, [pc, #112]	; (2f3bc <send_job_update+0xf8>)
   2f34c:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   2f350:	f7ff fecc 	bl	2f0ec <add_string_to_array>
   2f354:	e7e9      	b.n	2f32a <send_job_update+0x66>
	char *array_str = cJSON_PrintUnformatted(array);
   2f356:	f010 fbf4 	bl	3fb42 <cJSON_PrintUnformatted>
   2f35a:	4607      	mov	r7, r0
	cJSON_Delete(array);
   2f35c:	4640      	mov	r0, r8
   2f35e:	f002 fdfd 	bl	31f5c <cJSON_Delete>
	if (array_str == NULL) {
   2f362:	2f00      	cmp	r7, #0
   2f364:	d0cb      	beq.n	2f2fe <send_job_update+0x3a>
		pub_param->message.topic = *topic;
   2f366:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2f36a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		pub_param->message.payload.len = strlen(array_str);
   2f36e:	4638      	mov	r0, r7
		pub_param->message.payload.data = array_str;
   2f370:	9703      	str	r7, [sp, #12]
		pub_param->message.payload.len = strlen(array_str);
   2f372:	f7ed ff66 	bl	1d242 <strlen>
   2f376:	9004      	str	r0, [sp, #16]
		ret = publish(pub_param);
   2f378:	4630      	mov	r0, r6
   2f37a:	f7ff fed7 	bl	2f12c <publish>
   2f37e:	4605      	mov	r5, r0
	cJSON_FreeString(array_str);
   2f380:	4638      	mov	r0, r7
   2f382:	f010 fd15 	bl	3fdb0 <cJSON_FreeString>
	if (ret == 0 && is_job_status_terminal(job->status)) {
   2f386:	2d00      	cmp	r5, #0
   2f388:	d1bb      	bne.n	2f302 <send_job_update+0x3e>
	switch (status) {
   2f38a:	7923      	ldrb	r3, [r4, #4]
   2f38c:	3b02      	subs	r3, #2
   2f38e:	2b04      	cmp	r3, #4
   2f390:	d8b7      	bhi.n	2f302 <send_job_update+0x3e>
		strncpy(last_job, job->info.id, sizeof(last_job));
   2f392:	2225      	movs	r2, #37	; 0x25
   2f394:	68e1      	ldr	r1, [r4, #12]
   2f396:	480a      	ldr	r0, [pc, #40]	; (2f3c0 <send_job_update+0xfc>)
   2f398:	f012 fa33 	bl	41802 <strncpy>
   2f39c:	e7b1      	b.n	2f302 <send_job_update+0x3e>
		return -EINVAL;
   2f39e:	f06f 0515 	mvn.w	r5, #21
   2f3a2:	e7ae      	b.n	2f302 <send_job_update+0x3e>
		return -ENXIO;
   2f3a4:	f06f 0505 	mvn.w	r5, #5
   2f3a8:	e7ab      	b.n	2f302 <send_job_update+0x3e>
		return -EHOSTUNREACH;
   2f3aa:	f06f 0575 	mvn.w	r5, #117	; 0x75
   2f3ae:	e7a8      	b.n	2f302 <send_job_update+0x3e>
   2f3b0:	2001a198 	.word	0x2001a198
   2f3b4:	200146e0 	.word	0x200146e0
   2f3b8:	000430cc 	.word	0x000430cc
   2f3bc:	00045228 	.word	0x00045228
   2f3c0:	2001d2d2 	.word	0x2001d2d2

0002f3c4 <report_validated_job_status>:
{
   2f3c4:	b530      	push	{r4, r5, lr}
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f3c6:	4c21      	ldr	r4, [pc, #132]	; (2f44c <report_validated_job_status+0x88>)
{
   2f3c8:	b08b      	sub	sp, #44	; 0x2c
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f3ca:	7865      	ldrb	r5, [r4, #1]
   2f3cc:	2d03      	cmp	r5, #3
   2f3ce:	d03a      	beq.n	2f446 <report_validated_job_status+0x82>
	struct nrf_cloud_fota_job job = {
   2f3d0:	2228      	movs	r2, #40	; 0x28
   2f3d2:	2100      	movs	r1, #0
   2f3d4:	4668      	mov	r0, sp
   2f3d6:	f012 f82d 	bl	41434 <memset>
	switch (saved_job.validate) {
   2f3da:	7822      	ldrb	r2, [r4, #0]
	struct nrf_cloud_fota_job job = {
   2f3dc:	1ca3      	adds	r3, r4, #2
	switch (saved_job.validate) {
   2f3de:	2a03      	cmp	r2, #3
	struct nrf_cloud_fota_job job = {
   2f3e0:	f88d 5008 	strb.w	r5, [sp, #8]
   2f3e4:	9303      	str	r3, [sp, #12]
	switch (saved_job.validate) {
   2f3e6:	d01c      	beq.n	2f422 <report_validated_job_status+0x5e>
   2f3e8:	2a04      	cmp	r2, #4
   2f3ea:	f04f 0503 	mov.w	r5, #3
   2f3ee:	d015      	beq.n	2f41c <report_validated_job_status+0x58>
   2f3f0:	2a02      	cmp	r2, #2
   2f3f2:	d11a      	bne.n	2f42a <report_validated_job_status+0x66>
		job.status = NRF_CLOUD_FOTA_SUCCEEDED;
   2f3f4:	f88d 5004 	strb.w	r5, [sp, #4]
	int ret = 0;
   2f3f8:	2400      	movs	r4, #0
	if (job.info.type != NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f3fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2f3fe:	2b03      	cmp	r3, #3
   2f400:	d009      	beq.n	2f416 <report_validated_job_status+0x52>
		ret = send_job_update(&job);
   2f402:	4668      	mov	r0, sp
   2f404:	f7ff ff5e 	bl	2f2c4 <send_job_update>
		if (ret) {
   2f408:	4604      	mov	r4, r0
   2f40a:	b120      	cbz	r0, 2f416 <report_validated_job_status+0x52>
			LOG_ERR("Error sending job update: %d", ret);
   2f40c:	4602      	mov	r2, r0
   2f40e:	2145      	movs	r1, #69	; 0x45
   2f410:	480f      	ldr	r0, [pc, #60]	; (2f450 <report_validated_job_status+0x8c>)
   2f412:	f00d fb75 	bl	3cb00 <z_log_minimal_printk>
}
   2f416:	4620      	mov	r0, r4
   2f418:	b00b      	add	sp, #44	; 0x2c
   2f41a:	bd30      	pop	{r4, r5, pc}
		job.error = NRF_CLOUD_FOTA_ERROR_UNABLE_TO_VALIDATE;
   2f41c:	f88d 501c 	strb.w	r5, [sp, #28]
   2f420:	e7e8      	b.n	2f3f4 <report_validated_job_status+0x30>
		job.status = NRF_CLOUD_FOTA_FAILED;
   2f422:	2302      	movs	r3, #2
   2f424:	f88d 3004 	strb.w	r3, [sp, #4]
   2f428:	e7e6      	b.n	2f3f8 <report_validated_job_status+0x34>
		LOG_ERR("Unexpected job validation status: %d",
   2f42a:	2145      	movs	r1, #69	; 0x45
   2f42c:	4809      	ldr	r0, [pc, #36]	; (2f454 <report_validated_job_status+0x90>)
   2f42e:	f00d fb67 	bl	3cb00 <z_log_minimal_printk>
		ret = save_validate_status(job.info.id, job.info.type,
   2f432:	2205      	movs	r2, #5
   2f434:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2f438:	9803      	ldr	r0, [sp, #12]
   2f43a:	f7ff fe8b 	bl	2f154 <save_validate_status>
		job.info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f43e:	f88d 5008 	strb.w	r5, [sp, #8]
		ret = save_validate_status(job.info.id, job.info.type,
   2f442:	4604      	mov	r4, r0
		break;
   2f444:	e7d9      	b.n	2f3fa <report_validated_job_status+0x36>
		return 1;
   2f446:	2401      	movs	r4, #1
   2f448:	e7e5      	b.n	2f416 <report_validated_job_status+0x52>
   2f44a:	bf00      	nop
   2f44c:	20014c47 	.word	0x20014c47
   2f450:	0004a33d 	.word	0x0004a33d
   2f454:	0004a313 	.word	0x0004a313

0002f458 <cleanup_job.constprop.0>:
static void cleanup_job(struct nrf_cloud_fota_job *const job)
   2f458:	b510      	push	{r4, lr}
	if (job->parsed_payload) {
   2f45a:	4c06      	ldr	r4, [pc, #24]	; (2f474 <cleanup_job.constprop.0+0x1c>)
   2f45c:	6820      	ldr	r0, [r4, #0]
   2f45e:	b108      	cbz	r0, 2f464 <cleanup_job.constprop.0+0xc>
		cJSON_Delete(job->parsed_payload);
   2f460:	f002 fd7c 	bl	31f5c <cJSON_Delete>
	memset(job, 0, sizeof(*job));
   2f464:	2228      	movs	r2, #40	; 0x28
   2f466:	2100      	movs	r1, #0
   2f468:	4802      	ldr	r0, [pc, #8]	; (2f474 <cleanup_job.constprop.0+0x1c>)
   2f46a:	f011 ffe3 	bl	41434 <memset>
	job->info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f46e:	2303      	movs	r3, #3
   2f470:	7223      	strb	r3, [r4, #8]
}
   2f472:	bd10      	pop	{r4, pc}
   2f474:	2001a19c 	.word	0x2001a19c

0002f478 <http_fota_handler>:
{
   2f478:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(evt != NULL);
   2f47a:	4605      	mov	r5, r0
   2f47c:	b950      	cbnz	r0, 2f494 <http_fota_handler+0x1c>
   2f47e:	4941      	ldr	r1, [pc, #260]	; (2f584 <http_fota_handler+0x10c>)
   2f480:	4841      	ldr	r0, [pc, #260]	; (2f588 <http_fota_handler+0x110>)
   2f482:	f44f 720a 	mov.w	r2, #552	; 0x228
   2f486:	f00d fb01 	bl	3ca8c <assert_print>
   2f48a:	f44f 710a 	mov.w	r1, #552	; 0x228
   2f48e:	483d      	ldr	r0, [pc, #244]	; (2f584 <http_fota_handler+0x10c>)
   2f490:	f00d faf5 	bl	3ca7e <assert_post_action>
	switch (evt->id) {
   2f494:	782b      	ldrb	r3, [r5, #0]
   2f496:	4e3d      	ldr	r6, [pc, #244]	; (2f58c <http_fota_handler+0x114>)
   2f498:	2b04      	cmp	r3, #4
   2f49a:	d838      	bhi.n	2f50e <http_fota_handler+0x96>
   2f49c:	e8df f003 	tbb	[pc, r3]
   2f4a0:	341f0359 	.word	0x341f0359
   2f4a4:	3a          	.byte	0x3a
   2f4a5:	00          	.byte	0x00
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   2f4a6:	4c3a      	ldr	r4, [pc, #232]	; (2f590 <http_fota_handler+0x118>)
		LOG_INF("Download complete");
   2f4a8:	2149      	movs	r1, #73	; 0x49
   2f4aa:	483a      	ldr	r0, [pc, #232]	; (2f594 <http_fota_handler+0x11c>)
   2f4ac:	f00d fb28 	bl	3cb00 <z_log_minimal_printk>
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   2f4b0:	7923      	ldrb	r3, [r4, #4]
   2f4b2:	2b07      	cmp	r3, #7
   2f4b4:	d108      	bne.n	2f4c8 <http_fota_handler+0x50>
   2f4b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2f4b8:	2b64      	cmp	r3, #100	; 0x64
   2f4ba:	d005      	beq.n	2f4c8 <http_fota_handler+0x50>
			current_fota.dl_progress = 100;
   2f4bc:	2364      	movs	r3, #100	; 0x64
			(void)send_job_update(&current_fota);
   2f4be:	4620      	mov	r0, r4
			current_fota.sent_dl_progress = 100;
   2f4c0:	e9c4 3308 	strd	r3, r3, [r4, #32]
			(void)send_job_update(&current_fota);
   2f4c4:	f7ff fefe 	bl	2f2c4 <send_job_update>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2f4c8:	2201      	movs	r2, #1
		save_validate_status(current_fota.info.id,
   2f4ca:	7a21      	ldrb	r1, [r4, #8]
   2f4cc:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2f4ce:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   2f4d0:	f7ff fe40 	bl	2f154 <save_validate_status>
		ret = send_job_update(&current_fota);
   2f4d4:	482e      	ldr	r0, [pc, #184]	; (2f590 <http_fota_handler+0x118>)
   2f4d6:	f7ff fef5 	bl	2f2c4 <send_job_update>
   2f4da:	4604      	mov	r4, r0
		break;
   2f4dc:	e00d      	b.n	2f4fa <http_fota_handler+0x82>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2f4de:	2201      	movs	r2, #1
   2f4e0:	4c2b      	ldr	r4, [pc, #172]	; (2f590 <http_fota_handler+0x118>)
		save_validate_status(current_fota.info.id,
   2f4e2:	7a21      	ldrb	r1, [r4, #8]
   2f4e4:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2f4e6:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   2f4e8:	f7ff fe34 	bl	2f154 <save_validate_status>
		ret = send_job_update(&current_fota);
   2f4ec:	4620      	mov	r0, r4
   2f4ee:	f7ff fee9 	bl	2f2c4 <send_job_update>
   2f4f2:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_PENDING, &current_fota);
   2f4f4:	2003      	movs	r0, #3
   2f4f6:	f7ff fec3 	bl	2f280 <send_event.constprop.0>
	if (ret) {
   2f4fa:	b144      	cbz	r4, 2f50e <http_fota_handler+0x96>
		LOG_ERR("Failed to send job update to cloud: %d", ret);
   2f4fc:	4622      	mov	r2, r4
   2f4fe:	2145      	movs	r1, #69	; 0x45
   2f500:	4825      	ldr	r0, [pc, #148]	; (2f598 <http_fota_handler+0x120>)
   2f502:	f00d fafd 	bl	3cb00 <z_log_minimal_printk>
   2f506:	e002      	b.n	2f50e <http_fota_handler+0x96>
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_DONE, &current_fota);
   2f508:	2004      	movs	r0, #4
   2f50a:	f7ff feb9 	bl	2f280 <send_event.constprop.0>
	last_fota_dl_evt = evt->id;
   2f50e:	782b      	ldrb	r3, [r5, #0]
   2f510:	7033      	strb	r3, [r6, #0]
}
   2f512:	bd70      	pop	{r4, r5, r6, pc}
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2f514:	2202      	movs	r2, #2
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2f516:	7831      	ldrb	r1, [r6, #0]
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2f518:	4b1d      	ldr	r3, [pc, #116]	; (2f590 <http_fota_handler+0x118>)
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2f51a:	2903      	cmp	r1, #3
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2f51c:	711a      	strb	r2, [r3, #4]
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2f51e:	d002      	beq.n	2f526 <http_fota_handler+0xae>
		    evt->cause == FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE) {
   2f520:	7929      	ldrb	r1, [r5, #4]
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2f522:	4291      	cmp	r1, r2
   2f524:	d110      	bne.n	2f548 <http_fota_handler+0xd0>
			current_fota.status = NRF_CLOUD_FOTA_REJECTED;
   2f526:	2206      	movs	r2, #6
   2f528:	711a      	strb	r2, [r3, #4]
		save_validate_status(current_fota.info.id,
   2f52a:	2205      	movs	r2, #5
   2f52c:	7a19      	ldrb	r1, [r3, #8]
   2f52e:	68d8      	ldr	r0, [r3, #12]
   2f530:	f7ff fe10 	bl	2f154 <save_validate_status>
		ret = send_job_update(&current_fota);
   2f534:	4816      	ldr	r0, [pc, #88]	; (2f590 <http_fota_handler+0x118>)
   2f536:	f7ff fec5 	bl	2f2c4 <send_job_update>
   2f53a:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERROR, &current_fota);
   2f53c:	2002      	movs	r0, #2
   2f53e:	f7ff fe9f 	bl	2f280 <send_event.constprop.0>
		cleanup_job(&current_fota);
   2f542:	f7ff ff89 	bl	2f458 <cleanup_job.constprop.0>
		break;
   2f546:	e7d8      	b.n	2f4fa <http_fota_handler+0x82>
		} else if (evt->cause == FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH) {
   2f548:	2903      	cmp	r1, #3
			current_fota.error = NRF_CLOUD_FOTA_ERROR_MISMATCH;
   2f54a:	bf08      	it	eq
   2f54c:	2205      	moveq	r2, #5
			current_fota.error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD;
   2f54e:	771a      	strb	r2, [r3, #28]
   2f550:	e7eb      	b.n	2f52a <http_fota_handler+0xb2>
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   2f552:	2307      	movs	r3, #7
   2f554:	4a0e      	ldr	r2, [pc, #56]	; (2f590 <http_fota_handler+0x118>)
		if ((current_fota.sent_dl_progress == 100) &&
   2f556:	6a51      	ldr	r1, [r2, #36]	; 0x24
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   2f558:	7113      	strb	r3, [r2, #4]
		current_fota.dl_progress = evt->progress;
   2f55a:	686b      	ldr	r3, [r5, #4]
		if ((current_fota.sent_dl_progress == 100) &&
   2f55c:	2964      	cmp	r1, #100	; 0x64
		current_fota.dl_progress = evt->progress;
   2f55e:	6213      	str	r3, [r2, #32]
		if ((current_fota.sent_dl_progress == 100) &&
   2f560:	d108      	bne.n	2f574 <http_fota_handler+0xfc>
   2f562:	2b64      	cmp	r3, #100	; 0x64
   2f564:	d0d3      	beq.n	2f50e <http_fota_handler+0x96>
		if (current_fota.sent_dl_progress >
   2f566:	2b63      	cmp	r3, #99	; 0x63
   2f568:	dd06      	ble.n	2f578 <http_fota_handler+0x100>
		    (((current_fota.dl_progress -
   2f56a:	6a51      	ldr	r1, [r2, #36]	; 0x24
   2f56c:	1a59      	subs	r1, r3, r1
		if (current_fota.dl_progress != 100 &&
   2f56e:	2909      	cmp	r1, #9
   2f570:	ddcd      	ble.n	2f50e <http_fota_handler+0x96>
   2f572:	e005      	b.n	2f580 <http_fota_handler+0x108>
		if (current_fota.sent_dl_progress >
   2f574:	428b      	cmp	r3, r1
   2f576:	da01      	bge.n	2f57c <http_fota_handler+0x104>
			current_fota.sent_dl_progress = 0;
   2f578:	2100      	movs	r1, #0
   2f57a:	6251      	str	r1, [r2, #36]	; 0x24
		if (current_fota.dl_progress != 100 &&
   2f57c:	2b64      	cmp	r3, #100	; 0x64
   2f57e:	d1f4      	bne.n	2f56a <http_fota_handler+0xf2>
		current_fota.sent_dl_progress = current_fota.dl_progress;
   2f580:	6253      	str	r3, [r2, #36]	; 0x24
   2f582:	e7a7      	b.n	2f4d4 <http_fota_handler+0x5c>
   2f584:	0004a24d 	.word	0x0004a24d
   2f588:	0004409e 	.word	0x0004409e
   2f58c:	20014c46 	.word	0x20014c46
   2f590:	2001a19c 	.word	0x2001a19c
   2f594:	0004a35f 	.word	0x0004a35f
   2f598:	0004a376 	.word	0x0004a376

0002f59c <nrf_cloud_fota_init>:
{
   2f59c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool reboot_required = false;
   2f59e:	2400      	movs	r4, #0
   2f5a0:	f88d 4007 	strb.w	r4, [sp, #7]
	if (cb == NULL) {
   2f5a4:	b940      	cbnz	r0, 2f5b8 <nrf_cloud_fota_init+0x1c>
		LOG_ERR("Invalid parameter");
   2f5a6:	2145      	movs	r1, #69	; 0x45
   2f5a8:	482b      	ldr	r0, [pc, #172]	; (2f658 <nrf_cloud_fota_init+0xbc>)
   2f5aa:	f00d faa9 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   2f5ae:	f06f 0415 	mvn.w	r4, #21
}
   2f5b2:	4620      	mov	r0, r4
   2f5b4:	b003      	add	sp, #12
   2f5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event_cb = cb;
   2f5b8:	4b28      	ldr	r3, [pc, #160]	; (2f65c <nrf_cloud_fota_init+0xc0>)
	if (initialized) {
   2f5ba:	4f29      	ldr	r7, [pc, #164]	; (2f660 <nrf_cloud_fota_init+0xc4>)
	event_cb = cb;
   2f5bc:	6018      	str	r0, [r3, #0]
	if (initialized) {
   2f5be:	783b      	ldrb	r3, [r7, #0]
   2f5c0:	2b00      	cmp	r3, #0
   2f5c2:	d1f6      	bne.n	2f5b2 <nrf_cloud_fota_init+0x16>
	if (!fota_dl_initialized) {
   2f5c4:	4d27      	ldr	r5, [pc, #156]	; (2f664 <nrf_cloud_fota_init+0xc8>)
   2f5c6:	782b      	ldrb	r3, [r5, #0]
   2f5c8:	b963      	cbnz	r3, 2f5e4 <nrf_cloud_fota_init+0x48>
		ret = fota_download_init(http_fota_handler);
   2f5ca:	4827      	ldr	r0, [pc, #156]	; (2f668 <nrf_cloud_fota_init+0xcc>)
   2f5cc:	f001 fba6 	bl	30d1c <fota_download_init>
		if (ret != 0) {
   2f5d0:	4604      	mov	r4, r0
   2f5d2:	b128      	cbz	r0, 2f5e0 <nrf_cloud_fota_init+0x44>
			LOG_ERR("fota_download_init error: %d", ret);
   2f5d4:	2145      	movs	r1, #69	; 0x45
   2f5d6:	4602      	mov	r2, r0
   2f5d8:	4824      	ldr	r0, [pc, #144]	; (2f66c <nrf_cloud_fota_init+0xd0>)
		LOG_ERR("Cannot load settings: %d", ret);
   2f5da:	f00d fa91 	bl	3cb00 <z_log_minimal_printk>
		return ret;
   2f5de:	e7e8      	b.n	2f5b2 <nrf_cloud_fota_init+0x16>
		fota_dl_initialized = true;
   2f5e0:	2301      	movs	r3, #1
   2f5e2:	702b      	strb	r3, [r5, #0]
	ret = settings_load_subtree(settings_handler_fota.name);
   2f5e4:	4822      	ldr	r0, [pc, #136]	; (2f670 <nrf_cloud_fota_init+0xd4>)
   2f5e6:	f7f2 fcc3 	bl	21f70 <settings_load_subtree>
	if (ret) {
   2f5ea:	4604      	mov	r4, r0
   2f5ec:	b118      	cbz	r0, 2f5f6 <nrf_cloud_fota_init+0x5a>
		LOG_ERR("Cannot load settings: %d", ret);
   2f5ee:	4602      	mov	r2, r0
   2f5f0:	2145      	movs	r1, #69	; 0x45
   2f5f2:	4820      	ldr	r0, [pc, #128]	; (2f674 <nrf_cloud_fota_init+0xd8>)
   2f5f4:	e7f1      	b.n	2f5da <nrf_cloud_fota_init+0x3e>
	ret = nrf_cloud_pending_fota_job_process(&saved_job, &reboot_required);
   2f5f6:	4e20      	ldr	r6, [pc, #128]	; (2f678 <nrf_cloud_fota_init+0xdc>)
   2f5f8:	f10d 0107 	add.w	r1, sp, #7
   2f5fc:	4630      	mov	r0, r6
   2f5fe:	f000 fabd 	bl	2fb7c <nrf_cloud_pending_fota_job_process>
	if (ret == 0) {
   2f602:	4605      	mov	r5, r0
   2f604:	b970      	cbnz	r0, 2f624 <nrf_cloud_fota_init+0x88>
		save_validate_status(saved_job.id, saved_job.type, saved_job.validate);
   2f606:	7832      	ldrb	r2, [r6, #0]
   2f608:	7871      	ldrb	r1, [r6, #1]
   2f60a:	1cb0      	adds	r0, r6, #2
   2f60c:	f7ff fda2 	bl	2f154 <save_validate_status>
		if (reboot_required) {
   2f610:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2f614:	b1a3      	cbz	r3, 2f640 <nrf_cloud_fota_init+0xa4>
			LOG_INF("Rebooting to complete FOTA update...");
   2f616:	4819      	ldr	r0, [pc, #100]	; (2f67c <nrf_cloud_fota_init+0xe0>)
   2f618:	2149      	movs	r1, #73	; 0x49
   2f61a:	f00d fa71 	bl	3cb00 <z_log_minimal_printk>
			sys_reboot(SYS_REBOOT_COLD);
   2f61e:	2001      	movs	r0, #1
   2f620:	f7f1 ff80 	bl	21524 <sys_reboot>
	} else if (ret == -ENODEV) {
   2f624:	f110 0f13 	cmn.w	r0, #19
   2f628:	d10c      	bne.n	2f644 <nrf_cloud_fota_init+0xa8>
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM &&
   2f62a:	7875      	ldrb	r5, [r6, #1]
   2f62c:	2d01      	cmp	r5, #1
   2f62e:	d10f      	bne.n	2f650 <nrf_cloud_fota_init+0xb4>
		     saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_FAIL ||
   2f630:	7833      	ldrb	r3, [r6, #0]
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM &&
   2f632:	3b02      	subs	r3, #2
   2f634:	2b02      	cmp	r3, #2
   2f636:	d80b      	bhi.n	2f650 <nrf_cloud_fota_init+0xb4>
			LOG_INF("FOTA updated modem");
   2f638:	2149      	movs	r1, #73	; 0x49
   2f63a:	4811      	ldr	r0, [pc, #68]	; (2f680 <nrf_cloud_fota_init+0xe4>)
   2f63c:	f00d fa60 	bl	3cb00 <z_log_minimal_printk>
		ret = 1;
   2f640:	2401      	movs	r4, #1
   2f642:	e005      	b.n	2f650 <nrf_cloud_fota_init+0xb4>
		LOG_ERR("Failed to process pending FOTA job, error: %d", ret);
   2f644:	4602      	mov	r2, r0
   2f646:	2145      	movs	r1, #69	; 0x45
   2f648:	480e      	ldr	r0, [pc, #56]	; (2f684 <nrf_cloud_fota_init+0xe8>)
   2f64a:	f00d fa59 	bl	3cb00 <z_log_minimal_printk>
   2f64e:	462c      	mov	r4, r5
	initialized = true;
   2f650:	2301      	movs	r3, #1
   2f652:	703b      	strb	r3, [r7, #0]
	return ret;
   2f654:	e7ad      	b.n	2f5b2 <nrf_cloud_fota_init+0x16>
   2f656:	bf00      	nop
   2f658:	0004a3a2 	.word	0x0004a3a2
   2f65c:	2001a1c4 	.word	0x2001a1c4
   2f660:	2001d2d1 	.word	0x2001d2d1
   2f664:	2001d2d0 	.word	0x2001d2d0
   2f668:	0002f479 	.word	0x0002f479
   2f66c:	0004a3b9 	.word	0x0004a3b9
   2f670:	0004a3db 	.word	0x0004a3db
   2f674:	0004877f 	.word	0x0004877f
   2f678:	20014c47 	.word	0x20014c47
   2f67c:	0004a3ea 	.word	0x0004a3ea
   2f680:	0004a414 	.word	0x0004a414
   2f684:	0004a42c 	.word	0x0004a42c

0002f688 <nrf_cloud_fota_endpoint_set>:
{
   2f688:	b570      	push	{r4, r5, r6, lr}
   2f68a:	460e      	mov	r6, r1
   2f68c:	4615      	mov	r5, r2
	if (client == NULL || endpoint == NULL ||
   2f68e:	b328      	cbz	r0, 2f6dc <nrf_cloud_fota_endpoint_set+0x54>
   2f690:	b322      	cbz	r2, 2f6dc <nrf_cloud_fota_endpoint_set+0x54>
   2f692:	6813      	ldr	r3, [r2, #0]
   2f694:	b313      	cbz	r3, 2f6dc <nrf_cloud_fota_endpoint_set+0x54>
	    endpoint->utf8 == NULL || endpoint->size == 0 ||
   2f696:	6853      	ldr	r3, [r2, #4]
   2f698:	b303      	cbz	r3, 2f6dc <nrf_cloud_fota_endpoint_set+0x54>
   2f69a:	b1f9      	cbz	r1, 2f6dc <nrf_cloud_fota_endpoint_set+0x54>
	client_mqtt = client;
   2f69c:	4b11      	ldr	r3, [pc, #68]	; (2f6e4 <nrf_cloud_fota_endpoint_set+0x5c>)
   2f69e:	6018      	str	r0, [r3, #0]
	reset_topics();
   2f6a0:	f7ff fda6 	bl	2f1f0 <reset_topics>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_RCV,
   2f6a4:	4629      	mov	r1, r5
   2f6a6:	4630      	mov	r0, r6
   2f6a8:	4b0f      	ldr	r3, [pc, #60]	; (2f6e8 <nrf_cloud_fota_endpoint_set+0x60>)
   2f6aa:	4a10      	ldr	r2, [pc, #64]	; (2f6ec <nrf_cloud_fota_endpoint_set+0x64>)
   2f6ac:	f7ff fdb2 	bl	2f214 <build_topic>
	if (ret) {
   2f6b0:	4604      	mov	r4, r0
   2f6b2:	b978      	cbnz	r0, 2f6d4 <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_UPDATE,
   2f6b4:	4629      	mov	r1, r5
   2f6b6:	4630      	mov	r0, r6
   2f6b8:	4b0d      	ldr	r3, [pc, #52]	; (2f6f0 <nrf_cloud_fota_endpoint_set+0x68>)
   2f6ba:	4a0e      	ldr	r2, [pc, #56]	; (2f6f4 <nrf_cloud_fota_endpoint_set+0x6c>)
   2f6bc:	f7ff fdaa 	bl	2f214 <build_topic>
	if (ret) {
   2f6c0:	4604      	mov	r4, r0
   2f6c2:	b938      	cbnz	r0, 2f6d4 <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_REQ,
   2f6c4:	4629      	mov	r1, r5
   2f6c6:	4630      	mov	r0, r6
   2f6c8:	4b0b      	ldr	r3, [pc, #44]	; (2f6f8 <nrf_cloud_fota_endpoint_set+0x70>)
   2f6ca:	4a0c      	ldr	r2, [pc, #48]	; (2f6fc <nrf_cloud_fota_endpoint_set+0x74>)
   2f6cc:	f7ff fda2 	bl	2f214 <build_topic>
	if (ret) {
   2f6d0:	4604      	mov	r4, r0
   2f6d2:	b108      	cbz	r0, 2f6d8 <nrf_cloud_fota_endpoint_set+0x50>
	reset_topics();
   2f6d4:	f7ff fd8c 	bl	2f1f0 <reset_topics>
}
   2f6d8:	4620      	mov	r0, r4
   2f6da:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2f6dc:	f06f 0415 	mvn.w	r4, #21
   2f6e0:	e7fa      	b.n	2f6d8 <nrf_cloud_fota_endpoint_set+0x50>
   2f6e2:	bf00      	nop
   2f6e4:	2001a198 	.word	0x2001a198
   2f6e8:	200146c8 	.word	0x200146c8
   2f6ec:	0004a45f 	.word	0x0004a45f
   2f6f0:	200146e0 	.word	0x200146e0
   2f6f4:	0004a469 	.word	0x0004a469
   2f6f8:	200146d4 	.word	0x200146d4
   2f6fc:	0004a476 	.word	0x0004a476

0002f700 <nrf_cloud_fota_endpoint_set_and_report>:
{
   2f700:	b510      	push	{r4, lr}
	int ret = nrf_cloud_fota_endpoint_set(client, client_id, endpoint);
   2f702:	f7ff ffc1 	bl	2f688 <nrf_cloud_fota_endpoint_set>
	if (ret) {
   2f706:	4604      	mov	r4, r0
   2f708:	b130      	cbz	r0, 2f718 <nrf_cloud_fota_endpoint_set_and_report+0x18>
		LOG_ERR("Failed to set FOTA endpoint: %d", ret);
   2f70a:	4602      	mov	r2, r0
   2f70c:	2145      	movs	r1, #69	; 0x45
   2f70e:	4805      	ldr	r0, [pc, #20]	; (2f724 <nrf_cloud_fota_endpoint_set_and_report+0x24>)
   2f710:	f00d f9f6 	bl	3cb00 <z_log_minimal_printk>
}
   2f714:	4620      	mov	r0, r4
   2f716:	bd10      	pop	{r4, pc}
	ret = report_validated_job_status();
   2f718:	f7ff fe54 	bl	2f3c4 <report_validated_job_status>
	if (ret > 0) {
   2f71c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   2f720:	e7f8      	b.n	2f714 <nrf_cloud_fota_endpoint_set_and_report+0x14>
   2f722:	bf00      	nop
   2f724:	0004a480 	.word	0x0004a480

0002f728 <nrf_cloud_fota_endpoint_clear>:
	client_mqtt = NULL;
   2f728:	2200      	movs	r2, #0
   2f72a:	4b02      	ldr	r3, [pc, #8]	; (2f734 <nrf_cloud_fota_endpoint_clear+0xc>)
   2f72c:	601a      	str	r2, [r3, #0]
	reset_topics();
   2f72e:	f7ff bd5f 	b.w	2f1f0 <reset_topics>
   2f732:	bf00      	nop
   2f734:	2001a198 	.word	0x2001a198

0002f738 <nrf_cloud_fota_subscribe>:
{
   2f738:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   2f73a:	466b      	mov	r3, sp
   2f73c:	4a0a      	ldr	r2, [pc, #40]	; (2f768 <nrf_cloud_fota_subscribe+0x30>)
   2f73e:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2f742:	4a0a      	ldr	r2, [pc, #40]	; (2f76c <nrf_cloud_fota_subscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   2f744:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2f748:	6851      	ldr	r1, [r2, #4]
   2f74a:	b149      	cbz	r1, 2f760 <nrf_cloud_fota_subscribe+0x28>
   2f74c:	6812      	ldr	r2, [r2, #0]
   2f74e:	b13a      	cbz	r2, 2f760 <nrf_cloud_fota_subscribe+0x28>
	return mqtt_subscribe(client_mqtt, &sub_list);
   2f750:	4619      	mov	r1, r3
   2f752:	4b07      	ldr	r3, [pc, #28]	; (2f770 <nrf_cloud_fota_subscribe+0x38>)
   2f754:	6818      	ldr	r0, [r3, #0]
   2f756:	f00e fe15 	bl	3e384 <mqtt_subscribe>
}
   2f75a:	b003      	add	sp, #12
   2f75c:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   2f760:	f06f 000d 	mvn.w	r0, #13
   2f764:	e7f9      	b.n	2f75a <nrf_cloud_fota_subscribe+0x22>
   2f766:	bf00      	nop
   2f768:	0004282c 	.word	0x0004282c
   2f76c:	200146c8 	.word	0x200146c8
   2f770:	2001a198 	.word	0x2001a198

0002f774 <nrf_cloud_fota_unsubscribe>:
{
   2f774:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   2f776:	466b      	mov	r3, sp
   2f778:	4a0a      	ldr	r2, [pc, #40]	; (2f7a4 <nrf_cloud_fota_unsubscribe+0x30>)
   2f77a:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2f77e:	4a0a      	ldr	r2, [pc, #40]	; (2f7a8 <nrf_cloud_fota_unsubscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   2f780:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2f784:	6851      	ldr	r1, [r2, #4]
   2f786:	b149      	cbz	r1, 2f79c <nrf_cloud_fota_unsubscribe+0x28>
   2f788:	6812      	ldr	r2, [r2, #0]
   2f78a:	b13a      	cbz	r2, 2f79c <nrf_cloud_fota_unsubscribe+0x28>
	return mqtt_unsubscribe(client_mqtt, &sub_list);
   2f78c:	4619      	mov	r1, r3
   2f78e:	4b07      	ldr	r3, [pc, #28]	; (2f7ac <nrf_cloud_fota_unsubscribe+0x38>)
   2f790:	6818      	ldr	r0, [r3, #0]
   2f792:	f00e fe1d 	bl	3e3d0 <mqtt_unsubscribe>
}
   2f796:	b003      	add	sp, #12
   2f798:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   2f79c:	f06f 000d 	mvn.w	r0, #13
   2f7a0:	e7f9      	b.n	2f796 <nrf_cloud_fota_unsubscribe+0x22>
   2f7a2:	bf00      	nop
   2f7a4:	00042834 	.word	0x00042834
   2f7a8:	200146c8 	.word	0x200146c8
   2f7ac:	2001a198 	.word	0x2001a198

0002f7b0 <nrf_cloud_fota_uninit>:
	return current_fota.parsed_payload != NULL;
   2f7b0:	4b09      	ldr	r3, [pc, #36]	; (2f7d8 <nrf_cloud_fota_uninit+0x28>)
{
   2f7b2:	b510      	push	{r4, lr}
	if (nrf_cloud_fota_is_active()) {
   2f7b4:	681c      	ldr	r4, [r3, #0]
   2f7b6:	b95c      	cbnz	r4, 2f7d0 <nrf_cloud_fota_uninit+0x20>
	event_cb = NULL;
   2f7b8:	4b08      	ldr	r3, [pc, #32]	; (2f7dc <nrf_cloud_fota_uninit+0x2c>)
   2f7ba:	601c      	str	r4, [r3, #0]
	initialized = false;
   2f7bc:	4b08      	ldr	r3, [pc, #32]	; (2f7e0 <nrf_cloud_fota_uninit+0x30>)
   2f7be:	701c      	strb	r4, [r3, #0]
	(void)nrf_cloud_fota_unsubscribe();
   2f7c0:	f7ff ffd8 	bl	2f774 <nrf_cloud_fota_unsubscribe>
	reset_topics();
   2f7c4:	f7ff fd14 	bl	2f1f0 <reset_topics>
	cleanup_job(&current_fota);
   2f7c8:	f7ff fe46 	bl	2f458 <cleanup_job.constprop.0>
	return 0;
   2f7cc:	4620      	mov	r0, r4
}
   2f7ce:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2f7d0:	f06f 000f 	mvn.w	r0, #15
   2f7d4:	e7fb      	b.n	2f7ce <nrf_cloud_fota_uninit+0x1e>
   2f7d6:	bf00      	nop
   2f7d8:	2001a19c 	.word	0x2001a19c
   2f7dc:	2001a1c4 	.word	0x2001a1c4
   2f7e0:	2001d2d1 	.word	0x2001d2d1

0002f7e4 <nrf_cloud_fota_update_check>:

int nrf_cloud_fota_update_check(void)
{
   2f7e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (client_mqtt == NULL) {
   2f7e6:	4b0e      	ldr	r3, [pc, #56]	; (2f820 <nrf_cloud_fota_update_check+0x3c>)
   2f7e8:	681b      	ldr	r3, [r3, #0]
   2f7ea:	b193      	cbz	r3, 2f812 <nrf_cloud_fota_update_check+0x2e>
		return -ENXIO;
	} else if (topic_req.topic.utf8 == NULL) {
   2f7ec:	4a0d      	ldr	r2, [pc, #52]	; (2f824 <nrf_cloud_fota_update_check+0x40>)
   2f7ee:	6813      	ldr	r3, [r2, #0]
   2f7f0:	b193      	cbz	r3, 2f818 <nrf_cloud_fota_update_check+0x34>
		.message_id = NCT_MSG_ID_FOTA_REQUEST,
		.dup_flag = 0,
		.retain_flag = 0,
	};

	param.message.topic = topic_req;
   2f7f2:	ca07      	ldmia	r2, {r0, r1, r2}
   2f7f4:	466b      	mov	r3, sp
   2f7f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   2f7fa:	4a0b      	ldr	r2, [pc, #44]	; (2f828 <nrf_cloud_fota_update_check+0x44>)
	struct mqtt_publish_param param = {
   2f7fc:	2104      	movs	r1, #4
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   2f7fe:	9203      	str	r2, [sp, #12]
	struct mqtt_publish_param param = {
   2f800:	22c9      	movs	r2, #201	; 0xc9
	param.message.payload.len = sizeof(JOB_REQUEST_LATEST_PAYLOAD)-1;

	return publish(&param);
   2f802:	4618      	mov	r0, r3
	struct mqtt_publish_param param = {
   2f804:	e9cd 1204 	strd	r1, r2, [sp, #16]
	return publish(&param);
   2f808:	f7ff fc90 	bl	2f12c <publish>
}
   2f80c:	b007      	add	sp, #28
   2f80e:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENXIO;
   2f812:	f06f 0005 	mvn.w	r0, #5
   2f816:	e7f9      	b.n	2f80c <nrf_cloud_fota_update_check+0x28>
		return -EHOSTUNREACH;
   2f818:	f06f 0075 	mvn.w	r0, #117	; 0x75
   2f81c:	e7f6      	b.n	2f80c <nrf_cloud_fota_update_check+0x28>
   2f81e:	bf00      	nop
   2f820:	2001a198 	.word	0x2001a198
   2f824:	200146d4 	.word	0x200146d4
   2f828:	0004a4a5 	.word	0x0004a4a5

0002f82c <nrf_cloud_fota_mqtt_evt_handler>:

	return 0;
}

int nrf_cloud_fota_mqtt_evt_handler(const struct mqtt_evt *evt)
{
   2f82c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2f830:	4ba4      	ldr	r3, [pc, #656]	; (2fac4 <nrf_cloud_fota_mqtt_evt_handler+0x298>)
{
   2f832:	4606      	mov	r6, r0
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2f834:	6818      	ldr	r0, [r3, #0]
{
   2f836:	b085      	sub	sp, #20
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2f838:	2800      	cmp	r0, #0
   2f83a:	f000 8141 	beq.w	2fac0 <nrf_cloud_fota_mqtt_evt_handler+0x294>
   2f83e:	685b      	ldr	r3, [r3, #4]
   2f840:	2b00      	cmp	r3, #0
   2f842:	f000 813d 	beq.w	2fac0 <nrf_cloud_fota_mqtt_evt_handler+0x294>
	    sub_topics[SUB_TOPIC_IDX_RCV].topic.size == 0) {
		/* Ignore MQTT until a topic has been set */
		return 1;
	}

	switch (evt->type) {
   2f846:	f896 9000 	ldrb.w	r9, [r6]
   2f84a:	f1b9 0f09 	cmp.w	r9, #9
   2f84e:	f200 80e4 	bhi.w	2fa1a <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
   2f852:	e8df f019 	tbh	[pc, r9, lsl #1]
   2f856:	0135      	.short	0x0135
   2f858:	000a0135 	.word	0x000a0135
   2f85c:	01350114 	.word	0x01350114
   2f860:	01350135 	.word	0x01350135
   2f864:	010f0109 	.word	0x010f0109
   2f868:	0135      	.short	0x0135
	struct mqtt_puback_param ack = {
   2f86a:	8b33      	ldrh	r3, [r6, #24]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   2f86c:	6871      	ldr	r1, [r6, #4]
	struct mqtt_puback_param ack = {
   2f86e:	f8ad 300c 	strh.w	r3, [sp, #12]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   2f872:	f011 fff9 	bl	41868 <strstr>
   2f876:	2800      	cmp	r0, #0
   2f878:	f000 8122 	beq.w	2fac0 <nrf_cloud_fota_mqtt_evt_handler+0x294>
	payload = nrf_cloud_calloc(p->message.payload.len + 1, 1);
   2f87c:	2101      	movs	r1, #1
   2f87e:	6970      	ldr	r0, [r6, #20]
   2f880:	4408      	add	r0, r1
   2f882:	f011 fd31 	bl	412e8 <k_calloc>
	if (!payload) {
   2f886:	4680      	mov	r8, r0
   2f888:	bb38      	cbnz	r0, 2f8da <nrf_cloud_fota_mqtt_evt_handler+0xae>
		LOG_ERR("Unable to allocate memory for job");
   2f88a:	2145      	movs	r1, #69	; 0x45
   2f88c:	488e      	ldr	r0, [pc, #568]	; (2fac8 <nrf_cloud_fota_mqtt_evt_handler+0x29c>)
   2f88e:	f00d f937 	bl	3cb00 <z_log_minimal_printk>
	bool skip = false;
   2f892:	4647      	mov	r7, r8
		ret = -ENOMEM;
   2f894:	f06f 040b 	mvn.w	r4, #11
	if (p->message.topic.qos == MQTT_QOS_0_AT_MOST_ONCE) {
   2f898:	7b33      	ldrb	r3, [r6, #12]
   2f89a:	b173      	cbz	r3, 2f8ba <nrf_cloud_fota_mqtt_evt_handler+0x8e>
		int ack_res = mqtt_publish_qos1_ack(client_mqtt, &ack);
   2f89c:	4b8b      	ldr	r3, [pc, #556]	; (2facc <nrf_cloud_fota_mqtt_evt_handler+0x2a0>)
   2f89e:	a903      	add	r1, sp, #12
   2f8a0:	6818      	ldr	r0, [r3, #0]
   2f8a2:	f00e fd21 	bl	3e2e8 <mqtt_publish_qos1_ack>
		if (ack_res) {
   2f8a6:	4605      	mov	r5, r0
   2f8a8:	b138      	cbz	r0, 2f8ba <nrf_cloud_fota_mqtt_evt_handler+0x8e>
			LOG_ERR("MQTT ACK failed: %d", ack_res);
   2f8aa:	4602      	mov	r2, r0
   2f8ac:	2145      	movs	r1, #69	; 0x45
   2f8ae:	4888      	ldr	r0, [pc, #544]	; (2fad0 <nrf_cloud_fota_mqtt_evt_handler+0x2a4>)
   2f8b0:	f00d f926 	bl	3cb00 <z_log_minimal_printk>
			if (!ret) {
   2f8b4:	2c00      	cmp	r4, #0
   2f8b6:	bf08      	it	eq
   2f8b8:	462c      	moveq	r4, r5
	if (skip || job_info->type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f8ba:	b927      	cbnz	r7, 2f8c6 <nrf_cloud_fota_mqtt_evt_handler+0x9a>
   2f8bc:	4d85      	ldr	r5, [pc, #532]	; (2fad4 <nrf_cloud_fota_mqtt_evt_handler+0x2a8>)
   2f8be:	7a2a      	ldrb	r2, [r5, #8]
   2f8c0:	2a03      	cmp	r2, #3
   2f8c2:	f040 8095 	bne.w	2f9f0 <nrf_cloud_fota_mqtt_evt_handler+0x1c4>
		if (payload_array) {
   2f8c6:	f1b8 0f00 	cmp.w	r8, #0
   2f8ca:	d002      	beq.n	2f8d2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
			cJSON_Delete(payload_array);
   2f8cc:	4640      	mov	r0, r8
   2f8ce:	f002 fb45 	bl	31f5c <cJSON_Delete>
		return 1;
	break;
	}

	return 0;
}
   2f8d2:	4620      	mov	r0, r4
   2f8d4:	b005      	add	sp, #20
   2f8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = mqtt_readall_publish_payload(client_mqtt, payload,
   2f8da:	4b7c      	ldr	r3, [pc, #496]	; (2facc <nrf_cloud_fota_mqtt_evt_handler+0x2a0>)
   2f8dc:	4601      	mov	r1, r0
   2f8de:	6972      	ldr	r2, [r6, #20]
   2f8e0:	6818      	ldr	r0, [r3, #0]
   2f8e2:	f00e fe27 	bl	3e534 <mqtt_readall_publish_payload>
	if (ret) {
   2f8e6:	4604      	mov	r4, r0
   2f8e8:	b138      	cbz	r0, 2f8fa <nrf_cloud_fota_mqtt_evt_handler+0xce>
		LOG_ERR("Error reading MQTT payload: %d", ret);
   2f8ea:	4602      	mov	r2, r0
   2f8ec:	2145      	movs	r1, #69	; 0x45
   2f8ee:	487a      	ldr	r0, [pc, #488]	; (2fad8 <nrf_cloud_fota_mqtt_evt_handler+0x2ac>)
   2f8f0:	f00d f906 	bl	3cb00 <z_log_minimal_printk>
		cJSON_Delete(array);
   2f8f4:	2500      	movs	r5, #0
	bool skip = false;
   2f8f6:	462f      	mov	r7, r5
   2f8f8:	e06a      	b.n	2f9d0 <nrf_cloud_fota_mqtt_evt_handler+0x1a4>
	return current_fota.parsed_payload != NULL;
   2f8fa:	4f76      	ldr	r7, [pc, #472]	; (2fad4 <nrf_cloud_fota_mqtt_evt_handler+0x2a8>)
   2f8fc:	683b      	ldr	r3, [r7, #0]
	if (nrf_cloud_fota_is_active() && !ble_id) {
   2f8fe:	b133      	cbz	r3, 2f90e <nrf_cloud_fota_mqtt_evt_handler+0xe2>
		LOG_INF("Job in progress... skipping");
   2f900:	2149      	movs	r1, #73	; 0x49
   2f902:	4876      	ldr	r0, [pc, #472]	; (2fadc <nrf_cloud_fota_mqtt_evt_handler+0x2b0>)
   2f904:	f00d f8fc 	bl	3cb00 <z_log_minimal_printk>
	cJSON *payload_array = NULL;
   2f908:	4625      	mov	r5, r4
		skip = true;
   2f90a:	2701      	movs	r7, #1
   2f90c:	e060      	b.n	2f9d0 <nrf_cloud_fota_mqtt_evt_handler+0x1a4>
	cJSON *array = cJSON_Parse(payload_in);
   2f90e:	4640      	mov	r0, r8
   2f910:	f010 f913 	bl	3fb3a <cJSON_Parse>
	if (!array || !cJSON_IsArray(array)) {
   2f914:	4605      	mov	r5, r0
   2f916:	b990      	cbnz	r0, 2f93e <nrf_cloud_fota_mqtt_evt_handler+0x112>
		LOG_ERR("Invalid JSON array");
   2f918:	2145      	movs	r1, #69	; 0x45
   2f91a:	4871      	ldr	r0, [pc, #452]	; (2fae0 <nrf_cloud_fota_mqtt_evt_handler+0x2b4>)
   2f91c:	f00d f8f0 	bl	3cb00 <z_log_minimal_printk>
		err = -EINVAL;
   2f920:	f06f 0415 	mvn.w	r4, #21
	memset(job_info, 0, sizeof(*job_info));
   2f924:	2214      	movs	r2, #20
   2f926:	2100      	movs	r1, #0
   2f928:	486e      	ldr	r0, [pc, #440]	; (2fae4 <nrf_cloud_fota_mqtt_evt_handler+0x2b8>)
   2f92a:	f011 fd83 	bl	41434 <memset>
	job_info->type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f92e:	2303      	movs	r3, #3
   2f930:	723b      	strb	r3, [r7, #8]
	if (array) {
   2f932:	2d00      	cmp	r5, #0
   2f934:	d0df      	beq.n	2f8f6 <nrf_cloud_fota_mqtt_evt_handler+0xca>
		cJSON_Delete(array);
   2f936:	4628      	mov	r0, r5
   2f938:	f002 fb10 	bl	31f5c <cJSON_Delete>
   2f93c:	e7da      	b.n	2f8f4 <nrf_cloud_fota_mqtt_evt_handler+0xc8>
	if (!array || !cJSON_IsArray(array)) {
   2f93e:	f010 fa2c 	bl	3fd9a <cJSON_IsArray>
   2f942:	2800      	cmp	r0, #0
   2f944:	d0e8      	beq.n	2f918 <nrf_cloud_fota_mqtt_evt_handler+0xec>
	temp = cJSON_PrintUnformatted(array);
   2f946:	4628      	mov	r0, r5
   2f948:	f010 f8fb 	bl	3fb42 <cJSON_PrintUnformatted>
	if (temp) {
   2f94c:	b108      	cbz	r0, 2f952 <nrf_cloud_fota_mqtt_evt_handler+0x126>
		cJSON_FreeString(temp);
   2f94e:	f010 fa2f 	bl	3fdb0 <cJSON_FreeString>
	if (get_string_from_array(array, RCV_ITEM_IDX_JOB_ID - offset,
   2f952:	2100      	movs	r1, #0
   2f954:	4628      	mov	r0, r5
   2f956:	4a64      	ldr	r2, [pc, #400]	; (2fae8 <nrf_cloud_fota_mqtt_evt_handler+0x2bc>)
   2f958:	f7fb f9e0 	bl	2ad1c <get_string_from_array>
   2f95c:	b130      	cbz	r0, 2f96c <nrf_cloud_fota_mqtt_evt_handler+0x140>
		LOG_ERR("Error parsing job info");
   2f95e:	2145      	movs	r1, #69	; 0x45
   2f960:	4862      	ldr	r0, [pc, #392]	; (2faec <nrf_cloud_fota_mqtt_evt_handler+0x2c0>)
   2f962:	f00d f8cd 	bl	3cb00 <z_log_minimal_printk>
	int err = -ENOMSG;
   2f966:	f06f 0422 	mvn.w	r4, #34	; 0x22
		goto cleanup;
   2f96a:	e7db      	b.n	2f924 <nrf_cloud_fota_mqtt_evt_handler+0xf8>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_HOST - offset,
   2f96c:	2103      	movs	r1, #3
   2f96e:	4628      	mov	r0, r5
   2f970:	4a5f      	ldr	r2, [pc, #380]	; (2faf0 <nrf_cloud_fota_mqtt_evt_handler+0x2c4>)
   2f972:	f7fb f9d3 	bl	2ad1c <get_string_from_array>
				  &job_info->id) ||
   2f976:	2800      	cmp	r0, #0
   2f978:	d1f1      	bne.n	2f95e <nrf_cloud_fota_mqtt_evt_handler+0x132>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_PATH - offset,
   2f97a:	2104      	movs	r1, #4
   2f97c:	4628      	mov	r0, r5
   2f97e:	4a5d      	ldr	r2, [pc, #372]	; (2faf4 <nrf_cloud_fota_mqtt_evt_handler+0x2c8>)
   2f980:	f7fb f9cc 	bl	2ad1c <get_string_from_array>
				  &job_info->host) ||
   2f984:	2800      	cmp	r0, #0
   2f986:	d1ea      	bne.n	2f95e <nrf_cloud_fota_mqtt_evt_handler+0x132>
	    get_number_from_array(array, RCV_ITEM_IDX_FW_TYPE - offset,
   2f988:	2101      	movs	r1, #1
   2f98a:	4628      	mov	r0, r5
   2f98c:	4a55      	ldr	r2, [pc, #340]	; (2fae4 <nrf_cloud_fota_mqtt_evt_handler+0x2b8>)
   2f98e:	f00f ff14 	bl	3f7ba <get_number_from_array>
				  &job_info->path) ||
   2f992:	2800      	cmp	r0, #0
   2f994:	d1e3      	bne.n	2f95e <nrf_cloud_fota_mqtt_evt_handler+0x132>
	    get_number_from_array(array, RCV_ITEM_IDX_FILE_SIZE - offset,
   2f996:	2102      	movs	r1, #2
   2f998:	4628      	mov	r0, r5
   2f99a:	4a57      	ldr	r2, [pc, #348]	; (2faf8 <nrf_cloud_fota_mqtt_evt_handler+0x2cc>)
   2f99c:	f00f ff0d 	bl	3f7ba <get_number_from_array>
				  (int *)&job_info->type) ||
   2f9a0:	4604      	mov	r4, r0
   2f9a2:	2800      	cmp	r0, #0
   2f9a4:	d1db      	bne.n	2f95e <nrf_cloud_fota_mqtt_evt_handler+0x132>
	job_id_len = strlen(job_info->id);
   2f9a6:	68f8      	ldr	r0, [r7, #12]
   2f9a8:	f7ed fc4b 	bl	1d242 <strlen>
	if (job_id_len > (NRF_CLOUD_FOTA_JOB_ID_SIZE - 1)) {
   2f9ac:	2824      	cmp	r0, #36	; 0x24
	job_id_len = strlen(job_info->id);
   2f9ae:	4602      	mov	r2, r0
	if (job_id_len > (NRF_CLOUD_FOTA_JOB_ID_SIZE - 1)) {
   2f9b0:	d905      	bls.n	2f9be <nrf_cloud_fota_mqtt_evt_handler+0x192>
		LOG_ERR("Job ID length: %d, exceeds allowed length: %d",
   2f9b2:	2324      	movs	r3, #36	; 0x24
   2f9b4:	2145      	movs	r1, #69	; 0x45
   2f9b6:	4851      	ldr	r0, [pc, #324]	; (2fafc <nrf_cloud_fota_mqtt_evt_handler+0x2d0>)
   2f9b8:	f00d f8a2 	bl	3cb00 <z_log_minimal_printk>
		goto cleanup;
   2f9bc:	e7d3      	b.n	2f966 <nrf_cloud_fota_mqtt_evt_handler+0x13a>
	    job_info->type >= NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f9be:	7a3a      	ldrb	r2, [r7, #8]
	if (job_info->type < NRF_CLOUD_FOTA_TYPE__FIRST ||
   2f9c0:	2a02      	cmp	r2, #2
   2f9c2:	d80a      	bhi.n	2f9da <nrf_cloud_fota_mqtt_evt_handler+0x1ae>
	if (ret == 0 && strcmp(last_job, job_info->id) == 0) {
   2f9c4:	68f9      	ldr	r1, [r7, #12]
   2f9c6:	484e      	ldr	r0, [pc, #312]	; (2fb00 <nrf_cloud_fota_mqtt_evt_handler+0x2d4>)
   2f9c8:	f7ed fc31 	bl	1d22e <strcmp>
   2f9cc:	b150      	cbz	r0, 2f9e4 <nrf_cloud_fota_mqtt_evt_handler+0x1b8>
	bool skip = false;
   2f9ce:	4627      	mov	r7, r4
		nrf_cloud_free(payload);
   2f9d0:	4640      	mov	r0, r8
   2f9d2:	f011 fc7e 	bl	412d2 <k_free>
   2f9d6:	46a8      	mov	r8, r5
   2f9d8:	e75e      	b.n	2f898 <nrf_cloud_fota_mqtt_evt_handler+0x6c>
		LOG_ERR("Invalid FOTA type: %d", job_info->type);
   2f9da:	2145      	movs	r1, #69	; 0x45
   2f9dc:	4849      	ldr	r0, [pc, #292]	; (2fb04 <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   2f9de:	f00d f88f 	bl	3cb00 <z_log_minimal_printk>
   2f9e2:	e7c0      	b.n	2f966 <nrf_cloud_fota_mqtt_evt_handler+0x13a>
		LOG_INF("Job %s already completed... skipping",
   2f9e4:	2149      	movs	r1, #73	; 0x49
   2f9e6:	4a46      	ldr	r2, [pc, #280]	; (2fb00 <nrf_cloud_fota_mqtt_evt_handler+0x2d4>)
   2f9e8:	4847      	ldr	r0, [pc, #284]	; (2fb08 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
   2f9ea:	f00d f889 	bl	3cb00 <z_log_minimal_printk>
   2f9ee:	e78c      	b.n	2f90a <nrf_cloud_fota_mqtt_evt_handler+0xde>
	switch (job->info.type) {
   2f9f0:	2a01      	cmp	r2, #1
		current_fota.parsed_payload = payload_array;
   2f9f2:	f8c5 8000 	str.w	r8, [r5]
	switch (job->info.type) {
   2f9f6:	d014      	beq.n	2fa22 <nrf_cloud_fota_mqtt_evt_handler+0x1f6>
   2f9f8:	f012 0ffd 	tst.w	r2, #253	; 0xfd
   2f9fc:	d00f      	beq.n	2fa1e <nrf_cloud_fota_mqtt_evt_handler+0x1f2>
		LOG_ERR("Unhandled FOTA type: %d", job->info.type);
   2f9fe:	2145      	movs	r1, #69	; 0x45
   2fa00:	4842      	ldr	r0, [pc, #264]	; (2fb0c <nrf_cloud_fota_mqtt_evt_handler+0x2e0>)
   2fa02:	f00d f87d 	bl	3cb00 <z_log_minimal_printk>
		return -EFTYPE;
   2fa06:	f06f 044e 	mvn.w	r4, #78	; 0x4e
		(void)send_job_update(&current_fota);
   2fa0a:	4832      	ldr	r0, [pc, #200]	; (2fad4 <nrf_cloud_fota_mqtt_evt_handler+0x2a8>)
   2fa0c:	f7ff fc5a 	bl	2f2c4 <send_job_update>
		if (ret) {
   2fa10:	2c00      	cmp	r4, #0
   2fa12:	f43f af5e 	beq.w	2f8d2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
			cleanup_job(&current_fota);
   2fa16:	f7ff fd1f 	bl	2f458 <cleanup_job.constprop.0>
   2fa1a:	2400      	movs	r4, #0
   2fa1c:	e759      	b.n	2f8d2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
		img_type = DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   2fa1e:	f04f 0901 	mov.w	r9, #1
	ret = fota_download_start_with_image_type(job->info.host,
   2fa22:	f240 63a4 	movw	r3, #1700	; 0x6a4
   2fa26:	f8cd 9004 	str.w	r9, [sp, #4]
   2fa2a:	9300      	str	r3, [sp, #0]
   2fa2c:	4a38      	ldr	r2, [pc, #224]	; (2fb10 <nrf_cloud_fota_mqtt_evt_handler+0x2e4>)
   2fa2e:	2300      	movs	r3, #0
   2fa30:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   2fa34:	f001 f90c 	bl	30c50 <fota_download_start_with_image_type>
	if (ret) {
   2fa38:	4604      	mov	r4, r0
   2fa3a:	b158      	cbz	r0, 2fa54 <nrf_cloud_fota_mqtt_evt_handler+0x228>
		LOG_ERR("Failed to start FOTA download: %d", ret);
   2fa3c:	4602      	mov	r2, r0
   2fa3e:	2145      	movs	r1, #69	; 0x45
   2fa40:	4834      	ldr	r0, [pc, #208]	; (2fb14 <nrf_cloud_fota_mqtt_evt_handler+0x2e8>)
   2fa42:	f00d f85d 	bl	3cb00 <z_log_minimal_printk>
		job->status = NRF_CLOUD_FOTA_FAILED;
   2fa46:	2002      	movs	r0, #2
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   2fa48:	2301      	movs	r3, #1
		job->status = NRF_CLOUD_FOTA_FAILED;
   2fa4a:	7128      	strb	r0, [r5, #4]
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   2fa4c:	772b      	strb	r3, [r5, #28]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   2fa4e:	f7ff fc17 	bl	2f280 <send_event.constprop.0>
   2fa52:	e7da      	b.n	2fa0a <nrf_cloud_fota_mqtt_evt_handler+0x1de>
		LOG_INF("Downloading update");
   2fa54:	4830      	ldr	r0, [pc, #192]	; (2fb18 <nrf_cloud_fota_mqtt_evt_handler+0x2ec>)
   2fa56:	2149      	movs	r1, #73	; 0x49
   2fa58:	f00d f852 	bl	3cb00 <z_log_minimal_printk>
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   2fa5c:	2307      	movs	r3, #7
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   2fa5e:	4620      	mov	r0, r4
		job->sent_dl_progress = 0;
   2fa60:	e9c5 4408 	strd	r4, r4, [r5, #32]
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   2fa64:	712b      	strb	r3, [r5, #4]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   2fa66:	e7f2      	b.n	2fa4e <nrf_cloud_fota_mqtt_evt_handler+0x222>
		if (evt->param.suback.message_id != NCT_MSG_ID_FOTA_SUB) {
   2fa68:	88b3      	ldrh	r3, [r6, #4]
   2fa6a:	2b67      	cmp	r3, #103	; 0x67
   2fa6c:	d128      	bne.n	2fac0 <nrf_cloud_fota_mqtt_evt_handler+0x294>
		nrf_cloud_fota_update_check();
   2fa6e:	f7ff feb9 	bl	2f7e4 <nrf_cloud_fota_update_check>
		break;
   2fa72:	e7d2      	b.n	2fa1a <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
		if (evt->param.unsuback.message_id != NCT_MSG_ID_FOTA_UNSUB) {
   2fa74:	88b4      	ldrh	r4, [r6, #4]
   2fa76:	3c99      	subs	r4, #153	; 0x99
   2fa78:	bf18      	it	ne
   2fa7a:	2401      	movne	r4, #1
   2fa7c:	e729      	b.n	2f8d2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
		switch (evt->param.puback.message_id) {
   2fa7e:	88b4      	ldrh	r4, [r6, #4]
   2fa80:	f5b4 7f97 	cmp.w	r4, #302	; 0x12e
   2fa84:	d00c      	beq.n	2faa0 <nrf_cloud_fota_mqtt_evt_handler+0x274>
   2fa86:	d805      	bhi.n	2fa94 <nrf_cloud_fota_mqtt_evt_handler+0x268>
		return 1;
   2fa88:	3cc9      	subs	r4, #201	; 0xc9
   2fa8a:	2c01      	cmp	r4, #1
   2fa8c:	bf94      	ite	ls
   2fa8e:	2400      	movls	r4, #0
   2fa90:	2401      	movhi	r4, #1
   2fa92:	e71e      	b.n	2f8d2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
   2fa94:	f240 102f 	movw	r0, #303	; 0x12f
   2fa98:	1a24      	subs	r4, r4, r0
   2fa9a:	bf18      	it	ne
   2fa9c:	2401      	movne	r4, #1
   2fa9e:	e718      	b.n	2f8d2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
		switch (saved_job.validate) {
   2faa0:	4b1e      	ldr	r3, [pc, #120]	; (2fb1c <nrf_cloud_fota_mqtt_evt_handler+0x2f0>)
   2faa2:	7818      	ldrb	r0, [r3, #0]
   2faa4:	2801      	cmp	r0, #1
   2faa6:	d008      	beq.n	2faba <nrf_cloud_fota_mqtt_evt_handler+0x28e>
   2faa8:	3802      	subs	r0, #2
   2faaa:	2802      	cmp	r0, #2
   2faac:	d8b5      	bhi.n	2fa1a <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
			save_validate_status(saved_job.id, saved_job.type,
   2faae:	2205      	movs	r2, #5
   2fab0:	7859      	ldrb	r1, [r3, #1]
   2fab2:	1c98      	adds	r0, r3, #2
   2fab4:	f7ff fb4e 	bl	2f154 <save_validate_status>
			break;
   2fab8:	e7af      	b.n	2fa1a <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
			send_event(NRF_CLOUD_FOTA_EVT_DONE, &current_fota);
   2faba:	f7ff fbe1 	bl	2f280 <send_event.constprop.0>
			break;
   2fabe:	e7ac      	b.n	2fa1a <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
		return 1;
   2fac0:	2401      	movs	r4, #1
   2fac2:	e706      	b.n	2f8d2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
   2fac4:	200146c8 	.word	0x200146c8
   2fac8:	0004a4aa 	.word	0x0004a4aa
   2facc:	2001a198 	.word	0x2001a198
   2fad0:	0004a5c2 	.word	0x0004a5c2
   2fad4:	2001a19c 	.word	0x2001a19c
   2fad8:	0004a4d1 	.word	0x0004a4d1
   2fadc:	0004a4f5 	.word	0x0004a4f5
   2fae0:	0004a516 	.word	0x0004a516
   2fae4:	2001a1a4 	.word	0x2001a1a4
   2fae8:	2001a1a8 	.word	0x2001a1a8
   2faec:	0004a52e 	.word	0x0004a52e
   2faf0:	2001a1ac 	.word	0x2001a1ac
   2faf4:	2001a1b0 	.word	0x2001a1b0
   2faf8:	2001a1b4 	.word	0x2001a1b4
   2fafc:	0004a54a 	.word	0x0004a54a
   2fb00:	2001d2d2 	.word	0x2001d2d2
   2fb04:	0004a57d 	.word	0x0004a57d
   2fb08:	0004a598 	.word	0x0004a598
   2fb0c:	0004a5db 	.word	0x0004a5db
   2fb10:	01010001 	.word	0x01010001
   2fb14:	0004a5f8 	.word	0x0004a5f8
   2fb18:	0004a61f 	.word	0x0004a61f
   2fb1c:	20014c47 	.word	0x20014c47

0002fb20 <nrf_cloud_bootloader_fota_slot_set>:
#include <net/nrf_cloud.h>

LOG_MODULE_REGISTER(nrf_cloud_fota_common, CONFIG_NRF_CLOUD_LOG_LEVEL);

int nrf_cloud_bootloader_fota_slot_set(struct nrf_cloud_settings_fota_job * const job)
{
   2fb20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err = -ENOTSUP;

	if (!job) {
   2fb22:	4605      	mov	r5, r0
   2fb24:	b318      	cbz	r0, 2fb6e <nrf_cloud_bootloader_fota_slot_set+0x4e>
		return -EINVAL;
	}

	/* Only set the slot flag once for bootloader updates */
	if (job->type == NRF_CLOUD_FOTA_BOOTLOADER &&
   2fb26:	7843      	ldrb	r3, [r0, #1]
   2fb28:	2b02      	cmp	r3, #2
   2fb2a:	d123      	bne.n	2fb74 <nrf_cloud_bootloader_fota_slot_set+0x54>
   2fb2c:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   2fb30:	07db      	lsls	r3, r3, #31
   2fb32:	d41f      	bmi.n	2fb74 <nrf_cloud_bootloader_fota_slot_set+0x54>
	    !(job->bl_flags & NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET)) {
		bool s0_active;

#if defined(CONFIG_FOTA_DOWNLOAD)
		err = fota_download_s0_active_get(&s0_active);
   2fb34:	f10d 0007 	add.w	r0, sp, #7
   2fb38:	f00f fe86 	bl	3f848 <fota_download_s0_active_get>
#endif

		if (err) {
   2fb3c:	4604      	mov	r4, r0
   2fb3e:	b138      	cbz	r0, 2fb50 <nrf_cloud_bootloader_fota_slot_set+0x30>
			LOG_ERR("Unable to determine active B1 slot, error: %d", err);
   2fb40:	4602      	mov	r2, r0
   2fb42:	2145      	movs	r1, #69	; 0x45
   2fb44:	480c      	ldr	r0, [pc, #48]	; (2fb78 <nrf_cloud_bootloader_fota_slot_set+0x58>)
   2fb46:	f00c ffdb 	bl	3cb00 <z_log_minimal_printk>

		job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET;
	}

	return 0;
}
   2fb4a:	4620      	mov	r0, r4
   2fb4c:	b003      	add	sp, #12
   2fb4e:	bd30      	pop	{r4, r5, pc}
		if (s0_active) {
   2fb50:	f89d 2007 	ldrb.w	r2, [sp, #7]
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   2fb54:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
		if (s0_active) {
   2fb58:	b132      	cbz	r2, 2fb68 <nrf_cloud_bootloader_fota_slot_set+0x48>
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   2fb5a:	f043 0302 	orr.w	r3, r3, #2
		job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET;
   2fb5e:	f043 0301 	orr.w	r3, r3, #1
   2fb62:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
   2fb66:	e7f0      	b.n	2fb4a <nrf_cloud_bootloader_fota_slot_set+0x2a>
			job->bl_flags &= ~NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   2fb68:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   2fb6c:	e7f7      	b.n	2fb5e <nrf_cloud_bootloader_fota_slot_set+0x3e>
		return -EINVAL;
   2fb6e:	f06f 0415 	mvn.w	r4, #21
   2fb72:	e7ea      	b.n	2fb4a <nrf_cloud_bootloader_fota_slot_set+0x2a>
	return 0;
   2fb74:	2400      	movs	r4, #0
   2fb76:	e7e8      	b.n	2fb4a <nrf_cloud_bootloader_fota_slot_set+0x2a>
   2fb78:	0004a6d0 	.word	0x0004a6d0

0002fb7c <nrf_cloud_pending_fota_job_process>:

int nrf_cloud_pending_fota_job_process(struct nrf_cloud_settings_fota_job * const job,
				       bool * const reboot_required)
{
   2fb7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2fb80:	460f      	mov	r7, r1
	if (!job || !reboot_required) {
   2fb82:	4605      	mov	r5, r0
   2fb84:	2800      	cmp	r0, #0
   2fb86:	f000 8085 	beq.w	2fc94 <nrf_cloud_pending_fota_job_process+0x118>
   2fb8a:	2900      	cmp	r1, #0
   2fb8c:	f000 8082 	beq.w	2fc94 <nrf_cloud_pending_fota_job_process+0x118>
		return -EINVAL;
	}

	if (job->validate != NRF_CLOUD_FOTA_VALIDATE_PENDING) {
   2fb90:	f890 8000 	ldrb.w	r8, [r0]
   2fb94:	f1b8 0f01 	cmp.w	r8, #1
   2fb98:	d17f      	bne.n	2fc9a <nrf_cloud_pending_fota_job_process+0x11e>
		return -ENODEV;
	}

	int err;

	if (job->type == NRF_CLOUD_FOTA_MODEM) {
   2fb9a:	7843      	ldrb	r3, [r0, #1]
   2fb9c:	2b01      	cmp	r3, #1
   2fb9e:	d124      	bne.n	2fbea <nrf_cloud_pending_fota_job_process+0x6e>
#if defined(CONFIG_NRF_MODEM_LIB)
		int modem_lib_init_result = nrf_modem_lib_get_init_ret();
   2fba0:	f7f5 fd80 	bl	256a4 <nrf_modem_lib_get_init_ret>

		switch (modem_lib_init_result) {
   2fba4:	4b3e      	ldr	r3, [pc, #248]	; (2fca0 <nrf_cloud_pending_fota_job_process+0x124>)
		int modem_lib_init_result = nrf_modem_lib_get_init_ret();
   2fba6:	4602      	mov	r2, r0
		switch (modem_lib_init_result) {
   2fba8:	4298      	cmp	r0, r3
   2fbaa:	dc08      	bgt.n	2fbbe <nrf_cloud_pending_fota_job_process+0x42>
   2fbac:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   2fbb0:	dd15      	ble.n	2fbde <nrf_cloud_pending_fota_job_process+0x62>
			break;
		case MODEM_DFU_RESULT_UUID_ERROR:
		case MODEM_DFU_RESULT_AUTH_ERROR:
		case MODEM_DFU_RESULT_HARDWARE_ERROR:
		case MODEM_DFU_RESULT_INTERNAL_ERROR:
			LOG_ERR("Modem FOTA error: %d", modem_lib_init_result);
   2fbb2:	2145      	movs	r1, #69	; 0x45
   2fbb4:	483b      	ldr	r0, [pc, #236]	; (2fca4 <nrf_cloud_pending_fota_job_process+0x128>)
   2fbb6:	f00c ffa3 	bl	3cb00 <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fbba:	2303      	movs	r3, #3
   2fbbc:	e007      	b.n	2fbce <nrf_cloud_pending_fota_job_process+0x52>
		switch (modem_lib_init_result) {
   2fbbe:	4b3a      	ldr	r3, [pc, #232]	; (2fca8 <nrf_cloud_pending_fota_job_process+0x12c>)
   2fbc0:	4298      	cmp	r0, r3
   2fbc2:	d10c      	bne.n	2fbde <nrf_cloud_pending_fota_job_process+0x62>
			LOG_INF("Modem FOTA update confirmed");
   2fbc4:	2149      	movs	r1, #73	; 0x49
   2fbc6:	4839      	ldr	r0, [pc, #228]	; (2fcac <nrf_cloud_pending_fota_job_process+0x130>)
   2fbc8:	f00c ff9a 	bl	3cb00 <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_PASS;
   2fbcc:	2302      	movs	r3, #2
			break;
		default:
			LOG_INF("Modem FOTA result unknown: %d", modem_lib_init_result);
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fbce:	702b      	strb	r3, [r5, #0]
			break;
		}
#else
		job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
#endif
		*reboot_required = true;
   2fbd0:	2301      	movs	r3, #1

		LOG_INF("Modem FOTA update complete on reboot");
   2fbd2:	2149      	movs	r1, #73	; 0x49
   2fbd4:	4836      	ldr	r0, [pc, #216]	; (2fcb0 <nrf_cloud_pending_fota_job_process+0x134>)
		*reboot_required = true;
   2fbd6:	703b      	strb	r3, [r7, #0]
#endif
		}

		if (err) {
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
			LOG_WRN("Bootloader FOTA update complete but not validated");
   2fbd8:	f00c ff92 	bl	3cb00 <z_log_minimal_printk>
   2fbdc:	e00b      	b.n	2fbf6 <nrf_cloud_pending_fota_job_process+0x7a>
			LOG_INF("Modem FOTA result unknown: %d", modem_lib_init_result);
   2fbde:	2149      	movs	r1, #73	; 0x49
   2fbe0:	4834      	ldr	r0, [pc, #208]	; (2fcb4 <nrf_cloud_pending_fota_job_process+0x138>)
   2fbe2:	f00c ff8d 	bl	3cb00 <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fbe6:	2304      	movs	r3, #4
   2fbe8:	e7f1      	b.n	2fbce <nrf_cloud_pending_fota_job_process+0x52>
	} else if (job->type == NRF_CLOUD_FOTA_APPLICATION) {
   2fbea:	b9eb      	cbnz	r3, 2fc28 <nrf_cloud_pending_fota_job_process+0xac>
		job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fbec:	2304      	movs	r3, #4
   2fbee:	7003      	strb	r3, [r0, #0]
		if (!boot_is_img_confirmed()) {
   2fbf0:	f00d fdcf 	bl	3d792 <boot_is_img_confirmed>
   2fbf4:	b108      	cbz	r0, 2fbfa <nrf_cloud_pending_fota_job_process+0x7e>
		}
	}

	return 0;
   2fbf6:	2400      	movs	r4, #0
   2fbf8:	e027      	b.n	2fc4a <nrf_cloud_pending_fota_job_process+0xce>
			err = boot_write_img_confirmed();
   2fbfa:	f00d fde1 	bl	3d7c0 <boot_write_img_confirmed>
			if (err) {
   2fbfe:	4604      	mov	r4, r0
   2fc00:	b158      	cbz	r0, 2fc1a <nrf_cloud_pending_fota_job_process+0x9e>
				LOG_ERR("Application FOTA update confirmation failed: %d",
   2fc02:	4602      	mov	r2, r0
   2fc04:	2145      	movs	r1, #69	; 0x45
   2fc06:	482c      	ldr	r0, [pc, #176]	; (2fcb8 <nrf_cloud_pending_fota_job_process+0x13c>)
   2fc08:	f00c ff7a 	bl	3cb00 <z_log_minimal_printk>
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fc0c:	2303      	movs	r3, #3
				LOG_INF("Rebooting to revert to previous version...");
   2fc0e:	2149      	movs	r1, #73	; 0x49
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fc10:	702b      	strb	r3, [r5, #0]
				LOG_INF("Rebooting to revert to previous version...");
   2fc12:	482a      	ldr	r0, [pc, #168]	; (2fcbc <nrf_cloud_pending_fota_job_process+0x140>)
				*reboot_required = true;
   2fc14:	f887 8000 	strb.w	r8, [r7]
   2fc18:	e7de      	b.n	2fbd8 <nrf_cloud_pending_fota_job_process+0x5c>
				LOG_INF("App FOTA update confirmed");
   2fc1a:	2149      	movs	r1, #73	; 0x49
   2fc1c:	4828      	ldr	r0, [pc, #160]	; (2fcc0 <nrf_cloud_pending_fota_job_process+0x144>)
				LOG_INF("Bootloader slot changed, FOTA update validated");
   2fc1e:	f00c ff6f 	bl	3cb00 <z_log_minimal_printk>
				job->validate = NRF_CLOUD_FOTA_VALIDATE_PASS;
   2fc22:	2302      	movs	r3, #2
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fc24:	702b      	strb	r3, [r5, #0]
   2fc26:	e010      	b.n	2fc4a <nrf_cloud_pending_fota_job_process+0xce>
	} else if (job->type == NRF_CLOUD_FOTA_BOOTLOADER) {
   2fc28:	2b02      	cmp	r3, #2
   2fc2a:	d1e4      	bne.n	2fbf6 <nrf_cloud_pending_fota_job_process+0x7a>
		if (!(job->bl_flags & NRF_CLOUD_FOTA_BL_STATUS_REBOOTED)) {
   2fc2c:	f890 6027 	ldrb.w	r6, [r0, #39]	; 0x27
   2fc30:	f016 0404 	ands.w	r4, r6, #4
   2fc34:	d10d      	bne.n	2fc52 <nrf_cloud_pending_fota_job_process+0xd6>
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_REBOOTED;
   2fc36:	f046 0604 	orr.w	r6, r6, #4
   2fc3a:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
			*reboot_required = true;
   2fc3e:	f881 8000 	strb.w	r8, [r1]
			LOG_INF("Bootloader FOTA update will be processed on reboot");
   2fc42:	4820      	ldr	r0, [pc, #128]	; (2fcc4 <nrf_cloud_pending_fota_job_process+0x148>)
   2fc44:	2149      	movs	r1, #73	; 0x49
   2fc46:	f00c ff5b 	bl	3cb00 <z_log_minimal_printk>
}
   2fc4a:	4620      	mov	r0, r4
   2fc4c:	b002      	add	sp, #8
   2fc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (job->bl_flags & NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET) {
   2fc52:	07f3      	lsls	r3, r6, #31
   2fc54:	d50a      	bpl.n	2fc6c <nrf_cloud_pending_fota_job_process+0xf0>
			err = fota_download_s0_active_get(&s0_active);
   2fc56:	f10d 0007 	add.w	r0, sp, #7
   2fc5a:	f00f fdf5 	bl	3f848 <fota_download_s0_active_get>
			if (err) {
   2fc5e:	4604      	mov	r4, r0
   2fc60:	b148      	cbz	r0, 2fc76 <nrf_cloud_pending_fota_job_process+0xfa>
				LOG_WRN("Active slot unknown, error: %d", err);
   2fc62:	4602      	mov	r2, r0
   2fc64:	2157      	movs	r1, #87	; 0x57
   2fc66:	4818      	ldr	r0, [pc, #96]	; (2fcc8 <nrf_cloud_pending_fota_job_process+0x14c>)
   2fc68:	f00c ff4a 	bl	3cb00 <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fc6c:	2304      	movs	r3, #4
			LOG_WRN("Bootloader FOTA update complete but not validated");
   2fc6e:	2157      	movs	r1, #87	; 0x57
   2fc70:	4816      	ldr	r0, [pc, #88]	; (2fccc <nrf_cloud_pending_fota_job_process+0x150>)
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fc72:	702b      	strb	r3, [r5, #0]
   2fc74:	e7b0      	b.n	2fbd8 <nrf_cloud_pending_fota_job_process+0x5c>
			} else if (s0_active != s0_prev) {
   2fc76:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2fc7a:	f3c6 0640 	ubfx	r6, r6, #1, #1
   2fc7e:	42b3      	cmp	r3, r6
   2fc80:	d002      	beq.n	2fc88 <nrf_cloud_pending_fota_job_process+0x10c>
				LOG_INF("Bootloader slot changed, FOTA update validated");
   2fc82:	2149      	movs	r1, #73	; 0x49
   2fc84:	4812      	ldr	r0, [pc, #72]	; (2fcd0 <nrf_cloud_pending_fota_job_process+0x154>)
   2fc86:	e7ca      	b.n	2fc1e <nrf_cloud_pending_fota_job_process+0xa2>
				LOG_WRN("Bootloader slot unchanged, FOTA update invalidated");
   2fc88:	2157      	movs	r1, #87	; 0x57
   2fc8a:	4812      	ldr	r0, [pc, #72]	; (2fcd4 <nrf_cloud_pending_fota_job_process+0x158>)
   2fc8c:	f00c ff38 	bl	3cb00 <z_log_minimal_printk>
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fc90:	2303      	movs	r3, #3
   2fc92:	e7c7      	b.n	2fc24 <nrf_cloud_pending_fota_job_process+0xa8>
		return -EINVAL;
   2fc94:	f06f 0415 	mvn.w	r4, #21
   2fc98:	e7d7      	b.n	2fc4a <nrf_cloud_pending_fota_job_process+0xce>
		return -ENODEV;
   2fc9a:	f06f 0412 	mvn.w	r4, #18
   2fc9e:	e7d4      	b.n	2fc4a <nrf_cloud_pending_fota_job_process+0xce>
   2fca0:	04400004 	.word	0x04400004
   2fca4:	0004a724 	.word	0x0004a724
   2fca8:	05500001 	.word	0x05500001
   2fcac:	0004a703 	.word	0x0004a703
   2fcb0:	0004a761 	.word	0x0004a761
   2fcb4:	0004a73e 	.word	0x0004a73e
   2fcb8:	0004a78b 	.word	0x0004a78b
   2fcbc:	0004a7c0 	.word	0x0004a7c0
   2fcc0:	0004a7f0 	.word	0x0004a7f0
   2fcc4:	0004a80f 	.word	0x0004a80f
   2fcc8:	0004a847 	.word	0x0004a847
   2fccc:	0004a8d7 	.word	0x0004a8d7
   2fcd0:	0004a86b 	.word	0x0004a86b
   2fcd4:	0004a89f 	.word	0x0004a89f

0002fcd8 <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   2fcd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   2fcda:	f640 03fc 	movw	r3, #2300	; 0x8fc
   2fcde:	f8d0 2918 	ldr.w	r2, [r0, #2328]	; 0x918
{
   2fce2:	4604      	mov	r4, r0
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   2fce4:	429a      	cmp	r2, r3
   2fce6:	d90a      	bls.n	2fcfe <fragment_evt_send+0x26>
   2fce8:	490d      	ldr	r1, [pc, #52]	; (2fd20 <fragment_evt_send+0x48>)
   2fcea:	480e      	ldr	r0, [pc, #56]	; (2fd24 <fragment_evt_send+0x4c>)
   2fcec:	f44f 72bd 	mov.w	r2, #378	; 0x17a
   2fcf0:	f00c fecc 	bl	3ca8c <assert_print>
   2fcf4:	f44f 71bd 	mov.w	r1, #378	; 0x17a
   2fcf8:	4809      	ldr	r0, [pc, #36]	; (2fd20 <fragment_evt_send+0x48>)
   2fcfa:	f00c fec0 	bl	3ca7e <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   2fcfe:	2300      	movs	r3, #0
   2fd00:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   2fd04:	f104 031c 	add.w	r3, r4, #28
	const struct download_client_evt evt = {
   2fd08:	9302      	str	r3, [sp, #8]
   2fd0a:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
			.len = client->offset,
		}
	};

	return client->callback(&evt);
   2fd0e:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	const struct download_client_evt evt = {
   2fd12:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   2fd14:	a801      	add	r0, sp, #4
   2fd16:	f8d4 3a50 	ldr.w	r3, [r4, #2640]	; 0xa50
   2fd1a:	4798      	blx	r3
}
   2fd1c:	b004      	add	sp, #16
   2fd1e:	bd10      	pop	{r4, pc}
   2fd20:	0004a924 	.word	0x0004a924
   2fd24:	0004409e 	.word	0x0004409e

0002fd28 <socket_send>:
{
   2fd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (timeout_ms <= 0) {
   2fd2c:	2a00      	cmp	r2, #0
{
   2fd2e:	4605      	mov	r5, r0
   2fd30:	460c      	mov	r4, r1
   2fd32:	b086      	sub	sp, #24
	if (timeout_ms <= 0) {
   2fd34:	dc06      	bgt.n	2fd44 <socket_send+0x1c>
	if (err) {
   2fd36:	2600      	movs	r6, #0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2fd38:	4637      	mov	r7, r6
		sent = send(client->fd, client->buf + off, len, 0);
   2fd3a:	f105 081c 	add.w	r8, r5, #28
	while (len) {
   2fd3e:	bb24      	cbnz	r4, 2fd8a <socket_send+0x62>
	return 0;
   2fd40:	4620      	mov	r0, r4
   2fd42:	e01f      	b.n	2fd84 <socket_send+0x5c>
		.tv_sec = (timeout_ms / 1000),
   2fd44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2fd48:	fb92 f1f3 	sdiv	r1, r2, r3
		.tv_usec = (timeout_ms % 1000) * 1000,
   2fd4c:	fb03 2211 	mls	r2, r3, r1, r2
   2fd50:	435a      	muls	r2, r3
		.tv_sec = (timeout_ms / 1000),
   2fd52:	17ce      	asrs	r6, r1, #31
   2fd54:	e9cd 1602 	strd	r1, r6, [sp, #8]
	err = set_snd_socket_timeout(client->fd, timeout);
   2fd58:	6800      	ldr	r0, [r0, #0]
	struct timeval timeo = {
   2fd5a:	9204      	str	r2, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2fd5c:	2310      	movs	r3, #16
   2fd5e:	2215      	movs	r2, #21
   2fd60:	9300      	str	r3, [sp, #0]
   2fd62:	2101      	movs	r1, #1
   2fd64:	ab02      	add	r3, sp, #8
   2fd66:	f00d fb0b 	bl	3d380 <z_impl_zsock_setsockopt>
	if (err) {
   2fd6a:	2800      	cmp	r0, #0
   2fd6c:	d0e3      	beq.n	2fd36 <socket_send+0xe>
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   2fd6e:	f00d fd06 	bl	3d77e <__errno>
   2fd72:	2157      	movs	r1, #87	; 0x57
   2fd74:	6802      	ldr	r2, [r0, #0]
   2fd76:	480c      	ldr	r0, [pc, #48]	; (2fda8 <socket_send+0x80>)
   2fd78:	f00c fec2 	bl	3cb00 <z_log_minimal_printk>
			return -errno;
   2fd7c:	f00d fcff 	bl	3d77e <__errno>
   2fd80:	6800      	ldr	r0, [r0, #0]
   2fd82:	4240      	negs	r0, r0
}
   2fd84:	b006      	add	sp, #24
   2fd86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sent = send(client->fd, client->buf + off, len, 0);
   2fd8a:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2fd8c:	2300      	movs	r3, #0
   2fd8e:	4622      	mov	r2, r4
   2fd90:	e9cd 7700 	strd	r7, r7, [sp]
   2fd94:	eb08 0106 	add.w	r1, r8, r6
   2fd98:	f00d fa46 	bl	3d228 <z_impl_zsock_sendto>
		if (sent < 0) {
   2fd9c:	2800      	cmp	r0, #0
   2fd9e:	dbed      	blt.n	2fd7c <socket_send+0x54>
		off += sent;
   2fda0:	4406      	add	r6, r0
		len -= sent;
   2fda2:	1a24      	subs	r4, r4, r0
   2fda4:	e7cb      	b.n	2fd3e <socket_send+0x16>
   2fda6:	bf00      	nop
   2fda8:	0004a969 	.word	0x0004a969

0002fdac <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   2fdac:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   2fdae:	4604      	mov	r4, r0
{
   2fdb0:	b089      	sub	sp, #36	; 0x24
	if (client == NULL || callback == NULL) {
   2fdb2:	b318      	cbz	r0, 2fdfc <download_client_init+0x50>
   2fdb4:	b311      	cbz	r1, 2fdfc <download_client_init+0x50>
		return -EINVAL;
	}

	client->fd = -1;
   2fdb6:	f04f 33ff 	mov.w	r3, #4294967295
   2fdba:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   2fdbc:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
   2fdc0:	f8c3 1a50 	str.w	r1, [r3, #2640]	; 0xa50
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2fdc4:	2200      	movs	r2, #0
   2fdc6:	2300      	movs	r3, #0
   2fdc8:	2500      	movs	r5, #0
   2fdca:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2fdce:	230e      	movs	r3, #14
   2fdd0:	9000      	str	r0, [sp, #0]
   2fdd2:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2fdd6:	f500 6125 	add.w	r1, r0, #2640	; 0xa50
   2fdda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2fdde:	e9cd 5501 	strd	r5, r5, [sp, #4]
   2fde2:	4b08      	ldr	r3, [pc, #32]	; (2fe04 <download_client_init+0x58>)
   2fde4:	f500 6018 	add.w	r0, r0, #2432	; 0x980
   2fde8:	f006 fb36 	bl	36458 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   2fdec:	f8c4 097c 	str.w	r0, [r4, #2428]	; 0x97c
	return z_impl_k_thread_name_set(thread, str);
   2fdf0:	4905      	ldr	r1, [pc, #20]	; (2fe08 <download_client_init+0x5c>)
   2fdf2:	f011 f8bf 	bl	40f74 <z_impl_k_thread_name_set>
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	k_thread_name_set(client->tid, "download_client");

	return 0;
   2fdf6:	4628      	mov	r0, r5
}
   2fdf8:	b009      	add	sp, #36	; 0x24
   2fdfa:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2fdfc:	f06f 0015 	mvn.w	r0, #21
   2fe00:	e7fa      	b.n	2fdf8 <download_client_init+0x4c>
   2fe02:	bf00      	nop
   2fe04:	0003023d 	.word	0x0003023d
   2fe08:	0004a995 	.word	0x0004a995

0002fe0c <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   2fe0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2fe10:	460f      	mov	r7, r1
   2fe12:	4616      	mov	r6, r2
	int err;

	if (client == NULL || host == NULL || config == NULL) {
   2fe14:	4604      	mov	r4, r0
{
   2fe16:	b0b8      	sub	sp, #224	; 0xe0
	if (client == NULL || host == NULL || config == NULL) {
   2fe18:	2800      	cmp	r0, #0
   2fe1a:	f000 81d2 	beq.w	301c2 <CONFIG_FLASH_LOAD_SIZE+0x1c2>
   2fe1e:	2900      	cmp	r1, #0
   2fe20:	f000 81cf 	beq.w	301c2 <CONFIG_FLASH_LOAD_SIZE+0x1c2>
   2fe24:	2a00      	cmp	r2, #0
   2fe26:	f000 81cc 	beq.w	301c2 <CONFIG_FLASH_LOAD_SIZE+0x1c2>
		return -EINVAL;
	}

	if (client->fd != -1) {
   2fe2a:	6803      	ldr	r3, [r0, #0]
   2fe2c:	3301      	adds	r3, #1
   2fe2e:	d17f      	bne.n	2ff30 <download_client_connect+0x124>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   2fe30:	f640 03fc 	movw	r3, #2300	; 0x8fc
   2fe34:	6892      	ldr	r2, [r2, #8]
   2fe36:	429a      	cmp	r2, r3
   2fe38:	d909      	bls.n	2fe4e <download_client_connect+0x42>
		LOG_ERR("The configured fragment size is larger than buffer");
   2fe3a:	2145      	movs	r1, #69	; 0x45
   2fe3c:	48b3      	ldr	r0, [pc, #716]	; (3010c <CONFIG_FLASH_LOAD_SIZE+0x10c>)
   2fe3e:	f00c fe5f 	bl	3cb00 <z_log_minimal_printk>
		return -E2BIG;
   2fe42:	f06f 0506 	mvn.w	r5, #6
	if (client->fd < 0) {
		return err;
	}

	return 0;
}
   2fe46:	4628      	mov	r0, r5
   2fe48:	b038      	add	sp, #224	; 0xe0
   2fe4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct addrinfo hints = {
   2fe4e:	2250      	movs	r2, #80	; 0x50
   2fe50:	2100      	movs	r1, #0
   2fe52:	a804      	add	r0, sp, #16
		err = host_lookup(host, AF_INET, config->pdn_id, &client->remote_addr);
   2fe54:	f896 8004 	ldrb.w	r8, [r6, #4]
	struct addrinfo hints = {
   2fe58:	f011 faec 	bl	41434 <memset>
   2fe5c:	2301      	movs	r3, #1
	err = url_parse_host(host, hostname, sizeof(hostname));
   2fe5e:	2280      	movs	r2, #128	; 0x80
   2fe60:	4638      	mov	r0, r7
   2fe62:	a918      	add	r1, sp, #96	; 0x60
	struct addrinfo hints = {
   2fe64:	9306      	str	r3, [sp, #24]
	err = url_parse_host(host, hostname, sizeof(hostname));
   2fe66:	f000 fb73 	bl	30550 <url_parse_host>
	if (err) {
   2fe6a:	4605      	mov	r5, r0
   2fe6c:	2800      	cmp	r0, #0
   2fe6e:	d1ea      	bne.n	2fe46 <download_client_connect+0x3a>
	if (pdn_id) {
   2fe70:	f1b8 0f00 	cmp.w	r8, #0
   2fe74:	d019      	beq.n	2feaa <download_client_connect+0x9e>
		hints.ai_flags = AI_PDNSERV;
   2fe76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		(void)snprintf(pdnserv, sizeof(pdnserv), "%d", pdn_id);
   2fe7a:	2104      	movs	r1, #4
   2fe7c:	4aa4      	ldr	r2, [pc, #656]	; (30110 <CONFIG_FLASH_LOAD_SIZE+0x110>)
		hints.ai_flags = AI_PDNSERV;
   2fe7e:	9305      	str	r3, [sp, #20]
		(void)snprintf(pdnserv, sizeof(pdnserv), "%d", pdn_id);
   2fe80:	a802      	add	r0, sp, #8
   2fe82:	4643      	mov	r3, r8
   2fe84:	f00a fc0e 	bl	3a6a4 <sniprintf>
	return zsock_getaddrinfo(host, service, hints, res);
   2fe88:	ab03      	add	r3, sp, #12
   2fe8a:	aa04      	add	r2, sp, #16
   2fe8c:	a902      	add	r1, sp, #8
   2fe8e:	a818      	add	r0, sp, #96	; 0x60
   2fe90:	f00d f968 	bl	3d164 <zsock_getaddrinfo>
   2fe94:	4605      	mov	r5, r0
	if (err) {
   2fe96:	b160      	cbz	r0, 2feb2 <download_client_connect+0xa6>
		LOG_WRN("Failed to resolve hostname %s on %s",
   2fe98:	2157      	movs	r1, #87	; 0x57
   2fe9a:	4b9e      	ldr	r3, [pc, #632]	; (30114 <CONFIG_FLASH_LOAD_SIZE+0x114>)
   2fe9c:	489e      	ldr	r0, [pc, #632]	; (30118 <CONFIG_FLASH_LOAD_SIZE+0x118>)
   2fe9e:	aa18      	add	r2, sp, #96	; 0x60
   2fea0:	f00c fe2e 	bl	3cb00 <z_log_minimal_printk>
		return -EHOSTUNREACH;
   2fea4:	f06f 0575 	mvn.w	r5, #117	; 0x75
   2fea8:	e7cd      	b.n	2fe46 <download_client_connect+0x3a>
   2feaa:	4601      	mov	r1, r0
   2feac:	ab03      	add	r3, sp, #12
   2feae:	aa04      	add	r2, sp, #16
   2feb0:	e7ed      	b.n	2fe8e <download_client_connect+0x82>
	*sa = *(ai->ai_addr);
   2feb2:	1d22      	adds	r2, r4, #4
   2feb4:	4690      	mov	r8, r2
   2feb6:	9803      	ldr	r0, [sp, #12]
   2feb8:	6983      	ldr	r3, [r0, #24]
   2feba:	f103 0118 	add.w	r1, r3, #24
   2febe:	f853 cb04 	ldr.w	ip, [r3], #4
   2fec2:	428b      	cmp	r3, r1
   2fec4:	f842 cb04 	str.w	ip, [r2], #4
   2fec8:	d1f9      	bne.n	2febe <download_client_connect+0xb2>
	zsock_freeaddrinfo(ai);
   2feca:	f00d f94d 	bl	3d168 <zsock_freeaddrinfo>
	client->config = *config;
   2fece:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   2fed2:	f604 1c2c 	addw	ip, r4, #2348	; 0x92c
   2fed6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	err = url_parse_proto(dl->host, &dl->proto, &type);
   2feda:	4638      	mov	r0, r7
	client->host = host;
   2fedc:	f8c4 7924 	str.w	r7, [r4, #2340]	; 0x924
	err = url_parse_proto(dl->host, &dl->proto, &type);
   2fee0:	aa03      	add	r2, sp, #12
   2fee2:	f604 113c 	addw	r1, r4, #2364	; 0x93c
   2fee6:	f000 fafd 	bl	304e4 <url_parse_proto>
	if (err) {
   2feea:	b150      	cbz	r0, 2ff02 <download_client_connect+0xf6>
		type = SOCK_STREAM;
   2feec:	2301      	movs	r3, #1
   2feee:	9303      	str	r3, [sp, #12]
		if (dl->config.sec_tag != -1) {
   2fef0:	f8d4 392c 	ldr.w	r3, [r4, #2348]	; 0x92c
   2fef4:	3301      	adds	r3, #1
			dl->proto = IPPROTO_TLS_1_2;
   2fef6:	bf14      	ite	ne
   2fef8:	f44f 7381 	movne.w	r3, #258	; 0x102
			dl->proto = IPPROTO_TCP;
   2fefc:	2306      	moveq	r3, #6
   2fefe:	f8c4 393c 	str.w	r3, [r4, #2364]	; 0x93c
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   2ff02:	f8d4 293c 	ldr.w	r2, [r4, #2364]	; 0x93c
   2ff06:	f422 7380 	bic.w	r3, r2, #256	; 0x100
   2ff0a:	2b11      	cmp	r3, #17
   2ff0c:	f000 8153 	beq.w	301b6 <CONFIG_FLASH_LOAD_SIZE+0x1b6>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   2ff10:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
		if (dl->config.sec_tag != -1) {
   2ff14:	f8d4 392c 	ldr.w	r3, [r4, #2348]	; 0x92c
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   2ff18:	d10c      	bne.n	2ff34 <download_client_connect+0x128>
		if (dl->config.sec_tag == -1) {
   2ff1a:	3301      	adds	r3, #1
   2ff1c:	d112      	bne.n	2ff44 <download_client_connect+0x138>
			LOG_WRN("No security tag provided for TLS/DTLS");
   2ff1e:	2157      	movs	r1, #87	; 0x57
   2ff20:	487e      	ldr	r0, [pc, #504]	; (3011c <CONFIG_FLASH_LOAD_SIZE+0x11c>)
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   2ff22:	f00c fded 	bl	3cb00 <z_log_minimal_printk>
		return -EINVAL;
   2ff26:	f06f 0515 	mvn.w	r5, #21
	if (client->fd < 0) {
   2ff2a:	6823      	ldr	r3, [r4, #0]
   2ff2c:	2b00      	cmp	r3, #0
   2ff2e:	db8a      	blt.n	2fe46 <download_client_connect+0x3a>
	return 0;
   2ff30:	2500      	movs	r5, #0
   2ff32:	e788      	b.n	2fe46 <download_client_connect+0x3a>
	if (dl->config.sec_tag == -1 && dl->config.set_tls_hostname) {
   2ff34:	3301      	adds	r3, #1
   2ff36:	d105      	bne.n	2ff44 <download_client_connect+0x138>
   2ff38:	f894 3938 	ldrb.w	r3, [r4, #2360]	; 0x938
   2ff3c:	b113      	cbz	r3, 2ff44 <download_client_connect+0x138>
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   2ff3e:	2157      	movs	r1, #87	; 0x57
   2ff40:	4877      	ldr	r0, [pc, #476]	; (30120 <CONFIG_FLASH_LOAD_SIZE+0x120>)
   2ff42:	e7ee      	b.n	2ff22 <download_client_connect+0x116>
	err = url_parse_port(dl->host, &port);
   2ff44:	f8d4 0924 	ldr.w	r0, [r4, #2340]	; 0x924
   2ff48:	a902      	add	r1, sp, #8
   2ff4a:	f000 fb39 	bl	305c0 <url_parse_port>
	if (err) {
   2ff4e:	b148      	cbz	r0, 2ff64 <download_client_connect+0x158>
		switch (dl->proto) {
   2ff50:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
   2ff54:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2ff58:	d034      	beq.n	2ffc4 <download_client_connect+0x1b8>
   2ff5a:	dc2c      	bgt.n	2ffb6 <download_client_connect+0x1aa>
   2ff5c:	2b06      	cmp	r3, #6
   2ff5e:	d036      	beq.n	2ffce <download_client_connect+0x1c2>
   2ff60:	2b11      	cmp	r3, #17
   2ff62:	d036      	beq.n	2ffd2 <download_client_connect+0x1c6>
	switch (dl->remote_addr.sa_family) {
   2ff64:	88a0      	ldrh	r0, [r4, #4]
   2ff66:	2801      	cmp	r0, #1
   2ff68:	d036      	beq.n	2ffd8 <download_client_connect+0x1cc>
   2ff6a:	2802      	cmp	r0, #2
   2ff6c:	f040 8126 	bne.w	301bc <CONFIG_FLASH_LOAD_SIZE+0x1bc>
		addrlen = sizeof(struct sockaddr_in6);
   2ff70:	2718      	movs	r7, #24
		SIN6(&dl->remote_addr)->sin6_port = htons(port);
   2ff72:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2ff76:	ba5b      	rev16	r3, r3
   2ff78:	80e3      	strh	r3, [r4, #6]
	if (dl->set_native_tls) {
   2ff7a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
   2ff7e:	f893 3a54 	ldrb.w	r3, [r3, #2644]	; 0xa54
   2ff82:	b11b      	cbz	r3, 2ff8c <download_client_connect+0x180>
		type |= SOCK_NATIVE_TLS;
   2ff84:	9b03      	ldr	r3, [sp, #12]
   2ff86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   2ff8a:	9303      	str	r3, [sp, #12]
	dl->fd = socket(dl->remote_addr.sa_family, type, dl->proto);
   2ff8c:	9903      	ldr	r1, [sp, #12]
   2ff8e:	f8d4 293c 	ldr.w	r2, [r4, #2364]	; 0x93c
	return z_impl_zsock_socket(family, type, proto);
   2ff92:	f7f1 fc8d 	bl	218b0 <z_impl_zsock_socket>
	if (dl->fd < 0) {
   2ff96:	2800      	cmp	r0, #0
   2ff98:	4606      	mov	r6, r0
	dl->fd = socket(dl->remote_addr.sa_family, type, dl->proto);
   2ff9a:	6020      	str	r0, [r4, #0]
	if (dl->fd < 0) {
   2ff9c:	da22      	bge.n	2ffe4 <download_client_connect+0x1d8>
		LOG_ERR("Failed to create socket, err %d", errno);
   2ff9e:	f00d fbee 	bl	3d77e <__errno>
   2ffa2:	2145      	movs	r1, #69	; 0x45
   2ffa4:	6802      	ldr	r2, [r0, #0]
   2ffa6:	485f      	ldr	r0, [pc, #380]	; (30124 <CONFIG_FLASH_LOAD_SIZE+0x124>)
   2ffa8:	f00c fdaa 	bl	3cb00 <z_log_minimal_printk>
		return -errno;
   2ffac:	f00d fbe7 	bl	3d77e <__errno>
   2ffb0:	6805      	ldr	r5, [r0, #0]
   2ffb2:	426d      	negs	r5, r5
   2ffb4:	e7b9      	b.n	2ff2a <download_client_connect+0x11e>
		switch (dl->proto) {
   2ffb6:	f240 1211 	movw	r2, #273	; 0x111
   2ffba:	4293      	cmp	r3, r2
   2ffbc:	d1d2      	bne.n	2ff64 <download_client_connect+0x158>
			port = 5684;
   2ffbe:	f241 6334 	movw	r3, #5684	; 0x1634
   2ffc2:	e001      	b.n	2ffc8 <download_client_connect+0x1bc>
			port = 443;
   2ffc4:	f240 13bb 	movw	r3, #443	; 0x1bb
			port = 5683;
   2ffc8:	f8ad 3008 	strh.w	r3, [sp, #8]
			break;
   2ffcc:	e7ca      	b.n	2ff64 <download_client_connect+0x158>
			port = 80;
   2ffce:	2350      	movs	r3, #80	; 0x50
   2ffd0:	e7fa      	b.n	2ffc8 <download_client_connect+0x1bc>
			port = 5683;
   2ffd2:	f241 6333 	movw	r3, #5683	; 0x1633
   2ffd6:	e7f7      	b.n	2ffc8 <download_client_connect+0x1bc>
		SIN(&dl->remote_addr)->sin_port = htons(port);
   2ffd8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		addrlen = sizeof(struct sockaddr_in);
   2ffdc:	2708      	movs	r7, #8
		SIN(&dl->remote_addr)->sin_port = htons(port);
   2ffde:	ba5b      	rev16	r3, r3
   2ffe0:	80e3      	strh	r3, [r4, #6]
		break;
   2ffe2:	e7ca      	b.n	2ff7a <download_client_connect+0x16e>
	if (dl->config.pdn_id) {
   2ffe4:	f894 9930 	ldrb.w	r9, [r4, #2352]	; 0x930
   2ffe8:	f1b9 0f00 	cmp.w	r9, #0
   2ffec:	d02a      	beq.n	30044 <CONFIG_FLASH_LOAD_SIZE+0x44>
	char buf[8] = {0};
   2ffee:	2300      	movs	r3, #0
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   2fff0:	2108      	movs	r1, #8
	char buf[8] = {0};
   2fff2:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   2fff6:	4a4c      	ldr	r2, [pc, #304]	; (30128 <CONFIG_FLASH_LOAD_SIZE+0x128>)
   2fff8:	464b      	mov	r3, r9
   2fffa:	a818      	add	r0, sp, #96	; 0x60
   2fffc:	f00a fb52 	bl	3a6a4 <sniprintf>
	LOG_INF("Binding to PDN ID: %s", log_strdup(buf));
   30000:	2149      	movs	r1, #73	; 0x49
   30002:	aa18      	add	r2, sp, #96	; 0x60
   30004:	4849      	ldr	r0, [pc, #292]	; (3012c <CONFIG_FLASH_LOAD_SIZE+0x12c>)
   30006:	f00c fd7b 	bl	3cb00 <z_log_minimal_printk>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &buf, strlen(buf));
   3000a:	a818      	add	r0, sp, #96	; 0x60
   3000c:	f7ed f919 	bl	1d242 <strlen>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   30010:	2219      	movs	r2, #25
   30012:	9000      	str	r0, [sp, #0]
   30014:	2101      	movs	r1, #1
   30016:	4630      	mov	r0, r6
   30018:	ab18      	add	r3, sp, #96	; 0x60
   3001a:	f00d f9b1 	bl	3d380 <z_impl_zsock_setsockopt>
	if (err) {
   3001e:	b188      	cbz	r0, 30044 <CONFIG_FLASH_LOAD_SIZE+0x44>
		LOG_ERR("Failed to bind socket to PDN ID %d, err %d",
   30020:	f00d fbad 	bl	3d77e <__errno>
   30024:	464a      	mov	r2, r9
   30026:	6803      	ldr	r3, [r0, #0]
   30028:	2145      	movs	r1, #69	; 0x45
   3002a:	4841      	ldr	r0, [pc, #260]	; (30130 <CONFIG_FLASH_LOAD_SIZE+0x130>)
   3002c:	f00c fd68 	bl	3cb00 <z_log_minimal_printk>
		return -ENETDOWN;
   30030:	f06f 0672 	mvn.w	r6, #114	; 0x72
		close(dl->fd);
   30034:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   30036:	f00d f8ac 	bl	3d192 <z_impl_zsock_close>
		dl->fd = -1;
   3003a:	f04f 33ff 	mov.w	r3, #4294967295
   3003e:	4635      	mov	r5, r6
   30040:	6023      	str	r3, [r4, #0]
   30042:	e772      	b.n	2ff2a <download_client_connect+0x11e>
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   30044:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
   30048:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   3004c:	d004      	beq.n	30058 <CONFIG_FLASH_LOAD_SIZE+0x58>
   3004e:	f240 1211 	movw	r2, #273	; 0x111
   30052:	4293      	cmp	r3, r2
   30054:	f040 8094 	bne.w	30180 <CONFIG_FLASH_LOAD_SIZE+0x180>
	     && (dl->config.sec_tag != -1)) {
   30058:	f8d4 692c 	ldr.w	r6, [r4, #2348]	; 0x92c
   3005c:	1c73      	adds	r3, r6, #1
   3005e:	f000 808f 	beq.w	30180 <CONFIG_FLASH_LOAD_SIZE+0x180>
	verify = REQUIRED;
   30062:	2302      	movs	r3, #2
		err = socket_sectag_set(dl->fd, dl->config.sec_tag);
   30064:	f8d4 9000 	ldr.w	r9, [r4]
	sec_tag_t sec_tag_list[] = { sec_tag };
   30068:	9618      	str	r6, [sp, #96]	; 0x60
	verify = REQUIRED;
   3006a:	9304      	str	r3, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3006c:	f04f 0a04 	mov.w	sl, #4
   30070:	2205      	movs	r2, #5
   30072:	f44f 718d 	mov.w	r1, #282	; 0x11a
   30076:	4648      	mov	r0, r9
   30078:	f8cd a000 	str.w	sl, [sp]
   3007c:	ab04      	add	r3, sp, #16
   3007e:	f00d f97f 	bl	3d380 <z_impl_zsock_setsockopt>
	if (err) {
   30082:	b360      	cbz	r0, 300de <CONFIG_FLASH_LOAD_SIZE+0xde>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   30084:	f00d fb7b 	bl	3d77e <__errno>
   30088:	2145      	movs	r1, #69	; 0x45
   3008a:	6802      	ldr	r2, [r0, #0]
   3008c:	4829      	ldr	r0, [pc, #164]	; (30134 <CONFIG_FLASH_LOAD_SIZE+0x134>)
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   3008e:	f00c fd37 	bl	3cb00 <z_log_minimal_printk>
		return -errno;
   30092:	f00d fb74 	bl	3d77e <__errno>
   30096:	6806      	ldr	r6, [r0, #0]
   30098:	4276      	negs	r6, r6
		if (err) {
   3009a:	2e00      	cmp	r6, #0
   3009c:	d1ca      	bne.n	30034 <CONFIG_FLASH_LOAD_SIZE+0x34>
		if (dl->config.set_tls_hostname) {
   3009e:	f894 3938 	ldrb.w	r3, [r4, #2360]	; 0x938
   300a2:	2b00      	cmp	r3, #0
   300a4:	d06c      	beq.n	30180 <CONFIG_FLASH_LOAD_SIZE+0x180>
			err = socket_tls_hostname_set(dl->fd, dl->host);
   300a6:	f8d4 6924 	ldr.w	r6, [r4, #2340]	; 0x924
   300aa:	f8d4 9000 	ldr.w	r9, [r4]
	__ASSERT_NO_MSG(hostname);
   300ae:	b946      	cbnz	r6, 300c2 <CONFIG_FLASH_LOAD_SIZE+0xc2>
   300b0:	4921      	ldr	r1, [pc, #132]	; (30138 <CONFIG_FLASH_LOAD_SIZE+0x138>)
   300b2:	4822      	ldr	r0, [pc, #136]	; (3013c <CONFIG_FLASH_LOAD_SIZE+0x13c>)
   300b4:	2286      	movs	r2, #134	; 0x86
   300b6:	f00c fce9 	bl	3ca8c <assert_print>
   300ba:	2186      	movs	r1, #134	; 0x86
   300bc:	481e      	ldr	r0, [pc, #120]	; (30138 <CONFIG_FLASH_LOAD_SIZE+0x138>)
   300be:	f00c fcde 	bl	3ca7e <assert_post_action>
	err = url_parse_host(hostname, parsed_host, sizeof(parsed_host));
   300c2:	4630      	mov	r0, r6
   300c4:	2280      	movs	r2, #128	; 0x80
   300c6:	a918      	add	r1, sp, #96	; 0x60
   300c8:	f000 fa42 	bl	30550 <url_parse_host>
	if (err) {
   300cc:	4606      	mov	r6, r0
   300ce:	2800      	cmp	r0, #0
   300d0:	d03c      	beq.n	3014c <CONFIG_FLASH_LOAD_SIZE+0x14c>
		LOG_ERR("Failed to parse host, err %d", err);
   300d2:	4602      	mov	r2, r0
   300d4:	2145      	movs	r1, #69	; 0x45
   300d6:	481a      	ldr	r0, [pc, #104]	; (30140 <CONFIG_FLASH_LOAD_SIZE+0x140>)
   300d8:	f00c fd12 	bl	3cb00 <z_log_minimal_printk>
			if (err) {
   300dc:	e7aa      	b.n	30034 <CONFIG_FLASH_LOAD_SIZE+0x34>
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   300de:	4632      	mov	r2, r6
   300e0:	2149      	movs	r1, #73	; 0x49
   300e2:	4818      	ldr	r0, [pc, #96]	; (30144 <CONFIG_FLASH_LOAD_SIZE+0x144>)
   300e4:	f00c fd0c 	bl	3cb00 <z_log_minimal_printk>
   300e8:	2201      	movs	r2, #1
   300ea:	f44f 718d 	mov.w	r1, #282	; 0x11a
   300ee:	4648      	mov	r0, r9
   300f0:	f8cd a000 	str.w	sl, [sp]
   300f4:	ab18      	add	r3, sp, #96	; 0x60
   300f6:	f00d f943 	bl	3d380 <z_impl_zsock_setsockopt>
	if (err) {
   300fa:	2800      	cmp	r0, #0
   300fc:	d0cf      	beq.n	3009e <CONFIG_FLASH_LOAD_SIZE+0x9e>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   300fe:	f00d fb3e 	bl	3d77e <__errno>
   30102:	2145      	movs	r1, #69	; 0x45
   30104:	6802      	ldr	r2, [r0, #0]
   30106:	4810      	ldr	r0, [pc, #64]	; (30148 <CONFIG_FLASH_LOAD_SIZE+0x148>)
   30108:	e7c1      	b.n	3008e <CONFIG_FLASH_LOAD_SIZE+0x8e>
   3010a:	bf00      	nop
   3010c:	0004a9a5 	.word	0x0004a9a5
   30110:	0004648c 	.word	0x0004648c
   30114:	0004a9dd 	.word	0x0004a9dd
   30118:	0004a9e2 	.word	0x0004a9e2
   3011c:	0004aa0b 	.word	0x0004aa0b
   30120:	0004aa36 	.word	0x0004aa36
   30124:	0004aa6f 	.word	0x0004aa6f
   30128:	0004aa94 	.word	0x0004aa94
   3012c:	0004aa9a 	.word	0x0004aa9a
   30130:	0004aab5 	.word	0x0004aab5
   30134:	0004aae5 	.word	0x0004aae5
   30138:	0004a924 	.word	0x0004a924
   3013c:	0004409e 	.word	0x0004409e
   30140:	0004ab71 	.word	0x0004ab71
   30144:	0004ab16 	.word	0x0004ab16
   30148:	0004ab3e 	.word	0x0004ab3e
	err = setsockopt(fd, SOL_TLS, TLS_HOSTNAME, parsed_host,
   3014c:	a818      	add	r0, sp, #96	; 0x60
   3014e:	f7ed f878 	bl	1d242 <strlen>
   30152:	2202      	movs	r2, #2
   30154:	9000      	str	r0, [sp, #0]
   30156:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3015a:	4648      	mov	r0, r9
   3015c:	ab18      	add	r3, sp, #96	; 0x60
   3015e:	f00d f90f 	bl	3d380 <z_impl_zsock_setsockopt>
	if (err) {
   30162:	b168      	cbz	r0, 30180 <CONFIG_FLASH_LOAD_SIZE+0x180>
		LOG_ERR("Failed to setup TLS hostname (%s), errno %d",
   30164:	f00d fb0b 	bl	3d77e <__errno>
   30168:	2145      	movs	r1, #69	; 0x45
   3016a:	6803      	ldr	r3, [r0, #0]
   3016c:	aa18      	add	r2, sp, #96	; 0x60
   3016e:	4816      	ldr	r0, [pc, #88]	; (301c8 <CONFIG_FLASH_LOAD_SIZE+0x1c8>)
   30170:	f00c fcc6 	bl	3cb00 <z_log_minimal_printk>
		return -errno;
   30174:	f00d fb03 	bl	3d77e <__errno>
   30178:	6806      	ldr	r6, [r0, #0]
			if (err) {
   3017a:	b10e      	cbz	r6, 30180 <CONFIG_FLASH_LOAD_SIZE+0x180>
		err = -errno;
   3017c:	4276      	negs	r6, r6
   3017e:	e759      	b.n	30034 <CONFIG_FLASH_LOAD_SIZE+0x34>
	LOG_INF("Connecting to %s", log_strdup(dl->host));
   30180:	2149      	movs	r1, #73	; 0x49
   30182:	f8d4 2924 	ldr.w	r2, [r4, #2340]	; 0x924
   30186:	4811      	ldr	r0, [pc, #68]	; (301cc <CONFIG_FLASH_LOAD_SIZE+0x1cc>)
   30188:	f00c fcba 	bl	3cb00 <z_log_minimal_printk>
	err = connect(dl->fd, &dl->remote_addr, addrlen);
   3018c:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   3018e:	463a      	mov	r2, r7
   30190:	4641      	mov	r1, r8
   30192:	f00d f822 	bl	3d1da <z_impl_zsock_connect>
	if (err) {
   30196:	2800      	cmp	r0, #0
   30198:	f43f aec7 	beq.w	2ff2a <download_client_connect+0x11e>
		LOG_ERR("Unable to connect, errno %d", errno);
   3019c:	f00d faef 	bl	3d77e <__errno>
   301a0:	2145      	movs	r1, #69	; 0x45
   301a2:	6802      	ldr	r2, [r0, #0]
   301a4:	480a      	ldr	r0, [pc, #40]	; (301d0 <CONFIG_FLASH_LOAD_SIZE+0x1d0>)
   301a6:	f00c fcab 	bl	3cb00 <z_log_minimal_printk>
		err = -errno;
   301aa:	f00d fae8 	bl	3d77e <__errno>
   301ae:	6806      	ldr	r6, [r0, #0]
	if (err) {
   301b0:	2e00      	cmp	r6, #0
   301b2:	d1e3      	bne.n	3017c <CONFIG_FLASH_LOAD_SIZE+0x17c>
   301b4:	e6b9      	b.n	2ff2a <download_client_connect+0x11e>
			return -EPROTONOSUPPORT;
   301b6:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   301ba:	e6b6      	b.n	2ff2a <download_client_connect+0x11e>
	switch (dl->remote_addr.sa_family) {
   301bc:	f06f 0569 	mvn.w	r5, #105	; 0x69
   301c0:	e6b3      	b.n	2ff2a <download_client_connect+0x11e>
		return -EINVAL;
   301c2:	f06f 0515 	mvn.w	r5, #21
   301c6:	e63e      	b.n	2fe46 <download_client_connect+0x3a>
   301c8:	0004ab93 	.word	0x0004ab93
   301cc:	0004abc4 	.word	0x0004abc4
   301d0:	0004abda 	.word	0x0004abda

000301d4 <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   301d4:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   301d6:	4604      	mov	r4, r0
   301d8:	b1a8      	cbz	r0, 30206 <download_client_disconnect+0x32>
   301da:	6800      	ldr	r0, [r0, #0]
   301dc:	2800      	cmp	r0, #0
   301de:	db12      	blt.n	30206 <download_client_disconnect+0x32>
	return z_impl_zsock_close(sock);
   301e0:	f00c ffd7 	bl	3d192 <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   301e4:	b158      	cbz	r0, 301fe <download_client_disconnect+0x2a>
		LOG_ERR("Failed to close socket, errno %d", errno);
   301e6:	f00d faca 	bl	3d77e <__errno>
   301ea:	2145      	movs	r1, #69	; 0x45
   301ec:	6802      	ldr	r2, [r0, #0]
   301ee:	4807      	ldr	r0, [pc, #28]	; (3020c <download_client_disconnect+0x38>)
   301f0:	f00c fc86 	bl	3cb00 <z_log_minimal_printk>
		return -errno;
   301f4:	f00d fac3 	bl	3d77e <__errno>
   301f8:	6800      	ldr	r0, [r0, #0]
   301fa:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   301fc:	bd10      	pop	{r4, pc}
	client->fd = -1;
   301fe:	f04f 33ff 	mov.w	r3, #4294967295
   30202:	6023      	str	r3, [r4, #0]
	return 0;
   30204:	e7fa      	b.n	301fc <download_client_disconnect+0x28>
		return -EINVAL;
   30206:	f06f 0015 	mvn.w	r0, #21
   3020a:	e7f7      	b.n	301fc <download_client_disconnect+0x28>
   3020c:	0004abfb 	.word	0x0004abfb

00030210 <reconnect>:
{
   30210:	b510      	push	{r4, lr}
   30212:	4604      	mov	r4, r0
	LOG_INF("Reconnecting..");
   30214:	2149      	movs	r1, #73	; 0x49
   30216:	4808      	ldr	r0, [pc, #32]	; (30238 <reconnect+0x28>)
   30218:	f00c fc72 	bl	3cb00 <z_log_minimal_printk>
	err = download_client_disconnect(dl);
   3021c:	4620      	mov	r0, r4
   3021e:	f7ff ffd9 	bl	301d4 <download_client_disconnect>
	if (err) {
   30222:	b940      	cbnz	r0, 30236 <reconnect+0x26>
	err = download_client_connect(dl, dl->host, &dl->config);
   30224:	4620      	mov	r0, r4
   30226:	f8d4 1924 	ldr.w	r1, [r4, #2340]	; 0x924
   3022a:	f604 122c 	addw	r2, r4, #2348	; 0x92c
}
   3022e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   30232:	f7ff bdeb 	b.w	2fe0c <download_client_connect>
}
   30236:	bd10      	pop	{r4, pc}
   30238:	0004ac21 	.word	0x0004ac21

0003023c <download_thread>:
{
   3023c:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   30240:	4605      	mov	r5, r0
	int rc = 0;
   30242:	2400      	movs	r4, #0
	struct timeval timeo = {
   30244:	f04f 0a1e 	mov.w	sl, #30
   30248:	f04f 0b00 	mov.w	fp, #0
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   3024c:	4f84      	ldr	r7, [pc, #528]	; (30460 <download_thread+0x224>)
{
   3024e:	b086      	sub	sp, #24
	k_thread_suspend(dl->tid);
   30250:	f8d5 097c 	ldr.w	r0, [r5, #2428]	; 0x97c
	z_impl_k_thread_suspend(thread);
   30254:	f007 ffd0 	bl	381f8 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   30258:	f8df 822c 	ldr.w	r8, [pc, #556]	; 30488 <download_thread+0x24c>
   3025c:	f640 03fb 	movw	r3, #2299	; 0x8fb
   30260:	f8d5 2918 	ldr.w	r2, [r5, #2328]	; 0x918
   30264:	429a      	cmp	r2, r3
   30266:	d90a      	bls.n	3027e <download_thread+0x42>
   30268:	4639      	mov	r1, r7
   3026a:	4640      	mov	r0, r8
   3026c:	f240 12e7 	movw	r2, #487	; 0x1e7
   30270:	f00c fc0c 	bl	3ca8c <assert_print>
   30274:	f240 11e7 	movw	r1, #487	; 0x1e7
   30278:	4638      	mov	r0, r7
   3027a:	f00c fc00 	bl	3ca7e <assert_post_action>
		if (sizeof(dl->buf) - dl->offset == 0) {
   3027e:	f640 03fc 	movw	r3, #2300	; 0x8fc
   30282:	f8d5 2918 	ldr.w	r2, [r5, #2328]	; 0x918
   30286:	429a      	cmp	r2, r3
   30288:	d108      	bne.n	3029c <download_thread+0x60>
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   3028a:	2145      	movs	r1, #69	; 0x45
   3028c:	4875      	ldr	r0, [pc, #468]	; (30464 <download_thread+0x228>)
   3028e:	f00c fc37 	bl	3cb00 <z_log_minimal_printk>
			error_evt_send(dl, E2BIG);
   30292:	2107      	movs	r1, #7
				error_evt_send(dl, EHOSTDOWN);
   30294:	4628      	mov	r0, r5
   30296:	f00f fa9f 	bl	3f7d8 <error_evt_send>
				break;
   3029a:	e7d9      	b.n	30250 <download_thread+0x14>
	switch (dl->proto) {
   3029c:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
   302a0:	2b06      	cmp	r3, #6
   302a2:	d002      	beq.n	302aa <download_thread+0x6e>
   302a4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   302a8:	d138      	bne.n	3031c <download_thread+0xe0>
	struct timeval timeo = {
   302aa:	2300      	movs	r3, #0
   302ac:	e9cd ab02 	strd	sl, fp, [sp, #8]
	err = set_recv_socket_timeout(dl->fd, timeout);
   302b0:	6828      	ldr	r0, [r5, #0]
	struct timeval timeo = {
   302b2:	9304      	str	r3, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   302b4:	2310      	movs	r3, #16
   302b6:	2214      	movs	r2, #20
   302b8:	9300      	str	r3, [sp, #0]
   302ba:	2101      	movs	r1, #1
   302bc:	ab02      	add	r3, sp, #8
   302be:	f00d f85f 	bl	3d380 <z_impl_zsock_setsockopt>
	if (err) {
   302c2:	4603      	mov	r3, r0
   302c4:	b148      	cbz	r0, 302da <download_thread+0x9e>
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   302c6:	f00d fa5a 	bl	3d77e <__errno>
   302ca:	2157      	movs	r1, #87	; 0x57
   302cc:	6802      	ldr	r2, [r0, #0]
   302ce:	4866      	ldr	r0, [pc, #408]	; (30468 <download_thread+0x22c>)
   302d0:	f00c fc16 	bl	3cb00 <z_log_minimal_printk>
		return -1;
   302d4:	f04f 36ff 	mov.w	r6, #4294967295
   302d8:	e00d      	b.n	302f6 <download_thread+0xba>
	return recv(dl->fd, dl->buf + dl->offset, sizeof(dl->buf) - dl->offset, 0);
   302da:	6828      	ldr	r0, [r5, #0]
   302dc:	f8d5 6918 	ldr.w	r6, [r5, #2328]	; 0x918
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   302e0:	f5c6 620f 	rsb	r2, r6, #2288	; 0x8f0
   302e4:	f105 011c 	add.w	r1, r5, #28
   302e8:	4431      	add	r1, r6
   302ea:	e9cd 3300 	strd	r3, r3, [sp]
   302ee:	320c      	adds	r2, #12
   302f0:	f00c fff1 	bl	3d2d6 <z_impl_zsock_recvfrom>
   302f4:	4606      	mov	r6, r0
		if ((len == 0) || (len == -1)) {
   302f6:	1e73      	subs	r3, r6, #1
   302f8:	3303      	adds	r3, #3
   302fa:	d94b      	bls.n	30394 <download_thread+0x158>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   302fc:	f8d5 3918 	ldr.w	r3, [r5, #2328]	; 0x918
   30300:	b18b      	cbz	r3, 30326 <download_thread+0xea>
   30302:	f895 3940 	ldrb.w	r3, [r5, #2368]	; 0x940
   30306:	b173      	cbz	r3, 30326 <download_thread+0xea>
				rc = fragment_evt_send(dl);
   30308:	4628      	mov	r0, r5
   3030a:	f7ff fce5 	bl	2fcd8 <fragment_evt_send>
				if (rc) {
   3030e:	4604      	mov	r4, r0
   30310:	b148      	cbz	r0, 30326 <download_thread+0xea>
			LOG_INF("Fragment refused, download stopped.");
   30312:	2149      	movs	r1, #73	; 0x49
   30314:	4855      	ldr	r0, [pc, #340]	; (3046c <download_thread+0x230>)
   30316:	f00c fbf3 	bl	3cb00 <z_log_minimal_printk>
   3031a:	e799      	b.n	30250 <download_thread+0x14>
		LOG_ERR("unhandled proto");
   3031c:	2145      	movs	r1, #69	; 0x45
   3031e:	4854      	ldr	r0, [pc, #336]	; (30470 <download_thread+0x234>)
   30320:	f00c fbee 	bl	3cb00 <z_log_minimal_printk>
   30324:	e7d6      	b.n	302d4 <download_thread+0x98>
			if (len == -1) {
   30326:	3601      	adds	r6, #1
   30328:	d12e      	bne.n	30388 <download_thread+0x14c>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   3032a:	f00d fa28 	bl	3d77e <__errno>
   3032e:	6803      	ldr	r3, [r0, #0]
   30330:	2b74      	cmp	r3, #116	; 0x74
   30332:	d11d      	bne.n	30370 <download_thread+0x134>
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   30334:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
   30338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   3033c:	2b11      	cmp	r3, #17
   3033e:	d073      	beq.n	30428 <download_thread+0x1ec>
					error_cause = ETIMEDOUT;
   30340:	2474      	movs	r4, #116	; 0x74
				LOG_ERR("Error in recv(), errno %d", errno);
   30342:	f00d fa1c 	bl	3d77e <__errno>
   30346:	2145      	movs	r1, #69	; 0x45
   30348:	6802      	ldr	r2, [r0, #0]
   3034a:	484a      	ldr	r0, [pc, #296]	; (30474 <download_thread+0x238>)
   3034c:	f00c fbd8 	bl	3cb00 <z_log_minimal_printk>
			rc = error_evt_send(dl, error_cause);
   30350:	4621      	mov	r1, r4
   30352:	4628      	mov	r0, r5
   30354:	f00f fa40 	bl	3f7d8 <error_evt_send>
			if (rc) {
   30358:	4604      	mov	r4, r0
   3035a:	2800      	cmp	r0, #0
   3035c:	f47f af78 	bne.w	30250 <download_thread+0x14>
			rc = reconnect(dl);
   30360:	4628      	mov	r0, r5
   30362:	f7ff ff55 	bl	30210 <reconnect>
			if (rc) {
   30366:	4604      	mov	r4, r0
   30368:	2800      	cmp	r0, #0
   3036a:	d05d      	beq.n	30428 <download_thread+0x1ec>
				error_evt_send(dl, EHOSTDOWN);
   3036c:	2175      	movs	r1, #117	; 0x75
   3036e:	e791      	b.n	30294 <download_thread+0x58>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   30370:	f00d fa05 	bl	3d77e <__errno>
   30374:	6803      	ldr	r3, [r0, #0]
   30376:	2b0b      	cmp	r3, #11
   30378:	d0dc      	beq.n	30334 <download_thread+0xf8>
				    (errno == EAGAIN)) {
   3037a:	f00d fa00 	bl	3d77e <__errno>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   3037e:	6803      	ldr	r3, [r0, #0]
   30380:	2b0b      	cmp	r3, #11
   30382:	d0d7      	beq.n	30334 <download_thread+0xf8>
			error_cause = ECONNRESET;
   30384:	2468      	movs	r4, #104	; 0x68
   30386:	e7dc      	b.n	30342 <download_thread+0x106>
				LOG_WRN("Peer closed connection!");
   30388:	2157      	movs	r1, #87	; 0x57
   3038a:	483b      	ldr	r0, [pc, #236]	; (30478 <download_thread+0x23c>)
   3038c:	f00c fbb8 	bl	3cb00 <z_log_minimal_printk>
			error_cause = ECONNRESET;
   30390:	2468      	movs	r4, #104	; 0x68
   30392:	e7dd      	b.n	30350 <download_thread+0x114>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   30394:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
   30398:	2b06      	cmp	r3, #6
   3039a:	d002      	beq.n	303a2 <download_thread+0x166>
   3039c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   303a0:	d106      	bne.n	303b0 <download_thread+0x174>
			rc = http_parse(client, len);
   303a2:	4631      	mov	r1, r6
   303a4:	4628      	mov	r0, r5
   303a6:	f000 f9e1 	bl	3076c <http_parse>
			if (rc > 0) {
   303aa:	1e04      	subs	r4, r0, #0
   303ac:	f73f af56 	bgt.w	3025c <download_thread+0x20>
		if (rc < 0) {
   303b0:	2c00      	cmp	r4, #0
   303b2:	da01      	bge.n	303b8 <download_thread+0x17c>
			error_evt_send(dl, EBADMSG);
   303b4:	214d      	movs	r1, #77	; 0x4d
   303b6:	e76d      	b.n	30294 <download_thread+0x58>
		if (dl->file_size) {
   303b8:	f8d5 391c 	ldr.w	r3, [r5, #2332]	; 0x91c
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   303bc:	f8d5 2920 	ldr.w	r2, [r5, #2336]	; 0x920
		if (dl->file_size) {
   303c0:	b32b      	cbz	r3, 3040e <download_thread+0x1d2>
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   303c2:	2164      	movs	r1, #100	; 0x64
   303c4:	4351      	muls	r1, r2
   303c6:	fbb1 f1f3 	udiv	r1, r1, r3
   303ca:	482c      	ldr	r0, [pc, #176]	; (3047c <download_thread+0x240>)
   303cc:	9100      	str	r1, [sp, #0]
   303ce:	2149      	movs	r1, #73	; 0x49
   303d0:	f00c fb96 	bl	3cb00 <z_log_minimal_printk>
		rc = fragment_evt_send(dl);
   303d4:	4628      	mov	r0, r5
   303d6:	f7ff fc7f 	bl	2fcd8 <fragment_evt_send>
		if (rc) {
   303da:	4604      	mov	r4, r0
   303dc:	2800      	cmp	r0, #0
   303de:	d198      	bne.n	30312 <download_thread+0xd6>
		if (dl->progress == dl->file_size) {
   303e0:	f8d5 2920 	ldr.w	r2, [r5, #2336]	; 0x920
   303e4:	f8d5 391c 	ldr.w	r3, [r5, #2332]	; 0x91c
   303e8:	429a      	cmp	r2, r3
   303ea:	d115      	bne.n	30418 <download_thread+0x1dc>
			LOG_INF("Download complete");
   303ec:	2149      	movs	r1, #73	; 0x49
   303ee:	4824      	ldr	r0, [pc, #144]	; (30480 <download_thread+0x244>)
   303f0:	f00c fb86 	bl	3cb00 <z_log_minimal_printk>
			const struct download_client_evt evt = {
   303f4:	2302      	movs	r3, #2
   303f6:	e9cd 4402 	strd	r4, r4, [sp, #8]
   303fa:	f88d 3008 	strb.w	r3, [sp, #8]
			dl->callback(&evt);
   303fe:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
   30402:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
			const struct download_client_evt evt = {
   30406:	9404      	str	r4, [sp, #16]
			dl->callback(&evt);
   30408:	a802      	add	r0, sp, #8
   3040a:	4798      	blx	r3
			break;
   3040c:	e720      	b.n	30250 <download_thread+0x14>
			LOG_INF("Downloaded %u bytes", dl->progress);
   3040e:	2149      	movs	r1, #73	; 0x49
   30410:	481c      	ldr	r0, [pc, #112]	; (30484 <download_thread+0x248>)
   30412:	f00c fb75 	bl	3cb00 <z_log_minimal_printk>
   30416:	e7dd      	b.n	303d4 <download_thread+0x198>
		if (dl->http.connection_close) {
   30418:	f895 3941 	ldrb.w	r3, [r5, #2369]	; 0x941
   3041c:	b123      	cbz	r3, 30428 <download_thread+0x1ec>
			dl->http.connection_close = false;
   3041e:	f885 0941 	strb.w	r0, [r5, #2369]	; 0x941
			reconnect(dl);
   30422:	4628      	mov	r0, r5
   30424:	f7ff fef4 	bl	30210 <reconnect>
		dl->offset = 0;
   30428:	2600      	movs	r6, #0
			rc = request_send(dl);
   3042a:	4628      	mov	r0, r5
		dl->offset = 0;
   3042c:	f8c5 6918 	str.w	r6, [r5, #2328]	; 0x918
			dl->http.has_header = false;
   30430:	f885 6940 	strb.w	r6, [r5, #2368]	; 0x940
			rc = request_send(dl);
   30434:	f00f f9e2 	bl	3f7fc <request_send>
			if (rc) {
   30438:	4604      	mov	r4, r0
   3043a:	2800      	cmp	r0, #0
   3043c:	f43f af0e 	beq.w	3025c <download_thread+0x20>
				rc = error_evt_send(dl, ECONNRESET);
   30440:	2168      	movs	r1, #104	; 0x68
   30442:	4628      	mov	r0, r5
   30444:	f00f f9c8 	bl	3f7d8 <error_evt_send>
				if (rc) {
   30448:	4604      	mov	r4, r0
   3044a:	2800      	cmp	r0, #0
   3044c:	f47f af00 	bne.w	30250 <download_thread+0x14>
				rc = reconnect(dl);
   30450:	4628      	mov	r0, r5
   30452:	f7ff fedd 	bl	30210 <reconnect>
				if (rc) {
   30456:	4604      	mov	r4, r0
   30458:	2800      	cmp	r0, #0
   3045a:	d0e6      	beq.n	3042a <download_thread+0x1ee>
   3045c:	e786      	b.n	3036c <download_thread+0x130>
   3045e:	bf00      	nop
   30460:	0004a924 	.word	0x0004a924
   30464:	0004ac35 	.word	0x0004ac35
   30468:	0004a969 	.word	0x0004a969
   3046c:	0004ac7c 	.word	0x0004ac7c
   30470:	0004ac67 	.word	0x0004ac67
   30474:	0004aca5 	.word	0x0004aca5
   30478:	0004acc4 	.word	0x0004acc4
   3047c:	0004ace1 	.word	0x0004ace1
   30480:	0004a35f 	.word	0x0004a35f
   30484:	0004ad04 	.word	0x0004ad04
   30488:	0004409e 	.word	0x0004409e

0003048c <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   3048c:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (client == NULL) {
   3048e:	4604      	mov	r4, r0
   30490:	b1f8      	cbz	r0, 304d2 <download_client_start+0x46>
		return -EINVAL;
	}

	if (client->fd < 0) {
   30492:	6803      	ldr	r3, [r0, #0]
   30494:	2b00      	cmp	r3, #0
   30496:	db1f      	blt.n	304d8 <download_client_start+0x4c>
		return -ENOTCONN;
	}

	client->file = file;
	client->file_size = 0;
   30498:	2300      	movs	r3, #0
	client->file = file;
   3049a:	f8c0 1928 	str.w	r1, [r0, #2344]	; 0x928
	client->file_size = 0;
   3049e:	f8c0 391c 	str.w	r3, [r0, #2332]	; 0x91c
	client->progress = from;
   304a2:	f8c0 2920 	str.w	r2, [r0, #2336]	; 0x920

	client->offset = 0;
   304a6:	f8c0 3918 	str.w	r3, [r0, #2328]	; 0x918
	client->http.has_header = false;
   304aa:	f880 3940 	strb.w	r3, [r0, #2368]	; 0x940
		if (IS_ENABLED(CONFIG_COAP)) {
			coap_block_init(client, from);
		}
	}

	err = request_send(client);
   304ae:	f00f f9a5 	bl	3f7fc <request_send>
	if (err) {
   304b2:	4605      	mov	r5, r0
   304b4:	b958      	cbnz	r0, 304ce <download_client_start+0x42>
		return err;
	}

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   304b6:	2149      	movs	r1, #73	; 0x49
   304b8:	f8d4 3920 	ldr.w	r3, [r4, #2336]	; 0x920
   304bc:	f8d4 2928 	ldr.w	r2, [r4, #2344]	; 0x928
   304c0:	4807      	ldr	r0, [pc, #28]	; (304e0 <download_client_start+0x54>)
   304c2:	f00c fb1d 	bl	3cb00 <z_log_minimal_printk>
		client->progress);

	/* Let the thread run */
	k_thread_resume(client->tid);
   304c6:	f8d4 097c 	ldr.w	r0, [r4, #2428]	; 0x97c
	z_impl_k_thread_resume(thread);
   304ca:	f007 fcbd 	bl	37e48 <z_impl_k_thread_resume>

	return 0;
}
   304ce:	4628      	mov	r0, r5
   304d0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   304d2:	f06f 0515 	mvn.w	r5, #21
   304d6:	e7fa      	b.n	304ce <download_client_start+0x42>
		return -ENOTCONN;
   304d8:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   304dc:	e7f7      	b.n	304ce <download_client_start+0x42>
   304de:	bf00      	nop
   304e0:	0004ad1d 	.word	0x0004ad1d

000304e4 <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   304e4:	b570      	push	{r4, r5, r6, lr}
   304e6:	460d      	mov	r5, r1
   304e8:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   304ea:	4915      	ldr	r1, [pc, #84]	; (30540 <url_parse_proto+0x5c>)
   304ec:	2205      	movs	r2, #5
{
   304ee:	4606      	mov	r6, r0
	if (strncmp(url, "https", 5) == 0) {
   304f0:	f011 f973 	bl	417da <strncmp>
   304f4:	b928      	cbnz	r0, 30502 <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   304f6:	f44f 7381 	mov.w	r3, #258	; 0x102
		*type = SOCK_STREAM;
	} else if (strncmp(url, "http", 4) == 0) {
		*proto = IPPROTO_TCP;
   304fa:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   304fc:	2301      	movs	r3, #1
	} else if (strncmp(url, "coaps", 5) == 0) {
		*proto = IPPROTO_DTLS_1_2;
		*type = SOCK_DGRAM;
	} else if (strncmp(url, "coap", 4) == 0) {
		*proto = IPPROTO_UDP;
		*type = SOCK_DGRAM;
   304fe:	6023      	str	r3, [r4, #0]
	} else {
		return -EINVAL;
	}
	return 0;
}
   30500:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   30502:	2204      	movs	r2, #4
   30504:	4630      	mov	r0, r6
   30506:	490f      	ldr	r1, [pc, #60]	; (30544 <url_parse_proto+0x60>)
   30508:	f011 f967 	bl	417da <strncmp>
   3050c:	b908      	cbnz	r0, 30512 <url_parse_proto+0x2e>
		*proto = IPPROTO_TCP;
   3050e:	2306      	movs	r3, #6
   30510:	e7f3      	b.n	304fa <url_parse_proto+0x16>
	} else if (strncmp(url, "coaps", 5) == 0) {
   30512:	2205      	movs	r2, #5
   30514:	4630      	mov	r0, r6
   30516:	490c      	ldr	r1, [pc, #48]	; (30548 <url_parse_proto+0x64>)
   30518:	f011 f95f 	bl	417da <strncmp>
   3051c:	b920      	cbnz	r0, 30528 <url_parse_proto+0x44>
		*proto = IPPROTO_DTLS_1_2;
   3051e:	f240 1311 	movw	r3, #273	; 0x111
		*proto = IPPROTO_UDP;
   30522:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   30524:	2302      	movs	r3, #2
   30526:	e7ea      	b.n	304fe <url_parse_proto+0x1a>
	} else if (strncmp(url, "coap", 4) == 0) {
   30528:	2204      	movs	r2, #4
   3052a:	4630      	mov	r0, r6
   3052c:	4907      	ldr	r1, [pc, #28]	; (3054c <url_parse_proto+0x68>)
   3052e:	f011 f954 	bl	417da <strncmp>
   30532:	b908      	cbnz	r0, 30538 <url_parse_proto+0x54>
		*proto = IPPROTO_UDP;
   30534:	2311      	movs	r3, #17
   30536:	e7f4      	b.n	30522 <url_parse_proto+0x3e>
		return -EINVAL;
   30538:	f06f 0015 	mvn.w	r0, #21
   3053c:	e7e0      	b.n	30500 <url_parse_proto+0x1c>
   3053e:	bf00      	nop
   30540:	0004ad37 	.word	0x0004ad37
   30544:	0004ad3d 	.word	0x0004ad3d
   30548:	0004ad42 	.word	0x0004ad42
   3054c:	0004ad48 	.word	0x0004ad48

00030550 <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   30550:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30552:	4604      	mov	r4, r0
	const char *cur;
	const char *end;

	cur = url;
   30554:	9001      	str	r0, [sp, #4]
{
   30556:	460d      	mov	r5, r1

	(void)swallow(&cur, "://");
   30558:	a801      	add	r0, sp, #4
   3055a:	4918      	ldr	r1, [pc, #96]	; (305bc <url_parse_host+0x6c>)
{
   3055c:	4616      	mov	r6, r2
	(void)swallow(&cur, "://");
   3055e:	f00f f962 	bl	3f826 <swallow>

	if (cur[0] == '[') {
   30562:	9801      	ldr	r0, [sp, #4]
   30564:	7803      	ldrb	r3, [r0, #0]
   30566:	2b5b      	cmp	r3, #91	; 0x5b
   30568:	d111      	bne.n	3058e <url_parse_host+0x3e>
		/* literal IPv6 address */
		end = strchr(cur, ']');
   3056a:	215d      	movs	r1, #93	; 0x5d
   3056c:	f011 f920 	bl	417b0 <strchr>

		if (!end) {
   30570:	b1f0      	cbz	r0, 305b0 <url_parse_host+0x60>
			return -EINVAL;
		}
		++end;
   30572:	3001      	adds	r0, #1
				end = url + strlen(url) + 1;
			}
		}
	}

	if (end - cur + 1 > len) {
   30574:	9901      	ldr	r1, [sp, #4]
   30576:	1a44      	subs	r4, r0, r1
   30578:	1c63      	adds	r3, r4, #1
   3057a:	42b3      	cmp	r3, r6
   3057c:	d81b      	bhi.n	305b6 <url_parse_host+0x66>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3057e:	4622      	mov	r2, r4
   30580:	4628      	mov	r0, r5
   30582:	f010 ff37 	bl	413f4 <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   30586:	2000      	movs	r0, #0
   30588:	5528      	strb	r0, [r5, r4]

	return 0;
}
   3058a:	b002      	add	sp, #8
   3058c:	bd70      	pop	{r4, r5, r6, pc}
		end = strchr(cur, ':');
   3058e:	213a      	movs	r1, #58	; 0x3a
   30590:	f011 f90e 	bl	417b0 <strchr>
		if (!end) {
   30594:	2800      	cmp	r0, #0
   30596:	d1ed      	bne.n	30574 <url_parse_host+0x24>
			end = strchr(cur, '/');
   30598:	212f      	movs	r1, #47	; 0x2f
   3059a:	9801      	ldr	r0, [sp, #4]
   3059c:	f011 f908 	bl	417b0 <strchr>
			if (!end) {
   305a0:	2800      	cmp	r0, #0
   305a2:	d1e7      	bne.n	30574 <url_parse_host+0x24>
				end = url + strlen(url) + 1;
   305a4:	4620      	mov	r0, r4
   305a6:	f7ec fe4c 	bl	1d242 <strlen>
   305aa:	1c43      	adds	r3, r0, #1
   305ac:	18e0      	adds	r0, r4, r3
   305ae:	e7e1      	b.n	30574 <url_parse_host+0x24>
			return -EINVAL;
   305b0:	f06f 0015 	mvn.w	r0, #21
   305b4:	e7e9      	b.n	3058a <url_parse_host+0x3a>
		return -E2BIG;
   305b6:	f06f 0006 	mvn.w	r0, #6
   305ba:	e7e6      	b.n	3058a <url_parse_host+0x3a>
   305bc:	0004ad4d 	.word	0x0004ad4d

000305c0 <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   305c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   305c2:	460e      	mov	r6, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   305c4:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   305c6:	491b      	ldr	r1, [pc, #108]	; (30634 <url_parse_port+0x74>)
   305c8:	a801      	add	r0, sp, #4
   305ca:	f00f f92c 	bl	3f826 <swallow>

	if (cur[0] == '[') {
   305ce:	9b01      	ldr	r3, [sp, #4]
   305d0:	781b      	ldrb	r3, [r3, #0]
   305d2:	2b5b      	cmp	r3, #91	; 0x5b
   305d4:	d103      	bne.n	305de <url_parse_port+0x1e>
		/* literal IPv6 address */
		swallow(&cur, "]");
   305d6:	4918      	ldr	r1, [pc, #96]	; (30638 <url_parse_port+0x78>)
   305d8:	a801      	add	r0, sp, #4
   305da:	f00f f924 	bl	3f826 <swallow>
	}

	err = swallow(&cur, ":");
   305de:	4917      	ldr	r1, [pc, #92]	; (3063c <url_parse_port+0x7c>)
   305e0:	a801      	add	r0, sp, #4
   305e2:	f00f f920 	bl	3f826 <swallow>
	if (err) {
   305e6:	4605      	mov	r5, r0
   305e8:	bb08      	cbnz	r0, 3062e <url_parse_port+0x6e>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   305ea:	212f      	movs	r1, #47	; 0x2f
   305ec:	9801      	ldr	r0, [sp, #4]
   305ee:	f011 f8df 	bl	417b0 <strchr>
	if (!end) {
   305f2:	4604      	mov	r4, r0
		len = strlen(cur);
   305f4:	9801      	ldr	r0, [sp, #4]
	if (!end) {
   305f6:	b9c4      	cbnz	r4, 3062a <url_parse_port+0x6a>
		len = strlen(cur);
   305f8:	f7ec fe23 	bl	1d242 <strlen>
   305fc:	4604      	mov	r4, r0
	} else {
		len = end - cur;
	}

	len = MIN(len, sizeof(aport) - 1);
   305fe:	2c07      	cmp	r4, #7
   30600:	bf28      	it	cs
   30602:	2407      	movcs	r4, #7

	memcpy(aport, cur, len);
   30604:	2308      	movs	r3, #8
   30606:	4622      	mov	r2, r4
   30608:	9901      	ldr	r1, [sp, #4]
   3060a:	eb0d 0003 	add.w	r0, sp, r3
   3060e:	f010 fefe 	bl	4140e <__memcpy_chk>
	aport[len] = '\0';
   30612:	ab04      	add	r3, sp, #16
   30614:	441c      	add	r4, r3
   30616:	2300      	movs	r3, #0

	*port = atoi(aport);
   30618:	a802      	add	r0, sp, #8
	aport[len] = '\0';
   3061a:	f804 3c08 	strb.w	r3, [r4, #-8]
	*port = atoi(aport);
   3061e:	f010 fec7 	bl	413b0 <atoi>
   30622:	8030      	strh	r0, [r6, #0]

	return 0;
}
   30624:	4628      	mov	r0, r5
   30626:	b004      	add	sp, #16
   30628:	bd70      	pop	{r4, r5, r6, pc}
		len = end - cur;
   3062a:	1a24      	subs	r4, r4, r0
   3062c:	e7e7      	b.n	305fe <url_parse_port+0x3e>
		return -EINVAL;
   3062e:	f06f 0515 	mvn.w	r5, #21
   30632:	e7f7      	b.n	30624 <url_parse_port+0x64>
   30634:	0004ad4d 	.word	0x0004ad4d
   30638:	0004a4a8 	.word	0x0004a4a8
   3063c:	0004b9be 	.word	0x0004b9be

00030640 <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   30640:	b537      	push	{r0, r1, r2, r4, r5, lr}
   30642:	460d      	mov	r5, r1
	int err;
	const char *cur;

	cur = url;

	if (strstr(url, "//")) {
   30644:	4915      	ldr	r1, [pc, #84]	; (3069c <url_parse_file+0x5c>)
{
   30646:	4614      	mov	r4, r2
	cur = url;
   30648:	9001      	str	r0, [sp, #4]
	if (strstr(url, "//")) {
   3064a:	f011 f90d 	bl	41868 <strstr>
   3064e:	b940      	cbnz	r0, 30662 <url_parse_file+0x22>
		if (err) {
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   30650:	9801      	ldr	r0, [sp, #4]
   30652:	f7ec fdf6 	bl	1d242 <strlen>
   30656:	3001      	adds	r0, #1
   30658:	42a0      	cmp	r0, r4
   3065a:	d912      	bls.n	30682 <url_parse_file+0x42>
		return -E2BIG;
   3065c:	f06f 0006 	mvn.w	r0, #6
   30660:	e006      	b.n	30670 <url_parse_file+0x30>
		err = swallow(&cur, "://");
   30662:	490f      	ldr	r1, [pc, #60]	; (306a0 <url_parse_file+0x60>)
   30664:	a801      	add	r0, sp, #4
   30666:	f00f f8de 	bl	3f826 <swallow>
		if (err) {
   3066a:	b118      	cbz	r0, 30674 <url_parse_file+0x34>
			return -EINVAL;
   3066c:	f06f 0015 	mvn.w	r0, #21

	memcpy(file, cur, len);
	file[len] = '\0';

	return 0;
}
   30670:	b003      	add	sp, #12
   30672:	bd30      	pop	{r4, r5, pc}
		err = swallow(&cur, "/");
   30674:	490b      	ldr	r1, [pc, #44]	; (306a4 <url_parse_file+0x64>)
   30676:	a801      	add	r0, sp, #4
   30678:	f00f f8d5 	bl	3f826 <swallow>
		if (err) {
   3067c:	2800      	cmp	r0, #0
   3067e:	d0e7      	beq.n	30650 <url_parse_file+0x10>
   30680:	e7f4      	b.n	3066c <url_parse_file+0x2c>
	len = strlen(cur);
   30682:	9801      	ldr	r0, [sp, #4]
   30684:	f7ec fddd 	bl	1d242 <strlen>
   30688:	9901      	ldr	r1, [sp, #4]
   3068a:	4604      	mov	r4, r0
   3068c:	4602      	mov	r2, r0
   3068e:	4628      	mov	r0, r5
   30690:	f010 feb0 	bl	413f4 <memcpy>
	file[len] = '\0';
   30694:	2300      	movs	r3, #0
	return 0;
   30696:	4618      	mov	r0, r3
	file[len] = '\0';
   30698:	552b      	strb	r3, [r5, r4]
	return 0;
   3069a:	e7e9      	b.n	30670 <url_parse_file+0x30>
   3069c:	0004ad4e 	.word	0x0004ad4e
   306a0:	0004ad4d 	.word	0x0004ad4d
   306a4:	0004ad4f 	.word	0x0004ad4f

000306a8 <http_get_request_send>:
int url_parse_host(const char *url, char *host, size_t len);
int url_parse_file(const char *url, char *file, size_t len);
int socket_send(const struct download_client *client, size_t len, int timeout);

int http_get_request_send(struct download_client *client)
{
   306a8:	b570      	push	{r4, r5, r6, lr}
	int len;
	size_t off;
	char host[HOSTNAME_SIZE];
	char file[FILENAME_SIZE];

	__ASSERT_NO_MSG(client->host);
   306aa:	f8d0 3924 	ldr.w	r3, [r0, #2340]	; 0x924
{
   306ae:	4605      	mov	r5, r0
   306b0:	b0d4      	sub	sp, #336	; 0x150
	__ASSERT_NO_MSG(client->host);
   306b2:	b943      	cbnz	r3, 306c6 <http_get_request_send+0x1e>
   306b4:	4929      	ldr	r1, [pc, #164]	; (3075c <http_get_request_send+0xb4>)
   306b6:	482a      	ldr	r0, [pc, #168]	; (30760 <http_get_request_send+0xb8>)
   306b8:	2237      	movs	r2, #55	; 0x37
   306ba:	f00c f9e7 	bl	3ca8c <assert_print>
   306be:	2137      	movs	r1, #55	; 0x37
   306c0:	4826      	ldr	r0, [pc, #152]	; (3075c <http_get_request_send+0xb4>)
   306c2:	f00c f9dc 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   306c6:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
   306ca:	b943      	cbnz	r3, 306de <http_get_request_send+0x36>
   306cc:	4923      	ldr	r1, [pc, #140]	; (3075c <http_get_request_send+0xb4>)
   306ce:	4824      	ldr	r0, [pc, #144]	; (30760 <http_get_request_send+0xb8>)
   306d0:	2238      	movs	r2, #56	; 0x38
   306d2:	f00c f9db 	bl	3ca8c <assert_print>
   306d6:	2138      	movs	r1, #56	; 0x38
   306d8:	4820      	ldr	r0, [pc, #128]	; (3075c <http_get_request_send+0xb4>)
   306da:	f00c f9d0 	bl	3ca7e <assert_post_action>

	err = url_parse_host(client->host, host, sizeof(host));
   306de:	ae04      	add	r6, sp, #16
   306e0:	2280      	movs	r2, #128	; 0x80
   306e2:	4631      	mov	r1, r6
   306e4:	f8d5 0924 	ldr.w	r0, [r5, #2340]	; 0x924
   306e8:	f7ff ff32 	bl	30550 <url_parse_host>
	if (err) {
   306ec:	4604      	mov	r4, r0
   306ee:	bb70      	cbnz	r0, 3074e <http_get_request_send+0xa6>
		return err;
	}

	err = url_parse_file(client->file, file, sizeof(file));
   306f0:	22c0      	movs	r2, #192	; 0xc0
   306f2:	f8d5 0928 	ldr.w	r0, [r5, #2344]	; 0x928
   306f6:	a924      	add	r1, sp, #144	; 0x90
   306f8:	f7ff ffa2 	bl	30640 <url_parse_file>
	if (err) {
   306fc:	4604      	mov	r4, r0
   306fe:	bb30      	cbnz	r0, 3074e <http_get_request_send+0xa6>
		return err;
	}

	/* Offset of last byte in range (Content-Range) */
	if (client->config.frag_size_override) {
   30700:	f8d5 3934 	ldr.w	r3, [r5, #2356]	; 0x934
		off = client->progress + client->config.frag_size_override - 1;
   30704:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
	if (client->config.frag_size_override) {
   30708:	b323      	cbz	r3, 30754 <http_get_request_send+0xac>
		off = client->progress + client->config.frag_size_override - 1;
   3070a:	440b      	add	r3, r1
   3070c:	3b01      	subs	r3, #1
	} else {
		off = client->progress +
			CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE - 1;
	}

	if (client->file_size != 0) {
   3070e:	f8d5 291c 	ldr.w	r2, [r5, #2332]	; 0x91c
   30712:	b11a      	cbz	r2, 3071c <http_get_request_send+0x74>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size - 1);
   30714:	3a01      	subs	r2, #1
   30716:	4293      	cmp	r3, r2
   30718:	bf28      	it	cs
   3071a:	4613      	movcs	r3, r2
	}

	if (client->proto == IPPROTO_TLS_1_2
	   || IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_RANGE_REQUESTS)) {
		len = snprintf(client->buf,
   3071c:	e9cd 1301 	strd	r1, r3, [sp, #4]
   30720:	4a10      	ldr	r2, [pc, #64]	; (30764 <http_get_request_send+0xbc>)
   30722:	f640 01fc 	movw	r1, #2300	; 0x8fc
   30726:	ab24      	add	r3, sp, #144	; 0x90
   30728:	9600      	str	r6, [sp, #0]
   3072a:	f105 001c 	add.w	r0, r5, #28
   3072e:	f009 ffb9 	bl	3a6a4 <sniprintf>

	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_LOG_HEADERS)) {
		LOG_HEXDUMP_DBG(client->buf, len, "HTTP request");
	}

	err = socket_send(client, len, 0);
   30732:	2200      	movs	r2, #0
		len = snprintf(client->buf,
   30734:	4601      	mov	r1, r0
	err = socket_send(client, len, 0);
   30736:	4628      	mov	r0, r5
   30738:	f7ff faf6 	bl	2fd28 <socket_send>
	if (err) {
   3073c:	4604      	mov	r4, r0
   3073e:	b130      	cbz	r0, 3074e <http_get_request_send+0xa6>
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   30740:	f00d f81d 	bl	3d77e <__errno>
   30744:	2145      	movs	r1, #69	; 0x45
   30746:	6802      	ldr	r2, [r0, #0]
   30748:	4807      	ldr	r0, [pc, #28]	; (30768 <http_get_request_send+0xc0>)
   3074a:	f00c f9d9 	bl	3cb00 <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   3074e:	4620      	mov	r0, r4
   30750:	b054      	add	sp, #336	; 0x150
   30752:	bd70      	pop	{r4, r5, r6, pc}
		off = client->progress +
   30754:	f201 33ff 	addw	r3, r1, #1023	; 0x3ff
   30758:	e7d9      	b.n	3070e <http_get_request_send+0x66>
   3075a:	bf00      	nop
   3075c:	0004ad51 	.word	0x0004ad51
   30760:	0004409e 	.word	0x0004409e
   30764:	0004ad8b 	.word	0x0004ad8b
   30768:	0004add6 	.word	0x0004add6

0003076c <http_parse>:
{
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   3076c:	f8d0 3918 	ldr.w	r3, [r0, #2328]	; 0x918
{
   30770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	client->offset += len;
   30774:	440b      	add	r3, r1
   30776:	f8c0 3918 	str.w	r3, [r0, #2328]	; 0x918

	if (!client->http.has_header) {
   3077a:	f890 3940 	ldrb.w	r3, [r0, #2368]	; 0x940
{
   3077e:	4604      	mov	r4, r0
   30780:	4688      	mov	r8, r1
	if (!client->http.has_header) {
   30782:	2b00      	cmp	r3, #0
   30784:	f040 8092 	bne.w	308ac <http_parse+0x140>
	p = strstr(client->buf, "\r\n\r\n");
   30788:	f100 071c 	add.w	r7, r0, #28
   3078c:	4638      	mov	r0, r7
   3078e:	4956      	ldr	r1, [pc, #344]	; (308e8 <http_parse+0x17c>)
   30790:	f011 f86a 	bl	41868 <strstr>
	if (!p || p > client->buf + client->offset) {
   30794:	4605      	mov	r5, r0
   30796:	b918      	cbnz	r0, 307a0 <http_parse+0x34>
		rc = http_header_parse(client, &hdr_len);
		if (rc > 0) {
			/* Wait for header */
			return 1;
   30798:	2001      	movs	r0, #1
			      CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE)) {
		return 1;
	}

	return 0;
}
   3079a:	b003      	add	sp, #12
   3079c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!p || p > client->buf + client->offset) {
   307a0:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
   307a4:	443b      	add	r3, r7
   307a6:	4298      	cmp	r0, r3
   307a8:	d8f6      	bhi.n	30798 <http_parse+0x2c>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   307aa:	484f      	ldr	r0, [pc, #316]	; (308e8 <http_parse+0x17c>)
   307ac:	f7ec fd49 	bl	1d242 <strlen>
   307b0:	4405      	add	r5, r0
   307b2:	463b      	mov	r3, r7
   307b4:	4628      	mov	r0, r5
		client->buf[i] = tolower(client->buf[i]);
   307b6:	4e4d      	ldr	r6, [pc, #308]	; (308ec <http_parse+0x180>)
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   307b8:	eba5 0907 	sub.w	r9, r5, r7
	for (size_t i = 0; i < *hdr_len; i++) {
   307bc:	4298      	cmp	r0, r3
   307be:	d10a      	bne.n	307d6 <http_parse+0x6a>
	p = strstr(client->buf, "http/1.1 ");
   307c0:	4638      	mov	r0, r7
   307c2:	494b      	ldr	r1, [pc, #300]	; (308f0 <http_parse+0x184>)
   307c4:	f011 f850 	bl	41868 <strstr>
	if (!p) {
   307c8:	4606      	mov	r6, r0
   307ca:	b970      	cbnz	r0, 307ea <http_parse+0x7e>
		LOG_ERR("Server response missing HTTP/1.1");
   307cc:	2145      	movs	r1, #69	; 0x45
   307ce:	4849      	ldr	r0, [pc, #292]	; (308f4 <http_parse+0x188>)
				LOG_ERR("No file size in response");
   307d0:	f00c f996 	bl	3cb00 <z_log_minimal_printk>
   307d4:	e02b      	b.n	3082e <http_parse+0xc2>
		client->buf[i] = tolower(client->buf[i]);
   307d6:	781a      	ldrb	r2, [r3, #0]
   307d8:	5d91      	ldrb	r1, [r2, r6]
   307da:	f001 0103 	and.w	r1, r1, #3
   307de:	2901      	cmp	r1, #1
   307e0:	bf08      	it	eq
   307e2:	3220      	addeq	r2, #32
   307e4:	f803 2b01 	strb.w	r2, [r3], #1
	for (size_t i = 0; i < *hdr_len; i++) {
   307e8:	e7e8      	b.n	307bc <http_parse+0x50>
	p += strlen("http/1.1 ");
   307ea:	4841      	ldr	r0, [pc, #260]	; (308f0 <http_parse+0x184>)
   307ec:	f7ec fd29 	bl	1d242 <strlen>
   307f0:	4406      	add	r6, r0
	http_status = strtoul(p, &q, 10);
   307f2:	220a      	movs	r2, #10
   307f4:	4630      	mov	r0, r6
   307f6:	a901      	add	r1, sp, #4
   307f8:	f00a f95e 	bl	3aab8 <strtoul>
	if (!q) {
   307fc:	9b01      	ldr	r3, [sp, #4]
   307fe:	b913      	cbnz	r3, 30806 <http_parse+0x9a>
		LOG_ERR("Server response malformed: status code not found");
   30800:	2145      	movs	r1, #69	; 0x45
   30802:	483d      	ldr	r0, [pc, #244]	; (308f8 <http_parse+0x18c>)
   30804:	e7e4      	b.n	307d0 <http_parse+0x64>
	if (http_status != expected_status) {
   30806:	28ce      	cmp	r0, #206	; 0xce
   30808:	d017      	beq.n	3083a <http_parse+0xce>
		while ((*q != '\0') && (*q != '\r') && (*q != '\n')) {
   3080a:	f242 4201 	movw	r2, #9217	; 0x2401
   3080e:	9901      	ldr	r1, [sp, #4]
   30810:	780b      	ldrb	r3, [r1, #0]
   30812:	2b0d      	cmp	r3, #13
   30814:	d80e      	bhi.n	30834 <http_parse+0xc8>
   30816:	fa22 f303 	lsr.w	r3, r2, r3
   3081a:	43db      	mvns	r3, r3
   3081c:	f013 0301 	ands.w	r3, r3, #1
   30820:	d108      	bne.n	30834 <http_parse+0xc8>
		*q = '\0';
   30822:	700b      	strb	r3, [r1, #0]
		LOG_ERR("Unexpected HTTP response: %s", log_strdup(p));
   30824:	4632      	mov	r2, r6
   30826:	2145      	movs	r1, #69	; 0x45
   30828:	4834      	ldr	r0, [pc, #208]	; (308fc <http_parse+0x190>)
   3082a:	f00c f969 	bl	3cb00 <z_log_minimal_printk>
			return -1;
   3082e:	f04f 30ff 	mov.w	r0, #4294967295
   30832:	e7b2      	b.n	3079a <http_parse+0x2e>
			q++;
   30834:	3101      	adds	r1, #1
   30836:	9101      	str	r1, [sp, #4]
   30838:	e7e9      	b.n	3080e <http_parse+0xa2>
	if (client->file_size == 0) {
   3083a:	f8d4 391c 	ldr.w	r3, [r4, #2332]	; 0x91c
   3083e:	b9b3      	cbnz	r3, 3086e <http_parse+0x102>
			p = strstr(client->buf, "content-range");
   30840:	4638      	mov	r0, r7
   30842:	492f      	ldr	r1, [pc, #188]	; (30900 <http_parse+0x194>)
   30844:	f011 f810 	bl	41868 <strstr>
			if (!p) {
   30848:	b910      	cbnz	r0, 30850 <http_parse+0xe4>
				LOG_ERR("Server did not send "
   3084a:	2145      	movs	r1, #69	; 0x45
   3084c:	482d      	ldr	r0, [pc, #180]	; (30904 <http_parse+0x198>)
   3084e:	e7bf      	b.n	307d0 <http_parse+0x64>
			p = strstr(p, "/");
   30850:	492d      	ldr	r1, [pc, #180]	; (30908 <http_parse+0x19c>)
   30852:	f011 f809 	bl	41868 <strstr>
			if (!p) {
   30856:	b910      	cbnz	r0, 3085e <http_parse+0xf2>
				LOG_ERR("No file size in response");
   30858:	2145      	movs	r1, #69	; 0x45
   3085a:	482c      	ldr	r0, [pc, #176]	; (3090c <http_parse+0x1a0>)
   3085c:	e7b8      	b.n	307d0 <http_parse+0x64>
		client->file_size += atoi(p + 1);
   3085e:	3001      	adds	r0, #1
   30860:	f010 fda6 	bl	413b0 <atoi>
   30864:	f8d4 391c 	ldr.w	r3, [r4, #2332]	; 0x91c
   30868:	4418      	add	r0, r3
   3086a:	f8c4 091c 	str.w	r0, [r4, #2332]	; 0x91c
	p = strstr(client->buf, "connection: close");
   3086e:	4638      	mov	r0, r7
   30870:	4927      	ldr	r1, [pc, #156]	; (30910 <http_parse+0x1a4>)
   30872:	f010 fff9 	bl	41868 <strstr>
	if (p) {
   30876:	b130      	cbz	r0, 30886 <http_parse+0x11a>
		LOG_WRN("Peer closed connection, will re-connect");
   30878:	2157      	movs	r1, #87	; 0x57
   3087a:	4826      	ldr	r0, [pc, #152]	; (30914 <http_parse+0x1a8>)
   3087c:	f00c f940 	bl	3cb00 <z_log_minimal_printk>
		client->http.connection_close = true;
   30880:	2301      	movs	r3, #1
   30882:	f884 3941 	strb.w	r3, [r4, #2369]	; 0x941
	client->http.has_header = true;
   30886:	2301      	movs	r3, #1
		if (client->offset != hdr_len) {
   30888:	f8d4 2918 	ldr.w	r2, [r4, #2328]	; 0x918
	client->http.has_header = true;
   3088c:	f884 3940 	strb.w	r3, [r4, #2368]	; 0x940
		if (client->offset != hdr_len) {
   30890:	454a      	cmp	r2, r9
   30892:	d024      	beq.n	308de <http_parse+0x172>
   30894:	4629      	mov	r1, r5
   30896:	4638      	mov	r0, r7
   30898:	eba2 0209 	sub.w	r2, r2, r9
   3089c:	f010 fdaa 	bl	413f4 <memcpy>
			client->offset -= hdr_len;
   308a0:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
   308a4:	eba3 0309 	sub.w	r3, r3, r9
			client->offset = 0;
   308a8:	f8c4 3918 	str.w	r3, [r4, #2328]	; 0x918
	client->progress += MIN(client->offset, len);
   308ac:	f8d4 3920 	ldr.w	r3, [r4, #2336]	; 0x920
   308b0:	f8d4 2918 	ldr.w	r2, [r4, #2328]	; 0x918
	if (client->progress != client->file_size &&
   308b4:	f8d4 191c 	ldr.w	r1, [r4, #2332]	; 0x91c
	client->progress += MIN(client->offset, len);
   308b8:	4590      	cmp	r8, r2
   308ba:	bf94      	ite	ls
   308bc:	4443      	addls	r3, r8
   308be:	189b      	addhi	r3, r3, r2
	if (client->progress != client->file_size &&
   308c0:	428b      	cmp	r3, r1
	client->progress += MIN(client->offset, len);
   308c2:	f8c4 3920 	str.w	r3, [r4, #2336]	; 0x920
	if (client->progress != client->file_size &&
   308c6:	d00c      	beq.n	308e2 <http_parse+0x176>
	    client->offset < (client->config.frag_size_override != 0 ?
   308c8:	f8d4 0934 	ldr.w	r0, [r4, #2356]	; 0x934
			      client->config.frag_size_override :
   308cc:	2800      	cmp	r0, #0
   308ce:	bf08      	it	eq
   308d0:	f44f 6080 	moveq.w	r0, #1024	; 0x400
	if (client->progress != client->file_size &&
   308d4:	4290      	cmp	r0, r2
   308d6:	bf94      	ite	ls
   308d8:	2000      	movls	r0, #0
   308da:	2001      	movhi	r0, #1
   308dc:	e75d      	b.n	3079a <http_parse+0x2e>
			client->offset = 0;
   308de:	2300      	movs	r3, #0
   308e0:	e7e2      	b.n	308a8 <http_parse+0x13c>
	return 0;
   308e2:	2000      	movs	r0, #0
   308e4:	e759      	b.n	3079a <http_parse+0x2e>
   308e6:	bf00      	nop
   308e8:	0004add1 	.word	0x0004add1
   308ec:	0004bd43 	.word	0x0004bd43
   308f0:	0004ae01 	.word	0x0004ae01
   308f4:	0004ae0b 	.word	0x0004ae0b
   308f8:	0004ae31 	.word	0x0004ae31
   308fc:	0004ae67 	.word	0x0004ae67
   30900:	0004ae89 	.word	0x0004ae89
   30904:	0004ae97 	.word	0x0004ae97
   30908:	0004ad4f 	.word	0x0004ad4f
   3090c:	0004aecc 	.word	0x0004aecc
   30910:	0004aeea 	.word	0x0004aeea
   30914:	0004aefc 	.word	0x0004aefc

00030918 <send_error_evt>:
	};
	callback(&evt);
}

static void send_error_evt(enum fota_download_error_cause cause)
{
   30918:	b507      	push	{r0, r1, r2, lr}
	__ASSERT(cause != FOTA_DOWNLOAD_ERROR_CAUSE_NO_ERROR, "use a valid error cause");
	const struct fota_download_evt evt = {
   3091a:	2300      	movs	r3, #0
   3091c:	2204      	movs	r2, #4
   3091e:	e9cd 3300 	strd	r3, r3, [sp]
   30922:	f88d 2000 	strb.w	r2, [sp]
		.id = FOTA_DOWNLOAD_EVT_ERROR,
		.cause = cause
	};
	downloading = false;
   30926:	4a05      	ldr	r2, [pc, #20]	; (3093c <send_error_evt+0x24>)
	const struct fota_download_evt evt = {
   30928:	f88d 0004 	strb.w	r0, [sp, #4]
	downloading = false;
   3092c:	7013      	strb	r3, [r2, #0]
	callback(&evt);
   3092e:	4b04      	ldr	r3, [pc, #16]	; (30940 <send_error_evt+0x28>)
   30930:	4668      	mov	r0, sp
   30932:	681b      	ldr	r3, [r3, #0]
   30934:	4798      	blx	r3
}
   30936:	b003      	add	sp, #12
   30938:	f85d fb04 	ldr.w	pc, [sp], #4
   3093c:	2001d2f7 	.word	0x2001d2f7
   30940:	2001a1c8 	.word	0x2001a1c8

00030944 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   30944:	b513      	push	{r0, r1, r4, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   30946:	a801      	add	r0, sp, #4
   30948:	f000 fa6a 	bl	30e20 <dfu_target_offset_get>
	if (err != 0) {
   3094c:	4603      	mov	r3, r0
   3094e:	b148      	cbz	r0, 30964 <download_with_offset+0x20>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   30950:	2145      	movs	r1, #69	; 0x45
   30952:	4a16      	ldr	r2, [pc, #88]	; (309ac <download_with_offset+0x68>)
   30954:	4816      	ldr	r0, [pc, #88]	; (309b0 <download_with_offset+0x6c>)
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
	if (err != 0) {
		LOG_ERR("%s failed to start download  with error %d", __func__,
   30956:	f00c f8d3 	bl	3cb00 <z_log_minimal_printk>
			err);
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   3095a:	2001      	movs	r0, #1
   3095c:	f7ff ffdc 	bl	30918 <send_error_evt>
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
	downloading = true;
	return;
}
   30960:	b002      	add	sp, #8
   30962:	bd10      	pop	{r4, pc}
	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   30964:	4c13      	ldr	r4, [pc, #76]	; (309b4 <download_with_offset+0x70>)
   30966:	4620      	mov	r0, r4
   30968:	f8d4 1924 	ldr.w	r1, [r4, #2340]	; 0x924
   3096c:	f604 122c 	addw	r2, r4, #2348	; 0x92c
   30970:	f7ff fa4c 	bl	2fe0c <download_client_connect>
	if (err != 0) {
   30974:	4603      	mov	r3, r0
   30976:	b118      	cbz	r0, 30980 <download_with_offset+0x3c>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   30978:	2145      	movs	r1, #69	; 0x45
   3097a:	4a0c      	ldr	r2, [pc, #48]	; (309ac <download_with_offset+0x68>)
   3097c:	480e      	ldr	r0, [pc, #56]	; (309b8 <download_with_offset+0x74>)
   3097e:	e7ea      	b.n	30956 <download_with_offset+0x12>
	err = download_client_start(&dlc, dlc.file, offset);
   30980:	4620      	mov	r0, r4
   30982:	9a01      	ldr	r2, [sp, #4]
   30984:	f8d4 1928 	ldr.w	r1, [r4, #2344]	; 0x928
   30988:	f7ff fd80 	bl	3048c <download_client_start>
	if (err != 0) {
   3098c:	4603      	mov	r3, r0
   3098e:	b118      	cbz	r0, 30998 <download_with_offset+0x54>
		LOG_ERR("%s failed to start download  with error %d", __func__,
   30990:	2145      	movs	r1, #69	; 0x45
   30992:	4a06      	ldr	r2, [pc, #24]	; (309ac <download_with_offset+0x68>)
   30994:	4809      	ldr	r0, [pc, #36]	; (309bc <download_with_offset+0x78>)
   30996:	e7de      	b.n	30956 <download_with_offset+0x12>
	LOG_INF("Downloading from offset: 0x%x", offset);
   30998:	9a01      	ldr	r2, [sp, #4]
   3099a:	2149      	movs	r1, #73	; 0x49
   3099c:	4808      	ldr	r0, [pc, #32]	; (309c0 <download_with_offset+0x7c>)
   3099e:	f00c f8af 	bl	3cb00 <z_log_minimal_printk>
	downloading = true;
   309a2:	2201      	movs	r2, #1
   309a4:	4b07      	ldr	r3, [pc, #28]	; (309c4 <download_with_offset+0x80>)
   309a6:	701a      	strb	r2, [r3, #0]
	return;
   309a8:	e7da      	b.n	30960 <download_with_offset+0x1c>
   309aa:	bf00      	nop
   309ac:	0004b16f 	.word	0x0004b16f
   309b0:	0004af29 	.word	0x0004af29
   309b4:	20017360 	.word	0x20017360
   309b8:	0004af54 	.word	0x0004af54
   309bc:	0004af7c 	.word	0x0004af7c
   309c0:	0004afac 	.word	0x0004afac
   309c4:	2001d2f7 	.word	0x2001d2f7

000309c8 <download_client_callback>:
{
   309c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (event == NULL) {
   309ca:	4605      	mov	r5, r0
   309cc:	2800      	cmp	r0, #0
   309ce:	f000 80f2 	beq.w	30bb6 <_flash_used+0xe6>
	switch (event->id) {
   309d2:	7803      	ldrb	r3, [r0, #0]
   309d4:	2b01      	cmp	r3, #1
   309d6:	f000 80bf 	beq.w	30b58 <_flash_used+0x88>
   309da:	2b02      	cmp	r3, #2
   309dc:	f000 8098 	beq.w	30b10 <_flash_used+0x40>
   309e0:	2b00      	cmp	r3, #0
   309e2:	f040 80eb 	bne.w	30bbc <_flash_used+0xec>
		if (first_fragment) {
   309e6:	4e76      	ldr	r6, [pc, #472]	; (30bc0 <_flash_used+0xf0>)
   309e8:	7833      	ldrb	r3, [r6, #0]
   309ea:	2b00      	cmp	r3, #0
   309ec:	d05a      	beq.n	30aa4 <download_client_callback+0xdc>
			err = download_client_file_size_get(&dlc, &file_size);
   309ee:	4975      	ldr	r1, [pc, #468]	; (30bc4 <_flash_used+0xf4>)
   309f0:	4875      	ldr	r0, [pc, #468]	; (30bc8 <_flash_used+0xf8>)
   309f2:	f00e ff0e 	bl	3f812 <download_client_file_size_get>
			if (err != 0) {
   309f6:	4604      	mov	r4, r0
   309f8:	b108      	cbz	r0, 309fe <download_client_callback+0x36>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   309fa:	2001      	movs	r0, #1
   309fc:	e06b      	b.n	30ad6 <_flash_used+0x6>
			first_fragment = false;
   309fe:	7030      	strb	r0, [r6, #0]
			img_type = dfu_target_img_type(event->fragment.buf,
   30a00:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   30a04:	f000 f9c2 	bl	30d8c <dfu_target_img_type>
   30a08:	4b70      	ldr	r3, [pc, #448]	; (30bcc <_flash_used+0xfc>)
   30a0a:	b2c0      	uxtb	r0, r0
   30a0c:	7018      	strb	r0, [r3, #0]
			if ((img_type_expected != DFU_TARGET_IMAGE_TYPE_ANY) &&
   30a0e:	4b70      	ldr	r3, [pc, #448]	; (30bd0 <_flash_used+0x100>)
   30a10:	781b      	ldrb	r3, [r3, #0]
   30a12:	b1e3      	cbz	r3, 30a4e <download_client_callback+0x86>
   30a14:	4298      	cmp	r0, r3
   30a16:	d01a      	beq.n	30a4e <download_client_callback+0x86>
				LOG_ERR("FOTA image type %d does not match expected type %d",
   30a18:	4602      	mov	r2, r0
   30a1a:	2145      	movs	r1, #69	; 0x45
   30a1c:	486d      	ldr	r0, [pc, #436]	; (30bd4 <_flash_used+0x104>)
   30a1e:	f00c f86f 	bl	3cb00 <z_log_minimal_printk>
				err_cause = FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH;
   30a22:	2503      	movs	r5, #3
				err = -EPROTOTYPE;
   30a24:	f06f 046a 	mvn.w	r4, #106	; 0x6a
				(void)download_client_disconnect(&dlc);
   30a28:	4867      	ldr	r0, [pc, #412]	; (30bc8 <_flash_used+0xf8>)
   30a2a:	f7ff fbd3 	bl	301d4 <download_client_disconnect>
				send_error_evt(err_cause);
   30a2e:	4628      	mov	r0, r5
   30a30:	f7ff ff72 	bl	30918 <send_error_evt>
				int res = dfu_target_reset();
   30a34:	f000 fa20 	bl	30e78 <dfu_target_reset>
				if (res != 0) {
   30a38:	4602      	mov	r2, r0
   30a3a:	b118      	cbz	r0, 30a44 <download_client_callback+0x7c>
					LOG_ERR("Unable to reset DFU target, err: %d",
   30a3c:	2145      	movs	r1, #69	; 0x45
   30a3e:	4866      	ldr	r0, [pc, #408]	; (30bd8 <_flash_used+0x108>)
   30a40:	f00c f85e 	bl	3cb00 <z_log_minimal_printk>
				first_fragment = true;
   30a44:	2301      	movs	r3, #1
   30a46:	7033      	strb	r3, [r6, #0]
}
   30a48:	4620      	mov	r0, r4
   30a4a:	b004      	add	sp, #16
   30a4c:	bd70      	pop	{r4, r5, r6, pc}
				err = dfu_target_init(img_type, 0, file_size,
   30a4e:	4a5d      	ldr	r2, [pc, #372]	; (30bc4 <_flash_used+0xf4>)
   30a50:	2100      	movs	r1, #0
   30a52:	4b62      	ldr	r3, [pc, #392]	; (30bdc <_flash_used+0x10c>)
   30a54:	6812      	ldr	r2, [r2, #0]
   30a56:	f000 f9b5 	bl	30dc4 <dfu_target_init>
				if ((err < 0) && (err != -EBUSY)) {
   30a5a:	1e04      	subs	r4, r0, #0
   30a5c:	da09      	bge.n	30a72 <download_client_callback+0xaa>
   30a5e:	f114 0f10 	cmn.w	r4, #16
   30a62:	d006      	beq.n	30a72 <download_client_callback+0xaa>
					LOG_ERR("dfu_target_init error %d", err);
   30a64:	4622      	mov	r2, r4
   30a66:	2145      	movs	r1, #69	; 0x45
   30a68:	485d      	ldr	r0, [pc, #372]	; (30be0 <_flash_used+0x110>)
   30a6a:	f00c f849 	bl	3cb00 <z_log_minimal_printk>
					err_cause = FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED;
   30a6e:	2501      	movs	r5, #1
   30a70:	e7da      	b.n	30a28 <download_client_callback+0x60>
			err = dfu_target_offset_get(&offset);
   30a72:	a801      	add	r0, sp, #4
   30a74:	f000 f9d4 	bl	30e20 <dfu_target_offset_get>
			if (err != 0) {
   30a78:	b110      	cbz	r0, 30a80 <download_client_callback+0xb8>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30a7a:	2001      	movs	r0, #1
   30a7c:	f7ff ff4c 	bl	30918 <send_error_evt>
			if (offset != 0) {
   30a80:	9b01      	ldr	r3, [sp, #4]
   30a82:	b17b      	cbz	r3, 30aa4 <download_client_callback+0xdc>
				(void)download_client_disconnect(&dlc);
   30a84:	4850      	ldr	r0, [pc, #320]	; (30bc8 <_flash_used+0xf8>)
   30a86:	f7ff fba5 	bl	301d4 <download_client_disconnect>
				k_work_schedule(&dlc_with_offset_work,
   30a8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   30a8e:	2300      	movs	r3, #0
   30a90:	4854      	ldr	r0, [pc, #336]	; (30be4 <_flash_used+0x114>)
   30a92:	f006 fddd 	bl	37650 <k_work_schedule>
				LOG_INF("Refuse fragment, restart with offset");
   30a96:	2149      	movs	r1, #73	; 0x49
   30a98:	4853      	ldr	r0, [pc, #332]	; (30be8 <_flash_used+0x118>)
   30a9a:	f00c f831 	bl	3cb00 <z_log_minimal_printk>
				return -1;
   30a9e:	f04f 34ff 	mov.w	r4, #4294967295
   30aa2:	e7d1      	b.n	30a48 <download_client_callback+0x80>
		err = dfu_target_write(event->fragment.buf,
   30aa4:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   30aa8:	f000 f9c4 	bl	30e34 <dfu_target_write>
		if (err != 0) {
   30aac:	4604      	mov	r4, r0
   30aae:	b1a8      	cbz	r0, 30adc <_flash_used+0xc>
			LOG_ERR("dfu_target_write error %d", err);
   30ab0:	4602      	mov	r2, r0
   30ab2:	2145      	movs	r1, #69	; 0x45
   30ab4:	484d      	ldr	r0, [pc, #308]	; (30bec <_flash_used+0x11c>)
   30ab6:	f00c f823 	bl	3cb00 <z_log_minimal_printk>
			int res = dfu_target_done(false);
   30aba:	2000      	movs	r0, #0
   30abc:	f000 f9c6 	bl	30e4c <dfu_target_done>
			if (res != 0) {
   30ac0:	b118      	cbz	r0, 30aca <download_client_callback+0x102>
				LOG_ERR("Unable to free DFU target resources");
   30ac2:	2145      	movs	r1, #69	; 0x45
   30ac4:	484a      	ldr	r0, [pc, #296]	; (30bf0 <_flash_used+0x120>)
   30ac6:	f00c f81b 	bl	3cb00 <z_log_minimal_printk>
			first_fragment = true;
   30aca:	2301      	movs	r3, #1
			(void) download_client_disconnect(&dlc);
   30acc:	483e      	ldr	r0, [pc, #248]	; (30bc8 <_flash_used+0xf8>)
			first_fragment = true;
   30ace:	7033      	strb	r3, [r6, #0]
			(void) download_client_disconnect(&dlc);
   30ad0:	f7ff fb80 	bl	301d4 <download_client_disconnect>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE);
   30ad4:	2002      	movs	r0, #2
   30ad6:	f7ff ff1f 	bl	30918 <send_error_evt>
			return err;
   30ada:	e7b5      	b.n	30a48 <download_client_callback+0x80>
		if (IS_ENABLED(CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT) &&
   30adc:	7833      	ldrb	r3, [r6, #0]
   30ade:	2b00      	cmp	r3, #0
   30ae0:	d1b2      	bne.n	30a48 <download_client_callback+0x80>
			err = dfu_target_offset_get(&offset);
   30ae2:	a801      	add	r0, sp, #4
   30ae4:	f000 f99c 	bl	30e20 <dfu_target_offset_get>
			if (err != 0) {
   30ae8:	4604      	mov	r4, r0
   30aea:	2800      	cmp	r0, #0
   30aec:	d185      	bne.n	309fa <download_client_callback+0x32>
			if (file_size == 0) {
   30aee:	4b35      	ldr	r3, [pc, #212]	; (30bc4 <_flash_used+0xf4>)
   30af0:	681a      	ldr	r2, [r3, #0]
   30af2:	2a00      	cmp	r2, #0
   30af4:	d081      	beq.n	309fa <download_client_callback+0x32>
			send_progress((offset * 100) / file_size);
   30af6:	2164      	movs	r1, #100	; 0x64
   30af8:	9b01      	ldr	r3, [sp, #4]
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   30afa:	f88d 0008 	strb.w	r0, [sp, #8]
			send_progress((offset * 100) / file_size);
   30afe:	434b      	muls	r3, r1
   30b00:	fbb3 f3f2 	udiv	r3, r3, r2
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   30b04:	9303      	str	r3, [sp, #12]
	callback(&evt);
   30b06:	4b3b      	ldr	r3, [pc, #236]	; (30bf4 <_flash_used+0x124>)
   30b08:	a802      	add	r0, sp, #8
   30b0a:	681b      	ldr	r3, [r3, #0]
   30b0c:	4798      	blx	r3
}
   30b0e:	e79b      	b.n	30a48 <download_client_callback+0x80>
		err = dfu_target_done(true);
   30b10:	2001      	movs	r0, #1
   30b12:	f000 f99b 	bl	30e4c <dfu_target_done>
		if (err == 0) {
   30b16:	4604      	mov	r4, r0
   30b18:	b918      	cbnz	r0, 30b22 <_flash_used+0x52>
			err = dfu_target_schedule_update(0);
   30b1a:	f000 f9c3 	bl	30ea4 <dfu_target_schedule_update>
		if (err != 0) {
   30b1e:	4604      	mov	r4, r0
   30b20:	b128      	cbz	r0, 30b2e <_flash_used+0x5e>
			LOG_ERR("dfu_target_done error: %d", err);
   30b22:	4622      	mov	r2, r4
   30b24:	2145      	movs	r1, #69	; 0x45
   30b26:	4834      	ldr	r0, [pc, #208]	; (30bf8 <_flash_used+0x128>)
   30b28:	f00b ffea 	bl	3cb00 <z_log_minimal_printk>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30b2c:	e765      	b.n	309fa <download_client_callback+0x32>
		err = download_client_disconnect(&dlc);
   30b2e:	4826      	ldr	r0, [pc, #152]	; (30bc8 <_flash_used+0xf8>)
   30b30:	f7ff fb50 	bl	301d4 <download_client_disconnect>
		if (err != 0) {
   30b34:	4604      	mov	r4, r0
   30b36:	2800      	cmp	r0, #0
   30b38:	f47f af5f 	bne.w	309fa <download_client_callback+0x32>
	const struct fota_download_evt evt = {
   30b3c:	2501      	movs	r5, #1
	callback(&evt);
   30b3e:	4b2d      	ldr	r3, [pc, #180]	; (30bf4 <_flash_used+0x124>)
	const struct fota_download_evt evt = {
   30b40:	e9cd 0002 	strd	r0, r0, [sp, #8]
	callback(&evt);
   30b44:	681b      	ldr	r3, [r3, #0]
	const struct fota_download_evt evt = {
   30b46:	f88d 5008 	strb.w	r5, [sp, #8]
	callback(&evt);
   30b4a:	a802      	add	r0, sp, #8
   30b4c:	4798      	blx	r3
		first_fragment = true;
   30b4e:	4b1c      	ldr	r3, [pc, #112]	; (30bc0 <_flash_used+0xf0>)
   30b50:	701d      	strb	r5, [r3, #0]
		downloading = false;
   30b52:	4b2a      	ldr	r3, [pc, #168]	; (30bfc <_flash_used+0x12c>)
   30b54:	701c      	strb	r4, [r3, #0]
		break;
   30b56:	e777      	b.n	30a48 <download_client_callback+0x80>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   30b58:	4e29      	ldr	r6, [pc, #164]	; (30c00 <_flash_used+0x130>)
   30b5a:	6832      	ldr	r2, [r6, #0]
   30b5c:	b192      	cbz	r2, 30b84 <_flash_used+0xb4>
   30b5e:	6844      	ldr	r4, [r0, #4]
   30b60:	f104 0380 	add.w	r3, r4, #128	; 0x80
   30b64:	2b18      	cmp	r3, #24
   30b66:	d80d      	bhi.n	30b84 <_flash_used+0xb4>
   30b68:	4c26      	ldr	r4, [pc, #152]	; (30c04 <_flash_used+0x134>)
   30b6a:	40dc      	lsrs	r4, r3
   30b6c:	43e4      	mvns	r4, r4
   30b6e:	f014 0401 	ands.w	r4, r4, #1
   30b72:	d107      	bne.n	30b84 <_flash_used+0xb4>
			LOG_WRN("Download socket error. %d retries left...",
   30b74:	2157      	movs	r1, #87	; 0x57
   30b76:	4824      	ldr	r0, [pc, #144]	; (30c08 <_flash_used+0x138>)
   30b78:	f00b ffc2 	bl	3cb00 <z_log_minimal_printk>
			socket_retries_left--;
   30b7c:	6833      	ldr	r3, [r6, #0]
   30b7e:	3b01      	subs	r3, #1
   30b80:	6033      	str	r3, [r6, #0]
   30b82:	e761      	b.n	30a48 <download_client_callback+0x80>
			download_client_disconnect(&dlc);
   30b84:	4810      	ldr	r0, [pc, #64]	; (30bc8 <_flash_used+0xf8>)
   30b86:	f7ff fb25 	bl	301d4 <download_client_disconnect>
			LOG_ERR("Download client error");
   30b8a:	2145      	movs	r1, #69	; 0x45
   30b8c:	481f      	ldr	r0, [pc, #124]	; (30c0c <_flash_used+0x13c>)
   30b8e:	f00b ffb7 	bl	3cb00 <z_log_minimal_printk>
			err = dfu_target_done(false);
   30b92:	2000      	movs	r0, #0
   30b94:	f000 f95a 	bl	30e4c <dfu_target_done>
			if (err == -EACCES) {
   30b98:	f110 0f0d 	cmn.w	r0, #13
   30b9c:	d004      	beq.n	30ba8 <_flash_used+0xd8>
			} else if (err != 0) {
   30b9e:	b118      	cbz	r0, 30ba8 <_flash_used+0xd8>
				LOG_ERR("Unable to deinitialze resources "
   30ba0:	2145      	movs	r1, #69	; 0x45
   30ba2:	481b      	ldr	r0, [pc, #108]	; (30c10 <_flash_used+0x140>)
   30ba4:	f00b ffac 	bl	3cb00 <z_log_minimal_printk>
			first_fragment = true;
   30ba8:	2001      	movs	r0, #1
   30baa:	4b05      	ldr	r3, [pc, #20]	; (30bc0 <_flash_used+0xf0>)
   30bac:	7018      	strb	r0, [r3, #0]
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30bae:	f7ff feb3 	bl	30918 <send_error_evt>
			return event->error;
   30bb2:	686c      	ldr	r4, [r5, #4]
   30bb4:	e748      	b.n	30a48 <download_client_callback+0x80>
		return -EINVAL;
   30bb6:	f06f 0415 	mvn.w	r4, #21
   30bba:	e745      	b.n	30a48 <download_client_callback+0x80>
	switch (event->id) {
   30bbc:	2400      	movs	r4, #0
   30bbe:	e743      	b.n	30a48 <download_client_callback+0x80>
   30bc0:	2001d3b8 	.word	0x2001d3b8
   30bc4:	2001a1cc 	.word	0x2001a1cc
   30bc8:	20017360 	.word	0x20017360
   30bcc:	2001d3b9 	.word	0x2001d3b9
   30bd0:	2001d3ba 	.word	0x2001d3ba
   30bd4:	0004afcf 	.word	0x0004afcf
   30bd8:	0004b025 	.word	0x0004b025
   30bdc:	00030c15 	.word	0x00030c15
   30be0:	0004b007 	.word	0x0004b007
   30be4:	20018db8 	.word	0x20018db8
   30be8:	0004b04e 	.word	0x0004b04e
   30bec:	0004b078 	.word	0x0004b078
   30bf0:	0004b097 	.word	0x0004b097
   30bf4:	2001a1c8 	.word	0x2001a1c8
   30bf8:	0004b0c0 	.word	0x0004b0c0
   30bfc:	2001d2f7 	.word	0x2001d2f7
   30c00:	2001a3d0 	.word	0x2001a3d0
   30c04:	01001001 	.word	0x01001001
   30c08:	00049f77 	.word	0x00049f77
   30c0c:	0004b0df 	.word	0x0004b0df
   30c10:	0004b0fa 	.word	0x0004b0fa

00030c14 <dfu_target_callback_handler>:
{
   30c14:	b507      	push	{r0, r1, r2, lr}
	switch (evt) {
   30c16:	b138      	cbz	r0, 30c28 <dfu_target_callback_handler+0x14>
   30c18:	2801      	cmp	r0, #1
   30c1a:	d011      	beq.n	30c40 <dfu_target_callback_handler+0x2c>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30c1c:	2001      	movs	r0, #1
}
   30c1e:	b003      	add	sp, #12
   30c20:	f85d eb04 	ldr.w	lr, [sp], #4
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30c24:	f7ff be78 	b.w	30918 <send_error_evt>
	const struct fota_download_evt evt = {
   30c28:	2302      	movs	r3, #2
   30c2a:	e9cd 0000 	strd	r0, r0, [sp]
   30c2e:	f88d 3000 	strb.w	r3, [sp]
	callback(&evt);
   30c32:	4b06      	ldr	r3, [pc, #24]	; (30c4c <dfu_target_callback_handler+0x38>)
   30c34:	4668      	mov	r0, sp
   30c36:	681b      	ldr	r3, [r3, #0]
   30c38:	4798      	blx	r3
}
   30c3a:	b003      	add	sp, #12
   30c3c:	f85d fb04 	ldr.w	pc, [sp], #4
	const struct fota_download_evt evt = {
   30c40:	2300      	movs	r3, #0
   30c42:	e9cd 3300 	strd	r3, r3, [sp]
   30c46:	2303      	movs	r3, #3
   30c48:	e7f1      	b.n	30c2e <dfu_target_callback_handler+0x1a>
   30c4a:	bf00      	nop
   30c4c:	2001a1c8 	.word	0x2001a1c8

00030c50 <fota_download_start_with_image_type>:
}

int fota_download_start_with_image_type(const char *host, const char *file,
	int sec_tag, uint8_t pdn_id, size_t fragment_size,
	const enum dfu_target_image_type expected_type)
{
   30c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   30c52:	460d      	mov	r5, r1
	 */
	static char file_buf[FILE_BUF_LEN];
	const char *file_buf_ptr = file_buf;
	int err = -1;

	struct download_client_cfg config = {
   30c54:	2100      	movs	r1, #0
{
   30c56:	b08b      	sub	sp, #44	; 0x2c
	struct download_client_cfg config = {
   30c58:	9101      	str	r1, [sp, #4]
   30c5a:	f88d 3004 	strb.w	r3, [sp, #4]
   30c5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
		.sec_tag = sec_tag,
		.pdn_id = pdn_id,
		.frag_size_override = fragment_size,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   30c60:	4604      	mov	r4, r0
	struct download_client_cfg config = {
   30c62:	9103      	str	r1, [sp, #12]
   30c64:	9200      	str	r2, [sp, #0]
   30c66:	9302      	str	r3, [sp, #8]
	if (host == NULL || file == NULL || callback == NULL) {
   30c68:	2800      	cmp	r0, #0
   30c6a:	d045      	beq.n	30cf8 <fota_download_start_with_image_type+0xa8>
   30c6c:	2d00      	cmp	r5, #0
   30c6e:	d043      	beq.n	30cf8 <fota_download_start_with_image_type+0xa8>
   30c70:	4b24      	ldr	r3, [pc, #144]	; (30d04 <fota_download_start_with_image_type+0xb4>)
   30c72:	681b      	ldr	r3, [r3, #0]
   30c74:	2b00      	cmp	r3, #0
   30c76:	d03f      	beq.n	30cf8 <fota_download_start_with_image_type+0xa8>
		return -EINVAL;
	}

	if (downloading) {
   30c78:	4f23      	ldr	r7, [pc, #140]	; (30d08 <fota_download_start_with_image_type+0xb8>)
   30c7a:	783b      	ldrb	r3, [r7, #0]
   30c7c:	2b00      	cmp	r3, #0
   30c7e:	d13e      	bne.n	30cfe <fota_download_start_with_image_type+0xae>
		return -EALREADY;
	}

	if (sec_tag != -1 && !is_ip_address(host)) {
   30c80:	3201      	adds	r2, #1
   30c82:	d012      	beq.n	30caa <fota_download_start_with_image_type+0x5a>
		union { uintptr_t x; void * val; } parm2 = { .val = dst };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
   30c84:	4601      	mov	r1, r0
   30c86:	f10d 0212 	add.w	r2, sp, #18
   30c8a:	2001      	movs	r0, #1
   30c8c:	f00c fb71 	bl	3d372 <z_impl_zsock_inet_pton>
	if (zsock_inet_pton(AF_INET, host, sa.data) == 1) {
   30c90:	2801      	cmp	r0, #1
   30c92:	d00a      	beq.n	30caa <fota_download_start_with_image_type+0x5a>
   30c94:	2002      	movs	r0, #2
   30c96:	4621      	mov	r1, r4
   30c98:	f10d 0212 	add.w	r2, sp, #18
   30c9c:	f00c fb69 	bl	3d372 <z_impl_zsock_inet_pton>
	} else if (zsock_inet_pton(AF_INET6, host, sa.data) == 1) {
   30ca0:	2801      	cmp	r0, #1
		config.set_tls_hostname = true;
   30ca2:	bf1c      	itt	ne
   30ca4:	2301      	movne	r3, #1
   30ca6:	f88d 300c 	strbne.w	r3, [sp, #12]
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   30caa:	2202      	movs	r2, #2
   30cac:	4b17      	ldr	r3, [pc, #92]	; (30d0c <fota_download_start_with_image_type+0xbc>)

	strncpy(file_buf, file, sizeof(file_buf) - 1);
   30cae:	4e18      	ldr	r6, [pc, #96]	; (30d10 <fota_download_start_with_image_type+0xc0>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   30cb0:	601a      	str	r2, [r3, #0]
	strncpy(file_buf, file, sizeof(file_buf) - 1);
   30cb2:	4629      	mov	r1, r5
   30cb4:	22bf      	movs	r2, #191	; 0xbf
   30cb6:	4630      	mov	r0, r6
   30cb8:	f010 fda3 	bl	41802 <strncpy>
	file_buf[sizeof(file_buf) - 1] = '\0';
   30cbc:	2300      	movs	r3, #0
		LOG_INF("B1 update, selected file:\n%s", log_strdup(update));
		file_buf_ptr = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   30cbe:	4621      	mov	r1, r4
   30cc0:	466a      	mov	r2, sp
   30cc2:	4814      	ldr	r0, [pc, #80]	; (30d14 <fota_download_start_with_image_type+0xc4>)
	file_buf[sizeof(file_buf) - 1] = '\0';
   30cc4:	f886 30bf 	strb.w	r3, [r6, #191]	; 0xbf
	err = download_client_connect(&dlc, host, &config);
   30cc8:	f7ff f8a0 	bl	2fe0c <download_client_connect>
	if (err != 0) {
   30ccc:	4604      	mov	r4, r0
   30cce:	b968      	cbnz	r0, 30cec <fota_download_start_with_image_type+0x9c>
		return err;
	}

	img_type_expected = expected_type;
   30cd0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   30cd4:	4b10      	ldr	r3, [pc, #64]	; (30d18 <fota_download_start_with_image_type+0xc8>)

	err = download_client_start(&dlc, file_buf_ptr, 0);
   30cd6:	4631      	mov	r1, r6
	img_type_expected = expected_type;
   30cd8:	701a      	strb	r2, [r3, #0]
	err = download_client_start(&dlc, file_buf_ptr, 0);
   30cda:	4602      	mov	r2, r0
   30cdc:	480d      	ldr	r0, [pc, #52]	; (30d14 <fota_download_start_with_image_type+0xc4>)
   30cde:	f7ff fbd5 	bl	3048c <download_client_start>
	if (err != 0) {
   30ce2:	4604      	mov	r4, r0
   30ce4:	b128      	cbz	r0, 30cf2 <fota_download_start_with_image_type+0xa2>
		download_client_disconnect(&dlc);
   30ce6:	480b      	ldr	r0, [pc, #44]	; (30d14 <fota_download_start_with_image_type+0xc4>)
   30ce8:	f7ff fa74 	bl	301d4 <download_client_disconnect>
	}

	downloading = true;

	return 0;
}
   30cec:	4620      	mov	r0, r4
   30cee:	b00b      	add	sp, #44	; 0x2c
   30cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	downloading = true;
   30cf2:	2301      	movs	r3, #1
   30cf4:	703b      	strb	r3, [r7, #0]
	return 0;
   30cf6:	e7f9      	b.n	30cec <fota_download_start_with_image_type+0x9c>
		return -EINVAL;
   30cf8:	f06f 0415 	mvn.w	r4, #21
   30cfc:	e7f6      	b.n	30cec <fota_download_start_with_image_type+0x9c>
		return -EALREADY;
   30cfe:	f06f 0477 	mvn.w	r4, #119	; 0x77
   30d02:	e7f3      	b.n	30cec <fota_download_start_with_image_type+0x9c>
   30d04:	2001a1c8 	.word	0x2001a1c8
   30d08:	2001d2f7 	.word	0x2001d2f7
   30d0c:	2001a3d0 	.word	0x2001a3d0
   30d10:	2001d2f8 	.word	0x2001d2f8
   30d14:	20017360 	.word	0x20017360
   30d18:	2001d3ba 	.word	0x2001d3ba

00030d1c <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   30d1c:	b510      	push	{r4, lr}
	if (client_callback == NULL) {
   30d1e:	b1f8      	cbz	r0, 30d60 <fota_download_init+0x44>
		return -EINVAL;
	}

	int err;

	callback = client_callback;
   30d20:	4b11      	ldr	r3, [pc, #68]	; (30d68 <fota_download_init+0x4c>)
	dlc.set_native_tls = CONFIG_FOTA_DOWNLOAD_NATIVE_TLS;
#endif

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	/* Set the required buffer for MCUboot targets */
	err = dfu_target_mcuboot_set_buf(mcuboot_buf, sizeof(mcuboot_buf));
   30d22:	f44f 7100 	mov.w	r1, #512	; 0x200
	callback = client_callback;
   30d26:	6018      	str	r0, [r3, #0]
	err = dfu_target_mcuboot_set_buf(mcuboot_buf, sizeof(mcuboot_buf));
   30d28:	4810      	ldr	r0, [pc, #64]	; (30d6c <fota_download_init+0x50>)
   30d2a:	f000 fa63 	bl	311f4 <dfu_target_mcuboot_set_buf>
	if (err) {
   30d2e:	4604      	mov	r4, r0
   30d30:	b138      	cbz	r0, 30d42 <fota_download_init+0x26>
		LOG_ERR("%s failed to set MCUboot flash buffer %d",
   30d32:	4603      	mov	r3, r0
   30d34:	2145      	movs	r1, #69	; 0x45
   30d36:	4a0e      	ldr	r2, [pc, #56]	; (30d70 <fota_download_init+0x54>)
   30d38:	480e      	ldr	r0, [pc, #56]	; (30d74 <fota_download_init+0x58>)
   30d3a:	f00b fee1 	bl	3cb00 <z_log_minimal_printk>
		return err;
	}

	first_fragment = true;
	return 0;
}
   30d3e:	4620      	mov	r0, r4
   30d40:	bd10      	pop	{r4, pc}
	k_work_init_delayable(&dlc_with_offset_work, download_with_offset);
   30d42:	490d      	ldr	r1, [pc, #52]	; (30d78 <fota_download_init+0x5c>)
   30d44:	480d      	ldr	r0, [pc, #52]	; (30d7c <fota_download_init+0x60>)
   30d46:	f006 fbf5 	bl	37534 <k_work_init_delayable>
	err = download_client_init(&dlc, download_client_callback);
   30d4a:	490d      	ldr	r1, [pc, #52]	; (30d80 <fota_download_init+0x64>)
   30d4c:	480d      	ldr	r0, [pc, #52]	; (30d84 <fota_download_init+0x68>)
   30d4e:	f7ff f82d 	bl	2fdac <download_client_init>
	if (err != 0) {
   30d52:	4604      	mov	r4, r0
   30d54:	2800      	cmp	r0, #0
   30d56:	d1f2      	bne.n	30d3e <fota_download_init+0x22>
	first_fragment = true;
   30d58:	2201      	movs	r2, #1
   30d5a:	4b0b      	ldr	r3, [pc, #44]	; (30d88 <fota_download_init+0x6c>)
   30d5c:	701a      	strb	r2, [r3, #0]
	return 0;
   30d5e:	e7ee      	b.n	30d3e <fota_download_init+0x22>
		return -EINVAL;
   30d60:	f06f 0415 	mvn.w	r4, #21
   30d64:	e7eb      	b.n	30d3e <fota_download_init+0x22>
   30d66:	bf00      	nop
   30d68:	2001a1c8 	.word	0x2001a1c8
   30d6c:	2001a1d0 	.word	0x2001a1d0
   30d70:	0004b184 	.word	0x0004b184
   30d74:	0004b133 	.word	0x0004b133
   30d78:	00030945 	.word	0x00030945
   30d7c:	20018db8 	.word	0x20018db8
   30d80:	000309c9 	.word	0x000309c9
   30d84:	20017360 	.word	0x20017360
   30d88:	2001d3b8 	.word	0x2001d3b8

00030d8c <dfu_target_img_type>:
static const struct dfu_target *current_target;
static int current_img_num = -1;

int dfu_target_img_type(const void *const buf, size_t len)
{
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   30d8c:	291f      	cmp	r1, #31
{
   30d8e:	b510      	push	{r4, lr}
   30d90:	4604      	mov	r4, r0
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   30d92:	d90d      	bls.n	30db0 <dfu_target_img_type+0x24>
		return -EAGAIN;
	}
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   30d94:	f000 fa26 	bl	311e4 <dfu_target_mcuboot_identify>
   30d98:	b968      	cbnz	r0, 30db6 <dfu_target_img_type+0x2a>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (dfu_target_modem_delta_identify(buf)) {
   30d9a:	4620      	mov	r0, r4
   30d9c:	f000 f93e 	bl	3101c <dfu_target_modem_delta_identify>
   30da0:	b958      	cbnz	r0, 30dba <dfu_target_img_type+0x2e>
#ifdef CONFIG_DFU_TARGET_FULL_MODEM
	if (dfu_target_full_modem_identify(buf)) {
		return DFU_TARGET_IMAGE_TYPE_FULL_MODEM;
	}
#endif
	LOG_ERR("No supported image type found");
   30da2:	4807      	ldr	r0, [pc, #28]	; (30dc0 <dfu_target_img_type+0x34>)
   30da4:	2145      	movs	r1, #69	; 0x45
   30da6:	f00b feab 	bl	3cb00 <z_log_minimal_printk>
	return -ENOTSUP;
   30daa:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   30dae:	bd10      	pop	{r4, pc}
		return -EAGAIN;
   30db0:	f06f 000a 	mvn.w	r0, #10
   30db4:	e7fb      	b.n	30dae <dfu_target_img_type+0x22>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   30db6:	2001      	movs	r0, #1
   30db8:	e7f9      	b.n	30dae <dfu_target_img_type+0x22>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   30dba:	2002      	movs	r0, #2
   30dbc:	e7f7      	b.n	30dae <dfu_target_img_type+0x22>
   30dbe:	bf00      	nop
   30dc0:	0004b197 	.word	0x0004b197

00030dc4 <dfu_target_init>:

int dfu_target_init(int img_type, int img_num, size_t file_size, dfu_target_callback_t cb)
{
   30dc4:	b570      	push	{r4, r5, r6, lr}
   30dc6:	4604      	mov	r4, r0
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   30dc8:	2c01      	cmp	r4, #1
{
   30dca:	4610      	mov	r0, r2
   30dcc:	461a      	mov	r2, r3
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   30dce:	d008      	beq.n	30de2 <dfu_target_init+0x1e>
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   30dd0:	2c02      	cmp	r4, #2
   30dd2:	d017      	beq.n	30e04 <dfu_target_init+0x40>
	if (img_type == DFU_TARGET_IMAGE_TYPE_FULL_MODEM) {
		new_target = &dfu_target_full_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   30dd4:	480d      	ldr	r0, [pc, #52]	; (30e0c <dfu_target_init+0x48>)
   30dd6:	2145      	movs	r1, #69	; 0x45
   30dd8:	f00b fe92 	bl	3cb00 <z_log_minimal_printk>
		return -ENOTSUP;
   30ddc:	f06f 0085 	mvn.w	r0, #133	; 0x85

	current_target = new_target;
	current_img_num = img_num;

	return current_target->init(file_size, img_num, cb);
}
   30de0:	bd70      	pop	{r4, r5, r6, pc}
		new_target = &dfu_target_mcuboot;
   30de2:	4d0b      	ldr	r5, [pc, #44]	; (30e10 <dfu_target_init+0x4c>)
	if (new_target == current_target
   30de4:	4e0b      	ldr	r6, [pc, #44]	; (30e14 <dfu_target_init+0x50>)
   30de6:	6833      	ldr	r3, [r6, #0]
   30de8:	42ab      	cmp	r3, r5
   30dea:	4b0b      	ldr	r3, [pc, #44]	; (30e18 <dfu_target_init+0x54>)
   30dec:	d104      	bne.n	30df8 <dfu_target_init+0x34>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA
   30dee:	2c02      	cmp	r4, #2
   30df0:	d002      	beq.n	30df8 <dfu_target_init+0x34>
	   && current_img_num == img_num) {
   30df2:	681c      	ldr	r4, [r3, #0]
   30df4:	42a1      	cmp	r1, r4
   30df6:	d007      	beq.n	30e08 <dfu_target_init+0x44>
	current_target = new_target;
   30df8:	6035      	str	r5, [r6, #0]
	current_img_num = img_num;
   30dfa:	6019      	str	r1, [r3, #0]
	return current_target->init(file_size, img_num, cb);
   30dfc:	682b      	ldr	r3, [r5, #0]
}
   30dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, img_num, cb);
   30e02:	4718      	bx	r3
		new_target = &dfu_target_modem_delta;
   30e04:	4d05      	ldr	r5, [pc, #20]	; (30e1c <dfu_target_init+0x58>)
   30e06:	e7ed      	b.n	30de4 <dfu_target_init+0x20>
		return 0;
   30e08:	2000      	movs	r0, #0
   30e0a:	e7e9      	b.n	30de0 <dfu_target_init+0x1c>
   30e0c:	0004b1ba 	.word	0x0004b1ba
   30e10:	000430e0 	.word	0x000430e0
   30e14:	2001a3d4 	.word	0x2001a3d4
   30e18:	200146ec 	.word	0x200146ec
   30e1c:	000430f4 	.word	0x000430f4

00030e20 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   30e20:	4b03      	ldr	r3, [pc, #12]	; (30e30 <dfu_target_offset_get+0x10>)
   30e22:	681b      	ldr	r3, [r3, #0]
   30e24:	b10b      	cbz	r3, 30e2a <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   30e26:	685b      	ldr	r3, [r3, #4]
   30e28:	4718      	bx	r3
}
   30e2a:	f06f 000c 	mvn.w	r0, #12
   30e2e:	4770      	bx	lr
   30e30:	2001a3d4 	.word	0x2001a3d4

00030e34 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   30e34:	4a04      	ldr	r2, [pc, #16]	; (30e48 <dfu_target_write+0x14>)
   30e36:	6812      	ldr	r2, [r2, #0]
   30e38:	b112      	cbz	r2, 30e40 <dfu_target_write+0xc>
   30e3a:	b108      	cbz	r0, 30e40 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   30e3c:	6893      	ldr	r3, [r2, #8]
   30e3e:	4718      	bx	r3
}
   30e40:	f06f 000c 	mvn.w	r0, #12
   30e44:	4770      	bx	lr
   30e46:	bf00      	nop
   30e48:	2001a3d4 	.word	0x2001a3d4

00030e4c <dfu_target_done>:

int dfu_target_done(bool successful)
{
	int err;

	if (current_target == NULL) {
   30e4c:	4b08      	ldr	r3, [pc, #32]	; (30e70 <dfu_target_done+0x24>)
{
   30e4e:	b510      	push	{r4, lr}
	if (current_target == NULL) {
   30e50:	681b      	ldr	r3, [r3, #0]
   30e52:	b14b      	cbz	r3, 30e68 <dfu_target_done+0x1c>
		return -EACCES;
	}

	err = current_target->done(successful);
   30e54:	68db      	ldr	r3, [r3, #12]
   30e56:	4798      	blx	r3
	if (err != 0) {
   30e58:	4604      	mov	r4, r0
   30e5a:	b118      	cbz	r0, 30e64 <dfu_target_done+0x18>
		LOG_ERR("Unable to clean up dfu_target");
   30e5c:	2145      	movs	r1, #69	; 0x45
   30e5e:	4805      	ldr	r0, [pc, #20]	; (30e74 <dfu_target_done+0x28>)
   30e60:	f00b fe4e 	bl	3cb00 <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   30e64:	4620      	mov	r0, r4
   30e66:	bd10      	pop	{r4, pc}
		return -EACCES;
   30e68:	f06f 040c 	mvn.w	r4, #12
   30e6c:	e7fa      	b.n	30e64 <dfu_target_done+0x18>
   30e6e:	bf00      	nop
   30e70:	2001a3d4 	.word	0x2001a3d4
   30e74:	0004b1d2 	.word	0x0004b1d2

00030e78 <dfu_target_reset>:

int dfu_target_reset(void)
{
   30e78:	b538      	push	{r3, r4, r5, lr}
	if (current_target != NULL) {
   30e7a:	4d08      	ldr	r5, [pc, #32]	; (30e9c <dfu_target_reset+0x24>)
   30e7c:	682b      	ldr	r3, [r5, #0]
   30e7e:	b153      	cbz	r3, 30e96 <dfu_target_reset+0x1e>
		int err = current_target->done(false);
   30e80:	2000      	movs	r0, #0
   30e82:	68db      	ldr	r3, [r3, #12]
   30e84:	4798      	blx	r3

		if (err != 0) {
   30e86:	4604      	mov	r4, r0
   30e88:	b128      	cbz	r0, 30e96 <dfu_target_reset+0x1e>
			LOG_ERR("Unable to clean up dfu_target");
   30e8a:	2145      	movs	r1, #69	; 0x45
   30e8c:	4804      	ldr	r0, [pc, #16]	; (30ea0 <dfu_target_reset+0x28>)
   30e8e:	f00b fe37 	bl	3cb00 <z_log_minimal_printk>
			return err;
		}
	}
	current_target = NULL;
	return 0;
}
   30e92:	4620      	mov	r0, r4
   30e94:	bd38      	pop	{r3, r4, r5, pc}
	current_target = NULL;
   30e96:	2400      	movs	r4, #0
   30e98:	602c      	str	r4, [r5, #0]
	return 0;
   30e9a:	e7fa      	b.n	30e92 <dfu_target_reset+0x1a>
   30e9c:	2001a3d4 	.word	0x2001a3d4
   30ea0:	0004b1d2 	.word	0x0004b1d2

00030ea4 <dfu_target_schedule_update>:

int dfu_target_schedule_update(int img_num)
{
   30ea4:	b510      	push	{r4, lr}
	int err = 0;

	if (current_target == NULL) {
   30ea6:	4c05      	ldr	r4, [pc, #20]	; (30ebc <dfu_target_schedule_update+0x18>)
   30ea8:	6823      	ldr	r3, [r4, #0]
   30eaa:	b123      	cbz	r3, 30eb6 <dfu_target_schedule_update+0x12>
		return -EACCES;
	}

	err = current_target->schedule_update(img_num);
   30eac:	691b      	ldr	r3, [r3, #16]
   30eae:	4798      	blx	r3
	current_target = NULL;
   30eb0:	2300      	movs	r3, #0
   30eb2:	6023      	str	r3, [r4, #0]

	return err;
}
   30eb4:	bd10      	pop	{r4, pc}
		return -EACCES;
   30eb6:	f06f 000c 	mvn.w	r0, #12
   30eba:	e7fb      	b.n	30eb4 <dfu_target_schedule_update+0x10>
   30ebc:	2001a3d4 	.word	0x2001a3d4

00030ec0 <dfu_target_stream_get_stream>:
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

struct stream_flash_ctx *dfu_target_stream_get_stream(void)
{
	return &stream;
}
   30ec0:	4800      	ldr	r0, [pc, #0]	; (30ec4 <dfu_target_stream_get_stream+0x4>)
   30ec2:	4770      	bx	lr
   30ec4:	2001a3dc 	.word	0x2001a3dc

00030ec8 <dfu_target_stream_init>:

int dfu_target_stream_init(const struct dfu_target_stream_init *init)
{
   30ec8:	b530      	push	{r4, r5, lr}
	int err;

	if (current_id != NULL) {
   30eca:	4c12      	ldr	r4, [pc, #72]	; (30f14 <dfu_target_stream_init+0x4c>)
{
   30ecc:	b085      	sub	sp, #20
	if (current_id != NULL) {
   30ece:	6823      	ldr	r3, [r4, #0]
   30ed0:	b9d3      	cbnz	r3, 30f08 <dfu_target_stream_init+0x40>
		return -EFAULT;
	}

	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   30ed2:	b1e0      	cbz	r0, 30f0e <dfu_target_stream_init+0x46>
   30ed4:	6805      	ldr	r5, [r0, #0]
   30ed6:	b1d5      	cbz	r5, 30f0e <dfu_target_stream_init+0x46>
   30ed8:	6841      	ldr	r1, [r0, #4]
   30eda:	b1c1      	cbz	r1, 30f0e <dfu_target_stream_init+0x46>
	    init->buf == NULL) {
   30edc:	6882      	ldr	r2, [r0, #8]
	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   30ede:	b1b2      	cbz	r2, 30f0e <dfu_target_stream_init+0x46>
		return -EINVAL;
	}

	current_id = init->id;
   30ee0:	6025      	str	r5, [r4, #0]

	err = stream_flash_init(&stream, init->fdev, init->buf, init->len,
   30ee2:	9302      	str	r3, [sp, #8]
   30ee4:	6943      	ldr	r3, [r0, #20]
   30ee6:	9301      	str	r3, [sp, #4]
   30ee8:	6903      	ldr	r3, [r0, #16]
   30eea:	9300      	str	r3, [sp, #0]
   30eec:	68c3      	ldr	r3, [r0, #12]
   30eee:	480a      	ldr	r0, [pc, #40]	; (30f18 <dfu_target_stream_init+0x50>)
   30ef0:	f7f0 ffb0 	bl	21e54 <stream_flash_init>
				init->offset, init->size, NULL);
	if (err) {
   30ef4:	4604      	mov	r4, r0
   30ef6:	b120      	cbz	r0, 30f02 <dfu_target_stream_init+0x3a>
		LOG_ERR("stream_flash_init failed (err %d)", err);
   30ef8:	4602      	mov	r2, r0
   30efa:	2145      	movs	r1, #69	; 0x45
   30efc:	4807      	ldr	r0, [pc, #28]	; (30f1c <dfu_target_stream_init+0x54>)
   30efe:	f00b fdff 	bl	3cb00 <z_log_minimal_printk>
		return err;
	}
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

	return 0;
}
   30f02:	4620      	mov	r0, r4
   30f04:	b005      	add	sp, #20
   30f06:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   30f08:	f06f 040d 	mvn.w	r4, #13
   30f0c:	e7f9      	b.n	30f02 <dfu_target_stream_init+0x3a>
		return -EINVAL;
   30f0e:	f06f 0415 	mvn.w	r4, #21
   30f12:	e7f6      	b.n	30f02 <dfu_target_stream_init+0x3a>
   30f14:	2001a3d8 	.word	0x2001a3d8
   30f18:	2001a3dc 	.word	0x2001a3dc
   30f1c:	0004b200 	.word	0x0004b200

00030f20 <dfu_target_stream_offset_get>:

int dfu_target_stream_offset_get(size_t *out)
{
   30f20:	b510      	push	{r4, lr}
   30f22:	4604      	mov	r4, r0
	*out = stream_flash_bytes_written(&stream);
   30f24:	4802      	ldr	r0, [pc, #8]	; (30f30 <dfu_target_stream_offset_get+0x10>)
   30f26:	f00c fb23 	bl	3d570 <stream_flash_bytes_written>
   30f2a:	6020      	str	r0, [r4, #0]

	return 0;
}
   30f2c:	2000      	movs	r0, #0
   30f2e:	bd10      	pop	{r4, pc}
   30f30:	2001a3dc 	.word	0x2001a3dc

00030f34 <dfu_target_stream_write>:

int dfu_target_stream_write(const uint8_t *buf, size_t len)
{
   30f34:	460a      	mov	r2, r1
   30f36:	b510      	push	{r4, lr}
	int err = stream_flash_buffered_write(&stream, buf, len, false);
   30f38:	4601      	mov	r1, r0
   30f3a:	2300      	movs	r3, #0
   30f3c:	4805      	ldr	r0, [pc, #20]	; (30f54 <dfu_target_stream_write+0x20>)
   30f3e:	f00c fad3 	bl	3d4e8 <stream_flash_buffered_write>

	if (err != 0) {
   30f42:	4604      	mov	r4, r0
   30f44:	b120      	cbz	r0, 30f50 <dfu_target_stream_write+0x1c>
		LOG_ERR("stream_flash_buffered_write error %d", err);
   30f46:	4602      	mov	r2, r0
   30f48:	2145      	movs	r1, #69	; 0x45
   30f4a:	4803      	ldr	r0, [pc, #12]	; (30f58 <dfu_target_stream_write+0x24>)
   30f4c:	f00b fdd8 	bl	3cb00 <z_log_minimal_printk>
		LOG_WRN("Unable to store write progress: %d", err);
	}
#endif

	return err;
}
   30f50:	4620      	mov	r0, r4
   30f52:	bd10      	pop	{r4, pc}
   30f54:	2001a3dc 	.word	0x2001a3dc
   30f58:	0004b227 	.word	0x0004b227

00030f5c <dfu_target_stream_done>:

int dfu_target_stream_done(bool successful)
{
   30f5c:	b510      	push	{r4, lr}
	int err = 0;

	if (successful) {
   30f5e:	b188      	cbz	r0, 30f84 <dfu_target_stream_done+0x28>
		err = stream_flash_buffered_write(&stream, NULL, 0, true);
   30f60:	2200      	movs	r2, #0
   30f62:	2301      	movs	r3, #1
   30f64:	4611      	mov	r1, r2
   30f66:	4808      	ldr	r0, [pc, #32]	; (30f88 <dfu_target_stream_done+0x2c>)
   30f68:	f00c fabe 	bl	3d4e8 <stream_flash_buffered_write>
		if (err != 0) {
   30f6c:	4604      	mov	r4, r0
   30f6e:	b120      	cbz	r0, 30f7a <dfu_target_stream_done+0x1e>
			LOG_ERR("stream_flash_buffered_write error %d", err);
   30f70:	4602      	mov	r2, r0
   30f72:	2145      	movs	r1, #69	; 0x45
   30f74:	4805      	ldr	r0, [pc, #20]	; (30f8c <dfu_target_stream_done+0x30>)
   30f76:	f00b fdc3 	bl	3cb00 <z_log_minimal_printk>
			LOG_ERR("Unable to reset write progress: %d", err);
		}
#endif
	}

	current_id = NULL;
   30f7a:	2200      	movs	r2, #0
   30f7c:	4b04      	ldr	r3, [pc, #16]	; (30f90 <dfu_target_stream_done+0x34>)

	return err;
}
   30f7e:	4620      	mov	r0, r4
	current_id = NULL;
   30f80:	601a      	str	r2, [r3, #0]
}
   30f82:	bd10      	pop	{r4, pc}
	int err = 0;
   30f84:	4604      	mov	r4, r0
   30f86:	e7f8      	b.n	30f7a <dfu_target_stream_done+0x1e>
   30f88:	2001a3dc 	.word	0x2001a3dc
   30f8c:	0004b227 	.word	0x0004b227
   30f90:	2001a3d8 	.word	0x2001a3d8

00030f94 <delete_banked_modem_delta_fw>:

static dfu_target_callback_t callback;

#define SLEEP_TIME 1
static int delete_banked_modem_delta_fw(void)
{
   30f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int err;
	int offset;
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
   30f96:	2149      	movs	r1, #73	; 0x49
   30f98:	481b      	ldr	r0, [pc, #108]	; (31008 <delete_banked_modem_delta_fw+0x74>)
   30f9a:	f00b fdb1 	bl	3cb00 <z_log_minimal_printk>
	err = nrf_modem_delta_dfu_erase();
   30f9e:	f004 fa8b 	bl	354b8 <nrf_modem_delta_dfu_erase>
	if (err != 0) {
   30fa2:	4602      	mov	r2, r0
   30fa4:	b140      	cbz	r0, 30fb8 <delete_banked_modem_delta_fw+0x24>
		LOG_ERR("Failed to delete backup, error %d", err);
   30fa6:	2145      	movs	r1, #69	; 0x45
   30fa8:	4818      	ldr	r0, [pc, #96]	; (3100c <delete_banked_modem_delta_fw+0x78>)
   30faa:	f00b fda9 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   30fae:	f06f 040d 	mvn.w	r4, #13
			break;
		}
	}

	return 0;
}
   30fb2:	4620      	mov	r0, r4
   30fb4:	b003      	add	sp, #12
   30fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   30fb8:	253c      	movs	r5, #60	; 0x3c
				callback(DFU_TARGET_EVT_TIMEOUT);
   30fba:	4e15      	ldr	r6, [pc, #84]	; (31010 <delete_banked_modem_delta_fw+0x7c>)
				LOG_ERR("Error during erase, error %d", err);
   30fbc:	4f15      	ldr	r7, [pc, #84]	; (31014 <delete_banked_modem_delta_fw+0x80>)
		err = nrf_modem_delta_dfu_offset(&offset);
   30fbe:	a801      	add	r0, sp, #4
   30fc0:	f004 f976 	bl	352b0 <nrf_modem_delta_dfu_offset>
		if (err != 0) {
   30fc4:	4604      	mov	r4, r0
   30fc6:	b1a8      	cbz	r0, 30ff4 <delete_banked_modem_delta_fw+0x60>
			if (timeout < 0) {
   30fc8:	2d00      	cmp	r5, #0
   30fca:	da03      	bge.n	30fd4 <delete_banked_modem_delta_fw+0x40>
				callback(DFU_TARGET_EVT_TIMEOUT);
   30fcc:	2000      	movs	r0, #0
   30fce:	6833      	ldr	r3, [r6, #0]
   30fd0:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   30fd2:	253c      	movs	r5, #60	; 0x3c
			if (err != NRF_MODEM_DELTA_DFU_ERASE_PENDING &&
   30fd4:	2c11      	cmp	r4, #17
   30fd6:	d006      	beq.n	30fe6 <delete_banked_modem_delta_fw+0x52>
   30fd8:	2c05      	cmp	r4, #5
   30fda:	d004      	beq.n	30fe6 <delete_banked_modem_delta_fw+0x52>
				LOG_ERR("Error during erase, error %d", err);
   30fdc:	4622      	mov	r2, r4
   30fde:	2145      	movs	r1, #69	; 0x45
   30fe0:	4638      	mov	r0, r7
   30fe2:	f00b fd8d 	bl	3cb00 <z_log_minimal_printk>
	return z_impl_k_sleep(timeout);
   30fe6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   30fea:	2100      	movs	r1, #0
   30fec:	f007 fb10 	bl	38610 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   30ff0:	3d01      	subs	r5, #1
		err = nrf_modem_delta_dfu_offset(&offset);
   30ff2:	e7e4      	b.n	30fbe <delete_banked_modem_delta_fw+0x2a>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   30ff4:	4b06      	ldr	r3, [pc, #24]	; (31010 <delete_banked_modem_delta_fw+0x7c>)
   30ff6:	2001      	movs	r0, #1
   30ff8:	681b      	ldr	r3, [r3, #0]
   30ffa:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   30ffc:	2149      	movs	r1, #73	; 0x49
   30ffe:	4806      	ldr	r0, [pc, #24]	; (31018 <delete_banked_modem_delta_fw+0x84>)
   31000:	f00b fd7e 	bl	3cb00 <z_log_minimal_printk>
	return 0;
   31004:	e7d5      	b.n	30fb2 <delete_banked_modem_delta_fw+0x1e>
   31006:	bf00      	nop
   31008:	0004b263 	.word	0x0004b263
   3100c:	0004b29f 	.word	0x0004b29f
   31010:	2001a400 	.word	0x2001a400
   31014:	0004b2c6 	.word	0x0004b2c6
   31018:	0004b2e8 	.word	0x0004b2e8

0003101c <dfu_target_modem_delta_identify>:

bool dfu_target_modem_delta_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   3101c:	6840      	ldr	r0, [r0, #4]
}
   3101e:	4b02      	ldr	r3, [pc, #8]	; (31028 <dfu_target_modem_delta_identify+0xc>)
   31020:	1ac3      	subs	r3, r0, r3
   31022:	4258      	negs	r0, r3
   31024:	4158      	adcs	r0, r3
   31026:	4770      	bx	lr
   31028:	7544656d 	.word	0x7544656d

0003102c <dfu_target_modem_delta_init>:

int dfu_target_modem_delta_init(size_t file_size, int img_num, dfu_target_callback_t cb)
{
   3102c:	b530      	push	{r4, r5, lr}
   3102e:	b099      	sub	sp, #100	; 0x64
	int offset;
	size_t scratch_space;
	struct nrf_modem_delta_dfu_uuid version;
	char version_string[NRF_MODEM_DELTA_DFU_UUID_LEN+1];

	callback = cb;
   31030:	4b1f      	ldr	r3, [pc, #124]	; (310b0 <dfu_target_modem_delta_init+0x84>)

	/* Retrieve and print modem firmware UUID */
	err = nrf_modem_delta_dfu_uuid(&version);
   31032:	ad05      	add	r5, sp, #20
{
   31034:	4604      	mov	r4, r0
	err = nrf_modem_delta_dfu_uuid(&version);
   31036:	4628      	mov	r0, r5
	callback = cb;
   31038:	601a      	str	r2, [r3, #0]
	err = nrf_modem_delta_dfu_uuid(&version);
   3103a:	f004 f981 	bl	35340 <nrf_modem_delta_dfu_uuid>
	if (err != 0) {
   3103e:	4602      	mov	r2, r0
   31040:	b138      	cbz	r0, 31052 <dfu_target_modem_delta_init+0x26>
		LOG_ERR("Firmware version request failed, error %d", err);
   31042:	2145      	movs	r1, #69	; 0x45
   31044:	481b      	ldr	r0, [pc, #108]	; (310b4 <dfu_target_modem_delta_init+0x88>)
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));

	/* Check if scratch area is big enough for downloaded image */
	err = nrf_modem_delta_dfu_area(&scratch_space);
	if (err != 0) {
		LOG_ERR("Failed to retrieve size of modem DFU area, error %d", err);
   31046:	f00b fd5b 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   3104a:	f06f 000d 	mvn.w	r0, #13
		err = delete_banked_modem_delta_fw();
		return err;
	}

	return 0;
}
   3104e:	b019      	add	sp, #100	; 0x64
   31050:	bd30      	pop	{r4, r5, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   31052:	2324      	movs	r3, #36	; 0x24
   31054:	2125      	movs	r1, #37	; 0x25
   31056:	4a18      	ldr	r2, [pc, #96]	; (310b8 <dfu_target_modem_delta_init+0x8c>)
   31058:	9500      	str	r5, [sp, #0]
   3105a:	a80e      	add	r0, sp, #56	; 0x38
   3105c:	f009 fb22 	bl	3a6a4 <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   31060:	aa0e      	add	r2, sp, #56	; 0x38
   31062:	2149      	movs	r1, #73	; 0x49
   31064:	4815      	ldr	r0, [pc, #84]	; (310bc <dfu_target_modem_delta_init+0x90>)
   31066:	f00b fd4b 	bl	3cb00 <z_log_minimal_printk>
	err = nrf_modem_delta_dfu_area(&scratch_space);
   3106a:	a804      	add	r0, sp, #16
   3106c:	f004 f944 	bl	352f8 <nrf_modem_delta_dfu_area>
	if (err != 0) {
   31070:	4602      	mov	r2, r0
   31072:	b110      	cbz	r0, 3107a <dfu_target_modem_delta_init+0x4e>
		LOG_ERR("Failed to retrieve size of modem DFU area, error %d", err);
   31074:	2145      	movs	r1, #69	; 0x45
   31076:	4812      	ldr	r0, [pc, #72]	; (310c0 <dfu_target_modem_delta_init+0x94>)
   31078:	e7e5      	b.n	31046 <dfu_target_modem_delta_init+0x1a>
	if (file_size > scratch_space) {
   3107a:	9b04      	ldr	r3, [sp, #16]
   3107c:	42a3      	cmp	r3, r4
   3107e:	d207      	bcs.n	31090 <dfu_target_modem_delta_init+0x64>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   31080:	4810      	ldr	r0, [pc, #64]	; (310c4 <dfu_target_modem_delta_init+0x98>)
   31082:	4622      	mov	r2, r4
   31084:	2145      	movs	r1, #69	; 0x45
   31086:	f00b fd3b 	bl	3cb00 <z_log_minimal_printk>
		return -EFBIG;
   3108a:	f06f 001a 	mvn.w	r0, #26
   3108e:	e7de      	b.n	3104e <dfu_target_modem_delta_init+0x22>
	err = nrf_modem_delta_dfu_offset(&offset);
   31090:	a803      	add	r0, sp, #12
   31092:	f004 f90d 	bl	352b0 <nrf_modem_delta_dfu_offset>
	if (err != 0) {
   31096:	b118      	cbz	r0, 310a0 <dfu_target_modem_delta_init+0x74>
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
   31098:	4602      	mov	r2, r0
   3109a:	2145      	movs	r1, #69	; 0x45
   3109c:	480a      	ldr	r0, [pc, #40]	; (310c8 <dfu_target_modem_delta_init+0x9c>)
   3109e:	e7d2      	b.n	31046 <dfu_target_modem_delta_init+0x1a>
	if (offset == NRF_MODEM_DELTA_DFU_OFFSET_DIRTY) {
   310a0:	9b03      	ldr	r3, [sp, #12]
   310a2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
   310a6:	d1d2      	bne.n	3104e <dfu_target_modem_delta_init+0x22>
		err = delete_banked_modem_delta_fw();
   310a8:	f7ff ff74 	bl	30f94 <delete_banked_modem_delta_fw>
		return err;
   310ac:	e7cf      	b.n	3104e <dfu_target_modem_delta_init+0x22>
   310ae:	bf00      	nop
   310b0:	2001a400 	.word	0x2001a400
   310b4:	0004b306 	.word	0x0004b306
   310b8:	000482d9 	.word	0x000482d9
   310bc:	0004b335 	.word	0x0004b335
   310c0:	0004b355 	.word	0x0004b355
   310c4:	0004b38e 	.word	0x0004b38e
   310c8:	0004b3c2 	.word	0x0004b3c2

000310cc <dfu_target_modem_delta_offset_get>:

int dfu_target_modem_delta_offset_get(size_t *out)
{
   310cc:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_delta_dfu_offset(out);
   310ce:	f004 f8ef 	bl	352b0 <nrf_modem_delta_dfu_offset>
	if (err != 0) {
   310d2:	b130      	cbz	r0, 310e2 <dfu_target_modem_delta_offset_get+0x16>
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
   310d4:	4602      	mov	r2, r0
   310d6:	2145      	movs	r1, #69	; 0x45
   310d8:	4802      	ldr	r0, [pc, #8]	; (310e4 <dfu_target_modem_delta_offset_get+0x18>)
   310da:	f00b fd11 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   310de:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   310e2:	bd08      	pop	{r3, pc}
   310e4:	0004b3c2 	.word	0x0004b3c2

000310e8 <dfu_target_modem_delta_write>:

int dfu_target_modem_delta_write(const void *const buf, size_t len)
{
   310e8:	b570      	push	{r4, r5, r6, lr}
   310ea:	4605      	mov	r5, r0
   310ec:	460e      	mov	r6, r1
	int err;

	err = nrf_modem_delta_dfu_write_init();
   310ee:	f004 f951 	bl	35394 <nrf_modem_delta_dfu_write_init>
	if (err != 0 && err != -NRF_EALREADY) {
   310f2:	4602      	mov	r2, r0
   310f4:	b148      	cbz	r0, 3110a <dfu_target_modem_delta_write+0x22>
   310f6:	f110 0f78 	cmn.w	r0, #120	; 0x78
   310fa:	d006      	beq.n	3110a <dfu_target_modem_delta_write+0x22>
		LOG_ERR("Failed to ready modem for firmware update receival, error %d", err);
   310fc:	2145      	movs	r1, #69	; 0x45
   310fe:	4816      	ldr	r0, [pc, #88]	; (31158 <dfu_target_modem_delta_write+0x70>)
		return -EFAULT;
	}

	err = nrf_modem_delta_dfu_write(buf, len);
	if (err < 0) {
		LOG_ERR("Write failed, modem library error %d", err);
   31100:	f00b fcfe 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   31104:	f06f 000d 	mvn.w	r0, #13
			return -EFAULT;
		}
	}

	return 0;
}
   31108:	bd70      	pop	{r4, r5, r6, pc}
	err = nrf_modem_delta_dfu_write(buf, len);
   3110a:	4631      	mov	r1, r6
   3110c:	4628      	mov	r0, r5
   3110e:	f004 f96d 	bl	353ec <nrf_modem_delta_dfu_write>
	if (err < 0) {
   31112:	1e04      	subs	r4, r0, #0
   31114:	da03      	bge.n	3111e <dfu_target_modem_delta_write+0x36>
		LOG_ERR("Write failed, modem library error %d", err);
   31116:	4622      	mov	r2, r4
   31118:	2145      	movs	r1, #69	; 0x45
   3111a:	4810      	ldr	r0, [pc, #64]	; (3115c <dfu_target_modem_delta_write+0x74>)
   3111c:	e7f0      	b.n	31100 <dfu_target_modem_delta_write+0x18>
	} else if (err > 0) {
   3111e:	d016      	beq.n	3114e <dfu_target_modem_delta_write+0x66>
		LOG_ERR("Write failed, modem error %d", err);
   31120:	4622      	mov	r2, r4
   31122:	2145      	movs	r1, #69	; 0x45
   31124:	480e      	ldr	r0, [pc, #56]	; (31160 <dfu_target_modem_delta_write+0x78>)
   31126:	f00b fceb 	bl	3cb00 <z_log_minimal_printk>
		switch (err) {
   3112a:	2c0b      	cmp	r4, #11
   3112c:	d008      	beq.n	31140 <dfu_target_modem_delta_write+0x58>
   3112e:	2c0e      	cmp	r4, #14
   31130:	d006      	beq.n	31140 <dfu_target_modem_delta_write+0x58>
			return -EINVAL;
   31132:	2c09      	cmp	r4, #9
   31134:	bf14      	ite	ne
   31136:	f06f 000d 	mvnne.w	r0, #13
   3113a:	f06f 0015 	mvneq.w	r0, #21
   3113e:	e7e3      	b.n	31108 <dfu_target_modem_delta_write+0x20>
			delete_banked_modem_delta_fw();
   31140:	f7ff ff28 	bl	30f94 <delete_banked_modem_delta_fw>
			err = dfu_target_modem_delta_write(buf, len);
   31144:	4631      	mov	r1, r6
   31146:	4628      	mov	r0, r5
   31148:	f7ff ffce 	bl	310e8 <dfu_target_modem_delta_write>
			if (err != 0) {
   3114c:	b908      	cbnz	r0, 31152 <dfu_target_modem_delta_write+0x6a>
				return 0;
   3114e:	2000      	movs	r0, #0
   31150:	e7da      	b.n	31108 <dfu_target_modem_delta_write+0x20>
				return -EINVAL;
   31152:	f06f 0015 	mvn.w	r0, #21
   31156:	e7d7      	b.n	31108 <dfu_target_modem_delta_write+0x20>
   31158:	0004b3fb 	.word	0x0004b3fb
   3115c:	0004b43d 	.word	0x0004b43d
   31160:	0004b467 	.word	0x0004b467

00031164 <dfu_target_modem_delta_done>:

int dfu_target_modem_delta_done(bool successful)
{
   31164:	b508      	push	{r3, lr}
	int err;

	ARG_UNUSED(successful);

	err = nrf_modem_delta_dfu_write_done();
   31166:	f004 f96d 	bl	35444 <nrf_modem_delta_dfu_write_done>
	if (err != 0) {
   3116a:	b130      	cbz	r0, 3117a <dfu_target_modem_delta_done+0x16>
		LOG_ERR("Failed to stop MFU and release resources, error %d", err);
   3116c:	4602      	mov	r2, r0
   3116e:	2145      	movs	r1, #69	; 0x45
   31170:	4802      	ldr	r0, [pc, #8]	; (3117c <dfu_target_modem_delta_done+0x18>)
   31172:	f00b fcc5 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   31176:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   3117a:	bd08      	pop	{r3, pc}
   3117c:	0004b489 	.word	0x0004b489

00031180 <dfu_target_modem_delta_schedule_update>:

int dfu_target_modem_delta_schedule_update(int img_num)
{
   31180:	b510      	push	{r4, lr}
	int err;

	ARG_UNUSED(img_num);

	err = nrf_modem_delta_dfu_update();
   31182:	f004 f97f 	bl	35484 <nrf_modem_delta_dfu_update>

	if (err != 0) {
   31186:	4604      	mov	r4, r0
   31188:	b140      	cbz	r0, 3119c <dfu_target_modem_delta_schedule_update+0x1c>
		LOG_ERR("Modem firmware upgrade scheduling failed, error %d", err);
   3118a:	4602      	mov	r2, r0
   3118c:	2145      	movs	r1, #69	; 0x45
   3118e:	4806      	ldr	r0, [pc, #24]	; (311a8 <dfu_target_modem_delta_schedule_update+0x28>)
   31190:	f00b fcb6 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   31194:	f06f 040d 	mvn.w	r4, #13
	}
	LOG_INF("Scheduling modem firmware upgrade at next boot");

	return err;
}
   31198:	4620      	mov	r0, r4
   3119a:	bd10      	pop	{r4, pc}
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   3119c:	2149      	movs	r1, #73	; 0x49
   3119e:	4803      	ldr	r0, [pc, #12]	; (311ac <dfu_target_modem_delta_schedule_update+0x2c>)
   311a0:	f00b fcae 	bl	3cb00 <z_log_minimal_printk>
	return err;
   311a4:	e7f8      	b.n	31198 <dfu_target_modem_delta_schedule_update+0x18>
   311a6:	bf00      	nop
   311a8:	0004b4c1 	.word	0x0004b4c1
   311ac:	0004b4f9 	.word	0x0004b4f9

000311b0 <dfu_target_mcuboot_schedule_one_img.constprop.0>:

static int dfu_target_mcuboot_schedule_one_img(int img_num)
{
	int err = 0;

	err = boot_request_upgrade_multi(img_num, BOOT_UPGRADE_TEST);
   311b0:	2100      	movs	r1, #0
static int dfu_target_mcuboot_schedule_one_img(int img_num)
   311b2:	b510      	push	{r4, lr}
	err = boot_request_upgrade_multi(img_num, BOOT_UPGRADE_TEST);
   311b4:	4608      	mov	r0, r1
   311b6:	f00c fae4 	bl	3d782 <boot_request_upgrade_multi>
	if (err != 0) {
   311ba:	4604      	mov	r4, r0
   311bc:	b138      	cbz	r0, 311ce <dfu_target_mcuboot_schedule_one_img.constprop.0+0x1e>
		LOG_ERR("boot_request_upgrade for image-%d error %d",
   311be:	4603      	mov	r3, r0
   311c0:	2200      	movs	r2, #0
   311c2:	2145      	movs	r1, #69	; 0x45
   311c4:	4805      	ldr	r0, [pc, #20]	; (311dc <dfu_target_mcuboot_schedule_one_img.constprop.0+0x2c>)
   311c6:	f00b fc9b 	bl	3cb00 <z_log_minimal_printk>
		LOG_INF("MCUBoot image-%d upgrade scheduled. "
			"Reset device to apply", img_num);
	}

	return err;
}
   311ca:	4620      	mov	r0, r4
   311cc:	bd10      	pop	{r4, pc}
		LOG_INF("MCUBoot image-%d upgrade scheduled. "
   311ce:	4602      	mov	r2, r0
   311d0:	2149      	movs	r1, #73	; 0x49
   311d2:	4803      	ldr	r0, [pc, #12]	; (311e0 <dfu_target_mcuboot_schedule_one_img.constprop.0+0x30>)
   311d4:	f00b fc94 	bl	3cb00 <z_log_minimal_printk>
	return err;
   311d8:	e7f7      	b.n	311ca <dfu_target_mcuboot_schedule_one_img.constprop.0+0x1a>
   311da:	bf00      	nop
   311dc:	0004b544 	.word	0x0004b544
   311e0:	0004b574 	.word	0x0004b574

000311e4 <dfu_target_mcuboot_identify>:
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   311e4:	6800      	ldr	r0, [r0, #0]
}
   311e6:	4b02      	ldr	r3, [pc, #8]	; (311f0 <dfu_target_mcuboot_identify+0xc>)
   311e8:	1ac3      	subs	r3, r0, r3
   311ea:	4258      	negs	r0, r3
   311ec:	4158      	adcs	r0, r3
   311ee:	4770      	bx	lr
   311f0:	96f3b83d 	.word	0x96f3b83d

000311f4 <dfu_target_mcuboot_set_buf>:
	if (buf == NULL) {
   311f4:	b140      	cbz	r0, 31208 <dfu_target_mcuboot_set_buf+0x14>
	if (!IS_ALIGNED_32(buf)) {
   311f6:	f010 0303 	ands.w	r3, r0, #3
   311fa:	d105      	bne.n	31208 <dfu_target_mcuboot_set_buf+0x14>
	stream_buf = buf;
   311fc:	4a04      	ldr	r2, [pc, #16]	; (31210 <dfu_target_mcuboot_set_buf+0x1c>)
   311fe:	6010      	str	r0, [r2, #0]
	stream_buf_len = len;
   31200:	4a04      	ldr	r2, [pc, #16]	; (31214 <dfu_target_mcuboot_set_buf+0x20>)
	return 0;
   31202:	4618      	mov	r0, r3
	stream_buf_len = len;
   31204:	6011      	str	r1, [r2, #0]
	return 0;
   31206:	4770      	bx	lr
		return -EINVAL;
   31208:	f06f 0015 	mvn.w	r0, #21
}
   3120c:	4770      	bx	lr
   3120e:	bf00      	nop
   31210:	2001a404 	.word	0x2001a404
   31214:	2001a40c 	.word	0x2001a40c

00031218 <dfu_target_mcuboot_init>:
{
   31218:	b530      	push	{r4, r5, lr}
	stream_buf_bytes = 0;
   3121a:	2500      	movs	r5, #0
   3121c:	4b21      	ldr	r3, [pc, #132]	; (312a4 <dfu_target_mcuboot_init+0x8c>)
	if (stream_buf == NULL) {
   3121e:	4c22      	ldr	r4, [pc, #136]	; (312a8 <dfu_target_mcuboot_init+0x90>)
	stream_buf_bytes = 0;
   31220:	601d      	str	r5, [r3, #0]
	if (stream_buf == NULL) {
   31222:	6823      	ldr	r3, [r4, #0]
{
   31224:	4602      	mov	r2, r0
   31226:	b089      	sub	sp, #36	; 0x24
	if (stream_buf == NULL) {
   31228:	b943      	cbnz	r3, 3123c <dfu_target_mcuboot_init+0x24>
		LOG_ERR("Missing stream_buf, call '..set_buf' before '..init");
   3122a:	2145      	movs	r1, #69	; 0x45
   3122c:	481f      	ldr	r0, [pc, #124]	; (312ac <dfu_target_mcuboot_init+0x94>)
   3122e:	f00b fc67 	bl	3cb00 <z_log_minimal_printk>
		return -ENODEV;
   31232:	f06f 0412 	mvn.w	r4, #18
}
   31236:	4620      	mov	r0, r4
   31238:	b009      	add	sp, #36	; 0x24
   3123a:	bd30      	pop	{r4, r5, pc}
	if (file_size > secondary_size[img_num]) {
   3123c:	f5b0 2fd0 	cmp.w	r0, #425984	; 0x68000
   31240:	d908      	bls.n	31254 <dfu_target_mcuboot_init+0x3c>
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   31242:	f44f 23d0 	mov.w	r3, #425984	; 0x68000
   31246:	2145      	movs	r1, #69	; 0x45
   31248:	4819      	ldr	r0, [pc, #100]	; (312b0 <dfu_target_mcuboot_init+0x98>)
   3124a:	f00b fc59 	bl	3cb00 <z_log_minimal_printk>
		return -EFBIG;
   3124e:	f06f 041a 	mvn.w	r4, #26
   31252:	e7f0      	b.n	31236 <dfu_target_mcuboot_init+0x1e>
   31254:	4817      	ldr	r0, [pc, #92]	; (312b4 <dfu_target_mcuboot_init+0x9c>)
   31256:	f004 fe39 	bl	35ecc <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   3125a:	b938      	cbnz	r0, 3126c <dfu_target_mcuboot_init+0x54>
		LOG_ERR("Failed to get device '%s'",
   3125c:	2145      	movs	r1, #69	; 0x45
   3125e:	4a15      	ldr	r2, [pc, #84]	; (312b4 <dfu_target_mcuboot_init+0x9c>)
   31260:	4815      	ldr	r0, [pc, #84]	; (312b8 <dfu_target_mcuboot_init+0xa0>)
   31262:	f00b fc4d 	bl	3cb00 <z_log_minimal_printk>
		return -EFAULT;
   31266:	f06f 040d 	mvn.w	r4, #13
   3126a:	e7e4      	b.n	31236 <dfu_target_mcuboot_init+0x1e>
	err = dfu_target_stream_init(&(struct dfu_target_stream_init){
   3126c:	4b13      	ldr	r3, [pc, #76]	; (312bc <dfu_target_mcuboot_init+0xa4>)
   3126e:	f44f 22f0 	mov.w	r2, #491520	; 0x78000
   31272:	e9cd 3001 	strd	r3, r0, [sp, #4]
   31276:	6823      	ldr	r3, [r4, #0]
   31278:	a801      	add	r0, sp, #4
   3127a:	9303      	str	r3, [sp, #12]
   3127c:	4b10      	ldr	r3, [pc, #64]	; (312c0 <dfu_target_mcuboot_init+0xa8>)
   3127e:	9507      	str	r5, [sp, #28]
   31280:	681b      	ldr	r3, [r3, #0]
   31282:	9304      	str	r3, [sp, #16]
   31284:	f44f 23d0 	mov.w	r3, #425984	; 0x68000
   31288:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3128c:	f7ff fe1c 	bl	30ec8 <dfu_target_stream_init>
	if (err < 0) {
   31290:	1e04      	subs	r4, r0, #0
   31292:	da05      	bge.n	312a0 <dfu_target_mcuboot_init+0x88>
		LOG_ERR("dfu_target_stream_init failed %d", err);
   31294:	4622      	mov	r2, r4
   31296:	2145      	movs	r1, #69	; 0x45
   31298:	480a      	ldr	r0, [pc, #40]	; (312c4 <dfu_target_mcuboot_init+0xac>)
   3129a:	f00b fc31 	bl	3cb00 <z_log_minimal_printk>
		return err;
   3129e:	e7ca      	b.n	31236 <dfu_target_mcuboot_init+0x1e>
	return 0;
   312a0:	462c      	mov	r4, r5
   312a2:	e7c8      	b.n	31236 <dfu_target_mcuboot_init+0x1e>
   312a4:	2001a408 	.word	0x2001a408
   312a8:	2001a404 	.word	0x2001a404
   312ac:	0004b5b3 	.word	0x0004b5b3
   312b0:	0004b5ec 	.word	0x0004b5ec
   312b4:	00044485 	.word	0x00044485
   312b8:	0004b623 	.word	0x0004b623
   312bc:	0004b642 	.word	0x0004b642
   312c0:	2001a40c 	.word	0x2001a40c
   312c4:	0004b64b 	.word	0x0004b64b

000312c8 <dfu_target_mcuboot_offset_get>:
{
   312c8:	b510      	push	{r4, lr}
   312ca:	4604      	mov	r4, r0
	err = dfu_target_stream_offset_get(out);
   312cc:	f7ff fe28 	bl	30f20 <dfu_target_stream_offset_get>
	if (err == 0) {
   312d0:	b920      	cbnz	r0, 312dc <dfu_target_mcuboot_offset_get+0x14>
		*out += stream_buf_bytes;
   312d2:	4a03      	ldr	r2, [pc, #12]	; (312e0 <dfu_target_mcuboot_offset_get+0x18>)
   312d4:	6823      	ldr	r3, [r4, #0]
   312d6:	6812      	ldr	r2, [r2, #0]
   312d8:	4413      	add	r3, r2
   312da:	6023      	str	r3, [r4, #0]
}
   312dc:	bd10      	pop	{r4, pc}
   312de:	bf00      	nop
   312e0:	2001a408 	.word	0x2001a408

000312e4 <dfu_target_mcuboot_write>:
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   312e4:	4a06      	ldr	r2, [pc, #24]	; (31300 <dfu_target_mcuboot_write+0x1c>)
{
   312e6:	b430      	push	{r4, r5}
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   312e8:	4c06      	ldr	r4, [pc, #24]	; (31304 <dfu_target_mcuboot_write+0x20>)
   312ea:	6813      	ldr	r3, [r2, #0]
   312ec:	6824      	ldr	r4, [r4, #0]
   312ee:	440b      	add	r3, r1
   312f0:	fbb3 f5f4 	udiv	r5, r3, r4
   312f4:	fb04 3315 	mls	r3, r4, r5, r3
}
   312f8:	bc30      	pop	{r4, r5}
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   312fa:	6013      	str	r3, [r2, #0]
	return dfu_target_stream_write(buf, len);
   312fc:	f7ff be1a 	b.w	30f34 <dfu_target_stream_write>
   31300:	2001a408 	.word	0x2001a408
   31304:	2001a40c 	.word	0x2001a40c

00031308 <dfu_target_mcuboot_done>:
{
   31308:	b538      	push	{r3, r4, r5, lr}
   3130a:	4605      	mov	r5, r0
	err = dfu_target_stream_done(successful);
   3130c:	f7ff fe26 	bl	30f5c <dfu_target_stream_done>
	if (err != 0) {
   31310:	4604      	mov	r4, r0
   31312:	b130      	cbz	r0, 31322 <dfu_target_mcuboot_done+0x1a>
		LOG_ERR("dfu_target_stream_done error %d", err);
   31314:	2145      	movs	r1, #69	; 0x45
   31316:	4602      	mov	r2, r0
   31318:	480c      	ldr	r0, [pc, #48]	; (3134c <dfu_target_mcuboot_done+0x44>)
			LOG_ERR("Unable to delete last page: %d", err);
   3131a:	f00b fbf1 	bl	3cb00 <z_log_minimal_printk>
}
   3131e:	4620      	mov	r0, r4
   31320:	bd38      	pop	{r3, r4, r5, pc}
	if (successful) {
   31322:	b16d      	cbz	r5, 31340 <dfu_target_mcuboot_done+0x38>
		stream_buf_bytes = 0;
   31324:	4b0a      	ldr	r3, [pc, #40]	; (31350 <dfu_target_mcuboot_done+0x48>)
   31326:	6018      	str	r0, [r3, #0]
		err = stream_flash_erase_page(dfu_target_stream_get_stream(),
   31328:	f7ff fdca 	bl	30ec0 <dfu_target_stream_get_stream>
   3132c:	4909      	ldr	r1, [pc, #36]	; (31354 <dfu_target_mcuboot_done+0x4c>)
   3132e:	f7f0 fcf7 	bl	21d20 <stream_flash_erase_page>
		if (err != 0) {
   31332:	4604      	mov	r4, r0
   31334:	2800      	cmp	r0, #0
   31336:	d0f2      	beq.n	3131e <dfu_target_mcuboot_done+0x16>
			LOG_ERR("Unable to delete last page: %d", err);
   31338:	4602      	mov	r2, r0
   3133a:	2145      	movs	r1, #69	; 0x45
   3133c:	4806      	ldr	r0, [pc, #24]	; (31358 <dfu_target_mcuboot_done+0x50>)
   3133e:	e7ec      	b.n	3131a <dfu_target_mcuboot_done+0x12>
		LOG_INF("MCUBoot image upgrade aborted.");
   31340:	2149      	movs	r1, #73	; 0x49
   31342:	4806      	ldr	r0, [pc, #24]	; (3135c <dfu_target_mcuboot_done+0x54>)
   31344:	f00b fbdc 	bl	3cb00 <z_log_minimal_printk>
   31348:	e7e9      	b.n	3131e <dfu_target_mcuboot_done+0x16>
   3134a:	bf00      	nop
   3134c:	0004b671 	.word	0x0004b671
   31350:	2001a408 	.word	0x2001a408
   31354:	000dffff 	.word	0x000dffff
   31358:	0004b696 	.word	0x0004b696
   3135c:	0004b6ba 	.word	0x0004b6ba

00031360 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   31360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31364:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   31366:	4c21      	ldr	r4, [pc, #132]	; (313ec <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   31368:	4e21      	ldr	r6, [pc, #132]	; (313f0 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   3136a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   3136e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 313f8 <check_ext_api_requests+0x98>
{
   31372:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31374:	45a8      	cmp	r8, r5
   31376:	d803      	bhi.n	31380 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   31378:	2000      	movs	r0, #0
   3137a:	b005      	add	sp, #20
   3137c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   31380:	6a63      	ldr	r3, [r4, #36]	; 0x24
   31382:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   31386:	681f      	ldr	r7, [r3, #0]
   31388:	ab01      	add	r3, sp, #4
   3138a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   3138e:	220c      	movs	r2, #12
   31390:	4619      	mov	r1, r3
   31392:	4638      	mov	r0, r7
   31394:	f010 f81e 	bl	413d4 <memcmp>
   31398:	b990      	cbnz	r0, 313c0 <check_ext_api_requests+0x60>
   3139a:	b18f      	cbz	r7, 313c0 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   3139c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   3139e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   313a0:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   313a2:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   313a4:	4291      	cmp	r1, r2
   313a6:	d10b      	bne.n	313c0 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   313a8:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   313aa:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   313ac:	4291      	cmp	r1, r2
   313ae:	d807      	bhi.n	313c0 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   313b0:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   313b2:	4291      	cmp	r1, r2
   313b4:	d904      	bls.n	313c0 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   313b6:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   313b8:	695b      	ldr	r3, [r3, #20]
   313ba:	ea32 0303 	bics.w	r3, r2, r3
   313be:	d00a      	beq.n	313d6 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   313c0:	6a27      	ldr	r7, [r4, #32]
   313c2:	b167      	cbz	r7, 313de <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   313c4:	480b      	ldr	r0, [pc, #44]	; (313f4 <check_ext_api_requests+0x94>)
   313c6:	f00b f97e 	bl	3c6c6 <printk>
			k_panic();
   313ca:	4040      	eors	r0, r0
   313cc:	f380 8811 	msr	BASEPRI, r0
   313d0:	f04f 0004 	mov.w	r0, #4
   313d4:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   313d6:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   313d8:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   313da:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   313dc:	e7ca      	b.n	31374 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   313de:	4648      	mov	r0, r9
   313e0:	f00b f971 	bl	3c6c6 <printk>
			*ext_api_req->ext_api = NULL;
   313e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   313e6:	601f      	str	r7, [r3, #0]
   313e8:	e7f5      	b.n	313d6 <check_ext_api_requests+0x76>
   313ea:	bf00      	nop
   313ec:	0001c43c 	.word	0x0001c43c
   313f0:	0004283c 	.word	0x0004283c
   313f4:	0004b6f1 	.word	0x0004b6f1
   313f8:	0004b71a 	.word	0x0004b71a

000313fc <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   313fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   313fe:	b085      	sub	sp, #20
   31400:	466e      	mov	r6, sp
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   31402:	6881      	ldr	r1, [r0, #8]
{
   31404:	4605      	mov	r5, r0
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   31406:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
   31408:	f021 0407 	bic.w	r4, r1, #7

    erased_val = flash_area_erased_val(fap);
   3140c:	f00c f83f 	bl	3d48e <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
   31410:	4632      	mov	r2, r6
   31412:	4b0a      	ldr	r3, [pc, #40]	; (3143c <boot_write_magic+0x40>)
   31414:	f103 0c10 	add.w	ip, r3, #16
   31418:	4637      	mov	r7, r6
   3141a:	6818      	ldr	r0, [r3, #0]
   3141c:	6859      	ldr	r1, [r3, #4]
   3141e:	3308      	adds	r3, #8
   31420:	c703      	stmia	r7!, {r0, r1}
   31422:	4563      	cmp	r3, ip
   31424:	463e      	mov	r6, r7
   31426:	d1f7      	bne.n	31418 <boot_write_magic+0x1c>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
   31428:	2310      	movs	r3, #16
   3142a:	4621      	mov	r1, r4
   3142c:	4628      	mov	r0, r5
   3142e:	f00b fff2 	bl	3d416 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   31432:	3800      	subs	r0, #0
   31434:	bf18      	it	ne
   31436:	2001      	movne	r0, #1
   31438:	b005      	add	sp, #20
   3143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3143c:	000434e4 	.word	0x000434e4

00031440 <boot_read_swap_state>:
{
   31440:	b530      	push	{r4, r5, lr}
   31442:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   31444:	6881      	ldr	r1, [r0, #8]
{
   31446:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   31448:	2310      	movs	r3, #16
   3144a:	aa02      	add	r2, sp, #8
   3144c:	3910      	subs	r1, #16
{
   3144e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   31450:	f00b ffc5 	bl	3d3de <flash_area_read>
    if (rc < 0) {
   31454:	2800      	cmp	r0, #0
   31456:	da02      	bge.n	3145e <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
   31458:	2001      	movs	r0, #1
}
   3145a:	b007      	add	sp, #28
   3145c:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
   3145e:	2210      	movs	r2, #16
   31460:	4628      	mov	r0, r5
   31462:	a902      	add	r1, sp, #8
   31464:	f00e f9fb 	bl	3f85e <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   31468:	b390      	cbz	r0, 314d0 <boot_read_swap_state+0x90>
        state->magic = BOOT_MAGIC_UNSET;
   3146a:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
   3146c:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
   3146e:	4628      	mov	r0, r5
   31470:	f00e fa06 	bl	3f880 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   31474:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
   31476:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   31478:	f10d 0207 	add.w	r2, sp, #7
   3147c:	4628      	mov	r0, r5
   3147e:	f00b ffae 	bl	3d3de <flash_area_read>
    if (rc < 0) {
   31482:	2800      	cmp	r0, #0
   31484:	dbe8      	blt.n	31458 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   31486:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3148a:	4628      	mov	r0, r5
   3148c:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   31490:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   31492:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   31494:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
   31496:	2201      	movs	r2, #1
   31498:	f10d 0107 	add.w	r1, sp, #7
   3149c:	f00e f9df 	bl	3f85e <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   314a0:	b910      	cbnz	r0, 314a8 <boot_read_swap_state+0x68>
   314a2:	7863      	ldrb	r3, [r4, #1]
   314a4:	2b04      	cmp	r3, #4
   314a6:	d903      	bls.n	314b0 <boot_read_swap_state+0x70>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   314a8:	2301      	movs	r3, #1
   314aa:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
   314ac:	2300      	movs	r3, #0
   314ae:	7123      	strb	r3, [r4, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   314b0:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   314b2:	4628      	mov	r0, r5
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   314b4:	3a18      	subs	r2, #24
   314b6:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   314ba:	3a08      	subs	r2, #8
   314bc:	1ca1      	adds	r1, r4, #2
   314be:	f00e f9eb 	bl	3f898 <boot_read_flag>
    if (rc) {
   314c2:	2800      	cmp	r0, #0
   314c4:	d1c8      	bne.n	31458 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
   314c6:	4628      	mov	r0, r5
   314c8:	1ce1      	adds	r1, r4, #3
   314ca:	f00e fa40 	bl	3f94e <boot_read_image_ok>
   314ce:	e7c4      	b.n	3145a <boot_read_swap_state+0x1a>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
   314d0:	2210      	movs	r2, #16
   314d2:	4904      	ldr	r1, [pc, #16]	; (314e4 <boot_read_swap_state+0xa4>)
   314d4:	a802      	add	r0, sp, #8
   314d6:	f00f ff7d 	bl	413d4 <memcmp>
        return BOOT_MAGIC_GOOD;
   314da:	2800      	cmp	r0, #0
   314dc:	bf14      	ite	ne
   314de:	2302      	movne	r3, #2
   314e0:	2301      	moveq	r3, #1
   314e2:	e7c3      	b.n	3146c <boot_read_swap_state+0x2c>
   314e4:	000434e4 	.word	0x000434e4

000314e8 <boot_write_swap_info>:
                     uint8_t image_num)
{
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   314e8:	2a0e      	cmp	r2, #14
{
   314ea:	b513      	push	{r0, r1, r4, lr}
   314ec:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   314ee:	d906      	bls.n	314fe <boot_write_swap_info+0x16>
   314f0:	4b0c      	ldr	r3, [pc, #48]	; (31524 <boot_write_swap_info+0x3c>)
   314f2:	f240 11b1 	movw	r1, #433	; 0x1b1
   314f6:	4a0c      	ldr	r2, [pc, #48]	; (31528 <boot_write_swap_info+0x40>)
   314f8:	480c      	ldr	r0, [pc, #48]	; (3152c <boot_write_swap_info+0x44>)
   314fa:	f008 fa83 	bl	39a04 <__assert_func>
   314fe:	290e      	cmp	r1, #14
   31500:	d901      	bls.n	31506 <boot_write_swap_info+0x1e>
   31502:	4b0b      	ldr	r3, [pc, #44]	; (31530 <boot_write_swap_info+0x48>)
   31504:	e7f5      	b.n	314f2 <boot_write_swap_info+0xa>
   31506:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   3150a:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
   3150e:	f00e f9b7 	bl	3f880 <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off),
                 swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   31512:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
   31514:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   31516:	f10d 0207 	add.w	r2, sp, #7
   3151a:	4620      	mov	r0, r4
   3151c:	f00e f9d9 	bl	3f8d2 <boot_write_trailer>
}
   31520:	b002      	add	sp, #8
   31522:	bd10      	pop	{r4, pc}
   31524:	0004b74d 	.word	0x0004b74d
   31528:	0004b7d8 	.word	0x0004b7d8
   3152c:	0004b75f 	.word	0x0004b75f
   31530:	0004b7a2 	.word	0x0004b7a2

00031534 <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   31534:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   31536:	460e      	mov	r6, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   31538:	2009      	movs	r0, #9
   3153a:	a901      	add	r1, sp, #4
   3153c:	f7f0 fb8a 	bl	21c54 <flash_area_open>
    if (rc != 0) {
   31540:	2800      	cmp	r0, #0
   31542:	d137      	bne.n	315b4 <boot_set_pending_multi+0x80>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_secondary_slot);
   31544:	9801      	ldr	r0, [sp, #4]
   31546:	a902      	add	r1, sp, #8
   31548:	f7ff ff7a 	bl	31440 <boot_read_swap_state>
    if (rc != 0) {
   3154c:	4604      	mov	r4, r0
   3154e:	b938      	cbnz	r0, 31560 <boot_set_pending_multi+0x2c>
        goto done;
    }

    switch (state_secondary_slot.magic) {
   31550:	f89d 5008 	ldrb.w	r5, [sp, #8]
   31554:	2d02      	cmp	r5, #2
   31556:	d01f      	beq.n	31598 <boot_set_pending_multi+0x64>
   31558:	2d03      	cmp	r5, #3
   3155a:	d007      	beq.n	3156c <boot_set_pending_multi+0x38>
   3155c:	2d01      	cmp	r5, #1
   3155e:	d122      	bne.n	315a6 <boot_set_pending_multi+0x72>
        assert(0);
        rc = BOOT_EBADIMAGE;
    }

done:
    flash_area_close(fap);
   31560:	9801      	ldr	r0, [sp, #4]
   31562:	f00b ff3b 	bl	3d3dc <flash_area_close>
    return rc;
}
   31566:	4620      	mov	r0, r4
   31568:	b004      	add	sp, #16
   3156a:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_write_magic(fap);
   3156c:	9801      	ldr	r0, [sp, #4]
   3156e:	f7ff ff45 	bl	313fc <boot_write_magic>
        if (rc == 0 && permanent) {
   31572:	4604      	mov	r4, r0
   31574:	2800      	cmp	r0, #0
   31576:	d1f3      	bne.n	31560 <boot_set_pending_multi+0x2c>
   31578:	b166      	cbz	r6, 31594 <boot_set_pending_multi+0x60>
            rc = boot_write_image_ok(fap);
   3157a:	9801      	ldr	r0, [sp, #4]
   3157c:	f00e f9e0 	bl	3f940 <boot_write_image_ok>
        if (rc == 0) {
   31580:	4604      	mov	r4, r0
   31582:	2800      	cmp	r0, #0
   31584:	d1ec      	bne.n	31560 <boot_set_pending_multi+0x2c>
            rc = boot_write_swap_info(fap, swap_type, 0);
   31586:	2200      	movs	r2, #0
   31588:	4629      	mov	r1, r5
   3158a:	9801      	ldr	r0, [sp, #4]
   3158c:	f7ff ffac 	bl	314e8 <boot_write_swap_info>
   31590:	4604      	mov	r4, r0
   31592:	e7e5      	b.n	31560 <boot_set_pending_multi+0x2c>
                swap_type = BOOT_SWAP_TYPE_TEST;
   31594:	2502      	movs	r5, #2
   31596:	e7f6      	b.n	31586 <boot_set_pending_multi+0x52>
        flash_area_erase(fap, 0, flash_area_get_size(fap));
   31598:	9801      	ldr	r0, [sp, #4]
   3159a:	4621      	mov	r1, r4
   3159c:	6882      	ldr	r2, [r0, #8]
   3159e:	f00b ff56 	bl	3d44e <flash_area_erase>
        rc = BOOT_EBADIMAGE;
   315a2:	2403      	movs	r4, #3
        break;
   315a4:	e7dc      	b.n	31560 <boot_set_pending_multi+0x2c>
        assert(0);
   315a6:	f240 2146 	movw	r1, #582	; 0x246
   315aa:	4b03      	ldr	r3, [pc, #12]	; (315b8 <boot_set_pending_multi+0x84>)
   315ac:	4a03      	ldr	r2, [pc, #12]	; (315bc <boot_set_pending_multi+0x88>)
   315ae:	4804      	ldr	r0, [pc, #16]	; (315c0 <boot_set_pending_multi+0x8c>)
   315b0:	f008 fa28 	bl	39a04 <__assert_func>
        return BOOT_EFLASH;
   315b4:	2401      	movs	r4, #1
   315b6:	e7d6      	b.n	31566 <boot_set_pending_multi+0x32>
   315b8:	00045af1 	.word	0x00045af1
   315bc:	0004b7c1 	.word	0x0004b7c1
   315c0:	0004b75f 	.word	0x0004b75f

000315c4 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   315c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   315c8:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   315ca:	4b15      	ldr	r3, [pc, #84]	; (31620 <tfm_ns_interface_dispatch+0x5c>)
   315cc:	4604      	mov	r4, r0
   315ce:	f893 8000 	ldrb.w	r8, [r3]
   315d2:	460d      	mov	r5, r1
   315d4:	4616      	mov	r6, r2
   315d6:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   315d8:	f1b8 0f00 	cmp.w	r8, #0
   315dc:	d115      	bne.n	3160a <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   315de:	4668      	mov	r0, sp
   315e0:	f7f1 fe60 	bl	232a4 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   315e4:	463a      	mov	r2, r7
   315e6:	4631      	mov	r1, r6
   315e8:	4628      	mov	r0, r5
   315ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   315ec:	47a0      	blx	r4
   315ee:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   315f0:	4668      	mov	r0, sp
   315f2:	f00c f884 	bl	3d6fe <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   315f6:	f1b8 0f00 	cmp.w	r8, #0
   315fa:	d002      	beq.n	31602 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   315fc:	4809      	ldr	r0, [pc, #36]	; (31624 <tfm_ns_interface_dispatch+0x60>)
   315fe:	f005 fa3b 	bl	36a78 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   31602:	4620      	mov	r0, r4
   31604:	b022      	add	sp, #136	; 0x88
   31606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   3160a:	f04f 32ff 	mov.w	r2, #4294967295
   3160e:	f04f 33ff 	mov.w	r3, #4294967295
   31612:	4804      	ldr	r0, [pc, #16]	; (31624 <tfm_ns_interface_dispatch+0x60>)
   31614:	f005 f95e 	bl	368d4 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   31618:	2800      	cmp	r0, #0
   3161a:	d0e0      	beq.n	315de <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   3161c:	241f      	movs	r4, #31
   3161e:	e7f0      	b.n	31602 <tfm_ns_interface_dispatch+0x3e>
   31620:	2001d3cc 	.word	0x2001d3cc
   31624:	20014fb8 	.word	0x20014fb8

00031628 <parse_string>:
{
   31628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   3162c:	680a      	ldr	r2, [r1, #0]
   3162e:	688b      	ldr	r3, [r1, #8]
{
   31630:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   31632:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   31634:	18d0      	adds	r0, r2, r3
   31636:	5cd3      	ldrb	r3, [r2, r3]
{
   31638:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   3163a:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   3163c:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   3163e:	f040 80dd 	bne.w	317fc <parse_string+0x1d4>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   31642:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   31644:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   31646:	684c      	ldr	r4, [r1, #4]
   31648:	1ab9      	subs	r1, r7, r2
   3164a:	42a1      	cmp	r1, r4
   3164c:	f080 80d6 	bcs.w	317fc <parse_string+0x1d4>
   31650:	7839      	ldrb	r1, [r7, #0]
   31652:	2922      	cmp	r1, #34	; 0x22
   31654:	d10e      	bne.n	31674 <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   31656:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   3165a:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   3165c:	f8da 2010 	ldr.w	r2, [sl, #16]
   31660:	4418      	add	r0, r3
   31662:	4790      	blx	r2
        if (output == NULL)
   31664:	4683      	mov	fp, r0
   31666:	2800      	cmp	r0, #0
   31668:	f000 80c8 	beq.w	317fc <parse_string+0x1d4>
   3166c:	4604      	mov	r4, r0
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   3166e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 31808 <parse_string+0x1e0>
   31672:	e00f      	b.n	31694 <parse_string+0x6c>
            if (input_end[0] == '\\')
   31674:	295c      	cmp	r1, #92	; 0x5c
   31676:	d105      	bne.n	31684 <parse_string+0x5c>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   31678:	3701      	adds	r7, #1
   3167a:	1ab9      	subs	r1, r7, r2
   3167c:	428c      	cmp	r4, r1
   3167e:	f240 80bd 	bls.w	317fc <parse_string+0x1d4>
                skipped_bytes++;
   31682:	3301      	adds	r3, #1
            input_end++;
   31684:	3701      	adds	r7, #1
   31686:	e7df      	b.n	31648 <parse_string+0x20>
        if (*input_pointer != '\\')
   31688:	782b      	ldrb	r3, [r5, #0]
   3168a:	2b5c      	cmp	r3, #92	; 0x5c
   3168c:	d012      	beq.n	316b4 <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   3168e:	3501      	adds	r5, #1
   31690:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   31694:	42bd      	cmp	r5, r7
   31696:	d3f7      	bcc.n	31688 <parse_string+0x60>
    *output_pointer = '\0';
   31698:	2300      	movs	r3, #0
   3169a:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   3169c:	2310      	movs	r3, #16
    return true;
   3169e:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   316a0:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   316a4:	f8da 3000 	ldr.w	r3, [sl]
   316a8:	1afb      	subs	r3, r7, r3
    input_buffer->offset++;
   316aa:	3301      	adds	r3, #1
   316ac:	f8ca 3008 	str.w	r3, [sl, #8]
}
   316b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   316b4:	1b7a      	subs	r2, r7, r5
   316b6:	2a00      	cmp	r2, #0
   316b8:	dd0d      	ble.n	316d6 <parse_string+0xae>
            switch (input_pointer[1])
   316ba:	786b      	ldrb	r3, [r5, #1]
   316bc:	2b75      	cmp	r3, #117	; 0x75
   316be:	d80a      	bhi.n	316d6 <parse_string+0xae>
   316c0:	2b6d      	cmp	r3, #109	; 0x6d
   316c2:	d812      	bhi.n	316ea <parse_string+0xc2>
   316c4:	2b62      	cmp	r3, #98	; 0x62
   316c6:	d02b      	beq.n	31720 <parse_string+0xf8>
   316c8:	d826      	bhi.n	31718 <parse_string+0xf0>
   316ca:	2b2f      	cmp	r3, #47	; 0x2f
   316cc:	d029      	beq.n	31722 <parse_string+0xfa>
   316ce:	2b5c      	cmp	r3, #92	; 0x5c
   316d0:	d027      	beq.n	31722 <parse_string+0xfa>
   316d2:	2b22      	cmp	r3, #34	; 0x22
   316d4:	d025      	beq.n	31722 <parse_string+0xfa>
        input_buffer->hooks.deallocate(output);
   316d6:	4658      	mov	r0, fp
   316d8:	f8da 3014 	ldr.w	r3, [sl, #20]
   316dc:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   316de:	f8da 0000 	ldr.w	r0, [sl]
   316e2:	1a28      	subs	r0, r5, r0
   316e4:	f8ca 0008 	str.w	r0, [sl, #8]
   316e8:	e08b      	b.n	31802 <parse_string+0x1da>
            switch (input_pointer[1])
   316ea:	3b6e      	subs	r3, #110	; 0x6e
   316ec:	2b07      	cmp	r3, #7
   316ee:	d8f2      	bhi.n	316d6 <parse_string+0xae>
   316f0:	a101      	add	r1, pc, #4	; (adr r1, 316f8 <parse_string+0xd0>)
   316f2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   316f6:	bf00      	nop
   316f8:	0003172d 	.word	0x0003172d
   316fc:	000316d7 	.word	0x000316d7
   31700:	000316d7 	.word	0x000316d7
   31704:	000316d7 	.word	0x000316d7
   31708:	00031731 	.word	0x00031731
   3170c:	000316d7 	.word	0x000316d7
   31710:	00031735 	.word	0x00031735
   31714:	00031739 	.word	0x00031739
   31718:	2b66      	cmp	r3, #102	; 0x66
   3171a:	d1dc      	bne.n	316d6 <parse_string+0xae>
                    *output_pointer++ = '\f';
   3171c:	230c      	movs	r3, #12
   3171e:	e000      	b.n	31722 <parse_string+0xfa>
                    *output_pointer++ = '\b';
   31720:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
   31722:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
   31726:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   31728:	441d      	add	r5, r3
   3172a:	e7b3      	b.n	31694 <parse_string+0x6c>
                    *output_pointer++ = '\n';
   3172c:	230a      	movs	r3, #10
   3172e:	e7f8      	b.n	31722 <parse_string+0xfa>
                    *output_pointer++ = '\r';
   31730:	230d      	movs	r3, #13
   31732:	e7f6      	b.n	31722 <parse_string+0xfa>
                    *output_pointer++ = '\t';
   31734:	2309      	movs	r3, #9
   31736:	e7f4      	b.n	31722 <parse_string+0xfa>
    if ((input_end - first_sequence) < 6)
   31738:	2a05      	cmp	r2, #5
   3173a:	ddcc      	ble.n	316d6 <parse_string+0xae>
    first_code = parse_hex4(first_sequence + 2);
   3173c:	1ca8      	adds	r0, r5, #2
   3173e:	f00e f937 	bl	3f9b0 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   31742:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   31746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   3174a:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   3174c:	d3c3      	bcc.n	316d6 <parse_string+0xae>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   3174e:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   31752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   31756:	d22d      	bcs.n	317b4 <parse_string+0x18c>
        const unsigned char *second_sequence = first_sequence + 6;
   31758:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   3175a:	1afb      	subs	r3, r7, r3
   3175c:	2b05      	cmp	r3, #5
   3175e:	ddba      	ble.n	316d6 <parse_string+0xae>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   31760:	79ab      	ldrb	r3, [r5, #6]
   31762:	2b5c      	cmp	r3, #92	; 0x5c
   31764:	d1b7      	bne.n	316d6 <parse_string+0xae>
   31766:	79eb      	ldrb	r3, [r5, #7]
   31768:	2b75      	cmp	r3, #117	; 0x75
   3176a:	d1b4      	bne.n	316d6 <parse_string+0xae>
        second_code = parse_hex4(second_sequence + 2);
   3176c:	f105 0008 	add.w	r0, r5, #8
   31770:	f00e f91e 	bl	3f9b0 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   31774:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   31778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   3177c:	d2ab      	bcs.n	316d6 <parse_string+0xae>
        sequence_length = 12; /* \uXXXX\uXXXX */
   3177e:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   31780:	ea09 2686 	and.w	r6, r9, r6, lsl #10
   31784:	f3c0 0009 	ubfx	r0, r0, #0, #10
   31788:	4330      	orrs	r0, r6
   3178a:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   3178e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   31792:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   31794:	f100 3eff 	add.w	lr, r0, #4294967295
   31798:	fa54 fe8e 	uxtab	lr, r4, lr
   3179c:	45a6      	cmp	lr, r4
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   3179e:	b2f2      	uxtb	r2, r6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   317a0:	d124      	bne.n	317ec <parse_string+0x1c4>
    if (utf8_length > 1)
   317a2:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   317a4:	bf14      	ite	ne
   317a6:	ea42 020c 	orrne.w	r2, r2, ip
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   317aa:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   317ae:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   317b0:	4404      	add	r4, r0
                    if (sequence_length == 0)
   317b2:	e7b9      	b.n	31728 <parse_string+0x100>
    if (codepoint < 0x80)
   317b4:	287f      	cmp	r0, #127	; 0x7f
   317b6:	d90a      	bls.n	317ce <parse_string+0x1a6>
    else if (codepoint < 0x800)
   317b8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   317bc:	d30c      	bcc.n	317d8 <parse_string+0x1b0>
    else if (codepoint < 0x10000)
   317be:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   317c2:	d30e      	bcc.n	317e2 <parse_string+0x1ba>
    else if (codepoint <= 0x10FFFF)
   317c4:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   317c8:	d285      	bcs.n	316d6 <parse_string+0xae>
        sequence_length = 6; /* \uXXXX */
   317ca:	2306      	movs	r3, #6
   317cc:	e7df      	b.n	3178e <parse_string+0x166>
   317ce:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   317d0:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   317d4:	2001      	movs	r0, #1
   317d6:	e7dd      	b.n	31794 <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   317d8:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   317da:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   317de:	2002      	movs	r0, #2
   317e0:	e7d8      	b.n	31794 <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   317e2:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   317e4:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   317e8:	2003      	movs	r0, #3
   317ea:	e7d3      	b.n	31794 <parse_string+0x16c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   317ec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   317f0:	f062 017f 	orn	r1, r2, #127	; 0x7f
   317f4:	f80e 1901 	strb.w	r1, [lr], #-1
        codepoint >>= 6;
   317f8:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   317fa:	e7cf      	b.n	3179c <parse_string+0x174>
    if (input_pointer != NULL)
   317fc:	2d00      	cmp	r5, #0
   317fe:	f47f af6e 	bne.w	316de <parse_string+0xb6>
    return false;
   31802:	2000      	movs	r0, #0
   31804:	e754      	b.n	316b0 <parse_string+0x88>
   31806:	bf00      	nop
   31808:	000ffc00 	.word	0x000ffc00

0003180c <compare_double>:
{
   3180c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31810:	4616      	mov	r6, r2
   31812:	461f      	mov	r7, r3
   31814:	4680      	mov	r8, r0
   31816:	4689      	mov	r9, r1
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   31818:	f00f fdc3 	bl	413a2 <fabs>
   3181c:	4604      	mov	r4, r0
   3181e:	460d      	mov	r5, r1
   31820:	4630      	mov	r0, r6
   31822:	4639      	mov	r1, r7
   31824:	f00f fdbd 	bl	413a2 <fabs>
   31828:	4602      	mov	r2, r0
   3182a:	460b      	mov	r3, r1
   3182c:	4620      	mov	r0, r4
   3182e:	4629      	mov	r1, r5
   31830:	f7eb fa52 	bl	1ccd8 <__aeabi_dcmpgt>
   31834:	b300      	cbz	r0, 31878 <compare_double+0x6c>
   31836:	4640      	mov	r0, r8
   31838:	4649      	mov	r1, r9
   3183a:	f00f fdb2 	bl	413a2 <fabs>
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   3183e:	4632      	mov	r2, r6
   31840:	463b      	mov	r3, r7
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   31842:	4604      	mov	r4, r0
   31844:	460d      	mov	r5, r1
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   31846:	4640      	mov	r0, r8
   31848:	4649      	mov	r1, r9
   3184a:	f7ea fdfd 	bl	1c448 <__aeabi_dsub>
   3184e:	f00f fda8 	bl	413a2 <fabs>
   31852:	2200      	movs	r2, #0
   31854:	4606      	mov	r6, r0
   31856:	460f      	mov	r7, r1
   31858:	4620      	mov	r0, r4
   3185a:	4629      	mov	r1, r5
   3185c:	4b08      	ldr	r3, [pc, #32]	; (31880 <compare_double+0x74>)
   3185e:	f7ea ffab 	bl	1c7b8 <__aeabi_dmul>
   31862:	4602      	mov	r2, r0
   31864:	460b      	mov	r3, r1
   31866:	4630      	mov	r0, r6
   31868:	4639      	mov	r1, r7
   3186a:	f7eb fa21 	bl	1ccb0 <__aeabi_dcmple>
}
   3186e:	3800      	subs	r0, #0
   31870:	bf18      	it	ne
   31872:	2001      	movne	r0, #1
   31874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   31878:	4630      	mov	r0, r6
   3187a:	4639      	mov	r1, r7
   3187c:	e7dd      	b.n	3183a <compare_double+0x2e>
   3187e:	bf00      	nop
   31880:	3cb00000 	.word	0x3cb00000

00031884 <get_object_item>:
{
   31884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31886:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   31888:	b360      	cbz	r0, 318e4 <get_object_item+0x60>
   3188a:	b359      	cbz	r1, 318e4 <get_object_item+0x60>
    current_element = object->child;
   3188c:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   3188e:	b9fa      	cbnz	r2, 318d0 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   31890:	4e17      	ldr	r6, [pc, #92]	; (318f0 <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   31892:	b33c      	cbz	r4, 318e4 <get_object_item+0x60>
   31894:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   31896:	b1c3      	cbz	r3, 318ca <get_object_item+0x46>
    if (string1 == string2)
   31898:	42ab      	cmp	r3, r5
   3189a:	d021      	beq.n	318e0 <get_object_item+0x5c>
   3189c:	f105 3cff 	add.w	ip, r5, #4294967295
   318a0:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   318a2:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   318a6:	460f      	mov	r7, r1
   318a8:	5d8a      	ldrb	r2, [r1, r6]
   318aa:	f002 0203 	and.w	r2, r2, #3
   318ae:	2a01      	cmp	r2, #1
   318b0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   318b4:	bf08      	it	eq
   318b6:	f101 0720 	addeq.w	r7, r1, #32
   318ba:	5cb0      	ldrb	r0, [r6, r2]
   318bc:	f000 0003 	and.w	r0, r0, #3
   318c0:	2801      	cmp	r0, #1
   318c2:	bf08      	it	eq
   318c4:	3220      	addeq	r2, #32
   318c6:	4297      	cmp	r7, r2
   318c8:	d00f      	beq.n	318ea <get_object_item+0x66>
            current_element = current_element->next;
   318ca:	6824      	ldr	r4, [r4, #0]
   318cc:	e7e1      	b.n	31892 <get_object_item+0xe>
            current_element = current_element->next;
   318ce:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   318d0:	b144      	cbz	r4, 318e4 <get_object_item+0x60>
   318d2:	6a21      	ldr	r1, [r4, #32]
   318d4:	b121      	cbz	r1, 318e0 <get_object_item+0x5c>
   318d6:	4628      	mov	r0, r5
   318d8:	f7eb fca9 	bl	1d22e <strcmp>
   318dc:	2800      	cmp	r0, #0
   318de:	d1f6      	bne.n	318ce <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   318e0:	6a23      	ldr	r3, [r4, #32]
   318e2:	b903      	cbnz	r3, 318e6 <get_object_item+0x62>
        return NULL;
   318e4:	2400      	movs	r4, #0
}
   318e6:	4620      	mov	r0, r4
   318e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   318ea:	2900      	cmp	r1, #0
   318ec:	d1d9      	bne.n	318a2 <get_object_item+0x1e>
   318ee:	e7f7      	b.n	318e0 <get_object_item+0x5c>
   318f0:	0004bd43 	.word	0x0004bd43

000318f4 <print_string_ptr>:
{
   318f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char quotes[] = "\"\"";
   318f8:	4b52      	ldr	r3, [pc, #328]	; (31a44 <print_string_ptr+0x150>)
{
   318fa:	b085      	sub	sp, #20
    const char quotes[] = "\"\"";
   318fc:	881a      	ldrh	r2, [r3, #0]
   318fe:	789b      	ldrb	r3, [r3, #2]
{
   31900:	4605      	mov	r5, r0
    if (output_buffer == NULL)
   31902:	460f      	mov	r7, r1
    const char quotes[] = "\"\"";
   31904:	f8ad 200c 	strh.w	r2, [sp, #12]
   31908:	f88d 300e 	strb.w	r3, [sp, #14]
    if (output_buffer == NULL)
   3190c:	b919      	cbnz	r1, 31916 <print_string_ptr+0x22>
        return false;
   3190e:	2000      	movs	r0, #0
}
   31910:	b005      	add	sp, #20
   31912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   31916:	b340      	cbz	r0, 3196a <print_string_ptr+0x76>
   31918:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   3191a:	f04f 0b00 	mov.w	fp, #0
   3191e:	2001      	movs	r0, #1
   31920:	4c49      	ldr	r4, [pc, #292]	; (31a48 <print_string_ptr+0x154>)
   31922:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   31924:	f811 3b01 	ldrb.w	r3, [r1], #1
   31928:	bb6b      	cbnz	r3, 31986 <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   3192a:	ebaa 0a05 	sub.w	sl, sl, r5
   3192e:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   31930:	4638      	mov	r0, r7
   31932:	f10a 0103 	add.w	r1, sl, #3
   31936:	f00e f8a1 	bl	3fa7c <ensure>
    if (output == NULL)
   3193a:	4606      	mov	r6, r0
   3193c:	2800      	cmp	r0, #0
   3193e:	d0e6      	beq.n	3190e <print_string_ptr+0x1a>
    if (escape_characters == 0)
   31940:	2322      	movs	r3, #34	; 0x22
        output[output_length + 1] = '\"';
   31942:	f10a 0901 	add.w	r9, sl, #1
        output[output_length + 2] = '\0';
   31946:	f10a 0802 	add.w	r8, sl, #2
        memcpy(output + 1, input, output_length);
   3194a:	1c44      	adds	r4, r0, #1
        output[0] = '\"';
   3194c:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   3194e:	f1bb 0f00 	cmp.w	fp, #0
   31952:	d12e      	bne.n	319b2 <print_string_ptr+0xbe>
   31954:	4652      	mov	r2, sl
   31956:	4629      	mov	r1, r5
   31958:	4620      	mov	r0, r4
   3195a:	f00f fd4b 	bl	413f4 <memcpy>
        output[output_length + 1] = '\"';
   3195e:	2322      	movs	r3, #34	; 0x22
   31960:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   31964:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   31968:	e00b      	b.n	31982 <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   3196a:	2103      	movs	r1, #3
   3196c:	4638      	mov	r0, r7
   3196e:	f00e f885 	bl	3fa7c <ensure>
        if (output == NULL)
   31972:	2800      	cmp	r0, #0
   31974:	d0cb      	beq.n	3190e <print_string_ptr+0x1a>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   31976:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   3197a:	a903      	add	r1, sp, #12
   3197c:	1ad2      	subs	r2, r2, r3
   3197e:	f00f ff40 	bl	41802 <strncpy>
    return true;
   31982:	2001      	movs	r0, #1
   31984:	e7c4      	b.n	31910 <print_string_ptr+0x1c>
        switch (*input_pointer)
   31986:	2b22      	cmp	r3, #34	; 0x22
   31988:	d80b      	bhi.n	319a2 <print_string_ptr+0xae>
   3198a:	2b07      	cmp	r3, #7
   3198c:	d90c      	bls.n	319a8 <print_string_ptr+0xb4>
   3198e:	f1a3 0208 	sub.w	r2, r3, #8
   31992:	b2d2      	uxtb	r2, r2
   31994:	fa00 f202 	lsl.w	r2, r0, r2
   31998:	4222      	tst	r2, r4
   3199a:	d005      	beq.n	319a8 <print_string_ptr+0xb4>
                escape_characters++;
   3199c:	f10b 0b01 	add.w	fp, fp, #1
                break;
   319a0:	e7bf      	b.n	31922 <print_string_ptr+0x2e>
        switch (*input_pointer)
   319a2:	2b5c      	cmp	r3, #92	; 0x5c
   319a4:	d1bd      	bne.n	31922 <print_string_ptr+0x2e>
   319a6:	e7f9      	b.n	3199c <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   319a8:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   319aa:	bf98      	it	ls
   319ac:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   319b0:	e7b7      	b.n	31922 <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   319b2:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   319b6:	f04f 0b74 	mov.w	fp, #116	; 0x74
   319ba:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   319bc:	4a23      	ldr	r2, [pc, #140]	; (31a4c <print_string_ptr+0x158>)
   319be:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   319c0:	9901      	ldr	r1, [sp, #4]
   319c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   319c6:	9101      	str	r1, [sp, #4]
   319c8:	b92b      	cbnz	r3, 319d6 <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   319ca:	2222      	movs	r2, #34	; 0x22
   319cc:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   319d0:	f806 3008 	strb.w	r3, [r6, r8]
   319d4:	e7d5      	b.n	31982 <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   319d6:	2b1f      	cmp	r3, #31
   319d8:	d907      	bls.n	319ea <print_string_ptr+0xf6>
   319da:	2b22      	cmp	r3, #34	; 0x22
   319dc:	d005      	beq.n	319ea <print_string_ptr+0xf6>
   319de:	2b5c      	cmp	r3, #92	; 0x5c
   319e0:	d003      	beq.n	319ea <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   319e2:	4620      	mov	r0, r4
   319e4:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   319e6:	1c44      	adds	r4, r0, #1
   319e8:	e7ea      	b.n	319c0 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   319ea:	4620      	mov	r0, r4
            switch (*input_pointer)
   319ec:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   319ee:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   319f2:	781b      	ldrb	r3, [r3, #0]
   319f4:	2b0d      	cmp	r3, #13
   319f6:	d80a      	bhi.n	31a0e <print_string_ptr+0x11a>
   319f8:	2b07      	cmp	r3, #7
   319fa:	d919      	bls.n	31a30 <print_string_ptr+0x13c>
   319fc:	f1a3 0108 	sub.w	r1, r3, #8
   31a00:	2905      	cmp	r1, #5
   31a02:	d815      	bhi.n	31a30 <print_string_ptr+0x13c>
   31a04:	e8df f001 	tbb	[pc, r1]
   31a08:	140d1109 	.word	0x140d1109
   31a0c:	0f0b      	.short	0x0f0b
   31a0e:	2b22      	cmp	r3, #34	; 0x22
   31a10:	d001      	beq.n	31a16 <print_string_ptr+0x122>
   31a12:	2b5c      	cmp	r3, #92	; 0x5c
   31a14:	d10c      	bne.n	31a30 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   31a16:	7063      	strb	r3, [r4, #1]
                    break;
   31a18:	e7e5      	b.n	319e6 <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   31a1a:	2362      	movs	r3, #98	; 0x62
   31a1c:	e7fb      	b.n	31a16 <print_string_ptr+0x122>
                    *output_pointer = 'f';
   31a1e:	2366      	movs	r3, #102	; 0x66
   31a20:	e7f9      	b.n	31a16 <print_string_ptr+0x122>
                    *output_pointer = 'n';
   31a22:	236e      	movs	r3, #110	; 0x6e
   31a24:	e7f7      	b.n	31a16 <print_string_ptr+0x122>
                    *output_pointer = 'r';
   31a26:	2372      	movs	r3, #114	; 0x72
   31a28:	e7f5      	b.n	31a16 <print_string_ptr+0x122>
                    *output_pointer = 't';
   31a2a:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   31a2e:	e7da      	b.n	319e6 <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   31a30:	6839      	ldr	r1, [r7, #0]
   31a32:	687d      	ldr	r5, [r7, #4]
   31a34:	1a41      	subs	r1, r0, r1
   31a36:	1a69      	subs	r1, r5, r1
   31a38:	f008 fe34 	bl	3a6a4 <sniprintf>
                    output_pointer += 4;
   31a3c:	4a03      	ldr	r2, [pc, #12]	; (31a4c <print_string_ptr+0x158>)
   31a3e:	1d60      	adds	r0, r4, #5
                    break;
   31a40:	e7d1      	b.n	319e6 <print_string_ptr+0xf2>
   31a42:	bf00      	nop
   31a44:	0004b7f3 	.word	0x0004b7f3
   31a48:	04000037 	.word	0x04000037
   31a4c:	0004b7ed 	.word	0x0004b7ed

00031a50 <cJSON_strdup.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   31a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   31a52:	4605      	mov	r5, r0
   31a54:	b180      	cbz	r0, 31a78 <cJSON_strdup.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   31a56:	f7eb fbf4 	bl	1d242 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   31a5a:	4b08      	ldr	r3, [pc, #32]	; (31a7c <cJSON_strdup.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   31a5c:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   31a5e:	4610      	mov	r0, r2
   31a60:	681b      	ldr	r3, [r3, #0]
   31a62:	9201      	str	r2, [sp, #4]
   31a64:	4798      	blx	r3
    if (copy == NULL)
   31a66:	4604      	mov	r4, r0
   31a68:	b118      	cbz	r0, 31a72 <cJSON_strdup.constprop.0+0x22>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31a6a:	4629      	mov	r1, r5
   31a6c:	9a01      	ldr	r2, [sp, #4]
   31a6e:	f00f fcc1 	bl	413f4 <memcpy>
}
   31a72:	4620      	mov	r0, r4
   31a74:	b003      	add	sp, #12
   31a76:	bd30      	pop	{r4, r5, pc}
        return NULL;
   31a78:	4604      	mov	r4, r0
   31a7a:	e7fa      	b.n	31a72 <cJSON_strdup.constprop.0+0x22>
   31a7c:	200146f0 	.word	0x200146f0

00031a80 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   31a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31a82:	460d      	mov	r5, r1
   31a84:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   31a86:	4607      	mov	r7, r0
   31a88:	b300      	cbz	r0, 31acc <add_item_to_object.constprop.0+0x4c>
   31a8a:	b1f9      	cbz	r1, 31acc <add_item_to_object.constprop.0+0x4c>
   31a8c:	b1f2      	cbz	r2, 31acc <add_item_to_object.constprop.0+0x4c>
   31a8e:	4290      	cmp	r0, r2
   31a90:	d01c      	beq.n	31acc <add_item_to_object.constprop.0+0x4c>
    if (constant_key)
   31a92:	b193      	cbz	r3, 31aba <add_item_to_object.constprop.0+0x3a>
        new_type = item->type | cJSON_StringIsConst;
   31a94:	68d6      	ldr	r6, [r2, #12]
   31a96:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   31a9a:	68e3      	ldr	r3, [r4, #12]
   31a9c:	059b      	lsls	r3, r3, #22
   31a9e:	d404      	bmi.n	31aaa <add_item_to_object.constprop.0+0x2a>
   31aa0:	6a20      	ldr	r0, [r4, #32]
   31aa2:	b110      	cbz	r0, 31aaa <add_item_to_object.constprop.0+0x2a>
        hooks->deallocate(item->string);
   31aa4:	4b0a      	ldr	r3, [pc, #40]	; (31ad0 <add_item_to_object.constprop.0+0x50>)
   31aa6:	685b      	ldr	r3, [r3, #4]
   31aa8:	4798      	blx	r3
    return add_item_to_array(object, item);
   31aaa:	4621      	mov	r1, r4
   31aac:	4638      	mov	r0, r7
    item->string = new_key;
   31aae:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   31ab0:	60e6      	str	r6, [r4, #12]
}
   31ab2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   31ab6:	f00d bfcd 	b.w	3fa54 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   31aba:	4608      	mov	r0, r1
   31abc:	f7ff ffc8 	bl	31a50 <cJSON_strdup.constprop.0>
        if (new_key == NULL)
   31ac0:	4605      	mov	r5, r0
   31ac2:	b118      	cbz	r0, 31acc <add_item_to_object.constprop.0+0x4c>
        new_type = item->type & ~cJSON_StringIsConst;
   31ac4:	68e6      	ldr	r6, [r4, #12]
   31ac6:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   31aca:	e7e6      	b.n	31a9a <add_item_to_object.constprop.0+0x1a>
}
   31acc:	2000      	movs	r0, #0
   31ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31ad0:	200146f0 	.word	0x200146f0

00031ad4 <print_value>:
{
   31ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31ad8:	460c      	mov	r4, r1
    if ((item == NULL) || (output_buffer == NULL))
   31ada:	4606      	mov	r6, r0
{
   31adc:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   31ade:	b908      	cbnz	r0, 31ae4 <print_value+0x10>
    switch ((item->type) & 0xFF)
   31ae0:	2500      	movs	r5, #0
   31ae2:	e06f      	b.n	31bc4 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   31ae4:	2900      	cmp	r1, #0
   31ae6:	d0fb      	beq.n	31ae0 <print_value+0xc>
    switch ((item->type) & 0xFF)
   31ae8:	7b05      	ldrb	r5, [r0, #12]
   31aea:	2d10      	cmp	r5, #16
   31aec:	f000 80ea 	beq.w	31cc4 <print_value+0x1f0>
   31af0:	dc18      	bgt.n	31b24 <print_value+0x50>
   31af2:	1e6b      	subs	r3, r5, #1
   31af4:	2b07      	cmp	r3, #7
   31af6:	d8f3      	bhi.n	31ae0 <print_value+0xc>
   31af8:	2b07      	cmp	r3, #7
   31afa:	d8f1      	bhi.n	31ae0 <print_value+0xc>
   31afc:	a201      	add	r2, pc, #4	; (adr r2, 31b04 <print_value+0x30>)
   31afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   31b02:	bf00      	nop
   31b04:	00031ba1 	.word	0x00031ba1
   31b08:	00031bcd 	.word	0x00031bcd
   31b0c:	00031ae1 	.word	0x00031ae1
   31b10:	00031b79 	.word	0x00031b79
   31b14:	00031ae1 	.word	0x00031ae1
   31b18:	00031ae1 	.word	0x00031ae1
   31b1c:	00031ae1 	.word	0x00031ae1
   31b20:	00031bd1 	.word	0x00031bd1
   31b24:	2d40      	cmp	r5, #64	; 0x40
   31b26:	f000 80fc 	beq.w	31d22 <print_value+0x24e>
   31b2a:	2d80      	cmp	r5, #128	; 0x80
   31b2c:	f000 80b6 	beq.w	31c9c <print_value+0x1c8>
   31b30:	2d20      	cmp	r5, #32
   31b32:	d1d5      	bne.n	31ae0 <print_value+0xc>
            return print_array(item, output_buffer);
   31b34:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   31b36:	2101      	movs	r1, #1
   31b38:	4620      	mov	r0, r4
   31b3a:	f00d ff9f 	bl	3fa7c <ensure>
    if (output_pointer == NULL)
   31b3e:	2800      	cmp	r0, #0
   31b40:	d0ce      	beq.n	31ae0 <print_value+0xc>
    *output_pointer = '[';
   31b42:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   31b44:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   31b46:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   31b4a:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   31b4c:	68a3      	ldr	r3, [r4, #8]
   31b4e:	3301      	adds	r3, #1
   31b50:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   31b52:	68e3      	ldr	r3, [r4, #12]
   31b54:	3301      	adds	r3, #1
   31b56:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   31b58:	2e00      	cmp	r6, #0
   31b5a:	f040 80b9 	bne.w	31cd0 <print_value+0x1fc>
    output_pointer = ensure(output_buffer, 2);
   31b5e:	2102      	movs	r1, #2
   31b60:	4620      	mov	r0, r4
   31b62:	f00d ff8b 	bl	3fa7c <ensure>
    if (output_pointer == NULL)
   31b66:	2800      	cmp	r0, #0
   31b68:	d0ba      	beq.n	31ae0 <print_value+0xc>
    *output_pointer++ = ']';
   31b6a:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   31b6c:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   31b6e:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   31b70:	68e3      	ldr	r3, [r4, #12]
   31b72:	3b01      	subs	r3, #1
   31b74:	60e3      	str	r3, [r4, #12]
   31b76:	e011      	b.n	31b9c <print_value+0xc8>
            const char buff[] = "null";
   31b78:	4b82      	ldr	r3, [pc, #520]	; (31d84 <print_value+0x2b0>)
            const char buff[] = "true";
   31b7a:	6818      	ldr	r0, [r3, #0]
   31b7c:	791b      	ldrb	r3, [r3, #4]
   31b7e:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   31b80:	2105      	movs	r1, #5
   31b82:	4620      	mov	r0, r4
            const char buff[] = "true";
   31b84:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   31b88:	f00d ff78 	bl	3fa7c <ensure>
            if (output == NULL)
   31b8c:	4605      	mov	r5, r0
   31b8e:	b1c8      	cbz	r0, 31bc4 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   31b90:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   31b94:	a907      	add	r1, sp, #28
   31b96:	1ad2      	subs	r2, r2, r3
   31b98:	f00f fe33 	bl	41802 <strncpy>
    return true;
   31b9c:	2501      	movs	r5, #1
   31b9e:	e011      	b.n	31bc4 <print_value+0xf0>
            const char buff[] = "false";
   31ba0:	4b79      	ldr	r3, [pc, #484]	; (31d88 <print_value+0x2b4>)
            output = ensure(output_buffer, sizeof(buff));
   31ba2:	2106      	movs	r1, #6
            const char buff[] = "false";
   31ba4:	6818      	ldr	r0, [r3, #0]
   31ba6:	889b      	ldrh	r3, [r3, #4]
   31ba8:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   31baa:	4620      	mov	r0, r4
            const char buff[] = "false";
   31bac:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   31bb0:	f00d ff64 	bl	3fa7c <ensure>
            if (output == NULL)
   31bb4:	2800      	cmp	r0, #0
   31bb6:	d093      	beq.n	31ae0 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   31bb8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   31bbc:	a907      	add	r1, sp, #28
   31bbe:	1ad2      	subs	r2, r2, r3
   31bc0:	f00f fe1f 	bl	41802 <strncpy>
}
   31bc4:	4628      	mov	r0, r5
   31bc6:	b00f      	add	sp, #60	; 0x3c
   31bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   31bcc:	4b6f      	ldr	r3, [pc, #444]	; (31d8c <print_value+0x2b8>)
   31bce:	e7d4      	b.n	31b7a <print_value+0xa6>
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   31bd0:	2100      	movs	r1, #0
    double d = item->valuedouble;
   31bd2:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   31bd6:	2216      	movs	r2, #22
   31bd8:	a808      	add	r0, sp, #32
   31bda:	9107      	str	r1, [sp, #28]
   31bdc:	f00f fc2a 	bl	41434 <memset>
    double test = 0.0;
   31be0:	2200      	movs	r2, #0
   31be2:	2300      	movs	r3, #0
    if (isnan(d) || isinf(d))
   31be4:	4630      	mov	r0, r6
    double test = 0.0;
   31be6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (isnan(d) || isinf(d))
   31bea:	4639      	mov	r1, r7
   31bec:	4632      	mov	r2, r6
   31bee:	463b      	mov	r3, r7
   31bf0:	f7eb f87c 	bl	1ccec <__aeabi_dcmpun>
   31bf4:	b988      	cbnz	r0, 31c1a <print_value+0x146>
   31bf6:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   31bfa:	f04f 32ff 	mov.w	r2, #4294967295
   31bfe:	4630      	mov	r0, r6
   31c00:	4649      	mov	r1, r9
   31c02:	4b63      	ldr	r3, [pc, #396]	; (31d90 <print_value+0x2bc>)
   31c04:	f7eb f872 	bl	1ccec <__aeabi_dcmpun>
   31c08:	b9f0      	cbnz	r0, 31c48 <print_value+0x174>
   31c0a:	f04f 32ff 	mov.w	r2, #4294967295
   31c0e:	4630      	mov	r0, r6
   31c10:	4649      	mov	r1, r9
   31c12:	4b5f      	ldr	r3, [pc, #380]	; (31d90 <print_value+0x2bc>)
   31c14:	f7eb f84c 	bl	1ccb0 <__aeabi_dcmple>
   31c18:	b9b0      	cbnz	r0, 31c48 <print_value+0x174>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   31c1a:	495a      	ldr	r1, [pc, #360]	; (31d84 <print_value+0x2b0>)
   31c1c:	a807      	add	r0, sp, #28
   31c1e:	f00f fdd4 	bl	417ca <strcpy>
   31c22:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   31c24:	4620      	mov	r0, r4
   31c26:	1c69      	adds	r1, r5, #1
   31c28:	f00d ff28 	bl	3fa7c <ensure>
    if (output_pointer == NULL)
   31c2c:	2800      	cmp	r0, #0
   31c2e:	f43f af57 	beq.w	31ae0 <print_value+0xc>
   31c32:	4602      	mov	r2, r0
   31c34:	ab07      	add	r3, sp, #28
   31c36:	1946      	adds	r6, r0, r5
    for (i = 0; i < ((size_t)length); i++)
   31c38:	4296      	cmp	r6, r2
   31c3a:	d129      	bne.n	31c90 <print_value+0x1bc>
    output_pointer[i] = '\0';
   31c3c:	2300      	movs	r3, #0
   31c3e:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   31c40:	68a0      	ldr	r0, [r4, #8]
   31c42:	4428      	add	r0, r5
   31c44:	60a0      	str	r0, [r4, #8]
    return true;
   31c46:	e7a9      	b.n	31b9c <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   31c48:	211a      	movs	r1, #26
   31c4a:	4a52      	ldr	r2, [pc, #328]	; (31d94 <print_value+0x2c0>)
   31c4c:	e9cd 6700 	strd	r6, r7, [sp]
   31c50:	a807      	add	r0, sp, #28
   31c52:	f008 fd27 	bl	3a6a4 <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   31c56:	4950      	ldr	r1, [pc, #320]	; (31d98 <print_value+0x2c4>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   31c58:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   31c5a:	aa04      	add	r2, sp, #16
   31c5c:	a807      	add	r0, sp, #28
   31c5e:	f008 fd55 	bl	3a70c <siscanf>
   31c62:	2801      	cmp	r0, #1
   31c64:	d00b      	beq.n	31c7e <print_value+0x1aa>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   31c66:	211a      	movs	r1, #26
   31c68:	e9cd 6700 	strd	r6, r7, [sp]
   31c6c:	4a4b      	ldr	r2, [pc, #300]	; (31d9c <print_value+0x2c8>)
   31c6e:	a807      	add	r0, sp, #28
   31c70:	f008 fd18 	bl	3a6a4 <sniprintf>
   31c74:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   31c76:	2d19      	cmp	r5, #25
   31c78:	f73f af32 	bgt.w	31ae0 <print_value+0xc>
   31c7c:	e7d2      	b.n	31c24 <print_value+0x150>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   31c7e:	4632      	mov	r2, r6
   31c80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   31c84:	463b      	mov	r3, r7
   31c86:	f7ff fdc1 	bl	3180c <compare_double>
   31c8a:	2800      	cmp	r0, #0
   31c8c:	d0eb      	beq.n	31c66 <print_value+0x192>
   31c8e:	e7f2      	b.n	31c76 <print_value+0x1a2>
        if (number_buffer[i] == decimal_point)
   31c90:	f813 1b01 	ldrb.w	r1, [r3], #1
   31c94:	3201      	adds	r2, #1
            output_pointer[i] = '.';
   31c96:	f802 1c01 	strb.w	r1, [r2, #-1]
    for (i = 0; i < ((size_t)length); i++)
   31c9a:	e7cd      	b.n	31c38 <print_value+0x164>
            if (item->valuestring == NULL)
   31c9c:	6900      	ldr	r0, [r0, #16]
   31c9e:	2800      	cmp	r0, #0
   31ca0:	f43f af1e 	beq.w	31ae0 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   31ca4:	f7eb facd 	bl	1d242 <strlen>
   31ca8:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   31caa:	4611      	mov	r1, r2
   31cac:	4620      	mov	r0, r4
   31cae:	9203      	str	r2, [sp, #12]
   31cb0:	f00d fee4 	bl	3fa7c <ensure>
            if (output == NULL)
   31cb4:	2800      	cmp	r0, #0
   31cb6:	f43f af13 	beq.w	31ae0 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31cba:	9a03      	ldr	r2, [sp, #12]
   31cbc:	6931      	ldr	r1, [r6, #16]
   31cbe:	f00f fb99 	bl	413f4 <memcpy>
   31cc2:	e76b      	b.n	31b9c <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   31cc4:	6900      	ldr	r0, [r0, #16]
}
   31cc6:	b00f      	add	sp, #60	; 0x3c
   31cc8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
   31ccc:	f7ff be12 	b.w	318f4 <print_string_ptr>
        if (!print_value(current_element, output_buffer))
   31cd0:	4621      	mov	r1, r4
   31cd2:	4630      	mov	r0, r6
   31cd4:	f7ff fefe 	bl	31ad4 <print_value>
   31cd8:	2800      	cmp	r0, #0
   31cda:	f43f af01 	beq.w	31ae0 <print_value+0xc>
        update_offset(output_buffer);
   31cde:	4620      	mov	r0, r4
   31ce0:	f00d feab 	bl	3fa3a <update_offset>
        if (current_element->next)
   31ce4:	6833      	ldr	r3, [r6, #0]
   31ce6:	b1bb      	cbz	r3, 31d18 <print_value+0x244>
            length = (size_t) (output_buffer->format ? 2 : 1);
   31ce8:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   31cea:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   31cec:	2b00      	cmp	r3, #0
   31cee:	bf14      	ite	ne
   31cf0:	f04f 0902 	movne.w	r9, #2
   31cf4:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   31cf8:	f109 0101 	add.w	r1, r9, #1
   31cfc:	f00d febe 	bl	3fa7c <ensure>
            if (output_pointer == NULL)
   31d00:	2800      	cmp	r0, #0
   31d02:	f43f aeed 	beq.w	31ae0 <print_value+0xc>
            *output_pointer++ = ',';
   31d06:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   31d08:	6963      	ldr	r3, [r4, #20]
   31d0a:	b93b      	cbnz	r3, 31d1c <print_value+0x248>
            *output_pointer++ = ',';
   31d0c:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   31d0e:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   31d12:	68a3      	ldr	r3, [r4, #8]
   31d14:	444b      	add	r3, r9
   31d16:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   31d18:	6836      	ldr	r6, [r6, #0]
   31d1a:	e71d      	b.n	31b58 <print_value+0x84>
                *output_pointer++ = ' ';
   31d1c:	1c83      	adds	r3, r0, #2
   31d1e:	7045      	strb	r5, [r0, #1]
   31d20:	e7f5      	b.n	31d0e <print_value+0x23a>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   31d22:	694b      	ldr	r3, [r1, #20]
   31d24:	6885      	ldr	r5, [r0, #8]
   31d26:	2b00      	cmp	r3, #0
   31d28:	bf14      	ite	ne
   31d2a:	2702      	movne	r7, #2
   31d2c:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   31d2e:	4620      	mov	r0, r4
   31d30:	1c79      	adds	r1, r7, #1
   31d32:	f00d fea3 	bl	3fa7c <ensure>
    if (output_pointer == NULL)
   31d36:	2800      	cmp	r0, #0
   31d38:	f43f aed2 	beq.w	31ae0 <print_value+0xc>
    *output_pointer++ = '{';
   31d3c:	237b      	movs	r3, #123	; 0x7b
   31d3e:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   31d40:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   31d42:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   31d44:	3201      	adds	r2, #1
   31d46:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   31d48:	b10b      	cbz	r3, 31d4e <print_value+0x27a>
        *output_pointer++ = '\n';
   31d4a:	230a      	movs	r3, #10
   31d4c:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   31d4e:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   31d50:	2609      	movs	r6, #9
    output_buffer->offset += length;
   31d52:	443b      	add	r3, r7
        *output_pointer++ = ':';
   31d54:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   31d56:	60a3      	str	r3, [r4, #8]
        if (output_buffer->format)
   31d58:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   31d5a:	bb0d      	cbnz	r5, 31da0 <print_value+0x2cc>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   31d5c:	2b00      	cmp	r3, #0
   31d5e:	d07f      	beq.n	31e60 <print_value+0x38c>
   31d60:	68e1      	ldr	r1, [r4, #12]
   31d62:	3101      	adds	r1, #1
   31d64:	4620      	mov	r0, r4
   31d66:	f00d fe89 	bl	3fa7c <ensure>
    if (output_pointer == NULL)
   31d6a:	2800      	cmp	r0, #0
   31d6c:	f43f aeb8 	beq.w	31ae0 <print_value+0xc>
    if (output_buffer->format)
   31d70:	6963      	ldr	r3, [r4, #20]
   31d72:	2b00      	cmp	r3, #0
   31d74:	d17e      	bne.n	31e74 <print_value+0x3a0>
   31d76:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   31d78:	227d      	movs	r2, #125	; 0x7d
   31d7a:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   31d7c:	2200      	movs	r2, #0
   31d7e:	705a      	strb	r2, [r3, #1]
   31d80:	e6f6      	b.n	31b70 <print_value+0x9c>
   31d82:	bf00      	nop
   31d84:	0004b7f6 	.word	0x0004b7f6
   31d88:	0004b80d 	.word	0x0004b80d
   31d8c:	0004b813 	.word	0x0004b813
   31d90:	7fefffff 	.word	0x7fefffff
   31d94:	0004b7fb 	.word	0x0004b7fb
   31d98:	0004b802 	.word	0x0004b802
   31d9c:	0004b806 	.word	0x0004b806
        if (output_buffer->format)
   31da0:	b173      	cbz	r3, 31dc0 <print_value+0x2ec>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   31da2:	4620      	mov	r0, r4
   31da4:	68e1      	ldr	r1, [r4, #12]
   31da6:	f00d fe69 	bl	3fa7c <ensure>
            if (output_pointer == NULL)
   31daa:	2800      	cmp	r0, #0
   31dac:	f43f ae98 	beq.w	31ae0 <print_value+0xc>
   31db0:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   31db2:	68e1      	ldr	r1, [r4, #12]
   31db4:	1a13      	subs	r3, r2, r0
   31db6:	428b      	cmp	r3, r1
   31db8:	d34f      	bcc.n	31e5a <print_value+0x386>
            output_buffer->offset += output_buffer->depth;
   31dba:	68a3      	ldr	r3, [r4, #8]
   31dbc:	440b      	add	r3, r1
   31dbe:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   31dc0:	4621      	mov	r1, r4
   31dc2:	6a28      	ldr	r0, [r5, #32]
   31dc4:	f7ff fd96 	bl	318f4 <print_string_ptr>
   31dc8:	2800      	cmp	r0, #0
   31dca:	f43f ae89 	beq.w	31ae0 <print_value+0xc>
        update_offset(output_buffer);
   31dce:	4620      	mov	r0, r4
   31dd0:	f00d fe33 	bl	3fa3a <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   31dd4:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   31dd6:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   31dd8:	2b00      	cmp	r3, #0
   31dda:	bf14      	ite	ne
   31ddc:	f04f 0802 	movne.w	r8, #2
   31de0:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   31de4:	4641      	mov	r1, r8
   31de6:	f00d fe49 	bl	3fa7c <ensure>
        if (output_pointer == NULL)
   31dea:	2800      	cmp	r0, #0
   31dec:	f43f ae78 	beq.w	31ae0 <print_value+0xc>
        *output_pointer++ = ':';
   31df0:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   31df2:	6963      	ldr	r3, [r4, #20]
   31df4:	b103      	cbz	r3, 31df8 <print_value+0x324>
            *output_pointer++ = '\t';
   31df6:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   31df8:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   31dfa:	4621      	mov	r1, r4
        output_buffer->offset += length;
   31dfc:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   31dfe:	4628      	mov	r0, r5
        output_buffer->offset += length;
   31e00:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   31e02:	f7ff fe67 	bl	31ad4 <print_value>
   31e06:	2800      	cmp	r0, #0
   31e08:	f43f ae6a 	beq.w	31ae0 <print_value+0xc>
        update_offset(output_buffer);
   31e0c:	4620      	mov	r0, r4
   31e0e:	f00d fe14 	bl	3fa3a <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   31e12:	682b      	ldr	r3, [r5, #0]
   31e14:	6962      	ldr	r2, [r4, #20]
   31e16:	f1b3 0800 	subs.w	r8, r3, #0
   31e1a:	bf18      	it	ne
   31e1c:	f04f 0801 	movne.w	r8, #1
   31e20:	2a00      	cmp	r2, #0
   31e22:	bf18      	it	ne
   31e24:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
   31e28:	4620      	mov	r0, r4
   31e2a:	f108 0101 	add.w	r1, r8, #1
   31e2e:	f00d fe25 	bl	3fa7c <ensure>
        if (output_pointer == NULL)
   31e32:	2800      	cmp	r0, #0
   31e34:	f43f ae54 	beq.w	31ae0 <print_value+0xc>
        if (current_item->next)
   31e38:	682b      	ldr	r3, [r5, #0]
   31e3a:	b113      	cbz	r3, 31e42 <print_value+0x36e>
            *output_pointer++ = ',';
   31e3c:	232c      	movs	r3, #44	; 0x2c
   31e3e:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   31e42:	6963      	ldr	r3, [r4, #20]
   31e44:	b113      	cbz	r3, 31e4c <print_value+0x378>
            *output_pointer++ = '\n';
   31e46:	230a      	movs	r3, #10
   31e48:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   31e4c:	2300      	movs	r3, #0
   31e4e:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   31e50:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   31e52:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   31e54:	4443      	add	r3, r8
   31e56:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   31e58:	e77e      	b.n	31d58 <print_value+0x284>
                *output_pointer++ = '\t';
   31e5a:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   31e5e:	e7a8      	b.n	31db2 <print_value+0x2de>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   31e60:	2102      	movs	r1, #2
   31e62:	e77f      	b.n	31d64 <print_value+0x290>
            *output_pointer++ = '\t';
   31e64:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   31e68:	68e2      	ldr	r2, [r4, #12]
   31e6a:	1a19      	subs	r1, r3, r0
   31e6c:	3a01      	subs	r2, #1
   31e6e:	4291      	cmp	r1, r2
   31e70:	d3f8      	bcc.n	31e64 <print_value+0x390>
   31e72:	e781      	b.n	31d78 <print_value+0x2a4>
   31e74:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   31e76:	2509      	movs	r5, #9
   31e78:	e7f6      	b.n	31e68 <print_value+0x394>
   31e7a:	bf00      	nop

00031e7c <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   31e7c:	b570      	push	{r4, r5, r6, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   31e7e:	4d23      	ldr	r5, [pc, #140]	; (31f0c <print.constprop.0+0x90>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   31e80:	b08a      	sub	sp, #40	; 0x28
   31e82:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   31e84:	2224      	movs	r2, #36	; 0x24
   31e86:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   31e88:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   31e8a:	a801      	add	r0, sp, #4
   31e8c:	f00f fad2 	bl	41434 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   31e90:	682b      	ldr	r3, [r5, #0]
   31e92:	f44f 7080 	mov.w	r0, #256	; 0x100
   31e96:	4798      	blx	r3
    buffer->length = default_buffer_size;
   31e98:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   31e9c:	4603      	mov	r3, r0
    buffer->format = format;
   31e9e:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   31ea0:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   31ea2:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   31ea4:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   31ea6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   31eaa:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   31eae:	b17b      	cbz	r3, 31ed0 <print.constprop.0+0x54>
    if (!print_value(item, buffer))
   31eb0:	4620      	mov	r0, r4
   31eb2:	a901      	add	r1, sp, #4
   31eb4:	f7ff fe0e 	bl	31ad4 <print_value>
   31eb8:	b150      	cbz	r0, 31ed0 <print.constprop.0+0x54>
    update_offset(buffer);
   31eba:	a801      	add	r0, sp, #4
   31ebc:	f00d fdbd 	bl	3fa3a <update_offset>
    if (hooks->reallocate != NULL)
   31ec0:	68ae      	ldr	r6, [r5, #8]
   31ec2:	9903      	ldr	r1, [sp, #12]
   31ec4:	b15e      	cbz	r6, 31ede <print.constprop.0+0x62>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   31ec6:	9801      	ldr	r0, [sp, #4]
   31ec8:	3101      	adds	r1, #1
   31eca:	47b0      	blx	r6
        if (printed == NULL) {
   31ecc:	4604      	mov	r4, r0
   31ece:	b9d0      	cbnz	r0, 31f06 <print.constprop.0+0x8a>
    if (buffer->buffer != NULL)
   31ed0:	9c01      	ldr	r4, [sp, #4]
   31ed2:	b1c4      	cbz	r4, 31f06 <print.constprop.0+0x8a>
        hooks->deallocate(buffer->buffer);
   31ed4:	4620      	mov	r0, r4
   31ed6:	686b      	ldr	r3, [r5, #4]
   31ed8:	4798      	blx	r3
    return NULL;
   31eda:	2400      	movs	r4, #0
   31edc:	e013      	b.n	31f06 <print.constprop.0+0x8a>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   31ede:	682b      	ldr	r3, [r5, #0]
   31ee0:	1c48      	adds	r0, r1, #1
   31ee2:	4798      	blx	r3
        if (printed == NULL)
   31ee4:	4604      	mov	r4, r0
   31ee6:	2800      	cmp	r0, #0
   31ee8:	d0f2      	beq.n	31ed0 <print.constprop.0+0x54>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   31eea:	9a03      	ldr	r2, [sp, #12]
   31eec:	9b02      	ldr	r3, [sp, #8]
   31eee:	3201      	adds	r2, #1
   31ef0:	429a      	cmp	r2, r3
   31ef2:	bf28      	it	cs
   31ef4:	461a      	movcs	r2, r3
   31ef6:	9901      	ldr	r1, [sp, #4]
   31ef8:	f00f fa7c 	bl	413f4 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   31efc:	9b03      	ldr	r3, [sp, #12]
   31efe:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   31f00:	686b      	ldr	r3, [r5, #4]
   31f02:	9801      	ldr	r0, [sp, #4]
   31f04:	4798      	blx	r3
}
   31f06:	4620      	mov	r0, r4
   31f08:	b00a      	add	sp, #40	; 0x28
   31f0a:	bd70      	pop	{r4, r5, r6, pc}
   31f0c:	200146f0 	.word	0x200146f0

00031f10 <cJSON_InitHooks>:
{
   31f10:	b530      	push	{r4, r5, lr}
   31f12:	4b0e      	ldr	r3, [pc, #56]	; (31f4c <cJSON_InitHooks+0x3c>)
   31f14:	490e      	ldr	r1, [pc, #56]	; (31f50 <cJSON_InitHooks+0x40>)
   31f16:	4a0f      	ldr	r2, [pc, #60]	; (31f54 <cJSON_InitHooks+0x44>)
    if (hooks == NULL)
   31f18:	b920      	cbnz	r0, 31f24 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   31f1a:	e9c3 1200 	strd	r1, r2, [r3]
        global_hooks.reallocate = realloc;
   31f1e:	4a0e      	ldr	r2, [pc, #56]	; (31f58 <cJSON_InitHooks+0x48>)
   31f20:	609a      	str	r2, [r3, #8]
   31f22:	e011      	b.n	31f48 <cJSON_InitHooks+0x38>
    if (hooks->malloc_fn != NULL)
   31f24:	6805      	ldr	r5, [r0, #0]
        global_hooks.allocate = hooks->malloc_fn;
   31f26:	2d00      	cmp	r5, #0
   31f28:	bf14      	ite	ne
   31f2a:	462c      	movne	r4, r5
   31f2c:	460c      	moveq	r4, r1
    if (hooks->free_fn != NULL)
   31f2e:	6845      	ldr	r5, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   31f30:	601c      	str	r4, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   31f32:	2d00      	cmp	r5, #0
   31f34:	bf14      	ite	ne
   31f36:	4628      	movne	r0, r5
   31f38:	4610      	moveq	r0, r2
    global_hooks.reallocate = NULL;
   31f3a:	2500      	movs	r5, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   31f3c:	428c      	cmp	r4, r1
        global_hooks.deallocate = hooks->free_fn;
   31f3e:	6058      	str	r0, [r3, #4]
    global_hooks.reallocate = NULL;
   31f40:	609d      	str	r5, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   31f42:	d101      	bne.n	31f48 <cJSON_InitHooks+0x38>
   31f44:	4290      	cmp	r0, r2
   31f46:	d0ea      	beq.n	31f1e <cJSON_InitHooks+0xe>
}
   31f48:	bd30      	pop	{r4, r5, pc}
   31f4a:	bf00      	nop
   31f4c:	200146f0 	.word	0x200146f0
   31f50:	00039bbd 	.word	0x00039bbd
   31f54:	00039bcd 	.word	0x00039bcd
   31f58:	0003a675 	.word	0x0003a675

00031f5c <cJSON_Delete>:
{
   31f5c:	b570      	push	{r4, r5, r6, lr}
   31f5e:	4604      	mov	r4, r0
   31f60:	4d0f      	ldr	r5, [pc, #60]	; (31fa0 <cJSON_Delete+0x44>)
    while (item != NULL)
   31f62:	b904      	cbnz	r4, 31f66 <cJSON_Delete+0xa>
}
   31f64:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   31f66:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   31f68:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   31f6a:	05d9      	lsls	r1, r3, #23
   31f6c:	d403      	bmi.n	31f76 <cJSON_Delete+0x1a>
   31f6e:	68a0      	ldr	r0, [r4, #8]
   31f70:	b968      	cbnz	r0, 31f8e <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   31f72:	6920      	ldr	r0, [r4, #16]
   31f74:	b988      	cbnz	r0, 31f9a <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   31f76:	68e3      	ldr	r3, [r4, #12]
   31f78:	059b      	lsls	r3, r3, #22
   31f7a:	d403      	bmi.n	31f84 <cJSON_Delete+0x28>
   31f7c:	6a20      	ldr	r0, [r4, #32]
   31f7e:	b108      	cbz	r0, 31f84 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   31f80:	686b      	ldr	r3, [r5, #4]
   31f82:	4798      	blx	r3
        global_hooks.deallocate(item);
   31f84:	4620      	mov	r0, r4
   31f86:	686b      	ldr	r3, [r5, #4]
   31f88:	4798      	blx	r3
        item = next;
   31f8a:	4634      	mov	r4, r6
   31f8c:	e7e9      	b.n	31f62 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   31f8e:	f7ff ffe5 	bl	31f5c <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   31f92:	68e3      	ldr	r3, [r4, #12]
   31f94:	05da      	lsls	r2, r3, #23
   31f96:	d5ec      	bpl.n	31f72 <cJSON_Delete+0x16>
   31f98:	e7ed      	b.n	31f76 <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   31f9a:	686b      	ldr	r3, [r5, #4]
   31f9c:	4798      	blx	r3
   31f9e:	e7ea      	b.n	31f76 <cJSON_Delete+0x1a>
   31fa0:	200146f0 	.word	0x200146f0

00031fa4 <cJSON_ParseWithLengthOpts>:
{
   31fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31fa8:	4605      	mov	r5, r0
    global_error.json = NULL;
   31faa:	f04f 0900 	mov.w	r9, #0
{
   31fae:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   31fb0:	4f30      	ldr	r7, [pc, #192]	; (32074 <cJSON_ParseWithLengthOpts+0xd0>)
{
   31fb2:	460c      	mov	r4, r1
   31fb4:	4616      	mov	r6, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   31fb6:	2100      	movs	r1, #0
   31fb8:	221c      	movs	r2, #28
   31fba:	a801      	add	r0, sp, #4
{
   31fbc:	4698      	mov	r8, r3
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   31fbe:	f00f fa39 	bl	41434 <memset>
    global_error.position = 0;
   31fc2:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL || 0 == buffer_length)
   31fc6:	2d00      	cmp	r5, #0
   31fc8:	d04a      	beq.n	32060 <cJSON_ParseWithLengthOpts+0xbc>
   31fca:	2c00      	cmp	r4, #0
   31fcc:	d03d      	beq.n	3204a <cJSON_ParseWithLengthOpts+0xa6>
    buffer.hooks = global_hooks;
   31fce:	4b2a      	ldr	r3, [pc, #168]	; (32078 <cJSON_ParseWithLengthOpts+0xd4>)
    buffer.length = buffer_length; 
   31fd0:	e9cd 5401 	strd	r5, r4, [sp, #4]
    buffer.hooks = global_hooks;
   31fd4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   31fd8:	ab08      	add	r3, sp, #32
   31fda:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   31fde:	f00d fd8e 	bl	3fafe <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   31fe2:	4604      	mov	r4, r0
   31fe4:	2800      	cmp	r0, #0
   31fe6:	d030      	beq.n	3204a <cJSON_ParseWithLengthOpts+0xa6>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   31fe8:	9801      	ldr	r0, [sp, #4]
   31fea:	b128      	cbz	r0, 31ff8 <cJSON_ParseWithLengthOpts+0x54>
   31fec:	9b03      	ldr	r3, [sp, #12]
   31fee:	b9e3      	cbnz	r3, 3202a <cJSON_ParseWithLengthOpts+0x86>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   31ff0:	9b02      	ldr	r3, [sp, #8]
   31ff2:	2b04      	cmp	r3, #4
   31ff4:	d80f      	bhi.n	32016 <cJSON_ParseWithLengthOpts+0x72>
    return buffer;
   31ff6:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   31ff8:	f00d fcff 	bl	3f9fa <buffer_skip_whitespace>
   31ffc:	4601      	mov	r1, r0
   31ffe:	4620      	mov	r0, r4
   32000:	f7ec f8ea 	bl	1e1d8 <parse_value>
   32004:	b1f0      	cbz	r0, 32044 <cJSON_ParseWithLengthOpts+0xa0>
    if (require_null_terminated)
   32006:	f1b8 0f00 	cmp.w	r8, #0
   3200a:	d110      	bne.n	3202e <cJSON_ParseWithLengthOpts+0x8a>
    if (return_parse_end)
   3200c:	bb56      	cbnz	r6, 32064 <cJSON_ParseWithLengthOpts+0xc0>
}
   3200e:	4620      	mov	r0, r4
   32010:	b009      	add	sp, #36	; 0x24
   32012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   32016:	2203      	movs	r2, #3
   32018:	4918      	ldr	r1, [pc, #96]	; (3207c <cJSON_ParseWithLengthOpts+0xd8>)
   3201a:	f00f fbde 	bl	417da <strncmp>
   3201e:	2800      	cmp	r0, #0
   32020:	d1e9      	bne.n	31ff6 <cJSON_ParseWithLengthOpts+0x52>
        buffer->offset += 3;
   32022:	9b03      	ldr	r3, [sp, #12]
   32024:	3303      	adds	r3, #3
   32026:	9303      	str	r3, [sp, #12]
   32028:	e7e5      	b.n	31ff6 <cJSON_ParseWithLengthOpts+0x52>
        return NULL;
   3202a:	4648      	mov	r0, r9
   3202c:	e7e4      	b.n	31ff8 <cJSON_ParseWithLengthOpts+0x54>
        buffer_skip_whitespace(&buffer);
   3202e:	a801      	add	r0, sp, #4
   32030:	f00d fce3 	bl	3f9fa <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   32034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   32038:	4293      	cmp	r3, r2
   3203a:	d203      	bcs.n	32044 <cJSON_ParseWithLengthOpts+0xa0>
   3203c:	9a01      	ldr	r2, [sp, #4]
   3203e:	5cd3      	ldrb	r3, [r2, r3]
   32040:	2b00      	cmp	r3, #0
   32042:	d0e3      	beq.n	3200c <cJSON_ParseWithLengthOpts+0x68>
        cJSON_Delete(item);
   32044:	4620      	mov	r0, r4
   32046:	f7ff ff89 	bl	31f5c <cJSON_Delete>
        if (buffer.offset < buffer.length)
   3204a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   3204e:	429a      	cmp	r2, r3
   32050:	d30d      	bcc.n	3206e <cJSON_ParseWithLengthOpts+0xca>
        else if (buffer.length > 0)
   32052:	b103      	cbz	r3, 32056 <cJSON_ParseWithLengthOpts+0xb2>
            local_error.position = buffer.length - 1;
   32054:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   32056:	b10e      	cbz	r6, 3205c <cJSON_ParseWithLengthOpts+0xb8>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   32058:	18ea      	adds	r2, r5, r3
   3205a:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   3205c:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
   32060:	2400      	movs	r4, #0
   32062:	e7d4      	b.n	3200e <cJSON_ParseWithLengthOpts+0x6a>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   32064:	9b01      	ldr	r3, [sp, #4]
   32066:	9a03      	ldr	r2, [sp, #12]
   32068:	4413      	add	r3, r2
   3206a:	6033      	str	r3, [r6, #0]
   3206c:	e7cf      	b.n	3200e <cJSON_ParseWithLengthOpts+0x6a>
   3206e:	4613      	mov	r3, r2
   32070:	e7f1      	b.n	32056 <cJSON_ParseWithLengthOpts+0xb2>
   32072:	bf00      	nop
   32074:	2001a410 	.word	0x2001a410
   32078:	200146f0 	.word	0x200146f0
   3207c:	0004b818 	.word	0x0004b818

00032080 <cJSON_CreateNull>:
{
   32080:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   32082:	4b04      	ldr	r3, [pc, #16]	; (32094 <cJSON_CreateNull+0x14>)
   32084:	6818      	ldr	r0, [r3, #0]
   32086:	f00d fd3a 	bl	3fafe <cJSON_New_Item.isra.0>
    if(item)
   3208a:	b108      	cbz	r0, 32090 <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   3208c:	2304      	movs	r3, #4
   3208e:	60c3      	str	r3, [r0, #12]
}
   32090:	bd08      	pop	{r3, pc}
   32092:	bf00      	nop
   32094:	200146f0 	.word	0x200146f0

00032098 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   32098:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   3209a:	4b0a      	ldr	r3, [pc, #40]	; (320c4 <cJSON_CreateString+0x2c>)
{
   3209c:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   3209e:	6818      	ldr	r0, [r3, #0]
   320a0:	f00d fd2d 	bl	3fafe <cJSON_New_Item.isra.0>
    if(item)
   320a4:	4604      	mov	r4, r0
   320a6:	b158      	cbz	r0, 320c0 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   320a8:	2310      	movs	r3, #16
   320aa:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   320ac:	4628      	mov	r0, r5
   320ae:	f7ff fccf 	bl	31a50 <cJSON_strdup.constprop.0>
   320b2:	4605      	mov	r5, r0
   320b4:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   320b6:	b918      	cbnz	r0, 320c0 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   320b8:	4620      	mov	r0, r4
   320ba:	f7ff ff4f 	bl	31f5c <cJSON_Delete>
            return NULL;
   320be:	462c      	mov	r4, r5
        }
    }

    return item;
}
   320c0:	4620      	mov	r0, r4
   320c2:	bd38      	pop	{r3, r4, r5, pc}
   320c4:	200146f0 	.word	0x200146f0

000320c8 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   320c8:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   320ca:	4b04      	ldr	r3, [pc, #16]	; (320dc <cJSON_CreateArray+0x14>)
   320cc:	6818      	ldr	r0, [r3, #0]
   320ce:	f00d fd16 	bl	3fafe <cJSON_New_Item.isra.0>
    if(item)
   320d2:	b108      	cbz	r0, 320d8 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   320d4:	2320      	movs	r3, #32
   320d6:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   320d8:	bd08      	pop	{r3, pc}
   320da:	bf00      	nop
   320dc:	200146f0 	.word	0x200146f0

000320e0 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   320e0:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   320e2:	4b04      	ldr	r3, [pc, #16]	; (320f4 <cJSON_CreateObject+0x14>)
   320e4:	6818      	ldr	r0, [r3, #0]
   320e6:	f00d fd0a 	bl	3fafe <cJSON_New_Item.isra.0>
    if (item)
   320ea:	b108      	cbz	r0, 320f0 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   320ec:	2340      	movs	r3, #64	; 0x40
   320ee:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   320f0:	bd08      	pop	{r3, pc}
   320f2:	bf00      	nop
   320f4:	200146f0 	.word	0x200146f0

000320f8 <cJSON_GetNumberValue>:
{
   320f8:	b508      	push	{r3, lr}
   320fa:	4602      	mov	r2, r0
    if (!cJSON_IsNumber(item)) 
   320fc:	f00d fe38 	bl	3fd70 <cJSON_IsNumber>
   32100:	b110      	cbz	r0, 32108 <cJSON_GetNumberValue+0x10>
    return item->valuedouble;
   32102:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
}
   32106:	bd08      	pop	{r3, pc}
        return (double) NAN;
   32108:	2000      	movs	r0, #0
   3210a:	4901      	ldr	r1, [pc, #4]	; (32110 <cJSON_GetNumberValue+0x18>)
   3210c:	e7fb      	b.n	32106 <cJSON_GetNumberValue+0xe>
   3210e:	bf00      	nop
   32110:	7ff80000 	.word	0x7ff80000

00032114 <cJSON_free>:
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
    global_hooks.deallocate(object);
   32114:	4b01      	ldr	r3, [pc, #4]	; (3211c <cJSON_free+0x8>)
   32116:	685b      	ldr	r3, [r3, #4]
   32118:	4718      	bx	r3
   3211a:	bf00      	nop
   3211c:	200146f0 	.word	0x200146f0

00032120 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   32120:	4803      	ldr	r0, [pc, #12]	; (32130 <cJSON_Init+0x10>)
   32122:	4b04      	ldr	r3, [pc, #16]	; (32134 <cJSON_Init+0x14>)
   32124:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   32126:	4b04      	ldr	r3, [pc, #16]	; (32138 <cJSON_Init+0x18>)
   32128:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   3212a:	f7ff bef1 	b.w	31f10 <cJSON_InitHooks>
   3212e:	bf00      	nop
   32130:	2001a418 	.word	0x2001a418
   32134:	0003fda9 	.word	0x0003fda9
   32138:	0003fdad 	.word	0x0003fdad

0003213c <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   3213c:	4a07      	ldr	r2, [pc, #28]	; (3215c <SystemInit+0x20>)
   3213e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   32142:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   32146:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   3214a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3214e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   32152:	4b03      	ldr	r3, [pc, #12]	; (32160 <SystemInit+0x24>)
   32154:	4a03      	ldr	r2, [pc, #12]	; (32164 <SystemInit+0x28>)
   32156:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   32158:	4770      	bx	lr
   3215a:	bf00      	nop
   3215c:	e000ed00 	.word	0xe000ed00
   32160:	200146fc 	.word	0x200146fc
   32164:	03d09000 	.word	0x03d09000

00032168 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   32168:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   3216a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   3216c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   3216e:	fab2 f382 	clz	r3, r2
   32172:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   32176:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   32178:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   3217a:	d010      	beq.n	3219e <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
   3217c:	fa05 f303 	lsl.w	r3, r5, r3
   32180:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   32184:	e8d0 6fef 	ldaex	r6, [r0]
   32188:	4296      	cmp	r6, r2
   3218a:	d104      	bne.n	32196 <nrfx_flag32_alloc+0x2e>
   3218c:	e8c0 3fec 	stlex	ip, r3, [r0]
   32190:	f1bc 0f00 	cmp.w	ip, #0
   32194:	d1f6      	bne.n	32184 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   32196:	d1e9      	bne.n	3216c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   32198:	4802      	ldr	r0, [pc, #8]	; (321a4 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   3219a:	700c      	strb	r4, [r1, #0]
}
   3219c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   3219e:	4802      	ldr	r0, [pc, #8]	; (321a8 <nrfx_flag32_alloc+0x40>)
   321a0:	e7fc      	b.n	3219c <nrfx_flag32_alloc+0x34>
   321a2:	bf00      	nop
   321a4:	0bad0000 	.word	0x0bad0000
   321a8:	0bad0002 	.word	0x0bad0002

000321ac <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   321ac:	6803      	ldr	r3, [r0, #0]
{
   321ae:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   321b0:	40cb      	lsrs	r3, r1
   321b2:	07db      	lsls	r3, r3, #31
   321b4:	d411      	bmi.n	321da <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   321b6:	2301      	movs	r3, #1
   321b8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   321bc:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   321be:	ea41 0203 	orr.w	r2, r1, r3
   321c2:	e8d0 4fef 	ldaex	r4, [r0]
   321c6:	429c      	cmp	r4, r3
   321c8:	d104      	bne.n	321d4 <nrfx_flag32_free+0x28>
   321ca:	e8c0 2fec 	stlex	ip, r2, [r0]
   321ce:	f1bc 0f00 	cmp.w	ip, #0
   321d2:	d1f6      	bne.n	321c2 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   321d4:	d1f2      	bne.n	321bc <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   321d6:	4802      	ldr	r0, [pc, #8]	; (321e0 <nrfx_flag32_free+0x34>)
}
   321d8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   321da:	4802      	ldr	r0, [pc, #8]	; (321e4 <nrfx_flag32_free+0x38>)
   321dc:	e7fc      	b.n	321d8 <nrfx_flag32_free+0x2c>
   321de:	bf00      	nop
   321e0:	0bad0000 	.word	0x0bad0000
   321e4:	0bad0004 	.word	0x0bad0004

000321e8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   321e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   321ea:	4604      	mov	r4, r0
   321ec:	b168      	cbz	r0, 3220a <clock_stop+0x22>
   321ee:	2801      	cmp	r0, #1
   321f0:	d02e      	beq.n	32250 <clock_stop+0x68>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   321f2:	492c      	ldr	r1, [pc, #176]	; (322a4 <clock_stop+0xbc>)
   321f4:	482c      	ldr	r0, [pc, #176]	; (322a8 <clock_stop+0xc0>)
   321f6:	22d8      	movs	r2, #216	; 0xd8
   321f8:	f00a fc48 	bl	3ca8c <assert_print>
   321fc:	21d8      	movs	r1, #216	; 0xd8
   321fe:	4829      	ldr	r0, [pc, #164]	; (322a4 <clock_stop+0xbc>)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   32200:	b003      	add	sp, #12
   32202:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
   32206:	f00a bc3a 	b.w	3ca7e <assert_post_action>
    p_reg->INTENCLR = mask;
   3220a:	2202      	movs	r2, #2
   3220c:	4b27      	ldr	r3, [pc, #156]	; (322ac <clock_stop+0xc4>)
   3220e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32212:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   32216:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3221a:	2201      	movs	r2, #1
   3221c:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   3221e:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   32220:	429c      	cmp	r4, r3
   32222:	bf18      	it	ne
   32224:	2500      	movne	r5, #0
   32226:	f242 7710 	movw	r7, #10000	; 0x2710
   3222a:	4e20      	ldr	r6, [pc, #128]	; (322ac <clock_stop+0xc4>)
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   3222c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   32230:	bf08      	it	eq
   32232:	f10d 0507 	addeq.w	r5, sp, #7
    switch (domain)
   32236:	b1ac      	cbz	r4, 32264 <clock_stop+0x7c>
   32238:	2c01      	cmp	r4, #1
   3223a:	d029      	beq.n	32290 <clock_stop+0xa8>
            NRFX_ASSERT(0);
   3223c:	491c      	ldr	r1, [pc, #112]	; (322b0 <clock_stop+0xc8>)
   3223e:	481a      	ldr	r0, [pc, #104]	; (322a8 <clock_stop+0xc0>)
   32240:	f44f 724f 	mov.w	r2, #828	; 0x33c
   32244:	f00a fc22 	bl	3ca8c <assert_print>
   32248:	f44f 714f 	mov.w	r1, #828	; 0x33c
   3224c:	4818      	ldr	r0, [pc, #96]	; (322b0 <clock_stop+0xc8>)
   3224e:	e7d7      	b.n	32200 <clock_stop+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32250:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   32252:	4b16      	ldr	r3, [pc, #88]	; (322ac <clock_stop+0xc4>)
   32254:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32258:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3225c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32260:	6058      	str	r0, [r3, #4]
}
   32262:	e7dc      	b.n	3221e <clock_stop+0x36>
            if (p_clk_src != NULL)
   32264:	b125      	cbz	r5, 32270 <clock_stop+0x88>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   32266:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   3226a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   3226e:	702b      	strb	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   32270:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   32274:	03db      	lsls	r3, r3, #15
   32276:	d509      	bpl.n	3228c <clock_stop+0xa4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   32278:	b11d      	cbz	r5, 32282 <clock_stop+0x9a>
   3227a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3227e:	2b01      	cmp	r3, #1
   32280:	d104      	bne.n	3228c <clock_stop+0xa4>
   32282:	2001      	movs	r0, #1
   32284:	f00d fd97 	bl	3fdb6 <nrfx_busy_wait>
   32288:	3f01      	subs	r7, #1
   3228a:	d1d4      	bne.n	32236 <clock_stop+0x4e>
}
   3228c:	b003      	add	sp, #12
   3228e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
   32290:	b125      	cbz	r5, 3229c <clock_stop+0xb4>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   32292:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   32296:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   3229a:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3229c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   322a0:	e7e8      	b.n	32274 <clock_stop+0x8c>
   322a2:	bf00      	nop
   322a4:	0004b81c 	.word	0x0004b81c
   322a8:	0004409e 	.word	0x0004409e
   322ac:	40005000 	.word	0x40005000
   322b0:	0004b859 	.word	0x0004b859

000322b4 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   322b4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   322b6:	4604      	mov	r4, r0
   322b8:	b950      	cbnz	r0, 322d0 <nrfx_clock_init+0x1c>
   322ba:	490a      	ldr	r1, [pc, #40]	; (322e4 <nrfx_clock_init+0x30>)
   322bc:	480a      	ldr	r0, [pc, #40]	; (322e8 <nrfx_clock_init+0x34>)
   322be:	f240 1215 	movw	r2, #277	; 0x115
   322c2:	f00a fbe3 	bl	3ca8c <assert_print>
   322c6:	f240 1115 	movw	r1, #277	; 0x115
   322ca:	4806      	ldr	r0, [pc, #24]	; (322e4 <nrfx_clock_init+0x30>)
   322cc:	f00a fbd7 	bl	3ca7e <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   322d0:	4b06      	ldr	r3, [pc, #24]	; (322ec <nrfx_clock_init+0x38>)
   322d2:	791a      	ldrb	r2, [r3, #4]
   322d4:	b922      	cbnz	r2, 322e0 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   322d6:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   322d8:	4805      	ldr	r0, [pc, #20]	; (322f0 <nrfx_clock_init+0x3c>)
        m_clock_cb.event_handler = event_handler;
   322da:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   322dc:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   322de:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   322e0:	4804      	ldr	r0, [pc, #16]	; (322f4 <nrfx_clock_init+0x40>)
    return err_code;
   322e2:	e7fc      	b.n	322de <nrfx_clock_init+0x2a>
   322e4:	0004b81c 	.word	0x0004b81c
   322e8:	0004409e 	.word	0x0004409e
   322ec:	2001a420 	.word	0x2001a420
   322f0:	0bad0000 	.word	0x0bad0000
   322f4:	0bad000c 	.word	0x0bad000c

000322f8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   322f8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   322fa:	4b0d      	ldr	r3, [pc, #52]	; (32330 <nrfx_clock_enable+0x38>)
   322fc:	791b      	ldrb	r3, [r3, #4]
   322fe:	b953      	cbnz	r3, 32316 <nrfx_clock_enable+0x1e>
   32300:	490c      	ldr	r1, [pc, #48]	; (32334 <nrfx_clock_enable+0x3c>)
   32302:	480d      	ldr	r0, [pc, #52]	; (32338 <nrfx_clock_enable+0x40>)
   32304:	f44f 7297 	mov.w	r2, #302	; 0x12e
   32308:	f00a fbc0 	bl	3ca8c <assert_print>
   3230c:	f44f 7197 	mov.w	r1, #302	; 0x12e
   32310:	4808      	ldr	r0, [pc, #32]	; (32334 <nrfx_clock_enable+0x3c>)
   32312:	f00a fbb4 	bl	3ca7e <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   32316:	2005      	movs	r0, #5
   32318:	f7f0 fc40 	bl	22b9c <arch_irq_is_enabled>
   3231c:	b910      	cbnz	r0, 32324 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3231e:	2005      	movs	r0, #5
   32320:	f7f0 fc18 	bl	22b54 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   32324:	2201      	movs	r2, #1
   32326:	4b05      	ldr	r3, [pc, #20]	; (3233c <nrfx_clock_enable+0x44>)
   32328:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   3232c:	bd08      	pop	{r3, pc}
   3232e:	bf00      	nop
   32330:	2001a420 	.word	0x2001a420
   32334:	0004b81c 	.word	0x0004b81c
   32338:	0004409e 	.word	0x0004409e
   3233c:	40005000 	.word	0x40005000

00032340 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32340:	4b2c      	ldr	r3, [pc, #176]	; (323f4 <nrfx_clock_start+0xb4>)
{
   32342:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32344:	791b      	ldrb	r3, [r3, #4]
{
   32346:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32348:	b953      	cbnz	r3, 32360 <nrfx_clock_start+0x20>
   3234a:	492b      	ldr	r1, [pc, #172]	; (323f8 <nrfx_clock_start+0xb8>)
   3234c:	482b      	ldr	r0, [pc, #172]	; (323fc <nrfx_clock_start+0xbc>)
   3234e:	f44f 72b4 	mov.w	r2, #360	; 0x168
   32352:	f00a fb9b 	bl	3ca8c <assert_print>
   32356:	f44f 71b4 	mov.w	r1, #360	; 0x168
   3235a:	4827      	ldr	r0, [pc, #156]	; (323f8 <nrfx_clock_start+0xb8>)
   3235c:	f00a fb8f 	bl	3ca7e <assert_post_action>
    switch (domain)
   32360:	b174      	cbz	r4, 32380 <nrfx_clock_start+0x40>
   32362:	2c01      	cmp	r4, #1
   32364:	d03b      	beq.n	323de <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   32366:	4924      	ldr	r1, [pc, #144]	; (323f8 <nrfx_clock_start+0xb8>)
   32368:	4824      	ldr	r0, [pc, #144]	; (323fc <nrfx_clock_start+0xbc>)
   3236a:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
   3236e:	f00a fb8d 	bl	3ca8c <assert_print>
            break;
    }
}
   32372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   32376:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   3237a:	481f      	ldr	r0, [pc, #124]	; (323f8 <nrfx_clock_start+0xb8>)
   3237c:	f00a bb7f 	b.w	3ca7e <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   32380:	4a1f      	ldr	r2, [pc, #124]	; (32400 <nrfx_clock_start+0xc0>)
   32382:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   32386:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   3238a:	03c9      	lsls	r1, r1, #15
   3238c:	d412      	bmi.n	323b4 <nrfx_clock_start+0x74>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   3238e:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   32392:	07db      	lsls	r3, r3, #31
   32394:	d418      	bmi.n	323c8 <nrfx_clock_start+0x88>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   32396:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   32398:	4a19      	ldr	r2, [pc, #100]	; (32400 <nrfx_clock_start+0xc0>)
   3239a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3239e:	2300      	movs	r3, #0
   323a0:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   323a4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   323a8:	2302      	movs	r3, #2
   323aa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   323ae:	2301      	movs	r3, #1
   323b0:	6093      	str	r3, [r2, #8]
}
   323b2:	bd10      	pop	{r4, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   323b4:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   323b8:	2b02      	cmp	r3, #2
   323ba:	d0ed      	beq.n	32398 <nrfx_clock_start+0x58>
    if (!is_correct_clk)
   323bc:	2b01      	cmp	r3, #1
   323be:	d0eb      	beq.n	32398 <nrfx_clock_start+0x58>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   323c0:	2000      	movs	r0, #0
   323c2:	f7ff ff11 	bl	321e8 <clock_stop>
   323c6:	e7e6      	b.n	32396 <nrfx_clock_start+0x56>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   323c8:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   323cc:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
   323d0:	3b01      	subs	r3, #1
   323d2:	2b01      	cmp	r3, #1
   323d4:	d8f4      	bhi.n	323c0 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   323d6:	2302      	movs	r3, #2
   323d8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   323dc:	e7e9      	b.n	323b2 <nrfx_clock_start+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   323de:	2200      	movs	r2, #0
   323e0:	4b07      	ldr	r3, [pc, #28]	; (32400 <nrfx_clock_start+0xc0>)
   323e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   323e6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   323ea:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   323ee:	601c      	str	r4, [r3, #0]
}
   323f0:	e7df      	b.n	323b2 <nrfx_clock_start+0x72>
   323f2:	bf00      	nop
   323f4:	2001a420 	.word	0x2001a420
   323f8:	0004b81c 	.word	0x0004b81c
   323fc:	0004409e 	.word	0x0004409e
   32400:	40005000 	.word	0x40005000

00032404 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32404:	4b0a      	ldr	r3, [pc, #40]	; (32430 <nrfx_clock_stop+0x2c>)
{
   32406:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32408:	791b      	ldrb	r3, [r3, #4]
{
   3240a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3240c:	b953      	cbnz	r3, 32424 <nrfx_clock_stop+0x20>
   3240e:	4909      	ldr	r1, [pc, #36]	; (32434 <nrfx_clock_stop+0x30>)
   32410:	4809      	ldr	r0, [pc, #36]	; (32438 <nrfx_clock_stop+0x34>)
   32412:	f240 12ad 	movw	r2, #429	; 0x1ad
   32416:	f00a fb39 	bl	3ca8c <assert_print>
   3241a:	f240 11ad 	movw	r1, #429	; 0x1ad
   3241e:	4805      	ldr	r0, [pc, #20]	; (32434 <nrfx_clock_stop+0x30>)
   32420:	f00a fb2d 	bl	3ca7e <assert_post_action>
    clock_stop(domain);
   32424:	4620      	mov	r0, r4
}
   32426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
   3242a:	f7ff bedd 	b.w	321e8 <clock_stop>
   3242e:	bf00      	nop
   32430:	2001a420 	.word	0x2001a420
   32434:	0004b81c 	.word	0x0004b81c
   32438:	0004409e 	.word	0x0004409e

0003243c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3243c:	4b17      	ldr	r3, [pc, #92]	; (3249c <nrfx_power_clock_irq_handler+0x60>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   3243e:	b510      	push	{r4, lr}
   32440:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   32444:	b152      	cbz	r2, 3245c <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32446:	2000      	movs	r0, #0
   32448:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   3244c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   32450:	2201      	movs	r2, #1
   32452:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   32456:	4b12      	ldr	r3, [pc, #72]	; (324a0 <nrfx_power_clock_irq_handler+0x64>)
   32458:	681b      	ldr	r3, [r3, #0]
   3245a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3245c:	4b0f      	ldr	r3, [pc, #60]	; (3249c <nrfx_power_clock_irq_handler+0x60>)
   3245e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   32462:	b18a      	cbz	r2, 32488 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32464:	2200      	movs	r2, #0
   32466:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   3246a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3246e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   32472:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   32476:	f002 0203 	and.w	r2, r2, #3
   3247a:	2a01      	cmp	r2, #1
   3247c:	f04f 0102 	mov.w	r1, #2
   32480:	d103      	bne.n	3248a <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   32482:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32486:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   32488:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   3248a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3248e:	4b04      	ldr	r3, [pc, #16]	; (324a0 <nrfx_power_clock_irq_handler+0x64>)
   32490:	2001      	movs	r0, #1
}
   32492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   32496:	681b      	ldr	r3, [r3, #0]
   32498:	4718      	bx	r3
   3249a:	bf00      	nop
   3249c:	40005000 	.word	0x40005000
   324a0:	2001a420 	.word	0x2001a420

000324a4 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   324a4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   324a6:	4801      	ldr	r0, [pc, #4]	; (324ac <nrfx_dppi_channel_alloc+0x8>)
   324a8:	f7ff be5e 	b.w	32168 <nrfx_flag32_alloc>
   324ac:	20014700 	.word	0x20014700

000324b0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   324b0:	4b03      	ldr	r3, [pc, #12]	; (324c0 <pin_in_use_by_te+0x10>)
   324b2:	3008      	adds	r0, #8
   324b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   324b8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   324bc:	4770      	bx	lr
   324be:	bf00      	nop
   324c0:	20014704 	.word	0x20014704

000324c4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   324c4:	4b04      	ldr	r3, [pc, #16]	; (324d8 <pin_has_trigger+0x14>)
   324c6:	3008      	adds	r0, #8
   324c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   324cc:	f010 001c 	ands.w	r0, r0, #28
   324d0:	bf18      	it	ne
   324d2:	2001      	movne	r0, #1
   324d4:	4770      	bx	lr
   324d6:	bf00      	nop
   324d8:	20014704 	.word	0x20014704

000324dc <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   324dc:	4b03      	ldr	r3, [pc, #12]	; (324ec <pin_is_output+0x10>)
   324de:	3008      	adds	r0, #8
   324e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   324e4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   324e8:	4770      	bx	lr
   324ea:	bf00      	nop
   324ec:	20014704 	.word	0x20014704

000324f0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   324f0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   324f2:	4c0d      	ldr	r4, [pc, #52]	; (32528 <call_handler+0x38>)
   324f4:	f100 0308 	add.w	r3, r0, #8
   324f8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   324fc:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   324fe:	05da      	lsls	r2, r3, #23
{
   32500:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   32502:	d507      	bpl.n	32514 <call_handler+0x24>
   32504:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   32508:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   3250c:	6852      	ldr	r2, [r2, #4]
   3250e:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   32512:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   32514:	68a3      	ldr	r3, [r4, #8]
   32516:	b12b      	cbz	r3, 32524 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   32518:	4631      	mov	r1, r6
   3251a:	4628      	mov	r0, r5
   3251c:	68e2      	ldr	r2, [r4, #12]
    }
}
   3251e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   32522:	4718      	bx	r3
}
   32524:	bd70      	pop	{r4, r5, r6, pc}
   32526:	bf00      	nop
   32528:	20014704 	.word	0x20014704

0003252c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3252c:	4a19      	ldr	r2, [pc, #100]	; (32594 <release_handler+0x68>)
   3252e:	3008      	adds	r0, #8
   32530:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
   32534:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   32536:	05d9      	lsls	r1, r3, #23
   32538:	d51d      	bpl.n	32576 <release_handler+0x4a>
   3253a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   3253e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   32542:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   32546:	2000      	movs	r0, #0
   32548:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   3254c:	f834 3b02 	ldrh.w	r3, [r4], #2
   32550:	f413 7f80 	tst.w	r3, #256	; 0x100
   32554:	d003      	beq.n	3255e <release_handler+0x32>
   32556:	f3c3 2343 	ubfx	r3, r3, #9, #4
   3255a:	4299      	cmp	r1, r3
   3255c:	d00b      	beq.n	32576 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3255e:	3001      	adds	r0, #1
   32560:	2820      	cmp	r0, #32
   32562:	d1f3      	bne.n	3254c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   32564:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   32566:	480c      	ldr	r0, [pc, #48]	; (32598 <release_handler+0x6c>)
        m_cb.handlers[handler_id].handler = NULL;
   32568:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3256c:	f7ff fe1e 	bl	321ac <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   32570:	4b0a      	ldr	r3, [pc, #40]	; (3259c <release_handler+0x70>)
   32572:	4298      	cmp	r0, r3
   32574:	d100      	bne.n	32578 <release_handler+0x4c>
}
   32576:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   32578:	4909      	ldr	r1, [pc, #36]	; (325a0 <release_handler+0x74>)
   3257a:	480a      	ldr	r0, [pc, #40]	; (325a4 <release_handler+0x78>)
   3257c:	f44f 7299 	mov.w	r2, #306	; 0x132
   32580:	f00a fa84 	bl	3ca8c <assert_print>
}
   32584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   32588:	f44f 7199 	mov.w	r1, #306	; 0x132
   3258c:	4804      	ldr	r0, [pc, #16]	; (325a0 <release_handler+0x74>)
   3258e:	f00a ba76 	b.w	3ca7e <assert_post_action>
   32592:	bf00      	nop
   32594:	20014704 	.word	0x20014704
   32598:	20014758 	.word	0x20014758
   3259c:	0bad0000 	.word	0x0bad0000
   325a0:	0004b88d 	.word	0x0004b88d
   325a4:	0004409e 	.word	0x0004409e

000325a8 <pin_handler_trigger_uninit>:
{
   325a8:	b538      	push	{r3, r4, r5, lr}
   325aa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   325ac:	f7ff ff80 	bl	324b0 <pin_in_use_by_te>
   325b0:	4c0b      	ldr	r4, [pc, #44]	; (325e0 <pin_handler_trigger_uninit+0x38>)
   325b2:	f102 0508 	add.w	r5, r2, #8
   325b6:	b160      	cbz	r0, 325d2 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   325b8:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   325ba:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   325be:	0b5b      	lsrs	r3, r3, #13
   325c0:	009b      	lsls	r3, r3, #2
   325c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   325c6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   325ca:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   325ce:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   325d2:	4610      	mov	r0, r2
   325d4:	f7ff ffaa 	bl	3252c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   325d8:	2300      	movs	r3, #0
   325da:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   325de:	bd38      	pop	{r3, r4, r5, pc}
   325e0:	20014704 	.word	0x20014704

000325e4 <nrf_gpio_pin_port_decode>:
{
   325e4:	b510      	push	{r4, lr}
   325e6:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   325e8:	6800      	ldr	r0, [r0, #0]
   325ea:	f00d fbe6 	bl	3fdba <nrf_gpio_pin_present_check>
   325ee:	b950      	cbnz	r0, 32606 <nrf_gpio_pin_port_decode+0x22>
   325f0:	490e      	ldr	r1, [pc, #56]	; (3262c <nrf_gpio_pin_port_decode+0x48>)
   325f2:	480f      	ldr	r0, [pc, #60]	; (32630 <nrf_gpio_pin_port_decode+0x4c>)
   325f4:	f240 2229 	movw	r2, #553	; 0x229
   325f8:	f00a fa48 	bl	3ca8c <assert_print>
   325fc:	f240 2129 	movw	r1, #553	; 0x229
   32600:	480a      	ldr	r0, [pc, #40]	; (3262c <nrf_gpio_pin_port_decode+0x48>)
   32602:	f00a fa3c 	bl	3ca7e <assert_post_action>
    uint32_t pin_number = *p_pin;
   32606:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   32608:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   3260c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   3260e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   32610:	d00a      	beq.n	32628 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   32612:	4906      	ldr	r1, [pc, #24]	; (3262c <nrf_gpio_pin_port_decode+0x48>)
   32614:	4806      	ldr	r0, [pc, #24]	; (32630 <nrf_gpio_pin_port_decode+0x4c>)
   32616:	f240 222e 	movw	r2, #558	; 0x22e
   3261a:	f00a fa37 	bl	3ca8c <assert_print>
   3261e:	f240 212e 	movw	r1, #558	; 0x22e
   32622:	4802      	ldr	r0, [pc, #8]	; (3262c <nrf_gpio_pin_port_decode+0x48>)
   32624:	f00a fa2b 	bl	3ca7e <assert_post_action>
}
   32628:	4802      	ldr	r0, [pc, #8]	; (32634 <nrf_gpio_pin_port_decode+0x50>)
   3262a:	bd10      	pop	{r4, pc}
   3262c:	00044c81 	.word	0x00044c81
   32630:	0004409e 	.word	0x0004409e
   32634:	40842500 	.word	0x40842500

00032638 <nrfx_gpiote_input_configure>:
{
   32638:	b5f0      	push	{r4, r5, r6, r7, lr}
   3263a:	4604      	mov	r4, r0
   3263c:	4617      	mov	r7, r2
   3263e:	461d      	mov	r5, r3
   32640:	b085      	sub	sp, #20
    if (p_input_config)
   32642:	b1f1      	cbz	r1, 32682 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   32644:	f00d fbc5 	bl	3fdd2 <pin_is_task_output>
   32648:	b110      	cbz	r0, 32650 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   3264a:	484d      	ldr	r0, [pc, #308]	; (32780 <nrfx_gpiote_input_configure+0x148>)
}
   3264c:	b005      	add	sp, #20
   3264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   32650:	460b      	mov	r3, r1
   32652:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   32656:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   3265a:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3265e:	f10d 020f 	add.w	r2, sp, #15
   32662:	f10d 010e 	add.w	r1, sp, #14
   32666:	4620      	mov	r0, r4
   32668:	f00d fbc2 	bl	3fdf0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   3266c:	4a45      	ldr	r2, [pc, #276]	; (32784 <nrfx_gpiote_input_configure+0x14c>)
   3266e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   32672:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   32676:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   3267a:	f043 0301 	orr.w	r3, r3, #1
   3267e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   32682:	b197      	cbz	r7, 326aa <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
   32684:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   32686:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   32688:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   3268a:	f7ff ff27 	bl	324dc <pin_is_output>
   3268e:	b180      	cbz	r0, 326b2 <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
   32690:	2a00      	cmp	r2, #0
   32692:	d1da      	bne.n	3264a <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   32694:	4a3b      	ldr	r2, [pc, #236]	; (32784 <nrfx_gpiote_input_configure+0x14c>)
   32696:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   3269a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   3269e:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   326a2:	ea43 0686 	orr.w	r6, r3, r6, lsl #2
   326a6:	f822 6011 	strh.w	r6, [r2, r1, lsl #1]
    if (p_handler_config)
   326aa:	2d00      	cmp	r5, #0
   326ac:	d13e      	bne.n	3272c <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   326ae:	4836      	ldr	r0, [pc, #216]	; (32788 <nrfx_gpiote_input_configure+0x150>)
   326b0:	e7cc      	b.n	3264c <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   326b2:	4834      	ldr	r0, [pc, #208]	; (32784 <nrfx_gpiote_input_configure+0x14c>)
   326b4:	f104 0708 	add.w	r7, r4, #8
   326b8:	f830 1017 	ldrh.w	r1, [r0, r7, lsl #1]
   326bc:	f021 0120 	bic.w	r1, r1, #32
   326c0:	04c9      	lsls	r1, r1, #19
   326c2:	0cc9      	lsrs	r1, r1, #19
   326c4:	f820 1017 	strh.w	r1, [r0, r7, lsl #1]
            if (use_evt)
   326c8:	2a00      	cmp	r2, #0
   326ca:	d0e3      	beq.n	32694 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
   326cc:	2e03      	cmp	r6, #3
   326ce:	d8bc      	bhi.n	3264a <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   326d0:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   326d4:	4662      	mov	r2, ip
   326d6:	0092      	lsls	r2, r2, #2
   326d8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   326dc:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   326e0:	b926      	cbnz	r6, 326ec <nrfx_gpiote_input_configure+0xb4>
    p_reg->CONFIG[idx] = 0;
   326e2:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   326e6:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
#endif
}
   326ea:	e7d3      	b.n	32694 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   326ec:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   326f0:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   326f4:	f023 0303 	bic.w	r3, r3, #3
   326f8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   326fc:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   32700:	f041 0120 	orr.w	r1, r1, #32
   32704:	f423 3347 	bic.w	r3, r3, #203776	; 0x31c00
   32708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   3270c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   32710:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   32714:	0223      	lsls	r3, r4, #8
   32716:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   3271a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   3271e:	ea43 030e 	orr.w	r3, r3, lr
   32722:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   32726:	f820 1017 	strh.w	r1, [r0, r7, lsl #1]
   3272a:	e7b3      	b.n	32694 <nrfx_gpiote_input_configure+0x5c>
    release_handler(pin);
   3272c:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   3272e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   32732:	f7ff fefb 	bl	3252c <release_handler>
    if (!handler)
   32736:	2e00      	cmp	r6, #0
   32738:	d0b9      	beq.n	326ae <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   3273a:	4d12      	ldr	r5, [pc, #72]	; (32784 <nrfx_gpiote_input_configure+0x14c>)
   3273c:	682b      	ldr	r3, [r5, #0]
   3273e:	429e      	cmp	r6, r3
   32740:	d104      	bne.n	3274c <nrfx_gpiote_input_configure+0x114>
   32742:	686b      	ldr	r3, [r5, #4]
   32744:	429f      	cmp	r7, r3
   32746:	d101      	bne.n	3274c <nrfx_gpiote_input_configure+0x114>
   32748:	2200      	movs	r2, #0
   3274a:	e00a      	b.n	32762 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   3274c:	480f      	ldr	r0, [pc, #60]	; (3278c <nrfx_gpiote_input_configure+0x154>)
   3274e:	f10d 010f 	add.w	r1, sp, #15
   32752:	f7ff fd09 	bl	32168 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   32756:	4b0c      	ldr	r3, [pc, #48]	; (32788 <nrfx_gpiote_input_configure+0x150>)
   32758:	4298      	cmp	r0, r3
   3275a:	f47f af77 	bne.w	3264c <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   3275e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   32762:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   32766:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   32768:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3276a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   3276e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   32772:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   32776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   3277a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   3277e:	e796      	b.n	326ae <nrfx_gpiote_input_configure+0x76>
   32780:	0bad0004 	.word	0x0bad0004
   32784:	20014704 	.word	0x20014704
   32788:	0bad0000 	.word	0x0bad0000
   3278c:	20014758 	.word	0x20014758

00032790 <nrfx_gpiote_output_configure>:
{
   32790:	b5f0      	push	{r4, r5, r6, r7, lr}
   32792:	4604      	mov	r4, r0
   32794:	4615      	mov	r5, r2
   32796:	b085      	sub	sp, #20
    if (p_config)
   32798:	b321      	cbz	r1, 327e4 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   3279a:	f7ff fe9f 	bl	324dc <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   3279e:	b920      	cbnz	r0, 327aa <nrfx_gpiote_output_configure+0x1a>
   327a0:	4620      	mov	r0, r4
   327a2:	f7ff fe85 	bl	324b0 <pin_in_use_by_te>
   327a6:	2800      	cmp	r0, #0
   327a8:	d161      	bne.n	3286e <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   327aa:	4620      	mov	r0, r4
   327ac:	f7ff fe8a 	bl	324c4 <pin_has_trigger>
   327b0:	b110      	cbz	r0, 327b8 <nrfx_gpiote_output_configure+0x28>
   327b2:	784b      	ldrb	r3, [r1, #1]
   327b4:	2b01      	cmp	r3, #1
   327b6:	d05a      	beq.n	3286e <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   327b8:	2301      	movs	r3, #1
   327ba:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   327be:	2300      	movs	r3, #0
   327c0:	1c4a      	adds	r2, r1, #1
   327c2:	e9cd 1300 	strd	r1, r3, [sp]
   327c6:	4620      	mov	r0, r4
   327c8:	1c8b      	adds	r3, r1, #2
   327ca:	f10d 010f 	add.w	r1, sp, #15
   327ce:	f00d fb0f 	bl	3fdf0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   327d2:	4a28      	ldr	r2, [pc, #160]	; (32874 <nrfx_gpiote_output_configure+0xe4>)
   327d4:	f104 0108 	add.w	r1, r4, #8
   327d8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   327dc:	f043 0303 	orr.w	r3, r3, #3
   327e0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   327e4:	b915      	cbnz	r5, 327ec <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   327e6:	4824      	ldr	r0, [pc, #144]	; (32878 <nrfx_gpiote_output_configure+0xe8>)
}
   327e8:	b005      	add	sp, #20
   327ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   327ec:	4620      	mov	r0, r4
   327ee:	f7ff fe75 	bl	324dc <pin_is_output>
        if (pin_is_input(pin))
   327f2:	2800      	cmp	r0, #0
   327f4:	d03b      	beq.n	3286e <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   327f6:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   327fa:	2300      	movs	r3, #0
   327fc:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   327fe:	4e1d      	ldr	r6, [pc, #116]	; (32874 <nrfx_gpiote_output_configure+0xe4>)
   32800:	f104 0708 	add.w	r7, r4, #8
   32804:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   32808:	0089      	lsls	r1, r1, #2
   3280a:	f020 0020 	bic.w	r0, r0, #32
   3280e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   32812:	04c0      	lsls	r0, r0, #19
   32814:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   32818:	0cc0      	lsrs	r0, r0, #19
   3281a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   3281e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   32822:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   32826:	786a      	ldrb	r2, [r5, #1]
   32828:	2a00      	cmp	r2, #0
   3282a:	d0dc      	beq.n	327e6 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   3282c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   32830:	78ad      	ldrb	r5, [r5, #2]
   32832:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   32836:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3283a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3283e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   32842:	0223      	lsls	r3, r4, #8
   32844:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   32848:	0412      	lsls	r2, r2, #16
   3284a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3284e:	ea43 030e 	orr.w	r3, r3, lr
   32852:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   32854:	052a      	lsls	r2, r5, #20
   32856:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   3285a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3285e:	4313      	orrs	r3, r2
   32860:	f040 0020 	orr.w	r0, r0, #32
   32864:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   32868:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   3286c:	e7bb      	b.n	327e6 <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
   3286e:	4803      	ldr	r0, [pc, #12]	; (3287c <nrfx_gpiote_output_configure+0xec>)
   32870:	e7ba      	b.n	327e8 <nrfx_gpiote_output_configure+0x58>
   32872:	bf00      	nop
   32874:	20014704 	.word	0x20014704
   32878:	0bad0000 	.word	0x0bad0000
   3287c:	0bad0004 	.word	0x0bad0004

00032880 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   32880:	4b01      	ldr	r3, [pc, #4]	; (32888 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   32882:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   32886:	4770      	bx	lr
   32888:	20014704 	.word	0x20014704

0003288c <nrfx_gpiote_channel_get>:
{
   3288c:	b538      	push	{r3, r4, r5, lr}
   3288e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   32890:	460d      	mov	r5, r1
   32892:	b951      	cbnz	r1, 328aa <nrfx_gpiote_channel_get+0x1e>
   32894:	490c      	ldr	r1, [pc, #48]	; (328c8 <nrfx_gpiote_channel_get+0x3c>)
   32896:	480d      	ldr	r0, [pc, #52]	; (328cc <nrfx_gpiote_channel_get+0x40>)
   32898:	f240 2235 	movw	r2, #565	; 0x235
   3289c:	f00a f8f6 	bl	3ca8c <assert_print>
   328a0:	f240 2135 	movw	r1, #565	; 0x235
   328a4:	4808      	ldr	r0, [pc, #32]	; (328c8 <nrfx_gpiote_channel_get+0x3c>)
   328a6:	f00a f8ea 	bl	3ca7e <assert_post_action>
    if (pin_in_use_by_te(pin))
   328aa:	4620      	mov	r0, r4
   328ac:	f7ff fe00 	bl	324b0 <pin_in_use_by_te>
   328b0:	b138      	cbz	r0, 328c2 <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   328b2:	4b07      	ldr	r3, [pc, #28]	; (328d0 <nrfx_gpiote_channel_get+0x44>)
   328b4:	3408      	adds	r4, #8
   328b6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
        return NRFX_SUCCESS;
   328ba:	4806      	ldr	r0, [pc, #24]	; (328d4 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   328bc:	0b5b      	lsrs	r3, r3, #13
   328be:	702b      	strb	r3, [r5, #0]
}
   328c0:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   328c2:	4805      	ldr	r0, [pc, #20]	; (328d8 <nrfx_gpiote_channel_get+0x4c>)
   328c4:	e7fc      	b.n	328c0 <nrfx_gpiote_channel_get+0x34>
   328c6:	bf00      	nop
   328c8:	0004b88d 	.word	0x0004b88d
   328cc:	0004409e 	.word	0x0004409e
   328d0:	20014704 	.word	0x20014704
   328d4:	0bad0000 	.word	0x0bad0000
   328d8:	0bad0004 	.word	0x0bad0004

000328dc <nrfx_gpiote_init>:
{
   328dc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   328de:	4c0f      	ldr	r4, [pc, #60]	; (3291c <nrfx_gpiote_init+0x40>)
   328e0:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   328e4:	b9bd      	cbnz	r5, 32916 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   328e6:	2240      	movs	r2, #64	; 0x40
   328e8:	4629      	mov	r1, r5
   328ea:	f104 0010 	add.w	r0, r4, #16
   328ee:	f00e fda1 	bl	41434 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   328f2:	2031      	movs	r0, #49	; 0x31
   328f4:	f7f0 f92e 	bl	22b54 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   328f8:	4b09      	ldr	r3, [pc, #36]	; (32920 <nrfx_gpiote_init+0x44>)
    return err_code;
   328fa:	480a      	ldr	r0, [pc, #40]	; (32924 <nrfx_gpiote_init+0x48>)
   328fc:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   32900:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   32904:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   32908:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   3290c:	2301      	movs	r3, #1
   3290e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   32912:	6563      	str	r3, [r4, #84]	; 0x54
}
   32914:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   32916:	4804      	ldr	r0, [pc, #16]	; (32928 <nrfx_gpiote_init+0x4c>)
   32918:	e7fc      	b.n	32914 <nrfx_gpiote_init+0x38>
   3291a:	bf00      	nop
   3291c:	20014704 	.word	0x20014704
   32920:	40031000 	.word	0x40031000
   32924:	0bad0000 	.word	0x0bad0000
   32928:	0bad0005 	.word	0x0bad0005

0003292c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   3292c:	4b03      	ldr	r3, [pc, #12]	; (3293c <nrfx_gpiote_is_init+0x10>)
   3292e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   32932:	3800      	subs	r0, #0
   32934:	bf18      	it	ne
   32936:	2001      	movne	r0, #1
   32938:	4770      	bx	lr
   3293a:	bf00      	nop
   3293c:	20014704 	.word	0x20014704

00032940 <nrfx_gpiote_channel_free>:
{
   32940:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   32942:	4801      	ldr	r0, [pc, #4]	; (32948 <nrfx_gpiote_channel_free+0x8>)
   32944:	f7ff bc32 	b.w	321ac <nrfx_flag32_free>
   32948:	20014754 	.word	0x20014754

0003294c <nrfx_gpiote_channel_alloc>:
{
   3294c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   3294e:	4801      	ldr	r0, [pc, #4]	; (32954 <nrfx_gpiote_channel_alloc+0x8>)
   32950:	f7ff bc0a 	b.w	32168 <nrfx_flag32_alloc>
   32954:	20014754 	.word	0x20014754

00032958 <nrfx_gpiote_trigger_enable>:
{
   32958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3295a:	4604      	mov	r4, r0
   3295c:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   3295e:	f7ff fdb1 	bl	324c4 <pin_has_trigger>
   32962:	b950      	cbnz	r0, 3297a <nrfx_gpiote_trigger_enable+0x22>
   32964:	492e      	ldr	r1, [pc, #184]	; (32a20 <nrfx_gpiote_trigger_enable+0xc8>)
   32966:	482f      	ldr	r0, [pc, #188]	; (32a24 <nrfx_gpiote_trigger_enable+0xcc>)
   32968:	f240 32df 	movw	r2, #991	; 0x3df
   3296c:	f00a f88e 	bl	3ca8c <assert_print>
   32970:	f240 31df 	movw	r1, #991	; 0x3df
   32974:	482a      	ldr	r0, [pc, #168]	; (32a20 <nrfx_gpiote_trigger_enable+0xc8>)
   32976:	f00a f882 	bl	3ca7e <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3297a:	4620      	mov	r0, r4
   3297c:	f7ff fd98 	bl	324b0 <pin_in_use_by_te>
   32980:	4e29      	ldr	r6, [pc, #164]	; (32a28 <nrfx_gpiote_trigger_enable+0xd0>)
   32982:	f104 0708 	add.w	r7, r4, #8
   32986:	b318      	cbz	r0, 329d0 <nrfx_gpiote_trigger_enable+0x78>
    return !pin_is_output(pin);
   32988:	4620      	mov	r0, r4
   3298a:	f7ff fda7 	bl	324dc <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3298e:	4602      	mov	r2, r0
   32990:	b9f0      	cbnz	r0, 329d0 <nrfx_gpiote_trigger_enable+0x78>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32992:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   32996:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   32998:	4608      	mov	r0, r1
   3299a:	f00d fa25 	bl	3fde8 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   3299e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   329a2:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   329a6:	601a      	str	r2, [r3, #0]
   329a8:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   329aa:	008b      	lsls	r3, r1, #2
   329ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   329b0:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   329b4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   329b8:	f042 0201 	orr.w	r2, r2, #1
   329bc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   329c0:	b125      	cbz	r5, 329cc <nrfx_gpiote_trigger_enable+0x74>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   329c2:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   329c4:	4a19      	ldr	r2, [pc, #100]	; (32a2c <nrfx_gpiote_trigger_enable+0xd4>)
   329c6:	408b      	lsls	r3, r1
   329c8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   329cc:	b003      	add	sp, #12
   329ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   329d0:	b955      	cbnz	r5, 329e8 <nrfx_gpiote_trigger_enable+0x90>
   329d2:	4913      	ldr	r1, [pc, #76]	; (32a20 <nrfx_gpiote_trigger_enable+0xc8>)
   329d4:	4813      	ldr	r0, [pc, #76]	; (32a24 <nrfx_gpiote_trigger_enable+0xcc>)
   329d6:	f240 32ee 	movw	r2, #1006	; 0x3ee
   329da:	f00a f857 	bl	3ca8c <assert_print>
   329de:	f240 31ee 	movw	r1, #1006	; 0x3ee
   329e2:	480f      	ldr	r0, [pc, #60]	; (32a20 <nrfx_gpiote_trigger_enable+0xc8>)
   329e4:	f00a f84b 	bl	3ca7e <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   329e8:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   329ec:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   329f0:	2b04      	cmp	r3, #4
   329f2:	d011      	beq.n	32a18 <nrfx_gpiote_trigger_enable+0xc0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   329f4:	2b05      	cmp	r3, #5
   329f6:	d011      	beq.n	32a1c <nrfx_gpiote_trigger_enable+0xc4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   329f8:	a801      	add	r0, sp, #4
   329fa:	9401      	str	r4, [sp, #4]
   329fc:	f7ff fdf2 	bl	325e4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   32a00:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   32a02:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   32a04:	40d9      	lsrs	r1, r3
   32a06:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   32a0a:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   32a0c:	4620      	mov	r0, r4
}
   32a0e:	b003      	add	sp, #12
   32a10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   32a14:	f00d ba37 	b.w	3fe86 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   32a18:	2103      	movs	r1, #3
   32a1a:	e7f7      	b.n	32a0c <nrfx_gpiote_trigger_enable+0xb4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   32a1c:	2102      	movs	r1, #2
   32a1e:	e7f5      	b.n	32a0c <nrfx_gpiote_trigger_enable+0xb4>
   32a20:	0004b88d 	.word	0x0004b88d
   32a24:	0004409e 	.word	0x0004409e
   32a28:	20014704 	.word	0x20014704
   32a2c:	40031000 	.word	0x40031000

00032a30 <nrfx_gpiote_trigger_disable>:
{
   32a30:	b508      	push	{r3, lr}
   32a32:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   32a34:	f7ff fd3c 	bl	324b0 <pin_in_use_by_te>
   32a38:	b1c8      	cbz	r0, 32a6e <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   32a3a:	4610      	mov	r0, r2
   32a3c:	f7ff fd4e 	bl	324dc <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   32a40:	b9a8      	cbnz	r0, 32a6e <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32a42:	4b0e      	ldr	r3, [pc, #56]	; (32a7c <nrfx_gpiote_trigger_disable+0x4c>)
   32a44:	3208      	adds	r2, #8
   32a46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   32a4a:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32a4c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   32a4e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   32a50:	490b      	ldr	r1, [pc, #44]	; (32a80 <nrfx_gpiote_trigger_disable+0x50>)
   32a52:	009b      	lsls	r3, r3, #2
   32a54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   32a58:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   32a5c:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   32a60:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   32a64:	f022 0203 	bic.w	r2, r2, #3
   32a68:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   32a6c:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   32a6e:	2100      	movs	r1, #0
}
   32a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   32a74:	4610      	mov	r0, r2
   32a76:	f00d ba06 	b.w	3fe86 <nrf_gpio_cfg_sense_set>
   32a7a:	bf00      	nop
   32a7c:	20014704 	.word	0x20014704
   32a80:	40031000 	.word	0x40031000

00032a84 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   32a84:	4b0d      	ldr	r3, [pc, #52]	; (32abc <nrfx_gpiote_pin_uninit+0x38>)
   32a86:	f100 0208 	add.w	r2, r0, #8
   32a8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   32a8e:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
   32a90:	07db      	lsls	r3, r3, #31
{
   32a92:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   32a94:	d510      	bpl.n	32ab8 <nrfx_gpiote_pin_uninit+0x34>
    nrfx_gpiote_trigger_disable(pin);
   32a96:	f7ff ffcb 	bl	32a30 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   32a9a:	4620      	mov	r0, r4
   32a9c:	f7ff fd84 	bl	325a8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32aa0:	a801      	add	r0, sp, #4
   32aa2:	9401      	str	r4, [sp, #4]
   32aa4:	f7ff fd9e 	bl	325e4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   32aa8:	2202      	movs	r2, #2
   32aaa:	9b01      	ldr	r3, [sp, #4]
   32aac:	3380      	adds	r3, #128	; 0x80
   32aae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   32ab2:	4803      	ldr	r0, [pc, #12]	; (32ac0 <nrfx_gpiote_pin_uninit+0x3c>)
}
   32ab4:	b002      	add	sp, #8
   32ab6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   32ab8:	4802      	ldr	r0, [pc, #8]	; (32ac4 <nrfx_gpiote_pin_uninit+0x40>)
   32aba:	e7fb      	b.n	32ab4 <nrfx_gpiote_pin_uninit+0x30>
   32abc:	20014704 	.word	0x20014704
   32ac0:	0bad0000 	.word	0x0bad0000
   32ac4:	0bad0004 	.word	0x0bad0004

00032ac8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   32ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   32acc:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   32ace:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32ad0:	4634      	mov	r4, r6
{
   32ad2:	4b53      	ldr	r3, [pc, #332]	; (32c20 <nrfx_gpiote_irq_handler+0x158>)
    return p_reg->INTENSET & mask;
   32ad4:	4853      	ldr	r0, [pc, #332]	; (32c24 <nrfx_gpiote_irq_handler+0x15c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   32ad6:	4954      	ldr	r1, [pc, #336]	; (32c28 <nrfx_gpiote_irq_handler+0x160>)
{
   32ad8:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32ada:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   32adc:	b135      	cbz	r5, 32aec <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   32ade:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   32ae2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32ae4:	bf1e      	ittt	ne
   32ae6:	601c      	strne	r4, [r3, #0]
   32ae8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   32aea:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   32aec:	3304      	adds	r3, #4
   32aee:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   32af0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   32af4:	d1f1      	bne.n	32ada <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32af6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 32c24 <nrfx_gpiote_irq_handler+0x15c>
   32afa:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   32afe:	b183      	cbz	r3, 32b22 <nrfx_gpiote_irq_handler+0x5a>
        *p_masks = gpio_regs[i]->LATCH;
   32b00:	4f4a      	ldr	r7, [pc, #296]	; (32c2c <nrfx_gpiote_irq_handler+0x164>)
   32b02:	6a3b      	ldr	r3, [r7, #32]
   32b04:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   32b06:	623b      	str	r3, [r7, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   32b08:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   32b0c:	9c02      	ldr	r4, [sp, #8]
   32b0e:	b954      	cbnz	r4, 32b26 <nrfx_gpiote_irq_handler+0x5e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32b10:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   32b14:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   32b18:	6a3b      	ldr	r3, [r7, #32]
   32b1a:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   32b1c:	623b      	str	r3, [r7, #32]
        if (latch[port_idx])
   32b1e:	2b00      	cmp	r3, #0
   32b20:	d1f2      	bne.n	32b08 <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
   32b22:	2401      	movs	r4, #1
   32b24:	e076      	b.n	32c14 <nrfx_gpiote_irq_handler+0x14c>
                uint32_t pin = NRF_CTZ(latch[i]);
   32b26:	fa94 f4a4 	rbit	r4, r4
   32b2a:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   32b2e:	4a40      	ldr	r2, [pc, #256]	; (32c30 <nrfx_gpiote_irq_handler+0x168>)
   32b30:	f104 0308 	add.w	r3, r4, #8
   32b34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   32b38:	08e5      	lsrs	r5, r4, #3
   32b3a:	089a      	lsrs	r2, r3, #2
   32b3c:	f3c3 0b82 	ubfx	fp, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
   32b40:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   32b44:	ab02      	add	r3, sp, #8
   32b46:	fa09 f001 	lsl.w	r0, r9, r1
   32b4a:	5d59      	ldrb	r1, [r3, r5]
   32b4c:	9201      	str	r2, [sp, #4]
   32b4e:	ea21 0100 	bic.w	r1, r1, r0
   32b52:	5559      	strb	r1, [r3, r5]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32b54:	a803      	add	r0, sp, #12
   32b56:	9403      	str	r4, [sp, #12]
   32b58:	f7ff fd44 	bl	325e4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   32b5c:	9903      	ldr	r1, [sp, #12]
    if (is_level(trigger))
   32b5e:	9a01      	ldr	r2, [sp, #4]
   32b60:	3180      	adds	r1, #128	; 0x80
   32b62:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   32b66:	0753      	lsls	r3, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   32b68:	46da      	mov	sl, fp
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   32b6a:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   32b6e:	d521      	bpl.n	32bb4 <nrfx_gpiote_irq_handler+0xec>
        call_handler(pin, trigger);
   32b70:	4659      	mov	r1, fp
   32b72:	4620      	mov	r0, r4
   32b74:	f7ff fcbc 	bl	324f0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32b78:	a803      	add	r0, sp, #12
   32b7a:	9403      	str	r4, [sp, #12]
   32b7c:	f7ff fd32 	bl	325e4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   32b80:	9b03      	ldr	r3, [sp, #12]
   32b82:	b2ed      	uxtb	r5, r5
   32b84:	3380      	adds	r3, #128	; 0x80
   32b86:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   32b8a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   32b8e:	429d      	cmp	r5, r3
   32b90:	d107      	bne.n	32ba2 <nrfx_gpiote_irq_handler+0xda>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   32b92:	2100      	movs	r1, #0
   32b94:	4620      	mov	r0, r4
   32b96:	f00d f976 	bl	3fe86 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   32b9a:	4629      	mov	r1, r5
   32b9c:	4620      	mov	r0, r4
   32b9e:	f00d f972 	bl	3fe86 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32ba2:	a803      	add	r0, sp, #12
   32ba4:	9403      	str	r4, [sp, #12]
   32ba6:	f7ff fd1d 	bl	325e4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   32baa:	9b03      	ldr	r3, [sp, #12]
   32bac:	fa09 f303 	lsl.w	r3, r9, r3
   32bb0:	6203      	str	r3, [r0, #32]
   32bb2:	e7ab      	b.n	32b0c <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   32bb4:	2d02      	cmp	r5, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   32bb6:	bf0c      	ite	eq
   32bb8:	2103      	moveq	r1, #3
   32bba:	2102      	movne	r1, #2
   32bbc:	4620      	mov	r0, r4
   32bbe:	f00d f962 	bl	3fe86 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   32bc2:	f1bb 0f03 	cmp.w	fp, #3
   32bc6:	d004      	beq.n	32bd2 <nrfx_gpiote_irq_handler+0x10a>
   32bc8:	2d02      	cmp	r5, #2
   32bca:	d107      	bne.n	32bdc <nrfx_gpiote_irq_handler+0x114>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   32bcc:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   32bd0:	d1e7      	bne.n	32ba2 <nrfx_gpiote_irq_handler+0xda>
            call_handler(pin, trigger);
   32bd2:	4651      	mov	r1, sl
   32bd4:	4620      	mov	r0, r4
   32bd6:	f7ff fc8b 	bl	324f0 <call_handler>
   32bda:	e7e2      	b.n	32ba2 <nrfx_gpiote_irq_handler+0xda>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   32bdc:	2d03      	cmp	r5, #3
   32bde:	d1e0      	bne.n	32ba2 <nrfx_gpiote_irq_handler+0xda>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   32be0:	f1bb 0f02 	cmp.w	fp, #2
   32be4:	e7f4      	b.n	32bd0 <nrfx_gpiote_irq_handler+0x108>
        uint32_t ch = NRF_CTZ(mask);
   32be6:	fa96 f3a6 	rbit	r3, r6
   32bea:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   32bee:	fa04 f203 	lsl.w	r2, r4, r3
   32bf2:	009b      	lsls	r3, r3, #2
   32bf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   32bf8:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   32bfc:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   32c00:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   32c04:	f3c0 2004 	ubfx	r0, r0, #8, #5
   32c08:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   32c0c:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   32c10:	f7ff fc6e 	bl	324f0 <call_handler>
    while (mask)
   32c14:	2e00      	cmp	r6, #0
   32c16:	d1e6      	bne.n	32be6 <nrfx_gpiote_irq_handler+0x11e>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   32c18:	b005      	add	sp, #20
   32c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32c1e:	bf00      	nop
   32c20:	40031100 	.word	0x40031100
   32c24:	40031000 	.word	0x40031000
   32c28:	40031120 	.word	0x40031120
   32c2c:	40842500 	.word	0x40842500
   32c30:	20014704 	.word	0x20014704

00032c34 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   32c34:	b570      	push	{r4, r5, r6, lr}
   32c36:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   32c38:	460d      	mov	r5, r1
   32c3a:	b941      	cbnz	r1, 32c4e <nrfx_ipc_init+0x1a>
   32c3c:	490b      	ldr	r1, [pc, #44]	; (32c6c <nrfx_ipc_init+0x38>)
   32c3e:	480c      	ldr	r0, [pc, #48]	; (32c70 <nrfx_ipc_init+0x3c>)
   32c40:	2234      	movs	r2, #52	; 0x34
   32c42:	f009 ff23 	bl	3ca8c <assert_print>
   32c46:	2134      	movs	r1, #52	; 0x34
   32c48:	4808      	ldr	r0, [pc, #32]	; (32c6c <nrfx_ipc_init+0x38>)
   32c4a:	f009 ff18 	bl	3ca7e <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   32c4e:	4c09      	ldr	r4, [pc, #36]	; (32c74 <nrfx_ipc_init+0x40>)
   32c50:	7923      	ldrb	r3, [r4, #4]
   32c52:	b943      	cbnz	r3, 32c66 <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   32c54:	202a      	movs	r0, #42	; 0x2a
   32c56:	f7ef ff7d 	bl	22b54 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   32c5a:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   32c5c:	4806      	ldr	r0, [pc, #24]	; (32c78 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   32c5e:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   32c60:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   32c62:	60a6      	str	r6, [r4, #8]
}
   32c64:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   32c66:	4805      	ldr	r0, [pc, #20]	; (32c7c <nrfx_ipc_init+0x48>)
   32c68:	e7fc      	b.n	32c64 <nrfx_ipc_init+0x30>
   32c6a:	bf00      	nop
   32c6c:	0004b8cb 	.word	0x0004b8cb
   32c70:	0004409e 	.word	0x0004409e
   32c74:	2001a428 	.word	0x2001a428
   32c78:	0bad0000 	.word	0x0bad0000
   32c7c:	0bad000c 	.word	0x0bad000c

00032c80 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   32c80:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   32c82:	4604      	mov	r4, r0
   32c84:	b940      	cbnz	r0, 32c98 <nrfx_ipc_config_load+0x18>
   32c86:	4919      	ldr	r1, [pc, #100]	; (32cec <nrfx_ipc_config_load+0x6c>)
   32c88:	4819      	ldr	r0, [pc, #100]	; (32cf0 <nrfx_ipc_config_load+0x70>)
   32c8a:	2246      	movs	r2, #70	; 0x46
   32c8c:	f009 fefe 	bl	3ca8c <assert_print>
   32c90:	2146      	movs	r1, #70	; 0x46
   32c92:	4816      	ldr	r0, [pc, #88]	; (32cec <nrfx_ipc_config_load+0x6c>)
   32c94:	f009 fef3 	bl	3ca7e <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32c98:	4b16      	ldr	r3, [pc, #88]	; (32cf4 <nrfx_ipc_config_load+0x74>)
   32c9a:	791b      	ldrb	r3, [r3, #4]
   32c9c:	2b01      	cmp	r3, #1
   32c9e:	d008      	beq.n	32cb2 <nrfx_ipc_config_load+0x32>
   32ca0:	4912      	ldr	r1, [pc, #72]	; (32cec <nrfx_ipc_config_load+0x6c>)
   32ca2:	4813      	ldr	r0, [pc, #76]	; (32cf0 <nrfx_ipc_config_load+0x70>)
   32ca4:	2247      	movs	r2, #71	; 0x47
   32ca6:	f009 fef1 	bl	3ca8c <assert_print>
   32caa:	2147      	movs	r1, #71	; 0x47
   32cac:	480f      	ldr	r0, [pc, #60]	; (32cec <nrfx_ipc_config_load+0x6c>)
   32cae:	f009 fee6 	bl	3ca7e <assert_post_action>
{
   32cb2:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   32cb4:	4a10      	ldr	r2, [pc, #64]	; (32cf8 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   32cb6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   32cba:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   32cbe:	3301      	adds	r3, #1
   32cc0:	2b08      	cmp	r3, #8
   32cc2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   32cc6:	d1f6      	bne.n	32cb6 <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   32cc8:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   32cca:	4a0b      	ldr	r2, [pc, #44]	; (32cf8 <nrfx_ipc_config_load+0x78>)
   32ccc:	f104 0120 	add.w	r1, r4, #32
   32cd0:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   32cd4:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   32cd8:	3301      	adds	r3, #1
   32cda:	2b08      	cmp	r3, #8
   32cdc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   32ce0:	d1f6      	bne.n	32cd0 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   32ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    p_reg->INTENSET = mask;
   32ce4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   32ce8:	bd38      	pop	{r3, r4, r5, pc}
   32cea:	bf00      	nop
   32cec:	0004b8cb 	.word	0x0004b8cb
   32cf0:	0004409e 	.word	0x0004409e
   32cf4:	2001a428 	.word	0x2001a428
   32cf8:	4002a000 	.word	0x4002a000

00032cfc <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   32cfc:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32cfe:	4c1a      	ldr	r4, [pc, #104]	; (32d68 <nrfx_ipc_uninit+0x6c>)
   32d00:	7923      	ldrb	r3, [r4, #4]
   32d02:	2b01      	cmp	r3, #1
   32d04:	d008      	beq.n	32d18 <nrfx_ipc_uninit+0x1c>
   32d06:	4919      	ldr	r1, [pc, #100]	; (32d6c <nrfx_ipc_uninit+0x70>)
   32d08:	4819      	ldr	r0, [pc, #100]	; (32d70 <nrfx_ipc_uninit+0x74>)
   32d0a:	2259      	movs	r2, #89	; 0x59
   32d0c:	f009 febe 	bl	3ca8c <assert_print>
   32d10:	2159      	movs	r1, #89	; 0x59
   32d12:	4816      	ldr	r0, [pc, #88]	; (32d6c <nrfx_ipc_uninit+0x70>)
   32d14:	f009 feb3 	bl	3ca7e <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   32d18:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   32d1a:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   32d1e:	4a15      	ldr	r2, [pc, #84]	; (32d74 <nrfx_ipc_uninit+0x78>)
   32d20:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   32d24:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   32d28:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   32d2c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   32d30:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   32d34:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   32d38:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   32d3c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   32d40:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   32d44:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   32d48:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   32d4c:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   32d50:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   32d54:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   32d58:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   32d5c:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   32d60:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   32d64:	7123      	strb	r3, [r4, #4]
}
   32d66:	bd10      	pop	{r4, pc}
   32d68:	2001a428 	.word	0x2001a428
   32d6c:	0004b8cb 	.word	0x0004b8cb
   32d70:	0004409e 	.word	0x0004409e
   32d74:	4002a000 	.word	0x4002a000

00032d78 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   32d78:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32d7a:	4b0a      	ldr	r3, [pc, #40]	; (32da4 <nrfx_ipc_receive_event_enable+0x2c>)
{
   32d7c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32d7e:	791b      	ldrb	r3, [r3, #4]
   32d80:	2b01      	cmp	r3, #1
   32d82:	d008      	beq.n	32d96 <nrfx_ipc_receive_event_enable+0x1e>
   32d84:	4908      	ldr	r1, [pc, #32]	; (32da8 <nrfx_ipc_receive_event_enable+0x30>)
   32d86:	4809      	ldr	r0, [pc, #36]	; (32dac <nrfx_ipc_receive_event_enable+0x34>)
   32d88:	226c      	movs	r2, #108	; 0x6c
   32d8a:	f009 fe7f 	bl	3ca8c <assert_print>
   32d8e:	216c      	movs	r1, #108	; 0x6c
   32d90:	4805      	ldr	r0, [pc, #20]	; (32da8 <nrfx_ipc_receive_event_enable+0x30>)
   32d92:	f009 fe74 	bl	3ca7e <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   32d96:	2301      	movs	r3, #1
   32d98:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
   32d9c:	4b04      	ldr	r3, [pc, #16]	; (32db0 <nrfx_ipc_receive_event_enable+0x38>)
   32d9e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   32da2:	bd10      	pop	{r4, pc}
   32da4:	2001a428 	.word	0x2001a428
   32da8:	0004b8cb 	.word	0x0004b8cb
   32dac:	0004409e 	.word	0x0004409e
   32db0:	4002a000 	.word	0x4002a000

00032db4 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   32db4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32db6:	4b0a      	ldr	r3, [pc, #40]	; (32de0 <nrfx_ipc_receive_event_disable+0x2c>)
{
   32db8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32dba:	791b      	ldrb	r3, [r3, #4]
   32dbc:	2b01      	cmp	r3, #1
   32dbe:	d008      	beq.n	32dd2 <nrfx_ipc_receive_event_disable+0x1e>
   32dc0:	4908      	ldr	r1, [pc, #32]	; (32de4 <nrfx_ipc_receive_event_disable+0x30>)
   32dc2:	4809      	ldr	r0, [pc, #36]	; (32de8 <nrfx_ipc_receive_event_disable+0x34>)
   32dc4:	2272      	movs	r2, #114	; 0x72
   32dc6:	f009 fe61 	bl	3ca8c <assert_print>
   32dca:	2172      	movs	r1, #114	; 0x72
   32dcc:	4805      	ldr	r0, [pc, #20]	; (32de4 <nrfx_ipc_receive_event_disable+0x30>)
   32dce:	f009 fe56 	bl	3ca7e <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   32dd2:	2301      	movs	r3, #1
   32dd4:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   32dd8:	4b04      	ldr	r3, [pc, #16]	; (32dec <nrfx_ipc_receive_event_disable+0x38>)
   32dda:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   32dde:	bd10      	pop	{r4, pc}
   32de0:	2001a428 	.word	0x2001a428
   32de4:	0004b8cb 	.word	0x0004b8cb
   32de8:	0004409e 	.word	0x0004409e
   32dec:	4002a000 	.word	0x4002a000

00032df0 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   32df0:	4b16      	ldr	r3, [pc, #88]	; (32e4c <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   32df2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32df6:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   32dfa:	f04f 0801 	mov.w	r8, #1
    uint32_t bitmask = events_map;
   32dfe:	4635      	mov	r5, r6
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   32e00:	4f13      	ldr	r7, [pc, #76]	; (32e50 <nrfx_ipc_irq_handler+0x60>)
   32e02:	f8df 9058 	ldr.w	r9, [pc, #88]	; 32e5c <nrfx_ipc_irq_handler+0x6c>
    while (bitmask)
   32e06:	b935      	cbnz	r5, 32e16 <nrfx_ipc_irq_handler+0x26>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   32e08:	4b12      	ldr	r3, [pc, #72]	; (32e54 <nrfx_ipc_irq_handler+0x64>)
   32e0a:	4630      	mov	r0, r6
}
   32e0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   32e10:	681a      	ldr	r2, [r3, #0]
   32e12:	6899      	ldr	r1, [r3, #8]
   32e14:	4710      	bx	r2
        uint8_t event_idx = NRF_CTZ(bitmask);
   32e16:	fa95 f4a5 	rbit	r4, r5
   32e1a:	fab4 f484 	clz	r4, r4
        bitmask &= ~(1UL << event_idx);
   32e1e:	fa08 f304 	lsl.w	r3, r8, r4
   32e22:	2c07      	cmp	r4, #7
   32e24:	ea25 0503 	bic.w	r5, r5, r3
   32e28:	dd0a      	ble.n	32e40 <nrfx_ipc_irq_handler+0x50>
   32e2a:	4639      	mov	r1, r7
   32e2c:	4648      	mov	r0, r9
   32e2e:	f240 12e7 	movw	r2, #487	; 0x1e7
   32e32:	f009 fe2b 	bl	3ca8c <assert_print>
   32e36:	f240 11e7 	movw	r1, #487	; 0x1e7
   32e3a:	4638      	mov	r0, r7
   32e3c:	f009 fe1f 	bl	3ca7e <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32e40:	2200      	movs	r2, #0
   32e42:	4b05      	ldr	r3, [pc, #20]	; (32e58 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   32e44:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32e46:	511a      	str	r2, [r3, r4]
}
   32e48:	e7dd      	b.n	32e06 <nrfx_ipc_irq_handler+0x16>
   32e4a:	bf00      	nop
   32e4c:	4002a000 	.word	0x4002a000
   32e50:	0004b906 	.word	0x0004b906
   32e54:	2001a428 	.word	0x2001a428
   32e58:	4002a100 	.word	0x4002a100
   32e5c:	0004409e 	.word	0x0004409e

00032e60 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   32e60:	4a04      	ldr	r2, [pc, #16]	; (32e74 <nvmc_word_write+0x14>)
   32e62:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   32e66:	07db      	lsls	r3, r3, #31
   32e68:	d5fb      	bpl.n	32e62 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   32e6a:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   32e6c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   32e70:	4770      	bx	lr
   32e72:	bf00      	nop
   32e74:	40039000 	.word	0x40039000

00032e78 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   32e78:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   32e7c:	b510      	push	{r4, lr}
   32e7e:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   32e80:	d30a      	bcc.n	32e98 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   32e82:	4910      	ldr	r1, [pc, #64]	; (32ec4 <nrfx_nvmc_page_erase+0x4c>)
   32e84:	4810      	ldr	r0, [pc, #64]	; (32ec8 <nrfx_nvmc_page_erase+0x50>)
   32e86:	f44f 7283 	mov.w	r2, #262	; 0x106
   32e8a:	f009 fdff 	bl	3ca8c <assert_print>
   32e8e:	f44f 7183 	mov.w	r1, #262	; 0x106
   32e92:	480c      	ldr	r0, [pc, #48]	; (32ec4 <nrfx_nvmc_page_erase+0x4c>)
   32e94:	f009 fdf3 	bl	3ca7e <assert_post_action>
    return !(addr % flash_page_size_get());
   32e98:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   32e9c:	b97b      	cbnz	r3, 32ebe <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   32e9e:	2202      	movs	r2, #2
   32ea0:	4b0a      	ldr	r3, [pc, #40]	; (32ecc <nrfx_nvmc_page_erase+0x54>)
   32ea2:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   32ea6:	f04f 32ff 	mov.w	r2, #4294967295
   32eaa:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   32eac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   32eb0:	07d2      	lsls	r2, r2, #31
   32eb2:	d5fb      	bpl.n	32eac <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   32eb4:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   32eb6:	4806      	ldr	r0, [pc, #24]	; (32ed0 <nrfx_nvmc_page_erase+0x58>)
   32eb8:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   32ebc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   32ebe:	4805      	ldr	r0, [pc, #20]	; (32ed4 <nrfx_nvmc_page_erase+0x5c>)
   32ec0:	e7fc      	b.n	32ebc <nrfx_nvmc_page_erase+0x44>
   32ec2:	bf00      	nop
   32ec4:	0004b938 	.word	0x0004b938
   32ec8:	0004409e 	.word	0x0004409e
   32ecc:	40039000 	.word	0x40039000
   32ed0:	0bad0000 	.word	0x0bad0000
   32ed4:	0bad000a 	.word	0x0bad000a

00032ed8 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   32ed8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   32edc:	b570      	push	{r4, r5, r6, lr}
   32ede:	4604      	mov	r4, r0
   32ee0:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   32ee2:	d30a      	bcc.n	32efa <nrfx_nvmc_word_write+0x22>
    NRFX_ASSERT(is_valid_address(addr, true));
   32ee4:	4911      	ldr	r1, [pc, #68]	; (32f2c <nrfx_nvmc_word_write+0x54>)
   32ee6:	4812      	ldr	r0, [pc, #72]	; (32f30 <nrfx_nvmc_word_write+0x58>)
   32ee8:	f44f 72ca 	mov.w	r2, #404	; 0x194
   32eec:	f009 fdce 	bl	3ca8c <assert_print>
   32ef0:	f44f 71ca 	mov.w	r1, #404	; 0x194
   32ef4:	480d      	ldr	r0, [pc, #52]	; (32f2c <nrfx_nvmc_word_write+0x54>)
   32ef6:	f009 fdc2 	bl	3ca7e <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   32efa:	07a3      	lsls	r3, r4, #30
   32efc:	d00a      	beq.n	32f14 <nrfx_nvmc_word_write+0x3c>
   32efe:	490b      	ldr	r1, [pc, #44]	; (32f2c <nrfx_nvmc_word_write+0x54>)
   32f00:	480b      	ldr	r0, [pc, #44]	; (32f30 <nrfx_nvmc_word_write+0x58>)
   32f02:	f240 1295 	movw	r2, #405	; 0x195
   32f06:	f009 fdc1 	bl	3ca8c <assert_print>
   32f0a:	f240 1195 	movw	r1, #405	; 0x195
   32f0e:	4807      	ldr	r0, [pc, #28]	; (32f2c <nrfx_nvmc_word_write+0x54>)
   32f10:	f009 fdb5 	bl	3ca7e <assert_post_action>
   32f14:	2301      	movs	r3, #1
   32f16:	4e07      	ldr	r6, [pc, #28]	; (32f34 <nrfx_nvmc_word_write+0x5c>)

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   32f18:	4629      	mov	r1, r5
   32f1a:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584
   32f1e:	4620      	mov	r0, r4
   32f20:	f7ff ff9e 	bl	32e60 <nvmc_word_write>
   32f24:	2300      	movs	r3, #0
   32f26:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   32f2a:	bd70      	pop	{r4, r5, r6, pc}
   32f2c:	0004b938 	.word	0x0004b938
   32f30:	0004409e 	.word	0x0004409e
   32f34:	40039000 	.word	0x40039000

00032f38 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   32f38:	6803      	ldr	r3, [r0, #0]
{
   32f3a:	b510      	push	{r4, lr}
    switch (port)
   32f3c:	095a      	lsrs	r2, r3, #5
   32f3e:	bf0c      	ite	eq
   32f40:	f04f 32ff 	moveq.w	r2, #4294967295
   32f44:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   32f46:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   32f4a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   32f4e:	07db      	lsls	r3, r3, #31
{
   32f50:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   32f52:	d40a      	bmi.n	32f6a <nrf_gpio_pin_port_decode+0x32>
   32f54:	490e      	ldr	r1, [pc, #56]	; (32f90 <nrf_gpio_pin_port_decode+0x58>)
   32f56:	480f      	ldr	r0, [pc, #60]	; (32f94 <nrf_gpio_pin_port_decode+0x5c>)
   32f58:	f240 2229 	movw	r2, #553	; 0x229
   32f5c:	f009 fd96 	bl	3ca8c <assert_print>
   32f60:	f240 2129 	movw	r1, #553	; 0x229
   32f64:	480a      	ldr	r0, [pc, #40]	; (32f90 <nrf_gpio_pin_port_decode+0x58>)
   32f66:	f009 fd8a 	bl	3ca7e <assert_post_action>
    uint32_t pin_number = *p_pin;
   32f6a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   32f6c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   32f70:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   32f72:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   32f74:	d00a      	beq.n	32f8c <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   32f76:	4906      	ldr	r1, [pc, #24]	; (32f90 <nrf_gpio_pin_port_decode+0x58>)
   32f78:	4806      	ldr	r0, [pc, #24]	; (32f94 <nrf_gpio_pin_port_decode+0x5c>)
   32f7a:	f240 222e 	movw	r2, #558	; 0x22e
   32f7e:	f009 fd85 	bl	3ca8c <assert_print>
   32f82:	f240 212e 	movw	r1, #558	; 0x22e
   32f86:	4802      	ldr	r0, [pc, #8]	; (32f90 <nrf_gpio_pin_port_decode+0x58>)
   32f88:	f009 fd79 	bl	3ca7e <assert_post_action>
}
   32f8c:	4802      	ldr	r0, [pc, #8]	; (32f98 <nrf_gpio_pin_port_decode+0x60>)
   32f8e:	bd10      	pop	{r4, pc}
   32f90:	00044c81 	.word	0x00044c81
   32f94:	0004409e 	.word	0x0004409e
   32f98:	40842500 	.word	0x40842500

00032f9c <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   32f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32fa0:	4606      	mov	r6, r0
   32fa2:	4690      	mov	r8, r2
   32fa4:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
   32fa6:	460c      	mov	r4, r1
   32fa8:	b951      	cbnz	r1, 32fc0 <nrfx_twim_init+0x24>
   32faa:	492f      	ldr	r1, [pc, #188]	; (33068 <nrfx_twim_init+0xcc>)
   32fac:	482f      	ldr	r0, [pc, #188]	; (3306c <nrfx_twim_init+0xd0>)
   32fae:	f240 1215 	movw	r2, #277	; 0x115
   32fb2:	f009 fd6b 	bl	3ca8c <assert_print>
   32fb6:	f240 1115 	movw	r1, #277	; 0x115
   32fba:	482b      	ldr	r0, [pc, #172]	; (33068 <nrfx_twim_init+0xcc>)
   32fbc:	f009 fd5f 	bl	3ca7e <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   32fc0:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   32fc2:	f896 a004 	ldrb.w	sl, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   32fc6:	4d2a      	ldr	r5, [pc, #168]	; (33070 <nrfx_twim_init+0xd4>)
   32fc8:	fb07 f70a 	mul.w	r7, r7, sl
   32fcc:	19e9      	adds	r1, r5, r7
   32fce:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
   32fd2:	2800      	cmp	r0, #0
   32fd4:	d145      	bne.n	33062 <nrfx_twim_init+0xc6>
    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   32fd6:	7b63      	ldrb	r3, [r4, #13]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   32fd8:	f8d6 b000 	ldr.w	fp, [r6]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   32fdc:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   32fe0:	7ba3      	ldrb	r3, [r4, #14]
    p_cb->int_mask        = 0;
   32fe2:	6088      	str	r0, [r1, #8]
    p_cb->handler         = event_handler;
   32fe4:	f845 8007 	str.w	r8, [r5, r7]
    p_cb->p_context       = p_context;
   32fe8:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->repeated        = false;
   32fec:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    p_cb->busy            = false;
   32ff0:	f881 002f 	strb.w	r0, [r1, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   32ff4:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   32ff8:	b1f3      	cbz	r3, 33038 <nrfx_twim_init+0x9c>
   32ffa:	7be3      	ldrb	r3, [r4, #15]
   32ffc:	b92b      	cbnz	r3, 3300a <nrfx_twim_init+0x6e>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   32ffe:	e9d4 2300 	ldrd	r2, r3, [r4]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   33002:	f8cb 2508 	str.w	r2, [fp, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   33006:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   3300a:	68a3      	ldr	r3, [r4, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   3300c:	f8cb 3524 	str.w	r3, [fp, #1316]	; 0x524

    if (p_cb->handler)
   33010:	2334      	movs	r3, #52	; 0x34
   33012:	fb03 f30a 	mul.w	r3, r3, sl
   33016:	58eb      	ldr	r3, [r5, r3]
   33018:	b123      	cbz	r3, 33024 <nrfx_twim_init+0x88>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   3301a:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   3301c:	f340 3007 	sbfx	r0, r0, #12, #8
   33020:	f7ef fd98 	bl	22b54 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   33024:	2334      	movs	r3, #52	; 0x34
   33026:	fb03 550a 	mla	r5, r3, sl, r5
   3302a:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   3302c:	4811      	ldr	r0, [pc, #68]	; (33074 <nrfx_twim_init+0xd8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3302e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   33032:	b003      	add	sp, #12
   33034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
   33038:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3303a:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   3303c:	f240 670c 	movw	r7, #1548	; 0x60c
   33040:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33042:	f7ff ff79 	bl	32f38 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   33046:	9b01      	ldr	r3, [sp, #4]
   33048:	3380      	adds	r3, #128	; 0x80
   3304a:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   3304e:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33050:	a801      	add	r0, sp, #4
   33052:	9301      	str	r3, [sp, #4]
   33054:	f7ff ff70 	bl	32f38 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   33058:	9b01      	ldr	r3, [sp, #4]
   3305a:	3380      	adds	r3, #128	; 0x80
   3305c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   33060:	e7cb      	b.n	32ffa <nrfx_twim_init+0x5e>
        return err_code;
   33062:	4805      	ldr	r0, [pc, #20]	; (33078 <nrfx_twim_init+0xdc>)
   33064:	e7e5      	b.n	33032 <nrfx_twim_init+0x96>
   33066:	bf00      	nop
   33068:	0004b974 	.word	0x0004b974
   3306c:	0004409e 	.word	0x0004409e
   33070:	2001a434 	.word	0x2001a434
   33074:	0bad0000 	.word	0x0bad0000
   33078:	0bad0005 	.word	0x0bad0005

0003307c <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3307c:	2334      	movs	r3, #52	; 0x34
{
   3307e:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   33080:	4c0f      	ldr	r4, [pc, #60]	; (330c0 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   33082:	7906      	ldrb	r6, [r0, #4]
{
   33084:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   33086:	fb03 4306 	mla	r3, r3, r6, r4
   3308a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   3308e:	2b01      	cmp	r3, #1
   33090:	d00a      	beq.n	330a8 <nrfx_twim_enable+0x2c>
   33092:	490c      	ldr	r1, [pc, #48]	; (330c4 <nrfx_twim_enable+0x48>)
   33094:	480c      	ldr	r0, [pc, #48]	; (330c8 <nrfx_twim_enable+0x4c>)
   33096:	f240 1279 	movw	r2, #377	; 0x179
   3309a:	f009 fcf7 	bl	3ca8c <assert_print>
   3309e:	f240 1179 	movw	r1, #377	; 0x179
   330a2:	4808      	ldr	r0, [pc, #32]	; (330c4 <nrfx_twim_enable+0x48>)
   330a4:	f009 fceb 	bl	3ca7e <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   330a8:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   330aa:	682b      	ldr	r3, [r5, #0]
   330ac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   330b0:	2334      	movs	r3, #52	; 0x34
   330b2:	fb03 4406 	mla	r4, r3, r6, r4
   330b6:	2302      	movs	r3, #2
   330b8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   330bc:	bd70      	pop	{r4, r5, r6, pc}
   330be:	bf00      	nop
   330c0:	2001a434 	.word	0x2001a434
   330c4:	0004b974 	.word	0x0004b974
   330c8:	0004409e 	.word	0x0004409e

000330cc <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   330cc:	2234      	movs	r2, #52	; 0x34
{
   330ce:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   330d0:	4c14      	ldr	r4, [pc, #80]	; (33124 <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   330d2:	7906      	ldrb	r6, [r0, #4]
{
   330d4:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   330d6:	fb02 4206 	mla	r2, r2, r6, r4
   330da:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
   330de:	b953      	cbnz	r3, 330f6 <nrfx_twim_disable+0x2a>
   330e0:	4911      	ldr	r1, [pc, #68]	; (33128 <nrfx_twim_disable+0x5c>)
   330e2:	4812      	ldr	r0, [pc, #72]	; (3312c <nrfx_twim_disable+0x60>)
   330e4:	f44f 72c2 	mov.w	r2, #388	; 0x184
   330e8:	f009 fcd0 	bl	3ca8c <assert_print>
   330ec:	f44f 71c2 	mov.w	r1, #388	; 0x184
   330f0:	480d      	ldr	r0, [pc, #52]	; (33128 <nrfx_twim_disable+0x5c>)
   330f2:	f009 fcc4 	bl	3ca7e <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   330f6:	2334      	movs	r3, #52	; 0x34
   330f8:	2100      	movs	r1, #0
   330fa:	fb03 4306 	mla	r3, r3, r6, r4
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   330fe:	682a      	ldr	r2, [r5, #0]
    p_reg->INTENCLR = mask;
   33100:	480b      	ldr	r0, [pc, #44]	; (33130 <nrfx_twim_disable+0x64>)
    p_cb->int_mask = 0;
   33102:	6099      	str	r1, [r3, #8]
   33104:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   33108:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   3310c:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   33110:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   33114:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   33118:	2201      	movs	r2, #1
    p_cb->busy = false;
   3311a:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3311e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   33122:	bd70      	pop	{r4, r5, r6, pc}
   33124:	2001a434 	.word	0x2001a434
   33128:	0004b974 	.word	0x0004b974
   3312c:	0004409e 	.word	0x0004409e
   33130:	019c0202 	.word	0x019c0202

00033134 <nrfx_twim_uninit>:
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   33134:	2334      	movs	r3, #52	; 0x34
{
   33136:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   33138:	4d23      	ldr	r5, [pc, #140]	; (331c8 <nrfx_twim_uninit+0x94>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3313a:	7906      	ldrb	r6, [r0, #4]
{
   3313c:	4604      	mov	r4, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3313e:	fb03 5306 	mla	r3, r3, r6, r5
   33142:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   33146:	b953      	cbnz	r3, 3315e <nrfx_twim_uninit+0x2a>
   33148:	4920      	ldr	r1, [pc, #128]	; (331cc <nrfx_twim_uninit+0x98>)
   3314a:	4821      	ldr	r0, [pc, #132]	; (331d0 <nrfx_twim_uninit+0x9c>)
   3314c:	f44f 72b0 	mov.w	r2, #352	; 0x160
   33150:	f009 fc9c 	bl	3ca8c <assert_print>
   33154:	f44f 71b0 	mov.w	r1, #352	; 0x160
   33158:	481c      	ldr	r0, [pc, #112]	; (331cc <nrfx_twim_uninit+0x98>)
   3315a:	f009 fc90 	bl	3ca7e <assert_post_action>
    if (p_cb->handler)
   3315e:	2334      	movs	r3, #52	; 0x34
   33160:	4373      	muls	r3, r6
   33162:	58eb      	ldr	r3, [r5, r3]
   33164:	b123      	cbz	r3, 33170 <nrfx_twim_uninit+0x3c>
   33166:	6820      	ldr	r0, [r4, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
   33168:	f340 3007 	sbfx	r0, r0, #12, #8
   3316c:	f7ef fd02 	bl	22b74 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
   33170:	4620      	mov	r0, r4
   33172:	f7ff ffab 	bl	330cc <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   33176:	2334      	movs	r3, #52	; 0x34
   33178:	fb03 5306 	mla	r3, r3, r6, r5
   3317c:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   33180:	b9ca      	cbnz	r2, 331b6 <nrfx_twim_uninit+0x82>
   33182:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   33186:	b9b3      	cbnz	r3, 331b6 <nrfx_twim_uninit+0x82>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
   33188:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3318a:	a801      	add	r0, sp, #4
    return p_reg->PSEL.SCL;
   3318c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   33190:	2702      	movs	r7, #2
   33192:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33194:	f7ff fed0 	bl	32f38 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   33198:	9b01      	ldr	r3, [sp, #4]
   3319a:	3380      	adds	r3, #128	; 0x80
   3319c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        nrf_gpio_cfg_default(nrf_twim_sda_pin_get(p_instance->p_twim));
   331a0:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   331a2:	a801      	add	r0, sp, #4
    return p_reg->PSEL.SDA;
   331a4:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
    nrf_gpio_cfg(
   331a8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   331aa:	f7ff fec5 	bl	32f38 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   331ae:	9b01      	ldr	r3, [sp, #4]
   331b0:	3380      	adds	r3, #128	; 0x80
   331b2:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   331b6:	2334      	movs	r3, #52	; 0x34
   331b8:	fb03 5506 	mla	r5, r3, r6, r5
   331bc:	2300      	movs	r3, #0
   331be:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   331c2:	b003      	add	sp, #12
   331c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   331c6:	bf00      	nop
   331c8:	2001a434 	.word	0x2001a434
   331cc:	0004b974 	.word	0x0004b974
   331d0:	0004409e 	.word	0x0004409e

000331d4 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   331d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   331d8:	7903      	ldrb	r3, [r0, #4]
{
   331da:	4604      	mov	r4, r0
   331dc:	460d      	mov	r5, r1
   331de:	4616      	mov	r6, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   331e0:	b93b      	cbnz	r3, 331f2 <nrfx_twim_xfer+0x1e>
   331e2:	684b      	ldr	r3, [r1, #4]
   331e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   331e8:	d203      	bcs.n	331f2 <nrfx_twim_xfer+0x1e>
   331ea:	688b      	ldr	r3, [r1, #8]
   331ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   331f0:	d30a      	bcc.n	33208 <nrfx_twim_xfer+0x34>
   331f2:	49ba      	ldr	r1, [pc, #744]	; (334dc <nrfx_twim_xfer+0x308>)
   331f4:	48ba      	ldr	r0, [pc, #744]	; (334e0 <nrfx_twim_xfer+0x30c>)
   331f6:	f240 2299 	movw	r2, #665	; 0x299
   331fa:	f009 fc47 	bl	3ca8c <assert_print>
   331fe:	f240 2199 	movw	r1, #665	; 0x299
   33202:	48b6      	ldr	r0, [pc, #728]	; (334dc <nrfx_twim_xfer+0x308>)
   33204:	f009 fc3b 	bl	3ca7e <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   33208:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3320a:	f894 9004 	ldrb.w	r9, [r4, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   3320e:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 334f8 <nrfx_twim_xfer+0x324>
   33212:	fb07 f709 	mul.w	r7, r7, r9
   33216:	f858 3007 	ldr.w	r3, [r8, r7]
   3321a:	bb03      	cbnz	r3, 3325e <nrfx_twim_xfer+0x8a>
   3321c:	782b      	ldrb	r3, [r5, #0]
   3321e:	2b02      	cmp	r3, #2
   33220:	d00e      	beq.n	33240 <nrfx_twim_xfer+0x6c>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   33222:	782b      	ldrb	r3, [r5, #0]
   33224:	2b03      	cmp	r3, #3
   33226:	d11a      	bne.n	3325e <nrfx_twim_xfer+0x8a>
   33228:	f240 22a2 	movw	r2, #674	; 0x2a2
   3322c:	49ab      	ldr	r1, [pc, #684]	; (334dc <nrfx_twim_xfer+0x308>)
   3322e:	48ac      	ldr	r0, [pc, #688]	; (334e0 <nrfx_twim_xfer+0x30c>)
   33230:	f009 fc2c 	bl	3ca8c <assert_print>
   33234:	f240 21a2 	movw	r1, #674	; 0x2a2
   33238:	48a8      	ldr	r0, [pc, #672]	; (334dc <nrfx_twim_xfer+0x308>)
   3323a:	f009 fc20 	bl	3ca7e <assert_post_action>
   3323e:	e00e      	b.n	3325e <nrfx_twim_xfer+0x8a>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   33240:	f240 22a1 	movw	r2, #673	; 0x2a1
   33244:	49a5      	ldr	r1, [pc, #660]	; (334dc <nrfx_twim_xfer+0x308>)
   33246:	48a6      	ldr	r0, [pc, #664]	; (334e0 <nrfx_twim_xfer+0x30c>)
   33248:	f009 fc20 	bl	3ca8c <assert_print>
   3324c:	f240 21a1 	movw	r1, #673	; 0x2a1
   33250:	48a2      	ldr	r0, [pc, #648]	; (334dc <nrfx_twim_xfer+0x308>)
   33252:	f009 fc14 	bl	3ca7e <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   33256:	f858 3007 	ldr.w	r3, [r8, r7]
   3325a:	2b00      	cmp	r3, #0
   3325c:	d0e1      	beq.n	33222 <nrfx_twim_xfer+0x4e>
    p_cb->error = false;
   3325e:	2334      	movs	r3, #52	; 0x34
   33260:	2200      	movs	r2, #0
   33262:	fb03 8309 	mla	r3, r3, r9, r8
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   33266:	6824      	ldr	r4, [r4, #0]
    p_cb->error = false;
   33268:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   3326c:	686b      	ldr	r3, [r5, #4]
   3326e:	b14b      	cbz	r3, 33284 <nrfx_twim_xfer+0xb0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   33270:	68eb      	ldr	r3, [r5, #12]
   33272:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   33276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   3327a:	d003      	beq.n	33284 <nrfx_twim_xfer+0xb0>
        return err_code;
   3327c:	4f99      	ldr	r7, [pc, #612]	; (334e4 <nrfx_twim_xfer+0x310>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3327e:	4638      	mov	r0, r7
   33280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   33284:	2734      	movs	r7, #52	; 0x34
   33286:	fb07 8709 	mla	r7, r7, r9, r8
    p_reg->INTENCLR = mask;
   3328a:	4b97      	ldr	r3, [pc, #604]	; (334e8 <nrfx_twim_xfer+0x314>)
   3328c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   33290:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   33294:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   33298:	b123      	cbz	r3, 332a4 <nrfx_twim_xfer+0xd0>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   3329a:	68bb      	ldr	r3, [r7, #8]
        return err_code;
   3329c:	4f93      	ldr	r7, [pc, #588]	; (334ec <nrfx_twim_xfer+0x318>)
    p_reg->INTENSET = mask;
   3329e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   332a2:	e7ec      	b.n	3327e <nrfx_twim_xfer+0xaa>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   332a4:	f016 0f14 	tst.w	r6, #20
   332a8:	bf0c      	ite	eq
   332aa:	2301      	moveq	r3, #1
   332ac:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   332ae:	46ae      	mov	lr, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   332b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   332b4:	f107 0c0c 	add.w	ip, r7, #12
   332b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   332bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   332c0:	f8de 3000 	ldr.w	r3, [lr]
    p_cb->flags = flags;
   332c4:	623e      	str	r6, [r7, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   332c6:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   332ca:	f3c6 1300 	ubfx	r3, r6, #4, #1
   332ce:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   332d2:	786b      	ldrb	r3, [r5, #1]
   332d4:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   332d8:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   332dc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   332e0:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   332e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   332e8:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   332ec:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   332f0:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   332f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   332f8:	f016 0301 	ands.w	r3, r6, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   332fc:	bf18      	it	ne
   332fe:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   33300:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   33304:	f016 0302 	ands.w	r3, r6, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   33308:	bf18      	it	ne
   3330a:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   3330c:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   33310:	782b      	ldrb	r3, [r5, #0]
   33312:	2b03      	cmp	r3, #3
   33314:	f200 80df 	bhi.w	334d6 <nrfx_twim_xfer+0x302>
   33318:	e8df f003 	tbb	[pc, r3]
   3331c:	0293caae 	.word	0x0293caae
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   33320:	06f3      	lsls	r3, r6, #27
   33322:	d50a      	bpl.n	3333a <nrfx_twim_xfer+0x166>
   33324:	496d      	ldr	r1, [pc, #436]	; (334dc <nrfx_twim_xfer+0x308>)
   33326:	486e      	ldr	r0, [pc, #440]	; (334e0 <nrfx_twim_xfer+0x30c>)
   33328:	f240 12dd 	movw	r2, #477	; 0x1dd
   3332c:	f009 fbae 	bl	3ca8c <assert_print>
   33330:	f240 11dd 	movw	r1, #477	; 0x1dd
   33334:	4869      	ldr	r0, [pc, #420]	; (334dc <nrfx_twim_xfer+0x308>)
   33336:	f009 fba2 	bl	3ca7e <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   3333a:	0737      	lsls	r7, r6, #28
   3333c:	d50a      	bpl.n	33354 <nrfx_twim_xfer+0x180>
   3333e:	4967      	ldr	r1, [pc, #412]	; (334dc <nrfx_twim_xfer+0x308>)
   33340:	4867      	ldr	r0, [pc, #412]	; (334e0 <nrfx_twim_xfer+0x30c>)
   33342:	f44f 72ef 	mov.w	r2, #478	; 0x1de
   33346:	f009 fba1 	bl	3ca8c <assert_print>
   3334a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   3334e:	4863      	ldr	r0, [pc, #396]	; (334dc <nrfx_twim_xfer+0x308>)
   33350:	f009 fb95 	bl	3ca7e <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   33354:	0770      	lsls	r0, r6, #29
   33356:	d50a      	bpl.n	3336e <nrfx_twim_xfer+0x19a>
   33358:	4960      	ldr	r1, [pc, #384]	; (334dc <nrfx_twim_xfer+0x308>)
   3335a:	4861      	ldr	r0, [pc, #388]	; (334e0 <nrfx_twim_xfer+0x30c>)
   3335c:	f240 12df 	movw	r2, #479	; 0x1df
   33360:	f009 fb94 	bl	3ca8c <assert_print>
   33364:	f240 11df 	movw	r1, #479	; 0x1df
   33368:	485c      	ldr	r0, [pc, #368]	; (334dc <nrfx_twim_xfer+0x308>)
   3336a:	f009 fb88 	bl	3ca7e <assert_post_action>
   3336e:	692b      	ldr	r3, [r5, #16]
   33370:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   33374:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   33378:	d180      	bne.n	3327c <nrfx_twim_xfer+0xa8>
    p_reg->SHORTS = mask;
   3337a:	f44f 7280 	mov.w	r2, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3337e:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   33380:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   33384:	686a      	ldr	r2, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   33386:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3338a:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3338e:	2200      	movs	r2, #0
   33390:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
   33394:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33398:	2101      	movs	r1, #1
   3339a:	6221      	str	r1, [r4, #32]
   3339c:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3339e:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   333a2:	2900      	cmp	r1, #0
   333a4:	d0fb      	beq.n	3339e <nrfx_twim_xfer+0x1ca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   333a6:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
   333aa:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   333ae:	68aa      	ldr	r2, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   333b0:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   333b4:	2334      	movs	r3, #52	; 0x34
    p_reg->TXD.MAXCNT = length;
   333b6:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
   333ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   333be:	fb03 8309 	mla	r3, r3, r9, r8
   333c2:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   333c4:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   333c6:	4f4a      	ldr	r7, [pc, #296]	; (334f0 <nrfx_twim_xfer+0x31c>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   333c8:	0731      	lsls	r1, r6, #28
   333ca:	d407      	bmi.n	333dc <nrfx_twim_xfer+0x208>
   333cc:	782a      	ldrb	r2, [r5, #0]
   333ce:	2a03      	cmp	r2, #3
   333d0:	d004      	beq.n	333dc <nrfx_twim_xfer+0x208>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   333d2:	2201      	movs	r2, #1
   333d4:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   333d6:	686b      	ldr	r3, [r5, #4]
   333d8:	b903      	cbnz	r3, 333dc <nrfx_twim_xfer+0x208>
   333da:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   333dc:	2334      	movs	r3, #52	; 0x34
   333de:	fb03 f309 	mul.w	r3, r3, r9
   333e2:	f858 2003 	ldr.w	r2, [r8, r3]
   333e6:	eb08 0103 	add.w	r1, r8, r3
   333ea:	2a00      	cmp	r2, #0
   333ec:	f040 8086 	bne.w	334fc <nrfx_twim_xfer+0x328>
                transmission_finished = true;
   333f0:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   333f2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   333f6:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   333fa:	2800      	cmp	r0, #0
   333fc:	f040 8099 	bne.w	33532 <nrfx_twim_xfer+0x35e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   33400:	3b00      	subs	r3, #0
   33402:	bf18      	it	ne
   33404:	2301      	movne	r3, #1
   33406:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   3340a:	2800      	cmp	r0, #0
   3340c:	f000 8097 	beq.w	3353e <nrfx_twim_xfer+0x36a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33410:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   33414:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   33418:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   3341c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   33420:	b115      	cbz	r5, 33428 <nrfx_twim_xfer+0x254>
   33422:	f410 7f00 	tst.w	r0, #512	; 0x200
   33426:	d104      	bne.n	33432 <nrfx_twim_xfer+0x25e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33428:	6221      	str	r1, [r4, #32]
   3342a:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   3342c:	2d00      	cmp	r5, #0
   3342e:	d0e0      	beq.n	333f2 <nrfx_twim_xfer+0x21e>
                    transmission_finished = false;
   33430:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   33432:	05c0      	lsls	r0, r0, #23
   33434:	f140 8083 	bpl.w	3353e <nrfx_twim_xfer+0x36a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33438:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   3343c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   33440:	e7d7      	b.n	333f2 <nrfx_twim_xfer+0x21e>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   33442:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   33444:	68ea      	ldr	r2, [r5, #12]
   33446:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3344a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   3344e:	692b      	ldr	r3, [r5, #16]
   33450:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   33454:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   33458:	f47f af10 	bne.w	3327c <nrfx_twim_xfer+0xa8>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   3345c:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3345e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   33462:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   33466:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   3346a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   3346e:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   33470:	2202      	movs	r2, #2
   33472:	fb03 8309 	mla	r3, r3, r9, r8
   33476:	e012      	b.n	3349e <nrfx_twim_xfer+0x2ca>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   33478:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3347a:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   3347c:	f016 0f20 	tst.w	r6, #32
   33480:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   33484:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   33488:	f04f 0334 	mov.w	r3, #52	; 0x34
   3348c:	d00b      	beq.n	334a6 <nrfx_twim_xfer+0x2d2>
    p_reg->SHORTS = mask;
   3348e:	f44f 7280 	mov.w	r2, #256	; 0x100
   33492:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   33496:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   3349a:	fb03 8309 	mla	r3, r3, r9, r8
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   3349e:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   334a0:	2301      	movs	r3, #1
   334a2:	6223      	str	r3, [r4, #32]
   334a4:	e78e      	b.n	333c4 <nrfx_twim_xfer+0x1f0>
    p_reg->SHORTS = mask;
   334a6:	f44f 7200 	mov.w	r2, #512	; 0x200
   334aa:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   334ae:	e7df      	b.n	33470 <nrfx_twim_xfer+0x29c>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   334b0:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   334b2:	68ea      	ldr	r2, [r5, #12]
   334b4:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   334b8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   334bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   334c0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   334c4:	2334      	movs	r3, #52	; 0x34
   334c6:	2202      	movs	r2, #2
   334c8:	fb03 8309 	mla	r3, r3, r9, r8
   334cc:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   334ce:	2301      	movs	r3, #1
   334d0:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   334d2:	2300      	movs	r3, #0
   334d4:	e777      	b.n	333c6 <nrfx_twim_xfer+0x1f2>
    switch (p_xfer_desc->type)
   334d6:	2308      	movs	r3, #8
   334d8:	4f06      	ldr	r7, [pc, #24]	; (334f4 <nrfx_twim_xfer+0x320>)
   334da:	e775      	b.n	333c8 <nrfx_twim_xfer+0x1f4>
   334dc:	0004b974 	.word	0x0004b974
   334e0:	0004409e 	.word	0x0004409e
   334e4:	0bad000a 	.word	0x0bad000a
   334e8:	019c0202 	.word	0x019c0202
   334ec:	0bad000b 	.word	0x0bad000b
   334f0:	0bad0000 	.word	0x0bad0000
   334f4:	0bad0004 	.word	0x0bad0004
   334f8:	2001a434 	.word	0x2001a434
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   334fc:	0772      	lsls	r2, r6, #29
            p_cb->int_mask = 0;
   334fe:	bf44      	itt	mi
   33500:	2300      	movmi	r3, #0
   33502:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   33504:	0673      	lsls	r3, r6, #25
   33506:	d406      	bmi.n	33516 <nrfx_twim_xfer+0x342>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   33508:	2334      	movs	r3, #52	; 0x34
   3350a:	fb03 8309 	mla	r3, r3, r9, r8
   3350e:	689a      	ldr	r2, [r3, #8]
   33510:	f042 0202 	orr.w	r2, r2, #2
   33514:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   33516:	2334      	movs	r3, #52	; 0x34
   33518:	fb03 8809 	mla	r8, r3, r9, r8
   3351c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   33520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   33524:	f8c8 3008 	str.w	r3, [r8, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   33528:	f8d8 3008 	ldr.w	r3, [r8, #8]
    p_reg->INTENSET = mask;
   3352c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   33530:	e6a5      	b.n	3327e <nrfx_twim_xfer+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33532:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   33536:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   3353a:	2301      	movs	r3, #1
   3353c:	e763      	b.n	33406 <nrfx_twim_xfer+0x232>
        } while (!transmission_finished);
   3353e:	2b00      	cmp	r3, #0
   33540:	f43f af57 	beq.w	333f2 <nrfx_twim_xfer+0x21e>
        p_cb->busy = false;
   33544:	2134      	movs	r1, #52	; 0x34
   33546:	2000      	movs	r0, #0
   33548:	fb01 8209 	mla	r2, r1, r9, r8
    uint32_t error_source = p_reg->ERRORSRC;
   3354c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   33550:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   33554:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   33558:	b18b      	cbz	r3, 3357e <nrfx_twim_xfer+0x3aa>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   3355a:	4a0f      	ldr	r2, [pc, #60]	; (33598 <nrfx_twim_xfer+0x3c4>)
   3355c:	f013 0f01 	tst.w	r3, #1
   33560:	4f0e      	ldr	r7, [pc, #56]	; (3359c <nrfx_twim_xfer+0x3c8>)
   33562:	bf18      	it	ne
   33564:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   33566:	f013 0f02 	tst.w	r3, #2
   3356a:	f102 0201 	add.w	r2, r2, #1
   3356e:	bf18      	it	ne
   33570:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   33572:	f013 0f04 	tst.w	r3, #4
   33576:	4b0a      	ldr	r3, [pc, #40]	; (335a0 <nrfx_twim_xfer+0x3cc>)
   33578:	bf18      	it	ne
   3357a:	461f      	movne	r7, r3
   3357c:	e67f      	b.n	3327e <nrfx_twim_xfer+0xaa>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   3357e:	0673      	lsls	r3, r6, #25
   33580:	f53f ae7d 	bmi.w	3327e <nrfx_twim_xfer+0xaa>
                !xfer_completeness_check(p_twim, p_cb))
   33584:	4620      	mov	r0, r4
   33586:	fb09 8101 	mla	r1, r9, r1, r8
   3358a:	f00c fc94 	bl	3feb6 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   3358e:	4b03      	ldr	r3, [pc, #12]	; (3359c <nrfx_twim_xfer+0x3c8>)
   33590:	2800      	cmp	r0, #0
   33592:	bf08      	it	eq
   33594:	461f      	moveq	r7, r3
   33596:	e672      	b.n	3327e <nrfx_twim_xfer+0xaa>
   33598:	0bae0000 	.word	0x0bae0000
   3359c:	0bad0001 	.word	0x0bad0001
   335a0:	0bae0002 	.word	0x0bae0002

000335a4 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   335a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   335a6:	4c61      	ldr	r4, [pc, #388]	; (3372c <nrfx_twim_2_irq_handler+0x188>)
{
   335a8:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   335aa:	6823      	ldr	r3, [r4, #0]
   335ac:	b953      	cbnz	r3, 335c4 <nrfx_twim_2_irq_handler+0x20>
   335ae:	4960      	ldr	r1, [pc, #384]	; (33730 <nrfx_twim_2_irq_handler+0x18c>)
   335b0:	4860      	ldr	r0, [pc, #384]	; (33734 <nrfx_twim_2_irq_handler+0x190>)
   335b2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   335b6:	f009 fa69 	bl	3ca8c <assert_print>
   335ba:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   335be:	485c      	ldr	r0, [pc, #368]	; (33730 <nrfx_twim_2_irq_handler+0x18c>)
   335c0:	f009 fa5d 	bl	3ca7e <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   335c4:	4d5c      	ldr	r5, [pc, #368]	; (33738 <nrfx_twim_2_irq_handler+0x194>)
   335c6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   335ca:	b1fb      	cbz	r3, 3360c <nrfx_twim_2_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   335cc:	2300      	movs	r3, #0
   335ce:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   335d2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   335d6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   335da:	b9bb      	cbnz	r3, 3360c <nrfx_twim_2_irq_handler+0x68>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   335dc:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   335de:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   335e2:	2302      	movs	r3, #2
   335e4:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   335e6:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   335e8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   335ec:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   335f0:	b11b      	cbz	r3, 335fa <nrfx_twim_2_irq_handler+0x56>
    return p_reg->SHORTS;
   335f2:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   335f6:	059e      	lsls	r6, r3, #22
   335f8:	d403      	bmi.n	33602 <nrfx_twim_2_irq_handler+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   335fa:	2201      	movs	r2, #1
   335fc:	4b4e      	ldr	r3, [pc, #312]	; (33738 <nrfx_twim_2_irq_handler+0x194>)
   335fe:	621a      	str	r2, [r3, #32]
   33600:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   33602:	2301      	movs	r3, #1
   33604:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   33608:	b007      	add	sp, #28
   3360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3360c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   33610:	2b00      	cmp	r3, #0
   33612:	d054      	beq.n	336be <nrfx_twim_2_irq_handler+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33614:	2300      	movs	r3, #0
   33616:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   3361a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   3361e:	6a23      	ldr	r3, [r4, #32]
   33620:	065d      	lsls	r5, r3, #25
   33622:	d40a      	bmi.n	3363a <nrfx_twim_2_irq_handler+0x96>
   33624:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   33628:	b93b      	cbnz	r3, 3363a <nrfx_twim_2_irq_handler+0x96>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   3362a:	4940      	ldr	r1, [pc, #256]	; (3372c <nrfx_twim_2_irq_handler+0x188>)
   3362c:	4842      	ldr	r0, [pc, #264]	; (33738 <nrfx_twim_2_irq_handler+0x194>)
   3362e:	f00c fc42 	bl	3feb6 <xfer_completeness_check>
   33632:	f080 0001 	eor.w	r0, r0, #1
   33636:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   3363a:	6a23      	ldr	r3, [r4, #32]
   3363c:	f013 0704 	ands.w	r7, r3, #4
   33640:	d122      	bne.n	33688 <nrfx_twim_2_irq_handler+0xe4>
            event.xfer_desc = p_cb->xfer_desc;
   33642:	4e3e      	ldr	r6, [pc, #248]	; (3373c <nrfx_twim_2_irq_handler+0x198>)
   33644:	ad01      	add	r5, sp, #4
   33646:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   33648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   3364a:	6833      	ldr	r3, [r6, #0]
            if (!p_cb->repeated || p_cb->error)
   3364c:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   33650:	602b      	str	r3, [r5, #0]
   33652:	4b39      	ldr	r3, [pc, #228]	; (33738 <nrfx_twim_2_irq_handler+0x194>)
   33654:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   33658:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   3365c:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   33660:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   33664:	f1bc 0f00 	cmp.w	ip, #0
   33668:	d002      	beq.n	33670 <nrfx_twim_2_irq_handler+0xcc>
   3366a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   3366e:	b15a      	cbz	r2, 33688 <nrfx_twim_2_irq_handler+0xe4>
    p_reg->SHORTS = mask;
   33670:	2200      	movs	r2, #0
   33672:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   33676:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   33678:	4a31      	ldr	r2, [pc, #196]	; (33740 <nrfx_twim_2_irq_handler+0x19c>)
   3367a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   3367e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   33682:	4b30      	ldr	r3, [pc, #192]	; (33744 <nrfx_twim_2_irq_handler+0x1a0>)
   33684:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   33688:	4a2b      	ldr	r2, [pc, #172]	; (33738 <nrfx_twim_2_irq_handler+0x194>)
   3368a:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   3368e:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   33690:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   33694:	d53c      	bpl.n	33710 <nrfx_twim_2_irq_handler+0x16c>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   33696:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   33698:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   3369c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   336a0:	b90b      	cbnz	r3, 336a6 <nrfx_twim_2_irq_handler+0x102>
        p_cb->busy = false;
   336a2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   336a6:	6a23      	ldr	r3, [r4, #32]
   336a8:	075b      	lsls	r3, r3, #29
   336aa:	d503      	bpl.n	336b4 <nrfx_twim_2_irq_handler+0x110>
   336ac:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   336b0:	2b00      	cmp	r3, #0
   336b2:	d0a9      	beq.n	33608 <nrfx_twim_2_irq_handler+0x64>
        p_cb->handler(&event, p_cb->p_context);
   336b4:	e9d4 3100 	ldrd	r3, r1, [r4]
   336b8:	4668      	mov	r0, sp
   336ba:	4798      	blx	r3
}
   336bc:	e7a4      	b.n	33608 <nrfx_twim_2_irq_handler+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   336be:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   336c2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   336c6:	7b23      	ldrb	r3, [r4, #12]
   336c8:	b983      	cbnz	r3, 336ec <nrfx_twim_2_irq_handler+0x148>
            event.xfer_desc = p_cb->xfer_desc;
   336ca:	4f1c      	ldr	r7, [pc, #112]	; (3373c <nrfx_twim_2_irq_handler+0x198>)
   336cc:	ae01      	add	r6, sp, #4
   336ce:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   336d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   336d2:	683b      	ldr	r3, [r7, #0]
   336d4:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   336d6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   336da:	2b00      	cmp	r3, #0
   336dc:	d1d4      	bne.n	33688 <nrfx_twim_2_irq_handler+0xe4>
    p_reg->SHORTS = mask;
   336de:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   336e2:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   336e4:	4b16      	ldr	r3, [pc, #88]	; (33740 <nrfx_twim_2_irq_handler+0x19c>)
   336e6:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   336ea:	e7c8      	b.n	3367e <nrfx_twim_2_irq_handler+0xda>
    p_reg->SHORTS = mask;
   336ec:	f44f 7300 	mov.w	r3, #512	; 0x200
   336f0:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   336f4:	f240 2302 	movw	r3, #514	; 0x202
   336f8:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   336fa:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   336fe:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   33702:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   33704:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33708:	2301      	movs	r3, #1
   3370a:	60ab      	str	r3, [r5, #8]
   3370c:	622b      	str	r3, [r5, #32]
            return;
   3370e:	e77b      	b.n	33608 <nrfx_twim_2_irq_handler+0x64>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   33710:	0759      	lsls	r1, r3, #29
   33712:	d501      	bpl.n	33718 <nrfx_twim_2_irq_handler+0x174>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   33714:	2302      	movs	r3, #2
   33716:	e7bf      	b.n	33698 <nrfx_twim_2_irq_handler+0xf4>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   33718:	07da      	lsls	r2, r3, #31
   3371a:	d501      	bpl.n	33720 <nrfx_twim_2_irq_handler+0x17c>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   3371c:	2303      	movs	r3, #3
   3371e:	e7bb      	b.n	33698 <nrfx_twim_2_irq_handler+0xf4>
    else if (p_cb->error)
   33720:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   33724:	2b00      	cmp	r3, #0
   33726:	d0b7      	beq.n	33698 <nrfx_twim_2_irq_handler+0xf4>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   33728:	2304      	movs	r3, #4
   3372a:	e7b5      	b.n	33698 <nrfx_twim_2_irq_handler+0xf4>
   3372c:	2001a434 	.word	0x2001a434
   33730:	0004b974 	.word	0x0004b974
   33734:	0004409e 	.word	0x0004409e
   33738:	4000a000 	.word	0x4000a000
   3373c:	2001a440 	.word	0x2001a440
   33740:	019c0202 	.word	0x019c0202
   33744:	e000e100 	.word	0xe000e100

00033748 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33748:	6803      	ldr	r3, [r0, #0]
{
   3374a:	b510      	push	{r4, lr}
    switch (port)
   3374c:	095a      	lsrs	r2, r3, #5
   3374e:	bf0c      	ite	eq
   33750:	f04f 32ff 	moveq.w	r2, #4294967295
   33754:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   33756:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3375a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   3375e:	07db      	lsls	r3, r3, #31
{
   33760:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33762:	d40a      	bmi.n	3377a <nrf_gpio_pin_port_decode+0x32>
   33764:	490e      	ldr	r1, [pc, #56]	; (337a0 <nrf_gpio_pin_port_decode+0x58>)
   33766:	480f      	ldr	r0, [pc, #60]	; (337a4 <nrf_gpio_pin_port_decode+0x5c>)
   33768:	f240 2229 	movw	r2, #553	; 0x229
   3376c:	f009 f98e 	bl	3ca8c <assert_print>
   33770:	f240 2129 	movw	r1, #553	; 0x229
   33774:	480a      	ldr	r0, [pc, #40]	; (337a0 <nrf_gpio_pin_port_decode+0x58>)
   33776:	f009 f982 	bl	3ca7e <assert_post_action>
    uint32_t pin_number = *p_pin;
   3377a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   3377c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   33780:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   33782:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   33784:	d00a      	beq.n	3379c <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   33786:	4906      	ldr	r1, [pc, #24]	; (337a0 <nrf_gpio_pin_port_decode+0x58>)
   33788:	4806      	ldr	r0, [pc, #24]	; (337a4 <nrf_gpio_pin_port_decode+0x5c>)
   3378a:	f240 222e 	movw	r2, #558	; 0x22e
   3378e:	f009 f97d 	bl	3ca8c <assert_print>
   33792:	f240 212e 	movw	r1, #558	; 0x22e
   33796:	4802      	ldr	r0, [pc, #8]	; (337a0 <nrf_gpio_pin_port_decode+0x58>)
   33798:	f009 f971 	bl	3ca7e <assert_post_action>
}
   3379c:	4802      	ldr	r0, [pc, #8]	; (337a8 <nrf_gpio_pin_port_decode+0x60>)
   3379e:	bd10      	pop	{r4, pc}
   337a0:	00044c81 	.word	0x00044c81
   337a4:	0004409e 	.word	0x0004409e
   337a8:	40842500 	.word	0x40842500

000337ac <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   337ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   337ae:	460c      	mov	r4, r1
   337b0:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   337b2:	f00c fbb0 	bl	3ff16 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   337b6:	4620      	mov	r0, r4
   337b8:	f00c fbad 	bl	3ff16 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   337bc:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   337be:	f240 650d 	movw	r5, #1549	; 0x60d
   337c2:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   337c4:	f7ff ffc0 	bl	33748 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   337c8:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   337ca:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   337cc:	3380      	adds	r3, #128	; 0x80
   337ce:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   337d2:	a801      	add	r0, sp, #4
   337d4:	9401      	str	r4, [sp, #4]
   337d6:	f7ff ffb7 	bl	33748 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   337da:	9b01      	ldr	r3, [sp, #4]
   337dc:	3380      	adds	r3, #128	; 0x80
   337de:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   337e2:	2004      	movs	r0, #4
   337e4:	f00c fae7 	bl	3fdb6 <nrfx_busy_wait>
   337e8:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   337ea:	a801      	add	r0, sp, #4
   337ec:	9401      	str	r4, [sp, #4]
   337ee:	f7ff ffab 	bl	33748 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   337f2:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   337f4:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   337f6:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   337f8:	07db      	lsls	r3, r3, #31
   337fa:	d414      	bmi.n	33826 <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   337fc:	a801      	add	r0, sp, #4
   337fe:	9601      	str	r6, [sp, #4]
   33800:	f7ff ffa2 	bl	33748 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   33804:	9b01      	ldr	r3, [sp, #4]
    for (uint8_t i = 0; i < 9; i++)
   33806:	3d01      	subs	r5, #1
   33808:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   3380c:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   3380e:	2004      	movs	r0, #4
   33810:	f00c fad1 	bl	3fdb6 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   33814:	4630      	mov	r0, r6
   33816:	f00c fb7e 	bl	3ff16 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   3381a:	2004      	movs	r0, #4
   3381c:	f00c facb 	bl	3fdb6 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   33820:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   33824:	d1e1      	bne.n	337ea <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33826:	a801      	add	r0, sp, #4
   33828:	9401      	str	r4, [sp, #4]
   3382a:	f7ff ff8d 	bl	33748 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3382e:	2301      	movs	r3, #1
   33830:	9a01      	ldr	r2, [sp, #4]
   33832:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   33834:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   33836:	2004      	movs	r0, #4
   33838:	f00c fabd 	bl	3fdb6 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   3383c:	4620      	mov	r0, r4
   3383e:	f00c fb6a 	bl	3ff16 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   33842:	2004      	movs	r0, #4
   33844:	f00c fab7 	bl	3fdb6 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33848:	a801      	add	r0, sp, #4
   3384a:	9401      	str	r4, [sp, #4]
   3384c:	f7ff ff7c 	bl	33748 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   33850:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   33852:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   33854:	4803      	ldr	r0, [pc, #12]	; (33864 <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   33856:	40d3      	lsrs	r3, r2
   33858:	f003 0301 	and.w	r3, r3, #1
   3385c:	1ac0      	subs	r0, r0, r3
   3385e:	b003      	add	sp, #12
   33860:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33862:	bf00      	nop
   33864:	0bad0001 	.word	0x0bad0001

00033868 <rpc_handle_data_message>:
   33868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3386c:	4680      	mov	r8, r0
   3386e:	4605      	mov	r5, r0
   33870:	2404      	movs	r4, #4
   33872:	f858 7b08 	ldr.w	r7, [r8], #8
   33876:	4e0c      	ldr	r6, [pc, #48]	; (338a8 <rpc_handle_data_message+0x40>)
   33878:	b2ff      	uxtb	r7, r7
   3387a:	7833      	ldrb	r3, [r6, #0]
   3387c:	42bb      	cmp	r3, r7
   3387e:	d009      	beq.n	33894 <rpc_handle_data_message+0x2c>
   33880:	3c01      	subs	r4, #1
   33882:	f106 060c 	add.w	r6, r6, #12
   33886:	d1f8      	bne.n	3387a <rpc_handle_data_message+0x12>
   33888:	68a8      	ldr	r0, [r5, #8]
   3388a:	b108      	cbz	r0, 33890 <rpc_handle_data_message+0x28>
   3388c:	f00c fb93 	bl	3ffb6 <rpc_transport_peer_data_free>
   33890:	4620      	mov	r0, r4
   33892:	e006      	b.n	338a2 <rpc_handle_data_message+0x3a>
   33894:	6829      	ldr	r1, [r5, #0]
   33896:	4640      	mov	r0, r8
   33898:	6873      	ldr	r3, [r6, #4]
   3389a:	0c09      	lsrs	r1, r1, #16
   3389c:	4798      	blx	r3
   3389e:	2802      	cmp	r0, #2
   338a0:	d0ee      	beq.n	33880 <rpc_handle_data_message+0x18>
   338a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   338a6:	bf00      	nop
   338a8:	00043108 	.word	0x00043108

000338ac <trace_write>:
   338ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   338b0:	7803      	ldrb	r3, [r0, #0]
   338b2:	4605      	mov	r5, r0
   338b4:	2b62      	cmp	r3, #98	; 0x62
   338b6:	d045      	beq.n	33944 <trace_write+0x98>
   338b8:	2b63      	cmp	r3, #99	; 0x63
   338ba:	d048      	beq.n	3394e <trace_write+0xa2>
   338bc:	2b61      	cmp	r3, #97	; 0x61
   338be:	f040 8083 	bne.w	339c8 <trace_write+0x11c>
   338c2:	4b42      	ldr	r3, [pc, #264]	; (339cc <trace_write+0x120>)
   338c4:	8819      	ldrh	r1, [r3, #0]
   338c6:	4b42      	ldr	r3, [pc, #264]	; (339d0 <trace_write+0x124>)
   338c8:	b289      	uxth	r1, r1
   338ca:	6928      	ldr	r0, [r5, #16]
   338cc:	f8d5 800c 	ldr.w	r8, [r5, #12]
   338d0:	68aa      	ldr	r2, [r5, #8]
   338d2:	eba0 0708 	sub.w	r7, r0, r8
   338d6:	eba2 0208 	sub.w	r2, r2, r8
   338da:	b2bf      	uxth	r7, r7
   338dc:	fa11 f282 	uxtah	r2, r1, r2
   338e0:	fbb2 f1f7 	udiv	r1, r2, r7
   338e4:	681b      	ldr	r3, [r3, #0]
   338e6:	fb07 2211 	mls	r2, r7, r1, r2
   338ea:	eba3 0308 	sub.w	r3, r3, r8
   338ee:	b29b      	uxth	r3, r3
   338f0:	1a9b      	subs	r3, r3, r2
   338f2:	443b      	add	r3, r7
   338f4:	fb93 f1f7 	sdiv	r1, r3, r7
   338f8:	fb07 3311 	mls	r3, r7, r1, r3
   338fc:	fa1f f983 	uxth.w	r9, r3
   33900:	fa12 f383 	uxtah	r3, r2, r3
   33904:	429f      	cmp	r7, r3
   33906:	4490      	add	r8, r2
   33908:	bfbf      	itttt	lt
   3390a:	eba0 0008 	sublt.w	r0, r0, r8
   3390e:	b280      	uxthlt	r0, r0
   33910:	eba9 0400 	sublt.w	r4, r9, r0
   33914:	4681      	movlt	r9, r0
   33916:	bfac      	ite	ge
   33918:	2400      	movge	r4, #0
   3391a:	b2a4      	uxthlt	r4, r4
   3391c:	f1b9 0f00 	cmp.w	r9, #0
   33920:	d052      	beq.n	339c8 <trace_write+0x11c>
   33922:	2005      	movs	r0, #5
   33924:	f7f2 f8a6 	bl	25a74 <nrf_modem_os_trace_alloc>
   33928:	4607      	mov	r7, r0
   3392a:	2800      	cmp	r0, #0
   3392c:	d04c      	beq.n	339c8 <trace_write+0x11c>
   3392e:	b19c      	cbz	r4, 33958 <trace_write+0xac>
   33930:	2005      	movs	r0, #5
   33932:	f7f2 f89f 	bl	25a74 <nrf_modem_os_trace_alloc>
   33936:	4606      	mov	r6, r0
   33938:	b970      	cbnz	r0, 33958 <trace_write+0xac>
   3393a:	4638      	mov	r0, r7
   3393c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33940:	f7f2 b8a0 	b.w	25a84 <nrf_modem_os_trace_free>
   33944:	4b23      	ldr	r3, [pc, #140]	; (339d4 <trace_write+0x128>)
   33946:	8819      	ldrh	r1, [r3, #0]
   33948:	4b23      	ldr	r3, [pc, #140]	; (339d8 <trace_write+0x12c>)
   3394a:	b289      	uxth	r1, r1
   3394c:	e7bd      	b.n	338ca <trace_write+0x1e>
   3394e:	4b23      	ldr	r3, [pc, #140]	; (339dc <trace_write+0x130>)
   33950:	8819      	ldrh	r1, [r3, #0]
   33952:	4b23      	ldr	r3, [pc, #140]	; (339e0 <trace_write+0x134>)
   33954:	b289      	uxth	r1, r1
   33956:	e7b8      	b.n	338ca <trace_write+0x1e>
   33958:	782a      	ldrb	r2, [r5, #0]
   3395a:	2a62      	cmp	r2, #98	; 0x62
   3395c:	d030      	beq.n	339c0 <trace_write+0x114>
   3395e:	2a63      	cmp	r2, #99	; 0x63
   33960:	d030      	beq.n	339c4 <trace_write+0x118>
   33962:	2a61      	cmp	r2, #97	; 0x61
   33964:	d107      	bne.n	33976 <trace_write+0xca>
   33966:	4919      	ldr	r1, [pc, #100]	; (339cc <trace_write+0x120>)
   33968:	880b      	ldrh	r3, [r1, #0]
   3396a:	eb09 0004 	add.w	r0, r9, r4
   3396e:	fa10 f383 	uxtah	r3, r0, r3
   33972:	b29b      	uxth	r3, r3
   33974:	800b      	strh	r3, [r1, #0]
   33976:	f06f 0b10 	mvn.w	fp, #16
   3397a:	f06f 0a41 	mvn.w	sl, #65	; 0x41
   3397e:	2105      	movs	r1, #5
   33980:	4638      	mov	r0, r7
   33982:	f887 b000 	strb.w	fp, [r7]
   33986:	f887 a001 	strb.w	sl, [r7, #1]
   3398a:	713a      	strb	r2, [r7, #4]
   3398c:	f8a7 9002 	strh.w	r9, [r7, #2]
   33990:	f00b f9df 	bl	3ed52 <nrf_modem_os_trace_put>
   33994:	4649      	mov	r1, r9
   33996:	4640      	mov	r0, r8
   33998:	f00b f9db 	bl	3ed52 <nrf_modem_os_trace_put>
   3399c:	b1a4      	cbz	r4, 339c8 <trace_write+0x11c>
   3399e:	f886 b000 	strb.w	fp, [r6]
   339a2:	f886 a001 	strb.w	sl, [r6, #1]
   339a6:	782b      	ldrb	r3, [r5, #0]
   339a8:	2105      	movs	r1, #5
   339aa:	4630      	mov	r0, r6
   339ac:	7133      	strb	r3, [r6, #4]
   339ae:	8074      	strh	r4, [r6, #2]
   339b0:	f00b f9cf 	bl	3ed52 <nrf_modem_os_trace_put>
   339b4:	4621      	mov	r1, r4
   339b6:	68e8      	ldr	r0, [r5, #12]
   339b8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   339bc:	f00b b9c9 	b.w	3ed52 <nrf_modem_os_trace_put>
   339c0:	4904      	ldr	r1, [pc, #16]	; (339d4 <trace_write+0x128>)
   339c2:	e7d1      	b.n	33968 <trace_write+0xbc>
   339c4:	4905      	ldr	r1, [pc, #20]	; (339dc <trace_write+0x130>)
   339c6:	e7cf      	b.n	33968 <trace_write+0xbc>
   339c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   339cc:	2001a598 	.word	0x2001a598
   339d0:	2001a470 	.word	0x2001a470
   339d4:	2001a594 	.word	0x2001a594
   339d8:	2001a468 	.word	0x2001a468
   339dc:	2001a596 	.word	0x2001a596
   339e0:	2001a46c 	.word	0x2001a46c

000339e4 <ipc_trace_init>:
   339e4:	2300      	movs	r3, #0
   339e6:	4a04      	ldr	r2, [pc, #16]	; (339f8 <ipc_trace_init+0x14>)
   339e8:	8013      	strh	r3, [r2, #0]
   339ea:	4a04      	ldr	r2, [pc, #16]	; (339fc <ipc_trace_init+0x18>)
   339ec:	8013      	strh	r3, [r2, #0]
   339ee:	4a04      	ldr	r2, [pc, #16]	; (33a00 <ipc_trace_init+0x1c>)
   339f0:	8013      	strh	r3, [r2, #0]
   339f2:	4b04      	ldr	r3, [pc, #16]	; (33a04 <ipc_trace_init+0x20>)
   339f4:	6018      	str	r0, [r3, #0]
   339f6:	4770      	bx	lr
   339f8:	2001a598 	.word	0x2001a598
   339fc:	2001a594 	.word	0x2001a594
   33a00:	2001a596 	.word	0x2001a596
   33a04:	2001a480 	.word	0x2001a480

00033a08 <nrf_modem_trace_irq_handler>:
   33a08:	b508      	push	{r3, lr}
   33a0a:	4b10      	ldr	r3, [pc, #64]	; (33a4c <nrf_modem_trace_irq_handler+0x44>)
   33a0c:	781b      	ldrb	r3, [r3, #0]
   33a0e:	b90b      	cbnz	r3, 33a14 <nrf_modem_trace_irq_handler+0xc>
   33a10:	f7f2 f804 	bl	25a1c <nrf_modem_os_trace_irq_clear>
   33a14:	4b0e      	ldr	r3, [pc, #56]	; (33a50 <nrf_modem_trace_irq_handler+0x48>)
   33a16:	6818      	ldr	r0, [r3, #0]
   33a18:	6842      	ldr	r2, [r0, #4]
   33a1a:	6883      	ldr	r3, [r0, #8]
   33a1c:	429a      	cmp	r2, r3
   33a1e:	d001      	beq.n	33a24 <nrf_modem_trace_irq_handler+0x1c>
   33a20:	f7ff ff44 	bl	338ac <trace_write>
   33a24:	4b0b      	ldr	r3, [pc, #44]	; (33a54 <nrf_modem_trace_irq_handler+0x4c>)
   33a26:	6818      	ldr	r0, [r3, #0]
   33a28:	6882      	ldr	r2, [r0, #8]
   33a2a:	6843      	ldr	r3, [r0, #4]
   33a2c:	429a      	cmp	r2, r3
   33a2e:	d001      	beq.n	33a34 <nrf_modem_trace_irq_handler+0x2c>
   33a30:	f7ff ff3c 	bl	338ac <trace_write>
   33a34:	4b08      	ldr	r3, [pc, #32]	; (33a58 <nrf_modem_trace_irq_handler+0x50>)
   33a36:	6818      	ldr	r0, [r3, #0]
   33a38:	6882      	ldr	r2, [r0, #8]
   33a3a:	6843      	ldr	r3, [r0, #4]
   33a3c:	429a      	cmp	r2, r3
   33a3e:	d003      	beq.n	33a48 <nrf_modem_trace_irq_handler+0x40>
   33a40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   33a44:	f7ff bf32 	b.w	338ac <trace_write>
   33a48:	bd08      	pop	{r3, pc}
   33a4a:	bf00      	nop
   33a4c:	2001d3bb 	.word	0x2001d3bb
   33a50:	2001a47c 	.word	0x2001a47c
   33a54:	2001a474 	.word	0x2001a474
   33a58:	2001a478 	.word	0x2001a478

00033a5c <ipc_trace_handle>:
   33a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33a60:	4b55      	ldr	r3, [pc, #340]	; (33bb8 <ipc_trace_handle+0x15c>)
   33a62:	681b      	ldr	r3, [r3, #0]
   33a64:	6919      	ldr	r1, [r3, #16]
   33a66:	f8d3 b014 	ldr.w	fp, [r3, #20]
   33a6a:	7c1a      	ldrb	r2, [r3, #16]
   33a6c:	2200      	movs	r2, #0
   33a6e:	741a      	strb	r2, [r3, #16]
   33a70:	7c58      	ldrb	r0, [r3, #17]
   33a72:	745a      	strb	r2, [r3, #17]
   33a74:	7c98      	ldrb	r0, [r3, #18]
   33a76:	749a      	strb	r2, [r3, #18]
   33a78:	7cd8      	ldrb	r0, [r3, #19]
   33a7a:	74da      	strb	r2, [r3, #19]
   33a7c:	7d18      	ldrb	r0, [r3, #20]
   33a7e:	751a      	strb	r2, [r3, #20]
   33a80:	7d58      	ldrb	r0, [r3, #21]
   33a82:	755a      	strb	r2, [r3, #21]
   33a84:	7d98      	ldrb	r0, [r3, #22]
   33a86:	759a      	strb	r2, [r3, #22]
   33a88:	7dd8      	ldrb	r0, [r3, #23]
   33a8a:	75da      	strb	r2, [r3, #23]
   33a8c:	2900      	cmp	r1, #0
   33a8e:	d047      	beq.n	33b20 <ipc_trace_handle+0xc4>
   33a90:	3901      	subs	r1, #1
   33a92:	2903      	cmp	r1, #3
   33a94:	d844      	bhi.n	33b20 <ipc_trace_handle+0xc4>
   33a96:	e8df f001 	tbb	[pc, r1]
   33a9a:	7b02      	.short	0x7b02
   33a9c:	6962      	.short	0x6962
   33a9e:	4a47      	ldr	r2, [pc, #284]	; (33bbc <ipc_trace_handle+0x160>)
   33aa0:	7811      	ldrb	r1, [r2, #0]
   33aa2:	b109      	cbz	r1, 33aa8 <ipc_trace_handle+0x4c>
   33aa4:	2100      	movs	r1, #0
   33aa6:	7011      	strb	r1, [r2, #0]
   33aa8:	2100      	movs	r1, #0
   33aaa:	468e      	mov	lr, r1
   33aac:	468a      	mov	sl, r1
   33aae:	4608      	mov	r0, r1
   33ab0:	f8db 2008 	ldr.w	r2, [fp, #8]
   33ab4:	4d42      	ldr	r5, [pc, #264]	; (33bc0 <ipc_trace_handle+0x164>)
   33ab6:	9201      	str	r2, [sp, #4]
   33ab8:	4a42      	ldr	r2, [pc, #264]	; (33bc4 <ipc_trace_handle+0x168>)
   33aba:	682e      	ldr	r6, [r5, #0]
   33abc:	6812      	ldr	r2, [r2, #0]
   33abe:	9200      	str	r2, [sp, #0]
   33ac0:	4a41      	ldr	r2, [pc, #260]	; (33bc8 <ipc_trace_handle+0x16c>)
   33ac2:	f8d2 c000 	ldr.w	ip, [r2]
   33ac6:	4a41      	ldr	r2, [pc, #260]	; (33bcc <ipc_trace_handle+0x170>)
   33ac8:	6817      	ldr	r7, [r2, #0]
   33aca:	4a41      	ldr	r2, [pc, #260]	; (33bd0 <ipc_trace_handle+0x174>)
   33acc:	f8d2 9000 	ldr.w	r9, [r2]
   33ad0:	4a40      	ldr	r2, [pc, #256]	; (33bd4 <ipc_trace_handle+0x178>)
   33ad2:	f8d2 8000 	ldr.w	r8, [r2]
   33ad6:	9a01      	ldr	r2, [sp, #4]
   33ad8:	4282      	cmp	r2, r0
   33ada:	d124      	bne.n	33b26 <ipc_trace_handle+0xca>
   33adc:	f1ba 0f00 	cmp.w	sl, #0
   33ae0:	d005      	beq.n	33aee <ipc_trace_handle+0x92>
   33ae2:	4a3b      	ldr	r2, [pc, #236]	; (33bd0 <ipc_trace_handle+0x174>)
   33ae4:	f8c2 9000 	str.w	r9, [r2]
   33ae8:	4a3a      	ldr	r2, [pc, #232]	; (33bd4 <ipc_trace_handle+0x178>)
   33aea:	f8c2 8000 	str.w	r8, [r2]
   33aee:	f1be 0f00 	cmp.w	lr, #0
   33af2:	d004      	beq.n	33afe <ipc_trace_handle+0xa2>
   33af4:	4a34      	ldr	r2, [pc, #208]	; (33bc8 <ipc_trace_handle+0x16c>)
   33af6:	f8c2 c000 	str.w	ip, [r2]
   33afa:	4a34      	ldr	r2, [pc, #208]	; (33bcc <ipc_trace_handle+0x170>)
   33afc:	6017      	str	r7, [r2, #0]
   33afe:	b119      	cbz	r1, 33b08 <ipc_trace_handle+0xac>
   33b00:	4a30      	ldr	r2, [pc, #192]	; (33bc4 <ipc_trace_handle+0x168>)
   33b02:	9900      	ldr	r1, [sp, #0]
   33b04:	602e      	str	r6, [r5, #0]
   33b06:	6011      	str	r1, [r2, #0]
   33b08:	7a1a      	ldrb	r2, [r3, #8]
   33b0a:	2101      	movs	r1, #1
   33b0c:	2200      	movs	r2, #0
   33b0e:	7219      	strb	r1, [r3, #8]
   33b10:	7a59      	ldrb	r1, [r3, #9]
   33b12:	725a      	strb	r2, [r3, #9]
   33b14:	7a99      	ldrb	r1, [r3, #10]
   33b16:	729a      	strb	r2, [r3, #10]
   33b18:	7ada      	ldrb	r2, [r3, #11]
   33b1a:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   33b1e:	72da      	strb	r2, [r3, #11]
   33b20:	b003      	add	sp, #12
   33b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33b26:	1c82      	adds	r2, r0, #2
   33b28:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
   33b2c:	6852      	ldr	r2, [r2, #4]
   33b2e:	7814      	ldrb	r4, [r2, #0]
   33b30:	2c62      	cmp	r4, #98	; 0x62
   33b32:	d00a      	beq.n	33b4a <ipc_trace_handle+0xee>
   33b34:	2c63      	cmp	r4, #99	; 0x63
   33b36:	d00d      	beq.n	33b54 <ipc_trace_handle+0xf8>
   33b38:	2c61      	cmp	r4, #97	; 0x61
   33b3a:	d104      	bne.n	33b46 <ipc_trace_handle+0xea>
   33b3c:	4691      	mov	r9, r2
   33b3e:	f04f 0a01 	mov.w	sl, #1
   33b42:	f8d2 8004 	ldr.w	r8, [r2, #4]
   33b46:	3001      	adds	r0, #1
   33b48:	e7c5      	b.n	33ad6 <ipc_trace_handle+0x7a>
   33b4a:	4694      	mov	ip, r2
   33b4c:	f04f 0e01 	mov.w	lr, #1
   33b50:	6857      	ldr	r7, [r2, #4]
   33b52:	e7f8      	b.n	33b46 <ipc_trace_handle+0xea>
   33b54:	6851      	ldr	r1, [r2, #4]
   33b56:	4616      	mov	r6, r2
   33b58:	9100      	str	r1, [sp, #0]
   33b5a:	2101      	movs	r1, #1
   33b5c:	e7f3      	b.n	33b46 <ipc_trace_handle+0xea>
   33b5e:	2101      	movs	r1, #1
   33b60:	4a16      	ldr	r2, [pc, #88]	; (33bbc <ipc_trace_handle+0x160>)
   33b62:	7011      	strb	r1, [r2, #0]
   33b64:	7a1a      	ldrb	r2, [r3, #8]
   33b66:	2103      	movs	r1, #3
   33b68:	2200      	movs	r2, #0
   33b6a:	e7d0      	b.n	33b0e <ipc_trace_handle+0xb2>
   33b6c:	7a19      	ldrb	r1, [r3, #8]
   33b6e:	2104      	movs	r1, #4
   33b70:	7219      	strb	r1, [r3, #8]
   33b72:	7a59      	ldrb	r1, [r3, #9]
   33b74:	725a      	strb	r2, [r3, #9]
   33b76:	7a99      	ldrb	r1, [r3, #10]
   33b78:	729a      	strb	r2, [r3, #10]
   33b7a:	7ad9      	ldrb	r1, [r3, #11]
   33b7c:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   33b80:	72d9      	strb	r1, [r3, #11]
   33b82:	4b0e      	ldr	r3, [pc, #56]	; (33bbc <ipc_trace_handle+0x160>)
   33b84:	701a      	strb	r2, [r3, #0]
   33b86:	b003      	add	sp, #12
   33b88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33b8c:	f7ff bf3c 	b.w	33a08 <nrf_modem_trace_irq_handler>
   33b90:	4b0f      	ldr	r3, [pc, #60]	; (33bd0 <ipc_trace_handle+0x174>)
   33b92:	681b      	ldr	r3, [r3, #0]
   33b94:	685a      	ldr	r2, [r3, #4]
   33b96:	4b0f      	ldr	r3, [pc, #60]	; (33bd4 <ipc_trace_handle+0x178>)
   33b98:	601a      	str	r2, [r3, #0]
   33b9a:	4b0b      	ldr	r3, [pc, #44]	; (33bc8 <ipc_trace_handle+0x16c>)
   33b9c:	681b      	ldr	r3, [r3, #0]
   33b9e:	685a      	ldr	r2, [r3, #4]
   33ba0:	4b0a      	ldr	r3, [pc, #40]	; (33bcc <ipc_trace_handle+0x170>)
   33ba2:	601a      	str	r2, [r3, #0]
   33ba4:	4b06      	ldr	r3, [pc, #24]	; (33bc0 <ipc_trace_handle+0x164>)
   33ba6:	681b      	ldr	r3, [r3, #0]
   33ba8:	685a      	ldr	r2, [r3, #4]
   33baa:	4b06      	ldr	r3, [pc, #24]	; (33bc4 <ipc_trace_handle+0x168>)
   33bac:	601a      	str	r2, [r3, #0]
   33bae:	b003      	add	sp, #12
   33bb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33bb4:	f7f1 bf2a 	b.w	25a0c <nrf_modem_os_trace_irq_set>
   33bb8:	2001a480 	.word	0x2001a480
   33bbc:	2001d3bb 	.word	0x2001d3bb
   33bc0:	2001a478 	.word	0x2001a478
   33bc4:	2001a46c 	.word	0x2001a46c
   33bc8:	2001a474 	.word	0x2001a474
   33bcc:	2001a468 	.word	0x2001a468
   33bd0:	2001a47c 	.word	0x2001a47c
   33bd4:	2001a470 	.word	0x2001a470

00033bd8 <rpc_trace_coredump_in_progress>:
   33bd8:	4b01      	ldr	r3, [pc, #4]	; (33be0 <rpc_trace_coredump_in_progress+0x8>)
   33bda:	7818      	ldrb	r0, [r3, #0]
   33bdc:	4770      	bx	lr
   33bde:	bf00      	nop
   33be0:	2001d3bb 	.word	0x2001d3bb

00033be4 <rpc_transport_ipc_msg_alloc>:
   33be4:	b570      	push	{r4, r5, r6, lr}
   33be6:	4616      	mov	r6, r2
   33be8:	2400      	movs	r4, #0
   33bea:	6803      	ldr	r3, [r0, #0]
   33bec:	42a3      	cmp	r3, r4
   33bee:	d101      	bne.n	33bf4 <rpc_transport_ipc_msg_alloc+0x10>
   33bf0:	2300      	movs	r3, #0
   33bf2:	e01c      	b.n	33c2e <rpc_transport_ipc_msg_alloc+0x4a>
   33bf4:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   33bf8:	6855      	ldr	r5, [r2, #4]
   33bfa:	b2ed      	uxtb	r5, r5
   33bfc:	2d03      	cmp	r5, #3
   33bfe:	d118      	bne.n	33c32 <rpc_transport_ipc_msg_alloc+0x4e>
   33c00:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   33c04:	6093      	str	r3, [r2, #8]
   33c06:	6851      	ldr	r1, [r2, #4]
   33c08:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   33c0c:	6051      	str	r1, [r2, #4]
   33c0e:	490c      	ldr	r1, [pc, #48]	; (33c40 <rpc_transport_ipc_msg_alloc+0x5c>)
   33c10:	8808      	ldrh	r0, [r1, #0]
   33c12:	1c44      	adds	r4, r0, #1
   33c14:	800c      	strh	r4, [r1, #0]
   33c16:	6851      	ldr	r1, [r2, #4]
   33c18:	b289      	uxth	r1, r1
   33c1a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   33c1e:	6051      	str	r1, [r2, #4]
   33c20:	4618      	mov	r0, r3
   33c22:	2240      	movs	r2, #64	; 0x40
   33c24:	2100      	movs	r1, #0
   33c26:	f00d fc05 	bl	41434 <memset>
   33c2a:	4603      	mov	r3, r0
   33c2c:	6046      	str	r6, [r0, #4]
   33c2e:	4618      	mov	r0, r3
   33c30:	bd70      	pop	{r4, r5, r6, pc}
   33c32:	b915      	cbnz	r5, 33c3a <rpc_transport_ipc_msg_alloc+0x56>
   33c34:	6895      	ldr	r5, [r2, #8]
   33c36:	2d00      	cmp	r5, #0
   33c38:	d0e2      	beq.n	33c00 <rpc_transport_ipc_msg_alloc+0x1c>
   33c3a:	3401      	adds	r4, #1
   33c3c:	e7d6      	b.n	33bec <rpc_transport_ipc_msg_alloc+0x8>
   33c3e:	bf00      	nop
   33c40:	2001a59c 	.word	0x2001a59c

00033c44 <handle_modem_rpc_msg.part.0>:
   33c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33c48:	4606      	mov	r6, r0
   33c4a:	460f      	mov	r7, r1
   33c4c:	2500      	movs	r5, #0
   33c4e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 33cc4 <handle_modem_rpc_msg.part.0+0x80>
   33c52:	6833      	ldr	r3, [r6, #0]
   33c54:	429d      	cmp	r5, r3
   33c56:	d301      	bcc.n	33c5c <handle_modem_rpc_msg.part.0+0x18>
   33c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33c5c:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   33c60:	68a3      	ldr	r3, [r4, #8]
   33c62:	b1fb      	cbz	r3, 33ca4 <handle_modem_rpc_msg.part.0+0x60>
   33c64:	6863      	ldr	r3, [r4, #4]
   33c66:	b2db      	uxtb	r3, r3
   33c68:	2b01      	cmp	r3, #1
   33c6a:	d11b      	bne.n	33ca4 <handle_modem_rpc_msg.part.0+0x60>
   33c6c:	6862      	ldr	r2, [r4, #4]
   33c6e:	f8b8 3000 	ldrh.w	r3, [r8]
   33c72:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   33c76:	d115      	bne.n	33ca4 <handle_modem_rpc_msg.part.0+0x60>
   33c78:	2f02      	cmp	r7, #2
   33c7a:	68a0      	ldr	r0, [r4, #8]
   33c7c:	d114      	bne.n	33ca8 <handle_modem_rpc_msg.part.0+0x64>
   33c7e:	f7ff fdf3 	bl	33868 <rpc_handle_data_message>
   33c82:	2802      	cmp	r0, #2
   33c84:	d00e      	beq.n	33ca4 <handle_modem_rpc_msg.part.0+0x60>
   33c86:	2801      	cmp	r0, #1
   33c88:	d113      	bne.n	33cb2 <handle_modem_rpc_msg.part.0+0x6e>
   33c8a:	6863      	ldr	r3, [r4, #4]
   33c8c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33c90:	f043 0302 	orr.w	r3, r3, #2
   33c94:	6063      	str	r3, [r4, #4]
   33c96:	f8b8 3000 	ldrh.w	r3, [r8]
   33c9a:	3301      	adds	r3, #1
   33c9c:	f8a8 3000 	strh.w	r3, [r8]
   33ca0:	f7f1 fea4 	bl	259ec <nrf_modem_os_application_irq_set>
   33ca4:	3501      	adds	r5, #1
   33ca6:	e7d4      	b.n	33c52 <handle_modem_rpc_msg.part.0+0xe>
   33ca8:	6801      	ldr	r1, [r0, #0]
   33caa:	0c09      	lsrs	r1, r1, #16
   33cac:	f00c f93f 	bl	3ff2e <rpc_handle_ctrl_message>
   33cb0:	e7e7      	b.n	33c82 <handle_modem_rpc_msg.part.0+0x3e>
   33cb2:	2800      	cmp	r0, #0
   33cb4:	d1ef      	bne.n	33c96 <handle_modem_rpc_msg.part.0+0x52>
   33cb6:	6863      	ldr	r3, [r4, #4]
   33cb8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33cbc:	f043 0303 	orr.w	r3, r3, #3
   33cc0:	e7e8      	b.n	33c94 <handle_modem_rpc_msg.part.0+0x50>
   33cc2:	bf00      	nop
   33cc4:	2001a59a 	.word	0x2001a59a

00033cc8 <ipc_irq_handler>:
   33cc8:	b538      	push	{r3, r4, r5, lr}
   33cca:	4604      	mov	r4, r0
   33ccc:	0620      	lsls	r0, r4, #24
   33cce:	d50c      	bpl.n	33cea <ipc_irq_handler+0x22>
   33cd0:	f7ff fec4 	bl	33a5c <ipc_trace_handle>
   33cd4:	f7ff ff80 	bl	33bd8 <rpc_trace_coredump_in_progress>
   33cd8:	b138      	cbz	r0, 33cea <ipc_irq_handler+0x22>
   33cda:	22e0      	movs	r2, #224	; 0xe0
   33cdc:	4b37      	ldr	r3, [pc, #220]	; (33dbc <ipc_irq_handler+0xf4>)
   33cde:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   33ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   33ce6:	605a      	str	r2, [r3, #4]
   33ce8:	bd38      	pop	{r3, r4, r5, pc}
   33cea:	07e1      	lsls	r1, r4, #31
   33cec:	d539      	bpl.n	33d62 <ipc_irq_handler+0x9a>
   33cee:	2203      	movs	r2, #3
   33cf0:	4b33      	ldr	r3, [pc, #204]	; (33dc0 <ipc_irq_handler+0xf8>)
   33cf2:	701a      	strb	r2, [r3, #0]
   33cf4:	4b33      	ldr	r3, [pc, #204]	; (33dc4 <ipc_irq_handler+0xfc>)
   33cf6:	4a34      	ldr	r2, [pc, #208]	; (33dc8 <ipc_irq_handler+0x100>)
   33cf8:	f8d3 0614 	ldr.w	r0, [r3, #1556]	; 0x614
   33cfc:	4290      	cmp	r0, r2
   33cfe:	d02c      	beq.n	33d5a <ipc_irq_handler+0x92>
   33d00:	d80c      	bhi.n	33d1c <ipc_irq_handler+0x54>
   33d02:	3a02      	subs	r2, #2
   33d04:	4290      	cmp	r0, r2
   33d06:	d020      	beq.n	33d4a <ipc_irq_handler+0x82>
   33d08:	3201      	adds	r2, #1
   33d0a:	4290      	cmp	r0, r2
   33d0c:	d021      	beq.n	33d52 <ipc_irq_handler+0x8a>
   33d0e:	f8d3 1618 	ldr.w	r1, [r3, #1560]	; 0x618
   33d12:	f3c0 000b 	ubfx	r0, r0, #0, #12
   33d16:	f002 f893 	bl	35e40 <nrf_modem_fault_handler_internal>
   33d1a:	e012      	b.n	33d42 <ipc_irq_handler+0x7a>
   33d1c:	4a2b      	ldr	r2, [pc, #172]	; (33dcc <ipc_irq_handler+0x104>)
   33d1e:	4290      	cmp	r0, r2
   33d20:	d80a      	bhi.n	33d38 <ipc_irq_handler+0x70>
   33d22:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   33d26:	d80a      	bhi.n	33d3e <ipc_irq_handler+0x76>
   33d28:	4a29      	ldr	r2, [pc, #164]	; (33dd0 <ipc_irq_handler+0x108>)
   33d2a:	4290      	cmp	r0, r2
   33d2c:	d1ef      	bne.n	33d0e <ipc_irq_handler+0x46>
   33d2e:	f06f 0204 	mvn.w	r2, #4
   33d32:	4b28      	ldr	r3, [pc, #160]	; (33dd4 <ipc_irq_handler+0x10c>)
   33d34:	601a      	str	r2, [r3, #0]
   33d36:	e004      	b.n	33d42 <ipc_irq_handler+0x7a>
   33d38:	4a27      	ldr	r2, [pc, #156]	; (33dd8 <ipc_irq_handler+0x110>)
   33d3a:	4290      	cmp	r0, r2
   33d3c:	d1e7      	bne.n	33d0e <ipc_irq_handler+0x46>
   33d3e:	4b25      	ldr	r3, [pc, #148]	; (33dd4 <ipc_irq_handler+0x10c>)
   33d40:	6018      	str	r0, [r3, #0]
   33d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33d46:	f7f1 be71 	b.w	25a2c <nrf_modem_os_event_notify>
   33d4a:	f06f 0215 	mvn.w	r2, #21
   33d4e:	4b21      	ldr	r3, [pc, #132]	; (33dd4 <ipc_irq_handler+0x10c>)
   33d50:	e7f0      	b.n	33d34 <ipc_irq_handler+0x6c>
   33d52:	f06f 025e 	mvn.w	r2, #94	; 0x5e
   33d56:	4b1f      	ldr	r3, [pc, #124]	; (33dd4 <ipc_irq_handler+0x10c>)
   33d58:	e7ec      	b.n	33d34 <ipc_irq_handler+0x6c>
   33d5a:	f06f 020b 	mvn.w	r2, #11
   33d5e:	4b1d      	ldr	r3, [pc, #116]	; (33dd4 <ipc_irq_handler+0x10c>)
   33d60:	e7e8      	b.n	33d34 <ipc_irq_handler+0x6c>
   33d62:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   33d66:	d003      	beq.n	33d70 <ipc_irq_handler+0xa8>
   33d68:	2202      	movs	r2, #2
   33d6a:	4b15      	ldr	r3, [pc, #84]	; (33dc0 <ipc_irq_handler+0xf8>)
   33d6c:	701a      	strb	r2, [r3, #0]
   33d6e:	e7e8      	b.n	33d42 <ipc_irq_handler+0x7a>
   33d70:	0762      	lsls	r2, r4, #29
   33d72:	d504      	bpl.n	33d7e <ipc_irq_handler+0xb6>
   33d74:	4b12      	ldr	r3, [pc, #72]	; (33dc0 <ipc_irq_handler+0xf8>)
   33d76:	781a      	ldrb	r2, [r3, #0]
   33d78:	b93a      	cbnz	r2, 33d8a <ipc_irq_handler+0xc2>
   33d7a:	f7f1 fe37 	bl	259ec <nrf_modem_os_application_irq_set>
   33d7e:	06e3      	lsls	r3, r4, #27
   33d80:	d5b2      	bpl.n	33ce8 <ipc_irq_handler+0x20>
   33d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33d86:	f7f1 be31 	b.w	259ec <nrf_modem_os_application_irq_set>
   33d8a:	781a      	ldrb	r2, [r3, #0]
   33d8c:	2a01      	cmp	r2, #1
   33d8e:	d1f6      	bne.n	33d7e <ipc_irq_handler+0xb6>
   33d90:	4a12      	ldr	r2, [pc, #72]	; (33ddc <ipc_irq_handler+0x114>)
   33d92:	4813      	ldr	r0, [pc, #76]	; (33de0 <ipc_irq_handler+0x118>)
   33d94:	6812      	ldr	r2, [r2, #0]
   33d96:	6891      	ldr	r1, [r2, #8]
   33d98:	6041      	str	r1, [r0, #4]
   33d9a:	6852      	ldr	r2, [r2, #4]
   33d9c:	6002      	str	r2, [r0, #0]
   33d9e:	b121      	cbz	r1, 33daa <ipc_irq_handler+0xe2>
   33da0:	b11a      	cbz	r2, 33daa <ipc_irq_handler+0xe2>
   33da2:	6809      	ldr	r1, [r1, #0]
   33da4:	b109      	cbz	r1, 33daa <ipc_irq_handler+0xe2>
   33da6:	6812      	ldr	r2, [r2, #0]
   33da8:	b932      	cbnz	r2, 33db8 <ipc_irq_handler+0xf0>
   33daa:	f06f 0104 	mvn.w	r1, #4
   33dae:	4a09      	ldr	r2, [pc, #36]	; (33dd4 <ipc_irq_handler+0x10c>)
   33db0:	6011      	str	r1, [r2, #0]
   33db2:	2203      	movs	r2, #3
   33db4:	701a      	strb	r2, [r3, #0]
   33db6:	e7e2      	b.n	33d7e <ipc_irq_handler+0xb6>
   33db8:	701d      	strb	r5, [r3, #0]
   33dba:	e7e0      	b.n	33d7e <ipc_irq_handler+0xb6>
   33dbc:	e000e100 	.word	0xe000e100
   33dc0:	2001d3bc 	.word	0x2001d3bc
   33dc4:	4002a000 	.word	0x4002a000
   33dc8:	00010022 	.word	0x00010022
   33dcc:	04400004 	.word	0x04400004
   33dd0:	00013032 	.word	0x00013032
   33dd4:	2001a484 	.word	0x2001a484
   33dd8:	05500001 	.word	0x05500001
   33ddc:	2001a490 	.word	0x2001a490
   33de0:	2001a488 	.word	0x2001a488

00033de4 <rpc_transport_ipc_data_msg_send>:
   33de4:	b508      	push	{r3, lr}
   33de6:	4b0b      	ldr	r3, [pc, #44]	; (33e14 <rpc_transport_ipc_data_msg_send+0x30>)
   33de8:	681b      	ldr	r3, [r3, #0]
   33dea:	1ac0      	subs	r0, r0, r3
   33dec:	4b0a      	ldr	r3, [pc, #40]	; (33e18 <rpc_transport_ipc_data_msg_send+0x34>)
   33dee:	f3c0 1089 	ubfx	r0, r0, #6, #10
   33df2:	681b      	ldr	r3, [r3, #0]
   33df4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   33df8:	6843      	ldr	r3, [r0, #4]
   33dfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33dfe:	f043 0301 	orr.w	r3, r3, #1
   33e02:	6043      	str	r3, [r0, #4]
   33e04:	2003      	movs	r0, #3
   33e06:	f00a ff82 	bl	3ed0e <nrf_modem_os_busywait>
   33e0a:	2201      	movs	r2, #1
   33e0c:	4b03      	ldr	r3, [pc, #12]	; (33e1c <rpc_transport_ipc_data_msg_send+0x38>)
   33e0e:	60da      	str	r2, [r3, #12]
   33e10:	bd08      	pop	{r3, pc}
   33e12:	bf00      	nop
   33e14:	2001a49c 	.word	0x2001a49c
   33e18:	2001a4a0 	.word	0x2001a4a0
   33e1c:	4002a000 	.word	0x4002a000

00033e20 <rpc_transport_ipc_ctrl_msg_send>:
   33e20:	b508      	push	{r3, lr}
   33e22:	4b0b      	ldr	r3, [pc, #44]	; (33e50 <rpc_transport_ipc_ctrl_msg_send+0x30>)
   33e24:	681b      	ldr	r3, [r3, #0]
   33e26:	1ac0      	subs	r0, r0, r3
   33e28:	4b0a      	ldr	r3, [pc, #40]	; (33e54 <rpc_transport_ipc_ctrl_msg_send+0x34>)
   33e2a:	f3c0 1089 	ubfx	r0, r0, #6, #10
   33e2e:	681b      	ldr	r3, [r3, #0]
   33e30:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   33e34:	6843      	ldr	r3, [r0, #4]
   33e36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33e3a:	f043 0301 	orr.w	r3, r3, #1
   33e3e:	6043      	str	r3, [r0, #4]
   33e40:	2003      	movs	r0, #3
   33e42:	f00a ff64 	bl	3ed0e <nrf_modem_os_busywait>
   33e46:	2201      	movs	r2, #1
   33e48:	4b03      	ldr	r3, [pc, #12]	; (33e58 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   33e4a:	605a      	str	r2, [r3, #4]
   33e4c:	bd08      	pop	{r3, pc}
   33e4e:	bf00      	nop
   33e50:	2001a494 	.word	0x2001a494
   33e54:	2001a498 	.word	0x2001a498
   33e58:	4002a000 	.word	0x4002a000

00033e5c <rpc_transport_ipc_data_msg_alloc>:
   33e5c:	4b05      	ldr	r3, [pc, #20]	; (33e74 <rpc_transport_ipc_data_msg_alloc+0x18>)
   33e5e:	781b      	ldrb	r3, [r3, #0]
   33e60:	b933      	cbnz	r3, 33e70 <rpc_transport_ipc_data_msg_alloc+0x14>
   33e62:	4b05      	ldr	r3, [pc, #20]	; (33e78 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   33e64:	2202      	movs	r2, #2
   33e66:	6819      	ldr	r1, [r3, #0]
   33e68:	4b04      	ldr	r3, [pc, #16]	; (33e7c <rpc_transport_ipc_data_msg_alloc+0x20>)
   33e6a:	6818      	ldr	r0, [r3, #0]
   33e6c:	f7ff beba 	b.w	33be4 <rpc_transport_ipc_msg_alloc>
   33e70:	2000      	movs	r0, #0
   33e72:	4770      	bx	lr
   33e74:	2001d3bd 	.word	0x2001d3bd
   33e78:	2001a49c 	.word	0x2001a49c
   33e7c:	2001a4a0 	.word	0x2001a4a0

00033e80 <rpc_transport_ipc_ctrl_msg_alloc>:
   33e80:	230a      	movs	r3, #10
   33e82:	b573      	push	{r0, r1, r4, r5, r6, lr}
   33e84:	4d0d      	ldr	r5, [pc, #52]	; (33ebc <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   33e86:	4e0e      	ldr	r6, [pc, #56]	; (33ec0 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   33e88:	9301      	str	r3, [sp, #4]
   33e8a:	2201      	movs	r2, #1
   33e8c:	6829      	ldr	r1, [r5, #0]
   33e8e:	6830      	ldr	r0, [r6, #0]
   33e90:	f7ff fea8 	bl	33be4 <rpc_transport_ipc_msg_alloc>
   33e94:	4604      	mov	r4, r0
   33e96:	b938      	cbnz	r0, 33ea8 <rpc_transport_ipc_ctrl_msg_alloc+0x28>
   33e98:	f00a ff3b 	bl	3ed12 <nrf_modem_os_is_in_isr>
   33e9c:	b938      	cbnz	r0, 33eae <rpc_transport_ipc_ctrl_msg_alloc+0x2e>
   33e9e:	a901      	add	r1, sp, #4
   33ea0:	f7f1 fc3c 	bl	2571c <nrf_modem_os_timedwait>
   33ea4:	306e      	adds	r0, #110	; 0x6e
   33ea6:	d1f0      	bne.n	33e8a <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   33ea8:	4620      	mov	r0, r4
   33eaa:	b002      	add	sp, #8
   33eac:	bd70      	pop	{r4, r5, r6, pc}
   33eae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   33eb2:	9b01      	ldr	r3, [sp, #4]
   33eb4:	4358      	muls	r0, r3
   33eb6:	f00a ff2a 	bl	3ed0e <nrf_modem_os_busywait>
   33eba:	e7e6      	b.n	33e8a <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   33ebc:	2001a494 	.word	0x2001a494
   33ec0:	2001a498 	.word	0x2001a498

00033ec4 <rpc_transport_ipc_data_alloc>:
   33ec4:	4b03      	ldr	r3, [pc, #12]	; (33ed4 <rpc_transport_ipc_data_alloc+0x10>)
   33ec6:	781b      	ldrb	r3, [r3, #0]
   33ec8:	b90b      	cbnz	r3, 33ece <rpc_transport_ipc_data_alloc+0xa>
   33eca:	f7f1 bde1 	b.w	25a90 <nrf_modem_os_shm_tx_alloc>
   33ece:	2000      	movs	r0, #0
   33ed0:	4770      	bx	lr
   33ed2:	bf00      	nop
   33ed4:	2001d3bd 	.word	0x2001d3bd

00033ed8 <nrf_modem_application_irq_handler>:
   33ed8:	b510      	push	{r4, lr}
   33eda:	4c08      	ldr	r4, [pc, #32]	; (33efc <nrf_modem_application_irq_handler+0x24>)
   33edc:	f7f1 fd8e 	bl	259fc <nrf_modem_os_application_irq_clear>
   33ee0:	6820      	ldr	r0, [r4, #0]
   33ee2:	b110      	cbz	r0, 33eea <nrf_modem_application_irq_handler+0x12>
   33ee4:	2101      	movs	r1, #1
   33ee6:	f7ff fead 	bl	33c44 <handle_modem_rpc_msg.part.0>
   33eea:	6860      	ldr	r0, [r4, #4]
   33eec:	b120      	cbz	r0, 33ef8 <nrf_modem_application_irq_handler+0x20>
   33eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33ef2:	2102      	movs	r1, #2
   33ef4:	f7ff bea6 	b.w	33c44 <handle_modem_rpc_msg.part.0>
   33ef8:	bd10      	pop	{r4, pc}
   33efa:	bf00      	nop
   33efc:	2001a488 	.word	0x2001a488

00033f00 <rpc_transport_ipc_msg_free>:
   33f00:	2300      	movs	r3, #0
   33f02:	4911      	ldr	r1, [pc, #68]	; (33f48 <rpc_transport_ipc_msg_free+0x48>)
   33f04:	b530      	push	{r4, r5, lr}
   33f06:	680a      	ldr	r2, [r1, #0]
   33f08:	6814      	ldr	r4, [r2, #0]
   33f0a:	42a3      	cmp	r3, r4
   33f0c:	d10b      	bne.n	33f26 <rpc_transport_ipc_msg_free+0x26>
   33f0e:	2300      	movs	r3, #0
   33f10:	684a      	ldr	r2, [r1, #4]
   33f12:	6811      	ldr	r1, [r2, #0]
   33f14:	428b      	cmp	r3, r1
   33f16:	d015      	beq.n	33f44 <rpc_transport_ipc_msg_free+0x44>
   33f18:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   33f1c:	68a4      	ldr	r4, [r4, #8]
   33f1e:	42a0      	cmp	r0, r4
   33f20:	d008      	beq.n	33f34 <rpc_transport_ipc_msg_free+0x34>
   33f22:	3301      	adds	r3, #1
   33f24:	e7f6      	b.n	33f14 <rpc_transport_ipc_msg_free+0x14>
   33f26:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   33f2a:	68ad      	ldr	r5, [r5, #8]
   33f2c:	42a8      	cmp	r0, r5
   33f2e:	d001      	beq.n	33f34 <rpc_transport_ipc_msg_free+0x34>
   33f30:	3301      	adds	r3, #1
   33f32:	e7ea      	b.n	33f0a <rpc_transport_ipc_msg_free+0xa>
   33f34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   33f38:	685a      	ldr	r2, [r3, #4]
   33f3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   33f3e:	f042 0203 	orr.w	r2, r2, #3
   33f42:	605a      	str	r2, [r3, #4]
   33f44:	bd30      	pop	{r4, r5, pc}
   33f46:	bf00      	nop
   33f48:	2001a488 	.word	0x2001a488

00033f4c <rpc_transport_ipc_peer_data_free>:
   33f4c:	b510      	push	{r4, lr}
   33f4e:	4b0b      	ldr	r3, [pc, #44]	; (33f7c <rpc_transport_ipc_peer_data_free+0x30>)
   33f50:	4604      	mov	r4, r0
   33f52:	781b      	ldrb	r3, [r3, #0]
   33f54:	2b03      	cmp	r3, #3
   33f56:	d010      	beq.n	33f7a <rpc_transport_ipc_peer_data_free+0x2e>
   33f58:	f7ff ff92 	bl	33e80 <rpc_transport_ipc_ctrl_msg_alloc>
   33f5c:	b168      	cbz	r0, 33f7a <rpc_transport_ipc_peer_data_free+0x2e>
   33f5e:	2101      	movs	r1, #1
   33f60:	2200      	movs	r2, #0
   33f62:	7001      	strb	r1, [r0, #0]
   33f64:	2102      	movs	r1, #2
   33f66:	6084      	str	r4, [r0, #8]
   33f68:	7042      	strb	r2, [r0, #1]
   33f6a:	7081      	strb	r1, [r0, #2]
   33f6c:	70c2      	strb	r2, [r0, #3]
   33f6e:	f7ff ff57 	bl	33e20 <rpc_transport_ipc_ctrl_msg_send>
   33f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33f76:	f7f1 bd39 	b.w	259ec <nrf_modem_os_application_irq_set>
   33f7a:	bd10      	pop	{r4, pc}
   33f7c:	2001d3bc 	.word	0x2001d3bc

00033f80 <rpc_transport_ipc_init>:
   33f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33f84:	2200      	movs	r2, #0
   33f86:	b095      	sub	sp, #84	; 0x54
   33f88:	4605      	mov	r5, r0
   33f8a:	4957      	ldr	r1, [pc, #348]	; (340e8 <rpc_transport_ipc_init+0x168>)
   33f8c:	7900      	ldrb	r0, [r0, #4]
   33f8e:	f7fe fe51 	bl	32c34 <nrfx_ipc_init>
   33f92:	2238      	movs	r2, #56	; 0x38
   33f94:	2100      	movs	r1, #0
   33f96:	a803      	add	r0, sp, #12
   33f98:	f00d fa4c 	bl	41434 <memset>
   33f9c:	2302      	movs	r3, #2
   33f9e:	9304      	str	r3, [sp, #16]
   33fa0:	2308      	movs	r3, #8
   33fa2:	9306      	str	r3, [sp, #24]
   33fa4:	2320      	movs	r3, #32
   33fa6:	9308      	str	r3, [sp, #32]
   33fa8:	2301      	movs	r3, #1
   33faa:	930b      	str	r3, [sp, #44]	; 0x2c
   33fac:	2304      	movs	r3, #4
   33fae:	930d      	str	r3, [sp, #52]	; 0x34
   33fb0:	2310      	movs	r3, #16
   33fb2:	f04f 0c40 	mov.w	ip, #64	; 0x40
   33fb6:	930f      	str	r3, [sp, #60]	; 0x3c
   33fb8:	2380      	movs	r3, #128	; 0x80
   33fba:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   33fbe:	23d5      	movs	r3, #213	; 0xd5
   33fc0:	a803      	add	r0, sp, #12
   33fc2:	9313      	str	r3, [sp, #76]	; 0x4c
   33fc4:	f7fe fe5c 	bl	32c80 <nrfx_ipc_config_load>
   33fc8:	6828      	ldr	r0, [r5, #0]
   33fca:	6842      	ldr	r2, [r0, #4]
   33fcc:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   33fd0:	f040 8085 	bne.w	340de <rpc_transport_ipc_init+0x15e>
   33fd4:	6941      	ldr	r1, [r0, #20]
   33fd6:	68c3      	ldr	r3, [r0, #12]
   33fd8:	440b      	add	r3, r1
   33fda:	69c1      	ldr	r1, [r0, #28]
   33fdc:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   33fe0:	440b      	add	r3, r1
   33fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   33fe6:	d87a      	bhi.n	340de <rpc_transport_ipc_init+0x15e>
   33fe8:	2100      	movs	r1, #0
   33fea:	6800      	ldr	r0, [r0, #0]
   33fec:	f00d fa22 	bl	41434 <memset>
   33ff0:	682a      	ldr	r2, [r5, #0]
   33ff2:	6814      	ldr	r4, [r2, #0]
   33ff4:	69d3      	ldr	r3, [r2, #28]
   33ff6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   33ffa:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   33ffe:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   34002:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   34006:	f104 0920 	add.w	r9, r4, #32
   3400a:	2b00      	cmp	r3, #0
   3400c:	d05c      	beq.n	340c8 <rpc_transport_ipc_init+0x148>
   3400e:	f104 0840 	add.w	r8, r4, #64	; 0x40
   34012:	4936      	ldr	r1, [pc, #216]	; (340ec <rpc_transport_ipc_init+0x16c>)
   34014:	f8c1 9000 	str.w	r9, [r1]
   34018:	b13b      	cbz	r3, 3402a <rpc_transport_ipc_init+0xaa>
   3401a:	6992      	ldr	r2, [r2, #24]
   3401c:	4640      	mov	r0, r8
   3401e:	f8c8 2004 	str.w	r2, [r8, #4]
   34022:	f8c8 3000 	str.w	r3, [r8]
   34026:	f7ff fcdd 	bl	339e4 <ipc_trace_init>
   3402a:	6828      	ldr	r0, [r5, #0]
   3402c:	2300      	movs	r3, #0
   3402e:	6902      	ldr	r2, [r0, #16]
   34030:	2101      	movs	r1, #1
   34032:	6062      	str	r2, [r4, #4]
   34034:	6942      	ldr	r2, [r0, #20]
   34036:	7023      	strb	r3, [r4, #0]
   34038:	60a2      	str	r2, [r4, #8]
   3403a:	4a2d      	ldr	r2, [pc, #180]	; (340f0 <rpc_transport_ipc_init+0x170>)
   3403c:	60e6      	str	r6, [r4, #12]
   3403e:	6017      	str	r7, [r2, #0]
   34040:	4a2c      	ldr	r2, [pc, #176]	; (340f4 <rpc_transport_ipc_init+0x174>)
   34042:	6127      	str	r7, [r4, #16]
   34044:	6016      	str	r6, [r2, #0]
   34046:	2208      	movs	r2, #8
   34048:	7063      	strb	r3, [r4, #1]
   3404a:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   3404e:	70a1      	strb	r1, [r4, #2]
   34050:	70e3      	strb	r3, [r4, #3]
   34052:	f8c4 9014 	str.w	r9, [r4, #20]
   34056:	f8c4 8018 	str.w	r8, [r4, #24]
   3405a:	707b      	strb	r3, [r7, #1]
   3405c:	70bb      	strb	r3, [r7, #2]
   3405e:	70fb      	strb	r3, [r7, #3]
   34060:	270a      	movs	r7, #10
   34062:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   34066:	4a24      	ldr	r2, [pc, #144]	; (340f8 <rpc_transport_ipc_init+0x178>)
   34068:	7073      	strb	r3, [r6, #1]
   3406a:	f8c2 b000 	str.w	fp, [r2]
   3406e:	4a23      	ldr	r2, [pc, #140]	; (340fc <rpc_transport_ipc_init+0x17c>)
   34070:	70b3      	strb	r3, [r6, #2]
   34072:	f8c2 a000 	str.w	sl, [r2]
   34076:	4a22      	ldr	r2, [pc, #136]	; (34100 <rpc_transport_ipc_init+0x180>)
   34078:	70f3      	strb	r3, [r6, #3]
   3407a:	4d22      	ldr	r5, [pc, #136]	; (34104 <rpc_transport_ipc_init+0x184>)
   3407c:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   34080:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   34084:	4c20      	ldr	r4, [pc, #128]	; (34108 <rpc_transport_ipc_init+0x188>)
   34086:	4a21      	ldr	r2, [pc, #132]	; (3410c <rpc_transport_ipc_init+0x18c>)
   34088:	7021      	strb	r1, [r4, #0]
   3408a:	602b      	str	r3, [r5, #0]
   3408c:	9302      	str	r3, [sp, #8]
   3408e:	6113      	str	r3, [r2, #16]
   34090:	6913      	ldr	r3, [r2, #16]
   34092:	4e1f      	ldr	r6, [pc, #124]	; (34110 <rpc_transport_ipc_init+0x190>)
   34094:	9302      	str	r3, [sp, #8]
   34096:	9b02      	ldr	r3, [sp, #8]
   34098:	7823      	ldrb	r3, [r4, #0]
   3409a:	2b01      	cmp	r3, #1
   3409c:	d100      	bne.n	340a0 <rpc_transport_ipc_init+0x120>
   3409e:	b9ae      	cbnz	r6, 340cc <rpc_transport_ipc_init+0x14c>
   340a0:	7823      	ldrb	r3, [r4, #0]
   340a2:	2b01      	cmp	r3, #1
   340a4:	bf01      	itttt	eq
   340a6:	f06f 0373 	mvneq.w	r3, #115	; 0x73
   340aa:	602b      	streq	r3, [r5, #0]
   340ac:	2303      	moveq	r3, #3
   340ae:	7023      	strbeq	r3, [r4, #0]
   340b0:	682c      	ldr	r4, [r5, #0]
   340b2:	b9b4      	cbnz	r4, 340e2 <rpc_transport_ipc_init+0x162>
   340b4:	4b17      	ldr	r3, [pc, #92]	; (34114 <rpc_transport_ipc_init+0x194>)
   340b6:	701c      	strb	r4, [r3, #0]
   340b8:	4b17      	ldr	r3, [pc, #92]	; (34118 <rpc_transport_ipc_init+0x198>)
   340ba:	801c      	strh	r4, [r3, #0]
   340bc:	4b17      	ldr	r3, [pc, #92]	; (3411c <rpc_transport_ipc_init+0x19c>)
   340be:	801c      	strh	r4, [r3, #0]
   340c0:	4620      	mov	r0, r4
   340c2:	b015      	add	sp, #84	; 0x54
   340c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   340c8:	4698      	mov	r8, r3
   340ca:	e7a2      	b.n	34012 <rpc_transport_ipc_init+0x92>
   340cc:	2000      	movs	r0, #0
   340ce:	a901      	add	r1, sp, #4
   340d0:	9701      	str	r7, [sp, #4]
   340d2:	f7f1 fb23 	bl	2571c <nrf_modem_os_timedwait>
   340d6:	9b01      	ldr	r3, [sp, #4]
   340d8:	3b0a      	subs	r3, #10
   340da:	441e      	add	r6, r3
   340dc:	e7dc      	b.n	34098 <rpc_transport_ipc_init+0x118>
   340de:	f06f 0415 	mvn.w	r4, #21
   340e2:	f7fe fe0b 	bl	32cfc <nrfx_ipc_uninit>
   340e6:	e7eb      	b.n	340c0 <rpc_transport_ipc_init+0x140>
   340e8:	00033cc9 	.word	0x00033cc9
   340ec:	2001a490 	.word	0x2001a490
   340f0:	2001a4a0 	.word	0x2001a4a0
   340f4:	2001a498 	.word	0x2001a498
   340f8:	2001a49c 	.word	0x2001a49c
   340fc:	2001a494 	.word	0x2001a494
   34100:	4002a000 	.word	0x4002a000
   34104:	2001a484 	.word	0x2001a484
   34108:	2001d3bc 	.word	0x2001d3bc
   3410c:	40005600 	.word	0x40005600
   34110:	000249f0 	.word	0x000249f0
   34114:	2001d3bd 	.word	0x2001d3bd
   34118:	2001a59c 	.word	0x2001a59c
   3411c:	2001a59a 	.word	0x2001a59a

00034120 <sock_init>:
   34120:	f44f 7240 	mov.w	r2, #768	; 0x300
   34124:	2100      	movs	r1, #0
   34126:	b508      	push	{r3, lr}
   34128:	4808      	ldr	r0, [pc, #32]	; (3414c <sock_init+0x2c>)
   3412a:	f00d f983 	bl	41434 <memset>
   3412e:	2100      	movs	r1, #0
   34130:	2208      	movs	r2, #8
   34132:	4b07      	ldr	r3, [pc, #28]	; (34150 <sock_init+0x30>)
   34134:	4807      	ldr	r0, [pc, #28]	; (34154 <sock_init+0x34>)
   34136:	7019      	strb	r1, [r3, #0]
   34138:	4b04      	ldr	r3, [pc, #16]	; (3414c <sock_init+0x2c>)
   3413a:	3a01      	subs	r2, #1
   3413c:	e9c3 0100 	strd	r0, r1, [r3]
   34140:	6099      	str	r1, [r3, #8]
   34142:	f103 0360 	add.w	r3, r3, #96	; 0x60
   34146:	d1f8      	bne.n	3413a <sock_init+0x1a>
   34148:	bd08      	pop	{r3, pc}
   3414a:	bf00      	nop
   3414c:	20014760 	.word	0x20014760
   34150:	2001d3be 	.word	0x2001d3be
   34154:	1badf11e 	.word	0x1badf11e

00034158 <sock_open>:
   34158:	2300      	movs	r3, #0
   3415a:	2060      	movs	r0, #96	; 0x60
   3415c:	b530      	push	{r4, r5, lr}
   3415e:	4a0d      	ldr	r2, [pc, #52]	; (34194 <sock_open+0x3c>)
   34160:	4c0d      	ldr	r4, [pc, #52]	; (34198 <sock_open+0x40>)
   34162:	fb00 f103 	mul.w	r1, r0, r3
   34166:	588d      	ldr	r5, [r1, r2]
   34168:	42a5      	cmp	r5, r4
   3416a:	d10e      	bne.n	3418a <sock_open+0x32>
   3416c:	f04f 33ff 	mov.w	r3, #4294967295
   34170:	1850      	adds	r0, r2, r1
   34172:	5053      	str	r3, [r2, r1]
   34174:	4a09      	ldr	r2, [pc, #36]	; (3419c <sock_open+0x44>)
   34176:	7f03      	ldrb	r3, [r0, #28]
   34178:	7812      	ldrb	r2, [r2, #0]
   3417a:	f362 1386 	bfi	r3, r2, #6, #1
   3417e:	7703      	strb	r3, [r0, #28]
   34180:	2302      	movs	r3, #2
   34182:	8783      	strh	r3, [r0, #60]	; 0x3c
   34184:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   34188:	bd30      	pop	{r4, r5, pc}
   3418a:	3301      	adds	r3, #1
   3418c:	2b08      	cmp	r3, #8
   3418e:	d1e8      	bne.n	34162 <sock_open+0xa>
   34190:	2000      	movs	r0, #0
   34192:	e7f9      	b.n	34188 <sock_open+0x30>
   34194:	20014760 	.word	0x20014760
   34198:	1badf11e 	.word	0x1badf11e
   3419c:	2001d3be 	.word	0x2001d3be

000341a0 <sock_find>:
   341a0:	b530      	push	{r4, r5, lr}
   341a2:	2200      	movs	r2, #0
   341a4:	2460      	movs	r4, #96	; 0x60
   341a6:	4b06      	ldr	r3, [pc, #24]	; (341c0 <sock_find+0x20>)
   341a8:	fb04 f102 	mul.w	r1, r4, r2
   341ac:	58cd      	ldr	r5, [r1, r3]
   341ae:	4285      	cmp	r5, r0
   341b0:	d101      	bne.n	341b6 <sock_find+0x16>
   341b2:	1858      	adds	r0, r3, r1
   341b4:	bd30      	pop	{r4, r5, pc}
   341b6:	3201      	adds	r2, #1
   341b8:	2a08      	cmp	r2, #8
   341ba:	d1f5      	bne.n	341a8 <sock_find+0x8>
   341bc:	2000      	movs	r0, #0
   341be:	e7f9      	b.n	341b4 <sock_find+0x14>
   341c0:	20014760 	.word	0x20014760

000341c4 <_sock_close>:
   341c4:	b538      	push	{r3, r4, r5, lr}
   341c6:	f7ff ffeb 	bl	341a0 <sock_find>
   341ca:	4604      	mov	r4, r0
   341cc:	1d05      	adds	r5, r0, #4
   341ce:	4628      	mov	r0, r5
   341d0:	f00c f962 	bl	40498 <pkt_flush>
   341d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   341d6:	b108      	cbz	r0, 341dc <_sock_close+0x18>
   341d8:	f7f1 fc46 	bl	25a68 <nrf_modem_os_free>
   341dc:	225c      	movs	r2, #92	; 0x5c
   341de:	2100      	movs	r1, #0
   341e0:	4628      	mov	r0, r5
   341e2:	f00d f927 	bl	41434 <memset>
   341e6:	4b01      	ldr	r3, [pc, #4]	; (341ec <_sock_close+0x28>)
   341e8:	6023      	str	r3, [r4, #0]
   341ea:	bd38      	pop	{r3, r4, r5, pc}
   341ec:	1badf11e 	.word	0x1badf11e

000341f0 <sock_flow_control_set>:
   341f0:	1e02      	subs	r2, r0, #0
   341f2:	bf18      	it	ne
   341f4:	2201      	movne	r2, #1
   341f6:	4b0a      	ldr	r3, [pc, #40]	; (34220 <sock_flow_control_set+0x30>)
   341f8:	b570      	push	{r4, r5, r6, lr}
   341fa:	701a      	strb	r2, [r3, #0]
   341fc:	2560      	movs	r5, #96	; 0x60
   341fe:	2200      	movs	r2, #0
   34200:	4908      	ldr	r1, [pc, #32]	; (34224 <sock_flow_control_set+0x34>)
   34202:	4e09      	ldr	r6, [pc, #36]	; (34228 <sock_flow_control_set+0x38>)
   34204:	fb05 f302 	mul.w	r3, r5, r2
   34208:	585c      	ldr	r4, [r3, r1]
   3420a:	3201      	adds	r2, #1
   3420c:	42b4      	cmp	r4, r6
   3420e:	bf1f      	itttt	ne
   34210:	185b      	addne	r3, r3, r1
   34212:	7f1c      	ldrbne	r4, [r3, #28]
   34214:	f360 1486 	bfine	r4, r0, #6, #1
   34218:	771c      	strbne	r4, [r3, #28]
   3421a:	2a08      	cmp	r2, #8
   3421c:	d1f2      	bne.n	34204 <sock_flow_control_set+0x14>
   3421e:	bd70      	pop	{r4, r5, r6, pc}
   34220:	2001d3be 	.word	0x2001d3be
   34224:	20014760 	.word	0x20014760
   34228:	1badf11e 	.word	0x1badf11e

0003422c <on_getaddrinfo_res>:
   3422c:	2301      	movs	r3, #1
   3422e:	4a03      	ldr	r2, [pc, #12]	; (3423c <on_getaddrinfo_res+0x10>)
   34230:	7013      	strb	r3, [r2, #0]
   34232:	4a03      	ldr	r2, [pc, #12]	; (34240 <on_getaddrinfo_res+0x14>)
   34234:	6010      	str	r0, [r2, #0]
   34236:	4618      	mov	r0, r3
   34238:	4770      	bx	lr
   3423a:	bf00      	nop
   3423c:	2001d3bf 	.word	0x2001d3bf
   34240:	2001a4b4 	.word	0x2001a4b4

00034244 <addrinfo_init>:
   34244:	2201      	movs	r2, #1
   34246:	4802      	ldr	r0, [pc, #8]	; (34250 <addrinfo_init+0xc>)
   34248:	4611      	mov	r1, r2
   3424a:	f7f1 bb3d 	b.w	258c8 <nrf_modem_os_sem_init>
   3424e:	bf00      	nop
   34250:	2001a4a4 	.word	0x2001a4a4

00034254 <nrf_getaddrinfo>:
   34254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34258:	4604      	mov	r4, r0
   3425a:	460e      	mov	r6, r1
   3425c:	4617      	mov	r7, r2
   3425e:	461d      	mov	r5, r3
   34260:	f001 fe04 	bl	35e6c <nrf_modem_state_is_initialized>
   34264:	b940      	cbnz	r0, 34278 <nrf_getaddrinfo+0x24>
   34266:	2001      	movs	r0, #1
   34268:	f7f1 fb1a 	bl	258a0 <nrf_modem_os_errno_set>
   3426c:	f04f 34ff 	mov.w	r4, #4294967295
   34270:	4620      	mov	r0, r4
   34272:	b003      	add	sp, #12
   34274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34278:	ea54 0306 	orrs.w	r3, r4, r6
   3427c:	f000 817c 	beq.w	34578 <nrf_getaddrinfo+0x324>
   34280:	b327      	cbz	r7, 342cc <nrf_getaddrinfo+0x78>
   34282:	683b      	ldr	r3, [r7, #0]
   34284:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   34288:	f023 0302 	bic.w	r3, r3, #2
   3428c:	2b00      	cmp	r3, #0
   3428e:	f040 8176 	bne.w	3457e <nrf_getaddrinfo+0x32a>
   34292:	6878      	ldr	r0, [r7, #4]
   34294:	b938      	cbnz	r0, 342a6 <nrf_getaddrinfo+0x52>
   34296:	68b8      	ldr	r0, [r7, #8]
   34298:	b160      	cbz	r0, 342b4 <nrf_getaddrinfo+0x60>
   3429a:	f00c f88c 	bl	403b6 <sock_type_is_valid>
   3429e:	b948      	cbnz	r0, 342b4 <nrf_getaddrinfo+0x60>
   342a0:	f240 1413 	movw	r4, #275	; 0x113
   342a4:	e7e4      	b.n	34270 <nrf_getaddrinfo+0x1c>
   342a6:	f00c f87d 	bl	403a4 <sock_family_is_valid>
   342aa:	2800      	cmp	r0, #0
   342ac:	d1f3      	bne.n	34296 <nrf_getaddrinfo+0x42>
   342ae:	f44f 7487 	mov.w	r4, #270	; 0x10e
   342b2:	e7dd      	b.n	34270 <nrf_getaddrinfo+0x1c>
   342b4:	68f8      	ldr	r0, [r7, #12]
   342b6:	b148      	cbz	r0, 342cc <nrf_getaddrinfo+0x78>
   342b8:	68b9      	ldr	r1, [r7, #8]
   342ba:	f00c f890 	bl	403de <sock_proto_supports_type>
   342be:	b928      	cbnz	r0, 342cc <nrf_getaddrinfo+0x78>
   342c0:	206b      	movs	r0, #107	; 0x6b
   342c2:	f7f1 faed 	bl	258a0 <nrf_modem_os_errno_set>
   342c6:	f240 1415 	movw	r4, #277	; 0x115
   342ca:	e7d1      	b.n	34270 <nrf_getaddrinfo+0x1c>
   342cc:	4baf      	ldr	r3, [pc, #700]	; (3458c <nrf_getaddrinfo+0x338>)
   342ce:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   342d2:	6818      	ldr	r0, [r3, #0]
   342d4:	f7f1 fb50 	bl	25978 <nrf_modem_os_sem_take>
   342d8:	4680      	mov	r8, r0
   342da:	2800      	cmp	r0, #0
   342dc:	f040 8152 	bne.w	34584 <nrf_getaddrinfo+0x330>
   342e0:	2e00      	cmp	r6, #0
   342e2:	d042      	beq.n	3436a <nrf_getaddrinfo+0x116>
   342e4:	b31f      	cbz	r7, 3432e <nrf_getaddrinfo+0xda>
   342e6:	683b      	ldr	r3, [r7, #0]
   342e8:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   342ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   342f0:	d11d      	bne.n	3432e <nrf_getaddrinfo+0xda>
   342f2:	683b      	ldr	r3, [r7, #0]
   342f4:	04db      	lsls	r3, r3, #19
   342f6:	d53c      	bpl.n	34372 <nrf_getaddrinfo+0x11e>
   342f8:	213a      	movs	r1, #58	; 0x3a
   342fa:	4630      	mov	r0, r6
   342fc:	f00d fa58 	bl	417b0 <strchr>
   34300:	4681      	mov	r9, r0
   34302:	b120      	cbz	r0, 3430e <nrf_getaddrinfo+0xba>
   34304:	48a2      	ldr	r0, [pc, #648]	; (34590 <nrf_getaddrinfo+0x33c>)
   34306:	f7e8 ff9c 	bl	1d242 <strlen>
   3430a:	eb09 0600 	add.w	r6, r9, r0
   3430e:	4630      	mov	r0, r6
   34310:	49a0      	ldr	r1, [pc, #640]	; (34594 <nrf_getaddrinfo+0x340>)
   34312:	f00d faa9 	bl	41868 <strstr>
   34316:	4681      	mov	r9, r0
   34318:	b318      	cbz	r0, 34362 <nrf_getaddrinfo+0x10e>
   3431a:	489e      	ldr	r0, [pc, #632]	; (34594 <nrf_getaddrinfo+0x340>)
   3431c:	f7e8 ff91 	bl	1d242 <strlen>
   34320:	220a      	movs	r2, #10
   34322:	2100      	movs	r1, #0
   34324:	4448      	add	r0, r9
   34326:	f006 faab 	bl	3a880 <strtol>
   3432a:	4606      	mov	r6, r0
   3432c:	e023      	b.n	34376 <nrf_getaddrinfo+0x122>
   3432e:	220a      	movs	r2, #10
   34330:	2100      	movs	r1, #0
   34332:	4630      	mov	r0, r6
   34334:	f006 fbc0 	bl	3aab8 <strtoul>
   34338:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   3433c:	1e42      	subs	r2, r0, #1
   3433e:	429a      	cmp	r2, r3
   34340:	f200 8114 	bhi.w	3456c <nrf_getaddrinfo+0x318>
   34344:	0203      	lsls	r3, r0, #8
   34346:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
   3434a:	4b93      	ldr	r3, [pc, #588]	; (34598 <nrf_getaddrinfo+0x344>)
   3434c:	8018      	strh	r0, [r3, #0]
   3434e:	2f00      	cmp	r7, #0
   34350:	d1cf      	bne.n	342f2 <nrf_getaddrinfo+0x9e>
   34352:	f04f 36ff 	mov.w	r6, #4294967295
   34356:	2200      	movs	r2, #0
   34358:	4b90      	ldr	r3, [pc, #576]	; (3459c <nrf_getaddrinfo+0x348>)
   3435a:	601a      	str	r2, [r3, #0]
   3435c:	b997      	cbnz	r7, 34384 <nrf_getaddrinfo+0x130>
   3435e:	2301      	movs	r3, #1
   34360:	e014      	b.n	3438c <nrf_getaddrinfo+0x138>
   34362:	4601      	mov	r1, r0
   34364:	220a      	movs	r2, #10
   34366:	4630      	mov	r0, r6
   34368:	e7dd      	b.n	34326 <nrf_getaddrinfo+0xd2>
   3436a:	4b8b      	ldr	r3, [pc, #556]	; (34598 <nrf_getaddrinfo+0x344>)
   3436c:	8018      	strh	r0, [r3, #0]
   3436e:	2f00      	cmp	r7, #0
   34370:	d0ef      	beq.n	34352 <nrf_getaddrinfo+0xfe>
   34372:	f04f 36ff 	mov.w	r6, #4294967295
   34376:	6878      	ldr	r0, [r7, #4]
   34378:	2800      	cmp	r0, #0
   3437a:	d0ec      	beq.n	34356 <nrf_getaddrinfo+0x102>
   3437c:	f00c fd25 	bl	40dca <nrf_af_to_rpc_af>
   34380:	4b86      	ldr	r3, [pc, #536]	; (3459c <nrf_getaddrinfo+0x348>)
   34382:	6018      	str	r0, [r3, #0]
   34384:	68bb      	ldr	r3, [r7, #8]
   34386:	2b00      	cmp	r3, #0
   34388:	bf08      	it	eq
   3438a:	2301      	moveq	r3, #1
   3438c:	f8df b210 	ldr.w	fp, [pc, #528]	; 345a0 <nrf_getaddrinfo+0x34c>
   34390:	f8cb 3000 	str.w	r3, [fp]
   34394:	2f00      	cmp	r7, #0
   34396:	d049      	beq.n	3442c <nrf_getaddrinfo+0x1d8>
   34398:	68fb      	ldr	r3, [r7, #12]
   3439a:	2b00      	cmp	r3, #0
   3439c:	bf08      	it	eq
   3439e:	2306      	moveq	r3, #6
   343a0:	f8df a200 	ldr.w	sl, [pc, #512]	; 345a4 <nrf_getaddrinfo+0x350>
   343a4:	f8ca 3000 	str.w	r3, [sl]
   343a8:	b10f      	cbz	r7, 343ae <nrf_getaddrinfo+0x15a>
   343aa:	f8d7 8000 	ldr.w	r8, [r7]
   343ae:	4f7e      	ldr	r7, [pc, #504]	; (345a8 <nrf_getaddrinfo+0x354>)
   343b0:	4620      	mov	r0, r4
   343b2:	f8c7 8000 	str.w	r8, [r7]
   343b6:	b10c      	cbz	r4, 343bc <nrf_getaddrinfo+0x168>
   343b8:	f7e8 ff43 	bl	1d242 <strlen>
   343bc:	f00b fe10 	bl	3ffe0 <rpc_client_request_alloc>
   343c0:	4680      	mov	r8, r0
   343c2:	2800      	cmp	r0, #0
   343c4:	f000 80d5 	beq.w	34572 <nrf_getaddrinfo+0x31e>
   343c8:	6106      	str	r6, [r0, #16]
   343ca:	b144      	cbz	r4, 343de <nrf_getaddrinfo+0x18a>
   343cc:	6806      	ldr	r6, [r0, #0]
   343ce:	4620      	mov	r0, r4
   343d0:	f7e8 ff37 	bl	1d242 <strlen>
   343d4:	4621      	mov	r1, r4
   343d6:	4602      	mov	r2, r0
   343d8:	4630      	mov	r0, r6
   343da:	f00d f80b 	bl	413f4 <memcpy>
   343de:	4b6f      	ldr	r3, [pc, #444]	; (3459c <nrf_getaddrinfo+0x348>)
   343e0:	4642      	mov	r2, r8
   343e2:	681b      	ldr	r3, [r3, #0]
   343e4:	f247 010d 	movw	r1, #28685	; 0x700d
   343e8:	f8c8 3018 	str.w	r3, [r8, #24]
   343ec:	f8db 3000 	ldr.w	r3, [fp]
   343f0:	2004      	movs	r0, #4
   343f2:	f8c8 301c 	str.w	r3, [r8, #28]
   343f6:	f8da 3000 	ldr.w	r3, [sl]
   343fa:	4e6c      	ldr	r6, [pc, #432]	; (345ac <nrf_getaddrinfo+0x358>)
   343fc:	f8c8 3020 	str.w	r3, [r8, #32]
   34400:	683b      	ldr	r3, [r7, #0]
   34402:	f8c8 3014 	str.w	r3, [r8, #20]
   34406:	f00b fdf1 	bl	3ffec <rpc_client_request_send>
   3440a:	2300      	movs	r3, #0
   3440c:	7033      	strb	r3, [r6, #0]
   3440e:	f04f 33ff 	mov.w	r3, #4294967295
   34412:	9301      	str	r3, [sp, #4]
   34414:	2000      	movs	r0, #0
   34416:	a901      	add	r1, sp, #4
   34418:	f7f1 f980 	bl	2571c <nrf_modem_os_timedwait>
   3441c:	4604      	mov	r4, r0
   3441e:	b138      	cbz	r0, 34430 <nrf_getaddrinfo+0x1dc>
   34420:	206e      	movs	r0, #110	; 0x6e
   34422:	f7f1 fa3d 	bl	258a0 <nrf_modem_os_errno_set>
   34426:	f46f 748a 	mvn.w	r4, #276	; 0x114
   3442a:	e721      	b.n	34270 <nrf_getaddrinfo+0x1c>
   3442c:	2306      	movs	r3, #6
   3442e:	e7b7      	b.n	343a0 <nrf_getaddrinfo+0x14c>
   34430:	7833      	ldrb	r3, [r6, #0]
   34432:	2b01      	cmp	r3, #1
   34434:	d1ee      	bne.n	34414 <nrf_getaddrinfo+0x1c0>
   34436:	4b5e      	ldr	r3, [pc, #376]	; (345b0 <nrf_getaddrinfo+0x35c>)
   34438:	681b      	ldr	r3, [r3, #0]
   3443a:	6958      	ldr	r0, [r3, #20]
   3443c:	2800      	cmp	r0, #0
   3443e:	f040 8091 	bne.w	34564 <nrf_getaddrinfo+0x310>
   34442:	2020      	movs	r0, #32
   34444:	681e      	ldr	r6, [r3, #0]
   34446:	f7f1 fb07 	bl	25a58 <nrf_modem_os_alloc>
   3444a:	6028      	str	r0, [r5, #0]
   3444c:	b300      	cbz	r0, 34490 <nrf_getaddrinfo+0x23c>
   3444e:	f8d6 8008 	ldr.w	r8, [r6, #8]
   34452:	f1b8 0f01 	cmp.w	r8, #1
   34456:	d013      	beq.n	34480 <nrf_getaddrinfo+0x22c>
   34458:	f1b8 0f02 	cmp.w	r8, #2
   3445c:	d03a      	beq.n	344d4 <nrf_getaddrinfo+0x280>
   3445e:	f44f 7487 	mov.w	r4, #270	; 0x10e
   34462:	4b53      	ldr	r3, [pc, #332]	; (345b0 <nrf_getaddrinfo+0x35c>)
   34464:	681b      	ldr	r3, [r3, #0]
   34466:	6818      	ldr	r0, [r3, #0]
   34468:	b108      	cbz	r0, 3446e <nrf_getaddrinfo+0x21a>
   3446a:	f00b fdc9 	bl	40000 <rpc_client_data_free>
   3446e:	4b50      	ldr	r3, [pc, #320]	; (345b0 <nrf_getaddrinfo+0x35c>)
   34470:	6818      	ldr	r0, [r3, #0]
   34472:	f00b fdc2 	bl	3fffa <rpc_client_message_free>
   34476:	4b45      	ldr	r3, [pc, #276]	; (3458c <nrf_getaddrinfo+0x338>)
   34478:	6818      	ldr	r0, [r3, #0]
   3447a:	f7f1 fa5d 	bl	25938 <nrf_modem_os_sem_give>
   3447e:	e6f7      	b.n	34270 <nrf_getaddrinfo+0x1c>
   34480:	2010      	movs	r0, #16
   34482:	f7f1 fae9 	bl	25a58 <nrf_modem_os_alloc>
   34486:	4681      	mov	r9, r0
   34488:	b928      	cbnz	r0, 34496 <nrf_getaddrinfo+0x242>
   3448a:	6828      	ldr	r0, [r5, #0]
   3448c:	f7f1 faec 	bl	25a68 <nrf_modem_os_free>
   34490:	f240 140f 	movw	r4, #271	; 0x10f
   34494:	e7e5      	b.n	34462 <nrf_getaddrinfo+0x20e>
   34496:	2210      	movs	r2, #16
   34498:	493f      	ldr	r1, [pc, #252]	; (34598 <nrf_getaddrinfo+0x344>)
   3449a:	7002      	strb	r2, [r0, #0]
   3449c:	8809      	ldrh	r1, [r1, #0]
   3449e:	f8c0 8004 	str.w	r8, [r0, #4]
   344a2:	8101      	strh	r1, [r0, #8]
   344a4:	69b1      	ldr	r1, [r6, #24]
   344a6:	60c1      	str	r1, [r0, #12]
   344a8:	6829      	ldr	r1, [r5, #0]
   344aa:	610a      	str	r2, [r1, #16]
   344ac:	683a      	ldr	r2, [r7, #0]
   344ae:	f8d5 8000 	ldr.w	r8, [r5]
   344b2:	f012 0202 	ands.w	r2, r2, #2
   344b6:	d052      	beq.n	3455e <nrf_getaddrinfo+0x30a>
   344b8:	8af0      	ldrh	r0, [r6, #22]
   344ba:	3001      	adds	r0, #1
   344bc:	f7f1 facc 	bl	25a58 <nrf_modem_os_alloc>
   344c0:	682a      	ldr	r2, [r5, #0]
   344c2:	f8c8 0018 	str.w	r0, [r8, #24]
   344c6:	6990      	ldr	r0, [r2, #24]
   344c8:	bb38      	cbnz	r0, 3451a <nrf_getaddrinfo+0x2c6>
   344ca:	4628      	mov	r0, r5
   344cc:	f7f1 facc 	bl	25a68 <nrf_modem_os_free>
   344d0:	4648      	mov	r0, r9
   344d2:	e7db      	b.n	3448c <nrf_getaddrinfo+0x238>
   344d4:	2024      	movs	r0, #36	; 0x24
   344d6:	f7f1 fabf 	bl	25a58 <nrf_modem_os_alloc>
   344da:	4681      	mov	r9, r0
   344dc:	2800      	cmp	r0, #0
   344de:	d0d4      	beq.n	3448a <nrf_getaddrinfo+0x236>
   344e0:	2224      	movs	r2, #36	; 0x24
   344e2:	4621      	mov	r1, r4
   344e4:	f00c ffa6 	bl	41434 <memset>
   344e8:	2224      	movs	r2, #36	; 0x24
   344ea:	f889 2000 	strb.w	r2, [r9]
   344ee:	4a2a      	ldr	r2, [pc, #168]	; (34598 <nrf_getaddrinfo+0x344>)
   344f0:	f8c9 8004 	str.w	r8, [r9, #4]
   344f4:	8812      	ldrh	r2, [r2, #0]
   344f6:	f109 0110 	add.w	r1, r9, #16
   344fa:	f8a9 2008 	strh.w	r2, [r9, #8]
   344fe:	f106 0028 	add.w	r0, r6, #40	; 0x28
   34502:	f106 0218 	add.w	r2, r6, #24
   34506:	f852 cb04 	ldr.w	ip, [r2], #4
   3450a:	4282      	cmp	r2, r0
   3450c:	f841 cb04 	str.w	ip, [r1], #4
   34510:	d1f9      	bne.n	34506 <nrf_getaddrinfo+0x2b2>
   34512:	2124      	movs	r1, #36	; 0x24
   34514:	682a      	ldr	r2, [r5, #0]
   34516:	6111      	str	r1, [r2, #16]
   34518:	e7c8      	b.n	344ac <nrf_getaddrinfo+0x258>
   3451a:	f8b6 c014 	ldrh.w	ip, [r6, #20]
   3451e:	f106 0118 	add.w	r1, r6, #24
   34522:	8af2      	ldrh	r2, [r6, #22]
   34524:	4461      	add	r1, ip
   34526:	f00c ff65 	bl	413f4 <memcpy>
   3452a:	2000      	movs	r0, #0
   3452c:	6829      	ldr	r1, [r5, #0]
   3452e:	8af2      	ldrh	r2, [r6, #22]
   34530:	6989      	ldr	r1, [r1, #24]
   34532:	5488      	strb	r0, [r1, r2]
   34534:	68b0      	ldr	r0, [r6, #8]
   34536:	f8d5 8000 	ldr.w	r8, [r5]
   3453a:	f00c fc47 	bl	40dcc <rpc_af_to_nrf_af>
   3453e:	2300      	movs	r3, #0
   34540:	682a      	ldr	r2, [r5, #0]
   34542:	f8db 1000 	ldr.w	r1, [fp]
   34546:	f8c8 0004 	str.w	r0, [r8, #4]
   3454a:	6091      	str	r1, [r2, #8]
   3454c:	f8da 1000 	ldr.w	r1, [sl]
   34550:	f8c2 9014 	str.w	r9, [r2, #20]
   34554:	60d1      	str	r1, [r2, #12]
   34556:	6839      	ldr	r1, [r7, #0]
   34558:	61d3      	str	r3, [r2, #28]
   3455a:	6011      	str	r1, [r2, #0]
   3455c:	e781      	b.n	34462 <nrf_getaddrinfo+0x20e>
   3455e:	f8c8 2018 	str.w	r2, [r8, #24]
   34562:	e7e7      	b.n	34534 <nrf_getaddrinfo+0x2e0>
   34564:	f00c fc74 	bl	40e50 <rpc_error_to_nrf_gai_errno>
   34568:	4604      	mov	r4, r0
   3456a:	e77a      	b.n	34462 <nrf_getaddrinfo+0x20e>
   3456c:	f44f 7489 	mov.w	r4, #274	; 0x112
   34570:	e781      	b.n	34476 <nrf_getaddrinfo+0x222>
   34572:	f240 140f 	movw	r4, #271	; 0x10f
   34576:	e77e      	b.n	34476 <nrf_getaddrinfo+0x222>
   34578:	f240 1411 	movw	r4, #273	; 0x111
   3457c:	e678      	b.n	34270 <nrf_getaddrinfo+0x1c>
   3457e:	f240 1403 	movw	r4, #259	; 0x103
   34582:	e675      	b.n	34270 <nrf_getaddrinfo+0x1c>
   34584:	f44f 7481 	mov.w	r4, #258	; 0x102
   34588:	e672      	b.n	34270 <nrf_getaddrinfo+0x1c>
   3458a:	bf00      	nop
   3458c:	2001a4a4 	.word	0x2001a4a4
   34590:	0004b9be 	.word	0x0004b9be
   34594:	0004b9b0 	.word	0x0004b9b0
   34598:	2001a59e 	.word	0x2001a59e
   3459c:	2001a4a8 	.word	0x2001a4a8
   345a0:	2001a4b8 	.word	0x2001a4b8
   345a4:	2001a4b0 	.word	0x2001a4b0
   345a8:	2001a4ac 	.word	0x2001a4ac
   345ac:	2001d3bf 	.word	0x2001d3bf
   345b0:	2001a4b4 	.word	0x2001a4b4

000345b4 <rpc_ip_event_handler>:
   345b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   345b6:	f248 030f 	movw	r3, #32783	; 0x800f
   345ba:	4299      	cmp	r1, r3
   345bc:	4605      	mov	r5, r0
   345be:	460e      	mov	r6, r1
   345c0:	d00b      	beq.n	345da <rpc_ip_event_handler+0x26>
   345c2:	f249 0304 	movw	r3, #36868	; 0x9004
   345c6:	4299      	cmp	r1, r3
   345c8:	d00a      	beq.n	345e0 <rpc_ip_event_handler+0x2c>
   345ca:	f248 030d 	movw	r3, #32781	; 0x800d
   345ce:	4299      	cmp	r1, r3
   345d0:	d117      	bne.n	34602 <rpc_ip_event_handler+0x4e>
   345d2:	f7ff fe2b 	bl	3422c <on_getaddrinfo_res>
   345d6:	b2c0      	uxtb	r0, r0
   345d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   345da:	f00b ff6b 	bl	404b4 <on_conf_dnssrv_res>
   345de:	e7fa      	b.n	345d6 <rpc_ip_event_handler+0x22>
   345e0:	6903      	ldr	r3, [r0, #16]
   345e2:	2b03      	cmp	r3, #3
   345e4:	d806      	bhi.n	345f4 <rpc_ip_event_handler+0x40>
   345e6:	e8df f003 	tbb	[pc, r3]
   345ea:	0a02      	.short	0x0a02
   345ec:	0702      	.short	0x0702
   345ee:	2000      	movs	r0, #0
   345f0:	f7ff fdfe 	bl	341f0 <sock_flow_control_set>
   345f4:	2000      	movs	r0, #0
   345f6:	e7ef      	b.n	345d8 <rpc_ip_event_handler+0x24>
   345f8:	2201      	movs	r2, #1
   345fa:	4b71      	ldr	r3, [pc, #452]	; (347c0 <rpc_ip_event_handler+0x20c>)
   345fc:	701a      	strb	r2, [r3, #0]
   345fe:	2001      	movs	r0, #1
   34600:	e7f6      	b.n	345f0 <rpc_ip_event_handler+0x3c>
   34602:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   34606:	bf8c      	ite	hi
   34608:	68c0      	ldrhi	r0, [r0, #12]
   3460a:	6928      	ldrls	r0, [r5, #16]
   3460c:	f7ff fdc8 	bl	341a0 <sock_find>
   34610:	4604      	mov	r4, r0
   34612:	b928      	cbnz	r0, 34620 <rpc_ip_event_handler+0x6c>
   34614:	6828      	ldr	r0, [r5, #0]
   34616:	2800      	cmp	r0, #0
   34618:	d0ec      	beq.n	345f4 <rpc_ip_event_handler+0x40>
   3461a:	f00b fcf1 	bl	40000 <rpc_client_data_free>
   3461e:	e7e9      	b.n	345f4 <rpc_ip_event_handler+0x40>
   34620:	f248 030c 	movw	r3, #32780	; 0x800c
   34624:	429e      	cmp	r6, r3
   34626:	d823      	bhi.n	34670 <rpc_ip_event_handler+0xbc>
   34628:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   3462c:	d9f2      	bls.n	34614 <rpc_ip_event_handler+0x60>
   3462e:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   34632:	3e01      	subs	r6, #1
   34634:	2e0b      	cmp	r6, #11
   34636:	d8ed      	bhi.n	34614 <rpc_ip_event_handler+0x60>
   34638:	a301      	add	r3, pc, #4	; (adr r3, 34640 <rpc_ip_event_handler+0x8c>)
   3463a:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   3463e:	bf00      	nop
   34640:	000346e3 	.word	0x000346e3
   34644:	000346ff 	.word	0x000346ff
   34648:	000346e3 	.word	0x000346e3
   3464c:	000346e3 	.word	0x000346e3
   34650:	000346e3 	.word	0x000346e3
   34654:	000346e3 	.word	0x000346e3
   34658:	000346e3 	.word	0x000346e3
   3465c:	000346e3 	.word	0x000346e3
   34660:	000346db 	.word	0x000346db
   34664:	00034615 	.word	0x00034615
   34668:	00034615 	.word	0x00034615
   3466c:	00034743 	.word	0x00034743
   34670:	f249 0302 	movw	r3, #36866	; 0x9002
   34674:	429e      	cmp	r6, r3
   34676:	d068      	beq.n	3474a <rpc_ip_event_handler+0x196>
   34678:	d822      	bhi.n	346c0 <rpc_ip_event_handler+0x10c>
   3467a:	f248 0381 	movw	r3, #32897	; 0x8081
   3467e:	429e      	cmp	r6, r3
   34680:	f000 8098 	beq.w	347b4 <rpc_ip_event_handler+0x200>
   34684:	f249 0301 	movw	r3, #36865	; 0x9001
   34688:	429e      	cmp	r6, r3
   3468a:	d1c3      	bne.n	34614 <rpc_ip_event_handler+0x60>
   3468c:	2010      	movs	r0, #16
   3468e:	f7f1 f9e3 	bl	25a58 <nrf_modem_os_alloc>
   34692:	4606      	mov	r6, r0
   34694:	2800      	cmp	r0, #0
   34696:	d065      	beq.n	34764 <rpc_ip_event_handler+0x1b0>
   34698:	2710      	movs	r7, #16
   3469a:	2100      	movs	r1, #0
   3469c:	463a      	mov	r2, r7
   3469e:	f00c fec9 	bl	41434 <memset>
   346a2:	682b      	ldr	r3, [r5, #0]
   346a4:	6073      	str	r3, [r6, #4]
   346a6:	686b      	ldr	r3, [r5, #4]
   346a8:	8133      	strh	r3, [r6, #8]
   346aa:	8a6b      	ldrh	r3, [r5, #18]
   346ac:	2b04      	cmp	r3, #4
   346ae:	d051      	beq.n	34754 <rpc_ip_event_handler+0x1a0>
   346b0:	42bb      	cmp	r3, r7
   346b2:	d064      	beq.n	3477e <rpc_ip_event_handler+0x1ca>
   346b4:	4620      	mov	r0, r4
   346b6:	4631      	mov	r1, r6
   346b8:	f00b fdbb 	bl	40232 <sock_pkt_append>
   346bc:	2000      	movs	r0, #0
   346be:	e78a      	b.n	345d6 <rpc_ip_event_handler+0x22>
   346c0:	f249 0303 	movw	r3, #36867	; 0x9003
   346c4:	429e      	cmp	r6, r3
   346c6:	d010      	beq.n	346ea <rpc_ip_event_handler+0x136>
   346c8:	f249 0382 	movw	r3, #36994	; 0x9082
   346cc:	429e      	cmp	r6, r3
   346ce:	d1a1      	bne.n	34614 <rpc_ip_event_handler+0x60>
   346d0:	4601      	mov	r1, r0
   346d2:	4628      	mov	r0, r5
   346d4:	f000 fb36 	bl	34d44 <on_tls_handshake_ntf>
   346d8:	e77d      	b.n	345d6 <rpc_ip_event_handler+0x22>
   346da:	7f03      	ldrb	r3, [r0, #28]
   346dc:	f043 0302 	orr.w	r3, r3, #2
   346e0:	7723      	strb	r3, [r4, #28]
   346e2:	4628      	mov	r0, r5
   346e4:	f00c fbce 	bl	40e84 <res_forward>
   346e8:	e775      	b.n	345d6 <rpc_ip_event_handler+0x22>
   346ea:	7f03      	ldrb	r3, [r0, #28]
   346ec:	f043 0302 	orr.w	r3, r3, #2
   346f0:	7703      	strb	r3, [r0, #28]
   346f2:	6928      	ldr	r0, [r5, #16]
   346f4:	2869      	cmp	r0, #105	; 0x69
   346f6:	d109      	bne.n	3470c <rpc_ip_event_handler+0x158>
   346f8:	2368      	movs	r3, #104	; 0x68
   346fa:	61a3      	str	r3, [r4, #24]
   346fc:	e77a      	b.n	345f4 <rpc_ip_event_handler+0x40>
   346fe:	7f03      	ldrb	r3, [r0, #28]
   34700:	68ee      	ldr	r6, [r5, #12]
   34702:	f36f 0382 	bfc	r3, #2, #1
   34706:	7703      	strb	r3, [r0, #28]
   34708:	6968      	ldr	r0, [r5, #20]
   3470a:	b118      	cbz	r0, 34714 <rpc_ip_event_handler+0x160>
   3470c:	f000 fba8 	bl	34e60 <rpc_error_to_nrf_errno>
   34710:	61a0      	str	r0, [r4, #24]
   34712:	e76f      	b.n	345f4 <rpc_ip_event_handler+0x40>
   34714:	61a0      	str	r0, [r4, #24]
   34716:	4620      	mov	r0, r4
   34718:	f00b fdbc 	bl	40294 <sock_proto_is_secure>
   3471c:	b918      	cbnz	r0, 34726 <rpc_ip_event_handler+0x172>
   3471e:	7f23      	ldrb	r3, [r4, #28]
   34720:	f043 0308 	orr.w	r3, r3, #8
   34724:	7723      	strb	r3, [r4, #28]
   34726:	4620      	mov	r0, r4
   34728:	f00b fdb4 	bl	40294 <sock_proto_is_secure>
   3472c:	2800      	cmp	r0, #0
   3472e:	f43f af61 	beq.w	345f4 <rpc_ip_event_handler+0x40>
   34732:	2e00      	cmp	r6, #0
   34734:	f43f af5e 	beq.w	345f4 <rpc_ip_event_handler+0x40>
   34738:	2100      	movs	r1, #0
   3473a:	4620      	mov	r0, r4
   3473c:	f000 fb18 	bl	34d70 <tls_attach>
   34740:	e758      	b.n	345f4 <rpc_ip_event_handler+0x40>
   34742:	7f03      	ldrb	r3, [r0, #28]
   34744:	f36f 1345 	bfc	r3, #5, #1
   34748:	e7ca      	b.n	346e0 <rpc_ip_event_handler+0x12c>
   3474a:	7f03      	ldrb	r3, [r0, #28]
   3474c:	f043 0320 	orr.w	r3, r3, #32
   34750:	7703      	strb	r3, [r0, #28]
   34752:	e74f      	b.n	345f4 <rpc_ip_event_handler+0x40>
   34754:	4638      	mov	r0, r7
   34756:	f7f1 f97f 	bl	25a58 <nrf_modem_os_alloc>
   3475a:	60f0      	str	r0, [r6, #12]
   3475c:	b920      	cbnz	r0, 34768 <rpc_ip_event_handler+0x1b4>
   3475e:	4630      	mov	r0, r6
   34760:	f7f1 f982 	bl	25a68 <nrf_modem_os_free>
   34764:	2002      	movs	r0, #2
   34766:	e736      	b.n	345d6 <rpc_ip_event_handler+0x22>
   34768:	2301      	movs	r3, #1
   3476a:	7007      	strb	r7, [r0, #0]
   3476c:	7c6a      	ldrb	r2, [r5, #17]
   3476e:	6043      	str	r3, [r0, #4]
   34770:	7c2b      	ldrb	r3, [r5, #16]
   34772:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   34776:	8103      	strh	r3, [r0, #8]
   34778:	696b      	ldr	r3, [r5, #20]
   3477a:	60c3      	str	r3, [r0, #12]
   3477c:	e79a      	b.n	346b4 <rpc_ip_event_handler+0x100>
   3477e:	2024      	movs	r0, #36	; 0x24
   34780:	f7f1 f96a 	bl	25a58 <nrf_modem_os_alloc>
   34784:	60f0      	str	r0, [r6, #12]
   34786:	2800      	cmp	r0, #0
   34788:	d0e9      	beq.n	3475e <rpc_ip_event_handler+0x1aa>
   3478a:	2324      	movs	r3, #36	; 0x24
   3478c:	7003      	strb	r3, [r0, #0]
   3478e:	2302      	movs	r3, #2
   34790:	7c6a      	ldrb	r2, [r5, #17]
   34792:	6043      	str	r3, [r0, #4]
   34794:	7c2b      	ldrb	r3, [r5, #16]
   34796:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3479a:	8103      	strh	r3, [r0, #8]
   3479c:	f105 0214 	add.w	r2, r5, #20
   347a0:	f100 0310 	add.w	r3, r0, #16
   347a4:	3524      	adds	r5, #36	; 0x24
   347a6:	f852 1b04 	ldr.w	r1, [r2], #4
   347aa:	42aa      	cmp	r2, r5
   347ac:	f843 1b04 	str.w	r1, [r3], #4
   347b0:	d1f9      	bne.n	347a6 <rpc_ip_event_handler+0x1f2>
   347b2:	e77f      	b.n	346b4 <rpc_ip_event_handler+0x100>
   347b4:	4601      	mov	r1, r0
   347b6:	4628      	mov	r0, r5
   347b8:	f000 fab4 	bl	34d24 <on_tls_attach_res>
   347bc:	e70b      	b.n	345d6 <rpc_ip_event_handler+0x22>
   347be:	bf00      	nop
   347c0:	2001d3c0 	.word	0x2001d3c0

000347c4 <ip_interface_init>:
   347c4:	b508      	push	{r3, lr}
   347c6:	f7ff fcab 	bl	34120 <sock_init>
   347ca:	f7ff fd3b 	bl	34244 <addrinfo_init>
   347ce:	2200      	movs	r2, #0
   347d0:	4b04      	ldr	r3, [pc, #16]	; (347e4 <ip_interface_init+0x20>)
   347d2:	4805      	ldr	r0, [pc, #20]	; (347e8 <ip_interface_init+0x24>)
   347d4:	701a      	strb	r2, [r3, #0]
   347d6:	2201      	movs	r2, #1
   347d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   347dc:	4611      	mov	r1, r2
   347de:	f7f1 b873 	b.w	258c8 <nrf_modem_os_sem_init>
   347e2:	bf00      	nop
   347e4:	2001d3c0 	.word	0x2001d3c0
   347e8:	2001a4bc 	.word	0x2001a4bc

000347ec <nrf_connect>:
   347ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   347f0:	4607      	mov	r7, r0
   347f2:	460c      	mov	r4, r1
   347f4:	4690      	mov	r8, r2
   347f6:	f7ff fcd3 	bl	341a0 <sock_find>
   347fa:	4605      	mov	r5, r0
   347fc:	b940      	cbnz	r0, 34810 <nrf_connect+0x24>
   347fe:	2009      	movs	r0, #9
   34800:	f7f1 f84e 	bl	258a0 <nrf_modem_os_errno_set>
   34804:	f04f 34ff 	mov.w	r4, #4294967295
   34808:	4620      	mov	r0, r4
   3480a:	b002      	add	sp, #8
   3480c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34810:	f00b fd50 	bl	402b4 <sock_is_connected>
   34814:	b108      	cbz	r0, 3481a <nrf_connect+0x2e>
   34816:	207f      	movs	r0, #127	; 0x7f
   34818:	e7f2      	b.n	34800 <nrf_connect+0x14>
   3481a:	4628      	mov	r0, r5
   3481c:	f00b fd46 	bl	402ac <sock_is_connecting>
   34820:	4606      	mov	r6, r0
   34822:	b108      	cbz	r0, 34828 <nrf_connect+0x3c>
   34824:	2078      	movs	r0, #120	; 0x78
   34826:	e7eb      	b.n	34800 <nrf_connect+0x14>
   34828:	b90c      	cbnz	r4, 3482e <nrf_connect+0x42>
   3482a:	200e      	movs	r0, #14
   3482c:	e7e8      	b.n	34800 <nrf_connect+0x14>
   3482e:	4641      	mov	r1, r8
   34830:	4620      	mov	r0, r4
   34832:	f00b fdee 	bl	40412 <sock_sockaddr_len_is_valid>
   34836:	b908      	cbnz	r0, 3483c <nrf_connect+0x50>
   34838:	2016      	movs	r0, #22
   3483a:	e7e1      	b.n	34800 <nrf_connect+0x14>
   3483c:	4621      	mov	r1, r4
   3483e:	4628      	mov	r0, r5
   34840:	f00b fdfb 	bl	4043a <sock_sockaddr_fam_is_valid>
   34844:	b908      	cbnz	r0, 3484a <nrf_connect+0x5e>
   34846:	206a      	movs	r0, #106	; 0x6a
   34848:	e7da      	b.n	34800 <nrf_connect+0x14>
   3484a:	4628      	mov	r0, r5
   3484c:	f00b fd3a 	bl	402c4 <sock_is_nonblock>
   34850:	b1a8      	cbz	r0, 3487e <nrf_connect+0x92>
   34852:	696b      	ldr	r3, [r5, #20]
   34854:	2b11      	cmp	r3, #17
   34856:	d00b      	beq.n	34870 <nrf_connect+0x84>
   34858:	4628      	mov	r0, r5
   3485a:	f00b fd1b 	bl	40294 <sock_proto_is_secure>
   3485e:	b130      	cbz	r0, 3486e <nrf_connect+0x82>
   34860:	4b32      	ldr	r3, [pc, #200]	; (3492c <nrf_connect+0x140>)
   34862:	6818      	ldr	r0, [r3, #0]
   34864:	f00a fa57 	bl	3ed16 <nrf_modem_os_sem_count_get>
   34868:	b908      	cbnz	r0, 3486e <nrf_connect+0x82>
   3486a:	2010      	movs	r0, #16
   3486c:	e7c8      	b.n	34800 <nrf_connect+0x14>
   3486e:	2601      	movs	r6, #1
   34870:	2000      	movs	r0, #0
   34872:	f00b fbb5 	bl	3ffe0 <rpc_client_request_alloc>
   34876:	4602      	mov	r2, r0
   34878:	b918      	cbnz	r0, 34882 <nrf_connect+0x96>
   3487a:	2069      	movs	r0, #105	; 0x69
   3487c:	e7c0      	b.n	34800 <nrf_connect+0x14>
   3487e:	4606      	mov	r6, r0
   34880:	e7f6      	b.n	34870 <nrf_connect+0x84>
   34882:	2114      	movs	r1, #20
   34884:	2300      	movs	r3, #0
   34886:	7201      	strb	r1, [r0, #8]
   34888:	6861      	ldr	r1, [r4, #4]
   3488a:	6107      	str	r7, [r0, #16]
   3488c:	2901      	cmp	r1, #1
   3488e:	7243      	strb	r3, [r0, #9]
   34890:	7283      	strb	r3, [r0, #10]
   34892:	72c3      	strb	r3, [r0, #11]
   34894:	d00e      	beq.n	348b4 <nrf_connect+0xc8>
   34896:	2902      	cmp	r1, #2
   34898:	d014      	beq.n	348c4 <nrf_connect+0xd8>
   3489a:	7f2b      	ldrb	r3, [r5, #28]
   3489c:	f247 0102 	movw	r1, #28674	; 0x7002
   348a0:	f043 0304 	orr.w	r3, r3, #4
   348a4:	772b      	strb	r3, [r5, #28]
   348a6:	2004      	movs	r0, #4
   348a8:	60d6      	str	r6, [r2, #12]
   348aa:	f00b fb9f 	bl	3ffec <rpc_client_request_send>
   348ae:	b1ce      	cbz	r6, 348e4 <nrf_connect+0xf8>
   348b0:	2077      	movs	r0, #119	; 0x77
   348b2:	e7a5      	b.n	34800 <nrf_connect+0x14>
   348b4:	8921      	ldrh	r1, [r4, #8]
   348b6:	75c3      	strb	r3, [r0, #23]
   348b8:	8281      	strh	r1, [r0, #20]
   348ba:	2104      	movs	r1, #4
   348bc:	7581      	strb	r1, [r0, #22]
   348be:	68e3      	ldr	r3, [r4, #12]
   348c0:	6183      	str	r3, [r0, #24]
   348c2:	e7ea      	b.n	3489a <nrf_connect+0xae>
   348c4:	8921      	ldrh	r1, [r4, #8]
   348c6:	75c3      	strb	r3, [r0, #23]
   348c8:	8281      	strh	r1, [r0, #20]
   348ca:	2110      	movs	r1, #16
   348cc:	1863      	adds	r3, r4, r1
   348ce:	7581      	strb	r1, [r0, #22]
   348d0:	3420      	adds	r4, #32
   348d2:	f100 0118 	add.w	r1, r0, #24
   348d6:	f853 0b04 	ldr.w	r0, [r3], #4
   348da:	42a3      	cmp	r3, r4
   348dc:	f841 0b04 	str.w	r0, [r1], #4
   348e0:	d1f9      	bne.n	348d6 <nrf_connect+0xea>
   348e2:	e7da      	b.n	3489a <nrf_connect+0xae>
   348e4:	4628      	mov	r0, r5
   348e6:	f00b fd4b 	bl	40380 <sock_sndtimeo_ms_get>
   348ea:	9001      	str	r0, [sp, #4]
   348ec:	4628      	mov	r0, r5
   348ee:	f00b fcdd 	bl	402ac <sock_is_connecting>
   348f2:	b918      	cbnz	r0, 348fc <nrf_connect+0x110>
   348f4:	69ac      	ldr	r4, [r5, #24]
   348f6:	b16c      	cbz	r4, 34914 <nrf_connect+0x128>
   348f8:	4620      	mov	r0, r4
   348fa:	e781      	b.n	34800 <nrf_connect+0x14>
   348fc:	2000      	movs	r0, #0
   348fe:	a901      	add	r1, sp, #4
   34900:	f7f0 ff0c 	bl	2571c <nrf_modem_os_timedwait>
   34904:	2800      	cmp	r0, #0
   34906:	d0f1      	beq.n	348ec <nrf_connect+0x100>
   34908:	f110 0f0b 	cmn.w	r0, #11
   3490c:	bf0c      	ite	eq
   3490e:	2074      	moveq	r0, #116	; 0x74
   34910:	206e      	movne	r0, #110	; 0x6e
   34912:	e775      	b.n	34800 <nrf_connect+0x14>
   34914:	4628      	mov	r0, r5
   34916:	f00b fcbd 	bl	40294 <sock_proto_is_secure>
   3491a:	2800      	cmp	r0, #0
   3491c:	f43f af74 	beq.w	34808 <nrf_connect+0x1c>
   34920:	4628      	mov	r0, r5
   34922:	9901      	ldr	r1, [sp, #4]
   34924:	f000 fa24 	bl	34d70 <tls_attach>
   34928:	4604      	mov	r4, r0
   3492a:	e76d      	b.n	34808 <nrf_connect+0x1c>
   3492c:	2001a4bc 	.word	0x2001a4bc

00034930 <nrf_sendto>:
   34930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34934:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   34936:	4682      	mov	sl, r0
   34938:	4689      	mov	r9, r1
   3493a:	4617      	mov	r7, r2
   3493c:	461e      	mov	r6, r3
   3493e:	f7ff fc2f 	bl	341a0 <sock_find>
   34942:	4604      	mov	r4, r0
   34944:	b928      	cbnz	r0, 34952 <nrf_sendto+0x22>
   34946:	2009      	movs	r0, #9
   34948:	f7f0 ffaa 	bl	258a0 <nrf_modem_os_errno_set>
   3494c:	f04f 34ff 	mov.w	r4, #4294967295
   34950:	e096      	b.n	34a80 <nrf_sendto+0x150>
   34952:	f036 0340 	bics.w	r3, r6, #64	; 0x40
   34956:	d001      	beq.n	3495c <nrf_sendto+0x2c>
   34958:	205f      	movs	r0, #95	; 0x5f
   3495a:	e7f5      	b.n	34948 <nrf_sendto+0x18>
   3495c:	2d00      	cmp	r5, #0
   3495e:	f000 80dc 	beq.w	34b1a <nrf_sendto+0x1ea>
   34962:	f00b fc88 	bl	40276 <sock_is_stream>
   34966:	b9b8      	cbnz	r0, 34998 <nrf_sendto+0x68>
   34968:	4629      	mov	r1, r5
   3496a:	4620      	mov	r0, r4
   3496c:	f00b fd65 	bl	4043a <sock_sockaddr_fam_is_valid>
   34970:	b908      	cbnz	r0, 34976 <nrf_sendto+0x46>
   34972:	206a      	movs	r0, #106	; 0x6a
   34974:	e7e8      	b.n	34948 <nrf_sendto+0x18>
   34976:	4628      	mov	r0, r5
   34978:	990d      	ldr	r1, [sp, #52]	; 0x34
   3497a:	f00b fd4a 	bl	40412 <sock_sockaddr_len_is_valid>
   3497e:	b908      	cbnz	r0, 34984 <nrf_sendto+0x54>
   34980:	2016      	movs	r0, #22
   34982:	e7e1      	b.n	34948 <nrf_sendto+0x18>
   34984:	4620      	mov	r0, r4
   34986:	f00b fc7b 	bl	40280 <sock_is_datagram>
   3498a:	b128      	cbz	r0, 34998 <nrf_sendto+0x68>
   3498c:	4620      	mov	r0, r4
   3498e:	f00b fc81 	bl	40294 <sock_proto_is_secure>
   34992:	b108      	cbz	r0, 34998 <nrf_sendto+0x68>
   34994:	207f      	movs	r0, #127	; 0x7f
   34996:	e7d7      	b.n	34948 <nrf_sendto+0x18>
   34998:	4620      	mov	r0, r4
   3499a:	f00b fc9b 	bl	402d4 <sock_is_closed>
   3499e:	b108      	cbz	r0, 349a4 <nrf_sendto+0x74>
   349a0:	69a0      	ldr	r0, [r4, #24]
   349a2:	e7d1      	b.n	34948 <nrf_sendto+0x18>
   349a4:	4620      	mov	r0, r4
   349a6:	f00b fceb 	bl	40380 <sock_sndtimeo_ms_get>
   349aa:	9000      	str	r0, [sp, #0]
   349ac:	4620      	mov	r0, r4
   349ae:	f00b fc89 	bl	402c4 <sock_is_nonblock>
   349b2:	bb18      	cbnz	r0, 349fc <nrf_sendto+0xcc>
   349b4:	f3c6 1880 	ubfx	r8, r6, #6, #1
   349b8:	4620      	mov	r0, r4
   349ba:	f00b fc5c 	bl	40276 <sock_is_stream>
   349be:	b140      	cbz	r0, 349d2 <nrf_sendto+0xa2>
   349c0:	4620      	mov	r0, r4
   349c2:	f00b fc67 	bl	40294 <sock_proto_is_secure>
   349c6:	b120      	cbz	r0, 349d2 <nrf_sendto+0xa2>
   349c8:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
   349cc:	bf28      	it	cs
   349ce:	f44f 6700 	movcs.w	r7, #2048	; 0x800
   349d2:	4620      	mov	r0, r4
   349d4:	f00b fc89 	bl	402ea <sock_has_flow_control>
   349d8:	b118      	cbz	r0, 349e2 <nrf_sendto+0xb2>
   349da:	4620      	mov	r0, r4
   349dc:	f00b fc7a 	bl	402d4 <sock_is_closed>
   349e0:	b178      	cbz	r0, 34a02 <nrf_sendto+0xd2>
   349e2:	4638      	mov	r0, r7
   349e4:	f00b fafc 	bl	3ffe0 <rpc_client_request_alloc>
   349e8:	4683      	mov	fp, r0
   349ea:	b9b8      	cbnz	r0, 34a1c <nrf_sendto+0xec>
   349ec:	4669      	mov	r1, sp
   349ee:	f7f0 fe95 	bl	2571c <nrf_modem_os_timedwait>
   349f2:	b980      	cbnz	r0, 34a16 <nrf_sendto+0xe6>
   349f4:	f1b8 0f00 	cmp.w	r8, #0
   349f8:	d0f3      	beq.n	349e2 <nrf_sendto+0xb2>
   349fa:	e005      	b.n	34a08 <nrf_sendto+0xd8>
   349fc:	f04f 0801 	mov.w	r8, #1
   34a00:	e7da      	b.n	349b8 <nrf_sendto+0x88>
   34a02:	f1b8 0f00 	cmp.w	r8, #0
   34a06:	d001      	beq.n	34a0c <nrf_sendto+0xdc>
   34a08:	200b      	movs	r0, #11
   34a0a:	e79d      	b.n	34948 <nrf_sendto+0x18>
   34a0c:	4669      	mov	r1, sp
   34a0e:	f7f0 fe85 	bl	2571c <nrf_modem_os_timedwait>
   34a12:	2800      	cmp	r0, #0
   34a14:	d0dd      	beq.n	349d2 <nrf_sendto+0xa2>
   34a16:	f00c fcc7 	bl	413a8 <abs>
   34a1a:	e795      	b.n	34948 <nrf_sendto+0x18>
   34a1c:	f8c0 a010 	str.w	sl, [r0, #16]
   34a20:	f1b9 0f00 	cmp.w	r9, #0
   34a24:	d004      	beq.n	34a30 <nrf_sendto+0x100>
   34a26:	463a      	mov	r2, r7
   34a28:	4649      	mov	r1, r9
   34a2a:	6800      	ldr	r0, [r0, #0]
   34a2c:	f00c fce2 	bl	413f4 <memcpy>
   34a30:	6b22      	ldr	r2, [r4, #48]	; 0x30
   34a32:	b112      	cbz	r2, 34a3a <nrf_sendto+0x10a>
   34a34:	4316      	orrs	r6, r2
   34a36:	2200      	movs	r2, #0
   34a38:	6322      	str	r2, [r4, #48]	; 0x30
   34a3a:	2d00      	cmp	r5, #0
   34a3c:	d044      	beq.n	34ac8 <nrf_sendto+0x198>
   34a3e:	4620      	mov	r0, r4
   34a40:	f00b fc19 	bl	40276 <sock_is_stream>
   34a44:	2800      	cmp	r0, #0
   34a46:	d13f      	bne.n	34ac8 <nrf_sendto+0x198>
   34a48:	2218      	movs	r2, #24
   34a4a:	f88b 2008 	strb.w	r2, [fp, #8]
   34a4e:	686a      	ldr	r2, [r5, #4]
   34a50:	f88b 0009 	strb.w	r0, [fp, #9]
   34a54:	2a01      	cmp	r2, #1
   34a56:	f88b 000a 	strb.w	r0, [fp, #10]
   34a5a:	f88b 000b 	strb.w	r0, [fp, #11]
   34a5e:	f8cb 6014 	str.w	r6, [fp, #20]
   34a62:	d011      	beq.n	34a88 <nrf_sendto+0x158>
   34a64:	2a02      	cmp	r2, #2
   34a66:	d01b      	beq.n	34aa0 <nrf_sendto+0x170>
   34a68:	f247 0007 	movw	r0, #28679	; 0x7007
   34a6c:	4659      	mov	r1, fp
   34a6e:	aa01      	add	r2, sp, #4
   34a70:	f000 fa02 	bl	34e78 <req_forward>
   34a74:	4603      	mov	r3, r0
   34a76:	bbb0      	cbnz	r0, 34ae6 <nrf_sendto+0x1b6>
   34a78:	9801      	ldr	r0, [sp, #4]
   34a7a:	6984      	ldr	r4, [r0, #24]
   34a7c:	f00b fabd 	bl	3fffa <rpc_client_message_free>
   34a80:	4620      	mov	r0, r4
   34a82:	b003      	add	sp, #12
   34a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34a88:	892a      	ldrh	r2, [r5, #8]
   34a8a:	f88b 001b 	strb.w	r0, [fp, #27]
   34a8e:	f8ab 2018 	strh.w	r2, [fp, #24]
   34a92:	2204      	movs	r2, #4
   34a94:	f88b 201a 	strb.w	r2, [fp, #26]
   34a98:	68ea      	ldr	r2, [r5, #12]
   34a9a:	f8cb 201c 	str.w	r2, [fp, #28]
   34a9e:	e7e3      	b.n	34a68 <nrf_sendto+0x138>
   34aa0:	892a      	ldrh	r2, [r5, #8]
   34aa2:	f10b 011c 	add.w	r1, fp, #28
   34aa6:	f8ab 2018 	strh.w	r2, [fp, #24]
   34aaa:	2210      	movs	r2, #16
   34aac:	f88b 001b 	strb.w	r0, [fp, #27]
   34ab0:	f88b 201a 	strb.w	r2, [fp, #26]
   34ab4:	f105 0020 	add.w	r0, r5, #32
   34ab8:	18aa      	adds	r2, r5, r2
   34aba:	f852 cb04 	ldr.w	ip, [r2], #4
   34abe:	4282      	cmp	r2, r0
   34ac0:	f841 cb04 	str.w	ip, [r1], #4
   34ac4:	d1f9      	bne.n	34aba <nrf_sendto+0x18a>
   34ac6:	e7cf      	b.n	34a68 <nrf_sendto+0x138>
   34ac8:	2200      	movs	r2, #0
   34aca:	2104      	movs	r1, #4
   34acc:	f247 0006 	movw	r0, #28678	; 0x7006
   34ad0:	f88b 1008 	strb.w	r1, [fp, #8]
   34ad4:	f88b 2009 	strb.w	r2, [fp, #9]
   34ad8:	f88b 200a 	strb.w	r2, [fp, #10]
   34adc:	f88b 200b 	strb.w	r2, [fp, #11]
   34ae0:	f8cb 6014 	str.w	r6, [fp, #20]
   34ae4:	e7c2      	b.n	34a6c <nrf_sendto+0x13c>
   34ae6:	286e      	cmp	r0, #110	; 0x6e
   34ae8:	f43f af2e 	beq.w	34948 <nrf_sendto+0x18>
   34aec:	280c      	cmp	r0, #12
   34aee:	dc09      	bgt.n	34b04 <nrf_sendto+0x1d4>
   34af0:	280a      	cmp	r0, #10
   34af2:	dd0a      	ble.n	34b0a <nrf_sendto+0x1da>
   34af4:	4b0f      	ldr	r3, [pc, #60]	; (34b34 <nrf_sendto+0x204>)
   34af6:	7818      	ldrb	r0, [r3, #0]
   34af8:	b148      	cbz	r0, 34b0e <nrf_sendto+0x1de>
   34afa:	f1b8 0f00 	cmp.w	r8, #0
   34afe:	f43f af68 	beq.w	349d2 <nrf_sendto+0xa2>
   34b02:	e781      	b.n	34a08 <nrf_sendto+0xd8>
   34b04:	288c      	cmp	r0, #140	; 0x8c
   34b06:	f43f af1f 	beq.w	34948 <nrf_sendto+0x18>
   34b0a:	4618      	mov	r0, r3
   34b0c:	e71c      	b.n	34948 <nrf_sendto+0x18>
   34b0e:	4669      	mov	r1, sp
   34b10:	f7f0 fe04 	bl	2571c <nrf_modem_os_timedwait>
   34b14:	2800      	cmp	r0, #0
   34b16:	d0f0      	beq.n	34afa <nrf_sendto+0x1ca>
   34b18:	e77d      	b.n	34a16 <nrf_sendto+0xe6>
   34b1a:	f00b fbb1 	bl	40280 <sock_is_datagram>
   34b1e:	2800      	cmp	r0, #0
   34b20:	f43f af3a 	beq.w	34998 <nrf_sendto+0x68>
   34b24:	4620      	mov	r0, r4
   34b26:	f00b fbc5 	bl	402b4 <sock_is_connected>
   34b2a:	2800      	cmp	r0, #0
   34b2c:	f47f af34 	bne.w	34998 <nrf_sendto+0x68>
   34b30:	2079      	movs	r0, #121	; 0x79
   34b32:	e709      	b.n	34948 <nrf_sendto+0x18>
   34b34:	2001d3c0 	.word	0x2001d3c0

00034b38 <nrf_setsockopt>:
   34b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34b3c:	b085      	sub	sp, #20
   34b3e:	4680      	mov	r8, r0
   34b40:	4689      	mov	r9, r1
   34b42:	4617      	mov	r7, r2
   34b44:	461d      	mov	r5, r3
   34b46:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   34b48:	f7ff fb2a 	bl	341a0 <sock_find>
   34b4c:	b928      	cbnz	r0, 34b5a <nrf_setsockopt+0x22>
   34b4e:	2009      	movs	r0, #9
   34b50:	f7f0 fea6 	bl	258a0 <nrf_modem_os_errno_set>
   34b54:	f04f 34ff 	mov.w	r4, #4294967295
   34b58:	e06d      	b.n	34c36 <nrf_setsockopt+0xfe>
   34b5a:	b915      	cbnz	r5, 34b62 <nrf_setsockopt+0x2a>
   34b5c:	b10c      	cbz	r4, 34b62 <nrf_setsockopt+0x2a>
   34b5e:	2016      	movs	r0, #22
   34b60:	e7f6      	b.n	34b50 <nrf_setsockopt+0x18>
   34b62:	f5b9 7f8d 	cmp.w	r9, #282	; 0x11a
   34b66:	d12c      	bne.n	34bc2 <nrf_setsockopt+0x8a>
   34b68:	1e7b      	subs	r3, r7, #1
   34b6a:	2b08      	cmp	r3, #8
   34b6c:	d829      	bhi.n	34bc2 <nrf_setsockopt+0x8a>
   34b6e:	e8df f003 	tbb	[pc, r3]
   34b72:	0c05      	.short	0x0c05
   34b74:	a7211a13 	.word	0xa7211a13
   34b78:	a728      	.short	0xa728
   34b7a:	a7          	.byte	0xa7
   34b7b:	00          	.byte	0x00
   34b7c:	4622      	mov	r2, r4
   34b7e:	4629      	mov	r1, r5
   34b80:	b005      	add	sp, #20
   34b82:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34b86:	f00c b802 	b.w	40b8e <tls_setopt_role>
   34b8a:	4622      	mov	r2, r4
   34b8c:	4629      	mov	r1, r5
   34b8e:	b005      	add	sp, #20
   34b90:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34b94:	f00c b812 	b.w	40bbc <tls_setopt_taglist>
   34b98:	4622      	mov	r2, r4
   34b9a:	4629      	mov	r1, r5
   34b9c:	b005      	add	sp, #20
   34b9e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34ba2:	f00c b81e 	b.w	40be2 <tls_setopt_sess_cache>
   34ba6:	4622      	mov	r2, r4
   34ba8:	4629      	mov	r1, r5
   34baa:	b005      	add	sp, #20
   34bac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34bb0:	f00c b829 	b.w	40c06 <tls_setopt_peer_verify>
   34bb4:	4622      	mov	r2, r4
   34bb6:	4629      	mov	r1, r5
   34bb8:	b005      	add	sp, #20
   34bba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34bbe:	f00c b831 	b.w	40c24 <tls_setopt_hostname>
   34bc2:	2f37      	cmp	r7, #55	; 0x37
   34bc4:	dc07      	bgt.n	34bd6 <nrf_setsockopt+0x9e>
   34bc6:	2f31      	cmp	r7, #49	; 0x31
   34bc8:	dc07      	bgt.n	34bda <nrf_setsockopt+0xa2>
   34bca:	2f02      	cmp	r7, #2
   34bcc:	d078      	beq.n	34cc0 <nrf_setsockopt+0x188>
   34bce:	f1a7 0314 	sub.w	r3, r7, #20
   34bd2:	2b0c      	cmp	r3, #12
   34bd4:	d90a      	bls.n	34bec <nrf_setsockopt+0xb4>
   34bd6:	206d      	movs	r0, #109	; 0x6d
   34bd8:	e7ba      	b.n	34b50 <nrf_setsockopt+0x18>
   34bda:	f1a7 0333 	sub.w	r3, r7, #51	; 0x33
   34bde:	2b04      	cmp	r3, #4
   34be0:	d849      	bhi.n	34c76 <nrf_setsockopt+0x13e>
   34be2:	e8df f003 	tbb	[pc, r3]
   34be6:	3f3b      	.short	0x3f3b
   34be8:	4542      	.short	0x4542
   34bea:	6d          	.byte	0x6d
   34beb:	00          	.byte	0x00
   34bec:	2b0c      	cmp	r3, #12
   34bee:	d8f2      	bhi.n	34bd6 <nrf_setsockopt+0x9e>
   34bf0:	a201      	add	r2, pc, #4	; (adr r2, 34bf8 <nrf_setsockopt+0xc0>)
   34bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   34bf6:	bf00      	nop
   34bf8:	00034c2d 	.word	0x00034c2d
   34bfc:	00034c3f 	.word	0x00034c3f
   34c00:	00034bd7 	.word	0x00034bd7
   34c04:	00034bd7 	.word	0x00034bd7
   34c08:	00034bd7 	.word	0x00034bd7
   34c0c:	00034c91 	.word	0x00034c91
   34c10:	00034bd7 	.word	0x00034bd7
   34c14:	00034bd7 	.word	0x00034bd7
   34c18:	00034bd7 	.word	0x00034bd7
   34c1c:	00034bd7 	.word	0x00034bd7
   34c20:	00034cc1 	.word	0x00034cc1
   34c24:	00034cc1 	.word	0x00034cc1
   34c28:	00034cc1 	.word	0x00034cc1
   34c2c:	f100 0320 	add.w	r3, r0, #32
   34c30:	b954      	cbnz	r4, 34c48 <nrf_setsockopt+0x110>
   34c32:	6204      	str	r4, [r0, #32]
   34c34:	605c      	str	r4, [r3, #4]
   34c36:	4620      	mov	r0, r4
   34c38:	b005      	add	sp, #20
   34c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   34c3e:	f100 0328 	add.w	r3, r0, #40	; 0x28
   34c42:	b90c      	cbnz	r4, 34c48 <nrf_setsockopt+0x110>
   34c44:	6284      	str	r4, [r0, #40]	; 0x28
   34c46:	e7f5      	b.n	34c34 <nrf_setsockopt+0xfc>
   34c48:	2c08      	cmp	r4, #8
   34c4a:	4622      	mov	r2, r4
   34c4c:	4629      	mov	r1, r5
   34c4e:	bf28      	it	cs
   34c50:	2208      	movcs	r2, #8
   34c52:	4618      	mov	r0, r3
   34c54:	f00c fbce 	bl	413f4 <memcpy>
   34c58:	2400      	movs	r4, #0
   34c5a:	e7ec      	b.n	34c36 <nrf_setsockopt+0xfe>
   34c5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   34c60:	6303      	str	r3, [r0, #48]	; 0x30
   34c62:	e7f9      	b.n	34c58 <nrf_setsockopt+0x120>
   34c64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   34c68:	e7fa      	b.n	34c60 <nrf_setsockopt+0x128>
   34c6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   34c6e:	e7f7      	b.n	34c60 <nrf_setsockopt+0x128>
   34c70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   34c74:	e7f4      	b.n	34c60 <nrf_setsockopt+0x128>
   34c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   34c7a:	6303      	str	r3, [r0, #48]	; 0x30
   34c7c:	2300      	movs	r3, #0
   34c7e:	4640      	mov	r0, r8
   34c80:	461a      	mov	r2, r3
   34c82:	4619      	mov	r1, r3
   34c84:	e9cd 3300 	strd	r3, r3, [sp]
   34c88:	f7ff fe52 	bl	34930 <nrf_sendto>
   34c8c:	4604      	mov	r4, r0
   34c8e:	e7d2      	b.n	34c36 <nrf_setsockopt+0xfe>
   34c90:	2d00      	cmp	r5, #0
   34c92:	f43f af64 	beq.w	34b5e <nrf_setsockopt+0x26>
   34c96:	4822      	ldr	r0, [pc, #136]	; (34d20 <nrf_setsockopt+0x1e8>)
   34c98:	f7e8 fad3 	bl	1d242 <strlen>
   34c9c:	4920      	ldr	r1, [pc, #128]	; (34d20 <nrf_setsockopt+0x1e8>)
   34c9e:	4602      	mov	r2, r0
   34ca0:	4628      	mov	r0, r5
   34ca2:	f00c fb97 	bl	413d4 <memcmp>
   34ca6:	4604      	mov	r4, r0
   34ca8:	b988      	cbnz	r0, 34cce <nrf_setsockopt+0x196>
   34caa:	481d      	ldr	r0, [pc, #116]	; (34d20 <nrf_setsockopt+0x1e8>)
   34cac:	f7e8 fac9 	bl	1d242 <strlen>
   34cb0:	220a      	movs	r2, #10
   34cb2:	4621      	mov	r1, r4
   34cb4:	4428      	add	r0, r5
   34cb6:	f005 feff 	bl	3aab8 <strtoul>
   34cba:	2404      	movs	r4, #4
   34cbc:	9003      	str	r0, [sp, #12]
   34cbe:	ad03      	add	r5, sp, #12
   34cc0:	4620      	mov	r0, r4
   34cc2:	f00b f98d 	bl	3ffe0 <rpc_client_request_alloc>
   34cc6:	4606      	mov	r6, r0
   34cc8:	b928      	cbnz	r0, 34cd6 <nrf_setsockopt+0x19e>
   34cca:	2069      	movs	r0, #105	; 0x69
   34ccc:	e740      	b.n	34b50 <nrf_setsockopt+0x18>
   34cce:	220a      	movs	r2, #10
   34cd0:	2100      	movs	r1, #0
   34cd2:	4628      	mov	r0, r5
   34cd4:	e7ef      	b.n	34cb6 <nrf_setsockopt+0x17e>
   34cd6:	2308      	movs	r3, #8
   34cd8:	f8c0 8010 	str.w	r8, [r0, #16]
   34cdc:	f04f 0800 	mov.w	r8, #0
   34ce0:	7203      	strb	r3, [r0, #8]
   34ce2:	f880 8009 	strb.w	r8, [r0, #9]
   34ce6:	f880 800a 	strb.w	r8, [r0, #10]
   34cea:	f880 800b 	strb.w	r8, [r0, #11]
   34cee:	4648      	mov	r0, r9
   34cf0:	f00c f88f 	bl	40e12 <nrf_sol_to_rpc_sol>
   34cf4:	6170      	str	r0, [r6, #20]
   34cf6:	4638      	mov	r0, r7
   34cf8:	f000 f8a6 	bl	34e48 <nrf_so_to_rpc_so>
   34cfc:	4622      	mov	r2, r4
   34cfe:	4629      	mov	r1, r5
   34d00:	61b0      	str	r0, [r6, #24]
   34d02:	6830      	ldr	r0, [r6, #0]
   34d04:	f00c fb76 	bl	413f4 <memcpy>
   34d08:	6074      	str	r4, [r6, #4]
   34d0a:	4642      	mov	r2, r8
   34d0c:	4631      	mov	r1, r6
   34d0e:	f247 0003 	movw	r0, #28675	; 0x7003
   34d12:	f000 f8b1 	bl	34e78 <req_forward>
   34d16:	4604      	mov	r4, r0
   34d18:	2800      	cmp	r0, #0
   34d1a:	d08c      	beq.n	34c36 <nrf_setsockopt+0xfe>
   34d1c:	e718      	b.n	34b50 <nrf_setsockopt+0x18>
   34d1e:	bf00      	nop
   34d20:	0004b9b0 	.word	0x0004b9b0

00034d24 <on_tls_attach_res>:
   34d24:	b510      	push	{r4, lr}
   34d26:	6940      	ldr	r0, [r0, #20]
   34d28:	460c      	mov	r4, r1
   34d2a:	b130      	cbz	r0, 34d3a <on_tls_attach_res+0x16>
   34d2c:	f000 f898 	bl	34e60 <rpc_error_to_nrf_errno>
   34d30:	4b03      	ldr	r3, [pc, #12]	; (34d40 <on_tls_attach_res+0x1c>)
   34d32:	61a0      	str	r0, [r4, #24]
   34d34:	6818      	ldr	r0, [r3, #0]
   34d36:	f7f0 fdff 	bl	25938 <nrf_modem_os_sem_give>
   34d3a:	2000      	movs	r0, #0
   34d3c:	bd10      	pop	{r4, pc}
   34d3e:	bf00      	nop
   34d40:	2001a4bc 	.word	0x2001a4bc

00034d44 <on_tls_handshake_ntf>:
   34d44:	b510      	push	{r4, lr}
   34d46:	6900      	ldr	r0, [r0, #16]
   34d48:	460c      	mov	r4, r1
   34d4a:	b958      	cbnz	r0, 34d64 <on_tls_handshake_ntf+0x20>
   34d4c:	7f0b      	ldrb	r3, [r1, #28]
   34d4e:	f023 0318 	bic.w	r3, r3, #24
   34d52:	f043 0318 	orr.w	r3, r3, #24
   34d56:	770b      	strb	r3, [r1, #28]
   34d58:	4b04      	ldr	r3, [pc, #16]	; (34d6c <on_tls_handshake_ntf+0x28>)
   34d5a:	6818      	ldr	r0, [r3, #0]
   34d5c:	f7f0 fdec 	bl	25938 <nrf_modem_os_sem_give>
   34d60:	2000      	movs	r0, #0
   34d62:	bd10      	pop	{r4, pc}
   34d64:	f000 f87c 	bl	34e60 <rpc_error_to_nrf_errno>
   34d68:	61a0      	str	r0, [r4, #24]
   34d6a:	e7f5      	b.n	34d58 <on_tls_handshake_ntf+0x14>
   34d6c:	2001a4bc 	.word	0x2001a4bc

00034d70 <tls_attach>:
   34d70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   34d74:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 34e44 <tls_attach+0xd4>
   34d78:	4606      	mov	r6, r0
   34d7a:	f8d8 0000 	ldr.w	r0, [r8]
   34d7e:	9101      	str	r1, [sp, #4]
   34d80:	f7f0 fdfa 	bl	25978 <nrf_modem_os_sem_take>
   34d84:	4607      	mov	r7, r0
   34d86:	b120      	cbz	r0, 34d92 <tls_attach+0x22>
   34d88:	2310      	movs	r3, #16
   34d8a:	61b3      	str	r3, [r6, #24]
   34d8c:	f04f 37ff 	mov.w	r7, #4294967295
   34d90:	e054      	b.n	34e3c <tls_attach+0xcc>
   34d92:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   34d94:	b1a8      	cbz	r0, 34dc2 <tls_attach+0x52>
   34d96:	f7e8 fa54 	bl	1d242 <strlen>
   34d9a:	1c45      	adds	r5, r0, #1
   34d9c:	4628      	mov	r0, r5
   34d9e:	f00b f91f 	bl	3ffe0 <rpc_client_request_alloc>
   34da2:	4604      	mov	r4, r0
   34da4:	b978      	cbnz	r0, 34dc6 <tls_attach+0x56>
   34da6:	4630      	mov	r0, r6
   34da8:	f00b fa8c 	bl	402c4 <sock_is_nonblock>
   34dac:	b108      	cbz	r0, 34db2 <tls_attach+0x42>
   34dae:	2369      	movs	r3, #105	; 0x69
   34db0:	61b3      	str	r3, [r6, #24]
   34db2:	f8d8 0000 	ldr.w	r0, [r8]
   34db6:	f7f0 fdbf 	bl	25938 <nrf_modem_os_sem_give>
   34dba:	2069      	movs	r0, #105	; 0x69
   34dbc:	f7f0 fd70 	bl	258a0 <nrf_modem_os_errno_set>
   34dc0:	e7e4      	b.n	34d8c <tls_attach+0x1c>
   34dc2:	463d      	mov	r5, r7
   34dc4:	e7ea      	b.n	34d9c <tls_attach+0x2c>
   34dc6:	6833      	ldr	r3, [r6, #0]
   34dc8:	f106 013c 	add.w	r1, r6, #60	; 0x3c
   34dcc:	6103      	str	r3, [r0, #16]
   34dce:	f896 203f 	ldrb.w	r2, [r6, #63]	; 0x3f
   34dd2:	3014      	adds	r0, #20
   34dd4:	3201      	adds	r2, #1
   34dd6:	0092      	lsls	r2, r2, #2
   34dd8:	f840 2c0c 	str.w	r2, [r0, #-12]
   34ddc:	f00c fb0a 	bl	413f4 <memcpy>
   34de0:	b1b5      	cbz	r5, 34e10 <tls_attach+0xa0>
   34de2:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   34de4:	6820      	ldr	r0, [r4, #0]
   34de6:	f00c fcf0 	bl	417ca <strcpy>
   34dea:	6065      	str	r5, [r4, #4]
   34dec:	2004      	movs	r0, #4
   34dee:	4622      	mov	r2, r4
   34df0:	f247 0181 	movw	r1, #28801	; 0x7081
   34df4:	f00b f8fa 	bl	3ffec <rpc_client_request_send>
   34df8:	4630      	mov	r0, r6
   34dfa:	f00b fa63 	bl	402c4 <sock_is_nonblock>
   34dfe:	b9e8      	cbnz	r0, 34e3c <tls_attach+0xcc>
   34e00:	4630      	mov	r0, r6
   34e02:	f00b fa5b 	bl	402bc <sock_is_secured>
   34e06:	69b3      	ldr	r3, [r6, #24]
   34e08:	b9b0      	cbnz	r0, 34e38 <tls_attach+0xc8>
   34e0a:	b153      	cbz	r3, 34e22 <tls_attach+0xb2>
   34e0c:	4618      	mov	r0, r3
   34e0e:	e7d5      	b.n	34dbc <tls_attach+0x4c>
   34e10:	7025      	strb	r5, [r4, #0]
   34e12:	7065      	strb	r5, [r4, #1]
   34e14:	70a5      	strb	r5, [r4, #2]
   34e16:	70e5      	strb	r5, [r4, #3]
   34e18:	7125      	strb	r5, [r4, #4]
   34e1a:	7165      	strb	r5, [r4, #5]
   34e1c:	71a5      	strb	r5, [r4, #6]
   34e1e:	71e5      	strb	r5, [r4, #7]
   34e20:	e7e4      	b.n	34dec <tls_attach+0x7c>
   34e22:	a901      	add	r1, sp, #4
   34e24:	f7f0 fc7a 	bl	2571c <nrf_modem_os_timedwait>
   34e28:	2800      	cmp	r0, #0
   34e2a:	d0e9      	beq.n	34e00 <tls_attach+0x90>
   34e2c:	f110 0f0b 	cmn.w	r0, #11
   34e30:	bf0c      	ite	eq
   34e32:	2074      	moveq	r0, #116	; 0x74
   34e34:	206e      	movne	r0, #110	; 0x6e
   34e36:	e7c1      	b.n	34dbc <tls_attach+0x4c>
   34e38:	2b00      	cmp	r3, #0
   34e3a:	d1e7      	bne.n	34e0c <tls_attach+0x9c>
   34e3c:	4638      	mov	r0, r7
   34e3e:	b002      	add	sp, #8
   34e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34e44:	2001a4bc 	.word	0x2001a4bc

00034e48 <nrf_so_to_rpc_so>:
   34e48:	3802      	subs	r0, #2
   34e4a:	2835      	cmp	r0, #53	; 0x35
   34e4c:	bf9a      	itte	ls
   34e4e:	4b03      	ldrls	r3, [pc, #12]	; (34e5c <nrf_so_to_rpc_so+0x14>)
   34e50:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   34e54:	f04f 30ff 	movhi.w	r0, #4294967295
   34e58:	4770      	bx	lr
   34e5a:	bf00      	nop
   34e5c:	00043138 	.word	0x00043138

00034e60 <rpc_error_to_nrf_errno>:
   34e60:	286c      	cmp	r0, #108	; 0x6c
   34e62:	bf9a      	itte	ls
   34e64:	4b02      	ldrls	r3, [pc, #8]	; (34e70 <rpc_error_to_nrf_errno+0x10>)
   34e66:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   34e6a:	4802      	ldrhi	r0, [pc, #8]	; (34e74 <rpc_error_to_nrf_errno+0x14>)
   34e6c:	4770      	bx	lr
   34e6e:	bf00      	nop
   34e70:	00043210 	.word	0x00043210
   34e74:	baadbaad 	.word	0xbaadbaad

00034e78 <req_forward>:
   34e78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   34e7a:	4616      	mov	r6, r2
   34e7c:	b9aa      	cbnz	r2, 34eaa <req_forward+0x32>
   34e7e:	ad01      	add	r5, sp, #4
   34e80:	2300      	movs	r3, #0
   34e82:	460a      	mov	r2, r1
   34e84:	602b      	str	r3, [r5, #0]
   34e86:	60cd      	str	r5, [r1, #12]
   34e88:	b281      	uxth	r1, r0
   34e8a:	2004      	movs	r0, #4
   34e8c:	f00b f8ae 	bl	3ffec <rpc_client_request_send>
   34e90:	4c0c      	ldr	r4, [pc, #48]	; (34ec4 <req_forward+0x4c>)
   34e92:	6828      	ldr	r0, [r5, #0]
   34e94:	b158      	cbz	r0, 34eae <req_forward+0x36>
   34e96:	6940      	ldr	r0, [r0, #20]
   34e98:	f7ff ffe2 	bl	34e60 <rpc_error_to_nrf_errno>
   34e9c:	4604      	mov	r4, r0
   34e9e:	b106      	cbz	r6, 34ea2 <req_forward+0x2a>
   34ea0:	b168      	cbz	r0, 34ebe <req_forward+0x46>
   34ea2:	6828      	ldr	r0, [r5, #0]
   34ea4:	f00b f8a9 	bl	3fffa <rpc_client_message_free>
   34ea8:	e009      	b.n	34ebe <req_forward+0x46>
   34eaa:	4615      	mov	r5, r2
   34eac:	e7e8      	b.n	34e80 <req_forward+0x8>
   34eae:	4621      	mov	r1, r4
   34eb0:	f7f0 fc34 	bl	2571c <nrf_modem_os_timedwait>
   34eb4:	2800      	cmp	r0, #0
   34eb6:	d0ec      	beq.n	34e92 <req_forward+0x1a>
   34eb8:	f00c fa76 	bl	413a8 <abs>
   34ebc:	4604      	mov	r4, r0
   34ebe:	4620      	mov	r0, r4
   34ec0:	b002      	add	sp, #8
   34ec2:	bd70      	pop	{r4, r5, r6, pc}
   34ec4:	20014a60 	.word	0x20014a60

00034ec8 <at_cmd_send>:
   34ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34eca:	4614      	mov	r4, r2
   34ecc:	f06f 0258 	mvn.w	r2, #88	; 0x58
   34ed0:	2300      	movs	r3, #0
   34ed2:	7302      	strb	r2, [r0, #12]
   34ed4:	2204      	movs	r2, #4
   34ed6:	4d0f      	ldr	r5, [pc, #60]	; (34f14 <at_cmd_send+0x4c>)
   34ed8:	7343      	strb	r3, [r0, #13]
   34eda:	7383      	strb	r3, [r0, #14]
   34edc:	73c3      	strb	r3, [r0, #15]
   34ede:	7202      	strb	r2, [r0, #8]
   34ee0:	7243      	strb	r3, [r0, #9]
   34ee2:	7283      	strb	r3, [r0, #10]
   34ee4:	72c3      	strb	r3, [r0, #11]
   34ee6:	4602      	mov	r2, r0
   34ee8:	b289      	uxth	r1, r1
   34eea:	2003      	movs	r0, #3
   34eec:	702b      	strb	r3, [r5, #0]
   34eee:	f00b f87d 	bl	3ffec <rpc_client_request_send>
   34ef2:	f04f 33ff 	mov.w	r3, #4294967295
   34ef6:	9301      	str	r3, [sp, #4]
   34ef8:	782b      	ldrb	r3, [r5, #0]
   34efa:	42a3      	cmp	r3, r4
   34efc:	d101      	bne.n	34f02 <at_cmd_send+0x3a>
   34efe:	2000      	movs	r0, #0
   34f00:	e005      	b.n	34f0e <at_cmd_send+0x46>
   34f02:	2000      	movs	r0, #0
   34f04:	a901      	add	r1, sp, #4
   34f06:	f7f0 fc09 	bl	2571c <nrf_modem_os_timedwait>
   34f0a:	2800      	cmp	r0, #0
   34f0c:	d0f4      	beq.n	34ef8 <at_cmd_send+0x30>
   34f0e:	b003      	add	sp, #12
   34f10:	bd30      	pop	{r4, r5, pc}
   34f12:	bf00      	nop
   34f14:	2001d3c1 	.word	0x2001d3c1

00034f18 <at_response_match>:
   34f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34f1a:	4605      	mov	r5, r0
   34f1c:	2400      	movs	r4, #0
   34f1e:	4f10      	ldr	r7, [pc, #64]	; (34f60 <at_response_match+0x48>)
   34f20:	f857 6b04 	ldr.w	r6, [r7], #4
   34f24:	4628      	mov	r0, r5
   34f26:	4631      	mov	r1, r6
   34f28:	f00c fc9e 	bl	41868 <strstr>
   34f2c:	b928      	cbnz	r0, 34f3a <at_response_match+0x22>
   34f2e:	3401      	adds	r4, #1
   34f30:	2c04      	cmp	r4, #4
   34f32:	d1f5      	bne.n	34f20 <at_response_match+0x8>
   34f34:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   34f38:	e00e      	b.n	34f58 <at_response_match+0x40>
   34f3a:	2c01      	cmp	r4, #1
   34f3c:	d0fa      	beq.n	34f34 <at_response_match+0x1c>
   34f3e:	1ea3      	subs	r3, r4, #2
   34f40:	2b01      	cmp	r3, #1
   34f42:	d80a      	bhi.n	34f5a <at_response_match+0x42>
   34f44:	4630      	mov	r0, r6
   34f46:	f7e8 f97c 	bl	1d242 <strlen>
   34f4a:	220a      	movs	r2, #10
   34f4c:	2100      	movs	r1, #0
   34f4e:	4428      	add	r0, r5
   34f50:	f005 fc96 	bl	3a880 <strtol>
   34f54:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   34f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34f5a:	2000      	movs	r0, #0
   34f5c:	e7fc      	b.n	34f58 <at_response_match+0x40>
   34f5e:	bf00      	nop
   34f60:	000433c4 	.word	0x000433c4

00034f64 <at_vprintf>:
   34f64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   34f68:	4607      	mov	r7, r0
   34f6a:	460e      	mov	r6, r1
   34f6c:	481e      	ldr	r0, [pc, #120]	; (34fe8 <at_vprintf+0x84>)
   34f6e:	2100      	movs	r1, #0
   34f70:	4690      	mov	r8, r2
   34f72:	461d      	mov	r5, r3
   34f74:	9301      	str	r3, [sp, #4]
   34f76:	f005 fda9 	bl	3aacc <vsniprintf>
   34f7a:	3001      	adds	r0, #1
   34f7c:	f00b f830 	bl	3ffe0 <rpc_client_request_alloc>
   34f80:	4604      	mov	r4, r0
   34f82:	b368      	cbz	r0, 34fe0 <at_vprintf+0x7c>
   34f84:	9501      	str	r5, [sp, #4]
   34f86:	6841      	ldr	r1, [r0, #4]
   34f88:	462b      	mov	r3, r5
   34f8a:	4642      	mov	r2, r8
   34f8c:	6800      	ldr	r0, [r0, #0]
   34f8e:	f005 fd9d 	bl	3aacc <vsniprintf>
   34f92:	4620      	mov	r0, r4
   34f94:	2202      	movs	r2, #2
   34f96:	2101      	movs	r1, #1
   34f98:	f7ff ff96 	bl	34ec8 <at_cmd_send>
   34f9c:	4604      	mov	r4, r0
   34f9e:	b970      	cbnz	r0, 34fbe <at_vprintf+0x5a>
   34fa0:	4d12      	ldr	r5, [pc, #72]	; (34fec <at_vprintf+0x88>)
   34fa2:	682c      	ldr	r4, [r5, #0]
   34fa4:	6821      	ldr	r1, [r4, #0]
   34fa6:	b977      	cbnz	r7, 34fc6 <at_vprintf+0x62>
   34fa8:	6820      	ldr	r0, [r4, #0]
   34faa:	f7ff ffb5 	bl	34f18 <at_response_match>
   34fae:	4604      	mov	r4, r0
   34fb0:	682b      	ldr	r3, [r5, #0]
   34fb2:	6818      	ldr	r0, [r3, #0]
   34fb4:	f00b f824 	bl	40000 <rpc_client_data_free>
   34fb8:	6828      	ldr	r0, [r5, #0]
   34fba:	f00b f81e 	bl	3fffa <rpc_client_message_free>
   34fbe:	4620      	mov	r0, r4
   34fc0:	b002      	add	sp, #8
   34fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34fc6:	6862      	ldr	r2, [r4, #4]
   34fc8:	4638      	mov	r0, r7
   34fca:	42b2      	cmp	r2, r6
   34fcc:	bf28      	it	cs
   34fce:	4632      	movcs	r2, r6
   34fd0:	f00c fa10 	bl	413f4 <memcpy>
   34fd4:	6863      	ldr	r3, [r4, #4]
   34fd6:	42b3      	cmp	r3, r6
   34fd8:	d9e6      	bls.n	34fa8 <at_vprintf+0x44>
   34fda:	f06f 0406 	mvn.w	r4, #6
   34fde:	e7e7      	b.n	34fb0 <at_vprintf+0x4c>
   34fe0:	f06f 040b 	mvn.w	r4, #11
   34fe4:	e7eb      	b.n	34fbe <at_vprintf+0x5a>
   34fe6:	bf00      	nop
   34fe8:	00042864 	.word	0x00042864
   34fec:	2001a4d0 	.word	0x2001a4d0

00034ff0 <nrf_modem_at_init>:
   34ff0:	2201      	movs	r2, #1
   34ff2:	b508      	push	{r3, lr}
   34ff4:	4611      	mov	r1, r2
   34ff6:	4808      	ldr	r0, [pc, #32]	; (35018 <nrf_modem_at_init+0x28>)
   34ff8:	f7f0 fc66 	bl	258c8 <nrf_modem_os_sem_init>
   34ffc:	2000      	movs	r0, #0
   34ffe:	f00a ffef 	bl	3ffe0 <rpc_client_request_alloc>
   35002:	b128      	cbz	r0, 35010 <nrf_modem_at_init+0x20>
   35004:	2201      	movs	r2, #1
   35006:	2105      	movs	r1, #5
   35008:	f7ff ff5e 	bl	34ec8 <at_cmd_send>
   3500c:	2000      	movs	r0, #0
   3500e:	bd08      	pop	{r3, pc}
   35010:	f06f 000b 	mvn.w	r0, #11
   35014:	e7fb      	b.n	3500e <nrf_modem_at_init+0x1e>
   35016:	bf00      	nop
   35018:	2001a4c0 	.word	0x2001a4c0

0003501c <nrf_modem_at_notif_handler_set>:
   3501c:	4b01      	ldr	r3, [pc, #4]	; (35024 <nrf_modem_at_notif_handler_set+0x8>)
   3501e:	6018      	str	r0, [r3, #0]
   35020:	2000      	movs	r0, #0
   35022:	4770      	bx	lr
   35024:	2001a4cc 	.word	0x2001a4cc

00035028 <nrf_modem_at_printf>:
   35028:	b40f      	push	{r0, r1, r2, r3}
   3502a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3502c:	9c06      	ldr	r4, [sp, #24]
   3502e:	f000 ff1d 	bl	35e6c <nrf_modem_state_is_initialized>
   35032:	b1b8      	cbz	r0, 35064 <nrf_modem_at_printf+0x3c>
   35034:	b1cc      	cbz	r4, 3506a <nrf_modem_at_printf+0x42>
   35036:	4d0e      	ldr	r5, [pc, #56]	; (35070 <nrf_modem_at_printf+0x48>)
   35038:	f04f 31ff 	mov.w	r1, #4294967295
   3503c:	6828      	ldr	r0, [r5, #0]
   3503e:	f7f0 fc9b 	bl	25978 <nrf_modem_os_sem_take>
   35042:	2100      	movs	r1, #0
   35044:	4622      	mov	r2, r4
   35046:	ab07      	add	r3, sp, #28
   35048:	4608      	mov	r0, r1
   3504a:	9301      	str	r3, [sp, #4]
   3504c:	f7ff ff8a 	bl	34f64 <at_vprintf>
   35050:	4604      	mov	r4, r0
   35052:	6828      	ldr	r0, [r5, #0]
   35054:	f7f0 fc70 	bl	25938 <nrf_modem_os_sem_give>
   35058:	4620      	mov	r0, r4
   3505a:	b003      	add	sp, #12
   3505c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   35060:	b004      	add	sp, #16
   35062:	4770      	bx	lr
   35064:	f04f 34ff 	mov.w	r4, #4294967295
   35068:	e7f6      	b.n	35058 <nrf_modem_at_printf+0x30>
   3506a:	f06f 040d 	mvn.w	r4, #13
   3506e:	e7f3      	b.n	35058 <nrf_modem_at_printf+0x30>
   35070:	2001a4c0 	.word	0x2001a4c0

00035074 <nrf_modem_at_cmd>:
   35074:	b40c      	push	{r2, r3}
   35076:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3507a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   3507c:	4605      	mov	r5, r0
   3507e:	460e      	mov	r6, r1
   35080:	f000 fef4 	bl	35e6c <nrf_modem_state_is_initialized>
   35084:	2800      	cmp	r0, #0
   35086:	d051      	beq.n	3512c <nrf_modem_at_cmd+0xb8>
   35088:	2d00      	cmp	r5, #0
   3508a:	d052      	beq.n	35132 <nrf_modem_at_cmd+0xbe>
   3508c:	2f00      	cmp	r7, #0
   3508e:	d050      	beq.n	35132 <nrf_modem_at_cmd+0xbe>
   35090:	2e00      	cmp	r6, #0
   35092:	d051      	beq.n	35138 <nrf_modem_at_cmd+0xc4>
   35094:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 35140 <nrf_modem_at_cmd+0xcc>
   35098:	f8d9 3000 	ldr.w	r3, [r9]
   3509c:	b1fb      	cbz	r3, 350de <nrf_modem_at_cmd+0x6a>
   3509e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 35144 <nrf_modem_at_cmd+0xd0>
   350a2:	f8d8 3000 	ldr.w	r3, [r8]
   350a6:	b1d3      	cbz	r3, 350de <nrf_modem_at_cmd+0x6a>
   350a8:	2400      	movs	r4, #0
   350aa:	f8d9 3000 	ldr.w	r3, [r9]
   350ae:	429c      	cmp	r4, r3
   350b0:	d215      	bcs.n	350de <nrf_modem_at_cmd+0x6a>
   350b2:	f8d8 3000 	ldr.w	r3, [r8]
   350b6:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
   350ba:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   350be:	f7e8 f8c0 	bl	1d242 <strlen>
   350c2:	f8d8 3000 	ldr.w	r3, [r8]
   350c6:	4602      	mov	r2, r0
   350c8:	4639      	mov	r1, r7
   350ca:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   350ce:	f00c fb84 	bl	417da <strncmp>
   350d2:	b9c8      	cbnz	r0, 35108 <nrf_modem_at_cmd+0x94>
   350d4:	f8d8 3000 	ldr.w	r3, [r8]
   350d8:	4453      	add	r3, sl
   350da:	685b      	ldr	r3, [r3, #4]
   350dc:	b9b3      	cbnz	r3, 3510c <nrf_modem_at_cmd+0x98>
   350de:	f8df 8068 	ldr.w	r8, [pc, #104]	; 35148 <nrf_modem_at_cmd+0xd4>
   350e2:	f04f 31ff 	mov.w	r1, #4294967295
   350e6:	f8d8 0000 	ldr.w	r0, [r8]
   350ea:	f7f0 fc45 	bl	25978 <nrf_modem_os_sem_take>
   350ee:	ab0b      	add	r3, sp, #44	; 0x2c
   350f0:	463a      	mov	r2, r7
   350f2:	4631      	mov	r1, r6
   350f4:	4628      	mov	r0, r5
   350f6:	9301      	str	r3, [sp, #4]
   350f8:	f7ff ff34 	bl	34f64 <at_vprintf>
   350fc:	4604      	mov	r4, r0
   350fe:	f8d8 0000 	ldr.w	r0, [r8]
   35102:	f7f0 fc19 	bl	25938 <nrf_modem_os_sem_give>
   35106:	e00b      	b.n	35120 <nrf_modem_at_cmd+0xac>
   35108:	3401      	adds	r4, #1
   3510a:	e7ce      	b.n	350aa <nrf_modem_at_cmd+0x36>
   3510c:	463a      	mov	r2, r7
   3510e:	4631      	mov	r1, r6
   35110:	4628      	mov	r0, r5
   35112:	4798      	blx	r3
   35114:	1e04      	subs	r4, r0, #0
   35116:	db03      	blt.n	35120 <nrf_modem_at_cmd+0xac>
   35118:	4628      	mov	r0, r5
   3511a:	f7ff fefd 	bl	34f18 <at_response_match>
   3511e:	4604      	mov	r4, r0
   35120:	4620      	mov	r0, r4
   35122:	b002      	add	sp, #8
   35124:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35128:	b002      	add	sp, #8
   3512a:	4770      	bx	lr
   3512c:	f04f 34ff 	mov.w	r4, #4294967295
   35130:	e7f6      	b.n	35120 <nrf_modem_at_cmd+0xac>
   35132:	f06f 040d 	mvn.w	r4, #13
   35136:	e7f3      	b.n	35120 <nrf_modem_at_cmd+0xac>
   35138:	f06f 0415 	mvn.w	r4, #21
   3513c:	e7f0      	b.n	35120 <nrf_modem_at_cmd+0xac>
   3513e:	bf00      	nop
   35140:	2001a4c8 	.word	0x2001a4c8
   35144:	2001a4c4 	.word	0x2001a4c4
   35148:	2001a4c0 	.word	0x2001a4c0

0003514c <nrf_modem_at_scanf>:
   3514c:	b40e      	push	{r1, r2, r3}
   3514e:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   35150:	9f07      	ldr	r7, [sp, #28]
   35152:	4605      	mov	r5, r0
   35154:	f000 fe8a 	bl	35e6c <nrf_modem_state_is_initialized>
   35158:	2800      	cmp	r0, #0
   3515a:	d03b      	beq.n	351d4 <nrf_modem_at_scanf+0x88>
   3515c:	2d00      	cmp	r5, #0
   3515e:	d03c      	beq.n	351da <nrf_modem_at_scanf+0x8e>
   35160:	2f00      	cmp	r7, #0
   35162:	d03a      	beq.n	351da <nrf_modem_at_scanf+0x8e>
   35164:	4e1e      	ldr	r6, [pc, #120]	; (351e0 <nrf_modem_at_scanf+0x94>)
   35166:	f04f 31ff 	mov.w	r1, #4294967295
   3516a:	6830      	ldr	r0, [r6, #0]
   3516c:	f7f0 fc04 	bl	25978 <nrf_modem_os_sem_take>
   35170:	4628      	mov	r0, r5
   35172:	f7e8 f866 	bl	1d242 <strlen>
   35176:	3001      	adds	r0, #1
   35178:	f00a ff32 	bl	3ffe0 <rpc_client_request_alloc>
   3517c:	4604      	mov	r4, r0
   3517e:	b330      	cbz	r0, 351ce <nrf_modem_at_scanf+0x82>
   35180:	4629      	mov	r1, r5
   35182:	6800      	ldr	r0, [r0, #0]
   35184:	f00c fb21 	bl	417ca <strcpy>
   35188:	4620      	mov	r0, r4
   3518a:	2202      	movs	r2, #2
   3518c:	2101      	movs	r1, #1
   3518e:	f7ff fe9b 	bl	34ec8 <at_cmd_send>
   35192:	4604      	mov	r4, r0
   35194:	b990      	cbnz	r0, 351bc <nrf_modem_at_scanf+0x70>
   35196:	4d13      	ldr	r5, [pc, #76]	; (351e4 <nrf_modem_at_scanf+0x98>)
   35198:	aa08      	add	r2, sp, #32
   3519a:	682b      	ldr	r3, [r5, #0]
   3519c:	4639      	mov	r1, r7
   3519e:	6818      	ldr	r0, [r3, #0]
   351a0:	9201      	str	r2, [sp, #4]
   351a2:	f005 fce5 	bl	3ab70 <vsiscanf>
   351a6:	682b      	ldr	r3, [r5, #0]
   351a8:	1e04      	subs	r4, r0, #0
   351aa:	6818      	ldr	r0, [r3, #0]
   351ac:	bf08      	it	eq
   351ae:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   351b2:	f00a ff25 	bl	40000 <rpc_client_data_free>
   351b6:	6828      	ldr	r0, [r5, #0]
   351b8:	f00a ff1f 	bl	3fffa <rpc_client_message_free>
   351bc:	6830      	ldr	r0, [r6, #0]
   351be:	f7f0 fbbb 	bl	25938 <nrf_modem_os_sem_give>
   351c2:	4620      	mov	r0, r4
   351c4:	b002      	add	sp, #8
   351c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   351ca:	b003      	add	sp, #12
   351cc:	4770      	bx	lr
   351ce:	f06f 040b 	mvn.w	r4, #11
   351d2:	e7f3      	b.n	351bc <nrf_modem_at_scanf+0x70>
   351d4:	f04f 34ff 	mov.w	r4, #4294967295
   351d8:	e7f3      	b.n	351c2 <nrf_modem_at_scanf+0x76>
   351da:	f06f 040d 	mvn.w	r4, #13
   351de:	e7f0      	b.n	351c2 <nrf_modem_at_scanf+0x76>
   351e0:	2001a4c0 	.word	0x2001a4c0
   351e4:	2001a4d0 	.word	0x2001a4d0

000351e8 <rpc_at_event_handler>:
   351e8:	b570      	push	{r4, r5, r6, lr}
   351ea:	68c3      	ldr	r3, [r0, #12]
   351ec:	4605      	mov	r5, r0
   351ee:	2ba7      	cmp	r3, #167	; 0xa7
   351f0:	d003      	beq.n	351fa <rpc_at_event_handler+0x12>
   351f2:	6828      	ldr	r0, [r5, #0]
   351f4:	f00a ff04 	bl	40000 <rpc_client_data_free>
   351f8:	e008      	b.n	3520c <rpc_at_event_handler+0x24>
   351fa:	2903      	cmp	r1, #3
   351fc:	d008      	beq.n	35210 <rpc_at_event_handler+0x28>
   351fe:	2904      	cmp	r1, #4
   35200:	d019      	beq.n	35236 <rpc_at_event_handler+0x4e>
   35202:	2902      	cmp	r1, #2
   35204:	d102      	bne.n	3520c <rpc_at_event_handler+0x24>
   35206:	2201      	movs	r2, #1
   35208:	4b0e      	ldr	r3, [pc, #56]	; (35244 <rpc_at_event_handler+0x5c>)
   3520a:	701a      	strb	r2, [r3, #0]
   3520c:	2000      	movs	r0, #0
   3520e:	e00a      	b.n	35226 <rpc_at_event_handler+0x3e>
   35210:	4e0d      	ldr	r6, [pc, #52]	; (35248 <rpc_at_event_handler+0x60>)
   35212:	6833      	ldr	r3, [r6, #0]
   35214:	b143      	cbz	r3, 35228 <rpc_at_event_handler+0x40>
   35216:	2400      	movs	r4, #0
   35218:	6800      	ldr	r0, [r0, #0]
   3521a:	4798      	blx	r3
   3521c:	6828      	ldr	r0, [r5, #0]
   3521e:	6034      	str	r4, [r6, #0]
   35220:	f00a feee 	bl	40000 <rpc_client_data_free>
   35224:	b2e0      	uxtb	r0, r4
   35226:	bd70      	pop	{r4, r5, r6, pc}
   35228:	2202      	movs	r2, #2
   3522a:	4b08      	ldr	r3, [pc, #32]	; (3524c <rpc_at_event_handler+0x64>)
   3522c:	2401      	movs	r4, #1
   3522e:	6018      	str	r0, [r3, #0]
   35230:	4b04      	ldr	r3, [pc, #16]	; (35244 <rpc_at_event_handler+0x5c>)
   35232:	701a      	strb	r2, [r3, #0]
   35234:	e7f6      	b.n	35224 <rpc_at_event_handler+0x3c>
   35236:	4b06      	ldr	r3, [pc, #24]	; (35250 <rpc_at_event_handler+0x68>)
   35238:	681b      	ldr	r3, [r3, #0]
   3523a:	2b00      	cmp	r3, #0
   3523c:	d0d9      	beq.n	351f2 <rpc_at_event_handler+0xa>
   3523e:	6800      	ldr	r0, [r0, #0]
   35240:	4798      	blx	r3
   35242:	e7d6      	b.n	351f2 <rpc_at_event_handler+0xa>
   35244:	2001d3c1 	.word	0x2001d3c1
   35248:	2001a4d4 	.word	0x2001a4d4
   3524c:	2001a4d0 	.word	0x2001a4d0
   35250:	2001a4cc 	.word	0x2001a4cc

00035254 <mfu_client_send>:
   35254:	f04f 33ff 	mov.w	r3, #4294967295
   35258:	b513      	push	{r0, r1, r4, lr}
   3525a:	9301      	str	r3, [sp, #4]
   3525c:	231a      	movs	r3, #26
   3525e:	7303      	strb	r3, [r0, #12]
   35260:	f06f 031e 	mvn.w	r3, #30
   35264:	7343      	strb	r3, [r0, #13]
   35266:	f06f 0354 	mvn.w	r3, #84	; 0x54
   3526a:	7383      	strb	r3, [r0, #14]
   3526c:	2315      	movs	r3, #21
   3526e:	2903      	cmp	r1, #3
   35270:	73c3      	strb	r3, [r0, #15]
   35272:	bf14      	ite	ne
   35274:	2304      	movne	r3, #4
   35276:	2308      	moveq	r3, #8
   35278:	6083      	str	r3, [r0, #8]
   3527a:	2300      	movs	r3, #0
   3527c:	4c0a      	ldr	r4, [pc, #40]	; (352a8 <mfu_client_send+0x54>)
   3527e:	4602      	mov	r2, r0
   35280:	2006      	movs	r0, #6
   35282:	7023      	strb	r3, [r4, #0]
   35284:	f00a feb2 	bl	3ffec <rpc_client_request_send>
   35288:	7823      	ldrb	r3, [r4, #0]
   3528a:	2b01      	cmp	r3, #1
   3528c:	d104      	bne.n	35298 <mfu_client_send+0x44>
   3528e:	4b07      	ldr	r3, [pc, #28]	; (352ac <mfu_client_send+0x58>)
   35290:	681b      	ldr	r3, [r3, #0]
   35292:	6918      	ldr	r0, [r3, #16]
   35294:	4240      	negs	r0, r0
   35296:	e005      	b.n	352a4 <mfu_client_send+0x50>
   35298:	2000      	movs	r0, #0
   3529a:	a901      	add	r1, sp, #4
   3529c:	f7f0 fa3e 	bl	2571c <nrf_modem_os_timedwait>
   352a0:	2800      	cmp	r0, #0
   352a2:	d0f1      	beq.n	35288 <mfu_client_send+0x34>
   352a4:	b002      	add	sp, #8
   352a6:	bd10      	pop	{r4, pc}
   352a8:	2001d3c2 	.word	0x2001d3c2
   352ac:	2001a4d8 	.word	0x2001a4d8

000352b0 <nrf_modem_delta_dfu_offset>:
   352b0:	b538      	push	{r3, r4, r5, lr}
   352b2:	4605      	mov	r5, r0
   352b4:	f000 fdda 	bl	35e6c <nrf_modem_state_is_initialized>
   352b8:	b190      	cbz	r0, 352e0 <nrf_modem_delta_dfu_offset+0x30>
   352ba:	b1a5      	cbz	r5, 352e6 <nrf_modem_delta_dfu_offset+0x36>
   352bc:	2000      	movs	r0, #0
   352be:	f00a fe8f 	bl	3ffe0 <rpc_client_request_alloc>
   352c2:	b198      	cbz	r0, 352ec <nrf_modem_delta_dfu_offset+0x3c>
   352c4:	2109      	movs	r1, #9
   352c6:	f7ff ffc5 	bl	35254 <mfu_client_send>
   352ca:	4b0a      	ldr	r3, [pc, #40]	; (352f4 <nrf_modem_delta_dfu_offset+0x44>)
   352cc:	4604      	mov	r4, r0
   352ce:	b910      	cbnz	r0, 352d6 <nrf_modem_delta_dfu_offset+0x26>
   352d0:	681a      	ldr	r2, [r3, #0]
   352d2:	6952      	ldr	r2, [r2, #20]
   352d4:	602a      	str	r2, [r5, #0]
   352d6:	6818      	ldr	r0, [r3, #0]
   352d8:	f00a fe8f 	bl	3fffa <rpc_client_message_free>
   352dc:	4620      	mov	r0, r4
   352de:	bd38      	pop	{r3, r4, r5, pc}
   352e0:	f04f 34ff 	mov.w	r4, #4294967295
   352e4:	e7fa      	b.n	352dc <nrf_modem_delta_dfu_offset+0x2c>
   352e6:	f06f 040d 	mvn.w	r4, #13
   352ea:	e7f7      	b.n	352dc <nrf_modem_delta_dfu_offset+0x2c>
   352ec:	f06f 040b 	mvn.w	r4, #11
   352f0:	e7f4      	b.n	352dc <nrf_modem_delta_dfu_offset+0x2c>
   352f2:	bf00      	nop
   352f4:	2001a4d8 	.word	0x2001a4d8

000352f8 <nrf_modem_delta_dfu_area>:
   352f8:	b538      	push	{r3, r4, r5, lr}
   352fa:	4605      	mov	r5, r0
   352fc:	f000 fdb6 	bl	35e6c <nrf_modem_state_is_initialized>
   35300:	b190      	cbz	r0, 35328 <nrf_modem_delta_dfu_area+0x30>
   35302:	b1a5      	cbz	r5, 3532e <nrf_modem_delta_dfu_area+0x36>
   35304:	2000      	movs	r0, #0
   35306:	f00a fe6b 	bl	3ffe0 <rpc_client_request_alloc>
   3530a:	b198      	cbz	r0, 35334 <nrf_modem_delta_dfu_area+0x3c>
   3530c:	2102      	movs	r1, #2
   3530e:	f7ff ffa1 	bl	35254 <mfu_client_send>
   35312:	4b0a      	ldr	r3, [pc, #40]	; (3533c <nrf_modem_delta_dfu_area+0x44>)
   35314:	4604      	mov	r4, r0
   35316:	b910      	cbnz	r0, 3531e <nrf_modem_delta_dfu_area+0x26>
   35318:	681a      	ldr	r2, [r3, #0]
   3531a:	6952      	ldr	r2, [r2, #20]
   3531c:	602a      	str	r2, [r5, #0]
   3531e:	6818      	ldr	r0, [r3, #0]
   35320:	f00a fe6b 	bl	3fffa <rpc_client_message_free>
   35324:	4620      	mov	r0, r4
   35326:	bd38      	pop	{r3, r4, r5, pc}
   35328:	f04f 34ff 	mov.w	r4, #4294967295
   3532c:	e7fa      	b.n	35324 <nrf_modem_delta_dfu_area+0x2c>
   3532e:	f06f 040d 	mvn.w	r4, #13
   35332:	e7f7      	b.n	35324 <nrf_modem_delta_dfu_area+0x2c>
   35334:	f06f 040b 	mvn.w	r4, #11
   35338:	e7f4      	b.n	35324 <nrf_modem_delta_dfu_area+0x2c>
   3533a:	bf00      	nop
   3533c:	2001a4d8 	.word	0x2001a4d8

00035340 <nrf_modem_delta_dfu_uuid>:
   35340:	b538      	push	{r3, r4, r5, lr}
   35342:	4605      	mov	r5, r0
   35344:	f000 fd92 	bl	35e6c <nrf_modem_state_is_initialized>
   35348:	b1c8      	cbz	r0, 3537e <nrf_modem_delta_dfu_uuid+0x3e>
   3534a:	b1dd      	cbz	r5, 35384 <nrf_modem_delta_dfu_uuid+0x44>
   3534c:	2000      	movs	r0, #0
   3534e:	f00a fe47 	bl	3ffe0 <rpc_client_request_alloc>
   35352:	b1d0      	cbz	r0, 3538a <nrf_modem_delta_dfu_uuid+0x4a>
   35354:	2101      	movs	r1, #1
   35356:	f7ff ff7d 	bl	35254 <mfu_client_send>
   3535a:	490d      	ldr	r1, [pc, #52]	; (35390 <nrf_modem_delta_dfu_uuid+0x50>)
   3535c:	4604      	mov	r4, r0
   3535e:	b948      	cbnz	r0, 35374 <nrf_modem_delta_dfu_uuid+0x34>
   35360:	680b      	ldr	r3, [r1, #0]
   35362:	f103 0214 	add.w	r2, r3, #20
   35366:	3338      	adds	r3, #56	; 0x38
   35368:	f852 0b04 	ldr.w	r0, [r2], #4
   3536c:	429a      	cmp	r2, r3
   3536e:	f845 0b04 	str.w	r0, [r5], #4
   35372:	d1f9      	bne.n	35368 <nrf_modem_delta_dfu_uuid+0x28>
   35374:	6808      	ldr	r0, [r1, #0]
   35376:	f00a fe40 	bl	3fffa <rpc_client_message_free>
   3537a:	4620      	mov	r0, r4
   3537c:	bd38      	pop	{r3, r4, r5, pc}
   3537e:	f04f 34ff 	mov.w	r4, #4294967295
   35382:	e7fa      	b.n	3537a <nrf_modem_delta_dfu_uuid+0x3a>
   35384:	f06f 040d 	mvn.w	r4, #13
   35388:	e7f7      	b.n	3537a <nrf_modem_delta_dfu_uuid+0x3a>
   3538a:	f06f 040b 	mvn.w	r4, #11
   3538e:	e7f4      	b.n	3537a <nrf_modem_delta_dfu_uuid+0x3a>
   35390:	2001a4d8 	.word	0x2001a4d8

00035394 <nrf_modem_delta_dfu_write_init>:
   35394:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35396:	f000 fd69 	bl	35e6c <nrf_modem_state_is_initialized>
   3539a:	b1d0      	cbz	r0, 353d2 <nrf_modem_delta_dfu_write_init+0x3e>
   3539c:	4d11      	ldr	r5, [pc, #68]	; (353e4 <nrf_modem_delta_dfu_write_init+0x50>)
   3539e:	782b      	ldrb	r3, [r5, #0]
   353a0:	b9d3      	cbnz	r3, 353d8 <nrf_modem_delta_dfu_write_init+0x44>
   353a2:	a801      	add	r0, sp, #4
   353a4:	f7ff ff84 	bl	352b0 <nrf_modem_delta_dfu_offset>
   353a8:	4604      	mov	r4, r0
   353aa:	b978      	cbnz	r0, 353cc <nrf_modem_delta_dfu_write_init+0x38>
   353ac:	f00a fe18 	bl	3ffe0 <rpc_client_request_alloc>
   353b0:	b1a8      	cbz	r0, 353de <nrf_modem_delta_dfu_write_init+0x4a>
   353b2:	9a01      	ldr	r2, [sp, #4]
   353b4:	2103      	movs	r1, #3
   353b6:	6102      	str	r2, [r0, #16]
   353b8:	f7ff ff4c 	bl	35254 <mfu_client_send>
   353bc:	4604      	mov	r4, r0
   353be:	4b0a      	ldr	r3, [pc, #40]	; (353e8 <nrf_modem_delta_dfu_write_init+0x54>)
   353c0:	6818      	ldr	r0, [r3, #0]
   353c2:	f00a fe1a 	bl	3fffa <rpc_client_message_free>
   353c6:	b90c      	cbnz	r4, 353cc <nrf_modem_delta_dfu_write_init+0x38>
   353c8:	2301      	movs	r3, #1
   353ca:	702b      	strb	r3, [r5, #0]
   353cc:	4620      	mov	r0, r4
   353ce:	b003      	add	sp, #12
   353d0:	bd30      	pop	{r4, r5, pc}
   353d2:	f04f 34ff 	mov.w	r4, #4294967295
   353d6:	e7f9      	b.n	353cc <nrf_modem_delta_dfu_write_init+0x38>
   353d8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   353dc:	e7f6      	b.n	353cc <nrf_modem_delta_dfu_write_init+0x38>
   353de:	f06f 040b 	mvn.w	r4, #11
   353e2:	e7f3      	b.n	353cc <nrf_modem_delta_dfu_write_init+0x38>
   353e4:	2001d3c3 	.word	0x2001d3c3
   353e8:	2001a4d8 	.word	0x2001a4d8

000353ec <nrf_modem_delta_dfu_write>:
   353ec:	b570      	push	{r4, r5, r6, lr}
   353ee:	4606      	mov	r6, r0
   353f0:	460d      	mov	r5, r1
   353f2:	f000 fd3b 	bl	35e6c <nrf_modem_state_is_initialized>
   353f6:	b1b0      	cbz	r0, 35426 <nrf_modem_delta_dfu_write+0x3a>
   353f8:	b1c6      	cbz	r6, 3542c <nrf_modem_delta_dfu_write+0x40>
   353fa:	b1d5      	cbz	r5, 35432 <nrf_modem_delta_dfu_write+0x46>
   353fc:	4628      	mov	r0, r5
   353fe:	f00a fdef 	bl	3ffe0 <rpc_client_request_alloc>
   35402:	4604      	mov	r4, r0
   35404:	b1c0      	cbz	r0, 35438 <nrf_modem_delta_dfu_write+0x4c>
   35406:	462a      	mov	r2, r5
   35408:	4631      	mov	r1, r6
   3540a:	6800      	ldr	r0, [r0, #0]
   3540c:	f00b fff2 	bl	413f4 <memcpy>
   35410:	4620      	mov	r0, r4
   35412:	2104      	movs	r1, #4
   35414:	f7ff ff1e 	bl	35254 <mfu_client_send>
   35418:	4b09      	ldr	r3, [pc, #36]	; (35440 <nrf_modem_delta_dfu_write+0x54>)
   3541a:	4604      	mov	r4, r0
   3541c:	6818      	ldr	r0, [r3, #0]
   3541e:	f00a fdec 	bl	3fffa <rpc_client_message_free>
   35422:	4620      	mov	r0, r4
   35424:	bd70      	pop	{r4, r5, r6, pc}
   35426:	f04f 34ff 	mov.w	r4, #4294967295
   3542a:	e7fa      	b.n	35422 <nrf_modem_delta_dfu_write+0x36>
   3542c:	f06f 040d 	mvn.w	r4, #13
   35430:	e7f7      	b.n	35422 <nrf_modem_delta_dfu_write+0x36>
   35432:	f06f 0415 	mvn.w	r4, #21
   35436:	e7f4      	b.n	35422 <nrf_modem_delta_dfu_write+0x36>
   35438:	f06f 040b 	mvn.w	r4, #11
   3543c:	e7f1      	b.n	35422 <nrf_modem_delta_dfu_write+0x36>
   3543e:	bf00      	nop
   35440:	2001a4d8 	.word	0x2001a4d8

00035444 <nrf_modem_delta_dfu_write_done>:
   35444:	b510      	push	{r4, lr}
   35446:	f000 fd11 	bl	35e6c <nrf_modem_state_is_initialized>
   3544a:	b180      	cbz	r0, 3546e <nrf_modem_delta_dfu_write_done+0x2a>
   3544c:	2000      	movs	r0, #0
   3544e:	f00a fdc7 	bl	3ffe0 <rpc_client_request_alloc>
   35452:	b178      	cbz	r0, 35474 <nrf_modem_delta_dfu_write_done+0x30>
   35454:	2106      	movs	r1, #6
   35456:	f7ff fefd 	bl	35254 <mfu_client_send>
   3545a:	4b08      	ldr	r3, [pc, #32]	; (3547c <nrf_modem_delta_dfu_write_done+0x38>)
   3545c:	4604      	mov	r4, r0
   3545e:	6818      	ldr	r0, [r3, #0]
   35460:	f00a fdcb 	bl	3fffa <rpc_client_message_free>
   35464:	2200      	movs	r2, #0
   35466:	4b06      	ldr	r3, [pc, #24]	; (35480 <nrf_modem_delta_dfu_write_done+0x3c>)
   35468:	701a      	strb	r2, [r3, #0]
   3546a:	4620      	mov	r0, r4
   3546c:	bd10      	pop	{r4, pc}
   3546e:	f04f 34ff 	mov.w	r4, #4294967295
   35472:	e7fa      	b.n	3546a <nrf_modem_delta_dfu_write_done+0x26>
   35474:	f06f 040b 	mvn.w	r4, #11
   35478:	e7f7      	b.n	3546a <nrf_modem_delta_dfu_write_done+0x26>
   3547a:	bf00      	nop
   3547c:	2001a4d8 	.word	0x2001a4d8
   35480:	2001d3c3 	.word	0x2001d3c3

00035484 <nrf_modem_delta_dfu_update>:
   35484:	b510      	push	{r4, lr}
   35486:	f000 fcf1 	bl	35e6c <nrf_modem_state_is_initialized>
   3548a:	b168      	cbz	r0, 354a8 <nrf_modem_delta_dfu_update+0x24>
   3548c:	2000      	movs	r0, #0
   3548e:	f00a fda7 	bl	3ffe0 <rpc_client_request_alloc>
   35492:	b160      	cbz	r0, 354ae <nrf_modem_delta_dfu_update+0x2a>
   35494:	2105      	movs	r1, #5
   35496:	f7ff fedd 	bl	35254 <mfu_client_send>
   3549a:	4b06      	ldr	r3, [pc, #24]	; (354b4 <nrf_modem_delta_dfu_update+0x30>)
   3549c:	4604      	mov	r4, r0
   3549e:	6818      	ldr	r0, [r3, #0]
   354a0:	f00a fdab 	bl	3fffa <rpc_client_message_free>
   354a4:	4620      	mov	r0, r4
   354a6:	bd10      	pop	{r4, pc}
   354a8:	f04f 34ff 	mov.w	r4, #4294967295
   354ac:	e7fa      	b.n	354a4 <nrf_modem_delta_dfu_update+0x20>
   354ae:	f06f 040b 	mvn.w	r4, #11
   354b2:	e7f7      	b.n	354a4 <nrf_modem_delta_dfu_update+0x20>
   354b4:	2001a4d8 	.word	0x2001a4d8

000354b8 <nrf_modem_delta_dfu_erase>:
   354b8:	b510      	push	{r4, lr}
   354ba:	f000 fcd7 	bl	35e6c <nrf_modem_state_is_initialized>
   354be:	b168      	cbz	r0, 354dc <nrf_modem_delta_dfu_erase+0x24>
   354c0:	2000      	movs	r0, #0
   354c2:	f00a fd8d 	bl	3ffe0 <rpc_client_request_alloc>
   354c6:	b160      	cbz	r0, 354e2 <nrf_modem_delta_dfu_erase+0x2a>
   354c8:	2108      	movs	r1, #8
   354ca:	f7ff fec3 	bl	35254 <mfu_client_send>
   354ce:	4b06      	ldr	r3, [pc, #24]	; (354e8 <nrf_modem_delta_dfu_erase+0x30>)
   354d0:	4604      	mov	r4, r0
   354d2:	6818      	ldr	r0, [r3, #0]
   354d4:	f00a fd91 	bl	3fffa <rpc_client_message_free>
   354d8:	4620      	mov	r0, r4
   354da:	bd10      	pop	{r4, pc}
   354dc:	f04f 34ff 	mov.w	r4, #4294967295
   354e0:	e7fa      	b.n	354d8 <nrf_modem_delta_dfu_erase+0x20>
   354e2:	f06f 040b 	mvn.w	r4, #11
   354e6:	e7f7      	b.n	354d8 <nrf_modem_delta_dfu_erase+0x20>
   354e8:	2001a4d8 	.word	0x2001a4d8

000354ec <rpc_dfu_event_handler>:
   354ec:	b510      	push	{r4, lr}
   354ee:	4604      	mov	r4, r0
   354f0:	6800      	ldr	r0, [r0, #0]
   354f2:	b108      	cbz	r0, 354f8 <rpc_dfu_event_handler+0xc>
   354f4:	f00a fd84 	bl	40000 <rpc_client_data_free>
   354f8:	4b05      	ldr	r3, [pc, #20]	; (35510 <rpc_dfu_event_handler+0x24>)
   354fa:	68e2      	ldr	r2, [r4, #12]
   354fc:	429a      	cmp	r2, r3
   354fe:	bf05      	ittet	eq
   35500:	2001      	moveq	r0, #1
   35502:	4b04      	ldreq	r3, [pc, #16]	; (35514 <rpc_dfu_event_handler+0x28>)
   35504:	2000      	movne	r0, #0
   35506:	7018      	strbeq	r0, [r3, #0]
   35508:	bf04      	itt	eq
   3550a:	4b03      	ldreq	r3, [pc, #12]	; (35518 <rpc_dfu_event_handler+0x2c>)
   3550c:	601c      	streq	r4, [r3, #0]
   3550e:	bd10      	pop	{r4, pc}
   35510:	15abe11a 	.word	0x15abe11a
   35514:	2001d3c2 	.word	0x2001d3c2
   35518:	2001a4d8 	.word	0x2001a4d8

0003551c <send_message>:
   3551c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   35520:	4607      	mov	r7, r0
   35522:	4688      	mov	r8, r1
   35524:	4616      	mov	r6, r2
   35526:	f000 fca1 	bl	35e6c <nrf_modem_state_is_initialized>
   3552a:	2800      	cmp	r0, #0
   3552c:	d053      	beq.n	355d6 <send_message+0xba>
   3552e:	4d2b      	ldr	r5, [pc, #172]	; (355dc <send_message+0xc0>)
   35530:	782b      	ldrb	r3, [r5, #0]
   35532:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   35536:	2b00      	cmp	r3, #0
   35538:	d14d      	bne.n	355d6 <send_message+0xba>
   3553a:	2301      	movs	r3, #1
   3553c:	4630      	mov	r0, r6
   3553e:	702b      	strb	r3, [r5, #0]
   35540:	f00a fd4e 	bl	3ffe0 <rpc_client_request_alloc>
   35544:	4604      	mov	r4, r0
   35546:	2800      	cmp	r0, #0
   35548:	d03c      	beq.n	355c4 <send_message+0xa8>
   3554a:	4a25      	ldr	r2, [pc, #148]	; (355e0 <send_message+0xc4>)
   3554c:	4641      	mov	r1, r8
   3554e:	8813      	ldrh	r3, [r2, #0]
   35550:	3301      	adds	r3, #1
   35552:	b29b      	uxth	r3, r3
   35554:	8013      	strh	r3, [r2, #0]
   35556:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   3555a:	f8c8 3000 	str.w	r3, [r8]
   3555e:	2343      	movs	r3, #67	; 0x43
   35560:	7303      	strb	r3, [r0, #12]
   35562:	2354      	movs	r3, #84	; 0x54
   35564:	7343      	strb	r3, [r0, #13]
   35566:	2376      	movs	r3, #118	; 0x76
   35568:	7383      	strb	r3, [r0, #14]
   3556a:	2349      	movs	r3, #73	; 0x49
   3556c:	4632      	mov	r2, r6
   3556e:	73c3      	strb	r3, [r0, #15]
   35570:	6046      	str	r6, [r0, #4]
   35572:	f880 9008 	strb.w	r9, [r0, #8]
   35576:	f880 9009 	strb.w	r9, [r0, #9]
   3557a:	f880 900a 	strb.w	r9, [r0, #10]
   3557e:	f880 900b 	strb.w	r9, [r0, #11]
   35582:	6800      	ldr	r0, [r0, #0]
   35584:	f00b ff36 	bl	413f4 <memcpy>
   35588:	4622      	mov	r2, r4
   3558a:	4639      	mov	r1, r7
   3558c:	2007      	movs	r0, #7
   3558e:	f00a fd2d 	bl	3ffec <rpc_client_request_send>
   35592:	f04f 33ff 	mov.w	r3, #4294967295
   35596:	4c13      	ldr	r4, [pc, #76]	; (355e4 <send_message+0xc8>)
   35598:	9301      	str	r3, [sp, #4]
   3559a:	4620      	mov	r0, r4
   3559c:	a901      	add	r1, sp, #4
   3559e:	f7f0 f8bd 	bl	2571c <nrf_modem_os_timedwait>
   355a2:	782b      	ldrb	r3, [r5, #0]
   355a4:	2b01      	cmp	r3, #1
   355a6:	d102      	bne.n	355ae <send_message+0x92>
   355a8:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   355ac:	d1f5      	bne.n	3559a <send_message+0x7e>
   355ae:	782b      	ldrb	r3, [r5, #0]
   355b0:	2b02      	cmp	r3, #2
   355b2:	d00d      	beq.n	355d0 <send_message+0xb4>
   355b4:	782b      	ldrb	r3, [r5, #0]
   355b6:	2b03      	cmp	r3, #3
   355b8:	bf08      	it	eq
   355ba:	f06f 005e 	mvneq.w	r0, #94	; 0x5e
   355be:	2300      	movs	r3, #0
   355c0:	702b      	strb	r3, [r5, #0]
   355c2:	e002      	b.n	355ca <send_message+0xae>
   355c4:	7028      	strb	r0, [r5, #0]
   355c6:	f06f 000b 	mvn.w	r0, #11
   355ca:	b003      	add	sp, #12
   355cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   355d0:	f06f 0015 	mvn.w	r0, #21
   355d4:	e7f3      	b.n	355be <send_message+0xa2>
   355d6:	f04f 30ff 	mov.w	r0, #4294967295
   355da:	e7f6      	b.n	355ca <send_message+0xae>
   355dc:	2001d3c6 	.word	0x2001d3c6
   355e0:	2001a5a0 	.word	0x2001a5a0
   355e4:	49765443 	.word	0x49765443

000355e8 <rpc_gnss_event_handler>:
   355e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   355ec:	6804      	ldr	r4, [r0, #0]
   355ee:	4607      	mov	r7, r0
   355f0:	460d      	mov	r5, r1
   355f2:	2c00      	cmp	r4, #0
   355f4:	f000 8086 	beq.w	35704 <rpc_gnss_event_handler+0x11c>
   355f8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   355fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   35600:	d142      	bne.n	35688 <rpc_gnss_event_handler+0xa0>
   35602:	f8df 817c 	ldr.w	r8, [pc, #380]	; 35780 <rpc_gnss_event_handler+0x198>
   35606:	f898 3000 	ldrb.w	r3, [r8]
   3560a:	2b01      	cmp	r3, #1
   3560c:	d131      	bne.n	35672 <rpc_gnss_event_handler+0x8a>
   3560e:	4b5d      	ldr	r3, [pc, #372]	; (35784 <rpc_gnss_event_handler+0x19c>)
   35610:	6822      	ldr	r2, [r4, #0]
   35612:	881b      	ldrh	r3, [r3, #0]
   35614:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   35618:	d12b      	bne.n	35672 <rpc_gnss_event_handler+0x8a>
   3561a:	6863      	ldr	r3, [r4, #4]
   3561c:	bb6b      	cbnz	r3, 3567a <rpc_gnss_event_handler+0x92>
   3561e:	4b5a      	ldr	r3, [pc, #360]	; (35788 <rpc_gnss_event_handler+0x1a0>)
   35620:	681e      	ldr	r6, [r3, #0]
   35622:	b31e      	cbz	r6, 3566c <rpc_gnss_event_handler+0x84>
   35624:	f242 0309 	movw	r3, #8201	; 0x2009
   35628:	4299      	cmp	r1, r3
   3562a:	d11f      	bne.n	3566c <rpc_gnss_event_handler+0x84>
   3562c:	4630      	mov	r0, r6
   3562e:	8923      	ldrh	r3, [r4, #8]
   35630:	2280      	movs	r2, #128	; 0x80
   35632:	f840 3b04 	str.w	r3, [r0], #4
   35636:	f104 010a 	add.w	r1, r4, #10
   3563a:	f00b fedb 	bl	413f4 <memcpy>
   3563e:	2280      	movs	r2, #128	; 0x80
   35640:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   35644:	f106 0084 	add.w	r0, r6, #132	; 0x84
   35648:	f00b fed4 	bl	413f4 <memcpy>
   3564c:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   35650:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   35654:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   35658:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   3565c:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   35660:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   35664:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   35668:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   3566c:	2300      	movs	r3, #0
   3566e:	f888 3000 	strb.w	r3, [r8]
   35672:	6838      	ldr	r0, [r7, #0]
   35674:	f00a fcc4 	bl	40000 <rpc_client_data_free>
   35678:	e044      	b.n	35704 <rpc_gnss_event_handler+0x11c>
   3567a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   3567e:	4293      	cmp	r3, r2
   35680:	bf0c      	ite	eq
   35682:	2303      	moveq	r3, #3
   35684:	2302      	movne	r3, #2
   35686:	e7f2      	b.n	3566e <rpc_gnss_event_handler+0x86>
   35688:	4e40      	ldr	r6, [pc, #256]	; (3578c <rpc_gnss_event_handler+0x1a4>)
   3568a:	6833      	ldr	r3, [r6, #0]
   3568c:	2b00      	cmp	r3, #0
   3568e:	d0f0      	beq.n	35672 <rpc_gnss_event_handler+0x8a>
   35690:	f244 0204 	movw	r2, #16388	; 0x4004
   35694:	4291      	cmp	r1, r2
   35696:	d80b      	bhi.n	356b0 <rpc_gnss_event_handler+0xc8>
   35698:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   3569c:	d9e9      	bls.n	35672 <rpc_gnss_event_handler+0x8a>
   3569e:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   356a2:	3a02      	subs	r2, #2
   356a4:	2a02      	cmp	r2, #2
   356a6:	d80b      	bhi.n	356c0 <rpc_gnss_event_handler+0xd8>
   356a8:	e8df f002 	tbb	[pc, r2]
   356ac:	4f45      	.short	0x4f45
   356ae:	59          	.byte	0x59
   356af:	00          	.byte	0x00
   356b0:	f244 1301 	movw	r3, #16641	; 0x4101
   356b4:	4299      	cmp	r1, r3
   356b6:	d003      	beq.n	356c0 <rpc_gnss_event_handler+0xd8>
   356b8:	f244 2301 	movw	r3, #16897	; 0x4201
   356bc:	4299      	cmp	r1, r3
   356be:	d1d8      	bne.n	35672 <rpc_gnss_event_handler+0x8a>
   356c0:	4f33      	ldr	r7, [pc, #204]	; (35790 <rpc_gnss_event_handler+0x1a8>)
   356c2:	6838      	ldr	r0, [r7, #0]
   356c4:	b108      	cbz	r0, 356ca <rpc_gnss_event_handler+0xe2>
   356c6:	f00a fc9b 	bl	40000 <rpc_client_data_free>
   356ca:	f244 2301 	movw	r3, #16897	; 0x4201
   356ce:	429d      	cmp	r5, r3
   356d0:	4b30      	ldr	r3, [pc, #192]	; (35794 <rpc_gnss_event_handler+0x1ac>)
   356d2:	d11a      	bne.n	3570a <rpc_gnss_event_handler+0x122>
   356d4:	2202      	movs	r2, #2
   356d6:	603c      	str	r4, [r7, #0]
   356d8:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   356dc:	701a      	strb	r2, [r3, #0]
   356de:	4d2e      	ldr	r5, [pc, #184]	; (35798 <rpc_gnss_event_handler+0x1b0>)
   356e0:	f014 0718 	ands.w	r7, r4, #24
   356e4:	6833      	ldr	r3, [r6, #0]
   356e6:	782a      	ldrb	r2, [r5, #0]
   356e8:	d01f      	beq.n	3572a <rpc_gnss_event_handler+0x142>
   356ea:	b91a      	cbnz	r2, 356f4 <rpc_gnss_event_handler+0x10c>
   356ec:	2005      	movs	r0, #5
   356ee:	4798      	blx	r3
   356f0:	2301      	movs	r3, #1
   356f2:	702b      	strb	r3, [r5, #0]
   356f4:	07e3      	lsls	r3, r4, #31
   356f6:	d502      	bpl.n	356fe <rpc_gnss_event_handler+0x116>
   356f8:	2002      	movs	r0, #2
   356fa:	6833      	ldr	r3, [r6, #0]
   356fc:	4798      	blx	r3
   356fe:	2001      	movs	r0, #1
   35700:	6833      	ldr	r3, [r6, #0]
   35702:	4798      	blx	r3
   35704:	2000      	movs	r0, #0
   35706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3570a:	f244 1201 	movw	r2, #16641	; 0x4101
   3570e:	4295      	cmp	r5, r2
   35710:	bf0b      	itete	eq
   35712:	2201      	moveq	r2, #1
   35714:	2200      	movne	r2, #0
   35716:	603c      	streq	r4, [r7, #0]
   35718:	603c      	strne	r4, [r7, #0]
   3571a:	bf0b      	itete	eq
   3571c:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   35720:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   35724:	701a      	strbeq	r2, [r3, #0]
   35726:	701a      	strbne	r2, [r3, #0]
   35728:	e7d9      	b.n	356de <rpc_gnss_event_handler+0xf6>
   3572a:	2a00      	cmp	r2, #0
   3572c:	d0e2      	beq.n	356f4 <rpc_gnss_event_handler+0x10c>
   3572e:	2006      	movs	r0, #6
   35730:	4798      	blx	r3
   35732:	702f      	strb	r7, [r5, #0]
   35734:	e7de      	b.n	356f4 <rpc_gnss_event_handler+0x10c>
   35736:	4c19      	ldr	r4, [pc, #100]	; (3579c <rpc_gnss_event_handler+0x1b4>)
   35738:	6820      	ldr	r0, [r4, #0]
   3573a:	b108      	cbz	r0, 35740 <rpc_gnss_event_handler+0x158>
   3573c:	f00a fc60 	bl	40000 <rpc_client_data_free>
   35740:	683b      	ldr	r3, [r7, #0]
   35742:	2003      	movs	r0, #3
   35744:	6023      	str	r3, [r4, #0]
   35746:	6833      	ldr	r3, [r6, #0]
   35748:	e7db      	b.n	35702 <rpc_gnss_event_handler+0x11a>
   3574a:	4c15      	ldr	r4, [pc, #84]	; (357a0 <rpc_gnss_event_handler+0x1b8>)
   3574c:	6820      	ldr	r0, [r4, #0]
   3574e:	b108      	cbz	r0, 35754 <rpc_gnss_event_handler+0x16c>
   35750:	f00a fc56 	bl	40000 <rpc_client_data_free>
   35754:	683b      	ldr	r3, [r7, #0]
   35756:	2004      	movs	r0, #4
   35758:	6023      	str	r3, [r4, #0]
   3575a:	6833      	ldr	r3, [r6, #0]
   3575c:	e7d1      	b.n	35702 <rpc_gnss_event_handler+0x11a>
   3575e:	7822      	ldrb	r2, [r4, #0]
   35760:	2a03      	cmp	r2, #3
   35762:	d886      	bhi.n	35672 <rpc_gnss_event_handler+0x8a>
   35764:	e8df f002 	tbb	[pc, r2]
   35768:	09070502 	.word	0x09070502
   3576c:	2007      	movs	r0, #7
   3576e:	4798      	blx	r3
   35770:	e77f      	b.n	35672 <rpc_gnss_event_handler+0x8a>
   35772:	2008      	movs	r0, #8
   35774:	e7fb      	b.n	3576e <rpc_gnss_event_handler+0x186>
   35776:	2009      	movs	r0, #9
   35778:	e7f9      	b.n	3576e <rpc_gnss_event_handler+0x186>
   3577a:	200a      	movs	r0, #10
   3577c:	e7f7      	b.n	3576e <rpc_gnss_event_handler+0x186>
   3577e:	bf00      	nop
   35780:	2001d3c6 	.word	0x2001d3c6
   35784:	2001a5a0 	.word	0x2001a5a0
   35788:	2001a4ec 	.word	0x2001a4ec
   3578c:	2001a4dc 	.word	0x2001a4dc
   35790:	2001a4e0 	.word	0x2001a4e0
   35794:	2001d3c5 	.word	0x2001d3c5
   35798:	2001d3c4 	.word	0x2001d3c4
   3579c:	2001a4e8 	.word	0x2001a4e8
   357a0:	2001a4e4 	.word	0x2001a4e4

000357a4 <nrf_modem_gnss_read>:
   357a4:	b570      	push	{r4, r5, r6, lr}
   357a6:	4604      	mov	r4, r0
   357a8:	2800      	cmp	r0, #0
   357aa:	f000 817d 	beq.w	35aa8 <nrf_modem_gnss_read+0x304>
   357ae:	2a02      	cmp	r2, #2
   357b0:	f000 815a 	beq.w	35a68 <nrf_modem_gnss_read+0x2c4>
   357b4:	2a03      	cmp	r2, #3
   357b6:	f000 8166 	beq.w	35a86 <nrf_modem_gnss_read+0x2e2>
   357ba:	2a01      	cmp	r2, #1
   357bc:	f040 8174 	bne.w	35aa8 <nrf_modem_gnss_read+0x304>
   357c0:	29e7      	cmp	r1, #231	; 0xe7
   357c2:	f240 8174 	bls.w	35aae <nrf_modem_gnss_read+0x30a>
   357c6:	f00a fbfa 	bl	3ffbe <rpc_transport_rx_data_suspend>
   357ca:	4bba      	ldr	r3, [pc, #744]	; (35ab4 <nrf_modem_gnss_read+0x310>)
   357cc:	681d      	ldr	r5, [r3, #0]
   357ce:	b925      	cbnz	r5, 357da <nrf_modem_gnss_read+0x36>
   357d0:	f00a fbf7 	bl	3ffc2 <rpc_transport_rx_data_resume>
   357d4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   357d8:	e083      	b.n	358e2 <nrf_modem_gnss_read+0x13e>
   357da:	2100      	movs	r1, #0
   357dc:	22e8      	movs	r2, #232	; 0xe8
   357de:	4620      	mov	r0, r4
   357e0:	f00b fe28 	bl	41434 <memset>
   357e4:	4bb4      	ldr	r3, [pc, #720]	; (35ab8 <nrf_modem_gnss_read+0x314>)
   357e6:	68a9      	ldr	r1, [r5, #8]
   357e8:	781b      	ldrb	r3, [r3, #0]
   357ea:	2b01      	cmp	r3, #1
   357ec:	d07a      	beq.n	358e4 <nrf_modem_gnss_read+0x140>
   357ee:	2b02      	cmp	r3, #2
   357f0:	460b      	mov	r3, r1
   357f2:	686a      	ldr	r2, [r5, #4]
   357f4:	e9c4 2300 	strd	r2, r3, [r4]
   357f8:	692b      	ldr	r3, [r5, #16]
   357fa:	68ea      	ldr	r2, [r5, #12]
   357fc:	e9c4 2302 	strd	r2, r3, [r4, #8]
   35800:	696b      	ldr	r3, [r5, #20]
   35802:	6123      	str	r3, [r4, #16]
   35804:	69ab      	ldr	r3, [r5, #24]
   35806:	6163      	str	r3, [r4, #20]
   35808:	69eb      	ldr	r3, [r5, #28]
   3580a:	f040 80d4 	bne.w	359b6 <nrf_modem_gnss_read+0x212>
   3580e:	61a3      	str	r3, [r4, #24]
   35810:	6a2b      	ldr	r3, [r5, #32]
   35812:	260a      	movs	r6, #10
   35814:	61e3      	str	r3, [r4, #28]
   35816:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   35818:	6223      	str	r3, [r4, #32]
   3581a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   3581c:	6263      	str	r3, [r4, #36]	; 0x24
   3581e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   35820:	62a3      	str	r3, [r4, #40]	; 0x28
   35822:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   35824:	62e3      	str	r3, [r4, #44]	; 0x2c
   35826:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   35828:	6323      	str	r3, [r4, #48]	; 0x30
   3582a:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
   3582e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   35832:	f8d5 3041 	ldr.w	r3, [r5, #65]	; 0x41
   35836:	6423      	str	r3, [r4, #64]	; 0x40
   35838:	f8d5 3045 	ldr.w	r3, [r5, #69]	; 0x45
   3583c:	6463      	str	r3, [r4, #68]	; 0x44
   3583e:	f8d5 3049 	ldr.w	r3, [r5, #73]	; 0x49
   35842:	64a3      	str	r3, [r4, #72]	; 0x48
   35844:	f8d5 304d 	ldr.w	r3, [r5, #77]	; 0x4d
   35848:	64e3      	str	r3, [r4, #76]	; 0x4c
   3584a:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   3584e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   35852:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35856:	86a3      	strh	r3, [r4, #52]	; 0x34
   35858:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   3585c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   35860:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   35864:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   35868:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   3586c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   35870:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   35874:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   35878:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
   3587c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   35880:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   35884:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
   35888:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3588c:	87a3      	strh	r3, [r4, #60]	; 0x3c
   3588e:	f8d5 30ca 	ldr.w	r3, [r5, #202]	; 0xca
   35892:	462a      	mov	r2, r5
   35894:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   35898:	2300      	movs	r3, #0
   3589a:	fb06 5103 	mla	r1, r6, r3, r5
   3589e:	f8b1 0052 	ldrh.w	r0, [r1, #82]	; 0x52
   358a2:	3301      	adds	r3, #1
   358a4:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   358a8:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
   358ac:	2b0c      	cmp	r3, #12
   358ae:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   358b2:	f8b1 0055 	ldrh.w	r0, [r1, #85]	; 0x55
   358b6:	f104 040c 	add.w	r4, r4, #12
   358ba:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   358be:	f9b1 0057 	ldrsh.w	r0, [r1, #87]	; 0x57
   358c2:	f102 020a 	add.w	r2, r2, #10
   358c6:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   358ca:	f9b1 1059 	ldrsh.w	r1, [r1, #89]	; 0x59
   358ce:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   358d2:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
   358d6:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   358da:	d1de      	bne.n	3589a <nrf_modem_gnss_read+0xf6>
   358dc:	f00a fb71 	bl	3ffc2 <rpc_transport_rx_data_resume>
   358e0:	2000      	movs	r0, #0
   358e2:	bd70      	pop	{r4, r5, r6, pc}
   358e4:	460b      	mov	r3, r1
   358e6:	686a      	ldr	r2, [r5, #4]
   358e8:	260a      	movs	r6, #10
   358ea:	e9c4 2300 	strd	r2, r3, [r4]
   358ee:	68ea      	ldr	r2, [r5, #12]
   358f0:	692b      	ldr	r3, [r5, #16]
   358f2:	e9c4 2302 	strd	r2, r3, [r4, #8]
   358f6:	696b      	ldr	r3, [r5, #20]
   358f8:	6123      	str	r3, [r4, #16]
   358fa:	69ab      	ldr	r3, [r5, #24]
   358fc:	6163      	str	r3, [r4, #20]
   358fe:	69eb      	ldr	r3, [r5, #28]
   35900:	61e3      	str	r3, [r4, #28]
   35902:	6a2b      	ldr	r3, [r5, #32]
   35904:	6223      	str	r3, [r4, #32]
   35906:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   35908:	62e3      	str	r3, [r4, #44]	; 0x2c
   3590a:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
   3590e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   35912:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   35916:	6423      	str	r3, [r4, #64]	; 0x40
   35918:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   3591c:	6463      	str	r3, [r4, #68]	; 0x44
   3591e:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   35922:	64a3      	str	r3, [r4, #72]	; 0x48
   35924:	f8d5 303d 	ldr.w	r3, [r5, #61]	; 0x3d
   35928:	64e3      	str	r3, [r4, #76]	; 0x4c
   3592a:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
   3592e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   35932:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35936:	86a3      	strh	r3, [r4, #52]	; 0x34
   35938:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   3593c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   35940:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   35944:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   35948:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   3594c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   35950:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   35954:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   35958:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   3595c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   35960:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   35964:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   35968:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3596c:	87a3      	strh	r3, [r4, #60]	; 0x3c
   3596e:	462a      	mov	r2, r5
   35970:	2300      	movs	r3, #0
   35972:	fb06 5103 	mla	r1, r6, r3, r5
   35976:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
   3597a:	3301      	adds	r3, #1
   3597c:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   35980:	f892 0044 	ldrb.w	r0, [r2, #68]	; 0x44
   35984:	2b0c      	cmp	r3, #12
   35986:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   3598a:	f8b1 0045 	ldrh.w	r0, [r1, #69]	; 0x45
   3598e:	f104 040c 	add.w	r4, r4, #12
   35992:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   35996:	f9b1 0047 	ldrsh.w	r0, [r1, #71]	; 0x47
   3599a:	f102 020a 	add.w	r2, r2, #10
   3599e:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   359a2:	f9b1 1049 	ldrsh.w	r1, [r1, #73]	; 0x49
   359a6:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   359aa:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
   359ae:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   359b2:	d1de      	bne.n	35972 <nrf_modem_gnss_read+0x1ce>
   359b4:	e792      	b.n	358dc <nrf_modem_gnss_read+0x138>
   359b6:	61e3      	str	r3, [r4, #28]
   359b8:	6a2b      	ldr	r3, [r5, #32]
   359ba:	260a      	movs	r6, #10
   359bc:	62e3      	str	r3, [r4, #44]	; 0x2c
   359be:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   359c2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   359c6:	f8d5 302d 	ldr.w	r3, [r5, #45]	; 0x2d
   359ca:	6423      	str	r3, [r4, #64]	; 0x40
   359cc:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   359d0:	6463      	str	r3, [r4, #68]	; 0x44
   359d2:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   359d6:	64a3      	str	r3, [r4, #72]	; 0x48
   359d8:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   359dc:	64e3      	str	r3, [r4, #76]	; 0x4c
   359de:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   359e2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   359e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   359ea:	86a3      	strh	r3, [r4, #52]	; 0x34
   359ec:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   359f0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   359f4:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   359f8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   359fc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   35a00:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   35a04:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   35a08:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   35a0c:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   35a10:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   35a14:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   35a18:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   35a1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35a20:	87a3      	strh	r3, [r4, #60]	; 0x3c
   35a22:	462a      	mov	r2, r5
   35a24:	2300      	movs	r3, #0
   35a26:	fb06 5103 	mla	r1, r6, r3, r5
   35a2a:	8fc8      	ldrh	r0, [r1, #62]	; 0x3e
   35a2c:	3301      	adds	r3, #1
   35a2e:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   35a32:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
   35a36:	2b0c      	cmp	r3, #12
   35a38:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   35a3c:	f8b1 0041 	ldrh.w	r0, [r1, #65]	; 0x41
   35a40:	f104 040c 	add.w	r4, r4, #12
   35a44:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   35a48:	f9b1 0043 	ldrsh.w	r0, [r1, #67]	; 0x43
   35a4c:	f102 020a 	add.w	r2, r2, #10
   35a50:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   35a54:	f9b1 1045 	ldrsh.w	r1, [r1, #69]	; 0x45
   35a58:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   35a5c:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
   35a60:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   35a64:	d1df      	bne.n	35a26 <nrf_modem_gnss_read+0x282>
   35a66:	e739      	b.n	358dc <nrf_modem_gnss_read+0x138>
   35a68:	2952      	cmp	r1, #82	; 0x52
   35a6a:	d920      	bls.n	35aae <nrf_modem_gnss_read+0x30a>
   35a6c:	4d13      	ldr	r5, [pc, #76]	; (35abc <nrf_modem_gnss_read+0x318>)
   35a6e:	682b      	ldr	r3, [r5, #0]
   35a70:	2b00      	cmp	r3, #0
   35a72:	f43f aeaf 	beq.w	357d4 <nrf_modem_gnss_read+0x30>
   35a76:	f00a faa2 	bl	3ffbe <rpc_transport_rx_data_suspend>
   35a7a:	2253      	movs	r2, #83	; 0x53
   35a7c:	4620      	mov	r0, r4
   35a7e:	6829      	ldr	r1, [r5, #0]
   35a80:	f00b fcb8 	bl	413f4 <memcpy>
   35a84:	e72a      	b.n	358dc <nrf_modem_gnss_read+0x138>
   35a86:	290b      	cmp	r1, #11
   35a88:	d911      	bls.n	35aae <nrf_modem_gnss_read+0x30a>
   35a8a:	4d0d      	ldr	r5, [pc, #52]	; (35ac0 <nrf_modem_gnss_read+0x31c>)
   35a8c:	682b      	ldr	r3, [r5, #0]
   35a8e:	2b00      	cmp	r3, #0
   35a90:	f43f aea0 	beq.w	357d4 <nrf_modem_gnss_read+0x30>
   35a94:	f00a fa93 	bl	3ffbe <rpc_transport_rx_data_suspend>
   35a98:	682b      	ldr	r3, [r5, #0]
   35a9a:	681a      	ldr	r2, [r3, #0]
   35a9c:	6022      	str	r2, [r4, #0]
   35a9e:	685a      	ldr	r2, [r3, #4]
   35aa0:	6062      	str	r2, [r4, #4]
   35aa2:	891b      	ldrh	r3, [r3, #8]
   35aa4:	60a3      	str	r3, [r4, #8]
   35aa6:	e719      	b.n	358dc <nrf_modem_gnss_read+0x138>
   35aa8:	f06f 0015 	mvn.w	r0, #21
   35aac:	e719      	b.n	358e2 <nrf_modem_gnss_read+0x13e>
   35aae:	f06f 0079 	mvn.w	r0, #121	; 0x79
   35ab2:	e716      	b.n	358e2 <nrf_modem_gnss_read+0x13e>
   35ab4:	2001a4e0 	.word	0x2001a4e0
   35ab8:	2001d3c5 	.word	0x2001d3c5
   35abc:	2001a4e8 	.word	0x2001a4e8
   35ac0:	2001a4e4 	.word	0x2001a4e4

00035ac4 <nrf_modem_gnss_start>:
   35ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35ac8:	4f27      	ldr	r7, [pc, #156]	; (35b68 <nrf_modem_gnss_start+0xa4>)
   35aca:	b087      	sub	sp, #28
   35acc:	783b      	ldrb	r3, [r7, #0]
   35ace:	2b00      	cmp	r3, #0
   35ad0:	d146      	bne.n	35b60 <nrf_modem_gnss_start+0x9c>
   35ad2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 35b6c <nrf_modem_gnss_start+0xa8>
   35ad6:	f898 3000 	ldrb.w	r3, [r8]
   35ada:	bb63      	cbnz	r3, 35b36 <nrf_modem_gnss_start+0x72>
   35adc:	2502      	movs	r5, #2
   35ade:	f04f 0905 	mov.w	r9, #5
   35ae2:	462e      	mov	r6, r5
   35ae4:	2214      	movs	r2, #20
   35ae6:	2100      	movs	r1, #0
   35ae8:	a801      	add	r0, sp, #4
   35aea:	f00b fca3 	bl	41434 <memset>
   35aee:	2214      	movs	r2, #20
   35af0:	f241 0004 	movw	r0, #4100	; 0x1004
   35af4:	a901      	add	r1, sp, #4
   35af6:	f88d 9008 	strb.w	r9, [sp, #8]
   35afa:	f8cd 6009 	str.w	r6, [sp, #9]
   35afe:	f7ff fd0d 	bl	3551c <send_message>
   35b02:	4604      	mov	r4, r0
   35b04:	b110      	cbz	r0, 35b0c <nrf_modem_gnss_start+0x48>
   35b06:	2601      	movs	r6, #1
   35b08:	42b5      	cmp	r5, r6
   35b0a:	d127      	bne.n	35b5c <nrf_modem_gnss_start+0x98>
   35b0c:	2214      	movs	r2, #20
   35b0e:	2100      	movs	r1, #0
   35b10:	a801      	add	r0, sp, #4
   35b12:	f00b fc8f 	bl	41434 <memset>
   35b16:	2501      	movs	r5, #1
   35b18:	2380      	movs	r3, #128	; 0x80
   35b1a:	2214      	movs	r2, #20
   35b1c:	f241 2003 	movw	r0, #4611	; 0x1203
   35b20:	a901      	add	r1, sp, #4
   35b22:	9302      	str	r3, [sp, #8]
   35b24:	f88d 5016 	strb.w	r5, [sp, #22]
   35b28:	f7ff fcf8 	bl	3551c <send_message>
   35b2c:	ea54 0300 	orrs.w	r3, r4, r0
   35b30:	bf08      	it	eq
   35b32:	f888 5000 	strbeq.w	r5, [r8]
   35b36:	2401      	movs	r4, #1
   35b38:	2214      	movs	r2, #20
   35b3a:	2100      	movs	r1, #0
   35b3c:	a801      	add	r0, sp, #4
   35b3e:	f00b fc79 	bl	41434 <memset>
   35b42:	2214      	movs	r2, #20
   35b44:	f241 0004 	movw	r0, #4100	; 0x1004
   35b48:	a901      	add	r1, sp, #4
   35b4a:	f88d 4008 	strb.w	r4, [sp, #8]
   35b4e:	f7ff fce5 	bl	3551c <send_message>
   35b52:	b900      	cbnz	r0, 35b56 <nrf_modem_gnss_start+0x92>
   35b54:	703c      	strb	r4, [r7, #0]
   35b56:	b007      	add	sp, #28
   35b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35b5c:	4635      	mov	r5, r6
   35b5e:	e7c1      	b.n	35ae4 <nrf_modem_gnss_start+0x20>
   35b60:	f04f 30ff 	mov.w	r0, #4294967295
   35b64:	e7f7      	b.n	35b56 <nrf_modem_gnss_start+0x92>
   35b66:	bf00      	nop
   35b68:	2001d3c8 	.word	0x2001d3c8
   35b6c:	2001d3c7 	.word	0x2001d3c7

00035b70 <nrf_modem_gnss_stop>:
   35b70:	b510      	push	{r4, lr}
   35b72:	4c0b      	ldr	r4, [pc, #44]	; (35ba0 <nrf_modem_gnss_stop+0x30>)
   35b74:	b086      	sub	sp, #24
   35b76:	7823      	ldrb	r3, [r4, #0]
   35b78:	2b01      	cmp	r3, #1
   35b7a:	d10e      	bne.n	35b9a <nrf_modem_gnss_stop+0x2a>
   35b7c:	2214      	movs	r2, #20
   35b7e:	2100      	movs	r1, #0
   35b80:	a801      	add	r0, sp, #4
   35b82:	f00b fc57 	bl	41434 <memset>
   35b86:	2214      	movs	r2, #20
   35b88:	f241 0004 	movw	r0, #4100	; 0x1004
   35b8c:	a901      	add	r1, sp, #4
   35b8e:	f7ff fcc5 	bl	3551c <send_message>
   35b92:	b900      	cbnz	r0, 35b96 <nrf_modem_gnss_stop+0x26>
   35b94:	7020      	strb	r0, [r4, #0]
   35b96:	b006      	add	sp, #24
   35b98:	bd10      	pop	{r4, pc}
   35b9a:	f04f 30ff 	mov.w	r0, #4294967295
   35b9e:	e7fa      	b.n	35b96 <nrf_modem_gnss_stop+0x26>
   35ba0:	2001d3c8 	.word	0x2001d3c8

00035ba4 <nrf_modem_gnss_use_case_set>:
   35ba4:	b510      	push	{r4, lr}
   35ba6:	4b0d      	ldr	r3, [pc, #52]	; (35bdc <nrf_modem_gnss_use_case_set+0x38>)
   35ba8:	4604      	mov	r4, r0
   35baa:	781b      	ldrb	r3, [r3, #0]
   35bac:	b086      	sub	sp, #24
   35bae:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   35bb2:	b97b      	cbnz	r3, 35bd4 <nrf_modem_gnss_use_case_set+0x30>
   35bb4:	2214      	movs	r2, #20
   35bb6:	a801      	add	r0, sp, #4
   35bb8:	f00b fc3c 	bl	41434 <memset>
   35bbc:	2302      	movs	r3, #2
   35bbe:	2214      	movs	r2, #20
   35bc0:	f241 1003 	movw	r0, #4355	; 0x1103
   35bc4:	a901      	add	r1, sp, #4
   35bc6:	9302      	str	r3, [sp, #8]
   35bc8:	f88d 400d 	strb.w	r4, [sp, #13]
   35bcc:	f7ff fca6 	bl	3551c <send_message>
   35bd0:	b006      	add	sp, #24
   35bd2:	bd10      	pop	{r4, pc}
   35bd4:	f04f 30ff 	mov.w	r0, #4294967295
   35bd8:	e7fa      	b.n	35bd0 <nrf_modem_gnss_use_case_set+0x2c>
   35bda:	bf00      	nop
   35bdc:	2001d3c8 	.word	0x2001d3c8

00035be0 <nrf_modem_gnss_fix_interval_set>:
   35be0:	b510      	push	{r4, lr}
   35be2:	4b0d      	ldr	r3, [pc, #52]	; (35c18 <nrf_modem_gnss_fix_interval_set+0x38>)
   35be4:	4604      	mov	r4, r0
   35be6:	781b      	ldrb	r3, [r3, #0]
   35be8:	b086      	sub	sp, #24
   35bea:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   35bee:	b97b      	cbnz	r3, 35c10 <nrf_modem_gnss_fix_interval_set+0x30>
   35bf0:	2214      	movs	r2, #20
   35bf2:	a801      	add	r0, sp, #4
   35bf4:	f00b fc1e 	bl	41434 <memset>
   35bf8:	2308      	movs	r3, #8
   35bfa:	2214      	movs	r2, #20
   35bfc:	f241 1003 	movw	r0, #4355	; 0x1103
   35c00:	a901      	add	r1, sp, #4
   35c02:	9302      	str	r3, [sp, #8]
   35c04:	f8ad 400f 	strh.w	r4, [sp, #15]
   35c08:	f7ff fc88 	bl	3551c <send_message>
   35c0c:	b006      	add	sp, #24
   35c0e:	bd10      	pop	{r4, pc}
   35c10:	f04f 30ff 	mov.w	r0, #4294967295
   35c14:	e7fa      	b.n	35c0c <nrf_modem_gnss_fix_interval_set+0x2c>
   35c16:	bf00      	nop
   35c18:	2001d3c8 	.word	0x2001d3c8

00035c1c <nrf_modem_gnss_event_handler_set>:
   35c1c:	4a05      	ldr	r2, [pc, #20]	; (35c34 <nrf_modem_gnss_event_handler_set+0x18>)
   35c1e:	4603      	mov	r3, r0
   35c20:	7812      	ldrb	r2, [r2, #0]
   35c22:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   35c26:	b912      	cbnz	r2, 35c2e <nrf_modem_gnss_event_handler_set+0x12>
   35c28:	4a03      	ldr	r2, [pc, #12]	; (35c38 <nrf_modem_gnss_event_handler_set+0x1c>)
   35c2a:	6013      	str	r3, [r2, #0]
   35c2c:	4770      	bx	lr
   35c2e:	f04f 30ff 	mov.w	r0, #4294967295
   35c32:	4770      	bx	lr
   35c34:	2001d3c8 	.word	0x2001d3c8
   35c38:	2001a4dc 	.word	0x2001a4dc

00035c3c <full_dfu_ipc_irq_handler>:
   35c3c:	b510      	push	{r4, lr}
   35c3e:	4604      	mov	r4, r0
   35c40:	4b04      	ldr	r3, [pc, #16]	; (35c54 <full_dfu_ipc_irq_handler+0x18>)
   35c42:	6818      	ldr	r0, [r3, #0]
   35c44:	f7ef fe78 	bl	25938 <nrf_modem_os_sem_give>
   35c48:	07e3      	lsls	r3, r4, #31
   35c4a:	bf42      	ittt	mi
   35c4c:	2201      	movmi	r2, #1
   35c4e:	4b02      	ldrmi	r3, [pc, #8]	; (35c58 <full_dfu_ipc_irq_handler+0x1c>)
   35c50:	701a      	strbmi	r2, [r3, #0]
   35c52:	bd10      	pop	{r4, pc}
   35c54:	2001a4f0 	.word	0x2001a4f0
   35c58:	2001d3c9 	.word	0x2001d3c9

00035c5c <modem_ipc_wait_for_event>:
   35c5c:	b508      	push	{r3, lr}
   35c5e:	4b08      	ldr	r3, [pc, #32]	; (35c80 <modem_ipc_wait_for_event+0x24>)
   35c60:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   35c64:	6818      	ldr	r0, [r3, #0]
   35c66:	f7ef fe87 	bl	25978 <nrf_modem_os_sem_take>
   35c6a:	b930      	cbnz	r0, 35c7a <modem_ipc_wait_for_event+0x1e>
   35c6c:	4b05      	ldr	r3, [pc, #20]	; (35c84 <modem_ipc_wait_for_event+0x28>)
   35c6e:	781b      	ldrb	r3, [r3, #0]
   35c70:	2b01      	cmp	r3, #1
   35c72:	bf08      	it	eq
   35c74:	f06f 0004 	mvneq.w	r0, #4
   35c78:	bd08      	pop	{r3, pc}
   35c7a:	f06f 0073 	mvn.w	r0, #115	; 0x73
   35c7e:	e7fb      	b.n	35c78 <modem_ipc_wait_for_event+0x1c>
   35c80:	2001a4f0 	.word	0x2001a4f0
   35c84:	2001d3c9 	.word	0x2001d3c9

00035c88 <nrf_modem_full_dfu_setup>:
   35c88:	2200      	movs	r2, #0
   35c8a:	2300      	movs	r3, #0
   35c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   35c8e:	4d2d      	ldr	r5, [pc, #180]	; (35d44 <nrf_modem_full_dfu_setup+0xbc>)
   35c90:	4f2d      	ldr	r7, [pc, #180]	; (35d48 <nrf_modem_full_dfu_setup+0xc0>)
   35c92:	e9c5 2302 	strd	r2, r3, [r5, #8]
   35c96:	e9c5 2304 	strd	r2, r3, [r5, #16]
   35c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   35c9e:	4b2b      	ldr	r3, [pc, #172]	; (35d4c <nrf_modem_full_dfu_setup+0xc4>)
   35ca0:	2400      	movs	r4, #0
   35ca2:	601a      	str	r2, [r3, #0]
   35ca4:	f100 031c 	add.w	r3, r0, #28
   35ca8:	603b      	str	r3, [r7, #0]
   35caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   35cae:	6043      	str	r3, [r0, #4]
   35cb0:	231c      	movs	r3, #28
   35cb2:	7203      	strb	r3, [r0, #8]
   35cb4:	2320      	movs	r3, #32
   35cb6:	2601      	movs	r6, #1
   35cb8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   35cbc:	7243      	strb	r3, [r0, #9]
   35cbe:	4b24      	ldr	r3, [pc, #144]	; (35d50 <nrf_modem_full_dfu_setup+0xc8>)
   35cc0:	7004      	strb	r4, [r0, #0]
   35cc2:	7044      	strb	r4, [r0, #1]
   35cc4:	70c2      	strb	r2, [r0, #3]
   35cc6:	7284      	strb	r4, [r0, #10]
   35cc8:	72c4      	strb	r4, [r0, #11]
   35cca:	7086      	strb	r6, [r0, #2]
   35ccc:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   35cd0:	702c      	strb	r4, [r5, #0]
   35cd2:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   35cd6:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   35cda:	4b1e      	ldr	r3, [pc, #120]	; (35d54 <nrf_modem_full_dfu_setup+0xcc>)
   35cdc:	b093      	sub	sp, #76	; 0x4c
   35cde:	4622      	mov	r2, r4
   35ce0:	4620      	mov	r0, r4
   35ce2:	491d      	ldr	r1, [pc, #116]	; (35d58 <nrf_modem_full_dfu_setup+0xd0>)
   35ce4:	701c      	strb	r4, [r3, #0]
   35ce6:	f7fc ffa5 	bl	32c34 <nrfx_ipc_init>
   35cea:	4621      	mov	r1, r4
   35cec:	2240      	movs	r2, #64	; 0x40
   35cee:	a801      	add	r0, sp, #4
   35cf0:	f00b fba0 	bl	41434 <memset>
   35cf4:	2302      	movs	r3, #2
   35cf6:	9302      	str	r3, [sp, #8]
   35cf8:	2304      	movs	r3, #4
   35cfa:	930b      	str	r3, [sp, #44]	; 0x2c
   35cfc:	2305      	movs	r3, #5
   35cfe:	a801      	add	r0, sp, #4
   35d00:	9311      	str	r3, [sp, #68]	; 0x44
   35d02:	9609      	str	r6, [sp, #36]	; 0x24
   35d04:	f7fc ffbc 	bl	32c80 <nrfx_ipc_config_load>
   35d08:	4621      	mov	r1, r4
   35d0a:	4632      	mov	r2, r6
   35d0c:	4813      	ldr	r0, [pc, #76]	; (35d5c <nrf_modem_full_dfu_setup+0xd4>)
   35d0e:	683f      	ldr	r7, [r7, #0]
   35d10:	f7ef fdda 	bl	258c8 <nrf_modem_os_sem_init>
   35d14:	4b12      	ldr	r3, [pc, #72]	; (35d60 <nrf_modem_full_dfu_setup+0xd8>)
   35d16:	9400      	str	r4, [sp, #0]
   35d18:	611c      	str	r4, [r3, #16]
   35d1a:	691b      	ldr	r3, [r3, #16]
   35d1c:	9300      	str	r3, [sp, #0]
   35d1e:	9b00      	ldr	r3, [sp, #0]
   35d20:	f7ff ff9c 	bl	35c5c <modem_ipc_wait_for_event>
   35d24:	4604      	mov	r4, r0
   35d26:	b130      	cbz	r0, 35d36 <nrf_modem_full_dfu_setup+0xae>
   35d28:	2303      	movs	r3, #3
   35d2a:	702b      	strb	r3, [r5, #0]
   35d2c:	f7fc ffe6 	bl	32cfc <nrfx_ipc_uninit>
   35d30:	4620      	mov	r0, r4
   35d32:	b013      	add	sp, #76	; 0x4c
   35d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35d36:	683a      	ldr	r2, [r7, #0]
   35d38:	4b0a      	ldr	r3, [pc, #40]	; (35d64 <nrf_modem_full_dfu_setup+0xdc>)
   35d3a:	429a      	cmp	r2, r3
   35d3c:	d0f8      	beq.n	35d30 <nrf_modem_full_dfu_setup+0xa8>
   35d3e:	f06f 0404 	mvn.w	r4, #4
   35d42:	e7f3      	b.n	35d2c <nrf_modem_full_dfu_setup+0xa4>
   35d44:	20018de8 	.word	0x20018de8
   35d48:	2001a4f4 	.word	0x2001a4f4
   35d4c:	2001a4f8 	.word	0x2001a4f8
   35d50:	4002a000 	.word	0x4002a000
   35d54:	2001d3c9 	.word	0x2001d3c9
   35d58:	00035c3d 	.word	0x00035c3d
   35d5c:	2001a4f0 	.word	0x2001a4f0
   35d60:	40005600 	.word	0x40005600
   35d64:	a5000001 	.word	0xa5000001

00035d68 <modem_off>:
   35d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35d6a:	2501      	movs	r5, #1
   35d6c:	4c07      	ldr	r4, [pc, #28]	; (35d8c <modem_off+0x24>)
   35d6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   35d72:	6165      	str	r5, [r4, #20]
   35d74:	f008 ffcb 	bl	3ed0e <nrf_modem_os_busywait>
   35d78:	2300      	movs	r3, #0
   35d7a:	6163      	str	r3, [r4, #20]
   35d7c:	9301      	str	r3, [sp, #4]
   35d7e:	6125      	str	r5, [r4, #16]
   35d80:	6923      	ldr	r3, [r4, #16]
   35d82:	9301      	str	r3, [sp, #4]
   35d84:	9b01      	ldr	r3, [sp, #4]
   35d86:	b003      	add	sp, #12
   35d88:	bd30      	pop	{r4, r5, pc}
   35d8a:	bf00      	nop
   35d8c:	40005600 	.word	0x40005600

00035d90 <nrf_modem_init>:
   35d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35d92:	4604      	mov	r4, r0
   35d94:	460d      	mov	r5, r1
   35d96:	f000 f871 	bl	35e7c <nrf_modem_state_is_uninitialized>
   35d9a:	2800      	cmp	r0, #0
   35d9c:	d03b      	beq.n	35e16 <nrf_modem_init+0x86>
   35d9e:	2c00      	cmp	r4, #0
   35da0:	d03c      	beq.n	35e1c <nrf_modem_init+0x8c>
   35da2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   35da4:	2800      	cmp	r0, #0
   35da6:	d03c      	beq.n	35e22 <nrf_modem_init+0x92>
   35da8:	f000 f844 	bl	35e34 <nrf_modem_fault_handler_set>
   35dac:	b9ed      	cbnz	r5, 35dea <nrf_modem_init+0x5a>
   35dae:	f7ef fe7d 	bl	25aac <nrf_modem_os_init>
   35db2:	2001      	movs	r0, #1
   35db4:	f000 f854 	bl	35e60 <nrf_modem_state_set>
   35db8:	6a23      	ldr	r3, [r4, #32]
   35dba:	4668      	mov	r0, sp
   35dbc:	9400      	str	r4, [sp, #0]
   35dbe:	f88d 3004 	strb.w	r3, [sp, #4]
   35dc2:	f7fe f8dd 	bl	33f80 <rpc_transport_ipc_init>
   35dc6:	4604      	mov	r4, r0
   35dc8:	b938      	cbnz	r0, 35dda <nrf_modem_init+0x4a>
   35dca:	f7ff f911 	bl	34ff0 <nrf_modem_at_init>
   35dce:	4604      	mov	r4, r0
   35dd0:	b918      	cbnz	r0, 35dda <nrf_modem_init+0x4a>
   35dd2:	f7fe fcf7 	bl	347c4 <ip_interface_init>
   35dd6:	4604      	mov	r4, r0
   35dd8:	b1c8      	cbz	r0, 35e0e <nrf_modem_init+0x7e>
   35dda:	2000      	movs	r0, #0
   35ddc:	f000 f840 	bl	35e60 <nrf_modem_state_set>
   35de0:	f7ff ffc2 	bl	35d68 <modem_off>
   35de4:	4620      	mov	r0, r4
   35de6:	b003      	add	sp, #12
   35de8:	bd30      	pop	{r4, r5, pc}
   35dea:	68e2      	ldr	r2, [r4, #12]
   35dec:	6863      	ldr	r3, [r4, #4]
   35dee:	4413      	add	r3, r2
   35df0:	6962      	ldr	r2, [r4, #20]
   35df2:	4413      	add	r3, r2
   35df4:	69e2      	ldr	r2, [r4, #28]
   35df6:	4413      	add	r3, r2
   35df8:	f242 021b 	movw	r2, #8219	; 0x201b
   35dfc:	4293      	cmp	r3, r2
   35dfe:	d913      	bls.n	35e28 <nrf_modem_init+0x98>
   35e00:	2002      	movs	r0, #2
   35e02:	f000 f82d 	bl	35e60 <nrf_modem_state_set>
   35e06:	6820      	ldr	r0, [r4, #0]
   35e08:	f7ff ff3e 	bl	35c88 <nrf_modem_full_dfu_setup>
   35e0c:	e7e3      	b.n	35dd6 <nrf_modem_init+0x46>
   35e0e:	4b08      	ldr	r3, [pc, #32]	; (35e30 <nrf_modem_init+0xa0>)
   35e10:	2400      	movs	r4, #0
   35e12:	701d      	strb	r5, [r3, #0]
   35e14:	e7e6      	b.n	35de4 <nrf_modem_init+0x54>
   35e16:	f04f 34ff 	mov.w	r4, #4294967295
   35e1a:	e7e3      	b.n	35de4 <nrf_modem_init+0x54>
   35e1c:	f06f 040d 	mvn.w	r4, #13
   35e20:	e7e0      	b.n	35de4 <nrf_modem_init+0x54>
   35e22:	f06f 0415 	mvn.w	r4, #21
   35e26:	e7dd      	b.n	35de4 <nrf_modem_init+0x54>
   35e28:	f06f 040b 	mvn.w	r4, #11
   35e2c:	e7da      	b.n	35de4 <nrf_modem_init+0x54>
   35e2e:	bf00      	nop
   35e30:	2001d3ca 	.word	0x2001d3ca

00035e34 <nrf_modem_fault_handler_set>:
   35e34:	4b01      	ldr	r3, [pc, #4]	; (35e3c <nrf_modem_fault_handler_set+0x8>)
   35e36:	6018      	str	r0, [r3, #0]
   35e38:	4770      	bx	lr
   35e3a:	bf00      	nop
   35e3c:	2001a4fc 	.word	0x2001a4fc

00035e40 <nrf_modem_fault_handler_internal>:
   35e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35e42:	460c      	mov	r4, r1
   35e44:	4605      	mov	r5, r0
   35e46:	2003      	movs	r0, #3
   35e48:	f000 f80a 	bl	35e60 <nrf_modem_state_set>
   35e4c:	4b03      	ldr	r3, [pc, #12]	; (35e5c <nrf_modem_fault_handler_internal+0x1c>)
   35e4e:	4668      	mov	r0, sp
   35e50:	e9cd 5400 	strd	r5, r4, [sp]
   35e54:	681b      	ldr	r3, [r3, #0]
   35e56:	4798      	blx	r3
   35e58:	b003      	add	sp, #12
   35e5a:	bd30      	pop	{r4, r5, pc}
   35e5c:	2001a4fc 	.word	0x2001a4fc

00035e60 <nrf_modem_state_set>:
   35e60:	4b01      	ldr	r3, [pc, #4]	; (35e68 <nrf_modem_state_set+0x8>)
   35e62:	7018      	strb	r0, [r3, #0]
   35e64:	4770      	bx	lr
   35e66:	bf00      	nop
   35e68:	2001d3cb 	.word	0x2001d3cb

00035e6c <nrf_modem_state_is_initialized>:
   35e6c:	4b02      	ldr	r3, [pc, #8]	; (35e78 <nrf_modem_state_is_initialized+0xc>)
   35e6e:	7818      	ldrb	r0, [r3, #0]
   35e70:	1e43      	subs	r3, r0, #1
   35e72:	4258      	negs	r0, r3
   35e74:	4158      	adcs	r0, r3
   35e76:	4770      	bx	lr
   35e78:	2001d3cb 	.word	0x2001d3cb

00035e7c <nrf_modem_state_is_uninitialized>:
   35e7c:	4b02      	ldr	r3, [pc, #8]	; (35e88 <nrf_modem_state_is_uninitialized+0xc>)
   35e7e:	7818      	ldrb	r0, [r3, #0]
   35e80:	fab0 f080 	clz	r0, r0
   35e84:	0940      	lsrs	r0, r0, #5
   35e86:	4770      	bx	lr
   35e88:	2001d3cb 	.word	0x2001d3cb

00035e8c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   35e8c:	4b0e      	ldr	r3, [pc, #56]	; (35ec8 <z_sys_init_run_level+0x3c>)
{
   35e8e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   35e90:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   35e94:	3001      	adds	r0, #1
   35e96:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   35e9a:	42a6      	cmp	r6, r4
   35e9c:	d800      	bhi.n	35ea0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   35e9e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   35ea0:	e9d4 3500 	ldrd	r3, r5, [r4]
   35ea4:	4628      	mov	r0, r5
   35ea6:	4798      	blx	r3
		if (dev != NULL) {
   35ea8:	b165      	cbz	r5, 35ec4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   35eaa:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   35eac:	b130      	cbz	r0, 35ebc <z_sys_init_run_level+0x30>
				if (rc < 0) {
   35eae:	2800      	cmp	r0, #0
   35eb0:	bfb8      	it	lt
   35eb2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   35eb4:	28ff      	cmp	r0, #255	; 0xff
   35eb6:	bfa8      	it	ge
   35eb8:	20ff      	movge	r0, #255	; 0xff
   35eba:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   35ebc:	785a      	ldrb	r2, [r3, #1]
   35ebe:	f042 0201 	orr.w	r2, r2, #1
   35ec2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   35ec4:	3408      	adds	r4, #8
   35ec6:	e7e8      	b.n	35e9a <z_sys_init_run_level+0xe>
   35ec8:	000433d4 	.word	0x000433d4

00035ecc <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   35ecc:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   35ece:	4605      	mov	r5, r0
   35ed0:	b910      	cbnz	r0, 35ed8 <z_impl_device_get_binding+0xc>
		return NULL;
   35ed2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   35ed4:	4620      	mov	r0, r4
   35ed6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   35ed8:	7803      	ldrb	r3, [r0, #0]
   35eda:	2b00      	cmp	r3, #0
   35edc:	d0f9      	beq.n	35ed2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   35ede:	4c0e      	ldr	r4, [pc, #56]	; (35f18 <z_impl_device_get_binding+0x4c>)
   35ee0:	4e0e      	ldr	r6, [pc, #56]	; (35f1c <z_impl_device_get_binding+0x50>)
   35ee2:	42b4      	cmp	r4, r6
   35ee4:	d108      	bne.n	35ef8 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   35ee6:	4c0c      	ldr	r4, [pc, #48]	; (35f18 <z_impl_device_get_binding+0x4c>)
   35ee8:	42b4      	cmp	r4, r6
   35eea:	d0f2      	beq.n	35ed2 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   35eec:	4620      	mov	r0, r4
   35eee:	f00b f81a 	bl	40f26 <z_device_is_ready>
   35ef2:	b950      	cbnz	r0, 35f0a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   35ef4:	3418      	adds	r4, #24
   35ef6:	e7f7      	b.n	35ee8 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   35ef8:	4620      	mov	r0, r4
   35efa:	f00b f814 	bl	40f26 <z_device_is_ready>
   35efe:	b110      	cbz	r0, 35f06 <z_impl_device_get_binding+0x3a>
   35f00:	6823      	ldr	r3, [r4, #0]
   35f02:	42ab      	cmp	r3, r5
   35f04:	d0e6      	beq.n	35ed4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   35f06:	3418      	adds	r4, #24
   35f08:	e7eb      	b.n	35ee2 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   35f0a:	4628      	mov	r0, r5
   35f0c:	6821      	ldr	r1, [r4, #0]
   35f0e:	f7e7 f98e 	bl	1d22e <strcmp>
   35f12:	2800      	cmp	r0, #0
   35f14:	d1ee      	bne.n	35ef4 <z_impl_device_get_binding+0x28>
   35f16:	e7dd      	b.n	35ed4 <z_impl_device_get_binding+0x8>
   35f18:	00042344 	.word	0x00042344
   35f1c:	000423ec 	.word	0x000423ec

00035f20 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   35f20:	4b01      	ldr	r3, [pc, #4]	; (35f28 <z_impl_z_errno+0x8>)
   35f22:	6898      	ldr	r0, [r3, #8]
}
   35f24:	3070      	adds	r0, #112	; 0x70
   35f26:	4770      	bx	lr
   35f28:	2001a500 	.word	0x2001a500

00035f2c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   35f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35f2e:	4604      	mov	r4, r0
   35f30:	460e      	mov	r6, r1
	__asm__ volatile(
   35f32:	f04f 0320 	mov.w	r3, #32
   35f36:	f3ef 8711 	mrs	r7, BASEPRI
   35f3a:	f383 8812 	msr	BASEPRI_MAX, r3
   35f3e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   35f42:	f002 fb95 	bl	38670 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   35f46:	2200      	movs	r2, #0
   35f48:	2c04      	cmp	r4, #4
   35f4a:	bf98      	it	ls
   35f4c:	4b1d      	ldrls	r3, [pc, #116]	; (35fc4 <z_fatal_error+0x98>)
   35f4e:	4605      	mov	r5, r0
	switch (reason) {
   35f50:	bf94      	ite	ls
   35f52:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   35f56:	4b1c      	ldrhi	r3, [pc, #112]	; (35fc8 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   35f58:	9200      	str	r2, [sp, #0]
   35f5a:	2145      	movs	r1, #69	; 0x45
   35f5c:	4622      	mov	r2, r4
   35f5e:	481b      	ldr	r0, [pc, #108]	; (35fcc <z_fatal_error+0xa0>)
   35f60:	f006 fdce 	bl	3cb00 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   35f64:	b13e      	cbz	r6, 35f76 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   35f66:	69f3      	ldr	r3, [r6, #28]
   35f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
   35f6c:	b11b      	cbz	r3, 35f76 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   35f6e:	2145      	movs	r1, #69	; 0x45
   35f70:	4817      	ldr	r0, [pc, #92]	; (35fd0 <z_fatal_error+0xa4>)
   35f72:	f006 fdc5 	bl	3cb00 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   35f76:	b12d      	cbz	r5, 35f84 <z_fatal_error+0x58>
   35f78:	4628      	mov	r0, r5
   35f7a:	f00a fffe 	bl	40f7a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   35f7e:	b108      	cbz	r0, 35f84 <z_fatal_error+0x58>
   35f80:	7803      	ldrb	r3, [r0, #0]
   35f82:	b903      	cbnz	r3, 35f86 <z_fatal_error+0x5a>
		thread_name = "unknown";
   35f84:	4813      	ldr	r0, [pc, #76]	; (35fd4 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   35f86:	4603      	mov	r3, r0
   35f88:	462a      	mov	r2, r5
   35f8a:	2145      	movs	r1, #69	; 0x45
   35f8c:	4812      	ldr	r0, [pc, #72]	; (35fd8 <z_fatal_error+0xac>)
   35f8e:	f006 fdb7 	bl	3cb00 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   35f92:	4631      	mov	r1, r6
   35f94:	4620      	mov	r0, r4
   35f96:	f7f2 fd07 	bl	289a8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   35f9a:	2c04      	cmp	r4, #4
   35f9c:	d108      	bne.n	35fb0 <z_fatal_error+0x84>
   35f9e:	490f      	ldr	r1, [pc, #60]	; (35fdc <z_fatal_error+0xb0>)
   35fa0:	480f      	ldr	r0, [pc, #60]	; (35fe0 <z_fatal_error+0xb4>)
   35fa2:	228f      	movs	r2, #143	; 0x8f
   35fa4:	f006 fd72 	bl	3ca8c <assert_print>
   35fa8:	218f      	movs	r1, #143	; 0x8f
   35faa:	480c      	ldr	r0, [pc, #48]	; (35fdc <z_fatal_error+0xb0>)
   35fac:	f006 fd67 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   35fb0:	f387 8811 	msr	BASEPRI, r7
   35fb4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   35fb8:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   35fba:	b003      	add	sp, #12
   35fbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   35fc0:	f7ed ba1c 	b.w	233fc <z_impl_k_thread_abort>
   35fc4:	000433ec 	.word	0x000433ec
   35fc8:	0004b9cc 	.word	0x0004b9cc
   35fcc:	0004b9e2 	.word	0x0004b9e2
   35fd0:	0004ba0f 	.word	0x0004ba0f
   35fd4:	0004b9da 	.word	0x0004b9da
   35fd8:	0004ba35 	.word	0x0004ba35
   35fdc:	0004ba52 	.word	0x0004ba52
   35fe0:	0004409e 	.word	0x0004409e

00035fe4 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   35fe4:	2201      	movs	r2, #1
{
   35fe6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   35fe8:	4b09      	ldr	r3, [pc, #36]	; (36010 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   35fea:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   35fec:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   35fee:	f7ff ff4d 	bl	35e8c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   35ff2:	f003 fc87 	bl	39904 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   35ff6:	2003      	movs	r0, #3
   35ff8:	f7ff ff48 	bl	35e8c <z_sys_init_run_level>

	z_init_static_threads();
   35ffc:	f000 fa74 	bl	364e8 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   36000:	f7e9 ff12 	bl	1fe28 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   36004:	4a03      	ldr	r2, [pc, #12]	; (36014 <bg_thread_main+0x30>)
   36006:	7b13      	ldrb	r3, [r2, #12]
   36008:	f023 0301 	bic.w	r3, r3, #1
   3600c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   3600e:	bd08      	pop	{r3, pc}
   36010:	2001d3cc 	.word	0x2001d3cc
   36014:	20018ed0 	.word	0x20018ed0

00036018 <z_bss_zero>:
{
   36018:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   3601a:	4803      	ldr	r0, [pc, #12]	; (36028 <z_bss_zero+0x10>)
   3601c:	4a03      	ldr	r2, [pc, #12]	; (3602c <z_bss_zero+0x14>)
   3601e:	2100      	movs	r1, #0
   36020:	1a12      	subs	r2, r2, r0
   36022:	f00a ff8a 	bl	40f3a <z_early_memset>
}
   36026:	bd08      	pop	{r3, pc}
   36028:	20015150 	.word	0x20015150
   3602c:	2001d3d0 	.word	0x2001d3d0

00036030 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   36030:	23d0      	movs	r3, #208	; 0xd0
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   36032:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   36034:	4e13      	ldr	r6, [pc, #76]	; (36084 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   36036:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   36038:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   3603c:	2300      	movs	r3, #0
{
   3603e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   36040:	e9cd 2304 	strd	r2, r3, [sp, #16]
   36044:	220f      	movs	r2, #15
   36046:	9301      	str	r3, [sp, #4]
   36048:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   3604c:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   3604e:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   36052:	4d0d      	ldr	r5, [pc, #52]	; (36088 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   36054:	490d      	ldr	r1, [pc, #52]	; (3608c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   36056:	fb03 5500 	mla	r5, r3, r0, r5
{
   3605a:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   3605c:	fb02 1100 	mla	r1, r2, r0, r1
   36060:	4b0b      	ldr	r3, [pc, #44]	; (36090 <z_init_cpu+0x60>)
   36062:	4630      	mov	r0, r6
   36064:	9500      	str	r5, [sp, #0]
   36066:	f000 f9a1 	bl	363ac <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3606a:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   3606c:	4809      	ldr	r0, [pc, #36]	; (36094 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   3606e:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   36070:	3401      	adds	r4, #1
   36072:	f023 0304 	bic.w	r3, r3, #4
   36076:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   3607a:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   3607c:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   3607e:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   36080:	b006      	add	sp, #24
   36082:	bd70      	pop	{r4, r5, r6, pc}
   36084:	20018e00 	.word	0x20018e00
   36088:	2001a500 	.word	0x2001a500
   3608c:	20021a00 	.word	0x20021a00
   36090:	0003662d 	.word	0x0003662d
   36094:	20021b40 	.word	0x20021b40

00036098 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   36098:	b500      	push	{lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   3609a:	4b2e      	ldr	r3, [pc, #184]	; (36154 <z_cstart+0xbc>)
   3609c:	b0bd      	sub	sp, #244	; 0xf4
	uint32_t msp =
   3609e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   360a2:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   360a6:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   360aa:	2400      	movs	r4, #0
   360ac:	23e0      	movs	r3, #224	; 0xe0
   360ae:	4d2a      	ldr	r5, [pc, #168]	; (36158 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   360b0:	4e2a      	ldr	r6, [pc, #168]	; (3615c <z_cstart+0xc4>)
   360b2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   360b6:	77ec      	strb	r4, [r5, #31]
   360b8:	762c      	strb	r4, [r5, #24]
   360ba:	766c      	strb	r4, [r5, #25]
   360bc:	76ac      	strb	r4, [r5, #26]
   360be:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   360c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   360c4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   360c8:	626b      	str	r3, [r5, #36]	; 0x24
   360ca:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   360ce:	f7ed f8d3 	bl	23278 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   360d2:	f7ec fcbb 	bl	22a4c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   360d6:	f04f 33ff 	mov.w	r3, #4294967295
   360da:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   360dc:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   360de:	f7ed fb61 	bl	237a4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   360e2:	f7ed f9a1 	bl	23428 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   360e6:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   360ea:	ad08      	add	r5, sp, #32
   360ec:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   360ee:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	dummy_thread->stack_info.size = 0U;
   360f2:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
	k_thread_system_pool_assign(dummy_thread);
   360f6:	f003 fbe3 	bl	398c0 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   360fa:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   360fc:	f00a ff12 	bl	40f24 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   36100:	4620      	mov	r0, r4
   36102:	f7ff fec3 	bl	35e8c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   36106:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   36108:	4d15      	ldr	r5, [pc, #84]	; (36160 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   3610a:	f7ff febf 	bl	35e8c <z_sys_init_run_level>
	z_sched_init();
   3610e:	f002 f965 	bl	383dc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   36112:	4b14      	ldr	r3, [pc, #80]	; (36164 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
   36114:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   36116:	9305      	str	r3, [sp, #20]
   36118:	2301      	movs	r3, #1
   3611a:	4e13      	ldr	r6, [pc, #76]	; (36168 <z_cstart+0xd0>)
   3611c:	4913      	ldr	r1, [pc, #76]	; (3616c <z_cstart+0xd4>)
   3611e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   36122:	e9cd 4303 	strd	r4, r3, [sp, #12]
   36126:	4628      	mov	r0, r5
   36128:	4633      	mov	r3, r6
   3612a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3612e:	9400      	str	r4, [sp, #0]
   36130:	f000 f93c 	bl	363ac <z_setup_new_thread>
   36134:	7b6a      	ldrb	r2, [r5, #13]
   36136:	9007      	str	r0, [sp, #28]
   36138:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   3613c:	4628      	mov	r0, r5
   3613e:	736a      	strb	r2, [r5, #13]
   36140:	f001 fe0a 	bl	37d58 <z_ready_thread>
	z_init_cpu(0);
   36144:	4620      	mov	r0, r4
   36146:	f7ff ff73 	bl	36030 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   3614a:	4632      	mov	r2, r6
   3614c:	4628      	mov	r0, r5
   3614e:	9907      	ldr	r1, [sp, #28]
   36150:	f7ec fe30 	bl	22db4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   36154:	20021b40 	.word	0x20021b40
   36158:	e000ed00 	.word	0xe000ed00
   3615c:	2001a500 	.word	0x2001a500
   36160:	20018ed0 	.word	0x20018ed0
   36164:	0004354c 	.word	0x0004354c
   36168:	00035fe5 	.word	0x00035fe5
   3616c:	20021600 	.word	0x20021600

00036170 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   36170:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   36172:	4c0c      	ldr	r4, [pc, #48]	; (361a4 <statics_init+0x34>)
   36174:	4d0c      	ldr	r5, [pc, #48]	; (361a8 <statics_init+0x38>)
   36176:	4e0d      	ldr	r6, [pc, #52]	; (361ac <statics_init+0x3c>)
   36178:	42ac      	cmp	r4, r5
   3617a:	d908      	bls.n	3618e <statics_init+0x1e>
   3617c:	4631      	mov	r1, r6
   3617e:	480c      	ldr	r0, [pc, #48]	; (361b0 <statics_init+0x40>)
   36180:	2218      	movs	r2, #24
   36182:	f006 fc83 	bl	3ca8c <assert_print>
   36186:	2118      	movs	r1, #24
   36188:	4630      	mov	r0, r6
   3618a:	f006 fc78 	bl	3ca7e <assert_post_action>
   3618e:	42ac      	cmp	r4, r5
   36190:	d301      	bcc.n	36196 <statics_init+0x26>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   36192:	2000      	movs	r0, #0
   36194:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   36196:	4620      	mov	r0, r4
   36198:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   3619c:	f00a fed1 	bl	40f42 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   361a0:	3418      	adds	r4, #24
   361a2:	e7e9      	b.n	36178 <statics_init+0x8>
   361a4:	20014e68 	.word	0x20014e68
   361a8:	20014ec8 	.word	0x20014ec8
   361ac:	0004babe 	.word	0x0004babe
   361b0:	0004409e 	.word	0x0004409e

000361b4 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   361b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   361b8:	b085      	sub	sp, #20
   361ba:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   361be:	4606      	mov	r6, r0
   361c0:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   361c2:	4648      	mov	r0, r9
   361c4:	4639      	mov	r1, r7
{
   361c6:	4690      	mov	r8, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   361c8:	f00a ffaa 	bl	41120 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   361cc:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   361d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
	__asm__ volatile(
   361d4:	f04f 0320 	mov.w	r3, #32
   361d8:	f3ef 8411 	mrs	r4, BASEPRI
   361dc:	f383 8812 	msr	BASEPRI_MAX, r3
   361e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   361e4:	4628      	mov	r0, r5
   361e6:	f000 f9fb 	bl	365e0 <z_spin_lock_valid>
   361ea:	b940      	cbnz	r0, 361fe <k_heap_aligned_alloc+0x4a>
   361ec:	4932      	ldr	r1, [pc, #200]	; (362b8 <k_heap_aligned_alloc+0x104>)
   361ee:	4833      	ldr	r0, [pc, #204]	; (362bc <k_heap_aligned_alloc+0x108>)
   361f0:	228e      	movs	r2, #142	; 0x8e
   361f2:	f006 fc4b 	bl	3ca8c <assert_print>
   361f6:	218e      	movs	r1, #142	; 0x8e
   361f8:	482f      	ldr	r0, [pc, #188]	; (362b8 <k_heap_aligned_alloc+0x104>)
   361fa:	f006 fc40 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   361fe:	4628      	mov	r0, r5
   36200:	f000 fa0c 	bl	3661c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   36204:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   36208:	b15b      	cbz	r3, 36222 <k_heap_aligned_alloc+0x6e>
   3620a:	ea59 0307 	orrs.w	r3, r9, r7
   3620e:	d008      	beq.n	36222 <k_heap_aligned_alloc+0x6e>
   36210:	492b      	ldr	r1, [pc, #172]	; (362c0 <k_heap_aligned_alloc+0x10c>)
   36212:	482a      	ldr	r0, [pc, #168]	; (362bc <k_heap_aligned_alloc+0x108>)
   36214:	2249      	movs	r2, #73	; 0x49
   36216:	f006 fc39 	bl	3ca8c <assert_print>
   3621a:	2149      	movs	r1, #73	; 0x49
   3621c:	4828      	ldr	r0, [pc, #160]	; (362c0 <k_heap_aligned_alloc+0x10c>)
   3621e:	f006 fc2e 	bl	3ca7e <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36222:	f8df 9094 	ldr.w	r9, [pc, #148]	; 362b8 <k_heap_aligned_alloc+0x104>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   36226:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   3622a:	4642      	mov	r2, r8
   3622c:	4659      	mov	r1, fp
   3622e:	4630      	mov	r0, r6
   36230:	f7eb f81e 	bl	21270 <sys_heap_aligned_alloc>
   36234:	4607      	mov	r7, r0
		now = sys_clock_tick_get();
   36236:	f002 fdcf 	bl	38dd8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   3623a:	b1a7      	cbz	r7, 36266 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3623c:	4628      	mov	r0, r5
   3623e:	f000 f9dd 	bl	365fc <z_spin_unlock_valid>
   36242:	b940      	cbnz	r0, 36256 <k_heap_aligned_alloc+0xa2>
   36244:	491c      	ldr	r1, [pc, #112]	; (362b8 <k_heap_aligned_alloc+0x104>)
   36246:	481d      	ldr	r0, [pc, #116]	; (362bc <k_heap_aligned_alloc+0x108>)
   36248:	22b9      	movs	r2, #185	; 0xb9
   3624a:	f006 fc1f 	bl	3ca8c <assert_print>
   3624e:	21b9      	movs	r1, #185	; 0xb9
   36250:	4819      	ldr	r0, [pc, #100]	; (362b8 <k_heap_aligned_alloc+0x104>)
   36252:	f006 fc14 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   36256:	f384 8811 	msr	BASEPRI, r4
   3625a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   3625e:	4638      	mov	r0, r7
   36260:	b005      	add	sp, #20
   36262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   36266:	9b02      	ldr	r3, [sp, #8]
   36268:	1a18      	subs	r0, r3, r0
   3626a:	9b03      	ldr	r3, [sp, #12]
   3626c:	eb63 0101 	sbc.w	r1, r3, r1
   36270:	2801      	cmp	r0, #1
   36272:	f171 0300 	sbcs.w	r3, r1, #0
   36276:	dbe1      	blt.n	3623c <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   36278:	e9cd 0100 	strd	r0, r1, [sp]
   3627c:	4652      	mov	r2, sl
   3627e:	4621      	mov	r1, r4
   36280:	4628      	mov	r0, r5
   36282:	f001 ff11 	bl	380a8 <z_pend_curr>
	__asm__ volatile(
   36286:	f04f 0320 	mov.w	r3, #32
   3628a:	f3ef 8411 	mrs	r4, BASEPRI
   3628e:	f383 8812 	msr	BASEPRI_MAX, r3
   36292:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36296:	4628      	mov	r0, r5
   36298:	f000 f9a2 	bl	365e0 <z_spin_lock_valid>
   3629c:	b940      	cbnz	r0, 362b0 <k_heap_aligned_alloc+0xfc>
   3629e:	4649      	mov	r1, r9
   362a0:	4806      	ldr	r0, [pc, #24]	; (362bc <k_heap_aligned_alloc+0x108>)
   362a2:	228e      	movs	r2, #142	; 0x8e
   362a4:	f006 fbf2 	bl	3ca8c <assert_print>
   362a8:	218e      	movs	r1, #142	; 0x8e
   362aa:	4648      	mov	r0, r9
   362ac:	f006 fbe7 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   362b0:	4628      	mov	r0, r5
   362b2:	f000 f9b3 	bl	3661c <z_spin_lock_set_owner>
	return k;
   362b6:	e7b8      	b.n	3622a <k_heap_aligned_alloc+0x76>
   362b8:	000440d8 	.word	0x000440d8
   362bc:	0004409e 	.word	0x0004409e
   362c0:	0004babe 	.word	0x0004babe

000362c4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   362c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   362c6:	4604      	mov	r4, r0
   362c8:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   362ca:	f100 0514 	add.w	r5, r0, #20
   362ce:	f04f 0320 	mov.w	r3, #32
   362d2:	f3ef 8711 	mrs	r7, BASEPRI
   362d6:	f383 8812 	msr	BASEPRI_MAX, r3
   362da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   362de:	4628      	mov	r0, r5
   362e0:	f000 f97e 	bl	365e0 <z_spin_lock_valid>
   362e4:	b940      	cbnz	r0, 362f8 <k_heap_free+0x34>
   362e6:	4916      	ldr	r1, [pc, #88]	; (36340 <k_heap_free+0x7c>)
   362e8:	4816      	ldr	r0, [pc, #88]	; (36344 <k_heap_free+0x80>)
   362ea:	228e      	movs	r2, #142	; 0x8e
   362ec:	f006 fbce 	bl	3ca8c <assert_print>
   362f0:	218e      	movs	r1, #142	; 0x8e
   362f2:	4813      	ldr	r0, [pc, #76]	; (36340 <k_heap_free+0x7c>)
   362f4:	f006 fbc3 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   362f8:	4628      	mov	r0, r5
   362fa:	f000 f98f 	bl	3661c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   362fe:	4620      	mov	r0, r4
   36300:	4631      	mov	r1, r6
   36302:	f7ea ff7d 	bl	21200 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   36306:	f104 000c 	add.w	r0, r4, #12
   3630a:	f00a feef 	bl	410ec <z_unpend_all>
   3630e:	b128      	cbz	r0, 3631c <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   36310:	4639      	mov	r1, r7
   36312:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   36314:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   36318:	f001 baee 	b.w	378f8 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3631c:	4628      	mov	r0, r5
   3631e:	f000 f96d 	bl	365fc <z_spin_unlock_valid>
   36322:	b940      	cbnz	r0, 36336 <k_heap_free+0x72>
   36324:	4906      	ldr	r1, [pc, #24]	; (36340 <k_heap_free+0x7c>)
   36326:	4807      	ldr	r0, [pc, #28]	; (36344 <k_heap_free+0x80>)
   36328:	22b9      	movs	r2, #185	; 0xb9
   3632a:	f006 fbaf 	bl	3ca8c <assert_print>
   3632e:	21b9      	movs	r1, #185	; 0xb9
   36330:	4803      	ldr	r0, [pc, #12]	; (36340 <k_heap_free+0x7c>)
   36332:	f006 fba4 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   36336:	f387 8811 	msr	BASEPRI, r7
   3633a:	f3bf 8f6f 	isb	sy
}
   3633e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36340:	000440d8 	.word	0x000440d8
   36344:	0004409e 	.word	0x0004409e

00036348 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   36348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3634a:	4c14      	ldr	r4, [pc, #80]	; (3639c <init_mem_slab_module+0x54>)
   3634c:	4d14      	ldr	r5, [pc, #80]	; (363a0 <init_mem_slab_module+0x58>)
   3634e:	4e15      	ldr	r6, [pc, #84]	; (363a4 <init_mem_slab_module+0x5c>)
   36350:	42ac      	cmp	r4, r5
   36352:	d908      	bls.n	36366 <init_mem_slab_module+0x1e>
   36354:	4631      	mov	r1, r6
   36356:	4814      	ldr	r0, [pc, #80]	; (363a8 <init_mem_slab_module+0x60>)
   36358:	223d      	movs	r2, #61	; 0x3d
   3635a:	f006 fb97 	bl	3ca8c <assert_print>
   3635e:	213d      	movs	r1, #61	; 0x3d
   36360:	4630      	mov	r0, r6
   36362:	f006 fb8c 	bl	3ca7e <assert_post_action>
   36366:	42ac      	cmp	r4, r5
   36368:	d301      	bcc.n	3636e <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   3636a:	2000      	movs	r0, #0
	return rc;
}
   3636c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3636e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   36372:	ea42 0301 	orr.w	r3, r2, r1
   36376:	f013 0303 	ands.w	r3, r3, #3
   3637a:	d10b      	bne.n	36394 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   3637c:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   3637e:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   36380:	4283      	cmp	r3, r0
   36382:	d101      	bne.n	36388 <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   36384:	3420      	adds	r4, #32
   36386:	e7e3      	b.n	36350 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   36388:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3638a:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   3638c:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   3638e:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   36390:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   36392:	e7f5      	b.n	36380 <init_mem_slab_module+0x38>
	return rc;
   36394:	f06f 0015 	mvn.w	r0, #21
   36398:	e7e8      	b.n	3636c <init_mem_slab_module+0x24>
   3639a:	bf00      	nop
   3639c:	20014e68 	.word	0x20014e68
   363a0:	20014e68 	.word	0x20014e68
   363a4:	0004bae0 	.word	0x0004bae0
   363a8:	0004409e 	.word	0x0004409e

000363ac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   363ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   363b0:	b085      	sub	sp, #20
   363b2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   363b6:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   363b8:	f1b9 0f0f 	cmp.w	r9, #15
{
   363bc:	460f      	mov	r7, r1
   363be:	4615      	mov	r5, r2
   363c0:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   363c2:	d130      	bne.n	36426 <z_setup_new_thread+0x7a>
   363c4:	4b20      	ldr	r3, [pc, #128]	; (36448 <z_setup_new_thread+0x9c>)
   363c6:	4598      	cmp	r8, r3
   363c8:	d131      	bne.n	3642e <z_setup_new_thread+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   363ca:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   363ce:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   363d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   363d4:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   363d6:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   363d8:	2304      	movs	r3, #4
   363da:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   363dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   363de:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   363e0:	9302      	str	r3, [sp, #8]
   363e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   363e4:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   363e8:	9301      	str	r3, [sp, #4]
   363ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   363ec:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   363ee:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   363f2:	9300      	str	r3, [sp, #0]
   363f4:	462a      	mov	r2, r5
   363f6:	4643      	mov	r3, r8
   363f8:	4639      	mov	r1, r7
   363fa:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   363fc:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   36400:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   36402:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   36406:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   36408:	67e6      	str	r6, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3640a:	f7ec fcb3 	bl	22d74 <arch_new_thread>
	if (!_current) {
   3640e:	4b0f      	ldr	r3, [pc, #60]	; (3644c <z_setup_new_thread+0xa0>)
	new_thread->init_data = NULL;
   36410:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   36412:	689b      	ldr	r3, [r3, #8]
   36414:	b10b      	cbz	r3, 3641a <z_setup_new_thread+0x6e>
	new_thread->resource_pool = _current->resource_pool;
   36416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   3641a:	4628      	mov	r0, r5
   3641c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   36420:	b005      	add	sp, #20
   36422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   36426:	f109 0310 	add.w	r3, r9, #16
   3642a:	2b1e      	cmp	r3, #30
   3642c:	d9cd      	bls.n	363ca <z_setup_new_thread+0x1e>
   3642e:	f240 12ff 	movw	r2, #511	; 0x1ff
   36432:	4907      	ldr	r1, [pc, #28]	; (36450 <z_setup_new_thread+0xa4>)
   36434:	4807      	ldr	r0, [pc, #28]	; (36454 <z_setup_new_thread+0xa8>)
   36436:	f006 fb29 	bl	3ca8c <assert_print>
   3643a:	f240 11ff 	movw	r1, #511	; 0x1ff
   3643e:	4804      	ldr	r0, [pc, #16]	; (36450 <z_setup_new_thread+0xa4>)
   36440:	f006 fb1d 	bl	3ca7e <assert_post_action>
   36444:	e7c1      	b.n	363ca <z_setup_new_thread+0x1e>
   36446:	bf00      	nop
   36448:	0003662d 	.word	0x0003662d
   3644c:	2001a500 	.word	0x2001a500
   36450:	0004bb05 	.word	0x0004bb05
   36454:	0004409e 	.word	0x0004409e

00036458 <z_impl_k_thread_create>:
{
   36458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3645c:	b088      	sub	sp, #32
   3645e:	4604      	mov	r4, r0
   36460:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   36464:	460f      	mov	r7, r1
   36466:	4690      	mov	r8, r2
   36468:	f3ef 8205 	mrs	r2, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   3646c:	b162      	cbz	r2, 36488 <z_impl_k_thread_create+0x30>
   3646e:	f240 226e 	movw	r2, #622	; 0x26e
   36472:	491a      	ldr	r1, [pc, #104]	; (364dc <z_impl_k_thread_create+0x84>)
   36474:	481a      	ldr	r0, [pc, #104]	; (364e0 <z_impl_k_thread_create+0x88>)
   36476:	9307      	str	r3, [sp, #28]
   36478:	f006 fb08 	bl	3ca8c <assert_print>
   3647c:	f240 216e 	movw	r1, #622	; 0x26e
   36480:	4816      	ldr	r0, [pc, #88]	; (364dc <z_impl_k_thread_create+0x84>)
   36482:	f006 fafc 	bl	3ca7e <assert_post_action>
   36486:	9b07      	ldr	r3, [sp, #28]
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   36488:	2200      	movs	r2, #0
   3648a:	9205      	str	r2, [sp, #20]
   3648c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   3648e:	4639      	mov	r1, r7
   36490:	9204      	str	r2, [sp, #16]
   36492:	9a11      	ldr	r2, [sp, #68]	; 0x44
   36494:	4620      	mov	r0, r4
   36496:	9203      	str	r2, [sp, #12]
   36498:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3649a:	9202      	str	r2, [sp, #8]
   3649c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   3649e:	9201      	str	r2, [sp, #4]
   364a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   364a2:	9200      	str	r2, [sp, #0]
   364a4:	4642      	mov	r2, r8
   364a6:	f7ff ff81 	bl	363ac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   364aa:	f1b5 3fff 	cmp.w	r5, #4294967295
   364ae:	bf08      	it	eq
   364b0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   364b4:	d005      	beq.n	364c2 <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   364b6:	ea55 0306 	orrs.w	r3, r5, r6
   364ba:	d106      	bne.n	364ca <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   364bc:	4620      	mov	r0, r4
   364be:	f001 fc81 	bl	37dc4 <z_sched_start>
}
   364c2:	4620      	mov	r0, r4
   364c4:	b008      	add	sp, #32
   364c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   364ca:	4632      	mov	r2, r6
   364cc:	462b      	mov	r3, r5
   364ce:	4905      	ldr	r1, [pc, #20]	; (364e4 <z_impl_k_thread_create+0x8c>)
   364d0:	f104 0018 	add.w	r0, r4, #24
   364d4:	f002 fa4a 	bl	3896c <z_add_timeout>
   364d8:	e7f3      	b.n	364c2 <z_impl_k_thread_create+0x6a>
   364da:	bf00      	nop
   364dc:	0004bb05 	.word	0x0004bb05
   364e0:	0004409e 	.word	0x0004409e
   364e4:	00037ecd 	.word	0x00037ecd

000364e8 <z_init_static_threads>:
{
   364e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   364ec:	4c37      	ldr	r4, [pc, #220]	; (365cc <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   364ee:	4d38      	ldr	r5, [pc, #224]	; (365d0 <z_init_static_threads+0xe8>)
   364f0:	4f38      	ldr	r7, [pc, #224]	; (365d4 <z_init_static_threads+0xec>)
{
   364f2:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   364f4:	42ac      	cmp	r4, r5
   364f6:	4626      	mov	r6, r4
   364f8:	d90a      	bls.n	36510 <z_init_static_threads+0x28>
   364fa:	4639      	mov	r1, r7
   364fc:	4836      	ldr	r0, [pc, #216]	; (365d8 <z_init_static_threads+0xf0>)
   364fe:	f240 22d5 	movw	r2, #725	; 0x2d5
   36502:	f006 fac3 	bl	3ca8c <assert_print>
   36506:	f240 21d5 	movw	r1, #725	; 0x2d5
   3650a:	4638      	mov	r0, r7
   3650c:	f006 fab7 	bl	3ca7e <assert_post_action>
   36510:	42ae      	cmp	r6, r5
   36512:	f104 0430 	add.w	r4, r4, #48	; 0x30
   36516:	d31b      	bcc.n	36550 <z_init_static_threads+0x68>
	k_sched_lock();
   36518:	f001 fa24 	bl	37964 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   3651c:	4c2b      	ldr	r4, [pc, #172]	; (365cc <z_init_static_threads+0xe4>)
   3651e:	4e2d      	ldr	r6, [pc, #180]	; (365d4 <z_init_static_threads+0xec>)
   36520:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 365d8 <z_init_static_threads+0xf0>
   36524:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 365dc <z_init_static_threads+0xf4>
   36528:	42ac      	cmp	r4, r5
   3652a:	d90a      	bls.n	36542 <z_init_static_threads+0x5a>
   3652c:	4631      	mov	r1, r6
   3652e:	4640      	mov	r0, r8
   36530:	f44f 723d 	mov.w	r2, #756	; 0x2f4
   36534:	f006 faaa 	bl	3ca8c <assert_print>
   36538:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   3653c:	4630      	mov	r0, r6
   3653e:	f006 fa9e 	bl	3ca7e <assert_post_action>
   36542:	42ac      	cmp	r4, r5
   36544:	d320      	bcc.n	36588 <z_init_static_threads+0xa0>
}
   36546:	b007      	add	sp, #28
   36548:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   3654c:	f001 beac 	b.w	382a8 <k_sched_unlock>
		z_setup_new_thread(
   36550:	f854 3c04 	ldr.w	r3, [r4, #-4]
   36554:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   36558:	9305      	str	r3, [sp, #20]
   3655a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3655e:	9304      	str	r3, [sp, #16]
   36560:	f854 3c14 	ldr.w	r3, [r4, #-20]
   36564:	9303      	str	r3, [sp, #12]
   36566:	f854 3c18 	ldr.w	r3, [r4, #-24]
   3656a:	9302      	str	r3, [sp, #8]
   3656c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   36570:	9301      	str	r3, [sp, #4]
   36572:	f854 3c20 	ldr.w	r3, [r4, #-32]
   36576:	9300      	str	r3, [sp, #0]
   36578:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   3657c:	f7ff ff16 	bl	363ac <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   36580:	f854 3c30 	ldr.w	r3, [r4, #-48]
   36584:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   36586:	e7b5      	b.n	364f4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   36588:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3658a:	1c5a      	adds	r2, r3, #1
   3658c:	d00f      	beq.n	365ae <z_init_static_threads+0xc6>
   3658e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   36592:	f240 30e7 	movw	r0, #999	; 0x3e7
   36596:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   36598:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   3659c:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   365a0:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   365a4:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   365a6:	d104      	bne.n	365b2 <z_init_static_threads+0xca>
	z_sched_start(thread);
   365a8:	4638      	mov	r0, r7
   365aa:	f001 fc0b 	bl	37dc4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   365ae:	3430      	adds	r4, #48	; 0x30
   365b0:	e7ba      	b.n	36528 <z_init_static_threads+0x40>
   365b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   365b6:	2300      	movs	r3, #0
   365b8:	f7e6 fc96 	bl	1cee8 <__aeabi_uldivmod>
   365bc:	4602      	mov	r2, r0
   365be:	460b      	mov	r3, r1
   365c0:	f107 0018 	add.w	r0, r7, #24
   365c4:	4649      	mov	r1, r9
   365c6:	f002 f9d1 	bl	3896c <z_add_timeout>
   365ca:	e7f0      	b.n	365ae <z_init_static_threads+0xc6>
   365cc:	20014d08 	.word	0x20014d08
   365d0:	20014df8 	.word	0x20014df8
   365d4:	0004bb05 	.word	0x0004bb05
   365d8:	0004409e 	.word	0x0004409e
   365dc:	00037ecd 	.word	0x00037ecd

000365e0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   365e0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   365e2:	b138      	cbz	r0, 365f4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   365e4:	4b04      	ldr	r3, [pc, #16]	; (365f8 <z_spin_lock_valid+0x18>)
   365e6:	f000 0003 	and.w	r0, r0, #3
   365ea:	7d1b      	ldrb	r3, [r3, #20]
   365ec:	1ac0      	subs	r0, r0, r3
   365ee:	bf18      	it	ne
   365f0:	2001      	movne	r0, #1
   365f2:	4770      	bx	lr
			return false;
		}
	}
	return true;
   365f4:	2001      	movs	r0, #1
}
   365f6:	4770      	bx	lr
   365f8:	2001a500 	.word	0x2001a500

000365fc <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   365fc:	4a06      	ldr	r2, [pc, #24]	; (36618 <z_spin_unlock_valid+0x1c>)
   365fe:	7d11      	ldrb	r1, [r2, #20]
   36600:	6893      	ldr	r3, [r2, #8]
   36602:	6802      	ldr	r2, [r0, #0]
   36604:	430b      	orrs	r3, r1
   36606:	429a      	cmp	r2, r3
   36608:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   3660c:	bf06      	itte	eq
   3660e:	6003      	streq	r3, [r0, #0]
	return true;
   36610:	2001      	moveq	r0, #1
		return false;
   36612:	4618      	movne	r0, r3
}
   36614:	4770      	bx	lr
   36616:	bf00      	nop
   36618:	2001a500 	.word	0x2001a500

0003661c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   3661c:	4a02      	ldr	r2, [pc, #8]	; (36628 <z_spin_lock_set_owner+0xc>)
   3661e:	7d11      	ldrb	r1, [r2, #20]
   36620:	6893      	ldr	r3, [r2, #8]
   36622:	430b      	orrs	r3, r1
   36624:	6003      	str	r3, [r0, #0]
}
   36626:	4770      	bx	lr
   36628:	2001a500 	.word	0x2001a500

0003662c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   3662c:	4c12      	ldr	r4, [pc, #72]	; (36678 <idle+0x4c>)
{
   3662e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   36630:	68a3      	ldr	r3, [r4, #8]
   36632:	f993 300e 	ldrsb.w	r3, [r3, #14]
   36636:	2b00      	cmp	r3, #0
   36638:	da08      	bge.n	3664c <idle+0x20>
   3663a:	4910      	ldr	r1, [pc, #64]	; (3667c <idle+0x50>)
   3663c:	4810      	ldr	r0, [pc, #64]	; (36680 <idle+0x54>)
   3663e:	2227      	movs	r2, #39	; 0x27
   36640:	f006 fa24 	bl	3ca8c <assert_print>
   36644:	2127      	movs	r1, #39	; 0x27
   36646:	480d      	ldr	r0, [pc, #52]	; (3667c <idle+0x50>)
   36648:	f006 fa19 	bl	3ca7e <assert_post_action>
   3664c:	4d0d      	ldr	r5, [pc, #52]	; (36684 <idle+0x58>)
	__asm__ volatile(
   3664e:	f04f 0220 	mov.w	r2, #32
   36652:	f3ef 8311 	mrs	r3, BASEPRI
   36656:	f382 8812 	msr	BASEPRI_MAX, r2
   3665a:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   3665e:	f002 faa9 	bl	38bb4 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   36662:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   36664:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   36666:	b913      	cbnz	r3, 3666e <idle+0x42>
	arch_cpu_idle();
   36668:	f7ec f9f6 	bl	22a58 <arch_cpu_idle>
}
   3666c:	e7ef      	b.n	3664e <idle+0x22>
   3666e:	f7ec f91b 	bl	228a8 <pm_system_suspend>
   36672:	2800      	cmp	r0, #0
   36674:	d1eb      	bne.n	3664e <idle+0x22>
   36676:	e7f7      	b.n	36668 <idle+0x3c>
   36678:	2001a500 	.word	0x2001a500
   3667c:	0004bb28 	.word	0x0004bb28
   36680:	0004409e 	.word	0x0004409e
   36684:	2001d3cc 	.word	0x2001d3cc

00036688 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   36688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3668c:	4604      	mov	r4, r0
   3668e:	4689      	mov	r9, r1
   36690:	4690      	mov	r8, r2
   36692:	461d      	mov	r5, r3
   36694:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   36698:	b15b      	cbz	r3, 366b2 <z_impl_k_msgq_put+0x2a>
   3669a:	ea52 0305 	orrs.w	r3, r2, r5
   3669e:	d008      	beq.n	366b2 <z_impl_k_msgq_put+0x2a>
   366a0:	493d      	ldr	r1, [pc, #244]	; (36798 <z_impl_k_msgq_put+0x110>)
   366a2:	483e      	ldr	r0, [pc, #248]	; (3679c <z_impl_k_msgq_put+0x114>)
   366a4:	2276      	movs	r2, #118	; 0x76
   366a6:	f006 f9f1 	bl	3ca8c <assert_print>
   366aa:	2176      	movs	r1, #118	; 0x76
   366ac:	483a      	ldr	r0, [pc, #232]	; (36798 <z_impl_k_msgq_put+0x110>)
   366ae:	f006 f9e6 	bl	3ca7e <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   366b2:	f104 0608 	add.w	r6, r4, #8
   366b6:	f04f 0320 	mov.w	r3, #32
   366ba:	f3ef 8711 	mrs	r7, BASEPRI
   366be:	f383 8812 	msr	BASEPRI_MAX, r3
   366c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   366c6:	4630      	mov	r0, r6
   366c8:	f7ff ff8a 	bl	365e0 <z_spin_lock_valid>
   366cc:	b940      	cbnz	r0, 366e0 <z_impl_k_msgq_put+0x58>
   366ce:	4934      	ldr	r1, [pc, #208]	; (367a0 <z_impl_k_msgq_put+0x118>)
   366d0:	4832      	ldr	r0, [pc, #200]	; (3679c <z_impl_k_msgq_put+0x114>)
   366d2:	228e      	movs	r2, #142	; 0x8e
   366d4:	f006 f9da 	bl	3ca8c <assert_print>
   366d8:	218e      	movs	r1, #142	; 0x8e
   366da:	4831      	ldr	r0, [pc, #196]	; (367a0 <z_impl_k_msgq_put+0x118>)
   366dc:	f006 f9cf 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   366e0:	4630      	mov	r0, r6
   366e2:	f7ff ff9b 	bl	3661c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   366e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   366e8:	6923      	ldr	r3, [r4, #16]
   366ea:	429a      	cmp	r2, r3
   366ec:	d240      	bcs.n	36770 <z_impl_k_msgq_put+0xe8>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   366ee:	4620      	mov	r0, r4
   366f0:	f001 fe36 	bl	38360 <z_unpend_first_thread>
   366f4:	4649      	mov	r1, r9
		if (pending_thread != NULL) {
   366f6:	4605      	mov	r5, r0
   366f8:	68e2      	ldr	r2, [r4, #12]
   366fa:	b180      	cbz	r0, 3671e <z_impl_k_msgq_put+0x96>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   366fc:	2400      	movs	r4, #0
   366fe:	6940      	ldr	r0, [r0, #20]
   36700:	f00a fe78 	bl	413f4 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   36704:	4628      	mov	r0, r5
   36706:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
   3670a:	f001 fb25 	bl	37d58 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   3670e:	4639      	mov	r1, r7
   36710:	4630      	mov	r0, r6
   36712:	f001 f8f1 	bl	378f8 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   36716:	4620      	mov	r0, r4
   36718:	b003      	add	sp, #12
   3671a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3671e:	6a20      	ldr	r0, [r4, #32]
   36720:	f00a fe68 	bl	413f4 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   36724:	6a23      	ldr	r3, [r4, #32]
   36726:	68e2      	ldr	r2, [r4, #12]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   36728:	f104 0028 	add.w	r0, r4, #40	; 0x28
			msgq->write_ptr += msgq->msg_size;
   3672c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3672e:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   36730:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   36732:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   36734:	bf08      	it	eq
   36736:	6963      	ldreq	r3, [r4, #20]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   36738:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   3673c:	bf08      	it	eq
   3673e:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   36740:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36742:	3301      	adds	r3, #1
   36744:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
   36746:	f00a fda4 	bl	41292 <z_handle_obj_poll_events>
		result = 0;
   3674a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3674c:	4630      	mov	r0, r6
   3674e:	f7ff ff55 	bl	365fc <z_spin_unlock_valid>
   36752:	b940      	cbnz	r0, 36766 <z_impl_k_msgq_put+0xde>
   36754:	4912      	ldr	r1, [pc, #72]	; (367a0 <z_impl_k_msgq_put+0x118>)
   36756:	4811      	ldr	r0, [pc, #68]	; (3679c <z_impl_k_msgq_put+0x114>)
   36758:	22b9      	movs	r2, #185	; 0xb9
   3675a:	f006 f997 	bl	3ca8c <assert_print>
   3675e:	21b9      	movs	r1, #185	; 0xb9
   36760:	480f      	ldr	r0, [pc, #60]	; (367a0 <z_impl_k_msgq_put+0x118>)
   36762:	f006 f98c 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   36766:	f387 8811 	msr	BASEPRI, r7
   3676a:	f3bf 8f6f 	isb	sy
	return result;
   3676e:	e7d2      	b.n	36716 <z_impl_k_msgq_put+0x8e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36770:	ea58 0305 	orrs.w	r3, r8, r5
   36774:	d00c      	beq.n	36790 <z_impl_k_msgq_put+0x108>
		_current->base.swap_data = (void *) data;
   36776:	4b0b      	ldr	r3, [pc, #44]	; (367a4 <z_impl_k_msgq_put+0x11c>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36778:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   3677a:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3677c:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   3677e:	f8c3 9014 	str.w	r9, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36782:	4630      	mov	r0, r6
   36784:	e9cd 8500 	strd	r8, r5, [sp]
   36788:	f001 fc8e 	bl	380a8 <z_pend_curr>
   3678c:	4604      	mov	r4, r0
		return result;
   3678e:	e7c2      	b.n	36716 <z_impl_k_msgq_put+0x8e>
		result = -ENOMSG;
   36790:	f06f 0422 	mvn.w	r4, #34	; 0x22
   36794:	e7da      	b.n	3674c <z_impl_k_msgq_put+0xc4>
   36796:	bf00      	nop
   36798:	0004bb49 	.word	0x0004bb49
   3679c:	0004409e 	.word	0x0004409e
   367a0:	000440d8 	.word	0x000440d8
   367a4:	2001a500 	.word	0x2001a500

000367a8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   367a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   367ac:	4604      	mov	r4, r0
   367ae:	4688      	mov	r8, r1
   367b0:	4617      	mov	r7, r2
   367b2:	461d      	mov	r5, r3
   367b4:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   367b8:	b15b      	cbz	r3, 367d2 <z_impl_k_msgq_get+0x2a>
   367ba:	ea52 0305 	orrs.w	r3, r2, r5
   367be:	d008      	beq.n	367d2 <z_impl_k_msgq_get+0x2a>
   367c0:	4940      	ldr	r1, [pc, #256]	; (368c4 <z_impl_k_msgq_get+0x11c>)
   367c2:	4841      	ldr	r0, [pc, #260]	; (368c8 <z_impl_k_msgq_get+0x120>)
   367c4:	22d0      	movs	r2, #208	; 0xd0
   367c6:	f006 f961 	bl	3ca8c <assert_print>
   367ca:	21d0      	movs	r1, #208	; 0xd0
   367cc:	483d      	ldr	r0, [pc, #244]	; (368c4 <z_impl_k_msgq_get+0x11c>)
   367ce:	f006 f956 	bl	3ca7e <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   367d2:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   367d6:	f04f 0320 	mov.w	r3, #32
   367da:	f3ef 8911 	mrs	r9, BASEPRI
   367de:	f383 8812 	msr	BASEPRI_MAX, r3
   367e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   367e6:	4630      	mov	r0, r6
   367e8:	f7ff fefa 	bl	365e0 <z_spin_lock_valid>
   367ec:	b940      	cbnz	r0, 36800 <z_impl_k_msgq_get+0x58>
   367ee:	4937      	ldr	r1, [pc, #220]	; (368cc <z_impl_k_msgq_get+0x124>)
   367f0:	4835      	ldr	r0, [pc, #212]	; (368c8 <z_impl_k_msgq_get+0x120>)
   367f2:	228e      	movs	r2, #142	; 0x8e
   367f4:	f006 f94a 	bl	3ca8c <assert_print>
   367f8:	218e      	movs	r1, #142	; 0x8e
   367fa:	4834      	ldr	r0, [pc, #208]	; (368cc <z_impl_k_msgq_get+0x124>)
   367fc:	f006 f93f 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   36800:	4630      	mov	r0, r6
   36802:	f7ff ff0b 	bl	3661c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   36806:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36808:	2b00      	cmp	r3, #0
   3680a:	d036      	beq.n	3687a <z_impl_k_msgq_get+0xd2>
   3680c:	68e2      	ldr	r2, [r4, #12]
   3680e:	69e1      	ldr	r1, [r4, #28]
   36810:	4640      	mov	r0, r8
   36812:	f00a fdef 	bl	413f4 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   36816:	69e3      	ldr	r3, [r4, #28]
   36818:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3681a:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   3681c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   3681e:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   36820:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   36822:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   36824:	bf04      	itt	eq
   36826:	6963      	ldreq	r3, [r4, #20]
   36828:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   3682a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3682c:	3b01      	subs	r3, #1
   3682e:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   36830:	f001 fd96 	bl	38360 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   36834:	4605      	mov	r5, r0
   36836:	2800      	cmp	r0, #0
   36838:	d031      	beq.n	3689e <z_impl_k_msgq_get+0xf6>
   3683a:	6941      	ldr	r1, [r0, #20]
   3683c:	68e2      	ldr	r2, [r4, #12]
   3683e:	6a20      	ldr	r0, [r4, #32]
   36840:	f00a fdd8 	bl	413f4 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   36844:	6a23      	ldr	r3, [r4, #32]
   36846:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   36848:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   3684a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3684c:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3684e:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   36850:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   36852:	bf04      	itt	eq
   36854:	6963      	ldreq	r3, [r4, #20]
   36856:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   36858:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3685a:	3301      	adds	r3, #1
   3685c:	6263      	str	r3, [r4, #36]	; 0x24
   3685e:	2400      	movs	r4, #0
   36860:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
			z_ready_thread(pending_thread);
   36864:	f001 fa78 	bl	37d58 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   36868:	4649      	mov	r1, r9
   3686a:	4630      	mov	r0, r6
   3686c:	f001 f844 	bl	378f8 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   36870:	4625      	mov	r5, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   36872:	4628      	mov	r0, r5
   36874:	b003      	add	sp, #12
   36876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3687a:	ea57 0305 	orrs.w	r3, r7, r5
   3687e:	d00c      	beq.n	3689a <z_impl_k_msgq_get+0xf2>
		_current->base.swap_data = data;
   36880:	4b13      	ldr	r3, [pc, #76]	; (368d0 <z_impl_k_msgq_get+0x128>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36882:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   36884:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36886:	4649      	mov	r1, r9
		_current->base.swap_data = data;
   36888:	f8c3 8014 	str.w	r8, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3688c:	4630      	mov	r0, r6
   3688e:	e9cd 7500 	strd	r7, r5, [sp]
   36892:	f001 fc09 	bl	380a8 <z_pend_curr>
   36896:	4605      	mov	r5, r0
		return result;
   36898:	e7eb      	b.n	36872 <z_impl_k_msgq_get+0xca>
		result = -ENOMSG;
   3689a:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3689e:	4630      	mov	r0, r6
   368a0:	f7ff feac 	bl	365fc <z_spin_unlock_valid>
   368a4:	b940      	cbnz	r0, 368b8 <z_impl_k_msgq_get+0x110>
   368a6:	4909      	ldr	r1, [pc, #36]	; (368cc <z_impl_k_msgq_get+0x124>)
   368a8:	4807      	ldr	r0, [pc, #28]	; (368c8 <z_impl_k_msgq_get+0x120>)
   368aa:	22b9      	movs	r2, #185	; 0xb9
   368ac:	f006 f8ee 	bl	3ca8c <assert_print>
   368b0:	21b9      	movs	r1, #185	; 0xb9
   368b2:	4806      	ldr	r0, [pc, #24]	; (368cc <z_impl_k_msgq_get+0x124>)
   368b4:	f006 f8e3 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   368b8:	f389 8811 	msr	BASEPRI, r9
   368bc:	f3bf 8f6f 	isb	sy
	return result;
   368c0:	e7d7      	b.n	36872 <z_impl_k_msgq_get+0xca>
   368c2:	bf00      	nop
   368c4:	0004bb49 	.word	0x0004bb49
   368c8:	0004409e 	.word	0x0004409e
   368cc:	000440d8 	.word	0x000440d8
   368d0:	2001a500 	.word	0x2001a500

000368d4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   368d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   368d8:	4604      	mov	r4, r0
   368da:	4617      	mov	r7, r2
   368dc:	461e      	mov	r6, r3
   368de:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   368e2:	b143      	cbz	r3, 368f6 <z_impl_k_mutex_lock+0x22>
   368e4:	495f      	ldr	r1, [pc, #380]	; (36a64 <z_impl_k_mutex_lock+0x190>)
   368e6:	4860      	ldr	r0, [pc, #384]	; (36a68 <z_impl_k_mutex_lock+0x194>)
   368e8:	2265      	movs	r2, #101	; 0x65
   368ea:	f006 f8cf 	bl	3ca8c <assert_print>
   368ee:	2165      	movs	r1, #101	; 0x65
   368f0:	485c      	ldr	r0, [pc, #368]	; (36a64 <z_impl_k_mutex_lock+0x190>)
   368f2:	f006 f8c4 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   368f6:	f04f 0320 	mov.w	r3, #32
   368fa:	f3ef 8811 	mrs	r8, BASEPRI
   368fe:	f383 8812 	msr	BASEPRI_MAX, r3
   36902:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36906:	4859      	ldr	r0, [pc, #356]	; (36a6c <z_impl_k_mutex_lock+0x198>)
   36908:	f7ff fe6a 	bl	365e0 <z_spin_lock_valid>
   3690c:	b940      	cbnz	r0, 36920 <z_impl_k_mutex_lock+0x4c>
   3690e:	4958      	ldr	r1, [pc, #352]	; (36a70 <z_impl_k_mutex_lock+0x19c>)
   36910:	4855      	ldr	r0, [pc, #340]	; (36a68 <z_impl_k_mutex_lock+0x194>)
   36912:	228e      	movs	r2, #142	; 0x8e
   36914:	f006 f8ba 	bl	3ca8c <assert_print>
   36918:	218e      	movs	r1, #142	; 0x8e
   3691a:	4855      	ldr	r0, [pc, #340]	; (36a70 <z_impl_k_mutex_lock+0x19c>)
   3691c:	f006 f8af 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   36920:	4852      	ldr	r0, [pc, #328]	; (36a6c <z_impl_k_mutex_lock+0x198>)
   36922:	f7ff fe7b 	bl	3661c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   36926:	68e3      	ldr	r3, [r4, #12]
   36928:	4a52      	ldr	r2, [pc, #328]	; (36a74 <z_impl_k_mutex_lock+0x1a0>)
   3692a:	b1d3      	cbz	r3, 36962 <z_impl_k_mutex_lock+0x8e>
   3692c:	68a0      	ldr	r0, [r4, #8]
   3692e:	6891      	ldr	r1, [r2, #8]
   36930:	4288      	cmp	r0, r1
   36932:	d033      	beq.n	3699c <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   36934:	ea57 0306 	orrs.w	r3, r7, r6
   36938:	d132      	bne.n	369a0 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3693a:	484c      	ldr	r0, [pc, #304]	; (36a6c <z_impl_k_mutex_lock+0x198>)
   3693c:	f7ff fe5e 	bl	365fc <z_spin_unlock_valid>
   36940:	b940      	cbnz	r0, 36954 <z_impl_k_mutex_lock+0x80>
   36942:	494b      	ldr	r1, [pc, #300]	; (36a70 <z_impl_k_mutex_lock+0x19c>)
   36944:	4848      	ldr	r0, [pc, #288]	; (36a68 <z_impl_k_mutex_lock+0x194>)
   36946:	22b9      	movs	r2, #185	; 0xb9
   36948:	f006 f8a0 	bl	3ca8c <assert_print>
   3694c:	21b9      	movs	r1, #185	; 0xb9
   3694e:	4848      	ldr	r0, [pc, #288]	; (36a70 <z_impl_k_mutex_lock+0x19c>)
   36950:	f006 f895 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   36954:	f388 8811 	msr	BASEPRI, r8
   36958:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   3695c:	f06f 000f 	mvn.w	r0, #15
   36960:	e019      	b.n	36996 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   36962:	6891      	ldr	r1, [r2, #8]
   36964:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   36968:	3301      	adds	r3, #1
   3696a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   3696c:	6893      	ldr	r3, [r2, #8]
   3696e:	483f      	ldr	r0, [pc, #252]	; (36a6c <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   36970:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   36972:	60a3      	str	r3, [r4, #8]
   36974:	f7ff fe42 	bl	365fc <z_spin_unlock_valid>
   36978:	b940      	cbnz	r0, 3698c <z_impl_k_mutex_lock+0xb8>
   3697a:	493d      	ldr	r1, [pc, #244]	; (36a70 <z_impl_k_mutex_lock+0x19c>)
   3697c:	483a      	ldr	r0, [pc, #232]	; (36a68 <z_impl_k_mutex_lock+0x194>)
   3697e:	22b9      	movs	r2, #185	; 0xb9
   36980:	f006 f884 	bl	3ca8c <assert_print>
   36984:	21b9      	movs	r1, #185	; 0xb9
   36986:	483a      	ldr	r0, [pc, #232]	; (36a70 <z_impl_k_mutex_lock+0x19c>)
   36988:	f006 f879 	bl	3ca7e <assert_post_action>
   3698c:	f388 8811 	msr	BASEPRI, r8
   36990:	f3bf 8f6f 	isb	sy
		return 0;
   36994:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   36996:	b002      	add	sp, #8
   36998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   3699c:	6921      	ldr	r1, [r4, #16]
   3699e:	e7e3      	b.n	36968 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   369a0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   369a4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   369a8:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   369ac:	4299      	cmp	r1, r3
   369ae:	bfa8      	it	ge
   369b0:	4619      	movge	r1, r3
   369b2:	4291      	cmp	r1, r2
   369b4:	bfb8      	it	lt
   369b6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   369b8:	428b      	cmp	r3, r1
   369ba:	dd3e      	ble.n	36a3a <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   369bc:	f00a fae8 	bl	40f90 <adjust_owner_prio.isra.0>
   369c0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   369c2:	4622      	mov	r2, r4
   369c4:	4641      	mov	r1, r8
   369c6:	e9cd 7600 	strd	r7, r6, [sp]
   369ca:	4828      	ldr	r0, [pc, #160]	; (36a6c <z_impl_k_mutex_lock+0x198>)
   369cc:	f001 fb6c 	bl	380a8 <z_pend_curr>
	if (got_mutex == 0) {
   369d0:	2800      	cmp	r0, #0
   369d2:	d0e0      	beq.n	36996 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   369d4:	f04f 0320 	mov.w	r3, #32
   369d8:	f3ef 8611 	mrs	r6, BASEPRI
   369dc:	f383 8812 	msr	BASEPRI_MAX, r3
   369e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   369e4:	4821      	ldr	r0, [pc, #132]	; (36a6c <z_impl_k_mutex_lock+0x198>)
   369e6:	f7ff fdfb 	bl	365e0 <z_spin_lock_valid>
   369ea:	b940      	cbnz	r0, 369fe <z_impl_k_mutex_lock+0x12a>
   369ec:	4920      	ldr	r1, [pc, #128]	; (36a70 <z_impl_k_mutex_lock+0x19c>)
   369ee:	481e      	ldr	r0, [pc, #120]	; (36a68 <z_impl_k_mutex_lock+0x194>)
   369f0:	228e      	movs	r2, #142	; 0x8e
   369f2:	f006 f84b 	bl	3ca8c <assert_print>
   369f6:	218e      	movs	r1, #142	; 0x8e
   369f8:	481d      	ldr	r0, [pc, #116]	; (36a70 <z_impl_k_mutex_lock+0x19c>)
   369fa:	f006 f840 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   369fe:	481b      	ldr	r0, [pc, #108]	; (36a6c <z_impl_k_mutex_lock+0x198>)
   36a00:	f7ff fe0c 	bl	3661c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   36a04:	6823      	ldr	r3, [r4, #0]
   36a06:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   36a08:	429c      	cmp	r4, r3
   36a0a:	d00a      	beq.n	36a22 <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   36a0c:	b14b      	cbz	r3, 36a22 <z_impl_k_mutex_lock+0x14e>
   36a0e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   36a12:	4299      	cmp	r1, r3
   36a14:	bfa8      	it	ge
   36a16:	4619      	movge	r1, r3
   36a18:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   36a1c:	4299      	cmp	r1, r3
   36a1e:	bfb8      	it	lt
   36a20:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   36a22:	68a0      	ldr	r0, [r4, #8]
   36a24:	f00a fab4 	bl	40f90 <adjust_owner_prio.isra.0>
   36a28:	b900      	cbnz	r0, 36a2c <z_impl_k_mutex_lock+0x158>
	if (resched) {
   36a2a:	b145      	cbz	r5, 36a3e <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   36a2c:	4631      	mov	r1, r6
   36a2e:	480f      	ldr	r0, [pc, #60]	; (36a6c <z_impl_k_mutex_lock+0x198>)
   36a30:	f000 ff62 	bl	378f8 <z_reschedule>
	return -EAGAIN;
   36a34:	f06f 000a 	mvn.w	r0, #10
   36a38:	e7ad      	b.n	36996 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   36a3a:	2500      	movs	r5, #0
   36a3c:	e7c1      	b.n	369c2 <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36a3e:	480b      	ldr	r0, [pc, #44]	; (36a6c <z_impl_k_mutex_lock+0x198>)
   36a40:	f7ff fddc 	bl	365fc <z_spin_unlock_valid>
   36a44:	b940      	cbnz	r0, 36a58 <z_impl_k_mutex_lock+0x184>
   36a46:	490a      	ldr	r1, [pc, #40]	; (36a70 <z_impl_k_mutex_lock+0x19c>)
   36a48:	4807      	ldr	r0, [pc, #28]	; (36a68 <z_impl_k_mutex_lock+0x194>)
   36a4a:	22b9      	movs	r2, #185	; 0xb9
   36a4c:	f006 f81e 	bl	3ca8c <assert_print>
   36a50:	21b9      	movs	r1, #185	; 0xb9
   36a52:	4807      	ldr	r0, [pc, #28]	; (36a70 <z_impl_k_mutex_lock+0x19c>)
   36a54:	f006 f813 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   36a58:	f386 8811 	msr	BASEPRI, r6
   36a5c:	f3bf 8f6f 	isb	sy
   36a60:	e7e8      	b.n	36a34 <z_impl_k_mutex_lock+0x160>
   36a62:	bf00      	nop
   36a64:	0004bb6b 	.word	0x0004bb6b
   36a68:	0004409e 	.word	0x0004409e
   36a6c:	2001a52c 	.word	0x2001a52c
   36a70:	000440d8 	.word	0x000440d8
   36a74:	2001a500 	.word	0x2001a500

00036a78 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   36a78:	b538      	push	{r3, r4, r5, lr}
   36a7a:	4604      	mov	r4, r0
   36a7c:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   36a80:	b143      	cbz	r3, 36a94 <z_impl_k_mutex_unlock+0x1c>
   36a82:	4944      	ldr	r1, [pc, #272]	; (36b94 <z_impl_k_mutex_unlock+0x11c>)
   36a84:	4844      	ldr	r0, [pc, #272]	; (36b98 <z_impl_k_mutex_unlock+0x120>)
   36a86:	22c7      	movs	r2, #199	; 0xc7
   36a88:	f006 f800 	bl	3ca8c <assert_print>
   36a8c:	21c7      	movs	r1, #199	; 0xc7
   36a8e:	4841      	ldr	r0, [pc, #260]	; (36b94 <z_impl_k_mutex_unlock+0x11c>)
   36a90:	f005 fff5 	bl	3ca7e <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   36a94:	68a3      	ldr	r3, [r4, #8]
   36a96:	2b00      	cmp	r3, #0
   36a98:	d075      	beq.n	36b86 <z_impl_k_mutex_unlock+0x10e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   36a9a:	4d40      	ldr	r5, [pc, #256]	; (36b9c <z_impl_k_mutex_unlock+0x124>)
   36a9c:	68aa      	ldr	r2, [r5, #8]
   36a9e:	4293      	cmp	r3, r2
   36aa0:	d174      	bne.n	36b8c <z_impl_k_mutex_unlock+0x114>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   36aa2:	68e3      	ldr	r3, [r4, #12]
   36aa4:	b943      	cbnz	r3, 36ab8 <z_impl_k_mutex_unlock+0x40>
   36aa6:	493b      	ldr	r1, [pc, #236]	; (36b94 <z_impl_k_mutex_unlock+0x11c>)
   36aa8:	483b      	ldr	r0, [pc, #236]	; (36b98 <z_impl_k_mutex_unlock+0x120>)
   36aaa:	22df      	movs	r2, #223	; 0xdf
   36aac:	f005 ffee 	bl	3ca8c <assert_print>
   36ab0:	21df      	movs	r1, #223	; 0xdf
   36ab2:	4838      	ldr	r0, [pc, #224]	; (36b94 <z_impl_k_mutex_unlock+0x11c>)
   36ab4:	f005 ffe3 	bl	3ca7e <assert_post_action>
   36ab8:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   36abc:	b143      	cbz	r3, 36ad0 <z_impl_k_mutex_unlock+0x58>
   36abe:	4938      	ldr	r1, [pc, #224]	; (36ba0 <z_impl_k_mutex_unlock+0x128>)
   36ac0:	4835      	ldr	r0, [pc, #212]	; (36b98 <z_impl_k_mutex_unlock+0x120>)
   36ac2:	22fd      	movs	r2, #253	; 0xfd
   36ac4:	f005 ffe2 	bl	3ca8c <assert_print>
   36ac8:	21fd      	movs	r1, #253	; 0xfd
   36aca:	4835      	ldr	r0, [pc, #212]	; (36ba0 <z_impl_k_mutex_unlock+0x128>)
   36acc:	f005 ffd7 	bl	3ca7e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   36ad0:	68ab      	ldr	r3, [r5, #8]
   36ad2:	7bdb      	ldrb	r3, [r3, #15]
   36ad4:	2b01      	cmp	r3, #1
   36ad6:	d108      	bne.n	36aea <z_impl_k_mutex_unlock+0x72>
   36ad8:	4931      	ldr	r1, [pc, #196]	; (36ba0 <z_impl_k_mutex_unlock+0x128>)
   36ada:	482f      	ldr	r0, [pc, #188]	; (36b98 <z_impl_k_mutex_unlock+0x120>)
   36adc:	22fe      	movs	r2, #254	; 0xfe
   36ade:	f005 ffd5 	bl	3ca8c <assert_print>
   36ae2:	21fe      	movs	r1, #254	; 0xfe
   36ae4:	482e      	ldr	r0, [pc, #184]	; (36ba0 <z_impl_k_mutex_unlock+0x128>)
   36ae6:	f005 ffca 	bl	3ca7e <assert_post_action>

	--_current->base.sched_locked;
   36aea:	68aa      	ldr	r2, [r5, #8]
   36aec:	7bd3      	ldrb	r3, [r2, #15]
   36aee:	3b01      	subs	r3, #1
   36af0:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   36af2:	68e3      	ldr	r3, [r4, #12]
   36af4:	2b01      	cmp	r3, #1
   36af6:	d905      	bls.n	36b04 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   36af8:	3b01      	subs	r3, #1
   36afa:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   36afc:	f001 fbd4 	bl	382a8 <k_sched_unlock>

	return 0;
   36b00:	2000      	movs	r0, #0
}
   36b02:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   36b04:	f04f 0320 	mov.w	r3, #32
   36b08:	f3ef 8511 	mrs	r5, BASEPRI
   36b0c:	f383 8812 	msr	BASEPRI_MAX, r3
   36b10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36b14:	4823      	ldr	r0, [pc, #140]	; (36ba4 <z_impl_k_mutex_unlock+0x12c>)
   36b16:	f7ff fd63 	bl	365e0 <z_spin_lock_valid>
   36b1a:	b940      	cbnz	r0, 36b2e <z_impl_k_mutex_unlock+0xb6>
   36b1c:	4922      	ldr	r1, [pc, #136]	; (36ba8 <z_impl_k_mutex_unlock+0x130>)
   36b1e:	481e      	ldr	r0, [pc, #120]	; (36b98 <z_impl_k_mutex_unlock+0x120>)
   36b20:	228e      	movs	r2, #142	; 0x8e
   36b22:	f005 ffb3 	bl	3ca8c <assert_print>
   36b26:	218e      	movs	r1, #142	; 0x8e
   36b28:	481f      	ldr	r0, [pc, #124]	; (36ba8 <z_impl_k_mutex_unlock+0x130>)
   36b2a:	f005 ffa8 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   36b2e:	481d      	ldr	r0, [pc, #116]	; (36ba4 <z_impl_k_mutex_unlock+0x12c>)
   36b30:	f7ff fd74 	bl	3661c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   36b34:	6921      	ldr	r1, [r4, #16]
   36b36:	68a0      	ldr	r0, [r4, #8]
   36b38:	f00a fa2a 	bl	40f90 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   36b3c:	4620      	mov	r0, r4
   36b3e:	f001 fc0f 	bl	38360 <z_unpend_first_thread>
	mutex->owner = new_owner;
   36b42:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   36b44:	b160      	cbz	r0, 36b60 <z_impl_k_mutex_unlock+0xe8>
		mutex->owner_orig_prio = new_owner->base.prio;
   36b46:	f990 200e 	ldrsb.w	r2, [r0, #14]
   36b4a:	6122      	str	r2, [r4, #16]
   36b4c:	2200      	movs	r2, #0
   36b4e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   36b52:	f001 f901 	bl	37d58 <z_ready_thread>
		z_reschedule(&lock, key);
   36b56:	4629      	mov	r1, r5
   36b58:	4812      	ldr	r0, [pc, #72]	; (36ba4 <z_impl_k_mutex_unlock+0x12c>)
   36b5a:	f000 fecd 	bl	378f8 <z_reschedule>
   36b5e:	e7cd      	b.n	36afc <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   36b60:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36b62:	4810      	ldr	r0, [pc, #64]	; (36ba4 <z_impl_k_mutex_unlock+0x12c>)
   36b64:	f7ff fd4a 	bl	365fc <z_spin_unlock_valid>
   36b68:	b940      	cbnz	r0, 36b7c <z_impl_k_mutex_unlock+0x104>
   36b6a:	490f      	ldr	r1, [pc, #60]	; (36ba8 <z_impl_k_mutex_unlock+0x130>)
   36b6c:	480a      	ldr	r0, [pc, #40]	; (36b98 <z_impl_k_mutex_unlock+0x120>)
   36b6e:	22b9      	movs	r2, #185	; 0xb9
   36b70:	f005 ff8c 	bl	3ca8c <assert_print>
   36b74:	21b9      	movs	r1, #185	; 0xb9
   36b76:	480c      	ldr	r0, [pc, #48]	; (36ba8 <z_impl_k_mutex_unlock+0x130>)
   36b78:	f005 ff81 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   36b7c:	f385 8811 	msr	BASEPRI, r5
   36b80:	f3bf 8f6f 	isb	sy
   36b84:	e7ba      	b.n	36afc <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   36b86:	f06f 0015 	mvn.w	r0, #21
   36b8a:	e7ba      	b.n	36b02 <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   36b8c:	f04f 30ff 	mov.w	r0, #4294967295
   36b90:	e7b7      	b.n	36b02 <z_impl_k_mutex_unlock+0x8a>
   36b92:	bf00      	nop
   36b94:	0004bb6b 	.word	0x0004bb6b
   36b98:	0004409e 	.word	0x0004409e
   36b9c:	2001a500 	.word	0x2001a500
   36ba0:	0004bb8d 	.word	0x0004bb8d
   36ba4:	2001a52c 	.word	0x2001a52c
   36ba8:	000440d8 	.word	0x000440d8

00036bac <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   36bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36bb0:	4604      	mov	r4, r0
   36bb2:	460d      	mov	r5, r1
   36bb4:	4690      	mov	r8, r2
   36bb6:	4699      	mov	r9, r3
   36bb8:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   36bbc:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   36bc0:	f04f 0320 	mov.w	r3, #32
   36bc4:	f3ef 8711 	mrs	r7, BASEPRI
   36bc8:	f383 8812 	msr	BASEPRI_MAX, r3
   36bcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36bd0:	4630      	mov	r0, r6
   36bd2:	f7ff fd05 	bl	365e0 <z_spin_lock_valid>
   36bd6:	b940      	cbnz	r0, 36bea <queue_insert+0x3e>
   36bd8:	4937      	ldr	r1, [pc, #220]	; (36cb8 <queue_insert+0x10c>)
   36bda:	4838      	ldr	r0, [pc, #224]	; (36cbc <queue_insert+0x110>)
   36bdc:	228e      	movs	r2, #142	; 0x8e
   36bde:	f005 ff55 	bl	3ca8c <assert_print>
   36be2:	218e      	movs	r1, #142	; 0x8e
   36be4:	4834      	ldr	r0, [pc, #208]	; (36cb8 <queue_insert+0x10c>)
   36be6:	f005 ff4a 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   36bea:	4630      	mov	r0, r6
   36bec:	f7ff fd16 	bl	3661c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   36bf0:	f1ba 0f00 	cmp.w	sl, #0
   36bf4:	d000      	beq.n	36bf8 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   36bf6:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   36bf8:	f104 000c 	add.w	r0, r4, #12
   36bfc:	f001 fbb0 	bl	38360 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   36c00:	b160      	cbz	r0, 36c1c <queue_insert+0x70>
   36c02:	2400      	movs	r4, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   36c04:	f8c0 8014 	str.w	r8, [r0, #20]
   36c08:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   36c0c:	f001 f8a4 	bl	37d58 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   36c10:	4630      	mov	r0, r6
   36c12:	4639      	mov	r1, r7
   36c14:	f000 fe70 	bl	378f8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   36c18:	2000      	movs	r0, #0
   36c1a:	e019      	b.n	36c50 <queue_insert+0xa4>
	if (alloc) {
   36c1c:	f1b9 0f00 	cmp.w	r9, #0
   36c20:	d028      	beq.n	36c74 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   36c22:	2108      	movs	r1, #8
   36c24:	f002 fe52 	bl	398cc <z_thread_aligned_alloc>
		if (anode == NULL) {
   36c28:	b9a0      	cbnz	r0, 36c54 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36c2a:	4630      	mov	r0, r6
   36c2c:	f7ff fce6 	bl	365fc <z_spin_unlock_valid>
   36c30:	b940      	cbnz	r0, 36c44 <queue_insert+0x98>
   36c32:	4921      	ldr	r1, [pc, #132]	; (36cb8 <queue_insert+0x10c>)
   36c34:	4821      	ldr	r0, [pc, #132]	; (36cbc <queue_insert+0x110>)
   36c36:	22b9      	movs	r2, #185	; 0xb9
   36c38:	f005 ff28 	bl	3ca8c <assert_print>
   36c3c:	21b9      	movs	r1, #185	; 0xb9
   36c3e:	481e      	ldr	r0, [pc, #120]	; (36cb8 <queue_insert+0x10c>)
   36c40:	f005 ff1d 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   36c44:	f387 8811 	msr	BASEPRI, r7
   36c48:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   36c4c:	f06f 000b 	mvn.w	r0, #11
}
   36c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   36c54:	2301      	movs	r3, #1
		anode->data = data;
   36c56:	f8c0 8004 	str.w	r8, [r0, #4]
   36c5a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36c5c:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   36c5e:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   36c62:	b95d      	cbnz	r5, 36c7c <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   36c64:	6823      	ldr	r3, [r4, #0]
   36c66:	4313      	orrs	r3, r2
   36c68:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   36c6a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   36c6c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   36c6e:	b973      	cbnz	r3, 36c8e <queue_insert+0xe2>
	list->tail = node;
   36c70:	6060      	str	r0, [r4, #4]
}
   36c72:	e00c      	b.n	36c8e <queue_insert+0xe2>
}
   36c74:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   36c76:	f8c8 9000 	str.w	r9, [r8]
}
   36c7a:	e7ef      	b.n	36c5c <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   36c7c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   36c7e:	f033 0303 	bics.w	r3, r3, #3
   36c82:	d110      	bne.n	36ca6 <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   36c84:	6002      	str	r2, [r0, #0]
	return list->tail;
   36c86:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   36c88:	b93a      	cbnz	r2, 36c9a <queue_insert+0xee>
	list->head = node;
   36c8a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   36c8e:	2104      	movs	r1, #4
   36c90:	f104 0014 	add.w	r0, r4, #20
   36c94:	f00a fafd 	bl	41292 <z_handle_obj_poll_events>
   36c98:	e7ba      	b.n	36c10 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36c9a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   36c9c:	f003 0303 	and.w	r3, r3, #3
   36ca0:	4303      	orrs	r3, r0
   36ca2:	6013      	str	r3, [r2, #0]
   36ca4:	e7e4      	b.n	36c70 <queue_insert+0xc4>
   36ca6:	4313      	orrs	r3, r2
   36ca8:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36caa:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   36cac:	f003 0303 	and.w	r3, r3, #3
   36cb0:	4303      	orrs	r3, r0
   36cb2:	602b      	str	r3, [r5, #0]
}
   36cb4:	e7eb      	b.n	36c8e <queue_insert+0xe2>
   36cb6:	bf00      	nop
   36cb8:	000440d8 	.word	0x000440d8
   36cbc:	0004409e 	.word	0x0004409e

00036cc0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   36cc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   36cc4:	4605      	mov	r5, r0
   36cc6:	4690      	mov	r8, r2
   36cc8:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   36cca:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   36cce:	f04f 0320 	mov.w	r3, #32
   36cd2:	f3ef 8911 	mrs	r9, BASEPRI
   36cd6:	f383 8812 	msr	BASEPRI_MAX, r3
   36cda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36cde:	4630      	mov	r0, r6
   36ce0:	f7ff fc7e 	bl	365e0 <z_spin_lock_valid>
   36ce4:	b940      	cbnz	r0, 36cf8 <z_impl_k_queue_get+0x38>
   36ce6:	4921      	ldr	r1, [pc, #132]	; (36d6c <z_impl_k_queue_get+0xac>)
   36ce8:	4821      	ldr	r0, [pc, #132]	; (36d70 <z_impl_k_queue_get+0xb0>)
   36cea:	228e      	movs	r2, #142	; 0x8e
   36cec:	f005 fece 	bl	3ca8c <assert_print>
   36cf0:	218e      	movs	r1, #142	; 0x8e
   36cf2:	481e      	ldr	r0, [pc, #120]	; (36d6c <z_impl_k_queue_get+0xac>)
   36cf4:	f005 fec3 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   36cf8:	4630      	mov	r0, r6
   36cfa:	f7ff fc8f 	bl	3661c <z_spin_lock_set_owner>
	return list->head;
   36cfe:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   36d00:	b314      	cbz	r4, 36d48 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   36d02:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   36d04:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   36d06:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   36d0a:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   36d0c:	4620      	mov	r0, r4
   36d0e:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   36d12:	602b      	str	r3, [r5, #0]
	list->tail = node;
   36d14:	bf08      	it	eq
   36d16:	606b      	streq	r3, [r5, #4]
   36d18:	f00a f949 	bl	40fae <z_queue_node_peek>
   36d1c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36d1e:	4630      	mov	r0, r6
   36d20:	f7ff fc6c 	bl	365fc <z_spin_unlock_valid>
   36d24:	b940      	cbnz	r0, 36d38 <z_impl_k_queue_get+0x78>
   36d26:	4911      	ldr	r1, [pc, #68]	; (36d6c <z_impl_k_queue_get+0xac>)
   36d28:	4811      	ldr	r0, [pc, #68]	; (36d70 <z_impl_k_queue_get+0xb0>)
   36d2a:	22b9      	movs	r2, #185	; 0xb9
   36d2c:	f005 feae 	bl	3ca8c <assert_print>
   36d30:	21b9      	movs	r1, #185	; 0xb9
   36d32:	480e      	ldr	r0, [pc, #56]	; (36d6c <z_impl_k_queue_get+0xac>)
   36d34:	f005 fea3 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   36d38:	f389 8811 	msr	BASEPRI, r9
   36d3c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   36d40:	4620      	mov	r0, r4
   36d42:	b003      	add	sp, #12
   36d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36d48:	ea58 0307 	orrs.w	r3, r8, r7
   36d4c:	d0e7      	beq.n	36d1e <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   36d4e:	4649      	mov	r1, r9
   36d50:	4630      	mov	r0, r6
   36d52:	e9cd 8700 	strd	r8, r7, [sp]
   36d56:	f105 020c 	add.w	r2, r5, #12
   36d5a:	f001 f9a5 	bl	380a8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   36d5e:	2800      	cmp	r0, #0
   36d60:	d1ee      	bne.n	36d40 <z_impl_k_queue_get+0x80>
   36d62:	4b04      	ldr	r3, [pc, #16]	; (36d74 <z_impl_k_queue_get+0xb4>)
   36d64:	689b      	ldr	r3, [r3, #8]
   36d66:	695c      	ldr	r4, [r3, #20]
   36d68:	e7ea      	b.n	36d40 <z_impl_k_queue_get+0x80>
   36d6a:	bf00      	nop
   36d6c:	000440d8 	.word	0x000440d8
   36d70:	0004409e 	.word	0x0004409e
   36d74:	2001a500 	.word	0x2001a500

00036d78 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   36d78:	b538      	push	{r3, r4, r5, lr}
   36d7a:	4604      	mov	r4, r0
	__asm__ volatile(
   36d7c:	f04f 0320 	mov.w	r3, #32
   36d80:	f3ef 8511 	mrs	r5, BASEPRI
   36d84:	f383 8812 	msr	BASEPRI_MAX, r3
   36d88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36d8c:	4815      	ldr	r0, [pc, #84]	; (36de4 <z_impl_k_sem_give+0x6c>)
   36d8e:	f7ff fc27 	bl	365e0 <z_spin_lock_valid>
   36d92:	b940      	cbnz	r0, 36da6 <z_impl_k_sem_give+0x2e>
   36d94:	4914      	ldr	r1, [pc, #80]	; (36de8 <z_impl_k_sem_give+0x70>)
   36d96:	4815      	ldr	r0, [pc, #84]	; (36dec <z_impl_k_sem_give+0x74>)
   36d98:	228e      	movs	r2, #142	; 0x8e
   36d9a:	f005 fe77 	bl	3ca8c <assert_print>
   36d9e:	218e      	movs	r1, #142	; 0x8e
   36da0:	4811      	ldr	r0, [pc, #68]	; (36de8 <z_impl_k_sem_give+0x70>)
   36da2:	f005 fe6c 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   36da6:	480f      	ldr	r0, [pc, #60]	; (36de4 <z_impl_k_sem_give+0x6c>)
   36da8:	f7ff fc38 	bl	3661c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   36dac:	4620      	mov	r0, r4
   36dae:	f001 fad7 	bl	38360 <z_unpend_first_thread>

	if (thread != NULL) {
   36db2:	b150      	cbz	r0, 36dca <z_impl_k_sem_give+0x52>
   36db4:	2200      	movs	r2, #0
   36db6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   36dba:	f000 ffcd 	bl	37d58 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   36dbe:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   36dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   36dc4:	4807      	ldr	r0, [pc, #28]	; (36de4 <z_impl_k_sem_give+0x6c>)
   36dc6:	f000 bd97 	b.w	378f8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   36dca:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   36dce:	429a      	cmp	r2, r3
   36dd0:	bf18      	it	ne
   36dd2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   36dd4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   36dd6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   36dd8:	f104 0010 	add.w	r0, r4, #16
   36ddc:	f00a fa59 	bl	41292 <z_handle_obj_poll_events>
}
   36de0:	e7ed      	b.n	36dbe <z_impl_k_sem_give+0x46>
   36de2:	bf00      	nop
   36de4:	2001a530 	.word	0x2001a530
   36de8:	000440d8 	.word	0x000440d8
   36dec:	0004409e 	.word	0x0004409e

00036df0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   36df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36df2:	4604      	mov	r4, r0
   36df4:	4616      	mov	r6, r2
   36df6:	461d      	mov	r5, r3
   36df8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   36dfc:	b15b      	cbz	r3, 36e16 <z_impl_k_sem_take+0x26>
   36dfe:	ea52 0305 	orrs.w	r3, r2, r5
   36e02:	d008      	beq.n	36e16 <z_impl_k_sem_take+0x26>
   36e04:	492b      	ldr	r1, [pc, #172]	; (36eb4 <z_impl_k_sem_take+0xc4>)
   36e06:	482c      	ldr	r0, [pc, #176]	; (36eb8 <z_impl_k_sem_take+0xc8>)
   36e08:	2279      	movs	r2, #121	; 0x79
   36e0a:	f005 fe3f 	bl	3ca8c <assert_print>
   36e0e:	2179      	movs	r1, #121	; 0x79
   36e10:	4828      	ldr	r0, [pc, #160]	; (36eb4 <z_impl_k_sem_take+0xc4>)
   36e12:	f005 fe34 	bl	3ca7e <assert_post_action>
   36e16:	f04f 0320 	mov.w	r3, #32
   36e1a:	f3ef 8711 	mrs	r7, BASEPRI
   36e1e:	f383 8812 	msr	BASEPRI_MAX, r3
   36e22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36e26:	4825      	ldr	r0, [pc, #148]	; (36ebc <z_impl_k_sem_take+0xcc>)
   36e28:	f7ff fbda 	bl	365e0 <z_spin_lock_valid>
   36e2c:	b940      	cbnz	r0, 36e40 <z_impl_k_sem_take+0x50>
   36e2e:	4924      	ldr	r1, [pc, #144]	; (36ec0 <z_impl_k_sem_take+0xd0>)
   36e30:	4821      	ldr	r0, [pc, #132]	; (36eb8 <z_impl_k_sem_take+0xc8>)
   36e32:	228e      	movs	r2, #142	; 0x8e
   36e34:	f005 fe2a 	bl	3ca8c <assert_print>
   36e38:	218e      	movs	r1, #142	; 0x8e
   36e3a:	4821      	ldr	r0, [pc, #132]	; (36ec0 <z_impl_k_sem_take+0xd0>)
   36e3c:	f005 fe1f 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   36e40:	481e      	ldr	r0, [pc, #120]	; (36ebc <z_impl_k_sem_take+0xcc>)
   36e42:	f7ff fbeb 	bl	3661c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   36e46:	68a3      	ldr	r3, [r4, #8]
   36e48:	b1ab      	cbz	r3, 36e76 <z_impl_k_sem_take+0x86>
		sem->count--;
   36e4a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36e4c:	481b      	ldr	r0, [pc, #108]	; (36ebc <z_impl_k_sem_take+0xcc>)
   36e4e:	60a3      	str	r3, [r4, #8]
   36e50:	f7ff fbd4 	bl	365fc <z_spin_unlock_valid>
   36e54:	b940      	cbnz	r0, 36e68 <z_impl_k_sem_take+0x78>
   36e56:	491a      	ldr	r1, [pc, #104]	; (36ec0 <z_impl_k_sem_take+0xd0>)
   36e58:	4817      	ldr	r0, [pc, #92]	; (36eb8 <z_impl_k_sem_take+0xc8>)
   36e5a:	22b9      	movs	r2, #185	; 0xb9
   36e5c:	f005 fe16 	bl	3ca8c <assert_print>
   36e60:	21b9      	movs	r1, #185	; 0xb9
   36e62:	4817      	ldr	r0, [pc, #92]	; (36ec0 <z_impl_k_sem_take+0xd0>)
   36e64:	f005 fe0b 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   36e68:	f387 8811 	msr	BASEPRI, r7
   36e6c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   36e70:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   36e72:	b003      	add	sp, #12
   36e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36e76:	ea56 0305 	orrs.w	r3, r6, r5
   36e7a:	d113      	bne.n	36ea4 <z_impl_k_sem_take+0xb4>
   36e7c:	480f      	ldr	r0, [pc, #60]	; (36ebc <z_impl_k_sem_take+0xcc>)
   36e7e:	f7ff fbbd 	bl	365fc <z_spin_unlock_valid>
   36e82:	b940      	cbnz	r0, 36e96 <z_impl_k_sem_take+0xa6>
   36e84:	490e      	ldr	r1, [pc, #56]	; (36ec0 <z_impl_k_sem_take+0xd0>)
   36e86:	480c      	ldr	r0, [pc, #48]	; (36eb8 <z_impl_k_sem_take+0xc8>)
   36e88:	22b9      	movs	r2, #185	; 0xb9
   36e8a:	f005 fdff 	bl	3ca8c <assert_print>
   36e8e:	21b9      	movs	r1, #185	; 0xb9
   36e90:	480b      	ldr	r0, [pc, #44]	; (36ec0 <z_impl_k_sem_take+0xd0>)
   36e92:	f005 fdf4 	bl	3ca7e <assert_post_action>
   36e96:	f387 8811 	msr	BASEPRI, r7
   36e9a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   36e9e:	f06f 000f 	mvn.w	r0, #15
   36ea2:	e7e6      	b.n	36e72 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   36ea4:	4622      	mov	r2, r4
   36ea6:	4639      	mov	r1, r7
   36ea8:	e9cd 6500 	strd	r6, r5, [sp]
   36eac:	4803      	ldr	r0, [pc, #12]	; (36ebc <z_impl_k_sem_take+0xcc>)
   36eae:	f001 f8fb 	bl	380a8 <z_pend_curr>
	return ret;
   36eb2:	e7de      	b.n	36e72 <z_impl_k_sem_take+0x82>
   36eb4:	0004bbb8 	.word	0x0004bbb8
   36eb8:	0004409e 	.word	0x0004409e
   36ebc:	2001a530 	.word	0x2001a530
   36ec0:	000440d8 	.word	0x000440d8

00036ec4 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   36ec4:	b570      	push	{r4, r5, r6, lr}
   36ec6:	4604      	mov	r4, r0
	__asm__ volatile(
   36ec8:	f04f 0320 	mov.w	r3, #32
   36ecc:	f3ef 8511 	mrs	r5, BASEPRI
   36ed0:	f383 8812 	msr	BASEPRI_MAX, r3
   36ed4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36ed8:	4813      	ldr	r0, [pc, #76]	; (36f28 <z_impl_k_sem_reset+0x64>)
   36eda:	f7ff fb81 	bl	365e0 <z_spin_lock_valid>
   36ede:	b940      	cbnz	r0, 36ef2 <z_impl_k_sem_reset+0x2e>
   36ee0:	4912      	ldr	r1, [pc, #72]	; (36f2c <z_impl_k_sem_reset+0x68>)
   36ee2:	4813      	ldr	r0, [pc, #76]	; (36f30 <z_impl_k_sem_reset+0x6c>)
   36ee4:	228e      	movs	r2, #142	; 0x8e
   36ee6:	f005 fdd1 	bl	3ca8c <assert_print>
   36eea:	218e      	movs	r1, #142	; 0x8e
   36eec:	480f      	ldr	r0, [pc, #60]	; (36f2c <z_impl_k_sem_reset+0x68>)
   36eee:	f005 fdc6 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   36ef2:	480d      	ldr	r0, [pc, #52]	; (36f28 <z_impl_k_sem_reset+0x64>)
   36ef4:	f7ff fb92 	bl	3661c <z_spin_lock_set_owner>
   36ef8:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   36efc:	4620      	mov	r0, r4
   36efe:	f001 fa2f 	bl	38360 <z_unpend_first_thread>
		if (thread == NULL) {
   36f02:	b120      	cbz	r0, 36f0e <z_impl_k_sem_reset+0x4a>
   36f04:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   36f08:	f000 ff26 	bl	37d58 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   36f0c:	e7f6      	b.n	36efc <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   36f0e:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   36f10:	2102      	movs	r1, #2
   36f12:	f104 0010 	add.w	r0, r4, #16
   36f16:	f00a f9bc 	bl	41292 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   36f1a:	4629      	mov	r1, r5
}
   36f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   36f20:	4801      	ldr	r0, [pc, #4]	; (36f28 <z_impl_k_sem_reset+0x64>)
   36f22:	f000 bce9 	b.w	378f8 <z_reschedule>
   36f26:	bf00      	nop
   36f28:	2001a530 	.word	0x2001a530
   36f2c:	000440d8 	.word	0x000440d8
   36f30:	0004409e 	.word	0x0004409e

00036f34 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   36f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36f38:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36f3a:	4e70      	ldr	r6, [pc, #448]	; (370fc <work_queue_main+0x1c8>)
	return list->head;
   36f3c:	4f70      	ldr	r7, [pc, #448]	; (37100 <work_queue_main+0x1cc>)
   36f3e:	b085      	sub	sp, #20
   36f40:	f04f 0320 	mov.w	r3, #32
   36f44:	f3ef 8811 	mrs	r8, BASEPRI
   36f48:	f383 8812 	msr	BASEPRI_MAX, r3
   36f4c:	f3bf 8f6f 	isb	sy
   36f50:	4630      	mov	r0, r6
   36f52:	f7ff fb45 	bl	365e0 <z_spin_lock_valid>
   36f56:	b940      	cbnz	r0, 36f6a <work_queue_main+0x36>
   36f58:	496a      	ldr	r1, [pc, #424]	; (37104 <work_queue_main+0x1d0>)
   36f5a:	486b      	ldr	r0, [pc, #428]	; (37108 <work_queue_main+0x1d4>)
   36f5c:	228e      	movs	r2, #142	; 0x8e
   36f5e:	f005 fd95 	bl	3ca8c <assert_print>
   36f62:	218e      	movs	r1, #142	; 0x8e
   36f64:	4867      	ldr	r0, [pc, #412]	; (37104 <work_queue_main+0x1d0>)
   36f66:	f005 fd8a 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   36f6a:	4630      	mov	r0, r6
   36f6c:	f7ff fb56 	bl	3661c <z_spin_lock_set_owner>
   36f70:	f8d4 50d0 	ldr.w	r5, [r4, #208]	; 0xd0
Z_GENLIST_GET(slist, snode)
   36f74:	b9b5      	cbnz	r5, 36fa4 <work_queue_main+0x70>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   36f76:	2102      	movs	r1, #2
   36f78:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   36f7c:	f00a f83e 	bl	40ffc <flag_test_and_clear>
   36f80:	2800      	cmp	r0, #0
   36f82:	f040 8084 	bne.w	3708e <work_queue_main+0x15a>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   36f86:	2300      	movs	r3, #0
   36f88:	f04f 32ff 	mov.w	r2, #4294967295
   36f8c:	9302      	str	r3, [sp, #8]
   36f8e:	f04f 33ff 	mov.w	r3, #4294967295
   36f92:	4641      	mov	r1, r8
   36f94:	e9cd 2300 	strd	r2, r3, [sp]
   36f98:	4630      	mov	r0, r6
   36f9a:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
   36f9e:	f001 fc49 	bl	38834 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   36fa2:	e7cd      	b.n	36f40 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   36fa4:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
	return node->next;
   36fa8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   36faa:	4295      	cmp	r5, r2
	list->head = node;
   36fac:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   36fb0:	d101      	bne.n	36fb6 <work_queue_main+0x82>
	list->tail = node;
   36fb2:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	*flagp |= BIT(bit);
   36fb6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36fba:	4630      	mov	r0, r6
   36fbc:	f043 0302 	orr.w	r3, r3, #2
   36fc0:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	*flagp &= ~BIT(bit);
   36fc4:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   36fc6:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   36fca:	f023 0304 	bic.w	r3, r3, #4
   36fce:	f043 0301 	orr.w	r3, r3, #1
   36fd2:	60eb      	str	r3, [r5, #12]
   36fd4:	f7ff fb12 	bl	365fc <z_spin_unlock_valid>
   36fd8:	b940      	cbnz	r0, 36fec <work_queue_main+0xb8>
   36fda:	494a      	ldr	r1, [pc, #296]	; (37104 <work_queue_main+0x1d0>)
   36fdc:	484a      	ldr	r0, [pc, #296]	; (37108 <work_queue_main+0x1d4>)
   36fde:	22b9      	movs	r2, #185	; 0xb9
   36fe0:	f005 fd54 	bl	3ca8c <assert_print>
   36fe4:	21b9      	movs	r1, #185	; 0xb9
   36fe6:	4847      	ldr	r0, [pc, #284]	; (37104 <work_queue_main+0x1d0>)
   36fe8:	f005 fd49 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   36fec:	f388 8811 	msr	BASEPRI, r8
   36ff0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   36ff4:	f1b9 0f00 	cmp.w	r9, #0
   36ff8:	d10a      	bne.n	37010 <work_queue_main+0xdc>
   36ffa:	4944      	ldr	r1, [pc, #272]	; (3710c <work_queue_main+0x1d8>)
   36ffc:	4842      	ldr	r0, [pc, #264]	; (37108 <work_queue_main+0x1d4>)
   36ffe:	f44f 7222 	mov.w	r2, #648	; 0x288
   37002:	f005 fd43 	bl	3ca8c <assert_print>
   37006:	f44f 7122 	mov.w	r1, #648	; 0x288
   3700a:	4840      	ldr	r0, [pc, #256]	; (3710c <work_queue_main+0x1d8>)
   3700c:	f005 fd37 	bl	3ca7e <assert_post_action>
		handler(work);
   37010:	4628      	mov	r0, r5
   37012:	47c8      	blx	r9
	__asm__ volatile(
   37014:	f04f 0320 	mov.w	r3, #32
   37018:	f3ef 8a11 	mrs	sl, BASEPRI
   3701c:	f383 8812 	msr	BASEPRI_MAX, r3
   37020:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37024:	4630      	mov	r0, r6
   37026:	f7ff fadb 	bl	365e0 <z_spin_lock_valid>
   3702a:	b940      	cbnz	r0, 3703e <work_queue_main+0x10a>
   3702c:	4935      	ldr	r1, [pc, #212]	; (37104 <work_queue_main+0x1d0>)
   3702e:	4836      	ldr	r0, [pc, #216]	; (37108 <work_queue_main+0x1d4>)
   37030:	228e      	movs	r2, #142	; 0x8e
   37032:	f005 fd2b 	bl	3ca8c <assert_print>
   37036:	218e      	movs	r1, #142	; 0x8e
   37038:	4832      	ldr	r0, [pc, #200]	; (37104 <work_queue_main+0x1d0>)
   3703a:	f005 fd20 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   3703e:	4630      	mov	r0, r6
   37040:	f7ff faec 	bl	3661c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   37044:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   37046:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   37048:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3704c:	d429      	bmi.n	370a2 <work_queue_main+0x16e>
	*flagp &= ~BIT(bit);
   3704e:	60ea      	str	r2, [r5, #12]
   37050:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37054:	4630      	mov	r0, r6
   37056:	f023 0302 	bic.w	r3, r3, #2
   3705a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	return (*flagp & BIT(bit)) != 0U;
   3705e:	f3c3 2500 	ubfx	r5, r3, #8, #1
   37062:	f7ff facb 	bl	365fc <z_spin_unlock_valid>
   37066:	b940      	cbnz	r0, 3707a <work_queue_main+0x146>
   37068:	4926      	ldr	r1, [pc, #152]	; (37104 <work_queue_main+0x1d0>)
   3706a:	4827      	ldr	r0, [pc, #156]	; (37108 <work_queue_main+0x1d4>)
   3706c:	22b9      	movs	r2, #185	; 0xb9
   3706e:	f005 fd0d 	bl	3ca8c <assert_print>
   37072:	21b9      	movs	r1, #185	; 0xb9
   37074:	4823      	ldr	r0, [pc, #140]	; (37104 <work_queue_main+0x1d0>)
   37076:	f005 fd02 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   3707a:	f38a 8811 	msr	BASEPRI, sl
   3707e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   37082:	2d00      	cmp	r5, #0
   37084:	f47f af5c 	bne.w	36f40 <work_queue_main+0xc>
	z_impl_k_yield();
   37088:	f001 f9b4 	bl	383f4 <z_impl_k_yield>
}
   3708c:	e758      	b.n	36f40 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   3708e:	f104 05e0 	add.w	r5, r4, #224	; 0xe0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   37092:	2200      	movs	r2, #0
   37094:	2101      	movs	r1, #1
   37096:	4628      	mov	r0, r5
   37098:	f001 fb84 	bl	387a4 <z_sched_wake>
   3709c:	2800      	cmp	r0, #0
   3709e:	d1f8      	bne.n	37092 <work_queue_main+0x15e>
   370a0:	e771      	b.n	36f86 <work_queue_main+0x52>
	return list->head;
   370a2:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   370a4:	f023 0303 	bic.w	r3, r3, #3
   370a8:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   370aa:	2800      	cmp	r0, #0
   370ac:	d0d0      	beq.n	37050 <work_queue_main+0x11c>
	return node->next;
   370ae:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   370b2:	46c3      	mov	fp, r8
	return node->next;
   370b4:	f8d0 9000 	ldr.w	r9, [r0]
		if (wc->work == work) {
   370b8:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   370ba:	4602      	mov	r2, r0
		if (wc->work == work) {
   370bc:	429d      	cmp	r5, r3
   370be:	d10d      	bne.n	370dc <work_queue_main+0x1a8>
   370c0:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   370c2:	f1b8 0f00 	cmp.w	r8, #0
   370c6:	d111      	bne.n	370ec <work_queue_main+0x1b8>
   370c8:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   370ca:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   370cc:	4283      	cmp	r3, r0
   370ce:	d100      	bne.n	370d2 <work_queue_main+0x19e>
	list->tail = node;
   370d0:	607a      	str	r2, [r7, #4]
	parent->next = child;
   370d2:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   370d6:	f7ff fe4f 	bl	36d78 <z_impl_k_sem_give>
}
   370da:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   370dc:	f1b9 0f00 	cmp.w	r9, #0
   370e0:	d0b6      	beq.n	37050 <work_queue_main+0x11c>
	return node->next;
   370e2:	4648      	mov	r0, r9
   370e4:	4690      	mov	r8, r2
   370e6:	f8d9 9000 	ldr.w	r9, [r9]
   370ea:	e7e5      	b.n	370b8 <work_queue_main+0x184>
	return list->tail;
   370ec:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   370ee:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   370f2:	4298      	cmp	r0, r3
	list->tail = node;
   370f4:	bf08      	it	eq
   370f6:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   370fa:	e7ea      	b.n	370d2 <work_queue_main+0x19e>
   370fc:	2001a534 	.word	0x2001a534
   37100:	2001a538 	.word	0x2001a538
   37104:	000440d8 	.word	0x000440d8
   37108:	0004409e 	.word	0x0004409e
   3710c:	0004bbd8 	.word	0x0004bbd8

00037110 <submit_to_queue_locked>:
{
   37110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   37112:	68c3      	ldr	r3, [r0, #12]
{
   37114:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   37116:	079a      	lsls	r2, r3, #30
{
   37118:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3711a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   3711e:	d42a      	bmi.n	37176 <submit_to_queue_locked+0x66>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   37120:	075f      	lsls	r7, r3, #29
   37122:	d42a      	bmi.n	3717a <submit_to_queue_locked+0x6a>
		if (*queuep == NULL) {
   37124:	680a      	ldr	r2, [r1, #0]
   37126:	b90a      	cbnz	r2, 3712c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   37128:	6882      	ldr	r2, [r0, #8]
   3712a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   3712c:	07d8      	lsls	r0, r3, #31
   3712e:	d527      	bpl.n	37180 <submit_to_queue_locked+0x70>
			__ASSERT_NO_MSG(work->queue != NULL);
   37130:	68a3      	ldr	r3, [r4, #8]
   37132:	b953      	cbnz	r3, 3714a <submit_to_queue_locked+0x3a>
   37134:	4923      	ldr	r1, [pc, #140]	; (371c4 <submit_to_queue_locked+0xb4>)
   37136:	4824      	ldr	r0, [pc, #144]	; (371c8 <submit_to_queue_locked+0xb8>)
   37138:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   3713c:	f005 fca6 	bl	3ca8c <assert_print>
   37140:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   37144:	481f      	ldr	r0, [pc, #124]	; (371c4 <submit_to_queue_locked+0xb4>)
   37146:	f005 fc9a 	bl	3ca7e <assert_post_action>
			ret = 2;
   3714a:	2502      	movs	r5, #2
			*queuep = work->queue;
   3714c:	68a3      	ldr	r3, [r4, #8]
   3714e:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   37150:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   37152:	b38f      	cbz	r7, 371b8 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   37154:	4b1d      	ldr	r3, [pc, #116]	; (371cc <submit_to_queue_locked+0xbc>)
   37156:	689b      	ldr	r3, [r3, #8]
   37158:	42bb      	cmp	r3, r7
   3715a:	d113      	bne.n	37184 <submit_to_queue_locked+0x74>
   3715c:	f009 ff04 	bl	40f68 <k_is_in_isr>
   37160:	f080 0001 	eor.w	r0, r0, #1
   37164:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   37166:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   3716a:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   3716c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   37170:	d525      	bpl.n	371be <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
   37172:	b14a      	cbz	r2, 37188 <submit_to_queue_locked+0x78>
   37174:	b950      	cbnz	r0, 3718c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   37176:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   3717a:	2300      	movs	r3, #0
   3717c:	6033      	str	r3, [r6, #0]
	return ret;
   3717e:	e015      	b.n	371ac <submit_to_queue_locked+0x9c>
		ret = 1;
   37180:	2501      	movs	r5, #1
   37182:	e7e5      	b.n	37150 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   37184:	2000      	movs	r0, #0
   37186:	e7ee      	b.n	37166 <submit_to_queue_locked+0x56>
	} else if (plugged && !draining) {
   37188:	071b      	lsls	r3, r3, #28
   3718a:	d4f4      	bmi.n	37176 <submit_to_queue_locked+0x66>
	parent->next = child;
   3718c:	2300      	movs	r3, #0
   3718e:	6023      	str	r3, [r4, #0]
	return list->tail;
   37190:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
Z_GENLIST_APPEND(slist, snode)
   37194:	b963      	cbnz	r3, 371b0 <submit_to_queue_locked+0xa0>
	list->head = node;
   37196:	e9c7 4434 	strd	r4, r4, [r7, #208]	; 0xd0
		(void)notify_queue_locked(queue);
   3719a:	4638      	mov	r0, r7
   3719c:	f009 ff47 	bl	4102e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   371a0:	68e3      	ldr	r3, [r4, #12]
   371a2:	f043 0304 	orr.w	r3, r3, #4
   371a6:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   371a8:	6833      	ldr	r3, [r6, #0]
   371aa:	60a3      	str	r3, [r4, #8]
}
   371ac:	4628      	mov	r0, r5
   371ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   371b0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   371b2:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
}
   371b6:	e7f0      	b.n	3719a <submit_to_queue_locked+0x8a>
		return -EINVAL;
   371b8:	f06f 0515 	mvn.w	r5, #21
   371bc:	e7dd      	b.n	3717a <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
   371be:	f06f 0512 	mvn.w	r5, #18
   371c2:	e7da      	b.n	3717a <submit_to_queue_locked+0x6a>
   371c4:	0004bbd8 	.word	0x0004bbd8
   371c8:	0004409e 	.word	0x0004409e
   371cc:	2001a500 	.word	0x2001a500

000371d0 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   371d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   371d2:	4604      	mov	r4, r0
	__asm__ volatile(
   371d4:	f04f 0320 	mov.w	r3, #32
   371d8:	f3ef 8511 	mrs	r5, BASEPRI
   371dc:	f383 8812 	msr	BASEPRI_MAX, r3
   371e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   371e4:	4818      	ldr	r0, [pc, #96]	; (37248 <work_timeout+0x78>)
   371e6:	f7ff f9fb 	bl	365e0 <z_spin_lock_valid>
   371ea:	b940      	cbnz	r0, 371fe <work_timeout+0x2e>
   371ec:	4917      	ldr	r1, [pc, #92]	; (3724c <work_timeout+0x7c>)
   371ee:	4818      	ldr	r0, [pc, #96]	; (37250 <work_timeout+0x80>)
   371f0:	228e      	movs	r2, #142	; 0x8e
   371f2:	f005 fc4b 	bl	3ca8c <assert_print>
   371f6:	218e      	movs	r1, #142	; 0x8e
   371f8:	4814      	ldr	r0, [pc, #80]	; (3724c <work_timeout+0x7c>)
   371fa:	f005 fc40 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   371fe:	4812      	ldr	r0, [pc, #72]	; (37248 <work_timeout+0x78>)
   37200:	f7ff fa0c 	bl	3661c <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   37204:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   37206:	2103      	movs	r1, #3
   37208:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   3720a:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   3720c:	f1a4 0610 	sub.w	r6, r4, #16
   37210:	f009 fef4 	bl	40ffc <flag_test_and_clear>
   37214:	b128      	cbz	r0, 37222 <work_timeout+0x52>
		queue = dw->queue;
   37216:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   37218:	4630      	mov	r0, r6
   3721a:	a901      	add	r1, sp, #4
		queue = dw->queue;
   3721c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   3721e:	f7ff ff77 	bl	37110 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37222:	4809      	ldr	r0, [pc, #36]	; (37248 <work_timeout+0x78>)
   37224:	f7ff f9ea 	bl	365fc <z_spin_unlock_valid>
   37228:	b940      	cbnz	r0, 3723c <work_timeout+0x6c>
   3722a:	4908      	ldr	r1, [pc, #32]	; (3724c <work_timeout+0x7c>)
   3722c:	4808      	ldr	r0, [pc, #32]	; (37250 <work_timeout+0x80>)
   3722e:	22b9      	movs	r2, #185	; 0xb9
   37230:	f005 fc2c 	bl	3ca8c <assert_print>
   37234:	21b9      	movs	r1, #185	; 0xb9
   37236:	4805      	ldr	r0, [pc, #20]	; (3724c <work_timeout+0x7c>)
   37238:	f005 fc21 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   3723c:	f385 8811 	msr	BASEPRI, r5
   37240:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   37244:	b002      	add	sp, #8
   37246:	bd70      	pop	{r4, r5, r6, pc}
   37248:	2001a534 	.word	0x2001a534
   3724c:	000440d8 	.word	0x000440d8
   37250:	0004409e 	.word	0x0004409e

00037254 <k_work_init>:
{
   37254:	b538      	push	{r3, r4, r5, lr}
   37256:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   37258:	4604      	mov	r4, r0
   3725a:	b940      	cbnz	r0, 3726e <k_work_init+0x1a>
   3725c:	490c      	ldr	r1, [pc, #48]	; (37290 <k_work_init+0x3c>)
   3725e:	480d      	ldr	r0, [pc, #52]	; (37294 <k_work_init+0x40>)
   37260:	2289      	movs	r2, #137	; 0x89
   37262:	f005 fc13 	bl	3ca8c <assert_print>
   37266:	2189      	movs	r1, #137	; 0x89
   37268:	4809      	ldr	r0, [pc, #36]	; (37290 <k_work_init+0x3c>)
   3726a:	f005 fc08 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   3726e:	b945      	cbnz	r5, 37282 <k_work_init+0x2e>
   37270:	4907      	ldr	r1, [pc, #28]	; (37290 <k_work_init+0x3c>)
   37272:	4808      	ldr	r0, [pc, #32]	; (37294 <k_work_init+0x40>)
   37274:	228a      	movs	r2, #138	; 0x8a
   37276:	f005 fc09 	bl	3ca8c <assert_print>
   3727a:	218a      	movs	r1, #138	; 0x8a
   3727c:	4804      	ldr	r0, [pc, #16]	; (37290 <k_work_init+0x3c>)
   3727e:	f005 fbfe 	bl	3ca7e <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   37282:	2210      	movs	r2, #16
   37284:	2100      	movs	r1, #0
   37286:	4620      	mov	r0, r4
   37288:	f00a f8d4 	bl	41434 <memset>
   3728c:	6065      	str	r5, [r4, #4]
}
   3728e:	bd38      	pop	{r3, r4, r5, pc}
   37290:	0004bbd8 	.word	0x0004bbd8
   37294:	0004409e 	.word	0x0004409e

00037298 <k_work_busy_get>:
{
   37298:	b538      	push	{r3, r4, r5, lr}
   3729a:	4604      	mov	r4, r0
	__asm__ volatile(
   3729c:	f04f 0320 	mov.w	r3, #32
   372a0:	f3ef 8511 	mrs	r5, BASEPRI
   372a4:	f383 8812 	msr	BASEPRI_MAX, r3
   372a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   372ac:	4812      	ldr	r0, [pc, #72]	; (372f8 <k_work_busy_get+0x60>)
   372ae:	f7ff f997 	bl	365e0 <z_spin_lock_valid>
   372b2:	b940      	cbnz	r0, 372c6 <k_work_busy_get+0x2e>
   372b4:	4911      	ldr	r1, [pc, #68]	; (372fc <k_work_busy_get+0x64>)
   372b6:	4812      	ldr	r0, [pc, #72]	; (37300 <k_work_busy_get+0x68>)
   372b8:	228e      	movs	r2, #142	; 0x8e
   372ba:	f005 fbe7 	bl	3ca8c <assert_print>
   372be:	218e      	movs	r1, #142	; 0x8e
   372c0:	480e      	ldr	r0, [pc, #56]	; (372fc <k_work_busy_get+0x64>)
   372c2:	f005 fbdc 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   372c6:	480c      	ldr	r0, [pc, #48]	; (372f8 <k_work_busy_get+0x60>)
   372c8:	f7ff f9a8 	bl	3661c <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   372cc:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   372ce:	480a      	ldr	r0, [pc, #40]	; (372f8 <k_work_busy_get+0x60>)
   372d0:	f004 040f 	and.w	r4, r4, #15
   372d4:	f7ff f992 	bl	365fc <z_spin_unlock_valid>
   372d8:	b940      	cbnz	r0, 372ec <k_work_busy_get+0x54>
   372da:	4908      	ldr	r1, [pc, #32]	; (372fc <k_work_busy_get+0x64>)
   372dc:	4808      	ldr	r0, [pc, #32]	; (37300 <k_work_busy_get+0x68>)
   372de:	22b9      	movs	r2, #185	; 0xb9
   372e0:	f005 fbd4 	bl	3ca8c <assert_print>
   372e4:	21b9      	movs	r1, #185	; 0xb9
   372e6:	4805      	ldr	r0, [pc, #20]	; (372fc <k_work_busy_get+0x64>)
   372e8:	f005 fbc9 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   372ec:	f385 8811 	msr	BASEPRI, r5
   372f0:	f3bf 8f6f 	isb	sy
}
   372f4:	4620      	mov	r0, r4
   372f6:	bd38      	pop	{r3, r4, r5, pc}
   372f8:	2001a534 	.word	0x2001a534
   372fc:	000440d8 	.word	0x000440d8
   37300:	0004409e 	.word	0x0004409e

00037304 <k_work_submit_to_queue>:
{
   37304:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   37306:	460c      	mov	r4, r1
{
   37308:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   3730a:	b951      	cbnz	r1, 37322 <k_work_submit_to_queue+0x1e>
   3730c:	4923      	ldr	r1, [pc, #140]	; (3739c <k_work_submit_to_queue+0x98>)
   3730e:	4824      	ldr	r0, [pc, #144]	; (373a0 <k_work_submit_to_queue+0x9c>)
   37310:	f240 1269 	movw	r2, #361	; 0x169
   37314:	f005 fbba 	bl	3ca8c <assert_print>
   37318:	f240 1169 	movw	r1, #361	; 0x169
   3731c:	481f      	ldr	r0, [pc, #124]	; (3739c <k_work_submit_to_queue+0x98>)
   3731e:	f005 fbae 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   37322:	f04f 0320 	mov.w	r3, #32
   37326:	f3ef 8511 	mrs	r5, BASEPRI
   3732a:	f383 8812 	msr	BASEPRI_MAX, r3
   3732e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37332:	481c      	ldr	r0, [pc, #112]	; (373a4 <k_work_submit_to_queue+0xa0>)
   37334:	f7ff f954 	bl	365e0 <z_spin_lock_valid>
   37338:	b940      	cbnz	r0, 3734c <k_work_submit_to_queue+0x48>
   3733a:	491b      	ldr	r1, [pc, #108]	; (373a8 <k_work_submit_to_queue+0xa4>)
   3733c:	4818      	ldr	r0, [pc, #96]	; (373a0 <k_work_submit_to_queue+0x9c>)
   3733e:	228e      	movs	r2, #142	; 0x8e
   37340:	f005 fba4 	bl	3ca8c <assert_print>
   37344:	218e      	movs	r1, #142	; 0x8e
   37346:	4818      	ldr	r0, [pc, #96]	; (373a8 <k_work_submit_to_queue+0xa4>)
   37348:	f005 fb99 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   3734c:	4815      	ldr	r0, [pc, #84]	; (373a4 <k_work_submit_to_queue+0xa0>)
   3734e:	f7ff f965 	bl	3661c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   37352:	4620      	mov	r0, r4
   37354:	a901      	add	r1, sp, #4
   37356:	f7ff fedb 	bl	37110 <submit_to_queue_locked>
   3735a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3735c:	4811      	ldr	r0, [pc, #68]	; (373a4 <k_work_submit_to_queue+0xa0>)
   3735e:	f7ff f94d 	bl	365fc <z_spin_unlock_valid>
   37362:	b940      	cbnz	r0, 37376 <k_work_submit_to_queue+0x72>
   37364:	4910      	ldr	r1, [pc, #64]	; (373a8 <k_work_submit_to_queue+0xa4>)
   37366:	480e      	ldr	r0, [pc, #56]	; (373a0 <k_work_submit_to_queue+0x9c>)
   37368:	22b9      	movs	r2, #185	; 0xb9
   3736a:	f005 fb8f 	bl	3ca8c <assert_print>
   3736e:	21b9      	movs	r1, #185	; 0xb9
   37370:	480d      	ldr	r0, [pc, #52]	; (373a8 <k_work_submit_to_queue+0xa4>)
   37372:	f005 fb84 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   37376:	f385 8811 	msr	BASEPRI, r5
   3737a:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
   3737e:	2c00      	cmp	r4, #0
   37380:	dd09      	ble.n	37396 <k_work_submit_to_queue+0x92>
	__asm__ volatile(
   37382:	f04f 0320 	mov.w	r3, #32
   37386:	f3ef 8011 	mrs	r0, BASEPRI
   3738a:	f383 8812 	msr	BASEPRI_MAX, r3
   3738e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   37392:	f009 fe8f 	bl	410b4 <z_reschedule_irqlock>
}
   37396:	4620      	mov	r0, r4
   37398:	b003      	add	sp, #12
   3739a:	bd30      	pop	{r4, r5, pc}
   3739c:	0004bbd8 	.word	0x0004bbd8
   373a0:	0004409e 	.word	0x0004409e
   373a4:	2001a534 	.word	0x2001a534
   373a8:	000440d8 	.word	0x000440d8

000373ac <k_work_submit>:
{
   373ac:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   373ae:	4801      	ldr	r0, [pc, #4]	; (373b4 <k_work_submit+0x8>)
   373b0:	f7ff bfa8 	b.w	37304 <k_work_submit_to_queue>
   373b4:	20018fa8 	.word	0x20018fa8

000373b8 <k_work_cancel>:
{
   373b8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   373ba:	4604      	mov	r4, r0
   373bc:	b950      	cbnz	r0, 373d4 <k_work_cancel+0x1c>
   373be:	4924      	ldr	r1, [pc, #144]	; (37450 <k_work_cancel+0x98>)
   373c0:	4824      	ldr	r0, [pc, #144]	; (37454 <k_work_cancel+0x9c>)
   373c2:	f240 220e 	movw	r2, #526	; 0x20e
   373c6:	f005 fb61 	bl	3ca8c <assert_print>
   373ca:	f240 210e 	movw	r1, #526	; 0x20e
   373ce:	4820      	ldr	r0, [pc, #128]	; (37450 <k_work_cancel+0x98>)
   373d0:	f005 fb55 	bl	3ca7e <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   373d4:	68e3      	ldr	r3, [r4, #12]
	__ASSERT_NO_MSG(!flag_test(&work->flags, K_WORK_DELAYABLE_BIT));
   373d6:	05db      	lsls	r3, r3, #23
   373d8:	d50a      	bpl.n	373f0 <k_work_cancel+0x38>
   373da:	491d      	ldr	r1, [pc, #116]	; (37450 <k_work_cancel+0x98>)
   373dc:	481d      	ldr	r0, [pc, #116]	; (37454 <k_work_cancel+0x9c>)
   373de:	f240 220f 	movw	r2, #527	; 0x20f
   373e2:	f005 fb53 	bl	3ca8c <assert_print>
   373e6:	f240 210f 	movw	r1, #527	; 0x20f
   373ea:	4819      	ldr	r0, [pc, #100]	; (37450 <k_work_cancel+0x98>)
   373ec:	f005 fb47 	bl	3ca7e <assert_post_action>
   373f0:	f04f 0320 	mov.w	r3, #32
   373f4:	f3ef 8511 	mrs	r5, BASEPRI
   373f8:	f383 8812 	msr	BASEPRI_MAX, r3
   373fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37400:	4815      	ldr	r0, [pc, #84]	; (37458 <k_work_cancel+0xa0>)
   37402:	f7ff f8ed 	bl	365e0 <z_spin_lock_valid>
   37406:	b940      	cbnz	r0, 3741a <k_work_cancel+0x62>
   37408:	4914      	ldr	r1, [pc, #80]	; (3745c <k_work_cancel+0xa4>)
   3740a:	4812      	ldr	r0, [pc, #72]	; (37454 <k_work_cancel+0x9c>)
   3740c:	228e      	movs	r2, #142	; 0x8e
   3740e:	f005 fb3d 	bl	3ca8c <assert_print>
   37412:	218e      	movs	r1, #142	; 0x8e
   37414:	4811      	ldr	r0, [pc, #68]	; (3745c <k_work_cancel+0xa4>)
   37416:	f005 fb32 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   3741a:	480f      	ldr	r0, [pc, #60]	; (37458 <k_work_cancel+0xa0>)
   3741c:	f7ff f8fe 	bl	3661c <z_spin_lock_set_owner>
	int ret = cancel_async_locked(work);
   37420:	4620      	mov	r0, r4
   37422:	f009 fe0b 	bl	4103c <cancel_async_locked>
   37426:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37428:	480b      	ldr	r0, [pc, #44]	; (37458 <k_work_cancel+0xa0>)
   3742a:	f7ff f8e7 	bl	365fc <z_spin_unlock_valid>
   3742e:	b940      	cbnz	r0, 37442 <k_work_cancel+0x8a>
   37430:	490a      	ldr	r1, [pc, #40]	; (3745c <k_work_cancel+0xa4>)
   37432:	4808      	ldr	r0, [pc, #32]	; (37454 <k_work_cancel+0x9c>)
   37434:	22b9      	movs	r2, #185	; 0xb9
   37436:	f005 fb29 	bl	3ca8c <assert_print>
   3743a:	21b9      	movs	r1, #185	; 0xb9
   3743c:	4807      	ldr	r0, [pc, #28]	; (3745c <k_work_cancel+0xa4>)
   3743e:	f005 fb1e 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   37442:	f385 8811 	msr	BASEPRI, r5
   37446:	f3bf 8f6f 	isb	sy
}
   3744a:	4620      	mov	r0, r4
   3744c:	bd38      	pop	{r3, r4, r5, pc}
   3744e:	bf00      	nop
   37450:	0004bbd8 	.word	0x0004bbd8
   37454:	0004409e 	.word	0x0004409e
   37458:	2001a534 	.word	0x2001a534
   3745c:	000440d8 	.word	0x000440d8

00037460 <k_work_queue_start>:
{
   37460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37464:	b088      	sub	sp, #32
   37466:	460e      	mov	r6, r1
   37468:	4617      	mov	r7, r2
   3746a:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   3746c:	4604      	mov	r4, r0
{
   3746e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   37470:	b950      	cbnz	r0, 37488 <k_work_queue_start+0x28>
   37472:	492d      	ldr	r1, [pc, #180]	; (37528 <k_work_queue_start+0xc8>)
   37474:	482d      	ldr	r0, [pc, #180]	; (3752c <k_work_queue_start+0xcc>)
   37476:	f240 22b5 	movw	r2, #693	; 0x2b5
   3747a:	f005 fb07 	bl	3ca8c <assert_print>
   3747e:	f240 21b5 	movw	r1, #693	; 0x2b5
   37482:	4829      	ldr	r0, [pc, #164]	; (37528 <k_work_queue_start+0xc8>)
   37484:	f005 fafb 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(stack);
   37488:	b956      	cbnz	r6, 374a0 <k_work_queue_start+0x40>
   3748a:	4927      	ldr	r1, [pc, #156]	; (37528 <k_work_queue_start+0xc8>)
   3748c:	4827      	ldr	r0, [pc, #156]	; (3752c <k_work_queue_start+0xcc>)
   3748e:	f240 22b6 	movw	r2, #694	; 0x2b6
   37492:	f005 fafb 	bl	3ca8c <assert_print>
   37496:	f240 21b6 	movw	r1, #694	; 0x2b6
   3749a:	4823      	ldr	r0, [pc, #140]	; (37528 <k_work_queue_start+0xc8>)
   3749c:	f005 faef 	bl	3ca7e <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   374a0:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   374a4:	07db      	lsls	r3, r3, #31
   374a6:	d50a      	bpl.n	374be <k_work_queue_start+0x5e>
   374a8:	491f      	ldr	r1, [pc, #124]	; (37528 <k_work_queue_start+0xc8>)
   374aa:	4820      	ldr	r0, [pc, #128]	; (3752c <k_work_queue_start+0xcc>)
   374ac:	f240 22b7 	movw	r2, #695	; 0x2b7
   374b0:	f005 faec 	bl	3ca8c <assert_print>
   374b4:	f240 21b7 	movw	r1, #695	; 0x2b7
   374b8:	481b      	ldr	r0, [pc, #108]	; (37528 <k_work_queue_start+0xc8>)
   374ba:	f005 fae0 	bl	3ca7e <assert_post_action>
	list->head = NULL;
   374be:	2300      	movs	r3, #0
	list->tail = NULL;
   374c0:	e9c4 3334 	strd	r3, r3, [r4, #208]	; 0xd0
   374c4:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
	list->tail = (sys_dnode_t *)list;
   374c8:	e9c4 3336 	strd	r3, r3, [r4, #216]	; 0xd8
   374cc:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
   374d0:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
	if ((cfg != NULL) && cfg->no_yield) {
   374d4:	b32d      	cbz	r5, 37522 <k_work_queue_start+0xc2>
   374d6:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   374d8:	f240 1101 	movw	r1, #257	; 0x101
   374dc:	2b00      	cmp	r3, #0
   374de:	bf08      	it	eq
   374e0:	2101      	moveq	r1, #1
	*flagp = flags;
   374e2:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   374e6:	f04f 32ff 	mov.w	r2, #4294967295
   374ea:	f04f 33ff 	mov.w	r3, #4294967295
   374ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
   374f2:	2200      	movs	r2, #0
   374f4:	4631      	mov	r1, r6
   374f6:	e9cd 8203 	strd	r8, r2, [sp, #12]
   374fa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   374fe:	4620      	mov	r0, r4
   37500:	463a      	mov	r2, r7
   37502:	4b0b      	ldr	r3, [pc, #44]	; (37530 <k_work_queue_start+0xd0>)
   37504:	9400      	str	r4, [sp, #0]
   37506:	f7fe ffa7 	bl	36458 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   3750a:	b125      	cbz	r5, 37516 <k_work_queue_start+0xb6>
   3750c:	6829      	ldr	r1, [r5, #0]
   3750e:	b111      	cbz	r1, 37516 <k_work_queue_start+0xb6>
	return z_impl_k_thread_name_set(thread, str);
   37510:	4620      	mov	r0, r4
   37512:	f009 fd2f 	bl	40f74 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   37516:	4620      	mov	r0, r4
}
   37518:	b008      	add	sp, #32
   3751a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3751e:	f009 bd2e 	b.w	40f7e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   37522:	2101      	movs	r1, #1
   37524:	e7dd      	b.n	374e2 <k_work_queue_start+0x82>
   37526:	bf00      	nop
   37528:	0004bbd8 	.word	0x0004bbd8
   3752c:	0004409e 	.word	0x0004409e
   37530:	00036f35 	.word	0x00036f35

00037534 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   37534:	b538      	push	{r3, r4, r5, lr}
   37536:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   37538:	4604      	mov	r4, r0
   3753a:	b950      	cbnz	r0, 37552 <k_work_init_delayable+0x1e>
   3753c:	4910      	ldr	r1, [pc, #64]	; (37580 <k_work_init_delayable+0x4c>)
   3753e:	4811      	ldr	r0, [pc, #68]	; (37584 <k_work_init_delayable+0x50>)
   37540:	f240 322d 	movw	r2, #813	; 0x32d
   37544:	f005 faa2 	bl	3ca8c <assert_print>
   37548:	f240 312d 	movw	r1, #813	; 0x32d
   3754c:	480c      	ldr	r0, [pc, #48]	; (37580 <k_work_init_delayable+0x4c>)
   3754e:	f005 fa96 	bl	3ca7e <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   37552:	b955      	cbnz	r5, 3756a <k_work_init_delayable+0x36>
   37554:	490a      	ldr	r1, [pc, #40]	; (37580 <k_work_init_delayable+0x4c>)
   37556:	480b      	ldr	r0, [pc, #44]	; (37584 <k_work_init_delayable+0x50>)
   37558:	f240 322e 	movw	r2, #814	; 0x32e
   3755c:	f005 fa96 	bl	3ca8c <assert_print>
   37560:	f240 312e 	movw	r1, #814	; 0x32e
   37564:	4806      	ldr	r0, [pc, #24]	; (37580 <k_work_init_delayable+0x4c>)
   37566:	f005 fa8a 	bl	3ca7e <assert_post_action>

	*dwork = (struct k_work_delayable){
   3756a:	2230      	movs	r2, #48	; 0x30
   3756c:	2100      	movs	r1, #0
   3756e:	4620      	mov	r0, r4
   37570:	f009 ff60 	bl	41434 <memset>
   37574:	f44f 7380 	mov.w	r3, #256	; 0x100
   37578:	6065      	str	r5, [r4, #4]
   3757a:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   3757c:	bd38      	pop	{r3, r4, r5, pc}
   3757e:	bf00      	nop
   37580:	0004bbd8 	.word	0x0004bbd8
   37584:	0004409e 	.word	0x0004409e

00037588 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   37588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3758a:	4616      	mov	r6, r2
   3758c:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   3758e:	460c      	mov	r4, r1
{
   37590:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   37592:	b951      	cbnz	r1, 375aa <k_work_schedule_for_queue+0x22>
   37594:	4929      	ldr	r1, [pc, #164]	; (3763c <k_work_schedule_for_queue+0xb4>)
   37596:	482a      	ldr	r0, [pc, #168]	; (37640 <k_work_schedule_for_queue+0xb8>)
   37598:	f44f 7269 	mov.w	r2, #932	; 0x3a4
   3759c:	f005 fa76 	bl	3ca8c <assert_print>
   375a0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   375a4:	4825      	ldr	r0, [pc, #148]	; (3763c <k_work_schedule_for_queue+0xb4>)
   375a6:	f005 fa6a 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   375aa:	f04f 0320 	mov.w	r3, #32
   375ae:	f3ef 8711 	mrs	r7, BASEPRI
   375b2:	f383 8812 	msr	BASEPRI_MAX, r3
   375b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   375ba:	4822      	ldr	r0, [pc, #136]	; (37644 <k_work_schedule_for_queue+0xbc>)
   375bc:	f7ff f810 	bl	365e0 <z_spin_lock_valid>
   375c0:	b940      	cbnz	r0, 375d4 <k_work_schedule_for_queue+0x4c>
   375c2:	4921      	ldr	r1, [pc, #132]	; (37648 <k_work_schedule_for_queue+0xc0>)
   375c4:	481e      	ldr	r0, [pc, #120]	; (37640 <k_work_schedule_for_queue+0xb8>)
   375c6:	228e      	movs	r2, #142	; 0x8e
   375c8:	f005 fa60 	bl	3ca8c <assert_print>
   375cc:	218e      	movs	r1, #142	; 0x8e
   375ce:	481e      	ldr	r0, [pc, #120]	; (37648 <k_work_schedule_for_queue+0xc0>)
   375d0:	f005 fa55 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   375d4:	481b      	ldr	r0, [pc, #108]	; (37644 <k_work_schedule_for_queue+0xbc>)
   375d6:	f7ff f821 	bl	3661c <z_spin_lock_set_owner>
	return *flagp;
   375da:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   375dc:	f013 0f0e 	tst.w	r3, #14
   375e0:	d129      	bne.n	37636 <k_work_schedule_for_queue+0xae>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   375e2:	ea55 0206 	orrs.w	r2, r5, r6
   375e6:	d118      	bne.n	3761a <k_work_schedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   375e8:	4620      	mov	r0, r4
   375ea:	a901      	add	r1, sp, #4
   375ec:	f7ff fd90 	bl	37110 <submit_to_queue_locked>
   375f0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   375f2:	4814      	ldr	r0, [pc, #80]	; (37644 <k_work_schedule_for_queue+0xbc>)
   375f4:	f7ff f802 	bl	365fc <z_spin_unlock_valid>
   375f8:	b940      	cbnz	r0, 3760c <k_work_schedule_for_queue+0x84>
   375fa:	4913      	ldr	r1, [pc, #76]	; (37648 <k_work_schedule_for_queue+0xc0>)
   375fc:	4810      	ldr	r0, [pc, #64]	; (37640 <k_work_schedule_for_queue+0xb8>)
   375fe:	22b9      	movs	r2, #185	; 0xb9
   37600:	f005 fa44 	bl	3ca8c <assert_print>
   37604:	21b9      	movs	r1, #185	; 0xb9
   37606:	4810      	ldr	r0, [pc, #64]	; (37648 <k_work_schedule_for_queue+0xc0>)
   37608:	f005 fa39 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   3760c:	f387 8811 	msr	BASEPRI, r7
   37610:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   37614:	4620      	mov	r0, r4
   37616:	b003      	add	sp, #12
   37618:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   3761a:	f043 0308 	orr.w	r3, r3, #8
   3761e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   37620:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   37622:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   37626:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   37628:	4632      	mov	r2, r6
   3762a:	462b      	mov	r3, r5
   3762c:	4907      	ldr	r1, [pc, #28]	; (3764c <k_work_schedule_for_queue+0xc4>)
   3762e:	f001 f99d 	bl	3896c <z_add_timeout>
	return ret;
   37632:	2401      	movs	r4, #1
   37634:	e7dd      	b.n	375f2 <k_work_schedule_for_queue+0x6a>
	int ret = 0;
   37636:	2400      	movs	r4, #0
   37638:	e7db      	b.n	375f2 <k_work_schedule_for_queue+0x6a>
   3763a:	bf00      	nop
   3763c:	0004bbd8 	.word	0x0004bbd8
   37640:	0004409e 	.word	0x0004409e
   37644:	2001a534 	.word	0x2001a534
   37648:	000440d8 	.word	0x000440d8
   3764c:	000371d1 	.word	0x000371d1

00037650 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   37650:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   37652:	4801      	ldr	r0, [pc, #4]	; (37658 <k_work_schedule+0x8>)
   37654:	f7ff bf98 	b.w	37588 <k_work_schedule_for_queue>
   37658:	20018fa8 	.word	0x20018fa8

0003765c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   3765c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3765e:	4616      	mov	r6, r2
   37660:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   37662:	460c      	mov	r4, r1
{
   37664:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   37666:	b951      	cbnz	r1, 3767e <k_work_reschedule_for_queue+0x22>
   37668:	4928      	ldr	r1, [pc, #160]	; (3770c <k_work_reschedule_for_queue+0xb0>)
   3766a:	4829      	ldr	r0, [pc, #164]	; (37710 <k_work_reschedule_for_queue+0xb4>)
   3766c:	f44f 7272 	mov.w	r2, #968	; 0x3c8
   37670:	f005 fa0c 	bl	3ca8c <assert_print>
   37674:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   37678:	4824      	ldr	r0, [pc, #144]	; (3770c <k_work_reschedule_for_queue+0xb0>)
   3767a:	f005 fa00 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   3767e:	f04f 0320 	mov.w	r3, #32
   37682:	f3ef 8711 	mrs	r7, BASEPRI
   37686:	f383 8812 	msr	BASEPRI_MAX, r3
   3768a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3768e:	4821      	ldr	r0, [pc, #132]	; (37714 <k_work_reschedule_for_queue+0xb8>)
   37690:	f7fe ffa6 	bl	365e0 <z_spin_lock_valid>
   37694:	b940      	cbnz	r0, 376a8 <k_work_reschedule_for_queue+0x4c>
   37696:	4920      	ldr	r1, [pc, #128]	; (37718 <k_work_reschedule_for_queue+0xbc>)
   37698:	481d      	ldr	r0, [pc, #116]	; (37710 <k_work_reschedule_for_queue+0xb4>)
   3769a:	228e      	movs	r2, #142	; 0x8e
   3769c:	f005 f9f6 	bl	3ca8c <assert_print>
   376a0:	218e      	movs	r1, #142	; 0x8e
   376a2:	481d      	ldr	r0, [pc, #116]	; (37718 <k_work_reschedule_for_queue+0xbc>)
   376a4:	f005 f9eb 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   376a8:	481a      	ldr	r0, [pc, #104]	; (37714 <k_work_reschedule_for_queue+0xb8>)
   376aa:	f7fe ffb7 	bl	3661c <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   376ae:	4620      	mov	r0, r4
   376b0:	f009 fcaf 	bl	41012 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   376b4:	ea55 0306 	orrs.w	r3, r5, r6
   376b8:	d118      	bne.n	376ec <k_work_reschedule_for_queue+0x90>
		return submit_to_queue_locked(work, queuep);
   376ba:	4620      	mov	r0, r4
   376bc:	a901      	add	r1, sp, #4
   376be:	f7ff fd27 	bl	37110 <submit_to_queue_locked>
   376c2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   376c4:	4813      	ldr	r0, [pc, #76]	; (37714 <k_work_reschedule_for_queue+0xb8>)
   376c6:	f7fe ff99 	bl	365fc <z_spin_unlock_valid>
   376ca:	b940      	cbnz	r0, 376de <k_work_reschedule_for_queue+0x82>
   376cc:	4912      	ldr	r1, [pc, #72]	; (37718 <k_work_reschedule_for_queue+0xbc>)
   376ce:	4810      	ldr	r0, [pc, #64]	; (37710 <k_work_reschedule_for_queue+0xb4>)
   376d0:	22b9      	movs	r2, #185	; 0xb9
   376d2:	f005 f9db 	bl	3ca8c <assert_print>
   376d6:	21b9      	movs	r1, #185	; 0xb9
   376d8:	480f      	ldr	r0, [pc, #60]	; (37718 <k_work_reschedule_for_queue+0xbc>)
   376da:	f005 f9d0 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   376de:	f387 8811 	msr	BASEPRI, r7
   376e2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   376e6:	4620      	mov	r0, r4
   376e8:	b003      	add	sp, #12
   376ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   376ec:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   376ee:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   376f2:	f043 0308 	orr.w	r3, r3, #8
   376f6:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   376f8:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   376fa:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   376fc:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   376fe:	4907      	ldr	r1, [pc, #28]	; (3771c <k_work_reschedule_for_queue+0xc0>)
   37700:	462b      	mov	r3, r5
   37702:	f001 f933 	bl	3896c <z_add_timeout>
	return ret;
   37706:	2401      	movs	r4, #1
   37708:	e7dc      	b.n	376c4 <k_work_reschedule_for_queue+0x68>
   3770a:	bf00      	nop
   3770c:	0004bbd8 	.word	0x0004bbd8
   37710:	0004409e 	.word	0x0004409e
   37714:	2001a534 	.word	0x2001a534
   37718:	000440d8 	.word	0x000440d8
   3771c:	000371d1 	.word	0x000371d1

00037720 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   37720:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   37722:	4801      	ldr	r0, [pc, #4]	; (37728 <k_work_reschedule+0x8>)
   37724:	f7ff bf9a 	b.w	3765c <k_work_reschedule_for_queue>
   37728:	20018fa8 	.word	0x20018fa8

0003772c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   3772c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   3772e:	4604      	mov	r4, r0
   37730:	b950      	cbnz	r0, 37748 <k_work_cancel_delayable+0x1c>
   37732:	491e      	ldr	r1, [pc, #120]	; (377ac <k_work_cancel_delayable+0x80>)
   37734:	481e      	ldr	r0, [pc, #120]	; (377b0 <k_work_cancel_delayable+0x84>)
   37736:	f240 32ea 	movw	r2, #1002	; 0x3ea
   3773a:	f005 f9a7 	bl	3ca8c <assert_print>
   3773e:	f240 31ea 	movw	r1, #1002	; 0x3ea
   37742:	481a      	ldr	r0, [pc, #104]	; (377ac <k_work_cancel_delayable+0x80>)
   37744:	f005 f99b 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   37748:	f04f 0320 	mov.w	r3, #32
   3774c:	f3ef 8511 	mrs	r5, BASEPRI
   37750:	f383 8812 	msr	BASEPRI_MAX, r3
   37754:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37758:	4816      	ldr	r0, [pc, #88]	; (377b4 <k_work_cancel_delayable+0x88>)
   3775a:	f7fe ff41 	bl	365e0 <z_spin_lock_valid>
   3775e:	b940      	cbnz	r0, 37772 <k_work_cancel_delayable+0x46>
   37760:	4915      	ldr	r1, [pc, #84]	; (377b8 <k_work_cancel_delayable+0x8c>)
   37762:	4813      	ldr	r0, [pc, #76]	; (377b0 <k_work_cancel_delayable+0x84>)
   37764:	228e      	movs	r2, #142	; 0x8e
   37766:	f005 f991 	bl	3ca8c <assert_print>
   3776a:	218e      	movs	r1, #142	; 0x8e
   3776c:	4812      	ldr	r0, [pc, #72]	; (377b8 <k_work_cancel_delayable+0x8c>)
   3776e:	f005 f986 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   37772:	4810      	ldr	r0, [pc, #64]	; (377b4 <k_work_cancel_delayable+0x88>)
   37774:	f7fe ff52 	bl	3661c <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   37778:	4620      	mov	r0, r4
   3777a:	f009 fc4a 	bl	41012 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   3777e:	4620      	mov	r0, r4
   37780:	f009 fc5c 	bl	4103c <cancel_async_locked>
   37784:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37786:	480b      	ldr	r0, [pc, #44]	; (377b4 <k_work_cancel_delayable+0x88>)
   37788:	f7fe ff38 	bl	365fc <z_spin_unlock_valid>
   3778c:	b940      	cbnz	r0, 377a0 <k_work_cancel_delayable+0x74>
   3778e:	490a      	ldr	r1, [pc, #40]	; (377b8 <k_work_cancel_delayable+0x8c>)
   37790:	4807      	ldr	r0, [pc, #28]	; (377b0 <k_work_cancel_delayable+0x84>)
   37792:	22b9      	movs	r2, #185	; 0xb9
   37794:	f005 f97a 	bl	3ca8c <assert_print>
   37798:	21b9      	movs	r1, #185	; 0xb9
   3779a:	4807      	ldr	r0, [pc, #28]	; (377b8 <k_work_cancel_delayable+0x8c>)
   3779c:	f005 f96f 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   377a0:	f385 8811 	msr	BASEPRI, r5
   377a4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   377a8:	4620      	mov	r0, r4
   377aa:	bd38      	pop	{r3, r4, r5, pc}
   377ac:	0004bbd8 	.word	0x0004bbd8
   377b0:	0004409e 	.word	0x0004409e
   377b4:	2001a534 	.word	0x2001a534
   377b8:	000440d8 	.word	0x000440d8

000377bc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   377bc:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   377be:	4d07      	ldr	r5, [pc, #28]	; (377dc <z_reset_time_slice+0x20>)
   377c0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   377c2:	b154      	cbz	r4, 377da <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   377c4:	f7ed fed4 	bl	25570 <sys_clock_elapsed>
   377c8:	4b05      	ldr	r3, [pc, #20]	; (377e0 <z_reset_time_slice+0x24>)
   377ca:	4420      	add	r0, r4
   377cc:	6118      	str	r0, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   377ce:	2100      	movs	r1, #0
   377d0:	6828      	ldr	r0, [r5, #0]
	}
}
   377d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   377d6:	f001 ba23 	b.w	38c20 <z_set_timeout_expiry>
}
   377da:	bd38      	pop	{r3, r4, r5, pc}
   377dc:	2001a54c 	.word	0x2001a54c
   377e0:	2001a500 	.word	0x2001a500

000377e4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   377e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   377e6:	4604      	mov	r4, r0
   377e8:	460d      	mov	r5, r1
	__asm__ volatile(
   377ea:	f04f 0320 	mov.w	r3, #32
   377ee:	f3ef 8711 	mrs	r7, BASEPRI
   377f2:	f383 8812 	msr	BASEPRI_MAX, r3
   377f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   377fa:	481e      	ldr	r0, [pc, #120]	; (37874 <k_sched_time_slice_set+0x90>)
   377fc:	f7fe fef0 	bl	365e0 <z_spin_lock_valid>
   37800:	b940      	cbnz	r0, 37814 <k_sched_time_slice_set+0x30>
   37802:	491d      	ldr	r1, [pc, #116]	; (37878 <k_sched_time_slice_set+0x94>)
   37804:	481d      	ldr	r0, [pc, #116]	; (3787c <k_sched_time_slice_set+0x98>)
   37806:	228e      	movs	r2, #142	; 0x8e
   37808:	f005 f940 	bl	3ca8c <assert_print>
   3780c:	218e      	movs	r1, #142	; 0x8e
   3780e:	481a      	ldr	r0, [pc, #104]	; (37878 <k_sched_time_slice_set+0x94>)
   37810:	f005 f935 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   37814:	4817      	ldr	r0, [pc, #92]	; (37874 <k_sched_time_slice_set+0x90>)
   37816:	f7fe ff01 	bl	3661c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   3781a:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   3781c:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   37820:	f240 30e7 	movw	r0, #999	; 0x3e7
   37824:	4e16      	ldr	r6, [pc, #88]	; (37880 <k_sched_time_slice_set+0x9c>)
   37826:	2300      	movs	r3, #0
   37828:	6131      	str	r1, [r6, #16]
   3782a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3782e:	fbe4 010c 	umlal	r0, r1, r4, ip
   37832:	f7e5 fb59 	bl	1cee8 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   37836:	2c00      	cmp	r4, #0
   37838:	4b12      	ldr	r3, [pc, #72]	; (37884 <k_sched_time_slice_set+0xa0>)
   3783a:	dc17      	bgt.n	3786c <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   3783c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   3783e:	4b12      	ldr	r3, [pc, #72]	; (37888 <k_sched_time_slice_set+0xa4>)
		z_reset_time_slice(_current);
   37840:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   37842:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   37844:	f7ff ffba 	bl	377bc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37848:	480a      	ldr	r0, [pc, #40]	; (37874 <k_sched_time_slice_set+0x90>)
   3784a:	f7fe fed7 	bl	365fc <z_spin_unlock_valid>
   3784e:	b940      	cbnz	r0, 37862 <k_sched_time_slice_set+0x7e>
   37850:	4909      	ldr	r1, [pc, #36]	; (37878 <k_sched_time_slice_set+0x94>)
   37852:	480a      	ldr	r0, [pc, #40]	; (3787c <k_sched_time_slice_set+0x98>)
   37854:	22b9      	movs	r2, #185	; 0xb9
   37856:	f005 f919 	bl	3ca8c <assert_print>
   3785a:	21b9      	movs	r1, #185	; 0xb9
   3785c:	4806      	ldr	r0, [pc, #24]	; (37878 <k_sched_time_slice_set+0x94>)
   3785e:	f005 f90e 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   37862:	f387 8811 	msr	BASEPRI, r7
   37866:	f3bf 8f6f 	isb	sy
	}
}
   3786a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   3786c:	2802      	cmp	r0, #2
   3786e:	bfb8      	it	lt
   37870:	2002      	movlt	r0, #2
   37872:	e7e3      	b.n	3783c <k_sched_time_slice_set+0x58>
   37874:	2001a544 	.word	0x2001a544
   37878:	000440d8 	.word	0x000440d8
   3787c:	0004409e 	.word	0x0004409e
   37880:	2001a500 	.word	0x2001a500
   37884:	2001a54c 	.word	0x2001a54c
   37888:	2001a548 	.word	0x2001a548

0003788c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   3788c:	b538      	push	{r3, r4, r5, lr}
   3788e:	4604      	mov	r4, r0
	__asm__ volatile(
   37890:	f04f 0320 	mov.w	r3, #32
   37894:	f3ef 8511 	mrs	r5, BASEPRI
   37898:	f383 8812 	msr	BASEPRI_MAX, r3
   3789c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   378a0:	4812      	ldr	r0, [pc, #72]	; (378ec <z_unpend_thread_no_timeout+0x60>)
   378a2:	f7fe fe9d 	bl	365e0 <z_spin_lock_valid>
   378a6:	b940      	cbnz	r0, 378ba <z_unpend_thread_no_timeout+0x2e>
   378a8:	4911      	ldr	r1, [pc, #68]	; (378f0 <z_unpend_thread_no_timeout+0x64>)
   378aa:	4812      	ldr	r0, [pc, #72]	; (378f4 <z_unpend_thread_no_timeout+0x68>)
   378ac:	228e      	movs	r2, #142	; 0x8e
   378ae:	f005 f8ed 	bl	3ca8c <assert_print>
   378b2:	218e      	movs	r1, #142	; 0x8e
   378b4:	480e      	ldr	r0, [pc, #56]	; (378f0 <z_unpend_thread_no_timeout+0x64>)
   378b6:	f005 f8e2 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   378ba:	480c      	ldr	r0, [pc, #48]	; (378ec <z_unpend_thread_no_timeout+0x60>)
   378bc:	f7fe feae 	bl	3661c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   378c0:	4620      	mov	r0, r4
   378c2:	f000 f8c1 	bl	37a48 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   378c6:	4809      	ldr	r0, [pc, #36]	; (378ec <z_unpend_thread_no_timeout+0x60>)
   378c8:	f7fe fe98 	bl	365fc <z_spin_unlock_valid>
   378cc:	b940      	cbnz	r0, 378e0 <z_unpend_thread_no_timeout+0x54>
   378ce:	4908      	ldr	r1, [pc, #32]	; (378f0 <z_unpend_thread_no_timeout+0x64>)
   378d0:	4808      	ldr	r0, [pc, #32]	; (378f4 <z_unpend_thread_no_timeout+0x68>)
   378d2:	22b9      	movs	r2, #185	; 0xb9
   378d4:	f005 f8da 	bl	3ca8c <assert_print>
   378d8:	21b9      	movs	r1, #185	; 0xb9
   378da:	4805      	ldr	r0, [pc, #20]	; (378f0 <z_unpend_thread_no_timeout+0x64>)
   378dc:	f005 f8cf 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   378e0:	f385 8811 	msr	BASEPRI, r5
   378e4:	f3bf 8f6f 	isb	sy
	}
}
   378e8:	bd38      	pop	{r3, r4, r5, pc}
   378ea:	bf00      	nop
   378ec:	2001a544 	.word	0x2001a544
   378f0:	000440d8 	.word	0x000440d8
   378f4:	0004409e 	.word	0x0004409e

000378f8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   378f8:	b510      	push	{r4, lr}
   378fa:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   378fc:	460c      	mov	r4, r1
   378fe:	b9c1      	cbnz	r1, 37932 <z_reschedule+0x3a>
   37900:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   37904:	b9aa      	cbnz	r2, 37932 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   37906:	4a14      	ldr	r2, [pc, #80]	; (37958 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   37908:	69d1      	ldr	r1, [r2, #28]
   3790a:	6892      	ldr	r2, [r2, #8]
   3790c:	4291      	cmp	r1, r2
   3790e:	d010      	beq.n	37932 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37910:	f7fe fe74 	bl	365fc <z_spin_unlock_valid>
   37914:	b940      	cbnz	r0, 37928 <z_reschedule+0x30>
   37916:	4911      	ldr	r1, [pc, #68]	; (3795c <z_reschedule+0x64>)
   37918:	4811      	ldr	r0, [pc, #68]	; (37960 <z_reschedule+0x68>)
   3791a:	22d0      	movs	r2, #208	; 0xd0
   3791c:	f005 f8b6 	bl	3ca8c <assert_print>
   37920:	21d0      	movs	r1, #208	; 0xd0
   37922:	480e      	ldr	r0, [pc, #56]	; (3795c <z_reschedule+0x64>)
   37924:	f005 f8ab 	bl	3ca7e <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   37928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   3792c:	2000      	movs	r0, #0
   3792e:	f7eb b9a9 	b.w	22c84 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37932:	4618      	mov	r0, r3
   37934:	f7fe fe62 	bl	365fc <z_spin_unlock_valid>
   37938:	b940      	cbnz	r0, 3794c <z_reschedule+0x54>
   3793a:	4908      	ldr	r1, [pc, #32]	; (3795c <z_reschedule+0x64>)
   3793c:	4808      	ldr	r0, [pc, #32]	; (37960 <z_reschedule+0x68>)
   3793e:	22b9      	movs	r2, #185	; 0xb9
   37940:	f005 f8a4 	bl	3ca8c <assert_print>
   37944:	21b9      	movs	r1, #185	; 0xb9
   37946:	4805      	ldr	r0, [pc, #20]	; (3795c <z_reschedule+0x64>)
   37948:	f005 f899 	bl	3ca7e <assert_post_action>
   3794c:	f384 8811 	msr	BASEPRI, r4
   37950:	f3bf 8f6f 	isb	sy
   37954:	bd10      	pop	{r4, pc}
   37956:	bf00      	nop
   37958:	2001a500 	.word	0x2001a500
   3795c:	000440d8 	.word	0x000440d8
   37960:	0004409e 	.word	0x0004409e

00037964 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   37964:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   37966:	f04f 0320 	mov.w	r3, #32
   3796a:	f3ef 8511 	mrs	r5, BASEPRI
   3796e:	f383 8812 	msr	BASEPRI_MAX, r3
   37972:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37976:	4820      	ldr	r0, [pc, #128]	; (379f8 <k_sched_lock+0x94>)
   37978:	f7fe fe32 	bl	365e0 <z_spin_lock_valid>
   3797c:	b940      	cbnz	r0, 37990 <k_sched_lock+0x2c>
   3797e:	491f      	ldr	r1, [pc, #124]	; (379fc <k_sched_lock+0x98>)
   37980:	481f      	ldr	r0, [pc, #124]	; (37a00 <k_sched_lock+0x9c>)
   37982:	228e      	movs	r2, #142	; 0x8e
   37984:	f005 f882 	bl	3ca8c <assert_print>
   37988:	218e      	movs	r1, #142	; 0x8e
   3798a:	481c      	ldr	r0, [pc, #112]	; (379fc <k_sched_lock+0x98>)
   3798c:	f005 f877 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   37990:	4819      	ldr	r0, [pc, #100]	; (379f8 <k_sched_lock+0x94>)
   37992:	f7fe fe43 	bl	3661c <z_spin_lock_set_owner>
   37996:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3799a:	b143      	cbz	r3, 379ae <k_sched_lock+0x4a>
   3799c:	4919      	ldr	r1, [pc, #100]	; (37a04 <k_sched_lock+0xa0>)
   3799e:	4818      	ldr	r0, [pc, #96]	; (37a00 <k_sched_lock+0x9c>)
   379a0:	22fd      	movs	r2, #253	; 0xfd
   379a2:	f005 f873 	bl	3ca8c <assert_print>
   379a6:	21fd      	movs	r1, #253	; 0xfd
   379a8:	4816      	ldr	r0, [pc, #88]	; (37a04 <k_sched_lock+0xa0>)
   379aa:	f005 f868 	bl	3ca7e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   379ae:	4c16      	ldr	r4, [pc, #88]	; (37a08 <k_sched_lock+0xa4>)
   379b0:	68a3      	ldr	r3, [r4, #8]
   379b2:	7bdb      	ldrb	r3, [r3, #15]
   379b4:	2b01      	cmp	r3, #1
   379b6:	d108      	bne.n	379ca <k_sched_lock+0x66>
   379b8:	4912      	ldr	r1, [pc, #72]	; (37a04 <k_sched_lock+0xa0>)
   379ba:	4811      	ldr	r0, [pc, #68]	; (37a00 <k_sched_lock+0x9c>)
   379bc:	22fe      	movs	r2, #254	; 0xfe
   379be:	f005 f865 	bl	3ca8c <assert_print>
   379c2:	21fe      	movs	r1, #254	; 0xfe
   379c4:	480f      	ldr	r0, [pc, #60]	; (37a04 <k_sched_lock+0xa0>)
   379c6:	f005 f85a 	bl	3ca7e <assert_post_action>
	--_current->base.sched_locked;
   379ca:	68a2      	ldr	r2, [r4, #8]
   379cc:	7bd3      	ldrb	r3, [r2, #15]
   379ce:	3b01      	subs	r3, #1
   379d0:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   379d2:	4809      	ldr	r0, [pc, #36]	; (379f8 <k_sched_lock+0x94>)
   379d4:	f7fe fe12 	bl	365fc <z_spin_unlock_valid>
   379d8:	b940      	cbnz	r0, 379ec <k_sched_lock+0x88>
   379da:	4908      	ldr	r1, [pc, #32]	; (379fc <k_sched_lock+0x98>)
   379dc:	4808      	ldr	r0, [pc, #32]	; (37a00 <k_sched_lock+0x9c>)
   379de:	22b9      	movs	r2, #185	; 0xb9
   379e0:	f005 f854 	bl	3ca8c <assert_print>
   379e4:	21b9      	movs	r1, #185	; 0xb9
   379e6:	4805      	ldr	r0, [pc, #20]	; (379fc <k_sched_lock+0x98>)
   379e8:	f005 f849 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   379ec:	f385 8811 	msr	BASEPRI, r5
   379f0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   379f4:	bd38      	pop	{r3, r4, r5, pc}
   379f6:	bf00      	nop
   379f8:	2001a544 	.word	0x2001a544
   379fc:	000440d8 	.word	0x000440d8
   37a00:	0004409e 	.word	0x0004409e
   37a04:	0004bb8d 	.word	0x0004bb8d
   37a08:	2001a500 	.word	0x2001a500

00037a0c <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37a0c:	4b0b      	ldr	r3, [pc, #44]	; (37a3c <z_priq_dumb_remove+0x30>)
{
   37a0e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37a10:	4299      	cmp	r1, r3
{
   37a12:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37a14:	d10a      	bne.n	37a2c <z_priq_dumb_remove+0x20>
   37a16:	490a      	ldr	r1, [pc, #40]	; (37a40 <z_priq_dumb_remove+0x34>)
   37a18:	480a      	ldr	r0, [pc, #40]	; (37a44 <z_priq_dumb_remove+0x38>)
   37a1a:	f240 423d 	movw	r2, #1085	; 0x43d
   37a1e:	f005 f835 	bl	3ca8c <assert_print>
   37a22:	f240 413d 	movw	r1, #1085	; 0x43d
   37a26:	4806      	ldr	r0, [pc, #24]	; (37a40 <z_priq_dumb_remove+0x34>)
   37a28:	f005 f829 	bl	3ca7e <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   37a2c:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   37a30:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   37a32:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   37a34:	2300      	movs	r3, #0
	node->prev = NULL;
   37a36:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   37a3a:	bd10      	pop	{r4, pc}
   37a3c:	20018e00 	.word	0x20018e00
   37a40:	0004bbf9 	.word	0x0004bbf9
   37a44:	0004409e 	.word	0x0004409e

00037a48 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   37a48:	6883      	ldr	r3, [r0, #8]
{
   37a4a:	b510      	push	{r4, lr}
   37a4c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   37a4e:	b953      	cbnz	r3, 37a66 <unpend_thread_no_timeout+0x1e>
   37a50:	490a      	ldr	r1, [pc, #40]	; (37a7c <unpend_thread_no_timeout+0x34>)
   37a52:	480b      	ldr	r0, [pc, #44]	; (37a80 <unpend_thread_no_timeout+0x38>)
   37a54:	f240 22b9 	movw	r2, #697	; 0x2b9
   37a58:	f005 f818 	bl	3ca8c <assert_print>
   37a5c:	f240 21b9 	movw	r1, #697	; 0x2b9
   37a60:	4806      	ldr	r0, [pc, #24]	; (37a7c <unpend_thread_no_timeout+0x34>)
   37a62:	f005 f80c 	bl	3ca7e <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   37a66:	4621      	mov	r1, r4
   37a68:	68a0      	ldr	r0, [r4, #8]
   37a6a:	f7ff ffcf 	bl	37a0c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   37a6e:	7b63      	ldrb	r3, [r4, #13]
   37a70:	f023 0302 	bic.w	r3, r3, #2
   37a74:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   37a76:	2300      	movs	r3, #0
   37a78:	60a3      	str	r3, [r4, #8]
}
   37a7a:	bd10      	pop	{r4, pc}
   37a7c:	0004bbf9 	.word	0x0004bbf9
   37a80:	0004409e 	.word	0x0004409e

00037a84 <z_unpend_thread>:
{
   37a84:	b538      	push	{r3, r4, r5, lr}
   37a86:	4604      	mov	r4, r0
	__asm__ volatile(
   37a88:	f04f 0320 	mov.w	r3, #32
   37a8c:	f3ef 8511 	mrs	r5, BASEPRI
   37a90:	f383 8812 	msr	BASEPRI_MAX, r3
   37a94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37a98:	4814      	ldr	r0, [pc, #80]	; (37aec <z_unpend_thread+0x68>)
   37a9a:	f7fe fda1 	bl	365e0 <z_spin_lock_valid>
   37a9e:	b940      	cbnz	r0, 37ab2 <z_unpend_thread+0x2e>
   37aa0:	4913      	ldr	r1, [pc, #76]	; (37af0 <z_unpend_thread+0x6c>)
   37aa2:	4814      	ldr	r0, [pc, #80]	; (37af4 <z_unpend_thread+0x70>)
   37aa4:	228e      	movs	r2, #142	; 0x8e
   37aa6:	f004 fff1 	bl	3ca8c <assert_print>
   37aaa:	218e      	movs	r1, #142	; 0x8e
   37aac:	4810      	ldr	r0, [pc, #64]	; (37af0 <z_unpend_thread+0x6c>)
   37aae:	f004 ffe6 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   37ab2:	480e      	ldr	r0, [pc, #56]	; (37aec <z_unpend_thread+0x68>)
   37ab4:	f7fe fdb2 	bl	3661c <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   37ab8:	4620      	mov	r0, r4
   37aba:	f7ff ffc5 	bl	37a48 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37abe:	480b      	ldr	r0, [pc, #44]	; (37aec <z_unpend_thread+0x68>)
   37ac0:	f7fe fd9c 	bl	365fc <z_spin_unlock_valid>
   37ac4:	b940      	cbnz	r0, 37ad8 <z_unpend_thread+0x54>
   37ac6:	490a      	ldr	r1, [pc, #40]	; (37af0 <z_unpend_thread+0x6c>)
   37ac8:	480a      	ldr	r0, [pc, #40]	; (37af4 <z_unpend_thread+0x70>)
   37aca:	22b9      	movs	r2, #185	; 0xb9
   37acc:	f004 ffde 	bl	3ca8c <assert_print>
   37ad0:	21b9      	movs	r1, #185	; 0xb9
   37ad2:	4807      	ldr	r0, [pc, #28]	; (37af0 <z_unpend_thread+0x6c>)
   37ad4:	f004 ffd3 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   37ad8:	f385 8811 	msr	BASEPRI, r5
   37adc:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   37ae0:	f104 0018 	add.w	r0, r4, #24
}
   37ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   37ae8:	f000 bfee 	b.w	38ac8 <z_abort_timeout>
   37aec:	2001a544 	.word	0x2001a544
   37af0:	000440d8 	.word	0x000440d8
   37af4:	0004409e 	.word	0x0004409e

00037af8 <update_cache>:
{
   37af8:	b538      	push	{r3, r4, r5, lr}
   37afa:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   37afc:	4812      	ldr	r0, [pc, #72]	; (37b48 <update_cache+0x50>)
   37afe:	f009 faef 	bl	410e0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   37b02:	4d12      	ldr	r5, [pc, #72]	; (37b4c <update_cache+0x54>)
   37b04:	4604      	mov	r4, r0
   37b06:	b900      	cbnz	r0, 37b0a <update_cache+0x12>
   37b08:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   37b0a:	b9aa      	cbnz	r2, 37b38 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   37b0c:	68ab      	ldr	r3, [r5, #8]
   37b0e:	b943      	cbnz	r3, 37b22 <update_cache+0x2a>
   37b10:	490f      	ldr	r1, [pc, #60]	; (37b50 <update_cache+0x58>)
   37b12:	4810      	ldr	r0, [pc, #64]	; (37b54 <update_cache+0x5c>)
   37b14:	2289      	movs	r2, #137	; 0x89
   37b16:	f004 ffb9 	bl	3ca8c <assert_print>
   37b1a:	2189      	movs	r1, #137	; 0x89
   37b1c:	480c      	ldr	r0, [pc, #48]	; (37b50 <update_cache+0x58>)
   37b1e:	f004 ffae 	bl	3ca7e <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   37b22:	68ab      	ldr	r3, [r5, #8]
   37b24:	7b5a      	ldrb	r2, [r3, #13]
   37b26:	06d2      	lsls	r2, r2, #27
   37b28:	d106      	bne.n	37b38 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   37b2a:	69a2      	ldr	r2, [r4, #24]
   37b2c:	b922      	cbnz	r2, 37b38 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   37b2e:	89da      	ldrh	r2, [r3, #14]
   37b30:	2a7f      	cmp	r2, #127	; 0x7f
   37b32:	d901      	bls.n	37b38 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   37b34:	61eb      	str	r3, [r5, #28]
}
   37b36:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   37b38:	68ab      	ldr	r3, [r5, #8]
   37b3a:	42a3      	cmp	r3, r4
   37b3c:	d002      	beq.n	37b44 <update_cache+0x4c>
			z_reset_time_slice(thread);
   37b3e:	4620      	mov	r0, r4
   37b40:	f7ff fe3c 	bl	377bc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   37b44:	61ec      	str	r4, [r5, #28]
}
   37b46:	e7f6      	b.n	37b36 <update_cache+0x3e>
   37b48:	2001a520 	.word	0x2001a520
   37b4c:	2001a500 	.word	0x2001a500
   37b50:	0004bbf9 	.word	0x0004bbf9
   37b54:	0004409e 	.word	0x0004409e

00037b58 <move_thread_to_end_of_prio_q>:
{
   37b58:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   37b5a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   37b5e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   37b60:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   37b62:	7b43      	ldrb	r3, [r0, #13]
   37b64:	da06      	bge.n	37b74 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   37b6a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37b6c:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   37b6e:	481d      	ldr	r0, [pc, #116]	; (37be4 <move_thread_to_end_of_prio_q+0x8c>)
   37b70:	f7ff ff4c 	bl	37a0c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   37b74:	7b63      	ldrb	r3, [r4, #13]
   37b76:	f063 037f 	orn	r3, r3, #127	; 0x7f
   37b7a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37b7c:	4b1a      	ldr	r3, [pc, #104]	; (37be8 <move_thread_to_end_of_prio_q+0x90>)
   37b7e:	429c      	cmp	r4, r3
   37b80:	d108      	bne.n	37b94 <move_thread_to_end_of_prio_q+0x3c>
   37b82:	491a      	ldr	r1, [pc, #104]	; (37bec <move_thread_to_end_of_prio_q+0x94>)
   37b84:	481a      	ldr	r0, [pc, #104]	; (37bf0 <move_thread_to_end_of_prio_q+0x98>)
   37b86:	22ba      	movs	r2, #186	; 0xba
   37b88:	f004 ff80 	bl	3ca8c <assert_print>
   37b8c:	21ba      	movs	r1, #186	; 0xba
   37b8e:	4817      	ldr	r0, [pc, #92]	; (37bec <move_thread_to_end_of_prio_q+0x94>)
   37b90:	f004 ff75 	bl	3ca7e <assert_post_action>
	return list->head == list;
   37b94:	4a17      	ldr	r2, [pc, #92]	; (37bf4 <move_thread_to_end_of_prio_q+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37b96:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   37b9a:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37b9e:	42ab      	cmp	r3, r5
   37ba0:	d01b      	beq.n	37bda <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37ba2:	b1d3      	cbz	r3, 37bda <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
   37ba4:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   37ba8:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   37bac:	428e      	cmp	r6, r1
   37bae:	d00f      	beq.n	37bd0 <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
   37bb0:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   37bb2:	2900      	cmp	r1, #0
   37bb4:	dd0c      	ble.n	37bd0 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
   37bb6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   37bb8:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   37bbc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   37bbe:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   37bc0:	6890      	ldr	r0, [r2, #8]
   37bc2:	1b03      	subs	r3, r0, r4
   37bc4:	4258      	negs	r0, r3
   37bc6:	4158      	adcs	r0, r3
}
   37bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   37bcc:	f7ff bf94 	b.w	37af8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   37bd0:	4283      	cmp	r3, r0
   37bd2:	d002      	beq.n	37bda <move_thread_to_end_of_prio_q+0x82>
   37bd4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37bd6:	2b00      	cmp	r3, #0
   37bd8:	d1e6      	bne.n	37ba8 <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
   37bda:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   37bde:	6004      	str	r4, [r0, #0]
	list->tail = node;
   37be0:	6254      	str	r4, [r2, #36]	; 0x24
}
   37be2:	e7ed      	b.n	37bc0 <move_thread_to_end_of_prio_q+0x68>
   37be4:	2001a520 	.word	0x2001a520
   37be8:	20018e00 	.word	0x20018e00
   37bec:	0004bbf9 	.word	0x0004bbf9
   37bf0:	0004409e 	.word	0x0004409e
   37bf4:	2001a500 	.word	0x2001a500

00037bf8 <z_time_slice>:
{
   37bf8:	b570      	push	{r4, r5, r6, lr}
   37bfa:	4605      	mov	r5, r0
	__asm__ volatile(
   37bfc:	f04f 0320 	mov.w	r3, #32
   37c00:	f3ef 8611 	mrs	r6, BASEPRI
   37c04:	f383 8812 	msr	BASEPRI_MAX, r3
   37c08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37c0c:	4825      	ldr	r0, [pc, #148]	; (37ca4 <z_time_slice+0xac>)
   37c0e:	f7fe fce7 	bl	365e0 <z_spin_lock_valid>
   37c12:	b940      	cbnz	r0, 37c26 <z_time_slice+0x2e>
   37c14:	4924      	ldr	r1, [pc, #144]	; (37ca8 <z_time_slice+0xb0>)
   37c16:	4825      	ldr	r0, [pc, #148]	; (37cac <z_time_slice+0xb4>)
   37c18:	228e      	movs	r2, #142	; 0x8e
   37c1a:	f004 ff37 	bl	3ca8c <assert_print>
   37c1e:	218e      	movs	r1, #142	; 0x8e
   37c20:	4821      	ldr	r0, [pc, #132]	; (37ca8 <z_time_slice+0xb0>)
   37c22:	f004 ff2c 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   37c26:	481f      	ldr	r0, [pc, #124]	; (37ca4 <z_time_slice+0xac>)
   37c28:	f7fe fcf8 	bl	3661c <z_spin_lock_set_owner>
	if (pending_current == _current) {
   37c2c:	4b20      	ldr	r3, [pc, #128]	; (37cb0 <z_time_slice+0xb8>)
   37c2e:	4a21      	ldr	r2, [pc, #132]	; (37cb4 <z_time_slice+0xbc>)
   37c30:	689c      	ldr	r4, [r3, #8]
   37c32:	6811      	ldr	r1, [r2, #0]
   37c34:	428c      	cmp	r4, r1
   37c36:	d114      	bne.n	37c62 <z_time_slice+0x6a>
	z_reset_time_slice(curr);
   37c38:	4620      	mov	r0, r4
   37c3a:	f7ff fdbf 	bl	377bc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37c3e:	4819      	ldr	r0, [pc, #100]	; (37ca4 <z_time_slice+0xac>)
   37c40:	f7fe fcdc 	bl	365fc <z_spin_unlock_valid>
   37c44:	b940      	cbnz	r0, 37c58 <z_time_slice+0x60>
   37c46:	4918      	ldr	r1, [pc, #96]	; (37ca8 <z_time_slice+0xb0>)
   37c48:	4818      	ldr	r0, [pc, #96]	; (37cac <z_time_slice+0xb4>)
   37c4a:	22b9      	movs	r2, #185	; 0xb9
   37c4c:	f004 ff1e 	bl	3ca8c <assert_print>
   37c50:	21b9      	movs	r1, #185	; 0xb9
   37c52:	4815      	ldr	r0, [pc, #84]	; (37ca8 <z_time_slice+0xb0>)
   37c54:	f004 ff13 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   37c58:	f386 8811 	msr	BASEPRI, r6
   37c5c:	f3bf 8f6f 	isb	sy
}
   37c60:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   37c62:	2100      	movs	r1, #0
   37c64:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   37c66:	4a14      	ldr	r2, [pc, #80]	; (37cb8 <z_time_slice+0xc0>)
	if (slice_time(_current) && sliceable(_current)) {
   37c68:	6812      	ldr	r2, [r2, #0]
   37c6a:	b1c2      	cbz	r2, 37c9e <z_time_slice+0xa6>
		&& !z_is_idle_thread_object(thread);
   37c6c:	89e2      	ldrh	r2, [r4, #14]
   37c6e:	2a7f      	cmp	r2, #127	; 0x7f
   37c70:	d815      	bhi.n	37c9e <z_time_slice+0xa6>
		&& !z_is_thread_prevented_from_running(thread)
   37c72:	7b62      	ldrb	r2, [r4, #13]
   37c74:	06d2      	lsls	r2, r2, #27
   37c76:	d112      	bne.n	37c9e <z_time_slice+0xa6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   37c78:	4a10      	ldr	r2, [pc, #64]	; (37cbc <z_time_slice+0xc4>)
   37c7a:	f994 100e 	ldrsb.w	r1, [r4, #14]
   37c7e:	6812      	ldr	r2, [r2, #0]
   37c80:	4291      	cmp	r1, r2
   37c82:	db0c      	blt.n	37c9e <z_time_slice+0xa6>
	if (slice_time(_current) && sliceable(_current)) {
   37c84:	4a0e      	ldr	r2, [pc, #56]	; (37cc0 <z_time_slice+0xc8>)
   37c86:	4294      	cmp	r4, r2
   37c88:	d009      	beq.n	37c9e <z_time_slice+0xa6>
		if (ticks >= _current_cpu->slice_ticks) {
   37c8a:	691a      	ldr	r2, [r3, #16]
   37c8c:	42aa      	cmp	r2, r5
   37c8e:	dc03      	bgt.n	37c98 <z_time_slice+0xa0>
		move_thread_to_end_of_prio_q(curr);
   37c90:	4620      	mov	r0, r4
   37c92:	f7ff ff61 	bl	37b58 <move_thread_to_end_of_prio_q>
   37c96:	e7cf      	b.n	37c38 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   37c98:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   37c9a:	611a      	str	r2, [r3, #16]
   37c9c:	e7cf      	b.n	37c3e <z_time_slice+0x46>
   37c9e:	2200      	movs	r2, #0
   37ca0:	e7fb      	b.n	37c9a <z_time_slice+0xa2>
   37ca2:	bf00      	nop
   37ca4:	2001a544 	.word	0x2001a544
   37ca8:	000440d8 	.word	0x000440d8
   37cac:	0004409e 	.word	0x0004409e
   37cb0:	2001a500 	.word	0x2001a500
   37cb4:	2001a540 	.word	0x2001a540
   37cb8:	2001a54c 	.word	0x2001a54c
   37cbc:	2001a548 	.word	0x2001a548
   37cc0:	20018e00 	.word	0x20018e00

00037cc4 <ready_thread>:
{
   37cc4:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   37cc6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   37cca:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   37ccc:	2a00      	cmp	r2, #0
   37cce:	7b43      	ldrb	r3, [r0, #13]
   37cd0:	db38      	blt.n	37d44 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   37cd2:	06da      	lsls	r2, r3, #27
   37cd4:	d136      	bne.n	37d44 <ready_thread+0x80>
   37cd6:	6982      	ldr	r2, [r0, #24]
   37cd8:	2a00      	cmp	r2, #0
   37cda:	d133      	bne.n	37d44 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
   37cdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   37ce0:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37ce2:	4b19      	ldr	r3, [pc, #100]	; (37d48 <ready_thread+0x84>)
   37ce4:	4298      	cmp	r0, r3
   37ce6:	d108      	bne.n	37cfa <ready_thread+0x36>
   37ce8:	4918      	ldr	r1, [pc, #96]	; (37d4c <ready_thread+0x88>)
   37cea:	4819      	ldr	r0, [pc, #100]	; (37d50 <ready_thread+0x8c>)
   37cec:	22ba      	movs	r2, #186	; 0xba
   37cee:	f004 fecd 	bl	3ca8c <assert_print>
   37cf2:	21ba      	movs	r1, #186	; 0xba
   37cf4:	4815      	ldr	r0, [pc, #84]	; (37d4c <ready_thread+0x88>)
   37cf6:	f004 fec2 	bl	3ca7e <assert_post_action>
	return list->head == list;
   37cfa:	4a16      	ldr	r2, [pc, #88]	; (37d54 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37cfc:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   37d00:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37d04:	42ab      	cmp	r3, r5
   37d06:	d018      	beq.n	37d3a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37d08:	b1bb      	cbz	r3, 37d3a <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
   37d0a:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   37d0e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   37d12:	428e      	cmp	r6, r1
   37d14:	d00c      	beq.n	37d30 <ready_thread+0x6c>
		return b2 - b1;
   37d16:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   37d18:	2900      	cmp	r1, #0
   37d1a:	dd09      	ble.n	37d30 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
   37d1c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   37d1e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   37d22:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   37d24:	605c      	str	r4, [r3, #4]
		update_cache(0);
   37d26:	2000      	movs	r0, #0
}
   37d28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   37d2c:	f7ff bee4 	b.w	37af8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   37d30:	4298      	cmp	r0, r3
   37d32:	d002      	beq.n	37d3a <ready_thread+0x76>
   37d34:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37d36:	2b00      	cmp	r3, #0
   37d38:	d1e9      	bne.n	37d0e <ready_thread+0x4a>
	node->prev = tail;
   37d3a:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   37d3e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   37d40:	6254      	str	r4, [r2, #36]	; 0x24
}
   37d42:	e7f0      	b.n	37d26 <ready_thread+0x62>
}
   37d44:	bd70      	pop	{r4, r5, r6, pc}
   37d46:	bf00      	nop
   37d48:	20018e00 	.word	0x20018e00
   37d4c:	0004bbf9 	.word	0x0004bbf9
   37d50:	0004409e 	.word	0x0004409e
   37d54:	2001a500 	.word	0x2001a500

00037d58 <z_ready_thread>:
{
   37d58:	b538      	push	{r3, r4, r5, lr}
   37d5a:	4604      	mov	r4, r0
	__asm__ volatile(
   37d5c:	f04f 0320 	mov.w	r3, #32
   37d60:	f3ef 8511 	mrs	r5, BASEPRI
   37d64:	f383 8812 	msr	BASEPRI_MAX, r3
   37d68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37d6c:	4812      	ldr	r0, [pc, #72]	; (37db8 <z_ready_thread+0x60>)
   37d6e:	f7fe fc37 	bl	365e0 <z_spin_lock_valid>
   37d72:	b940      	cbnz	r0, 37d86 <z_ready_thread+0x2e>
   37d74:	4911      	ldr	r1, [pc, #68]	; (37dbc <z_ready_thread+0x64>)
   37d76:	4812      	ldr	r0, [pc, #72]	; (37dc0 <z_ready_thread+0x68>)
   37d78:	228e      	movs	r2, #142	; 0x8e
   37d7a:	f004 fe87 	bl	3ca8c <assert_print>
   37d7e:	218e      	movs	r1, #142	; 0x8e
   37d80:	480e      	ldr	r0, [pc, #56]	; (37dbc <z_ready_thread+0x64>)
   37d82:	f004 fe7c 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   37d86:	480c      	ldr	r0, [pc, #48]	; (37db8 <z_ready_thread+0x60>)
   37d88:	f7fe fc48 	bl	3661c <z_spin_lock_set_owner>
			ready_thread(thread);
   37d8c:	4620      	mov	r0, r4
   37d8e:	f7ff ff99 	bl	37cc4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37d92:	4809      	ldr	r0, [pc, #36]	; (37db8 <z_ready_thread+0x60>)
   37d94:	f7fe fc32 	bl	365fc <z_spin_unlock_valid>
   37d98:	b940      	cbnz	r0, 37dac <z_ready_thread+0x54>
   37d9a:	4908      	ldr	r1, [pc, #32]	; (37dbc <z_ready_thread+0x64>)
   37d9c:	4808      	ldr	r0, [pc, #32]	; (37dc0 <z_ready_thread+0x68>)
   37d9e:	22b9      	movs	r2, #185	; 0xb9
   37da0:	f004 fe74 	bl	3ca8c <assert_print>
   37da4:	21b9      	movs	r1, #185	; 0xb9
   37da6:	4805      	ldr	r0, [pc, #20]	; (37dbc <z_ready_thread+0x64>)
   37da8:	f004 fe69 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   37dac:	f385 8811 	msr	BASEPRI, r5
   37db0:	f3bf 8f6f 	isb	sy
}
   37db4:	bd38      	pop	{r3, r4, r5, pc}
   37db6:	bf00      	nop
   37db8:	2001a544 	.word	0x2001a544
   37dbc:	000440d8 	.word	0x000440d8
   37dc0:	0004409e 	.word	0x0004409e

00037dc4 <z_sched_start>:
{
   37dc4:	b538      	push	{r3, r4, r5, lr}
   37dc6:	4604      	mov	r4, r0
	__asm__ volatile(
   37dc8:	f04f 0320 	mov.w	r3, #32
   37dcc:	f3ef 8511 	mrs	r5, BASEPRI
   37dd0:	f383 8812 	msr	BASEPRI_MAX, r3
   37dd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37dd8:	4818      	ldr	r0, [pc, #96]	; (37e3c <z_sched_start+0x78>)
   37dda:	f7fe fc01 	bl	365e0 <z_spin_lock_valid>
   37dde:	b940      	cbnz	r0, 37df2 <z_sched_start+0x2e>
   37de0:	4917      	ldr	r1, [pc, #92]	; (37e40 <z_sched_start+0x7c>)
   37de2:	4818      	ldr	r0, [pc, #96]	; (37e44 <z_sched_start+0x80>)
   37de4:	228e      	movs	r2, #142	; 0x8e
   37de6:	f004 fe51 	bl	3ca8c <assert_print>
   37dea:	218e      	movs	r1, #142	; 0x8e
   37dec:	4814      	ldr	r0, [pc, #80]	; (37e40 <z_sched_start+0x7c>)
   37dee:	f004 fe46 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   37df2:	4812      	ldr	r0, [pc, #72]	; (37e3c <z_sched_start+0x78>)
   37df4:	f7fe fc12 	bl	3661c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   37df8:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   37dfa:	075a      	lsls	r2, r3, #29
   37dfc:	d411      	bmi.n	37e22 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37dfe:	480f      	ldr	r0, [pc, #60]	; (37e3c <z_sched_start+0x78>)
   37e00:	f7fe fbfc 	bl	365fc <z_spin_unlock_valid>
   37e04:	b940      	cbnz	r0, 37e18 <z_sched_start+0x54>
   37e06:	490e      	ldr	r1, [pc, #56]	; (37e40 <z_sched_start+0x7c>)
   37e08:	480e      	ldr	r0, [pc, #56]	; (37e44 <z_sched_start+0x80>)
   37e0a:	22b9      	movs	r2, #185	; 0xb9
   37e0c:	f004 fe3e 	bl	3ca8c <assert_print>
   37e10:	21b9      	movs	r1, #185	; 0xb9
   37e12:	480b      	ldr	r0, [pc, #44]	; (37e40 <z_sched_start+0x7c>)
   37e14:	f004 fe33 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   37e18:	f385 8811 	msr	BASEPRI, r5
   37e1c:	f3bf 8f6f 	isb	sy
}
   37e20:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   37e22:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   37e26:	4620      	mov	r0, r4
   37e28:	7363      	strb	r3, [r4, #13]
   37e2a:	f7ff ff4b 	bl	37cc4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   37e2e:	4629      	mov	r1, r5
}
   37e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   37e34:	4801      	ldr	r0, [pc, #4]	; (37e3c <z_sched_start+0x78>)
   37e36:	f7ff bd5f 	b.w	378f8 <z_reschedule>
   37e3a:	bf00      	nop
   37e3c:	2001a544 	.word	0x2001a544
   37e40:	000440d8 	.word	0x000440d8
   37e44:	0004409e 	.word	0x0004409e

00037e48 <z_impl_k_thread_resume>:
{
   37e48:	b538      	push	{r3, r4, r5, lr}
   37e4a:	4604      	mov	r4, r0
	__asm__ volatile(
   37e4c:	f04f 0320 	mov.w	r3, #32
   37e50:	f3ef 8511 	mrs	r5, BASEPRI
   37e54:	f383 8812 	msr	BASEPRI_MAX, r3
   37e58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37e5c:	4818      	ldr	r0, [pc, #96]	; (37ec0 <z_impl_k_thread_resume+0x78>)
   37e5e:	f7fe fbbf 	bl	365e0 <z_spin_lock_valid>
   37e62:	b940      	cbnz	r0, 37e76 <z_impl_k_thread_resume+0x2e>
   37e64:	4917      	ldr	r1, [pc, #92]	; (37ec4 <z_impl_k_thread_resume+0x7c>)
   37e66:	4818      	ldr	r0, [pc, #96]	; (37ec8 <z_impl_k_thread_resume+0x80>)
   37e68:	228e      	movs	r2, #142	; 0x8e
   37e6a:	f004 fe0f 	bl	3ca8c <assert_print>
   37e6e:	218e      	movs	r1, #142	; 0x8e
   37e70:	4814      	ldr	r0, [pc, #80]	; (37ec4 <z_impl_k_thread_resume+0x7c>)
   37e72:	f004 fe04 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   37e76:	4812      	ldr	r0, [pc, #72]	; (37ec0 <z_impl_k_thread_resume+0x78>)
   37e78:	f7fe fbd0 	bl	3661c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_SUSPENDED) != 0U;
   37e7c:	7b63      	ldrb	r3, [r4, #13]
	if (!z_is_thread_suspended(thread)) {
   37e7e:	06da      	lsls	r2, r3, #27
   37e80:	d411      	bmi.n	37ea6 <z_impl_k_thread_resume+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37e82:	480f      	ldr	r0, [pc, #60]	; (37ec0 <z_impl_k_thread_resume+0x78>)
   37e84:	f7fe fbba 	bl	365fc <z_spin_unlock_valid>
   37e88:	b940      	cbnz	r0, 37e9c <z_impl_k_thread_resume+0x54>
   37e8a:	490e      	ldr	r1, [pc, #56]	; (37ec4 <z_impl_k_thread_resume+0x7c>)
   37e8c:	480e      	ldr	r0, [pc, #56]	; (37ec8 <z_impl_k_thread_resume+0x80>)
   37e8e:	22b9      	movs	r2, #185	; 0xb9
   37e90:	f004 fdfc 	bl	3ca8c <assert_print>
   37e94:	21b9      	movs	r1, #185	; 0xb9
   37e96:	480b      	ldr	r0, [pc, #44]	; (37ec4 <z_impl_k_thread_resume+0x7c>)
   37e98:	f004 fdf1 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   37e9c:	f385 8811 	msr	BASEPRI, r5
   37ea0:	f3bf 8f6f 	isb	sy
}
   37ea4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   37ea6:	f023 0310 	bic.w	r3, r3, #16
	ready_thread(thread);
   37eaa:	4620      	mov	r0, r4
   37eac:	7363      	strb	r3, [r4, #13]
   37eae:	f7ff ff09 	bl	37cc4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   37eb2:	4629      	mov	r1, r5
}
   37eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   37eb8:	4801      	ldr	r0, [pc, #4]	; (37ec0 <z_impl_k_thread_resume+0x78>)
   37eba:	f7ff bd1d 	b.w	378f8 <z_reschedule>
   37ebe:	bf00      	nop
   37ec0:	2001a544 	.word	0x2001a544
   37ec4:	000440d8 	.word	0x000440d8
   37ec8:	0004409e 	.word	0x0004409e

00037ecc <z_thread_timeout>:
{
   37ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   37ece:	4604      	mov	r4, r0
	__asm__ volatile(
   37ed0:	f04f 0320 	mov.w	r3, #32
   37ed4:	f3ef 8511 	mrs	r5, BASEPRI
   37ed8:	f383 8812 	msr	BASEPRI_MAX, r3
   37edc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37ee0:	481c      	ldr	r0, [pc, #112]	; (37f54 <z_thread_timeout+0x88>)
   37ee2:	f7fe fb7d 	bl	365e0 <z_spin_lock_valid>
   37ee6:	b940      	cbnz	r0, 37efa <z_thread_timeout+0x2e>
   37ee8:	491b      	ldr	r1, [pc, #108]	; (37f58 <z_thread_timeout+0x8c>)
   37eea:	481c      	ldr	r0, [pc, #112]	; (37f5c <z_thread_timeout+0x90>)
   37eec:	228e      	movs	r2, #142	; 0x8e
   37eee:	f004 fdcd 	bl	3ca8c <assert_print>
   37ef2:	218e      	movs	r1, #142	; 0x8e
   37ef4:	4818      	ldr	r0, [pc, #96]	; (37f58 <z_thread_timeout+0x8c>)
   37ef6:	f004 fdc2 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   37efa:	4816      	ldr	r0, [pc, #88]	; (37f54 <z_thread_timeout+0x88>)
   37efc:	f7fe fb8e 	bl	3661c <z_spin_lock_set_owner>
		if (!killed) {
   37f00:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   37f04:	f013 0f28 	tst.w	r3, #40	; 0x28
   37f08:	d110      	bne.n	37f2c <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   37f0a:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   37f0e:	f1a4 0018 	sub.w	r0, r4, #24
			if (thread->base.pended_on != NULL) {
   37f12:	b11b      	cbz	r3, 37f1c <z_thread_timeout+0x50>
				unpend_thread_no_timeout(thread);
   37f14:	9001      	str	r0, [sp, #4]
   37f16:	f7ff fd97 	bl	37a48 <unpend_thread_no_timeout>
   37f1a:	9801      	ldr	r0, [sp, #4]
   37f1c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   37f20:	f023 0314 	bic.w	r3, r3, #20
   37f24:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   37f28:	f7ff fecc 	bl	37cc4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37f2c:	4809      	ldr	r0, [pc, #36]	; (37f54 <z_thread_timeout+0x88>)
   37f2e:	f7fe fb65 	bl	365fc <z_spin_unlock_valid>
   37f32:	b940      	cbnz	r0, 37f46 <z_thread_timeout+0x7a>
   37f34:	4908      	ldr	r1, [pc, #32]	; (37f58 <z_thread_timeout+0x8c>)
   37f36:	4809      	ldr	r0, [pc, #36]	; (37f5c <z_thread_timeout+0x90>)
   37f38:	22b9      	movs	r2, #185	; 0xb9
   37f3a:	f004 fda7 	bl	3ca8c <assert_print>
   37f3e:	21b9      	movs	r1, #185	; 0xb9
   37f40:	4805      	ldr	r0, [pc, #20]	; (37f58 <z_thread_timeout+0x8c>)
   37f42:	f004 fd9c 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   37f46:	f385 8811 	msr	BASEPRI, r5
   37f4a:	f3bf 8f6f 	isb	sy
}
   37f4e:	b003      	add	sp, #12
   37f50:	bd30      	pop	{r4, r5, pc}
   37f52:	bf00      	nop
   37f54:	2001a544 	.word	0x2001a544
   37f58:	000440d8 	.word	0x000440d8
   37f5c:	0004409e 	.word	0x0004409e

00037f60 <unready_thread>:
{
   37f60:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   37f62:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   37f66:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   37f68:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   37f6a:	7b43      	ldrb	r3, [r0, #13]
   37f6c:	da06      	bge.n	37f7c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   37f72:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37f74:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   37f76:	4806      	ldr	r0, [pc, #24]	; (37f90 <unready_thread+0x30>)
   37f78:	f7ff fd48 	bl	37a0c <z_priq_dumb_remove>
	update_cache(thread == _current);
   37f7c:	4b05      	ldr	r3, [pc, #20]	; (37f94 <unready_thread+0x34>)
   37f7e:	6898      	ldr	r0, [r3, #8]
   37f80:	1b03      	subs	r3, r0, r4
   37f82:	4258      	negs	r0, r3
   37f84:	4158      	adcs	r0, r3
}
   37f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   37f8a:	f7ff bdb5 	b.w	37af8 <update_cache>
   37f8e:	bf00      	nop
   37f90:	2001a520 	.word	0x2001a520
   37f94:	2001a500 	.word	0x2001a500

00037f98 <add_to_waitq_locked>:
{
   37f98:	b538      	push	{r3, r4, r5, lr}
   37f9a:	4604      	mov	r4, r0
   37f9c:	460d      	mov	r5, r1
	unready_thread(thread);
   37f9e:	f7ff ffdf 	bl	37f60 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   37fa2:	7b63      	ldrb	r3, [r4, #13]
   37fa4:	f043 0302 	orr.w	r3, r3, #2
   37fa8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   37faa:	b1f5      	cbz	r5, 37fea <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37fac:	4b15      	ldr	r3, [pc, #84]	; (38004 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   37fae:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37fb0:	429c      	cmp	r4, r3
   37fb2:	d108      	bne.n	37fc6 <add_to_waitq_locked+0x2e>
   37fb4:	4914      	ldr	r1, [pc, #80]	; (38008 <add_to_waitq_locked+0x70>)
   37fb6:	4815      	ldr	r0, [pc, #84]	; (3800c <add_to_waitq_locked+0x74>)
   37fb8:	22ba      	movs	r2, #186	; 0xba
   37fba:	f004 fd67 	bl	3ca8c <assert_print>
   37fbe:	21ba      	movs	r1, #186	; 0xba
   37fc0:	4811      	ldr	r0, [pc, #68]	; (38008 <add_to_waitq_locked+0x70>)
   37fc2:	f004 fd5c 	bl	3ca7e <assert_post_action>
	return list->head == list;
   37fc6:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37fc8:	429d      	cmp	r5, r3
   37fca:	d015      	beq.n	37ff8 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37fcc:	b1a3      	cbz	r3, 37ff8 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
   37fce:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   37fd2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   37fd6:	4291      	cmp	r1, r2
   37fd8:	d008      	beq.n	37fec <add_to_waitq_locked+0x54>
		return b2 - b1;
   37fda:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   37fdc:	2a00      	cmp	r2, #0
   37fde:	dd05      	ble.n	37fec <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
   37fe0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   37fe2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   37fe6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   37fe8:	605c      	str	r4, [r3, #4]
}
   37fea:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   37fec:	686a      	ldr	r2, [r5, #4]
   37fee:	4293      	cmp	r3, r2
   37ff0:	d002      	beq.n	37ff8 <add_to_waitq_locked+0x60>
   37ff2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37ff4:	2b00      	cmp	r3, #0
   37ff6:	d1ec      	bne.n	37fd2 <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
   37ff8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   37ffa:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   37ffe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   38000:	606c      	str	r4, [r5, #4]
}
   38002:	e7f2      	b.n	37fea <add_to_waitq_locked+0x52>
   38004:	20018e00 	.word	0x20018e00
   38008:	0004bbf9 	.word	0x0004bbf9
   3800c:	0004409e 	.word	0x0004409e

00038010 <pend>:
{
   38010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38014:	4604      	mov	r4, r0
   38016:	4688      	mov	r8, r1
   38018:	4616      	mov	r6, r2
   3801a:	461d      	mov	r5, r3
	__asm__ volatile(
   3801c:	f04f 0320 	mov.w	r3, #32
   38020:	f3ef 8711 	mrs	r7, BASEPRI
   38024:	f383 8812 	msr	BASEPRI_MAX, r3
   38028:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3802c:	481a      	ldr	r0, [pc, #104]	; (38098 <pend+0x88>)
   3802e:	f7fe fad7 	bl	365e0 <z_spin_lock_valid>
   38032:	b940      	cbnz	r0, 38046 <pend+0x36>
   38034:	4919      	ldr	r1, [pc, #100]	; (3809c <pend+0x8c>)
   38036:	481a      	ldr	r0, [pc, #104]	; (380a0 <pend+0x90>)
   38038:	228e      	movs	r2, #142	; 0x8e
   3803a:	f004 fd27 	bl	3ca8c <assert_print>
   3803e:	218e      	movs	r1, #142	; 0x8e
   38040:	4816      	ldr	r0, [pc, #88]	; (3809c <pend+0x8c>)
   38042:	f004 fd1c 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   38046:	4814      	ldr	r0, [pc, #80]	; (38098 <pend+0x88>)
   38048:	f7fe fae8 	bl	3661c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   3804c:	4620      	mov	r0, r4
   3804e:	4641      	mov	r1, r8
   38050:	f7ff ffa2 	bl	37f98 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38054:	4810      	ldr	r0, [pc, #64]	; (38098 <pend+0x88>)
   38056:	f7fe fad1 	bl	365fc <z_spin_unlock_valid>
   3805a:	b940      	cbnz	r0, 3806e <pend+0x5e>
   3805c:	490f      	ldr	r1, [pc, #60]	; (3809c <pend+0x8c>)
   3805e:	4810      	ldr	r0, [pc, #64]	; (380a0 <pend+0x90>)
   38060:	22b9      	movs	r2, #185	; 0xb9
   38062:	f004 fd13 	bl	3ca8c <assert_print>
   38066:	21b9      	movs	r1, #185	; 0xb9
   38068:	480c      	ldr	r0, [pc, #48]	; (3809c <pend+0x8c>)
   3806a:	f004 fd08 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   3806e:	f387 8811 	msr	BASEPRI, r7
   38072:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38076:	f1b5 3fff 	cmp.w	r5, #4294967295
   3807a:	bf08      	it	eq
   3807c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   38080:	d008      	beq.n	38094 <pend+0x84>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   38082:	4632      	mov	r2, r6
   38084:	462b      	mov	r3, r5
   38086:	f104 0018 	add.w	r0, r4, #24
   3808a:	4906      	ldr	r1, [pc, #24]	; (380a4 <pend+0x94>)
}
   3808c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   38090:	f000 bc6c 	b.w	3896c <z_add_timeout>
   38094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38098:	2001a544 	.word	0x2001a544
   3809c:	000440d8 	.word	0x000440d8
   380a0:	0004409e 	.word	0x0004409e
   380a4:	00037ecd 	.word	0x00037ecd

000380a8 <z_pend_curr>:
{
   380a8:	b538      	push	{r3, r4, r5, lr}
   380aa:	4605      	mov	r5, r0
	pending_current = _current;
   380ac:	4b0d      	ldr	r3, [pc, #52]	; (380e4 <z_pend_curr+0x3c>)
{
   380ae:	460c      	mov	r4, r1
	pending_current = _current;
   380b0:	6898      	ldr	r0, [r3, #8]
   380b2:	4b0d      	ldr	r3, [pc, #52]	; (380e8 <z_pend_curr+0x40>)
{
   380b4:	4611      	mov	r1, r2
	pending_current = _current;
   380b6:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   380b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   380bc:	f7ff ffa8 	bl	38010 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   380c0:	4628      	mov	r0, r5
   380c2:	f7fe fa9b 	bl	365fc <z_spin_unlock_valid>
   380c6:	b940      	cbnz	r0, 380da <z_pend_curr+0x32>
   380c8:	4908      	ldr	r1, [pc, #32]	; (380ec <z_pend_curr+0x44>)
   380ca:	4809      	ldr	r0, [pc, #36]	; (380f0 <z_pend_curr+0x48>)
   380cc:	22d0      	movs	r2, #208	; 0xd0
   380ce:	f004 fcdd 	bl	3ca8c <assert_print>
   380d2:	21d0      	movs	r1, #208	; 0xd0
   380d4:	4805      	ldr	r0, [pc, #20]	; (380ec <z_pend_curr+0x44>)
   380d6:	f004 fcd2 	bl	3ca7e <assert_post_action>
   380da:	4620      	mov	r0, r4
}
   380dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   380e0:	f7ea bdd0 	b.w	22c84 <arch_swap>
   380e4:	2001a500 	.word	0x2001a500
   380e8:	2001a540 	.word	0x2001a540
   380ec:	000440d8 	.word	0x000440d8
   380f0:	0004409e 	.word	0x0004409e

000380f4 <z_set_prio>:
{
   380f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   380f6:	4604      	mov	r4, r0
   380f8:	460d      	mov	r5, r1
	__asm__ volatile(
   380fa:	f04f 0320 	mov.w	r3, #32
   380fe:	f3ef 8611 	mrs	r6, BASEPRI
   38102:	f383 8812 	msr	BASEPRI_MAX, r3
   38106:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3810a:	4834      	ldr	r0, [pc, #208]	; (381dc <z_set_prio+0xe8>)
   3810c:	f7fe fa68 	bl	365e0 <z_spin_lock_valid>
   38110:	b940      	cbnz	r0, 38124 <z_set_prio+0x30>
   38112:	4933      	ldr	r1, [pc, #204]	; (381e0 <z_set_prio+0xec>)
   38114:	4833      	ldr	r0, [pc, #204]	; (381e4 <z_set_prio+0xf0>)
   38116:	228e      	movs	r2, #142	; 0x8e
   38118:	f004 fcb8 	bl	3ca8c <assert_print>
   3811c:	218e      	movs	r1, #142	; 0x8e
   3811e:	4830      	ldr	r0, [pc, #192]	; (381e0 <z_set_prio+0xec>)
   38120:	f004 fcad 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   38124:	482d      	ldr	r0, [pc, #180]	; (381dc <z_set_prio+0xe8>)
   38126:	f7fe fa79 	bl	3661c <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   3812a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   3812c:	b26d      	sxtb	r5, r5
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3812e:	06da      	lsls	r2, r3, #27
   38130:	d151      	bne.n	381d6 <z_set_prio+0xe2>
		if (need_sched) {
   38132:	69a2      	ldr	r2, [r4, #24]
   38134:	2a00      	cmp	r2, #0
   38136:	d14e      	bne.n	381d6 <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3813c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   3813e:	4621      	mov	r1, r4
   38140:	4829      	ldr	r0, [pc, #164]	; (381e8 <z_set_prio+0xf4>)
   38142:	f7ff fc63 	bl	37a0c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   38146:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   38148:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   3814a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3814e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38150:	4b26      	ldr	r3, [pc, #152]	; (381ec <z_set_prio+0xf8>)
   38152:	429c      	cmp	r4, r3
   38154:	d108      	bne.n	38168 <z_set_prio+0x74>
   38156:	4926      	ldr	r1, [pc, #152]	; (381f0 <z_set_prio+0xfc>)
   38158:	4822      	ldr	r0, [pc, #136]	; (381e4 <z_set_prio+0xf0>)
   3815a:	22ba      	movs	r2, #186	; 0xba
   3815c:	f004 fc96 	bl	3ca8c <assert_print>
   38160:	21ba      	movs	r1, #186	; 0xba
   38162:	4823      	ldr	r0, [pc, #140]	; (381f0 <z_set_prio+0xfc>)
   38164:	f004 fc8b 	bl	3ca7e <assert_post_action>
	return list->head == list;
   38168:	4a22      	ldr	r2, [pc, #136]	; (381f4 <z_set_prio+0x100>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3816a:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   3816e:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38172:	42ab      	cmp	r3, r5
   38174:	d02a      	beq.n	381cc <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38176:	b34b      	cbz	r3, 381cc <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
   38178:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   3817c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   38180:	428f      	cmp	r7, r1
   38182:	d01e      	beq.n	381c2 <z_set_prio+0xce>
		return b2 - b1;
   38184:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   38186:	2900      	cmp	r1, #0
   38188:	dd1b      	ble.n	381c2 <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
   3818a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3818c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   38190:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   38192:	605c      	str	r4, [r3, #4]
			update_cache(1);
   38194:	2001      	movs	r0, #1
   38196:	f7ff fcaf 	bl	37af8 <update_cache>
   3819a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3819c:	480f      	ldr	r0, [pc, #60]	; (381dc <z_set_prio+0xe8>)
   3819e:	f7fe fa2d 	bl	365fc <z_spin_unlock_valid>
   381a2:	b940      	cbnz	r0, 381b6 <z_set_prio+0xc2>
   381a4:	490e      	ldr	r1, [pc, #56]	; (381e0 <z_set_prio+0xec>)
   381a6:	480f      	ldr	r0, [pc, #60]	; (381e4 <z_set_prio+0xf0>)
   381a8:	22b9      	movs	r2, #185	; 0xb9
   381aa:	f004 fc6f 	bl	3ca8c <assert_print>
   381ae:	21b9      	movs	r1, #185	; 0xb9
   381b0:	480b      	ldr	r0, [pc, #44]	; (381e0 <z_set_prio+0xec>)
   381b2:	f004 fc64 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   381b6:	f386 8811 	msr	BASEPRI, r6
   381ba:	f3bf 8f6f 	isb	sy
}
   381be:	4620      	mov	r0, r4
   381c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   381c2:	4283      	cmp	r3, r0
   381c4:	d002      	beq.n	381cc <z_set_prio+0xd8>
   381c6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   381c8:	2b00      	cmp	r3, #0
   381ca:	d1d7      	bne.n	3817c <z_set_prio+0x88>
	node->prev = tail;
   381cc:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   381d0:	6004      	str	r4, [r0, #0]
	list->tail = node;
   381d2:	6254      	str	r4, [r2, #36]	; 0x24
}
   381d4:	e7de      	b.n	38194 <z_set_prio+0xa0>
			thread->base.prio = prio;
   381d6:	73a5      	strb	r5, [r4, #14]
   381d8:	2400      	movs	r4, #0
   381da:	e7df      	b.n	3819c <z_set_prio+0xa8>
   381dc:	2001a544 	.word	0x2001a544
   381e0:	000440d8 	.word	0x000440d8
   381e4:	0004409e 	.word	0x0004409e
   381e8:	2001a520 	.word	0x2001a520
   381ec:	20018e00 	.word	0x20018e00
   381f0:	0004bbf9 	.word	0x0004bbf9
   381f4:	2001a500 	.word	0x2001a500

000381f8 <z_impl_k_thread_suspend>:
{
   381f8:	b570      	push	{r4, r5, r6, lr}
   381fa:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   381fc:	3018      	adds	r0, #24
   381fe:	f000 fc63 	bl	38ac8 <z_abort_timeout>
	__asm__ volatile(
   38202:	f04f 0320 	mov.w	r3, #32
   38206:	f3ef 8611 	mrs	r6, BASEPRI
   3820a:	f383 8812 	msr	BASEPRI_MAX, r3
   3820e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38212:	4820      	ldr	r0, [pc, #128]	; (38294 <z_impl_k_thread_suspend+0x9c>)
   38214:	f7fe f9e4 	bl	365e0 <z_spin_lock_valid>
   38218:	b940      	cbnz	r0, 3822c <z_impl_k_thread_suspend+0x34>
   3821a:	491f      	ldr	r1, [pc, #124]	; (38298 <z_impl_k_thread_suspend+0xa0>)
   3821c:	481f      	ldr	r0, [pc, #124]	; (3829c <z_impl_k_thread_suspend+0xa4>)
   3821e:	228e      	movs	r2, #142	; 0x8e
   38220:	f004 fc34 	bl	3ca8c <assert_print>
   38224:	218e      	movs	r1, #142	; 0x8e
   38226:	481c      	ldr	r0, [pc, #112]	; (38298 <z_impl_k_thread_suspend+0xa0>)
   38228:	f004 fc29 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   3822c:	4819      	ldr	r0, [pc, #100]	; (38294 <z_impl_k_thread_suspend+0x9c>)
   3822e:	f7fe f9f5 	bl	3661c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   38232:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   38236:	7b63      	ldrb	r3, [r4, #13]
   38238:	2a00      	cmp	r2, #0
   3823a:	da06      	bge.n	3824a <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3823c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   38240:	4621      	mov	r1, r4
   38242:	4817      	ldr	r0, [pc, #92]	; (382a0 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38244:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   38246:	f7ff fbe1 	bl	37a0c <z_priq_dumb_remove>
		update_cache(thread == _current);
   3824a:	4d16      	ldr	r5, [pc, #88]	; (382a4 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3824c:	7b63      	ldrb	r3, [r4, #13]
   3824e:	68a8      	ldr	r0, [r5, #8]
   38250:	f043 0310 	orr.w	r3, r3, #16
   38254:	7363      	strb	r3, [r4, #13]
   38256:	1b03      	subs	r3, r0, r4
   38258:	4258      	negs	r0, r3
   3825a:	4158      	adcs	r0, r3
   3825c:	f7ff fc4c 	bl	37af8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38260:	480c      	ldr	r0, [pc, #48]	; (38294 <z_impl_k_thread_suspend+0x9c>)
   38262:	f7fe f9cb 	bl	365fc <z_spin_unlock_valid>
   38266:	b940      	cbnz	r0, 3827a <z_impl_k_thread_suspend+0x82>
   38268:	490b      	ldr	r1, [pc, #44]	; (38298 <z_impl_k_thread_suspend+0xa0>)
   3826a:	480c      	ldr	r0, [pc, #48]	; (3829c <z_impl_k_thread_suspend+0xa4>)
   3826c:	22b9      	movs	r2, #185	; 0xb9
   3826e:	f004 fc0d 	bl	3ca8c <assert_print>
   38272:	21b9      	movs	r1, #185	; 0xb9
   38274:	4808      	ldr	r0, [pc, #32]	; (38298 <z_impl_k_thread_suspend+0xa0>)
   38276:	f004 fc02 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   3827a:	f386 8811 	msr	BASEPRI, r6
   3827e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   38282:	68ab      	ldr	r3, [r5, #8]
   38284:	42a3      	cmp	r3, r4
   38286:	d103      	bne.n	38290 <z_impl_k_thread_suspend+0x98>
}
   38288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   3828c:	f008 bf1e 	b.w	410cc <z_reschedule_unlocked>
}
   38290:	bd70      	pop	{r4, r5, r6, pc}
   38292:	bf00      	nop
   38294:	2001a544 	.word	0x2001a544
   38298:	000440d8 	.word	0x000440d8
   3829c:	0004409e 	.word	0x0004409e
   382a0:	2001a520 	.word	0x2001a520
   382a4:	2001a500 	.word	0x2001a500

000382a8 <k_sched_unlock>:
{
   382a8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   382aa:	f04f 0320 	mov.w	r3, #32
   382ae:	f3ef 8511 	mrs	r5, BASEPRI
   382b2:	f383 8812 	msr	BASEPRI_MAX, r3
   382b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   382ba:	4824      	ldr	r0, [pc, #144]	; (3834c <k_sched_unlock+0xa4>)
   382bc:	f7fe f990 	bl	365e0 <z_spin_lock_valid>
   382c0:	b940      	cbnz	r0, 382d4 <k_sched_unlock+0x2c>
   382c2:	4923      	ldr	r1, [pc, #140]	; (38350 <k_sched_unlock+0xa8>)
   382c4:	4823      	ldr	r0, [pc, #140]	; (38354 <k_sched_unlock+0xac>)
   382c6:	228e      	movs	r2, #142	; 0x8e
   382c8:	f004 fbe0 	bl	3ca8c <assert_print>
   382cc:	218e      	movs	r1, #142	; 0x8e
   382ce:	4820      	ldr	r0, [pc, #128]	; (38350 <k_sched_unlock+0xa8>)
   382d0:	f004 fbd5 	bl	3ca7e <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   382d4:	4c20      	ldr	r4, [pc, #128]	; (38358 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   382d6:	481d      	ldr	r0, [pc, #116]	; (3834c <k_sched_unlock+0xa4>)
   382d8:	f7fe f9a0 	bl	3661c <z_spin_lock_set_owner>
   382dc:	68a3      	ldr	r3, [r4, #8]
   382de:	7bdb      	ldrb	r3, [r3, #15]
   382e0:	b953      	cbnz	r3, 382f8 <k_sched_unlock+0x50>
   382e2:	491e      	ldr	r1, [pc, #120]	; (3835c <k_sched_unlock+0xb4>)
   382e4:	481b      	ldr	r0, [pc, #108]	; (38354 <k_sched_unlock+0xac>)
   382e6:	f240 32bb 	movw	r2, #955	; 0x3bb
   382ea:	f004 fbcf 	bl	3ca8c <assert_print>
   382ee:	f240 31bb 	movw	r1, #955	; 0x3bb
   382f2:	481a      	ldr	r0, [pc, #104]	; (3835c <k_sched_unlock+0xb4>)
   382f4:	f004 fbc3 	bl	3ca7e <assert_post_action>
   382f8:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   382fc:	b153      	cbz	r3, 38314 <k_sched_unlock+0x6c>
   382fe:	4917      	ldr	r1, [pc, #92]	; (3835c <k_sched_unlock+0xb4>)
   38300:	4814      	ldr	r0, [pc, #80]	; (38354 <k_sched_unlock+0xac>)
   38302:	f44f 726f 	mov.w	r2, #956	; 0x3bc
   38306:	f004 fbc1 	bl	3ca8c <assert_print>
   3830a:	f44f 716f 	mov.w	r1, #956	; 0x3bc
   3830e:	4813      	ldr	r0, [pc, #76]	; (3835c <k_sched_unlock+0xb4>)
   38310:	f004 fbb5 	bl	3ca7e <assert_post_action>
		++_current->base.sched_locked;
   38314:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   38316:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   38318:	7bd3      	ldrb	r3, [r2, #15]
   3831a:	3301      	adds	r3, #1
   3831c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   3831e:	f7ff fbeb 	bl	37af8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38322:	480a      	ldr	r0, [pc, #40]	; (3834c <k_sched_unlock+0xa4>)
   38324:	f7fe f96a 	bl	365fc <z_spin_unlock_valid>
   38328:	b940      	cbnz	r0, 3833c <k_sched_unlock+0x94>
   3832a:	4909      	ldr	r1, [pc, #36]	; (38350 <k_sched_unlock+0xa8>)
   3832c:	4809      	ldr	r0, [pc, #36]	; (38354 <k_sched_unlock+0xac>)
   3832e:	22b9      	movs	r2, #185	; 0xb9
   38330:	f004 fbac 	bl	3ca8c <assert_print>
   38334:	21b9      	movs	r1, #185	; 0xb9
   38336:	4806      	ldr	r0, [pc, #24]	; (38350 <k_sched_unlock+0xa8>)
   38338:	f004 fba1 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   3833c:	f385 8811 	msr	BASEPRI, r5
   38340:	f3bf 8f6f 	isb	sy
}
   38344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   38348:	f008 bec0 	b.w	410cc <z_reschedule_unlocked>
   3834c:	2001a544 	.word	0x2001a544
   38350:	000440d8 	.word	0x000440d8
   38354:	0004409e 	.word	0x0004409e
   38358:	2001a500 	.word	0x2001a500
   3835c:	0004bbf9 	.word	0x0004bbf9

00038360 <z_unpend_first_thread>:
{
   38360:	b538      	push	{r3, r4, r5, lr}
   38362:	4604      	mov	r4, r0
	__asm__ volatile(
   38364:	f04f 0320 	mov.w	r3, #32
   38368:	f3ef 8511 	mrs	r5, BASEPRI
   3836c:	f383 8812 	msr	BASEPRI_MAX, r3
   38370:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38374:	4816      	ldr	r0, [pc, #88]	; (383d0 <z_unpend_first_thread+0x70>)
   38376:	f7fe f933 	bl	365e0 <z_spin_lock_valid>
   3837a:	b940      	cbnz	r0, 3838e <z_unpend_first_thread+0x2e>
   3837c:	4915      	ldr	r1, [pc, #84]	; (383d4 <z_unpend_first_thread+0x74>)
   3837e:	4816      	ldr	r0, [pc, #88]	; (383d8 <z_unpend_first_thread+0x78>)
   38380:	228e      	movs	r2, #142	; 0x8e
   38382:	f004 fb83 	bl	3ca8c <assert_print>
   38386:	218e      	movs	r1, #142	; 0x8e
   38388:	4812      	ldr	r0, [pc, #72]	; (383d4 <z_unpend_first_thread+0x74>)
   3838a:	f004 fb78 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   3838e:	4810      	ldr	r0, [pc, #64]	; (383d0 <z_unpend_first_thread+0x70>)
   38390:	f7fe f944 	bl	3661c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   38394:	4620      	mov	r0, r4
   38396:	f008 fea3 	bl	410e0 <z_priq_dumb_best>
		if (thread != NULL) {
   3839a:	4604      	mov	r4, r0
   3839c:	b128      	cbz	r0, 383aa <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   3839e:	f7ff fb53 	bl	37a48 <unpend_thread_no_timeout>
   383a2:	f104 0018 	add.w	r0, r4, #24
   383a6:	f000 fb8f 	bl	38ac8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   383aa:	4809      	ldr	r0, [pc, #36]	; (383d0 <z_unpend_first_thread+0x70>)
   383ac:	f7fe f926 	bl	365fc <z_spin_unlock_valid>
   383b0:	b940      	cbnz	r0, 383c4 <z_unpend_first_thread+0x64>
   383b2:	4908      	ldr	r1, [pc, #32]	; (383d4 <z_unpend_first_thread+0x74>)
   383b4:	4808      	ldr	r0, [pc, #32]	; (383d8 <z_unpend_first_thread+0x78>)
   383b6:	22b9      	movs	r2, #185	; 0xb9
   383b8:	f004 fb68 	bl	3ca8c <assert_print>
   383bc:	21b9      	movs	r1, #185	; 0xb9
   383be:	4805      	ldr	r0, [pc, #20]	; (383d4 <z_unpend_first_thread+0x74>)
   383c0:	f004 fb5d 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   383c4:	f385 8811 	msr	BASEPRI, r5
   383c8:	f3bf 8f6f 	isb	sy
}
   383cc:	4620      	mov	r0, r4
   383ce:	bd38      	pop	{r3, r4, r5, pc}
   383d0:	2001a544 	.word	0x2001a544
   383d4:	000440d8 	.word	0x000440d8
   383d8:	0004409e 	.word	0x0004409e

000383dc <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   383dc:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   383de:	4b04      	ldr	r3, [pc, #16]	; (383f0 <z_sched_init+0x14>)
   383e0:	4608      	mov	r0, r1
   383e2:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   383e6:	e9c3 2208 	strd	r2, r2, [r3, #32]
   383ea:	f7ff b9fb 	b.w	377e4 <k_sched_time_slice_set>
   383ee:	bf00      	nop
   383f0:	2001a500 	.word	0x2001a500

000383f4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   383f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   383f6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   383fa:	b153      	cbz	r3, 38412 <z_impl_k_yield+0x1e>
   383fc:	4938      	ldr	r1, [pc, #224]	; (384e0 <z_impl_k_yield+0xec>)
   383fe:	4839      	ldr	r0, [pc, #228]	; (384e4 <z_impl_k_yield+0xf0>)
   38400:	f240 5232 	movw	r2, #1330	; 0x532
   38404:	f004 fb42 	bl	3ca8c <assert_print>
   38408:	f240 5132 	movw	r1, #1330	; 0x532
   3840c:	4834      	ldr	r0, [pc, #208]	; (384e0 <z_impl_k_yield+0xec>)
   3840e:	f004 fb36 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   38412:	f04f 0320 	mov.w	r3, #32
   38416:	f3ef 8611 	mrs	r6, BASEPRI
   3841a:	f383 8812 	msr	BASEPRI_MAX, r3
   3841e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38422:	4831      	ldr	r0, [pc, #196]	; (384e8 <z_impl_k_yield+0xf4>)
   38424:	f7fe f8dc 	bl	365e0 <z_spin_lock_valid>
   38428:	b940      	cbnz	r0, 3843c <z_impl_k_yield+0x48>
   3842a:	4930      	ldr	r1, [pc, #192]	; (384ec <z_impl_k_yield+0xf8>)
   3842c:	482d      	ldr	r0, [pc, #180]	; (384e4 <z_impl_k_yield+0xf0>)
   3842e:	228e      	movs	r2, #142	; 0x8e
   38430:	f004 fb2c 	bl	3ca8c <assert_print>
   38434:	218e      	movs	r1, #142	; 0x8e
   38436:	482d      	ldr	r0, [pc, #180]	; (384ec <z_impl_k_yield+0xf8>)
   38438:	f004 fb21 	bl	3ca7e <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   3843c:	4d2c      	ldr	r5, [pc, #176]	; (384f0 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   3843e:	482a      	ldr	r0, [pc, #168]	; (384e8 <z_impl_k_yield+0xf4>)
   38440:	f7fe f8ec 	bl	3661c <z_spin_lock_set_owner>
   38444:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
   38446:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3844a:	7b4b      	ldrb	r3, [r1, #13]
   3844c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   38450:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   38452:	f7ff fadb 	bl	37a0c <z_priq_dumb_remove>
	}
	queue_thread(_current);
   38456:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   38458:	7b63      	ldrb	r3, [r4, #13]
   3845a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3845e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38460:	4b24      	ldr	r3, [pc, #144]	; (384f4 <z_impl_k_yield+0x100>)
   38462:	429c      	cmp	r4, r3
   38464:	d108      	bne.n	38478 <z_impl_k_yield+0x84>
   38466:	491e      	ldr	r1, [pc, #120]	; (384e0 <z_impl_k_yield+0xec>)
   38468:	481e      	ldr	r0, [pc, #120]	; (384e4 <z_impl_k_yield+0xf0>)
   3846a:	22ba      	movs	r2, #186	; 0xba
   3846c:	f004 fb0e 	bl	3ca8c <assert_print>
   38470:	21ba      	movs	r1, #186	; 0xba
   38472:	481b      	ldr	r0, [pc, #108]	; (384e0 <z_impl_k_yield+0xec>)
   38474:	f004 fb03 	bl	3ca7e <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   38478:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3847c:	481e      	ldr	r0, [pc, #120]	; (384f8 <z_impl_k_yield+0x104>)
   3847e:	4283      	cmp	r3, r0
   38480:	d028      	beq.n	384d4 <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38482:	b33b      	cbz	r3, 384d4 <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
   38484:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   38488:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   3848c:	4297      	cmp	r7, r2
   3848e:	d01c      	beq.n	384ca <z_impl_k_yield+0xd6>
		return b2 - b1;
   38490:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   38492:	2a00      	cmp	r2, #0
   38494:	dd19      	ble.n	384ca <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
   38496:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   38498:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   3849c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3849e:	605c      	str	r4, [r3, #4]
	update_cache(1);
   384a0:	2001      	movs	r0, #1
   384a2:	f7ff fb29 	bl	37af8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   384a6:	4810      	ldr	r0, [pc, #64]	; (384e8 <z_impl_k_yield+0xf4>)
   384a8:	f7fe f8a8 	bl	365fc <z_spin_unlock_valid>
   384ac:	b940      	cbnz	r0, 384c0 <z_impl_k_yield+0xcc>
   384ae:	490f      	ldr	r1, [pc, #60]	; (384ec <z_impl_k_yield+0xf8>)
   384b0:	480c      	ldr	r0, [pc, #48]	; (384e4 <z_impl_k_yield+0xf0>)
   384b2:	22d0      	movs	r2, #208	; 0xd0
   384b4:	f004 faea 	bl	3ca8c <assert_print>
   384b8:	21d0      	movs	r1, #208	; 0xd0
   384ba:	480c      	ldr	r0, [pc, #48]	; (384ec <z_impl_k_yield+0xf8>)
   384bc:	f004 fadf 	bl	3ca7e <assert_post_action>
   384c0:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   384c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   384c6:	f7ea bbdd 	b.w	22c84 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   384ca:	428b      	cmp	r3, r1
   384cc:	d002      	beq.n	384d4 <z_impl_k_yield+0xe0>
   384ce:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   384d0:	2b00      	cmp	r3, #0
   384d2:	d1d9      	bne.n	38488 <z_impl_k_yield+0x94>
	node->prev = tail;
   384d4:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   384d8:	600c      	str	r4, [r1, #0]
	list->tail = node;
   384da:	626c      	str	r4, [r5, #36]	; 0x24
}
   384dc:	e7e0      	b.n	384a0 <z_impl_k_yield+0xac>
   384de:	bf00      	nop
   384e0:	0004bbf9 	.word	0x0004bbf9
   384e4:	0004409e 	.word	0x0004409e
   384e8:	2001a544 	.word	0x2001a544
   384ec:	000440d8 	.word	0x000440d8
   384f0:	2001a500 	.word	0x2001a500
   384f4:	20018e00 	.word	0x20018e00
   384f8:	2001a520 	.word	0x2001a520

000384fc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   384fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38500:	4605      	mov	r5, r0
   38502:	460e      	mov	r6, r1
   38504:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   38508:	b153      	cbz	r3, 38520 <z_tick_sleep+0x24>
   3850a:	493a      	ldr	r1, [pc, #232]	; (385f4 <z_tick_sleep+0xf8>)
   3850c:	483a      	ldr	r0, [pc, #232]	; (385f8 <z_tick_sleep+0xfc>)
   3850e:	f240 524e 	movw	r2, #1358	; 0x54e
   38512:	f004 fabb 	bl	3ca8c <assert_print>
   38516:	f240 514e 	movw	r1, #1358	; 0x54e
   3851a:	4836      	ldr	r0, [pc, #216]	; (385f4 <z_tick_sleep+0xf8>)
   3851c:	f004 faaf 	bl	3ca7e <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   38520:	ea55 0306 	orrs.w	r3, r5, r6
   38524:	d103      	bne.n	3852e <z_tick_sleep+0x32>
	z_impl_k_yield();
   38526:	f7ff ff65 	bl	383f4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   3852a:	2000      	movs	r0, #0
   3852c:	e05f      	b.n	385ee <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
   3852e:	f06f 0401 	mvn.w	r4, #1
   38532:	f04f 33ff 	mov.w	r3, #4294967295
   38536:	1b64      	subs	r4, r4, r5
   38538:	eb63 0306 	sbc.w	r3, r3, r6
   3853c:	2c01      	cmp	r4, #1
   3853e:	f173 0300 	sbcs.w	r3, r3, #0
   38542:	da02      	bge.n	3854a <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   38544:	f008 fde2 	bl	4110c <sys_clock_tick_get_32>
   38548:	1944      	adds	r4, r0, r5
   3854a:	f04f 0320 	mov.w	r3, #32
   3854e:	f3ef 8811 	mrs	r8, BASEPRI
   38552:	f383 8812 	msr	BASEPRI_MAX, r3
   38556:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3855a:	4828      	ldr	r0, [pc, #160]	; (385fc <z_tick_sleep+0x100>)
   3855c:	f7fe f840 	bl	365e0 <z_spin_lock_valid>
   38560:	b940      	cbnz	r0, 38574 <z_tick_sleep+0x78>
   38562:	4927      	ldr	r1, [pc, #156]	; (38600 <z_tick_sleep+0x104>)
   38564:	4824      	ldr	r0, [pc, #144]	; (385f8 <z_tick_sleep+0xfc>)
   38566:	228e      	movs	r2, #142	; 0x8e
   38568:	f004 fa90 	bl	3ca8c <assert_print>
   3856c:	218e      	movs	r1, #142	; 0x8e
   3856e:	4824      	ldr	r0, [pc, #144]	; (38600 <z_tick_sleep+0x104>)
   38570:	f004 fa85 	bl	3ca7e <assert_post_action>
	pending_current = _current;
   38574:	4f23      	ldr	r7, [pc, #140]	; (38604 <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   38576:	4821      	ldr	r0, [pc, #132]	; (385fc <z_tick_sleep+0x100>)
   38578:	f7fe f850 	bl	3661c <z_spin_lock_set_owner>
   3857c:	68b8      	ldr	r0, [r7, #8]
   3857e:	4b22      	ldr	r3, [pc, #136]	; (38608 <z_tick_sleep+0x10c>)
   38580:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   38582:	f7ff fced 	bl	37f60 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   38586:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   38588:	462a      	mov	r2, r5
   3858a:	4633      	mov	r3, r6
   3858c:	3018      	adds	r0, #24
   3858e:	491f      	ldr	r1, [pc, #124]	; (3860c <z_tick_sleep+0x110>)
   38590:	f000 f9ec 	bl	3896c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   38594:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38596:	4819      	ldr	r0, [pc, #100]	; (385fc <z_tick_sleep+0x100>)
   38598:	7b53      	ldrb	r3, [r2, #13]
   3859a:	f043 0310 	orr.w	r3, r3, #16
   3859e:	7353      	strb	r3, [r2, #13]
   385a0:	f7fe f82c 	bl	365fc <z_spin_unlock_valid>
   385a4:	b940      	cbnz	r0, 385b8 <z_tick_sleep+0xbc>
   385a6:	4916      	ldr	r1, [pc, #88]	; (38600 <z_tick_sleep+0x104>)
   385a8:	4813      	ldr	r0, [pc, #76]	; (385f8 <z_tick_sleep+0xfc>)
   385aa:	22d0      	movs	r2, #208	; 0xd0
   385ac:	f004 fa6e 	bl	3ca8c <assert_print>
   385b0:	21d0      	movs	r1, #208	; 0xd0
   385b2:	4813      	ldr	r0, [pc, #76]	; (38600 <z_tick_sleep+0x104>)
   385b4:	f004 fa63 	bl	3ca7e <assert_post_action>
   385b8:	4640      	mov	r0, r8
   385ba:	f7ea fb63 	bl	22c84 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   385be:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   385c0:	7b5b      	ldrb	r3, [r3, #13]
   385c2:	06db      	lsls	r3, r3, #27
   385c4:	d50a      	bpl.n	385dc <z_tick_sleep+0xe0>
   385c6:	490b      	ldr	r1, [pc, #44]	; (385f4 <z_tick_sleep+0xf8>)
   385c8:	480b      	ldr	r0, [pc, #44]	; (385f8 <z_tick_sleep+0xfc>)
   385ca:	f240 526f 	movw	r2, #1391	; 0x56f
   385ce:	f004 fa5d 	bl	3ca8c <assert_print>
   385d2:	f240 516f 	movw	r1, #1391	; 0x56f
   385d6:	4807      	ldr	r0, [pc, #28]	; (385f4 <z_tick_sleep+0xf8>)
   385d8:	f004 fa51 	bl	3ca7e <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   385dc:	f008 fd96 	bl	4110c <sys_clock_tick_get_32>
   385e0:	1a20      	subs	r0, r4, r0
   385e2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   385e6:	2801      	cmp	r0, #1
   385e8:	f173 0300 	sbcs.w	r3, r3, #0
   385ec:	db9d      	blt.n	3852a <z_tick_sleep+0x2e>
}
   385ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   385f2:	bf00      	nop
   385f4:	0004bbf9 	.word	0x0004bbf9
   385f8:	0004409e 	.word	0x0004409e
   385fc:	2001a544 	.word	0x2001a544
   38600:	000440d8 	.word	0x000440d8
   38604:	2001a500 	.word	0x2001a500
   38608:	2001a540 	.word	0x2001a540
   3860c:	00037ecd 	.word	0x00037ecd

00038610 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   38610:	b538      	push	{r3, r4, r5, lr}
   38612:	4605      	mov	r5, r0
   38614:	460c      	mov	r4, r1
   38616:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   3861a:	b153      	cbz	r3, 38632 <z_impl_k_sleep+0x22>
   3861c:	4911      	ldr	r1, [pc, #68]	; (38664 <z_impl_k_sleep+0x54>)
   3861e:	4812      	ldr	r0, [pc, #72]	; (38668 <z_impl_k_sleep+0x58>)
   38620:	f240 527e 	movw	r2, #1406	; 0x57e
   38624:	f004 fa32 	bl	3ca8c <assert_print>
   38628:	f240 517e 	movw	r1, #1406	; 0x57e
   3862c:	480d      	ldr	r0, [pc, #52]	; (38664 <z_impl_k_sleep+0x54>)
   3862e:	f004 fa26 	bl	3ca7e <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38632:	f1b4 3fff 	cmp.w	r4, #4294967295
   38636:	bf08      	it	eq
   38638:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   3863c:	d106      	bne.n	3864c <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   3863e:	4b0b      	ldr	r3, [pc, #44]	; (3866c <z_impl_k_sleep+0x5c>)
   38640:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   38642:	f7ff fdd9 	bl	381f8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   38646:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   3864a:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   3864c:	4628      	mov	r0, r5
   3864e:	4621      	mov	r1, r4
   38650:	f7ff ff54 	bl	384fc <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   38654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   38658:	fb80 0303 	smull	r0, r3, r0, r3
   3865c:	0bc0      	lsrs	r0, r0, #15
   3865e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   38662:	e7f2      	b.n	3864a <z_impl_k_sleep+0x3a>
   38664:	0004bbf9 	.word	0x0004bbf9
   38668:	0004409e 	.word	0x0004409e
   3866c:	2001a500 	.word	0x2001a500

00038670 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   38670:	4b01      	ldr	r3, [pc, #4]	; (38678 <z_impl_z_current_get+0x8>)
   38672:	6898      	ldr	r0, [r3, #8]
   38674:	4770      	bx	lr
   38676:	bf00      	nop
   38678:	2001a500 	.word	0x2001a500

0003867c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   3867c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38680:	4604      	mov	r4, r0
   38682:	f04f 0320 	mov.w	r3, #32
   38686:	f3ef 8611 	mrs	r6, BASEPRI
   3868a:	f383 8812 	msr	BASEPRI_MAX, r3
   3868e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38692:	483e      	ldr	r0, [pc, #248]	; (3878c <z_thread_abort+0x110>)
   38694:	f7fd ffa4 	bl	365e0 <z_spin_lock_valid>
   38698:	b940      	cbnz	r0, 386ac <z_thread_abort+0x30>
   3869a:	493d      	ldr	r1, [pc, #244]	; (38790 <z_thread_abort+0x114>)
   3869c:	483d      	ldr	r0, [pc, #244]	; (38794 <z_thread_abort+0x118>)
   3869e:	228e      	movs	r2, #142	; 0x8e
   386a0:	f004 f9f4 	bl	3ca8c <assert_print>
   386a4:	218e      	movs	r1, #142	; 0x8e
   386a6:	483a      	ldr	r0, [pc, #232]	; (38790 <z_thread_abort+0x114>)
   386a8:	f004 f9e9 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   386ac:	4837      	ldr	r0, [pc, #220]	; (3878c <z_thread_abort+0x110>)
   386ae:	f7fd ffb5 	bl	3661c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   386b2:	7b63      	ldrb	r3, [r4, #13]
   386b4:	071a      	lsls	r2, r3, #28
   386b6:	d512      	bpl.n	386de <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   386b8:	4834      	ldr	r0, [pc, #208]	; (3878c <z_thread_abort+0x110>)
   386ba:	f7fd ff9f 	bl	365fc <z_spin_unlock_valid>
   386be:	b940      	cbnz	r0, 386d2 <z_thread_abort+0x56>
   386c0:	4933      	ldr	r1, [pc, #204]	; (38790 <z_thread_abort+0x114>)
   386c2:	4834      	ldr	r0, [pc, #208]	; (38794 <z_thread_abort+0x118>)
   386c4:	22b9      	movs	r2, #185	; 0xb9
   386c6:	f004 f9e1 	bl	3ca8c <assert_print>
   386ca:	21b9      	movs	r1, #185	; 0xb9
   386cc:	4830      	ldr	r0, [pc, #192]	; (38790 <z_thread_abort+0x114>)
   386ce:	f004 f9d6 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   386d2:	f386 8811 	msr	BASEPRI, r6
   386d6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   386da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   386de:	f023 0220 	bic.w	r2, r3, #32
   386e2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   386e6:	09d2      	lsrs	r2, r2, #7
   386e8:	d138      	bne.n	3875c <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   386ea:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   386ec:	68a3      	ldr	r3, [r4, #8]
   386ee:	b113      	cbz	r3, 386f6 <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   386f0:	4620      	mov	r0, r4
   386f2:	f7ff f9a9 	bl	37a48 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   386f6:	f104 0018 	add.w	r0, r4, #24
   386fa:	f000 f9e5 	bl	38ac8 <z_abort_timeout>
   386fe:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   38702:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   38706:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38708:	42bd      	cmp	r5, r7
   3870a:	d000      	beq.n	3870e <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3870c:	bb85      	cbnz	r5, 38770 <z_thread_abort+0xf4>
		update_cache(1);
   3870e:	2001      	movs	r0, #1
   38710:	f7ff f9f2 	bl	37af8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   38714:	4b20      	ldr	r3, [pc, #128]	; (38798 <z_thread_abort+0x11c>)
   38716:	689b      	ldr	r3, [r3, #8]
   38718:	42a3      	cmp	r3, r4
   3871a:	d1cd      	bne.n	386b8 <z_thread_abort+0x3c>
   3871c:	f3ef 8305 	mrs	r3, IPSR
   38720:	2b00      	cmp	r3, #0
   38722:	d1c9      	bne.n	386b8 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38724:	4819      	ldr	r0, [pc, #100]	; (3878c <z_thread_abort+0x110>)
   38726:	f7fd ff69 	bl	365fc <z_spin_unlock_valid>
   3872a:	b940      	cbnz	r0, 3873e <z_thread_abort+0xc2>
   3872c:	4918      	ldr	r1, [pc, #96]	; (38790 <z_thread_abort+0x114>)
   3872e:	4819      	ldr	r0, [pc, #100]	; (38794 <z_thread_abort+0x118>)
   38730:	22d0      	movs	r2, #208	; 0xd0
   38732:	f004 f9ab 	bl	3ca8c <assert_print>
   38736:	21d0      	movs	r1, #208	; 0xd0
   38738:	4815      	ldr	r0, [pc, #84]	; (38790 <z_thread_abort+0x114>)
   3873a:	f004 f9a0 	bl	3ca7e <assert_post_action>
   3873e:	4630      	mov	r0, r6
   38740:	f7ea faa0 	bl	22c84 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   38744:	f240 62ac 	movw	r2, #1708	; 0x6ac
   38748:	4914      	ldr	r1, [pc, #80]	; (3879c <z_thread_abort+0x120>)
   3874a:	4812      	ldr	r0, [pc, #72]	; (38794 <z_thread_abort+0x118>)
   3874c:	f004 f99e 	bl	3ca8c <assert_print>
   38750:	f240 61ac 	movw	r1, #1708	; 0x6ac
   38754:	4811      	ldr	r0, [pc, #68]	; (3879c <z_thread_abort+0x120>)
   38756:	f004 f992 	bl	3ca7e <assert_post_action>
   3875a:	e7ad      	b.n	386b8 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3875c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   38760:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   38764:	4621      	mov	r1, r4
   38766:	480e      	ldr	r0, [pc, #56]	; (387a0 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38768:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   3876a:	f7ff f94f 	bl	37a0c <z_priq_dumb_remove>
}
   3876e:	e7bd      	b.n	386ec <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   38770:	4628      	mov	r0, r5
   38772:	f7ff f969 	bl	37a48 <unpend_thread_no_timeout>
   38776:	f105 0018 	add.w	r0, r5, #24
   3877a:	f000 f9a5 	bl	38ac8 <z_abort_timeout>
		ready_thread(thread);
   3877e:	4628      	mov	r0, r5
   38780:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
   38784:	f7ff fa9e 	bl	37cc4 <ready_thread>
   38788:	e7bd      	b.n	38706 <z_thread_abort+0x8a>
   3878a:	bf00      	nop
   3878c:	2001a544 	.word	0x2001a544
   38790:	000440d8 	.word	0x000440d8
   38794:	0004409e 	.word	0x0004409e
   38798:	2001a500 	.word	0x2001a500
   3879c:	0004bbf9 	.word	0x0004bbf9
   387a0:	2001a520 	.word	0x2001a520

000387a4 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   387a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   387a6:	4604      	mov	r4, r0
   387a8:	460e      	mov	r6, r1
   387aa:	4615      	mov	r5, r2
	__asm__ volatile(
   387ac:	f04f 0320 	mov.w	r3, #32
   387b0:	f3ef 8711 	mrs	r7, BASEPRI
   387b4:	f383 8812 	msr	BASEPRI_MAX, r3
   387b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   387bc:	481a      	ldr	r0, [pc, #104]	; (38828 <z_sched_wake+0x84>)
   387be:	f7fd ff0f 	bl	365e0 <z_spin_lock_valid>
   387c2:	b940      	cbnz	r0, 387d6 <z_sched_wake+0x32>
   387c4:	4919      	ldr	r1, [pc, #100]	; (3882c <z_sched_wake+0x88>)
   387c6:	481a      	ldr	r0, [pc, #104]	; (38830 <z_sched_wake+0x8c>)
   387c8:	228e      	movs	r2, #142	; 0x8e
   387ca:	f004 f95f 	bl	3ca8c <assert_print>
   387ce:	218e      	movs	r1, #142	; 0x8e
   387d0:	4816      	ldr	r0, [pc, #88]	; (3882c <z_sched_wake+0x88>)
   387d2:	f004 f954 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   387d6:	4814      	ldr	r0, [pc, #80]	; (38828 <z_sched_wake+0x84>)
   387d8:	f7fd ff20 	bl	3661c <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   387dc:	4620      	mov	r0, r4
   387de:	f008 fc7f 	bl	410e0 <z_priq_dumb_best>

		if (thread != NULL) {
   387e2:	4604      	mov	r4, r0
   387e4:	b160      	cbz	r0, 38800 <z_sched_wake+0x5c>
   387e6:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
	thread->base.swap_data = data;
   387ea:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   387ec:	f7ff f92c 	bl	37a48 <unpend_thread_no_timeout>
   387f0:	f104 0018 	add.w	r0, r4, #24
   387f4:	f000 f968 	bl	38ac8 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   387f8:	4620      	mov	r0, r4
   387fa:	f7ff fa63 	bl	37cc4 <ready_thread>
			ret = true;
   387fe:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38800:	4809      	ldr	r0, [pc, #36]	; (38828 <z_sched_wake+0x84>)
   38802:	f7fd fefb 	bl	365fc <z_spin_unlock_valid>
   38806:	b940      	cbnz	r0, 3881a <z_sched_wake+0x76>
   38808:	4908      	ldr	r1, [pc, #32]	; (3882c <z_sched_wake+0x88>)
   3880a:	4809      	ldr	r0, [pc, #36]	; (38830 <z_sched_wake+0x8c>)
   3880c:	22b9      	movs	r2, #185	; 0xb9
   3880e:	f004 f93d 	bl	3ca8c <assert_print>
   38812:	21b9      	movs	r1, #185	; 0xb9
   38814:	4805      	ldr	r0, [pc, #20]	; (3882c <z_sched_wake+0x88>)
   38816:	f004 f932 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   3881a:	f387 8811 	msr	BASEPRI, r7
   3881e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   38822:	4620      	mov	r0, r4
   38824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38826:	bf00      	nop
   38828:	2001a544 	.word	0x2001a544
   3882c:	000440d8 	.word	0x000440d8
   38830:	0004409e 	.word	0x0004409e

00038834 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   38834:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   38836:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   3883a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   3883c:	e9cd 6700 	strd	r6, r7, [sp]
   38840:	f7ff fc32 	bl	380a8 <z_pend_curr>

	if (data != NULL) {
   38844:	b11c      	cbz	r4, 3884e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   38846:	4b03      	ldr	r3, [pc, #12]	; (38854 <z_sched_wait+0x20>)
   38848:	689b      	ldr	r3, [r3, #8]
   3884a:	695b      	ldr	r3, [r3, #20]
   3884c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   3884e:	b002      	add	sp, #8
   38850:	bdd0      	pop	{r4, r6, r7, pc}
   38852:	bf00      	nop
   38854:	2001a500 	.word	0x2001a500

00038858 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   38858:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   3885a:	4806      	ldr	r0, [pc, #24]	; (38874 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   3885c:	4a06      	ldr	r2, [pc, #24]	; (38878 <z_data_copy+0x20>)
   3885e:	4907      	ldr	r1, [pc, #28]	; (3887c <z_data_copy+0x24>)
   38860:	1a12      	subs	r2, r2, r0
   38862:	f008 fb6c 	bl	40f3e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   38866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   3886a:	4a05      	ldr	r2, [pc, #20]	; (38880 <z_data_copy+0x28>)
   3886c:	4905      	ldr	r1, [pc, #20]	; (38884 <z_data_copy+0x2c>)
   3886e:	4806      	ldr	r0, [pc, #24]	; (38888 <z_data_copy+0x30>)
   38870:	f008 bb65 	b.w	40f3e <z_early_memcpy>
   38874:	20014500 	.word	0x20014500
   38878:	2001514c 	.word	0x2001514c
   3887c:	0004c084 	.word	0x0004c084
   38880:	00000000 	.word	0x00000000
   38884:	0004c06c 	.word	0x0004c06c
   38888:	20014500 	.word	0x20014500

0003888c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   3888c:	4b03      	ldr	r3, [pc, #12]	; (3889c <elapsed+0x10>)
   3888e:	681b      	ldr	r3, [r3, #0]
   38890:	b90b      	cbnz	r3, 38896 <elapsed+0xa>
   38892:	f7ec be6d 	b.w	25570 <sys_clock_elapsed>
}
   38896:	2000      	movs	r0, #0
   38898:	4770      	bx	lr
   3889a:	bf00      	nop
   3889c:	2001a550 	.word	0x2001a550

000388a0 <next_timeout>:
	return list->head == list;
   388a0:	4b10      	ldr	r3, [pc, #64]	; (388e4 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   388a2:	b510      	push	{r4, lr}
   388a4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   388a6:	429c      	cmp	r4, r3
   388a8:	bf08      	it	eq
   388aa:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   388ac:	f7ff ffee 	bl	3888c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   388b0:	b1a4      	cbz	r4, 388dc <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   388b2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   388b6:	1a1b      	subs	r3, r3, r0
   388b8:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   388bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   388c0:	f170 0200 	sbcs.w	r2, r0, #0
   388c4:	da0a      	bge.n	388dc <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   388c6:	2800      	cmp	r0, #0
   388c8:	bfac      	ite	ge
   388ca:	4618      	movge	r0, r3
   388cc:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   388ce:	4b06      	ldr	r3, [pc, #24]	; (388e8 <next_timeout+0x48>)
   388d0:	691b      	ldr	r3, [r3, #16]
   388d2:	b113      	cbz	r3, 388da <next_timeout+0x3a>
   388d4:	4298      	cmp	r0, r3
   388d6:	bfa8      	it	ge
   388d8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   388da:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   388dc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   388e0:	e7f5      	b.n	388ce <next_timeout+0x2e>
   388e2:	bf00      	nop
   388e4:	20014a64 	.word	0x20014a64
   388e8:	2001a500 	.word	0x2001a500

000388ec <remove_timeout>:
{
   388ec:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   388ee:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   388f0:	b168      	cbz	r0, 3890e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   388f2:	4a0a      	ldr	r2, [pc, #40]	; (3891c <remove_timeout+0x30>)
   388f4:	6852      	ldr	r2, [r2, #4]
   388f6:	4290      	cmp	r0, r2
   388f8:	d009      	beq.n	3890e <remove_timeout+0x22>
	if (next(t) != NULL) {
   388fa:	b143      	cbz	r3, 3890e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   388fc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   38900:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   38904:	1912      	adds	r2, r2, r4
   38906:	eb41 0105 	adc.w	r1, r1, r5
   3890a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   3890e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   38910:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   38912:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   38914:	2300      	movs	r3, #0
	node->prev = NULL;
   38916:	e9c0 3300 	strd	r3, r3, [r0]
}
   3891a:	bd30      	pop	{r4, r5, pc}
   3891c:	20014a64 	.word	0x20014a64

00038920 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   38920:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   38922:	6804      	ldr	r4, [r0, #0]
   38924:	b1e4      	cbz	r4, 38960 <timeout_rem+0x40>
	return list->head == list;
   38926:	4a10      	ldr	r2, [pc, #64]	; (38968 <timeout_rem+0x48>)
   38928:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3892a:	4293      	cmp	r3, r2
   3892c:	d015      	beq.n	3895a <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
   3892e:	2400      	movs	r4, #0
   38930:	4625      	mov	r5, r4
   38932:	6851      	ldr	r1, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   38934:	b933      	cbnz	r3, 38944 <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   38936:	f7ff ffa9 	bl	3888c <elapsed>
   3893a:	4601      	mov	r1, r0
   3893c:	1a20      	subs	r0, r4, r0
   3893e:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
   38942:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   38944:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   38948:	18a4      	adds	r4, r4, r2
   3894a:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   3894e:	4283      	cmp	r3, r0
   38950:	d0f1      	beq.n	38936 <timeout_rem+0x16>
   38952:	428b      	cmp	r3, r1
   38954:	d0ef      	beq.n	38936 <timeout_rem+0x16>
   38956:	681b      	ldr	r3, [r3, #0]
   38958:	e7ec      	b.n	38934 <timeout_rem+0x14>
   3895a:	2400      	movs	r4, #0
   3895c:	4625      	mov	r5, r4
   3895e:	e7ea      	b.n	38936 <timeout_rem+0x16>
		return 0;
   38960:	4620      	mov	r0, r4
   38962:	4621      	mov	r1, r4
   38964:	e7ed      	b.n	38942 <timeout_rem+0x22>
   38966:	bf00      	nop
   38968:	20014a64 	.word	0x20014a64

0003896c <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3896c:	f1b3 3fff 	cmp.w	r3, #4294967295
   38970:	bf08      	it	eq
   38972:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   38976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3897a:	4604      	mov	r4, r0
   3897c:	460e      	mov	r6, r1
   3897e:	4698      	mov	r8, r3
   38980:	4615      	mov	r5, r2
   38982:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38984:	f000 8090 	beq.w	38aa8 <z_add_timeout+0x13c>
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   38988:	6803      	ldr	r3, [r0, #0]
   3898a:	b143      	cbz	r3, 3899e <z_add_timeout+0x32>
   3898c:	4947      	ldr	r1, [pc, #284]	; (38aac <z_add_timeout+0x140>)
   3898e:	4848      	ldr	r0, [pc, #288]	; (38ab0 <z_add_timeout+0x144>)
   38990:	2263      	movs	r2, #99	; 0x63
   38992:	f004 f87b 	bl	3ca8c <assert_print>
   38996:	2163      	movs	r1, #99	; 0x63
   38998:	4844      	ldr	r0, [pc, #272]	; (38aac <z_add_timeout+0x140>)
   3899a:	f004 f870 	bl	3ca7e <assert_post_action>
	to->fn = fn;
   3899e:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   389a0:	f04f 0320 	mov.w	r3, #32
   389a4:	f3ef 8611 	mrs	r6, BASEPRI
   389a8:	f383 8812 	msr	BASEPRI_MAX, r3
   389ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   389b0:	4840      	ldr	r0, [pc, #256]	; (38ab4 <z_add_timeout+0x148>)
   389b2:	f7fd fe15 	bl	365e0 <z_spin_lock_valid>
   389b6:	b940      	cbnz	r0, 389ca <z_add_timeout+0x5e>
   389b8:	493f      	ldr	r1, [pc, #252]	; (38ab8 <z_add_timeout+0x14c>)
   389ba:	483d      	ldr	r0, [pc, #244]	; (38ab0 <z_add_timeout+0x144>)
   389bc:	228e      	movs	r2, #142	; 0x8e
   389be:	f004 f865 	bl	3ca8c <assert_print>
   389c2:	218e      	movs	r1, #142	; 0x8e
   389c4:	483c      	ldr	r0, [pc, #240]	; (38ab8 <z_add_timeout+0x14c>)
   389c6:	f004 f85a 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   389ca:	483a      	ldr	r0, [pc, #232]	; (38ab4 <z_add_timeout+0x148>)
   389cc:	f7fd fe26 	bl	3661c <z_spin_lock_set_owner>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   389d0:	f06f 0201 	mvn.w	r2, #1
   389d4:	f04f 30ff 	mov.w	r0, #4294967295
   389d8:	1b53      	subs	r3, r2, r5
   389da:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   389de:	2b00      	cmp	r3, #0
   389e0:	db1b      	blt.n	38a1a <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   389e2:	4b36      	ldr	r3, [pc, #216]	; (38abc <z_add_timeout+0x150>)
   389e4:	e9d3 1300 	ldrd	r1, r3, [r3]
   389e8:	1a52      	subs	r2, r2, r1
   389ea:	eb60 0303 	sbc.w	r3, r0, r3
   389ee:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
   389f0:	eb63 0707 	sbc.w	r7, r3, r7
   389f4:	2d01      	cmp	r5, #1
   389f6:	f177 0300 	sbcs.w	r3, r7, #0
   389fa:	bfbc      	itt	lt
   389fc:	2501      	movlt	r5, #1
   389fe:	2700      	movlt	r7, #0
   38a00:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
   38a04:	4a2e      	ldr	r2, [pc, #184]	; (38ac0 <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
   38a06:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38a0a:	4293      	cmp	r3, r2
   38a0c:	d118      	bne.n	38a40 <z_add_timeout+0xd4>
	node->prev = tail;
   38a0e:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   38a12:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   38a16:	6054      	str	r4, [r2, #4]
}
   38a18:	e026      	b.n	38a68 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   38a1a:	f7ff ff37 	bl	3888c <elapsed>
   38a1e:	3501      	adds	r5, #1
   38a20:	f148 0800 	adc.w	r8, r8, #0
   38a24:	182d      	adds	r5, r5, r0
   38a26:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
   38a2a:	e9c4 5004 	strd	r5, r0, [r4, #16]
   38a2e:	e7e9      	b.n	38a04 <z_add_timeout+0x98>
			to->dticks -= t->dticks;
   38a30:	1a09      	subs	r1, r1, r0
   38a32:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   38a36:	459c      	cmp	ip, r3
   38a38:	e9c4 1504 	strd	r1, r5, [r4, #16]
   38a3c:	d0e7      	beq.n	38a0e <z_add_timeout+0xa2>
   38a3e:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   38a40:	2b00      	cmp	r3, #0
   38a42:	d0e4      	beq.n	38a0e <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   38a44:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   38a48:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   38a4c:	4281      	cmp	r1, r0
   38a4e:	eb75 0e07 	sbcs.w	lr, r5, r7
   38a52:	daed      	bge.n	38a30 <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
   38a54:	1a41      	subs	r1, r0, r1
   38a56:	eb67 0505 	sbc.w	r5, r7, r5
   38a5a:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   38a5e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   38a60:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   38a64:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   38a66:	605c      	str	r4, [r3, #4]
	return list->head == list;
   38a68:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38a6a:	4293      	cmp	r3, r2
   38a6c:	d00b      	beq.n	38a86 <z_add_timeout+0x11a>
		if (to == first()) {
   38a6e:	429c      	cmp	r4, r3
   38a70:	d109      	bne.n	38a86 <z_add_timeout+0x11a>
			int32_t next_time = next_timeout();
   38a72:	f7ff ff15 	bl	388a0 <next_timeout>
			if (next_time == 0 ||
   38a76:	b118      	cbz	r0, 38a80 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   38a78:	4b12      	ldr	r3, [pc, #72]	; (38ac4 <z_add_timeout+0x158>)
			if (next_time == 0 ||
   38a7a:	691b      	ldr	r3, [r3, #16]
   38a7c:	4283      	cmp	r3, r0
   38a7e:	d002      	beq.n	38a86 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   38a80:	2100      	movs	r1, #0
   38a82:	f7ec fd45 	bl	25510 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38a86:	480b      	ldr	r0, [pc, #44]	; (38ab4 <z_add_timeout+0x148>)
   38a88:	f7fd fdb8 	bl	365fc <z_spin_unlock_valid>
   38a8c:	b940      	cbnz	r0, 38aa0 <z_add_timeout+0x134>
   38a8e:	490a      	ldr	r1, [pc, #40]	; (38ab8 <z_add_timeout+0x14c>)
   38a90:	4807      	ldr	r0, [pc, #28]	; (38ab0 <z_add_timeout+0x144>)
   38a92:	22b9      	movs	r2, #185	; 0xb9
   38a94:	f003 fffa 	bl	3ca8c <assert_print>
   38a98:	21b9      	movs	r1, #185	; 0xb9
   38a9a:	4807      	ldr	r0, [pc, #28]	; (38ab8 <z_add_timeout+0x14c>)
   38a9c:	f003 ffef 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   38aa0:	f386 8811 	msr	BASEPRI, r6
   38aa4:	f3bf 8f6f 	isb	sy
}
   38aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38aac:	0004bc1b 	.word	0x0004bc1b
   38ab0:	0004409e 	.word	0x0004409e
   38ab4:	2001a554 	.word	0x2001a554
   38ab8:	000440d8 	.word	0x000440d8
   38abc:	20018fa0 	.word	0x20018fa0
   38ac0:	20014a64 	.word	0x20014a64
   38ac4:	2001a500 	.word	0x2001a500

00038ac8 <z_abort_timeout>:
{
   38ac8:	b538      	push	{r3, r4, r5, lr}
   38aca:	4604      	mov	r4, r0
	__asm__ volatile(
   38acc:	f04f 0320 	mov.w	r3, #32
   38ad0:	f3ef 8511 	mrs	r5, BASEPRI
   38ad4:	f383 8812 	msr	BASEPRI_MAX, r3
   38ad8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38adc:	4815      	ldr	r0, [pc, #84]	; (38b34 <z_abort_timeout+0x6c>)
   38ade:	f7fd fd7f 	bl	365e0 <z_spin_lock_valid>
   38ae2:	b940      	cbnz	r0, 38af6 <z_abort_timeout+0x2e>
   38ae4:	4914      	ldr	r1, [pc, #80]	; (38b38 <z_abort_timeout+0x70>)
   38ae6:	4815      	ldr	r0, [pc, #84]	; (38b3c <z_abort_timeout+0x74>)
   38ae8:	228e      	movs	r2, #142	; 0x8e
   38aea:	f003 ffcf 	bl	3ca8c <assert_print>
   38aee:	218e      	movs	r1, #142	; 0x8e
   38af0:	4811      	ldr	r0, [pc, #68]	; (38b38 <z_abort_timeout+0x70>)
   38af2:	f003 ffc4 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   38af6:	480f      	ldr	r0, [pc, #60]	; (38b34 <z_abort_timeout+0x6c>)
   38af8:	f7fd fd90 	bl	3661c <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   38afc:	6823      	ldr	r3, [r4, #0]
   38afe:	b1b3      	cbz	r3, 38b2e <z_abort_timeout+0x66>
			remove_timeout(to);
   38b00:	4620      	mov	r0, r4
   38b02:	f7ff fef3 	bl	388ec <remove_timeout>
			ret = 0;
   38b06:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38b08:	480a      	ldr	r0, [pc, #40]	; (38b34 <z_abort_timeout+0x6c>)
   38b0a:	f7fd fd77 	bl	365fc <z_spin_unlock_valid>
   38b0e:	b940      	cbnz	r0, 38b22 <z_abort_timeout+0x5a>
   38b10:	4909      	ldr	r1, [pc, #36]	; (38b38 <z_abort_timeout+0x70>)
   38b12:	480a      	ldr	r0, [pc, #40]	; (38b3c <z_abort_timeout+0x74>)
   38b14:	22b9      	movs	r2, #185	; 0xb9
   38b16:	f003 ffb9 	bl	3ca8c <assert_print>
   38b1a:	21b9      	movs	r1, #185	; 0xb9
   38b1c:	4806      	ldr	r0, [pc, #24]	; (38b38 <z_abort_timeout+0x70>)
   38b1e:	f003 ffae 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   38b22:	f385 8811 	msr	BASEPRI, r5
   38b26:	f3bf 8f6f 	isb	sy
}
   38b2a:	4620      	mov	r0, r4
   38b2c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   38b2e:	f06f 0415 	mvn.w	r4, #21
   38b32:	e7e9      	b.n	38b08 <z_abort_timeout+0x40>
   38b34:	2001a554 	.word	0x2001a554
   38b38:	000440d8 	.word	0x000440d8
   38b3c:	0004409e 	.word	0x0004409e

00038b40 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
   38b40:	b570      	push	{r4, r5, r6, lr}
   38b42:	4604      	mov	r4, r0
	__asm__ volatile(
   38b44:	f04f 0320 	mov.w	r3, #32
   38b48:	f3ef 8611 	mrs	r6, BASEPRI
   38b4c:	f383 8812 	msr	BASEPRI_MAX, r3
   38b50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38b54:	4814      	ldr	r0, [pc, #80]	; (38ba8 <z_timeout_remaining+0x68>)
   38b56:	f7fd fd43 	bl	365e0 <z_spin_lock_valid>
   38b5a:	b940      	cbnz	r0, 38b6e <z_timeout_remaining+0x2e>
   38b5c:	4913      	ldr	r1, [pc, #76]	; (38bac <z_timeout_remaining+0x6c>)
   38b5e:	4814      	ldr	r0, [pc, #80]	; (38bb0 <z_timeout_remaining+0x70>)
   38b60:	228e      	movs	r2, #142	; 0x8e
   38b62:	f003 ff93 	bl	3ca8c <assert_print>
   38b66:	218e      	movs	r1, #142	; 0x8e
   38b68:	4810      	ldr	r0, [pc, #64]	; (38bac <z_timeout_remaining+0x6c>)
   38b6a:	f003 ff88 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   38b6e:	480e      	ldr	r0, [pc, #56]	; (38ba8 <z_timeout_remaining+0x68>)
   38b70:	f7fd fd54 	bl	3661c <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   38b74:	4620      	mov	r0, r4
   38b76:	f7ff fed3 	bl	38920 <timeout_rem>
   38b7a:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38b7c:	480a      	ldr	r0, [pc, #40]	; (38ba8 <z_timeout_remaining+0x68>)
   38b7e:	460c      	mov	r4, r1
   38b80:	f7fd fd3c 	bl	365fc <z_spin_unlock_valid>
   38b84:	b940      	cbnz	r0, 38b98 <z_timeout_remaining+0x58>
   38b86:	4909      	ldr	r1, [pc, #36]	; (38bac <z_timeout_remaining+0x6c>)
   38b88:	4809      	ldr	r0, [pc, #36]	; (38bb0 <z_timeout_remaining+0x70>)
   38b8a:	22b9      	movs	r2, #185	; 0xb9
   38b8c:	f003 ff7e 	bl	3ca8c <assert_print>
   38b90:	21b9      	movs	r1, #185	; 0xb9
   38b92:	4806      	ldr	r0, [pc, #24]	; (38bac <z_timeout_remaining+0x6c>)
   38b94:	f003 ff73 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   38b98:	f386 8811 	msr	BASEPRI, r6
   38b9c:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   38ba0:	4628      	mov	r0, r5
   38ba2:	4621      	mov	r1, r4
   38ba4:	bd70      	pop	{r4, r5, r6, pc}
   38ba6:	bf00      	nop
   38ba8:	2001a554 	.word	0x2001a554
   38bac:	000440d8 	.word	0x000440d8
   38bb0:	0004409e 	.word	0x0004409e

00038bb4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   38bb4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   38bb6:	f04f 0320 	mov.w	r3, #32
   38bba:	f3ef 8511 	mrs	r5, BASEPRI
   38bbe:	f383 8812 	msr	BASEPRI_MAX, r3
   38bc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38bc6:	4813      	ldr	r0, [pc, #76]	; (38c14 <z_get_next_timeout_expiry+0x60>)
   38bc8:	f7fd fd0a 	bl	365e0 <z_spin_lock_valid>
   38bcc:	b940      	cbnz	r0, 38be0 <z_get_next_timeout_expiry+0x2c>
   38bce:	4912      	ldr	r1, [pc, #72]	; (38c18 <z_get_next_timeout_expiry+0x64>)
   38bd0:	4812      	ldr	r0, [pc, #72]	; (38c1c <z_get_next_timeout_expiry+0x68>)
   38bd2:	228e      	movs	r2, #142	; 0x8e
   38bd4:	f003 ff5a 	bl	3ca8c <assert_print>
   38bd8:	218e      	movs	r1, #142	; 0x8e
   38bda:	480f      	ldr	r0, [pc, #60]	; (38c18 <z_get_next_timeout_expiry+0x64>)
   38bdc:	f003 ff4f 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   38be0:	480c      	ldr	r0, [pc, #48]	; (38c14 <z_get_next_timeout_expiry+0x60>)
   38be2:	f7fd fd1b 	bl	3661c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   38be6:	f7ff fe5b 	bl	388a0 <next_timeout>
   38bea:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38bec:	4809      	ldr	r0, [pc, #36]	; (38c14 <z_get_next_timeout_expiry+0x60>)
   38bee:	f7fd fd05 	bl	365fc <z_spin_unlock_valid>
   38bf2:	b940      	cbnz	r0, 38c06 <z_get_next_timeout_expiry+0x52>
   38bf4:	4908      	ldr	r1, [pc, #32]	; (38c18 <z_get_next_timeout_expiry+0x64>)
   38bf6:	4809      	ldr	r0, [pc, #36]	; (38c1c <z_get_next_timeout_expiry+0x68>)
   38bf8:	22b9      	movs	r2, #185	; 0xb9
   38bfa:	f003 ff47 	bl	3ca8c <assert_print>
   38bfe:	21b9      	movs	r1, #185	; 0xb9
   38c00:	4805      	ldr	r0, [pc, #20]	; (38c18 <z_get_next_timeout_expiry+0x64>)
   38c02:	f003 ff3c 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   38c06:	f385 8811 	msr	BASEPRI, r5
   38c0a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   38c0e:	4620      	mov	r0, r4
   38c10:	bd38      	pop	{r3, r4, r5, pc}
   38c12:	bf00      	nop
   38c14:	2001a554 	.word	0x2001a554
   38c18:	000440d8 	.word	0x000440d8
   38c1c:	0004409e 	.word	0x0004409e

00038c20 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   38c20:	b570      	push	{r4, r5, r6, lr}
   38c22:	4604      	mov	r4, r0
   38c24:	460d      	mov	r5, r1
	__asm__ volatile(
   38c26:	f04f 0320 	mov.w	r3, #32
   38c2a:	f3ef 8611 	mrs	r6, BASEPRI
   38c2e:	f383 8812 	msr	BASEPRI_MAX, r3
   38c32:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38c36:	4816      	ldr	r0, [pc, #88]	; (38c90 <z_set_timeout_expiry+0x70>)
   38c38:	f7fd fcd2 	bl	365e0 <z_spin_lock_valid>
   38c3c:	b940      	cbnz	r0, 38c50 <z_set_timeout_expiry+0x30>
   38c3e:	4915      	ldr	r1, [pc, #84]	; (38c94 <z_set_timeout_expiry+0x74>)
   38c40:	4815      	ldr	r0, [pc, #84]	; (38c98 <z_set_timeout_expiry+0x78>)
   38c42:	228e      	movs	r2, #142	; 0x8e
   38c44:	f003 ff22 	bl	3ca8c <assert_print>
   38c48:	218e      	movs	r1, #142	; 0x8e
   38c4a:	4812      	ldr	r0, [pc, #72]	; (38c94 <z_set_timeout_expiry+0x74>)
   38c4c:	f003 ff17 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   38c50:	480f      	ldr	r0, [pc, #60]	; (38c90 <z_set_timeout_expiry+0x70>)
   38c52:	f7fd fce3 	bl	3661c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   38c56:	f7ff fe23 	bl	388a0 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   38c5a:	2801      	cmp	r0, #1
   38c5c:	dd05      	ble.n	38c6a <z_set_timeout_expiry+0x4a>
   38c5e:	42a0      	cmp	r0, r4
   38c60:	db03      	blt.n	38c6a <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   38c62:	4629      	mov	r1, r5
   38c64:	4620      	mov	r0, r4
   38c66:	f7ec fc53 	bl	25510 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38c6a:	4809      	ldr	r0, [pc, #36]	; (38c90 <z_set_timeout_expiry+0x70>)
   38c6c:	f7fd fcc6 	bl	365fc <z_spin_unlock_valid>
   38c70:	b940      	cbnz	r0, 38c84 <z_set_timeout_expiry+0x64>
   38c72:	4908      	ldr	r1, [pc, #32]	; (38c94 <z_set_timeout_expiry+0x74>)
   38c74:	4808      	ldr	r0, [pc, #32]	; (38c98 <z_set_timeout_expiry+0x78>)
   38c76:	22b9      	movs	r2, #185	; 0xb9
   38c78:	f003 ff08 	bl	3ca8c <assert_print>
   38c7c:	21b9      	movs	r1, #185	; 0xb9
   38c7e:	4805      	ldr	r0, [pc, #20]	; (38c94 <z_set_timeout_expiry+0x74>)
   38c80:	f003 fefd 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   38c84:	f386 8811 	msr	BASEPRI, r6
   38c88:	f3bf 8f6f 	isb	sy
		}
	}
}
   38c8c:	bd70      	pop	{r4, r5, r6, pc}
   38c8e:	bf00      	nop
   38c90:	2001a554 	.word	0x2001a554
   38c94:	000440d8 	.word	0x000440d8
   38c98:	0004409e 	.word	0x0004409e

00038c9c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   38c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38ca0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   38ca2:	f7fe ffa9 	bl	37bf8 <z_time_slice>
	__asm__ volatile(
   38ca6:	f04f 0320 	mov.w	r3, #32
   38caa:	f3ef 8511 	mrs	r5, BASEPRI
   38cae:	f383 8812 	msr	BASEPRI_MAX, r3
   38cb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38cb6:	4842      	ldr	r0, [pc, #264]	; (38dc0 <sys_clock_announce+0x124>)
   38cb8:	f7fd fc92 	bl	365e0 <z_spin_lock_valid>
   38cbc:	b940      	cbnz	r0, 38cd0 <sys_clock_announce+0x34>
   38cbe:	4941      	ldr	r1, [pc, #260]	; (38dc4 <sys_clock_announce+0x128>)
   38cc0:	4841      	ldr	r0, [pc, #260]	; (38dc8 <sys_clock_announce+0x12c>)
   38cc2:	228e      	movs	r2, #142	; 0x8e
   38cc4:	f003 fee2 	bl	3ca8c <assert_print>
   38cc8:	218e      	movs	r1, #142	; 0x8e
   38cca:	483e      	ldr	r0, [pc, #248]	; (38dc4 <sys_clock_announce+0x128>)
   38ccc:	f003 fed7 	bl	3ca7e <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   38cd0:	4f3e      	ldr	r7, [pc, #248]	; (38dcc <sys_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   38cd2:	483b      	ldr	r0, [pc, #236]	; (38dc0 <sys_clock_announce+0x124>)
	return list->head == list;
   38cd4:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 38dd4 <sys_clock_announce+0x138>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   38cd8:	4e3d      	ldr	r6, [pc, #244]	; (38dd0 <sys_clock_announce+0x134>)
   38cda:	f7fd fc9f 	bl	3661c <z_spin_lock_set_owner>
	announce_remaining = ticks;
   38cde:	603c      	str	r4, [r7, #0]
   38ce0:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   38ce4:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38ce6:	4544      	cmp	r4, r8
   38ce8:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   38cec:	e9d6 1e00 	ldrd	r1, lr, [r6]
   38cf0:	d00b      	beq.n	38d0a <sys_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   38cf2:	b154      	cbz	r4, 38d0a <sys_clock_announce+0x6e>
   38cf4:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   38cf8:	429a      	cmp	r2, r3
   38cfa:	eb70 090c 	sbcs.w	r9, r0, ip
   38cfe:	da23      	bge.n	38d48 <sys_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   38d00:	1a9b      	subs	r3, r3, r2
   38d02:	eb6c 0c00 	sbc.w	ip, ip, r0
   38d06:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   38d0a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   38d0c:	1852      	adds	r2, r2, r1
   38d0e:	eb4e 0000 	adc.w	r0, lr, r0
   38d12:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   38d16:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   38d18:	f7ff fdc2 	bl	388a0 <next_timeout>
   38d1c:	4621      	mov	r1, r4
   38d1e:	f7ec fbf7 	bl	25510 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38d22:	4827      	ldr	r0, [pc, #156]	; (38dc0 <sys_clock_announce+0x124>)
   38d24:	f7fd fc6a 	bl	365fc <z_spin_unlock_valid>
   38d28:	b940      	cbnz	r0, 38d3c <sys_clock_announce+0xa0>
   38d2a:	4926      	ldr	r1, [pc, #152]	; (38dc4 <sys_clock_announce+0x128>)
   38d2c:	4826      	ldr	r0, [pc, #152]	; (38dc8 <sys_clock_announce+0x12c>)
   38d2e:	22b9      	movs	r2, #185	; 0xb9
   38d30:	f003 feac 	bl	3ca8c <assert_print>
   38d34:	21b9      	movs	r1, #185	; 0xb9
   38d36:	4823      	ldr	r0, [pc, #140]	; (38dc4 <sys_clock_announce+0x128>)
   38d38:	f003 fea1 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   38d3c:	f385 8811 	msr	BASEPRI, r5
   38d40:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   38d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   38d48:	1859      	adds	r1, r3, r1
   38d4a:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   38d4e:	1ad3      	subs	r3, r2, r3
   38d50:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   38d52:	2200      	movs	r2, #0
   38d54:	2300      	movs	r3, #0
		curr_tick += dt;
   38d56:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   38d5a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   38d5e:	4620      	mov	r0, r4
   38d60:	f7ff fdc4 	bl	388ec <remove_timeout>
   38d64:	4816      	ldr	r0, [pc, #88]	; (38dc0 <sys_clock_announce+0x124>)
   38d66:	f7fd fc49 	bl	365fc <z_spin_unlock_valid>
   38d6a:	b940      	cbnz	r0, 38d7e <sys_clock_announce+0xe2>
   38d6c:	4915      	ldr	r1, [pc, #84]	; (38dc4 <sys_clock_announce+0x128>)
   38d6e:	4816      	ldr	r0, [pc, #88]	; (38dc8 <sys_clock_announce+0x12c>)
   38d70:	22b9      	movs	r2, #185	; 0xb9
   38d72:	f003 fe8b 	bl	3ca8c <assert_print>
   38d76:	21b9      	movs	r1, #185	; 0xb9
   38d78:	4812      	ldr	r0, [pc, #72]	; (38dc4 <sys_clock_announce+0x128>)
   38d7a:	f003 fe80 	bl	3ca7e <assert_post_action>
   38d7e:	f385 8811 	msr	BASEPRI, r5
   38d82:	f3bf 8f6f 	isb	sy
		t->fn(t);
   38d86:	4620      	mov	r0, r4
   38d88:	68a3      	ldr	r3, [r4, #8]
   38d8a:	4798      	blx	r3
	__asm__ volatile(
   38d8c:	f04f 0320 	mov.w	r3, #32
   38d90:	f3ef 8511 	mrs	r5, BASEPRI
   38d94:	f383 8812 	msr	BASEPRI_MAX, r3
   38d98:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38d9c:	4808      	ldr	r0, [pc, #32]	; (38dc0 <sys_clock_announce+0x124>)
   38d9e:	f7fd fc1f 	bl	365e0 <z_spin_lock_valid>
   38da2:	b940      	cbnz	r0, 38db6 <sys_clock_announce+0x11a>
   38da4:	4907      	ldr	r1, [pc, #28]	; (38dc4 <sys_clock_announce+0x128>)
   38da6:	4808      	ldr	r0, [pc, #32]	; (38dc8 <sys_clock_announce+0x12c>)
   38da8:	228e      	movs	r2, #142	; 0x8e
   38daa:	f003 fe6f 	bl	3ca8c <assert_print>
   38dae:	218e      	movs	r1, #142	; 0x8e
   38db0:	4804      	ldr	r0, [pc, #16]	; (38dc4 <sys_clock_announce+0x128>)
   38db2:	f003 fe64 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   38db6:	4802      	ldr	r0, [pc, #8]	; (38dc0 <sys_clock_announce+0x124>)
   38db8:	f7fd fc30 	bl	3661c <z_spin_lock_set_owner>
	return k;
   38dbc:	e790      	b.n	38ce0 <sys_clock_announce+0x44>
   38dbe:	bf00      	nop
   38dc0:	2001a554 	.word	0x2001a554
   38dc4:	000440d8 	.word	0x000440d8
   38dc8:	0004409e 	.word	0x0004409e
   38dcc:	2001a550 	.word	0x2001a550
   38dd0:	20018fa0 	.word	0x20018fa0
   38dd4:	20014a64 	.word	0x20014a64

00038dd8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   38dd8:	b570      	push	{r4, r5, r6, lr}
   38dda:	f04f 0320 	mov.w	r3, #32
   38dde:	f3ef 8611 	mrs	r6, BASEPRI
   38de2:	f383 8812 	msr	BASEPRI_MAX, r3
   38de6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38dea:	4816      	ldr	r0, [pc, #88]	; (38e44 <sys_clock_tick_get+0x6c>)
   38dec:	f7fd fbf8 	bl	365e0 <z_spin_lock_valid>
   38df0:	b940      	cbnz	r0, 38e04 <sys_clock_tick_get+0x2c>
   38df2:	4915      	ldr	r1, [pc, #84]	; (38e48 <sys_clock_tick_get+0x70>)
   38df4:	4815      	ldr	r0, [pc, #84]	; (38e4c <sys_clock_tick_get+0x74>)
   38df6:	228e      	movs	r2, #142	; 0x8e
   38df8:	f003 fe48 	bl	3ca8c <assert_print>
   38dfc:	218e      	movs	r1, #142	; 0x8e
   38dfe:	4812      	ldr	r0, [pc, #72]	; (38e48 <sys_clock_tick_get+0x70>)
   38e00:	f003 fe3d 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   38e04:	480f      	ldr	r0, [pc, #60]	; (38e44 <sys_clock_tick_get+0x6c>)
   38e06:	f7fd fc09 	bl	3661c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   38e0a:	f7ec fbb1 	bl	25570 <sys_clock_elapsed>
   38e0e:	4b10      	ldr	r3, [pc, #64]	; (38e50 <sys_clock_tick_get+0x78>)
   38e10:	e9d3 4500 	ldrd	r4, r5, [r3]
   38e14:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38e16:	480b      	ldr	r0, [pc, #44]	; (38e44 <sys_clock_tick_get+0x6c>)
   38e18:	f145 0500 	adc.w	r5, r5, #0
   38e1c:	f7fd fbee 	bl	365fc <z_spin_unlock_valid>
   38e20:	b940      	cbnz	r0, 38e34 <sys_clock_tick_get+0x5c>
   38e22:	4909      	ldr	r1, [pc, #36]	; (38e48 <sys_clock_tick_get+0x70>)
   38e24:	4809      	ldr	r0, [pc, #36]	; (38e4c <sys_clock_tick_get+0x74>)
   38e26:	22b9      	movs	r2, #185	; 0xb9
   38e28:	f003 fe30 	bl	3ca8c <assert_print>
   38e2c:	21b9      	movs	r1, #185	; 0xb9
   38e2e:	4806      	ldr	r0, [pc, #24]	; (38e48 <sys_clock_tick_get+0x70>)
   38e30:	f003 fe25 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   38e34:	f386 8811 	msr	BASEPRI, r6
   38e38:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   38e3c:	4620      	mov	r0, r4
   38e3e:	4629      	mov	r1, r5
   38e40:	bd70      	pop	{r4, r5, r6, pc}
   38e42:	bf00      	nop
   38e44:	2001a554 	.word	0x2001a554
   38e48:	000440d8 	.word	0x000440d8
   38e4c:	0004409e 	.word	0x0004409e
   38e50:	20018fa0 	.word	0x20018fa0

00038e54 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   38e54:	b570      	push	{r4, r5, r6, lr}
   38e56:	4604      	mov	r4, r0
	__asm__ volatile(
   38e58:	f04f 0320 	mov.w	r3, #32
   38e5c:	f3ef 8511 	mrs	r5, BASEPRI
   38e60:	f383 8812 	msr	BASEPRI_MAX, r3
   38e64:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38e68:	4841      	ldr	r0, [pc, #260]	; (38f70 <z_timer_expiration_handler+0x11c>)
   38e6a:	f7fd fbb9 	bl	365e0 <z_spin_lock_valid>
   38e6e:	b940      	cbnz	r0, 38e82 <z_timer_expiration_handler+0x2e>
   38e70:	4940      	ldr	r1, [pc, #256]	; (38f74 <z_timer_expiration_handler+0x120>)
   38e72:	4841      	ldr	r0, [pc, #260]	; (38f78 <z_timer_expiration_handler+0x124>)
   38e74:	228e      	movs	r2, #142	; 0x8e
   38e76:	f003 fe09 	bl	3ca8c <assert_print>
   38e7a:	218e      	movs	r1, #142	; 0x8e
   38e7c:	483d      	ldr	r0, [pc, #244]	; (38f74 <z_timer_expiration_handler+0x120>)
   38e7e:	f003 fdfe 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   38e82:	483b      	ldr	r0, [pc, #236]	; (38f70 <z_timer_expiration_handler+0x11c>)
   38e84:	f7fd fbca 	bl	3661c <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   38e88:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   38e8c:	3301      	adds	r3, #1
   38e8e:	f142 0200 	adc.w	r2, r2, #0
   38e92:	2b02      	cmp	r3, #2
   38e94:	f172 0300 	sbcs.w	r3, r2, #0
   38e98:	d305      	bcc.n	38ea6 <z_timer_expiration_handler+0x52>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   38e9a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   38e9e:	4620      	mov	r0, r4
   38ea0:	4936      	ldr	r1, [pc, #216]	; (38f7c <z_timer_expiration_handler+0x128>)
   38ea2:	f7ff fd63 	bl	3896c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   38ea6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   38ea8:	3301      	adds	r3, #1
   38eaa:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   38eac:	6a23      	ldr	r3, [r4, #32]
   38eae:	b35b      	cbz	r3, 38f08 <z_timer_expiration_handler+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38eb0:	482f      	ldr	r0, [pc, #188]	; (38f70 <z_timer_expiration_handler+0x11c>)
   38eb2:	f7fd fba3 	bl	365fc <z_spin_unlock_valid>
   38eb6:	b940      	cbnz	r0, 38eca <z_timer_expiration_handler+0x76>
   38eb8:	492e      	ldr	r1, [pc, #184]	; (38f74 <z_timer_expiration_handler+0x120>)
   38eba:	482f      	ldr	r0, [pc, #188]	; (38f78 <z_timer_expiration_handler+0x124>)
   38ebc:	22b9      	movs	r2, #185	; 0xb9
   38ebe:	f003 fde5 	bl	3ca8c <assert_print>
   38ec2:	21b9      	movs	r1, #185	; 0xb9
   38ec4:	482b      	ldr	r0, [pc, #172]	; (38f74 <z_timer_expiration_handler+0x120>)
   38ec6:	f003 fdda 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   38eca:	f385 8811 	msr	BASEPRI, r5
   38ece:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   38ed2:	4620      	mov	r0, r4
   38ed4:	6a23      	ldr	r3, [r4, #32]
   38ed6:	4798      	blx	r3
	__asm__ volatile(
   38ed8:	f04f 0320 	mov.w	r3, #32
   38edc:	f3ef 8511 	mrs	r5, BASEPRI
   38ee0:	f383 8812 	msr	BASEPRI_MAX, r3
   38ee4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38ee8:	4821      	ldr	r0, [pc, #132]	; (38f70 <z_timer_expiration_handler+0x11c>)
   38eea:	f7fd fb79 	bl	365e0 <z_spin_lock_valid>
   38eee:	b940      	cbnz	r0, 38f02 <z_timer_expiration_handler+0xae>
   38ef0:	4920      	ldr	r1, [pc, #128]	; (38f74 <z_timer_expiration_handler+0x120>)
   38ef2:	4821      	ldr	r0, [pc, #132]	; (38f78 <z_timer_expiration_handler+0x124>)
   38ef4:	228e      	movs	r2, #142	; 0x8e
   38ef6:	f003 fdc9 	bl	3ca8c <assert_print>
   38efa:	218e      	movs	r1, #142	; 0x8e
   38efc:	481d      	ldr	r0, [pc, #116]	; (38f74 <z_timer_expiration_handler+0x120>)
   38efe:	f003 fdbe 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   38f02:	481b      	ldr	r0, [pc, #108]	; (38f70 <z_timer_expiration_handler+0x11c>)
   38f04:	f7fd fb8a 	bl	3661c <z_spin_lock_set_owner>
	return list->head == list;
   38f08:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38f0c:	42a6      	cmp	r6, r4
   38f0e:	d000      	beq.n	38f12 <z_timer_expiration_handler+0xbe>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   38f10:	b98e      	cbnz	r6, 38f36 <z_timer_expiration_handler+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38f12:	4817      	ldr	r0, [pc, #92]	; (38f70 <z_timer_expiration_handler+0x11c>)
   38f14:	f7fd fb72 	bl	365fc <z_spin_unlock_valid>
   38f18:	b940      	cbnz	r0, 38f2c <z_timer_expiration_handler+0xd8>
   38f1a:	4916      	ldr	r1, [pc, #88]	; (38f74 <z_timer_expiration_handler+0x120>)
   38f1c:	4816      	ldr	r0, [pc, #88]	; (38f78 <z_timer_expiration_handler+0x124>)
   38f1e:	22b9      	movs	r2, #185	; 0xb9
   38f20:	f003 fdb4 	bl	3ca8c <assert_print>
   38f24:	21b9      	movs	r1, #185	; 0xb9
   38f26:	4813      	ldr	r0, [pc, #76]	; (38f74 <z_timer_expiration_handler+0x120>)
   38f28:	f003 fda9 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   38f2c:	f385 8811 	msr	BASEPRI, r5
   38f30:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   38f34:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   38f36:	4630      	mov	r0, r6
   38f38:	f7fe fca8 	bl	3788c <z_unpend_thread_no_timeout>
   38f3c:	2300      	movs	r3, #0
   38f3e:	480c      	ldr	r0, [pc, #48]	; (38f70 <z_timer_expiration_handler+0x11c>)
   38f40:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
   38f44:	f7fd fb5a 	bl	365fc <z_spin_unlock_valid>
   38f48:	b940      	cbnz	r0, 38f5c <z_timer_expiration_handler+0x108>
   38f4a:	490a      	ldr	r1, [pc, #40]	; (38f74 <z_timer_expiration_handler+0x120>)
   38f4c:	480a      	ldr	r0, [pc, #40]	; (38f78 <z_timer_expiration_handler+0x124>)
   38f4e:	22b9      	movs	r2, #185	; 0xb9
   38f50:	f003 fd9c 	bl	3ca8c <assert_print>
   38f54:	21b9      	movs	r1, #185	; 0xb9
   38f56:	4807      	ldr	r0, [pc, #28]	; (38f74 <z_timer_expiration_handler+0x120>)
   38f58:	f003 fd91 	bl	3ca7e <assert_post_action>
   38f5c:	f385 8811 	msr	BASEPRI, r5
   38f60:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   38f64:	4630      	mov	r0, r6
}
   38f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   38f6a:	f7fe bef5 	b.w	37d58 <z_ready_thread>
   38f6e:	bf00      	nop
   38f70:	2001a558 	.word	0x2001a558
   38f74:	000440d8 	.word	0x000440d8
   38f78:	0004409e 	.word	0x0004409e
   38f7c:	00038e55 	.word	0x00038e55

00038f80 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   38f80:	f1b3 3fff 	cmp.w	r3, #4294967295
   38f84:	bf08      	it	eq
   38f86:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   38f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38f8e:	4605      	mov	r5, r0
   38f90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   38f94:	4690      	mov	r8, r2
   38f96:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   38f98:	d040      	beq.n	3901c <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   38f9a:	f1b1 3fff 	cmp.w	r1, #4294967295
   38f9e:	bf08      	it	eq
   38fa0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   38fa4:	4604      	mov	r4, r0
   38fa6:	460e      	mov	r6, r1
   38fa8:	d016      	beq.n	38fd8 <z_impl_k_timer_start+0x58>
   38faa:	ea51 0c00 	orrs.w	ip, r1, r0
   38fae:	d013      	beq.n	38fd8 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   38fb0:	f06f 0c01 	mvn.w	ip, #1
   38fb4:	ebbc 0c00 	subs.w	ip, ip, r0
   38fb8:	f04f 3cff 	mov.w	ip, #4294967295
   38fbc:	eb6c 0c01 	sbc.w	ip, ip, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   38fc0:	f1bc 0f00 	cmp.w	ip, #0
   38fc4:	da08      	bge.n	38fd8 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   38fc6:	2802      	cmp	r0, #2
   38fc8:	f171 0100 	sbcs.w	r1, r1, #0
   38fcc:	bfbc      	itt	lt
   38fce:	2402      	movlt	r4, #2
   38fd0:	2600      	movlt	r6, #0
   38fd2:	3c01      	subs	r4, #1
   38fd4:	f146 36ff 	adc.w	r6, r6, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   38fd8:	f06f 0101 	mvn.w	r1, #1
   38fdc:	1a89      	subs	r1, r1, r2
   38fde:	f04f 31ff 	mov.w	r1, #4294967295
   38fe2:	eb61 0103 	sbc.w	r1, r1, r3
   38fe6:	2900      	cmp	r1, #0
   38fe8:	da09      	bge.n	38ffe <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   38fea:	2a01      	cmp	r2, #1
   38fec:	f173 0100 	sbcs.w	r1, r3, #0
   38ff0:	bfbc      	itt	lt
   38ff2:	2201      	movlt	r2, #1
   38ff4:	2300      	movlt	r3, #0
   38ff6:	f112 38ff 	adds.w	r8, r2, #4294967295
   38ffa:	f143 37ff 	adc.w	r7, r3, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   38ffe:	4628      	mov	r0, r5
   39000:	f7ff fd62 	bl	38ac8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   39004:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   39006:	4642      	mov	r2, r8
	timer->status = 0U;
   39008:	632b      	str	r3, [r5, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   3900a:	4628      	mov	r0, r5
   3900c:	463b      	mov	r3, r7
	timer->period = period;
   3900e:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28
		     duration);
}
   39012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   39016:	4902      	ldr	r1, [pc, #8]	; (39020 <z_impl_k_timer_start+0xa0>)
   39018:	f7ff bca8 	b.w	3896c <z_add_timeout>
}
   3901c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39020:	00038e55 	.word	0x00038e55

00039024 <z_impl_k_timer_status_sync>:
}
#include <syscalls/k_timer_status_get_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_sync(struct k_timer *timer)
{
   39024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   39026:	4604      	mov	r4, r0
   39028:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3902c:	b143      	cbz	r3, 39040 <z_impl_k_timer_status_sync+0x1c>
   3902e:	4930      	ldr	r1, [pc, #192]	; (390f0 <z_impl_k_timer_status_sync+0xcc>)
   39030:	4830      	ldr	r0, [pc, #192]	; (390f4 <z_impl_k_timer_status_sync+0xd0>)
   39032:	22c6      	movs	r2, #198	; 0xc6
   39034:	f003 fd2a 	bl	3ca8c <assert_print>
   39038:	21c6      	movs	r1, #198	; 0xc6
   3903a:	482d      	ldr	r0, [pc, #180]	; (390f0 <z_impl_k_timer_status_sync+0xcc>)
   3903c:	f003 fd1f 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   39040:	f04f 0320 	mov.w	r3, #32
   39044:	f3ef 8711 	mrs	r7, BASEPRI
   39048:	f383 8812 	msr	BASEPRI_MAX, r3
   3904c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39050:	4829      	ldr	r0, [pc, #164]	; (390f8 <z_impl_k_timer_status_sync+0xd4>)
	k.key = arch_irq_lock();
   39052:	463d      	mov	r5, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39054:	f7fd fac4 	bl	365e0 <z_spin_lock_valid>
   39058:	b940      	cbnz	r0, 3906c <z_impl_k_timer_status_sync+0x48>
   3905a:	4928      	ldr	r1, [pc, #160]	; (390fc <z_impl_k_timer_status_sync+0xd8>)
   3905c:	4825      	ldr	r0, [pc, #148]	; (390f4 <z_impl_k_timer_status_sync+0xd0>)
   3905e:	228e      	movs	r2, #142	; 0x8e
   39060:	f003 fd14 	bl	3ca8c <assert_print>
   39064:	218e      	movs	r1, #142	; 0x8e
   39066:	4825      	ldr	r0, [pc, #148]	; (390fc <z_impl_k_timer_status_sync+0xd8>)
   39068:	f003 fd09 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   3906c:	4822      	ldr	r0, [pc, #136]	; (390f8 <z_impl_k_timer_status_sync+0xd4>)
   3906e:	f7fd fad5 	bl	3661c <z_spin_lock_set_owner>

		return result;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;
   39072:	6b26      	ldr	r6, [r4, #48]	; 0x30

	if (result == 0U) {
   39074:	bb36      	cbnz	r6, 390c4 <z_impl_k_timer_status_sync+0xa0>
		if (!z_is_inactive_timeout(&timer->timeout)) {
   39076:	6823      	ldr	r3, [r4, #0]
   39078:	b323      	cbz	r3, 390c4 <z_impl_k_timer_status_sync+0xa0>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_timer, status_sync, timer, K_FOREVER);

			/* wait for timer to expire or stop */
			(void)z_pend_curr(&lock, key, &timer->wait_q, K_FOREVER);
   3907a:	f04f 33ff 	mov.w	r3, #4294967295
   3907e:	f04f 32ff 	mov.w	r2, #4294967295
   39082:	4639      	mov	r1, r7
   39084:	e9cd 2300 	strd	r2, r3, [sp]
   39088:	481b      	ldr	r0, [pc, #108]	; (390f8 <z_impl_k_timer_status_sync+0xd4>)
   3908a:	f104 0218 	add.w	r2, r4, #24
   3908e:	f7ff f80b 	bl	380a8 <z_pend_curr>
   39092:	f04f 0320 	mov.w	r3, #32
   39096:	f3ef 8511 	mrs	r5, BASEPRI
   3909a:	f383 8812 	msr	BASEPRI_MAX, r3
   3909e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   390a2:	4815      	ldr	r0, [pc, #84]	; (390f8 <z_impl_k_timer_status_sync+0xd4>)
   390a4:	f7fd fa9c 	bl	365e0 <z_spin_lock_valid>
   390a8:	b940      	cbnz	r0, 390bc <z_impl_k_timer_status_sync+0x98>
   390aa:	4914      	ldr	r1, [pc, #80]	; (390fc <z_impl_k_timer_status_sync+0xd8>)
   390ac:	4811      	ldr	r0, [pc, #68]	; (390f4 <z_impl_k_timer_status_sync+0xd0>)
   390ae:	228e      	movs	r2, #142	; 0x8e
   390b0:	f003 fcec 	bl	3ca8c <assert_print>
   390b4:	218e      	movs	r1, #142	; 0x8e
   390b6:	4811      	ldr	r0, [pc, #68]	; (390fc <z_impl_k_timer_status_sync+0xd8>)
   390b8:	f003 fce1 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   390bc:	480e      	ldr	r0, [pc, #56]	; (390f8 <z_impl_k_timer_status_sync+0xd4>)
   390be:	f7fd faad 	bl	3661c <z_spin_lock_set_owner>

			/* get updated timer status */
			key = k_spin_lock(&lock);
			result = timer->status;
   390c2:	6b26      	ldr	r6, [r4, #48]	; 0x30
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0U;
   390c4:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   390c6:	480c      	ldr	r0, [pc, #48]	; (390f8 <z_impl_k_timer_status_sync+0xd4>)
   390c8:	6323      	str	r3, [r4, #48]	; 0x30
   390ca:	f7fd fa97 	bl	365fc <z_spin_unlock_valid>
   390ce:	b940      	cbnz	r0, 390e2 <z_impl_k_timer_status_sync+0xbe>
   390d0:	490a      	ldr	r1, [pc, #40]	; (390fc <z_impl_k_timer_status_sync+0xd8>)
   390d2:	4808      	ldr	r0, [pc, #32]	; (390f4 <z_impl_k_timer_status_sync+0xd0>)
   390d4:	22b9      	movs	r2, #185	; 0xb9
   390d6:	f003 fcd9 	bl	3ca8c <assert_print>
   390da:	21b9      	movs	r1, #185	; 0xb9
   390dc:	4807      	ldr	r0, [pc, #28]	; (390fc <z_impl_k_timer_status_sync+0xd8>)
   390de:	f003 fcce 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   390e2:	f385 8811 	msr	BASEPRI, r5
   390e6:	f3bf 8f6f 	isb	sy
	 * @note	New tracing hook
	 */
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_timer, status_sync, timer, result);

	return result;
}
   390ea:	4630      	mov	r0, r6
   390ec:	b003      	add	sp, #12
   390ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   390f0:	0004bc3f 	.word	0x0004bc3f
   390f4:	0004409e 	.word	0x0004409e
   390f8:	2001a558 	.word	0x2001a558
   390fc:	000440d8 	.word	0x000440d8

00039100 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   39100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   39104:	2600      	movs	r6, #0
{
   39106:	4614      	mov	r4, r2
   39108:	4681      	mov	r9, r0
	int events_registered = 0;
   3910a:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3910c:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 392dc <register_events+0x1dc>
   39110:	4f6f      	ldr	r7, [pc, #444]	; (392d0 <register_events+0x1d0>)
   39112:	4d70      	ldr	r5, [pc, #448]	; (392d4 <register_events+0x1d4>)
{
   39114:	9100      	str	r1, [sp, #0]
   39116:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   39118:	9b00      	ldr	r3, [sp, #0]
   3911a:	429e      	cmp	r6, r3
   3911c:	db03      	blt.n	39126 <register_events+0x26>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   3911e:	4640      	mov	r0, r8
   39120:	b003      	add	sp, #12
   39122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   39126:	f04f 0220 	mov.w	r2, #32
   3912a:	f3ef 8b11 	mrs	fp, BASEPRI
   3912e:	f382 8812 	msr	BASEPRI_MAX, r2
   39132:	f3bf 8f6f 	isb	sy
   39136:	4650      	mov	r0, sl
   39138:	f7fd fa52 	bl	365e0 <z_spin_lock_valid>
   3913c:	b940      	cbnz	r0, 39150 <register_events+0x50>
   3913e:	4639      	mov	r1, r7
   39140:	4628      	mov	r0, r5
   39142:	228e      	movs	r2, #142	; 0x8e
   39144:	f003 fca2 	bl	3ca8c <assert_print>
   39148:	218e      	movs	r1, #142	; 0x8e
   3914a:	4638      	mov	r0, r7
   3914c:	f003 fc97 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   39150:	4650      	mov	r0, sl
   39152:	f7fd fa63 	bl	3661c <z_spin_lock_set_owner>
	switch (event->type) {
   39156:	f899 200d 	ldrb.w	r2, [r9, #13]
   3915a:	f002 021f 	and.w	r2, r2, #31
   3915e:	2a08      	cmp	r2, #8
   39160:	d853      	bhi.n	3920a <register_events+0x10a>
   39162:	e8df f002 	tbb	[pc, r2]
   39166:	4431      	.short	0x4431
   39168:	522d5205 	.word	0x522d5205
   3916c:	5252      	.short	0x5252
   3916e:	4b          	.byte	0x4b
   3916f:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   39170:	f8d9 2010 	ldr.w	r2, [r9, #16]
   39174:	6892      	ldr	r2, [r2, #8]
   39176:	b33a      	cbz	r2, 391c8 <register_events+0xc8>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   39178:	2202      	movs	r2, #2
	event->poller = NULL;
   3917a:	2000      	movs	r0, #0
	event->state |= state;
   3917c:	f8d9 100c 	ldr.w	r1, [r9, #12]
	event->poller = NULL;
   39180:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   39184:	f3c1 3c45 	ubfx	ip, r1, #13, #6
   39188:	ea42 020c 	orr.w	r2, r2, ip
   3918c:	f362 3152 	bfi	r1, r2, #13, #6
   39190:	f8c9 100c 	str.w	r1, [r9, #12]
			poller->is_polling = false;
   39194:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39196:	4650      	mov	r0, sl
   39198:	f7fd fa30 	bl	365fc <z_spin_unlock_valid>
   3919c:	b940      	cbnz	r0, 391b0 <register_events+0xb0>
   3919e:	4639      	mov	r1, r7
   391a0:	4628      	mov	r0, r5
   391a2:	22b9      	movs	r2, #185	; 0xb9
   391a4:	f003 fc72 	bl	3ca8c <assert_print>
   391a8:	21b9      	movs	r1, #185	; 0xb9
   391aa:	4638      	mov	r0, r7
   391ac:	f003 fc67 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   391b0:	f38b 8811 	msr	BASEPRI, fp
   391b4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   391b8:	3601      	adds	r6, #1
   391ba:	f109 0914 	add.w	r9, r9, #20
   391be:	e7ab      	b.n	39118 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   391c0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   391c4:	6812      	ldr	r2, [r2, #0]
   391c6:	bb52      	cbnz	r2, 3921e <register_events+0x11e>
		} else if (!just_check && poller->is_polling) {
   391c8:	9b01      	ldr	r3, [sp, #4]
   391ca:	2b00      	cmp	r3, #0
   391cc:	d1e3      	bne.n	39196 <register_events+0x96>
   391ce:	7822      	ldrb	r2, [r4, #0]
   391d0:	2a00      	cmp	r2, #0
   391d2:	d0e0      	beq.n	39196 <register_events+0x96>
	switch (event->type) {
   391d4:	f899 200d 	ldrb.w	r2, [r9, #13]
   391d8:	f002 021f 	and.w	r2, r2, #31
   391dc:	2a08      	cmp	r2, #8
   391de:	d86d      	bhi.n	392bc <register_events+0x1bc>
   391e0:	e8df f002 	tbb	[pc, r2]
   391e4:	6c1f4932 	.word	0x6c1f4932
   391e8:	6c6c6c37 	.word	0x6c6c6c37
   391ec:	5a          	.byte	0x5a
   391ed:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   391ee:	f8d9 2010 	ldr.w	r2, [r9, #16]
   391f2:	6892      	ldr	r2, [r2, #8]
   391f4:	2a00      	cmp	r2, #0
   391f6:	d0e7      	beq.n	391c8 <register_events+0xc8>
			*state = K_POLL_STATE_SIGNALED;
   391f8:	2201      	movs	r2, #1
   391fa:	e7be      	b.n	3917a <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   391fc:	f8d9 2010 	ldr.w	r2, [r9, #16]
   39200:	6a52      	ldr	r2, [r2, #36]	; 0x24
   39202:	2a00      	cmp	r2, #0
   39204:	d0e0      	beq.n	391c8 <register_events+0xc8>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   39206:	2210      	movs	r2, #16
   39208:	e7b7      	b.n	3917a <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   3920a:	4628      	mov	r0, r5
   3920c:	225c      	movs	r2, #92	; 0x5c
   3920e:	4932      	ldr	r1, [pc, #200]	; (392d8 <register_events+0x1d8>)
   39210:	f003 fc3c 	bl	3ca8c <assert_print>
   39214:	215c      	movs	r1, #92	; 0x5c
   39216:	4830      	ldr	r0, [pc, #192]	; (392d8 <register_events+0x1d8>)
   39218:	f003 fc31 	bl	3ca7e <assert_post_action>
		break;
   3921c:	e7d4      	b.n	391c8 <register_events+0xc8>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   3921e:	2204      	movs	r2, #4
   39220:	e7ab      	b.n	3917a <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   39222:	f8d9 2010 	ldr.w	r2, [r9, #16]
   39226:	b942      	cbnz	r2, 3923a <register_events+0x13a>
   39228:	4628      	mov	r0, r5
   3922a:	492b      	ldr	r1, [pc, #172]	; (392d8 <register_events+0x1d8>)
   3922c:	2286      	movs	r2, #134	; 0x86
   3922e:	f003 fc2d 	bl	3ca8c <assert_print>
   39232:	2186      	movs	r1, #134	; 0x86
   39234:	4828      	ldr	r0, [pc, #160]	; (392d8 <register_events+0x1d8>)
   39236:	f003 fc22 	bl	3ca7e <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   3923a:	4622      	mov	r2, r4
   3923c:	4649      	mov	r1, r9
   3923e:	f8d9 0010 	ldr.w	r0, [r9, #16]
   39242:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   39244:	f007 ff9a 	bl	4117c <add_event>
	event->poller = poller;
   39248:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   3924c:	f108 0801 	add.w	r8, r8, #1
   39250:	e7a1      	b.n	39196 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   39252:	f8d9 2010 	ldr.w	r2, [r9, #16]
   39256:	b942      	cbnz	r2, 3926a <register_events+0x16a>
   39258:	4628      	mov	r0, r5
   3925a:	491f      	ldr	r1, [pc, #124]	; (392d8 <register_events+0x1d8>)
   3925c:	228a      	movs	r2, #138	; 0x8a
   3925e:	f003 fc15 	bl	3ca8c <assert_print>
   39262:	218a      	movs	r1, #138	; 0x8a
   39264:	481c      	ldr	r0, [pc, #112]	; (392d8 <register_events+0x1d8>)
   39266:	f003 fc0a 	bl	3ca7e <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   3926a:	f8d9 0010 	ldr.w	r0, [r9, #16]
   3926e:	4622      	mov	r2, r4
   39270:	4649      	mov	r1, r9
   39272:	3014      	adds	r0, #20
   39274:	e7e6      	b.n	39244 <register_events+0x144>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   39276:	f8d9 2010 	ldr.w	r2, [r9, #16]
   3927a:	b942      	cbnz	r2, 3928e <register_events+0x18e>
   3927c:	4628      	mov	r0, r5
   3927e:	4916      	ldr	r1, [pc, #88]	; (392d8 <register_events+0x1d8>)
   39280:	228e      	movs	r2, #142	; 0x8e
   39282:	f003 fc03 	bl	3ca8c <assert_print>
   39286:	218e      	movs	r1, #142	; 0x8e
   39288:	4813      	ldr	r0, [pc, #76]	; (392d8 <register_events+0x1d8>)
   3928a:	f003 fbf8 	bl	3ca7e <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   3928e:	4622      	mov	r2, r4
   39290:	4649      	mov	r1, r9
   39292:	f8d9 0010 	ldr.w	r0, [r9, #16]
   39296:	e7d5      	b.n	39244 <register_events+0x144>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   39298:	f8d9 2010 	ldr.w	r2, [r9, #16]
   3929c:	b942      	cbnz	r2, 392b0 <register_events+0x1b0>
   3929e:	4628      	mov	r0, r5
   392a0:	490d      	ldr	r1, [pc, #52]	; (392d8 <register_events+0x1d8>)
   392a2:	2292      	movs	r2, #146	; 0x92
   392a4:	f003 fbf2 	bl	3ca8c <assert_print>
   392a8:	2192      	movs	r1, #146	; 0x92
   392aa:	480b      	ldr	r0, [pc, #44]	; (392d8 <register_events+0x1d8>)
   392ac:	f003 fbe7 	bl	3ca7e <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   392b0:	f8d9 0010 	ldr.w	r0, [r9, #16]
   392b4:	4622      	mov	r2, r4
   392b6:	4649      	mov	r1, r9
   392b8:	3028      	adds	r0, #40	; 0x28
   392ba:	e7c3      	b.n	39244 <register_events+0x144>
		__ASSERT(false, "invalid event type\n");
   392bc:	4628      	mov	r0, r5
   392be:	2299      	movs	r2, #153	; 0x99
   392c0:	4905      	ldr	r1, [pc, #20]	; (392d8 <register_events+0x1d8>)
   392c2:	f003 fbe3 	bl	3ca8c <assert_print>
   392c6:	2199      	movs	r1, #153	; 0x99
   392c8:	4803      	ldr	r0, [pc, #12]	; (392d8 <register_events+0x1d8>)
   392ca:	f003 fbd8 	bl	3ca7e <assert_post_action>
		break;
   392ce:	e7bb      	b.n	39248 <register_events+0x148>
   392d0:	000440d8 	.word	0x000440d8
   392d4:	0004409e 	.word	0x0004409e
   392d8:	0004bc61 	.word	0x0004bc61
   392dc:	2001a55c 	.word	0x2001a55c

000392e0 <clear_event_registrations>:
{
   392e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   392e4:	2414      	movs	r4, #20
   392e6:	4690      	mov	r8, r2
	while (num_events--) {
   392e8:	460f      	mov	r7, r1
   392ea:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   392ee:	4d43      	ldr	r5, [pc, #268]	; (393fc <clear_event_registrations+0x11c>)
   392f0:	4e43      	ldr	r6, [pc, #268]	; (39400 <clear_event_registrations+0x120>)
   392f2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 39408 <clear_event_registrations+0x128>
	while (num_events--) {
   392f6:	b90f      	cbnz	r7, 392fc <clear_event_registrations+0x1c>
}
   392f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   392fc:	2300      	movs	r3, #0
   392fe:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   39302:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   39306:	f1a4 0a14 	sub.w	sl, r4, #20
   3930a:	f003 031f 	and.w	r3, r3, #31
   3930e:	2b08      	cmp	r3, #8
   39310:	d83e      	bhi.n	39390 <clear_event_registrations+0xb0>
   39312:	e8df f003 	tbb	[pc, r3]
   39316:	2746      	.short	0x2746
   39318:	3d1c3d05 	.word	0x3d1c3d05
   3931c:	3d3d      	.short	0x3d3d
   3931e:	32          	.byte	0x32
   3931f:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   39320:	f854 3c04 	ldr.w	r3, [r4, #-4]
   39324:	b943      	cbnz	r3, 39338 <clear_event_registrations+0x58>
   39326:	4629      	mov	r1, r5
   39328:	22a9      	movs	r2, #169	; 0xa9
   3932a:	4630      	mov	r0, r6
   3932c:	f003 fbae 	bl	3ca8c <assert_print>
   39330:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   39332:	4628      	mov	r0, r5
   39334:	f003 fba3 	bl	3ca7e <assert_post_action>
	return node->next != NULL;
   39338:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   3933c:	b38b      	cbz	r3, 393a2 <clear_event_registrations+0xc2>
	sys_dnode_t *const prev = node->prev;
   3933e:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   39342:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   39344:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   39346:	2300      	movs	r3, #0
	node->prev = NULL;
   39348:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   3934c:	e029      	b.n	393a2 <clear_event_registrations+0xc2>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3934e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   39352:	2b00      	cmp	r3, #0
   39354:	d1f0      	bne.n	39338 <clear_event_registrations+0x58>
   39356:	4629      	mov	r1, r5
   39358:	22ad      	movs	r2, #173	; 0xad
   3935a:	4630      	mov	r0, r6
   3935c:	f003 fb96 	bl	3ca8c <assert_print>
   39360:	21ad      	movs	r1, #173	; 0xad
   39362:	e7e6      	b.n	39332 <clear_event_registrations+0x52>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   39364:	f854 3c04 	ldr.w	r3, [r4, #-4]
   39368:	2b00      	cmp	r3, #0
   3936a:	d1e5      	bne.n	39338 <clear_event_registrations+0x58>
   3936c:	4629      	mov	r1, r5
   3936e:	22b1      	movs	r2, #177	; 0xb1
   39370:	4630      	mov	r0, r6
   39372:	f003 fb8b 	bl	3ca8c <assert_print>
   39376:	21b1      	movs	r1, #177	; 0xb1
   39378:	e7db      	b.n	39332 <clear_event_registrations+0x52>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   3937a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3937e:	2b00      	cmp	r3, #0
   39380:	d1da      	bne.n	39338 <clear_event_registrations+0x58>
   39382:	4629      	mov	r1, r5
   39384:	22b5      	movs	r2, #181	; 0xb5
   39386:	4630      	mov	r0, r6
   39388:	f003 fb80 	bl	3ca8c <assert_print>
   3938c:	21b5      	movs	r1, #181	; 0xb5
   3938e:	e7d0      	b.n	39332 <clear_event_registrations+0x52>
		__ASSERT(false, "invalid event type\n");
   39390:	4629      	mov	r1, r5
   39392:	4630      	mov	r0, r6
   39394:	22bc      	movs	r2, #188	; 0xbc
   39396:	f003 fb79 	bl	3ca8c <assert_print>
   3939a:	21bc      	movs	r1, #188	; 0xbc
   3939c:	4628      	mov	r0, r5
   3939e:	f003 fb6e 	bl	3ca7e <assert_post_action>
   393a2:	4648      	mov	r0, r9
   393a4:	f7fd f92a 	bl	365fc <z_spin_unlock_valid>
   393a8:	b940      	cbnz	r0, 393bc <clear_event_registrations+0xdc>
   393aa:	4630      	mov	r0, r6
   393ac:	4915      	ldr	r1, [pc, #84]	; (39404 <clear_event_registrations+0x124>)
   393ae:	22b9      	movs	r2, #185	; 0xb9
   393b0:	f003 fb6c 	bl	3ca8c <assert_print>
   393b4:	21b9      	movs	r1, #185	; 0xb9
   393b6:	4813      	ldr	r0, [pc, #76]	; (39404 <clear_event_registrations+0x124>)
   393b8:	f003 fb61 	bl	3ca7e <assert_post_action>
   393bc:	f388 8811 	msr	BASEPRI, r8
   393c0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   393c4:	f04f 0320 	mov.w	r3, #32
   393c8:	f3ef 8811 	mrs	r8, BASEPRI
   393cc:	f383 8812 	msr	BASEPRI_MAX, r3
   393d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   393d4:	4648      	mov	r0, r9
   393d6:	f7fd f903 	bl	365e0 <z_spin_lock_valid>
   393da:	b940      	cbnz	r0, 393ee <clear_event_registrations+0x10e>
   393dc:	4630      	mov	r0, r6
   393de:	4909      	ldr	r1, [pc, #36]	; (39404 <clear_event_registrations+0x124>)
   393e0:	228e      	movs	r2, #142	; 0x8e
   393e2:	f003 fb53 	bl	3ca8c <assert_print>
   393e6:	218e      	movs	r1, #142	; 0x8e
   393e8:	4806      	ldr	r0, [pc, #24]	; (39404 <clear_event_registrations+0x124>)
   393ea:	f003 fb48 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   393ee:	4648      	mov	r0, r9
   393f0:	f7fd f914 	bl	3661c <z_spin_lock_set_owner>
	return k;
   393f4:	4654      	mov	r4, sl
   393f6:	3f01      	subs	r7, #1
   393f8:	e77d      	b.n	392f6 <clear_event_registrations+0x16>
   393fa:	bf00      	nop
   393fc:	0004bc61 	.word	0x0004bc61
   39400:	0004409e 	.word	0x0004409e
   39404:	000440d8 	.word	0x000440d8
   39408:	2001a55c 	.word	0x2001a55c

0003940c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   3940c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   39410:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   39412:	4b63      	ldr	r3, [pc, #396]	; (395a0 <z_impl_k_poll+0x194>)
{
   39414:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   39416:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   39418:	2301      	movs	r3, #1
{
   3941a:	4688      	mov	r8, r1
   3941c:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   3941e:	f107 0960 	add.w	r9, r7, #96	; 0x60
	poller->is_polling = true;
   39422:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   39426:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
   3942a:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   3942e:	b153      	cbz	r3, 39446 <z_impl_k_poll+0x3a>
   39430:	495c      	ldr	r1, [pc, #368]	; (395a4 <z_impl_k_poll+0x198>)
   39432:	485d      	ldr	r0, [pc, #372]	; (395a8 <z_impl_k_poll+0x19c>)
   39434:	f44f 728d 	mov.w	r2, #282	; 0x11a
   39438:	f003 fb28 	bl	3ca8c <assert_print>
   3943c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   39440:	4858      	ldr	r0, [pc, #352]	; (395a4 <z_impl_k_poll+0x198>)
   39442:	f003 fb1c 	bl	3ca7e <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   39446:	b954      	cbnz	r4, 3945e <z_impl_k_poll+0x52>
   39448:	4956      	ldr	r1, [pc, #344]	; (395a4 <z_impl_k_poll+0x198>)
   3944a:	4857      	ldr	r0, [pc, #348]	; (395a8 <z_impl_k_poll+0x19c>)
   3944c:	f240 121b 	movw	r2, #283	; 0x11b
   39450:	f003 fb1c 	bl	3ca8c <assert_print>
   39454:	f240 111b 	movw	r1, #283	; 0x11b
   39458:	4852      	ldr	r0, [pc, #328]	; (395a4 <z_impl_k_poll+0x198>)
   3945a:	f003 fb10 	bl	3ca7e <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   3945e:	f1b8 0f00 	cmp.w	r8, #0
   39462:	da0a      	bge.n	3947a <z_impl_k_poll+0x6e>
   39464:	494f      	ldr	r1, [pc, #316]	; (395a4 <z_impl_k_poll+0x198>)
   39466:	4850      	ldr	r0, [pc, #320]	; (395a8 <z_impl_k_poll+0x19c>)
   39468:	f44f 728e 	mov.w	r2, #284	; 0x11c
   3946c:	f003 fb0e 	bl	3ca8c <assert_print>
   39470:	f44f 718e 	mov.w	r1, #284	; 0x11c
   39474:	484b      	ldr	r0, [pc, #300]	; (395a4 <z_impl_k_poll+0x198>)
   39476:	f003 fb02 	bl	3ca7e <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   3947a:	ea56 0305 	orrs.w	r3, r6, r5
   3947e:	bf0c      	ite	eq
   39480:	2301      	moveq	r3, #1
   39482:	2300      	movne	r3, #0
   39484:	4641      	mov	r1, r8
   39486:	464a      	mov	r2, r9
   39488:	4620      	mov	r0, r4
   3948a:	f7ff fe39 	bl	39100 <register_events>
   3948e:	4680      	mov	r8, r0
   39490:	f04f 0320 	mov.w	r3, #32
   39494:	f3ef 8911 	mrs	r9, BASEPRI
   39498:	f383 8812 	msr	BASEPRI_MAX, r3
   3949c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   394a0:	4842      	ldr	r0, [pc, #264]	; (395ac <z_impl_k_poll+0x1a0>)
   394a2:	f7fd f89d 	bl	365e0 <z_spin_lock_valid>
   394a6:	b940      	cbnz	r0, 394ba <z_impl_k_poll+0xae>
   394a8:	4941      	ldr	r1, [pc, #260]	; (395b0 <z_impl_k_poll+0x1a4>)
   394aa:	483f      	ldr	r0, [pc, #252]	; (395a8 <z_impl_k_poll+0x19c>)
   394ac:	228e      	movs	r2, #142	; 0x8e
   394ae:	f003 faed 	bl	3ca8c <assert_print>
   394b2:	218e      	movs	r1, #142	; 0x8e
   394b4:	483e      	ldr	r0, [pc, #248]	; (395b0 <z_impl_k_poll+0x1a4>)
   394b6:	f003 fae2 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   394ba:	483c      	ldr	r0, [pc, #240]	; (395ac <z_impl_k_poll+0x1a0>)
   394bc:	f7fd f8ae 	bl	3661c <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   394c0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   394c4:	b9d3      	cbnz	r3, 394fc <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   394c6:	4620      	mov	r0, r4
   394c8:	464a      	mov	r2, r9
   394ca:	4641      	mov	r1, r8
   394cc:	f7ff ff08 	bl	392e0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   394d0:	4836      	ldr	r0, [pc, #216]	; (395ac <z_impl_k_poll+0x1a0>)
   394d2:	f7fd f893 	bl	365fc <z_spin_unlock_valid>
   394d6:	b940      	cbnz	r0, 394ea <z_impl_k_poll+0xde>
   394d8:	4935      	ldr	r1, [pc, #212]	; (395b0 <z_impl_k_poll+0x1a4>)
   394da:	4833      	ldr	r0, [pc, #204]	; (395a8 <z_impl_k_poll+0x19c>)
   394dc:	22b9      	movs	r2, #185	; 0xb9
   394de:	f003 fad5 	bl	3ca8c <assert_print>
   394e2:	21b9      	movs	r1, #185	; 0xb9
   394e4:	4832      	ldr	r0, [pc, #200]	; (395b0 <z_impl_k_poll+0x1a4>)
   394e6:	f003 faca 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   394ea:	f389 8811 	msr	BASEPRI, r9
   394ee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
   394f2:	2500      	movs	r5, #0
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   394f4:	4628      	mov	r0, r5
   394f6:	b003      	add	sp, #12
   394f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   394fc:	2300      	movs	r3, #0
   394fe:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   39502:	ea56 0305 	orrs.w	r3, r6, r5
   39506:	d113      	bne.n	39530 <z_impl_k_poll+0x124>
   39508:	4828      	ldr	r0, [pc, #160]	; (395ac <z_impl_k_poll+0x1a0>)
   3950a:	f7fd f877 	bl	365fc <z_spin_unlock_valid>
   3950e:	b940      	cbnz	r0, 39522 <z_impl_k_poll+0x116>
   39510:	4927      	ldr	r1, [pc, #156]	; (395b0 <z_impl_k_poll+0x1a4>)
   39512:	4825      	ldr	r0, [pc, #148]	; (395a8 <z_impl_k_poll+0x19c>)
   39514:	22b9      	movs	r2, #185	; 0xb9
   39516:	f003 fab9 	bl	3ca8c <assert_print>
   3951a:	21b9      	movs	r1, #185	; 0xb9
   3951c:	4824      	ldr	r0, [pc, #144]	; (395b0 <z_impl_k_poll+0x1a4>)
   3951e:	f003 faae 	bl	3ca7e <assert_post_action>
   39522:	f389 8811 	msr	BASEPRI, r9
   39526:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   3952a:	f06f 050a 	mvn.w	r5, #10
   3952e:	e7e1      	b.n	394f4 <z_impl_k_poll+0xe8>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   39530:	e9cd 6500 	strd	r6, r5, [sp]
   39534:	4649      	mov	r1, r9
   39536:	4a1f      	ldr	r2, [pc, #124]	; (395b4 <z_impl_k_poll+0x1a8>)
   39538:	481c      	ldr	r0, [pc, #112]	; (395ac <z_impl_k_poll+0x1a0>)
   3953a:	f7fe fdb5 	bl	380a8 <z_pend_curr>
   3953e:	4605      	mov	r5, r0
	__asm__ volatile(
   39540:	f04f 0320 	mov.w	r3, #32
   39544:	f3ef 8611 	mrs	r6, BASEPRI
   39548:	f383 8812 	msr	BASEPRI_MAX, r3
   3954c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39550:	4816      	ldr	r0, [pc, #88]	; (395ac <z_impl_k_poll+0x1a0>)
   39552:	f7fd f845 	bl	365e0 <z_spin_lock_valid>
   39556:	b940      	cbnz	r0, 3956a <z_impl_k_poll+0x15e>
   39558:	4915      	ldr	r1, [pc, #84]	; (395b0 <z_impl_k_poll+0x1a4>)
   3955a:	4813      	ldr	r0, [pc, #76]	; (395a8 <z_impl_k_poll+0x19c>)
   3955c:	228e      	movs	r2, #142	; 0x8e
   3955e:	f003 fa95 	bl	3ca8c <assert_print>
   39562:	218e      	movs	r1, #142	; 0x8e
   39564:	4812      	ldr	r0, [pc, #72]	; (395b0 <z_impl_k_poll+0x1a4>)
   39566:	f003 fa8a 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   3956a:	4810      	ldr	r0, [pc, #64]	; (395ac <z_impl_k_poll+0x1a0>)
   3956c:	f7fd f856 	bl	3661c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   39570:	4620      	mov	r0, r4
   39572:	4632      	mov	r2, r6
   39574:	4641      	mov	r1, r8
   39576:	f7ff feb3 	bl	392e0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3957a:	480c      	ldr	r0, [pc, #48]	; (395ac <z_impl_k_poll+0x1a0>)
   3957c:	f7fd f83e 	bl	365fc <z_spin_unlock_valid>
   39580:	b940      	cbnz	r0, 39594 <z_impl_k_poll+0x188>
   39582:	490b      	ldr	r1, [pc, #44]	; (395b0 <z_impl_k_poll+0x1a4>)
   39584:	4808      	ldr	r0, [pc, #32]	; (395a8 <z_impl_k_poll+0x19c>)
   39586:	22b9      	movs	r2, #185	; 0xb9
   39588:	f003 fa80 	bl	3ca8c <assert_print>
   3958c:	21b9      	movs	r1, #185	; 0xb9
   3958e:	4808      	ldr	r0, [pc, #32]	; (395b0 <z_impl_k_poll+0x1a4>)
   39590:	f003 fa75 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   39594:	f386 8811 	msr	BASEPRI, r6
   39598:	f3bf 8f6f 	isb	sy
	return swap_rc;
   3959c:	e7aa      	b.n	394f4 <z_impl_k_poll+0xe8>
   3959e:	bf00      	nop
   395a0:	2001a500 	.word	0x2001a500
   395a4:	0004bc61 	.word	0x0004bc61
   395a8:	0004409e 	.word	0x0004409e
   395ac:	2001a55c 	.word	0x2001a55c
   395b0:	000440d8 	.word	0x000440d8
   395b4:	20014a6c 	.word	0x20014a6c

000395b8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   395b8:	b570      	push	{r4, r5, r6, lr}
   395ba:	4604      	mov	r4, r0
   395bc:	460d      	mov	r5, r1
	__asm__ volatile(
   395be:	f04f 0320 	mov.w	r3, #32
   395c2:	f3ef 8611 	mrs	r6, BASEPRI
   395c6:	f383 8812 	msr	BASEPRI_MAX, r3
   395ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   395ce:	481c      	ldr	r0, [pc, #112]	; (39640 <z_impl_k_poll_signal_raise+0x88>)
   395d0:	f7fd f806 	bl	365e0 <z_spin_lock_valid>
   395d4:	b940      	cbnz	r0, 395e8 <z_impl_k_poll_signal_raise+0x30>
   395d6:	491b      	ldr	r1, [pc, #108]	; (39644 <z_impl_k_poll_signal_raise+0x8c>)
   395d8:	481b      	ldr	r0, [pc, #108]	; (39648 <z_impl_k_poll_signal_raise+0x90>)
   395da:	228e      	movs	r2, #142	; 0x8e
   395dc:	f003 fa56 	bl	3ca8c <assert_print>
   395e0:	218e      	movs	r1, #142	; 0x8e
   395e2:	4818      	ldr	r0, [pc, #96]	; (39644 <z_impl_k_poll_signal_raise+0x8c>)
   395e4:	f003 fa4b 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   395e8:	4815      	ldr	r0, [pc, #84]	; (39640 <z_impl_k_poll_signal_raise+0x88>)
   395ea:	f7fd f817 	bl	3661c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   395ee:	2101      	movs	r1, #1
	return list->head == list;
   395f0:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   395f2:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   395f4:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   395f6:	60a1      	str	r1, [r4, #8]
   395f8:	d112      	bne.n	39620 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   395fa:	4811      	ldr	r0, [pc, #68]	; (39640 <z_impl_k_poll_signal_raise+0x88>)
   395fc:	f7fc fffe 	bl	365fc <z_spin_unlock_valid>
   39600:	b940      	cbnz	r0, 39614 <z_impl_k_poll_signal_raise+0x5c>
   39602:	4910      	ldr	r1, [pc, #64]	; (39644 <z_impl_k_poll_signal_raise+0x8c>)
   39604:	4810      	ldr	r0, [pc, #64]	; (39648 <z_impl_k_poll_signal_raise+0x90>)
   39606:	22b9      	movs	r2, #185	; 0xb9
   39608:	f003 fa40 	bl	3ca8c <assert_print>
   3960c:	21b9      	movs	r1, #185	; 0xb9
   3960e:	480d      	ldr	r0, [pc, #52]	; (39644 <z_impl_k_poll_signal_raise+0x8c>)
   39610:	f003 fa35 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   39614:	f386 8811 	msr	BASEPRI, r6
   39618:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   3961c:	2400      	movs	r4, #0
   3961e:	e00d      	b.n	3963c <z_impl_k_poll_signal_raise+0x84>
	sys_dnode_t *const next = node->next;
   39620:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   39624:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   39626:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   39628:	2300      	movs	r3, #0
	node->prev = NULL;
   3962a:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   3962e:	f007 fdd4 	bl	411da <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   39632:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   39634:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   39636:	4802      	ldr	r0, [pc, #8]	; (39640 <z_impl_k_poll_signal_raise+0x88>)
   39638:	f7fe f95e 	bl	378f8 <z_reschedule>
	return rc;
}
   3963c:	4620      	mov	r0, r4
   3963e:	bd70      	pop	{r4, r5, r6, pc}
   39640:	2001a55c 	.word	0x2001a55c
   39644:	000440d8 	.word	0x000440d8
   39648:	0004409e 	.word	0x0004409e

0003964c <k_event_post_internal>:
	return match != 0;
}

static void k_event_post_internal(struct k_event *event, uint32_t events,
				  bool accumulate)
{
   3964c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39650:	4605      	mov	r5, r0
   39652:	460e      	mov	r6, r1
   39654:	4614      	mov	r4, r2
	k_spinlock_key_t  key;
	struct k_thread  *thread;
	unsigned int      wait_condition;
	struct k_thread  *head = NULL;

	key = k_spin_lock(&event->lock);
   39656:	f100 070c 	add.w	r7, r0, #12
	__asm__ volatile(
   3965a:	f04f 0320 	mov.w	r3, #32
   3965e:	f3ef 8811 	mrs	r8, BASEPRI
   39662:	f383 8812 	msr	BASEPRI_MAX, r3
   39666:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3966a:	4638      	mov	r0, r7
   3966c:	f7fc ffb8 	bl	365e0 <z_spin_lock_valid>
   39670:	b940      	cbnz	r0, 39684 <k_event_post_internal+0x38>
   39672:	4920      	ldr	r1, [pc, #128]	; (396f4 <k_event_post_internal+0xa8>)
   39674:	4820      	ldr	r0, [pc, #128]	; (396f8 <k_event_post_internal+0xac>)
   39676:	228e      	movs	r2, #142	; 0x8e
   39678:	f003 fa08 	bl	3ca8c <assert_print>
   3967c:	218e      	movs	r1, #142	; 0x8e
   3967e:	481d      	ldr	r0, [pc, #116]	; (396f4 <k_event_post_internal+0xa8>)
   39680:	f003 f9fd 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   39684:	4638      	mov	r0, r7
   39686:	f7fc ffc9 	bl	3661c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, post, event, events,
					accumulate);

	if (accumulate) {
   3968a:	b10c      	cbz	r4, 39690 <k_event_post_internal+0x44>
		events |= event->events;
   3968c:	68ab      	ldr	r3, [r5, #8]
   3968e:	431e      	orrs	r6, r3
	return list->head == list;
   39690:	682b      	ldr	r3, [r5, #0]
	 * 1. Create a linked list of threads to unpend.
	 * 2. Unpend each of the threads in the linked list
	 * 3. Ready each of the threads in the linked list
	 */

	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   39692:	2400      	movs	r4, #0
   39694:	429d      	cmp	r5, r3
   39696:	bf08      	it	eq
   39698:	2300      	moveq	r3, #0
	event->events = events;
   3969a:	60ae      	str	r6, [r5, #8]
	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   3969c:	b1fb      	cbz	r3, 396de <k_event_post_internal+0x92>
		wait_condition = thread->event_options & K_EVENT_WAIT_MASK;
   3969e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c

		if (are_wait_conditions_met(thread->events, events,
   396a0:	6e98      	ldr	r0, [r3, #104]	; 0x68
	if (wait_condition == K_EVENT_WAIT_ALL) {
   396a2:	07c9      	lsls	r1, r1, #31
	uint32_t  match = current & desired;
   396a4:	ea00 0206 	and.w	r2, r0, r6
	if (wait_condition == K_EVENT_WAIT_ALL) {
   396a8:	d51f      	bpl.n	396ea <k_event_post_internal+0x9e>
		return match == desired;
   396aa:	1a81      	subs	r1, r0, r2
   396ac:	424a      	negs	r2, r1
   396ae:	414a      	adcs	r2, r1
		if (are_wait_conditions_met(thread->events, events,
   396b0:	b10a      	cbz	r2, 396b6 <k_event_post_internal+0x6a>
			/*
			 * The wait conditions have been satisfied. Add this
			 * thread to the list of threads to unpend.
			 */

			thread->next_event_link = head;
   396b2:	665c      	str	r4, [r3, #100]	; 0x64
   396b4:	461c      	mov	r4, r3
	return (node == list->tail) ? NULL : node->next;
   396b6:	686a      	ldr	r2, [r5, #4]
   396b8:	4293      	cmp	r3, r2
   396ba:	d002      	beq.n	396c2 <k_event_post_internal+0x76>
   396bc:	681b      	ldr	r3, [r3, #0]
	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   396be:	2b00      	cmp	r3, #0
   396c0:	d1ed      	bne.n	3969e <k_event_post_internal+0x52>
		}


	}

	if (head != NULL) {
   396c2:	b164      	cbz	r4, 396de <k_event_post_internal+0x92>
   396c4:	2500      	movs	r5, #0
		thread = head;
		do {
			z_unpend_thread(thread);
   396c6:	4620      	mov	r0, r4
   396c8:	f7fe f9dc 	bl	37a84 <z_unpend_thread>
			arch_thread_return_value_set(thread, 0);
			thread->events = events;
			z_ready_thread(thread);
   396cc:	4620      	mov	r0, r4
   396ce:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
			thread->events = events;
   396d2:	66a6      	str	r6, [r4, #104]	; 0x68
			z_ready_thread(thread);
   396d4:	f7fe fb40 	bl	37d58 <z_ready_thread>
			thread = thread->next_event_link;
   396d8:	6e64      	ldr	r4, [r4, #100]	; 0x64
		} while (thread != NULL);
   396da:	2c00      	cmp	r4, #0
   396dc:	d1f3      	bne.n	396c6 <k_event_post_internal+0x7a>
	}

	z_reschedule(&event->lock, key);
   396de:	4641      	mov	r1, r8
   396e0:	4638      	mov	r0, r7

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, post, event, events,
				       accumulate);
}
   396e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_reschedule(&event->lock, key);
   396e6:	f7fe b907 	b.w	378f8 <z_reschedule>
	return match != 0;
   396ea:	3a00      	subs	r2, #0
   396ec:	bf18      	it	ne
   396ee:	2201      	movne	r2, #1
   396f0:	e7de      	b.n	396b0 <k_event_post_internal+0x64>
   396f2:	bf00      	nop
   396f4:	000440d8 	.word	0x000440d8
   396f8:	0004409e 	.word	0x0004409e

000396fc <k_event_wait_internal>:
#include <syscalls/k_event_set_mrsh.c>
#endif

static uint32_t k_event_wait_internal(struct k_event *event, uint32_t events,
				      unsigned int options, k_timeout_t timeout)
{
   396fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39700:	b085      	sub	sp, #20
   39702:	e9dd b30e 	ldrd	fp, r3, [sp, #56]	; 0x38
   39706:	4605      	mov	r5, r0
   39708:	460c      	mov	r4, r1
   3970a:	4690      	mov	r8, r2
   3970c:	9302      	str	r3, [sp, #8]
   3970e:	f3ef 8305 	mrs	r3, IPSR
	uint32_t  rv = 0;
	unsigned int  wait_condition;
	struct k_thread  *thread;

	__ASSERT(((arch_is_in_isr() == false) ||
   39712:	b163      	cbz	r3, 3972e <k_event_wait_internal+0x32>
   39714:	9b02      	ldr	r3, [sp, #8]
   39716:	ea5b 0303 	orrs.w	r3, fp, r3
   3971a:	d008      	beq.n	3972e <k_event_wait_internal+0x32>
   3971c:	493a      	ldr	r1, [pc, #232]	; (39808 <k_event_wait_internal+0x10c>)
   3971e:	483b      	ldr	r0, [pc, #236]	; (3980c <k_event_wait_internal+0x110>)
   39720:	22ba      	movs	r2, #186	; 0xba
   39722:	f003 f9b3 	bl	3ca8c <assert_print>
   39726:	21ba      	movs	r1, #186	; 0xba
   39728:	4837      	ldr	r0, [pc, #220]	; (39808 <k_event_wait_internal+0x10c>)
   3972a:	f003 f9a8 	bl	3ca7e <assert_post_action>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, wait, event, events,
					options, timeout);

	if (events == 0) {
   3972e:	2c00      	cmp	r4, #0
   39730:	d03d      	beq.n	397ae <k_event_wait_internal+0xb2>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, wait, event, events, 0);
		return 0;
	}

	wait_condition = options & K_EVENT_WAIT_MASK;
   39732:	f008 0301 	and.w	r3, r8, #1
   39736:	9303      	str	r3, [sp, #12]
	return z_impl_z_current_get();
   39738:	f7fe ff9a 	bl	38670 <z_impl_z_current_get>
	thread = z_current_get();

	k_spinlock_key_t  key = k_spin_lock(&event->lock);
   3973c:	f105 0a0c 	add.w	sl, r5, #12
   39740:	4607      	mov	r7, r0
   39742:	f04f 0220 	mov.w	r2, #32
   39746:	f3ef 8911 	mrs	r9, BASEPRI
   3974a:	f382 8812 	msr	BASEPRI_MAX, r2
   3974e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39752:	4650      	mov	r0, sl
   39754:	f7fc ff44 	bl	365e0 <z_spin_lock_valid>
   39758:	b940      	cbnz	r0, 3976c <k_event_wait_internal+0x70>
   3975a:	492d      	ldr	r1, [pc, #180]	; (39810 <k_event_wait_internal+0x114>)
   3975c:	482b      	ldr	r0, [pc, #172]	; (3980c <k_event_wait_internal+0x110>)
   3975e:	228e      	movs	r2, #142	; 0x8e
   39760:	f003 f994 	bl	3ca8c <assert_print>
   39764:	218e      	movs	r1, #142	; 0x8e
   39766:	482a      	ldr	r0, [pc, #168]	; (39810 <k_event_wait_internal+0x114>)
   39768:	f003 f989 	bl	3ca7e <assert_post_action>
	z_spin_lock_set_owner(l);
   3976c:	4650      	mov	r0, sl
   3976e:	f7fc ff55 	bl	3661c <z_spin_lock_set_owner>

	if (options & K_EVENT_WAIT_RESET) {
   39772:	f018 0f02 	tst.w	r8, #2
		event->events = 0;
   39776:	bf1c      	itt	ne
   39778:	2200      	movne	r2, #0
   3977a:	60aa      	strne	r2, [r5, #8]
	}

	/* Test if the wait conditions have already been met. */

	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   3977c:	68ae      	ldr	r6, [r5, #8]
	if (wait_condition == K_EVENT_WAIT_ALL) {
   3977e:	9b03      	ldr	r3, [sp, #12]
	uint32_t  match = current & desired;
   39780:	ea06 0204 	and.w	r2, r6, r4
	if (wait_condition == K_EVENT_WAIT_ALL) {
   39784:	b1bb      	cbz	r3, 397b6 <k_event_wait_internal+0xba>
	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   39786:	4294      	cmp	r4, r2
   39788:	d117      	bne.n	397ba <k_event_wait_internal+0xbe>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3978a:	4650      	mov	r0, sl
   3978c:	f7fc ff36 	bl	365fc <z_spin_unlock_valid>
   39790:	b940      	cbnz	r0, 397a4 <k_event_wait_internal+0xa8>
   39792:	491f      	ldr	r1, [pc, #124]	; (39810 <k_event_wait_internal+0x114>)
   39794:	481d      	ldr	r0, [pc, #116]	; (3980c <k_event_wait_internal+0x110>)
   39796:	22b9      	movs	r2, #185	; 0xb9
   39798:	f003 f978 	bl	3ca8c <assert_print>
   3979c:	21b9      	movs	r1, #185	; 0xb9
   3979e:	481c      	ldr	r0, [pc, #112]	; (39810 <k_event_wait_internal+0x114>)
   397a0:	f003 f96d 	bl	3ca7e <assert_post_action>
	__asm__ volatile(
   397a4:	f389 8811 	msr	BASEPRI, r9
   397a8:	f3bf 8f6f 	isb	sy

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, wait, event,
				       events, rv & events);

	return rv & events;
   397ac:	4034      	ands	r4, r6
}
   397ae:	4620      	mov	r0, r4
   397b0:	b005      	add	sp, #20
   397b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   397b6:	2a00      	cmp	r2, #0
   397b8:	d1e7      	bne.n	3978a <k_event_wait_internal+0x8e>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   397ba:	9b02      	ldr	r3, [sp, #8]
   397bc:	ea5b 0303 	orrs.w	r3, fp, r3
   397c0:	d112      	bne.n	397e8 <k_event_wait_internal+0xec>
   397c2:	4650      	mov	r0, sl
   397c4:	f7fc ff1a 	bl	365fc <z_spin_unlock_valid>
   397c8:	b940      	cbnz	r0, 397dc <k_event_wait_internal+0xe0>
   397ca:	4911      	ldr	r1, [pc, #68]	; (39810 <k_event_wait_internal+0x114>)
   397cc:	480f      	ldr	r0, [pc, #60]	; (3980c <k_event_wait_internal+0x110>)
   397ce:	22b9      	movs	r2, #185	; 0xb9
   397d0:	f003 f95c 	bl	3ca8c <assert_print>
   397d4:	21b9      	movs	r1, #185	; 0xb9
   397d6:	480e      	ldr	r0, [pc, #56]	; (39810 <k_event_wait_internal+0x114>)
   397d8:	f003 f951 	bl	3ca7e <assert_post_action>
   397dc:	f389 8811 	msr	BASEPRI, r9
   397e0:	f3bf 8f6f 	isb	sy
	uint32_t  rv = 0;
   397e4:	2600      	movs	r6, #0
   397e6:	e7e1      	b.n	397ac <k_event_wait_internal+0xb0>
	if (z_pend_curr(&event->lock, key, &event->wait_q, timeout) == 0) {
   397e8:	9b02      	ldr	r3, [sp, #8]
	thread->event_options = options;
   397ea:	e9c7 481a 	strd	r4, r8, [r7, #104]	; 0x68
	if (z_pend_curr(&event->lock, key, &event->wait_q, timeout) == 0) {
   397ee:	462a      	mov	r2, r5
   397f0:	4649      	mov	r1, r9
   397f2:	4650      	mov	r0, sl
   397f4:	f8cd b000 	str.w	fp, [sp]
   397f8:	9301      	str	r3, [sp, #4]
   397fa:	f7fe fc55 	bl	380a8 <z_pend_curr>
   397fe:	2800      	cmp	r0, #0
   39800:	d1f0      	bne.n	397e4 <k_event_wait_internal+0xe8>
		rv = thread->events;
   39802:	6ebe      	ldr	r6, [r7, #104]	; 0x68
   39804:	e7d2      	b.n	397ac <k_event_wait_internal+0xb0>
   39806:	bf00      	nop
   39808:	0004bc82 	.word	0x0004bc82
   3980c:	0004409e 	.word	0x0004409e
   39810:	000440d8 	.word	0x000440d8

00039814 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   39814:	3204      	adds	r2, #4
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   39816:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   3981a:	4606      	mov	r6, r0
   3981c:	460d      	mov	r5, r1
   3981e:	d20a      	bcs.n	39836 <z_heap_aligned_alloc+0x22>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   39820:	f04f 0800 	mov.w	r8, #0
   39824:	f04f 0900 	mov.w	r9, #0
   39828:	f041 0104 	orr.w	r1, r1, #4
   3982c:	e9cd 8900 	strd	r8, r9, [sp]
   39830:	f7fc fcc0 	bl	361b4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   39834:	b920      	cbnz	r0, 39840 <z_heap_aligned_alloc+0x2c>
		return NULL;
   39836:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   39838:	4620      	mov	r0, r4
   3983a:	b002      	add	sp, #8
   3983c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   39840:	4604      	mov	r4, r0
   39842:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   39846:	2d00      	cmp	r5, #0
   39848:	d0f6      	beq.n	39838 <z_heap_aligned_alloc+0x24>
   3984a:	3d01      	subs	r5, #1
   3984c:	422c      	tst	r4, r5
   3984e:	d0f3      	beq.n	39838 <z_heap_aligned_alloc+0x24>
   39850:	2225      	movs	r2, #37	; 0x25
   39852:	4904      	ldr	r1, [pc, #16]	; (39864 <z_heap_aligned_alloc+0x50>)
   39854:	4804      	ldr	r0, [pc, #16]	; (39868 <z_heap_aligned_alloc+0x54>)
   39856:	f003 f919 	bl	3ca8c <assert_print>
   3985a:	2125      	movs	r1, #37	; 0x25
   3985c:	4801      	ldr	r0, [pc, #4]	; (39864 <z_heap_aligned_alloc+0x50>)
   3985e:	f003 f90e 	bl	3ca7e <assert_post_action>
   39862:	e7e9      	b.n	39838 <z_heap_aligned_alloc+0x24>
   39864:	0004bca5 	.word	0x0004bca5
   39868:	0004409e 	.word	0x0004409e

0003986c <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   3986c:	2803      	cmp	r0, #3
{
   3986e:	b538      	push	{r3, r4, r5, lr}
   39870:	4604      	mov	r4, r0
   39872:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   39874:	d901      	bls.n	3987a <k_aligned_alloc+0xe>
   39876:	0783      	lsls	r3, r0, #30
   39878:	d008      	beq.n	3988c <k_aligned_alloc+0x20>
   3987a:	490e      	ldr	r1, [pc, #56]	; (398b4 <k_aligned_alloc+0x48>)
   3987c:	480e      	ldr	r0, [pc, #56]	; (398b8 <k_aligned_alloc+0x4c>)
   3987e:	2242      	movs	r2, #66	; 0x42
   39880:	f003 f904 	bl	3ca8c <assert_print>
   39884:	2142      	movs	r1, #66	; 0x42
   39886:	480b      	ldr	r0, [pc, #44]	; (398b4 <k_aligned_alloc+0x48>)
   39888:	f003 f8f9 	bl	3ca7e <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   3988c:	1e63      	subs	r3, r4, #1
   3988e:	4223      	tst	r3, r4
   39890:	d008      	beq.n	398a4 <k_aligned_alloc+0x38>
   39892:	4908      	ldr	r1, [pc, #32]	; (398b4 <k_aligned_alloc+0x48>)
   39894:	4808      	ldr	r0, [pc, #32]	; (398b8 <k_aligned_alloc+0x4c>)
   39896:	2246      	movs	r2, #70	; 0x46
   39898:	f003 f8f8 	bl	3ca8c <assert_print>
   3989c:	2146      	movs	r1, #70	; 0x46
   3989e:	4805      	ldr	r0, [pc, #20]	; (398b4 <k_aligned_alloc+0x48>)
   398a0:	f003 f8ed 	bl	3ca7e <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   398a4:	462a      	mov	r2, r5
   398a6:	4621      	mov	r1, r4

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   398a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   398ac:	4803      	ldr	r0, [pc, #12]	; (398bc <k_aligned_alloc+0x50>)
   398ae:	f7ff bfb1 	b.w	39814 <z_heap_aligned_alloc>
   398b2:	bf00      	nop
   398b4:	0004bca5 	.word	0x0004bca5
   398b8:	0004409e 	.word	0x0004409e
   398bc:	20014e68 	.word	0x20014e68

000398c0 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   398c0:	4b01      	ldr	r3, [pc, #4]	; (398c8 <k_thread_system_pool_assign+0x8>)
   398c2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
   398c6:	4770      	bx	lr
   398c8:	20014e68 	.word	0x20014e68

000398cc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   398cc:	b513      	push	{r0, r1, r4, lr}
   398ce:	4604      	mov	r4, r0
   398d0:	9101      	str	r1, [sp, #4]
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   398d2:	f007 fb49 	bl	40f68 <k_is_in_isr>
   398d6:	9a01      	ldr	r2, [sp, #4]
   398d8:	b958      	cbnz	r0, 398f2 <z_thread_aligned_alloc+0x26>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   398da:	4b08      	ldr	r3, [pc, #32]	; (398fc <z_thread_aligned_alloc+0x30>)
   398dc:	689b      	ldr	r3, [r3, #8]
   398de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap != NULL) {
   398e2:	b143      	cbz	r3, 398f6 <z_thread_aligned_alloc+0x2a>
		ret = z_heap_aligned_alloc(heap, align, size);
   398e4:	4621      	mov	r1, r4
   398e6:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   398e8:	b002      	add	sp, #8
   398ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   398ee:	f7ff bf91 	b.w	39814 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   398f2:	4b03      	ldr	r3, [pc, #12]	; (39900 <z_thread_aligned_alloc+0x34>)
   398f4:	e7f6      	b.n	398e4 <z_thread_aligned_alloc+0x18>
}
   398f6:	b002      	add	sp, #8
   398f8:	bd10      	pop	{r4, pc}
   398fa:	bf00      	nop
   398fc:	2001a500 	.word	0x2001a500
   39900:	20014e68 	.word	0x20014e68

00039904 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   39904:	4a02      	ldr	r2, [pc, #8]	; (39910 <boot_banner+0xc>)
   39906:	4903      	ldr	r1, [pc, #12]	; (39914 <boot_banner+0x10>)
   39908:	4803      	ldr	r0, [pc, #12]	; (39918 <boot_banner+0x14>)
   3990a:	f002 bedc 	b.w	3c6c6 <printk>
   3990e:	bf00      	nop
   39910:	00045228 	.word	0x00045228
   39914:	0004bcc9 	.word	0x0004bcc9
   39918:	0004bcd6 	.word	0x0004bcd6

0003991c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   3991c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   3991e:	2400      	movs	r4, #0
   39920:	4b08      	ldr	r3, [pc, #32]	; (39944 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   39922:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   39926:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   39928:	ab02      	add	r3, sp, #8
   3992a:	9300      	str	r3, [sp, #0]
   3992c:	4906      	ldr	r1, [pc, #24]	; (39948 <k_sys_work_q_init+0x2c>)
   3992e:	f04f 33ff 	mov.w	r3, #4294967295
   39932:	4806      	ldr	r0, [pc, #24]	; (3994c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   39934:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   39938:	f7fd fd92 	bl	37460 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   3993c:	4620      	mov	r0, r4
   3993e:	b004      	add	sp, #16
   39940:	bd10      	pop	{r4, pc}
   39942:	bf00      	nop
   39944:	0004bcfd 	.word	0x0004bcfd
   39948:	20028340 	.word	0x20028340
   3994c:	20018fa8 	.word	0x20018fa8

00039950 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   39950:	b530      	push	{r4, r5, lr}
   39952:	b095      	sub	sp, #84	; 0x54
   39954:	4605      	mov	r5, r0
   39956:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   39958:	2230      	movs	r2, #48	; 0x30
   3995a:	2100      	movs	r1, #0
   3995c:	a808      	add	r0, sp, #32
   3995e:	f007 fd69 	bl	41434 <memset>
   39962:	233f      	movs	r3, #63	; 0x3f
   39964:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   39966:	ab07      	add	r3, sp, #28
   39968:	9303      	str	r3, [sp, #12]
   3996a:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   3996c:	9406      	str	r4, [sp, #24]
   3996e:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   39972:	b154      	cbz	r4, 3998a <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   39974:	2301      	movs	r3, #1
   39976:	aa05      	add	r2, sp, #20
   39978:	9200      	str	r2, [sp, #0]
   3997a:	2100      	movs	r1, #0
   3997c:	4804      	ldr	r0, [pc, #16]	; (39990 <psa_generate_random+0x40>)
   3997e:	9301      	str	r3, [sp, #4]
   39980:	aa03      	add	r2, sp, #12
   39982:	f000 f815 	bl	399b0 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   39986:	b015      	add	sp, #84	; 0x54
   39988:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   3998a:	4620      	mov	r0, r4
   3998c:	e7fb      	b.n	39986 <psa_generate_random+0x36>
   3998e:	bf00      	nop
   39990:	40000100 	.word	0x40000100

00039994 <psa_connect>:
                                0);
}

psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   39994:	2300      	movs	r3, #0
{
   39996:	b507      	push	{r0, r1, r2, lr}
   39998:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   3999a:	9300      	str	r3, [sp, #0]
   3999c:	4601      	mov	r1, r0
   3999e:	4803      	ldr	r0, [pc, #12]	; (399ac <psa_connect+0x18>)
   399a0:	f7f7 fe10 	bl	315c4 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   399a4:	b003      	add	sp, #12
   399a6:	f85d fb04 	ldr.w	pc, [sp], #4
   399aa:	bf00      	nop
   399ac:	00017c19 	.word	0x00017c19

000399b0 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   399b0:	b470      	push	{r4, r5, r6}
   399b2:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
    if ((type > INT16_MAX) ||
   399b6:	f501 4600 	add.w	r6, r1, #32768	; 0x8000
   399ba:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
   399be:	d20d      	bcs.n	399dc <psa_call+0x2c>
        (type < INT16_MIN) ||
   399c0:	2bff      	cmp	r3, #255	; 0xff
   399c2:	d80b      	bhi.n	399dc <psa_call+0x2c>
        (in_len > UINT8_MAX) ||
   399c4:	2cff      	cmp	r4, #255	; 0xff
   399c6:	d809      	bhi.n	399dc <psa_call+0x2c>
        (out_len > UINT8_MAX)) {
        return PSA_ERROR_PROGRAMMER_ERROR;
    }

    return tfm_ns_interface_dispatch(
   399c8:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   399cc:	4613      	mov	r3, r2
   399ce:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   399d2:	4601      	mov	r1, r0
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   399d4:	bc70      	pop	{r4, r5, r6}
    return tfm_ns_interface_dispatch(
   399d6:	4803      	ldr	r0, [pc, #12]	; (399e4 <psa_call+0x34>)
   399d8:	f7f7 bdf4 	b.w	315c4 <tfm_ns_interface_dispatch>
}
   399dc:	f06f 0080 	mvn.w	r0, #128	; 0x80
   399e0:	bc70      	pop	{r4, r5, r6}
   399e2:	4770      	bx	lr
   399e4:	00017c21 	.word	0x00017c21

000399e8 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   399e8:	2300      	movs	r3, #0
{
   399ea:	b507      	push	{r0, r1, r2, lr}
   399ec:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   399ee:	461a      	mov	r2, r3
   399f0:	9300      	str	r3, [sp, #0]
   399f2:	4803      	ldr	r0, [pc, #12]	; (39a00 <psa_close+0x18>)
   399f4:	f7f7 fde6 	bl	315c4 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   399f8:	b003      	add	sp, #12
   399fa:	f85d fb04 	ldr.w	pc, [sp], #4
   399fe:	bf00      	nop
   39a00:	00017c11 	.word	0x00017c11

00039a04 <__assert_func>:
   39a04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   39a06:	4614      	mov	r4, r2
   39a08:	461a      	mov	r2, r3
   39a0a:	4b09      	ldr	r3, [pc, #36]	; (39a30 <__assert_func+0x2c>)
   39a0c:	4605      	mov	r5, r0
   39a0e:	681b      	ldr	r3, [r3, #0]
   39a10:	68d8      	ldr	r0, [r3, #12]
   39a12:	b14c      	cbz	r4, 39a28 <__assert_func+0x24>
   39a14:	4b07      	ldr	r3, [pc, #28]	; (39a34 <__assert_func+0x30>)
   39a16:	9100      	str	r1, [sp, #0]
   39a18:	4907      	ldr	r1, [pc, #28]	; (39a38 <__assert_func+0x34>)
   39a1a:	e9cd 3401 	strd	r3, r4, [sp, #4]
   39a1e:	462b      	mov	r3, r5
   39a20:	f000 f80e 	bl	39a40 <fiprintf>
   39a24:	f007 ff86 	bl	41934 <abort>
   39a28:	4b04      	ldr	r3, [pc, #16]	; (39a3c <__assert_func+0x38>)
   39a2a:	461c      	mov	r4, r3
   39a2c:	e7f3      	b.n	39a16 <__assert_func+0x12>
   39a2e:	bf00      	nop
   39a30:	20014a74 	.word	0x20014a74
   39a34:	0004bd06 	.word	0x0004bd06
   39a38:	0004bd13 	.word	0x0004bd13
   39a3c:	00045228 	.word	0x00045228

00039a40 <fiprintf>:
   39a40:	b40e      	push	{r1, r2, r3}
   39a42:	b503      	push	{r0, r1, lr}
   39a44:	ab03      	add	r3, sp, #12
   39a46:	4601      	mov	r1, r0
   39a48:	4805      	ldr	r0, [pc, #20]	; (39a60 <fiprintf+0x20>)
   39a4a:	f853 2b04 	ldr.w	r2, [r3], #4
   39a4e:	6800      	ldr	r0, [r0, #0]
   39a50:	9301      	str	r3, [sp, #4]
   39a52:	f000 f969 	bl	39d28 <_vfiprintf_r>
   39a56:	b002      	add	sp, #8
   39a58:	f85d eb04 	ldr.w	lr, [sp], #4
   39a5c:	b003      	add	sp, #12
   39a5e:	4770      	bx	lr
   39a60:	20014a74 	.word	0x20014a74

00039a64 <gmtime_r>:
   39a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39a68:	e9d0 6700 	ldrd	r6, r7, [r0]
   39a6c:	460c      	mov	r4, r1
   39a6e:	4a4f      	ldr	r2, [pc, #316]	; (39bac <gmtime_r+0x148>)
   39a70:	2300      	movs	r3, #0
   39a72:	4630      	mov	r0, r6
   39a74:	4639      	mov	r1, r7
   39a76:	f04f 0805 	mov.w	r8, #5
   39a7a:	f7e3 f9e5 	bl	1ce48 <__aeabi_ldivmod>
   39a7e:	4639      	mov	r1, r7
   39a80:	4605      	mov	r5, r0
   39a82:	4a4a      	ldr	r2, [pc, #296]	; (39bac <gmtime_r+0x148>)
   39a84:	4630      	mov	r0, r6
   39a86:	2300      	movs	r3, #0
   39a88:	f7e3 f9de 	bl	1ce48 <__aeabi_ldivmod>
   39a8c:	2a00      	cmp	r2, #0
   39a8e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   39a92:	4d47      	ldr	r5, [pc, #284]	; (39bb0 <gmtime_r+0x14c>)
   39a94:	bfb8      	it	lt
   39a96:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   39a9a:	f240 1c6d 	movw	ip, #365	; 0x16d
   39a9e:	bfae      	itee	ge
   39aa0:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
   39aa4:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
   39aa8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   39aac:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   39ab0:	2764      	movs	r7, #100	; 0x64
   39ab2:	fbb2 f1f0 	udiv	r1, r2, r0
   39ab6:	fb00 2211 	mls	r2, r0, r1, r2
   39aba:	203c      	movs	r0, #60	; 0x3c
   39abc:	60a1      	str	r1, [r4, #8]
   39abe:	fbb2 f1f0 	udiv	r1, r2, r0
   39ac2:	fb00 2211 	mls	r2, r0, r1, r2
   39ac6:	483b      	ldr	r0, [pc, #236]	; (39bb4 <gmtime_r+0x150>)
   39ac8:	6061      	str	r1, [r4, #4]
   39aca:	2107      	movs	r1, #7
   39acc:	6022      	str	r2, [r4, #0]
   39ace:	1cda      	adds	r2, r3, #3
   39ad0:	fb92 f1f1 	sdiv	r1, r2, r1
   39ad4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   39ad8:	1a52      	subs	r2, r2, r1
   39ada:	bf48      	it	mi
   39adc:	3207      	addmi	r2, #7
   39ade:	2b00      	cmp	r3, #0
   39ae0:	61a2      	str	r2, [r4, #24]
   39ae2:	bfbb      	ittet	lt
   39ae4:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
   39ae8:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
   39aec:	fb93 f5f5 	sdivge	r5, r3, r5
   39af0:	fb92 f5f5 	sdivlt	r5, r2, r5
   39af4:	f648 62ac 	movw	r2, #36524	; 0x8eac
   39af8:	fb00 3005 	mla	r0, r0, r5, r3
   39afc:	f240 53b4 	movw	r3, #1460	; 0x5b4
   39b00:	fbb0 f2f2 	udiv	r2, r0, r2
   39b04:	fbb0 f1f3 	udiv	r1, r0, r3
   39b08:	4402      	add	r2, r0
   39b0a:	1a52      	subs	r2, r2, r1
   39b0c:	492a      	ldr	r1, [pc, #168]	; (39bb8 <gmtime_r+0x154>)
   39b0e:	fbb0 f1f1 	udiv	r1, r0, r1
   39b12:	1a52      	subs	r2, r2, r1
   39b14:	fbb2 f1fc 	udiv	r1, r2, ip
   39b18:	fbb2 f3f3 	udiv	r3, r2, r3
   39b1c:	fbb1 f6f7 	udiv	r6, r1, r7
   39b20:	1af3      	subs	r3, r6, r3
   39b22:	2299      	movs	r2, #153	; 0x99
   39b24:	4403      	add	r3, r0
   39b26:	fb0c 3311 	mls	r3, ip, r1, r3
   39b2a:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   39b2e:	f103 0c01 	add.w	ip, r3, #1
   39b32:	f10e 0e02 	add.w	lr, lr, #2
   39b36:	fbbe f0f2 	udiv	r0, lr, r2
   39b3a:	4342      	muls	r2, r0
   39b3c:	3202      	adds	r2, #2
   39b3e:	fbb2 f2f8 	udiv	r2, r2, r8
   39b42:	ebac 0c02 	sub.w	ip, ip, r2
   39b46:	f240 52f9 	movw	r2, #1529	; 0x5f9
   39b4a:	4596      	cmp	lr, r2
   39b4c:	bf94      	ite	ls
   39b4e:	2202      	movls	r2, #2
   39b50:	f06f 0209 	mvnhi.w	r2, #9
   39b54:	4410      	add	r0, r2
   39b56:	f44f 72c8 	mov.w	r2, #400	; 0x190
   39b5a:	fb02 1505 	mla	r5, r2, r5, r1
   39b5e:	2801      	cmp	r0, #1
   39b60:	bf98      	it	ls
   39b62:	3501      	addls	r5, #1
   39b64:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   39b68:	d30d      	bcc.n	39b86 <gmtime_r+0x122>
   39b6a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   39b6e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   39b72:	61e3      	str	r3, [r4, #28]
   39b74:	2300      	movs	r3, #0
   39b76:	f8c4 c00c 	str.w	ip, [r4, #12]
   39b7a:	e9c4 0504 	strd	r0, r5, [r4, #16]
   39b7e:	6223      	str	r3, [r4, #32]
   39b80:	4620      	mov	r0, r4
   39b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39b86:	078a      	lsls	r2, r1, #30
   39b88:	d102      	bne.n	39b90 <gmtime_r+0x12c>
   39b8a:	fb07 1616 	mls	r6, r7, r6, r1
   39b8e:	b95e      	cbnz	r6, 39ba8 <gmtime_r+0x144>
   39b90:	f44f 72c8 	mov.w	r2, #400	; 0x190
   39b94:	fbb1 f6f2 	udiv	r6, r1, r2
   39b98:	fb02 1216 	mls	r2, r2, r6, r1
   39b9c:	fab2 f282 	clz	r2, r2
   39ba0:	0952      	lsrs	r2, r2, #5
   39ba2:	333b      	adds	r3, #59	; 0x3b
   39ba4:	4413      	add	r3, r2
   39ba6:	e7e2      	b.n	39b6e <gmtime_r+0x10a>
   39ba8:	2201      	movs	r2, #1
   39baa:	e7fa      	b.n	39ba2 <gmtime_r+0x13e>
   39bac:	00015180 	.word	0x00015180
   39bb0:	00023ab1 	.word	0x00023ab1
   39bb4:	fffdc54f 	.word	0xfffdc54f
   39bb8:	00023ab0 	.word	0x00023ab0

00039bbc <malloc>:
   39bbc:	4b02      	ldr	r3, [pc, #8]	; (39bc8 <malloc+0xc>)
   39bbe:	4601      	mov	r1, r0
   39bc0:	6818      	ldr	r0, [r3, #0]
   39bc2:	f000 b857 	b.w	39c74 <_malloc_r>
   39bc6:	bf00      	nop
   39bc8:	20014a74 	.word	0x20014a74

00039bcc <free>:
   39bcc:	4b02      	ldr	r3, [pc, #8]	; (39bd8 <free+0xc>)
   39bce:	4601      	mov	r1, r0
   39bd0:	6818      	ldr	r0, [r3, #0]
   39bd2:	f000 b803 	b.w	39bdc <_free_r>
   39bd6:	bf00      	nop
   39bd8:	20014a74 	.word	0x20014a74

00039bdc <_free_r>:
   39bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   39bde:	2900      	cmp	r1, #0
   39be0:	d043      	beq.n	39c6a <_free_r+0x8e>
   39be2:	f851 3c04 	ldr.w	r3, [r1, #-4]
   39be6:	1f0c      	subs	r4, r1, #4
   39be8:	9001      	str	r0, [sp, #4]
   39bea:	2b00      	cmp	r3, #0
   39bec:	bfb8      	it	lt
   39bee:	18e4      	addlt	r4, r4, r3
   39bf0:	f001 fcc6 	bl	3b580 <__malloc_lock>
   39bf4:	4a1e      	ldr	r2, [pc, #120]	; (39c70 <_free_r+0x94>)
   39bf6:	9801      	ldr	r0, [sp, #4]
   39bf8:	6813      	ldr	r3, [r2, #0]
   39bfa:	b933      	cbnz	r3, 39c0a <_free_r+0x2e>
   39bfc:	6063      	str	r3, [r4, #4]
   39bfe:	6014      	str	r4, [r2, #0]
   39c00:	b003      	add	sp, #12
   39c02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   39c06:	f001 bcc1 	b.w	3b58c <__malloc_unlock>
   39c0a:	42a3      	cmp	r3, r4
   39c0c:	d908      	bls.n	39c20 <_free_r+0x44>
   39c0e:	6825      	ldr	r5, [r4, #0]
   39c10:	1961      	adds	r1, r4, r5
   39c12:	428b      	cmp	r3, r1
   39c14:	bf01      	itttt	eq
   39c16:	6819      	ldreq	r1, [r3, #0]
   39c18:	685b      	ldreq	r3, [r3, #4]
   39c1a:	1949      	addeq	r1, r1, r5
   39c1c:	6021      	streq	r1, [r4, #0]
   39c1e:	e7ed      	b.n	39bfc <_free_r+0x20>
   39c20:	461a      	mov	r2, r3
   39c22:	685b      	ldr	r3, [r3, #4]
   39c24:	b10b      	cbz	r3, 39c2a <_free_r+0x4e>
   39c26:	42a3      	cmp	r3, r4
   39c28:	d9fa      	bls.n	39c20 <_free_r+0x44>
   39c2a:	6811      	ldr	r1, [r2, #0]
   39c2c:	1855      	adds	r5, r2, r1
   39c2e:	42a5      	cmp	r5, r4
   39c30:	d10b      	bne.n	39c4a <_free_r+0x6e>
   39c32:	6824      	ldr	r4, [r4, #0]
   39c34:	4421      	add	r1, r4
   39c36:	1854      	adds	r4, r2, r1
   39c38:	6011      	str	r1, [r2, #0]
   39c3a:	42a3      	cmp	r3, r4
   39c3c:	d1e0      	bne.n	39c00 <_free_r+0x24>
   39c3e:	681c      	ldr	r4, [r3, #0]
   39c40:	685b      	ldr	r3, [r3, #4]
   39c42:	4421      	add	r1, r4
   39c44:	6053      	str	r3, [r2, #4]
   39c46:	6011      	str	r1, [r2, #0]
   39c48:	e7da      	b.n	39c00 <_free_r+0x24>
   39c4a:	d902      	bls.n	39c52 <_free_r+0x76>
   39c4c:	230c      	movs	r3, #12
   39c4e:	6003      	str	r3, [r0, #0]
   39c50:	e7d6      	b.n	39c00 <_free_r+0x24>
   39c52:	6825      	ldr	r5, [r4, #0]
   39c54:	1961      	adds	r1, r4, r5
   39c56:	428b      	cmp	r3, r1
   39c58:	bf02      	ittt	eq
   39c5a:	6819      	ldreq	r1, [r3, #0]
   39c5c:	685b      	ldreq	r3, [r3, #4]
   39c5e:	1949      	addeq	r1, r1, r5
   39c60:	6063      	str	r3, [r4, #4]
   39c62:	bf08      	it	eq
   39c64:	6021      	streq	r1, [r4, #0]
   39c66:	6054      	str	r4, [r2, #4]
   39c68:	e7ca      	b.n	39c00 <_free_r+0x24>
   39c6a:	b003      	add	sp, #12
   39c6c:	bd30      	pop	{r4, r5, pc}
   39c6e:	bf00      	nop
   39c70:	2001a560 	.word	0x2001a560

00039c74 <_malloc_r>:
   39c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39c76:	1ccd      	adds	r5, r1, #3
   39c78:	4606      	mov	r6, r0
   39c7a:	f025 0503 	bic.w	r5, r5, #3
   39c7e:	3508      	adds	r5, #8
   39c80:	2d0c      	cmp	r5, #12
   39c82:	bf38      	it	cc
   39c84:	250c      	movcc	r5, #12
   39c86:	2d00      	cmp	r5, #0
   39c88:	db01      	blt.n	39c8e <_malloc_r+0x1a>
   39c8a:	42a9      	cmp	r1, r5
   39c8c:	d903      	bls.n	39c96 <_malloc_r+0x22>
   39c8e:	230c      	movs	r3, #12
   39c90:	6033      	str	r3, [r6, #0]
   39c92:	2000      	movs	r0, #0
   39c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39c96:	f001 fc73 	bl	3b580 <__malloc_lock>
   39c9a:	4921      	ldr	r1, [pc, #132]	; (39d20 <_malloc_r+0xac>)
   39c9c:	680a      	ldr	r2, [r1, #0]
   39c9e:	4614      	mov	r4, r2
   39ca0:	b99c      	cbnz	r4, 39cca <_malloc_r+0x56>
   39ca2:	4f20      	ldr	r7, [pc, #128]	; (39d24 <_malloc_r+0xb0>)
   39ca4:	683b      	ldr	r3, [r7, #0]
   39ca6:	b923      	cbnz	r3, 39cb2 <_malloc_r+0x3e>
   39ca8:	4621      	mov	r1, r4
   39caa:	4630      	mov	r0, r6
   39cac:	f000 fcea 	bl	3a684 <_sbrk_r>
   39cb0:	6038      	str	r0, [r7, #0]
   39cb2:	4629      	mov	r1, r5
   39cb4:	4630      	mov	r0, r6
   39cb6:	f000 fce5 	bl	3a684 <_sbrk_r>
   39cba:	1c43      	adds	r3, r0, #1
   39cbc:	d123      	bne.n	39d06 <_malloc_r+0x92>
   39cbe:	230c      	movs	r3, #12
   39cc0:	4630      	mov	r0, r6
   39cc2:	6033      	str	r3, [r6, #0]
   39cc4:	f001 fc62 	bl	3b58c <__malloc_unlock>
   39cc8:	e7e3      	b.n	39c92 <_malloc_r+0x1e>
   39cca:	6823      	ldr	r3, [r4, #0]
   39ccc:	1b5b      	subs	r3, r3, r5
   39cce:	d417      	bmi.n	39d00 <_malloc_r+0x8c>
   39cd0:	2b0b      	cmp	r3, #11
   39cd2:	d903      	bls.n	39cdc <_malloc_r+0x68>
   39cd4:	6023      	str	r3, [r4, #0]
   39cd6:	441c      	add	r4, r3
   39cd8:	6025      	str	r5, [r4, #0]
   39cda:	e004      	b.n	39ce6 <_malloc_r+0x72>
   39cdc:	6863      	ldr	r3, [r4, #4]
   39cde:	42a2      	cmp	r2, r4
   39ce0:	bf0c      	ite	eq
   39ce2:	600b      	streq	r3, [r1, #0]
   39ce4:	6053      	strne	r3, [r2, #4]
   39ce6:	4630      	mov	r0, r6
   39ce8:	f001 fc50 	bl	3b58c <__malloc_unlock>
   39cec:	f104 000b 	add.w	r0, r4, #11
   39cf0:	1d23      	adds	r3, r4, #4
   39cf2:	f020 0007 	bic.w	r0, r0, #7
   39cf6:	1ac2      	subs	r2, r0, r3
   39cf8:	d0cc      	beq.n	39c94 <_malloc_r+0x20>
   39cfa:	1a1b      	subs	r3, r3, r0
   39cfc:	50a3      	str	r3, [r4, r2]
   39cfe:	e7c9      	b.n	39c94 <_malloc_r+0x20>
   39d00:	4622      	mov	r2, r4
   39d02:	6864      	ldr	r4, [r4, #4]
   39d04:	e7cc      	b.n	39ca0 <_malloc_r+0x2c>
   39d06:	1cc4      	adds	r4, r0, #3
   39d08:	f024 0403 	bic.w	r4, r4, #3
   39d0c:	42a0      	cmp	r0, r4
   39d0e:	d0e3      	beq.n	39cd8 <_malloc_r+0x64>
   39d10:	1a21      	subs	r1, r4, r0
   39d12:	4630      	mov	r0, r6
   39d14:	f000 fcb6 	bl	3a684 <_sbrk_r>
   39d18:	3001      	adds	r0, #1
   39d1a:	d1dd      	bne.n	39cd8 <_malloc_r+0x64>
   39d1c:	e7cf      	b.n	39cbe <_malloc_r+0x4a>
   39d1e:	bf00      	nop
   39d20:	2001a560 	.word	0x2001a560
   39d24:	2001a564 	.word	0x2001a564

00039d28 <_vfiprintf_r>:
   39d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39d2c:	460d      	mov	r5, r1
   39d2e:	b09d      	sub	sp, #116	; 0x74
   39d30:	4614      	mov	r4, r2
   39d32:	4698      	mov	r8, r3
   39d34:	4606      	mov	r6, r0
   39d36:	b118      	cbz	r0, 39d40 <_vfiprintf_r+0x18>
   39d38:	6983      	ldr	r3, [r0, #24]
   39d3a:	b90b      	cbnz	r3, 39d40 <_vfiprintf_r+0x18>
   39d3c:	f001 f906 	bl	3af4c <__sinit>
   39d40:	4b89      	ldr	r3, [pc, #548]	; (39f68 <_vfiprintf_r+0x240>)
   39d42:	429d      	cmp	r5, r3
   39d44:	d11b      	bne.n	39d7e <_vfiprintf_r+0x56>
   39d46:	6875      	ldr	r5, [r6, #4]
   39d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   39d4a:	07d9      	lsls	r1, r3, #31
   39d4c:	d405      	bmi.n	39d5a <_vfiprintf_r+0x32>
   39d4e:	89ab      	ldrh	r3, [r5, #12]
   39d50:	059a      	lsls	r2, r3, #22
   39d52:	d402      	bmi.n	39d5a <_vfiprintf_r+0x32>
   39d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
   39d56:	f7e9 fdfd 	bl	23954 <__retarget_lock_acquire_recursive>
   39d5a:	89ab      	ldrh	r3, [r5, #12]
   39d5c:	071b      	lsls	r3, r3, #28
   39d5e:	d501      	bpl.n	39d64 <_vfiprintf_r+0x3c>
   39d60:	692b      	ldr	r3, [r5, #16]
   39d62:	b9eb      	cbnz	r3, 39da0 <_vfiprintf_r+0x78>
   39d64:	4629      	mov	r1, r5
   39d66:	4630      	mov	r0, r6
   39d68:	f000 ff70 	bl	3ac4c <__swsetup_r>
   39d6c:	b1c0      	cbz	r0, 39da0 <_vfiprintf_r+0x78>
   39d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   39d70:	07dc      	lsls	r4, r3, #31
   39d72:	d50e      	bpl.n	39d92 <_vfiprintf_r+0x6a>
   39d74:	f04f 30ff 	mov.w	r0, #4294967295
   39d78:	b01d      	add	sp, #116	; 0x74
   39d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39d7e:	4b7b      	ldr	r3, [pc, #492]	; (39f6c <_vfiprintf_r+0x244>)
   39d80:	429d      	cmp	r5, r3
   39d82:	d101      	bne.n	39d88 <_vfiprintf_r+0x60>
   39d84:	68b5      	ldr	r5, [r6, #8]
   39d86:	e7df      	b.n	39d48 <_vfiprintf_r+0x20>
   39d88:	4b79      	ldr	r3, [pc, #484]	; (39f70 <_vfiprintf_r+0x248>)
   39d8a:	429d      	cmp	r5, r3
   39d8c:	bf08      	it	eq
   39d8e:	68f5      	ldreq	r5, [r6, #12]
   39d90:	e7da      	b.n	39d48 <_vfiprintf_r+0x20>
   39d92:	89ab      	ldrh	r3, [r5, #12]
   39d94:	0598      	lsls	r0, r3, #22
   39d96:	d4ed      	bmi.n	39d74 <_vfiprintf_r+0x4c>
   39d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
   39d9a:	f7e9 fdf7 	bl	2398c <__retarget_lock_release_recursive>
   39d9e:	e7e9      	b.n	39d74 <_vfiprintf_r+0x4c>
   39da0:	2300      	movs	r3, #0
   39da2:	f8cd 800c 	str.w	r8, [sp, #12]
   39da6:	f04f 0901 	mov.w	r9, #1
   39daa:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 39f74 <_vfiprintf_r+0x24c>
   39dae:	9309      	str	r3, [sp, #36]	; 0x24
   39db0:	2320      	movs	r3, #32
   39db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   39db6:	2330      	movs	r3, #48	; 0x30
   39db8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   39dbc:	4623      	mov	r3, r4
   39dbe:	469a      	mov	sl, r3
   39dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
   39dc4:	b10a      	cbz	r2, 39dca <_vfiprintf_r+0xa2>
   39dc6:	2a25      	cmp	r2, #37	; 0x25
   39dc8:	d1f9      	bne.n	39dbe <_vfiprintf_r+0x96>
   39dca:	ebba 0b04 	subs.w	fp, sl, r4
   39dce:	d00b      	beq.n	39de8 <_vfiprintf_r+0xc0>
   39dd0:	465b      	mov	r3, fp
   39dd2:	4622      	mov	r2, r4
   39dd4:	4629      	mov	r1, r5
   39dd6:	4630      	mov	r0, r6
   39dd8:	f007 fb5a 	bl	41490 <__sfputs_r>
   39ddc:	3001      	adds	r0, #1
   39dde:	f000 80aa 	beq.w	39f36 <_vfiprintf_r+0x20e>
   39de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   39de4:	445a      	add	r2, fp
   39de6:	9209      	str	r2, [sp, #36]	; 0x24
   39de8:	f89a 3000 	ldrb.w	r3, [sl]
   39dec:	2b00      	cmp	r3, #0
   39dee:	f000 80a2 	beq.w	39f36 <_vfiprintf_r+0x20e>
   39df2:	2300      	movs	r3, #0
   39df4:	f04f 32ff 	mov.w	r2, #4294967295
   39df8:	f10a 0a01 	add.w	sl, sl, #1
   39dfc:	9304      	str	r3, [sp, #16]
   39dfe:	9307      	str	r3, [sp, #28]
   39e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   39e04:	931a      	str	r3, [sp, #104]	; 0x68
   39e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
   39e0a:	4654      	mov	r4, sl
   39e0c:	2205      	movs	r2, #5
   39e0e:	4859      	ldr	r0, [pc, #356]	; (39f74 <_vfiprintf_r+0x24c>)
   39e10:	f814 1b01 	ldrb.w	r1, [r4], #1
   39e14:	f007 fad0 	bl	413b8 <memchr>
   39e18:	9a04      	ldr	r2, [sp, #16]
   39e1a:	b9d8      	cbnz	r0, 39e54 <_vfiprintf_r+0x12c>
   39e1c:	06d1      	lsls	r1, r2, #27
   39e1e:	bf44      	itt	mi
   39e20:	2320      	movmi	r3, #32
   39e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   39e26:	0713      	lsls	r3, r2, #28
   39e28:	bf44      	itt	mi
   39e2a:	232b      	movmi	r3, #43	; 0x2b
   39e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   39e30:	f89a 3000 	ldrb.w	r3, [sl]
   39e34:	2b2a      	cmp	r3, #42	; 0x2a
   39e36:	d015      	beq.n	39e64 <_vfiprintf_r+0x13c>
   39e38:	9a07      	ldr	r2, [sp, #28]
   39e3a:	4654      	mov	r4, sl
   39e3c:	2000      	movs	r0, #0
   39e3e:	f04f 0c0a 	mov.w	ip, #10
   39e42:	4621      	mov	r1, r4
   39e44:	f811 3b01 	ldrb.w	r3, [r1], #1
   39e48:	3b30      	subs	r3, #48	; 0x30
   39e4a:	2b09      	cmp	r3, #9
   39e4c:	d94e      	bls.n	39eec <_vfiprintf_r+0x1c4>
   39e4e:	b1b0      	cbz	r0, 39e7e <_vfiprintf_r+0x156>
   39e50:	9207      	str	r2, [sp, #28]
   39e52:	e014      	b.n	39e7e <_vfiprintf_r+0x156>
   39e54:	eba0 0308 	sub.w	r3, r0, r8
   39e58:	46a2      	mov	sl, r4
   39e5a:	fa09 f303 	lsl.w	r3, r9, r3
   39e5e:	4313      	orrs	r3, r2
   39e60:	9304      	str	r3, [sp, #16]
   39e62:	e7d2      	b.n	39e0a <_vfiprintf_r+0xe2>
   39e64:	9b03      	ldr	r3, [sp, #12]
   39e66:	1d19      	adds	r1, r3, #4
   39e68:	681b      	ldr	r3, [r3, #0]
   39e6a:	2b00      	cmp	r3, #0
   39e6c:	9103      	str	r1, [sp, #12]
   39e6e:	bfbb      	ittet	lt
   39e70:	425b      	neglt	r3, r3
   39e72:	f042 0202 	orrlt.w	r2, r2, #2
   39e76:	9307      	strge	r3, [sp, #28]
   39e78:	9307      	strlt	r3, [sp, #28]
   39e7a:	bfb8      	it	lt
   39e7c:	9204      	strlt	r2, [sp, #16]
   39e7e:	7823      	ldrb	r3, [r4, #0]
   39e80:	2b2e      	cmp	r3, #46	; 0x2e
   39e82:	d10c      	bne.n	39e9e <_vfiprintf_r+0x176>
   39e84:	7863      	ldrb	r3, [r4, #1]
   39e86:	2b2a      	cmp	r3, #42	; 0x2a
   39e88:	d135      	bne.n	39ef6 <_vfiprintf_r+0x1ce>
   39e8a:	9b03      	ldr	r3, [sp, #12]
   39e8c:	3402      	adds	r4, #2
   39e8e:	1d1a      	adds	r2, r3, #4
   39e90:	681b      	ldr	r3, [r3, #0]
   39e92:	2b00      	cmp	r3, #0
   39e94:	9203      	str	r2, [sp, #12]
   39e96:	bfb8      	it	lt
   39e98:	f04f 33ff 	movlt.w	r3, #4294967295
   39e9c:	9305      	str	r3, [sp, #20]
   39e9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 39f84 <_vfiprintf_r+0x25c>
   39ea2:	2203      	movs	r2, #3
   39ea4:	7821      	ldrb	r1, [r4, #0]
   39ea6:	4650      	mov	r0, sl
   39ea8:	f007 fa86 	bl	413b8 <memchr>
   39eac:	b140      	cbz	r0, 39ec0 <_vfiprintf_r+0x198>
   39eae:	2340      	movs	r3, #64	; 0x40
   39eb0:	eba0 000a 	sub.w	r0, r0, sl
   39eb4:	3401      	adds	r4, #1
   39eb6:	fa03 f000 	lsl.w	r0, r3, r0
   39eba:	9b04      	ldr	r3, [sp, #16]
   39ebc:	4303      	orrs	r3, r0
   39ebe:	9304      	str	r3, [sp, #16]
   39ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
   39ec4:	2206      	movs	r2, #6
   39ec6:	482c      	ldr	r0, [pc, #176]	; (39f78 <_vfiprintf_r+0x250>)
   39ec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   39ecc:	f007 fa74 	bl	413b8 <memchr>
   39ed0:	2800      	cmp	r0, #0
   39ed2:	d03f      	beq.n	39f54 <_vfiprintf_r+0x22c>
   39ed4:	4b29      	ldr	r3, [pc, #164]	; (39f7c <_vfiprintf_r+0x254>)
   39ed6:	bb1b      	cbnz	r3, 39f20 <_vfiprintf_r+0x1f8>
   39ed8:	9b03      	ldr	r3, [sp, #12]
   39eda:	3307      	adds	r3, #7
   39edc:	f023 0307 	bic.w	r3, r3, #7
   39ee0:	3308      	adds	r3, #8
   39ee2:	9303      	str	r3, [sp, #12]
   39ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   39ee6:	443b      	add	r3, r7
   39ee8:	9309      	str	r3, [sp, #36]	; 0x24
   39eea:	e767      	b.n	39dbc <_vfiprintf_r+0x94>
   39eec:	fb0c 3202 	mla	r2, ip, r2, r3
   39ef0:	460c      	mov	r4, r1
   39ef2:	2001      	movs	r0, #1
   39ef4:	e7a5      	b.n	39e42 <_vfiprintf_r+0x11a>
   39ef6:	2300      	movs	r3, #0
   39ef8:	3401      	adds	r4, #1
   39efa:	f04f 0c0a 	mov.w	ip, #10
   39efe:	4619      	mov	r1, r3
   39f00:	9305      	str	r3, [sp, #20]
   39f02:	4620      	mov	r0, r4
   39f04:	f810 2b01 	ldrb.w	r2, [r0], #1
   39f08:	3a30      	subs	r2, #48	; 0x30
   39f0a:	2a09      	cmp	r2, #9
   39f0c:	d903      	bls.n	39f16 <_vfiprintf_r+0x1ee>
   39f0e:	2b00      	cmp	r3, #0
   39f10:	d0c5      	beq.n	39e9e <_vfiprintf_r+0x176>
   39f12:	9105      	str	r1, [sp, #20]
   39f14:	e7c3      	b.n	39e9e <_vfiprintf_r+0x176>
   39f16:	fb0c 2101 	mla	r1, ip, r1, r2
   39f1a:	4604      	mov	r4, r0
   39f1c:	2301      	movs	r3, #1
   39f1e:	e7f0      	b.n	39f02 <_vfiprintf_r+0x1da>
   39f20:	ab03      	add	r3, sp, #12
   39f22:	462a      	mov	r2, r5
   39f24:	a904      	add	r1, sp, #16
   39f26:	4630      	mov	r0, r6
   39f28:	9300      	str	r3, [sp, #0]
   39f2a:	4b15      	ldr	r3, [pc, #84]	; (39f80 <_vfiprintf_r+0x258>)
   39f2c:	f000 f82c 	bl	39f88 <_printf_float>
   39f30:	4607      	mov	r7, r0
   39f32:	1c78      	adds	r0, r7, #1
   39f34:	d1d6      	bne.n	39ee4 <_vfiprintf_r+0x1bc>
   39f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   39f38:	07d9      	lsls	r1, r3, #31
   39f3a:	d405      	bmi.n	39f48 <_vfiprintf_r+0x220>
   39f3c:	89ab      	ldrh	r3, [r5, #12]
   39f3e:	059a      	lsls	r2, r3, #22
   39f40:	d402      	bmi.n	39f48 <_vfiprintf_r+0x220>
   39f42:	6da8      	ldr	r0, [r5, #88]	; 0x58
   39f44:	f7e9 fd22 	bl	2398c <__retarget_lock_release_recursive>
   39f48:	89ab      	ldrh	r3, [r5, #12]
   39f4a:	065b      	lsls	r3, r3, #25
   39f4c:	f53f af12 	bmi.w	39d74 <_vfiprintf_r+0x4c>
   39f50:	9809      	ldr	r0, [sp, #36]	; 0x24
   39f52:	e711      	b.n	39d78 <_vfiprintf_r+0x50>
   39f54:	ab03      	add	r3, sp, #12
   39f56:	462a      	mov	r2, r5
   39f58:	a904      	add	r1, sp, #16
   39f5a:	4630      	mov	r0, r6
   39f5c:	9300      	str	r3, [sp, #0]
   39f5e:	4b08      	ldr	r3, [pc, #32]	; (39f80 <_vfiprintf_r+0x258>)
   39f60:	f000 fa4a 	bl	3a3f8 <_printf_i>
   39f64:	e7e4      	b.n	39f30 <_vfiprintf_r+0x208>
   39f66:	bf00      	nop
   39f68:	0004344c 	.word	0x0004344c
   39f6c:	0004346c 	.word	0x0004346c
   39f70:	0004342c 	.word	0x0004342c
   39f74:	0004be43 	.word	0x0004be43
   39f78:	0004be4d 	.word	0x0004be4d
   39f7c:	00039f89 	.word	0x00039f89
   39f80:	00041491 	.word	0x00041491
   39f84:	0004be49 	.word	0x0004be49

00039f88 <_printf_float>:
   39f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39f8c:	ed2d 8b02 	vpush	{d8}
   39f90:	b091      	sub	sp, #68	; 0x44
   39f92:	460c      	mov	r4, r1
   39f94:	4616      	mov	r6, r2
   39f96:	461f      	mov	r7, r3
   39f98:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
   39f9c:	4605      	mov	r5, r0
   39f9e:	f001 fa99 	bl	3b4d4 <_localeconv_r>
   39fa2:	f8d0 a000 	ldr.w	sl, [r0]
   39fa6:	4650      	mov	r0, sl
   39fa8:	f7e3 f94b 	bl	1d242 <strlen>
   39fac:	2300      	movs	r3, #0
   39fae:	f894 b018 	ldrb.w	fp, [r4, #24]
   39fb2:	ee08 0a10 	vmov	s16, r0
   39fb6:	930e      	str	r3, [sp, #56]	; 0x38
   39fb8:	6823      	ldr	r3, [r4, #0]
   39fba:	9309      	str	r3, [sp, #36]	; 0x24
   39fbc:	f8d8 3000 	ldr.w	r3, [r8]
   39fc0:	3307      	adds	r3, #7
   39fc2:	f023 0307 	bic.w	r3, r3, #7
   39fc6:	f103 0208 	add.w	r2, r3, #8
   39fca:	f8c8 2000 	str.w	r2, [r8]
   39fce:	e9d3 2300 	ldrd	r2, r3, [r3]
   39fd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   39fd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   39fda:	f04f 32ff 	mov.w	r2, #4294967295
   39fde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   39fe2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   39fe6:	930b      	str	r3, [sp, #44]	; 0x2c
   39fe8:	4b9f      	ldr	r3, [pc, #636]	; (3a268 <_printf_float+0x2e0>)
   39fea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   39fee:	f7e2 fe7d 	bl	1ccec <__aeabi_dcmpun>
   39ff2:	bb88      	cbnz	r0, 3a058 <_printf_float+0xd0>
   39ff4:	f04f 32ff 	mov.w	r2, #4294967295
   39ff8:	4b9b      	ldr	r3, [pc, #620]	; (3a268 <_printf_float+0x2e0>)
   39ffa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   39ffe:	f7e2 fe57 	bl	1ccb0 <__aeabi_dcmple>
   3a002:	bb48      	cbnz	r0, 3a058 <_printf_float+0xd0>
   3a004:	2200      	movs	r2, #0
   3a006:	2300      	movs	r3, #0
   3a008:	4640      	mov	r0, r8
   3a00a:	4649      	mov	r1, r9
   3a00c:	f7e2 fe46 	bl	1cc9c <__aeabi_dcmplt>
   3a010:	b110      	cbz	r0, 3a018 <_printf_float+0x90>
   3a012:	232d      	movs	r3, #45	; 0x2d
   3a014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a018:	4b94      	ldr	r3, [pc, #592]	; (3a26c <_printf_float+0x2e4>)
   3a01a:	4895      	ldr	r0, [pc, #596]	; (3a270 <_printf_float+0x2e8>)
   3a01c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   3a020:	bf94      	ite	ls
   3a022:	4698      	movls	r8, r3
   3a024:	4680      	movhi	r8, r0
   3a026:	2303      	movs	r3, #3
   3a028:	f04f 0900 	mov.w	r9, #0
   3a02c:	6123      	str	r3, [r4, #16]
   3a02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a030:	f023 0304 	bic.w	r3, r3, #4
   3a034:	6023      	str	r3, [r4, #0]
   3a036:	4633      	mov	r3, r6
   3a038:	aa0f      	add	r2, sp, #60	; 0x3c
   3a03a:	4621      	mov	r1, r4
   3a03c:	4628      	mov	r0, r5
   3a03e:	9700      	str	r7, [sp, #0]
   3a040:	f007 fad8 	bl	415f4 <_printf_common>
   3a044:	3001      	adds	r0, #1
   3a046:	f040 8092 	bne.w	3a16e <_printf_float+0x1e6>
   3a04a:	f04f 30ff 	mov.w	r0, #4294967295
   3a04e:	b011      	add	sp, #68	; 0x44
   3a050:	ecbd 8b02 	vpop	{d8}
   3a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a058:	4642      	mov	r2, r8
   3a05a:	464b      	mov	r3, r9
   3a05c:	4640      	mov	r0, r8
   3a05e:	4649      	mov	r1, r9
   3a060:	f7e2 fe44 	bl	1ccec <__aeabi_dcmpun>
   3a064:	b140      	cbz	r0, 3a078 <_printf_float+0xf0>
   3a066:	464b      	mov	r3, r9
   3a068:	4882      	ldr	r0, [pc, #520]	; (3a274 <_printf_float+0x2ec>)
   3a06a:	2b00      	cmp	r3, #0
   3a06c:	bfbc      	itt	lt
   3a06e:	232d      	movlt	r3, #45	; 0x2d
   3a070:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   3a074:	4b80      	ldr	r3, [pc, #512]	; (3a278 <_printf_float+0x2f0>)
   3a076:	e7d1      	b.n	3a01c <_printf_float+0x94>
   3a078:	6863      	ldr	r3, [r4, #4]
   3a07a:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
   3a07e:	1c5a      	adds	r2, r3, #1
   3a080:	d143      	bne.n	3a10a <_printf_float+0x182>
   3a082:	2306      	movs	r3, #6
   3a084:	6063      	str	r3, [r4, #4]
   3a086:	2200      	movs	r2, #0
   3a088:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a08a:	4628      	mov	r0, r5
   3a08c:	910a      	str	r1, [sp, #40]	; 0x28
   3a08e:	9206      	str	r2, [sp, #24]
   3a090:	aa0e      	add	r2, sp, #56	; 0x38
   3a092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   3a096:	e9cd b204 	strd	fp, r2, [sp, #16]
   3a09a:	aa0d      	add	r2, sp, #52	; 0x34
   3a09c:	6023      	str	r3, [r4, #0]
   3a09e:	9203      	str	r2, [sp, #12]
   3a0a0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   3a0a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   3a0a8:	6863      	ldr	r3, [r4, #4]
   3a0aa:	4642      	mov	r2, r8
   3a0ac:	9300      	str	r3, [sp, #0]
   3a0ae:	464b      	mov	r3, r9
   3a0b0:	f007 fa00 	bl	414b4 <__cvt>
   3a0b4:	990a      	ldr	r1, [sp, #40]	; 0x28
   3a0b6:	4680      	mov	r8, r0
   3a0b8:	2947      	cmp	r1, #71	; 0x47
   3a0ba:	990d      	ldr	r1, [sp, #52]	; 0x34
   3a0bc:	d108      	bne.n	3a0d0 <_printf_float+0x148>
   3a0be:	1cc8      	adds	r0, r1, #3
   3a0c0:	db02      	blt.n	3a0c8 <_printf_float+0x140>
   3a0c2:	6863      	ldr	r3, [r4, #4]
   3a0c4:	4299      	cmp	r1, r3
   3a0c6:	dd40      	ble.n	3a14a <_printf_float+0x1c2>
   3a0c8:	f1ab 0b02 	sub.w	fp, fp, #2
   3a0cc:	fa5f fb8b 	uxtb.w	fp, fp
   3a0d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3a0d4:	d81f      	bhi.n	3a116 <_printf_float+0x18e>
   3a0d6:	3901      	subs	r1, #1
   3a0d8:	465a      	mov	r2, fp
   3a0da:	f104 0050 	add.w	r0, r4, #80	; 0x50
   3a0de:	910d      	str	r1, [sp, #52]	; 0x34
   3a0e0:	f007 fa4a 	bl	41578 <__exponent>
   3a0e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a0e6:	4681      	mov	r9, r0
   3a0e8:	1813      	adds	r3, r2, r0
   3a0ea:	2a01      	cmp	r2, #1
   3a0ec:	6123      	str	r3, [r4, #16]
   3a0ee:	dc02      	bgt.n	3a0f6 <_printf_float+0x16e>
   3a0f0:	6822      	ldr	r2, [r4, #0]
   3a0f2:	07d2      	lsls	r2, r2, #31
   3a0f4:	d501      	bpl.n	3a0fa <_printf_float+0x172>
   3a0f6:	3301      	adds	r3, #1
   3a0f8:	6123      	str	r3, [r4, #16]
   3a0fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3a0fe:	2b00      	cmp	r3, #0
   3a100:	d099      	beq.n	3a036 <_printf_float+0xae>
   3a102:	232d      	movs	r3, #45	; 0x2d
   3a104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a108:	e795      	b.n	3a036 <_printf_float+0xae>
   3a10a:	2947      	cmp	r1, #71	; 0x47
   3a10c:	d1bb      	bne.n	3a086 <_printf_float+0xfe>
   3a10e:	2b00      	cmp	r3, #0
   3a110:	d1b9      	bne.n	3a086 <_printf_float+0xfe>
   3a112:	2301      	movs	r3, #1
   3a114:	e7b6      	b.n	3a084 <_printf_float+0xfc>
   3a116:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   3a11a:	d118      	bne.n	3a14e <_printf_float+0x1c6>
   3a11c:	2900      	cmp	r1, #0
   3a11e:	6863      	ldr	r3, [r4, #4]
   3a120:	dd0b      	ble.n	3a13a <_printf_float+0x1b2>
   3a122:	6121      	str	r1, [r4, #16]
   3a124:	b913      	cbnz	r3, 3a12c <_printf_float+0x1a4>
   3a126:	6822      	ldr	r2, [r4, #0]
   3a128:	07d0      	lsls	r0, r2, #31
   3a12a:	d502      	bpl.n	3a132 <_printf_float+0x1aa>
   3a12c:	3301      	adds	r3, #1
   3a12e:	440b      	add	r3, r1
   3a130:	6123      	str	r3, [r4, #16]
   3a132:	f04f 0900 	mov.w	r9, #0
   3a136:	65a1      	str	r1, [r4, #88]	; 0x58
   3a138:	e7df      	b.n	3a0fa <_printf_float+0x172>
   3a13a:	b913      	cbnz	r3, 3a142 <_printf_float+0x1ba>
   3a13c:	6822      	ldr	r2, [r4, #0]
   3a13e:	07d2      	lsls	r2, r2, #31
   3a140:	d501      	bpl.n	3a146 <_printf_float+0x1be>
   3a142:	3302      	adds	r3, #2
   3a144:	e7f4      	b.n	3a130 <_printf_float+0x1a8>
   3a146:	2301      	movs	r3, #1
   3a148:	e7f2      	b.n	3a130 <_printf_float+0x1a8>
   3a14a:	f04f 0b67 	mov.w	fp, #103	; 0x67
   3a14e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a150:	4299      	cmp	r1, r3
   3a152:	db05      	blt.n	3a160 <_printf_float+0x1d8>
   3a154:	6823      	ldr	r3, [r4, #0]
   3a156:	6121      	str	r1, [r4, #16]
   3a158:	07d8      	lsls	r0, r3, #31
   3a15a:	d5ea      	bpl.n	3a132 <_printf_float+0x1aa>
   3a15c:	1c4b      	adds	r3, r1, #1
   3a15e:	e7e7      	b.n	3a130 <_printf_float+0x1a8>
   3a160:	2900      	cmp	r1, #0
   3a162:	bfd4      	ite	le
   3a164:	f1c1 0202 	rsble	r2, r1, #2
   3a168:	2201      	movgt	r2, #1
   3a16a:	4413      	add	r3, r2
   3a16c:	e7e0      	b.n	3a130 <_printf_float+0x1a8>
   3a16e:	6823      	ldr	r3, [r4, #0]
   3a170:	055a      	lsls	r2, r3, #21
   3a172:	d407      	bmi.n	3a184 <_printf_float+0x1fc>
   3a174:	6923      	ldr	r3, [r4, #16]
   3a176:	4642      	mov	r2, r8
   3a178:	4631      	mov	r1, r6
   3a17a:	4628      	mov	r0, r5
   3a17c:	47b8      	blx	r7
   3a17e:	3001      	adds	r0, #1
   3a180:	d12c      	bne.n	3a1dc <_printf_float+0x254>
   3a182:	e762      	b.n	3a04a <_printf_float+0xc2>
   3a184:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3a188:	f240 80e0 	bls.w	3a34c <_printf_float+0x3c4>
   3a18c:	2200      	movs	r2, #0
   3a18e:	2300      	movs	r3, #0
   3a190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3a194:	f7e2 fd78 	bl	1cc88 <__aeabi_dcmpeq>
   3a198:	2800      	cmp	r0, #0
   3a19a:	d034      	beq.n	3a206 <_printf_float+0x27e>
   3a19c:	2301      	movs	r3, #1
   3a19e:	4a37      	ldr	r2, [pc, #220]	; (3a27c <_printf_float+0x2f4>)
   3a1a0:	4631      	mov	r1, r6
   3a1a2:	4628      	mov	r0, r5
   3a1a4:	47b8      	blx	r7
   3a1a6:	3001      	adds	r0, #1
   3a1a8:	f43f af4f 	beq.w	3a04a <_printf_float+0xc2>
   3a1ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a1b0:	429a      	cmp	r2, r3
   3a1b2:	db02      	blt.n	3a1ba <_printf_float+0x232>
   3a1b4:	6823      	ldr	r3, [r4, #0]
   3a1b6:	07d8      	lsls	r0, r3, #31
   3a1b8:	d510      	bpl.n	3a1dc <_printf_float+0x254>
   3a1ba:	ee18 3a10 	vmov	r3, s16
   3a1be:	4652      	mov	r2, sl
   3a1c0:	4631      	mov	r1, r6
   3a1c2:	4628      	mov	r0, r5
   3a1c4:	47b8      	blx	r7
   3a1c6:	3001      	adds	r0, #1
   3a1c8:	f43f af3f 	beq.w	3a04a <_printf_float+0xc2>
   3a1cc:	f04f 0800 	mov.w	r8, #0
   3a1d0:	f104 091a 	add.w	r9, r4, #26
   3a1d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a1d6:	3b01      	subs	r3, #1
   3a1d8:	4543      	cmp	r3, r8
   3a1da:	dc09      	bgt.n	3a1f0 <_printf_float+0x268>
   3a1dc:	6823      	ldr	r3, [r4, #0]
   3a1de:	079b      	lsls	r3, r3, #30
   3a1e0:	f100 8105 	bmi.w	3a3ee <_printf_float+0x466>
   3a1e4:	68e0      	ldr	r0, [r4, #12]
   3a1e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3a1e8:	4298      	cmp	r0, r3
   3a1ea:	bfb8      	it	lt
   3a1ec:	4618      	movlt	r0, r3
   3a1ee:	e72e      	b.n	3a04e <_printf_float+0xc6>
   3a1f0:	2301      	movs	r3, #1
   3a1f2:	464a      	mov	r2, r9
   3a1f4:	4631      	mov	r1, r6
   3a1f6:	4628      	mov	r0, r5
   3a1f8:	47b8      	blx	r7
   3a1fa:	3001      	adds	r0, #1
   3a1fc:	f43f af25 	beq.w	3a04a <_printf_float+0xc2>
   3a200:	f108 0801 	add.w	r8, r8, #1
   3a204:	e7e6      	b.n	3a1d4 <_printf_float+0x24c>
   3a206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3a208:	2b00      	cmp	r3, #0
   3a20a:	dc39      	bgt.n	3a280 <_printf_float+0x2f8>
   3a20c:	2301      	movs	r3, #1
   3a20e:	4a1b      	ldr	r2, [pc, #108]	; (3a27c <_printf_float+0x2f4>)
   3a210:	4631      	mov	r1, r6
   3a212:	4628      	mov	r0, r5
   3a214:	47b8      	blx	r7
   3a216:	3001      	adds	r0, #1
   3a218:	f43f af17 	beq.w	3a04a <_printf_float+0xc2>
   3a21c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a220:	4313      	orrs	r3, r2
   3a222:	d102      	bne.n	3a22a <_printf_float+0x2a2>
   3a224:	6823      	ldr	r3, [r4, #0]
   3a226:	07d9      	lsls	r1, r3, #31
   3a228:	d5d8      	bpl.n	3a1dc <_printf_float+0x254>
   3a22a:	ee18 3a10 	vmov	r3, s16
   3a22e:	4652      	mov	r2, sl
   3a230:	4631      	mov	r1, r6
   3a232:	4628      	mov	r0, r5
   3a234:	47b8      	blx	r7
   3a236:	3001      	adds	r0, #1
   3a238:	f43f af07 	beq.w	3a04a <_printf_float+0xc2>
   3a23c:	f04f 0900 	mov.w	r9, #0
   3a240:	f104 0a1a 	add.w	sl, r4, #26
   3a244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3a246:	425b      	negs	r3, r3
   3a248:	454b      	cmp	r3, r9
   3a24a:	dc01      	bgt.n	3a250 <_printf_float+0x2c8>
   3a24c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a24e:	e792      	b.n	3a176 <_printf_float+0x1ee>
   3a250:	2301      	movs	r3, #1
   3a252:	4652      	mov	r2, sl
   3a254:	4631      	mov	r1, r6
   3a256:	4628      	mov	r0, r5
   3a258:	47b8      	blx	r7
   3a25a:	3001      	adds	r0, #1
   3a25c:	f43f aef5 	beq.w	3a04a <_printf_float+0xc2>
   3a260:	f109 0901 	add.w	r9, r9, #1
   3a264:	e7ee      	b.n	3a244 <_printf_float+0x2bc>
   3a266:	bf00      	nop
   3a268:	7fefffff 	.word	0x7fefffff
   3a26c:	0004be54 	.word	0x0004be54
   3a270:	0004be58 	.word	0x0004be58
   3a274:	0004be60 	.word	0x0004be60
   3a278:	0004be5c 	.word	0x0004be5c
   3a27c:	00045af1 	.word	0x00045af1
   3a280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a282:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3a284:	429a      	cmp	r2, r3
   3a286:	bfa8      	it	ge
   3a288:	461a      	movge	r2, r3
   3a28a:	2a00      	cmp	r2, #0
   3a28c:	4691      	mov	r9, r2
   3a28e:	dc37      	bgt.n	3a300 <_printf_float+0x378>
   3a290:	f04f 0b00 	mov.w	fp, #0
   3a294:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3a298:	f104 021a 	add.w	r2, r4, #26
   3a29c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3a29e:	9309      	str	r3, [sp, #36]	; 0x24
   3a2a0:	eba3 0309 	sub.w	r3, r3, r9
   3a2a4:	455b      	cmp	r3, fp
   3a2a6:	dc33      	bgt.n	3a310 <_printf_float+0x388>
   3a2a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a2ac:	429a      	cmp	r2, r3
   3a2ae:	db3b      	blt.n	3a328 <_printf_float+0x3a0>
   3a2b0:	6823      	ldr	r3, [r4, #0]
   3a2b2:	07da      	lsls	r2, r3, #31
   3a2b4:	d438      	bmi.n	3a328 <_printf_float+0x3a0>
   3a2b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a2b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3a2ba:	990d      	ldr	r1, [sp, #52]	; 0x34
   3a2bc:	1a9a      	subs	r2, r3, r2
   3a2be:	eba3 0901 	sub.w	r9, r3, r1
   3a2c2:	4591      	cmp	r9, r2
   3a2c4:	bfa8      	it	ge
   3a2c6:	4691      	movge	r9, r2
   3a2c8:	f1b9 0f00 	cmp.w	r9, #0
   3a2cc:	dc35      	bgt.n	3a33a <_printf_float+0x3b2>
   3a2ce:	f04f 0800 	mov.w	r8, #0
   3a2d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3a2d6:	f104 0a1a 	add.w	sl, r4, #26
   3a2da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a2de:	1a9b      	subs	r3, r3, r2
   3a2e0:	eba3 0309 	sub.w	r3, r3, r9
   3a2e4:	4543      	cmp	r3, r8
   3a2e6:	f77f af79 	ble.w	3a1dc <_printf_float+0x254>
   3a2ea:	2301      	movs	r3, #1
   3a2ec:	4652      	mov	r2, sl
   3a2ee:	4631      	mov	r1, r6
   3a2f0:	4628      	mov	r0, r5
   3a2f2:	47b8      	blx	r7
   3a2f4:	3001      	adds	r0, #1
   3a2f6:	f43f aea8 	beq.w	3a04a <_printf_float+0xc2>
   3a2fa:	f108 0801 	add.w	r8, r8, #1
   3a2fe:	e7ec      	b.n	3a2da <_printf_float+0x352>
   3a300:	4613      	mov	r3, r2
   3a302:	4631      	mov	r1, r6
   3a304:	4642      	mov	r2, r8
   3a306:	4628      	mov	r0, r5
   3a308:	47b8      	blx	r7
   3a30a:	3001      	adds	r0, #1
   3a30c:	d1c0      	bne.n	3a290 <_printf_float+0x308>
   3a30e:	e69c      	b.n	3a04a <_printf_float+0xc2>
   3a310:	2301      	movs	r3, #1
   3a312:	4631      	mov	r1, r6
   3a314:	4628      	mov	r0, r5
   3a316:	9209      	str	r2, [sp, #36]	; 0x24
   3a318:	47b8      	blx	r7
   3a31a:	3001      	adds	r0, #1
   3a31c:	f43f ae95 	beq.w	3a04a <_printf_float+0xc2>
   3a320:	f10b 0b01 	add.w	fp, fp, #1
   3a324:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3a326:	e7b9      	b.n	3a29c <_printf_float+0x314>
   3a328:	ee18 3a10 	vmov	r3, s16
   3a32c:	4652      	mov	r2, sl
   3a32e:	4631      	mov	r1, r6
   3a330:	4628      	mov	r0, r5
   3a332:	47b8      	blx	r7
   3a334:	3001      	adds	r0, #1
   3a336:	d1be      	bne.n	3a2b6 <_printf_float+0x32e>
   3a338:	e687      	b.n	3a04a <_printf_float+0xc2>
   3a33a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3a33c:	464b      	mov	r3, r9
   3a33e:	4631      	mov	r1, r6
   3a340:	4628      	mov	r0, r5
   3a342:	4442      	add	r2, r8
   3a344:	47b8      	blx	r7
   3a346:	3001      	adds	r0, #1
   3a348:	d1c1      	bne.n	3a2ce <_printf_float+0x346>
   3a34a:	e67e      	b.n	3a04a <_printf_float+0xc2>
   3a34c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a34e:	2a01      	cmp	r2, #1
   3a350:	dc01      	bgt.n	3a356 <_printf_float+0x3ce>
   3a352:	07db      	lsls	r3, r3, #31
   3a354:	d538      	bpl.n	3a3c8 <_printf_float+0x440>
   3a356:	2301      	movs	r3, #1
   3a358:	4642      	mov	r2, r8
   3a35a:	4631      	mov	r1, r6
   3a35c:	4628      	mov	r0, r5
   3a35e:	47b8      	blx	r7
   3a360:	3001      	adds	r0, #1
   3a362:	f43f ae72 	beq.w	3a04a <_printf_float+0xc2>
   3a366:	ee18 3a10 	vmov	r3, s16
   3a36a:	4652      	mov	r2, sl
   3a36c:	4631      	mov	r1, r6
   3a36e:	4628      	mov	r0, r5
   3a370:	47b8      	blx	r7
   3a372:	3001      	adds	r0, #1
   3a374:	f43f ae69 	beq.w	3a04a <_printf_float+0xc2>
   3a378:	2200      	movs	r2, #0
   3a37a:	2300      	movs	r3, #0
   3a37c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3a380:	f7e2 fc82 	bl	1cc88 <__aeabi_dcmpeq>
   3a384:	b9d8      	cbnz	r0, 3a3be <_printf_float+0x436>
   3a386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a388:	f108 0201 	add.w	r2, r8, #1
   3a38c:	3b01      	subs	r3, #1
   3a38e:	4631      	mov	r1, r6
   3a390:	4628      	mov	r0, r5
   3a392:	47b8      	blx	r7
   3a394:	3001      	adds	r0, #1
   3a396:	d10e      	bne.n	3a3b6 <_printf_float+0x42e>
   3a398:	e657      	b.n	3a04a <_printf_float+0xc2>
   3a39a:	2301      	movs	r3, #1
   3a39c:	4652      	mov	r2, sl
   3a39e:	4631      	mov	r1, r6
   3a3a0:	4628      	mov	r0, r5
   3a3a2:	47b8      	blx	r7
   3a3a4:	3001      	adds	r0, #1
   3a3a6:	f43f ae50 	beq.w	3a04a <_printf_float+0xc2>
   3a3aa:	f108 0801 	add.w	r8, r8, #1
   3a3ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a3b0:	3b01      	subs	r3, #1
   3a3b2:	4543      	cmp	r3, r8
   3a3b4:	dcf1      	bgt.n	3a39a <_printf_float+0x412>
   3a3b6:	464b      	mov	r3, r9
   3a3b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
   3a3bc:	e6dc      	b.n	3a178 <_printf_float+0x1f0>
   3a3be:	f04f 0800 	mov.w	r8, #0
   3a3c2:	f104 0a1a 	add.w	sl, r4, #26
   3a3c6:	e7f2      	b.n	3a3ae <_printf_float+0x426>
   3a3c8:	2301      	movs	r3, #1
   3a3ca:	4642      	mov	r2, r8
   3a3cc:	e7df      	b.n	3a38e <_printf_float+0x406>
   3a3ce:	2301      	movs	r3, #1
   3a3d0:	464a      	mov	r2, r9
   3a3d2:	4631      	mov	r1, r6
   3a3d4:	4628      	mov	r0, r5
   3a3d6:	47b8      	blx	r7
   3a3d8:	3001      	adds	r0, #1
   3a3da:	f43f ae36 	beq.w	3a04a <_printf_float+0xc2>
   3a3de:	f108 0801 	add.w	r8, r8, #1
   3a3e2:	68e3      	ldr	r3, [r4, #12]
   3a3e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   3a3e6:	1a5b      	subs	r3, r3, r1
   3a3e8:	4543      	cmp	r3, r8
   3a3ea:	dcf0      	bgt.n	3a3ce <_printf_float+0x446>
   3a3ec:	e6fa      	b.n	3a1e4 <_printf_float+0x25c>
   3a3ee:	f04f 0800 	mov.w	r8, #0
   3a3f2:	f104 0919 	add.w	r9, r4, #25
   3a3f6:	e7f4      	b.n	3a3e2 <_printf_float+0x45a>

0003a3f8 <_printf_i>:
   3a3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   3a3fc:	7e0f      	ldrb	r7, [r1, #24]
   3a3fe:	4691      	mov	r9, r2
   3a400:	4680      	mov	r8, r0
   3a402:	460c      	mov	r4, r1
   3a404:	2f78      	cmp	r7, #120	; 0x78
   3a406:	469a      	mov	sl, r3
   3a408:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   3a40a:	f101 0243 	add.w	r2, r1, #67	; 0x43
   3a40e:	d807      	bhi.n	3a420 <_printf_i+0x28>
   3a410:	2f62      	cmp	r7, #98	; 0x62
   3a412:	d80a      	bhi.n	3a42a <_printf_i+0x32>
   3a414:	2f00      	cmp	r7, #0
   3a416:	f000 80d8 	beq.w	3a5ca <_printf_i+0x1d2>
   3a41a:	2f58      	cmp	r7, #88	; 0x58
   3a41c:	f000 80a3 	beq.w	3a566 <_printf_i+0x16e>
   3a420:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3a424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   3a428:	e03a      	b.n	3a4a0 <_printf_i+0xa8>
   3a42a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   3a42e:	2b15      	cmp	r3, #21
   3a430:	d8f6      	bhi.n	3a420 <_printf_i+0x28>
   3a432:	a101      	add	r1, pc, #4	; (adr r1, 3a438 <_printf_i+0x40>)
   3a434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   3a438:	0003a491 	.word	0x0003a491
   3a43c:	0003a4a5 	.word	0x0003a4a5
   3a440:	0003a421 	.word	0x0003a421
   3a444:	0003a421 	.word	0x0003a421
   3a448:	0003a421 	.word	0x0003a421
   3a44c:	0003a421 	.word	0x0003a421
   3a450:	0003a4a5 	.word	0x0003a4a5
   3a454:	0003a421 	.word	0x0003a421
   3a458:	0003a421 	.word	0x0003a421
   3a45c:	0003a421 	.word	0x0003a421
   3a460:	0003a421 	.word	0x0003a421
   3a464:	0003a5b1 	.word	0x0003a5b1
   3a468:	0003a4d5 	.word	0x0003a4d5
   3a46c:	0003a593 	.word	0x0003a593
   3a470:	0003a421 	.word	0x0003a421
   3a474:	0003a421 	.word	0x0003a421
   3a478:	0003a5d3 	.word	0x0003a5d3
   3a47c:	0003a421 	.word	0x0003a421
   3a480:	0003a4d5 	.word	0x0003a4d5
   3a484:	0003a421 	.word	0x0003a421
   3a488:	0003a421 	.word	0x0003a421
   3a48c:	0003a59b 	.word	0x0003a59b
   3a490:	682b      	ldr	r3, [r5, #0]
   3a492:	1d1a      	adds	r2, r3, #4
   3a494:	681b      	ldr	r3, [r3, #0]
   3a496:	602a      	str	r2, [r5, #0]
   3a498:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3a49c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3a4a0:	2301      	movs	r3, #1
   3a4a2:	e0a3      	b.n	3a5ec <_printf_i+0x1f4>
   3a4a4:	6820      	ldr	r0, [r4, #0]
   3a4a6:	6829      	ldr	r1, [r5, #0]
   3a4a8:	0606      	lsls	r6, r0, #24
   3a4aa:	f101 0304 	add.w	r3, r1, #4
   3a4ae:	d50a      	bpl.n	3a4c6 <_printf_i+0xce>
   3a4b0:	680e      	ldr	r6, [r1, #0]
   3a4b2:	602b      	str	r3, [r5, #0]
   3a4b4:	2e00      	cmp	r6, #0
   3a4b6:	da03      	bge.n	3a4c0 <_printf_i+0xc8>
   3a4b8:	232d      	movs	r3, #45	; 0x2d
   3a4ba:	4276      	negs	r6, r6
   3a4bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a4c0:	485e      	ldr	r0, [pc, #376]	; (3a63c <_printf_i+0x244>)
   3a4c2:	230a      	movs	r3, #10
   3a4c4:	e019      	b.n	3a4fa <_printf_i+0x102>
   3a4c6:	680e      	ldr	r6, [r1, #0]
   3a4c8:	f010 0f40 	tst.w	r0, #64	; 0x40
   3a4cc:	602b      	str	r3, [r5, #0]
   3a4ce:	bf18      	it	ne
   3a4d0:	b236      	sxthne	r6, r6
   3a4d2:	e7ef      	b.n	3a4b4 <_printf_i+0xbc>
   3a4d4:	682b      	ldr	r3, [r5, #0]
   3a4d6:	6820      	ldr	r0, [r4, #0]
   3a4d8:	1d19      	adds	r1, r3, #4
   3a4da:	6029      	str	r1, [r5, #0]
   3a4dc:	0601      	lsls	r1, r0, #24
   3a4de:	d501      	bpl.n	3a4e4 <_printf_i+0xec>
   3a4e0:	681e      	ldr	r6, [r3, #0]
   3a4e2:	e002      	b.n	3a4ea <_printf_i+0xf2>
   3a4e4:	0646      	lsls	r6, r0, #25
   3a4e6:	d5fb      	bpl.n	3a4e0 <_printf_i+0xe8>
   3a4e8:	881e      	ldrh	r6, [r3, #0]
   3a4ea:	2f6f      	cmp	r7, #111	; 0x6f
   3a4ec:	4853      	ldr	r0, [pc, #332]	; (3a63c <_printf_i+0x244>)
   3a4ee:	bf0c      	ite	eq
   3a4f0:	2308      	moveq	r3, #8
   3a4f2:	230a      	movne	r3, #10
   3a4f4:	2100      	movs	r1, #0
   3a4f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   3a4fa:	6865      	ldr	r5, [r4, #4]
   3a4fc:	2d00      	cmp	r5, #0
   3a4fe:	60a5      	str	r5, [r4, #8]
   3a500:	bfa2      	ittt	ge
   3a502:	6821      	ldrge	r1, [r4, #0]
   3a504:	f021 0104 	bicge.w	r1, r1, #4
   3a508:	6021      	strge	r1, [r4, #0]
   3a50a:	b90e      	cbnz	r6, 3a510 <_printf_i+0x118>
   3a50c:	2d00      	cmp	r5, #0
   3a50e:	d04d      	beq.n	3a5ac <_printf_i+0x1b4>
   3a510:	4615      	mov	r5, r2
   3a512:	fbb6 f1f3 	udiv	r1, r6, r3
   3a516:	fb03 6711 	mls	r7, r3, r1, r6
   3a51a:	5dc7      	ldrb	r7, [r0, r7]
   3a51c:	f805 7d01 	strb.w	r7, [r5, #-1]!
   3a520:	4637      	mov	r7, r6
   3a522:	460e      	mov	r6, r1
   3a524:	42bb      	cmp	r3, r7
   3a526:	d9f4      	bls.n	3a512 <_printf_i+0x11a>
   3a528:	2b08      	cmp	r3, #8
   3a52a:	d10b      	bne.n	3a544 <_printf_i+0x14c>
   3a52c:	6823      	ldr	r3, [r4, #0]
   3a52e:	07de      	lsls	r6, r3, #31
   3a530:	d508      	bpl.n	3a544 <_printf_i+0x14c>
   3a532:	6923      	ldr	r3, [r4, #16]
   3a534:	6861      	ldr	r1, [r4, #4]
   3a536:	4299      	cmp	r1, r3
   3a538:	bfde      	ittt	le
   3a53a:	2330      	movle	r3, #48	; 0x30
   3a53c:	f805 3c01 	strble.w	r3, [r5, #-1]
   3a540:	f105 35ff 	addle.w	r5, r5, #4294967295
   3a544:	1b52      	subs	r2, r2, r5
   3a546:	6122      	str	r2, [r4, #16]
   3a548:	464b      	mov	r3, r9
   3a54a:	aa03      	add	r2, sp, #12
   3a54c:	4621      	mov	r1, r4
   3a54e:	4640      	mov	r0, r8
   3a550:	f8cd a000 	str.w	sl, [sp]
   3a554:	f007 f84e 	bl	415f4 <_printf_common>
   3a558:	3001      	adds	r0, #1
   3a55a:	d14c      	bne.n	3a5f6 <_printf_i+0x1fe>
   3a55c:	f04f 30ff 	mov.w	r0, #4294967295
   3a560:	b004      	add	sp, #16
   3a562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a566:	4835      	ldr	r0, [pc, #212]	; (3a63c <_printf_i+0x244>)
   3a568:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   3a56c:	6829      	ldr	r1, [r5, #0]
   3a56e:	6823      	ldr	r3, [r4, #0]
   3a570:	f851 6b04 	ldr.w	r6, [r1], #4
   3a574:	6029      	str	r1, [r5, #0]
   3a576:	061d      	lsls	r5, r3, #24
   3a578:	d514      	bpl.n	3a5a4 <_printf_i+0x1ac>
   3a57a:	07df      	lsls	r7, r3, #31
   3a57c:	bf44      	itt	mi
   3a57e:	f043 0320 	orrmi.w	r3, r3, #32
   3a582:	6023      	strmi	r3, [r4, #0]
   3a584:	b91e      	cbnz	r6, 3a58e <_printf_i+0x196>
   3a586:	6823      	ldr	r3, [r4, #0]
   3a588:	f023 0320 	bic.w	r3, r3, #32
   3a58c:	6023      	str	r3, [r4, #0]
   3a58e:	2310      	movs	r3, #16
   3a590:	e7b0      	b.n	3a4f4 <_printf_i+0xfc>
   3a592:	6823      	ldr	r3, [r4, #0]
   3a594:	f043 0320 	orr.w	r3, r3, #32
   3a598:	6023      	str	r3, [r4, #0]
   3a59a:	2378      	movs	r3, #120	; 0x78
   3a59c:	4828      	ldr	r0, [pc, #160]	; (3a640 <_printf_i+0x248>)
   3a59e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   3a5a2:	e7e3      	b.n	3a56c <_printf_i+0x174>
   3a5a4:	0659      	lsls	r1, r3, #25
   3a5a6:	bf48      	it	mi
   3a5a8:	b2b6      	uxthmi	r6, r6
   3a5aa:	e7e6      	b.n	3a57a <_printf_i+0x182>
   3a5ac:	4615      	mov	r5, r2
   3a5ae:	e7bb      	b.n	3a528 <_printf_i+0x130>
   3a5b0:	682b      	ldr	r3, [r5, #0]
   3a5b2:	6826      	ldr	r6, [r4, #0]
   3a5b4:	1d18      	adds	r0, r3, #4
   3a5b6:	6961      	ldr	r1, [r4, #20]
   3a5b8:	6028      	str	r0, [r5, #0]
   3a5ba:	0635      	lsls	r5, r6, #24
   3a5bc:	681b      	ldr	r3, [r3, #0]
   3a5be:	d501      	bpl.n	3a5c4 <_printf_i+0x1cc>
   3a5c0:	6019      	str	r1, [r3, #0]
   3a5c2:	e002      	b.n	3a5ca <_printf_i+0x1d2>
   3a5c4:	0670      	lsls	r0, r6, #25
   3a5c6:	d5fb      	bpl.n	3a5c0 <_printf_i+0x1c8>
   3a5c8:	8019      	strh	r1, [r3, #0]
   3a5ca:	2300      	movs	r3, #0
   3a5cc:	4615      	mov	r5, r2
   3a5ce:	6123      	str	r3, [r4, #16]
   3a5d0:	e7ba      	b.n	3a548 <_printf_i+0x150>
   3a5d2:	682b      	ldr	r3, [r5, #0]
   3a5d4:	2100      	movs	r1, #0
   3a5d6:	1d1a      	adds	r2, r3, #4
   3a5d8:	602a      	str	r2, [r5, #0]
   3a5da:	681d      	ldr	r5, [r3, #0]
   3a5dc:	6862      	ldr	r2, [r4, #4]
   3a5de:	4628      	mov	r0, r5
   3a5e0:	f006 feea 	bl	413b8 <memchr>
   3a5e4:	b108      	cbz	r0, 3a5ea <_printf_i+0x1f2>
   3a5e6:	1b40      	subs	r0, r0, r5
   3a5e8:	6060      	str	r0, [r4, #4]
   3a5ea:	6863      	ldr	r3, [r4, #4]
   3a5ec:	6123      	str	r3, [r4, #16]
   3a5ee:	2300      	movs	r3, #0
   3a5f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a5f4:	e7a8      	b.n	3a548 <_printf_i+0x150>
   3a5f6:	6923      	ldr	r3, [r4, #16]
   3a5f8:	462a      	mov	r2, r5
   3a5fa:	4649      	mov	r1, r9
   3a5fc:	4640      	mov	r0, r8
   3a5fe:	47d0      	blx	sl
   3a600:	3001      	adds	r0, #1
   3a602:	d0ab      	beq.n	3a55c <_printf_i+0x164>
   3a604:	6823      	ldr	r3, [r4, #0]
   3a606:	079b      	lsls	r3, r3, #30
   3a608:	d413      	bmi.n	3a632 <_printf_i+0x23a>
   3a60a:	68e0      	ldr	r0, [r4, #12]
   3a60c:	9b03      	ldr	r3, [sp, #12]
   3a60e:	4298      	cmp	r0, r3
   3a610:	bfb8      	it	lt
   3a612:	4618      	movlt	r0, r3
   3a614:	e7a4      	b.n	3a560 <_printf_i+0x168>
   3a616:	2301      	movs	r3, #1
   3a618:	4632      	mov	r2, r6
   3a61a:	4649      	mov	r1, r9
   3a61c:	4640      	mov	r0, r8
   3a61e:	47d0      	blx	sl
   3a620:	3001      	adds	r0, #1
   3a622:	d09b      	beq.n	3a55c <_printf_i+0x164>
   3a624:	3501      	adds	r5, #1
   3a626:	68e3      	ldr	r3, [r4, #12]
   3a628:	9903      	ldr	r1, [sp, #12]
   3a62a:	1a5b      	subs	r3, r3, r1
   3a62c:	42ab      	cmp	r3, r5
   3a62e:	dcf2      	bgt.n	3a616 <_printf_i+0x21e>
   3a630:	e7eb      	b.n	3a60a <_printf_i+0x212>
   3a632:	2500      	movs	r5, #0
   3a634:	f104 0619 	add.w	r6, r4, #25
   3a638:	e7f5      	b.n	3a626 <_printf_i+0x22e>
   3a63a:	bf00      	nop
   3a63c:	0004be64 	.word	0x0004be64
   3a640:	0004be75 	.word	0x0004be75

0003a644 <iprintf>:
   3a644:	b40f      	push	{r0, r1, r2, r3}
   3a646:	4b0a      	ldr	r3, [pc, #40]	; (3a670 <iprintf+0x2c>)
   3a648:	b513      	push	{r0, r1, r4, lr}
   3a64a:	681c      	ldr	r4, [r3, #0]
   3a64c:	b124      	cbz	r4, 3a658 <iprintf+0x14>
   3a64e:	69a3      	ldr	r3, [r4, #24]
   3a650:	b913      	cbnz	r3, 3a658 <iprintf+0x14>
   3a652:	4620      	mov	r0, r4
   3a654:	f000 fc7a 	bl	3af4c <__sinit>
   3a658:	ab05      	add	r3, sp, #20
   3a65a:	9a04      	ldr	r2, [sp, #16]
   3a65c:	68a1      	ldr	r1, [r4, #8]
   3a65e:	4620      	mov	r0, r4
   3a660:	9301      	str	r3, [sp, #4]
   3a662:	f7ff fb61 	bl	39d28 <_vfiprintf_r>
   3a666:	b002      	add	sp, #8
   3a668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3a66c:	b004      	add	sp, #16
   3a66e:	4770      	bx	lr
   3a670:	20014a74 	.word	0x20014a74

0003a674 <realloc>:
   3a674:	4b02      	ldr	r3, [pc, #8]	; (3a680 <realloc+0xc>)
   3a676:	460a      	mov	r2, r1
   3a678:	4601      	mov	r1, r0
   3a67a:	6818      	ldr	r0, [r3, #0]
   3a67c:	f007 bc7b 	b.w	41f76 <_realloc_r>
   3a680:	20014a74 	.word	0x20014a74

0003a684 <_sbrk_r>:
   3a684:	b538      	push	{r3, r4, r5, lr}
   3a686:	2300      	movs	r3, #0
   3a688:	4d05      	ldr	r5, [pc, #20]	; (3a6a0 <_sbrk_r+0x1c>)
   3a68a:	4604      	mov	r4, r0
   3a68c:	4608      	mov	r0, r1
   3a68e:	602b      	str	r3, [r5, #0]
   3a690:	f7e9 f924 	bl	238dc <_sbrk>
   3a694:	1c43      	adds	r3, r0, #1
   3a696:	d102      	bne.n	3a69e <_sbrk_r+0x1a>
   3a698:	682b      	ldr	r3, [r5, #0]
   3a69a:	b103      	cbz	r3, 3a69e <_sbrk_r+0x1a>
   3a69c:	6023      	str	r3, [r4, #0]
   3a69e:	bd38      	pop	{r3, r4, r5, pc}
   3a6a0:	2001a568 	.word	0x2001a568

0003a6a4 <sniprintf>:
   3a6a4:	b40c      	push	{r2, r3}
   3a6a6:	4b18      	ldr	r3, [pc, #96]	; (3a708 <sniprintf+0x64>)
   3a6a8:	b530      	push	{r4, r5, lr}
   3a6aa:	1e0c      	subs	r4, r1, #0
   3a6ac:	b09d      	sub	sp, #116	; 0x74
   3a6ae:	681d      	ldr	r5, [r3, #0]
   3a6b0:	da08      	bge.n	3a6c4 <sniprintf+0x20>
   3a6b2:	238b      	movs	r3, #139	; 0x8b
   3a6b4:	f04f 30ff 	mov.w	r0, #4294967295
   3a6b8:	602b      	str	r3, [r5, #0]
   3a6ba:	b01d      	add	sp, #116	; 0x74
   3a6bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3a6c0:	b002      	add	sp, #8
   3a6c2:	4770      	bx	lr
   3a6c4:	f44f 7302 	mov.w	r3, #520	; 0x208
   3a6c8:	9002      	str	r0, [sp, #8]
   3a6ca:	9006      	str	r0, [sp, #24]
   3a6cc:	a902      	add	r1, sp, #8
   3a6ce:	f8ad 3014 	strh.w	r3, [sp, #20]
   3a6d2:	bf14      	ite	ne
   3a6d4:	f104 33ff 	addne.w	r3, r4, #4294967295
   3a6d8:	4623      	moveq	r3, r4
   3a6da:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3a6dc:	4628      	mov	r0, r5
   3a6de:	9304      	str	r3, [sp, #16]
   3a6e0:	9307      	str	r3, [sp, #28]
   3a6e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3a6e6:	f8ad 3016 	strh.w	r3, [sp, #22]
   3a6ea:	ab21      	add	r3, sp, #132	; 0x84
   3a6ec:	9301      	str	r3, [sp, #4]
   3a6ee:	f001 fb2f 	bl	3bd50 <_svfiprintf_r>
   3a6f2:	1c43      	adds	r3, r0, #1
   3a6f4:	bfbc      	itt	lt
   3a6f6:	238b      	movlt	r3, #139	; 0x8b
   3a6f8:	602b      	strlt	r3, [r5, #0]
   3a6fa:	2c00      	cmp	r4, #0
   3a6fc:	d0dd      	beq.n	3a6ba <sniprintf+0x16>
   3a6fe:	9b02      	ldr	r3, [sp, #8]
   3a700:	2200      	movs	r2, #0
   3a702:	701a      	strb	r2, [r3, #0]
   3a704:	e7d9      	b.n	3a6ba <sniprintf+0x16>
   3a706:	bf00      	nop
   3a708:	20014a74 	.word	0x20014a74

0003a70c <siscanf>:
   3a70c:	b40e      	push	{r1, r2, r3}
   3a70e:	b510      	push	{r4, lr}
   3a710:	b09f      	sub	sp, #124	; 0x7c
   3a712:	f44f 7101 	mov.w	r1, #516	; 0x204
   3a716:	ac21      	add	r4, sp, #132	; 0x84
   3a718:	f8ad 101c 	strh.w	r1, [sp, #28]
   3a71c:	9004      	str	r0, [sp, #16]
   3a71e:	f854 2b04 	ldr.w	r2, [r4], #4
   3a722:	9008      	str	r0, [sp, #32]
   3a724:	9201      	str	r2, [sp, #4]
   3a726:	f7e2 fd8c 	bl	1d242 <strlen>
   3a72a:	4b0c      	ldr	r3, [pc, #48]	; (3a75c <siscanf+0x50>)
   3a72c:	a904      	add	r1, sp, #16
   3a72e:	9005      	str	r0, [sp, #20]
   3a730:	930d      	str	r3, [sp, #52]	; 0x34
   3a732:	2300      	movs	r3, #0
   3a734:	9009      	str	r0, [sp, #36]	; 0x24
   3a736:	9311      	str	r3, [sp, #68]	; 0x44
   3a738:	9316      	str	r3, [sp, #88]	; 0x58
   3a73a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3a73e:	4808      	ldr	r0, [pc, #32]	; (3a760 <siscanf+0x54>)
   3a740:	f8ad 301e 	strh.w	r3, [sp, #30]
   3a744:	4623      	mov	r3, r4
   3a746:	9a01      	ldr	r2, [sp, #4]
   3a748:	6800      	ldr	r0, [r0, #0]
   3a74a:	9403      	str	r4, [sp, #12]
   3a74c:	f001 fc00 	bl	3bf50 <__ssvfiscanf_r>
   3a750:	b01f      	add	sp, #124	; 0x7c
   3a752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3a756:	b003      	add	sp, #12
   3a758:	4770      	bx	lr
   3a75a:	bf00      	nop
   3a75c:	0004172b 	.word	0x0004172b
   3a760:	20014a74 	.word	0x20014a74

0003a764 <strtod>:
   3a764:	460a      	mov	r2, r1
   3a766:	4601      	mov	r1, r0
   3a768:	4802      	ldr	r0, [pc, #8]	; (3a774 <strtod+0x10>)
   3a76a:	4b03      	ldr	r3, [pc, #12]	; (3a778 <strtod+0x14>)
   3a76c:	6800      	ldr	r0, [r0, #0]
   3a76e:	f7e3 bf77 	b.w	1e660 <_strtod_l>
   3a772:	bf00      	nop
   3a774:	20014a74 	.word	0x20014a74
   3a778:	20014ad8 	.word	0x20014ad8

0003a77c <_strtol_l.constprop.0>:
   3a77c:	2b01      	cmp	r3, #1
   3a77e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a782:	d001      	beq.n	3a788 <_strtol_l.constprop.0+0xc>
   3a784:	2b24      	cmp	r3, #36	; 0x24
   3a786:	d906      	bls.n	3a796 <_strtol_l.constprop.0+0x1a>
   3a788:	f002 fff9 	bl	3d77e <__errno>
   3a78c:	2316      	movs	r3, #22
   3a78e:	6003      	str	r3, [r0, #0]
   3a790:	2000      	movs	r0, #0
   3a792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a796:	460d      	mov	r5, r1
   3a798:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 3a87c <_strtol_l.constprop.0+0x100>
   3a79c:	462e      	mov	r6, r5
   3a79e:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a7a2:	f814 700c 	ldrb.w	r7, [r4, ip]
   3a7a6:	f017 0708 	ands.w	r7, r7, #8
   3a7aa:	d1f7      	bne.n	3a79c <_strtol_l.constprop.0+0x20>
   3a7ac:	2c2d      	cmp	r4, #45	; 0x2d
   3a7ae:	d132      	bne.n	3a816 <_strtol_l.constprop.0+0x9a>
   3a7b0:	782c      	ldrb	r4, [r5, #0]
   3a7b2:	2701      	movs	r7, #1
   3a7b4:	1cb5      	adds	r5, r6, #2
   3a7b6:	2b00      	cmp	r3, #0
   3a7b8:	d05b      	beq.n	3a872 <_strtol_l.constprop.0+0xf6>
   3a7ba:	2b10      	cmp	r3, #16
   3a7bc:	d109      	bne.n	3a7d2 <_strtol_l.constprop.0+0x56>
   3a7be:	2c30      	cmp	r4, #48	; 0x30
   3a7c0:	d107      	bne.n	3a7d2 <_strtol_l.constprop.0+0x56>
   3a7c2:	782c      	ldrb	r4, [r5, #0]
   3a7c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   3a7c8:	2c58      	cmp	r4, #88	; 0x58
   3a7ca:	d14d      	bne.n	3a868 <_strtol_l.constprop.0+0xec>
   3a7cc:	786c      	ldrb	r4, [r5, #1]
   3a7ce:	2310      	movs	r3, #16
   3a7d0:	3502      	adds	r5, #2
   3a7d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   3a7d6:	f04f 0c00 	mov.w	ip, #0
   3a7da:	f108 38ff 	add.w	r8, r8, #4294967295
   3a7de:	4666      	mov	r6, ip
   3a7e0:	fbb8 f9f3 	udiv	r9, r8, r3
   3a7e4:	fb03 8a19 	mls	sl, r3, r9, r8
   3a7e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   3a7ec:	f1be 0f09 	cmp.w	lr, #9
   3a7f0:	d816      	bhi.n	3a820 <_strtol_l.constprop.0+0xa4>
   3a7f2:	4674      	mov	r4, lr
   3a7f4:	42a3      	cmp	r3, r4
   3a7f6:	dd24      	ble.n	3a842 <_strtol_l.constprop.0+0xc6>
   3a7f8:	f1bc 0f00 	cmp.w	ip, #0
   3a7fc:	db1e      	blt.n	3a83c <_strtol_l.constprop.0+0xc0>
   3a7fe:	45b1      	cmp	r9, r6
   3a800:	d31c      	bcc.n	3a83c <_strtol_l.constprop.0+0xc0>
   3a802:	d101      	bne.n	3a808 <_strtol_l.constprop.0+0x8c>
   3a804:	45a2      	cmp	sl, r4
   3a806:	db19      	blt.n	3a83c <_strtol_l.constprop.0+0xc0>
   3a808:	fb06 4603 	mla	r6, r6, r3, r4
   3a80c:	f04f 0c01 	mov.w	ip, #1
   3a810:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a814:	e7e8      	b.n	3a7e8 <_strtol_l.constprop.0+0x6c>
   3a816:	2c2b      	cmp	r4, #43	; 0x2b
   3a818:	bf04      	itt	eq
   3a81a:	782c      	ldrbeq	r4, [r5, #0]
   3a81c:	1cb5      	addeq	r5, r6, #2
   3a81e:	e7ca      	b.n	3a7b6 <_strtol_l.constprop.0+0x3a>
   3a820:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   3a824:	f1be 0f19 	cmp.w	lr, #25
   3a828:	d801      	bhi.n	3a82e <_strtol_l.constprop.0+0xb2>
   3a82a:	3c37      	subs	r4, #55	; 0x37
   3a82c:	e7e2      	b.n	3a7f4 <_strtol_l.constprop.0+0x78>
   3a82e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   3a832:	f1be 0f19 	cmp.w	lr, #25
   3a836:	d804      	bhi.n	3a842 <_strtol_l.constprop.0+0xc6>
   3a838:	3c57      	subs	r4, #87	; 0x57
   3a83a:	e7db      	b.n	3a7f4 <_strtol_l.constprop.0+0x78>
   3a83c:	f04f 3cff 	mov.w	ip, #4294967295
   3a840:	e7e6      	b.n	3a810 <_strtol_l.constprop.0+0x94>
   3a842:	f1bc 0f00 	cmp.w	ip, #0
   3a846:	da05      	bge.n	3a854 <_strtol_l.constprop.0+0xd8>
   3a848:	2322      	movs	r3, #34	; 0x22
   3a84a:	4646      	mov	r6, r8
   3a84c:	6003      	str	r3, [r0, #0]
   3a84e:	b942      	cbnz	r2, 3a862 <_strtol_l.constprop.0+0xe6>
   3a850:	4630      	mov	r0, r6
   3a852:	e79e      	b.n	3a792 <_strtol_l.constprop.0+0x16>
   3a854:	b107      	cbz	r7, 3a858 <_strtol_l.constprop.0+0xdc>
   3a856:	4276      	negs	r6, r6
   3a858:	2a00      	cmp	r2, #0
   3a85a:	d0f9      	beq.n	3a850 <_strtol_l.constprop.0+0xd4>
   3a85c:	f1bc 0f00 	cmp.w	ip, #0
   3a860:	d000      	beq.n	3a864 <_strtol_l.constprop.0+0xe8>
   3a862:	1e69      	subs	r1, r5, #1
   3a864:	6011      	str	r1, [r2, #0]
   3a866:	e7f3      	b.n	3a850 <_strtol_l.constprop.0+0xd4>
   3a868:	2430      	movs	r4, #48	; 0x30
   3a86a:	2b00      	cmp	r3, #0
   3a86c:	d1b1      	bne.n	3a7d2 <_strtol_l.constprop.0+0x56>
   3a86e:	2308      	movs	r3, #8
   3a870:	e7af      	b.n	3a7d2 <_strtol_l.constprop.0+0x56>
   3a872:	2c30      	cmp	r4, #48	; 0x30
   3a874:	d0a5      	beq.n	3a7c2 <_strtol_l.constprop.0+0x46>
   3a876:	230a      	movs	r3, #10
   3a878:	e7ab      	b.n	3a7d2 <_strtol_l.constprop.0+0x56>
   3a87a:	bf00      	nop
   3a87c:	0004bd43 	.word	0x0004bd43

0003a880 <strtol>:
   3a880:	4613      	mov	r3, r2
   3a882:	460a      	mov	r2, r1
   3a884:	4601      	mov	r1, r0
   3a886:	4802      	ldr	r0, [pc, #8]	; (3a890 <strtol+0x10>)
   3a888:	6800      	ldr	r0, [r0, #0]
   3a88a:	f7ff bf77 	b.w	3a77c <_strtol_l.constprop.0>
   3a88e:	bf00      	nop
   3a890:	20014a74 	.word	0x20014a74

0003a894 <_strtoll_l.constprop.0>:
   3a894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a898:	b085      	sub	sp, #20
   3a89a:	4688      	mov	r8, r1
   3a89c:	461e      	mov	r6, r3
   3a89e:	460d      	mov	r5, r1
   3a8a0:	9201      	str	r2, [sp, #4]
   3a8a2:	4a46      	ldr	r2, [pc, #280]	; (3a9bc <_strtoll_l.constprop.0+0x128>)
   3a8a4:	9003      	str	r0, [sp, #12]
   3a8a6:	462b      	mov	r3, r5
   3a8a8:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a8ac:	5ca7      	ldrb	r7, [r4, r2]
   3a8ae:	f017 0708 	ands.w	r7, r7, #8
   3a8b2:	d1f8      	bne.n	3a8a6 <_strtoll_l.constprop.0+0x12>
   3a8b4:	2c2d      	cmp	r4, #45	; 0x2d
   3a8b6:	d148      	bne.n	3a94a <_strtoll_l.constprop.0+0xb6>
   3a8b8:	782c      	ldrb	r4, [r5, #0]
   3a8ba:	2701      	movs	r7, #1
   3a8bc:	1c9d      	adds	r5, r3, #2
   3a8be:	2e00      	cmp	r6, #0
   3a8c0:	d078      	beq.n	3a9b4 <_strtoll_l.constprop.0+0x120>
   3a8c2:	2e10      	cmp	r6, #16
   3a8c4:	d109      	bne.n	3a8da <_strtoll_l.constprop.0+0x46>
   3a8c6:	2c30      	cmp	r4, #48	; 0x30
   3a8c8:	d107      	bne.n	3a8da <_strtoll_l.constprop.0+0x46>
   3a8ca:	782b      	ldrb	r3, [r5, #0]
   3a8cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   3a8d0:	2b58      	cmp	r3, #88	; 0x58
   3a8d2:	d16a      	bne.n	3a9aa <_strtoll_l.constprop.0+0x116>
   3a8d4:	786c      	ldrb	r4, [r5, #1]
   3a8d6:	2610      	movs	r6, #16
   3a8d8:	3502      	adds	r5, #2
   3a8da:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   3a8de:	f107 3bff 	add.w	fp, r7, #4294967295
   3a8e2:	ea4f 79e6 	mov.w	r9, r6, asr #31
   3a8e6:	4632      	mov	r2, r6
   3a8e8:	f10a 3aff 	add.w	sl, sl, #4294967295
   3a8ec:	4658      	mov	r0, fp
   3a8ee:	464b      	mov	r3, r9
   3a8f0:	4651      	mov	r1, sl
   3a8f2:	f7e2 faf9 	bl	1cee8 <__aeabi_uldivmod>
   3a8f6:	2300      	movs	r3, #0
   3a8f8:	468c      	mov	ip, r1
   3a8fa:	9202      	str	r2, [sp, #8]
   3a8fc:	4619      	mov	r1, r3
   3a8fe:	4602      	mov	r2, r0
   3a900:	4618      	mov	r0, r3
   3a902:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   3a906:	f1be 0f09 	cmp.w	lr, #9
   3a90a:	d823      	bhi.n	3a954 <_strtoll_l.constprop.0+0xc0>
   3a90c:	4674      	mov	r4, lr
   3a90e:	42a6      	cmp	r6, r4
   3a910:	dd31      	ble.n	3a976 <_strtoll_l.constprop.0+0xe2>
   3a912:	f1b3 3fff 	cmp.w	r3, #4294967295
   3a916:	d015      	beq.n	3a944 <_strtoll_l.constprop.0+0xb0>
   3a918:	4282      	cmp	r2, r0
   3a91a:	eb7c 0301 	sbcs.w	r3, ip, r1
   3a91e:	d327      	bcc.n	3a970 <_strtoll_l.constprop.0+0xdc>
   3a920:	458c      	cmp	ip, r1
   3a922:	bf08      	it	eq
   3a924:	4282      	cmpeq	r2, r0
   3a926:	d102      	bne.n	3a92e <_strtoll_l.constprop.0+0x9a>
   3a928:	9b02      	ldr	r3, [sp, #8]
   3a92a:	42a3      	cmp	r3, r4
   3a92c:	db20      	blt.n	3a970 <_strtoll_l.constprop.0+0xdc>
   3a92e:	4371      	muls	r1, r6
   3a930:	fb00 1109 	mla	r1, r0, r9, r1
   3a934:	fba6 0300 	umull	r0, r3, r6, r0
   3a938:	4419      	add	r1, r3
   3a93a:	1820      	adds	r0, r4, r0
   3a93c:	f04f 0301 	mov.w	r3, #1
   3a940:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   3a944:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a948:	e7db      	b.n	3a902 <_strtoll_l.constprop.0+0x6e>
   3a94a:	2c2b      	cmp	r4, #43	; 0x2b
   3a94c:	bf04      	itt	eq
   3a94e:	782c      	ldrbeq	r4, [r5, #0]
   3a950:	1c9d      	addeq	r5, r3, #2
   3a952:	e7b4      	b.n	3a8be <_strtoll_l.constprop.0+0x2a>
   3a954:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   3a958:	f1be 0f19 	cmp.w	lr, #25
   3a95c:	d801      	bhi.n	3a962 <_strtoll_l.constprop.0+0xce>
   3a95e:	3c37      	subs	r4, #55	; 0x37
   3a960:	e7d5      	b.n	3a90e <_strtoll_l.constprop.0+0x7a>
   3a962:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   3a966:	f1be 0f19 	cmp.w	lr, #25
   3a96a:	d804      	bhi.n	3a976 <_strtoll_l.constprop.0+0xe2>
   3a96c:	3c57      	subs	r4, #87	; 0x57
   3a96e:	e7ce      	b.n	3a90e <_strtoll_l.constprop.0+0x7a>
   3a970:	f04f 33ff 	mov.w	r3, #4294967295
   3a974:	e7e6      	b.n	3a944 <_strtoll_l.constprop.0+0xb0>
   3a976:	1c5a      	adds	r2, r3, #1
   3a978:	d109      	bne.n	3a98e <_strtoll_l.constprop.0+0xfa>
   3a97a:	2322      	movs	r3, #34	; 0x22
   3a97c:	9a03      	ldr	r2, [sp, #12]
   3a97e:	4658      	mov	r0, fp
   3a980:	4651      	mov	r1, sl
   3a982:	6013      	str	r3, [r2, #0]
   3a984:	9b01      	ldr	r3, [sp, #4]
   3a986:	b953      	cbnz	r3, 3a99e <_strtoll_l.constprop.0+0x10a>
   3a988:	b005      	add	sp, #20
   3a98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a98e:	b117      	cbz	r7, 3a996 <_strtoll_l.constprop.0+0x102>
   3a990:	4240      	negs	r0, r0
   3a992:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   3a996:	9a01      	ldr	r2, [sp, #4]
   3a998:	2a00      	cmp	r2, #0
   3a99a:	d0f5      	beq.n	3a988 <_strtoll_l.constprop.0+0xf4>
   3a99c:	b10b      	cbz	r3, 3a9a2 <_strtoll_l.constprop.0+0x10e>
   3a99e:	f105 38ff 	add.w	r8, r5, #4294967295
   3a9a2:	9b01      	ldr	r3, [sp, #4]
   3a9a4:	f8c3 8000 	str.w	r8, [r3]
   3a9a8:	e7ee      	b.n	3a988 <_strtoll_l.constprop.0+0xf4>
   3a9aa:	2430      	movs	r4, #48	; 0x30
   3a9ac:	2e00      	cmp	r6, #0
   3a9ae:	d194      	bne.n	3a8da <_strtoll_l.constprop.0+0x46>
   3a9b0:	2608      	movs	r6, #8
   3a9b2:	e792      	b.n	3a8da <_strtoll_l.constprop.0+0x46>
   3a9b4:	2c30      	cmp	r4, #48	; 0x30
   3a9b6:	d088      	beq.n	3a8ca <_strtoll_l.constprop.0+0x36>
   3a9b8:	260a      	movs	r6, #10
   3a9ba:	e78e      	b.n	3a8da <_strtoll_l.constprop.0+0x46>
   3a9bc:	0004bd43 	.word	0x0004bd43

0003a9c0 <strtoll>:
   3a9c0:	4613      	mov	r3, r2
   3a9c2:	460a      	mov	r2, r1
   3a9c4:	4601      	mov	r1, r0
   3a9c6:	4802      	ldr	r0, [pc, #8]	; (3a9d0 <strtoll+0x10>)
   3a9c8:	6800      	ldr	r0, [r0, #0]
   3a9ca:	f7ff bf63 	b.w	3a894 <_strtoll_l.constprop.0>
   3a9ce:	bf00      	nop
   3a9d0:	20014a74 	.word	0x20014a74

0003a9d4 <_strtoul_l.constprop.0>:
   3a9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3a9d8:	4686      	mov	lr, r0
   3a9da:	460d      	mov	r5, r1
   3a9dc:	4f35      	ldr	r7, [pc, #212]	; (3aab4 <_strtoul_l.constprop.0+0xe0>)
   3a9de:	4628      	mov	r0, r5
   3a9e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a9e4:	5de6      	ldrb	r6, [r4, r7]
   3a9e6:	f016 0608 	ands.w	r6, r6, #8
   3a9ea:	d1f8      	bne.n	3a9de <_strtoul_l.constprop.0+0xa>
   3a9ec:	2c2d      	cmp	r4, #45	; 0x2d
   3a9ee:	d12f      	bne.n	3aa50 <_strtoul_l.constprop.0+0x7c>
   3a9f0:	782c      	ldrb	r4, [r5, #0]
   3a9f2:	2601      	movs	r6, #1
   3a9f4:	1c85      	adds	r5, r0, #2
   3a9f6:	2b00      	cmp	r3, #0
   3a9f8:	d057      	beq.n	3aaaa <_strtoul_l.constprop.0+0xd6>
   3a9fa:	2b10      	cmp	r3, #16
   3a9fc:	d109      	bne.n	3aa12 <_strtoul_l.constprop.0+0x3e>
   3a9fe:	2c30      	cmp	r4, #48	; 0x30
   3aa00:	d107      	bne.n	3aa12 <_strtoul_l.constprop.0+0x3e>
   3aa02:	7828      	ldrb	r0, [r5, #0]
   3aa04:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3aa08:	2858      	cmp	r0, #88	; 0x58
   3aa0a:	d149      	bne.n	3aaa0 <_strtoul_l.constprop.0+0xcc>
   3aa0c:	786c      	ldrb	r4, [r5, #1]
   3aa0e:	2310      	movs	r3, #16
   3aa10:	3502      	adds	r5, #2
   3aa12:	f04f 38ff 	mov.w	r8, #4294967295
   3aa16:	2700      	movs	r7, #0
   3aa18:	fbb8 f8f3 	udiv	r8, r8, r3
   3aa1c:	fb03 f908 	mul.w	r9, r3, r8
   3aa20:	4638      	mov	r0, r7
   3aa22:	ea6f 0909 	mvn.w	r9, r9
   3aa26:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   3aa2a:	f1bc 0f09 	cmp.w	ip, #9
   3aa2e:	d814      	bhi.n	3aa5a <_strtoul_l.constprop.0+0x86>
   3aa30:	4664      	mov	r4, ip
   3aa32:	42a3      	cmp	r3, r4
   3aa34:	dd22      	ble.n	3aa7c <_strtoul_l.constprop.0+0xa8>
   3aa36:	2f00      	cmp	r7, #0
   3aa38:	db1d      	blt.n	3aa76 <_strtoul_l.constprop.0+0xa2>
   3aa3a:	4580      	cmp	r8, r0
   3aa3c:	d31b      	bcc.n	3aa76 <_strtoul_l.constprop.0+0xa2>
   3aa3e:	d101      	bne.n	3aa44 <_strtoul_l.constprop.0+0x70>
   3aa40:	45a1      	cmp	r9, r4
   3aa42:	db18      	blt.n	3aa76 <_strtoul_l.constprop.0+0xa2>
   3aa44:	fb00 4003 	mla	r0, r0, r3, r4
   3aa48:	2701      	movs	r7, #1
   3aa4a:	f815 4b01 	ldrb.w	r4, [r5], #1
   3aa4e:	e7ea      	b.n	3aa26 <_strtoul_l.constprop.0+0x52>
   3aa50:	2c2b      	cmp	r4, #43	; 0x2b
   3aa52:	bf04      	itt	eq
   3aa54:	782c      	ldrbeq	r4, [r5, #0]
   3aa56:	1c85      	addeq	r5, r0, #2
   3aa58:	e7cd      	b.n	3a9f6 <_strtoul_l.constprop.0+0x22>
   3aa5a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   3aa5e:	f1bc 0f19 	cmp.w	ip, #25
   3aa62:	d801      	bhi.n	3aa68 <_strtoul_l.constprop.0+0x94>
   3aa64:	3c37      	subs	r4, #55	; 0x37
   3aa66:	e7e4      	b.n	3aa32 <_strtoul_l.constprop.0+0x5e>
   3aa68:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   3aa6c:	f1bc 0f19 	cmp.w	ip, #25
   3aa70:	d804      	bhi.n	3aa7c <_strtoul_l.constprop.0+0xa8>
   3aa72:	3c57      	subs	r4, #87	; 0x57
   3aa74:	e7dd      	b.n	3aa32 <_strtoul_l.constprop.0+0x5e>
   3aa76:	f04f 37ff 	mov.w	r7, #4294967295
   3aa7a:	e7e6      	b.n	3aa4a <_strtoul_l.constprop.0+0x76>
   3aa7c:	2f00      	cmp	r7, #0
   3aa7e:	da07      	bge.n	3aa90 <_strtoul_l.constprop.0+0xbc>
   3aa80:	2322      	movs	r3, #34	; 0x22
   3aa82:	f04f 30ff 	mov.w	r0, #4294967295
   3aa86:	f8ce 3000 	str.w	r3, [lr]
   3aa8a:	b932      	cbnz	r2, 3aa9a <_strtoul_l.constprop.0+0xc6>
   3aa8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3aa90:	b106      	cbz	r6, 3aa94 <_strtoul_l.constprop.0+0xc0>
   3aa92:	4240      	negs	r0, r0
   3aa94:	2a00      	cmp	r2, #0
   3aa96:	d0f9      	beq.n	3aa8c <_strtoul_l.constprop.0+0xb8>
   3aa98:	b107      	cbz	r7, 3aa9c <_strtoul_l.constprop.0+0xc8>
   3aa9a:	1e69      	subs	r1, r5, #1
   3aa9c:	6011      	str	r1, [r2, #0]
   3aa9e:	e7f5      	b.n	3aa8c <_strtoul_l.constprop.0+0xb8>
   3aaa0:	2430      	movs	r4, #48	; 0x30
   3aaa2:	2b00      	cmp	r3, #0
   3aaa4:	d1b5      	bne.n	3aa12 <_strtoul_l.constprop.0+0x3e>
   3aaa6:	2308      	movs	r3, #8
   3aaa8:	e7b3      	b.n	3aa12 <_strtoul_l.constprop.0+0x3e>
   3aaaa:	2c30      	cmp	r4, #48	; 0x30
   3aaac:	d0a9      	beq.n	3aa02 <_strtoul_l.constprop.0+0x2e>
   3aaae:	230a      	movs	r3, #10
   3aab0:	e7af      	b.n	3aa12 <_strtoul_l.constprop.0+0x3e>
   3aab2:	bf00      	nop
   3aab4:	0004bd43 	.word	0x0004bd43

0003aab8 <strtoul>:
   3aab8:	4613      	mov	r3, r2
   3aaba:	460a      	mov	r2, r1
   3aabc:	4601      	mov	r1, r0
   3aabe:	4802      	ldr	r0, [pc, #8]	; (3aac8 <strtoul+0x10>)
   3aac0:	6800      	ldr	r0, [r0, #0]
   3aac2:	f7ff bf87 	b.w	3a9d4 <_strtoul_l.constprop.0>
   3aac6:	bf00      	nop
   3aac8:	20014a74 	.word	0x20014a74

0003aacc <vsniprintf>:
   3aacc:	b507      	push	{r0, r1, r2, lr}
   3aace:	9300      	str	r3, [sp, #0]
   3aad0:	4613      	mov	r3, r2
   3aad2:	460a      	mov	r2, r1
   3aad4:	4601      	mov	r1, r0
   3aad6:	4803      	ldr	r0, [pc, #12]	; (3aae4 <vsniprintf+0x18>)
   3aad8:	6800      	ldr	r0, [r0, #0]
   3aada:	f006 ff00 	bl	418de <_vsniprintf_r>
   3aade:	b003      	add	sp, #12
   3aae0:	f85d fb04 	ldr.w	pc, [sp], #4
   3aae4:	20014a74 	.word	0x20014a74

0003aae8 <_vsiprintf_r>:
   3aae8:	b500      	push	{lr}
   3aaea:	b09b      	sub	sp, #108	; 0x6c
   3aaec:	9100      	str	r1, [sp, #0]
   3aaee:	9104      	str	r1, [sp, #16]
   3aaf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3aaf4:	9105      	str	r1, [sp, #20]
   3aaf6:	9102      	str	r1, [sp, #8]
   3aaf8:	4905      	ldr	r1, [pc, #20]	; (3ab10 <_vsiprintf_r+0x28>)
   3aafa:	9103      	str	r1, [sp, #12]
   3aafc:	4669      	mov	r1, sp
   3aafe:	f001 f927 	bl	3bd50 <_svfiprintf_r>
   3ab02:	9b00      	ldr	r3, [sp, #0]
   3ab04:	2200      	movs	r2, #0
   3ab06:	701a      	strb	r2, [r3, #0]
   3ab08:	b01b      	add	sp, #108	; 0x6c
   3ab0a:	f85d fb04 	ldr.w	pc, [sp], #4
   3ab0e:	bf00      	nop
   3ab10:	ffff0208 	.word	0xffff0208

0003ab14 <vsiprintf>:
   3ab14:	4613      	mov	r3, r2
   3ab16:	460a      	mov	r2, r1
   3ab18:	4601      	mov	r1, r0
   3ab1a:	4802      	ldr	r0, [pc, #8]	; (3ab24 <vsiprintf+0x10>)
   3ab1c:	6800      	ldr	r0, [r0, #0]
   3ab1e:	f7ff bfe3 	b.w	3aae8 <_vsiprintf_r>
   3ab22:	bf00      	nop
   3ab24:	20014a74 	.word	0x20014a74

0003ab28 <_vsiscanf_r>:
   3ab28:	b510      	push	{r4, lr}
   3ab2a:	4604      	mov	r4, r0
   3ab2c:	b09c      	sub	sp, #112	; 0x70
   3ab2e:	f44f 7001 	mov.w	r0, #516	; 0x204
   3ab32:	9102      	str	r1, [sp, #8]
   3ab34:	f8ad 0014 	strh.w	r0, [sp, #20]
   3ab38:	4608      	mov	r0, r1
   3ab3a:	9106      	str	r1, [sp, #24]
   3ab3c:	e9cd 3200 	strd	r3, r2, [sp]
   3ab40:	f7e2 fb7f 	bl	1d242 <strlen>
   3ab44:	4909      	ldr	r1, [pc, #36]	; (3ab6c <_vsiscanf_r+0x44>)
   3ab46:	9003      	str	r0, [sp, #12]
   3ab48:	910b      	str	r1, [sp, #44]	; 0x2c
   3ab4a:	2100      	movs	r1, #0
   3ab4c:	9007      	str	r0, [sp, #28]
   3ab4e:	4620      	mov	r0, r4
   3ab50:	910f      	str	r1, [sp, #60]	; 0x3c
   3ab52:	9114      	str	r1, [sp, #80]	; 0x50
   3ab54:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3ab58:	e9dd 3200 	ldrd	r3, r2, [sp]
   3ab5c:	f8ad 1016 	strh.w	r1, [sp, #22]
   3ab60:	a902      	add	r1, sp, #8
   3ab62:	f001 f9f5 	bl	3bf50 <__ssvfiscanf_r>
   3ab66:	b01c      	add	sp, #112	; 0x70
   3ab68:	bd10      	pop	{r4, pc}
   3ab6a:	bf00      	nop
   3ab6c:	0004172b 	.word	0x0004172b

0003ab70 <vsiscanf>:
   3ab70:	4613      	mov	r3, r2
   3ab72:	460a      	mov	r2, r1
   3ab74:	4601      	mov	r1, r0
   3ab76:	4802      	ldr	r0, [pc, #8]	; (3ab80 <vsiscanf+0x10>)
   3ab78:	6800      	ldr	r0, [r0, #0]
   3ab7a:	f7ff bfd5 	b.w	3ab28 <_vsiscanf_r>
   3ab7e:	bf00      	nop
   3ab80:	20014a74 	.word	0x20014a74

0003ab84 <__swbuf_r>:
   3ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ab86:	460e      	mov	r6, r1
   3ab88:	4614      	mov	r4, r2
   3ab8a:	4605      	mov	r5, r0
   3ab8c:	b118      	cbz	r0, 3ab96 <__swbuf_r+0x12>
   3ab8e:	6983      	ldr	r3, [r0, #24]
   3ab90:	b90b      	cbnz	r3, 3ab96 <__swbuf_r+0x12>
   3ab92:	f000 f9db 	bl	3af4c <__sinit>
   3ab96:	4b21      	ldr	r3, [pc, #132]	; (3ac1c <__swbuf_r+0x98>)
   3ab98:	429c      	cmp	r4, r3
   3ab9a:	d12b      	bne.n	3abf4 <__swbuf_r+0x70>
   3ab9c:	686c      	ldr	r4, [r5, #4]
   3ab9e:	69a3      	ldr	r3, [r4, #24]
   3aba0:	60a3      	str	r3, [r4, #8]
   3aba2:	89a3      	ldrh	r3, [r4, #12]
   3aba4:	071a      	lsls	r2, r3, #28
   3aba6:	d52f      	bpl.n	3ac08 <__swbuf_r+0x84>
   3aba8:	6923      	ldr	r3, [r4, #16]
   3abaa:	b36b      	cbz	r3, 3ac08 <__swbuf_r+0x84>
   3abac:	6923      	ldr	r3, [r4, #16]
   3abae:	b2f6      	uxtb	r6, r6
   3abb0:	6820      	ldr	r0, [r4, #0]
   3abb2:	4637      	mov	r7, r6
   3abb4:	1ac0      	subs	r0, r0, r3
   3abb6:	6963      	ldr	r3, [r4, #20]
   3abb8:	4283      	cmp	r3, r0
   3abba:	dc04      	bgt.n	3abc6 <__swbuf_r+0x42>
   3abbc:	4621      	mov	r1, r4
   3abbe:	4628      	mov	r0, r5
   3abc0:	f000 f946 	bl	3ae50 <_fflush_r>
   3abc4:	bb30      	cbnz	r0, 3ac14 <__swbuf_r+0x90>
   3abc6:	68a3      	ldr	r3, [r4, #8]
   3abc8:	3001      	adds	r0, #1
   3abca:	3b01      	subs	r3, #1
   3abcc:	60a3      	str	r3, [r4, #8]
   3abce:	6823      	ldr	r3, [r4, #0]
   3abd0:	1c5a      	adds	r2, r3, #1
   3abd2:	6022      	str	r2, [r4, #0]
   3abd4:	701e      	strb	r6, [r3, #0]
   3abd6:	6963      	ldr	r3, [r4, #20]
   3abd8:	4283      	cmp	r3, r0
   3abda:	d004      	beq.n	3abe6 <__swbuf_r+0x62>
   3abdc:	89a3      	ldrh	r3, [r4, #12]
   3abde:	07db      	lsls	r3, r3, #31
   3abe0:	d506      	bpl.n	3abf0 <__swbuf_r+0x6c>
   3abe2:	2e0a      	cmp	r6, #10
   3abe4:	d104      	bne.n	3abf0 <__swbuf_r+0x6c>
   3abe6:	4621      	mov	r1, r4
   3abe8:	4628      	mov	r0, r5
   3abea:	f000 f931 	bl	3ae50 <_fflush_r>
   3abee:	b988      	cbnz	r0, 3ac14 <__swbuf_r+0x90>
   3abf0:	4638      	mov	r0, r7
   3abf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3abf4:	4b0a      	ldr	r3, [pc, #40]	; (3ac20 <__swbuf_r+0x9c>)
   3abf6:	429c      	cmp	r4, r3
   3abf8:	d101      	bne.n	3abfe <__swbuf_r+0x7a>
   3abfa:	68ac      	ldr	r4, [r5, #8]
   3abfc:	e7cf      	b.n	3ab9e <__swbuf_r+0x1a>
   3abfe:	4b09      	ldr	r3, [pc, #36]	; (3ac24 <__swbuf_r+0xa0>)
   3ac00:	429c      	cmp	r4, r3
   3ac02:	bf08      	it	eq
   3ac04:	68ec      	ldreq	r4, [r5, #12]
   3ac06:	e7ca      	b.n	3ab9e <__swbuf_r+0x1a>
   3ac08:	4621      	mov	r1, r4
   3ac0a:	4628      	mov	r0, r5
   3ac0c:	f000 f81e 	bl	3ac4c <__swsetup_r>
   3ac10:	2800      	cmp	r0, #0
   3ac12:	d0cb      	beq.n	3abac <__swbuf_r+0x28>
   3ac14:	f04f 37ff 	mov.w	r7, #4294967295
   3ac18:	e7ea      	b.n	3abf0 <__swbuf_r+0x6c>
   3ac1a:	bf00      	nop
   3ac1c:	0004344c 	.word	0x0004344c
   3ac20:	0004346c 	.word	0x0004346c
   3ac24:	0004342c 	.word	0x0004342c

0003ac28 <_write_r>:
   3ac28:	b538      	push	{r3, r4, r5, lr}
   3ac2a:	4604      	mov	r4, r0
   3ac2c:	4d06      	ldr	r5, [pc, #24]	; (3ac48 <_write_r+0x20>)
   3ac2e:	4608      	mov	r0, r1
   3ac30:	4611      	mov	r1, r2
   3ac32:	2200      	movs	r2, #0
   3ac34:	602a      	str	r2, [r5, #0]
   3ac36:	461a      	mov	r2, r3
   3ac38:	f002 fd8a 	bl	3d750 <_write>
   3ac3c:	1c43      	adds	r3, r0, #1
   3ac3e:	d102      	bne.n	3ac46 <_write_r+0x1e>
   3ac40:	682b      	ldr	r3, [r5, #0]
   3ac42:	b103      	cbz	r3, 3ac46 <_write_r+0x1e>
   3ac44:	6023      	str	r3, [r4, #0]
   3ac46:	bd38      	pop	{r3, r4, r5, pc}
   3ac48:	2001a568 	.word	0x2001a568

0003ac4c <__swsetup_r>:
   3ac4c:	4b32      	ldr	r3, [pc, #200]	; (3ad18 <__swsetup_r+0xcc>)
   3ac4e:	b570      	push	{r4, r5, r6, lr}
   3ac50:	681d      	ldr	r5, [r3, #0]
   3ac52:	4606      	mov	r6, r0
   3ac54:	460c      	mov	r4, r1
   3ac56:	b125      	cbz	r5, 3ac62 <__swsetup_r+0x16>
   3ac58:	69ab      	ldr	r3, [r5, #24]
   3ac5a:	b913      	cbnz	r3, 3ac62 <__swsetup_r+0x16>
   3ac5c:	4628      	mov	r0, r5
   3ac5e:	f000 f975 	bl	3af4c <__sinit>
   3ac62:	4b2e      	ldr	r3, [pc, #184]	; (3ad1c <__swsetup_r+0xd0>)
   3ac64:	429c      	cmp	r4, r3
   3ac66:	d10f      	bne.n	3ac88 <__swsetup_r+0x3c>
   3ac68:	686c      	ldr	r4, [r5, #4]
   3ac6a:	89a3      	ldrh	r3, [r4, #12]
   3ac6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3ac70:	0719      	lsls	r1, r3, #28
   3ac72:	d42c      	bmi.n	3acce <__swsetup_r+0x82>
   3ac74:	06dd      	lsls	r5, r3, #27
   3ac76:	d411      	bmi.n	3ac9c <__swsetup_r+0x50>
   3ac78:	2309      	movs	r3, #9
   3ac7a:	6033      	str	r3, [r6, #0]
   3ac7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   3ac80:	f04f 30ff 	mov.w	r0, #4294967295
   3ac84:	81a3      	strh	r3, [r4, #12]
   3ac86:	e03e      	b.n	3ad06 <__swsetup_r+0xba>
   3ac88:	4b25      	ldr	r3, [pc, #148]	; (3ad20 <__swsetup_r+0xd4>)
   3ac8a:	429c      	cmp	r4, r3
   3ac8c:	d101      	bne.n	3ac92 <__swsetup_r+0x46>
   3ac8e:	68ac      	ldr	r4, [r5, #8]
   3ac90:	e7eb      	b.n	3ac6a <__swsetup_r+0x1e>
   3ac92:	4b24      	ldr	r3, [pc, #144]	; (3ad24 <__swsetup_r+0xd8>)
   3ac94:	429c      	cmp	r4, r3
   3ac96:	bf08      	it	eq
   3ac98:	68ec      	ldreq	r4, [r5, #12]
   3ac9a:	e7e6      	b.n	3ac6a <__swsetup_r+0x1e>
   3ac9c:	0758      	lsls	r0, r3, #29
   3ac9e:	d512      	bpl.n	3acc6 <__swsetup_r+0x7a>
   3aca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3aca2:	b141      	cbz	r1, 3acb6 <__swsetup_r+0x6a>
   3aca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3aca8:	4299      	cmp	r1, r3
   3acaa:	d002      	beq.n	3acb2 <__swsetup_r+0x66>
   3acac:	4630      	mov	r0, r6
   3acae:	f7fe ff95 	bl	39bdc <_free_r>
   3acb2:	2300      	movs	r3, #0
   3acb4:	6363      	str	r3, [r4, #52]	; 0x34
   3acb6:	89a3      	ldrh	r3, [r4, #12]
   3acb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   3acbc:	81a3      	strh	r3, [r4, #12]
   3acbe:	2300      	movs	r3, #0
   3acc0:	6063      	str	r3, [r4, #4]
   3acc2:	6923      	ldr	r3, [r4, #16]
   3acc4:	6023      	str	r3, [r4, #0]
   3acc6:	89a3      	ldrh	r3, [r4, #12]
   3acc8:	f043 0308 	orr.w	r3, r3, #8
   3accc:	81a3      	strh	r3, [r4, #12]
   3acce:	6923      	ldr	r3, [r4, #16]
   3acd0:	b94b      	cbnz	r3, 3ace6 <__swsetup_r+0x9a>
   3acd2:	89a3      	ldrh	r3, [r4, #12]
   3acd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
   3acd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3acdc:	d003      	beq.n	3ace6 <__swsetup_r+0x9a>
   3acde:	4621      	mov	r1, r4
   3ace0:	4630      	mov	r0, r6
   3ace2:	f000 fc0d 	bl	3b500 <__smakebuf_r>
   3ace6:	89a0      	ldrh	r0, [r4, #12]
   3ace8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3acec:	f010 0301 	ands.w	r3, r0, #1
   3acf0:	d00a      	beq.n	3ad08 <__swsetup_r+0xbc>
   3acf2:	2300      	movs	r3, #0
   3acf4:	60a3      	str	r3, [r4, #8]
   3acf6:	6963      	ldr	r3, [r4, #20]
   3acf8:	425b      	negs	r3, r3
   3acfa:	61a3      	str	r3, [r4, #24]
   3acfc:	6923      	ldr	r3, [r4, #16]
   3acfe:	b943      	cbnz	r3, 3ad12 <__swsetup_r+0xc6>
   3ad00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   3ad04:	d1ba      	bne.n	3ac7c <__swsetup_r+0x30>
   3ad06:	bd70      	pop	{r4, r5, r6, pc}
   3ad08:	0781      	lsls	r1, r0, #30
   3ad0a:	bf58      	it	pl
   3ad0c:	6963      	ldrpl	r3, [r4, #20]
   3ad0e:	60a3      	str	r3, [r4, #8]
   3ad10:	e7f4      	b.n	3acfc <__swsetup_r+0xb0>
   3ad12:	2000      	movs	r0, #0
   3ad14:	e7f7      	b.n	3ad06 <__swsetup_r+0xba>
   3ad16:	bf00      	nop
   3ad18:	20014a74 	.word	0x20014a74
   3ad1c:	0004344c 	.word	0x0004344c
   3ad20:	0004346c 	.word	0x0004346c
   3ad24:	0004342c 	.word	0x0004342c

0003ad28 <_close_r>:
   3ad28:	b538      	push	{r3, r4, r5, lr}
   3ad2a:	2300      	movs	r3, #0
   3ad2c:	4d05      	ldr	r5, [pc, #20]	; (3ad44 <_close_r+0x1c>)
   3ad2e:	4604      	mov	r4, r0
   3ad30:	4608      	mov	r0, r1
   3ad32:	602b      	str	r3, [r5, #0]
   3ad34:	f002 fd10 	bl	3d758 <_close>
   3ad38:	1c43      	adds	r3, r0, #1
   3ad3a:	d102      	bne.n	3ad42 <_close_r+0x1a>
   3ad3c:	682b      	ldr	r3, [r5, #0]
   3ad3e:	b103      	cbz	r3, 3ad42 <_close_r+0x1a>
   3ad40:	6023      	str	r3, [r4, #0]
   3ad42:	bd38      	pop	{r3, r4, r5, pc}
   3ad44:	2001a568 	.word	0x2001a568

0003ad48 <__sflush_r>:
   3ad48:	898a      	ldrh	r2, [r1, #12]
   3ad4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ad4e:	4605      	mov	r5, r0
   3ad50:	0710      	lsls	r0, r2, #28
   3ad52:	460c      	mov	r4, r1
   3ad54:	d458      	bmi.n	3ae08 <__sflush_r+0xc0>
   3ad56:	684b      	ldr	r3, [r1, #4]
   3ad58:	2b00      	cmp	r3, #0
   3ad5a:	dc05      	bgt.n	3ad68 <__sflush_r+0x20>
   3ad5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3ad5e:	2b00      	cmp	r3, #0
   3ad60:	dc02      	bgt.n	3ad68 <__sflush_r+0x20>
   3ad62:	2000      	movs	r0, #0
   3ad64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ad68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3ad6a:	2e00      	cmp	r6, #0
   3ad6c:	d0f9      	beq.n	3ad62 <__sflush_r+0x1a>
   3ad6e:	2300      	movs	r3, #0
   3ad70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3ad74:	682f      	ldr	r7, [r5, #0]
   3ad76:	602b      	str	r3, [r5, #0]
   3ad78:	d032      	beq.n	3ade0 <__sflush_r+0x98>
   3ad7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3ad7c:	89a3      	ldrh	r3, [r4, #12]
   3ad7e:	075a      	lsls	r2, r3, #29
   3ad80:	d505      	bpl.n	3ad8e <__sflush_r+0x46>
   3ad82:	6863      	ldr	r3, [r4, #4]
   3ad84:	1ac0      	subs	r0, r0, r3
   3ad86:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3ad88:	b10b      	cbz	r3, 3ad8e <__sflush_r+0x46>
   3ad8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3ad8c:	1ac0      	subs	r0, r0, r3
   3ad8e:	2300      	movs	r3, #0
   3ad90:	4602      	mov	r2, r0
   3ad92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3ad94:	4628      	mov	r0, r5
   3ad96:	6a21      	ldr	r1, [r4, #32]
   3ad98:	47b0      	blx	r6
   3ad9a:	1c43      	adds	r3, r0, #1
   3ad9c:	89a3      	ldrh	r3, [r4, #12]
   3ad9e:	d106      	bne.n	3adae <__sflush_r+0x66>
   3ada0:	6829      	ldr	r1, [r5, #0]
   3ada2:	291d      	cmp	r1, #29
   3ada4:	d82c      	bhi.n	3ae00 <__sflush_r+0xb8>
   3ada6:	4a29      	ldr	r2, [pc, #164]	; (3ae4c <__sflush_r+0x104>)
   3ada8:	40ca      	lsrs	r2, r1
   3adaa:	07d6      	lsls	r6, r2, #31
   3adac:	d528      	bpl.n	3ae00 <__sflush_r+0xb8>
   3adae:	2200      	movs	r2, #0
   3adb0:	04d9      	lsls	r1, r3, #19
   3adb2:	6062      	str	r2, [r4, #4]
   3adb4:	6922      	ldr	r2, [r4, #16]
   3adb6:	6022      	str	r2, [r4, #0]
   3adb8:	d504      	bpl.n	3adc4 <__sflush_r+0x7c>
   3adba:	1c42      	adds	r2, r0, #1
   3adbc:	d101      	bne.n	3adc2 <__sflush_r+0x7a>
   3adbe:	682b      	ldr	r3, [r5, #0]
   3adc0:	b903      	cbnz	r3, 3adc4 <__sflush_r+0x7c>
   3adc2:	6560      	str	r0, [r4, #84]	; 0x54
   3adc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3adc6:	602f      	str	r7, [r5, #0]
   3adc8:	2900      	cmp	r1, #0
   3adca:	d0ca      	beq.n	3ad62 <__sflush_r+0x1a>
   3adcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3add0:	4299      	cmp	r1, r3
   3add2:	d002      	beq.n	3adda <__sflush_r+0x92>
   3add4:	4628      	mov	r0, r5
   3add6:	f7fe ff01 	bl	39bdc <_free_r>
   3adda:	2000      	movs	r0, #0
   3addc:	6360      	str	r0, [r4, #52]	; 0x34
   3adde:	e7c1      	b.n	3ad64 <__sflush_r+0x1c>
   3ade0:	6a21      	ldr	r1, [r4, #32]
   3ade2:	2301      	movs	r3, #1
   3ade4:	4628      	mov	r0, r5
   3ade6:	47b0      	blx	r6
   3ade8:	1c41      	adds	r1, r0, #1
   3adea:	d1c7      	bne.n	3ad7c <__sflush_r+0x34>
   3adec:	682b      	ldr	r3, [r5, #0]
   3adee:	2b00      	cmp	r3, #0
   3adf0:	d0c4      	beq.n	3ad7c <__sflush_r+0x34>
   3adf2:	2b1d      	cmp	r3, #29
   3adf4:	d001      	beq.n	3adfa <__sflush_r+0xb2>
   3adf6:	2b16      	cmp	r3, #22
   3adf8:	d101      	bne.n	3adfe <__sflush_r+0xb6>
   3adfa:	602f      	str	r7, [r5, #0]
   3adfc:	e7b1      	b.n	3ad62 <__sflush_r+0x1a>
   3adfe:	89a3      	ldrh	r3, [r4, #12]
   3ae00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3ae04:	81a3      	strh	r3, [r4, #12]
   3ae06:	e7ad      	b.n	3ad64 <__sflush_r+0x1c>
   3ae08:	690f      	ldr	r7, [r1, #16]
   3ae0a:	2f00      	cmp	r7, #0
   3ae0c:	d0a9      	beq.n	3ad62 <__sflush_r+0x1a>
   3ae0e:	0793      	lsls	r3, r2, #30
   3ae10:	680e      	ldr	r6, [r1, #0]
   3ae12:	600f      	str	r7, [r1, #0]
   3ae14:	bf0c      	ite	eq
   3ae16:	694b      	ldreq	r3, [r1, #20]
   3ae18:	2300      	movne	r3, #0
   3ae1a:	eba6 0807 	sub.w	r8, r6, r7
   3ae1e:	608b      	str	r3, [r1, #8]
   3ae20:	f1b8 0f00 	cmp.w	r8, #0
   3ae24:	dd9d      	ble.n	3ad62 <__sflush_r+0x1a>
   3ae26:	4643      	mov	r3, r8
   3ae28:	463a      	mov	r2, r7
   3ae2a:	6a21      	ldr	r1, [r4, #32]
   3ae2c:	4628      	mov	r0, r5
   3ae2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3ae30:	47b0      	blx	r6
   3ae32:	2800      	cmp	r0, #0
   3ae34:	dc06      	bgt.n	3ae44 <__sflush_r+0xfc>
   3ae36:	89a3      	ldrh	r3, [r4, #12]
   3ae38:	f04f 30ff 	mov.w	r0, #4294967295
   3ae3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3ae40:	81a3      	strh	r3, [r4, #12]
   3ae42:	e78f      	b.n	3ad64 <__sflush_r+0x1c>
   3ae44:	4407      	add	r7, r0
   3ae46:	eba8 0800 	sub.w	r8, r8, r0
   3ae4a:	e7e9      	b.n	3ae20 <__sflush_r+0xd8>
   3ae4c:	20400001 	.word	0x20400001

0003ae50 <_fflush_r>:
   3ae50:	b538      	push	{r3, r4, r5, lr}
   3ae52:	690b      	ldr	r3, [r1, #16]
   3ae54:	4605      	mov	r5, r0
   3ae56:	460c      	mov	r4, r1
   3ae58:	b913      	cbnz	r3, 3ae60 <_fflush_r+0x10>
   3ae5a:	2500      	movs	r5, #0
   3ae5c:	4628      	mov	r0, r5
   3ae5e:	bd38      	pop	{r3, r4, r5, pc}
   3ae60:	b118      	cbz	r0, 3ae6a <_fflush_r+0x1a>
   3ae62:	6983      	ldr	r3, [r0, #24]
   3ae64:	b90b      	cbnz	r3, 3ae6a <_fflush_r+0x1a>
   3ae66:	f000 f871 	bl	3af4c <__sinit>
   3ae6a:	4b14      	ldr	r3, [pc, #80]	; (3aebc <_fflush_r+0x6c>)
   3ae6c:	429c      	cmp	r4, r3
   3ae6e:	d11b      	bne.n	3aea8 <_fflush_r+0x58>
   3ae70:	686c      	ldr	r4, [r5, #4]
   3ae72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3ae76:	2b00      	cmp	r3, #0
   3ae78:	d0ef      	beq.n	3ae5a <_fflush_r+0xa>
   3ae7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   3ae7c:	07d0      	lsls	r0, r2, #31
   3ae7e:	d404      	bmi.n	3ae8a <_fflush_r+0x3a>
   3ae80:	0599      	lsls	r1, r3, #22
   3ae82:	d402      	bmi.n	3ae8a <_fflush_r+0x3a>
   3ae84:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3ae86:	f7e8 fd65 	bl	23954 <__retarget_lock_acquire_recursive>
   3ae8a:	4628      	mov	r0, r5
   3ae8c:	4621      	mov	r1, r4
   3ae8e:	f7ff ff5b 	bl	3ad48 <__sflush_r>
   3ae92:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3ae94:	4605      	mov	r5, r0
   3ae96:	07da      	lsls	r2, r3, #31
   3ae98:	d4e0      	bmi.n	3ae5c <_fflush_r+0xc>
   3ae9a:	89a3      	ldrh	r3, [r4, #12]
   3ae9c:	059b      	lsls	r3, r3, #22
   3ae9e:	d4dd      	bmi.n	3ae5c <_fflush_r+0xc>
   3aea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3aea2:	f7e8 fd73 	bl	2398c <__retarget_lock_release_recursive>
   3aea6:	e7d9      	b.n	3ae5c <_fflush_r+0xc>
   3aea8:	4b05      	ldr	r3, [pc, #20]	; (3aec0 <_fflush_r+0x70>)
   3aeaa:	429c      	cmp	r4, r3
   3aeac:	d101      	bne.n	3aeb2 <_fflush_r+0x62>
   3aeae:	68ac      	ldr	r4, [r5, #8]
   3aeb0:	e7df      	b.n	3ae72 <_fflush_r+0x22>
   3aeb2:	4b04      	ldr	r3, [pc, #16]	; (3aec4 <_fflush_r+0x74>)
   3aeb4:	429c      	cmp	r4, r3
   3aeb6:	bf08      	it	eq
   3aeb8:	68ec      	ldreq	r4, [r5, #12]
   3aeba:	e7da      	b.n	3ae72 <_fflush_r+0x22>
   3aebc:	0004344c 	.word	0x0004344c
   3aec0:	0004346c 	.word	0x0004346c
   3aec4:	0004342c 	.word	0x0004342c

0003aec8 <std>:
   3aec8:	2300      	movs	r3, #0
   3aeca:	b510      	push	{r4, lr}
   3aecc:	4604      	mov	r4, r0
   3aece:	6083      	str	r3, [r0, #8]
   3aed0:	8181      	strh	r1, [r0, #12]
   3aed2:	4619      	mov	r1, r3
   3aed4:	6643      	str	r3, [r0, #100]	; 0x64
   3aed6:	81c2      	strh	r2, [r0, #14]
   3aed8:	2208      	movs	r2, #8
   3aeda:	6183      	str	r3, [r0, #24]
   3aedc:	e9c0 3300 	strd	r3, r3, [r0]
   3aee0:	e9c0 3304 	strd	r3, r3, [r0, #16]
   3aee4:	305c      	adds	r0, #92	; 0x5c
   3aee6:	f006 faa5 	bl	41434 <memset>
   3aeea:	4b05      	ldr	r3, [pc, #20]	; (3af00 <std+0x38>)
   3aeec:	6224      	str	r4, [r4, #32]
   3aeee:	6263      	str	r3, [r4, #36]	; 0x24
   3aef0:	4b04      	ldr	r3, [pc, #16]	; (3af04 <std+0x3c>)
   3aef2:	62a3      	str	r3, [r4, #40]	; 0x28
   3aef4:	4b04      	ldr	r3, [pc, #16]	; (3af08 <std+0x40>)
   3aef6:	62e3      	str	r3, [r4, #44]	; 0x2c
   3aef8:	4b04      	ldr	r3, [pc, #16]	; (3af0c <std+0x44>)
   3aefa:	6323      	str	r3, [r4, #48]	; 0x30
   3aefc:	bd10      	pop	{r4, pc}
   3aefe:	bf00      	nop
   3af00:	00041709 	.word	0x00041709
   3af04:	0004172f 	.word	0x0004172f
   3af08:	00041767 	.word	0x00041767
   3af0c:	0004178b 	.word	0x0004178b

0003af10 <_cleanup_r>:
   3af10:	4901      	ldr	r1, [pc, #4]	; (3af18 <_cleanup_r+0x8>)
   3af12:	f006 bdbb 	b.w	41a8c <_fwalk_reent>
   3af16:	bf00      	nop
   3af18:	0003ae51 	.word	0x0003ae51

0003af1c <__sfp_lock_acquire>:
   3af1c:	4801      	ldr	r0, [pc, #4]	; (3af24 <__sfp_lock_acquire+0x8>)
   3af1e:	f7e8 bd19 	b.w	23954 <__retarget_lock_acquire_recursive>
   3af22:	bf00      	nop
   3af24:	20014edc 	.word	0x20014edc

0003af28 <__sfp_lock_release>:
   3af28:	4801      	ldr	r0, [pc, #4]	; (3af30 <__sfp_lock_release+0x8>)
   3af2a:	f7e8 bd2f 	b.w	2398c <__retarget_lock_release_recursive>
   3af2e:	bf00      	nop
   3af30:	20014edc 	.word	0x20014edc

0003af34 <__sinit_lock_acquire>:
   3af34:	4801      	ldr	r0, [pc, #4]	; (3af3c <__sinit_lock_acquire+0x8>)
   3af36:	f7e8 bd0d 	b.w	23954 <__retarget_lock_acquire_recursive>
   3af3a:	bf00      	nop
   3af3c:	20014ef0 	.word	0x20014ef0

0003af40 <__sinit_lock_release>:
   3af40:	4801      	ldr	r0, [pc, #4]	; (3af48 <__sinit_lock_release+0x8>)
   3af42:	f7e8 bd23 	b.w	2398c <__retarget_lock_release_recursive>
   3af46:	bf00      	nop
   3af48:	20014ef0 	.word	0x20014ef0

0003af4c <__sinit>:
   3af4c:	b510      	push	{r4, lr}
   3af4e:	4604      	mov	r4, r0
   3af50:	f7ff fff0 	bl	3af34 <__sinit_lock_acquire>
   3af54:	69a3      	ldr	r3, [r4, #24]
   3af56:	b11b      	cbz	r3, 3af60 <__sinit+0x14>
   3af58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3af5c:	f7ff bff0 	b.w	3af40 <__sinit_lock_release>
   3af60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   3af64:	6523      	str	r3, [r4, #80]	; 0x50
   3af66:	4620      	mov	r0, r4
   3af68:	4b12      	ldr	r3, [pc, #72]	; (3afb4 <__sinit+0x68>)
   3af6a:	4a13      	ldr	r2, [pc, #76]	; (3afb8 <__sinit+0x6c>)
   3af6c:	681b      	ldr	r3, [r3, #0]
   3af6e:	62a2      	str	r2, [r4, #40]	; 0x28
   3af70:	42a3      	cmp	r3, r4
   3af72:	bf04      	itt	eq
   3af74:	2301      	moveq	r3, #1
   3af76:	61a3      	streq	r3, [r4, #24]
   3af78:	f000 f820 	bl	3afbc <__sfp>
   3af7c:	6060      	str	r0, [r4, #4]
   3af7e:	4620      	mov	r0, r4
   3af80:	f000 f81c 	bl	3afbc <__sfp>
   3af84:	60a0      	str	r0, [r4, #8]
   3af86:	4620      	mov	r0, r4
   3af88:	f000 f818 	bl	3afbc <__sfp>
   3af8c:	2200      	movs	r2, #0
   3af8e:	2104      	movs	r1, #4
   3af90:	60e0      	str	r0, [r4, #12]
   3af92:	6860      	ldr	r0, [r4, #4]
   3af94:	f7ff ff98 	bl	3aec8 <std>
   3af98:	2201      	movs	r2, #1
   3af9a:	2109      	movs	r1, #9
   3af9c:	68a0      	ldr	r0, [r4, #8]
   3af9e:	f7ff ff93 	bl	3aec8 <std>
   3afa2:	2202      	movs	r2, #2
   3afa4:	2112      	movs	r1, #18
   3afa6:	68e0      	ldr	r0, [r4, #12]
   3afa8:	f7ff ff8e 	bl	3aec8 <std>
   3afac:	2301      	movs	r3, #1
   3afae:	61a3      	str	r3, [r4, #24]
   3afb0:	e7d2      	b.n	3af58 <__sinit+0xc>
   3afb2:	bf00      	nop
   3afb4:	00043400 	.word	0x00043400
   3afb8:	0003af11 	.word	0x0003af11

0003afbc <__sfp>:
   3afbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3afbe:	4607      	mov	r7, r0
   3afc0:	f7ff ffac 	bl	3af1c <__sfp_lock_acquire>
   3afc4:	4b1e      	ldr	r3, [pc, #120]	; (3b040 <__sfp+0x84>)
   3afc6:	681e      	ldr	r6, [r3, #0]
   3afc8:	69b3      	ldr	r3, [r6, #24]
   3afca:	b913      	cbnz	r3, 3afd2 <__sfp+0x16>
   3afcc:	4630      	mov	r0, r6
   3afce:	f7ff ffbd 	bl	3af4c <__sinit>
   3afd2:	3648      	adds	r6, #72	; 0x48
   3afd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   3afd8:	3b01      	subs	r3, #1
   3afda:	d503      	bpl.n	3afe4 <__sfp+0x28>
   3afdc:	6833      	ldr	r3, [r6, #0]
   3afde:	b30b      	cbz	r3, 3b024 <__sfp+0x68>
   3afe0:	6836      	ldr	r6, [r6, #0]
   3afe2:	e7f7      	b.n	3afd4 <__sfp+0x18>
   3afe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   3afe8:	b9d5      	cbnz	r5, 3b020 <__sfp+0x64>
   3afea:	4b16      	ldr	r3, [pc, #88]	; (3b044 <__sfp+0x88>)
   3afec:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3aff0:	6665      	str	r5, [r4, #100]	; 0x64
   3aff2:	60e3      	str	r3, [r4, #12]
   3aff4:	f7e8 fc86 	bl	23904 <__retarget_lock_init_recursive>
   3aff8:	f7ff ff96 	bl	3af28 <__sfp_lock_release>
   3affc:	2208      	movs	r2, #8
   3affe:	4629      	mov	r1, r5
   3b000:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   3b004:	6025      	str	r5, [r4, #0]
   3b006:	61a5      	str	r5, [r4, #24]
   3b008:	e9c4 5501 	strd	r5, r5, [r4, #4]
   3b00c:	e9c4 5504 	strd	r5, r5, [r4, #16]
   3b010:	f006 fa10 	bl	41434 <memset>
   3b014:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   3b018:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   3b01c:	4620      	mov	r0, r4
   3b01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b020:	3468      	adds	r4, #104	; 0x68
   3b022:	e7d9      	b.n	3afd8 <__sfp+0x1c>
   3b024:	2104      	movs	r1, #4
   3b026:	4638      	mov	r0, r7
   3b028:	f006 fd1a 	bl	41a60 <__sfmoreglue>
   3b02c:	4604      	mov	r4, r0
   3b02e:	6030      	str	r0, [r6, #0]
   3b030:	2800      	cmp	r0, #0
   3b032:	d1d5      	bne.n	3afe0 <__sfp+0x24>
   3b034:	f7ff ff78 	bl	3af28 <__sfp_lock_release>
   3b038:	230c      	movs	r3, #12
   3b03a:	603b      	str	r3, [r7, #0]
   3b03c:	e7ee      	b.n	3b01c <__sfp+0x60>
   3b03e:	bf00      	nop
   3b040:	00043400 	.word	0x00043400
   3b044:	ffff0001 	.word	0xffff0001

0003b048 <__gethex>:
   3b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b04c:	ed2d 8b02 	vpush	{d8}
   3b050:	b089      	sub	sp, #36	; 0x24
   3b052:	ee08 0a10 	vmov	s16, r0
   3b056:	468b      	mov	fp, r1
   3b058:	4690      	mov	r8, r2
   3b05a:	9304      	str	r3, [sp, #16]
   3b05c:	4bb2      	ldr	r3, [pc, #712]	; (3b328 <__gethex+0x2e0>)
   3b05e:	681b      	ldr	r3, [r3, #0]
   3b060:	4618      	mov	r0, r3
   3b062:	9301      	str	r3, [sp, #4]
   3b064:	f7e2 f8ed 	bl	1d242 <strlen>
   3b068:	9b01      	ldr	r3, [sp, #4]
   3b06a:	f8db 2000 	ldr.w	r2, [fp]
   3b06e:	4682      	mov	sl, r0
   3b070:	4403      	add	r3, r0
   3b072:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   3b076:	9305      	str	r3, [sp, #20]
   3b078:	1c93      	adds	r3, r2, #2
   3b07a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   3b07e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   3b082:	32fe      	adds	r2, #254	; 0xfe
   3b084:	18d1      	adds	r1, r2, r3
   3b086:	461f      	mov	r7, r3
   3b088:	f813 0b01 	ldrb.w	r0, [r3], #1
   3b08c:	9100      	str	r1, [sp, #0]
   3b08e:	2830      	cmp	r0, #48	; 0x30
   3b090:	d0f8      	beq.n	3b084 <__gethex+0x3c>
   3b092:	f006 fd6b 	bl	41b6c <__hexdig_fun>
   3b096:	4604      	mov	r4, r0
   3b098:	2800      	cmp	r0, #0
   3b09a:	d139      	bne.n	3b110 <__gethex+0xc8>
   3b09c:	4652      	mov	r2, sl
   3b09e:	9901      	ldr	r1, [sp, #4]
   3b0a0:	4638      	mov	r0, r7
   3b0a2:	f006 fb9a 	bl	417da <strncmp>
   3b0a6:	4605      	mov	r5, r0
   3b0a8:	2800      	cmp	r0, #0
   3b0aa:	d167      	bne.n	3b17c <__gethex+0x134>
   3b0ac:	f817 000a 	ldrb.w	r0, [r7, sl]
   3b0b0:	eb07 060a 	add.w	r6, r7, sl
   3b0b4:	f006 fd5a 	bl	41b6c <__hexdig_fun>
   3b0b8:	2800      	cmp	r0, #0
   3b0ba:	d061      	beq.n	3b180 <__gethex+0x138>
   3b0bc:	4633      	mov	r3, r6
   3b0be:	7818      	ldrb	r0, [r3, #0]
   3b0c0:	461f      	mov	r7, r3
   3b0c2:	3301      	adds	r3, #1
   3b0c4:	2830      	cmp	r0, #48	; 0x30
   3b0c6:	d0fa      	beq.n	3b0be <__gethex+0x76>
   3b0c8:	f006 fd50 	bl	41b6c <__hexdig_fun>
   3b0cc:	fab0 f480 	clz	r4, r0
   3b0d0:	2301      	movs	r3, #1
   3b0d2:	4635      	mov	r5, r6
   3b0d4:	0964      	lsrs	r4, r4, #5
   3b0d6:	9300      	str	r3, [sp, #0]
   3b0d8:	463a      	mov	r2, r7
   3b0da:	4616      	mov	r6, r2
   3b0dc:	3201      	adds	r2, #1
   3b0de:	7830      	ldrb	r0, [r6, #0]
   3b0e0:	f006 fd44 	bl	41b6c <__hexdig_fun>
   3b0e4:	2800      	cmp	r0, #0
   3b0e6:	d1f8      	bne.n	3b0da <__gethex+0x92>
   3b0e8:	4652      	mov	r2, sl
   3b0ea:	9901      	ldr	r1, [sp, #4]
   3b0ec:	4630      	mov	r0, r6
   3b0ee:	f006 fb74 	bl	417da <strncmp>
   3b0f2:	b980      	cbnz	r0, 3b116 <__gethex+0xce>
   3b0f4:	b94d      	cbnz	r5, 3b10a <__gethex+0xc2>
   3b0f6:	eb06 050a 	add.w	r5, r6, sl
   3b0fa:	462a      	mov	r2, r5
   3b0fc:	4616      	mov	r6, r2
   3b0fe:	3201      	adds	r2, #1
   3b100:	7830      	ldrb	r0, [r6, #0]
   3b102:	f006 fd33 	bl	41b6c <__hexdig_fun>
   3b106:	2800      	cmp	r0, #0
   3b108:	d1f8      	bne.n	3b0fc <__gethex+0xb4>
   3b10a:	1bad      	subs	r5, r5, r6
   3b10c:	00ad      	lsls	r5, r5, #2
   3b10e:	e004      	b.n	3b11a <__gethex+0xd2>
   3b110:	2400      	movs	r4, #0
   3b112:	4625      	mov	r5, r4
   3b114:	e7e0      	b.n	3b0d8 <__gethex+0x90>
   3b116:	2d00      	cmp	r5, #0
   3b118:	d1f7      	bne.n	3b10a <__gethex+0xc2>
   3b11a:	7833      	ldrb	r3, [r6, #0]
   3b11c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   3b120:	2b50      	cmp	r3, #80	; 0x50
   3b122:	d13b      	bne.n	3b19c <__gethex+0x154>
   3b124:	7873      	ldrb	r3, [r6, #1]
   3b126:	2b2b      	cmp	r3, #43	; 0x2b
   3b128:	d02c      	beq.n	3b184 <__gethex+0x13c>
   3b12a:	2b2d      	cmp	r3, #45	; 0x2d
   3b12c:	d02e      	beq.n	3b18c <__gethex+0x144>
   3b12e:	1c71      	adds	r1, r6, #1
   3b130:	f04f 0900 	mov.w	r9, #0
   3b134:	7808      	ldrb	r0, [r1, #0]
   3b136:	f006 fd19 	bl	41b6c <__hexdig_fun>
   3b13a:	1e43      	subs	r3, r0, #1
   3b13c:	b2db      	uxtb	r3, r3
   3b13e:	2b18      	cmp	r3, #24
   3b140:	d82c      	bhi.n	3b19c <__gethex+0x154>
   3b142:	f1a0 0210 	sub.w	r2, r0, #16
   3b146:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   3b14a:	f006 fd0f 	bl	41b6c <__hexdig_fun>
   3b14e:	1e43      	subs	r3, r0, #1
   3b150:	b2db      	uxtb	r3, r3
   3b152:	2b18      	cmp	r3, #24
   3b154:	d91d      	bls.n	3b192 <__gethex+0x14a>
   3b156:	f1b9 0f00 	cmp.w	r9, #0
   3b15a:	d000      	beq.n	3b15e <__gethex+0x116>
   3b15c:	4252      	negs	r2, r2
   3b15e:	4415      	add	r5, r2
   3b160:	f8cb 1000 	str.w	r1, [fp]
   3b164:	b1e4      	cbz	r4, 3b1a0 <__gethex+0x158>
   3b166:	9b00      	ldr	r3, [sp, #0]
   3b168:	2b00      	cmp	r3, #0
   3b16a:	bf14      	ite	ne
   3b16c:	2700      	movne	r7, #0
   3b16e:	2706      	moveq	r7, #6
   3b170:	4638      	mov	r0, r7
   3b172:	b009      	add	sp, #36	; 0x24
   3b174:	ecbd 8b02 	vpop	{d8}
   3b178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b17c:	463e      	mov	r6, r7
   3b17e:	4625      	mov	r5, r4
   3b180:	2401      	movs	r4, #1
   3b182:	e7ca      	b.n	3b11a <__gethex+0xd2>
   3b184:	f04f 0900 	mov.w	r9, #0
   3b188:	1cb1      	adds	r1, r6, #2
   3b18a:	e7d3      	b.n	3b134 <__gethex+0xec>
   3b18c:	f04f 0901 	mov.w	r9, #1
   3b190:	e7fa      	b.n	3b188 <__gethex+0x140>
   3b192:	230a      	movs	r3, #10
   3b194:	fb03 0202 	mla	r2, r3, r2, r0
   3b198:	3a10      	subs	r2, #16
   3b19a:	e7d4      	b.n	3b146 <__gethex+0xfe>
   3b19c:	4631      	mov	r1, r6
   3b19e:	e7df      	b.n	3b160 <__gethex+0x118>
   3b1a0:	1bf3      	subs	r3, r6, r7
   3b1a2:	4621      	mov	r1, r4
   3b1a4:	3b01      	subs	r3, #1
   3b1a6:	2b07      	cmp	r3, #7
   3b1a8:	dc0b      	bgt.n	3b1c2 <__gethex+0x17a>
   3b1aa:	ee18 0a10 	vmov	r0, s16
   3b1ae:	f000 f9f3 	bl	3b598 <_Balloc>
   3b1b2:	4604      	mov	r4, r0
   3b1b4:	b940      	cbnz	r0, 3b1c8 <__gethex+0x180>
   3b1b6:	4b5d      	ldr	r3, [pc, #372]	; (3b32c <__gethex+0x2e4>)
   3b1b8:	4602      	mov	r2, r0
   3b1ba:	21de      	movs	r1, #222	; 0xde
   3b1bc:	485c      	ldr	r0, [pc, #368]	; (3b330 <__gethex+0x2e8>)
   3b1be:	f7fe fc21 	bl	39a04 <__assert_func>
   3b1c2:	3101      	adds	r1, #1
   3b1c4:	105b      	asrs	r3, r3, #1
   3b1c6:	e7ee      	b.n	3b1a6 <__gethex+0x15e>
   3b1c8:	f100 0914 	add.w	r9, r0, #20
   3b1cc:	f04f 0b00 	mov.w	fp, #0
   3b1d0:	f1ca 0301 	rsb	r3, sl, #1
   3b1d4:	f8cd 9008 	str.w	r9, [sp, #8]
   3b1d8:	f8cd b000 	str.w	fp, [sp]
   3b1dc:	9306      	str	r3, [sp, #24]
   3b1de:	42b7      	cmp	r7, r6
   3b1e0:	d340      	bcc.n	3b264 <__gethex+0x21c>
   3b1e2:	9802      	ldr	r0, [sp, #8]
   3b1e4:	9b00      	ldr	r3, [sp, #0]
   3b1e6:	f840 3b04 	str.w	r3, [r0], #4
   3b1ea:	eba0 0009 	sub.w	r0, r0, r9
   3b1ee:	1080      	asrs	r0, r0, #2
   3b1f0:	0146      	lsls	r6, r0, #5
   3b1f2:	6120      	str	r0, [r4, #16]
   3b1f4:	4618      	mov	r0, r3
   3b1f6:	f006 fde1 	bl	41dbc <__hi0bits>
   3b1fa:	1a30      	subs	r0, r6, r0
   3b1fc:	f8d8 6000 	ldr.w	r6, [r8]
   3b200:	42b0      	cmp	r0, r6
   3b202:	dd63      	ble.n	3b2cc <__gethex+0x284>
   3b204:	1b87      	subs	r7, r0, r6
   3b206:	4620      	mov	r0, r4
   3b208:	4639      	mov	r1, r7
   3b20a:	f006 fe93 	bl	41f34 <__any_on>
   3b20e:	4682      	mov	sl, r0
   3b210:	b1a8      	cbz	r0, 3b23e <__gethex+0x1f6>
   3b212:	1e7b      	subs	r3, r7, #1
   3b214:	f04f 0a01 	mov.w	sl, #1
   3b218:	1159      	asrs	r1, r3, #5
   3b21a:	f003 021f 	and.w	r2, r3, #31
   3b21e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   3b222:	fa0a f202 	lsl.w	r2, sl, r2
   3b226:	420a      	tst	r2, r1
   3b228:	d009      	beq.n	3b23e <__gethex+0x1f6>
   3b22a:	4553      	cmp	r3, sl
   3b22c:	dd05      	ble.n	3b23a <__gethex+0x1f2>
   3b22e:	1eb9      	subs	r1, r7, #2
   3b230:	4620      	mov	r0, r4
   3b232:	f006 fe7f 	bl	41f34 <__any_on>
   3b236:	2800      	cmp	r0, #0
   3b238:	d145      	bne.n	3b2c6 <__gethex+0x27e>
   3b23a:	f04f 0a02 	mov.w	sl, #2
   3b23e:	443d      	add	r5, r7
   3b240:	4639      	mov	r1, r7
   3b242:	4620      	mov	r0, r4
   3b244:	f006 fc41 	bl	41aca <rshift>
   3b248:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3b24c:	42ab      	cmp	r3, r5
   3b24e:	da4c      	bge.n	3b2ea <__gethex+0x2a2>
   3b250:	4621      	mov	r1, r4
   3b252:	ee18 0a10 	vmov	r0, s16
   3b256:	f000 f9df 	bl	3b618 <_Bfree>
   3b25a:	2300      	movs	r3, #0
   3b25c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3b25e:	27a3      	movs	r7, #163	; 0xa3
   3b260:	6013      	str	r3, [r2, #0]
   3b262:	e785      	b.n	3b170 <__gethex+0x128>
   3b264:	1e73      	subs	r3, r6, #1
   3b266:	9a05      	ldr	r2, [sp, #20]
   3b268:	9303      	str	r3, [sp, #12]
   3b26a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   3b26e:	4293      	cmp	r3, r2
   3b270:	d019      	beq.n	3b2a6 <__gethex+0x25e>
   3b272:	f1bb 0f20 	cmp.w	fp, #32
   3b276:	d107      	bne.n	3b288 <__gethex+0x240>
   3b278:	9b02      	ldr	r3, [sp, #8]
   3b27a:	9a00      	ldr	r2, [sp, #0]
   3b27c:	f843 2b04 	str.w	r2, [r3], #4
   3b280:	9302      	str	r3, [sp, #8]
   3b282:	2300      	movs	r3, #0
   3b284:	469b      	mov	fp, r3
   3b286:	9300      	str	r3, [sp, #0]
   3b288:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   3b28c:	f006 fc6e 	bl	41b6c <__hexdig_fun>
   3b290:	f000 000f 	and.w	r0, r0, #15
   3b294:	9b00      	ldr	r3, [sp, #0]
   3b296:	fa00 f00b 	lsl.w	r0, r0, fp
   3b29a:	f10b 0b04 	add.w	fp, fp, #4
   3b29e:	4303      	orrs	r3, r0
   3b2a0:	9300      	str	r3, [sp, #0]
   3b2a2:	9b03      	ldr	r3, [sp, #12]
   3b2a4:	e00d      	b.n	3b2c2 <__gethex+0x27a>
   3b2a6:	9b03      	ldr	r3, [sp, #12]
   3b2a8:	9a06      	ldr	r2, [sp, #24]
   3b2aa:	4413      	add	r3, r2
   3b2ac:	42bb      	cmp	r3, r7
   3b2ae:	d3e0      	bcc.n	3b272 <__gethex+0x22a>
   3b2b0:	4618      	mov	r0, r3
   3b2b2:	4652      	mov	r2, sl
   3b2b4:	9901      	ldr	r1, [sp, #4]
   3b2b6:	9307      	str	r3, [sp, #28]
   3b2b8:	f006 fa8f 	bl	417da <strncmp>
   3b2bc:	9b07      	ldr	r3, [sp, #28]
   3b2be:	2800      	cmp	r0, #0
   3b2c0:	d1d7      	bne.n	3b272 <__gethex+0x22a>
   3b2c2:	461e      	mov	r6, r3
   3b2c4:	e78b      	b.n	3b1de <__gethex+0x196>
   3b2c6:	f04f 0a03 	mov.w	sl, #3
   3b2ca:	e7b8      	b.n	3b23e <__gethex+0x1f6>
   3b2cc:	da0a      	bge.n	3b2e4 <__gethex+0x29c>
   3b2ce:	1a37      	subs	r7, r6, r0
   3b2d0:	4621      	mov	r1, r4
   3b2d2:	ee18 0a10 	vmov	r0, s16
   3b2d6:	463a      	mov	r2, r7
   3b2d8:	1bed      	subs	r5, r5, r7
   3b2da:	f000 fb69 	bl	3b9b0 <__lshift>
   3b2de:	4604      	mov	r4, r0
   3b2e0:	f100 0914 	add.w	r9, r0, #20
   3b2e4:	f04f 0a00 	mov.w	sl, #0
   3b2e8:	e7ae      	b.n	3b248 <__gethex+0x200>
   3b2ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
   3b2ee:	42a8      	cmp	r0, r5
   3b2f0:	dd72      	ble.n	3b3d8 <__gethex+0x390>
   3b2f2:	1b45      	subs	r5, r0, r5
   3b2f4:	42ae      	cmp	r6, r5
   3b2f6:	dc35      	bgt.n	3b364 <__gethex+0x31c>
   3b2f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3b2fc:	2b02      	cmp	r3, #2
   3b2fe:	d029      	beq.n	3b354 <__gethex+0x30c>
   3b300:	2b03      	cmp	r3, #3
   3b302:	d02b      	beq.n	3b35c <__gethex+0x314>
   3b304:	2b01      	cmp	r3, #1
   3b306:	d11b      	bne.n	3b340 <__gethex+0x2f8>
   3b308:	42ae      	cmp	r6, r5
   3b30a:	d119      	bne.n	3b340 <__gethex+0x2f8>
   3b30c:	2e01      	cmp	r6, #1
   3b30e:	d111      	bne.n	3b334 <__gethex+0x2ec>
   3b310:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3b314:	2762      	movs	r7, #98	; 0x62
   3b316:	9a04      	ldr	r2, [sp, #16]
   3b318:	6013      	str	r3, [r2, #0]
   3b31a:	2301      	movs	r3, #1
   3b31c:	6123      	str	r3, [r4, #16]
   3b31e:	f8c9 3000 	str.w	r3, [r9]
   3b322:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3b324:	601c      	str	r4, [r3, #0]
   3b326:	e723      	b.n	3b170 <__gethex+0x128>
   3b328:	0004348c 	.word	0x0004348c
   3b32c:	0004bf1e 	.word	0x0004bf1e
   3b330:	0004bf2f 	.word	0x0004bf2f
   3b334:	1e71      	subs	r1, r6, #1
   3b336:	4620      	mov	r0, r4
   3b338:	f006 fdfc 	bl	41f34 <__any_on>
   3b33c:	2800      	cmp	r0, #0
   3b33e:	d1e7      	bne.n	3b310 <__gethex+0x2c8>
   3b340:	4621      	mov	r1, r4
   3b342:	ee18 0a10 	vmov	r0, s16
   3b346:	f000 f967 	bl	3b618 <_Bfree>
   3b34a:	2300      	movs	r3, #0
   3b34c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3b34e:	2750      	movs	r7, #80	; 0x50
   3b350:	6013      	str	r3, [r2, #0]
   3b352:	e70d      	b.n	3b170 <__gethex+0x128>
   3b354:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b356:	2b00      	cmp	r3, #0
   3b358:	d1f2      	bne.n	3b340 <__gethex+0x2f8>
   3b35a:	e7d9      	b.n	3b310 <__gethex+0x2c8>
   3b35c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b35e:	2b00      	cmp	r3, #0
   3b360:	d1d6      	bne.n	3b310 <__gethex+0x2c8>
   3b362:	e7ed      	b.n	3b340 <__gethex+0x2f8>
   3b364:	1e6f      	subs	r7, r5, #1
   3b366:	f1ba 0f00 	cmp.w	sl, #0
   3b36a:	d132      	bne.n	3b3d2 <__gethex+0x38a>
   3b36c:	b127      	cbz	r7, 3b378 <__gethex+0x330>
   3b36e:	4639      	mov	r1, r7
   3b370:	4620      	mov	r0, r4
   3b372:	f006 fddf 	bl	41f34 <__any_on>
   3b376:	4682      	mov	sl, r0
   3b378:	117b      	asrs	r3, r7, #5
   3b37a:	2101      	movs	r1, #1
   3b37c:	f007 071f 	and.w	r7, r7, #31
   3b380:	4620      	mov	r0, r4
   3b382:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   3b386:	1b76      	subs	r6, r6, r5
   3b388:	fa01 f707 	lsl.w	r7, r1, r7
   3b38c:	4629      	mov	r1, r5
   3b38e:	421f      	tst	r7, r3
   3b390:	f04f 0702 	mov.w	r7, #2
   3b394:	bf18      	it	ne
   3b396:	f04a 0a02 	orrne.w	sl, sl, #2
   3b39a:	f006 fb96 	bl	41aca <rshift>
   3b39e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   3b3a2:	f1ba 0f00 	cmp.w	sl, #0
   3b3a6:	d048      	beq.n	3b43a <__gethex+0x3f2>
   3b3a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3b3ac:	2b02      	cmp	r3, #2
   3b3ae:	d015      	beq.n	3b3dc <__gethex+0x394>
   3b3b0:	2b03      	cmp	r3, #3
   3b3b2:	d017      	beq.n	3b3e4 <__gethex+0x39c>
   3b3b4:	2b01      	cmp	r3, #1
   3b3b6:	d109      	bne.n	3b3cc <__gethex+0x384>
   3b3b8:	f01a 0f02 	tst.w	sl, #2
   3b3bc:	d006      	beq.n	3b3cc <__gethex+0x384>
   3b3be:	f8d9 0000 	ldr.w	r0, [r9]
   3b3c2:	ea4a 0a00 	orr.w	sl, sl, r0
   3b3c6:	f01a 0f01 	tst.w	sl, #1
   3b3ca:	d10e      	bne.n	3b3ea <__gethex+0x3a2>
   3b3cc:	f047 0710 	orr.w	r7, r7, #16
   3b3d0:	e033      	b.n	3b43a <__gethex+0x3f2>
   3b3d2:	f04f 0a01 	mov.w	sl, #1
   3b3d6:	e7cf      	b.n	3b378 <__gethex+0x330>
   3b3d8:	2701      	movs	r7, #1
   3b3da:	e7e2      	b.n	3b3a2 <__gethex+0x35a>
   3b3dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b3de:	f1c3 0301 	rsb	r3, r3, #1
   3b3e2:	9315      	str	r3, [sp, #84]	; 0x54
   3b3e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b3e6:	2b00      	cmp	r3, #0
   3b3e8:	d0f0      	beq.n	3b3cc <__gethex+0x384>
   3b3ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
   3b3ee:	f104 0314 	add.w	r3, r4, #20
   3b3f2:	f04f 0c00 	mov.w	ip, #0
   3b3f6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   3b3fa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   3b3fe:	4618      	mov	r0, r3
   3b400:	f853 2b04 	ldr.w	r2, [r3], #4
   3b404:	f1b2 3fff 	cmp.w	r2, #4294967295
   3b408:	d01c      	beq.n	3b444 <__gethex+0x3fc>
   3b40a:	3201      	adds	r2, #1
   3b40c:	6002      	str	r2, [r0, #0]
   3b40e:	2f02      	cmp	r7, #2
   3b410:	f104 0314 	add.w	r3, r4, #20
   3b414:	d13f      	bne.n	3b496 <__gethex+0x44e>
   3b416:	f8d8 2000 	ldr.w	r2, [r8]
   3b41a:	3a01      	subs	r2, #1
   3b41c:	42b2      	cmp	r2, r6
   3b41e:	d10a      	bne.n	3b436 <__gethex+0x3ee>
   3b420:	1171      	asrs	r1, r6, #5
   3b422:	2201      	movs	r2, #1
   3b424:	f006 061f 	and.w	r6, r6, #31
   3b428:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   3b42c:	fa02 f606 	lsl.w	r6, r2, r6
   3b430:	421e      	tst	r6, r3
   3b432:	bf18      	it	ne
   3b434:	4617      	movne	r7, r2
   3b436:	f047 0720 	orr.w	r7, r7, #32
   3b43a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3b43c:	601c      	str	r4, [r3, #0]
   3b43e:	9b04      	ldr	r3, [sp, #16]
   3b440:	601d      	str	r5, [r3, #0]
   3b442:	e695      	b.n	3b170 <__gethex+0x128>
   3b444:	4299      	cmp	r1, r3
   3b446:	f843 cc04 	str.w	ip, [r3, #-4]
   3b44a:	d8d8      	bhi.n	3b3fe <__gethex+0x3b6>
   3b44c:	68a3      	ldr	r3, [r4, #8]
   3b44e:	459b      	cmp	fp, r3
   3b450:	db19      	blt.n	3b486 <__gethex+0x43e>
   3b452:	6861      	ldr	r1, [r4, #4]
   3b454:	ee18 0a10 	vmov	r0, s16
   3b458:	3101      	adds	r1, #1
   3b45a:	f000 f89d 	bl	3b598 <_Balloc>
   3b45e:	4681      	mov	r9, r0
   3b460:	b918      	cbnz	r0, 3b46a <__gethex+0x422>
   3b462:	4b1b      	ldr	r3, [pc, #108]	; (3b4d0 <__gethex+0x488>)
   3b464:	4602      	mov	r2, r0
   3b466:	2184      	movs	r1, #132	; 0x84
   3b468:	e6a8      	b.n	3b1bc <__gethex+0x174>
   3b46a:	6922      	ldr	r2, [r4, #16]
   3b46c:	f104 010c 	add.w	r1, r4, #12
   3b470:	300c      	adds	r0, #12
   3b472:	3202      	adds	r2, #2
   3b474:	0092      	lsls	r2, r2, #2
   3b476:	f005 ffbd 	bl	413f4 <memcpy>
   3b47a:	4621      	mov	r1, r4
   3b47c:	464c      	mov	r4, r9
   3b47e:	ee18 0a10 	vmov	r0, s16
   3b482:	f000 f8c9 	bl	3b618 <_Bfree>
   3b486:	6923      	ldr	r3, [r4, #16]
   3b488:	1c5a      	adds	r2, r3, #1
   3b48a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   3b48e:	6122      	str	r2, [r4, #16]
   3b490:	2201      	movs	r2, #1
   3b492:	615a      	str	r2, [r3, #20]
   3b494:	e7bb      	b.n	3b40e <__gethex+0x3c6>
   3b496:	6922      	ldr	r2, [r4, #16]
   3b498:	455a      	cmp	r2, fp
   3b49a:	dd0b      	ble.n	3b4b4 <__gethex+0x46c>
   3b49c:	2101      	movs	r1, #1
   3b49e:	4620      	mov	r0, r4
   3b4a0:	f006 fb13 	bl	41aca <rshift>
   3b4a4:	3501      	adds	r5, #1
   3b4a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3b4aa:	42ab      	cmp	r3, r5
   3b4ac:	f6ff aed0 	blt.w	3b250 <__gethex+0x208>
   3b4b0:	2701      	movs	r7, #1
   3b4b2:	e7c0      	b.n	3b436 <__gethex+0x3ee>
   3b4b4:	f016 061f 	ands.w	r6, r6, #31
   3b4b8:	d0fa      	beq.n	3b4b0 <__gethex+0x468>
   3b4ba:	4453      	add	r3, sl
   3b4bc:	f1c6 0620 	rsb	r6, r6, #32
   3b4c0:	f853 0c04 	ldr.w	r0, [r3, #-4]
   3b4c4:	f006 fc7a 	bl	41dbc <__hi0bits>
   3b4c8:	42b0      	cmp	r0, r6
   3b4ca:	dbe7      	blt.n	3b49c <__gethex+0x454>
   3b4cc:	e7f0      	b.n	3b4b0 <__gethex+0x468>
   3b4ce:	bf00      	nop
   3b4d0:	0004bf1e 	.word	0x0004bf1e

0003b4d4 <_localeconv_r>:
   3b4d4:	4800      	ldr	r0, [pc, #0]	; (3b4d8 <_localeconv_r+0x4>)
   3b4d6:	4770      	bx	lr
   3b4d8:	20014bc8 	.word	0x20014bc8

0003b4dc <_lseek_r>:
   3b4dc:	b538      	push	{r3, r4, r5, lr}
   3b4de:	4604      	mov	r4, r0
   3b4e0:	4d06      	ldr	r5, [pc, #24]	; (3b4fc <_lseek_r+0x20>)
   3b4e2:	4608      	mov	r0, r1
   3b4e4:	4611      	mov	r1, r2
   3b4e6:	2200      	movs	r2, #0
   3b4e8:	602a      	str	r2, [r5, #0]
   3b4ea:	461a      	mov	r2, r3
   3b4ec:	f002 f937 	bl	3d75e <_lseek>
   3b4f0:	1c43      	adds	r3, r0, #1
   3b4f2:	d102      	bne.n	3b4fa <_lseek_r+0x1e>
   3b4f4:	682b      	ldr	r3, [r5, #0]
   3b4f6:	b103      	cbz	r3, 3b4fa <_lseek_r+0x1e>
   3b4f8:	6023      	str	r3, [r4, #0]
   3b4fa:	bd38      	pop	{r3, r4, r5, pc}
   3b4fc:	2001a568 	.word	0x2001a568

0003b500 <__smakebuf_r>:
   3b500:	898b      	ldrh	r3, [r1, #12]
   3b502:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3b504:	079d      	lsls	r5, r3, #30
   3b506:	4606      	mov	r6, r0
   3b508:	460c      	mov	r4, r1
   3b50a:	d507      	bpl.n	3b51c <__smakebuf_r+0x1c>
   3b50c:	f104 0347 	add.w	r3, r4, #71	; 0x47
   3b510:	6023      	str	r3, [r4, #0]
   3b512:	6123      	str	r3, [r4, #16]
   3b514:	2301      	movs	r3, #1
   3b516:	6163      	str	r3, [r4, #20]
   3b518:	b002      	add	sp, #8
   3b51a:	bd70      	pop	{r4, r5, r6, pc}
   3b51c:	ab01      	add	r3, sp, #4
   3b51e:	466a      	mov	r2, sp
   3b520:	f006 fbfb 	bl	41d1a <__swhatbuf_r>
   3b524:	9900      	ldr	r1, [sp, #0]
   3b526:	4605      	mov	r5, r0
   3b528:	4630      	mov	r0, r6
   3b52a:	f7fe fba3 	bl	39c74 <_malloc_r>
   3b52e:	b948      	cbnz	r0, 3b544 <__smakebuf_r+0x44>
   3b530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3b534:	059a      	lsls	r2, r3, #22
   3b536:	d4ef      	bmi.n	3b518 <__smakebuf_r+0x18>
   3b538:	f023 0303 	bic.w	r3, r3, #3
   3b53c:	f043 0302 	orr.w	r3, r3, #2
   3b540:	81a3      	strh	r3, [r4, #12]
   3b542:	e7e3      	b.n	3b50c <__smakebuf_r+0xc>
   3b544:	4b0d      	ldr	r3, [pc, #52]	; (3b57c <__smakebuf_r+0x7c>)
   3b546:	62b3      	str	r3, [r6, #40]	; 0x28
   3b548:	89a3      	ldrh	r3, [r4, #12]
   3b54a:	6020      	str	r0, [r4, #0]
   3b54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3b550:	6120      	str	r0, [r4, #16]
   3b552:	81a3      	strh	r3, [r4, #12]
   3b554:	9b00      	ldr	r3, [sp, #0]
   3b556:	6163      	str	r3, [r4, #20]
   3b558:	9b01      	ldr	r3, [sp, #4]
   3b55a:	b15b      	cbz	r3, 3b574 <__smakebuf_r+0x74>
   3b55c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3b560:	4630      	mov	r0, r6
   3b562:	f001 f807 	bl	3c574 <_isatty_r>
   3b566:	b128      	cbz	r0, 3b574 <__smakebuf_r+0x74>
   3b568:	89a3      	ldrh	r3, [r4, #12]
   3b56a:	f023 0303 	bic.w	r3, r3, #3
   3b56e:	f043 0301 	orr.w	r3, r3, #1
   3b572:	81a3      	strh	r3, [r4, #12]
   3b574:	89a0      	ldrh	r0, [r4, #12]
   3b576:	4305      	orrs	r5, r0
   3b578:	81a5      	strh	r5, [r4, #12]
   3b57a:	e7cd      	b.n	3b518 <__smakebuf_r+0x18>
   3b57c:	0003af11 	.word	0x0003af11

0003b580 <__malloc_lock>:
   3b580:	4801      	ldr	r0, [pc, #4]	; (3b588 <__malloc_lock+0x8>)
   3b582:	f7e8 b9e7 	b.w	23954 <__retarget_lock_acquire_recursive>
   3b586:	bf00      	nop
   3b588:	20014ec8 	.word	0x20014ec8

0003b58c <__malloc_unlock>:
   3b58c:	4801      	ldr	r0, [pc, #4]	; (3b594 <__malloc_unlock+0x8>)
   3b58e:	f7e8 b9fd 	b.w	2398c <__retarget_lock_release_recursive>
   3b592:	bf00      	nop
   3b594:	20014ec8 	.word	0x20014ec8

0003b598 <_Balloc>:
   3b598:	b570      	push	{r4, r5, r6, lr}
   3b59a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3b59c:	4604      	mov	r4, r0
   3b59e:	460d      	mov	r5, r1
   3b5a0:	b976      	cbnz	r6, 3b5c0 <_Balloc+0x28>
   3b5a2:	2010      	movs	r0, #16
   3b5a4:	f7fe fb0a 	bl	39bbc <malloc>
   3b5a8:	4602      	mov	r2, r0
   3b5aa:	6260      	str	r0, [r4, #36]	; 0x24
   3b5ac:	b920      	cbnz	r0, 3b5b8 <_Balloc+0x20>
   3b5ae:	4b18      	ldr	r3, [pc, #96]	; (3b610 <_Balloc+0x78>)
   3b5b0:	2166      	movs	r1, #102	; 0x66
   3b5b2:	4818      	ldr	r0, [pc, #96]	; (3b614 <_Balloc+0x7c>)
   3b5b4:	f7fe fa26 	bl	39a04 <__assert_func>
   3b5b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3b5bc:	6006      	str	r6, [r0, #0]
   3b5be:	60c6      	str	r6, [r0, #12]
   3b5c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
   3b5c2:	68f3      	ldr	r3, [r6, #12]
   3b5c4:	b183      	cbz	r3, 3b5e8 <_Balloc+0x50>
   3b5c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b5c8:	68db      	ldr	r3, [r3, #12]
   3b5ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   3b5ce:	b9b8      	cbnz	r0, 3b600 <_Balloc+0x68>
   3b5d0:	2101      	movs	r1, #1
   3b5d2:	4620      	mov	r0, r4
   3b5d4:	fa01 f605 	lsl.w	r6, r1, r5
   3b5d8:	1d72      	adds	r2, r6, #5
   3b5da:	0092      	lsls	r2, r2, #2
   3b5dc:	f005 ff32 	bl	41444 <_calloc_r>
   3b5e0:	b160      	cbz	r0, 3b5fc <_Balloc+0x64>
   3b5e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
   3b5e6:	e00e      	b.n	3b606 <_Balloc+0x6e>
   3b5e8:	2221      	movs	r2, #33	; 0x21
   3b5ea:	2104      	movs	r1, #4
   3b5ec:	4620      	mov	r0, r4
   3b5ee:	f005 ff29 	bl	41444 <_calloc_r>
   3b5f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b5f4:	60f0      	str	r0, [r6, #12]
   3b5f6:	68db      	ldr	r3, [r3, #12]
   3b5f8:	2b00      	cmp	r3, #0
   3b5fa:	d1e4      	bne.n	3b5c6 <_Balloc+0x2e>
   3b5fc:	2000      	movs	r0, #0
   3b5fe:	bd70      	pop	{r4, r5, r6, pc}
   3b600:	6802      	ldr	r2, [r0, #0]
   3b602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   3b606:	2300      	movs	r3, #0
   3b608:	e9c0 3303 	strd	r3, r3, [r0, #12]
   3b60c:	e7f7      	b.n	3b5fe <_Balloc+0x66>
   3b60e:	bf00      	nop
   3b610:	0004be93 	.word	0x0004be93
   3b614:	0004bfb5 	.word	0x0004bfb5

0003b618 <_Bfree>:
   3b618:	b570      	push	{r4, r5, r6, lr}
   3b61a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3b61c:	4605      	mov	r5, r0
   3b61e:	460c      	mov	r4, r1
   3b620:	b976      	cbnz	r6, 3b640 <_Bfree+0x28>
   3b622:	2010      	movs	r0, #16
   3b624:	f7fe faca 	bl	39bbc <malloc>
   3b628:	4602      	mov	r2, r0
   3b62a:	6268      	str	r0, [r5, #36]	; 0x24
   3b62c:	b920      	cbnz	r0, 3b638 <_Bfree+0x20>
   3b62e:	4b09      	ldr	r3, [pc, #36]	; (3b654 <_Bfree+0x3c>)
   3b630:	218a      	movs	r1, #138	; 0x8a
   3b632:	4809      	ldr	r0, [pc, #36]	; (3b658 <_Bfree+0x40>)
   3b634:	f7fe f9e6 	bl	39a04 <__assert_func>
   3b638:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3b63c:	6006      	str	r6, [r0, #0]
   3b63e:	60c6      	str	r6, [r0, #12]
   3b640:	b13c      	cbz	r4, 3b652 <_Bfree+0x3a>
   3b642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3b644:	6862      	ldr	r2, [r4, #4]
   3b646:	68db      	ldr	r3, [r3, #12]
   3b648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   3b64c:	6021      	str	r1, [r4, #0]
   3b64e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   3b652:	bd70      	pop	{r4, r5, r6, pc}
   3b654:	0004be93 	.word	0x0004be93
   3b658:	0004bfb5 	.word	0x0004bfb5

0003b65c <__multadd>:
   3b65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b660:	f101 0c14 	add.w	ip, r1, #20
   3b664:	4607      	mov	r7, r0
   3b666:	460c      	mov	r4, r1
   3b668:	461e      	mov	r6, r3
   3b66a:	690d      	ldr	r5, [r1, #16]
   3b66c:	2000      	movs	r0, #0
   3b66e:	f8dc 3000 	ldr.w	r3, [ip]
   3b672:	3001      	adds	r0, #1
   3b674:	b299      	uxth	r1, r3
   3b676:	4285      	cmp	r5, r0
   3b678:	fb02 6101 	mla	r1, r2, r1, r6
   3b67c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   3b680:	ea4f 4311 	mov.w	r3, r1, lsr #16
   3b684:	b289      	uxth	r1, r1
   3b686:	fb02 3306 	mla	r3, r2, r6, r3
   3b68a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   3b68e:	ea4f 4613 	mov.w	r6, r3, lsr #16
   3b692:	f84c 1b04 	str.w	r1, [ip], #4
   3b696:	dcea      	bgt.n	3b66e <__multadd+0x12>
   3b698:	b30e      	cbz	r6, 3b6de <__multadd+0x82>
   3b69a:	68a3      	ldr	r3, [r4, #8]
   3b69c:	42ab      	cmp	r3, r5
   3b69e:	dc19      	bgt.n	3b6d4 <__multadd+0x78>
   3b6a0:	6861      	ldr	r1, [r4, #4]
   3b6a2:	4638      	mov	r0, r7
   3b6a4:	3101      	adds	r1, #1
   3b6a6:	f7ff ff77 	bl	3b598 <_Balloc>
   3b6aa:	4680      	mov	r8, r0
   3b6ac:	b928      	cbnz	r0, 3b6ba <__multadd+0x5e>
   3b6ae:	4602      	mov	r2, r0
   3b6b0:	4b0c      	ldr	r3, [pc, #48]	; (3b6e4 <__multadd+0x88>)
   3b6b2:	21b5      	movs	r1, #181	; 0xb5
   3b6b4:	480c      	ldr	r0, [pc, #48]	; (3b6e8 <__multadd+0x8c>)
   3b6b6:	f7fe f9a5 	bl	39a04 <__assert_func>
   3b6ba:	6922      	ldr	r2, [r4, #16]
   3b6bc:	f104 010c 	add.w	r1, r4, #12
   3b6c0:	300c      	adds	r0, #12
   3b6c2:	3202      	adds	r2, #2
   3b6c4:	0092      	lsls	r2, r2, #2
   3b6c6:	f005 fe95 	bl	413f4 <memcpy>
   3b6ca:	4621      	mov	r1, r4
   3b6cc:	4644      	mov	r4, r8
   3b6ce:	4638      	mov	r0, r7
   3b6d0:	f7ff ffa2 	bl	3b618 <_Bfree>
   3b6d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   3b6d8:	3501      	adds	r5, #1
   3b6da:	615e      	str	r6, [r3, #20]
   3b6dc:	6125      	str	r5, [r4, #16]
   3b6de:	4620      	mov	r0, r4
   3b6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b6e4:	0004bf1e 	.word	0x0004bf1e
   3b6e8:	0004bfb5 	.word	0x0004bfb5

0003b6ec <__s2b>:
   3b6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3b6f0:	4615      	mov	r5, r2
   3b6f2:	461f      	mov	r7, r3
   3b6f4:	2209      	movs	r2, #9
   3b6f6:	3308      	adds	r3, #8
   3b6f8:	460c      	mov	r4, r1
   3b6fa:	4606      	mov	r6, r0
   3b6fc:	2100      	movs	r1, #0
   3b6fe:	fb93 f3f2 	sdiv	r3, r3, r2
   3b702:	2201      	movs	r2, #1
   3b704:	429a      	cmp	r2, r3
   3b706:	db09      	blt.n	3b71c <__s2b+0x30>
   3b708:	4630      	mov	r0, r6
   3b70a:	f7ff ff45 	bl	3b598 <_Balloc>
   3b70e:	b940      	cbnz	r0, 3b722 <__s2b+0x36>
   3b710:	4602      	mov	r2, r0
   3b712:	4b19      	ldr	r3, [pc, #100]	; (3b778 <__s2b+0x8c>)
   3b714:	21ce      	movs	r1, #206	; 0xce
   3b716:	4819      	ldr	r0, [pc, #100]	; (3b77c <__s2b+0x90>)
   3b718:	f7fe f974 	bl	39a04 <__assert_func>
   3b71c:	0052      	lsls	r2, r2, #1
   3b71e:	3101      	adds	r1, #1
   3b720:	e7f0      	b.n	3b704 <__s2b+0x18>
   3b722:	9b08      	ldr	r3, [sp, #32]
   3b724:	2d09      	cmp	r5, #9
   3b726:	6143      	str	r3, [r0, #20]
   3b728:	f04f 0301 	mov.w	r3, #1
   3b72c:	6103      	str	r3, [r0, #16]
   3b72e:	dd16      	ble.n	3b75e <__s2b+0x72>
   3b730:	f104 0909 	add.w	r9, r4, #9
   3b734:	442c      	add	r4, r5
   3b736:	46c8      	mov	r8, r9
   3b738:	f818 3b01 	ldrb.w	r3, [r8], #1
   3b73c:	4601      	mov	r1, r0
   3b73e:	220a      	movs	r2, #10
   3b740:	4630      	mov	r0, r6
   3b742:	3b30      	subs	r3, #48	; 0x30
   3b744:	f7ff ff8a 	bl	3b65c <__multadd>
   3b748:	45a0      	cmp	r8, r4
   3b74a:	d1f5      	bne.n	3b738 <__s2b+0x4c>
   3b74c:	f1a5 0408 	sub.w	r4, r5, #8
   3b750:	444c      	add	r4, r9
   3b752:	1b2d      	subs	r5, r5, r4
   3b754:	1963      	adds	r3, r4, r5
   3b756:	42bb      	cmp	r3, r7
   3b758:	db04      	blt.n	3b764 <__s2b+0x78>
   3b75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3b75e:	340a      	adds	r4, #10
   3b760:	2509      	movs	r5, #9
   3b762:	e7f6      	b.n	3b752 <__s2b+0x66>
   3b764:	f814 3b01 	ldrb.w	r3, [r4], #1
   3b768:	4601      	mov	r1, r0
   3b76a:	220a      	movs	r2, #10
   3b76c:	4630      	mov	r0, r6
   3b76e:	3b30      	subs	r3, #48	; 0x30
   3b770:	f7ff ff74 	bl	3b65c <__multadd>
   3b774:	e7ee      	b.n	3b754 <__s2b+0x68>
   3b776:	bf00      	nop
   3b778:	0004bf1e 	.word	0x0004bf1e
   3b77c:	0004bfb5 	.word	0x0004bfb5

0003b780 <__i2b>:
   3b780:	b510      	push	{r4, lr}
   3b782:	460c      	mov	r4, r1
   3b784:	2101      	movs	r1, #1
   3b786:	f7ff ff07 	bl	3b598 <_Balloc>
   3b78a:	4602      	mov	r2, r0
   3b78c:	b928      	cbnz	r0, 3b79a <__i2b+0x1a>
   3b78e:	4b05      	ldr	r3, [pc, #20]	; (3b7a4 <__i2b+0x24>)
   3b790:	f44f 71a0 	mov.w	r1, #320	; 0x140
   3b794:	4804      	ldr	r0, [pc, #16]	; (3b7a8 <__i2b+0x28>)
   3b796:	f7fe f935 	bl	39a04 <__assert_func>
   3b79a:	2301      	movs	r3, #1
   3b79c:	6144      	str	r4, [r0, #20]
   3b79e:	6103      	str	r3, [r0, #16]
   3b7a0:	bd10      	pop	{r4, pc}
   3b7a2:	bf00      	nop
   3b7a4:	0004bf1e 	.word	0x0004bf1e
   3b7a8:	0004bfb5 	.word	0x0004bfb5

0003b7ac <__multiply>:
   3b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b7b0:	4691      	mov	r9, r2
   3b7b2:	690a      	ldr	r2, [r1, #16]
   3b7b4:	460c      	mov	r4, r1
   3b7b6:	b085      	sub	sp, #20
   3b7b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   3b7bc:	429a      	cmp	r2, r3
   3b7be:	bfbe      	ittt	lt
   3b7c0:	460b      	movlt	r3, r1
   3b7c2:	464c      	movlt	r4, r9
   3b7c4:	4699      	movlt	r9, r3
   3b7c6:	6927      	ldr	r7, [r4, #16]
   3b7c8:	68a3      	ldr	r3, [r4, #8]
   3b7ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
   3b7ce:	6861      	ldr	r1, [r4, #4]
   3b7d0:	eb07 060a 	add.w	r6, r7, sl
   3b7d4:	42b3      	cmp	r3, r6
   3b7d6:	bfb8      	it	lt
   3b7d8:	3101      	addlt	r1, #1
   3b7da:	f7ff fedd 	bl	3b598 <_Balloc>
   3b7de:	b930      	cbnz	r0, 3b7ee <__multiply+0x42>
   3b7e0:	4602      	mov	r2, r0
   3b7e2:	4b44      	ldr	r3, [pc, #272]	; (3b8f4 <__multiply+0x148>)
   3b7e4:	f240 115d 	movw	r1, #349	; 0x15d
   3b7e8:	4843      	ldr	r0, [pc, #268]	; (3b8f8 <__multiply+0x14c>)
   3b7ea:	f7fe f90b 	bl	39a04 <__assert_func>
   3b7ee:	f100 0514 	add.w	r5, r0, #20
   3b7f2:	2200      	movs	r2, #0
   3b7f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   3b7f8:	462b      	mov	r3, r5
   3b7fa:	4543      	cmp	r3, r8
   3b7fc:	d321      	bcc.n	3b842 <__multiply+0x96>
   3b7fe:	f104 0314 	add.w	r3, r4, #20
   3b802:	f104 0115 	add.w	r1, r4, #21
   3b806:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   3b80a:	f109 0314 	add.w	r3, r9, #20
   3b80e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   3b812:	9202      	str	r2, [sp, #8]
   3b814:	1b3a      	subs	r2, r7, r4
   3b816:	3a15      	subs	r2, #21
   3b818:	f022 0203 	bic.w	r2, r2, #3
   3b81c:	3204      	adds	r2, #4
   3b81e:	428f      	cmp	r7, r1
   3b820:	bf38      	it	cc
   3b822:	2204      	movcc	r2, #4
   3b824:	9201      	str	r2, [sp, #4]
   3b826:	9a02      	ldr	r2, [sp, #8]
   3b828:	9303      	str	r3, [sp, #12]
   3b82a:	429a      	cmp	r2, r3
   3b82c:	d80c      	bhi.n	3b848 <__multiply+0x9c>
   3b82e:	2e00      	cmp	r6, #0
   3b830:	dd03      	ble.n	3b83a <__multiply+0x8e>
   3b832:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   3b836:	2b00      	cmp	r3, #0
   3b838:	d05a      	beq.n	3b8f0 <__multiply+0x144>
   3b83a:	6106      	str	r6, [r0, #16]
   3b83c:	b005      	add	sp, #20
   3b83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b842:	f843 2b04 	str.w	r2, [r3], #4
   3b846:	e7d8      	b.n	3b7fa <__multiply+0x4e>
   3b848:	f8b3 a000 	ldrh.w	sl, [r3]
   3b84c:	f1ba 0f00 	cmp.w	sl, #0
   3b850:	d024      	beq.n	3b89c <__multiply+0xf0>
   3b852:	f104 0e14 	add.w	lr, r4, #20
   3b856:	46a9      	mov	r9, r5
   3b858:	f04f 0c00 	mov.w	ip, #0
   3b85c:	f85e 2b04 	ldr.w	r2, [lr], #4
   3b860:	f8d9 1000 	ldr.w	r1, [r9]
   3b864:	fa1f fb82 	uxth.w	fp, r2
   3b868:	4577      	cmp	r7, lr
   3b86a:	b289      	uxth	r1, r1
   3b86c:	fb0a 110b 	mla	r1, sl, fp, r1
   3b870:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   3b874:	f8d9 2000 	ldr.w	r2, [r9]
   3b878:	4461      	add	r1, ip
   3b87a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   3b87e:	fb0a c20b 	mla	r2, sl, fp, ip
   3b882:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   3b886:	b289      	uxth	r1, r1
   3b888:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   3b88c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   3b890:	f849 1b04 	str.w	r1, [r9], #4
   3b894:	d8e2      	bhi.n	3b85c <__multiply+0xb0>
   3b896:	9a01      	ldr	r2, [sp, #4]
   3b898:	f845 c002 	str.w	ip, [r5, r2]
   3b89c:	9a03      	ldr	r2, [sp, #12]
   3b89e:	3304      	adds	r3, #4
   3b8a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   3b8a4:	f1b9 0f00 	cmp.w	r9, #0
   3b8a8:	d020      	beq.n	3b8ec <__multiply+0x140>
   3b8aa:	6829      	ldr	r1, [r5, #0]
   3b8ac:	f104 0c14 	add.w	ip, r4, #20
   3b8b0:	46ae      	mov	lr, r5
   3b8b2:	f04f 0a00 	mov.w	sl, #0
   3b8b6:	f8bc b000 	ldrh.w	fp, [ip]
   3b8ba:	b289      	uxth	r1, r1
   3b8bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   3b8c0:	fb09 220b 	mla	r2, r9, fp, r2
   3b8c4:	4492      	add	sl, r2
   3b8c6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   3b8ca:	f84e 1b04 	str.w	r1, [lr], #4
   3b8ce:	f85c 2b04 	ldr.w	r2, [ip], #4
   3b8d2:	f8be 1000 	ldrh.w	r1, [lr]
   3b8d6:	0c12      	lsrs	r2, r2, #16
   3b8d8:	4567      	cmp	r7, ip
   3b8da:	fb09 1102 	mla	r1, r9, r2, r1
   3b8de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   3b8e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   3b8e6:	d8e6      	bhi.n	3b8b6 <__multiply+0x10a>
   3b8e8:	9a01      	ldr	r2, [sp, #4]
   3b8ea:	50a9      	str	r1, [r5, r2]
   3b8ec:	3504      	adds	r5, #4
   3b8ee:	e79a      	b.n	3b826 <__multiply+0x7a>
   3b8f0:	3e01      	subs	r6, #1
   3b8f2:	e79c      	b.n	3b82e <__multiply+0x82>
   3b8f4:	0004bf1e 	.word	0x0004bf1e
   3b8f8:	0004bfb5 	.word	0x0004bfb5

0003b8fc <__pow5mult>:
   3b8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3b900:	4615      	mov	r5, r2
   3b902:	f012 0203 	ands.w	r2, r2, #3
   3b906:	4606      	mov	r6, r0
   3b908:	460f      	mov	r7, r1
   3b90a:	d007      	beq.n	3b91c <__pow5mult+0x20>
   3b90c:	3a01      	subs	r2, #1
   3b90e:	4c25      	ldr	r4, [pc, #148]	; (3b9a4 <__pow5mult+0xa8>)
   3b910:	2300      	movs	r3, #0
   3b912:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   3b916:	f7ff fea1 	bl	3b65c <__multadd>
   3b91a:	4607      	mov	r7, r0
   3b91c:	10ad      	asrs	r5, r5, #2
   3b91e:	d03d      	beq.n	3b99c <__pow5mult+0xa0>
   3b920:	6a74      	ldr	r4, [r6, #36]	; 0x24
   3b922:	b97c      	cbnz	r4, 3b944 <__pow5mult+0x48>
   3b924:	2010      	movs	r0, #16
   3b926:	f7fe f949 	bl	39bbc <malloc>
   3b92a:	4602      	mov	r2, r0
   3b92c:	6270      	str	r0, [r6, #36]	; 0x24
   3b92e:	b928      	cbnz	r0, 3b93c <__pow5mult+0x40>
   3b930:	4b1d      	ldr	r3, [pc, #116]	; (3b9a8 <__pow5mult+0xac>)
   3b932:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   3b936:	481d      	ldr	r0, [pc, #116]	; (3b9ac <__pow5mult+0xb0>)
   3b938:	f7fe f864 	bl	39a04 <__assert_func>
   3b93c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3b940:	6004      	str	r4, [r0, #0]
   3b942:	60c4      	str	r4, [r0, #12]
   3b944:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   3b948:	f8d8 4008 	ldr.w	r4, [r8, #8]
   3b94c:	b94c      	cbnz	r4, 3b962 <__pow5mult+0x66>
   3b94e:	f240 2171 	movw	r1, #625	; 0x271
   3b952:	4630      	mov	r0, r6
   3b954:	f7ff ff14 	bl	3b780 <__i2b>
   3b958:	2300      	movs	r3, #0
   3b95a:	4604      	mov	r4, r0
   3b95c:	f8c8 0008 	str.w	r0, [r8, #8]
   3b960:	6003      	str	r3, [r0, #0]
   3b962:	f04f 0900 	mov.w	r9, #0
   3b966:	07eb      	lsls	r3, r5, #31
   3b968:	d50a      	bpl.n	3b980 <__pow5mult+0x84>
   3b96a:	4639      	mov	r1, r7
   3b96c:	4622      	mov	r2, r4
   3b96e:	4630      	mov	r0, r6
   3b970:	f7ff ff1c 	bl	3b7ac <__multiply>
   3b974:	4680      	mov	r8, r0
   3b976:	4639      	mov	r1, r7
   3b978:	4630      	mov	r0, r6
   3b97a:	4647      	mov	r7, r8
   3b97c:	f7ff fe4c 	bl	3b618 <_Bfree>
   3b980:	106d      	asrs	r5, r5, #1
   3b982:	d00b      	beq.n	3b99c <__pow5mult+0xa0>
   3b984:	6820      	ldr	r0, [r4, #0]
   3b986:	b938      	cbnz	r0, 3b998 <__pow5mult+0x9c>
   3b988:	4622      	mov	r2, r4
   3b98a:	4621      	mov	r1, r4
   3b98c:	4630      	mov	r0, r6
   3b98e:	f7ff ff0d 	bl	3b7ac <__multiply>
   3b992:	6020      	str	r0, [r4, #0]
   3b994:	f8c0 9000 	str.w	r9, [r0]
   3b998:	4604      	mov	r4, r0
   3b99a:	e7e4      	b.n	3b966 <__pow5mult+0x6a>
   3b99c:	4638      	mov	r0, r7
   3b99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3b9a2:	bf00      	nop
   3b9a4:	00043498 	.word	0x00043498
   3b9a8:	0004be93 	.word	0x0004be93
   3b9ac:	0004bfb5 	.word	0x0004bfb5

0003b9b0 <__lshift>:
   3b9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b9b4:	460c      	mov	r4, r1
   3b9b6:	4607      	mov	r7, r0
   3b9b8:	4691      	mov	r9, r2
   3b9ba:	ea4f 1a62 	mov.w	sl, r2, asr #5
   3b9be:	6923      	ldr	r3, [r4, #16]
   3b9c0:	6849      	ldr	r1, [r1, #4]
   3b9c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
   3b9c6:	68a3      	ldr	r3, [r4, #8]
   3b9c8:	f108 0601 	add.w	r6, r8, #1
   3b9cc:	42b3      	cmp	r3, r6
   3b9ce:	db0b      	blt.n	3b9e8 <__lshift+0x38>
   3b9d0:	4638      	mov	r0, r7
   3b9d2:	f7ff fde1 	bl	3b598 <_Balloc>
   3b9d6:	4605      	mov	r5, r0
   3b9d8:	b948      	cbnz	r0, 3b9ee <__lshift+0x3e>
   3b9da:	4602      	mov	r2, r0
   3b9dc:	4b2a      	ldr	r3, [pc, #168]	; (3ba88 <__lshift+0xd8>)
   3b9de:	f240 11d9 	movw	r1, #473	; 0x1d9
   3b9e2:	482a      	ldr	r0, [pc, #168]	; (3ba8c <__lshift+0xdc>)
   3b9e4:	f7fe f80e 	bl	39a04 <__assert_func>
   3b9e8:	3101      	adds	r1, #1
   3b9ea:	005b      	lsls	r3, r3, #1
   3b9ec:	e7ee      	b.n	3b9cc <__lshift+0x1c>
   3b9ee:	2300      	movs	r3, #0
   3b9f0:	f100 0114 	add.w	r1, r0, #20
   3b9f4:	f100 0210 	add.w	r2, r0, #16
   3b9f8:	4618      	mov	r0, r3
   3b9fa:	4553      	cmp	r3, sl
   3b9fc:	db37      	blt.n	3ba6e <__lshift+0xbe>
   3b9fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   3ba02:	f104 0314 	add.w	r3, r4, #20
   3ba06:	6920      	ldr	r0, [r4, #16]
   3ba08:	f019 091f 	ands.w	r9, r9, #31
   3ba0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   3ba10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   3ba14:	d02f      	beq.n	3ba76 <__lshift+0xc6>
   3ba16:	f1c9 0e20 	rsb	lr, r9, #32
   3ba1a:	468a      	mov	sl, r1
   3ba1c:	f04f 0c00 	mov.w	ip, #0
   3ba20:	681a      	ldr	r2, [r3, #0]
   3ba22:	fa02 f209 	lsl.w	r2, r2, r9
   3ba26:	ea42 020c 	orr.w	r2, r2, ip
   3ba2a:	f84a 2b04 	str.w	r2, [sl], #4
   3ba2e:	f853 2b04 	ldr.w	r2, [r3], #4
   3ba32:	4298      	cmp	r0, r3
   3ba34:	fa22 fc0e 	lsr.w	ip, r2, lr
   3ba38:	d8f2      	bhi.n	3ba20 <__lshift+0x70>
   3ba3a:	1b03      	subs	r3, r0, r4
   3ba3c:	f104 0215 	add.w	r2, r4, #21
   3ba40:	3b15      	subs	r3, #21
   3ba42:	f023 0303 	bic.w	r3, r3, #3
   3ba46:	3304      	adds	r3, #4
   3ba48:	4290      	cmp	r0, r2
   3ba4a:	bf38      	it	cc
   3ba4c:	2304      	movcc	r3, #4
   3ba4e:	f841 c003 	str.w	ip, [r1, r3]
   3ba52:	f1bc 0f00 	cmp.w	ip, #0
   3ba56:	d001      	beq.n	3ba5c <__lshift+0xac>
   3ba58:	f108 0602 	add.w	r6, r8, #2
   3ba5c:	3e01      	subs	r6, #1
   3ba5e:	4638      	mov	r0, r7
   3ba60:	4621      	mov	r1, r4
   3ba62:	612e      	str	r6, [r5, #16]
   3ba64:	f7ff fdd8 	bl	3b618 <_Bfree>
   3ba68:	4628      	mov	r0, r5
   3ba6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3ba6e:	3301      	adds	r3, #1
   3ba70:	f842 0f04 	str.w	r0, [r2, #4]!
   3ba74:	e7c1      	b.n	3b9fa <__lshift+0x4a>
   3ba76:	3904      	subs	r1, #4
   3ba78:	f853 2b04 	ldr.w	r2, [r3], #4
   3ba7c:	4298      	cmp	r0, r3
   3ba7e:	f841 2f04 	str.w	r2, [r1, #4]!
   3ba82:	d8f9      	bhi.n	3ba78 <__lshift+0xc8>
   3ba84:	e7ea      	b.n	3ba5c <__lshift+0xac>
   3ba86:	bf00      	nop
   3ba88:	0004bf1e 	.word	0x0004bf1e
   3ba8c:	0004bfb5 	.word	0x0004bfb5

0003ba90 <__mdiff>:
   3ba90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ba94:	460c      	mov	r4, r1
   3ba96:	4606      	mov	r6, r0
   3ba98:	4611      	mov	r1, r2
   3ba9a:	4692      	mov	sl, r2
   3ba9c:	4620      	mov	r0, r4
   3ba9e:	f006 f9dc 	bl	41e5a <__mcmp>
   3baa2:	1e05      	subs	r5, r0, #0
   3baa4:	d110      	bne.n	3bac8 <__mdiff+0x38>
   3baa6:	4629      	mov	r1, r5
   3baa8:	4630      	mov	r0, r6
   3baaa:	f7ff fd75 	bl	3b598 <_Balloc>
   3baae:	b930      	cbnz	r0, 3babe <__mdiff+0x2e>
   3bab0:	4b3d      	ldr	r3, [pc, #244]	; (3bba8 <__mdiff+0x118>)
   3bab2:	4602      	mov	r2, r0
   3bab4:	f240 2132 	movw	r1, #562	; 0x232
   3bab8:	483c      	ldr	r0, [pc, #240]	; (3bbac <__mdiff+0x11c>)
   3baba:	f7fd ffa3 	bl	39a04 <__assert_func>
   3babe:	2301      	movs	r3, #1
   3bac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
   3bac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bac8:	bfa4      	itt	ge
   3baca:	4653      	movge	r3, sl
   3bacc:	46a2      	movge	sl, r4
   3bace:	4630      	mov	r0, r6
   3bad0:	bfa8      	it	ge
   3bad2:	2500      	movge	r5, #0
   3bad4:	f8da 1004 	ldr.w	r1, [sl, #4]
   3bad8:	bfac      	ite	ge
   3bada:	461c      	movge	r4, r3
   3badc:	2501      	movlt	r5, #1
   3bade:	f7ff fd5b 	bl	3b598 <_Balloc>
   3bae2:	b920      	cbnz	r0, 3baee <__mdiff+0x5e>
   3bae4:	4b30      	ldr	r3, [pc, #192]	; (3bba8 <__mdiff+0x118>)
   3bae6:	4602      	mov	r2, r0
   3bae8:	f44f 7110 	mov.w	r1, #576	; 0x240
   3baec:	e7e4      	b.n	3bab8 <__mdiff+0x28>
   3baee:	f8da 7010 	ldr.w	r7, [sl, #16]
   3baf2:	f104 0914 	add.w	r9, r4, #20
   3baf6:	6926      	ldr	r6, [r4, #16]
   3baf8:	f100 0814 	add.w	r8, r0, #20
   3bafc:	60c5      	str	r5, [r0, #12]
   3bafe:	f10a 0514 	add.w	r5, sl, #20
   3bb02:	f10a 0210 	add.w	r2, sl, #16
   3bb06:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   3bb0a:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   3bb0e:	46c2      	mov	sl, r8
   3bb10:	f04f 0c00 	mov.w	ip, #0
   3bb14:	f852 bf04 	ldr.w	fp, [r2, #4]!
   3bb18:	f859 3b04 	ldr.w	r3, [r9], #4
   3bb1c:	fa1f f18b 	uxth.w	r1, fp
   3bb20:	454e      	cmp	r6, r9
   3bb22:	448c      	add	ip, r1
   3bb24:	b299      	uxth	r1, r3
   3bb26:	ea4f 4313 	mov.w	r3, r3, lsr #16
   3bb2a:	ebac 0101 	sub.w	r1, ip, r1
   3bb2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   3bb32:	eb03 4321 	add.w	r3, r3, r1, asr #16
   3bb36:	b289      	uxth	r1, r1
   3bb38:	ea4f 4c23 	mov.w	ip, r3, asr #16
   3bb3c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   3bb40:	f84a 3b04 	str.w	r3, [sl], #4
   3bb44:	d8e6      	bhi.n	3bb14 <__mdiff+0x84>
   3bb46:	1b33      	subs	r3, r6, r4
   3bb48:	3415      	adds	r4, #21
   3bb4a:	3b15      	subs	r3, #21
   3bb4c:	f023 0303 	bic.w	r3, r3, #3
   3bb50:	3304      	adds	r3, #4
   3bb52:	42a6      	cmp	r6, r4
   3bb54:	bf38      	it	cc
   3bb56:	2304      	movcc	r3, #4
   3bb58:	441d      	add	r5, r3
   3bb5a:	4443      	add	r3, r8
   3bb5c:	462c      	mov	r4, r5
   3bb5e:	461e      	mov	r6, r3
   3bb60:	4574      	cmp	r4, lr
   3bb62:	d30e      	bcc.n	3bb82 <__mdiff+0xf2>
   3bb64:	f10e 0203 	add.w	r2, lr, #3
   3bb68:	1b52      	subs	r2, r2, r5
   3bb6a:	3d03      	subs	r5, #3
   3bb6c:	f022 0203 	bic.w	r2, r2, #3
   3bb70:	45ae      	cmp	lr, r5
   3bb72:	bf38      	it	cc
   3bb74:	2200      	movcc	r2, #0
   3bb76:	441a      	add	r2, r3
   3bb78:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   3bb7c:	b18b      	cbz	r3, 3bba2 <__mdiff+0x112>
   3bb7e:	6107      	str	r7, [r0, #16]
   3bb80:	e7a0      	b.n	3bac4 <__mdiff+0x34>
   3bb82:	f854 8b04 	ldr.w	r8, [r4], #4
   3bb86:	fa1f f288 	uxth.w	r2, r8
   3bb8a:	4462      	add	r2, ip
   3bb8c:	1411      	asrs	r1, r2, #16
   3bb8e:	b292      	uxth	r2, r2
   3bb90:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   3bb94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   3bb98:	ea4f 4c21 	mov.w	ip, r1, asr #16
   3bb9c:	f846 2b04 	str.w	r2, [r6], #4
   3bba0:	e7de      	b.n	3bb60 <__mdiff+0xd0>
   3bba2:	3f01      	subs	r7, #1
   3bba4:	e7e8      	b.n	3bb78 <__mdiff+0xe8>
   3bba6:	bf00      	nop
   3bba8:	0004bf1e 	.word	0x0004bf1e
   3bbac:	0004bfb5 	.word	0x0004bfb5

0003bbb0 <__ulp>:
   3bbb0:	4b10      	ldr	r3, [pc, #64]	; (3bbf4 <__ulp+0x44>)
   3bbb2:	400b      	ands	r3, r1
   3bbb4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   3bbb8:	2b00      	cmp	r3, #0
   3bbba:	dd02      	ble.n	3bbc2 <__ulp+0x12>
   3bbbc:	2000      	movs	r0, #0
   3bbbe:	4619      	mov	r1, r3
   3bbc0:	4770      	bx	lr
   3bbc2:	425b      	negs	r3, r3
   3bbc4:	2000      	movs	r0, #0
   3bbc6:	2100      	movs	r1, #0
   3bbc8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   3bbcc:	ea4f 5223 	mov.w	r2, r3, asr #20
   3bbd0:	da04      	bge.n	3bbdc <__ulp+0x2c>
   3bbd2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   3bbd6:	fa43 f102 	asr.w	r1, r3, r2
   3bbda:	4770      	bx	lr
   3bbdc:	f1a2 0314 	sub.w	r3, r2, #20
   3bbe0:	2b1e      	cmp	r3, #30
   3bbe2:	bfd6      	itet	le
   3bbe4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   3bbe8:	2301      	movgt	r3, #1
   3bbea:	fa22 f303 	lsrle.w	r3, r2, r3
   3bbee:	4618      	mov	r0, r3
   3bbf0:	4770      	bx	lr
   3bbf2:	bf00      	nop
   3bbf4:	7ff00000 	.word	0x7ff00000

0003bbf8 <__b2d>:
   3bbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bbfc:	6906      	ldr	r6, [r0, #16]
   3bbfe:	f100 0814 	add.w	r8, r0, #20
   3bc02:	eb08 0686 	add.w	r6, r8, r6, lsl #2
   3bc06:	f856 2c04 	ldr.w	r2, [r6, #-4]
   3bc0a:	1f37      	subs	r7, r6, #4
   3bc0c:	4610      	mov	r0, r2
   3bc0e:	f006 f8d5 	bl	41dbc <__hi0bits>
   3bc12:	f1c0 0320 	rsb	r3, r0, #32
   3bc16:	280a      	cmp	r0, #10
   3bc18:	f8df c07c 	ldr.w	ip, [pc, #124]	; 3bc98 <__b2d+0xa0>
   3bc1c:	600b      	str	r3, [r1, #0]
   3bc1e:	dc16      	bgt.n	3bc4e <__b2d+0x56>
   3bc20:	f1c0 0e0b 	rsb	lr, r0, #11
   3bc24:	45b8      	cmp	r8, r7
   3bc26:	fa22 f30e 	lsr.w	r3, r2, lr
   3bc2a:	bf34      	ite	cc
   3bc2c:	f856 1c08 	ldrcc.w	r1, [r6, #-8]
   3bc30:	2100      	movcs	r1, #0
   3bc32:	ea43 050c 	orr.w	r5, r3, ip
   3bc36:	f100 0315 	add.w	r3, r0, #21
   3bc3a:	fa21 f10e 	lsr.w	r1, r1, lr
   3bc3e:	fa02 f303 	lsl.w	r3, r2, r3
   3bc42:	ea43 0401 	orr.w	r4, r3, r1
   3bc46:	4620      	mov	r0, r4
   3bc48:	4629      	mov	r1, r5
   3bc4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3bc4e:	45b8      	cmp	r8, r7
   3bc50:	bf3a      	itte	cc
   3bc52:	f1a6 0708 	subcc.w	r7, r6, #8
   3bc56:	f856 1c08 	ldrcc.w	r1, [r6, #-8]
   3bc5a:	2100      	movcs	r1, #0
   3bc5c:	f1b0 030b 	subs.w	r3, r0, #11
   3bc60:	d016      	beq.n	3bc90 <__b2d+0x98>
   3bc62:	f1c3 0620 	rsb	r6, r3, #32
   3bc66:	fa02 f003 	lsl.w	r0, r2, r3
   3bc6a:	4547      	cmp	r7, r8
   3bc6c:	fa21 f206 	lsr.w	r2, r1, r6
   3bc70:	ea40 0002 	orr.w	r0, r0, r2
   3bc74:	bf8c      	ite	hi
   3bc76:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
   3bc7a:	2200      	movls	r2, #0
   3bc7c:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
   3bc80:	fa01 f003 	lsl.w	r0, r1, r3
   3bc84:	40f2      	lsrs	r2, r6
   3bc86:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   3bc8a:	ea40 0402 	orr.w	r4, r0, r2
   3bc8e:	e7da      	b.n	3bc46 <__b2d+0x4e>
   3bc90:	ea42 050c 	orr.w	r5, r2, ip
   3bc94:	460c      	mov	r4, r1
   3bc96:	e7d6      	b.n	3bc46 <__b2d+0x4e>
   3bc98:	3ff00000 	.word	0x3ff00000

0003bc9c <__d2b>:
   3bc9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3bca0:	2101      	movs	r1, #1
   3bca2:	4690      	mov	r8, r2
   3bca4:	4699      	mov	r9, r3
   3bca6:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
   3bcaa:	f7ff fc75 	bl	3b598 <_Balloc>
   3bcae:	4604      	mov	r4, r0
   3bcb0:	b930      	cbnz	r0, 3bcc0 <__d2b+0x24>
   3bcb2:	4602      	mov	r2, r0
   3bcb4:	4b24      	ldr	r3, [pc, #144]	; (3bd48 <__d2b+0xac>)
   3bcb6:	f240 310a 	movw	r1, #778	; 0x30a
   3bcba:	4824      	ldr	r0, [pc, #144]	; (3bd4c <__d2b+0xb0>)
   3bcbc:	f7fd fea2 	bl	39a04 <__assert_func>
   3bcc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
   3bcc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
   3bcc8:	bb2d      	cbnz	r5, 3bd16 <__d2b+0x7a>
   3bcca:	f1b8 0200 	subs.w	r2, r8, #0
   3bcce:	9301      	str	r3, [sp, #4]
   3bcd0:	d026      	beq.n	3bd20 <__d2b+0x84>
   3bcd2:	4668      	mov	r0, sp
   3bcd4:	9200      	str	r2, [sp, #0]
   3bcd6:	f006 f891 	bl	41dfc <__lo0bits>
   3bcda:	9900      	ldr	r1, [sp, #0]
   3bcdc:	b1f0      	cbz	r0, 3bd1c <__d2b+0x80>
   3bcde:	9a01      	ldr	r2, [sp, #4]
   3bce0:	f1c0 0320 	rsb	r3, r0, #32
   3bce4:	fa02 f303 	lsl.w	r3, r2, r3
   3bce8:	40c2      	lsrs	r2, r0
   3bcea:	430b      	orrs	r3, r1
   3bcec:	9201      	str	r2, [sp, #4]
   3bcee:	6163      	str	r3, [r4, #20]
   3bcf0:	9b01      	ldr	r3, [sp, #4]
   3bcf2:	2b00      	cmp	r3, #0
   3bcf4:	61a3      	str	r3, [r4, #24]
   3bcf6:	bf14      	ite	ne
   3bcf8:	2202      	movne	r2, #2
   3bcfa:	2201      	moveq	r2, #1
   3bcfc:	6122      	str	r2, [r4, #16]
   3bcfe:	b1c5      	cbz	r5, 3bd32 <__d2b+0x96>
   3bd00:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   3bd04:	4405      	add	r5, r0
   3bd06:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   3bd0a:	603d      	str	r5, [r7, #0]
   3bd0c:	6030      	str	r0, [r6, #0]
   3bd0e:	4620      	mov	r0, r4
   3bd10:	b003      	add	sp, #12
   3bd12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3bd16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3bd1a:	e7d6      	b.n	3bcca <__d2b+0x2e>
   3bd1c:	6161      	str	r1, [r4, #20]
   3bd1e:	e7e7      	b.n	3bcf0 <__d2b+0x54>
   3bd20:	a801      	add	r0, sp, #4
   3bd22:	f006 f86b 	bl	41dfc <__lo0bits>
   3bd26:	9b01      	ldr	r3, [sp, #4]
   3bd28:	2201      	movs	r2, #1
   3bd2a:	3020      	adds	r0, #32
   3bd2c:	6163      	str	r3, [r4, #20]
   3bd2e:	6122      	str	r2, [r4, #16]
   3bd30:	e7e5      	b.n	3bcfe <__d2b+0x62>
   3bd32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   3bd36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   3bd3a:	6038      	str	r0, [r7, #0]
   3bd3c:	6918      	ldr	r0, [r3, #16]
   3bd3e:	f006 f83d 	bl	41dbc <__hi0bits>
   3bd42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   3bd46:	e7e1      	b.n	3bd0c <__d2b+0x70>
   3bd48:	0004bf1e 	.word	0x0004bf1e
   3bd4c:	0004bfb5 	.word	0x0004bfb5

0003bd50 <_svfiprintf_r>:
   3bd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bd54:	4698      	mov	r8, r3
   3bd56:	898b      	ldrh	r3, [r1, #12]
   3bd58:	b09d      	sub	sp, #116	; 0x74
   3bd5a:	4607      	mov	r7, r0
   3bd5c:	061b      	lsls	r3, r3, #24
   3bd5e:	460d      	mov	r5, r1
   3bd60:	4614      	mov	r4, r2
   3bd62:	d50e      	bpl.n	3bd82 <_svfiprintf_r+0x32>
   3bd64:	690b      	ldr	r3, [r1, #16]
   3bd66:	b963      	cbnz	r3, 3bd82 <_svfiprintf_r+0x32>
   3bd68:	2140      	movs	r1, #64	; 0x40
   3bd6a:	f7fd ff83 	bl	39c74 <_malloc_r>
   3bd6e:	6028      	str	r0, [r5, #0]
   3bd70:	6128      	str	r0, [r5, #16]
   3bd72:	b920      	cbnz	r0, 3bd7e <_svfiprintf_r+0x2e>
   3bd74:	230c      	movs	r3, #12
   3bd76:	603b      	str	r3, [r7, #0]
   3bd78:	f04f 30ff 	mov.w	r0, #4294967295
   3bd7c:	e0d1      	b.n	3bf22 <_svfiprintf_r+0x1d2>
   3bd7e:	2340      	movs	r3, #64	; 0x40
   3bd80:	616b      	str	r3, [r5, #20]
   3bd82:	2300      	movs	r3, #0
   3bd84:	f8cd 800c 	str.w	r8, [sp, #12]
   3bd88:	f04f 0901 	mov.w	r9, #1
   3bd8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 3bf3c <_svfiprintf_r+0x1ec>
   3bd90:	9309      	str	r3, [sp, #36]	; 0x24
   3bd92:	2320      	movs	r3, #32
   3bd94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3bd98:	2330      	movs	r3, #48	; 0x30
   3bd9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3bd9e:	4623      	mov	r3, r4
   3bda0:	469a      	mov	sl, r3
   3bda2:	f813 2b01 	ldrb.w	r2, [r3], #1
   3bda6:	b10a      	cbz	r2, 3bdac <_svfiprintf_r+0x5c>
   3bda8:	2a25      	cmp	r2, #37	; 0x25
   3bdaa:	d1f9      	bne.n	3bda0 <_svfiprintf_r+0x50>
   3bdac:	ebba 0b04 	subs.w	fp, sl, r4
   3bdb0:	d00b      	beq.n	3bdca <_svfiprintf_r+0x7a>
   3bdb2:	465b      	mov	r3, fp
   3bdb4:	4622      	mov	r2, r4
   3bdb6:	4629      	mov	r1, r5
   3bdb8:	4638      	mov	r0, r7
   3bdba:	f006 f902 	bl	41fc2 <__ssputs_r>
   3bdbe:	3001      	adds	r0, #1
   3bdc0:	f000 80aa 	beq.w	3bf18 <_svfiprintf_r+0x1c8>
   3bdc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3bdc6:	445a      	add	r2, fp
   3bdc8:	9209      	str	r2, [sp, #36]	; 0x24
   3bdca:	f89a 3000 	ldrb.w	r3, [sl]
   3bdce:	2b00      	cmp	r3, #0
   3bdd0:	f000 80a2 	beq.w	3bf18 <_svfiprintf_r+0x1c8>
   3bdd4:	2300      	movs	r3, #0
   3bdd6:	f04f 32ff 	mov.w	r2, #4294967295
   3bdda:	f10a 0a01 	add.w	sl, sl, #1
   3bdde:	9304      	str	r3, [sp, #16]
   3bde0:	9307      	str	r3, [sp, #28]
   3bde2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3bde6:	931a      	str	r3, [sp, #104]	; 0x68
   3bde8:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3bdec:	4654      	mov	r4, sl
   3bdee:	2205      	movs	r2, #5
   3bdf0:	4852      	ldr	r0, [pc, #328]	; (3bf3c <_svfiprintf_r+0x1ec>)
   3bdf2:	f814 1b01 	ldrb.w	r1, [r4], #1
   3bdf6:	f005 fadf 	bl	413b8 <memchr>
   3bdfa:	9a04      	ldr	r2, [sp, #16]
   3bdfc:	b9d8      	cbnz	r0, 3be36 <_svfiprintf_r+0xe6>
   3bdfe:	06d0      	lsls	r0, r2, #27
   3be00:	bf44      	itt	mi
   3be02:	2320      	movmi	r3, #32
   3be04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3be08:	0711      	lsls	r1, r2, #28
   3be0a:	bf44      	itt	mi
   3be0c:	232b      	movmi	r3, #43	; 0x2b
   3be0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3be12:	f89a 3000 	ldrb.w	r3, [sl]
   3be16:	2b2a      	cmp	r3, #42	; 0x2a
   3be18:	d015      	beq.n	3be46 <_svfiprintf_r+0xf6>
   3be1a:	9a07      	ldr	r2, [sp, #28]
   3be1c:	4654      	mov	r4, sl
   3be1e:	2000      	movs	r0, #0
   3be20:	f04f 0c0a 	mov.w	ip, #10
   3be24:	4621      	mov	r1, r4
   3be26:	f811 3b01 	ldrb.w	r3, [r1], #1
   3be2a:	3b30      	subs	r3, #48	; 0x30
   3be2c:	2b09      	cmp	r3, #9
   3be2e:	d94e      	bls.n	3bece <_svfiprintf_r+0x17e>
   3be30:	b1b0      	cbz	r0, 3be60 <_svfiprintf_r+0x110>
   3be32:	9207      	str	r2, [sp, #28]
   3be34:	e014      	b.n	3be60 <_svfiprintf_r+0x110>
   3be36:	eba0 0308 	sub.w	r3, r0, r8
   3be3a:	46a2      	mov	sl, r4
   3be3c:	fa09 f303 	lsl.w	r3, r9, r3
   3be40:	4313      	orrs	r3, r2
   3be42:	9304      	str	r3, [sp, #16]
   3be44:	e7d2      	b.n	3bdec <_svfiprintf_r+0x9c>
   3be46:	9b03      	ldr	r3, [sp, #12]
   3be48:	1d19      	adds	r1, r3, #4
   3be4a:	681b      	ldr	r3, [r3, #0]
   3be4c:	2b00      	cmp	r3, #0
   3be4e:	9103      	str	r1, [sp, #12]
   3be50:	bfbb      	ittet	lt
   3be52:	425b      	neglt	r3, r3
   3be54:	f042 0202 	orrlt.w	r2, r2, #2
   3be58:	9307      	strge	r3, [sp, #28]
   3be5a:	9307      	strlt	r3, [sp, #28]
   3be5c:	bfb8      	it	lt
   3be5e:	9204      	strlt	r2, [sp, #16]
   3be60:	7823      	ldrb	r3, [r4, #0]
   3be62:	2b2e      	cmp	r3, #46	; 0x2e
   3be64:	d10c      	bne.n	3be80 <_svfiprintf_r+0x130>
   3be66:	7863      	ldrb	r3, [r4, #1]
   3be68:	2b2a      	cmp	r3, #42	; 0x2a
   3be6a:	d135      	bne.n	3bed8 <_svfiprintf_r+0x188>
   3be6c:	9b03      	ldr	r3, [sp, #12]
   3be6e:	3402      	adds	r4, #2
   3be70:	1d1a      	adds	r2, r3, #4
   3be72:	681b      	ldr	r3, [r3, #0]
   3be74:	2b00      	cmp	r3, #0
   3be76:	9203      	str	r2, [sp, #12]
   3be78:	bfb8      	it	lt
   3be7a:	f04f 33ff 	movlt.w	r3, #4294967295
   3be7e:	9305      	str	r3, [sp, #20]
   3be80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3bf4c <_svfiprintf_r+0x1fc>
   3be84:	2203      	movs	r2, #3
   3be86:	7821      	ldrb	r1, [r4, #0]
   3be88:	4650      	mov	r0, sl
   3be8a:	f005 fa95 	bl	413b8 <memchr>
   3be8e:	b140      	cbz	r0, 3bea2 <_svfiprintf_r+0x152>
   3be90:	2340      	movs	r3, #64	; 0x40
   3be92:	eba0 000a 	sub.w	r0, r0, sl
   3be96:	3401      	adds	r4, #1
   3be98:	fa03 f000 	lsl.w	r0, r3, r0
   3be9c:	9b04      	ldr	r3, [sp, #16]
   3be9e:	4303      	orrs	r3, r0
   3bea0:	9304      	str	r3, [sp, #16]
   3bea2:	f814 1b01 	ldrb.w	r1, [r4], #1
   3bea6:	2206      	movs	r2, #6
   3bea8:	4825      	ldr	r0, [pc, #148]	; (3bf40 <_svfiprintf_r+0x1f0>)
   3beaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3beae:	f005 fa83 	bl	413b8 <memchr>
   3beb2:	2800      	cmp	r0, #0
   3beb4:	d038      	beq.n	3bf28 <_svfiprintf_r+0x1d8>
   3beb6:	4b23      	ldr	r3, [pc, #140]	; (3bf44 <_svfiprintf_r+0x1f4>)
   3beb8:	bb1b      	cbnz	r3, 3bf02 <_svfiprintf_r+0x1b2>
   3beba:	9b03      	ldr	r3, [sp, #12]
   3bebc:	3307      	adds	r3, #7
   3bebe:	f023 0307 	bic.w	r3, r3, #7
   3bec2:	3308      	adds	r3, #8
   3bec4:	9303      	str	r3, [sp, #12]
   3bec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3bec8:	4433      	add	r3, r6
   3beca:	9309      	str	r3, [sp, #36]	; 0x24
   3becc:	e767      	b.n	3bd9e <_svfiprintf_r+0x4e>
   3bece:	fb0c 3202 	mla	r2, ip, r2, r3
   3bed2:	460c      	mov	r4, r1
   3bed4:	2001      	movs	r0, #1
   3bed6:	e7a5      	b.n	3be24 <_svfiprintf_r+0xd4>
   3bed8:	2300      	movs	r3, #0
   3beda:	3401      	adds	r4, #1
   3bedc:	f04f 0c0a 	mov.w	ip, #10
   3bee0:	4619      	mov	r1, r3
   3bee2:	9305      	str	r3, [sp, #20]
   3bee4:	4620      	mov	r0, r4
   3bee6:	f810 2b01 	ldrb.w	r2, [r0], #1
   3beea:	3a30      	subs	r2, #48	; 0x30
   3beec:	2a09      	cmp	r2, #9
   3beee:	d903      	bls.n	3bef8 <_svfiprintf_r+0x1a8>
   3bef0:	2b00      	cmp	r3, #0
   3bef2:	d0c5      	beq.n	3be80 <_svfiprintf_r+0x130>
   3bef4:	9105      	str	r1, [sp, #20]
   3bef6:	e7c3      	b.n	3be80 <_svfiprintf_r+0x130>
   3bef8:	fb0c 2101 	mla	r1, ip, r1, r2
   3befc:	4604      	mov	r4, r0
   3befe:	2301      	movs	r3, #1
   3bf00:	e7f0      	b.n	3bee4 <_svfiprintf_r+0x194>
   3bf02:	ab03      	add	r3, sp, #12
   3bf04:	462a      	mov	r2, r5
   3bf06:	a904      	add	r1, sp, #16
   3bf08:	4638      	mov	r0, r7
   3bf0a:	9300      	str	r3, [sp, #0]
   3bf0c:	4b0e      	ldr	r3, [pc, #56]	; (3bf48 <_svfiprintf_r+0x1f8>)
   3bf0e:	f7fe f83b 	bl	39f88 <_printf_float>
   3bf12:	1c42      	adds	r2, r0, #1
   3bf14:	4606      	mov	r6, r0
   3bf16:	d1d6      	bne.n	3bec6 <_svfiprintf_r+0x176>
   3bf18:	89ab      	ldrh	r3, [r5, #12]
   3bf1a:	065b      	lsls	r3, r3, #25
   3bf1c:	f53f af2c 	bmi.w	3bd78 <_svfiprintf_r+0x28>
   3bf20:	9809      	ldr	r0, [sp, #36]	; 0x24
   3bf22:	b01d      	add	sp, #116	; 0x74
   3bf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bf28:	ab03      	add	r3, sp, #12
   3bf2a:	462a      	mov	r2, r5
   3bf2c:	a904      	add	r1, sp, #16
   3bf2e:	4638      	mov	r0, r7
   3bf30:	9300      	str	r3, [sp, #0]
   3bf32:	4b05      	ldr	r3, [pc, #20]	; (3bf48 <_svfiprintf_r+0x1f8>)
   3bf34:	f7fe fa60 	bl	3a3f8 <_printf_i>
   3bf38:	e7eb      	b.n	3bf12 <_svfiprintf_r+0x1c2>
   3bf3a:	bf00      	nop
   3bf3c:	0004be43 	.word	0x0004be43
   3bf40:	0004be4d 	.word	0x0004be4d
   3bf44:	00039f89 	.word	0x00039f89
   3bf48:	00041fc3 	.word	0x00041fc3
   3bf4c:	0004be49 	.word	0x0004be49

0003bf50 <__ssvfiscanf_r>:
   3bf50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3bf54:	460c      	mov	r4, r1
   3bf56:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   3bf5a:	2100      	movs	r1, #0
   3bf5c:	4606      	mov	r6, r0
   3bf5e:	f10d 0804 	add.w	r8, sp, #4
   3bf62:	4fa8      	ldr	r7, [pc, #672]	; (3c204 <__ssvfiscanf_r+0x2b4>)
   3bf64:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 3c210 <__ssvfiscanf_r+0x2c0>
   3bf68:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   3bf6c:	9300      	str	r3, [sp, #0]
   3bf6e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   3bf72:	49a5      	ldr	r1, [pc, #660]	; (3c208 <__ssvfiscanf_r+0x2b8>)
   3bf74:	91a0      	str	r1, [sp, #640]	; 0x280
   3bf76:	49a5      	ldr	r1, [pc, #660]	; (3c20c <__ssvfiscanf_r+0x2bc>)
   3bf78:	91a1      	str	r1, [sp, #644]	; 0x284
   3bf7a:	7813      	ldrb	r3, [r2, #0]
   3bf7c:	2b00      	cmp	r3, #0
   3bf7e:	f000 815e 	beq.w	3c23e <__ssvfiscanf_r+0x2ee>
   3bf82:	5dd9      	ldrb	r1, [r3, r7]
   3bf84:	1c55      	adds	r5, r2, #1
   3bf86:	f011 0108 	ands.w	r1, r1, #8
   3bf8a:	d019      	beq.n	3bfc0 <__ssvfiscanf_r+0x70>
   3bf8c:	6863      	ldr	r3, [r4, #4]
   3bf8e:	2b00      	cmp	r3, #0
   3bf90:	dd0f      	ble.n	3bfb2 <__ssvfiscanf_r+0x62>
   3bf92:	6823      	ldr	r3, [r4, #0]
   3bf94:	781a      	ldrb	r2, [r3, #0]
   3bf96:	5cba      	ldrb	r2, [r7, r2]
   3bf98:	0712      	lsls	r2, r2, #28
   3bf9a:	d401      	bmi.n	3bfa0 <__ssvfiscanf_r+0x50>
   3bf9c:	462a      	mov	r2, r5
   3bf9e:	e7ec      	b.n	3bf7a <__ssvfiscanf_r+0x2a>
   3bfa0:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3bfa2:	3301      	adds	r3, #1
   3bfa4:	3201      	adds	r2, #1
   3bfa6:	6023      	str	r3, [r4, #0]
   3bfa8:	9245      	str	r2, [sp, #276]	; 0x114
   3bfaa:	6862      	ldr	r2, [r4, #4]
   3bfac:	3a01      	subs	r2, #1
   3bfae:	6062      	str	r2, [r4, #4]
   3bfb0:	e7ec      	b.n	3bf8c <__ssvfiscanf_r+0x3c>
   3bfb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3bfb4:	4621      	mov	r1, r4
   3bfb6:	4630      	mov	r0, r6
   3bfb8:	4798      	blx	r3
   3bfba:	2800      	cmp	r0, #0
   3bfbc:	d0e9      	beq.n	3bf92 <__ssvfiscanf_r+0x42>
   3bfbe:	e7ed      	b.n	3bf9c <__ssvfiscanf_r+0x4c>
   3bfc0:	2b25      	cmp	r3, #37	; 0x25
   3bfc2:	d012      	beq.n	3bfea <__ssvfiscanf_r+0x9a>
   3bfc4:	469a      	mov	sl, r3
   3bfc6:	6863      	ldr	r3, [r4, #4]
   3bfc8:	2b00      	cmp	r3, #0
   3bfca:	f340 8094 	ble.w	3c0f6 <__ssvfiscanf_r+0x1a6>
   3bfce:	6822      	ldr	r2, [r4, #0]
   3bfd0:	7813      	ldrb	r3, [r2, #0]
   3bfd2:	4553      	cmp	r3, sl
   3bfd4:	f040 8133 	bne.w	3c23e <__ssvfiscanf_r+0x2ee>
   3bfd8:	6863      	ldr	r3, [r4, #4]
   3bfda:	3201      	adds	r2, #1
   3bfdc:	3b01      	subs	r3, #1
   3bfde:	6022      	str	r2, [r4, #0]
   3bfe0:	6063      	str	r3, [r4, #4]
   3bfe2:	9b45      	ldr	r3, [sp, #276]	; 0x114
   3bfe4:	3301      	adds	r3, #1
   3bfe6:	9345      	str	r3, [sp, #276]	; 0x114
   3bfe8:	e7d8      	b.n	3bf9c <__ssvfiscanf_r+0x4c>
   3bfea:	9141      	str	r1, [sp, #260]	; 0x104
   3bfec:	9143      	str	r1, [sp, #268]	; 0x10c
   3bfee:	7853      	ldrb	r3, [r2, #1]
   3bff0:	2b2a      	cmp	r3, #42	; 0x2a
   3bff2:	bf04      	itt	eq
   3bff4:	2310      	moveq	r3, #16
   3bff6:	1c95      	addeq	r5, r2, #2
   3bff8:	f04f 020a 	mov.w	r2, #10
   3bffc:	bf08      	it	eq
   3bffe:	9341      	streq	r3, [sp, #260]	; 0x104
   3c000:	46aa      	mov	sl, r5
   3c002:	f81a 1b01 	ldrb.w	r1, [sl], #1
   3c006:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3c00a:	2b09      	cmp	r3, #9
   3c00c:	d91d      	bls.n	3c04a <__ssvfiscanf_r+0xfa>
   3c00e:	2203      	movs	r2, #3
   3c010:	487f      	ldr	r0, [pc, #508]	; (3c210 <__ssvfiscanf_r+0x2c0>)
   3c012:	f005 f9d1 	bl	413b8 <memchr>
   3c016:	b140      	cbz	r0, 3c02a <__ssvfiscanf_r+0xda>
   3c018:	2301      	movs	r3, #1
   3c01a:	eba0 0009 	sub.w	r0, r0, r9
   3c01e:	4655      	mov	r5, sl
   3c020:	fa03 f000 	lsl.w	r0, r3, r0
   3c024:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c026:	4318      	orrs	r0, r3
   3c028:	9041      	str	r0, [sp, #260]	; 0x104
   3c02a:	f815 3b01 	ldrb.w	r3, [r5], #1
   3c02e:	2b78      	cmp	r3, #120	; 0x78
   3c030:	d806      	bhi.n	3c040 <__ssvfiscanf_r+0xf0>
   3c032:	2b57      	cmp	r3, #87	; 0x57
   3c034:	d810      	bhi.n	3c058 <__ssvfiscanf_r+0x108>
   3c036:	2b25      	cmp	r3, #37	; 0x25
   3c038:	d0c4      	beq.n	3bfc4 <__ssvfiscanf_r+0x74>
   3c03a:	d857      	bhi.n	3c0ec <__ssvfiscanf_r+0x19c>
   3c03c:	2b00      	cmp	r3, #0
   3c03e:	d065      	beq.n	3c10c <__ssvfiscanf_r+0x1bc>
   3c040:	2303      	movs	r3, #3
   3c042:	9347      	str	r3, [sp, #284]	; 0x11c
   3c044:	230a      	movs	r3, #10
   3c046:	9342      	str	r3, [sp, #264]	; 0x108
   3c048:	e072      	b.n	3c130 <__ssvfiscanf_r+0x1e0>
   3c04a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   3c04c:	4655      	mov	r5, sl
   3c04e:	fb02 1103 	mla	r1, r2, r3, r1
   3c052:	3930      	subs	r1, #48	; 0x30
   3c054:	9143      	str	r1, [sp, #268]	; 0x10c
   3c056:	e7d3      	b.n	3c000 <__ssvfiscanf_r+0xb0>
   3c058:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   3c05c:	2a20      	cmp	r2, #32
   3c05e:	d8ef      	bhi.n	3c040 <__ssvfiscanf_r+0xf0>
   3c060:	a101      	add	r1, pc, #4	; (adr r1, 3c068 <__ssvfiscanf_r+0x118>)
   3c062:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   3c066:	bf00      	nop
   3c068:	0003c11b 	.word	0x0003c11b
   3c06c:	0003c041 	.word	0x0003c041
   3c070:	0003c041 	.word	0x0003c041
   3c074:	0003c179 	.word	0x0003c179
   3c078:	0003c041 	.word	0x0003c041
   3c07c:	0003c041 	.word	0x0003c041
   3c080:	0003c041 	.word	0x0003c041
   3c084:	0003c041 	.word	0x0003c041
   3c088:	0003c041 	.word	0x0003c041
   3c08c:	0003c041 	.word	0x0003c041
   3c090:	0003c041 	.word	0x0003c041
   3c094:	0003c18f 	.word	0x0003c18f
   3c098:	0003c165 	.word	0x0003c165
   3c09c:	0003c0f3 	.word	0x0003c0f3
   3c0a0:	0003c0f3 	.word	0x0003c0f3
   3c0a4:	0003c0f3 	.word	0x0003c0f3
   3c0a8:	0003c041 	.word	0x0003c041
   3c0ac:	0003c169 	.word	0x0003c169
   3c0b0:	0003c041 	.word	0x0003c041
   3c0b4:	0003c041 	.word	0x0003c041
   3c0b8:	0003c041 	.word	0x0003c041
   3c0bc:	0003c041 	.word	0x0003c041
   3c0c0:	0003c19f 	.word	0x0003c19f
   3c0c4:	0003c171 	.word	0x0003c171
   3c0c8:	0003c113 	.word	0x0003c113
   3c0cc:	0003c041 	.word	0x0003c041
   3c0d0:	0003c041 	.word	0x0003c041
   3c0d4:	0003c19b 	.word	0x0003c19b
   3c0d8:	0003c041 	.word	0x0003c041
   3c0dc:	0003c165 	.word	0x0003c165
   3c0e0:	0003c041 	.word	0x0003c041
   3c0e4:	0003c041 	.word	0x0003c041
   3c0e8:	0003c11b 	.word	0x0003c11b
   3c0ec:	3b45      	subs	r3, #69	; 0x45
   3c0ee:	2b02      	cmp	r3, #2
   3c0f0:	d8a6      	bhi.n	3c040 <__ssvfiscanf_r+0xf0>
   3c0f2:	2305      	movs	r3, #5
   3c0f4:	e01b      	b.n	3c12e <__ssvfiscanf_r+0x1de>
   3c0f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c0f8:	4621      	mov	r1, r4
   3c0fa:	4630      	mov	r0, r6
   3c0fc:	4798      	blx	r3
   3c0fe:	2800      	cmp	r0, #0
   3c100:	f43f af65 	beq.w	3bfce <__ssvfiscanf_r+0x7e>
   3c104:	9844      	ldr	r0, [sp, #272]	; 0x110
   3c106:	2800      	cmp	r0, #0
   3c108:	f040 808f 	bne.w	3c22a <__ssvfiscanf_r+0x2da>
   3c10c:	f04f 30ff 	mov.w	r0, #4294967295
   3c110:	e091      	b.n	3c236 <__ssvfiscanf_r+0x2e6>
   3c112:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3c114:	f042 0220 	orr.w	r2, r2, #32
   3c118:	9241      	str	r2, [sp, #260]	; 0x104
   3c11a:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3c11c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3c120:	9241      	str	r2, [sp, #260]	; 0x104
   3c122:	2210      	movs	r2, #16
   3c124:	2b6f      	cmp	r3, #111	; 0x6f
   3c126:	9242      	str	r2, [sp, #264]	; 0x108
   3c128:	bf34      	ite	cc
   3c12a:	2303      	movcc	r3, #3
   3c12c:	2304      	movcs	r3, #4
   3c12e:	9347      	str	r3, [sp, #284]	; 0x11c
   3c130:	6863      	ldr	r3, [r4, #4]
   3c132:	2b00      	cmp	r3, #0
   3c134:	dd43      	ble.n	3c1be <__ssvfiscanf_r+0x26e>
   3c136:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c138:	0659      	lsls	r1, r3, #25
   3c13a:	d404      	bmi.n	3c146 <__ssvfiscanf_r+0x1f6>
   3c13c:	6823      	ldr	r3, [r4, #0]
   3c13e:	781a      	ldrb	r2, [r3, #0]
   3c140:	5cba      	ldrb	r2, [r7, r2]
   3c142:	0712      	lsls	r2, r2, #28
   3c144:	d442      	bmi.n	3c1cc <__ssvfiscanf_r+0x27c>
   3c146:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   3c148:	2b02      	cmp	r3, #2
   3c14a:	dc51      	bgt.n	3c1f0 <__ssvfiscanf_r+0x2a0>
   3c14c:	466b      	mov	r3, sp
   3c14e:	4622      	mov	r2, r4
   3c150:	a941      	add	r1, sp, #260	; 0x104
   3c152:	4630      	mov	r0, r6
   3c154:	f000 f878 	bl	3c248 <_scanf_chars>
   3c158:	2801      	cmp	r0, #1
   3c15a:	d070      	beq.n	3c23e <__ssvfiscanf_r+0x2ee>
   3c15c:	2802      	cmp	r0, #2
   3c15e:	f47f af1d 	bne.w	3bf9c <__ssvfiscanf_r+0x4c>
   3c162:	e7cf      	b.n	3c104 <__ssvfiscanf_r+0x1b4>
   3c164:	220a      	movs	r2, #10
   3c166:	e7dd      	b.n	3c124 <__ssvfiscanf_r+0x1d4>
   3c168:	2300      	movs	r3, #0
   3c16a:	9342      	str	r3, [sp, #264]	; 0x108
   3c16c:	2303      	movs	r3, #3
   3c16e:	e7de      	b.n	3c12e <__ssvfiscanf_r+0x1de>
   3c170:	2308      	movs	r3, #8
   3c172:	9342      	str	r3, [sp, #264]	; 0x108
   3c174:	2304      	movs	r3, #4
   3c176:	e7da      	b.n	3c12e <__ssvfiscanf_r+0x1de>
   3c178:	4629      	mov	r1, r5
   3c17a:	4640      	mov	r0, r8
   3c17c:	f005 ffd6 	bl	4212c <__sccl>
   3c180:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c182:	4605      	mov	r5, r0
   3c184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3c188:	9341      	str	r3, [sp, #260]	; 0x104
   3c18a:	2301      	movs	r3, #1
   3c18c:	e7cf      	b.n	3c12e <__ssvfiscanf_r+0x1de>
   3c18e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3c194:	9341      	str	r3, [sp, #260]	; 0x104
   3c196:	2300      	movs	r3, #0
   3c198:	e7c9      	b.n	3c12e <__ssvfiscanf_r+0x1de>
   3c19a:	2302      	movs	r3, #2
   3c19c:	e7c7      	b.n	3c12e <__ssvfiscanf_r+0x1de>
   3c19e:	9841      	ldr	r0, [sp, #260]	; 0x104
   3c1a0:	06c3      	lsls	r3, r0, #27
   3c1a2:	f53f aefb 	bmi.w	3bf9c <__ssvfiscanf_r+0x4c>
   3c1a6:	9b00      	ldr	r3, [sp, #0]
   3c1a8:	f010 0f01 	tst.w	r0, #1
   3c1ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3c1ae:	f103 0104 	add.w	r1, r3, #4
   3c1b2:	9100      	str	r1, [sp, #0]
   3c1b4:	681b      	ldr	r3, [r3, #0]
   3c1b6:	bf14      	ite	ne
   3c1b8:	801a      	strhne	r2, [r3, #0]
   3c1ba:	601a      	streq	r2, [r3, #0]
   3c1bc:	e6ee      	b.n	3bf9c <__ssvfiscanf_r+0x4c>
   3c1be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c1c0:	4621      	mov	r1, r4
   3c1c2:	4630      	mov	r0, r6
   3c1c4:	4798      	blx	r3
   3c1c6:	2800      	cmp	r0, #0
   3c1c8:	d0b5      	beq.n	3c136 <__ssvfiscanf_r+0x1e6>
   3c1ca:	e79b      	b.n	3c104 <__ssvfiscanf_r+0x1b4>
   3c1cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3c1ce:	3201      	adds	r2, #1
   3c1d0:	9245      	str	r2, [sp, #276]	; 0x114
   3c1d2:	6862      	ldr	r2, [r4, #4]
   3c1d4:	3a01      	subs	r2, #1
   3c1d6:	2a00      	cmp	r2, #0
   3c1d8:	6062      	str	r2, [r4, #4]
   3c1da:	dd02      	ble.n	3c1e2 <__ssvfiscanf_r+0x292>
   3c1dc:	3301      	adds	r3, #1
   3c1de:	6023      	str	r3, [r4, #0]
   3c1e0:	e7ac      	b.n	3c13c <__ssvfiscanf_r+0x1ec>
   3c1e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c1e4:	4621      	mov	r1, r4
   3c1e6:	4630      	mov	r0, r6
   3c1e8:	4798      	blx	r3
   3c1ea:	2800      	cmp	r0, #0
   3c1ec:	d0a6      	beq.n	3c13c <__ssvfiscanf_r+0x1ec>
   3c1ee:	e789      	b.n	3c104 <__ssvfiscanf_r+0x1b4>
   3c1f0:	2b04      	cmp	r3, #4
   3c1f2:	dc0f      	bgt.n	3c214 <__ssvfiscanf_r+0x2c4>
   3c1f4:	466b      	mov	r3, sp
   3c1f6:	4622      	mov	r2, r4
   3c1f8:	a941      	add	r1, sp, #260	; 0x104
   3c1fa:	4630      	mov	r0, r6
   3c1fc:	f000 f87e 	bl	3c2fc <_scanf_i>
   3c200:	e7aa      	b.n	3c158 <__ssvfiscanf_r+0x208>
   3c202:	bf00      	nop
   3c204:	0004bd43 	.word	0x0004bd43
   3c208:	00042079 	.word	0x00042079
   3c20c:	000420f3 	.word	0x000420f3
   3c210:	0004be49 	.word	0x0004be49
   3c214:	4b0b      	ldr	r3, [pc, #44]	; (3c244 <__ssvfiscanf_r+0x2f4>)
   3c216:	2b00      	cmp	r3, #0
   3c218:	f43f aec0 	beq.w	3bf9c <__ssvfiscanf_r+0x4c>
   3c21c:	466b      	mov	r3, sp
   3c21e:	4622      	mov	r2, r4
   3c220:	a941      	add	r1, sp, #260	; 0x104
   3c222:	4630      	mov	r0, r6
   3c224:	e000      	b.n	3c228 <__ssvfiscanf_r+0x2d8>
   3c226:	bf00      	nop
   3c228:	e796      	b.n	3c158 <__ssvfiscanf_r+0x208>
   3c22a:	89a3      	ldrh	r3, [r4, #12]
   3c22c:	f013 0f40 	tst.w	r3, #64	; 0x40
   3c230:	bf18      	it	ne
   3c232:	f04f 30ff 	movne.w	r0, #4294967295
   3c236:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   3c23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3c23e:	9844      	ldr	r0, [sp, #272]	; 0x110
   3c240:	e7f9      	b.n	3c236 <__ssvfiscanf_r+0x2e6>
   3c242:	bf00      	nop
   3c244:	00000000 	.word	0x00000000

0003c248 <_scanf_chars>:
   3c248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c24c:	4615      	mov	r5, r2
   3c24e:	688a      	ldr	r2, [r1, #8]
   3c250:	4680      	mov	r8, r0
   3c252:	460c      	mov	r4, r1
   3c254:	b932      	cbnz	r2, 3c264 <_scanf_chars+0x1c>
   3c256:	698a      	ldr	r2, [r1, #24]
   3c258:	2a00      	cmp	r2, #0
   3c25a:	bf0c      	ite	eq
   3c25c:	2201      	moveq	r2, #1
   3c25e:	f04f 32ff 	movne.w	r2, #4294967295
   3c262:	608a      	str	r2, [r1, #8]
   3c264:	6822      	ldr	r2, [r4, #0]
   3c266:	2700      	movs	r7, #0
   3c268:	f8df 908c 	ldr.w	r9, [pc, #140]	; 3c2f8 <_scanf_chars+0xb0>
   3c26c:	06d1      	lsls	r1, r2, #27
   3c26e:	bf5f      	itttt	pl
   3c270:	681a      	ldrpl	r2, [r3, #0]
   3c272:	1d11      	addpl	r1, r2, #4
   3c274:	6019      	strpl	r1, [r3, #0]
   3c276:	6816      	ldrpl	r6, [r2, #0]
   3c278:	69a0      	ldr	r0, [r4, #24]
   3c27a:	b188      	cbz	r0, 3c2a0 <_scanf_chars+0x58>
   3c27c:	2801      	cmp	r0, #1
   3c27e:	d107      	bne.n	3c290 <_scanf_chars+0x48>
   3c280:	682a      	ldr	r2, [r5, #0]
   3c282:	7811      	ldrb	r1, [r2, #0]
   3c284:	6962      	ldr	r2, [r4, #20]
   3c286:	5c52      	ldrb	r2, [r2, r1]
   3c288:	b952      	cbnz	r2, 3c2a0 <_scanf_chars+0x58>
   3c28a:	2f00      	cmp	r7, #0
   3c28c:	d031      	beq.n	3c2f2 <_scanf_chars+0xaa>
   3c28e:	e022      	b.n	3c2d6 <_scanf_chars+0x8e>
   3c290:	2802      	cmp	r0, #2
   3c292:	d120      	bne.n	3c2d6 <_scanf_chars+0x8e>
   3c294:	682b      	ldr	r3, [r5, #0]
   3c296:	781b      	ldrb	r3, [r3, #0]
   3c298:	f813 3009 	ldrb.w	r3, [r3, r9]
   3c29c:	071b      	lsls	r3, r3, #28
   3c29e:	d41a      	bmi.n	3c2d6 <_scanf_chars+0x8e>
   3c2a0:	6823      	ldr	r3, [r4, #0]
   3c2a2:	3701      	adds	r7, #1
   3c2a4:	06da      	lsls	r2, r3, #27
   3c2a6:	bf5e      	ittt	pl
   3c2a8:	682b      	ldrpl	r3, [r5, #0]
   3c2aa:	781b      	ldrbpl	r3, [r3, #0]
   3c2ac:	f806 3b01 	strbpl.w	r3, [r6], #1
   3c2b0:	682a      	ldr	r2, [r5, #0]
   3c2b2:	686b      	ldr	r3, [r5, #4]
   3c2b4:	3201      	adds	r2, #1
   3c2b6:	3b01      	subs	r3, #1
   3c2b8:	602a      	str	r2, [r5, #0]
   3c2ba:	68a2      	ldr	r2, [r4, #8]
   3c2bc:	606b      	str	r3, [r5, #4]
   3c2be:	3a01      	subs	r2, #1
   3c2c0:	60a2      	str	r2, [r4, #8]
   3c2c2:	b142      	cbz	r2, 3c2d6 <_scanf_chars+0x8e>
   3c2c4:	2b00      	cmp	r3, #0
   3c2c6:	dcd7      	bgt.n	3c278 <_scanf_chars+0x30>
   3c2c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3c2cc:	4629      	mov	r1, r5
   3c2ce:	4640      	mov	r0, r8
   3c2d0:	4798      	blx	r3
   3c2d2:	2800      	cmp	r0, #0
   3c2d4:	d0d0      	beq.n	3c278 <_scanf_chars+0x30>
   3c2d6:	6823      	ldr	r3, [r4, #0]
   3c2d8:	f013 0310 	ands.w	r3, r3, #16
   3c2dc:	d105      	bne.n	3c2ea <_scanf_chars+0xa2>
   3c2de:	68e2      	ldr	r2, [r4, #12]
   3c2e0:	3201      	adds	r2, #1
   3c2e2:	60e2      	str	r2, [r4, #12]
   3c2e4:	69a2      	ldr	r2, [r4, #24]
   3c2e6:	b102      	cbz	r2, 3c2ea <_scanf_chars+0xa2>
   3c2e8:	7033      	strb	r3, [r6, #0]
   3c2ea:	6923      	ldr	r3, [r4, #16]
   3c2ec:	2000      	movs	r0, #0
   3c2ee:	443b      	add	r3, r7
   3c2f0:	6123      	str	r3, [r4, #16]
   3c2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3c2f6:	bf00      	nop
   3c2f8:	0004bd43 	.word	0x0004bd43

0003c2fc <_scanf_i>:
   3c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c300:	4698      	mov	r8, r3
   3c302:	b087      	sub	sp, #28
   3c304:	4b75      	ldr	r3, [pc, #468]	; (3c4dc <_scanf_i+0x1e0>)
   3c306:	460c      	mov	r4, r1
   3c308:	4682      	mov	sl, r0
   3c30a:	4616      	mov	r6, r2
   3c30c:	4627      	mov	r7, r4
   3c30e:	f04f 0b00 	mov.w	fp, #0
   3c312:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   3c316:	ab03      	add	r3, sp, #12
   3c318:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   3c31c:	4b70      	ldr	r3, [pc, #448]	; (3c4e0 <_scanf_i+0x1e4>)
   3c31e:	69a1      	ldr	r1, [r4, #24]
   3c320:	4a70      	ldr	r2, [pc, #448]	; (3c4e4 <_scanf_i+0x1e8>)
   3c322:	2903      	cmp	r1, #3
   3c324:	bf18      	it	ne
   3c326:	461a      	movne	r2, r3
   3c328:	68a3      	ldr	r3, [r4, #8]
   3c32a:	9201      	str	r2, [sp, #4]
   3c32c:	1e5a      	subs	r2, r3, #1
   3c32e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   3c332:	bf89      	itett	hi
   3c334:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   3c338:	f04f 0900 	movls.w	r9, #0
   3c33c:	eb03 0905 	addhi.w	r9, r3, r5
   3c340:	f240 135d 	movwhi	r3, #349	; 0x15d
   3c344:	bf88      	it	hi
   3c346:	60a3      	strhi	r3, [r4, #8]
   3c348:	f857 3b1c 	ldr.w	r3, [r7], #28
   3c34c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   3c350:	463d      	mov	r5, r7
   3c352:	6023      	str	r3, [r4, #0]
   3c354:	6831      	ldr	r1, [r6, #0]
   3c356:	ab03      	add	r3, sp, #12
   3c358:	2202      	movs	r2, #2
   3c35a:	7809      	ldrb	r1, [r1, #0]
   3c35c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   3c360:	f005 f82a 	bl	413b8 <memchr>
   3c364:	b328      	cbz	r0, 3c3b2 <_scanf_i+0xb6>
   3c366:	f1bb 0f01 	cmp.w	fp, #1
   3c36a:	d159      	bne.n	3c420 <_scanf_i+0x124>
   3c36c:	6862      	ldr	r2, [r4, #4]
   3c36e:	b92a      	cbnz	r2, 3c37c <_scanf_i+0x80>
   3c370:	6822      	ldr	r2, [r4, #0]
   3c372:	2308      	movs	r3, #8
   3c374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3c378:	6063      	str	r3, [r4, #4]
   3c37a:	6022      	str	r2, [r4, #0]
   3c37c:	6822      	ldr	r2, [r4, #0]
   3c37e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   3c382:	6022      	str	r2, [r4, #0]
   3c384:	68a2      	ldr	r2, [r4, #8]
   3c386:	1e51      	subs	r1, r2, #1
   3c388:	60a1      	str	r1, [r4, #8]
   3c38a:	b192      	cbz	r2, 3c3b2 <_scanf_i+0xb6>
   3c38c:	6832      	ldr	r2, [r6, #0]
   3c38e:	1c51      	adds	r1, r2, #1
   3c390:	6031      	str	r1, [r6, #0]
   3c392:	7812      	ldrb	r2, [r2, #0]
   3c394:	f805 2b01 	strb.w	r2, [r5], #1
   3c398:	6872      	ldr	r2, [r6, #4]
   3c39a:	3a01      	subs	r2, #1
   3c39c:	2a00      	cmp	r2, #0
   3c39e:	6072      	str	r2, [r6, #4]
   3c3a0:	dc07      	bgt.n	3c3b2 <_scanf_i+0xb6>
   3c3a2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   3c3a6:	4631      	mov	r1, r6
   3c3a8:	4650      	mov	r0, sl
   3c3aa:	4790      	blx	r2
   3c3ac:	2800      	cmp	r0, #0
   3c3ae:	f040 8085 	bne.w	3c4bc <_scanf_i+0x1c0>
   3c3b2:	f10b 0b01 	add.w	fp, fp, #1
   3c3b6:	f1bb 0f03 	cmp.w	fp, #3
   3c3ba:	d1cb      	bne.n	3c354 <_scanf_i+0x58>
   3c3bc:	6863      	ldr	r3, [r4, #4]
   3c3be:	b90b      	cbnz	r3, 3c3c4 <_scanf_i+0xc8>
   3c3c0:	230a      	movs	r3, #10
   3c3c2:	6063      	str	r3, [r4, #4]
   3c3c4:	6863      	ldr	r3, [r4, #4]
   3c3c6:	f04f 0b00 	mov.w	fp, #0
   3c3ca:	4947      	ldr	r1, [pc, #284]	; (3c4e8 <_scanf_i+0x1ec>)
   3c3cc:	6960      	ldr	r0, [r4, #20]
   3c3ce:	1ac9      	subs	r1, r1, r3
   3c3d0:	f005 feac 	bl	4212c <__sccl>
   3c3d4:	68a3      	ldr	r3, [r4, #8]
   3c3d6:	6822      	ldr	r2, [r4, #0]
   3c3d8:	2b00      	cmp	r3, #0
   3c3da:	d03d      	beq.n	3c458 <_scanf_i+0x15c>
   3c3dc:	6831      	ldr	r1, [r6, #0]
   3c3de:	6960      	ldr	r0, [r4, #20]
   3c3e0:	f891 c000 	ldrb.w	ip, [r1]
   3c3e4:	f810 000c 	ldrb.w	r0, [r0, ip]
   3c3e8:	2800      	cmp	r0, #0
   3c3ea:	d035      	beq.n	3c458 <_scanf_i+0x15c>
   3c3ec:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   3c3f0:	d124      	bne.n	3c43c <_scanf_i+0x140>
   3c3f2:	0510      	lsls	r0, r2, #20
   3c3f4:	d522      	bpl.n	3c43c <_scanf_i+0x140>
   3c3f6:	f10b 0b01 	add.w	fp, fp, #1
   3c3fa:	f1b9 0f00 	cmp.w	r9, #0
   3c3fe:	d003      	beq.n	3c408 <_scanf_i+0x10c>
   3c400:	3301      	adds	r3, #1
   3c402:	f109 39ff 	add.w	r9, r9, #4294967295
   3c406:	60a3      	str	r3, [r4, #8]
   3c408:	6873      	ldr	r3, [r6, #4]
   3c40a:	3b01      	subs	r3, #1
   3c40c:	2b00      	cmp	r3, #0
   3c40e:	6073      	str	r3, [r6, #4]
   3c410:	dd1b      	ble.n	3c44a <_scanf_i+0x14e>
   3c412:	6833      	ldr	r3, [r6, #0]
   3c414:	3301      	adds	r3, #1
   3c416:	6033      	str	r3, [r6, #0]
   3c418:	68a3      	ldr	r3, [r4, #8]
   3c41a:	3b01      	subs	r3, #1
   3c41c:	60a3      	str	r3, [r4, #8]
   3c41e:	e7d9      	b.n	3c3d4 <_scanf_i+0xd8>
   3c420:	f1bb 0f02 	cmp.w	fp, #2
   3c424:	d1ae      	bne.n	3c384 <_scanf_i+0x88>
   3c426:	6822      	ldr	r2, [r4, #0]
   3c428:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   3c42c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   3c430:	d1bf      	bne.n	3c3b2 <_scanf_i+0xb6>
   3c432:	2310      	movs	r3, #16
   3c434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   3c438:	6063      	str	r3, [r4, #4]
   3c43a:	e7a2      	b.n	3c382 <_scanf_i+0x86>
   3c43c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   3c440:	6022      	str	r2, [r4, #0]
   3c442:	780b      	ldrb	r3, [r1, #0]
   3c444:	f805 3b01 	strb.w	r3, [r5], #1
   3c448:	e7de      	b.n	3c408 <_scanf_i+0x10c>
   3c44a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3c44e:	4631      	mov	r1, r6
   3c450:	4650      	mov	r0, sl
   3c452:	4798      	blx	r3
   3c454:	2800      	cmp	r0, #0
   3c456:	d0df      	beq.n	3c418 <_scanf_i+0x11c>
   3c458:	6823      	ldr	r3, [r4, #0]
   3c45a:	05db      	lsls	r3, r3, #23
   3c45c:	d50d      	bpl.n	3c47a <_scanf_i+0x17e>
   3c45e:	42bd      	cmp	r5, r7
   3c460:	d909      	bls.n	3c476 <_scanf_i+0x17a>
   3c462:	f105 39ff 	add.w	r9, r5, #4294967295
   3c466:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   3c46a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   3c46e:	4632      	mov	r2, r6
   3c470:	464d      	mov	r5, r9
   3c472:	4650      	mov	r0, sl
   3c474:	4798      	blx	r3
   3c476:	42bd      	cmp	r5, r7
   3c478:	d02d      	beq.n	3c4d6 <_scanf_i+0x1da>
   3c47a:	6822      	ldr	r2, [r4, #0]
   3c47c:	f012 0210 	ands.w	r2, r2, #16
   3c480:	d113      	bne.n	3c4aa <_scanf_i+0x1ae>
   3c482:	4639      	mov	r1, r7
   3c484:	702a      	strb	r2, [r5, #0]
   3c486:	4650      	mov	r0, sl
   3c488:	6863      	ldr	r3, [r4, #4]
   3c48a:	9e01      	ldr	r6, [sp, #4]
   3c48c:	47b0      	blx	r6
   3c48e:	6821      	ldr	r1, [r4, #0]
   3c490:	f8d8 3000 	ldr.w	r3, [r8]
   3c494:	f011 0f20 	tst.w	r1, #32
   3c498:	d013      	beq.n	3c4c2 <_scanf_i+0x1c6>
   3c49a:	1d1a      	adds	r2, r3, #4
   3c49c:	f8c8 2000 	str.w	r2, [r8]
   3c4a0:	681b      	ldr	r3, [r3, #0]
   3c4a2:	6018      	str	r0, [r3, #0]
   3c4a4:	68e3      	ldr	r3, [r4, #12]
   3c4a6:	3301      	adds	r3, #1
   3c4a8:	60e3      	str	r3, [r4, #12]
   3c4aa:	1bed      	subs	r5, r5, r7
   3c4ac:	2000      	movs	r0, #0
   3c4ae:	44ab      	add	fp, r5
   3c4b0:	6925      	ldr	r5, [r4, #16]
   3c4b2:	445d      	add	r5, fp
   3c4b4:	6125      	str	r5, [r4, #16]
   3c4b6:	b007      	add	sp, #28
   3c4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c4bc:	f04f 0b00 	mov.w	fp, #0
   3c4c0:	e7ca      	b.n	3c458 <_scanf_i+0x15c>
   3c4c2:	1d1a      	adds	r2, r3, #4
   3c4c4:	f011 0f01 	tst.w	r1, #1
   3c4c8:	f8c8 2000 	str.w	r2, [r8]
   3c4cc:	681b      	ldr	r3, [r3, #0]
   3c4ce:	bf14      	ite	ne
   3c4d0:	8018      	strhne	r0, [r3, #0]
   3c4d2:	6018      	streq	r0, [r3, #0]
   3c4d4:	e7e6      	b.n	3c4a4 <_scanf_i+0x1a8>
   3c4d6:	2001      	movs	r0, #1
   3c4d8:	e7ed      	b.n	3c4b6 <_scanf_i+0x1ba>
   3c4da:	bf00      	nop
   3c4dc:	00042854 	.word	0x00042854
   3c4e0:	000418db 	.word	0x000418db
   3c4e4:	000418d7 	.word	0x000418d7
   3c4e8:	0004c043 	.word	0x0004c043

0003c4ec <_read_r>:
   3c4ec:	b538      	push	{r3, r4, r5, lr}
   3c4ee:	4604      	mov	r4, r0
   3c4f0:	4d06      	ldr	r5, [pc, #24]	; (3c50c <_read_r+0x20>)
   3c4f2:	4608      	mov	r0, r1
   3c4f4:	4611      	mov	r1, r2
   3c4f6:	2200      	movs	r2, #0
   3c4f8:	602a      	str	r2, [r5, #0]
   3c4fa:	461a      	mov	r2, r3
   3c4fc:	f001 f924 	bl	3d748 <_read>
   3c500:	1c43      	adds	r3, r0, #1
   3c502:	d102      	bne.n	3c50a <_read_r+0x1e>
   3c504:	682b      	ldr	r3, [r5, #0]
   3c506:	b103      	cbz	r3, 3c50a <_read_r+0x1e>
   3c508:	6023      	str	r3, [r4, #0]
   3c50a:	bd38      	pop	{r3, r4, r5, pc}
   3c50c:	2001a568 	.word	0x2001a568

0003c510 <nan>:
   3c510:	2000      	movs	r0, #0
   3c512:	4901      	ldr	r1, [pc, #4]	; (3c518 <nan+0x8>)
   3c514:	4770      	bx	lr
   3c516:	bf00      	nop
   3c518:	7ff80000 	.word	0x7ff80000

0003c51c <raise>:
   3c51c:	4b02      	ldr	r3, [pc, #8]	; (3c528 <raise+0xc>)
   3c51e:	4601      	mov	r1, r0
   3c520:	6818      	ldr	r0, [r3, #0]
   3c522:	f005 be3b 	b.w	4219c <_raise_r>
   3c526:	bf00      	nop
   3c528:	20014a74 	.word	0x20014a74

0003c52c <_kill_r>:
   3c52c:	b538      	push	{r3, r4, r5, lr}
   3c52e:	2300      	movs	r3, #0
   3c530:	4d06      	ldr	r5, [pc, #24]	; (3c54c <_kill_r+0x20>)
   3c532:	4604      	mov	r4, r0
   3c534:	4608      	mov	r0, r1
   3c536:	4611      	mov	r1, r2
   3c538:	602b      	str	r3, [r5, #0]
   3c53a:	f001 f917 	bl	3d76c <_kill>
   3c53e:	1c43      	adds	r3, r0, #1
   3c540:	d102      	bne.n	3c548 <_kill_r+0x1c>
   3c542:	682b      	ldr	r3, [r5, #0]
   3c544:	b103      	cbz	r3, 3c548 <_kill_r+0x1c>
   3c546:	6023      	str	r3, [r4, #0]
   3c548:	bd38      	pop	{r3, r4, r5, pc}
   3c54a:	bf00      	nop
   3c54c:	2001a568 	.word	0x2001a568

0003c550 <_fstat_r>:
   3c550:	b538      	push	{r3, r4, r5, lr}
   3c552:	2300      	movs	r3, #0
   3c554:	4d06      	ldr	r5, [pc, #24]	; (3c570 <_fstat_r+0x20>)
   3c556:	4604      	mov	r4, r0
   3c558:	4608      	mov	r0, r1
   3c55a:	4611      	mov	r1, r2
   3c55c:	602b      	str	r3, [r5, #0]
   3c55e:	f001 f909 	bl	3d774 <_fstat>
   3c562:	1c43      	adds	r3, r0, #1
   3c564:	d102      	bne.n	3c56c <_fstat_r+0x1c>
   3c566:	682b      	ldr	r3, [r5, #0]
   3c568:	b103      	cbz	r3, 3c56c <_fstat_r+0x1c>
   3c56a:	6023      	str	r3, [r4, #0]
   3c56c:	bd38      	pop	{r3, r4, r5, pc}
   3c56e:	bf00      	nop
   3c570:	2001a568 	.word	0x2001a568

0003c574 <_isatty_r>:
   3c574:	b538      	push	{r3, r4, r5, lr}
   3c576:	2300      	movs	r3, #0
   3c578:	4d05      	ldr	r5, [pc, #20]	; (3c590 <_isatty_r+0x1c>)
   3c57a:	4604      	mov	r4, r0
   3c57c:	4608      	mov	r0, r1
   3c57e:	602b      	str	r3, [r5, #0]
   3c580:	f001 f8ef 	bl	3d762 <_isatty>
   3c584:	1c43      	adds	r3, r0, #1
   3c586:	d102      	bne.n	3c58e <_isatty_r+0x1a>
   3c588:	682b      	ldr	r3, [r5, #0]
   3c58a:	b103      	cbz	r3, 3c58e <_isatty_r+0x1a>
   3c58c:	6023      	str	r3, [r4, #0]
   3c58e:	bd38      	pop	{r3, r4, r5, pc}
   3c590:	2001a568 	.word	0x2001a568

0003c594 <app_thread_fn>:
{
   3c594:	b508      	push	{r3, lr}
	(void)await_connection(K_FOREVER);
   3c596:	f04f 30ff 	mov.w	r0, #4294967295
   3c59a:	f04f 31ff 	mov.w	r1, #4294967295
   3c59e:	f7e3 fe5d 	bl	2025c <await_connection>
}
   3c5a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	main_application();
   3c5a6:	f7e3 bd97 	b.w	200d8 <main_application>

0003c5aa <msg_thread_fn>:
{
   3c5aa:	b508      	push	{r3, lr}
		(void)consume_device_message();
   3c5ac:	f7e3 ff38 	bl	20420 <consume_device_message>
	while (true) {
   3c5b0:	e7fc      	b.n	3c5ac <msg_thread_fn+0x2>

0003c5b2 <conn_thread_fn>:
	manage_connection();
   3c5b2:	f7e3 bfa7 	b.w	20504 <manage_connection>

0003c5b6 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   3c5b6:	b40c      	push	{r2, r3}
   3c5b8:	4603      	mov	r3, r0
   3c5ba:	b507      	push	{r0, r1, r2, lr}
{
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   3c5bc:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   3c5be:	aa05      	add	r2, sp, #20
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   3c5c0:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
   3c5c2:	f240 1105 	movw	r1, #261	; 0x105
	va_start(args, request);
   3c5c6:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   3c5c8:	4798      	blx	r3
	va_end(args);

	return res;
}
   3c5ca:	b003      	add	sp, #12
   3c5cc:	f85d eb04 	ldr.w	lr, [sp], #4
   3c5d0:	b002      	add	sp, #8
   3c5d2:	4770      	bx	lr

0003c5d4 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   3c5d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   3c5d8:	b2db      	uxtb	r3, r3
   3c5da:	2b09      	cmp	r3, #9
   3c5dc:	d802      	bhi.n	3c5e4 <char2hex+0x10>
		*x = c - '0';
   3c5de:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   3c5e0:	2000      	movs	r0, #0
   3c5e2:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   3c5e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   3c5e8:	2b05      	cmp	r3, #5
   3c5ea:	d802      	bhi.n	3c5f2 <char2hex+0x1e>
		*x = c - 'a' + 10;
   3c5ec:	3857      	subs	r0, #87	; 0x57
   3c5ee:	7008      	strb	r0, [r1, #0]
   3c5f0:	e7f6      	b.n	3c5e0 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   3c5f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   3c5f6:	2b05      	cmp	r3, #5
   3c5f8:	d801      	bhi.n	3c5fe <char2hex+0x2a>
		*x = c - 'A' + 10;
   3c5fa:	3837      	subs	r0, #55	; 0x37
   3c5fc:	e7f7      	b.n	3c5ee <char2hex+0x1a>
		return -EINVAL;
   3c5fe:	f06f 0015 	mvn.w	r0, #21
}
   3c602:	4770      	bx	lr

0003c604 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   3c604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3c606:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   3c608:	f001 0001 	and.w	r0, r1, #1
   3c60c:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   3c610:	429d      	cmp	r5, r3
   3c612:	ea4f 0651 	mov.w	r6, r1, lsr #1
   3c616:	d903      	bls.n	3c620 <hex2bin+0x1c>
		return 0;
   3c618:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   3c61a:	4628      	mov	r0, r5
   3c61c:	b003      	add	sp, #12
   3c61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   3c620:	b158      	cbz	r0, 3c63a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   3c622:	7820      	ldrb	r0, [r4, #0]
   3c624:	f10d 0107 	add.w	r1, sp, #7
   3c628:	f7ff ffd4 	bl	3c5d4 <char2hex>
   3c62c:	2800      	cmp	r0, #0
   3c62e:	dbf3      	blt.n	3c618 <hex2bin+0x14>
		buf[0] = dec;
   3c630:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   3c634:	3401      	adds	r4, #1
		buf[0] = dec;
   3c636:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   3c63a:	3401      	adds	r4, #1
   3c63c:	4416      	add	r6, r2
   3c63e:	42b2      	cmp	r2, r6
   3c640:	d0eb      	beq.n	3c61a <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   3c642:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   3c646:	f10d 0107 	add.w	r1, sp, #7
   3c64a:	f7ff ffc3 	bl	3c5d4 <char2hex>
   3c64e:	2800      	cmp	r0, #0
   3c650:	dbe2      	blt.n	3c618 <hex2bin+0x14>
		buf[i] = dec << 4;
   3c652:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3c656:	011b      	lsls	r3, r3, #4
   3c658:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   3c65a:	f814 0b02 	ldrb.w	r0, [r4], #2
   3c65e:	f7ff ffb9 	bl	3c5d4 <char2hex>
   3c662:	2800      	cmp	r0, #0
   3c664:	dbd8      	blt.n	3c618 <hex2bin+0x14>
		buf[i] += dec;
   3c666:	7813      	ldrb	r3, [r2, #0]
   3c668:	f89d 1007 	ldrb.w	r1, [sp, #7]
   3c66c:	440b      	add	r3, r1
   3c66e:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   3c672:	e7e4      	b.n	3c63e <hex2bin+0x3a>

0003c674 <sys_notify_validate>:
	if (notify == NULL) {
   3c674:	b140      	cbz	r0, 3c688 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   3c676:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   3c678:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   3c67c:	2b02      	cmp	r3, #2
   3c67e:	d006      	beq.n	3c68e <sys_notify_validate+0x1a>
   3c680:	2b03      	cmp	r3, #3
   3c682:	d004      	beq.n	3c68e <sys_notify_validate+0x1a>
   3c684:	2b01      	cmp	r3, #1
   3c686:	d005      	beq.n	3c694 <sys_notify_validate+0x20>
		return -EINVAL;
   3c688:	f06f 0015 	mvn.w	r0, #21
}
   3c68c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   3c68e:	6803      	ldr	r3, [r0, #0]
   3c690:	2b00      	cmp	r3, #0
   3c692:	d0f9      	beq.n	3c688 <sys_notify_validate+0x14>
		notify->result = 0;
   3c694:	2300      	movs	r3, #0
   3c696:	6083      	str	r3, [r0, #8]
   3c698:	4618      	mov	r0, r3
   3c69a:	4770      	bx	lr

0003c69c <arch_printk_char_out>:
}
   3c69c:	2000      	movs	r0, #0
   3c69e:	4770      	bx	lr

0003c6a0 <str_out>:
{
   3c6a0:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   3c6a2:	688a      	ldr	r2, [r1, #8]
   3c6a4:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   3c6a6:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   3c6a8:	b114      	cbz	r4, 3c6b0 <str_out+0x10>
   3c6aa:	684b      	ldr	r3, [r1, #4]
   3c6ac:	4293      	cmp	r3, r2
   3c6ae:	dc01      	bgt.n	3c6b4 <str_out+0x14>
		ctx->count++;
   3c6b0:	608d      	str	r5, [r1, #8]
}
   3c6b2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   3c6b4:	3b01      	subs	r3, #1
   3c6b6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   3c6b8:	bf08      	it	eq
   3c6ba:	2200      	moveq	r2, #0
   3c6bc:	608d      	str	r5, [r1, #8]
   3c6be:	bf0c      	ite	eq
   3c6c0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   3c6c2:	54a0      	strbne	r0, [r4, r2]
   3c6c4:	e7f5      	b.n	3c6b2 <str_out+0x12>

0003c6c6 <printk>:
{
   3c6c6:	b40f      	push	{r0, r1, r2, r3}
   3c6c8:	b507      	push	{r0, r1, r2, lr}
   3c6ca:	a904      	add	r1, sp, #16
   3c6cc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3c6d0:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   3c6d2:	f7e4 fa7b 	bl	20bcc <vprintk>
}
   3c6d6:	b003      	add	sp, #12
   3c6d8:	f85d eb04 	ldr.w	lr, [sp], #4
   3c6dc:	b004      	add	sp, #16
   3c6de:	4770      	bx	lr

0003c6e0 <snprintk>:
{
   3c6e0:	b40c      	push	{r2, r3}
   3c6e2:	b507      	push	{r0, r1, r2, lr}
   3c6e4:	ab04      	add	r3, sp, #16
   3c6e6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   3c6ea:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   3c6ec:	f7e4 fa7c 	bl	20be8 <vsnprintk>
}
   3c6f0:	b003      	add	sp, #12
   3c6f2:	f85d eb04 	ldr.w	lr, [sp], #4
   3c6f6:	b002      	add	sp, #8
   3c6f8:	4770      	bx	lr

0003c6fa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   3c6fa:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   3c6fc:	f013 0307 	ands.w	r3, r3, #7
   3c700:	d105      	bne.n	3c70e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   3c702:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   3c704:	2b00      	cmp	r3, #0
   3c706:	bf0c      	ite	eq
   3c708:	2000      	moveq	r0, #0
   3c70a:	2003      	movne	r0, #3
   3c70c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   3c70e:	2b02      	cmp	r3, #2
   3c710:	d105      	bne.n	3c71e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   3c712:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   3c714:	2b00      	cmp	r3, #0
   3c716:	bf14      	ite	ne
   3c718:	2000      	movne	r0, #0
   3c71a:	2004      	moveq	r0, #4
   3c71c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   3c71e:	2b01      	cmp	r3, #1
   3c720:	d105      	bne.n	3c72e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   3c722:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   3c724:	2b00      	cmp	r3, #0
   3c726:	bf0c      	ite	eq
   3c728:	2000      	moveq	r0, #0
   3c72a:	2005      	movne	r0, #5
   3c72c:	4770      	bx	lr
	int evt = EVT_NOP;
   3c72e:	2000      	movs	r0, #0
}
   3c730:	4770      	bx	lr

0003c732 <notify_one>:
{
   3c732:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3c734:	460d      	mov	r5, r1
   3c736:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3c738:	4619      	mov	r1, r3
   3c73a:	1d28      	adds	r0, r5, #4
{
   3c73c:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3c73e:	9300      	str	r3, [sp, #0]
   3c740:	f7e4 fa0a 	bl	20b58 <sys_notify_finalize>
	if (cb) {
   3c744:	4604      	mov	r4, r0
   3c746:	b140      	cbz	r0, 3c75a <notify_one+0x28>
		cb(mgr, cli, state, res);
   3c748:	e9dd 3200 	ldrd	r3, r2, [sp]
   3c74c:	4629      	mov	r1, r5
   3c74e:	4630      	mov	r0, r6
   3c750:	46a4      	mov	ip, r4
}
   3c752:	b002      	add	sp, #8
   3c754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   3c758:	4760      	bx	ip
}
   3c75a:	b002      	add	sp, #8
   3c75c:	bd70      	pop	{r4, r5, r6, pc}

0003c75e <validate_args>:
{
   3c75e:	b510      	push	{r4, lr}
   3c760:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   3c762:	b140      	cbz	r0, 3c776 <validate_args+0x18>
   3c764:	b139      	cbz	r1, 3c776 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   3c766:	1d08      	adds	r0, r1, #4
   3c768:	f7ff ff84 	bl	3c674 <sys_notify_validate>
	if ((rv == 0)
   3c76c:	b928      	cbnz	r0, 3c77a <validate_args+0x1c>
	    && ((cli->notify.flags
   3c76e:	68a3      	ldr	r3, [r4, #8]
   3c770:	f033 0303 	bics.w	r3, r3, #3
   3c774:	d001      	beq.n	3c77a <validate_args+0x1c>
		rv = -EINVAL;
   3c776:	f06f 0015 	mvn.w	r0, #21
}
   3c77a:	bd10      	pop	{r4, pc}

0003c77c <onoff_manager_init>:
{
   3c77c:	b538      	push	{r3, r4, r5, lr}
   3c77e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   3c780:	4605      	mov	r5, r0
   3c782:	b158      	cbz	r0, 3c79c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   3c784:	b151      	cbz	r1, 3c79c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   3c786:	680b      	ldr	r3, [r1, #0]
   3c788:	b143      	cbz	r3, 3c79c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   3c78a:	684b      	ldr	r3, [r1, #4]
   3c78c:	b133      	cbz	r3, 3c79c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3c78e:	2220      	movs	r2, #32
   3c790:	2100      	movs	r1, #0
   3c792:	f004 fe4f 	bl	41434 <memset>
	return 0;
   3c796:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3c798:	612c      	str	r4, [r5, #16]
}
   3c79a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3c79c:	f06f 0015 	mvn.w	r0, #21
   3c7a0:	e7fb      	b.n	3c79a <onoff_manager_init+0x1e>

0003c7a2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   3c7a2:	4604      	mov	r4, r0
   3c7a4:	b508      	push	{r3, lr}
   3c7a6:	4608      	mov	r0, r1
   3c7a8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   3c7aa:	461a      	mov	r2, r3
   3c7ac:	47a0      	blx	r4
   3c7ae:	f7fb ff5f 	bl	38670 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   3c7b2:	f7e6 fe23 	bl	233fc <z_impl_k_thread_abort>

0003c7b6 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   3c7b6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   3c7ba:	8848      	ldrh	r0, [r1, #2]
}
   3c7bc:	0840      	lsrs	r0, r0, #1
   3c7be:	4770      	bx	lr

0003c7c0 <free_list_add>:
{
   3c7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c7c2:	460c      	mov	r4, r1
   3c7c4:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   3c7c6:	f7ff fff6 	bl	3c7b6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   3c7ca:	fab0 f080 	clz	r0, r0
   3c7ce:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   3c7d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   3c7d6:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   3c7da:	00e2      	lsls	r2, r4, #3
		((uint16_t *)cmem)[f] = val;
   3c7dc:	1d17      	adds	r7, r2, #4
   3c7de:	b2a5      	uxth	r5, r4
   3c7e0:	3206      	adds	r2, #6
   3c7e2:	b956      	cbnz	r6, 3c7fa <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   3c7e4:	2101      	movs	r1, #1
   3c7e6:	fa01 f000 	lsl.w	r0, r1, r0
   3c7ea:	68d9      	ldr	r1, [r3, #12]
   3c7ec:	4301      	orrs	r1, r0
   3c7ee:	60d9      	str	r1, [r3, #12]
		b->next = c;
   3c7f0:	f8cc 4010 	str.w	r4, [ip, #16]
   3c7f4:	53dd      	strh	r5, [r3, r7]
   3c7f6:	529d      	strh	r5, [r3, r2]
}
   3c7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   3c7fa:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   3c7fc:	3104      	adds	r1, #4
   3c7fe:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   3c800:	53d8      	strh	r0, [r3, r7]
   3c802:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   3c806:	529e      	strh	r6, [r3, r2]
   3c808:	80c5      	strh	r5, [r0, #6]
   3c80a:	525d      	strh	r5, [r3, r1]
   3c80c:	e7f4      	b.n	3c7f8 <free_list_add+0x38>

0003c80e <free_list_remove_bidx>:
{
   3c80e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   3c810:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   3c814:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   3c816:	4299      	cmp	r1, r3
   3c818:	f102 0104 	add.w	r1, r2, #4
   3c81c:	d10a      	bne.n	3c834 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   3c81e:	2301      	movs	r3, #1
   3c820:	fa03 f202 	lsl.w	r2, r3, r2
   3c824:	68c3      	ldr	r3, [r0, #12]
   3c826:	ea23 0302 	bic.w	r3, r3, r2
   3c82a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   3c82c:	2300      	movs	r3, #0
   3c82e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   3c832:	bd10      	pop	{r4, pc}
   3c834:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   3c836:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   3c83a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   3c83e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   3c842:	80cb      	strh	r3, [r1, #6]
   3c844:	8082      	strh	r2, [r0, #4]
}
   3c846:	e7f4      	b.n	3c832 <free_list_remove_bidx+0x24>

0003c848 <free_list_remove>:
{
   3c848:	b510      	push	{r4, lr}
   3c84a:	4603      	mov	r3, r0
   3c84c:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   3c84e:	f7ff ffb2 	bl	3c7b6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   3c852:	fab0 f080 	clz	r0, r0
		free_list_remove_bidx(h, c, bidx);
   3c856:	4621      	mov	r1, r4
}
   3c858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   3c85c:	f1c0 021f 	rsb	r2, r0, #31
   3c860:	4618      	mov	r0, r3
   3c862:	f7ff bfd4 	b.w	3c80e <free_list_remove_bidx>

0003c866 <alloc_chunk>:
{
   3c866:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c86a:	fab1 f581 	clz	r5, r1
   3c86e:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   3c872:	eb00 0789 	add.w	r7, r0, r9, lsl #2
   3c876:	693a      	ldr	r2, [r7, #16]
{
   3c878:	4603      	mov	r3, r0
   3c87a:	460e      	mov	r6, r1
	if (b->next) {
   3c87c:	b1ca      	cbz	r2, 3c8b2 <alloc_chunk+0x4c>
   3c87e:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   3c882:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   3c884:	4618      	mov	r0, r3
   3c886:	4621      	mov	r1, r4
   3c888:	f7ff ff95 	bl	3c7b6 <chunk_size>
   3c88c:	42b0      	cmp	r0, r6
   3c88e:	d307      	bcc.n	3c8a0 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   3c890:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   3c892:	4621      	mov	r1, r4
   3c894:	4618      	mov	r0, r3
   3c896:	f7ff ffba 	bl	3c80e <free_list_remove_bidx>
}
   3c89a:	4620      	mov	r0, r4
   3c89c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   3c8a0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   3c8a4:	88e1      	ldrh	r1, [r4, #6]
		} while (--i && b->next != first);
   3c8a6:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   3c8aa:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   3c8ac:	d001      	beq.n	3c8b2 <alloc_chunk+0x4c>
   3c8ae:	428a      	cmp	r2, r1
   3c8b0:	d1e7      	bne.n	3c882 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   3c8b2:	f04f 34ff 	mov.w	r4, #4294967295
   3c8b6:	68d9      	ldr	r1, [r3, #12]
   3c8b8:	f1c5 0520 	rsb	r5, r5, #32
   3c8bc:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   3c8be:	400c      	ands	r4, r1
   3c8c0:	d0eb      	beq.n	3c89a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   3c8c2:	fa94 f2a4 	rbit	r2, r4
   3c8c6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   3c8ca:	1d11      	adds	r1, r2, #4
   3c8cc:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   3c8d0:	e7df      	b.n	3c892 <alloc_chunk+0x2c>

0003c8d2 <merge_chunks>:
{
   3c8d2:	b538      	push	{r3, r4, r5, lr}
   3c8d4:	4603      	mov	r3, r0
   3c8d6:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   3c8d8:	f7ff ff6d 	bl	3c7b6 <chunk_size>
   3c8dc:	4611      	mov	r1, r2
   3c8de:	4604      	mov	r4, r0
   3c8e0:	4618      	mov	r0, r3
   3c8e2:	f7ff ff68 	bl	3c7b6 <chunk_size>
   3c8e6:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3c8e8:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   3c8ea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   3c8ee:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   3c8f0:	4618      	mov	r0, r3
   3c8f2:	4611      	mov	r1, r2
   3c8f4:	f7ff ff5f 	bl	3c7b6 <chunk_size>
	void *cmem = &buf[c];
   3c8f8:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   3c8fa:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   3c8fe:	bd38      	pop	{r3, r4, r5, pc}

0003c900 <split_chunks>:
{
   3c900:	b538      	push	{r3, r4, r5, lr}
   3c902:	460c      	mov	r4, r1
   3c904:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   3c906:	f7ff ff56 	bl	3c7b6 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   3c90a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   3c90c:	1b11      	subs	r1, r2, r4
	chunksz_t rsz = sz0 - lsz;
   3c90e:	4405      	add	r5, r0
   3c910:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3c914:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   3c916:	8060      	strh	r0, [r4, #2]
   3c918:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3c91c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   3c91e:	8044      	strh	r4, [r0, #2]
   3c920:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   3c924:	4618      	mov	r0, r3
   3c926:	4611      	mov	r1, r2
   3c928:	f7ff ff45 	bl	3c7b6 <chunk_size>
	void *cmem = &buf[c];
   3c92c:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   3c92e:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   3c932:	bd38      	pop	{r3, r4, r5, pc}

0003c934 <free_chunk>:
{
   3c934:	b538      	push	{r3, r4, r5, lr}
   3c936:	4605      	mov	r5, r0
   3c938:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   3c93a:	f7ff ff3c 	bl	3c7b6 <chunk_size>
   3c93e:	1821      	adds	r1, r4, r0
		return ((uint16_t *)cmem)[f];
   3c940:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3c944:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   3c946:	07da      	lsls	r2, r3, #31
   3c948:	d40b      	bmi.n	3c962 <free_chunk+0x2e>
		free_list_remove(h, right_chunk(h, c));
   3c94a:	4628      	mov	r0, r5
   3c94c:	f7ff ff7c 	bl	3c848 <free_list_remove>
	return c + chunk_size(h, c);
   3c950:	4621      	mov	r1, r4
   3c952:	4628      	mov	r0, r5
   3c954:	f7ff ff2f 	bl	3c7b6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   3c958:	4621      	mov	r1, r4
   3c95a:	1822      	adds	r2, r4, r0
   3c95c:	4628      	mov	r0, r5
   3c95e:	f7ff ffb8 	bl	3c8d2 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   3c962:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   3c966:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   3c968:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3c96c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   3c96e:	07db      	lsls	r3, r3, #31
   3c970:	d40c      	bmi.n	3c98c <free_chunk+0x58>
		free_list_remove(h, left_chunk(h, c));
   3c972:	4628      	mov	r0, r5
   3c974:	f7ff ff68 	bl	3c848 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   3c978:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   3c97c:	4622      	mov	r2, r4
   3c97e:	1a61      	subs	r1, r4, r1
   3c980:	4628      	mov	r0, r5
   3c982:	f7ff ffa6 	bl	3c8d2 <merge_chunks>
   3c986:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   3c98a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   3c98c:	4621      	mov	r1, r4
   3c98e:	4628      	mov	r0, r5
}
   3c990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   3c994:	f7ff bf14 	b.w	3c7c0 <free_list_add>

0003c998 <sys_heap_alloc>:
{
   3c998:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   3c99a:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   3c99c:	b909      	cbnz	r1, 3c9a2 <sys_heap_alloc+0xa>
		return NULL;
   3c99e:	2000      	movs	r0, #0
}
   3c9a0:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   3c9a2:	68ab      	ldr	r3, [r5, #8]
   3c9a4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   3c9a8:	d9f9      	bls.n	3c99e <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   3c9aa:	310b      	adds	r1, #11
   3c9ac:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   3c9ae:	4621      	mov	r1, r4
   3c9b0:	4628      	mov	r0, r5
   3c9b2:	f7ff ff58 	bl	3c866 <alloc_chunk>
	if (c == 0U) {
   3c9b6:	4606      	mov	r6, r0
   3c9b8:	2800      	cmp	r0, #0
   3c9ba:	d0f0      	beq.n	3c99e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   3c9bc:	4601      	mov	r1, r0
   3c9be:	4628      	mov	r0, r5
   3c9c0:	f7ff fef9 	bl	3c7b6 <chunk_size>
   3c9c4:	42a0      	cmp	r0, r4
   3c9c6:	d909      	bls.n	3c9dc <sys_heap_alloc+0x44>
		split_chunks(h, c, c + chunk_sz);
   3c9c8:	4434      	add	r4, r6
   3c9ca:	4631      	mov	r1, r6
   3c9cc:	4628      	mov	r0, r5
   3c9ce:	4622      	mov	r2, r4
   3c9d0:	f7ff ff96 	bl	3c900 <split_chunks>
		free_list_add(h, c + chunk_sz);
   3c9d4:	4621      	mov	r1, r4
   3c9d6:	4628      	mov	r0, r5
   3c9d8:	f7ff fef2 	bl	3c7c0 <free_list_add>
	void *cmem = &buf[c];
   3c9dc:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   3c9e0:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   3c9e2:	8853      	ldrh	r3, [r2, #2]
   3c9e4:	3004      	adds	r0, #4
   3c9e6:	f043 0301 	orr.w	r3, r3, #1
   3c9ea:	8053      	strh	r3, [r2, #2]
	return mem;
   3c9ec:	e7d8      	b.n	3c9a0 <sys_heap_alloc+0x8>

0003c9ee <_ldiv5>:
	uint32_t v_lo = *v;
   3c9ee:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   3c9f2:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   3c9f4:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   3c9f8:	fba2 2403 	umull	r2, r4, r2, r3
   3c9fc:	18d5      	adds	r5, r2, r3
   3c9fe:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   3ca02:	fba1 1303 	umull	r1, r3, r1, r3
   3ca06:	1852      	adds	r2, r2, r1
   3ca08:	eb44 0403 	adc.w	r4, r4, r3
   3ca0c:	1952      	adds	r2, r2, r5
   3ca0e:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   3ca12:	1889      	adds	r1, r1, r2
   3ca14:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   3ca18:	e9c0 1300 	strd	r1, r3, [r0]
}
   3ca1c:	bd30      	pop	{r4, r5, pc}

0003ca1e <_get_digit>:
	if (*digit_count > 0) {
   3ca1e:	680b      	ldr	r3, [r1, #0]
{
   3ca20:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   3ca22:	2b00      	cmp	r3, #0
   3ca24:	dd10      	ble.n	3ca48 <_get_digit+0x2a>
		*fr *= 10U;
   3ca26:	220a      	movs	r2, #10
		--*digit_count;
   3ca28:	3b01      	subs	r3, #1
   3ca2a:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   3ca2c:	6803      	ldr	r3, [r0, #0]
   3ca2e:	6844      	ldr	r4, [r0, #4]
   3ca30:	fba3 1302 	umull	r1, r3, r3, r2
   3ca34:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
   3ca38:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
   3ca3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   3ca3e:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   3ca42:	3230      	adds	r2, #48	; 0x30
}
   3ca44:	4610      	mov	r0, r2
   3ca46:	bd10      	pop	{r4, pc}
		rval = '0';
   3ca48:	2230      	movs	r2, #48	; 0x30
   3ca4a:	e7fb      	b.n	3ca44 <_get_digit+0x26>

0003ca4c <outs>:
{
   3ca4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ca50:	4680      	mov	r8, r0
   3ca52:	4689      	mov	r9, r1
   3ca54:	4616      	mov	r6, r2
   3ca56:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3ca58:	4615      	mov	r5, r2
   3ca5a:	42bd      	cmp	r5, r7
   3ca5c:	eba5 0406 	sub.w	r4, r5, r6
   3ca60:	d305      	bcc.n	3ca6e <outs+0x22>
   3ca62:	b10f      	cbz	r7, 3ca68 <outs+0x1c>
	return (int)count;
   3ca64:	4620      	mov	r0, r4
   3ca66:	e008      	b.n	3ca7a <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3ca68:	782b      	ldrb	r3, [r5, #0]
   3ca6a:	2b00      	cmp	r3, #0
   3ca6c:	d0fa      	beq.n	3ca64 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   3ca6e:	4649      	mov	r1, r9
   3ca70:	f815 0b01 	ldrb.w	r0, [r5], #1
   3ca74:	47c0      	blx	r8
		if (rc < 0) {
   3ca76:	2800      	cmp	r0, #0
   3ca78:	daef      	bge.n	3ca5a <outs+0xe>
}
   3ca7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003ca7e <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   3ca7e:	4040      	eors	r0, r0
   3ca80:	f380 8811 	msr	BASEPRI, r0
   3ca84:	f04f 0004 	mov.w	r0, #4
   3ca88:	df02      	svc	2
}
   3ca8a:	4770      	bx	lr

0003ca8c <assert_print>:

void assert_print(const char *fmt, ...)
{
   3ca8c:	b40f      	push	{r0, r1, r2, r3}
   3ca8e:	b507      	push	{r0, r1, r2, lr}
   3ca90:	a904      	add	r1, sp, #16
   3ca92:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   3ca96:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   3ca98:	f7e4 f898 	bl	20bcc <vprintk>

	va_end(ap);
}
   3ca9c:	b003      	add	sp, #12
   3ca9e:	f85d eb04 	ldr.w	lr, [sp], #4
   3caa2:	b004      	add	sp, #16
   3caa4:	4770      	bx	lr

0003caa6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   3caa6:	4770      	bx	lr

0003caa8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   3caa8:	2806      	cmp	r0, #6
   3caaa:	d108      	bne.n	3cabe <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   3caac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   3cab0:	2201      	movs	r2, #1
   3cab2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   3cab6:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   3caba:	bf20      	wfe
    while (true)
   3cabc:	e7fd      	b.n	3caba <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   3cabe:	4770      	bx	lr

0003cac0 <pm_state_exit_post_ops>:
   3cac0:	2300      	movs	r3, #0
   3cac2:	f383 8811 	msr	BASEPRI, r3
   3cac6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   3caca:	4770      	bx	lr

0003cacc <soc_secure_mem_read>:
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
#endif /* defined(GPIO_PIN_CNF_MCUSEL_Msk) */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   3cacc:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   3cace:	ab01      	add	r3, sp, #4
   3cad0:	f004 fc1f 	bl	41312 <tfm_platform_mem_read>

	switch (status) {
   3cad4:	2802      	cmp	r0, #2
   3cad6:	d00a      	beq.n	3caee <soc_secure_mem_read+0x22>
   3cad8:	2803      	cmp	r0, #3
   3cada:	d00b      	beq.n	3caf4 <soc_secure_mem_read+0x28>
   3cadc:	b968      	cbnz	r0, 3cafa <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   3cade:	9801      	ldr	r0, [sp, #4]
   3cae0:	3800      	subs	r0, #0
   3cae2:	bf18      	it	ne
   3cae4:	2001      	movne	r0, #1
   3cae6:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   3cae8:	b003      	add	sp, #12
   3caea:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   3caee:	f06f 0015 	mvn.w	r0, #21
   3caf2:	e7f9      	b.n	3cae8 <soc_secure_mem_read+0x1c>
	switch (status) {
   3caf4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3caf8:	e7f6      	b.n	3cae8 <soc_secure_mem_read+0x1c>
		return -EPERM;
   3cafa:	f04f 30ff 	mov.w	r0, #4294967295
   3cafe:	e7f3      	b.n	3cae8 <soc_secure_mem_read+0x1c>

0003cb00 <z_log_minimal_printk>:
{
   3cb00:	b40f      	push	{r0, r1, r2, r3}
   3cb02:	b507      	push	{r0, r1, r2, lr}
   3cb04:	a904      	add	r1, sp, #16
   3cb06:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3cb0a:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   3cb0c:	f7e4 f85e 	bl	20bcc <vprintk>
}
   3cb10:	b003      	add	sp, #12
   3cb12:	f85d eb04 	ldr.w	lr, [sp], #4
   3cb16:	b004      	add	sp, #16
   3cb18:	4770      	bx	lr

0003cb1a <fcb_len_in_flash.isra.0>:
int fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len);
int fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
	if (fcb->f_align <= 1U) {
   3cb1a:	2801      	cmp	r0, #1
		return len;
	}
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3cb1c:	bf89      	itett	hi
   3cb1e:	f100 33ff 	addhi.w	r3, r0, #4294967295
		return len;
   3cb22:	4608      	movls	r0, r1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3cb24:	18c9      	addhi	r1, r1, r3
   3cb26:	4240      	neghi	r0, r0
   3cb28:	bf88      	it	hi
   3cb2a:	4008      	andhi	r0, r1
}
   3cb2c:	4770      	bx	lr

0003cb2e <fcb_append_to_scratch>:
{
   3cb2e:	b538      	push	{r3, r4, r5, lr}
   3cb30:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   3cb32:	6a41      	ldr	r1, [r0, #36]	; 0x24
   3cb34:	f000 fa44 	bl	3cfc0 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   3cb38:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   3cb3a:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   3cb3c:	4298      	cmp	r0, r3
   3cb3e:	d00f      	beq.n	3cb60 <fcb_append_to_scratch+0x32>
	if (!sector) {
   3cb40:	b170      	cbz	r0, 3cb60 <fcb_append_to_scratch+0x32>
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3cb42:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   3cb44:	4601      	mov	r1, r0
   3cb46:	3201      	adds	r2, #1
   3cb48:	4620      	mov	r0, r4
   3cb4a:	b292      	uxth	r2, r2
   3cb4c:	f000 f8c7 	bl	3ccde <fcb_sector_hdr_init>
	if (rc) {
   3cb50:	b928      	cbnz	r0, 3cb5e <fcb_append_to_scratch+0x30>
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3cb52:	2308      	movs	r3, #8
   3cb54:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   3cb56:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   3cb58:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   3cb5a:	3301      	adds	r3, #1
   3cb5c:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   3cb5e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSPC;
   3cb60:	f06f 001b 	mvn.w	r0, #27
   3cb64:	e7fb      	b.n	3cb5e <fcb_append_to_scratch+0x30>

0003cb66 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   3cb66:	b5f0      	push	{r4, r5, r6, r7, lr}
   3cb68:	b083      	sub	sp, #12
   3cb6a:	4604      	mov	r4, r0
   3cb6c:	460d      	mov	r5, r1
	int rc;
	uint8_t crc8[fcb->f_align];
   3cb6e:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
{
   3cb72:	af02      	add	r7, sp, #8
	uint8_t crc8[fcb->f_align];
   3cb74:	1dd3      	adds	r3, r2, #7
   3cb76:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   3cb7a:	ebad 0d03 	sub.w	sp, sp, r3
   3cb7e:	ae02      	add	r6, sp, #8
__ssp_bos_icheck3(memset, void *, int)
   3cb80:	21ff      	movs	r1, #255	; 0xff
   3cb82:	4630      	mov	r0, r6
   3cb84:	f004 fc56 	bl	41434 <memset>
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   3cb88:	4632      	mov	r2, r6
   3cb8a:	4629      	mov	r1, r5
   3cb8c:	4620      	mov	r0, r4
   3cb8e:	f000 f96d 	bl	3ce6c <fcb_elem_crc8>
	if (rc) {
   3cb92:	b988      	cbnz	r0, 3cbb8 <fcb_append_finish+0x52>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3cb94:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
   3cb98:	89a9      	ldrh	r1, [r5, #12]
   3cb9a:	4610      	mov	r0, r2
   3cb9c:	f7ff ffbd 	bl	3cb1a <fcb_len_in_flash.isra.0>
   3cba0:	68a9      	ldr	r1, [r5, #8]

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   3cba2:	9200      	str	r2, [sp, #0]
   3cba4:	4633      	mov	r3, r6
   3cba6:	1842      	adds	r2, r0, r1
   3cba8:	4620      	mov	r0, r4
   3cbaa:	6829      	ldr	r1, [r5, #0]
   3cbac:	f000 f823 	bl	3cbf6 <fcb_flash_write>
	if (rc) {
		return -EIO;
   3cbb0:	2800      	cmp	r0, #0
   3cbb2:	bf18      	it	ne
   3cbb4:	f06f 0004 	mvnne.w	r0, #4
	}
	return 0;
}
   3cbb8:	3704      	adds	r7, #4
   3cbba:	46bd      	mov	sp, r7
   3cbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003cbbe <fcb_get_align>:
uint8_t
fcb_get_align(const struct fcb *fcb)
{
	uint8_t align;

	if (fcb->fap == NULL) {
   3cbbe:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   3cbc0:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   3cbc2:	b110      	cbz	r0, 3cbca <fcb_get_align+0xc>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   3cbc4:	f000 fc5a 	bl	3d47c <flash_area_align>
   3cbc8:	b2c0      	uxtb	r0, r0

	return align;
}
   3cbca:	bd08      	pop	{r3, pc}

0003cbcc <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   3cbcc:	b570      	push	{r4, r5, r6, lr}
   3cbce:	4614      	mov	r4, r2
   3cbd0:	461a      	mov	r2, r3
   3cbd2:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   3cbd4:	684d      	ldr	r5, [r1, #4]
   3cbd6:	18e6      	adds	r6, r4, r3
   3cbd8:	42ae      	cmp	r6, r5
   3cbda:	d809      	bhi.n	3cbf0 <fcb_flash_read+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   3cbdc:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3cbde:	b120      	cbz	r0, 3cbea <fcb_flash_read+0x1e>
		return -EIO;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   3cbe0:	6809      	ldr	r1, [r1, #0]
   3cbe2:	4421      	add	r1, r4
   3cbe4:	f000 fbfb 	bl	3d3de <flash_area_read>

	if (rc != 0) {
   3cbe8:	b108      	cbz	r0, 3cbee <fcb_flash_read+0x22>
		return -EIO;
   3cbea:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3cbee:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3cbf0:	f06f 0015 	mvn.w	r0, #21
   3cbf4:	e7fb      	b.n	3cbee <fcb_flash_read+0x22>

0003cbf6 <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   3cbf6:	b570      	push	{r4, r5, r6, lr}
   3cbf8:	4614      	mov	r4, r2
   3cbfa:	461a      	mov	r2, r3
   3cbfc:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   3cbfe:	684d      	ldr	r5, [r1, #4]
   3cc00:	18e6      	adds	r6, r4, r3
   3cc02:	42ae      	cmp	r6, r5
   3cc04:	d809      	bhi.n	3cc1a <fcb_flash_write+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   3cc06:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3cc08:	b120      	cbz	r0, 3cc14 <fcb_flash_write+0x1e>
		return -EIO;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   3cc0a:	6809      	ldr	r1, [r1, #0]
   3cc0c:	4421      	add	r1, r4
   3cc0e:	f000 fc02 	bl	3d416 <flash_area_write>

	if (rc != 0) {
   3cc12:	b108      	cbz	r0, 3cc18 <fcb_flash_write+0x22>
		return -EIO;
   3cc14:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3cc18:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3cc1a:	f06f 0015 	mvn.w	r0, #21
   3cc1e:	e7fb      	b.n	3cc18 <fcb_flash_write+0x22>

0003cc20 <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   3cc20:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   3cc22:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   3cc24:	b120      	cbz	r0, 3cc30 <fcb_erase_sector+0x10>
		return -EIO;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   3cc26:	e9d1 1200 	ldrd	r1, r2, [r1]
   3cc2a:	f000 fc10 	bl	3d44e <flash_area_erase>

	if (rc != 0) {
   3cc2e:	b108      	cbz	r0, 3cc34 <fcb_erase_sector+0x14>
		return -EIO;
   3cc30:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3cc34:	bd08      	pop	{r3, pc}

0003cc36 <fcb_free_sector_cnt>:
	return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   3cc36:	b538      	push	{r3, r4, r5, lr}
   3cc38:	4604      	mov	r4, r0
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3cc3a:	2500      	movs	r5, #0
	fa = fcb->f_active.fe_sector;
   3cc3c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3cc3e:	7963      	ldrb	r3, [r4, #5]
   3cc40:	42ab      	cmp	r3, r5
   3cc42:	dc01      	bgt.n	3cc48 <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   3cc44:	4628      	mov	r0, r5
   3cc46:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   3cc48:	4620      	mov	r0, r4
   3cc4a:	f000 f9b9 	bl	3cfc0 <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   3cc4e:	6a23      	ldr	r3, [r4, #32]
		fa = fcb_getnext_sector(fcb, fa);
   3cc50:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   3cc52:	4283      	cmp	r3, r0
   3cc54:	d0f6      	beq.n	3cc44 <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3cc56:	3501      	adds	r5, #1
   3cc58:	e7f1      	b.n	3cc3e <fcb_free_sector_cnt+0x8>

0003cc5a <fcb_put_len>:
 * and if there is any data at all or both bytes are equal to erase value.
 */
int
fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len)
{
	if (len < 0x80) {
   3cc5a:	2a7f      	cmp	r2, #127	; 0x7f
{
   3cc5c:	b510      	push	{r4, lr}
	if (len < 0x80) {
   3cc5e:	d806      	bhi.n	3cc6e <fcb_put_len+0x14>
		buf[0] = len ^ ~fcb->f_erase_value;
   3cc60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 1;
   3cc64:	2001      	movs	r0, #1
		buf[0] = len ^ ~fcb->f_erase_value;
   3cc66:	405a      	eors	r2, r3
   3cc68:	43d2      	mvns	r2, r2
   3cc6a:	700a      	strb	r2, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
		return 2;
	} else {
		return -EINVAL;
	}
}
   3cc6c:	bd10      	pop	{r4, pc}
	} else if (len < FCB_MAX_LEN) {
   3cc6e:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   3cc72:	429a      	cmp	r2, r3
   3cc74:	d80e      	bhi.n	3cc94 <fcb_put_len+0x3a>
		buf[0] = (len | 0x80) ^ ~fcb->f_erase_value;
   3cc76:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   3cc7a:	f062 047f 	orn	r4, r2, #127	; 0x7f
   3cc7e:	4063      	eors	r3, r4
   3cc80:	43db      	mvns	r3, r3
   3cc82:	700b      	strb	r3, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   3cc84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 2;
   3cc88:	2002      	movs	r0, #2
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   3cc8a:	ea83 12d2 	eor.w	r2, r3, r2, lsr #7
   3cc8e:	43d2      	mvns	r2, r2
   3cc90:	704a      	strb	r2, [r1, #1]
		return 2;
   3cc92:	e7eb      	b.n	3cc6c <fcb_put_len+0x12>
		return -EINVAL;
   3cc94:	f06f 0015 	mvn.w	r0, #21
   3cc98:	e7e8      	b.n	3cc6c <fcb_put_len+0x12>

0003cc9a <fcb_get_len>:

int
fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len)
{
   3cc9a:	b530      	push	{r4, r5, lr}
	int rc;

	if ((buf[0] ^ ~fcb->f_erase_value) & 0x80) {
   3cc9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   3cca0:	780d      	ldrb	r5, [r1, #0]
   3cca2:	ea83 0405 	eor.w	r4, r3, r5
   3cca6:	f014 0f80 	tst.w	r4, #128	; 0x80
   3ccaa:	4620      	mov	r0, r4
   3ccac:	d10f      	bne.n	3ccce <fcb_get_len+0x34>
		if ((buf[0] == fcb->f_erase_value) &&
   3ccae:	42ab      	cmp	r3, r5
		    (buf[1] == fcb->f_erase_value)) {
   3ccb0:	7849      	ldrb	r1, [r1, #1]
		if ((buf[0] == fcb->f_erase_value) &&
   3ccb2:	d101      	bne.n	3ccb8 <fcb_get_len+0x1e>
   3ccb4:	428b      	cmp	r3, r1
   3ccb6:	d00f      	beq.n	3ccd8 <fcb_get_len+0x3e>
			return -ENOTSUP;
		}
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3ccb8:	43c0      	mvns	r0, r0
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   3ccba:	404b      	eors	r3, r1
   3ccbc:	01db      	lsls	r3, r3, #7
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3ccbe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   3ccc2:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3ccc6:	4303      	orrs	r3, r0
		rc = 2;
   3ccc8:	2002      	movs	r0, #2
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3ccca:	8013      	strh	r3, [r2, #0]
	} else {
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
		rc = 1;
	}
	return rc;
}
   3cccc:	bd30      	pop	{r4, r5, pc}
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   3ccce:	43e3      	mvns	r3, r4
   3ccd0:	b2db      	uxtb	r3, r3
		rc = 1;
   3ccd2:	2001      	movs	r0, #1
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   3ccd4:	8013      	strh	r3, [r2, #0]
		rc = 1;
   3ccd6:	e7f9      	b.n	3cccc <fcb_get_len+0x32>
			return -ENOTSUP;
   3ccd8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3ccdc:	e7f6      	b.n	3cccc <fcb_get_len+0x32>

0003ccde <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, uint16_t id)
{
   3ccde:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const uint8_t ev = fcb->f_erase_value;
   3cce0:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
	return (fcb->f_magic ^ ~MK32(ev));
   3cce4:	6806      	ldr	r6, [r0, #0]
   3cce6:	0423      	lsls	r3, r4, #16
   3cce8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   3ccec:	4323      	orrs	r3, r4
   3ccee:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   3ccf2:	4073      	eors	r3, r6
   3ccf4:	43db      	mvns	r3, r3
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb_flash_magic(fcb);
   3ccf6:	9302      	str	r3, [sp, #8]
	fda.fd_ver = fcb->f_version;
   3ccf8:	7903      	ldrb	r3, [r0, #4]
	fda._pad = fcb->f_erase_value;
	fda.fd_id = id;
   3ccfa:	f8ad 200e 	strh.w	r2, [sp, #14]
	fda.fd_ver = fcb->f_version;
   3ccfe:	f88d 300c 	strb.w	r3, [sp, #12]

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   3cd02:	2308      	movs	r3, #8
   3cd04:	2200      	movs	r2, #0
   3cd06:	9300      	str	r3, [sp, #0]
   3cd08:	446b      	add	r3, sp
	fda._pad = fcb->f_erase_value;
   3cd0a:	f88d 400d 	strb.w	r4, [sp, #13]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   3cd0e:	f7ff ff72 	bl	3cbf6 <fcb_flash_write>
	if (rc != 0) {
		return -EIO;
   3cd12:	2800      	cmp	r0, #0
	}
	return 0;
}
   3cd14:	bf18      	it	ne
   3cd16:	f06f 0004 	mvnne.w	r0, #4
   3cd1a:	b004      	add	sp, #16
   3cd1c:	bd70      	pop	{r4, r5, r6, pc}

0003cd1e <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   3cd1e:	b530      	push	{r4, r5, lr}
   3cd20:	4605      	mov	r5, r0
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   3cd22:	4614      	mov	r4, r2
{
   3cd24:	b085      	sub	sp, #20
	if (!fdap) {
   3cd26:	b902      	cbnz	r2, 3cd2a <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   3cd28:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   3cd2a:	2308      	movs	r3, #8
   3cd2c:	2200      	movs	r2, #0
   3cd2e:	9300      	str	r3, [sp, #0]
   3cd30:	4628      	mov	r0, r5
   3cd32:	4623      	mov	r3, r4
   3cd34:	f7ff ff4a 	bl	3cbcc <fcb_flash_read>
	if (rc) {
   3cd38:	b9a0      	cbnz	r0, 3cd64 <fcb_sector_hdr_read+0x46>
		return -EIO;
	}
	if (fdap->fd_magic == MK32(fcb->f_erase_value)) {
   3cd3a:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
   3cd3e:	6821      	ldr	r1, [r4, #0]
   3cd40:	0413      	lsls	r3, r2, #16
   3cd42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   3cd46:	4313      	orrs	r3, r2
   3cd48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3cd4c:	4299      	cmp	r1, r3
   3cd4e:	d007      	beq.n	3cd60 <fcb_sector_hdr_read+0x42>
   3cd50:	682a      	ldr	r2, [r5, #0]
   3cd52:	4053      	eors	r3, r2
   3cd54:	43db      	mvns	r3, r3
		return 0;
	}
	if (fdap->fd_magic != fcb_flash_magic(fcb)) {
		return -ENOMSG;
   3cd56:	4299      	cmp	r1, r3
   3cd58:	bf0c      	ite	eq
   3cd5a:	2001      	moveq	r0, #1
   3cd5c:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	}
	return 1;
}
   3cd60:	b005      	add	sp, #20
   3cd62:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   3cd64:	f06f 0004 	mvn.w	r0, #4
   3cd68:	e7fa      	b.n	3cd60 <fcb_sector_hdr_read+0x42>

0003cd6a <fcb_init>:
{
   3cd6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3cd6e:	688b      	ldr	r3, [r1, #8]
{
   3cd70:	460c      	mov	r4, r1
   3cd72:	b085      	sub	sp, #20
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3cd74:	b92b      	cbnz	r3, 3cd82 <fcb_init+0x18>
		return -EINVAL;
   3cd76:	f06f 0515 	mvn.w	r5, #21
}
   3cd7a:	4628      	mov	r0, r5
   3cd7c:	b005      	add	sp, #20
   3cd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3cd82:	794b      	ldrb	r3, [r1, #5]
   3cd84:	798a      	ldrb	r2, [r1, #6]
   3cd86:	1a9b      	subs	r3, r3, r2
   3cd88:	2b00      	cmp	r3, #0
   3cd8a:	ddf4      	ble.n	3cd76 <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   3cd8c:	3138      	adds	r1, #56	; 0x38
   3cd8e:	b2c0      	uxtb	r0, r0
   3cd90:	f7e4 ff60 	bl	21c54 <flash_area_open>
	if (rc != 0) {
   3cd94:	4606      	mov	r6, r0
   3cd96:	2800      	cmp	r0, #0
   3cd98:	d1ed      	bne.n	3cd76 <fcb_init+0xc>
	dev = device_get_binding(fcb->fap->fa_dev_name);
   3cd9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3cd9c:	68d8      	ldr	r0, [r3, #12]
   3cd9e:	f7f9 f895 	bl	35ecc <z_impl_device_get_binding>
	return api->get_parameters(dev);
   3cda2:	6883      	ldr	r3, [r0, #8]
   3cda4:	68db      	ldr	r3, [r3, #12]
   3cda6:	4798      	blx	r3
	fcb->f_erase_value = fparam->erase_value;
   3cda8:	7903      	ldrb	r3, [r0, #4]
	align = fcb_get_align(fcb);
   3cdaa:	4620      	mov	r0, r4
	fcb->f_erase_value = fparam->erase_value;
   3cdac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	align = fcb_get_align(fcb);
   3cdb0:	f7ff ff05 	bl	3cbbe <fcb_get_align>
	if (align == 0U) {
   3cdb4:	4681      	mov	r9, r0
   3cdb6:	2800      	cmp	r0, #0
   3cdb8:	d0dd      	beq.n	3cd76 <fcb_init+0xc>
	int oldest = -1, newest = -1;
   3cdba:	f04f 3bff 	mov.w	fp, #4294967295
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   3cdbe:	46b2      	mov	sl, r6
   3cdc0:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   3cdc2:	46d8      	mov	r8, fp
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3cdc4:	7963      	ldrb	r3, [r4, #5]
   3cdc6:	42b3      	cmp	r3, r6
   3cdc8:	dc24      	bgt.n	3ce14 <fcb_init+0xaa>
	if (oldest < 0) {
   3cdca:	f1b8 3fff 	cmp.w	r8, #4294967295
   3cdce:	d149      	bne.n	3ce64 <fcb_init+0xfa>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   3cdd0:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   3cdd2:	2200      	movs	r2, #0
   3cdd4:	4639      	mov	r1, r7
   3cdd6:	4620      	mov	r0, r4
   3cdd8:	f7ff ff81 	bl	3ccde <fcb_sector_hdr_init>
		if (rc) {
   3cddc:	4605      	mov	r5, r0
   3cdde:	2800      	cmp	r0, #0
   3cde0:	d1cb      	bne.n	3cd7a <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   3cde2:	46ba      	mov	sl, r7
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3cde4:	2308      	movs	r3, #8
	fcb->f_active.fe_sector = newest_sector;
   3cde6:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_align = align;
   3cdea:	f884 9036 	strb.w	r9, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3cdee:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   3cdf0:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   3cdf2:	f104 0624 	add.w	r6, r4, #36	; 0x24
   3cdf6:	4631      	mov	r1, r6
   3cdf8:	4620      	mov	r0, r4
   3cdfa:	f000 f8be 	bl	3cf7a <fcb_getnext_in_sector>
		if (rc == -ENOTSUP) {
   3cdfe:	f110 0f86 	cmn.w	r0, #134	; 0x86
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   3ce02:	4605      	mov	r5, r0
		if (rc == -ENOTSUP) {
   3ce04:	d030      	beq.n	3ce68 <fcb_init+0xfe>
		if (rc != 0) {
   3ce06:	2800      	cmp	r0, #0
   3ce08:	d0f5      	beq.n	3cdf6 <fcb_init+0x8c>
	return z_impl_k_mutex_init(mutex);
   3ce0a:	f104 000c 	add.w	r0, r4, #12
   3ce0e:	f004 f8c7 	bl	40fa0 <z_impl_k_mutex_init>
   3ce12:	e7b2      	b.n	3cd7a <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   3ce14:	68a1      	ldr	r1, [r4, #8]
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   3ce16:	4620      	mov	r0, r4
		sector = &fcb->f_sectors[i];
   3ce18:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   3ce1c:	aa02      	add	r2, sp, #8
   3ce1e:	9101      	str	r1, [sp, #4]
   3ce20:	f7ff ff7d 	bl	3cd1e <fcb_sector_hdr_read>
		if (rc < 0) {
   3ce24:	1e05      	subs	r5, r0, #0
   3ce26:	dba8      	blt.n	3cd7a <fcb_init+0x10>
		if (rc == 0) {
   3ce28:	d009      	beq.n	3ce3e <fcb_init+0xd4>
		if (oldest < 0) {
   3ce2a:	f1b8 3fff 	cmp.w	r8, #4294967295
			oldest = newest = fda.fd_id;
   3ce2e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		if (oldest < 0) {
   3ce32:	9901      	ldr	r1, [sp, #4]
   3ce34:	d105      	bne.n	3ce42 <fcb_init+0xd8>
			oldest = newest = fda.fd_id;
   3ce36:	4698      	mov	r8, r3
			oldest_sector = newest_sector = sector;
   3ce38:	468a      	mov	sl, r1
   3ce3a:	460f      	mov	r7, r1
			oldest = newest = fda.fd_id;
   3ce3c:	469b      	mov	fp, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3ce3e:	3601      	adds	r6, #1
   3ce40:	e7c0      	b.n	3cdc4 <fcb_init+0x5a>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   3ce42:	b21d      	sxth	r5, r3
   3ce44:	fa0f f08b 	sxth.w	r0, fp
   3ce48:	1a28      	subs	r0, r5, r0
   3ce4a:	2800      	cmp	r0, #0
   3ce4c:	dd02      	ble.n	3ce54 <fcb_init+0xea>
			newest = fda.fd_id;
   3ce4e:	469b      	mov	fp, r3
			newest_sector = sector;
   3ce50:	468a      	mov	sl, r1
   3ce52:	e7f4      	b.n	3ce3e <fcb_init+0xd4>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   3ce54:	fa0f f288 	sxth.w	r2, r8
   3ce58:	1b52      	subs	r2, r2, r5
			oldest = fda.fd_id;
   3ce5a:	2a00      	cmp	r2, #0
   3ce5c:	bfc4      	itt	gt
   3ce5e:	4698      	movgt	r8, r3
   3ce60:	460f      	movgt	r7, r1
   3ce62:	e7ec      	b.n	3ce3e <fcb_init+0xd4>
   3ce64:	465d      	mov	r5, fp
   3ce66:	e7bd      	b.n	3cde4 <fcb_init+0x7a>
			rc = 0;
   3ce68:	2500      	movs	r5, #0
   3ce6a:	e7ce      	b.n	3ce0a <fcb_init+0xa0>

0003ce6c <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   3ce6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ce70:	460c      	mov	r4, r1
   3ce72:	4617      	mov	r7, r2
	uint16_t len;
	uint32_t off;
	uint32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   3ce74:	e9d1 1200 	ldrd	r1, r2, [r1]
   3ce78:	684b      	ldr	r3, [r1, #4]
   3ce7a:	1c95      	adds	r5, r2, #2
   3ce7c:	429d      	cmp	r5, r3
{
   3ce7e:	4606      	mov	r6, r0
   3ce80:	b08c      	sub	sp, #48	; 0x30
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   3ce82:	d84c      	bhi.n	3cf1e <fcb_elem_crc8+0xb2>
		return -ENOTSUP;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   3ce84:	2302      	movs	r3, #2
   3ce86:	9300      	str	r3, [sp, #0]
   3ce88:	ab04      	add	r3, sp, #16
   3ce8a:	f7ff fe9f 	bl	3cbcc <fcb_flash_read>
	if (rc) {
   3ce8e:	b120      	cbz	r0, 3ce9a <fcb_elem_crc8+0x2e>
		return -EIO;
   3ce90:	f06f 0004 	mvn.w	r0, #4
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   3ce94:	b00c      	add	sp, #48	; 0x30
   3ce96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(fcb, tmp_str, &len);
   3ce9a:	4630      	mov	r0, r6
   3ce9c:	f10d 020e 	add.w	r2, sp, #14
   3cea0:	a904      	add	r1, sp, #16
   3cea2:	f7ff fefa 	bl	3cc9a <fcb_get_len>
	if (cnt < 0) {
   3cea6:	2800      	cmp	r0, #0
   3cea8:	dbf4      	blt.n	3ce94 <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   3ceaa:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
	if (fcb->f_align <= 1U) {
   3ceae:	b283      	uxth	r3, r0
   3ceb0:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3ceb2:	bf84      	itt	hi
   3ceb4:	f102 35ff 	addhi.w	r5, r2, #4294967295
   3ceb8:	195b      	addhi	r3, r3, r5
   3ceba:	6861      	ldr	r1, [r4, #4]
   3cebc:	bf84      	itt	hi
   3cebe:	4252      	neghi	r2, r2
   3cec0:	4013      	andhi	r3, r2
   3cec2:	440b      	add	r3, r1
   3cec4:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   3cec6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   3ceca:	4602      	mov	r2, r0
	loc->fe_data_len = len;
   3cecc:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   3cece:	20ff      	movs	r0, #255	; 0xff
   3ced0:	a904      	add	r1, sp, #16
   3ced2:	f7e3 fd73 	bl	209bc <crc8_ccitt>
   3ced6:	4605      	mov	r5, r0
	off = loc->fe_data_off;
   3ced8:	f8d4 8008 	ldr.w	r8, [r4, #8]
	end = loc->fe_data_off + len;
   3cedc:	f8bd a00e 	ldrh.w	sl, [sp, #14]
   3cee0:	44c2      	add	sl, r8
	for (; off < end; off += blk_sz) {
   3cee2:	45d0      	cmp	r8, sl
   3cee4:	d302      	bcc.n	3ceec <fcb_elem_crc8+0x80>
	return 0;
   3cee6:	2000      	movs	r0, #0
	*c8p = crc8;
   3cee8:	703d      	strb	r5, [r7, #0]
	return 0;
   3ceea:	e7d3      	b.n	3ce94 <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   3ceec:	ebaa 0908 	sub.w	r9, sl, r8
   3cef0:	f1b9 0f20 	cmp.w	r9, #32
   3cef4:	bf28      	it	cs
   3cef6:	f04f 0920 	movcs.w	r9, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   3cefa:	4642      	mov	r2, r8
   3cefc:	4630      	mov	r0, r6
   3cefe:	6821      	ldr	r1, [r4, #0]
   3cf00:	f8cd 9000 	str.w	r9, [sp]
   3cf04:	ab04      	add	r3, sp, #16
   3cf06:	f7ff fe61 	bl	3cbcc <fcb_flash_read>
		if (rc) {
   3cf0a:	2800      	cmp	r0, #0
   3cf0c:	d1c0      	bne.n	3ce90 <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   3cf0e:	4628      	mov	r0, r5
   3cf10:	464a      	mov	r2, r9
   3cf12:	a904      	add	r1, sp, #16
   3cf14:	f7e3 fd52 	bl	209bc <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   3cf18:	44c8      	add	r8, r9
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   3cf1a:	4605      	mov	r5, r0
	for (; off < end; off += blk_sz) {
   3cf1c:	e7e1      	b.n	3cee2 <fcb_elem_crc8+0x76>
		return -ENOTSUP;
   3cf1e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3cf22:	e7b7      	b.n	3ce94 <fcb_elem_crc8+0x28>

0003cf24 <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   3cf24:	b530      	push	{r4, r5, lr}
   3cf26:	b085      	sub	sp, #20
	int rc;
	uint8_t crc8;
	uint8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   3cf28:	f10d 020e 	add.w	r2, sp, #14
{
   3cf2c:	4605      	mov	r5, r0
   3cf2e:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   3cf30:	f7ff ff9c 	bl	3ce6c <fcb_elem_crc8>
	if (rc) {
   3cf34:	b9e0      	cbnz	r0, 3cf70 <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3cf36:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   3cf3a:	89a2      	ldrh	r2, [r4, #12]
	if (fcb->f_align <= 1U) {
   3cf3c:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3cf3e:	bf81      	itttt	hi
   3cf40:	f102 32ff 	addhi.w	r2, r2, #4294967295
   3cf44:	18d2      	addhi	r2, r2, r3
   3cf46:	425b      	neghi	r3, r3
   3cf48:	401a      	andhi	r2, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   3cf4a:	2301      	movs	r3, #1
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3cf4c:	68a1      	ldr	r1, [r4, #8]
	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   3cf4e:	9300      	str	r3, [sp, #0]
   3cf50:	440a      	add	r2, r1
   3cf52:	4628      	mov	r0, r5
   3cf54:	6821      	ldr	r1, [r4, #0]
   3cf56:	f10d 030f 	add.w	r3, sp, #15
   3cf5a:	f7ff fe37 	bl	3cbcc <fcb_flash_read>
	if (rc) {
   3cf5e:	b948      	cbnz	r0, 3cf74 <fcb_elem_info+0x50>
		return -EIO;
	}

	if (fl_crc8 != crc8) {
   3cf60:	f89d 200f 	ldrb.w	r2, [sp, #15]
   3cf64:	f89d 300e 	ldrb.w	r3, [sp, #14]
		return -EBADMSG;
   3cf68:	429a      	cmp	r2, r3
   3cf6a:	bf18      	it	ne
   3cf6c:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}
	return 0;
}
   3cf70:	b005      	add	sp, #20
   3cf72:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   3cf74:	f06f 0004 	mvn.w	r0, #4
   3cf78:	e7fa      	b.n	3cf70 <fcb_elem_info+0x4c>

0003cf7a <fcb_getnext_in_sector>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   3cf7a:	b538      	push	{r3, r4, r5, lr}
   3cf7c:	4604      	mov	r4, r0
   3cf7e:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   3cf80:	f7ff ffd0 	bl	3cf24 <fcb_elem_info>
	if (rc == 0 || rc == -EBADMSG) {
   3cf84:	b110      	cbz	r0, 3cf8c <fcb_getnext_in_sector+0x12>
   3cf86:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3cf8a:	d118      	bne.n	3cfbe <fcb_getnext_in_sector+0x44>
		do {
			loc->fe_elem_off = loc->fe_data_off +
   3cf8c:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   3cf90:	89ab      	ldrh	r3, [r5, #12]
	if (fcb->f_align <= 1U) {
   3cf92:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3cf94:	bf88      	it	hi
   3cf96:	f103 33ff 	addhi.w	r3, r3, #4294967295
			loc->fe_elem_off = loc->fe_data_off +
   3cf9a:	68aa      	ldr	r2, [r5, #8]
   3cf9c:	bf82      	ittt	hi
   3cf9e:	185b      	addhi	r3, r3, r1
   3cfa0:	4248      	neghi	r0, r1
   3cfa2:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1U) {
   3cfa4:	2901      	cmp	r1, #1
   3cfa6:	4413      	add	r3, r2
		return len;
   3cfa8:	bf92      	itee	ls
   3cfaa:	2201      	movls	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3cfac:	424a      	neghi	r2, r1
   3cfae:	400a      	andhi	r2, r1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   3cfb0:	4413      	add	r3, r2
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   3cfb2:	4629      	mov	r1, r5
   3cfb4:	4620      	mov	r0, r4
			loc->fe_elem_off = loc->fe_data_off +
   3cfb6:	606b      	str	r3, [r5, #4]
			rc = fcb_elem_info(fcb, loc);
   3cfb8:	f7ff ffb4 	bl	3cf24 <fcb_elem_info>
			if (rc != -EBADMSG) {
   3cfbc:	e7e3      	b.n	3cf86 <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == -EBADMSG);
	}
	return rc;
}
   3cfbe:	bd38      	pop	{r3, r4, r5, pc}

0003cfc0 <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   3cfc0:	6882      	ldr	r2, [r0, #8]
   3cfc2:	7943      	ldrb	r3, [r0, #5]
	sector++;
   3cfc4:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   3cfc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   3cfca:	4299      	cmp	r1, r3
   3cfcc:	bf34      	ite	cc
   3cfce:	4608      	movcc	r0, r1
   3cfd0:	4610      	movcs	r0, r2
   3cfd2:	4770      	bx	lr

0003cfd4 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   3cfd4:	680b      	ldr	r3, [r1, #0]
{
   3cfd6:	b570      	push	{r4, r5, r6, lr}
   3cfd8:	4605      	mov	r5, r0
   3cfda:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   3cfdc:	b90b      	cbnz	r3, 3cfe2 <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   3cfde:	6a03      	ldr	r3, [r0, #32]
   3cfe0:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0U) {
   3cfe2:	6863      	ldr	r3, [r4, #4]
   3cfe4:	b95b      	cbnz	r3, 3cffe <fcb_getnext_nolock+0x2a>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3cfe6:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   3cfe8:	4621      	mov	r1, r4
   3cfea:	4628      	mov	r0, r5
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3cfec:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   3cfee:	f7ff ff99 	bl	3cf24 <fcb_elem_info>
		switch (rc) {
   3cff2:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3cff6:	d021      	beq.n	3d03c <fcb_getnext_nolock+0x68>
   3cff8:	b950      	cbnz	r0, 3d010 <fcb_getnext_nolock+0x3c>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   3cffa:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   3cffc:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   3cffe:	4621      	mov	r1, r4
   3d000:	4628      	mov	r0, r5
   3d002:	f7ff ffba 	bl	3cf7a <fcb_getnext_in_sector>
		if (rc == 0) {
   3d006:	2800      	cmp	r0, #0
   3d008:	d0f7      	beq.n	3cffa <fcb_getnext_nolock+0x26>
		if (rc == -ENOTSUP) {
   3d00a:	f110 0f86 	cmn.w	r0, #134	; 0x86
   3d00e:	d113      	bne.n	3d038 <fcb_getnext_nolock+0x64>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d010:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   3d012:	6821      	ldr	r1, [r4, #0]
   3d014:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3d016:	4299      	cmp	r1, r3
   3d018:	d019      	beq.n	3d04e <fcb_getnext_nolock+0x7a>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   3d01a:	4628      	mov	r0, r5
   3d01c:	f7ff ffd0 	bl	3cfc0 <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   3d020:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d022:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   3d026:	4628      	mov	r0, r5
   3d028:	f7ff ff7c 	bl	3cf24 <fcb_elem_info>
			switch (rc) {
   3d02c:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3d030:	d004      	beq.n	3d03c <fcb_getnext_nolock+0x68>
   3d032:	2800      	cmp	r0, #0
   3d034:	d0e1      	beq.n	3cffa <fcb_getnext_nolock+0x26>
   3d036:	e7ec      	b.n	3d012 <fcb_getnext_nolock+0x3e>
	while (rc == -EBADMSG) {
   3d038:	304d      	adds	r0, #77	; 0x4d
   3d03a:	d1de      	bne.n	3cffa <fcb_getnext_nolock+0x26>
		rc = fcb_getnext_in_sector(fcb, loc);
   3d03c:	4621      	mov	r1, r4
   3d03e:	4628      	mov	r0, r5
   3d040:	f7ff ff9b 	bl	3cf7a <fcb_getnext_in_sector>
		if (rc == 0) {
   3d044:	2800      	cmp	r0, #0
   3d046:	d0d8      	beq.n	3cffa <fcb_getnext_nolock+0x26>
		if (rc != -EBADMSG) {
   3d048:	304d      	adds	r0, #77	; 0x4d
   3d04a:	d0f7      	beq.n	3d03c <fcb_getnext_nolock+0x68>
next_sector:
   3d04c:	e7e0      	b.n	3d010 <fcb_getnext_nolock+0x3c>
				return -ENOTSUP;
   3d04e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d052:	e7d3      	b.n	3cffc <fcb_getnext_nolock+0x28>

0003d054 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   3d054:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3d056:	4604      	mov	r4, r0
   3d058:	9101      	str	r1, [sp, #4]
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   3d05a:	f100 050c 	add.w	r5, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   3d05e:	f04f 32ff 	mov.w	r2, #4294967295
   3d062:	f04f 33ff 	mov.w	r3, #4294967295
   3d066:	4628      	mov	r0, r5
   3d068:	f7f9 fc34 	bl	368d4 <z_impl_k_mutex_lock>
	if (rc) {
   3d06c:	b950      	cbnz	r0, 3d084 <fcb_getnext+0x30>
		return -EINVAL;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   3d06e:	4620      	mov	r0, r4
   3d070:	9901      	ldr	r1, [sp, #4]
   3d072:	f7ff ffaf 	bl	3cfd4 <fcb_getnext_nolock>
   3d076:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   3d078:	4628      	mov	r0, r5
   3d07a:	f7f9 fcfd 	bl	36a78 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   3d07e:	4620      	mov	r0, r4
   3d080:	b003      	add	sp, #12
   3d082:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   3d084:	f06f 0415 	mvn.w	r4, #21
   3d088:	e7f9      	b.n	3d07e <fcb_getnext+0x2a>

0003d08a <fcb_rotate>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   3d08a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d08c:	4604      	mov	r4, r0
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   3d08e:	f100 070c 	add.w	r7, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   3d092:	f04f 32ff 	mov.w	r2, #4294967295
   3d096:	f04f 33ff 	mov.w	r3, #4294967295
   3d09a:	4638      	mov	r0, r7
   3d09c:	f7f9 fc1a 	bl	368d4 <z_impl_k_mutex_lock>
	if (rc) {
   3d0a0:	bb48      	cbnz	r0, 3d0f6 <fcb_rotate+0x6c>
		return -EINVAL;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   3d0a2:	4620      	mov	r0, r4
   3d0a4:	6a21      	ldr	r1, [r4, #32]
   3d0a6:	f7ff fdbb 	bl	3cc20 <fcb_erase_sector>
	if (rc) {
   3d0aa:	bb08      	cbnz	r0, 3d0f0 <fcb_rotate+0x66>
		rc = -EIO;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   3d0ac:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   3d0b0:	4299      	cmp	r1, r3
   3d0b2:	d112      	bne.n	3d0da <fcb_rotate+0x50>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d0b4:	4620      	mov	r0, r4
   3d0b6:	f7ff ff83 	bl	3cfc0 <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3d0ba:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   3d0bc:	4601      	mov	r1, r0
   3d0be:	3201      	adds	r2, #1
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d0c0:	4606      	mov	r6, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3d0c2:	b292      	uxth	r2, r2
   3d0c4:	4620      	mov	r0, r4
   3d0c6:	f7ff fe0a 	bl	3ccde <fcb_sector_hdr_init>
		if (rc) {
   3d0ca:	4605      	mov	r5, r0
   3d0cc:	b958      	cbnz	r0, 3d0e6 <fcb_rotate+0x5c>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3d0ce:	2308      	movs	r3, #8
   3d0d0:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   3d0d2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   3d0d4:	6266      	str	r6, [r4, #36]	; 0x24
		fcb->f_active_id++;
   3d0d6:	3301      	adds	r3, #1
   3d0d8:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d0da:	4620      	mov	r0, r4
   3d0dc:	6a21      	ldr	r1, [r4, #32]
   3d0de:	f7ff ff6f 	bl	3cfc0 <fcb_getnext_sector>
   3d0e2:	2500      	movs	r5, #0
   3d0e4:	6220      	str	r0, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   3d0e6:	4638      	mov	r0, r7
   3d0e8:	f7f9 fcc6 	bl	36a78 <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   3d0ec:	4628      	mov	r0, r5
   3d0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = -EIO;
   3d0f0:	f06f 0504 	mvn.w	r5, #4
   3d0f4:	e7f7      	b.n	3d0e6 <fcb_rotate+0x5c>
		return -EINVAL;
   3d0f6:	f06f 0515 	mvn.w	r5, #21
   3d0fa:	e7f7      	b.n	3d0ec <fcb_rotate+0x62>

0003d0fc <sntp_init>:
{
   3d0fc:	b570      	push	{r4, r5, r6, lr}
   3d0fe:	460d      	mov	r5, r1
   3d100:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   3d102:	4604      	mov	r4, r0
   3d104:	b330      	cbz	r0, 3d154 <sntp_init+0x58>
   3d106:	b329      	cbz	r1, 3d154 <sntp_init+0x58>
   3d108:	2214      	movs	r2, #20
   3d10a:	2100      	movs	r1, #0
   3d10c:	f004 f992 	bl	41434 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   3d110:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3d112:	2211      	movs	r2, #17
   3d114:	2102      	movs	r1, #2
   3d116:	f7e4 fbcb 	bl	218b0 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   3d11a:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   3d11c:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   3d11e:	da04      	bge.n	3d12a <sntp_init+0x2e>
		return -errno;
   3d120:	f000 fb2d 	bl	3d77e <__errno>
   3d124:	6800      	ldr	r0, [r0, #0]
   3d126:	4240      	negs	r0, r0
}
   3d128:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   3d12a:	4632      	mov	r2, r6
   3d12c:	4629      	mov	r1, r5
   3d12e:	f000 f854 	bl	3d1da <z_impl_zsock_connect>
	if (ret < 0) {
   3d132:	2800      	cmp	r0, #0
   3d134:	68e0      	ldr	r0, [r4, #12]
   3d136:	da02      	bge.n	3d13e <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   3d138:	f000 f82b 	bl	3d192 <z_impl_zsock_close>
   3d13c:	e7f0      	b.n	3d120 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d13e:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   3d140:	68a3      	ldr	r3, [r4, #8]
   3d142:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d146:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   3d14a:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d14c:	8091      	strh	r1, [r2, #4]
	return 0;
   3d14e:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   3d150:	60a3      	str	r3, [r4, #8]
	return 0;
   3d152:	e7e9      	b.n	3d128 <sntp_init+0x2c>
		return -EFAULT;
   3d154:	f06f 000d 	mvn.w	r0, #13
   3d158:	e7e6      	b.n	3d128 <sntp_init+0x2c>

0003d15a <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   3d15a:	b110      	cbz	r0, 3d162 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   3d15c:	68c0      	ldr	r0, [r0, #12]
   3d15e:	f000 b818 	b.w	3d192 <z_impl_zsock_close>
	}
}
   3d162:	4770      	bx	lr

0003d164 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   3d164:	f7e4 bd1c 	b.w	21ba0 <socket_offload_getaddrinfo>

0003d168 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   3d168:	f7e4 bd4e 	b.w	21c08 <socket_offload_freeaddrinfo>

0003d16c <z_fdtable_call_ioctl>:
{
   3d16c:	b40c      	push	{r2, r3}
   3d16e:	4603      	mov	r3, r0
   3d170:	b507      	push	{r0, r1, r2, lr}
   3d172:	aa04      	add	r2, sp, #16
   3d174:	4608      	mov	r0, r1
   3d176:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   3d17a:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   3d17c:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   3d17e:	4798      	blx	r3
}
   3d180:	b003      	add	sp, #12
   3d182:	f85d eb04 	ldr.w	lr, [sp], #4
   3d186:	b002      	add	sp, #8
   3d188:	4770      	bx	lr

0003d18a <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   3d18a:	f7f9 bba3 	b.w	368d4 <z_impl_k_mutex_lock>

0003d18e <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   3d18e:	f7f9 bc73 	b.w	36a78 <z_impl_k_mutex_unlock>

0003d192 <z_impl_zsock_close>:
{
   3d192:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   3d194:	4669      	mov	r1, sp
   3d196:	aa01      	add	r2, sp, #4
{
   3d198:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   3d19a:	f7e3 fc55 	bl	20a48 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   3d19e:	4604      	mov	r4, r0
   3d1a0:	b940      	cbnz	r0, 3d1b4 <z_impl_zsock_close+0x22>
		errno = EBADF;
   3d1a2:	f000 faec 	bl	3d77e <__errno>
   3d1a6:	2309      	movs	r3, #9
		return -1;
   3d1a8:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   3d1ac:	6003      	str	r3, [r0, #0]
}
   3d1ae:	4620      	mov	r0, r4
   3d1b0:	b003      	add	sp, #12
   3d1b2:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   3d1b4:	f04f 32ff 	mov.w	r2, #4294967295
   3d1b8:	9801      	ldr	r0, [sp, #4]
   3d1ba:	f04f 33ff 	mov.w	r3, #4294967295
   3d1be:	f7ff ffe4 	bl	3d18a <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
   3d1c2:	9b00      	ldr	r3, [sp, #0]
   3d1c4:	4620      	mov	r0, r4
   3d1c6:	689b      	ldr	r3, [r3, #8]
   3d1c8:	4798      	blx	r3
   3d1ca:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   3d1cc:	9801      	ldr	r0, [sp, #4]
   3d1ce:	f7ff ffde 	bl	3d18e <k_mutex_unlock.isra.0>
	z_free_fd(sock);
   3d1d2:	4628      	mov	r0, r5
   3d1d4:	f7e3 fca2 	bl	20b1c <z_free_fd>
	return ret;
   3d1d8:	e7e9      	b.n	3d1ae <z_impl_zsock_close+0x1c>

0003d1da <z_impl_zsock_connect>:
{
   3d1da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d1dc:	460d      	mov	r5, r1
   3d1de:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d1e0:	4669      	mov	r1, sp
   3d1e2:	aa01      	add	r2, sp, #4
   3d1e4:	f7e3 fc30 	bl	20a48 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   3d1e8:	4604      	mov	r4, r0
   3d1ea:	b110      	cbz	r0, 3d1f2 <z_impl_zsock_connect+0x18>
   3d1ec:	9b00      	ldr	r3, [sp, #0]
   3d1ee:	699b      	ldr	r3, [r3, #24]
   3d1f0:	b943      	cbnz	r3, 3d204 <z_impl_zsock_connect+0x2a>
   3d1f2:	f000 fac4 	bl	3d77e <__errno>
   3d1f6:	2309      	movs	r3, #9
   3d1f8:	f04f 34ff 	mov.w	r4, #4294967295
   3d1fc:	6003      	str	r3, [r0, #0]
}
   3d1fe:	4620      	mov	r0, r4
   3d200:	b002      	add	sp, #8
   3d202:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   3d204:	9801      	ldr	r0, [sp, #4]
   3d206:	f04f 32ff 	mov.w	r2, #4294967295
   3d20a:	f04f 33ff 	mov.w	r3, #4294967295
   3d20e:	f7ff ffbc 	bl	3d18a <k_mutex_lock.constprop.0.isra.0>
   3d212:	9b00      	ldr	r3, [sp, #0]
   3d214:	4632      	mov	r2, r6
   3d216:	4629      	mov	r1, r5
   3d218:	4620      	mov	r0, r4
   3d21a:	699b      	ldr	r3, [r3, #24]
   3d21c:	4798      	blx	r3
   3d21e:	4604      	mov	r4, r0
   3d220:	9801      	ldr	r0, [sp, #4]
   3d222:	f7ff ffb4 	bl	3d18e <k_mutex_unlock.isra.0>
   3d226:	e7ea      	b.n	3d1fe <z_impl_zsock_connect+0x24>

0003d228 <z_impl_zsock_sendto>:
{
   3d228:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3d22c:	460d      	mov	r5, r1
   3d22e:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d230:	a902      	add	r1, sp, #8
   3d232:	aa03      	add	r2, sp, #12
{
   3d234:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3d236:	f7e3 fc07 	bl	20a48 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   3d23a:	4604      	mov	r4, r0
   3d23c:	b110      	cbz	r0, 3d244 <z_impl_zsock_sendto+0x1c>
   3d23e:	9b02      	ldr	r3, [sp, #8]
   3d240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3d242:	b94b      	cbnz	r3, 3d258 <z_impl_zsock_sendto+0x30>
   3d244:	f000 fa9b 	bl	3d77e <__errno>
   3d248:	2309      	movs	r3, #9
   3d24a:	f04f 34ff 	mov.w	r4, #4294967295
   3d24e:	6003      	str	r3, [r0, #0]
}
   3d250:	4620      	mov	r0, r4
   3d252:	b004      	add	sp, #16
   3d254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   3d258:	9803      	ldr	r0, [sp, #12]
   3d25a:	f04f 32ff 	mov.w	r2, #4294967295
   3d25e:	f04f 33ff 	mov.w	r3, #4294967295
   3d262:	f7ff ff92 	bl	3d18a <k_mutex_lock.constprop.0.isra.0>
   3d266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3d268:	4632      	mov	r2, r6
   3d26a:	9301      	str	r3, [sp, #4]
   3d26c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d26e:	4629      	mov	r1, r5
   3d270:	9300      	str	r3, [sp, #0]
   3d272:	9b02      	ldr	r3, [sp, #8]
   3d274:	4620      	mov	r0, r4
   3d276:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   3d27a:	463b      	mov	r3, r7
   3d27c:	47c0      	blx	r8
   3d27e:	4604      	mov	r4, r0
   3d280:	9803      	ldr	r0, [sp, #12]
   3d282:	f7ff ff84 	bl	3d18e <k_mutex_unlock.isra.0>
   3d286:	e7e3      	b.n	3d250 <z_impl_zsock_sendto+0x28>

0003d288 <z_impl_zsock_sendmsg>:
{
   3d288:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d28a:	460d      	mov	r5, r1
   3d28c:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d28e:	4669      	mov	r1, sp
   3d290:	aa01      	add	r2, sp, #4
   3d292:	f7e3 fbd9 	bl	20a48 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   3d296:	4604      	mov	r4, r0
   3d298:	b110      	cbz	r0, 3d2a0 <z_impl_zsock_sendmsg+0x18>
   3d29a:	9b00      	ldr	r3, [sp, #0]
   3d29c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   3d29e:	b943      	cbnz	r3, 3d2b2 <z_impl_zsock_sendmsg+0x2a>
   3d2a0:	f000 fa6d 	bl	3d77e <__errno>
   3d2a4:	2309      	movs	r3, #9
   3d2a6:	f04f 34ff 	mov.w	r4, #4294967295
   3d2aa:	6003      	str	r3, [r0, #0]
}
   3d2ac:	4620      	mov	r0, r4
   3d2ae:	b002      	add	sp, #8
   3d2b0:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   3d2b2:	9801      	ldr	r0, [sp, #4]
   3d2b4:	f04f 32ff 	mov.w	r2, #4294967295
   3d2b8:	f04f 33ff 	mov.w	r3, #4294967295
   3d2bc:	f7ff ff65 	bl	3d18a <k_mutex_lock.constprop.0.isra.0>
   3d2c0:	9b00      	ldr	r3, [sp, #0]
   3d2c2:	4632      	mov	r2, r6
   3d2c4:	4629      	mov	r1, r5
   3d2c6:	4620      	mov	r0, r4
   3d2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   3d2ca:	4798      	blx	r3
   3d2cc:	4604      	mov	r4, r0
   3d2ce:	9801      	ldr	r0, [sp, #4]
   3d2d0:	f7ff ff5d 	bl	3d18e <k_mutex_unlock.isra.0>
   3d2d4:	e7ea      	b.n	3d2ac <z_impl_zsock_sendmsg+0x24>

0003d2d6 <z_impl_zsock_recvfrom>:
{
   3d2d6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3d2da:	460d      	mov	r5, r1
   3d2dc:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d2de:	a902      	add	r1, sp, #8
   3d2e0:	aa03      	add	r2, sp, #12
{
   3d2e2:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3d2e4:	f7e3 fbb0 	bl	20a48 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   3d2e8:	4604      	mov	r4, r0
   3d2ea:	b110      	cbz	r0, 3d2f2 <z_impl_zsock_recvfrom+0x1c>
   3d2ec:	9b02      	ldr	r3, [sp, #8]
   3d2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3d2f0:	b94b      	cbnz	r3, 3d306 <z_impl_zsock_recvfrom+0x30>
   3d2f2:	f000 fa44 	bl	3d77e <__errno>
   3d2f6:	2309      	movs	r3, #9
   3d2f8:	f04f 34ff 	mov.w	r4, #4294967295
   3d2fc:	6003      	str	r3, [r0, #0]
}
   3d2fe:	4620      	mov	r0, r4
   3d300:	b004      	add	sp, #16
   3d302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   3d306:	9803      	ldr	r0, [sp, #12]
   3d308:	f04f 32ff 	mov.w	r2, #4294967295
   3d30c:	f04f 33ff 	mov.w	r3, #4294967295
   3d310:	f7ff ff3b 	bl	3d18a <k_mutex_lock.constprop.0.isra.0>
   3d314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3d316:	4632      	mov	r2, r6
   3d318:	9301      	str	r3, [sp, #4]
   3d31a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d31c:	4629      	mov	r1, r5
   3d31e:	9300      	str	r3, [sp, #0]
   3d320:	9b02      	ldr	r3, [sp, #8]
   3d322:	4620      	mov	r0, r4
   3d324:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   3d328:	463b      	mov	r3, r7
   3d32a:	47c0      	blx	r8
   3d32c:	4604      	mov	r4, r0
   3d32e:	9803      	ldr	r0, [sp, #12]
   3d330:	f7ff ff2d 	bl	3d18e <k_mutex_unlock.isra.0>
   3d334:	e7e3      	b.n	3d2fe <z_impl_zsock_recvfrom+0x28>

0003d336 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   3d336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   3d33a:	1e14      	subs	r4, r2, #0
{
   3d33c:	4605      	mov	r5, r0
   3d33e:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   3d340:	db13      	blt.n	3d36a <z_impl_zsock_poll+0x34>
   3d342:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   3d346:	f240 30e7 	movw	r0, #999	; 0x3e7
   3d34a:	2100      	movs	r1, #0
   3d34c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3d350:	2300      	movs	r3, #0
   3d352:	fbc4 0107 	smlal	r0, r1, r4, r7
   3d356:	f7df fdc7 	bl	1cee8 <__aeabi_uldivmod>
   3d35a:	4602      	mov	r2, r0
   3d35c:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   3d35e:	4631      	mov	r1, r6
   3d360:	4628      	mov	r0, r5
}
   3d362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   3d366:	f7e4 bae9 	b.w	2193c <zsock_poll_internal>
		timeout = K_FOREVER;
   3d36a:	f04f 32ff 	mov.w	r2, #4294967295
   3d36e:	4613      	mov	r3, r2
   3d370:	e7f5      	b.n	3d35e <z_impl_zsock_poll+0x28>

0003d372 <z_impl_zsock_inet_pton>:
}
#include <syscalls/zsock_poll_mrsh.c>
#endif

int z_impl_zsock_inet_pton(sa_family_t family, const char *src, void *dst)
{
   3d372:	b508      	push	{r3, lr}
	return z_impl_net_addr_pton(family, src, dst);
   3d374:	f000 fa6c 	bl	3d850 <z_impl_net_addr_pton>
	if (net_addr_pton(family, src, dst) == 0) {
		return 1;
	} else {
		return 0;
	}
}
   3d378:	fab0 f080 	clz	r0, r0
   3d37c:	0940      	lsrs	r0, r0, #5
   3d37e:	bd08      	pop	{r3, pc}

0003d380 <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   3d380:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3d384:	460d      	mov	r5, r1
   3d386:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d388:	a902      	add	r1, sp, #8
   3d38a:	aa03      	add	r2, sp, #12
{
   3d38c:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3d38e:	f7e3 fb5b 	bl	20a48 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   3d392:	4604      	mov	r4, r0
   3d394:	b110      	cbz	r0, 3d39c <z_impl_zsock_setsockopt+0x1c>
   3d396:	9b02      	ldr	r3, [sp, #8]
   3d398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   3d39a:	b94b      	cbnz	r3, 3d3b0 <z_impl_zsock_setsockopt+0x30>
   3d39c:	f000 f9ef 	bl	3d77e <__errno>
   3d3a0:	2309      	movs	r3, #9
   3d3a2:	f04f 34ff 	mov.w	r4, #4294967295
   3d3a6:	6003      	str	r3, [r0, #0]
}
   3d3a8:	4620      	mov	r0, r4
   3d3aa:	b004      	add	sp, #16
   3d3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   3d3b0:	9803      	ldr	r0, [sp, #12]
   3d3b2:	f04f 32ff 	mov.w	r2, #4294967295
   3d3b6:	f04f 33ff 	mov.w	r3, #4294967295
   3d3ba:	f7ff fee6 	bl	3d18a <k_mutex_lock.constprop.0.isra.0>
   3d3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d3c0:	4632      	mov	r2, r6
   3d3c2:	9300      	str	r3, [sp, #0]
   3d3c4:	9b02      	ldr	r3, [sp, #8]
   3d3c6:	4629      	mov	r1, r5
   3d3c8:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   3d3cc:	4620      	mov	r0, r4
   3d3ce:	463b      	mov	r3, r7
   3d3d0:	47c0      	blx	r8
   3d3d2:	4604      	mov	r4, r0
   3d3d4:	9803      	ldr	r0, [sp, #12]
   3d3d6:	f7ff feda 	bl	3d18e <k_mutex_unlock.isra.0>
   3d3da:	e7e5      	b.n	3d3a8 <z_impl_zsock_setsockopt+0x28>

0003d3dc <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   3d3dc:	4770      	bx	lr

0003d3de <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   3d3de:	b573      	push	{r0, r1, r4, r5, r6, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   3d3e0:	1e0c      	subs	r4, r1, #0
   3d3e2:	4605      	mov	r5, r0
   3d3e4:	461e      	mov	r6, r3
   3d3e6:	9201      	str	r2, [sp, #4]
   3d3e8:	db11      	blt.n	3d40e <flash_area_read+0x30>
   3d3ea:	6881      	ldr	r1, [r0, #8]
   3d3ec:	18e3      	adds	r3, r4, r3
   3d3ee:	428b      	cmp	r3, r1
   3d3f0:	d80d      	bhi.n	3d40e <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   3d3f2:	68c0      	ldr	r0, [r0, #12]
   3d3f4:	f7f8 fd6a 	bl	35ecc <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   3d3f8:	6869      	ldr	r1, [r5, #4]
   3d3fa:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   3d3fc:	6883      	ldr	r3, [r0, #8]
   3d3fe:	9a01      	ldr	r2, [sp, #4]
   3d400:	681c      	ldr	r4, [r3, #0]
   3d402:	4633      	mov	r3, r6
   3d404:	46a4      	mov	ip, r4
}
   3d406:	b002      	add	sp, #8
   3d408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d40c:	4760      	bx	ip
   3d40e:	f06f 0015 	mvn.w	r0, #21
   3d412:	b002      	add	sp, #8
   3d414:	bd70      	pop	{r4, r5, r6, pc}

0003d416 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   3d416:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d418:	1e0c      	subs	r4, r1, #0
   3d41a:	4605      	mov	r5, r0
   3d41c:	461e      	mov	r6, r3
   3d41e:	9201      	str	r2, [sp, #4]
   3d420:	db11      	blt.n	3d446 <flash_area_write+0x30>
   3d422:	6881      	ldr	r1, [r0, #8]
   3d424:	18e3      	adds	r3, r4, r3
   3d426:	428b      	cmp	r3, r1
   3d428:	d80d      	bhi.n	3d446 <flash_area_write+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3d42a:	68c0      	ldr	r0, [r0, #12]
   3d42c:	f7f8 fd4e 	bl	35ecc <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   3d430:	6869      	ldr	r1, [r5, #4]
   3d432:	4421      	add	r1, r4
	rc = api->write(dev, offset, data, len);
   3d434:	6883      	ldr	r3, [r0, #8]
   3d436:	9a01      	ldr	r2, [sp, #4]
   3d438:	685c      	ldr	r4, [r3, #4]
   3d43a:	4633      	mov	r3, r6
   3d43c:	46a4      	mov	ip, r4

	return rc;
}
   3d43e:	b002      	add	sp, #8
   3d440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d444:	4760      	bx	ip
   3d446:	f06f 0015 	mvn.w	r0, #21
   3d44a:	b002      	add	sp, #8
   3d44c:	bd70      	pop	{r4, r5, r6, pc}

0003d44e <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   3d44e:	b570      	push	{r4, r5, r6, lr}
   3d450:	1e0c      	subs	r4, r1, #0
   3d452:	4605      	mov	r5, r0
   3d454:	4616      	mov	r6, r2
   3d456:	db0e      	blt.n	3d476 <flash_area_erase+0x28>
   3d458:	18a3      	adds	r3, r4, r2
   3d45a:	6882      	ldr	r2, [r0, #8]
   3d45c:	4293      	cmp	r3, r2
   3d45e:	d80a      	bhi.n	3d476 <flash_area_erase+0x28>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3d460:	68c0      	ldr	r0, [r0, #12]
   3d462:	f7f8 fd33 	bl	35ecc <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   3d466:	6869      	ldr	r1, [r5, #4]
   3d468:	4421      	add	r1, r4
	rc = api->erase(dev, offset, size);
   3d46a:	6883      	ldr	r3, [r0, #8]
   3d46c:	4632      	mov	r2, r6

	return rc;
}
   3d46e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d472:	689b      	ldr	r3, [r3, #8]
   3d474:	4718      	bx	r3
   3d476:	f06f 0015 	mvn.w	r0, #21
   3d47a:	bd70      	pop	{r4, r5, r6, pc}

0003d47c <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   3d47c:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   3d47e:	68c0      	ldr	r0, [r0, #12]
   3d480:	f7f8 fd24 	bl	35ecc <z_impl_device_get_binding>
	return api->get_parameters(dev)->write_block_size;
   3d484:	6883      	ldr	r3, [r0, #8]
   3d486:	68db      	ldr	r3, [r3, #12]
   3d488:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   3d48a:	6800      	ldr	r0, [r0, #0]
   3d48c:	bd08      	pop	{r3, pc}

0003d48e <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   3d48e:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   3d490:	68c0      	ldr	r0, [r0, #12]
   3d492:	f7f8 fd1b 	bl	35ecc <z_impl_device_get_binding>
	return api->get_parameters(dev);
   3d496:	6883      	ldr	r3, [r0, #8]
   3d498:	68db      	ldr	r3, [r3, #12]
   3d49a:	4798      	blx	r3

	return param->erase_value;
}
   3d49c:	7900      	ldrb	r0, [r0, #4]
   3d49e:	bd08      	pop	{r3, pc}

0003d4a0 <get_sectors_cb>:
{
   3d4a0:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   3d4a2:	6802      	ldr	r2, [r0, #0]
   3d4a4:	684c      	ldr	r4, [r1, #4]
   3d4a6:	42a2      	cmp	r2, r4
   3d4a8:	d316      	bcc.n	3d4d8 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   3d4aa:	688b      	ldr	r3, [r1, #8]
   3d4ac:	4423      	add	r3, r4
   3d4ae:	429a      	cmp	r2, r3
   3d4b0:	d206      	bcs.n	3d4c0 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   3d4b2:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   3d4b6:	42ab      	cmp	r3, r5
   3d4b8:	d304      	bcc.n	3d4c4 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   3d4ba:	f06f 030b 	mvn.w	r3, #11
   3d4be:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   3d4c0:	2000      	movs	r0, #0
   3d4c2:	e00a      	b.n	3d4da <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3d4c4:	68cd      	ldr	r5, [r1, #12]
   3d4c6:	1b12      	subs	r2, r2, r4
   3d4c8:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   3d4cc:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3d4ce:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   3d4d2:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   3d4d4:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   3d4d6:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   3d4d8:	2001      	movs	r0, #1
}
   3d4da:	bd70      	pop	{r4, r5, r6, pc}

0003d4dc <flash_get_write_block_size>:

extern size_t z_impl_flash_get_write_block_size(const struct device * dev);

__pinned_func
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   3d4dc:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   3d4de:	6883      	ldr	r3, [r0, #8]
   3d4e0:	68db      	ldr	r3, [r3, #12]
   3d4e2:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   3d4e4:	6800      	ldr	r0, [r0, #0]
   3d4e6:	bd08      	pop	{r3, pc}

0003d4e8 <stream_flash_buffered_write>:
{
   3d4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d4ec:	4689      	mov	r9, r1
   3d4ee:	4616      	mov	r6, r2
   3d4f0:	4698      	mov	r8, r3
	if (!ctx) {
   3d4f2:	4604      	mov	r4, r0
   3d4f4:	b398      	cbz	r0, 3d55e <stream_flash_buffered_write+0x76>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   3d4f6:	6882      	ldr	r2, [r0, #8]
   3d4f8:	6903      	ldr	r3, [r0, #16]
   3d4fa:	4413      	add	r3, r2
   3d4fc:	6982      	ldr	r2, [r0, #24]
   3d4fe:	4433      	add	r3, r6
   3d500:	4293      	cmp	r3, r2
   3d502:	d830      	bhi.n	3d566 <stream_flash_buffered_write+0x7e>
	int processed = 0;
   3d504:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3d506:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
	while ((len - processed) >=
   3d50a:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3d50e:	1a3f      	subs	r7, r7, r0
	while ((len - processed) >=
   3d510:	45ba      	cmp	sl, r7
   3d512:	d215      	bcs.n	3d540 <stream_flash_buffered_write+0x58>
	if (processed < len) {
   3d514:	42b5      	cmp	r5, r6
   3d516:	d209      	bcs.n	3d52c <stream_flash_buffered_write+0x44>
		memcpy(ctx->buf + ctx->buf_bytes,
   3d518:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3d51a:	4652      	mov	r2, sl
   3d51c:	4418      	add	r0, r3
   3d51e:	eb09 0105 	add.w	r1, r9, r5
   3d522:	f003 ff67 	bl	413f4 <memcpy>
		ctx->buf_bytes += len - processed;
   3d526:	68a3      	ldr	r3, [r4, #8]
   3d528:	4453      	add	r3, sl
   3d52a:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   3d52c:	f1b8 0f00 	cmp.w	r8, #0
   3d530:	d01c      	beq.n	3d56c <stream_flash_buffered_write+0x84>
   3d532:	68a0      	ldr	r0, [r4, #8]
   3d534:	b1a8      	cbz	r0, 3d562 <stream_flash_buffered_write+0x7a>
		rc = flash_sync(ctx);
   3d536:	4620      	mov	r0, r4
}
   3d538:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = flash_sync(ctx);
   3d53c:	f7e4 bc18 	b.w	21d70 <flash_sync>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   3d540:	6823      	ldr	r3, [r4, #0]
   3d542:	463a      	mov	r2, r7
   3d544:	4418      	add	r0, r3
   3d546:	eb09 0105 	add.w	r1, r9, r5
   3d54a:	f003 ff53 	bl	413f4 <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   3d54e:	6863      	ldr	r3, [r4, #4]
		rc = flash_sync(ctx);
   3d550:	4620      	mov	r0, r4
		ctx->buf_bytes = ctx->buf_len;
   3d552:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   3d554:	f7e4 fc0c 	bl	21d70 <flash_sync>
		if (rc != 0) {
   3d558:	b918      	cbnz	r0, 3d562 <stream_flash_buffered_write+0x7a>
		processed += buf_empty_bytes;
   3d55a:	443d      	add	r5, r7
   3d55c:	e7d3      	b.n	3d506 <stream_flash_buffered_write+0x1e>
		return -EFAULT;
   3d55e:	f06f 000d 	mvn.w	r0, #13
}
   3d562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   3d566:	f06f 000b 	mvn.w	r0, #11
   3d56a:	e7fa      	b.n	3d562 <stream_flash_buffered_write+0x7a>
   3d56c:	4640      	mov	r0, r8
   3d56e:	e7f8      	b.n	3d562 <stream_flash_buffered_write+0x7a>

0003d570 <stream_flash_bytes_written>:
}
   3d570:	6900      	ldr	r0, [r0, #16]
   3d572:	4770      	bx	lr

0003d574 <settings_name_steq>:
{
   3d574:	b530      	push	{r4, r5, lr}
	if (next) {
   3d576:	b10a      	cbz	r2, 3d57c <settings_name_steq+0x8>
		*next = NULL;
   3d578:	2300      	movs	r3, #0
   3d57a:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   3d57c:	b190      	cbz	r0, 3d5a4 <settings_name_steq+0x30>
   3d57e:	b151      	cbz	r1, 3d596 <settings_name_steq+0x22>
   3d580:	3901      	subs	r1, #1
	while ((*key != '\0') && (*key == *name) &&
   3d582:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   3d586:	4604      	mov	r4, r0
   3d588:	f810 3b01 	ldrb.w	r3, [r0], #1
   3d58c:	b15d      	cbz	r5, 3d5a6 <settings_name_steq+0x32>
   3d58e:	429d      	cmp	r5, r3
   3d590:	d101      	bne.n	3d596 <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   3d592:	2d3d      	cmp	r5, #61	; 0x3d
   3d594:	d1f5      	bne.n	3d582 <settings_name_steq+0xe>
	return 0;
   3d596:	2000      	movs	r0, #0
   3d598:	e004      	b.n	3d5a4 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   3d59a:	2b3d      	cmp	r3, #61	; 0x3d
   3d59c:	d008      	beq.n	3d5b0 <settings_name_steq+0x3c>
   3d59e:	fab3 f083 	clz	r0, r3
   3d5a2:	0940      	lsrs	r0, r0, #5
}
   3d5a4:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   3d5a6:	2b2f      	cmp	r3, #47	; 0x2f
   3d5a8:	d1f7      	bne.n	3d59a <settings_name_steq+0x26>
		if (next) {
   3d5aa:	b10a      	cbz	r2, 3d5b0 <settings_name_steq+0x3c>
			*next = name + 1;
   3d5ac:	3401      	adds	r4, #1
   3d5ae:	6014      	str	r4, [r2, #0]
		return 1;
   3d5b0:	2001      	movs	r0, #1
   3d5b2:	e7f7      	b.n	3d5a4 <settings_name_steq+0x30>

0003d5b4 <settings_line_len_calc>:
{
   3d5b4:	b510      	push	{r4, lr}
   3d5b6:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   3d5b8:	f7df fe43 	bl	1d242 <strlen>
   3d5bc:	3401      	adds	r4, #1
}
   3d5be:	4420      	add	r0, r4
   3d5c0:	bd10      	pop	{r4, pc}

0003d5c2 <settings_line_raw_read>:
{
   3d5c2:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   3d5c4:	9c04      	ldr	r4, [sp, #16]
   3d5c6:	9401      	str	r4, [sp, #4]
   3d5c8:	2400      	movs	r4, #0
   3d5ca:	9400      	str	r4, [sp, #0]
   3d5cc:	f7e4 fdf2 	bl	221b4 <settings_line_raw_read_until>
}
   3d5d0:	b002      	add	sp, #8
   3d5d2:	bd10      	pop	{r4, pc}

0003d5d4 <settings_line_read_cb>:
{
   3d5d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3d5d6:	6803      	ldr	r3, [r0, #0]
   3d5d8:	9300      	str	r3, [sp, #0]
   3d5da:	6840      	ldr	r0, [r0, #4]
   3d5dc:	ab03      	add	r3, sp, #12
   3d5de:	f7ff fff0 	bl	3d5c2 <settings_line_raw_read>
	if (rc == 0) {
   3d5e2:	b918      	cbnz	r0, 3d5ec <settings_line_read_cb+0x18>
		return len_read;
   3d5e4:	9803      	ldr	r0, [sp, #12]
}
   3d5e6:	b005      	add	sp, #20
   3d5e8:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   3d5ec:	f04f 30ff 	mov.w	r0, #4294967295
   3d5f0:	e7f9      	b.n	3d5e6 <settings_line_read_cb+0x12>

0003d5f2 <settings_line_name_read>:
{
   3d5f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char const until_char = '=';
   3d5f4:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   3d5f6:	9301      	str	r3, [sp, #4]
   3d5f8:	f10d 030f 	add.w	r3, sp, #15
   3d5fc:	9300      	str	r3, [sp, #0]
   3d5fe:	4613      	mov	r3, r2
   3d600:	460a      	mov	r2, r1
   3d602:	4601      	mov	r1, r0
   3d604:	2000      	movs	r0, #0
	char const until_char = '=';
   3d606:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   3d60a:	f7e4 fdd3 	bl	221b4 <settings_line_raw_read_until>
}
   3d60e:	b004      	add	sp, #16
   3d610:	bd10      	pop	{r4, pc}

0003d612 <settings_line_dup_check_cb>:
{
   3d612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d616:	460f      	mov	r7, r1
   3d618:	b088      	sub	sp, #32
	if (strcmp(name, cdca->name)) {
   3d61a:	6819      	ldr	r1, [r3, #0]
{
   3d61c:	4690      	mov	r8, r2
   3d61e:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   3d620:	f7df fe05 	bl	1d22e <strcmp>
   3d624:	4606      	mov	r6, r0
   3d626:	b940      	cbnz	r0, 3d63a <settings_line_dup_check_cb+0x28>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   3d628:	4639      	mov	r1, r7
   3d62a:	4640      	mov	r0, r8
   3d62c:	f7e4 fe84 	bl	22338 <settings_line_val_get_len>
	if (len_read != cdca->val_len) {
   3d630:	68a3      	ldr	r3, [r4, #8]
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   3d632:	4605      	mov	r5, r0
	if (len_read != cdca->val_len) {
   3d634:	4283      	cmp	r3, r0
   3d636:	d004      	beq.n	3d642 <settings_line_dup_check_cb+0x30>
		cdca->is_dup = 0;
   3d638:	60e6      	str	r6, [r4, #12]
}
   3d63a:	2000      	movs	r0, #0
   3d63c:	b008      	add	sp, #32
   3d63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (len_read == 0) {
   3d642:	b913      	cbnz	r3, 3d64a <settings_line_dup_check_cb+0x38>
			cdca->is_dup = 1;
   3d644:	2301      	movs	r3, #1
			cdca->is_dup = 0;
   3d646:	60e3      	str	r3, [r4, #12]
   3d648:	e7f7      	b.n	3d63a <settings_line_dup_check_cb+0x28>
		if (!settings_line_cmp(cdca->val, cdca->val_len,
   3d64a:	f8d4 a004 	ldr.w	sl, [r4, #4]
		len_read = exp_len = MIN(sizeof(buf), rem);
   3d64e:	2d10      	cmp	r5, #16
   3d650:	46a9      	mov	r9, r5
   3d652:	bf28      	it	cs
   3d654:	f04f 0910 	movcs.w	r9, #16
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3d658:	9700      	str	r7, [sp, #0]
   3d65a:	464a      	mov	r2, r9
   3d65c:	ab03      	add	r3, sp, #12
   3d65e:	a904      	add	r1, sp, #16
   3d660:	eb08 0006 	add.w	r0, r8, r6
		len_read = exp_len = MIN(sizeof(buf), rem);
   3d664:	f8cd 900c 	str.w	r9, [sp, #12]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3d668:	f7ff ffab 	bl	3d5c2 <settings_line_raw_read>
		if (rc) {
   3d66c:	b970      	cbnz	r0, 3d68c <settings_line_dup_check_cb+0x7a>
		if (len_read != exp_len) {
   3d66e:	9b03      	ldr	r3, [sp, #12]
   3d670:	4599      	cmp	r9, r3
   3d672:	d10b      	bne.n	3d68c <settings_line_dup_check_cb+0x7a>
		rc = memcmp(val, buf, len_read);
   3d674:	464a      	mov	r2, r9
   3d676:	4650      	mov	r0, sl
   3d678:	a904      	add	r1, sp, #16
   3d67a:	f003 feab 	bl	413d4 <memcmp>
		if (rc) {
   3d67e:	b928      	cbnz	r0, 3d68c <settings_line_dup_check_cb+0x7a>
		val += len_read;
   3d680:	9b03      	ldr	r3, [sp, #12]
	for (rem = val_len; rem > 0; rem -= len_read) {
   3d682:	1aed      	subs	r5, r5, r3
		val += len_read;
   3d684:	449a      	add	sl, r3
		off += len_read;
   3d686:	441e      	add	r6, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   3d688:	d1e1      	bne.n	3d64e <settings_line_dup_check_cb+0x3c>
   3d68a:	e7db      	b.n	3d644 <settings_line_dup_check_cb+0x32>
			cdca->is_dup = 0;
   3d68c:	2300      	movs	r3, #0
   3d68e:	e7da      	b.n	3d646 <settings_line_dup_check_cb+0x34>

0003d690 <get_len_cb>:
}
   3d690:	8980      	ldrh	r0, [r0, #12]
   3d692:	4770      	bx	lr

0003d694 <write_handler>:
{
   3d694:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   3d696:	6804      	ldr	r4, [r0, #0]
   3d698:	6885      	ldr	r5, [r0, #8]
   3d69a:	6824      	ldr	r4, [r4, #0]
   3d69c:	4429      	add	r1, r5
	return flash_area_write(entry_ctx->fap,
   3d69e:	4421      	add	r1, r4
   3d6a0:	6900      	ldr	r0, [r0, #16]
}
   3d6a2:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   3d6a4:	f7ff beb7 	b.w	3d416 <flash_area_write>

0003d6a8 <read_handler>:
{
   3d6a8:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   3d6aa:	8984      	ldrh	r4, [r0, #12]
   3d6ac:	428c      	cmp	r4, r1
   3d6ae:	dd0f      	ble.n	3d6d0 <read_handler+0x28>
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   3d6b0:	681d      	ldr	r5, [r3, #0]
   3d6b2:	440d      	add	r5, r1
   3d6b4:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   3d6b6:	bf84      	itt	hi
   3d6b8:	1a64      	subhi	r4, r4, r1
   3d6ba:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   3d6bc:	6804      	ldr	r4, [r0, #0]
   3d6be:	6885      	ldr	r5, [r0, #8]
   3d6c0:	6824      	ldr	r4, [r4, #0]
   3d6c2:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   3d6c4:	4421      	add	r1, r4
   3d6c6:	681b      	ldr	r3, [r3, #0]
   3d6c8:	6900      	ldr	r0, [r0, #16]
}
   3d6ca:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   3d6cc:	f7ff be87 	b.w	3d3de <flash_area_read>
		*len = 0;
   3d6d0:	2000      	movs	r0, #0
}
   3d6d2:	bc30      	pop	{r4, r5}
		*len = 0;
   3d6d4:	6018      	str	r0, [r3, #0]
}
   3d6d6:	4770      	bx	lr

0003d6d8 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3d6d8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   3d6da:	6800      	ldr	r0, [r0, #0]
   3d6dc:	f7e5 b9d4 	b.w	22a88 <z_arm_fatal_error>

0003d6e0 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   3d6e0:	2100      	movs	r1, #0
   3d6e2:	2001      	movs	r0, #1
   3d6e4:	f7e5 b9d0 	b.w	22a88 <z_arm_fatal_error>

0003d6e8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   3d6e8:	b508      	push	{r3, lr}
	handler();
   3d6ea:	f7e5 fa99 	bl	22c20 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   3d6ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   3d6f2:	f7e5 bba1 	b.w	22e38 <z_arm_exc_exit>

0003d6f6 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   3d6f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
   3d6f8:	f383 880b 	msr	PSPLIM, r3
}
   3d6fc:	4770      	bx	lr

0003d6fe <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
#if defined(CONFIG_FPU_SHARING)
	if (buffer->ctx_saved) {
   3d6fe:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   3d702:	b18b      	cbz	r3, 3d728 <z_arm_restore_fp_context+0x2a>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   3d704:	f3ef 8314 	mrs	r3, CONTROL
		/* Set FPCA first so it is set even if an interrupt happens
		 * during restoration.
		 */
		__set_CONTROL(__get_CONTROL() | CONTROL_FPCA_Msk);
   3d708:	f043 0304 	orr.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   3d70c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   3d710:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
   3d714:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   3d718:	eee1 3a10 	vmsr	fpscr, r3

		/* Restore FP state. */
		__set_FPSCR(buffer->fpscr);

		__asm__ volatile(
   3d71c:	f100 0340 	add.w	r3, r0, #64	; 0x40
   3d720:	ec90 0a10 	vldmia	r0, {s0-s15}
   3d724:	ec93 8a10 	vldmia	r3, {s16-s31}
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   3d728:	4770      	bx	lr

0003d72a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3d72a:	e840 f000 	tt	r0, r0
   3d72e:	b2c3      	uxtb	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   3d730:	f410 3f80 	tst.w	r0, #65536	; 0x10000
	}

	return -EINVAL;
}
   3d734:	bf14      	ite	ne
   3d736:	4618      	movne	r0, r3
   3d738:	f06f 0015 	mvneq.w	r0, #21
   3d73c:	4770      	bx	lr

0003d73e <_stdout_hook_default>:
}
   3d73e:	f04f 30ff 	mov.w	r0, #4294967295
   3d742:	4770      	bx	lr

0003d744 <_stdin_hook_default>:
}
   3d744:	2000      	movs	r0, #0
   3d746:	4770      	bx	lr

0003d748 <_read>:
{
   3d748:	4608      	mov	r0, r1
   3d74a:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   3d74c:	f7e6 b892 	b.w	23874 <z_impl_zephyr_read_stdin>

0003d750 <_write>:
{
   3d750:	4608      	mov	r0, r1
   3d752:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   3d754:	f7e6 b8a2 	b.w	2389c <z_impl_zephyr_write_stdout>

0003d758 <_close>:
   3d758:	f04f 30ff 	mov.w	r0, #4294967295
   3d75c:	4770      	bx	lr

0003d75e <_lseek>:
}
   3d75e:	2000      	movs	r0, #0
   3d760:	4770      	bx	lr

0003d762 <_isatty>:
}
   3d762:	2802      	cmp	r0, #2
   3d764:	bfcc      	ite	gt
   3d766:	2000      	movgt	r0, #0
   3d768:	2001      	movle	r0, #1
   3d76a:	4770      	bx	lr

0003d76c <_kill>:
}
   3d76c:	2000      	movs	r0, #0
   3d76e:	4770      	bx	lr

0003d770 <_getpid>:
}
   3d770:	2000      	movs	r0, #0
   3d772:	4770      	bx	lr

0003d774 <_fstat>:
	st->st_mode = S_IFCHR;
   3d774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   3d778:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   3d77a:	604b      	str	r3, [r1, #4]
}
   3d77c:	4770      	bx	lr

0003d77e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   3d77e:	f7f8 bbcf 	b.w	35f20 <z_impl_z_errno>

0003d782 <boot_request_upgrade_multi>:
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}

int boot_request_upgrade_multi(int image_index, int permanent)
{
   3d782:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_pending_multi(image_index, permanent);
   3d784:	f7f3 fed6 	bl	31534 <boot_set_pending_multi>
	if (rc) {
		return -EFAULT;
   3d788:	2800      	cmp	r0, #0
	}
	return 0;
}
   3d78a:	bf18      	it	ne
   3d78c:	f06f 000d 	mvnne.w	r0, #13
   3d790:	bd08      	pop	{r3, pc}

0003d792 <boot_is_img_confirmed>:

bool boot_is_img_confirmed(void)
{
   3d792:	b507      	push	{r0, r1, r2, lr}
	const struct flash_area *fa;
	int rc;
	uint8_t flag_val;

	rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fa);
   3d794:	2003      	movs	r0, #3
   3d796:	a901      	add	r1, sp, #4
   3d798:	f7e4 fa5c 	bl	21c54 <flash_area_open>
	if (rc) {
   3d79c:	b118      	cbz	r0, 3d7a6 <boot_is_img_confirmed+0x14>
		return false;
   3d79e:	2000      	movs	r0, #0
	if (rc) {
		return false;
	}

	return flag_val == BOOT_FLAG_SET;
}
   3d7a0:	b003      	add	sp, #12
   3d7a2:	f85d fb04 	ldr.w	pc, [sp], #4
	rc = boot_read_image_ok(fa, &flag_val);
   3d7a6:	9801      	ldr	r0, [sp, #4]
   3d7a8:	f10d 0103 	add.w	r1, sp, #3
   3d7ac:	f002 f8cf 	bl	3f94e <boot_read_image_ok>
	if (rc) {
   3d7b0:	2800      	cmp	r0, #0
   3d7b2:	d1f4      	bne.n	3d79e <boot_is_img_confirmed+0xc>
	return flag_val == BOOT_FLAG_SET;
   3d7b4:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3d7b8:	1e43      	subs	r3, r0, #1
   3d7ba:	4258      	negs	r0, r3
   3d7bc:	4158      	adcs	r0, r3
   3d7be:	e7ef      	b.n	3d7a0 <boot_is_img_confirmed+0xe>

0003d7c0 <boot_write_img_confirmed>:

int boot_write_img_confirmed(void)
{
   3d7c0:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_confirmed();
   3d7c2:	f002 f8f0 	bl	3f9a6 <boot_set_confirmed>
	if (rc) {
		return -EIO;
   3d7c6:	2800      	cmp	r0, #0
	}

	return 0;
}
   3d7c8:	bf18      	it	ne
   3d7ca:	f06f 0004 	mvnne.w	r0, #4
   3d7ce:	bd08      	pop	{r3, pc}

0003d7d0 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   3d7d0:	b508      	push	{r3, lr}
	net_if_init();
   3d7d2:	f7e6 f9f1 	bl	23bb8 <net_if_init>
	net_if_post_init();
   3d7d6:	f7e6 fa21 	bl	23c1c <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   3d7da:	2000      	movs	r0, #0
   3d7dc:	bd08      	pop	{r3, pc}

0003d7de <net_if_l2>:
	if (!iface || !iface->if_dev) {
   3d7de:	b110      	cbz	r0, 3d7e6 <net_if_l2+0x8>
   3d7e0:	6800      	ldr	r0, [r0, #0]
   3d7e2:	b100      	cbz	r0, 3d7e6 <net_if_l2+0x8>
	return iface->if_dev->l2;
   3d7e4:	6840      	ldr	r0, [r0, #4]
}
   3d7e6:	4770      	bx	lr

0003d7e8 <net_if_flag_is_set>:
	if (iface == NULL) {
   3d7e8:	b138      	cbz	r0, 3d7fa <net_if_flag_is_set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3d7ea:	6803      	ldr	r3, [r0, #0]
   3d7ec:	330c      	adds	r3, #12
   3d7ee:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3d7f2:	fa43 f001 	asr.w	r0, r3, r1
   3d7f6:	f000 0001 	and.w	r0, r0, #1
}
   3d7fa:	4770      	bx	lr

0003d7fc <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   3d7fc:	b510      	push	{r4, lr}
   3d7fe:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   3d800:	f7ff ffed 	bl	3d7de <net_if_l2>
   3d804:	b128      	cbz	r0, 3d812 <l2_flags_get.isra.0+0x16>
   3d806:	68c2      	ldr	r2, [r0, #12]
   3d808:	b11a      	cbz	r2, 3d812 <l2_flags_get.isra.0+0x16>
}
   3d80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   3d80e:	4618      	mov	r0, r3
   3d810:	4710      	bx	r2
}
   3d812:	bd10      	pop	{r4, pc}

0003d814 <net_byte_to_hex>:
{
   3d814:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   3d816:	090c      	lsrs	r4, r1, #4
		if (i == 0 && !pad && !val) {
   3d818:	b1b3      	cbz	r3, 3d848 <net_byte_to_hex+0x34>
		if (val < 10) {
   3d81a:	2c09      	cmp	r4, #9
			*ptr++ = (char) (val - 10 + base);
   3d81c:	bf86      	itte	hi
   3d81e:	f1a2 050a 	subhi.w	r5, r2, #10
   3d822:	1964      	addhi	r4, r4, r5
			*ptr++ = (char) (val + '0');
   3d824:	3430      	addls	r4, #48	; 0x30
			*ptr++ = (char) (val - 10 + base);
   3d826:	1c43      	adds	r3, r0, #1
			*ptr++ = (char) (val + '0');
   3d828:	7004      	strb	r4, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   3d82a:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   3d82e:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   3d830:	bf84      	itt	hi
   3d832:	3a0a      	subhi	r2, #10
   3d834:	1889      	addhi	r1, r1, r2
	*ptr = '\0';
   3d836:	f04f 0200 	mov.w	r2, #0
			*ptr++ = (char) (val - 10 + base);
   3d83a:	bf8c      	ite	hi
   3d83c:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   3d83e:	3130      	addls	r1, #48	; 0x30
   3d840:	7019      	strb	r1, [r3, #0]
	*ptr = '\0';
   3d842:	705a      	strb	r2, [r3, #1]
			*ptr++ = (char) (val - 10 + base);
   3d844:	1c58      	adds	r0, r3, #1
}
   3d846:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   3d848:	2c00      	cmp	r4, #0
   3d84a:	d1e6      	bne.n	3d81a <net_byte_to_hex+0x6>
   3d84c:	4603      	mov	r3, r0
   3d84e:	e7ec      	b.n	3d82a <net_byte_to_hex+0x16>

0003d850 <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   3d850:	2801      	cmp	r0, #1
{
   3d852:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3d856:	460c      	mov	r4, r1
   3d858:	4616      	mov	r6, r2
	if (family == AF_INET) {
   3d85a:	d126      	bne.n	3d8aa <z_impl_net_addr_pton+0x5a>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   3d85c:	4608      	mov	r0, r1
   3d85e:	f7df fcf0 	bl	1d242 <strlen>
		for (i = 0; i < len; i++) {
   3d862:	4623      	mov	r3, r4
   3d864:	4420      	add	r0, r4
   3d866:	4298      	cmp	r0, r3
   3d868:	d112      	bne.n	3d890 <z_impl_net_addr_pton+0x40>
__ssp_bos_icheck3(memset, void *, int)
   3d86a:	4635      	mov	r5, r6
   3d86c:	2300      	movs	r3, #0
   3d86e:	3603      	adds	r6, #3
   3d870:	f845 3901 	str.w	r3, [r5], #-1
		(void)memset(addr, 0, sizeof(struct in_addr));

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   3d874:	4620      	mov	r0, r4
   3d876:	220a      	movs	r2, #10
   3d878:	a901      	add	r1, sp, #4
   3d87a:	f7fd f801 	bl	3a880 <strtol>

			src = ++endptr;
   3d87e:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   3d880:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   3d884:	42ae      	cmp	r6, r5
			src = ++endptr;
   3d886:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   3d88a:	d1f3      	bne.n	3d874 <z_impl_net_addr_pton+0x24>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   3d88c:	2000      	movs	r0, #0
   3d88e:	e009      	b.n	3d8a4 <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   3d890:	f813 2b01 	ldrb.w	r2, [r3], #1
   3d894:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   3d898:	2909      	cmp	r1, #9
   3d89a:	d9e4      	bls.n	3d866 <z_impl_net_addr_pton+0x16>
   3d89c:	2a2e      	cmp	r2, #46	; 0x2e
   3d89e:	d0e2      	beq.n	3d866 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   3d8a0:	f06f 0015 	mvn.w	r0, #21
}
   3d8a4:	b003      	add	sp, #12
   3d8a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   3d8aa:	2802      	cmp	r0, #2
   3d8ac:	d1f8      	bne.n	3d8a0 <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   3d8ae:	212e      	movs	r1, #46	; 0x2e
   3d8b0:	4620      	mov	r0, r4
   3d8b2:	f003 ff7d 	bl	417b0 <strchr>
		if (*src == ':') {
   3d8b6:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   3d8b8:	2800      	cmp	r0, #0
   3d8ba:	bf14      	ite	ne
   3d8bc:	2706      	movne	r7, #6
   3d8be:	2708      	moveq	r7, #8
		if (*src == ':') {
   3d8c0:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   3d8c2:	bf08      	it	eq
   3d8c4:	3401      	addeq	r4, #1
		len = strlen(src);
   3d8c6:	4620      	mov	r0, r4
   3d8c8:	f7df fcbb 	bl	1d242 <strlen>
		for (i = 0; i < len; i++) {
   3d8cc:	2300      	movs	r3, #0
   3d8ce:	4283      	cmp	r3, r0
   3d8d0:	db1f      	blt.n	3d912 <z_impl_net_addr_pton+0xc2>
		for (i = 0; i < expected_groups; i++) {
   3d8d2:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   3d8d4:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   3d8d6:	7823      	ldrb	r3, [r4, #0]
   3d8d8:	2b00      	cmp	r3, #0
   3d8da:	d0e1      	beq.n	3d8a0 <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
   3d8dc:	2b3a      	cmp	r3, #58	; 0x3a
   3d8de:	d02f      	beq.n	3d940 <z_impl_net_addr_pton+0xf0>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   3d8e0:	2210      	movs	r2, #16
   3d8e2:	2100      	movs	r1, #0
   3d8e4:	4620      	mov	r0, r4
   3d8e6:	f7fc ffcb 	bl	3a880 <strtol>
   3d8ea:	2210      	movs	r2, #16
   3d8ec:	4681      	mov	r9, r0
   3d8ee:	2100      	movs	r1, #0
   3d8f0:	4620      	mov	r0, r4
   3d8f2:	f7fc ffc5 	bl	3a880 <strtol>
   3d8f6:	f3c9 2907 	ubfx	r9, r9, #8, #8
   3d8fa:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
   3d8fe:	f826 9015 	strh.w	r9, [r6, r5, lsl #1]
				src = strchr(src, ':');
   3d902:	213a      	movs	r1, #58	; 0x3a
   3d904:	4620      	mov	r0, r4
   3d906:	f003 ff53 	bl	417b0 <strchr>
				if (src) {
   3d90a:	4604      	mov	r4, r0
   3d90c:	b178      	cbz	r0, 3d92e <z_impl_net_addr_pton+0xde>
			src++;
   3d90e:	3401      	adds	r4, #1
   3d910:	e010      	b.n	3d934 <z_impl_net_addr_pton+0xe4>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   3d912:	5ce2      	ldrb	r2, [r4, r3]
   3d914:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   3d918:	290a      	cmp	r1, #10
   3d91a:	d906      	bls.n	3d92a <z_impl_net_addr_pton+0xda>
   3d91c:	f022 0120 	bic.w	r1, r2, #32
   3d920:	3941      	subs	r1, #65	; 0x41
   3d922:	2905      	cmp	r1, #5
   3d924:	d901      	bls.n	3d92a <z_impl_net_addr_pton+0xda>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   3d926:	2a2e      	cmp	r2, #46	; 0x2e
   3d928:	d1ba      	bne.n	3d8a0 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
   3d92a:	3301      	adds	r3, #1
   3d92c:	e7cf      	b.n	3d8ce <z_impl_net_addr_pton+0x7e>
					if (i < expected_groups - 1) {
   3d92e:	1e7b      	subs	r3, r7, #1
   3d930:	42ab      	cmp	r3, r5
   3d932:	dcb5      	bgt.n	3d8a0 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
   3d934:	3501      	adds	r5, #1
   3d936:	42af      	cmp	r7, r5
   3d938:	dd16      	ble.n	3d968 <z_impl_net_addr_pton+0x118>
			if (!src || *src == '\0') {
   3d93a:	2c00      	cmp	r4, #0
   3d93c:	d1cb      	bne.n	3d8d6 <z_impl_net_addr_pton+0x86>
   3d93e:	e7af      	b.n	3d8a0 <z_impl_net_addr_pton+0x50>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   3d940:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   3d944:	f806 8015 	strb.w	r8, [r6, r5, lsl #1]
   3d948:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   3d94c:	3501      	adds	r5, #1
   3d94e:	42af      	cmp	r7, r5
   3d950:	dcf6      	bgt.n	3d940 <z_impl_net_addr_pton+0xf0>
			tmp = strrchr(src, ':');
   3d952:	213a      	movs	r1, #58	; 0x3a
   3d954:	4620      	mov	r0, r4
   3d956:	f003 ff73 	bl	41840 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   3d95a:	4284      	cmp	r4, r0
   3d95c:	d11f      	bne.n	3d99e <z_impl_net_addr_pton+0x14e>
   3d95e:	2f06      	cmp	r7, #6
   3d960:	d001      	beq.n	3d966 <z_impl_net_addr_pton+0x116>
   3d962:	7863      	ldrb	r3, [r4, #1]
   3d964:	b9fb      	cbnz	r3, 3d9a6 <z_impl_net_addr_pton+0x156>
				src++;
   3d966:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   3d968:	2f06      	cmp	r7, #6
   3d96a:	d18f      	bne.n	3d88c <z_impl_net_addr_pton+0x3c>
			for (i = 0; i < 4; i++) {
   3d96c:	2500      	movs	r5, #0
   3d96e:	360c      	adds	r6, #12
				if (!src || !*src) {
   3d970:	2c00      	cmp	r4, #0
   3d972:	d095      	beq.n	3d8a0 <z_impl_net_addr_pton+0x50>
   3d974:	7823      	ldrb	r3, [r4, #0]
   3d976:	2b00      	cmp	r3, #0
   3d978:	d092      	beq.n	3d8a0 <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   3d97a:	220a      	movs	r2, #10
   3d97c:	2100      	movs	r1, #0
   3d97e:	4620      	mov	r0, r4
   3d980:	f7fc ff7e 	bl	3a880 <strtol>
				src = strchr(src, '.');
   3d984:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   3d986:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   3d98a:	4620      	mov	r0, r4
   3d98c:	f003 ff10 	bl	417b0 <strchr>
				if (src) {
   3d990:	4604      	mov	r4, r0
   3d992:	b1b0      	cbz	r0, 3d9c2 <z_impl_net_addr_pton+0x172>
					src++;
   3d994:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   3d996:	3501      	adds	r5, #1
   3d998:	2d04      	cmp	r5, #4
   3d99a:	d1e9      	bne.n	3d970 <z_impl_net_addr_pton+0x120>
   3d99c:	e776      	b.n	3d88c <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
   3d99e:	2f06      	cmp	r7, #6
				tmp--;
   3d9a0:	bf08      	it	eq
   3d9a2:	f100 30ff 	addeq.w	r0, r0, #4294967295
			i = expected_groups - 1;
   3d9a6:	1e7d      	subs	r5, r7, #1
   3d9a8:	3001      	adds	r0, #1
				if (*tmp == ':') {
   3d9aa:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   3d9ae:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   3d9b0:	bf08      	it	eq
   3d9b2:	f105 35ff 	addeq.w	r5, r5, #4294967295
				if (i < 0) {
   3d9b6:	2d00      	cmp	r5, #0
   3d9b8:	f6ff af72 	blt.w	3d8a0 <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
   3d9bc:	4284      	cmp	r4, r0
   3d9be:	d1f4      	bne.n	3d9aa <z_impl_net_addr_pton+0x15a>
   3d9c0:	e7a5      	b.n	3d90e <z_impl_net_addr_pton+0xbe>
					if (i < 3) {
   3d9c2:	2d03      	cmp	r5, #3
   3d9c4:	f47f af6c 	bne.w	3d8a0 <z_impl_net_addr_pton+0x50>
   3d9c8:	e7e5      	b.n	3d996 <z_impl_net_addr_pton+0x146>

0003d9ca <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	NET_DBG(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3d9ca:	e9d0 2300 	ldrd	r2, r3, [r0]
   3d9ce:	1a9b      	subs	r3, r3, r2
   3d9d0:	2b01      	cmp	r3, #1
{
   3d9d2:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3d9d4:	d90c      	bls.n	3d9f0 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   3d9d6:	4614      	mov	r4, r2
   3d9d8:	1c53      	adds	r3, r2, #1
   3d9da:	6003      	str	r3, [r0, #0]
   3d9dc:	f814 3b02 	ldrb.w	r3, [r4], #2
   3d9e0:	021b      	lsls	r3, r3, #8
   3d9e2:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   3d9e4:	6004      	str	r4, [r0, #0]

	NET_DBG("<< val:%04x", *val);

	return 0;
   3d9e6:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   3d9e8:	7852      	ldrb	r2, [r2, #1]
   3d9ea:	4313      	orrs	r3, r2
   3d9ec:	800b      	strh	r3, [r1, #0]
}
   3d9ee:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3d9f0:	f06f 0015 	mvn.w	r0, #21
   3d9f4:	e7fb      	b.n	3d9ee <unpack_uint16+0x24>

0003d9f6 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   3d9f6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3d9f8:	e9d0 3400 	ldrd	r3, r4, [r0]
   3d9fc:	429c      	cmp	r4, r3
   3d9fe:	d01f      	beq.n	3da40 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   3da00:	1c5c      	adds	r4, r3, #1
   3da02:	6004      	str	r4, [r0, #0]
   3da04:	781b      	ldrb	r3, [r3, #0]
   3da06:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   3da08:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   3da0a:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   3da0c:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   3da0e:	6804      	ldr	r4, [r0, #0]
   3da10:	42bc      	cmp	r4, r7
   3da12:	d218      	bcs.n	3da46 <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3da14:	4625      	mov	r5, r4
   3da16:	f815 3b01 	ldrb.w	r3, [r5], #1
   3da1a:	6816      	ldr	r6, [r2, #0]
   3da1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   3da20:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3da22:	4433      	add	r3, r6
   3da24:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   3da26:	6005      	str	r5, [r0, #0]
   3da28:	f994 4000 	ldrsb.w	r4, [r4]
   3da2c:	2c00      	cmp	r4, #0
   3da2e:	db04      	blt.n	3da3a <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   3da30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   3da34:	d204      	bcs.n	3da40 <fixed_header_decode+0x4a>
	return 0;
   3da36:	2000      	movs	r0, #0
   3da38:	e004      	b.n	3da44 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   3da3a:	3107      	adds	r1, #7
   3da3c:	291c      	cmp	r1, #28
   3da3e:	d1e6      	bne.n	3da0e <fixed_header_decode+0x18>
		return -EINVAL;
   3da40:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   3da44:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   3da46:	f06f 000a 	mvn.w	r0, #10
   3da4a:	e7fb      	b.n	3da44 <fixed_header_decode+0x4e>

0003da4c <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   3da4c:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3da4e:	e9d1 3500 	ldrd	r3, r5, [r1]
   3da52:	429d      	cmp	r5, r3
   3da54:	d102      	bne.n	3da5c <connect_ack_decode+0x10>
		return -EINVAL;
   3da56:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   3da5a:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   3da5c:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3da5e:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   3da60:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3da62:	d0f8      	beq.n	3da56 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   3da64:	461d      	mov	r5, r3
   3da66:	f815 4b02 	ldrb.w	r4, [r5], #2
   3da6a:	600d      	str	r5, [r1, #0]
   3da6c:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3da6e:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
	return 0;
   3da72:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3da74:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   3da76:	bf04      	itt	eq
   3da78:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   3da7c:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   3da7e:	7051      	strb	r1, [r2, #1]
	return 0;
   3da80:	e7eb      	b.n	3da5a <connect_ack_decode+0xe>

0003da82 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   3da82:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3da86:	461c      	mov	r4, r3
   3da88:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3da8a:	7da2      	ldrb	r2, [r4, #22]
   3da8c:	0043      	lsls	r3, r0, #1
   3da8e:	f022 0203 	bic.w	r2, r2, #3
   3da92:	f003 0302 	and.w	r3, r3, #2
   3da96:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   3da98:	f3c0 0041 	ubfx	r0, r0, #1, #2
   3da9c:	7220      	strb	r0, [r4, #8]
{
   3da9e:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   3daa0:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3daa2:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   3daa4:	f10d 0106 	add.w	r1, sp, #6
   3daa8:	f7ff ff8f 	bl	3d9ca <unpack_uint16>
	if (err_code != 0) {
   3daac:	4606      	mov	r6, r0
   3daae:	b9c0      	cbnz	r0, 3dae2 <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   3dab0:	683b      	ldr	r3, [r7, #0]
   3dab2:	687a      	ldr	r2, [r7, #4]
   3dab4:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   3dab8:	1ad2      	subs	r2, r2, r3
   3daba:	42aa      	cmp	r2, r5
   3dabc:	da02      	bge.n	3dac4 <publish_decode+0x42>

	if (var_length < var_header_length) {
		NET_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   3dabe:	f06f 0615 	mvn.w	r6, #21
   3dac2:	e00e      	b.n	3dae2 <publish_decode+0x60>
	str->size = utf8_strlen;
   3dac4:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   3dac6:	b185      	cbz	r5, 3daea <publish_decode+0x68>
		str->utf8 = buf->cur;
   3dac8:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   3daca:	442b      	add	r3, r5
   3dacc:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3dace:	7a23      	ldrb	r3, [r4, #8]
   3dad0:	b96b      	cbnz	r3, 3daee <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   3dad2:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   3dad4:	45a8      	cmp	r8, r5
   3dad6:	d3f2      	bcc.n	3dabe <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   3dad8:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   3dada:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   3dade:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   3dae0:	6125      	str	r5, [r4, #16]

	return 0;
}
   3dae2:	4630      	mov	r0, r6
   3dae4:	b002      	add	sp, #8
   3dae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   3daea:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   3daec:	e7ef      	b.n	3dace <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   3daee:	4638      	mov	r0, r7
   3daf0:	f104 0114 	add.w	r1, r4, #20
   3daf4:	f7ff ff69 	bl	3d9ca <unpack_uint16>
		if (err_code != 0) {
   3daf8:	b908      	cbnz	r0, 3dafe <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   3dafa:	3504      	adds	r5, #4
   3dafc:	e7ea      	b.n	3dad4 <publish_decode+0x52>
   3dafe:	4606      	mov	r6, r0
   3db00:	e7ef      	b.n	3dae2 <publish_decode+0x60>

0003db02 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3db02:	f7ff bf62 	b.w	3d9ca <unpack_uint16>

0003db06 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3db06:	f7ff bf60 	b.w	3d9ca <unpack_uint16>

0003db0a <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3db0a:	f7ff bf5e 	b.w	3d9ca <unpack_uint16>

0003db0e <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3db0e:	f7ff bf5c 	b.w	3d9ca <unpack_uint16>

0003db12 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   3db12:	b538      	push	{r3, r4, r5, lr}
   3db14:	4605      	mov	r5, r0
   3db16:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   3db18:	f7ff ff57 	bl	3d9ca <unpack_uint16>
	if (err_code != 0) {
   3db1c:	b930      	cbnz	r0, 3db2c <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   3db1e:	e9d5 2300 	ldrd	r2, r3, [r5]
   3db22:	1a99      	subs	r1, r3, r2
	str->len = length;
   3db24:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   3db26:	b111      	cbz	r1, 3db2e <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   3db28:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   3db2a:	602b      	str	r3, [r5, #0]
}
   3db2c:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   3db2e:	6060      	str	r0, [r4, #4]
   3db30:	e7fc      	b.n	3db2c <subscribe_ack_decode+0x1a>

0003db32 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3db32:	f7ff bf4a 	b.w	3d9ca <unpack_uint16>

0003db36 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3db36:	e9d1 3200 	ldrd	r3, r2, [r1]
   3db3a:	1ad2      	subs	r2, r2, r3
   3db3c:	2a01      	cmp	r2, #1
   3db3e:	d909      	bls.n	3db54 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   3db40:	1c5a      	adds	r2, r3, #1
   3db42:	600a      	str	r2, [r1, #0]
   3db44:	0a02      	lsrs	r2, r0, #8
   3db46:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   3db48:	680b      	ldr	r3, [r1, #0]
   3db4a:	1c5a      	adds	r2, r3, #1
   3db4c:	600a      	str	r2, [r1, #0]
   3db4e:	7018      	strb	r0, [r3, #0]
	return 0;
   3db50:	2000      	movs	r0, #0
   3db52:	4770      	bx	lr
		return -ENOMEM;
   3db54:	f06f 000b 	mvn.w	r0, #11
}
   3db58:	4770      	bx	lr

0003db5a <pack_utf8_str>:
{
   3db5a:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3db5c:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   3db60:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3db62:	6840      	ldr	r0, [r0, #4]
   3db64:	1a9b      	subs	r3, r3, r2
   3db66:	1c82      	adds	r2, r0, #2
   3db68:	4293      	cmp	r3, r2
{
   3db6a:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3db6c:	d30d      	bcc.n	3db8a <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   3db6e:	b280      	uxth	r0, r0
   3db70:	f7ff ffe1 	bl	3db36 <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3db74:	e9d5 1200 	ldrd	r1, r2, [r5]
   3db78:	6820      	ldr	r0, [r4, #0]
   3db7a:	f003 fc3b 	bl	413f4 <memcpy>
	return 0;
   3db7e:	2000      	movs	r0, #0
	buf->cur += str->size;
   3db80:	6823      	ldr	r3, [r4, #0]
   3db82:	686a      	ldr	r2, [r5, #4]
   3db84:	4413      	add	r3, r2
   3db86:	6023      	str	r3, [r4, #0]
}
   3db88:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3db8a:	f06f 000b 	mvn.w	r0, #11
   3db8e:	e7fb      	b.n	3db88 <pack_utf8_str+0x2e>

0003db90 <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   3db90:	6813      	ldr	r3, [r2, #0]
{
   3db92:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   3db94:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   3db96:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   3db9a:	d227      	bcs.n	3dbec <mqtt_encode_fixed_header+0x5c>
   3db9c:	4625      	mov	r5, r4
   3db9e:	2600      	movs	r6, #0
	} while (length > 0);
   3dba0:	09ed      	lsrs	r5, r5, #7
   3dba2:	b2f3      	uxtb	r3, r6
   3dba4:	f106 0601 	add.w	r6, r6, #1
   3dba8:	d1fa      	bne.n	3dba0 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   3dbaa:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3dbac:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   3dbae:	b2db      	uxtb	r3, r3
   3dbb0:	425d      	negs	r5, r3
   3dbb2:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3dbb4:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   3dbb6:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   3dbb8:	bf1e      	ittt	ne
   3dbba:	3301      	addne	r3, #1
   3dbbc:	6013      	strne	r3, [r2, #0]
   3dbbe:	5548      	strbne	r0, [r1, r5]
	return 0;
   3dbc0:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   3dbc2:	6813      	ldr	r3, [r2, #0]
   3dbc4:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   3dbc8:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   3dbca:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   3dbcc:	bf1f      	itttt	ne
   3dbce:	6811      	ldrne	r1, [r2, #0]
   3dbd0:	780b      	ldrbne	r3, [r1, #0]
   3dbd2:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   3dbd6:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   3dbd8:	6813      	ldr	r3, [r2, #0]
   3dbda:	3301      	adds	r3, #1
   3dbdc:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   3dbde:	2800      	cmp	r0, #0
   3dbe0:	d1ef      	bne.n	3dbc2 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   3dbe2:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   3dbe4:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   3dbe6:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   3dbe8:	6053      	str	r3, [r2, #4]
}
   3dbea:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   3dbec:	f06f 0079 	mvn.w	r0, #121	; 0x79
   3dbf0:	e7fb      	b.n	3dbea <mqtt_encode_fixed_header+0x5a>

0003dbf2 <mqtt_message_id_only_enc>:
{
   3dbf2:	b570      	push	{r4, r5, r6, lr}
   3dbf4:	4606      	mov	r6, r0
   3dbf6:	4614      	mov	r4, r2
	if (message_id == 0U) {
   3dbf8:	4608      	mov	r0, r1
   3dbfa:	b169      	cbz	r1, 3dc18 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dbfc:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3dbfe:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dc00:	3505      	adds	r5, #5
   3dc02:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3dc04:	f7ff ff97 	bl	3db36 <pack_uint16>
	if (err_code != 0) {
   3dc08:	b940      	cbnz	r0, 3dc1c <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dc0a:	4622      	mov	r2, r4
   3dc0c:	4629      	mov	r1, r5
   3dc0e:	4630      	mov	r0, r6
}
   3dc10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dc14:	f7ff bfbc 	b.w	3db90 <mqtt_encode_fixed_header>
		return -EINVAL;
   3dc18:	f06f 0015 	mvn.w	r0, #21
}
   3dc1c:	bd70      	pop	{r4, r5, r6, pc}

0003dc1e <publish_encode>:
{
   3dc1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3dc22:	7d87      	ldrb	r7, [r0, #22]
   3dc24:	7a04      	ldrb	r4, [r0, #8]
   3dc26:	f007 0801 	and.w	r8, r7, #1
{
   3dc2a:	4605      	mov	r5, r0
   3dc2c:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3dc2e:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   3dc32:	b10c      	cbz	r4, 3dc38 <publish_encode+0x1a>
   3dc34:	8a83      	ldrh	r3, [r0, #20]
   3dc36:	b383      	cbz	r3, 3dc9a <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dc38:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3dc3c:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dc3e:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3dc40:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dc42:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3dc46:	f7ff ff88 	bl	3db5a <pack_utf8_str>
	if (err_code != 0) {
   3dc4a:	b9b0      	cbnz	r0, 3dc7a <publish_encode+0x5c>
	if (param->message.topic.qos) {
   3dc4c:	7a2b      	ldrb	r3, [r5, #8]
   3dc4e:	b9b3      	cbnz	r3, 3dc7e <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3dc50:	0060      	lsls	r0, r4, #1
   3dc52:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   3dc56:	692a      	ldr	r2, [r5, #16]
   3dc58:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3dc5c:	4338      	orrs	r0, r7
   3dc5e:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   3dc62:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3dc64:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3dc68:	464a      	mov	r2, r9
   3dc6a:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   3dc6c:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3dc70:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3dc74:	f7ff ff8c 	bl	3db90 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   3dc78:	b140      	cbz	r0, 3dc8c <publish_encode+0x6e>
}
   3dc7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   3dc7e:	4649      	mov	r1, r9
   3dc80:	8aa8      	ldrh	r0, [r5, #20]
   3dc82:	f7ff ff58 	bl	3db36 <pack_uint16>
		if (err_code != 0) {
   3dc86:	2800      	cmp	r0, #0
   3dc88:	d0e2      	beq.n	3dc50 <publish_encode+0x32>
   3dc8a:	e7f6      	b.n	3dc7a <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   3dc8c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3dc90:	692a      	ldr	r2, [r5, #16]
   3dc92:	1a9b      	subs	r3, r3, r2
   3dc94:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   3dc98:	e7ef      	b.n	3dc7a <publish_encode+0x5c>
		return -EINVAL;
   3dc9a:	f06f 0015 	mvn.w	r0, #21
   3dc9e:	e7ec      	b.n	3dc7a <publish_encode+0x5c>

0003dca0 <publish_ack_encode>:
{
   3dca0:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   3dca2:	8801      	ldrh	r1, [r0, #0]
   3dca4:	2040      	movs	r0, #64	; 0x40
   3dca6:	f7ff bfa4 	b.w	3dbf2 <mqtt_message_id_only_enc>

0003dcaa <subscribe_encode>:
{
   3dcaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3dcae:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   3dcb0:	88c0      	ldrh	r0, [r0, #6]
{
   3dcb2:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   3dcb4:	b330      	cbz	r0, 3dd04 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dcb6:	680f      	ldr	r7, [r1, #0]
   3dcb8:	3705      	adds	r7, #5
   3dcba:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3dcbc:	f7ff ff3b 	bl	3db36 <pack_uint16>
	if (err_code != 0) {
   3dcc0:	4604      	mov	r4, r0
   3dcc2:	bb08      	cbnz	r0, 3dd08 <subscribe_encode+0x5e>
   3dcc4:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3dcc8:	88b3      	ldrh	r3, [r6, #4]
   3dcca:	42a3      	cmp	r3, r4
   3dccc:	dc06      	bgt.n	3dcdc <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dcce:	462a      	mov	r2, r5
   3dcd0:	4639      	mov	r1, r7
}
   3dcd2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dcd6:	2082      	movs	r0, #130	; 0x82
   3dcd8:	f7ff bf5a 	b.w	3db90 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3dcdc:	fb08 f904 	mul.w	r9, r8, r4
   3dce0:	6830      	ldr	r0, [r6, #0]
   3dce2:	4629      	mov	r1, r5
   3dce4:	4448      	add	r0, r9
   3dce6:	f7ff ff38 	bl	3db5a <pack_utf8_str>
		if (err_code != 0) {
   3dcea:	b980      	cbnz	r0, 3dd0e <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   3dcec:	6833      	ldr	r3, [r6, #0]
   3dcee:	444b      	add	r3, r9
   3dcf0:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3dcf2:	e9d5 3100 	ldrd	r3, r1, [r5]
   3dcf6:	4299      	cmp	r1, r3
   3dcf8:	d00b      	beq.n	3dd12 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   3dcfa:	1c59      	adds	r1, r3, #1
   3dcfc:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   3dcfe:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   3dd00:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   3dd02:	e7e1      	b.n	3dcc8 <subscribe_encode+0x1e>
		return -EINVAL;
   3dd04:	f06f 0415 	mvn.w	r4, #21
}
   3dd08:	4620      	mov	r0, r4
   3dd0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3dd0e:	4604      	mov	r4, r0
   3dd10:	e7fa      	b.n	3dd08 <subscribe_encode+0x5e>
		return -ENOMEM;
   3dd12:	f06f 040b 	mvn.w	r4, #11
   3dd16:	e7f7      	b.n	3dd08 <subscribe_encode+0x5e>

0003dd18 <unsubscribe_encode>:
{
   3dd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dd1c:	680f      	ldr	r7, [r1, #0]
{
   3dd1e:	4606      	mov	r6, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dd20:	3705      	adds	r7, #5
	err_code = pack_uint16(param->message_id, buf);
   3dd22:	88c0      	ldrh	r0, [r0, #6]
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dd24:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3dd26:	f7ff ff06 	bl	3db36 <pack_uint16>
{
   3dd2a:	460d      	mov	r5, r1
	if (err_code != 0) {
   3dd2c:	4604      	mov	r4, r0
   3dd2e:	b9a8      	cbnz	r0, 3dd5c <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3dd30:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3dd34:	88b3      	ldrh	r3, [r6, #4]
   3dd36:	42a3      	cmp	r3, r4
   3dd38:	dc06      	bgt.n	3dd48 <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dd3a:	462a      	mov	r2, r5
   3dd3c:	4639      	mov	r1, r7
}
   3dd3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dd42:	20a2      	movs	r0, #162	; 0xa2
   3dd44:	f7ff bf24 	b.w	3db90 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3dd48:	6830      	ldr	r0, [r6, #0]
   3dd4a:	4629      	mov	r1, r5
   3dd4c:	fb08 0004 	mla	r0, r8, r4, r0
   3dd50:	f7ff ff03 	bl	3db5a <pack_utf8_str>
		if (err_code != 0) {
   3dd54:	b908      	cbnz	r0, 3dd5a <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   3dd56:	3401      	adds	r4, #1
   3dd58:	e7ec      	b.n	3dd34 <unsubscribe_encode+0x1c>
   3dd5a:	4604      	mov	r4, r0
}
   3dd5c:	4620      	mov	r0, r4
   3dd5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003dd62 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   3dd62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3dd64:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   3dd66:	e9d1 3100 	ldrd	r3, r1, [r1]
   3dd6a:	1acb      	subs	r3, r1, r3
   3dd6c:	4293      	cmp	r3, r2
{
   3dd6e:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   3dd70:	d301      	bcc.n	3dd76 <mqtt_read_message_chunk+0x14>
		return 0;
   3dd72:	2000      	movs	r0, #0
		NET_ERR("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   3dd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   3dd76:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   3dd78:	190f      	adds	r7, r1, r4
   3dd7a:	e9d0 231c 	ldrd	r2, r3, [r0, #112]	; 0x70
   3dd7e:	4413      	add	r3, r2
   3dd80:	429f      	cmp	r7, r3
   3dd82:	d813      	bhi.n	3ddac <mqtt_read_message_chunk+0x4a>
   3dd84:	4297      	cmp	r7, r2
   3dd86:	d311      	bcc.n	3ddac <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   3dd88:	2300      	movs	r3, #0
   3dd8a:	4622      	mov	r2, r4
   3dd8c:	f7e6 f912 	bl	23fb4 <mqtt_transport_read>
	if (len < 0) {
   3dd90:	2800      	cmp	r0, #0
   3dd92:	dbef      	blt.n	3dd74 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   3dd94:	d00d      	beq.n	3ddb2 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   3dd96:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   3dd98:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   3dd9a:	4403      	add	r3, r0
   3dd9c:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   3dd9e:	686b      	ldr	r3, [r5, #4]
   3dda0:	4403      	add	r3, r0
   3dda2:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   3dda4:	d2e5      	bcs.n	3dd72 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   3dda6:	f06f 000a 	mvn.w	r0, #10
   3ddaa:	e7e3      	b.n	3dd74 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   3ddac:	f06f 000b 	mvn.w	r0, #11
   3ddb0:	e7e0      	b.n	3dd74 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   3ddb2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3ddb6:	e7dd      	b.n	3dd74 <mqtt_read_message_chunk+0x12>

0003ddb8 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   3ddb8:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   3ddba:	6f03      	ldr	r3, [r0, #112]	; 0x70
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3ddbc:	69c2      	ldr	r2, [r0, #28]
{
   3ddbe:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   3ddc0:	9302      	str	r3, [sp, #8]
{
   3ddc2:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3ddc4:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   3ddc6:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3ddc8:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   3ddca:	4628      	mov	r0, r5
   3ddcc:	a902      	add	r1, sp, #8
   3ddce:	f7ff ffc8 	bl	3dd62 <mqtt_read_message_chunk>
		if (err_code < 0) {
   3ddd2:	1e04      	subs	r4, r0, #0
   3ddd4:	db2d      	blt.n	3de32 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   3ddd6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3ddd8:	aa01      	add	r2, sp, #4
   3ddda:	f10d 0103 	add.w	r1, sp, #3
   3ddde:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   3dde0:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3dde2:	f7ff fe08 	bl	3d9f6 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   3dde6:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3ddea:	4604      	mov	r4, r0
		chunk_size = 1U;
   3ddec:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   3ddf0:	d0eb      	beq.n	3ddca <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   3ddf2:	2800      	cmp	r0, #0
   3ddf4:	db21      	blt.n	3de3a <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   3ddf6:	f89d 6003 	ldrb.w	r6, [sp, #3]
   3ddfa:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   3ddfe:	2b30      	cmp	r3, #48	; 0x30
   3de00:	d11e      	bne.n	3de40 <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   3de02:	2202      	movs	r2, #2
   3de04:	4628      	mov	r0, r5
   3de06:	a902      	add	r1, sp, #8
   3de08:	f7ff ffab 	bl	3dd62 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3de0c:	1e04      	subs	r4, r0, #0
   3de0e:	db10      	blt.n	3de32 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   3de10:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3de12:	f016 0f06 	tst.w	r6, #6
   3de16:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   3de18:	4628      	mov	r0, r5
   3de1a:	ba52      	rev16	r2, r2
   3de1c:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   3de1e:	bf0c      	ite	eq
   3de20:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   3de22:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   3de24:	a902      	add	r1, sp, #8
   3de26:	f7ff ff9c 	bl	3dd62 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3de2a:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   3de2e:	2c00      	cmp	r4, #0
   3de30:	da0d      	bge.n	3de4e <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   3de32:	f114 0f0b 	cmn.w	r4, #11
   3de36:	d100      	bne.n	3de3a <mqtt_handle_rx+0x82>
   3de38:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   3de3a:	4620      	mov	r0, r4
   3de3c:	b00c      	add	sp, #48	; 0x30
   3de3e:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3de40:	4628      	mov	r0, r5
   3de42:	9a01      	ldr	r2, [sp, #4]
   3de44:	a902      	add	r1, sp, #8
   3de46:	f7ff ff8c 	bl	3dd62 <mqtt_read_message_chunk>
   3de4a:	4604      	mov	r4, r0
   3de4c:	e7ef      	b.n	3de2e <mqtt_handle_rx+0x76>
	evt.result = 0;
   3de4e:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   3de50:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3de54:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   3de56:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   3de5a:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   3de5c:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   3de5e:	d066      	beq.n	3df2e <mqtt_handle_rx+0x176>
   3de60:	d813      	bhi.n	3de8a <mqtt_handle_rx+0xd2>
   3de62:	2b40      	cmp	r3, #64	; 0x40
   3de64:	d059      	beq.n	3df1a <mqtt_handle_rx+0x162>
   3de66:	d806      	bhi.n	3de76 <mqtt_handle_rx+0xbe>
   3de68:	2b20      	cmp	r3, #32
   3de6a:	d02f      	beq.n	3decc <mqtt_handle_rx+0x114>
   3de6c:	2b30      	cmp	r3, #48	; 0x30
   3de6e:	d048      	beq.n	3df02 <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   3de70:	2400      	movs	r4, #0
   3de72:	61ec      	str	r4, [r5, #28]
	return 0;
   3de74:	e7e1      	b.n	3de3a <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   3de76:	2b50      	cmp	r3, #80	; 0x50
   3de78:	d1fa      	bne.n	3de70 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   3de7a:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3de7c:	a905      	add	r1, sp, #20
   3de7e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   3de80:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3de84:	f7ff fe3f 	bl	3db06 <publish_receive_decode>
   3de88:	e04e      	b.n	3df28 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   3de8a:	2bb0      	cmp	r3, #176	; 0xb0
   3de8c:	d05f      	beq.n	3df4e <mqtt_handle_rx+0x196>
   3de8e:	d80b      	bhi.n	3dea8 <mqtt_handle_rx+0xf0>
   3de90:	2b70      	cmp	r3, #112	; 0x70
   3de92:	d054      	beq.n	3df3e <mqtt_handle_rx+0x186>
   3de94:	2b90      	cmp	r3, #144	; 0x90
   3de96:	d1eb      	bne.n	3de70 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   3de98:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3de9a:	a905      	add	r1, sp, #20
   3de9c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   3de9e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3dea2:	f7ff fe36 	bl	3db12 <subscribe_ack_decode>
   3dea6:	e03f      	b.n	3df28 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   3dea8:	2bd0      	cmp	r3, #208	; 0xd0
   3deaa:	d1e1      	bne.n	3de70 <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   3deac:	f995 3083 	ldrsb.w	r3, [r5, #131]	; 0x83
	int err_code = 0;
   3deb0:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   3deb2:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   3deb4:	bfc8      	it	gt
   3deb6:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   3deba:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   3debe:	bfc8      	it	gt
   3dec0:	b252      	sxtbgt	r2, r2
   3dec2:	f885 2083 	strb.w	r2, [r5, #131]	; 0x83
		evt.type = MQTT_EVT_PINGRESP;
   3dec6:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   3deca:	e010      	b.n	3deee <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   3decc:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   3ded0:	4628      	mov	r0, r5
   3ded2:	aa05      	add	r2, sp, #20
   3ded4:	a902      	add	r1, sp, #8
   3ded6:	f7ff fdb9 	bl	3da4c <connect_ack_decode>
		if (err_code == 0) {
   3deda:	4604      	mov	r4, r0
   3dedc:	bb28      	cbnz	r0, 3df2a <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   3dede:	f89d 2015 	ldrb.w	r2, [sp, #21]
   3dee2:	b95a      	cbnz	r2, 3defc <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   3dee4:	69ab      	ldr	r3, [r5, #24]
   3dee6:	f043 0304 	orr.w	r3, r3, #4
   3deea:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   3deec:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   3deee:	4628      	mov	r0, r5
   3def0:	a904      	add	r1, sp, #16
   3def2:	f000 f8f1 	bl	3e0d8 <event_notify>
	if (err_code < 0) {
   3def6:	2c00      	cmp	r4, #0
   3def8:	daba      	bge.n	3de70 <mqtt_handle_rx+0xb8>
   3defa:	e79e      	b.n	3de3a <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   3defc:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   3df00:	e7f4      	b.n	3deec <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   3df02:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   3df04:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   3df06:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   3df0a:	ab05      	add	r3, sp, #20
   3df0c:	f7ff fdb9 	bl	3da82 <publish_decode>
		client->internal.remaining_payload =
   3df10:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   3df12:	4604      	mov	r4, r0
		evt.result = err_code;
   3df14:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   3df16:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   3df18:	e7e9      	b.n	3deee <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   3df1a:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3df1c:	a905      	add	r1, sp, #20
   3df1e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   3df20:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3df24:	f7ff fded 	bl	3db02 <publish_ack_decode>
   3df28:	4604      	mov	r4, r0
		evt.result = err_code;
   3df2a:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   3df2c:	e7df      	b.n	3deee <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   3df2e:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3df30:	a905      	add	r1, sp, #20
   3df32:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   3df34:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3df38:	f7ff fde7 	bl	3db0a <publish_release_decode>
   3df3c:	e7f4      	b.n	3df28 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   3df3e:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3df40:	a905      	add	r1, sp, #20
   3df42:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   3df44:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3df48:	f7ff fde1 	bl	3db0e <publish_complete_decode>
   3df4c:	e7ec      	b.n	3df28 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   3df4e:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3df50:	a905      	add	r1, sp, #20
   3df52:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   3df56:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3df5a:	f7ff fdea 	bl	3db32 <unsubscribe_ack_decode>
   3df5e:	e7e3      	b.n	3df28 <mqtt_handle_rx+0x170>

0003df60 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   3df60:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   3df62:	6d85      	ldr	r5, [r0, #88]	; 0x58
{
   3df64:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   3df66:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3df68:	2206      	movs	r2, #6
   3df6a:	2101      	movs	r1, #1
   3df6c:	f7e3 fca0 	bl	218b0 <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   3df70:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   3df72:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   3df74:	da04      	bge.n	3df80 <mqtt_client_tcp_connect+0x20>
	NET_DBG("Connect completed");
	return 0;

error:
	(void)zsock_close(client->transport.tcp.sock);
	return -errno;
   3df76:	f7ff fc02 	bl	3d77e <__errno>
   3df7a:	6800      	ldr	r0, [r0, #0]
   3df7c:	4240      	negs	r0, r0
}
   3df7e:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   3df80:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   3df82:	6da1      	ldr	r1, [r4, #88]	; 0x58
		peer_addr_size = sizeof(struct sockaddr_in);
   3df84:	2b01      	cmp	r3, #1
   3df86:	bf14      	ite	ne
   3df88:	2218      	movne	r2, #24
   3df8a:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   3df8c:	f7ff f925 	bl	3d1da <z_impl_zsock_connect>
	if (ret < 0) {
   3df90:	2800      	cmp	r0, #0
   3df92:	da03      	bge.n	3df9c <mqtt_client_tcp_connect+0x3c>
	(void)zsock_close(client->transport.tcp.sock);
   3df94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3df96:	f7ff f8fc 	bl	3d192 <z_impl_zsock_close>
   3df9a:	e7ec      	b.n	3df76 <mqtt_client_tcp_connect+0x16>
	return 0;
   3df9c:	2000      	movs	r0, #0
   3df9e:	e7ee      	b.n	3df7e <mqtt_client_tcp_connect+0x1e>

0003dfa0 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3dfa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   3dfa4:	2400      	movs	r4, #0
{
   3dfa6:	4606      	mov	r6, r0
   3dfa8:	460f      	mov	r7, r1
   3dfaa:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3dfac:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3dfae:	42ac      	cmp	r4, r5
   3dfb0:	d301      	bcc.n	3dfb6 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3dfb2:	2000      	movs	r0, #0
   3dfb4:	e00d      	b.n	3dfd2 <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   3dfb6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3dfb8:	2300      	movs	r3, #0
   3dfba:	e9cd 8800 	strd	r8, r8, [sp]
   3dfbe:	1b2a      	subs	r2, r5, r4
   3dfc0:	1939      	adds	r1, r7, r4
   3dfc2:	f7ff f931 	bl	3d228 <z_impl_zsock_sendto>
		if (ret < 0) {
   3dfc6:	1e03      	subs	r3, r0, #0
   3dfc8:	da06      	bge.n	3dfd8 <mqtt_client_tcp_write+0x38>
			return -errno;
   3dfca:	f7ff fbd8 	bl	3d77e <__errno>
   3dfce:	6800      	ldr	r0, [r0, #0]
   3dfd0:	4240      	negs	r0, r0
}
   3dfd2:	b002      	add	sp, #8
   3dfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3dfd8:	441c      	add	r4, r3
   3dfda:	e7e8      	b.n	3dfae <mqtt_client_tcp_write+0xe>

0003dfdc <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   3dfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   3dfe0:	2500      	movs	r5, #0
{
   3dfe2:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   3dfe4:	462b      	mov	r3, r5
{
   3dfe6:	460c      	mov	r4, r1
   3dfe8:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   3dfea:	428b      	cmp	r3, r1
   3dfec:	d110      	bne.n	3e010 <mqtt_client_tcp_write_msg+0x34>
	size_t offset = 0;
   3dfee:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   3dff0:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   3dff2:	42ae      	cmp	r6, r5
   3dff4:	d216      	bcs.n	3e024 <mqtt_client_tcp_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   3dff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   3dff8:	2200      	movs	r2, #0
   3dffa:	4621      	mov	r1, r4
   3dffc:	f7ff f944 	bl	3d288 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   3e000:	1e03      	subs	r3, r0, #0
   3e002:	da0c      	bge.n	3e01e <mqtt_client_tcp_write_msg+0x42>
			return -errno;
   3e004:	f7ff fbbb 	bl	3d77e <__errno>
   3e008:	6800      	ldr	r0, [r0, #0]
   3e00a:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   3e00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   3e010:	68a2      	ldr	r2, [r4, #8]
   3e012:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   3e016:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   3e018:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   3e01a:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   3e01c:	e7e5      	b.n	3dfea <mqtt_client_tcp_write_msg+0xe>
		offset += ret;
   3e01e:	441e      	add	r6, r3
		if (offset >= total_len) {
   3e020:	42b5      	cmp	r5, r6
   3e022:	d801      	bhi.n	3e028 <mqtt_client_tcp_write_msg+0x4c>
	return 0;
   3e024:	2000      	movs	r0, #0
   3e026:	e7f1      	b.n	3e00c <mqtt_client_tcp_write_msg+0x30>
		for (i = 0; i < message->msg_iovlen; i++) {
   3e028:	2000      	movs	r0, #0
   3e02a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   3e02e:	4560      	cmp	r0, ip
   3e030:	d0df      	beq.n	3dff2 <mqtt_client_tcp_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   3e032:	68a2      	ldr	r2, [r4, #8]
   3e034:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   3e038:	6851      	ldr	r1, [r2, #4]
   3e03a:	4299      	cmp	r1, r3
   3e03c:	d905      	bls.n	3e04a <mqtt_client_tcp_write_msg+0x6e>
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3e03e:	6810      	ldr	r0, [r2, #0]
				message->msg_iov[i].iov_len -= ret;
   3e040:	1ac9      	subs	r1, r1, r3
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3e042:	4418      	add	r0, r3
				message->msg_iov[i].iov_len -= ret;
   3e044:	6051      	str	r1, [r2, #4]
				message->msg_iov[i].iov_base =
   3e046:	6010      	str	r0, [r2, #0]
				break;
   3e048:	e7d3      	b.n	3dff2 <mqtt_client_tcp_write_msg+0x16>
			ret -= message->msg_iov[i].iov_len;
   3e04a:	1a5b      	subs	r3, r3, r1
			message->msg_iov[i].iov_len = 0;
   3e04c:	f8c2 8004 	str.w	r8, [r2, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   3e050:	3001      	adds	r0, #1
   3e052:	e7ec      	b.n	3e02e <mqtt_client_tcp_write_msg+0x52>

0003e054 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   3e054:	b513      	push	{r0, r1, r4, lr}
   3e056:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= ZSOCK_MSG_DONTWAIT;
   3e058:	42a3      	cmp	r3, r4
   3e05a:	bf14      	ite	ne
   3e05c:	4623      	movne	r3, r4
   3e05e:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   3e060:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3e062:	e9cd 4400 	strd	r4, r4, [sp]
   3e066:	f7ff f936 	bl	3d2d6 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3e06a:	2800      	cmp	r0, #0
   3e06c:	da03      	bge.n	3e076 <mqtt_client_tcp_read+0x22>
		return -errno;
   3e06e:	f7ff fb86 	bl	3d77e <__errno>
   3e072:	6800      	ldr	r0, [r0, #0]
   3e074:	4240      	negs	r0, r0
	}

	return ret;
}
   3e076:	b002      	add	sp, #8
   3e078:	bd10      	pop	{r4, pc}

0003e07a <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   3e07a:	b508      	push	{r3, lr}
	int ret;

	NET_INFO("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   3e07c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3e07e:	f7ff f888 	bl	3d192 <z_impl_zsock_close>
	if (ret < 0) {
   3e082:	2800      	cmp	r0, #0
   3e084:	da04      	bge.n	3e090 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   3e086:	f7ff fb7a 	bl	3d77e <__errno>
   3e08a:	6800      	ldr	r0, [r0, #0]
   3e08c:	4240      	negs	r0, r0
	}

	return 0;
}
   3e08e:	bd08      	pop	{r3, pc}
	return 0;
   3e090:	2000      	movs	r0, #0
   3e092:	e7fc      	b.n	3e08e <mqtt_client_tcp_disconnect+0x14>

0003e094 <k_uptime_get_32>:
{
   3e094:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   3e096:	f003 f83d 	bl	41114 <z_impl_k_uptime_ticks>
   3e09a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3e09e:	fba0 3002 	umull	r3, r0, r0, r2
   3e0a2:	fb02 0101 	mla	r1, r2, r1, r0
   3e0a6:	0bd8      	lsrs	r0, r3, #15
}
   3e0a8:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   3e0ac:	bd08      	pop	{r3, pc}

0003e0ae <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   3e0ae:	b538      	push	{r3, r4, r5, lr}
   3e0b0:	4604      	mov	r4, r0
   3e0b2:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   3e0b4:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
   3e0b6:	2100      	movs	r1, #0
   3e0b8:	6f80      	ldr	r0, [r0, #120]	; 0x78
   3e0ba:	f003 f9bb 	bl	41434 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   3e0be:	6fa3      	ldr	r3, [r4, #120]	; 0x78
	buf->end = client->tx_buf + client->tx_buf_size;
   3e0c0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	buf->cur = client->tx_buf;
   3e0c2:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   3e0c4:	4413      	add	r3, r2
   3e0c6:	606b      	str	r3, [r5, #4]
}
   3e0c8:	bd38      	pop	{r3, r4, r5, pc}

0003e0ca <verify_tx_state.isra.0>:
}

static int verify_tx_state(const struct mqtt_client *client)
{
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
		return -ENOTCONN;
   3e0ca:	f010 0f04 	tst.w	r0, #4
	}

	return 0;
}
   3e0ce:	bf0c      	ite	eq
   3e0d0:	f06f 007f 	mvneq.w	r0, #127	; 0x7f
   3e0d4:	2000      	movne	r0, #0
   3e0d6:	4770      	bx	lr

0003e0d8 <event_notify>:
{
   3e0d8:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   3e0da:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
   3e0dc:	4604      	mov	r4, r0
   3e0de:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   3e0e0:	b15b      	cbz	r3, 3e0fa <event_notify+0x22>
		mqtt_mutex_unlock(client);
   3e0e2:	f7e5 ff7f 	bl	23fe4 <mqtt_mutex_unlock>
		client->evt_cb(client, evt);
   3e0e6:	4620      	mov	r0, r4
   3e0e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   3e0ea:	9901      	ldr	r1, [sp, #4]
   3e0ec:	4798      	blx	r3
		mqtt_mutex_lock(client);
   3e0ee:	4620      	mov	r0, r4
}
   3e0f0:	b002      	add	sp, #8
   3e0f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   3e0f6:	f7e5 bf89 	b.w	2400c <mqtt_mutex_lock>
}
   3e0fa:	b002      	add	sp, #8
   3e0fc:	bd10      	pop	{r4, pc}

0003e0fe <client_disconnect.constprop.0>:
static void client_disconnect(struct mqtt_client *client, int result,
   3e0fe:	b530      	push	{r4, r5, lr}
   3e100:	b089      	sub	sp, #36	; 0x24
   3e102:	4604      	mov	r4, r0
   3e104:	460d      	mov	r5, r1
	err_code = mqtt_transport_disconnect(client);
   3e106:	f7e5 ff63 	bl	23fd0 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   3e10a:	2100      	movs	r1, #0
		struct mqtt_evt evt = {
   3e10c:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   3e10e:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   3e112:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   3e116:	4668      	mov	r0, sp
   3e118:	f003 f98c 	bl	41434 <memset>
   3e11c:	2301      	movs	r3, #1
		event_notify(client, &evt);
   3e11e:	4669      	mov	r1, sp
   3e120:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   3e122:	f88d 3000 	strb.w	r3, [sp]
   3e126:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   3e128:	f7ff ffd6 	bl	3e0d8 <event_notify>
}
   3e12c:	b009      	add	sp, #36	; 0x24
   3e12e:	bd30      	pop	{r4, r5, pc}

0003e130 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   3e130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3e132:	4617      	mov	r7, r2
   3e134:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   3e136:	4605      	mov	r5, r0
{
   3e138:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   3e13a:	b320      	cbz	r0, 3e186 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   3e13c:	f7e5 ff66 	bl	2400c <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   3e140:	6a2c      	ldr	r4, [r5, #32]
   3e142:	b1b4      	cbz	r4, 3e172 <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   3e144:	42bc      	cmp	r4, r7
   3e146:	4622      	mov	r2, r4
   3e148:	4633      	mov	r3, r6
   3e14a:	bf28      	it	cs
   3e14c:	463a      	movcs	r2, r7
   3e14e:	4628      	mov	r0, r5
   3e150:	9901      	ldr	r1, [sp, #4]
   3e152:	f7e5 ff2f 	bl	23fb4 <mqtt_transport_read>
   3e156:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   3e158:	b916      	cbnz	r6, 3e160 <read_publish_payload+0x30>
   3e15a:	f110 0f0b 	cmn.w	r0, #11
   3e15e:	d008      	beq.n	3e172 <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   3e160:	2c00      	cmp	r4, #0
   3e162:	dc0c      	bgt.n	3e17e <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   3e164:	bf08      	it	eq
   3e166:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   3e16a:	4628      	mov	r0, r5
   3e16c:	4621      	mov	r1, r4
   3e16e:	f7ff ffc6 	bl	3e0fe <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   3e172:	4628      	mov	r0, r5
   3e174:	f7e5 ff36 	bl	23fe4 <mqtt_mutex_unlock>

	return ret;
}
   3e178:	4620      	mov	r0, r4
   3e17a:	b003      	add	sp, #12
   3e17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   3e17e:	6a2b      	ldr	r3, [r5, #32]
   3e180:	1b1b      	subs	r3, r3, r4
   3e182:	622b      	str	r3, [r5, #32]
   3e184:	e7f5      	b.n	3e172 <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   3e186:	f06f 0415 	mvn.w	r4, #21
   3e18a:	e7f5      	b.n	3e178 <read_publish_payload+0x48>

0003e18c <client_write>:
{
   3e18c:	b538      	push	{r3, r4, r5, lr}
   3e18e:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   3e190:	f7e5 fef6 	bl	23f80 <mqtt_transport_write>
	if (err_code < 0) {
   3e194:	1e04      	subs	r4, r0, #0
   3e196:	da05      	bge.n	3e1a4 <client_write+0x18>
		client_disconnect(client, err_code, true);
   3e198:	4621      	mov	r1, r4
   3e19a:	4628      	mov	r0, r5
   3e19c:	f7ff ffaf 	bl	3e0fe <client_disconnect.constprop.0>
}
   3e1a0:	4620      	mov	r0, r4
   3e1a2:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @retval Current wall clock or sys tick value in milliseconds.
 */
static inline uint32_t mqtt_sys_tick_in_ms_get(void)
{
	return k_uptime_get_32();
   3e1a4:	f7ff ff76 	bl	3e094 <k_uptime_get_32>
	return 0;
   3e1a8:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   3e1aa:	6168      	str	r0, [r5, #20]
	return 0;
   3e1ac:	e7f8      	b.n	3e1a0 <client_write+0x14>

0003e1ae <mqtt_client_init>:
{
   3e1ae:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   3e1b0:	4604      	mov	r4, r0
   3e1b2:	b190      	cbz	r0, 3e1da <mqtt_client_init+0x2c>
   3e1b4:	2288      	movs	r2, #136	; 0x88
   3e1b6:	2100      	movs	r1, #0
   3e1b8:	f003 f93c 	bl	41434 <memset>
	return z_impl_k_mutex_init(mutex);
   3e1bc:	4620      	mov	r0, r4
   3e1be:	f002 feef 	bl	40fa0 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   3e1c2:	2304      	movs	r3, #4
   3e1c4:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
	client->clean_session = MQTT_CLEAN_SESSION;
   3e1c8:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   3e1cc:	f36f 0341 	bfc	r3, #1, #1
   3e1d0:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
	client->keepalive = MQTT_KEEPALIVE;
   3e1d4:	2378      	movs	r3, #120	; 0x78
   3e1d6:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
}
   3e1da:	bd10      	pop	{r4, pc}

0003e1dc <mqtt_connect>:
{
   3e1dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e1de:	4605      	mov	r5, r0
   3e1e0:	2800      	cmp	r0, #0
   3e1e2:	d03a      	beq.n	3e25a <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   3e1e4:	6d03      	ldr	r3, [r0, #80]	; 0x50
   3e1e6:	b3c3      	cbz	r3, 3e25a <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   3e1e8:	f7e5 ff10 	bl	2400c <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   3e1ec:	6fab      	ldr	r3, [r5, #120]	; 0x78
   3e1ee:	b38b      	cbz	r3, 3e254 <mqtt_connect+0x78>
   3e1f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   3e1f2:	b37b      	cbz	r3, 3e254 <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   3e1f4:	4628      	mov	r0, r5
   3e1f6:	f7e5 feb9 	bl	23f6c <mqtt_transport_connect>
	if (err_code < 0) {
   3e1fa:	1e04      	subs	r4, r0, #0
   3e1fc:	db24      	blt.n	3e248 <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   3e1fe:	4669      	mov	r1, sp
   3e200:	4628      	mov	r0, r5
   3e202:	f7ff ff54 	bl	3e0ae <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e206:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   3e208:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e20a:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   3e20e:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e210:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   3e212:	f7e5 fe07 	bl	23e24 <connect_request_encode>
	if (err_code < 0) {
   3e216:	1e04      	subs	r4, r0, #0
   3e218:	db13      	blt.n	3e242 <mqtt_connect+0x66>
	err_code = mqtt_transport_write(client, packet.cur,
   3e21a:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e21e:	4628      	mov	r0, r5
   3e220:	1a52      	subs	r2, r2, r1
   3e222:	f7e5 fead 	bl	23f80 <mqtt_transport_write>
	if (err_code < 0) {
   3e226:	1e04      	subs	r4, r0, #0
   3e228:	db0b      	blt.n	3e242 <mqtt_connect+0x66>
   3e22a:	f7ff ff33 	bl	3e094 <k_uptime_get_32>
	client->unacked_ping = 0;
   3e22e:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   3e230:	6168      	str	r0, [r5, #20]
	client->unacked_ping = 0;
   3e232:	f885 4083 	strb.w	r4, [r5, #131]	; 0x83
	mqtt_mutex_unlock(client);
   3e236:	4628      	mov	r0, r5
   3e238:	f7e5 fed4 	bl	23fe4 <mqtt_mutex_unlock>
}
   3e23c:	4620      	mov	r0, r4
   3e23e:	b003      	add	sp, #12
   3e240:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   3e242:	4628      	mov	r0, r5
   3e244:	f7e5 fec4 	bl	23fd0 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   3e248:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3e24a:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   3e24e:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   3e252:	e7f0      	b.n	3e236 <mqtt_connect+0x5a>
		err_code = -ENOMEM;
   3e254:	f06f 040b 	mvn.w	r4, #11
   3e258:	e7f6      	b.n	3e248 <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   3e25a:	f06f 0415 	mvn.w	r4, #21
   3e25e:	e7ed      	b.n	3e23c <mqtt_connect+0x60>

0003e260 <mqtt_publish>:
{
   3e260:	b570      	push	{r4, r5, r6, lr}
   3e262:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e264:	4605      	mov	r5, r0
{
   3e266:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   3e268:	2800      	cmp	r0, #0
   3e26a:	d03a      	beq.n	3e2e2 <mqtt_publish+0x82>
	NULL_PARAM_CHECK(param);
   3e26c:	2900      	cmp	r1, #0
   3e26e:	d038      	beq.n	3e2e2 <mqtt_publish+0x82>
	mqtt_mutex_lock(client);
   3e270:	f7e5 fecc 	bl	2400c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e274:	4628      	mov	r0, r5
   3e276:	a901      	add	r1, sp, #4
   3e278:	f7ff ff19 	bl	3e0ae <tx_buf_init>
	err_code = verify_tx_state(client);
   3e27c:	69a8      	ldr	r0, [r5, #24]
   3e27e:	f7ff ff24 	bl	3e0ca <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e282:	1e04      	subs	r4, r0, #0
   3e284:	db22      	blt.n	3e2cc <mqtt_publish+0x6c>
	err_code = publish_encode(param, &packet);
   3e286:	4630      	mov	r0, r6
   3e288:	a901      	add	r1, sp, #4
   3e28a:	f7ff fcc8 	bl	3dc1e <publish_encode>
	if (err_code < 0) {
   3e28e:	1e04      	subs	r4, r0, #0
   3e290:	db1c      	blt.n	3e2cc <mqtt_publish+0x6c>
	io_vector[0].iov_base = packet.cur;
   3e292:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   3e294:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   3e296:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   3e298:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   3e29a:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   3e29c:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   3e29e:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   3e2a0:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   3e2a2:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   3e2a4:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   3e2a6:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   3e2aa:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   3e2ac:	f003 f8c2 	bl	41434 <memset>
	msg.msg_iov = io_vector;
   3e2b0:	ab03      	add	r3, sp, #12
   3e2b2:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   3e2b4:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   3e2b6:	4628      	mov	r0, r5
   3e2b8:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   3e2ba:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   3e2bc:	f7e5 fe6c 	bl	23f98 <mqtt_transport_write_msg>
	if (err_code < 0) {
   3e2c0:	1e04      	subs	r4, r0, #0
   3e2c2:	da09      	bge.n	3e2d8 <mqtt_publish+0x78>
		client_disconnect(client, err_code, true);
   3e2c4:	4621      	mov	r1, r4
   3e2c6:	4628      	mov	r0, r5
   3e2c8:	f7ff ff19 	bl	3e0fe <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3e2cc:	4628      	mov	r0, r5
   3e2ce:	f7e5 fe89 	bl	23fe4 <mqtt_mutex_unlock>
}
   3e2d2:	4620      	mov	r0, r4
   3e2d4:	b00e      	add	sp, #56	; 0x38
   3e2d6:	bd70      	pop	{r4, r5, r6, pc}
   3e2d8:	f7ff fedc 	bl	3e094 <k_uptime_get_32>
	return 0;
   3e2dc:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   3e2de:	6168      	str	r0, [r5, #20]
	return 0;
   3e2e0:	e7f4      	b.n	3e2cc <mqtt_publish+0x6c>
	NULL_PARAM_CHECK(client);
   3e2e2:	f06f 0415 	mvn.w	r4, #21
   3e2e6:	e7f4      	b.n	3e2d2 <mqtt_publish+0x72>

0003e2e8 <mqtt_publish_qos1_ack>:
{
   3e2e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3e2ea:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e2ec:	4605      	mov	r5, r0
   3e2ee:	b1f0      	cbz	r0, 3e32e <mqtt_publish_qos1_ack+0x46>
	NULL_PARAM_CHECK(param);
   3e2f0:	b1e9      	cbz	r1, 3e32e <mqtt_publish_qos1_ack+0x46>
	mqtt_mutex_lock(client);
   3e2f2:	f7e5 fe8b 	bl	2400c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e2f6:	4628      	mov	r0, r5
   3e2f8:	4669      	mov	r1, sp
   3e2fa:	f7ff fed8 	bl	3e0ae <tx_buf_init>
	err_code = verify_tx_state(client);
   3e2fe:	69a8      	ldr	r0, [r5, #24]
   3e300:	f7ff fee3 	bl	3e0ca <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e304:	1e04      	subs	r4, r0, #0
   3e306:	db0c      	blt.n	3e322 <mqtt_publish_qos1_ack+0x3a>
	err_code = publish_ack_encode(param, &packet);
   3e308:	4669      	mov	r1, sp
   3e30a:	4630      	mov	r0, r6
   3e30c:	f7ff fcc8 	bl	3dca0 <publish_ack_encode>
	if (err_code < 0) {
   3e310:	1e04      	subs	r4, r0, #0
   3e312:	db06      	blt.n	3e322 <mqtt_publish_qos1_ack+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e314:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e318:	4628      	mov	r0, r5
   3e31a:	1a52      	subs	r2, r2, r1
   3e31c:	f7ff ff36 	bl	3e18c <client_write>
   3e320:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3e322:	4628      	mov	r0, r5
   3e324:	f7e5 fe5e 	bl	23fe4 <mqtt_mutex_unlock>
}
   3e328:	4620      	mov	r0, r4
   3e32a:	b002      	add	sp, #8
   3e32c:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   3e32e:	f06f 0415 	mvn.w	r4, #21
   3e332:	e7f9      	b.n	3e328 <mqtt_publish_qos1_ack+0x40>

0003e334 <mqtt_disconnect>:
{
   3e334:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e336:	4605      	mov	r5, r0
   3e338:	b308      	cbz	r0, 3e37e <mqtt_disconnect+0x4a>
	mqtt_mutex_lock(client);
   3e33a:	f7e5 fe67 	bl	2400c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e33e:	4628      	mov	r0, r5
   3e340:	4669      	mov	r1, sp
   3e342:	f7ff feb4 	bl	3e0ae <tx_buf_init>
	err_code = verify_tx_state(client);
   3e346:	69a8      	ldr	r0, [r5, #24]
   3e348:	f7ff febf 	bl	3e0ca <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e34c:	1e04      	subs	r4, r0, #0
   3e34e:	db10      	blt.n	3e372 <mqtt_disconnect+0x3e>
	err_code = disconnect_encode(&packet);
   3e350:	4668      	mov	r0, sp
   3e352:	f7e5 fde7 	bl	23f24 <disconnect_encode>
	if (err_code < 0) {
   3e356:	1e04      	subs	r4, r0, #0
   3e358:	db0b      	blt.n	3e372 <mqtt_disconnect+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e35a:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e35e:	4628      	mov	r0, r5
   3e360:	1a52      	subs	r2, r2, r1
   3e362:	f7ff ff13 	bl	3e18c <client_write>
	if (err_code < 0) {
   3e366:	1e04      	subs	r4, r0, #0
   3e368:	db03      	blt.n	3e372 <mqtt_disconnect+0x3e>
	client_disconnect(client, 0, true);
   3e36a:	2100      	movs	r1, #0
   3e36c:	4628      	mov	r0, r5
   3e36e:	f7ff fec6 	bl	3e0fe <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3e372:	4628      	mov	r0, r5
   3e374:	f7e5 fe36 	bl	23fe4 <mqtt_mutex_unlock>
}
   3e378:	4620      	mov	r0, r4
   3e37a:	b003      	add	sp, #12
   3e37c:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   3e37e:	f06f 0415 	mvn.w	r4, #21
   3e382:	e7f9      	b.n	3e378 <mqtt_disconnect+0x44>

0003e384 <mqtt_subscribe>:
{
   3e384:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3e386:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e388:	4605      	mov	r5, r0
   3e38a:	b1f0      	cbz	r0, 3e3ca <mqtt_subscribe+0x46>
	NULL_PARAM_CHECK(param);
   3e38c:	b1e9      	cbz	r1, 3e3ca <mqtt_subscribe+0x46>
	mqtt_mutex_lock(client);
   3e38e:	f7e5 fe3d 	bl	2400c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e392:	4628      	mov	r0, r5
   3e394:	4669      	mov	r1, sp
   3e396:	f7ff fe8a 	bl	3e0ae <tx_buf_init>
	err_code = verify_tx_state(client);
   3e39a:	69a8      	ldr	r0, [r5, #24]
   3e39c:	f7ff fe95 	bl	3e0ca <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e3a0:	1e04      	subs	r4, r0, #0
   3e3a2:	db0c      	blt.n	3e3be <mqtt_subscribe+0x3a>
	err_code = subscribe_encode(param, &packet);
   3e3a4:	4669      	mov	r1, sp
   3e3a6:	4630      	mov	r0, r6
   3e3a8:	f7ff fc7f 	bl	3dcaa <subscribe_encode>
	if (err_code < 0) {
   3e3ac:	1e04      	subs	r4, r0, #0
   3e3ae:	db06      	blt.n	3e3be <mqtt_subscribe+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e3b0:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e3b4:	4628      	mov	r0, r5
   3e3b6:	1a52      	subs	r2, r2, r1
   3e3b8:	f7ff fee8 	bl	3e18c <client_write>
   3e3bc:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3e3be:	4628      	mov	r0, r5
   3e3c0:	f7e5 fe10 	bl	23fe4 <mqtt_mutex_unlock>
}
   3e3c4:	4620      	mov	r0, r4
   3e3c6:	b002      	add	sp, #8
   3e3c8:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   3e3ca:	f06f 0415 	mvn.w	r4, #21
   3e3ce:	e7f9      	b.n	3e3c4 <mqtt_subscribe+0x40>

0003e3d0 <mqtt_unsubscribe>:
{
   3e3d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3e3d2:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e3d4:	4605      	mov	r5, r0
   3e3d6:	b1f0      	cbz	r0, 3e416 <mqtt_unsubscribe+0x46>
	NULL_PARAM_CHECK(param);
   3e3d8:	b1e9      	cbz	r1, 3e416 <mqtt_unsubscribe+0x46>
	mqtt_mutex_lock(client);
   3e3da:	f7e5 fe17 	bl	2400c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e3de:	4628      	mov	r0, r5
   3e3e0:	4669      	mov	r1, sp
   3e3e2:	f7ff fe64 	bl	3e0ae <tx_buf_init>
	err_code = verify_tx_state(client);
   3e3e6:	69a8      	ldr	r0, [r5, #24]
   3e3e8:	f7ff fe6f 	bl	3e0ca <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e3ec:	1e04      	subs	r4, r0, #0
   3e3ee:	db0c      	blt.n	3e40a <mqtt_unsubscribe+0x3a>
	err_code = unsubscribe_encode(param, &packet);
   3e3f0:	4669      	mov	r1, sp
   3e3f2:	4630      	mov	r0, r6
   3e3f4:	f7ff fc90 	bl	3dd18 <unsubscribe_encode>
	if (err_code < 0) {
   3e3f8:	1e04      	subs	r4, r0, #0
   3e3fa:	db06      	blt.n	3e40a <mqtt_unsubscribe+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e3fc:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e400:	4628      	mov	r0, r5
   3e402:	1a52      	subs	r2, r2, r1
   3e404:	f7ff fec2 	bl	3e18c <client_write>
   3e408:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3e40a:	4628      	mov	r0, r5
   3e40c:	f7e5 fdea 	bl	23fe4 <mqtt_mutex_unlock>
}
   3e410:	4620      	mov	r0, r4
   3e412:	b002      	add	sp, #8
   3e414:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   3e416:	f06f 0415 	mvn.w	r4, #21
   3e41a:	e7f9      	b.n	3e410 <mqtt_unsubscribe+0x40>

0003e41c <mqtt_ping>:
{
   3e41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e41e:	4605      	mov	r5, r0
   3e420:	b318      	cbz	r0, 3e46a <mqtt_ping+0x4e>
	mqtt_mutex_lock(client);
   3e422:	f7e5 fdf3 	bl	2400c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e426:	4628      	mov	r0, r5
   3e428:	4669      	mov	r1, sp
   3e42a:	f7ff fe40 	bl	3e0ae <tx_buf_init>
	err_code = verify_tx_state(client);
   3e42e:	69a8      	ldr	r0, [r5, #24]
   3e430:	f7ff fe4b 	bl	3e0ca <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e434:	1e04      	subs	r4, r0, #0
   3e436:	db12      	blt.n	3e45e <mqtt_ping+0x42>
	err_code = ping_request_encode(&packet);
   3e438:	4668      	mov	r0, sp
   3e43a:	f7e5 fd85 	bl	23f48 <ping_request_encode>
	if (err_code < 0) {
   3e43e:	1e04      	subs	r4, r0, #0
   3e440:	db0d      	blt.n	3e45e <mqtt_ping+0x42>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e442:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e446:	4628      	mov	r0, r5
   3e448:	1a52      	subs	r2, r2, r1
   3e44a:	f7ff fe9f 	bl	3e18c <client_write>
   3e44e:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   3e450:	f995 3083 	ldrsb.w	r3, [r5, #131]	; 0x83
   3e454:	2b7f      	cmp	r3, #127	; 0x7f
		client->unacked_ping++;
   3e456:	bf1c      	itt	ne
   3e458:	3301      	addne	r3, #1
   3e45a:	f885 3083 	strbne.w	r3, [r5, #131]	; 0x83
	mqtt_mutex_unlock(client);
   3e45e:	4628      	mov	r0, r5
   3e460:	f7e5 fdc0 	bl	23fe4 <mqtt_mutex_unlock>
}
   3e464:	4620      	mov	r0, r4
   3e466:	b003      	add	sp, #12
   3e468:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   3e46a:	f06f 0415 	mvn.w	r4, #21
   3e46e:	e7f9      	b.n	3e464 <mqtt_ping+0x48>

0003e470 <mqtt_live>:
{
   3e470:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   3e472:	4606      	mov	r6, r0
   3e474:	b300      	cbz	r0, 3e4b8 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   3e476:	f7e5 fdc9 	bl	2400c <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   3e47a:	6974      	ldr	r4, [r6, #20]
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   3e47c:	f7ff fe0a 	bl	3e094 <k_uptime_get_32>
   3e480:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   3e482:	f8b6 4080 	ldrh.w	r4, [r6, #128]	; 0x80

	if (diff < 0) {
		return 0;
   3e486:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3e48a:	b19c      	cbz	r4, 3e4b4 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   3e48c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3e490:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   3e492:	4284      	cmp	r4, r0
   3e494:	d80d      	bhi.n	3e4b2 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   3e496:	4630      	mov	r0, r6
   3e498:	f7ff ffc0 	bl	3e41c <mqtt_ping>
		ping_sent = true;
   3e49c:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   3e49e:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   3e4a0:	4630      	mov	r0, r6
   3e4a2:	f7e5 fd9f 	bl	23fe4 <mqtt_mutex_unlock>
		return -EAGAIN;
   3e4a6:	2c00      	cmp	r4, #0
   3e4a8:	bf08      	it	eq
   3e4aa:	f06f 050a 	mvneq.w	r5, #10
}
   3e4ae:	4628      	mov	r0, r5
   3e4b0:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   3e4b2:	2400      	movs	r4, #0
	int err_code = 0;
   3e4b4:	4625      	mov	r5, r4
   3e4b6:	e7f3      	b.n	3e4a0 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   3e4b8:	f06f 0515 	mvn.w	r5, #21
   3e4bc:	e7f7      	b.n	3e4ae <mqtt_live+0x3e>

0003e4be <mqtt_keepalive_time_left>:
{
   3e4be:	b538      	push	{r3, r4, r5, lr}
   3e4c0:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   3e4c2:	6945      	ldr	r5, [r0, #20]
	int32_t diff = k_uptime_get_32() - last_activity;
   3e4c4:	f7ff fde6 	bl	3e094 <k_uptime_get_32>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   3e4c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3e4cc:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
   3e4d0:	1b42      	subs	r2, r0, r5
   3e4d2:	434b      	muls	r3, r1
		return 0;
   3e4d4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   3e4d8:	b119      	cbz	r1, 3e4e2 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   3e4da:	4293      	cmp	r3, r2
   3e4dc:	d904      	bls.n	3e4e8 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   3e4de:	1a98      	subs	r0, r3, r2
}
   3e4e0:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   3e4e2:	f04f 30ff 	mov.w	r0, #4294967295
   3e4e6:	e7fb      	b.n	3e4e0 <mqtt_keepalive_time_left+0x22>
		return 0;
   3e4e8:	2000      	movs	r0, #0
   3e4ea:	e7f9      	b.n	3e4e0 <mqtt_keepalive_time_left+0x22>

0003e4ec <mqtt_input>:
{
   3e4ec:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e4ee:	4605      	mov	r5, r0
   3e4f0:	b1d0      	cbz	r0, 3e528 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   3e4f2:	f7e5 fd8b 	bl	2400c <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   3e4f6:	69ab      	ldr	r3, [r5, #24]
   3e4f8:	079b      	lsls	r3, r3, #30
   3e4fa:	d50f      	bpl.n	3e51c <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   3e4fc:	6a2b      	ldr	r3, [r5, #32]
   3e4fe:	b983      	cbnz	r3, 3e522 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   3e500:	4628      	mov	r0, r5
   3e502:	f7ff fc59 	bl	3ddb8 <mqtt_handle_rx>
	if (err_code < 0) {
   3e506:	1e04      	subs	r4, r0, #0
   3e508:	da03      	bge.n	3e512 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   3e50a:	4621      	mov	r1, r4
   3e50c:	4628      	mov	r0, r5
   3e50e:	f7ff fdf6 	bl	3e0fe <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3e512:	4628      	mov	r0, r5
   3e514:	f7e5 fd66 	bl	23fe4 <mqtt_mutex_unlock>
}
   3e518:	4620      	mov	r0, r4
   3e51a:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -ENOTCONN;
   3e51c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3e520:	e7f7      	b.n	3e512 <mqtt_input+0x26>
		return -EBUSY;
   3e522:	f06f 040f 	mvn.w	r4, #15
   3e526:	e7f4      	b.n	3e512 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   3e528:	f06f 0415 	mvn.w	r4, #21
   3e52c:	e7f4      	b.n	3e518 <mqtt_input+0x2c>

0003e52e <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   3e52e:	2301      	movs	r3, #1
   3e530:	f7ff bdfe 	b.w	3e130 <read_publish_payload>

0003e534 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   3e534:	b570      	push	{r4, r5, r6, lr}
   3e536:	4606      	mov	r6, r0
   3e538:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   3e53a:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   3e53c:	42ac      	cmp	r4, r5
   3e53e:	d301      	bcc.n	3e544 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   3e540:	2000      	movs	r0, #0
}
   3e542:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   3e544:	4621      	mov	r1, r4
   3e546:	4630      	mov	r0, r6
   3e548:	1b2a      	subs	r2, r5, r4
   3e54a:	f7ff fff0 	bl	3e52e <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   3e54e:	2800      	cmp	r0, #0
   3e550:	dbf7      	blt.n	3e542 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   3e552:	d001      	beq.n	3e558 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   3e554:	4404      	add	r4, r0
   3e556:	e7f1      	b.n	3e53c <mqtt_readall_publish_payload+0x8>
			return -EIO;
   3e558:	f06f 0004 	mvn.w	r0, #4
   3e55c:	e7f1      	b.n	3e542 <mqtt_readall_publish_payload+0xe>

0003e55e <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3e55e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   3e562:	2400      	movs	r4, #0
{
   3e564:	4606      	mov	r6, r0
   3e566:	460f      	mov	r7, r1
   3e568:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3e56a:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3e56c:	42ac      	cmp	r4, r5
   3e56e:	d301      	bcc.n	3e574 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3e570:	2000      	movs	r0, #0
   3e572:	e00d      	b.n	3e590 <mqtt_client_tls_write+0x32>
		ret = zsock_send(client->transport.tls.sock, data + offset,
   3e574:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3e576:	2300      	movs	r3, #0
   3e578:	e9cd 8800 	strd	r8, r8, [sp]
   3e57c:	1b2a      	subs	r2, r5, r4
   3e57e:	1939      	adds	r1, r7, r4
   3e580:	f7fe fe52 	bl	3d228 <z_impl_zsock_sendto>
		if (ret < 0) {
   3e584:	1e03      	subs	r3, r0, #0
   3e586:	da06      	bge.n	3e596 <mqtt_client_tls_write+0x38>
			return -errno;
   3e588:	f7ff f8f9 	bl	3d77e <__errno>
   3e58c:	6800      	ldr	r0, [r0, #0]
   3e58e:	4240      	negs	r0, r0
}
   3e590:	b002      	add	sp, #8
   3e592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3e596:	441c      	add	r4, r3
   3e598:	e7e8      	b.n	3e56c <mqtt_client_tls_write+0xe>

0003e59a <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   3e59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   3e59e:	2500      	movs	r5, #0
{
   3e5a0:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   3e5a2:	462b      	mov	r3, r5
{
   3e5a4:	460c      	mov	r4, r1
   3e5a6:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   3e5a8:	428b      	cmp	r3, r1
   3e5aa:	d110      	bne.n	3e5ce <mqtt_client_tls_write_msg+0x34>
	size_t offset = 0;
   3e5ac:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   3e5ae:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   3e5b0:	42ae      	cmp	r6, r5
   3e5b2:	d216      	bcs.n	3e5e2 <mqtt_client_tls_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tls.sock, message, 0);
   3e5b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   3e5b6:	2200      	movs	r2, #0
   3e5b8:	4621      	mov	r1, r4
   3e5ba:	f7fe fe65 	bl	3d288 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   3e5be:	1e03      	subs	r3, r0, #0
   3e5c0:	da0c      	bge.n	3e5dc <mqtt_client_tls_write_msg+0x42>
			return -errno;
   3e5c2:	f7ff f8dc 	bl	3d77e <__errno>
   3e5c6:	6800      	ldr	r0, [r0, #0]
   3e5c8:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   3e5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   3e5ce:	68a2      	ldr	r2, [r4, #8]
   3e5d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   3e5d4:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   3e5d6:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   3e5d8:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   3e5da:	e7e5      	b.n	3e5a8 <mqtt_client_tls_write_msg+0xe>
		offset += ret;
   3e5dc:	441e      	add	r6, r3
		if (offset >= total_len) {
   3e5de:	42b5      	cmp	r5, r6
   3e5e0:	d801      	bhi.n	3e5e6 <mqtt_client_tls_write_msg+0x4c>
	return 0;
   3e5e2:	2000      	movs	r0, #0
   3e5e4:	e7f1      	b.n	3e5ca <mqtt_client_tls_write_msg+0x30>
		for (i = 0; i < message->msg_iovlen; i++) {
   3e5e6:	2000      	movs	r0, #0
   3e5e8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   3e5ec:	4560      	cmp	r0, ip
   3e5ee:	d0df      	beq.n	3e5b0 <mqtt_client_tls_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   3e5f0:	68a2      	ldr	r2, [r4, #8]
   3e5f2:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   3e5f6:	6851      	ldr	r1, [r2, #4]
   3e5f8:	4299      	cmp	r1, r3
   3e5fa:	d905      	bls.n	3e608 <mqtt_client_tls_write_msg+0x6e>
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3e5fc:	6810      	ldr	r0, [r2, #0]
				message->msg_iov[i].iov_len -= ret;
   3e5fe:	1ac9      	subs	r1, r1, r3
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3e600:	4418      	add	r0, r3
				message->msg_iov[i].iov_len -= ret;
   3e602:	6051      	str	r1, [r2, #4]
				message->msg_iov[i].iov_base =
   3e604:	6010      	str	r0, [r2, #0]
				break;
   3e606:	e7d3      	b.n	3e5b0 <mqtt_client_tls_write_msg+0x16>
			ret -= message->msg_iov[i].iov_len;
   3e608:	1a5b      	subs	r3, r3, r1
			message->msg_iov[i].iov_len = 0;
   3e60a:	f8c2 8004 	str.w	r8, [r2, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   3e60e:	3001      	adds	r0, #1
   3e610:	e7ec      	b.n	3e5ec <mqtt_client_tls_write_msg+0x52>

0003e612 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   3e612:	b513      	push	{r0, r1, r4, lr}
   3e614:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= ZSOCK_MSG_DONTWAIT;
   3e616:	42a3      	cmp	r3, r4
   3e618:	bf14      	ite	ne
   3e61a:	4623      	movne	r3, r4
   3e61c:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tls.sock, data, buflen, flags);
   3e61e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3e620:	e9cd 4400 	strd	r4, r4, [sp]
   3e624:	f7fe fe57 	bl	3d2d6 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3e628:	2800      	cmp	r0, #0
   3e62a:	da03      	bge.n	3e634 <mqtt_client_tls_read+0x22>
		return -errno;
   3e62c:	f7ff f8a7 	bl	3d77e <__errno>
   3e630:	6800      	ldr	r0, [r0, #0]
   3e632:	4240      	negs	r0, r0
	}

	return ret;
}
   3e634:	b002      	add	sp, #8
   3e636:	bd10      	pop	{r4, pc}

0003e638 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   3e638:	b508      	push	{r3, lr}
	int ret;

	NET_INFO("Closing socket %d", client->transport.tls.sock);
	ret = zsock_close(client->transport.tls.sock);
   3e63a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3e63c:	f7fe fda9 	bl	3d192 <z_impl_zsock_close>
	if (ret < 0) {
   3e640:	2800      	cmp	r0, #0
   3e642:	da04      	bge.n	3e64e <mqtt_client_tls_disconnect+0x16>
		return -errno;
   3e644:	f7ff f89b 	bl	3d77e <__errno>
   3e648:	6800      	ldr	r0, [r0, #0]
   3e64a:	4240      	negs	r0, r0
	}

	return 0;
}
   3e64c:	bd08      	pop	{r3, pc}
	return 0;
   3e64e:	2000      	movs	r0, #0
   3e650:	e7fc      	b.n	3e64c <mqtt_client_tls_disconnect+0x14>

0003e652 <set_on_state>:
	__asm__ volatile(
   3e652:	f04f 0320 	mov.w	r3, #32
   3e656:	f3ef 8211 	mrs	r2, BASEPRI
   3e65a:	f383 8812 	msr	BASEPRI_MAX, r3
   3e65e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   3e662:	6803      	ldr	r3, [r0, #0]
   3e664:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3e668:	f043 0302 	orr.w	r3, r3, #2
   3e66c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   3e66e:	f382 8811 	msr	BASEPRI, r2
   3e672:	f3bf 8f6f 	isb	sy
}
   3e676:	4770      	bx	lr

0003e678 <async_start>:
{
   3e678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e67a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   3e67c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   3e67e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   3e680:	f04f 0520 	mov.w	r5, #32
   3e684:	f3ef 8c11 	mrs	ip, BASEPRI
   3e688:	f385 8812 	msr	BASEPRI_MAX, r5
   3e68c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3e690:	260c      	movs	r6, #12
   3e692:	fb06 4601 	mla	r6, r6, r1, r4
   3e696:	6cb5      	ldr	r5, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3e698:	f005 0e07 	and.w	lr, r5, #7
   3e69c:	f1be 0f01 	cmp.w	lr, #1
   3e6a0:	d110      	bne.n	3e6c4 <async_start+0x4c>
	int err = 0;
   3e6a2:	2500      	movs	r5, #0
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   3e6a4:	64b7      	str	r7, [r6, #72]	; 0x48
	__asm__ volatile(
   3e6a6:	f38c 8811 	msr	BASEPRI, ip
   3e6aa:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   3e6ae:	b93d      	cbnz	r5, 3e6c0 <async_start+0x48>
	subdata->cb = cb;
   3e6b0:	260c      	movs	r6, #12
   3e6b2:	4371      	muls	r1, r6
   3e6b4:	440c      	add	r4, r1
	subdata->user_data = user_data;
   3e6b6:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   3e6ba:	6843      	ldr	r3, [r0, #4]
   3e6bc:	585b      	ldr	r3, [r3, r1]
   3e6be:	4798      	blx	r3
}
   3e6c0:	4628      	mov	r0, r5
   3e6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   3e6c4:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
		err = -EALREADY;
   3e6c8:	42af      	cmp	r7, r5
   3e6ca:	bf14      	ite	ne
   3e6cc:	f04f 35ff 	movne.w	r5, #4294967295
   3e6d0:	f06f 0577 	mvneq.w	r5, #119	; 0x77
   3e6d4:	e7e7      	b.n	3e6a6 <async_start+0x2e>

0003e6d6 <api_start>:
{
   3e6d6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   3e6d8:	2480      	movs	r4, #128	; 0x80
   3e6da:	9400      	str	r4, [sp, #0]
   3e6dc:	f7ff ffcc 	bl	3e678 <async_start>
}
   3e6e0:	b002      	add	sp, #8
   3e6e2:	bd10      	pop	{r4, pc}

0003e6e4 <onoff_started_callback>:
	return &data->mgr[type];
   3e6e4:	6900      	ldr	r0, [r0, #16]
   3e6e6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   3e6e8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3e6ec:	2100      	movs	r1, #0
   3e6ee:	4710      	bx	r2

0003e6f0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   3e6f0:	2000      	movs	r0, #0
   3e6f2:	f7f3 be25 	b.w	32340 <nrfx_clock_start>

0003e6f6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3e6f6:	2000      	movs	r0, #0
   3e6f8:	f7f3 be84 	b.w	32404 <nrfx_clock_stop>

0003e6fc <api_stop>:
	return stop(dev, subsys, CTX_API);
   3e6fc:	2280      	movs	r2, #128	; 0x80
   3e6fe:	f7e5 bd5d 	b.w	241bc <stop>

0003e702 <blocking_start_callback>:
{
   3e702:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   3e704:	f7f8 bb38 	b.w	36d78 <z_impl_k_sem_give>

0003e708 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e708:	6843      	ldr	r3, [r0, #4]
}
   3e70a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e70c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3e70e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   3e710:	600b      	str	r3, [r1, #0]
}
   3e712:	4770      	bx	lr

0003e714 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e714:	6843      	ldr	r3, [r0, #4]
   3e716:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   3e718:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   3e71a:	4042      	eors	r2, r0
   3e71c:	400a      	ands	r2, r1
   3e71e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   3e720:	605a      	str	r2, [r3, #4]
}
   3e722:	2000      	movs	r0, #0
   3e724:	4770      	bx	lr

0003e726 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e726:	6843      	ldr	r3, [r0, #4]
}
   3e728:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e72a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   3e72c:	6099      	str	r1, [r3, #8]
}
   3e72e:	4770      	bx	lr

0003e730 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e730:	6843      	ldr	r3, [r0, #4]
}
   3e732:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e734:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   3e736:	60d9      	str	r1, [r3, #12]
}
   3e738:	4770      	bx	lr

0003e73a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e73a:	6843      	ldr	r3, [r0, #4]
}
   3e73c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e73e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3e740:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   3e742:	4059      	eors	r1, r3
    p_reg->OUT = value;
   3e744:	6051      	str	r1, [r2, #4]
}
   3e746:	4770      	bx	lr

0003e748 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   3e748:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3e74a:	4604      	mov	r4, r0
   3e74c:	2200      	movs	r2, #0
   3e74e:	2101      	movs	r1, #1
   3e750:	200a      	movs	r0, #10
   3e752:	f7e4 fa31 	bl	22bb8 <z_arm_irq_priority_set>
   3e756:	6863      	ldr	r3, [r4, #4]
	ret = pinctrl_lookup_state(config, id, &state);
   3e758:	2100      	movs	r1, #0
   3e75a:	68dd      	ldr	r5, [r3, #12]
   3e75c:	aa01      	add	r2, sp, #4
   3e75e:	4628      	mov	r0, r5
   3e760:	f000 fa05 	bl	3eb6e <pinctrl_lookup_state>
	if (ret < 0) {
   3e764:	2800      	cmp	r0, #0
   3e766:	db0d      	blt.n	3e784 <twim_2_init+0x3c>
	return pinctrl_apply_state_direct(config, state);
   3e768:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   3e76a:	682a      	ldr	r2, [r5, #0]
   3e76c:	7919      	ldrb	r1, [r3, #4]
   3e76e:	6818      	ldr	r0, [r3, #0]
   3e770:	f000 fa53 	bl	3ec1a <pinctrl_configure_pins>
   3e774:	2800      	cmp	r0, #0
   3e776:	db05      	blt.n	3e784 <twim_2_init+0x3c>
   3e778:	4620      	mov	r0, r4
   3e77a:	b003      	add	sp, #12
   3e77c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3e780:	f7e6 b8de 	b.w	24940 <init_twim>
   3e784:	b003      	add	sp, #12
   3e786:	bd30      	pop	{r4, r5, pc}

0003e788 <is_regular_addr_valid>:
{
   3e788:	b538      	push	{r3, r4, r5, lr}
   3e78a:	4605      	mov	r5, r0
   3e78c:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   3e78e:	f001 fb89 	bl	3fea4 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   3e792:	2d00      	cmp	r5, #0
   3e794:	db07      	blt.n	3e7a6 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   3e796:	42a8      	cmp	r0, r5
   3e798:	d905      	bls.n	3e7a6 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   3e79a:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   3e79c:	4284      	cmp	r4, r0
   3e79e:	bf8c      	ite	hi
   3e7a0:	2000      	movhi	r0, #0
   3e7a2:	2001      	movls	r0, #1
}
   3e7a4:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   3e7a6:	2000      	movs	r0, #0
   3e7a8:	e7fc      	b.n	3e7a4 <is_regular_addr_valid+0x1c>

0003e7aa <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   3e7aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3e7ae:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   3e7b0:	f04f 0800 	mov.w	r8, #0
	const struct flash_driver_api *api = dev->api;
   3e7b4:	6883      	ldr	r3, [r0, #8]
{
   3e7b6:	460d      	mov	r5, r1
   3e7b8:	4616      	mov	r6, r2
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   3e7ba:	4669      	mov	r1, sp
   3e7bc:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   3e7be:	f8c4 8000 	str.w	r8, [r4]
	info->index = 0U;
   3e7c2:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   3e7c6:	aa01      	add	r2, sp, #4
   3e7c8:	4798      	blx	r3

	while (layout_size--) {
   3e7ca:	e9dd 7c00 	ldrd	r7, ip, [sp]
   3e7ce:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   3e7d0:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   3e7d4:	4560      	cmp	r0, ip
   3e7d6:	d104      	bne.n	3e7e2 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   3e7d8:	f06f 0015 	mvn.w	r0, #21
}
   3e7dc:	b003      	add	sp, #12
   3e7de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   3e7e2:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   3e7e6:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   3e7e8:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   3e7ea:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   3e7ee:	b97d      	cbnz	r5, 3e810 <flash_get_page_info+0x66>
			index_jmp = index - info->index;
   3e7f0:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   3e7f2:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
		if (index_jmp < layout->pages_count) {
   3e7f6:	3001      	adds	r0, #1
		index_jmp = MIN(index_jmp, layout->pages_count);
   3e7f8:	4543      	cmp	r3, r8
   3e7fa:	bf28      	it	cs
   3e7fc:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   3e7fe:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   3e802:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   3e804:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   3e806:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   3e808:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   3e80a:	d9e3      	bls.n	3e7d4 <flash_get_page_info+0x2a>
			return 0;
   3e80c:	2000      	movs	r0, #0
   3e80e:	e7e5      	b.n	3e7dc <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   3e810:	1aab      	subs	r3, r5, r2
   3e812:	fbb3 f3f9 	udiv	r3, r3, r9
   3e816:	e7ec      	b.n	3e7f2 <flash_get_page_info+0x48>

0003e818 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   3e818:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   3e81a:	2200      	movs	r2, #0
   3e81c:	f7ff bfc5 	b.w	3e7aa <flash_get_page_info>

0003e820 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   3e820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   3e824:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   3e826:	6883      	ldr	r3, [r0, #8]
{
   3e828:	b086      	sub	sp, #24
   3e82a:	4688      	mov	r8, r1
   3e82c:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   3e82e:	691b      	ldr	r3, [r3, #16]
   3e830:	aa02      	add	r2, sp, #8
   3e832:	a901      	add	r1, sp, #4
   3e834:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   3e836:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   3e838:	4625      	mov	r5, r4
   3e83a:	9b02      	ldr	r3, [sp, #8]
   3e83c:	42ab      	cmp	r3, r5
   3e83e:	d802      	bhi.n	3e846 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   3e840:	b006      	add	sp, #24
   3e842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   3e846:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   3e848:	9f01      	ldr	r7, [sp, #4]
   3e84a:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   3e84e:	687b      	ldr	r3, [r7, #4]
   3e850:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3e852:	683a      	ldr	r2, [r7, #0]
   3e854:	eb0a 0306 	add.w	r3, sl, r6
   3e858:	42b2      	cmp	r2, r6
   3e85a:	d802      	bhi.n	3e862 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   3e85c:	469a      	mov	sl, r3
   3e85e:	3501      	adds	r5, #1
   3e860:	e7eb      	b.n	3e83a <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   3e862:	4649      	mov	r1, r9
   3e864:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   3e866:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   3e868:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   3e86a:	47c0      	blx	r8
   3e86c:	2800      	cmp	r0, #0
   3e86e:	d0e7      	beq.n	3e840 <flash_page_foreach+0x20>
			off += page_info.size;
   3e870:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3e872:	3601      	adds	r6, #1
			off += page_info.size;
   3e874:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   3e876:	e7ec      	b.n	3e852 <flash_page_foreach+0x32>

0003e878 <uarte_nrfx_config_get>:
{
   3e878:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   3e87a:	6902      	ldr	r2, [r0, #16]
   3e87c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   3e880:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3e884:	2000      	movs	r0, #0
   3e886:	4770      	bx	lr

0003e888 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   3e888:	6843      	ldr	r3, [r0, #4]
   3e88a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3e88c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3e890:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3e894:	4770      	bx	lr

0003e896 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   3e896:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   3e898:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   3e89a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e89c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3e8a0:	b148      	cbz	r0, 3e8b6 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e8a2:	2000      	movs	r0, #0
	*c = data->rx_data;
   3e8a4:	7d52      	ldrb	r2, [r2, #21]
   3e8a6:	700a      	strb	r2, [r1, #0]
   3e8a8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3e8ac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e8b0:	2201      	movs	r2, #1
   3e8b2:	601a      	str	r2, [r3, #0]
	return 0;
   3e8b4:	4770      	bx	lr
		return -1;
   3e8b6:	f04f 30ff 	mov.w	r0, #4294967295
}
   3e8ba:	4770      	bx	lr

0003e8bc <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3e8bc:	2a00      	cmp	r2, #0
   3e8be:	dd0f      	ble.n	3e8e0 <uarte_nrfx_fifo_read+0x24>
	return config->uarte_regs;
   3e8c0:	6843      	ldr	r3, [r0, #4]
   3e8c2:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e8c4:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3e8c8:	b153      	cbz	r3, 3e8e0 <uarte_nrfx_fifo_read+0x24>
	const struct uarte_nrfx_data *data = dev->data;
   3e8ca:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e8cc:	2000      	movs	r0, #0
   3e8ce:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   3e8d2:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e8d6:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   3e8d8:	7d5b      	ldrb	r3, [r3, #21]
   3e8da:	700b      	strb	r3, [r1, #0]
   3e8dc:	6010      	str	r0, [r2, #0]
}
   3e8de:	4770      	bx	lr
	int num_rx = 0;
   3e8e0:	2000      	movs	r0, #0
   3e8e2:	4770      	bx	lr

0003e8e4 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   3e8e4:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   3e8e6:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   3e8e8:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   3e8ea:	f04f 0020 	mov.w	r0, #32
   3e8ee:	f3ef 8311 	mrs	r3, BASEPRI
   3e8f2:	f380 8812 	msr	BASEPRI_MAX, r0
   3e8f6:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   3e8fa:	2000      	movs	r0, #0
   3e8fc:	68c9      	ldr	r1, [r1, #12]
   3e8fe:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   3e900:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   3e904:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   3e908:	f383 8811 	msr	BASEPRI, r3
   3e90c:	f3bf 8f6f 	isb	sy
}
   3e910:	4770      	bx	lr

0003e912 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   3e912:	2201      	movs	r2, #1
   3e914:	6903      	ldr	r3, [r0, #16]
   3e916:	68db      	ldr	r3, [r3, #12]
   3e918:	739a      	strb	r2, [r3, #14]
}
   3e91a:	4770      	bx	lr

0003e91c <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   3e91c:	6903      	ldr	r3, [r0, #16]
   3e91e:	68db      	ldr	r3, [r3, #12]
   3e920:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3e922:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   3e926:	b962      	cbnz	r2, 3e942 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   3e928:	6842      	ldr	r2, [r0, #4]
   3e92a:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e92c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   3e930:	b140      	cbz	r0, 3e944 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   3e932:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   3e936:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   3e93a:	d003      	beq.n	3e944 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3e93c:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   3e93e:	6119      	str	r1, [r3, #16]
   3e940:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3e942:	2000      	movs	r0, #0
}
   3e944:	4770      	bx	lr

0003e946 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   3e946:	6843      	ldr	r3, [r0, #4]
   3e948:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e94a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   3e94e:	3800      	subs	r0, #0
   3e950:	bf18      	it	ne
   3e952:	2001      	movne	r0, #1
   3e954:	4770      	bx	lr

0003e956 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   3e956:	2210      	movs	r2, #16
	return config->uarte_regs;
   3e958:	6843      	ldr	r3, [r0, #4]
   3e95a:	681b      	ldr	r3, [r3, #0]
   3e95c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3e960:	4770      	bx	lr

0003e962 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   3e962:	2210      	movs	r2, #16
	return config->uarte_regs;
   3e964:	6843      	ldr	r3, [r0, #4]
   3e966:	681b      	ldr	r3, [r3, #0]
   3e968:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3e96c:	4770      	bx	lr

0003e96e <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   3e96e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3e972:	6843      	ldr	r3, [r0, #4]
   3e974:	681b      	ldr	r3, [r3, #0]
   3e976:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3e97a:	4770      	bx	lr

0003e97c <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   3e97c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3e980:	6843      	ldr	r3, [r0, #4]
   3e982:	681b      	ldr	r3, [r3, #0]
   3e984:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3e988:	4770      	bx	lr

0003e98a <uarte_nrfx_irq_update>:
}
   3e98a:	2001      	movs	r0, #1
   3e98c:	4770      	bx	lr

0003e98e <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   3e98e:	6903      	ldr	r3, [r0, #16]
   3e990:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   3e992:	e9c3 1200 	strd	r1, r2, [r3]
}
   3e996:	4770      	bx	lr

0003e998 <uarte_nrfx_irq_is_pending>:
{
   3e998:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   3e99a:	6843      	ldr	r3, [r0, #4]
{
   3e99c:	4604      	mov	r4, r0
	return config->uarte_regs;
   3e99e:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   3e9a0:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   3e9a4:	025b      	lsls	r3, r3, #9
   3e9a6:	d405      	bmi.n	3e9b4 <uarte_nrfx_irq_is_pending+0x1c>
   3e9a8:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   3e9ac:	f010 0010 	ands.w	r0, r0, #16
   3e9b0:	d106      	bne.n	3e9c0 <uarte_nrfx_irq_is_pending+0x28>
}
   3e9b2:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   3e9b4:	f7ff ffb2 	bl	3e91c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   3e9b8:	2800      	cmp	r0, #0
   3e9ba:	d0f5      	beq.n	3e9a8 <uarte_nrfx_irq_is_pending+0x10>
		||
   3e9bc:	2001      	movs	r0, #1
   3e9be:	e7f8      	b.n	3e9b2 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   3e9c0:	4620      	mov	r0, r4
   3e9c2:	f7ff ffc0 	bl	3e946 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   3e9c6:	3800      	subs	r0, #0
   3e9c8:	bf18      	it	ne
   3e9ca:	2001      	movne	r0, #1
   3e9cc:	e7f1      	b.n	3e9b2 <uarte_nrfx_irq_is_pending+0x1a>

0003e9ce <tx_start.isra.0>:
	return config->uarte_regs;
   3e9ce:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3e9d0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3e9d4:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e9d8:	2200      	movs	r2, #0
   3e9da:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   3e9de:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3e9e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   3e9e6:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3e9ea:	6842      	ldr	r2, [r0, #4]
   3e9ec:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3e9ee:	bf41      	itttt	mi
   3e9f0:	2208      	movmi	r2, #8
   3e9f2:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   3e9f6:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   3e9fa:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e9fe:	2201      	movs	r2, #1
   3ea00:	609a      	str	r2, [r3, #8]
}
   3ea02:	4770      	bx	lr

0003ea04 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   3ea04:	6802      	ldr	r2, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ea06:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3ea0a:	b943      	cbnz	r3, 3ea1e <is_tx_ready.isra.0+0x1a>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   3ea0c:	6841      	ldr	r1, [r0, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3ea0e:	0789      	lsls	r1, r1, #30
   3ea10:	d407      	bmi.n	3ea22 <is_tx_ready.isra.0+0x1e>
   3ea12:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   3ea16:	3800      	subs	r0, #0
   3ea18:	bf18      	it	ne
   3ea1a:	2001      	movne	r0, #1
   3ea1c:	4770      	bx	lr
   3ea1e:	2001      	movs	r0, #1
   3ea20:	4770      	bx	lr
   3ea22:	4618      	mov	r0, r3
}
   3ea24:	4770      	bx	lr

0003ea26 <uarte_nrfx_fifo_fill>:
{
   3ea26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   3ea28:	6906      	ldr	r6, [r0, #16]
{
   3ea2a:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   3ea2c:	68f3      	ldr	r3, [r6, #12]
   3ea2e:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3ea30:	3310      	adds	r3, #16
   3ea32:	4294      	cmp	r4, r2
   3ea34:	bfa8      	it	ge
   3ea36:	4614      	movge	r4, r2
   3ea38:	2201      	movs	r2, #1
   3ea3a:	e8d3 0fef 	ldaex	r0, [r3]
   3ea3e:	2800      	cmp	r0, #0
   3ea40:	d103      	bne.n	3ea4a <uarte_nrfx_fifo_fill+0x24>
   3ea42:	e8c3 2fe7 	stlex	r7, r2, [r3]
   3ea46:	2f00      	cmp	r7, #0
   3ea48:	d1f7      	bne.n	3ea3a <uarte_nrfx_fifo_fill+0x14>
   3ea4a:	bf0c      	ite	eq
   3ea4c:	4613      	moveq	r3, r2
   3ea4e:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   3ea50:	d01d      	beq.n	3ea8e <uarte_nrfx_fifo_fill+0x68>
		return 0;
   3ea52:	461c      	mov	r4, r3
}
   3ea54:	4620      	mov	r0, r4
   3ea56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   3ea58:	68f2      	ldr	r2, [r6, #12]
   3ea5a:	5cc8      	ldrb	r0, [r1, r3]
   3ea5c:	6892      	ldr	r2, [r2, #8]
   3ea5e:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   3ea60:	3301      	adds	r3, #1
   3ea62:	42a3      	cmp	r3, r4
   3ea64:	dbf8      	blt.n	3ea58 <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
   3ea66:	f04f 0320 	mov.w	r3, #32
   3ea6a:	f3ef 8711 	mrs	r7, BASEPRI
   3ea6e:	f383 8812 	msr	BASEPRI_MAX, r3
   3ea72:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   3ea76:	6868      	ldr	r0, [r5, #4]
   3ea78:	f7ff ffc4 	bl	3ea04 <is_tx_ready.isra.0>
   3ea7c:	68f3      	ldr	r3, [r6, #12]
   3ea7e:	b940      	cbnz	r0, 3ea92 <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
   3ea80:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   3ea82:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   3ea84:	f387 8811 	msr	BASEPRI, r7
   3ea88:	f3bf 8f6f 	isb	sy
	return len;
   3ea8c:	e7e2      	b.n	3ea54 <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
   3ea8e:	2300      	movs	r3, #0
   3ea90:	e7e7      	b.n	3ea62 <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
   3ea92:	4622      	mov	r2, r4
   3ea94:	6899      	ldr	r1, [r3, #8]
   3ea96:	6868      	ldr	r0, [r5, #4]
   3ea98:	f7ff ff99 	bl	3e9ce <tx_start.isra.0>
   3ea9c:	e7f2      	b.n	3ea84 <uarte_nrfx_fifo_fill+0x5e>

0003ea9e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   3ea9e:	6842      	ldr	r2, [r0, #4]
{
   3eaa0:	b410      	push	{r4}
	return config->uarte_regs;
   3eaa2:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   3eaa4:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   3eaa8:	05c9      	lsls	r1, r1, #23
   3eaaa:	d518      	bpl.n	3eade <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3eaac:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3eab0:	b1a9      	cbz	r1, 3eade <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   3eab2:	f04f 0420 	mov.w	r4, #32
   3eab6:	f3ef 8111 	mrs	r1, BASEPRI
   3eaba:	f384 8812 	msr	BASEPRI_MAX, r4
   3eabe:	f3bf 8f6f 	isb	sy
   3eac2:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3eac6:	b134      	cbz	r4, 3ead6 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3eac8:	2400      	movs	r4, #0
   3eaca:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   3eace:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ead2:	2401      	movs	r4, #1
   3ead4:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   3ead6:	f381 8811 	msr	BASEPRI, r1
   3eada:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3eade:	6852      	ldr	r2, [r2, #4]
   3eae0:	06d2      	lsls	r2, r2, #27
   3eae2:	d51a      	bpl.n	3eb1a <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   3eae4:	f04f 0220 	mov.w	r2, #32
   3eae8:	f3ef 8111 	mrs	r1, BASEPRI
   3eaec:	f382 8812 	msr	BASEPRI_MAX, r2
   3eaf0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3eaf4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3eaf8:	b112      	cbz	r2, 3eb00 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3eafa:	2200      	movs	r2, #0
   3eafc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   3eb00:	6902      	ldr	r2, [r0, #16]
   3eb02:	68d2      	ldr	r2, [r2, #12]
   3eb04:	b10a      	cbz	r2, 3eb0a <uarte_nrfx_isr_int+0x6c>
   3eb06:	6912      	ldr	r2, [r2, #16]
   3eb08:	b91a      	cbnz	r2, 3eb12 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   3eb0a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   3eb0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   3eb12:	f381 8811 	msr	BASEPRI, r1
   3eb16:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   3eb1a:	6902      	ldr	r2, [r0, #16]
   3eb1c:	68d2      	ldr	r2, [r2, #12]
   3eb1e:	b15a      	cbz	r2, 3eb38 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3eb20:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3eb24:	b159      	cbz	r1, 3eb3e <uarte_nrfx_isr_int+0xa0>
		data->int_driven->fifo_fill_lock = 0;
   3eb26:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   3eb28:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   3eb2a:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   3eb2c:	b13c      	cbz	r4, 3eb3e <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   3eb2e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   3eb32:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   3eb36:	7391      	strb	r1, [r2, #14]
}
   3eb38:	f85d 4b04 	ldr.w	r4, [sp], #4
   3eb3c:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3eb3e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3eb42:	b121      	cbz	r1, 3eb4e <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3eb44:	2100      	movs	r1, #0
   3eb46:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   3eb4a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   3eb4e:	6813      	ldr	r3, [r2, #0]
   3eb50:	2b00      	cmp	r3, #0
   3eb52:	d0f1      	beq.n	3eb38 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3eb54:	6851      	ldr	r1, [r2, #4]
}
   3eb56:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3eb5a:	4718      	bx	r3

0003eb5c <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   3eb5c:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   3eb5e:	f002 fc1e 	bl	4139e <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   3eb62:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   3eb64:	bf18      	it	ne
   3eb66:	f06f 0015 	mvnne.w	r0, #21
   3eb6a:	bd08      	pop	{r3, pc}

0003eb6c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   3eb6c:	4770      	bx	lr

0003eb6e <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   3eb6e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   3eb70:	6843      	ldr	r3, [r0, #4]
   3eb72:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   3eb74:	7a03      	ldrb	r3, [r0, #8]
   3eb76:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   3eb7a:	3b01      	subs	r3, #1
   3eb7c:	00db      	lsls	r3, r3, #3
   3eb7e:	6845      	ldr	r5, [r0, #4]
   3eb80:	6814      	ldr	r4, [r2, #0]
   3eb82:	441d      	add	r5, r3
   3eb84:	42ac      	cmp	r4, r5
   3eb86:	d902      	bls.n	3eb8e <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   3eb88:	f06f 0001 	mvn.w	r0, #1
}
   3eb8c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   3eb8e:	7965      	ldrb	r5, [r4, #5]
   3eb90:	428d      	cmp	r5, r1
   3eb92:	d002      	beq.n	3eb9a <pinctrl_lookup_state+0x2c>
		(*state)++;
   3eb94:	3408      	adds	r4, #8
   3eb96:	6014      	str	r4, [r2, #0]
   3eb98:	e7f1      	b.n	3eb7e <pinctrl_lookup_state+0x10>
			return 0;
   3eb9a:	2000      	movs	r0, #0
   3eb9c:	e7f6      	b.n	3eb8c <pinctrl_lookup_state+0x1e>

0003eb9e <nrf_gpio_pin_clear>:
{
   3eb9e:	b507      	push	{r0, r1, r2, lr}
   3eba0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3eba2:	a801      	add	r0, sp, #4
   3eba4:	f7e6 fcee 	bl	25584 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3eba8:	2301      	movs	r3, #1
   3ebaa:	9a01      	ldr	r2, [sp, #4]
   3ebac:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   3ebae:	60c3      	str	r3, [r0, #12]
}
   3ebb0:	b003      	add	sp, #12
   3ebb2:	f85d fb04 	ldr.w	pc, [sp], #4

0003ebb6 <nrf_gpio_pin_set>:
{
   3ebb6:	b507      	push	{r0, r1, r2, lr}
   3ebb8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3ebba:	a801      	add	r0, sp, #4
   3ebbc:	f7e6 fce2 	bl	25584 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3ebc0:	2301      	movs	r3, #1
   3ebc2:	9a01      	ldr	r2, [sp, #4]
   3ebc4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   3ebc6:	6083      	str	r3, [r0, #8]
}
   3ebc8:	b003      	add	sp, #12
   3ebca:	f85d fb04 	ldr.w	pc, [sp], #4

0003ebce <nrf_gpio_pin_write>:
    if (value == 0)
   3ebce:	b909      	cbnz	r1, 3ebd4 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   3ebd0:	f7ff bfe5 	b.w	3eb9e <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   3ebd4:	f7ff bfef 	b.w	3ebb6 <nrf_gpio_pin_set>

0003ebd8 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
   3ebd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   3ebda:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
{
   3ebde:	4604      	mov	r4, r0
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3ebe0:	2b00      	cmp	r3, #0
   3ebe2:	bf0c      	ite	eq
   3ebe4:	460e      	moveq	r6, r1
   3ebe6:	2600      	movne	r6, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   3ebe8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3ebec:	bf0c      	ite	eq
   3ebee:	4615      	moveq	r5, r2
   3ebf0:	2501      	movne	r5, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3ebf2:	a801      	add	r0, sp, #4
   3ebf4:	9301      	str	r3, [sp, #4]
   3ebf6:	f7e6 fcc5 	bl	25584 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3ebfa:	f3c4 1181 	ubfx	r1, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   3ebfe:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
    reg->PIN_CNF[pin_number] = cnf;
   3ec02:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3ec04:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
   3ec08:	ea44 0106 	orr.w	r1, r4, r6
   3ec0c:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   3ec10:	3380      	adds	r3, #128	; 0x80
   3ec12:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
   3ec16:	b002      	add	sp, #8
   3ec18:	bd70      	pop	{r4, r5, r6, pc}

0003ec1a <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   3ec1a:	b570      	push	{r4, r5, r6, lr}
   3ec1c:	4615      	mov	r5, r2
   3ec1e:	4604      	mov	r4, r0
   3ec20:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3ec24:	42a6      	cmp	r6, r4
   3ec26:	d101      	bne.n	3ec2c <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   3ec28:	2000      	movs	r0, #0
}
   3ec2a:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   3ec2c:	6823      	ldr	r3, [r4, #0]
   3ec2e:	0c1a      	lsrs	r2, r3, #16
   3ec30:	2a19      	cmp	r2, #25
   3ec32:	d869      	bhi.n	3ed08 <pinctrl_configure_pins+0xee>
   3ec34:	e8df f002 	tbb	[pc, r2]
   3ec38:	3e1f180d 	.word	0x3e1f180d
   3ec3c:	683e3424 	.word	0x683e3424
   3ec40:	43686868 	.word	0x43686868
   3ec44:	68686848 	.word	0x68686848
   3ec48:	68686868 	.word	0x68686868
   3ec4c:	594d6868 	.word	0x594d6868
   3ec50:	635e      	.short	0x635e
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   3ec52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec56:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   3ec5a:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
   3ec5c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3ec60:	f7ff ffa9 	bl	3ebb6 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ec64:	2201      	movs	r2, #1
   3ec66:	e004      	b.n	3ec72 <pinctrl_configure_pins+0x58>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   3ec68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec6c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3ec70:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ec72:	4611      	mov	r1, r2
   3ec74:	e00f      	b.n	3ec96 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   3ec76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec7a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   3ec7e:	e7ec      	b.n	3ec5a <pinctrl_configure_pins+0x40>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   3ec80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec84:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   3ec88:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   3ec8a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3ec8e:	f7ff ff86 	bl	3eb9e <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ec92:	2200      	movs	r2, #0
   3ec94:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ec96:	6820      	ldr	r0, [r4, #0]
   3ec98:	f7ff ff9e 	bl	3ebd8 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3ec9c:	3404      	adds	r4, #4
   3ec9e:	e7c1      	b.n	3ec24 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   3eca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3eca4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   3eca8:	6820      	ldr	r0, [r4, #0]
   3ecaa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3ecae:	f7ff ff76 	bl	3eb9e <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ecb2:	e7d7      	b.n	3ec64 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   3ecb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ecb8:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3ecbc:	e7d8      	b.n	3ec70 <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   3ecbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ecc2:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3ecc6:	e7d3      	b.n	3ec70 <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   3ecc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3eccc:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   3ecd0:	e7ce      	b.n	3ec70 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   3ecd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ecd6:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   3ecda:	6820      	ldr	r0, [r4, #0]
   3ecdc:	f3c0 3140 	ubfx	r1, r0, #13, #1
   3ece0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3ece4:	f7ff ff73 	bl	3ebce <nrf_gpio_pin_write>
   3ece8:	e7bc      	b.n	3ec64 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   3ecea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ecee:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   3ecf2:	e7f2      	b.n	3ecda <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   3ecf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ecf8:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   3ecfc:	e7ed      	b.n	3ecda <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   3ecfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ed02:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   3ed06:	e7e8      	b.n	3ecda <pinctrl_configure_pins+0xc0>
		switch (NRF_GET_FUN(pins[i])) {
   3ed08:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3ed0c:	e78d      	b.n	3ec2a <pinctrl_configure_pins+0x10>

0003ed0e <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   3ed0e:	f002 ba03 	b.w	41118 <z_impl_k_busy_wait>

0003ed12 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   3ed12:	f002 b929 	b.w	40f68 <k_is_in_isr>

0003ed16 <nrf_modem_os_sem_count_get>:
}
   3ed16:	6880      	ldr	r0, [r0, #8]
   3ed18:	4770      	bx	lr

0003ed1a <rpc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   3ed1a:	4668      	mov	r0, sp
   3ed1c:	f020 0107 	bic.w	r1, r0, #7
   3ed20:	468d      	mov	sp, r1
   3ed22:	b501      	push	{r0, lr}
	nrf_modem_application_irq_handler();
   3ed24:	f7f5 f8d8 	bl	33ed8 <nrf_modem_application_irq_handler>
	nrf_modem_os_event_notify();
   3ed28:	f7e6 fe80 	bl	25a2c <nrf_modem_os_event_notify>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3ed2c:	f7e3 ff6a 	bl	22c04 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3ed30:	f7e4 f882 	bl	22e38 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   3ed34:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3ed38:	4685      	mov	sp, r0
   3ed3a:	4770      	bx	lr

0003ed3c <read_task_create>:
{
   3ed3c:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(APPLICATION_IRQ, APPLICATION_IRQ_PRIORITY,
   3ed3e:	201c      	movs	r0, #28
   3ed40:	2200      	movs	r2, #0
   3ed42:	2106      	movs	r1, #6
   3ed44:	f7e3 ff38 	bl	22bb8 <z_arm_irq_priority_set>
}
   3ed48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(APPLICATION_IRQ);
   3ed4c:	201c      	movs	r0, #28
   3ed4e:	f7e3 bf01 	b.w	22b54 <arch_irq_enable>

0003ed52 <nrf_modem_os_trace_put>:
	}
#endif /* CONFIG_NRF_MODEM_LIB_TRACE_THREAD_PROCESSING */

#endif /* CONFIG_NRF_MODEM_LIB_TRACE_ENABLED */
	return 0;
}
   3ed52:	2000      	movs	r0, #0
   3ed54:	4770      	bx	lr

0003ed56 <z_to_nrf_flags>:
{
   3ed56:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   3ed58:	f000 0040 	and.w	r0, r0, #64	; 0x40
	if (z_flags & MSG_PEEK) {
   3ed5c:	079a      	lsls	r2, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   3ed5e:	bf48      	it	mi
   3ed60:	f040 0002 	orrmi.w	r0, r0, #2
	if (z_flags & MSG_WAITALL) {
   3ed64:	05db      	lsls	r3, r3, #23
		nrf_flags |= NRF_MSG_WAITALL;
   3ed66:	bf48      	it	mi
   3ed68:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
}
   3ed6c:	4770      	bx	lr

0003ed6e <nrf_to_z_protocol>:
	switch (proto) {
   3ed6e:	2811      	cmp	r0, #17
   3ed70:	d005      	beq.n	3ed7e <nrf_to_z_protocol+0x10>
   3ed72:	dc05      	bgt.n	3ed80 <nrf_to_z_protocol+0x12>
   3ed74:	b118      	cbz	r0, 3ed7e <nrf_to_z_protocol+0x10>
		return -EPROTONOSUPPORT;
   3ed76:	2806      	cmp	r0, #6
   3ed78:	bf18      	it	ne
   3ed7a:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
}
   3ed7e:	4770      	bx	lr
	switch (proto) {
   3ed80:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   3ed84:	d0fb      	beq.n	3ed7e <nrf_to_z_protocol+0x10>
   3ed86:	f240 1311 	movw	r3, #273	; 0x111
		return -EPROTONOSUPPORT;
   3ed8a:	4298      	cmp	r0, r3
   3ed8c:	e7f4      	b.n	3ed78 <nrf_to_z_protocol+0xa>

0003ed8e <nrf91_socket_offload_getsockopt>:
{
   3ed8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ed92:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   3ed94:	2300      	movs	r3, #0
{
   3ed96:	b086      	sub	sp, #24
   3ed98:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   3ed9c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3eda0:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   3eda4:	2901      	cmp	r1, #1
{
   3eda6:	460e      	mov	r6, r1
   3eda8:	4615      	mov	r5, r2
	int sd = OBJ_TO_SD(obj);
   3edaa:	6807      	ldr	r7, [r0, #0]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3edac:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   3edae:	d002      	beq.n	3edb6 <nrf91_socket_offload_getsockopt+0x28>
   3edb0:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3edb4:	d13a      	bne.n	3ee2c <nrf91_socket_offload_getsockopt+0x9e>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3edb6:	4629      	mov	r1, r5
   3edb8:	4630      	mov	r0, r6
   3edba:	aa02      	add	r2, sp, #8
   3edbc:	f7e6 fe8e 	bl	25adc <z_to_nrf_optname>
   3edc0:	2800      	cmp	r0, #0
   3edc2:	db33      	blt.n	3ee2c <nrf91_socket_offload_getsockopt+0x9e>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3edc4:	2e01      	cmp	r6, #1
   3edc6:	d123      	bne.n	3ee10 <nrf91_socket_offload_getsockopt+0x82>
   3edc8:	f1a5 0314 	sub.w	r3, r5, #20
   3edcc:	2b01      	cmp	r3, #1
   3edce:	d81f      	bhi.n	3ee10 <nrf91_socket_offload_getsockopt+0x82>
		nrf_optlen = sizeof(struct nrf_timeval);
   3edd0:	2308      	movs	r3, #8
   3edd2:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   3edd4:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3edd6:	aa03      	add	r2, sp, #12
   3edd8:	4638      	mov	r0, r7
   3edda:	9200      	str	r2, [sp, #0]
   3eddc:	4631      	mov	r1, r6
   3edde:	9a02      	ldr	r2, [sp, #8]
   3ede0:	f001 fe15 	bl	40a0e <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   3ede4:	4607      	mov	r7, r0
   3ede6:	b978      	cbnz	r0, 3ee08 <nrf91_socket_offload_getsockopt+0x7a>
   3ede8:	b174      	cbz	r4, 3ee08 <nrf91_socket_offload_getsockopt+0x7a>
		*optlen = nrf_optlen;
   3edea:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   3edec:	2e01      	cmp	r6, #1
		*optlen = nrf_optlen;
   3edee:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   3edf2:	d109      	bne.n	3ee08 <nrf91_socket_offload_getsockopt+0x7a>
			if (optname == SO_ERROR) {
   3edf4:	2d04      	cmp	r5, #4
   3edf6:	d10d      	bne.n	3ee14 <nrf91_socket_offload_getsockopt+0x86>
				if (*(int *)optval != 0) {
   3edf8:	6820      	ldr	r0, [r4, #0]
   3edfa:	b128      	cbz	r0, 3ee08 <nrf91_socket_offload_getsockopt+0x7a>
					nrf_modem_os_errno_set(*(int *)optval);
   3edfc:	f7e6 fd50 	bl	258a0 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   3ee00:	f7fe fcbd 	bl	3d77e <__errno>
   3ee04:	6803      	ldr	r3, [r0, #0]
   3ee06:	6023      	str	r3, [r4, #0]
}
   3ee08:	4638      	mov	r0, r7
   3ee0a:	b006      	add	sp, #24
   3ee0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ee10:	4623      	mov	r3, r4
   3ee12:	e7e0      	b.n	3edd6 <nrf91_socket_offload_getsockopt+0x48>
			} else if ((optname == SO_RCVTIMEO) ||
   3ee14:	3d14      	subs	r5, #20
   3ee16:	2d01      	cmp	r5, #1
   3ee18:	d8f6      	bhi.n	3ee08 <nrf91_socket_offload_getsockopt+0x7a>
					nrf_timeo.tv_sec;
   3ee1a:	9b04      	ldr	r3, [sp, #16]
   3ee1c:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   3ee20:	9b05      	ldr	r3, [sp, #20]
   3ee22:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   3ee24:	2310      	movs	r3, #16
   3ee26:	f8c8 3000 	str.w	r3, [r8]
   3ee2a:	e7ed      	b.n	3ee08 <nrf91_socket_offload_getsockopt+0x7a>
	errno = ENOPROTOOPT;
   3ee2c:	f7fe fca7 	bl	3d77e <__errno>
   3ee30:	236d      	movs	r3, #109	; 0x6d
	return retval;
   3ee32:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   3ee36:	6003      	str	r3, [r0, #0]
	return retval;
   3ee38:	e7e6      	b.n	3ee08 <nrf91_socket_offload_getsockopt+0x7a>

0003ee3a <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   3ee3a:	6800      	ldr	r0, [r0, #0]
   3ee3c:	f001 bc2a 	b.w	40694 <nrf_listen>

0003ee40 <nrf91_socket_offload_freeaddrinfo>:
{
   3ee40:	b538      	push	{r3, r4, r5, lr}
   3ee42:	4604      	mov	r4, r0
	while (next != NULL) {
   3ee44:	b904      	cbnz	r4, 3ee48 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   3ee46:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   3ee48:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   3ee4a:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   3ee4c:	f002 fa41 	bl	412d2 <k_free>
		k_free(this);
   3ee50:	4620      	mov	r0, r4
   3ee52:	f002 fa3e 	bl	412d2 <k_free>
		next = next->ai_next;
   3ee56:	462c      	mov	r4, r5
   3ee58:	e7f4      	b.n	3ee44 <nrf91_socket_offload_freeaddrinfo+0x4>

0003ee5a <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   3ee5a:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   3ee5c:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   3ee5e:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3ee60:	4603      	mov	r3, r0
{
   3ee62:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3ee64:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3ee68:	f101 0420 	add.w	r4, r1, #32
   3ee6c:	f101 0210 	add.w	r2, r1, #16
   3ee70:	f852 5b04 	ldr.w	r5, [r2], #4
   3ee74:	42a2      	cmp	r2, r4
   3ee76:	f843 5b04 	str.w	r5, [r3], #4
   3ee7a:	d1f9      	bne.n	3ee70 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   3ee7c:	6a0b      	ldr	r3, [r1, #32]
   3ee7e:	7503      	strb	r3, [r0, #20]
}
   3ee80:	bd30      	pop	{r4, r5, pc}

0003ee82 <z_to_nrf_ipv6>:
{
   3ee82:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3ee84:	2124      	movs	r1, #36	; 0x24
   3ee86:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   3ee88:	8841      	ldrh	r1, [r0, #2]
{
   3ee8a:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   3ee8c:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3ee8e:	2102      	movs	r1, #2
{
   3ee90:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   3ee92:	6059      	str	r1, [r3, #4]
   3ee94:	1d04      	adds	r4, r0, #4
   3ee96:	f103 0610 	add.w	r6, r3, #16
   3ee9a:	f100 0714 	add.w	r7, r0, #20
   3ee9e:	4635      	mov	r5, r6
   3eea0:	6820      	ldr	r0, [r4, #0]
   3eea2:	6861      	ldr	r1, [r4, #4]
   3eea4:	3408      	adds	r4, #8
   3eea6:	c503      	stmia	r5!, {r0, r1}
   3eea8:	42bc      	cmp	r4, r7
   3eeaa:	462e      	mov	r6, r5
   3eeac:	d1f7      	bne.n	3ee9e <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   3eeae:	7d12      	ldrb	r2, [r2, #20]
   3eeb0:	621a      	str	r2, [r3, #32]
}
   3eeb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003eeb4 <nrf91_socket_offload_sendto>:
{
   3eeb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3eeb8:	b08e      	sub	sp, #56	; 0x38
   3eeba:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3eebc:	460f      	mov	r7, r1
   3eebe:	461d      	mov	r5, r3
	int sd = OBJ_TO_SD(obj);
   3eec0:	6806      	ldr	r6, [r0, #0]
	if (to == NULL) {
   3eec2:	b964      	cbnz	r4, 3eede <nrf91_socket_offload_sendto+0x2a>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3eec4:	4618      	mov	r0, r3
   3eec6:	9203      	str	r2, [sp, #12]
   3eec8:	f7ff ff45 	bl	3ed56 <z_to_nrf_flags>
   3eecc:	4603      	mov	r3, r0
   3eece:	4630      	mov	r0, r6
   3eed0:	9a03      	ldr	r2, [sp, #12]
   3eed2:	9415      	str	r4, [sp, #84]	; 0x54
}
   3eed4:	b00e      	add	sp, #56	; 0x38
   3eed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3eeda:	f7f5 bd29 	b.w	34930 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   3eede:	8823      	ldrh	r3, [r4, #0]
   3eee0:	9203      	str	r2, [sp, #12]
   3eee2:	2b01      	cmp	r3, #1
   3eee4:	d116      	bne.n	3ef14 <nrf91_socket_offload_sendto+0x60>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3eee6:	2710      	movs	r7, #16
	nrf_out->sin_port = ptr->sin_port;
   3eee8:	8860      	ldrh	r0, [r4, #2]
	nrf_out->sin_family = NRF_AF_INET;
   3eeea:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3eeec:	6863      	ldr	r3, [r4, #4]
	nrf_out->sin_port = ptr->sin_port;
   3eeee:	f8ad 001c 	strh.w	r0, [sp, #28]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3eef2:	4628      	mov	r0, r5
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3eef4:	9308      	str	r3, [sp, #32]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3eef6:	f88d 7014 	strb.w	r7, [sp, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3eefa:	f7ff ff2c 	bl	3ed56 <z_to_nrf_flags>
   3eefe:	9a03      	ldr	r2, [sp, #12]
   3ef00:	4603      	mov	r3, r0
   3ef02:	a805      	add	r0, sp, #20
   3ef04:	9701      	str	r7, [sp, #4]
   3ef06:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3ef08:	4630      	mov	r0, r6
   3ef0a:	f7f5 fd11 	bl	34930 <nrf_sendto>
}
   3ef0e:	b00e      	add	sp, #56	; 0x38
   3ef10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   3ef14:	2b02      	cmp	r3, #2
   3ef16:	d10f      	bne.n	3ef38 <nrf91_socket_offload_sendto+0x84>
		z_to_nrf_ipv6(to, &ipv6);
   3ef18:	f10d 0814 	add.w	r8, sp, #20
   3ef1c:	4641      	mov	r1, r8
   3ef1e:	4620      	mov	r0, r4
   3ef20:	f7ff ffaf 	bl	3ee82 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3ef24:	4628      	mov	r0, r5
   3ef26:	f7ff ff16 	bl	3ed56 <z_to_nrf_flags>
   3ef2a:	2124      	movs	r1, #36	; 0x24
   3ef2c:	4603      	mov	r3, r0
   3ef2e:	e9cd 8100 	strd	r8, r1, [sp]
   3ef32:	9a03      	ldr	r2, [sp, #12]
   3ef34:	4639      	mov	r1, r7
   3ef36:	e7e7      	b.n	3ef08 <nrf91_socket_offload_sendto+0x54>
	errno = ENOTSUP;
   3ef38:	f7fe fc21 	bl	3d77e <__errno>
   3ef3c:	2386      	movs	r3, #134	; 0x86
   3ef3e:	6003      	str	r3, [r0, #0]
	return retval;
   3ef40:	f04f 30ff 	mov.w	r0, #4294967295
   3ef44:	e7e3      	b.n	3ef0e <nrf91_socket_offload_sendto+0x5a>

0003ef46 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3ef46:	2300      	movs	r3, #0
{
   3ef48:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3ef4a:	e9cd 3300 	strd	r3, r3, [sp]
   3ef4e:	f7ff ffb1 	bl	3eeb4 <nrf91_socket_offload_sendto>
}
   3ef52:	b003      	add	sp, #12
   3ef54:	f85d fb04 	ldr.w	pc, [sp], #4

0003ef58 <nrf91_socket_offload_connect>:
{
   3ef58:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   3ef5a:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   3ef5c:	8808      	ldrh	r0, [r1, #0]
{
   3ef5e:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3ef60:	2801      	cmp	r0, #1
{
   3ef62:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3ef64:	d10e      	bne.n	3ef84 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3ef66:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3ef68:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3ef6a:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3ef6c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   3ef70:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3ef74:	9002      	str	r0, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3ef76:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   3ef78:	4620      	mov	r0, r4
   3ef7a:	a901      	add	r1, sp, #4
   3ef7c:	f7f5 fc36 	bl	347ec <nrf_connect>
}
   3ef80:	b00a      	add	sp, #40	; 0x28
   3ef82:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3ef84:	2802      	cmp	r0, #2
   3ef86:	d105      	bne.n	3ef94 <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   3ef88:	4618      	mov	r0, r3
   3ef8a:	a901      	add	r1, sp, #4
   3ef8c:	f7ff ff79 	bl	3ee82 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   3ef90:	2224      	movs	r2, #36	; 0x24
   3ef92:	e7f1      	b.n	3ef78 <nrf91_socket_offload_connect+0x20>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   3ef94:	4620      	mov	r0, r4
   3ef96:	f7f5 fc29 	bl	347ec <nrf_connect>
		if (retval < 0) {
   3ef9a:	2800      	cmp	r0, #0
   3ef9c:	daf0      	bge.n	3ef80 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   3ef9e:	f7fe fbee 	bl	3d77e <__errno>
   3efa2:	2386      	movs	r3, #134	; 0x86
   3efa4:	6003      	str	r3, [r0, #0]
	return retval;
   3efa6:	f04f 30ff 	mov.w	r0, #4294967295
   3efaa:	e7e9      	b.n	3ef80 <nrf91_socket_offload_connect+0x28>

0003efac <nrf91_socket_offload_bind>:
{
   3efac:	b510      	push	{r4, lr}
   3efae:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3efb0:	8809      	ldrh	r1, [r1, #0]
	int sd = OBJ_TO_SD(obj);
   3efb2:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   3efb4:	2901      	cmp	r1, #1
{
   3efb6:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3efb8:	d10e      	bne.n	3efd8 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3efba:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3efbc:	8858      	ldrh	r0, [r3, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3efbe:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3efc0:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   3efc4:	f8ad 000c 	strh.w	r0, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3efc8:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3efca:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3efcc:	4620      	mov	r0, r4
   3efce:	a901      	add	r1, sp, #4
   3efd0:	f001 fb16 	bl	40600 <nrf_bind>
}
   3efd4:	b00a      	add	sp, #40	; 0x28
   3efd6:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3efd8:	2902      	cmp	r1, #2
   3efda:	d105      	bne.n	3efe8 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   3efdc:	4618      	mov	r0, r3
   3efde:	a901      	add	r1, sp, #4
   3efe0:	f7ff ff4f 	bl	3ee82 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3efe4:	2224      	movs	r2, #36	; 0x24
   3efe6:	e7f1      	b.n	3efcc <nrf91_socket_offload_bind+0x20>
	errno = ENOTSUP;
   3efe8:	f7fe fbc9 	bl	3d77e <__errno>
   3efec:	2386      	movs	r3, #134	; 0x86
   3efee:	6003      	str	r3, [r0, #0]
	return retval;
   3eff0:	f04f 30ff 	mov.w	r0, #4294967295
   3eff4:	e7ee      	b.n	3efd4 <nrf91_socket_offload_bind+0x28>

0003eff6 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   3eff6:	f7f7 bc6d 	b.w	368d4 <z_impl_k_mutex_lock>

0003effa <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   3effa:	f7f7 bd3d 	b.w	36a78 <z_impl_k_mutex_unlock>

0003effe <nrf91_socket_offload_recvfrom>:
{
   3effe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f002:	4606      	mov	r6, r0
	if (ctx->lock) {
   3f004:	6840      	ldr	r0, [r0, #4]
{
   3f006:	b08f      	sub	sp, #60	; 0x3c
   3f008:	460c      	mov	r4, r1
   3f00a:	e9dd 5918 	ldrd	r5, r9, [sp, #96]	; 0x60
   3f00e:	4617      	mov	r7, r2
   3f010:	4698      	mov	r8, r3
	if (ctx->lock) {
   3f012:	b108      	cbz	r0, 3f018 <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   3f014:	f7ff fff1 	bl	3effa <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f018:	4640      	mov	r0, r8
   3f01a:	f7ff fe9c 	bl	3ed56 <z_to_nrf_flags>
   3f01e:	f8d6 a000 	ldr.w	sl, [r6]
   3f022:	4603      	mov	r3, r0
	if (from == NULL) {
   3f024:	b99d      	cbnz	r5, 3f04e <nrf91_socket_offload_recvfrom+0x50>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f026:	4621      	mov	r1, r4
   3f028:	463a      	mov	r2, r7
   3f02a:	4650      	mov	r0, sl
   3f02c:	e9cd 5500 	strd	r5, r5, [sp]
   3f030:	f001 fbfe 	bl	40830 <nrf_recvfrom>
   3f034:	4604      	mov	r4, r0
	if (ctx->lock) {
   3f036:	6870      	ldr	r0, [r6, #4]
   3f038:	b128      	cbz	r0, 3f046 <nrf91_socket_offload_recvfrom+0x48>
		k_mutex_lock(ctx->lock, K_FOREVER);
   3f03a:	f04f 32ff 	mov.w	r2, #4294967295
   3f03e:	f04f 33ff 	mov.w	r3, #4294967295
   3f042:	f7ff ffd8 	bl	3eff6 <k_mutex_lock.constprop.0.isra.0>
}
   3f046:	4620      	mov	r0, r4
   3f048:	b00f      	add	sp, #60	; 0x3c
   3f04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   3f04e:	f04f 0b24 	mov.w	fp, #36	; 0x24
   3f052:	f10d 0814 	add.w	r8, sp, #20
   3f056:	465a      	mov	r2, fp
   3f058:	2100      	movs	r1, #0
   3f05a:	9003      	str	r0, [sp, #12]
   3f05c:	4640      	mov	r0, r8
   3f05e:	f002 f9e9 	bl	41434 <memset>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f062:	aa04      	add	r2, sp, #16
   3f064:	4621      	mov	r1, r4
   3f066:	e9cd 8200 	strd	r8, r2, [sp]
   3f06a:	4650      	mov	r0, sl
   3f06c:	463a      	mov	r2, r7
   3f06e:	9b03      	ldr	r3, [sp, #12]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3f070:	f8cd b010 	str.w	fp, [sp, #16]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f074:	f001 fbdc 	bl	40830 <nrf_recvfrom>
		if (retval < 0) {
   3f078:	1e04      	subs	r4, r0, #0
   3f07a:	dbdc      	blt.n	3f036 <nrf91_socket_offload_recvfrom+0x38>
		if (cliaddr->sa_family == NRF_AF_INET) {
   3f07c:	9b06      	ldr	r3, [sp, #24]
   3f07e:	2b01      	cmp	r3, #1
   3f080:	d109      	bne.n	3f096 <nrf91_socket_offload_recvfrom+0x98>
	ptr->sin_family = AF_INET;
   3f082:	802b      	strh	r3, [r5, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3f084:	9b08      	ldr	r3, [sp, #32]
	ptr->sin_port = nrf_in->sin_port;
   3f086:	f8bd 201c 	ldrh.w	r2, [sp, #28]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3f08a:	606b      	str	r3, [r5, #4]
			*fromlen = sizeof(struct sockaddr_in);
   3f08c:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   3f08e:	806a      	strh	r2, [r5, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   3f090:	f8c9 3000 	str.w	r3, [r9]
   3f094:	e7cf      	b.n	3f036 <nrf91_socket_offload_recvfrom+0x38>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   3f096:	2b02      	cmp	r3, #2
   3f098:	d1cd      	bne.n	3f036 <nrf91_socket_offload_recvfrom+0x38>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   3f09a:	4641      	mov	r1, r8
   3f09c:	4628      	mov	r0, r5
   3f09e:	f7ff fedc 	bl	3ee5a <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3f0a2:	2318      	movs	r3, #24
   3f0a4:	e7f4      	b.n	3f090 <nrf91_socket_offload_recvfrom+0x92>

0003f0a6 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3f0a6:	2300      	movs	r3, #0
{
   3f0a8:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3f0aa:	e9cd 3300 	strd	r3, r3, [sp]
   3f0ae:	f7ff ffa6 	bl	3effe <nrf91_socket_offload_recvfrom>
}
   3f0b2:	b003      	add	sp, #12
   3f0b4:	f85d fb04 	ldr.w	pc, [sp], #4

0003f0b8 <nrf91_socket_offload_close>:
{
   3f0b8:	b538      	push	{r3, r4, r5, lr}
   3f0ba:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   3f0bc:	6800      	ldr	r0, [r0, #0]
   3f0be:	f001 fa6e 	bl	4059e <nrf_close>
	if (retval == 0) {
   3f0c2:	4604      	mov	r4, r0
   3f0c4:	b910      	cbnz	r0, 3f0cc <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   3f0c6:	4628      	mov	r0, r5
   3f0c8:	f7e7 f824 	bl	26114 <release_ctx>
}
   3f0cc:	4620      	mov	r0, r4
   3f0ce:	bd38      	pop	{r3, r4, r5, pc}

0003f0d0 <nrf91_socket_offload_setsockopt>:
{
   3f0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   3f0d4:	2901      	cmp	r1, #1
{
   3f0d6:	b086      	sub	sp, #24
   3f0d8:	460c      	mov	r4, r1
   3f0da:	4615      	mov	r5, r2
   3f0dc:	461e      	mov	r6, r3
   3f0de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   3f0e0:	f8d0 8000 	ldr.w	r8, [r0]
	switch (z_in_level) {
   3f0e4:	d002      	beq.n	3f0ec <nrf91_socket_offload_setsockopt+0x1c>
   3f0e6:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3f0ea:	d122      	bne.n	3f132 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3f0ec:	4629      	mov	r1, r5
   3f0ee:	4620      	mov	r0, r4
   3f0f0:	aa03      	add	r2, sp, #12
   3f0f2:	f7e6 fcf3 	bl	25adc <z_to_nrf_optname>
   3f0f6:	2800      	cmp	r0, #0
   3f0f8:	db1b      	blt.n	3f132 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3f0fa:	2c01      	cmp	r4, #1
   3f0fc:	d112      	bne.n	3f124 <nrf91_socket_offload_setsockopt+0x54>
   3f0fe:	3d14      	subs	r5, #20
   3f100:	2d01      	cmp	r5, #1
   3f102:	d805      	bhi.n	3f110 <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(struct nrf_timeval);
   3f104:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3f106:	6833      	ldr	r3, [r6, #0]
   3f108:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3f10a:	68b3      	ldr	r3, [r6, #8]
		nrf_optval = &nrf_timeo;
   3f10c:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3f10e:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3f110:	4633      	mov	r3, r6
   3f112:	4621      	mov	r1, r4
   3f114:	4640      	mov	r0, r8
   3f116:	9a03      	ldr	r2, [sp, #12]
   3f118:	9700      	str	r7, [sp, #0]
   3f11a:	f7f5 fd0d 	bl	34b38 <nrf_setsockopt>
}
   3f11e:	b006      	add	sp, #24
   3f120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3f124:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   3f128:	d1f2      	bne.n	3f110 <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   3f12a:	2d0a      	cmp	r5, #10
   3f12c:	bf08      	it	eq
   3f12e:	2704      	moveq	r7, #4
   3f130:	e7ee      	b.n	3f110 <nrf91_socket_offload_setsockopt+0x40>
	errno = ENOPROTOOPT;
   3f132:	f7fe fb24 	bl	3d77e <__errno>
   3f136:	236d      	movs	r3, #109	; 0x6d
   3f138:	6003      	str	r3, [r0, #0]
	return retval;
   3f13a:	f04f 30ff 	mov.w	r0, #4294967295
   3f13e:	e7ee      	b.n	3f11e <nrf91_socket_offload_setsockopt+0x4e>

0003f140 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable != NULL) {
   3f140:	6883      	ldr	r3, [r0, #8]
   3f142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3f144:	b103      	cbz	r3, 3f148 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   3f146:	4718      	bx	r3
}
   3f148:	4770      	bx	lr

0003f14a <response_handler>:
	write_uart_string(response);
   3f14a:	f7e7 b983 	b.w	26454 <write_uart_string>

0003f14e <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   3f14e:	280d      	cmp	r0, #13
   3f150:	d004      	beq.n	3f15c <is_lfcr+0xe>
   3f152:	f1a0 030a 	sub.w	r3, r0, #10
   3f156:	4258      	negs	r0, r3
   3f158:	4158      	adcs	r0, r3
   3f15a:	4770      	bx	lr
		return true;
   3f15c:	2001      	movs	r0, #1
}
   3f15e:	4770      	bx	lr

0003f160 <skip_command_prefix>:
{
   3f160:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   3f162:	6801      	ldr	r1, [r0, #0]
{
   3f164:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   3f166:	1c8b      	adds	r3, r1, #2
   3f168:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   3f16a:	788c      	ldrb	r4, [r1, #2]
   3f16c:	4620      	mov	r0, r4
   3f16e:	f7ff ffee 	bl	3f14e <is_lfcr>
   3f172:	b910      	cbnz	r0, 3f17a <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3f174:	b10c      	cbz	r4, 3f17a <skip_command_prefix+0x1a>
	(*cmd)++;
   3f176:	3103      	adds	r1, #3
   3f178:	6011      	str	r1, [r2, #0]
}
   3f17a:	bd10      	pop	{r4, pc}

0003f17c <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   3f17c:	6813      	ldr	r3, [r2, #0]
   3f17e:	f7e7 bcd5 	b.w	26b2c <at_parser_max_params_from_str>

0003f182 <at_params_list_init>:
{
   3f182:	b538      	push	{r3, r4, r5, lr}
   3f184:	460d      	mov	r5, r1
	if (list == NULL) {
   3f186:	4604      	mov	r4, r0
   3f188:	b140      	cbz	r0, 3f19c <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   3f18a:	2110      	movs	r1, #16
   3f18c:	4628      	mov	r0, r5
   3f18e:	f002 f8ab 	bl	412e8 <k_calloc>
   3f192:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   3f194:	b128      	cbz	r0, 3f1a2 <at_params_list_init+0x20>
	return 0;
   3f196:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   3f198:	6025      	str	r5, [r4, #0]
}
   3f19a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3f19c:	f06f 0015 	mvn.w	r0, #21
   3f1a0:	e7fb      	b.n	3f19a <at_params_list_init+0x18>
		return -ENOMEM;
   3f1a2:	f06f 000b 	mvn.w	r0, #11
   3f1a6:	e7f8      	b.n	3f19a <at_params_list_init+0x18>

0003f1a8 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   3f1a8:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3f1aa:	4604      	mov	r4, r0
   3f1ac:	b148      	cbz	r0, 3f1c2 <at_params_list_free+0x1a>
   3f1ae:	6843      	ldr	r3, [r0, #4]
   3f1b0:	b13b      	cbz	r3, 3f1c2 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   3f1b2:	2500      	movs	r5, #0
	at_params_list_clear(list);
   3f1b4:	f7e7 fdb8 	bl	26d28 <at_params_list_clear>
	k_free(list->params);
   3f1b8:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   3f1ba:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   3f1bc:	f002 f889 	bl	412d2 <k_free>
	list->params = NULL;
   3f1c0:	6065      	str	r5, [r4, #4]
}
   3f1c2:	bd38      	pop	{r3, r4, r5, pc}

0003f1c4 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   3f1c4:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   3f1c6:	b910      	cbnz	r0, 3f1ce <at_params_empty_put+0xa>
		return -EINVAL;
   3f1c8:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   3f1cc:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   3f1ce:	6843      	ldr	r3, [r0, #4]
   3f1d0:	2b00      	cmp	r3, #0
   3f1d2:	d0f9      	beq.n	3f1c8 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   3f1d4:	f7e7 fd56 	bl	26c84 <at_params_get>
	if (param == NULL) {
   3f1d8:	4604      	mov	r4, r0
   3f1da:	2800      	cmp	r0, #0
   3f1dc:	d0f4      	beq.n	3f1c8 <at_params_empty_put+0x4>
	at_param_clear(param);
   3f1de:	f7e7 fd87 	bl	26cf0 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   3f1e2:	2304      	movs	r3, #4
	param->value.int_val = 0;
   3f1e4:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   3f1e6:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   3f1e8:	2300      	movs	r3, #0
	return 0;
   3f1ea:	2000      	movs	r0, #0
	param->value.int_val = 0;
   3f1ec:	e9c4 2302 	strd	r2, r3, [r4, #8]
	return 0;
   3f1f0:	e7ec      	b.n	3f1cc <at_params_empty_put+0x8>

0003f1f2 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   3f1f2:	b570      	push	{r4, r5, r6, lr}
   3f1f4:	4616      	mov	r6, r2
   3f1f6:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   3f1f8:	b910      	cbnz	r0, 3f200 <at_params_int_put+0xe>
		return -EINVAL;
   3f1fa:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   3f1fe:	bd70      	pop	{r4, r5, r6, pc}
	if (list == NULL || list->params == NULL) {
   3f200:	6843      	ldr	r3, [r0, #4]
   3f202:	2b00      	cmp	r3, #0
   3f204:	d0f9      	beq.n	3f1fa <at_params_int_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3f206:	f7e7 fd3d 	bl	26c84 <at_params_get>
	if (param == NULL) {
   3f20a:	4604      	mov	r4, r0
   3f20c:	2800      	cmp	r0, #0
   3f20e:	d0f4      	beq.n	3f1fa <at_params_int_put+0x8>
	at_param_clear(param);
   3f210:	f7e7 fd6e 	bl	26cf0 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   3f214:	2301      	movs	r3, #1
	return 0;
   3f216:	2000      	movs	r0, #0
	param->value.int_val = value;
   3f218:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   3f21c:	7023      	strb	r3, [r4, #0]
	return 0;
   3f21e:	e7ee      	b.n	3f1fe <at_params_int_put+0xc>

0003f220 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   3f220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f222:	4617      	mov	r7, r2
   3f224:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   3f226:	b910      	cbnz	r0, 3f22e <at_params_string_put+0xe>
		return -EINVAL;
   3f228:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   3f22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   3f22e:	6843      	ldr	r3, [r0, #4]
   3f230:	2b00      	cmp	r3, #0
   3f232:	d0f9      	beq.n	3f228 <at_params_string_put+0x8>
   3f234:	2a00      	cmp	r2, #0
   3f236:	d0f7      	beq.n	3f228 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3f238:	f7e7 fd24 	bl	26c84 <at_params_get>
	if (param == NULL) {
   3f23c:	4604      	mov	r4, r0
   3f23e:	2800      	cmp	r0, #0
   3f240:	d0f2      	beq.n	3f228 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   3f242:	1c68      	adds	r0, r5, #1
   3f244:	f002 f84c 	bl	412e0 <k_malloc>
	if (param_value == NULL) {
   3f248:	4606      	mov	r6, r0
   3f24a:	b160      	cbz	r0, 3f266 <at_params_string_put+0x46>
   3f24c:	462a      	mov	r2, r5
   3f24e:	4639      	mov	r1, r7
   3f250:	f002 f8d0 	bl	413f4 <memcpy>
	at_param_clear(param);
   3f254:	4620      	mov	r0, r4
   3f256:	f7e7 fd4b 	bl	26cf0 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   3f25a:	2302      	movs	r3, #2
	return 0;
   3f25c:	2000      	movs	r0, #0
	param->size = str_len;
   3f25e:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   3f260:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   3f262:	60a6      	str	r6, [r4, #8]
	return 0;
   3f264:	e7e2      	b.n	3f22c <at_params_string_put+0xc>
		return -ENOMEM;
   3f266:	f06f 000b 	mvn.w	r0, #11
   3f26a:	e7df      	b.n	3f22c <at_params_string_put+0xc>

0003f26c <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   3f26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f26e:	4617      	mov	r7, r2
   3f270:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   3f272:	b910      	cbnz	r0, 3f27a <at_params_array_put+0xe>
		return -EINVAL;
   3f274:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   3f278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   3f27a:	6843      	ldr	r3, [r0, #4]
   3f27c:	2b00      	cmp	r3, #0
   3f27e:	d0f9      	beq.n	3f274 <at_params_array_put+0x8>
   3f280:	2a00      	cmp	r2, #0
   3f282:	d0f7      	beq.n	3f274 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3f284:	f7e7 fcfe 	bl	26c84 <at_params_get>
	if (param == NULL) {
   3f288:	4604      	mov	r4, r0
   3f28a:	2800      	cmp	r0, #0
   3f28c:	d0f2      	beq.n	3f274 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   3f28e:	4628      	mov	r0, r5
   3f290:	f002 f826 	bl	412e0 <k_malloc>
	if (param_value == NULL) {
   3f294:	4606      	mov	r6, r0
   3f296:	b160      	cbz	r0, 3f2b2 <at_params_array_put+0x46>
   3f298:	462a      	mov	r2, r5
   3f29a:	4639      	mov	r1, r7
   3f29c:	f002 f8aa 	bl	413f4 <memcpy>
	at_param_clear(param);
   3f2a0:	4620      	mov	r0, r4
   3f2a2:	f7e7 fd25 	bl	26cf0 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   3f2a6:	2303      	movs	r3, #3
	return 0;
   3f2a8:	2000      	movs	r0, #0
	param->size = array_len;
   3f2aa:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   3f2ac:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   3f2ae:	60a6      	str	r6, [r4, #8]
	return 0;
   3f2b0:	e7e2      	b.n	3f278 <at_params_array_put+0xc>
		return -ENOMEM;
   3f2b2:	f06f 000b 	mvn.w	r0, #11
   3f2b6:	e7df      	b.n	3f278 <at_params_array_put+0xc>

0003f2b8 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   3f2b8:	b510      	push	{r4, lr}
   3f2ba:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3f2bc:	b910      	cbnz	r0, 3f2c4 <at_params_short_get+0xc>
		return -EINVAL;
   3f2be:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
}
   3f2c2:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3f2c4:	6843      	ldr	r3, [r0, #4]
   3f2c6:	2b00      	cmp	r3, #0
   3f2c8:	d0f9      	beq.n	3f2be <at_params_short_get+0x6>
   3f2ca:	2a00      	cmp	r2, #0
   3f2cc:	d0f7      	beq.n	3f2be <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3f2ce:	f7e7 fcd9 	bl	26c84 <at_params_get>
	if (param == NULL) {
   3f2d2:	2800      	cmp	r0, #0
   3f2d4:	d0f3      	beq.n	3f2be <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3f2d6:	7803      	ldrb	r3, [r0, #0]
   3f2d8:	2b01      	cmp	r3, #1
   3f2da:	d1f0      	bne.n	3f2be <at_params_short_get+0x6>
	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   3f2dc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   3f2e0:	f513 4100 	adds.w	r1, r3, #32768	; 0x8000
   3f2e4:	f142 0200 	adc.w	r2, r2, #0
   3f2e8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   3f2ec:	f172 0200 	sbcs.w	r2, r2, #0
   3f2f0:	d2e5      	bcs.n	3f2be <at_params_short_get+0x6>
	return 0;
   3f2f2:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   3f2f4:	8023      	strh	r3, [r4, #0]
	return 0;
   3f2f6:	e7e4      	b.n	3f2c2 <at_params_short_get+0xa>

0003f2f8 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   3f2f8:	b510      	push	{r4, lr}
   3f2fa:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3f2fc:	b910      	cbnz	r0, 3f304 <at_params_unsigned_short_get+0xc>
		return -EINVAL;
   3f2fe:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   3f302:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3f304:	6843      	ldr	r3, [r0, #4]
   3f306:	2b00      	cmp	r3, #0
   3f308:	d0f9      	beq.n	3f2fe <at_params_unsigned_short_get+0x6>
   3f30a:	2a00      	cmp	r2, #0
   3f30c:	d0f7      	beq.n	3f2fe <at_params_unsigned_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3f30e:	f7e7 fcb9 	bl	26c84 <at_params_get>
	if (param == NULL) {
   3f312:	2800      	cmp	r0, #0
   3f314:	d0f3      	beq.n	3f2fe <at_params_unsigned_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3f316:	7803      	ldrb	r3, [r0, #0]
   3f318:	2b01      	cmp	r3, #1
   3f31a:	d1f0      	bne.n	3f2fe <at_params_unsigned_short_get+0x6>
	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   3f31c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   3f320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   3f324:	f172 0200 	sbcs.w	r2, r2, #0
   3f328:	d2e9      	bcs.n	3f2fe <at_params_unsigned_short_get+0x6>
	return 0;
   3f32a:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   3f32c:	8023      	strh	r3, [r4, #0]
	return 0;
   3f32e:	e7e8      	b.n	3f302 <at_params_unsigned_short_get+0xa>

0003f330 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   3f330:	b510      	push	{r4, lr}
   3f332:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3f334:	b910      	cbnz	r0, 3f33c <at_params_int_get+0xc>
		return -EINVAL;
   3f336:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
}
   3f33a:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3f33c:	6843      	ldr	r3, [r0, #4]
   3f33e:	2b00      	cmp	r3, #0
   3f340:	d0f9      	beq.n	3f336 <at_params_int_get+0x6>
   3f342:	2a00      	cmp	r2, #0
   3f344:	d0f7      	beq.n	3f336 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3f346:	f7e7 fc9d 	bl	26c84 <at_params_get>
	if (param == NULL) {
   3f34a:	2800      	cmp	r0, #0
   3f34c:	d0f3      	beq.n	3f336 <at_params_int_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3f34e:	7803      	ldrb	r3, [r0, #0]
   3f350:	2b01      	cmp	r3, #1
   3f352:	d1f0      	bne.n	3f336 <at_params_int_get+0x6>
	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   3f354:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   3f358:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   3f35c:	f142 0200 	adc.w	r2, r2, #0
   3f360:	2a00      	cmp	r2, #0
   3f362:	d1e8      	bne.n	3f336 <at_params_int_get+0x6>
	return 0;
   3f364:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   3f366:	6023      	str	r3, [r4, #0]
	return 0;
   3f368:	e7e7      	b.n	3f33a <at_params_int_get+0xa>

0003f36a <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   3f36a:	b510      	push	{r4, lr}
   3f36c:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3f36e:	b910      	cbnz	r0, 3f376 <at_params_int64_get+0xc>
		return -EINVAL;
   3f370:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   3f374:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3f376:	6843      	ldr	r3, [r0, #4]
   3f378:	2b00      	cmp	r3, #0
   3f37a:	d0f9      	beq.n	3f370 <at_params_int64_get+0x6>
   3f37c:	2a00      	cmp	r2, #0
   3f37e:	d0f7      	beq.n	3f370 <at_params_int64_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3f380:	f7e7 fc80 	bl	26c84 <at_params_get>
	if (param == NULL) {
   3f384:	2800      	cmp	r0, #0
   3f386:	d0f3      	beq.n	3f370 <at_params_int64_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3f388:	7803      	ldrb	r3, [r0, #0]
   3f38a:	2b01      	cmp	r3, #1
   3f38c:	d1f0      	bne.n	3f370 <at_params_int64_get+0x6>
	*value = param->value.int_val;
   3f38e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
	return 0;
   3f392:	2000      	movs	r0, #0
	*value = param->value.int_val;
   3f394:	e9c4 2300 	strd	r2, r3, [r4]
	return 0;
   3f398:	e7ec      	b.n	3f374 <at_params_int64_get+0xa>

0003f39a <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   3f39a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f39c:	4617      	mov	r7, r2
   3f39e:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   3f3a0:	b910      	cbnz	r0, 3f3a8 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   3f3a2:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   3f3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   3f3a8:	6843      	ldr	r3, [r0, #4]
   3f3aa:	2b00      	cmp	r3, #0
   3f3ac:	d0f9      	beq.n	3f3a2 <at_params_string_get+0x8>
   3f3ae:	2a00      	cmp	r2, #0
   3f3b0:	d0f7      	beq.n	3f3a2 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   3f3b2:	2c00      	cmp	r4, #0
   3f3b4:	d0f5      	beq.n	3f3a2 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   3f3b6:	f7e7 fc65 	bl	26c84 <at_params_get>
	if (param == NULL) {
   3f3ba:	4606      	mov	r6, r0
   3f3bc:	2800      	cmp	r0, #0
   3f3be:	d0f0      	beq.n	3f3a2 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   3f3c0:	7803      	ldrb	r3, [r0, #0]
   3f3c2:	2b02      	cmp	r3, #2
   3f3c4:	d1ed      	bne.n	3f3a2 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   3f3c6:	f7e7 fc77 	bl	26cb8 <at_param_size>
	if (*len < param_len) {
   3f3ca:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   3f3cc:	4605      	mov	r5, r0
	if (*len < param_len) {
   3f3ce:	4283      	cmp	r3, r0
   3f3d0:	d307      	bcc.n	3f3e2 <at_params_string_get+0x48>
   3f3d2:	4602      	mov	r2, r0
   3f3d4:	68b1      	ldr	r1, [r6, #8]
   3f3d6:	4638      	mov	r0, r7
   3f3d8:	f002 f80c 	bl	413f4 <memcpy>
	return 0;
   3f3dc:	2000      	movs	r0, #0
	*len = param_len;
   3f3de:	6025      	str	r5, [r4, #0]
	return 0;
   3f3e0:	e7e1      	b.n	3f3a6 <at_params_string_get+0xc>
		return -ENOMEM;
   3f3e2:	f06f 000b 	mvn.w	r0, #11
   3f3e6:	e7de      	b.n	3f3a6 <at_params_string_get+0xc>

0003f3e8 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   3f3e8:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3f3ea:	4605      	mov	r5, r0
   3f3ec:	b180      	cbz	r0, 3f410 <at_params_valid_count_get+0x28>
   3f3ee:	6843      	ldr	r3, [r0, #4]
   3f3f0:	b173      	cbz	r3, 3f410 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   3f3f2:	2100      	movs	r1, #0
   3f3f4:	f7e7 fc46 	bl	26c84 <at_params_get>
	size_t valid_i = 0;
   3f3f8:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   3f3fa:	b108      	cbz	r0, 3f400 <at_params_valid_count_get+0x18>
   3f3fc:	7803      	ldrb	r3, [r0, #0]
   3f3fe:	b90b      	cbnz	r3, 3f404 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   3f400:	4620      	mov	r0, r4
   3f402:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   3f404:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   3f406:	4621      	mov	r1, r4
   3f408:	4628      	mov	r0, r5
   3f40a:	f7e7 fc3b 	bl	26c84 <at_params_get>
   3f40e:	e7f4      	b.n	3f3fa <at_params_valid_count_get+0x12>
		return -EINVAL;
   3f410:	f06f 0415 	mvn.w	r4, #21
   3f414:	e7f4      	b.n	3f400 <at_params_valid_count_get+0x18>

0003f416 <lte_lc_init_and_connect_async>:
{
   3f416:	b510      	push	{r4, lr}
   3f418:	4604      	mov	r4, r0
	err = init_and_config();
   3f41a:	f7e8 f86b 	bl	274f4 <init_and_config>
	if (err) {
   3f41e:	b920      	cbnz	r0, 3f42a <lte_lc_init_and_connect_async+0x14>
	return lte_lc_connect_async(handler);
   3f420:	4620      	mov	r0, r4
}
   3f422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return lte_lc_connect_async(handler);
   3f426:	f7e8 b9bf 	b.w	277a8 <lte_lc_connect_async>
}
   3f42a:	f06f 000d 	mvn.w	r0, #13
   3f42e:	bd10      	pop	{r4, pc}

0003f430 <string_to_int>:
{
   3f430:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3f432:	460c      	mov	r4, r1
   3f434:	4605      	mov	r5, r0
   3f436:	4616      	mov	r6, r2
	errno = 0;
   3f438:	f7fe f9a1 	bl	3d77e <__errno>
   3f43c:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   3f43e:	4622      	mov	r2, r4
	errno = 0;
   3f440:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   3f442:	a901      	add	r1, sp, #4
   3f444:	4628      	mov	r0, r5
   3f446:	f7fb fa1b 	bl	3a880 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3f44a:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   3f44c:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3f44e:	42ab      	cmp	r3, r5
   3f450:	d103      	bne.n	3f45a <string_to_int+0x2a>
		return -ENODATA;
   3f452:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   3f456:	b002      	add	sp, #8
   3f458:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3f45a:	781b      	ldrb	r3, [r3, #0]
   3f45c:	2b00      	cmp	r3, #0
   3f45e:	d1f8      	bne.n	3f452 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   3f460:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   3f464:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3f466:	3303      	adds	r3, #3
   3f468:	d802      	bhi.n	3f470 <string_to_int+0x40>
	return 0;
   3f46a:	2000      	movs	r0, #0
	*output = temp;
   3f46c:	6034      	str	r4, [r6, #0]
	return 0;
   3f46e:	e7f2      	b.n	3f456 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   3f470:	f7fe f985 	bl	3d77e <__errno>
   3f474:	6803      	ldr	r3, [r0, #0]
   3f476:	2b22      	cmp	r3, #34	; 0x22
   3f478:	d1f7      	bne.n	3f46a <string_to_int+0x3a>
   3f47a:	e7ea      	b.n	3f452 <string_to_int+0x22>

0003f47c <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   3f47c:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   3f47e:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   3f480:	b087      	sub	sp, #28
   3f482:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   3f484:	ab01      	add	r3, sp, #4
   3f486:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   3f488:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   3f48a:	f7ff ff86 	bl	3f39a <at_params_string_get>
	if (err) {
   3f48e:	b968      	cbnz	r0, 3f4ac <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   3f490:	9b01      	ldr	r3, [sp, #4]
   3f492:	aa06      	add	r2, sp, #24
   3f494:	4413      	add	r3, r2
   3f496:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   3f49a:	4622      	mov	r2, r4
   3f49c:	4629      	mov	r1, r5
   3f49e:	a802      	add	r0, sp, #8
   3f4a0:	f7ff ffc6 	bl	3f430 <string_to_int>
		return -ENODATA;
   3f4a4:	2800      	cmp	r0, #0
   3f4a6:	bf18      	it	ne
   3f4a8:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   3f4ac:	b007      	add	sp, #28
   3f4ae:	bd30      	pop	{r4, r5, pc}

0003f4b0 <on_modem_init>:
	if (err) {
		LOG_ERR("Failed to unlock PLMN, err %d", err);
		return;
	}
#endif
}
   3f4b0:	4770      	bx	lr

0003f4b2 <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   3f4b2:	f7e8 b98f 	b.w	277d4 <lte_lc_deinit>

0003f4b6 <json_add_str>:
{
   3f4b6:	b513      	push	{r0, r1, r4, lr}
	if (parent == NULL || str == NULL || item == NULL) {
   3f4b8:	4604      	mov	r4, r0
{
   3f4ba:	9101      	str	r1, [sp, #4]
	if (parent == NULL || str == NULL || item == NULL) {
   3f4bc:	b160      	cbz	r0, 3f4d8 <json_add_str+0x22>
   3f4be:	b15a      	cbz	r2, 3f4d8 <json_add_str+0x22>
	json_str = cJSON_CreateString(item);
   3f4c0:	4610      	mov	r0, r2
   3f4c2:	f7f2 fde9 	bl	32098 <cJSON_CreateString>
	if (json_str == NULL) {
   3f4c6:	4602      	mov	r2, r0
   3f4c8:	b148      	cbz	r0, 3f4de <json_add_str+0x28>
	cJSON_AddItemToObject(parent, str, item);
   3f4ca:	4620      	mov	r0, r4
   3f4cc:	9901      	ldr	r1, [sp, #4]
   3f4ce:	f000 fb55 	bl	3fb7c <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   3f4d2:	2000      	movs	r0, #0
}
   3f4d4:	b002      	add	sp, #8
   3f4d6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3f4d8:	f06f 0015 	mvn.w	r0, #21
   3f4dc:	e7fa      	b.n	3f4d4 <json_add_str+0x1e>
		return -ENOMEM;
   3f4de:	f06f 000b 	mvn.w	r0, #11
   3f4e2:	e7f7      	b.n	3f4d4 <json_add_str+0x1e>

0003f4e4 <json_add_data>:
{
   3f4e4:	b570      	push	{r4, r5, r6, lr}
   3f4e6:	4604      	mov	r4, r0
	if (param == NULL || json_obj == NULL) {
   3f4e8:	460e      	mov	r6, r1
{
   3f4ea:	b09c      	sub	sp, #112	; 0x70
	if (param == NULL || json_obj == NULL) {
   3f4ec:	b921      	cbnz	r1, 3f4f8 <json_add_data+0x14>
		return -EINVAL;
   3f4ee:	f06f 0415 	mvn.w	r4, #21
}
   3f4f2:	4620      	mov	r0, r4
   3f4f4:	b01c      	add	sp, #112	; 0x70
   3f4f6:	bd70      	pop	{r4, r5, r6, pc}
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   3f4f8:	2264      	movs	r2, #100	; 0x64
   3f4fa:	2100      	movs	r1, #0
   3f4fc:	a803      	add	r0, sp, #12
   3f4fe:	f001 ff99 	bl	41434 <memset>
	ret = modem_info_name_get(param->type,
   3f502:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3f506:	a903      	add	r1, sp, #12
   3f508:	f7e8 fe6a 	bl	281e0 <modem_info_name_get>
	if (ret < 0) {
   3f50c:	1e05      	subs	r5, r0, #0
   3f50e:	dbee      	blt.n	3f4ee <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   3f510:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3f514:	f7e8 fe5a 	bl	281cc <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   3f518:	2802      	cmp	r0, #2
   3f51a:	d114      	bne.n	3f546 <json_add_data+0x62>
   3f51c:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   3f520:	2b03      	cmp	r3, #3
   3f522:	d010      	beq.n	3f546 <json_add_data+0x62>
		total_len += strlen(param->value_string);
   3f524:	1ca2      	adds	r2, r4, #2
   3f526:	4610      	mov	r0, r2
   3f528:	9201      	str	r2, [sp, #4]
   3f52a:	f7dd fe8a 	bl	1d242 <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   3f52e:	9a01      	ldr	r2, [sp, #4]
		total_len += strlen(param->value_string);
   3f530:	4604      	mov	r4, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   3f532:	a903      	add	r1, sp, #12
   3f534:	4630      	mov	r0, r6
   3f536:	f7ff ffbe 	bl	3f4b6 <json_add_str>
   3f53a:	4428      	add	r0, r5
	if (ret < 0) {
   3f53c:	ea34 0420 	bics.w	r4, r4, r0, asr #32
   3f540:	bf28      	it	cs
   3f542:	4604      	movcs	r4, r0
   3f544:	e7d5      	b.n	3f4f2 <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   3f546:	8820      	ldrh	r0, [r4, #0]
   3f548:	f7dd f8bc 	bl	1c6c4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   3f54c:	f7de ffd4 	bl	1e4f8 <cJSON_CreateNumber>
	if (json_num == NULL) {
   3f550:	4602      	mov	r2, r0
   3f552:	b138      	cbz	r0, 3f564 <json_add_data+0x80>
	cJSON_AddItemToObject(parent, str, item);
   3f554:	4630      	mov	r0, r6
   3f556:	a903      	add	r1, sp, #12
   3f558:	f000 fb10 	bl	3fb7c <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   3f55c:	2000      	movs	r0, #0
		total_len += sizeof(uint16_t);
   3f55e:	2402      	movs	r4, #2
		ret += json_add_num(json_obj, data_name, param->value);
   3f560:	4428      	add	r0, r5
   3f562:	e7eb      	b.n	3f53c <json_add_data+0x58>
		return -ENOMEM;
   3f564:	f06f 000b 	mvn.w	r0, #11
   3f568:	e7f9      	b.n	3f55e <json_add_data+0x7a>

0003f56a <sim_data_add>:
{
   3f56a:	b570      	push	{r4, r5, r6, lr}
   3f56c:	4606      	mov	r6, r0
	if (sim == NULL || json_obj == NULL) {
   3f56e:	460d      	mov	r5, r1
   3f570:	b179      	cbz	r1, 3f592 <sim_data_add+0x28>
	total_len = json_add_data(&sim->uicc, json_obj);
   3f572:	f7ff ffb7 	bl	3f4e4 <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   3f576:	4629      	mov	r1, r5
	total_len = json_add_data(&sim->uicc, json_obj);
   3f578:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   3f57a:	f106 0070 	add.w	r0, r6, #112	; 0x70
   3f57e:	f7ff ffb1 	bl	3f4e4 <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   3f582:	4629      	mov	r1, r5
	total_len += json_add_data(&sim->iccid, json_obj);
   3f584:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   3f586:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   3f58a:	f7ff ffab 	bl	3f4e4 <json_add_data>
   3f58e:	4420      	add	r0, r4
}
   3f590:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3f592:	f06f 0015 	mvn.w	r0, #21
   3f596:	e7fb      	b.n	3f590 <sim_data_add+0x26>

0003f598 <date_time_init>:

	return 0;
}

static int date_time_init(const struct device *unused)
{
   3f598:	b508      	push	{r3, lr}
	date_time_core_init();
   3f59a:	f7e9 fb47 	bl	28c2c <date_time_core_init>

	return 0;
}
   3f59e:	2000      	movs	r0, #0
   3f5a0:	bd08      	pop	{r3, pc}

0003f5a2 <date_time_is_valid>:
	return date_time_core_is_valid();
   3f5a2:	f7e9 bb79 	b.w	28c98 <date_time_core_is_valid>

0003f5a6 <date_time_register_handler>:
	date_time_core_register_handler(evt_handler);
   3f5a6:	f7e9 bb71 	b.w	28c8c <date_time_core_register_handler>

0003f5aa <location_service_get_certificate>:
	if (service == MULTICELL_SERVICE_NRF_CLOUD) {
   3f5aa:	2801      	cmp	r0, #1
   3f5ac:	d101      	bne.n	3f5b2 <location_service_get_certificate+0x8>
		return location_service_get_certificate_nrf_cloud();
   3f5ae:	f7e9 be6d 	b.w	2928c <location_service_get_certificate_nrf_cloud>
}
   3f5b2:	2000      	movs	r0, #0
   3f5b4:	4770      	bx	lr

0003f5b6 <location_core_config_log>:
}
   3f5b6:	4770      	bx	lr

0003f5b8 <method_gnss_agps_required>:
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST) {
   3f5b8:	6882      	ldr	r2, [r0, #8]
   3f5ba:	f002 0301 	and.w	r3, r2, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST) {
   3f5be:	0791      	lsls	r1, r2, #30
		type_count++;
   3f5c0:	bf48      	it	mi
   3f5c2:	3301      	addmi	r3, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_NEQUICK_REQUEST) {
   3f5c4:	0751      	lsls	r1, r2, #29
		type_count++;
   3f5c6:	bf48      	it	mi
   3f5c8:	3301      	addmi	r3, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   3f5ca:	0711      	lsls	r1, r2, #28
		type_count++;
   3f5cc:	bf48      	it	mi
   3f5ce:	3301      	addmi	r3, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   3f5d0:	06d1      	lsls	r1, r2, #27
		type_count++;
   3f5d2:	bf48      	it	mi
   3f5d4:	3301      	addmi	r3, #1
	if (request->data_flags &  NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST) {
   3f5d6:	f002 0220 	and.w	r2, r2, #32
   3f5da:	4313      	orrs	r3, r2
}
   3f5dc:	bf14      	ite	ne
   3f5de:	2001      	movne	r0, #1
   3f5e0:	2000      	moveq	r0, #0
   3f5e2:	4770      	bx	lr

0003f5e4 <json_add_num_cs>:
{
   3f5e4:	b508      	push	{r3, lr}
	if (!parent || !str) {
   3f5e6:	b138      	cbz	r0, 3f5f8 <json_add_num_cs+0x14>
	return cJSON_AddNumberToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   3f5e8:	f000 fb10 	bl	3fc0c <cJSON_AddNumberToObjectCS>
   3f5ec:	2800      	cmp	r0, #0
   3f5ee:	bf14      	ite	ne
   3f5f0:	2000      	movne	r0, #0
   3f5f2:	f06f 000b 	mvneq.w	r0, #11
}
   3f5f6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3f5f8:	f06f 0015 	mvn.w	r0, #21
   3f5fc:	e7fb      	b.n	3f5f6 <json_add_num_cs+0x12>

0003f5fe <json_add_obj_cs>:
{
   3f5fe:	b510      	push	{r4, lr}
	if (!parent || !str || !item) {
   3f600:	b148      	cbz	r0, 3f616 <json_add_obj_cs+0x18>
   3f602:	b141      	cbz	r1, 3f616 <json_add_obj_cs+0x18>
   3f604:	b13a      	cbz	r2, 3f616 <json_add_obj_cs+0x18>
	return cJSON_AddItemToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   3f606:	f000 fabc 	bl	3fb82 <cJSON_AddItemToObjectCS>
   3f60a:	2800      	cmp	r0, #0
   3f60c:	bf14      	ite	ne
   3f60e:	2000      	movne	r0, #0
   3f610:	f06f 000b 	mvneq.w	r0, #11
}
   3f614:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3f616:	f06f 0015 	mvn.w	r0, #21
   3f61a:	e7fb      	b.n	3f614 <json_add_obj_cs+0x16>

0003f61c <json_add_str_cs>:
{
   3f61c:	b508      	push	{r3, lr}
	if (!parent || !str || !item) {
   3f61e:	b140      	cbz	r0, 3f632 <json_add_str_cs+0x16>
   3f620:	b13a      	cbz	r2, 3f632 <json_add_str_cs+0x16>
	return cJSON_AddStringToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   3f622:	f000 fb1f 	bl	3fc64 <cJSON_AddStringToObjectCS>
   3f626:	2800      	cmp	r0, #0
   3f628:	bf14      	ite	ne
   3f62a:	2000      	movne	r0, #0
   3f62c:	f06f 000b 	mvneq.w	r0, #11
}
   3f630:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3f632:	f06f 0015 	mvn.w	r0, #21
   3f636:	e7fb      	b.n	3f630 <json_add_str_cs+0x14>

0003f638 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3f638:	b108      	cbz	r0, 3f63e <json_object_decode+0x6>
   3f63a:	f000 ba93 	b.w	3fb64 <cJSON_GetObjectItem>
}
   3f63e:	4770      	bx	lr

0003f640 <json_add_null_cs>:
{
   3f640:	b508      	push	{r3, lr}
	if (!parent || !str) {
   3f642:	b138      	cbz	r0, 3f654 <json_add_null_cs+0x14>
	return cJSON_AddNullToObjectCS(parent, str) ? 0 : -ENOMEM;
   3f644:	f000 facd 	bl	3fbe2 <cJSON_AddNullToObjectCS>
   3f648:	2800      	cmp	r0, #0
   3f64a:	bf14      	ite	ne
   3f64c:	2000      	movne	r0, #0
   3f64e:	f06f 000b 	mvneq.w	r0, #11
}
   3f652:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3f654:	f06f 0015 	mvn.w	r0, #21
   3f658:	e7fb      	b.n	3f652 <json_add_null_cs+0x12>

0003f65a <json_strdup>:
{
   3f65a:	b538      	push	{r3, r4, r5, lr}
	char *src = cJSON_GetStringValue(string_obj);
   3f65c:	f000 fb96 	bl	3fd8c <cJSON_GetStringValue>
	if (!src) {
   3f660:	4605      	mov	r5, r0
   3f662:	b160      	cbz	r0, 3f67e <json_strdup+0x24>
	dest = nrf_cloud_calloc(strlen(src) + 1, 1);
   3f664:	f7dd fded 	bl	1d242 <strlen>
   3f668:	2101      	movs	r1, #1
   3f66a:	4408      	add	r0, r1
   3f66c:	f001 fe3c 	bl	412e8 <k_calloc>
	if (dest) {
   3f670:	4604      	mov	r4, r0
   3f672:	b110      	cbz	r0, 3f67a <json_strdup+0x20>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   3f674:	4629      	mov	r1, r5
   3f676:	f002 f8a8 	bl	417ca <strcpy>
}
   3f67a:	4620      	mov	r0, r4
   3f67c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   3f67e:	4604      	mov	r4, r0
   3f680:	e7fb      	b.n	3f67a <json_strdup+0x20>

0003f682 <json_decode_and_alloc>:
{
   3f682:	b538      	push	{r3, r4, r5, lr}
   3f684:	4605      	mov	r5, r0
	if (!data || !cJSON_IsString(obj)) {
   3f686:	460c      	mov	r4, r1
   3f688:	b911      	cbnz	r1, 3f690 <json_decode_and_alloc+0xe>
		return -EINVAL;
   3f68a:	f06f 0015 	mvn.w	r0, #21
}
   3f68e:	bd38      	pop	{r3, r4, r5, pc}
	if (!data || !cJSON_IsString(obj)) {
   3f690:	f000 fb75 	bl	3fd7e <cJSON_IsString>
   3f694:	2800      	cmp	r0, #0
   3f696:	d0f8      	beq.n	3f68a <json_decode_and_alloc+0x8>
	data->ptr = json_strdup(obj);
   3f698:	4628      	mov	r0, r5
   3f69a:	f7ff ffde 	bl	3f65a <json_strdup>
   3f69e:	6060      	str	r0, [r4, #4]
	if (data->ptr == NULL) {
   3f6a0:	b120      	cbz	r0, 3f6ac <json_decode_and_alloc+0x2a>
	data->len = strlen(data->ptr);
   3f6a2:	f7dd fdce 	bl	1d242 <strlen>
   3f6a6:	6020      	str	r0, [r4, #0]
	return 0;
   3f6a8:	2000      	movs	r0, #0
   3f6aa:	e7f0      	b.n	3f68e <json_decode_and_alloc+0xc>
		return -ENOMEM;
   3f6ac:	f06f 000b 	mvn.w	r0, #11
   3f6b0:	e7ed      	b.n	3f68e <json_decode_and_alloc+0xc>

0003f6b2 <nrf_cloud_device_status_free>:
{
   3f6b2:	b510      	push	{r4, lr}
	if (status && status->ptr) {
   3f6b4:	4604      	mov	r4, r0
   3f6b6:	b130      	cbz	r0, 3f6c6 <nrf_cloud_device_status_free+0x14>
   3f6b8:	6840      	ldr	r0, [r0, #4]
   3f6ba:	b120      	cbz	r0, 3f6c6 <nrf_cloud_device_status_free+0x14>
		cJSON_free((void *)status->ptr);
   3f6bc:	f7f2 fd2a 	bl	32114 <cJSON_free>
		status->ptr = NULL;
   3f6c0:	2300      	movs	r3, #0
		status->len = 0;
   3f6c2:	e9c4 3300 	strd	r3, r3, [r4]
}
   3f6c6:	bd10      	pop	{r4, pc}

0003f6c8 <nrf_cloud_configured_client_id_length_get>:
}
   3f6c8:	2013      	movs	r0, #19
   3f6ca:	4770      	bx	lr

0003f6cc <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3f6cc:	e8d0 3fef 	ldaex	r3, [r0]
   3f6d0:	e8c0 1fe2 	stlex	r2, r1, [r0]
   3f6d4:	2a00      	cmp	r2, #0
   3f6d6:	d1f9      	bne.n	3f6cc <atomic_set.isra.0>
}
   3f6d8:	4770      	bx	lr

0003f6da <cc_disconnection_handler>:
}
   3f6da:	2000      	movs	r0, #0
   3f6dc:	4770      	bx	lr

0003f6de <disconnection_handler>:
{
   3f6de:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct nrf_cloud_evt evt = {
   3f6e0:	2218      	movs	r2, #24
   3f6e2:	2100      	movs	r1, #0
   3f6e4:	4668      	mov	r0, sp
   3f6e6:	f001 fea5 	bl	41434 <memset>
   3f6ea:	2309      	movs	r3, #9
   3f6ec:	f88d 3000 	strb.w	r3, [sp]
   3f6f0:	2301      	movs	r3, #1
   3f6f2:	9301      	str	r3, [sp, #4]
	if (nfsm_get_disconnect_requested()) {
   3f6f4:	f7eb ff74 	bl	2b5e0 <nfsm_get_disconnect_requested>
   3f6f8:	b108      	cbz	r0, 3f6fe <disconnection_handler+0x20>
		evt.status = NRF_CLOUD_DISCONNECT_USER_REQUEST;
   3f6fa:	2300      	movs	r3, #0
   3f6fc:	9301      	str	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   3f6fe:	4669      	mov	r1, sp
   3f700:	2001      	movs	r0, #1
   3f702:	f7eb ff31 	bl	2b568 <nfsm_set_current_state_and_notify>
}
   3f706:	2000      	movs	r0, #0
   3f708:	b007      	add	sp, #28
   3f70a:	f85d fb04 	ldr.w	pc, [sp], #4

0003f70e <dc_connection_handler>:
{
   3f70e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (nct_evt->status == 0) {
   3f710:	6801      	ldr	r1, [r0, #0]
   3f712:	b951      	cbnz	r1, 3f72a <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   3f714:	2218      	movs	r2, #24
   3f716:	4668      	mov	r0, sp
   3f718:	f001 fe8c 	bl	41434 <memset>
   3f71c:	2305      	movs	r3, #5
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3f71e:	4669      	mov	r1, sp
   3f720:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   3f722:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3f726:	f7eb ff1f 	bl	2b568 <nfsm_set_current_state_and_notify>
}
   3f72a:	2000      	movs	r0, #0
   3f72c:	b007      	add	sp, #28
   3f72e:	f85d fb04 	ldr.w	pc, [sp], #4

0003f732 <cc_tx_ack_in_state_requested_handler>:
{
   3f732:	b508      	push	{r3, lr}
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   3f734:	8883      	ldrh	r3, [r0, #4]
   3f736:	2bc8      	cmp	r3, #200	; 0xc8
   3f738:	d103      	bne.n	3f742 <cc_tx_ack_in_state_requested_handler+0x10>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   3f73a:	2100      	movs	r1, #0
   3f73c:	2005      	movs	r0, #5
   3f73e:	f7eb ff13 	bl	2b568 <nfsm_set_current_state_and_notify>
}
   3f742:	2000      	movs	r0, #0
   3f744:	bd08      	pop	{r3, pc}

0003f746 <dc_disconnection_handler>:
   3f746:	2000      	movs	r0, #0
   3f748:	4770      	bx	lr

0003f74a <dc_tx_ack_handler>:
   3f74a:	2000      	movs	r0, #0
   3f74c:	4770      	bx	lr

0003f74e <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   3f74e:	2101      	movs	r1, #1
   3f750:	f7ec bcae 	b.w	2c0b0 <dc_send>

0003f754 <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   3f754:	2100      	movs	r1, #0
   3f756:	f7ec bcab 	b.w	2c0b0 <dc_send>

0003f75a <npgps_get_time>:
	return npgps_get_shifted_time(gps_sec, gps_day, gps_time_of_day, 0);
   3f75a:	2300      	movs	r3, #0
   3f75c:	f7ef b9fe 	b.w	2eb5c <npgps_get_shifted_time>

0003f760 <nrf_cloud_cell_pos_request>:
{
   3f760:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3f762:	4604      	mov	r4, r0
   3f764:	460d      	mov	r5, r1
   3f766:	4616      	mov	r6, r2
	if (nfsm_get_current_state() != STATE_DC_CONNECTED) {
   3f768:	f7eb fef8 	bl	2b55c <nfsm_get_current_state>
   3f76c:	2809      	cmp	r0, #9
   3f76e:	d116      	bne.n	3f79e <nrf_cloud_cell_pos_request+0x3e>
	cJSON *cell_pos_req_obj = NULL;
   3f770:	2300      	movs	r3, #0
	err = nrf_cloud_cell_pos_request_json_get(cells_inf, request_loc, &cell_pos_req_obj);
   3f772:	4620      	mov	r0, r4
   3f774:	4629      	mov	r1, r5
   3f776:	aa01      	add	r2, sp, #4
	cJSON *cell_pos_req_obj = NULL;
   3f778:	9301      	str	r3, [sp, #4]
	err = nrf_cloud_cell_pos_request_json_get(cells_inf, request_loc, &cell_pos_req_obj);
   3f77a:	f7ef fbef 	bl	2ef5c <nrf_cloud_cell_pos_request_json_get>
	if (!err) {
   3f77e:	4604      	mov	r4, r0
   3f780:	b938      	cbnz	r0, 3f792 <nrf_cloud_cell_pos_request+0x32>
		if (request_loc) {
   3f782:	b115      	cbz	r5, 3f78a <nrf_cloud_cell_pos_request+0x2a>
			nfsm_set_cell_pos_response_cb(cb);
   3f784:	4630      	mov	r0, r6
   3f786:	f7ec fac7 	bl	2bd18 <nfsm_set_cell_pos_response_cb>
		err = json_send_to_cloud(cell_pos_req_obj);
   3f78a:	9801      	ldr	r0, [sp, #4]
   3f78c:	f7eb f8e6 	bl	2a95c <json_send_to_cloud>
   3f790:	4604      	mov	r4, r0
	cJSON_Delete(cell_pos_req_obj);
   3f792:	9801      	ldr	r0, [sp, #4]
   3f794:	f7f2 fbe2 	bl	31f5c <cJSON_Delete>
}
   3f798:	4620      	mov	r0, r4
   3f79a:	b002      	add	sp, #8
   3f79c:	bd70      	pop	{r4, r5, r6, pc}
		return -EACCES;
   3f79e:	f06f 040c 	mvn.w	r4, #12
   3f7a2:	e7f9      	b.n	3f798 <nrf_cloud_cell_pos_request+0x38>

0003f7a4 <reset_topic>:
{
   3f7a4:	b510      	push	{r4, lr}
   3f7a6:	4604      	mov	r4, r0
	if (topic->utf8) {
   3f7a8:	6800      	ldr	r0, [r0, #0]
   3f7aa:	b118      	cbz	r0, 3f7b4 <reset_topic+0x10>
		nrf_cloud_free((void *)topic->utf8);
   3f7ac:	f001 fd91 	bl	412d2 <k_free>
		topic->utf8 = NULL;
   3f7b0:	2300      	movs	r3, #0
   3f7b2:	6023      	str	r3, [r4, #0]
	topic->size = 0;
   3f7b4:	2300      	movs	r3, #0
   3f7b6:	6063      	str	r3, [r4, #4]
}
   3f7b8:	bd10      	pop	{r4, pc}

0003f7ba <get_number_from_array>:
{
   3f7ba:	b538      	push	{r3, r4, r5, lr}
   3f7bc:	4614      	mov	r4, r2
	cJSON *item = cJSON_GetArrayItem(array, index);
   3f7be:	f000 f9cb 	bl	3fb58 <cJSON_GetArrayItem>
   3f7c2:	4605      	mov	r5, r0
	if (!cJSON_IsNumber(item)) {
   3f7c4:	f000 fad4 	bl	3fd70 <cJSON_IsNumber>
   3f7c8:	b118      	cbz	r0, 3f7d2 <get_number_from_array+0x18>
	return 0;
   3f7ca:	2000      	movs	r0, #0
	*number_out = item->valueint;
   3f7cc:	696b      	ldr	r3, [r5, #20]
   3f7ce:	6023      	str	r3, [r4, #0]
}
   3f7d0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3f7d2:	f06f 0015 	mvn.w	r0, #21
   3f7d6:	e7fb      	b.n	3f7d0 <get_number_from_array+0x16>

0003f7d8 <error_evt_send>:
{
   3f7d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   3f7da:	2300      	movs	r3, #0
   3f7dc:	9301      	str	r3, [sp, #4]
   3f7de:	9303      	str	r3, [sp, #12]
   3f7e0:	2301      	movs	r3, #1
		.error = -error
   3f7e2:	4249      	negs	r1, r1
	return dl->callback(&evt);
   3f7e4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
	const struct download_client_evt evt = {
   3f7e8:	f88d 3004 	strb.w	r3, [sp, #4]
   3f7ec:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   3f7ee:	f8d0 3a50 	ldr.w	r3, [r0, #2640]	; 0xa50
   3f7f2:	a801      	add	r0, sp, #4
   3f7f4:	4798      	blx	r3
}
   3f7f6:	b005      	add	sp, #20
   3f7f8:	f85d fb04 	ldr.w	pc, [sp], #4

0003f7fc <request_send>:
	switch (dl->proto) {
   3f7fc:	f8d0 393c 	ldr.w	r3, [r0, #2364]	; 0x93c
   3f800:	2b06      	cmp	r3, #6
   3f802:	d002      	beq.n	3f80a <request_send+0xe>
   3f804:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   3f808:	d101      	bne.n	3f80e <request_send+0x12>
		return http_get_request_send(dl);
   3f80a:	f7f0 bf4d 	b.w	306a8 <http_get_request_send>
}
   3f80e:	2000      	movs	r0, #0
   3f810:	4770      	bx	lr

0003f812 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   3f812:	b128      	cbz	r0, 3f820 <download_client_file_size_get+0xe>
   3f814:	b121      	cbz	r1, 3f820 <download_client_file_size_get+0xe>
		return -EINVAL;
	}

	*size = client->file_size;
   3f816:	f8d0 391c 	ldr.w	r3, [r0, #2332]	; 0x91c

	return 0;
   3f81a:	2000      	movs	r0, #0
	*size = client->file_size;
   3f81c:	600b      	str	r3, [r1, #0]
	return 0;
   3f81e:	4770      	bx	lr
		return -EINVAL;
   3f820:	f06f 0015 	mvn.w	r0, #21
}
   3f824:	4770      	bx	lr

0003f826 <swallow>:
{
   3f826:	b570      	push	{r4, r5, r6, lr}
   3f828:	4605      	mov	r5, r0
	p = strstr(*str, swallow);
   3f82a:	6800      	ldr	r0, [r0, #0]
{
   3f82c:	460e      	mov	r6, r1
	p = strstr(*str, swallow);
   3f82e:	f002 f81b 	bl	41868 <strstr>
	if (!p) {
   3f832:	4604      	mov	r4, r0
   3f834:	b130      	cbz	r0, 3f844 <swallow+0x1e>
	*str = p + strlen(swallow);
   3f836:	4630      	mov	r0, r6
   3f838:	f7dd fd03 	bl	1d242 <strlen>
   3f83c:	4404      	add	r4, r0
	return 0;
   3f83e:	2000      	movs	r0, #0
	*str = p + strlen(swallow);
   3f840:	602c      	str	r4, [r5, #0]
}
   3f842:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   3f844:	2001      	movs	r0, #1
   3f846:	e7fc      	b.n	3f842 <swallow+0x1c>

0003f848 <fota_download_s0_active_get>:
}
   3f848:	f06f 0001 	mvn.w	r0, #1
   3f84c:	4770      	bx	lr

0003f84e <dfu_target_mcuboot_schedule_update>:

int dfu_target_mcuboot_schedule_update(int img_num)
{
	int err = 0;

	if (img_num == -1) {
   3f84e:	3001      	adds	r0, #1
   3f850:	2801      	cmp	r0, #1
   3f852:	d801      	bhi.n	3f858 <dfu_target_mcuboot_schedule_update+0xa>
		for (int i = 0; i < TARGET_IMAGE_COUNT && !err; i++) {
			err = dfu_target_mcuboot_schedule_one_img(i);
   3f854:	f7f1 bcac 	b.w	311b0 <dfu_target_mcuboot_schedule_one_img.constprop.0>
	} else {
		err = -ENOENT;
	}

	return err;
}
   3f858:	f06f 0001 	mvn.w	r0, #1
   3f85c:	4770      	bx	lr

0003f85e <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
   3f85e:	b538      	push	{r3, r4, r5, lr}
   3f860:	460c      	mov	r4, r1
   3f862:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
   3f864:	f7fd fe13 	bl	3d48e <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   3f868:	4621      	mov	r1, r4
   3f86a:	4425      	add	r5, r4
   3f86c:	42a9      	cmp	r1, r5
   3f86e:	d101      	bne.n	3f874 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
   3f870:	2001      	movs	r0, #1
}
   3f872:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
   3f874:	f811 3b01 	ldrb.w	r3, [r1], #1
   3f878:	4298      	cmp	r0, r3
   3f87a:	d0f7      	beq.n	3f86c <bootutil_buffer_is_erased.part.0+0xe>
            return false;
   3f87c:	2000      	movs	r0, #0
   3f87e:	e7f8      	b.n	3f872 <bootutil_buffer_is_erased.part.0+0x14>

0003f880 <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3f880:	6880      	ldr	r0, [r0, #8]
   3f882:	3818      	subs	r0, #24
   3f884:	f020 0007 	bic.w	r0, r0, #7
}
   3f888:	3810      	subs	r0, #16
   3f88a:	4770      	bx	lr

0003f88c <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
   3f88c:	b111      	cbz	r1, 3f894 <bootutil_buffer_is_erased+0x8>
   3f88e:	b10a      	cbz	r2, 3f894 <bootutil_buffer_is_erased+0x8>
   3f890:	f7ff bfe5 	b.w	3f85e <bootutil_buffer_is_erased.part.0>
}
   3f894:	2000      	movs	r0, #0
   3f896:	4770      	bx	lr

0003f898 <boot_read_flag>:
{
   3f898:	b538      	push	{r3, r4, r5, lr}
   3f89a:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3f89c:	2301      	movs	r3, #1
{
   3f89e:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3f8a0:	4622      	mov	r2, r4
{
   3f8a2:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3f8a4:	f7fd fd9b 	bl	3d3de <flash_area_read>
    if (rc < 0) {
   3f8a8:	2800      	cmp	r0, #0
   3f8aa:	db10      	blt.n	3f8ce <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   3f8ac:	2201      	movs	r2, #1
   3f8ae:	4621      	mov	r1, r4
   3f8b0:	4628      	mov	r0, r5
   3f8b2:	f7ff ffeb 	bl	3f88c <bootutil_buffer_is_erased>
   3f8b6:	b118      	cbz	r0, 3f8c0 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   3f8b8:	2303      	movs	r3, #3
    return 0;
   3f8ba:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
   3f8bc:	7023      	strb	r3, [r4, #0]
}
   3f8be:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
   3f8c0:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
   3f8c2:	2b01      	cmp	r3, #1
   3f8c4:	bf0c      	ite	eq
   3f8c6:	2301      	moveq	r3, #1
   3f8c8:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
   3f8ca:	7023      	strb	r3, [r4, #0]
   3f8cc:	e7f7      	b.n	3f8be <boot_read_flag+0x26>
        return BOOT_EFLASH;
   3f8ce:	2001      	movs	r0, #1
   3f8d0:	e7f5      	b.n	3f8be <boot_read_flag+0x26>

0003f8d2 <boot_write_trailer>:
{
   3f8d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3f8d6:	461d      	mov	r5, r3
   3f8d8:	4606      	mov	r6, r0
   3f8da:	460f      	mov	r7, r1
   3f8dc:	4690      	mov	r8, r2
    align = flash_area_align(fap);
   3f8de:	f7fd fdcd 	bl	3d47c <flash_area_align>
    align = ALIGN_UP(inlen, align);
   3f8e2:	1e6c      	subs	r4, r5, #1
   3f8e4:	4404      	add	r4, r0
   3f8e6:	4243      	negs	r3, r0
   3f8e8:	401c      	ands	r4, r3
    if (align > BOOT_MAX_ALIGN) {
   3f8ea:	2c08      	cmp	r4, #8
   3f8ec:	d81b      	bhi.n	3f926 <boot_write_trailer+0x54>
    erased_val = flash_area_erased_val(fap);
   3f8ee:	4630      	mov	r0, r6
   3f8f0:	f7fd fdcd 	bl	3d48e <flash_area_erased_val>
   3f8f4:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   3f8f6:	2308      	movs	r3, #8
   3f8f8:	462a      	mov	r2, r5
   3f8fa:	4641      	mov	r1, r8
   3f8fc:	4668      	mov	r0, sp
   3f8fe:	f001 fd86 	bl	4140e <__memcpy_chk>
__ssp_bos_icheck3(memset, void *, int)
   3f902:	4649      	mov	r1, r9
   3f904:	1b62      	subs	r2, r4, r5
   3f906:	eb0d 0005 	add.w	r0, sp, r5
   3f90a:	f001 fd93 	bl	41434 <memset>
    rc = flash_area_write(fap, off, buf, align);
   3f90e:	4623      	mov	r3, r4
   3f910:	466a      	mov	r2, sp
   3f912:	4639      	mov	r1, r7
   3f914:	4630      	mov	r0, r6
   3f916:	f7fd fd7e 	bl	3d416 <flash_area_write>
    if (rc != 0) {
   3f91a:	3800      	subs	r0, #0
   3f91c:	bf18      	it	ne
   3f91e:	2001      	movne	r0, #1
}
   3f920:	b003      	add	sp, #12
   3f922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   3f926:	f04f 30ff 	mov.w	r0, #4294967295
   3f92a:	e7f9      	b.n	3f920 <boot_write_trailer+0x4e>

0003f92c <boot_write_trailer_flag>:
{
   3f92c:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
   3f92e:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
   3f930:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   3f934:	aa01      	add	r2, sp, #4
   3f936:	f7ff ffcc 	bl	3f8d2 <boot_write_trailer>
}
   3f93a:	b003      	add	sp, #12
   3f93c:	f85d fb04 	ldr.w	pc, [sp], #4

0003f940 <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3f940:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   3f942:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3f944:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   3f946:	f021 0107 	bic.w	r1, r1, #7
   3f94a:	f7ff bfef 	b.w	3f92c <boot_write_trailer_flag>

0003f94e <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3f94e:	6882      	ldr	r2, [r0, #8]
   3f950:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   3f952:	f022 0207 	bic.w	r2, r2, #7
   3f956:	f7ff bf9f 	b.w	3f898 <boot_read_flag>

0003f95a <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   3f95a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap = NULL;
   3f95c:	2300      	movs	r3, #0
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   3f95e:	2003      	movs	r0, #3
   3f960:	a901      	add	r1, sp, #4
    const struct flash_area *fap = NULL;
   3f962:	9301      	str	r3, [sp, #4]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   3f964:	f7e2 f976 	bl	21c54 <flash_area_open>
    if (rc != 0) {
   3f968:	b9d8      	cbnz	r0, 3f9a2 <boot_set_confirmed_multi+0x48>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_primary_slot);
   3f96a:	9801      	ldr	r0, [sp, #4]
   3f96c:	a902      	add	r1, sp, #8
   3f96e:	f7f1 fd67 	bl	31440 <boot_read_swap_state>
    if (rc != 0) {
   3f972:	4604      	mov	r4, r0
   3f974:	b968      	cbnz	r0, 3f992 <boot_set_confirmed_multi+0x38>
        goto done;
    }

    switch (state_primary_slot.magic) {
   3f976:	f89d 3008 	ldrb.w	r3, [sp, #8]
   3f97a:	2b02      	cmp	r3, #2
   3f97c:	d00f      	beq.n	3f99e <boot_set_confirmed_multi+0x44>
   3f97e:	2b03      	cmp	r3, #3
   3f980:	d007      	beq.n	3f992 <boot_set_confirmed_multi+0x38>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   3f982:	f89d 300b 	ldrb.w	r3, [sp, #11]
   3f986:	2b03      	cmp	r3, #3
   3f988:	d103      	bne.n	3f992 <boot_set_confirmed_multi+0x38>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   3f98a:	9801      	ldr	r0, [sp, #4]
   3f98c:	f7ff ffd8 	bl	3f940 <boot_write_image_ok>
   3f990:	4604      	mov	r4, r0

done:
    flash_area_close(fap);
   3f992:	9801      	ldr	r0, [sp, #4]
   3f994:	f7fd fd22 	bl	3d3dc <flash_area_close>
    return rc;
}
   3f998:	4620      	mov	r0, r4
   3f99a:	b004      	add	sp, #16
   3f99c:	bd10      	pop	{r4, pc}
    switch (state_primary_slot.magic) {
   3f99e:	2404      	movs	r4, #4
   3f9a0:	e7f7      	b.n	3f992 <boot_set_confirmed_multi+0x38>
        return BOOT_EFLASH;
   3f9a2:	2401      	movs	r4, #1
   3f9a4:	e7f8      	b.n	3f998 <boot_set_confirmed_multi+0x3e>

0003f9a6 <boot_set_confirmed>:
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
    return boot_set_confirmed_multi(0);
   3f9a6:	2000      	movs	r0, #0
   3f9a8:	f7ff bfd7 	b.w	3f95a <boot_set_confirmed_multi>

0003f9ac <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   3f9ac:	2000      	movs	r0, #0
   3f9ae:	4770      	bx	lr

0003f9b0 <parse_hex4>:
    for (i = 0; i < 4; i++)
   3f9b0:	2200      	movs	r2, #0
{
   3f9b2:	b510      	push	{r4, lr}
   3f9b4:	4604      	mov	r4, r0
    unsigned int h = 0;
   3f9b6:	4610      	mov	r0, r2
        if ((input[i] >= '0') && (input[i] <= '9'))
   3f9b8:	5ca1      	ldrb	r1, [r4, r2]
   3f9ba:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3f9be:	2b09      	cmp	r3, #9
   3f9c0:	d80b      	bhi.n	3f9da <parse_hex4+0x2a>
            h += (unsigned int) input[i] - '0';
   3f9c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        if (i < 3)
   3f9c6:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   3f9c8:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
   3f9cc:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   3f9d0:	bf18      	it	ne
   3f9d2:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
   3f9d4:	2a04      	cmp	r2, #4
   3f9d6:	d1ef      	bne.n	3f9b8 <parse_hex4+0x8>
}
   3f9d8:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   3f9da:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   3f9de:	2b05      	cmp	r3, #5
   3f9e0:	d802      	bhi.n	3f9e8 <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
   3f9e2:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
   3f9e6:	e7ee      	b.n	3f9c6 <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   3f9e8:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   3f9ec:	2b05      	cmp	r3, #5
   3f9ee:	d802      	bhi.n	3f9f6 <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
   3f9f0:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
   3f9f4:	e7e7      	b.n	3f9c6 <parse_hex4+0x16>
            return 0;
   3f9f6:	2000      	movs	r0, #0
   3f9f8:	e7ee      	b.n	3f9d8 <parse_hex4+0x28>

0003f9fa <buffer_skip_whitespace>:
{
   3f9fa:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   3f9fc:	b128      	cbz	r0, 3fa0a <buffer_skip_whitespace+0x10>
   3f9fe:	6801      	ldr	r1, [r0, #0]
   3fa00:	b189      	cbz	r1, 3fa26 <buffer_skip_whitespace+0x2c>
    if (cannot_access_at_index(buffer, 0))
   3fa02:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
   3fa06:	429a      	cmp	r2, r3
   3fa08:	d302      	bcc.n	3fa10 <buffer_skip_whitespace+0x16>
}
   3fa0a:	bd10      	pop	{r4, pc}
       buffer->offset++;
   3fa0c:	3201      	adds	r2, #1
   3fa0e:	6082      	str	r2, [r0, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   3fa10:	6882      	ldr	r2, [r0, #8]
   3fa12:	4293      	cmp	r3, r2
   3fa14:	d903      	bls.n	3fa1e <buffer_skip_whitespace+0x24>
   3fa16:	5c8c      	ldrb	r4, [r1, r2]
   3fa18:	2c20      	cmp	r4, #32
   3fa1a:	d9f7      	bls.n	3fa0c <buffer_skip_whitespace+0x12>
   3fa1c:	e7f5      	b.n	3fa0a <buffer_skip_whitespace+0x10>
    if (buffer->offset == buffer->length)
   3fa1e:	d1f4      	bne.n	3fa0a <buffer_skip_whitespace+0x10>
        buffer->offset--;
   3fa20:	3b01      	subs	r3, #1
   3fa22:	6083      	str	r3, [r0, #8]
   3fa24:	e7f1      	b.n	3fa0a <buffer_skip_whitespace+0x10>
        return NULL;
   3fa26:	4608      	mov	r0, r1
   3fa28:	e7ef      	b.n	3fa0a <buffer_skip_whitespace+0x10>

0003fa2a <get_array_item>:
    if (array == NULL)
   3fa2a:	b110      	cbz	r0, 3fa32 <get_array_item+0x8>
    current_child = array->child;
   3fa2c:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   3fa2e:	b100      	cbz	r0, 3fa32 <get_array_item+0x8>
   3fa30:	b901      	cbnz	r1, 3fa34 <get_array_item+0xa>
}
   3fa32:	4770      	bx	lr
        current_child = current_child->next;
   3fa34:	6800      	ldr	r0, [r0, #0]
        index--;
   3fa36:	3901      	subs	r1, #1
        current_child = current_child->next;
   3fa38:	e7f9      	b.n	3fa2e <get_array_item+0x4>

0003fa3a <update_offset>:
{
   3fa3a:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   3fa3c:	4604      	mov	r4, r0
   3fa3e:	b140      	cbz	r0, 3fa52 <update_offset+0x18>
   3fa40:	6803      	ldr	r3, [r0, #0]
   3fa42:	b133      	cbz	r3, 3fa52 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   3fa44:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   3fa46:	4418      	add	r0, r3
   3fa48:	f7dd fbfb 	bl	1d242 <strlen>
   3fa4c:	68a3      	ldr	r3, [r4, #8]
   3fa4e:	4418      	add	r0, r3
   3fa50:	60a0      	str	r0, [r4, #8]
}
   3fa52:	bd10      	pop	{r4, pc}

0003fa54 <add_item_to_array>:
    if ((item == NULL) || (array == NULL) || (array == item))
   3fa54:	b181      	cbz	r1, 3fa78 <add_item_to_array+0x24>
   3fa56:	b138      	cbz	r0, 3fa68 <add_item_to_array+0x14>
   3fa58:	4281      	cmp	r1, r0
   3fa5a:	d00d      	beq.n	3fa78 <add_item_to_array+0x24>
    child = array->child;
   3fa5c:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   3fa5e:	b923      	cbnz	r3, 3fa6a <add_item_to_array+0x16>
        array->child = item;
   3fa60:	6081      	str	r1, [r0, #8]
        item->next = NULL;
   3fa62:	e9c1 3100 	strd	r3, r1, [r1]
   3fa66:	2001      	movs	r0, #1
}
   3fa68:	4770      	bx	lr
        if (child->prev)
   3fa6a:	685a      	ldr	r2, [r3, #4]
   3fa6c:	2a00      	cmp	r2, #0
   3fa6e:	d0fa      	beq.n	3fa66 <add_item_to_array+0x12>
    prev->next = item;
   3fa70:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   3fa72:	604a      	str	r2, [r1, #4]
            array->child->prev = item;
   3fa74:	6059      	str	r1, [r3, #4]
   3fa76:	e7f6      	b.n	3fa66 <add_item_to_array+0x12>
        return false;
   3fa78:	2000      	movs	r0, #0
   3fa7a:	4770      	bx	lr

0003fa7c <ensure>:
{
   3fa7c:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   3fa7e:	4604      	mov	r4, r0
   3fa80:	b1b8      	cbz	r0, 3fab2 <ensure+0x36>
   3fa82:	6805      	ldr	r5, [r0, #0]
   3fa84:	b165      	cbz	r5, 3faa0 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   3fa86:	6842      	ldr	r2, [r0, #4]
   3fa88:	b112      	cbz	r2, 3fa90 <ensure+0x14>
   3fa8a:	6883      	ldr	r3, [r0, #8]
   3fa8c:	429a      	cmp	r2, r3
   3fa8e:	d910      	bls.n	3fab2 <ensure+0x36>
    if (needed > INT_MAX)
   3fa90:	2900      	cmp	r1, #0
   3fa92:	db0e      	blt.n	3fab2 <ensure+0x36>
    needed += p->offset + 1;
   3fa94:	68a0      	ldr	r0, [r4, #8]
   3fa96:	4401      	add	r1, r0
   3fa98:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   3fa9a:	429a      	cmp	r2, r3
   3fa9c:	d302      	bcc.n	3faa4 <ensure+0x28>
        return p->buffer + p->offset;
   3fa9e:	4405      	add	r5, r0
}
   3faa0:	4628      	mov	r0, r5
   3faa2:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   3faa4:	6922      	ldr	r2, [r4, #16]
   3faa6:	b922      	cbnz	r2, 3fab2 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   3faa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   3faac:	d303      	bcc.n	3fab6 <ensure+0x3a>
        if (needed <= INT_MAX)
   3faae:	2b00      	cmp	r3, #0
   3fab0:	da0f      	bge.n	3fad2 <ensure+0x56>
        return NULL;
   3fab2:	2500      	movs	r5, #0
   3fab4:	e7f4      	b.n	3faa0 <ensure+0x24>
        newsize = needed + 1;
   3fab6:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   3fab8:	6a23      	ldr	r3, [r4, #32]
   3faba:	b16b      	cbz	r3, 3fad8 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   3fabc:	4628      	mov	r0, r5
   3fabe:	4631      	mov	r1, r6
   3fac0:	4798      	blx	r3
        if (newbuffer == NULL)
   3fac2:	4605      	mov	r5, r0
   3fac4:	b9b0      	cbnz	r0, 3faf4 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   3fac6:	69e3      	ldr	r3, [r4, #28]
   3fac8:	6820      	ldr	r0, [r4, #0]
   3faca:	4798      	blx	r3
            p->buffer = NULL;
   3facc:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   3fad0:	e7e6      	b.n	3faa0 <ensure+0x24>
            newsize = INT_MAX;
   3fad2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   3fad6:	e7ef      	b.n	3fab8 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   3fad8:	4630      	mov	r0, r6
   3fada:	69a3      	ldr	r3, [r4, #24]
   3fadc:	4798      	blx	r3
        if (!newbuffer)
   3fade:	4605      	mov	r5, r0
   3fae0:	2800      	cmp	r0, #0
   3fae2:	d0f0      	beq.n	3fac6 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   3fae4:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3fae6:	6821      	ldr	r1, [r4, #0]
   3fae8:	3201      	adds	r2, #1
   3faea:	f001 fc83 	bl	413f4 <memcpy>
        p->hooks.deallocate(p->buffer);
   3faee:	69e3      	ldr	r3, [r4, #28]
   3faf0:	6820      	ldr	r0, [r4, #0]
   3faf2:	4798      	blx	r3
    return newbuffer + p->offset;
   3faf4:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   3faf6:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   3fafa:	441d      	add	r5, r3
   3fafc:	e7d0      	b.n	3faa0 <ensure+0x24>

0003fafe <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   3fafe:	4603      	mov	r3, r0
   3fb00:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   3fb02:	2028      	movs	r0, #40	; 0x28
   3fb04:	4798      	blx	r3
    if (node)
   3fb06:	4604      	mov	r4, r0
   3fb08:	b118      	cbz	r0, 3fb12 <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   3fb0a:	2228      	movs	r2, #40	; 0x28
   3fb0c:	2100      	movs	r1, #0
   3fb0e:	f001 fc91 	bl	41434 <memset>
}
   3fb12:	4620      	mov	r0, r4
   3fb14:	bd10      	pop	{r4, pc}

0003fb16 <cJSON_ParseWithOpts>:
{
   3fb16:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fb18:	460d      	mov	r5, r1
    if (NULL == value)
   3fb1a:	4604      	mov	r4, r0
{
   3fb1c:	9201      	str	r2, [sp, #4]
    if (NULL == value)
   3fb1e:	b150      	cbz	r0, 3fb36 <cJSON_ParseWithOpts+0x20>
    buffer_length = strlen(value) + sizeof("");
   3fb20:	f7dd fb8f 	bl	1d242 <strlen>
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   3fb24:	462a      	mov	r2, r5
   3fb26:	1c41      	adds	r1, r0, #1
   3fb28:	4620      	mov	r0, r4
   3fb2a:	9b01      	ldr	r3, [sp, #4]
}
   3fb2c:	b003      	add	sp, #12
   3fb2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   3fb32:	f7f2 ba37 	b.w	31fa4 <cJSON_ParseWithLengthOpts>
}
   3fb36:	b003      	add	sp, #12
   3fb38:	bd30      	pop	{r4, r5, pc}

0003fb3a <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   3fb3a:	2200      	movs	r2, #0
   3fb3c:	4611      	mov	r1, r2
   3fb3e:	f7ff bfea 	b.w	3fb16 <cJSON_ParseWithOpts>

0003fb42 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   3fb42:	2100      	movs	r1, #0
   3fb44:	f7f2 b99a 	b.w	31e7c <print.constprop.0>

0003fb48 <cJSON_GetArraySize>:
    if (array == NULL)
   3fb48:	b110      	cbz	r0, 3fb50 <cJSON_GetArraySize+0x8>
    child = array->child;
   3fb4a:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   3fb4c:	2000      	movs	r0, #0
    while(child != NULL)
   3fb4e:	b903      	cbnz	r3, 3fb52 <cJSON_GetArraySize+0xa>
}
   3fb50:	4770      	bx	lr
        child = child->next;
   3fb52:	681b      	ldr	r3, [r3, #0]
        size++;
   3fb54:	3001      	adds	r0, #1
        child = child->next;
   3fb56:	e7fa      	b.n	3fb4e <cJSON_GetArraySize+0x6>

0003fb58 <cJSON_GetArrayItem>:
    if (index < 0)
   3fb58:	2900      	cmp	r1, #0
   3fb5a:	db01      	blt.n	3fb60 <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   3fb5c:	f7ff bf65 	b.w	3fa2a <get_array_item>
}
   3fb60:	2000      	movs	r0, #0
   3fb62:	4770      	bx	lr

0003fb64 <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   3fb64:	2200      	movs	r2, #0
   3fb66:	f7f1 be8d 	b.w	31884 <get_object_item>

0003fb6a <cJSON_HasObjectItem>:
{
   3fb6a:	b508      	push	{r3, lr}
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
   3fb6c:	f7ff fffa 	bl	3fb64 <cJSON_GetObjectItem>
}
   3fb70:	3800      	subs	r0, #0
   3fb72:	bf18      	it	ne
   3fb74:	2001      	movne	r0, #1
   3fb76:	bd08      	pop	{r3, pc}

0003fb78 <cJSON_AddItemToArray>:
    return add_item_to_array(array, item);
   3fb78:	f7ff bf6c 	b.w	3fa54 <add_item_to_array>

0003fb7c <cJSON_AddItemToObject>:
    return add_item_to_object(object, string, item, &global_hooks, false);
   3fb7c:	2300      	movs	r3, #0
   3fb7e:	f7f1 bf7f 	b.w	31a80 <add_item_to_object.constprop.0>

0003fb82 <cJSON_AddItemToObjectCS>:
    return add_item_to_object(object, string, item, &global_hooks, true);
   3fb82:	2301      	movs	r3, #1
   3fb84:	f7f1 bf7c 	b.w	31a80 <add_item_to_object.constprop.0>

0003fb88 <cJSON_DetachItemViaPointer>:
{
   3fb88:	b510      	push	{r4, lr}
    if ((parent == NULL) || (item == NULL))
   3fb8a:	b190      	cbz	r0, 3fbb2 <cJSON_DetachItemViaPointer+0x2a>
   3fb8c:	b179      	cbz	r1, 3fbae <cJSON_DetachItemViaPointer+0x26>
    if (item != parent->child)
   3fb8e:	6883      	ldr	r3, [r0, #8]
   3fb90:	428b      	cmp	r3, r1
        item->prev->next = item->next;
   3fb92:	bf1c      	itt	ne
   3fb94:	e9d1 4200 	ldrdne	r4, r2, [r1]
   3fb98:	6014      	strne	r4, [r2, #0]
    if (item->next != NULL)
   3fb9a:	680a      	ldr	r2, [r1, #0]
   3fb9c:	b15a      	cbz	r2, 3fbb6 <cJSON_DetachItemViaPointer+0x2e>
        item->next->prev = item->prev;
   3fb9e:	684c      	ldr	r4, [r1, #4]
    if (item == parent->child)
   3fba0:	428b      	cmp	r3, r1
        item->next->prev = item->prev;
   3fba2:	6054      	str	r4, [r2, #4]
    if (item == parent->child)
   3fba4:	d100      	bne.n	3fba8 <cJSON_DetachItemViaPointer+0x20>
        parent->child = item->next;
   3fba6:	6082      	str	r2, [r0, #8]
    item->prev = NULL;
   3fba8:	2300      	movs	r3, #0
    item->next = NULL;
   3fbaa:	e9c1 3300 	strd	r3, r3, [r1]
}
   3fbae:	4608      	mov	r0, r1
   3fbb0:	bd10      	pop	{r4, pc}
        return NULL;
   3fbb2:	4601      	mov	r1, r0
   3fbb4:	e7fb      	b.n	3fbae <cJSON_DetachItemViaPointer+0x26>
    if (item == parent->child)
   3fbb6:	428b      	cmp	r3, r1
   3fbb8:	d0f5      	beq.n	3fba6 <cJSON_DetachItemViaPointer+0x1e>
        parent->child->prev = item->prev;
   3fbba:	684a      	ldr	r2, [r1, #4]
   3fbbc:	605a      	str	r2, [r3, #4]
   3fbbe:	e7f3      	b.n	3fba8 <cJSON_DetachItemViaPointer+0x20>

0003fbc0 <cJSON_DetachItemFromObject>:
{
   3fbc0:	b510      	push	{r4, lr}
   3fbc2:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   3fbc4:	f7ff ffce 	bl	3fb64 <cJSON_GetObjectItem>
   3fbc8:	4601      	mov	r1, r0
    return cJSON_DetachItemViaPointer(object, to_detach);
   3fbca:	4620      	mov	r0, r4
}
   3fbcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   3fbd0:	f7ff bfda 	b.w	3fb88 <cJSON_DetachItemViaPointer>

0003fbd4 <cJSON_DeleteItemFromObject>:
{
   3fbd4:	b508      	push	{r3, lr}
    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   3fbd6:	f7ff fff3 	bl	3fbc0 <cJSON_DetachItemFromObject>
}
   3fbda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   3fbde:	f7f2 b9bd 	b.w	31f5c <cJSON_Delete>

0003fbe2 <cJSON_AddNullToObjectCS>:
{
   3fbe2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fbe4:	4605      	mov	r5, r0
   3fbe6:	9101      	str	r1, [sp, #4]
    cJSON *null = cJSON_CreateNull();
   3fbe8:	f7f2 fa4a 	bl	32080 <cJSON_CreateNull>
    if (add_item_to_object(object, name, null, &global_hooks, true))
   3fbec:	2301      	movs	r3, #1
   3fbee:	4602      	mov	r2, r0
    cJSON *null = cJSON_CreateNull();
   3fbf0:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, null, &global_hooks, true))
   3fbf2:	9901      	ldr	r1, [sp, #4]
   3fbf4:	4628      	mov	r0, r5
   3fbf6:	f7f1 ff43 	bl	31a80 <add_item_to_object.constprop.0>
   3fbfa:	4605      	mov	r5, r0
   3fbfc:	b918      	cbnz	r0, 3fc06 <cJSON_AddNullToObjectCS+0x24>
    cJSON_Delete(null);
   3fbfe:	4620      	mov	r0, r4
   3fc00:	f7f2 f9ac 	bl	31f5c <cJSON_Delete>
    return NULL;
   3fc04:	462c      	mov	r4, r5
}
   3fc06:	4620      	mov	r0, r4
   3fc08:	b003      	add	sp, #12
   3fc0a:	bd30      	pop	{r4, r5, pc}

0003fc0c <cJSON_AddNumberToObjectCS>:
{
   3fc0c:	b570      	push	{r4, r5, r6, lr}
   3fc0e:	4605      	mov	r5, r0
   3fc10:	460e      	mov	r6, r1
    cJSON *number_item = cJSON_CreateNumber(number);
   3fc12:	4610      	mov	r0, r2
   3fc14:	4619      	mov	r1, r3
   3fc16:	f7de fc6f 	bl	1e4f8 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   3fc1a:	2301      	movs	r3, #1
   3fc1c:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   3fc1e:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   3fc20:	4631      	mov	r1, r6
   3fc22:	4628      	mov	r0, r5
   3fc24:	f7f1 ff2c 	bl	31a80 <add_item_to_object.constprop.0>
   3fc28:	4605      	mov	r5, r0
   3fc2a:	b918      	cbnz	r0, 3fc34 <cJSON_AddNumberToObjectCS+0x28>
    cJSON_Delete(number_item);
   3fc2c:	4620      	mov	r0, r4
   3fc2e:	f7f2 f995 	bl	31f5c <cJSON_Delete>
    return NULL;
   3fc32:	462c      	mov	r4, r5
}
   3fc34:	4620      	mov	r0, r4
   3fc36:	bd70      	pop	{r4, r5, r6, pc}

0003fc38 <cJSON_AddNumberToObject>:
{
   3fc38:	b570      	push	{r4, r5, r6, lr}
   3fc3a:	4605      	mov	r5, r0
   3fc3c:	460e      	mov	r6, r1
    cJSON *number_item = cJSON_CreateNumber(number);
   3fc3e:	4610      	mov	r0, r2
   3fc40:	4619      	mov	r1, r3
   3fc42:	f7de fc59 	bl	1e4f8 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   3fc46:	2300      	movs	r3, #0
   3fc48:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   3fc4a:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   3fc4c:	4631      	mov	r1, r6
   3fc4e:	4628      	mov	r0, r5
   3fc50:	f7f1 ff16 	bl	31a80 <add_item_to_object.constprop.0>
   3fc54:	4605      	mov	r5, r0
   3fc56:	b918      	cbnz	r0, 3fc60 <cJSON_AddNumberToObject+0x28>
    cJSON_Delete(number_item);
   3fc58:	4620      	mov	r0, r4
   3fc5a:	f7f2 f97f 	bl	31f5c <cJSON_Delete>
    return NULL;
   3fc5e:	462c      	mov	r4, r5
}
   3fc60:	4620      	mov	r0, r4
   3fc62:	bd70      	pop	{r4, r5, r6, pc}

0003fc64 <cJSON_AddStringToObjectCS>:
{
   3fc64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fc66:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   3fc68:	4610      	mov	r0, r2
{
   3fc6a:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   3fc6c:	f7f2 fa14 	bl	32098 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, true))
   3fc70:	2301      	movs	r3, #1
   3fc72:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   3fc74:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, true))
   3fc76:	9901      	ldr	r1, [sp, #4]
   3fc78:	4628      	mov	r0, r5
   3fc7a:	f7f1 ff01 	bl	31a80 <add_item_to_object.constprop.0>
   3fc7e:	4605      	mov	r5, r0
   3fc80:	b918      	cbnz	r0, 3fc8a <cJSON_AddStringToObjectCS+0x26>
    cJSON_Delete(string_item);
   3fc82:	4620      	mov	r0, r4
   3fc84:	f7f2 f96a 	bl	31f5c <cJSON_Delete>
    return NULL;
   3fc88:	462c      	mov	r4, r5
}
   3fc8a:	4620      	mov	r0, r4
   3fc8c:	b003      	add	sp, #12
   3fc8e:	bd30      	pop	{r4, r5, pc}

0003fc90 <cJSON_AddStringToObject>:
{
   3fc90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fc92:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   3fc94:	4610      	mov	r0, r2
{
   3fc96:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   3fc98:	f7f2 f9fe 	bl	32098 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   3fc9c:	2300      	movs	r3, #0
   3fc9e:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   3fca0:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   3fca2:	9901      	ldr	r1, [sp, #4]
   3fca4:	4628      	mov	r0, r5
   3fca6:	f7f1 feeb 	bl	31a80 <add_item_to_object.constprop.0>
   3fcaa:	4605      	mov	r5, r0
   3fcac:	b918      	cbnz	r0, 3fcb6 <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
   3fcae:	4620      	mov	r0, r4
   3fcb0:	f7f2 f954 	bl	31f5c <cJSON_Delete>
    return NULL;
   3fcb4:	462c      	mov	r4, r5
}
   3fcb6:	4620      	mov	r0, r4
   3fcb8:	b003      	add	sp, #12
   3fcba:	bd30      	pop	{r4, r5, pc}

0003fcbc <cJSON_AddArrayToObjectCS>:
{
   3fcbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fcbe:	4605      	mov	r5, r0
   3fcc0:	9101      	str	r1, [sp, #4]
    cJSON *array = cJSON_CreateArray();
   3fcc2:	f7f2 fa01 	bl	320c8 <cJSON_CreateArray>
    if (add_item_to_object(object, name, array, &global_hooks, true))
   3fcc6:	2301      	movs	r3, #1
   3fcc8:	4602      	mov	r2, r0
    cJSON *array = cJSON_CreateArray();
   3fcca:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, array, &global_hooks, true))
   3fccc:	9901      	ldr	r1, [sp, #4]
   3fcce:	4628      	mov	r0, r5
   3fcd0:	f7f1 fed6 	bl	31a80 <add_item_to_object.constprop.0>
   3fcd4:	4605      	mov	r5, r0
   3fcd6:	b918      	cbnz	r0, 3fce0 <cJSON_AddArrayToObjectCS+0x24>
    cJSON_Delete(array);
   3fcd8:	4620      	mov	r0, r4
   3fcda:	f7f2 f93f 	bl	31f5c <cJSON_Delete>
    return NULL;
   3fcde:	462c      	mov	r4, r5
}
   3fce0:	4620      	mov	r0, r4
   3fce2:	b003      	add	sp, #12
   3fce4:	bd30      	pop	{r4, r5, pc}

0003fce6 <cJSON_AddArrayToObject>:
{
   3fce6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fce8:	4605      	mov	r5, r0
   3fcea:	9101      	str	r1, [sp, #4]
    cJSON *array = cJSON_CreateArray();
   3fcec:	f7f2 f9ec 	bl	320c8 <cJSON_CreateArray>
    if (add_item_to_object(object, name, array, &global_hooks, false))
   3fcf0:	2300      	movs	r3, #0
   3fcf2:	4602      	mov	r2, r0
    cJSON *array = cJSON_CreateArray();
   3fcf4:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, array, &global_hooks, false))
   3fcf6:	9901      	ldr	r1, [sp, #4]
   3fcf8:	4628      	mov	r0, r5
   3fcfa:	f7f1 fec1 	bl	31a80 <add_item_to_object.constprop.0>
   3fcfe:	4605      	mov	r5, r0
   3fd00:	b918      	cbnz	r0, 3fd0a <cJSON_AddArrayToObject+0x24>
    cJSON_Delete(array);
   3fd02:	4620      	mov	r0, r4
   3fd04:	f7f2 f92a 	bl	31f5c <cJSON_Delete>
    return NULL;
   3fd08:	462c      	mov	r4, r5
}
   3fd0a:	4620      	mov	r0, r4
   3fd0c:	b003      	add	sp, #12
   3fd0e:	bd30      	pop	{r4, r5, pc}

0003fd10 <cJSON_AddObjectToObjectCS>:
{
   3fd10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fd12:	4605      	mov	r5, r0
   3fd14:	9101      	str	r1, [sp, #4]
    cJSON *object_item = cJSON_CreateObject();
   3fd16:	f7f2 f9e3 	bl	320e0 <cJSON_CreateObject>
    if (add_item_to_object(object, name, object_item, &global_hooks, true))
   3fd1a:	2301      	movs	r3, #1
   3fd1c:	4602      	mov	r2, r0
    cJSON *object_item = cJSON_CreateObject();
   3fd1e:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, object_item, &global_hooks, true))
   3fd20:	9901      	ldr	r1, [sp, #4]
   3fd22:	4628      	mov	r0, r5
   3fd24:	f7f1 feac 	bl	31a80 <add_item_to_object.constprop.0>
   3fd28:	4605      	mov	r5, r0
   3fd2a:	b918      	cbnz	r0, 3fd34 <cJSON_AddObjectToObjectCS+0x24>
    cJSON_Delete(object_item);
   3fd2c:	4620      	mov	r0, r4
   3fd2e:	f7f2 f915 	bl	31f5c <cJSON_Delete>
    return NULL;
   3fd32:	462c      	mov	r4, r5
}
   3fd34:	4620      	mov	r0, r4
   3fd36:	b003      	add	sp, #12
   3fd38:	bd30      	pop	{r4, r5, pc}

0003fd3a <cJSON_AddObjectToObject>:
{
   3fd3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fd3c:	4605      	mov	r5, r0
   3fd3e:	9101      	str	r1, [sp, #4]
    cJSON *object_item = cJSON_CreateObject();
   3fd40:	f7f2 f9ce 	bl	320e0 <cJSON_CreateObject>
    if (add_item_to_object(object, name, object_item, &global_hooks, false))
   3fd44:	2300      	movs	r3, #0
   3fd46:	4602      	mov	r2, r0
    cJSON *object_item = cJSON_CreateObject();
   3fd48:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, object_item, &global_hooks, false))
   3fd4a:	9901      	ldr	r1, [sp, #4]
   3fd4c:	4628      	mov	r0, r5
   3fd4e:	f7f1 fe97 	bl	31a80 <add_item_to_object.constprop.0>
   3fd52:	4605      	mov	r5, r0
   3fd54:	b918      	cbnz	r0, 3fd5e <cJSON_AddObjectToObject+0x24>
    cJSON_Delete(object_item);
   3fd56:	4620      	mov	r0, r4
   3fd58:	f7f2 f900 	bl	31f5c <cJSON_Delete>
    return NULL;
   3fd5c:	462c      	mov	r4, r5
}
   3fd5e:	4620      	mov	r0, r4
   3fd60:	b003      	add	sp, #12
   3fd62:	bd30      	pop	{r4, r5, pc}

0003fd64 <cJSON_IsNull>:
    if (item == NULL)
   3fd64:	b118      	cbz	r0, 3fd6e <cJSON_IsNull+0xa>
    return (item->type & 0xFF) == cJSON_NULL;
   3fd66:	7b00      	ldrb	r0, [r0, #12]
   3fd68:	1f03      	subs	r3, r0, #4
   3fd6a:	4258      	negs	r0, r3
   3fd6c:	4158      	adcs	r0, r3
}
   3fd6e:	4770      	bx	lr

0003fd70 <cJSON_IsNumber>:
    if (item == NULL)
   3fd70:	b120      	cbz	r0, 3fd7c <cJSON_IsNumber+0xc>
    return (item->type & 0xFF) == cJSON_Number;
   3fd72:	7b00      	ldrb	r0, [r0, #12]
   3fd74:	f1a0 0308 	sub.w	r3, r0, #8
   3fd78:	4258      	negs	r0, r3
   3fd7a:	4158      	adcs	r0, r3
}
   3fd7c:	4770      	bx	lr

0003fd7e <cJSON_IsString>:
    if (item == NULL)
   3fd7e:	b120      	cbz	r0, 3fd8a <cJSON_IsString+0xc>
    return (item->type & 0xFF) == cJSON_String;
   3fd80:	7b00      	ldrb	r0, [r0, #12]
   3fd82:	f1a0 0310 	sub.w	r3, r0, #16
   3fd86:	4258      	negs	r0, r3
   3fd88:	4158      	adcs	r0, r3
}
   3fd8a:	4770      	bx	lr

0003fd8c <cJSON_GetStringValue>:
{
   3fd8c:	b508      	push	{r3, lr}
   3fd8e:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) 
   3fd90:	f7ff fff5 	bl	3fd7e <cJSON_IsString>
   3fd94:	b100      	cbz	r0, 3fd98 <cJSON_GetStringValue+0xc>
    return item->valuestring;
   3fd96:	6910      	ldr	r0, [r2, #16]
}
   3fd98:	bd08      	pop	{r3, pc}

0003fd9a <cJSON_IsArray>:
    if (item == NULL)
   3fd9a:	b120      	cbz	r0, 3fda6 <cJSON_IsArray+0xc>
    return (item->type & 0xFF) == cJSON_Array;
   3fd9c:	7b00      	ldrb	r0, [r0, #12]
   3fd9e:	f1a0 0320 	sub.w	r3, r0, #32
   3fda2:	4258      	negs	r0, r3
   3fda4:	4158      	adcs	r0, r3
}
   3fda6:	4770      	bx	lr

0003fda8 <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   3fda8:	f001 ba9a 	b.w	412e0 <k_malloc>

0003fdac <free_fn_hook>:
   3fdac:	f001 ba91 	b.w	412d2 <k_free>

0003fdb0 <cJSON_FreeString>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   3fdb0:	f001 ba8f 	b.w	412d2 <k_free>

0003fdb4 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   3fdb4:	4700      	bx	r0

0003fdb6 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   3fdb6:	f001 b9af 	b.w	41118 <z_impl_k_busy_wait>

0003fdba <nrf_gpio_pin_present_check>:
    switch (port)
   3fdba:	0943      	lsrs	r3, r0, #5
   3fdbc:	bf0c      	ite	eq
   3fdbe:	f04f 33ff 	moveq.w	r3, #4294967295
   3fdc2:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   3fdc4:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3fdc8:	fa23 f000 	lsr.w	r0, r3, r0
}
   3fdcc:	f000 0001 	and.w	r0, r0, #1
   3fdd0:	4770      	bx	lr

0003fdd2 <pin_is_task_output>:
{
   3fdd2:	b508      	push	{r3, lr}
   3fdd4:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3fdd6:	f7f2 fb81 	bl	324dc <pin_is_output>
   3fdda:	b110      	cbz	r0, 3fde2 <pin_is_task_output+0x10>
   3fddc:	4610      	mov	r0, r2
   3fdde:	f7f2 fb67 	bl	324b0 <pin_in_use_by_te>
}
   3fde2:	f000 0001 	and.w	r0, r0, #1
   3fde6:	bd08      	pop	{r3, pc}

0003fde8 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   3fde8:	0080      	lsls	r0, r0, #2
}
   3fdea:	f500 7080 	add.w	r0, r0, #256	; 0x100
   3fdee:	4770      	bx	lr

0003fdf0 <nrf_gpio_reconfigure>:
{
   3fdf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3fdf4:	4690      	mov	r8, r2
   3fdf6:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   3fdfa:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fdfc:	a801      	add	r0, sp, #4
{
   3fdfe:	460e      	mov	r6, r1
   3fe00:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fe02:	f7f2 fbef 	bl	325e4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3fe06:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3fe08:	f1b8 0f00 	cmp.w	r8, #0
   3fe0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   3fe10:	bf14      	ite	ne
   3fe12:	2302      	movne	r3, #2
   3fe14:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3fe16:	2e00      	cmp	r6, #0
   3fe18:	bf18      	it	ne
   3fe1a:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3fe1e:	2d00      	cmp	r5, #0
   3fe20:	bf14      	ite	ne
   3fe22:	210c      	movne	r1, #12
   3fe24:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3fe26:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3fe28:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3fe2c:	bf14      	ite	ne
   3fe2e:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   3fe32:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3fe34:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3fe36:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3fe3a:	bf14      	ite	ne
   3fe3c:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   3fe40:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3fe42:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3fe46:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   3fe48:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3fe4c:	b106      	cbz	r6, 3fe50 <nrf_gpio_reconfigure+0x60>
   3fe4e:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   3fe50:	f1b8 0f00 	cmp.w	r8, #0
   3fe54:	d003      	beq.n	3fe5e <nrf_gpio_reconfigure+0x6e>
   3fe56:	f898 8000 	ldrb.w	r8, [r8]
   3fe5a:	ea4f 0848 	mov.w	r8, r8, lsl #1
   3fe5e:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   3fe60:	b10d      	cbz	r5, 3fe66 <nrf_gpio_reconfigure+0x76>
   3fe62:	782d      	ldrb	r5, [r5, #0]
   3fe64:	00ad      	lsls	r5, r5, #2
   3fe66:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   3fe6a:	b10c      	cbz	r4, 3fe70 <nrf_gpio_reconfigure+0x80>
   3fe6c:	7822      	ldrb	r2, [r4, #0]
   3fe6e:	0214      	lsls	r4, r2, #8
   3fe70:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   3fe72:	b10f      	cbz	r7, 3fe78 <nrf_gpio_reconfigure+0x88>
   3fe74:	783f      	ldrb	r7, [r7, #0]
   3fe76:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3fe78:	432c      	orrs	r4, r5
   3fe7a:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   3fe7c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   3fe80:	b002      	add	sp, #8
   3fe82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003fe86 <nrf_gpio_cfg_sense_set>:
{
   3fe86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   3fe88:	f10d 030f 	add.w	r3, sp, #15
   3fe8c:	9301      	str	r3, [sp, #4]
   3fe8e:	2300      	movs	r3, #0
{
   3fe90:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   3fe94:	461a      	mov	r2, r3
   3fe96:	4619      	mov	r1, r3
   3fe98:	9300      	str	r3, [sp, #0]
   3fe9a:	f7ff ffa9 	bl	3fdf0 <nrf_gpio_reconfigure>
}
   3fe9e:	b005      	add	sp, #20
   3fea0:	f85d fb04 	ldr.w	pc, [sp], #4

0003fea4 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   3fea4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   3fea8:	4770      	bx	lr

0003feaa <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   3feaa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   3feae:	4770      	bx	lr

0003feb0 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   3feb0:	f44f 7080 	mov.w	r0, #256	; 0x100
   3feb4:	4770      	bx	lr

0003feb6 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   3feb6:	7b0b      	ldrb	r3, [r1, #12]
   3feb8:	2b03      	cmp	r3, #3
   3feba:	d82a      	bhi.n	3ff12 <xfer_completeness_check+0x5c>
   3febc:	e8df f003 	tbb	[pc, r3]
   3fec0:	021a2622 	.word	0x021a2622
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   3fec4:	688b      	ldr	r3, [r1, #8]
   3fec6:	035a      	lsls	r2, r3, #13
   3fec8:	d504      	bpl.n	3fed4 <xfer_completeness_check+0x1e>
    return p_reg->TXD.AMOUNT;
   3feca:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
   3fece:	690a      	ldr	r2, [r1, #16]
   3fed0:	429a      	cmp	r2, r3
   3fed2:	d107      	bne.n	3fee4 <xfer_completeness_check+0x2e>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   3fed4:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   3fed6:	035b      	lsls	r3, r3, #13
   3fed8:	d41b      	bmi.n	3ff12 <xfer_completeness_check+0x5c>
   3feda:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   3fede:	694a      	ldr	r2, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   3fee0:	429a      	cmp	r2, r3
   3fee2:	d016      	beq.n	3ff12 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3fee4:	2300      	movs	r3, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   3fee6:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3fee8:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   3feec:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
}
   3fef0:	4618      	mov	r0, r3
   3fef2:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   3fef4:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   3fef8:	690a      	ldr	r2, [r1, #16]
   3fefa:	429a      	cmp	r2, r3
   3fefc:	d1f2      	bne.n	3fee4 <xfer_completeness_check+0x2e>
    return p_reg->RXD.AMOUNT;
   3fefe:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   3ff02:	e7ec      	b.n	3fede <xfer_completeness_check+0x28>
    return p_reg->TXD.AMOUNT;
   3ff04:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   3ff08:	690a      	ldr	r2, [r1, #16]
   3ff0a:	e7e9      	b.n	3fee0 <xfer_completeness_check+0x2a>
    return p_reg->RXD.AMOUNT;
   3ff0c:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   3ff10:	e7fa      	b.n	3ff08 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   3ff12:	2001      	movs	r0, #1
}
   3ff14:	4770      	bx	lr

0003ff16 <nrf_gpio_pin_set>:
{
   3ff16:	b507      	push	{r0, r1, r2, lr}
   3ff18:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3ff1a:	a801      	add	r0, sp, #4
   3ff1c:	f7f3 fc14 	bl	33748 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3ff20:	2301      	movs	r3, #1
   3ff22:	9a01      	ldr	r2, [sp, #4]
   3ff24:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   3ff26:	6083      	str	r3, [r0, #8]
}
   3ff28:	b003      	add	sp, #12
   3ff2a:	f85d fb04 	ldr.w	pc, [sp], #4

0003ff2e <rpc_handle_ctrl_message>:
   3ff2e:	2902      	cmp	r1, #2
   3ff30:	b510      	push	{r4, lr}
   3ff32:	4604      	mov	r4, r0
   3ff34:	d005      	beq.n	3ff42 <rpc_handle_ctrl_message+0x14>
   3ff36:	2904      	cmp	r1, #4
   3ff38:	d001      	beq.n	3ff3e <rpc_handle_ctrl_message+0x10>
   3ff3a:	2901      	cmp	r1, #1
   3ff3c:	d107      	bne.n	3ff4e <rpc_handle_ctrl_message+0x20>
   3ff3e:	2000      	movs	r0, #0
   3ff40:	bd10      	pop	{r4, pc}
   3ff42:	6880      	ldr	r0, [r0, #8]
   3ff44:	2800      	cmp	r0, #0
   3ff46:	d0fa      	beq.n	3ff3e <rpc_handle_ctrl_message+0x10>
   3ff48:	f000 f833 	bl	3ffb2 <rpc_transport_local_data_free>
   3ff4c:	e7f7      	b.n	3ff3e <rpc_handle_ctrl_message+0x10>
   3ff4e:	6880      	ldr	r0, [r0, #8]
   3ff50:	b108      	cbz	r0, 3ff56 <rpc_handle_ctrl_message+0x28>
   3ff52:	f000 f82e 	bl	3ffb2 <rpc_transport_local_data_free>
   3ff56:	4620      	mov	r0, r4
   3ff58:	f000 f827 	bl	3ffaa <rpc_transport_msg_free>
   3ff5c:	e7ef      	b.n	3ff3e <rpc_handle_ctrl_message+0x10>

0003ff5e <rpc_message_send>:
   3ff5e:	6843      	ldr	r3, [r0, #4]
   3ff60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3ff64:	f043 0302 	orr.w	r3, r3, #2
   3ff68:	6043      	str	r3, [r0, #4]
   3ff6a:	f000 b826 	b.w	3ffba <rpc_transport_data_msg_send>

0003ff6e <rpc_message_alloc>:
   3ff6e:	b570      	push	{r4, r5, r6, lr}
   3ff70:	4606      	mov	r6, r0
   3ff72:	b130      	cbz	r0, 3ff82 <rpc_message_alloc+0x14>
   3ff74:	f000 f81b 	bl	3ffae <rpc_transport_data_alloc>
   3ff78:	4605      	mov	r5, r0
   3ff7a:	b918      	cbnz	r0, 3ff84 <rpc_message_alloc+0x16>
   3ff7c:	2400      	movs	r4, #0
   3ff7e:	4620      	mov	r0, r4
   3ff80:	bd70      	pop	{r4, r5, r6, pc}
   3ff82:	4605      	mov	r5, r0
   3ff84:	f000 f80f 	bl	3ffa6 <rpc_transport_data_msg_alloc>
   3ff88:	4604      	mov	r4, r0
   3ff8a:	b110      	cbz	r0, 3ff92 <rpc_message_alloc+0x24>
   3ff8c:	60c6      	str	r6, [r0, #12]
   3ff8e:	6085      	str	r5, [r0, #8]
   3ff90:	e7f5      	b.n	3ff7e <rpc_message_alloc+0x10>
   3ff92:	2d00      	cmp	r5, #0
   3ff94:	d0f2      	beq.n	3ff7c <rpc_message_alloc+0xe>
   3ff96:	4628      	mov	r0, r5
   3ff98:	f000 f80b 	bl	3ffb2 <rpc_transport_local_data_free>
   3ff9c:	e7ef      	b.n	3ff7e <rpc_message_alloc+0x10>

0003ff9e <rpc_message_free>:
   3ff9e:	f000 b804 	b.w	3ffaa <rpc_transport_msg_free>

0003ffa2 <rpc_message_data_free>:
   3ffa2:	f000 b808 	b.w	3ffb6 <rpc_transport_peer_data_free>

0003ffa6 <rpc_transport_data_msg_alloc>:
   3ffa6:	f7f3 bf59 	b.w	33e5c <rpc_transport_ipc_data_msg_alloc>

0003ffaa <rpc_transport_msg_free>:
   3ffaa:	f7f3 bfa9 	b.w	33f00 <rpc_transport_ipc_msg_free>

0003ffae <rpc_transport_data_alloc>:
   3ffae:	f7f3 bf89 	b.w	33ec4 <rpc_transport_ipc_data_alloc>

0003ffb2 <rpc_transport_local_data_free>:
   3ffb2:	f000 b808 	b.w	3ffc6 <rpc_transport_ipc_local_data_free>

0003ffb6 <rpc_transport_peer_data_free>:
   3ffb6:	f7f3 bfc9 	b.w	33f4c <rpc_transport_ipc_peer_data_free>

0003ffba <rpc_transport_data_msg_send>:
   3ffba:	f7f3 bf13 	b.w	33de4 <rpc_transport_ipc_data_msg_send>

0003ffbe <rpc_transport_rx_data_suspend>:
   3ffbe:	f000 b809 	b.w	3ffd4 <rpc_transport_ipc_rx_data_suspend>

0003ffc2 <rpc_transport_rx_data_resume>:
   3ffc2:	f000 b80a 	b.w	3ffda <rpc_transport_ipc_rx_data_resume>

0003ffc6 <rpc_transport_ipc_local_data_free>:
   3ffc6:	b508      	push	{r3, lr}
   3ffc8:	f7e5 fd6a 	bl	25aa0 <nrf_modem_os_shm_tx_free>
   3ffcc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3ffd0:	f7e5 bd0c 	b.w	259ec <nrf_modem_os_application_irq_set>

0003ffd4 <rpc_transport_ipc_rx_data_suspend>:
   3ffd4:	2004      	movs	r0, #4
   3ffd6:	f7f2 beed 	b.w	32db4 <nrfx_ipc_receive_event_disable>

0003ffda <rpc_transport_ipc_rx_data_resume>:
   3ffda:	2004      	movs	r0, #4
   3ffdc:	f7f2 becc 	b.w	32d78 <nrfx_ipc_receive_event_enable>

0003ffe0 <rpc_client_request_alloc>:
   3ffe0:	b508      	push	{r3, lr}
   3ffe2:	f7ff ffc4 	bl	3ff6e <rpc_message_alloc>
   3ffe6:	b100      	cbz	r0, 3ffea <rpc_client_request_alloc+0xa>
   3ffe8:	3008      	adds	r0, #8
   3ffea:	bd08      	pop	{r3, pc}

0003ffec <rpc_client_request_send>:
   3ffec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   3fff0:	4610      	mov	r0, r2
   3fff2:	f840 1d08 	str.w	r1, [r0, #-8]!
   3fff6:	f7ff bfb2 	b.w	3ff5e <rpc_message_send>

0003fffa <rpc_client_message_free>:
   3fffa:	3808      	subs	r0, #8
   3fffc:	f7ff bfcf 	b.w	3ff9e <rpc_message_free>

00040000 <rpc_client_data_free>:
   40000:	f7ff bfcf 	b.w	3ffa2 <rpc_message_data_free>

00040004 <rpc_gnss_serialize_utc>:
   40004:	b1c0      	cbz	r0, 40038 <rpc_gnss_serialize_utc+0x34>
   40006:	b1b9      	cbz	r1, 40038 <rpc_gnss_serialize_utc+0x34>
   40008:	2301      	movs	r3, #1
   4000a:	700b      	strb	r3, [r1, #0]
   4000c:	2300      	movs	r3, #0
   4000e:	704b      	strb	r3, [r1, #1]
   40010:	6843      	ldr	r3, [r0, #4]
   40012:	f8c1 3006 	str.w	r3, [r1, #6]
   40016:	6803      	ldr	r3, [r0, #0]
   40018:	f8c1 3002 	str.w	r3, [r1, #2]
   4001c:	7a83      	ldrb	r3, [r0, #10]
   4001e:	730b      	strb	r3, [r1, #12]
   40020:	7b43      	ldrb	r3, [r0, #13]
   40022:	73cb      	strb	r3, [r1, #15]
   40024:	7b03      	ldrb	r3, [r0, #12]
   40026:	738b      	strb	r3, [r1, #14]
   40028:	7a03      	ldrb	r3, [r0, #8]
   4002a:	728b      	strb	r3, [r1, #10]
   4002c:	7ac3      	ldrb	r3, [r0, #11]
   4002e:	734b      	strb	r3, [r1, #13]
   40030:	7a43      	ldrb	r3, [r0, #9]
   40032:	2010      	movs	r0, #16
   40034:	72cb      	strb	r3, [r1, #11]
   40036:	4770      	bx	lr
   40038:	f04f 30ff 	mov.w	r0, #4294967295
   4003c:	4770      	bx	lr

0004003e <rpc_gnss_serialize_ephe>:
   4003e:	2800      	cmp	r0, #0
   40040:	d044      	beq.n	400cc <rpc_gnss_serialize_ephe+0x8e>
   40042:	2900      	cmp	r1, #0
   40044:	d042      	beq.n	400cc <rpc_gnss_serialize_ephe+0x8e>
   40046:	2302      	movs	r3, #2
   40048:	700b      	strb	r3, [r1, #0]
   4004a:	2300      	movs	r3, #0
   4004c:	704b      	strb	r3, [r1, #1]
   4004e:	68c3      	ldr	r3, [r0, #12]
   40050:	f8c1 300b 	str.w	r3, [r1, #11]
   40054:	8903      	ldrh	r3, [r0, #8]
   40056:	f8a1 3009 	strh.w	r3, [r1, #9]
   4005a:	7983      	ldrb	r3, [r0, #6]
   4005c:	720b      	strb	r3, [r1, #8]
   4005e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   40062:	878b      	strh	r3, [r1, #60]	; 0x3c
   40064:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   40066:	86cb      	strh	r3, [r1, #54]	; 0x36
   40068:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   4006c:	874b      	strh	r3, [r1, #58]	; 0x3a
   4006e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   40070:	868b      	strh	r3, [r1, #52]	; 0x34
   40072:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   40076:	87cb      	strh	r3, [r1, #62]	; 0x3e
   40078:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   4007c:	870b      	strh	r3, [r1, #56]	; 0x38
   4007e:	8b83      	ldrh	r3, [r0, #28]
   40080:	830b      	strh	r3, [r1, #24]
   40082:	6a83      	ldr	r3, [r0, #40]	; 0x28
   40084:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   40088:	7c83      	ldrb	r3, [r0, #18]
   4008a:	744b      	strb	r3, [r1, #17]
   4008c:	7843      	ldrb	r3, [r0, #1]
   4008e:	70cb      	strb	r3, [r1, #3]
   40090:	6b43      	ldr	r3, [r0, #52]	; 0x34
   40092:	62cb      	str	r3, [r1, #44]	; 0x2c
   40094:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   40096:	84cb      	strh	r3, [r1, #38]	; 0x26
   40098:	8843      	ldrh	r3, [r0, #2]
   4009a:	808b      	strh	r3, [r1, #4]
   4009c:	6a03      	ldr	r3, [r0, #32]
   4009e:	f8c1 301a 	str.w	r3, [r1, #26]
   400a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   400a4:	630b      	str	r3, [r1, #48]	; 0x30
   400a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   400a8:	f8c1 301e 	str.w	r3, [r1, #30]
   400ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
   400ae:	628b      	str	r3, [r1, #40]	; 0x28
   400b0:	7803      	ldrb	r3, [r0, #0]
   400b2:	708b      	strb	r3, [r1, #2]
   400b4:	7c03      	ldrb	r3, [r0, #16]
   400b6:	73cb      	strb	r3, [r1, #15]
   400b8:	8883      	ldrh	r3, [r0, #4]
   400ba:	80cb      	strh	r3, [r1, #6]
   400bc:	8a83      	ldrh	r3, [r0, #20]
   400be:	824b      	strh	r3, [r1, #18]
   400c0:	7c43      	ldrb	r3, [r0, #17]
   400c2:	740b      	strb	r3, [r1, #16]
   400c4:	6983      	ldr	r3, [r0, #24]
   400c6:	2040      	movs	r0, #64	; 0x40
   400c8:	614b      	str	r3, [r1, #20]
   400ca:	4770      	bx	lr
   400cc:	f04f 30ff 	mov.w	r0, #4294967295
   400d0:	4770      	bx	lr

000400d2 <rpc_gnss_serialize_alm>:
   400d2:	b340      	cbz	r0, 40126 <rpc_gnss_serialize_alm+0x54>
   400d4:	b339      	cbz	r1, 40126 <rpc_gnss_serialize_alm+0x54>
   400d6:	2303      	movs	r3, #3
   400d8:	700b      	strb	r3, [r1, #0]
   400da:	2300      	movs	r3, #0
   400dc:	704b      	strb	r3, [r1, #1]
   400de:	8b83      	ldrh	r3, [r0, #28]
   400e0:	f8a1 301d 	strh.w	r3, [r1, #29]
   400e4:	8bc3      	ldrh	r3, [r0, #30]
   400e6:	f8a1 301f 	strh.w	r3, [r1, #31]
   400ea:	88c3      	ldrh	r3, [r0, #6]
   400ec:	810b      	strh	r3, [r1, #8]
   400ee:	8883      	ldrh	r3, [r0, #4]
   400f0:	80cb      	strh	r3, [r1, #6]
   400f2:	78c3      	ldrb	r3, [r0, #3]
   400f4:	714b      	strb	r3, [r1, #5]
   400f6:	6983      	ldr	r3, [r0, #24]
   400f8:	f8c1 3019 	str.w	r3, [r1, #25]
   400fc:	6903      	ldr	r3, [r0, #16]
   400fe:	f8c1 3011 	str.w	r3, [r1, #17]
   40102:	8903      	ldrh	r3, [r0, #8]
   40104:	814b      	strh	r3, [r1, #10]
   40106:	68c3      	ldr	r3, [r0, #12]
   40108:	f8c1 300d 	str.w	r3, [r1, #13]
   4010c:	7a83      	ldrb	r3, [r0, #10]
   4010e:	730b      	strb	r3, [r1, #12]
   40110:	7803      	ldrb	r3, [r0, #0]
   40112:	708b      	strb	r3, [r1, #2]
   40114:	7883      	ldrb	r3, [r0, #2]
   40116:	710b      	strb	r3, [r1, #4]
   40118:	6943      	ldr	r3, [r0, #20]
   4011a:	f8c1 3015 	str.w	r3, [r1, #21]
   4011e:	7843      	ldrb	r3, [r0, #1]
   40120:	2021      	movs	r0, #33	; 0x21
   40122:	70cb      	strb	r3, [r1, #3]
   40124:	4770      	bx	lr
   40126:	f04f 30ff 	mov.w	r0, #4294967295
   4012a:	4770      	bx	lr

0004012c <rpc_gnss_serialize_klob>:
   4012c:	b1b0      	cbz	r0, 4015c <rpc_gnss_serialize_klob+0x30>
   4012e:	b1a9      	cbz	r1, 4015c <rpc_gnss_serialize_klob+0x30>
   40130:	2304      	movs	r3, #4
   40132:	700b      	strb	r3, [r1, #0]
   40134:	2300      	movs	r3, #0
   40136:	704b      	strb	r3, [r1, #1]
   40138:	7803      	ldrb	r3, [r0, #0]
   4013a:	708b      	strb	r3, [r1, #2]
   4013c:	7843      	ldrb	r3, [r0, #1]
   4013e:	70cb      	strb	r3, [r1, #3]
   40140:	7883      	ldrb	r3, [r0, #2]
   40142:	710b      	strb	r3, [r1, #4]
   40144:	78c3      	ldrb	r3, [r0, #3]
   40146:	714b      	strb	r3, [r1, #5]
   40148:	7903      	ldrb	r3, [r0, #4]
   4014a:	718b      	strb	r3, [r1, #6]
   4014c:	7943      	ldrb	r3, [r0, #5]
   4014e:	71cb      	strb	r3, [r1, #7]
   40150:	7983      	ldrb	r3, [r0, #6]
   40152:	720b      	strb	r3, [r1, #8]
   40154:	79c3      	ldrb	r3, [r0, #7]
   40156:	200a      	movs	r0, #10
   40158:	724b      	strb	r3, [r1, #9]
   4015a:	4770      	bx	lr
   4015c:	f04f 30ff 	mov.w	r0, #4294967295
   40160:	4770      	bx	lr

00040162 <rpc_gnss_serialize_nequick>:
   40162:	b180      	cbz	r0, 40186 <rpc_gnss_serialize_nequick+0x24>
   40164:	b179      	cbz	r1, 40186 <rpc_gnss_serialize_nequick+0x24>
   40166:	2305      	movs	r3, #5
   40168:	700b      	strb	r3, [r1, #0]
   4016a:	2300      	movs	r3, #0
   4016c:	704b      	strb	r3, [r1, #1]
   4016e:	8803      	ldrh	r3, [r0, #0]
   40170:	804b      	strh	r3, [r1, #2]
   40172:	8843      	ldrh	r3, [r0, #2]
   40174:	808b      	strh	r3, [r1, #4]
   40176:	8883      	ldrh	r3, [r0, #4]
   40178:	80cb      	strh	r3, [r1, #6]
   4017a:	7983      	ldrb	r3, [r0, #6]
   4017c:	720b      	strb	r3, [r1, #8]
   4017e:	79c3      	ldrb	r3, [r0, #7]
   40180:	200a      	movs	r0, #10
   40182:	724b      	strb	r3, [r1, #9]
   40184:	4770      	bx	lr
   40186:	f04f 30ff 	mov.w	r0, #4294967295
   4018a:	4770      	bx	lr

0004018c <rpc_gnss_serialize_time_and_sv_tow>:
   4018c:	b570      	push	{r4, r5, r6, lr}
   4018e:	b1e8      	cbz	r0, 401cc <rpc_gnss_serialize_time_and_sv_tow+0x40>
   40190:	b1e1      	cbz	r1, 401cc <rpc_gnss_serialize_time_and_sv_tow+0x40>
   40192:	2206      	movs	r2, #6
   40194:	2300      	movs	r3, #0
   40196:	700a      	strb	r2, [r1, #0]
   40198:	8802      	ldrh	r2, [r0, #0]
   4019a:	704b      	strb	r3, [r1, #1]
   4019c:	804a      	strh	r2, [r1, #2]
   4019e:	68c2      	ldr	r2, [r0, #12]
   401a0:	f101 0410 	add.w	r4, r1, #16
   401a4:	f8c1 200a 	str.w	r2, [r1, #10]
   401a8:	8902      	ldrh	r2, [r0, #8]
   401aa:	810a      	strh	r2, [r1, #8]
   401ac:	6842      	ldr	r2, [r0, #4]
   401ae:	604a      	str	r2, [r1, #4]
   401b0:	8a06      	ldrh	r6, [r0, #16]
   401b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   401b6:	188d      	adds	r5, r1, r2
   401b8:	81ee      	strh	r6, [r5, #14]
   401ba:	7c85      	ldrb	r5, [r0, #18]
   401bc:	3301      	adds	r3, #1
   401be:	2b20      	cmp	r3, #32
   401c0:	54a5      	strb	r5, [r4, r2]
   401c2:	f100 0004 	add.w	r0, r0, #4
   401c6:	d1f3      	bne.n	401b0 <rpc_gnss_serialize_time_and_sv_tow+0x24>
   401c8:	206e      	movs	r0, #110	; 0x6e
   401ca:	bd70      	pop	{r4, r5, r6, pc}
   401cc:	f04f 30ff 	mov.w	r0, #4294967295
   401d0:	e7fb      	b.n	401ca <rpc_gnss_serialize_time_and_sv_tow+0x3e>

000401d2 <rpc_gnss_serialize_location>:
   401d2:	b1c0      	cbz	r0, 40206 <rpc_gnss_serialize_location+0x34>
   401d4:	b1b9      	cbz	r1, 40206 <rpc_gnss_serialize_location+0x34>
   401d6:	2307      	movs	r3, #7
   401d8:	700b      	strb	r3, [r1, #0]
   401da:	2300      	movs	r3, #0
   401dc:	704b      	strb	r3, [r1, #1]
   401de:	8903      	ldrh	r3, [r0, #8]
   401e0:	814b      	strh	r3, [r1, #10]
   401e2:	7b83      	ldrb	r3, [r0, #14]
   401e4:	740b      	strb	r3, [r1, #16]
   401e6:	6803      	ldr	r3, [r0, #0]
   401e8:	f8c1 3002 	str.w	r3, [r1, #2]
   401ec:	6843      	ldr	r3, [r0, #4]
   401ee:	f8c1 3006 	str.w	r3, [r1, #6]
   401f2:	7b03      	ldrb	r3, [r0, #12]
   401f4:	738b      	strb	r3, [r1, #14]
   401f6:	7b43      	ldrb	r3, [r0, #13]
   401f8:	73cb      	strb	r3, [r1, #15]
   401fa:	7a83      	ldrb	r3, [r0, #10]
   401fc:	730b      	strb	r3, [r1, #12]
   401fe:	7ac3      	ldrb	r3, [r0, #11]
   40200:	2011      	movs	r0, #17
   40202:	734b      	strb	r3, [r1, #13]
   40204:	4770      	bx	lr
   40206:	f04f 30ff 	mov.w	r0, #4294967295
   4020a:	4770      	bx	lr

0004020c <rpc_gnss_serialize_integrity>:
   4020c:	b148      	cbz	r0, 40222 <rpc_gnss_serialize_integrity+0x16>
   4020e:	b141      	cbz	r1, 40222 <rpc_gnss_serialize_integrity+0x16>
   40210:	2308      	movs	r3, #8
   40212:	700b      	strb	r3, [r1, #0]
   40214:	2300      	movs	r3, #0
   40216:	704b      	strb	r3, [r1, #1]
   40218:	6803      	ldr	r3, [r0, #0]
   4021a:	2006      	movs	r0, #6
   4021c:	f8c1 3002 	str.w	r3, [r1, #2]
   40220:	4770      	bx	lr
   40222:	f04f 30ff 	mov.w	r0, #4294967295
   40226:	4770      	bx	lr

00040228 <sock_has_pkt>:
   40228:	6840      	ldr	r0, [r0, #4]
   4022a:	3800      	subs	r0, #0
   4022c:	bf18      	it	ne
   4022e:	2001      	movne	r0, #1
   40230:	4770      	bx	lr

00040232 <sock_pkt_append>:
   40232:	2300      	movs	r3, #0
   40234:	600b      	str	r3, [r1, #0]
   40236:	6883      	ldr	r3, [r0, #8]
   40238:	b913      	cbnz	r3, 40240 <sock_pkt_append+0xe>
   4023a:	e9c0 1101 	strd	r1, r1, [r0, #4]
   4023e:	4770      	bx	lr
   40240:	6019      	str	r1, [r3, #0]
   40242:	6081      	str	r1, [r0, #8]
   40244:	4770      	bx	lr

00040246 <sock_pkt_remove>:
   40246:	b538      	push	{r3, r4, r5, lr}
   40248:	4605      	mov	r5, r0
   4024a:	460c      	mov	r4, r1
   4024c:	2010      	movs	r0, #16
   4024e:	f7f2 fdb1 	bl	32db4 <nrfx_ipc_receive_event_disable>
   40252:	68aa      	ldr	r2, [r5, #8]
   40254:	6823      	ldr	r3, [r4, #0]
   40256:	4294      	cmp	r4, r2
   40258:	606b      	str	r3, [r5, #4]
   4025a:	bf08      	it	eq
   4025c:	60ab      	streq	r3, [r5, #8]
   4025e:	2300      	movs	r3, #0
   40260:	4620      	mov	r0, r4
   40262:	6023      	str	r3, [r4, #0]
   40264:	f000 f90a 	bl	4047c <pkt_free>
   40268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   4026c:	2010      	movs	r0, #16
   4026e:	f7f2 bd83 	b.w	32d78 <nrfx_ipc_receive_event_enable>

00040272 <sock_pkt_peek_head>:
   40272:	6840      	ldr	r0, [r0, #4]
   40274:	4770      	bx	lr

00040276 <sock_is_stream>:
   40276:	6900      	ldr	r0, [r0, #16]
   40278:	1e43      	subs	r3, r0, #1
   4027a:	4258      	negs	r0, r3
   4027c:	4158      	adcs	r0, r3
   4027e:	4770      	bx	lr

00040280 <sock_is_datagram>:
   40280:	6900      	ldr	r0, [r0, #16]
   40282:	1e83      	subs	r3, r0, #2
   40284:	4258      	negs	r0, r3
   40286:	4158      	adcs	r0, r3
   40288:	4770      	bx	lr

0004028a <sock_is_raw>:
   4028a:	6900      	ldr	r0, [r0, #16]
   4028c:	1ec3      	subs	r3, r0, #3
   4028e:	4258      	negs	r0, r3
   40290:	4158      	adcs	r0, r3
   40292:	4770      	bx	lr

00040294 <sock_proto_is_secure>:
   40294:	6940      	ldr	r0, [r0, #20]
   40296:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   4029a:	d005      	beq.n	402a8 <sock_proto_is_secure+0x14>
   4029c:	f240 1311 	movw	r3, #273	; 0x111
   402a0:	1ac3      	subs	r3, r0, r3
   402a2:	4258      	negs	r0, r3
   402a4:	4158      	adcs	r0, r3
   402a6:	4770      	bx	lr
   402a8:	2001      	movs	r0, #1
   402aa:	4770      	bx	lr

000402ac <sock_is_connecting>:
   402ac:	7f00      	ldrb	r0, [r0, #28]
   402ae:	f3c0 0080 	ubfx	r0, r0, #2, #1
   402b2:	4770      	bx	lr

000402b4 <sock_is_connected>:
   402b4:	7f00      	ldrb	r0, [r0, #28]
   402b6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   402ba:	4770      	bx	lr

000402bc <sock_is_secured>:
   402bc:	7f00      	ldrb	r0, [r0, #28]
   402be:	f3c0 1000 	ubfx	r0, r0, #4, #1
   402c2:	4770      	bx	lr

000402c4 <sock_is_nonblock>:
   402c4:	6b40      	ldr	r0, [r0, #52]	; 0x34
   402c6:	f000 0001 	and.w	r0, r0, #1
   402ca:	4770      	bx	lr

000402cc <sock_is_local_closed>:
   402cc:	7f00      	ldrb	r0, [r0, #28]
   402ce:	f000 0001 	and.w	r0, r0, #1
   402d2:	4770      	bx	lr

000402d4 <sock_is_closed>:
   402d4:	7f00      	ldrb	r0, [r0, #28]
   402d6:	f3c0 0040 	ubfx	r0, r0, #1, #1
   402da:	4770      	bx	lr

000402dc <sock_has_error>:
   402dc:	6983      	ldr	r3, [r0, #24]
   402de:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   402e2:	bf14      	ite	ne
   402e4:	2001      	movne	r0, #1
   402e6:	2000      	moveq	r0, #0
   402e8:	4770      	bx	lr

000402ea <sock_has_flow_control>:
   402ea:	7f00      	ldrb	r0, [r0, #28]
   402ec:	f3c0 1080 	ubfx	r0, r0, #6, #1
   402f0:	4770      	bx	lr

000402f2 <sock_needs_attach>:
   402f2:	b508      	push	{r3, lr}
   402f4:	4602      	mov	r2, r0
   402f6:	f7ff ffcd 	bl	40294 <sock_proto_is_secure>
   402fa:	b128      	cbz	r0, 40308 <sock_needs_attach+0x16>
   402fc:	7f10      	ldrb	r0, [r2, #28]
   402fe:	f3c0 1000 	ubfx	r0, r0, #4, #1
   40302:	f080 0001 	eor.w	r0, r0, #1
   40306:	b2c0      	uxtb	r0, r0
   40308:	bd08      	pop	{r3, pc}

0004030a <sock_can_read>:
   4030a:	6840      	ldr	r0, [r0, #4]
   4030c:	3800      	subs	r0, #0
   4030e:	bf18      	it	ne
   40310:	2001      	movne	r0, #1
   40312:	4770      	bx	lr

00040314 <sock_can_accept>:
   40314:	7f00      	ldrb	r0, [r0, #28]
   40316:	f3c0 1040 	ubfx	r0, r0, #5, #1
   4031a:	4770      	bx	lr

0004031c <sock_can_send>:
   4031c:	b508      	push	{r3, lr}
   4031e:	6903      	ldr	r3, [r0, #16]
   40320:	4601      	mov	r1, r0
   40322:	2b01      	cmp	r3, #1
   40324:	bf0a      	itet	eq
   40326:	7f02      	ldrbeq	r2, [r0, #28]
   40328:	2201      	movne	r2, #1
   4032a:	f3c2 02c0 	ubfxeq	r2, r2, #3, #1
   4032e:	f7ff ffb1 	bl	40294 <sock_proto_is_secure>
   40332:	b180      	cbz	r0, 40356 <sock_can_send+0x3a>
   40334:	7f08      	ldrb	r0, [r1, #28]
   40336:	f3c0 1000 	ubfx	r0, r0, #4, #1
   4033a:	b142      	cbz	r2, 4034e <sock_can_send+0x32>
   4033c:	b148      	cbz	r0, 40352 <sock_can_send+0x36>
   4033e:	7f0a      	ldrb	r2, [r1, #28]
   40340:	0793      	lsls	r3, r2, #30
   40342:	d406      	bmi.n	40352 <sock_can_send+0x36>
   40344:	f3c2 1280 	ubfx	r2, r2, #6, #1
   40348:	f082 0201 	eor.w	r2, r2, #1
   4034c:	b2d2      	uxtb	r2, r2
   4034e:	4610      	mov	r0, r2
   40350:	bd08      	pop	{r3, pc}
   40352:	2200      	movs	r2, #0
   40354:	e7fb      	b.n	4034e <sock_can_send+0x32>
   40356:	2a00      	cmp	r2, #0
   40358:	d1f1      	bne.n	4033e <sock_can_send+0x22>
   4035a:	e7f8      	b.n	4034e <sock_can_send+0x32>

0004035c <sock_rcvtimeo_ms_get>:
   4035c:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   40360:	ea53 0102 	orrs.w	r1, r3, r2
   40364:	d009      	beq.n	4037a <sock_rcvtimeo_ms_get+0x1e>
   40366:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   4036a:	fbb3 f0f1 	udiv	r0, r3, r1
   4036e:	fb01 0002 	mla	r0, r1, r2, r0
   40372:	2801      	cmp	r0, #1
   40374:	bfb8      	it	lt
   40376:	2001      	movlt	r0, #1
   40378:	4770      	bx	lr
   4037a:	f04f 30ff 	mov.w	r0, #4294967295
   4037e:	4770      	bx	lr

00040380 <sock_sndtimeo_ms_get>:
   40380:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   40384:	ea53 0102 	orrs.w	r1, r3, r2
   40388:	d009      	beq.n	4039e <sock_sndtimeo_ms_get+0x1e>
   4038a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   4038e:	fbb3 f0f1 	udiv	r0, r3, r1
   40392:	fb01 0002 	mla	r0, r1, r2, r0
   40396:	2801      	cmp	r0, #1
   40398:	bfb8      	it	lt
   4039a:	2001      	movlt	r0, #1
   4039c:	4770      	bx	lr
   4039e:	f04f 30ff 	mov.w	r0, #4294967295
   403a2:	4770      	bx	lr

000403a4 <sock_family_is_valid>:
   403a4:	1e43      	subs	r3, r0, #1
   403a6:	2b01      	cmp	r3, #1
   403a8:	d903      	bls.n	403b2 <sock_family_is_valid+0xe>
   403aa:	1f43      	subs	r3, r0, #5
   403ac:	4258      	negs	r0, r3
   403ae:	4158      	adcs	r0, r3
   403b0:	4770      	bx	lr
   403b2:	2001      	movs	r0, #1
   403b4:	4770      	bx	lr

000403b6 <sock_type_is_valid>:
   403b6:	3801      	subs	r0, #1
   403b8:	2802      	cmp	r0, #2
   403ba:	bf8c      	ite	hi
   403bc:	2000      	movhi	r0, #0
   403be:	2001      	movls	r0, #1
   403c0:	4770      	bx	lr

000403c2 <sock_proto_is_valid>:
   403c2:	b150      	cbz	r0, 403da <sock_proto_is_valid+0x18>
   403c4:	2806      	cmp	r0, #6
   403c6:	d008      	beq.n	403da <sock_proto_is_valid+0x18>
   403c8:	f420 7380 	bic.w	r3, r0, #256	; 0x100
   403cc:	2b11      	cmp	r3, #17
   403ce:	d004      	beq.n	403da <sock_proto_is_valid+0x18>
   403d0:	f5a0 7381 	sub.w	r3, r0, #258	; 0x102
   403d4:	4258      	negs	r0, r3
   403d6:	4158      	adcs	r0, r3
   403d8:	4770      	bx	lr
   403da:	2001      	movs	r0, #1
   403dc:	4770      	bx	lr

000403de <sock_proto_supports_type>:
   403de:	2903      	cmp	r1, #3
   403e0:	d015      	beq.n	4040e <sock_proto_supports_type+0x30>
   403e2:	2811      	cmp	r0, #17
   403e4:	d00c      	beq.n	40400 <sock_proto_supports_type+0x22>
   403e6:	dc04      	bgt.n	403f2 <sock_proto_supports_type+0x14>
   403e8:	b188      	cbz	r0, 4040e <sock_proto_supports_type+0x30>
   403ea:	2806      	cmp	r0, #6
   403ec:	d00a      	beq.n	40404 <sock_proto_supports_type+0x26>
   403ee:	2000      	movs	r0, #0
   403f0:	4770      	bx	lr
   403f2:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   403f6:	d005      	beq.n	40404 <sock_proto_supports_type+0x26>
   403f8:	f240 1311 	movw	r3, #273	; 0x111
   403fc:	4298      	cmp	r0, r3
   403fe:	d1f6      	bne.n	403ee <sock_proto_supports_type+0x10>
   40400:	2902      	cmp	r1, #2
   40402:	e000      	b.n	40406 <sock_proto_supports_type+0x28>
   40404:	2901      	cmp	r1, #1
   40406:	bf14      	ite	ne
   40408:	2000      	movne	r0, #0
   4040a:	2001      	moveq	r0, #1
   4040c:	4770      	bx	lr
   4040e:	2001      	movs	r0, #1
   40410:	4770      	bx	lr

00040412 <sock_sockaddr_len_is_valid>:
   40412:	6843      	ldr	r3, [r0, #4]
   40414:	2b01      	cmp	r3, #1
   40416:	d003      	beq.n	40420 <sock_sockaddr_len_is_valid+0xe>
   40418:	2b02      	cmp	r3, #2
   4041a:	d009      	beq.n	40430 <sock_sockaddr_len_is_valid+0x1e>
   4041c:	2000      	movs	r0, #0
   4041e:	4770      	bx	lr
   40420:	7803      	ldrb	r3, [r0, #0]
   40422:	2b10      	cmp	r3, #16
   40424:	d1fa      	bne.n	4041c <sock_sockaddr_len_is_valid+0xa>
   40426:	2910      	cmp	r1, #16
   40428:	bf14      	ite	ne
   4042a:	2000      	movne	r0, #0
   4042c:	2001      	moveq	r0, #1
   4042e:	4770      	bx	lr
   40430:	7803      	ldrb	r3, [r0, #0]
   40432:	2b24      	cmp	r3, #36	; 0x24
   40434:	d1f2      	bne.n	4041c <sock_sockaddr_len_is_valid+0xa>
   40436:	2924      	cmp	r1, #36	; 0x24
   40438:	e7f6      	b.n	40428 <sock_sockaddr_len_is_valid+0x16>

0004043a <sock_sockaddr_fam_is_valid>:
   4043a:	68c3      	ldr	r3, [r0, #12]
   4043c:	2b01      	cmp	r3, #1
   4043e:	d003      	beq.n	40448 <sock_sockaddr_fam_is_valid+0xe>
   40440:	2b02      	cmp	r3, #2
   40442:	d007      	beq.n	40454 <sock_sockaddr_fam_is_valid+0x1a>
   40444:	2001      	movs	r0, #1
   40446:	4770      	bx	lr
   40448:	6848      	ldr	r0, [r1, #4]
   4044a:	2801      	cmp	r0, #1
   4044c:	bf14      	ite	ne
   4044e:	2000      	movne	r0, #0
   40450:	2001      	moveq	r0, #1
   40452:	4770      	bx	lr
   40454:	6848      	ldr	r0, [r1, #4]
   40456:	2802      	cmp	r0, #2
   40458:	e7f8      	b.n	4044c <sock_sockaddr_fam_is_valid+0x12>

0004045a <pkt_has_next>:
   4045a:	b100      	cbz	r0, 4045e <pkt_has_next+0x4>
   4045c:	6800      	ldr	r0, [r0, #0]
   4045e:	3800      	subs	r0, #0
   40460:	bf18      	it	ne
   40462:	2001      	movne	r0, #1
   40464:	4770      	bx	lr

00040466 <pkt_peek_next>:
   40466:	b100      	cbz	r0, 4046a <pkt_peek_next+0x4>
   40468:	6800      	ldr	r0, [r0, #0]
   4046a:	4770      	bx	lr

0004046c <pkt_bytes_get>:
   4046c:	8943      	ldrh	r3, [r0, #10]
   4046e:	6840      	ldr	r0, [r0, #4]
   40470:	4418      	add	r0, r3
   40472:	4770      	bx	lr

00040474 <pkt_bytes_left>:
   40474:	8902      	ldrh	r2, [r0, #8]
   40476:	8940      	ldrh	r0, [r0, #10]
   40478:	1a10      	subs	r0, r2, r0
   4047a:	4770      	bx	lr

0004047c <pkt_free>:
   4047c:	b510      	push	{r4, lr}
   4047e:	4604      	mov	r4, r0
   40480:	6840      	ldr	r0, [r0, #4]
   40482:	f7ff fdbd 	bl	40000 <rpc_client_data_free>
   40486:	68e0      	ldr	r0, [r4, #12]
   40488:	b108      	cbz	r0, 4048e <pkt_free+0x12>
   4048a:	f7e5 faed 	bl	25a68 <nrf_modem_os_free>
   4048e:	4620      	mov	r0, r4
   40490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   40494:	f7e5 bae8 	b.w	25a68 <nrf_modem_os_free>

00040498 <pkt_flush>:
   40498:	b510      	push	{r4, lr}
   4049a:	4604      	mov	r4, r0
   4049c:	6820      	ldr	r0, [r4, #0]
   4049e:	b900      	cbnz	r0, 404a2 <pkt_flush+0xa>
   404a0:	bd10      	pop	{r4, pc}
   404a2:	6862      	ldr	r2, [r4, #4]
   404a4:	6803      	ldr	r3, [r0, #0]
   404a6:	4290      	cmp	r0, r2
   404a8:	6023      	str	r3, [r4, #0]
   404aa:	bf08      	it	eq
   404ac:	6063      	streq	r3, [r4, #4]
   404ae:	f7ff ffe5 	bl	4047c <pkt_free>
   404b2:	e7f3      	b.n	4049c <pkt_flush+0x4>

000404b4 <on_conf_dnssrv_res>:
   404b4:	f000 bce6 	b.w	40e84 <res_forward>

000404b8 <nrf_freeaddrinfo>:
   404b8:	b510      	push	{r4, lr}
   404ba:	4604      	mov	r4, r0
   404bc:	b160      	cbz	r0, 404d8 <nrf_freeaddrinfo+0x20>
   404be:	6940      	ldr	r0, [r0, #20]
   404c0:	b108      	cbz	r0, 404c6 <nrf_freeaddrinfo+0xe>
   404c2:	f7e5 fad1 	bl	25a68 <nrf_modem_os_free>
   404c6:	69a0      	ldr	r0, [r4, #24]
   404c8:	b108      	cbz	r0, 404ce <nrf_freeaddrinfo+0x16>
   404ca:	f7e5 facd 	bl	25a68 <nrf_modem_os_free>
   404ce:	4620      	mov	r0, r4
   404d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   404d4:	f7e5 bac8 	b.w	25a68 <nrf_modem_os_free>
   404d8:	bd10      	pop	{r4, pc}

000404da <nrf_socket>:
   404da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   404de:	4681      	mov	r9, r0
   404e0:	4688      	mov	r8, r1
   404e2:	4617      	mov	r7, r2
   404e4:	f7ff ff5e 	bl	403a4 <sock_family_is_valid>
   404e8:	b938      	cbnz	r0, 404fa <nrf_socket+0x20>
   404ea:	206a      	movs	r0, #106	; 0x6a
   404ec:	f7e5 f9d8 	bl	258a0 <nrf_modem_os_errno_set>
   404f0:	f04f 30ff 	mov.w	r0, #4294967295
   404f4:	b003      	add	sp, #12
   404f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   404fa:	4638      	mov	r0, r7
   404fc:	f7ff ff61 	bl	403c2 <sock_proto_is_valid>
   40500:	b908      	cbnz	r0, 40506 <nrf_socket+0x2c>
   40502:	207b      	movs	r0, #123	; 0x7b
   40504:	e7f2      	b.n	404ec <nrf_socket+0x12>
   40506:	4640      	mov	r0, r8
   40508:	f7ff ff55 	bl	403b6 <sock_type_is_valid>
   4050c:	b908      	cbnz	r0, 40512 <nrf_socket+0x38>
   4050e:	206b      	movs	r0, #107	; 0x6b
   40510:	e7ec      	b.n	404ec <nrf_socket+0x12>
   40512:	4641      	mov	r1, r8
   40514:	4638      	mov	r0, r7
   40516:	f7ff ff62 	bl	403de <sock_proto_supports_type>
   4051a:	2800      	cmp	r0, #0
   4051c:	d0f7      	beq.n	4050e <nrf_socket+0x34>
   4051e:	f7f3 fe1b 	bl	34158 <sock_open>
   40522:	4606      	mov	r6, r0
   40524:	b908      	cbnz	r0, 4052a <nrf_socket+0x50>
   40526:	2017      	movs	r0, #23
   40528:	e7e0      	b.n	404ec <nrf_socket+0x12>
   4052a:	2000      	movs	r0, #0
   4052c:	f7ff fd58 	bl	3ffe0 <rpc_client_request_alloc>
   40530:	4604      	mov	r4, r0
   40532:	b920      	cbnz	r0, 4053e <nrf_socket+0x64>
   40534:	6830      	ldr	r0, [r6, #0]
   40536:	f7f3 fe45 	bl	341c4 <_sock_close>
   4053a:	2069      	movs	r0, #105	; 0x69
   4053c:	e7d6      	b.n	404ec <nrf_socket+0x12>
   4053e:	2300      	movs	r3, #0
   40540:	220c      	movs	r2, #12
   40542:	f04f 35ff 	mov.w	r5, #4294967295
   40546:	7202      	strb	r2, [r0, #8]
   40548:	7243      	strb	r3, [r0, #9]
   4054a:	7283      	strb	r3, [r0, #10]
   4054c:	72c3      	strb	r3, [r0, #11]
   4054e:	7405      	strb	r5, [r0, #16]
   40550:	7445      	strb	r5, [r0, #17]
   40552:	7485      	strb	r5, [r0, #18]
   40554:	74c5      	strb	r5, [r0, #19]
   40556:	4648      	mov	r0, r9
   40558:	f000 fc37 	bl	40dca <nrf_af_to_rpc_af>
   4055c:	6160      	str	r0, [r4, #20]
   4055e:	4640      	mov	r0, r8
   40560:	f000 fc36 	bl	40dd0 <nrf_type_to_rpc_type>
   40564:	4601      	mov	r1, r0
   40566:	61a0      	str	r0, [r4, #24]
   40568:	4638      	mov	r0, r7
   4056a:	f000 fc32 	bl	40dd2 <nrf_proto_to_rpc_proto>
   4056e:	4621      	mov	r1, r4
   40570:	61e0      	str	r0, [r4, #28]
   40572:	aa01      	add	r2, sp, #4
   40574:	f247 0001 	movw	r0, #28673	; 0x7001
   40578:	f7f4 fc7e 	bl	34e78 <req_forward>
   4057c:	4604      	mov	r4, r0
   4057e:	b120      	cbz	r0, 4058a <nrf_socket+0xb0>
   40580:	4628      	mov	r0, r5
   40582:	f7f3 fe1f 	bl	341c4 <_sock_close>
   40586:	4620      	mov	r0, r4
   40588:	e7b0      	b.n	404ec <nrf_socket+0x12>
   4058a:	9801      	ldr	r0, [sp, #4]
   4058c:	6983      	ldr	r3, [r0, #24]
   4058e:	e9c6 9803 	strd	r9, r8, [r6, #12]
   40592:	6033      	str	r3, [r6, #0]
   40594:	6177      	str	r7, [r6, #20]
   40596:	f7ff fd30 	bl	3fffa <rpc_client_message_free>
   4059a:	6830      	ldr	r0, [r6, #0]
   4059c:	e7aa      	b.n	404f4 <nrf_socket+0x1a>

0004059e <nrf_close>:
   4059e:	b570      	push	{r4, r5, r6, lr}
   405a0:	4606      	mov	r6, r0
   405a2:	f7f3 fdfd 	bl	341a0 <sock_find>
   405a6:	4605      	mov	r5, r0
   405a8:	b930      	cbnz	r0, 405b8 <nrf_close+0x1a>
   405aa:	2009      	movs	r0, #9
   405ac:	f7e5 f978 	bl	258a0 <nrf_modem_os_errno_set>
   405b0:	f04f 34ff 	mov.w	r4, #4294967295
   405b4:	4620      	mov	r0, r4
   405b6:	bd70      	pop	{r4, r5, r6, pc}
   405b8:	f7f5 fc58 	bl	35e6c <nrf_modem_state_is_initialized>
   405bc:	4604      	mov	r4, r0
   405be:	2800      	cmp	r0, #0
   405c0:	d0f8      	beq.n	405b4 <nrf_close+0x16>
   405c2:	2000      	movs	r0, #0
   405c4:	f7ff fd0c 	bl	3ffe0 <rpc_client_request_alloc>
   405c8:	4601      	mov	r1, r0
   405ca:	b908      	cbnz	r0, 405d0 <nrf_close+0x32>
   405cc:	2069      	movs	r0, #105	; 0x69
   405ce:	e7ed      	b.n	405ac <nrf_close+0xe>
   405d0:	7f2b      	ldrb	r3, [r5, #28]
   405d2:	2200      	movs	r2, #0
   405d4:	f043 0301 	orr.w	r3, r3, #1
   405d8:	772b      	strb	r3, [r5, #28]
   405da:	6106      	str	r6, [r0, #16]
   405dc:	f247 0009 	movw	r0, #28681	; 0x7009
   405e0:	f7f4 fc4a 	bl	34e78 <req_forward>
   405e4:	4604      	mov	r4, r0
   405e6:	b128      	cbz	r0, 405f4 <nrf_close+0x56>
   405e8:	2816      	cmp	r0, #22
   405ea:	d007      	beq.n	405fc <nrf_close+0x5e>
   405ec:	f7e5 f958 	bl	258a0 <nrf_modem_os_errno_set>
   405f0:	f04f 34ff 	mov.w	r4, #4294967295
   405f4:	4630      	mov	r0, r6
   405f6:	f7f3 fde5 	bl	341c4 <_sock_close>
   405fa:	e7db      	b.n	405b4 <nrf_close+0x16>
   405fc:	2400      	movs	r4, #0
   405fe:	e7f9      	b.n	405f4 <nrf_close+0x56>

00040600 <nrf_bind>:
   40600:	b538      	push	{r3, r4, r5, lr}
   40602:	4605      	mov	r5, r0
   40604:	460c      	mov	r4, r1
   40606:	f7f3 fdcb 	bl	341a0 <sock_find>
   4060a:	b928      	cbnz	r0, 40618 <nrf_bind+0x18>
   4060c:	2009      	movs	r0, #9
   4060e:	f7e5 f947 	bl	258a0 <nrf_modem_os_errno_set>
   40612:	f04f 33ff 	mov.w	r3, #4294967295
   40616:	e023      	b.n	40660 <nrf_bind+0x60>
   40618:	b90c      	cbnz	r4, 4061e <nrf_bind+0x1e>
   4061a:	200e      	movs	r0, #14
   4061c:	e7f7      	b.n	4060e <nrf_bind+0xe>
   4061e:	4621      	mov	r1, r4
   40620:	f7ff ff0b 	bl	4043a <sock_sockaddr_fam_is_valid>
   40624:	b908      	cbnz	r0, 4062a <nrf_bind+0x2a>
   40626:	206a      	movs	r0, #106	; 0x6a
   40628:	e7f1      	b.n	4060e <nrf_bind+0xe>
   4062a:	2000      	movs	r0, #0
   4062c:	f7ff fcd8 	bl	3ffe0 <rpc_client_request_alloc>
   40630:	4601      	mov	r1, r0
   40632:	b908      	cbnz	r0, 40638 <nrf_bind+0x38>
   40634:	2069      	movs	r0, #105	; 0x69
   40636:	e7ea      	b.n	4060e <nrf_bind+0xe>
   40638:	2214      	movs	r2, #20
   4063a:	2300      	movs	r3, #0
   4063c:	7202      	strb	r2, [r0, #8]
   4063e:	6862      	ldr	r2, [r4, #4]
   40640:	6105      	str	r5, [r0, #16]
   40642:	2a01      	cmp	r2, #1
   40644:	7243      	strb	r3, [r0, #9]
   40646:	7283      	strb	r3, [r0, #10]
   40648:	72c3      	strb	r3, [r0, #11]
   4064a:	d00b      	beq.n	40664 <nrf_bind+0x64>
   4064c:	2a02      	cmp	r2, #2
   4064e:	d011      	beq.n	40674 <nrf_bind+0x74>
   40650:	2200      	movs	r2, #0
   40652:	f247 0005 	movw	r0, #28677	; 0x7005
   40656:	f7f4 fc0f 	bl	34e78 <req_forward>
   4065a:	4603      	mov	r3, r0
   4065c:	2800      	cmp	r0, #0
   4065e:	d1d6      	bne.n	4060e <nrf_bind+0xe>
   40660:	4618      	mov	r0, r3
   40662:	bd38      	pop	{r3, r4, r5, pc}
   40664:	8922      	ldrh	r2, [r4, #8]
   40666:	75c3      	strb	r3, [r0, #23]
   40668:	8282      	strh	r2, [r0, #20]
   4066a:	2204      	movs	r2, #4
   4066c:	7582      	strb	r2, [r0, #22]
   4066e:	68e3      	ldr	r3, [r4, #12]
   40670:	6183      	str	r3, [r0, #24]
   40672:	e7ed      	b.n	40650 <nrf_bind+0x50>
   40674:	8922      	ldrh	r2, [r4, #8]
   40676:	75c3      	strb	r3, [r0, #23]
   40678:	8282      	strh	r2, [r0, #20]
   4067a:	2210      	movs	r2, #16
   4067c:	18a3      	adds	r3, r4, r2
   4067e:	7582      	strb	r2, [r0, #22]
   40680:	3420      	adds	r4, #32
   40682:	f100 0218 	add.w	r2, r0, #24
   40686:	f853 0b04 	ldr.w	r0, [r3], #4
   4068a:	42a3      	cmp	r3, r4
   4068c:	f842 0b04 	str.w	r0, [r2], #4
   40690:	d1f9      	bne.n	40686 <nrf_bind+0x86>
   40692:	e7dd      	b.n	40650 <nrf_bind+0x50>

00040694 <nrf_listen>:
   40694:	b570      	push	{r4, r5, r6, lr}
   40696:	4606      	mov	r6, r0
   40698:	460c      	mov	r4, r1
   4069a:	f7f3 fd81 	bl	341a0 <sock_find>
   4069e:	4605      	mov	r5, r0
   406a0:	b918      	cbnz	r0, 406aa <nrf_listen+0x16>
   406a2:	2009      	movs	r0, #9
   406a4:	f7e5 f8fc 	bl	258a0 <nrf_modem_os_errno_set>
   406a8:	e016      	b.n	406d8 <nrf_listen+0x44>
   406aa:	f7ff fde4 	bl	40276 <sock_is_stream>
   406ae:	b908      	cbnz	r0, 406b4 <nrf_listen+0x20>
   406b0:	205f      	movs	r0, #95	; 0x5f
   406b2:	e7f7      	b.n	406a4 <nrf_listen+0x10>
   406b4:	4628      	mov	r0, r5
   406b6:	f7ff fe1c 	bl	402f2 <sock_needs_attach>
   406ba:	b930      	cbnz	r0, 406ca <nrf_listen+0x36>
   406bc:	2000      	movs	r0, #0
   406be:	f7ff fc8f 	bl	3ffe0 <rpc_client_request_alloc>
   406c2:	4601      	mov	r1, r0
   406c4:	b958      	cbnz	r0, 406de <nrf_listen+0x4a>
   406c6:	2069      	movs	r0, #105	; 0x69
   406c8:	e7ec      	b.n	406a4 <nrf_listen+0x10>
   406ca:	f04f 31ff 	mov.w	r1, #4294967295
   406ce:	4628      	mov	r0, r5
   406d0:	f7f4 fb4e 	bl	34d70 <tls_attach>
   406d4:	2800      	cmp	r0, #0
   406d6:	d0f1      	beq.n	406bc <nrf_listen+0x28>
   406d8:	f04f 33ff 	mov.w	r3, #4294967295
   406dc:	e010      	b.n	40700 <nrf_listen+0x6c>
   406de:	2200      	movs	r2, #0
   406e0:	2304      	movs	r3, #4
   406e2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   406e6:	7203      	strb	r3, [r0, #8]
   406e8:	6106      	str	r6, [r0, #16]
   406ea:	7242      	strb	r2, [r0, #9]
   406ec:	7282      	strb	r2, [r0, #10]
   406ee:	72c2      	strb	r2, [r0, #11]
   406f0:	6144      	str	r4, [r0, #20]
   406f2:	f247 0008 	movw	r0, #28680	; 0x7008
   406f6:	f7f4 fbbf 	bl	34e78 <req_forward>
   406fa:	4603      	mov	r3, r0
   406fc:	2800      	cmp	r0, #0
   406fe:	d1d1      	bne.n	406a4 <nrf_listen+0x10>
   40700:	4618      	mov	r0, r3
   40702:	bd70      	pop	{r4, r5, r6, pc}

00040704 <nrf_accept>:
   40704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   40708:	b08b      	sub	sp, #44	; 0x2c
   4070a:	4605      	mov	r5, r0
   4070c:	4689      	mov	r9, r1
   4070e:	4617      	mov	r7, r2
   40710:	f7f3 fd46 	bl	341a0 <sock_find>
   40714:	4606      	mov	r6, r0
   40716:	b938      	cbnz	r0, 40728 <nrf_accept+0x24>
   40718:	2009      	movs	r0, #9
   4071a:	f7e5 f8c1 	bl	258a0 <nrf_modem_os_errno_set>
   4071e:	f04f 30ff 	mov.w	r0, #4294967295
   40722:	b00b      	add	sp, #44	; 0x2c
   40724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   40728:	f7ff fda5 	bl	40276 <sock_is_stream>
   4072c:	b908      	cbnz	r0, 40732 <nrf_accept+0x2e>
   4072e:	205f      	movs	r0, #95	; 0x5f
   40730:	e7f3      	b.n	4071a <nrf_accept+0x16>
   40732:	4630      	mov	r0, r6
   40734:	f7ff fdc6 	bl	402c4 <sock_is_nonblock>
   40738:	b128      	cbz	r0, 40746 <nrf_accept+0x42>
   4073a:	4630      	mov	r0, r6
   4073c:	f7ff fdea 	bl	40314 <sock_can_accept>
   40740:	b908      	cbnz	r0, 40746 <nrf_accept+0x42>
   40742:	200b      	movs	r0, #11
   40744:	e7e9      	b.n	4071a <nrf_accept+0x16>
   40746:	f7f3 fd07 	bl	34158 <sock_open>
   4074a:	4604      	mov	r4, r0
   4074c:	b908      	cbnz	r0, 40752 <nrf_accept+0x4e>
   4074e:	2017      	movs	r0, #23
   40750:	e7e3      	b.n	4071a <nrf_accept+0x16>
   40752:	7f33      	ldrb	r3, [r6, #28]
   40754:	2000      	movs	r0, #0
   40756:	f36f 1345 	bfc	r3, #5, #1
   4075a:	7733      	strb	r3, [r6, #28]
   4075c:	f7ff fc40 	bl	3ffe0 <rpc_client_request_alloc>
   40760:	4601      	mov	r1, r0
   40762:	b920      	cbnz	r0, 4076e <nrf_accept+0x6a>
   40764:	6820      	ldr	r0, [r4, #0]
   40766:	f7f3 fd2d 	bl	341c4 <_sock_close>
   4076a:	2069      	movs	r0, #105	; 0x69
   4076c:	e7d5      	b.n	4071a <nrf_accept+0x16>
   4076e:	6105      	str	r5, [r0, #16]
   40770:	466a      	mov	r2, sp
   40772:	f247 000c 	movw	r0, #28684	; 0x700c
   40776:	f7f4 fb7f 	bl	34e78 <req_forward>
   4077a:	4680      	mov	r8, r0
   4077c:	b120      	cbz	r0, 40788 <nrf_accept+0x84>
   4077e:	6820      	ldr	r0, [r4, #0]
   40780:	f7f3 fd20 	bl	341c4 <_sock_close>
   40784:	4640      	mov	r0, r8
   40786:	e7c8      	b.n	4071a <nrf_accept+0x16>
   40788:	9d00      	ldr	r5, [sp, #0]
   4078a:	69ab      	ldr	r3, [r5, #24]
   4078c:	6023      	str	r3, [r4, #0]
   4078e:	6933      	ldr	r3, [r6, #16]
   40790:	6123      	str	r3, [r4, #16]
   40792:	6973      	ldr	r3, [r6, #20]
   40794:	6163      	str	r3, [r4, #20]
   40796:	7f23      	ldrb	r3, [r4, #28]
   40798:	f043 0308 	orr.w	r3, r3, #8
   4079c:	7723      	strb	r3, [r4, #28]
   4079e:	f1b9 0f00 	cmp.w	r9, #0
   407a2:	d005      	beq.n	407b0 <nrf_accept+0xac>
   407a4:	b127      	cbz	r7, 407b0 <nrf_accept+0xac>
   407a6:	8beb      	ldrh	r3, [r5, #30]
   407a8:	2b04      	cmp	r3, #4
   407aa:	d006      	beq.n	407ba <nrf_accept+0xb6>
   407ac:	2b10      	cmp	r3, #16
   407ae:	d01a      	beq.n	407e6 <nrf_accept+0xe2>
   407b0:	4628      	mov	r0, r5
   407b2:	f7ff fc22 	bl	3fffa <rpc_client_message_free>
   407b6:	6820      	ldr	r0, [r4, #0]
   407b8:	e7b3      	b.n	40722 <nrf_accept+0x1e>
   407ba:	2610      	movs	r6, #16
   407bc:	2301      	movs	r3, #1
   407be:	9001      	str	r0, [sp, #4]
   407c0:	9003      	str	r0, [sp, #12]
   407c2:	f88d 6004 	strb.w	r6, [sp, #4]
   407c6:	9302      	str	r3, [sp, #8]
   407c8:	7f6a      	ldrb	r2, [r5, #29]
   407ca:	7f2b      	ldrb	r3, [r5, #28]
   407cc:	4648      	mov	r0, r9
   407ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   407d2:	f8ad 300c 	strh.w	r3, [sp, #12]
   407d6:	6a2b      	ldr	r3, [r5, #32]
   407d8:	683a      	ldr	r2, [r7, #0]
   407da:	a901      	add	r1, sp, #4
   407dc:	9304      	str	r3, [sp, #16]
   407de:	f000 fe09 	bl	413f4 <memcpy>
   407e2:	603e      	str	r6, [r7, #0]
   407e4:	e7e4      	b.n	407b0 <nrf_accept+0xac>
   407e6:	2624      	movs	r6, #36	; 0x24
   407e8:	4601      	mov	r1, r0
   407ea:	4632      	mov	r2, r6
   407ec:	a801      	add	r0, sp, #4
   407ee:	f000 fe21 	bl	41434 <memset>
   407f2:	2302      	movs	r3, #2
   407f4:	f88d 6004 	strb.w	r6, [sp, #4]
   407f8:	9302      	str	r3, [sp, #8]
   407fa:	7f2b      	ldrb	r3, [r5, #28]
   407fc:	7f6a      	ldrb	r2, [r5, #29]
   407fe:	ae05      	add	r6, sp, #20
   40800:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   40804:	f8ad 300c 	strh.w	r3, [sp, #12]
   40808:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   4080c:	f105 0320 	add.w	r3, r5, #32
   40810:	4632      	mov	r2, r6
   40812:	6818      	ldr	r0, [r3, #0]
   40814:	6859      	ldr	r1, [r3, #4]
   40816:	3308      	adds	r3, #8
   40818:	c203      	stmia	r2!, {r0, r1}
   4081a:	4563      	cmp	r3, ip
   4081c:	4616      	mov	r6, r2
   4081e:	d1f7      	bne.n	40810 <nrf_accept+0x10c>
   40820:	4648      	mov	r0, r9
   40822:	683a      	ldr	r2, [r7, #0]
   40824:	a901      	add	r1, sp, #4
   40826:	f000 fde5 	bl	413f4 <memcpy>
   4082a:	2324      	movs	r3, #36	; 0x24
   4082c:	603b      	str	r3, [r7, #0]
   4082e:	e7bf      	b.n	407b0 <nrf_accept+0xac>

00040830 <nrf_recvfrom>:
   40830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40834:	b085      	sub	sp, #20
   40836:	4617      	mov	r7, r2
   40838:	e9dd a80e 	ldrd	sl, r8, [sp, #56]	; 0x38
   4083c:	461e      	mov	r6, r3
   4083e:	9101      	str	r1, [sp, #4]
   40840:	f403 7b80 	and.w	fp, r3, #256	; 0x100
   40844:	f7f3 fcac 	bl	341a0 <sock_find>
   40848:	4604      	mov	r4, r0
   4084a:	b940      	cbnz	r0, 4085e <nrf_recvfrom+0x2e>
   4084c:	2009      	movs	r0, #9
   4084e:	f7e5 f827 	bl	258a0 <nrf_modem_os_errno_set>
   40852:	f04f 35ff 	mov.w	r5, #4294967295
   40856:	4628      	mov	r0, r5
   40858:	b005      	add	sp, #20
   4085a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4085e:	f436 75a1 	bics.w	r5, r6, #322	; 0x142
   40862:	d001      	beq.n	40868 <nrf_recvfrom+0x38>
   40864:	205f      	movs	r0, #95	; 0x5f
   40866:	e7f2      	b.n	4084e <nrf_recvfrom+0x1e>
   40868:	f1ba 0f00 	cmp.w	sl, #0
   4086c:	d004      	beq.n	40878 <nrf_recvfrom+0x48>
   4086e:	f1b8 0f00 	cmp.w	r8, #0
   40872:	d104      	bne.n	4087e <nrf_recvfrom+0x4e>
   40874:	200e      	movs	r0, #14
   40876:	e7ea      	b.n	4084e <nrf_recvfrom+0x1e>
   40878:	f1b8 0f00 	cmp.w	r8, #0
   4087c:	d1fa      	bne.n	40874 <nrf_recvfrom+0x44>
   4087e:	4620      	mov	r0, r4
   40880:	f7ff fcf9 	bl	40276 <sock_is_stream>
   40884:	b128      	cbz	r0, 40892 <nrf_recvfrom+0x62>
   40886:	4620      	mov	r0, r4
   40888:	f7ff fd14 	bl	402b4 <sock_is_connected>
   4088c:	b908      	cbnz	r0, 40892 <nrf_recvfrom+0x62>
   4088e:	2080      	movs	r0, #128	; 0x80
   40890:	e7dd      	b.n	4084e <nrf_recvfrom+0x1e>
   40892:	f1bb 0f00 	cmp.w	fp, #0
   40896:	d149      	bne.n	4092c <nrf_recvfrom+0xfc>
   40898:	4620      	mov	r0, r4
   4089a:	f7ff fd13 	bl	402c4 <sock_is_nonblock>
   4089e:	2800      	cmp	r0, #0
   408a0:	d147      	bne.n	40932 <nrf_recvfrom+0x102>
   408a2:	f3c6 1980 	ubfx	r9, r6, #6, #1
   408a6:	4620      	mov	r0, r4
   408a8:	f7ff fd58 	bl	4035c <sock_rcvtimeo_ms_get>
   408ac:	9003      	str	r0, [sp, #12]
   408ae:	4620      	mov	r0, r4
   408b0:	f7ff fcba 	bl	40228 <sock_has_pkt>
   408b4:	2800      	cmp	r0, #0
   408b6:	d03f      	beq.n	40938 <nrf_recvfrom+0x108>
   408b8:	4620      	mov	r0, r4
   408ba:	f7ff fcda 	bl	40272 <sock_pkt_peek_head>
   408be:	4681      	mov	r9, r0
   408c0:	f1ba 0f00 	cmp.w	sl, #0
   408c4:	d00d      	beq.n	408e2 <nrf_recvfrom+0xb2>
   408c6:	68c1      	ldr	r1, [r0, #12]
   408c8:	2900      	cmp	r1, #0
   408ca:	d059      	beq.n	40980 <nrf_recvfrom+0x150>
   408cc:	780a      	ldrb	r2, [r1, #0]
   408ce:	f8d8 3000 	ldr.w	r3, [r8]
   408d2:	4650      	mov	r0, sl
   408d4:	429a      	cmp	r2, r3
   408d6:	bf28      	it	cs
   408d8:	461a      	movcs	r2, r3
   408da:	f8c8 2000 	str.w	r2, [r8]
   408de:	f000 fd89 	bl	413f4 <memcpy>
   408e2:	f006 0802 	and.w	r8, r6, #2
   408e6:	4648      	mov	r0, r9
   408e8:	f7ff fdc4 	bl	40474 <pkt_bytes_left>
   408ec:	42b8      	cmp	r0, r7
   408ee:	d84a      	bhi.n	40986 <nrf_recvfrom+0x156>
   408f0:	4648      	mov	r0, r9
   408f2:	f7ff fdbf 	bl	40474 <pkt_bytes_left>
   408f6:	4606      	mov	r6, r0
   408f8:	2e00      	cmp	r6, #0
   408fa:	d0ac      	beq.n	40856 <nrf_recvfrom+0x26>
   408fc:	9b01      	ldr	r3, [sp, #4]
   408fe:	4648      	mov	r0, r9
   40900:	eb03 0a05 	add.w	sl, r3, r5
   40904:	f7ff fdb2 	bl	4046c <pkt_bytes_get>
   40908:	4632      	mov	r2, r6
   4090a:	4601      	mov	r1, r0
   4090c:	4650      	mov	r0, sl
   4090e:	f000 fd71 	bl	413f4 <memcpy>
   40912:	4620      	mov	r0, r4
   40914:	4435      	add	r5, r6
   40916:	f7ff fcb3 	bl	40280 <sock_is_datagram>
   4091a:	b3b0      	cbz	r0, 4098a <nrf_recvfrom+0x15a>
   4091c:	f1b8 0f00 	cmp.w	r8, #0
   40920:	d199      	bne.n	40856 <nrf_recvfrom+0x26>
   40922:	4649      	mov	r1, r9
   40924:	4620      	mov	r0, r4
   40926:	f7ff fc8e 	bl	40246 <sock_pkt_remove>
   4092a:	e794      	b.n	40856 <nrf_recvfrom+0x26>
   4092c:	f04f 0900 	mov.w	r9, #0
   40930:	e7b9      	b.n	408a6 <nrf_recvfrom+0x76>
   40932:	f04f 0901 	mov.w	r9, #1
   40936:	e7b6      	b.n	408a6 <nrf_recvfrom+0x76>
   40938:	4620      	mov	r0, r4
   4093a:	f7ff fccb 	bl	402d4 <sock_is_closed>
   4093e:	b188      	cbz	r0, 40964 <nrf_recvfrom+0x134>
   40940:	4620      	mov	r0, r4
   40942:	f7ff fccb 	bl	402dc <sock_has_error>
   40946:	b108      	cbz	r0, 4094c <nrf_recvfrom+0x11c>
   40948:	69a0      	ldr	r0, [r4, #24]
   4094a:	e780      	b.n	4084e <nrf_recvfrom+0x1e>
   4094c:	4620      	mov	r0, r4
   4094e:	f7ff fc92 	bl	40276 <sock_is_stream>
   40952:	2800      	cmp	r0, #0
   40954:	f47f af7f 	bne.w	40856 <nrf_recvfrom+0x26>
   40958:	4620      	mov	r0, r4
   4095a:	f7ff fc91 	bl	40280 <sock_is_datagram>
   4095e:	2800      	cmp	r0, #0
   40960:	f47f af74 	bne.w	4084c <nrf_recvfrom+0x1c>
   40964:	f1b9 0f00 	cmp.w	r9, #0
   40968:	d001      	beq.n	4096e <nrf_recvfrom+0x13e>
   4096a:	200b      	movs	r0, #11
   4096c:	e76f      	b.n	4084e <nrf_recvfrom+0x1e>
   4096e:	4648      	mov	r0, r9
   40970:	a903      	add	r1, sp, #12
   40972:	f7e4 fed3 	bl	2571c <nrf_modem_os_timedwait>
   40976:	2800      	cmp	r0, #0
   40978:	d099      	beq.n	408ae <nrf_recvfrom+0x7e>
   4097a:	f000 fd15 	bl	413a8 <abs>
   4097e:	e766      	b.n	4084e <nrf_recvfrom+0x1e>
   40980:	f8c8 1000 	str.w	r1, [r8]
   40984:	e7ad      	b.n	408e2 <nrf_recvfrom+0xb2>
   40986:	463e      	mov	r6, r7
   40988:	e7b6      	b.n	408f8 <nrf_recvfrom+0xc8>
   4098a:	4620      	mov	r0, r4
   4098c:	f7ff fc7d 	bl	4028a <sock_is_raw>
   40990:	2800      	cmp	r0, #0
   40992:	d1c3      	bne.n	4091c <nrf_recvfrom+0xec>
   40994:	f1b8 0f00 	cmp.w	r8, #0
   40998:	d10c      	bne.n	409b4 <nrf_recvfrom+0x184>
   4099a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   4099e:	4648      	mov	r0, r9
   409a0:	4433      	add	r3, r6
   409a2:	f8a9 300a 	strh.w	r3, [r9, #10]
   409a6:	f7ff fd65 	bl	40474 <pkt_bytes_left>
   409aa:	b918      	cbnz	r0, 409b4 <nrf_recvfrom+0x184>
   409ac:	4649      	mov	r1, r9
   409ae:	4620      	mov	r0, r4
   409b0:	f7ff fc49 	bl	40246 <sock_pkt_remove>
   409b4:	42b7      	cmp	r7, r6
   409b6:	f43f af4e 	beq.w	40856 <nrf_recvfrom+0x26>
   409ba:	f1bb 0f00 	cmp.w	fp, #0
   409be:	d022      	beq.n	40a06 <nrf_recvfrom+0x1d6>
   409c0:	f1b8 0f00 	cmp.w	r8, #0
   409c4:	d016      	beq.n	409f4 <nrf_recvfrom+0x1c4>
   409c6:	4648      	mov	r0, r9
   409c8:	f7ff fd47 	bl	4045a <pkt_has_next>
   409cc:	b140      	cbz	r0, 409e0 <nrf_recvfrom+0x1b0>
   409ce:	4648      	mov	r0, r9
   409d0:	f7ff fd49 	bl	40466 <pkt_peek_next>
   409d4:	4681      	mov	r9, r0
   409d6:	2800      	cmp	r0, #0
   409d8:	f43f af3d 	beq.w	40856 <nrf_recvfrom+0x26>
   409dc:	1bbf      	subs	r7, r7, r6
   409de:	e782      	b.n	408e6 <nrf_recvfrom+0xb6>
   409e0:	2000      	movs	r0, #0
   409e2:	a903      	add	r1, sp, #12
   409e4:	f7e4 fe9a 	bl	2571c <nrf_modem_os_timedwait>
   409e8:	2800      	cmp	r0, #0
   409ea:	d0e6      	beq.n	409ba <nrf_recvfrom+0x18a>
   409ec:	2d00      	cmp	r5, #0
   409ee:	f47f af32 	bne.w	40856 <nrf_recvfrom+0x26>
   409f2:	e7c2      	b.n	4097a <nrf_recvfrom+0x14a>
   409f4:	4620      	mov	r0, r4
   409f6:	f7ff fc17 	bl	40228 <sock_has_pkt>
   409fa:	2800      	cmp	r0, #0
   409fc:	d0f0      	beq.n	409e0 <nrf_recvfrom+0x1b0>
   409fe:	4620      	mov	r0, r4
   40a00:	f7ff fc37 	bl	40272 <sock_pkt_peek_head>
   40a04:	e7e6      	b.n	409d4 <nrf_recvfrom+0x1a4>
   40a06:	f1b8 0f00 	cmp.w	r8, #0
   40a0a:	d1e0      	bne.n	409ce <nrf_recvfrom+0x19e>
   40a0c:	e7f7      	b.n	409fe <nrf_recvfrom+0x1ce>

00040a0e <nrf_getsockopt>:
   40a0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   40a12:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   40a14:	4681      	mov	r9, r0
   40a16:	4688      	mov	r8, r1
   40a18:	4614      	mov	r4, r2
   40a1a:	461f      	mov	r7, r3
   40a1c:	f7f3 fbc0 	bl	341a0 <sock_find>
   40a20:	4606      	mov	r6, r0
   40a22:	b928      	cbnz	r0, 40a30 <nrf_getsockopt+0x22>
   40a24:	2009      	movs	r0, #9
   40a26:	f7e4 ff3b 	bl	258a0 <nrf_modem_os_errno_set>
   40a2a:	f04f 34ff 	mov.w	r4, #4294967295
   40a2e:	e05a      	b.n	40ae6 <nrf_getsockopt+0xd8>
   40a30:	b107      	cbz	r7, 40a34 <nrf_getsockopt+0x26>
   40a32:	b90d      	cbnz	r5, 40a38 <nrf_getsockopt+0x2a>
   40a34:	200e      	movs	r0, #14
   40a36:	e7f6      	b.n	40a26 <nrf_getsockopt+0x18>
   40a38:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   40a3c:	d134      	bne.n	40aa8 <nrf_getsockopt+0x9a>
   40a3e:	1e63      	subs	r3, r4, #1
   40a40:	2b04      	cmp	r3, #4
   40a42:	d831      	bhi.n	40aa8 <nrf_getsockopt+0x9a>
   40a44:	e8df f003 	tbb	[pc, r3]
   40a48:	0f0a1403 	.word	0x0f0a1403
   40a4c:	22          	.byte	0x22
   40a4d:	00          	.byte	0x00
   40a4e:	2304      	movs	r3, #4
   40a50:	602b      	str	r3, [r5, #0]
   40a52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   40a56:	603b      	str	r3, [r7, #0]
   40a58:	2400      	movs	r4, #0
   40a5a:	e044      	b.n	40ae6 <nrf_getsockopt+0xd8>
   40a5c:	2304      	movs	r3, #4
   40a5e:	602b      	str	r3, [r5, #0]
   40a60:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   40a64:	e7f7      	b.n	40a56 <nrf_getsockopt+0x48>
   40a66:	2304      	movs	r3, #4
   40a68:	602b      	str	r3, [r5, #0]
   40a6a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   40a6e:	e7f2      	b.n	40a56 <nrf_getsockopt+0x48>
   40a70:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   40a74:	682b      	ldr	r3, [r5, #0]
   40a76:	0092      	lsls	r2, r2, #2
   40a78:	429a      	cmp	r2, r3
   40a7a:	bf28      	it	cs
   40a7c:	461a      	movcs	r2, r3
   40a7e:	f100 0140 	add.w	r1, r0, #64	; 0x40
   40a82:	602a      	str	r2, [r5, #0]
   40a84:	4638      	mov	r0, r7
   40a86:	f000 fcb5 	bl	413f4 <memcpy>
   40a8a:	e7e5      	b.n	40a58 <nrf_getsockopt+0x4a>
   40a8c:	6b80      	ldr	r0, [r0, #56]	; 0x38
   40a8e:	f7dc fbd8 	bl	1d242 <strlen>
   40a92:	682a      	ldr	r2, [r5, #0]
   40a94:	3001      	adds	r0, #1
   40a96:	4290      	cmp	r0, r2
   40a98:	d203      	bcs.n	40aa2 <nrf_getsockopt+0x94>
   40a9a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   40a9c:	f7dc fbd1 	bl	1d242 <strlen>
   40aa0:	1c42      	adds	r2, r0, #1
   40aa2:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   40aa4:	602a      	str	r2, [r5, #0]
   40aa6:	e7ed      	b.n	40a84 <nrf_getsockopt+0x76>
   40aa8:	2c14      	cmp	r4, #20
   40aaa:	d020      	beq.n	40aee <nrf_getsockopt+0xe0>
   40aac:	dc0b      	bgt.n	40ac6 <nrf_getsockopt+0xb8>
   40aae:	2c04      	cmp	r4, #4
   40ab0:	d014      	beq.n	40adc <nrf_getsockopt+0xce>
   40ab2:	1fa3      	subs	r3, r4, #6
   40ab4:	2b02      	cmp	r3, #2
   40ab6:	d80c      	bhi.n	40ad2 <nrf_getsockopt+0xc4>
   40ab8:	6828      	ldr	r0, [r5, #0]
   40aba:	f7ff fa91 	bl	3ffe0 <rpc_client_request_alloc>
   40abe:	4606      	mov	r6, r0
   40ac0:	bb28      	cbnz	r0, 40b0e <nrf_getsockopt+0x100>
   40ac2:	2069      	movs	r0, #105	; 0x69
   40ac4:	e7af      	b.n	40a26 <nrf_getsockopt+0x18>
   40ac6:	2c15      	cmp	r4, #21
   40ac8:	d019      	beq.n	40afe <nrf_getsockopt+0xf0>
   40aca:	2c20      	cmp	r4, #32
   40acc:	dc03      	bgt.n	40ad6 <nrf_getsockopt+0xc8>
   40ace:	2c1d      	cmp	r4, #29
   40ad0:	dcf2      	bgt.n	40ab8 <nrf_getsockopt+0xaa>
   40ad2:	206d      	movs	r0, #109	; 0x6d
   40ad4:	e7a7      	b.n	40a26 <nrf_getsockopt+0x18>
   40ad6:	2c37      	cmp	r4, #55	; 0x37
   40ad8:	d0ee      	beq.n	40ab8 <nrf_getsockopt+0xaa>
   40ada:	e7fa      	b.n	40ad2 <nrf_getsockopt+0xc4>
   40adc:	602c      	str	r4, [r5, #0]
   40ade:	2400      	movs	r4, #0
   40ae0:	69b3      	ldr	r3, [r6, #24]
   40ae2:	61b4      	str	r4, [r6, #24]
   40ae4:	603b      	str	r3, [r7, #0]
   40ae6:	4620      	mov	r0, r4
   40ae8:	b003      	add	sp, #12
   40aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   40aee:	682a      	ldr	r2, [r5, #0]
   40af0:	f106 0120 	add.w	r1, r6, #32
   40af4:	2a08      	cmp	r2, #8
   40af6:	bf28      	it	cs
   40af8:	2208      	movcs	r2, #8
   40afa:	602a      	str	r2, [r5, #0]
   40afc:	e7c2      	b.n	40a84 <nrf_getsockopt+0x76>
   40afe:	682a      	ldr	r2, [r5, #0]
   40b00:	f106 0128 	add.w	r1, r6, #40	; 0x28
   40b04:	2a08      	cmp	r2, #8
   40b06:	bf28      	it	cs
   40b08:	2208      	movcs	r2, #8
   40b0a:	602a      	str	r2, [r5, #0]
   40b0c:	e7ba      	b.n	40a84 <nrf_getsockopt+0x76>
   40b0e:	2300      	movs	r3, #0
   40b10:	2208      	movs	r2, #8
   40b12:	7243      	strb	r3, [r0, #9]
   40b14:	7202      	strb	r2, [r0, #8]
   40b16:	7283      	strb	r3, [r0, #10]
   40b18:	72c3      	strb	r3, [r0, #11]
   40b1a:	f8c0 9010 	str.w	r9, [r0, #16]
   40b1e:	4640      	mov	r0, r8
   40b20:	f000 f977 	bl	40e12 <nrf_sol_to_rpc_sol>
   40b24:	6170      	str	r0, [r6, #20]
   40b26:	4620      	mov	r0, r4
   40b28:	f7f4 f98e 	bl	34e48 <nrf_so_to_rpc_so>
   40b2c:	4631      	mov	r1, r6
   40b2e:	61b0      	str	r0, [r6, #24]
   40b30:	aa01      	add	r2, sp, #4
   40b32:	f247 0004 	movw	r0, #28676	; 0x7004
   40b36:	f8d6 9000 	ldr.w	r9, [r6]
   40b3a:	f7f4 f99d 	bl	34e78 <req_forward>
   40b3e:	4604      	mov	r4, r0
   40b40:	2800      	cmp	r0, #0
   40b42:	f47f af70 	bne.w	40a26 <nrf_getsockopt+0x18>
   40b46:	f8dd 8004 	ldr.w	r8, [sp, #4]
   40b4a:	682b      	ldr	r3, [r5, #0]
   40b4c:	f8d8 1000 	ldr.w	r1, [r8]
   40b50:	b181      	cbz	r1, 40b74 <nrf_getsockopt+0x166>
   40b52:	f8d8 2004 	ldr.w	r2, [r8, #4]
   40b56:	4638      	mov	r0, r7
   40b58:	429a      	cmp	r2, r3
   40b5a:	bf28      	it	cs
   40b5c:	461a      	movcs	r2, r3
   40b5e:	602a      	str	r2, [r5, #0]
   40b60:	f000 fc48 	bl	413f4 <memcpy>
   40b64:	f8d8 0000 	ldr.w	r0, [r8]
   40b68:	f7ff fa4a 	bl	40000 <rpc_client_data_free>
   40b6c:	9801      	ldr	r0, [sp, #4]
   40b6e:	f7ff fa44 	bl	3fffa <rpc_client_message_free>
   40b72:	e7b8      	b.n	40ae6 <nrf_getsockopt+0xd8>
   40b74:	6872      	ldr	r2, [r6, #4]
   40b76:	4649      	mov	r1, r9
   40b78:	429a      	cmp	r2, r3
   40b7a:	bf28      	it	cs
   40b7c:	461a      	movcs	r2, r3
   40b7e:	4638      	mov	r0, r7
   40b80:	602a      	str	r2, [r5, #0]
   40b82:	f000 fc37 	bl	413f4 <memcpy>
   40b86:	4648      	mov	r0, r9
   40b88:	f7ff fa13 	bl	3ffb2 <rpc_transport_local_data_free>
   40b8c:	e7ee      	b.n	40b6c <nrf_getsockopt+0x15e>

00040b8e <tls_setopt_role>:
   40b8e:	b508      	push	{r3, lr}
   40b90:	4603      	mov	r3, r0
   40b92:	b109      	cbz	r1, 40b98 <tls_setopt_role+0xa>
   40b94:	2a04      	cmp	r2, #4
   40b96:	d005      	beq.n	40ba4 <tls_setopt_role+0x16>
   40b98:	2016      	movs	r0, #22
   40b9a:	f7e4 fe81 	bl	258a0 <nrf_modem_os_errno_set>
   40b9e:	f04f 30ff 	mov.w	r0, #4294967295
   40ba2:	e00a      	b.n	40bba <tls_setopt_role+0x2c>
   40ba4:	7808      	ldrb	r0, [r1, #0]
   40ba6:	b128      	cbz	r0, 40bb4 <tls_setopt_role+0x26>
   40ba8:	2801      	cmp	r0, #1
   40baa:	d1f5      	bne.n	40b98 <tls_setopt_role+0xa>
   40bac:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
   40bb0:	2000      	movs	r0, #0
   40bb2:	e002      	b.n	40bba <tls_setopt_role+0x2c>
   40bb4:	2202      	movs	r2, #2
   40bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   40bba:	bd08      	pop	{r3, pc}

00040bbc <tls_setopt_taglist>:
   40bbc:	b510      	push	{r4, lr}
   40bbe:	f012 0403 	ands.w	r4, r2, #3
   40bc2:	d100      	bne.n	40bc6 <tls_setopt_taglist+0xa>
   40bc4:	b92a      	cbnz	r2, 40bd2 <tls_setopt_taglist+0x16>
   40bc6:	2016      	movs	r0, #22
   40bc8:	f7e4 fe6a 	bl	258a0 <nrf_modem_os_errno_set>
   40bcc:	f04f 30ff 	mov.w	r0, #4294967295
   40bd0:	bd10      	pop	{r4, pc}
   40bd2:	0893      	lsrs	r3, r2, #2
   40bd4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
   40bd8:	3040      	adds	r0, #64	; 0x40
   40bda:	f000 fc0b 	bl	413f4 <memcpy>
   40bde:	4620      	mov	r0, r4
   40be0:	e7f6      	b.n	40bd0 <tls_setopt_taglist+0x14>

00040be2 <tls_setopt_sess_cache>:
   40be2:	b508      	push	{r3, lr}
   40be4:	b109      	cbz	r1, 40bea <tls_setopt_sess_cache+0x8>
   40be6:	2a04      	cmp	r2, #4
   40be8:	d005      	beq.n	40bf6 <tls_setopt_sess_cache+0x14>
   40bea:	2016      	movs	r0, #22
   40bec:	f7e4 fe58 	bl	258a0 <nrf_modem_os_errno_set>
   40bf0:	f04f 30ff 	mov.w	r0, #4294967295
   40bf4:	bd08      	pop	{r3, pc}
   40bf6:	780b      	ldrb	r3, [r1, #0]
   40bf8:	3b00      	subs	r3, #0
   40bfa:	bf18      	it	ne
   40bfc:	2301      	movne	r3, #1
   40bfe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   40c02:	2000      	movs	r0, #0
   40c04:	e7f6      	b.n	40bf4 <tls_setopt_sess_cache+0x12>

00040c06 <tls_setopt_peer_verify>:
   40c06:	b508      	push	{r3, lr}
   40c08:	b109      	cbz	r1, 40c0e <tls_setopt_peer_verify+0x8>
   40c0a:	2a04      	cmp	r2, #4
   40c0c:	d005      	beq.n	40c1a <tls_setopt_peer_verify+0x14>
   40c0e:	2016      	movs	r0, #22
   40c10:	f7e4 fe46 	bl	258a0 <nrf_modem_os_errno_set>
   40c14:	f04f 30ff 	mov.w	r0, #4294967295
   40c18:	bd08      	pop	{r3, pc}
   40c1a:	680b      	ldr	r3, [r1, #0]
   40c1c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   40c20:	2000      	movs	r0, #0
   40c22:	e7f9      	b.n	40c18 <tls_setopt_peer_verify+0x12>

00040c24 <tls_setopt_hostname>:
   40c24:	b570      	push	{r4, r5, r6, lr}
   40c26:	4605      	mov	r5, r0
   40c28:	4614      	mov	r4, r2
   40c2a:	460e      	mov	r6, r1
   40c2c:	b931      	cbnz	r1, 40c3c <tls_setopt_hostname+0x18>
   40c2e:	b13a      	cbz	r2, 40c40 <tls_setopt_hostname+0x1c>
   40c30:	2016      	movs	r0, #22
   40c32:	f7e4 fe35 	bl	258a0 <nrf_modem_os_errno_set>
   40c36:	f04f 30ff 	mov.w	r0, #4294967295
   40c3a:	bd70      	pop	{r4, r5, r6, pc}
   40c3c:	2a00      	cmp	r2, #0
   40c3e:	d0f7      	beq.n	40c30 <tls_setopt_hostname+0xc>
   40c40:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   40c42:	b108      	cbz	r0, 40c48 <tls_setopt_hostname+0x24>
   40c44:	f7e4 ff10 	bl	25a68 <nrf_modem_os_free>
   40c48:	b174      	cbz	r4, 40c68 <tls_setopt_hostname+0x44>
   40c4a:	1c60      	adds	r0, r4, #1
   40c4c:	f7e4 ff04 	bl	25a58 <nrf_modem_os_alloc>
   40c50:	63a8      	str	r0, [r5, #56]	; 0x38
   40c52:	b908      	cbnz	r0, 40c58 <tls_setopt_hostname+0x34>
   40c54:	2069      	movs	r0, #105	; 0x69
   40c56:	e7ec      	b.n	40c32 <tls_setopt_hostname+0xe>
   40c58:	4622      	mov	r2, r4
   40c5a:	4631      	mov	r1, r6
   40c5c:	f000 fbca 	bl	413f4 <memcpy>
   40c60:	2000      	movs	r0, #0
   40c62:	6bab      	ldr	r3, [r5, #56]	; 0x38
   40c64:	5518      	strb	r0, [r3, r4]
   40c66:	e7e8      	b.n	40c3a <tls_setopt_hostname+0x16>
   40c68:	4620      	mov	r0, r4
   40c6a:	e7e6      	b.n	40c3a <tls_setopt_hostname+0x16>

00040c6c <nrf_poll>:
   40c6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   40c70:	4688      	mov	r8, r1
   40c72:	4607      	mov	r7, r0
   40c74:	9201      	str	r2, [sp, #4]
   40c76:	b930      	cbnz	r0, 40c86 <nrf_poll+0x1a>
   40c78:	b149      	cbz	r1, 40c8e <nrf_poll+0x22>
   40c7a:	200e      	movs	r0, #14
   40c7c:	f7e4 fe10 	bl	258a0 <nrf_modem_os_errno_set>
   40c80:	f04f 35ff 	mov.w	r5, #4294967295
   40c84:	e014      	b.n	40cb0 <nrf_poll+0x44>
   40c86:	2908      	cmp	r1, #8
   40c88:	d901      	bls.n	40c8e <nrf_poll+0x22>
   40c8a:	2016      	movs	r0, #22
   40c8c:	e7f6      	b.n	40c7c <nrf_poll+0x10>
   40c8e:	f04f 0900 	mov.w	r9, #0
   40c92:	f04f 0a00 	mov.w	sl, #0
   40c96:	463c      	mov	r4, r7
   40c98:	4655      	mov	r5, sl
   40c9a:	45c2      	cmp	sl, r8
   40c9c:	d10c      	bne.n	40cb8 <nrf_poll+0x4c>
   40c9e:	b93d      	cbnz	r5, 40cb0 <nrf_poll+0x44>
   40ca0:	4628      	mov	r0, r5
   40ca2:	a901      	add	r1, sp, #4
   40ca4:	f7e4 fd3a 	bl	2571c <nrf_modem_os_timedwait>
   40ca8:	2800      	cmp	r0, #0
   40caa:	d0f2      	beq.n	40c92 <nrf_poll+0x26>
   40cac:	306e      	adds	r0, #110	; 0x6e
   40cae:	d06f      	beq.n	40d90 <nrf_poll+0x124>
   40cb0:	4628      	mov	r0, r5
   40cb2:	b002      	add	sp, #8
   40cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40cb8:	6820      	ldr	r0, [r4, #0]
   40cba:	f8a4 9006 	strh.w	r9, [r4, #6]
   40cbe:	2800      	cmp	r0, #0
   40cc0:	db4e      	blt.n	40d60 <nrf_poll+0xf4>
   40cc2:	f7f3 fa6d 	bl	341a0 <sock_find>
   40cc6:	4606      	mov	r6, r0
   40cc8:	b928      	cbnz	r0, 40cd6 <nrf_poll+0x6a>
   40cca:	88e3      	ldrh	r3, [r4, #6]
   40ccc:	f043 0320 	orr.w	r3, r3, #32
   40cd0:	80e3      	strh	r3, [r4, #6]
   40cd2:	3501      	adds	r5, #1
   40cd4:	e044      	b.n	40d60 <nrf_poll+0xf4>
   40cd6:	f7ff faf9 	bl	402cc <sock_is_local_closed>
   40cda:	2800      	cmp	r0, #0
   40cdc:	d1f5      	bne.n	40cca <nrf_poll+0x5e>
   40cde:	4630      	mov	r0, r6
   40ce0:	f7ff fafc 	bl	402dc <sock_has_error>
   40ce4:	b348      	cbz	r0, 40d3a <nrf_poll+0xce>
   40ce6:	88e3      	ldrh	r3, [r4, #6]
   40ce8:	f043 0308 	orr.w	r3, r3, #8
   40cec:	80e3      	strh	r3, [r4, #6]
   40cee:	88a3      	ldrh	r3, [r4, #4]
   40cf0:	07da      	lsls	r2, r3, #31
   40cf2:	d517      	bpl.n	40d24 <nrf_poll+0xb8>
   40cf4:	4630      	mov	r0, r6
   40cf6:	f7ff fb08 	bl	4030a <sock_can_read>
   40cfa:	b338      	cbz	r0, 40d4c <nrf_poll+0xe0>
   40cfc:	88e3      	ldrh	r3, [r4, #6]
   40cfe:	f043 0301 	orr.w	r3, r3, #1
   40d02:	80e3      	strh	r3, [r4, #6]
   40d04:	4630      	mov	r0, r6
   40d06:	f7ff fab6 	bl	40276 <sock_is_stream>
   40d0a:	b158      	cbz	r0, 40d24 <nrf_poll+0xb8>
   40d0c:	4630      	mov	r0, r6
   40d0e:	f7ff fae1 	bl	402d4 <sock_is_closed>
   40d12:	b138      	cbz	r0, 40d24 <nrf_poll+0xb8>
   40d14:	4630      	mov	r0, r6
   40d16:	f7ff fae1 	bl	402dc <sock_has_error>
   40d1a:	b918      	cbnz	r0, 40d24 <nrf_poll+0xb8>
   40d1c:	88e3      	ldrh	r3, [r4, #6]
   40d1e:	f043 0301 	orr.w	r3, r3, #1
   40d22:	80e3      	strh	r3, [r4, #6]
   40d24:	88a3      	ldrh	r3, [r4, #4]
   40d26:	075b      	lsls	r3, r3, #29
   40d28:	d516      	bpl.n	40d58 <nrf_poll+0xec>
   40d2a:	4630      	mov	r0, r6
   40d2c:	f7ff faf6 	bl	4031c <sock_can_send>
   40d30:	b190      	cbz	r0, 40d58 <nrf_poll+0xec>
   40d32:	88e3      	ldrh	r3, [r4, #6]
   40d34:	f043 0304 	orr.w	r3, r3, #4
   40d38:	e7ca      	b.n	40cd0 <nrf_poll+0x64>
   40d3a:	4630      	mov	r0, r6
   40d3c:	f7ff faca 	bl	402d4 <sock_is_closed>
   40d40:	2800      	cmp	r0, #0
   40d42:	d0d4      	beq.n	40cee <nrf_poll+0x82>
   40d44:	88e3      	ldrh	r3, [r4, #6]
   40d46:	f043 0310 	orr.w	r3, r3, #16
   40d4a:	e7cf      	b.n	40cec <nrf_poll+0x80>
   40d4c:	4630      	mov	r0, r6
   40d4e:	f7ff fae1 	bl	40314 <sock_can_accept>
   40d52:	2800      	cmp	r0, #0
   40d54:	d1d2      	bne.n	40cfc <nrf_poll+0x90>
   40d56:	e7d5      	b.n	40d04 <nrf_poll+0x98>
   40d58:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   40d5c:	2b00      	cmp	r3, #0
   40d5e:	d1b8      	bne.n	40cd2 <nrf_poll+0x66>
   40d60:	f10a 0a01 	add.w	sl, sl, #1
   40d64:	3408      	adds	r4, #8
   40d66:	e798      	b.n	40c9a <nrf_poll+0x2e>
   40d68:	f857 0034 	ldr.w	r0, [r7, r4, lsl #3]
   40d6c:	2800      	cmp	r0, #0
   40d6e:	db08      	blt.n	40d82 <nrf_poll+0x116>
   40d70:	88fb      	ldrh	r3, [r7, #6]
   40d72:	3501      	adds	r5, #1
   40d74:	f043 0308 	orr.w	r3, r3, #8
   40d78:	80fb      	strh	r3, [r7, #6]
   40d7a:	f7f3 fa11 	bl	341a0 <sock_find>
   40d7e:	b100      	cbz	r0, 40d82 <nrf_poll+0x116>
   40d80:	6186      	str	r6, [r0, #24]
   40d82:	3401      	adds	r4, #1
   40d84:	4544      	cmp	r4, r8
   40d86:	d1ef      	bne.n	40d68 <nrf_poll+0xfc>
   40d88:	2d00      	cmp	r5, #0
   40d8a:	d191      	bne.n	40cb0 <nrf_poll+0x44>
   40d8c:	2004      	movs	r0, #4
   40d8e:	e775      	b.n	40c7c <nrf_poll+0x10>
   40d90:	462c      	mov	r4, r5
   40d92:	266e      	movs	r6, #110	; 0x6e
   40d94:	e7f6      	b.n	40d84 <nrf_poll+0x118>

00040d96 <nrf_fcntl>:
   40d96:	b538      	push	{r3, r4, r5, lr}
   40d98:	460d      	mov	r5, r1
   40d9a:	4614      	mov	r4, r2
   40d9c:	f7f3 fa00 	bl	341a0 <sock_find>
   40da0:	4603      	mov	r3, r0
   40da2:	b928      	cbnz	r0, 40db0 <nrf_fcntl+0x1a>
   40da4:	2009      	movs	r0, #9
   40da6:	f7e4 fd7b 	bl	258a0 <nrf_modem_os_errno_set>
   40daa:	f04f 30ff 	mov.w	r0, #4294967295
   40dae:	e006      	b.n	40dbe <nrf_fcntl+0x28>
   40db0:	2d03      	cmp	r5, #3
   40db2:	d003      	beq.n	40dbc <nrf_fcntl+0x26>
   40db4:	2d04      	cmp	r5, #4
   40db6:	d003      	beq.n	40dc0 <nrf_fcntl+0x2a>
   40db8:	2016      	movs	r0, #22
   40dba:	e7f4      	b.n	40da6 <nrf_fcntl+0x10>
   40dbc:	6b40      	ldr	r0, [r0, #52]	; 0x34
   40dbe:	bd38      	pop	{r3, r4, r5, pc}
   40dc0:	f034 0001 	bics.w	r0, r4, #1
   40dc4:	d1f8      	bne.n	40db8 <nrf_fcntl+0x22>
   40dc6:	635c      	str	r4, [r3, #52]	; 0x34
   40dc8:	e7f9      	b.n	40dbe <nrf_fcntl+0x28>

00040dca <nrf_af_to_rpc_af>:
   40dca:	4770      	bx	lr

00040dcc <rpc_af_to_nrf_af>:
   40dcc:	f7ff bffd 	b.w	40dca <nrf_af_to_rpc_af>

00040dd0 <nrf_type_to_rpc_type>:
   40dd0:	4770      	bx	lr

00040dd2 <nrf_proto_to_rpc_proto>:
   40dd2:	2829      	cmp	r0, #41	; 0x29
   40dd4:	d015      	beq.n	40e02 <nrf_proto_to_rpc_proto+0x30>
   40dd6:	dc05      	bgt.n	40de4 <nrf_proto_to_rpc_proto+0x12>
   40dd8:	2806      	cmp	r0, #6
   40dda:	d014      	beq.n	40e06 <nrf_proto_to_rpc_proto+0x34>
   40ddc:	2811      	cmp	r0, #17
   40dde:	d014      	beq.n	40e0a <nrf_proto_to_rpc_proto+0x38>
   40de0:	b148      	cbz	r0, 40df6 <nrf_proto_to_rpc_proto+0x24>
   40de2:	4770      	bx	lr
   40de4:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   40de8:	d00d      	beq.n	40e06 <nrf_proto_to_rpc_proto+0x34>
   40dea:	f240 1311 	movw	r3, #273	; 0x111
   40dee:	4298      	cmp	r0, r3
   40df0:	d00b      	beq.n	40e0a <nrf_proto_to_rpc_proto+0x38>
   40df2:	28ff      	cmp	r0, #255	; 0xff
   40df4:	d10c      	bne.n	40e10 <nrf_proto_to_rpc_proto+0x3e>
   40df6:	2901      	cmp	r1, #1
   40df8:	d009      	beq.n	40e0e <nrf_proto_to_rpc_proto+0x3c>
   40dfa:	2902      	cmp	r1, #2
   40dfc:	bf08      	it	eq
   40dfe:	2002      	moveq	r0, #2
   40e00:	4770      	bx	lr
   40e02:	2006      	movs	r0, #6
   40e04:	4770      	bx	lr
   40e06:	2001      	movs	r0, #1
   40e08:	4770      	bx	lr
   40e0a:	2002      	movs	r0, #2
   40e0c:	4770      	bx	lr
   40e0e:	4608      	mov	r0, r1
   40e10:	4770      	bx	lr

00040e12 <nrf_sol_to_rpc_sol>:
   40e12:	2829      	cmp	r0, #41	; 0x29
   40e14:	d013      	beq.n	40e3e <nrf_sol_to_rpc_sol+0x2c>
   40e16:	dc09      	bgt.n	40e2c <nrf_sol_to_rpc_sol+0x1a>
   40e18:	2801      	cmp	r0, #1
   40e1a:	d012      	beq.n	40e42 <nrf_sol_to_rpc_sol+0x30>
   40e1c:	2806      	cmp	r0, #6
   40e1e:	d012      	beq.n	40e46 <nrf_sol_to_rpc_sol+0x34>
   40e20:	2800      	cmp	r0, #0
   40e22:	bf14      	ite	ne
   40e24:	f04f 30ff 	movne.w	r0, #4294967295
   40e28:	2004      	moveq	r0, #4
   40e2a:	4770      	bx	lr
   40e2c:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   40e30:	d00b      	beq.n	40e4a <nrf_sol_to_rpc_sol+0x38>
   40e32:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   40e36:	bf18      	it	ne
   40e38:	f04f 30ff 	movne.w	r0, #4294967295
   40e3c:	4770      	bx	lr
   40e3e:	2006      	movs	r0, #6
   40e40:	4770      	bx	lr
   40e42:	2008      	movs	r0, #8
   40e44:	4770      	bx	lr
   40e46:	2001      	movs	r0, #1
   40e48:	4770      	bx	lr
   40e4a:	f44f 7080 	mov.w	r0, #256	; 0x100
   40e4e:	4770      	bx	lr

00040e50 <rpc_error_to_nrf_gai_errno>:
   40e50:	b508      	push	{r3, lr}
   40e52:	1f03      	subs	r3, r0, #4
   40e54:	2b09      	cmp	r3, #9
   40e56:	d80f      	bhi.n	40e78 <rpc_error_to_nrf_gai_errno+0x28>
   40e58:	e8df f003 	tbb	[pc, r3]
   40e5c:	0e110508 	.word	0x0e110508
   40e60:	0e0e0e0e 	.word	0x0e0e0e0e
   40e64:	110e      	.short	0x110e
   40e66:	f44f 708a 	mov.w	r0, #276	; 0x114
   40e6a:	bd08      	pop	{r3, pc}
   40e6c:	2073      	movs	r0, #115	; 0x73
   40e6e:	f7e4 fd17 	bl	258a0 <nrf_modem_os_errno_set>
   40e72:	f240 1015 	movw	r0, #277	; 0x115
   40e76:	e7f8      	b.n	40e6a <rpc_error_to_nrf_gai_errno+0x1a>
   40e78:	f7f3 fff2 	bl	34e60 <rpc_error_to_nrf_errno>
   40e7c:	e7f7      	b.n	40e6e <rpc_error_to_nrf_gai_errno+0x1e>
   40e7e:	f240 1011 	movw	r0, #273	; 0x111
   40e82:	e7f2      	b.n	40e6a <rpc_error_to_nrf_gai_errno+0x1a>

00040e84 <res_forward>:
   40e84:	4603      	mov	r3, r0
   40e86:	68c0      	ldr	r0, [r0, #12]
   40e88:	b108      	cbz	r0, 40e8e <res_forward+0xa>
   40e8a:	6003      	str	r3, [r0, #0]
   40e8c:	2001      	movs	r0, #1
   40e8e:	4770      	bx	lr

00040e90 <nrf_modem_gnss_agps_write>:
   40e90:	b530      	push	{r4, r5, lr}
   40e92:	4615      	mov	r5, r2
   40e94:	4604      	mov	r4, r0
   40e96:	b09f      	sub	sp, #124	; 0x7c
   40e98:	2800      	cmp	r0, #0
   40e9a:	d03e      	beq.n	40f1a <nrf_modem_gnss_agps_write+0x8a>
   40e9c:	2900      	cmp	r1, #0
   40e9e:	d03c      	beq.n	40f1a <nrf_modem_gnss_agps_write+0x8a>
   40ea0:	2272      	movs	r2, #114	; 0x72
   40ea2:	2100      	movs	r1, #0
   40ea4:	a801      	add	r0, sp, #4
   40ea6:	f000 fac5 	bl	41434 <memset>
   40eaa:	1e6a      	subs	r2, r5, #1
   40eac:	2a07      	cmp	r2, #7
   40eae:	d834      	bhi.n	40f1a <nrf_modem_gnss_agps_write+0x8a>
   40eb0:	e8df f002 	tbb	[pc, r2]
   40eb4:	1a151004 	.word	0x1a151004
   40eb8:	2e29241f 	.word	0x2e29241f
   40ebc:	4620      	mov	r0, r4
   40ebe:	a902      	add	r1, sp, #8
   40ec0:	f7ff f8a0 	bl	40004 <rpc_gnss_serialize_utc>
   40ec4:	2272      	movs	r2, #114	; 0x72
   40ec6:	f241 0005 	movw	r0, #4101	; 0x1005
   40eca:	a901      	add	r1, sp, #4
   40ecc:	f7f4 fb26 	bl	3551c <send_message>
   40ed0:	b01f      	add	sp, #124	; 0x7c
   40ed2:	bd30      	pop	{r4, r5, pc}
   40ed4:	4620      	mov	r0, r4
   40ed6:	a902      	add	r1, sp, #8
   40ed8:	f7ff f8b1 	bl	4003e <rpc_gnss_serialize_ephe>
   40edc:	e7f2      	b.n	40ec4 <nrf_modem_gnss_agps_write+0x34>
   40ede:	4620      	mov	r0, r4
   40ee0:	a902      	add	r1, sp, #8
   40ee2:	f7ff f8f6 	bl	400d2 <rpc_gnss_serialize_alm>
   40ee6:	e7ed      	b.n	40ec4 <nrf_modem_gnss_agps_write+0x34>
   40ee8:	4620      	mov	r0, r4
   40eea:	a902      	add	r1, sp, #8
   40eec:	f7ff f91e 	bl	4012c <rpc_gnss_serialize_klob>
   40ef0:	e7e8      	b.n	40ec4 <nrf_modem_gnss_agps_write+0x34>
   40ef2:	4620      	mov	r0, r4
   40ef4:	a902      	add	r1, sp, #8
   40ef6:	f7ff f934 	bl	40162 <rpc_gnss_serialize_nequick>
   40efa:	e7e3      	b.n	40ec4 <nrf_modem_gnss_agps_write+0x34>
   40efc:	4620      	mov	r0, r4
   40efe:	a902      	add	r1, sp, #8
   40f00:	f7ff f944 	bl	4018c <rpc_gnss_serialize_time_and_sv_tow>
   40f04:	e7de      	b.n	40ec4 <nrf_modem_gnss_agps_write+0x34>
   40f06:	4620      	mov	r0, r4
   40f08:	a902      	add	r1, sp, #8
   40f0a:	f7ff f962 	bl	401d2 <rpc_gnss_serialize_location>
   40f0e:	e7d9      	b.n	40ec4 <nrf_modem_gnss_agps_write+0x34>
   40f10:	4620      	mov	r0, r4
   40f12:	a902      	add	r1, sp, #8
   40f14:	f7ff f97a 	bl	4020c <rpc_gnss_serialize_integrity>
   40f18:	e7d4      	b.n	40ec4 <nrf_modem_gnss_agps_write+0x34>
   40f1a:	f06f 0015 	mvn.w	r0, #21
   40f1e:	e7d7      	b.n	40ed0 <nrf_modem_gnss_agps_write+0x40>

00040f20 <nrf_modem_is_initialized>:
   40f20:	f7f4 bfa4 	b.w	35e6c <nrf_modem_state_is_initialized>

00040f24 <z_device_state_init>:
}
   40f24:	4770      	bx	lr

00040f26 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   40f26:	b138      	cbz	r0, 40f38 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   40f28:	68c3      	ldr	r3, [r0, #12]
   40f2a:	8818      	ldrh	r0, [r3, #0]
   40f2c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   40f30:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   40f34:	4258      	negs	r0, r3
   40f36:	4158      	adcs	r0, r3
}
   40f38:	4770      	bx	lr

00040f3a <z_early_memset>:
   40f3a:	f000 ba7b 	b.w	41434 <memset>

00040f3e <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   40f3e:	f000 ba59 	b.w	413f4 <memcpy>

00040f42 <k_heap_init>:
{
   40f42:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   40f44:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   40f48:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   40f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   40f50:	f7e0 ba0c 	b.w	2136c <sys_heap_init>

00040f54 <k_heap_alloc>:
{
   40f54:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   40f56:	e9cd 2300 	strd	r2, r3, [sp]
   40f5a:	460a      	mov	r2, r1
   40f5c:	2104      	movs	r1, #4
   40f5e:	f7f5 f929 	bl	361b4 <k_heap_aligned_alloc>
}
   40f62:	b003      	add	sp, #12
   40f64:	f85d fb04 	ldr.w	pc, [sp], #4

00040f68 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   40f68:	f3ef 8005 	mrs	r0, IPSR
}
   40f6c:	3800      	subs	r0, #0
   40f6e:	bf18      	it	ne
   40f70:	2001      	movne	r0, #1
   40f72:	4770      	bx	lr

00040f74 <z_impl_k_thread_name_set>:
}
   40f74:	f06f 0057 	mvn.w	r0, #87	; 0x57
   40f78:	4770      	bx	lr

00040f7a <k_thread_name_get>:
}
   40f7a:	2000      	movs	r0, #0
   40f7c:	4770      	bx	lr

00040f7e <z_impl_k_thread_start>:
	z_sched_start(thread);
   40f7e:	f7f6 bf21 	b.w	37dc4 <z_sched_start>

00040f82 <z_pm_save_idle_exit>:
{
   40f82:	b508      	push	{r3, lr}
	pm_system_resume();
   40f84:	f7e1 fc56 	bl	22834 <pm_system_resume>
}
   40f88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   40f8c:	f7fd bdee 	b.w	3eb6c <sys_clock_idle_exit>

00040f90 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   40f90:	f990 300e 	ldrsb.w	r3, [r0, #14]
   40f94:	428b      	cmp	r3, r1
   40f96:	d001      	beq.n	40f9c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   40f98:	f7f7 b8ac 	b.w	380f4 <z_set_prio>
}
   40f9c:	2000      	movs	r0, #0
   40f9e:	4770      	bx	lr

00040fa0 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   40fa0:	2300      	movs	r3, #0
   40fa2:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   40fa6:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   40faa:	4618      	mov	r0, r3
   40fac:	4770      	bx	lr

00040fae <z_queue_node_peek>:
{
   40fae:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   40fb0:	4604      	mov	r4, r0
   40fb2:	b130      	cbz	r0, 40fc2 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   40fb4:	6802      	ldr	r2, [r0, #0]
   40fb6:	0793      	lsls	r3, r2, #30
   40fb8:	d003      	beq.n	40fc2 <z_queue_node_peek+0x14>
		ret = anode->data;
   40fba:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   40fbc:	b109      	cbz	r1, 40fc2 <z_queue_node_peek+0x14>
			k_free(anode);
   40fbe:	f000 f988 	bl	412d2 <k_free>
}
   40fc2:	4620      	mov	r0, r4
   40fc4:	bd10      	pop	{r4, pc}

00040fc6 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   40fc6:	2301      	movs	r3, #1
{
   40fc8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   40fca:	9300      	str	r3, [sp, #0]
   40fcc:	2300      	movs	r3, #0
{
   40fce:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   40fd0:	4619      	mov	r1, r3
   40fd2:	f7f5 fdeb 	bl	36bac <queue_insert>
}
   40fd6:	b003      	add	sp, #12
   40fd8:	f85d fb04 	ldr.w	pc, [sp], #4

00040fdc <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   40fdc:	b15a      	cbz	r2, 40ff6 <z_impl_k_sem_init+0x1a>
   40fde:	428a      	cmp	r2, r1
   40fe0:	d309      	bcc.n	40ff6 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   40fe2:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   40fe6:	e9c0 1202 	strd	r1, r2, [r0, #8]
   40fea:	e9c0 0000 	strd	r0, r0, [r0]
   40fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   40ff2:	2000      	movs	r0, #0
   40ff4:	4770      	bx	lr
		return -EINVAL;
   40ff6:	f06f 0015 	mvn.w	r0, #21
}
   40ffa:	4770      	bx	lr

00040ffc <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   40ffc:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   40ffe:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   41000:	408b      	lsls	r3, r1
   41002:	ea22 0303 	bic.w	r3, r2, r3
   41006:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   41008:	fa22 f001 	lsr.w	r0, r2, r1
}
   4100c:	f000 0001 	and.w	r0, r0, #1
   41010:	4770      	bx	lr

00041012 <unschedule_locked>:
{
   41012:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   41014:	2103      	movs	r1, #3
{
   41016:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   41018:	300c      	adds	r0, #12
   4101a:	f7ff ffef 	bl	40ffc <flag_test_and_clear>
   4101e:	4604      	mov	r4, r0
   41020:	b118      	cbz	r0, 4102a <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   41022:	f105 0010 	add.w	r0, r5, #16
   41026:	f7f7 fd4f 	bl	38ac8 <z_abort_timeout>
}
   4102a:	4620      	mov	r0, r4
   4102c:	bd38      	pop	{r3, r4, r5, pc}

0004102e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   4102e:	b120      	cbz	r0, 4103a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   41030:	2200      	movs	r2, #0
   41032:	30d8      	adds	r0, #216	; 0xd8
   41034:	4611      	mov	r1, r2
   41036:	f7f7 bbb5 	b.w	387a4 <z_sched_wake>
}
   4103a:	4770      	bx	lr

0004103c <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   4103c:	68c3      	ldr	r3, [r0, #12]
{
   4103e:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41040:	f3c3 0540 	ubfx	r5, r3, #1, #1
   41044:	079b      	lsls	r3, r3, #30
{
   41046:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   41048:	d416      	bmi.n	41078 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   4104a:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   4104c:	2102      	movs	r1, #2
   4104e:	300c      	adds	r0, #12
   41050:	f7ff ffd4 	bl	40ffc <flag_test_and_clear>
   41054:	b180      	cbz	r0, 41078 <cancel_async_locked+0x3c>
	return list->head;
   41056:	f8d6 20d0 	ldr.w	r2, [r6, #208]	; 0xd0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4105a:	b16a      	cbz	r2, 41078 <cancel_async_locked+0x3c>
   4105c:	4294      	cmp	r4, r2
   4105e:	d11b      	bne.n	41098 <cancel_async_locked+0x5c>
	return node->next;
   41060:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   41062:	f8d6 10d4 	ldr.w	r1, [r6, #212]	; 0xd4
Z_GENLIST_REMOVE(slist, snode)
   41066:	b98d      	cbnz	r5, 4108c <cancel_async_locked+0x50>
   41068:	428c      	cmp	r4, r1
	list->head = node;
   4106a:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
Z_GENLIST_REMOVE(slist, snode)
   4106e:	d101      	bne.n	41074 <cancel_async_locked+0x38>
	list->tail = node;
   41070:	f8c6 20d4 	str.w	r2, [r6, #212]	; 0xd4
	parent->next = child;
   41074:	2300      	movs	r3, #0
   41076:	6023      	str	r3, [r4, #0]
	return *flagp;
   41078:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   4107a:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   4107e:	bf1e      	ittt	ne
   41080:	f043 0302 	orrne.w	r3, r3, #2
   41084:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   41086:	f003 000f 	andne.w	r0, r3, #15
}
   4108a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   4108c:	428c      	cmp	r4, r1
	parent->next = child;
   4108e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   41090:	bf08      	it	eq
   41092:	f8c6 50d4 	streq.w	r5, [r6, #212]	; 0xd4
}
   41096:	e7ed      	b.n	41074 <cancel_async_locked+0x38>
	return node->next;
   41098:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4109a:	6812      	ldr	r2, [r2, #0]
   4109c:	e7dd      	b.n	4105a <cancel_async_locked+0x1e>

0004109e <k_work_delayable_busy_get>:
   4109e:	f7f6 b8fb 	b.w	37298 <k_work_busy_get>

000410a2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   410a2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   410a6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   410aa:	4283      	cmp	r3, r0
		return b2 - b1;
   410ac:	bf14      	ite	ne
   410ae:	1ac0      	subne	r0, r0, r3
	return 0;
   410b0:	2000      	moveq	r0, #0
}
   410b2:	4770      	bx	lr

000410b4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   410b4:	4603      	mov	r3, r0
   410b6:	b920      	cbnz	r0, 410c2 <z_reschedule_irqlock+0xe>
   410b8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   410bc:	b90a      	cbnz	r2, 410c2 <z_reschedule_irqlock+0xe>
   410be:	f7e1 bde1 	b.w	22c84 <arch_swap>
   410c2:	f383 8811 	msr	BASEPRI, r3
   410c6:	f3bf 8f6f 	isb	sy
}
   410ca:	4770      	bx	lr

000410cc <z_reschedule_unlocked>:
	__asm__ volatile(
   410cc:	f04f 0320 	mov.w	r3, #32
   410d0:	f3ef 8011 	mrs	r0, BASEPRI
   410d4:	f383 8812 	msr	BASEPRI_MAX, r3
   410d8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   410dc:	f7ff bfea 	b.w	410b4 <z_reschedule_irqlock>

000410e0 <z_priq_dumb_best>:
	return list->head == list;
   410e0:	6803      	ldr	r3, [r0, #0]
}
   410e2:	4298      	cmp	r0, r3
   410e4:	bf14      	ite	ne
   410e6:	4618      	movne	r0, r3
   410e8:	2000      	moveq	r0, #0
   410ea:	4770      	bx	lr

000410ec <z_unpend_all>:
{
   410ec:	b538      	push	{r3, r4, r5, lr}
   410ee:	4605      	mov	r5, r0
	int need_sched = 0;
   410f0:	2000      	movs	r0, #0
   410f2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   410f4:	42a5      	cmp	r5, r4
   410f6:	d000      	beq.n	410fa <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   410f8:	b904      	cbnz	r4, 410fc <z_unpend_all+0x10>
}
   410fa:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   410fc:	4620      	mov	r0, r4
   410fe:	f7f6 fcc1 	bl	37a84 <z_unpend_thread>
		z_ready_thread(thread);
   41102:	4620      	mov	r0, r4
   41104:	f7f6 fe28 	bl	37d58 <z_ready_thread>
		need_sched = 1;
   41108:	2001      	movs	r0, #1
   4110a:	e7f2      	b.n	410f2 <z_unpend_all+0x6>

0004110c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   4110c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   4110e:	f7f7 fe63 	bl	38dd8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   41112:	bd08      	pop	{r3, pc}

00041114 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   41114:	f7f7 be60 	b.w	38dd8 <sys_clock_tick_get>

00041118 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   41118:	b108      	cbz	r0, 4111e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   4111a:	f7e0 ba2b 	b.w	21574 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   4111e:	4770      	bx	lr

00041120 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41120:	f1b1 3fff 	cmp.w	r1, #4294967295
   41124:	bf08      	it	eq
   41126:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   4112a:	b538      	push	{r3, r4, r5, lr}
   4112c:	4605      	mov	r5, r0
   4112e:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41130:	d020      	beq.n	41174 <sys_clock_timeout_end_calc+0x54>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   41132:	ea51 0300 	orrs.w	r3, r1, r0
   41136:	d103      	bne.n	41140 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   41138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   4113c:	f7f7 be4c 	b.w	38dd8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   41140:	f06f 0301 	mvn.w	r3, #1
   41144:	f04f 31ff 	mov.w	r1, #4294967295
   41148:	1a1b      	subs	r3, r3, r0
   4114a:	eb61 0204 	sbc.w	r2, r1, r4
   4114e:	2a00      	cmp	r2, #0
   41150:	db02      	blt.n	41158 <sys_clock_timeout_end_calc+0x38>
			return Z_TICK_ABS(dt);
   41152:	4618      	mov	r0, r3
   41154:	4611      	mov	r1, r2
}
   41156:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   41158:	f7f7 fe3e 	bl	38dd8 <sys_clock_tick_get>
   4115c:	2d01      	cmp	r5, #1
   4115e:	4622      	mov	r2, r4
   41160:	f174 0400 	sbcs.w	r4, r4, #0
   41164:	462b      	mov	r3, r5
   41166:	bfbc      	itt	lt
   41168:	2301      	movlt	r3, #1
   4116a:	2200      	movlt	r2, #0
   4116c:	1818      	adds	r0, r3, r0
   4116e:	eb41 0102 	adc.w	r1, r1, r2
   41172:	e7f0      	b.n	41156 <sys_clock_timeout_end_calc+0x36>
		return UINT64_MAX;
   41174:	f04f 30ff 	mov.w	r0, #4294967295
   41178:	4601      	mov	r1, r0
   4117a:	e7ec      	b.n	41156 <sys_clock_timeout_end_calc+0x36>

0004117c <add_event>:
{
   4117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4117e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   41180:	e9d0 1300 	ldrd	r1, r3, [r0]
   41184:	4288      	cmp	r0, r1
   41186:	4604      	mov	r4, r0
   41188:	d00d      	beq.n	411a6 <add_event+0x2a>
	if ((pending == NULL) ||
   4118a:	b163      	cbz	r3, 411a6 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   4118c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   4118e:	b100      	cbz	r0, 41192 <add_event+0x16>
   41190:	3860      	subs	r0, #96	; 0x60
   41192:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   41196:	4639      	mov	r1, r7
   41198:	f7ff ff83 	bl	410a2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   4119c:	2800      	cmp	r0, #0
   4119e:	dc02      	bgt.n	411a6 <add_event+0x2a>
	return list->head == list;
   411a0:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   411a2:	42b4      	cmp	r4, r6
   411a4:	d109      	bne.n	411ba <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   411a6:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   411a8:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   411ac:	601d      	str	r5, [r3, #0]
	list->tail = node;
   411ae:	6065      	str	r5, [r4, #4]
}
   411b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   411b2:	6863      	ldr	r3, [r4, #4]
   411b4:	42b3      	cmp	r3, r6
   411b6:	d0f6      	beq.n	411a6 <add_event+0x2a>
   411b8:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   411ba:	2e00      	cmp	r6, #0
   411bc:	d0f3      	beq.n	411a6 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   411be:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   411c0:	b101      	cbz	r1, 411c4 <add_event+0x48>
   411c2:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   411c4:	4638      	mov	r0, r7
   411c6:	f7ff ff6c 	bl	410a2 <z_sched_prio_cmp>
   411ca:	2800      	cmp	r0, #0
   411cc:	ddf1      	ble.n	411b2 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   411ce:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   411d0:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   411d4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   411d6:	6075      	str	r5, [r6, #4]
			return;
   411d8:	e7ea      	b.n	411b0 <add_event+0x34>

000411da <signal_poll_event>:
{
   411da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   411de:	6884      	ldr	r4, [r0, #8]
{
   411e0:	4605      	mov	r5, r0
   411e2:	460e      	mov	r6, r1
	if (poller != NULL) {
   411e4:	b144      	cbz	r4, 411f8 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   411e6:	7863      	ldrb	r3, [r4, #1]
   411e8:	2b01      	cmp	r3, #1
   411ea:	d137      	bne.n	4125c <signal_poll_event+0x82>
	if (!z_is_thread_pending(thread)) {
   411ec:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   411f0:	f013 0302 	ands.w	r3, r3, #2
   411f4:	d10a      	bne.n	4120c <signal_poll_event+0x32>
		poller->is_polling = false;
   411f6:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   411f8:	2000      	movs	r0, #0
	event->state |= state;
   411fa:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   411fc:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   411fe:	f3c3 3145 	ubfx	r1, r3, #13, #6
   41202:	430e      	orrs	r6, r1
   41204:	f366 3352 	bfi	r3, r6, #13, #6
   41208:	60eb      	str	r3, [r5, #12]
	return retcode;
   4120a:	e00b      	b.n	41224 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   4120c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   41210:	f1b3 3fff 	cmp.w	r3, #4294967295
   41214:	bf08      	it	eq
   41216:	f112 0f02 	cmneq.w	r2, #2
   4121a:	d106      	bne.n	4122a <signal_poll_event+0x50>
		poller->is_polling = false;
   4121c:	2300      	movs	r3, #0
		return -EAGAIN;
   4121e:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   41222:	7023      	strb	r3, [r4, #0]
}
   41224:	b002      	add	sp, #8
   41226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   4122a:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
	z_unpend_thread(thread);
   4122e:	9001      	str	r0, [sp, #4]
   41230:	f7f6 fc28 	bl	37a84 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   41234:	2e08      	cmp	r6, #8
   41236:	bf0c      	ite	eq
   41238:	f06f 0303 	mvneq.w	r3, #3
   4123c:	2300      	movne	r3, #0
   4123e:	62a3      	str	r3, [r4, #40]	; 0x28
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   41240:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   41244:	06db      	lsls	r3, r3, #27
   41246:	d103      	bne.n	41250 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   41248:	f854 7c48 	ldr.w	r7, [r4, #-72]
   4124c:	9801      	ldr	r0, [sp, #4]
   4124e:	b10f      	cbz	r7, 41254 <signal_poll_event+0x7a>
		poller->is_polling = false;
   41250:	2300      	movs	r3, #0
   41252:	e7d0      	b.n	411f6 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   41254:	f7f6 fd80 	bl	37d58 <z_ready_thread>
		poller->is_polling = false;
   41258:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   4125a:	e7cd      	b.n	411f8 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   4125c:	2b02      	cmp	r3, #2
   4125e:	d1f7      	bne.n	41250 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   41260:	7823      	ldrb	r3, [r4, #0]
   41262:	2b00      	cmp	r3, #0
   41264:	d0c8      	beq.n	411f8 <signal_poll_event+0x1e>
   41266:	f854 7c04 	ldr.w	r7, [r4, #-4]
   4126a:	2f00      	cmp	r7, #0
   4126c:	d0f4      	beq.n	41258 <signal_poll_event+0x7e>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   4126e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   41272:	f1a4 0114 	sub.w	r1, r4, #20
   41276:	f104 0014 	add.w	r0, r4, #20
   4127a:	9101      	str	r1, [sp, #4]
   4127c:	f7f7 fc24 	bl	38ac8 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   41280:	4638      	mov	r0, r7
   41282:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   41284:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   41288:	f7f6 f83c 	bl	37304 <k_work_submit_to_queue>
		poller->is_polling = false;
   4128c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   41290:	e7b2      	b.n	411f8 <signal_poll_event+0x1e>

00041292 <z_handle_obj_poll_events>:
{
   41292:	4603      	mov	r3, r0
	return list->head == list;
   41294:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   41296:	4283      	cmp	r3, r0
   41298:	d008      	beq.n	412ac <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   4129a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   4129e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   412a0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   412a2:	2300      	movs	r3, #0
	node->prev = NULL;
   412a4:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   412a8:	f7ff bf97 	b.w	411da <signal_poll_event>
}
   412ac:	4770      	bx	lr

000412ae <z_impl_k_event_post>:
	k_event_post_internal(event, events, true);
   412ae:	2201      	movs	r2, #1
   412b0:	f7f8 b9cc 	b.w	3964c <k_event_post_internal>

000412b4 <z_impl_k_event_set>:
	k_event_post_internal(event, events, false);
   412b4:	2200      	movs	r2, #0
   412b6:	f7f8 b9c9 	b.w	3964c <k_event_post_internal>

000412ba <z_impl_k_event_wait>:
 * Wait for any of the specified events
 */
uint32_t z_impl_k_event_wait(struct k_event *event, uint32_t events,
			     bool reset, k_timeout_t timeout)
{
	uint32_t options = reset ? K_EVENT_WAIT_RESET : 0;
   412ba:	2a00      	cmp	r2, #0

	return k_event_wait_internal(event, events, options, timeout);
   412bc:	bf14      	ite	ne
   412be:	2202      	movne	r2, #2
   412c0:	2200      	moveq	r2, #0
   412c2:	f7f8 ba1b 	b.w	396fc <k_event_wait_internal>

000412c6 <z_impl_k_event_wait_all>:
 */
uint32_t z_impl_k_event_wait_all(struct k_event *event, uint32_t events,
				 bool reset, k_timeout_t timeout)
{
	uint32_t options = reset ? (K_EVENT_WAIT_RESET | K_EVENT_WAIT_ALL)
				 : K_EVENT_WAIT_ALL;
   412c6:	2a00      	cmp	r2, #0

	return k_event_wait_internal(event, events, options, timeout);
   412c8:	bf14      	ite	ne
   412ca:	2203      	movne	r2, #3
   412cc:	2201      	moveq	r2, #1
   412ce:	f7f8 ba15 	b.w	396fc <k_event_wait_internal>

000412d2 <k_free>:
	if (ptr != NULL) {
   412d2:	b120      	cbz	r0, 412de <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   412d4:	1f01      	subs	r1, r0, #4
   412d6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   412da:	f7f4 bff3 	b.w	362c4 <k_heap_free>
}
   412de:	4770      	bx	lr

000412e0 <k_malloc>:
{
   412e0:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   412e2:	2004      	movs	r0, #4
   412e4:	f7f8 bac2 	b.w	3986c <k_aligned_alloc>

000412e8 <k_calloc>:
{
   412e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   412ea:	fba0 2401 	umull	r2, r4, r0, r1
   412ee:	b94c      	cbnz	r4, 41304 <k_calloc+0x1c>
	ret = k_malloc(bounds);
   412f0:	4610      	mov	r0, r2
   412f2:	9201      	str	r2, [sp, #4]
   412f4:	f7ff fff4 	bl	412e0 <k_malloc>
	if (ret != NULL) {
   412f8:	9a01      	ldr	r2, [sp, #4]
   412fa:	4605      	mov	r5, r0
   412fc:	b920      	cbnz	r0, 41308 <k_calloc+0x20>
}
   412fe:	4628      	mov	r0, r5
   41300:	b003      	add	sp, #12
   41302:	bd30      	pop	{r4, r5, pc}
		return NULL;
   41304:	2500      	movs	r5, #0
   41306:	e7fa      	b.n	412fe <k_calloc+0x16>
__ssp_bos_icheck3(memset, void *, int)
   41308:	4621      	mov	r1, r4
   4130a:	f000 f893 	bl	41434 <memset>
   4130e:	e7f6      	b.n	412fe <k_calloc+0x16>

00041310 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   41310:	4770      	bx	lr

00041312 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   41312:	b510      	push	{r4, lr}
   41314:	b088      	sub	sp, #32
   41316:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   41318:	ab05      	add	r3, sp, #20
   4131a:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   4131c:	230c      	movs	r3, #12
   4131e:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   41320:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   41322:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   41326:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   4132a:	eb0d 0103 	add.w	r1, sp, r3
   4132e:	aa03      	add	r2, sp, #12
   41330:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   41332:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   41336:	f000 f804 	bl	41342 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   4133a:	9b00      	ldr	r3, [sp, #0]
   4133c:	6023      	str	r3, [r4, #0]

	return ret;
}
   4133e:	b008      	add	sp, #32
   41340:	bd10      	pop	{r4, pc}

00041342 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   41342:	2300      	movs	r3, #0
{
   41344:	b570      	push	{r4, r5, r6, lr}
   41346:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   41348:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   4134c:	ab03      	add	r3, sp, #12
   4134e:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   41350:	2304      	movs	r3, #4
{
   41352:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   41354:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   41356:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   41358:	b169      	cbz	r1, 41376 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   4135a:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   4135c:	680b      	ldr	r3, [r1, #0]
   4135e:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   41360:	684b      	ldr	r3, [r1, #4]
   41362:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   41364:	2101      	movs	r1, #1
   41366:	2041      	movs	r0, #65	; 0x41
   41368:	f7f8 fb14 	bl	39994 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   4136c:	1e05      	subs	r5, r0, #0
   4136e:	dc04      	bgt.n	4137a <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   41370:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   41372:	b008      	add	sp, #32
   41374:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   41376:	2601      	movs	r6, #1
   41378:	e7f4      	b.n	41364 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   4137a:	1e23      	subs	r3, r4, #0
   4137c:	bf18      	it	ne
   4137e:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   41380:	2100      	movs	r1, #0
   41382:	e9cd 4300 	strd	r4, r3, [sp]
   41386:	aa04      	add	r2, sp, #16
   41388:	4633      	mov	r3, r6
   4138a:	f7f8 fb11 	bl	399b0 <psa_call>
   4138e:	4604      	mov	r4, r0
    psa_close(handle);
   41390:	4628      	mov	r0, r5
   41392:	f7f8 fb29 	bl	399e8 <psa_close>
    if (status < PSA_SUCCESS) {
   41396:	2c00      	cmp	r4, #0
   41398:	dbea      	blt.n	41370 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   4139a:	4620      	mov	r0, r4
   4139c:	e7e9      	b.n	41372 <tfm_platform_ioctl+0x30>

0004139e <psa_crypto_init>:
}
   4139e:	2000      	movs	r0, #0
   413a0:	4770      	bx	lr

000413a2 <fabs>:
   413a2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   413a6:	4770      	bx	lr

000413a8 <abs>:
   413a8:	2800      	cmp	r0, #0
   413aa:	bfb8      	it	lt
   413ac:	4240      	neglt	r0, r0
   413ae:	4770      	bx	lr

000413b0 <atoi>:
   413b0:	220a      	movs	r2, #10
   413b2:	2100      	movs	r1, #0
   413b4:	f7f9 ba64 	b.w	3a880 <strtol>

000413b8 <memchr>:
   413b8:	b2c9      	uxtb	r1, r1
   413ba:	4402      	add	r2, r0
   413bc:	b510      	push	{r4, lr}
   413be:	4290      	cmp	r0, r2
   413c0:	4603      	mov	r3, r0
   413c2:	d101      	bne.n	413c8 <memchr+0x10>
   413c4:	2300      	movs	r3, #0
   413c6:	e003      	b.n	413d0 <memchr+0x18>
   413c8:	781c      	ldrb	r4, [r3, #0]
   413ca:	3001      	adds	r0, #1
   413cc:	428c      	cmp	r4, r1
   413ce:	d1f6      	bne.n	413be <memchr+0x6>
   413d0:	4618      	mov	r0, r3
   413d2:	bd10      	pop	{r4, pc}

000413d4 <memcmp>:
   413d4:	3901      	subs	r1, #1
   413d6:	4402      	add	r2, r0
   413d8:	b510      	push	{r4, lr}
   413da:	4290      	cmp	r0, r2
   413dc:	d101      	bne.n	413e2 <memcmp+0xe>
   413de:	2000      	movs	r0, #0
   413e0:	e005      	b.n	413ee <memcmp+0x1a>
   413e2:	7803      	ldrb	r3, [r0, #0]
   413e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   413e8:	42a3      	cmp	r3, r4
   413ea:	d001      	beq.n	413f0 <memcmp+0x1c>
   413ec:	1b18      	subs	r0, r3, r4
   413ee:	bd10      	pop	{r4, pc}
   413f0:	3001      	adds	r0, #1
   413f2:	e7f2      	b.n	413da <memcmp+0x6>

000413f4 <memcpy>:
   413f4:	440a      	add	r2, r1
   413f6:	1e43      	subs	r3, r0, #1
   413f8:	4291      	cmp	r1, r2
   413fa:	d100      	bne.n	413fe <memcpy+0xa>
   413fc:	4770      	bx	lr
   413fe:	b510      	push	{r4, lr}
   41400:	f811 4b01 	ldrb.w	r4, [r1], #1
   41404:	4291      	cmp	r1, r2
   41406:	f803 4f01 	strb.w	r4, [r3, #1]!
   4140a:	d1f9      	bne.n	41400 <memcpy+0xc>
   4140c:	bd10      	pop	{r4, pc}

0004140e <__memcpy_chk>:
   4140e:	429a      	cmp	r2, r3
   41410:	b508      	push	{r3, lr}
   41412:	d901      	bls.n	41418 <__memcpy_chk+0xa>
   41414:	f7e2 fad2 	bl	239bc <__chk_fail>
   41418:	4281      	cmp	r1, r0
   4141a:	d804      	bhi.n	41426 <__memcpy_chk+0x18>
   4141c:	188b      	adds	r3, r1, r2
   4141e:	4298      	cmp	r0, r3
   41420:	d3f8      	bcc.n	41414 <__memcpy_chk+0x6>
   41422:	4281      	cmp	r1, r0
   41424:	d102      	bne.n	4142c <__memcpy_chk+0x1e>
   41426:	1883      	adds	r3, r0, r2
   41428:	4299      	cmp	r1, r3
   4142a:	d3f3      	bcc.n	41414 <__memcpy_chk+0x6>
   4142c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   41430:	f7ff bfe0 	b.w	413f4 <memcpy>

00041434 <memset>:
   41434:	4402      	add	r2, r0
   41436:	4603      	mov	r3, r0
   41438:	4293      	cmp	r3, r2
   4143a:	d100      	bne.n	4143e <memset+0xa>
   4143c:	4770      	bx	lr
   4143e:	f803 1b01 	strb.w	r1, [r3], #1
   41442:	e7f9      	b.n	41438 <memset+0x4>

00041444 <_calloc_r>:
   41444:	434a      	muls	r2, r1
   41446:	b513      	push	{r0, r1, r4, lr}
   41448:	4611      	mov	r1, r2
   4144a:	9201      	str	r2, [sp, #4]
   4144c:	f7f8 fc12 	bl	39c74 <_malloc_r>
   41450:	4604      	mov	r4, r0
   41452:	b118      	cbz	r0, 4145c <_calloc_r+0x18>
   41454:	9a01      	ldr	r2, [sp, #4]
   41456:	2100      	movs	r1, #0
   41458:	f7ff ffec 	bl	41434 <memset>
   4145c:	4620      	mov	r0, r4
   4145e:	b002      	add	sp, #8
   41460:	bd10      	pop	{r4, pc}

00041462 <__sfputc_r>:
   41462:	6893      	ldr	r3, [r2, #8]
   41464:	3b01      	subs	r3, #1
   41466:	2b00      	cmp	r3, #0
   41468:	6093      	str	r3, [r2, #8]
   4146a:	b410      	push	{r4}
   4146c:	da08      	bge.n	41480 <__sfputc_r+0x1e>
   4146e:	6994      	ldr	r4, [r2, #24]
   41470:	42a3      	cmp	r3, r4
   41472:	db01      	blt.n	41478 <__sfputc_r+0x16>
   41474:	290a      	cmp	r1, #10
   41476:	d103      	bne.n	41480 <__sfputc_r+0x1e>
   41478:	f85d 4b04 	ldr.w	r4, [sp], #4
   4147c:	f7f9 bb82 	b.w	3ab84 <__swbuf_r>
   41480:	6813      	ldr	r3, [r2, #0]
   41482:	1c58      	adds	r0, r3, #1
   41484:	6010      	str	r0, [r2, #0]
   41486:	4608      	mov	r0, r1
   41488:	7019      	strb	r1, [r3, #0]
   4148a:	f85d 4b04 	ldr.w	r4, [sp], #4
   4148e:	4770      	bx	lr

00041490 <__sfputs_r>:
   41490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41492:	4606      	mov	r6, r0
   41494:	460f      	mov	r7, r1
   41496:	4614      	mov	r4, r2
   41498:	18d5      	adds	r5, r2, r3
   4149a:	42ac      	cmp	r4, r5
   4149c:	d101      	bne.n	414a2 <__sfputs_r+0x12>
   4149e:	2000      	movs	r0, #0
   414a0:	e007      	b.n	414b2 <__sfputs_r+0x22>
   414a2:	463a      	mov	r2, r7
   414a4:	f814 1b01 	ldrb.w	r1, [r4], #1
   414a8:	4630      	mov	r0, r6
   414aa:	f7ff ffda 	bl	41462 <__sfputc_r>
   414ae:	1c43      	adds	r3, r0, #1
   414b0:	d1f3      	bne.n	4149a <__sfputs_r+0xa>
   414b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000414b4 <__cvt>:
   414b4:	2b00      	cmp	r3, #0
   414b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   414ba:	461d      	mov	r5, r3
   414bc:	b088      	sub	sp, #32
   414be:	bfb4      	ite	lt
   414c0:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   414c4:	2300      	movge	r3, #0
   414c6:	4614      	mov	r4, r2
   414c8:	bfbc      	itt	lt
   414ca:	4614      	movlt	r4, r2
   414cc:	461d      	movlt	r5, r3
   414ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
   414d0:	bfb8      	it	lt
   414d2:	232d      	movlt	r3, #45	; 0x2d
   414d4:	9e10      	ldr	r6, [sp, #64]	; 0x40
   414d6:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   414da:	7013      	strb	r3, [r2, #0]
   414dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   414de:	f023 0820 	bic.w	r8, r3, #32
   414e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   414e6:	d005      	beq.n	414f4 <__cvt+0x40>
   414e8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   414ec:	d100      	bne.n	414f0 <__cvt+0x3c>
   414ee:	3601      	adds	r6, #1
   414f0:	2302      	movs	r3, #2
   414f2:	e000      	b.n	414f6 <__cvt+0x42>
   414f4:	2303      	movs	r3, #3
   414f6:	aa07      	add	r2, sp, #28
   414f8:	9204      	str	r2, [sp, #16]
   414fa:	aa06      	add	r2, sp, #24
   414fc:	e9cd 3600 	strd	r3, r6, [sp]
   41500:	e9cd a202 	strd	sl, r2, [sp, #8]
   41504:	462b      	mov	r3, r5
   41506:	4622      	mov	r2, r4
   41508:	f7dd fea6 	bl	1f258 <_dtoa_r>
   4150c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   41510:	4607      	mov	r7, r0
   41512:	d102      	bne.n	4151a <__cvt+0x66>
   41514:	9b11      	ldr	r3, [sp, #68]	; 0x44
   41516:	07db      	lsls	r3, r3, #31
   41518:	d522      	bpl.n	41560 <__cvt+0xac>
   4151a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   4151e:	eb07 0906 	add.w	r9, r7, r6
   41522:	d110      	bne.n	41546 <__cvt+0x92>
   41524:	783b      	ldrb	r3, [r7, #0]
   41526:	2b30      	cmp	r3, #48	; 0x30
   41528:	d10a      	bne.n	41540 <__cvt+0x8c>
   4152a:	2200      	movs	r2, #0
   4152c:	2300      	movs	r3, #0
   4152e:	4620      	mov	r0, r4
   41530:	4629      	mov	r1, r5
   41532:	f7db fba9 	bl	1cc88 <__aeabi_dcmpeq>
   41536:	b918      	cbnz	r0, 41540 <__cvt+0x8c>
   41538:	f1c6 0601 	rsb	r6, r6, #1
   4153c:	f8ca 6000 	str.w	r6, [sl]
   41540:	f8da 3000 	ldr.w	r3, [sl]
   41544:	4499      	add	r9, r3
   41546:	2200      	movs	r2, #0
   41548:	2300      	movs	r3, #0
   4154a:	4620      	mov	r0, r4
   4154c:	4629      	mov	r1, r5
   4154e:	f7db fb9b 	bl	1cc88 <__aeabi_dcmpeq>
   41552:	b108      	cbz	r0, 41558 <__cvt+0xa4>
   41554:	f8cd 901c 	str.w	r9, [sp, #28]
   41558:	2230      	movs	r2, #48	; 0x30
   4155a:	9b07      	ldr	r3, [sp, #28]
   4155c:	454b      	cmp	r3, r9
   4155e:	d307      	bcc.n	41570 <__cvt+0xbc>
   41560:	9b07      	ldr	r3, [sp, #28]
   41562:	4638      	mov	r0, r7
   41564:	9a15      	ldr	r2, [sp, #84]	; 0x54
   41566:	1bdb      	subs	r3, r3, r7
   41568:	6013      	str	r3, [r2, #0]
   4156a:	b008      	add	sp, #32
   4156c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41570:	1c59      	adds	r1, r3, #1
   41572:	9107      	str	r1, [sp, #28]
   41574:	701a      	strb	r2, [r3, #0]
   41576:	e7f0      	b.n	4155a <__cvt+0xa6>

00041578 <__exponent>:
   41578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4157a:	2900      	cmp	r1, #0
   4157c:	4603      	mov	r3, r0
   4157e:	bfb8      	it	lt
   41580:	4249      	neglt	r1, r1
   41582:	f803 2b02 	strb.w	r2, [r3], #2
   41586:	bfb4      	ite	lt
   41588:	222d      	movlt	r2, #45	; 0x2d
   4158a:	222b      	movge	r2, #43	; 0x2b
   4158c:	2909      	cmp	r1, #9
   4158e:	7042      	strb	r2, [r0, #1]
   41590:	dd2a      	ble.n	415e8 <__exponent+0x70>
   41592:	f10d 0407 	add.w	r4, sp, #7
   41596:	270a      	movs	r7, #10
   41598:	46a4      	mov	ip, r4
   4159a:	460a      	mov	r2, r1
   4159c:	46a6      	mov	lr, r4
   4159e:	3c01      	subs	r4, #1
   415a0:	2a63      	cmp	r2, #99	; 0x63
   415a2:	fb91 f6f7 	sdiv	r6, r1, r7
   415a6:	fb07 1516 	mls	r5, r7, r6, r1
   415aa:	4631      	mov	r1, r6
   415ac:	f105 0530 	add.w	r5, r5, #48	; 0x30
   415b0:	f80e 5c01 	strb.w	r5, [lr, #-1]
   415b4:	dcf1      	bgt.n	4159a <__exponent+0x22>
   415b6:	3130      	adds	r1, #48	; 0x30
   415b8:	f1ae 0502 	sub.w	r5, lr, #2
   415bc:	f804 1c01 	strb.w	r1, [r4, #-1]
   415c0:	1c44      	adds	r4, r0, #1
   415c2:	4629      	mov	r1, r5
   415c4:	4561      	cmp	r1, ip
   415c6:	d30a      	bcc.n	415de <__exponent+0x66>
   415c8:	f10d 0209 	add.w	r2, sp, #9
   415cc:	eba2 020e 	sub.w	r2, r2, lr
   415d0:	4565      	cmp	r5, ip
   415d2:	bf88      	it	hi
   415d4:	2200      	movhi	r2, #0
   415d6:	4413      	add	r3, r2
   415d8:	1a18      	subs	r0, r3, r0
   415da:	b003      	add	sp, #12
   415dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   415de:	f811 2b01 	ldrb.w	r2, [r1], #1
   415e2:	f804 2f01 	strb.w	r2, [r4, #1]!
   415e6:	e7ed      	b.n	415c4 <__exponent+0x4c>
   415e8:	2330      	movs	r3, #48	; 0x30
   415ea:	3130      	adds	r1, #48	; 0x30
   415ec:	7083      	strb	r3, [r0, #2]
   415ee:	1d03      	adds	r3, r0, #4
   415f0:	70c1      	strb	r1, [r0, #3]
   415f2:	e7f1      	b.n	415d8 <__exponent+0x60>

000415f4 <_printf_common>:
   415f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   415f8:	4616      	mov	r6, r2
   415fa:	4699      	mov	r9, r3
   415fc:	688a      	ldr	r2, [r1, #8]
   415fe:	4607      	mov	r7, r0
   41600:	690b      	ldr	r3, [r1, #16]
   41602:	460c      	mov	r4, r1
   41604:	f8dd 8020 	ldr.w	r8, [sp, #32]
   41608:	4293      	cmp	r3, r2
   4160a:	bfb8      	it	lt
   4160c:	4613      	movlt	r3, r2
   4160e:	6033      	str	r3, [r6, #0]
   41610:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   41614:	b10a      	cbz	r2, 4161a <_printf_common+0x26>
   41616:	3301      	adds	r3, #1
   41618:	6033      	str	r3, [r6, #0]
   4161a:	6823      	ldr	r3, [r4, #0]
   4161c:	0699      	lsls	r1, r3, #26
   4161e:	bf42      	ittt	mi
   41620:	6833      	ldrmi	r3, [r6, #0]
   41622:	3302      	addmi	r3, #2
   41624:	6033      	strmi	r3, [r6, #0]
   41626:	6825      	ldr	r5, [r4, #0]
   41628:	f015 0506 	ands.w	r5, r5, #6
   4162c:	d106      	bne.n	4163c <_printf_common+0x48>
   4162e:	f104 0a19 	add.w	sl, r4, #25
   41632:	68e3      	ldr	r3, [r4, #12]
   41634:	6832      	ldr	r2, [r6, #0]
   41636:	1a9b      	subs	r3, r3, r2
   41638:	42ab      	cmp	r3, r5
   4163a:	dc29      	bgt.n	41690 <_printf_common+0x9c>
   4163c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   41640:	1e13      	subs	r3, r2, #0
   41642:	6822      	ldr	r2, [r4, #0]
   41644:	bf18      	it	ne
   41646:	2301      	movne	r3, #1
   41648:	0692      	lsls	r2, r2, #26
   4164a:	d42e      	bmi.n	416aa <_printf_common+0xb6>
   4164c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   41650:	4649      	mov	r1, r9
   41652:	4638      	mov	r0, r7
   41654:	47c0      	blx	r8
   41656:	3001      	adds	r0, #1
   41658:	d021      	beq.n	4169e <_printf_common+0xaa>
   4165a:	6823      	ldr	r3, [r4, #0]
   4165c:	341a      	adds	r4, #26
   4165e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   41662:	f003 0306 	and.w	r3, r3, #6
   41666:	6832      	ldr	r2, [r6, #0]
   41668:	2600      	movs	r6, #0
   4166a:	2b04      	cmp	r3, #4
   4166c:	f854 3c12 	ldr.w	r3, [r4, #-18]
   41670:	bf08      	it	eq
   41672:	1aad      	subeq	r5, r5, r2
   41674:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   41678:	bf14      	ite	ne
   4167a:	2500      	movne	r5, #0
   4167c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   41680:	4293      	cmp	r3, r2
   41682:	bfc4      	itt	gt
   41684:	1a9b      	subgt	r3, r3, r2
   41686:	18ed      	addgt	r5, r5, r3
   41688:	42b5      	cmp	r5, r6
   4168a:	d11a      	bne.n	416c2 <_printf_common+0xce>
   4168c:	2000      	movs	r0, #0
   4168e:	e008      	b.n	416a2 <_printf_common+0xae>
   41690:	2301      	movs	r3, #1
   41692:	4652      	mov	r2, sl
   41694:	4649      	mov	r1, r9
   41696:	4638      	mov	r0, r7
   41698:	47c0      	blx	r8
   4169a:	3001      	adds	r0, #1
   4169c:	d103      	bne.n	416a6 <_printf_common+0xb2>
   4169e:	f04f 30ff 	mov.w	r0, #4294967295
   416a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   416a6:	3501      	adds	r5, #1
   416a8:	e7c3      	b.n	41632 <_printf_common+0x3e>
   416aa:	18e1      	adds	r1, r4, r3
   416ac:	1c5a      	adds	r2, r3, #1
   416ae:	2030      	movs	r0, #48	; 0x30
   416b0:	3302      	adds	r3, #2
   416b2:	4422      	add	r2, r4
   416b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   416b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   416bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   416c0:	e7c4      	b.n	4164c <_printf_common+0x58>
   416c2:	2301      	movs	r3, #1
   416c4:	4622      	mov	r2, r4
   416c6:	4649      	mov	r1, r9
   416c8:	4638      	mov	r0, r7
   416ca:	47c0      	blx	r8
   416cc:	3001      	adds	r0, #1
   416ce:	d0e6      	beq.n	4169e <_printf_common+0xaa>
   416d0:	3601      	adds	r6, #1
   416d2:	e7d9      	b.n	41688 <_printf_common+0x94>

000416d4 <__sprintf_chk>:
   416d4:	b408      	push	{r3}
   416d6:	b517      	push	{r0, r1, r2, r4, lr}
   416d8:	ab05      	add	r3, sp, #20
   416da:	1e14      	subs	r4, r2, #0
   416dc:	f853 1b04 	ldr.w	r1, [r3], #4
   416e0:	9301      	str	r3, [sp, #4]
   416e2:	da07      	bge.n	416f4 <__sprintf_chk+0x20>
   416e4:	461a      	mov	r2, r3
   416e6:	f7f9 fa15 	bl	3ab14 <vsiprintf>
   416ea:	b003      	add	sp, #12
   416ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   416f0:	b001      	add	sp, #4
   416f2:	4770      	bx	lr
   416f4:	460a      	mov	r2, r1
   416f6:	4621      	mov	r1, r4
   416f8:	f7f9 f9e8 	bl	3aacc <vsniprintf>
   416fc:	2800      	cmp	r0, #0
   416fe:	dbf4      	blt.n	416ea <__sprintf_chk+0x16>
   41700:	42a0      	cmp	r0, r4
   41702:	d3f2      	bcc.n	416ea <__sprintf_chk+0x16>
   41704:	f7e2 f95a 	bl	239bc <__chk_fail>

00041708 <__sread>:
   41708:	b510      	push	{r4, lr}
   4170a:	460c      	mov	r4, r1
   4170c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41710:	f7fa feec 	bl	3c4ec <_read_r>
   41714:	2800      	cmp	r0, #0
   41716:	bfab      	itete	ge
   41718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   4171a:	89a3      	ldrhlt	r3, [r4, #12]
   4171c:	181b      	addge	r3, r3, r0
   4171e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   41722:	bfac      	ite	ge
   41724:	6563      	strge	r3, [r4, #84]	; 0x54
   41726:	81a3      	strhlt	r3, [r4, #12]
   41728:	bd10      	pop	{r4, pc}

0004172a <__seofread>:
   4172a:	2000      	movs	r0, #0
   4172c:	4770      	bx	lr

0004172e <__swrite>:
   4172e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41732:	461f      	mov	r7, r3
   41734:	898b      	ldrh	r3, [r1, #12]
   41736:	4605      	mov	r5, r0
   41738:	460c      	mov	r4, r1
   4173a:	05db      	lsls	r3, r3, #23
   4173c:	4616      	mov	r6, r2
   4173e:	d505      	bpl.n	4174c <__swrite+0x1e>
   41740:	2302      	movs	r3, #2
   41742:	2200      	movs	r2, #0
   41744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41748:	f7f9 fec8 	bl	3b4dc <_lseek_r>
   4174c:	89a3      	ldrh	r3, [r4, #12]
   4174e:	4632      	mov	r2, r6
   41750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   41754:	4628      	mov	r0, r5
   41756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   4175a:	81a3      	strh	r3, [r4, #12]
   4175c:	463b      	mov	r3, r7
   4175e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   41762:	f7f9 ba61 	b.w	3ac28 <_write_r>

00041766 <__sseek>:
   41766:	b510      	push	{r4, lr}
   41768:	460c      	mov	r4, r1
   4176a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4176e:	f7f9 feb5 	bl	3b4dc <_lseek_r>
   41772:	1c43      	adds	r3, r0, #1
   41774:	89a3      	ldrh	r3, [r4, #12]
   41776:	bf15      	itete	ne
   41778:	6560      	strne	r0, [r4, #84]	; 0x54
   4177a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   4177e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   41782:	81a3      	strheq	r3, [r4, #12]
   41784:	bf18      	it	ne
   41786:	81a3      	strhne	r3, [r4, #12]
   41788:	bd10      	pop	{r4, pc}

0004178a <__sclose>:
   4178a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4178e:	f7f9 bacb 	b.w	3ad28 <_close_r>

00041792 <strcat>:
   41792:	4602      	mov	r2, r0
   41794:	b510      	push	{r4, lr}
   41796:	7814      	ldrb	r4, [r2, #0]
   41798:	4613      	mov	r3, r2
   4179a:	3201      	adds	r2, #1
   4179c:	2c00      	cmp	r4, #0
   4179e:	d1fa      	bne.n	41796 <strcat+0x4>
   417a0:	3b01      	subs	r3, #1
   417a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   417a6:	f803 2f01 	strb.w	r2, [r3, #1]!
   417aa:	2a00      	cmp	r2, #0
   417ac:	d1f9      	bne.n	417a2 <strcat+0x10>
   417ae:	bd10      	pop	{r4, pc}

000417b0 <strchr>:
   417b0:	b2c9      	uxtb	r1, r1
   417b2:	4603      	mov	r3, r0
   417b4:	f810 2b01 	ldrb.w	r2, [r0], #1
   417b8:	b11a      	cbz	r2, 417c2 <strchr+0x12>
   417ba:	428a      	cmp	r2, r1
   417bc:	d1f9      	bne.n	417b2 <strchr+0x2>
   417be:	4618      	mov	r0, r3
   417c0:	4770      	bx	lr
   417c2:	2900      	cmp	r1, #0
   417c4:	bf18      	it	ne
   417c6:	2300      	movne	r3, #0
   417c8:	e7f9      	b.n	417be <strchr+0xe>

000417ca <strcpy>:
   417ca:	4603      	mov	r3, r0
   417cc:	f811 2b01 	ldrb.w	r2, [r1], #1
   417d0:	f803 2b01 	strb.w	r2, [r3], #1
   417d4:	2a00      	cmp	r2, #0
   417d6:	d1f9      	bne.n	417cc <strcpy+0x2>
   417d8:	4770      	bx	lr

000417da <strncmp>:
   417da:	b510      	push	{r4, lr}
   417dc:	b17a      	cbz	r2, 417fe <strncmp+0x24>
   417de:	4603      	mov	r3, r0
   417e0:	3901      	subs	r1, #1
   417e2:	1884      	adds	r4, r0, r2
   417e4:	f813 0b01 	ldrb.w	r0, [r3], #1
   417e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   417ec:	4290      	cmp	r0, r2
   417ee:	d101      	bne.n	417f4 <strncmp+0x1a>
   417f0:	42a3      	cmp	r3, r4
   417f2:	d101      	bne.n	417f8 <strncmp+0x1e>
   417f4:	1a80      	subs	r0, r0, r2
   417f6:	bd10      	pop	{r4, pc}
   417f8:	2800      	cmp	r0, #0
   417fa:	d1f3      	bne.n	417e4 <strncmp+0xa>
   417fc:	e7fa      	b.n	417f4 <strncmp+0x1a>
   417fe:	4610      	mov	r0, r2
   41800:	e7f9      	b.n	417f6 <strncmp+0x1c>

00041802 <strncpy>:
   41802:	3901      	subs	r1, #1
   41804:	4603      	mov	r3, r0
   41806:	b510      	push	{r4, lr}
   41808:	b132      	cbz	r2, 41818 <strncpy+0x16>
   4180a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   4180e:	3a01      	subs	r2, #1
   41810:	f803 4b01 	strb.w	r4, [r3], #1
   41814:	2c00      	cmp	r4, #0
   41816:	d1f7      	bne.n	41808 <strncpy+0x6>
   41818:	441a      	add	r2, r3
   4181a:	2100      	movs	r1, #0
   4181c:	4293      	cmp	r3, r2
   4181e:	d100      	bne.n	41822 <strncpy+0x20>
   41820:	bd10      	pop	{r4, pc}
   41822:	f803 1b01 	strb.w	r1, [r3], #1
   41826:	e7f9      	b.n	4181c <strncpy+0x1a>

00041828 <strnlen>:
   41828:	4602      	mov	r2, r0
   4182a:	4401      	add	r1, r0
   4182c:	b510      	push	{r4, lr}
   4182e:	428a      	cmp	r2, r1
   41830:	4613      	mov	r3, r2
   41832:	d003      	beq.n	4183c <strnlen+0x14>
   41834:	781c      	ldrb	r4, [r3, #0]
   41836:	3201      	adds	r2, #1
   41838:	2c00      	cmp	r4, #0
   4183a:	d1f8      	bne.n	4182e <strnlen+0x6>
   4183c:	1a18      	subs	r0, r3, r0
   4183e:	bd10      	pop	{r4, pc}

00041840 <strrchr>:
   41840:	b538      	push	{r3, r4, r5, lr}
   41842:	4603      	mov	r3, r0
   41844:	460c      	mov	r4, r1
   41846:	b969      	cbnz	r1, 41864 <strrchr+0x24>
   41848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   4184c:	f7ff bfb0 	b.w	417b0 <strchr>
   41850:	1c43      	adds	r3, r0, #1
   41852:	4605      	mov	r5, r0
   41854:	4621      	mov	r1, r4
   41856:	4618      	mov	r0, r3
   41858:	f7ff ffaa 	bl	417b0 <strchr>
   4185c:	2800      	cmp	r0, #0
   4185e:	d1f7      	bne.n	41850 <strrchr+0x10>
   41860:	4628      	mov	r0, r5
   41862:	bd38      	pop	{r3, r4, r5, pc}
   41864:	2500      	movs	r5, #0
   41866:	e7f5      	b.n	41854 <strrchr+0x14>

00041868 <strstr>:
   41868:	780a      	ldrb	r2, [r1, #0]
   4186a:	b570      	push	{r4, r5, r6, lr}
   4186c:	b96a      	cbnz	r2, 4188a <strstr+0x22>
   4186e:	bd70      	pop	{r4, r5, r6, pc}
   41870:	429a      	cmp	r2, r3
   41872:	d109      	bne.n	41888 <strstr+0x20>
   41874:	460c      	mov	r4, r1
   41876:	4605      	mov	r5, r0
   41878:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   4187c:	2b00      	cmp	r3, #0
   4187e:	d0f6      	beq.n	4186e <strstr+0x6>
   41880:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   41884:	429e      	cmp	r6, r3
   41886:	d0f7      	beq.n	41878 <strstr+0x10>
   41888:	3001      	adds	r0, #1
   4188a:	7803      	ldrb	r3, [r0, #0]
   4188c:	2b00      	cmp	r3, #0
   4188e:	d1ef      	bne.n	41870 <strstr+0x8>
   41890:	4618      	mov	r0, r3
   41892:	e7ec      	b.n	4186e <strstr+0x6>

00041894 <sulp>:
   41894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41898:	4690      	mov	r8, r2
   4189a:	460f      	mov	r7, r1
   4189c:	f7fa f988 	bl	3bbb0 <__ulp>
   418a0:	4604      	mov	r4, r0
   418a2:	460d      	mov	r5, r1
   418a4:	f1b8 0f00 	cmp.w	r8, #0
   418a8:	d011      	beq.n	418ce <sulp+0x3a>
   418aa:	f3c7 530a 	ubfx	r3, r7, #20, #11
   418ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   418b2:	2b00      	cmp	r3, #0
   418b4:	dd0b      	ble.n	418ce <sulp+0x3a>
   418b6:	051b      	lsls	r3, r3, #20
   418b8:	2400      	movs	r4, #0
   418ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   418be:	4622      	mov	r2, r4
   418c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   418c4:	462b      	mov	r3, r5
   418c6:	f7da ff77 	bl	1c7b8 <__aeabi_dmul>
   418ca:	4604      	mov	r4, r0
   418cc:	460d      	mov	r5, r1
   418ce:	4620      	mov	r0, r4
   418d0:	4629      	mov	r1, r5
   418d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000418d6 <_strtol_r>:
   418d6:	f7f8 bf51 	b.w	3a77c <_strtol_l.constprop.0>

000418da <_strtoul_r>:
   418da:	f7f9 b87b 	b.w	3a9d4 <_strtoul_l.constprop.0>

000418de <_vsniprintf_r>:
   418de:	b530      	push	{r4, r5, lr}
   418e0:	4614      	mov	r4, r2
   418e2:	b09b      	sub	sp, #108	; 0x6c
   418e4:	4605      	mov	r5, r0
   418e6:	461a      	mov	r2, r3
   418e8:	2c00      	cmp	r4, #0
   418ea:	da05      	bge.n	418f8 <_vsniprintf_r+0x1a>
   418ec:	238b      	movs	r3, #139	; 0x8b
   418ee:	6003      	str	r3, [r0, #0]
   418f0:	f04f 30ff 	mov.w	r0, #4294967295
   418f4:	b01b      	add	sp, #108	; 0x6c
   418f6:	bd30      	pop	{r4, r5, pc}
   418f8:	f44f 7302 	mov.w	r3, #520	; 0x208
   418fc:	9100      	str	r1, [sp, #0]
   418fe:	9104      	str	r1, [sp, #16]
   41900:	4669      	mov	r1, sp
   41902:	f8ad 300c 	strh.w	r3, [sp, #12]
   41906:	bf14      	ite	ne
   41908:	f104 33ff 	addne.w	r3, r4, #4294967295
   4190c:	4623      	moveq	r3, r4
   4190e:	9302      	str	r3, [sp, #8]
   41910:	9305      	str	r3, [sp, #20]
   41912:	f64f 73ff 	movw	r3, #65535	; 0xffff
   41916:	f8ad 300e 	strh.w	r3, [sp, #14]
   4191a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   4191c:	f7fa fa18 	bl	3bd50 <_svfiprintf_r>
   41920:	1c43      	adds	r3, r0, #1
   41922:	bfbc      	itt	lt
   41924:	238b      	movlt	r3, #139	; 0x8b
   41926:	602b      	strlt	r3, [r5, #0]
   41928:	2c00      	cmp	r4, #0
   4192a:	d0e3      	beq.n	418f4 <_vsniprintf_r+0x16>
   4192c:	9b00      	ldr	r3, [sp, #0]
   4192e:	2200      	movs	r2, #0
   41930:	701a      	strb	r2, [r3, #0]
   41932:	e7df      	b.n	418f4 <_vsniprintf_r+0x16>

00041934 <abort>:
   41934:	2006      	movs	r0, #6
   41936:	b508      	push	{r3, lr}
   41938:	f7fa fdf0 	bl	3c51c <raise>
   4193c:	2001      	movs	r0, #1
   4193e:	f7e1 ffc5 	bl	238cc <_exit>

00041942 <quorem>:
   41942:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41946:	6903      	ldr	r3, [r0, #16]
   41948:	4607      	mov	r7, r0
   4194a:	690c      	ldr	r4, [r1, #16]
   4194c:	42a3      	cmp	r3, r4
   4194e:	f2c0 8085 	blt.w	41a5c <quorem+0x11a>
   41952:	3c01      	subs	r4, #1
   41954:	f100 0514 	add.w	r5, r0, #20
   41958:	f101 0814 	add.w	r8, r1, #20
   4195c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   41960:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   41964:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   41968:	9301      	str	r3, [sp, #4]
   4196a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   4196e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   41972:	3301      	adds	r3, #1
   41974:	429a      	cmp	r2, r3
   41976:	fbb2 f6f3 	udiv	r6, r2, r3
   4197a:	d333      	bcc.n	419e4 <quorem+0xa2>
   4197c:	f04f 0e00 	mov.w	lr, #0
   41980:	4640      	mov	r0, r8
   41982:	46ac      	mov	ip, r5
   41984:	46f2      	mov	sl, lr
   41986:	f850 2b04 	ldr.w	r2, [r0], #4
   4198a:	b293      	uxth	r3, r2
   4198c:	4581      	cmp	r9, r0
   4198e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   41992:	fb06 e303 	mla	r3, r6, r3, lr
   41996:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   4199a:	b29b      	uxth	r3, r3
   4199c:	fb06 e202 	mla	r2, r6, r2, lr
   419a0:	ebaa 0303 	sub.w	r3, sl, r3
   419a4:	f8dc a000 	ldr.w	sl, [ip]
   419a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   419ac:	fa1f fa8a 	uxth.w	sl, sl
   419b0:	4453      	add	r3, sl
   419b2:	fa1f fa82 	uxth.w	sl, r2
   419b6:	f8dc 2000 	ldr.w	r2, [ip]
   419ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   419be:	eb02 4223 	add.w	r2, r2, r3, asr #16
   419c2:	b29b      	uxth	r3, r3
   419c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
   419c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   419cc:	f84c 3b04 	str.w	r3, [ip], #4
   419d0:	d2d9      	bcs.n	41986 <quorem+0x44>
   419d2:	f855 300b 	ldr.w	r3, [r5, fp]
   419d6:	b92b      	cbnz	r3, 419e4 <quorem+0xa2>
   419d8:	9b01      	ldr	r3, [sp, #4]
   419da:	3b04      	subs	r3, #4
   419dc:	429d      	cmp	r5, r3
   419de:	461a      	mov	r2, r3
   419e0:	d330      	bcc.n	41a44 <quorem+0x102>
   419e2:	613c      	str	r4, [r7, #16]
   419e4:	4638      	mov	r0, r7
   419e6:	f000 fa38 	bl	41e5a <__mcmp>
   419ea:	2800      	cmp	r0, #0
   419ec:	db26      	blt.n	41a3c <quorem+0xfa>
   419ee:	3601      	adds	r6, #1
   419f0:	4628      	mov	r0, r5
   419f2:	f04f 0c00 	mov.w	ip, #0
   419f6:	f858 1b04 	ldr.w	r1, [r8], #4
   419fa:	f8d0 e000 	ldr.w	lr, [r0]
   419fe:	b28b      	uxth	r3, r1
   41a00:	45c1      	cmp	r9, r8
   41a02:	fa1f f28e 	uxth.w	r2, lr
   41a06:	ebac 0303 	sub.w	r3, ip, r3
   41a0a:	4413      	add	r3, r2
   41a0c:	ea4f 4211 	mov.w	r2, r1, lsr #16
   41a10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   41a14:	eb02 4223 	add.w	r2, r2, r3, asr #16
   41a18:	b29b      	uxth	r3, r3
   41a1a:	ea4f 4c22 	mov.w	ip, r2, asr #16
   41a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   41a22:	f840 3b04 	str.w	r3, [r0], #4
   41a26:	d2e6      	bcs.n	419f6 <quorem+0xb4>
   41a28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   41a2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   41a30:	b922      	cbnz	r2, 41a3c <quorem+0xfa>
   41a32:	3b04      	subs	r3, #4
   41a34:	429d      	cmp	r5, r3
   41a36:	461a      	mov	r2, r3
   41a38:	d30a      	bcc.n	41a50 <quorem+0x10e>
   41a3a:	613c      	str	r4, [r7, #16]
   41a3c:	4630      	mov	r0, r6
   41a3e:	b003      	add	sp, #12
   41a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41a44:	6812      	ldr	r2, [r2, #0]
   41a46:	3b04      	subs	r3, #4
   41a48:	2a00      	cmp	r2, #0
   41a4a:	d1ca      	bne.n	419e2 <quorem+0xa0>
   41a4c:	3c01      	subs	r4, #1
   41a4e:	e7c5      	b.n	419dc <quorem+0x9a>
   41a50:	6812      	ldr	r2, [r2, #0]
   41a52:	3b04      	subs	r3, #4
   41a54:	2a00      	cmp	r2, #0
   41a56:	d1f0      	bne.n	41a3a <quorem+0xf8>
   41a58:	3c01      	subs	r4, #1
   41a5a:	e7eb      	b.n	41a34 <quorem+0xf2>
   41a5c:	2000      	movs	r0, #0
   41a5e:	e7ee      	b.n	41a3e <quorem+0xfc>

00041a60 <__sfmoreglue>:
   41a60:	b570      	push	{r4, r5, r6, lr}
   41a62:	2268      	movs	r2, #104	; 0x68
   41a64:	1e4d      	subs	r5, r1, #1
   41a66:	460e      	mov	r6, r1
   41a68:	4355      	muls	r5, r2
   41a6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
   41a6e:	f7f8 f901 	bl	39c74 <_malloc_r>
   41a72:	4604      	mov	r4, r0
   41a74:	b140      	cbz	r0, 41a88 <__sfmoreglue+0x28>
   41a76:	2100      	movs	r1, #0
   41a78:	f105 0268 	add.w	r2, r5, #104	; 0x68
   41a7c:	e9c0 1600 	strd	r1, r6, [r0]
   41a80:	300c      	adds	r0, #12
   41a82:	60a0      	str	r0, [r4, #8]
   41a84:	f7ff fcd6 	bl	41434 <memset>
   41a88:	4620      	mov	r0, r4
   41a8a:	bd70      	pop	{r4, r5, r6, pc}

00041a8c <_fwalk_reent>:
   41a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   41a90:	4606      	mov	r6, r0
   41a92:	4688      	mov	r8, r1
   41a94:	f100 0448 	add.w	r4, r0, #72	; 0x48
   41a98:	2700      	movs	r7, #0
   41a9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   41a9e:	f1b9 0901 	subs.w	r9, r9, #1
   41aa2:	d505      	bpl.n	41ab0 <_fwalk_reent+0x24>
   41aa4:	6824      	ldr	r4, [r4, #0]
   41aa6:	2c00      	cmp	r4, #0
   41aa8:	d1f7      	bne.n	41a9a <_fwalk_reent+0xe>
   41aaa:	4638      	mov	r0, r7
   41aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   41ab0:	89ab      	ldrh	r3, [r5, #12]
   41ab2:	2b01      	cmp	r3, #1
   41ab4:	d907      	bls.n	41ac6 <_fwalk_reent+0x3a>
   41ab6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   41aba:	3301      	adds	r3, #1
   41abc:	d003      	beq.n	41ac6 <_fwalk_reent+0x3a>
   41abe:	4629      	mov	r1, r5
   41ac0:	4630      	mov	r0, r6
   41ac2:	47c0      	blx	r8
   41ac4:	4307      	orrs	r7, r0
   41ac6:	3568      	adds	r5, #104	; 0x68
   41ac8:	e7e9      	b.n	41a9e <_fwalk_reent+0x12>

00041aca <rshift>:
   41aca:	6903      	ldr	r3, [r0, #16]
   41acc:	114a      	asrs	r2, r1, #5
   41ace:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   41ad2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   41ad6:	f100 0414 	add.w	r4, r0, #20
   41ada:	dd45      	ble.n	41b68 <rshift+0x9e>
   41adc:	f011 011f 	ands.w	r1, r1, #31
   41ae0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   41ae4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   41ae8:	d10c      	bne.n	41b04 <rshift+0x3a>
   41aea:	f100 0710 	add.w	r7, r0, #16
   41aee:	4629      	mov	r1, r5
   41af0:	42b1      	cmp	r1, r6
   41af2:	d334      	bcc.n	41b5e <rshift+0x94>
   41af4:	1a9b      	subs	r3, r3, r2
   41af6:	1eea      	subs	r2, r5, #3
   41af8:	009b      	lsls	r3, r3, #2
   41afa:	4296      	cmp	r6, r2
   41afc:	bf38      	it	cc
   41afe:	2300      	movcc	r3, #0
   41b00:	4423      	add	r3, r4
   41b02:	e015      	b.n	41b30 <rshift+0x66>
   41b04:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   41b08:	f1c1 0820 	rsb	r8, r1, #32
   41b0c:	f105 0e04 	add.w	lr, r5, #4
   41b10:	46a1      	mov	r9, r4
   41b12:	40cf      	lsrs	r7, r1
   41b14:	4576      	cmp	r6, lr
   41b16:	46f4      	mov	ip, lr
   41b18:	d815      	bhi.n	41b46 <rshift+0x7c>
   41b1a:	1a9a      	subs	r2, r3, r2
   41b1c:	3501      	adds	r5, #1
   41b1e:	0092      	lsls	r2, r2, #2
   41b20:	3a04      	subs	r2, #4
   41b22:	42ae      	cmp	r6, r5
   41b24:	bf38      	it	cc
   41b26:	2200      	movcc	r2, #0
   41b28:	18a3      	adds	r3, r4, r2
   41b2a:	50a7      	str	r7, [r4, r2]
   41b2c:	b107      	cbz	r7, 41b30 <rshift+0x66>
   41b2e:	3304      	adds	r3, #4
   41b30:	1b1a      	subs	r2, r3, r4
   41b32:	42a3      	cmp	r3, r4
   41b34:	ea4f 02a2 	mov.w	r2, r2, asr #2
   41b38:	bf08      	it	eq
   41b3a:	2300      	moveq	r3, #0
   41b3c:	6102      	str	r2, [r0, #16]
   41b3e:	bf08      	it	eq
   41b40:	6143      	streq	r3, [r0, #20]
   41b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   41b46:	f8dc c000 	ldr.w	ip, [ip]
   41b4a:	fa0c fc08 	lsl.w	ip, ip, r8
   41b4e:	ea4c 0707 	orr.w	r7, ip, r7
   41b52:	f849 7b04 	str.w	r7, [r9], #4
   41b56:	f85e 7b04 	ldr.w	r7, [lr], #4
   41b5a:	40cf      	lsrs	r7, r1
   41b5c:	e7da      	b.n	41b14 <rshift+0x4a>
   41b5e:	f851 cb04 	ldr.w	ip, [r1], #4
   41b62:	f847 cf04 	str.w	ip, [r7, #4]!
   41b66:	e7c3      	b.n	41af0 <rshift+0x26>
   41b68:	4623      	mov	r3, r4
   41b6a:	e7e1      	b.n	41b30 <rshift+0x66>

00041b6c <__hexdig_fun>:
   41b6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   41b70:	2b09      	cmp	r3, #9
   41b72:	d802      	bhi.n	41b7a <__hexdig_fun+0xe>
   41b74:	3820      	subs	r0, #32
   41b76:	b2c0      	uxtb	r0, r0
   41b78:	4770      	bx	lr
   41b7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   41b7e:	2b05      	cmp	r3, #5
   41b80:	d801      	bhi.n	41b86 <__hexdig_fun+0x1a>
   41b82:	3847      	subs	r0, #71	; 0x47
   41b84:	e7f7      	b.n	41b76 <__hexdig_fun+0xa>
   41b86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   41b8a:	2b05      	cmp	r3, #5
   41b8c:	d801      	bhi.n	41b92 <__hexdig_fun+0x26>
   41b8e:	3827      	subs	r0, #39	; 0x27
   41b90:	e7f1      	b.n	41b76 <__hexdig_fun+0xa>
   41b92:	2000      	movs	r0, #0
   41b94:	4770      	bx	lr

00041b96 <L_shift>:
   41b96:	f1c2 0208 	rsb	r2, r2, #8
   41b9a:	0092      	lsls	r2, r2, #2
   41b9c:	b570      	push	{r4, r5, r6, lr}
   41b9e:	f1c2 0620 	rsb	r6, r2, #32
   41ba2:	6843      	ldr	r3, [r0, #4]
   41ba4:	6804      	ldr	r4, [r0, #0]
   41ba6:	fa03 f506 	lsl.w	r5, r3, r6
   41baa:	40d3      	lsrs	r3, r2
   41bac:	432c      	orrs	r4, r5
   41bae:	6004      	str	r4, [r0, #0]
   41bb0:	f840 3f04 	str.w	r3, [r0, #4]!
   41bb4:	4288      	cmp	r0, r1
   41bb6:	d3f4      	bcc.n	41ba2 <L_shift+0xc>
   41bb8:	bd70      	pop	{r4, r5, r6, pc}

00041bba <__match>:
   41bba:	6803      	ldr	r3, [r0, #0]
   41bbc:	3301      	adds	r3, #1
   41bbe:	b530      	push	{r4, r5, lr}
   41bc0:	f811 4b01 	ldrb.w	r4, [r1], #1
   41bc4:	b914      	cbnz	r4, 41bcc <__match+0x12>
   41bc6:	6003      	str	r3, [r0, #0]
   41bc8:	2001      	movs	r0, #1
   41bca:	bd30      	pop	{r4, r5, pc}
   41bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
   41bd0:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   41bd4:	2d19      	cmp	r5, #25
   41bd6:	bf98      	it	ls
   41bd8:	3220      	addls	r2, #32
   41bda:	42a2      	cmp	r2, r4
   41bdc:	d0f0      	beq.n	41bc0 <__match+0x6>
   41bde:	2000      	movs	r0, #0
   41be0:	e7f3      	b.n	41bca <__match+0x10>

00041be2 <__hexnan>:
   41be2:	680b      	ldr	r3, [r1, #0]
   41be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41be8:	115e      	asrs	r6, r3, #5
   41bea:	f013 031f 	ands.w	r3, r3, #31
   41bee:	f04f 0500 	mov.w	r5, #0
   41bf2:	b087      	sub	sp, #28
   41bf4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   41bf8:	4690      	mov	r8, r2
   41bfa:	4682      	mov	sl, r0
   41bfc:	6802      	ldr	r2, [r0, #0]
   41bfe:	bf18      	it	ne
   41c00:	3604      	addne	r6, #4
   41c02:	46ab      	mov	fp, r5
   41c04:	9301      	str	r3, [sp, #4]
   41c06:	1f37      	subs	r7, r6, #4
   41c08:	f846 5c04 	str.w	r5, [r6, #-4]
   41c0c:	9502      	str	r5, [sp, #8]
   41c0e:	46b9      	mov	r9, r7
   41c10:	463c      	mov	r4, r7
   41c12:	1c53      	adds	r3, r2, #1
   41c14:	7851      	ldrb	r1, [r2, #1]
   41c16:	9303      	str	r3, [sp, #12]
   41c18:	b341      	cbz	r1, 41c6c <__hexnan+0x8a>
   41c1a:	4608      	mov	r0, r1
   41c1c:	9205      	str	r2, [sp, #20]
   41c1e:	9104      	str	r1, [sp, #16]
   41c20:	f7ff ffa4 	bl	41b6c <__hexdig_fun>
   41c24:	2800      	cmp	r0, #0
   41c26:	d14f      	bne.n	41cc8 <__hexnan+0xe6>
   41c28:	9904      	ldr	r1, [sp, #16]
   41c2a:	9a05      	ldr	r2, [sp, #20]
   41c2c:	2920      	cmp	r1, #32
   41c2e:	d818      	bhi.n	41c62 <__hexnan+0x80>
   41c30:	9b02      	ldr	r3, [sp, #8]
   41c32:	459b      	cmp	fp, r3
   41c34:	dd13      	ble.n	41c5e <__hexnan+0x7c>
   41c36:	454c      	cmp	r4, r9
   41c38:	d206      	bcs.n	41c48 <__hexnan+0x66>
   41c3a:	2d07      	cmp	r5, #7
   41c3c:	dc04      	bgt.n	41c48 <__hexnan+0x66>
   41c3e:	462a      	mov	r2, r5
   41c40:	4649      	mov	r1, r9
   41c42:	4620      	mov	r0, r4
   41c44:	f7ff ffa7 	bl	41b96 <L_shift>
   41c48:	4544      	cmp	r4, r8
   41c4a:	d94f      	bls.n	41cec <__hexnan+0x10a>
   41c4c:	2300      	movs	r3, #0
   41c4e:	f1a4 0904 	sub.w	r9, r4, #4
   41c52:	f8cd b008 	str.w	fp, [sp, #8]
   41c56:	f844 3c04 	str.w	r3, [r4, #-4]
   41c5a:	461d      	mov	r5, r3
   41c5c:	464c      	mov	r4, r9
   41c5e:	9a03      	ldr	r2, [sp, #12]
   41c60:	e7d7      	b.n	41c12 <__hexnan+0x30>
   41c62:	2929      	cmp	r1, #41	; 0x29
   41c64:	d155      	bne.n	41d12 <__hexnan+0x130>
   41c66:	3202      	adds	r2, #2
   41c68:	f8ca 2000 	str.w	r2, [sl]
   41c6c:	f1bb 0f00 	cmp.w	fp, #0
   41c70:	d04f      	beq.n	41d12 <__hexnan+0x130>
   41c72:	454c      	cmp	r4, r9
   41c74:	d206      	bcs.n	41c84 <__hexnan+0xa2>
   41c76:	2d07      	cmp	r5, #7
   41c78:	dc04      	bgt.n	41c84 <__hexnan+0xa2>
   41c7a:	462a      	mov	r2, r5
   41c7c:	4649      	mov	r1, r9
   41c7e:	4620      	mov	r0, r4
   41c80:	f7ff ff89 	bl	41b96 <L_shift>
   41c84:	4544      	cmp	r4, r8
   41c86:	d933      	bls.n	41cf0 <__hexnan+0x10e>
   41c88:	f1a8 0204 	sub.w	r2, r8, #4
   41c8c:	4623      	mov	r3, r4
   41c8e:	f853 1b04 	ldr.w	r1, [r3], #4
   41c92:	429f      	cmp	r7, r3
   41c94:	f842 1f04 	str.w	r1, [r2, #4]!
   41c98:	d2f9      	bcs.n	41c8e <__hexnan+0xac>
   41c9a:	1b3b      	subs	r3, r7, r4
   41c9c:	3e03      	subs	r6, #3
   41c9e:	3401      	adds	r4, #1
   41ca0:	2200      	movs	r2, #0
   41ca2:	f023 0303 	bic.w	r3, r3, #3
   41ca6:	3304      	adds	r3, #4
   41ca8:	42b4      	cmp	r4, r6
   41caa:	bf88      	it	hi
   41cac:	2304      	movhi	r3, #4
   41cae:	4443      	add	r3, r8
   41cb0:	f843 2b04 	str.w	r2, [r3], #4
   41cb4:	429f      	cmp	r7, r3
   41cb6:	d2fb      	bcs.n	41cb0 <__hexnan+0xce>
   41cb8:	683b      	ldr	r3, [r7, #0]
   41cba:	b91b      	cbnz	r3, 41cc4 <__hexnan+0xe2>
   41cbc:	4547      	cmp	r7, r8
   41cbe:	d126      	bne.n	41d0e <__hexnan+0x12c>
   41cc0:	2301      	movs	r3, #1
   41cc2:	603b      	str	r3, [r7, #0]
   41cc4:	2005      	movs	r0, #5
   41cc6:	e025      	b.n	41d14 <__hexnan+0x132>
   41cc8:	3501      	adds	r5, #1
   41cca:	f10b 0b01 	add.w	fp, fp, #1
   41cce:	2d08      	cmp	r5, #8
   41cd0:	dd05      	ble.n	41cde <__hexnan+0xfc>
   41cd2:	4544      	cmp	r4, r8
   41cd4:	d9c3      	bls.n	41c5e <__hexnan+0x7c>
   41cd6:	2300      	movs	r3, #0
   41cd8:	3c04      	subs	r4, #4
   41cda:	2501      	movs	r5, #1
   41cdc:	6023      	str	r3, [r4, #0]
   41cde:	6822      	ldr	r2, [r4, #0]
   41ce0:	f000 000f 	and.w	r0, r0, #15
   41ce4:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   41ce8:	6022      	str	r2, [r4, #0]
   41cea:	e7b8      	b.n	41c5e <__hexnan+0x7c>
   41cec:	2508      	movs	r5, #8
   41cee:	e7b6      	b.n	41c5e <__hexnan+0x7c>
   41cf0:	9b01      	ldr	r3, [sp, #4]
   41cf2:	2b00      	cmp	r3, #0
   41cf4:	d0e0      	beq.n	41cb8 <__hexnan+0xd6>
   41cf6:	f04f 32ff 	mov.w	r2, #4294967295
   41cfa:	f1c3 0320 	rsb	r3, r3, #32
   41cfe:	fa22 f303 	lsr.w	r3, r2, r3
   41d02:	f856 2c04 	ldr.w	r2, [r6, #-4]
   41d06:	401a      	ands	r2, r3
   41d08:	f846 2c04 	str.w	r2, [r6, #-4]
   41d0c:	e7d4      	b.n	41cb8 <__hexnan+0xd6>
   41d0e:	3f04      	subs	r7, #4
   41d10:	e7d2      	b.n	41cb8 <__hexnan+0xd6>
   41d12:	2004      	movs	r0, #4
   41d14:	b007      	add	sp, #28
   41d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00041d1a <__swhatbuf_r>:
   41d1a:	b570      	push	{r4, r5, r6, lr}
   41d1c:	460e      	mov	r6, r1
   41d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41d22:	b096      	sub	sp, #88	; 0x58
   41d24:	4614      	mov	r4, r2
   41d26:	2900      	cmp	r1, #0
   41d28:	461d      	mov	r5, r3
   41d2a:	da08      	bge.n	41d3e <__swhatbuf_r+0x24>
   41d2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   41d30:	2200      	movs	r2, #0
   41d32:	602a      	str	r2, [r5, #0]
   41d34:	061a      	lsls	r2, r3, #24
   41d36:	d410      	bmi.n	41d5a <__swhatbuf_r+0x40>
   41d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
   41d3c:	e00e      	b.n	41d5c <__swhatbuf_r+0x42>
   41d3e:	466a      	mov	r2, sp
   41d40:	f7fa fc06 	bl	3c550 <_fstat_r>
   41d44:	2800      	cmp	r0, #0
   41d46:	dbf1      	blt.n	41d2c <__swhatbuf_r+0x12>
   41d48:	9a01      	ldr	r2, [sp, #4]
   41d4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   41d4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   41d52:	425a      	negs	r2, r3
   41d54:	415a      	adcs	r2, r3
   41d56:	602a      	str	r2, [r5, #0]
   41d58:	e7ee      	b.n	41d38 <__swhatbuf_r+0x1e>
   41d5a:	2340      	movs	r3, #64	; 0x40
   41d5c:	2000      	movs	r0, #0
   41d5e:	6023      	str	r3, [r4, #0]
   41d60:	b016      	add	sp, #88	; 0x58
   41d62:	bd70      	pop	{r4, r5, r6, pc}

00041d64 <__ascii_mbtowc>:
   41d64:	b082      	sub	sp, #8
   41d66:	b901      	cbnz	r1, 41d6a <__ascii_mbtowc+0x6>
   41d68:	a901      	add	r1, sp, #4
   41d6a:	b142      	cbz	r2, 41d7e <__ascii_mbtowc+0x1a>
   41d6c:	b14b      	cbz	r3, 41d82 <__ascii_mbtowc+0x1e>
   41d6e:	7813      	ldrb	r3, [r2, #0]
   41d70:	600b      	str	r3, [r1, #0]
   41d72:	7812      	ldrb	r2, [r2, #0]
   41d74:	1e10      	subs	r0, r2, #0
   41d76:	bf18      	it	ne
   41d78:	2001      	movne	r0, #1
   41d7a:	b002      	add	sp, #8
   41d7c:	4770      	bx	lr
   41d7e:	4610      	mov	r0, r2
   41d80:	e7fb      	b.n	41d7a <__ascii_mbtowc+0x16>
   41d82:	f06f 0001 	mvn.w	r0, #1
   41d86:	e7f8      	b.n	41d7a <__ascii_mbtowc+0x16>

00041d88 <memmove>:
   41d88:	4288      	cmp	r0, r1
   41d8a:	b510      	push	{r4, lr}
   41d8c:	eb01 0402 	add.w	r4, r1, r2
   41d90:	d902      	bls.n	41d98 <memmove+0x10>
   41d92:	4284      	cmp	r4, r0
   41d94:	4623      	mov	r3, r4
   41d96:	d807      	bhi.n	41da8 <memmove+0x20>
   41d98:	1e43      	subs	r3, r0, #1
   41d9a:	42a1      	cmp	r1, r4
   41d9c:	d008      	beq.n	41db0 <memmove+0x28>
   41d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
   41da2:	f803 2f01 	strb.w	r2, [r3, #1]!
   41da6:	e7f8      	b.n	41d9a <memmove+0x12>
   41da8:	4402      	add	r2, r0
   41daa:	4601      	mov	r1, r0
   41dac:	428a      	cmp	r2, r1
   41dae:	d100      	bne.n	41db2 <memmove+0x2a>
   41db0:	bd10      	pop	{r4, pc}
   41db2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   41db6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   41dba:	e7f7      	b.n	41dac <memmove+0x24>

00041dbc <__hi0bits>:
   41dbc:	0c03      	lsrs	r3, r0, #16
   41dbe:	041b      	lsls	r3, r3, #16
   41dc0:	b9d3      	cbnz	r3, 41df8 <__hi0bits+0x3c>
   41dc2:	0400      	lsls	r0, r0, #16
   41dc4:	2310      	movs	r3, #16
   41dc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   41dca:	bf04      	itt	eq
   41dcc:	0200      	lsleq	r0, r0, #8
   41dce:	3308      	addeq	r3, #8
   41dd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   41dd4:	bf04      	itt	eq
   41dd6:	0100      	lsleq	r0, r0, #4
   41dd8:	3304      	addeq	r3, #4
   41dda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   41dde:	bf04      	itt	eq
   41de0:	0080      	lsleq	r0, r0, #2
   41de2:	3302      	addeq	r3, #2
   41de4:	2800      	cmp	r0, #0
   41de6:	db05      	blt.n	41df4 <__hi0bits+0x38>
   41de8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   41dec:	f103 0301 	add.w	r3, r3, #1
   41df0:	bf08      	it	eq
   41df2:	2320      	moveq	r3, #32
   41df4:	4618      	mov	r0, r3
   41df6:	4770      	bx	lr
   41df8:	2300      	movs	r3, #0
   41dfa:	e7e4      	b.n	41dc6 <__hi0bits+0xa>

00041dfc <__lo0bits>:
   41dfc:	6803      	ldr	r3, [r0, #0]
   41dfe:	4601      	mov	r1, r0
   41e00:	f013 0207 	ands.w	r2, r3, #7
   41e04:	d00b      	beq.n	41e1e <__lo0bits+0x22>
   41e06:	07da      	lsls	r2, r3, #31
   41e08:	d423      	bmi.n	41e52 <__lo0bits+0x56>
   41e0a:	0798      	lsls	r0, r3, #30
   41e0c:	bf47      	ittee	mi
   41e0e:	085b      	lsrmi	r3, r3, #1
   41e10:	2001      	movmi	r0, #1
   41e12:	089b      	lsrpl	r3, r3, #2
   41e14:	2002      	movpl	r0, #2
   41e16:	bf4c      	ite	mi
   41e18:	600b      	strmi	r3, [r1, #0]
   41e1a:	600b      	strpl	r3, [r1, #0]
   41e1c:	4770      	bx	lr
   41e1e:	b298      	uxth	r0, r3
   41e20:	b9a8      	cbnz	r0, 41e4e <__lo0bits+0x52>
   41e22:	0c1b      	lsrs	r3, r3, #16
   41e24:	2010      	movs	r0, #16
   41e26:	b2da      	uxtb	r2, r3
   41e28:	b90a      	cbnz	r2, 41e2e <__lo0bits+0x32>
   41e2a:	3008      	adds	r0, #8
   41e2c:	0a1b      	lsrs	r3, r3, #8
   41e2e:	071a      	lsls	r2, r3, #28
   41e30:	bf04      	itt	eq
   41e32:	091b      	lsreq	r3, r3, #4
   41e34:	3004      	addeq	r0, #4
   41e36:	079a      	lsls	r2, r3, #30
   41e38:	bf04      	itt	eq
   41e3a:	089b      	lsreq	r3, r3, #2
   41e3c:	3002      	addeq	r0, #2
   41e3e:	07da      	lsls	r2, r3, #31
   41e40:	d403      	bmi.n	41e4a <__lo0bits+0x4e>
   41e42:	085b      	lsrs	r3, r3, #1
   41e44:	f100 0001 	add.w	r0, r0, #1
   41e48:	d005      	beq.n	41e56 <__lo0bits+0x5a>
   41e4a:	600b      	str	r3, [r1, #0]
   41e4c:	4770      	bx	lr
   41e4e:	4610      	mov	r0, r2
   41e50:	e7e9      	b.n	41e26 <__lo0bits+0x2a>
   41e52:	2000      	movs	r0, #0
   41e54:	4770      	bx	lr
   41e56:	2020      	movs	r0, #32
   41e58:	4770      	bx	lr

00041e5a <__mcmp>:
   41e5a:	6902      	ldr	r2, [r0, #16]
   41e5c:	b530      	push	{r4, r5, lr}
   41e5e:	690c      	ldr	r4, [r1, #16]
   41e60:	1b12      	subs	r2, r2, r4
   41e62:	d10e      	bne.n	41e82 <__mcmp+0x28>
   41e64:	f100 0314 	add.w	r3, r0, #20
   41e68:	3114      	adds	r1, #20
   41e6a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   41e6e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   41e72:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   41e76:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   41e7a:	42a5      	cmp	r5, r4
   41e7c:	d003      	beq.n	41e86 <__mcmp+0x2c>
   41e7e:	d305      	bcc.n	41e8c <__mcmp+0x32>
   41e80:	2201      	movs	r2, #1
   41e82:	4610      	mov	r0, r2
   41e84:	bd30      	pop	{r4, r5, pc}
   41e86:	4283      	cmp	r3, r0
   41e88:	d3f3      	bcc.n	41e72 <__mcmp+0x18>
   41e8a:	e7fa      	b.n	41e82 <__mcmp+0x28>
   41e8c:	f04f 32ff 	mov.w	r2, #4294967295
   41e90:	e7f7      	b.n	41e82 <__mcmp+0x28>

00041e92 <__ratio>:
   41e92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41e96:	4688      	mov	r8, r1
   41e98:	4681      	mov	r9, r0
   41e9a:	4669      	mov	r1, sp
   41e9c:	f7f9 feac 	bl	3bbf8 <__b2d>
   41ea0:	460f      	mov	r7, r1
   41ea2:	4604      	mov	r4, r0
   41ea4:	460d      	mov	r5, r1
   41ea6:	4640      	mov	r0, r8
   41ea8:	a901      	add	r1, sp, #4
   41eaa:	f7f9 fea5 	bl	3bbf8 <__b2d>
   41eae:	f8d9 3010 	ldr.w	r3, [r9, #16]
   41eb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
   41eb6:	468b      	mov	fp, r1
   41eb8:	eba3 0c02 	sub.w	ip, r3, r2
   41ebc:	e9dd 3200 	ldrd	r3, r2, [sp]
   41ec0:	1a9b      	subs	r3, r3, r2
   41ec2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   41ec6:	2b00      	cmp	r3, #0
   41ec8:	bfdb      	ittet	le
   41eca:	460a      	movle	r2, r1
   41ecc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   41ed0:	462a      	movgt	r2, r5
   41ed2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   41ed6:	bfc8      	it	gt
   41ed8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   41edc:	4602      	mov	r2, r0
   41ede:	465b      	mov	r3, fp
   41ee0:	4620      	mov	r0, r4
   41ee2:	4639      	mov	r1, r7
   41ee4:	f7da fd92 	bl	1ca0c <__aeabi_ddiv>
   41ee8:	b003      	add	sp, #12
   41eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00041eee <__copybits>:
   41eee:	3901      	subs	r1, #1
   41ef0:	f102 0314 	add.w	r3, r2, #20
   41ef4:	1149      	asrs	r1, r1, #5
   41ef6:	b570      	push	{r4, r5, r6, lr}
   41ef8:	3101      	adds	r1, #1
   41efa:	6914      	ldr	r4, [r2, #16]
   41efc:	1f05      	subs	r5, r0, #4
   41efe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   41f02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   41f06:	42a3      	cmp	r3, r4
   41f08:	d30c      	bcc.n	41f24 <__copybits+0x36>
   41f0a:	1aa3      	subs	r3, r4, r2
   41f0c:	3211      	adds	r2, #17
   41f0e:	3b11      	subs	r3, #17
   41f10:	f023 0303 	bic.w	r3, r3, #3
   41f14:	42a2      	cmp	r2, r4
   41f16:	bf88      	it	hi
   41f18:	2300      	movhi	r3, #0
   41f1a:	4418      	add	r0, r3
   41f1c:	2300      	movs	r3, #0
   41f1e:	4288      	cmp	r0, r1
   41f20:	d305      	bcc.n	41f2e <__copybits+0x40>
   41f22:	bd70      	pop	{r4, r5, r6, pc}
   41f24:	f853 6b04 	ldr.w	r6, [r3], #4
   41f28:	f845 6f04 	str.w	r6, [r5, #4]!
   41f2c:	e7eb      	b.n	41f06 <__copybits+0x18>
   41f2e:	f840 3b04 	str.w	r3, [r0], #4
   41f32:	e7f4      	b.n	41f1e <__copybits+0x30>

00041f34 <__any_on>:
   41f34:	f100 0214 	add.w	r2, r0, #20
   41f38:	114b      	asrs	r3, r1, #5
   41f3a:	6900      	ldr	r0, [r0, #16]
   41f3c:	4298      	cmp	r0, r3
   41f3e:	b510      	push	{r4, lr}
   41f40:	db11      	blt.n	41f66 <__any_on+0x32>
   41f42:	dd0a      	ble.n	41f5a <__any_on+0x26>
   41f44:	f011 011f 	ands.w	r1, r1, #31
   41f48:	d007      	beq.n	41f5a <__any_on+0x26>
   41f4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   41f4e:	fa24 f001 	lsr.w	r0, r4, r1
   41f52:	fa00 f101 	lsl.w	r1, r0, r1
   41f56:	428c      	cmp	r4, r1
   41f58:	d10b      	bne.n	41f72 <__any_on+0x3e>
   41f5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   41f5e:	4293      	cmp	r3, r2
   41f60:	d803      	bhi.n	41f6a <__any_on+0x36>
   41f62:	2000      	movs	r0, #0
   41f64:	bd10      	pop	{r4, pc}
   41f66:	4603      	mov	r3, r0
   41f68:	e7f7      	b.n	41f5a <__any_on+0x26>
   41f6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   41f6e:	2900      	cmp	r1, #0
   41f70:	d0f5      	beq.n	41f5e <__any_on+0x2a>
   41f72:	2001      	movs	r0, #1
   41f74:	e7f6      	b.n	41f64 <__any_on+0x30>

00041f76 <_realloc_r>:
   41f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41f78:	4607      	mov	r7, r0
   41f7a:	4614      	mov	r4, r2
   41f7c:	460e      	mov	r6, r1
   41f7e:	b921      	cbnz	r1, 41f8a <_realloc_r+0x14>
   41f80:	4611      	mov	r1, r2
   41f82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   41f86:	f7f7 be75 	b.w	39c74 <_malloc_r>
   41f8a:	b922      	cbnz	r2, 41f96 <_realloc_r+0x20>
   41f8c:	4625      	mov	r5, r4
   41f8e:	f7f7 fe25 	bl	39bdc <_free_r>
   41f92:	4628      	mov	r0, r5
   41f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   41f96:	f000 f96f 	bl	42278 <_malloc_usable_size_r>
   41f9a:	42a0      	cmp	r0, r4
   41f9c:	d20f      	bcs.n	41fbe <_realloc_r+0x48>
   41f9e:	4621      	mov	r1, r4
   41fa0:	4638      	mov	r0, r7
   41fa2:	f7f7 fe67 	bl	39c74 <_malloc_r>
   41fa6:	4605      	mov	r5, r0
   41fa8:	2800      	cmp	r0, #0
   41faa:	d0f2      	beq.n	41f92 <_realloc_r+0x1c>
   41fac:	4631      	mov	r1, r6
   41fae:	4622      	mov	r2, r4
   41fb0:	f7ff fa20 	bl	413f4 <memcpy>
   41fb4:	4631      	mov	r1, r6
   41fb6:	4638      	mov	r0, r7
   41fb8:	f7f7 fe10 	bl	39bdc <_free_r>
   41fbc:	e7e9      	b.n	41f92 <_realloc_r+0x1c>
   41fbe:	4635      	mov	r5, r6
   41fc0:	e7e7      	b.n	41f92 <_realloc_r+0x1c>

00041fc2 <__ssputs_r>:
   41fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41fc6:	688e      	ldr	r6, [r1, #8]
   41fc8:	4682      	mov	sl, r0
   41fca:	460c      	mov	r4, r1
   41fcc:	4690      	mov	r8, r2
   41fce:	429e      	cmp	r6, r3
   41fd0:	461f      	mov	r7, r3
   41fd2:	d838      	bhi.n	42046 <__ssputs_r+0x84>
   41fd4:	898a      	ldrh	r2, [r1, #12]
   41fd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
   41fda:	d032      	beq.n	42042 <__ssputs_r+0x80>
   41fdc:	6825      	ldr	r5, [r4, #0]
   41fde:	3301      	adds	r3, #1
   41fe0:	6909      	ldr	r1, [r1, #16]
   41fe2:	eba5 0901 	sub.w	r9, r5, r1
   41fe6:	6965      	ldr	r5, [r4, #20]
   41fe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   41fec:	444b      	add	r3, r9
   41fee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   41ff2:	106d      	asrs	r5, r5, #1
   41ff4:	429d      	cmp	r5, r3
   41ff6:	bf38      	it	cc
   41ff8:	461d      	movcc	r5, r3
   41ffa:	0553      	lsls	r3, r2, #21
   41ffc:	d531      	bpl.n	42062 <__ssputs_r+0xa0>
   41ffe:	4629      	mov	r1, r5
   42000:	f7f7 fe38 	bl	39c74 <_malloc_r>
   42004:	4606      	mov	r6, r0
   42006:	b950      	cbnz	r0, 4201e <__ssputs_r+0x5c>
   42008:	230c      	movs	r3, #12
   4200a:	f04f 30ff 	mov.w	r0, #4294967295
   4200e:	f8ca 3000 	str.w	r3, [sl]
   42012:	89a3      	ldrh	r3, [r4, #12]
   42014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   42018:	81a3      	strh	r3, [r4, #12]
   4201a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4201e:	464a      	mov	r2, r9
   42020:	6921      	ldr	r1, [r4, #16]
   42022:	f7ff f9e7 	bl	413f4 <memcpy>
   42026:	89a3      	ldrh	r3, [r4, #12]
   42028:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   4202c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   42030:	81a3      	strh	r3, [r4, #12]
   42032:	6126      	str	r6, [r4, #16]
   42034:	444e      	add	r6, r9
   42036:	6165      	str	r5, [r4, #20]
   42038:	eba5 0509 	sub.w	r5, r5, r9
   4203c:	6026      	str	r6, [r4, #0]
   4203e:	463e      	mov	r6, r7
   42040:	60a5      	str	r5, [r4, #8]
   42042:	42be      	cmp	r6, r7
   42044:	d900      	bls.n	42048 <__ssputs_r+0x86>
   42046:	463e      	mov	r6, r7
   42048:	4632      	mov	r2, r6
   4204a:	4641      	mov	r1, r8
   4204c:	6820      	ldr	r0, [r4, #0]
   4204e:	f7ff fe9b 	bl	41d88 <memmove>
   42052:	68a3      	ldr	r3, [r4, #8]
   42054:	2000      	movs	r0, #0
   42056:	1b9b      	subs	r3, r3, r6
   42058:	60a3      	str	r3, [r4, #8]
   4205a:	6823      	ldr	r3, [r4, #0]
   4205c:	4433      	add	r3, r6
   4205e:	6023      	str	r3, [r4, #0]
   42060:	e7db      	b.n	4201a <__ssputs_r+0x58>
   42062:	462a      	mov	r2, r5
   42064:	f7ff ff87 	bl	41f76 <_realloc_r>
   42068:	4606      	mov	r6, r0
   4206a:	2800      	cmp	r0, #0
   4206c:	d1e1      	bne.n	42032 <__ssputs_r+0x70>
   4206e:	6921      	ldr	r1, [r4, #16]
   42070:	4650      	mov	r0, sl
   42072:	f7f7 fdb3 	bl	39bdc <_free_r>
   42076:	e7c7      	b.n	42008 <__ssputs_r+0x46>

00042078 <_sungetc_r>:
   42078:	b538      	push	{r3, r4, r5, lr}
   4207a:	1c4b      	adds	r3, r1, #1
   4207c:	4614      	mov	r4, r2
   4207e:	d103      	bne.n	42088 <_sungetc_r+0x10>
   42080:	f04f 35ff 	mov.w	r5, #4294967295
   42084:	4628      	mov	r0, r5
   42086:	bd38      	pop	{r3, r4, r5, pc}
   42088:	8993      	ldrh	r3, [r2, #12]
   4208a:	b2cd      	uxtb	r5, r1
   4208c:	f023 0320 	bic.w	r3, r3, #32
   42090:	8193      	strh	r3, [r2, #12]
   42092:	6b63      	ldr	r3, [r4, #52]	; 0x34
   42094:	6852      	ldr	r2, [r2, #4]
   42096:	b18b      	cbz	r3, 420bc <_sungetc_r+0x44>
   42098:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   4209a:	4293      	cmp	r3, r2
   4209c:	dd08      	ble.n	420b0 <_sungetc_r+0x38>
   4209e:	6823      	ldr	r3, [r4, #0]
   420a0:	1e5a      	subs	r2, r3, #1
   420a2:	6022      	str	r2, [r4, #0]
   420a4:	f803 5c01 	strb.w	r5, [r3, #-1]
   420a8:	6863      	ldr	r3, [r4, #4]
   420aa:	3301      	adds	r3, #1
   420ac:	6063      	str	r3, [r4, #4]
   420ae:	e7e9      	b.n	42084 <_sungetc_r+0xc>
   420b0:	4621      	mov	r1, r4
   420b2:	f000 f89d 	bl	421f0 <__submore>
   420b6:	2800      	cmp	r0, #0
   420b8:	d0f1      	beq.n	4209e <_sungetc_r+0x26>
   420ba:	e7e1      	b.n	42080 <_sungetc_r+0x8>
   420bc:	6921      	ldr	r1, [r4, #16]
   420be:	6823      	ldr	r3, [r4, #0]
   420c0:	b151      	cbz	r1, 420d8 <_sungetc_r+0x60>
   420c2:	4299      	cmp	r1, r3
   420c4:	d208      	bcs.n	420d8 <_sungetc_r+0x60>
   420c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   420ca:	42a9      	cmp	r1, r5
   420cc:	d104      	bne.n	420d8 <_sungetc_r+0x60>
   420ce:	3b01      	subs	r3, #1
   420d0:	3201      	adds	r2, #1
   420d2:	6023      	str	r3, [r4, #0]
   420d4:	6062      	str	r2, [r4, #4]
   420d6:	e7d5      	b.n	42084 <_sungetc_r+0xc>
   420d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   420dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   420e0:	6363      	str	r3, [r4, #52]	; 0x34
   420e2:	2303      	movs	r3, #3
   420e4:	63a3      	str	r3, [r4, #56]	; 0x38
   420e6:	4623      	mov	r3, r4
   420e8:	f803 5f46 	strb.w	r5, [r3, #70]!
   420ec:	6023      	str	r3, [r4, #0]
   420ee:	2301      	movs	r3, #1
   420f0:	e7dc      	b.n	420ac <_sungetc_r+0x34>

000420f2 <__ssrefill_r>:
   420f2:	b510      	push	{r4, lr}
   420f4:	460c      	mov	r4, r1
   420f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
   420f8:	b169      	cbz	r1, 42116 <__ssrefill_r+0x24>
   420fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
   420fe:	4299      	cmp	r1, r3
   42100:	d001      	beq.n	42106 <__ssrefill_r+0x14>
   42102:	f7f7 fd6b 	bl	39bdc <_free_r>
   42106:	2000      	movs	r0, #0
   42108:	6c23      	ldr	r3, [r4, #64]	; 0x40
   4210a:	6360      	str	r0, [r4, #52]	; 0x34
   4210c:	6063      	str	r3, [r4, #4]
   4210e:	b113      	cbz	r3, 42116 <__ssrefill_r+0x24>
   42110:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   42112:	6023      	str	r3, [r4, #0]
   42114:	bd10      	pop	{r4, pc}
   42116:	6923      	ldr	r3, [r4, #16]
   42118:	f04f 30ff 	mov.w	r0, #4294967295
   4211c:	6023      	str	r3, [r4, #0]
   4211e:	2300      	movs	r3, #0
   42120:	6063      	str	r3, [r4, #4]
   42122:	89a3      	ldrh	r3, [r4, #12]
   42124:	f043 0320 	orr.w	r3, r3, #32
   42128:	81a3      	strh	r3, [r4, #12]
   4212a:	e7f3      	b.n	42114 <__ssrefill_r+0x22>

0004212c <__sccl>:
   4212c:	b570      	push	{r4, r5, r6, lr}
   4212e:	780b      	ldrb	r3, [r1, #0]
   42130:	4604      	mov	r4, r0
   42132:	2b5e      	cmp	r3, #94	; 0x5e
   42134:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   42138:	bf13      	iteet	ne
   4213a:	1c48      	addne	r0, r1, #1
   4213c:	1c88      	addeq	r0, r1, #2
   4213e:	784b      	ldrbeq	r3, [r1, #1]
   42140:	2200      	movne	r2, #0
   42142:	bf08      	it	eq
   42144:	2201      	moveq	r2, #1
   42146:	1e61      	subs	r1, r4, #1
   42148:	f801 2f01 	strb.w	r2, [r1, #1]!
   4214c:	42a9      	cmp	r1, r5
   4214e:	d1fb      	bne.n	42148 <__sccl+0x1c>
   42150:	b90b      	cbnz	r3, 42156 <__sccl+0x2a>
   42152:	3801      	subs	r0, #1
   42154:	bd70      	pop	{r4, r5, r6, pc}
   42156:	f082 0201 	eor.w	r2, r2, #1
   4215a:	4605      	mov	r5, r0
   4215c:	54e2      	strb	r2, [r4, r3]
   4215e:	4628      	mov	r0, r5
   42160:	f810 1b01 	ldrb.w	r1, [r0], #1
   42164:	292d      	cmp	r1, #45	; 0x2d
   42166:	d006      	beq.n	42176 <__sccl+0x4a>
   42168:	295d      	cmp	r1, #93	; 0x5d
   4216a:	d0f3      	beq.n	42154 <__sccl+0x28>
   4216c:	b909      	cbnz	r1, 42172 <__sccl+0x46>
   4216e:	4628      	mov	r0, r5
   42170:	e7f0      	b.n	42154 <__sccl+0x28>
   42172:	460b      	mov	r3, r1
   42174:	e7f1      	b.n	4215a <__sccl+0x2e>
   42176:	786e      	ldrb	r6, [r5, #1]
   42178:	2e5d      	cmp	r6, #93	; 0x5d
   4217a:	d0fa      	beq.n	42172 <__sccl+0x46>
   4217c:	42b3      	cmp	r3, r6
   4217e:	dcf8      	bgt.n	42172 <__sccl+0x46>
   42180:	3502      	adds	r5, #2
   42182:	4619      	mov	r1, r3
   42184:	3101      	adds	r1, #1
   42186:	428e      	cmp	r6, r1
   42188:	5462      	strb	r2, [r4, r1]
   4218a:	dcfb      	bgt.n	42184 <__sccl+0x58>
   4218c:	1af1      	subs	r1, r6, r3
   4218e:	1c58      	adds	r0, r3, #1
   42190:	3901      	subs	r1, #1
   42192:	42b3      	cmp	r3, r6
   42194:	bfa8      	it	ge
   42196:	2100      	movge	r1, #0
   42198:	1843      	adds	r3, r0, r1
   4219a:	e7e0      	b.n	4215e <__sccl+0x32>

0004219c <_raise_r>:
   4219c:	291f      	cmp	r1, #31
   4219e:	b538      	push	{r3, r4, r5, lr}
   421a0:	4604      	mov	r4, r0
   421a2:	460d      	mov	r5, r1
   421a4:	d904      	bls.n	421b0 <_raise_r+0x14>
   421a6:	2316      	movs	r3, #22
   421a8:	6003      	str	r3, [r0, #0]
   421aa:	f04f 30ff 	mov.w	r0, #4294967295
   421ae:	bd38      	pop	{r3, r4, r5, pc}
   421b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
   421b2:	b112      	cbz	r2, 421ba <_raise_r+0x1e>
   421b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   421b8:	b94b      	cbnz	r3, 421ce <_raise_r+0x32>
   421ba:	4620      	mov	r0, r4
   421bc:	f000 f816 	bl	421ec <_getpid_r>
   421c0:	462a      	mov	r2, r5
   421c2:	4601      	mov	r1, r0
   421c4:	4620      	mov	r0, r4
   421c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   421ca:	f7fa b9af 	b.w	3c52c <_kill_r>
   421ce:	2b01      	cmp	r3, #1
   421d0:	d00a      	beq.n	421e8 <_raise_r+0x4c>
   421d2:	1c59      	adds	r1, r3, #1
   421d4:	d103      	bne.n	421de <_raise_r+0x42>
   421d6:	2316      	movs	r3, #22
   421d8:	6003      	str	r3, [r0, #0]
   421da:	2001      	movs	r0, #1
   421dc:	e7e7      	b.n	421ae <_raise_r+0x12>
   421de:	2400      	movs	r4, #0
   421e0:	4628      	mov	r0, r5
   421e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   421e6:	4798      	blx	r3
   421e8:	2000      	movs	r0, #0
   421ea:	e7e0      	b.n	421ae <_raise_r+0x12>

000421ec <_getpid_r>:
   421ec:	f7fb bac0 	b.w	3d770 <_getpid>

000421f0 <__submore>:
   421f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   421f4:	460c      	mov	r4, r1
   421f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
   421f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   421fc:	4299      	cmp	r1, r3
   421fe:	d11a      	bne.n	42236 <__submore+0x46>
   42200:	f44f 6180 	mov.w	r1, #1024	; 0x400
   42204:	f7f7 fd36 	bl	39c74 <_malloc_r>
   42208:	b918      	cbnz	r0, 42212 <__submore+0x22>
   4220a:	f04f 30ff 	mov.w	r0, #4294967295
   4220e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   42212:	f44f 6380 	mov.w	r3, #1024	; 0x400
   42216:	6360      	str	r0, [r4, #52]	; 0x34
   42218:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   4221c:	63a3      	str	r3, [r4, #56]	; 0x38
   4221e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   42222:	7083      	strb	r3, [r0, #2]
   42224:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   42228:	7043      	strb	r3, [r0, #1]
   4222a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   4222e:	7003      	strb	r3, [r0, #0]
   42230:	6020      	str	r0, [r4, #0]
   42232:	2000      	movs	r0, #0
   42234:	e7eb      	b.n	4220e <__submore+0x1e>
   42236:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   42238:	0077      	lsls	r7, r6, #1
   4223a:	463a      	mov	r2, r7
   4223c:	f7ff fe9b 	bl	41f76 <_realloc_r>
   42240:	4605      	mov	r5, r0
   42242:	2800      	cmp	r0, #0
   42244:	d0e1      	beq.n	4220a <__submore+0x1a>
   42246:	eb00 0806 	add.w	r8, r0, r6
   4224a:	4601      	mov	r1, r0
   4224c:	4632      	mov	r2, r6
   4224e:	4640      	mov	r0, r8
   42250:	f7ff f8d0 	bl	413f4 <memcpy>
   42254:	f8c4 8000 	str.w	r8, [r4]
   42258:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   4225c:	e7e9      	b.n	42232 <__submore+0x42>

0004225e <__ascii_wctomb>:
   4225e:	b149      	cbz	r1, 42274 <__ascii_wctomb+0x16>
   42260:	2aff      	cmp	r2, #255	; 0xff
   42262:	bf8d      	iteet	hi
   42264:	238a      	movhi	r3, #138	; 0x8a
   42266:	2001      	movls	r0, #1
   42268:	700a      	strbls	r2, [r1, #0]
   4226a:	6003      	strhi	r3, [r0, #0]
   4226c:	bf88      	it	hi
   4226e:	f04f 30ff 	movhi.w	r0, #4294967295
   42272:	4770      	bx	lr
   42274:	4608      	mov	r0, r1
   42276:	4770      	bx	lr

00042278 <_malloc_usable_size_r>:
   42278:	f851 3c04 	ldr.w	r3, [r1, #-4]
   4227c:	1f18      	subs	r0, r3, #4
   4227e:	2b00      	cmp	r3, #0
   42280:	bfbc      	itt	lt
   42282:	580b      	ldrlt	r3, [r1, r0]
   42284:	18c0      	addlt	r0, r0, r3
   42286:	4770      	bx	lr

00042288 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   42288:	f7ef bf58 	b.w	3213c <SystemInit>
